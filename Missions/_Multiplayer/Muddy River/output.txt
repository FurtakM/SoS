// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 70 0 0
// InitMultiplayer ;
  20: CALL 323 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 1628 0 1
  44: PPUSH
  45: CALL 5211 0 1
// Multiplayer_Start ;
  49: CALL 3533 0 0
// ResetFog ;
  53: CALL_OW 335
// game := true ;
  57: LD_ADDR_EXP 2
  61: PUSH
  62: LD_INT 1
  64: ST_TO_ADDR
// Multiplayer_End ;
  65: CALL 3649 0 0
// end ;
  69: END
// export debug , game , side_bot , artifact_get , base_names ; function InitVariables ; begin
  70: LD_INT 0
  72: PPUSH
// debug := false ;
  73: LD_ADDR_EXP 1
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// side_bot := 2 ;
  81: LD_ADDR_EXP 3
  85: PUSH
  86: LD_INT 2
  88: ST_TO_ADDR
// artifact_get := false ;
  89: LD_ADDR_EXP 4
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// base_names := [ base_a , base_b , base_c , base_d , base_e , base_f , base_g , base_h , base_i , base_j , base_k , base_l , base_m , base_n , base_o , base_p , base_r , base_s , base_t , base_u , base_w , base_x , base_y , base_z ] ;
  97: LD_ADDR_EXP 5
 101: PUSH
 102: LD_STRING base_a
 104: PUSH
 105: LD_STRING base_b
 107: PUSH
 108: LD_STRING base_c
 110: PUSH
 111: LD_STRING base_d
 113: PUSH
 114: LD_STRING base_e
 116: PUSH
 117: LD_STRING base_f
 119: PUSH
 120: LD_STRING base_g
 122: PUSH
 123: LD_STRING base_h
 125: PUSH
 126: LD_STRING base_i
 128: PUSH
 129: LD_STRING base_j
 131: PUSH
 132: LD_STRING base_k
 134: PUSH
 135: LD_STRING base_l
 137: PUSH
 138: LD_STRING base_m
 140: PUSH
 141: LD_STRING base_n
 143: PUSH
 144: LD_STRING base_o
 146: PUSH
 147: LD_STRING base_p
 149: PUSH
 150: LD_STRING base_r
 152: PUSH
 153: LD_STRING base_s
 155: PUSH
 156: LD_STRING base_t
 158: PUSH
 159: LD_STRING base_u
 161: PUSH
 162: LD_STRING base_w
 164: PUSH
 165: LD_STRING base_x
 167: PUSH
 168: LD_STRING base_y
 170: PUSH
 171: LD_STRING base_z
 173: PUSH
 174: EMPTY
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: LIST
 180: LIST
 181: LIST
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: LIST
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: LIST
 197: LIST
 198: LIST
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$01 trigger game and not debug_strings do
 205: LD_EXP 2
 209: PUSH
 210: LD_OWVAR 48
 214: NOT
 215: AND
 216: IFFALSE 232
 218: GO 220
 220: DISABLE
// begin enable ;
 221: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 222: LD_ADDR_OWVAR 47
 226: PUSH
 227: CALL 4147 0 0
 231: ST_TO_ADDR
// end ;
 232: END
// function Debuger ; var i ; begin
 233: LD_INT 0
 235: PPUSH
 236: PPUSH
// if not debug then
 237: LD_EXP 1
 241: NOT
 242: IFFALSE 246
// exit ;
 244: GO 318
// game_speed := 5 ;
 246: LD_ADDR_OWVAR 65
 250: PUSH
 251: LD_INT 5
 253: ST_TO_ADDR
// uc_side := 1 ;
 254: LD_ADDR_OWVAR 20
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// uc_nation := 1 ;
 262: LD_ADDR_OWVAR 21
 266: PUSH
 267: LD_INT 1
 269: ST_TO_ADDR
// for i = 1 to 10 do
 270: LD_ADDR_VAR 0 2
 274: PUSH
 275: DOUBLE
 276: LD_INT 1
 278: DEC
 279: ST_TO_ADDR
 280: LD_INT 10
 282: PUSH
 283: FOR_TO
 284: IFFALSE 316
// begin PrepareHuman ( false , 1 , 10 ) ;
 286: LD_INT 0
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 10
 294: PPUSH
 295: CALL_OW 380
// PlaceUnitArea ( CreateHuman , player_1_hum , false ) ;
 299: CALL_OW 44
 303: PPUSH
 304: LD_INT 9
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: CALL_OW 49
// end ;
 314: GO 283
 316: POP
 317: POP
// end ; end_of_file
 318: LD_VAR 0 1
 322: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_ape_amount , multi_support , multi_commanders , multi_loosers , multi_players_amount , multi_reinforcements , multi_reinforcements_spawned , multi_support_arrive_time ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 323: LD_INT 0
 325: PPUSH
 326: PPUSH
 327: PPUSH
 328: PPUSH
 329: PPUSH
// multi_settings_counter := 6 ;
 330: LD_ADDR_EXP 18
 334: PUSH
 335: LD_INT 6
 337: ST_TO_ADDR
// if Multiplayer then
 338: LD_OWVAR 4
 342: IFFALSE 522
// begin your_side := mp_player_side ;
 344: LD_ADDR_OWVAR 2
 348: PUSH
 349: LD_OWVAR 7
 353: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 354: LD_ADDR_EXP 6
 358: PUSH
 359: LD_OWVAR 6
 363: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 364: LD_ADDR_EXP 7
 368: PUSH
 369: LD_OWVAR 17
 373: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 374: LD_ADDR_EXP 8
 378: PUSH
 379: LD_OWVAR 15
 383: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 384: LD_ADDR_EXP 9
 388: PUSH
 389: LD_OWVAR 16
 393: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 394: LD_ADDR_EXP 10
 398: PUSH
 399: EMPTY
 400: PUSH
 401: EMPTY
 402: LIST
 403: ST_TO_ADDR
// for i in mp_teams do
 404: LD_ADDR_VAR 0 2
 408: PUSH
 409: LD_OWVAR 12
 413: PUSH
 414: FOR_IN
 415: IFFALSE 458
// if i then
 417: LD_VAR 0 2
 421: IFFALSE 456
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 423: LD_ADDR_EXP 10
 427: PUSH
 428: LD_EXP 10
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_EXP 10
 440: PUSH
 441: LD_INT 1
 443: ARRAY
 444: PUSH
 445: LD_VAR 0 2
 449: UNION
 450: PPUSH
 451: CALL_OW 1
 455: ST_TO_ADDR
 456: GO 414
 458: POP
 459: POP
// for i := 1 to multi_settings_counter do
 460: LD_ADDR_VAR 0 2
 464: PUSH
 465: DOUBLE
 466: LD_INT 1
 468: DEC
 469: ST_TO_ADDR
 470: LD_EXP 18
 474: PUSH
 475: FOR_TO
 476: IFFALSE 518
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 478: LD_ADDR_EXP 17
 482: PUSH
 483: LD_EXP 17
 487: PPUSH
 488: LD_EXP 17
 492: PUSH
 493: LD_INT 1
 495: PLUS
 496: PPUSH
 497: LD_VAR 0 2
 501: PPUSH
 502: CALL_OW 426
 506: PUSH
 507: LD_INT 1
 509: PLUS
 510: PPUSH
 511: CALL_OW 1
 515: ST_TO_ADDR
 516: GO 475
 518: POP
 519: POP
// end else
 520: GO 704
// begin your_side := 1 ;
 522: LD_ADDR_OWVAR 2
 526: PUSH
 527: LD_INT 1
 529: ST_TO_ADDR
// multi_gametype := 1 ;
 530: LD_ADDR_EXP 6
 534: PUSH
 535: LD_INT 1
 537: ST_TO_ADDR
// multi_sides := [ 2 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 538: LD_ADDR_EXP 7
 542: PUSH
 543: LD_INT 2
 545: PUSH
 546: LD_INT 0
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: LD_INT 0
 554: PUSH
 555: LD_INT 0
 557: PUSH
 558: LD_INT 0
 560: PUSH
 561: LD_INT 0
 563: PUSH
 564: LD_INT 0
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: LIST
 571: LIST
 572: LIST
 573: LIST
 574: LIST
 575: LIST
 576: ST_TO_ADDR
// multi_side_teams := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 577: LD_ADDR_EXP 8
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: LD_INT 1
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 0
 602: PUSH
 603: LD_INT 0
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: ST_TO_ADDR
// multi_nations := [ 1 , 0 , 1 , 0 , 0 , 0 , 0 , 0 ] ;
 616: LD_ADDR_EXP 9
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: LD_INT 0
 626: PUSH
 627: LD_INT 1
 629: PUSH
 630: LD_INT 0
 632: PUSH
 633: LD_INT 0
 635: PUSH
 636: LD_INT 0
 638: PUSH
 639: LD_INT 0
 641: PUSH
 642: LD_INT 0
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: LIST
 649: LIST
 650: LIST
 651: LIST
 652: LIST
 653: LIST
 654: ST_TO_ADDR
// multi_teams := [ [ 1 , 3 ] ] ;
 655: LD_ADDR_EXP 10
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: LD_INT 3
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: EMPTY
 671: LIST
 672: ST_TO_ADDR
// multi_settings := [ 2 , 2 , 1 , 3 , 1 , 3 ] ;
 673: LD_ADDR_EXP 17
 677: PUSH
 678: LD_INT 2
 680: PUSH
 681: LD_INT 2
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 3
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 0
 717: PUSH
 718: LD_INT 0
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 14
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 0
 756: PUSH
 757: LD_INT 0
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 782: LD_ADDR_EXP 25
 786: PUSH
 787: LD_INT 0
 789: PUSH
 790: LD_INT 0
 792: PUSH
 793: LD_INT 0
 795: PUSH
 796: LD_INT 0
 798: PUSH
 799: LD_INT 0
 801: PUSH
 802: LD_INT 0
 804: PUSH
 805: LD_INT 0
 807: PUSH
 808: LD_INT 0
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: LIST
 819: LIST
 820: ST_TO_ADDR
// multi_teamgame := true ;
 821: LD_ADDR_EXP 15
 825: PUSH
 826: LD_INT 1
 828: ST_TO_ADDR
// multi_allowed_nations := [ 1 ] ;
 829: LD_ADDR_EXP 13
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: ST_TO_ADDR
// multi_custom_commanders := true ;
 840: LD_ADDR_EXP 16
 844: PUSH
 845: LD_INT 1
 847: ST_TO_ADDR
// multi_commanders := [ ] ;
 848: LD_ADDR_EXP 24
 852: PUSH
 853: EMPTY
 854: ST_TO_ADDR
// multi_reinforcements := [ ] ;
 855: LD_ADDR_EXP 27
 859: PUSH
 860: EMPTY
 861: ST_TO_ADDR
// multi_reinforcements_spawned := 0 ;
 862: LD_ADDR_EXP 28
 866: PUSH
 867: LD_INT 0
 869: ST_TO_ADDR
// multi_players_amount := 0 ;
 870: LD_ADDR_EXP 26
 874: PUSH
 875: LD_INT 0
 877: ST_TO_ADDR
// multi_pos_area := [ [ player_1_hum , player_1_veh ] , [ player_2_hum , player_2_veh ] , [ player_3_hum , player_3_veh ] ] ;
 878: LD_ADDR_EXP 12
 882: PUSH
 883: LD_INT 9
 885: PUSH
 886: LD_INT 8
 888: PUSH
 889: EMPTY
 890: LIST
 891: LIST
 892: PUSH
 893: LD_INT 27
 895: PUSH
 896: LD_INT 26
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PUSH
 903: LD_INT 29
 905: PUSH
 906: LD_INT 28
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: LIST
 917: ST_TO_ADDR
// for i := 1 to 8 do
 918: LD_ADDR_VAR 0 2
 922: PUSH
 923: DOUBLE
 924: LD_INT 1
 926: DEC
 927: ST_TO_ADDR
 928: LD_INT 8
 930: PUSH
 931: FOR_TO
 932: IFFALSE 1261
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
 934: LD_VAR 0 2
 938: PPUSH
 939: CALL_OW 530
 943: IFFALSE 1101
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
 945: LD_ADDR_EXP 11
 949: PUSH
 950: LD_EXP 11
 954: PPUSH
 955: LD_VAR 0 2
 959: PPUSH
 960: LD_INT 1
 962: PPUSH
 963: CALL_OW 1
 967: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
 968: LD_ADDR_EXP 9
 972: PUSH
 973: LD_EXP 9
 977: PPUSH
 978: LD_VAR 0 2
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL_OW 1
 990: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
 991: LD_ADDR_EXP 7
 995: PUSH
 996: LD_EXP 7
1000: PPUSH
1001: LD_VAR 0 2
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 1
1013: ST_TO_ADDR
// for j = 1 to multi_teams do
1014: LD_ADDR_VAR 0 3
1018: PUSH
1019: DOUBLE
1020: LD_INT 1
1022: DEC
1023: ST_TO_ADDR
1024: LD_EXP 10
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1099
// begin if i in multi_teams [ j ] then
1032: LD_VAR 0 2
1036: PUSH
1037: LD_EXP 10
1041: PUSH
1042: LD_VAR 0 3
1046: ARRAY
1047: IN
1048: IFFALSE 1097
// begin tmp := multi_teams [ j ] diff i ;
1050: LD_ADDR_VAR 0 5
1054: PUSH
1055: LD_EXP 10
1059: PUSH
1060: LD_VAR 0 3
1064: ARRAY
1065: PUSH
1066: LD_VAR 0 2
1070: DIFF
1071: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1072: LD_ADDR_EXP 10
1076: PUSH
1077: LD_EXP 10
1081: PPUSH
1082: LD_VAR 0 3
1086: PPUSH
1087: LD_VAR 0 5
1091: PPUSH
1092: CALL_OW 1
1096: ST_TO_ADDR
// end ; end ;
1097: GO 1029
1099: POP
1100: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1101: LD_EXP 9
1105: PUSH
1106: LD_VAR 0 2
1110: ARRAY
1111: PUSH
1112: LD_EXP 9
1116: PUSH
1117: LD_VAR 0 2
1121: ARRAY
1122: PUSH
1123: LD_EXP 13
1127: IN
1128: NOT
1129: AND
1130: IFFALSE 1171
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1132: LD_ADDR_EXP 9
1136: PUSH
1137: LD_EXP 9
1141: PPUSH
1142: LD_VAR 0 2
1146: PPUSH
1147: LD_EXP 13
1151: PUSH
1152: LD_INT 1
1154: PPUSH
1155: LD_EXP 13
1159: PPUSH
1160: CALL_OW 12
1164: ARRAY
1165: PPUSH
1166: CALL_OW 1
1170: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1171: LD_EXP 9
1175: PUSH
1176: LD_VAR 0 2
1180: ARRAY
1181: NOT
1182: PUSH
1183: LD_EXP 7
1187: PUSH
1188: LD_VAR 0 2
1192: ARRAY
1193: NOT
1194: AND
1195: PUSH
1196: LD_EXP 11
1200: PUSH
1201: LD_VAR 0 2
1205: ARRAY
1206: NOT
1207: AND
1208: IFFALSE 1233
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1210: LD_ADDR_EXP 14
1214: PUSH
1215: LD_EXP 14
1219: PPUSH
1220: LD_VAR 0 2
1224: PPUSH
1225: LD_INT 1
1227: PPUSH
1228: CALL_OW 1
1232: ST_TO_ADDR
// if multi_sides [ i ] then
1233: LD_EXP 7
1237: PUSH
1238: LD_VAR 0 2
1242: ARRAY
1243: IFFALSE 1259
// multi_players_amount := multi_players_amount + 1 ;
1245: LD_ADDR_EXP 26
1249: PUSH
1250: LD_EXP 26
1254: PUSH
1255: LD_INT 1
1257: PLUS
1258: ST_TO_ADDR
// end ;
1259: GO 931
1261: POP
1262: POP
// for i in multi_teams do
1263: LD_ADDR_VAR 0 2
1267: PUSH
1268: LD_EXP 10
1272: PUSH
1273: FOR_IN
1274: IFFALSE 1382
// begin for j = 2 to i do
1276: LD_ADDR_VAR 0 3
1280: PUSH
1281: DOUBLE
1282: LD_INT 2
1284: DEC
1285: ST_TO_ADDR
1286: LD_VAR 0 2
1290: PUSH
1291: FOR_TO
1292: IFFALSE 1378
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1294: LD_VAR 0 2
1298: PUSH
1299: LD_VAR 0 3
1303: ARRAY
1304: PPUSH
1305: LD_VAR 0 2
1309: PUSH
1310: LD_INT 1
1312: ARRAY
1313: PPUSH
1314: CALL_OW 343
// for x = 1 to j - 1 do
1318: LD_ADDR_VAR 0 4
1322: PUSH
1323: DOUBLE
1324: LD_INT 1
1326: DEC
1327: ST_TO_ADDR
1328: LD_VAR 0 3
1332: PUSH
1333: LD_INT 1
1335: MINUS
1336: PUSH
1337: FOR_TO
1338: IFFALSE 1374
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1340: LD_VAR 0 2
1344: PUSH
1345: LD_VAR 0 3
1349: ARRAY
1350: PPUSH
1351: LD_VAR 0 2
1355: PUSH
1356: LD_VAR 0 4
1360: ARRAY
1361: PPUSH
1362: LD_INT 1
1364: PPUSH
1365: LD_INT 1
1367: PPUSH
1368: CALL_OW 80
1372: GO 1337
1374: POP
1375: POP
// end ;
1376: GO 1291
1378: POP
1379: POP
// end ;
1380: GO 1273
1382: POP
1383: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1384: LD_ADDR_OWVAR 67
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 2
1394: PUSH
1395: LD_INT 3
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: PUSH
1403: LD_EXP 17
1407: PUSH
1408: LD_INT 1
1410: ARRAY
1411: ARRAY
1412: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 , 18 ] [ multi_settings [ 2 ] ] ;
1413: LD_ADDR_EXP 19
1417: PUSH
1418: LD_INT 9
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: LD_INT 15
1426: PUSH
1427: LD_INT 18
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: LIST
1435: PUSH
1436: LD_EXP 17
1440: PUSH
1441: LD_INT 2
1443: ARRAY
1444: ARRAY
1445: ST_TO_ADDR
// multi_skill_level := [ 5 , 6 , 8 , 10 ] [ multi_settings [ 3 ] ] ;
1446: LD_ADDR_EXP 20
1450: PUSH
1451: LD_INT 5
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 8
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: PUSH
1469: LD_EXP 17
1473: PUSH
1474: LD_INT 3
1476: ARRAY
1477: ARRAY
1478: ST_TO_ADDR
// multi_crates_spawn := [ [ 9000 , 0 0$32 ] , [ 12000 , 0 0$22 ] , [ 14000 , 0 0$14 ] , [ 16000 , 0 0$12 ] ] [ multi_settings [ 4 ] ] ;
1479: LD_ADDR_EXP 21
1483: PUSH
1484: LD_INT 9000
1486: PUSH
1487: LD_INT 1120
1489: PUSH
1490: EMPTY
1491: LIST
1492: LIST
1493: PUSH
1494: LD_INT 12000
1496: PUSH
1497: LD_INT 770
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: PUSH
1504: LD_INT 14000
1506: PUSH
1507: LD_INT 490
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 16000
1516: PUSH
1517: LD_INT 420
1519: PUSH
1520: EMPTY
1521: LIST
1522: LIST
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: PUSH
1530: LD_EXP 17
1534: PUSH
1535: LD_INT 4
1537: ARRAY
1538: ARRAY
1539: ST_TO_ADDR
// multi_ape_amount := [ 6 , 8 , 10 ] [ multi_settings [ 5 ] ] ;
1540: LD_ADDR_EXP 22
1544: PUSH
1545: LD_INT 6
1547: PUSH
1548: LD_INT 8
1550: PUSH
1551: LD_INT 10
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: PUSH
1559: LD_EXP 17
1563: PUSH
1564: LD_INT 5
1566: ARRAY
1567: ARRAY
1568: ST_TO_ADDR
// multi_support := [ 0 , 1 , 2 ] [ multi_settings [ 6 ] ] ;
1569: LD_ADDR_EXP 23
1573: PUSH
1574: LD_INT 0
1576: PUSH
1577: LD_INT 1
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: PUSH
1588: LD_EXP 17
1592: PUSH
1593: LD_INT 6
1595: ARRAY
1596: ARRAY
1597: ST_TO_ADDR
// multi_support_arrive_time := [ 15 15$0 , 18 18$0 , 21 21$0 ] [ Difficulty ] ;
1598: LD_ADDR_EXP 29
1602: PUSH
1603: LD_INT 31500
1605: PUSH
1606: LD_INT 37800
1608: PUSH
1609: LD_INT 44100
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: PUSH
1617: LD_OWVAR 67
1621: ARRAY
1622: ST_TO_ADDR
// end ;
1623: LD_VAR 0 1
1627: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
1628: LD_INT 0
1630: PPUSH
1631: PPUSH
// if not multi_sides [ 2 ] then
1632: LD_EXP 7
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: NOT
1641: IFFALSE 1655
// begin result := preferSide ;
1643: LD_ADDR_VAR 0 2
1647: PUSH
1648: LD_VAR 0 1
1652: ST_TO_ADDR
// exit ;
1653: GO 1702
// end ; for i := 1 to 8 do
1655: LD_ADDR_VAR 0 3
1659: PUSH
1660: DOUBLE
1661: LD_INT 1
1663: DEC
1664: ST_TO_ADDR
1665: LD_INT 8
1667: PUSH
1668: FOR_TO
1669: IFFALSE 1700
// if not multi_sides [ i ] then
1671: LD_EXP 7
1675: PUSH
1676: LD_VAR 0 3
1680: ARRAY
1681: NOT
1682: IFFALSE 1698
// begin result := i ;
1684: LD_ADDR_VAR 0 2
1688: PUSH
1689: LD_VAR 0 3
1693: ST_TO_ADDR
// exit ;
1694: POP
1695: POP
1696: GO 1702
// end ;
1698: GO 1668
1700: POP
1701: POP
// end ;
1702: LD_VAR 0 2
1706: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
1707: LD_INT 0
1709: PPUSH
// uc_side := side ;
1710: LD_ADDR_OWVAR 20
1714: PUSH
1715: LD_VAR 0 1
1719: ST_TO_ADDR
// uc_nation := 1 ;
1720: LD_ADDR_OWVAR 21
1724: PUSH
1725: LD_INT 1
1727: ST_TO_ADDR
// hc_importance := 100 ;
1728: LD_ADDR_OWVAR 32
1732: PUSH
1733: LD_INT 100
1735: ST_TO_ADDR
// hc_class := 1 ;
1736: LD_ADDR_OWVAR 28
1740: PUSH
1741: LD_INT 1
1743: ST_TO_ADDR
// if num = 1 then
1744: LD_VAR 0 2
1748: PUSH
1749: LD_INT 1
1751: EQUAL
1752: IFFALSE 1834
// begin hc_gallery := us ;
1754: LD_ADDR_OWVAR 33
1758: PUSH
1759: LD_STRING us
1761: ST_TO_ADDR
// hc_face_number := 5 ;
1762: LD_ADDR_OWVAR 34
1766: PUSH
1767: LD_INT 5
1769: ST_TO_ADDR
// hc_name := John Macmilan ;
1770: LD_ADDR_OWVAR 26
1774: PUSH
1775: LD_STRING John Macmilan
1777: ST_TO_ADDR
// hc_sex := sex_male ;
1778: LD_ADDR_OWVAR 27
1782: PUSH
1783: LD_INT 1
1785: ST_TO_ADDR
// hc_skills := [ 7 , 2 , 4 , 4 ] ;
1786: LD_ADDR_OWVAR 31
1790: PUSH
1791: LD_INT 7
1793: PUSH
1794: LD_INT 2
1796: PUSH
1797: LD_INT 4
1799: PUSH
1800: LD_INT 4
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: ST_TO_ADDR
// hc_attr := [ 11 , 10 ] ;
1809: LD_ADDR_OWVAR 29
1813: PUSH
1814: LD_INT 11
1816: PUSH
1817: LD_INT 10
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: ST_TO_ADDR
// result := CreateHuman ;
1824: LD_ADDR_VAR 0 3
1828: PUSH
1829: CALL_OW 44
1833: ST_TO_ADDR
// end ; if num = 2 then
1834: LD_VAR 0 2
1838: PUSH
1839: LD_INT 2
1841: EQUAL
1842: IFFALSE 1924
// begin hc_gallery := us ;
1844: LD_ADDR_OWVAR 33
1848: PUSH
1849: LD_STRING us
1851: ST_TO_ADDR
// hc_face_number := 2 ;
1852: LD_ADDR_OWVAR 34
1856: PUSH
1857: LD_INT 2
1859: ST_TO_ADDR
// hc_name := Lucy Donaldson ;
1860: LD_ADDR_OWVAR 26
1864: PUSH
1865: LD_STRING Lucy Donaldson
1867: ST_TO_ADDR
// hc_sex := sex_female ;
1868: LD_ADDR_OWVAR 27
1872: PUSH
1873: LD_INT 2
1875: ST_TO_ADDR
// hc_skills := [ 6 , 3 , 4 , 3 ] ;
1876: LD_ADDR_OWVAR 31
1880: PUSH
1881: LD_INT 6
1883: PUSH
1884: LD_INT 3
1886: PUSH
1887: LD_INT 4
1889: PUSH
1890: LD_INT 3
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: LIST
1897: LIST
1898: ST_TO_ADDR
// hc_attr := [ 9 , 12 ] ;
1899: LD_ADDR_OWVAR 29
1903: PUSH
1904: LD_INT 9
1906: PUSH
1907: LD_INT 12
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// result := CreateHuman ;
1914: LD_ADDR_VAR 0 3
1918: PUSH
1919: CALL_OW 44
1923: ST_TO_ADDR
// end ; if num = 3 then
1924: LD_VAR 0 2
1928: PUSH
1929: LD_INT 3
1931: EQUAL
1932: IFFALSE 2014
// begin hc_gallery := us ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING us
1941: ST_TO_ADDR
// hc_face_number := 7 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 7
1949: ST_TO_ADDR
// hc_name := Arthur Powell ;
1950: LD_ADDR_OWVAR 26
1954: PUSH
1955: LD_STRING Arthur Powell
1957: ST_TO_ADDR
// hc_sex := sex_male ;
1958: LD_ADDR_OWVAR 27
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_skills := [ 8 , 2 , 5 , 2 ] ;
1966: LD_ADDR_OWVAR 31
1970: PUSH
1971: LD_INT 8
1973: PUSH
1974: LD_INT 2
1976: PUSH
1977: LD_INT 5
1979: PUSH
1980: LD_INT 2
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: LIST
1987: LIST
1988: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1989: LD_ADDR_OWVAR 29
1993: PUSH
1994: LD_INT 10
1996: PUSH
1997: LD_INT 11
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: ST_TO_ADDR
// result := CreateHuman ;
2004: LD_ADDR_VAR 0 3
2008: PUSH
2009: CALL_OW 44
2013: ST_TO_ADDR
// end ; end ;
2014: LD_VAR 0 3
2018: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , cl , un , veh , tmp , copy , people_amount ; begin
2019: LD_INT 0
2021: PPUSH
2022: PPUSH
2023: PPUSH
2024: PPUSH
2025: PPUSH
2026: PPUSH
2027: PPUSH
2028: PPUSH
2029: PPUSH
// for i := 1 to 8 do
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: DOUBLE
2036: LD_INT 1
2038: DEC
2039: ST_TO_ADDR
2040: LD_INT 8
2042: PUSH
2043: FOR_TO
2044: IFFALSE 2934
// begin if not multi_sides [ i ] then
2046: LD_EXP 7
2050: PUSH
2051: LD_VAR 0 2
2055: ARRAY
2056: NOT
2057: IFFALSE 2061
// continue ;
2059: GO 2043
// if multi_custom_commanders then
2061: LD_EXP 16
2065: IFFALSE 2157
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2067: LD_ADDR_VAR 0 5
2071: PUSH
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_EXP 7
2081: PUSH
2082: LD_VAR 0 2
2086: ARRAY
2087: PPUSH
2088: CALL 1707 0 2
2092: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2093: LD_ADDR_EXP 24
2097: PUSH
2098: LD_EXP 24
2102: PPUSH
2103: LD_EXP 24
2107: PUSH
2108: LD_INT 1
2110: PLUS
2111: PPUSH
2112: LD_VAR 0 5
2116: PPUSH
2117: CALL_OW 2
2121: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2122: LD_VAR 0 5
2126: PPUSH
2127: LD_EXP 12
2131: PUSH
2132: LD_EXP 7
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: ARRAY
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// end else
2155: GO 2368
// begin uc_side := i ;
2157: LD_ADDR_OWVAR 20
2161: PUSH
2162: LD_VAR 0 2
2166: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2167: LD_ADDR_OWVAR 21
2171: PUSH
2172: LD_EXP 9
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: ST_TO_ADDR
// hc_importance := 100 ;
2183: LD_ADDR_OWVAR 32
2187: PUSH
2188: LD_INT 100
2190: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2191: LD_INT 0
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_EXP 20
2201: PPUSH
2202: CALL_OW 380
// if multiplayer then
2206: LD_OWVAR 4
2210: IFFALSE 2268
// begin hc_name := mp_sides_players_names [ i ] ;
2212: LD_ADDR_OWVAR 26
2216: PUSH
2217: LD_OWVAR 19
2221: PUSH
2222: LD_VAR 0 2
2226: ARRAY
2227: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2228: LD_ADDR_OWVAR 33
2232: PUSH
2233: LD_STRING MULTIAVATARS
2235: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2236: LD_ADDR_OWVAR 34
2240: PUSH
2241: LD_VAR 0 2
2245: PPUSH
2246: CALL_OW 525
2250: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2251: LD_ADDR_OWVAR 27
2255: PUSH
2256: LD_VAR 0 2
2260: PPUSH
2261: CALL_OW 526
2265: ST_TO_ADDR
// end else
2266: GO 2300
// begin hc_gallery :=  ;
2268: LD_ADDR_OWVAR 33
2272: PUSH
2273: LD_STRING 
2275: ST_TO_ADDR
// hc_name :=  ;
2276: LD_ADDR_OWVAR 26
2280: PUSH
2281: LD_STRING 
2283: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2284: LD_ADDR_OWVAR 27
2288: PUSH
2289: LD_INT 1
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: CALL_OW 12
2299: ST_TO_ADDR
// end ; un := CreateHuman ;
2300: LD_ADDR_VAR 0 5
2304: PUSH
2305: CALL_OW 44
2309: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2310: LD_VAR 0 5
2314: PPUSH
2315: LD_EXP 12
2319: PUSH
2320: LD_EXP 7
2324: PUSH
2325: LD_VAR 0 2
2329: ARRAY
2330: ARRAY
2331: PUSH
2332: LD_INT 1
2334: ARRAY
2335: PPUSH
2336: LD_INT 0
2338: PPUSH
2339: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2343: LD_ADDR_EXP 24
2347: PUSH
2348: LD_EXP 24
2352: PPUSH
2353: LD_VAR 0 2
2357: PPUSH
2358: LD_VAR 0 5
2362: PPUSH
2363: CALL_OW 1
2367: ST_TO_ADDR
// end ; InitHc ;
2368: CALL_OW 19
// InitUc ;
2372: CALL_OW 18
// uc_side := i ;
2376: LD_ADDR_OWVAR 20
2380: PUSH
2381: LD_VAR 0 2
2385: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2386: LD_ADDR_OWVAR 21
2390: PUSH
2391: LD_EXP 9
2395: PUSH
2396: LD_VAR 0 2
2400: ARRAY
2401: ST_TO_ADDR
// hc_gallery :=  ;
2402: LD_ADDR_OWVAR 33
2406: PUSH
2407: LD_STRING 
2409: ST_TO_ADDR
// hc_name :=  ;
2410: LD_ADDR_OWVAR 26
2414: PUSH
2415: LD_STRING 
2417: ST_TO_ADDR
// hc_importance := 0 ;
2418: LD_ADDR_OWVAR 32
2422: PUSH
2423: LD_INT 0
2425: ST_TO_ADDR
// cl := 1 ;
2426: LD_ADDR_VAR 0 4
2430: PUSH
2431: LD_INT 1
2433: ST_TO_ADDR
// for j = 2 to multi_pep_amount do
2434: LD_ADDR_VAR 0 3
2438: PUSH
2439: DOUBLE
2440: LD_INT 2
2442: DEC
2443: ST_TO_ADDR
2444: LD_EXP 19
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2822
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
2452: LD_VAR 0 3
2456: PUSH
2457: LD_INT 1
2459: MINUS
2460: PUSH
2461: LD_EXP 19
2465: PUSH
2466: LD_INT 1
2468: MINUS
2469: PUSH
2470: LD_INT 4
2472: DIVREAL
2473: MOD
2474: PUSH
2475: LD_INT 0
2477: EQUAL
2478: IFFALSE 2494
// cl := cl + 1 ;
2480: LD_ADDR_VAR 0 4
2484: PUSH
2485: LD_VAR 0 4
2489: PUSH
2490: LD_INT 1
2492: PLUS
2493: ST_TO_ADDR
// PrepareHuman ( false , cl , multi_skill_level ) ;
2494: LD_INT 0
2496: PPUSH
2497: LD_VAR 0 4
2501: PPUSH
2502: LD_EXP 20
2506: PPUSH
2507: CALL_OW 380
// un := CreateHuman ;
2511: LD_ADDR_VAR 0 5
2515: PUSH
2516: CALL_OW 44
2520: ST_TO_ADDR
// if j > copy then
2521: LD_VAR 0 3
2525: PUSH
2526: LD_VAR 0 8
2530: GREATER
2531: IFFALSE 2560
// copy := Replace ( copy , j , un ) else
2533: LD_ADDR_VAR 0 8
2537: PUSH
2538: LD_VAR 0 8
2542: PPUSH
2543: LD_VAR 0 3
2547: PPUSH
2548: LD_VAR 0 5
2552: PPUSH
2553: CALL_OW 1
2557: ST_TO_ADDR
2558: GO 2642
// begin CopySkills ( copy [ j ] , un ) ;
2560: LD_VAR 0 8
2564: PUSH
2565: LD_VAR 0 3
2569: ARRAY
2570: PPUSH
2571: LD_VAR 0 5
2575: PPUSH
2576: CALL_OW 510
// SetAttr ( un , attr_speed , GetAttr ( copy [ j ] , attr_speed ) ) ;
2580: LD_VAR 0 5
2584: PPUSH
2585: LD_INT 2
2587: PPUSH
2588: LD_VAR 0 8
2592: PUSH
2593: LD_VAR 0 3
2597: ARRAY
2598: PPUSH
2599: LD_INT 2
2601: PPUSH
2602: CALL_OW 260
2606: PPUSH
2607: CALL_OW 239
// SetAttr ( un , attr_stamina , GetAttr ( copy [ j ] , attr_stamina ) ) ;
2611: LD_VAR 0 5
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_VAR 0 8
2623: PUSH
2624: LD_VAR 0 3
2628: ARRAY
2629: PPUSH
2630: LD_INT 1
2632: PPUSH
2633: CALL_OW 260
2637: PPUSH
2638: CALL_OW 239
// end ; if multi_pos_area then
2642: LD_EXP 12
2646: IFFALSE 2820
// begin if GetClass ( un ) = 3 then
2648: LD_VAR 0 5
2652: PPUSH
2653: CALL_OW 257
2657: PUSH
2658: LD_INT 3
2660: EQUAL
2661: IFFALSE 2787
// begin PrepareVehicle ( [ us_medium_tracked , us_medium_wheeled ] [ j mod 2 + 1 ] , engine_solar , control_manual , [ us_double_gun , us_gatling_gun , us_light_gun ] [ j mod 3 + 1 ] , 100 ) ;
2663: LD_INT 3
2665: PUSH
2666: LD_INT 2
2668: PUSH
2669: EMPTY
2670: LIST
2671: LIST
2672: PUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 2
2680: MOD
2681: PUSH
2682: LD_INT 1
2684: PLUS
2685: ARRAY
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: LD_INT 1
2692: PPUSH
2693: LD_INT 5
2695: PUSH
2696: LD_INT 4
2698: PUSH
2699: LD_INT 3
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 3
2714: MOD
2715: PUSH
2716: LD_INT 1
2718: PLUS
2719: ARRAY
2720: PPUSH
2721: LD_INT 100
2723: PPUSH
2724: CALL 21486 0 5
// veh := CreateVehicle ;
2728: LD_ADDR_VAR 0 6
2732: PUSH
2733: CALL_OW 45
2737: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2738: LD_VAR 0 6
2742: PPUSH
2743: LD_EXP 12
2747: PUSH
2748: LD_EXP 7
2752: PUSH
2753: LD_VAR 0 2
2757: ARRAY
2758: ARRAY
2759: PUSH
2760: LD_INT 2
2762: ARRAY
2763: PPUSH
2764: LD_INT 0
2766: PPUSH
2767: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2771: LD_VAR 0 5
2775: PPUSH
2776: LD_VAR 0 6
2780: PPUSH
2781: CALL_OW 52
// continue ;
2785: GO 2449
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2787: LD_VAR 0 5
2791: PPUSH
2792: LD_EXP 12
2796: PUSH
2797: LD_EXP 7
2801: PUSH
2802: LD_VAR 0 2
2806: ARRAY
2807: ARRAY
2808: PUSH
2809: LD_INT 1
2811: ARRAY
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 49
// end ; end ;
2820: GO 2449
2822: POP
2823: POP
// for j = 1 to 3 do
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: DOUBLE
2830: LD_INT 1
2832: DEC
2833: ST_TO_ADDR
2834: LD_INT 3
2836: PUSH
2837: FOR_TO
2838: IFFALSE 2930
// begin PrepareVehicle ( [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_solar , control_computer , [ us_radar , us_rocket_launcher , us_gatling_gun ] [ j ] , 100 ) ;
2840: LD_INT 2
2842: PUSH
2843: LD_INT 3
2845: PUSH
2846: EMPTY
2847: LIST
2848: LIST
2849: PUSH
2850: LD_INT 1
2852: PPUSH
2853: LD_INT 2
2855: PPUSH
2856: CALL_OW 12
2860: ARRAY
2861: PPUSH
2862: LD_INT 2
2864: PPUSH
2865: LD_INT 3
2867: PPUSH
2868: LD_INT 11
2870: PUSH
2871: LD_INT 7
2873: PUSH
2874: LD_INT 4
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_VAR 0 3
2886: ARRAY
2887: PPUSH
2888: LD_INT 100
2890: PPUSH
2891: CALL 21486 0 5
// PlaceUnitArea ( CreateVehicle , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2895: CALL_OW 45
2899: PPUSH
2900: LD_EXP 12
2904: PUSH
2905: LD_EXP 7
2909: PUSH
2910: LD_VAR 0 2
2914: ARRAY
2915: ARRAY
2916: PUSH
2917: LD_INT 1
2919: ARRAY
2920: PPUSH
2921: LD_INT 0
2923: PPUSH
2924: CALL_OW 49
// end ;
2928: GO 2837
2930: POP
2931: POP
// end ;
2932: GO 2043
2934: POP
2935: POP
// end ;
2936: LD_VAR 0 1
2940: RET
// export function Multiplayer_PrepareReinforcements ( ) ; var i , j , un , tmp ; begin
2941: LD_INT 0
2943: PPUSH
2944: PPUSH
2945: PPUSH
2946: PPUSH
2947: PPUSH
// if not multi_support then
2948: LD_EXP 23
2952: NOT
2953: IFFALSE 2957
// exit ;
2955: GO 3528
// result := [ ] ;
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: EMPTY
2963: ST_TO_ADDR
// for i := 1 to 8 do
2964: LD_ADDR_VAR 0 2
2968: PUSH
2969: DOUBLE
2970: LD_INT 1
2972: DEC
2973: ST_TO_ADDR
2974: LD_INT 8
2976: PUSH
2977: FOR_TO
2978: IFFALSE 3526
// begin result := Replace ( result , i , [ ] ) ;
2980: LD_ADDR_VAR 0 1
2984: PUSH
2985: LD_VAR 0 1
2989: PPUSH
2990: LD_VAR 0 2
2994: PPUSH
2995: EMPTY
2996: PPUSH
2997: CALL_OW 1
3001: ST_TO_ADDR
// if multi_sides [ i ] then
3002: LD_EXP 7
3006: PUSH
3007: LD_VAR 0 2
3011: ARRAY
3012: IFFALSE 3524
// begin tmp := [ ] ;
3014: LD_ADDR_VAR 0 5
3018: PUSH
3019: EMPTY
3020: ST_TO_ADDR
// if multi_support = 1 then
3021: LD_EXP 23
3025: PUSH
3026: LD_INT 1
3028: EQUAL
3029: IFFALSE 3197
// begin uc_side := i ;
3031: LD_ADDR_OWVAR 20
3035: PUSH
3036: LD_VAR 0 2
3040: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3041: LD_ADDR_OWVAR 21
3045: PUSH
3046: LD_EXP 9
3050: PUSH
3051: LD_VAR 0 2
3055: ARRAY
3056: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3057: LD_INT 3
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 11
3068: PPUSH
3069: LD_INT 40
3071: PPUSH
3072: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3076: LD_ADDR_VAR 0 5
3080: PUSH
3081: LD_VAR 0 5
3085: PUSH
3086: CALL_OW 45
3090: ADD
3091: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_double_gun , 40 ) ;
3092: LD_INT 2
3094: PPUSH
3095: LD_INT 1
3097: PPUSH
3098: LD_INT 3
3100: PPUSH
3101: LD_INT 5
3103: PPUSH
3104: LD_INT 40
3106: PPUSH
3107: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3111: LD_ADDR_VAR 0 5
3115: PUSH
3116: LD_VAR 0 5
3120: PUSH
3121: CALL_OW 45
3125: ADD
3126: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_gatling_gun , 40 ) ;
3127: LD_INT 2
3129: PPUSH
3130: LD_INT 3
3132: PPUSH
3133: LD_INT 3
3135: PPUSH
3136: LD_INT 4
3138: PPUSH
3139: LD_INT 40
3141: PPUSH
3142: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3146: LD_ADDR_VAR 0 5
3150: PUSH
3151: LD_VAR 0 5
3155: PUSH
3156: CALL_OW 45
3160: ADD
3161: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_solar , control_computer , us_laser , 40 ) ;
3162: LD_INT 3
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: LD_INT 3
3170: PPUSH
3171: LD_INT 9
3173: PPUSH
3174: LD_INT 40
3176: PPUSH
3177: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3181: LD_ADDR_VAR 0 5
3185: PUSH
3186: LD_VAR 0 5
3190: PUSH
3191: CALL_OW 45
3195: ADD
3196: ST_TO_ADDR
// end ; if multi_support = 2 then
3197: LD_EXP 23
3201: PUSH
3202: LD_INT 2
3204: EQUAL
3205: IFFALSE 3499
// begin uc_side := i ;
3207: LD_ADDR_OWVAR 20
3211: PUSH
3212: LD_VAR 0 2
3216: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3217: LD_ADDR_OWVAR 21
3221: PUSH
3222: LD_EXP 9
3226: PUSH
3227: LD_VAR 0 2
3231: ARRAY
3232: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_radar , 40 ) ;
3233: LD_INT 3
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: LD_INT 11
3244: PPUSH
3245: LD_INT 40
3247: PPUSH
3248: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3252: LD_ADDR_VAR 0 5
3256: PUSH
3257: LD_VAR 0 5
3261: PUSH
3262: CALL_OW 45
3266: ADD
3267: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 40 ) ;
3268: LD_INT 3
3270: PPUSH
3271: LD_INT 3
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: LD_INT 12
3279: PPUSH
3280: LD_INT 40
3282: PPUSH
3283: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3287: LD_ADDR_VAR 0 5
3291: PUSH
3292: LD_VAR 0 5
3296: PUSH
3297: CALL_OW 45
3301: ADD
3302: ST_TO_ADDR
// SetCargo ( tmp [ tmp ] , mat_cans , 100 ) ;
3303: LD_VAR 0 5
3307: PUSH
3308: LD_VAR 0 5
3312: ARRAY
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_double_gun , 40 ) ;
3324: LD_INT 2
3326: PPUSH
3327: LD_INT 3
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 5
3335: PPUSH
3336: LD_INT 40
3338: PPUSH
3339: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3343: LD_ADDR_VAR 0 5
3347: PUSH
3348: LD_VAR 0 5
3352: PUSH
3353: CALL_OW 45
3357: ADD
3358: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3359: LD_INT 4
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: LD_INT 6
3370: PPUSH
3371: LD_INT 40
3373: PPUSH
3374: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3378: LD_ADDR_VAR 0 5
3382: PUSH
3383: LD_VAR 0 5
3387: PUSH
3388: CALL_OW 45
3392: ADD
3393: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3394: LD_INT 2
3396: PPUSH
3397: LD_INT 3
3399: PPUSH
3400: LD_INT 3
3402: PPUSH
3403: LD_INT 9
3405: PPUSH
3406: LD_INT 40
3408: PPUSH
3409: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3413: LD_ADDR_VAR 0 5
3417: PUSH
3418: LD_VAR 0 5
3422: PUSH
3423: CALL_OW 45
3427: ADD
3428: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_laser , 40 ) ;
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 3
3434: PPUSH
3435: LD_INT 3
3437: PPUSH
3438: LD_INT 9
3440: PPUSH
3441: LD_INT 40
3443: PPUSH
3444: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3448: LD_ADDR_VAR 0 5
3452: PUSH
3453: LD_VAR 0 5
3457: PUSH
3458: CALL_OW 45
3462: ADD
3463: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_combustion , control_computer , us_heavy_gun , 40 ) ;
3464: LD_INT 4
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_INT 3
3472: PPUSH
3473: LD_INT 6
3475: PPUSH
3476: LD_INT 40
3478: PPUSH
3479: CALL 21486 0 5
// tmp := tmp ^ CreateVehicle ;
3483: LD_ADDR_VAR 0 5
3487: PUSH
3488: LD_VAR 0 5
3492: PUSH
3493: CALL_OW 45
3497: ADD
3498: ST_TO_ADDR
// end ; result := Replace ( result , i , tmp ) ;
3499: LD_ADDR_VAR 0 1
3503: PUSH
3504: LD_VAR 0 1
3508: PPUSH
3509: LD_VAR 0 2
3513: PPUSH
3514: LD_VAR 0 5
3518: PPUSH
3519: CALL_OW 1
3523: ST_TO_ADDR
// end ; end ;
3524: GO 2977
3526: POP
3527: POP
// end ;
3528: LD_VAR 0 1
3532: RET
// export function Multiplayer_Start ( ) ; begin
3533: LD_INT 0
3535: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3536: CALL 2019 0 0
// Multiplayer_InitPointSystem ( ) ;
3540: CALL 4236 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3544: LD_INT 20
3546: PPUSH
3547: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3551: LD_INT 150
3553: PPUSH
3554: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3558: LD_INT 5
3560: PPUSH
3561: CALL 4412 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3565: LD_INT 40
3567: NEG
3568: PPUSH
3569: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 200 ) ;
3573: LD_INT 200
3575: PPUSH
3576: CALL 4412 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3580: LD_INT 2
3582: PPUSH
3583: CALL 4412 0 1
// Multiplayer_SpawnArtifact ;
3587: CALL 4852 0 0
// if multi_support then
3591: LD_EXP 23
3595: IFFALSE 3607
// multi_reinforcements := Multiplayer_PrepareReinforcements ( ) ;
3597: LD_ADDR_EXP 27
3601: PUSH
3602: CALL 2941 0 0
3606: ST_TO_ADDR
// if multi_sides [ your_side ] then
3607: LD_EXP 7
3611: PUSH
3612: LD_OWVAR 2
3616: ARRAY
3617: IFFALSE 3644
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3619: LD_INT 22
3621: PUSH
3622: LD_OWVAR 2
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: PPUSH
3631: CALL_OW 69
3635: PUSH
3636: LD_INT 1
3638: ARRAY
3639: PPUSH
3640: CALL_OW 87
// end ;
3644: LD_VAR 0 1
3648: RET
// export function Multiplayer_End ( ) ; var i , j , tmp , reinforcements_arrive ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
3653: PPUSH
3654: PPUSH
3655: PPUSH
// reinforcements_arrive := 0 ;
3656: LD_ADDR_VAR 0 5
3660: PUSH
3661: LD_INT 0
3663: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3664: LD_INT 35
3666: PPUSH
3667: CALL_OW 67
// if tick > multi_support_arrive_time and not multi_reinforcements_spawned and multi_support then
3671: LD_OWVAR 1
3675: PUSH
3676: LD_EXP 29
3680: GREATER
3681: PUSH
3682: LD_EXP 28
3686: NOT
3687: AND
3688: PUSH
3689: LD_EXP 23
3693: AND
3694: IFFALSE 3859
// begin multi_reinforcements_spawned := true ;
3696: LD_ADDR_EXP 28
3700: PUSH
3701: LD_INT 1
3703: ST_TO_ADDR
// for i := 1 to 8 do
3704: LD_ADDR_VAR 0 2
3708: PUSH
3709: DOUBLE
3710: LD_INT 1
3712: DEC
3713: ST_TO_ADDR
3714: LD_INT 8
3716: PUSH
3717: FOR_TO
3718: IFFALSE 3847
// begin if multi_sides [ i ] and not multi_loosers [ i ] and multi_reinforcements [ i ] then
3720: LD_EXP 7
3724: PUSH
3725: LD_VAR 0 2
3729: ARRAY
3730: PUSH
3731: LD_EXP 25
3735: PUSH
3736: LD_VAR 0 2
3740: ARRAY
3741: NOT
3742: AND
3743: PUSH
3744: LD_EXP 27
3748: PUSH
3749: LD_VAR 0 2
3753: ARRAY
3754: AND
3755: IFFALSE 3845
// begin tmp := multi_reinforcements [ i ] ;
3757: LD_ADDR_VAR 0 4
3761: PUSH
3762: LD_EXP 27
3766: PUSH
3767: LD_VAR 0 2
3771: ARRAY
3772: ST_TO_ADDR
// for j in tmp do
3773: LD_ADDR_VAR 0 3
3777: PUSH
3778: LD_VAR 0 4
3782: PUSH
3783: FOR_IN
3784: IFFALSE 3821
// PlaceUnitArea ( j , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3786: LD_VAR 0 3
3790: PPUSH
3791: LD_EXP 12
3795: PUSH
3796: LD_EXP 7
3800: PUSH
3801: LD_VAR 0 2
3805: ARRAY
3806: ARRAY
3807: PUSH
3808: LD_INT 2
3810: ARRAY
3811: PPUSH
3812: LD_INT 0
3814: PPUSH
3815: CALL_OW 49
3819: GO 3783
3821: POP
3822: POP
// multi_reinforcements := Replace ( multi_reinforcements , i , [ ] ) ;
3823: LD_ADDR_EXP 27
3827: PUSH
3828: LD_EXP 27
3832: PPUSH
3833: LD_VAR 0 2
3837: PPUSH
3838: EMPTY
3839: PPUSH
3840: CALL_OW 1
3844: ST_TO_ADDR
// end ; end ;
3845: GO 3717
3847: POP
3848: POP
// reinforcements_arrive := tick ;
3849: LD_ADDR_VAR 0 5
3853: PUSH
3854: LD_OWVAR 1
3858: ST_TO_ADDR
// end ; if not multi_custom_commanders then
3859: LD_EXP 16
3863: NOT
3864: IFFALSE 3977
// begin for i = 1 to 8 do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 8
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3951
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3882: LD_INT 22
3884: PUSH
3885: LD_VAR 0 2
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: PUSH
3899: LD_INT 0
3901: EQUAL
3902: PUSH
3903: LD_EXP 25
3907: PUSH
3908: LD_VAR 0 2
3912: ARRAY
3913: NOT
3914: AND
3915: IFFALSE 3949
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3917: LD_ADDR_EXP 25
3921: PUSH
3922: LD_EXP 25
3926: PPUSH
3927: LD_VAR 0 2
3931: PPUSH
3932: LD_INT 1
3934: PPUSH
3935: CALL_OW 1
3939: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3940: LD_VAR 0 2
3944: PPUSH
3945: CALL 4482 0 1
// end ; end ;
3949: GO 3879
3951: POP
3952: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
3953: LD_EXP 25
3957: PPUSH
3958: CALL 18748 0 1
3962: PUSH
3963: LD_EXP 7
3967: PPUSH
3968: CALL 18748 0 1
3972: EQUAL
3973: IFFALSE 3977
// break ;
3975: GO 4033
// end ; until ( FilterAllUnits ( [ [ f_side , side_bot ] , [ f_type , unit_human ] , [ f_ok ] ] ) = 0 and game ) or not multi_commanders ;
3977: LD_INT 22
3979: PUSH
3980: LD_EXP 3
3984: PUSH
3985: EMPTY
3986: LIST
3987: LIST
3988: PUSH
3989: LD_INT 21
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 50
4001: PUSH
4002: EMPTY
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 69
4014: PUSH
4015: LD_INT 0
4017: EQUAL
4018: PUSH
4019: LD_EXP 2
4023: AND
4024: PUSH
4025: LD_EXP 24
4029: NOT
4030: OR
4031: IFFALSE 3664
// game := false ;
4033: LD_ADDR_EXP 2
4037: PUSH
4038: LD_INT 0
4040: ST_TO_ADDR
// for i := 1 to 8 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 8
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4091
// begin if multi_sides [ i ] then
4057: LD_EXP 7
4061: PUSH
4062: LD_VAR 0 2
4066: ARRAY
4067: IFFALSE 4089
// SetMultiScore ( i , multi_points [ i ] ) ;
4069: LD_VAR 0 2
4073: PPUSH
4074: LD_EXP 30
4078: PUSH
4079: LD_VAR 0 2
4083: ARRAY
4084: PPUSH
4085: CALL_OW 506
// end ;
4089: GO 4054
4091: POP
4092: POP
// if multi_loosers [ your_side ] then
4093: LD_EXP 25
4097: PUSH
4098: LD_OWVAR 2
4102: ARRAY
4103: IFFALSE 4126
// begin if Multiplayer then
4105: LD_OWVAR 4
4109: IFFALSE 4117
// YouLostInMultiplayer else
4111: CALL_OW 107
4115: GO 4124
// YouLost (  ) ;
4117: LD_STRING 
4119: PPUSH
4120: CALL_OW 104
// end else
4124: GO 4142
// begin if Multiplayer then
4126: LD_OWVAR 4
4130: IFFALSE 4138
// YouWinInMultiplayer else
4132: CALL_OW 106
4136: GO 4142
// YouWin ;
4138: CALL_OW 103
// end ; end ;
4142: LD_VAR 0 1
4146: RET
// export function Multiplayer_DisplayStrings ( ) ; var i ; begin
4147: LD_INT 0
4149: PPUSH
4150: PPUSH
// result := [ ] ;
4151: LD_ADDR_VAR 0 1
4155: PUSH
4156: EMPTY
4157: ST_TO_ADDR
// for i := 1 to 8 do
4158: LD_ADDR_VAR 0 2
4162: PUSH
4163: DOUBLE
4164: LD_INT 1
4166: DEC
4167: ST_TO_ADDR
4168: LD_INT 8
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4229
// begin if multi_sides [ i ] then
4174: LD_EXP 7
4178: PUSH
4179: LD_VAR 0 2
4183: ARRAY
4184: IFFALSE 4227
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4186: LD_ADDR_VAR 0 1
4190: PUSH
4191: LD_VAR 0 1
4195: PUSH
4196: LD_STRING #coop-points
4198: PUSH
4199: LD_VAR 0 2
4203: PUSH
4204: LD_VAR 0 2
4208: PUSH
4209: LD_EXP 30
4213: PUSH
4214: LD_VAR 0 2
4218: ARRAY
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: ADD
4226: ST_TO_ADDR
// end ; end ;
4227: GO 4171
4229: POP
4230: POP
// end ;
4231: LD_VAR 0 1
4235: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4236: LD_INT 0
4238: PPUSH
4239: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4240: LD_ADDR_EXP 30
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 0
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: LD_INT 0
4262: PUSH
4263: LD_INT 0
4265: PUSH
4266: LD_INT 0
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: LIST
4278: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4279: LD_ADDR_EXP 31
4283: PUSH
4284: EMPTY
4285: ST_TO_ADDR
// end ;
4286: LD_VAR 0 1
4290: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4291: LD_INT 0
4293: PPUSH
// if not multi_points or not side or side > 8 then
4294: LD_EXP 30
4298: NOT
4299: PUSH
4300: LD_VAR 0 1
4304: NOT
4305: OR
4306: PUSH
4307: LD_VAR 0 1
4311: PUSH
4312: LD_INT 8
4314: GREATER
4315: OR
4316: IFFALSE 4320
// exit ;
4318: GO 4357
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4320: LD_ADDR_EXP 30
4324: PUSH
4325: LD_EXP 30
4329: PPUSH
4330: LD_VAR 0 1
4334: PPUSH
4335: LD_EXP 30
4339: PUSH
4340: LD_VAR 0 1
4344: ARRAY
4345: PUSH
4346: LD_VAR 0 2
4350: PLUS
4351: PPUSH
4352: CALL_OW 1
4356: ST_TO_ADDR
// end ;
4357: LD_VAR 0 3
4361: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4362: LD_INT 0
4364: PPUSH
// if not multi_points or not side or side > 8 then
4365: LD_EXP 30
4369: NOT
4370: PUSH
4371: LD_VAR 0 1
4375: NOT
4376: OR
4377: PUSH
4378: LD_VAR 0 1
4382: PUSH
4383: LD_INT 8
4385: GREATER
4386: OR
4387: IFFALSE 4391
// exit ;
4389: GO 4407
// result := multi_points [ side ] ;
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_EXP 30
4400: PUSH
4401: LD_VAR 0 1
4405: ARRAY
4406: ST_TO_ADDR
// end ;
4407: LD_VAR 0 2
4411: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4412: LD_INT 0
4414: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4415: LD_ADDR_EXP 31
4419: PUSH
4420: LD_EXP 31
4424: PPUSH
4425: LD_EXP 31
4429: PUSH
4430: LD_INT 1
4432: PLUS
4433: PPUSH
4434: LD_VAR 0 1
4438: PPUSH
4439: CALL_OW 1
4443: ST_TO_ADDR
// end ;
4444: LD_VAR 0 2
4448: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4449: LD_INT 0
4451: PPUSH
// if not id then
4452: LD_VAR 0 1
4456: NOT
4457: IFFALSE 4461
// exit ;
4459: GO 4477
// result := multi_points_conditions [ id ] ;
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: LD_EXP 31
4470: PUSH
4471: LD_VAR 0 1
4475: ARRAY
4476: ST_TO_ADDR
// end ;
4477: LD_VAR 0 2
4481: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4482: LD_INT 0
4484: PPUSH
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// players := [ ] ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: EMPTY
4495: ST_TO_ADDR
// for i = 1 to 8 do
4496: LD_ADDR_VAR 0 4
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_INT 8
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4569
// begin if i = side then
4512: LD_VAR 0 4
4516: PUSH
4517: LD_VAR 0 1
4521: EQUAL
4522: IFFALSE 4526
// continue ;
4524: GO 4509
// if multi_sides [ i ] and not multi_loosers [ i ] then
4526: LD_EXP 7
4530: PUSH
4531: LD_VAR 0 4
4535: ARRAY
4536: PUSH
4537: LD_EXP 25
4541: PUSH
4542: LD_VAR 0 4
4546: ARRAY
4547: NOT
4548: AND
4549: IFFALSE 4567
// players := players ^ i ;
4551: LD_ADDR_VAR 0 3
4555: PUSH
4556: LD_VAR 0 3
4560: PUSH
4561: LD_VAR 0 4
4565: ADD
4566: ST_TO_ADDR
// end ;
4567: GO 4509
4569: POP
4570: POP
// if not players then
4571: LD_VAR 0 3
4575: NOT
4576: IFFALSE 4580
// exit ;
4578: GO 4847
// if players = 1 then
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 1
4587: EQUAL
4588: IFFALSE 4649
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4590: LD_ADDR_VAR 0 4
4594: PUSH
4595: LD_INT 22
4597: PUSH
4598: LD_VAR 0 1
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 51
4609: PUSH
4610: EMPTY
4611: LIST
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 69
4621: PUSH
4622: FOR_IN
4623: IFFALSE 4645
// SetSide ( i , players [ 1 ] ) ;
4625: LD_VAR 0 4
4629: PPUSH
4630: LD_VAR 0 3
4634: PUSH
4635: LD_INT 1
4637: ARRAY
4638: PPUSH
4639: CALL_OW 235
4643: GO 4622
4645: POP
4646: POP
// end else
4647: GO 4847
// begin j := 1 ;
4649: LD_ADDR_VAR 0 5
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 22
4664: PUSH
4665: LD_VAR 0 1
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PUSH
4674: LD_INT 2
4676: PUSH
4677: LD_INT 21
4679: PUSH
4680: LD_INT 1
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: PUSH
4687: LD_INT 51
4689: PUSH
4690: EMPTY
4691: LIST
4692: PUSH
4693: EMPTY
4694: LIST
4695: LIST
4696: PUSH
4697: LD_INT 21
4699: PUSH
4700: LD_INT 2
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: LIST
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: PPUSH
4716: CALL_OW 69
4720: PUSH
4721: FOR_IN
4722: IFFALSE 4845
// begin SetSide ( i , players [ j ] ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_VAR 0 3
4733: PUSH
4734: LD_VAR 0 5
4738: ARRAY
4739: PPUSH
4740: CALL_OW 235
// if IsDrivenBy ( i ) then
4744: LD_VAR 0 4
4748: PPUSH
4749: CALL_OW 311
4753: IFFALSE 4780
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4755: LD_VAR 0 4
4759: PPUSH
4760: CALL_OW 311
4764: PPUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 5
4774: ARRAY
4775: PPUSH
4776: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4780: LD_VAR 0 4
4784: PPUSH
4785: CALL_OW 310
4789: PPUSH
4790: CALL_OW 247
4794: PUSH
4795: LD_INT 3
4797: EQUAL
4798: IFFALSE 4809
// ComExitBuilding ( i ) ;
4800: LD_VAR 0 4
4804: PPUSH
4805: CALL_OW 122
// j := j + 1 ;
4809: LD_ADDR_VAR 0 5
4813: PUSH
4814: LD_VAR 0 5
4818: PUSH
4819: LD_INT 1
4821: PLUS
4822: ST_TO_ADDR
// if j > players then
4823: LD_VAR 0 5
4827: PUSH
4828: LD_VAR 0 3
4832: GREATER
4833: IFFALSE 4843
// j := 1 ;
4835: LD_ADDR_VAR 0 5
4839: PUSH
4840: LD_INT 1
4842: ST_TO_ADDR
// end ;
4843: GO 4721
4845: POP
4846: POP
// end ; end ;
4847: LD_VAR 0 2
4851: RET
// export function Multiplayer_SpawnArtifact ( ) ; var i , pos ; begin
4852: LD_INT 0
4854: PPUSH
4855: PPUSH
4856: PPUSH
// i := 3 ;
4857: LD_ADDR_VAR 0 2
4861: PUSH
4862: LD_INT 3
4864: ST_TO_ADDR
// pos := [ [ 5 , 10 ] , [ 120 , 2 ] , [ 101 , 8 ] , [ 27 , 4 ] ] ;
4865: LD_ADDR_VAR 0 3
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 10
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: PUSH
4880: LD_INT 120
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 101
4892: PUSH
4893: LD_INT 8
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 27
4902: PUSH
4903: LD_INT 4
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 5 , pos [ i ] [ 1 ] , pos [ i ] [ 2 ] , false ) ;
4916: LD_INT 4
4918: PPUSH
4919: LD_INT 5
4921: PPUSH
4922: LD_VAR 0 3
4926: PUSH
4927: LD_VAR 0 2
4931: ARRAY
4932: PUSH
4933: LD_INT 1
4935: ARRAY
4936: PPUSH
4937: LD_VAR 0 3
4941: PUSH
4942: LD_VAR 0 2
4946: ARRAY
4947: PUSH
4948: LD_INT 2
4950: ARRAY
4951: PPUSH
4952: LD_INT 0
4954: PPUSH
4955: CALL_OW 58
// end ;
4959: LD_VAR 0 1
4963: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
4964: LD_INT 0
4966: PPUSH
// if not side or side > 8 then
4967: LD_VAR 0 1
4971: NOT
4972: PUSH
4973: LD_VAR 0 1
4977: PUSH
4978: LD_INT 8
4980: GREATER
4981: OR
4982: IFFALSE 4986
// exit ;
4984: GO 5003
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
4986: LD_VAR 0 1
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL 4449 0 1
4998: PPUSH
4999: CALL 4291 0 2
// end ;
5003: LD_VAR 0 2
5007: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5008: LD_INT 0
5010: PPUSH
// if not side or side > 8 then
5011: LD_VAR 0 1
5015: NOT
5016: PUSH
5017: LD_VAR 0 1
5021: PUSH
5022: LD_INT 8
5024: GREATER
5025: OR
5026: IFFALSE 5030
// exit ;
5028: GO 5047
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5030: LD_VAR 0 1
5034: PPUSH
5035: LD_INT 4
5037: PPUSH
5038: CALL 4449 0 1
5042: PPUSH
5043: CALL 4291 0 2
// end ;
5047: LD_VAR 0 2
5051: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5052: LD_INT 0
5054: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5055: LD_VAR 0 1
5059: NOT
5060: PUSH
5061: LD_VAR 0 1
5065: PUSH
5066: LD_INT 8
5068: GREATER
5069: OR
5070: PUSH
5071: LD_VAR 0 2
5075: PUSH
5076: LD_INT 2
5078: PUSH
5079: LD_INT 6
5081: PUSH
5082: LD_INT 36
5084: PUSH
5085: LD_INT 0
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: IN
5094: NOT
5095: OR
5096: IFFALSE 5100
// exit ;
5098: GO 5117
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5100: LD_VAR 0 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL 4449 0 1
5112: PPUSH
5113: CALL 4291 0 2
// end ;
5117: LD_VAR 0 3
5121: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5122: LD_INT 0
5124: PPUSH
5125: PPUSH
// if not un then
5126: LD_VAR 0 1
5130: NOT
5131: IFFALSE 5135
// exit ;
5133: GO 5181
// if not points then
5135: LD_VAR 0 3
5139: NOT
5140: IFFALSE 5157
// gained_points := Multiplayer_GetCondition ( 1 ) else
5142: LD_ADDR_VAR 0 5
5146: PUSH
5147: LD_INT 1
5149: PPUSH
5150: CALL 4449 0 1
5154: ST_TO_ADDR
5155: GO 5167
// gained_points := points ;
5157: LD_ADDR_VAR 0 5
5161: PUSH
5162: LD_VAR 0 3
5166: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ;
5167: LD_VAR 0 2
5171: PPUSH
5172: LD_VAR 0 5
5176: PPUSH
5177: CALL 4291 0 2
5181: LD_VAR 0 4
5185: RET
// export function MultiplayerEvent_ArtifactCaptured ( side ) ; begin
5186: LD_INT 0
5188: PPUSH
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 2 ) ) ;
5189: LD_VAR 0 1
5193: PPUSH
5194: LD_INT 2
5196: PPUSH
5197: CALL 4449 0 1
5201: PPUSH
5202: CALL 4291 0 2
// end ; end_of_file
5206: LD_VAR 0 2
5210: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp ; export Saliba , Gensher , Shariff ; export function PrepareArabian ( side ) ; var i , d , xy , un , un2 , skill , tmp , techs , fac ; begin
5211: LD_INT 0
5213: PPUSH
5214: PPUSH
5215: PPUSH
5216: PPUSH
5217: PPUSH
5218: PPUSH
5219: PPUSH
5220: PPUSH
5221: PPUSH
5222: PPUSH
// side_bot := side ;
5223: LD_ADDR_EXP 3
5227: PUSH
5228: LD_VAR 0 1
5232: ST_TO_ADDR
// techs := [ tech_ApeAgres , tech_ApeBrain , tech_ApeNeural , tech_StimDrugs , tech_Bio1 , tech_Bio2 , tech_Weap3 , tech_RemCharge , tech_Rocket , tech_SibEng , tech_SibImplosion , tech_Sib2 ] ;
5233: LD_ADDR_VAR 0 10
5237: PUSH
5238: LD_INT 11
5240: PUSH
5241: LD_INT 4
5243: PUSH
5244: LD_INT 3
5246: PUSH
5247: LD_INT 5
5249: PUSH
5250: LD_INT 66
5252: PUSH
5253: LD_INT 67
5255: PUSH
5256: LD_INT 53
5258: PUSH
5259: LD_INT 18
5261: PUSH
5262: LD_INT 40
5264: PUSH
5265: LD_INT 22
5267: PUSH
5268: LD_INT 72
5270: PUSH
5271: LD_INT 55
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: ST_TO_ADDR
// for i in techs do
5288: LD_ADDR_VAR 0 3
5292: PUSH
5293: LD_VAR 0 10
5297: PUSH
5298: FOR_IN
5299: IFFALSE 5320
// SetTech ( i , side , state_researched ) ;
5301: LD_VAR 0 3
5305: PPUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_INT 2
5313: PPUSH
5314: CALL_OW 322
5318: GO 5298
5320: POP
5321: POP
// InitScriptBases ;
5322: CALL 7261 0 0
// skill := [ 5 , 7 , 10 ] [ Difficulty ] ;
5326: LD_ADDR_VAR 0 8
5330: PUSH
5331: LD_INT 5
5333: PUSH
5334: LD_INT 7
5336: PUSH
5337: LD_INT 10
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: LIST
5344: PUSH
5345: LD_OWVAR 67
5349: ARRAY
5350: ST_TO_ADDR
// uc_side := side ;
5351: LD_ADDR_OWVAR 20
5355: PUSH
5356: LD_VAR 0 1
5360: ST_TO_ADDR
// uc_nation := 2 ;
5361: LD_ADDR_OWVAR 21
5365: PUSH
5366: LD_INT 2
5368: ST_TO_ADDR
// ar_force_north := PrepareBase ( ar_dep_n , area_base_north , dammam , skill , [ 10000 , 1000 , 900 ] , [ 12 , 4 , - 1 , 4 ] ) ;
5369: LD_ADDR_EXP 34
5373: PUSH
5374: LD_INT 94
5376: PPUSH
5377: LD_INT 35
5379: PPUSH
5380: LD_STRING dammam
5382: PPUSH
5383: LD_VAR 0 8
5387: PPUSH
5388: LD_INT 10000
5390: PUSH
5391: LD_INT 1000
5393: PUSH
5394: LD_INT 900
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: PPUSH
5402: LD_INT 12
5404: PUSH
5405: LD_INT 4
5407: PUSH
5408: LD_INT 1
5410: NEG
5411: PUSH
5412: LD_INT 4
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PPUSH
5421: CALL 25307 0 6
5425: ST_TO_ADDR
// ar_force_north2 := PrepareBase ( ar_dep_n2 , area_base_north2 ,  , skill , [ 500 , 130 , 0 ] , [ 16 , 4 , 3 , 1 ] ) ;
5426: LD_ADDR_EXP 35
5430: PUSH
5431: LD_INT 122
5433: PPUSH
5434: LD_INT 38
5436: PPUSH
5437: LD_STRING 
5439: PPUSH
5440: LD_VAR 0 8
5444: PPUSH
5445: LD_INT 500
5447: PUSH
5448: LD_INT 130
5450: PUSH
5451: LD_INT 0
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: LD_INT 16
5461: PUSH
5462: LD_INT 4
5464: PUSH
5465: LD_INT 3
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL 25307 0 6
5481: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , area_base_west , jeddah , skill , [ 2100 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
5482: LD_ADDR_EXP 32
5486: PUSH
5487: LD_INT 45
5489: PPUSH
5490: LD_INT 34
5492: PPUSH
5493: LD_STRING jeddah
5495: PPUSH
5496: LD_VAR 0 8
5500: PPUSH
5501: LD_INT 2100
5503: PUSH
5504: LD_INT 300
5506: PUSH
5507: LD_INT 10
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: LIST
5514: PPUSH
5515: LD_INT 12
5517: PUSH
5518: LD_INT 4
5520: PUSH
5521: LD_INT 3
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: LIST
5531: LIST
5532: PPUSH
5533: CALL 25307 0 6
5537: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , area_base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 8 , 2 , 3 , 1 ] ) ;
5538: LD_ADDR_EXP 33
5542: PUSH
5543: LD_INT 7
5545: PPUSH
5546: LD_INT 33
5548: PPUSH
5549: LD_STRING riyadh
5551: PPUSH
5552: LD_VAR 0 8
5556: PPUSH
5557: LD_INT 500
5559: PUSH
5560: LD_INT 60
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 8
5573: PUSH
5574: LD_INT 2
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 1
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: PPUSH
5589: CALL 25307 0 6
5593: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , area_base_east ,  , skill , [ 500 , 50 , 0 ] , [ 11 , 2 , 4 , 1 ] ) ;
5594: LD_ADDR_EXP 36
5598: PUSH
5599: LD_INT 69
5601: PPUSH
5602: LD_INT 36
5604: PPUSH
5605: LD_STRING 
5607: PPUSH
5608: LD_VAR 0 8
5612: PPUSH
5613: LD_INT 500
5615: PUSH
5616: LD_INT 50
5618: PUSH
5619: LD_INT 0
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: PPUSH
5627: LD_INT 11
5629: PUSH
5630: LD_INT 2
5632: PUSH
5633: LD_INT 4
5635: PUSH
5636: LD_INT 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL 25307 0 6
5649: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
5650: LD_ADDR_OWVAR 37
5654: PUSH
5655: LD_INT 14
5657: ST_TO_ADDR
// vc_engine := engine_siberite ;
5658: LD_ADDR_OWVAR 39
5662: PUSH
5663: LD_INT 3
5665: ST_TO_ADDR
// vc_control := control_manual ;
5666: LD_ADDR_OWVAR 38
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
5674: LD_ADDR_OWVAR 40
5678: PUSH
5679: LD_INT 31
5681: ST_TO_ADDR
// for i = 1 to 4 do
5682: LD_ADDR_VAR 0 3
5686: PUSH
5687: DOUBLE
5688: LD_INT 1
5690: DEC
5691: ST_TO_ADDR
5692: LD_INT 4
5694: PUSH
5695: FOR_TO
5696: IFFALSE 5845
// begin xy := [ [ 156 , 15 ] , [ 12 , 7 ] ] [ i mod 2 + 1 ] ;
5698: LD_ADDR_VAR 0 5
5702: PUSH
5703: LD_INT 156
5705: PUSH
5706: LD_INT 15
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PUSH
5713: LD_INT 12
5715: PUSH
5716: LD_INT 7
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: LD_INT 2
5734: MOD
5735: PUSH
5736: LD_INT 1
5738: PLUS
5739: ARRAY
5740: ST_TO_ADDR
// PrepareHuman ( false , class_mechanic , skill ) ;
5741: LD_INT 0
5743: PPUSH
5744: LD_INT 3
5746: PPUSH
5747: LD_VAR 0 8
5751: PPUSH
5752: CALL_OW 380
// un := CreateVehicle ;
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: CALL_OW 45
5765: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
5766: LD_VAR 0 6
5770: PPUSH
5771: LD_INT 0
5773: PPUSH
5774: LD_INT 5
5776: PPUSH
5777: CALL_OW 12
5781: PPUSH
5782: CALL_OW 233
// PlaceUnitXYR ( un , xy [ 1 ] , xy [ 2 ] , 6 , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 5
5795: PUSH
5796: LD_INT 1
5798: ARRAY
5799: PPUSH
5800: LD_VAR 0 5
5804: PUSH
5805: LD_INT 2
5807: ARRAY
5808: PPUSH
5809: LD_INT 6
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 50
// un2 := CreateHuman ;
5819: LD_ADDR_VAR 0 7
5823: PUSH
5824: CALL_OW 44
5828: ST_TO_ADDR
// PlaceHumanInUnit ( un2 , un ) ;
5829: LD_VAR 0 7
5833: PPUSH
5834: LD_VAR 0 6
5838: PPUSH
5839: CALL_OW 52
// end ;
5843: GO 5695
5845: POP
5846: POP
// for i in FilterAllUnits ( [ [ f_side , side_bot ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
5847: LD_ADDR_VAR 0 3
5851: PUSH
5852: LD_INT 22
5854: PUSH
5855: LD_EXP 3
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 30
5866: PUSH
5867: LD_INT 31
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: LD_INT 58
5876: PUSH
5877: EMPTY
5878: LIST
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: LIST
5884: PPUSH
5885: CALL_OW 69
5889: PUSH
5890: FOR_IN
5891: IFFALSE 6003
// begin d := GetDir ( i ) ;
5893: LD_ADDR_VAR 0 4
5897: PUSH
5898: LD_VAR 0 3
5902: PPUSH
5903: CALL_OW 254
5907: ST_TO_ADDR
// if d < 3 then
5908: LD_VAR 0 4
5912: PUSH
5913: LD_INT 3
5915: LESS
5916: IFFALSE 5934
// d := d + 3 else
5918: LD_ADDR_VAR 0 4
5922: PUSH
5923: LD_VAR 0 4
5927: PUSH
5928: LD_INT 3
5930: PLUS
5931: ST_TO_ADDR
5932: GO 5948
// d := d - 3 ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_VAR 0 4
5943: PUSH
5944: LD_INT 3
5946: MINUS
5947: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
5948: LD_INT 0
5950: PPUSH
5951: LD_INT 8
5953: PPUSH
5954: LD_VAR 0 8
5958: PPUSH
5959: CALL_OW 380
// un := CreateHuman ;
5963: LD_ADDR_VAR 0 6
5967: PUSH
5968: CALL_OW 44
5972: ST_TO_ADDR
// SetDir ( un , d ) ;
5973: LD_VAR 0 6
5977: PPUSH
5978: LD_VAR 0 4
5982: PPUSH
5983: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5987: LD_VAR 0 6
5991: PPUSH
5992: LD_VAR 0 3
5996: PPUSH
5997: CALL_OW 52
// end ;
6001: GO 5890
6003: POP
6004: POP
// ar_force_tmp := [ ] ;
6005: LD_ADDR_EXP 37
6009: PUSH
6010: EMPTY
6011: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
6012: LD_INT 1
6014: PPUSH
6015: LD_INT 1
6017: PPUSH
6018: LD_VAR 0 8
6022: PPUSH
6023: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6027: LD_ADDR_OWVAR 33
6031: PUSH
6032: LD_STRING SecondCharsGal
6034: ST_TO_ADDR
// hc_face_number := 4 ;
6035: LD_ADDR_OWVAR 34
6039: PUSH
6040: LD_INT 4
6042: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
6043: LD_ADDR_EXP 37
6047: PUSH
6048: LD_EXP 37
6052: PPUSH
6053: LD_INT 1
6055: PPUSH
6056: CALL_OW 44
6060: PPUSH
6061: CALL_OW 1
6065: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6066: LD_INT 2
6068: PPUSH
6069: LD_INT 4
6071: PPUSH
6072: LD_VAR 0 8
6076: PPUSH
6077: CALL_OW 380
// hc_gallery := SecondCharsGal ;
6081: LD_ADDR_OWVAR 33
6085: PUSH
6086: LD_STRING SecondCharsGal
6088: ST_TO_ADDR
// hc_face_number := 15 ;
6089: LD_ADDR_OWVAR 34
6093: PUSH
6094: LD_INT 15
6096: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
6097: LD_ADDR_EXP 37
6101: PUSH
6102: LD_EXP 37
6106: PPUSH
6107: LD_INT 2
6109: PPUSH
6110: CALL_OW 44
6114: PPUSH
6115: CALL_OW 1
6119: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , skill ) ;
6120: LD_INT 2
6122: PPUSH
6123: LD_INT 4
6125: PPUSH
6126: LD_VAR 0 8
6130: PPUSH
6131: CALL_OW 380
// hc_gallery :=  ;
6135: LD_ADDR_OWVAR 33
6139: PUSH
6140: LD_STRING 
6142: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
6143: LD_ADDR_EXP 37
6147: PUSH
6148: LD_EXP 37
6152: PPUSH
6153: LD_INT 3
6155: PPUSH
6156: CALL_OW 44
6160: PPUSH
6161: CALL_OW 1
6165: ST_TO_ADDR
// hc_sex := sex_male ;
6166: LD_ADDR_OWVAR 27
6170: PUSH
6171: LD_INT 1
6173: ST_TO_ADDR
// hc_class = 11 ;
6174: LD_ADDR_OWVAR 28
6178: PUSH
6179: LD_INT 11
6181: ST_TO_ADDR
// hc_gallery = sandar ;
6182: LD_ADDR_OWVAR 33
6186: PUSH
6187: LD_STRING sandar
6189: ST_TO_ADDR
// hc_face_number = 33 ;
6190: LD_ADDR_OWVAR 34
6194: PUSH
6195: LD_INT 33
6197: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
6198: LD_ADDR_OWVAR 26
6202: PUSH
6203: LD_STRING Thabit Muhair Saliba
6205: ST_TO_ADDR
// hc_skills = [ 5 , 5 , 3 , 3 ] ;
6206: LD_ADDR_OWVAR 31
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 5
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 3
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: ST_TO_ADDR
// Saliba := CreateHuman ;
6229: LD_ADDR_EXP 39
6233: PUSH
6234: CALL_OW 44
6238: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
6239: LD_EXP 39
6243: PPUSH
6244: LD_INT 7
6246: PPUSH
6247: CALL_OW 52
// hc_name := Dietrich Gensher ;
6251: LD_ADDR_OWVAR 26
6255: PUSH
6256: LD_STRING Dietrich Gensher
6258: ST_TO_ADDR
// hc_class := 1 ;
6259: LD_ADDR_OWVAR 28
6263: PUSH
6264: LD_INT 1
6266: ST_TO_ADDR
// hc_gallery := sandar ;
6267: LD_ADDR_OWVAR 33
6271: PUSH
6272: LD_STRING sandar
6274: ST_TO_ADDR
// hc_face_number := 4 ;
6275: LD_ADDR_OWVAR 34
6279: PUSH
6280: LD_INT 4
6282: ST_TO_ADDR
// hc_skills := [ 10 , 6 , 5 , 4 ] ;
6283: LD_ADDR_OWVAR 31
6287: PUSH
6288: LD_INT 10
6290: PUSH
6291: LD_INT 6
6293: PUSH
6294: LD_INT 5
6296: PUSH
6297: LD_INT 4
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: ST_TO_ADDR
// Gensher := CreateHuman ;
6306: LD_ADDR_EXP 40
6310: PUSH
6311: CALL_OW 44
6315: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_w ) ;
6316: LD_EXP 40
6320: PPUSH
6321: LD_INT 45
6323: PPUSH
6324: CALL_OW 52
// hc_name := Abdul Shariff ;
6328: LD_ADDR_OWVAR 26
6332: PUSH
6333: LD_STRING Abdul Shariff
6335: ST_TO_ADDR
// hc_class := 11 ;
6336: LD_ADDR_OWVAR 28
6340: PUSH
6341: LD_INT 11
6343: ST_TO_ADDR
// hc_gallery := sandar ;
6344: LD_ADDR_OWVAR 33
6348: PUSH
6349: LD_STRING sandar
6351: ST_TO_ADDR
// hc_face_number := 5 ;
6352: LD_ADDR_OWVAR 34
6356: PUSH
6357: LD_INT 5
6359: ST_TO_ADDR
// hc_skills := [ 6 , 5 , 3 , 3 ] ;
6360: LD_ADDR_OWVAR 31
6364: PUSH
6365: LD_INT 6
6367: PUSH
6368: LD_INT 5
6370: PUSH
6371: LD_INT 3
6373: PUSH
6374: LD_INT 3
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: ST_TO_ADDR
// Shariff := CreateHuman ;
6383: LD_ADDR_EXP 41
6387: PUSH
6388: CALL_OW 44
6392: ST_TO_ADDR
// PlaceHumanInUnit ( Shariff , ar_dep_n ) ;
6393: LD_EXP 41
6397: PPUSH
6398: LD_INT 94
6400: PPUSH
6401: CALL_OW 52
// InitHc ;
6405: CALL_OW 19
// for d := 1 to 5 do
6409: LD_ADDR_VAR 0 4
6413: PUSH
6414: DOUBLE
6415: LD_INT 1
6417: DEC
6418: ST_TO_ADDR
6419: LD_INT 5
6421: PUSH
6422: FOR_TO
6423: IFFALSE 6907
// begin fac := FilterUnitsInArea ( arAreas [ d ] , [ f_btype , b_factory ] ) ;
6425: LD_ADDR_VAR 0 11
6429: PUSH
6430: LD_EXP 49
6434: PUSH
6435: LD_VAR 0 4
6439: ARRAY
6440: PPUSH
6441: LD_INT 30
6443: PUSH
6444: LD_INT 3
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PPUSH
6451: CALL_OW 70
6455: ST_TO_ADDR
// if fac then
6456: LD_VAR 0 11
6460: IFFALSE 6493
// arFactories := Replace ( arFactories , d , fac [ 1 ] ) else
6462: LD_ADDR_EXP 48
6466: PUSH
6467: LD_EXP 48
6471: PPUSH
6472: LD_VAR 0 4
6476: PPUSH
6477: LD_VAR 0 11
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: CALL_OW 1
6490: ST_TO_ADDR
6491: GO 6516
// arFactories := Replace ( arFactories , d , 0 ) ;
6493: LD_ADDR_EXP 48
6497: PUSH
6498: LD_EXP 48
6502: PPUSH
6503: LD_VAR 0 4
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 1
6515: ST_TO_ADDR
// for i := 1 to 2 do
6516: LD_ADDR_VAR 0 3
6520: PUSH
6521: DOUBLE
6522: LD_INT 1
6524: DEC
6525: ST_TO_ADDR
6526: LD_INT 2
6528: PUSH
6529: FOR_TO
6530: IFFALSE 6673
// begin PrepareVehicle ( ar_half_tracked , engine_siberite , control_remote , ar_crane , 100 ) ;
6532: LD_INT 14
6534: PPUSH
6535: LD_INT 3
6537: PPUSH
6538: LD_INT 2
6540: PPUSH
6541: LD_INT 88
6543: PPUSH
6544: LD_INT 100
6546: PPUSH
6547: CALL 21486 0 5
// un := CreateVehicle ;
6551: LD_ADDR_VAR 0 6
6555: PUSH
6556: CALL_OW 45
6560: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6561: LD_ADDR_EXP 45
6565: PUSH
6566: LD_EXP 45
6570: PPUSH
6571: LD_EXP 45
6575: PUSH
6576: LD_INT 1
6578: PLUS
6579: PPUSH
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 6
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PPUSH
6594: CALL_OW 1
6598: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6599: LD_VAR 0 6
6603: PPUSH
6604: LD_INT 0
6606: PPUSH
6607: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6611: LD_VAR 0 6
6615: PPUSH
6616: LD_INT 0
6618: PPUSH
6619: LD_INT 5
6621: PPUSH
6622: CALL_OW 12
6626: PPUSH
6627: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6631: LD_VAR 0 6
6635: PPUSH
6636: LD_INT 24
6638: PUSH
6639: LD_INT 20
6641: PUSH
6642: LD_INT 21
6644: PUSH
6645: LD_INT 22
6647: PUSH
6648: LD_INT 46
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_VAR 0 4
6662: ARRAY
6663: PPUSH
6664: LD_INT 0
6666: PPUSH
6667: CALL_OW 49
// end ;
6671: GO 6529
6673: POP
6674: POP
// for i := 1 to 4 do
6675: LD_ADDR_VAR 0 3
6679: PUSH
6680: DOUBLE
6681: LD_INT 1
6683: DEC
6684: ST_TO_ADDR
6685: LD_INT 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6903
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_siberite , engine_solar ] [ rand ( 1 , 3 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
6691: LD_INT 14
6693: PPUSH
6694: LD_INT 3
6696: PUSH
6697: LD_INT 3
6699: PUSH
6700: LD_INT 2
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 1
6710: PPUSH
6711: LD_INT 3
6713: PPUSH
6714: CALL_OW 12
6718: ARRAY
6719: PPUSH
6720: LD_INT 1
6722: PUSH
6723: LD_INT 5
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 1
6732: PPUSH
6733: LD_INT 2
6735: PPUSH
6736: CALL_OW 12
6740: ARRAY
6741: PPUSH
6742: LD_INT 25
6744: PUSH
6745: LD_INT 27
6747: PUSH
6748: LD_INT 26
6750: PUSH
6751: LD_INT 28
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_VAR 0 3
6764: PUSH
6765: LD_INT 4
6767: MOD
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: ARRAY
6773: PPUSH
6774: LD_INT 100
6776: PPUSH
6777: CALL 21486 0 5
// un := CreateVehicle ;
6781: LD_ADDR_VAR 0 6
6785: PUSH
6786: CALL_OW 45
6790: ST_TO_ADDR
// arVehicles := Replace ( arVehicles , arVehicles + 1 , [ d , un ] ) ;
6791: LD_ADDR_EXP 45
6795: PUSH
6796: LD_EXP 45
6800: PPUSH
6801: LD_EXP 45
6805: PUSH
6806: LD_INT 1
6808: PLUS
6809: PPUSH
6810: LD_VAR 0 4
6814: PUSH
6815: LD_VAR 0 6
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PPUSH
6824: CALL_OW 1
6828: ST_TO_ADDR
// SetTag ( un , 0 ) ;
6829: LD_VAR 0 6
6833: PPUSH
6834: LD_INT 0
6836: PPUSH
6837: CALL_OW 109
// SetDir ( un , rand ( 0 , 5 ) ) ;
6841: LD_VAR 0 6
6845: PPUSH
6846: LD_INT 0
6848: PPUSH
6849: LD_INT 5
6851: PPUSH
6852: CALL_OW 12
6856: PPUSH
6857: CALL_OW 233
// PlaceUnitArea ( un , [ parking_south , parking_north , parking_west , parking_east , parking_north2 ] [ d ] , false ) ;
6861: LD_VAR 0 6
6865: PPUSH
6866: LD_INT 24
6868: PUSH
6869: LD_INT 20
6871: PUSH
6872: LD_INT 21
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 46
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: PUSH
6888: LD_VAR 0 4
6892: ARRAY
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
// end ;
6901: GO 6688
6903: POP
6904: POP
// end ;
6905: GO 6422
6907: POP
6908: POP
// InitHc ;
6909: CALL_OW 19
// tmp := FilterAllUnits ( [ f_side , 2 ] ) ;
6913: LD_ADDR_VAR 0 9
6917: PUSH
6918: LD_INT 22
6920: PUSH
6921: LD_INT 2
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 69
6932: ST_TO_ADDR
// if tmp and side <> 2 then
6933: LD_VAR 0 9
6937: PUSH
6938: LD_VAR 0 1
6942: PUSH
6943: LD_INT 2
6945: NONEQUAL
6946: AND
6947: IFFALSE 6980
// begin for i in tmp do
6949: LD_ADDR_VAR 0 3
6953: PUSH
6954: LD_VAR 0 9
6958: PUSH
6959: FOR_IN
6960: IFFALSE 6978
// SetSide ( i , side ) ;
6962: LD_VAR 0 3
6966: PPUSH
6967: LD_VAR 0 1
6971: PPUSH
6972: CALL_OW 235
6976: GO 6959
6978: POP
6979: POP
// end ; end ;
6980: LD_VAR 0 2
6984: RET
// export function PlaceMines ( area , n ) ; var i , tmp , r ; begin
6985: LD_INT 0
6987: PPUSH
6988: PPUSH
6989: PPUSH
6990: PPUSH
// tmp := AreaToList ( area , 0 ) ;
6991: LD_ADDR_VAR 0 5
6995: PUSH
6996: LD_VAR 0 1
7000: PPUSH
7001: LD_INT 0
7003: PPUSH
7004: CALL_OW 517
7008: ST_TO_ADDR
// if not tmp then
7009: LD_VAR 0 5
7013: NOT
7014: IFFALSE 7018
// exit ;
7016: GO 7256
// for i := 1 to n do
7018: LD_ADDR_VAR 0 4
7022: PUSH
7023: DOUBLE
7024: LD_INT 1
7026: DEC
7027: ST_TO_ADDR
7028: LD_VAR 0 2
7032: PUSH
7033: FOR_TO
7034: IFFALSE 7254
// begin r := rand ( 1 , tmp [ 1 ] ) ;
7036: LD_ADDR_VAR 0 6
7040: PUSH
7041: LD_INT 1
7043: PPUSH
7044: LD_VAR 0 5
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: CALL_OW 12
7057: ST_TO_ADDR
// PlaceMine ( tmp [ 1 ] [ r ] , tmp [ 2 ] [ r ] , side_bot , 0 ) ;
7058: LD_VAR 0 5
7062: PUSH
7063: LD_INT 1
7065: ARRAY
7066: PUSH
7067: LD_VAR 0 6
7071: ARRAY
7072: PPUSH
7073: LD_VAR 0 5
7077: PUSH
7078: LD_INT 2
7080: ARRAY
7081: PUSH
7082: LD_VAR 0 6
7086: ARRAY
7087: PPUSH
7088: LD_EXP 3
7092: PPUSH
7093: LD_INT 0
7095: PPUSH
7096: CALL_OW 454
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 1 ] [ r ] ) ;
7100: LD_ADDR_EXP 51
7104: PUSH
7105: LD_EXP 51
7109: PPUSH
7110: LD_EXP 51
7114: PUSH
7115: LD_INT 1
7117: PLUS
7118: PPUSH
7119: LD_VAR 0 5
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PUSH
7128: LD_VAR 0 6
7132: ARRAY
7133: PPUSH
7134: CALL_OW 2
7138: ST_TO_ADDR
// arMinesList := Insert ( arMinesList , arMinesList + 1 , tmp [ 2 ] [ r ] ) ;
7139: LD_ADDR_EXP 51
7143: PUSH
7144: LD_EXP 51
7148: PPUSH
7149: LD_EXP 51
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: PPUSH
7158: LD_VAR 0 5
7162: PUSH
7163: LD_INT 2
7165: ARRAY
7166: PUSH
7167: LD_VAR 0 6
7171: ARRAY
7172: PPUSH
7173: CALL_OW 2
7177: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , Delete ( tmp [ 1 ] , r ) ) ;
7178: LD_ADDR_VAR 0 5
7182: PUSH
7183: LD_VAR 0 5
7187: PPUSH
7188: LD_INT 1
7190: PPUSH
7191: LD_VAR 0 5
7195: PUSH
7196: LD_INT 1
7198: ARRAY
7199: PPUSH
7200: LD_VAR 0 6
7204: PPUSH
7205: CALL_OW 3
7209: PPUSH
7210: CALL_OW 1
7214: ST_TO_ADDR
// tmp := Replace ( tmp , 2 , Delete ( tmp [ 2 ] , r ) ) ;
7215: LD_ADDR_VAR 0 5
7219: PUSH
7220: LD_VAR 0 5
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_VAR 0 5
7232: PUSH
7233: LD_INT 2
7235: ARRAY
7236: PPUSH
7237: LD_VAR 0 6
7241: PPUSH
7242: CALL_OW 3
7246: PPUSH
7247: CALL_OW 1
7251: ST_TO_ADDR
// end ;
7252: GO 7033
7254: POP
7255: POP
// end ;
7256: LD_VAR 0 3
7260: RET
// export arTech , arConstructList , arBuildings , arVehicles , arVehiclesAtttackers , arDrivers , arFactories , arAreas , arVehiclesCounter , arMinesList ; function InitScriptBases ; begin
7261: LD_INT 0
7263: PPUSH
// arTech := GetTechNation ( side_bot , nation_arabian , state_enabled ) ;
7264: LD_ADDR_EXP 42
7268: PUSH
7269: LD_EXP 3
7273: PPUSH
7274: LD_INT 2
7276: PPUSH
7277: LD_INT 1
7279: PPUSH
7280: CALL 16709 0 3
7284: ST_TO_ADDR
// arConstructList := [ ] ;
7285: LD_ADDR_EXP 43
7289: PUSH
7290: EMPTY
7291: ST_TO_ADDR
// arBuildings := [ ] ;
7292: LD_ADDR_EXP 44
7296: PUSH
7297: EMPTY
7298: ST_TO_ADDR
// arVehicles := [ ] ;
7299: LD_ADDR_EXP 45
7303: PUSH
7304: EMPTY
7305: ST_TO_ADDR
// arVehiclesAtttackers := [ ] ;
7306: LD_ADDR_EXP 46
7310: PUSH
7311: EMPTY
7312: ST_TO_ADDR
// arDrivers := [ ] ;
7313: LD_ADDR_EXP 47
7317: PUSH
7318: EMPTY
7319: ST_TO_ADDR
// arFactories := [ ] ;
7320: LD_ADDR_EXP 48
7324: PUSH
7325: EMPTY
7326: ST_TO_ADDR
// arAreas := [ area_base_south , area_base_north , area_base_west , area_base_east , area_base_north2 ] ;
7327: LD_ADDR_EXP 49
7331: PUSH
7332: LD_INT 33
7334: PUSH
7335: LD_INT 35
7337: PUSH
7338: LD_INT 34
7340: PUSH
7341: LD_INT 36
7343: PUSH
7344: LD_INT 38
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: ST_TO_ADDR
// arVehiclesCounter := [ 6 , 6 , 6 , 6 , 2 ] ;
7354: LD_ADDR_EXP 50
7358: PUSH
7359: LD_INT 6
7361: PUSH
7362: LD_INT 6
7364: PUSH
7365: LD_INT 6
7367: PUSH
7368: LD_INT 6
7370: PUSH
7371: LD_INT 2
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: ST_TO_ADDR
// arMinesList := [ ] ;
7381: LD_ADDR_EXP 51
7385: PUSH
7386: EMPTY
7387: ST_TO_ADDR
// PlaceMines ( minefield_east , [ 7 , 9 , 11 ] [ Difficulty ] ) ;
7388: LD_INT 1
7390: PPUSH
7391: LD_INT 7
7393: PUSH
7394: LD_INT 9
7396: PUSH
7397: LD_INT 11
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: CALL 6985 0 2
// PlaceMines ( minefield_north , [ 7 , 9 , 9 ] [ Difficulty ] ) ;
7415: LD_INT 3
7417: PPUSH
7418: LD_INT 7
7420: PUSH
7421: LD_INT 9
7423: PUSH
7424: LD_INT 9
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: LD_OWVAR 67
7436: ARRAY
7437: PPUSH
7438: CALL 6985 0 2
// PlaceMines ( minefield_west , [ 6 , 8 , 12 ] [ Difficulty ] ) ;
7442: LD_INT 2
7444: PPUSH
7445: LD_INT 6
7447: PUSH
7448: LD_INT 8
7450: PUSH
7451: LD_INT 12
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: LD_OWVAR 67
7463: ARRAY
7464: PPUSH
7465: CALL 6985 0 2
// PlaceMines ( minefield_north2 , [ 5 , 7 , 9 ] [ Difficulty ] ) ;
7469: LD_INT 39
7471: PPUSH
7472: LD_INT 5
7474: PUSH
7475: LD_INT 7
7477: PUSH
7478: LD_INT 9
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: PUSH
7486: LD_OWVAR 67
7490: ARRAY
7491: PPUSH
7492: CALL 6985 0 2
// PlaceMines ( minefield_south , [ 4 , 6 , 8 ] [ Difficulty ] ) ;
7496: LD_INT 25
7498: PPUSH
7499: LD_INT 4
7501: PUSH
7502: LD_INT 6
7504: PUSH
7505: LD_INT 8
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PUSH
7513: LD_OWVAR 67
7517: ARRAY
7518: PPUSH
7519: CALL 6985 0 2
// PlaceMines ( minefield_extra , [ 12 , 14 , 16 ] [ Difficulty ] ) ;
7523: LD_INT 41
7525: PPUSH
7526: LD_INT 12
7528: PUSH
7529: LD_INT 14
7531: PUSH
7532: LD_INT 16
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: LIST
7539: PUSH
7540: LD_OWVAR 67
7544: ARRAY
7545: PPUSH
7546: CALL 6985 0 2
// end ;
7550: LD_VAR 0 1
7554: RET
// function ArabianBaseScript ( side , base , area , outerArea , forces , healPoint , parkingPoint ) ; var i , tmp , undone , lab , eng , mech , tag , tw , cr , sci , sol , hurtUnits , enemy , enemyInBase , enemyOuterBase , drivers , cranes , vehicles , vehicles2 , empty , fac , emptyTowers , weapon , depot , buildingsToBuild , enemySide ; begin
7555: LD_INT 0
7557: PPUSH
7558: PPUSH
7559: PPUSH
7560: PPUSH
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
7568: PPUSH
7569: PPUSH
7570: PPUSH
7571: PPUSH
7572: PPUSH
7573: PPUSH
7574: PPUSH
7575: PPUSH
7576: PPUSH
7577: PPUSH
7578: PPUSH
7579: PPUSH
7580: PPUSH
7581: PPUSH
7582: PPUSH
7583: PPUSH
// enable ;
7584: ENABLE
// tmp := FilterAllUnits ( [ f_enemy , side ] ) ;
7585: LD_ADDR_VAR 0 10
7589: PUSH
7590: LD_INT 81
7592: PUSH
7593: LD_VAR 0 1
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: CALL_OW 69
7606: ST_TO_ADDR
// if tmp then
7607: LD_VAR 0 10
7611: IFFALSE 7632
// enemySide := GetSide ( tmp [ 1 ] ) ;
7613: LD_ADDR_VAR 0 34
7617: PUSH
7618: LD_VAR 0 10
7622: PUSH
7623: LD_INT 1
7625: ARRAY
7626: PPUSH
7627: CALL_OW 255
7631: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
7632: LD_ADDR_VAR 0 22
7636: PUSH
7637: LD_VAR 0 3
7641: PPUSH
7642: LD_INT 81
7644: PUSH
7645: LD_VAR 0 1
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 70
7658: ST_TO_ADDR
// enemyOuterBase := FilterUnitsInArea ( outerArea , [ f_enemy , side ] ) ;
7659: LD_ADDR_VAR 0 23
7663: PUSH
7664: LD_VAR 0 4
7668: PPUSH
7669: LD_INT 81
7671: PUSH
7672: LD_VAR 0 1
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PPUSH
7681: CALL_OW 70
7685: ST_TO_ADDR
// vehicles := CheckByIndex ( arVehicles , 1 , base , 2 ) ;
7686: LD_ADDR_VAR 0 26
7690: PUSH
7691: LD_EXP 45
7695: PPUSH
7696: LD_INT 1
7698: PPUSH
7699: LD_VAR 0 2
7703: PPUSH
7704: LD_INT 2
7706: PPUSH
7707: CALL 58867 0 4
7711: ST_TO_ADDR
// depot := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7712: LD_ADDR_VAR 0 32
7716: PUSH
7717: LD_VAR 0 3
7721: PPUSH
7722: LD_INT 22
7724: PUSH
7725: LD_VAR 0 1
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: PUSH
7734: LD_INT 2
7736: PUSH
7737: LD_INT 30
7739: PUSH
7740: LD_INT 0
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 30
7749: PUSH
7750: LD_INT 1
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PPUSH
7766: CALL_OW 70
7770: ST_TO_ADDR
// if depot then
7771: LD_VAR 0 32
7775: IFFALSE 7791
// depot := depot [ 1 ] ;
7777: LD_ADDR_VAR 0 32
7781: PUSH
7782: LD_VAR 0 32
7786: PUSH
7787: LD_INT 1
7789: ARRAY
7790: ST_TO_ADDR
// if arTech then
7791: LD_EXP 42
7795: IFFALSE 7956
// begin lab := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7797: LD_ADDR_VAR 0 12
7801: PUSH
7802: LD_VAR 0 3
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_VAR 0 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: LD_INT 2
7827: PUSH
7828: LD_INT 30
7830: PUSH
7831: LD_INT 6
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 30
7840: PUSH
7841: LD_INT 7
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: LD_INT 30
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: PUSH
7864: EMPTY
7865: LIST
7866: LIST
7867: LIST
7868: PPUSH
7869: CALL_OW 70
7873: ST_TO_ADDR
// if lab then
7874: LD_VAR 0 12
7878: IFFALSE 7956
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
7880: LD_VAR 0 12
7884: PUSH
7885: LD_INT 1
7887: ARRAY
7888: PPUSH
7889: CALL_OW 461
7893: PUSH
7894: LD_INT 2
7896: EQUAL
7897: IFFALSE 7956
// begin for i in arTech do
7899: LD_ADDR_VAR 0 9
7903: PUSH
7904: LD_EXP 42
7908: PUSH
7909: FOR_IN
7910: IFFALSE 7954
// if CanBeResearched ( lab [ 1 ] , i ) then
7912: LD_VAR 0 12
7916: PUSH
7917: LD_INT 1
7919: ARRAY
7920: PPUSH
7921: LD_VAR 0 9
7925: PPUSH
7926: CALL_OW 430
7930: IFFALSE 7952
// begin ComResearch ( lab [ 1 ] , i ) ;
7932: LD_VAR 0 12
7936: PUSH
7937: LD_INT 1
7939: ARRAY
7940: PPUSH
7941: LD_VAR 0 9
7945: PPUSH
7946: CALL_OW 124
// break ;
7950: GO 7954
// end ;
7952: GO 7909
7954: POP
7955: POP
// end ; end ; end ; fac := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
7956: LD_ADDR_VAR 0 29
7960: PUSH
7961: LD_VAR 0 3
7965: PPUSH
7966: LD_INT 22
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 30
7980: PUSH
7981: LD_INT 3
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 50
7990: PUSH
7991: EMPTY
7992: LIST
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: LIST
7998: PPUSH
7999: CALL_OW 70
8003: ST_TO_ADDR
// if fac then
8004: LD_VAR 0 29
8008: IFFALSE 8397
// begin if BuildingStatus ( fac [ 1 ] ) = bs_idle then
8010: LD_VAR 0 29
8014: PUSH
8015: LD_INT 1
8017: ARRAY
8018: PPUSH
8019: CALL_OW 461
8023: PUSH
8024: LD_INT 2
8026: EQUAL
8027: IFFALSE 8397
// begin emptyTowers := FilterUnitsInArea ( area , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
8029: LD_ADDR_VAR 0 30
8033: PUSH
8034: LD_VAR 0 3
8038: PPUSH
8039: LD_INT 2
8041: PUSH
8042: LD_INT 30
8044: PUSH
8045: LD_INT 32
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 30
8054: PUSH
8055: LD_INT 33
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 35
8069: PUSH
8070: LD_INT 0
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: PPUSH
8081: CALL_OW 70
8085: ST_TO_ADDR
// if emptyTowers then
8086: LD_VAR 0 30
8090: IFFALSE 8140
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , area ) ;
8092: LD_ADDR_VAR 0 31
8096: PUSH
8097: LD_VAR 0 30
8101: PUSH
8102: LD_INT 1
8104: ARRAY
8105: PPUSH
8106: LD_VAR 0 3
8110: PPUSH
8111: CALL 26993 0 2
8115: ST_TO_ADDR
// if weapon then
8116: LD_VAR 0 31
8120: IFFALSE 8140
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
8122: LD_VAR 0 30
8126: PUSH
8127: LD_INT 1
8129: ARRAY
8130: PPUSH
8131: LD_VAR 0 31
8135: PPUSH
8136: CALL_OW 148
// end ; if arConstructList then
8140: LD_EXP 43
8144: IFFALSE 8397
// for i := 1 to Count ( arConstructList ) do
8146: LD_ADDR_VAR 0 9
8150: PUSH
8151: DOUBLE
8152: LD_INT 1
8154: DEC
8155: ST_TO_ADDR
8156: LD_EXP 43
8160: PPUSH
8161: CALL 18748 0 1
8165: PUSH
8166: FOR_TO
8167: IFFALSE 8395
// begin if arConstructList [ i ] [ 1 ] = base then
8169: LD_EXP 43
8173: PUSH
8174: LD_VAR 0 9
8178: ARRAY
8179: PUSH
8180: LD_INT 1
8182: ARRAY
8183: PUSH
8184: LD_VAR 0 2
8188: EQUAL
8189: IFFALSE 8393
// if CanBeConstructed ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) then
8191: LD_VAR 0 29
8195: PUSH
8196: LD_INT 1
8198: ARRAY
8199: PPUSH
8200: LD_EXP 43
8204: PUSH
8205: LD_VAR 0 9
8209: ARRAY
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_EXP 43
8223: PUSH
8224: LD_VAR 0 9
8228: ARRAY
8229: PUSH
8230: LD_INT 2
8232: ARRAY
8233: PUSH
8234: LD_INT 2
8236: ARRAY
8237: PPUSH
8238: LD_EXP 43
8242: PUSH
8243: LD_VAR 0 9
8247: ARRAY
8248: PUSH
8249: LD_INT 2
8251: ARRAY
8252: PUSH
8253: LD_INT 3
8255: ARRAY
8256: PPUSH
8257: LD_EXP 43
8261: PUSH
8262: LD_VAR 0 9
8266: ARRAY
8267: PUSH
8268: LD_INT 2
8270: ARRAY
8271: PUSH
8272: LD_INT 4
8274: ARRAY
8275: PPUSH
8276: CALL_OW 448
8280: IFFALSE 8393
// begin ComConstruct ( fac [ 1 ] , arConstructList [ i ] [ 2 ] [ 1 ] , arConstructList [ i ] [ 2 ] [ 2 ] , arConstructList [ i ] [ 2 ] [ 3 ] , arConstructList [ i ] [ 2 ] [ 4 ] ) ;
8282: LD_VAR 0 29
8286: PUSH
8287: LD_INT 1
8289: ARRAY
8290: PPUSH
8291: LD_EXP 43
8295: PUSH
8296: LD_VAR 0 9
8300: ARRAY
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PUSH
8306: LD_INT 1
8308: ARRAY
8309: PPUSH
8310: LD_EXP 43
8314: PUSH
8315: LD_VAR 0 9
8319: ARRAY
8320: PUSH
8321: LD_INT 2
8323: ARRAY
8324: PUSH
8325: LD_INT 2
8327: ARRAY
8328: PPUSH
8329: LD_EXP 43
8333: PUSH
8334: LD_VAR 0 9
8338: ARRAY
8339: PUSH
8340: LD_INT 2
8342: ARRAY
8343: PUSH
8344: LD_INT 3
8346: ARRAY
8347: PPUSH
8348: LD_EXP 43
8352: PUSH
8353: LD_VAR 0 9
8357: ARRAY
8358: PUSH
8359: LD_INT 2
8361: ARRAY
8362: PUSH
8363: LD_INT 4
8365: ARRAY
8366: PPUSH
8367: CALL_OW 125
// arConstructList := Delete ( arConstructList , i ) ;
8371: LD_ADDR_EXP 43
8375: PUSH
8376: LD_EXP 43
8380: PPUSH
8381: LD_VAR 0 9
8385: PPUSH
8386: CALL_OW 3
8390: ST_TO_ADDR
// break ;
8391: GO 8395
// end ; end ;
8393: GO 8166
8395: POP
8396: POP
// end ; end ; tmp := FilterUnitsInArea ( area , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8397: LD_ADDR_VAR 0 10
8401: PUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: LD_INT 21
8409: PUSH
8410: LD_INT 3
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 3
8419: PUSH
8420: LD_INT 57
8422: PUSH
8423: EMPTY
8424: LIST
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 3
8432: PUSH
8433: LD_INT 24
8435: PUSH
8436: LD_INT 1000
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 70
8456: ST_TO_ADDR
// cr := GetListOfCratesInArea ( area ) ;
8457: LD_ADDR_VAR 0 17
8461: PUSH
8462: LD_VAR 0 3
8466: PPUSH
8467: CALL_OW 435
8471: ST_TO_ADDR
// mech := UnitFilter ( forces , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: LD_INT 25
8484: PUSH
8485: LD_INT 3
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_INT 50
8494: PUSH
8495: EMPTY
8496: LIST
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) and IsOk ( arFactories [ base ] ) then
8507: LD_VAR 0 14
8511: PPUSH
8512: LD_INT 3
8514: PUSH
8515: LD_INT 120
8517: PUSH
8518: LD_INT 7
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 3
8531: PUSH
8532: LD_INT 54
8534: PUSH
8535: EMPTY
8536: LIST
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 72
8550: PUSH
8551: LD_EXP 48
8555: PUSH
8556: LD_VAR 0 2
8560: ARRAY
8561: PPUSH
8562: CALL_OW 302
8566: AND
8567: IFFALSE 8628
// ComEnterUnit ( UnitFilter ( mech , [ [ f_not , [ f_tag , tMech ] ] , [ f_not , [ f_inside ] ] ] ) , arFactories [ base ] ) ;
8569: LD_VAR 0 14
8573: PPUSH
8574: LD_INT 3
8576: PUSH
8577: LD_INT 120
8579: PUSH
8580: LD_INT 7
8582: PUSH
8583: EMPTY
8584: LIST
8585: LIST
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PUSH
8591: LD_INT 3
8593: PUSH
8594: LD_INT 54
8596: PUSH
8597: EMPTY
8598: LIST
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 72
8612: PPUSH
8613: LD_EXP 48
8617: PUSH
8618: LD_VAR 0 2
8622: ARRAY
8623: PPUSH
8624: CALL_OW 120
// sci := UnitFilter ( forces , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
8628: LD_ADDR_VAR 0 18
8632: PUSH
8633: LD_VAR 0 5
8637: PPUSH
8638: LD_INT 25
8640: PUSH
8641: LD_INT 4
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 50
8650: PUSH
8651: EMPTY
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PPUSH
8658: CALL_OW 72
8662: ST_TO_ADDR
// lab := FilterUnitsInArea ( area , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
8663: LD_ADDR_VAR 0 12
8667: PUSH
8668: LD_VAR 0 3
8672: PPUSH
8673: LD_INT 2
8675: PUSH
8676: LD_INT 30
8678: PUSH
8679: LD_INT 6
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: PUSH
8686: LD_INT 30
8688: PUSH
8689: LD_INT 7
8691: PUSH
8692: EMPTY
8693: LIST
8694: LIST
8695: PUSH
8696: LD_INT 30
8698: PUSH
8699: LD_INT 8
8701: PUSH
8702: EMPTY
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: PPUSH
8712: CALL_OW 70
8716: ST_TO_ADDR
// if sci then
8717: LD_VAR 0 18
8721: IFFALSE 8882
// begin hurtUnits := UnitFilter ( forces , [ [ f_inarea , area ] , [ f_tag , tHeal ] ] ) ;
8723: LD_ADDR_VAR 0 20
8727: PUSH
8728: LD_VAR 0 5
8732: PPUSH
8733: LD_INT 95
8735: PUSH
8736: LD_VAR 0 3
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 120
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 72
8763: ST_TO_ADDR
// if hurtUnits then
8764: LD_VAR 0 20
8768: IFFALSE 8829
// begin for i in sci do
8770: LD_ADDR_VAR 0 9
8774: PUSH
8775: LD_VAR 0 18
8779: PUSH
8780: FOR_IN
8781: IFFALSE 8825
// if IsInUnit ( i ) then
8783: LD_VAR 0 9
8787: PPUSH
8788: CALL_OW 310
8792: IFFALSE 8805
// ComExitBuilding ( i ) else
8794: LD_VAR 0 9
8798: PPUSH
8799: CALL_OW 122
8803: GO 8823
// ComHeal ( i , hurtUnits [ 1 ] ) ;
8805: LD_VAR 0 9
8809: PPUSH
8810: LD_VAR 0 20
8814: PUSH
8815: LD_INT 1
8817: ARRAY
8818: PPUSH
8819: CALL_OW 128
8823: GO 8780
8825: POP
8826: POP
// end else
8827: GO 8882
// if lab then
8829: LD_VAR 0 12
8833: IFFALSE 8882
// begin for i in sci do
8835: LD_ADDR_VAR 0 9
8839: PUSH
8840: LD_VAR 0 18
8844: PUSH
8845: FOR_IN
8846: IFFALSE 8880
// if not IsInUnit ( i ) then
8848: LD_VAR 0 9
8852: PPUSH
8853: CALL_OW 310
8857: NOT
8858: IFFALSE 8878
// ComEnterUnit ( i , lab [ 1 ] ) ;
8860: LD_VAR 0 9
8864: PPUSH
8865: LD_VAR 0 12
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: PPUSH
8874: CALL_OW 120
8878: GO 8845
8880: POP
8881: POP
// end ; end ; eng := UnitFilter ( forces , [ f_class , 2 ] ) ;
8882: LD_ADDR_VAR 0 13
8886: PUSH
8887: LD_VAR 0 5
8891: PPUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PPUSH
8902: CALL_OW 72
8906: ST_TO_ADDR
// buildingsToBuild := CheckByIndex ( arBuildings , 1 , base , 2 ) ;
8907: LD_ADDR_VAR 0 33
8911: PUSH
8912: LD_EXP 44
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_VAR 0 2
8924: PPUSH
8925: LD_INT 2
8927: PPUSH
8928: CALL 58867 0 4
8932: ST_TO_ADDR
// if eng then
8933: LD_VAR 0 13
8937: IFFALSE 9771
// begin for i in eng do
8939: LD_ADDR_VAR 0 9
8943: PUSH
8944: LD_VAR 0 13
8948: PUSH
8949: FOR_IN
8950: IFFALSE 9769
// begin tag := GetTag ( i ) ;
8952: LD_ADDR_VAR 0 15
8956: PUSH
8957: LD_VAR 0 9
8961: PPUSH
8962: CALL_OW 110
8966: ST_TO_ADDR
// if IsInArea ( i , outerArea ) then
8967: LD_VAR 0 9
8971: PPUSH
8972: LD_VAR 0 4
8976: PPUSH
8977: CALL_OW 308
8981: IFFALSE 9012
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
8983: LD_VAR 0 9
8987: PPUSH
8988: LD_VAR 0 7
8992: PUSH
8993: LD_INT 1
8995: ARRAY
8996: PPUSH
8997: LD_VAR 0 7
9001: PUSH
9002: LD_INT 2
9004: ARRAY
9005: PPUSH
9006: CALL_OW 111
// continue ;
9010: GO 8949
// end ; if GetLives ( i ) < 800 and tag <> tHeal then
9012: LD_VAR 0 9
9016: PPUSH
9017: CALL_OW 256
9021: PUSH
9022: LD_INT 800
9024: LESS
9025: PUSH
9026: LD_VAR 0 15
9030: PUSH
9031: LD_INT 1
9033: NONEQUAL
9034: AND
9035: IFFALSE 9085
// begin SetTag ( i , tHeal ) ;
9037: LD_VAR 0 9
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
9049: LD_VAR 0 9
9053: PPUSH
9054: LD_VAR 0 6
9058: PUSH
9059: LD_INT 1
9061: ARRAY
9062: PPUSH
9063: LD_VAR 0 6
9067: PUSH
9068: LD_INT 2
9070: ARRAY
9071: PPUSH
9072: CALL_OW 111
// AddComHold ( i ) ;
9076: LD_VAR 0 9
9080: PPUSH
9081: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
9085: LD_VAR 0 15
9089: PUSH
9090: LD_INT 1
9092: EQUAL
9093: PUSH
9094: LD_VAR 0 9
9098: PPUSH
9099: CALL_OW 256
9103: PUSH
9104: LD_INT 1000
9106: EQUAL
9107: AND
9108: IFFALSE 9122
// SetTag ( i , 0 ) ;
9110: LD_VAR 0 9
9114: PPUSH
9115: LD_INT 0
9117: PPUSH
9118: CALL_OW 109
// if not tag then
9122: LD_VAR 0 15
9126: NOT
9127: IFFALSE 9294
// begin undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9129: LD_ADDR_VAR 0 11
9133: PUSH
9134: LD_VAR 0 3
9138: PPUSH
9139: LD_INT 57
9141: PUSH
9142: EMPTY
9143: LIST
9144: PPUSH
9145: CALL_OW 70
9149: ST_TO_ADDR
// if undone then
9150: LD_VAR 0 11
9154: IFFALSE 9176
// begin ComComplete ( i , undone [ 1 ] ) ;
9156: LD_VAR 0 9
9160: PPUSH
9161: LD_VAR 0 11
9165: PUSH
9166: LD_INT 1
9168: ARRAY
9169: PPUSH
9170: CALL 24846 0 2
// continue ;
9174: GO 8949
// end ; if cr or tmp or buildingsToBuild then
9176: LD_VAR 0 17
9180: PUSH
9181: LD_VAR 0 10
9185: OR
9186: PUSH
9187: LD_VAR 0 33
9191: OR
9192: IFFALSE 9268
// begin if IsInUnit ( i ) then
9194: LD_VAR 0 9
9198: PPUSH
9199: CALL_OW 310
9203: IFFALSE 9214
// ComExitBuilding ( i ) ;
9205: LD_VAR 0 9
9209: PPUSH
9210: CALL_OW 122
// if tmp then
9214: LD_VAR 0 10
9218: IFFALSE 9234
// SetTag ( i , tRepair ) else
9220: LD_VAR 0 9
9224: PPUSH
9225: LD_INT 3
9227: PPUSH
9228: CALL_OW 109
9232: GO 9266
// if cr then
9234: LD_VAR 0 17
9238: IFFALSE 9254
// SetTag ( i , tCrates ) else
9240: LD_VAR 0 9
9244: PPUSH
9245: LD_INT 2
9247: PPUSH
9248: CALL_OW 109
9252: GO 9266
// SetTag ( i , tBuild ) ;
9254: LD_VAR 0 9
9258: PPUSH
9259: LD_INT 5
9261: PPUSH
9262: CALL_OW 109
// end else
9266: GO 9294
// if not IsInUnit ( i ) then
9268: LD_VAR 0 9
9272: PPUSH
9273: CALL_OW 310
9277: NOT
9278: IFFALSE 9294
// ComEnterUnit ( i , depot ) ;
9280: LD_VAR 0 9
9284: PPUSH
9285: LD_VAR 0 32
9289: PPUSH
9290: CALL_OW 120
// end ; if tag = tRepair then
9294: LD_VAR 0 15
9298: PUSH
9299: LD_INT 3
9301: EQUAL
9302: IFFALSE 9408
// begin if IsInUnit ( i ) then
9304: LD_VAR 0 9
9308: PPUSH
9309: CALL_OW 310
9313: IFFALSE 9326
// begin ComExitBuilding ( i ) ;
9315: LD_VAR 0 9
9319: PPUSH
9320: CALL_OW 122
// continue ;
9324: GO 8949
// end ; if not tmp then
9326: LD_VAR 0 10
9330: NOT
9331: IFFALSE 9347
// begin SetTag ( i , 0 ) ;
9333: LD_VAR 0 9
9337: PPUSH
9338: LD_INT 0
9340: PPUSH
9341: CALL_OW 109
// continue ;
9345: GO 8949
// end ; if not HasTask ( i ) then
9347: LD_VAR 0 9
9351: PPUSH
9352: CALL_OW 314
9356: NOT
9357: IFFALSE 9377
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
9359: LD_VAR 0 9
9363: PPUSH
9364: LD_VAR 0 10
9368: PUSH
9369: LD_INT 1
9371: ARRAY
9372: PPUSH
9373: CALL_OW 130
// if not IsInArea ( i , area ) then
9377: LD_VAR 0 9
9381: PPUSH
9382: LD_VAR 0 3
9386: PPUSH
9387: CALL_OW 308
9391: NOT
9392: IFFALSE 9408
// ComMoveToArea ( i , area ) ;
9394: LD_VAR 0 9
9398: PPUSH
9399: LD_VAR 0 3
9403: PPUSH
9404: CALL_OW 113
// end ; if tag = tBuild then
9408: LD_VAR 0 15
9412: PUSH
9413: LD_INT 5
9415: EQUAL
9416: IFFALSE 9622
// begin if IsInUnit ( i ) then
9418: LD_VAR 0 9
9422: PPUSH
9423: CALL_OW 310
9427: IFFALSE 9440
// begin ComExitBuilding ( i ) ;
9429: LD_VAR 0 9
9433: PPUSH
9434: CALL_OW 122
// continue ;
9438: GO 8949
// end ; if not buildingsToBuild or enemyInBase or enemyOuterBase then
9440: LD_VAR 0 33
9444: NOT
9445: PUSH
9446: LD_VAR 0 22
9450: OR
9451: PUSH
9452: LD_VAR 0 23
9456: OR
9457: IFFALSE 9475
// begin SetTag ( i , 0 ) ;
9459: LD_VAR 0 9
9463: PPUSH
9464: LD_INT 0
9466: PPUSH
9467: CALL_OW 109
// continue ;
9471: GO 8949
// end else
9473: GO 9514
// if not CanBeBuiltOnlyResources ( depot , buildingsToBuild [ 1 ] [ 1 ] ) then
9475: LD_VAR 0 32
9479: PPUSH
9480: LD_VAR 0 33
9484: PUSH
9485: LD_INT 1
9487: ARRAY
9488: PUSH
9489: LD_INT 1
9491: ARRAY
9492: PPUSH
9493: CALL 59004 0 2
9497: NOT
9498: IFFALSE 9514
// begin SetTag ( i , 0 ) ;
9500: LD_VAR 0 9
9504: PPUSH
9505: LD_INT 0
9507: PPUSH
9508: CALL_OW 109
// continue ;
9512: GO 8949
// end ; undone := FilterUnitsInArea ( area , [ f_constructed ] ) ;
9514: LD_ADDR_VAR 0 11
9518: PUSH
9519: LD_VAR 0 3
9523: PPUSH
9524: LD_INT 57
9526: PUSH
9527: EMPTY
9528: LIST
9529: PPUSH
9530: CALL_OW 70
9534: ST_TO_ADDR
// if undone then
9535: LD_VAR 0 11
9539: IFFALSE 9561
// begin ComComplete ( i , undone [ 1 ] ) ;
9541: LD_VAR 0 9
9545: PPUSH
9546: LD_VAR 0 11
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: CALL 24846 0 2
// continue ;
9559: GO 8949
// end ; ComBuild ( i , buildingsToBuild [ 1 ] [ 1 ] , buildingsToBuild [ 1 ] [ 2 ] , buildingsToBuild [ 1 ] [ 3 ] , buildingsToBuild [ 1 ] [ 4 ] ) ;
9561: LD_VAR 0 9
9565: PPUSH
9566: LD_VAR 0 33
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PUSH
9575: LD_INT 1
9577: ARRAY
9578: PPUSH
9579: LD_VAR 0 33
9583: PUSH
9584: LD_INT 1
9586: ARRAY
9587: PUSH
9588: LD_INT 2
9590: ARRAY
9591: PPUSH
9592: LD_VAR 0 33
9596: PUSH
9597: LD_INT 1
9599: ARRAY
9600: PUSH
9601: LD_INT 3
9603: ARRAY
9604: PPUSH
9605: LD_VAR 0 33
9609: PUSH
9610: LD_INT 1
9612: ARRAY
9613: PUSH
9614: LD_INT 4
9616: ARRAY
9617: PPUSH
9618: CALL_OW 145
// end ; if tag = tCrates then
9622: LD_VAR 0 15
9626: PUSH
9627: LD_INT 2
9629: EQUAL
9630: IFFALSE 9767
// begin if IsInUnit ( i ) then
9632: LD_VAR 0 9
9636: PPUSH
9637: CALL_OW 310
9641: IFFALSE 9654
// begin ComExitBuilding ( i ) ;
9643: LD_VAR 0 9
9647: PPUSH
9648: CALL_OW 122
// continue ;
9652: GO 8949
// end ; if not cr then
9654: LD_VAR 0 17
9658: NOT
9659: IFFALSE 9675
// begin SetTag ( i , 0 ) ;
9661: LD_VAR 0 9
9665: PPUSH
9666: LD_INT 0
9668: PPUSH
9669: CALL_OW 109
// continue ;
9673: GO 8949
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
9675: LD_VAR 0 9
9679: PPUSH
9680: CALL_OW 314
9684: NOT
9685: PUSH
9686: LD_INT 81
9688: PUSH
9689: LD_VAR 0 1
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: PUSH
9698: LD_INT 92
9700: PUSH
9701: LD_VAR 0 17
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PUSH
9710: LD_VAR 0 17
9714: PUSH
9715: LD_INT 2
9717: ARRAY
9718: PUSH
9719: LD_INT 12
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: PPUSH
9732: CALL_OW 69
9736: NOT
9737: AND
9738: IFFALSE 9767
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
9740: LD_VAR 0 9
9744: PPUSH
9745: LD_VAR 0 17
9749: PUSH
9750: LD_INT 1
9752: ARRAY
9753: PPUSH
9754: LD_VAR 0 17
9758: PUSH
9759: LD_INT 2
9761: ARRAY
9762: PPUSH
9763: CALL_OW 117
// end ; end ;
9767: GO 8949
9769: POP
9770: POP
// end ; cranes := UnitFilter ( vehicles , [ [ f_weapon , ar_crane ] , [ f_ok ] ] ) ;
9771: LD_ADDR_VAR 0 25
9775: PUSH
9776: LD_VAR 0 26
9780: PPUSH
9781: LD_INT 34
9783: PUSH
9784: LD_INT 88
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 50
9793: PUSH
9794: EMPTY
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 72
9805: ST_TO_ADDR
// if cranes then
9806: LD_VAR 0 25
9810: IFFALSE 9875
// begin if tmp then
9812: LD_VAR 0 10
9816: IFFALSE 9861
// begin for i in cranes do
9818: LD_ADDR_VAR 0 9
9822: PUSH
9823: LD_VAR 0 25
9827: PUSH
9828: FOR_IN
9829: IFFALSE 9857
// ComRepairBuilding ( i , NearestUnitToUnit ( tmp , i ) ) ;
9831: LD_VAR 0 9
9835: PPUSH
9836: LD_VAR 0 10
9840: PPUSH
9841: LD_VAR 0 9
9845: PPUSH
9846: CALL_OW 74
9850: PPUSH
9851: CALL_OW 130
9855: GO 9828
9857: POP
9858: POP
// end else
9859: GO 9875
// ComBackOnParking ( cranes , parkingPoint ) ;
9861: LD_VAR 0 25
9865: PPUSH
9866: LD_VAR 0 7
9870: PPUSH
9871: CALL 59150 0 2
// end ; vehicles2 := CheckByIndex ( arVehiclesAtttackers , 1 , base , 2 ) ;
9875: LD_ADDR_VAR 0 27
9879: PUSH
9880: LD_EXP 46
9884: PPUSH
9885: LD_INT 1
9887: PPUSH
9888: LD_VAR 0 2
9892: PPUSH
9893: LD_INT 2
9895: PPUSH
9896: CALL 58867 0 4
9900: ST_TO_ADDR
// if vehicles2 then
9901: LD_VAR 0 27
9905: IFFALSE 9972
// for i in UnitFilter ( vehicles2 , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9907: LD_ADDR_VAR 0 9
9911: PUSH
9912: LD_VAR 0 27
9916: PPUSH
9917: LD_INT 33
9919: PUSH
9920: LD_INT 2
9922: PUSH
9923: EMPTY
9924: LIST
9925: LIST
9926: PUSH
9927: LD_INT 50
9929: PUSH
9930: EMPTY
9931: LIST
9932: PUSH
9933: LD_INT 3
9935: PUSH
9936: LD_INT 61
9938: PUSH
9939: EMPTY
9940: LIST
9941: PUSH
9942: EMPTY
9943: LIST
9944: LIST
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: PPUSH
9951: CALL_OW 72
9955: PUSH
9956: FOR_IN
9957: IFFALSE 9970
// Connect ( i ) ;
9959: LD_VAR 0 9
9963: PPUSH
9964: CALL 24954 0 1
9968: GO 9956
9970: POP
9971: POP
// if vehicles then
9972: LD_VAR 0 26
9976: IFFALSE 10882
// begin for i in UnitFilter ( vehicles , [ [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do
9978: LD_ADDR_VAR 0 9
9982: PUSH
9983: LD_VAR 0 26
9987: PPUSH
9988: LD_INT 33
9990: PUSH
9991: LD_INT 2
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 50
10000: PUSH
10001: EMPTY
10002: LIST
10003: PUSH
10004: LD_INT 3
10006: PUSH
10007: LD_INT 61
10009: PUSH
10010: EMPTY
10011: LIST
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: PUSH
10027: FOR_IN
10028: IFFALSE 10041
// Connect ( i ) ;
10030: LD_VAR 0 9
10034: PPUSH
10035: CALL 24954 0 1
10039: GO 10027
10041: POP
10042: POP
// vehicles := UnitFilter ( vehicles , [ [ f_not , [ f_or , [ f_weapon , ar_crane ] , [ f_weapon , ar_cargo_bay ] ] ] , [ f_ok ] ] ) ;
10043: LD_ADDR_VAR 0 26
10047: PUSH
10048: LD_VAR 0 26
10052: PPUSH
10053: LD_INT 3
10055: PUSH
10056: LD_INT 2
10058: PUSH
10059: LD_INT 34
10061: PUSH
10062: LD_INT 88
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 34
10071: PUSH
10072: LD_INT 32
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: LIST
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 50
10090: PUSH
10091: EMPTY
10092: LIST
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PPUSH
10098: CALL_OW 72
10102: ST_TO_ADDR
// if vehicles then
10103: LD_VAR 0 26
10107: IFFALSE 10882
// begin for i in vehicles do
10109: LD_ADDR_VAR 0 9
10113: PUSH
10114: LD_VAR 0 26
10118: PUSH
10119: FOR_IN
10120: IFFALSE 10880
// begin tag := GetTag ( i ) ;
10122: LD_ADDR_VAR 0 15
10126: PUSH
10127: LD_VAR 0 9
10131: PPUSH
10132: CALL_OW 110
10136: ST_TO_ADDR
// if not tag then
10137: LD_VAR 0 15
10141: NOT
10142: IFFALSE 10313
// begin if GetControl ( i ) = control_manual then
10144: LD_VAR 0 9
10148: PPUSH
10149: CALL_OW 263
10153: PUSH
10154: LD_INT 1
10156: EQUAL
10157: IFFALSE 10299
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10159: LD_ADDR_VAR 0 24
10163: PUSH
10164: LD_EXP 47
10168: PPUSH
10169: LD_INT 1
10171: PPUSH
10172: LD_VAR 0 9
10176: PPUSH
10177: LD_INT 2
10179: PPUSH
10180: CALL 58867 0 4
10184: ST_TO_ADDR
// if not drivers then
10185: LD_VAR 0 24
10189: NOT
10190: IFFALSE 10279
// begin drivers := UnitFilter ( mech , [ f_not , [ f_tag , tMech ] ] ) ;
10192: LD_ADDR_VAR 0 24
10196: PUSH
10197: LD_VAR 0 14
10201: PPUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 120
10207: PUSH
10208: LD_INT 7
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PPUSH
10219: CALL_OW 72
10223: ST_TO_ADDR
// if drivers then
10224: LD_VAR 0 24
10228: IFFALSE 10279
// begin SetTag ( drivers [ 1 ] , tMech ) ;
10230: LD_VAR 0 24
10234: PUSH
10235: LD_INT 1
10237: ARRAY
10238: PPUSH
10239: LD_INT 7
10241: PPUSH
10242: CALL_OW 109
// arDrivers := Join ( arDrivers , [ i , drivers [ 1 ] ] ) ;
10246: LD_ADDR_EXP 47
10250: PUSH
10251: LD_EXP 47
10255: PPUSH
10256: LD_VAR 0 9
10260: PUSH
10261: LD_VAR 0 24
10265: PUSH
10266: LD_INT 1
10268: ARRAY
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: PPUSH
10274: CALL 54337 0 2
10278: ST_TO_ADDR
// end ; end ; if drivers then
10279: LD_VAR 0 24
10283: IFFALSE 10297
// SetTag ( i , tBusy ) ;
10285: LD_VAR 0 9
10289: PPUSH
10290: LD_INT 8
10292: PPUSH
10293: CALL_OW 109
// continue ;
10297: GO 10119
// end ; SetTag ( i , tBusy ) ;
10299: LD_VAR 0 9
10303: PPUSH
10304: LD_INT 8
10306: PPUSH
10307: CALL_OW 109
// end else
10311: GO 10878
// if tag = tBusy then
10313: LD_VAR 0 15
10317: PUSH
10318: LD_INT 8
10320: EQUAL
10321: IFFALSE 10549
// begin if GetLives ( i ) = 1000 then
10323: LD_VAR 0 9
10327: PPUSH
10328: CALL_OW 256
10332: PUSH
10333: LD_INT 1000
10335: EQUAL
10336: IFFALSE 10547
// begin if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
10338: LD_VAR 0 9
10342: PPUSH
10343: CALL_OW 263
10347: PUSH
10348: LD_INT 1
10350: EQUAL
10351: PUSH
10352: LD_VAR 0 9
10356: PPUSH
10357: CALL_OW 311
10361: NOT
10362: AND
10363: IFFALSE 10535
// begin drivers := CheckByIndex ( arDrivers , 1 , i , 2 ) ;
10365: LD_ADDR_VAR 0 24
10369: PUSH
10370: LD_EXP 47
10374: PPUSH
10375: LD_INT 1
10377: PPUSH
10378: LD_VAR 0 9
10382: PPUSH
10383: LD_INT 2
10385: PPUSH
10386: CALL 58867 0 4
10390: ST_TO_ADDR
// if not drivers then
10391: LD_VAR 0 24
10395: NOT
10396: IFFALSE 10412
// begin SetTag ( i , 0 ) ;
10398: LD_VAR 0 9
10402: PPUSH
10403: LD_INT 0
10405: PPUSH
10406: CALL_OW 109
// continue ;
10410: GO 10119
// end ; if IsInUnit ( drivers [ 1 ] ) and not IsDriver ( drivers [ 1 ] ) then
10412: LD_VAR 0 24
10416: PUSH
10417: LD_INT 1
10419: ARRAY
10420: PPUSH
10421: CALL_OW 310
10425: PUSH
10426: LD_VAR 0 24
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PPUSH
10435: CALL 51941 0 1
10439: NOT
10440: AND
10441: IFFALSE 10456
// ComExitBuilding ( drivers [ 1 ] ) ;
10443: LD_VAR 0 24
10447: PUSH
10448: LD_INT 1
10450: ARRAY
10451: PPUSH
10452: CALL_OW 122
// if ( UnitFilter ( vehicles , [ f_tag , tRepair ] ) and not HasTask ( drivers [ 1 ] ) ) or not UnitFilter ( vehicles , [ f_tag , tRepair ] ) then
10456: LD_VAR 0 26
10460: PPUSH
10461: LD_INT 120
10463: PUSH
10464: LD_INT 3
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 72
10475: PUSH
10476: LD_VAR 0 24
10480: PUSH
10481: LD_INT 1
10483: ARRAY
10484: PPUSH
10485: CALL_OW 314
10489: NOT
10490: AND
10491: PUSH
10492: LD_VAR 0 26
10496: PPUSH
10497: LD_INT 120
10499: PUSH
10500: LD_INT 3
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 72
10511: NOT
10512: OR
10513: IFFALSE 10533
// ComEnterUnit ( drivers [ 1 ] , i ) ;
10515: LD_VAR 0 24
10519: PUSH
10520: LD_INT 1
10522: ARRAY
10523: PPUSH
10524: LD_VAR 0 9
10528: PPUSH
10529: CALL_OW 120
// continue ;
10533: GO 10119
// end ; SetTag ( i , tAttack ) ;
10535: LD_VAR 0 9
10539: PPUSH
10540: LD_INT 13
10542: PPUSH
10543: CALL_OW 109
// end ; end else
10547: GO 10878
// if tag = tAttack then
10549: LD_VAR 0 15
10553: PUSH
10554: LD_INT 13
10556: EQUAL
10557: IFFALSE 10737
// begin enemy := enemyInBase ;
10559: LD_ADDR_VAR 0 21
10563: PUSH
10564: LD_VAR 0 22
10568: ST_TO_ADDR
// if not enemy then
10569: LD_VAR 0 21
10573: NOT
10574: IFFALSE 10586
// enemy := enemyOuterBase ;
10576: LD_ADDR_VAR 0 21
10580: PUSH
10581: LD_VAR 0 23
10585: ST_TO_ADDR
// if not enemy and GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10586: LD_VAR 0 21
10590: NOT
10591: PUSH
10592: LD_VAR 0 9
10596: PPUSH
10597: LD_VAR 0 7
10601: PUSH
10602: LD_INT 1
10604: ARRAY
10605: PPUSH
10606: LD_VAR 0 7
10610: PUSH
10611: LD_INT 2
10613: ARRAY
10614: PPUSH
10615: CALL_OW 297
10619: PUSH
10620: LD_INT 10
10622: GREATER
10623: AND
10624: IFFALSE 10655
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10626: LD_VAR 0 9
10630: PPUSH
10631: LD_VAR 0 7
10635: PUSH
10636: LD_INT 1
10638: ARRAY
10639: PPUSH
10640: LD_VAR 0 7
10644: PUSH
10645: LD_INT 2
10647: ARRAY
10648: PPUSH
10649: CALL_OW 111
// continue ;
10653: GO 10119
// end ; if GetLives ( i ) < 650 then
10655: LD_VAR 0 9
10659: PPUSH
10660: CALL_OW 256
10664: PUSH
10665: LD_INT 650
10667: LESS
10668: IFFALSE 10711
// begin SetTag ( i , tVehRepair ) ;
10670: LD_VAR 0 9
10674: PPUSH
10675: LD_INT 9
10677: PPUSH
10678: CALL_OW 109
// ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10682: LD_VAR 0 9
10686: PPUSH
10687: LD_VAR 0 7
10691: PUSH
10692: LD_INT 1
10694: ARRAY
10695: PPUSH
10696: LD_VAR 0 7
10700: PUSH
10701: LD_INT 2
10703: ARRAY
10704: PPUSH
10705: CALL_OW 111
// continue ;
10709: GO 10119
// end ; ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10711: LD_VAR 0 9
10715: PPUSH
10716: LD_VAR 0 21
10720: PPUSH
10721: LD_VAR 0 9
10725: PPUSH
10726: CALL_OW 74
10730: PPUSH
10731: CALL_OW 115
// end else
10735: GO 10878
// if tag = tVehRepair then
10737: LD_VAR 0 15
10741: PUSH
10742: LD_INT 9
10744: EQUAL
10745: IFFALSE 10878
// begin if GetDistUnitXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) > 10 then
10747: LD_VAR 0 9
10751: PPUSH
10752: LD_VAR 0 7
10756: PUSH
10757: LD_INT 1
10759: ARRAY
10760: PPUSH
10761: LD_VAR 0 7
10765: PUSH
10766: LD_INT 2
10768: ARRAY
10769: PPUSH
10770: CALL_OW 297
10774: PUSH
10775: LD_INT 10
10777: GREATER
10778: IFFALSE 10809
// begin ComMoveXY ( i , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
10780: LD_VAR 0 9
10784: PPUSH
10785: LD_VAR 0 7
10789: PUSH
10790: LD_INT 1
10792: ARRAY
10793: PPUSH
10794: LD_VAR 0 7
10798: PUSH
10799: LD_INT 2
10801: ARRAY
10802: PPUSH
10803: CALL_OW 111
// continue ;
10807: GO 10119
// end ; if GetLives ( i ) = 1000 then
10809: LD_VAR 0 9
10813: PPUSH
10814: CALL_OW 256
10818: PUSH
10819: LD_INT 1000
10821: EQUAL
10822: IFFALSE 10838
// begin SetTag ( i , tBusy ) ;
10824: LD_VAR 0 9
10828: PPUSH
10829: LD_INT 8
10831: PPUSH
10832: CALL_OW 109
// continue ;
10836: GO 10119
// end ; if GetControl ( i ) = control_manual and IsDrivenBy ( i ) then
10838: LD_VAR 0 9
10842: PPUSH
10843: CALL_OW 263
10847: PUSH
10848: LD_INT 1
10850: EQUAL
10851: PUSH
10852: LD_VAR 0 9
10856: PPUSH
10857: CALL_OW 311
10861: AND
10862: IFFALSE 10878
// ComRepairVehicleAndReturn ( IsDrivenBy ( i ) ) ;
10864: LD_VAR 0 9
10868: PPUSH
10869: CALL_OW 311
10873: PPUSH
10874: CALL 56037 0 1
// end ; end ;
10878: GO 10119
10880: POP
10881: POP
// end ; end ; sol := UnitFilter ( forces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_class , class_sniper ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) ;
10882: LD_ADDR_VAR 0 19
10886: PUSH
10887: LD_VAR 0 5
10891: PPUSH
10892: LD_INT 2
10894: PUSH
10895: LD_INT 25
10897: PUSH
10898: LD_INT 1
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: PUSH
10905: LD_INT 25
10907: PUSH
10908: LD_INT 8
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 25
10917: PUSH
10918: LD_INT 5
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 25
10927: PUSH
10928: LD_INT 9
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 50
10944: PUSH
10945: EMPTY
10946: LIST
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PPUSH
10952: CALL_OW 72
10956: ST_TO_ADDR
// if sol then
10957: LD_VAR 0 19
10961: IFFALSE 11509
// begin if enemyInBase then
10963: LD_VAR 0 22
10967: IFFALSE 11146
// begin for i in sol do
10969: LD_ADDR_VAR 0 9
10973: PUSH
10974: LD_VAR 0 19
10978: PUSH
10979: FOR_IN
10980: IFFALSE 11142
// begin tw := IsInUnit ( i ) ;
10982: LD_ADDR_VAR 0 16
10986: PUSH
10987: LD_VAR 0 9
10991: PPUSH
10992: CALL_OW 310
10996: ST_TO_ADDR
// if tw then
10997: LD_VAR 0 16
11001: IFFALSE 11084
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , enemySide ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
11003: LD_VAR 0 16
11007: PUSH
11008: LD_INT 22
11010: PUSH
11011: LD_VAR 0 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 101
11022: PUSH
11023: LD_VAR 0 34
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: LD_INT 30
11037: PUSH
11038: LD_INT 32
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 30
11047: PUSH
11048: LD_INT 31
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: LIST
11064: PPUSH
11065: CALL_OW 69
11069: IN
11070: NOT
11071: IFFALSE 11082
// ComExitBuilding ( i ) ;
11073: LD_VAR 0 9
11077: PPUSH
11078: CALL_OW 122
// end else
11082: GO 11140
// if IsInArea ( i , area ) then
11084: LD_VAR 0 9
11088: PPUSH
11089: LD_VAR 0 3
11093: PPUSH
11094: CALL_OW 308
11098: IFFALSE 11126
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) else
11100: LD_VAR 0 9
11104: PPUSH
11105: LD_VAR 0 22
11109: PPUSH
11110: LD_VAR 0 9
11114: PPUSH
11115: CALL_OW 74
11119: PPUSH
11120: CALL_OW 115
11124: GO 11140
// ComMoveToArea ( i , area ) ;
11126: LD_VAR 0 9
11130: PPUSH
11131: LD_VAR 0 3
11135: PPUSH
11136: CALL_OW 113
// end ;
11140: GO 10979
11142: POP
11143: POP
// end else
11144: GO 11509
// begin empty := FilterUnitsInArea ( area , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
11146: LD_ADDR_VAR 0 28
11150: PUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: LD_INT 3
11158: PUSH
11159: LD_INT 62
11161: PUSH
11162: EMPTY
11163: LIST
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: LD_INT 30
11174: PUSH
11175: LD_INT 32
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_INT 4
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 30
11194: PUSH
11195: LD_INT 5
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 30
11204: PUSH
11205: LD_INT 31
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PPUSH
11223: CALL_OW 70
11227: ST_TO_ADDR
// if empty then
11228: LD_VAR 0 28
11232: IFFALSE 11249
// empty := ReverseArray ( empty ) ;
11234: LD_ADDR_VAR 0 28
11238: PUSH
11239: LD_VAR 0 28
11243: PPUSH
11244: CALL 49624 0 1
11248: ST_TO_ADDR
// for i in sol do
11249: LD_ADDR_VAR 0 9
11253: PUSH
11254: LD_VAR 0 19
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11507
// begin tag := GetTag ( i ) ;
11262: LD_ADDR_VAR 0 15
11266: PUSH
11267: LD_VAR 0 9
11271: PPUSH
11272: CALL_OW 110
11276: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
11277: LD_VAR 0 9
11281: PPUSH
11282: CALL_OW 256
11286: PUSH
11287: LD_INT 1000
11289: LESS
11290: PUSH
11291: LD_VAR 0 15
11295: PUSH
11296: LD_INT 1
11298: NONEQUAL
11299: AND
11300: IFFALSE 11352
// begin SetTag ( i , tHeal ) ;
11302: LD_VAR 0 9
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 109
// ComMoveXY ( i , healPoint [ 1 ] , healPoint [ 2 ] ) ;
11314: LD_VAR 0 9
11318: PPUSH
11319: LD_VAR 0 6
11323: PUSH
11324: LD_INT 1
11326: ARRAY
11327: PPUSH
11328: LD_VAR 0 6
11332: PUSH
11333: LD_INT 2
11335: ARRAY
11336: PPUSH
11337: CALL_OW 111
// AddComHold ( i ) ;
11341: LD_VAR 0 9
11345: PPUSH
11346: CALL_OW 200
// continue ;
11350: GO 11259
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
11352: LD_VAR 0 9
11356: PPUSH
11357: CALL_OW 256
11361: PUSH
11362: LD_INT 1000
11364: EQUAL
11365: PUSH
11366: LD_VAR 0 15
11370: PUSH
11371: LD_INT 1
11373: EQUAL
11374: AND
11375: IFFALSE 11391
// begin SetTag ( i , 0 ) ;
11377: LD_VAR 0 9
11381: PPUSH
11382: LD_INT 0
11384: PPUSH
11385: CALL_OW 109
// continue ;
11389: GO 11259
// end ; if HasTask ( i ) then
11391: LD_VAR 0 9
11395: PPUSH
11396: CALL_OW 314
11400: IFFALSE 11404
// continue ;
11402: GO 11259
// if not IsInUnit ( i ) and not tag and empty then
11404: LD_VAR 0 9
11408: PPUSH
11409: CALL_OW 310
11413: NOT
11414: PUSH
11415: LD_VAR 0 15
11419: NOT
11420: AND
11421: PUSH
11422: LD_VAR 0 28
11426: AND
11427: IFFALSE 11505
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
11429: LD_VAR 0 9
11433: PPUSH
11434: LD_VAR 0 28
11438: PUSH
11439: LD_INT 1
11441: ARRAY
11442: PPUSH
11443: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
11447: LD_VAR 0 28
11451: PUSH
11452: LD_INT 1
11454: ARRAY
11455: PPUSH
11456: CALL_OW 266
11460: PUSH
11461: LD_INT 5
11463: EQUAL
11464: PUSH
11465: LD_INT 50
11467: PPUSH
11468: CALL_OW 13
11472: AND
11473: IFFALSE 11487
// AddComChangeProfession ( i , class_mortar ) ;
11475: LD_VAR 0 9
11479: PPUSH
11480: LD_INT 8
11482: PPUSH
11483: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
11487: LD_ADDR_VAR 0 28
11491: PUSH
11492: LD_VAR 0 28
11496: PPUSH
11497: LD_INT 1
11499: PPUSH
11500: CALL_OW 3
11504: ST_TO_ADDR
// end ; end ;
11505: GO 11259
11507: POP
11508: POP
// end ; end ; end ;
11509: LD_VAR 0 8
11513: RET
// every 0 0$2 trigger UnitFilter ( ar_force_south , [ f_ok ] ) do
11514: LD_EXP 33
11518: PPUSH
11519: LD_INT 50
11521: PUSH
11522: EMPTY
11523: LIST
11524: PPUSH
11525: CALL_OW 72
11529: IFFALSE 11578
11531: GO 11533
11533: DISABLE
// begin enable ;
11534: ENABLE
// ArabianBaseScript ( side_bot , 1 , area_base_south , area_base_south_outer , ar_force_south , [ 120 , 129 ] , [ 126 , 136 ] ) ;
11535: LD_EXP 3
11539: PPUSH
11540: LD_INT 1
11542: PPUSH
11543: LD_INT 33
11545: PPUSH
11546: LD_INT 40
11548: PPUSH
11549: LD_EXP 33
11553: PPUSH
11554: LD_INT 120
11556: PUSH
11557: LD_INT 129
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PPUSH
11564: LD_INT 126
11566: PUSH
11567: LD_INT 136
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL 7555 0 7
// end ;
11578: END
// every 0 0$2 trigger UnitFilter ( ar_force_north , [ f_ok ] ) do
11579: LD_EXP 34
11583: PPUSH
11584: LD_INT 50
11586: PUSH
11587: EMPTY
11588: LIST
11589: PPUSH
11590: CALL_OW 72
11594: IFFALSE 11643
11596: GO 11598
11598: DISABLE
// begin enable ;
11599: ENABLE
// ArabianBaseScript ( side_bot , 2 , area_base_north , area_base_north_outer , ar_force_north , [ 116 , 9 ] , [ 123 , 12 ] ) ;
11600: LD_EXP 3
11604: PPUSH
11605: LD_INT 2
11607: PPUSH
11608: LD_INT 35
11610: PPUSH
11611: LD_INT 43
11613: PPUSH
11614: LD_EXP 34
11618: PPUSH
11619: LD_INT 116
11621: PUSH
11622: LD_INT 9
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: LD_INT 123
11631: PUSH
11632: LD_INT 12
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL 7555 0 7
// end ;
11643: END
// every 0 0$2 trigger UnitFilter ( ar_force_west , [ f_ok ] ) do
11644: LD_EXP 32
11648: PPUSH
11649: LD_INT 50
11651: PUSH
11652: EMPTY
11653: LIST
11654: PPUSH
11655: CALL_OW 72
11659: IFFALSE 11708
11661: GO 11663
11663: DISABLE
// begin enable ;
11664: ENABLE
// ArabianBaseScript ( side_bot , 3 , area_base_west , area_base_west_outer , ar_force_west , [ 28 , 10 ] , [ 26 , 17 ] ) ;
11665: LD_EXP 3
11669: PPUSH
11670: LD_INT 3
11672: PPUSH
11673: LD_INT 34
11675: PPUSH
11676: LD_INT 42
11678: PPUSH
11679: LD_EXP 32
11683: PPUSH
11684: LD_INT 28
11686: PUSH
11687: LD_INT 10
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PPUSH
11694: LD_INT 26
11696: PUSH
11697: LD_INT 17
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: PPUSH
11704: CALL 7555 0 7
// end ;
11708: END
// every 0 0$2 trigger UnitFilter ( ar_force_east , [ f_ok ] ) do
11709: LD_EXP 36
11713: PPUSH
11714: LD_INT 50
11716: PUSH
11717: EMPTY
11718: LIST
11719: PPUSH
11720: CALL_OW 72
11724: IFFALSE 11773
11726: GO 11728
11728: DISABLE
// begin enable ;
11729: ENABLE
// ArabianBaseScript ( side_bot , 4 , area_base_east , area_base_east_outer , ar_force_east , [ 173 , 72 ] , [ 167 , 83 ] ) ;
11730: LD_EXP 3
11734: PPUSH
11735: LD_INT 4
11737: PPUSH
11738: LD_INT 36
11740: PPUSH
11741: LD_INT 44
11743: PPUSH
11744: LD_EXP 36
11748: PPUSH
11749: LD_INT 173
11751: PUSH
11752: LD_INT 72
11754: PUSH
11755: EMPTY
11756: LIST
11757: LIST
11758: PPUSH
11759: LD_INT 167
11761: PUSH
11762: LD_INT 83
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: PPUSH
11769: CALL 7555 0 7
// end ;
11773: END
// every 0 0$2 trigger UnitFilter ( ar_force_north2 , [ f_ok ] ) do
11774: LD_EXP 35
11778: PPUSH
11779: LD_INT 50
11781: PUSH
11782: EMPTY
11783: LIST
11784: PPUSH
11785: CALL_OW 72
11789: IFFALSE 11838
11791: GO 11793
11793: DISABLE
// begin enable ;
11794: ENABLE
// ArabianBaseScript ( side_bot , 5 , area_base_north2 , area_base_north2_outer , ar_force_north2 , [ 147 , 50 ] , [ 159 , 40 ] ) ;
11795: LD_EXP 3
11799: PPUSH
11800: LD_INT 5
11802: PPUSH
11803: LD_INT 38
11805: PPUSH
11806: LD_INT 45
11808: PPUSH
11809: LD_EXP 35
11813: PPUSH
11814: LD_INT 147
11816: PUSH
11817: LD_INT 50
11819: PUSH
11820: EMPTY
11821: LIST
11822: LIST
11823: PPUSH
11824: LD_INT 159
11826: PUSH
11827: LD_INT 40
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PPUSH
11834: CALL 7555 0 7
// end ;
11838: END
// every 0 0$01 + 0 0$3 trigger arMinesList do var i , p , tmp ;
11839: LD_EXP 51
11843: IFFALSE 12055
11845: GO 11847
11847: DISABLE
11848: LD_INT 0
11850: PPUSH
11851: PPUSH
11852: PPUSH
// begin enable ;
11853: ENABLE
// p := 1 ;
11854: LD_ADDR_VAR 0 2
11858: PUSH
11859: LD_INT 1
11861: ST_TO_ADDR
// for i := 1 to Count ( arMinesList ) div 2 do
11862: LD_ADDR_VAR 0 1
11866: PUSH
11867: DOUBLE
11868: LD_INT 1
11870: DEC
11871: ST_TO_ADDR
11872: LD_EXP 51
11876: PPUSH
11877: CALL 18748 0 1
11881: PUSH
11882: LD_INT 2
11884: DIV
11885: PUSH
11886: FOR_TO
11887: IFFALSE 12053
// begin tmp := HexInfo ( arMinesList [ p ] , arMinesList [ p + 1 ] ) ;
11889: LD_ADDR_VAR 0 3
11893: PUSH
11894: LD_EXP 51
11898: PUSH
11899: LD_VAR 0 2
11903: ARRAY
11904: PPUSH
11905: LD_EXP 51
11909: PUSH
11910: LD_VAR 0 2
11914: PUSH
11915: LD_INT 1
11917: PLUS
11918: ARRAY
11919: PPUSH
11920: CALL_OW 428
11924: ST_TO_ADDR
// if tmp then
11925: LD_VAR 0 3
11929: IFFALSE 12037
// if GetSide ( tmp ) <> side_bot then
11931: LD_VAR 0 3
11935: PPUSH
11936: CALL_OW 255
11940: PUSH
11941: LD_EXP 3
11945: NONEQUAL
11946: IFFALSE 12037
// begin LaunchMineAtPos ( arMinesList [ p ] , arMinesList [ p + 1 ] , side_bot ) ;
11948: LD_EXP 51
11952: PUSH
11953: LD_VAR 0 2
11957: ARRAY
11958: PPUSH
11959: LD_EXP 51
11963: PUSH
11964: LD_VAR 0 2
11968: PUSH
11969: LD_INT 1
11971: PLUS
11972: ARRAY
11973: PPUSH
11974: LD_EXP 3
11978: PPUSH
11979: CALL_OW 456
// arMinesList := Delete ( arMinesList , p ) ;
11983: LD_ADDR_EXP 51
11987: PUSH
11988: LD_EXP 51
11992: PPUSH
11993: LD_VAR 0 2
11997: PPUSH
11998: CALL_OW 3
12002: ST_TO_ADDR
// arMinesList := Delete ( arMinesList , p ) ;
12003: LD_ADDR_EXP 51
12007: PUSH
12008: LD_EXP 51
12012: PPUSH
12013: LD_VAR 0 2
12017: PPUSH
12018: CALL_OW 3
12022: ST_TO_ADDR
// p := p - 2 ;
12023: LD_ADDR_VAR 0 2
12027: PUSH
12028: LD_VAR 0 2
12032: PUSH
12033: LD_INT 2
12035: MINUS
12036: ST_TO_ADDR
// end ; p := p + 2 ;
12037: LD_ADDR_VAR 0 2
12041: PUSH
12042: LD_VAR 0 2
12046: PUSH
12047: LD_INT 2
12049: PLUS
12050: ST_TO_ADDR
// end ;
12051: GO 11886
12053: POP
12054: POP
// end ; end_of_file
12055: PPOPN 3
12057: END
// on ArtifactLoaded ( cargo , artifact ) do var i , j ;
12058: LD_INT 0
12060: PPUSH
12061: PPUSH
// begin if artifact_get then
12062: LD_EXP 4
12066: IFFALSE 12070
// exit ;
12068: GO 12092
// MultiplayerEvent_ArtifactCaptured ( GetSide ( cargo ) ) ;
12070: LD_VAR 0 1
12074: PPUSH
12075: CALL_OW 255
12079: PPUSH
12080: CALL 5186 0 1
// artifact_get := true ;
12084: LD_ADDR_EXP 4
12088: PUSH
12089: LD_INT 1
12091: ST_TO_ADDR
// end ;
12092: PPOPN 4
12094: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetSide ( un ) <> side_bot then
12095: LD_VAR 0 1
12099: PPUSH
12100: CALL_OW 255
12104: PUSH
12105: LD_EXP 3
12109: NONEQUAL
12110: IFFALSE 12114
// exit ;
12112: GO 12183
// if not un in [ Saliba , Gensher , Shariff ] then
12114: LD_VAR 0 1
12118: PUSH
12119: LD_EXP 39
12123: PUSH
12124: LD_EXP 40
12128: PUSH
12129: LD_EXP 41
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: LIST
12138: IN
12139: NOT
12140: IFFALSE 12161
// MultiplayerEvent_UnitKilled ( un , killerSide , false ) else
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_VAR 0 2
12151: PPUSH
12152: LD_INT 0
12154: PPUSH
12155: CALL 5122 0 3
12159: GO 12183
// MultiplayerEvent_UnitKilled ( un , killerSide , Multiplayer_GetCondition ( 5 ) ) ;
12161: LD_VAR 0 1
12165: PPUSH
12166: LD_VAR 0 2
12170: PPUSH
12171: LD_INT 5
12173: PPUSH
12174: CALL 4449 0 1
12178: PPUSH
12179: CALL 5122 0 3
// end ;
12183: PPOPN 3
12185: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
12190: PPUSH
12191: PPUSH
12192: PPUSH
12193: PPUSH
12194: PPUSH
12195: PPUSH
12196: PPUSH
12197: PPUSH
// begin side := GetSide ( un ) ;
12198: LD_ADDR_VAR 0 3
12202: PUSH
12203: LD_VAR 0 1
12207: PPUSH
12208: CALL_OW 255
12212: ST_TO_ADDR
// if multi_sides [ side ] then
12213: LD_EXP 7
12217: PUSH
12218: LD_VAR 0 3
12222: ARRAY
12223: IFFALSE 12249
// if GetType ( un ) = unit_human then
12225: LD_VAR 0 1
12229: PPUSH
12230: CALL_OW 247
12234: PUSH
12235: LD_INT 1
12237: EQUAL
12238: IFFALSE 12249
// MultiplayerEvent_HumanLost ( side ) ;
12240: LD_VAR 0 3
12244: PPUSH
12245: CALL 5008 0 1
// if side = side_bot then
12249: LD_VAR 0 3
12253: PUSH
12254: LD_EXP 3
12258: EQUAL
12259: IFFALSE 12705
// begin if GetType ( un ) = unit_building then
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 247
12270: PUSH
12271: LD_INT 3
12273: EQUAL
12274: IFFALSE 12504
// begin base := 0 ;
12276: LD_ADDR_VAR 0 4
12280: PUSH
12281: LD_INT 0
12283: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: DOUBLE
12290: LD_INT 1
12292: DEC
12293: ST_TO_ADDR
12294: LD_EXP 49
12298: PPUSH
12299: CALL 18748 0 1
12303: PUSH
12304: FOR_TO
12305: IFFALSE 12343
// if IsInArea ( un , arAreas [ i ] ) then
12307: LD_VAR 0 1
12311: PPUSH
12312: LD_EXP 49
12316: PUSH
12317: LD_VAR 0 2
12321: ARRAY
12322: PPUSH
12323: CALL_OW 308
12327: IFFALSE 12341
// begin base := i ;
12329: LD_ADDR_VAR 0 4
12333: PUSH
12334: LD_VAR 0 2
12338: ST_TO_ADDR
// break ;
12339: GO 12343
// end ;
12341: GO 12304
12343: POP
12344: POP
// if not base then
12345: LD_VAR 0 4
12349: NOT
12350: IFFALSE 12354
// exit ;
12352: GO 12777
// btype := GetBType ( un ) ;
12354: LD_ADDR_VAR 0 11
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: CALL_OW 266
12368: ST_TO_ADDR
// if btype = b_barracks then
12369: LD_VAR 0 11
12373: PUSH
12374: LD_INT 5
12376: EQUAL
12377: IFFALSE 12387
// btype := b_armoury ;
12379: LD_ADDR_VAR 0 11
12383: PUSH
12384: LD_INT 4
12386: ST_TO_ADDR
// if btype = b_factory then
12387: LD_VAR 0 11
12391: PUSH
12392: LD_INT 3
12394: EQUAL
12395: IFFALSE 12405
// btype := b_workshop ;
12397: LD_ADDR_VAR 0 11
12401: PUSH
12402: LD_INT 2
12404: ST_TO_ADDR
// if btype in [ b_lab_full , b_lab_half ] then
12405: LD_VAR 0 11
12409: PUSH
12410: LD_INT 8
12412: PUSH
12413: LD_INT 7
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: IN
12420: IFFALSE 12430
// btype := b_lab ;
12422: LD_ADDR_VAR 0 11
12426: PUSH
12427: LD_INT 6
12429: ST_TO_ADDR
// arBuildings := Replace ( arBuildings , arBuildings + 1 , [ base , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ] ) ;
12430: LD_ADDR_EXP 44
12434: PUSH
12435: LD_EXP 44
12439: PPUSH
12440: LD_EXP 44
12444: PUSH
12445: LD_INT 1
12447: PLUS
12448: PPUSH
12449: LD_VAR 0 4
12453: PUSH
12454: LD_VAR 0 11
12458: PUSH
12459: LD_VAR 0 1
12463: PPUSH
12464: CALL_OW 250
12468: PUSH
12469: LD_VAR 0 1
12473: PPUSH
12474: CALL_OW 251
12478: PUSH
12479: LD_VAR 0 1
12483: PPUSH
12484: CALL_OW 254
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PPUSH
12499: CALL_OW 1
12503: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle then
12504: LD_VAR 0 1
12508: PPUSH
12509: CALL_OW 247
12513: PUSH
12514: LD_INT 2
12516: EQUAL
12517: IFFALSE 12705
// begin base := CheckByIndex ( arVehicles , 2 , un , 1 ) ;
12519: LD_ADDR_VAR 0 4
12523: PUSH
12524: LD_EXP 45
12528: PPUSH
12529: LD_INT 2
12531: PPUSH
12532: LD_VAR 0 1
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: CALL 58867 0 4
12544: ST_TO_ADDR
// if not base then
12545: LD_VAR 0 4
12549: NOT
12550: IFFALSE 12554
// exit ;
12552: GO 12777
// factory := arFactories [ base ] ;
12554: LD_ADDR_VAR 0 10
12558: PUSH
12559: LD_EXP 48
12563: PUSH
12564: LD_VAR 0 4
12568: ARRAY
12569: ST_TO_ADDR
// if not factory then
12570: LD_VAR 0 10
12574: NOT
12575: IFFALSE 12579
// exit ;
12577: GO 12777
// chassis := GetChassis ( un ) ;
12579: LD_ADDR_VAR 0 5
12583: PUSH
12584: LD_VAR 0 1
12588: PPUSH
12589: CALL_OW 265
12593: ST_TO_ADDR
// engine := GetEngine ( un ) ;
12594: LD_ADDR_VAR 0 6
12598: PUSH
12599: LD_VAR 0 1
12603: PPUSH
12604: CALL_OW 262
12608: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
12609: LD_ADDR_VAR 0 8
12613: PUSH
12614: LD_VAR 0 1
12618: PPUSH
12619: CALL_OW 264
12623: ST_TO_ADDR
// control := control_remote ;
12624: LD_ADDR_VAR 0 7
12628: PUSH
12629: LD_INT 2
12631: ST_TO_ADDR
// tmp := Produce ( factory , chassis , engine , control , weapon ) ;
12632: LD_ADDR_VAR 0 9
12636: PUSH
12637: LD_VAR 0 10
12641: PPUSH
12642: LD_VAR 0 5
12646: PPUSH
12647: LD_VAR 0 6
12651: PPUSH
12652: LD_VAR 0 7
12656: PPUSH
12657: LD_VAR 0 8
12661: PPUSH
12662: CALL 19106 0 5
12666: ST_TO_ADDR
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ base , tmp ] ) ;
12667: LD_ADDR_EXP 43
12671: PUSH
12672: LD_EXP 43
12676: PPUSH
12677: LD_EXP 43
12681: PUSH
12682: LD_INT 1
12684: PLUS
12685: PPUSH
12686: LD_VAR 0 4
12690: PUSH
12691: LD_VAR 0 9
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PPUSH
12700: CALL_OW 1
12704: ST_TO_ADDR
// end ; end ; if multi_commanders and multi_custom_commanders then
12705: LD_EXP 24
12709: PUSH
12710: LD_EXP 16
12714: AND
12715: IFFALSE 12777
// if un in multi_commanders then
12717: LD_VAR 0 1
12721: PUSH
12722: LD_EXP 24
12726: IN
12727: IFFALSE 12777
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
12729: LD_ADDR_EXP 25
12733: PUSH
12734: LD_EXP 25
12738: PPUSH
12739: LD_VAR 0 3
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 1
12751: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
12752: LD_ADDR_EXP 24
12756: PUSH
12757: LD_EXP 24
12761: PUSH
12762: LD_VAR 0 1
12766: DIFF
12767: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
12768: LD_VAR 0 3
12772: PPUSH
12773: CALL 4482 0 1
// end ; end ;
12777: PPOPN 11
12779: END
// on BuildingComplete ( building ) do var i , j , side , base , btype ;
12780: LD_INT 0
12782: PPUSH
12783: PPUSH
12784: PPUSH
12785: PPUSH
12786: PPUSH
// begin side := GetSide ( building ) ;
12787: LD_ADDR_VAR 0 4
12791: PUSH
12792: LD_VAR 0 1
12796: PPUSH
12797: CALL_OW 255
12801: ST_TO_ADDR
// if multi_sides [ side ] then
12802: LD_EXP 7
12806: PUSH
12807: LD_VAR 0 4
12811: ARRAY
12812: IFFALSE 12833
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
12814: LD_VAR 0 4
12818: PPUSH
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 266
12828: PPUSH
12829: CALL 5052 0 2
// if GetBType ( building ) = b_depot and not multi_sides [ side ] and base_names then
12833: LD_VAR 0 1
12837: PPUSH
12838: CALL_OW 266
12842: PUSH
12843: LD_INT 0
12845: EQUAL
12846: PUSH
12847: LD_EXP 7
12851: PUSH
12852: LD_VAR 0 4
12856: ARRAY
12857: NOT
12858: AND
12859: PUSH
12860: LD_EXP 5
12864: AND
12865: IFFALSE 12903
// begin SetBName ( building , base_names [ 1 ] ) ;
12867: LD_VAR 0 1
12871: PPUSH
12872: LD_EXP 5
12876: PUSH
12877: LD_INT 1
12879: ARRAY
12880: PPUSH
12881: CALL_OW 500
// base_names := Delete ( base_names , 1 ) ;
12885: LD_ADDR_EXP 5
12889: PUSH
12890: LD_EXP 5
12894: PPUSH
12895: LD_INT 1
12897: PPUSH
12898: CALL_OW 3
12902: ST_TO_ADDR
// end ; if side = side_bot then
12903: LD_VAR 0 4
12907: PUSH
12908: LD_EXP 3
12912: EQUAL
12913: IFFALSE 13164
// begin base := 0 ;
12915: LD_ADDR_VAR 0 5
12919: PUSH
12920: LD_INT 0
12922: ST_TO_ADDR
// for i := 1 to Count ( arAreas ) do
12923: LD_ADDR_VAR 0 2
12927: PUSH
12928: DOUBLE
12929: LD_INT 1
12931: DEC
12932: ST_TO_ADDR
12933: LD_EXP 49
12937: PPUSH
12938: CALL 18748 0 1
12942: PUSH
12943: FOR_TO
12944: IFFALSE 12982
// if IsInArea ( building , arAreas [ i ] ) then
12946: LD_VAR 0 1
12950: PPUSH
12951: LD_EXP 49
12955: PUSH
12956: LD_VAR 0 2
12960: ARRAY
12961: PPUSH
12962: CALL_OW 308
12966: IFFALSE 12980
// begin base := i ;
12968: LD_ADDR_VAR 0 5
12972: PUSH
12973: LD_VAR 0 2
12977: ST_TO_ADDR
// break ;
12978: GO 12982
// end ;
12980: GO 12943
12982: POP
12983: POP
// if not base then
12984: LD_VAR 0 5
12988: NOT
12989: IFFALSE 12993
// exit ;
12991: GO 13164
// for i := 1 to Count ( arBuildings ) do
12993: LD_ADDR_VAR 0 2
12997: PUSH
12998: DOUBLE
12999: LD_INT 1
13001: DEC
13002: ST_TO_ADDR
13003: LD_EXP 44
13007: PPUSH
13008: CALL 18748 0 1
13012: PUSH
13013: FOR_TO
13014: IFFALSE 13066
// if arBuildings [ i ] [ 1 ] [ 1 ] = base then
13016: LD_EXP 44
13020: PUSH
13021: LD_VAR 0 2
13025: ARRAY
13026: PUSH
13027: LD_INT 1
13029: ARRAY
13030: PUSH
13031: LD_INT 1
13033: ARRAY
13034: PUSH
13035: LD_VAR 0 5
13039: EQUAL
13040: IFFALSE 13064
// begin arBuildings := Delete ( arBuildings , i ) ;
13042: LD_ADDR_EXP 44
13046: PUSH
13047: LD_EXP 44
13051: PPUSH
13052: LD_VAR 0 2
13056: PPUSH
13057: CALL_OW 3
13061: ST_TO_ADDR
// break ;
13062: GO 13066
// end ;
13064: GO 13013
13066: POP
13067: POP
// btype := GetBType ( building ) ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 266
13082: ST_TO_ADDR
// case btype of b_armoury :
13083: LD_VAR 0 6
13087: PUSH
13088: LD_INT 4
13090: DOUBLE
13091: EQUAL
13092: IFTRUE 13096
13094: GO 13108
13096: POP
// ComUpgrade ( building ) ; b_workshop :
13097: LD_VAR 0 1
13101: PPUSH
13102: CALL_OW 146
13106: GO 13164
13108: LD_INT 2
13110: DOUBLE
13111: EQUAL
13112: IFTRUE 13116
13114: GO 13128
13116: POP
// ComUpgrade ( building ) ; b_lab :
13117: LD_VAR 0 1
13121: PPUSH
13122: CALL_OW 146
13126: GO 13164
13128: LD_INT 6
13130: DOUBLE
13131: EQUAL
13132: IFTRUE 13136
13134: GO 13163
13136: POP
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
13137: LD_VAR 0 1
13141: PPUSH
13142: LD_INT 10
13144: PPUSH
13145: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_opto ) ;
13149: LD_VAR 0 1
13153: PPUSH
13154: LD_INT 15
13156: PPUSH
13157: CALL_OW 207
// end ; end ;
13161: GO 13164
13163: POP
// end ; end ;
13164: PPOPN 6
13166: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount ;
13167: LD_INT 0
13169: PPUSH
13170: PPUSH
13171: PPUSH
13172: PPUSH
13173: PPUSH
// begin side := GetSide ( vehicle ) ;
13174: LD_ADDR_VAR 0 4
13178: PUSH
13179: LD_VAR 0 1
13183: PPUSH
13184: CALL_OW 255
13188: ST_TO_ADDR
// if multi_sides [ side ] then
13189: LD_EXP 7
13193: PUSH
13194: LD_VAR 0 4
13198: ARRAY
13199: IFFALSE 13210
// MultiplayerEvent_Produced ( side ) ;
13201: LD_VAR 0 4
13205: PPUSH
13206: CALL 4964 0 1
// if side_bot = side then
13210: LD_EXP 3
13214: PUSH
13215: LD_VAR 0 4
13219: EQUAL
13220: IFFALSE 13412
// begin base := 0 ;
13222: LD_ADDR_VAR 0 6
13226: PUSH
13227: LD_INT 0
13229: ST_TO_ADDR
// for i := 1 to Count ( arFactories ) do
13230: LD_ADDR_VAR 0 3
13234: PUSH
13235: DOUBLE
13236: LD_INT 1
13238: DEC
13239: ST_TO_ADDR
13240: LD_EXP 48
13244: PPUSH
13245: CALL 18748 0 1
13249: PUSH
13250: FOR_TO
13251: IFFALSE 13285
// if arFactories [ i ] = factory then
13253: LD_EXP 48
13257: PUSH
13258: LD_VAR 0 3
13262: ARRAY
13263: PUSH
13264: LD_VAR 0 2
13268: EQUAL
13269: IFFALSE 13283
// begin base := i ;
13271: LD_ADDR_VAR 0 6
13275: PUSH
13276: LD_VAR 0 3
13280: ST_TO_ADDR
// break ;
13281: GO 13285
// end ;
13283: GO 13250
13285: POP
13286: POP
// if not base then
13287: LD_VAR 0 6
13291: NOT
13292: IFFALSE 13296
// exit ;
13294: GO 13412
// if arVehiclesCounter [ base ] > CheckByIndex ( arVehicles , 1 , base , 2 ) or GetBType ( vehicle ) in [ ar_cargo_bay , ar_crane ] then
13296: LD_EXP 50
13300: PUSH
13301: LD_VAR 0 6
13305: ARRAY
13306: PUSH
13307: LD_EXP 45
13311: PPUSH
13312: LD_INT 1
13314: PPUSH
13315: LD_VAR 0 6
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: CALL 58867 0 4
13327: GREATER
13328: PUSH
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 266
13338: PUSH
13339: LD_INT 32
13341: PUSH
13342: LD_INT 88
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: IN
13349: OR
13350: IFFALSE 13383
// arVehicles := Join ( arVehicles , [ base , vehicle ] ) else
13352: LD_ADDR_EXP 45
13356: PUSH
13357: LD_EXP 45
13361: PPUSH
13362: LD_VAR 0 6
13366: PUSH
13367: LD_VAR 0 1
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL 54337 0 2
13380: ST_TO_ADDR
13381: GO 13412
// arVehiclesAtttackers := Join ( arVehiclesAtttackers , [ base , vehicle ] ) ;
13383: LD_ADDR_EXP 46
13387: PUSH
13388: LD_EXP 46
13392: PPUSH
13393: LD_VAR 0 6
13397: PUSH
13398: LD_VAR 0 1
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL 54337 0 2
13411: ST_TO_ADDR
// end ; end ;
13412: PPOPN 7
13414: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if GetTag ( driver ) = tMech then
13415: LD_VAR 0 1
13419: PPUSH
13420: CALL_OW 110
13424: PUSH
13425: LD_INT 7
13427: EQUAL
13428: IFFALSE 13442
// SetTag ( driver , 0 ) ;
13430: LD_VAR 0 1
13434: PPUSH
13435: LD_INT 0
13437: PPUSH
13438: CALL_OW 109
// end ; end_of_file
13442: PPOPN 4
13444: END
// every 0 0$20 trigger game do
13445: LD_EXP 2
13449: IFFALSE 13494
13451: GO 13453
13453: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13454: LD_INT 7
13456: PUSH
13457: LD_INT 6
13459: PUSH
13460: LD_INT 4
13462: PUSH
13463: LD_INT 6
13465: PUSH
13466: EMPTY
13467: LIST
13468: LIST
13469: LIST
13470: LIST
13471: PPUSH
13472: LD_EXP 21
13476: PUSH
13477: LD_INT 2
13479: ARRAY
13480: PPUSH
13481: LD_EXP 21
13485: PUSH
13486: LD_INT 1
13488: ARRAY
13489: PPUSH
13490: CALL 13495 0 3
13494: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x , players_areas ; begin
13495: LD_INT 0
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
// if not areas then
13501: LD_VAR 0 1
13505: NOT
13506: IFFALSE 13510
// exit ;
13508: GO 13887
// players_areas := [ crates_player_west , crates_player_south , crates_player_east ] ;
13510: LD_ADDR_VAR 0 7
13514: PUSH
13515: LD_INT 31
13517: PUSH
13518: LD_INT 32
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: LIST
13528: ST_TO_ADDR
// x := 5 ;
13529: LD_ADDR_VAR 0 6
13533: PUSH
13534: LD_INT 5
13536: ST_TO_ADDR
// repeat wait ( time ) ;
13537: LD_VAR 0 2
13541: PPUSH
13542: CALL_OW 67
// if tick < [ 25 25$00 , 23 23$00 , 21 21$00 ] [ Difficulty ] then
13546: LD_OWVAR 1
13550: PUSH
13551: LD_INT 52500
13553: PUSH
13554: LD_INT 48300
13556: PUSH
13557: LD_INT 44100
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_OWVAR 67
13569: ARRAY
13570: LESS
13571: IFFALSE 13710
// begin for i := 1 to multi_sides do
13573: LD_ADDR_VAR 0 5
13577: PUSH
13578: DOUBLE
13579: LD_INT 1
13581: DEC
13582: ST_TO_ADDR
13583: LD_EXP 7
13587: PUSH
13588: FOR_TO
13589: IFFALSE 13701
// if multi_sides [ i ] then
13591: LD_EXP 7
13595: PUSH
13596: LD_VAR 0 5
13600: ARRAY
13601: IFFALSE 13699
// begin if GetResourceArea ( players_areas [ multi_sides [ i ] ] , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13603: LD_VAR 0 7
13607: PUSH
13608: LD_EXP 7
13612: PUSH
13613: LD_VAR 0 5
13617: ARRAY
13618: ARRAY
13619: PPUSH
13620: LD_INT 1
13622: PPUSH
13623: CALL_OW 287
13627: PUSH
13628: LD_INT 25
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 20
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: PUSH
13642: LD_OWVAR 67
13646: ARRAY
13647: LESS
13648: IFFALSE 13699
// begin amount := amount - ( x * 10 ) ;
13650: LD_ADDR_VAR 0 3
13654: PUSH
13655: LD_VAR 0 3
13659: PUSH
13660: LD_VAR 0 6
13664: PUSH
13665: LD_INT 10
13667: MUL
13668: MINUS
13669: ST_TO_ADDR
// CreateCratesArea ( x , players_areas [ multi_sides [ i ] ] , true ) ;
13670: LD_VAR 0 6
13674: PPUSH
13675: LD_VAR 0 7
13679: PUSH
13680: LD_EXP 7
13684: PUSH
13685: LD_VAR 0 5
13689: ARRAY
13690: ARRAY
13691: PPUSH
13692: LD_INT 1
13694: PPUSH
13695: CALL_OW 55
// end ; end ;
13699: GO 13588
13701: POP
13702: POP
// wait ( 0 0$2 ) ;
13703: LD_INT 70
13705: PPUSH
13706: CALL_OW 67
// end ; for i in areas do
13710: LD_ADDR_VAR 0 5
13714: PUSH
13715: LD_VAR 0 1
13719: PUSH
13720: FOR_IN
13721: IFFALSE 13804
// begin if GetResourceArea ( i , mat_cans ) < [ 25 , 22 , 20 ] [ Difficulty ] then
13723: LD_VAR 0 5
13727: PPUSH
13728: LD_INT 1
13730: PPUSH
13731: CALL_OW 287
13735: PUSH
13736: LD_INT 25
13738: PUSH
13739: LD_INT 22
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: PUSH
13750: LD_OWVAR 67
13754: ARRAY
13755: LESS
13756: IFFALSE 13802
// begin wait ( 0 0$5 ) ;
13758: LD_INT 175
13760: PPUSH
13761: CALL_OW 67
// amount := amount - ( x * 10 ) ;
13765: LD_ADDR_VAR 0 3
13769: PUSH
13770: LD_VAR 0 3
13774: PUSH
13775: LD_VAR 0 6
13779: PUSH
13780: LD_INT 10
13782: MUL
13783: MINUS
13784: ST_TO_ADDR
// CreateCratesArea ( x , i , true ) ;
13785: LD_VAR 0 6
13789: PPUSH
13790: LD_VAR 0 5
13794: PPUSH
13795: LD_INT 1
13797: PPUSH
13798: CALL_OW 55
// end ; end ;
13802: GO 13720
13804: POP
13805: POP
// time := time + 0 0$2 ;
13806: LD_ADDR_VAR 0 2
13810: PUSH
13811: LD_VAR 0 2
13815: PUSH
13816: LD_INT 70
13818: PLUS
13819: ST_TO_ADDR
// x := x - 1 ;
13820: LD_ADDR_VAR 0 6
13824: PUSH
13825: LD_VAR 0 6
13829: PUSH
13830: LD_INT 1
13832: MINUS
13833: ST_TO_ADDR
// if x = 0 then
13834: LD_VAR 0 6
13838: PUSH
13839: LD_INT 0
13841: EQUAL
13842: IFFALSE 13852
// x := 5 ;
13844: LD_ADDR_VAR 0 6
13848: PUSH
13849: LD_INT 5
13851: ST_TO_ADDR
// if time > 2 2$00 then
13852: LD_VAR 0 2
13856: PUSH
13857: LD_INT 4200
13859: GREATER
13860: IFFALSE 13870
// time := 0 0$30 ;
13862: LD_ADDR_VAR 0 2
13866: PUSH
13867: LD_INT 1050
13869: ST_TO_ADDR
// until not game or amount <= 0 ;
13870: LD_EXP 2
13874: NOT
13875: PUSH
13876: LD_VAR 0 3
13880: PUSH
13881: LD_INT 0
13883: LESSEQUAL
13884: OR
13885: IFFALSE 13537
// end ; end_of_file
13887: LD_VAR 0 4
13891: RET
// var NorthBase , WestBase ; every 0 0$1 do var i ;
13892: GO 13894
13894: DISABLE
13895: LD_INT 0
13897: PPUSH
// begin NorthBase := 2 ;
13898: LD_ADDR_LOC 1
13902: PUSH
13903: LD_INT 2
13905: ST_TO_ADDR
// WestBase := 3 ;
13906: LD_ADDR_LOC 2
13910: PUSH
13911: LD_INT 3
13913: ST_TO_ADDR
// end ;
13914: PPOPN 1
13916: END
// every 10 10$00 do var i ;
13917: GO 13919
13919: DISABLE
13920: LD_INT 0
13922: PPUSH
// begin for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
13923: LD_ADDR_VAR 0 1
13927: PUSH
13928: DOUBLE
13929: LD_INT 1
13931: DEC
13932: ST_TO_ADDR
13933: LD_INT 3
13935: PUSH
13936: LD_INT 4
13938: PUSH
13939: LD_INT 5
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: LD_OWVAR 67
13951: ARRAY
13952: PUSH
13953: FOR_TO
13954: IFFALSE 14055
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
13956: LD_ADDR_EXP 43
13960: PUSH
13961: LD_EXP 43
13965: PPUSH
13966: LD_EXP 43
13970: PUSH
13971: LD_INT 1
13973: PLUS
13974: PPUSH
13975: LD_LOC 1
13979: PUSH
13980: LD_INT 14
13982: PUSH
13983: LD_INT 3
13985: PUSH
13986: LD_INT 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 1
13995: PPUSH
13996: LD_INT 2
13998: PPUSH
13999: CALL_OW 12
14003: ARRAY
14004: PUSH
14005: LD_INT 2
14007: PUSH
14008: LD_INT 27
14010: PUSH
14011: LD_INT 25
14013: PUSH
14014: LD_INT 28
14016: PUSH
14017: LD_INT 29
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 1
14028: PPUSH
14029: LD_INT 4
14031: PPUSH
14032: CALL_OW 12
14036: ARRAY
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PPUSH
14048: CALL_OW 1
14052: ST_TO_ADDR
// end ;
14053: GO 13953
14055: POP
14056: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
14057: LD_ADDR_VAR 0 1
14061: PUSH
14062: DOUBLE
14063: LD_INT 1
14065: DEC
14066: ST_TO_ADDR
14067: LD_INT 3
14069: PUSH
14070: LD_INT 4
14072: PUSH
14073: LD_INT 5
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: PUSH
14081: LD_OWVAR 67
14085: ARRAY
14086: PUSH
14087: FOR_TO
14088: IFFALSE 14170
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14090: LD_ADDR_EXP 43
14094: PUSH
14095: LD_EXP 43
14099: PPUSH
14100: LD_EXP 43
14104: PUSH
14105: LD_INT 1
14107: PLUS
14108: PPUSH
14109: LD_LOC 2
14113: PUSH
14114: LD_INT 14
14116: PUSH
14117: LD_INT 1
14119: PUSH
14120: LD_INT 2
14122: PUSH
14123: LD_INT 27
14125: PUSH
14126: LD_INT 25
14128: PUSH
14129: LD_INT 28
14131: PUSH
14132: LD_INT 26
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_INT 4
14146: PPUSH
14147: CALL_OW 12
14151: ARRAY
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PPUSH
14163: CALL_OW 1
14167: ST_TO_ADDR
// end ;
14168: GO 14087
14170: POP
14171: POP
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
14172: LD_INT 16800
14174: PUSH
14175: LD_INT 2100
14177: PUSH
14178: LD_OWVAR 67
14182: MUL
14183: MINUS
14184: PPUSH
14185: CALL_OW 67
// for i := 1 to [ 5 , 5 , 6 ] [ Difficulty ] do
14189: LD_ADDR_VAR 0 1
14193: PUSH
14194: DOUBLE
14195: LD_INT 1
14197: DEC
14198: ST_TO_ADDR
14199: LD_INT 5
14201: PUSH
14202: LD_INT 5
14204: PUSH
14205: LD_INT 6
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: LD_OWVAR 67
14217: ARRAY
14218: PUSH
14219: FOR_TO
14220: IFFALSE 14321
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14222: LD_ADDR_EXP 43
14226: PUSH
14227: LD_EXP 43
14231: PPUSH
14232: LD_EXP 43
14236: PUSH
14237: LD_INT 1
14239: PLUS
14240: PPUSH
14241: LD_LOC 1
14245: PUSH
14246: LD_INT 14
14248: PUSH
14249: LD_INT 3
14251: PUSH
14252: LD_INT 1
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 1
14261: PPUSH
14262: LD_INT 2
14264: PPUSH
14265: CALL_OW 12
14269: ARRAY
14270: PUSH
14271: LD_INT 2
14273: PUSH
14274: LD_INT 27
14276: PUSH
14277: LD_INT 25
14279: PUSH
14280: LD_INT 28
14282: PUSH
14283: LD_INT 29
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 1
14294: PPUSH
14295: LD_INT 4
14297: PPUSH
14298: CALL_OW 12
14302: ARRAY
14303: PUSH
14304: EMPTY
14305: LIST
14306: LIST
14307: LIST
14308: LIST
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PPUSH
14314: CALL_OW 1
14318: ST_TO_ADDR
// end ;
14319: GO 14219
14321: POP
14322: POP
// if tick > 30 30$0 then
14323: LD_OWVAR 1
14327: PUSH
14328: LD_INT 63000
14330: GREATER
14331: IFFALSE 14407
// begin for i := 1 to tick div 30 30$0 do
14333: LD_ADDR_VAR 0 1
14337: PUSH
14338: DOUBLE
14339: LD_INT 1
14341: DEC
14342: ST_TO_ADDR
14343: LD_OWVAR 1
14347: PUSH
14348: LD_INT 63000
14350: DIV
14351: PUSH
14352: FOR_TO
14353: IFFALSE 14405
// arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , ar_half_tracked , engine_siberite , control_remote , ar_selfpropelled_bomb ] ) ;
14355: LD_ADDR_EXP 43
14359: PUSH
14360: LD_EXP 43
14364: PPUSH
14365: LD_EXP 43
14369: PUSH
14370: LD_INT 1
14372: PLUS
14373: PPUSH
14374: LD_LOC 1
14378: PUSH
14379: LD_INT 14
14381: PUSH
14382: LD_INT 3
14384: PUSH
14385: LD_INT 2
14387: PUSH
14388: LD_INT 29
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: PPUSH
14398: CALL_OW 1
14402: ST_TO_ADDR
14403: GO 14352
14405: POP
14406: POP
// end ; for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
14407: LD_ADDR_VAR 0 1
14411: PUSH
14412: DOUBLE
14413: LD_INT 1
14415: DEC
14416: ST_TO_ADDR
14417: LD_INT 5
14419: PUSH
14420: LD_INT 6
14422: PUSH
14423: LD_INT 6
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: LD_OWVAR 67
14435: ARRAY
14436: PUSH
14437: FOR_TO
14438: IFFALSE 14520
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14440: LD_ADDR_EXP 43
14444: PUSH
14445: LD_EXP 43
14449: PPUSH
14450: LD_EXP 43
14454: PUSH
14455: LD_INT 1
14457: PLUS
14458: PPUSH
14459: LD_LOC 2
14463: PUSH
14464: LD_INT 14
14466: PUSH
14467: LD_INT 1
14469: PUSH
14470: LD_INT 2
14472: PUSH
14473: LD_INT 27
14475: PUSH
14476: LD_INT 25
14478: PUSH
14479: LD_INT 28
14481: PUSH
14482: LD_INT 26
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: PUSH
14491: LD_INT 1
14493: PPUSH
14494: LD_INT 4
14496: PPUSH
14497: CALL_OW 12
14501: ARRAY
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: LIST
14507: LIST
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PPUSH
14513: CALL_OW 1
14517: ST_TO_ADDR
// end ;
14518: GO 14437
14520: POP
14521: POP
// repeat wait ( [ 10 10$0 , 9 9$0 , 8 8$0 ] [ Difficulty ] ) ;
14522: LD_INT 21000
14524: PUSH
14525: LD_INT 18900
14527: PUSH
14528: LD_INT 16800
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: LD_OWVAR 67
14540: ARRAY
14541: PPUSH
14542: CALL_OW 67
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
14546: LD_ADDR_VAR 0 1
14550: PUSH
14551: DOUBLE
14552: LD_INT 1
14554: DEC
14555: ST_TO_ADDR
14556: LD_INT 5
14558: PUSH
14559: LD_INT 6
14561: PUSH
14562: LD_INT 7
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_OWVAR 67
14574: ARRAY
14575: PUSH
14576: FOR_TO
14577: IFFALSE 14678
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ NorthBase , [ ar_half_tracked , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 4 ) ] ] ] ) ;
14579: LD_ADDR_EXP 43
14583: PUSH
14584: LD_EXP 43
14588: PPUSH
14589: LD_EXP 43
14593: PUSH
14594: LD_INT 1
14596: PLUS
14597: PPUSH
14598: LD_LOC 1
14602: PUSH
14603: LD_INT 14
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: LD_INT 1
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_INT 2
14621: PPUSH
14622: CALL_OW 12
14626: ARRAY
14627: PUSH
14628: LD_INT 2
14630: PUSH
14631: LD_INT 27
14633: PUSH
14634: LD_INT 25
14636: PUSH
14637: LD_INT 28
14639: PUSH
14640: LD_INT 29
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 1
14651: PPUSH
14652: LD_INT 4
14654: PPUSH
14655: CALL_OW 12
14659: ARRAY
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PPUSH
14671: CALL_OW 1
14675: ST_TO_ADDR
// end ;
14676: GO 14576
14678: POP
14679: POP
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
14680: LD_ADDR_VAR 0 1
14684: PUSH
14685: DOUBLE
14686: LD_INT 1
14688: DEC
14689: ST_TO_ADDR
14690: LD_INT 4
14692: PUSH
14693: LD_INT 5
14695: PUSH
14696: LD_INT 6
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: PUSH
14704: LD_OWVAR 67
14708: ARRAY
14709: PUSH
14710: FOR_TO
14711: IFFALSE 14793
// begin arConstructList := Replace ( arConstructList , arConstructList + 1 , [ WestBase , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] [ rand ( 1 , 4 ) ] ] ] ) ;
14713: LD_ADDR_EXP 43
14717: PUSH
14718: LD_EXP 43
14722: PPUSH
14723: LD_EXP 43
14727: PUSH
14728: LD_INT 1
14730: PLUS
14731: PPUSH
14732: LD_LOC 2
14736: PUSH
14737: LD_INT 14
14739: PUSH
14740: LD_INT 1
14742: PUSH
14743: LD_INT 2
14745: PUSH
14746: LD_INT 27
14748: PUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 28
14754: PUSH
14755: LD_INT 26
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 1
14766: PPUSH
14767: LD_INT 4
14769: PPUSH
14770: CALL_OW 12
14774: ARRAY
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 1
14790: ST_TO_ADDR
// end ;
14791: GO 14710
14793: POP
14794: POP
// until false ;
14795: LD_INT 0
14797: IFFALSE 14522
// end ;
14799: PPOPN 1
14801: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) do var i , tmp ;
14802: LD_EXP 46
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: LD_LOC 1
14814: PPUSH
14815: LD_INT 2
14817: PPUSH
14818: CALL 58867 0 4
14822: IFFALSE 14991
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
// begin enable ;
14831: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , NorthBase , 2 ) ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_EXP 46
14841: PPUSH
14842: LD_INT 1
14844: PPUSH
14845: LD_LOC 1
14849: PPUSH
14850: LD_INT 2
14852: PPUSH
14853: CALL 58867 0 4
14857: ST_TO_ADDR
// if not tmp then
14858: LD_VAR 0 2
14862: NOT
14863: IFFALSE 14867
// exit ;
14865: GO 14991
// for i := Count ( arVehiclesAtttackers ) downto 1 do
14867: LD_ADDR_VAR 0 1
14871: PUSH
14872: DOUBLE
14873: LD_EXP 46
14877: PPUSH
14878: CALL 18748 0 1
14882: INC
14883: ST_TO_ADDR
14884: LD_INT 1
14886: PUSH
14887: FOR_DOWNTO
14888: IFFALSE 14934
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
14890: LD_EXP 46
14894: PUSH
14895: LD_VAR 0 1
14899: ARRAY
14900: PUSH
14901: LD_INT 2
14903: ARRAY
14904: PUSH
14905: LD_VAR 0 2
14909: IN
14910: IFFALSE 14932
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
14912: LD_ADDR_EXP 46
14916: PUSH
14917: LD_EXP 46
14921: PPUSH
14922: LD_VAR 0 1
14926: PPUSH
14927: CALL_OW 3
14931: ST_TO_ADDR
14932: GO 14887
14934: POP
14935: POP
// SendToAttack ( tmp , [ [ 164 , 40 ] , [ 174 , 72 ] , [ 174 , 93 ] , [ 196 , 110 ] ] ) ;
14936: LD_VAR 0 2
14940: PPUSH
14941: LD_INT 164
14943: PUSH
14944: LD_INT 40
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 174
14953: PUSH
14954: LD_INT 72
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 174
14963: PUSH
14964: LD_INT 93
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 196
14973: PUSH
14974: LD_INT 110
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL 15186 0 2
// end ;
14991: PPOPN 2
14993: END
// every 2 2$00 trigger CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) do var i , tmp ;
14994: LD_EXP 46
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: LD_LOC 2
15006: PPUSH
15007: LD_INT 2
15009: PPUSH
15010: CALL 58867 0 4
15014: IFFALSE 15183
15016: GO 15018
15018: DISABLE
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
// begin enable ;
15023: ENABLE
// tmp := CheckByIndex ( arVehiclesAtttackers , 1 , WestBase , 2 ) ;
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_EXP 46
15033: PPUSH
15034: LD_INT 1
15036: PPUSH
15037: LD_LOC 2
15041: PPUSH
15042: LD_INT 2
15044: PPUSH
15045: CALL 58867 0 4
15049: ST_TO_ADDR
// if not tmp then
15050: LD_VAR 0 2
15054: NOT
15055: IFFALSE 15059
// exit ;
15057: GO 15183
// for i := Count ( arVehiclesAtttackers ) downto 1 do
15059: LD_ADDR_VAR 0 1
15063: PUSH
15064: DOUBLE
15065: LD_EXP 46
15069: PPUSH
15070: CALL 18748 0 1
15074: INC
15075: ST_TO_ADDR
15076: LD_INT 1
15078: PUSH
15079: FOR_DOWNTO
15080: IFFALSE 15126
// if arVehiclesAtttackers [ i ] [ 2 ] in tmp then
15082: LD_EXP 46
15086: PUSH
15087: LD_VAR 0 1
15091: ARRAY
15092: PUSH
15093: LD_INT 2
15095: ARRAY
15096: PUSH
15097: LD_VAR 0 2
15101: IN
15102: IFFALSE 15124
// arVehiclesAtttackers := Delete ( arVehiclesAtttackers , i ) ;
15104: LD_ADDR_EXP 46
15108: PUSH
15109: LD_EXP 46
15113: PPUSH
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 3
15123: ST_TO_ADDR
15124: GO 15079
15126: POP
15127: POP
// SendToAttack ( tmp , [ [ 49 , 37 ] , [ 54 , 68 ] , [ 77 , 91 ] , [ 95 , 104 ] ] ) ;
15128: LD_VAR 0 2
15132: PPUSH
15133: LD_INT 49
15135: PUSH
15136: LD_INT 37
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 54
15145: PUSH
15146: LD_INT 68
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 77
15155: PUSH
15156: LD_INT 91
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: LD_INT 95
15165: PUSH
15166: LD_INT 104
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: PPUSH
15179: CALL 15186 0 2
// end ;
15183: PPOPN 2
15185: END
// function SendToAttack ( attackers , path ) ; var i ; begin
15186: LD_INT 0
15188: PPUSH
15189: PPUSH
// repeat wait ( 0 0$1 ) ;
15190: LD_INT 35
15192: PPUSH
15193: CALL_OW 67
// for i in attackers do
15197: LD_ADDR_VAR 0 4
15201: PUSH
15202: LD_VAR 0 1
15206: PUSH
15207: FOR_IN
15208: IFFALSE 15265
// begin if not IsOk ( i ) then
15210: LD_VAR 0 4
15214: PPUSH
15215: CALL_OW 302
15219: NOT
15220: IFFALSE 15249
// begin ComUnlink ( i ) ;
15222: LD_VAR 0 4
15226: PPUSH
15227: CALL_OW 136
// attackers := attackers diff i ;
15231: LD_ADDR_VAR 0 1
15235: PUSH
15236: LD_VAR 0 1
15240: PUSH
15241: LD_VAR 0 4
15245: DIFF
15246: ST_TO_ADDR
// continue ;
15247: GO 15207
// end ; AgressiveMove ( i , path ) ;
15249: LD_VAR 0 4
15253: PPUSH
15254: LD_VAR 0 2
15258: PPUSH
15259: CALL 56941 0 2
// end ;
15263: GO 15207
15265: POP
15266: POP
// until not UnitFilter ( attackers , [ f_ok ] ) ;
15267: LD_VAR 0 1
15271: PPUSH
15272: LD_INT 50
15274: PUSH
15275: EMPTY
15276: LIST
15277: PPUSH
15278: CALL_OW 72
15282: NOT
15283: IFFALSE 15190
// end ;
15285: LD_VAR 0 3
15289: RET
// every 0 0$10 trigger not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot do var i , un , tmp , enemy ;
15290: LD_INT 7
15292: PPUSH
15293: CALL_OW 302
15297: NOT
15298: PUSH
15299: LD_INT 7
15301: PPUSH
15302: CALL_OW 255
15306: PUSH
15307: LD_EXP 3
15311: NONEQUAL
15312: OR
15313: IFFALSE 15678
15315: GO 15317
15317: DISABLE
15318: LD_INT 0
15320: PPUSH
15321: PPUSH
15322: PPUSH
15323: PPUSH
// begin for i := 1 to 3 do
15324: LD_ADDR_VAR 0 1
15328: PUSH
15329: DOUBLE
15330: LD_INT 1
15332: DEC
15333: ST_TO_ADDR
15334: LD_INT 3
15336: PUSH
15337: FOR_TO
15338: IFFALSE 15488
// begin uc_side := 2 ;
15340: LD_ADDR_OWVAR 20
15344: PUSH
15345: LD_INT 2
15347: ST_TO_ADDR
// uc_nation := nation_arabian ;
15348: LD_ADDR_OWVAR 21
15352: PUSH
15353: LD_INT 2
15355: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_remote , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15356: LD_INT 11
15358: PPUSH
15359: LD_INT 1
15361: PPUSH
15362: LD_INT 2
15364: PPUSH
15365: LD_INT 24
15367: PUSH
15368: LD_INT 23
15370: PUSH
15371: LD_INT 92
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 1
15381: PPUSH
15382: LD_INT 3
15384: PPUSH
15385: CALL_OW 12
15389: ARRAY
15390: PPUSH
15391: LD_INT 100
15393: PPUSH
15394: CALL 21486 0 5
// un := CreateVehicle ;
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: CALL_OW 45
15407: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15408: LD_VAR 0 2
15412: PPUSH
15413: LD_INT 2
15415: PPUSH
15416: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15420: LD_VAR 0 2
15424: PPUSH
15425: LD_INT 47
15427: PPUSH
15428: LD_INT 0
15430: PPUSH
15431: CALL_OW 49
// Connect ( un ) ;
15435: LD_VAR 0 2
15439: PPUSH
15440: CALL 24954 0 1
// wait ( 0 0$0.3 ) ;
15444: LD_INT 10
15446: PPUSH
15447: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15451: LD_VAR 0 2
15455: PPUSH
15456: LD_INT 73
15458: PPUSH
15459: LD_INT 17
15461: PPUSH
15462: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15466: LD_ADDR_VAR 0 3
15470: PUSH
15471: LD_VAR 0 3
15475: PPUSH
15476: LD_VAR 0 2
15480: PPUSH
15481: CALL 54337 0 2
15485: ST_TO_ADDR
// end ;
15486: GO 15337
15488: POP
15489: POP
// repeat wait ( 0 0$1 ) ;
15490: LD_INT 35
15492: PPUSH
15493: CALL_OW 67
// for i in tmp do
15497: LD_ADDR_VAR 0 1
15501: PUSH
15502: LD_VAR 0 3
15506: PUSH
15507: FOR_IN
15508: IFFALSE 15669
// begin if not IsOk ( i ) then
15510: LD_VAR 0 1
15514: PPUSH
15515: CALL_OW 302
15519: NOT
15520: IFFALSE 15549
// begin ComAutodestruct ( i ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: CALL 49849 0 1
// tmp := tmp diff i ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: LD_VAR 0 3
15540: PUSH
15541: LD_VAR 0 1
15545: DIFF
15546: ST_TO_ADDR
// continue ;
15547: GO 15507
// end ; if GetLives ( i ) < 750 then
15549: LD_VAR 0 1
15553: PPUSH
15554: CALL_OW 256
15558: PUSH
15559: LD_INT 750
15561: LESS
15562: IFFALSE 15623
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15564: LD_ADDR_VAR 0 4
15568: PUSH
15569: LD_INT 81
15571: PUSH
15572: LD_VAR 0 1
15576: PPUSH
15577: CALL_OW 255
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 69
15590: PPUSH
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 74
15600: ST_TO_ADDR
// if enemy then
15601: LD_VAR 0 4
15605: IFFALSE 15621
// ComMoveUnit ( i , enemy ) ;
15607: LD_VAR 0 1
15611: PPUSH
15612: LD_VAR 0 4
15616: PPUSH
15617: CALL_OW 112
// end else
15621: GO 15667
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
15623: LD_VAR 0 1
15627: PPUSH
15628: LD_INT 76
15630: PUSH
15631: LD_INT 31
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 93
15640: PUSH
15641: LD_INT 67
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: LD_INT 108
15650: PUSH
15651: LD_INT 97
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL 56941 0 2
// end ;
15667: GO 15507
15669: POP
15670: POP
// until not tmp ;
15671: LD_VAR 0 3
15675: NOT
15676: IFFALSE 15490
// end ;
15678: PPOPN 4
15680: END
// every 18 18$00 trigger ( not IsOk ( ar_dep_s ) or GetSide ( ar_dep_s ) <> side_bot ) and ( IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) = side_bot ) do var i , un , tmp , enemy ;
15681: LD_INT 7
15683: PPUSH
15684: CALL_OW 302
15688: NOT
15689: PUSH
15690: LD_INT 7
15692: PPUSH
15693: CALL_OW 255
15697: PUSH
15698: LD_EXP 3
15702: NONEQUAL
15703: OR
15704: PUSH
15705: LD_INT 45
15707: PPUSH
15708: CALL_OW 302
15712: PUSH
15713: LD_INT 45
15715: PPUSH
15716: CALL_OW 255
15720: PUSH
15721: LD_EXP 3
15725: EQUAL
15726: AND
15727: AND
15728: IFFALSE 16085
15730: GO 15732
15732: DISABLE
15733: LD_INT 0
15735: PPUSH
15736: PPUSH
15737: PPUSH
15738: PPUSH
// begin enable ;
15739: ENABLE
// for i := 1 to 3 do
15740: LD_ADDR_VAR 0 1
15744: PUSH
15745: DOUBLE
15746: LD_INT 1
15748: DEC
15749: ST_TO_ADDR
15750: LD_INT 3
15752: PUSH
15753: FOR_TO
15754: IFFALSE 15895
// begin uc_side := 2 ;
15756: LD_ADDR_OWVAR 20
15760: PUSH
15761: LD_INT 2
15763: ST_TO_ADDR
// uc_nation := nation_arabian ;
15764: LD_ADDR_OWVAR 21
15768: PUSH
15769: LD_INT 2
15771: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun , ar_mortar ] [ rand ( 1 , 3 ) ] , 100 ) ;
15772: LD_INT 11
15774: PPUSH
15775: LD_INT 1
15777: PPUSH
15778: LD_INT 5
15780: PPUSH
15781: LD_INT 24
15783: PUSH
15784: LD_INT 23
15786: PUSH
15787: LD_INT 92
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 1
15797: PPUSH
15798: LD_INT 3
15800: PPUSH
15801: CALL_OW 12
15805: ARRAY
15806: PPUSH
15807: LD_INT 100
15809: PPUSH
15810: CALL 21486 0 5
// un := CreateVehicle ;
15814: LD_ADDR_VAR 0 2
15818: PUSH
15819: CALL_OW 45
15823: ST_TO_ADDR
// SetDir ( un , 2 ) ;
15824: LD_VAR 0 2
15828: PPUSH
15829: LD_INT 2
15831: PPUSH
15832: CALL_OW 233
// PlaceUnitArea ( un , river_spawn , false ) ;
15836: LD_VAR 0 2
15840: PPUSH
15841: LD_INT 47
15843: PPUSH
15844: LD_INT 0
15846: PPUSH
15847: CALL_OW 49
// wait ( 0 0$0.3 ) ;
15851: LD_INT 10
15853: PPUSH
15854: CALL_OW 67
// ComMoveXY ( un , 73 , 17 ) ;
15858: LD_VAR 0 2
15862: PPUSH
15863: LD_INT 73
15865: PPUSH
15866: LD_INT 17
15868: PPUSH
15869: CALL_OW 111
// tmp := Join ( tmp , un ) ;
15873: LD_ADDR_VAR 0 3
15877: PUSH
15878: LD_VAR 0 3
15882: PPUSH
15883: LD_VAR 0 2
15887: PPUSH
15888: CALL 54337 0 2
15892: ST_TO_ADDR
// end ;
15893: GO 15753
15895: POP
15896: POP
// repeat wait ( 0 0$1 ) ;
15897: LD_INT 35
15899: PPUSH
15900: CALL_OW 67
// for i in tmp do
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: LD_VAR 0 3
15913: PUSH
15914: FOR_IN
15915: IFFALSE 16076
// begin if not IsOk ( i ) then
15917: LD_VAR 0 1
15921: PPUSH
15922: CALL_OW 302
15926: NOT
15927: IFFALSE 15956
// begin ComAutodestruct ( i ) ;
15929: LD_VAR 0 1
15933: PPUSH
15934: CALL 49849 0 1
// tmp := tmp diff i ;
15938: LD_ADDR_VAR 0 3
15942: PUSH
15943: LD_VAR 0 3
15947: PUSH
15948: LD_VAR 0 1
15952: DIFF
15953: ST_TO_ADDR
// continue ;
15954: GO 15914
// end ; if GetLives ( i ) < 750 then
15956: LD_VAR 0 1
15960: PPUSH
15961: CALL_OW 256
15965: PUSH
15966: LD_INT 750
15968: LESS
15969: IFFALSE 16030
// begin enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
15971: LD_ADDR_VAR 0 4
15975: PUSH
15976: LD_INT 81
15978: PUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 255
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PPUSH
15993: CALL_OW 69
15997: PPUSH
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 74
16007: ST_TO_ADDR
// if enemy then
16008: LD_VAR 0 4
16012: IFFALSE 16028
// ComMoveUnit ( i , enemy ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 4
16023: PPUSH
16024: CALL_OW 112
// end else
16028: GO 16074
// AgressiveMove ( i , [ [ 76 , 31 ] , [ 93 , 67 ] , [ 108 , 97 ] ] ) ;
16030: LD_VAR 0 1
16034: PPUSH
16035: LD_INT 76
16037: PUSH
16038: LD_INT 31
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 93
16047: PUSH
16048: LD_INT 67
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 108
16057: PUSH
16058: LD_INT 97
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: PPUSH
16070: CALL 56941 0 2
// end ;
16074: GO 15914
16076: POP
16077: POP
// until not tmp ;
16078: LD_VAR 0 3
16082: NOT
16083: IFFALSE 15897
// end ;
16085: PPOPN 4
16087: END
// every 0 0$10 trigger not IsOk ( ar_dep_e ) or GetSide ( ar_dep_e ) <> side_bot do var i , un , tmp , enemy ;
16088: LD_INT 69
16090: PPUSH
16091: CALL_OW 302
16095: NOT
16096: PUSH
16097: LD_INT 69
16099: PPUSH
16100: CALL_OW 255
16104: PUSH
16105: LD_EXP 3
16109: NONEQUAL
16110: OR
16111: IFFALSE 16364
16113: GO 16115
16115: DISABLE
16116: LD_INT 0
16118: PPUSH
16119: PPUSH
16120: PPUSH
16121: PPUSH
// begin for i := 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
16122: LD_ADDR_VAR 0 1
16126: PUSH
16127: DOUBLE
16128: LD_INT 1
16130: DEC
16131: ST_TO_ADDR
16132: LD_INT 2
16134: PUSH
16135: LD_INT 3
16137: PUSH
16138: LD_INT 4
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: LIST
16145: PUSH
16146: LD_OWVAR 67
16150: ARRAY
16151: PUSH
16152: FOR_TO
16153: IFFALSE 16244
// begin uc_side := side_bot ;
16155: LD_ADDR_OWVAR 20
16159: PUSH
16160: LD_EXP 3
16164: ST_TO_ADDR
// uc_nation := nation_nature ;
16165: LD_ADDR_OWVAR 21
16169: PUSH
16170: LD_INT 0
16172: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16173: CALL 50447 0 0
// hc_class := class_apeman_kamikaze ;
16177: LD_ADDR_OWVAR 28
16181: PUSH
16182: LD_INT 17
16184: ST_TO_ADDR
// un := CreateHuman ;
16185: LD_ADDR_VAR 0 2
16189: PUSH
16190: CALL_OW 44
16194: ST_TO_ADDR
// SetDir ( un , 4 ) ;
16195: LD_VAR 0 2
16199: PPUSH
16200: LD_INT 4
16202: PPUSH
16203: CALL_OW 233
// PlaceUnitArea ( un , east_ape_spawn , false ) ;
16207: LD_VAR 0 2
16211: PPUSH
16212: LD_INT 48
16214: PPUSH
16215: LD_INT 0
16217: PPUSH
16218: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16222: LD_ADDR_VAR 0 3
16226: PUSH
16227: LD_VAR 0 3
16231: PPUSH
16232: LD_VAR 0 2
16236: PPUSH
16237: CALL 54337 0 2
16241: ST_TO_ADDR
// end ;
16242: GO 16152
16244: POP
16245: POP
// repeat wait ( 0 0$1 ) ;
16246: LD_INT 35
16248: PPUSH
16249: CALL_OW 67
// for i in tmp do
16253: LD_ADDR_VAR 0 1
16257: PUSH
16258: LD_VAR 0 3
16262: PUSH
16263: FOR_IN
16264: IFFALSE 16355
// begin if not IsOk ( i ) then
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 302
16275: NOT
16276: IFFALSE 16296
// begin tmp := tmp diff i ;
16278: LD_ADDR_VAR 0 3
16282: PUSH
16283: LD_VAR 0 3
16287: PUSH
16288: LD_VAR 0 1
16292: DIFF
16293: ST_TO_ADDR
// continue ;
16294: GO 16263
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16296: LD_ADDR_VAR 0 4
16300: PUSH
16301: LD_INT 81
16303: PUSH
16304: LD_VAR 0 1
16308: PPUSH
16309: CALL_OW 255
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PPUSH
16318: CALL_OW 69
16322: PPUSH
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 74
16332: ST_TO_ADDR
// if enemy then
16333: LD_VAR 0 4
16337: IFFALSE 16353
// ComAttackUnit ( i , enemy ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 4
16348: PPUSH
16349: CALL_OW 115
// end ;
16353: GO 16263
16355: POP
16356: POP
// until not tmp ;
16357: LD_VAR 0 3
16361: NOT
16362: IFFALSE 16246
// end ;
16364: PPOPN 4
16366: END
// every 0 0$10 trigger not IsOk ( ar_dep_w ) or GetSide ( ar_dep_w ) <> side_bot do var i , un , tmp , enemy ;
16367: LD_INT 45
16369: PPUSH
16370: CALL_OW 302
16374: NOT
16375: PUSH
16376: LD_INT 45
16378: PPUSH
16379: CALL_OW 255
16383: PUSH
16384: LD_EXP 3
16388: NONEQUAL
16389: OR
16390: IFFALSE 16643
16392: GO 16394
16394: DISABLE
16395: LD_INT 0
16397: PPUSH
16398: PPUSH
16399: PPUSH
16400: PPUSH
// begin for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
16401: LD_ADDR_VAR 0 1
16405: PUSH
16406: DOUBLE
16407: LD_INT 1
16409: DEC
16410: ST_TO_ADDR
16411: LD_INT 2
16413: PUSH
16414: LD_INT 3
16416: PUSH
16417: LD_INT 3
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: PUSH
16425: LD_OWVAR 67
16429: ARRAY
16430: PUSH
16431: FOR_TO
16432: IFFALSE 16523
// begin uc_side := side_bot ;
16434: LD_ADDR_OWVAR 20
16438: PUSH
16439: LD_EXP 3
16443: ST_TO_ADDR
// uc_nation := nation_nature ;
16444: LD_ADDR_OWVAR 21
16448: PUSH
16449: LD_INT 0
16451: ST_TO_ADDR
// PrepareApemanSoldier ( ) ;
16452: CALL 50447 0 0
// hc_class := class_apeman_kamikaze ;
16456: LD_ADDR_OWVAR 28
16460: PUSH
16461: LD_INT 17
16463: ST_TO_ADDR
// un := CreateHuman ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: CALL_OW 44
16473: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16474: LD_VAR 0 2
16478: PPUSH
16479: LD_INT 2
16481: PPUSH
16482: CALL_OW 233
// PlaceUnitArea ( un , west_ape_spawn , false ) ;
16486: LD_VAR 0 2
16490: PPUSH
16491: LD_INT 49
16493: PPUSH
16494: LD_INT 0
16496: PPUSH
16497: CALL_OW 49
// tmp := Join ( tmp , un ) ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_VAR 0 3
16510: PPUSH
16511: LD_VAR 0 2
16515: PPUSH
16516: CALL 54337 0 2
16520: ST_TO_ADDR
// end ;
16521: GO 16431
16523: POP
16524: POP
// repeat wait ( 0 0$1 ) ;
16525: LD_INT 35
16527: PPUSH
16528: CALL_OW 67
// for i in tmp do
16532: LD_ADDR_VAR 0 1
16536: PUSH
16537: LD_VAR 0 3
16541: PUSH
16542: FOR_IN
16543: IFFALSE 16634
// begin if not IsOk ( i ) then
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 302
16554: NOT
16555: IFFALSE 16575
// begin tmp := tmp diff i ;
16557: LD_ADDR_VAR 0 3
16561: PUSH
16562: LD_VAR 0 3
16566: PUSH
16567: LD_VAR 0 1
16571: DIFF
16572: ST_TO_ADDR
// continue ;
16573: GO 16542
// end ; enemy := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( i ) ] ) , i ) ;
16575: LD_ADDR_VAR 0 4
16579: PUSH
16580: LD_INT 81
16582: PUSH
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 255
16592: PUSH
16593: EMPTY
16594: LIST
16595: LIST
16596: PPUSH
16597: CALL_OW 69
16601: PPUSH
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 74
16611: ST_TO_ADDR
// if enemy then
16612: LD_VAR 0 4
16616: IFFALSE 16632
// ComAttackUnit ( i , enemy ) ;
16618: LD_VAR 0 1
16622: PPUSH
16623: LD_VAR 0 4
16627: PPUSH
16628: CALL_OW 115
// end ;
16632: GO 16542
16634: POP
16635: POP
// until not tmp ;
16636: LD_VAR 0 3
16640: NOT
16641: IFFALSE 16525
// end ; end_of_file
16643: PPOPN 4
16645: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16646: LD_INT 0
16648: PPUSH
16649: PPUSH
// if exist_mode then
16650: LD_VAR 0 2
16654: IFFALSE 16679
// unit := CreateCharacter ( prefix & ident ) else
16656: LD_ADDR_VAR 0 5
16660: PUSH
16661: LD_VAR 0 3
16665: PUSH
16666: LD_VAR 0 1
16670: STR
16671: PPUSH
16672: CALL_OW 34
16676: ST_TO_ADDR
16677: GO 16694
// unit := NewCharacter ( ident ) ;
16679: LD_ADDR_VAR 0 5
16683: PUSH
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 25
16693: ST_TO_ADDR
// result := unit ;
16694: LD_ADDR_VAR 0 4
16698: PUSH
16699: LD_VAR 0 5
16703: ST_TO_ADDR
// end ;
16704: LD_VAR 0 4
16708: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16709: LD_INT 0
16711: PPUSH
16712: PPUSH
// if not side or not nation then
16713: LD_VAR 0 1
16717: NOT
16718: PUSH
16719: LD_VAR 0 2
16723: NOT
16724: OR
16725: IFFALSE 16729
// exit ;
16727: GO 17497
// case nation of nation_american :
16729: LD_VAR 0 2
16733: PUSH
16734: LD_INT 1
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16956
16742: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16743: LD_ADDR_VAR 0 4
16747: PUSH
16748: LD_INT 35
16750: PUSH
16751: LD_INT 45
16753: PUSH
16754: LD_INT 46
16756: PUSH
16757: LD_INT 47
16759: PUSH
16760: LD_INT 82
16762: PUSH
16763: LD_INT 83
16765: PUSH
16766: LD_INT 84
16768: PUSH
16769: LD_INT 85
16771: PUSH
16772: LD_INT 86
16774: PUSH
16775: LD_INT 1
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 6
16783: PUSH
16784: LD_INT 15
16786: PUSH
16787: LD_INT 16
16789: PUSH
16790: LD_INT 7
16792: PUSH
16793: LD_INT 12
16795: PUSH
16796: LD_INT 13
16798: PUSH
16799: LD_INT 10
16801: PUSH
16802: LD_INT 14
16804: PUSH
16805: LD_INT 20
16807: PUSH
16808: LD_INT 21
16810: PUSH
16811: LD_INT 22
16813: PUSH
16814: LD_INT 25
16816: PUSH
16817: LD_INT 32
16819: PUSH
16820: LD_INT 27
16822: PUSH
16823: LD_INT 36
16825: PUSH
16826: LD_INT 69
16828: PUSH
16829: LD_INT 39
16831: PUSH
16832: LD_INT 34
16834: PUSH
16835: LD_INT 40
16837: PUSH
16838: LD_INT 48
16840: PUSH
16841: LD_INT 49
16843: PUSH
16844: LD_INT 50
16846: PUSH
16847: LD_INT 51
16849: PUSH
16850: LD_INT 52
16852: PUSH
16853: LD_INT 53
16855: PUSH
16856: LD_INT 54
16858: PUSH
16859: LD_INT 55
16861: PUSH
16862: LD_INT 56
16864: PUSH
16865: LD_INT 57
16867: PUSH
16868: LD_INT 58
16870: PUSH
16871: LD_INT 59
16873: PUSH
16874: LD_INT 60
16876: PUSH
16877: LD_INT 61
16879: PUSH
16880: LD_INT 62
16882: PUSH
16883: LD_INT 80
16885: PUSH
16886: LD_INT 82
16888: PUSH
16889: LD_INT 83
16891: PUSH
16892: LD_INT 84
16894: PUSH
16895: LD_INT 85
16897: PUSH
16898: LD_INT 86
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: ST_TO_ADDR
16954: GO 17421
16956: LD_INT 2
16958: DOUBLE
16959: EQUAL
16960: IFTRUE 16964
16962: GO 17190
16964: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16965: LD_ADDR_VAR 0 4
16969: PUSH
16970: LD_INT 35
16972: PUSH
16973: LD_INT 45
16975: PUSH
16976: LD_INT 46
16978: PUSH
16979: LD_INT 47
16981: PUSH
16982: LD_INT 82
16984: PUSH
16985: LD_INT 83
16987: PUSH
16988: LD_INT 84
16990: PUSH
16991: LD_INT 85
16993: PUSH
16994: LD_INT 87
16996: PUSH
16997: LD_INT 70
16999: PUSH
17000: LD_INT 1
17002: PUSH
17003: LD_INT 11
17005: PUSH
17006: LD_INT 3
17008: PUSH
17009: LD_INT 4
17011: PUSH
17012: LD_INT 5
17014: PUSH
17015: LD_INT 6
17017: PUSH
17018: LD_INT 15
17020: PUSH
17021: LD_INT 18
17023: PUSH
17024: LD_INT 7
17026: PUSH
17027: LD_INT 17
17029: PUSH
17030: LD_INT 8
17032: PUSH
17033: LD_INT 20
17035: PUSH
17036: LD_INT 21
17038: PUSH
17039: LD_INT 22
17041: PUSH
17042: LD_INT 72
17044: PUSH
17045: LD_INT 26
17047: PUSH
17048: LD_INT 69
17050: PUSH
17051: LD_INT 39
17053: PUSH
17054: LD_INT 40
17056: PUSH
17057: LD_INT 41
17059: PUSH
17060: LD_INT 42
17062: PUSH
17063: LD_INT 43
17065: PUSH
17066: LD_INT 48
17068: PUSH
17069: LD_INT 49
17071: PUSH
17072: LD_INT 50
17074: PUSH
17075: LD_INT 51
17077: PUSH
17078: LD_INT 52
17080: PUSH
17081: LD_INT 53
17083: PUSH
17084: LD_INT 54
17086: PUSH
17087: LD_INT 55
17089: PUSH
17090: LD_INT 56
17092: PUSH
17093: LD_INT 60
17095: PUSH
17096: LD_INT 61
17098: PUSH
17099: LD_INT 62
17101: PUSH
17102: LD_INT 66
17104: PUSH
17105: LD_INT 67
17107: PUSH
17108: LD_INT 68
17110: PUSH
17111: LD_INT 81
17113: PUSH
17114: LD_INT 82
17116: PUSH
17117: LD_INT 83
17119: PUSH
17120: LD_INT 84
17122: PUSH
17123: LD_INT 85
17125: PUSH
17126: LD_INT 87
17128: PUSH
17129: LD_INT 88
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: ST_TO_ADDR
17188: GO 17421
17190: LD_INT 3
17192: DOUBLE
17193: EQUAL
17194: IFTRUE 17198
17196: GO 17420
17198: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17199: LD_ADDR_VAR 0 4
17203: PUSH
17204: LD_INT 46
17206: PUSH
17207: LD_INT 47
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 82
17218: PUSH
17219: LD_INT 83
17221: PUSH
17222: LD_INT 84
17224: PUSH
17225: LD_INT 85
17227: PUSH
17228: LD_INT 86
17230: PUSH
17231: LD_INT 11
17233: PUSH
17234: LD_INT 9
17236: PUSH
17237: LD_INT 20
17239: PUSH
17240: LD_INT 19
17242: PUSH
17243: LD_INT 21
17245: PUSH
17246: LD_INT 24
17248: PUSH
17249: LD_INT 22
17251: PUSH
17252: LD_INT 25
17254: PUSH
17255: LD_INT 28
17257: PUSH
17258: LD_INT 29
17260: PUSH
17261: LD_INT 30
17263: PUSH
17264: LD_INT 31
17266: PUSH
17267: LD_INT 37
17269: PUSH
17270: LD_INT 38
17272: PUSH
17273: LD_INT 32
17275: PUSH
17276: LD_INT 27
17278: PUSH
17279: LD_INT 33
17281: PUSH
17282: LD_INT 69
17284: PUSH
17285: LD_INT 39
17287: PUSH
17288: LD_INT 34
17290: PUSH
17291: LD_INT 40
17293: PUSH
17294: LD_INT 71
17296: PUSH
17297: LD_INT 23
17299: PUSH
17300: LD_INT 44
17302: PUSH
17303: LD_INT 48
17305: PUSH
17306: LD_INT 49
17308: PUSH
17309: LD_INT 50
17311: PUSH
17312: LD_INT 51
17314: PUSH
17315: LD_INT 52
17317: PUSH
17318: LD_INT 53
17320: PUSH
17321: LD_INT 54
17323: PUSH
17324: LD_INT 55
17326: PUSH
17327: LD_INT 56
17329: PUSH
17330: LD_INT 57
17332: PUSH
17333: LD_INT 58
17335: PUSH
17336: LD_INT 59
17338: PUSH
17339: LD_INT 63
17341: PUSH
17342: LD_INT 64
17344: PUSH
17345: LD_INT 65
17347: PUSH
17348: LD_INT 82
17350: PUSH
17351: LD_INT 83
17353: PUSH
17354: LD_INT 84
17356: PUSH
17357: LD_INT 85
17359: PUSH
17360: LD_INT 86
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: ST_TO_ADDR
17418: GO 17421
17420: POP
// if state > - 1 and state < 3 then
17421: LD_VAR 0 3
17425: PUSH
17426: LD_INT 1
17428: NEG
17429: GREATER
17430: PUSH
17431: LD_VAR 0 3
17435: PUSH
17436: LD_INT 3
17438: LESS
17439: AND
17440: IFFALSE 17497
// for i in result do
17442: LD_ADDR_VAR 0 5
17446: PUSH
17447: LD_VAR 0 4
17451: PUSH
17452: FOR_IN
17453: IFFALSE 17495
// if GetTech ( i , side ) <> state then
17455: LD_VAR 0 5
17459: PPUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 321
17469: PUSH
17470: LD_VAR 0 3
17474: NONEQUAL
17475: IFFALSE 17493
// result := result diff i ;
17477: LD_ADDR_VAR 0 4
17481: PUSH
17482: LD_VAR 0 4
17486: PUSH
17487: LD_VAR 0 5
17491: DIFF
17492: ST_TO_ADDR
17493: GO 17452
17495: POP
17496: POP
// end ;
17497: LD_VAR 0 4
17501: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17502: LD_INT 0
17504: PPUSH
17505: PPUSH
17506: PPUSH
// result := true ;
17507: LD_ADDR_VAR 0 3
17511: PUSH
17512: LD_INT 1
17514: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17515: LD_ADDR_VAR 0 5
17519: PUSH
17520: LD_VAR 0 2
17524: PPUSH
17525: CALL_OW 480
17529: ST_TO_ADDR
// if not tmp then
17530: LD_VAR 0 5
17534: NOT
17535: IFFALSE 17539
// exit ;
17537: GO 17588
// for i in tmp do
17539: LD_ADDR_VAR 0 4
17543: PUSH
17544: LD_VAR 0 5
17548: PUSH
17549: FOR_IN
17550: IFFALSE 17586
// if GetTech ( i , side ) <> state_researched then
17552: LD_VAR 0 4
17556: PPUSH
17557: LD_VAR 0 1
17561: PPUSH
17562: CALL_OW 321
17566: PUSH
17567: LD_INT 2
17569: NONEQUAL
17570: IFFALSE 17584
// begin result := false ;
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_INT 0
17579: ST_TO_ADDR
// exit ;
17580: POP
17581: POP
17582: GO 17588
// end ;
17584: GO 17549
17586: POP
17587: POP
// end ;
17588: LD_VAR 0 3
17592: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17593: LD_INT 0
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17608: LD_VAR 0 1
17612: NOT
17613: PUSH
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 257
17623: PUSH
17624: LD_INT 9
17626: NONEQUAL
17627: OR
17628: IFFALSE 17632
// exit ;
17630: GO 18205
// side := GetSide ( unit ) ;
17632: LD_ADDR_VAR 0 9
17636: PUSH
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 255
17646: ST_TO_ADDR
// tech_space := tech_spacanom ;
17647: LD_ADDR_VAR 0 12
17651: PUSH
17652: LD_INT 29
17654: ST_TO_ADDR
// tech_time := tech_taurad ;
17655: LD_ADDR_VAR 0 13
17659: PUSH
17660: LD_INT 28
17662: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17663: LD_ADDR_VAR 0 11
17667: PUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 310
17677: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17678: LD_VAR 0 11
17682: PPUSH
17683: CALL_OW 247
17687: PUSH
17688: LD_INT 2
17690: EQUAL
17691: IFFALSE 17695
// exit ;
17693: GO 18205
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17695: LD_ADDR_VAR 0 8
17699: PUSH
17700: LD_INT 81
17702: PUSH
17703: LD_VAR 0 9
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 3
17714: PUSH
17715: LD_INT 21
17717: PUSH
17718: LD_INT 3
17720: PUSH
17721: EMPTY
17722: LIST
17723: LIST
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PPUSH
17733: CALL_OW 69
17737: ST_TO_ADDR
// if not tmp then
17738: LD_VAR 0 8
17742: NOT
17743: IFFALSE 17747
// exit ;
17745: GO 18205
// if in_unit then
17747: LD_VAR 0 11
17751: IFFALSE 17775
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17753: LD_ADDR_VAR 0 10
17757: PUSH
17758: LD_VAR 0 8
17762: PPUSH
17763: LD_VAR 0 11
17767: PPUSH
17768: CALL_OW 74
17772: ST_TO_ADDR
17773: GO 17795
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17775: LD_ADDR_VAR 0 10
17779: PUSH
17780: LD_VAR 0 8
17784: PPUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 74
17794: ST_TO_ADDR
// if not enemy then
17795: LD_VAR 0 10
17799: NOT
17800: IFFALSE 17804
// exit ;
17802: GO 18205
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17804: LD_VAR 0 11
17808: PUSH
17809: LD_VAR 0 11
17813: PPUSH
17814: LD_VAR 0 10
17818: PPUSH
17819: CALL_OW 296
17823: PUSH
17824: LD_INT 13
17826: GREATER
17827: AND
17828: PUSH
17829: LD_VAR 0 1
17833: PPUSH
17834: LD_VAR 0 10
17838: PPUSH
17839: CALL_OW 296
17843: PUSH
17844: LD_INT 12
17846: GREATER
17847: OR
17848: IFFALSE 17852
// exit ;
17850: GO 18205
// missile := [ 1 ] ;
17852: LD_ADDR_VAR 0 14
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: EMPTY
17861: LIST
17862: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17863: LD_VAR 0 9
17867: PPUSH
17868: LD_VAR 0 12
17872: PPUSH
17873: CALL_OW 325
17877: IFFALSE 17906
// missile := Replace ( missile , missile + 1 , 2 ) ;
17879: LD_ADDR_VAR 0 14
17883: PUSH
17884: LD_VAR 0 14
17888: PPUSH
17889: LD_VAR 0 14
17893: PUSH
17894: LD_INT 1
17896: PLUS
17897: PPUSH
17898: LD_INT 2
17900: PPUSH
17901: CALL_OW 1
17905: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17906: LD_VAR 0 9
17910: PPUSH
17911: LD_VAR 0 13
17915: PPUSH
17916: CALL_OW 325
17920: PUSH
17921: LD_VAR 0 10
17925: PPUSH
17926: CALL_OW 255
17930: PPUSH
17931: LD_VAR 0 13
17935: PPUSH
17936: CALL_OW 325
17940: NOT
17941: AND
17942: IFFALSE 17971
// missile := Replace ( missile , missile + 1 , 3 ) ;
17944: LD_ADDR_VAR 0 14
17948: PUSH
17949: LD_VAR 0 14
17953: PPUSH
17954: LD_VAR 0 14
17958: PUSH
17959: LD_INT 1
17961: PLUS
17962: PPUSH
17963: LD_INT 3
17965: PPUSH
17966: CALL_OW 1
17970: ST_TO_ADDR
// if missile < 2 then
17971: LD_VAR 0 14
17975: PUSH
17976: LD_INT 2
17978: LESS
17979: IFFALSE 17983
// exit ;
17981: GO 18205
// x := GetX ( enemy ) ;
17983: LD_ADDR_VAR 0 4
17987: PUSH
17988: LD_VAR 0 10
17992: PPUSH
17993: CALL_OW 250
17997: ST_TO_ADDR
// y := GetY ( enemy ) ;
17998: LD_ADDR_VAR 0 5
18002: PUSH
18003: LD_VAR 0 10
18007: PPUSH
18008: CALL_OW 251
18012: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18013: LD_ADDR_VAR 0 6
18017: PUSH
18018: LD_VAR 0 4
18022: PUSH
18023: LD_INT 1
18025: NEG
18026: PPUSH
18027: LD_INT 1
18029: PPUSH
18030: CALL_OW 12
18034: PLUS
18035: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18036: LD_ADDR_VAR 0 7
18040: PUSH
18041: LD_VAR 0 5
18045: PUSH
18046: LD_INT 1
18048: NEG
18049: PPUSH
18050: LD_INT 1
18052: PPUSH
18053: CALL_OW 12
18057: PLUS
18058: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18059: LD_VAR 0 6
18063: PPUSH
18064: LD_VAR 0 7
18068: PPUSH
18069: CALL_OW 488
18073: NOT
18074: IFFALSE 18096
// begin _x := x ;
18076: LD_ADDR_VAR 0 6
18080: PUSH
18081: LD_VAR 0 4
18085: ST_TO_ADDR
// _y := y ;
18086: LD_ADDR_VAR 0 7
18090: PUSH
18091: LD_VAR 0 5
18095: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18096: LD_ADDR_VAR 0 3
18100: PUSH
18101: LD_INT 1
18103: PPUSH
18104: LD_VAR 0 14
18108: PPUSH
18109: CALL_OW 12
18113: ST_TO_ADDR
// case i of 1 :
18114: LD_VAR 0 3
18118: PUSH
18119: LD_INT 1
18121: DOUBLE
18122: EQUAL
18123: IFTRUE 18127
18125: GO 18144
18127: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18128: LD_VAR 0 1
18132: PPUSH
18133: LD_VAR 0 10
18137: PPUSH
18138: CALL_OW 115
18142: GO 18205
18144: LD_INT 2
18146: DOUBLE
18147: EQUAL
18148: IFTRUE 18152
18150: GO 18174
18152: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18153: LD_VAR 0 1
18157: PPUSH
18158: LD_VAR 0 6
18162: PPUSH
18163: LD_VAR 0 7
18167: PPUSH
18168: CALL_OW 153
18172: GO 18205
18174: LD_INT 3
18176: DOUBLE
18177: EQUAL
18178: IFTRUE 18182
18180: GO 18204
18182: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18183: LD_VAR 0 1
18187: PPUSH
18188: LD_VAR 0 6
18192: PPUSH
18193: LD_VAR 0 7
18197: PPUSH
18198: CALL_OW 154
18202: GO 18205
18204: POP
// end ;
18205: LD_VAR 0 2
18209: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18210: LD_INT 0
18212: PPUSH
18213: PPUSH
18214: PPUSH
18215: PPUSH
18216: PPUSH
18217: PPUSH
// if not unit or not building then
18218: LD_VAR 0 1
18222: NOT
18223: PUSH
18224: LD_VAR 0 2
18228: NOT
18229: OR
18230: IFFALSE 18234
// exit ;
18232: GO 18392
// x := GetX ( building ) ;
18234: LD_ADDR_VAR 0 5
18238: PUSH
18239: LD_VAR 0 2
18243: PPUSH
18244: CALL_OW 250
18248: ST_TO_ADDR
// y := GetY ( building ) ;
18249: LD_ADDR_VAR 0 6
18253: PUSH
18254: LD_VAR 0 2
18258: PPUSH
18259: CALL_OW 251
18263: ST_TO_ADDR
// for i = 0 to 5 do
18264: LD_ADDR_VAR 0 4
18268: PUSH
18269: DOUBLE
18270: LD_INT 0
18272: DEC
18273: ST_TO_ADDR
18274: LD_INT 5
18276: PUSH
18277: FOR_TO
18278: IFFALSE 18390
// begin _x := ShiftX ( x , i , 3 ) ;
18280: LD_ADDR_VAR 0 7
18284: PUSH
18285: LD_VAR 0 5
18289: PPUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: LD_INT 3
18297: PPUSH
18298: CALL_OW 272
18302: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18303: LD_ADDR_VAR 0 8
18307: PUSH
18308: LD_VAR 0 6
18312: PPUSH
18313: LD_VAR 0 4
18317: PPUSH
18318: LD_INT 3
18320: PPUSH
18321: CALL_OW 273
18325: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18326: LD_VAR 0 7
18330: PPUSH
18331: LD_VAR 0 8
18335: PPUSH
18336: CALL_OW 488
18340: NOT
18341: IFFALSE 18345
// continue ;
18343: GO 18277
// if HexInfo ( _x , _y ) = 0 then
18345: LD_VAR 0 7
18349: PPUSH
18350: LD_VAR 0 8
18354: PPUSH
18355: CALL_OW 428
18359: PUSH
18360: LD_INT 0
18362: EQUAL
18363: IFFALSE 18388
// begin ComMoveXY ( unit , _x , _y ) ;
18365: LD_VAR 0 1
18369: PPUSH
18370: LD_VAR 0 7
18374: PPUSH
18375: LD_VAR 0 8
18379: PPUSH
18380: CALL_OW 111
// exit ;
18384: POP
18385: POP
18386: GO 18392
// end ; end ;
18388: GO 18277
18390: POP
18391: POP
// end ;
18392: LD_VAR 0 3
18396: RET
// export function ScanBase ( side , base_area ) ; begin
18397: LD_INT 0
18399: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18400: LD_ADDR_VAR 0 3
18404: PUSH
18405: LD_VAR 0 2
18409: PPUSH
18410: LD_INT 81
18412: PUSH
18413: LD_VAR 0 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PPUSH
18422: CALL_OW 70
18426: ST_TO_ADDR
// end ;
18427: LD_VAR 0 3
18431: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18432: LD_INT 0
18434: PPUSH
18435: PPUSH
18436: PPUSH
18437: PPUSH
// result := false ;
18438: LD_ADDR_VAR 0 2
18442: PUSH
18443: LD_INT 0
18445: ST_TO_ADDR
// side := GetSide ( unit ) ;
18446: LD_ADDR_VAR 0 3
18450: PUSH
18451: LD_VAR 0 1
18455: PPUSH
18456: CALL_OW 255
18460: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18461: LD_ADDR_VAR 0 4
18465: PUSH
18466: LD_VAR 0 1
18470: PPUSH
18471: CALL_OW 248
18475: ST_TO_ADDR
// case nat of 1 :
18476: LD_VAR 0 4
18480: PUSH
18481: LD_INT 1
18483: DOUBLE
18484: EQUAL
18485: IFTRUE 18489
18487: GO 18500
18489: POP
// tech := tech_lassight ; 2 :
18490: LD_ADDR_VAR 0 5
18494: PUSH
18495: LD_INT 12
18497: ST_TO_ADDR
18498: GO 18539
18500: LD_INT 2
18502: DOUBLE
18503: EQUAL
18504: IFTRUE 18508
18506: GO 18519
18508: POP
// tech := tech_mortar ; 3 :
18509: LD_ADDR_VAR 0 5
18513: PUSH
18514: LD_INT 41
18516: ST_TO_ADDR
18517: GO 18539
18519: LD_INT 3
18521: DOUBLE
18522: EQUAL
18523: IFTRUE 18527
18525: GO 18538
18527: POP
// tech := tech_bazooka ; end ;
18528: LD_ADDR_VAR 0 5
18532: PUSH
18533: LD_INT 44
18535: ST_TO_ADDR
18536: GO 18539
18538: POP
// if Researched ( side , tech ) then
18539: LD_VAR 0 3
18543: PPUSH
18544: LD_VAR 0 5
18548: PPUSH
18549: CALL_OW 325
18553: IFFALSE 18580
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18555: LD_ADDR_VAR 0 2
18559: PUSH
18560: LD_INT 5
18562: PUSH
18563: LD_INT 8
18565: PUSH
18566: LD_INT 9
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: PUSH
18574: LD_VAR 0 4
18578: ARRAY
18579: ST_TO_ADDR
// end ;
18580: LD_VAR 0 2
18584: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18585: LD_INT 0
18587: PPUSH
18588: PPUSH
18589: PPUSH
// if not mines then
18590: LD_VAR 0 2
18594: NOT
18595: IFFALSE 18599
// exit ;
18597: GO 18743
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18599: LD_ADDR_VAR 0 5
18603: PUSH
18604: LD_INT 81
18606: PUSH
18607: LD_VAR 0 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 3
18618: PUSH
18619: LD_INT 21
18621: PUSH
18622: LD_INT 3
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 69
18641: ST_TO_ADDR
// for i in mines do
18642: LD_ADDR_VAR 0 4
18646: PUSH
18647: LD_VAR 0 2
18651: PUSH
18652: FOR_IN
18653: IFFALSE 18741
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18655: LD_VAR 0 4
18659: PUSH
18660: LD_INT 1
18662: ARRAY
18663: PPUSH
18664: LD_VAR 0 4
18668: PUSH
18669: LD_INT 2
18671: ARRAY
18672: PPUSH
18673: CALL_OW 458
18677: NOT
18678: IFFALSE 18682
// continue ;
18680: GO 18652
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18682: LD_VAR 0 4
18686: PUSH
18687: LD_INT 1
18689: ARRAY
18690: PPUSH
18691: LD_VAR 0 4
18695: PUSH
18696: LD_INT 2
18698: ARRAY
18699: PPUSH
18700: CALL_OW 428
18704: PUSH
18705: LD_VAR 0 5
18709: IN
18710: IFFALSE 18739
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18712: LD_VAR 0 4
18716: PUSH
18717: LD_INT 1
18719: ARRAY
18720: PPUSH
18721: LD_VAR 0 4
18725: PUSH
18726: LD_INT 2
18728: ARRAY
18729: PPUSH
18730: LD_VAR 0 1
18734: PPUSH
18735: CALL_OW 456
// end ;
18739: GO 18652
18741: POP
18742: POP
// end ;
18743: LD_VAR 0 3
18747: RET
// export function Count ( array ) ; begin
18748: LD_INT 0
18750: PPUSH
// result := array + 0 ;
18751: LD_ADDR_VAR 0 2
18755: PUSH
18756: LD_VAR 0 1
18760: PUSH
18761: LD_INT 0
18763: PLUS
18764: ST_TO_ADDR
// end ;
18765: LD_VAR 0 2
18769: RET
// export function IsEmpty ( building ) ; begin
18770: LD_INT 0
18772: PPUSH
// if not building then
18773: LD_VAR 0 1
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18825
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18782: LD_ADDR_VAR 0 2
18786: PUSH
18787: LD_VAR 0 1
18791: PUSH
18792: LD_INT 22
18794: PUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 255
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 58
18811: PUSH
18812: EMPTY
18813: LIST
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PPUSH
18819: CALL_OW 69
18823: IN
18824: ST_TO_ADDR
// end ;
18825: LD_VAR 0 2
18829: RET
// export function IsNotFull ( building ) ; var places ; begin
18830: LD_INT 0
18832: PPUSH
18833: PPUSH
// if not building then
18834: LD_VAR 0 1
18838: NOT
18839: IFFALSE 18843
// exit ;
18841: GO 18871
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 62
18858: PUSH
18859: EMPTY
18860: LIST
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PPUSH
18866: CALL_OW 72
18870: ST_TO_ADDR
// end ;
18871: LD_VAR 0 2
18875: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18876: LD_INT 0
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
// tmp := [ ] ;
18882: LD_ADDR_VAR 0 3
18886: PUSH
18887: EMPTY
18888: ST_TO_ADDR
// list := [ ] ;
18889: LD_ADDR_VAR 0 5
18893: PUSH
18894: EMPTY
18895: ST_TO_ADDR
// for i = 16 to 25 do
18896: LD_ADDR_VAR 0 4
18900: PUSH
18901: DOUBLE
18902: LD_INT 16
18904: DEC
18905: ST_TO_ADDR
18906: LD_INT 25
18908: PUSH
18909: FOR_TO
18910: IFFALSE 18983
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: LD_VAR 0 3
18921: PUSH
18922: LD_INT 22
18924: PUSH
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 255
18934: PUSH
18935: EMPTY
18936: LIST
18937: LIST
18938: PUSH
18939: LD_INT 91
18941: PUSH
18942: LD_VAR 0 1
18946: PUSH
18947: LD_INT 6
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 30
18957: PUSH
18958: LD_VAR 0 4
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: PPUSH
18975: CALL_OW 69
18979: ADD
18980: ST_TO_ADDR
18981: GO 18909
18983: POP
18984: POP
// for i = 1 to tmp do
18985: LD_ADDR_VAR 0 4
18989: PUSH
18990: DOUBLE
18991: LD_INT 1
18993: DEC
18994: ST_TO_ADDR
18995: LD_VAR 0 3
18999: PUSH
19000: FOR_TO
19001: IFFALSE 19089
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19003: LD_ADDR_VAR 0 5
19007: PUSH
19008: LD_VAR 0 5
19012: PUSH
19013: LD_VAR 0 3
19017: PUSH
19018: LD_VAR 0 4
19022: ARRAY
19023: PPUSH
19024: CALL_OW 266
19028: PUSH
19029: LD_VAR 0 3
19033: PUSH
19034: LD_VAR 0 4
19038: ARRAY
19039: PPUSH
19040: CALL_OW 250
19044: PUSH
19045: LD_VAR 0 3
19049: PUSH
19050: LD_VAR 0 4
19054: ARRAY
19055: PPUSH
19056: CALL_OW 251
19060: PUSH
19061: LD_VAR 0 3
19065: PUSH
19066: LD_VAR 0 4
19070: ARRAY
19071: PPUSH
19072: CALL_OW 254
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: ADD
19086: ST_TO_ADDR
19087: GO 19000
19089: POP
19090: POP
// result := list ;
19091: LD_ADDR_VAR 0 2
19095: PUSH
19096: LD_VAR 0 5
19100: ST_TO_ADDR
// end ;
19101: LD_VAR 0 2
19105: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
19111: PPUSH
19112: PPUSH
19113: PPUSH
19114: PPUSH
// if not factory then
19115: LD_VAR 0 1
19119: NOT
19120: IFFALSE 19124
// exit ;
19122: GO 19717
// if control = control_apeman then
19124: LD_VAR 0 4
19128: PUSH
19129: LD_INT 5
19131: EQUAL
19132: IFFALSE 19241
// begin tmp := UnitsInside ( factory ) ;
19134: LD_ADDR_VAR 0 8
19138: PUSH
19139: LD_VAR 0 1
19143: PPUSH
19144: CALL_OW 313
19148: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19149: LD_VAR 0 8
19153: PPUSH
19154: LD_INT 25
19156: PUSH
19157: LD_INT 12
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PPUSH
19164: CALL_OW 72
19168: NOT
19169: IFFALSE 19179
// control := control_manual ;
19171: LD_ADDR_VAR 0 4
19175: PUSH
19176: LD_INT 1
19178: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19179: LD_ADDR_VAR 0 8
19183: PUSH
19184: LD_VAR 0 1
19188: PPUSH
19189: CALL 18876 0 1
19193: ST_TO_ADDR
// if tmp then
19194: LD_VAR 0 8
19198: IFFALSE 19241
// begin for i in tmp do
19200: LD_ADDR_VAR 0 7
19204: PUSH
19205: LD_VAR 0 8
19209: PUSH
19210: FOR_IN
19211: IFFALSE 19239
// if i [ 1 ] = b_ext_radio then
19213: LD_VAR 0 7
19217: PUSH
19218: LD_INT 1
19220: ARRAY
19221: PUSH
19222: LD_INT 22
19224: EQUAL
19225: IFFALSE 19237
// begin control := control_remote ;
19227: LD_ADDR_VAR 0 4
19231: PUSH
19232: LD_INT 2
19234: ST_TO_ADDR
// break ;
19235: GO 19239
// end ;
19237: GO 19210
19239: POP
19240: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19241: LD_VAR 0 1
19245: PPUSH
19246: LD_VAR 0 2
19250: PPUSH
19251: LD_VAR 0 3
19255: PPUSH
19256: LD_VAR 0 4
19260: PPUSH
19261: LD_VAR 0 5
19265: PPUSH
19266: CALL_OW 448
19270: IFFALSE 19305
// begin result := [ chassis , engine , control , weapon ] ;
19272: LD_ADDR_VAR 0 6
19276: PUSH
19277: LD_VAR 0 2
19281: PUSH
19282: LD_VAR 0 3
19286: PUSH
19287: LD_VAR 0 4
19291: PUSH
19292: LD_VAR 0 5
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: ST_TO_ADDR
// exit ;
19303: GO 19717
// end ; _chassis := AvailableChassisList ( factory ) ;
19305: LD_ADDR_VAR 0 9
19309: PUSH
19310: LD_VAR 0 1
19314: PPUSH
19315: CALL_OW 475
19319: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19320: LD_ADDR_VAR 0 11
19324: PUSH
19325: LD_VAR 0 1
19329: PPUSH
19330: CALL_OW 476
19334: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19335: LD_ADDR_VAR 0 12
19339: PUSH
19340: LD_VAR 0 1
19344: PPUSH
19345: CALL_OW 477
19349: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19350: LD_ADDR_VAR 0 10
19354: PUSH
19355: LD_VAR 0 1
19359: PPUSH
19360: CALL_OW 478
19364: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19365: LD_VAR 0 9
19369: NOT
19370: PUSH
19371: LD_VAR 0 11
19375: NOT
19376: OR
19377: PUSH
19378: LD_VAR 0 12
19382: NOT
19383: OR
19384: PUSH
19385: LD_VAR 0 10
19389: NOT
19390: OR
19391: IFFALSE 19426
// begin result := [ chassis , engine , control , weapon ] ;
19393: LD_ADDR_VAR 0 6
19397: PUSH
19398: LD_VAR 0 2
19402: PUSH
19403: LD_VAR 0 3
19407: PUSH
19408: LD_VAR 0 4
19412: PUSH
19413: LD_VAR 0 5
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: ST_TO_ADDR
// exit ;
19424: GO 19717
// end ; if not chassis in _chassis then
19426: LD_VAR 0 2
19430: PUSH
19431: LD_VAR 0 9
19435: IN
19436: NOT
19437: IFFALSE 19463
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19439: LD_ADDR_VAR 0 2
19443: PUSH
19444: LD_VAR 0 9
19448: PUSH
19449: LD_INT 1
19451: PPUSH
19452: LD_VAR 0 9
19456: PPUSH
19457: CALL_OW 12
19461: ARRAY
19462: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19463: LD_VAR 0 2
19467: PPUSH
19468: LD_VAR 0 3
19472: PPUSH
19473: CALL 19722 0 2
19477: NOT
19478: IFFALSE 19537
// repeat engine := _engine [ 1 ] ;
19480: LD_ADDR_VAR 0 3
19484: PUSH
19485: LD_VAR 0 11
19489: PUSH
19490: LD_INT 1
19492: ARRAY
19493: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19494: LD_ADDR_VAR 0 11
19498: PUSH
19499: LD_VAR 0 11
19503: PPUSH
19504: LD_INT 1
19506: PPUSH
19507: CALL_OW 3
19511: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19512: LD_VAR 0 2
19516: PPUSH
19517: LD_VAR 0 3
19521: PPUSH
19522: CALL 19722 0 2
19526: PUSH
19527: LD_VAR 0 11
19531: PUSH
19532: EMPTY
19533: EQUAL
19534: OR
19535: IFFALSE 19480
// if not control in _control then
19537: LD_VAR 0 4
19541: PUSH
19542: LD_VAR 0 12
19546: IN
19547: NOT
19548: IFFALSE 19574
// control := _control [ rand ( 1 , _control ) ] ;
19550: LD_ADDR_VAR 0 4
19554: PUSH
19555: LD_VAR 0 12
19559: PUSH
19560: LD_INT 1
19562: PPUSH
19563: LD_VAR 0 12
19567: PPUSH
19568: CALL_OW 12
19572: ARRAY
19573: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19574: LD_VAR 0 2
19578: PPUSH
19579: LD_VAR 0 5
19583: PPUSH
19584: CALL 19942 0 2
19588: NOT
19589: IFFALSE 19648
// repeat weapon := _weapon [ 1 ] ;
19591: LD_ADDR_VAR 0 5
19595: PUSH
19596: LD_VAR 0 10
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19605: LD_ADDR_VAR 0 10
19609: PUSH
19610: LD_VAR 0 10
19614: PPUSH
19615: LD_INT 1
19617: PPUSH
19618: CALL_OW 3
19622: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_VAR 0 5
19632: PPUSH
19633: CALL 19942 0 2
19637: PUSH
19638: LD_VAR 0 10
19642: PUSH
19643: EMPTY
19644: EQUAL
19645: OR
19646: IFFALSE 19591
// result := [ ] ;
19648: LD_ADDR_VAR 0 6
19652: PUSH
19653: EMPTY
19654: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19655: LD_VAR 0 1
19659: PPUSH
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_VAR 0 3
19669: PPUSH
19670: LD_VAR 0 4
19674: PPUSH
19675: LD_VAR 0 5
19679: PPUSH
19680: CALL_OW 448
19684: IFFALSE 19717
// result := [ chassis , engine , control , weapon ] ;
19686: LD_ADDR_VAR 0 6
19690: PUSH
19691: LD_VAR 0 2
19695: PUSH
19696: LD_VAR 0 3
19700: PUSH
19701: LD_VAR 0 4
19705: PUSH
19706: LD_VAR 0 5
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: ST_TO_ADDR
// end ;
19717: LD_VAR 0 6
19721: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19722: LD_INT 0
19724: PPUSH
// if not chassis or not engine then
19725: LD_VAR 0 1
19729: NOT
19730: PUSH
19731: LD_VAR 0 2
19735: NOT
19736: OR
19737: IFFALSE 19741
// exit ;
19739: GO 19937
// case engine of engine_solar :
19741: LD_VAR 0 2
19745: PUSH
19746: LD_INT 2
19748: DOUBLE
19749: EQUAL
19750: IFTRUE 19754
19752: GO 19792
19754: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19755: LD_ADDR_VAR 0 3
19759: PUSH
19760: LD_INT 11
19762: PUSH
19763: LD_INT 12
19765: PUSH
19766: LD_INT 13
19768: PUSH
19769: LD_INT 14
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 3
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: ST_TO_ADDR
19790: GO 19921
19792: LD_INT 1
19794: DOUBLE
19795: EQUAL
19796: IFTRUE 19800
19798: GO 19862
19800: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19801: LD_ADDR_VAR 0 3
19805: PUSH
19806: LD_INT 11
19808: PUSH
19809: LD_INT 12
19811: PUSH
19812: LD_INT 13
19814: PUSH
19815: LD_INT 14
19817: PUSH
19818: LD_INT 1
19820: PUSH
19821: LD_INT 2
19823: PUSH
19824: LD_INT 3
19826: PUSH
19827: LD_INT 4
19829: PUSH
19830: LD_INT 5
19832: PUSH
19833: LD_INT 21
19835: PUSH
19836: LD_INT 23
19838: PUSH
19839: LD_INT 22
19841: PUSH
19842: LD_INT 24
19844: PUSH
19845: EMPTY
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: ST_TO_ADDR
19860: GO 19921
19862: LD_INT 3
19864: DOUBLE
19865: EQUAL
19866: IFTRUE 19870
19868: GO 19920
19870: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19871: LD_ADDR_VAR 0 3
19875: PUSH
19876: LD_INT 13
19878: PUSH
19879: LD_INT 14
19881: PUSH
19882: LD_INT 2
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: LD_INT 4
19890: PUSH
19891: LD_INT 5
19893: PUSH
19894: LD_INT 21
19896: PUSH
19897: LD_INT 22
19899: PUSH
19900: LD_INT 23
19902: PUSH
19903: LD_INT 24
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: ST_TO_ADDR
19918: GO 19921
19920: POP
// result := ( chassis in result ) ;
19921: LD_ADDR_VAR 0 3
19925: PUSH
19926: LD_VAR 0 1
19930: PUSH
19931: LD_VAR 0 3
19935: IN
19936: ST_TO_ADDR
// end ;
19937: LD_VAR 0 3
19941: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19942: LD_INT 0
19944: PPUSH
// if not chassis or not weapon then
19945: LD_VAR 0 1
19949: NOT
19950: PUSH
19951: LD_VAR 0 2
19955: NOT
19956: OR
19957: IFFALSE 19961
// exit ;
19959: GO 21021
// case weapon of us_machine_gun :
19961: LD_VAR 0 2
19965: PUSH
19966: LD_INT 2
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 20004
19974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19975: LD_ADDR_VAR 0 3
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 2
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: LD_INT 4
19991: PUSH
19992: LD_INT 5
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: ST_TO_ADDR
20002: GO 21005
20004: LD_INT 3
20006: DOUBLE
20007: EQUAL
20008: IFTRUE 20012
20010: GO 20042
20012: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20013: LD_ADDR_VAR 0 3
20017: PUSH
20018: LD_INT 1
20020: PUSH
20021: LD_INT 2
20023: PUSH
20024: LD_INT 3
20026: PUSH
20027: LD_INT 4
20029: PUSH
20030: LD_INT 5
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: ST_TO_ADDR
20040: GO 21005
20042: LD_INT 11
20044: DOUBLE
20045: EQUAL
20046: IFTRUE 20050
20048: GO 20080
20050: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20051: LD_ADDR_VAR 0 3
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: LD_INT 3
20064: PUSH
20065: LD_INT 4
20067: PUSH
20068: LD_INT 5
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: ST_TO_ADDR
20078: GO 21005
20080: LD_INT 4
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20114
20088: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: LD_INT 2
20096: PUSH
20097: LD_INT 3
20099: PUSH
20100: LD_INT 4
20102: PUSH
20103: LD_INT 5
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: ST_TO_ADDR
20112: GO 21005
20114: LD_INT 5
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20148
20122: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20123: LD_ADDR_VAR 0 3
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: LD_INT 3
20133: PUSH
20134: LD_INT 4
20136: PUSH
20137: LD_INT 5
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
20146: GO 21005
20148: LD_INT 9
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20182
20156: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20157: LD_ADDR_VAR 0 3
20161: PUSH
20162: LD_INT 2
20164: PUSH
20165: LD_INT 3
20167: PUSH
20168: LD_INT 4
20170: PUSH
20171: LD_INT 5
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: ST_TO_ADDR
20180: GO 21005
20182: LD_INT 7
20184: DOUBLE
20185: EQUAL
20186: IFTRUE 20190
20188: GO 20216
20190: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20191: LD_ADDR_VAR 0 3
20195: PUSH
20196: LD_INT 2
20198: PUSH
20199: LD_INT 3
20201: PUSH
20202: LD_INT 4
20204: PUSH
20205: LD_INT 5
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: ST_TO_ADDR
20214: GO 21005
20216: LD_INT 12
20218: DOUBLE
20219: EQUAL
20220: IFTRUE 20224
20222: GO 20250
20224: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20225: LD_ADDR_VAR 0 3
20229: PUSH
20230: LD_INT 2
20232: PUSH
20233: LD_INT 3
20235: PUSH
20236: LD_INT 4
20238: PUSH
20239: LD_INT 5
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: ST_TO_ADDR
20248: GO 21005
20250: LD_INT 13
20252: DOUBLE
20253: EQUAL
20254: IFTRUE 20258
20256: GO 20284
20258: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20259: LD_ADDR_VAR 0 3
20263: PUSH
20264: LD_INT 2
20266: PUSH
20267: LD_INT 3
20269: PUSH
20270: LD_INT 4
20272: PUSH
20273: LD_INT 5
20275: PUSH
20276: EMPTY
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: ST_TO_ADDR
20282: GO 21005
20284: LD_INT 14
20286: DOUBLE
20287: EQUAL
20288: IFTRUE 20292
20290: GO 20310
20292: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20293: LD_ADDR_VAR 0 3
20297: PUSH
20298: LD_INT 4
20300: PUSH
20301: LD_INT 5
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: ST_TO_ADDR
20308: GO 21005
20310: LD_INT 6
20312: DOUBLE
20313: EQUAL
20314: IFTRUE 20318
20316: GO 20336
20318: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20319: LD_ADDR_VAR 0 3
20323: PUSH
20324: LD_INT 4
20326: PUSH
20327: LD_INT 5
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: ST_TO_ADDR
20334: GO 21005
20336: LD_INT 10
20338: DOUBLE
20339: EQUAL
20340: IFTRUE 20344
20342: GO 20362
20344: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20345: LD_ADDR_VAR 0 3
20349: PUSH
20350: LD_INT 4
20352: PUSH
20353: LD_INT 5
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
20360: GO 21005
20362: LD_INT 22
20364: DOUBLE
20365: EQUAL
20366: IFTRUE 20370
20368: GO 20396
20370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20371: LD_ADDR_VAR 0 3
20375: PUSH
20376: LD_INT 11
20378: PUSH
20379: LD_INT 12
20381: PUSH
20382: LD_INT 13
20384: PUSH
20385: LD_INT 14
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: ST_TO_ADDR
20394: GO 21005
20396: LD_INT 23
20398: DOUBLE
20399: EQUAL
20400: IFTRUE 20404
20402: GO 20430
20404: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20405: LD_ADDR_VAR 0 3
20409: PUSH
20410: LD_INT 11
20412: PUSH
20413: LD_INT 12
20415: PUSH
20416: LD_INT 13
20418: PUSH
20419: LD_INT 14
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: ST_TO_ADDR
20428: GO 21005
20430: LD_INT 24
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20464
20438: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20439: LD_ADDR_VAR 0 3
20443: PUSH
20444: LD_INT 11
20446: PUSH
20447: LD_INT 12
20449: PUSH
20450: LD_INT 13
20452: PUSH
20453: LD_INT 14
20455: PUSH
20456: EMPTY
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: ST_TO_ADDR
20462: GO 21005
20464: LD_INT 30
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20498
20472: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20473: LD_ADDR_VAR 0 3
20477: PUSH
20478: LD_INT 11
20480: PUSH
20481: LD_INT 12
20483: PUSH
20484: LD_INT 13
20486: PUSH
20487: LD_INT 14
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: ST_TO_ADDR
20496: GO 21005
20498: LD_INT 25
20500: DOUBLE
20501: EQUAL
20502: IFTRUE 20506
20504: GO 20524
20506: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20507: LD_ADDR_VAR 0 3
20511: PUSH
20512: LD_INT 13
20514: PUSH
20515: LD_INT 14
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: ST_TO_ADDR
20522: GO 21005
20524: LD_INT 27
20526: DOUBLE
20527: EQUAL
20528: IFTRUE 20532
20530: GO 20550
20532: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20533: LD_ADDR_VAR 0 3
20537: PUSH
20538: LD_INT 13
20540: PUSH
20541: LD_INT 14
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: ST_TO_ADDR
20548: GO 21005
20550: LD_INT 92
20552: DOUBLE
20553: EQUAL
20554: IFTRUE 20558
20556: GO 20584
20558: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20559: LD_ADDR_VAR 0 3
20563: PUSH
20564: LD_INT 11
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: LD_INT 13
20572: PUSH
20573: LD_INT 14
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: ST_TO_ADDR
20582: GO 21005
20584: LD_INT 28
20586: DOUBLE
20587: EQUAL
20588: IFTRUE 20592
20590: GO 20610
20592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20593: LD_ADDR_VAR 0 3
20597: PUSH
20598: LD_INT 13
20600: PUSH
20601: LD_INT 14
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: ST_TO_ADDR
20608: GO 21005
20610: LD_INT 29
20612: DOUBLE
20613: EQUAL
20614: IFTRUE 20618
20616: GO 20636
20618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20619: LD_ADDR_VAR 0 3
20623: PUSH
20624: LD_INT 13
20626: PUSH
20627: LD_INT 14
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: ST_TO_ADDR
20634: GO 21005
20636: LD_INT 31
20638: DOUBLE
20639: EQUAL
20640: IFTRUE 20644
20642: GO 20662
20644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20645: LD_ADDR_VAR 0 3
20649: PUSH
20650: LD_INT 13
20652: PUSH
20653: LD_INT 14
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: ST_TO_ADDR
20660: GO 21005
20662: LD_INT 26
20664: DOUBLE
20665: EQUAL
20666: IFTRUE 20670
20668: GO 20688
20670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20671: LD_ADDR_VAR 0 3
20675: PUSH
20676: LD_INT 13
20678: PUSH
20679: LD_INT 14
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: ST_TO_ADDR
20686: GO 21005
20688: LD_INT 42
20690: DOUBLE
20691: EQUAL
20692: IFTRUE 20696
20694: GO 20722
20696: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20697: LD_ADDR_VAR 0 3
20701: PUSH
20702: LD_INT 21
20704: PUSH
20705: LD_INT 22
20707: PUSH
20708: LD_INT 23
20710: PUSH
20711: LD_INT 24
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: ST_TO_ADDR
20720: GO 21005
20722: LD_INT 43
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20756
20730: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20731: LD_ADDR_VAR 0 3
20735: PUSH
20736: LD_INT 21
20738: PUSH
20739: LD_INT 22
20741: PUSH
20742: LD_INT 23
20744: PUSH
20745: LD_INT 24
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: ST_TO_ADDR
20754: GO 21005
20756: LD_INT 44
20758: DOUBLE
20759: EQUAL
20760: IFTRUE 20764
20762: GO 20790
20764: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20765: LD_ADDR_VAR 0 3
20769: PUSH
20770: LD_INT 21
20772: PUSH
20773: LD_INT 22
20775: PUSH
20776: LD_INT 23
20778: PUSH
20779: LD_INT 24
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: ST_TO_ADDR
20788: GO 21005
20790: LD_INT 45
20792: DOUBLE
20793: EQUAL
20794: IFTRUE 20798
20796: GO 20824
20798: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20799: LD_ADDR_VAR 0 3
20803: PUSH
20804: LD_INT 21
20806: PUSH
20807: LD_INT 22
20809: PUSH
20810: LD_INT 23
20812: PUSH
20813: LD_INT 24
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: ST_TO_ADDR
20822: GO 21005
20824: LD_INT 49
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20858
20832: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20833: LD_ADDR_VAR 0 3
20837: PUSH
20838: LD_INT 21
20840: PUSH
20841: LD_INT 22
20843: PUSH
20844: LD_INT 23
20846: PUSH
20847: LD_INT 24
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: ST_TO_ADDR
20856: GO 21005
20858: LD_INT 51
20860: DOUBLE
20861: EQUAL
20862: IFTRUE 20866
20864: GO 20892
20866: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20867: LD_ADDR_VAR 0 3
20871: PUSH
20872: LD_INT 21
20874: PUSH
20875: LD_INT 22
20877: PUSH
20878: LD_INT 23
20880: PUSH
20881: LD_INT 24
20883: PUSH
20884: EMPTY
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: ST_TO_ADDR
20890: GO 21005
20892: LD_INT 52
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20926
20900: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_INT 21
20908: PUSH
20909: LD_INT 22
20911: PUSH
20912: LD_INT 23
20914: PUSH
20915: LD_INT 24
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: ST_TO_ADDR
20924: GO 21005
20926: LD_INT 53
20928: DOUBLE
20929: EQUAL
20930: IFTRUE 20934
20932: GO 20952
20934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: LD_INT 23
20942: PUSH
20943: LD_INT 24
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: ST_TO_ADDR
20950: GO 21005
20952: LD_INT 46
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20978
20960: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20961: LD_ADDR_VAR 0 3
20965: PUSH
20966: LD_INT 23
20968: PUSH
20969: LD_INT 24
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: ST_TO_ADDR
20976: GO 21005
20978: LD_INT 47
20980: DOUBLE
20981: EQUAL
20982: IFTRUE 20986
20984: GO 21004
20986: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20987: LD_ADDR_VAR 0 3
20991: PUSH
20992: LD_INT 23
20994: PUSH
20995: LD_INT 24
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: ST_TO_ADDR
21002: GO 21005
21004: POP
// result := ( chassis in result ) ;
21005: LD_ADDR_VAR 0 3
21009: PUSH
21010: LD_VAR 0 1
21014: PUSH
21015: LD_VAR 0 3
21019: IN
21020: ST_TO_ADDR
// end ;
21021: LD_VAR 0 3
21025: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
// result := array ;
21035: LD_ADDR_VAR 0 5
21039: PUSH
21040: LD_VAR 0 1
21044: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21045: LD_VAR 0 1
21049: NOT
21050: PUSH
21051: LD_VAR 0 2
21055: NOT
21056: OR
21057: PUSH
21058: LD_VAR 0 3
21062: NOT
21063: OR
21064: PUSH
21065: LD_VAR 0 2
21069: PUSH
21070: LD_VAR 0 1
21074: GREATER
21075: OR
21076: PUSH
21077: LD_VAR 0 3
21081: PUSH
21082: LD_VAR 0 1
21086: GREATER
21087: OR
21088: IFFALSE 21092
// exit ;
21090: GO 21388
// if direction then
21092: LD_VAR 0 4
21096: IFFALSE 21160
// begin d := 1 ;
21098: LD_ADDR_VAR 0 9
21102: PUSH
21103: LD_INT 1
21105: ST_TO_ADDR
// if i_from > i_to then
21106: LD_VAR 0 2
21110: PUSH
21111: LD_VAR 0 3
21115: GREATER
21116: IFFALSE 21142
// length := ( array - i_from ) + i_to else
21118: LD_ADDR_VAR 0 11
21122: PUSH
21123: LD_VAR 0 1
21127: PUSH
21128: LD_VAR 0 2
21132: MINUS
21133: PUSH
21134: LD_VAR 0 3
21138: PLUS
21139: ST_TO_ADDR
21140: GO 21158
// length := i_to - i_from ;
21142: LD_ADDR_VAR 0 11
21146: PUSH
21147: LD_VAR 0 3
21151: PUSH
21152: LD_VAR 0 2
21156: MINUS
21157: ST_TO_ADDR
// end else
21158: GO 21221
// begin d := - 1 ;
21160: LD_ADDR_VAR 0 9
21164: PUSH
21165: LD_INT 1
21167: NEG
21168: ST_TO_ADDR
// if i_from > i_to then
21169: LD_VAR 0 2
21173: PUSH
21174: LD_VAR 0 3
21178: GREATER
21179: IFFALSE 21199
// length := i_from - i_to else
21181: LD_ADDR_VAR 0 11
21185: PUSH
21186: LD_VAR 0 2
21190: PUSH
21191: LD_VAR 0 3
21195: MINUS
21196: ST_TO_ADDR
21197: GO 21221
// length := ( array - i_to ) + i_from ;
21199: LD_ADDR_VAR 0 11
21203: PUSH
21204: LD_VAR 0 1
21208: PUSH
21209: LD_VAR 0 3
21213: MINUS
21214: PUSH
21215: LD_VAR 0 2
21219: PLUS
21220: ST_TO_ADDR
// end ; if not length then
21221: LD_VAR 0 11
21225: NOT
21226: IFFALSE 21230
// exit ;
21228: GO 21388
// tmp := array ;
21230: LD_ADDR_VAR 0 10
21234: PUSH
21235: LD_VAR 0 1
21239: ST_TO_ADDR
// for i = 1 to length do
21240: LD_ADDR_VAR 0 6
21244: PUSH
21245: DOUBLE
21246: LD_INT 1
21248: DEC
21249: ST_TO_ADDR
21250: LD_VAR 0 11
21254: PUSH
21255: FOR_TO
21256: IFFALSE 21376
// begin for j = 1 to array do
21258: LD_ADDR_VAR 0 7
21262: PUSH
21263: DOUBLE
21264: LD_INT 1
21266: DEC
21267: ST_TO_ADDR
21268: LD_VAR 0 1
21272: PUSH
21273: FOR_TO
21274: IFFALSE 21362
// begin k := j + d ;
21276: LD_ADDR_VAR 0 8
21280: PUSH
21281: LD_VAR 0 7
21285: PUSH
21286: LD_VAR 0 9
21290: PLUS
21291: ST_TO_ADDR
// if k > array then
21292: LD_VAR 0 8
21296: PUSH
21297: LD_VAR 0 1
21301: GREATER
21302: IFFALSE 21312
// k := 1 ;
21304: LD_ADDR_VAR 0 8
21308: PUSH
21309: LD_INT 1
21311: ST_TO_ADDR
// if not k then
21312: LD_VAR 0 8
21316: NOT
21317: IFFALSE 21329
// k := array ;
21319: LD_ADDR_VAR 0 8
21323: PUSH
21324: LD_VAR 0 1
21328: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21329: LD_ADDR_VAR 0 10
21333: PUSH
21334: LD_VAR 0 10
21338: PPUSH
21339: LD_VAR 0 8
21343: PPUSH
21344: LD_VAR 0 1
21348: PUSH
21349: LD_VAR 0 7
21353: ARRAY
21354: PPUSH
21355: CALL_OW 1
21359: ST_TO_ADDR
// end ;
21360: GO 21273
21362: POP
21363: POP
// array := tmp ;
21364: LD_ADDR_VAR 0 1
21368: PUSH
21369: LD_VAR 0 10
21373: ST_TO_ADDR
// end ;
21374: GO 21255
21376: POP
21377: POP
// result := array ;
21378: LD_ADDR_VAR 0 5
21382: PUSH
21383: LD_VAR 0 1
21387: ST_TO_ADDR
// end ;
21388: LD_VAR 0 5
21392: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21393: LD_INT 0
21395: PPUSH
21396: PPUSH
// result := 0 ;
21397: LD_ADDR_VAR 0 3
21401: PUSH
21402: LD_INT 0
21404: ST_TO_ADDR
// if not array or not value in array then
21405: LD_VAR 0 1
21409: NOT
21410: PUSH
21411: LD_VAR 0 2
21415: PUSH
21416: LD_VAR 0 1
21420: IN
21421: NOT
21422: OR
21423: IFFALSE 21427
// exit ;
21425: GO 21481
// for i = 1 to array do
21427: LD_ADDR_VAR 0 4
21431: PUSH
21432: DOUBLE
21433: LD_INT 1
21435: DEC
21436: ST_TO_ADDR
21437: LD_VAR 0 1
21441: PUSH
21442: FOR_TO
21443: IFFALSE 21479
// if value = array [ i ] then
21445: LD_VAR 0 2
21449: PUSH
21450: LD_VAR 0 1
21454: PUSH
21455: LD_VAR 0 4
21459: ARRAY
21460: EQUAL
21461: IFFALSE 21477
// begin result := i ;
21463: LD_ADDR_VAR 0 3
21467: PUSH
21468: LD_VAR 0 4
21472: ST_TO_ADDR
// exit ;
21473: POP
21474: POP
21475: GO 21481
// end ;
21477: GO 21442
21479: POP
21480: POP
// end ;
21481: LD_VAR 0 3
21485: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21486: LD_INT 0
21488: PPUSH
// vc_chassis := chassis ;
21489: LD_ADDR_OWVAR 37
21493: PUSH
21494: LD_VAR 0 1
21498: ST_TO_ADDR
// vc_engine := engine ;
21499: LD_ADDR_OWVAR 39
21503: PUSH
21504: LD_VAR 0 2
21508: ST_TO_ADDR
// vc_control := control ;
21509: LD_ADDR_OWVAR 38
21513: PUSH
21514: LD_VAR 0 3
21518: ST_TO_ADDR
// vc_weapon := weapon ;
21519: LD_ADDR_OWVAR 40
21523: PUSH
21524: LD_VAR 0 4
21528: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21529: LD_ADDR_OWVAR 41
21533: PUSH
21534: LD_VAR 0 5
21538: ST_TO_ADDR
// end ;
21539: LD_VAR 0 6
21543: RET
// export function WantPlant ( unit ) ; var task ; begin
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
// result := false ;
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 0
21555: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21556: LD_ADDR_VAR 0 3
21560: PUSH
21561: LD_VAR 0 1
21565: PPUSH
21566: CALL_OW 437
21570: ST_TO_ADDR
// if task then
21571: LD_VAR 0 3
21575: IFFALSE 21603
// if task [ 1 ] [ 1 ] = p then
21577: LD_VAR 0 3
21581: PUSH
21582: LD_INT 1
21584: ARRAY
21585: PUSH
21586: LD_INT 1
21588: ARRAY
21589: PUSH
21590: LD_STRING p
21592: EQUAL
21593: IFFALSE 21603
// result := true ;
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_INT 1
21602: ST_TO_ADDR
// end ;
21603: LD_VAR 0 2
21607: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21608: LD_INT 0
21610: PPUSH
21611: PPUSH
21612: PPUSH
21613: PPUSH
// if pos < 1 then
21614: LD_VAR 0 2
21618: PUSH
21619: LD_INT 1
21621: LESS
21622: IFFALSE 21626
// exit ;
21624: GO 21929
// if pos = 1 then
21626: LD_VAR 0 2
21630: PUSH
21631: LD_INT 1
21633: EQUAL
21634: IFFALSE 21667
// result := Replace ( arr , pos [ 1 ] , value ) else
21636: LD_ADDR_VAR 0 4
21640: PUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: LD_VAR 0 2
21650: PUSH
21651: LD_INT 1
21653: ARRAY
21654: PPUSH
21655: LD_VAR 0 3
21659: PPUSH
21660: CALL_OW 1
21664: ST_TO_ADDR
21665: GO 21929
// begin tmp := arr ;
21667: LD_ADDR_VAR 0 6
21671: PUSH
21672: LD_VAR 0 1
21676: ST_TO_ADDR
// s_arr := [ tmp ] ;
21677: LD_ADDR_VAR 0 7
21681: PUSH
21682: LD_VAR 0 6
21686: PUSH
21687: EMPTY
21688: LIST
21689: ST_TO_ADDR
// for i = 1 to pos - 1 do
21690: LD_ADDR_VAR 0 5
21694: PUSH
21695: DOUBLE
21696: LD_INT 1
21698: DEC
21699: ST_TO_ADDR
21700: LD_VAR 0 2
21704: PUSH
21705: LD_INT 1
21707: MINUS
21708: PUSH
21709: FOR_TO
21710: IFFALSE 21755
// begin tmp := tmp [ pos [ i ] ] ;
21712: LD_ADDR_VAR 0 6
21716: PUSH
21717: LD_VAR 0 6
21721: PUSH
21722: LD_VAR 0 2
21726: PUSH
21727: LD_VAR 0 5
21731: ARRAY
21732: ARRAY
21733: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21734: LD_ADDR_VAR 0 7
21738: PUSH
21739: LD_VAR 0 7
21743: PUSH
21744: LD_VAR 0 6
21748: PUSH
21749: EMPTY
21750: LIST
21751: ADD
21752: ST_TO_ADDR
// end ;
21753: GO 21709
21755: POP
21756: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21757: LD_ADDR_VAR 0 6
21761: PUSH
21762: LD_VAR 0 6
21766: PPUSH
21767: LD_VAR 0 2
21771: PUSH
21772: LD_VAR 0 2
21776: ARRAY
21777: PPUSH
21778: LD_VAR 0 3
21782: PPUSH
21783: CALL_OW 1
21787: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21788: LD_ADDR_VAR 0 7
21792: PUSH
21793: LD_VAR 0 7
21797: PPUSH
21798: LD_VAR 0 7
21802: PPUSH
21803: LD_VAR 0 6
21807: PPUSH
21808: CALL_OW 1
21812: ST_TO_ADDR
// for i = s_arr downto 2 do
21813: LD_ADDR_VAR 0 5
21817: PUSH
21818: DOUBLE
21819: LD_VAR 0 7
21823: INC
21824: ST_TO_ADDR
21825: LD_INT 2
21827: PUSH
21828: FOR_DOWNTO
21829: IFFALSE 21913
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21831: LD_ADDR_VAR 0 6
21835: PUSH
21836: LD_VAR 0 7
21840: PUSH
21841: LD_VAR 0 5
21845: PUSH
21846: LD_INT 1
21848: MINUS
21849: ARRAY
21850: PPUSH
21851: LD_VAR 0 2
21855: PUSH
21856: LD_VAR 0 5
21860: PUSH
21861: LD_INT 1
21863: MINUS
21864: ARRAY
21865: PPUSH
21866: LD_VAR 0 7
21870: PUSH
21871: LD_VAR 0 5
21875: ARRAY
21876: PPUSH
21877: CALL_OW 1
21881: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21882: LD_ADDR_VAR 0 7
21886: PUSH
21887: LD_VAR 0 7
21891: PPUSH
21892: LD_VAR 0 5
21896: PUSH
21897: LD_INT 1
21899: MINUS
21900: PPUSH
21901: LD_VAR 0 6
21905: PPUSH
21906: CALL_OW 1
21910: ST_TO_ADDR
// end ;
21911: GO 21828
21913: POP
21914: POP
// result := s_arr [ 1 ] ;
21915: LD_ADDR_VAR 0 4
21919: PUSH
21920: LD_VAR 0 7
21924: PUSH
21925: LD_INT 1
21927: ARRAY
21928: ST_TO_ADDR
// end ; end ;
21929: LD_VAR 0 4
21933: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21934: LD_INT 0
21936: PPUSH
21937: PPUSH
// if not list then
21938: LD_VAR 0 1
21942: NOT
21943: IFFALSE 21947
// exit ;
21945: GO 22038
// i := list [ pos1 ] ;
21947: LD_ADDR_VAR 0 5
21951: PUSH
21952: LD_VAR 0 1
21956: PUSH
21957: LD_VAR 0 2
21961: ARRAY
21962: ST_TO_ADDR
// if not i then
21963: LD_VAR 0 5
21967: NOT
21968: IFFALSE 21972
// exit ;
21970: GO 22038
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21972: LD_ADDR_VAR 0 1
21976: PUSH
21977: LD_VAR 0 1
21981: PPUSH
21982: LD_VAR 0 2
21986: PPUSH
21987: LD_VAR 0 1
21991: PUSH
21992: LD_VAR 0 3
21996: ARRAY
21997: PPUSH
21998: CALL_OW 1
22002: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22003: LD_ADDR_VAR 0 1
22007: PUSH
22008: LD_VAR 0 1
22012: PPUSH
22013: LD_VAR 0 3
22017: PPUSH
22018: LD_VAR 0 5
22022: PPUSH
22023: CALL_OW 1
22027: ST_TO_ADDR
// result := list ;
22028: LD_ADDR_VAR 0 4
22032: PUSH
22033: LD_VAR 0 1
22037: ST_TO_ADDR
// end ;
22038: LD_VAR 0 4
22042: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22043: LD_INT 0
22045: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22046: LD_ADDR_VAR 0 5
22050: PUSH
22051: LD_VAR 0 1
22055: PPUSH
22056: CALL_OW 250
22060: PPUSH
22061: LD_VAR 0 1
22065: PPUSH
22066: CALL_OW 251
22070: PPUSH
22071: LD_VAR 0 2
22075: PPUSH
22076: LD_VAR 0 3
22080: PPUSH
22081: LD_VAR 0 4
22085: PPUSH
22086: CALL 22464 0 5
22090: ST_TO_ADDR
// end ;
22091: LD_VAR 0 5
22095: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22096: LD_INT 0
22098: PPUSH
22099: PPUSH
22100: PPUSH
22101: PPUSH
// if not list or not unit then
22102: LD_VAR 0 2
22106: NOT
22107: PUSH
22108: LD_VAR 0 1
22112: NOT
22113: OR
22114: IFFALSE 22118
// exit ;
22116: GO 22459
// result := [ ] ;
22118: LD_ADDR_VAR 0 5
22122: PUSH
22123: EMPTY
22124: ST_TO_ADDR
// for i in list do
22125: LD_ADDR_VAR 0 6
22129: PUSH
22130: LD_VAR 0 2
22134: PUSH
22135: FOR_IN
22136: IFFALSE 22354
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22138: LD_ADDR_VAR 0 8
22142: PUSH
22143: LD_VAR 0 1
22147: PPUSH
22148: LD_VAR 0 6
22152: PUSH
22153: LD_INT 1
22155: ARRAY
22156: PPUSH
22157: LD_VAR 0 6
22161: PUSH
22162: LD_INT 2
22164: ARRAY
22165: PPUSH
22166: CALL_OW 297
22170: ST_TO_ADDR
// if not Count ( result ) then
22171: LD_VAR 0 5
22175: PPUSH
22176: CALL 18748 0 1
22180: NOT
22181: IFFALSE 22214
// begin result := Join ( result , [ i , tmp ] ) ;
22183: LD_ADDR_VAR 0 5
22187: PUSH
22188: LD_VAR 0 5
22192: PPUSH
22193: LD_VAR 0 6
22197: PUSH
22198: LD_VAR 0 8
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PPUSH
22207: CALL 54337 0 2
22211: ST_TO_ADDR
// continue ;
22212: GO 22135
// end ; if result [ result ] [ 2 ] <= tmp then
22214: LD_VAR 0 5
22218: PUSH
22219: LD_VAR 0 5
22223: ARRAY
22224: PUSH
22225: LD_INT 2
22227: ARRAY
22228: PUSH
22229: LD_VAR 0 8
22233: LESSEQUAL
22234: IFFALSE 22267
// result := Join ( result , [ i , tmp ] ) else
22236: LD_ADDR_VAR 0 5
22240: PUSH
22241: LD_VAR 0 5
22245: PPUSH
22246: LD_VAR 0 6
22250: PUSH
22251: LD_VAR 0 8
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PPUSH
22260: CALL 54337 0 2
22264: ST_TO_ADDR
22265: GO 22352
// begin for j := 1 to Count ( result ) do
22267: LD_ADDR_VAR 0 7
22271: PUSH
22272: DOUBLE
22273: LD_INT 1
22275: DEC
22276: ST_TO_ADDR
22277: LD_VAR 0 5
22281: PPUSH
22282: CALL 18748 0 1
22286: PUSH
22287: FOR_TO
22288: IFFALSE 22350
// begin if tmp < result [ j ] [ 2 ] then
22290: LD_VAR 0 8
22294: PUSH
22295: LD_VAR 0 5
22299: PUSH
22300: LD_VAR 0 7
22304: ARRAY
22305: PUSH
22306: LD_INT 2
22308: ARRAY
22309: LESS
22310: IFFALSE 22348
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22312: LD_ADDR_VAR 0 5
22316: PUSH
22317: LD_VAR 0 5
22321: PPUSH
22322: LD_VAR 0 7
22326: PPUSH
22327: LD_VAR 0 6
22331: PUSH
22332: LD_VAR 0 8
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PPUSH
22341: CALL_OW 2
22345: ST_TO_ADDR
// break ;
22346: GO 22350
// end ; end ;
22348: GO 22287
22350: POP
22351: POP
// end ; end ;
22352: GO 22135
22354: POP
22355: POP
// if result and not asc then
22356: LD_VAR 0 5
22360: PUSH
22361: LD_VAR 0 3
22365: NOT
22366: AND
22367: IFFALSE 22384
// result := ReverseArray ( result ) ;
22369: LD_ADDR_VAR 0 5
22373: PUSH
22374: LD_VAR 0 5
22378: PPUSH
22379: CALL 49624 0 1
22383: ST_TO_ADDR
// tmp := [ ] ;
22384: LD_ADDR_VAR 0 8
22388: PUSH
22389: EMPTY
22390: ST_TO_ADDR
// if mode then
22391: LD_VAR 0 4
22395: IFFALSE 22459
// begin for i := 1 to result do
22397: LD_ADDR_VAR 0 6
22401: PUSH
22402: DOUBLE
22403: LD_INT 1
22405: DEC
22406: ST_TO_ADDR
22407: LD_VAR 0 5
22411: PUSH
22412: FOR_TO
22413: IFFALSE 22447
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22415: LD_ADDR_VAR 0 8
22419: PUSH
22420: LD_VAR 0 8
22424: PPUSH
22425: LD_VAR 0 5
22429: PUSH
22430: LD_VAR 0 6
22434: ARRAY
22435: PUSH
22436: LD_INT 1
22438: ARRAY
22439: PPUSH
22440: CALL 54337 0 2
22444: ST_TO_ADDR
22445: GO 22412
22447: POP
22448: POP
// result := tmp ;
22449: LD_ADDR_VAR 0 5
22453: PUSH
22454: LD_VAR 0 8
22458: ST_TO_ADDR
// end ; end ;
22459: LD_VAR 0 5
22463: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
// if not list then
22470: LD_VAR 0 3
22474: NOT
22475: IFFALSE 22479
// exit ;
22477: GO 22867
// result := [ ] ;
22479: LD_ADDR_VAR 0 6
22483: PUSH
22484: EMPTY
22485: ST_TO_ADDR
// for i in list do
22486: LD_ADDR_VAR 0 7
22490: PUSH
22491: LD_VAR 0 3
22495: PUSH
22496: FOR_IN
22497: IFFALSE 22699
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22499: LD_ADDR_VAR 0 9
22503: PUSH
22504: LD_VAR 0 7
22508: PPUSH
22509: LD_VAR 0 1
22513: PPUSH
22514: LD_VAR 0 2
22518: PPUSH
22519: CALL_OW 297
22523: ST_TO_ADDR
// if not result then
22524: LD_VAR 0 6
22528: NOT
22529: IFFALSE 22555
// result := [ [ i , tmp ] ] else
22531: LD_ADDR_VAR 0 6
22535: PUSH
22536: LD_VAR 0 7
22540: PUSH
22541: LD_VAR 0 9
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: EMPTY
22551: LIST
22552: ST_TO_ADDR
22553: GO 22697
// begin if result [ result ] [ 2 ] < tmp then
22555: LD_VAR 0 6
22559: PUSH
22560: LD_VAR 0 6
22564: ARRAY
22565: PUSH
22566: LD_INT 2
22568: ARRAY
22569: PUSH
22570: LD_VAR 0 9
22574: LESS
22575: IFFALSE 22617
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22577: LD_ADDR_VAR 0 6
22581: PUSH
22582: LD_VAR 0 6
22586: PPUSH
22587: LD_VAR 0 6
22591: PUSH
22592: LD_INT 1
22594: PLUS
22595: PPUSH
22596: LD_VAR 0 7
22600: PUSH
22601: LD_VAR 0 9
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PPUSH
22610: CALL_OW 2
22614: ST_TO_ADDR
22615: GO 22697
// for j = 1 to result do
22617: LD_ADDR_VAR 0 8
22621: PUSH
22622: DOUBLE
22623: LD_INT 1
22625: DEC
22626: ST_TO_ADDR
22627: LD_VAR 0 6
22631: PUSH
22632: FOR_TO
22633: IFFALSE 22695
// begin if tmp < result [ j ] [ 2 ] then
22635: LD_VAR 0 9
22639: PUSH
22640: LD_VAR 0 6
22644: PUSH
22645: LD_VAR 0 8
22649: ARRAY
22650: PUSH
22651: LD_INT 2
22653: ARRAY
22654: LESS
22655: IFFALSE 22693
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22657: LD_ADDR_VAR 0 6
22661: PUSH
22662: LD_VAR 0 6
22666: PPUSH
22667: LD_VAR 0 8
22671: PPUSH
22672: LD_VAR 0 7
22676: PUSH
22677: LD_VAR 0 9
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PPUSH
22686: CALL_OW 2
22690: ST_TO_ADDR
// break ;
22691: GO 22695
// end ; end ;
22693: GO 22632
22695: POP
22696: POP
// end ; end ;
22697: GO 22496
22699: POP
22700: POP
// if result and not asc then
22701: LD_VAR 0 6
22705: PUSH
22706: LD_VAR 0 4
22710: NOT
22711: AND
22712: IFFALSE 22787
// begin tmp := result ;
22714: LD_ADDR_VAR 0 9
22718: PUSH
22719: LD_VAR 0 6
22723: ST_TO_ADDR
// for i = tmp downto 1 do
22724: LD_ADDR_VAR 0 7
22728: PUSH
22729: DOUBLE
22730: LD_VAR 0 9
22734: INC
22735: ST_TO_ADDR
22736: LD_INT 1
22738: PUSH
22739: FOR_DOWNTO
22740: IFFALSE 22785
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22742: LD_ADDR_VAR 0 6
22746: PUSH
22747: LD_VAR 0 6
22751: PPUSH
22752: LD_VAR 0 9
22756: PUSH
22757: LD_VAR 0 7
22761: MINUS
22762: PUSH
22763: LD_INT 1
22765: PLUS
22766: PPUSH
22767: LD_VAR 0 9
22771: PUSH
22772: LD_VAR 0 7
22776: ARRAY
22777: PPUSH
22778: CALL_OW 1
22782: ST_TO_ADDR
22783: GO 22739
22785: POP
22786: POP
// end ; tmp := [ ] ;
22787: LD_ADDR_VAR 0 9
22791: PUSH
22792: EMPTY
22793: ST_TO_ADDR
// if mode then
22794: LD_VAR 0 5
22798: IFFALSE 22867
// begin for i = 1 to result do
22800: LD_ADDR_VAR 0 7
22804: PUSH
22805: DOUBLE
22806: LD_INT 1
22808: DEC
22809: ST_TO_ADDR
22810: LD_VAR 0 6
22814: PUSH
22815: FOR_TO
22816: IFFALSE 22855
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22818: LD_ADDR_VAR 0 9
22822: PUSH
22823: LD_VAR 0 9
22827: PPUSH
22828: LD_VAR 0 7
22832: PPUSH
22833: LD_VAR 0 6
22837: PUSH
22838: LD_VAR 0 7
22842: ARRAY
22843: PUSH
22844: LD_INT 1
22846: ARRAY
22847: PPUSH
22848: CALL_OW 1
22852: ST_TO_ADDR
22853: GO 22815
22855: POP
22856: POP
// result := tmp ;
22857: LD_ADDR_VAR 0 6
22861: PUSH
22862: LD_VAR 0 9
22866: ST_TO_ADDR
// end ; end ;
22867: LD_VAR 0 6
22871: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22872: LD_INT 0
22874: PPUSH
22875: PPUSH
22876: PPUSH
22877: PPUSH
22878: PPUSH
22879: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22880: LD_ADDR_VAR 0 5
22884: PUSH
22885: LD_INT 0
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: LD_INT 0
22893: PUSH
22894: EMPTY
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: ST_TO_ADDR
// if not x or not y then
22902: LD_VAR 0 2
22906: NOT
22907: PUSH
22908: LD_VAR 0 3
22912: NOT
22913: OR
22914: IFFALSE 22918
// exit ;
22916: GO 24568
// if not range then
22918: LD_VAR 0 4
22922: NOT
22923: IFFALSE 22933
// range := 10 ;
22925: LD_ADDR_VAR 0 4
22929: PUSH
22930: LD_INT 10
22932: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22933: LD_ADDR_VAR 0 8
22937: PUSH
22938: LD_INT 81
22940: PUSH
22941: LD_VAR 0 1
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 92
22952: PUSH
22953: LD_VAR 0 2
22957: PUSH
22958: LD_VAR 0 3
22962: PUSH
22963: LD_VAR 0 4
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: LD_INT 3
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 3
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: LIST
22995: PPUSH
22996: CALL_OW 69
23000: ST_TO_ADDR
// if not tmp then
23001: LD_VAR 0 8
23005: NOT
23006: IFFALSE 23010
// exit ;
23008: GO 24568
// for i in tmp do
23010: LD_ADDR_VAR 0 6
23014: PUSH
23015: LD_VAR 0 8
23019: PUSH
23020: FOR_IN
23021: IFFALSE 24543
// begin points := [ 0 , 0 , 0 ] ;
23023: LD_ADDR_VAR 0 9
23027: PUSH
23028: LD_INT 0
23030: PUSH
23031: LD_INT 0
23033: PUSH
23034: LD_INT 0
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: ST_TO_ADDR
// bpoints := 1 ;
23042: LD_ADDR_VAR 0 10
23046: PUSH
23047: LD_INT 1
23049: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23050: LD_VAR 0 6
23054: PPUSH
23055: CALL_OW 247
23059: PUSH
23060: LD_INT 1
23062: DOUBLE
23063: EQUAL
23064: IFTRUE 23068
23066: GO 23646
23068: POP
// begin if GetClass ( i ) = 1 then
23069: LD_VAR 0 6
23073: PPUSH
23074: CALL_OW 257
23078: PUSH
23079: LD_INT 1
23081: EQUAL
23082: IFFALSE 23103
// points := [ 10 , 5 , 3 ] ;
23084: LD_ADDR_VAR 0 9
23088: PUSH
23089: LD_INT 10
23091: PUSH
23092: LD_INT 5
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: LIST
23102: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23103: LD_VAR 0 6
23107: PPUSH
23108: CALL_OW 257
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: LD_INT 4
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: IN
23127: IFFALSE 23148
// points := [ 3 , 2 , 1 ] ;
23129: LD_ADDR_VAR 0 9
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: LD_INT 2
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23148: LD_VAR 0 6
23152: PPUSH
23153: CALL_OW 257
23157: PUSH
23158: LD_INT 5
23160: EQUAL
23161: IFFALSE 23182
// points := [ 130 , 5 , 2 ] ;
23163: LD_ADDR_VAR 0 9
23167: PUSH
23168: LD_INT 130
23170: PUSH
23171: LD_INT 5
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23182: LD_VAR 0 6
23186: PPUSH
23187: CALL_OW 257
23191: PUSH
23192: LD_INT 8
23194: EQUAL
23195: IFFALSE 23216
// points := [ 35 , 35 , 30 ] ;
23197: LD_ADDR_VAR 0 9
23201: PUSH
23202: LD_INT 35
23204: PUSH
23205: LD_INT 35
23207: PUSH
23208: LD_INT 30
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23216: LD_VAR 0 6
23220: PPUSH
23221: CALL_OW 257
23225: PUSH
23226: LD_INT 9
23228: EQUAL
23229: IFFALSE 23250
// points := [ 20 , 55 , 40 ] ;
23231: LD_ADDR_VAR 0 9
23235: PUSH
23236: LD_INT 20
23238: PUSH
23239: LD_INT 55
23241: PUSH
23242: LD_INT 40
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: LIST
23249: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23250: LD_VAR 0 6
23254: PPUSH
23255: CALL_OW 257
23259: PUSH
23260: LD_INT 12
23262: PUSH
23263: LD_INT 16
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: IN
23270: IFFALSE 23291
// points := [ 5 , 3 , 2 ] ;
23272: LD_ADDR_VAR 0 9
23276: PUSH
23277: LD_INT 5
23279: PUSH
23280: LD_INT 3
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: EMPTY
23287: LIST
23288: LIST
23289: LIST
23290: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23291: LD_VAR 0 6
23295: PPUSH
23296: CALL_OW 257
23300: PUSH
23301: LD_INT 17
23303: EQUAL
23304: IFFALSE 23325
// points := [ 100 , 50 , 75 ] ;
23306: LD_ADDR_VAR 0 9
23310: PUSH
23311: LD_INT 100
23313: PUSH
23314: LD_INT 50
23316: PUSH
23317: LD_INT 75
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: LIST
23324: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23325: LD_VAR 0 6
23329: PPUSH
23330: CALL_OW 257
23334: PUSH
23335: LD_INT 15
23337: EQUAL
23338: IFFALSE 23359
// points := [ 10 , 5 , 3 ] ;
23340: LD_ADDR_VAR 0 9
23344: PUSH
23345: LD_INT 10
23347: PUSH
23348: LD_INT 5
23350: PUSH
23351: LD_INT 3
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: LIST
23358: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23359: LD_VAR 0 6
23363: PPUSH
23364: CALL_OW 257
23368: PUSH
23369: LD_INT 14
23371: EQUAL
23372: IFFALSE 23393
// points := [ 10 , 0 , 0 ] ;
23374: LD_ADDR_VAR 0 9
23378: PUSH
23379: LD_INT 10
23381: PUSH
23382: LD_INT 0
23384: PUSH
23385: LD_INT 0
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23393: LD_VAR 0 6
23397: PPUSH
23398: CALL_OW 257
23402: PUSH
23403: LD_INT 11
23405: EQUAL
23406: IFFALSE 23427
// points := [ 30 , 10 , 5 ] ;
23408: LD_ADDR_VAR 0 9
23412: PUSH
23413: LD_INT 30
23415: PUSH
23416: LD_INT 10
23418: PUSH
23419: LD_INT 5
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23427: LD_VAR 0 1
23431: PPUSH
23432: LD_INT 5
23434: PPUSH
23435: CALL_OW 321
23439: PUSH
23440: LD_INT 2
23442: EQUAL
23443: IFFALSE 23460
// bpoints := bpoints * 1.8 ;
23445: LD_ADDR_VAR 0 10
23449: PUSH
23450: LD_VAR 0 10
23454: PUSH
23455: LD_REAL  1.80000000000000E+0000
23458: MUL
23459: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23460: LD_VAR 0 6
23464: PPUSH
23465: CALL_OW 257
23469: PUSH
23470: LD_INT 1
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 4
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: IN
23488: PUSH
23489: LD_VAR 0 1
23493: PPUSH
23494: LD_INT 51
23496: PPUSH
23497: CALL_OW 321
23501: PUSH
23502: LD_INT 2
23504: EQUAL
23505: AND
23506: IFFALSE 23523
// bpoints := bpoints * 1.2 ;
23508: LD_ADDR_VAR 0 10
23512: PUSH
23513: LD_VAR 0 10
23517: PUSH
23518: LD_REAL  1.20000000000000E+0000
23521: MUL
23522: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23523: LD_VAR 0 6
23527: PPUSH
23528: CALL_OW 257
23532: PUSH
23533: LD_INT 5
23535: PUSH
23536: LD_INT 7
23538: PUSH
23539: LD_INT 9
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: IN
23547: PUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: LD_INT 52
23555: PPUSH
23556: CALL_OW 321
23560: PUSH
23561: LD_INT 2
23563: EQUAL
23564: AND
23565: IFFALSE 23582
// bpoints := bpoints * 1.5 ;
23567: LD_ADDR_VAR 0 10
23571: PUSH
23572: LD_VAR 0 10
23576: PUSH
23577: LD_REAL  1.50000000000000E+0000
23580: MUL
23581: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23582: LD_VAR 0 1
23586: PPUSH
23587: LD_INT 66
23589: PPUSH
23590: CALL_OW 321
23594: PUSH
23595: LD_INT 2
23597: EQUAL
23598: IFFALSE 23615
// bpoints := bpoints * 1.1 ;
23600: LD_ADDR_VAR 0 10
23604: PUSH
23605: LD_VAR 0 10
23609: PUSH
23610: LD_REAL  1.10000000000000E+0000
23613: MUL
23614: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23615: LD_ADDR_VAR 0 10
23619: PUSH
23620: LD_VAR 0 10
23624: PUSH
23625: LD_VAR 0 6
23629: PPUSH
23630: LD_INT 1
23632: PPUSH
23633: CALL_OW 259
23637: PUSH
23638: LD_REAL  1.15000000000000E+0000
23641: MUL
23642: MUL
23643: ST_TO_ADDR
// end ; unit_vehicle :
23644: GO 24472
23646: LD_INT 2
23648: DOUBLE
23649: EQUAL
23650: IFTRUE 23654
23652: GO 24460
23654: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23655: LD_VAR 0 6
23659: PPUSH
23660: CALL_OW 264
23664: PUSH
23665: LD_INT 2
23667: PUSH
23668: LD_INT 42
23670: PUSH
23671: LD_INT 24
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: IN
23679: IFFALSE 23700
// points := [ 25 , 5 , 3 ] ;
23681: LD_ADDR_VAR 0 9
23685: PUSH
23686: LD_INT 25
23688: PUSH
23689: LD_INT 5
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: LIST
23699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23700: LD_VAR 0 6
23704: PPUSH
23705: CALL_OW 264
23709: PUSH
23710: LD_INT 4
23712: PUSH
23713: LD_INT 43
23715: PUSH
23716: LD_INT 25
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: IN
23724: IFFALSE 23745
// points := [ 40 , 15 , 5 ] ;
23726: LD_ADDR_VAR 0 9
23730: PUSH
23731: LD_INT 40
23733: PUSH
23734: LD_INT 15
23736: PUSH
23737: LD_INT 5
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23745: LD_VAR 0 6
23749: PPUSH
23750: CALL_OW 264
23754: PUSH
23755: LD_INT 3
23757: PUSH
23758: LD_INT 23
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: IN
23765: IFFALSE 23786
// points := [ 7 , 25 , 8 ] ;
23767: LD_ADDR_VAR 0 9
23771: PUSH
23772: LD_INT 7
23774: PUSH
23775: LD_INT 25
23777: PUSH
23778: LD_INT 8
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23786: LD_VAR 0 6
23790: PPUSH
23791: CALL_OW 264
23795: PUSH
23796: LD_INT 5
23798: PUSH
23799: LD_INT 27
23801: PUSH
23802: LD_INT 44
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: IN
23810: IFFALSE 23831
// points := [ 14 , 50 , 16 ] ;
23812: LD_ADDR_VAR 0 9
23816: PUSH
23817: LD_INT 14
23819: PUSH
23820: LD_INT 50
23822: PUSH
23823: LD_INT 16
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: LIST
23830: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23831: LD_VAR 0 6
23835: PPUSH
23836: CALL_OW 264
23840: PUSH
23841: LD_INT 6
23843: PUSH
23844: LD_INT 46
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: IN
23851: IFFALSE 23872
// points := [ 32 , 120 , 70 ] ;
23853: LD_ADDR_VAR 0 9
23857: PUSH
23858: LD_INT 32
23860: PUSH
23861: LD_INT 120
23863: PUSH
23864: LD_INT 70
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: LIST
23871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23872: LD_VAR 0 6
23876: PPUSH
23877: CALL_OW 264
23881: PUSH
23882: LD_INT 7
23884: PUSH
23885: LD_INT 28
23887: PUSH
23888: LD_INT 45
23890: PUSH
23891: LD_INT 92
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: IN
23900: IFFALSE 23921
// points := [ 35 , 20 , 45 ] ;
23902: LD_ADDR_VAR 0 9
23906: PUSH
23907: LD_INT 35
23909: PUSH
23910: LD_INT 20
23912: PUSH
23913: LD_INT 45
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23921: LD_VAR 0 6
23925: PPUSH
23926: CALL_OW 264
23930: PUSH
23931: LD_INT 47
23933: PUSH
23934: EMPTY
23935: LIST
23936: IN
23937: IFFALSE 23958
// points := [ 67 , 45 , 75 ] ;
23939: LD_ADDR_VAR 0 9
23943: PUSH
23944: LD_INT 67
23946: PUSH
23947: LD_INT 45
23949: PUSH
23950: LD_INT 75
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23958: LD_VAR 0 6
23962: PPUSH
23963: CALL_OW 264
23967: PUSH
23968: LD_INT 26
23970: PUSH
23971: EMPTY
23972: LIST
23973: IN
23974: IFFALSE 23995
// points := [ 120 , 30 , 80 ] ;
23976: LD_ADDR_VAR 0 9
23980: PUSH
23981: LD_INT 120
23983: PUSH
23984: LD_INT 30
23986: PUSH
23987: LD_INT 80
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: LIST
23994: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23995: LD_VAR 0 6
23999: PPUSH
24000: CALL_OW 264
24004: PUSH
24005: LD_INT 22
24007: PUSH
24008: EMPTY
24009: LIST
24010: IN
24011: IFFALSE 24032
// points := [ 40 , 1 , 1 ] ;
24013: LD_ADDR_VAR 0 9
24017: PUSH
24018: LD_INT 40
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24032: LD_VAR 0 6
24036: PPUSH
24037: CALL_OW 264
24041: PUSH
24042: LD_INT 29
24044: PUSH
24045: EMPTY
24046: LIST
24047: IN
24048: IFFALSE 24069
// points := [ 70 , 200 , 400 ] ;
24050: LD_ADDR_VAR 0 9
24054: PUSH
24055: LD_INT 70
24057: PUSH
24058: LD_INT 200
24060: PUSH
24061: LD_INT 400
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: LIST
24068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24069: LD_VAR 0 6
24073: PPUSH
24074: CALL_OW 264
24078: PUSH
24079: LD_INT 14
24081: PUSH
24082: LD_INT 53
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: IN
24089: IFFALSE 24110
// points := [ 40 , 10 , 20 ] ;
24091: LD_ADDR_VAR 0 9
24095: PUSH
24096: LD_INT 40
24098: PUSH
24099: LD_INT 10
24101: PUSH
24102: LD_INT 20
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24110: LD_VAR 0 6
24114: PPUSH
24115: CALL_OW 264
24119: PUSH
24120: LD_INT 9
24122: PUSH
24123: EMPTY
24124: LIST
24125: IN
24126: IFFALSE 24147
// points := [ 5 , 70 , 20 ] ;
24128: LD_ADDR_VAR 0 9
24132: PUSH
24133: LD_INT 5
24135: PUSH
24136: LD_INT 70
24138: PUSH
24139: LD_INT 20
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: LIST
24146: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24147: LD_VAR 0 6
24151: PPUSH
24152: CALL_OW 264
24156: PUSH
24157: LD_INT 10
24159: PUSH
24160: EMPTY
24161: LIST
24162: IN
24163: IFFALSE 24184
// points := [ 35 , 110 , 70 ] ;
24165: LD_ADDR_VAR 0 9
24169: PUSH
24170: LD_INT 35
24172: PUSH
24173: LD_INT 110
24175: PUSH
24176: LD_INT 70
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24184: LD_VAR 0 6
24188: PPUSH
24189: CALL_OW 265
24193: PUSH
24194: LD_INT 25
24196: EQUAL
24197: IFFALSE 24218
// points := [ 80 , 65 , 100 ] ;
24199: LD_ADDR_VAR 0 9
24203: PUSH
24204: LD_INT 80
24206: PUSH
24207: LD_INT 65
24209: PUSH
24210: LD_INT 100
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24218: LD_VAR 0 6
24222: PPUSH
24223: CALL_OW 263
24227: PUSH
24228: LD_INT 1
24230: EQUAL
24231: IFFALSE 24266
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24233: LD_ADDR_VAR 0 10
24237: PUSH
24238: LD_VAR 0 10
24242: PUSH
24243: LD_VAR 0 6
24247: PPUSH
24248: CALL_OW 311
24252: PPUSH
24253: LD_INT 3
24255: PPUSH
24256: CALL_OW 259
24260: PUSH
24261: LD_INT 4
24263: MUL
24264: MUL
24265: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24266: LD_VAR 0 6
24270: PPUSH
24271: CALL_OW 263
24275: PUSH
24276: LD_INT 2
24278: EQUAL
24279: IFFALSE 24330
// begin j := IsControledBy ( i ) ;
24281: LD_ADDR_VAR 0 7
24285: PUSH
24286: LD_VAR 0 6
24290: PPUSH
24291: CALL_OW 312
24295: ST_TO_ADDR
// if j then
24296: LD_VAR 0 7
24300: IFFALSE 24330
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24302: LD_ADDR_VAR 0 10
24306: PUSH
24307: LD_VAR 0 10
24311: PUSH
24312: LD_VAR 0 7
24316: PPUSH
24317: LD_INT 3
24319: PPUSH
24320: CALL_OW 259
24324: PUSH
24325: LD_INT 3
24327: MUL
24328: MUL
24329: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24330: LD_VAR 0 6
24334: PPUSH
24335: CALL_OW 264
24339: PUSH
24340: LD_INT 5
24342: PUSH
24343: LD_INT 6
24345: PUSH
24346: LD_INT 46
24348: PUSH
24349: LD_INT 44
24351: PUSH
24352: LD_INT 47
24354: PUSH
24355: LD_INT 45
24357: PUSH
24358: LD_INT 28
24360: PUSH
24361: LD_INT 7
24363: PUSH
24364: LD_INT 27
24366: PUSH
24367: LD_INT 29
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: IN
24382: PUSH
24383: LD_VAR 0 1
24387: PPUSH
24388: LD_INT 52
24390: PPUSH
24391: CALL_OW 321
24395: PUSH
24396: LD_INT 2
24398: EQUAL
24399: AND
24400: IFFALSE 24417
// bpoints := bpoints * 1.2 ;
24402: LD_ADDR_VAR 0 10
24406: PUSH
24407: LD_VAR 0 10
24411: PUSH
24412: LD_REAL  1.20000000000000E+0000
24415: MUL
24416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24417: LD_VAR 0 6
24421: PPUSH
24422: CALL_OW 264
24426: PUSH
24427: LD_INT 6
24429: PUSH
24430: LD_INT 46
24432: PUSH
24433: LD_INT 47
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: LIST
24440: IN
24441: IFFALSE 24458
// bpoints := bpoints * 1.2 ;
24443: LD_ADDR_VAR 0 10
24447: PUSH
24448: LD_VAR 0 10
24452: PUSH
24453: LD_REAL  1.20000000000000E+0000
24456: MUL
24457: ST_TO_ADDR
// end ; unit_building :
24458: GO 24472
24460: LD_INT 3
24462: DOUBLE
24463: EQUAL
24464: IFTRUE 24468
24466: GO 24471
24468: POP
// ; end ;
24469: GO 24472
24471: POP
// for j = 1 to 3 do
24472: LD_ADDR_VAR 0 7
24476: PUSH
24477: DOUBLE
24478: LD_INT 1
24480: DEC
24481: ST_TO_ADDR
24482: LD_INT 3
24484: PUSH
24485: FOR_TO
24486: IFFALSE 24539
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24488: LD_ADDR_VAR 0 5
24492: PUSH
24493: LD_VAR 0 5
24497: PPUSH
24498: LD_VAR 0 7
24502: PPUSH
24503: LD_VAR 0 5
24507: PUSH
24508: LD_VAR 0 7
24512: ARRAY
24513: PUSH
24514: LD_VAR 0 9
24518: PUSH
24519: LD_VAR 0 7
24523: ARRAY
24524: PUSH
24525: LD_VAR 0 10
24529: MUL
24530: PLUS
24531: PPUSH
24532: CALL_OW 1
24536: ST_TO_ADDR
24537: GO 24485
24539: POP
24540: POP
// end ;
24541: GO 23020
24543: POP
24544: POP
// result := Replace ( result , 4 , tmp ) ;
24545: LD_ADDR_VAR 0 5
24549: PUSH
24550: LD_VAR 0 5
24554: PPUSH
24555: LD_INT 4
24557: PPUSH
24558: LD_VAR 0 8
24562: PPUSH
24563: CALL_OW 1
24567: ST_TO_ADDR
// end ;
24568: LD_VAR 0 5
24572: RET
// export function DangerAtRange ( unit , range ) ; begin
24573: LD_INT 0
24575: PPUSH
// if not unit then
24576: LD_VAR 0 1
24580: NOT
24581: IFFALSE 24585
// exit ;
24583: GO 24630
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24585: LD_ADDR_VAR 0 3
24589: PUSH
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 255
24599: PPUSH
24600: LD_VAR 0 1
24604: PPUSH
24605: CALL_OW 250
24609: PPUSH
24610: LD_VAR 0 1
24614: PPUSH
24615: CALL_OW 251
24619: PPUSH
24620: LD_VAR 0 2
24624: PPUSH
24625: CALL 22872 0 4
24629: ST_TO_ADDR
// end ;
24630: LD_VAR 0 3
24634: RET
// export function DangerInArea ( side , area ) ; begin
24635: LD_INT 0
24637: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_VAR 0 2
24647: PPUSH
24648: LD_INT 81
24650: PUSH
24651: LD_VAR 0 1
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PPUSH
24660: CALL_OW 70
24664: ST_TO_ADDR
// end ;
24665: LD_VAR 0 3
24669: RET
// export function IsExtension ( b ) ; begin
24670: LD_INT 0
24672: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24673: LD_ADDR_VAR 0 2
24677: PUSH
24678: LD_VAR 0 1
24682: PUSH
24683: LD_INT 23
24685: PUSH
24686: LD_INT 20
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_INT 17
24694: PUSH
24695: LD_INT 24
24697: PUSH
24698: LD_INT 21
24700: PUSH
24701: LD_INT 19
24703: PUSH
24704: LD_INT 16
24706: PUSH
24707: LD_INT 25
24709: PUSH
24710: LD_INT 18
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: IN
24725: ST_TO_ADDR
// end ;
24726: LD_VAR 0 2
24730: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24731: LD_INT 0
24733: PPUSH
24734: PPUSH
24735: PPUSH
// result := [ ] ;
24736: LD_ADDR_VAR 0 4
24740: PUSH
24741: EMPTY
24742: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24743: LD_ADDR_VAR 0 5
24747: PUSH
24748: LD_VAR 0 2
24752: PPUSH
24753: LD_INT 21
24755: PUSH
24756: LD_INT 3
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PPUSH
24763: CALL_OW 70
24767: ST_TO_ADDR
// if not tmp then
24768: LD_VAR 0 5
24772: NOT
24773: IFFALSE 24777
// exit ;
24775: GO 24841
// if checkLink then
24777: LD_VAR 0 3
24781: IFFALSE 24831
// begin for i in tmp do
24783: LD_ADDR_VAR 0 6
24787: PUSH
24788: LD_VAR 0 5
24792: PUSH
24793: FOR_IN
24794: IFFALSE 24829
// if GetBase ( i ) <> base then
24796: LD_VAR 0 6
24800: PPUSH
24801: CALL_OW 274
24805: PUSH
24806: LD_VAR 0 1
24810: NONEQUAL
24811: IFFALSE 24827
// ComLinkToBase ( base , i ) ;
24813: LD_VAR 0 1
24817: PPUSH
24818: LD_VAR 0 6
24822: PPUSH
24823: CALL_OW 169
24827: GO 24793
24829: POP
24830: POP
// end ; result := tmp ;
24831: LD_ADDR_VAR 0 4
24835: PUSH
24836: LD_VAR 0 5
24840: ST_TO_ADDR
// end ;
24841: LD_VAR 0 4
24845: RET
// export function ComComplete ( units , b ) ; var i ; begin
24846: LD_INT 0
24848: PPUSH
24849: PPUSH
// if not units then
24850: LD_VAR 0 1
24854: NOT
24855: IFFALSE 24859
// exit ;
24857: GO 24949
// for i in units do
24859: LD_ADDR_VAR 0 4
24863: PUSH
24864: LD_VAR 0 1
24868: PUSH
24869: FOR_IN
24870: IFFALSE 24947
// if BuildingStatus ( b ) = bs_build then
24872: LD_VAR 0 2
24876: PPUSH
24877: CALL_OW 461
24881: PUSH
24882: LD_INT 1
24884: EQUAL
24885: IFFALSE 24945
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24887: LD_VAR 0 4
24891: PPUSH
24892: LD_STRING h
24894: PUSH
24895: LD_VAR 0 2
24899: PPUSH
24900: CALL_OW 250
24904: PUSH
24905: LD_VAR 0 2
24909: PPUSH
24910: CALL_OW 251
24914: PUSH
24915: LD_VAR 0 2
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 0
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: PUSH
24938: EMPTY
24939: LIST
24940: PPUSH
24941: CALL_OW 446
24945: GO 24869
24947: POP
24948: POP
// end ;
24949: LD_VAR 0 3
24953: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24954: LD_INT 0
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24962: LD_VAR 0 1
24966: NOT
24967: PUSH
24968: LD_VAR 0 1
24972: PPUSH
24973: CALL_OW 263
24977: PUSH
24978: LD_INT 2
24980: NONEQUAL
24981: OR
24982: IFFALSE 24986
// exit ;
24984: GO 25302
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24986: LD_ADDR_VAR 0 6
24990: PUSH
24991: LD_INT 22
24993: PUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 255
25003: PUSH
25004: EMPTY
25005: LIST
25006: LIST
25007: PUSH
25008: LD_INT 2
25010: PUSH
25011: LD_INT 30
25013: PUSH
25014: LD_INT 36
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 34
25023: PUSH
25024: LD_INT 31
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: LIST
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PPUSH
25040: CALL_OW 69
25044: ST_TO_ADDR
// if not tmp then
25045: LD_VAR 0 6
25049: NOT
25050: IFFALSE 25054
// exit ;
25052: GO 25302
// result := [ ] ;
25054: LD_ADDR_VAR 0 2
25058: PUSH
25059: EMPTY
25060: ST_TO_ADDR
// for i in tmp do
25061: LD_ADDR_VAR 0 3
25065: PUSH
25066: LD_VAR 0 6
25070: PUSH
25071: FOR_IN
25072: IFFALSE 25143
// begin t := UnitsInside ( i ) ;
25074: LD_ADDR_VAR 0 4
25078: PUSH
25079: LD_VAR 0 3
25083: PPUSH
25084: CALL_OW 313
25088: ST_TO_ADDR
// if t then
25089: LD_VAR 0 4
25093: IFFALSE 25141
// for j in t do
25095: LD_ADDR_VAR 0 7
25099: PUSH
25100: LD_VAR 0 4
25104: PUSH
25105: FOR_IN
25106: IFFALSE 25139
// result := Replace ( result , result + 1 , j ) ;
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_VAR 0 2
25122: PUSH
25123: LD_INT 1
25125: PLUS
25126: PPUSH
25127: LD_VAR 0 7
25131: PPUSH
25132: CALL_OW 1
25136: ST_TO_ADDR
25137: GO 25105
25139: POP
25140: POP
// end ;
25141: GO 25071
25143: POP
25144: POP
// if not result then
25145: LD_VAR 0 2
25149: NOT
25150: IFFALSE 25154
// exit ;
25152: GO 25302
// mech := result [ 1 ] ;
25154: LD_ADDR_VAR 0 5
25158: PUSH
25159: LD_VAR 0 2
25163: PUSH
25164: LD_INT 1
25166: ARRAY
25167: ST_TO_ADDR
// if result > 1 then
25168: LD_VAR 0 2
25172: PUSH
25173: LD_INT 1
25175: GREATER
25176: IFFALSE 25288
// begin for i = 2 to result do
25178: LD_ADDR_VAR 0 3
25182: PUSH
25183: DOUBLE
25184: LD_INT 2
25186: DEC
25187: ST_TO_ADDR
25188: LD_VAR 0 2
25192: PUSH
25193: FOR_TO
25194: IFFALSE 25286
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25196: LD_ADDR_VAR 0 4
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: LD_VAR 0 3
25210: ARRAY
25211: PPUSH
25212: LD_INT 3
25214: PPUSH
25215: CALL_OW 259
25219: PUSH
25220: LD_VAR 0 2
25224: PUSH
25225: LD_VAR 0 3
25229: ARRAY
25230: PPUSH
25231: CALL_OW 432
25235: MINUS
25236: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25237: LD_VAR 0 4
25241: PUSH
25242: LD_VAR 0 5
25246: PPUSH
25247: LD_INT 3
25249: PPUSH
25250: CALL_OW 259
25254: PUSH
25255: LD_VAR 0 5
25259: PPUSH
25260: CALL_OW 432
25264: MINUS
25265: GREATEREQUAL
25266: IFFALSE 25284
// mech := result [ i ] ;
25268: LD_ADDR_VAR 0 5
25272: PUSH
25273: LD_VAR 0 2
25277: PUSH
25278: LD_VAR 0 3
25282: ARRAY
25283: ST_TO_ADDR
// end ;
25284: GO 25193
25286: POP
25287: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25288: LD_VAR 0 1
25292: PPUSH
25293: LD_VAR 0 5
25297: PPUSH
25298: CALL_OW 135
// end ;
25302: LD_VAR 0 2
25306: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25307: LD_INT 0
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
25315: PPUSH
25316: PPUSH
25317: PPUSH
25318: PPUSH
25319: PPUSH
25320: PPUSH
25321: PPUSH
// result := [ ] ;
25322: LD_ADDR_VAR 0 7
25326: PUSH
25327: EMPTY
25328: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25329: LD_VAR 0 1
25333: PPUSH
25334: CALL_OW 266
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: IN
25349: NOT
25350: IFFALSE 25354
// exit ;
25352: GO 26988
// if name then
25354: LD_VAR 0 3
25358: IFFALSE 25374
// SetBName ( base_dep , name ) ;
25360: LD_VAR 0 1
25364: PPUSH
25365: LD_VAR 0 3
25369: PPUSH
25370: CALL_OW 500
// base := GetBase ( base_dep ) ;
25374: LD_ADDR_VAR 0 15
25378: PUSH
25379: LD_VAR 0 1
25383: PPUSH
25384: CALL_OW 274
25388: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25389: LD_ADDR_VAR 0 16
25393: PUSH
25394: LD_VAR 0 1
25398: PPUSH
25399: CALL_OW 255
25403: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25404: LD_ADDR_VAR 0 17
25408: PUSH
25409: LD_VAR 0 1
25413: PPUSH
25414: CALL_OW 248
25418: ST_TO_ADDR
// if sources then
25419: LD_VAR 0 5
25423: IFFALSE 25470
// for i = 1 to 3 do
25425: LD_ADDR_VAR 0 8
25429: PUSH
25430: DOUBLE
25431: LD_INT 1
25433: DEC
25434: ST_TO_ADDR
25435: LD_INT 3
25437: PUSH
25438: FOR_TO
25439: IFFALSE 25468
// AddResourceType ( base , i , sources [ i ] ) ;
25441: LD_VAR 0 15
25445: PPUSH
25446: LD_VAR 0 8
25450: PPUSH
25451: LD_VAR 0 5
25455: PUSH
25456: LD_VAR 0 8
25460: ARRAY
25461: PPUSH
25462: CALL_OW 276
25466: GO 25438
25468: POP
25469: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25470: LD_ADDR_VAR 0 18
25474: PUSH
25475: LD_VAR 0 15
25479: PPUSH
25480: LD_VAR 0 2
25484: PPUSH
25485: LD_INT 1
25487: PPUSH
25488: CALL 24731 0 3
25492: ST_TO_ADDR
// InitHc ;
25493: CALL_OW 19
// InitUc ;
25497: CALL_OW 18
// uc_side := side ;
25501: LD_ADDR_OWVAR 20
25505: PUSH
25506: LD_VAR 0 16
25510: ST_TO_ADDR
// uc_nation := nation ;
25511: LD_ADDR_OWVAR 21
25515: PUSH
25516: LD_VAR 0 17
25520: ST_TO_ADDR
// if buildings then
25521: LD_VAR 0 18
25525: IFFALSE 26847
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25527: LD_ADDR_VAR 0 19
25531: PUSH
25532: LD_VAR 0 18
25536: PPUSH
25537: LD_INT 2
25539: PUSH
25540: LD_INT 30
25542: PUSH
25543: LD_INT 29
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: LD_INT 30
25552: PUSH
25553: LD_INT 30
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: PPUSH
25565: CALL_OW 72
25569: ST_TO_ADDR
// if tmp then
25570: LD_VAR 0 19
25574: IFFALSE 25622
// for i in tmp do
25576: LD_ADDR_VAR 0 8
25580: PUSH
25581: LD_VAR 0 19
25585: PUSH
25586: FOR_IN
25587: IFFALSE 25620
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25589: LD_VAR 0 8
25593: PPUSH
25594: CALL_OW 250
25598: PPUSH
25599: LD_VAR 0 8
25603: PPUSH
25604: CALL_OW 251
25608: PPUSH
25609: LD_VAR 0 16
25613: PPUSH
25614: CALL_OW 441
25618: GO 25586
25620: POP
25621: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25622: LD_VAR 0 18
25626: PPUSH
25627: LD_INT 2
25629: PUSH
25630: LD_INT 30
25632: PUSH
25633: LD_INT 32
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 30
25642: PUSH
25643: LD_INT 33
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 72
25659: IFFALSE 25747
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25661: LD_ADDR_VAR 0 8
25665: PUSH
25666: LD_VAR 0 18
25670: PPUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 30
25676: PUSH
25677: LD_INT 32
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 30
25686: PUSH
25687: LD_INT 33
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: PPUSH
25699: CALL_OW 72
25703: PUSH
25704: FOR_IN
25705: IFFALSE 25745
// begin if not GetBWeapon ( i ) then
25707: LD_VAR 0 8
25711: PPUSH
25712: CALL_OW 269
25716: NOT
25717: IFFALSE 25743
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25719: LD_VAR 0 8
25723: PPUSH
25724: LD_VAR 0 8
25728: PPUSH
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL 26993 0 2
25738: PPUSH
25739: CALL_OW 431
// end ;
25743: GO 25704
25745: POP
25746: POP
// end ; for i = 1 to personel do
25747: LD_ADDR_VAR 0 8
25751: PUSH
25752: DOUBLE
25753: LD_INT 1
25755: DEC
25756: ST_TO_ADDR
25757: LD_VAR 0 6
25761: PUSH
25762: FOR_TO
25763: IFFALSE 26827
// begin if i > 4 then
25765: LD_VAR 0 8
25769: PUSH
25770: LD_INT 4
25772: GREATER
25773: IFFALSE 25777
// break ;
25775: GO 26827
// case i of 1 :
25777: LD_VAR 0 8
25781: PUSH
25782: LD_INT 1
25784: DOUBLE
25785: EQUAL
25786: IFTRUE 25790
25788: GO 25870
25790: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25791: LD_ADDR_VAR 0 12
25795: PUSH
25796: LD_VAR 0 18
25800: PPUSH
25801: LD_INT 22
25803: PUSH
25804: LD_VAR 0 16
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 58
25815: PUSH
25816: EMPTY
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: PUSH
25822: LD_INT 30
25824: PUSH
25825: LD_INT 32
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 30
25834: PUSH
25835: LD_INT 4
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 30
25844: PUSH
25845: LD_INT 5
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 72
25867: ST_TO_ADDR
25868: GO 26092
25870: LD_INT 2
25872: DOUBLE
25873: EQUAL
25874: IFTRUE 25878
25876: GO 25940
25878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25879: LD_ADDR_VAR 0 12
25883: PUSH
25884: LD_VAR 0 18
25888: PPUSH
25889: LD_INT 22
25891: PUSH
25892: LD_VAR 0 16
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: LD_INT 0
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 30
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 72
25937: ST_TO_ADDR
25938: GO 26092
25940: LD_INT 3
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 26010
25948: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25949: LD_ADDR_VAR 0 12
25953: PUSH
25954: LD_VAR 0 18
25958: PPUSH
25959: LD_INT 22
25961: PUSH
25962: LD_VAR 0 16
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 30
25976: PUSH
25977: LD_INT 2
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 30
25986: PUSH
25987: LD_INT 3
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PPUSH
26003: CALL_OW 72
26007: ST_TO_ADDR
26008: GO 26092
26010: LD_INT 4
26012: DOUBLE
26013: EQUAL
26014: IFTRUE 26018
26016: GO 26091
26018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26019: LD_ADDR_VAR 0 12
26023: PUSH
26024: LD_VAR 0 18
26028: PPUSH
26029: LD_INT 22
26031: PUSH
26032: LD_VAR 0 16
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 2
26043: PUSH
26044: LD_INT 30
26046: PUSH
26047: LD_INT 6
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 30
26056: PUSH
26057: LD_INT 7
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 30
26066: PUSH
26067: LD_INT 8
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 72
26088: ST_TO_ADDR
26089: GO 26092
26091: POP
// if i = 1 then
26092: LD_VAR 0 8
26096: PUSH
26097: LD_INT 1
26099: EQUAL
26100: IFFALSE 26211
// begin tmp := [ ] ;
26102: LD_ADDR_VAR 0 19
26106: PUSH
26107: EMPTY
26108: ST_TO_ADDR
// for j in f do
26109: LD_ADDR_VAR 0 9
26113: PUSH
26114: LD_VAR 0 12
26118: PUSH
26119: FOR_IN
26120: IFFALSE 26193
// if GetBType ( j ) = b_bunker then
26122: LD_VAR 0 9
26126: PPUSH
26127: CALL_OW 266
26131: PUSH
26132: LD_INT 32
26134: EQUAL
26135: IFFALSE 26162
// tmp := Insert ( tmp , 1 , j ) else
26137: LD_ADDR_VAR 0 19
26141: PUSH
26142: LD_VAR 0 19
26146: PPUSH
26147: LD_INT 1
26149: PPUSH
26150: LD_VAR 0 9
26154: PPUSH
26155: CALL_OW 2
26159: ST_TO_ADDR
26160: GO 26191
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26162: LD_ADDR_VAR 0 19
26166: PUSH
26167: LD_VAR 0 19
26171: PPUSH
26172: LD_VAR 0 19
26176: PUSH
26177: LD_INT 1
26179: PLUS
26180: PPUSH
26181: LD_VAR 0 9
26185: PPUSH
26186: CALL_OW 2
26190: ST_TO_ADDR
26191: GO 26119
26193: POP
26194: POP
// if tmp then
26195: LD_VAR 0 19
26199: IFFALSE 26211
// f := tmp ;
26201: LD_ADDR_VAR 0 12
26205: PUSH
26206: LD_VAR 0 19
26210: ST_TO_ADDR
// end ; x := personel [ i ] ;
26211: LD_ADDR_VAR 0 13
26215: PUSH
26216: LD_VAR 0 6
26220: PUSH
26221: LD_VAR 0 8
26225: ARRAY
26226: ST_TO_ADDR
// if x = - 1 then
26227: LD_VAR 0 13
26231: PUSH
26232: LD_INT 1
26234: NEG
26235: EQUAL
26236: IFFALSE 26445
// begin for j in f do
26238: LD_ADDR_VAR 0 9
26242: PUSH
26243: LD_VAR 0 12
26247: PUSH
26248: FOR_IN
26249: IFFALSE 26441
// repeat InitHc ;
26251: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26255: LD_VAR 0 9
26259: PPUSH
26260: CALL_OW 266
26264: PUSH
26265: LD_INT 5
26267: EQUAL
26268: IFFALSE 26338
// begin if UnitsInside ( j ) < 3 then
26270: LD_VAR 0 9
26274: PPUSH
26275: CALL_OW 313
26279: PUSH
26280: LD_INT 3
26282: LESS
26283: IFFALSE 26319
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26285: LD_INT 0
26287: PPUSH
26288: LD_INT 5
26290: PUSH
26291: LD_INT 8
26293: PUSH
26294: LD_INT 9
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: LIST
26301: PUSH
26302: LD_VAR 0 17
26306: ARRAY
26307: PPUSH
26308: LD_VAR 0 4
26312: PPUSH
26313: CALL_OW 380
26317: GO 26336
// PrepareHuman ( false , i , skill ) ;
26319: LD_INT 0
26321: PPUSH
26322: LD_VAR 0 8
26326: PPUSH
26327: LD_VAR 0 4
26331: PPUSH
26332: CALL_OW 380
// end else
26336: GO 26355
// PrepareHuman ( false , i , skill ) ;
26338: LD_INT 0
26340: PPUSH
26341: LD_VAR 0 8
26345: PPUSH
26346: LD_VAR 0 4
26350: PPUSH
26351: CALL_OW 380
// un := CreateHuman ;
26355: LD_ADDR_VAR 0 14
26359: PUSH
26360: CALL_OW 44
26364: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26365: LD_ADDR_VAR 0 7
26369: PUSH
26370: LD_VAR 0 7
26374: PPUSH
26375: LD_INT 1
26377: PPUSH
26378: LD_VAR 0 14
26382: PPUSH
26383: CALL_OW 2
26387: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26388: LD_VAR 0 14
26392: PPUSH
26393: LD_VAR 0 9
26397: PPUSH
26398: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26402: LD_VAR 0 9
26406: PPUSH
26407: CALL_OW 313
26411: PUSH
26412: LD_INT 6
26414: EQUAL
26415: PUSH
26416: LD_VAR 0 9
26420: PPUSH
26421: CALL_OW 266
26425: PUSH
26426: LD_INT 32
26428: PUSH
26429: LD_INT 31
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: IN
26436: OR
26437: IFFALSE 26251
26439: GO 26248
26441: POP
26442: POP
// end else
26443: GO 26825
// for j = 1 to x do
26445: LD_ADDR_VAR 0 9
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_VAR 0 13
26459: PUSH
26460: FOR_TO
26461: IFFALSE 26823
// begin InitHc ;
26463: CALL_OW 19
// if not f then
26467: LD_VAR 0 12
26471: NOT
26472: IFFALSE 26561
// begin PrepareHuman ( false , i , skill ) ;
26474: LD_INT 0
26476: PPUSH
26477: LD_VAR 0 8
26481: PPUSH
26482: LD_VAR 0 4
26486: PPUSH
26487: CALL_OW 380
// un := CreateHuman ;
26491: LD_ADDR_VAR 0 14
26495: PUSH
26496: CALL_OW 44
26500: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26501: LD_ADDR_VAR 0 7
26505: PUSH
26506: LD_VAR 0 7
26510: PPUSH
26511: LD_INT 1
26513: PPUSH
26514: LD_VAR 0 14
26518: PPUSH
26519: CALL_OW 2
26523: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26524: LD_VAR 0 14
26528: PPUSH
26529: LD_VAR 0 1
26533: PPUSH
26534: CALL_OW 250
26538: PPUSH
26539: LD_VAR 0 1
26543: PPUSH
26544: CALL_OW 251
26548: PPUSH
26549: LD_INT 10
26551: PPUSH
26552: LD_INT 0
26554: PPUSH
26555: CALL_OW 50
// continue ;
26559: GO 26460
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26561: LD_VAR 0 12
26565: PUSH
26566: LD_INT 1
26568: ARRAY
26569: PPUSH
26570: CALL_OW 313
26574: PUSH
26575: LD_VAR 0 12
26579: PUSH
26580: LD_INT 1
26582: ARRAY
26583: PPUSH
26584: CALL_OW 266
26588: PUSH
26589: LD_INT 32
26591: PUSH
26592: LD_INT 31
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: IN
26599: AND
26600: PUSH
26601: LD_VAR 0 12
26605: PUSH
26606: LD_INT 1
26608: ARRAY
26609: PPUSH
26610: CALL_OW 313
26614: PUSH
26615: LD_INT 6
26617: EQUAL
26618: OR
26619: IFFALSE 26639
// f := Delete ( f , 1 ) ;
26621: LD_ADDR_VAR 0 12
26625: PUSH
26626: LD_VAR 0 12
26630: PPUSH
26631: LD_INT 1
26633: PPUSH
26634: CALL_OW 3
26638: ST_TO_ADDR
// if not f then
26639: LD_VAR 0 12
26643: NOT
26644: IFFALSE 26662
// begin x := x + 2 ;
26646: LD_ADDR_VAR 0 13
26650: PUSH
26651: LD_VAR 0 13
26655: PUSH
26656: LD_INT 2
26658: PLUS
26659: ST_TO_ADDR
// continue ;
26660: GO 26460
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26662: LD_VAR 0 12
26666: PUSH
26667: LD_INT 1
26669: ARRAY
26670: PPUSH
26671: CALL_OW 266
26675: PUSH
26676: LD_INT 5
26678: EQUAL
26679: IFFALSE 26753
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26681: LD_VAR 0 12
26685: PUSH
26686: LD_INT 1
26688: ARRAY
26689: PPUSH
26690: CALL_OW 313
26694: PUSH
26695: LD_INT 3
26697: LESS
26698: IFFALSE 26734
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26700: LD_INT 0
26702: PPUSH
26703: LD_INT 5
26705: PUSH
26706: LD_INT 8
26708: PUSH
26709: LD_INT 9
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: PUSH
26717: LD_VAR 0 17
26721: ARRAY
26722: PPUSH
26723: LD_VAR 0 4
26727: PPUSH
26728: CALL_OW 380
26732: GO 26751
// PrepareHuman ( false , i , skill ) ;
26734: LD_INT 0
26736: PPUSH
26737: LD_VAR 0 8
26741: PPUSH
26742: LD_VAR 0 4
26746: PPUSH
26747: CALL_OW 380
// end else
26751: GO 26770
// PrepareHuman ( false , i , skill ) ;
26753: LD_INT 0
26755: PPUSH
26756: LD_VAR 0 8
26760: PPUSH
26761: LD_VAR 0 4
26765: PPUSH
26766: CALL_OW 380
// un := CreateHuman ;
26770: LD_ADDR_VAR 0 14
26774: PUSH
26775: CALL_OW 44
26779: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26780: LD_ADDR_VAR 0 7
26784: PUSH
26785: LD_VAR 0 7
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: LD_VAR 0 14
26797: PPUSH
26798: CALL_OW 2
26802: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26803: LD_VAR 0 14
26807: PPUSH
26808: LD_VAR 0 12
26812: PUSH
26813: LD_INT 1
26815: ARRAY
26816: PPUSH
26817: CALL_OW 52
// end ;
26821: GO 26460
26823: POP
26824: POP
// end ;
26825: GO 25762
26827: POP
26828: POP
// result := result ^ buildings ;
26829: LD_ADDR_VAR 0 7
26833: PUSH
26834: LD_VAR 0 7
26838: PUSH
26839: LD_VAR 0 18
26843: ADD
26844: ST_TO_ADDR
// end else
26845: GO 26988
// begin for i = 1 to personel do
26847: LD_ADDR_VAR 0 8
26851: PUSH
26852: DOUBLE
26853: LD_INT 1
26855: DEC
26856: ST_TO_ADDR
26857: LD_VAR 0 6
26861: PUSH
26862: FOR_TO
26863: IFFALSE 26986
// begin if i > 4 then
26865: LD_VAR 0 8
26869: PUSH
26870: LD_INT 4
26872: GREATER
26873: IFFALSE 26877
// break ;
26875: GO 26986
// x := personel [ i ] ;
26877: LD_ADDR_VAR 0 13
26881: PUSH
26882: LD_VAR 0 6
26886: PUSH
26887: LD_VAR 0 8
26891: ARRAY
26892: ST_TO_ADDR
// if x = - 1 then
26893: LD_VAR 0 13
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: EQUAL
26902: IFFALSE 26906
// continue ;
26904: GO 26862
// PrepareHuman ( false , i , skill ) ;
26906: LD_INT 0
26908: PPUSH
26909: LD_VAR 0 8
26913: PPUSH
26914: LD_VAR 0 4
26918: PPUSH
26919: CALL_OW 380
// un := CreateHuman ;
26923: LD_ADDR_VAR 0 14
26927: PUSH
26928: CALL_OW 44
26932: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26933: LD_VAR 0 14
26937: PPUSH
26938: LD_VAR 0 1
26942: PPUSH
26943: CALL_OW 250
26947: PPUSH
26948: LD_VAR 0 1
26952: PPUSH
26953: CALL_OW 251
26957: PPUSH
26958: LD_INT 10
26960: PPUSH
26961: LD_INT 0
26963: PPUSH
26964: CALL_OW 50
// result := result ^ un ;
26968: LD_ADDR_VAR 0 7
26972: PUSH
26973: LD_VAR 0 7
26977: PUSH
26978: LD_VAR 0 14
26982: ADD
26983: ST_TO_ADDR
// end ;
26984: GO 26862
26986: POP
26987: POP
// end ; end ;
26988: LD_VAR 0 7
26992: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
26997: PPUSH
26998: PPUSH
26999: PPUSH
27000: PPUSH
27001: PPUSH
27002: PPUSH
27003: PPUSH
27004: PPUSH
27005: PPUSH
27006: PPUSH
27007: PPUSH
27008: PPUSH
27009: PPUSH
27010: PPUSH
// result := false ;
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_INT 0
27018: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27019: LD_VAR 0 1
27023: NOT
27024: PUSH
27025: LD_VAR 0 1
27029: PPUSH
27030: CALL_OW 266
27034: PUSH
27035: LD_INT 32
27037: PUSH
27038: LD_INT 33
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: IN
27045: NOT
27046: OR
27047: IFFALSE 27051
// exit ;
27049: GO 28160
// nat := GetNation ( tower ) ;
27051: LD_ADDR_VAR 0 12
27055: PUSH
27056: LD_VAR 0 1
27060: PPUSH
27061: CALL_OW 248
27065: ST_TO_ADDR
// side := GetSide ( tower ) ;
27066: LD_ADDR_VAR 0 16
27070: PUSH
27071: LD_VAR 0 1
27075: PPUSH
27076: CALL_OW 255
27080: ST_TO_ADDR
// x := GetX ( tower ) ;
27081: LD_ADDR_VAR 0 10
27085: PUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 250
27095: ST_TO_ADDR
// y := GetY ( tower ) ;
27096: LD_ADDR_VAR 0 11
27100: PUSH
27101: LD_VAR 0 1
27105: PPUSH
27106: CALL_OW 251
27110: ST_TO_ADDR
// if not x or not y then
27111: LD_VAR 0 10
27115: NOT
27116: PUSH
27117: LD_VAR 0 11
27121: NOT
27122: OR
27123: IFFALSE 27127
// exit ;
27125: GO 28160
// weapon := 0 ;
27127: LD_ADDR_VAR 0 18
27131: PUSH
27132: LD_INT 0
27134: ST_TO_ADDR
// fac_list := [ ] ;
27135: LD_ADDR_VAR 0 17
27139: PUSH
27140: EMPTY
27141: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27142: LD_ADDR_VAR 0 6
27146: PUSH
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL_OW 274
27156: PPUSH
27157: LD_VAR 0 2
27161: PPUSH
27162: LD_INT 0
27164: PPUSH
27165: CALL 24731 0 3
27169: PPUSH
27170: LD_INT 30
27172: PUSH
27173: LD_INT 3
27175: PUSH
27176: EMPTY
27177: LIST
27178: LIST
27179: PPUSH
27180: CALL_OW 72
27184: ST_TO_ADDR
// if not factories then
27185: LD_VAR 0 6
27189: NOT
27190: IFFALSE 27194
// exit ;
27192: GO 28160
// for i in factories do
27194: LD_ADDR_VAR 0 8
27198: PUSH
27199: LD_VAR 0 6
27203: PUSH
27204: FOR_IN
27205: IFFALSE 27230
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27207: LD_ADDR_VAR 0 17
27211: PUSH
27212: LD_VAR 0 17
27216: PUSH
27217: LD_VAR 0 8
27221: PPUSH
27222: CALL_OW 478
27226: UNION
27227: ST_TO_ADDR
27228: GO 27204
27230: POP
27231: POP
// if not fac_list then
27232: LD_VAR 0 17
27236: NOT
27237: IFFALSE 27241
// exit ;
27239: GO 28160
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27241: LD_ADDR_VAR 0 5
27245: PUSH
27246: LD_INT 4
27248: PUSH
27249: LD_INT 5
27251: PUSH
27252: LD_INT 9
27254: PUSH
27255: LD_INT 10
27257: PUSH
27258: LD_INT 6
27260: PUSH
27261: LD_INT 7
27263: PUSH
27264: LD_INT 11
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 27
27278: PUSH
27279: LD_INT 28
27281: PUSH
27282: LD_INT 26
27284: PUSH
27285: LD_INT 30
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 43
27296: PUSH
27297: LD_INT 44
27299: PUSH
27300: LD_INT 46
27302: PUSH
27303: LD_INT 45
27305: PUSH
27306: LD_INT 47
27308: PUSH
27309: LD_INT 49
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: LIST
27324: PUSH
27325: LD_VAR 0 12
27329: ARRAY
27330: ST_TO_ADDR
// list := list isect fac_list ;
27331: LD_ADDR_VAR 0 5
27335: PUSH
27336: LD_VAR 0 5
27340: PUSH
27341: LD_VAR 0 17
27345: ISECT
27346: ST_TO_ADDR
// if not list then
27347: LD_VAR 0 5
27351: NOT
27352: IFFALSE 27356
// exit ;
27354: GO 28160
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27356: LD_VAR 0 12
27360: PUSH
27361: LD_INT 3
27363: EQUAL
27364: PUSH
27365: LD_INT 49
27367: PUSH
27368: LD_VAR 0 5
27372: IN
27373: AND
27374: PUSH
27375: LD_INT 31
27377: PPUSH
27378: LD_VAR 0 16
27382: PPUSH
27383: CALL_OW 321
27387: PUSH
27388: LD_INT 2
27390: EQUAL
27391: AND
27392: IFFALSE 27452
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27394: LD_INT 22
27396: PUSH
27397: LD_VAR 0 16
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 35
27408: PUSH
27409: LD_INT 49
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: LD_INT 91
27418: PUSH
27419: LD_VAR 0 1
27423: PUSH
27424: LD_INT 10
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: LIST
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: PPUSH
27437: CALL_OW 69
27441: NOT
27442: IFFALSE 27452
// weapon := ru_time_lapser ;
27444: LD_ADDR_VAR 0 18
27448: PUSH
27449: LD_INT 49
27451: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27452: LD_VAR 0 12
27456: PUSH
27457: LD_INT 1
27459: PUSH
27460: LD_INT 2
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: IN
27467: PUSH
27468: LD_INT 11
27470: PUSH
27471: LD_VAR 0 5
27475: IN
27476: PUSH
27477: LD_INT 30
27479: PUSH
27480: LD_VAR 0 5
27484: IN
27485: OR
27486: AND
27487: PUSH
27488: LD_INT 6
27490: PPUSH
27491: LD_VAR 0 16
27495: PPUSH
27496: CALL_OW 321
27500: PUSH
27501: LD_INT 2
27503: EQUAL
27504: AND
27505: IFFALSE 27670
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27507: LD_INT 22
27509: PUSH
27510: LD_VAR 0 16
27514: PUSH
27515: EMPTY
27516: LIST
27517: LIST
27518: PUSH
27519: LD_INT 2
27521: PUSH
27522: LD_INT 35
27524: PUSH
27525: LD_INT 11
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 35
27534: PUSH
27535: LD_INT 30
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 91
27549: PUSH
27550: LD_VAR 0 1
27554: PUSH
27555: LD_INT 18
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: LIST
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: LIST
27567: PPUSH
27568: CALL_OW 69
27572: NOT
27573: PUSH
27574: LD_INT 22
27576: PUSH
27577: LD_VAR 0 16
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 2
27588: PUSH
27589: LD_INT 30
27591: PUSH
27592: LD_INT 32
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: PUSH
27599: LD_INT 30
27601: PUSH
27602: LD_INT 33
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 91
27616: PUSH
27617: LD_VAR 0 1
27621: PUSH
27622: LD_INT 12
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: LIST
27634: PUSH
27635: EMPTY
27636: LIST
27637: PPUSH
27638: CALL_OW 69
27642: PUSH
27643: LD_INT 2
27645: GREATER
27646: AND
27647: IFFALSE 27670
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27649: LD_ADDR_VAR 0 18
27653: PUSH
27654: LD_INT 11
27656: PUSH
27657: LD_INT 30
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_VAR 0 12
27668: ARRAY
27669: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27670: LD_VAR 0 18
27674: NOT
27675: PUSH
27676: LD_INT 40
27678: PPUSH
27679: LD_VAR 0 16
27683: PPUSH
27684: CALL_OW 321
27688: PUSH
27689: LD_INT 2
27691: EQUAL
27692: AND
27693: PUSH
27694: LD_INT 7
27696: PUSH
27697: LD_VAR 0 5
27701: IN
27702: PUSH
27703: LD_INT 28
27705: PUSH
27706: LD_VAR 0 5
27710: IN
27711: OR
27712: PUSH
27713: LD_INT 45
27715: PUSH
27716: LD_VAR 0 5
27720: IN
27721: OR
27722: AND
27723: IFFALSE 27977
// begin hex := GetHexInfo ( x , y ) ;
27725: LD_ADDR_VAR 0 4
27729: PUSH
27730: LD_VAR 0 10
27734: PPUSH
27735: LD_VAR 0 11
27739: PPUSH
27740: CALL_OW 546
27744: ST_TO_ADDR
// if hex [ 1 ] then
27745: LD_VAR 0 4
27749: PUSH
27750: LD_INT 1
27752: ARRAY
27753: IFFALSE 27757
// exit ;
27755: GO 28160
// height := hex [ 2 ] ;
27757: LD_ADDR_VAR 0 15
27761: PUSH
27762: LD_VAR 0 4
27766: PUSH
27767: LD_INT 2
27769: ARRAY
27770: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27771: LD_ADDR_VAR 0 14
27775: PUSH
27776: LD_INT 0
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: LD_INT 3
27784: PUSH
27785: LD_INT 5
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: ST_TO_ADDR
// for i in tmp do
27794: LD_ADDR_VAR 0 8
27798: PUSH
27799: LD_VAR 0 14
27803: PUSH
27804: FOR_IN
27805: IFFALSE 27975
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27807: LD_ADDR_VAR 0 9
27811: PUSH
27812: LD_VAR 0 10
27816: PPUSH
27817: LD_VAR 0 8
27821: PPUSH
27822: LD_INT 5
27824: PPUSH
27825: CALL_OW 272
27829: PUSH
27830: LD_VAR 0 11
27834: PPUSH
27835: LD_VAR 0 8
27839: PPUSH
27840: LD_INT 5
27842: PPUSH
27843: CALL_OW 273
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27852: LD_VAR 0 9
27856: PUSH
27857: LD_INT 1
27859: ARRAY
27860: PPUSH
27861: LD_VAR 0 9
27865: PUSH
27866: LD_INT 2
27868: ARRAY
27869: PPUSH
27870: CALL_OW 488
27874: IFFALSE 27973
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27876: LD_ADDR_VAR 0 4
27880: PUSH
27881: LD_VAR 0 9
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: LD_VAR 0 9
27894: PUSH
27895: LD_INT 2
27897: ARRAY
27898: PPUSH
27899: CALL_OW 546
27903: ST_TO_ADDR
// if hex [ 1 ] then
27904: LD_VAR 0 4
27908: PUSH
27909: LD_INT 1
27911: ARRAY
27912: IFFALSE 27916
// continue ;
27914: GO 27804
// h := hex [ 2 ] ;
27916: LD_ADDR_VAR 0 13
27920: PUSH
27921: LD_VAR 0 4
27925: PUSH
27926: LD_INT 2
27928: ARRAY
27929: ST_TO_ADDR
// if h + 7 < height then
27930: LD_VAR 0 13
27934: PUSH
27935: LD_INT 7
27937: PLUS
27938: PUSH
27939: LD_VAR 0 15
27943: LESS
27944: IFFALSE 27973
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27946: LD_ADDR_VAR 0 18
27950: PUSH
27951: LD_INT 7
27953: PUSH
27954: LD_INT 28
27956: PUSH
27957: LD_INT 45
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: LIST
27964: PUSH
27965: LD_VAR 0 12
27969: ARRAY
27970: ST_TO_ADDR
// break ;
27971: GO 27975
// end ; end ; end ;
27973: GO 27804
27975: POP
27976: POP
// end ; if not weapon then
27977: LD_VAR 0 18
27981: NOT
27982: IFFALSE 28042
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27984: LD_ADDR_VAR 0 5
27988: PUSH
27989: LD_VAR 0 5
27993: PUSH
27994: LD_INT 11
27996: PUSH
27997: LD_INT 30
27999: PUSH
28000: LD_INT 49
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: LIST
28007: DIFF
28008: ST_TO_ADDR
// if not list then
28009: LD_VAR 0 5
28013: NOT
28014: IFFALSE 28018
// exit ;
28016: GO 28160
// weapon := list [ rand ( 1 , list ) ] ;
28018: LD_ADDR_VAR 0 18
28022: PUSH
28023: LD_VAR 0 5
28027: PUSH
28028: LD_INT 1
28030: PPUSH
28031: LD_VAR 0 5
28035: PPUSH
28036: CALL_OW 12
28040: ARRAY
28041: ST_TO_ADDR
// end ; if weapon then
28042: LD_VAR 0 18
28046: IFFALSE 28160
// begin tmp := CostOfWeapon ( weapon ) ;
28048: LD_ADDR_VAR 0 14
28052: PUSH
28053: LD_VAR 0 18
28057: PPUSH
28058: CALL_OW 451
28062: ST_TO_ADDR
// j := GetBase ( tower ) ;
28063: LD_ADDR_VAR 0 9
28067: PUSH
28068: LD_VAR 0 1
28072: PPUSH
28073: CALL_OW 274
28077: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28078: LD_VAR 0 9
28082: PPUSH
28083: LD_INT 1
28085: PPUSH
28086: CALL_OW 275
28090: PUSH
28091: LD_VAR 0 14
28095: PUSH
28096: LD_INT 1
28098: ARRAY
28099: GREATEREQUAL
28100: PUSH
28101: LD_VAR 0 9
28105: PPUSH
28106: LD_INT 2
28108: PPUSH
28109: CALL_OW 275
28113: PUSH
28114: LD_VAR 0 14
28118: PUSH
28119: LD_INT 2
28121: ARRAY
28122: GREATEREQUAL
28123: AND
28124: PUSH
28125: LD_VAR 0 9
28129: PPUSH
28130: LD_INT 3
28132: PPUSH
28133: CALL_OW 275
28137: PUSH
28138: LD_VAR 0 14
28142: PUSH
28143: LD_INT 3
28145: ARRAY
28146: GREATEREQUAL
28147: AND
28148: IFFALSE 28160
// result := weapon ;
28150: LD_ADDR_VAR 0 3
28154: PUSH
28155: LD_VAR 0 18
28159: ST_TO_ADDR
// end ; end ;
28160: LD_VAR 0 3
28164: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28165: LD_INT 0
28167: PPUSH
28168: PPUSH
// result := true ;
28169: LD_ADDR_VAR 0 3
28173: PUSH
28174: LD_INT 1
28176: ST_TO_ADDR
// if array1 = array2 then
28177: LD_VAR 0 1
28181: PUSH
28182: LD_VAR 0 2
28186: EQUAL
28187: IFFALSE 28247
// begin for i = 1 to array1 do
28189: LD_ADDR_VAR 0 4
28193: PUSH
28194: DOUBLE
28195: LD_INT 1
28197: DEC
28198: ST_TO_ADDR
28199: LD_VAR 0 1
28203: PUSH
28204: FOR_TO
28205: IFFALSE 28243
// if array1 [ i ] <> array2 [ i ] then
28207: LD_VAR 0 1
28211: PUSH
28212: LD_VAR 0 4
28216: ARRAY
28217: PUSH
28218: LD_VAR 0 2
28222: PUSH
28223: LD_VAR 0 4
28227: ARRAY
28228: NONEQUAL
28229: IFFALSE 28241
// begin result := false ;
28231: LD_ADDR_VAR 0 3
28235: PUSH
28236: LD_INT 0
28238: ST_TO_ADDR
// break ;
28239: GO 28243
// end ;
28241: GO 28204
28243: POP
28244: POP
// end else
28245: GO 28255
// result := false ;
28247: LD_ADDR_VAR 0 3
28251: PUSH
28252: LD_INT 0
28254: ST_TO_ADDR
// end ;
28255: LD_VAR 0 3
28259: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28260: LD_INT 0
28262: PPUSH
28263: PPUSH
// if not array1 or not array2 then
28264: LD_VAR 0 1
28268: NOT
28269: PUSH
28270: LD_VAR 0 2
28274: NOT
28275: OR
28276: IFFALSE 28280
// exit ;
28278: GO 28344
// result := true ;
28280: LD_ADDR_VAR 0 3
28284: PUSH
28285: LD_INT 1
28287: ST_TO_ADDR
// for i = 1 to array1 do
28288: LD_ADDR_VAR 0 4
28292: PUSH
28293: DOUBLE
28294: LD_INT 1
28296: DEC
28297: ST_TO_ADDR
28298: LD_VAR 0 1
28302: PUSH
28303: FOR_TO
28304: IFFALSE 28342
// if array1 [ i ] <> array2 [ i ] then
28306: LD_VAR 0 1
28310: PUSH
28311: LD_VAR 0 4
28315: ARRAY
28316: PUSH
28317: LD_VAR 0 2
28321: PUSH
28322: LD_VAR 0 4
28326: ARRAY
28327: NONEQUAL
28328: IFFALSE 28340
// begin result := false ;
28330: LD_ADDR_VAR 0 3
28334: PUSH
28335: LD_INT 0
28337: ST_TO_ADDR
// break ;
28338: GO 28342
// end ;
28340: GO 28303
28342: POP
28343: POP
// end ;
28344: LD_VAR 0 3
28348: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28349: LD_INT 0
28351: PPUSH
28352: PPUSH
28353: PPUSH
// pom := GetBase ( fac ) ;
28354: LD_ADDR_VAR 0 5
28358: PUSH
28359: LD_VAR 0 1
28363: PPUSH
28364: CALL_OW 274
28368: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28369: LD_ADDR_VAR 0 4
28373: PUSH
28374: LD_VAR 0 2
28378: PUSH
28379: LD_INT 1
28381: ARRAY
28382: PPUSH
28383: LD_VAR 0 2
28387: PUSH
28388: LD_INT 2
28390: ARRAY
28391: PPUSH
28392: LD_VAR 0 2
28396: PUSH
28397: LD_INT 3
28399: ARRAY
28400: PPUSH
28401: LD_VAR 0 2
28405: PUSH
28406: LD_INT 4
28408: ARRAY
28409: PPUSH
28410: CALL_OW 449
28414: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28415: LD_ADDR_VAR 0 3
28419: PUSH
28420: LD_VAR 0 5
28424: PPUSH
28425: LD_INT 1
28427: PPUSH
28428: CALL_OW 275
28432: PUSH
28433: LD_VAR 0 4
28437: PUSH
28438: LD_INT 1
28440: ARRAY
28441: GREATEREQUAL
28442: PUSH
28443: LD_VAR 0 5
28447: PPUSH
28448: LD_INT 2
28450: PPUSH
28451: CALL_OW 275
28455: PUSH
28456: LD_VAR 0 4
28460: PUSH
28461: LD_INT 2
28463: ARRAY
28464: GREATEREQUAL
28465: AND
28466: PUSH
28467: LD_VAR 0 5
28471: PPUSH
28472: LD_INT 3
28474: PPUSH
28475: CALL_OW 275
28479: PUSH
28480: LD_VAR 0 4
28484: PUSH
28485: LD_INT 3
28487: ARRAY
28488: GREATEREQUAL
28489: AND
28490: ST_TO_ADDR
// end ;
28491: LD_VAR 0 3
28495: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28496: LD_INT 0
28498: PPUSH
28499: PPUSH
28500: PPUSH
28501: PPUSH
// pom := GetBase ( building ) ;
28502: LD_ADDR_VAR 0 3
28506: PUSH
28507: LD_VAR 0 1
28511: PPUSH
28512: CALL_OW 274
28516: ST_TO_ADDR
// if not pom then
28517: LD_VAR 0 3
28521: NOT
28522: IFFALSE 28526
// exit ;
28524: GO 28696
// btype := GetBType ( building ) ;
28526: LD_ADDR_VAR 0 5
28530: PUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 266
28540: ST_TO_ADDR
// if btype = b_armoury then
28541: LD_VAR 0 5
28545: PUSH
28546: LD_INT 4
28548: EQUAL
28549: IFFALSE 28559
// btype := b_barracks ;
28551: LD_ADDR_VAR 0 5
28555: PUSH
28556: LD_INT 5
28558: ST_TO_ADDR
// if btype = b_depot then
28559: LD_VAR 0 5
28563: PUSH
28564: LD_INT 0
28566: EQUAL
28567: IFFALSE 28577
// btype := b_warehouse ;
28569: LD_ADDR_VAR 0 5
28573: PUSH
28574: LD_INT 1
28576: ST_TO_ADDR
// if btype = b_workshop then
28577: LD_VAR 0 5
28581: PUSH
28582: LD_INT 2
28584: EQUAL
28585: IFFALSE 28595
// btype := b_factory ;
28587: LD_ADDR_VAR 0 5
28591: PUSH
28592: LD_INT 3
28594: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28595: LD_ADDR_VAR 0 4
28599: PUSH
28600: LD_VAR 0 5
28604: PPUSH
28605: LD_VAR 0 1
28609: PPUSH
28610: CALL_OW 248
28614: PPUSH
28615: CALL_OW 450
28619: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28620: LD_ADDR_VAR 0 2
28624: PUSH
28625: LD_VAR 0 3
28629: PPUSH
28630: LD_INT 1
28632: PPUSH
28633: CALL_OW 275
28637: PUSH
28638: LD_VAR 0 4
28642: PUSH
28643: LD_INT 1
28645: ARRAY
28646: GREATEREQUAL
28647: PUSH
28648: LD_VAR 0 3
28652: PPUSH
28653: LD_INT 2
28655: PPUSH
28656: CALL_OW 275
28660: PUSH
28661: LD_VAR 0 4
28665: PUSH
28666: LD_INT 2
28668: ARRAY
28669: GREATEREQUAL
28670: AND
28671: PUSH
28672: LD_VAR 0 3
28676: PPUSH
28677: LD_INT 3
28679: PPUSH
28680: CALL_OW 275
28684: PUSH
28685: LD_VAR 0 4
28689: PUSH
28690: LD_INT 3
28692: ARRAY
28693: GREATEREQUAL
28694: AND
28695: ST_TO_ADDR
// end ;
28696: LD_VAR 0 2
28700: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
28705: PPUSH
// pom := GetBase ( building ) ;
28706: LD_ADDR_VAR 0 4
28710: PUSH
28711: LD_VAR 0 1
28715: PPUSH
28716: CALL_OW 274
28720: ST_TO_ADDR
// if not pom then
28721: LD_VAR 0 4
28725: NOT
28726: IFFALSE 28730
// exit ;
28728: GO 28831
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28730: LD_ADDR_VAR 0 5
28734: PUSH
28735: LD_VAR 0 2
28739: PPUSH
28740: LD_VAR 0 1
28744: PPUSH
28745: CALL_OW 248
28749: PPUSH
28750: CALL_OW 450
28754: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28755: LD_ADDR_VAR 0 3
28759: PUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: LD_INT 1
28767: PPUSH
28768: CALL_OW 275
28772: PUSH
28773: LD_VAR 0 5
28777: PUSH
28778: LD_INT 1
28780: ARRAY
28781: GREATEREQUAL
28782: PUSH
28783: LD_VAR 0 4
28787: PPUSH
28788: LD_INT 2
28790: PPUSH
28791: CALL_OW 275
28795: PUSH
28796: LD_VAR 0 5
28800: PUSH
28801: LD_INT 2
28803: ARRAY
28804: GREATEREQUAL
28805: AND
28806: PUSH
28807: LD_VAR 0 4
28811: PPUSH
28812: LD_INT 3
28814: PPUSH
28815: CALL_OW 275
28819: PUSH
28820: LD_VAR 0 5
28824: PUSH
28825: LD_INT 3
28827: ARRAY
28828: GREATEREQUAL
28829: AND
28830: ST_TO_ADDR
// end ;
28831: LD_VAR 0 3
28835: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28836: LD_INT 0
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
28843: PPUSH
28844: PPUSH
28845: PPUSH
28846: PPUSH
28847: PPUSH
28848: PPUSH
// result := false ;
28849: LD_ADDR_VAR 0 8
28853: PUSH
28854: LD_INT 0
28856: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28857: LD_VAR 0 5
28861: NOT
28862: PUSH
28863: LD_VAR 0 1
28867: NOT
28868: OR
28869: PUSH
28870: LD_VAR 0 2
28874: NOT
28875: OR
28876: PUSH
28877: LD_VAR 0 3
28881: NOT
28882: OR
28883: IFFALSE 28887
// exit ;
28885: GO 29701
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28887: LD_ADDR_VAR 0 14
28891: PUSH
28892: LD_VAR 0 1
28896: PPUSH
28897: LD_VAR 0 2
28901: PPUSH
28902: LD_VAR 0 3
28906: PPUSH
28907: LD_VAR 0 4
28911: PPUSH
28912: LD_VAR 0 5
28916: PUSH
28917: LD_INT 1
28919: ARRAY
28920: PPUSH
28921: CALL_OW 248
28925: PPUSH
28926: LD_INT 0
28928: PPUSH
28929: CALL 30954 0 6
28933: ST_TO_ADDR
// if not hexes then
28934: LD_VAR 0 14
28938: NOT
28939: IFFALSE 28943
// exit ;
28941: GO 29701
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28943: LD_ADDR_VAR 0 17
28947: PUSH
28948: LD_VAR 0 5
28952: PPUSH
28953: LD_INT 22
28955: PUSH
28956: LD_VAR 0 13
28960: PPUSH
28961: CALL_OW 255
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 30
28975: PUSH
28976: LD_INT 0
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: PUSH
28983: LD_INT 30
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PPUSH
29002: CALL_OW 72
29006: ST_TO_ADDR
// for i = 1 to hexes do
29007: LD_ADDR_VAR 0 9
29011: PUSH
29012: DOUBLE
29013: LD_INT 1
29015: DEC
29016: ST_TO_ADDR
29017: LD_VAR 0 14
29021: PUSH
29022: FOR_TO
29023: IFFALSE 29699
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29025: LD_ADDR_VAR 0 13
29029: PUSH
29030: LD_VAR 0 14
29034: PUSH
29035: LD_VAR 0 9
29039: ARRAY
29040: PUSH
29041: LD_INT 1
29043: ARRAY
29044: PPUSH
29045: LD_VAR 0 14
29049: PUSH
29050: LD_VAR 0 9
29054: ARRAY
29055: PUSH
29056: LD_INT 2
29058: ARRAY
29059: PPUSH
29060: CALL_OW 428
29064: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29065: LD_VAR 0 14
29069: PUSH
29070: LD_VAR 0 9
29074: ARRAY
29075: PUSH
29076: LD_INT 1
29078: ARRAY
29079: PPUSH
29080: LD_VAR 0 14
29084: PUSH
29085: LD_VAR 0 9
29089: ARRAY
29090: PUSH
29091: LD_INT 2
29093: ARRAY
29094: PPUSH
29095: CALL_OW 351
29099: PUSH
29100: LD_VAR 0 14
29104: PUSH
29105: LD_VAR 0 9
29109: ARRAY
29110: PUSH
29111: LD_INT 1
29113: ARRAY
29114: PPUSH
29115: LD_VAR 0 14
29119: PUSH
29120: LD_VAR 0 9
29124: ARRAY
29125: PUSH
29126: LD_INT 2
29128: ARRAY
29129: PPUSH
29130: CALL_OW 488
29134: NOT
29135: OR
29136: PUSH
29137: LD_VAR 0 13
29141: PPUSH
29142: CALL_OW 247
29146: PUSH
29147: LD_INT 3
29149: EQUAL
29150: OR
29151: IFFALSE 29157
// exit ;
29153: POP
29154: POP
29155: GO 29701
// if not tmp then
29157: LD_VAR 0 13
29161: NOT
29162: IFFALSE 29166
// continue ;
29164: GO 29022
// result := true ;
29166: LD_ADDR_VAR 0 8
29170: PUSH
29171: LD_INT 1
29173: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29174: LD_VAR 0 6
29178: PUSH
29179: LD_VAR 0 13
29183: PPUSH
29184: CALL_OW 247
29188: PUSH
29189: LD_INT 2
29191: EQUAL
29192: AND
29193: PUSH
29194: LD_VAR 0 13
29198: PPUSH
29199: CALL_OW 263
29203: PUSH
29204: LD_INT 1
29206: EQUAL
29207: AND
29208: IFFALSE 29372
// begin if IsDrivenBy ( tmp ) then
29210: LD_VAR 0 13
29214: PPUSH
29215: CALL_OW 311
29219: IFFALSE 29223
// continue ;
29221: GO 29022
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29223: LD_VAR 0 6
29227: PPUSH
29228: LD_INT 3
29230: PUSH
29231: LD_INT 60
29233: PUSH
29234: EMPTY
29235: LIST
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: LD_INT 55
29246: PUSH
29247: EMPTY
29248: LIST
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PPUSH
29258: CALL_OW 72
29262: IFFALSE 29370
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29264: LD_ADDR_VAR 0 18
29268: PUSH
29269: LD_VAR 0 6
29273: PPUSH
29274: LD_INT 3
29276: PUSH
29277: LD_INT 60
29279: PUSH
29280: EMPTY
29281: LIST
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 3
29289: PUSH
29290: LD_INT 55
29292: PUSH
29293: EMPTY
29294: LIST
29295: PUSH
29296: EMPTY
29297: LIST
29298: LIST
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PPUSH
29304: CALL_OW 72
29308: PUSH
29309: LD_INT 1
29311: ARRAY
29312: ST_TO_ADDR
// if IsInUnit ( driver ) then
29313: LD_VAR 0 18
29317: PPUSH
29318: CALL_OW 310
29322: IFFALSE 29333
// ComExit ( driver ) ;
29324: LD_VAR 0 18
29328: PPUSH
29329: CALL 54735 0 1
// AddComEnterUnit ( driver , tmp ) ;
29333: LD_VAR 0 18
29337: PPUSH
29338: LD_VAR 0 13
29342: PPUSH
29343: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29347: LD_VAR 0 18
29351: PPUSH
29352: LD_VAR 0 7
29356: PPUSH
29357: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29361: LD_VAR 0 18
29365: PPUSH
29366: CALL_OW 181
// end ; continue ;
29370: GO 29022
// end ; if not cleaners or not tmp in cleaners then
29372: LD_VAR 0 6
29376: NOT
29377: PUSH
29378: LD_VAR 0 13
29382: PUSH
29383: LD_VAR 0 6
29387: IN
29388: NOT
29389: OR
29390: IFFALSE 29697
// begin if dep then
29392: LD_VAR 0 17
29396: IFFALSE 29532
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29398: LD_ADDR_VAR 0 16
29402: PUSH
29403: LD_VAR 0 17
29407: PUSH
29408: LD_INT 1
29410: ARRAY
29411: PPUSH
29412: CALL_OW 250
29416: PPUSH
29417: LD_VAR 0 17
29421: PUSH
29422: LD_INT 1
29424: ARRAY
29425: PPUSH
29426: CALL_OW 254
29430: PPUSH
29431: LD_INT 5
29433: PPUSH
29434: CALL_OW 272
29438: PUSH
29439: LD_VAR 0 17
29443: PUSH
29444: LD_INT 1
29446: ARRAY
29447: PPUSH
29448: CALL_OW 251
29452: PPUSH
29453: LD_VAR 0 17
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PPUSH
29462: CALL_OW 254
29466: PPUSH
29467: LD_INT 5
29469: PPUSH
29470: CALL_OW 273
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29479: LD_VAR 0 16
29483: PUSH
29484: LD_INT 1
29486: ARRAY
29487: PPUSH
29488: LD_VAR 0 16
29492: PUSH
29493: LD_INT 2
29495: ARRAY
29496: PPUSH
29497: CALL_OW 488
29501: IFFALSE 29532
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29503: LD_VAR 0 13
29507: PPUSH
29508: LD_VAR 0 16
29512: PUSH
29513: LD_INT 1
29515: ARRAY
29516: PPUSH
29517: LD_VAR 0 16
29521: PUSH
29522: LD_INT 2
29524: ARRAY
29525: PPUSH
29526: CALL_OW 111
// continue ;
29530: GO 29022
// end ; end ; r := GetDir ( tmp ) ;
29532: LD_ADDR_VAR 0 15
29536: PUSH
29537: LD_VAR 0 13
29541: PPUSH
29542: CALL_OW 254
29546: ST_TO_ADDR
// if r = 5 then
29547: LD_VAR 0 15
29551: PUSH
29552: LD_INT 5
29554: EQUAL
29555: IFFALSE 29565
// r := 0 ;
29557: LD_ADDR_VAR 0 15
29561: PUSH
29562: LD_INT 0
29564: ST_TO_ADDR
// for j = r to 5 do
29565: LD_ADDR_VAR 0 10
29569: PUSH
29570: DOUBLE
29571: LD_VAR 0 15
29575: DEC
29576: ST_TO_ADDR
29577: LD_INT 5
29579: PUSH
29580: FOR_TO
29581: IFFALSE 29695
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29583: LD_ADDR_VAR 0 11
29587: PUSH
29588: LD_VAR 0 13
29592: PPUSH
29593: CALL_OW 250
29597: PPUSH
29598: LD_VAR 0 10
29602: PPUSH
29603: LD_INT 2
29605: PPUSH
29606: CALL_OW 272
29610: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29611: LD_ADDR_VAR 0 12
29615: PUSH
29616: LD_VAR 0 13
29620: PPUSH
29621: CALL_OW 251
29625: PPUSH
29626: LD_VAR 0 10
29630: PPUSH
29631: LD_INT 2
29633: PPUSH
29634: CALL_OW 273
29638: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29639: LD_VAR 0 11
29643: PPUSH
29644: LD_VAR 0 12
29648: PPUSH
29649: CALL_OW 488
29653: PUSH
29654: LD_VAR 0 11
29658: PPUSH
29659: LD_VAR 0 12
29663: PPUSH
29664: CALL_OW 428
29668: NOT
29669: AND
29670: IFFALSE 29693
// begin ComMoveXY ( tmp , _x , _y ) ;
29672: LD_VAR 0 13
29676: PPUSH
29677: LD_VAR 0 11
29681: PPUSH
29682: LD_VAR 0 12
29686: PPUSH
29687: CALL_OW 111
// break ;
29691: GO 29695
// end ; end ;
29693: GO 29580
29695: POP
29696: POP
// end ; end ;
29697: GO 29022
29699: POP
29700: POP
// end ;
29701: LD_VAR 0 8
29705: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29706: LD_INT 0
29708: PPUSH
// result := true ;
29709: LD_ADDR_VAR 0 3
29713: PUSH
29714: LD_INT 1
29716: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29717: LD_VAR 0 2
29721: PUSH
29722: LD_INT 24
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29736
29728: LD_INT 33
29730: DOUBLE
29731: EQUAL
29732: IFTRUE 29736
29734: GO 29761
29736: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: LD_INT 32
29744: PPUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: CALL_OW 321
29754: PUSH
29755: LD_INT 2
29757: EQUAL
29758: ST_TO_ADDR
29759: GO 30077
29761: LD_INT 20
29763: DOUBLE
29764: EQUAL
29765: IFTRUE 29769
29767: GO 29794
29769: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29770: LD_ADDR_VAR 0 3
29774: PUSH
29775: LD_INT 6
29777: PPUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: CALL_OW 321
29787: PUSH
29788: LD_INT 2
29790: EQUAL
29791: ST_TO_ADDR
29792: GO 30077
29794: LD_INT 22
29796: DOUBLE
29797: EQUAL
29798: IFTRUE 29808
29800: LD_INT 36
29802: DOUBLE
29803: EQUAL
29804: IFTRUE 29808
29806: GO 29833
29808: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29809: LD_ADDR_VAR 0 3
29813: PUSH
29814: LD_INT 15
29816: PPUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 321
29826: PUSH
29827: LD_INT 2
29829: EQUAL
29830: ST_TO_ADDR
29831: GO 30077
29833: LD_INT 30
29835: DOUBLE
29836: EQUAL
29837: IFTRUE 29841
29839: GO 29866
29841: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29842: LD_ADDR_VAR 0 3
29846: PUSH
29847: LD_INT 20
29849: PPUSH
29850: LD_VAR 0 1
29854: PPUSH
29855: CALL_OW 321
29859: PUSH
29860: LD_INT 2
29862: EQUAL
29863: ST_TO_ADDR
29864: GO 30077
29866: LD_INT 28
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29880
29872: LD_INT 21
29874: DOUBLE
29875: EQUAL
29876: IFTRUE 29880
29878: GO 29905
29880: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29881: LD_ADDR_VAR 0 3
29885: PUSH
29886: LD_INT 21
29888: PPUSH
29889: LD_VAR 0 1
29893: PPUSH
29894: CALL_OW 321
29898: PUSH
29899: LD_INT 2
29901: EQUAL
29902: ST_TO_ADDR
29903: GO 30077
29905: LD_INT 16
29907: DOUBLE
29908: EQUAL
29909: IFTRUE 29913
29911: GO 29938
29913: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29914: LD_ADDR_VAR 0 3
29918: PUSH
29919: LD_INT 84
29921: PPUSH
29922: LD_VAR 0 1
29926: PPUSH
29927: CALL_OW 321
29931: PUSH
29932: LD_INT 2
29934: EQUAL
29935: ST_TO_ADDR
29936: GO 30077
29938: LD_INT 19
29940: DOUBLE
29941: EQUAL
29942: IFTRUE 29952
29944: LD_INT 23
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29977
29952: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 83
29960: PPUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 321
29970: PUSH
29971: LD_INT 2
29973: EQUAL
29974: ST_TO_ADDR
29975: GO 30077
29977: LD_INT 17
29979: DOUBLE
29980: EQUAL
29981: IFTRUE 29985
29983: GO 30010
29985: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29986: LD_ADDR_VAR 0 3
29990: PUSH
29991: LD_INT 39
29993: PPUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: CALL_OW 321
30003: PUSH
30004: LD_INT 2
30006: EQUAL
30007: ST_TO_ADDR
30008: GO 30077
30010: LD_INT 18
30012: DOUBLE
30013: EQUAL
30014: IFTRUE 30018
30016: GO 30043
30018: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30019: LD_ADDR_VAR 0 3
30023: PUSH
30024: LD_INT 40
30026: PPUSH
30027: LD_VAR 0 1
30031: PPUSH
30032: CALL_OW 321
30036: PUSH
30037: LD_INT 2
30039: EQUAL
30040: ST_TO_ADDR
30041: GO 30077
30043: LD_INT 27
30045: DOUBLE
30046: EQUAL
30047: IFTRUE 30051
30049: GO 30076
30051: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30052: LD_ADDR_VAR 0 3
30056: PUSH
30057: LD_INT 35
30059: PPUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 321
30069: PUSH
30070: LD_INT 2
30072: EQUAL
30073: ST_TO_ADDR
30074: GO 30077
30076: POP
// end ;
30077: LD_VAR 0 3
30081: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30082: LD_INT 0
30084: PPUSH
30085: PPUSH
30086: PPUSH
30087: PPUSH
30088: PPUSH
30089: PPUSH
30090: PPUSH
30091: PPUSH
30092: PPUSH
30093: PPUSH
30094: PPUSH
// result := false ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_INT 0
30102: ST_TO_ADDR
// if btype = b_depot then
30103: LD_VAR 0 2
30107: PUSH
30108: LD_INT 0
30110: EQUAL
30111: IFFALSE 30123
// begin result := true ;
30113: LD_ADDR_VAR 0 6
30117: PUSH
30118: LD_INT 1
30120: ST_TO_ADDR
// exit ;
30121: GO 30949
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30123: LD_VAR 0 1
30127: NOT
30128: PUSH
30129: LD_VAR 0 1
30133: PPUSH
30134: CALL_OW 266
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: IN
30149: NOT
30150: OR
30151: PUSH
30152: LD_VAR 0 2
30156: NOT
30157: OR
30158: PUSH
30159: LD_VAR 0 5
30163: PUSH
30164: LD_INT 0
30166: PUSH
30167: LD_INT 1
30169: PUSH
30170: LD_INT 2
30172: PUSH
30173: LD_INT 3
30175: PUSH
30176: LD_INT 4
30178: PUSH
30179: LD_INT 5
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: IN
30190: NOT
30191: OR
30192: PUSH
30193: LD_VAR 0 3
30197: PPUSH
30198: LD_VAR 0 4
30202: PPUSH
30203: CALL_OW 488
30207: NOT
30208: OR
30209: IFFALSE 30213
// exit ;
30211: GO 30949
// side := GetSide ( depot ) ;
30213: LD_ADDR_VAR 0 9
30217: PUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL_OW 255
30227: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30228: LD_VAR 0 9
30232: PPUSH
30233: LD_VAR 0 2
30237: PPUSH
30238: CALL 29706 0 2
30242: NOT
30243: IFFALSE 30247
// exit ;
30245: GO 30949
// pom := GetBase ( depot ) ;
30247: LD_ADDR_VAR 0 10
30251: PUSH
30252: LD_VAR 0 1
30256: PPUSH
30257: CALL_OW 274
30261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30262: LD_ADDR_VAR 0 11
30266: PUSH
30267: LD_VAR 0 2
30271: PPUSH
30272: LD_VAR 0 1
30276: PPUSH
30277: CALL_OW 248
30281: PPUSH
30282: CALL_OW 450
30286: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30287: LD_VAR 0 10
30291: PPUSH
30292: LD_INT 1
30294: PPUSH
30295: CALL_OW 275
30299: PUSH
30300: LD_VAR 0 11
30304: PUSH
30305: LD_INT 1
30307: ARRAY
30308: GREATEREQUAL
30309: PUSH
30310: LD_VAR 0 10
30314: PPUSH
30315: LD_INT 2
30317: PPUSH
30318: CALL_OW 275
30322: PUSH
30323: LD_VAR 0 11
30327: PUSH
30328: LD_INT 2
30330: ARRAY
30331: GREATEREQUAL
30332: AND
30333: PUSH
30334: LD_VAR 0 10
30338: PPUSH
30339: LD_INT 3
30341: PPUSH
30342: CALL_OW 275
30346: PUSH
30347: LD_VAR 0 11
30351: PUSH
30352: LD_INT 3
30354: ARRAY
30355: GREATEREQUAL
30356: AND
30357: NOT
30358: IFFALSE 30362
// exit ;
30360: GO 30949
// if GetBType ( depot ) = b_depot then
30362: LD_VAR 0 1
30366: PPUSH
30367: CALL_OW 266
30371: PUSH
30372: LD_INT 0
30374: EQUAL
30375: IFFALSE 30387
// dist := 28 else
30377: LD_ADDR_VAR 0 14
30381: PUSH
30382: LD_INT 28
30384: ST_TO_ADDR
30385: GO 30395
// dist := 36 ;
30387: LD_ADDR_VAR 0 14
30391: PUSH
30392: LD_INT 36
30394: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30395: LD_VAR 0 1
30399: PPUSH
30400: LD_VAR 0 3
30404: PPUSH
30405: LD_VAR 0 4
30409: PPUSH
30410: CALL_OW 297
30414: PUSH
30415: LD_VAR 0 14
30419: GREATER
30420: IFFALSE 30424
// exit ;
30422: GO 30949
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30424: LD_ADDR_VAR 0 12
30428: PUSH
30429: LD_VAR 0 2
30433: PPUSH
30434: LD_VAR 0 3
30438: PPUSH
30439: LD_VAR 0 4
30443: PPUSH
30444: LD_VAR 0 5
30448: PPUSH
30449: LD_VAR 0 1
30453: PPUSH
30454: CALL_OW 248
30458: PPUSH
30459: LD_INT 0
30461: PPUSH
30462: CALL 30954 0 6
30466: ST_TO_ADDR
// if not hexes then
30467: LD_VAR 0 12
30471: NOT
30472: IFFALSE 30476
// exit ;
30474: GO 30949
// hex := GetHexInfo ( x , y ) ;
30476: LD_ADDR_VAR 0 15
30480: PUSH
30481: LD_VAR 0 3
30485: PPUSH
30486: LD_VAR 0 4
30490: PPUSH
30491: CALL_OW 546
30495: ST_TO_ADDR
// if hex [ 1 ] then
30496: LD_VAR 0 15
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: IFFALSE 30508
// exit ;
30506: GO 30949
// height := hex [ 2 ] ;
30508: LD_ADDR_VAR 0 13
30512: PUSH
30513: LD_VAR 0 15
30517: PUSH
30518: LD_INT 2
30520: ARRAY
30521: ST_TO_ADDR
// for i = 1 to hexes do
30522: LD_ADDR_VAR 0 7
30526: PUSH
30527: DOUBLE
30528: LD_INT 1
30530: DEC
30531: ST_TO_ADDR
30532: LD_VAR 0 12
30536: PUSH
30537: FOR_TO
30538: IFFALSE 30868
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30540: LD_VAR 0 12
30544: PUSH
30545: LD_VAR 0 7
30549: ARRAY
30550: PUSH
30551: LD_INT 1
30553: ARRAY
30554: PPUSH
30555: LD_VAR 0 12
30559: PUSH
30560: LD_VAR 0 7
30564: ARRAY
30565: PUSH
30566: LD_INT 2
30568: ARRAY
30569: PPUSH
30570: CALL_OW 488
30574: NOT
30575: PUSH
30576: LD_VAR 0 12
30580: PUSH
30581: LD_VAR 0 7
30585: ARRAY
30586: PUSH
30587: LD_INT 1
30589: ARRAY
30590: PPUSH
30591: LD_VAR 0 12
30595: PUSH
30596: LD_VAR 0 7
30600: ARRAY
30601: PUSH
30602: LD_INT 2
30604: ARRAY
30605: PPUSH
30606: CALL_OW 428
30610: PUSH
30611: LD_INT 0
30613: GREATER
30614: OR
30615: PUSH
30616: LD_VAR 0 12
30620: PUSH
30621: LD_VAR 0 7
30625: ARRAY
30626: PUSH
30627: LD_INT 1
30629: ARRAY
30630: PPUSH
30631: LD_VAR 0 12
30635: PUSH
30636: LD_VAR 0 7
30640: ARRAY
30641: PUSH
30642: LD_INT 2
30644: ARRAY
30645: PPUSH
30646: CALL_OW 351
30650: OR
30651: IFFALSE 30657
// exit ;
30653: POP
30654: POP
30655: GO 30949
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30657: LD_ADDR_VAR 0 8
30661: PUSH
30662: LD_VAR 0 12
30666: PUSH
30667: LD_VAR 0 7
30671: ARRAY
30672: PUSH
30673: LD_INT 1
30675: ARRAY
30676: PPUSH
30677: LD_VAR 0 12
30681: PUSH
30682: LD_VAR 0 7
30686: ARRAY
30687: PUSH
30688: LD_INT 2
30690: ARRAY
30691: PPUSH
30692: CALL_OW 546
30696: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30697: LD_VAR 0 8
30701: PUSH
30702: LD_INT 1
30704: ARRAY
30705: PUSH
30706: LD_VAR 0 8
30710: PUSH
30711: LD_INT 2
30713: ARRAY
30714: PUSH
30715: LD_VAR 0 13
30719: PUSH
30720: LD_INT 2
30722: PLUS
30723: GREATER
30724: OR
30725: PUSH
30726: LD_VAR 0 8
30730: PUSH
30731: LD_INT 2
30733: ARRAY
30734: PUSH
30735: LD_VAR 0 13
30739: PUSH
30740: LD_INT 2
30742: MINUS
30743: LESS
30744: OR
30745: PUSH
30746: LD_VAR 0 8
30750: PUSH
30751: LD_INT 3
30753: ARRAY
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 8
30760: PUSH
30761: LD_INT 9
30763: PUSH
30764: LD_INT 10
30766: PUSH
30767: LD_INT 11
30769: PUSH
30770: LD_INT 12
30772: PUSH
30773: LD_INT 13
30775: PUSH
30776: LD_INT 16
30778: PUSH
30779: LD_INT 17
30781: PUSH
30782: LD_INT 18
30784: PUSH
30785: LD_INT 19
30787: PUSH
30788: LD_INT 20
30790: PUSH
30791: LD_INT 21
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: IN
30809: NOT
30810: OR
30811: PUSH
30812: LD_VAR 0 8
30816: PUSH
30817: LD_INT 5
30819: ARRAY
30820: NOT
30821: OR
30822: PUSH
30823: LD_VAR 0 8
30827: PUSH
30828: LD_INT 6
30830: ARRAY
30831: PUSH
30832: LD_INT 1
30834: PUSH
30835: LD_INT 2
30837: PUSH
30838: LD_INT 7
30840: PUSH
30841: LD_INT 9
30843: PUSH
30844: LD_INT 10
30846: PUSH
30847: LD_INT 11
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: IN
30858: NOT
30859: OR
30860: IFFALSE 30866
// exit ;
30862: POP
30863: POP
30864: GO 30949
// end ;
30866: GO 30537
30868: POP
30869: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30870: LD_VAR 0 9
30874: PPUSH
30875: LD_VAR 0 3
30879: PPUSH
30880: LD_VAR 0 4
30884: PPUSH
30885: LD_INT 20
30887: PPUSH
30888: CALL 22872 0 4
30892: PUSH
30893: LD_INT 4
30895: ARRAY
30896: IFFALSE 30900
// exit ;
30898: GO 30949
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30900: LD_VAR 0 2
30904: PUSH
30905: LD_INT 29
30907: PUSH
30908: LD_INT 30
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: IN
30915: PUSH
30916: LD_VAR 0 3
30920: PPUSH
30921: LD_VAR 0 4
30925: PPUSH
30926: LD_VAR 0 9
30930: PPUSH
30931: CALL_OW 440
30935: NOT
30936: AND
30937: IFFALSE 30941
// exit ;
30939: GO 30949
// result := true ;
30941: LD_ADDR_VAR 0 6
30945: PUSH
30946: LD_INT 1
30948: ST_TO_ADDR
// end ;
30949: LD_VAR 0 6
30953: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30954: LD_INT 0
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
30962: PPUSH
30963: PPUSH
30964: PPUSH
30965: PPUSH
30966: PPUSH
30967: PPUSH
30968: PPUSH
30969: PPUSH
30970: PPUSH
30971: PPUSH
30972: PPUSH
30973: PPUSH
30974: PPUSH
30975: PPUSH
30976: PPUSH
30977: PPUSH
30978: PPUSH
30979: PPUSH
30980: PPUSH
30981: PPUSH
30982: PPUSH
30983: PPUSH
30984: PPUSH
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
30991: PPUSH
30992: PPUSH
30993: PPUSH
30994: PPUSH
30995: PPUSH
30996: PPUSH
30997: PPUSH
30998: PPUSH
30999: PPUSH
31000: PPUSH
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
31012: PPUSH
31013: PPUSH
// result = [ ] ;
31014: LD_ADDR_VAR 0 7
31018: PUSH
31019: EMPTY
31020: ST_TO_ADDR
// temp_list = [ ] ;
31021: LD_ADDR_VAR 0 9
31025: PUSH
31026: EMPTY
31027: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31028: LD_VAR 0 4
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: LD_INT 1
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 3
31044: PUSH
31045: LD_INT 4
31047: PUSH
31048: LD_INT 5
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: IN
31059: NOT
31060: PUSH
31061: LD_VAR 0 1
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: IN
31076: PUSH
31077: LD_VAR 0 5
31081: PUSH
31082: LD_INT 1
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: LIST
31095: IN
31096: NOT
31097: AND
31098: OR
31099: IFFALSE 31103
// exit ;
31101: GO 49494
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31103: LD_VAR 0 1
31107: PUSH
31108: LD_INT 6
31110: PUSH
31111: LD_INT 7
31113: PUSH
31114: LD_INT 8
31116: PUSH
31117: LD_INT 13
31119: PUSH
31120: LD_INT 12
31122: PUSH
31123: LD_INT 15
31125: PUSH
31126: LD_INT 11
31128: PUSH
31129: LD_INT 14
31131: PUSH
31132: LD_INT 10
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: IN
31146: IFFALSE 31156
// btype = b_lab ;
31148: LD_ADDR_VAR 0 1
31152: PUSH
31153: LD_INT 6
31155: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31156: LD_VAR 0 6
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: IN
31175: NOT
31176: PUSH
31177: LD_VAR 0 1
31181: PUSH
31182: LD_INT 0
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 3
31193: PUSH
31194: LD_INT 6
31196: PUSH
31197: LD_INT 36
31199: PUSH
31200: LD_INT 4
31202: PUSH
31203: LD_INT 5
31205: PUSH
31206: LD_INT 31
31208: PUSH
31209: LD_INT 32
31211: PUSH
31212: LD_INT 33
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: IN
31228: NOT
31229: PUSH
31230: LD_VAR 0 6
31234: PUSH
31235: LD_INT 1
31237: EQUAL
31238: AND
31239: OR
31240: PUSH
31241: LD_VAR 0 1
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 3
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: IN
31256: NOT
31257: PUSH
31258: LD_VAR 0 6
31262: PUSH
31263: LD_INT 2
31265: EQUAL
31266: AND
31267: OR
31268: IFFALSE 31278
// mode = 0 ;
31270: LD_ADDR_VAR 0 6
31274: PUSH
31275: LD_INT 0
31277: ST_TO_ADDR
// case mode of 0 :
31278: LD_VAR 0 6
31282: PUSH
31283: LD_INT 0
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 42744
31291: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31292: LD_ADDR_VAR 0 11
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 0
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 1
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 0
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 1
31365: NEG
31366: PUSH
31367: EMPTY
31368: LIST
31369: LIST
31370: PUSH
31371: LD_INT 1
31373: NEG
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 0
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 2
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 2
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: NEG
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: LD_INT 3
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 3
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31485: LD_ADDR_VAR 0 12
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 1
31505: NEG
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 1
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 0
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 1
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: PUSH
31588: LD_INT 1
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 2
31608: NEG
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: NEG
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 2
31631: NEG
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: NEG
31643: PUSH
31644: LD_INT 0
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 3
31653: NEG
31654: PUSH
31655: LD_INT 1
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31681: LD_ADDR_VAR 0 13
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: LD_INT 1
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 1
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: PUSH
31727: LD_INT 0
31729: PUSH
31730: LD_INT 1
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: NEG
31740: PUSH
31741: LD_INT 0
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: LD_INT 1
31762: NEG
31763: PUSH
31764: LD_INT 2
31766: NEG
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: PUSH
31785: LD_INT 2
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 2
31816: NEG
31817: PUSH
31818: LD_INT 2
31820: NEG
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 2
31828: NEG
31829: PUSH
31830: LD_INT 3
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 3
31840: NEG
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 3
31852: NEG
31853: PUSH
31854: LD_INT 3
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31880: LD_ADDR_VAR 0 14
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 0
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 1
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: NEG
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: LD_INT 2
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 0
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: LD_INT 1
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: LD_INT 1
32026: NEG
32027: PUSH
32028: LD_INT 3
32030: NEG
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: LD_INT 3
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 1
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32076: LD_ADDR_VAR 0 15
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 2
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 1
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 1
32188: NEG
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: NEG
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 2
32210: NEG
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: LD_INT 1
32225: NEG
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 3
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 3
32243: PUSH
32244: LD_INT 1
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32269: LD_ADDR_VAR 0 16
32273: PUSH
32274: LD_INT 0
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 0
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: EMPTY
32292: LIST
32293: LIST
32294: PUSH
32295: LD_INT 1
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_INT 1
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 0
32317: PUSH
32318: LD_INT 1
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 1
32327: NEG
32328: PUSH
32329: LD_INT 0
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 1
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 2
32362: PUSH
32363: LD_INT 1
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 1
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: NEG
32405: PUSH
32406: LD_INT 2
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 3
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 3
32426: PUSH
32427: LD_INT 3
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: LD_INT 3
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32462: LD_ADDR_VAR 0 17
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 0
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 1
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 0
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 1
32531: NEG
32532: PUSH
32533: LD_INT 1
32535: NEG
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 2
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 2
32597: PUSH
32598: LD_INT 2
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: NEG
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 2
32649: NEG
32650: PUSH
32651: LD_INT 1
32653: NEG
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 2
32661: NEG
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32692: LD_ADDR_VAR 0 18
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: LD_INT 1
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 0
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 1
32750: NEG
32751: PUSH
32752: LD_INT 0
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 1
32761: NEG
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: LD_INT 2
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: LD_INT 2
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 2
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 1
32837: PUSH
32838: LD_INT 2
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 2
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 2
32868: NEG
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: NEG
32880: PUSH
32881: LD_INT 1
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: LD_INT 2
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32922: LD_ADDR_VAR 0 19
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 0
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 0
32939: PUSH
32940: LD_INT 1
32942: NEG
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 1
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 1
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 2
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 2
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33152: LD_ADDR_VAR 0 20
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 0
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 1
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 0
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 1
33221: NEG
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 2
33237: NEG
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: PUSH
33268: LD_INT 0
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: PUSH
33278: LD_INT 1
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 2
33287: PUSH
33288: LD_INT 2
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: LD_INT 1
33297: PUSH
33298: LD_INT 2
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: LD_INT 1
33321: PUSH
33322: EMPTY
33323: LIST
33324: LIST
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: NEG
33340: PUSH
33341: LD_INT 1
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 2
33351: NEG
33352: PUSH
33353: LD_INT 2
33355: NEG
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33382: LD_ADDR_VAR 0 21
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 0
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 0
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 1
33451: NEG
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: LD_INT 2
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 0
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 1
33489: NEG
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 2
33497: PUSH
33498: LD_INT 0
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 2
33507: PUSH
33508: LD_INT 1
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: PUSH
33518: LD_INT 2
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 1
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 2
33558: NEG
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: LD_INT 2
33569: NEG
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 2
33581: NEG
33582: PUSH
33583: LD_INT 2
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33612: LD_ADDR_VAR 0 22
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 2
33747: PUSH
33748: LD_INT 2
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 1
33757: PUSH
33758: LD_INT 2
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: LD_INT 1
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 2
33799: NEG
33800: PUSH
33801: LD_INT 1
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: NEG
33812: PUSH
33813: LD_INT 2
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33842: LD_ADDR_VAR 0 23
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 0
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 0
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 1
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 1
33911: NEG
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: LD_INT 2
33927: NEG
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: LD_INT 1
33949: NEG
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 2
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 0
33997: PUSH
33998: LD_INT 2
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: NEG
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 2
34018: NEG
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: LD_INT 2
34029: NEG
34030: PUSH
34031: LD_INT 1
34033: NEG
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: NEG
34042: PUSH
34043: LD_INT 2
34045: NEG
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 3
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 1
34065: NEG
34066: PUSH
34067: LD_INT 3
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34122: LD_ADDR_VAR 0 24
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 0
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: LD_INT 0
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 1
34160: PUSH
34161: LD_INT 1
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 0
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 1
34191: NEG
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 2
34207: NEG
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 1
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: LD_INT 0
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 2
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 2
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 1
34333: PUSH
34334: LD_INT 2
34336: NEG
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 2
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 3
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 3
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34398: LD_ADDR_VAR 0 25
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 0
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: LD_INT 0
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: PUSH
34427: LD_INT 0
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 1
34456: NEG
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: NEG
34468: PUSH
34469: LD_INT 1
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: LD_INT 2
34483: NEG
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: LD_INT 2
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: LD_INT 1
34505: NEG
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 2
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 1
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: LD_INT 2
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 1
34563: NEG
34564: PUSH
34565: LD_INT 1
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: NEG
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 2
34585: NEG
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 2
34597: NEG
34598: PUSH
34599: LD_INT 2
34601: NEG
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 3
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 3
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 2
34629: PUSH
34630: LD_INT 3
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: PUSH
34637: LD_INT 1
34639: PUSH
34640: LD_INT 3
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34672: LD_ADDR_VAR 0 26
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 0
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 1
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 1
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: LD_INT 0
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: LD_INT 1
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: LD_INT 2
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 0
34765: PUSH
34766: LD_INT 2
34768: NEG
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: LD_INT 1
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: LD_INT 2
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 0
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: NEG
34838: PUSH
34839: LD_INT 1
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 2
34848: NEG
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: PUSH
34884: LD_INT 3
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: LD_INT 1
34893: PUSH
34894: LD_INT 3
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34948: LD_ADDR_VAR 0 27
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 0
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 0
34996: PUSH
34997: LD_INT 1
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 1
35006: NEG
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: LD_INT 1
35021: NEG
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: NEG
35030: PUSH
35031: LD_INT 2
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 2
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: PUSH
35084: LD_INT 2
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 2
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 2
35124: NEG
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: NEG
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 2
35147: NEG
35148: PUSH
35149: LD_INT 2
35151: NEG
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 1
35159: NEG
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: NEG
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 3
35181: NEG
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 3
35193: NEG
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35228: LD_ADDR_VAR 0 28
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: LD_INT 0
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 1
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 0
35276: PUSH
35277: LD_INT 1
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 1
35286: NEG
35287: PUSH
35288: LD_INT 0
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 1
35297: NEG
35298: PUSH
35299: LD_INT 1
35301: NEG
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 1
35309: NEG
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 1
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 0
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: PUSH
35354: LD_INT 1
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 2
35363: PUSH
35364: LD_INT 2
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 2
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: NEG
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: LD_INT 3
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: NEG
35452: PUSH
35453: LD_INT 3
35455: NEG
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 3
35463: NEG
35464: PUSH
35465: LD_INT 1
35467: NEG
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 3
35475: NEG
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: LIST
35500: LIST
35501: LIST
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35510: LD_ADDR_VAR 0 29
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 0
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 1
35538: PUSH
35539: LD_INT 0
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: PUSH
35549: LD_INT 1
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 2
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 1
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 1
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 2
35688: NEG
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 2
35700: NEG
35701: PUSH
35702: LD_INT 3
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 3
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: PUSH
35734: LD_INT 3
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 2
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 3
35754: NEG
35755: PUSH
35756: LD_INT 2
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35789: LD_ADDR_VAR 0 30
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 1
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 0
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 0
35882: PUSH
35883: LD_INT 2
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 2
35904: PUSH
35905: LD_INT 0
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 2
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 2
35924: PUSH
35925: LD_INT 2
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 1
35934: PUSH
35935: LD_INT 2
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 1
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: NEG
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: LD_INT 2
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 3
36001: PUSH
36002: LD_INT 2
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 3
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 2
36021: NEG
36022: PUSH
36023: LD_INT 1
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: LD_INT 3
36032: NEG
36033: PUSH
36034: LD_INT 1
36036: NEG
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36067: LD_ADDR_VAR 0 31
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: LD_INT 0
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: NEG
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: LD_INT 1
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 1
36125: NEG
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 2
36171: PUSH
36172: LD_INT 0
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 2
36232: NEG
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: LD_INT 2
36248: NEG
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: LD_INT 3
36260: NEG
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 3
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 3
36310: NEG
36311: PUSH
36312: LD_INT 2
36314: NEG
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36345: LD_ADDR_VAR 0 32
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 0
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 0
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: NEG
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 1
36426: NEG
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: PUSH
36461: LD_INT 1
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: LD_INT 2
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: LD_INT 2
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: LD_INT 1
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: NEG
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 1
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 1
36534: NEG
36535: PUSH
36536: LD_INT 3
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 3
36557: PUSH
36558: LD_INT 2
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: LD_INT 3
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 2
36577: NEG
36578: PUSH
36579: LD_INT 1
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 3
36588: NEG
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36623: LD_ADDR_VAR 0 33
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 0
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 1
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: LD_INT 0
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 2
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: LD_INT 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 2
36778: NEG
36779: PUSH
36780: LD_INT 0
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: NEG
36790: PUSH
36791: LD_INT 1
36793: NEG
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 2
36801: NEG
36802: PUSH
36803: LD_INT 2
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: LD_INT 3
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 1
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 3
36836: PUSH
36837: LD_INT 1
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 1
36846: PUSH
36847: LD_INT 3
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 2
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 3
36867: NEG
36868: PUSH
36869: LD_INT 2
36871: NEG
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: LIST
36899: LIST
36900: LIST
36901: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36902: LD_ADDR_VAR 0 34
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 0
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: LD_INT 1
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 1
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: LD_INT 1
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 1
36960: NEG
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 1
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 2
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 0
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 2
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 2
37027: PUSH
37028: LD_INT 2
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 1
37047: NEG
37048: PUSH
37049: LD_INT 1
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 2
37058: NEG
37059: PUSH
37060: LD_INT 0
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 2
37069: NEG
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: NEG
37082: PUSH
37083: LD_INT 2
37085: NEG
37086: PUSH
37087: EMPTY
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 1
37093: NEG
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: PUSH
37114: LD_INT 3
37116: PUSH
37117: LD_INT 2
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: LD_INT 3
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: NEG
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 3
37147: NEG
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37182: LD_ADDR_VAR 0 35
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 0
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: LD_INT 1
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 0
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 1
37240: NEG
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: NEG
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37294: LD_ADDR_VAR 0 36
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 1
37387: PUSH
37388: LD_INT 2
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37406: LD_ADDR_VAR 0 37
37410: PUSH
37411: LD_INT 0
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 1
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 0
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: NEG
37465: PUSH
37466: LD_INT 0
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: LD_INT 1
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 1
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37518: LD_ADDR_VAR 0 38
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 0
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 0
37535: PUSH
37536: LD_INT 1
37538: NEG
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 0
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 1
37587: NEG
37588: PUSH
37589: LD_INT 1
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37630: LD_ADDR_VAR 0 39
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: LD_INT 1
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: EMPTY
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: LD_INT 1
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: LD_INT 0
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 1
37699: NEG
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: NEG
37712: PUSH
37713: LD_INT 2
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37742: LD_ADDR_VAR 0 40
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: LD_INT 1
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 1
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: LD_INT 0
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 1
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37854: LD_ADDR_VAR 0 41
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 0
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 0
37871: PUSH
37872: LD_INT 1
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 0
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: LD_INT 1
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 0
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: NEG
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 2
37939: NEG
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 2
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 2
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 1
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: PUSH
38007: LD_INT 2
38009: NEG
38010: PUSH
38011: LD_INT 0
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 2
38032: NEG
38033: PUSH
38034: LD_INT 2
38036: NEG
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: LD_INT 3
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 1
38059: NEG
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 3
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: PUSH
38088: LD_INT 2
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: PUSH
38098: LD_INT 3
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: PUSH
38108: LD_INT 3
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 2
38117: NEG
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 3
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 3
38151: NEG
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 3
38163: NEG
38164: PUSH
38165: LD_INT 3
38167: NEG
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38204: LD_ADDR_VAR 0 42
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 1
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: NEG
38263: PUSH
38264: LD_INT 0
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 1
38285: NEG
38286: PUSH
38287: LD_INT 2
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: LD_INT 0
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 1
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: LD_INT 1
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 2
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: LD_INT 2
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: LD_INT 2
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: LD_INT 3
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: LD_INT 2
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: LD_INT 3
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 3
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: LD_INT 3
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 3
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 3
38501: NEG
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 3
38513: NEG
38514: PUSH
38515: LD_INT 3
38517: NEG
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38554: LD_ADDR_VAR 0 43
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 1
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 0
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: LD_INT 1
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: NEG
38613: PUSH
38614: LD_INT 0
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: NEG
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 2
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: LD_INT 2
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 0
38699: PUSH
38700: LD_INT 2
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 3
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 2
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 3
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 3
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: PUSH
38809: LD_INT 3
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 0
38818: PUSH
38819: LD_INT 3
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 3
38850: NEG
38851: PUSH
38852: LD_INT 0
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: LD_INT 3
38861: NEG
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38902: LD_ADDR_VAR 0 44
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 1
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 0
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 2
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 2
39057: NEG
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 2
39068: NEG
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 2
39080: NEG
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: LD_INT 3
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 2
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 3
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 3
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: LD_INT 3
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: PUSH
39156: LD_INT 3
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 3
39176: NEG
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 3
39187: NEG
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 2
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 3
39211: NEG
39212: PUSH
39213: LD_INT 3
39215: NEG
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39252: LD_ADDR_VAR 0 45
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 1
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 1
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: LD_INT 2
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: LD_INT 1
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 2
39430: NEG
39431: PUSH
39432: LD_INT 2
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: LD_INT 3
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 3
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 3
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 3
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 3
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: LD_INT 2
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 3
39549: NEG
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 3
39561: NEG
39562: PUSH
39563: LD_INT 3
39565: NEG
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39602: LD_ADDR_VAR 0 46
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: PUSH
39617: LD_INT 0
39619: PUSH
39620: LD_INT 1
39622: NEG
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 1
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 0
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 1
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: LD_INT 2
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: LD_INT 2
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 3
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: LD_INT 3
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: LD_INT 2
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 1
39828: NEG
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 3
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 3
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 3
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 3
39898: NEG
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 3
39909: NEG
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39950: LD_ADDR_VAR 0 47
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: NEG
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 2
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40101: LD_ADDR_VAR 0 48
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: LD_INT 1
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: NEG
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 0
40194: PUSH
40195: LD_INT 2
40197: NEG
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 2
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40248: LD_ADDR_VAR 0 49
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 0
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 1
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40392: LD_ADDR_VAR 0 50
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 0
40440: PUSH
40441: LD_INT 1
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 1
40461: NEG
40462: PUSH
40463: LD_INT 1
40465: NEG
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 2
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 2
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40536: LD_ADDR_VAR 0 51
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 0
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 0
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: LD_INT 2
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: LD_INT 0
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: NEG
40660: PUSH
40661: LD_INT 1
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40683: LD_ADDR_VAR 0 52
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 0
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 0
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: LD_INT 1
40756: NEG
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: LD_INT 2
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 2
40810: NEG
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40834: LD_ADDR_VAR 0 53
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 0
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: NEG
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 1
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 2
40959: PUSH
40960: LD_INT 1
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 2
40969: PUSH
40970: LD_INT 2
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 1
40979: PUSH
40980: LD_INT 2
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 2
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: LD_INT 1
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: NEG
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: NEG
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: LD_INT 2
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41064: LD_ADDR_VAR 0 54
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 0
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 0
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: NEG
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 2
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: LD_INT 2
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: LD_INT 0
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 2
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 2
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 2
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: NEG
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: NEG
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41294: LD_ADDR_VAR 0 55
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 1
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 1
41367: NEG
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 2
41429: PUSH
41430: LD_INT 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: NEG
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: NEG
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: NEG
41494: PUSH
41495: LD_INT 2
41497: NEG
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41524: LD_ADDR_VAR 0 56
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: PUSH
41539: LD_INT 0
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 0
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: LD_INT 2
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: LD_INT 2
41649: PUSH
41650: LD_INT 1
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 2
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: NEG
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: NEG
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: LD_INT 2
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41754: LD_ADDR_VAR 0 57
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 0
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 1
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 1
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 0
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 1
41827: NEG
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 2
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41984: LD_ADDR_VAR 0 58
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 1
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 0
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 2
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 1
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: LD_INT 0
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 2
42119: PUSH
42120: LD_INT 2
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 0
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: NEG
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: NEG
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 2
42183: NEG
42184: PUSH
42185: LD_INT 2
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42214: LD_ADDR_VAR 0 59
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 0
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: PUSH
42243: LD_INT 0
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 0
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: NEG
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42302: LD_ADDR_VAR 0 60
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 0
42319: PUSH
42320: LD_INT 1
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: LD_INT 1
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 1
42360: NEG
42361: PUSH
42362: LD_INT 0
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42390: LD_ADDR_VAR 0 61
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: LD_INT 0
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42478: LD_ADDR_VAR 0 62
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: LD_INT 0
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: LD_INT 1
42498: NEG
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42566: LD_ADDR_VAR 0 63
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: LD_INT 1
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 1
42624: NEG
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 1
42635: NEG
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42654: LD_ADDR_VAR 0 64
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 1
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: ST_TO_ADDR
// end ; 1 :
42742: GO 48639
42744: LD_INT 1
42746: DOUBLE
42747: EQUAL
42748: IFTRUE 42752
42750: GO 45375
42752: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42753: LD_ADDR_VAR 0 11
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 3
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42797: LD_ADDR_VAR 0 12
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42838: LD_ADDR_VAR 0 13
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42878: LD_ADDR_VAR 0 14
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42919: LD_ADDR_VAR 0 15
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42963: LD_ADDR_VAR 0 16
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 3
42994: NEG
42995: PUSH
42996: LD_INT 3
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43009: LD_ADDR_VAR 0 17
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 0
43028: PUSH
43029: LD_INT 3
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43053: LD_ADDR_VAR 0 18
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 3
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 3
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43094: LD_ADDR_VAR 0 19
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: LD_INT 3
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43134: LD_ADDR_VAR 0 20
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 0
43151: PUSH
43152: LD_INT 3
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43175: LD_ADDR_VAR 0 21
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43219: LD_ADDR_VAR 0 22
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: LD_INT 3
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: NEG
43239: PUSH
43240: LD_INT 2
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 3
43250: NEG
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43265: LD_ADDR_VAR 0 23
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 3
43275: NEG
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 4
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 3
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: LIST
43308: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43309: LD_ADDR_VAR 0 24
43313: PUSH
43314: LD_INT 3
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 3
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 4
43337: PUSH
43338: LD_INT 1
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: LIST
43349: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43350: LD_ADDR_VAR 0 25
43354: PUSH
43355: LD_INT 3
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 4
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 3
43377: PUSH
43378: LD_INT 4
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43390: LD_ADDR_VAR 0 26
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 4
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: LD_INT 3
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43431: LD_ADDR_VAR 0 27
43435: PUSH
43436: LD_INT 3
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 4
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43475: LD_ADDR_VAR 0 28
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: LD_INT 3
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 3
43494: NEG
43495: PUSH
43496: LD_INT 4
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: NEG
43507: PUSH
43508: LD_INT 3
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: LIST
43520: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43521: LD_ADDR_VAR 0 29
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 3
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 3
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 2
43554: NEG
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: LD_INT 4
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 0
43574: PUSH
43575: LD_INT 4
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: LD_INT 3
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: LD_INT 5
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: LD_INT 5
43611: NEG
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: LD_INT 4
43622: NEG
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: LD_INT 6
43634: NEG
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: LD_INT 6
43645: NEG
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 5
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43676: LD_ADDR_VAR 0 30
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 3
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 4
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 4
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 4
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 5
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 5
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 5
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 6
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 6
43797: PUSH
43798: LD_INT 1
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43819: LD_ADDR_VAR 0 31
43823: PUSH
43824: LD_INT 3
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 4
43856: PUSH
43857: LD_INT 3
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 4
43866: PUSH
43867: LD_INT 4
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: LD_INT 4
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 5
43886: PUSH
43887: LD_INT 4
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 5
43896: PUSH
43897: LD_INT 5
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 4
43906: PUSH
43907: LD_INT 5
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 6
43916: PUSH
43917: LD_INT 5
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 6
43926: PUSH
43927: LD_INT 6
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 5
43936: PUSH
43937: LD_INT 6
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43958: LD_ADDR_VAR 0 32
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 3
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 0
43975: PUSH
43976: LD_INT 3
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: NEG
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 4
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 4
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 3
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: PUSH
44028: LD_INT 5
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 5
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: LD_INT 4
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 6
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 6
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: LD_INT 5
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44101: LD_ADDR_VAR 0 33
44105: PUSH
44106: LD_INT 2
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 3
44119: NEG
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 3
44130: NEG
44131: PUSH
44132: LD_INT 1
44134: NEG
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 4
44153: NEG
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 4
44164: NEG
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 4
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 5
44187: NEG
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 5
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 5
44210: NEG
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 6
44221: NEG
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 6
44232: NEG
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44256: LD_ADDR_VAR 0 34
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: LD_INT 2
44279: NEG
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 3
44287: NEG
44288: PUSH
44289: LD_INT 3
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: NEG
44300: PUSH
44301: LD_INT 4
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 4
44311: NEG
44312: PUSH
44313: LD_INT 3
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 4
44323: NEG
44324: PUSH
44325: LD_INT 4
44327: NEG
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 4
44335: NEG
44336: PUSH
44337: LD_INT 5
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 5
44347: NEG
44348: PUSH
44349: LD_INT 4
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 5
44359: NEG
44360: PUSH
44361: LD_INT 5
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 5
44371: NEG
44372: PUSH
44373: LD_INT 6
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 6
44383: NEG
44384: PUSH
44385: LD_INT 5
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 6
44395: NEG
44396: PUSH
44397: LD_INT 6
44399: NEG
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44419: LD_ADDR_VAR 0 41
44423: PUSH
44424: LD_INT 0
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: NEG
44438: PUSH
44439: LD_INT 3
44441: NEG
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 2
44452: NEG
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44463: LD_ADDR_VAR 0 42
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 2
44480: PUSH
44481: LD_INT 1
44483: NEG
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 3
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44504: LD_ADDR_VAR 0 43
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44544: LD_ADDR_VAR 0 44
44548: PUSH
44549: LD_INT 0
44551: PUSH
44552: LD_INT 2
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 1
44561: PUSH
44562: LD_INT 3
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 1
44571: NEG
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44585: LD_ADDR_VAR 0 45
44589: PUSH
44590: LD_INT 2
44592: NEG
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44629: LD_ADDR_VAR 0 46
44633: PUSH
44634: LD_INT 2
44636: NEG
44637: PUSH
44638: LD_INT 2
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 3
44660: NEG
44661: PUSH
44662: LD_INT 2
44664: NEG
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44675: LD_ADDR_VAR 0 47
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 3
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 3
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44708: LD_ADDR_VAR 0 48
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44739: LD_ADDR_VAR 0 49
44743: PUSH
44744: LD_INT 3
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 3
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44768: LD_ADDR_VAR 0 50
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: LD_INT 3
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 3
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44797: LD_ADDR_VAR 0 51
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 2
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44828: LD_ADDR_VAR 0 52
44832: PUSH
44833: LD_INT 3
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: NEG
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44861: LD_ADDR_VAR 0 53
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 3
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 3
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44905: LD_ADDR_VAR 0 54
44909: PUSH
44910: LD_INT 2
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 3
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44946: LD_ADDR_VAR 0 55
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: LD_INT 3
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: PUSH
44974: LD_INT 3
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44986: LD_ADDR_VAR 0 56
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 3
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45027: LD_ADDR_VAR 0 57
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 3
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 3
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45071: LD_ADDR_VAR 0 58
45075: PUSH
45076: LD_INT 2
45078: NEG
45079: PUSH
45080: LD_INT 3
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 3
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45117: LD_ADDR_VAR 0 59
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: LIST
45160: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45161: LD_ADDR_VAR 0 60
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 2
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45202: LD_ADDR_VAR 0 61
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45242: LD_ADDR_VAR 0 62
45246: PUSH
45247: LD_INT 1
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 0
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: NEG
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45283: LD_ADDR_VAR 0 63
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 2
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 2
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45327: LD_ADDR_VAR 0 64
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 2
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: LIST
45372: ST_TO_ADDR
// end ; 2 :
45373: GO 48639
45375: LD_INT 2
45377: DOUBLE
45378: EQUAL
45379: IFTRUE 45383
45381: GO 48638
45383: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45384: LD_ADDR_VAR 0 29
45388: PUSH
45389: LD_INT 4
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 4
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 5
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 5
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 4
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 3
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: PUSH
45453: LD_INT 1
45455: NEG
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 2
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 5
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: LD_INT 3
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: PUSH
45495: LD_INT 2
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 4
45504: PUSH
45505: LD_INT 3
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 4
45514: PUSH
45515: LD_INT 4
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 3
45524: PUSH
45525: LD_INT 4
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 2
45534: PUSH
45535: LD_INT 3
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 4
45554: PUSH
45555: LD_INT 2
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 4
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: LD_INT 4
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: LD_INT 3
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 4
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 5
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 5
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 4
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 3
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: PUSH
45647: LD_INT 5
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 2
45656: NEG
45657: PUSH
45658: LD_INT 3
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 3
45667: NEG
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 2
45701: NEG
45702: PUSH
45703: LD_INT 1
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 4
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 4
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 4
45746: NEG
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 2
45758: NEG
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 4
45769: NEG
45770: PUSH
45771: LD_INT 4
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 4
45781: NEG
45782: PUSH
45783: LD_INT 5
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: LD_INT 4
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: NEG
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 4
45817: NEG
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 5
45829: NEG
45830: PUSH
45831: LD_INT 4
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 5
45841: NEG
45842: PUSH
45843: LD_INT 5
45845: NEG
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: LD_INT 5
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 5
45865: NEG
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45922: LD_ADDR_VAR 0 30
45926: PUSH
45927: LD_INT 4
45929: PUSH
45930: LD_INT 4
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 4
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 5
45949: PUSH
45950: LD_INT 4
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 5
45959: PUSH
45960: LD_INT 5
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 4
45969: PUSH
45970: LD_INT 5
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 3
45979: PUSH
45980: LD_INT 4
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 5
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 3
46009: PUSH
46010: LD_INT 5
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: LD_INT 3
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: LD_INT 4
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: LD_INT 4
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 2
46091: PUSH
46092: LD_INT 4
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: LD_INT 2
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 4
46112: NEG
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 4
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 3
46135: NEG
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 4
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 5
46168: NEG
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 5
46179: NEG
46180: PUSH
46181: LD_INT 1
46183: NEG
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 5
46191: NEG
46192: PUSH
46193: LD_INT 2
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: NEG
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: LD_INT 3
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 3
46226: NEG
46227: PUSH
46228: LD_INT 4
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: LD_INT 3
46242: NEG
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 2
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 3
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 4
46274: NEG
46275: PUSH
46276: LD_INT 3
46278: NEG
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 4
46286: NEG
46287: PUSH
46288: LD_INT 4
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: LD_INT 4
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 4
46310: NEG
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 0
46322: PUSH
46323: LD_INT 4
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: LD_INT 5
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: LD_INT 4
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 3
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: LD_INT 4
46381: NEG
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: LD_INT 5
46393: NEG
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 2
46401: PUSH
46402: LD_INT 3
46404: NEG
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 5
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46469: LD_ADDR_VAR 0 31
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 4
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 3
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 4
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 5
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_INT 5
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: LD_INT 4
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 2
46548: PUSH
46549: LD_INT 5
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 2
46558: NEG
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 3
46569: NEG
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 3
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 4
46625: NEG
46626: PUSH
46627: LD_INT 0
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 4
46636: NEG
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 4
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: NEG
46661: PUSH
46662: LD_INT 2
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 4
46671: NEG
46672: PUSH
46673: LD_INT 4
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 4
46683: NEG
46684: PUSH
46685: LD_INT 5
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 4
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: NEG
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 4
46719: NEG
46720: PUSH
46721: LD_INT 3
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 5
46731: NEG
46732: PUSH
46733: LD_INT 4
46735: NEG
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 5
46743: NEG
46744: PUSH
46745: LD_INT 5
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: NEG
46756: PUSH
46757: LD_INT 5
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 5
46767: NEG
46768: PUSH
46769: LD_INT 3
46771: NEG
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 4
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 3
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 2
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 3
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: LD_INT 4
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: LD_INT 2
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 4
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 4
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 4
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 5
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 5
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 4
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: LD_INT 0
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 3
46942: PUSH
46943: LD_INT 1
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 5
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47019: LD_ADDR_VAR 0 32
47023: PUSH
47024: LD_INT 4
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 4
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 3
47049: NEG
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 4
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 5
47082: NEG
47083: PUSH
47084: LD_INT 0
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 5
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 5
47105: NEG
47106: PUSH
47107: LD_INT 2
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 3
47117: NEG
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 3
47128: NEG
47129: PUSH
47130: LD_INT 3
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: LD_INT 4
47144: NEG
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: LD_INT 3
47156: NEG
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: LD_INT 2
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 4
47188: NEG
47189: PUSH
47190: LD_INT 3
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 4
47200: NEG
47201: PUSH
47202: LD_INT 4
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: LD_INT 4
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 4
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 4
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 5
47250: NEG
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 1
47258: PUSH
47259: LD_INT 4
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 3
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 0
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: NEG
47292: PUSH
47293: LD_INT 4
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 5
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 2
47326: NEG
47327: PUSH
47328: LD_INT 5
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 3
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 4
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 4
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 3
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: EMPTY
47416: LIST
47417: LIST
47418: PUSH
47419: LD_INT 4
47421: PUSH
47422: LD_INT 2
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 4
47431: PUSH
47432: LD_INT 4
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 5
47451: PUSH
47452: LD_INT 4
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 5
47461: PUSH
47462: LD_INT 5
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 4
47471: PUSH
47472: LD_INT 5
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: PUSH
47482: LD_INT 4
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: LD_INT 3
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 5
47501: PUSH
47502: LD_INT 3
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: LD_INT 5
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47566: LD_ADDR_VAR 0 33
47570: PUSH
47571: LD_INT 4
47573: NEG
47574: PUSH
47575: LD_INT 4
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 4
47585: NEG
47586: PUSH
47587: LD_INT 5
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 3
47597: NEG
47598: PUSH
47599: LD_INT 4
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 3
47609: NEG
47610: PUSH
47611: LD_INT 3
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 4
47621: NEG
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 5
47633: NEG
47634: PUSH
47635: LD_INT 4
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 5
47645: NEG
47646: PUSH
47647: LD_INT 5
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 3
47657: NEG
47658: PUSH
47659: LD_INT 5
47661: NEG
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 5
47669: NEG
47670: PUSH
47671: LD_INT 3
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 3
47684: NEG
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: LD_INT 4
47695: NEG
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 1
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 0
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: NEG
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 4
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: PUSH
47761: LD_INT 2
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 4
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 4
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 4
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 5
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 5
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 5
47866: PUSH
47867: LD_INT 2
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 3
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 4
47896: PUSH
47897: LD_INT 3
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 4
47906: PUSH
47907: LD_INT 4
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 3
47916: PUSH
47917: LD_INT 4
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 2
47926: PUSH
47927: LD_INT 3
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 2
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 4
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: LD_INT 4
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 4
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 3
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: LD_INT 4
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 5
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: LD_INT 5
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 4
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: PUSH
48039: LD_INT 5
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: NEG
48049: PUSH
48050: LD_INT 3
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: LIST
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48104: LD_ADDR_VAR 0 34
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 4
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 5
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 4
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: LD_INT 3
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 4
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 5
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: PUSH
48191: LD_INT 3
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 5
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 4
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 4
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 2
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 2
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 4
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 4
48306: PUSH
48307: LD_INT 4
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 4
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 5
48326: PUSH
48327: LD_INT 4
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 5
48336: PUSH
48337: LD_INT 5
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: LD_INT 5
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: LD_INT 4
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: LD_INT 3
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 5
48376: PUSH
48377: LD_INT 3
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: LD_INT 5
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 3
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 4
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 4
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 4
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 2
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 4
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 4
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: NEG
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 3
48523: NEG
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 4
48534: NEG
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 5
48545: NEG
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 5
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 5
48568: NEG
48569: PUSH
48570: LD_INT 2
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 3
48580: NEG
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: ST_TO_ADDR
// end ; end ;
48636: GO 48639
48638: POP
// case btype of b_depot , b_warehouse :
48639: LD_VAR 0 1
48643: PUSH
48644: LD_INT 0
48646: DOUBLE
48647: EQUAL
48648: IFTRUE 48658
48650: LD_INT 1
48652: DOUBLE
48653: EQUAL
48654: IFTRUE 48658
48656: GO 48859
48658: POP
// case nation of nation_american :
48659: LD_VAR 0 5
48663: PUSH
48664: LD_INT 1
48666: DOUBLE
48667: EQUAL
48668: IFTRUE 48672
48670: GO 48728
48672: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48673: LD_ADDR_VAR 0 9
48677: PUSH
48678: LD_VAR 0 11
48682: PUSH
48683: LD_VAR 0 12
48687: PUSH
48688: LD_VAR 0 13
48692: PUSH
48693: LD_VAR 0 14
48697: PUSH
48698: LD_VAR 0 15
48702: PUSH
48703: LD_VAR 0 16
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: PUSH
48716: LD_VAR 0 4
48720: PUSH
48721: LD_INT 1
48723: PLUS
48724: ARRAY
48725: ST_TO_ADDR
48726: GO 48857
48728: LD_INT 2
48730: DOUBLE
48731: EQUAL
48732: IFTRUE 48736
48734: GO 48792
48736: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48737: LD_ADDR_VAR 0 9
48741: PUSH
48742: LD_VAR 0 17
48746: PUSH
48747: LD_VAR 0 18
48751: PUSH
48752: LD_VAR 0 19
48756: PUSH
48757: LD_VAR 0 20
48761: PUSH
48762: LD_VAR 0 21
48766: PUSH
48767: LD_VAR 0 22
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: PUSH
48780: LD_VAR 0 4
48784: PUSH
48785: LD_INT 1
48787: PLUS
48788: ARRAY
48789: ST_TO_ADDR
48790: GO 48857
48792: LD_INT 3
48794: DOUBLE
48795: EQUAL
48796: IFTRUE 48800
48798: GO 48856
48800: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48801: LD_ADDR_VAR 0 9
48805: PUSH
48806: LD_VAR 0 23
48810: PUSH
48811: LD_VAR 0 24
48815: PUSH
48816: LD_VAR 0 25
48820: PUSH
48821: LD_VAR 0 26
48825: PUSH
48826: LD_VAR 0 27
48830: PUSH
48831: LD_VAR 0 28
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: PUSH
48844: LD_VAR 0 4
48848: PUSH
48849: LD_INT 1
48851: PLUS
48852: ARRAY
48853: ST_TO_ADDR
48854: GO 48857
48856: POP
48857: GO 49412
48859: LD_INT 2
48861: DOUBLE
48862: EQUAL
48863: IFTRUE 48873
48865: LD_INT 3
48867: DOUBLE
48868: EQUAL
48869: IFTRUE 48873
48871: GO 48929
48873: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48874: LD_ADDR_VAR 0 9
48878: PUSH
48879: LD_VAR 0 29
48883: PUSH
48884: LD_VAR 0 30
48888: PUSH
48889: LD_VAR 0 31
48893: PUSH
48894: LD_VAR 0 32
48898: PUSH
48899: LD_VAR 0 33
48903: PUSH
48904: LD_VAR 0 34
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: PUSH
48917: LD_VAR 0 4
48921: PUSH
48922: LD_INT 1
48924: PLUS
48925: ARRAY
48926: ST_TO_ADDR
48927: GO 49412
48929: LD_INT 16
48931: DOUBLE
48932: EQUAL
48933: IFTRUE 48991
48935: LD_INT 17
48937: DOUBLE
48938: EQUAL
48939: IFTRUE 48991
48941: LD_INT 18
48943: DOUBLE
48944: EQUAL
48945: IFTRUE 48991
48947: LD_INT 19
48949: DOUBLE
48950: EQUAL
48951: IFTRUE 48991
48953: LD_INT 22
48955: DOUBLE
48956: EQUAL
48957: IFTRUE 48991
48959: LD_INT 20
48961: DOUBLE
48962: EQUAL
48963: IFTRUE 48991
48965: LD_INT 21
48967: DOUBLE
48968: EQUAL
48969: IFTRUE 48991
48971: LD_INT 23
48973: DOUBLE
48974: EQUAL
48975: IFTRUE 48991
48977: LD_INT 24
48979: DOUBLE
48980: EQUAL
48981: IFTRUE 48991
48983: LD_INT 25
48985: DOUBLE
48986: EQUAL
48987: IFTRUE 48991
48989: GO 49047
48991: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48992: LD_ADDR_VAR 0 9
48996: PUSH
48997: LD_VAR 0 35
49001: PUSH
49002: LD_VAR 0 36
49006: PUSH
49007: LD_VAR 0 37
49011: PUSH
49012: LD_VAR 0 38
49016: PUSH
49017: LD_VAR 0 39
49021: PUSH
49022: LD_VAR 0 40
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: PUSH
49035: LD_VAR 0 4
49039: PUSH
49040: LD_INT 1
49042: PLUS
49043: ARRAY
49044: ST_TO_ADDR
49045: GO 49412
49047: LD_INT 6
49049: DOUBLE
49050: EQUAL
49051: IFTRUE 49103
49053: LD_INT 7
49055: DOUBLE
49056: EQUAL
49057: IFTRUE 49103
49059: LD_INT 8
49061: DOUBLE
49062: EQUAL
49063: IFTRUE 49103
49065: LD_INT 13
49067: DOUBLE
49068: EQUAL
49069: IFTRUE 49103
49071: LD_INT 12
49073: DOUBLE
49074: EQUAL
49075: IFTRUE 49103
49077: LD_INT 15
49079: DOUBLE
49080: EQUAL
49081: IFTRUE 49103
49083: LD_INT 11
49085: DOUBLE
49086: EQUAL
49087: IFTRUE 49103
49089: LD_INT 14
49091: DOUBLE
49092: EQUAL
49093: IFTRUE 49103
49095: LD_INT 10
49097: DOUBLE
49098: EQUAL
49099: IFTRUE 49103
49101: GO 49159
49103: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49104: LD_ADDR_VAR 0 9
49108: PUSH
49109: LD_VAR 0 41
49113: PUSH
49114: LD_VAR 0 42
49118: PUSH
49119: LD_VAR 0 43
49123: PUSH
49124: LD_VAR 0 44
49128: PUSH
49129: LD_VAR 0 45
49133: PUSH
49134: LD_VAR 0 46
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: PUSH
49147: LD_VAR 0 4
49151: PUSH
49152: LD_INT 1
49154: PLUS
49155: ARRAY
49156: ST_TO_ADDR
49157: GO 49412
49159: LD_INT 36
49161: DOUBLE
49162: EQUAL
49163: IFTRUE 49167
49165: GO 49223
49167: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49168: LD_ADDR_VAR 0 9
49172: PUSH
49173: LD_VAR 0 47
49177: PUSH
49178: LD_VAR 0 48
49182: PUSH
49183: LD_VAR 0 49
49187: PUSH
49188: LD_VAR 0 50
49192: PUSH
49193: LD_VAR 0 51
49197: PUSH
49198: LD_VAR 0 52
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: LD_VAR 0 4
49215: PUSH
49216: LD_INT 1
49218: PLUS
49219: ARRAY
49220: ST_TO_ADDR
49221: GO 49412
49223: LD_INT 4
49225: DOUBLE
49226: EQUAL
49227: IFTRUE 49249
49229: LD_INT 5
49231: DOUBLE
49232: EQUAL
49233: IFTRUE 49249
49235: LD_INT 34
49237: DOUBLE
49238: EQUAL
49239: IFTRUE 49249
49241: LD_INT 37
49243: DOUBLE
49244: EQUAL
49245: IFTRUE 49249
49247: GO 49305
49249: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49250: LD_ADDR_VAR 0 9
49254: PUSH
49255: LD_VAR 0 53
49259: PUSH
49260: LD_VAR 0 54
49264: PUSH
49265: LD_VAR 0 55
49269: PUSH
49270: LD_VAR 0 56
49274: PUSH
49275: LD_VAR 0 57
49279: PUSH
49280: LD_VAR 0 58
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: PUSH
49293: LD_VAR 0 4
49297: PUSH
49298: LD_INT 1
49300: PLUS
49301: ARRAY
49302: ST_TO_ADDR
49303: GO 49412
49305: LD_INT 31
49307: DOUBLE
49308: EQUAL
49309: IFTRUE 49355
49311: LD_INT 32
49313: DOUBLE
49314: EQUAL
49315: IFTRUE 49355
49317: LD_INT 33
49319: DOUBLE
49320: EQUAL
49321: IFTRUE 49355
49323: LD_INT 27
49325: DOUBLE
49326: EQUAL
49327: IFTRUE 49355
49329: LD_INT 26
49331: DOUBLE
49332: EQUAL
49333: IFTRUE 49355
49335: LD_INT 28
49337: DOUBLE
49338: EQUAL
49339: IFTRUE 49355
49341: LD_INT 29
49343: DOUBLE
49344: EQUAL
49345: IFTRUE 49355
49347: LD_INT 30
49349: DOUBLE
49350: EQUAL
49351: IFTRUE 49355
49353: GO 49411
49355: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49356: LD_ADDR_VAR 0 9
49360: PUSH
49361: LD_VAR 0 59
49365: PUSH
49366: LD_VAR 0 60
49370: PUSH
49371: LD_VAR 0 61
49375: PUSH
49376: LD_VAR 0 62
49380: PUSH
49381: LD_VAR 0 63
49385: PUSH
49386: LD_VAR 0 64
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: PUSH
49399: LD_VAR 0 4
49403: PUSH
49404: LD_INT 1
49406: PLUS
49407: ARRAY
49408: ST_TO_ADDR
49409: GO 49412
49411: POP
// temp_list2 = [ ] ;
49412: LD_ADDR_VAR 0 10
49416: PUSH
49417: EMPTY
49418: ST_TO_ADDR
// for i in temp_list do
49419: LD_ADDR_VAR 0 8
49423: PUSH
49424: LD_VAR 0 9
49428: PUSH
49429: FOR_IN
49430: IFFALSE 49482
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49432: LD_ADDR_VAR 0 10
49436: PUSH
49437: LD_VAR 0 10
49441: PUSH
49442: LD_VAR 0 8
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: PUSH
49451: LD_VAR 0 2
49455: PLUS
49456: PUSH
49457: LD_VAR 0 8
49461: PUSH
49462: LD_INT 2
49464: ARRAY
49465: PUSH
49466: LD_VAR 0 3
49470: PLUS
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: EMPTY
49477: LIST
49478: ADD
49479: ST_TO_ADDR
49480: GO 49429
49482: POP
49483: POP
// result = temp_list2 ;
49484: LD_ADDR_VAR 0 7
49488: PUSH
49489: LD_VAR 0 10
49493: ST_TO_ADDR
// end ;
49494: LD_VAR 0 7
49498: RET
// export function EnemyInRange ( unit , dist ) ; begin
49499: LD_INT 0
49501: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49502: LD_ADDR_VAR 0 3
49506: PUSH
49507: LD_VAR 0 1
49511: PPUSH
49512: CALL_OW 255
49516: PPUSH
49517: LD_VAR 0 1
49521: PPUSH
49522: CALL_OW 250
49526: PPUSH
49527: LD_VAR 0 1
49531: PPUSH
49532: CALL_OW 251
49536: PPUSH
49537: LD_VAR 0 2
49541: PPUSH
49542: CALL 22872 0 4
49546: PUSH
49547: LD_INT 4
49549: ARRAY
49550: ST_TO_ADDR
// end ;
49551: LD_VAR 0 3
49555: RET
// export function PlayerSeeMe ( unit ) ; begin
49556: LD_INT 0
49558: PPUSH
// result := See ( your_side , unit ) ;
49559: LD_ADDR_VAR 0 2
49563: PUSH
49564: LD_OWVAR 2
49568: PPUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 292
49578: ST_TO_ADDR
// end ;
49579: LD_VAR 0 2
49583: RET
// export function ReverseDir ( unit ) ; begin
49584: LD_INT 0
49586: PPUSH
// if not unit then
49587: LD_VAR 0 1
49591: NOT
49592: IFFALSE 49596
// exit ;
49594: GO 49619
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49596: LD_ADDR_VAR 0 2
49600: PUSH
49601: LD_VAR 0 1
49605: PPUSH
49606: CALL_OW 254
49610: PUSH
49611: LD_INT 3
49613: PLUS
49614: PUSH
49615: LD_INT 6
49617: MOD
49618: ST_TO_ADDR
// end ;
49619: LD_VAR 0 2
49623: RET
// export function ReverseArray ( array ) ; var i ; begin
49624: LD_INT 0
49626: PPUSH
49627: PPUSH
// if not array then
49628: LD_VAR 0 1
49632: NOT
49633: IFFALSE 49637
// exit ;
49635: GO 49692
// result := [ ] ;
49637: LD_ADDR_VAR 0 2
49641: PUSH
49642: EMPTY
49643: ST_TO_ADDR
// for i := array downto 1 do
49644: LD_ADDR_VAR 0 3
49648: PUSH
49649: DOUBLE
49650: LD_VAR 0 1
49654: INC
49655: ST_TO_ADDR
49656: LD_INT 1
49658: PUSH
49659: FOR_DOWNTO
49660: IFFALSE 49690
// result := Join ( result , array [ i ] ) ;
49662: LD_ADDR_VAR 0 2
49666: PUSH
49667: LD_VAR 0 2
49671: PPUSH
49672: LD_VAR 0 1
49676: PUSH
49677: LD_VAR 0 3
49681: ARRAY
49682: PPUSH
49683: CALL 54337 0 2
49687: ST_TO_ADDR
49688: GO 49659
49690: POP
49691: POP
// end ;
49692: LD_VAR 0 2
49696: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49697: LD_INT 0
49699: PPUSH
49700: PPUSH
49701: PPUSH
49702: PPUSH
49703: PPUSH
49704: PPUSH
// if not unit or not hexes then
49705: LD_VAR 0 1
49709: NOT
49710: PUSH
49711: LD_VAR 0 2
49715: NOT
49716: OR
49717: IFFALSE 49721
// exit ;
49719: GO 49844
// dist := 9999 ;
49721: LD_ADDR_VAR 0 5
49725: PUSH
49726: LD_INT 9999
49728: ST_TO_ADDR
// for i = 1 to hexes do
49729: LD_ADDR_VAR 0 4
49733: PUSH
49734: DOUBLE
49735: LD_INT 1
49737: DEC
49738: ST_TO_ADDR
49739: LD_VAR 0 2
49743: PUSH
49744: FOR_TO
49745: IFFALSE 49832
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49747: LD_ADDR_VAR 0 6
49751: PUSH
49752: LD_VAR 0 1
49756: PPUSH
49757: LD_VAR 0 2
49761: PUSH
49762: LD_VAR 0 4
49766: ARRAY
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PPUSH
49772: LD_VAR 0 2
49776: PUSH
49777: LD_VAR 0 4
49781: ARRAY
49782: PUSH
49783: LD_INT 2
49785: ARRAY
49786: PPUSH
49787: CALL_OW 297
49791: ST_TO_ADDR
// if tdist < dist then
49792: LD_VAR 0 6
49796: PUSH
49797: LD_VAR 0 5
49801: LESS
49802: IFFALSE 49830
// begin hex := hexes [ i ] ;
49804: LD_ADDR_VAR 0 8
49808: PUSH
49809: LD_VAR 0 2
49813: PUSH
49814: LD_VAR 0 4
49818: ARRAY
49819: ST_TO_ADDR
// dist := tdist ;
49820: LD_ADDR_VAR 0 5
49824: PUSH
49825: LD_VAR 0 6
49829: ST_TO_ADDR
// end ; end ;
49830: GO 49744
49832: POP
49833: POP
// result := hex ;
49834: LD_ADDR_VAR 0 3
49838: PUSH
49839: LD_VAR 0 8
49843: ST_TO_ADDR
// end ;
49844: LD_VAR 0 3
49848: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49849: LD_INT 0
49851: PPUSH
49852: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49853: LD_VAR 0 1
49857: NOT
49858: PUSH
49859: LD_VAR 0 1
49863: PUSH
49864: LD_INT 21
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 23
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PPUSH
49888: CALL_OW 69
49892: IN
49893: NOT
49894: OR
49895: IFFALSE 49899
// exit ;
49897: GO 49946
// for i = 1 to 3 do
49899: LD_ADDR_VAR 0 3
49903: PUSH
49904: DOUBLE
49905: LD_INT 1
49907: DEC
49908: ST_TO_ADDR
49909: LD_INT 3
49911: PUSH
49912: FOR_TO
49913: IFFALSE 49944
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49915: LD_VAR 0 1
49919: PPUSH
49920: CALL_OW 250
49924: PPUSH
49925: LD_VAR 0 1
49929: PPUSH
49930: CALL_OW 251
49934: PPUSH
49935: LD_INT 1
49937: PPUSH
49938: CALL_OW 453
49942: GO 49912
49944: POP
49945: POP
// end ;
49946: LD_VAR 0 2
49950: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49951: LD_INT 0
49953: PPUSH
49954: PPUSH
49955: PPUSH
49956: PPUSH
49957: PPUSH
49958: PPUSH
// if not unit or not enemy_unit then
49959: LD_VAR 0 1
49963: NOT
49964: PUSH
49965: LD_VAR 0 2
49969: NOT
49970: OR
49971: IFFALSE 49975
// exit ;
49973: GO 50442
// if GetLives ( i ) < 250 then
49975: LD_VAR 0 4
49979: PPUSH
49980: CALL_OW 256
49984: PUSH
49985: LD_INT 250
49987: LESS
49988: IFFALSE 50001
// begin ComAutodestruct ( i ) ;
49990: LD_VAR 0 4
49994: PPUSH
49995: CALL 49849 0 1
// exit ;
49999: GO 50442
// end ; x := GetX ( enemy_unit ) ;
50001: LD_ADDR_VAR 0 7
50005: PUSH
50006: LD_VAR 0 2
50010: PPUSH
50011: CALL_OW 250
50015: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50016: LD_ADDR_VAR 0 8
50020: PUSH
50021: LD_VAR 0 2
50025: PPUSH
50026: CALL_OW 251
50030: ST_TO_ADDR
// if not x or not y then
50031: LD_VAR 0 7
50035: NOT
50036: PUSH
50037: LD_VAR 0 8
50041: NOT
50042: OR
50043: IFFALSE 50047
// exit ;
50045: GO 50442
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50047: LD_ADDR_VAR 0 6
50051: PUSH
50052: LD_VAR 0 7
50056: PPUSH
50057: LD_INT 0
50059: PPUSH
50060: LD_INT 4
50062: PPUSH
50063: CALL_OW 272
50067: PUSH
50068: LD_VAR 0 8
50072: PPUSH
50073: LD_INT 0
50075: PPUSH
50076: LD_INT 4
50078: PPUSH
50079: CALL_OW 273
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_VAR 0 7
50092: PPUSH
50093: LD_INT 1
50095: PPUSH
50096: LD_INT 4
50098: PPUSH
50099: CALL_OW 272
50103: PUSH
50104: LD_VAR 0 8
50108: PPUSH
50109: LD_INT 1
50111: PPUSH
50112: LD_INT 4
50114: PPUSH
50115: CALL_OW 273
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_VAR 0 7
50128: PPUSH
50129: LD_INT 2
50131: PPUSH
50132: LD_INT 4
50134: PPUSH
50135: CALL_OW 272
50139: PUSH
50140: LD_VAR 0 8
50144: PPUSH
50145: LD_INT 2
50147: PPUSH
50148: LD_INT 4
50150: PPUSH
50151: CALL_OW 273
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_VAR 0 7
50164: PPUSH
50165: LD_INT 3
50167: PPUSH
50168: LD_INT 4
50170: PPUSH
50171: CALL_OW 272
50175: PUSH
50176: LD_VAR 0 8
50180: PPUSH
50181: LD_INT 3
50183: PPUSH
50184: LD_INT 4
50186: PPUSH
50187: CALL_OW 273
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_VAR 0 7
50200: PPUSH
50201: LD_INT 4
50203: PPUSH
50204: LD_INT 4
50206: PPUSH
50207: CALL_OW 272
50211: PUSH
50212: LD_VAR 0 8
50216: PPUSH
50217: LD_INT 4
50219: PPUSH
50220: LD_INT 4
50222: PPUSH
50223: CALL_OW 273
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_VAR 0 7
50236: PPUSH
50237: LD_INT 5
50239: PPUSH
50240: LD_INT 4
50242: PPUSH
50243: CALL_OW 272
50247: PUSH
50248: LD_VAR 0 8
50252: PPUSH
50253: LD_INT 5
50255: PPUSH
50256: LD_INT 4
50258: PPUSH
50259: CALL_OW 273
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: ST_TO_ADDR
// for i = tmp downto 1 do
50276: LD_ADDR_VAR 0 4
50280: PUSH
50281: DOUBLE
50282: LD_VAR 0 6
50286: INC
50287: ST_TO_ADDR
50288: LD_INT 1
50290: PUSH
50291: FOR_DOWNTO
50292: IFFALSE 50393
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50294: LD_VAR 0 6
50298: PUSH
50299: LD_VAR 0 4
50303: ARRAY
50304: PUSH
50305: LD_INT 1
50307: ARRAY
50308: PPUSH
50309: LD_VAR 0 6
50313: PUSH
50314: LD_VAR 0 4
50318: ARRAY
50319: PUSH
50320: LD_INT 2
50322: ARRAY
50323: PPUSH
50324: CALL_OW 488
50328: NOT
50329: PUSH
50330: LD_VAR 0 6
50334: PUSH
50335: LD_VAR 0 4
50339: ARRAY
50340: PUSH
50341: LD_INT 1
50343: ARRAY
50344: PPUSH
50345: LD_VAR 0 6
50349: PUSH
50350: LD_VAR 0 4
50354: ARRAY
50355: PUSH
50356: LD_INT 2
50358: ARRAY
50359: PPUSH
50360: CALL_OW 428
50364: PUSH
50365: LD_INT 0
50367: NONEQUAL
50368: OR
50369: IFFALSE 50391
// tmp := Delete ( tmp , i ) ;
50371: LD_ADDR_VAR 0 6
50375: PUSH
50376: LD_VAR 0 6
50380: PPUSH
50381: LD_VAR 0 4
50385: PPUSH
50386: CALL_OW 3
50390: ST_TO_ADDR
50391: GO 50291
50393: POP
50394: POP
// j := GetClosestHex ( unit , tmp ) ;
50395: LD_ADDR_VAR 0 5
50399: PUSH
50400: LD_VAR 0 1
50404: PPUSH
50405: LD_VAR 0 6
50409: PPUSH
50410: CALL 49697 0 2
50414: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50415: LD_VAR 0 1
50419: PPUSH
50420: LD_VAR 0 5
50424: PUSH
50425: LD_INT 1
50427: ARRAY
50428: PPUSH
50429: LD_VAR 0 5
50433: PUSH
50434: LD_INT 2
50436: ARRAY
50437: PPUSH
50438: CALL_OW 111
// end ;
50442: LD_VAR 0 3
50446: RET
// export function PrepareApemanSoldier ( ) ; begin
50447: LD_INT 0
50449: PPUSH
// uc_nation := 0 ;
50450: LD_ADDR_OWVAR 21
50454: PUSH
50455: LD_INT 0
50457: ST_TO_ADDR
// hc_sex := sex_male ;
50458: LD_ADDR_OWVAR 27
50462: PUSH
50463: LD_INT 1
50465: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50466: LD_ADDR_OWVAR 28
50470: PUSH
50471: LD_INT 15
50473: ST_TO_ADDR
// hc_gallery :=  ;
50474: LD_ADDR_OWVAR 33
50478: PUSH
50479: LD_STRING 
50481: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50482: LD_ADDR_OWVAR 31
50486: PUSH
50487: LD_INT 0
50489: PPUSH
50490: LD_INT 3
50492: PPUSH
50493: CALL_OW 12
50497: PUSH
50498: LD_INT 0
50500: PPUSH
50501: LD_INT 3
50503: PPUSH
50504: CALL_OW 12
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// end ;
50521: LD_VAR 0 1
50525: RET
// export function PrepareApemanEngineer ( ) ; begin
50526: LD_INT 0
50528: PPUSH
// uc_nation := 0 ;
50529: LD_ADDR_OWVAR 21
50533: PUSH
50534: LD_INT 0
50536: ST_TO_ADDR
// hc_sex := sex_male ;
50537: LD_ADDR_OWVAR 27
50541: PUSH
50542: LD_INT 1
50544: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50545: LD_ADDR_OWVAR 28
50549: PUSH
50550: LD_INT 16
50552: ST_TO_ADDR
// hc_gallery :=  ;
50553: LD_ADDR_OWVAR 33
50557: PUSH
50558: LD_STRING 
50560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50561: LD_ADDR_OWVAR 31
50565: PUSH
50566: LD_INT 0
50568: PPUSH
50569: LD_INT 3
50571: PPUSH
50572: CALL_OW 12
50576: PUSH
50577: LD_INT 0
50579: PPUSH
50580: LD_INT 3
50582: PPUSH
50583: CALL_OW 12
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: ST_TO_ADDR
// end ;
50600: LD_VAR 0 1
50604: RET
// export function PrepareApeman ( agressivity ) ; begin
50605: LD_INT 0
50607: PPUSH
// uc_side := 0 ;
50608: LD_ADDR_OWVAR 20
50612: PUSH
50613: LD_INT 0
50615: ST_TO_ADDR
// uc_nation := 0 ;
50616: LD_ADDR_OWVAR 21
50620: PUSH
50621: LD_INT 0
50623: ST_TO_ADDR
// hc_sex := sex_male ;
50624: LD_ADDR_OWVAR 27
50628: PUSH
50629: LD_INT 1
50631: ST_TO_ADDR
// hc_class := class_apeman ;
50632: LD_ADDR_OWVAR 28
50636: PUSH
50637: LD_INT 12
50639: ST_TO_ADDR
// hc_gallery :=  ;
50640: LD_ADDR_OWVAR 33
50644: PUSH
50645: LD_STRING 
50647: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50648: LD_ADDR_OWVAR 35
50652: PUSH
50653: LD_VAR 0 1
50657: NEG
50658: PPUSH
50659: LD_VAR 0 1
50663: PPUSH
50664: CALL_OW 12
50668: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50669: LD_ADDR_OWVAR 31
50673: PUSH
50674: LD_INT 0
50676: PPUSH
50677: LD_INT 3
50679: PPUSH
50680: CALL_OW 12
50684: PUSH
50685: LD_INT 0
50687: PPUSH
50688: LD_INT 3
50690: PPUSH
50691: CALL_OW 12
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: ST_TO_ADDR
// end ;
50708: LD_VAR 0 2
50712: RET
// export function PrepareTiger ( agressivity ) ; begin
50713: LD_INT 0
50715: PPUSH
// uc_side := 0 ;
50716: LD_ADDR_OWVAR 20
50720: PUSH
50721: LD_INT 0
50723: ST_TO_ADDR
// uc_nation := 0 ;
50724: LD_ADDR_OWVAR 21
50728: PUSH
50729: LD_INT 0
50731: ST_TO_ADDR
// hc_class := class_tiger ;
50732: LD_ADDR_OWVAR 28
50736: PUSH
50737: LD_INT 14
50739: ST_TO_ADDR
// hc_gallery :=  ;
50740: LD_ADDR_OWVAR 33
50744: PUSH
50745: LD_STRING 
50747: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50748: LD_ADDR_OWVAR 35
50752: PUSH
50753: LD_VAR 0 1
50757: NEG
50758: PPUSH
50759: LD_VAR 0 1
50763: PPUSH
50764: CALL_OW 12
50768: ST_TO_ADDR
// end ;
50769: LD_VAR 0 2
50773: RET
// export function PrepareEnchidna ( ) ; begin
50774: LD_INT 0
50776: PPUSH
// uc_side := 0 ;
50777: LD_ADDR_OWVAR 20
50781: PUSH
50782: LD_INT 0
50784: ST_TO_ADDR
// uc_nation := 0 ;
50785: LD_ADDR_OWVAR 21
50789: PUSH
50790: LD_INT 0
50792: ST_TO_ADDR
// hc_class := class_baggie ;
50793: LD_ADDR_OWVAR 28
50797: PUSH
50798: LD_INT 13
50800: ST_TO_ADDR
// hc_gallery :=  ;
50801: LD_ADDR_OWVAR 33
50805: PUSH
50806: LD_STRING 
50808: ST_TO_ADDR
// end ;
50809: LD_VAR 0 1
50813: RET
// export function PrepareFrog ( ) ; begin
50814: LD_INT 0
50816: PPUSH
// uc_side := 0 ;
50817: LD_ADDR_OWVAR 20
50821: PUSH
50822: LD_INT 0
50824: ST_TO_ADDR
// uc_nation := 0 ;
50825: LD_ADDR_OWVAR 21
50829: PUSH
50830: LD_INT 0
50832: ST_TO_ADDR
// hc_class := class_frog ;
50833: LD_ADDR_OWVAR 28
50837: PUSH
50838: LD_INT 19
50840: ST_TO_ADDR
// hc_gallery :=  ;
50841: LD_ADDR_OWVAR 33
50845: PUSH
50846: LD_STRING 
50848: ST_TO_ADDR
// end ;
50849: LD_VAR 0 1
50853: RET
// export function PrepareFish ( ) ; begin
50854: LD_INT 0
50856: PPUSH
// uc_side := 0 ;
50857: LD_ADDR_OWVAR 20
50861: PUSH
50862: LD_INT 0
50864: ST_TO_ADDR
// uc_nation := 0 ;
50865: LD_ADDR_OWVAR 21
50869: PUSH
50870: LD_INT 0
50872: ST_TO_ADDR
// hc_class := class_fish ;
50873: LD_ADDR_OWVAR 28
50877: PUSH
50878: LD_INT 20
50880: ST_TO_ADDR
// hc_gallery :=  ;
50881: LD_ADDR_OWVAR 33
50885: PUSH
50886: LD_STRING 
50888: ST_TO_ADDR
// end ;
50889: LD_VAR 0 1
50893: RET
// export function PrepareBird ( ) ; begin
50894: LD_INT 0
50896: PPUSH
// uc_side := 0 ;
50897: LD_ADDR_OWVAR 20
50901: PUSH
50902: LD_INT 0
50904: ST_TO_ADDR
// uc_nation := 0 ;
50905: LD_ADDR_OWVAR 21
50909: PUSH
50910: LD_INT 0
50912: ST_TO_ADDR
// hc_class := class_phororhacos ;
50913: LD_ADDR_OWVAR 28
50917: PUSH
50918: LD_INT 18
50920: ST_TO_ADDR
// hc_gallery :=  ;
50921: LD_ADDR_OWVAR 33
50925: PUSH
50926: LD_STRING 
50928: ST_TO_ADDR
// end ;
50929: LD_VAR 0 1
50933: RET
// export function PrepareHorse ( ) ; begin
50934: LD_INT 0
50936: PPUSH
// uc_side := 0 ;
50937: LD_ADDR_OWVAR 20
50941: PUSH
50942: LD_INT 0
50944: ST_TO_ADDR
// uc_nation := 0 ;
50945: LD_ADDR_OWVAR 21
50949: PUSH
50950: LD_INT 0
50952: ST_TO_ADDR
// hc_class := class_horse ;
50953: LD_ADDR_OWVAR 28
50957: PUSH
50958: LD_INT 21
50960: ST_TO_ADDR
// hc_gallery :=  ;
50961: LD_ADDR_OWVAR 33
50965: PUSH
50966: LD_STRING 
50968: ST_TO_ADDR
// end ;
50969: LD_VAR 0 1
50973: RET
// export function PrepareMastodont ( ) ; begin
50974: LD_INT 0
50976: PPUSH
// uc_side := 0 ;
50977: LD_ADDR_OWVAR 20
50981: PUSH
50982: LD_INT 0
50984: ST_TO_ADDR
// uc_nation := 0 ;
50985: LD_ADDR_OWVAR 21
50989: PUSH
50990: LD_INT 0
50992: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50993: LD_ADDR_OWVAR 37
50997: PUSH
50998: LD_INT 31
51000: ST_TO_ADDR
// vc_control := control_rider ;
51001: LD_ADDR_OWVAR 38
51005: PUSH
51006: LD_INT 4
51008: ST_TO_ADDR
// end ;
51009: LD_VAR 0 1
51013: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51014: LD_INT 0
51016: PPUSH
51017: PPUSH
51018: PPUSH
// uc_side = 0 ;
51019: LD_ADDR_OWVAR 20
51023: PUSH
51024: LD_INT 0
51026: ST_TO_ADDR
// uc_nation = 0 ;
51027: LD_ADDR_OWVAR 21
51031: PUSH
51032: LD_INT 0
51034: ST_TO_ADDR
// InitHc_All ( ) ;
51035: CALL_OW 584
// InitVc ;
51039: CALL_OW 20
// if mastodonts then
51043: LD_VAR 0 6
51047: IFFALSE 51114
// for i = 1 to mastodonts do
51049: LD_ADDR_VAR 0 11
51053: PUSH
51054: DOUBLE
51055: LD_INT 1
51057: DEC
51058: ST_TO_ADDR
51059: LD_VAR 0 6
51063: PUSH
51064: FOR_TO
51065: IFFALSE 51112
// begin vc_chassis := 31 ;
51067: LD_ADDR_OWVAR 37
51071: PUSH
51072: LD_INT 31
51074: ST_TO_ADDR
// vc_control := control_rider ;
51075: LD_ADDR_OWVAR 38
51079: PUSH
51080: LD_INT 4
51082: ST_TO_ADDR
// animal := CreateVehicle ;
51083: LD_ADDR_VAR 0 12
51087: PUSH
51088: CALL_OW 45
51092: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51093: LD_VAR 0 12
51097: PPUSH
51098: LD_VAR 0 8
51102: PPUSH
51103: LD_INT 0
51105: PPUSH
51106: CALL 53242 0 3
// end ;
51110: GO 51064
51112: POP
51113: POP
// if horses then
51114: LD_VAR 0 5
51118: IFFALSE 51185
// for i = 1 to horses do
51120: LD_ADDR_VAR 0 11
51124: PUSH
51125: DOUBLE
51126: LD_INT 1
51128: DEC
51129: ST_TO_ADDR
51130: LD_VAR 0 5
51134: PUSH
51135: FOR_TO
51136: IFFALSE 51183
// begin hc_class := 21 ;
51138: LD_ADDR_OWVAR 28
51142: PUSH
51143: LD_INT 21
51145: ST_TO_ADDR
// hc_gallery :=  ;
51146: LD_ADDR_OWVAR 33
51150: PUSH
51151: LD_STRING 
51153: ST_TO_ADDR
// animal := CreateHuman ;
51154: LD_ADDR_VAR 0 12
51158: PUSH
51159: CALL_OW 44
51163: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51164: LD_VAR 0 12
51168: PPUSH
51169: LD_VAR 0 8
51173: PPUSH
51174: LD_INT 0
51176: PPUSH
51177: CALL 53242 0 3
// end ;
51181: GO 51135
51183: POP
51184: POP
// if birds then
51185: LD_VAR 0 1
51189: IFFALSE 51256
// for i = 1 to birds do
51191: LD_ADDR_VAR 0 11
51195: PUSH
51196: DOUBLE
51197: LD_INT 1
51199: DEC
51200: ST_TO_ADDR
51201: LD_VAR 0 1
51205: PUSH
51206: FOR_TO
51207: IFFALSE 51254
// begin hc_class := 18 ;
51209: LD_ADDR_OWVAR 28
51213: PUSH
51214: LD_INT 18
51216: ST_TO_ADDR
// hc_gallery =  ;
51217: LD_ADDR_OWVAR 33
51221: PUSH
51222: LD_STRING 
51224: ST_TO_ADDR
// animal := CreateHuman ;
51225: LD_ADDR_VAR 0 12
51229: PUSH
51230: CALL_OW 44
51234: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51235: LD_VAR 0 12
51239: PPUSH
51240: LD_VAR 0 8
51244: PPUSH
51245: LD_INT 0
51247: PPUSH
51248: CALL 53242 0 3
// end ;
51252: GO 51206
51254: POP
51255: POP
// if tigers then
51256: LD_VAR 0 2
51260: IFFALSE 51344
// for i = 1 to tigers do
51262: LD_ADDR_VAR 0 11
51266: PUSH
51267: DOUBLE
51268: LD_INT 1
51270: DEC
51271: ST_TO_ADDR
51272: LD_VAR 0 2
51276: PUSH
51277: FOR_TO
51278: IFFALSE 51342
// begin hc_class = class_tiger ;
51280: LD_ADDR_OWVAR 28
51284: PUSH
51285: LD_INT 14
51287: ST_TO_ADDR
// hc_gallery =  ;
51288: LD_ADDR_OWVAR 33
51292: PUSH
51293: LD_STRING 
51295: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51296: LD_ADDR_OWVAR 35
51300: PUSH
51301: LD_INT 7
51303: NEG
51304: PPUSH
51305: LD_INT 7
51307: PPUSH
51308: CALL_OW 12
51312: ST_TO_ADDR
// animal := CreateHuman ;
51313: LD_ADDR_VAR 0 12
51317: PUSH
51318: CALL_OW 44
51322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51323: LD_VAR 0 12
51327: PPUSH
51328: LD_VAR 0 8
51332: PPUSH
51333: LD_INT 0
51335: PPUSH
51336: CALL 53242 0 3
// end ;
51340: GO 51277
51342: POP
51343: POP
// if apemans then
51344: LD_VAR 0 3
51348: IFFALSE 51471
// for i = 1 to apemans do
51350: LD_ADDR_VAR 0 11
51354: PUSH
51355: DOUBLE
51356: LD_INT 1
51358: DEC
51359: ST_TO_ADDR
51360: LD_VAR 0 3
51364: PUSH
51365: FOR_TO
51366: IFFALSE 51469
// begin hc_class = class_apeman ;
51368: LD_ADDR_OWVAR 28
51372: PUSH
51373: LD_INT 12
51375: ST_TO_ADDR
// hc_gallery =  ;
51376: LD_ADDR_OWVAR 33
51380: PUSH
51381: LD_STRING 
51383: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51384: LD_ADDR_OWVAR 35
51388: PUSH
51389: LD_INT 2
51391: NEG
51392: PPUSH
51393: LD_INT 2
51395: PPUSH
51396: CALL_OW 12
51400: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51401: LD_ADDR_OWVAR 31
51405: PUSH
51406: LD_INT 1
51408: PPUSH
51409: LD_INT 3
51411: PPUSH
51412: CALL_OW 12
51416: PUSH
51417: LD_INT 1
51419: PPUSH
51420: LD_INT 3
51422: PPUSH
51423: CALL_OW 12
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: ST_TO_ADDR
// animal := CreateHuman ;
51440: LD_ADDR_VAR 0 12
51444: PUSH
51445: CALL_OW 44
51449: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51450: LD_VAR 0 12
51454: PPUSH
51455: LD_VAR 0 8
51459: PPUSH
51460: LD_INT 0
51462: PPUSH
51463: CALL 53242 0 3
// end ;
51467: GO 51365
51469: POP
51470: POP
// if enchidnas then
51471: LD_VAR 0 4
51475: IFFALSE 51542
// for i = 1 to enchidnas do
51477: LD_ADDR_VAR 0 11
51481: PUSH
51482: DOUBLE
51483: LD_INT 1
51485: DEC
51486: ST_TO_ADDR
51487: LD_VAR 0 4
51491: PUSH
51492: FOR_TO
51493: IFFALSE 51540
// begin hc_class = 13 ;
51495: LD_ADDR_OWVAR 28
51499: PUSH
51500: LD_INT 13
51502: ST_TO_ADDR
// hc_gallery =  ;
51503: LD_ADDR_OWVAR 33
51507: PUSH
51508: LD_STRING 
51510: ST_TO_ADDR
// animal := CreateHuman ;
51511: LD_ADDR_VAR 0 12
51515: PUSH
51516: CALL_OW 44
51520: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51521: LD_VAR 0 12
51525: PPUSH
51526: LD_VAR 0 8
51530: PPUSH
51531: LD_INT 0
51533: PPUSH
51534: CALL 53242 0 3
// end ;
51538: GO 51492
51540: POP
51541: POP
// if fishes then
51542: LD_VAR 0 7
51546: IFFALSE 51613
// for i = 1 to fishes do
51548: LD_ADDR_VAR 0 11
51552: PUSH
51553: DOUBLE
51554: LD_INT 1
51556: DEC
51557: ST_TO_ADDR
51558: LD_VAR 0 7
51562: PUSH
51563: FOR_TO
51564: IFFALSE 51611
// begin hc_class = 20 ;
51566: LD_ADDR_OWVAR 28
51570: PUSH
51571: LD_INT 20
51573: ST_TO_ADDR
// hc_gallery =  ;
51574: LD_ADDR_OWVAR 33
51578: PUSH
51579: LD_STRING 
51581: ST_TO_ADDR
// animal := CreateHuman ;
51582: LD_ADDR_VAR 0 12
51586: PUSH
51587: CALL_OW 44
51591: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51592: LD_VAR 0 12
51596: PPUSH
51597: LD_VAR 0 9
51601: PPUSH
51602: LD_INT 0
51604: PPUSH
51605: CALL 53242 0 3
// end ;
51609: GO 51563
51611: POP
51612: POP
// end ;
51613: LD_VAR 0 10
51617: RET
// export function WantHeal ( sci , unit ) ; begin
51618: LD_INT 0
51620: PPUSH
// if GetTaskList ( sci ) > 0 then
51621: LD_VAR 0 1
51625: PPUSH
51626: CALL_OW 437
51630: PUSH
51631: LD_INT 0
51633: GREATER
51634: IFFALSE 51704
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51636: LD_VAR 0 1
51640: PPUSH
51641: CALL_OW 437
51645: PUSH
51646: LD_INT 1
51648: ARRAY
51649: PUSH
51650: LD_INT 1
51652: ARRAY
51653: PUSH
51654: LD_STRING l
51656: EQUAL
51657: PUSH
51658: LD_VAR 0 1
51662: PPUSH
51663: CALL_OW 437
51667: PUSH
51668: LD_INT 1
51670: ARRAY
51671: PUSH
51672: LD_INT 4
51674: ARRAY
51675: PUSH
51676: LD_VAR 0 2
51680: EQUAL
51681: AND
51682: IFFALSE 51694
// result := true else
51684: LD_ADDR_VAR 0 3
51688: PUSH
51689: LD_INT 1
51691: ST_TO_ADDR
51692: GO 51702
// result := false ;
51694: LD_ADDR_VAR 0 3
51698: PUSH
51699: LD_INT 0
51701: ST_TO_ADDR
// end else
51702: GO 51712
// result := false ;
51704: LD_ADDR_VAR 0 3
51708: PUSH
51709: LD_INT 0
51711: ST_TO_ADDR
// end ;
51712: LD_VAR 0 3
51716: RET
// export function HealTarget ( sci ) ; begin
51717: LD_INT 0
51719: PPUSH
// if not sci then
51720: LD_VAR 0 1
51724: NOT
51725: IFFALSE 51729
// exit ;
51727: GO 51794
// result := 0 ;
51729: LD_ADDR_VAR 0 2
51733: PUSH
51734: LD_INT 0
51736: ST_TO_ADDR
// if GetTaskList ( sci ) then
51737: LD_VAR 0 1
51741: PPUSH
51742: CALL_OW 437
51746: IFFALSE 51794
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51748: LD_VAR 0 1
51752: PPUSH
51753: CALL_OW 437
51757: PUSH
51758: LD_INT 1
51760: ARRAY
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PUSH
51766: LD_STRING l
51768: EQUAL
51769: IFFALSE 51794
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51771: LD_ADDR_VAR 0 2
51775: PUSH
51776: LD_VAR 0 1
51780: PPUSH
51781: CALL_OW 437
51785: PUSH
51786: LD_INT 1
51788: ARRAY
51789: PUSH
51790: LD_INT 4
51792: ARRAY
51793: ST_TO_ADDR
// end ;
51794: LD_VAR 0 2
51798: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51799: LD_INT 0
51801: PPUSH
51802: PPUSH
51803: PPUSH
51804: PPUSH
// if not base_units then
51805: LD_VAR 0 1
51809: NOT
51810: IFFALSE 51814
// exit ;
51812: GO 51901
// result := false ;
51814: LD_ADDR_VAR 0 2
51818: PUSH
51819: LD_INT 0
51821: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51822: LD_ADDR_VAR 0 5
51826: PUSH
51827: LD_VAR 0 1
51831: PPUSH
51832: LD_INT 21
51834: PUSH
51835: LD_INT 3
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PPUSH
51842: CALL_OW 72
51846: ST_TO_ADDR
// if not tmp then
51847: LD_VAR 0 5
51851: NOT
51852: IFFALSE 51856
// exit ;
51854: GO 51901
// for i in tmp do
51856: LD_ADDR_VAR 0 3
51860: PUSH
51861: LD_VAR 0 5
51865: PUSH
51866: FOR_IN
51867: IFFALSE 51899
// begin result := EnemyInRange ( i , 22 ) ;
51869: LD_ADDR_VAR 0 2
51873: PUSH
51874: LD_VAR 0 3
51878: PPUSH
51879: LD_INT 22
51881: PPUSH
51882: CALL 49499 0 2
51886: ST_TO_ADDR
// if result then
51887: LD_VAR 0 2
51891: IFFALSE 51897
// exit ;
51893: POP
51894: POP
51895: GO 51901
// end ;
51897: GO 51866
51899: POP
51900: POP
// end ;
51901: LD_VAR 0 2
51905: RET
// export function FilterByTag ( units , tag ) ; begin
51906: LD_INT 0
51908: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51909: LD_ADDR_VAR 0 3
51913: PUSH
51914: LD_VAR 0 1
51918: PPUSH
51919: LD_INT 120
51921: PUSH
51922: LD_VAR 0 2
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PPUSH
51931: CALL_OW 72
51935: ST_TO_ADDR
// end ;
51936: LD_VAR 0 3
51940: RET
// export function IsDriver ( un ) ; begin
51941: LD_INT 0
51943: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51944: LD_ADDR_VAR 0 2
51948: PUSH
51949: LD_VAR 0 1
51953: PUSH
51954: LD_INT 55
51956: PUSH
51957: EMPTY
51958: LIST
51959: PPUSH
51960: CALL_OW 69
51964: IN
51965: ST_TO_ADDR
// end ;
51966: LD_VAR 0 2
51970: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51971: LD_INT 0
51973: PPUSH
51974: PPUSH
// list := [ ] ;
51975: LD_ADDR_VAR 0 5
51979: PUSH
51980: EMPTY
51981: ST_TO_ADDR
// case d of 0 :
51982: LD_VAR 0 3
51986: PUSH
51987: LD_INT 0
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 51995
51993: GO 52128
51995: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51996: LD_ADDR_VAR 0 5
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 4
52008: MINUS
52009: PUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 4
52017: MINUS
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_INT 3
52034: MINUS
52035: PUSH
52036: LD_VAR 0 2
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: LD_VAR 0 1
52053: PUSH
52054: LD_INT 4
52056: PLUS
52057: PUSH
52058: LD_VAR 0 2
52062: PUSH
52063: LD_INT 4
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: PUSH
52071: LD_VAR 0 1
52075: PUSH
52076: LD_INT 3
52078: PLUS
52079: PUSH
52080: LD_VAR 0 2
52084: PUSH
52085: LD_INT 3
52087: PLUS
52088: PUSH
52089: LD_INT 5
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: PUSH
52097: LD_VAR 0 1
52101: PUSH
52102: LD_VAR 0 2
52106: PUSH
52107: LD_INT 4
52109: PLUS
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: LIST
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: ST_TO_ADDR
// end ; 1 :
52126: GO 52826
52128: LD_INT 1
52130: DOUBLE
52131: EQUAL
52132: IFTRUE 52136
52134: GO 52269
52136: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52137: LD_ADDR_VAR 0 5
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_VAR 0 2
52151: PUSH
52152: LD_INT 4
52154: MINUS
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: PUSH
52164: LD_VAR 0 1
52168: PUSH
52169: LD_INT 3
52171: MINUS
52172: PUSH
52173: LD_VAR 0 2
52177: PUSH
52178: LD_INT 3
52180: MINUS
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: LD_VAR 0 1
52194: PUSH
52195: LD_INT 4
52197: MINUS
52198: PUSH
52199: LD_VAR 0 2
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: PUSH
52212: LD_VAR 0 1
52216: PUSH
52217: LD_VAR 0 2
52221: PUSH
52222: LD_INT 3
52224: PLUS
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: LIST
52233: PUSH
52234: LD_VAR 0 1
52238: PUSH
52239: LD_INT 4
52241: PLUS
52242: PUSH
52243: LD_VAR 0 2
52247: PUSH
52248: LD_INT 4
52250: PLUS
52251: PUSH
52252: LD_INT 5
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: ST_TO_ADDR
// end ; 2 :
52267: GO 52826
52269: LD_INT 2
52271: DOUBLE
52272: EQUAL
52273: IFTRUE 52277
52275: GO 52406
52277: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52278: LD_ADDR_VAR 0 5
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_VAR 0 2
52292: PUSH
52293: LD_INT 3
52295: MINUS
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: PUSH
52305: LD_VAR 0 1
52309: PUSH
52310: LD_INT 4
52312: PLUS
52313: PUSH
52314: LD_VAR 0 2
52318: PUSH
52319: LD_INT 4
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: LIST
52326: PUSH
52327: LD_VAR 0 1
52331: PUSH
52332: LD_VAR 0 2
52336: PUSH
52337: LD_INT 4
52339: PLUS
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: PUSH
52349: LD_VAR 0 1
52353: PUSH
52354: LD_INT 3
52356: MINUS
52357: PUSH
52358: LD_VAR 0 2
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: LIST
52370: PUSH
52371: LD_VAR 0 1
52375: PUSH
52376: LD_INT 4
52378: MINUS
52379: PUSH
52380: LD_VAR 0 2
52384: PUSH
52385: LD_INT 4
52387: MINUS
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: ST_TO_ADDR
// end ; 3 :
52404: GO 52826
52406: LD_INT 3
52408: DOUBLE
52409: EQUAL
52410: IFTRUE 52414
52412: GO 52547
52414: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52415: LD_ADDR_VAR 0 5
52419: PUSH
52420: LD_VAR 0 1
52424: PUSH
52425: LD_INT 3
52427: PLUS
52428: PUSH
52429: LD_VAR 0 2
52433: PUSH
52434: LD_INT 4
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: PUSH
52442: LD_VAR 0 1
52446: PUSH
52447: LD_INT 4
52449: PLUS
52450: PUSH
52451: LD_VAR 0 2
52455: PUSH
52456: LD_INT 4
52458: PLUS
52459: PUSH
52460: LD_INT 5
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: LIST
52467: PUSH
52468: LD_VAR 0 1
52472: PUSH
52473: LD_INT 4
52475: MINUS
52476: PUSH
52477: LD_VAR 0 2
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: LIST
52489: PUSH
52490: LD_VAR 0 1
52494: PUSH
52495: LD_VAR 0 2
52499: PUSH
52500: LD_INT 4
52502: MINUS
52503: PUSH
52504: LD_INT 3
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: LIST
52511: PUSH
52512: LD_VAR 0 1
52516: PUSH
52517: LD_INT 3
52519: MINUS
52520: PUSH
52521: LD_VAR 0 2
52525: PUSH
52526: LD_INT 3
52528: MINUS
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: ST_TO_ADDR
// end ; 4 :
52545: GO 52826
52547: LD_INT 4
52549: DOUBLE
52550: EQUAL
52551: IFTRUE 52555
52553: GO 52688
52555: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52556: LD_ADDR_VAR 0 5
52560: PUSH
52561: LD_VAR 0 1
52565: PUSH
52566: LD_VAR 0 2
52570: PUSH
52571: LD_INT 4
52573: PLUS
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: PUSH
52583: LD_VAR 0 1
52587: PUSH
52588: LD_INT 3
52590: PLUS
52591: PUSH
52592: LD_VAR 0 2
52596: PUSH
52597: LD_INT 3
52599: PLUS
52600: PUSH
52601: LD_INT 5
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: LIST
52608: PUSH
52609: LD_VAR 0 1
52613: PUSH
52614: LD_INT 4
52616: PLUS
52617: PUSH
52618: LD_VAR 0 2
52622: PUSH
52623: LD_INT 4
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: PUSH
52631: LD_VAR 0 1
52635: PUSH
52636: LD_VAR 0 2
52640: PUSH
52641: LD_INT 3
52643: MINUS
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: PUSH
52653: LD_VAR 0 1
52657: PUSH
52658: LD_INT 4
52660: MINUS
52661: PUSH
52662: LD_VAR 0 2
52666: PUSH
52667: LD_INT 4
52669: MINUS
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// end ; 5 :
52686: GO 52826
52688: LD_INT 5
52690: DOUBLE
52691: EQUAL
52692: IFTRUE 52696
52694: GO 52825
52696: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52697: LD_ADDR_VAR 0 5
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_INT 4
52709: MINUS
52710: PUSH
52711: LD_VAR 0 2
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_VAR 0 2
52733: PUSH
52734: LD_INT 4
52736: MINUS
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: LIST
52745: PUSH
52746: LD_VAR 0 1
52750: PUSH
52751: LD_INT 4
52753: PLUS
52754: PUSH
52755: LD_VAR 0 2
52759: PUSH
52760: LD_INT 4
52762: PLUS
52763: PUSH
52764: LD_INT 5
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: LIST
52771: PUSH
52772: LD_VAR 0 1
52776: PUSH
52777: LD_INT 3
52779: PLUS
52780: PUSH
52781: LD_VAR 0 2
52785: PUSH
52786: LD_INT 4
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: LIST
52793: PUSH
52794: LD_VAR 0 1
52798: PUSH
52799: LD_VAR 0 2
52803: PUSH
52804: LD_INT 3
52806: PLUS
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: LIST
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: ST_TO_ADDR
// end ; end ;
52823: GO 52826
52825: POP
// result := list ;
52826: LD_ADDR_VAR 0 4
52830: PUSH
52831: LD_VAR 0 5
52835: ST_TO_ADDR
// end ;
52836: LD_VAR 0 4
52840: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52841: LD_INT 0
52843: PPUSH
52844: PPUSH
52845: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52846: LD_VAR 0 1
52850: NOT
52851: PUSH
52852: LD_VAR 0 2
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 3
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: IN
52875: NOT
52876: OR
52877: IFFALSE 52881
// exit ;
52879: GO 52964
// tmp := [ ] ;
52881: LD_ADDR_VAR 0 5
52885: PUSH
52886: EMPTY
52887: ST_TO_ADDR
// for i in units do
52888: LD_ADDR_VAR 0 4
52892: PUSH
52893: LD_VAR 0 1
52897: PUSH
52898: FOR_IN
52899: IFFALSE 52933
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52901: LD_ADDR_VAR 0 5
52905: PUSH
52906: LD_VAR 0 5
52910: PPUSH
52911: LD_VAR 0 4
52915: PPUSH
52916: LD_VAR 0 2
52920: PPUSH
52921: CALL_OW 259
52925: PPUSH
52926: CALL 54337 0 2
52930: ST_TO_ADDR
52931: GO 52898
52933: POP
52934: POP
// if not tmp then
52935: LD_VAR 0 5
52939: NOT
52940: IFFALSE 52944
// exit ;
52942: GO 52964
// result := SortListByListDesc ( units , tmp ) ;
52944: LD_ADDR_VAR 0 3
52948: PUSH
52949: LD_VAR 0 1
52953: PPUSH
52954: LD_VAR 0 5
52958: PPUSH
52959: CALL_OW 77
52963: ST_TO_ADDR
// end ;
52964: LD_VAR 0 3
52968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52969: LD_INT 0
52971: PPUSH
52972: PPUSH
52973: PPUSH
// result := false ;
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_INT 0
52981: ST_TO_ADDR
// if not building then
52982: LD_VAR 0 2
52986: NOT
52987: IFFALSE 52991
// exit ;
52989: GO 53129
// x := GetX ( building ) ;
52991: LD_ADDR_VAR 0 4
52995: PUSH
52996: LD_VAR 0 2
53000: PPUSH
53001: CALL_OW 250
53005: ST_TO_ADDR
// y := GetY ( building ) ;
53006: LD_ADDR_VAR 0 5
53010: PUSH
53011: LD_VAR 0 2
53015: PPUSH
53016: CALL_OW 251
53020: ST_TO_ADDR
// if not x or not y then
53021: LD_VAR 0 4
53025: NOT
53026: PUSH
53027: LD_VAR 0 5
53031: NOT
53032: OR
53033: IFFALSE 53037
// exit ;
53035: GO 53129
// if GetTaskList ( unit ) then
53037: LD_VAR 0 1
53041: PPUSH
53042: CALL_OW 437
53046: IFFALSE 53129
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53048: LD_STRING e
53050: PUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 437
53060: PUSH
53061: LD_INT 1
53063: ARRAY
53064: PUSH
53065: LD_INT 1
53067: ARRAY
53068: EQUAL
53069: PUSH
53070: LD_VAR 0 4
53074: PUSH
53075: LD_VAR 0 1
53079: PPUSH
53080: CALL_OW 437
53084: PUSH
53085: LD_INT 1
53087: ARRAY
53088: PUSH
53089: LD_INT 2
53091: ARRAY
53092: EQUAL
53093: AND
53094: PUSH
53095: LD_VAR 0 5
53099: PUSH
53100: LD_VAR 0 1
53104: PPUSH
53105: CALL_OW 437
53109: PUSH
53110: LD_INT 1
53112: ARRAY
53113: PUSH
53114: LD_INT 3
53116: ARRAY
53117: EQUAL
53118: AND
53119: IFFALSE 53129
// result := true end ;
53121: LD_ADDR_VAR 0 3
53125: PUSH
53126: LD_INT 1
53128: ST_TO_ADDR
// end ;
53129: LD_VAR 0 3
53133: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53134: LD_INT 0
53136: PPUSH
// result := false ;
53137: LD_ADDR_VAR 0 4
53141: PUSH
53142: LD_INT 0
53144: ST_TO_ADDR
// if GetTaskList ( unit ) then
53145: LD_VAR 0 1
53149: PPUSH
53150: CALL_OW 437
53154: IFFALSE 53237
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53156: LD_STRING M
53158: PUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: CALL_OW 437
53168: PUSH
53169: LD_INT 1
53171: ARRAY
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: EQUAL
53177: PUSH
53178: LD_VAR 0 2
53182: PUSH
53183: LD_VAR 0 1
53187: PPUSH
53188: CALL_OW 437
53192: PUSH
53193: LD_INT 1
53195: ARRAY
53196: PUSH
53197: LD_INT 2
53199: ARRAY
53200: EQUAL
53201: AND
53202: PUSH
53203: LD_VAR 0 3
53207: PUSH
53208: LD_VAR 0 1
53212: PPUSH
53213: CALL_OW 437
53217: PUSH
53218: LD_INT 1
53220: ARRAY
53221: PUSH
53222: LD_INT 3
53224: ARRAY
53225: EQUAL
53226: AND
53227: IFFALSE 53237
// result := true ;
53229: LD_ADDR_VAR 0 4
53233: PUSH
53234: LD_INT 1
53236: ST_TO_ADDR
// end ; end ;
53237: LD_VAR 0 4
53241: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53242: LD_INT 0
53244: PPUSH
53245: PPUSH
53246: PPUSH
53247: PPUSH
// if not unit or not area then
53248: LD_VAR 0 1
53252: NOT
53253: PUSH
53254: LD_VAR 0 2
53258: NOT
53259: OR
53260: IFFALSE 53264
// exit ;
53262: GO 53440
// tmp := AreaToList ( area , i ) ;
53264: LD_ADDR_VAR 0 6
53268: PUSH
53269: LD_VAR 0 2
53273: PPUSH
53274: LD_VAR 0 5
53278: PPUSH
53279: CALL_OW 517
53283: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53284: LD_ADDR_VAR 0 5
53288: PUSH
53289: DOUBLE
53290: LD_INT 1
53292: DEC
53293: ST_TO_ADDR
53294: LD_VAR 0 6
53298: PUSH
53299: LD_INT 1
53301: ARRAY
53302: PUSH
53303: FOR_TO
53304: IFFALSE 53438
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53306: LD_ADDR_VAR 0 7
53310: PUSH
53311: LD_VAR 0 6
53315: PUSH
53316: LD_INT 1
53318: ARRAY
53319: PUSH
53320: LD_VAR 0 5
53324: ARRAY
53325: PUSH
53326: LD_VAR 0 6
53330: PUSH
53331: LD_INT 2
53333: ARRAY
53334: PUSH
53335: LD_VAR 0 5
53339: ARRAY
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53345: LD_INT 92
53347: PUSH
53348: LD_VAR 0 7
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PUSH
53357: LD_VAR 0 7
53361: PUSH
53362: LD_INT 2
53364: ARRAY
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: PPUSH
53375: CALL_OW 69
53379: PUSH
53380: LD_INT 0
53382: EQUAL
53383: IFFALSE 53436
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53385: LD_VAR 0 1
53389: PPUSH
53390: LD_VAR 0 7
53394: PUSH
53395: LD_INT 1
53397: ARRAY
53398: PPUSH
53399: LD_VAR 0 7
53403: PUSH
53404: LD_INT 2
53406: ARRAY
53407: PPUSH
53408: LD_VAR 0 3
53412: PPUSH
53413: CALL_OW 48
// result := IsPlaced ( unit ) ;
53417: LD_ADDR_VAR 0 4
53421: PUSH
53422: LD_VAR 0 1
53426: PPUSH
53427: CALL_OW 305
53431: ST_TO_ADDR
// exit ;
53432: POP
53433: POP
53434: GO 53440
// end ; end ;
53436: GO 53303
53438: POP
53439: POP
// end ;
53440: LD_VAR 0 4
53444: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53445: LD_INT 0
53447: PPUSH
53448: PPUSH
53449: PPUSH
// if not side or side > 8 then
53450: LD_VAR 0 1
53454: NOT
53455: PUSH
53456: LD_VAR 0 1
53460: PUSH
53461: LD_INT 8
53463: GREATER
53464: OR
53465: IFFALSE 53469
// exit ;
53467: GO 53656
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53469: LD_ADDR_VAR 0 4
53473: PUSH
53474: LD_INT 22
53476: PUSH
53477: LD_VAR 0 1
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 21
53488: PUSH
53489: LD_INT 3
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PPUSH
53500: CALL_OW 69
53504: ST_TO_ADDR
// if not tmp then
53505: LD_VAR 0 4
53509: NOT
53510: IFFALSE 53514
// exit ;
53512: GO 53656
// enable_addtolog := true ;
53514: LD_ADDR_OWVAR 81
53518: PUSH
53519: LD_INT 1
53521: ST_TO_ADDR
// AddToLog ( [ ) ;
53522: LD_STRING [
53524: PPUSH
53525: CALL_OW 561
// for i in tmp do
53529: LD_ADDR_VAR 0 3
53533: PUSH
53534: LD_VAR 0 4
53538: PUSH
53539: FOR_IN
53540: IFFALSE 53647
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53542: LD_STRING [
53544: PUSH
53545: LD_VAR 0 3
53549: PPUSH
53550: CALL_OW 266
53554: STR
53555: PUSH
53556: LD_STRING , 
53558: STR
53559: PUSH
53560: LD_VAR 0 3
53564: PPUSH
53565: CALL_OW 250
53569: STR
53570: PUSH
53571: LD_STRING , 
53573: STR
53574: PUSH
53575: LD_VAR 0 3
53579: PPUSH
53580: CALL_OW 251
53584: STR
53585: PUSH
53586: LD_STRING , 
53588: STR
53589: PUSH
53590: LD_VAR 0 3
53594: PPUSH
53595: CALL_OW 254
53599: STR
53600: PUSH
53601: LD_STRING , 
53603: STR
53604: PUSH
53605: LD_VAR 0 3
53609: PPUSH
53610: LD_INT 1
53612: PPUSH
53613: CALL_OW 268
53617: STR
53618: PUSH
53619: LD_STRING , 
53621: STR
53622: PUSH
53623: LD_VAR 0 3
53627: PPUSH
53628: LD_INT 2
53630: PPUSH
53631: CALL_OW 268
53635: STR
53636: PUSH
53637: LD_STRING ],
53639: STR
53640: PPUSH
53641: CALL_OW 561
// end ;
53645: GO 53539
53647: POP
53648: POP
// AddToLog ( ]; ) ;
53649: LD_STRING ];
53651: PPUSH
53652: CALL_OW 561
// end ;
53656: LD_VAR 0 2
53660: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53661: LD_INT 0
53663: PPUSH
53664: PPUSH
53665: PPUSH
53666: PPUSH
53667: PPUSH
// if not area or not rate or not max then
53668: LD_VAR 0 1
53672: NOT
53673: PUSH
53674: LD_VAR 0 2
53678: NOT
53679: OR
53680: PUSH
53681: LD_VAR 0 4
53685: NOT
53686: OR
53687: IFFALSE 53691
// exit ;
53689: GO 53880
// while 1 do
53691: LD_INT 1
53693: IFFALSE 53880
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53695: LD_ADDR_VAR 0 9
53699: PUSH
53700: LD_VAR 0 1
53704: PPUSH
53705: LD_INT 1
53707: PPUSH
53708: CALL_OW 287
53712: PUSH
53713: LD_INT 10
53715: MUL
53716: ST_TO_ADDR
// r := rate / 10 ;
53717: LD_ADDR_VAR 0 7
53721: PUSH
53722: LD_VAR 0 2
53726: PUSH
53727: LD_INT 10
53729: DIVREAL
53730: ST_TO_ADDR
// time := 1 1$00 ;
53731: LD_ADDR_VAR 0 8
53735: PUSH
53736: LD_INT 2100
53738: ST_TO_ADDR
// if amount < min then
53739: LD_VAR 0 9
53743: PUSH
53744: LD_VAR 0 3
53748: LESS
53749: IFFALSE 53767
// r := r * 2 else
53751: LD_ADDR_VAR 0 7
53755: PUSH
53756: LD_VAR 0 7
53760: PUSH
53761: LD_INT 2
53763: MUL
53764: ST_TO_ADDR
53765: GO 53793
// if amount > max then
53767: LD_VAR 0 9
53771: PUSH
53772: LD_VAR 0 4
53776: GREATER
53777: IFFALSE 53793
// r := r / 2 ;
53779: LD_ADDR_VAR 0 7
53783: PUSH
53784: LD_VAR 0 7
53788: PUSH
53789: LD_INT 2
53791: DIVREAL
53792: ST_TO_ADDR
// time := time / r ;
53793: LD_ADDR_VAR 0 8
53797: PUSH
53798: LD_VAR 0 8
53802: PUSH
53803: LD_VAR 0 7
53807: DIVREAL
53808: ST_TO_ADDR
// if time < 0 then
53809: LD_VAR 0 8
53813: PUSH
53814: LD_INT 0
53816: LESS
53817: IFFALSE 53834
// time := time * - 1 ;
53819: LD_ADDR_VAR 0 8
53823: PUSH
53824: LD_VAR 0 8
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: MUL
53833: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53834: LD_VAR 0 8
53838: PUSH
53839: LD_INT 35
53841: PPUSH
53842: LD_INT 875
53844: PPUSH
53845: CALL_OW 12
53849: PLUS
53850: PPUSH
53851: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53855: LD_INT 1
53857: PPUSH
53858: LD_INT 5
53860: PPUSH
53861: CALL_OW 12
53865: PPUSH
53866: LD_VAR 0 1
53870: PPUSH
53871: LD_INT 1
53873: PPUSH
53874: CALL_OW 55
// end ;
53878: GO 53691
// end ;
53880: LD_VAR 0 5
53884: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53885: LD_INT 0
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
// if not turrets or not factories then
53895: LD_VAR 0 1
53899: NOT
53900: PUSH
53901: LD_VAR 0 2
53905: NOT
53906: OR
53907: IFFALSE 53911
// exit ;
53909: GO 54218
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53911: LD_ADDR_VAR 0 10
53915: PUSH
53916: LD_INT 5
53918: PUSH
53919: LD_INT 6
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: PUSH
53929: LD_INT 4
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: LD_INT 5
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 24
53953: PUSH
53954: LD_INT 25
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 23
53963: PUSH
53964: LD_INT 27
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 42
53977: PUSH
53978: LD_INT 43
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 44
53987: PUSH
53988: LD_INT 46
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 45
53997: PUSH
53998: LD_INT 47
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// result := [ ] ;
54015: LD_ADDR_VAR 0 3
54019: PUSH
54020: EMPTY
54021: ST_TO_ADDR
// for i in turrets do
54022: LD_ADDR_VAR 0 4
54026: PUSH
54027: LD_VAR 0 1
54031: PUSH
54032: FOR_IN
54033: IFFALSE 54216
// begin nat := GetNation ( i ) ;
54035: LD_ADDR_VAR 0 7
54039: PUSH
54040: LD_VAR 0 4
54044: PPUSH
54045: CALL_OW 248
54049: ST_TO_ADDR
// weapon := 0 ;
54050: LD_ADDR_VAR 0 8
54054: PUSH
54055: LD_INT 0
54057: ST_TO_ADDR
// if not nat then
54058: LD_VAR 0 7
54062: NOT
54063: IFFALSE 54067
// continue ;
54065: GO 54032
// for j in list [ nat ] do
54067: LD_ADDR_VAR 0 5
54071: PUSH
54072: LD_VAR 0 10
54076: PUSH
54077: LD_VAR 0 7
54081: ARRAY
54082: PUSH
54083: FOR_IN
54084: IFFALSE 54125
// if GetBWeapon ( i ) = j [ 1 ] then
54086: LD_VAR 0 4
54090: PPUSH
54091: CALL_OW 269
54095: PUSH
54096: LD_VAR 0 5
54100: PUSH
54101: LD_INT 1
54103: ARRAY
54104: EQUAL
54105: IFFALSE 54123
// begin weapon := j [ 2 ] ;
54107: LD_ADDR_VAR 0 8
54111: PUSH
54112: LD_VAR 0 5
54116: PUSH
54117: LD_INT 2
54119: ARRAY
54120: ST_TO_ADDR
// break ;
54121: GO 54125
// end ;
54123: GO 54083
54125: POP
54126: POP
// if not weapon then
54127: LD_VAR 0 8
54131: NOT
54132: IFFALSE 54136
// continue ;
54134: GO 54032
// for k in factories do
54136: LD_ADDR_VAR 0 6
54140: PUSH
54141: LD_VAR 0 2
54145: PUSH
54146: FOR_IN
54147: IFFALSE 54212
// begin weapons := AvailableWeaponList ( k ) ;
54149: LD_ADDR_VAR 0 9
54153: PUSH
54154: LD_VAR 0 6
54158: PPUSH
54159: CALL_OW 478
54163: ST_TO_ADDR
// if not weapons then
54164: LD_VAR 0 9
54168: NOT
54169: IFFALSE 54173
// continue ;
54171: GO 54146
// if weapon in weapons then
54173: LD_VAR 0 8
54177: PUSH
54178: LD_VAR 0 9
54182: IN
54183: IFFALSE 54210
// begin result := [ i , weapon ] ;
54185: LD_ADDR_VAR 0 3
54189: PUSH
54190: LD_VAR 0 4
54194: PUSH
54195: LD_VAR 0 8
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: ST_TO_ADDR
// exit ;
54204: POP
54205: POP
54206: POP
54207: POP
54208: GO 54218
// end ; end ;
54210: GO 54146
54212: POP
54213: POP
// end ;
54214: GO 54032
54216: POP
54217: POP
// end ;
54218: LD_VAR 0 3
54222: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54223: LD_INT 0
54225: PPUSH
// if not side or side > 8 then
54226: LD_VAR 0 3
54230: NOT
54231: PUSH
54232: LD_VAR 0 3
54236: PUSH
54237: LD_INT 8
54239: GREATER
54240: OR
54241: IFFALSE 54245
// exit ;
54243: GO 54304
// if not range then
54245: LD_VAR 0 4
54249: NOT
54250: IFFALSE 54261
// range := - 12 ;
54252: LD_ADDR_VAR 0 4
54256: PUSH
54257: LD_INT 12
54259: NEG
54260: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54261: LD_VAR 0 1
54265: PPUSH
54266: LD_VAR 0 2
54270: PPUSH
54271: LD_VAR 0 3
54275: PPUSH
54276: LD_VAR 0 4
54280: PPUSH
54281: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54285: LD_VAR 0 1
54289: PPUSH
54290: LD_VAR 0 2
54294: PPUSH
54295: LD_VAR 0 3
54299: PPUSH
54300: CALL_OW 331
// end ;
54304: LD_VAR 0 5
54308: RET
// export function Video ( mode ) ; begin
54309: LD_INT 0
54311: PPUSH
// ingame_video = mode ;
54312: LD_ADDR_OWVAR 52
54316: PUSH
54317: LD_VAR 0 1
54321: ST_TO_ADDR
// interface_hidden = mode ;
54322: LD_ADDR_OWVAR 54
54326: PUSH
54327: LD_VAR 0 1
54331: ST_TO_ADDR
// end ;
54332: LD_VAR 0 2
54336: RET
// export function Join ( array , element ) ; begin
54337: LD_INT 0
54339: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54340: LD_ADDR_VAR 0 3
54344: PUSH
54345: LD_VAR 0 1
54349: PPUSH
54350: LD_VAR 0 1
54354: PUSH
54355: LD_INT 1
54357: PLUS
54358: PPUSH
54359: LD_VAR 0 2
54363: PPUSH
54364: CALL_OW 1
54368: ST_TO_ADDR
// end ;
54369: LD_VAR 0 3
54373: RET
// export function JoinUnion ( array , element ) ; begin
54374: LD_INT 0
54376: PPUSH
// result := array union element ;
54377: LD_ADDR_VAR 0 3
54381: PUSH
54382: LD_VAR 0 1
54386: PUSH
54387: LD_VAR 0 2
54391: UNION
54392: ST_TO_ADDR
// end ;
54393: LD_VAR 0 3
54397: RET
// export function GetBehemoths ( side ) ; begin
54398: LD_INT 0
54400: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54401: LD_ADDR_VAR 0 2
54405: PUSH
54406: LD_INT 22
54408: PUSH
54409: LD_VAR 0 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 31
54420: PUSH
54421: LD_INT 25
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PPUSH
54432: CALL_OW 69
54436: ST_TO_ADDR
// end ;
54437: LD_VAR 0 2
54441: RET
// export function Shuffle ( array ) ; var i , index ; begin
54442: LD_INT 0
54444: PPUSH
54445: PPUSH
54446: PPUSH
// result := [ ] ;
54447: LD_ADDR_VAR 0 2
54451: PUSH
54452: EMPTY
54453: ST_TO_ADDR
// if not array then
54454: LD_VAR 0 1
54458: NOT
54459: IFFALSE 54463
// exit ;
54461: GO 54562
// Randomize ;
54463: CALL_OW 10
// for i = array downto 1 do
54467: LD_ADDR_VAR 0 3
54471: PUSH
54472: DOUBLE
54473: LD_VAR 0 1
54477: INC
54478: ST_TO_ADDR
54479: LD_INT 1
54481: PUSH
54482: FOR_DOWNTO
54483: IFFALSE 54560
// begin index := rand ( 1 , array ) ;
54485: LD_ADDR_VAR 0 4
54489: PUSH
54490: LD_INT 1
54492: PPUSH
54493: LD_VAR 0 1
54497: PPUSH
54498: CALL_OW 12
54502: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54503: LD_ADDR_VAR 0 2
54507: PUSH
54508: LD_VAR 0 2
54512: PPUSH
54513: LD_VAR 0 2
54517: PUSH
54518: LD_INT 1
54520: PLUS
54521: PPUSH
54522: LD_VAR 0 1
54526: PUSH
54527: LD_VAR 0 4
54531: ARRAY
54532: PPUSH
54533: CALL_OW 2
54537: ST_TO_ADDR
// array := Delete ( array , index ) ;
54538: LD_ADDR_VAR 0 1
54542: PUSH
54543: LD_VAR 0 1
54547: PPUSH
54548: LD_VAR 0 4
54552: PPUSH
54553: CALL_OW 3
54557: ST_TO_ADDR
// end ;
54558: GO 54482
54560: POP
54561: POP
// end ;
54562: LD_VAR 0 2
54566: RET
// export function GetBaseMaterials ( base ) ; begin
54567: LD_INT 0
54569: PPUSH
// result := [ 0 , 0 , 0 ] ;
54570: LD_ADDR_VAR 0 2
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: ST_TO_ADDR
// if not base then
54589: LD_VAR 0 1
54593: NOT
54594: IFFALSE 54598
// exit ;
54596: GO 54647
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54598: LD_ADDR_VAR 0 2
54602: PUSH
54603: LD_VAR 0 1
54607: PPUSH
54608: LD_INT 1
54610: PPUSH
54611: CALL_OW 275
54615: PUSH
54616: LD_VAR 0 1
54620: PPUSH
54621: LD_INT 2
54623: PPUSH
54624: CALL_OW 275
54628: PUSH
54629: LD_VAR 0 1
54633: PPUSH
54634: LD_INT 3
54636: PPUSH
54637: CALL_OW 275
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// end ;
54647: LD_VAR 0 2
54651: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54652: LD_INT 0
54654: PPUSH
54655: PPUSH
// result := array ;
54656: LD_ADDR_VAR 0 3
54660: PUSH
54661: LD_VAR 0 1
54665: ST_TO_ADDR
// if size >= result then
54666: LD_VAR 0 2
54670: PUSH
54671: LD_VAR 0 3
54675: GREATEREQUAL
54676: IFFALSE 54680
// exit ;
54678: GO 54730
// if size then
54680: LD_VAR 0 2
54684: IFFALSE 54730
// for i := array downto size do
54686: LD_ADDR_VAR 0 4
54690: PUSH
54691: DOUBLE
54692: LD_VAR 0 1
54696: INC
54697: ST_TO_ADDR
54698: LD_VAR 0 2
54702: PUSH
54703: FOR_DOWNTO
54704: IFFALSE 54728
// result := Delete ( result , result ) ;
54706: LD_ADDR_VAR 0 3
54710: PUSH
54711: LD_VAR 0 3
54715: PPUSH
54716: LD_VAR 0 3
54720: PPUSH
54721: CALL_OW 3
54725: ST_TO_ADDR
54726: GO 54703
54728: POP
54729: POP
// end ;
54730: LD_VAR 0 3
54734: RET
// export function ComExit ( unit ) ; var tmp ; begin
54735: LD_INT 0
54737: PPUSH
54738: PPUSH
// if not IsInUnit ( unit ) then
54739: LD_VAR 0 1
54743: PPUSH
54744: CALL_OW 310
54748: NOT
54749: IFFALSE 54753
// exit ;
54751: GO 54813
// tmp := IsInUnit ( unit ) ;
54753: LD_ADDR_VAR 0 3
54757: PUSH
54758: LD_VAR 0 1
54762: PPUSH
54763: CALL_OW 310
54767: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54768: LD_VAR 0 3
54772: PPUSH
54773: CALL_OW 247
54777: PUSH
54778: LD_INT 2
54780: EQUAL
54781: IFFALSE 54794
// ComExitVehicle ( unit ) else
54783: LD_VAR 0 1
54787: PPUSH
54788: CALL_OW 121
54792: GO 54803
// ComExitBuilding ( unit ) ;
54794: LD_VAR 0 1
54798: PPUSH
54799: CALL_OW 122
// result := tmp ;
54803: LD_ADDR_VAR 0 2
54807: PUSH
54808: LD_VAR 0 3
54812: ST_TO_ADDR
// end ;
54813: LD_VAR 0 2
54817: RET
// export function ComExitAll ( units ) ; var i ; begin
54818: LD_INT 0
54820: PPUSH
54821: PPUSH
// if not units then
54822: LD_VAR 0 1
54826: NOT
54827: IFFALSE 54831
// exit ;
54829: GO 54857
// for i in units do
54831: LD_ADDR_VAR 0 3
54835: PUSH
54836: LD_VAR 0 1
54840: PUSH
54841: FOR_IN
54842: IFFALSE 54855
// ComExit ( i ) ;
54844: LD_VAR 0 3
54848: PPUSH
54849: CALL 54735 0 1
54853: GO 54841
54855: POP
54856: POP
// end ;
54857: LD_VAR 0 2
54861: RET
// export function ResetHc ; begin
54862: LD_INT 0
54864: PPUSH
// InitHc ;
54865: CALL_OW 19
// hc_importance := 0 ;
54869: LD_ADDR_OWVAR 32
54873: PUSH
54874: LD_INT 0
54876: ST_TO_ADDR
// end ;
54877: LD_VAR 0 1
54881: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54882: LD_INT 0
54884: PPUSH
54885: PPUSH
54886: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54887: LD_ADDR_VAR 0 6
54891: PUSH
54892: LD_VAR 0 1
54896: PUSH
54897: LD_VAR 0 3
54901: PLUS
54902: PUSH
54903: LD_INT 2
54905: DIV
54906: ST_TO_ADDR
// if _x < 0 then
54907: LD_VAR 0 6
54911: PUSH
54912: LD_INT 0
54914: LESS
54915: IFFALSE 54932
// _x := _x * - 1 ;
54917: LD_ADDR_VAR 0 6
54921: PUSH
54922: LD_VAR 0 6
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: MUL
54931: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54932: LD_ADDR_VAR 0 7
54936: PUSH
54937: LD_VAR 0 2
54941: PUSH
54942: LD_VAR 0 4
54946: PLUS
54947: PUSH
54948: LD_INT 2
54950: DIV
54951: ST_TO_ADDR
// if _y < 0 then
54952: LD_VAR 0 7
54956: PUSH
54957: LD_INT 0
54959: LESS
54960: IFFALSE 54977
// _y := _y * - 1 ;
54962: LD_ADDR_VAR 0 7
54966: PUSH
54967: LD_VAR 0 7
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: MUL
54976: ST_TO_ADDR
// result := [ _x , _y ] ;
54977: LD_ADDR_VAR 0 5
54981: PUSH
54982: LD_VAR 0 6
54986: PUSH
54987: LD_VAR 0 7
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: ST_TO_ADDR
// end ;
54996: LD_VAR 0 5
55000: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55001: LD_INT 0
55003: PPUSH
55004: PPUSH
55005: PPUSH
55006: PPUSH
// task := GetTaskList ( unit ) ;
55007: LD_ADDR_VAR 0 7
55011: PUSH
55012: LD_VAR 0 1
55016: PPUSH
55017: CALL_OW 437
55021: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55022: LD_VAR 0 7
55026: NOT
55027: PUSH
55028: LD_VAR 0 1
55032: PPUSH
55033: LD_VAR 0 2
55037: PPUSH
55038: CALL_OW 308
55042: NOT
55043: AND
55044: IFFALSE 55048
// exit ;
55046: GO 55166
// if IsInArea ( unit , area ) then
55048: LD_VAR 0 1
55052: PPUSH
55053: LD_VAR 0 2
55057: PPUSH
55058: CALL_OW 308
55062: IFFALSE 55080
// begin ComMoveToArea ( unit , goAway ) ;
55064: LD_VAR 0 1
55068: PPUSH
55069: LD_VAR 0 3
55073: PPUSH
55074: CALL_OW 113
// exit ;
55078: GO 55166
// end ; if task [ 1 ] [ 1 ] <> M then
55080: LD_VAR 0 7
55084: PUSH
55085: LD_INT 1
55087: ARRAY
55088: PUSH
55089: LD_INT 1
55091: ARRAY
55092: PUSH
55093: LD_STRING M
55095: NONEQUAL
55096: IFFALSE 55100
// exit ;
55098: GO 55166
// x := task [ 1 ] [ 2 ] ;
55100: LD_ADDR_VAR 0 5
55104: PUSH
55105: LD_VAR 0 7
55109: PUSH
55110: LD_INT 1
55112: ARRAY
55113: PUSH
55114: LD_INT 2
55116: ARRAY
55117: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55118: LD_ADDR_VAR 0 6
55122: PUSH
55123: LD_VAR 0 7
55127: PUSH
55128: LD_INT 1
55130: ARRAY
55131: PUSH
55132: LD_INT 3
55134: ARRAY
55135: ST_TO_ADDR
// if InArea ( x , y , area ) then
55136: LD_VAR 0 5
55140: PPUSH
55141: LD_VAR 0 6
55145: PPUSH
55146: LD_VAR 0 2
55150: PPUSH
55151: CALL_OW 309
55155: IFFALSE 55166
// ComStop ( unit ) ;
55157: LD_VAR 0 1
55161: PPUSH
55162: CALL_OW 141
// end ;
55166: LD_VAR 0 4
55170: RET
// export function Abs ( value ) ; begin
55171: LD_INT 0
55173: PPUSH
// result := value ;
55174: LD_ADDR_VAR 0 2
55178: PUSH
55179: LD_VAR 0 1
55183: ST_TO_ADDR
// if value < 0 then
55184: LD_VAR 0 1
55188: PUSH
55189: LD_INT 0
55191: LESS
55192: IFFALSE 55209
// result := value * - 1 ;
55194: LD_ADDR_VAR 0 2
55198: PUSH
55199: LD_VAR 0 1
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: MUL
55208: ST_TO_ADDR
// end ;
55209: LD_VAR 0 2
55213: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55214: LD_INT 0
55216: PPUSH
55217: PPUSH
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
55223: PPUSH
// if not unit or not building then
55224: LD_VAR 0 1
55228: NOT
55229: PUSH
55230: LD_VAR 0 2
55234: NOT
55235: OR
55236: IFFALSE 55240
// exit ;
55238: GO 55466
// x := GetX ( building ) ;
55240: LD_ADDR_VAR 0 4
55244: PUSH
55245: LD_VAR 0 2
55249: PPUSH
55250: CALL_OW 250
55254: ST_TO_ADDR
// y := GetY ( building ) ;
55255: LD_ADDR_VAR 0 6
55259: PUSH
55260: LD_VAR 0 2
55264: PPUSH
55265: CALL_OW 251
55269: ST_TO_ADDR
// d := GetDir ( building ) ;
55270: LD_ADDR_VAR 0 8
55274: PUSH
55275: LD_VAR 0 2
55279: PPUSH
55280: CALL_OW 254
55284: ST_TO_ADDR
// r := 4 ;
55285: LD_ADDR_VAR 0 9
55289: PUSH
55290: LD_INT 4
55292: ST_TO_ADDR
// for i := 1 to 5 do
55293: LD_ADDR_VAR 0 10
55297: PUSH
55298: DOUBLE
55299: LD_INT 1
55301: DEC
55302: ST_TO_ADDR
55303: LD_INT 5
55305: PUSH
55306: FOR_TO
55307: IFFALSE 55464
// begin _x := ShiftX ( x , d , r + i ) ;
55309: LD_ADDR_VAR 0 5
55313: PUSH
55314: LD_VAR 0 4
55318: PPUSH
55319: LD_VAR 0 8
55323: PPUSH
55324: LD_VAR 0 9
55328: PUSH
55329: LD_VAR 0 10
55333: PLUS
55334: PPUSH
55335: CALL_OW 272
55339: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55340: LD_ADDR_VAR 0 7
55344: PUSH
55345: LD_VAR 0 6
55349: PPUSH
55350: LD_VAR 0 8
55354: PPUSH
55355: LD_VAR 0 9
55359: PUSH
55360: LD_VAR 0 10
55364: PLUS
55365: PPUSH
55366: CALL_OW 273
55370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55371: LD_VAR 0 5
55375: PPUSH
55376: LD_VAR 0 7
55380: PPUSH
55381: CALL_OW 488
55385: PUSH
55386: LD_VAR 0 5
55390: PPUSH
55391: LD_VAR 0 7
55395: PPUSH
55396: CALL_OW 428
55400: PPUSH
55401: CALL_OW 247
55405: PUSH
55406: LD_INT 3
55408: PUSH
55409: LD_INT 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: IN
55416: NOT
55417: AND
55418: IFFALSE 55462
// begin ComMoveXY ( unit , _x , _y ) ;
55420: LD_VAR 0 1
55424: PPUSH
55425: LD_VAR 0 5
55429: PPUSH
55430: LD_VAR 0 7
55434: PPUSH
55435: CALL_OW 111
// result := [ _x , _y ] ;
55439: LD_ADDR_VAR 0 3
55443: PUSH
55444: LD_VAR 0 5
55448: PUSH
55449: LD_VAR 0 7
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: ST_TO_ADDR
// exit ;
55458: POP
55459: POP
55460: GO 55466
// end ; end ;
55462: GO 55306
55464: POP
55465: POP
// end ;
55466: LD_VAR 0 3
55470: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55471: LD_INT 0
55473: PPUSH
55474: PPUSH
55475: PPUSH
// result := 0 ;
55476: LD_ADDR_VAR 0 3
55480: PUSH
55481: LD_INT 0
55483: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55484: LD_VAR 0 1
55488: PUSH
55489: LD_INT 0
55491: LESS
55492: PUSH
55493: LD_VAR 0 1
55497: PUSH
55498: LD_INT 8
55500: GREATER
55501: OR
55502: PUSH
55503: LD_VAR 0 2
55507: PUSH
55508: LD_INT 0
55510: LESS
55511: OR
55512: PUSH
55513: LD_VAR 0 2
55517: PUSH
55518: LD_INT 8
55520: GREATER
55521: OR
55522: IFFALSE 55526
// exit ;
55524: GO 55601
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55526: LD_ADDR_VAR 0 4
55530: PUSH
55531: LD_INT 22
55533: PUSH
55534: LD_VAR 0 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PPUSH
55543: CALL_OW 69
55547: PUSH
55548: FOR_IN
55549: IFFALSE 55599
// begin un := UnitShoot ( i ) ;
55551: LD_ADDR_VAR 0 5
55555: PUSH
55556: LD_VAR 0 4
55560: PPUSH
55561: CALL_OW 504
55565: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55566: LD_VAR 0 5
55570: PPUSH
55571: CALL_OW 255
55575: PUSH
55576: LD_VAR 0 1
55580: EQUAL
55581: IFFALSE 55597
// begin result := un ;
55583: LD_ADDR_VAR 0 3
55587: PUSH
55588: LD_VAR 0 5
55592: ST_TO_ADDR
// exit ;
55593: POP
55594: POP
55595: GO 55601
// end ; end ;
55597: GO 55548
55599: POP
55600: POP
// end ;
55601: LD_VAR 0 3
55605: RET
// export function GetCargoBay ( units ) ; begin
55606: LD_INT 0
55608: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55609: LD_ADDR_VAR 0 2
55613: PUSH
55614: LD_VAR 0 1
55618: PPUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 34
55624: PUSH
55625: LD_INT 12
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 34
55634: PUSH
55635: LD_INT 51
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 34
55644: PUSH
55645: LD_INT 32
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 34
55654: PUSH
55655: LD_INT 89
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: PPUSH
55669: CALL_OW 72
55673: ST_TO_ADDR
// end ;
55674: LD_VAR 0 2
55678: RET
// export function Negate ( value ) ; begin
55679: LD_INT 0
55681: PPUSH
// result := not value ;
55682: LD_ADDR_VAR 0 2
55686: PUSH
55687: LD_VAR 0 1
55691: NOT
55692: ST_TO_ADDR
// end ;
55693: LD_VAR 0 2
55697: RET
// export function Inc ( value ) ; begin
55698: LD_INT 0
55700: PPUSH
// result := value + 1 ;
55701: LD_ADDR_VAR 0 2
55705: PUSH
55706: LD_VAR 0 1
55710: PUSH
55711: LD_INT 1
55713: PLUS
55714: ST_TO_ADDR
// end ;
55715: LD_VAR 0 2
55719: RET
// export function Dec ( value ) ; begin
55720: LD_INT 0
55722: PPUSH
// result := value - 1 ;
55723: LD_ADDR_VAR 0 2
55727: PUSH
55728: LD_VAR 0 1
55732: PUSH
55733: LD_INT 1
55735: MINUS
55736: ST_TO_ADDR
// end ;
55737: LD_VAR 0 2
55741: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55742: LD_INT 0
55744: PPUSH
55745: PPUSH
55746: PPUSH
55747: PPUSH
55748: PPUSH
55749: PPUSH
55750: PPUSH
55751: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55752: LD_VAR 0 1
55756: PPUSH
55757: LD_VAR 0 2
55761: PPUSH
55762: CALL_OW 488
55766: NOT
55767: PUSH
55768: LD_VAR 0 3
55772: PPUSH
55773: LD_VAR 0 4
55777: PPUSH
55778: CALL_OW 488
55782: NOT
55783: OR
55784: IFFALSE 55797
// begin result := - 1 ;
55786: LD_ADDR_VAR 0 5
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: ST_TO_ADDR
// exit ;
55795: GO 56032
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55797: LD_ADDR_VAR 0 12
55801: PUSH
55802: LD_VAR 0 1
55806: PPUSH
55807: LD_VAR 0 2
55811: PPUSH
55812: LD_VAR 0 3
55816: PPUSH
55817: LD_VAR 0 4
55821: PPUSH
55822: CALL 54882 0 4
55826: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55827: LD_ADDR_VAR 0 11
55831: PUSH
55832: LD_VAR 0 1
55836: PPUSH
55837: LD_VAR 0 2
55841: PPUSH
55842: LD_VAR 0 12
55846: PUSH
55847: LD_INT 1
55849: ARRAY
55850: PPUSH
55851: LD_VAR 0 12
55855: PUSH
55856: LD_INT 2
55858: ARRAY
55859: PPUSH
55860: CALL_OW 298
55864: ST_TO_ADDR
// distance := 9999 ;
55865: LD_ADDR_VAR 0 10
55869: PUSH
55870: LD_INT 9999
55872: ST_TO_ADDR
// for i := 0 to 5 do
55873: LD_ADDR_VAR 0 6
55877: PUSH
55878: DOUBLE
55879: LD_INT 0
55881: DEC
55882: ST_TO_ADDR
55883: LD_INT 5
55885: PUSH
55886: FOR_TO
55887: IFFALSE 56030
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55889: LD_ADDR_VAR 0 7
55893: PUSH
55894: LD_VAR 0 1
55898: PPUSH
55899: LD_VAR 0 6
55903: PPUSH
55904: LD_VAR 0 11
55908: PPUSH
55909: CALL_OW 272
55913: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55914: LD_ADDR_VAR 0 8
55918: PUSH
55919: LD_VAR 0 2
55923: PPUSH
55924: LD_VAR 0 6
55928: PPUSH
55929: LD_VAR 0 11
55933: PPUSH
55934: CALL_OW 273
55938: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55939: LD_VAR 0 7
55943: PPUSH
55944: LD_VAR 0 8
55948: PPUSH
55949: CALL_OW 488
55953: NOT
55954: IFFALSE 55958
// continue ;
55956: GO 55886
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55958: LD_ADDR_VAR 0 9
55962: PUSH
55963: LD_VAR 0 12
55967: PUSH
55968: LD_INT 1
55970: ARRAY
55971: PPUSH
55972: LD_VAR 0 12
55976: PUSH
55977: LD_INT 2
55979: ARRAY
55980: PPUSH
55981: LD_VAR 0 7
55985: PPUSH
55986: LD_VAR 0 8
55990: PPUSH
55991: CALL_OW 298
55995: ST_TO_ADDR
// if tmp < distance then
55996: LD_VAR 0 9
56000: PUSH
56001: LD_VAR 0 10
56005: LESS
56006: IFFALSE 56028
// begin result := i ;
56008: LD_ADDR_VAR 0 5
56012: PUSH
56013: LD_VAR 0 6
56017: ST_TO_ADDR
// distance := tmp ;
56018: LD_ADDR_VAR 0 10
56022: PUSH
56023: LD_VAR 0 9
56027: ST_TO_ADDR
// end ; end ;
56028: GO 55886
56030: POP
56031: POP
// end ;
56032: LD_VAR 0 5
56036: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56037: LD_INT 0
56039: PPUSH
56040: PPUSH
// if not driver or not IsInUnit ( driver ) then
56041: LD_VAR 0 1
56045: NOT
56046: PUSH
56047: LD_VAR 0 1
56051: PPUSH
56052: CALL_OW 310
56056: NOT
56057: OR
56058: IFFALSE 56062
// exit ;
56060: GO 56152
// vehicle := IsInUnit ( driver ) ;
56062: LD_ADDR_VAR 0 3
56066: PUSH
56067: LD_VAR 0 1
56071: PPUSH
56072: CALL_OW 310
56076: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56077: LD_VAR 0 1
56081: PPUSH
56082: LD_STRING \
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 0
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: PUSH
56112: LD_STRING E
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_VAR 0 3
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: LD_INT 0
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PPUSH
56148: CALL_OW 446
// end ;
56152: LD_VAR 0 2
56156: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56157: LD_INT 0
56159: PPUSH
56160: PPUSH
// if not driver or not IsInUnit ( driver ) then
56161: LD_VAR 0 1
56165: NOT
56166: PUSH
56167: LD_VAR 0 1
56171: PPUSH
56172: CALL_OW 310
56176: NOT
56177: OR
56178: IFFALSE 56182
// exit ;
56180: GO 56272
// vehicle := IsInUnit ( driver ) ;
56182: LD_ADDR_VAR 0 3
56186: PUSH
56187: LD_VAR 0 1
56191: PPUSH
56192: CALL_OW 310
56196: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56197: LD_VAR 0 1
56201: PPUSH
56202: LD_STRING \
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: LD_INT 0
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 0
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: PUSH
56232: LD_STRING E
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_VAR 0 3
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PPUSH
56268: CALL_OW 447
// end ;
56272: LD_VAR 0 2
56276: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56277: LD_INT 0
56279: PPUSH
56280: PPUSH
56281: PPUSH
// tmp := [ ] ;
56282: LD_ADDR_VAR 0 5
56286: PUSH
56287: EMPTY
56288: ST_TO_ADDR
// for i in units do
56289: LD_ADDR_VAR 0 4
56293: PUSH
56294: LD_VAR 0 1
56298: PUSH
56299: FOR_IN
56300: IFFALSE 56338
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56302: LD_ADDR_VAR 0 5
56306: PUSH
56307: LD_VAR 0 5
56311: PPUSH
56312: LD_VAR 0 5
56316: PUSH
56317: LD_INT 1
56319: PLUS
56320: PPUSH
56321: LD_VAR 0 4
56325: PPUSH
56326: CALL_OW 256
56330: PPUSH
56331: CALL_OW 2
56335: ST_TO_ADDR
56336: GO 56299
56338: POP
56339: POP
// if not tmp then
56340: LD_VAR 0 5
56344: NOT
56345: IFFALSE 56349
// exit ;
56347: GO 56397
// if asc then
56349: LD_VAR 0 2
56353: IFFALSE 56377
// result := SortListByListAsc ( units , tmp ) else
56355: LD_ADDR_VAR 0 3
56359: PUSH
56360: LD_VAR 0 1
56364: PPUSH
56365: LD_VAR 0 5
56369: PPUSH
56370: CALL_OW 76
56374: ST_TO_ADDR
56375: GO 56397
// result := SortListByListDesc ( units , tmp ) ;
56377: LD_ADDR_VAR 0 3
56381: PUSH
56382: LD_VAR 0 1
56386: PPUSH
56387: LD_VAR 0 5
56391: PPUSH
56392: CALL_OW 77
56396: ST_TO_ADDR
// end ;
56397: LD_VAR 0 3
56401: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56402: LD_INT 0
56404: PPUSH
56405: PPUSH
// task := GetTaskList ( mech ) ;
56406: LD_ADDR_VAR 0 4
56410: PUSH
56411: LD_VAR 0 1
56415: PPUSH
56416: CALL_OW 437
56420: ST_TO_ADDR
// if not task then
56421: LD_VAR 0 4
56425: NOT
56426: IFFALSE 56430
// exit ;
56428: GO 56472
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56430: LD_ADDR_VAR 0 3
56434: PUSH
56435: LD_VAR 0 4
56439: PUSH
56440: LD_INT 1
56442: ARRAY
56443: PUSH
56444: LD_INT 1
56446: ARRAY
56447: PUSH
56448: LD_STRING r
56450: EQUAL
56451: PUSH
56452: LD_VAR 0 4
56456: PUSH
56457: LD_INT 1
56459: ARRAY
56460: PUSH
56461: LD_INT 4
56463: ARRAY
56464: PUSH
56465: LD_VAR 0 2
56469: EQUAL
56470: AND
56471: ST_TO_ADDR
// end ;
56472: LD_VAR 0 3
56476: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56477: LD_INT 0
56479: PPUSH
// SetDir ( unit , d ) ;
56480: LD_VAR 0 1
56484: PPUSH
56485: LD_VAR 0 4
56489: PPUSH
56490: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56494: LD_VAR 0 1
56498: PPUSH
56499: LD_VAR 0 2
56503: PPUSH
56504: LD_VAR 0 3
56508: PPUSH
56509: LD_VAR 0 5
56513: PPUSH
56514: CALL_OW 48
// end ;
56518: LD_VAR 0 6
56522: RET
// export function ToNaturalNumber ( number ) ; begin
56523: LD_INT 0
56525: PPUSH
// result := number div 1 ;
56526: LD_ADDR_VAR 0 2
56530: PUSH
56531: LD_VAR 0 1
56535: PUSH
56536: LD_INT 1
56538: DIV
56539: ST_TO_ADDR
// if number < 0 then
56540: LD_VAR 0 1
56544: PUSH
56545: LD_INT 0
56547: LESS
56548: IFFALSE 56558
// result := 0 ;
56550: LD_ADDR_VAR 0 2
56554: PUSH
56555: LD_INT 0
56557: ST_TO_ADDR
// end ;
56558: LD_VAR 0 2
56562: RET
// export function SortByClass ( units , class ) ; var un ; begin
56563: LD_INT 0
56565: PPUSH
56566: PPUSH
// if not units or not class then
56567: LD_VAR 0 1
56571: NOT
56572: PUSH
56573: LD_VAR 0 2
56577: NOT
56578: OR
56579: IFFALSE 56583
// exit ;
56581: GO 56678
// result := [ ] ;
56583: LD_ADDR_VAR 0 3
56587: PUSH
56588: EMPTY
56589: ST_TO_ADDR
// for un in units do
56590: LD_ADDR_VAR 0 4
56594: PUSH
56595: LD_VAR 0 1
56599: PUSH
56600: FOR_IN
56601: IFFALSE 56676
// if GetClass ( un ) = class then
56603: LD_VAR 0 4
56607: PPUSH
56608: CALL_OW 257
56612: PUSH
56613: LD_VAR 0 2
56617: EQUAL
56618: IFFALSE 56645
// result := Insert ( result , 1 , un ) else
56620: LD_ADDR_VAR 0 3
56624: PUSH
56625: LD_VAR 0 3
56629: PPUSH
56630: LD_INT 1
56632: PPUSH
56633: LD_VAR 0 4
56637: PPUSH
56638: CALL_OW 2
56642: ST_TO_ADDR
56643: GO 56674
// result := Replace ( result , result + 1 , un ) ;
56645: LD_ADDR_VAR 0 3
56649: PUSH
56650: LD_VAR 0 3
56654: PPUSH
56655: LD_VAR 0 3
56659: PUSH
56660: LD_INT 1
56662: PLUS
56663: PPUSH
56664: LD_VAR 0 4
56668: PPUSH
56669: CALL_OW 1
56673: ST_TO_ADDR
56674: GO 56600
56676: POP
56677: POP
// end ;
56678: LD_VAR 0 3
56682: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56683: LD_INT 0
56685: PPUSH
56686: PPUSH
56687: PPUSH
56688: PPUSH
56689: PPUSH
56690: PPUSH
56691: PPUSH
// result := [ ] ;
56692: LD_ADDR_VAR 0 4
56696: PUSH
56697: EMPTY
56698: ST_TO_ADDR
// if x - r < 0 then
56699: LD_VAR 0 1
56703: PUSH
56704: LD_VAR 0 3
56708: MINUS
56709: PUSH
56710: LD_INT 0
56712: LESS
56713: IFFALSE 56725
// min_x := 0 else
56715: LD_ADDR_VAR 0 8
56719: PUSH
56720: LD_INT 0
56722: ST_TO_ADDR
56723: GO 56741
// min_x := x - r ;
56725: LD_ADDR_VAR 0 8
56729: PUSH
56730: LD_VAR 0 1
56734: PUSH
56735: LD_VAR 0 3
56739: MINUS
56740: ST_TO_ADDR
// if y - r < 0 then
56741: LD_VAR 0 2
56745: PUSH
56746: LD_VAR 0 3
56750: MINUS
56751: PUSH
56752: LD_INT 0
56754: LESS
56755: IFFALSE 56767
// min_y := 0 else
56757: LD_ADDR_VAR 0 7
56761: PUSH
56762: LD_INT 0
56764: ST_TO_ADDR
56765: GO 56783
// min_y := y - r ;
56767: LD_ADDR_VAR 0 7
56771: PUSH
56772: LD_VAR 0 2
56776: PUSH
56777: LD_VAR 0 3
56781: MINUS
56782: ST_TO_ADDR
// max_x := x + r ;
56783: LD_ADDR_VAR 0 9
56787: PUSH
56788: LD_VAR 0 1
56792: PUSH
56793: LD_VAR 0 3
56797: PLUS
56798: ST_TO_ADDR
// max_y := y + r ;
56799: LD_ADDR_VAR 0 10
56803: PUSH
56804: LD_VAR 0 2
56808: PUSH
56809: LD_VAR 0 3
56813: PLUS
56814: ST_TO_ADDR
// for _x = min_x to max_x do
56815: LD_ADDR_VAR 0 5
56819: PUSH
56820: DOUBLE
56821: LD_VAR 0 8
56825: DEC
56826: ST_TO_ADDR
56827: LD_VAR 0 9
56831: PUSH
56832: FOR_TO
56833: IFFALSE 56934
// for _y = min_y to max_y do
56835: LD_ADDR_VAR 0 6
56839: PUSH
56840: DOUBLE
56841: LD_VAR 0 7
56845: DEC
56846: ST_TO_ADDR
56847: LD_VAR 0 10
56851: PUSH
56852: FOR_TO
56853: IFFALSE 56930
// begin if not ValidHex ( _x , _y ) then
56855: LD_VAR 0 5
56859: PPUSH
56860: LD_VAR 0 6
56864: PPUSH
56865: CALL_OW 488
56869: NOT
56870: IFFALSE 56874
// continue ;
56872: GO 56852
// if GetResourceTypeXY ( _x , _y ) then
56874: LD_VAR 0 5
56878: PPUSH
56879: LD_VAR 0 6
56883: PPUSH
56884: CALL_OW 283
56888: IFFALSE 56928
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56890: LD_ADDR_VAR 0 4
56894: PUSH
56895: LD_VAR 0 4
56899: PPUSH
56900: LD_VAR 0 4
56904: PUSH
56905: LD_INT 1
56907: PLUS
56908: PPUSH
56909: LD_VAR 0 5
56913: PUSH
56914: LD_VAR 0 6
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PPUSH
56923: CALL_OW 1
56927: ST_TO_ADDR
// end ;
56928: GO 56852
56930: POP
56931: POP
56932: GO 56832
56934: POP
56935: POP
// end ;
56936: LD_VAR 0 4
56940: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56941: LD_INT 0
56943: PPUSH
56944: PPUSH
56945: PPUSH
56946: PPUSH
56947: PPUSH
56948: PPUSH
56949: PPUSH
56950: PPUSH
// if not units then
56951: LD_VAR 0 1
56955: NOT
56956: IFFALSE 56960
// exit ;
56958: GO 57484
// result := UnitFilter ( units , [ f_ok ] ) ;
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: LD_VAR 0 1
56969: PPUSH
56970: LD_INT 50
56972: PUSH
56973: EMPTY
56974: LIST
56975: PPUSH
56976: CALL_OW 72
56980: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56981: LD_ADDR_VAR 0 8
56985: PUSH
56986: LD_VAR 0 1
56990: PUSH
56991: LD_INT 1
56993: ARRAY
56994: PPUSH
56995: CALL_OW 255
56999: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57000: LD_ADDR_VAR 0 10
57004: PUSH
57005: LD_INT 29
57007: PUSH
57008: LD_INT 91
57010: PUSH
57011: LD_INT 49
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: ST_TO_ADDR
// if not result then
57019: LD_VAR 0 3
57023: NOT
57024: IFFALSE 57028
// exit ;
57026: GO 57484
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57028: LD_ADDR_VAR 0 5
57032: PUSH
57033: LD_INT 81
57035: PUSH
57036: LD_VAR 0 8
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PPUSH
57045: CALL_OW 69
57049: ST_TO_ADDR
// for i in result do
57050: LD_ADDR_VAR 0 4
57054: PUSH
57055: LD_VAR 0 3
57059: PUSH
57060: FOR_IN
57061: IFFALSE 57482
// begin tag := GetTag ( i ) + 1 ;
57063: LD_ADDR_VAR 0 9
57067: PUSH
57068: LD_VAR 0 4
57072: PPUSH
57073: CALL_OW 110
57077: PUSH
57078: LD_INT 1
57080: PLUS
57081: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57082: LD_ADDR_VAR 0 7
57086: PUSH
57087: LD_VAR 0 4
57091: PPUSH
57092: CALL_OW 250
57096: PPUSH
57097: LD_VAR 0 4
57101: PPUSH
57102: CALL_OW 251
57106: PPUSH
57107: LD_INT 6
57109: PPUSH
57110: CALL 56683 0 3
57114: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57115: LD_VAR 0 4
57119: PPUSH
57120: CALL_OW 247
57124: PUSH
57125: LD_INT 2
57127: EQUAL
57128: PUSH
57129: LD_VAR 0 7
57133: AND
57134: PUSH
57135: LD_VAR 0 4
57139: PPUSH
57140: CALL_OW 264
57144: PUSH
57145: LD_VAR 0 10
57149: IN
57150: NOT
57151: AND
57152: IFFALSE 57191
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57154: LD_VAR 0 4
57158: PPUSH
57159: LD_VAR 0 7
57163: PUSH
57164: LD_INT 1
57166: ARRAY
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PPUSH
57172: LD_VAR 0 7
57176: PUSH
57177: LD_INT 1
57179: ARRAY
57180: PUSH
57181: LD_INT 2
57183: ARRAY
57184: PPUSH
57185: CALL_OW 116
57189: GO 57480
// if path > tag then
57191: LD_VAR 0 2
57195: PUSH
57196: LD_VAR 0 9
57200: GREATER
57201: IFFALSE 57409
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57203: LD_ADDR_VAR 0 6
57207: PUSH
57208: LD_VAR 0 5
57212: PPUSH
57213: LD_INT 91
57215: PUSH
57216: LD_VAR 0 4
57220: PUSH
57221: LD_INT 8
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: LIST
57228: PPUSH
57229: CALL_OW 72
57233: ST_TO_ADDR
// if nearEnemy then
57234: LD_VAR 0 6
57238: IFFALSE 57307
// begin if GetWeapon ( i ) = ru_time_lapser then
57240: LD_VAR 0 4
57244: PPUSH
57245: CALL_OW 264
57249: PUSH
57250: LD_INT 49
57252: EQUAL
57253: IFFALSE 57281
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57255: LD_VAR 0 4
57259: PPUSH
57260: LD_VAR 0 6
57264: PPUSH
57265: LD_VAR 0 4
57269: PPUSH
57270: CALL_OW 74
57274: PPUSH
57275: CALL_OW 112
57279: GO 57305
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57281: LD_VAR 0 4
57285: PPUSH
57286: LD_VAR 0 6
57290: PPUSH
57291: LD_VAR 0 4
57295: PPUSH
57296: CALL_OW 74
57300: PPUSH
57301: CALL 58409 0 2
// end else
57305: GO 57407
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57307: LD_VAR 0 4
57311: PPUSH
57312: LD_VAR 0 2
57316: PUSH
57317: LD_VAR 0 9
57321: ARRAY
57322: PUSH
57323: LD_INT 1
57325: ARRAY
57326: PPUSH
57327: LD_VAR 0 2
57331: PUSH
57332: LD_VAR 0 9
57336: ARRAY
57337: PUSH
57338: LD_INT 2
57340: ARRAY
57341: PPUSH
57342: CALL_OW 297
57346: PUSH
57347: LD_INT 6
57349: GREATER
57350: IFFALSE 57393
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57352: LD_VAR 0 4
57356: PPUSH
57357: LD_VAR 0 2
57361: PUSH
57362: LD_VAR 0 9
57366: ARRAY
57367: PUSH
57368: LD_INT 1
57370: ARRAY
57371: PPUSH
57372: LD_VAR 0 2
57376: PUSH
57377: LD_VAR 0 9
57381: ARRAY
57382: PUSH
57383: LD_INT 2
57385: ARRAY
57386: PPUSH
57387: CALL_OW 114
57391: GO 57407
// SetTag ( i , tag ) ;
57393: LD_VAR 0 4
57397: PPUSH
57398: LD_VAR 0 9
57402: PPUSH
57403: CALL_OW 109
// end else
57407: GO 57480
// if enemy then
57409: LD_VAR 0 5
57413: IFFALSE 57480
// begin if GetWeapon ( i ) = ru_time_lapser then
57415: LD_VAR 0 4
57419: PPUSH
57420: CALL_OW 264
57424: PUSH
57425: LD_INT 49
57427: EQUAL
57428: IFFALSE 57456
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57430: LD_VAR 0 4
57434: PPUSH
57435: LD_VAR 0 5
57439: PPUSH
57440: LD_VAR 0 4
57444: PPUSH
57445: CALL_OW 74
57449: PPUSH
57450: CALL_OW 112
57454: GO 57480
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57456: LD_VAR 0 4
57460: PPUSH
57461: LD_VAR 0 5
57465: PPUSH
57466: LD_VAR 0 4
57470: PPUSH
57471: CALL_OW 74
57475: PPUSH
57476: CALL 58409 0 2
// end ; end ;
57480: GO 57060
57482: POP
57483: POP
// end ;
57484: LD_VAR 0 3
57488: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57489: LD_INT 0
57491: PPUSH
57492: PPUSH
57493: PPUSH
// if not unit or IsInUnit ( unit ) then
57494: LD_VAR 0 1
57498: NOT
57499: PUSH
57500: LD_VAR 0 1
57504: PPUSH
57505: CALL_OW 310
57509: OR
57510: IFFALSE 57514
// exit ;
57512: GO 57605
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57514: LD_ADDR_VAR 0 4
57518: PUSH
57519: LD_VAR 0 1
57523: PPUSH
57524: CALL_OW 250
57528: PPUSH
57529: LD_VAR 0 2
57533: PPUSH
57534: LD_INT 1
57536: PPUSH
57537: CALL_OW 272
57541: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57542: LD_ADDR_VAR 0 5
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: CALL_OW 251
57556: PPUSH
57557: LD_VAR 0 2
57561: PPUSH
57562: LD_INT 1
57564: PPUSH
57565: CALL_OW 273
57569: ST_TO_ADDR
// if ValidHex ( x , y ) then
57570: LD_VAR 0 4
57574: PPUSH
57575: LD_VAR 0 5
57579: PPUSH
57580: CALL_OW 488
57584: IFFALSE 57605
// ComTurnXY ( unit , x , y ) ;
57586: LD_VAR 0 1
57590: PPUSH
57591: LD_VAR 0 4
57595: PPUSH
57596: LD_VAR 0 5
57600: PPUSH
57601: CALL_OW 118
// end ;
57605: LD_VAR 0 3
57609: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57610: LD_INT 0
57612: PPUSH
57613: PPUSH
// result := false ;
57614: LD_ADDR_VAR 0 3
57618: PUSH
57619: LD_INT 0
57621: ST_TO_ADDR
// if not units then
57622: LD_VAR 0 2
57626: NOT
57627: IFFALSE 57631
// exit ;
57629: GO 57676
// for i in units do
57631: LD_ADDR_VAR 0 4
57635: PUSH
57636: LD_VAR 0 2
57640: PUSH
57641: FOR_IN
57642: IFFALSE 57674
// if See ( side , i ) then
57644: LD_VAR 0 1
57648: PPUSH
57649: LD_VAR 0 4
57653: PPUSH
57654: CALL_OW 292
57658: IFFALSE 57672
// begin result := true ;
57660: LD_ADDR_VAR 0 3
57664: PUSH
57665: LD_INT 1
57667: ST_TO_ADDR
// exit ;
57668: POP
57669: POP
57670: GO 57676
// end ;
57672: GO 57641
57674: POP
57675: POP
// end ;
57676: LD_VAR 0 3
57680: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57681: LD_INT 0
57683: PPUSH
57684: PPUSH
57685: PPUSH
57686: PPUSH
// if not unit or not points then
57687: LD_VAR 0 1
57691: NOT
57692: PUSH
57693: LD_VAR 0 2
57697: NOT
57698: OR
57699: IFFALSE 57703
// exit ;
57701: GO 57793
// dist := 99999 ;
57703: LD_ADDR_VAR 0 5
57707: PUSH
57708: LD_INT 99999
57710: ST_TO_ADDR
// for i in points do
57711: LD_ADDR_VAR 0 4
57715: PUSH
57716: LD_VAR 0 2
57720: PUSH
57721: FOR_IN
57722: IFFALSE 57791
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57724: LD_ADDR_VAR 0 6
57728: PUSH
57729: LD_VAR 0 1
57733: PPUSH
57734: LD_VAR 0 4
57738: PUSH
57739: LD_INT 1
57741: ARRAY
57742: PPUSH
57743: LD_VAR 0 4
57747: PUSH
57748: LD_INT 2
57750: ARRAY
57751: PPUSH
57752: CALL_OW 297
57756: ST_TO_ADDR
// if tmpDist < dist then
57757: LD_VAR 0 6
57761: PUSH
57762: LD_VAR 0 5
57766: LESS
57767: IFFALSE 57789
// begin result := i ;
57769: LD_ADDR_VAR 0 3
57773: PUSH
57774: LD_VAR 0 4
57778: ST_TO_ADDR
// dist := tmpDist ;
57779: LD_ADDR_VAR 0 5
57783: PUSH
57784: LD_VAR 0 6
57788: ST_TO_ADDR
// end ; end ;
57789: GO 57721
57791: POP
57792: POP
// end ;
57793: LD_VAR 0 3
57797: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57798: LD_INT 0
57800: PPUSH
// uc_side := side ;
57801: LD_ADDR_OWVAR 20
57805: PUSH
57806: LD_VAR 0 1
57810: ST_TO_ADDR
// uc_nation := 3 ;
57811: LD_ADDR_OWVAR 21
57815: PUSH
57816: LD_INT 3
57818: ST_TO_ADDR
// vc_chassis := 25 ;
57819: LD_ADDR_OWVAR 37
57823: PUSH
57824: LD_INT 25
57826: ST_TO_ADDR
// vc_engine := engine_siberite ;
57827: LD_ADDR_OWVAR 39
57831: PUSH
57832: LD_INT 3
57834: ST_TO_ADDR
// vc_control := control_computer ;
57835: LD_ADDR_OWVAR 38
57839: PUSH
57840: LD_INT 3
57842: ST_TO_ADDR
// vc_weapon := 59 ;
57843: LD_ADDR_OWVAR 40
57847: PUSH
57848: LD_INT 59
57850: ST_TO_ADDR
// result := CreateVehicle ;
57851: LD_ADDR_VAR 0 5
57855: PUSH
57856: CALL_OW 45
57860: ST_TO_ADDR
// SetDir ( result , d ) ;
57861: LD_VAR 0 5
57865: PPUSH
57866: LD_VAR 0 4
57870: PPUSH
57871: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57875: LD_VAR 0 5
57879: PPUSH
57880: LD_VAR 0 2
57884: PPUSH
57885: LD_VAR 0 3
57889: PPUSH
57890: LD_INT 0
57892: PPUSH
57893: CALL_OW 48
// end ;
57897: LD_VAR 0 5
57901: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57902: LD_INT 0
57904: PPUSH
57905: PPUSH
57906: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57907: LD_ADDR_VAR 0 2
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 0
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57930: LD_VAR 0 1
57934: NOT
57935: PUSH
57936: LD_VAR 0 1
57940: PPUSH
57941: CALL_OW 264
57945: PUSH
57946: LD_INT 12
57948: PUSH
57949: LD_INT 51
57951: PUSH
57952: LD_INT 32
57954: PUSH
57955: LD_INT 89
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: IN
57964: NOT
57965: OR
57966: IFFALSE 57970
// exit ;
57968: GO 58068
// for i := 1 to 3 do
57970: LD_ADDR_VAR 0 3
57974: PUSH
57975: DOUBLE
57976: LD_INT 1
57978: DEC
57979: ST_TO_ADDR
57980: LD_INT 3
57982: PUSH
57983: FOR_TO
57984: IFFALSE 58066
// begin tmp := GetCargo ( cargo , i ) ;
57986: LD_ADDR_VAR 0 4
57990: PUSH
57991: LD_VAR 0 1
57995: PPUSH
57996: LD_VAR 0 3
58000: PPUSH
58001: CALL_OW 289
58005: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58006: LD_ADDR_VAR 0 2
58010: PUSH
58011: LD_VAR 0 2
58015: PPUSH
58016: LD_VAR 0 3
58020: PPUSH
58021: LD_VAR 0 4
58025: PPUSH
58026: CALL_OW 1
58030: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58031: LD_ADDR_VAR 0 2
58035: PUSH
58036: LD_VAR 0 2
58040: PPUSH
58041: LD_INT 4
58043: PPUSH
58044: LD_VAR 0 2
58048: PUSH
58049: LD_INT 4
58051: ARRAY
58052: PUSH
58053: LD_VAR 0 4
58057: PLUS
58058: PPUSH
58059: CALL_OW 1
58063: ST_TO_ADDR
// end ;
58064: GO 57983
58066: POP
58067: POP
// end ;
58068: LD_VAR 0 2
58072: RET
// export function Length ( array ) ; begin
58073: LD_INT 0
58075: PPUSH
// result := array + 0 ;
58076: LD_ADDR_VAR 0 2
58080: PUSH
58081: LD_VAR 0 1
58085: PUSH
58086: LD_INT 0
58088: PLUS
58089: ST_TO_ADDR
// end ;
58090: LD_VAR 0 2
58094: RET
// export function PrepareArray ( array ) ; begin
58095: LD_INT 0
58097: PPUSH
// result := array diff 0 ;
58098: LD_ADDR_VAR 0 2
58102: PUSH
58103: LD_VAR 0 1
58107: PUSH
58108: LD_INT 0
58110: DIFF
58111: ST_TO_ADDR
// if not result [ 1 ] then
58112: LD_VAR 0 2
58116: PUSH
58117: LD_INT 1
58119: ARRAY
58120: NOT
58121: IFFALSE 58141
// result := Delete ( result , 1 ) ;
58123: LD_ADDR_VAR 0 2
58127: PUSH
58128: LD_VAR 0 2
58132: PPUSH
58133: LD_INT 1
58135: PPUSH
58136: CALL_OW 3
58140: ST_TO_ADDR
// end ;
58141: LD_VAR 0 2
58145: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58146: LD_INT 0
58148: PPUSH
58149: PPUSH
58150: PPUSH
58151: PPUSH
// sibRocketRange := 25 ;
58152: LD_ADDR_VAR 0 6
58156: PUSH
58157: LD_INT 25
58159: ST_TO_ADDR
// result := false ;
58160: LD_ADDR_VAR 0 4
58164: PUSH
58165: LD_INT 0
58167: ST_TO_ADDR
// for i := 0 to 5 do
58168: LD_ADDR_VAR 0 5
58172: PUSH
58173: DOUBLE
58174: LD_INT 0
58176: DEC
58177: ST_TO_ADDR
58178: LD_INT 5
58180: PUSH
58181: FOR_TO
58182: IFFALSE 58249
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58184: LD_VAR 0 1
58188: PPUSH
58189: LD_VAR 0 5
58193: PPUSH
58194: LD_VAR 0 6
58198: PPUSH
58199: CALL_OW 272
58203: PPUSH
58204: LD_VAR 0 2
58208: PPUSH
58209: LD_VAR 0 5
58213: PPUSH
58214: LD_VAR 0 6
58218: PPUSH
58219: CALL_OW 273
58223: PPUSH
58224: LD_VAR 0 3
58228: PPUSH
58229: CALL_OW 309
58233: IFFALSE 58247
// begin result := true ;
58235: LD_ADDR_VAR 0 4
58239: PUSH
58240: LD_INT 1
58242: ST_TO_ADDR
// exit ;
58243: POP
58244: POP
58245: GO 58251
// end ;
58247: GO 58181
58249: POP
58250: POP
// end ;
58251: LD_VAR 0 4
58255: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58256: LD_INT 0
58258: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58259: LD_VAR 0 1
58263: PPUSH
58264: LD_VAR 0 2
58268: PPUSH
58269: LD_INT 0
58271: PPUSH
58272: LD_INT 0
58274: PPUSH
58275: LD_INT 1
58277: PPUSH
58278: LD_INT 0
58280: PPUSH
58281: CALL_OW 587
// end ;
58285: LD_VAR 0 3
58289: RET
// export function CenterOnNow ( unit ) ; begin
58290: LD_INT 0
58292: PPUSH
// result := IsInUnit ( unit ) ;
58293: LD_ADDR_VAR 0 2
58297: PUSH
58298: LD_VAR 0 1
58302: PPUSH
58303: CALL_OW 310
58307: ST_TO_ADDR
// if not result then
58308: LD_VAR 0 2
58312: NOT
58313: IFFALSE 58325
// result := unit ;
58315: LD_ADDR_VAR 0 2
58319: PUSH
58320: LD_VAR 0 1
58324: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58325: LD_VAR 0 1
58329: PPUSH
58330: CALL_OW 87
// end ;
58334: LD_VAR 0 2
58338: RET
// export function ComMoveHex ( unit , hex ) ; begin
58339: LD_INT 0
58341: PPUSH
// if not hex then
58342: LD_VAR 0 2
58346: NOT
58347: IFFALSE 58351
// exit ;
58349: GO 58404
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58351: LD_VAR 0 2
58355: PUSH
58356: LD_INT 1
58358: ARRAY
58359: PPUSH
58360: LD_VAR 0 2
58364: PUSH
58365: LD_INT 2
58367: ARRAY
58368: PPUSH
58369: CALL_OW 428
58373: IFFALSE 58377
// exit ;
58375: GO 58404
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58377: LD_VAR 0 1
58381: PPUSH
58382: LD_VAR 0 2
58386: PUSH
58387: LD_INT 1
58389: ARRAY
58390: PPUSH
58391: LD_VAR 0 2
58395: PUSH
58396: LD_INT 2
58398: ARRAY
58399: PPUSH
58400: CALL_OW 111
// end ;
58404: LD_VAR 0 3
58408: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58409: LD_INT 0
58411: PPUSH
58412: PPUSH
58413: PPUSH
// if not unit or not enemy then
58414: LD_VAR 0 1
58418: NOT
58419: PUSH
58420: LD_VAR 0 2
58424: NOT
58425: OR
58426: IFFALSE 58430
// exit ;
58428: GO 58554
// x := GetX ( enemy ) ;
58430: LD_ADDR_VAR 0 4
58434: PUSH
58435: LD_VAR 0 2
58439: PPUSH
58440: CALL_OW 250
58444: ST_TO_ADDR
// y := GetY ( enemy ) ;
58445: LD_ADDR_VAR 0 5
58449: PUSH
58450: LD_VAR 0 2
58454: PPUSH
58455: CALL_OW 251
58459: ST_TO_ADDR
// if ValidHex ( x , y ) then
58460: LD_VAR 0 4
58464: PPUSH
58465: LD_VAR 0 5
58469: PPUSH
58470: CALL_OW 488
58474: IFFALSE 58554
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58476: LD_VAR 0 2
58480: PPUSH
58481: CALL_OW 247
58485: PUSH
58486: LD_INT 3
58488: PUSH
58489: LD_INT 2
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: IN
58496: PUSH
58497: LD_VAR 0 1
58501: PPUSH
58502: CALL_OW 255
58506: PPUSH
58507: LD_VAR 0 2
58511: PPUSH
58512: CALL_OW 292
58516: AND
58517: IFFALSE 58535
// ComAttackUnit ( unit , enemy ) else
58519: LD_VAR 0 1
58523: PPUSH
58524: LD_VAR 0 2
58528: PPUSH
58529: CALL_OW 115
58533: GO 58554
// ComAgressiveMove ( unit , x , y ) ;
58535: LD_VAR 0 1
58539: PPUSH
58540: LD_VAR 0 4
58544: PPUSH
58545: LD_VAR 0 5
58549: PPUSH
58550: CALL_OW 114
// end ;
58554: LD_VAR 0 3
58558: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58559: LD_INT 0
58561: PPUSH
58562: PPUSH
58563: PPUSH
// list := AreaToList ( area , 0 ) ;
58564: LD_ADDR_VAR 0 5
58568: PUSH
58569: LD_VAR 0 1
58573: PPUSH
58574: LD_INT 0
58576: PPUSH
58577: CALL_OW 517
58581: ST_TO_ADDR
// if not list then
58582: LD_VAR 0 5
58586: NOT
58587: IFFALSE 58591
// exit ;
58589: GO 58721
// if all then
58591: LD_VAR 0 2
58595: IFFALSE 58683
// begin for i := 1 to list [ 1 ] do
58597: LD_ADDR_VAR 0 4
58601: PUSH
58602: DOUBLE
58603: LD_INT 1
58605: DEC
58606: ST_TO_ADDR
58607: LD_VAR 0 5
58611: PUSH
58612: LD_INT 1
58614: ARRAY
58615: PUSH
58616: FOR_TO
58617: IFFALSE 58679
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58619: LD_ADDR_VAR 0 3
58623: PUSH
58624: LD_VAR 0 3
58628: PPUSH
58629: LD_VAR 0 3
58633: PUSH
58634: LD_INT 1
58636: PLUS
58637: PPUSH
58638: LD_VAR 0 5
58642: PUSH
58643: LD_INT 1
58645: ARRAY
58646: PUSH
58647: LD_VAR 0 4
58651: ARRAY
58652: PUSH
58653: LD_VAR 0 5
58657: PUSH
58658: LD_INT 2
58660: ARRAY
58661: PUSH
58662: LD_VAR 0 4
58666: ARRAY
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PPUSH
58672: CALL_OW 1
58676: ST_TO_ADDR
58677: GO 58616
58679: POP
58680: POP
// exit ;
58681: GO 58721
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58683: LD_ADDR_VAR 0 3
58687: PUSH
58688: LD_VAR 0 5
58692: PUSH
58693: LD_INT 1
58695: ARRAY
58696: PUSH
58697: LD_INT 1
58699: ARRAY
58700: PUSH
58701: LD_VAR 0 5
58705: PUSH
58706: LD_INT 2
58708: ARRAY
58709: PUSH
58710: LD_INT 1
58712: ARRAY
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: EMPTY
58719: LIST
58720: ST_TO_ADDR
// end ;
58721: LD_VAR 0 3
58725: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58726: LD_INT 0
58728: PPUSH
58729: PPUSH
// list := AreaToList ( area , 0 ) ;
58730: LD_ADDR_VAR 0 4
58734: PUSH
58735: LD_VAR 0 1
58739: PPUSH
58740: LD_INT 0
58742: PPUSH
58743: CALL_OW 517
58747: ST_TO_ADDR
// if not list then
58748: LD_VAR 0 4
58752: NOT
58753: IFFALSE 58757
// exit ;
58755: GO 58798
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58757: LD_ADDR_VAR 0 3
58761: PUSH
58762: LD_VAR 0 4
58766: PUSH
58767: LD_INT 1
58769: ARRAY
58770: PUSH
58771: LD_INT 1
58773: ARRAY
58774: PUSH
58775: LD_VAR 0 4
58779: PUSH
58780: LD_INT 2
58782: ARRAY
58783: PUSH
58784: LD_INT 1
58786: ARRAY
58787: PUSH
58788: LD_VAR 0 2
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: ST_TO_ADDR
// end ;
58798: LD_VAR 0 3
58802: RET
// export function First ( array ) ; begin
58803: LD_INT 0
58805: PPUSH
// if not array then
58806: LD_VAR 0 1
58810: NOT
58811: IFFALSE 58815
// exit ;
58813: GO 58829
// result := array [ 1 ] ;
58815: LD_ADDR_VAR 0 2
58819: PUSH
58820: LD_VAR 0 1
58824: PUSH
58825: LD_INT 1
58827: ARRAY
58828: ST_TO_ADDR
// end ;
58829: LD_VAR 0 2
58833: RET
// export function Last ( array ) ; begin
58834: LD_INT 0
58836: PPUSH
// if not array then
58837: LD_VAR 0 1
58841: NOT
58842: IFFALSE 58846
// exit ;
58844: GO 58862
// result := array [ array ] ;
58846: LD_ADDR_VAR 0 2
58850: PUSH
58851: LD_VAR 0 1
58855: PUSH
58856: LD_VAR 0 1
58860: ARRAY
58861: ST_TO_ADDR
// end ;
58862: LD_VAR 0 2
58866: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58867: LD_INT 0
58869: PPUSH
58870: PPUSH
// result := [ ] ;
58871: LD_ADDR_VAR 0 5
58875: PUSH
58876: EMPTY
58877: ST_TO_ADDR
// if not array then
58878: LD_VAR 0 1
58882: NOT
58883: IFFALSE 58887
// exit ;
58885: GO 58999
// for i := 1 to array do
58887: LD_ADDR_VAR 0 6
58891: PUSH
58892: DOUBLE
58893: LD_INT 1
58895: DEC
58896: ST_TO_ADDR
58897: LD_VAR 0 1
58901: PUSH
58902: FOR_TO
58903: IFFALSE 58997
// if array [ i ] [ index ] = value then
58905: LD_VAR 0 1
58909: PUSH
58910: LD_VAR 0 6
58914: ARRAY
58915: PUSH
58916: LD_VAR 0 2
58920: ARRAY
58921: PUSH
58922: LD_VAR 0 3
58926: EQUAL
58927: IFFALSE 58995
// begin if indexColumn then
58929: LD_VAR 0 4
58933: IFFALSE 58969
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58935: LD_ADDR_VAR 0 5
58939: PUSH
58940: LD_VAR 0 5
58944: PPUSH
58945: LD_VAR 0 1
58949: PUSH
58950: LD_VAR 0 6
58954: ARRAY
58955: PUSH
58956: LD_VAR 0 4
58960: ARRAY
58961: PPUSH
58962: CALL 54337 0 2
58966: ST_TO_ADDR
58967: GO 58995
// result := Join ( result , array [ i ] ) ;
58969: LD_ADDR_VAR 0 5
58973: PUSH
58974: LD_VAR 0 5
58978: PPUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_VAR 0 6
58988: ARRAY
58989: PPUSH
58990: CALL 54337 0 2
58994: ST_TO_ADDR
// end ;
58995: GO 58902
58997: POP
58998: POP
// end ;
58999: LD_VAR 0 5
59003: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59004: LD_INT 0
59006: PPUSH
59007: PPUSH
59008: PPUSH
// if btype = b_depot then
59009: LD_VAR 0 2
59013: PUSH
59014: LD_INT 0
59016: EQUAL
59017: IFFALSE 59029
// begin result := true ;
59019: LD_ADDR_VAR 0 3
59023: PUSH
59024: LD_INT 1
59026: ST_TO_ADDR
// exit ;
59027: GO 59145
// end ; pom := GetBase ( depot ) ;
59029: LD_ADDR_VAR 0 4
59033: PUSH
59034: LD_VAR 0 1
59038: PPUSH
59039: CALL_OW 274
59043: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59044: LD_ADDR_VAR 0 5
59048: PUSH
59049: LD_VAR 0 2
59053: PPUSH
59054: LD_VAR 0 1
59058: PPUSH
59059: CALL_OW 248
59063: PPUSH
59064: CALL_OW 450
59068: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59069: LD_ADDR_VAR 0 3
59073: PUSH
59074: LD_VAR 0 4
59078: PPUSH
59079: LD_INT 1
59081: PPUSH
59082: CALL_OW 275
59086: PUSH
59087: LD_VAR 0 5
59091: PUSH
59092: LD_INT 1
59094: ARRAY
59095: GREATEREQUAL
59096: PUSH
59097: LD_VAR 0 4
59101: PPUSH
59102: LD_INT 2
59104: PPUSH
59105: CALL_OW 275
59109: PUSH
59110: LD_VAR 0 5
59114: PUSH
59115: LD_INT 2
59117: ARRAY
59118: GREATEREQUAL
59119: AND
59120: PUSH
59121: LD_VAR 0 4
59125: PPUSH
59126: LD_INT 3
59128: PPUSH
59129: CALL_OW 275
59133: PUSH
59134: LD_VAR 0 5
59138: PUSH
59139: LD_INT 3
59141: ARRAY
59142: GREATEREQUAL
59143: AND
59144: ST_TO_ADDR
// end ;
59145: LD_VAR 0 3
59149: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59150: LD_INT 0
59152: PPUSH
// if not vehicles or not parkingPoint then
59153: LD_VAR 0 1
59157: NOT
59158: PUSH
59159: LD_VAR 0 2
59163: NOT
59164: OR
59165: IFFALSE 59169
// exit ;
59167: GO 59267
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59169: LD_ADDR_VAR 0 1
59173: PUSH
59174: LD_VAR 0 1
59178: PPUSH
59179: LD_INT 50
59181: PUSH
59182: EMPTY
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 92
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: LD_INT 1
59198: ARRAY
59199: PUSH
59200: LD_VAR 0 2
59204: PUSH
59205: LD_INT 2
59207: ARRAY
59208: PUSH
59209: LD_INT 8
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PPUSH
59226: CALL_OW 72
59230: ST_TO_ADDR
// if not vehicles then
59231: LD_VAR 0 1
59235: NOT
59236: IFFALSE 59240
// exit ;
59238: GO 59267
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59240: LD_VAR 0 1
59244: PPUSH
59245: LD_VAR 0 2
59249: PUSH
59250: LD_INT 1
59252: ARRAY
59253: PPUSH
59254: LD_VAR 0 2
59258: PUSH
59259: LD_INT 2
59261: ARRAY
59262: PPUSH
59263: CALL_OW 111
// end ; end_of_file
59267: LD_VAR 0 3
59271: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
59272: LD_INT 0
59274: PPUSH
59275: PPUSH
59276: PPUSH
59277: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
59278: LD_VAR 0 1
59282: PPUSH
59283: CALL_OW 264
59287: PUSH
59288: LD_INT 91
59290: EQUAL
59291: IFFALSE 59363
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
59293: LD_INT 68
59295: PPUSH
59296: LD_VAR 0 1
59300: PPUSH
59301: CALL_OW 255
59305: PPUSH
59306: CALL_OW 321
59310: PUSH
59311: LD_INT 2
59313: EQUAL
59314: IFFALSE 59326
// eff := 70 else
59316: LD_ADDR_VAR 0 4
59320: PUSH
59321: LD_INT 70
59323: ST_TO_ADDR
59324: GO 59334
// eff := 30 ;
59326: LD_ADDR_VAR 0 4
59330: PUSH
59331: LD_INT 30
59333: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
59334: LD_VAR 0 1
59338: PPUSH
59339: CALL_OW 250
59343: PPUSH
59344: LD_VAR 0 1
59348: PPUSH
59349: CALL_OW 251
59353: PPUSH
59354: LD_VAR 0 4
59358: PPUSH
59359: CALL_OW 495
// end ; end ;
59363: LD_VAR 0 2
59367: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59368: LD_INT 0
59370: PPUSH
// end ;
59371: LD_VAR 0 4
59375: RET
// export function SOS_Command ( cmd ) ; begin
59376: LD_INT 0
59378: PPUSH
// end ;
59379: LD_VAR 0 2
59383: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59384: LD_INT 0
59386: PPUSH
// end ;
59387: LD_VAR 0 6
59391: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
59392: LD_INT 0
59394: PPUSH
59395: PPUSH
// if not vehicle or not factory then
59396: LD_VAR 0 1
59400: NOT
59401: PUSH
59402: LD_VAR 0 2
59406: NOT
59407: OR
59408: IFFALSE 59412
// exit ;
59410: GO 59643
// if factoryWaypoints >= factory then
59412: LD_EXP 121
59416: PUSH
59417: LD_VAR 0 2
59421: GREATEREQUAL
59422: IFFALSE 59643
// if factoryWaypoints [ factory ] then
59424: LD_EXP 121
59428: PUSH
59429: LD_VAR 0 2
59433: ARRAY
59434: IFFALSE 59643
// begin if GetControl ( vehicle ) = control_manual then
59436: LD_VAR 0 1
59440: PPUSH
59441: CALL_OW 263
59445: PUSH
59446: LD_INT 1
59448: EQUAL
59449: IFFALSE 59530
// begin driver := IsDrivenBy ( vehicle ) ;
59451: LD_ADDR_VAR 0 4
59455: PUSH
59456: LD_VAR 0 1
59460: PPUSH
59461: CALL_OW 311
59465: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59466: LD_VAR 0 4
59470: PPUSH
59471: LD_EXP 121
59475: PUSH
59476: LD_VAR 0 2
59480: ARRAY
59481: PUSH
59482: LD_INT 3
59484: ARRAY
59485: PPUSH
59486: LD_EXP 121
59490: PUSH
59491: LD_VAR 0 2
59495: ARRAY
59496: PUSH
59497: LD_INT 4
59499: ARRAY
59500: PPUSH
59501: CALL_OW 171
// AddComExitVehicle ( driver ) ;
59505: LD_VAR 0 4
59509: PPUSH
59510: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
59514: LD_VAR 0 4
59518: PPUSH
59519: LD_VAR 0 2
59523: PPUSH
59524: CALL_OW 180
// end else
59528: GO 59643
// if GetControl ( vehicle ) = control_remote then
59530: LD_VAR 0 1
59534: PPUSH
59535: CALL_OW 263
59539: PUSH
59540: LD_INT 2
59542: EQUAL
59543: IFFALSE 59604
// begin wait ( 0 0$2 ) ;
59545: LD_INT 70
59547: PPUSH
59548: CALL_OW 67
// if Connect ( vehicle ) then
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL 24954 0 1
59561: IFFALSE 59602
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59563: LD_VAR 0 1
59567: PPUSH
59568: LD_EXP 121
59572: PUSH
59573: LD_VAR 0 2
59577: ARRAY
59578: PUSH
59579: LD_INT 3
59581: ARRAY
59582: PPUSH
59583: LD_EXP 121
59587: PUSH
59588: LD_VAR 0 2
59592: ARRAY
59593: PUSH
59594: LD_INT 4
59596: ARRAY
59597: PPUSH
59598: CALL_OW 171
// end else
59602: GO 59643
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
59604: LD_VAR 0 1
59608: PPUSH
59609: LD_EXP 121
59613: PUSH
59614: LD_VAR 0 2
59618: ARRAY
59619: PUSH
59620: LD_INT 3
59622: ARRAY
59623: PPUSH
59624: LD_EXP 121
59628: PUSH
59629: LD_VAR 0 2
59633: ARRAY
59634: PUSH
59635: LD_INT 4
59637: ARRAY
59638: PPUSH
59639: CALL_OW 171
// end ; end ;
59643: LD_VAR 0 3
59647: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59648: LD_INT 0
59650: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59651: LD_VAR 0 1
59655: PUSH
59656: LD_INT 250
59658: EQUAL
59659: PUSH
59660: LD_VAR 0 2
59664: PPUSH
59665: CALL_OW 264
59669: PUSH
59670: LD_INT 81
59672: EQUAL
59673: AND
59674: IFFALSE 59695
// MinerPlaceMine ( unit , x , y ) ;
59676: LD_VAR 0 2
59680: PPUSH
59681: LD_VAR 0 4
59685: PPUSH
59686: LD_VAR 0 5
59690: PPUSH
59691: CALL 62685 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59695: LD_VAR 0 1
59699: PUSH
59700: LD_INT 251
59702: EQUAL
59703: PUSH
59704: LD_VAR 0 2
59708: PPUSH
59709: CALL_OW 264
59713: PUSH
59714: LD_INT 81
59716: EQUAL
59717: AND
59718: IFFALSE 59739
// MinerDetonateMine ( unit , x , y ) ;
59720: LD_VAR 0 2
59724: PPUSH
59725: LD_VAR 0 4
59729: PPUSH
59730: LD_VAR 0 5
59734: PPUSH
59735: CALL 62960 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59739: LD_VAR 0 1
59743: PUSH
59744: LD_INT 252
59746: EQUAL
59747: PUSH
59748: LD_VAR 0 2
59752: PPUSH
59753: CALL_OW 264
59757: PUSH
59758: LD_INT 81
59760: EQUAL
59761: AND
59762: IFFALSE 59783
// MinerCreateMinefield ( unit , x , y ) ;
59764: LD_VAR 0 2
59768: PPUSH
59769: LD_VAR 0 4
59773: PPUSH
59774: LD_VAR 0 5
59778: PPUSH
59779: CALL 63377 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59783: LD_VAR 0 1
59787: PUSH
59788: LD_INT 253
59790: EQUAL
59791: PUSH
59792: LD_VAR 0 2
59796: PPUSH
59797: CALL_OW 257
59801: PUSH
59802: LD_INT 5
59804: EQUAL
59805: AND
59806: IFFALSE 59827
// ComBinocular ( unit , x , y ) ;
59808: LD_VAR 0 2
59812: PPUSH
59813: LD_VAR 0 4
59817: PPUSH
59818: LD_VAR 0 5
59822: PPUSH
59823: CALL 63746 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59827: LD_VAR 0 1
59831: PUSH
59832: LD_INT 254
59834: EQUAL
59835: PUSH
59836: LD_VAR 0 2
59840: PPUSH
59841: CALL_OW 264
59845: PUSH
59846: LD_INT 99
59848: EQUAL
59849: AND
59850: PUSH
59851: LD_VAR 0 3
59855: PPUSH
59856: CALL_OW 263
59860: PUSH
59861: LD_INT 3
59863: EQUAL
59864: AND
59865: IFFALSE 59881
// HackDestroyVehicle ( unit , selectedUnit ) ;
59867: LD_VAR 0 2
59871: PPUSH
59872: LD_VAR 0 3
59876: PPUSH
59877: CALL 62049 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
59881: LD_VAR 0 1
59885: PUSH
59886: LD_INT 255
59888: EQUAL
59889: PUSH
59890: LD_VAR 0 2
59894: PPUSH
59895: CALL_OW 264
59899: PUSH
59900: LD_INT 14
59902: PUSH
59903: LD_INT 53
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: IN
59910: AND
59911: PUSH
59912: LD_VAR 0 4
59916: PPUSH
59917: LD_VAR 0 5
59921: PPUSH
59922: CALL_OW 488
59926: AND
59927: IFFALSE 59951
// CutTreeXYR ( unit , x , y , 12 ) ;
59929: LD_VAR 0 2
59933: PPUSH
59934: LD_VAR 0 4
59938: PPUSH
59939: LD_VAR 0 5
59943: PPUSH
59944: LD_INT 12
59946: PPUSH
59947: CALL 60046 0 4
// if cmd = 256 then
59951: LD_VAR 0 1
59955: PUSH
59956: LD_INT 256
59958: EQUAL
59959: IFFALSE 59980
// SetFactoryWaypoint ( unit , x , y ) ;
59961: LD_VAR 0 2
59965: PPUSH
59966: LD_VAR 0 4
59970: PPUSH
59971: LD_VAR 0 5
59975: PPUSH
59976: CALL 78820 0 3
// if cmd = 257 then
59980: LD_VAR 0 1
59984: PUSH
59985: LD_INT 257
59987: EQUAL
59988: IFFALSE 60009
// SetWarehouseGatheringPoint ( unit , x , y ) ;
59990: LD_VAR 0 2
59994: PPUSH
59995: LD_VAR 0 4
59999: PPUSH
60000: LD_VAR 0 5
60004: PPUSH
60005: CALL 79182 0 3
// if cmd = 258 then
60009: LD_VAR 0 1
60013: PUSH
60014: LD_INT 258
60016: EQUAL
60017: IFFALSE 60041
// BurnTreeXYR ( unit , x , y , 8 ) ;
60019: LD_VAR 0 2
60023: PPUSH
60024: LD_VAR 0 4
60028: PPUSH
60029: LD_VAR 0 5
60033: PPUSH
60034: LD_INT 8
60036: PPUSH
60037: CALL 60440 0 4
// end ;
60041: LD_VAR 0 6
60045: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60046: LD_INT 0
60048: PPUSH
60049: PPUSH
60050: PPUSH
60051: PPUSH
60052: PPUSH
60053: PPUSH
60054: PPUSH
60055: PPUSH
60056: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60057: LD_VAR 0 1
60061: PPUSH
60062: CALL_OW 302
60066: NOT
60067: PUSH
60068: LD_VAR 0 2
60072: PPUSH
60073: LD_VAR 0 3
60077: PPUSH
60078: CALL_OW 488
60082: NOT
60083: OR
60084: PUSH
60085: LD_VAR 0 4
60089: NOT
60090: OR
60091: IFFALSE 60095
// exit ;
60093: GO 60435
// list := [ ] ;
60095: LD_ADDR_VAR 0 13
60099: PUSH
60100: EMPTY
60101: ST_TO_ADDR
// if x - r < 0 then
60102: LD_VAR 0 2
60106: PUSH
60107: LD_VAR 0 4
60111: MINUS
60112: PUSH
60113: LD_INT 0
60115: LESS
60116: IFFALSE 60128
// min_x := 0 else
60118: LD_ADDR_VAR 0 7
60122: PUSH
60123: LD_INT 0
60125: ST_TO_ADDR
60126: GO 60144
// min_x := x - r ;
60128: LD_ADDR_VAR 0 7
60132: PUSH
60133: LD_VAR 0 2
60137: PUSH
60138: LD_VAR 0 4
60142: MINUS
60143: ST_TO_ADDR
// if y - r < 0 then
60144: LD_VAR 0 3
60148: PUSH
60149: LD_VAR 0 4
60153: MINUS
60154: PUSH
60155: LD_INT 0
60157: LESS
60158: IFFALSE 60170
// min_y := 0 else
60160: LD_ADDR_VAR 0 8
60164: PUSH
60165: LD_INT 0
60167: ST_TO_ADDR
60168: GO 60186
// min_y := y - r ;
60170: LD_ADDR_VAR 0 8
60174: PUSH
60175: LD_VAR 0 3
60179: PUSH
60180: LD_VAR 0 4
60184: MINUS
60185: ST_TO_ADDR
// max_x := x + r ;
60186: LD_ADDR_VAR 0 9
60190: PUSH
60191: LD_VAR 0 2
60195: PUSH
60196: LD_VAR 0 4
60200: PLUS
60201: ST_TO_ADDR
// max_y := y + r ;
60202: LD_ADDR_VAR 0 10
60206: PUSH
60207: LD_VAR 0 3
60211: PUSH
60212: LD_VAR 0 4
60216: PLUS
60217: ST_TO_ADDR
// for _x = min_x to max_x do
60218: LD_ADDR_VAR 0 11
60222: PUSH
60223: DOUBLE
60224: LD_VAR 0 7
60228: DEC
60229: ST_TO_ADDR
60230: LD_VAR 0 9
60234: PUSH
60235: FOR_TO
60236: IFFALSE 60353
// for _y = min_y to max_y do
60238: LD_ADDR_VAR 0 12
60242: PUSH
60243: DOUBLE
60244: LD_VAR 0 8
60248: DEC
60249: ST_TO_ADDR
60250: LD_VAR 0 10
60254: PUSH
60255: FOR_TO
60256: IFFALSE 60349
// begin if not ValidHex ( _x , _y ) then
60258: LD_VAR 0 11
60262: PPUSH
60263: LD_VAR 0 12
60267: PPUSH
60268: CALL_OW 488
60272: NOT
60273: IFFALSE 60277
// continue ;
60275: GO 60255
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60277: LD_VAR 0 11
60281: PPUSH
60282: LD_VAR 0 12
60286: PPUSH
60287: CALL_OW 351
60291: PUSH
60292: LD_VAR 0 11
60296: PPUSH
60297: LD_VAR 0 12
60301: PPUSH
60302: CALL_OW 554
60306: AND
60307: IFFALSE 60347
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60309: LD_ADDR_VAR 0 13
60313: PUSH
60314: LD_VAR 0 13
60318: PPUSH
60319: LD_VAR 0 13
60323: PUSH
60324: LD_INT 1
60326: PLUS
60327: PPUSH
60328: LD_VAR 0 11
60332: PUSH
60333: LD_VAR 0 12
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PPUSH
60342: CALL_OW 2
60346: ST_TO_ADDR
// end ;
60347: GO 60255
60349: POP
60350: POP
60351: GO 60235
60353: POP
60354: POP
// if not list then
60355: LD_VAR 0 13
60359: NOT
60360: IFFALSE 60364
// exit ;
60362: GO 60435
// for i in list do
60364: LD_ADDR_VAR 0 6
60368: PUSH
60369: LD_VAR 0 13
60373: PUSH
60374: FOR_IN
60375: IFFALSE 60433
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60377: LD_VAR 0 1
60381: PPUSH
60382: LD_STRING M
60384: PUSH
60385: LD_VAR 0 6
60389: PUSH
60390: LD_INT 1
60392: ARRAY
60393: PUSH
60394: LD_VAR 0 6
60398: PUSH
60399: LD_INT 2
60401: ARRAY
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: PUSH
60424: EMPTY
60425: LIST
60426: PPUSH
60427: CALL_OW 447
60431: GO 60374
60433: POP
60434: POP
// end ;
60435: LD_VAR 0 5
60439: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60440: LD_INT 0
60442: PPUSH
60443: PPUSH
60444: PPUSH
60445: PPUSH
60446: PPUSH
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 302
60461: NOT
60462: PUSH
60463: LD_VAR 0 2
60467: PPUSH
60468: LD_VAR 0 3
60472: PPUSH
60473: CALL_OW 488
60477: NOT
60478: OR
60479: PUSH
60480: LD_VAR 0 4
60484: NOT
60485: OR
60486: IFFALSE 60490
// exit ;
60488: GO 61003
// list := [ ] ;
60490: LD_ADDR_VAR 0 13
60494: PUSH
60495: EMPTY
60496: ST_TO_ADDR
// if x - r < 0 then
60497: LD_VAR 0 2
60501: PUSH
60502: LD_VAR 0 4
60506: MINUS
60507: PUSH
60508: LD_INT 0
60510: LESS
60511: IFFALSE 60523
// min_x := 0 else
60513: LD_ADDR_VAR 0 7
60517: PUSH
60518: LD_INT 0
60520: ST_TO_ADDR
60521: GO 60539
// min_x := x - r ;
60523: LD_ADDR_VAR 0 7
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_VAR 0 4
60537: MINUS
60538: ST_TO_ADDR
// if y - r < 0 then
60539: LD_VAR 0 3
60543: PUSH
60544: LD_VAR 0 4
60548: MINUS
60549: PUSH
60550: LD_INT 0
60552: LESS
60553: IFFALSE 60565
// min_y := 0 else
60555: LD_ADDR_VAR 0 8
60559: PUSH
60560: LD_INT 0
60562: ST_TO_ADDR
60563: GO 60581
// min_y := y - r ;
60565: LD_ADDR_VAR 0 8
60569: PUSH
60570: LD_VAR 0 3
60574: PUSH
60575: LD_VAR 0 4
60579: MINUS
60580: ST_TO_ADDR
// max_x := x + r ;
60581: LD_ADDR_VAR 0 9
60585: PUSH
60586: LD_VAR 0 2
60590: PUSH
60591: LD_VAR 0 4
60595: PLUS
60596: ST_TO_ADDR
// max_y := y + r ;
60597: LD_ADDR_VAR 0 10
60601: PUSH
60602: LD_VAR 0 3
60606: PUSH
60607: LD_VAR 0 4
60611: PLUS
60612: ST_TO_ADDR
// for _x = min_x to max_x do
60613: LD_ADDR_VAR 0 11
60617: PUSH
60618: DOUBLE
60619: LD_VAR 0 7
60623: DEC
60624: ST_TO_ADDR
60625: LD_VAR 0 9
60629: PUSH
60630: FOR_TO
60631: IFFALSE 60748
// for _y = min_y to max_y do
60633: LD_ADDR_VAR 0 12
60637: PUSH
60638: DOUBLE
60639: LD_VAR 0 8
60643: DEC
60644: ST_TO_ADDR
60645: LD_VAR 0 10
60649: PUSH
60650: FOR_TO
60651: IFFALSE 60744
// begin if not ValidHex ( _x , _y ) then
60653: LD_VAR 0 11
60657: PPUSH
60658: LD_VAR 0 12
60662: PPUSH
60663: CALL_OW 488
60667: NOT
60668: IFFALSE 60672
// continue ;
60670: GO 60650
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60672: LD_VAR 0 11
60676: PPUSH
60677: LD_VAR 0 12
60681: PPUSH
60682: CALL_OW 351
60686: PUSH
60687: LD_VAR 0 11
60691: PPUSH
60692: LD_VAR 0 12
60696: PPUSH
60697: CALL_OW 554
60701: AND
60702: IFFALSE 60742
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60704: LD_ADDR_VAR 0 13
60708: PUSH
60709: LD_VAR 0 13
60713: PPUSH
60714: LD_VAR 0 13
60718: PUSH
60719: LD_INT 1
60721: PLUS
60722: PPUSH
60723: LD_VAR 0 11
60727: PUSH
60728: LD_VAR 0 12
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PPUSH
60737: CALL_OW 2
60741: ST_TO_ADDR
// end ;
60742: GO 60650
60744: POP
60745: POP
60746: GO 60630
60748: POP
60749: POP
// if not list then
60750: LD_VAR 0 13
60754: NOT
60755: IFFALSE 60759
// exit ;
60757: GO 61003
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
60759: LD_ADDR_VAR 0 13
60763: PUSH
60764: LD_VAR 0 1
60768: PPUSH
60769: LD_VAR 0 13
60773: PPUSH
60774: LD_INT 1
60776: PPUSH
60777: LD_INT 1
60779: PPUSH
60780: CALL 22096 0 4
60784: ST_TO_ADDR
// ComStop ( flame ) ;
60785: LD_VAR 0 1
60789: PPUSH
60790: CALL_OW 141
// for i in list do
60794: LD_ADDR_VAR 0 6
60798: PUSH
60799: LD_VAR 0 13
60803: PUSH
60804: FOR_IN
60805: IFFALSE 60836
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
60807: LD_VAR 0 1
60811: PPUSH
60812: LD_VAR 0 6
60816: PUSH
60817: LD_INT 1
60819: ARRAY
60820: PPUSH
60821: LD_VAR 0 6
60825: PUSH
60826: LD_INT 2
60828: ARRAY
60829: PPUSH
60830: CALL_OW 176
60834: GO 60804
60836: POP
60837: POP
// repeat wait ( 0 0$1 ) ;
60838: LD_INT 35
60840: PPUSH
60841: CALL_OW 67
// task := GetTaskList ( flame ) ;
60845: LD_ADDR_VAR 0 14
60849: PUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 437
60859: ST_TO_ADDR
// if not task then
60860: LD_VAR 0 14
60864: NOT
60865: IFFALSE 60869
// exit ;
60867: GO 61003
// if task [ 1 ] [ 1 ] <> | then
60869: LD_VAR 0 14
60873: PUSH
60874: LD_INT 1
60876: ARRAY
60877: PUSH
60878: LD_INT 1
60880: ARRAY
60881: PUSH
60882: LD_STRING |
60884: NONEQUAL
60885: IFFALSE 60889
// exit ;
60887: GO 61003
// _x := task [ 1 ] [ 2 ] ;
60889: LD_ADDR_VAR 0 11
60893: PUSH
60894: LD_VAR 0 14
60898: PUSH
60899: LD_INT 1
60901: ARRAY
60902: PUSH
60903: LD_INT 2
60905: ARRAY
60906: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
60907: LD_ADDR_VAR 0 12
60911: PUSH
60912: LD_VAR 0 14
60916: PUSH
60917: LD_INT 1
60919: ARRAY
60920: PUSH
60921: LD_INT 3
60923: ARRAY
60924: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
60925: LD_VAR 0 11
60929: PPUSH
60930: LD_VAR 0 12
60934: PPUSH
60935: CALL_OW 351
60939: NOT
60940: PUSH
60941: LD_VAR 0 11
60945: PPUSH
60946: LD_VAR 0 12
60950: PPUSH
60951: CALL_OW 554
60955: NOT
60956: OR
60957: IFFALSE 60991
// begin task := Delete ( task , 1 ) ;
60959: LD_ADDR_VAR 0 14
60963: PUSH
60964: LD_VAR 0 14
60968: PPUSH
60969: LD_INT 1
60971: PPUSH
60972: CALL_OW 3
60976: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
60977: LD_VAR 0 1
60981: PPUSH
60982: LD_VAR 0 14
60986: PPUSH
60987: CALL_OW 446
// end ; until not HasTask ( flame ) ;
60991: LD_VAR 0 1
60995: PPUSH
60996: CALL_OW 314
61000: NOT
61001: IFFALSE 60838
// end ;
61003: LD_VAR 0 5
61007: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61008: LD_EXP 52
61012: NOT
61013: IFFALSE 61063
61015: GO 61017
61017: DISABLE
// begin initHack := true ;
61018: LD_ADDR_EXP 52
61022: PUSH
61023: LD_INT 1
61025: ST_TO_ADDR
// hackTanks := [ ] ;
61026: LD_ADDR_EXP 53
61030: PUSH
61031: EMPTY
61032: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61033: LD_ADDR_EXP 54
61037: PUSH
61038: EMPTY
61039: ST_TO_ADDR
// hackLimit := 3 ;
61040: LD_ADDR_EXP 55
61044: PUSH
61045: LD_INT 3
61047: ST_TO_ADDR
// hackDist := 12 ;
61048: LD_ADDR_EXP 56
61052: PUSH
61053: LD_INT 12
61055: ST_TO_ADDR
// hackCounter := [ ] ;
61056: LD_ADDR_EXP 57
61060: PUSH
61061: EMPTY
61062: ST_TO_ADDR
// end ;
61063: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61064: LD_EXP 52
61068: PUSH
61069: LD_INT 34
61071: PUSH
61072: LD_INT 99
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PPUSH
61079: CALL_OW 69
61083: AND
61084: IFFALSE 61337
61086: GO 61088
61088: DISABLE
61089: LD_INT 0
61091: PPUSH
61092: PPUSH
// begin enable ;
61093: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61094: LD_ADDR_VAR 0 1
61098: PUSH
61099: LD_INT 34
61101: PUSH
61102: LD_INT 99
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PPUSH
61109: CALL_OW 69
61113: PUSH
61114: FOR_IN
61115: IFFALSE 61335
// begin if not i in hackTanks then
61117: LD_VAR 0 1
61121: PUSH
61122: LD_EXP 53
61126: IN
61127: NOT
61128: IFFALSE 61211
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61130: LD_ADDR_EXP 53
61134: PUSH
61135: LD_EXP 53
61139: PPUSH
61140: LD_EXP 53
61144: PUSH
61145: LD_INT 1
61147: PLUS
61148: PPUSH
61149: LD_VAR 0 1
61153: PPUSH
61154: CALL_OW 1
61158: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61159: LD_ADDR_EXP 54
61163: PUSH
61164: LD_EXP 54
61168: PPUSH
61169: LD_EXP 54
61173: PUSH
61174: LD_INT 1
61176: PLUS
61177: PPUSH
61178: EMPTY
61179: PPUSH
61180: CALL_OW 1
61184: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61185: LD_ADDR_EXP 57
61189: PUSH
61190: LD_EXP 57
61194: PPUSH
61195: LD_EXP 57
61199: PUSH
61200: LD_INT 1
61202: PLUS
61203: PPUSH
61204: EMPTY
61205: PPUSH
61206: CALL_OW 1
61210: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61211: LD_VAR 0 1
61215: PPUSH
61216: CALL_OW 302
61220: NOT
61221: IFFALSE 61234
// begin HackUnlinkAll ( i ) ;
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL 61340 0 1
// continue ;
61232: GO 61114
// end ; HackCheckCapturedStatus ( i ) ;
61234: LD_VAR 0 1
61238: PPUSH
61239: CALL 61783 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61243: LD_ADDR_VAR 0 2
61247: PUSH
61248: LD_INT 81
61250: PUSH
61251: LD_VAR 0 1
61255: PPUSH
61256: CALL_OW 255
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 33
61267: PUSH
61268: LD_INT 3
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 91
61277: PUSH
61278: LD_VAR 0 1
61282: PUSH
61283: LD_EXP 56
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 50
61295: PUSH
61296: EMPTY
61297: LIST
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: PPUSH
61305: CALL_OW 69
61309: ST_TO_ADDR
// if not tmp then
61310: LD_VAR 0 2
61314: NOT
61315: IFFALSE 61319
// continue ;
61317: GO 61114
// HackLink ( i , tmp ) ;
61319: LD_VAR 0 1
61323: PPUSH
61324: LD_VAR 0 2
61328: PPUSH
61329: CALL 61476 0 2
// end ;
61333: GO 61114
61335: POP
61336: POP
// end ;
61337: PPOPN 2
61339: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
61344: PPUSH
// if not hack in hackTanks then
61345: LD_VAR 0 1
61349: PUSH
61350: LD_EXP 53
61354: IN
61355: NOT
61356: IFFALSE 61360
// exit ;
61358: GO 61471
// index := GetElementIndex ( hackTanks , hack ) ;
61360: LD_ADDR_VAR 0 4
61364: PUSH
61365: LD_EXP 53
61369: PPUSH
61370: LD_VAR 0 1
61374: PPUSH
61375: CALL 21393 0 2
61379: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61380: LD_EXP 54
61384: PUSH
61385: LD_VAR 0 4
61389: ARRAY
61390: IFFALSE 61471
// begin for i in hackTanksCaptured [ index ] do
61392: LD_ADDR_VAR 0 3
61396: PUSH
61397: LD_EXP 54
61401: PUSH
61402: LD_VAR 0 4
61406: ARRAY
61407: PUSH
61408: FOR_IN
61409: IFFALSE 61435
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61411: LD_VAR 0 3
61415: PUSH
61416: LD_INT 1
61418: ARRAY
61419: PPUSH
61420: LD_VAR 0 3
61424: PUSH
61425: LD_INT 2
61427: ARRAY
61428: PPUSH
61429: CALL_OW 235
61433: GO 61408
61435: POP
61436: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61437: LD_ADDR_EXP 54
61441: PUSH
61442: LD_EXP 54
61446: PPUSH
61447: LD_VAR 0 4
61451: PPUSH
61452: EMPTY
61453: PPUSH
61454: CALL_OW 1
61458: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61459: LD_VAR 0 1
61463: PPUSH
61464: LD_INT 0
61466: PPUSH
61467: CALL_OW 505
// end ; end ;
61471: LD_VAR 0 2
61475: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61476: LD_INT 0
61478: PPUSH
61479: PPUSH
61480: PPUSH
// if not hack in hackTanks or not vehicles then
61481: LD_VAR 0 1
61485: PUSH
61486: LD_EXP 53
61490: IN
61491: NOT
61492: PUSH
61493: LD_VAR 0 2
61497: NOT
61498: OR
61499: IFFALSE 61503
// exit ;
61501: GO 61778
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61503: LD_ADDR_VAR 0 2
61507: PUSH
61508: LD_VAR 0 1
61512: PPUSH
61513: LD_VAR 0 2
61517: PPUSH
61518: LD_INT 1
61520: PPUSH
61521: LD_INT 1
61523: PPUSH
61524: CALL 22043 0 4
61528: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61529: LD_ADDR_VAR 0 5
61533: PUSH
61534: LD_EXP 53
61538: PPUSH
61539: LD_VAR 0 1
61543: PPUSH
61544: CALL 21393 0 2
61548: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61549: LD_EXP 54
61553: PUSH
61554: LD_VAR 0 5
61558: ARRAY
61559: PUSH
61560: LD_EXP 55
61564: LESS
61565: IFFALSE 61754
// begin for i := 1 to vehicles do
61567: LD_ADDR_VAR 0 4
61571: PUSH
61572: DOUBLE
61573: LD_INT 1
61575: DEC
61576: ST_TO_ADDR
61577: LD_VAR 0 2
61581: PUSH
61582: FOR_TO
61583: IFFALSE 61752
// begin if hackTanksCaptured [ index ] = hackLimit then
61585: LD_EXP 54
61589: PUSH
61590: LD_VAR 0 5
61594: ARRAY
61595: PUSH
61596: LD_EXP 55
61600: EQUAL
61601: IFFALSE 61605
// break ;
61603: GO 61752
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61605: LD_ADDR_EXP 57
61609: PUSH
61610: LD_EXP 57
61614: PPUSH
61615: LD_VAR 0 5
61619: PPUSH
61620: LD_EXP 57
61624: PUSH
61625: LD_VAR 0 5
61629: ARRAY
61630: PUSH
61631: LD_INT 1
61633: PLUS
61634: PPUSH
61635: CALL_OW 1
61639: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61640: LD_ADDR_EXP 54
61644: PUSH
61645: LD_EXP 54
61649: PPUSH
61650: LD_VAR 0 5
61654: PUSH
61655: LD_EXP 54
61659: PUSH
61660: LD_VAR 0 5
61664: ARRAY
61665: PUSH
61666: LD_INT 1
61668: PLUS
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PPUSH
61674: LD_VAR 0 2
61678: PUSH
61679: LD_VAR 0 4
61683: ARRAY
61684: PUSH
61685: LD_VAR 0 2
61689: PUSH
61690: LD_VAR 0 4
61694: ARRAY
61695: PPUSH
61696: CALL_OW 255
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PPUSH
61705: CALL 21608 0 3
61709: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61710: LD_VAR 0 2
61714: PUSH
61715: LD_VAR 0 4
61719: ARRAY
61720: PPUSH
61721: LD_VAR 0 1
61725: PPUSH
61726: CALL_OW 255
61730: PPUSH
61731: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
61735: LD_VAR 0 2
61739: PUSH
61740: LD_VAR 0 4
61744: ARRAY
61745: PPUSH
61746: CALL_OW 141
// end ;
61750: GO 61582
61752: POP
61753: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
61754: LD_VAR 0 1
61758: PPUSH
61759: LD_EXP 54
61763: PUSH
61764: LD_VAR 0 5
61768: ARRAY
61769: PUSH
61770: LD_INT 0
61772: PLUS
61773: PPUSH
61774: CALL_OW 505
// end ;
61778: LD_VAR 0 3
61782: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
61783: LD_INT 0
61785: PPUSH
61786: PPUSH
61787: PPUSH
61788: PPUSH
// if not hack in hackTanks then
61789: LD_VAR 0 1
61793: PUSH
61794: LD_EXP 53
61798: IN
61799: NOT
61800: IFFALSE 61804
// exit ;
61802: GO 62044
// index := GetElementIndex ( hackTanks , hack ) ;
61804: LD_ADDR_VAR 0 4
61808: PUSH
61809: LD_EXP 53
61813: PPUSH
61814: LD_VAR 0 1
61818: PPUSH
61819: CALL 21393 0 2
61823: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
61824: LD_ADDR_VAR 0 3
61828: PUSH
61829: DOUBLE
61830: LD_EXP 54
61834: PUSH
61835: LD_VAR 0 4
61839: ARRAY
61840: INC
61841: ST_TO_ADDR
61842: LD_INT 1
61844: PUSH
61845: FOR_DOWNTO
61846: IFFALSE 62018
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
61848: LD_ADDR_VAR 0 5
61852: PUSH
61853: LD_EXP 54
61857: PUSH
61858: LD_VAR 0 4
61862: ARRAY
61863: PUSH
61864: LD_VAR 0 3
61868: ARRAY
61869: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
61870: LD_VAR 0 5
61874: PUSH
61875: LD_INT 1
61877: ARRAY
61878: PPUSH
61879: CALL_OW 302
61883: NOT
61884: PUSH
61885: LD_VAR 0 5
61889: PUSH
61890: LD_INT 1
61892: ARRAY
61893: PPUSH
61894: CALL_OW 255
61898: PUSH
61899: LD_VAR 0 1
61903: PPUSH
61904: CALL_OW 255
61908: NONEQUAL
61909: OR
61910: IFFALSE 62016
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
61912: LD_VAR 0 5
61916: PUSH
61917: LD_INT 1
61919: ARRAY
61920: PPUSH
61921: CALL_OW 305
61925: PUSH
61926: LD_VAR 0 5
61930: PUSH
61931: LD_INT 1
61933: ARRAY
61934: PPUSH
61935: CALL_OW 255
61939: PUSH
61940: LD_VAR 0 1
61944: PPUSH
61945: CALL_OW 255
61949: EQUAL
61950: AND
61951: IFFALSE 61975
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
61953: LD_VAR 0 5
61957: PUSH
61958: LD_INT 1
61960: ARRAY
61961: PPUSH
61962: LD_VAR 0 5
61966: PUSH
61967: LD_INT 2
61969: ARRAY
61970: PPUSH
61971: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
61975: LD_ADDR_EXP 54
61979: PUSH
61980: LD_EXP 54
61984: PPUSH
61985: LD_VAR 0 4
61989: PPUSH
61990: LD_EXP 54
61994: PUSH
61995: LD_VAR 0 4
61999: ARRAY
62000: PPUSH
62001: LD_VAR 0 3
62005: PPUSH
62006: CALL_OW 3
62010: PPUSH
62011: CALL_OW 1
62015: ST_TO_ADDR
// end ; end ;
62016: GO 61845
62018: POP
62019: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62020: LD_VAR 0 1
62024: PPUSH
62025: LD_EXP 54
62029: PUSH
62030: LD_VAR 0 4
62034: ARRAY
62035: PUSH
62036: LD_INT 0
62038: PLUS
62039: PPUSH
62040: CALL_OW 505
// end ;
62044: LD_VAR 0 2
62048: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62049: LD_INT 0
62051: PPUSH
62052: PPUSH
62053: PPUSH
62054: PPUSH
// if not hack in hackTanks then
62055: LD_VAR 0 1
62059: PUSH
62060: LD_EXP 53
62064: IN
62065: NOT
62066: IFFALSE 62070
// exit ;
62068: GO 62155
// index := GetElementIndex ( hackTanks , hack ) ;
62070: LD_ADDR_VAR 0 5
62074: PUSH
62075: LD_EXP 53
62079: PPUSH
62080: LD_VAR 0 1
62084: PPUSH
62085: CALL 21393 0 2
62089: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62090: LD_ADDR_VAR 0 4
62094: PUSH
62095: DOUBLE
62096: LD_INT 1
62098: DEC
62099: ST_TO_ADDR
62100: LD_EXP 54
62104: PUSH
62105: LD_VAR 0 5
62109: ARRAY
62110: PUSH
62111: FOR_TO
62112: IFFALSE 62153
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62114: LD_EXP 54
62118: PUSH
62119: LD_VAR 0 5
62123: ARRAY
62124: PUSH
62125: LD_VAR 0 4
62129: ARRAY
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PUSH
62135: LD_VAR 0 2
62139: EQUAL
62140: IFFALSE 62151
// KillUnit ( vehicle ) ;
62142: LD_VAR 0 2
62146: PPUSH
62147: CALL_OW 66
62151: GO 62111
62153: POP
62154: POP
// end ;
62155: LD_VAR 0 3
62159: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62160: LD_EXP 58
62164: NOT
62165: IFFALSE 62200
62167: GO 62169
62169: DISABLE
// begin initMiner := true ;
62170: LD_ADDR_EXP 58
62174: PUSH
62175: LD_INT 1
62177: ST_TO_ADDR
// minersList := [ ] ;
62178: LD_ADDR_EXP 59
62182: PUSH
62183: EMPTY
62184: ST_TO_ADDR
// minerMinesList := [ ] ;
62185: LD_ADDR_EXP 60
62189: PUSH
62190: EMPTY
62191: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62192: LD_ADDR_EXP 61
62196: PUSH
62197: LD_INT 5
62199: ST_TO_ADDR
// end ;
62200: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62201: LD_EXP 58
62205: PUSH
62206: LD_INT 34
62208: PUSH
62209: LD_INT 81
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PPUSH
62216: CALL_OW 69
62220: AND
62221: IFFALSE 62682
62223: GO 62225
62225: DISABLE
62226: LD_INT 0
62228: PPUSH
62229: PPUSH
62230: PPUSH
62231: PPUSH
// begin enable ;
62232: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62233: LD_ADDR_VAR 0 1
62237: PUSH
62238: LD_INT 34
62240: PUSH
62241: LD_INT 81
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PPUSH
62248: CALL_OW 69
62252: PUSH
62253: FOR_IN
62254: IFFALSE 62326
// begin if not i in minersList then
62256: LD_VAR 0 1
62260: PUSH
62261: LD_EXP 59
62265: IN
62266: NOT
62267: IFFALSE 62324
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62269: LD_ADDR_EXP 59
62273: PUSH
62274: LD_EXP 59
62278: PPUSH
62279: LD_EXP 59
62283: PUSH
62284: LD_INT 1
62286: PLUS
62287: PPUSH
62288: LD_VAR 0 1
62292: PPUSH
62293: CALL_OW 1
62297: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62298: LD_ADDR_EXP 60
62302: PUSH
62303: LD_EXP 60
62307: PPUSH
62308: LD_EXP 60
62312: PUSH
62313: LD_INT 1
62315: PLUS
62316: PPUSH
62317: EMPTY
62318: PPUSH
62319: CALL_OW 1
62323: ST_TO_ADDR
// end end ;
62324: GO 62253
62326: POP
62327: POP
// for i := minerMinesList downto 1 do
62328: LD_ADDR_VAR 0 1
62332: PUSH
62333: DOUBLE
62334: LD_EXP 60
62338: INC
62339: ST_TO_ADDR
62340: LD_INT 1
62342: PUSH
62343: FOR_DOWNTO
62344: IFFALSE 62680
// begin if IsLive ( minersList [ i ] ) then
62346: LD_EXP 59
62350: PUSH
62351: LD_VAR 0 1
62355: ARRAY
62356: PPUSH
62357: CALL_OW 300
62361: IFFALSE 62389
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62363: LD_EXP 59
62367: PUSH
62368: LD_VAR 0 1
62372: ARRAY
62373: PPUSH
62374: LD_EXP 60
62378: PUSH
62379: LD_VAR 0 1
62383: ARRAY
62384: PPUSH
62385: CALL_OW 505
// if not minerMinesList [ i ] then
62389: LD_EXP 60
62393: PUSH
62394: LD_VAR 0 1
62398: ARRAY
62399: NOT
62400: IFFALSE 62404
// continue ;
62402: GO 62343
// for j := minerMinesList [ i ] downto 1 do
62404: LD_ADDR_VAR 0 2
62408: PUSH
62409: DOUBLE
62410: LD_EXP 60
62414: PUSH
62415: LD_VAR 0 1
62419: ARRAY
62420: INC
62421: ST_TO_ADDR
62422: LD_INT 1
62424: PUSH
62425: FOR_DOWNTO
62426: IFFALSE 62676
// begin side := GetSide ( minersList [ i ] ) ;
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: LD_EXP 59
62437: PUSH
62438: LD_VAR 0 1
62442: ARRAY
62443: PPUSH
62444: CALL_OW 255
62448: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62449: LD_ADDR_VAR 0 4
62453: PUSH
62454: LD_EXP 60
62458: PUSH
62459: LD_VAR 0 1
62463: ARRAY
62464: PUSH
62465: LD_VAR 0 2
62469: ARRAY
62470: PUSH
62471: LD_INT 1
62473: ARRAY
62474: PPUSH
62475: LD_EXP 60
62479: PUSH
62480: LD_VAR 0 1
62484: ARRAY
62485: PUSH
62486: LD_VAR 0 2
62490: ARRAY
62491: PUSH
62492: LD_INT 2
62494: ARRAY
62495: PPUSH
62496: CALL_OW 428
62500: ST_TO_ADDR
// if not tmp then
62501: LD_VAR 0 4
62505: NOT
62506: IFFALSE 62510
// continue ;
62508: GO 62425
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62510: LD_VAR 0 4
62514: PUSH
62515: LD_INT 81
62517: PUSH
62518: LD_VAR 0 3
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PPUSH
62527: CALL_OW 69
62531: IN
62532: PUSH
62533: LD_EXP 60
62537: PUSH
62538: LD_VAR 0 1
62542: ARRAY
62543: PUSH
62544: LD_VAR 0 2
62548: ARRAY
62549: PUSH
62550: LD_INT 1
62552: ARRAY
62553: PPUSH
62554: LD_EXP 60
62558: PUSH
62559: LD_VAR 0 1
62563: ARRAY
62564: PUSH
62565: LD_VAR 0 2
62569: ARRAY
62570: PUSH
62571: LD_INT 2
62573: ARRAY
62574: PPUSH
62575: CALL_OW 458
62579: AND
62580: IFFALSE 62674
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62582: LD_EXP 60
62586: PUSH
62587: LD_VAR 0 1
62591: ARRAY
62592: PUSH
62593: LD_VAR 0 2
62597: ARRAY
62598: PUSH
62599: LD_INT 1
62601: ARRAY
62602: PPUSH
62603: LD_EXP 60
62607: PUSH
62608: LD_VAR 0 1
62612: ARRAY
62613: PUSH
62614: LD_VAR 0 2
62618: ARRAY
62619: PUSH
62620: LD_INT 2
62622: ARRAY
62623: PPUSH
62624: LD_VAR 0 3
62628: PPUSH
62629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62633: LD_ADDR_EXP 60
62637: PUSH
62638: LD_EXP 60
62642: PPUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: LD_EXP 60
62652: PUSH
62653: LD_VAR 0 1
62657: ARRAY
62658: PPUSH
62659: LD_VAR 0 2
62663: PPUSH
62664: CALL_OW 3
62668: PPUSH
62669: CALL_OW 1
62673: ST_TO_ADDR
// end ; end ;
62674: GO 62425
62676: POP
62677: POP
// end ;
62678: GO 62343
62680: POP
62681: POP
// end ;
62682: PPOPN 4
62684: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62685: LD_INT 0
62687: PPUSH
62688: PPUSH
// result := false ;
62689: LD_ADDR_VAR 0 4
62693: PUSH
62694: LD_INT 0
62696: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62697: LD_VAR 0 1
62701: PPUSH
62702: CALL_OW 264
62706: PUSH
62707: LD_INT 81
62709: EQUAL
62710: NOT
62711: IFFALSE 62715
// exit ;
62713: GO 62955
// index := GetElementIndex ( minersList , unit ) ;
62715: LD_ADDR_VAR 0 5
62719: PUSH
62720: LD_EXP 59
62724: PPUSH
62725: LD_VAR 0 1
62729: PPUSH
62730: CALL 21393 0 2
62734: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
62735: LD_EXP 60
62739: PUSH
62740: LD_VAR 0 5
62744: ARRAY
62745: PUSH
62746: LD_EXP 61
62750: GREATEREQUAL
62751: IFFALSE 62755
// exit ;
62753: GO 62955
// ComMoveXY ( unit , x , y ) ;
62755: LD_VAR 0 1
62759: PPUSH
62760: LD_VAR 0 2
62764: PPUSH
62765: LD_VAR 0 3
62769: PPUSH
62770: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62774: LD_INT 35
62776: PPUSH
62777: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
62781: LD_VAR 0 1
62785: PPUSH
62786: LD_VAR 0 2
62790: PPUSH
62791: LD_VAR 0 3
62795: PPUSH
62796: CALL 53134 0 3
62800: NOT
62801: PUSH
62802: LD_VAR 0 1
62806: PPUSH
62807: CALL_OW 314
62811: AND
62812: IFFALSE 62816
// exit ;
62814: GO 62955
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
62816: LD_VAR 0 2
62820: PPUSH
62821: LD_VAR 0 3
62825: PPUSH
62826: CALL_OW 428
62830: PUSH
62831: LD_VAR 0 1
62835: EQUAL
62836: PUSH
62837: LD_VAR 0 1
62841: PPUSH
62842: CALL_OW 314
62846: NOT
62847: AND
62848: IFFALSE 62774
// PlaySoundXY ( x , y , PlantMine ) ;
62850: LD_VAR 0 2
62854: PPUSH
62855: LD_VAR 0 3
62859: PPUSH
62860: LD_STRING PlantMine
62862: PPUSH
62863: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
62867: LD_VAR 0 2
62871: PPUSH
62872: LD_VAR 0 3
62876: PPUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: CALL_OW 255
62886: PPUSH
62887: LD_INT 0
62889: PPUSH
62890: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
62894: LD_ADDR_EXP 60
62898: PUSH
62899: LD_EXP 60
62903: PPUSH
62904: LD_VAR 0 5
62908: PUSH
62909: LD_EXP 60
62913: PUSH
62914: LD_VAR 0 5
62918: ARRAY
62919: PUSH
62920: LD_INT 1
62922: PLUS
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PPUSH
62928: LD_VAR 0 2
62932: PUSH
62933: LD_VAR 0 3
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PPUSH
62942: CALL 21608 0 3
62946: ST_TO_ADDR
// result := true ;
62947: LD_ADDR_VAR 0 4
62951: PUSH
62952: LD_INT 1
62954: ST_TO_ADDR
// end ;
62955: LD_VAR 0 4
62959: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
62960: LD_INT 0
62962: PPUSH
62963: PPUSH
62964: PPUSH
// if not unit in minersList then
62965: LD_VAR 0 1
62969: PUSH
62970: LD_EXP 59
62974: IN
62975: NOT
62976: IFFALSE 62980
// exit ;
62978: GO 63372
// index := GetElementIndex ( minersList , unit ) ;
62980: LD_ADDR_VAR 0 6
62984: PUSH
62985: LD_EXP 59
62989: PPUSH
62990: LD_VAR 0 1
62994: PPUSH
62995: CALL 21393 0 2
62999: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63000: LD_ADDR_VAR 0 5
63004: PUSH
63005: DOUBLE
63006: LD_EXP 60
63010: PUSH
63011: LD_VAR 0 6
63015: ARRAY
63016: INC
63017: ST_TO_ADDR
63018: LD_INT 1
63020: PUSH
63021: FOR_DOWNTO
63022: IFFALSE 63183
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63024: LD_EXP 60
63028: PUSH
63029: LD_VAR 0 6
63033: ARRAY
63034: PUSH
63035: LD_VAR 0 5
63039: ARRAY
63040: PUSH
63041: LD_INT 1
63043: ARRAY
63044: PUSH
63045: LD_VAR 0 2
63049: EQUAL
63050: PUSH
63051: LD_EXP 60
63055: PUSH
63056: LD_VAR 0 6
63060: ARRAY
63061: PUSH
63062: LD_VAR 0 5
63066: ARRAY
63067: PUSH
63068: LD_INT 2
63070: ARRAY
63071: PUSH
63072: LD_VAR 0 3
63076: EQUAL
63077: AND
63078: IFFALSE 63181
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63080: LD_EXP 60
63084: PUSH
63085: LD_VAR 0 6
63089: ARRAY
63090: PUSH
63091: LD_VAR 0 5
63095: ARRAY
63096: PUSH
63097: LD_INT 1
63099: ARRAY
63100: PPUSH
63101: LD_EXP 60
63105: PUSH
63106: LD_VAR 0 6
63110: ARRAY
63111: PUSH
63112: LD_VAR 0 5
63116: ARRAY
63117: PUSH
63118: LD_INT 2
63120: ARRAY
63121: PPUSH
63122: LD_VAR 0 1
63126: PPUSH
63127: CALL_OW 255
63131: PPUSH
63132: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63136: LD_ADDR_EXP 60
63140: PUSH
63141: LD_EXP 60
63145: PPUSH
63146: LD_VAR 0 6
63150: PPUSH
63151: LD_EXP 60
63155: PUSH
63156: LD_VAR 0 6
63160: ARRAY
63161: PPUSH
63162: LD_VAR 0 5
63166: PPUSH
63167: CALL_OW 3
63171: PPUSH
63172: CALL_OW 1
63176: ST_TO_ADDR
// exit ;
63177: POP
63178: POP
63179: GO 63372
// end ; end ;
63181: GO 63021
63183: POP
63184: POP
// for i := minerMinesList [ index ] downto 1 do
63185: LD_ADDR_VAR 0 5
63189: PUSH
63190: DOUBLE
63191: LD_EXP 60
63195: PUSH
63196: LD_VAR 0 6
63200: ARRAY
63201: INC
63202: ST_TO_ADDR
63203: LD_INT 1
63205: PUSH
63206: FOR_DOWNTO
63207: IFFALSE 63370
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63209: LD_EXP 60
63213: PUSH
63214: LD_VAR 0 6
63218: ARRAY
63219: PUSH
63220: LD_VAR 0 5
63224: ARRAY
63225: PUSH
63226: LD_INT 1
63228: ARRAY
63229: PPUSH
63230: LD_EXP 60
63234: PUSH
63235: LD_VAR 0 6
63239: ARRAY
63240: PUSH
63241: LD_VAR 0 5
63245: ARRAY
63246: PUSH
63247: LD_INT 2
63249: ARRAY
63250: PPUSH
63251: LD_VAR 0 2
63255: PPUSH
63256: LD_VAR 0 3
63260: PPUSH
63261: CALL_OW 298
63265: PUSH
63266: LD_INT 6
63268: LESS
63269: IFFALSE 63368
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63271: LD_EXP 60
63275: PUSH
63276: LD_VAR 0 6
63280: ARRAY
63281: PUSH
63282: LD_VAR 0 5
63286: ARRAY
63287: PUSH
63288: LD_INT 1
63290: ARRAY
63291: PPUSH
63292: LD_EXP 60
63296: PUSH
63297: LD_VAR 0 6
63301: ARRAY
63302: PUSH
63303: LD_VAR 0 5
63307: ARRAY
63308: PUSH
63309: LD_INT 2
63311: ARRAY
63312: PPUSH
63313: LD_VAR 0 1
63317: PPUSH
63318: CALL_OW 255
63322: PPUSH
63323: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63327: LD_ADDR_EXP 60
63331: PUSH
63332: LD_EXP 60
63336: PPUSH
63337: LD_VAR 0 6
63341: PPUSH
63342: LD_EXP 60
63346: PUSH
63347: LD_VAR 0 6
63351: ARRAY
63352: PPUSH
63353: LD_VAR 0 5
63357: PPUSH
63358: CALL_OW 3
63362: PPUSH
63363: CALL_OW 1
63367: ST_TO_ADDR
// end ; end ;
63368: GO 63206
63370: POP
63371: POP
// end ;
63372: LD_VAR 0 4
63376: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63377: LD_INT 0
63379: PPUSH
63380: PPUSH
63381: PPUSH
63382: PPUSH
63383: PPUSH
63384: PPUSH
63385: PPUSH
63386: PPUSH
63387: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63388: LD_VAR 0 1
63392: PPUSH
63393: CALL_OW 264
63397: PUSH
63398: LD_INT 81
63400: EQUAL
63401: NOT
63402: PUSH
63403: LD_VAR 0 1
63407: PUSH
63408: LD_EXP 59
63412: IN
63413: NOT
63414: OR
63415: IFFALSE 63419
// exit ;
63417: GO 63741
// index := GetElementIndex ( minersList , unit ) ;
63419: LD_ADDR_VAR 0 6
63423: PUSH
63424: LD_EXP 59
63428: PPUSH
63429: LD_VAR 0 1
63433: PPUSH
63434: CALL 21393 0 2
63438: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63439: LD_ADDR_VAR 0 8
63443: PUSH
63444: LD_EXP 61
63448: PUSH
63449: LD_EXP 60
63453: PUSH
63454: LD_VAR 0 6
63458: ARRAY
63459: MINUS
63460: ST_TO_ADDR
// if not minesFreeAmount then
63461: LD_VAR 0 8
63465: NOT
63466: IFFALSE 63470
// exit ;
63468: GO 63741
// tmp := [ ] ;
63470: LD_ADDR_VAR 0 7
63474: PUSH
63475: EMPTY
63476: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63477: LD_ADDR_VAR 0 5
63481: PUSH
63482: DOUBLE
63483: LD_INT 1
63485: DEC
63486: ST_TO_ADDR
63487: LD_VAR 0 8
63491: PUSH
63492: FOR_TO
63493: IFFALSE 63688
// begin _d := rand ( 0 , 5 ) ;
63495: LD_ADDR_VAR 0 11
63499: PUSH
63500: LD_INT 0
63502: PPUSH
63503: LD_INT 5
63505: PPUSH
63506: CALL_OW 12
63510: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63511: LD_ADDR_VAR 0 12
63515: PUSH
63516: LD_INT 2
63518: PPUSH
63519: LD_INT 6
63521: PPUSH
63522: CALL_OW 12
63526: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63527: LD_ADDR_VAR 0 9
63531: PUSH
63532: LD_VAR 0 2
63536: PPUSH
63537: LD_VAR 0 11
63541: PPUSH
63542: LD_VAR 0 12
63546: PPUSH
63547: CALL_OW 272
63551: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63552: LD_ADDR_VAR 0 10
63556: PUSH
63557: LD_VAR 0 3
63561: PPUSH
63562: LD_VAR 0 11
63566: PPUSH
63567: LD_VAR 0 12
63571: PPUSH
63572: CALL_OW 273
63576: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63577: LD_VAR 0 9
63581: PPUSH
63582: LD_VAR 0 10
63586: PPUSH
63587: CALL_OW 488
63591: PUSH
63592: LD_VAR 0 9
63596: PUSH
63597: LD_VAR 0 10
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_VAR 0 7
63610: IN
63611: NOT
63612: AND
63613: PUSH
63614: LD_VAR 0 9
63618: PPUSH
63619: LD_VAR 0 10
63623: PPUSH
63624: CALL_OW 458
63628: NOT
63629: AND
63630: IFFALSE 63672
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63632: LD_ADDR_VAR 0 7
63636: PUSH
63637: LD_VAR 0 7
63641: PPUSH
63642: LD_VAR 0 7
63646: PUSH
63647: LD_INT 1
63649: PLUS
63650: PPUSH
63651: LD_VAR 0 9
63655: PUSH
63656: LD_VAR 0 10
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PPUSH
63665: CALL_OW 1
63669: ST_TO_ADDR
63670: GO 63686
// i := i - 1 ;
63672: LD_ADDR_VAR 0 5
63676: PUSH
63677: LD_VAR 0 5
63681: PUSH
63682: LD_INT 1
63684: MINUS
63685: ST_TO_ADDR
// end ;
63686: GO 63492
63688: POP
63689: POP
// for i in tmp do
63690: LD_ADDR_VAR 0 5
63694: PUSH
63695: LD_VAR 0 7
63699: PUSH
63700: FOR_IN
63701: IFFALSE 63739
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63703: LD_VAR 0 1
63707: PPUSH
63708: LD_VAR 0 5
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: PPUSH
63717: LD_VAR 0 5
63721: PUSH
63722: LD_INT 2
63724: ARRAY
63725: PPUSH
63726: CALL 62685 0 3
63730: NOT
63731: IFFALSE 63737
// exit ;
63733: POP
63734: POP
63735: GO 63741
63737: GO 63700
63739: POP
63740: POP
// end ;
63741: LD_VAR 0 4
63745: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
63746: LD_INT 0
63748: PPUSH
63749: PPUSH
63750: PPUSH
63751: PPUSH
63752: PPUSH
63753: PPUSH
63754: PPUSH
// if not GetClass ( unit ) = class_sniper then
63755: LD_VAR 0 1
63759: PPUSH
63760: CALL_OW 257
63764: PUSH
63765: LD_INT 5
63767: EQUAL
63768: NOT
63769: IFFALSE 63773
// exit ;
63771: GO 64161
// dist := 8 ;
63773: LD_ADDR_VAR 0 5
63777: PUSH
63778: LD_INT 8
63780: ST_TO_ADDR
// viewRange := 12 ;
63781: LD_ADDR_VAR 0 7
63785: PUSH
63786: LD_INT 12
63788: ST_TO_ADDR
// side := GetSide ( unit ) ;
63789: LD_ADDR_VAR 0 6
63793: PUSH
63794: LD_VAR 0 1
63798: PPUSH
63799: CALL_OW 255
63803: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
63804: LD_INT 61
63806: PPUSH
63807: LD_VAR 0 6
63811: PPUSH
63812: CALL_OW 321
63816: PUSH
63817: LD_INT 2
63819: EQUAL
63820: IFFALSE 63830
// viewRange := 16 ;
63822: LD_ADDR_VAR 0 7
63826: PUSH
63827: LD_INT 16
63829: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
63830: LD_VAR 0 1
63834: PPUSH
63835: LD_VAR 0 2
63839: PPUSH
63840: LD_VAR 0 3
63844: PPUSH
63845: CALL_OW 297
63849: PUSH
63850: LD_VAR 0 5
63854: GREATER
63855: IFFALSE 63934
// begin ComMoveXY ( unit , x , y ) ;
63857: LD_VAR 0 1
63861: PPUSH
63862: LD_VAR 0 2
63866: PPUSH
63867: LD_VAR 0 3
63871: PPUSH
63872: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63876: LD_INT 35
63878: PPUSH
63879: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
63883: LD_VAR 0 1
63887: PPUSH
63888: LD_VAR 0 2
63892: PPUSH
63893: LD_VAR 0 3
63897: PPUSH
63898: CALL 53134 0 3
63902: NOT
63903: IFFALSE 63907
// exit ;
63905: GO 64161
// until GetDistUnitXY ( unit , x , y ) < dist ;
63907: LD_VAR 0 1
63911: PPUSH
63912: LD_VAR 0 2
63916: PPUSH
63917: LD_VAR 0 3
63921: PPUSH
63922: CALL_OW 297
63926: PUSH
63927: LD_VAR 0 5
63931: LESS
63932: IFFALSE 63876
// end ; ComTurnXY ( unit , x , y ) ;
63934: LD_VAR 0 1
63938: PPUSH
63939: LD_VAR 0 2
63943: PPUSH
63944: LD_VAR 0 3
63948: PPUSH
63949: CALL_OW 118
// wait ( 5 ) ;
63953: LD_INT 5
63955: PPUSH
63956: CALL_OW 67
// _d := GetDir ( unit ) ;
63960: LD_ADDR_VAR 0 10
63964: PUSH
63965: LD_VAR 0 1
63969: PPUSH
63970: CALL_OW 254
63974: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
63975: LD_ADDR_VAR 0 8
63979: PUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 250
63989: PPUSH
63990: LD_VAR 0 10
63994: PPUSH
63995: LD_VAR 0 5
63999: PPUSH
64000: CALL_OW 272
64004: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
64005: LD_ADDR_VAR 0 9
64009: PUSH
64010: LD_VAR 0 1
64014: PPUSH
64015: CALL_OW 251
64019: PPUSH
64020: LD_VAR 0 10
64024: PPUSH
64025: LD_VAR 0 5
64029: PPUSH
64030: CALL_OW 273
64034: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64035: LD_VAR 0 8
64039: PPUSH
64040: LD_VAR 0 9
64044: PPUSH
64045: CALL_OW 488
64049: NOT
64050: IFFALSE 64054
// exit ;
64052: GO 64161
// ComAnimCustom ( unit , 1 ) ;
64054: LD_VAR 0 1
64058: PPUSH
64059: LD_INT 1
64061: PPUSH
64062: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64066: LD_VAR 0 8
64070: PPUSH
64071: LD_VAR 0 9
64075: PPUSH
64076: LD_VAR 0 6
64080: PPUSH
64081: LD_VAR 0 7
64085: PPUSH
64086: CALL_OW 330
// repeat wait ( 1 ) ;
64090: LD_INT 1
64092: PPUSH
64093: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
64097: LD_VAR 0 1
64101: PPUSH
64102: CALL_OW 316
64106: PUSH
64107: LD_VAR 0 1
64111: PPUSH
64112: CALL_OW 314
64116: OR
64117: PUSH
64118: LD_VAR 0 1
64122: PPUSH
64123: CALL_OW 302
64127: NOT
64128: OR
64129: PUSH
64130: LD_VAR 0 1
64134: PPUSH
64135: CALL_OW 301
64139: OR
64140: IFFALSE 64090
// RemoveSeeing ( _x , _y , side ) ;
64142: LD_VAR 0 8
64146: PPUSH
64147: LD_VAR 0 9
64151: PPUSH
64152: LD_VAR 0 6
64156: PPUSH
64157: CALL_OW 331
// end ; end_of_file
64161: LD_VAR 0 4
64165: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64166: LD_VAR 0 1
64170: PUSH
64171: LD_INT 200
64173: DOUBLE
64174: GREATEREQUAL
64175: IFFALSE 64183
64177: LD_INT 299
64179: DOUBLE
64180: LESSEQUAL
64181: IFTRUE 64185
64183: GO 64217
64185: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64186: LD_VAR 0 1
64190: PPUSH
64191: LD_VAR 0 2
64195: PPUSH
64196: LD_VAR 0 3
64200: PPUSH
64201: LD_VAR 0 4
64205: PPUSH
64206: LD_VAR 0 5
64210: PPUSH
64211: CALL 59648 0 5
64215: GO 64294
64217: LD_INT 300
64219: DOUBLE
64220: GREATEREQUAL
64221: IFFALSE 64229
64223: LD_INT 399
64225: DOUBLE
64226: LESSEQUAL
64227: IFTRUE 64231
64229: GO 64293
64231: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64232: LD_VAR 0 1
64236: PPUSH
64237: LD_VAR 0 2
64241: PPUSH
64242: LD_VAR 0 3
64246: PPUSH
64247: LD_VAR 0 4
64251: PPUSH
64252: LD_VAR 0 5
64256: PPUSH
64257: LD_VAR 0 6
64261: PPUSH
64262: LD_VAR 0 7
64266: PPUSH
64267: LD_VAR 0 8
64271: PPUSH
64272: LD_VAR 0 9
64276: PPUSH
64277: LD_VAR 0 10
64281: PPUSH
64282: LD_VAR 0 11
64286: PPUSH
64287: CALL 76832 0 11
64291: GO 64294
64293: POP
// end ;
64294: PPOPN 11
64296: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64297: LD_VAR 0 1
64301: PPUSH
64302: LD_VAR 0 2
64306: PPUSH
64307: LD_VAR 0 3
64311: PPUSH
64312: LD_VAR 0 4
64316: PPUSH
64317: LD_VAR 0 5
64321: PPUSH
64322: CALL 59384 0 5
// end ; end_of_file
64326: PPOPN 5
64328: END
// export globalGameSaveCounter ; every 0 0$1 do
64329: GO 64331
64331: DISABLE
// begin enable ;
64332: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64333: LD_STRING updateTimer(
64335: PUSH
64336: LD_OWVAR 1
64340: STR
64341: PUSH
64342: LD_STRING );
64344: STR
64345: PPUSH
64346: CALL_OW 559
// end ;
64350: END
// every 0 0$1 do
64351: GO 64353
64353: DISABLE
// begin globalGameSaveCounter := 0 ;
64354: LD_ADDR_EXP 62
64358: PUSH
64359: LD_INT 0
64361: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
64362: LD_STRING setGameSaveCounter(0)
64364: PPUSH
64365: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
64369: LD_STRING initStreamRollete();
64371: PPUSH
64372: CALL_OW 559
// InitStreamMode ;
64376: CALL 65702 0 0
// DefineStreamItems ( false ) ;
64380: LD_INT 0
64382: PPUSH
64383: CALL 66166 0 1
// end ;
64387: END
// export function SOS_MapStart ( ) ; begin
64388: LD_INT 0
64390: PPUSH
// if streamModeActive then
64391: LD_EXP 63
64395: IFFALSE 64404
// DefineStreamItems ( true ) ;
64397: LD_INT 1
64399: PPUSH
64400: CALL 66166 0 1
// UpdateLuaVariables ( ) ;
64404: CALL 64421 0 0
// UpdateFactoryWaypoints ( ) ;
64408: CALL 79035 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64412: CALL 79292 0 0
// end ;
64416: LD_VAR 0 1
64420: RET
// function UpdateLuaVariables ( ) ; begin
64421: LD_INT 0
64423: PPUSH
// if globalGameSaveCounter then
64424: LD_EXP 62
64428: IFFALSE 64462
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
64430: LD_ADDR_EXP 62
64434: PUSH
64435: LD_EXP 62
64439: PPUSH
64440: CALL 55698 0 1
64444: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
64445: LD_STRING setGameSaveCounter(
64447: PUSH
64448: LD_EXP 62
64452: STR
64453: PUSH
64454: LD_STRING )
64456: STR
64457: PPUSH
64458: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64462: LD_STRING setGameDifficulty(
64464: PUSH
64465: LD_OWVAR 67
64469: STR
64470: PUSH
64471: LD_STRING )
64473: STR
64474: PPUSH
64475: CALL_OW 559
// end ;
64479: LD_VAR 0 1
64483: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64484: LD_INT 0
64486: PPUSH
// if p2 = stream_mode then
64487: LD_VAR 0 2
64491: PUSH
64492: LD_INT 100
64494: EQUAL
64495: IFFALSE 65498
// begin if not StreamModeActive then
64497: LD_EXP 63
64501: NOT
64502: IFFALSE 64512
// StreamModeActive := true ;
64504: LD_ADDR_EXP 63
64508: PUSH
64509: LD_INT 1
64511: ST_TO_ADDR
// if p3 = 0 then
64512: LD_VAR 0 3
64516: PUSH
64517: LD_INT 0
64519: EQUAL
64520: IFFALSE 64526
// InitStreamMode ;
64522: CALL 65702 0 0
// if p3 = 1 then
64526: LD_VAR 0 3
64530: PUSH
64531: LD_INT 1
64533: EQUAL
64534: IFFALSE 64544
// sRocket := true ;
64536: LD_ADDR_EXP 68
64540: PUSH
64541: LD_INT 1
64543: ST_TO_ADDR
// if p3 = 2 then
64544: LD_VAR 0 3
64548: PUSH
64549: LD_INT 2
64551: EQUAL
64552: IFFALSE 64562
// sSpeed := true ;
64554: LD_ADDR_EXP 67
64558: PUSH
64559: LD_INT 1
64561: ST_TO_ADDR
// if p3 = 3 then
64562: LD_VAR 0 3
64566: PUSH
64567: LD_INT 3
64569: EQUAL
64570: IFFALSE 64580
// sEngine := true ;
64572: LD_ADDR_EXP 69
64576: PUSH
64577: LD_INT 1
64579: ST_TO_ADDR
// if p3 = 4 then
64580: LD_VAR 0 3
64584: PUSH
64585: LD_INT 4
64587: EQUAL
64588: IFFALSE 64598
// sSpec := true ;
64590: LD_ADDR_EXP 66
64594: PUSH
64595: LD_INT 1
64597: ST_TO_ADDR
// if p3 = 5 then
64598: LD_VAR 0 3
64602: PUSH
64603: LD_INT 5
64605: EQUAL
64606: IFFALSE 64616
// sLevel := true ;
64608: LD_ADDR_EXP 70
64612: PUSH
64613: LD_INT 1
64615: ST_TO_ADDR
// if p3 = 6 then
64616: LD_VAR 0 3
64620: PUSH
64621: LD_INT 6
64623: EQUAL
64624: IFFALSE 64634
// sArmoury := true ;
64626: LD_ADDR_EXP 71
64630: PUSH
64631: LD_INT 1
64633: ST_TO_ADDR
// if p3 = 7 then
64634: LD_VAR 0 3
64638: PUSH
64639: LD_INT 7
64641: EQUAL
64642: IFFALSE 64652
// sRadar := true ;
64644: LD_ADDR_EXP 72
64648: PUSH
64649: LD_INT 1
64651: ST_TO_ADDR
// if p3 = 8 then
64652: LD_VAR 0 3
64656: PUSH
64657: LD_INT 8
64659: EQUAL
64660: IFFALSE 64670
// sBunker := true ;
64662: LD_ADDR_EXP 73
64666: PUSH
64667: LD_INT 1
64669: ST_TO_ADDR
// if p3 = 9 then
64670: LD_VAR 0 3
64674: PUSH
64675: LD_INT 9
64677: EQUAL
64678: IFFALSE 64688
// sHack := true ;
64680: LD_ADDR_EXP 74
64684: PUSH
64685: LD_INT 1
64687: ST_TO_ADDR
// if p3 = 10 then
64688: LD_VAR 0 3
64692: PUSH
64693: LD_INT 10
64695: EQUAL
64696: IFFALSE 64706
// sFire := true ;
64698: LD_ADDR_EXP 75
64702: PUSH
64703: LD_INT 1
64705: ST_TO_ADDR
// if p3 = 11 then
64706: LD_VAR 0 3
64710: PUSH
64711: LD_INT 11
64713: EQUAL
64714: IFFALSE 64724
// sRefresh := true ;
64716: LD_ADDR_EXP 76
64720: PUSH
64721: LD_INT 1
64723: ST_TO_ADDR
// if p3 = 12 then
64724: LD_VAR 0 3
64728: PUSH
64729: LD_INT 12
64731: EQUAL
64732: IFFALSE 64742
// sExp := true ;
64734: LD_ADDR_EXP 77
64738: PUSH
64739: LD_INT 1
64741: ST_TO_ADDR
// if p3 = 13 then
64742: LD_VAR 0 3
64746: PUSH
64747: LD_INT 13
64749: EQUAL
64750: IFFALSE 64760
// sDepot := true ;
64752: LD_ADDR_EXP 78
64756: PUSH
64757: LD_INT 1
64759: ST_TO_ADDR
// if p3 = 14 then
64760: LD_VAR 0 3
64764: PUSH
64765: LD_INT 14
64767: EQUAL
64768: IFFALSE 64778
// sFlag := true ;
64770: LD_ADDR_EXP 79
64774: PUSH
64775: LD_INT 1
64777: ST_TO_ADDR
// if p3 = 15 then
64778: LD_VAR 0 3
64782: PUSH
64783: LD_INT 15
64785: EQUAL
64786: IFFALSE 64796
// sKamikadze := true ;
64788: LD_ADDR_EXP 87
64792: PUSH
64793: LD_INT 1
64795: ST_TO_ADDR
// if p3 = 16 then
64796: LD_VAR 0 3
64800: PUSH
64801: LD_INT 16
64803: EQUAL
64804: IFFALSE 64814
// sTroll := true ;
64806: LD_ADDR_EXP 88
64810: PUSH
64811: LD_INT 1
64813: ST_TO_ADDR
// if p3 = 17 then
64814: LD_VAR 0 3
64818: PUSH
64819: LD_INT 17
64821: EQUAL
64822: IFFALSE 64832
// sSlow := true ;
64824: LD_ADDR_EXP 89
64828: PUSH
64829: LD_INT 1
64831: ST_TO_ADDR
// if p3 = 18 then
64832: LD_VAR 0 3
64836: PUSH
64837: LD_INT 18
64839: EQUAL
64840: IFFALSE 64850
// sLack := true ;
64842: LD_ADDR_EXP 90
64846: PUSH
64847: LD_INT 1
64849: ST_TO_ADDR
// if p3 = 19 then
64850: LD_VAR 0 3
64854: PUSH
64855: LD_INT 19
64857: EQUAL
64858: IFFALSE 64868
// sTank := true ;
64860: LD_ADDR_EXP 92
64864: PUSH
64865: LD_INT 1
64867: ST_TO_ADDR
// if p3 = 20 then
64868: LD_VAR 0 3
64872: PUSH
64873: LD_INT 20
64875: EQUAL
64876: IFFALSE 64886
// sRemote := true ;
64878: LD_ADDR_EXP 93
64882: PUSH
64883: LD_INT 1
64885: ST_TO_ADDR
// if p3 = 21 then
64886: LD_VAR 0 3
64890: PUSH
64891: LD_INT 21
64893: EQUAL
64894: IFFALSE 64904
// sPowell := true ;
64896: LD_ADDR_EXP 94
64900: PUSH
64901: LD_INT 1
64903: ST_TO_ADDR
// if p3 = 22 then
64904: LD_VAR 0 3
64908: PUSH
64909: LD_INT 22
64911: EQUAL
64912: IFFALSE 64922
// sTeleport := true ;
64914: LD_ADDR_EXP 97
64918: PUSH
64919: LD_INT 1
64921: ST_TO_ADDR
// if p3 = 23 then
64922: LD_VAR 0 3
64926: PUSH
64927: LD_INT 23
64929: EQUAL
64930: IFFALSE 64940
// sOilTower := true ;
64932: LD_ADDR_EXP 99
64936: PUSH
64937: LD_INT 1
64939: ST_TO_ADDR
// if p3 = 24 then
64940: LD_VAR 0 3
64944: PUSH
64945: LD_INT 24
64947: EQUAL
64948: IFFALSE 64958
// sShovel := true ;
64950: LD_ADDR_EXP 100
64954: PUSH
64955: LD_INT 1
64957: ST_TO_ADDR
// if p3 = 25 then
64958: LD_VAR 0 3
64962: PUSH
64963: LD_INT 25
64965: EQUAL
64966: IFFALSE 64976
// sSheik := true ;
64968: LD_ADDR_EXP 101
64972: PUSH
64973: LD_INT 1
64975: ST_TO_ADDR
// if p3 = 26 then
64976: LD_VAR 0 3
64980: PUSH
64981: LD_INT 26
64983: EQUAL
64984: IFFALSE 64994
// sEarthquake := true ;
64986: LD_ADDR_EXP 103
64990: PUSH
64991: LD_INT 1
64993: ST_TO_ADDR
// if p3 = 27 then
64994: LD_VAR 0 3
64998: PUSH
64999: LD_INT 27
65001: EQUAL
65002: IFFALSE 65012
// sAI := true ;
65004: LD_ADDR_EXP 104
65008: PUSH
65009: LD_INT 1
65011: ST_TO_ADDR
// if p3 = 28 then
65012: LD_VAR 0 3
65016: PUSH
65017: LD_INT 28
65019: EQUAL
65020: IFFALSE 65030
// sCargo := true ;
65022: LD_ADDR_EXP 107
65026: PUSH
65027: LD_INT 1
65029: ST_TO_ADDR
// if p3 = 29 then
65030: LD_VAR 0 3
65034: PUSH
65035: LD_INT 29
65037: EQUAL
65038: IFFALSE 65048
// sDLaser := true ;
65040: LD_ADDR_EXP 108
65044: PUSH
65045: LD_INT 1
65047: ST_TO_ADDR
// if p3 = 30 then
65048: LD_VAR 0 3
65052: PUSH
65053: LD_INT 30
65055: EQUAL
65056: IFFALSE 65066
// sExchange := true ;
65058: LD_ADDR_EXP 109
65062: PUSH
65063: LD_INT 1
65065: ST_TO_ADDR
// if p3 = 31 then
65066: LD_VAR 0 3
65070: PUSH
65071: LD_INT 31
65073: EQUAL
65074: IFFALSE 65084
// sFac := true ;
65076: LD_ADDR_EXP 110
65080: PUSH
65081: LD_INT 1
65083: ST_TO_ADDR
// if p3 = 32 then
65084: LD_VAR 0 3
65088: PUSH
65089: LD_INT 32
65091: EQUAL
65092: IFFALSE 65102
// sPower := true ;
65094: LD_ADDR_EXP 111
65098: PUSH
65099: LD_INT 1
65101: ST_TO_ADDR
// if p3 = 33 then
65102: LD_VAR 0 3
65106: PUSH
65107: LD_INT 33
65109: EQUAL
65110: IFFALSE 65120
// sRandom := true ;
65112: LD_ADDR_EXP 112
65116: PUSH
65117: LD_INT 1
65119: ST_TO_ADDR
// if p3 = 34 then
65120: LD_VAR 0 3
65124: PUSH
65125: LD_INT 34
65127: EQUAL
65128: IFFALSE 65138
// sShield := true ;
65130: LD_ADDR_EXP 113
65134: PUSH
65135: LD_INT 1
65137: ST_TO_ADDR
// if p3 = 35 then
65138: LD_VAR 0 3
65142: PUSH
65143: LD_INT 35
65145: EQUAL
65146: IFFALSE 65156
// sTime := true ;
65148: LD_ADDR_EXP 114
65152: PUSH
65153: LD_INT 1
65155: ST_TO_ADDR
// if p3 = 36 then
65156: LD_VAR 0 3
65160: PUSH
65161: LD_INT 36
65163: EQUAL
65164: IFFALSE 65174
// sTools := true ;
65166: LD_ADDR_EXP 115
65170: PUSH
65171: LD_INT 1
65173: ST_TO_ADDR
// if p3 = 101 then
65174: LD_VAR 0 3
65178: PUSH
65179: LD_INT 101
65181: EQUAL
65182: IFFALSE 65192
// sSold := true ;
65184: LD_ADDR_EXP 80
65188: PUSH
65189: LD_INT 1
65191: ST_TO_ADDR
// if p3 = 102 then
65192: LD_VAR 0 3
65196: PUSH
65197: LD_INT 102
65199: EQUAL
65200: IFFALSE 65210
// sDiff := true ;
65202: LD_ADDR_EXP 81
65206: PUSH
65207: LD_INT 1
65209: ST_TO_ADDR
// if p3 = 103 then
65210: LD_VAR 0 3
65214: PUSH
65215: LD_INT 103
65217: EQUAL
65218: IFFALSE 65228
// sFog := true ;
65220: LD_ADDR_EXP 84
65224: PUSH
65225: LD_INT 1
65227: ST_TO_ADDR
// if p3 = 104 then
65228: LD_VAR 0 3
65232: PUSH
65233: LD_INT 104
65235: EQUAL
65236: IFFALSE 65246
// sReset := true ;
65238: LD_ADDR_EXP 85
65242: PUSH
65243: LD_INT 1
65245: ST_TO_ADDR
// if p3 = 105 then
65246: LD_VAR 0 3
65250: PUSH
65251: LD_INT 105
65253: EQUAL
65254: IFFALSE 65264
// sSun := true ;
65256: LD_ADDR_EXP 86
65260: PUSH
65261: LD_INT 1
65263: ST_TO_ADDR
// if p3 = 106 then
65264: LD_VAR 0 3
65268: PUSH
65269: LD_INT 106
65271: EQUAL
65272: IFFALSE 65282
// sTiger := true ;
65274: LD_ADDR_EXP 82
65278: PUSH
65279: LD_INT 1
65281: ST_TO_ADDR
// if p3 = 107 then
65282: LD_VAR 0 3
65286: PUSH
65287: LD_INT 107
65289: EQUAL
65290: IFFALSE 65300
// sBomb := true ;
65292: LD_ADDR_EXP 83
65296: PUSH
65297: LD_INT 1
65299: ST_TO_ADDR
// if p3 = 108 then
65300: LD_VAR 0 3
65304: PUSH
65305: LD_INT 108
65307: EQUAL
65308: IFFALSE 65318
// sWound := true ;
65310: LD_ADDR_EXP 91
65314: PUSH
65315: LD_INT 1
65317: ST_TO_ADDR
// if p3 = 109 then
65318: LD_VAR 0 3
65322: PUSH
65323: LD_INT 109
65325: EQUAL
65326: IFFALSE 65336
// sBetray := true ;
65328: LD_ADDR_EXP 95
65332: PUSH
65333: LD_INT 1
65335: ST_TO_ADDR
// if p3 = 110 then
65336: LD_VAR 0 3
65340: PUSH
65341: LD_INT 110
65343: EQUAL
65344: IFFALSE 65354
// sContamin := true ;
65346: LD_ADDR_EXP 96
65350: PUSH
65351: LD_INT 1
65353: ST_TO_ADDR
// if p3 = 111 then
65354: LD_VAR 0 3
65358: PUSH
65359: LD_INT 111
65361: EQUAL
65362: IFFALSE 65372
// sOil := true ;
65364: LD_ADDR_EXP 98
65368: PUSH
65369: LD_INT 1
65371: ST_TO_ADDR
// if p3 = 112 then
65372: LD_VAR 0 3
65376: PUSH
65377: LD_INT 112
65379: EQUAL
65380: IFFALSE 65390
// sStu := true ;
65382: LD_ADDR_EXP 102
65386: PUSH
65387: LD_INT 1
65389: ST_TO_ADDR
// if p3 = 113 then
65390: LD_VAR 0 3
65394: PUSH
65395: LD_INT 113
65397: EQUAL
65398: IFFALSE 65408
// sBazooka := true ;
65400: LD_ADDR_EXP 105
65404: PUSH
65405: LD_INT 1
65407: ST_TO_ADDR
// if p3 = 114 then
65408: LD_VAR 0 3
65412: PUSH
65413: LD_INT 114
65415: EQUAL
65416: IFFALSE 65426
// sMortar := true ;
65418: LD_ADDR_EXP 106
65422: PUSH
65423: LD_INT 1
65425: ST_TO_ADDR
// if p3 = 115 then
65426: LD_VAR 0 3
65430: PUSH
65431: LD_INT 115
65433: EQUAL
65434: IFFALSE 65444
// sRanger := true ;
65436: LD_ADDR_EXP 116
65440: PUSH
65441: LD_INT 1
65443: ST_TO_ADDR
// if p3 = 116 then
65444: LD_VAR 0 3
65448: PUSH
65449: LD_INT 116
65451: EQUAL
65452: IFFALSE 65462
// sComputer := true ;
65454: LD_ADDR_EXP 117
65458: PUSH
65459: LD_INT 1
65461: ST_TO_ADDR
// if p3 = 117 then
65462: LD_VAR 0 3
65466: PUSH
65467: LD_INT 117
65469: EQUAL
65470: IFFALSE 65480
// s30 := true ;
65472: LD_ADDR_EXP 118
65476: PUSH
65477: LD_INT 1
65479: ST_TO_ADDR
// if p3 = 118 then
65480: LD_VAR 0 3
65484: PUSH
65485: LD_INT 118
65487: EQUAL
65488: IFFALSE 65498
// s60 := true ;
65490: LD_ADDR_EXP 119
65494: PUSH
65495: LD_INT 1
65497: ST_TO_ADDR
// end ; if p2 = hack_mode then
65498: LD_VAR 0 2
65502: PUSH
65503: LD_INT 101
65505: EQUAL
65506: IFFALSE 65634
// begin case p3 of 1 :
65508: LD_VAR 0 3
65512: PUSH
65513: LD_INT 1
65515: DOUBLE
65516: EQUAL
65517: IFTRUE 65521
65519: GO 65528
65521: POP
// hHackUnlimitedResources ; 2 :
65522: CALL 77781 0 0
65526: GO 65634
65528: LD_INT 2
65530: DOUBLE
65531: EQUAL
65532: IFTRUE 65536
65534: GO 65543
65536: POP
// hHackSetLevel10 ; 3 :
65537: CALL 77914 0 0
65541: GO 65634
65543: LD_INT 3
65545: DOUBLE
65546: EQUAL
65547: IFTRUE 65551
65549: GO 65558
65551: POP
// hHackSetLevel10YourUnits ; 4 :
65552: CALL 77999 0 0
65556: GO 65634
65558: LD_INT 4
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65566
65564: GO 65573
65566: POP
// hHackInvincible ; 5 :
65567: CALL 78447 0 0
65571: GO 65634
65573: LD_INT 5
65575: DOUBLE
65576: EQUAL
65577: IFTRUE 65581
65579: GO 65588
65581: POP
// hHackInvisible ; 6 :
65582: CALL 78558 0 0
65586: GO 65634
65588: LD_INT 6
65590: DOUBLE
65591: EQUAL
65592: IFTRUE 65596
65594: GO 65603
65596: POP
// hHackChangeYourSide ; 7 :
65597: CALL 78615 0 0
65601: GO 65634
65603: LD_INT 7
65605: DOUBLE
65606: EQUAL
65607: IFTRUE 65611
65609: GO 65618
65611: POP
// hHackChangeUnitSide ; 8 :
65612: CALL 78657 0 0
65616: GO 65634
65618: LD_INT 8
65620: DOUBLE
65621: EQUAL
65622: IFTRUE 65626
65624: GO 65633
65626: POP
// hHackFog ; end ;
65627: CALL 78758 0 0
65631: GO 65634
65633: POP
// end ; if p2 = game_save_mode then
65634: LD_VAR 0 2
65638: PUSH
65639: LD_INT 102
65641: EQUAL
65642: IFFALSE 65697
// begin if p3 = 1 then
65644: LD_VAR 0 3
65648: PUSH
65649: LD_INT 1
65651: EQUAL
65652: IFFALSE 65664
// globalGameSaveCounter := p4 ;
65654: LD_ADDR_EXP 62
65658: PUSH
65659: LD_VAR 0 4
65663: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
65664: LD_VAR 0 3
65668: PUSH
65669: LD_INT 2
65671: EQUAL
65672: PUSH
65673: LD_EXP 62
65677: AND
65678: IFFALSE 65697
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
65680: LD_STRING setGameSaveCounter(
65682: PUSH
65683: LD_EXP 62
65687: STR
65688: PUSH
65689: LD_STRING )
65691: STR
65692: PPUSH
65693: CALL_OW 559
// end ; end ;
65697: LD_VAR 0 7
65701: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
65702: LD_INT 0
65704: PPUSH
// streamModeActive := false ;
65705: LD_ADDR_EXP 63
65709: PUSH
65710: LD_INT 0
65712: ST_TO_ADDR
// normalCounter := 36 ;
65713: LD_ADDR_EXP 64
65717: PUSH
65718: LD_INT 36
65720: ST_TO_ADDR
// hardcoreCounter := 18 ;
65721: LD_ADDR_EXP 65
65725: PUSH
65726: LD_INT 18
65728: ST_TO_ADDR
// sRocket := false ;
65729: LD_ADDR_EXP 68
65733: PUSH
65734: LD_INT 0
65736: ST_TO_ADDR
// sSpeed := false ;
65737: LD_ADDR_EXP 67
65741: PUSH
65742: LD_INT 0
65744: ST_TO_ADDR
// sEngine := false ;
65745: LD_ADDR_EXP 69
65749: PUSH
65750: LD_INT 0
65752: ST_TO_ADDR
// sSpec := false ;
65753: LD_ADDR_EXP 66
65757: PUSH
65758: LD_INT 0
65760: ST_TO_ADDR
// sLevel := false ;
65761: LD_ADDR_EXP 70
65765: PUSH
65766: LD_INT 0
65768: ST_TO_ADDR
// sArmoury := false ;
65769: LD_ADDR_EXP 71
65773: PUSH
65774: LD_INT 0
65776: ST_TO_ADDR
// sRadar := false ;
65777: LD_ADDR_EXP 72
65781: PUSH
65782: LD_INT 0
65784: ST_TO_ADDR
// sBunker := false ;
65785: LD_ADDR_EXP 73
65789: PUSH
65790: LD_INT 0
65792: ST_TO_ADDR
// sHack := false ;
65793: LD_ADDR_EXP 74
65797: PUSH
65798: LD_INT 0
65800: ST_TO_ADDR
// sFire := false ;
65801: LD_ADDR_EXP 75
65805: PUSH
65806: LD_INT 0
65808: ST_TO_ADDR
// sRefresh := false ;
65809: LD_ADDR_EXP 76
65813: PUSH
65814: LD_INT 0
65816: ST_TO_ADDR
// sExp := false ;
65817: LD_ADDR_EXP 77
65821: PUSH
65822: LD_INT 0
65824: ST_TO_ADDR
// sDepot := false ;
65825: LD_ADDR_EXP 78
65829: PUSH
65830: LD_INT 0
65832: ST_TO_ADDR
// sFlag := false ;
65833: LD_ADDR_EXP 79
65837: PUSH
65838: LD_INT 0
65840: ST_TO_ADDR
// sKamikadze := false ;
65841: LD_ADDR_EXP 87
65845: PUSH
65846: LD_INT 0
65848: ST_TO_ADDR
// sTroll := false ;
65849: LD_ADDR_EXP 88
65853: PUSH
65854: LD_INT 0
65856: ST_TO_ADDR
// sSlow := false ;
65857: LD_ADDR_EXP 89
65861: PUSH
65862: LD_INT 0
65864: ST_TO_ADDR
// sLack := false ;
65865: LD_ADDR_EXP 90
65869: PUSH
65870: LD_INT 0
65872: ST_TO_ADDR
// sTank := false ;
65873: LD_ADDR_EXP 92
65877: PUSH
65878: LD_INT 0
65880: ST_TO_ADDR
// sRemote := false ;
65881: LD_ADDR_EXP 93
65885: PUSH
65886: LD_INT 0
65888: ST_TO_ADDR
// sPowell := false ;
65889: LD_ADDR_EXP 94
65893: PUSH
65894: LD_INT 0
65896: ST_TO_ADDR
// sTeleport := false ;
65897: LD_ADDR_EXP 97
65901: PUSH
65902: LD_INT 0
65904: ST_TO_ADDR
// sOilTower := false ;
65905: LD_ADDR_EXP 99
65909: PUSH
65910: LD_INT 0
65912: ST_TO_ADDR
// sShovel := false ;
65913: LD_ADDR_EXP 100
65917: PUSH
65918: LD_INT 0
65920: ST_TO_ADDR
// sSheik := false ;
65921: LD_ADDR_EXP 101
65925: PUSH
65926: LD_INT 0
65928: ST_TO_ADDR
// sEarthquake := false ;
65929: LD_ADDR_EXP 103
65933: PUSH
65934: LD_INT 0
65936: ST_TO_ADDR
// sAI := false ;
65937: LD_ADDR_EXP 104
65941: PUSH
65942: LD_INT 0
65944: ST_TO_ADDR
// sCargo := false ;
65945: LD_ADDR_EXP 107
65949: PUSH
65950: LD_INT 0
65952: ST_TO_ADDR
// sDLaser := false ;
65953: LD_ADDR_EXP 108
65957: PUSH
65958: LD_INT 0
65960: ST_TO_ADDR
// sExchange := false ;
65961: LD_ADDR_EXP 109
65965: PUSH
65966: LD_INT 0
65968: ST_TO_ADDR
// sFac := false ;
65969: LD_ADDR_EXP 110
65973: PUSH
65974: LD_INT 0
65976: ST_TO_ADDR
// sPower := false ;
65977: LD_ADDR_EXP 111
65981: PUSH
65982: LD_INT 0
65984: ST_TO_ADDR
// sRandom := false ;
65985: LD_ADDR_EXP 112
65989: PUSH
65990: LD_INT 0
65992: ST_TO_ADDR
// sShield := false ;
65993: LD_ADDR_EXP 113
65997: PUSH
65998: LD_INT 0
66000: ST_TO_ADDR
// sTime := false ;
66001: LD_ADDR_EXP 114
66005: PUSH
66006: LD_INT 0
66008: ST_TO_ADDR
// sTools := false ;
66009: LD_ADDR_EXP 115
66013: PUSH
66014: LD_INT 0
66016: ST_TO_ADDR
// sSold := false ;
66017: LD_ADDR_EXP 80
66021: PUSH
66022: LD_INT 0
66024: ST_TO_ADDR
// sDiff := false ;
66025: LD_ADDR_EXP 81
66029: PUSH
66030: LD_INT 0
66032: ST_TO_ADDR
// sFog := false ;
66033: LD_ADDR_EXP 84
66037: PUSH
66038: LD_INT 0
66040: ST_TO_ADDR
// sReset := false ;
66041: LD_ADDR_EXP 85
66045: PUSH
66046: LD_INT 0
66048: ST_TO_ADDR
// sSun := false ;
66049: LD_ADDR_EXP 86
66053: PUSH
66054: LD_INT 0
66056: ST_TO_ADDR
// sTiger := false ;
66057: LD_ADDR_EXP 82
66061: PUSH
66062: LD_INT 0
66064: ST_TO_ADDR
// sBomb := false ;
66065: LD_ADDR_EXP 83
66069: PUSH
66070: LD_INT 0
66072: ST_TO_ADDR
// sWound := false ;
66073: LD_ADDR_EXP 91
66077: PUSH
66078: LD_INT 0
66080: ST_TO_ADDR
// sBetray := false ;
66081: LD_ADDR_EXP 95
66085: PUSH
66086: LD_INT 0
66088: ST_TO_ADDR
// sContamin := false ;
66089: LD_ADDR_EXP 96
66093: PUSH
66094: LD_INT 0
66096: ST_TO_ADDR
// sOil := false ;
66097: LD_ADDR_EXP 98
66101: PUSH
66102: LD_INT 0
66104: ST_TO_ADDR
// sStu := false ;
66105: LD_ADDR_EXP 102
66109: PUSH
66110: LD_INT 0
66112: ST_TO_ADDR
// sBazooka := false ;
66113: LD_ADDR_EXP 105
66117: PUSH
66118: LD_INT 0
66120: ST_TO_ADDR
// sMortar := false ;
66121: LD_ADDR_EXP 106
66125: PUSH
66126: LD_INT 0
66128: ST_TO_ADDR
// sRanger := false ;
66129: LD_ADDR_EXP 116
66133: PUSH
66134: LD_INT 0
66136: ST_TO_ADDR
// sComputer := false ;
66137: LD_ADDR_EXP 117
66141: PUSH
66142: LD_INT 0
66144: ST_TO_ADDR
// s30 := false ;
66145: LD_ADDR_EXP 118
66149: PUSH
66150: LD_INT 0
66152: ST_TO_ADDR
// s60 := false ;
66153: LD_ADDR_EXP 119
66157: PUSH
66158: LD_INT 0
66160: ST_TO_ADDR
// end ;
66161: LD_VAR 0 1
66165: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
66166: LD_INT 0
66168: PPUSH
66169: PPUSH
66170: PPUSH
66171: PPUSH
66172: PPUSH
66173: PPUSH
66174: PPUSH
// result := [ ] ;
66175: LD_ADDR_VAR 0 2
66179: PUSH
66180: EMPTY
66181: ST_TO_ADDR
// if campaign_id = 1 then
66182: LD_OWVAR 69
66186: PUSH
66187: LD_INT 1
66189: EQUAL
66190: IFFALSE 69356
// begin case mission_number of 1 :
66192: LD_OWVAR 70
66196: PUSH
66197: LD_INT 1
66199: DOUBLE
66200: EQUAL
66201: IFTRUE 66205
66203: GO 66281
66205: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
66206: LD_ADDR_VAR 0 2
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: LD_INT 4
66216: PUSH
66217: LD_INT 11
66219: PUSH
66220: LD_INT 12
66222: PUSH
66223: LD_INT 15
66225: PUSH
66226: LD_INT 16
66228: PUSH
66229: LD_INT 22
66231: PUSH
66232: LD_INT 23
66234: PUSH
66235: LD_INT 26
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 101
66251: PUSH
66252: LD_INT 102
66254: PUSH
66255: LD_INT 106
66257: PUSH
66258: LD_INT 116
66260: PUSH
66261: LD_INT 117
66263: PUSH
66264: LD_INT 118
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: LIST
66273: LIST
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: ST_TO_ADDR
66279: GO 69354
66281: LD_INT 2
66283: DOUBLE
66284: EQUAL
66285: IFTRUE 66289
66287: GO 66373
66289: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
66290: LD_ADDR_VAR 0 2
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: LD_INT 4
66300: PUSH
66301: LD_INT 11
66303: PUSH
66304: LD_INT 12
66306: PUSH
66307: LD_INT 15
66309: PUSH
66310: LD_INT 16
66312: PUSH
66313: LD_INT 22
66315: PUSH
66316: LD_INT 23
66318: PUSH
66319: LD_INT 26
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 101
66335: PUSH
66336: LD_INT 102
66338: PUSH
66339: LD_INT 105
66341: PUSH
66342: LD_INT 106
66344: PUSH
66345: LD_INT 108
66347: PUSH
66348: LD_INT 116
66350: PUSH
66351: LD_INT 117
66353: PUSH
66354: LD_INT 118
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: ST_TO_ADDR
66371: GO 69354
66373: LD_INT 3
66375: DOUBLE
66376: EQUAL
66377: IFTRUE 66381
66379: GO 66469
66381: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
66382: LD_ADDR_VAR 0 2
66386: PUSH
66387: LD_INT 2
66389: PUSH
66390: LD_INT 4
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: LD_INT 11
66398: PUSH
66399: LD_INT 12
66401: PUSH
66402: LD_INT 15
66404: PUSH
66405: LD_INT 16
66407: PUSH
66408: LD_INT 22
66410: PUSH
66411: LD_INT 26
66413: PUSH
66414: LD_INT 36
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: LIST
66425: LIST
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 101
66431: PUSH
66432: LD_INT 102
66434: PUSH
66435: LD_INT 105
66437: PUSH
66438: LD_INT 106
66440: PUSH
66441: LD_INT 108
66443: PUSH
66444: LD_INT 116
66446: PUSH
66447: LD_INT 117
66449: PUSH
66450: LD_INT 118
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: ST_TO_ADDR
66467: GO 69354
66469: LD_INT 4
66471: DOUBLE
66472: EQUAL
66473: IFTRUE 66477
66475: GO 66573
66477: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
66478: LD_ADDR_VAR 0 2
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: LD_INT 5
66491: PUSH
66492: LD_INT 8
66494: PUSH
66495: LD_INT 11
66497: PUSH
66498: LD_INT 12
66500: PUSH
66501: LD_INT 15
66503: PUSH
66504: LD_INT 16
66506: PUSH
66507: LD_INT 22
66509: PUSH
66510: LD_INT 23
66512: PUSH
66513: LD_INT 26
66515: PUSH
66516: LD_INT 36
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 101
66535: PUSH
66536: LD_INT 102
66538: PUSH
66539: LD_INT 105
66541: PUSH
66542: LD_INT 106
66544: PUSH
66545: LD_INT 108
66547: PUSH
66548: LD_INT 116
66550: PUSH
66551: LD_INT 117
66553: PUSH
66554: LD_INT 118
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: ST_TO_ADDR
66571: GO 69354
66573: LD_INT 5
66575: DOUBLE
66576: EQUAL
66577: IFTRUE 66581
66579: GO 66693
66581: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
66582: LD_ADDR_VAR 0 2
66586: PUSH
66587: LD_INT 2
66589: PUSH
66590: LD_INT 4
66592: PUSH
66593: LD_INT 5
66595: PUSH
66596: LD_INT 6
66598: PUSH
66599: LD_INT 8
66601: PUSH
66602: LD_INT 11
66604: PUSH
66605: LD_INT 12
66607: PUSH
66608: LD_INT 15
66610: PUSH
66611: LD_INT 16
66613: PUSH
66614: LD_INT 22
66616: PUSH
66617: LD_INT 23
66619: PUSH
66620: LD_INT 25
66622: PUSH
66623: LD_INT 26
66625: PUSH
66626: LD_INT 36
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 101
66647: PUSH
66648: LD_INT 102
66650: PUSH
66651: LD_INT 105
66653: PUSH
66654: LD_INT 106
66656: PUSH
66657: LD_INT 108
66659: PUSH
66660: LD_INT 109
66662: PUSH
66663: LD_INT 112
66665: PUSH
66666: LD_INT 116
66668: PUSH
66669: LD_INT 117
66671: PUSH
66672: LD_INT 118
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: ST_TO_ADDR
66691: GO 69354
66693: LD_INT 6
66695: DOUBLE
66696: EQUAL
66697: IFTRUE 66701
66699: GO 66833
66701: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
66702: LD_ADDR_VAR 0 2
66706: PUSH
66707: LD_INT 2
66709: PUSH
66710: LD_INT 4
66712: PUSH
66713: LD_INT 5
66715: PUSH
66716: LD_INT 6
66718: PUSH
66719: LD_INT 8
66721: PUSH
66722: LD_INT 11
66724: PUSH
66725: LD_INT 12
66727: PUSH
66728: LD_INT 15
66730: PUSH
66731: LD_INT 16
66733: PUSH
66734: LD_INT 20
66736: PUSH
66737: LD_INT 21
66739: PUSH
66740: LD_INT 22
66742: PUSH
66743: LD_INT 23
66745: PUSH
66746: LD_INT 25
66748: PUSH
66749: LD_INT 26
66751: PUSH
66752: LD_INT 30
66754: PUSH
66755: LD_INT 31
66757: PUSH
66758: LD_INT 32
66760: PUSH
66761: LD_INT 36
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 101
66787: PUSH
66788: LD_INT 102
66790: PUSH
66791: LD_INT 105
66793: PUSH
66794: LD_INT 106
66796: PUSH
66797: LD_INT 108
66799: PUSH
66800: LD_INT 109
66802: PUSH
66803: LD_INT 112
66805: PUSH
66806: LD_INT 116
66808: PUSH
66809: LD_INT 117
66811: PUSH
66812: LD_INT 118
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: ST_TO_ADDR
66831: GO 69354
66833: LD_INT 7
66835: DOUBLE
66836: EQUAL
66837: IFTRUE 66841
66839: GO 66953
66841: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
66842: LD_ADDR_VAR 0 2
66846: PUSH
66847: LD_INT 2
66849: PUSH
66850: LD_INT 4
66852: PUSH
66853: LD_INT 5
66855: PUSH
66856: LD_INT 7
66858: PUSH
66859: LD_INT 11
66861: PUSH
66862: LD_INT 12
66864: PUSH
66865: LD_INT 15
66867: PUSH
66868: LD_INT 16
66870: PUSH
66871: LD_INT 20
66873: PUSH
66874: LD_INT 21
66876: PUSH
66877: LD_INT 22
66879: PUSH
66880: LD_INT 23
66882: PUSH
66883: LD_INT 25
66885: PUSH
66886: LD_INT 26
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 101
66907: PUSH
66908: LD_INT 102
66910: PUSH
66911: LD_INT 103
66913: PUSH
66914: LD_INT 105
66916: PUSH
66917: LD_INT 106
66919: PUSH
66920: LD_INT 108
66922: PUSH
66923: LD_INT 112
66925: PUSH
66926: LD_INT 116
66928: PUSH
66929: LD_INT 117
66931: PUSH
66932: LD_INT 118
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: ST_TO_ADDR
66951: GO 69354
66953: LD_INT 8
66955: DOUBLE
66956: EQUAL
66957: IFTRUE 66961
66959: GO 67101
66961: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
66962: LD_ADDR_VAR 0 2
66966: PUSH
66967: LD_INT 2
66969: PUSH
66970: LD_INT 4
66972: PUSH
66973: LD_INT 5
66975: PUSH
66976: LD_INT 6
66978: PUSH
66979: LD_INT 7
66981: PUSH
66982: LD_INT 8
66984: PUSH
66985: LD_INT 11
66987: PUSH
66988: LD_INT 12
66990: PUSH
66991: LD_INT 15
66993: PUSH
66994: LD_INT 16
66996: PUSH
66997: LD_INT 20
66999: PUSH
67000: LD_INT 21
67002: PUSH
67003: LD_INT 22
67005: PUSH
67006: LD_INT 23
67008: PUSH
67009: LD_INT 25
67011: PUSH
67012: LD_INT 26
67014: PUSH
67015: LD_INT 30
67017: PUSH
67018: LD_INT 31
67020: PUSH
67021: LD_INT 32
67023: PUSH
67024: LD_INT 36
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 101
67051: PUSH
67052: LD_INT 102
67054: PUSH
67055: LD_INT 103
67057: PUSH
67058: LD_INT 105
67060: PUSH
67061: LD_INT 106
67063: PUSH
67064: LD_INT 108
67066: PUSH
67067: LD_INT 109
67069: PUSH
67070: LD_INT 112
67072: PUSH
67073: LD_INT 116
67075: PUSH
67076: LD_INT 117
67078: PUSH
67079: LD_INT 118
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: ST_TO_ADDR
67099: GO 69354
67101: LD_INT 9
67103: DOUBLE
67104: EQUAL
67105: IFTRUE 67109
67107: GO 67257
67109: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
67110: LD_ADDR_VAR 0 2
67114: PUSH
67115: LD_INT 2
67117: PUSH
67118: LD_INT 4
67120: PUSH
67121: LD_INT 5
67123: PUSH
67124: LD_INT 6
67126: PUSH
67127: LD_INT 7
67129: PUSH
67130: LD_INT 8
67132: PUSH
67133: LD_INT 11
67135: PUSH
67136: LD_INT 12
67138: PUSH
67139: LD_INT 15
67141: PUSH
67142: LD_INT 16
67144: PUSH
67145: LD_INT 20
67147: PUSH
67148: LD_INT 21
67150: PUSH
67151: LD_INT 22
67153: PUSH
67154: LD_INT 23
67156: PUSH
67157: LD_INT 25
67159: PUSH
67160: LD_INT 26
67162: PUSH
67163: LD_INT 28
67165: PUSH
67166: LD_INT 30
67168: PUSH
67169: LD_INT 31
67171: PUSH
67172: LD_INT 32
67174: PUSH
67175: LD_INT 36
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: LIST
67187: LIST
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 101
67203: PUSH
67204: LD_INT 102
67206: PUSH
67207: LD_INT 103
67209: PUSH
67210: LD_INT 105
67212: PUSH
67213: LD_INT 106
67215: PUSH
67216: LD_INT 108
67218: PUSH
67219: LD_INT 109
67221: PUSH
67222: LD_INT 112
67224: PUSH
67225: LD_INT 114
67227: PUSH
67228: LD_INT 116
67230: PUSH
67231: LD_INT 117
67233: PUSH
67234: LD_INT 118
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: ST_TO_ADDR
67255: GO 69354
67257: LD_INT 10
67259: DOUBLE
67260: EQUAL
67261: IFTRUE 67265
67263: GO 67461
67265: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
67266: LD_ADDR_VAR 0 2
67270: PUSH
67271: LD_INT 2
67273: PUSH
67274: LD_INT 4
67276: PUSH
67277: LD_INT 5
67279: PUSH
67280: LD_INT 6
67282: PUSH
67283: LD_INT 7
67285: PUSH
67286: LD_INT 8
67288: PUSH
67289: LD_INT 9
67291: PUSH
67292: LD_INT 10
67294: PUSH
67295: LD_INT 11
67297: PUSH
67298: LD_INT 12
67300: PUSH
67301: LD_INT 13
67303: PUSH
67304: LD_INT 14
67306: PUSH
67307: LD_INT 15
67309: PUSH
67310: LD_INT 16
67312: PUSH
67313: LD_INT 17
67315: PUSH
67316: LD_INT 18
67318: PUSH
67319: LD_INT 19
67321: PUSH
67322: LD_INT 20
67324: PUSH
67325: LD_INT 21
67327: PUSH
67328: LD_INT 22
67330: PUSH
67331: LD_INT 23
67333: PUSH
67334: LD_INT 24
67336: PUSH
67337: LD_INT 25
67339: PUSH
67340: LD_INT 26
67342: PUSH
67343: LD_INT 28
67345: PUSH
67346: LD_INT 30
67348: PUSH
67349: LD_INT 31
67351: PUSH
67352: LD_INT 32
67354: PUSH
67355: LD_INT 36
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: LIST
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 101
67391: PUSH
67392: LD_INT 102
67394: PUSH
67395: LD_INT 103
67397: PUSH
67398: LD_INT 104
67400: PUSH
67401: LD_INT 105
67403: PUSH
67404: LD_INT 106
67406: PUSH
67407: LD_INT 107
67409: PUSH
67410: LD_INT 108
67412: PUSH
67413: LD_INT 109
67415: PUSH
67416: LD_INT 110
67418: PUSH
67419: LD_INT 111
67421: PUSH
67422: LD_INT 112
67424: PUSH
67425: LD_INT 114
67427: PUSH
67428: LD_INT 116
67430: PUSH
67431: LD_INT 117
67433: PUSH
67434: LD_INT 118
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: ST_TO_ADDR
67459: GO 69354
67461: LD_INT 11
67463: DOUBLE
67464: EQUAL
67465: IFTRUE 67469
67467: GO 67673
67469: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
67470: LD_ADDR_VAR 0 2
67474: PUSH
67475: LD_INT 2
67477: PUSH
67478: LD_INT 3
67480: PUSH
67481: LD_INT 4
67483: PUSH
67484: LD_INT 5
67486: PUSH
67487: LD_INT 6
67489: PUSH
67490: LD_INT 7
67492: PUSH
67493: LD_INT 8
67495: PUSH
67496: LD_INT 9
67498: PUSH
67499: LD_INT 10
67501: PUSH
67502: LD_INT 11
67504: PUSH
67505: LD_INT 12
67507: PUSH
67508: LD_INT 13
67510: PUSH
67511: LD_INT 14
67513: PUSH
67514: LD_INT 15
67516: PUSH
67517: LD_INT 16
67519: PUSH
67520: LD_INT 17
67522: PUSH
67523: LD_INT 18
67525: PUSH
67526: LD_INT 19
67528: PUSH
67529: LD_INT 20
67531: PUSH
67532: LD_INT 21
67534: PUSH
67535: LD_INT 22
67537: PUSH
67538: LD_INT 23
67540: PUSH
67541: LD_INT 24
67543: PUSH
67544: LD_INT 25
67546: PUSH
67547: LD_INT 26
67549: PUSH
67550: LD_INT 28
67552: PUSH
67553: LD_INT 30
67555: PUSH
67556: LD_INT 31
67558: PUSH
67559: LD_INT 32
67561: PUSH
67562: LD_INT 34
67564: PUSH
67565: LD_INT 36
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: LIST
67578: LIST
67579: LIST
67580: LIST
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 101
67603: PUSH
67604: LD_INT 102
67606: PUSH
67607: LD_INT 103
67609: PUSH
67610: LD_INT 104
67612: PUSH
67613: LD_INT 105
67615: PUSH
67616: LD_INT 106
67618: PUSH
67619: LD_INT 107
67621: PUSH
67622: LD_INT 108
67624: PUSH
67625: LD_INT 109
67627: PUSH
67628: LD_INT 110
67630: PUSH
67631: LD_INT 111
67633: PUSH
67634: LD_INT 112
67636: PUSH
67637: LD_INT 114
67639: PUSH
67640: LD_INT 116
67642: PUSH
67643: LD_INT 117
67645: PUSH
67646: LD_INT 118
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: LIST
67657: LIST
67658: LIST
67659: LIST
67660: LIST
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: PUSH
67667: EMPTY
67668: LIST
67669: LIST
67670: ST_TO_ADDR
67671: GO 69354
67673: LD_INT 12
67675: DOUBLE
67676: EQUAL
67677: IFTRUE 67681
67679: GO 67901
67681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
67682: LD_ADDR_VAR 0 2
67686: PUSH
67687: LD_INT 1
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: LD_INT 3
67695: PUSH
67696: LD_INT 4
67698: PUSH
67699: LD_INT 5
67701: PUSH
67702: LD_INT 6
67704: PUSH
67705: LD_INT 7
67707: PUSH
67708: LD_INT 8
67710: PUSH
67711: LD_INT 9
67713: PUSH
67714: LD_INT 10
67716: PUSH
67717: LD_INT 11
67719: PUSH
67720: LD_INT 12
67722: PUSH
67723: LD_INT 13
67725: PUSH
67726: LD_INT 14
67728: PUSH
67729: LD_INT 15
67731: PUSH
67732: LD_INT 16
67734: PUSH
67735: LD_INT 17
67737: PUSH
67738: LD_INT 18
67740: PUSH
67741: LD_INT 19
67743: PUSH
67744: LD_INT 20
67746: PUSH
67747: LD_INT 21
67749: PUSH
67750: LD_INT 22
67752: PUSH
67753: LD_INT 23
67755: PUSH
67756: LD_INT 24
67758: PUSH
67759: LD_INT 25
67761: PUSH
67762: LD_INT 26
67764: PUSH
67765: LD_INT 27
67767: PUSH
67768: LD_INT 28
67770: PUSH
67771: LD_INT 30
67773: PUSH
67774: LD_INT 31
67776: PUSH
67777: LD_INT 32
67779: PUSH
67780: LD_INT 33
67782: PUSH
67783: LD_INT 34
67785: PUSH
67786: LD_INT 36
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 101
67827: PUSH
67828: LD_INT 102
67830: PUSH
67831: LD_INT 103
67833: PUSH
67834: LD_INT 104
67836: PUSH
67837: LD_INT 105
67839: PUSH
67840: LD_INT 106
67842: PUSH
67843: LD_INT 107
67845: PUSH
67846: LD_INT 108
67848: PUSH
67849: LD_INT 109
67851: PUSH
67852: LD_INT 110
67854: PUSH
67855: LD_INT 111
67857: PUSH
67858: LD_INT 112
67860: PUSH
67861: LD_INT 113
67863: PUSH
67864: LD_INT 114
67866: PUSH
67867: LD_INT 116
67869: PUSH
67870: LD_INT 117
67872: PUSH
67873: LD_INT 118
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: ST_TO_ADDR
67899: GO 69354
67901: LD_INT 13
67903: DOUBLE
67904: EQUAL
67905: IFTRUE 67909
67907: GO 68117
67909: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
67910: LD_ADDR_VAR 0 2
67914: PUSH
67915: LD_INT 1
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 3
67923: PUSH
67924: LD_INT 4
67926: PUSH
67927: LD_INT 5
67929: PUSH
67930: LD_INT 8
67932: PUSH
67933: LD_INT 9
67935: PUSH
67936: LD_INT 10
67938: PUSH
67939: LD_INT 11
67941: PUSH
67942: LD_INT 12
67944: PUSH
67945: LD_INT 14
67947: PUSH
67948: LD_INT 15
67950: PUSH
67951: LD_INT 16
67953: PUSH
67954: LD_INT 17
67956: PUSH
67957: LD_INT 18
67959: PUSH
67960: LD_INT 19
67962: PUSH
67963: LD_INT 20
67965: PUSH
67966: LD_INT 21
67968: PUSH
67969: LD_INT 22
67971: PUSH
67972: LD_INT 23
67974: PUSH
67975: LD_INT 24
67977: PUSH
67978: LD_INT 25
67980: PUSH
67981: LD_INT 26
67983: PUSH
67984: LD_INT 27
67986: PUSH
67987: LD_INT 28
67989: PUSH
67990: LD_INT 30
67992: PUSH
67993: LD_INT 31
67995: PUSH
67996: LD_INT 32
67998: PUSH
67999: LD_INT 33
68001: PUSH
68002: LD_INT 34
68004: PUSH
68005: LD_INT 36
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 101
68043: PUSH
68044: LD_INT 102
68046: PUSH
68047: LD_INT 103
68049: PUSH
68050: LD_INT 104
68052: PUSH
68053: LD_INT 105
68055: PUSH
68056: LD_INT 106
68058: PUSH
68059: LD_INT 107
68061: PUSH
68062: LD_INT 108
68064: PUSH
68065: LD_INT 109
68067: PUSH
68068: LD_INT 110
68070: PUSH
68071: LD_INT 111
68073: PUSH
68074: LD_INT 112
68076: PUSH
68077: LD_INT 113
68079: PUSH
68080: LD_INT 114
68082: PUSH
68083: LD_INT 116
68085: PUSH
68086: LD_INT 117
68088: PUSH
68089: LD_INT 118
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: ST_TO_ADDR
68115: GO 69354
68117: LD_INT 14
68119: DOUBLE
68120: EQUAL
68121: IFTRUE 68125
68123: GO 68349
68125: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
68126: LD_ADDR_VAR 0 2
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: LD_INT 2
68136: PUSH
68137: LD_INT 3
68139: PUSH
68140: LD_INT 4
68142: PUSH
68143: LD_INT 5
68145: PUSH
68146: LD_INT 6
68148: PUSH
68149: LD_INT 7
68151: PUSH
68152: LD_INT 8
68154: PUSH
68155: LD_INT 9
68157: PUSH
68158: LD_INT 10
68160: PUSH
68161: LD_INT 11
68163: PUSH
68164: LD_INT 12
68166: PUSH
68167: LD_INT 13
68169: PUSH
68170: LD_INT 14
68172: PUSH
68173: LD_INT 15
68175: PUSH
68176: LD_INT 16
68178: PUSH
68179: LD_INT 17
68181: PUSH
68182: LD_INT 18
68184: PUSH
68185: LD_INT 19
68187: PUSH
68188: LD_INT 20
68190: PUSH
68191: LD_INT 21
68193: PUSH
68194: LD_INT 22
68196: PUSH
68197: LD_INT 23
68199: PUSH
68200: LD_INT 24
68202: PUSH
68203: LD_INT 25
68205: PUSH
68206: LD_INT 26
68208: PUSH
68209: LD_INT 27
68211: PUSH
68212: LD_INT 28
68214: PUSH
68215: LD_INT 29
68217: PUSH
68218: LD_INT 30
68220: PUSH
68221: LD_INT 31
68223: PUSH
68224: LD_INT 32
68226: PUSH
68227: LD_INT 33
68229: PUSH
68230: LD_INT 34
68232: PUSH
68233: LD_INT 36
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 101
68275: PUSH
68276: LD_INT 102
68278: PUSH
68279: LD_INT 103
68281: PUSH
68282: LD_INT 104
68284: PUSH
68285: LD_INT 105
68287: PUSH
68288: LD_INT 106
68290: PUSH
68291: LD_INT 107
68293: PUSH
68294: LD_INT 108
68296: PUSH
68297: LD_INT 109
68299: PUSH
68300: LD_INT 110
68302: PUSH
68303: LD_INT 111
68305: PUSH
68306: LD_INT 112
68308: PUSH
68309: LD_INT 113
68311: PUSH
68312: LD_INT 114
68314: PUSH
68315: LD_INT 116
68317: PUSH
68318: LD_INT 117
68320: PUSH
68321: LD_INT 118
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: ST_TO_ADDR
68347: GO 69354
68349: LD_INT 15
68351: DOUBLE
68352: EQUAL
68353: IFTRUE 68357
68355: GO 68581
68357: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
68358: LD_ADDR_VAR 0 2
68362: PUSH
68363: LD_INT 1
68365: PUSH
68366: LD_INT 2
68368: PUSH
68369: LD_INT 3
68371: PUSH
68372: LD_INT 4
68374: PUSH
68375: LD_INT 5
68377: PUSH
68378: LD_INT 6
68380: PUSH
68381: LD_INT 7
68383: PUSH
68384: LD_INT 8
68386: PUSH
68387: LD_INT 9
68389: PUSH
68390: LD_INT 10
68392: PUSH
68393: LD_INT 11
68395: PUSH
68396: LD_INT 12
68398: PUSH
68399: LD_INT 13
68401: PUSH
68402: LD_INT 14
68404: PUSH
68405: LD_INT 15
68407: PUSH
68408: LD_INT 16
68410: PUSH
68411: LD_INT 17
68413: PUSH
68414: LD_INT 18
68416: PUSH
68417: LD_INT 19
68419: PUSH
68420: LD_INT 20
68422: PUSH
68423: LD_INT 21
68425: PUSH
68426: LD_INT 22
68428: PUSH
68429: LD_INT 23
68431: PUSH
68432: LD_INT 24
68434: PUSH
68435: LD_INT 25
68437: PUSH
68438: LD_INT 26
68440: PUSH
68441: LD_INT 27
68443: PUSH
68444: LD_INT 28
68446: PUSH
68447: LD_INT 29
68449: PUSH
68450: LD_INT 30
68452: PUSH
68453: LD_INT 31
68455: PUSH
68456: LD_INT 32
68458: PUSH
68459: LD_INT 33
68461: PUSH
68462: LD_INT 34
68464: PUSH
68465: LD_INT 36
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: LIST
68485: LIST
68486: LIST
68487: LIST
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: LIST
68494: LIST
68495: LIST
68496: LIST
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: PUSH
68505: LD_INT 101
68507: PUSH
68508: LD_INT 102
68510: PUSH
68511: LD_INT 103
68513: PUSH
68514: LD_INT 104
68516: PUSH
68517: LD_INT 105
68519: PUSH
68520: LD_INT 106
68522: PUSH
68523: LD_INT 107
68525: PUSH
68526: LD_INT 108
68528: PUSH
68529: LD_INT 109
68531: PUSH
68532: LD_INT 110
68534: PUSH
68535: LD_INT 111
68537: PUSH
68538: LD_INT 112
68540: PUSH
68541: LD_INT 113
68543: PUSH
68544: LD_INT 114
68546: PUSH
68547: LD_INT 116
68549: PUSH
68550: LD_INT 117
68552: PUSH
68553: LD_INT 118
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: ST_TO_ADDR
68579: GO 69354
68581: LD_INT 16
68583: DOUBLE
68584: EQUAL
68585: IFTRUE 68589
68587: GO 68725
68589: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
68590: LD_ADDR_VAR 0 2
68594: PUSH
68595: LD_INT 2
68597: PUSH
68598: LD_INT 4
68600: PUSH
68601: LD_INT 5
68603: PUSH
68604: LD_INT 7
68606: PUSH
68607: LD_INT 11
68609: PUSH
68610: LD_INT 12
68612: PUSH
68613: LD_INT 15
68615: PUSH
68616: LD_INT 16
68618: PUSH
68619: LD_INT 20
68621: PUSH
68622: LD_INT 21
68624: PUSH
68625: LD_INT 22
68627: PUSH
68628: LD_INT 23
68630: PUSH
68631: LD_INT 25
68633: PUSH
68634: LD_INT 26
68636: PUSH
68637: LD_INT 30
68639: PUSH
68640: LD_INT 31
68642: PUSH
68643: LD_INT 32
68645: PUSH
68646: LD_INT 33
68648: PUSH
68649: LD_INT 34
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 101
68675: PUSH
68676: LD_INT 102
68678: PUSH
68679: LD_INT 103
68681: PUSH
68682: LD_INT 106
68684: PUSH
68685: LD_INT 108
68687: PUSH
68688: LD_INT 112
68690: PUSH
68691: LD_INT 113
68693: PUSH
68694: LD_INT 114
68696: PUSH
68697: LD_INT 116
68699: PUSH
68700: LD_INT 117
68702: PUSH
68703: LD_INT 118
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: ST_TO_ADDR
68723: GO 69354
68725: LD_INT 17
68727: DOUBLE
68728: EQUAL
68729: IFTRUE 68733
68731: GO 68957
68733: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
68734: LD_ADDR_VAR 0 2
68738: PUSH
68739: LD_INT 1
68741: PUSH
68742: LD_INT 2
68744: PUSH
68745: LD_INT 3
68747: PUSH
68748: LD_INT 4
68750: PUSH
68751: LD_INT 5
68753: PUSH
68754: LD_INT 6
68756: PUSH
68757: LD_INT 7
68759: PUSH
68760: LD_INT 8
68762: PUSH
68763: LD_INT 9
68765: PUSH
68766: LD_INT 10
68768: PUSH
68769: LD_INT 11
68771: PUSH
68772: LD_INT 12
68774: PUSH
68775: LD_INT 13
68777: PUSH
68778: LD_INT 14
68780: PUSH
68781: LD_INT 15
68783: PUSH
68784: LD_INT 16
68786: PUSH
68787: LD_INT 17
68789: PUSH
68790: LD_INT 18
68792: PUSH
68793: LD_INT 19
68795: PUSH
68796: LD_INT 20
68798: PUSH
68799: LD_INT 21
68801: PUSH
68802: LD_INT 22
68804: PUSH
68805: LD_INT 23
68807: PUSH
68808: LD_INT 24
68810: PUSH
68811: LD_INT 25
68813: PUSH
68814: LD_INT 26
68816: PUSH
68817: LD_INT 27
68819: PUSH
68820: LD_INT 28
68822: PUSH
68823: LD_INT 29
68825: PUSH
68826: LD_INT 30
68828: PUSH
68829: LD_INT 31
68831: PUSH
68832: LD_INT 32
68834: PUSH
68835: LD_INT 33
68837: PUSH
68838: LD_INT 34
68840: PUSH
68841: LD_INT 36
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: LIST
68854: LIST
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 101
68883: PUSH
68884: LD_INT 102
68886: PUSH
68887: LD_INT 103
68889: PUSH
68890: LD_INT 104
68892: PUSH
68893: LD_INT 105
68895: PUSH
68896: LD_INT 106
68898: PUSH
68899: LD_INT 107
68901: PUSH
68902: LD_INT 108
68904: PUSH
68905: LD_INT 109
68907: PUSH
68908: LD_INT 110
68910: PUSH
68911: LD_INT 111
68913: PUSH
68914: LD_INT 112
68916: PUSH
68917: LD_INT 113
68919: PUSH
68920: LD_INT 114
68922: PUSH
68923: LD_INT 116
68925: PUSH
68926: LD_INT 117
68928: PUSH
68929: LD_INT 118
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: LIST
68946: LIST
68947: LIST
68948: LIST
68949: LIST
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: ST_TO_ADDR
68955: GO 69354
68957: LD_INT 18
68959: DOUBLE
68960: EQUAL
68961: IFTRUE 68965
68963: GO 69113
68965: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
68966: LD_ADDR_VAR 0 2
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: LD_INT 4
68976: PUSH
68977: LD_INT 5
68979: PUSH
68980: LD_INT 7
68982: PUSH
68983: LD_INT 11
68985: PUSH
68986: LD_INT 12
68988: PUSH
68989: LD_INT 15
68991: PUSH
68992: LD_INT 16
68994: PUSH
68995: LD_INT 20
68997: PUSH
68998: LD_INT 21
69000: PUSH
69001: LD_INT 22
69003: PUSH
69004: LD_INT 23
69006: PUSH
69007: LD_INT 25
69009: PUSH
69010: LD_INT 26
69012: PUSH
69013: LD_INT 30
69015: PUSH
69016: LD_INT 31
69018: PUSH
69019: LD_INT 32
69021: PUSH
69022: LD_INT 33
69024: PUSH
69025: LD_INT 34
69027: PUSH
69028: LD_INT 35
69030: PUSH
69031: LD_INT 36
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: LIST
69046: LIST
69047: LIST
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: PUSH
69057: LD_INT 101
69059: PUSH
69060: LD_INT 102
69062: PUSH
69063: LD_INT 103
69065: PUSH
69066: LD_INT 106
69068: PUSH
69069: LD_INT 108
69071: PUSH
69072: LD_INT 112
69074: PUSH
69075: LD_INT 113
69077: PUSH
69078: LD_INT 114
69080: PUSH
69081: LD_INT 115
69083: PUSH
69084: LD_INT 116
69086: PUSH
69087: LD_INT 117
69089: PUSH
69090: LD_INT 118
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: ST_TO_ADDR
69111: GO 69354
69113: LD_INT 19
69115: DOUBLE
69116: EQUAL
69117: IFTRUE 69121
69119: GO 69353
69121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
69122: LD_ADDR_VAR 0 2
69126: PUSH
69127: LD_INT 1
69129: PUSH
69130: LD_INT 2
69132: PUSH
69133: LD_INT 3
69135: PUSH
69136: LD_INT 4
69138: PUSH
69139: LD_INT 5
69141: PUSH
69142: LD_INT 6
69144: PUSH
69145: LD_INT 7
69147: PUSH
69148: LD_INT 8
69150: PUSH
69151: LD_INT 9
69153: PUSH
69154: LD_INT 10
69156: PUSH
69157: LD_INT 11
69159: PUSH
69160: LD_INT 12
69162: PUSH
69163: LD_INT 13
69165: PUSH
69166: LD_INT 14
69168: PUSH
69169: LD_INT 15
69171: PUSH
69172: LD_INT 16
69174: PUSH
69175: LD_INT 17
69177: PUSH
69178: LD_INT 18
69180: PUSH
69181: LD_INT 19
69183: PUSH
69184: LD_INT 20
69186: PUSH
69187: LD_INT 21
69189: PUSH
69190: LD_INT 22
69192: PUSH
69193: LD_INT 23
69195: PUSH
69196: LD_INT 24
69198: PUSH
69199: LD_INT 25
69201: PUSH
69202: LD_INT 26
69204: PUSH
69205: LD_INT 27
69207: PUSH
69208: LD_INT 28
69210: PUSH
69211: LD_INT 29
69213: PUSH
69214: LD_INT 30
69216: PUSH
69217: LD_INT 31
69219: PUSH
69220: LD_INT 32
69222: PUSH
69223: LD_INT 33
69225: PUSH
69226: LD_INT 34
69228: PUSH
69229: LD_INT 35
69231: PUSH
69232: LD_INT 36
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: LIST
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 101
69275: PUSH
69276: LD_INT 102
69278: PUSH
69279: LD_INT 103
69281: PUSH
69282: LD_INT 104
69284: PUSH
69285: LD_INT 105
69287: PUSH
69288: LD_INT 106
69290: PUSH
69291: LD_INT 107
69293: PUSH
69294: LD_INT 108
69296: PUSH
69297: LD_INT 109
69299: PUSH
69300: LD_INT 110
69302: PUSH
69303: LD_INT 111
69305: PUSH
69306: LD_INT 112
69308: PUSH
69309: LD_INT 113
69311: PUSH
69312: LD_INT 114
69314: PUSH
69315: LD_INT 115
69317: PUSH
69318: LD_INT 116
69320: PUSH
69321: LD_INT 117
69323: PUSH
69324: LD_INT 118
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: ST_TO_ADDR
69351: GO 69354
69353: POP
// end else
69354: GO 69585
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
69356: LD_ADDR_VAR 0 2
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: LD_INT 2
69366: PUSH
69367: LD_INT 3
69369: PUSH
69370: LD_INT 4
69372: PUSH
69373: LD_INT 5
69375: PUSH
69376: LD_INT 6
69378: PUSH
69379: LD_INT 7
69381: PUSH
69382: LD_INT 8
69384: PUSH
69385: LD_INT 9
69387: PUSH
69388: LD_INT 10
69390: PUSH
69391: LD_INT 11
69393: PUSH
69394: LD_INT 12
69396: PUSH
69397: LD_INT 13
69399: PUSH
69400: LD_INT 14
69402: PUSH
69403: LD_INT 15
69405: PUSH
69406: LD_INT 16
69408: PUSH
69409: LD_INT 17
69411: PUSH
69412: LD_INT 18
69414: PUSH
69415: LD_INT 19
69417: PUSH
69418: LD_INT 20
69420: PUSH
69421: LD_INT 21
69423: PUSH
69424: LD_INT 22
69426: PUSH
69427: LD_INT 23
69429: PUSH
69430: LD_INT 24
69432: PUSH
69433: LD_INT 25
69435: PUSH
69436: LD_INT 26
69438: PUSH
69439: LD_INT 27
69441: PUSH
69442: LD_INT 28
69444: PUSH
69445: LD_INT 29
69447: PUSH
69448: LD_INT 30
69450: PUSH
69451: LD_INT 31
69453: PUSH
69454: LD_INT 32
69456: PUSH
69457: LD_INT 33
69459: PUSH
69460: LD_INT 34
69462: PUSH
69463: LD_INT 35
69465: PUSH
69466: LD_INT 36
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: LIST
69498: LIST
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 101
69509: PUSH
69510: LD_INT 102
69512: PUSH
69513: LD_INT 103
69515: PUSH
69516: LD_INT 104
69518: PUSH
69519: LD_INT 105
69521: PUSH
69522: LD_INT 106
69524: PUSH
69525: LD_INT 107
69527: PUSH
69528: LD_INT 108
69530: PUSH
69531: LD_INT 109
69533: PUSH
69534: LD_INT 110
69536: PUSH
69537: LD_INT 111
69539: PUSH
69540: LD_INT 112
69542: PUSH
69543: LD_INT 113
69545: PUSH
69546: LD_INT 114
69548: PUSH
69549: LD_INT 115
69551: PUSH
69552: LD_INT 116
69554: PUSH
69555: LD_INT 117
69557: PUSH
69558: LD_INT 118
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: ST_TO_ADDR
// if result then
69585: LD_VAR 0 2
69589: IFFALSE 70375
// begin normal :=  ;
69591: LD_ADDR_VAR 0 5
69595: PUSH
69596: LD_STRING 
69598: ST_TO_ADDR
// hardcore :=  ;
69599: LD_ADDR_VAR 0 6
69603: PUSH
69604: LD_STRING 
69606: ST_TO_ADDR
// active :=  ;
69607: LD_ADDR_VAR 0 7
69611: PUSH
69612: LD_STRING 
69614: ST_TO_ADDR
// for i = 1 to normalCounter do
69615: LD_ADDR_VAR 0 8
69619: PUSH
69620: DOUBLE
69621: LD_INT 1
69623: DEC
69624: ST_TO_ADDR
69625: LD_EXP 64
69629: PUSH
69630: FOR_TO
69631: IFFALSE 69732
// begin tmp := 0 ;
69633: LD_ADDR_VAR 0 3
69637: PUSH
69638: LD_STRING 0
69640: ST_TO_ADDR
// if result [ 1 ] then
69641: LD_VAR 0 2
69645: PUSH
69646: LD_INT 1
69648: ARRAY
69649: IFFALSE 69714
// if result [ 1 ] [ 1 ] = i then
69651: LD_VAR 0 2
69655: PUSH
69656: LD_INT 1
69658: ARRAY
69659: PUSH
69660: LD_INT 1
69662: ARRAY
69663: PUSH
69664: LD_VAR 0 8
69668: EQUAL
69669: IFFALSE 69714
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
69671: LD_ADDR_VAR 0 2
69675: PUSH
69676: LD_VAR 0 2
69680: PPUSH
69681: LD_INT 1
69683: PPUSH
69684: LD_VAR 0 2
69688: PUSH
69689: LD_INT 1
69691: ARRAY
69692: PPUSH
69693: LD_INT 1
69695: PPUSH
69696: CALL_OW 3
69700: PPUSH
69701: CALL_OW 1
69705: ST_TO_ADDR
// tmp := 1 ;
69706: LD_ADDR_VAR 0 3
69710: PUSH
69711: LD_STRING 1
69713: ST_TO_ADDR
// end ; normal := normal & tmp ;
69714: LD_ADDR_VAR 0 5
69718: PUSH
69719: LD_VAR 0 5
69723: PUSH
69724: LD_VAR 0 3
69728: STR
69729: ST_TO_ADDR
// end ;
69730: GO 69630
69732: POP
69733: POP
// for i = 1 to hardcoreCounter do
69734: LD_ADDR_VAR 0 8
69738: PUSH
69739: DOUBLE
69740: LD_INT 1
69742: DEC
69743: ST_TO_ADDR
69744: LD_EXP 65
69748: PUSH
69749: FOR_TO
69750: IFFALSE 69855
// begin tmp := 0 ;
69752: LD_ADDR_VAR 0 3
69756: PUSH
69757: LD_STRING 0
69759: ST_TO_ADDR
// if result [ 2 ] then
69760: LD_VAR 0 2
69764: PUSH
69765: LD_INT 2
69767: ARRAY
69768: IFFALSE 69837
// if result [ 2 ] [ 1 ] = 100 + i then
69770: LD_VAR 0 2
69774: PUSH
69775: LD_INT 2
69777: ARRAY
69778: PUSH
69779: LD_INT 1
69781: ARRAY
69782: PUSH
69783: LD_INT 100
69785: PUSH
69786: LD_VAR 0 8
69790: PLUS
69791: EQUAL
69792: IFFALSE 69837
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
69794: LD_ADDR_VAR 0 2
69798: PUSH
69799: LD_VAR 0 2
69803: PPUSH
69804: LD_INT 2
69806: PPUSH
69807: LD_VAR 0 2
69811: PUSH
69812: LD_INT 2
69814: ARRAY
69815: PPUSH
69816: LD_INT 1
69818: PPUSH
69819: CALL_OW 3
69823: PPUSH
69824: CALL_OW 1
69828: ST_TO_ADDR
// tmp := 1 ;
69829: LD_ADDR_VAR 0 3
69833: PUSH
69834: LD_STRING 1
69836: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
69837: LD_ADDR_VAR 0 6
69841: PUSH
69842: LD_VAR 0 6
69846: PUSH
69847: LD_VAR 0 3
69851: STR
69852: ST_TO_ADDR
// end ;
69853: GO 69749
69855: POP
69856: POP
// if isGameLoad then
69857: LD_VAR 0 1
69861: IFFALSE 70336
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
69863: LD_ADDR_VAR 0 4
69867: PUSH
69868: LD_EXP 68
69872: PUSH
69873: LD_EXP 67
69877: PUSH
69878: LD_EXP 69
69882: PUSH
69883: LD_EXP 66
69887: PUSH
69888: LD_EXP 70
69892: PUSH
69893: LD_EXP 71
69897: PUSH
69898: LD_EXP 72
69902: PUSH
69903: LD_EXP 73
69907: PUSH
69908: LD_EXP 74
69912: PUSH
69913: LD_EXP 75
69917: PUSH
69918: LD_EXP 76
69922: PUSH
69923: LD_EXP 77
69927: PUSH
69928: LD_EXP 78
69932: PUSH
69933: LD_EXP 79
69937: PUSH
69938: LD_EXP 87
69942: PUSH
69943: LD_EXP 88
69947: PUSH
69948: LD_EXP 89
69952: PUSH
69953: LD_EXP 90
69957: PUSH
69958: LD_EXP 92
69962: PUSH
69963: LD_EXP 93
69967: PUSH
69968: LD_EXP 94
69972: PUSH
69973: LD_EXP 97
69977: PUSH
69978: LD_EXP 99
69982: PUSH
69983: LD_EXP 100
69987: PUSH
69988: LD_EXP 101
69992: PUSH
69993: LD_EXP 103
69997: PUSH
69998: LD_EXP 104
70002: PUSH
70003: LD_EXP 107
70007: PUSH
70008: LD_EXP 108
70012: PUSH
70013: LD_EXP 109
70017: PUSH
70018: LD_EXP 110
70022: PUSH
70023: LD_EXP 111
70027: PUSH
70028: LD_EXP 112
70032: PUSH
70033: LD_EXP 113
70037: PUSH
70038: LD_EXP 114
70042: PUSH
70043: LD_EXP 115
70047: PUSH
70048: LD_EXP 80
70052: PUSH
70053: LD_EXP 81
70057: PUSH
70058: LD_EXP 84
70062: PUSH
70063: LD_EXP 85
70067: PUSH
70068: LD_EXP 86
70072: PUSH
70073: LD_EXP 82
70077: PUSH
70078: LD_EXP 83
70082: PUSH
70083: LD_EXP 91
70087: PUSH
70088: LD_EXP 95
70092: PUSH
70093: LD_EXP 96
70097: PUSH
70098: LD_EXP 98
70102: PUSH
70103: LD_EXP 102
70107: PUSH
70108: LD_EXP 105
70112: PUSH
70113: LD_EXP 106
70117: PUSH
70118: LD_EXP 116
70122: PUSH
70123: LD_EXP 117
70127: PUSH
70128: LD_EXP 118
70132: PUSH
70133: LD_EXP 119
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: LIST
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: LIST
70165: LIST
70166: LIST
70167: LIST
70168: LIST
70169: LIST
70170: LIST
70171: LIST
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: ST_TO_ADDR
// tmp :=  ;
70194: LD_ADDR_VAR 0 3
70198: PUSH
70199: LD_STRING 
70201: ST_TO_ADDR
// for i = 1 to normalCounter do
70202: LD_ADDR_VAR 0 8
70206: PUSH
70207: DOUBLE
70208: LD_INT 1
70210: DEC
70211: ST_TO_ADDR
70212: LD_EXP 64
70216: PUSH
70217: FOR_TO
70218: IFFALSE 70254
// begin if flags [ i ] then
70220: LD_VAR 0 4
70224: PUSH
70225: LD_VAR 0 8
70229: ARRAY
70230: IFFALSE 70252
// tmp := tmp & i & ; ;
70232: LD_ADDR_VAR 0 3
70236: PUSH
70237: LD_VAR 0 3
70241: PUSH
70242: LD_VAR 0 8
70246: STR
70247: PUSH
70248: LD_STRING ;
70250: STR
70251: ST_TO_ADDR
// end ;
70252: GO 70217
70254: POP
70255: POP
// for i = 1 to hardcoreCounter do
70256: LD_ADDR_VAR 0 8
70260: PUSH
70261: DOUBLE
70262: LD_INT 1
70264: DEC
70265: ST_TO_ADDR
70266: LD_EXP 65
70270: PUSH
70271: FOR_TO
70272: IFFALSE 70318
// begin if flags [ normalCounter + i ] then
70274: LD_VAR 0 4
70278: PUSH
70279: LD_EXP 64
70283: PUSH
70284: LD_VAR 0 8
70288: PLUS
70289: ARRAY
70290: IFFALSE 70316
// tmp := tmp & ( 100 + i ) & ; ;
70292: LD_ADDR_VAR 0 3
70296: PUSH
70297: LD_VAR 0 3
70301: PUSH
70302: LD_INT 100
70304: PUSH
70305: LD_VAR 0 8
70309: PLUS
70310: STR
70311: PUSH
70312: LD_STRING ;
70314: STR
70315: ST_TO_ADDR
// end ;
70316: GO 70271
70318: POP
70319: POP
// if tmp then
70320: LD_VAR 0 3
70324: IFFALSE 70336
// active := tmp ;
70326: LD_ADDR_VAR 0 7
70330: PUSH
70331: LD_VAR 0 3
70335: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
70336: LD_STRING getStreamItemsFromMission("
70338: PUSH
70339: LD_VAR 0 5
70343: STR
70344: PUSH
70345: LD_STRING ","
70347: STR
70348: PUSH
70349: LD_VAR 0 6
70353: STR
70354: PUSH
70355: LD_STRING ","
70357: STR
70358: PUSH
70359: LD_VAR 0 7
70363: STR
70364: PUSH
70365: LD_STRING ")
70367: STR
70368: PPUSH
70369: CALL_OW 559
// end else
70373: GO 70382
// ToLua ( getStreamItemsFromMission("","","") ) ;
70375: LD_STRING getStreamItemsFromMission("","","")
70377: PPUSH
70378: CALL_OW 559
// end ;
70382: LD_VAR 0 2
70386: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
70387: LD_EXP 63
70391: PUSH
70392: LD_EXP 68
70396: AND
70397: IFFALSE 70521
70399: GO 70401
70401: DISABLE
70402: LD_INT 0
70404: PPUSH
70405: PPUSH
// begin enable ;
70406: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
70407: LD_ADDR_VAR 0 2
70411: PUSH
70412: LD_INT 22
70414: PUSH
70415: LD_OWVAR 2
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: LD_INT 34
70429: PUSH
70430: LD_INT 7
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 34
70439: PUSH
70440: LD_INT 45
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 34
70449: PUSH
70450: LD_INT 28
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 34
70459: PUSH
70460: LD_INT 47
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PPUSH
70478: CALL_OW 69
70482: ST_TO_ADDR
// if not tmp then
70483: LD_VAR 0 2
70487: NOT
70488: IFFALSE 70492
// exit ;
70490: GO 70521
// for i in tmp do
70492: LD_ADDR_VAR 0 1
70496: PUSH
70497: LD_VAR 0 2
70501: PUSH
70502: FOR_IN
70503: IFFALSE 70519
// begin SetLives ( i , 0 ) ;
70505: LD_VAR 0 1
70509: PPUSH
70510: LD_INT 0
70512: PPUSH
70513: CALL_OW 234
// end ;
70517: GO 70502
70519: POP
70520: POP
// end ;
70521: PPOPN 2
70523: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
70524: LD_EXP 63
70528: PUSH
70529: LD_EXP 69
70533: AND
70534: IFFALSE 70618
70536: GO 70538
70538: DISABLE
70539: LD_INT 0
70541: PPUSH
70542: PPUSH
// begin enable ;
70543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
70544: LD_ADDR_VAR 0 2
70548: PUSH
70549: LD_INT 22
70551: PUSH
70552: LD_OWVAR 2
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 32
70563: PUSH
70564: LD_INT 3
70566: PUSH
70567: EMPTY
70568: LIST
70569: LIST
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PPUSH
70575: CALL_OW 69
70579: ST_TO_ADDR
// if not tmp then
70580: LD_VAR 0 2
70584: NOT
70585: IFFALSE 70589
// exit ;
70587: GO 70618
// for i in tmp do
70589: LD_ADDR_VAR 0 1
70593: PUSH
70594: LD_VAR 0 2
70598: PUSH
70599: FOR_IN
70600: IFFALSE 70616
// begin SetLives ( i , 0 ) ;
70602: LD_VAR 0 1
70606: PPUSH
70607: LD_INT 0
70609: PPUSH
70610: CALL_OW 234
// end ;
70614: GO 70599
70616: POP
70617: POP
// end ;
70618: PPOPN 2
70620: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
70621: LD_EXP 63
70625: PUSH
70626: LD_EXP 66
70630: AND
70631: IFFALSE 70724
70633: GO 70635
70635: DISABLE
70636: LD_INT 0
70638: PPUSH
// begin enable ;
70639: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
70640: LD_ADDR_VAR 0 1
70644: PUSH
70645: LD_INT 22
70647: PUSH
70648: LD_OWVAR 2
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 2
70659: PUSH
70660: LD_INT 25
70662: PUSH
70663: LD_INT 5
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: PUSH
70670: LD_INT 25
70672: PUSH
70673: LD_INT 9
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 25
70682: PUSH
70683: LD_INT 8
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: LIST
70694: LIST
70695: PUSH
70696: EMPTY
70697: LIST
70698: LIST
70699: PPUSH
70700: CALL_OW 69
70704: PUSH
70705: FOR_IN
70706: IFFALSE 70722
// begin SetClass ( i , 1 ) ;
70708: LD_VAR 0 1
70712: PPUSH
70713: LD_INT 1
70715: PPUSH
70716: CALL_OW 336
// end ;
70720: GO 70705
70722: POP
70723: POP
// end ;
70724: PPOPN 1
70726: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
70727: LD_EXP 63
70731: PUSH
70732: LD_EXP 67
70736: AND
70737: PUSH
70738: LD_OWVAR 65
70742: PUSH
70743: LD_INT 7
70745: LESS
70746: AND
70747: IFFALSE 70761
70749: GO 70751
70751: DISABLE
// begin enable ;
70752: ENABLE
// game_speed := 7 ;
70753: LD_ADDR_OWVAR 65
70757: PUSH
70758: LD_INT 7
70760: ST_TO_ADDR
// end ;
70761: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
70762: LD_EXP 63
70766: PUSH
70767: LD_EXP 70
70771: AND
70772: IFFALSE 70974
70774: GO 70776
70776: DISABLE
70777: LD_INT 0
70779: PPUSH
70780: PPUSH
70781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70782: LD_ADDR_VAR 0 3
70786: PUSH
70787: LD_INT 81
70789: PUSH
70790: LD_OWVAR 2
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 21
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PPUSH
70813: CALL_OW 69
70817: ST_TO_ADDR
// if not tmp then
70818: LD_VAR 0 3
70822: NOT
70823: IFFALSE 70827
// exit ;
70825: GO 70974
// if tmp > 5 then
70827: LD_VAR 0 3
70831: PUSH
70832: LD_INT 5
70834: GREATER
70835: IFFALSE 70847
// k := 5 else
70837: LD_ADDR_VAR 0 2
70841: PUSH
70842: LD_INT 5
70844: ST_TO_ADDR
70845: GO 70857
// k := tmp ;
70847: LD_ADDR_VAR 0 2
70851: PUSH
70852: LD_VAR 0 3
70856: ST_TO_ADDR
// for i := 1 to k do
70857: LD_ADDR_VAR 0 1
70861: PUSH
70862: DOUBLE
70863: LD_INT 1
70865: DEC
70866: ST_TO_ADDR
70867: LD_VAR 0 2
70871: PUSH
70872: FOR_TO
70873: IFFALSE 70972
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
70875: LD_VAR 0 3
70879: PUSH
70880: LD_VAR 0 1
70884: ARRAY
70885: PPUSH
70886: LD_VAR 0 1
70890: PUSH
70891: LD_INT 4
70893: MOD
70894: PUSH
70895: LD_INT 1
70897: PLUS
70898: PPUSH
70899: CALL_OW 259
70903: PUSH
70904: LD_INT 10
70906: LESS
70907: IFFALSE 70970
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
70909: LD_VAR 0 3
70913: PUSH
70914: LD_VAR 0 1
70918: ARRAY
70919: PPUSH
70920: LD_VAR 0 1
70924: PUSH
70925: LD_INT 4
70927: MOD
70928: PUSH
70929: LD_INT 1
70931: PLUS
70932: PPUSH
70933: LD_VAR 0 3
70937: PUSH
70938: LD_VAR 0 1
70942: ARRAY
70943: PPUSH
70944: LD_VAR 0 1
70948: PUSH
70949: LD_INT 4
70951: MOD
70952: PUSH
70953: LD_INT 1
70955: PLUS
70956: PPUSH
70957: CALL_OW 259
70961: PUSH
70962: LD_INT 1
70964: PLUS
70965: PPUSH
70966: CALL_OW 237
70970: GO 70872
70972: POP
70973: POP
// end ;
70974: PPOPN 3
70976: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
70977: LD_EXP 63
70981: PUSH
70982: LD_EXP 71
70986: AND
70987: IFFALSE 71007
70989: GO 70991
70991: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
70992: LD_INT 4
70994: PPUSH
70995: LD_OWVAR 2
70999: PPUSH
71000: LD_INT 0
71002: PPUSH
71003: CALL_OW 324
71007: END
// every 0 0$1 trigger StreamModeActive and sShovel do
71008: LD_EXP 63
71012: PUSH
71013: LD_EXP 100
71017: AND
71018: IFFALSE 71038
71020: GO 71022
71022: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
71023: LD_INT 19
71025: PPUSH
71026: LD_OWVAR 2
71030: PPUSH
71031: LD_INT 0
71033: PPUSH
71034: CALL_OW 324
71038: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
71039: LD_EXP 63
71043: PUSH
71044: LD_EXP 72
71048: AND
71049: IFFALSE 71151
71051: GO 71053
71053: DISABLE
71054: LD_INT 0
71056: PPUSH
71057: PPUSH
// begin enable ;
71058: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
71059: LD_ADDR_VAR 0 2
71063: PUSH
71064: LD_INT 22
71066: PUSH
71067: LD_OWVAR 2
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 2
71078: PUSH
71079: LD_INT 34
71081: PUSH
71082: LD_INT 11
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 34
71091: PUSH
71092: LD_INT 30
71094: PUSH
71095: EMPTY
71096: LIST
71097: LIST
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: LIST
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PPUSH
71108: CALL_OW 69
71112: ST_TO_ADDR
// if not tmp then
71113: LD_VAR 0 2
71117: NOT
71118: IFFALSE 71122
// exit ;
71120: GO 71151
// for i in tmp do
71122: LD_ADDR_VAR 0 1
71126: PUSH
71127: LD_VAR 0 2
71131: PUSH
71132: FOR_IN
71133: IFFALSE 71149
// begin SetLives ( i , 0 ) ;
71135: LD_VAR 0 1
71139: PPUSH
71140: LD_INT 0
71142: PPUSH
71143: CALL_OW 234
// end ;
71147: GO 71132
71149: POP
71150: POP
// end ;
71151: PPOPN 2
71153: END
// every 0 0$1 trigger StreamModeActive and sBunker do
71154: LD_EXP 63
71158: PUSH
71159: LD_EXP 73
71163: AND
71164: IFFALSE 71184
71166: GO 71168
71168: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
71169: LD_INT 32
71171: PPUSH
71172: LD_OWVAR 2
71176: PPUSH
71177: LD_INT 0
71179: PPUSH
71180: CALL_OW 324
71184: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
71185: LD_EXP 63
71189: PUSH
71190: LD_EXP 74
71194: AND
71195: IFFALSE 71376
71197: GO 71199
71199: DISABLE
71200: LD_INT 0
71202: PPUSH
71203: PPUSH
71204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
71205: LD_ADDR_VAR 0 2
71209: PUSH
71210: LD_INT 22
71212: PUSH
71213: LD_OWVAR 2
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 33
71224: PUSH
71225: LD_INT 3
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PPUSH
71236: CALL_OW 69
71240: ST_TO_ADDR
// if not tmp then
71241: LD_VAR 0 2
71245: NOT
71246: IFFALSE 71250
// exit ;
71248: GO 71376
// side := 0 ;
71250: LD_ADDR_VAR 0 3
71254: PUSH
71255: LD_INT 0
71257: ST_TO_ADDR
// for i := 1 to 8 do
71258: LD_ADDR_VAR 0 1
71262: PUSH
71263: DOUBLE
71264: LD_INT 1
71266: DEC
71267: ST_TO_ADDR
71268: LD_INT 8
71270: PUSH
71271: FOR_TO
71272: IFFALSE 71320
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
71274: LD_OWVAR 2
71278: PUSH
71279: LD_VAR 0 1
71283: NONEQUAL
71284: PUSH
71285: LD_OWVAR 2
71289: PPUSH
71290: LD_VAR 0 1
71294: PPUSH
71295: CALL_OW 81
71299: PUSH
71300: LD_INT 2
71302: EQUAL
71303: AND
71304: IFFALSE 71318
// begin side := i ;
71306: LD_ADDR_VAR 0 3
71310: PUSH
71311: LD_VAR 0 1
71315: ST_TO_ADDR
// break ;
71316: GO 71320
// end ;
71318: GO 71271
71320: POP
71321: POP
// if not side then
71322: LD_VAR 0 3
71326: NOT
71327: IFFALSE 71331
// exit ;
71329: GO 71376
// for i := 1 to tmp do
71331: LD_ADDR_VAR 0 1
71335: PUSH
71336: DOUBLE
71337: LD_INT 1
71339: DEC
71340: ST_TO_ADDR
71341: LD_VAR 0 2
71345: PUSH
71346: FOR_TO
71347: IFFALSE 71374
// if Prob ( 60 ) then
71349: LD_INT 60
71351: PPUSH
71352: CALL_OW 13
71356: IFFALSE 71372
// SetSide ( i , side ) ;
71358: LD_VAR 0 1
71362: PPUSH
71363: LD_VAR 0 3
71367: PPUSH
71368: CALL_OW 235
71372: GO 71346
71374: POP
71375: POP
// end ;
71376: PPOPN 3
71378: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
71379: LD_EXP 63
71383: PUSH
71384: LD_EXP 76
71388: AND
71389: IFFALSE 71508
71391: GO 71393
71393: DISABLE
71394: LD_INT 0
71396: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
71397: LD_ADDR_VAR 0 1
71401: PUSH
71402: LD_INT 22
71404: PUSH
71405: LD_OWVAR 2
71409: PUSH
71410: EMPTY
71411: LIST
71412: LIST
71413: PUSH
71414: LD_INT 21
71416: PUSH
71417: LD_INT 1
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 3
71426: PUSH
71427: LD_INT 23
71429: PUSH
71430: LD_INT 0
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: EMPTY
71438: LIST
71439: LIST
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: LIST
71445: PPUSH
71446: CALL_OW 69
71450: PUSH
71451: FOR_IN
71452: IFFALSE 71506
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
71454: LD_VAR 0 1
71458: PPUSH
71459: CALL_OW 257
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: LD_INT 2
71469: PUSH
71470: LD_INT 3
71472: PUSH
71473: LD_INT 4
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: IN
71482: IFFALSE 71504
// SetClass ( un , rand ( 1 , 4 ) ) ;
71484: LD_VAR 0 1
71488: PPUSH
71489: LD_INT 1
71491: PPUSH
71492: LD_INT 4
71494: PPUSH
71495: CALL_OW 12
71499: PPUSH
71500: CALL_OW 336
71504: GO 71451
71506: POP
71507: POP
// end ;
71508: PPOPN 1
71510: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
71511: LD_EXP 63
71515: PUSH
71516: LD_EXP 75
71520: AND
71521: IFFALSE 71600
71523: GO 71525
71525: DISABLE
71526: LD_INT 0
71528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71529: LD_ADDR_VAR 0 1
71533: PUSH
71534: LD_INT 22
71536: PUSH
71537: LD_OWVAR 2
71541: PUSH
71542: EMPTY
71543: LIST
71544: LIST
71545: PUSH
71546: LD_INT 21
71548: PUSH
71549: LD_INT 3
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PPUSH
71560: CALL_OW 69
71564: ST_TO_ADDR
// if not tmp then
71565: LD_VAR 0 1
71569: NOT
71570: IFFALSE 71574
// exit ;
71572: GO 71600
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
71574: LD_VAR 0 1
71578: PUSH
71579: LD_INT 1
71581: PPUSH
71582: LD_VAR 0 1
71586: PPUSH
71587: CALL_OW 12
71591: ARRAY
71592: PPUSH
71593: LD_INT 100
71595: PPUSH
71596: CALL_OW 234
// end ;
71600: PPOPN 1
71602: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
71603: LD_EXP 63
71607: PUSH
71608: LD_EXP 77
71612: AND
71613: IFFALSE 71711
71615: GO 71617
71617: DISABLE
71618: LD_INT 0
71620: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
71621: LD_ADDR_VAR 0 1
71625: PUSH
71626: LD_INT 22
71628: PUSH
71629: LD_OWVAR 2
71633: PUSH
71634: EMPTY
71635: LIST
71636: LIST
71637: PUSH
71638: LD_INT 21
71640: PUSH
71641: LD_INT 1
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: EMPTY
71649: LIST
71650: LIST
71651: PPUSH
71652: CALL_OW 69
71656: ST_TO_ADDR
// if not tmp then
71657: LD_VAR 0 1
71661: NOT
71662: IFFALSE 71666
// exit ;
71664: GO 71711
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
71666: LD_VAR 0 1
71670: PUSH
71671: LD_INT 1
71673: PPUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: CALL_OW 12
71683: ARRAY
71684: PPUSH
71685: LD_INT 1
71687: PPUSH
71688: LD_INT 4
71690: PPUSH
71691: CALL_OW 12
71695: PPUSH
71696: LD_INT 3000
71698: PPUSH
71699: LD_INT 9000
71701: PPUSH
71702: CALL_OW 12
71706: PPUSH
71707: CALL_OW 492
// end ;
71711: PPOPN 1
71713: END
// every 0 0$1 trigger StreamModeActive and sDepot do
71714: LD_EXP 63
71718: PUSH
71719: LD_EXP 78
71723: AND
71724: IFFALSE 71744
71726: GO 71728
71728: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
71729: LD_INT 1
71731: PPUSH
71732: LD_OWVAR 2
71736: PPUSH
71737: LD_INT 0
71739: PPUSH
71740: CALL_OW 324
71744: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
71745: LD_EXP 63
71749: PUSH
71750: LD_EXP 79
71754: AND
71755: IFFALSE 71838
71757: GO 71759
71759: DISABLE
71760: LD_INT 0
71762: PPUSH
71763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
71764: LD_ADDR_VAR 0 2
71768: PUSH
71769: LD_INT 22
71771: PUSH
71772: LD_OWVAR 2
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 21
71783: PUSH
71784: LD_INT 3
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PPUSH
71795: CALL_OW 69
71799: ST_TO_ADDR
// if not tmp then
71800: LD_VAR 0 2
71804: NOT
71805: IFFALSE 71809
// exit ;
71807: GO 71838
// for i in tmp do
71809: LD_ADDR_VAR 0 1
71813: PUSH
71814: LD_VAR 0 2
71818: PUSH
71819: FOR_IN
71820: IFFALSE 71836
// SetBLevel ( i , 10 ) ;
71822: LD_VAR 0 1
71826: PPUSH
71827: LD_INT 10
71829: PPUSH
71830: CALL_OW 241
71834: GO 71819
71836: POP
71837: POP
// end ;
71838: PPOPN 2
71840: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
71841: LD_EXP 63
71845: PUSH
71846: LD_EXP 80
71850: AND
71851: IFFALSE 71962
71853: GO 71855
71855: DISABLE
71856: LD_INT 0
71858: PPUSH
71859: PPUSH
71860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71861: LD_ADDR_VAR 0 3
71865: PUSH
71866: LD_INT 22
71868: PUSH
71869: LD_OWVAR 2
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 25
71880: PUSH
71881: LD_INT 1
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PPUSH
71892: CALL_OW 69
71896: ST_TO_ADDR
// if not tmp then
71897: LD_VAR 0 3
71901: NOT
71902: IFFALSE 71906
// exit ;
71904: GO 71962
// un := tmp [ rand ( 1 , tmp ) ] ;
71906: LD_ADDR_VAR 0 2
71910: PUSH
71911: LD_VAR 0 3
71915: PUSH
71916: LD_INT 1
71918: PPUSH
71919: LD_VAR 0 3
71923: PPUSH
71924: CALL_OW 12
71928: ARRAY
71929: ST_TO_ADDR
// if Crawls ( un ) then
71930: LD_VAR 0 2
71934: PPUSH
71935: CALL_OW 318
71939: IFFALSE 71950
// ComWalk ( un ) ;
71941: LD_VAR 0 2
71945: PPUSH
71946: CALL_OW 138
// SetClass ( un , class_sniper ) ;
71950: LD_VAR 0 2
71954: PPUSH
71955: LD_INT 5
71957: PPUSH
71958: CALL_OW 336
// end ;
71962: PPOPN 3
71964: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
71965: LD_EXP 63
71969: PUSH
71970: LD_EXP 81
71974: AND
71975: PUSH
71976: LD_OWVAR 67
71980: PUSH
71981: LD_INT 4
71983: LESS
71984: AND
71985: IFFALSE 72004
71987: GO 71989
71989: DISABLE
// begin Difficulty := Difficulty + 1 ;
71990: LD_ADDR_OWVAR 67
71994: PUSH
71995: LD_OWVAR 67
71999: PUSH
72000: LD_INT 1
72002: PLUS
72003: ST_TO_ADDR
// end ;
72004: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
72005: LD_EXP 63
72009: PUSH
72010: LD_EXP 82
72014: AND
72015: IFFALSE 72118
72017: GO 72019
72019: DISABLE
72020: LD_INT 0
72022: PPUSH
// begin for i := 1 to 5 do
72023: LD_ADDR_VAR 0 1
72027: PUSH
72028: DOUBLE
72029: LD_INT 1
72031: DEC
72032: ST_TO_ADDR
72033: LD_INT 5
72035: PUSH
72036: FOR_TO
72037: IFFALSE 72116
// begin uc_nation := nation_nature ;
72039: LD_ADDR_OWVAR 21
72043: PUSH
72044: LD_INT 0
72046: ST_TO_ADDR
// uc_side := 0 ;
72047: LD_ADDR_OWVAR 20
72051: PUSH
72052: LD_INT 0
72054: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72055: LD_ADDR_OWVAR 29
72059: PUSH
72060: LD_INT 12
72062: PUSH
72063: LD_INT 12
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: ST_TO_ADDR
// hc_agressivity := 20 ;
72070: LD_ADDR_OWVAR 35
72074: PUSH
72075: LD_INT 20
72077: ST_TO_ADDR
// hc_class := class_tiger ;
72078: LD_ADDR_OWVAR 28
72082: PUSH
72083: LD_INT 14
72085: ST_TO_ADDR
// hc_gallery :=  ;
72086: LD_ADDR_OWVAR 33
72090: PUSH
72091: LD_STRING 
72093: ST_TO_ADDR
// hc_name :=  ;
72094: LD_ADDR_OWVAR 26
72098: PUSH
72099: LD_STRING 
72101: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
72102: CALL_OW 44
72106: PPUSH
72107: LD_INT 0
72109: PPUSH
72110: CALL_OW 51
// end ;
72114: GO 72036
72116: POP
72117: POP
// end ;
72118: PPOPN 1
72120: END
// every 0 0$1 trigger StreamModeActive and sBomb do
72121: LD_EXP 63
72125: PUSH
72126: LD_EXP 83
72130: AND
72131: IFFALSE 72140
72133: GO 72135
72135: DISABLE
// StreamSibBomb ;
72136: CALL 72141 0 0
72140: END
// export function StreamSibBomb ; var i , x , y ; begin
72141: LD_INT 0
72143: PPUSH
72144: PPUSH
72145: PPUSH
72146: PPUSH
// result := false ;
72147: LD_ADDR_VAR 0 1
72151: PUSH
72152: LD_INT 0
72154: ST_TO_ADDR
// for i := 1 to 16 do
72155: LD_ADDR_VAR 0 2
72159: PUSH
72160: DOUBLE
72161: LD_INT 1
72163: DEC
72164: ST_TO_ADDR
72165: LD_INT 16
72167: PUSH
72168: FOR_TO
72169: IFFALSE 72368
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72171: LD_ADDR_VAR 0 3
72175: PUSH
72176: LD_INT 10
72178: PUSH
72179: LD_INT 20
72181: PUSH
72182: LD_INT 30
72184: PUSH
72185: LD_INT 40
72187: PUSH
72188: LD_INT 50
72190: PUSH
72191: LD_INT 60
72193: PUSH
72194: LD_INT 70
72196: PUSH
72197: LD_INT 80
72199: PUSH
72200: LD_INT 90
72202: PUSH
72203: LD_INT 100
72205: PUSH
72206: LD_INT 110
72208: PUSH
72209: LD_INT 120
72211: PUSH
72212: LD_INT 130
72214: PUSH
72215: LD_INT 140
72217: PUSH
72218: LD_INT 150
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 1
72240: PPUSH
72241: LD_INT 15
72243: PPUSH
72244: CALL_OW 12
72248: ARRAY
72249: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
72250: LD_ADDR_VAR 0 4
72254: PUSH
72255: LD_INT 10
72257: PUSH
72258: LD_INT 20
72260: PUSH
72261: LD_INT 30
72263: PUSH
72264: LD_INT 40
72266: PUSH
72267: LD_INT 50
72269: PUSH
72270: LD_INT 60
72272: PUSH
72273: LD_INT 70
72275: PUSH
72276: LD_INT 80
72278: PUSH
72279: LD_INT 90
72281: PUSH
72282: LD_INT 100
72284: PUSH
72285: LD_INT 110
72287: PUSH
72288: LD_INT 120
72290: PUSH
72291: LD_INT 130
72293: PUSH
72294: LD_INT 140
72296: PUSH
72297: LD_INT 150
72299: PUSH
72300: EMPTY
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 1
72319: PPUSH
72320: LD_INT 15
72322: PPUSH
72323: CALL_OW 12
72327: ARRAY
72328: ST_TO_ADDR
// if ValidHex ( x , y ) then
72329: LD_VAR 0 3
72333: PPUSH
72334: LD_VAR 0 4
72338: PPUSH
72339: CALL_OW 488
72343: IFFALSE 72366
// begin result := [ x , y ] ;
72345: LD_ADDR_VAR 0 1
72349: PUSH
72350: LD_VAR 0 3
72354: PUSH
72355: LD_VAR 0 4
72359: PUSH
72360: EMPTY
72361: LIST
72362: LIST
72363: ST_TO_ADDR
// break ;
72364: GO 72368
// end ; end ;
72366: GO 72168
72368: POP
72369: POP
// if result then
72370: LD_VAR 0 1
72374: IFFALSE 72434
// begin ToLua ( playSibBomb() ) ;
72376: LD_STRING playSibBomb()
72378: PPUSH
72379: CALL_OW 559
// wait ( 0 0$14 ) ;
72383: LD_INT 490
72385: PPUSH
72386: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
72390: LD_VAR 0 1
72394: PUSH
72395: LD_INT 1
72397: ARRAY
72398: PPUSH
72399: LD_VAR 0 1
72403: PUSH
72404: LD_INT 2
72406: ARRAY
72407: PPUSH
72408: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
72412: LD_VAR 0 1
72416: PUSH
72417: LD_INT 1
72419: ARRAY
72420: PPUSH
72421: LD_VAR 0 1
72425: PUSH
72426: LD_INT 2
72428: ARRAY
72429: PPUSH
72430: CALL_OW 429
// end ; end ;
72434: LD_VAR 0 1
72438: RET
// every 0 0$1 trigger StreamModeActive and sReset do
72439: LD_EXP 63
72443: PUSH
72444: LD_EXP 85
72448: AND
72449: IFFALSE 72461
72451: GO 72453
72453: DISABLE
// YouLost (  ) ;
72454: LD_STRING 
72456: PPUSH
72457: CALL_OW 104
72461: END
// every 0 0$1 trigger StreamModeActive and sFog do
72462: LD_EXP 63
72466: PUSH
72467: LD_EXP 84
72471: AND
72472: IFFALSE 72486
72474: GO 72476
72476: DISABLE
// FogOff ( your_side ) ;
72477: LD_OWVAR 2
72481: PPUSH
72482: CALL_OW 344
72486: END
// every 0 0$1 trigger StreamModeActive and sSun do
72487: LD_EXP 63
72491: PUSH
72492: LD_EXP 86
72496: AND
72497: IFFALSE 72525
72499: GO 72501
72501: DISABLE
// begin solar_recharge_percent := 0 ;
72502: LD_ADDR_OWVAR 79
72506: PUSH
72507: LD_INT 0
72509: ST_TO_ADDR
// wait ( 5 5$00 ) ;
72510: LD_INT 10500
72512: PPUSH
72513: CALL_OW 67
// solar_recharge_percent := 100 ;
72517: LD_ADDR_OWVAR 79
72521: PUSH
72522: LD_INT 100
72524: ST_TO_ADDR
// end ;
72525: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
72526: LD_EXP 63
72530: PUSH
72531: LD_EXP 87
72535: AND
72536: IFFALSE 72775
72538: GO 72540
72540: DISABLE
72541: LD_INT 0
72543: PPUSH
72544: PPUSH
72545: PPUSH
// begin tmp := [ ] ;
72546: LD_ADDR_VAR 0 3
72550: PUSH
72551: EMPTY
72552: ST_TO_ADDR
// for i := 1 to 6 do
72553: LD_ADDR_VAR 0 1
72557: PUSH
72558: DOUBLE
72559: LD_INT 1
72561: DEC
72562: ST_TO_ADDR
72563: LD_INT 6
72565: PUSH
72566: FOR_TO
72567: IFFALSE 72672
// begin uc_nation := nation_nature ;
72569: LD_ADDR_OWVAR 21
72573: PUSH
72574: LD_INT 0
72576: ST_TO_ADDR
// uc_side := 0 ;
72577: LD_ADDR_OWVAR 20
72581: PUSH
72582: LD_INT 0
72584: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
72585: LD_ADDR_OWVAR 29
72589: PUSH
72590: LD_INT 12
72592: PUSH
72593: LD_INT 12
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: ST_TO_ADDR
// hc_agressivity := 20 ;
72600: LD_ADDR_OWVAR 35
72604: PUSH
72605: LD_INT 20
72607: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
72608: LD_ADDR_OWVAR 28
72612: PUSH
72613: LD_INT 17
72615: ST_TO_ADDR
// hc_gallery :=  ;
72616: LD_ADDR_OWVAR 33
72620: PUSH
72621: LD_STRING 
72623: ST_TO_ADDR
// hc_name :=  ;
72624: LD_ADDR_OWVAR 26
72628: PUSH
72629: LD_STRING 
72631: ST_TO_ADDR
// un := CreateHuman ;
72632: LD_ADDR_VAR 0 2
72636: PUSH
72637: CALL_OW 44
72641: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
72642: LD_VAR 0 2
72646: PPUSH
72647: LD_INT 1
72649: PPUSH
72650: CALL_OW 51
// tmp := tmp ^ un ;
72654: LD_ADDR_VAR 0 3
72658: PUSH
72659: LD_VAR 0 3
72663: PUSH
72664: LD_VAR 0 2
72668: ADD
72669: ST_TO_ADDR
// end ;
72670: GO 72566
72672: POP
72673: POP
// repeat wait ( 0 0$1 ) ;
72674: LD_INT 35
72676: PPUSH
72677: CALL_OW 67
// for un in tmp do
72681: LD_ADDR_VAR 0 2
72685: PUSH
72686: LD_VAR 0 3
72690: PUSH
72691: FOR_IN
72692: IFFALSE 72766
// begin if IsDead ( un ) then
72694: LD_VAR 0 2
72698: PPUSH
72699: CALL_OW 301
72703: IFFALSE 72723
// begin tmp := tmp diff un ;
72705: LD_ADDR_VAR 0 3
72709: PUSH
72710: LD_VAR 0 3
72714: PUSH
72715: LD_VAR 0 2
72719: DIFF
72720: ST_TO_ADDR
// continue ;
72721: GO 72691
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
72723: LD_VAR 0 2
72727: PPUSH
72728: LD_INT 3
72730: PUSH
72731: LD_INT 22
72733: PUSH
72734: LD_INT 0
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PPUSH
72745: CALL_OW 69
72749: PPUSH
72750: LD_VAR 0 2
72754: PPUSH
72755: CALL_OW 74
72759: PPUSH
72760: CALL_OW 115
// end ;
72764: GO 72691
72766: POP
72767: POP
// until not tmp ;
72768: LD_VAR 0 3
72772: NOT
72773: IFFALSE 72674
// end ;
72775: PPOPN 3
72777: END
// every 0 0$1 trigger StreamModeActive and sTroll do
72778: LD_EXP 63
72782: PUSH
72783: LD_EXP 88
72787: AND
72788: IFFALSE 72842
72790: GO 72792
72792: DISABLE
// begin ToLua ( displayTroll(); ) ;
72793: LD_STRING displayTroll();
72795: PPUSH
72796: CALL_OW 559
// wait ( 3 3$00 ) ;
72800: LD_INT 6300
72802: PPUSH
72803: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72807: LD_STRING hideTroll();
72809: PPUSH
72810: CALL_OW 559
// wait ( 1 1$00 ) ;
72814: LD_INT 2100
72816: PPUSH
72817: CALL_OW 67
// ToLua ( displayTroll(); ) ;
72821: LD_STRING displayTroll();
72823: PPUSH
72824: CALL_OW 559
// wait ( 1 1$00 ) ;
72828: LD_INT 2100
72830: PPUSH
72831: CALL_OW 67
// ToLua ( hideTroll(); ) ;
72835: LD_STRING hideTroll();
72837: PPUSH
72838: CALL_OW 559
// end ;
72842: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
72843: LD_EXP 63
72847: PUSH
72848: LD_EXP 89
72852: AND
72853: IFFALSE 72916
72855: GO 72857
72857: DISABLE
72858: LD_INT 0
72860: PPUSH
// begin p := 0 ;
72861: LD_ADDR_VAR 0 1
72865: PUSH
72866: LD_INT 0
72868: ST_TO_ADDR
// repeat game_speed := 1 ;
72869: LD_ADDR_OWVAR 65
72873: PUSH
72874: LD_INT 1
72876: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72877: LD_INT 35
72879: PPUSH
72880: CALL_OW 67
// p := p + 1 ;
72884: LD_ADDR_VAR 0 1
72888: PUSH
72889: LD_VAR 0 1
72893: PUSH
72894: LD_INT 1
72896: PLUS
72897: ST_TO_ADDR
// until p >= 60 ;
72898: LD_VAR 0 1
72902: PUSH
72903: LD_INT 60
72905: GREATEREQUAL
72906: IFFALSE 72869
// game_speed := 4 ;
72908: LD_ADDR_OWVAR 65
72912: PUSH
72913: LD_INT 4
72915: ST_TO_ADDR
// end ;
72916: PPOPN 1
72918: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
72919: LD_EXP 63
72923: PUSH
72924: LD_EXP 90
72928: AND
72929: IFFALSE 73075
72931: GO 72933
72933: DISABLE
72934: LD_INT 0
72936: PPUSH
72937: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72938: LD_ADDR_VAR 0 1
72942: PUSH
72943: LD_INT 22
72945: PUSH
72946: LD_OWVAR 2
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: PUSH
72955: LD_INT 2
72957: PUSH
72958: LD_INT 30
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 30
72970: PUSH
72971: LD_INT 1
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: LIST
72982: PUSH
72983: EMPTY
72984: LIST
72985: LIST
72986: PPUSH
72987: CALL_OW 69
72991: ST_TO_ADDR
// if not depot then
72992: LD_VAR 0 1
72996: NOT
72997: IFFALSE 73001
// exit ;
72999: GO 73075
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
73001: LD_ADDR_VAR 0 2
73005: PUSH
73006: LD_VAR 0 1
73010: PUSH
73011: LD_INT 1
73013: PPUSH
73014: LD_VAR 0 1
73018: PPUSH
73019: CALL_OW 12
73023: ARRAY
73024: PPUSH
73025: CALL_OW 274
73029: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
73030: LD_VAR 0 2
73034: PPUSH
73035: LD_INT 1
73037: PPUSH
73038: LD_INT 0
73040: PPUSH
73041: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
73045: LD_VAR 0 2
73049: PPUSH
73050: LD_INT 2
73052: PPUSH
73053: LD_INT 0
73055: PPUSH
73056: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
73060: LD_VAR 0 2
73064: PPUSH
73065: LD_INT 3
73067: PPUSH
73068: LD_INT 0
73070: PPUSH
73071: CALL_OW 277
// end ;
73075: PPOPN 2
73077: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
73078: LD_EXP 63
73082: PUSH
73083: LD_EXP 91
73087: AND
73088: IFFALSE 73185
73090: GO 73092
73092: DISABLE
73093: LD_INT 0
73095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73096: LD_ADDR_VAR 0 1
73100: PUSH
73101: LD_INT 22
73103: PUSH
73104: LD_OWVAR 2
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 21
73115: PUSH
73116: LD_INT 1
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 3
73125: PUSH
73126: LD_INT 23
73128: PUSH
73129: LD_INT 0
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: LIST
73144: PPUSH
73145: CALL_OW 69
73149: ST_TO_ADDR
// if not tmp then
73150: LD_VAR 0 1
73154: NOT
73155: IFFALSE 73159
// exit ;
73157: GO 73185
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
73159: LD_VAR 0 1
73163: PUSH
73164: LD_INT 1
73166: PPUSH
73167: LD_VAR 0 1
73171: PPUSH
73172: CALL_OW 12
73176: ARRAY
73177: PPUSH
73178: LD_INT 200
73180: PPUSH
73181: CALL_OW 234
// end ;
73185: PPOPN 1
73187: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
73188: LD_EXP 63
73192: PUSH
73193: LD_EXP 92
73197: AND
73198: IFFALSE 73277
73200: GO 73202
73202: DISABLE
73203: LD_INT 0
73205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
73206: LD_ADDR_VAR 0 1
73210: PUSH
73211: LD_INT 22
73213: PUSH
73214: LD_OWVAR 2
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 21
73225: PUSH
73226: LD_INT 2
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PPUSH
73237: CALL_OW 69
73241: ST_TO_ADDR
// if not tmp then
73242: LD_VAR 0 1
73246: NOT
73247: IFFALSE 73251
// exit ;
73249: GO 73277
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
73251: LD_VAR 0 1
73255: PUSH
73256: LD_INT 1
73258: PPUSH
73259: LD_VAR 0 1
73263: PPUSH
73264: CALL_OW 12
73268: ARRAY
73269: PPUSH
73270: LD_INT 60
73272: PPUSH
73273: CALL_OW 234
// end ;
73277: PPOPN 1
73279: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
73280: LD_EXP 63
73284: PUSH
73285: LD_EXP 93
73289: AND
73290: IFFALSE 73389
73292: GO 73294
73294: DISABLE
73295: LD_INT 0
73297: PPUSH
73298: PPUSH
// begin enable ;
73299: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
73300: LD_ADDR_VAR 0 1
73304: PUSH
73305: LD_INT 22
73307: PUSH
73308: LD_OWVAR 2
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 61
73319: PUSH
73320: EMPTY
73321: LIST
73322: PUSH
73323: LD_INT 33
73325: PUSH
73326: LD_INT 2
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: LIST
73337: PPUSH
73338: CALL_OW 69
73342: ST_TO_ADDR
// if not tmp then
73343: LD_VAR 0 1
73347: NOT
73348: IFFALSE 73352
// exit ;
73350: GO 73389
// for i in tmp do
73352: LD_ADDR_VAR 0 2
73356: PUSH
73357: LD_VAR 0 1
73361: PUSH
73362: FOR_IN
73363: IFFALSE 73387
// if IsControledBy ( i ) then
73365: LD_VAR 0 2
73369: PPUSH
73370: CALL_OW 312
73374: IFFALSE 73385
// ComUnlink ( i ) ;
73376: LD_VAR 0 2
73380: PPUSH
73381: CALL_OW 136
73385: GO 73362
73387: POP
73388: POP
// end ;
73389: PPOPN 2
73391: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
73392: LD_EXP 63
73396: PUSH
73397: LD_EXP 94
73401: AND
73402: IFFALSE 73542
73404: GO 73406
73406: DISABLE
73407: LD_INT 0
73409: PPUSH
73410: PPUSH
// begin ToLua ( displayPowell(); ) ;
73411: LD_STRING displayPowell();
73413: PPUSH
73414: CALL_OW 559
// uc_side := 0 ;
73418: LD_ADDR_OWVAR 20
73422: PUSH
73423: LD_INT 0
73425: ST_TO_ADDR
// uc_nation := 2 ;
73426: LD_ADDR_OWVAR 21
73430: PUSH
73431: LD_INT 2
73433: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
73434: LD_ADDR_OWVAR 37
73438: PUSH
73439: LD_INT 14
73441: ST_TO_ADDR
// vc_engine := engine_siberite ;
73442: LD_ADDR_OWVAR 39
73446: PUSH
73447: LD_INT 3
73449: ST_TO_ADDR
// vc_control := control_apeman ;
73450: LD_ADDR_OWVAR 38
73454: PUSH
73455: LD_INT 5
73457: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
73458: LD_ADDR_OWVAR 40
73462: PUSH
73463: LD_INT 29
73465: ST_TO_ADDR
// un := CreateVehicle ;
73466: LD_ADDR_VAR 0 2
73470: PUSH
73471: CALL_OW 45
73475: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73476: LD_VAR 0 2
73480: PPUSH
73481: LD_INT 1
73483: PPUSH
73484: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
73488: LD_INT 35
73490: PPUSH
73491: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
73495: LD_VAR 0 2
73499: PPUSH
73500: LD_INT 22
73502: PUSH
73503: LD_OWVAR 2
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PPUSH
73512: CALL_OW 69
73516: PPUSH
73517: LD_VAR 0 2
73521: PPUSH
73522: CALL_OW 74
73526: PPUSH
73527: CALL_OW 115
// until IsDead ( un ) ;
73531: LD_VAR 0 2
73535: PPUSH
73536: CALL_OW 301
73540: IFFALSE 73488
// end ;
73542: PPOPN 2
73544: END
// every 0 0$1 trigger StreamModeActive and sStu do
73545: LD_EXP 63
73549: PUSH
73550: LD_EXP 102
73554: AND
73555: IFFALSE 73571
73557: GO 73559
73559: DISABLE
// begin ToLua ( displayStucuk(); ) ;
73560: LD_STRING displayStucuk();
73562: PPUSH
73563: CALL_OW 559
// ResetFog ;
73567: CALL_OW 335
// end ;
73571: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
73572: LD_EXP 63
73576: PUSH
73577: LD_EXP 95
73581: AND
73582: IFFALSE 73723
73584: GO 73586
73586: DISABLE
73587: LD_INT 0
73589: PPUSH
73590: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73591: LD_ADDR_VAR 0 2
73595: PUSH
73596: LD_INT 22
73598: PUSH
73599: LD_OWVAR 2
73603: PUSH
73604: EMPTY
73605: LIST
73606: LIST
73607: PUSH
73608: LD_INT 21
73610: PUSH
73611: LD_INT 1
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PPUSH
73622: CALL_OW 69
73626: ST_TO_ADDR
// if not tmp then
73627: LD_VAR 0 2
73631: NOT
73632: IFFALSE 73636
// exit ;
73634: GO 73723
// un := tmp [ rand ( 1 , tmp ) ] ;
73636: LD_ADDR_VAR 0 1
73640: PUSH
73641: LD_VAR 0 2
73645: PUSH
73646: LD_INT 1
73648: PPUSH
73649: LD_VAR 0 2
73653: PPUSH
73654: CALL_OW 12
73658: ARRAY
73659: ST_TO_ADDR
// SetSide ( un , 0 ) ;
73660: LD_VAR 0 1
73664: PPUSH
73665: LD_INT 0
73667: PPUSH
73668: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
73672: LD_VAR 0 1
73676: PPUSH
73677: LD_OWVAR 3
73681: PUSH
73682: LD_VAR 0 1
73686: DIFF
73687: PPUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: CALL_OW 74
73697: PPUSH
73698: CALL_OW 115
// wait ( 0 0$20 ) ;
73702: LD_INT 700
73704: PPUSH
73705: CALL_OW 67
// SetSide ( un , your_side ) ;
73709: LD_VAR 0 1
73713: PPUSH
73714: LD_OWVAR 2
73718: PPUSH
73719: CALL_OW 235
// end ;
73723: PPOPN 2
73725: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
73726: LD_EXP 63
73730: PUSH
73731: LD_EXP 96
73735: AND
73736: IFFALSE 73842
73738: GO 73740
73740: DISABLE
73741: LD_INT 0
73743: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73744: LD_ADDR_VAR 0 1
73748: PUSH
73749: LD_INT 22
73751: PUSH
73752: LD_OWVAR 2
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 2
73763: PUSH
73764: LD_INT 30
73766: PUSH
73767: LD_INT 0
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 30
73776: PUSH
73777: LD_INT 1
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: LIST
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PPUSH
73793: CALL_OW 69
73797: ST_TO_ADDR
// if not depot then
73798: LD_VAR 0 1
73802: NOT
73803: IFFALSE 73807
// exit ;
73805: GO 73842
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
73807: LD_VAR 0 1
73811: PUSH
73812: LD_INT 1
73814: ARRAY
73815: PPUSH
73816: CALL_OW 250
73820: PPUSH
73821: LD_VAR 0 1
73825: PUSH
73826: LD_INT 1
73828: ARRAY
73829: PPUSH
73830: CALL_OW 251
73834: PPUSH
73835: LD_INT 70
73837: PPUSH
73838: CALL_OW 495
// end ;
73842: PPOPN 1
73844: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
73845: LD_EXP 63
73849: PUSH
73850: LD_EXP 97
73854: AND
73855: IFFALSE 74066
73857: GO 73859
73859: DISABLE
73860: LD_INT 0
73862: PPUSH
73863: PPUSH
73864: PPUSH
73865: PPUSH
73866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73867: LD_ADDR_VAR 0 5
73871: PUSH
73872: LD_INT 22
73874: PUSH
73875: LD_OWVAR 2
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 21
73886: PUSH
73887: LD_INT 1
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PPUSH
73898: CALL_OW 69
73902: ST_TO_ADDR
// if not tmp then
73903: LD_VAR 0 5
73907: NOT
73908: IFFALSE 73912
// exit ;
73910: GO 74066
// for i in tmp do
73912: LD_ADDR_VAR 0 1
73916: PUSH
73917: LD_VAR 0 5
73921: PUSH
73922: FOR_IN
73923: IFFALSE 74064
// begin d := rand ( 0 , 5 ) ;
73925: LD_ADDR_VAR 0 4
73929: PUSH
73930: LD_INT 0
73932: PPUSH
73933: LD_INT 5
73935: PPUSH
73936: CALL_OW 12
73940: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
73941: LD_ADDR_VAR 0 2
73945: PUSH
73946: LD_VAR 0 1
73950: PPUSH
73951: CALL_OW 250
73955: PPUSH
73956: LD_VAR 0 4
73960: PPUSH
73961: LD_INT 3
73963: PPUSH
73964: LD_INT 12
73966: PPUSH
73967: CALL_OW 12
73971: PPUSH
73972: CALL_OW 272
73976: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
73977: LD_ADDR_VAR 0 3
73981: PUSH
73982: LD_VAR 0 1
73986: PPUSH
73987: CALL_OW 251
73991: PPUSH
73992: LD_VAR 0 4
73996: PPUSH
73997: LD_INT 3
73999: PPUSH
74000: LD_INT 12
74002: PPUSH
74003: CALL_OW 12
74007: PPUSH
74008: CALL_OW 273
74012: ST_TO_ADDR
// if ValidHex ( x , y ) then
74013: LD_VAR 0 2
74017: PPUSH
74018: LD_VAR 0 3
74022: PPUSH
74023: CALL_OW 488
74027: IFFALSE 74062
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
74029: LD_VAR 0 1
74033: PPUSH
74034: LD_VAR 0 2
74038: PPUSH
74039: LD_VAR 0 3
74043: PPUSH
74044: LD_INT 3
74046: PPUSH
74047: LD_INT 6
74049: PPUSH
74050: CALL_OW 12
74054: PPUSH
74055: LD_INT 1
74057: PPUSH
74058: CALL_OW 483
// end ;
74062: GO 73922
74064: POP
74065: POP
// end ;
74066: PPOPN 5
74068: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
74069: LD_EXP 63
74073: PUSH
74074: LD_EXP 98
74078: AND
74079: IFFALSE 74173
74081: GO 74083
74083: DISABLE
74084: LD_INT 0
74086: PPUSH
74087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
74088: LD_ADDR_VAR 0 2
74092: PUSH
74093: LD_INT 22
74095: PUSH
74096: LD_OWVAR 2
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 32
74107: PUSH
74108: LD_INT 1
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 21
74117: PUSH
74118: LD_INT 2
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: PPUSH
74130: CALL_OW 69
74134: ST_TO_ADDR
// if not tmp then
74135: LD_VAR 0 2
74139: NOT
74140: IFFALSE 74144
// exit ;
74142: GO 74173
// for i in tmp do
74144: LD_ADDR_VAR 0 1
74148: PUSH
74149: LD_VAR 0 2
74153: PUSH
74154: FOR_IN
74155: IFFALSE 74171
// SetFuel ( i , 0 ) ;
74157: LD_VAR 0 1
74161: PPUSH
74162: LD_INT 0
74164: PPUSH
74165: CALL_OW 240
74169: GO 74154
74171: POP
74172: POP
// end ;
74173: PPOPN 2
74175: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
74176: LD_EXP 63
74180: PUSH
74181: LD_EXP 99
74185: AND
74186: IFFALSE 74252
74188: GO 74190
74190: DISABLE
74191: LD_INT 0
74193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
74194: LD_ADDR_VAR 0 1
74198: PUSH
74199: LD_INT 22
74201: PUSH
74202: LD_OWVAR 2
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 30
74213: PUSH
74214: LD_INT 29
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PPUSH
74225: CALL_OW 69
74229: ST_TO_ADDR
// if not tmp then
74230: LD_VAR 0 1
74234: NOT
74235: IFFALSE 74239
// exit ;
74237: GO 74252
// DestroyUnit ( tmp [ 1 ] ) ;
74239: LD_VAR 0 1
74243: PUSH
74244: LD_INT 1
74246: ARRAY
74247: PPUSH
74248: CALL_OW 65
// end ;
74252: PPOPN 1
74254: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
74255: LD_EXP 63
74259: PUSH
74260: LD_EXP 101
74264: AND
74265: IFFALSE 74394
74267: GO 74269
74269: DISABLE
74270: LD_INT 0
74272: PPUSH
// begin uc_side := 0 ;
74273: LD_ADDR_OWVAR 20
74277: PUSH
74278: LD_INT 0
74280: ST_TO_ADDR
// uc_nation := nation_arabian ;
74281: LD_ADDR_OWVAR 21
74285: PUSH
74286: LD_INT 2
74288: ST_TO_ADDR
// hc_gallery :=  ;
74289: LD_ADDR_OWVAR 33
74293: PUSH
74294: LD_STRING 
74296: ST_TO_ADDR
// hc_name :=  ;
74297: LD_ADDR_OWVAR 26
74301: PUSH
74302: LD_STRING 
74304: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
74305: LD_INT 1
74307: PPUSH
74308: LD_INT 11
74310: PPUSH
74311: LD_INT 10
74313: PPUSH
74314: CALL_OW 380
// un := CreateHuman ;
74318: LD_ADDR_VAR 0 1
74322: PUSH
74323: CALL_OW 44
74327: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
74328: LD_VAR 0 1
74332: PPUSH
74333: LD_INT 1
74335: PPUSH
74336: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
74340: LD_INT 35
74342: PPUSH
74343: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
74347: LD_VAR 0 1
74351: PPUSH
74352: LD_INT 22
74354: PUSH
74355: LD_OWVAR 2
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PPUSH
74364: CALL_OW 69
74368: PPUSH
74369: LD_VAR 0 1
74373: PPUSH
74374: CALL_OW 74
74378: PPUSH
74379: CALL_OW 115
// until IsDead ( un ) ;
74383: LD_VAR 0 1
74387: PPUSH
74388: CALL_OW 301
74392: IFFALSE 74340
// end ;
74394: PPOPN 1
74396: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
74397: LD_EXP 63
74401: PUSH
74402: LD_EXP 103
74406: AND
74407: IFFALSE 74419
74409: GO 74411
74411: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
74412: LD_STRING earthquake(getX(game), 0, 32)
74414: PPUSH
74415: CALL_OW 559
74419: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
74420: LD_EXP 63
74424: PUSH
74425: LD_EXP 104
74429: AND
74430: IFFALSE 74521
74432: GO 74434
74434: DISABLE
74435: LD_INT 0
74437: PPUSH
// begin enable ;
74438: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
74439: LD_ADDR_VAR 0 1
74443: PUSH
74444: LD_INT 22
74446: PUSH
74447: LD_OWVAR 2
74451: PUSH
74452: EMPTY
74453: LIST
74454: LIST
74455: PUSH
74456: LD_INT 21
74458: PUSH
74459: LD_INT 2
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 33
74468: PUSH
74469: LD_INT 3
74471: PUSH
74472: EMPTY
74473: LIST
74474: LIST
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: LIST
74480: PPUSH
74481: CALL_OW 69
74485: ST_TO_ADDR
// if not tmp then
74486: LD_VAR 0 1
74490: NOT
74491: IFFALSE 74495
// exit ;
74493: GO 74521
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
74495: LD_VAR 0 1
74499: PUSH
74500: LD_INT 1
74502: PPUSH
74503: LD_VAR 0 1
74507: PPUSH
74508: CALL_OW 12
74512: ARRAY
74513: PPUSH
74514: LD_INT 1
74516: PPUSH
74517: CALL_OW 234
// end ;
74521: PPOPN 1
74523: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
74524: LD_EXP 63
74528: PUSH
74529: LD_EXP 105
74533: AND
74534: IFFALSE 74675
74536: GO 74538
74538: DISABLE
74539: LD_INT 0
74541: PPUSH
74542: PPUSH
74543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74544: LD_ADDR_VAR 0 3
74548: PUSH
74549: LD_INT 22
74551: PUSH
74552: LD_OWVAR 2
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: LD_INT 25
74563: PUSH
74564: LD_INT 1
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PPUSH
74575: CALL_OW 69
74579: ST_TO_ADDR
// if not tmp then
74580: LD_VAR 0 3
74584: NOT
74585: IFFALSE 74589
// exit ;
74587: GO 74675
// un := tmp [ rand ( 1 , tmp ) ] ;
74589: LD_ADDR_VAR 0 2
74593: PUSH
74594: LD_VAR 0 3
74598: PUSH
74599: LD_INT 1
74601: PPUSH
74602: LD_VAR 0 3
74606: PPUSH
74607: CALL_OW 12
74611: ARRAY
74612: ST_TO_ADDR
// if Crawls ( un ) then
74613: LD_VAR 0 2
74617: PPUSH
74618: CALL_OW 318
74622: IFFALSE 74633
// ComWalk ( un ) ;
74624: LD_VAR 0 2
74628: PPUSH
74629: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
74633: LD_VAR 0 2
74637: PPUSH
74638: LD_INT 9
74640: PPUSH
74641: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
74645: LD_INT 28
74647: PPUSH
74648: LD_OWVAR 2
74652: PPUSH
74653: LD_INT 2
74655: PPUSH
74656: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
74660: LD_INT 29
74662: PPUSH
74663: LD_OWVAR 2
74667: PPUSH
74668: LD_INT 2
74670: PPUSH
74671: CALL_OW 322
// end ;
74675: PPOPN 3
74677: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
74678: LD_EXP 63
74682: PUSH
74683: LD_EXP 106
74687: AND
74688: IFFALSE 74799
74690: GO 74692
74692: DISABLE
74693: LD_INT 0
74695: PPUSH
74696: PPUSH
74697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
74698: LD_ADDR_VAR 0 3
74702: PUSH
74703: LD_INT 22
74705: PUSH
74706: LD_OWVAR 2
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 25
74717: PUSH
74718: LD_INT 1
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PPUSH
74729: CALL_OW 69
74733: ST_TO_ADDR
// if not tmp then
74734: LD_VAR 0 3
74738: NOT
74739: IFFALSE 74743
// exit ;
74741: GO 74799
// un := tmp [ rand ( 1 , tmp ) ] ;
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_VAR 0 3
74752: PUSH
74753: LD_INT 1
74755: PPUSH
74756: LD_VAR 0 3
74760: PPUSH
74761: CALL_OW 12
74765: ARRAY
74766: ST_TO_ADDR
// if Crawls ( un ) then
74767: LD_VAR 0 2
74771: PPUSH
74772: CALL_OW 318
74776: IFFALSE 74787
// ComWalk ( un ) ;
74778: LD_VAR 0 2
74782: PPUSH
74783: CALL_OW 138
// SetClass ( un , class_mortar ) ;
74787: LD_VAR 0 2
74791: PPUSH
74792: LD_INT 8
74794: PPUSH
74795: CALL_OW 336
// end ;
74799: PPOPN 3
74801: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
74802: LD_EXP 63
74806: PUSH
74807: LD_EXP 107
74811: AND
74812: IFFALSE 74956
74814: GO 74816
74816: DISABLE
74817: LD_INT 0
74819: PPUSH
74820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
74821: LD_ADDR_VAR 0 2
74825: PUSH
74826: LD_INT 22
74828: PUSH
74829: LD_OWVAR 2
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 21
74840: PUSH
74841: LD_INT 2
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 2
74850: PUSH
74851: LD_INT 34
74853: PUSH
74854: LD_INT 12
74856: PUSH
74857: EMPTY
74858: LIST
74859: LIST
74860: PUSH
74861: LD_INT 34
74863: PUSH
74864: LD_INT 51
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 34
74873: PUSH
74874: LD_INT 32
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: LIST
74885: LIST
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: LIST
74891: PPUSH
74892: CALL_OW 69
74896: ST_TO_ADDR
// if not tmp then
74897: LD_VAR 0 2
74901: NOT
74902: IFFALSE 74906
// exit ;
74904: GO 74956
// for i in tmp do
74906: LD_ADDR_VAR 0 1
74910: PUSH
74911: LD_VAR 0 2
74915: PUSH
74916: FOR_IN
74917: IFFALSE 74954
// if GetCargo ( i , mat_artifact ) = 0 then
74919: LD_VAR 0 1
74923: PPUSH
74924: LD_INT 4
74926: PPUSH
74927: CALL_OW 289
74931: PUSH
74932: LD_INT 0
74934: EQUAL
74935: IFFALSE 74952
// SetCargo ( i , mat_siberit , 100 ) ;
74937: LD_VAR 0 1
74941: PPUSH
74942: LD_INT 3
74944: PPUSH
74945: LD_INT 100
74947: PPUSH
74948: CALL_OW 290
74952: GO 74916
74954: POP
74955: POP
// end ;
74956: PPOPN 2
74958: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
74959: LD_EXP 63
74963: PUSH
74964: LD_EXP 108
74968: AND
74969: IFFALSE 75152
74971: GO 74973
74973: DISABLE
74974: LD_INT 0
74976: PPUSH
74977: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
74978: LD_ADDR_VAR 0 2
74982: PUSH
74983: LD_INT 22
74985: PUSH
74986: LD_OWVAR 2
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PPUSH
74995: CALL_OW 69
74999: ST_TO_ADDR
// if not tmp then
75000: LD_VAR 0 2
75004: NOT
75005: IFFALSE 75009
// exit ;
75007: GO 75152
// for i := 1 to 2 do
75009: LD_ADDR_VAR 0 1
75013: PUSH
75014: DOUBLE
75015: LD_INT 1
75017: DEC
75018: ST_TO_ADDR
75019: LD_INT 2
75021: PUSH
75022: FOR_TO
75023: IFFALSE 75150
// begin uc_side := your_side ;
75025: LD_ADDR_OWVAR 20
75029: PUSH
75030: LD_OWVAR 2
75034: ST_TO_ADDR
// uc_nation := nation_american ;
75035: LD_ADDR_OWVAR 21
75039: PUSH
75040: LD_INT 1
75042: ST_TO_ADDR
// vc_chassis := us_morphling ;
75043: LD_ADDR_OWVAR 37
75047: PUSH
75048: LD_INT 5
75050: ST_TO_ADDR
// vc_engine := engine_siberite ;
75051: LD_ADDR_OWVAR 39
75055: PUSH
75056: LD_INT 3
75058: ST_TO_ADDR
// vc_control := control_computer ;
75059: LD_ADDR_OWVAR 38
75063: PUSH
75064: LD_INT 3
75066: ST_TO_ADDR
// vc_weapon := us_double_laser ;
75067: LD_ADDR_OWVAR 40
75071: PUSH
75072: LD_INT 10
75074: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
75075: LD_VAR 0 2
75079: PUSH
75080: LD_INT 1
75082: ARRAY
75083: PPUSH
75084: CALL_OW 310
75088: NOT
75089: IFFALSE 75136
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
75091: CALL_OW 45
75095: PPUSH
75096: LD_VAR 0 2
75100: PUSH
75101: LD_INT 1
75103: ARRAY
75104: PPUSH
75105: CALL_OW 250
75109: PPUSH
75110: LD_VAR 0 2
75114: PUSH
75115: LD_INT 1
75117: ARRAY
75118: PPUSH
75119: CALL_OW 251
75123: PPUSH
75124: LD_INT 12
75126: PPUSH
75127: LD_INT 1
75129: PPUSH
75130: CALL_OW 50
75134: GO 75148
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
75136: CALL_OW 45
75140: PPUSH
75141: LD_INT 1
75143: PPUSH
75144: CALL_OW 51
// end ;
75148: GO 75022
75150: POP
75151: POP
// end ;
75152: PPOPN 2
75154: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
75155: LD_EXP 63
75159: PUSH
75160: LD_EXP 109
75164: AND
75165: IFFALSE 75387
75167: GO 75169
75169: DISABLE
75170: LD_INT 0
75172: PPUSH
75173: PPUSH
75174: PPUSH
75175: PPUSH
75176: PPUSH
75177: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75178: LD_ADDR_VAR 0 6
75182: PUSH
75183: LD_INT 22
75185: PUSH
75186: LD_OWVAR 2
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 21
75197: PUSH
75198: LD_INT 1
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 3
75207: PUSH
75208: LD_INT 23
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: LIST
75226: PPUSH
75227: CALL_OW 69
75231: ST_TO_ADDR
// if not tmp then
75232: LD_VAR 0 6
75236: NOT
75237: IFFALSE 75241
// exit ;
75239: GO 75387
// s1 := rand ( 1 , 4 ) ;
75241: LD_ADDR_VAR 0 2
75245: PUSH
75246: LD_INT 1
75248: PPUSH
75249: LD_INT 4
75251: PPUSH
75252: CALL_OW 12
75256: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
75257: LD_ADDR_VAR 0 4
75261: PUSH
75262: LD_VAR 0 6
75266: PUSH
75267: LD_INT 1
75269: ARRAY
75270: PPUSH
75271: LD_VAR 0 2
75275: PPUSH
75276: CALL_OW 259
75280: ST_TO_ADDR
// if s1 = 1 then
75281: LD_VAR 0 2
75285: PUSH
75286: LD_INT 1
75288: EQUAL
75289: IFFALSE 75309
// s2 := rand ( 2 , 4 ) else
75291: LD_ADDR_VAR 0 3
75295: PUSH
75296: LD_INT 2
75298: PPUSH
75299: LD_INT 4
75301: PPUSH
75302: CALL_OW 12
75306: ST_TO_ADDR
75307: GO 75317
// s2 := 1 ;
75309: LD_ADDR_VAR 0 3
75313: PUSH
75314: LD_INT 1
75316: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
75317: LD_ADDR_VAR 0 5
75321: PUSH
75322: LD_VAR 0 6
75326: PUSH
75327: LD_INT 1
75329: ARRAY
75330: PPUSH
75331: LD_VAR 0 3
75335: PPUSH
75336: CALL_OW 259
75340: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
75341: LD_VAR 0 6
75345: PUSH
75346: LD_INT 1
75348: ARRAY
75349: PPUSH
75350: LD_VAR 0 2
75354: PPUSH
75355: LD_VAR 0 5
75359: PPUSH
75360: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
75364: LD_VAR 0 6
75368: PUSH
75369: LD_INT 1
75371: ARRAY
75372: PPUSH
75373: LD_VAR 0 3
75377: PPUSH
75378: LD_VAR 0 4
75382: PPUSH
75383: CALL_OW 237
// end ;
75387: PPOPN 6
75389: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
75390: LD_EXP 63
75394: PUSH
75395: LD_EXP 110
75399: AND
75400: IFFALSE 75479
75402: GO 75404
75404: DISABLE
75405: LD_INT 0
75407: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
75408: LD_ADDR_VAR 0 1
75412: PUSH
75413: LD_INT 22
75415: PUSH
75416: LD_OWVAR 2
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 30
75427: PUSH
75428: LD_INT 3
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: PPUSH
75439: CALL_OW 69
75443: ST_TO_ADDR
// if not tmp then
75444: LD_VAR 0 1
75448: NOT
75449: IFFALSE 75453
// exit ;
75451: GO 75479
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
75453: LD_VAR 0 1
75457: PUSH
75458: LD_INT 1
75460: PPUSH
75461: LD_VAR 0 1
75465: PPUSH
75466: CALL_OW 12
75470: ARRAY
75471: PPUSH
75472: LD_INT 1
75474: PPUSH
75475: CALL_OW 234
// end ;
75479: PPOPN 1
75481: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
75482: LD_EXP 63
75486: PUSH
75487: LD_EXP 111
75491: AND
75492: IFFALSE 75604
75494: GO 75496
75496: DISABLE
75497: LD_INT 0
75499: PPUSH
75500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
75501: LD_ADDR_VAR 0 2
75505: PUSH
75506: LD_INT 22
75508: PUSH
75509: LD_OWVAR 2
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 2
75520: PUSH
75521: LD_INT 30
75523: PUSH
75524: LD_INT 27
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: PUSH
75531: LD_INT 30
75533: PUSH
75534: LD_INT 26
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PUSH
75541: LD_INT 30
75543: PUSH
75544: LD_INT 28
75546: PUSH
75547: EMPTY
75548: LIST
75549: LIST
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PPUSH
75561: CALL_OW 69
75565: ST_TO_ADDR
// if not tmp then
75566: LD_VAR 0 2
75570: NOT
75571: IFFALSE 75575
// exit ;
75573: GO 75604
// for i in tmp do
75575: LD_ADDR_VAR 0 1
75579: PUSH
75580: LD_VAR 0 2
75584: PUSH
75585: FOR_IN
75586: IFFALSE 75602
// SetLives ( i , 1 ) ;
75588: LD_VAR 0 1
75592: PPUSH
75593: LD_INT 1
75595: PPUSH
75596: CALL_OW 234
75600: GO 75585
75602: POP
75603: POP
// end ;
75604: PPOPN 2
75606: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
75607: LD_EXP 63
75611: PUSH
75612: LD_EXP 112
75616: AND
75617: IFFALSE 75904
75619: GO 75621
75621: DISABLE
75622: LD_INT 0
75624: PPUSH
75625: PPUSH
75626: PPUSH
// begin i := rand ( 1 , 7 ) ;
75627: LD_ADDR_VAR 0 1
75631: PUSH
75632: LD_INT 1
75634: PPUSH
75635: LD_INT 7
75637: PPUSH
75638: CALL_OW 12
75642: ST_TO_ADDR
// case i of 1 :
75643: LD_VAR 0 1
75647: PUSH
75648: LD_INT 1
75650: DOUBLE
75651: EQUAL
75652: IFTRUE 75656
75654: GO 75666
75656: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
75657: LD_STRING earthquake(getX(game), 0, 32)
75659: PPUSH
75660: CALL_OW 559
75664: GO 75904
75666: LD_INT 2
75668: DOUBLE
75669: EQUAL
75670: IFTRUE 75674
75672: GO 75688
75674: POP
// begin ToLua ( displayStucuk(); ) ;
75675: LD_STRING displayStucuk();
75677: PPUSH
75678: CALL_OW 559
// ResetFog ;
75682: CALL_OW 335
// end ; 3 :
75686: GO 75904
75688: LD_INT 3
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75696
75694: GO 75800
75696: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
75697: LD_ADDR_VAR 0 2
75701: PUSH
75702: LD_INT 22
75704: PUSH
75705: LD_OWVAR 2
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 25
75716: PUSH
75717: LD_INT 1
75719: PUSH
75720: EMPTY
75721: LIST
75722: LIST
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PPUSH
75728: CALL_OW 69
75732: ST_TO_ADDR
// if not tmp then
75733: LD_VAR 0 2
75737: NOT
75738: IFFALSE 75742
// exit ;
75740: GO 75904
// un := tmp [ rand ( 1 , tmp ) ] ;
75742: LD_ADDR_VAR 0 3
75746: PUSH
75747: LD_VAR 0 2
75751: PUSH
75752: LD_INT 1
75754: PPUSH
75755: LD_VAR 0 2
75759: PPUSH
75760: CALL_OW 12
75764: ARRAY
75765: ST_TO_ADDR
// if Crawls ( un ) then
75766: LD_VAR 0 3
75770: PPUSH
75771: CALL_OW 318
75775: IFFALSE 75786
// ComWalk ( un ) ;
75777: LD_VAR 0 3
75781: PPUSH
75782: CALL_OW 138
// SetClass ( un , class_mortar ) ;
75786: LD_VAR 0 3
75790: PPUSH
75791: LD_INT 8
75793: PPUSH
75794: CALL_OW 336
// end ; 4 :
75798: GO 75904
75800: LD_INT 4
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75808
75806: GO 75882
75808: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
75809: LD_ADDR_VAR 0 2
75813: PUSH
75814: LD_INT 22
75816: PUSH
75817: LD_OWVAR 2
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 30
75828: PUSH
75829: LD_INT 29
75831: PUSH
75832: EMPTY
75833: LIST
75834: LIST
75835: PUSH
75836: EMPTY
75837: LIST
75838: LIST
75839: PPUSH
75840: CALL_OW 69
75844: ST_TO_ADDR
// if not tmp then
75845: LD_VAR 0 2
75849: NOT
75850: IFFALSE 75854
// exit ;
75852: GO 75904
// CenterNowOnUnits ( tmp [ 1 ] ) ;
75854: LD_VAR 0 2
75858: PUSH
75859: LD_INT 1
75861: ARRAY
75862: PPUSH
75863: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
75867: LD_VAR 0 2
75871: PUSH
75872: LD_INT 1
75874: ARRAY
75875: PPUSH
75876: CALL_OW 65
// end ; 5 .. 7 :
75880: GO 75904
75882: LD_INT 5
75884: DOUBLE
75885: GREATEREQUAL
75886: IFFALSE 75894
75888: LD_INT 7
75890: DOUBLE
75891: LESSEQUAL
75892: IFTRUE 75896
75894: GO 75903
75896: POP
// StreamSibBomb ; end ;
75897: CALL 72141 0 0
75901: GO 75904
75903: POP
// end ;
75904: PPOPN 3
75906: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
75907: LD_EXP 63
75911: PUSH
75912: LD_EXP 113
75916: AND
75917: IFFALSE 76073
75919: GO 75921
75921: DISABLE
75922: LD_INT 0
75924: PPUSH
75925: PPUSH
75926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
75927: LD_ADDR_VAR 0 2
75931: PUSH
75932: LD_INT 81
75934: PUSH
75935: LD_OWVAR 2
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 2
75946: PUSH
75947: LD_INT 21
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: LD_INT 21
75959: PUSH
75960: LD_INT 2
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PUSH
75967: EMPTY
75968: LIST
75969: LIST
75970: LIST
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PPUSH
75976: CALL_OW 69
75980: ST_TO_ADDR
// if not tmp then
75981: LD_VAR 0 2
75985: NOT
75986: IFFALSE 75990
// exit ;
75988: GO 76073
// p := 0 ;
75990: LD_ADDR_VAR 0 3
75994: PUSH
75995: LD_INT 0
75997: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
75998: LD_INT 35
76000: PPUSH
76001: CALL_OW 67
// p := p + 1 ;
76005: LD_ADDR_VAR 0 3
76009: PUSH
76010: LD_VAR 0 3
76014: PUSH
76015: LD_INT 1
76017: PLUS
76018: ST_TO_ADDR
// for i in tmp do
76019: LD_ADDR_VAR 0 1
76023: PUSH
76024: LD_VAR 0 2
76028: PUSH
76029: FOR_IN
76030: IFFALSE 76061
// if GetLives ( i ) < 1000 then
76032: LD_VAR 0 1
76036: PPUSH
76037: CALL_OW 256
76041: PUSH
76042: LD_INT 1000
76044: LESS
76045: IFFALSE 76059
// SetLives ( i , 1000 ) ;
76047: LD_VAR 0 1
76051: PPUSH
76052: LD_INT 1000
76054: PPUSH
76055: CALL_OW 234
76059: GO 76029
76061: POP
76062: POP
// until p > 20 ;
76063: LD_VAR 0 3
76067: PUSH
76068: LD_INT 20
76070: GREATER
76071: IFFALSE 75998
// end ;
76073: PPOPN 3
76075: END
// every 0 0$1 trigger StreamModeActive and sTime do
76076: LD_EXP 63
76080: PUSH
76081: LD_EXP 114
76085: AND
76086: IFFALSE 76121
76088: GO 76090
76090: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
76091: LD_INT 28
76093: PPUSH
76094: LD_OWVAR 2
76098: PPUSH
76099: LD_INT 2
76101: PPUSH
76102: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
76106: LD_INT 30
76108: PPUSH
76109: LD_OWVAR 2
76113: PPUSH
76114: LD_INT 2
76116: PPUSH
76117: CALL_OW 322
// end ;
76121: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
76122: LD_EXP 63
76126: PUSH
76127: LD_EXP 115
76131: AND
76132: IFFALSE 76253
76134: GO 76136
76136: DISABLE
76137: LD_INT 0
76139: PPUSH
76140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
76141: LD_ADDR_VAR 0 2
76145: PUSH
76146: LD_INT 22
76148: PUSH
76149: LD_OWVAR 2
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 21
76160: PUSH
76161: LD_INT 1
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 3
76170: PUSH
76171: LD_INT 23
76173: PUSH
76174: LD_INT 0
76176: PUSH
76177: EMPTY
76178: LIST
76179: LIST
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: LIST
76189: PPUSH
76190: CALL_OW 69
76194: ST_TO_ADDR
// if not tmp then
76195: LD_VAR 0 2
76199: NOT
76200: IFFALSE 76204
// exit ;
76202: GO 76253
// for i in tmp do
76204: LD_ADDR_VAR 0 1
76208: PUSH
76209: LD_VAR 0 2
76213: PUSH
76214: FOR_IN
76215: IFFALSE 76251
// begin if Crawls ( i ) then
76217: LD_VAR 0 1
76221: PPUSH
76222: CALL_OW 318
76226: IFFALSE 76237
// ComWalk ( i ) ;
76228: LD_VAR 0 1
76232: PPUSH
76233: CALL_OW 138
// SetClass ( i , 2 ) ;
76237: LD_VAR 0 1
76241: PPUSH
76242: LD_INT 2
76244: PPUSH
76245: CALL_OW 336
// end ;
76249: GO 76214
76251: POP
76252: POP
// end ;
76253: PPOPN 2
76255: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
76256: LD_EXP 63
76260: PUSH
76261: LD_EXP 116
76265: AND
76266: IFFALSE 76554
76268: GO 76270
76270: DISABLE
76271: LD_INT 0
76273: PPUSH
76274: PPUSH
76275: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
76276: LD_OWVAR 2
76280: PPUSH
76281: LD_INT 9
76283: PPUSH
76284: LD_INT 1
76286: PPUSH
76287: LD_INT 1
76289: PPUSH
76290: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
76294: LD_INT 9
76296: PPUSH
76297: LD_OWVAR 2
76301: PPUSH
76302: CALL_OW 343
// uc_side := 9 ;
76306: LD_ADDR_OWVAR 20
76310: PUSH
76311: LD_INT 9
76313: ST_TO_ADDR
// uc_nation := 2 ;
76314: LD_ADDR_OWVAR 21
76318: PUSH
76319: LD_INT 2
76321: ST_TO_ADDR
// hc_name := Dark Warrior ;
76322: LD_ADDR_OWVAR 26
76326: PUSH
76327: LD_STRING Dark Warrior
76329: ST_TO_ADDR
// hc_gallery :=  ;
76330: LD_ADDR_OWVAR 33
76334: PUSH
76335: LD_STRING 
76337: ST_TO_ADDR
// hc_noskilllimit := true ;
76338: LD_ADDR_OWVAR 76
76342: PUSH
76343: LD_INT 1
76345: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
76346: LD_ADDR_OWVAR 31
76350: PUSH
76351: LD_INT 30
76353: PUSH
76354: LD_INT 30
76356: PUSH
76357: LD_INT 30
76359: PUSH
76360: LD_INT 30
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: LIST
76367: LIST
76368: ST_TO_ADDR
// un := CreateHuman ;
76369: LD_ADDR_VAR 0 3
76373: PUSH
76374: CALL_OW 44
76378: ST_TO_ADDR
// hc_noskilllimit := false ;
76379: LD_ADDR_OWVAR 76
76383: PUSH
76384: LD_INT 0
76386: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76387: LD_VAR 0 3
76391: PPUSH
76392: LD_INT 1
76394: PPUSH
76395: CALL_OW 51
// ToLua ( playRanger() ) ;
76399: LD_STRING playRanger()
76401: PPUSH
76402: CALL_OW 559
// p := 0 ;
76406: LD_ADDR_VAR 0 2
76410: PUSH
76411: LD_INT 0
76413: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
76414: LD_INT 35
76416: PPUSH
76417: CALL_OW 67
// p := p + 1 ;
76421: LD_ADDR_VAR 0 2
76425: PUSH
76426: LD_VAR 0 2
76430: PUSH
76431: LD_INT 1
76433: PLUS
76434: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
76435: LD_VAR 0 3
76439: PPUSH
76440: CALL_OW 256
76444: PUSH
76445: LD_INT 1000
76447: LESS
76448: IFFALSE 76462
// SetLives ( un , 1000 ) ;
76450: LD_VAR 0 3
76454: PPUSH
76455: LD_INT 1000
76457: PPUSH
76458: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
76462: LD_VAR 0 3
76466: PPUSH
76467: LD_INT 81
76469: PUSH
76470: LD_OWVAR 2
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: LD_INT 91
76481: PUSH
76482: LD_VAR 0 3
76486: PUSH
76487: LD_INT 30
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: LIST
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PPUSH
76499: CALL_OW 69
76503: PPUSH
76504: LD_VAR 0 3
76508: PPUSH
76509: CALL_OW 74
76513: PPUSH
76514: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
76518: LD_VAR 0 2
76522: PUSH
76523: LD_INT 80
76525: GREATER
76526: PUSH
76527: LD_VAR 0 3
76531: PPUSH
76532: CALL_OW 301
76536: OR
76537: IFFALSE 76414
// if un then
76539: LD_VAR 0 3
76543: IFFALSE 76554
// RemoveUnit ( un ) ;
76545: LD_VAR 0 3
76549: PPUSH
76550: CALL_OW 64
// end ;
76554: PPOPN 3
76556: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
76557: LD_EXP 117
76561: IFFALSE 76677
76563: GO 76565
76565: DISABLE
76566: LD_INT 0
76568: PPUSH
76569: PPUSH
76570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
76571: LD_ADDR_VAR 0 2
76575: PUSH
76576: LD_INT 81
76578: PUSH
76579: LD_OWVAR 2
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: PUSH
76588: LD_INT 21
76590: PUSH
76591: LD_INT 1
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PPUSH
76602: CALL_OW 69
76606: ST_TO_ADDR
// ToLua ( playComputer() ) ;
76607: LD_STRING playComputer()
76609: PPUSH
76610: CALL_OW 559
// if not tmp then
76614: LD_VAR 0 2
76618: NOT
76619: IFFALSE 76623
// exit ;
76621: GO 76677
// for i in tmp do
76623: LD_ADDR_VAR 0 1
76627: PUSH
76628: LD_VAR 0 2
76632: PUSH
76633: FOR_IN
76634: IFFALSE 76675
// for j := 1 to 4 do
76636: LD_ADDR_VAR 0 3
76640: PUSH
76641: DOUBLE
76642: LD_INT 1
76644: DEC
76645: ST_TO_ADDR
76646: LD_INT 4
76648: PUSH
76649: FOR_TO
76650: IFFALSE 76671
// SetSkill ( i , j , 10 ) ;
76652: LD_VAR 0 1
76656: PPUSH
76657: LD_VAR 0 3
76661: PPUSH
76662: LD_INT 10
76664: PPUSH
76665: CALL_OW 237
76669: GO 76649
76671: POP
76672: POP
76673: GO 76633
76675: POP
76676: POP
// end ;
76677: PPOPN 3
76679: END
// every 0 0$1 trigger s30 do var i , tmp ;
76680: LD_EXP 118
76684: IFFALSE 76753
76686: GO 76688
76688: DISABLE
76689: LD_INT 0
76691: PPUSH
76692: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76693: LD_ADDR_VAR 0 2
76697: PUSH
76698: LD_INT 22
76700: PUSH
76701: LD_OWVAR 2
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: PPUSH
76710: CALL_OW 69
76714: ST_TO_ADDR
// if not tmp then
76715: LD_VAR 0 2
76719: NOT
76720: IFFALSE 76724
// exit ;
76722: GO 76753
// for i in tmp do
76724: LD_ADDR_VAR 0 1
76728: PUSH
76729: LD_VAR 0 2
76733: PUSH
76734: FOR_IN
76735: IFFALSE 76751
// SetLives ( i , 300 ) ;
76737: LD_VAR 0 1
76741: PPUSH
76742: LD_INT 300
76744: PPUSH
76745: CALL_OW 234
76749: GO 76734
76751: POP
76752: POP
// end ;
76753: PPOPN 2
76755: END
// every 0 0$1 trigger s60 do var i , tmp ;
76756: LD_EXP 119
76760: IFFALSE 76829
76762: GO 76764
76764: DISABLE
76765: LD_INT 0
76767: PPUSH
76768: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
76769: LD_ADDR_VAR 0 2
76773: PUSH
76774: LD_INT 22
76776: PUSH
76777: LD_OWVAR 2
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: PPUSH
76786: CALL_OW 69
76790: ST_TO_ADDR
// if not tmp then
76791: LD_VAR 0 2
76795: NOT
76796: IFFALSE 76800
// exit ;
76798: GO 76829
// for i in tmp do
76800: LD_ADDR_VAR 0 1
76804: PUSH
76805: LD_VAR 0 2
76809: PUSH
76810: FOR_IN
76811: IFFALSE 76827
// SetLives ( i , 600 ) ;
76813: LD_VAR 0 1
76817: PPUSH
76818: LD_INT 600
76820: PPUSH
76821: CALL_OW 234
76825: GO 76810
76827: POP
76828: POP
// end ;
76829: PPOPN 2
76831: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
76832: LD_INT 0
76834: PPUSH
// case cmd of 301 :
76835: LD_VAR 0 1
76839: PUSH
76840: LD_INT 301
76842: DOUBLE
76843: EQUAL
76844: IFTRUE 76848
76846: GO 76880
76848: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
76849: LD_VAR 0 6
76853: PPUSH
76854: LD_VAR 0 7
76858: PPUSH
76859: LD_VAR 0 8
76863: PPUSH
76864: LD_VAR 0 4
76868: PPUSH
76869: LD_VAR 0 5
76873: PPUSH
76874: CALL 78089 0 5
76878: GO 77001
76880: LD_INT 302
76882: DOUBLE
76883: EQUAL
76884: IFTRUE 76888
76886: GO 76925
76888: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
76889: LD_VAR 0 6
76893: PPUSH
76894: LD_VAR 0 7
76898: PPUSH
76899: LD_VAR 0 8
76903: PPUSH
76904: LD_VAR 0 9
76908: PPUSH
76909: LD_VAR 0 4
76913: PPUSH
76914: LD_VAR 0 5
76918: PPUSH
76919: CALL 78180 0 6
76923: GO 77001
76925: LD_INT 303
76927: DOUBLE
76928: EQUAL
76929: IFTRUE 76933
76931: GO 76970
76933: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
76934: LD_VAR 0 6
76938: PPUSH
76939: LD_VAR 0 7
76943: PPUSH
76944: LD_VAR 0 8
76948: PPUSH
76949: LD_VAR 0 9
76953: PPUSH
76954: LD_VAR 0 4
76958: PPUSH
76959: LD_VAR 0 5
76963: PPUSH
76964: CALL 77006 0 6
76968: GO 77001
76970: LD_INT 304
76972: DOUBLE
76973: EQUAL
76974: IFTRUE 76978
76976: GO 77000
76978: POP
// hHackTeleport ( unit , x , y ) ; end ;
76979: LD_VAR 0 2
76983: PPUSH
76984: LD_VAR 0 4
76988: PPUSH
76989: LD_VAR 0 5
76993: PPUSH
76994: CALL 78773 0 3
76998: GO 77001
77000: POP
// end ;
77001: LD_VAR 0 12
77005: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
77006: LD_INT 0
77008: PPUSH
77009: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
77010: LD_VAR 0 1
77014: PUSH
77015: LD_INT 1
77017: LESS
77018: PUSH
77019: LD_VAR 0 1
77023: PUSH
77024: LD_INT 3
77026: GREATER
77027: OR
77028: PUSH
77029: LD_VAR 0 5
77033: PPUSH
77034: LD_VAR 0 6
77038: PPUSH
77039: CALL_OW 428
77043: OR
77044: IFFALSE 77048
// exit ;
77046: GO 77776
// uc_side := your_side ;
77048: LD_ADDR_OWVAR 20
77052: PUSH
77053: LD_OWVAR 2
77057: ST_TO_ADDR
// uc_nation := nation ;
77058: LD_ADDR_OWVAR 21
77062: PUSH
77063: LD_VAR 0 1
77067: ST_TO_ADDR
// bc_level = 1 ;
77068: LD_ADDR_OWVAR 43
77072: PUSH
77073: LD_INT 1
77075: ST_TO_ADDR
// case btype of 1 :
77076: LD_VAR 0 2
77080: PUSH
77081: LD_INT 1
77083: DOUBLE
77084: EQUAL
77085: IFTRUE 77089
77087: GO 77100
77089: POP
// bc_type := b_depot ; 2 :
77090: LD_ADDR_OWVAR 42
77094: PUSH
77095: LD_INT 0
77097: ST_TO_ADDR
77098: GO 77720
77100: LD_INT 2
77102: DOUBLE
77103: EQUAL
77104: IFTRUE 77108
77106: GO 77119
77108: POP
// bc_type := b_warehouse ; 3 :
77109: LD_ADDR_OWVAR 42
77113: PUSH
77114: LD_INT 1
77116: ST_TO_ADDR
77117: GO 77720
77119: LD_INT 3
77121: DOUBLE
77122: EQUAL
77123: IFTRUE 77127
77125: GO 77138
77127: POP
// bc_type := b_lab ; 4 .. 9 :
77128: LD_ADDR_OWVAR 42
77132: PUSH
77133: LD_INT 6
77135: ST_TO_ADDR
77136: GO 77720
77138: LD_INT 4
77140: DOUBLE
77141: GREATEREQUAL
77142: IFFALSE 77150
77144: LD_INT 9
77146: DOUBLE
77147: LESSEQUAL
77148: IFTRUE 77152
77150: GO 77212
77152: POP
// begin bc_type := b_lab_half ;
77153: LD_ADDR_OWVAR 42
77157: PUSH
77158: LD_INT 7
77160: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
77161: LD_ADDR_OWVAR 44
77165: PUSH
77166: LD_INT 10
77168: PUSH
77169: LD_INT 11
77171: PUSH
77172: LD_INT 12
77174: PUSH
77175: LD_INT 15
77177: PUSH
77178: LD_INT 14
77180: PUSH
77181: LD_INT 13
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: LIST
77188: LIST
77189: LIST
77190: LIST
77191: PUSH
77192: LD_VAR 0 2
77196: PUSH
77197: LD_INT 3
77199: MINUS
77200: ARRAY
77201: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
77202: LD_ADDR_OWVAR 45
77206: PUSH
77207: LD_INT 9
77209: ST_TO_ADDR
// end ; 10 .. 13 :
77210: GO 77720
77212: LD_INT 10
77214: DOUBLE
77215: GREATEREQUAL
77216: IFFALSE 77224
77218: LD_INT 13
77220: DOUBLE
77221: LESSEQUAL
77222: IFTRUE 77226
77224: GO 77303
77226: POP
// begin bc_type := b_lab_full ;
77227: LD_ADDR_OWVAR 42
77231: PUSH
77232: LD_INT 8
77234: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
77235: LD_ADDR_OWVAR 44
77239: PUSH
77240: LD_INT 10
77242: PUSH
77243: LD_INT 12
77245: PUSH
77246: LD_INT 14
77248: PUSH
77249: LD_INT 13
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: LIST
77256: LIST
77257: PUSH
77258: LD_VAR 0 2
77262: PUSH
77263: LD_INT 9
77265: MINUS
77266: ARRAY
77267: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
77268: LD_ADDR_OWVAR 45
77272: PUSH
77273: LD_INT 11
77275: PUSH
77276: LD_INT 15
77278: PUSH
77279: LD_INT 12
77281: PUSH
77282: LD_INT 15
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: PUSH
77291: LD_VAR 0 2
77295: PUSH
77296: LD_INT 9
77298: MINUS
77299: ARRAY
77300: ST_TO_ADDR
// end ; 14 :
77301: GO 77720
77303: LD_INT 14
77305: DOUBLE
77306: EQUAL
77307: IFTRUE 77311
77309: GO 77322
77311: POP
// bc_type := b_workshop ; 15 :
77312: LD_ADDR_OWVAR 42
77316: PUSH
77317: LD_INT 2
77319: ST_TO_ADDR
77320: GO 77720
77322: LD_INT 15
77324: DOUBLE
77325: EQUAL
77326: IFTRUE 77330
77328: GO 77341
77330: POP
// bc_type := b_factory ; 16 :
77331: LD_ADDR_OWVAR 42
77335: PUSH
77336: LD_INT 3
77338: ST_TO_ADDR
77339: GO 77720
77341: LD_INT 16
77343: DOUBLE
77344: EQUAL
77345: IFTRUE 77349
77347: GO 77360
77349: POP
// bc_type := b_ext_gun ; 17 :
77350: LD_ADDR_OWVAR 42
77354: PUSH
77355: LD_INT 17
77357: ST_TO_ADDR
77358: GO 77720
77360: LD_INT 17
77362: DOUBLE
77363: EQUAL
77364: IFTRUE 77368
77366: GO 77396
77368: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
77369: LD_ADDR_OWVAR 42
77373: PUSH
77374: LD_INT 19
77376: PUSH
77377: LD_INT 23
77379: PUSH
77380: LD_INT 19
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: LIST
77387: PUSH
77388: LD_VAR 0 1
77392: ARRAY
77393: ST_TO_ADDR
77394: GO 77720
77396: LD_INT 18
77398: DOUBLE
77399: EQUAL
77400: IFTRUE 77404
77402: GO 77415
77404: POP
// bc_type := b_ext_radar ; 19 :
77405: LD_ADDR_OWVAR 42
77409: PUSH
77410: LD_INT 20
77412: ST_TO_ADDR
77413: GO 77720
77415: LD_INT 19
77417: DOUBLE
77418: EQUAL
77419: IFTRUE 77423
77421: GO 77434
77423: POP
// bc_type := b_ext_radio ; 20 :
77424: LD_ADDR_OWVAR 42
77428: PUSH
77429: LD_INT 22
77431: ST_TO_ADDR
77432: GO 77720
77434: LD_INT 20
77436: DOUBLE
77437: EQUAL
77438: IFTRUE 77442
77440: GO 77453
77442: POP
// bc_type := b_ext_siberium ; 21 :
77443: LD_ADDR_OWVAR 42
77447: PUSH
77448: LD_INT 21
77450: ST_TO_ADDR
77451: GO 77720
77453: LD_INT 21
77455: DOUBLE
77456: EQUAL
77457: IFTRUE 77461
77459: GO 77472
77461: POP
// bc_type := b_ext_computer ; 22 :
77462: LD_ADDR_OWVAR 42
77466: PUSH
77467: LD_INT 24
77469: ST_TO_ADDR
77470: GO 77720
77472: LD_INT 22
77474: DOUBLE
77475: EQUAL
77476: IFTRUE 77480
77478: GO 77491
77480: POP
// bc_type := b_ext_track ; 23 :
77481: LD_ADDR_OWVAR 42
77485: PUSH
77486: LD_INT 16
77488: ST_TO_ADDR
77489: GO 77720
77491: LD_INT 23
77493: DOUBLE
77494: EQUAL
77495: IFTRUE 77499
77497: GO 77510
77499: POP
// bc_type := b_ext_laser ; 24 :
77500: LD_ADDR_OWVAR 42
77504: PUSH
77505: LD_INT 25
77507: ST_TO_ADDR
77508: GO 77720
77510: LD_INT 24
77512: DOUBLE
77513: EQUAL
77514: IFTRUE 77518
77516: GO 77529
77518: POP
// bc_type := b_control_tower ; 25 :
77519: LD_ADDR_OWVAR 42
77523: PUSH
77524: LD_INT 36
77526: ST_TO_ADDR
77527: GO 77720
77529: LD_INT 25
77531: DOUBLE
77532: EQUAL
77533: IFTRUE 77537
77535: GO 77548
77537: POP
// bc_type := b_breastwork ; 26 :
77538: LD_ADDR_OWVAR 42
77542: PUSH
77543: LD_INT 31
77545: ST_TO_ADDR
77546: GO 77720
77548: LD_INT 26
77550: DOUBLE
77551: EQUAL
77552: IFTRUE 77556
77554: GO 77567
77556: POP
// bc_type := b_bunker ; 27 :
77557: LD_ADDR_OWVAR 42
77561: PUSH
77562: LD_INT 32
77564: ST_TO_ADDR
77565: GO 77720
77567: LD_INT 27
77569: DOUBLE
77570: EQUAL
77571: IFTRUE 77575
77573: GO 77586
77575: POP
// bc_type := b_turret ; 28 :
77576: LD_ADDR_OWVAR 42
77580: PUSH
77581: LD_INT 33
77583: ST_TO_ADDR
77584: GO 77720
77586: LD_INT 28
77588: DOUBLE
77589: EQUAL
77590: IFTRUE 77594
77592: GO 77605
77594: POP
// bc_type := b_armoury ; 29 :
77595: LD_ADDR_OWVAR 42
77599: PUSH
77600: LD_INT 4
77602: ST_TO_ADDR
77603: GO 77720
77605: LD_INT 29
77607: DOUBLE
77608: EQUAL
77609: IFTRUE 77613
77611: GO 77624
77613: POP
// bc_type := b_barracks ; 30 :
77614: LD_ADDR_OWVAR 42
77618: PUSH
77619: LD_INT 5
77621: ST_TO_ADDR
77622: GO 77720
77624: LD_INT 30
77626: DOUBLE
77627: EQUAL
77628: IFTRUE 77632
77630: GO 77643
77632: POP
// bc_type := b_solar_power ; 31 :
77633: LD_ADDR_OWVAR 42
77637: PUSH
77638: LD_INT 27
77640: ST_TO_ADDR
77641: GO 77720
77643: LD_INT 31
77645: DOUBLE
77646: EQUAL
77647: IFTRUE 77651
77649: GO 77662
77651: POP
// bc_type := b_oil_power ; 32 :
77652: LD_ADDR_OWVAR 42
77656: PUSH
77657: LD_INT 26
77659: ST_TO_ADDR
77660: GO 77720
77662: LD_INT 32
77664: DOUBLE
77665: EQUAL
77666: IFTRUE 77670
77668: GO 77681
77670: POP
// bc_type := b_siberite_power ; 33 :
77671: LD_ADDR_OWVAR 42
77675: PUSH
77676: LD_INT 28
77678: ST_TO_ADDR
77679: GO 77720
77681: LD_INT 33
77683: DOUBLE
77684: EQUAL
77685: IFTRUE 77689
77687: GO 77700
77689: POP
// bc_type := b_oil_mine ; 34 :
77690: LD_ADDR_OWVAR 42
77694: PUSH
77695: LD_INT 29
77697: ST_TO_ADDR
77698: GO 77720
77700: LD_INT 34
77702: DOUBLE
77703: EQUAL
77704: IFTRUE 77708
77706: GO 77719
77708: POP
// bc_type := b_siberite_mine ; end ;
77709: LD_ADDR_OWVAR 42
77713: PUSH
77714: LD_INT 30
77716: ST_TO_ADDR
77717: GO 77720
77719: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
77720: LD_ADDR_VAR 0 8
77724: PUSH
77725: LD_VAR 0 5
77729: PPUSH
77730: LD_VAR 0 6
77734: PPUSH
77735: LD_VAR 0 3
77739: PPUSH
77740: CALL_OW 47
77744: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
77745: LD_OWVAR 42
77749: PUSH
77750: LD_INT 32
77752: PUSH
77753: LD_INT 33
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: IN
77760: IFFALSE 77776
// PlaceWeaponTurret ( b , weapon ) ;
77762: LD_VAR 0 8
77766: PPUSH
77767: LD_VAR 0 4
77771: PPUSH
77772: CALL_OW 431
// end ;
77776: LD_VAR 0 7
77780: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
77781: LD_INT 0
77783: PPUSH
77784: PPUSH
77785: PPUSH
77786: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
77787: LD_ADDR_VAR 0 4
77791: PUSH
77792: LD_INT 22
77794: PUSH
77795: LD_OWVAR 2
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 2
77806: PUSH
77807: LD_INT 30
77809: PUSH
77810: LD_INT 0
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: LD_INT 30
77819: PUSH
77820: LD_INT 1
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: LIST
77831: PUSH
77832: EMPTY
77833: LIST
77834: LIST
77835: PPUSH
77836: CALL_OW 69
77840: ST_TO_ADDR
// if not tmp then
77841: LD_VAR 0 4
77845: NOT
77846: IFFALSE 77850
// exit ;
77848: GO 77909
// for i in tmp do
77850: LD_ADDR_VAR 0 2
77854: PUSH
77855: LD_VAR 0 4
77859: PUSH
77860: FOR_IN
77861: IFFALSE 77907
// for j = 1 to 3 do
77863: LD_ADDR_VAR 0 3
77867: PUSH
77868: DOUBLE
77869: LD_INT 1
77871: DEC
77872: ST_TO_ADDR
77873: LD_INT 3
77875: PUSH
77876: FOR_TO
77877: IFFALSE 77903
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
77879: LD_VAR 0 2
77883: PPUSH
77884: CALL_OW 274
77888: PPUSH
77889: LD_VAR 0 3
77893: PPUSH
77894: LD_INT 99999
77896: PPUSH
77897: CALL_OW 277
77901: GO 77876
77903: POP
77904: POP
77905: GO 77860
77907: POP
77908: POP
// end ;
77909: LD_VAR 0 1
77913: RET
// export function hHackSetLevel10 ; var i , j ; begin
77914: LD_INT 0
77916: PPUSH
77917: PPUSH
77918: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
77919: LD_ADDR_VAR 0 2
77923: PUSH
77924: LD_INT 21
77926: PUSH
77927: LD_INT 1
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: PPUSH
77934: CALL_OW 69
77938: PUSH
77939: FOR_IN
77940: IFFALSE 77992
// if IsSelected ( i ) then
77942: LD_VAR 0 2
77946: PPUSH
77947: CALL_OW 306
77951: IFFALSE 77990
// begin for j := 1 to 4 do
77953: LD_ADDR_VAR 0 3
77957: PUSH
77958: DOUBLE
77959: LD_INT 1
77961: DEC
77962: ST_TO_ADDR
77963: LD_INT 4
77965: PUSH
77966: FOR_TO
77967: IFFALSE 77988
// SetSkill ( i , j , 10 ) ;
77969: LD_VAR 0 2
77973: PPUSH
77974: LD_VAR 0 3
77978: PPUSH
77979: LD_INT 10
77981: PPUSH
77982: CALL_OW 237
77986: GO 77966
77988: POP
77989: POP
// end ;
77990: GO 77939
77992: POP
77993: POP
// end ;
77994: LD_VAR 0 1
77998: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
77999: LD_INT 0
78001: PPUSH
78002: PPUSH
78003: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
78004: LD_ADDR_VAR 0 2
78008: PUSH
78009: LD_INT 22
78011: PUSH
78012: LD_OWVAR 2
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 21
78023: PUSH
78024: LD_INT 1
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PPUSH
78035: CALL_OW 69
78039: PUSH
78040: FOR_IN
78041: IFFALSE 78082
// begin for j := 1 to 4 do
78043: LD_ADDR_VAR 0 3
78047: PUSH
78048: DOUBLE
78049: LD_INT 1
78051: DEC
78052: ST_TO_ADDR
78053: LD_INT 4
78055: PUSH
78056: FOR_TO
78057: IFFALSE 78078
// SetSkill ( i , j , 10 ) ;
78059: LD_VAR 0 2
78063: PPUSH
78064: LD_VAR 0 3
78068: PPUSH
78069: LD_INT 10
78071: PPUSH
78072: CALL_OW 237
78076: GO 78056
78078: POP
78079: POP
// end ;
78080: GO 78040
78082: POP
78083: POP
// end ;
78084: LD_VAR 0 1
78088: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
78089: LD_INT 0
78091: PPUSH
// uc_side := your_side ;
78092: LD_ADDR_OWVAR 20
78096: PUSH
78097: LD_OWVAR 2
78101: ST_TO_ADDR
// uc_nation := nation ;
78102: LD_ADDR_OWVAR 21
78106: PUSH
78107: LD_VAR 0 1
78111: ST_TO_ADDR
// InitHc ;
78112: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
78116: LD_INT 0
78118: PPUSH
78119: LD_VAR 0 2
78123: PPUSH
78124: LD_VAR 0 3
78128: PPUSH
78129: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
78133: LD_VAR 0 4
78137: PPUSH
78138: LD_VAR 0 5
78142: PPUSH
78143: CALL_OW 428
78147: PUSH
78148: LD_INT 0
78150: EQUAL
78151: IFFALSE 78175
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
78153: CALL_OW 44
78157: PPUSH
78158: LD_VAR 0 4
78162: PPUSH
78163: LD_VAR 0 5
78167: PPUSH
78168: LD_INT 1
78170: PPUSH
78171: CALL_OW 48
// end ;
78175: LD_VAR 0 6
78179: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
78180: LD_INT 0
78182: PPUSH
78183: PPUSH
// uc_side := your_side ;
78184: LD_ADDR_OWVAR 20
78188: PUSH
78189: LD_OWVAR 2
78193: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
78194: LD_VAR 0 1
78198: PUSH
78199: LD_INT 1
78201: PUSH
78202: LD_INT 2
78204: PUSH
78205: LD_INT 3
78207: PUSH
78208: LD_INT 4
78210: PUSH
78211: LD_INT 5
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: LIST
78218: LIST
78219: LIST
78220: IN
78221: IFFALSE 78233
// uc_nation := nation_american else
78223: LD_ADDR_OWVAR 21
78227: PUSH
78228: LD_INT 1
78230: ST_TO_ADDR
78231: GO 78276
// if chassis in [ 11 , 12 , 13 , 14 ] then
78233: LD_VAR 0 1
78237: PUSH
78238: LD_INT 11
78240: PUSH
78241: LD_INT 12
78243: PUSH
78244: LD_INT 13
78246: PUSH
78247: LD_INT 14
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: IN
78256: IFFALSE 78268
// uc_nation := nation_arabian else
78258: LD_ADDR_OWVAR 21
78262: PUSH
78263: LD_INT 2
78265: ST_TO_ADDR
78266: GO 78276
// uc_nation := nation_russian ;
78268: LD_ADDR_OWVAR 21
78272: PUSH
78273: LD_INT 3
78275: ST_TO_ADDR
// vc_chassis := chassis ;
78276: LD_ADDR_OWVAR 37
78280: PUSH
78281: LD_VAR 0 1
78285: ST_TO_ADDR
// vc_engine := engine ;
78286: LD_ADDR_OWVAR 39
78290: PUSH
78291: LD_VAR 0 2
78295: ST_TO_ADDR
// vc_control := control ;
78296: LD_ADDR_OWVAR 38
78300: PUSH
78301: LD_VAR 0 3
78305: ST_TO_ADDR
// vc_weapon := weapon ;
78306: LD_ADDR_OWVAR 40
78310: PUSH
78311: LD_VAR 0 4
78315: ST_TO_ADDR
// un := CreateVehicle ;
78316: LD_ADDR_VAR 0 8
78320: PUSH
78321: CALL_OW 45
78325: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
78326: LD_VAR 0 8
78330: PPUSH
78331: LD_INT 0
78333: PPUSH
78334: LD_INT 5
78336: PPUSH
78337: CALL_OW 12
78341: PPUSH
78342: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
78346: LD_VAR 0 8
78350: PPUSH
78351: LD_VAR 0 5
78355: PPUSH
78356: LD_VAR 0 6
78360: PPUSH
78361: LD_INT 1
78363: PPUSH
78364: CALL_OW 48
// end ;
78368: LD_VAR 0 7
78372: RET
// export hInvincible ; every 1 do
78373: GO 78375
78375: DISABLE
// hInvincible := [ ] ;
78376: LD_ADDR_EXP 120
78380: PUSH
78381: EMPTY
78382: ST_TO_ADDR
78383: END
// every 10 do var i ;
78384: GO 78386
78386: DISABLE
78387: LD_INT 0
78389: PPUSH
// begin enable ;
78390: ENABLE
// if not hInvincible then
78391: LD_EXP 120
78395: NOT
78396: IFFALSE 78400
// exit ;
78398: GO 78444
// for i in hInvincible do
78400: LD_ADDR_VAR 0 1
78404: PUSH
78405: LD_EXP 120
78409: PUSH
78410: FOR_IN
78411: IFFALSE 78442
// if GetLives ( i ) < 1000 then
78413: LD_VAR 0 1
78417: PPUSH
78418: CALL_OW 256
78422: PUSH
78423: LD_INT 1000
78425: LESS
78426: IFFALSE 78440
// SetLives ( i , 1000 ) ;
78428: LD_VAR 0 1
78432: PPUSH
78433: LD_INT 1000
78435: PPUSH
78436: CALL_OW 234
78440: GO 78410
78442: POP
78443: POP
// end ;
78444: PPOPN 1
78446: END
// export function hHackInvincible ; var i ; begin
78447: LD_INT 0
78449: PPUSH
78450: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
78451: LD_ADDR_VAR 0 2
78455: PUSH
78456: LD_INT 2
78458: PUSH
78459: LD_INT 21
78461: PUSH
78462: LD_INT 1
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PUSH
78469: LD_INT 21
78471: PUSH
78472: LD_INT 2
78474: PUSH
78475: EMPTY
78476: LIST
78477: LIST
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: LIST
78483: PPUSH
78484: CALL_OW 69
78488: PUSH
78489: FOR_IN
78490: IFFALSE 78551
// if IsSelected ( i ) then
78492: LD_VAR 0 2
78496: PPUSH
78497: CALL_OW 306
78501: IFFALSE 78549
// begin if i in hInvincible then
78503: LD_VAR 0 2
78507: PUSH
78508: LD_EXP 120
78512: IN
78513: IFFALSE 78533
// hInvincible := hInvincible diff i else
78515: LD_ADDR_EXP 120
78519: PUSH
78520: LD_EXP 120
78524: PUSH
78525: LD_VAR 0 2
78529: DIFF
78530: ST_TO_ADDR
78531: GO 78549
// hInvincible := hInvincible union i ;
78533: LD_ADDR_EXP 120
78537: PUSH
78538: LD_EXP 120
78542: PUSH
78543: LD_VAR 0 2
78547: UNION
78548: ST_TO_ADDR
// end ;
78549: GO 78489
78551: POP
78552: POP
// end ;
78553: LD_VAR 0 1
78557: RET
// export function hHackInvisible ; var i , j ; begin
78558: LD_INT 0
78560: PPUSH
78561: PPUSH
78562: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
78563: LD_ADDR_VAR 0 2
78567: PUSH
78568: LD_INT 21
78570: PUSH
78571: LD_INT 1
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PPUSH
78578: CALL_OW 69
78582: PUSH
78583: FOR_IN
78584: IFFALSE 78608
// if IsSelected ( i ) then
78586: LD_VAR 0 2
78590: PPUSH
78591: CALL_OW 306
78595: IFFALSE 78606
// ComForceInvisible ( i ) ;
78597: LD_VAR 0 2
78601: PPUSH
78602: CALL_OW 496
78606: GO 78583
78608: POP
78609: POP
// end ;
78610: LD_VAR 0 1
78614: RET
// export function hHackChangeYourSide ; begin
78615: LD_INT 0
78617: PPUSH
// if your_side = 8 then
78618: LD_OWVAR 2
78622: PUSH
78623: LD_INT 8
78625: EQUAL
78626: IFFALSE 78638
// your_side := 0 else
78628: LD_ADDR_OWVAR 2
78632: PUSH
78633: LD_INT 0
78635: ST_TO_ADDR
78636: GO 78652
// your_side := your_side + 1 ;
78638: LD_ADDR_OWVAR 2
78642: PUSH
78643: LD_OWVAR 2
78647: PUSH
78648: LD_INT 1
78650: PLUS
78651: ST_TO_ADDR
// end ;
78652: LD_VAR 0 1
78656: RET
// export function hHackChangeUnitSide ; var i , j ; begin
78657: LD_INT 0
78659: PPUSH
78660: PPUSH
78661: PPUSH
// for i in all_units do
78662: LD_ADDR_VAR 0 2
78666: PUSH
78667: LD_OWVAR 3
78671: PUSH
78672: FOR_IN
78673: IFFALSE 78751
// if IsSelected ( i ) then
78675: LD_VAR 0 2
78679: PPUSH
78680: CALL_OW 306
78684: IFFALSE 78749
// begin j := GetSide ( i ) ;
78686: LD_ADDR_VAR 0 3
78690: PUSH
78691: LD_VAR 0 2
78695: PPUSH
78696: CALL_OW 255
78700: ST_TO_ADDR
// if j = 8 then
78701: LD_VAR 0 3
78705: PUSH
78706: LD_INT 8
78708: EQUAL
78709: IFFALSE 78721
// j := 0 else
78711: LD_ADDR_VAR 0 3
78715: PUSH
78716: LD_INT 0
78718: ST_TO_ADDR
78719: GO 78735
// j := j + 1 ;
78721: LD_ADDR_VAR 0 3
78725: PUSH
78726: LD_VAR 0 3
78730: PUSH
78731: LD_INT 1
78733: PLUS
78734: ST_TO_ADDR
// SetSide ( i , j ) ;
78735: LD_VAR 0 2
78739: PPUSH
78740: LD_VAR 0 3
78744: PPUSH
78745: CALL_OW 235
// end ;
78749: GO 78672
78751: POP
78752: POP
// end ;
78753: LD_VAR 0 1
78757: RET
// export function hHackFog ; begin
78758: LD_INT 0
78760: PPUSH
// FogOff ( true ) ;
78761: LD_INT 1
78763: PPUSH
78764: CALL_OW 344
// end ;
78768: LD_VAR 0 1
78772: RET
// export function hHackTeleport ( unit , x , y ) ; begin
78773: LD_INT 0
78775: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
78776: LD_VAR 0 1
78780: PPUSH
78781: LD_VAR 0 2
78785: PPUSH
78786: LD_VAR 0 3
78790: PPUSH
78791: LD_INT 1
78793: PPUSH
78794: LD_INT 1
78796: PPUSH
78797: CALL_OW 483
// CenterOnXY ( x , y ) ;
78801: LD_VAR 0 2
78805: PPUSH
78806: LD_VAR 0 3
78810: PPUSH
78811: CALL_OW 84
// end ;
78815: LD_VAR 0 4
78819: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
78820: LD_INT 0
78822: PPUSH
78823: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
78824: LD_VAR 0 1
78828: NOT
78829: PUSH
78830: LD_VAR 0 2
78834: PPUSH
78835: LD_VAR 0 3
78839: PPUSH
78840: CALL_OW 488
78844: NOT
78845: OR
78846: PUSH
78847: LD_VAR 0 1
78851: PPUSH
78852: CALL_OW 266
78856: PUSH
78857: LD_INT 3
78859: NONEQUAL
78860: PUSH
78861: LD_VAR 0 1
78865: PPUSH
78866: CALL_OW 247
78870: PUSH
78871: LD_INT 1
78873: EQUAL
78874: NOT
78875: AND
78876: OR
78877: IFFALSE 78881
// exit ;
78879: GO 79030
// if GetType ( factory ) = unit_human then
78881: LD_VAR 0 1
78885: PPUSH
78886: CALL_OW 247
78890: PUSH
78891: LD_INT 1
78893: EQUAL
78894: IFFALSE 78911
// factory := IsInUnit ( factory ) ;
78896: LD_ADDR_VAR 0 1
78900: PUSH
78901: LD_VAR 0 1
78905: PPUSH
78906: CALL_OW 310
78910: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
78911: LD_VAR 0 1
78915: PPUSH
78916: CALL_OW 266
78920: PUSH
78921: LD_INT 3
78923: NONEQUAL
78924: IFFALSE 78928
// exit ;
78926: GO 79030
// if HexInfo ( x , y ) = factory then
78928: LD_VAR 0 2
78932: PPUSH
78933: LD_VAR 0 3
78937: PPUSH
78938: CALL_OW 428
78942: PUSH
78943: LD_VAR 0 1
78947: EQUAL
78948: IFFALSE 78975
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
78950: LD_ADDR_EXP 121
78954: PUSH
78955: LD_EXP 121
78959: PPUSH
78960: LD_VAR 0 1
78964: PPUSH
78965: LD_INT 0
78967: PPUSH
78968: CALL_OW 1
78972: ST_TO_ADDR
78973: GO 79026
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
78975: LD_ADDR_EXP 121
78979: PUSH
78980: LD_EXP 121
78984: PPUSH
78985: LD_VAR 0 1
78989: PPUSH
78990: LD_VAR 0 1
78994: PPUSH
78995: CALL_OW 255
78999: PUSH
79000: LD_VAR 0 1
79004: PUSH
79005: LD_VAR 0 2
79009: PUSH
79010: LD_VAR 0 3
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: PPUSH
79021: CALL_OW 1
79025: ST_TO_ADDR
// UpdateFactoryWaypoints ;
79026: CALL 79035 0 0
// end ;
79030: LD_VAR 0 4
79034: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
79035: LD_INT 0
79037: PPUSH
79038: PPUSH
79039: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
79040: LD_STRING resetFactoryWaypoint();
79042: PPUSH
79043: CALL_OW 559
// if factoryWaypoints then
79047: LD_EXP 121
79051: IFFALSE 79177
// begin list := PrepareArray ( factoryWaypoints ) ;
79053: LD_ADDR_VAR 0 3
79057: PUSH
79058: LD_EXP 121
79062: PPUSH
79063: CALL 58095 0 1
79067: ST_TO_ADDR
// for i := 1 to list do
79068: LD_ADDR_VAR 0 2
79072: PUSH
79073: DOUBLE
79074: LD_INT 1
79076: DEC
79077: ST_TO_ADDR
79078: LD_VAR 0 3
79082: PUSH
79083: FOR_TO
79084: IFFALSE 79175
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79086: LD_STRING setFactoryWaypointXY(
79088: PUSH
79089: LD_VAR 0 3
79093: PUSH
79094: LD_VAR 0 2
79098: ARRAY
79099: PUSH
79100: LD_INT 1
79102: ARRAY
79103: STR
79104: PUSH
79105: LD_STRING ,
79107: STR
79108: PUSH
79109: LD_VAR 0 3
79113: PUSH
79114: LD_VAR 0 2
79118: ARRAY
79119: PUSH
79120: LD_INT 2
79122: ARRAY
79123: STR
79124: PUSH
79125: LD_STRING ,
79127: STR
79128: PUSH
79129: LD_VAR 0 3
79133: PUSH
79134: LD_VAR 0 2
79138: ARRAY
79139: PUSH
79140: LD_INT 3
79142: ARRAY
79143: STR
79144: PUSH
79145: LD_STRING ,
79147: STR
79148: PUSH
79149: LD_VAR 0 3
79153: PUSH
79154: LD_VAR 0 2
79158: ARRAY
79159: PUSH
79160: LD_INT 4
79162: ARRAY
79163: STR
79164: PUSH
79165: LD_STRING )
79167: STR
79168: PPUSH
79169: CALL_OW 559
79173: GO 79083
79175: POP
79176: POP
// end ; end ;
79177: LD_VAR 0 1
79181: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
79182: LD_INT 0
79184: PPUSH
// if HexInfo ( x , y ) = warehouse then
79185: LD_VAR 0 2
79189: PPUSH
79190: LD_VAR 0 3
79194: PPUSH
79195: CALL_OW 428
79199: PUSH
79200: LD_VAR 0 1
79204: EQUAL
79205: IFFALSE 79232
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
79207: LD_ADDR_EXP 122
79211: PUSH
79212: LD_EXP 122
79216: PPUSH
79217: LD_VAR 0 1
79221: PPUSH
79222: LD_INT 0
79224: PPUSH
79225: CALL_OW 1
79229: ST_TO_ADDR
79230: GO 79283
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
79232: LD_ADDR_EXP 122
79236: PUSH
79237: LD_EXP 122
79241: PPUSH
79242: LD_VAR 0 1
79246: PPUSH
79247: LD_VAR 0 1
79251: PPUSH
79252: CALL_OW 255
79256: PUSH
79257: LD_VAR 0 1
79261: PUSH
79262: LD_VAR 0 2
79266: PUSH
79267: LD_VAR 0 3
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: LIST
79276: LIST
79277: PPUSH
79278: CALL_OW 1
79282: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
79283: CALL 79292 0 0
// end ;
79287: LD_VAR 0 4
79291: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
79292: LD_INT 0
79294: PPUSH
79295: PPUSH
79296: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
79297: LD_STRING resetWarehouseGatheringPoints();
79299: PPUSH
79300: CALL_OW 559
// if warehouseGatheringPoints then
79304: LD_EXP 122
79308: IFFALSE 79434
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
79310: LD_ADDR_VAR 0 3
79314: PUSH
79315: LD_EXP 122
79319: PPUSH
79320: CALL 58095 0 1
79324: ST_TO_ADDR
// for i := 1 to list do
79325: LD_ADDR_VAR 0 2
79329: PUSH
79330: DOUBLE
79331: LD_INT 1
79333: DEC
79334: ST_TO_ADDR
79335: LD_VAR 0 3
79339: PUSH
79340: FOR_TO
79341: IFFALSE 79432
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
79343: LD_STRING setWarehouseGatheringPointXY(
79345: PUSH
79346: LD_VAR 0 3
79350: PUSH
79351: LD_VAR 0 2
79355: ARRAY
79356: PUSH
79357: LD_INT 1
79359: ARRAY
79360: STR
79361: PUSH
79362: LD_STRING ,
79364: STR
79365: PUSH
79366: LD_VAR 0 3
79370: PUSH
79371: LD_VAR 0 2
79375: ARRAY
79376: PUSH
79377: LD_INT 2
79379: ARRAY
79380: STR
79381: PUSH
79382: LD_STRING ,
79384: STR
79385: PUSH
79386: LD_VAR 0 3
79390: PUSH
79391: LD_VAR 0 2
79395: ARRAY
79396: PUSH
79397: LD_INT 3
79399: ARRAY
79400: STR
79401: PUSH
79402: LD_STRING ,
79404: STR
79405: PUSH
79406: LD_VAR 0 3
79410: PUSH
79411: LD_VAR 0 2
79415: ARRAY
79416: PUSH
79417: LD_INT 4
79419: ARRAY
79420: STR
79421: PUSH
79422: LD_STRING )
79424: STR
79425: PPUSH
79426: CALL_OW 559
79430: GO 79340
79432: POP
79433: POP
// end ; end ;
79434: LD_VAR 0 1
79438: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
79439: LD_EXP 122
79443: IFFALSE 80128
79445: GO 79447
79447: DISABLE
79448: LD_INT 0
79450: PPUSH
79451: PPUSH
79452: PPUSH
79453: PPUSH
79454: PPUSH
79455: PPUSH
79456: PPUSH
79457: PPUSH
79458: PPUSH
// begin enable ;
79459: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
79460: LD_ADDR_VAR 0 3
79464: PUSH
79465: LD_EXP 122
79469: PPUSH
79470: CALL 58095 0 1
79474: ST_TO_ADDR
// if not list then
79475: LD_VAR 0 3
79479: NOT
79480: IFFALSE 79484
// exit ;
79482: GO 80128
// for i := 1 to list do
79484: LD_ADDR_VAR 0 1
79488: PUSH
79489: DOUBLE
79490: LD_INT 1
79492: DEC
79493: ST_TO_ADDR
79494: LD_VAR 0 3
79498: PUSH
79499: FOR_TO
79500: IFFALSE 80126
// begin depot := list [ i ] [ 2 ] ;
79502: LD_ADDR_VAR 0 8
79506: PUSH
79507: LD_VAR 0 3
79511: PUSH
79512: LD_VAR 0 1
79516: ARRAY
79517: PUSH
79518: LD_INT 2
79520: ARRAY
79521: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
79522: LD_ADDR_VAR 0 5
79526: PUSH
79527: LD_VAR 0 3
79531: PUSH
79532: LD_VAR 0 1
79536: ARRAY
79537: PUSH
79538: LD_INT 1
79540: ARRAY
79541: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
79542: LD_VAR 0 8
79546: PPUSH
79547: CALL_OW 301
79551: PUSH
79552: LD_VAR 0 5
79556: PUSH
79557: LD_VAR 0 8
79561: PPUSH
79562: CALL_OW 255
79566: NONEQUAL
79567: OR
79568: IFFALSE 79597
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
79570: LD_ADDR_EXP 122
79574: PUSH
79575: LD_EXP 122
79579: PPUSH
79580: LD_VAR 0 8
79584: PPUSH
79585: LD_INT 0
79587: PPUSH
79588: CALL_OW 1
79592: ST_TO_ADDR
// exit ;
79593: POP
79594: POP
79595: GO 80128
// end ; x := list [ i ] [ 3 ] ;
79597: LD_ADDR_VAR 0 6
79601: PUSH
79602: LD_VAR 0 3
79606: PUSH
79607: LD_VAR 0 1
79611: ARRAY
79612: PUSH
79613: LD_INT 3
79615: ARRAY
79616: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
79617: LD_ADDR_VAR 0 7
79621: PUSH
79622: LD_VAR 0 3
79626: PUSH
79627: LD_VAR 0 1
79631: ARRAY
79632: PUSH
79633: LD_INT 4
79635: ARRAY
79636: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
79637: LD_ADDR_VAR 0 9
79641: PUSH
79642: LD_VAR 0 6
79646: PPUSH
79647: LD_VAR 0 7
79651: PPUSH
79652: LD_INT 16
79654: PPUSH
79655: CALL 56683 0 3
79659: ST_TO_ADDR
// if not cratesNearbyPoint then
79660: LD_VAR 0 9
79664: NOT
79665: IFFALSE 79671
// exit ;
79667: POP
79668: POP
79669: GO 80128
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
79671: LD_ADDR_VAR 0 4
79675: PUSH
79676: LD_INT 22
79678: PUSH
79679: LD_VAR 0 5
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: PUSH
79688: LD_INT 3
79690: PUSH
79691: LD_INT 60
79693: PUSH
79694: EMPTY
79695: LIST
79696: PUSH
79697: EMPTY
79698: LIST
79699: LIST
79700: PUSH
79701: LD_INT 91
79703: PUSH
79704: LD_VAR 0 8
79708: PUSH
79709: LD_INT 6
79711: PUSH
79712: EMPTY
79713: LIST
79714: LIST
79715: LIST
79716: PUSH
79717: LD_INT 2
79719: PUSH
79720: LD_INT 25
79722: PUSH
79723: LD_INT 2
79725: PUSH
79726: EMPTY
79727: LIST
79728: LIST
79729: PUSH
79730: LD_INT 25
79732: PUSH
79733: LD_INT 16
79735: PUSH
79736: EMPTY
79737: LIST
79738: LIST
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: LIST
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: LIST
79749: LIST
79750: PPUSH
79751: CALL_OW 69
79755: PUSH
79756: LD_VAR 0 8
79760: PPUSH
79761: CALL_OW 313
79765: PPUSH
79766: LD_INT 3
79768: PUSH
79769: LD_INT 60
79771: PUSH
79772: EMPTY
79773: LIST
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: PUSH
79779: LD_INT 2
79781: PUSH
79782: LD_INT 25
79784: PUSH
79785: LD_INT 2
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: PUSH
79792: LD_INT 25
79794: PUSH
79795: LD_INT 16
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: LIST
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PPUSH
79811: CALL_OW 72
79815: UNION
79816: ST_TO_ADDR
// if tmp then
79817: LD_VAR 0 4
79821: IFFALSE 79901
// begin tmp := ShrinkArray ( tmp , 3 ) ;
79823: LD_ADDR_VAR 0 4
79827: PUSH
79828: LD_VAR 0 4
79832: PPUSH
79833: LD_INT 3
79835: PPUSH
79836: CALL 54652 0 2
79840: ST_TO_ADDR
// for j in tmp do
79841: LD_ADDR_VAR 0 2
79845: PUSH
79846: LD_VAR 0 4
79850: PUSH
79851: FOR_IN
79852: IFFALSE 79895
// begin if IsInUnit ( j ) then
79854: LD_VAR 0 2
79858: PPUSH
79859: CALL_OW 310
79863: IFFALSE 79874
// ComExit ( j ) ;
79865: LD_VAR 0 2
79869: PPUSH
79870: CALL 54735 0 1
// AddComCollect ( j , x , y ) ;
79874: LD_VAR 0 2
79878: PPUSH
79879: LD_VAR 0 6
79883: PPUSH
79884: LD_VAR 0 7
79888: PPUSH
79889: CALL_OW 177
// end ;
79893: GO 79851
79895: POP
79896: POP
// exit ;
79897: POP
79898: POP
79899: GO 80128
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
79901: LD_ADDR_VAR 0 4
79905: PUSH
79906: LD_INT 22
79908: PUSH
79909: LD_VAR 0 5
79913: PUSH
79914: EMPTY
79915: LIST
79916: LIST
79917: PUSH
79918: LD_INT 91
79920: PUSH
79921: LD_VAR 0 8
79925: PUSH
79926: LD_INT 8
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: LIST
79933: PUSH
79934: LD_INT 2
79936: PUSH
79937: LD_INT 34
79939: PUSH
79940: LD_INT 12
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: PUSH
79947: LD_INT 34
79949: PUSH
79950: LD_INT 51
79952: PUSH
79953: EMPTY
79954: LIST
79955: LIST
79956: PUSH
79957: LD_INT 34
79959: PUSH
79960: LD_INT 32
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 34
79969: PUSH
79970: LD_INT 89
79972: PUSH
79973: EMPTY
79974: LIST
79975: LIST
79976: PUSH
79977: EMPTY
79978: LIST
79979: LIST
79980: LIST
79981: LIST
79982: LIST
79983: PUSH
79984: EMPTY
79985: LIST
79986: LIST
79987: LIST
79988: PPUSH
79989: CALL_OW 69
79993: ST_TO_ADDR
// if tmp then
79994: LD_VAR 0 4
79998: IFFALSE 80124
// begin for j in tmp do
80000: LD_ADDR_VAR 0 2
80004: PUSH
80005: LD_VAR 0 4
80009: PUSH
80010: FOR_IN
80011: IFFALSE 80122
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
80013: LD_VAR 0 2
80017: PPUSH
80018: CALL_OW 262
80022: PUSH
80023: LD_INT 3
80025: EQUAL
80026: PUSH
80027: LD_VAR 0 2
80031: PPUSH
80032: CALL_OW 261
80036: PUSH
80037: LD_INT 20
80039: GREATER
80040: OR
80041: PUSH
80042: LD_VAR 0 2
80046: PPUSH
80047: CALL_OW 314
80051: NOT
80052: AND
80053: PUSH
80054: LD_VAR 0 2
80058: PPUSH
80059: CALL_OW 263
80063: PUSH
80064: LD_INT 1
80066: NONEQUAL
80067: PUSH
80068: LD_VAR 0 2
80072: PPUSH
80073: CALL_OW 311
80077: OR
80078: AND
80079: IFFALSE 80120
// begin ComCollect ( j , x , y ) ;
80081: LD_VAR 0 2
80085: PPUSH
80086: LD_VAR 0 6
80090: PPUSH
80091: LD_VAR 0 7
80095: PPUSH
80096: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
80100: LD_VAR 0 2
80104: PPUSH
80105: LD_VAR 0 8
80109: PPUSH
80110: CALL_OW 172
// exit ;
80114: POP
80115: POP
80116: POP
80117: POP
80118: GO 80128
// end ;
80120: GO 80010
80122: POP
80123: POP
// end ; end ;
80124: GO 79499
80126: POP
80127: POP
// end ; end_of_file
80128: PPOPN 9
80130: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80131: LD_VAR 0 1
80135: PPUSH
80136: LD_VAR 0 2
80140: PPUSH
80141: LD_VAR 0 3
80145: PPUSH
80146: LD_VAR 0 4
80150: PPUSH
80151: LD_VAR 0 5
80155: PPUSH
80156: LD_VAR 0 6
80160: PPUSH
80161: CALL 64484 0 6
// end ;
80165: PPOPN 6
80167: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80168: LD_INT 0
80170: PPUSH
// begin if not units then
80171: LD_VAR 0 1
80175: NOT
80176: IFFALSE 80180
// exit ;
80178: GO 80180
// end ;
80180: PPOPN 7
80182: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80183: CALL 64388 0 0
// end ;
80187: PPOPN 1
80189: END
