// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3923 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5869 0 1
  44: PPUSH
  45: CALL 1028 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5869 0 1
  56: PPUSH
  57: CALL 12416 0 1
// Multiplayer_Start ;
  61: CALL 7599 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 42
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 42
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7718 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: IFFALSE 199
 192: PUSH
 193: LD_OWVAR 48
 197: NOT
 198: AND
 199: IFFALSE 215
 201: GO 203
 203: DISABLE
// begin enable ;
 204: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 205: LD_ADDR_OWVAR 47
 209: PUSH
 210: CALL 8151 0 0
 214: ST_TO_ADDR
// end ; end_of_file
 215: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] , [ 26 , 30 , 34 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 216: LD_EXP 41
 220: PUSH
 221: LD_INT 6
 223: PUSH
 224: LD_INT 8
 226: PUSH
 227: LD_INT 10
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: LIST
 234: PUSH
 235: LD_OWVAR 67
 239: ARRAY
 240: PUSH
 241: LD_INT 16
 243: PUSH
 244: LD_INT 20
 246: PUSH
 247: LD_INT 24
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: PUSH
 261: LD_INT 26
 263: PUSH
 264: LD_INT 30
 266: PUSH
 267: LD_INT 34
 269: PUSH
 270: EMPTY
 271: LIST
 272: LIST
 273: LIST
 274: PUSH
 275: LD_OWVAR 67
 279: ARRAY
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: IN
 286: IFFALSE 660
 288: GO 290
 290: DISABLE
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// begin repeat wait ( 10 ) ;
 298: LD_INT 10
 300: PPUSH
 301: CALL_OW 67
// until not blockThread ;
 305: LD_EXP 6
 309: NOT
 310: IFFALSE 298
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 312: LD_ADDR_VAR 0 5
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: ST_TO_ADDR
// for i := 1 to 8 do
 337: LD_ADDR_VAR 0 1
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 8
 349: PUSH
 350: FOR_TO
 351: IFFALSE 650
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 353: LD_EXP 15
 357: PUSH
 358: LD_VAR 0 1
 362: ARRAY
 363: PUSH
 364: LD_INT 2
 366: EQUAL
 367: IFFALSE 382
 369: PUSH
 370: LD_EXP 32
 374: PUSH
 375: LD_VAR 0 1
 379: ARRAY
 380: NOT
 381: AND
 382: IFFALSE 648
// begin uc_side := i ;
 384: LD_ADDR_OWVAR 20
 388: PUSH
 389: LD_VAR 0 1
 393: ST_TO_ADDR
// uc_nation := nation_russian ;
 394: LD_ADDR_OWVAR 21
 398: PUSH
 399: LD_INT 3
 401: ST_TO_ADDR
// if i = your_side then
 402: LD_VAR 0 1
 406: PUSH
 407: LD_OWVAR 2
 411: EQUAL
 412: IFFALSE 424
// CenterNowOnXY ( 112 , 172 ) ;
 414: LD_INT 112
 416: PPUSH
 417: LD_INT 172
 419: PPUSH
 420: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 424: LD_INT 0
 426: PPUSH
 427: LD_VAR 0 5
 431: PPUSH
 432: CALL_OW 382
// un := CreateHuman ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: CALL_OW 44
 445: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 446: LD_VAR 0 3
 450: PPUSH
 451: LD_INT 25
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 49
// for j := 1 to 2 do
 461: LD_ADDR_VAR 0 2
 465: PUSH
 466: DOUBLE
 467: LD_INT 1
 469: DEC
 470: ST_TO_ADDR
 471: LD_INT 2
 473: PUSH
 474: FOR_TO
 475: IFFALSE 516
// begin PrepareMechanic ( false , skill ) ;
 477: LD_INT 0
 479: PPUSH
 480: LD_VAR 0 5
 484: PPUSH
 485: CALL_OW 383
// un := CreateHuman ;
 489: LD_ADDR_VAR 0 3
 493: PUSH
 494: CALL_OW 44
 498: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 499: LD_VAR 0 3
 503: PPUSH
 504: LD_INT 25
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// end ;
 514: GO 474
 516: POP
 517: POP
// for j := 1 to 2 do
 518: LD_ADDR_VAR 0 2
 522: PUSH
 523: DOUBLE
 524: LD_INT 1
 526: DEC
 527: ST_TO_ADDR
 528: LD_INT 2
 530: PUSH
 531: FOR_TO
 532: IFFALSE 646
// begin uc_side := i ;
 534: LD_ADDR_OWVAR 20
 538: PUSH
 539: LD_VAR 0 1
 543: ST_TO_ADDR
// uc_nation := nation_russian ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 3
 551: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 552: LD_INT 22
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: LD_INT 1
 560: PPUSH
 561: LD_INT 44
 563: PPUSH
 564: LD_INT 50
 566: PPUSH
 567: CALL 20590 0 5
// veh := CreateVehicle ;
 571: LD_ADDR_VAR 0 4
 575: PUSH
 576: CALL_OW 45
 580: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 581: LD_VAR 0 4
 585: PPUSH
 586: LD_INT 5
 588: PPUSH
 589: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 593: LD_INT 0
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: CALL_OW 383
// un := CreateHuman ;
 605: LD_ADDR_VAR 0 3
 609: PUSH
 610: CALL_OW 44
 614: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 615: LD_VAR 0 4
 619: PPUSH
 620: LD_INT 25
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 630: LD_VAR 0 3
 634: PPUSH
 635: LD_VAR 0 4
 639: PPUSH
 640: CALL_OW 52
// end ;
 644: GO 531
 646: POP
 647: POP
// end ;
 648: GO 350
 650: POP
 651: POP
// wait ( 10 10$0 ) ;
 652: LD_INT 21000
 654: PPUSH
 655: CALL_OW 67
// enable ;
 659: ENABLE
// end ;
 660: PPOPN 5
 662: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 22 , 26 , 30 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 663: LD_EXP 41
 667: PUSH
 668: LD_INT 12
 670: PUSH
 671: LD_INT 14
 673: PUSH
 674: LD_INT 16
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: LD_OWVAR 67
 686: ARRAY
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_INT 26
 693: PUSH
 694: LD_INT 30
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: LD_OWVAR 67
 706: ARRAY
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 36
 713: PUSH
 714: LD_INT 40
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: PUSH
 722: LD_OWVAR 67
 726: ARRAY
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: IN
 733: IFFALSE 1025
 735: GO 737
 737: DISABLE
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// begin repeat wait ( 10 ) ;
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 67
// until not blockThread ;
 752: LD_EXP 6
 756: NOT
 757: IFFALSE 745
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 759: LD_ADDR_VAR 0 5
 763: PUSH
 764: LD_INT 6
 766: PUSH
 767: LD_INT 5
 769: PUSH
 770: LD_INT 4
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// for i := 1 to 8 do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 8
 796: PUSH
 797: FOR_TO
 798: IFFALSE 1015
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 800: LD_EXP 15
 804: PUSH
 805: LD_VAR 0 1
 809: ARRAY
 810: PUSH
 811: LD_INT 1
 813: EQUAL
 814: IFFALSE 829
 816: PUSH
 817: LD_EXP 32
 821: PUSH
 822: LD_VAR 0 1
 826: ARRAY
 827: NOT
 828: AND
 829: IFFALSE 1013
// begin if i = your_side then
 831: LD_VAR 0 1
 835: PUSH
 836: LD_OWVAR 2
 840: EQUAL
 841: IFFALSE 853
// CenterNowOnXY ( 112 , 172 ) ;
 843: LD_INT 112
 845: PPUSH
 846: LD_INT 172
 848: PPUSH
 849: CALL_OW 86
// for j := 1 to 3 do
 853: LD_ADDR_VAR 0 2
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_INT 3
 865: PUSH
 866: FOR_TO
 867: IFFALSE 1011
// begin uc_side := i ;
 869: LD_ADDR_OWVAR 20
 873: PUSH
 874: LD_VAR 0 1
 878: ST_TO_ADDR
// uc_nation := nation_russian ;
 879: LD_ADDR_OWVAR 21
 883: PUSH
 884: LD_INT 3
 886: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ j mod 2 + 1 ] , 50 ) ;
 887: LD_INT 22
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: LD_INT 44
 898: PUSH
 899: LD_INT 43
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_VAR 0 2
 910: PUSH
 911: LD_INT 2
 913: MOD
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: PPUSH
 920: LD_INT 50
 922: PPUSH
 923: CALL 20590 0 5
// veh := CreateVehicle ;
 927: LD_ADDR_VAR 0 4
 931: PUSH
 932: CALL_OW 45
 936: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 937: LD_VAR 0 4
 941: PPUSH
 942: LD_INT 5
 944: PPUSH
 945: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 949: LD_INT 0
 951: PPUSH
 952: LD_VAR 0 5
 956: PPUSH
 957: CALL_OW 383
// un := CreateHuman ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: CALL_OW 44
 970: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 971: LD_INT 35
 973: PPUSH
 974: CALL_OW 67
// until PlaceUnitArea ( veh , southRefArea , false ) ;
 978: LD_VAR 0 4
 982: PPUSH
 983: LD_INT 25
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 49
 993: IFFALSE 971
// PlaceHumanInUnit ( un , veh ) ;
 995: LD_VAR 0 3
 999: PPUSH
1000: LD_VAR 0 4
1004: PPUSH
1005: CALL_OW 52
// end ;
1009: GO 866
1011: POP
1012: POP
// end ;
1013: GO 797
1015: POP
1016: POP
// wait ( 10 10$0 ) ;
1017: LD_INT 21000
1019: PPUSH
1020: CALL_OW 67
// enable ;
1024: ENABLE
// end ; end_of_file
1025: PPOPN 5
1027: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
1028: LD_INT 0
1030: PPUSH
1031: PPUSH
1032: PPUSH
1033: PPUSH
1034: PPUSH
// enemySide := side ;
1035: LD_ADDR_EXP 12
1039: PUSH
1040: LD_VAR 0 1
1044: ST_TO_ADDR
// enemyUnits := [ ] ;
1045: LD_ADDR_EXP 9
1049: PUSH
1050: EMPTY
1051: ST_TO_ADDR
// enemyMobile := [ ] ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// enemyForestGuard := [ ] ;
1059: LD_ADDR_EXP 11
1063: PUSH
1064: EMPTY
1065: ST_TO_ADDR
// arAttackersInf := [ ] ;
1066: LD_ADDR_EXP 13
1070: PUSH
1071: EMPTY
1072: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 6
1083: PUSH
1084: LD_INT 8
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_OWVAR 67
1096: ARRAY
1097: ST_TO_ADDR
// uc_side := side ;
1098: LD_ADDR_OWVAR 20
1102: PUSH
1103: LD_VAR 0 1
1107: ST_TO_ADDR
// uc_nation := nation_arabian ;
1108: LD_ADDR_OWVAR 21
1112: PUSH
1113: LD_INT 2
1115: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: PUSH
1146: FOR_TO
1147: IFFALSE 1234
// begin PrepareSoldier ( false , skill ) ;
1149: LD_INT 0
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 381
// un := CreateHuman ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: CALL_OW 44
1170: ST_TO_ADDR
// if i mod 2 = 0 then
1171: LD_VAR 0 3
1175: PUSH
1176: LD_INT 2
1178: MOD
1179: PUSH
1180: LD_INT 0
1182: EQUAL
1183: IFFALSE 1197
// SetClass ( un , class_mortar ) ;
1185: LD_VAR 0 4
1189: PPUSH
1190: LD_INT 8
1192: PPUSH
1193: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1197: LD_ADDR_EXP 11
1201: PUSH
1202: LD_EXP 11
1206: PPUSH
1207: LD_VAR 0 4
1211: PPUSH
1212: CALL 53760 0 2
1216: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_INT 17
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 49
// end ;
1232: GO 1146
1234: POP
1235: POP
// for i := 1 to 2 do
1236: LD_ADDR_VAR 0 3
1240: PUSH
1241: DOUBLE
1242: LD_INT 1
1244: DEC
1245: ST_TO_ADDR
1246: LD_INT 2
1248: PUSH
1249: FOR_TO
1250: IFFALSE 1311
// begin PrepareScientist ( false , skill ) ;
1252: LD_INT 0
1254: PPUSH
1255: LD_VAR 0 5
1259: PPUSH
1260: CALL_OW 384
// un := CreateHuman ;
1264: LD_ADDR_VAR 0 4
1268: PUSH
1269: CALL_OW 44
1273: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1274: LD_ADDR_EXP 11
1278: PUSH
1279: LD_EXP 11
1283: PPUSH
1284: LD_VAR 0 4
1288: PPUSH
1289: CALL 53760 0 2
1293: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1294: LD_VAR 0 4
1298: PPUSH
1299: LD_INT 17
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// end ;
1309: GO 1249
1311: POP
1312: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_INT 2
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_OWVAR 67
1341: ARRAY
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1480
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1346: LD_INT 14
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_INT 27
1357: PPUSH
1358: LD_INT 100
1360: PPUSH
1361: CALL 20590 0 5
// veh := CreateVehicle ;
1365: LD_ADDR_VAR 0 6
1369: PUSH
1370: CALL_OW 45
1374: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1375: LD_ADDR_EXP 11
1379: PUSH
1380: LD_EXP 11
1384: PPUSH
1385: LD_VAR 0 6
1389: PPUSH
1390: CALL 53760 0 2
1394: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1395: LD_VAR 0 6
1399: PPUSH
1400: LD_INT 5
1402: PPUSH
1403: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1407: LD_INT 0
1409: PPUSH
1410: LD_VAR 0 5
1414: PPUSH
1415: CALL_OW 383
// un := CreateHuman ;
1419: LD_ADDR_VAR 0 4
1423: PUSH
1424: CALL_OW 44
1428: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1429: LD_ADDR_EXP 11
1433: PUSH
1434: LD_EXP 11
1438: PPUSH
1439: LD_VAR 0 4
1443: PPUSH
1444: CALL 53760 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1449: LD_VAR 0 6
1453: PPUSH
1454: LD_INT 18
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1464: LD_VAR 0 4
1468: PPUSH
1469: LD_VAR 0 6
1473: PPUSH
1474: CALL_OW 52
// end ;
1478: GO 1343
1480: POP
1481: POP
// for i := 1 to 2 do
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_INT 2
1494: PUSH
1495: FOR_TO
1496: IFFALSE 1579
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1498: LD_INT 14
1500: PPUSH
1501: LD_INT 2
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 32
1509: PPUSH
1510: LD_INT 100
1512: PPUSH
1513: CALL 20590 0 5
// veh := CreateVehicle ;
1517: LD_ADDR_VAR 0 6
1521: PUSH
1522: CALL_OW 45
1526: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1527: LD_VAR 0 6
1531: PPUSH
1532: LD_INT 2
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 12
1542: PPUSH
1543: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1547: LD_VAR 0 6
1551: PPUSH
1552: LD_INT 22
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1562: LD_VAR 0 6
1566: PPUSH
1567: LD_INT 2
1569: PPUSH
1570: LD_INT 100
1572: PPUSH
1573: CALL_OW 290
// end ;
1577: GO 1495
1579: POP
1580: POP
// end ;
1581: LD_VAR 0 2
1585: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// blockThread := true ;
1594: LD_ADDR_EXP 6
1598: PUSH
1599: LD_INT 1
1601: ST_TO_ADDR
// v := convoyWave div 12 ;
1602: LD_ADDR_VAR 0 6
1606: PUSH
1607: LD_EXP 41
1611: PUSH
1612: LD_INT 12
1614: DIV
1615: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 6
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_VAR 0 6
1645: PLUS
1646: ST_TO_ADDR
// if skill > 10 then
1647: LD_VAR 0 5
1651: PUSH
1652: LD_INT 10
1654: GREATER
1655: IFFALSE 1665
// skill := 10 ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_INT 10
1664: ST_TO_ADDR
// if v > 8 then
1665: LD_VAR 0 6
1669: PUSH
1670: LD_INT 8
1672: GREATER
1673: IFFALSE 1683
// v := 8 ;
1675: LD_ADDR_VAR 0 6
1679: PUSH
1680: LD_INT 8
1682: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1683: LD_ADDR_VAR 0 2
1687: PUSH
1688: DOUBLE
1689: LD_INT 1
1691: DEC
1692: ST_TO_ADDR
1693: LD_INT 2
1695: PUSH
1696: LD_INT 3
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_OWVAR 67
1711: ARRAY
1712: PUSH
1713: LD_VAR 0 6
1717: PLUS
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1899
// begin uc_side := enemySide ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_EXP 12
1731: ST_TO_ADDR
// uc_nation := nation_arabian ;
1732: LD_ADDR_OWVAR 21
1736: PUSH
1737: LD_INT 2
1739: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1740: LD_INT 14
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: LD_INT 27
1751: PUSH
1752: LD_INT 25
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 2
1766: MOD
1767: PUSH
1768: LD_INT 1
1770: PLUS
1771: ARRAY
1772: PPUSH
1773: LD_INT 100
1775: PPUSH
1776: CALL 20590 0 5
// veh := CreateVehicle ;
1780: LD_ADDR_VAR 0 3
1784: PUSH
1785: CALL_OW 45
1789: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1790: LD_ADDR_EXP 10
1794: PUSH
1795: LD_EXP 10
1799: PPUSH
1800: LD_VAR 0 3
1804: PPUSH
1805: CALL 53760 0 2
1809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1810: LD_VAR 0 3
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_VAR 0 5
1829: PPUSH
1830: CALL_OW 383
// un := CreateHuman ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: CALL_OW 44
1843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1844: LD_INT 35
1846: PPUSH
1847: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: LD_INT 23
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
1866: IFFALSE 1844
// PlaceHumanInUnit ( un , veh ) ;
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1882: LD_VAR 0 3
1886: PPUSH
1887: LD_INT 104
1889: PPUSH
1890: LD_INT 18
1892: PPUSH
1893: CALL_OW 111
// end ;
1897: GO 1719
1899: POP
1900: POP
// blockThread := false ;
1901: LD_ADDR_EXP 6
1905: PUSH
1906: LD_INT 0
1908: ST_TO_ADDR
// end ;
1909: LD_VAR 0 1
1913: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1914: LD_INT 0
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
// blockThread := true ;
1922: LD_ADDR_EXP 6
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// v := convoyWave div 12 ;
1930: LD_ADDR_VAR 0 6
1934: PUSH
1935: LD_EXP 41
1939: PUSH
1940: LD_INT 12
1942: DIV
1943: ST_TO_ADDR
// if v > 8 then
1944: LD_VAR 0 6
1948: PUSH
1949: LD_INT 8
1951: GREATER
1952: IFFALSE 1962
// v := 8 ;
1954: LD_ADDR_VAR 0 6
1958: PUSH
1959: LD_INT 8
1961: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1962: LD_ADDR_VAR 0 5
1966: PUSH
1967: LD_INT 4
1969: PUSH
1970: LD_INT 5
1972: PUSH
1973: LD_INT 6
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_OWVAR 67
1985: ARRAY
1986: PUSH
1987: LD_VAR 0 6
1991: PLUS
1992: ST_TO_ADDR
// if skill > 10 then
1993: LD_VAR 0 5
1997: PUSH
1998: LD_INT 10
2000: GREATER
2001: IFFALSE 2011
// skill := 10 ;
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_INT 10
2010: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: DOUBLE
2017: LD_INT 1
2019: DEC
2020: ST_TO_ADDR
2021: LD_INT 3
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_OWVAR 67
2039: ARRAY
2040: PUSH
2041: LD_VAR 0 6
2045: PLUS
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2231
// begin uc_side := enemySide ;
2050: LD_ADDR_OWVAR 20
2054: PUSH
2055: LD_EXP 12
2059: ST_TO_ADDR
// uc_nation := nation_arabian ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2068: LD_INT 14
2070: PPUSH
2071: LD_INT 1
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 27
2079: PUSH
2080: LD_INT 25
2082: PUSH
2083: LD_INT 26
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_VAR 0 2
2095: PUSH
2096: LD_INT 3
2098: MOD
2099: PUSH
2100: LD_INT 1
2102: PLUS
2103: ARRAY
2104: PPUSH
2105: LD_INT 100
2107: PPUSH
2108: CALL 20590 0 5
// veh := CreateVehicle ;
2112: LD_ADDR_VAR 0 3
2116: PUSH
2117: CALL_OW 45
2121: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2122: LD_ADDR_EXP 10
2126: PUSH
2127: LD_EXP 10
2131: PPUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL 53760 0 2
2141: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2142: LD_VAR 0 3
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2154: LD_INT 0
2156: PPUSH
2157: LD_VAR 0 5
2161: PPUSH
2162: CALL_OW 383
// un := CreateHuman ;
2166: LD_ADDR_VAR 0 4
2170: PUSH
2171: CALL_OW 44
2175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2176: LD_INT 35
2178: PPUSH
2179: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2183: LD_VAR 0 3
2187: PPUSH
2188: LD_INT 14
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: CALL_OW 49
2198: IFFALSE 2176
// PlaceHumanInUnit ( un , veh ) ;
2200: LD_VAR 0 4
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2214: LD_VAR 0 3
2218: PPUSH
2219: LD_INT 151
2221: PPUSH
2222: LD_INT 28
2224: PPUSH
2225: CALL_OW 111
// end ;
2229: GO 2047
2231: POP
2232: POP
// blockThread := false ;
2233: LD_ADDR_EXP 6
2237: PUSH
2238: LD_INT 0
2240: ST_TO_ADDR
// end ;
2241: LD_VAR 0 1
2245: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2246: LD_INT 0
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
// blockThread := true ;
2254: LD_ADDR_EXP 6
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2262: LD_ADDR_VAR 0 6
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: LD_INT 5
2272: PUSH
2273: LD_INT 7
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: LIST
2280: PUSH
2281: LD_OWVAR 67
2285: ARRAY
2286: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2287: LD_ADDR_VAR 0 5
2291: PUSH
2292: LD_INT 15
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: CALL_OW 517
2302: ST_TO_ADDR
// uc_side := enemySide ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_EXP 12
2312: ST_TO_ADDR
// uc_nation := nation_arabian ;
2313: LD_ADDR_OWVAR 21
2317: PUSH
2318: LD_INT 2
2320: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2321: LD_INT 0
2323: PPUSH
2324: LD_VAR 0 6
2328: PPUSH
2329: CALL_OW 383
// un := CreateHuman ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: CALL_OW 44
2342: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2343: LD_INT 14
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: LD_INT 26
2354: PPUSH
2355: LD_INT 100
2357: PPUSH
2358: CALL 20590 0 5
// veh := CreateVehicle ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: CALL_OW 45
2371: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2372: LD_VAR 0 4
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2384: LD_INT 35
2386: PPUSH
2387: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_INT 14
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 49
2406: IFFALSE 2384
// PlaceHumanInUnit ( un , veh ) ;
2408: LD_VAR 0 3
2412: PPUSH
2413: LD_VAR 0 4
2417: PPUSH
2418: CALL_OW 52
// blockThread := false ;
2422: LD_ADDR_EXP 6
2426: PUSH
2427: LD_INT 0
2429: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: DOUBLE
2436: LD_INT 1
2438: DEC
2439: ST_TO_ADDR
2440: LD_VAR 0 5
2444: PUSH
2445: LD_INT 1
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2496
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_VAR 0 5
2461: PUSH
2462: LD_INT 1
2464: ARRAY
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PPUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 2
2485: ARRAY
2486: PPUSH
2487: LD_INT 7
2489: PPUSH
2490: CALL 60699 0 4
2494: GO 2449
2496: POP
2497: POP
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// if IsDead ( veh ) then
2505: LD_VAR 0 4
2509: PPUSH
2510: CALL_OW 301
2514: IFFALSE 2518
// exit ;
2516: GO 2595
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2518: LD_INT 16
2520: PPUSH
2521: LD_INT 22
2523: PUSH
2524: LD_EXP 12
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 70
2537: IFTRUE 2551
2539: PUSH
2540: LD_VAR 0 4
2544: PPUSH
2545: CALL_OW 314
2549: NOT
2550: OR
2551: IFTRUE 2565
2553: PUSH
2554: LD_VAR 0 3
2558: PPUSH
2559: CALL_OW 314
2563: NOT
2564: OR
2565: IFFALSE 2498
// forestIsCleared := true ;
2567: LD_ADDR_EXP 7
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2575: LD_ADDR_EXP 10
2579: PUSH
2580: LD_EXP 10
2584: PPUSH
2585: LD_VAR 0 4
2589: PPUSH
2590: CALL 53760 0 2
2594: ST_TO_ADDR
// end ;
2595: LD_VAR 0 1
2599: RET
// export function SendWestGroup ; var i , un , skill ; begin
2600: LD_INT 0
2602: PPUSH
2603: PPUSH
2604: PPUSH
2605: PPUSH
// blockThread := true ;
2606: LD_ADDR_EXP 6
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2614: LD_ADDR_VAR 0 4
2618: PUSH
2619: LD_INT 3
2621: PUSH
2622: LD_INT 5
2624: PUSH
2625: LD_INT 7
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_OWVAR 67
2637: ARRAY
2638: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2639: LD_ADDR_VAR 0 2
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 2
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 3
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2795
// begin uc_side := enemySide ;
2672: LD_ADDR_OWVAR 20
2676: PUSH
2677: LD_EXP 12
2681: ST_TO_ADDR
// uc_nation := nation_arabian ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2690: LD_INT 0
2692: PPUSH
2693: LD_VAR 0 4
2697: PPUSH
2698: CALL_OW 381
// un := CreateHuman ;
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: CALL_OW 44
2711: ST_TO_ADDR
// if i mod 3 = 0 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 3
2719: MOD
2720: PUSH
2721: LD_INT 0
2723: EQUAL
2724: IFFALSE 2738
// SetClass ( un , class_mortar ) ;
2726: LD_VAR 0 3
2730: PPUSH
2731: LD_INT 8
2733: PPUSH
2734: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2738: LD_ADDR_EXP 9
2742: PUSH
2743: LD_EXP 9
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 53760 0 2
2757: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2758: LD_VAR 0 3
2762: PPUSH
2763: LD_INT 24
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 49
// result := Join ( result , un ) ;
2773: LD_ADDR_VAR 0 1
2777: PUSH
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 3
2787: PPUSH
2788: CALL 53760 0 2
2792: ST_TO_ADDR
// end ;
2793: GO 2669
2795: POP
2796: POP
// PrepareScientist ( false , skill ) ;
2797: LD_INT 0
2799: PPUSH
2800: LD_VAR 0 4
2804: PPUSH
2805: CALL_OW 384
// un := CreateHuman ;
2809: LD_ADDR_VAR 0 3
2813: PUSH
2814: CALL_OW 44
2818: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2819: LD_ADDR_EXP 9
2823: PUSH
2824: LD_EXP 9
2828: PPUSH
2829: LD_VAR 0 3
2833: PPUSH
2834: CALL 53760 0 2
2838: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2839: LD_VAR 0 3
2843: PPUSH
2844: LD_INT 24
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 49
// result := Join ( result , un ) ;
2854: LD_ADDR_VAR 0 1
2858: PUSH
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL 53760 0 2
2873: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 24
2881: PPUSH
2882: LD_INT 37
2884: PPUSH
2885: CALL_OW 114
// blockThread := false ;
2889: LD_ADDR_EXP 6
2893: PUSH
2894: LD_INT 0
2896: ST_TO_ADDR
// end ;
2897: LD_VAR 0 1
2901: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2902: LD_INT 0
2904: PPUSH
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
// blockThread := true ;
2910: LD_ADDR_EXP 6
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// v := convoyWave div 12 ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_EXP 41
2927: PUSH
2928: LD_INT 12
2930: DIV
2931: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2932: LD_ADDR_VAR 0 5
2936: PUSH
2937: LD_INT 4
2939: PUSH
2940: LD_INT 5
2942: PUSH
2943: LD_INT 6
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_OWVAR 67
2955: ARRAY
2956: PUSH
2957: LD_VAR 0 6
2961: PLUS
2962: ST_TO_ADDR
// if skill > 10 then
2963: LD_VAR 0 5
2967: PUSH
2968: LD_INT 10
2970: GREATER
2971: IFFALSE 2981
// skill := 10 ;
2973: LD_ADDR_VAR 0 5
2977: PUSH
2978: LD_INT 10
2980: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: LD_INT 3
2996: PUSH
2997: LD_INT 3
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: PUSH
3005: LD_OWVAR 67
3009: ARRAY
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3215
// begin uc_side := enemySide ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_EXP 12
3023: ST_TO_ADDR
// uc_nation := nation_arabian ;
3024: LD_ADDR_OWVAR 21
3028: PUSH
3029: LD_INT 2
3031: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
3032: LD_INT 14
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: LD_INT 27
3043: PUSH
3044: LD_INT 30
3046: PUSH
3047: LD_INT 23
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: PUSH
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 3
3062: MOD
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: ARRAY
3068: PPUSH
3069: LD_INT 100
3071: PPUSH
3072: CALL 20590 0 5
// veh := CreateVehicle ;
3076: LD_ADDR_VAR 0 3
3080: PUSH
3081: CALL_OW 45
3085: ST_TO_ADDR
// result := Join ( result , veh ) ;
3086: LD_ADDR_VAR 0 1
3090: PUSH
3091: LD_VAR 0 1
3095: PPUSH
3096: LD_VAR 0 3
3100: PPUSH
3101: CALL 53760 0 2
3105: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 4
3113: PPUSH
3114: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_VAR 0 5
3125: PPUSH
3126: CALL_OW 383
// un := CreateHuman ;
3130: LD_ADDR_VAR 0 4
3134: PUSH
3135: CALL_OW 44
3139: ST_TO_ADDR
// result := Join ( result , un ) ;
3140: LD_ADDR_VAR 0 1
3144: PUSH
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: CALL 53760 0 2
3159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 14
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 49
3182: IFFALSE 3160
// PlaceHumanInUnit ( un , veh ) ;
3184: LD_VAR 0 4
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3198: LD_VAR 0 3
3202: PPUSH
3203: LD_INT 159
3205: PPUSH
3206: LD_INT 53
3208: PPUSH
3209: CALL_OW 111
// end ;
3213: GO 3011
3215: POP
3216: POP
// blockThread := false ;
3217: LD_ADDR_EXP 6
3221: PUSH
3222: LD_INT 0
3224: ST_TO_ADDR
// end ;
3225: LD_VAR 0 1
3229: RET
// export function SendEastGroup ; var i , un , skill ; begin
3230: LD_INT 0
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
// blockThread := true ;
3236: LD_ADDR_EXP 6
3240: PUSH
3241: LD_INT 1
3243: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3244: LD_ADDR_VAR 0 4
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: LD_INT 5
3254: PUSH
3255: LD_INT 7
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 4
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 6
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_OWVAR 67
3297: ARRAY
3298: PUSH
3299: FOR_TO
3300: IFFALSE 3405
// begin uc_side := enemySide ;
3302: LD_ADDR_OWVAR 20
3306: PUSH
3307: LD_EXP 12
3311: ST_TO_ADDR
// uc_nation := nation_arabian ;
3312: LD_ADDR_OWVAR 21
3316: PUSH
3317: LD_INT 2
3319: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3320: LD_INT 0
3322: PPUSH
3323: LD_VAR 0 4
3327: PPUSH
3328: CALL_OW 381
// un := CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// if i mod 3 = 0 then
3342: LD_VAR 0 2
3346: PUSH
3347: LD_INT 3
3349: MOD
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3368
// SetClass ( un , class_mortar ) ;
3356: LD_VAR 0 3
3360: PPUSH
3361: LD_INT 8
3363: PPUSH
3364: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: LD_INT 26
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 49
// result := Join ( result , un ) ;
3383: LD_ADDR_VAR 0 1
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: LD_VAR 0 3
3397: PPUSH
3398: CALL 53760 0 2
3402: ST_TO_ADDR
// end ;
3403: GO 3299
3405: POP
3406: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3407: LD_VAR 0 1
3411: PPUSH
3412: LD_INT 219
3414: PPUSH
3415: LD_INT 168
3417: PPUSH
3418: CALL_OW 114
// blockThread := false ;
3422: LD_ADDR_EXP 6
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// end ;
3430: LD_VAR 0 1
3434: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3435: LD_INT 0
3437: PPUSH
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
// blockThread := true ;
3442: LD_ADDR_EXP 6
3446: PUSH
3447: LD_INT 1
3449: ST_TO_ADDR
// v := convoyWave div 12 ;
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_EXP 41
3459: PUSH
3460: LD_INT 12
3462: DIV
3463: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3464: LD_ADDR_VAR 0 4
3468: PUSH
3469: LD_INT 4
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 6
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: PUSH
3489: LD_VAR 0 5
3493: PLUS
3494: ST_TO_ADDR
// if skill > 10 then
3495: LD_VAR 0 4
3499: PUSH
3500: LD_INT 10
3502: GREATER
3503: IFFALSE 3513
// skill := 10 ;
3505: LD_ADDR_VAR 0 4
3509: PUSH
3510: LD_INT 10
3512: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: DOUBLE
3519: LD_INT 1
3521: DEC
3522: ST_TO_ADDR
3523: LD_INT 3
3525: PUSH
3526: LD_INT 4
3528: PUSH
3529: LD_INT 5
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_OWVAR 67
3541: ARRAY
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3649
// begin uc_side := enemySide ;
3546: LD_ADDR_OWVAR 20
3550: PUSH
3551: LD_EXP 12
3555: ST_TO_ADDR
// uc_nation := nation_arabian ;
3556: LD_ADDR_OWVAR 21
3560: PUSH
3561: LD_INT 2
3563: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3564: LD_INT 0
3566: PPUSH
3567: LD_VAR 0 4
3571: PPUSH
3572: CALL_OW 381
// un := CreateHuman ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: CALL_OW 44
3585: ST_TO_ADDR
// if i mod 3 = 0 then
3586: LD_VAR 0 2
3590: PUSH
3591: LD_INT 3
3593: MOD
3594: PUSH
3595: LD_INT 0
3597: EQUAL
3598: IFFALSE 3612
// SetClass ( un , class_mortar ) ;
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 8
3607: PPUSH
3608: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3612: LD_VAR 0 3
3616: PPUSH
3617: LD_INT 27
3619: PPUSH
3620: LD_INT 0
3622: PPUSH
3623: CALL_OW 49
// result := Join ( result , un ) ;
3627: LD_ADDR_VAR 0 1
3631: PUSH
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_VAR 0 3
3641: PPUSH
3642: CALL 53760 0 2
3646: ST_TO_ADDR
// end ;
3647: GO 3543
3649: POP
3650: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3651: LD_VAR 0 1
3655: PPUSH
3656: LD_INT 77
3658: PPUSH
3659: LD_INT 23
3661: PPUSH
3662: CALL_OW 114
// blockThread := false ;
3666: LD_ADDR_EXP 6
3670: PUSH
3671: LD_INT 0
3673: ST_TO_ADDR
// end ;
3674: LD_VAR 0 1
3678: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3679: LD_INT 0
3681: PPUSH
3682: PPUSH
3683: PPUSH
3684: PPUSH
3685: PPUSH
// blockThread := true ;
3686: LD_ADDR_EXP 6
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// v := convoyWave div 12 ;
3694: LD_ADDR_VAR 0 5
3698: PUSH
3699: LD_EXP 41
3703: PUSH
3704: LD_INT 12
3706: DIV
3707: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 6
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: LD_OWVAR 67
3731: ARRAY
3732: PUSH
3733: LD_VAR 0 5
3737: PLUS
3738: ST_TO_ADDR
// if skill > 10 then
3739: LD_VAR 0 4
3743: PUSH
3744: LD_INT 10
3746: GREATER
3747: IFFALSE 3757
// skill := 10 ;
3749: LD_ADDR_VAR 0 4
3753: PUSH
3754: LD_INT 10
3756: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_INT 3
3769: PUSH
3770: LD_INT 4
3772: PUSH
3773: LD_INT 4
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PUSH
3787: FOR_TO
3788: IFFALSE 3893
// begin uc_side := enemySide ;
3790: LD_ADDR_OWVAR 20
3794: PUSH
3795: LD_EXP 12
3799: ST_TO_ADDR
// uc_nation := nation_arabian ;
3800: LD_ADDR_OWVAR 21
3804: PUSH
3805: LD_INT 2
3807: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_VAR 0 4
3815: PPUSH
3816: CALL_OW 381
// un := CreateHuman ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: CALL_OW 44
3829: ST_TO_ADDR
// if i mod 3 = 0 then
3830: LD_VAR 0 2
3834: PUSH
3835: LD_INT 3
3837: MOD
3838: PUSH
3839: LD_INT 0
3841: EQUAL
3842: IFFALSE 3856
// SetClass ( un , class_mortar ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 8
3851: PPUSH
3852: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3856: LD_VAR 0 3
3860: PPUSH
3861: LD_INT 28
3863: PPUSH
3864: LD_INT 0
3866: PPUSH
3867: CALL_OW 49
// result := Join ( result , un ) ;
3871: LD_ADDR_VAR 0 1
3875: PUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_VAR 0 3
3885: PPUSH
3886: CALL 53760 0 2
3890: ST_TO_ADDR
// end ;
3891: GO 3787
3893: POP
3894: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 147
3902: PPUSH
3903: LD_INT 100
3905: PPUSH
3906: CALL_OW 114
// blockThread := false ;
3910: LD_ADDR_EXP 6
3914: PUSH
3915: LD_INT 0
3917: ST_TO_ADDR
// end ; end_of_file
3918: LD_VAR 0 1
3922: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3923: LD_INT 0
3925: PPUSH
3926: PPUSH
3927: PPUSH
3928: PPUSH
3929: PPUSH
// mpGameType := GameTypeCoop ;
3930: LD_ADDR_EXP 36
3934: PUSH
3935: LD_INT 4
3937: ST_TO_ADDR
// multi_settings_counter := 5 ;
3938: LD_ADDR_EXP 26
3942: PUSH
3943: LD_INT 5
3945: ST_TO_ADDR
// multi_settings := [ ] ;
3946: LD_ADDR_EXP 25
3950: PUSH
3951: EMPTY
3952: ST_TO_ADDR
// if Multiplayer then
3953: LD_OWVAR 4
3957: IFFALSE 4137
// begin your_side := mp_player_side ;
3959: LD_ADDR_OWVAR 2
3963: PUSH
3964: LD_OWVAR 7
3968: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3969: LD_ADDR_EXP 14
3973: PUSH
3974: LD_OWVAR 6
3978: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3979: LD_ADDR_EXP 15
3983: PUSH
3984: LD_OWVAR 17
3988: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3989: LD_ADDR_EXP 16
3993: PUSH
3994: LD_OWVAR 15
3998: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3999: LD_ADDR_EXP 17
4003: PUSH
4004: LD_OWVAR 16
4008: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
4009: LD_ADDR_EXP 18
4013: PUSH
4014: EMPTY
4015: PUSH
4016: EMPTY
4017: LIST
4018: ST_TO_ADDR
// for i in mp_teams do
4019: LD_ADDR_VAR 0 2
4023: PUSH
4024: LD_OWVAR 12
4028: PUSH
4029: FOR_IN
4030: IFFALSE 4073
// if i then
4032: LD_VAR 0 2
4036: IFFALSE 4071
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
4038: LD_ADDR_EXP 18
4042: PUSH
4043: LD_EXP 18
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_EXP 18
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_VAR 0 2
4064: UNION
4065: PPUSH
4066: CALL_OW 1
4070: ST_TO_ADDR
4071: GO 4029
4073: POP
4074: POP
// for i := 1 to multi_settings_counter do
4075: LD_ADDR_VAR 0 2
4079: PUSH
4080: DOUBLE
4081: LD_INT 1
4083: DEC
4084: ST_TO_ADDR
4085: LD_EXP 26
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4133
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
4093: LD_ADDR_EXP 25
4097: PUSH
4098: LD_EXP 25
4102: PPUSH
4103: LD_EXP 25
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_VAR 0 2
4116: PPUSH
4117: CALL_OW 426
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: CALL_OW 1
4130: ST_TO_ADDR
4131: GO 4090
4133: POP
4134: POP
// end else
4135: GO 4319
// begin your_side := 3 ;
4137: LD_ADDR_OWVAR 2
4141: PUSH
4142: LD_INT 3
4144: ST_TO_ADDR
// multi_gametype := 1 ;
4145: LD_ADDR_EXP 14
4149: PUSH
4150: LD_INT 1
4152: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4153: LD_ADDR_EXP 15
4157: PUSH
4158: LD_INT 0
4160: PUSH
4161: LD_INT 0
4163: PUSH
4164: LD_INT 2
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: LD_INT 0
4175: PUSH
4176: LD_INT 1
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4192: LD_ADDR_EXP 16
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: LD_INT 1
4217: PUSH
4218: LD_INT 0
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4231: LD_ADDR_EXP 17
4235: PUSH
4236: LD_INT 0
4238: PUSH
4239: LD_INT 0
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 3
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4270: LD_ADDR_EXP 18
4274: PUSH
4275: LD_INT 3
4277: PUSH
4278: LD_INT 7
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: EMPTY
4286: LIST
4287: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4288: LD_ADDR_EXP 25
4292: PUSH
4293: LD_INT 2
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: LD_INT 3
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
4319: LD_ADDR_EXP 37
4323: PUSH
4324: LD_EXP 15
4328: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4329: LD_ADDR_EXP 19
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: LD_INT 0
4342: PUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 0
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: LD_INT 0
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4368: LD_ADDR_EXP 22
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 0
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 0
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4407: LD_ADDR_EXP 32
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: LD_INT 0
4420: PUSH
4421: LD_INT 0
4423: PUSH
4424: LD_INT 0
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: LD_INT 0
4432: PUSH
4433: LD_INT 0
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: ST_TO_ADDR
// multi_teamgame := true ;
4446: LD_ADDR_EXP 23
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4454: LD_ADDR_EXP 21
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: ST_TO_ADDR
// multi_custom_commanders := true ;
4465: LD_ADDR_EXP 24
4469: PUSH
4470: LD_INT 1
4472: ST_TO_ADDR
// multi_commanders := [ ] ;
4473: LD_ADDR_EXP 31
4477: PUSH
4478: EMPTY
4479: ST_TO_ADDR
// multi_players_amount := 0 ;
4480: LD_ADDR_EXP 33
4484: PUSH
4485: LD_INT 0
4487: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4488: LD_ADDR_EXP 20
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 4
4505: PUSH
4506: LD_INT 6
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_depot , [ 112 , 145 , 2 ] ] , [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 99 , 54 , 3 ] ] , [ b_breastwork , [ 122 , 70 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 121 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4517: LD_ADDR_EXP 35
4521: PUSH
4522: LD_INT 0
4524: PUSH
4525: LD_INT 108
4527: PUSH
4528: LD_INT 110
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 32
4545: PUSH
4546: LD_INT 117
4548: PUSH
4549: LD_INT 101
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 44
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 32
4570: PUSH
4571: LD_INT 124
4573: PUSH
4574: LD_INT 107
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 43
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 32
4595: PUSH
4596: LD_INT 94
4598: PUSH
4599: LD_INT 114
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 44
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 32
4620: PUSH
4621: LD_INT 110
4623: PUSH
4624: LD_INT 94
4626: PUSH
4627: LD_INT 4
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 44
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 29
4645: PUSH
4646: LD_INT 126
4648: PUSH
4649: LD_INT 124
4651: PUSH
4652: LD_INT 5
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 26
4666: PUSH
4667: LD_INT 101
4669: PUSH
4670: LD_INT 115
4672: PUSH
4673: LD_INT 0
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 26
4687: PUSH
4688: LD_INT 125
4690: PUSH
4691: LD_INT 121
4693: PUSH
4694: LD_INT 3
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 3
4708: PUSH
4709: LD_INT 109
4711: PUSH
4712: LD_INT 126
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 17
4729: PUSH
4730: LD_INT 112
4732: PUSH
4733: LD_INT 129
4735: PUSH
4736: LD_INT 5
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: LD_INT 112
4765: PUSH
4766: LD_INT 145
4768: PUSH
4769: LD_INT 2
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 31
4783: PUSH
4784: LD_INT 95
4786: PUSH
4787: LD_INT 36
4789: PUSH
4790: LD_INT 4
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 31
4804: PUSH
4805: LD_INT 116
4807: PUSH
4808: LD_INT 66
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 31
4825: PUSH
4826: LD_INT 99
4828: PUSH
4829: LD_INT 54
4831: PUSH
4832: LD_INT 3
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 31
4846: PUSH
4847: LD_INT 122
4849: PUSH
4850: LD_INT 70
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 31
4867: PUSH
4868: LD_INT 157
4870: PUSH
4871: LD_INT 159
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 31
4888: PUSH
4889: LD_INT 75
4891: PUSH
4892: LD_INT 88
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 31
4909: PUSH
4910: LD_INT 63
4912: PUSH
4913: LD_INT 82
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 31
4930: PUSH
4931: LD_INT 121
4933: PUSH
4934: LD_INT 147
4936: PUSH
4937: LD_INT 4
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 2
4951: PUSH
4952: LD_INT 124
4954: PUSH
4955: LD_INT 164
4957: PUSH
4958: LD_INT 5
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: LD_INT 129
4975: PUSH
4976: LD_INT 159
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: PUSH
5006: EMPTY
5007: PUSH
5008: EMPTY
5009: PUSH
5010: EMPTY
5011: PUSH
5012: EMPTY
5013: PUSH
5014: EMPTY
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5026: LD_ADDR_EXP 30
5030: PUSH
5031: EMPTY
5032: PUSH
5033: LD_INT 21
5035: PUSH
5036: LD_INT 1
5038: PUSH
5039: LD_INT 1
5041: PUSH
5042: LD_INT 42
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 22
5053: PUSH
5054: LD_INT 1
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: LD_INT 51
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 22
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: LD_INT 1
5077: PUSH
5078: LD_INT 44
5080: PUSH
5081: LD_INT 43
5083: PUSH
5084: LD_INT 42
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_OWVAR 67
5096: ARRAY
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 22
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: LD_INT 44
5115: PUSH
5116: LD_INT 43
5118: PUSH
5119: LD_INT 42
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_OWVAR 67
5131: ARRAY
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: LD_INT 44
5150: PUSH
5151: LD_INT 43
5153: PUSH
5154: LD_INT 42
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: PUSH
5162: LD_OWVAR 67
5166: ARRAY
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: PUSH
5183: EMPTY
5184: PUSH
5185: EMPTY
5186: PUSH
5187: EMPTY
5188: PUSH
5189: EMPTY
5190: PUSH
5191: EMPTY
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: ST_TO_ADDR
// for i := 1 to 8 do
5203: LD_ADDR_VAR 0 2
5207: PUSH
5208: DOUBLE
5209: LD_INT 1
5211: DEC
5212: ST_TO_ADDR
5213: LD_INT 8
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5552
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5219: LD_VAR 0 2
5223: PPUSH
5224: CALL_OW 530
5228: IFFALSE 5386
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5230: LD_ADDR_EXP 19
5234: PUSH
5235: LD_EXP 19
5239: PPUSH
5240: LD_VAR 0 2
5244: PPUSH
5245: LD_INT 1
5247: PPUSH
5248: CALL_OW 1
5252: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5253: LD_ADDR_EXP 17
5257: PUSH
5258: LD_EXP 17
5262: PPUSH
5263: LD_VAR 0 2
5267: PPUSH
5268: LD_INT 0
5270: PPUSH
5271: CALL_OW 1
5275: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5276: LD_ADDR_EXP 15
5280: PUSH
5281: LD_EXP 15
5285: PPUSH
5286: LD_VAR 0 2
5290: PPUSH
5291: LD_INT 0
5293: PPUSH
5294: CALL_OW 1
5298: ST_TO_ADDR
// for j = 1 to multi_teams do
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_EXP 18
5313: PUSH
5314: FOR_TO
5315: IFFALSE 5384
// begin if i in multi_teams [ j ] then
5317: LD_VAR 0 2
5321: PUSH
5322: LD_EXP 18
5326: PUSH
5327: LD_VAR 0 3
5331: ARRAY
5332: IN
5333: IFFALSE 5382
// begin tmp := multi_teams [ j ] diff i ;
5335: LD_ADDR_VAR 0 5
5339: PUSH
5340: LD_EXP 18
5344: PUSH
5345: LD_VAR 0 3
5349: ARRAY
5350: PUSH
5351: LD_VAR 0 2
5355: DIFF
5356: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5357: LD_ADDR_EXP 18
5361: PUSH
5362: LD_EXP 18
5366: PPUSH
5367: LD_VAR 0 3
5371: PPUSH
5372: LD_VAR 0 5
5376: PPUSH
5377: CALL_OW 1
5381: ST_TO_ADDR
// end ; end ;
5382: GO 5314
5384: POP
5385: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5386: LD_EXP 17
5390: PUSH
5391: LD_VAR 0 2
5395: ARRAY
5396: IFFALSE 5417
5398: PUSH
5399: LD_EXP 17
5403: PUSH
5404: LD_VAR 0 2
5408: ARRAY
5409: PUSH
5410: LD_EXP 21
5414: IN
5415: NOT
5416: AND
5417: IFFALSE 5458
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5419: LD_ADDR_EXP 17
5423: PUSH
5424: LD_EXP 17
5428: PPUSH
5429: LD_VAR 0 2
5433: PPUSH
5434: LD_EXP 21
5438: PUSH
5439: LD_INT 1
5441: PPUSH
5442: LD_EXP 21
5446: PPUSH
5447: CALL_OW 12
5451: ARRAY
5452: PPUSH
5453: CALL_OW 1
5457: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5458: LD_EXP 17
5462: PUSH
5463: LD_VAR 0 2
5467: ARRAY
5468: NOT
5469: IFFALSE 5484
5471: PUSH
5472: LD_EXP 15
5476: PUSH
5477: LD_VAR 0 2
5481: ARRAY
5482: NOT
5483: AND
5484: IFFALSE 5499
5486: PUSH
5487: LD_EXP 19
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: NOT
5498: AND
5499: IFFALSE 5524
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5501: LD_ADDR_EXP 22
5505: PUSH
5506: LD_EXP 22
5510: PPUSH
5511: LD_VAR 0 2
5515: PPUSH
5516: LD_INT 1
5518: PPUSH
5519: CALL_OW 1
5523: ST_TO_ADDR
// if multi_sides [ i ] then
5524: LD_EXP 15
5528: PUSH
5529: LD_VAR 0 2
5533: ARRAY
5534: IFFALSE 5550
// multi_players_amount := multi_players_amount + 1 ;
5536: LD_ADDR_EXP 33
5540: PUSH
5541: LD_EXP 33
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: ST_TO_ADDR
// end ;
5550: GO 5216
5552: POP
5553: POP
// for i in multi_teams do
5554: LD_ADDR_VAR 0 2
5558: PUSH
5559: LD_EXP 18
5563: PUSH
5564: FOR_IN
5565: IFFALSE 5673
// begin for j = 2 to i do
5567: LD_ADDR_VAR 0 3
5571: PUSH
5572: DOUBLE
5573: LD_INT 2
5575: DEC
5576: ST_TO_ADDR
5577: LD_VAR 0 2
5581: PUSH
5582: FOR_TO
5583: IFFALSE 5669
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5585: LD_VAR 0 2
5589: PUSH
5590: LD_VAR 0 3
5594: ARRAY
5595: PPUSH
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 1
5603: ARRAY
5604: PPUSH
5605: CALL_OW 343
// for x = 1 to j - 1 do
5609: LD_ADDR_VAR 0 4
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 3
5623: PUSH
5624: LD_INT 1
5626: MINUS
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5665
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5631: LD_VAR 0 2
5635: PUSH
5636: LD_VAR 0 3
5640: ARRAY
5641: PPUSH
5642: LD_VAR 0 2
5646: PUSH
5647: LD_VAR 0 4
5651: ARRAY
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: LD_INT 1
5658: PPUSH
5659: CALL_OW 80
5663: GO 5628
5665: POP
5666: POP
// end ;
5667: GO 5582
5669: POP
5670: POP
// end ;
5671: GO 5564
5673: POP
5674: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5675: LD_ADDR_OWVAR 67
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: PUSH
5694: LD_EXP 25
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: ARRAY
5703: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5704: LD_ADDR_EXP 27
5708: PUSH
5709: LD_INT 9
5711: PUSH
5712: LD_INT 12
5714: PUSH
5715: LD_INT 15
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: PUSH
5723: LD_EXP 25
5727: PUSH
5728: LD_INT 2
5730: ARRAY
5731: ARRAY
5732: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5733: LD_ADDR_EXP 28
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 4
5746: PUSH
5747: LD_INT 6
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PUSH
5756: LD_EXP 25
5760: PUSH
5761: LD_INT 3
5763: ARRAY
5764: ARRAY
5765: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5766: LD_ADDR_EXP 34
5770: PUSH
5771: LD_INT 3500
5773: PUSH
5774: LD_INT 5000
5776: PUSH
5777: LD_INT 7500
5779: PUSH
5780: LD_INT 10000
5782: PUSH
5783: LD_INT 15000
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: PUSH
5793: LD_EXP 25
5797: PUSH
5798: LD_INT 4
5800: ARRAY
5801: ARRAY
5802: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5803: LD_ADDR_EXP 29
5807: PUSH
5808: LD_INT 1000
5810: PUSH
5811: LD_INT 1260
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 2000
5820: PUSH
5821: LD_INT 1050
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 3000
5830: PUSH
5831: LD_INT 840
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 4000
5840: PUSH
5841: LD_INT 630
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: PUSH
5854: LD_EXP 25
5858: PUSH
5859: LD_INT 5
5861: ARRAY
5862: ARRAY
5863: ST_TO_ADDR
// end ;
5864: LD_VAR 0 1
5868: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5869: LD_INT 0
5871: PPUSH
5872: PPUSH
// if not multi_sides [ preferSide ] then
5873: LD_EXP 15
5877: PUSH
5878: LD_VAR 0 1
5882: ARRAY
5883: NOT
5884: IFFALSE 5898
// begin result := preferSide ;
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 1
5895: ST_TO_ADDR
// exit ;
5896: GO 5945
// end ; for i := 1 to 8 do
5898: LD_ADDR_VAR 0 3
5902: PUSH
5903: DOUBLE
5904: LD_INT 1
5906: DEC
5907: ST_TO_ADDR
5908: LD_INT 8
5910: PUSH
5911: FOR_TO
5912: IFFALSE 5943
// if not multi_sides [ i ] then
5914: LD_EXP 15
5918: PUSH
5919: LD_VAR 0 3
5923: ARRAY
5924: NOT
5925: IFFALSE 5941
// begin result := i ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_VAR 0 3
5936: ST_TO_ADDR
// exit ;
5937: POP
5938: POP
5939: GO 5945
// end ;
5941: GO 5911
5943: POP
5944: POP
// end ;
5945: LD_VAR 0 2
5949: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5950: LD_INT 0
5952: PPUSH
// uc_side := side ;
5953: LD_ADDR_OWVAR 20
5957: PUSH
5958: LD_VAR 0 1
5962: ST_TO_ADDR
// uc_nation := nation_russian ;
5963: LD_ADDR_OWVAR 21
5967: PUSH
5968: LD_INT 3
5970: ST_TO_ADDR
// hc_importance := 100 ;
5971: LD_ADDR_OWVAR 32
5975: PUSH
5976: LD_INT 100
5978: ST_TO_ADDR
// if num = 1 then
5979: LD_VAR 0 2
5983: PUSH
5984: LD_INT 1
5986: EQUAL
5987: IFFALSE 6054
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5989: LD_INT 1
5991: PPUSH
5992: LD_EXP 28
5996: PUSH
5997: LD_INT 1
5999: PLUS
6000: PPUSH
6001: CALL_OW 381
// hc_gallery := ru ;
6005: LD_ADDR_OWVAR 33
6009: PUSH
6010: LD_STRING ru
6012: ST_TO_ADDR
// hc_face_number := 13 ;
6013: LD_ADDR_OWVAR 34
6017: PUSH
6018: LD_INT 13
6020: ST_TO_ADDR
// hc_name := Kuzmov ;
6021: LD_ADDR_OWVAR 26
6025: PUSH
6026: LD_STRING Kuzmov
6028: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
6029: LD_ADDR_OWVAR 29
6033: PUSH
6034: LD_INT 11
6036: PUSH
6037: LD_INT 11
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: ST_TO_ADDR
// result := CreateHuman ;
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: CALL_OW 44
6053: ST_TO_ADDR
// end ; if num = 2 then
6054: LD_VAR 0 2
6058: PUSH
6059: LD_INT 2
6061: EQUAL
6062: IFFALSE 6129
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
6064: LD_INT 1
6066: PPUSH
6067: LD_EXP 28
6071: PUSH
6072: LD_INT 2
6074: PLUS
6075: PPUSH
6076: CALL_OW 383
// hc_gallery := ru ;
6080: LD_ADDR_OWVAR 33
6084: PUSH
6085: LD_STRING ru
6087: ST_TO_ADDR
// hc_face_number := 1 ;
6088: LD_ADDR_OWVAR 34
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// hc_name := Burlak ;
6096: LD_ADDR_OWVAR 26
6100: PUSH
6101: LD_STRING Burlak
6103: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6104: LD_ADDR_OWVAR 29
6108: PUSH
6109: LD_INT 10
6111: PUSH
6112: LD_INT 11
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: ST_TO_ADDR
// result := CreateHuman ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: CALL_OW 44
6128: ST_TO_ADDR
// end ; end ;
6129: LD_VAR 0 3
6133: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
6134: LD_INT 0
6136: PPUSH
6137: PPUSH
6138: PPUSH
6139: PPUSH
6140: PPUSH
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// for i := 1 to 8 do
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: DOUBLE
6152: LD_INT 1
6154: DEC
6155: ST_TO_ADDR
6156: LD_INT 8
6158: PUSH
6159: FOR_TO
6160: IFFALSE 7592
// begin if not multi_sides [ i ] then
6162: LD_EXP 15
6166: PUSH
6167: LD_VAR 0 2
6171: ARRAY
6172: NOT
6173: IFFALSE 6177
// continue ;
6175: GO 6159
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
6177: LD_ADDR_VAR 0 8
6181: PUSH
6182: LD_EXP 30
6186: PUSH
6187: LD_EXP 15
6191: PUSH
6192: LD_VAR 0 2
6196: ARRAY
6197: ARRAY
6198: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
6199: LD_EXP 35
6203: PUSH
6204: LD_EXP 15
6208: PUSH
6209: LD_VAR 0 2
6213: ARRAY
6214: ARRAY
6215: IFFALSE 6512
// begin uc_side := i ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_VAR 0 2
6226: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6227: LD_ADDR_OWVAR 21
6231: PUSH
6232: LD_EXP 17
6236: PUSH
6237: LD_VAR 0 2
6241: ARRAY
6242: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: LD_EXP 35
6252: PUSH
6253: LD_EXP 15
6257: PUSH
6258: LD_VAR 0 2
6262: ARRAY
6263: ARRAY
6264: PUSH
6265: FOR_IN
6266: IFFALSE 6510
// begin if j [ 1 ] = b_oil_mine then
6268: LD_VAR 0 3
6272: PUSH
6273: LD_INT 1
6275: ARRAY
6276: PUSH
6277: LD_INT 29
6279: EQUAL
6280: IFFALSE 6317
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6282: LD_VAR 0 3
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: LD_VAR 0 3
6299: PUSH
6300: LD_INT 2
6302: ARRAY
6303: PUSH
6304: LD_INT 2
6306: ARRAY
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 441
// bc_type := j [ 1 ] ;
6317: LD_ADDR_OWVAR 42
6321: PUSH
6322: LD_VAR 0 3
6326: PUSH
6327: LD_INT 1
6329: ARRAY
6330: ST_TO_ADDR
// bc_level := 3 ;
6331: LD_ADDR_OWVAR 43
6335: PUSH
6336: LD_INT 3
6338: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6339: LD_ADDR_VAR 0 4
6343: PUSH
6344: LD_VAR 0 3
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PUSH
6353: LD_INT 1
6355: ARRAY
6356: PPUSH
6357: LD_VAR 0 3
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PUSH
6366: LD_INT 2
6368: ARRAY
6369: PPUSH
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 2
6377: ARRAY
6378: PUSH
6379: LD_INT 3
6381: ARRAY
6382: PPUSH
6383: CALL_OW 47
6387: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 1
6395: ARRAY
6396: PUSH
6397: LD_INT 0
6399: EQUAL
6400: IFFALSE 6476
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6402: LD_VAR 0 4
6406: PPUSH
6407: CALL_OW 274
6411: PPUSH
6412: LD_INT 1
6414: PPUSH
6415: LD_INT 450
6417: PUSH
6418: LD_INT 350
6420: PUSH
6421: LD_INT 230
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: PUSH
6429: LD_OWVAR 67
6433: ARRAY
6434: PPUSH
6435: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6439: LD_VAR 0 4
6443: PPUSH
6444: CALL_OW 274
6448: PPUSH
6449: LD_INT 2
6451: PPUSH
6452: LD_INT 90
6454: PUSH
6455: LD_INT 60
6457: PUSH
6458: LD_INT 40
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PPUSH
6472: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PUSH
6485: LD_INT 32
6487: EQUAL
6488: IFFALSE 6508
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6490: LD_VAR 0 4
6494: PPUSH
6495: LD_VAR 0 3
6499: PUSH
6500: LD_INT 3
6502: ARRAY
6503: PPUSH
6504: CALL_OW 431
// end ;
6508: GO 6265
6510: POP
6511: POP
// end ; if multi_custom_commanders then
6512: LD_EXP 24
6516: IFFALSE 6733
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6518: LD_ADDR_VAR 0 6
6522: PUSH
6523: LD_VAR 0 2
6527: PPUSH
6528: LD_EXP 15
6532: PUSH
6533: LD_VAR 0 2
6537: ARRAY
6538: PPUSH
6539: CALL 5950 0 2
6543: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6544: LD_ADDR_EXP 31
6548: PUSH
6549: LD_EXP 31
6553: PPUSH
6554: LD_EXP 31
6558: PUSH
6559: LD_INT 1
6561: PLUS
6562: PPUSH
6563: LD_VAR 0 6
6567: PPUSH
6568: CALL_OW 2
6572: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6573: LD_VAR 0 6
6577: PPUSH
6578: CALL_OW 257
6582: PUSH
6583: LD_INT 3
6585: EQUAL
6586: IFFALSE 6698
// begin uc_nation := nation_russian ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_INT 3
6595: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6596: LD_INT 23
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 44
6607: PPUSH
6608: LD_INT 80
6610: PPUSH
6611: CALL 20590 0 5
// veh := CreateVehicle ;
6615: LD_ADDR_VAR 0 7
6619: PUSH
6620: CALL_OW 45
6624: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6625: LD_VAR 0 7
6629: PPUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: CALL_OW 255
6639: PUSH
6640: LD_INT 1
6642: NEG
6643: MUL
6644: PPUSH
6645: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6649: LD_VAR 0 7
6653: PPUSH
6654: LD_EXP 20
6658: PUSH
6659: LD_EXP 15
6663: PUSH
6664: LD_VAR 0 2
6668: ARRAY
6669: ARRAY
6670: PUSH
6671: LD_INT 2
6673: ARRAY
6674: PPUSH
6675: LD_INT 0
6677: PPUSH
6678: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6682: LD_VAR 0 6
6686: PPUSH
6687: LD_VAR 0 7
6691: PPUSH
6692: CALL_OW 52
// end else
6696: GO 6731
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6698: LD_VAR 0 6
6702: PPUSH
6703: LD_EXP 20
6707: PUSH
6708: LD_EXP 15
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: ARRAY
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_INT 0
6726: PPUSH
6727: CALL_OW 49
// end else
6731: GO 6944
// begin uc_side := i ;
6733: LD_ADDR_OWVAR 20
6737: PUSH
6738: LD_VAR 0 2
6742: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6743: LD_ADDR_OWVAR 21
6747: PUSH
6748: LD_EXP 17
6752: PUSH
6753: LD_VAR 0 2
6757: ARRAY
6758: ST_TO_ADDR
// hc_importance := 100 ;
6759: LD_ADDR_OWVAR 32
6763: PUSH
6764: LD_INT 100
6766: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6767: LD_INT 0
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_EXP 28
6777: PPUSH
6778: CALL_OW 380
// if multiplayer then
6782: LD_OWVAR 4
6786: IFFALSE 6844
// begin hc_name := mp_sides_players_names [ i ] ;
6788: LD_ADDR_OWVAR 26
6792: PUSH
6793: LD_OWVAR 19
6797: PUSH
6798: LD_VAR 0 2
6802: ARRAY
6803: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6804: LD_ADDR_OWVAR 33
6808: PUSH
6809: LD_STRING MULTIAVATARS
6811: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6812: LD_ADDR_OWVAR 34
6816: PUSH
6817: LD_VAR 0 2
6821: PPUSH
6822: CALL_OW 525
6826: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6827: LD_ADDR_OWVAR 27
6831: PUSH
6832: LD_VAR 0 2
6836: PPUSH
6837: CALL_OW 526
6841: ST_TO_ADDR
// end else
6842: GO 6876
// begin hc_gallery :=  ;
6844: LD_ADDR_OWVAR 33
6848: PUSH
6849: LD_STRING 
6851: ST_TO_ADDR
// hc_name :=  ;
6852: LD_ADDR_OWVAR 26
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6860: LD_ADDR_OWVAR 27
6864: PUSH
6865: LD_INT 1
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: CALL_OW 12
6875: ST_TO_ADDR
// end ; un := CreateHuman ;
6876: LD_ADDR_VAR 0 6
6880: PUSH
6881: CALL_OW 44
6885: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6886: LD_VAR 0 6
6890: PPUSH
6891: LD_EXP 20
6895: PUSH
6896: LD_EXP 15
6900: PUSH
6901: LD_VAR 0 2
6905: ARRAY
6906: ARRAY
6907: PUSH
6908: LD_INT 1
6910: ARRAY
6911: PPUSH
6912: LD_INT 0
6914: PPUSH
6915: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6919: LD_ADDR_EXP 31
6923: PUSH
6924: LD_EXP 31
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 6
6938: PPUSH
6939: CALL_OW 1
6943: ST_TO_ADDR
// end ; InitHc ;
6944: CALL_OW 19
// InitUc ;
6948: CALL_OW 18
// uc_side := i ;
6952: LD_ADDR_OWVAR 20
6956: PUSH
6957: LD_VAR 0 2
6961: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6962: LD_ADDR_OWVAR 21
6966: PUSH
6967: LD_EXP 17
6971: PUSH
6972: LD_VAR 0 2
6976: ARRAY
6977: ST_TO_ADDR
// hc_gallery :=  ;
6978: LD_ADDR_OWVAR 33
6982: PUSH
6983: LD_STRING 
6985: ST_TO_ADDR
// hc_name :=  ;
6986: LD_ADDR_OWVAR 26
6990: PUSH
6991: LD_STRING 
6993: ST_TO_ADDR
// hc_importance := 0 ;
6994: LD_ADDR_OWVAR 32
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// cl := 1 ;
7002: LD_ADDR_VAR 0 5
7006: PUSH
7007: LD_INT 1
7009: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
7010: LD_ADDR_VAR 0 3
7014: PUSH
7015: DOUBLE
7016: LD_INT 2
7018: DEC
7019: ST_TO_ADDR
7020: LD_EXP 27
7024: PUSH
7025: FOR_TO
7026: IFFALSE 7588
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
7028: LD_VAR 0 3
7032: PUSH
7033: LD_INT 1
7035: MINUS
7036: PUSH
7037: LD_EXP 27
7041: PUSH
7042: LD_INT 1
7044: MINUS
7045: PUSH
7046: LD_INT 4
7048: DIVREAL
7049: MOD
7050: PUSH
7051: LD_INT 0
7053: EQUAL
7054: IFFALSE 7070
// cl := cl + 1 ;
7056: LD_ADDR_VAR 0 5
7060: PUSH
7061: LD_VAR 0 5
7065: PUSH
7066: LD_INT 1
7068: PLUS
7069: ST_TO_ADDR
// if cl > 4 then
7070: LD_VAR 0 5
7074: PUSH
7075: LD_INT 4
7077: GREATER
7078: IFFALSE 7088
// cl := 1 ;
7080: LD_ADDR_VAR 0 5
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
7088: LD_EXP 15
7092: PUSH
7093: LD_VAR 0 2
7097: ARRAY
7098: PUSH
7099: LD_INT 2
7101: EQUAL
7102: IFFALSE 7164
7104: PUSH
7105: LD_VAR 0 5
7109: PUSH
7110: LD_INT 2
7112: EQUAL
7113: IFTRUE 7163
7115: PUSH
7116: LD_VAR 0 5
7120: PUSH
7121: LD_INT 4
7123: EQUAL
7124: IFFALSE 7162
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 2
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 4
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_INT 1
7160: GREATER
7161: AND
7162: OR
7163: AND
7164: IFFALSE 7183
// PrepareHuman ( false , 1 , multi_skill_level ) else
7166: LD_INT 0
7168: PPUSH
7169: LD_INT 1
7171: PPUSH
7172: LD_EXP 28
7176: PPUSH
7177: CALL_OW 380
7181: GO 7200
// PrepareHuman ( false , cl , multi_skill_level ) ;
7183: LD_INT 0
7185: PPUSH
7186: LD_VAR 0 5
7190: PPUSH
7191: LD_EXP 28
7195: PPUSH
7196: CALL_OW 380
// un := CreateHuman ;
7200: LD_ADDR_VAR 0 6
7204: PUSH
7205: CALL_OW 44
7209: ST_TO_ADDR
// if multi_pos_area then
7210: LD_EXP 20
7214: IFFALSE 7586
// begin if GetClass ( un ) = 3 and vehicles then
7216: LD_VAR 0 6
7220: PPUSH
7221: CALL_OW 257
7225: PUSH
7226: LD_INT 3
7228: EQUAL
7229: IFFALSE 7237
7231: PUSH
7232: LD_VAR 0 8
7236: AND
7237: IFFALSE 7422
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
7239: LD_VAR 0 8
7243: PUSH
7244: LD_INT 1
7246: ARRAY
7247: PUSH
7248: LD_INT 1
7250: ARRAY
7251: PPUSH
7252: LD_VAR 0 8
7256: PUSH
7257: LD_INT 1
7259: ARRAY
7260: PUSH
7261: LD_INT 2
7263: ARRAY
7264: PPUSH
7265: LD_VAR 0 8
7269: PUSH
7270: LD_INT 1
7272: ARRAY
7273: PUSH
7274: LD_INT 3
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 8
7282: PUSH
7283: LD_INT 1
7285: ARRAY
7286: PUSH
7287: LD_INT 4
7289: ARRAY
7290: PPUSH
7291: LD_INT 80
7293: PUSH
7294: LD_INT 60
7296: PUSH
7297: LD_INT 40
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: LD_OWVAR 67
7309: ARRAY
7310: PPUSH
7311: CALL 20590 0 5
// veh := CreateVehicle ;
7315: LD_ADDR_VAR 0 7
7319: PUSH
7320: CALL_OW 45
7324: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7325: LD_VAR 0 7
7329: PPUSH
7330: LD_EXP 20
7334: PUSH
7335: LD_EXP 15
7339: PUSH
7340: LD_VAR 0 2
7344: ARRAY
7345: ARRAY
7346: PUSH
7347: LD_INT 2
7349: ARRAY
7350: PPUSH
7351: LD_INT 0
7353: PPUSH
7354: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7358: LD_VAR 0 6
7362: PPUSH
7363: LD_VAR 0 7
7367: PPUSH
7368: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7372: LD_VAR 0 7
7376: PPUSH
7377: CALL_OW 264
7381: PUSH
7382: LD_INT 51
7384: EQUAL
7385: IFFALSE 7402
// SetCargo ( veh , mat_oil , 60 ) ;
7387: LD_VAR 0 7
7391: PPUSH
7392: LD_INT 2
7394: PPUSH
7395: LD_INT 60
7397: PPUSH
7398: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7402: LD_ADDR_VAR 0 8
7406: PUSH
7407: LD_VAR 0 8
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 3
7419: ST_TO_ADDR
// continue ;
7420: GO 7025
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7422: LD_ADDR_VAR 0 9
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_VAR 0 2
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: LD_INT 30
7444: PUSH
7445: LD_INT 32
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 30
7454: PUSH
7455: LD_INT 31
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PUSH
7467: LD_INT 58
7469: PUSH
7470: EMPTY
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 257
7492: PUSH
7493: LD_INT 1
7495: EQUAL
7496: IFFALSE 7504
7498: PUSH
7499: LD_VAR 0 9
7503: AND
7504: IFFALSE 7553
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7506: LD_VAR 0 6
7510: PPUSH
7511: LD_VAR 0 9
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: CALL_OW 254
7524: PUSH
7525: LD_INT 3
7527: MINUS
7528: PPUSH
7529: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7533: LD_VAR 0 6
7537: PPUSH
7538: LD_VAR 0 9
7542: PUSH
7543: LD_INT 1
7545: ARRAY
7546: PPUSH
7547: CALL_OW 52
// continue ;
7551: GO 7025
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7553: LD_VAR 0 6
7557: PPUSH
7558: LD_EXP 20
7562: PUSH
7563: LD_EXP 15
7567: PUSH
7568: LD_VAR 0 2
7572: ARRAY
7573: ARRAY
7574: PUSH
7575: LD_INT 1
7577: ARRAY
7578: PPUSH
7579: LD_INT 0
7581: PPUSH
7582: CALL_OW 49
// end ; end ;
7586: GO 7025
7588: POP
7589: POP
// end ;
7590: GO 6159
7592: POP
7593: POP
// end ;
7594: LD_VAR 0 1
7598: RET
// export function Multiplayer_Start ( ) ; begin
7599: LD_INT 0
7601: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7602: CALL 6134 0 0
// Multiplayer_InitPointSystem ( ) ;
7606: CALL 8323 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7610: LD_INT 20
7612: PPUSH
7613: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7617: LD_INT 150
7619: PPUSH
7620: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7624: LD_INT 5
7626: PPUSH
7627: CALL 8507 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7631: LD_INT 60
7633: NEG
7634: PPUSH
7635: CALL 8507 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7639: LD_INT 40
7641: NEG
7642: PPUSH
7643: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7647: LD_INT 2
7649: PPUSH
7650: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7654: LD_INT 110
7656: PPUSH
7657: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7661: LD_INT 55
7663: PPUSH
7664: CALL 8507 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7668: LD_INT 1000
7670: NEG
7671: PPUSH
7672: CALL 8507 0 1
// if multi_sides [ your_side ] then
7676: LD_EXP 15
7680: PUSH
7681: LD_OWVAR 2
7685: ARRAY
7686: IFFALSE 7713
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7688: LD_INT 22
7690: PUSH
7691: LD_OWVAR 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 69
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 87
// end ;
7713: LD_VAR 0 1
7717: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
// repeat wait ( 0 0$1 ) ;
7724: LD_INT 35
7726: PPUSH
7727: CALL_OW 67
// points := 0 ;
7731: LD_ADDR_VAR 0 4
7735: PUSH
7736: LD_INT 0
7738: ST_TO_ADDR
// for i := 1 to 8 do
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: DOUBLE
7745: LD_INT 1
7747: DEC
7748: ST_TO_ADDR
7749: LD_INT 8
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7779
// points := points + multi_points [ i ] ;
7755: LD_ADDR_VAR 0 4
7759: PUSH
7760: LD_VAR 0 4
7764: PUSH
7765: LD_EXP 38
7769: PUSH
7770: LD_VAR 0 2
7774: ARRAY
7775: PLUS
7776: ST_TO_ADDR
7777: GO 7752
7779: POP
7780: POP
// if not multi_custom_commanders then
7781: LD_EXP 24
7785: NOT
7786: IFFALSE 7901
// begin for i := 1 to 8 do
7788: LD_ADDR_VAR 0 2
7792: PUSH
7793: DOUBLE
7794: LD_INT 1
7796: DEC
7797: ST_TO_ADDR
7798: LD_INT 8
7800: PUSH
7801: FOR_TO
7802: IFFALSE 7875
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7804: LD_INT 22
7806: PUSH
7807: LD_VAR 0 2
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PPUSH
7816: CALL_OW 69
7820: PUSH
7821: LD_INT 0
7823: EQUAL
7824: IFFALSE 7839
7826: PUSH
7827: LD_EXP 32
7831: PUSH
7832: LD_VAR 0 2
7836: ARRAY
7837: NOT
7838: AND
7839: IFFALSE 7873
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7841: LD_ADDR_EXP 32
7845: PUSH
7846: LD_EXP 32
7850: PPUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: LD_INT 1
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7864: LD_VAR 0 2
7868: PPUSH
7869: CALL 8577 0 1
// end ; end ;
7873: GO 7801
7875: POP
7876: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7877: LD_EXP 32
7881: PPUSH
7882: CALL 17828 0 1
7886: PUSH
7887: LD_EXP 15
7891: PPUSH
7892: CALL 17828 0 1
7896: EQUAL
7897: IFFALSE 7901
// break ;
7899: GO 7946
// end ; if points >= multi_points_to_victory then
7901: LD_VAR 0 4
7905: PUSH
7906: LD_EXP 34
7910: GREATEREQUAL
7911: IFFALSE 7923
// begin winAllowed := true ;
7913: LD_ADDR_EXP 3
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// break ;
7921: GO 7946
// end ; until ( winAllowed and game ) or not multi_commanders ;
7923: LD_EXP 3
7927: IFFALSE 7935
7929: PUSH
7930: LD_EXP 2
7934: AND
7935: IFTRUE 7944
7937: PUSH
7938: LD_EXP 31
7942: NOT
7943: OR
7944: IFFALSE 7724
// game := false ;
7946: LD_ADDR_EXP 2
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// for i := 1 to 8 do
7954: LD_ADDR_VAR 0 2
7958: PUSH
7959: DOUBLE
7960: LD_INT 1
7962: DEC
7963: ST_TO_ADDR
7964: LD_INT 8
7966: PUSH
7967: FOR_TO
7968: IFFALSE 8004
// begin if multi_sides [ i ] then
7970: LD_EXP 15
7974: PUSH
7975: LD_VAR 0 2
7979: ARRAY
7980: IFFALSE 8002
// SetMultiScore ( i , multi_points [ i ] ) ;
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_EXP 38
7991: PUSH
7992: LD_VAR 0 2
7996: ARRAY
7997: PPUSH
7998: CALL_OW 506
// end ;
8002: GO 7967
8004: POP
8005: POP
// if multi_loosers [ your_side ] then
8006: LD_EXP 32
8010: PUSH
8011: LD_OWVAR 2
8015: ARRAY
8016: IFFALSE 8039
// begin if Multiplayer then
8018: LD_OWVAR 4
8022: IFFALSE 8030
// YouLostInMultiplayer else
8024: CALL_OW 107
8028: GO 8037
// YouLost (  ) ;
8030: LD_STRING 
8032: PPUSH
8033: CALL_OW 104
// end else
8037: GO 8055
// begin if Multiplayer then
8039: LD_OWVAR 4
8043: IFFALSE 8051
// YouWinInMultiplayer else
8045: CALL_OW 106
8049: GO 8055
// YouWin ;
8051: CALL_OW 103
// end ; end ;
8055: LD_VAR 0 1
8059: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// result := false ;
8064: LD_ADDR_VAR 0 1
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// for side in botSides do
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_EXP 4
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8144
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
8085: LD_ADDR_VAR 0 1
8089: PUSH
8090: LD_INT 22
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 50
8114: PUSH
8115: EMPTY
8116: LIST
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 69
8127: PUSH
8128: LD_INT 0
8130: GREATER
8131: ST_TO_ADDR
// if result then
8132: LD_VAR 0 1
8136: IFFALSE 8142
// exit ;
8138: POP
8139: POP
8140: GO 8146
// end ;
8142: GO 8082
8144: POP
8145: POP
// end ;
8146: LD_VAR 0 1
8150: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
8155: PPUSH
// result := [ ] ;
8156: LD_ADDR_VAR 0 1
8160: PUSH
8161: EMPTY
8162: ST_TO_ADDR
// points := 0 ;
8163: LD_ADDR_VAR 0 3
8167: PUSH
8168: LD_INT 0
8170: ST_TO_ADDR
// for i := 1 to 8 do
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: DOUBLE
8177: LD_INT 1
8179: DEC
8180: ST_TO_ADDR
8181: LD_INT 8
8183: PUSH
8184: FOR_TO
8185: IFFALSE 8264
// begin points := points + multi_points [ i ] ;
8187: LD_ADDR_VAR 0 3
8191: PUSH
8192: LD_VAR 0 3
8196: PUSH
8197: LD_EXP 38
8201: PUSH
8202: LD_VAR 0 2
8206: ARRAY
8207: PLUS
8208: ST_TO_ADDR
// if multi_sides [ i ] then
8209: LD_EXP 15
8213: PUSH
8214: LD_VAR 0 2
8218: ARRAY
8219: IFFALSE 8262
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8221: LD_ADDR_VAR 0 1
8225: PUSH
8226: LD_VAR 0 1
8230: PUSH
8231: LD_STRING #coop-points
8233: PUSH
8234: LD_VAR 0 2
8238: PUSH
8239: LD_VAR 0 2
8243: PUSH
8244: LD_EXP 38
8248: PUSH
8249: LD_VAR 0 2
8253: ARRAY
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: ADD
8261: ST_TO_ADDR
// end ; end ;
8262: GO 8184
8264: POP
8265: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_VAR 0 1
8275: PUSH
8276: LD_STRING #saved-convoys
8278: PUSH
8279: LD_EXP 5
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: ADD
8288: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8289: LD_ADDR_VAR 0 1
8293: PUSH
8294: LD_VAR 0 1
8298: PUSH
8299: LD_STRING #points-to-win
8301: PUSH
8302: LD_VAR 0 3
8306: PUSH
8307: LD_EXP 34
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: ADD
8317: ST_TO_ADDR
// end ;
8318: LD_VAR 0 1
8322: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8323: LD_INT 0
8325: PPUSH
8326: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8327: LD_ADDR_EXP 38
8331: PUSH
8332: LD_INT 0
8334: PUSH
8335: LD_INT 0
8337: PUSH
8338: LD_INT 0
8340: PUSH
8341: LD_INT 0
8343: PUSH
8344: LD_INT 0
8346: PUSH
8347: LD_INT 0
8349: PUSH
8350: LD_INT 0
8352: PUSH
8353: LD_INT 0
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8366: LD_ADDR_EXP 39
8370: PUSH
8371: EMPTY
8372: ST_TO_ADDR
// end ;
8373: LD_VAR 0 1
8377: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8378: LD_INT 0
8380: PPUSH
// if not multi_points or not side or side > 8 then
8381: LD_EXP 38
8385: NOT
8386: IFTRUE 8395
8388: PUSH
8389: LD_VAR 0 1
8393: NOT
8394: OR
8395: IFTRUE 8407
8397: PUSH
8398: LD_VAR 0 1
8402: PUSH
8403: LD_INT 8
8405: GREATER
8406: OR
8407: IFFALSE 8411
// exit ;
8409: GO 8448
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8411: LD_ADDR_EXP 38
8415: PUSH
8416: LD_EXP 38
8420: PPUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: LD_EXP 38
8430: PUSH
8431: LD_VAR 0 1
8435: ARRAY
8436: PUSH
8437: LD_VAR 0 2
8441: PLUS
8442: PPUSH
8443: CALL_OW 1
8447: ST_TO_ADDR
// end ;
8448: LD_VAR 0 3
8452: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8453: LD_INT 0
8455: PPUSH
// if not multi_points or not side or side > 8 then
8456: LD_EXP 38
8460: NOT
8461: IFTRUE 8470
8463: PUSH
8464: LD_VAR 0 1
8468: NOT
8469: OR
8470: IFTRUE 8482
8472: PUSH
8473: LD_VAR 0 1
8477: PUSH
8478: LD_INT 8
8480: GREATER
8481: OR
8482: IFFALSE 8486
// exit ;
8484: GO 8502
// result := multi_points [ side ] ;
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: LD_EXP 38
8495: PUSH
8496: LD_VAR 0 1
8500: ARRAY
8501: ST_TO_ADDR
// end ;
8502: LD_VAR 0 2
8506: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8507: LD_INT 0
8509: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8510: LD_ADDR_EXP 39
8514: PUSH
8515: LD_EXP 39
8519: PPUSH
8520: LD_EXP 39
8524: PUSH
8525: LD_INT 1
8527: PLUS
8528: PPUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 1
8538: ST_TO_ADDR
// end ;
8539: LD_VAR 0 2
8543: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8544: LD_INT 0
8546: PPUSH
// if not id then
8547: LD_VAR 0 1
8551: NOT
8552: IFFALSE 8556
// exit ;
8554: GO 8572
// result := multi_points_conditions [ id ] ;
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: LD_EXP 39
8565: PUSH
8566: LD_VAR 0 1
8570: ARRAY
8571: ST_TO_ADDR
// end ;
8572: LD_VAR 0 2
8576: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
// players := [ ] ;
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: EMPTY
8590: ST_TO_ADDR
// for i = 1 to 8 do
8591: LD_ADDR_VAR 0 4
8595: PUSH
8596: DOUBLE
8597: LD_INT 1
8599: DEC
8600: ST_TO_ADDR
8601: LD_INT 8
8603: PUSH
8604: FOR_TO
8605: IFFALSE 8666
// begin if i = side then
8607: LD_VAR 0 4
8611: PUSH
8612: LD_VAR 0 1
8616: EQUAL
8617: IFFALSE 8621
// continue ;
8619: GO 8604
// if multi_sides [ i ] and not multi_loosers [ i ] then
8621: LD_EXP 15
8625: PUSH
8626: LD_VAR 0 4
8630: ARRAY
8631: IFFALSE 8646
8633: PUSH
8634: LD_EXP 32
8638: PUSH
8639: LD_VAR 0 4
8643: ARRAY
8644: NOT
8645: AND
8646: IFFALSE 8664
// players := players ^ i ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PUSH
8658: LD_VAR 0 4
8662: ADD
8663: ST_TO_ADDR
// end ;
8664: GO 8604
8666: POP
8667: POP
// if not players then
8668: LD_VAR 0 3
8672: NOT
8673: IFFALSE 8677
// exit ;
8675: GO 8944
// if players = 1 then
8677: LD_VAR 0 3
8681: PUSH
8682: LD_INT 1
8684: EQUAL
8685: IFFALSE 8746
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8687: LD_ADDR_VAR 0 4
8691: PUSH
8692: LD_INT 22
8694: PUSH
8695: LD_VAR 0 1
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 51
8706: PUSH
8707: EMPTY
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 69
8718: PUSH
8719: FOR_IN
8720: IFFALSE 8742
// SetSide ( i , players [ 1 ] ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_VAR 0 3
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 235
8740: GO 8719
8742: POP
8743: POP
// end else
8744: GO 8944
// begin j := 1 ;
8746: LD_ADDR_VAR 0 5
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8754: LD_ADDR_VAR 0 4
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_VAR 0 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: LD_INT 21
8776: PUSH
8777: LD_INT 1
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 51
8786: PUSH
8787: EMPTY
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 21
8796: PUSH
8797: LD_INT 2
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: PUSH
8818: FOR_IN
8819: IFFALSE 8942
// begin SetSide ( i , players [ j ] ) ;
8821: LD_VAR 0 4
8825: PPUSH
8826: LD_VAR 0 3
8830: PUSH
8831: LD_VAR 0 5
8835: ARRAY
8836: PPUSH
8837: CALL_OW 235
// if IsDrivenBy ( i ) then
8841: LD_VAR 0 4
8845: PPUSH
8846: CALL_OW 311
8850: IFFALSE 8877
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8852: LD_VAR 0 4
8856: PPUSH
8857: CALL_OW 311
8861: PPUSH
8862: LD_VAR 0 3
8866: PUSH
8867: LD_VAR 0 5
8871: ARRAY
8872: PPUSH
8873: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8877: LD_VAR 0 4
8881: PPUSH
8882: CALL_OW 310
8886: PPUSH
8887: CALL_OW 247
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: IFFALSE 8906
// ComExitBuilding ( i ) ;
8897: LD_VAR 0 4
8901: PPUSH
8902: CALL_OW 122
// j := j + 1 ;
8906: LD_ADDR_VAR 0 5
8910: PUSH
8911: LD_VAR 0 5
8915: PUSH
8916: LD_INT 1
8918: PLUS
8919: ST_TO_ADDR
// if j > players then
8920: LD_VAR 0 5
8924: PUSH
8925: LD_VAR 0 3
8929: GREATER
8930: IFFALSE 8940
// j := 1 ;
8932: LD_ADDR_VAR 0 5
8936: PUSH
8937: LD_INT 1
8939: ST_TO_ADDR
// end ;
8940: GO 8818
8942: POP
8943: POP
// end ; end ;
8944: LD_VAR 0 2
8948: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8949: LD_INT 0
8951: PPUSH
// if not side or side > 8 then
8952: LD_VAR 0 1
8956: NOT
8957: IFTRUE 8969
8959: PUSH
8960: LD_VAR 0 1
8964: PUSH
8965: LD_INT 8
8967: GREATER
8968: OR
8969: IFFALSE 8973
// exit ;
8971: GO 8990
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8973: LD_VAR 0 1
8977: PPUSH
8978: LD_INT 6
8980: PPUSH
8981: CALL 8544 0 1
8985: PPUSH
8986: CALL 8378 0 2
// end ;
8990: LD_VAR 0 2
8994: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8995: LD_INT 0
8997: PPUSH
// if not side or side > 8 then
8998: LD_VAR 0 1
9002: NOT
9003: IFTRUE 9015
9005: PUSH
9006: LD_VAR 0 1
9010: PUSH
9011: LD_INT 8
9013: GREATER
9014: OR
9015: IFFALSE 9019
// exit ;
9017: GO 9036
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
9019: LD_VAR 0 1
9023: PPUSH
9024: LD_INT 4
9026: PPUSH
9027: CALL 8544 0 1
9031: PPUSH
9032: CALL 8378 0 2
// end ;
9036: LD_VAR 0 2
9040: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
9041: LD_INT 0
9043: PPUSH
// if not side or side > 8 then
9044: LD_VAR 0 1
9048: NOT
9049: IFTRUE 9061
9051: PUSH
9052: LD_VAR 0 1
9056: PUSH
9057: LD_INT 8
9059: GREATER
9060: OR
9061: IFFALSE 9065
// exit ;
9063: GO 9082
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
9065: LD_VAR 0 1
9069: PPUSH
9070: LD_INT 5
9072: PPUSH
9073: CALL 8544 0 1
9077: PPUSH
9078: CALL 8378 0 2
// end ;
9082: LD_VAR 0 2
9086: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
9087: LD_INT 0
9089: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
9090: LD_VAR 0 1
9094: NOT
9095: IFTRUE 9107
9097: PUSH
9098: LD_VAR 0 1
9102: PUSH
9103: LD_INT 8
9105: GREATER
9106: OR
9107: IFTRUE 9135
9109: PUSH
9110: LD_VAR 0 2
9114: PUSH
9115: LD_INT 2
9117: PUSH
9118: LD_INT 6
9120: PUSH
9121: LD_INT 36
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: IN
9133: NOT
9134: OR
9135: IFFALSE 9139
// exit ;
9137: GO 9156
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_INT 3
9146: PPUSH
9147: CALL 8544 0 1
9151: PPUSH
9152: CALL 8378 0 2
// end ;
9156: LD_VAR 0 3
9160: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
// if not un then
9165: LD_VAR 0 1
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9220
// if not points then
9174: LD_VAR 0 3
9178: NOT
9179: IFFALSE 9196
// gained_points := Multiplayer_GetCondition ( 1 ) else
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL 8544 0 1
9193: ST_TO_ADDR
9194: GO 9206
// gained_points := points ;
9196: LD_ADDR_VAR 0 5
9200: PUSH
9201: LD_VAR 0 3
9205: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
9206: LD_VAR 0 2
9210: PPUSH
9211: LD_VAR 0 5
9215: PPUSH
9216: CALL 8378 0 2
// end ; end_of_file
9220: LD_VAR 0 4
9224: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
9225: LD_INT 0
9227: PPUSH
// begin side := GetSide ( un ) ;
9228: LD_ADDR_VAR 0 4
9232: PUSH
9233: LD_VAR 0 1
9237: PPUSH
9238: CALL_OW 255
9242: ST_TO_ADDR
// if killerSide = enemySide then
9243: LD_VAR 0 2
9247: PUSH
9248: LD_EXP 12
9252: EQUAL
9253: IFFALSE 9257
// exit ;
9255: GO 9319
// if side = convoySide and multi_sides [ killerSide ] then
9257: LD_VAR 0 4
9261: PUSH
9262: LD_EXP 42
9266: EQUAL
9267: IFFALSE 9281
9269: PUSH
9270: LD_EXP 15
9274: PUSH
9275: LD_VAR 0 2
9279: ARRAY
9280: AND
9281: IFFALSE 9302
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9283: LD_VAR 0 4
9287: PPUSH
9288: LD_INT 9
9290: PPUSH
9291: CALL 8544 0 1
9295: PPUSH
9296: CALL 8378 0 2
// exit ;
9300: GO 9319
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9302: LD_VAR 0 1
9306: PPUSH
9307: LD_VAR 0 2
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: CALL 9161 0 3
// end ;
9319: PPOPN 4
9321: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9322: LD_INT 0
9324: PPUSH
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
9330: PPUSH
9331: PPUSH
9332: PPUSH
9333: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL 59114 0 1
// side := GetSide ( un ) ;
9343: LD_ADDR_VAR 0 3
9347: PUSH
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 255
9357: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9358: LD_EXP 15
9362: PUSH
9363: LD_VAR 0 3
9367: ARRAY
9368: IFTRUE 9382
9370: PUSH
9371: LD_VAR 0 3
9375: PUSH
9376: LD_EXP 42
9380: EQUAL
9381: OR
9382: IFFALSE 9460
// begin if un in convoys then
9384: LD_VAR 0 1
9388: PUSH
9389: LD_EXP 40
9393: IN
9394: IFFALSE 9412
// convoys := convoys diff un ;
9396: LD_ADDR_EXP 40
9400: PUSH
9401: LD_EXP 40
9405: PUSH
9406: LD_VAR 0 1
9410: DIFF
9411: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 247
9421: PUSH
9422: LD_INT 1
9424: EQUAL
9425: IFFALSE 9436
// MultiplayerEvent_HumanLost ( side ) ;
9427: LD_VAR 0 3
9431: PPUSH
9432: CALL 8995 0 1
// if GetType ( un ) = unit_vehicle then
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 247
9445: PUSH
9446: LD_INT 2
9448: EQUAL
9449: IFFALSE 9460
// MultiplayerEvent_VehicleLost ( side ) ;
9451: LD_VAR 0 3
9455: PPUSH
9456: CALL 9041 0 1
// end ; if un in enemyForestGuard then
9460: LD_VAR 0 1
9464: PUSH
9465: LD_EXP 11
9469: IN
9470: IFFALSE 9488
// enemyForestGuard := enemyForestGuard diff un ;
9472: LD_ADDR_EXP 11
9476: PUSH
9477: LD_EXP 11
9481: PUSH
9482: LD_VAR 0 1
9486: DIFF
9487: ST_TO_ADDR
// if un in enemyMobile then
9488: LD_VAR 0 1
9492: PUSH
9493: LD_EXP 10
9497: IN
9498: IFFALSE 9516
// enemyMobile := enemyMobile diff un ;
9500: LD_ADDR_EXP 10
9504: PUSH
9505: LD_EXP 10
9509: PUSH
9510: LD_VAR 0 1
9514: DIFF
9515: ST_TO_ADDR
// if un in enemyUnits then
9516: LD_VAR 0 1
9520: PUSH
9521: LD_EXP 9
9525: IN
9526: IFFALSE 9544
// enemyUnits := enemyUnits diff un ;
9528: LD_ADDR_EXP 9
9532: PUSH
9533: LD_EXP 9
9537: PUSH
9538: LD_VAR 0 1
9542: DIFF
9543: ST_TO_ADDR
// if un in arAttackersInf then
9544: LD_VAR 0 1
9548: PUSH
9549: LD_EXP 13
9553: IN
9554: IFFALSE 9572
// arAttackersInf := arAttackersInf diff un ;
9556: LD_ADDR_EXP 13
9560: PUSH
9561: LD_EXP 13
9565: PUSH
9566: LD_VAR 0 1
9570: DIFF
9571: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
9572: LD_EXP 31
9576: IFFALSE 9584
9578: PUSH
9579: LD_EXP 24
9583: AND
9584: IFFALSE 9599
9586: PUSH
9587: LD_EXP 32
9591: PUSH
9592: LD_VAR 0 3
9596: ARRAY
9597: NOT
9598: AND
9599: IFFALSE 9677
// if un in multi_commanders then
9601: LD_VAR 0 1
9605: PUSH
9606: LD_EXP 31
9610: IN
9611: IFFALSE 9677
// begin if side = your_side then
9613: LD_VAR 0 3
9617: PUSH
9618: LD_OWVAR 2
9622: EQUAL
9623: IFFALSE 9629
// Multiplayer_Loose_Message ;
9625: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9629: LD_ADDR_EXP 32
9633: PUSH
9634: LD_EXP 32
9638: PPUSH
9639: LD_VAR 0 3
9643: PPUSH
9644: LD_INT 1
9646: PPUSH
9647: CALL_OW 1
9651: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9652: LD_ADDR_EXP 31
9656: PUSH
9657: LD_EXP 31
9661: PUSH
9662: LD_VAR 0 1
9666: DIFF
9667: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9668: LD_VAR 0 3
9672: PPUSH
9673: CALL 8577 0 1
// end ; end ;
9677: PPOPN 11
9679: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9680: LD_INT 0
9682: PPUSH
9683: PPUSH
9684: PPUSH
9685: PPUSH
// begin side := GetSide ( building ) ;
9686: LD_ADDR_VAR 0 4
9690: PUSH
9691: LD_VAR 0 1
9695: PPUSH
9696: CALL_OW 255
9700: ST_TO_ADDR
// if multi_sides [ side ] then
9701: LD_EXP 15
9705: PUSH
9706: LD_VAR 0 4
9710: ARRAY
9711: IFFALSE 9732
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9713: LD_VAR 0 4
9717: PPUSH
9718: LD_VAR 0 1
9722: PPUSH
9723: CALL_OW 266
9727: PPUSH
9728: CALL 9087 0 2
// end ;
9732: PPOPN 5
9734: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9735: LD_INT 0
9737: PPUSH
9738: PPUSH
9739: PPUSH
9740: PPUSH
9741: PPUSH
9742: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9743: LD_VAR 0 1
9747: PPUSH
9748: LD_VAR 0 2
9752: PPUSH
9753: CALL 59172 0 2
// side := GetSide ( vehicle ) ;
9757: LD_ADDR_VAR 0 4
9761: PUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 255
9771: ST_TO_ADDR
// if multi_sides [ side ] then
9772: LD_EXP 15
9776: PUSH
9777: LD_VAR 0 4
9781: ARRAY
9782: IFFALSE 9793
// MultiplayerEvent_Produced ( side ) ;
9784: LD_VAR 0 4
9788: PPUSH
9789: CALL 8949 0 1
// end ;
9793: PPOPN 8
9795: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
// begin side := GetSide ( lab ) ;
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 255
9814: ST_TO_ADDR
// if multi_sides [ side ] then
9815: LD_EXP 15
9819: PUSH
9820: LD_VAR 0 4
9824: ARRAY
9825: IFFALSE 9890
// for i := 1 to 8 do
9827: LD_ADDR_VAR 0 3
9831: PUSH
9832: DOUBLE
9833: LD_INT 1
9835: DEC
9836: ST_TO_ADDR
9837: LD_INT 8
9839: PUSH
9840: FOR_TO
9841: IFFALSE 9888
// if multi_sides [ i ] and i <> side then
9843: LD_EXP 15
9847: PUSH
9848: LD_VAR 0 3
9852: ARRAY
9853: IFFALSE 9867
9855: PUSH
9856: LD_VAR 0 3
9860: PUSH
9861: LD_VAR 0 4
9865: NONEQUAL
9866: AND
9867: IFFALSE 9886
// SetTech ( tech , i , state_researched ) ;
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 2
9881: PPUSH
9882: CALL_OW 322
9886: GO 9840
9888: POP
9889: POP
// end ;
9890: PPOPN 4
9892: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9893: LD_VAR 0 2
9897: PUSH
9898: LD_EXP 10
9902: IN
9903: IFFALSE 9966
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 163
9912: PPUSH
9913: LD_INT 31
9915: PPUSH
9916: CALL_OW 111
// wait ( 0 0$1 ) ;
9920: LD_INT 35
9922: PPUSH
9923: CALL_OW 67
// if IsDead ( driver ) then
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 301
9936: IFFALSE 9940
// exit ;
9938: GO 9966
// until IsAt ( driver , 163 , 31 ) ;
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 163
9947: PPUSH
9948: LD_INT 31
9950: PPUSH
9951: CALL_OW 307
9955: IFFALSE 9905
// RemoveUnit ( driver ) ;
9957: LD_VAR 0 1
9961: PPUSH
9962: CALL_OW 64
// end ; end ; end_of_file
9966: PPOPN 4
9968: END
// every 8 8$00 trigger not forestIsCleared do
9969: LD_EXP 7
9973: NOT
9974: IFFALSE 9983
9976: GO 9978
9978: DISABLE
// ClearRoadInForest ;
9979: CALL 2246 0 0
9983: END
// every 18 18$00 trigger not forestIsCleared do
9984: LD_EXP 7
9988: NOT
9989: IFFALSE 9998
9991: GO 9993
9993: DISABLE
// ClearRoadInForest ;
9994: CALL 2246 0 0
9998: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9999: LD_EXP 41
10003: PUSH
10004: LD_INT 4
10006: MOD
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
10013: PUSH
10014: LD_EXP 41
10018: PUSH
10019: LD_INT 4
10021: GREATEREQUAL
10022: AND
10023: IFFALSE 10052
10025: GO 10027
10027: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
10028: LD_ADDR_EXP 13
10032: PUSH
10033: LD_EXP 13
10037: PUSH
10038: CALL 3435 0 0
10042: UNION
10043: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10044: LD_INT 10500
10046: PPUSH
10047: CALL_OW 67
// enable ;
10051: ENABLE
// end ;
10052: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
10053: LD_EXP 41
10057: PUSH
10058: LD_INT 7
10060: MOD
10061: PUSH
10062: LD_INT 0
10064: EQUAL
10065: IFFALSE 10077
10067: PUSH
10068: LD_EXP 41
10072: PUSH
10073: LD_INT 7
10075: GREATEREQUAL
10076: AND
10077: IFFALSE 10106
10079: GO 10081
10081: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
10082: LD_ADDR_EXP 13
10086: PUSH
10087: LD_EXP 13
10091: PUSH
10092: CALL 3679 0 0
10096: UNION
10097: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10098: LD_INT 10500
10100: PPUSH
10101: CALL_OW 67
// enable ;
10105: ENABLE
// end ;
10106: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 36 , 38 ] do
10107: LD_EXP 41
10111: PUSH
10112: LD_INT 8
10114: PUSH
10115: LD_INT 12
10117: PUSH
10118: LD_INT 16
10120: PUSH
10121: LD_INT 20
10123: PUSH
10124: LD_INT 22
10126: PUSH
10127: LD_INT 24
10129: PUSH
10130: LD_INT 26
10132: PUSH
10133: LD_INT 28
10135: PUSH
10136: LD_INT 30
10138: PUSH
10139: LD_INT 32
10141: PUSH
10142: LD_INT 36
10144: PUSH
10145: LD_INT 38
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: IN
10162: IFFALSE 10191
10164: GO 10166
10166: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
10167: LD_ADDR_EXP 13
10171: PUSH
10172: LD_EXP 13
10176: PUSH
10177: CALL 3230 0 0
10181: UNION
10182: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10183: LD_INT 10500
10185: PPUSH
10186: CALL_OW 67
// enable ;
10190: ENABLE
// end ;
10191: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
10192: LD_EXP 41
10196: PUSH
10197: LD_INT 5
10199: MOD
10200: PUSH
10201: LD_INT 4
10203: EQUAL
10204: IFFALSE 10247
10206: PUSH
10207: LD_INT 22
10209: PUSH
10210: LD_EXP 12
10214: PUSH
10215: EMPTY
10216: LIST
10217: LIST
10218: PUSH
10219: LD_INT 92
10221: PUSH
10222: LD_INT 30
10224: PUSH
10225: LD_INT 48
10227: PUSH
10228: LD_INT 20
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL_OW 69
10245: NOT
10246: AND
10247: IFFALSE 10264
10249: GO 10251
10251: DISABLE
// begin SendWestGroup ;
10252: CALL 2600 0 0
// wait ( 6 6$00 ) ;
10256: LD_INT 12600
10258: PPUSH
10259: CALL_OW 67
// enable ;
10263: ENABLE
// end ;
10264: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
10265: LD_EXP 10
10269: PPUSH
10270: LD_INT 50
10272: PUSH
10273: EMPTY
10274: LIST
10275: PPUSH
10276: CALL_OW 72
10280: PUSH
10281: LD_INT 5
10283: LESS
10284: IFFALSE 10318
10286: GO 10288
10288: DISABLE
// begin PrepareMobileGroup ;
10289: CALL 1586 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
10293: LD_INT 7350
10295: PUSH
10296: LD_INT 6300
10298: PUSH
10299: LD_INT 5250
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: PUSH
10307: LD_OWVAR 67
10311: ARRAY
10312: PPUSH
10313: CALL_OW 67
// enable ;
10317: ENABLE
// end ;
10318: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
10319: LD_EXP 41
10323: PUSH
10324: LD_INT 6
10326: MOD
10327: PUSH
10328: LD_INT 0
10330: EQUAL
10331: IFFALSE 10343
10333: PUSH
10334: LD_EXP 41
10338: PUSH
10339: LD_INT 6
10341: GREATEREQUAL
10342: AND
10343: IFFALSE 10366
10345: PUSH
10346: LD_EXP 10
10350: PPUSH
10351: LD_INT 50
10353: PUSH
10354: EMPTY
10355: LIST
10356: PPUSH
10357: CALL_OW 72
10361: PUSH
10362: LD_INT 10
10364: LESS
10365: AND
10366: IFFALSE 10400
10368: GO 10370
10370: DISABLE
// begin PrepareMobileGroup2 ;
10371: CALL 1914 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10375: LD_INT 9450
10377: PUSH
10378: LD_INT 8400
10380: PUSH
10381: LD_INT 7350
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: LD_OWVAR 67
10393: ARRAY
10394: PPUSH
10395: CALL_OW 67
// enable ;
10399: ENABLE
// end ;
10400: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10401: LD_EXP 7
10405: IFFALSE 10618
10407: GO 10409
10409: DISABLE
10410: LD_INT 0
10412: PPUSH
10413: PPUSH
// begin if tick > 50 50$00 then
10414: LD_OWVAR 1
10418: PUSH
10419: LD_INT 105000
10421: GREATER
10422: IFFALSE 10427
// begin disable ;
10424: DISABLE
// exit ;
10425: GO 10618
// end ; tmp := PrepareForestOnslaught ;
10427: LD_ADDR_VAR 0 2
10431: PUSH
10432: CALL 2902 0 0
10436: ST_TO_ADDR
// for i in tmp do
10437: LD_ADDR_VAR 0 1
10441: PUSH
10442: LD_VAR 0 2
10446: PUSH
10447: FOR_IN
10448: IFFALSE 10512
// begin AddComMoveXY ( i , 197 , 152 ) ;
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_INT 197
10457: PPUSH
10458: LD_INT 152
10460: PPUSH
10461: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10465: LD_VAR 0 1
10469: PPUSH
10470: LD_INT 159
10472: PPUSH
10473: LD_INT 163
10475: PPUSH
10476: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_INT 116
10487: PPUSH
10488: LD_INT 154
10490: PPUSH
10491: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10495: LD_VAR 0 1
10499: PPUSH
10500: LD_INT 93
10502: PPUSH
10503: LD_INT 177
10505: PPUSH
10506: CALL_OW 171
// end ;
10510: GO 10447
10512: POP
10513: POP
// repeat wait ( 0 0$1 ) ;
10514: LD_INT 35
10516: PPUSH
10517: CALL_OW 67
// for i in tmp do
10521: LD_ADDR_VAR 0 1
10525: PUSH
10526: LD_VAR 0 2
10530: PUSH
10531: FOR_IN
10532: IFFALSE 10593
// if not IsOk ( i ) then
10534: LD_VAR 0 1
10538: PPUSH
10539: CALL_OW 302
10543: NOT
10544: IFFALSE 10564
// tmp := tmp diff i else
10546: LD_ADDR_VAR 0 2
10550: PUSH
10551: LD_VAR 0 2
10555: PUSH
10556: LD_VAR 0 1
10560: DIFF
10561: ST_TO_ADDR
10562: GO 10591
// if not HasTask ( i ) then
10564: LD_VAR 0 1
10568: PPUSH
10569: CALL_OW 314
10573: NOT
10574: IFFALSE 10591
// ComMoveXY ( i , 93 , 177 ) ;
10576: LD_VAR 0 1
10580: PPUSH
10581: LD_INT 93
10583: PPUSH
10584: LD_INT 177
10586: PPUSH
10587: CALL_OW 111
10591: GO 10531
10593: POP
10594: POP
// until not tmp ;
10595: LD_VAR 0 2
10599: NOT
10600: IFFALSE 10514
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10602: LD_INT 1050
10604: PPUSH
10605: LD_INT 11550
10607: PPUSH
10608: CALL_OW 12
10612: PPUSH
10613: CALL_OW 67
// enable ;
10617: ENABLE
// end ;
10618: PPOPN 2
10620: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10621: LD_EXP 11
10625: IFFALSE 11144
10627: GO 10629
10629: DISABLE
10630: LD_INT 0
10632: PPUSH
10633: PPUSH
10634: PPUSH
10635: PPUSH
// begin enable ;
10636: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10637: LD_ADDR_VAR 0 2
10641: PUSH
10642: LD_EXP 11
10646: PPUSH
10647: LD_INT 50
10649: PUSH
10650: EMPTY
10651: LIST
10652: PPUSH
10653: CALL_OW 72
10657: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10658: LD_ADDR_VAR 0 3
10662: PUSH
10663: LD_INT 19
10665: PPUSH
10666: LD_INT 3
10668: PUSH
10669: LD_INT 22
10671: PUSH
10672: LD_EXP 12
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: PPUSH
10685: CALL_OW 70
10689: ST_TO_ADDR
// if not tmp then
10690: LD_VAR 0 2
10694: NOT
10695: IFFALSE 10699
// exit ;
10697: GO 11144
// for i in tmp do
10699: LD_ADDR_VAR 0 1
10703: PUSH
10704: LD_VAR 0 2
10708: PUSH
10709: FOR_IN
10710: IFFALSE 11142
// begin if enemyInForest then
10712: LD_VAR 0 3
10716: IFFALSE 10806
// begin if GetClass ( i ) = 4 then
10718: LD_VAR 0 1
10722: PPUSH
10723: CALL_OW 257
10727: PUSH
10728: LD_INT 4
10730: EQUAL
10731: IFFALSE 10765
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10733: LD_VAR 0 1
10737: PPUSH
10738: LD_VAR 0 2
10742: PUSH
10743: LD_VAR 0 1
10747: DIFF
10748: PPUSH
10749: LD_VAR 0 1
10753: PPUSH
10754: CALL_OW 74
10758: PPUSH
10759: CALL_OW 112
10763: GO 10804
// if GetClass ( i ) <> 3 then
10765: LD_VAR 0 1
10769: PPUSH
10770: CALL_OW 257
10774: PUSH
10775: LD_INT 3
10777: NONEQUAL
10778: IFFALSE 10804
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10780: LD_VAR 0 1
10784: PPUSH
10785: LD_VAR 0 3
10789: PPUSH
10790: LD_VAR 0 1
10794: PPUSH
10795: CALL_OW 74
10799: PPUSH
10800: CALL_OW 115
// end else
10804: GO 11140
// if not IsInArea ( i , arForestArea ) then
10806: LD_VAR 0 1
10810: PPUSH
10811: LD_INT 21
10813: PPUSH
10814: CALL_OW 308
10818: NOT
10819: IFFALSE 10835
// ComMoveToArea ( i , arForestArea ) else
10821: LD_VAR 0 1
10825: PPUSH
10826: LD_INT 21
10828: PPUSH
10829: CALL_OW 113
10833: GO 11140
// if GetClass ( i ) = 3 then
10835: LD_VAR 0 1
10839: PPUSH
10840: CALL_OW 257
10844: PUSH
10845: LD_INT 3
10847: EQUAL
10848: IFFALSE 11140
// begin vehicle := IsInUnit ( i ) ;
10850: LD_ADDR_VAR 0 4
10854: PUSH
10855: LD_VAR 0 1
10859: PPUSH
10860: CALL_OW 310
10864: ST_TO_ADDR
// if vehicle then
10865: LD_VAR 0 4
10869: IFFALSE 11096
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10871: LD_VAR 0 4
10875: PPUSH
10876: CALL_OW 256
10880: PUSH
10881: LD_INT 1000
10883: LESS
10884: IFFALSE 10898
10886: PUSH
10887: LD_VAR 0 1
10891: PPUSH
10892: CALL_OW 314
10896: NOT
10897: AND
10898: IFFALSE 11094
// begin if not IsInArea ( vehicle , arParkingArea ) then
10900: LD_VAR 0 4
10904: PPUSH
10905: LD_INT 20
10907: PPUSH
10908: CALL_OW 308
10912: NOT
10913: IFFALSE 10929
// ComMoveToArea ( vehicle , arParkingArea ) else
10915: LD_VAR 0 4
10919: PPUSH
10920: LD_INT 20
10922: PPUSH
10923: CALL_OW 113
10927: GO 11094
// if not GetTag ( i ) then
10929: LD_VAR 0 1
10933: PPUSH
10934: CALL_OW 110
10938: NOT
10939: IFFALSE 11094
// begin SetTag ( i , tMech ) ;
10941: LD_VAR 0 1
10945: PPUSH
10946: LD_INT 7
10948: PPUSH
10949: CALL_OW 109
// ComExitVehicle ( i ) ;
10953: LD_VAR 0 1
10957: PPUSH
10958: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10962: LD_VAR 0 1
10966: PPUSH
10967: LD_VAR 0 4
10971: PPUSH
10972: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10976: LD_INT 35
10978: PPUSH
10979: CALL_OW 67
// if FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) then
10983: LD_INT 19
10985: PPUSH
10986: LD_INT 3
10988: PUSH
10989: LD_INT 22
10991: PUSH
10992: LD_EXP 12
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PPUSH
11005: CALL_OW 70
11009: IFFALSE 11041
// begin ComEnterUnit ( i , vehicle ) ;
11011: LD_VAR 0 1
11015: PPUSH
11016: LD_VAR 0 4
11020: PPUSH
11021: CALL_OW 120
// SetTag ( i , 0 ) ;
11025: LD_VAR 0 1
11029: PPUSH
11030: LD_INT 0
11032: PPUSH
11033: CALL_OW 109
// exit ;
11037: POP
11038: POP
11039: GO 11144
// end ; until GetLives ( vehicle ) = 1000 ;
11041: LD_VAR 0 4
11045: PPUSH
11046: CALL_OW 256
11050: PUSH
11051: LD_INT 1000
11053: EQUAL
11054: IFFALSE 10976
// SetLives ( i , 1000 ) ;
11056: LD_VAR 0 1
11060: PPUSH
11061: LD_INT 1000
11063: PPUSH
11064: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
11068: LD_VAR 0 1
11072: PPUSH
11073: LD_VAR 0 4
11077: PPUSH
11078: CALL_OW 120
// SetTag ( i , 0 ) ;
11082: LD_VAR 0 1
11086: PPUSH
11087: LD_INT 0
11089: PPUSH
11090: CALL_OW 109
// end ; end ; end else
11094: GO 11140
// if not IsInArea ( i , arParkingArea ) and GetClass ( i ) <> 3 then
11096: LD_VAR 0 1
11100: PPUSH
11101: LD_INT 20
11103: PPUSH
11104: CALL_OW 308
11108: NOT
11109: IFFALSE 11126
11111: PUSH
11112: LD_VAR 0 1
11116: PPUSH
11117: CALL_OW 257
11121: PUSH
11122: LD_INT 3
11124: NONEQUAL
11125: AND
11126: IFFALSE 11140
// ComMoveToArea ( i , arParkingArea ) ;
11128: LD_VAR 0 1
11132: PPUSH
11133: LD_INT 20
11135: PPUSH
11136: CALL_OW 113
// end ; end ;
11140: GO 10709
11142: POP
11143: POP
// end ;
11144: PPOPN 4
11146: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
11147: LD_EXP 10
11151: IFFALSE 11684
11153: GO 11155
11155: DISABLE
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
// begin enable ;
11161: ENABLE
// if not enemyMobile then
11162: LD_EXP 10
11166: NOT
11167: IFFALSE 11171
// exit ;
11169: GO 11684
// for i in enemyMobile do
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_EXP 10
11180: PUSH
11181: FOR_IN
11182: IFFALSE 11682
// begin if GetSide ( i ) <> enemySide then
11184: LD_VAR 0 1
11188: PPUSH
11189: CALL_OW 255
11193: PUSH
11194: LD_EXP 12
11198: NONEQUAL
11199: IFFALSE 11219
// begin enemyMobile := enemyMobile diff i ;
11201: LD_ADDR_EXP 10
11205: PUSH
11206: LD_EXP 10
11210: PUSH
11211: LD_VAR 0 1
11215: DIFF
11216: ST_TO_ADDR
// continue ;
11217: GO 11181
// end ; if GetTag ( i ) = 300 then
11219: LD_VAR 0 1
11223: PPUSH
11224: CALL_OW 110
11228: PUSH
11229: LD_INT 300
11231: EQUAL
11232: IFFALSE 11347
// begin if GetFuel ( i ) < 50 then
11234: LD_VAR 0 1
11238: PPUSH
11239: CALL_OW 261
11243: PUSH
11244: LD_INT 50
11246: LESS
11247: IFFALSE 11306
// begin ComMoveXY ( i , 170 , 50 ) ;
11249: LD_VAR 0 1
11253: PPUSH
11254: LD_INT 170
11256: PPUSH
11257: LD_INT 50
11259: PPUSH
11260: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11264: LD_INT 35
11266: PPUSH
11267: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
11271: LD_VAR 0 1
11275: PPUSH
11276: LD_INT 170
11278: PPUSH
11279: LD_INT 50
11281: PPUSH
11282: CALL_OW 297
11286: PUSH
11287: LD_INT 4
11289: LESS
11290: IFFALSE 11264
// SetFuel ( i , 100 ) ;
11292: LD_VAR 0 1
11296: PPUSH
11297: LD_INT 100
11299: PPUSH
11300: CALL_OW 240
// end else
11304: GO 11347
// if not IsInArea ( i , arParkingArea ) then
11306: LD_VAR 0 1
11310: PPUSH
11311: LD_INT 20
11313: PPUSH
11314: CALL_OW 308
11318: NOT
11319: IFFALSE 11335
// ComMoveToArea ( i , arParkingArea ) else
11321: LD_VAR 0 1
11325: PPUSH
11326: LD_INT 20
11328: PPUSH
11329: CALL_OW 113
11333: GO 11347
// SetTag ( i , 301 ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_INT 301
11342: PPUSH
11343: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11347: LD_VAR 0 1
11351: PPUSH
11352: CALL_OW 110
11356: PUSH
11357: LD_INT 301
11359: EQUAL
11360: IFFALSE 11502
// begin if GetLives ( i ) < 1000 then
11362: LD_VAR 0 1
11366: PPUSH
11367: CALL_OW 256
11371: PUSH
11372: LD_INT 1000
11374: LESS
11375: IFFALSE 11479
// begin if not IsDrivenBy ( i ) then
11377: LD_VAR 0 1
11381: PPUSH
11382: CALL_OW 311
11386: NOT
11387: IFFALSE 11391
// continue ;
11389: GO 11181
// mech := IsDrivenBy ( i ) ;
11391: LD_ADDR_VAR 0 2
11395: PUSH
11396: LD_VAR 0 1
11400: PPUSH
11401: CALL_OW 311
11405: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11406: LD_VAR 0 2
11410: PPUSH
11411: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11415: LD_VAR 0 2
11419: PPUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11429: LD_INT 35
11431: PPUSH
11432: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11436: LD_VAR 0 1
11440: PPUSH
11441: CALL_OW 256
11445: PUSH
11446: LD_INT 1000
11448: EQUAL
11449: IFFALSE 11429
// SetLives ( mech , 1000 ) ;
11451: LD_VAR 0 2
11455: PPUSH
11456: LD_INT 1000
11458: PPUSH
11459: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11463: LD_VAR 0 2
11467: PPUSH
11468: LD_VAR 0 1
11472: PPUSH
11473: CALL_OW 120
// end else
11477: GO 11502
// if IsDrivenBy ( i ) then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 311
11488: IFFALSE 11502
// SetTag ( i , 0 ) ;
11490: LD_VAR 0 1
11494: PPUSH
11495: LD_INT 0
11497: PPUSH
11498: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11502: LD_VAR 0 1
11506: PPUSH
11507: CALL_OW 110
11511: PUSH
11512: LD_INT 300
11514: LESS
11515: IFFALSE 11680
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11517: LD_ADDR_VAR 0 3
11521: PUSH
11522: LD_INT 19
11524: PPUSH
11525: LD_INT 81
11527: PUSH
11528: LD_EXP 12
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PPUSH
11537: CALL_OW 70
11541: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11542: LD_VAR 0 1
11546: PPUSH
11547: CALL_OW 256
11551: PUSH
11552: LD_INT 650
11554: LESS
11555: IFFALSE 11580
// begin ComStop ( i ) ;
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 141
// SetTag ( i , 300 ) ;
11566: LD_VAR 0 1
11570: PPUSH
11571: LD_INT 300
11573: PPUSH
11574: CALL_OW 109
// continue ;
11578: GO 11181
// end ; if enemy then
11580: LD_VAR 0 3
11584: IFFALSE 11624
// begin if not HasTask ( i ) then
11586: LD_VAR 0 1
11590: PPUSH
11591: CALL_OW 314
11595: NOT
11596: IFFALSE 11622
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11598: LD_VAR 0 1
11602: PPUSH
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_VAR 0 1
11612: PPUSH
11613: CALL_OW 74
11617: PPUSH
11618: CALL_OW 115
// end else
11622: GO 11680
// if enemyMobile then
11624: LD_EXP 10
11628: IFFALSE 11680
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11630: LD_ADDR_VAR 0 3
11634: PUSH
11635: LD_INT 81
11637: PUSH
11638: LD_EXP 12
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// if enemy then
11652: LD_VAR 0 3
11656: IFFALSE 11680
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11658: LD_VAR 0 1
11662: PPUSH
11663: LD_INT 130
11665: PUSH
11666: LD_INT 28
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: PPUSH
11676: CALL 56526 0 2
// end ; end ; end ;
11680: GO 11181
11682: POP
11683: POP
// end ;
11684: PPOPN 3
11686: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11687: LD_EXP 13
11691: IFFALSE 12216
11693: GO 11695
11695: DISABLE
11696: LD_INT 0
11698: PPUSH
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
// begin enable ;
11703: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11704: LD_ADDR_VAR 0 2
11708: PUSH
11709: LD_EXP 13
11713: PPUSH
11714: LD_INT 50
11716: PUSH
11717: EMPTY
11718: LIST
11719: PPUSH
11720: CALL_OW 72
11724: ST_TO_ADDR
// arAttackersInf := [ ] ;
11725: LD_ADDR_EXP 13
11729: PUSH
11730: EMPTY
11731: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11732: LD_ADDR_VAR 0 1
11736: PUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_INT 25
11744: PUSH
11745: LD_INT 1
11747: PUSH
11748: EMPTY
11749: LIST
11750: LIST
11751: PPUSH
11752: CALL_OW 72
11756: PUSH
11757: FOR_IN
11758: IFFALSE 11910
// begin if Prob ( 50 ) then
11760: LD_INT 50
11762: PPUSH
11763: CALL_OW 13
11767: IFFALSE 11783
// SetTag ( i , tMine ) else
11769: LD_VAR 0 1
11773: PPUSH
11774: LD_INT 6
11776: PPUSH
11777: CALL_OW 109
11781: GO 11785
// continue ;
11783: GO 11757
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11785: LD_ADDR_VAR 0 3
11789: PUSH
11790: LD_INT 81
11792: PUSH
11793: LD_EXP 12
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 3
11804: PUSH
11805: LD_INT 120
11807: PUSH
11808: LD_INT 11
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 2
11821: PUSH
11822: LD_INT 21
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 21
11834: PUSH
11835: LD_INT 3
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: LIST
11851: PPUSH
11852: CALL_OW 69
11856: PPUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 74
11866: ST_TO_ADDR
// if not nearest then
11867: LD_VAR 0 3
11871: NOT
11872: IFFALSE 11876
// break ;
11874: GO 11910
// SetTag ( nearest , tMined ) ;
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_INT 11
11883: PPUSH
11884: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_INT 0
11895: PPUSH
11896: LD_INT 0
11898: PPUSH
11899: LD_VAR 0 3
11903: PPUSH
11904: CALL_OW 192
// end ;
11908: GO 11757
11910: POP
11911: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11912: LD_ADDR_VAR 0 2
11916: PUSH
11917: LD_VAR 0 2
11921: PPUSH
11922: LD_INT 50
11924: PUSH
11925: EMPTY
11926: LIST
11927: PPUSH
11928: CALL_OW 72
11932: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11933: LD_INT 70
11935: PPUSH
11936: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11940: LD_ADDR_VAR 0 2
11944: PUSH
11945: LD_VAR 0 2
11949: PPUSH
11950: LD_INT 50
11952: PUSH
11953: EMPTY
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11961: LD_ADDR_VAR 0 4
11965: PUSH
11966: LD_INT 81
11968: PUSH
11969: LD_EXP 12
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PPUSH
11978: CALL_OW 69
11982: ST_TO_ADDR
// for i in tmp do
11983: LD_ADDR_VAR 0 1
11987: PUSH
11988: LD_VAR 0 2
11992: PUSH
11993: FOR_IN
11994: IFFALSE 12207
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11996: LD_VAR 0 1
12000: PPUSH
12001: CALL_OW 257
12005: PUSH
12006: LD_INT 1
12008: NONEQUAL
12009: IFFALSE 12026
12011: PUSH
12012: LD_VAR 0 1
12016: PPUSH
12017: CALL_OW 110
12021: PUSH
12022: LD_INT 6
12024: NONEQUAL
12025: AND
12026: IFFALSE 12054
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12028: LD_VAR 0 1
12032: PPUSH
12033: LD_VAR 0 4
12037: PPUSH
12038: LD_VAR 0 1
12042: PPUSH
12043: CALL_OW 74
12047: PPUSH
12048: CALL_OW 115
12052: GO 12205
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
12054: LD_ADDR_VAR 0 3
12058: PUSH
12059: LD_VAR 0 4
12063: PPUSH
12064: LD_INT 3
12066: PUSH
12067: LD_INT 120
12069: PUSH
12070: LD_INT 11
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 21
12086: PUSH
12087: LD_INT 2
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 21
12096: PUSH
12097: LD_INT 3
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: LIST
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PPUSH
12113: CALL_OW 72
12117: PPUSH
12118: LD_VAR 0 1
12122: PPUSH
12123: CALL_OW 74
12127: ST_TO_ADDR
// if not nearest then
12128: LD_VAR 0 3
12132: NOT
12133: IFFALSE 12161
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12135: LD_VAR 0 1
12139: PPUSH
12140: LD_VAR 0 4
12144: PPUSH
12145: LD_VAR 0 1
12149: PPUSH
12150: CALL_OW 74
12154: PPUSH
12155: CALL_OW 115
12159: GO 12205
// if not HasTask ( i ) then
12161: LD_VAR 0 1
12165: PPUSH
12166: CALL_OW 314
12170: NOT
12171: IFFALSE 12205
// begin SetTag ( nearest , tMined ) ;
12173: LD_VAR 0 3
12177: PPUSH
12178: LD_INT 11
12180: PPUSH
12181: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 0
12192: PPUSH
12193: LD_INT 0
12195: PPUSH
12196: LD_VAR 0 3
12200: PPUSH
12201: CALL_OW 132
// end ; end ;
12205: GO 11993
12207: POP
12208: POP
// until not tmp ;
12209: LD_VAR 0 2
12213: NOT
12214: IFFALSE 11933
// end ;
12216: PPOPN 5
12218: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
12219: LD_INT 22
12221: PUSH
12222: LD_EXP 12
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: PUSH
12231: LD_INT 32
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: PPUSH
12245: CALL_OW 69
12249: IFFALSE 12328
12251: GO 12253
12253: DISABLE
12254: LD_INT 0
12256: PPUSH
// begin enable ;
12257: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
12258: LD_ADDR_VAR 0 1
12262: PUSH
12263: LD_INT 22
12265: PUSH
12266: LD_EXP 12
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 32
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PPUSH
12289: CALL_OW 69
12293: PUSH
12294: FOR_IN
12295: IFFALSE 12326
// if GetFuel ( i ) < 3 then
12297: LD_VAR 0 1
12301: PPUSH
12302: CALL_OW 261
12306: PUSH
12307: LD_INT 3
12309: LESS
12310: IFFALSE 12324
// SetFuel ( i , 3 ) ;
12312: LD_VAR 0 1
12316: PPUSH
12317: LD_INT 3
12319: PPUSH
12320: CALL_OW 240
12324: GO 12294
12326: POP
12327: POP
// end ;
12328: PPOPN 1
12330: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
12331: LD_INT 9
12333: PPUSH
12334: LD_INT 22
12336: PUSH
12337: LD_EXP 12
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PPUSH
12346: CALL_OW 70
12350: IFFALSE 12413
12352: GO 12354
12354: DISABLE
12355: LD_INT 0
12357: PPUSH
// begin enable ;
12358: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
12359: LD_ADDR_VAR 0 1
12363: PUSH
12364: LD_INT 9
12366: PPUSH
12367: LD_INT 22
12369: PUSH
12370: LD_EXP 12
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PPUSH
12379: CALL_OW 70
12383: PUSH
12384: FOR_IN
12385: IFFALSE 12411
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
12387: LD_EXP 42
12391: PPUSH
12392: LD_INT 250
12394: NEG
12395: PPUSH
12396: CALL 8378 0 2
// RemoveUnit ( i ) ;
12400: LD_VAR 0 1
12404: PPUSH
12405: CALL_OW 64
// end ;
12409: GO 12384
12411: POP
12412: POP
// end ; end_of_file
12413: PPOPN 1
12415: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
12416: LD_INT 0
12418: PPUSH
12419: PPUSH
// convoys := [ ] ;
12420: LD_ADDR_EXP 40
12424: PUSH
12425: EMPTY
12426: ST_TO_ADDR
// convoySide := side ;
12427: LD_ADDR_EXP 42
12431: PUSH
12432: LD_VAR 0 1
12436: ST_TO_ADDR
// convoyWave := 1 ;
12437: LD_ADDR_EXP 41
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// for i := 1 to 8 do
12445: LD_ADDR_VAR 0 3
12449: PUSH
12450: DOUBLE
12451: LD_INT 1
12453: DEC
12454: ST_TO_ADDR
12455: LD_INT 8
12457: PUSH
12458: FOR_TO
12459: IFFALSE 12489
// if multi_sides [ i ] then
12461: LD_EXP 15
12465: PUSH
12466: LD_VAR 0 3
12470: ARRAY
12471: IFFALSE 12487
// ChangeSideFog ( i , side ) ;
12473: LD_VAR 0 3
12477: PPUSH
12478: LD_VAR 0 1
12482: PPUSH
12483: CALL_OW 343
12487: GO 12458
12489: POP
12490: POP
// end ;
12491: LD_VAR 0 2
12495: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12496: LD_EXP 2
12500: IFFALSE 12535
12502: GO 12504
12504: DISABLE
12505: LD_INT 0
12507: PPUSH
12508: PPUSH
// begin enable ;
12509: ENABLE
// blockThread := true ;
12510: LD_ADDR_EXP 6
12514: PUSH
12515: LD_INT 1
12517: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12518: LD_EXP 41
12522: PPUSH
12523: CALL 12538 0 1
// blockThread := false ;
12527: LD_ADDR_EXP 6
12531: PUSH
12532: LD_INT 0
12534: ST_TO_ADDR
// end ;
12535: PPOPN 2
12537: END
// function SendConvoy ( wave ) ; var i , v , skill , un , veh , tmp , path ; begin
12538: LD_INT 0
12540: PPUSH
12541: PPUSH
12542: PPUSH
12543: PPUSH
12544: PPUSH
12545: PPUSH
12546: PPUSH
12547: PPUSH
// convoyWave := Inc ( wave ) ;
12548: LD_ADDR_EXP 41
12552: PUSH
12553: LD_VAR 0 1
12557: PPUSH
12558: CALL 55133 0 1
12562: ST_TO_ADDR
// v := convoyWave div 12 ;
12563: LD_ADDR_VAR 0 4
12567: PUSH
12568: LD_EXP 41
12572: PUSH
12573: LD_INT 12
12575: DIV
12576: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] + v ;
12577: LD_ADDR_VAR 0 5
12581: PUSH
12582: LD_INT 5
12584: PUSH
12585: LD_INT 4
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_OWVAR 67
12600: ARRAY
12601: PUSH
12602: LD_VAR 0 4
12606: PLUS
12607: ST_TO_ADDR
// if skill > 10 then
12608: LD_VAR 0 5
12612: PUSH
12613: LD_INT 10
12615: GREATER
12616: IFFALSE 12626
// skill := 10 ;
12618: LD_ADDR_VAR 0 5
12622: PUSH
12623: LD_INT 10
12625: ST_TO_ADDR
// tmp := [ ] ;
12626: LD_ADDR_VAR 0 8
12630: PUSH
12631: EMPTY
12632: ST_TO_ADDR
// if wave mod 5 = 0 then
12633: LD_VAR 0 1
12637: PUSH
12638: LD_INT 5
12640: MOD
12641: PUSH
12642: LD_INT 0
12644: EQUAL
12645: IFFALSE 12891
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12647: LD_ADDR_VAR 0 9
12651: PUSH
12652: LD_INT 16
12654: PUSH
12655: LD_INT 21
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 36
12664: PUSH
12665: LD_INT 45
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 48
12674: PUSH
12675: LD_INT 58
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 59
12684: PUSH
12685: LD_INT 88
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 76
12694: PUSH
12695: LD_INT 106
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 93
12704: PUSH
12705: LD_INT 150
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 92
12714: PUSH
12715: LD_INT 177
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: ST_TO_ADDR
// for i := 1 to 4 do
12731: LD_ADDR_VAR 0 3
12735: PUSH
12736: DOUBLE
12737: LD_INT 1
12739: DEC
12740: ST_TO_ADDR
12741: LD_INT 4
12743: PUSH
12744: FOR_TO
12745: IFFALSE 12887
// begin uc_side := convoySide ;
12747: LD_ADDR_OWVAR 20
12751: PUSH
12752: LD_EXP 42
12756: ST_TO_ADDR
// uc_nation := nation_russian ;
12757: LD_ADDR_OWVAR 21
12761: PUSH
12762: LD_INT 3
12764: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12765: LD_INT 0
12767: PPUSH
12768: LD_INT 1
12770: PPUSH
12771: LD_INT 4
12773: PPUSH
12774: CALL_OW 12
12778: PPUSH
12779: LD_VAR 0 5
12783: PPUSH
12784: CALL_OW 380
// un := CreateHuman ;
12788: LD_ADDR_VAR 0 6
12792: PUSH
12793: CALL_OW 44
12797: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12798: LD_VAR 0 6
12802: PPUSH
12803: LD_INT 3
12805: PPUSH
12806: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12810: LD_VAR 0 6
12814: PPUSH
12815: LD_INT 10
12817: PPUSH
12818: LD_INT 0
12820: PPUSH
12821: CALL_OW 49
// SetLives ( un , rand ( 400 , 1000 ) ) ;
12825: LD_VAR 0 6
12829: PPUSH
12830: LD_INT 400
12832: PPUSH
12833: LD_INT 1000
12835: PPUSH
12836: CALL_OW 12
12840: PPUSH
12841: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12845: LD_ADDR_EXP 40
12849: PUSH
12850: LD_EXP 40
12854: PPUSH
12855: LD_VAR 0 6
12859: PPUSH
12860: CALL 53760 0 2
12864: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12865: LD_ADDR_VAR 0 8
12869: PUSH
12870: LD_VAR 0 8
12874: PPUSH
12875: LD_VAR 0 6
12879: PPUSH
12880: CALL 53760 0 2
12884: ST_TO_ADDR
// end ;
12885: GO 12744
12887: POP
12888: POP
// end else
12889: GO 14072
// if wave mod 3 = 0 then
12891: LD_VAR 0 1
12895: PUSH
12896: LD_INT 3
12898: MOD
12899: PUSH
12900: LD_INT 0
12902: EQUAL
12903: IFFALSE 13393
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12905: LD_ADDR_VAR 0 9
12909: PUSH
12910: LD_INT 133
12912: PUSH
12913: LD_INT 15
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 125
12922: PUSH
12923: LD_INT 34
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 109
12932: PUSH
12933: LD_INT 55
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: LD_INT 99
12942: PUSH
12943: LD_INT 64
12945: PUSH
12946: EMPTY
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 133
12952: PUSH
12953: LD_INT 102
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 143
12962: PUSH
12963: LD_INT 136
12965: PUSH
12966: EMPTY
12967: LIST
12968: LIST
12969: PUSH
12970: LD_INT 127
12972: PUSH
12973: LD_INT 154
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 92
12982: PUSH
12983: LD_INT 152
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 93
12992: PUSH
12993: LD_INT 177
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: ST_TO_ADDR
// for i := 1 to 4 do
13011: LD_ADDR_VAR 0 3
13015: PUSH
13016: DOUBLE
13017: LD_INT 1
13019: DEC
13020: ST_TO_ADDR
13021: LD_INT 4
13023: PUSH
13024: FOR_TO
13025: IFFALSE 13389
// begin uc_side := convoySide ;
13027: LD_ADDR_OWVAR 20
13031: PUSH
13032: LD_EXP 42
13036: ST_TO_ADDR
// uc_nation := nation_russian ;
13037: LD_ADDR_OWVAR 21
13041: PUSH
13042: LD_INT 3
13044: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13045: LD_INT 0
13047: PPUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_INT 4
13053: PPUSH
13054: CALL_OW 12
13058: PPUSH
13059: LD_VAR 0 5
13063: PPUSH
13064: CALL_OW 380
// un := CreateHuman ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: CALL_OW 44
13077: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
13078: LD_INT 21
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 1
13090: PPUSH
13091: LD_INT 2
13093: PPUSH
13094: CALL_OW 12
13098: ARRAY
13099: PPUSH
13100: LD_INT 1
13102: PPUSH
13103: LD_INT 1
13105: PPUSH
13106: LD_INT 42
13108: PUSH
13109: LD_INT 43
13111: PUSH
13112: LD_INT 51
13114: PUSH
13115: LD_INT 44
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 1
13126: PPUSH
13127: LD_INT 4
13129: PPUSH
13130: CALL_OW 12
13134: ARRAY
13135: PPUSH
13136: LD_INT 60
13138: PPUSH
13139: LD_INT 90
13141: PPUSH
13142: CALL_OW 12
13146: PPUSH
13147: CALL 20590 0 5
// veh := CreateVehicle ;
13151: LD_ADDR_VAR 0 7
13155: PUSH
13156: CALL_OW 45
13160: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13161: LD_VAR 0 7
13165: PPUSH
13166: LD_INT 3
13168: PPUSH
13169: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13173: LD_VAR 0 7
13177: PPUSH
13178: LD_INT 400
13180: PPUSH
13181: LD_INT 1000
13183: PPUSH
13184: CALL_OW 12
13188: PPUSH
13189: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13193: LD_VAR 0 7
13197: PPUSH
13198: CALL_OW 264
13202: PUSH
13203: LD_INT 51
13205: EQUAL
13206: IFFALSE 13254
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
13208: LD_VAR 0 7
13212: PPUSH
13213: LD_INT 1
13215: PUSH
13216: LD_INT 2
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 1
13225: PPUSH
13226: LD_INT 2
13228: PPUSH
13229: CALL_OW 12
13233: ARRAY
13234: PPUSH
13235: LD_INT 10
13237: PUSH
13238: LD_INT 1
13240: PPUSH
13241: LD_INT 10
13243: PPUSH
13244: CALL_OW 12
13248: MUL
13249: PPUSH
13250: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13254: LD_INT 10
13256: PPUSH
13257: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13261: LD_VAR 0 7
13265: PPUSH
13266: LD_INT 7
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 49
13276: IFFALSE 13254
// PlaceHumanInUnit ( un , veh ) ;
13278: LD_VAR 0 6
13282: PPUSH
13283: LD_VAR 0 7
13287: PPUSH
13288: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13292: LD_ADDR_EXP 40
13296: PUSH
13297: LD_EXP 40
13301: PPUSH
13302: LD_VAR 0 6
13306: PPUSH
13307: CALL 53760 0 2
13311: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13312: LD_ADDR_VAR 0 8
13316: PUSH
13317: LD_VAR 0 8
13321: PPUSH
13322: LD_VAR 0 6
13326: PPUSH
13327: CALL 53760 0 2
13331: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13332: LD_ADDR_EXP 40
13336: PUSH
13337: LD_EXP 40
13341: PPUSH
13342: LD_VAR 0 7
13346: PPUSH
13347: CALL 53760 0 2
13351: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13352: LD_ADDR_VAR 0 8
13356: PUSH
13357: LD_VAR 0 8
13361: PPUSH
13362: LD_VAR 0 7
13366: PPUSH
13367: CALL 53760 0 2
13371: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13372: LD_VAR 0 6
13376: PPUSH
13377: LD_INT 133
13379: PPUSH
13380: LD_INT 15
13382: PPUSH
13383: CALL_OW 111
// end ;
13387: GO 13024
13389: POP
13390: POP
// end else
13391: GO 14072
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
13393: LD_ADDR_VAR 0 9
13397: PUSH
13398: LD_INT 133
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: LD_INT 125
13410: PUSH
13411: LD_INT 34
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 109
13420: PUSH
13421: LD_INT 55
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 99
13430: PUSH
13431: LD_INT 64
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 88
13440: PUSH
13441: LD_INT 70
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 74
13450: PUSH
13451: LD_INT 78
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 70
13460: PUSH
13461: LD_INT 91
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 80
13470: PUSH
13471: LD_INT 113
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 89
13480: PUSH
13481: LD_INT 133
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 91
13490: PUSH
13491: LD_INT 159
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 93
13500: PUSH
13501: LD_INT 177
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: ST_TO_ADDR
// for i := 1 to 2 do
13521: LD_ADDR_VAR 0 3
13525: PUSH
13526: DOUBLE
13527: LD_INT 1
13529: DEC
13530: ST_TO_ADDR
13531: LD_INT 2
13533: PUSH
13534: FOR_TO
13535: IFFALSE 13880
// begin uc_side := convoySide ;
13537: LD_ADDR_OWVAR 20
13541: PUSH
13542: LD_EXP 42
13546: ST_TO_ADDR
// uc_nation := nation_russian ;
13547: LD_ADDR_OWVAR 21
13551: PUSH
13552: LD_INT 3
13554: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13555: LD_INT 0
13557: PPUSH
13558: LD_INT 1
13560: PPUSH
13561: LD_INT 4
13563: PPUSH
13564: CALL_OW 12
13568: PPUSH
13569: LD_VAR 0 5
13573: PPUSH
13574: CALL_OW 380
// un := CreateHuman ;
13578: LD_ADDR_VAR 0 6
13582: PUSH
13583: CALL_OW 44
13587: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13588: LD_INT 21
13590: PUSH
13591: LD_INT 22
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 1
13600: PPUSH
13601: LD_INT 2
13603: PPUSH
13604: CALL_OW 12
13608: ARRAY
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: LD_INT 42
13618: PUSH
13619: LD_INT 43
13621: PUSH
13622: LD_INT 51
13624: PUSH
13625: LD_INT 44
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 1
13636: PPUSH
13637: LD_INT 4
13639: PPUSH
13640: CALL_OW 12
13644: ARRAY
13645: PPUSH
13646: LD_INT 70
13648: PPUSH
13649: LD_INT 90
13651: PPUSH
13652: CALL_OW 12
13656: PPUSH
13657: CALL 20590 0 5
// veh := CreateVehicle ;
13661: LD_ADDR_VAR 0 7
13665: PUSH
13666: CALL_OW 45
13670: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13671: LD_VAR 0 7
13675: PPUSH
13676: LD_INT 3
13678: PPUSH
13679: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13683: LD_VAR 0 7
13687: PPUSH
13688: LD_INT 400
13690: PPUSH
13691: LD_INT 1000
13693: PPUSH
13694: CALL_OW 12
13698: PPUSH
13699: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13703: LD_VAR 0 7
13707: PPUSH
13708: CALL_OW 264
13712: PUSH
13713: LD_INT 51
13715: EQUAL
13716: IFFALSE 13745
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13718: LD_VAR 0 7
13722: PPUSH
13723: LD_INT 1
13725: PPUSH
13726: LD_INT 10
13728: PUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 10
13734: PPUSH
13735: CALL_OW 12
13739: MUL
13740: PPUSH
13741: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13745: LD_INT 10
13747: PPUSH
13748: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13752: LD_VAR 0 7
13756: PPUSH
13757: LD_INT 7
13759: PPUSH
13760: LD_INT 0
13762: PPUSH
13763: CALL_OW 49
13767: IFFALSE 13745
// PlaceHumanInUnit ( un , veh ) ;
13769: LD_VAR 0 6
13773: PPUSH
13774: LD_VAR 0 7
13778: PPUSH
13779: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13783: LD_ADDR_EXP 40
13787: PUSH
13788: LD_EXP 40
13792: PPUSH
13793: LD_VAR 0 6
13797: PPUSH
13798: CALL 53760 0 2
13802: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13803: LD_ADDR_VAR 0 8
13807: PUSH
13808: LD_VAR 0 8
13812: PPUSH
13813: LD_VAR 0 6
13817: PPUSH
13818: CALL 53760 0 2
13822: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13823: LD_ADDR_EXP 40
13827: PUSH
13828: LD_EXP 40
13832: PPUSH
13833: LD_VAR 0 7
13837: PPUSH
13838: CALL 53760 0 2
13842: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13843: LD_ADDR_VAR 0 8
13847: PUSH
13848: LD_VAR 0 8
13852: PPUSH
13853: LD_VAR 0 7
13857: PPUSH
13858: CALL 53760 0 2
13862: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13863: LD_VAR 0 6
13867: PPUSH
13868: LD_INT 133
13870: PPUSH
13871: LD_INT 15
13873: PPUSH
13874: CALL_OW 111
// end ;
13878: GO 13534
13880: POP
13881: POP
// for i := 1 to rand ( 3 , 5 ) do
13882: LD_ADDR_VAR 0 3
13886: PUSH
13887: DOUBLE
13888: LD_INT 1
13890: DEC
13891: ST_TO_ADDR
13892: LD_INT 3
13894: PPUSH
13895: LD_INT 5
13897: PPUSH
13898: CALL_OW 12
13902: PUSH
13903: FOR_TO
13904: IFFALSE 14070
// begin uc_side := convoySide ;
13906: LD_ADDR_OWVAR 20
13910: PUSH
13911: LD_EXP 42
13915: ST_TO_ADDR
// uc_nation := nation_russian ;
13916: LD_ADDR_OWVAR 21
13920: PUSH
13921: LD_INT 3
13923: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13924: LD_INT 0
13926: PPUSH
13927: LD_INT 1
13929: PPUSH
13930: LD_INT 4
13932: PPUSH
13933: CALL_OW 12
13937: PPUSH
13938: LD_VAR 0 5
13942: PPUSH
13943: CALL_OW 380
// un := CreateHuman ;
13947: LD_ADDR_VAR 0 6
13951: PUSH
13952: CALL_OW 44
13956: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13957: LD_VAR 0 6
13961: PPUSH
13962: LD_INT 3
13964: PPUSH
13965: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13969: LD_INT 35
13971: PPUSH
13972: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13976: LD_VAR 0 6
13980: PPUSH
13981: LD_INT 7
13983: PPUSH
13984: LD_INT 0
13986: PPUSH
13987: CALL_OW 49
13991: IFFALSE 13969
// SetLives ( un , rand ( 400 , 1000 ) ) ;
13993: LD_VAR 0 6
13997: PPUSH
13998: LD_INT 400
14000: PPUSH
14001: LD_INT 1000
14003: PPUSH
14004: CALL_OW 12
14008: PPUSH
14009: CALL_OW 234
// convoys := Join ( convoys , un ) ;
14013: LD_ADDR_EXP 40
14017: PUSH
14018: LD_EXP 40
14022: PPUSH
14023: LD_VAR 0 6
14027: PPUSH
14028: CALL 53760 0 2
14032: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
14033: LD_ADDR_VAR 0 8
14037: PUSH
14038: LD_VAR 0 8
14042: PPUSH
14043: LD_VAR 0 6
14047: PPUSH
14048: CALL 53760 0 2
14052: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
14053: LD_VAR 0 6
14057: PPUSH
14058: LD_INT 133
14060: PPUSH
14061: LD_INT 15
14063: PPUSH
14064: CALL_OW 111
// end ;
14068: GO 13903
14070: POP
14071: POP
// end ; if not tmp then
14072: LD_VAR 0 8
14076: NOT
14077: IFFALSE 14081
// exit ;
14079: GO 14389
// repeat wait ( 0 0$1 ) ;
14081: LD_INT 35
14083: PPUSH
14084: CALL_OW 67
// for i in tmp do
14088: LD_ADDR_VAR 0 3
14092: PUSH
14093: LD_VAR 0 8
14097: PUSH
14098: FOR_IN
14099: IFFALSE 14380
// begin if IsDead ( i ) then
14101: LD_VAR 0 3
14105: PPUSH
14106: CALL_OW 301
14110: IFFALSE 14130
// tmp := tmp diff i else
14112: LD_ADDR_VAR 0 8
14116: PUSH
14117: LD_VAR 0 8
14121: PUSH
14122: LD_VAR 0 3
14126: DIFF
14127: ST_TO_ADDR
14128: GO 14378
// if IsInArea ( i , southEndArea ) then
14130: LD_VAR 0 3
14134: PPUSH
14135: LD_INT 9
14137: PPUSH
14138: CALL_OW 308
14142: IFFALSE 14295
// begin tmp := tmp diff i ;
14144: LD_ADDR_VAR 0 8
14148: PUSH
14149: LD_VAR 0 8
14153: PUSH
14154: LD_VAR 0 3
14158: DIFF
14159: ST_TO_ADDR
// convoys := convoys diff i ;
14160: LD_ADDR_EXP 40
14164: PUSH
14165: LD_EXP 40
14169: PUSH
14170: LD_VAR 0 3
14174: DIFF
14175: ST_TO_ADDR
// if GetType ( i ) = unit_human then
14176: LD_VAR 0 3
14180: PPUSH
14181: CALL_OW 247
14185: PUSH
14186: LD_INT 1
14188: EQUAL
14189: IFFALSE 14210
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
14191: LD_EXP 42
14195: PPUSH
14196: LD_INT 7
14198: PPUSH
14199: CALL 8544 0 1
14203: PPUSH
14204: CALL 8378 0 2
14208: GO 14269
// begin tmp := tmp diff IsInUnit ( i ) ;
14210: LD_ADDR_VAR 0 8
14214: PUSH
14215: LD_VAR 0 8
14219: PUSH
14220: LD_VAR 0 3
14224: PPUSH
14225: CALL_OW 310
14229: DIFF
14230: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
14231: LD_ADDR_EXP 40
14235: PUSH
14236: LD_EXP 40
14240: PUSH
14241: LD_VAR 0 3
14245: PPUSH
14246: CALL_OW 310
14250: DIFF
14251: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
14252: LD_EXP 42
14256: PPUSH
14257: LD_INT 8
14259: PPUSH
14260: CALL 8544 0 1
14264: PPUSH
14265: CALL 8378 0 2
// end ; RemoveUnit ( i ) ;
14269: LD_VAR 0 3
14273: PPUSH
14274: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
14278: LD_ADDR_EXP 5
14282: PUSH
14283: LD_EXP 5
14287: PPUSH
14288: CALL 55133 0 1
14292: ST_TO_ADDR
// end else
14293: GO 14378
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
14295: LD_VAR 0 3
14299: PPUSH
14300: CALL_OW 247
14304: PUSH
14305: LD_INT 2
14307: EQUAL
14308: IFFALSE 14325
14310: PUSH
14311: LD_VAR 0 3
14315: PPUSH
14316: CALL_OW 261
14320: PUSH
14321: LD_INT 0
14323: EQUAL
14324: AND
14325: IFFALSE 14361
// begin tmp := tmp diff i ;
14327: LD_ADDR_VAR 0 8
14331: PUSH
14332: LD_VAR 0 8
14336: PUSH
14337: LD_VAR 0 3
14341: DIFF
14342: ST_TO_ADDR
// convoys := convoys diff i ;
14343: LD_ADDR_EXP 40
14347: PUSH
14348: LD_EXP 40
14352: PUSH
14353: LD_VAR 0 3
14357: DIFF
14358: ST_TO_ADDR
// end else
14359: GO 14378
// MoveTo ( i , path , southEndArea ) ;
14361: LD_VAR 0 3
14365: PPUSH
14366: LD_VAR 0 9
14370: PPUSH
14371: LD_INT 9
14373: PPUSH
14374: CALL 14394 0 3
// end ;
14378: GO 14098
14380: POP
14381: POP
// until not tmp ;
14382: LD_VAR 0 8
14386: NOT
14387: IFFALSE 14081
// end ;
14389: LD_VAR 0 2
14393: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
14394: LD_INT 0
14396: PPUSH
14397: PPUSH
14398: PPUSH
14399: PPUSH
14400: PPUSH
14401: PPUSH
// if not unit then
14402: LD_VAR 0 1
14406: NOT
14407: IFFALSE 14411
// exit ;
14409: GO 15187
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
14411: LD_ADDR_VAR 0 9
14415: PUSH
14416: LD_INT 29
14418: PUSH
14419: LD_INT 91
14421: PUSH
14422: LD_INT 49
14424: PUSH
14425: LD_INT 51
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: ST_TO_ADDR
// if IsOk ( unit ) then
14434: LD_VAR 0 1
14438: PPUSH
14439: CALL_OW 302
14443: IFFALSE 15187
// begin tag := GetTag ( unit ) + 1 ;
14445: LD_ADDR_VAR 0 6
14449: PUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 110
14459: PUSH
14460: LD_INT 1
14462: PLUS
14463: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
14464: LD_ADDR_VAR 0 5
14468: PUSH
14469: LD_VAR 0 1
14473: PPUSH
14474: CALL_OW 250
14478: PPUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 251
14488: PPUSH
14489: LD_INT 3
14491: PPUSH
14492: CALL 56268 0 3
14496: ST_TO_ADDR
// type := GetType ( unit ) ;
14497: LD_ADDR_VAR 0 7
14501: PUSH
14502: LD_VAR 0 1
14506: PPUSH
14507: CALL_OW 247
14511: ST_TO_ADDR
// if type = unit_human then
14512: LD_VAR 0 7
14516: PUSH
14517: LD_INT 1
14519: EQUAL
14520: IFFALSE 14612
// begin vehicle := IsInUnit ( unit ) ;
14522: LD_ADDR_VAR 0 8
14526: PUSH
14527: LD_VAR 0 1
14531: PPUSH
14532: CALL_OW 310
14536: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14537: LD_VAR 0 8
14541: IFFALSE 14558
14543: PUSH
14544: LD_VAR 0 8
14548: PPUSH
14549: CALL_OW 261
14553: PUSH
14554: LD_INT 0
14556: EQUAL
14557: AND
14558: IFFALSE 14610
// begin ComExitVehicle ( unit ) ;
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14569: LD_VAR 0 1
14573: PPUSH
14574: LD_VAR 0 2
14578: PUSH
14579: LD_VAR 0 6
14583: ARRAY
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PPUSH
14589: LD_VAR 0 2
14593: PUSH
14594: LD_VAR 0 6
14598: ARRAY
14599: PUSH
14600: LD_INT 2
14602: ARRAY
14603: PPUSH
14604: CALL_OW 171
// exit ;
14608: GO 15187
// end ; end else
14610: GO 14687
// begin if GetFuel ( unit ) = 0 then
14612: LD_VAR 0 1
14616: PPUSH
14617: CALL_OW 261
14621: PUSH
14622: LD_INT 0
14624: EQUAL
14625: IFFALSE 14687
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14627: LD_VAR 0 1
14631: PPUSH
14632: CALL_OW 311
14636: PPUSH
14637: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 311
14650: PPUSH
14651: LD_VAR 0 2
14655: PUSH
14656: LD_VAR 0 6
14660: ARRAY
14661: PUSH
14662: LD_INT 1
14664: ARRAY
14665: PPUSH
14666: LD_VAR 0 2
14670: PUSH
14671: LD_VAR 0 6
14675: ARRAY
14676: PUSH
14677: LD_INT 2
14679: ARRAY
14680: PPUSH
14681: CALL_OW 171
// exit ;
14685: GO 15187
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14687: LD_VAR 0 7
14691: PUSH
14692: LD_INT 2
14694: EQUAL
14695: IFFALSE 14712
14697: PUSH
14698: LD_VAR 0 1
14702: PPUSH
14703: CALL_OW 264
14707: PUSH
14708: LD_INT 51
14710: EQUAL
14711: AND
14712: IFFALSE 14728
14714: PUSH
14715: LD_VAR 0 1
14719: PPUSH
14720: LD_INT 29
14722: PPUSH
14723: CALL_OW 308
14727: AND
14728: IFFALSE 14760
14730: PUSH
14731: LD_VAR 0 1
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: CALL_OW 289
14743: IFTRUE 14759
14745: PUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: LD_INT 2
14753: PPUSH
14754: CALL_OW 289
14758: OR
14759: AND
14760: IFFALSE 14808
// begin goToUnload := Join ( goToUnload , unit ) ;
14762: LD_ADDR_EXP 8
14766: PUSH
14767: LD_EXP 8
14771: PPUSH
14772: LD_VAR 0 1
14776: PPUSH
14777: CALL 53760 0 2
14781: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14782: LD_VAR 0 1
14786: PPUSH
14787: LD_INT 113
14789: PPUSH
14790: LD_INT 117
14792: PPUSH
14793: CALL_OW 111
// AddComUnload ( unit ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 219
// exit ;
14806: GO 15187
// end ; if unit in goToUnload then
14808: LD_VAR 0 1
14812: PUSH
14813: LD_EXP 8
14817: IN
14818: IFFALSE 14896
// begin if GetCargo ( unit , mat_cans ) = 0 and GetCargo ( unit , mat_oil ) = 0 then
14820: LD_VAR 0 1
14824: PPUSH
14825: LD_INT 1
14827: PPUSH
14828: CALL_OW 289
14832: PUSH
14833: LD_INT 0
14835: EQUAL
14836: IFFALSE 14856
14838: PUSH
14839: LD_VAR 0 1
14843: PPUSH
14844: LD_INT 2
14846: PPUSH
14847: CALL_OW 289
14851: PUSH
14852: LD_INT 0
14854: EQUAL
14855: AND
14856: IFFALSE 14894
// begin SetTag ( unit , tag + 2 ) ;
14858: LD_VAR 0 1
14862: PPUSH
14863: LD_VAR 0 6
14867: PUSH
14868: LD_INT 2
14870: PLUS
14871: PPUSH
14872: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14876: LD_ADDR_EXP 8
14880: PUSH
14881: LD_EXP 8
14885: PUSH
14886: LD_VAR 0 1
14890: DIFF
14891: ST_TO_ADDR
// end else
14892: GO 14896
// exit ;
14894: GO 15187
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14896: LD_VAR 0 7
14900: PUSH
14901: LD_INT 2
14903: EQUAL
14904: IFFALSE 14916
14906: PUSH
14907: LD_VAR 0 5
14911: PUSH
14912: LD_INT 3
14914: GREATER
14915: AND
14916: IFFALSE 14936
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 264
14928: PUSH
14929: LD_VAR 0 9
14933: IN
14934: NOT
14935: AND
14936: IFFALSE 14975
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14938: LD_VAR 0 1
14942: PPUSH
14943: LD_VAR 0 5
14947: PUSH
14948: LD_INT 1
14950: ARRAY
14951: PUSH
14952: LD_INT 1
14954: ARRAY
14955: PPUSH
14956: LD_VAR 0 5
14960: PUSH
14961: LD_INT 1
14963: ARRAY
14964: PUSH
14965: LD_INT 2
14967: ARRAY
14968: PPUSH
14969: CALL_OW 116
14973: GO 15187
// if path > tag then
14975: LD_VAR 0 2
14979: PUSH
14980: LD_VAR 0 6
14984: GREATER
14985: IFFALSE 15156
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14987: LD_VAR 0 1
14991: PPUSH
14992: LD_VAR 0 2
14996: PUSH
14997: LD_VAR 0 6
15001: ARRAY
15002: PUSH
15003: LD_INT 1
15005: ARRAY
15006: PPUSH
15007: LD_VAR 0 2
15011: PUSH
15012: LD_VAR 0 6
15016: ARRAY
15017: PUSH
15018: LD_INT 2
15020: ARRAY
15021: PPUSH
15022: CALL_OW 297
15026: PUSH
15027: LD_INT 6
15029: GREATER
15030: IFFALSE 15140
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
15032: LD_VAR 0 1
15036: PPUSH
15037: CALL_OW 257
15041: PUSH
15042: LD_INT 2
15044: PUSH
15045: LD_INT 3
15047: PUSH
15048: LD_INT 4
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: LIST
15055: IN
15056: IFFALSE 15099
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
15058: LD_VAR 0 1
15062: PPUSH
15063: LD_VAR 0 2
15067: PUSH
15068: LD_VAR 0 6
15072: ARRAY
15073: PUSH
15074: LD_INT 1
15076: ARRAY
15077: PPUSH
15078: LD_VAR 0 2
15082: PUSH
15083: LD_VAR 0 6
15087: ARRAY
15088: PUSH
15089: LD_INT 2
15091: ARRAY
15092: PPUSH
15093: CALL_OW 111
15097: GO 15138
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
15099: LD_VAR 0 1
15103: PPUSH
15104: LD_VAR 0 2
15108: PUSH
15109: LD_VAR 0 6
15113: ARRAY
15114: PUSH
15115: LD_INT 1
15117: ARRAY
15118: PPUSH
15119: LD_VAR 0 2
15123: PUSH
15124: LD_VAR 0 6
15128: ARRAY
15129: PUSH
15130: LD_INT 2
15132: ARRAY
15133: PPUSH
15134: CALL_OW 114
15138: GO 15154
// SetTag ( unit , tag ) ;
15140: LD_VAR 0 1
15144: PPUSH
15145: LD_VAR 0 6
15149: PPUSH
15150: CALL_OW 109
// end else
15154: GO 15187
// if not IsInArea ( unit , area ) then
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_VAR 0 3
15165: PPUSH
15166: CALL_OW 308
15170: NOT
15171: IFFALSE 15187
// ComMoveToArea ( unit , area ) ;
15173: LD_VAR 0 1
15177: PPUSH
15178: LD_VAR 0 3
15182: PPUSH
15183: CALL_OW 113
// end ; end ; end_of_file
15187: LD_VAR 0 4
15191: RET
// every 0 0$20 trigger game do
15192: LD_EXP 2
15196: IFFALSE 15237
15198: GO 15200
15200: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15201: LD_INT 11
15203: PUSH
15204: LD_INT 12
15206: PUSH
15207: LD_INT 13
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: LIST
15214: PPUSH
15215: LD_EXP 29
15219: PUSH
15220: LD_INT 2
15222: ARRAY
15223: PPUSH
15224: LD_EXP 29
15228: PUSH
15229: LD_INT 1
15231: ARRAY
15232: PPUSH
15233: CALL 15238 0 3
15237: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
15238: LD_INT 0
15240: PPUSH
15241: PPUSH
15242: PPUSH
// if not areas then
15243: LD_VAR 0 1
15247: NOT
15248: IFFALSE 15252
// exit ;
15250: GO 15460
// x := 5 ;
15252: LD_ADDR_VAR 0 6
15256: PUSH
15257: LD_INT 5
15259: ST_TO_ADDR
// repeat wait ( time ) ;
15260: LD_VAR 0 2
15264: PPUSH
15265: CALL_OW 67
// for i in areas do
15269: LD_ADDR_VAR 0 5
15273: PUSH
15274: LD_VAR 0 1
15278: PUSH
15279: FOR_IN
15280: IFFALSE 15369
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
15282: LD_VAR 0 5
15286: PPUSH
15287: LD_INT 1
15289: PPUSH
15290: CALL_OW 287
15294: PUSH
15295: LD_INT 15
15297: PUSH
15298: LD_INT 12
15300: PUSH
15301: LD_INT 10
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: PUSH
15309: LD_OWVAR 67
15313: ARRAY
15314: LESS
15315: IFFALSE 15367
// begin wait ( 0 0$10 * Difficulty ) ;
15317: LD_INT 350
15319: PUSH
15320: LD_OWVAR 67
15324: MUL
15325: PPUSH
15326: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15330: LD_VAR 0 6
15334: PPUSH
15335: LD_VAR 0 5
15339: PPUSH
15340: LD_INT 1
15342: PPUSH
15343: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15347: LD_ADDR_VAR 0 3
15351: PUSH
15352: LD_VAR 0 3
15356: PUSH
15357: LD_VAR 0 6
15361: PUSH
15362: LD_INT 10
15364: MUL
15365: MINUS
15366: ST_TO_ADDR
// end ; end ;
15367: GO 15279
15369: POP
15370: POP
// time := time + ( 0 0$5 * Difficulty ) ;
15371: LD_ADDR_VAR 0 2
15375: PUSH
15376: LD_VAR 0 2
15380: PUSH
15381: LD_INT 175
15383: PUSH
15384: LD_OWVAR 67
15388: MUL
15389: PLUS
15390: ST_TO_ADDR
// x := x - 1 ;
15391: LD_ADDR_VAR 0 6
15395: PUSH
15396: LD_VAR 0 6
15400: PUSH
15401: LD_INT 1
15403: MINUS
15404: ST_TO_ADDR
// if x = 0 then
15405: LD_VAR 0 6
15409: PUSH
15410: LD_INT 0
15412: EQUAL
15413: IFFALSE 15423
// x := 5 ;
15415: LD_ADDR_VAR 0 6
15419: PUSH
15420: LD_INT 5
15422: ST_TO_ADDR
// if time > 2 2$00 then
15423: LD_VAR 0 2
15427: PUSH
15428: LD_INT 4200
15430: GREATER
15431: IFFALSE 15441
// time := 0 0$40 ;
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: LD_INT 1400
15440: ST_TO_ADDR
// until not game or amount <= 0 ;
15441: LD_EXP 2
15445: NOT
15446: IFTRUE 15458
15448: PUSH
15449: LD_VAR 0 3
15453: PUSH
15454: LD_INT 0
15456: LESSEQUAL
15457: OR
15458: IFFALSE 15260
// end ; end_of_file
15460: LD_VAR 0 4
15464: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15465: LD_VAR 0 1
15469: PUSH
15470: LD_INT 200
15472: DOUBLE
15473: GREATEREQUAL
15474: IFFALSE 15482
15476: LD_INT 299
15478: DOUBLE
15479: LESSEQUAL
15480: IFTRUE 15484
15482: GO 15516
15484: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_VAR 0 2
15494: PPUSH
15495: LD_VAR 0 3
15499: PPUSH
15500: LD_VAR 0 4
15504: PPUSH
15505: LD_VAR 0 5
15509: PPUSH
15510: CALL 59783 0 5
15514: GO 15593
15516: LD_INT 300
15518: DOUBLE
15519: GREATEREQUAL
15520: IFFALSE 15528
15522: LD_INT 399
15524: DOUBLE
15525: LESSEQUAL
15526: IFTRUE 15530
15528: GO 15592
15530: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15531: LD_VAR 0 1
15535: PPUSH
15536: LD_VAR 0 2
15540: PPUSH
15541: LD_VAR 0 3
15545: PPUSH
15546: LD_VAR 0 4
15550: PPUSH
15551: LD_VAR 0 5
15555: PPUSH
15556: LD_VAR 0 6
15560: PPUSH
15561: LD_VAR 0 7
15565: PPUSH
15566: LD_VAR 0 8
15570: PPUSH
15571: LD_VAR 0 9
15575: PPUSH
15576: LD_VAR 0 10
15580: PPUSH
15581: LD_VAR 0 11
15585: PPUSH
15586: CALL 65188 0 11
15590: GO 15593
15592: POP
// end ;
15593: PPOPN 11
15595: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15596: LD_VAR 0 1
15600: PPUSH
15601: LD_VAR 0 2
15605: PPUSH
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_VAR 0 4
15615: PPUSH
15616: LD_VAR 0 5
15620: PPUSH
15621: CALL 59164 0 5
// end ; end_of_file
15625: PPOPN 5
15627: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15628: LD_INT 0
15630: PPUSH
15631: PPUSH
// if exist_mode then
15632: LD_VAR 0 2
15636: IFFALSE 15682
// begin unit := CreateCharacter ( prefix & ident ) ;
15638: LD_ADDR_VAR 0 5
15642: PUSH
15643: LD_VAR 0 3
15647: PUSH
15648: LD_VAR 0 1
15652: STR
15653: PPUSH
15654: CALL_OW 34
15658: ST_TO_ADDR
// if unit then
15659: LD_VAR 0 5
15663: IFFALSE 15680
// DeleteCharacters ( prefix & ident ) ;
15665: LD_VAR 0 3
15669: PUSH
15670: LD_VAR 0 1
15674: STR
15675: PPUSH
15676: CALL_OW 40
// end else
15680: GO 15697
// unit := NewCharacter ( ident ) ;
15682: LD_ADDR_VAR 0 5
15686: PUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 25
15696: ST_TO_ADDR
// result := unit ;
15697: LD_ADDR_VAR 0 4
15701: PUSH
15702: LD_VAR 0 5
15706: ST_TO_ADDR
// end ;
15707: LD_VAR 0 4
15711: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15712: LD_INT 0
15714: PPUSH
15715: PPUSH
// if exist_mode then
15716: LD_VAR 0 2
15720: IFFALSE 15745
// unit := CreateCharacter ( prefix & ident ) else
15722: LD_ADDR_VAR 0 5
15726: PUSH
15727: LD_VAR 0 3
15731: PUSH
15732: LD_VAR 0 1
15736: STR
15737: PPUSH
15738: CALL_OW 34
15742: ST_TO_ADDR
15743: GO 15760
// unit := NewCharacter ( ident ) ;
15745: LD_ADDR_VAR 0 5
15749: PUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 25
15759: ST_TO_ADDR
// result := unit ;
15760: LD_ADDR_VAR 0 4
15764: PUSH
15765: LD_VAR 0 5
15769: ST_TO_ADDR
// end ;
15770: LD_VAR 0 4
15774: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15775: LD_INT 0
15777: PPUSH
15778: PPUSH
// if not side or not nation then
15779: LD_VAR 0 1
15783: NOT
15784: IFTRUE 15793
15786: PUSH
15787: LD_VAR 0 2
15791: NOT
15792: OR
15793: IFFALSE 15797
// exit ;
15795: GO 16567
// case nation of nation_american :
15797: LD_VAR 0 2
15801: PUSH
15802: LD_INT 1
15804: DOUBLE
15805: EQUAL
15806: IFTRUE 15810
15808: GO 16024
15810: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15811: LD_ADDR_VAR 0 4
15815: PUSH
15816: LD_INT 35
15818: PUSH
15819: LD_INT 45
15821: PUSH
15822: LD_INT 46
15824: PUSH
15825: LD_INT 47
15827: PUSH
15828: LD_INT 82
15830: PUSH
15831: LD_INT 83
15833: PUSH
15834: LD_INT 84
15836: PUSH
15837: LD_INT 85
15839: PUSH
15840: LD_INT 86
15842: PUSH
15843: LD_INT 1
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: LD_INT 6
15851: PUSH
15852: LD_INT 15
15854: PUSH
15855: LD_INT 16
15857: PUSH
15858: LD_INT 7
15860: PUSH
15861: LD_INT 12
15863: PUSH
15864: LD_INT 13
15866: PUSH
15867: LD_INT 10
15869: PUSH
15870: LD_INT 14
15872: PUSH
15873: LD_INT 20
15875: PUSH
15876: LD_INT 21
15878: PUSH
15879: LD_INT 22
15881: PUSH
15882: LD_INT 25
15884: PUSH
15885: LD_INT 32
15887: PUSH
15888: LD_INT 27
15890: PUSH
15891: LD_INT 36
15893: PUSH
15894: LD_INT 69
15896: PUSH
15897: LD_INT 39
15899: PUSH
15900: LD_INT 34
15902: PUSH
15903: LD_INT 40
15905: PUSH
15906: LD_INT 48
15908: PUSH
15909: LD_INT 49
15911: PUSH
15912: LD_INT 50
15914: PUSH
15915: LD_INT 51
15917: PUSH
15918: LD_INT 52
15920: PUSH
15921: LD_INT 53
15923: PUSH
15924: LD_INT 54
15926: PUSH
15927: LD_INT 55
15929: PUSH
15930: LD_INT 56
15932: PUSH
15933: LD_INT 57
15935: PUSH
15936: LD_INT 58
15938: PUSH
15939: LD_INT 59
15941: PUSH
15942: LD_INT 60
15944: PUSH
15945: LD_INT 61
15947: PUSH
15948: LD_INT 62
15950: PUSH
15951: LD_INT 80
15953: PUSH
15954: LD_INT 82
15956: PUSH
15957: LD_INT 83
15959: PUSH
15960: LD_INT 84
15962: PUSH
15963: LD_INT 85
15965: PUSH
15966: LD_INT 86
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: ST_TO_ADDR
16022: GO 16489
16024: LD_INT 2
16026: DOUBLE
16027: EQUAL
16028: IFTRUE 16032
16030: GO 16258
16032: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16033: LD_ADDR_VAR 0 4
16037: PUSH
16038: LD_INT 35
16040: PUSH
16041: LD_INT 45
16043: PUSH
16044: LD_INT 46
16046: PUSH
16047: LD_INT 47
16049: PUSH
16050: LD_INT 82
16052: PUSH
16053: LD_INT 83
16055: PUSH
16056: LD_INT 84
16058: PUSH
16059: LD_INT 85
16061: PUSH
16062: LD_INT 87
16064: PUSH
16065: LD_INT 70
16067: PUSH
16068: LD_INT 1
16070: PUSH
16071: LD_INT 11
16073: PUSH
16074: LD_INT 3
16076: PUSH
16077: LD_INT 4
16079: PUSH
16080: LD_INT 5
16082: PUSH
16083: LD_INT 6
16085: PUSH
16086: LD_INT 15
16088: PUSH
16089: LD_INT 18
16091: PUSH
16092: LD_INT 7
16094: PUSH
16095: LD_INT 17
16097: PUSH
16098: LD_INT 8
16100: PUSH
16101: LD_INT 20
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 22
16109: PUSH
16110: LD_INT 72
16112: PUSH
16113: LD_INT 26
16115: PUSH
16116: LD_INT 69
16118: PUSH
16119: LD_INT 39
16121: PUSH
16122: LD_INT 40
16124: PUSH
16125: LD_INT 41
16127: PUSH
16128: LD_INT 42
16130: PUSH
16131: LD_INT 43
16133: PUSH
16134: LD_INT 48
16136: PUSH
16137: LD_INT 49
16139: PUSH
16140: LD_INT 50
16142: PUSH
16143: LD_INT 51
16145: PUSH
16146: LD_INT 52
16148: PUSH
16149: LD_INT 53
16151: PUSH
16152: LD_INT 54
16154: PUSH
16155: LD_INT 55
16157: PUSH
16158: LD_INT 56
16160: PUSH
16161: LD_INT 60
16163: PUSH
16164: LD_INT 61
16166: PUSH
16167: LD_INT 62
16169: PUSH
16170: LD_INT 66
16172: PUSH
16173: LD_INT 67
16175: PUSH
16176: LD_INT 68
16178: PUSH
16179: LD_INT 81
16181: PUSH
16182: LD_INT 82
16184: PUSH
16185: LD_INT 83
16187: PUSH
16188: LD_INT 84
16190: PUSH
16191: LD_INT 85
16193: PUSH
16194: LD_INT 87
16196: PUSH
16197: LD_INT 88
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: LIST
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: ST_TO_ADDR
16256: GO 16489
16258: LD_INT 3
16260: DOUBLE
16261: EQUAL
16262: IFTRUE 16266
16264: GO 16488
16266: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16267: LD_ADDR_VAR 0 4
16271: PUSH
16272: LD_INT 46
16274: PUSH
16275: LD_INT 47
16277: PUSH
16278: LD_INT 1
16280: PUSH
16281: LD_INT 2
16283: PUSH
16284: LD_INT 82
16286: PUSH
16287: LD_INT 83
16289: PUSH
16290: LD_INT 84
16292: PUSH
16293: LD_INT 85
16295: PUSH
16296: LD_INT 86
16298: PUSH
16299: LD_INT 11
16301: PUSH
16302: LD_INT 9
16304: PUSH
16305: LD_INT 20
16307: PUSH
16308: LD_INT 19
16310: PUSH
16311: LD_INT 21
16313: PUSH
16314: LD_INT 24
16316: PUSH
16317: LD_INT 22
16319: PUSH
16320: LD_INT 25
16322: PUSH
16323: LD_INT 28
16325: PUSH
16326: LD_INT 29
16328: PUSH
16329: LD_INT 30
16331: PUSH
16332: LD_INT 31
16334: PUSH
16335: LD_INT 37
16337: PUSH
16338: LD_INT 38
16340: PUSH
16341: LD_INT 32
16343: PUSH
16344: LD_INT 27
16346: PUSH
16347: LD_INT 33
16349: PUSH
16350: LD_INT 69
16352: PUSH
16353: LD_INT 39
16355: PUSH
16356: LD_INT 34
16358: PUSH
16359: LD_INT 40
16361: PUSH
16362: LD_INT 71
16364: PUSH
16365: LD_INT 23
16367: PUSH
16368: LD_INT 44
16370: PUSH
16371: LD_INT 48
16373: PUSH
16374: LD_INT 49
16376: PUSH
16377: LD_INT 50
16379: PUSH
16380: LD_INT 51
16382: PUSH
16383: LD_INT 52
16385: PUSH
16386: LD_INT 53
16388: PUSH
16389: LD_INT 54
16391: PUSH
16392: LD_INT 55
16394: PUSH
16395: LD_INT 56
16397: PUSH
16398: LD_INT 57
16400: PUSH
16401: LD_INT 58
16403: PUSH
16404: LD_INT 59
16406: PUSH
16407: LD_INT 63
16409: PUSH
16410: LD_INT 64
16412: PUSH
16413: LD_INT 65
16415: PUSH
16416: LD_INT 82
16418: PUSH
16419: LD_INT 83
16421: PUSH
16422: LD_INT 84
16424: PUSH
16425: LD_INT 85
16427: PUSH
16428: LD_INT 86
16430: PUSH
16431: EMPTY
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: ST_TO_ADDR
16486: GO 16489
16488: POP
// if state > - 1 and state < 3 then
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 1
16496: NEG
16497: GREATER
16498: IFFALSE 16510
16500: PUSH
16501: LD_VAR 0 3
16505: PUSH
16506: LD_INT 3
16508: LESS
16509: AND
16510: IFFALSE 16567
// for i in result do
16512: LD_ADDR_VAR 0 5
16516: PUSH
16517: LD_VAR 0 4
16521: PUSH
16522: FOR_IN
16523: IFFALSE 16565
// if GetTech ( i , side ) <> state then
16525: LD_VAR 0 5
16529: PPUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 321
16539: PUSH
16540: LD_VAR 0 3
16544: NONEQUAL
16545: IFFALSE 16563
// result := result diff i ;
16547: LD_ADDR_VAR 0 4
16551: PUSH
16552: LD_VAR 0 4
16556: PUSH
16557: LD_VAR 0 5
16561: DIFF
16562: ST_TO_ADDR
16563: GO 16522
16565: POP
16566: POP
// end ;
16567: LD_VAR 0 4
16571: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
16576: PPUSH
// result := true ;
16577: LD_ADDR_VAR 0 3
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16585: LD_ADDR_VAR 0 5
16589: PUSH
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL_OW 480
16599: ST_TO_ADDR
// if not tmp then
16600: LD_VAR 0 5
16604: NOT
16605: IFFALSE 16609
// exit ;
16607: GO 16658
// for i in tmp do
16609: LD_ADDR_VAR 0 4
16613: PUSH
16614: LD_VAR 0 5
16618: PUSH
16619: FOR_IN
16620: IFFALSE 16656
// if GetTech ( i , side ) <> state_researched then
16622: LD_VAR 0 4
16626: PPUSH
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 321
16636: PUSH
16637: LD_INT 2
16639: NONEQUAL
16640: IFFALSE 16654
// begin result := false ;
16642: LD_ADDR_VAR 0 3
16646: PUSH
16647: LD_INT 0
16649: ST_TO_ADDR
// exit ;
16650: POP
16651: POP
16652: GO 16658
// end ;
16654: GO 16619
16656: POP
16657: POP
// end ;
16658: LD_VAR 0 3
16662: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16663: LD_INT 0
16665: PPUSH
16666: PPUSH
16667: PPUSH
16668: PPUSH
16669: PPUSH
16670: PPUSH
16671: PPUSH
16672: PPUSH
16673: PPUSH
16674: PPUSH
16675: PPUSH
16676: PPUSH
16677: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16678: LD_VAR 0 1
16682: NOT
16683: IFTRUE 16700
16685: PUSH
16686: LD_VAR 0 1
16690: PPUSH
16691: CALL_OW 257
16695: PUSH
16696: LD_INT 9
16698: NONEQUAL
16699: OR
16700: IFFALSE 16704
// exit ;
16702: GO 17283
// side := GetSide ( unit ) ;
16704: LD_ADDR_VAR 0 9
16708: PUSH
16709: LD_VAR 0 1
16713: PPUSH
16714: CALL_OW 255
16718: ST_TO_ADDR
// tech_space := tech_spacanom ;
16719: LD_ADDR_VAR 0 12
16723: PUSH
16724: LD_INT 29
16726: ST_TO_ADDR
// tech_time := tech_taurad ;
16727: LD_ADDR_VAR 0 13
16731: PUSH
16732: LD_INT 28
16734: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16735: LD_ADDR_VAR 0 11
16739: PUSH
16740: LD_VAR 0 1
16744: PPUSH
16745: CALL_OW 310
16749: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16750: LD_VAR 0 11
16754: PPUSH
16755: CALL_OW 247
16759: PUSH
16760: LD_INT 2
16762: EQUAL
16763: IFFALSE 16767
// exit ;
16765: GO 17283
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16767: LD_ADDR_VAR 0 8
16771: PUSH
16772: LD_INT 81
16774: PUSH
16775: LD_VAR 0 9
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: LD_INT 21
16789: PUSH
16790: LD_INT 3
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PPUSH
16805: CALL_OW 69
16809: ST_TO_ADDR
// if not tmp then
16810: LD_VAR 0 8
16814: NOT
16815: IFFALSE 16819
// exit ;
16817: GO 17283
// if in_unit then
16819: LD_VAR 0 11
16823: IFFALSE 16847
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16825: LD_ADDR_VAR 0 10
16829: PUSH
16830: LD_VAR 0 8
16834: PPUSH
16835: LD_VAR 0 11
16839: PPUSH
16840: CALL_OW 74
16844: ST_TO_ADDR
16845: GO 16867
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16847: LD_ADDR_VAR 0 10
16851: PUSH
16852: LD_VAR 0 8
16856: PPUSH
16857: LD_VAR 0 1
16861: PPUSH
16862: CALL_OW 74
16866: ST_TO_ADDR
// if not enemy then
16867: LD_VAR 0 10
16871: NOT
16872: IFFALSE 16876
// exit ;
16874: GO 17283
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16876: LD_VAR 0 11
16880: IFFALSE 16902
16882: PUSH
16883: LD_VAR 0 11
16887: PPUSH
16888: LD_VAR 0 10
16892: PPUSH
16893: CALL_OW 296
16897: PUSH
16898: LD_INT 13
16900: GREATER
16901: AND
16902: IFTRUE 16924
16904: PUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: LD_VAR 0 10
16914: PPUSH
16915: CALL_OW 296
16919: PUSH
16920: LD_INT 12
16922: GREATER
16923: OR
16924: IFFALSE 16928
// exit ;
16926: GO 17283
// missile := [ 1 ] ;
16928: LD_ADDR_VAR 0 14
16932: PUSH
16933: LD_INT 1
16935: PUSH
16936: EMPTY
16937: LIST
16938: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16939: LD_VAR 0 9
16943: PPUSH
16944: LD_VAR 0 12
16948: PPUSH
16949: CALL_OW 325
16953: IFFALSE 16982
// missile := Replace ( missile , missile + 1 , 2 ) ;
16955: LD_ADDR_VAR 0 14
16959: PUSH
16960: LD_VAR 0 14
16964: PPUSH
16965: LD_VAR 0 14
16969: PUSH
16970: LD_INT 1
16972: PLUS
16973: PPUSH
16974: LD_INT 2
16976: PPUSH
16977: CALL_OW 1
16981: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16982: LD_VAR 0 9
16986: PPUSH
16987: LD_VAR 0 13
16991: PPUSH
16992: CALL_OW 325
16996: IFFALSE 17020
16998: PUSH
16999: LD_VAR 0 10
17003: PPUSH
17004: CALL_OW 255
17008: PPUSH
17009: LD_VAR 0 13
17013: PPUSH
17014: CALL_OW 325
17018: NOT
17019: AND
17020: IFFALSE 17049
// missile := Replace ( missile , missile + 1 , 3 ) ;
17022: LD_ADDR_VAR 0 14
17026: PUSH
17027: LD_VAR 0 14
17031: PPUSH
17032: LD_VAR 0 14
17036: PUSH
17037: LD_INT 1
17039: PLUS
17040: PPUSH
17041: LD_INT 3
17043: PPUSH
17044: CALL_OW 1
17048: ST_TO_ADDR
// if missile < 2 then
17049: LD_VAR 0 14
17053: PUSH
17054: LD_INT 2
17056: LESS
17057: IFFALSE 17061
// exit ;
17059: GO 17283
// x := GetX ( enemy ) ;
17061: LD_ADDR_VAR 0 4
17065: PUSH
17066: LD_VAR 0 10
17070: PPUSH
17071: CALL_OW 250
17075: ST_TO_ADDR
// y := GetY ( enemy ) ;
17076: LD_ADDR_VAR 0 5
17080: PUSH
17081: LD_VAR 0 10
17085: PPUSH
17086: CALL_OW 251
17090: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17091: LD_ADDR_VAR 0 6
17095: PUSH
17096: LD_VAR 0 4
17100: PUSH
17101: LD_INT 1
17103: NEG
17104: PPUSH
17105: LD_INT 1
17107: PPUSH
17108: CALL_OW 12
17112: PLUS
17113: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17114: LD_ADDR_VAR 0 7
17118: PUSH
17119: LD_VAR 0 5
17123: PUSH
17124: LD_INT 1
17126: NEG
17127: PPUSH
17128: LD_INT 1
17130: PPUSH
17131: CALL_OW 12
17135: PLUS
17136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17137: LD_VAR 0 6
17141: PPUSH
17142: LD_VAR 0 7
17146: PPUSH
17147: CALL_OW 488
17151: NOT
17152: IFFALSE 17174
// begin _x := x ;
17154: LD_ADDR_VAR 0 6
17158: PUSH
17159: LD_VAR 0 4
17163: ST_TO_ADDR
// _y := y ;
17164: LD_ADDR_VAR 0 7
17168: PUSH
17169: LD_VAR 0 5
17173: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17174: LD_ADDR_VAR 0 3
17178: PUSH
17179: LD_INT 1
17181: PPUSH
17182: LD_VAR 0 14
17186: PPUSH
17187: CALL_OW 12
17191: ST_TO_ADDR
// case i of 1 :
17192: LD_VAR 0 3
17196: PUSH
17197: LD_INT 1
17199: DOUBLE
17200: EQUAL
17201: IFTRUE 17205
17203: GO 17222
17205: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17206: LD_VAR 0 1
17210: PPUSH
17211: LD_VAR 0 10
17215: PPUSH
17216: CALL_OW 115
17220: GO 17283
17222: LD_INT 2
17224: DOUBLE
17225: EQUAL
17226: IFTRUE 17230
17228: GO 17252
17230: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17231: LD_VAR 0 1
17235: PPUSH
17236: LD_VAR 0 6
17240: PPUSH
17241: LD_VAR 0 7
17245: PPUSH
17246: CALL_OW 153
17250: GO 17283
17252: LD_INT 3
17254: DOUBLE
17255: EQUAL
17256: IFTRUE 17260
17258: GO 17282
17260: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17261: LD_VAR 0 1
17265: PPUSH
17266: LD_VAR 0 6
17270: PPUSH
17271: LD_VAR 0 7
17275: PPUSH
17276: CALL_OW 154
17280: GO 17283
17282: POP
// end ;
17283: LD_VAR 0 2
17287: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17288: LD_INT 0
17290: PPUSH
17291: PPUSH
17292: PPUSH
17293: PPUSH
17294: PPUSH
17295: PPUSH
// if not unit or not building then
17296: LD_VAR 0 1
17300: NOT
17301: IFTRUE 17310
17303: PUSH
17304: LD_VAR 0 2
17308: NOT
17309: OR
17310: IFFALSE 17314
// exit ;
17312: GO 17472
// x := GetX ( building ) ;
17314: LD_ADDR_VAR 0 5
17318: PUSH
17319: LD_VAR 0 2
17323: PPUSH
17324: CALL_OW 250
17328: ST_TO_ADDR
// y := GetY ( building ) ;
17329: LD_ADDR_VAR 0 6
17333: PUSH
17334: LD_VAR 0 2
17338: PPUSH
17339: CALL_OW 251
17343: ST_TO_ADDR
// for i := 0 to 5 do
17344: LD_ADDR_VAR 0 4
17348: PUSH
17349: DOUBLE
17350: LD_INT 0
17352: DEC
17353: ST_TO_ADDR
17354: LD_INT 5
17356: PUSH
17357: FOR_TO
17358: IFFALSE 17470
// begin _x := ShiftX ( x , i , 3 ) ;
17360: LD_ADDR_VAR 0 7
17364: PUSH
17365: LD_VAR 0 5
17369: PPUSH
17370: LD_VAR 0 4
17374: PPUSH
17375: LD_INT 3
17377: PPUSH
17378: CALL_OW 272
17382: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17383: LD_ADDR_VAR 0 8
17387: PUSH
17388: LD_VAR 0 6
17392: PPUSH
17393: LD_VAR 0 4
17397: PPUSH
17398: LD_INT 3
17400: PPUSH
17401: CALL_OW 273
17405: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17406: LD_VAR 0 7
17410: PPUSH
17411: LD_VAR 0 8
17415: PPUSH
17416: CALL_OW 488
17420: NOT
17421: IFFALSE 17425
// continue ;
17423: GO 17357
// if HexInfo ( _x , _y ) = 0 then
17425: LD_VAR 0 7
17429: PPUSH
17430: LD_VAR 0 8
17434: PPUSH
17435: CALL_OW 428
17439: PUSH
17440: LD_INT 0
17442: EQUAL
17443: IFFALSE 17468
// begin ComMoveXY ( unit , _x , _y ) ;
17445: LD_VAR 0 1
17449: PPUSH
17450: LD_VAR 0 7
17454: PPUSH
17455: LD_VAR 0 8
17459: PPUSH
17460: CALL_OW 111
// exit ;
17464: POP
17465: POP
17466: GO 17472
// end ; end ;
17468: GO 17357
17470: POP
17471: POP
// end ;
17472: LD_VAR 0 3
17476: RET
// export function ScanBase ( side , base_area ) ; begin
17477: LD_INT 0
17479: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17480: LD_ADDR_VAR 0 3
17484: PUSH
17485: LD_VAR 0 2
17489: PPUSH
17490: LD_INT 81
17492: PUSH
17493: LD_VAR 0 1
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PPUSH
17502: CALL_OW 70
17506: ST_TO_ADDR
// end ;
17507: LD_VAR 0 3
17511: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17512: LD_INT 0
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
// result := false ;
17518: LD_ADDR_VAR 0 2
17522: PUSH
17523: LD_INT 0
17525: ST_TO_ADDR
// side := GetSide ( unit ) ;
17526: LD_ADDR_VAR 0 3
17530: PUSH
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 255
17540: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17541: LD_ADDR_VAR 0 4
17545: PUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 248
17555: ST_TO_ADDR
// case nat of 1 :
17556: LD_VAR 0 4
17560: PUSH
17561: LD_INT 1
17563: DOUBLE
17564: EQUAL
17565: IFTRUE 17569
17567: GO 17580
17569: POP
// tech := tech_lassight ; 2 :
17570: LD_ADDR_VAR 0 5
17574: PUSH
17575: LD_INT 12
17577: ST_TO_ADDR
17578: GO 17619
17580: LD_INT 2
17582: DOUBLE
17583: EQUAL
17584: IFTRUE 17588
17586: GO 17599
17588: POP
// tech := tech_mortar ; 3 :
17589: LD_ADDR_VAR 0 5
17593: PUSH
17594: LD_INT 41
17596: ST_TO_ADDR
17597: GO 17619
17599: LD_INT 3
17601: DOUBLE
17602: EQUAL
17603: IFTRUE 17607
17605: GO 17618
17607: POP
// tech := tech_bazooka ; end ;
17608: LD_ADDR_VAR 0 5
17612: PUSH
17613: LD_INT 44
17615: ST_TO_ADDR
17616: GO 17619
17618: POP
// if Researched ( side , tech ) then
17619: LD_VAR 0 3
17623: PPUSH
17624: LD_VAR 0 5
17628: PPUSH
17629: CALL_OW 325
17633: IFFALSE 17660
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17635: LD_ADDR_VAR 0 2
17639: PUSH
17640: LD_INT 5
17642: PUSH
17643: LD_INT 8
17645: PUSH
17646: LD_INT 9
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: LD_VAR 0 4
17658: ARRAY
17659: ST_TO_ADDR
// end ;
17660: LD_VAR 0 2
17664: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17665: LD_INT 0
17667: PPUSH
17668: PPUSH
17669: PPUSH
// if not mines then
17670: LD_VAR 0 2
17674: NOT
17675: IFFALSE 17679
// exit ;
17677: GO 17823
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17679: LD_ADDR_VAR 0 5
17683: PUSH
17684: LD_INT 81
17686: PUSH
17687: LD_VAR 0 1
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: LD_INT 21
17701: PUSH
17702: LD_INT 3
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: ST_TO_ADDR
// for i in mines do
17722: LD_ADDR_VAR 0 4
17726: PUSH
17727: LD_VAR 0 2
17731: PUSH
17732: FOR_IN
17733: IFFALSE 17821
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17735: LD_VAR 0 4
17739: PUSH
17740: LD_INT 1
17742: ARRAY
17743: PPUSH
17744: LD_VAR 0 4
17748: PUSH
17749: LD_INT 2
17751: ARRAY
17752: PPUSH
17753: CALL_OW 458
17757: NOT
17758: IFFALSE 17762
// continue ;
17760: GO 17732
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17762: LD_VAR 0 4
17766: PUSH
17767: LD_INT 1
17769: ARRAY
17770: PPUSH
17771: LD_VAR 0 4
17775: PUSH
17776: LD_INT 2
17778: ARRAY
17779: PPUSH
17780: CALL_OW 428
17784: PUSH
17785: LD_VAR 0 5
17789: IN
17790: IFFALSE 17819
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17792: LD_VAR 0 4
17796: PUSH
17797: LD_INT 1
17799: ARRAY
17800: PPUSH
17801: LD_VAR 0 4
17805: PUSH
17806: LD_INT 2
17808: ARRAY
17809: PPUSH
17810: LD_VAR 0 1
17814: PPUSH
17815: CALL_OW 456
// end ;
17819: GO 17732
17821: POP
17822: POP
// end ;
17823: LD_VAR 0 3
17827: RET
// export function Count ( array ) ; begin
17828: LD_INT 0
17830: PPUSH
// result := array + 0 ;
17831: LD_ADDR_VAR 0 2
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 0
17843: PLUS
17844: ST_TO_ADDR
// end ;
17845: LD_VAR 0 2
17849: RET
// export function IsEmpty ( building ) ; begin
17850: LD_INT 0
17852: PPUSH
// if not building then
17853: LD_VAR 0 1
17857: NOT
17858: IFFALSE 17862
// exit ;
17860: GO 17905
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_VAR 0 1
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 255
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_INT 58
17891: PUSH
17892: EMPTY
17893: LIST
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: PPUSH
17899: CALL_OW 69
17903: IN
17904: ST_TO_ADDR
// end ;
17905: LD_VAR 0 2
17909: RET
// export function IsNotFull ( building ) ; var places ; begin
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
// if not building then
17914: LD_VAR 0 1
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 17951
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17923: LD_ADDR_VAR 0 2
17927: PUSH
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_INT 3
17935: PUSH
17936: LD_INT 62
17938: PUSH
17939: EMPTY
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PPUSH
17946: CALL_OW 72
17950: ST_TO_ADDR
// end ;
17951: LD_VAR 0 2
17955: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17956: LD_INT 0
17958: PPUSH
17959: PPUSH
17960: PPUSH
17961: PPUSH
// tmp := [ ] ;
17962: LD_ADDR_VAR 0 3
17966: PUSH
17967: EMPTY
17968: ST_TO_ADDR
// list := [ ] ;
17969: LD_ADDR_VAR 0 5
17973: PUSH
17974: EMPTY
17975: ST_TO_ADDR
// for i = 16 to 25 do
17976: LD_ADDR_VAR 0 4
17980: PUSH
17981: DOUBLE
17982: LD_INT 16
17984: DEC
17985: ST_TO_ADDR
17986: LD_INT 25
17988: PUSH
17989: FOR_TO
17990: IFFALSE 18063
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17992: LD_ADDR_VAR 0 3
17996: PUSH
17997: LD_VAR 0 3
18001: PUSH
18002: LD_INT 22
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 255
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 91
18021: PUSH
18022: LD_VAR 0 1
18026: PUSH
18027: LD_INT 6
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 30
18037: PUSH
18038: LD_VAR 0 4
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: PPUSH
18055: CALL_OW 69
18059: ADD
18060: ST_TO_ADDR
18061: GO 17989
18063: POP
18064: POP
// for i = 1 to tmp do
18065: LD_ADDR_VAR 0 4
18069: PUSH
18070: DOUBLE
18071: LD_INT 1
18073: DEC
18074: ST_TO_ADDR
18075: LD_VAR 0 3
18079: PUSH
18080: FOR_TO
18081: IFFALSE 18169
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18083: LD_ADDR_VAR 0 5
18087: PUSH
18088: LD_VAR 0 5
18092: PUSH
18093: LD_VAR 0 3
18097: PUSH
18098: LD_VAR 0 4
18102: ARRAY
18103: PPUSH
18104: CALL_OW 266
18108: PUSH
18109: LD_VAR 0 3
18113: PUSH
18114: LD_VAR 0 4
18118: ARRAY
18119: PPUSH
18120: CALL_OW 250
18124: PUSH
18125: LD_VAR 0 3
18129: PUSH
18130: LD_VAR 0 4
18134: ARRAY
18135: PPUSH
18136: CALL_OW 251
18140: PUSH
18141: LD_VAR 0 3
18145: PUSH
18146: LD_VAR 0 4
18150: ARRAY
18151: PPUSH
18152: CALL_OW 254
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: ADD
18166: ST_TO_ADDR
18167: GO 18080
18169: POP
18170: POP
// result := list ;
18171: LD_ADDR_VAR 0 2
18175: PUSH
18176: LD_VAR 0 5
18180: ST_TO_ADDR
// end ;
18181: LD_VAR 0 2
18185: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18186: LD_INT 0
18188: PPUSH
18189: PPUSH
18190: PPUSH
18191: PPUSH
18192: PPUSH
18193: PPUSH
18194: PPUSH
// if not factory then
18195: LD_VAR 0 1
18199: NOT
18200: IFFALSE 18204
// exit ;
18202: GO 18807
// if control = control_apeman then
18204: LD_VAR 0 4
18208: PUSH
18209: LD_INT 5
18211: EQUAL
18212: IFFALSE 18321
// begin tmp := UnitsInside ( factory ) ;
18214: LD_ADDR_VAR 0 8
18218: PUSH
18219: LD_VAR 0 1
18223: PPUSH
18224: CALL_OW 313
18228: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18229: LD_VAR 0 8
18233: PPUSH
18234: LD_INT 25
18236: PUSH
18237: LD_INT 12
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 72
18248: NOT
18249: IFFALSE 18259
// control := control_manual ;
18251: LD_ADDR_VAR 0 4
18255: PUSH
18256: LD_INT 1
18258: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18259: LD_ADDR_VAR 0 8
18263: PUSH
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL 17956 0 1
18273: ST_TO_ADDR
// if tmp then
18274: LD_VAR 0 8
18278: IFFALSE 18321
// begin for i in tmp do
18280: LD_ADDR_VAR 0 7
18284: PUSH
18285: LD_VAR 0 8
18289: PUSH
18290: FOR_IN
18291: IFFALSE 18319
// if i [ 1 ] = b_ext_radio then
18293: LD_VAR 0 7
18297: PUSH
18298: LD_INT 1
18300: ARRAY
18301: PUSH
18302: LD_INT 22
18304: EQUAL
18305: IFFALSE 18317
// begin control := control_remote ;
18307: LD_ADDR_VAR 0 4
18311: PUSH
18312: LD_INT 2
18314: ST_TO_ADDR
// break ;
18315: GO 18319
// end ;
18317: GO 18290
18319: POP
18320: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18321: LD_VAR 0 1
18325: PPUSH
18326: LD_VAR 0 2
18330: PPUSH
18331: LD_VAR 0 3
18335: PPUSH
18336: LD_VAR 0 4
18340: PPUSH
18341: LD_VAR 0 5
18345: PPUSH
18346: CALL_OW 448
18350: IFFALSE 18385
// begin result := [ chassis , engine , control , weapon ] ;
18352: LD_ADDR_VAR 0 6
18356: PUSH
18357: LD_VAR 0 2
18361: PUSH
18362: LD_VAR 0 3
18366: PUSH
18367: LD_VAR 0 4
18371: PUSH
18372: LD_VAR 0 5
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: ST_TO_ADDR
// exit ;
18383: GO 18807
// end ; _chassis := AvailableChassisList ( factory ) ;
18385: LD_ADDR_VAR 0 9
18389: PUSH
18390: LD_VAR 0 1
18394: PPUSH
18395: CALL_OW 475
18399: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18400: LD_ADDR_VAR 0 11
18404: PUSH
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 476
18414: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18415: LD_ADDR_VAR 0 12
18419: PUSH
18420: LD_VAR 0 1
18424: PPUSH
18425: CALL_OW 477
18429: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18430: LD_ADDR_VAR 0 10
18434: PUSH
18435: LD_VAR 0 1
18439: PPUSH
18440: CALL_OW 478
18444: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18445: LD_VAR 0 9
18449: NOT
18450: IFTRUE 18459
18452: PUSH
18453: LD_VAR 0 11
18457: NOT
18458: OR
18459: IFTRUE 18468
18461: PUSH
18462: LD_VAR 0 12
18466: NOT
18467: OR
18468: IFTRUE 18477
18470: PUSH
18471: LD_VAR 0 10
18475: NOT
18476: OR
18477: IFFALSE 18512
// begin result := [ chassis , engine , control , weapon ] ;
18479: LD_ADDR_VAR 0 6
18483: PUSH
18484: LD_VAR 0 2
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: LD_VAR 0 4
18498: PUSH
18499: LD_VAR 0 5
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: ST_TO_ADDR
// exit ;
18510: GO 18807
// end ; if not chassis in _chassis then
18512: LD_VAR 0 2
18516: PUSH
18517: LD_VAR 0 9
18521: IN
18522: NOT
18523: IFFALSE 18549
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18525: LD_ADDR_VAR 0 2
18529: PUSH
18530: LD_VAR 0 9
18534: PUSH
18535: LD_INT 1
18537: PPUSH
18538: LD_VAR 0 9
18542: PPUSH
18543: CALL_OW 12
18547: ARRAY
18548: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18549: LD_VAR 0 2
18553: PPUSH
18554: LD_VAR 0 3
18558: PPUSH
18559: CALL 18812 0 2
18563: NOT
18564: IFFALSE 18625
// repeat engine := _engine [ 1 ] ;
18566: LD_ADDR_VAR 0 3
18570: PUSH
18571: LD_VAR 0 11
18575: PUSH
18576: LD_INT 1
18578: ARRAY
18579: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18580: LD_ADDR_VAR 0 11
18584: PUSH
18585: LD_VAR 0 11
18589: PPUSH
18590: LD_INT 1
18592: PPUSH
18593: CALL_OW 3
18597: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18598: LD_VAR 0 2
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: CALL 18812 0 2
18612: IFTRUE 18623
18614: PUSH
18615: LD_VAR 0 11
18619: PUSH
18620: EMPTY
18621: EQUAL
18622: OR
18623: IFFALSE 18566
// if not control in _control then
18625: LD_VAR 0 4
18629: PUSH
18630: LD_VAR 0 12
18634: IN
18635: NOT
18636: IFFALSE 18662
// control := _control [ rand ( 1 , _control ) ] ;
18638: LD_ADDR_VAR 0 4
18642: PUSH
18643: LD_VAR 0 12
18647: PUSH
18648: LD_INT 1
18650: PPUSH
18651: LD_VAR 0 12
18655: PPUSH
18656: CALL_OW 12
18660: ARRAY
18661: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18662: LD_VAR 0 2
18666: PPUSH
18667: LD_VAR 0 5
18671: PPUSH
18672: CALL 19034 0 2
18676: NOT
18677: IFFALSE 18738
// repeat weapon := _weapon [ 1 ] ;
18679: LD_ADDR_VAR 0 5
18683: PUSH
18684: LD_VAR 0 10
18688: PUSH
18689: LD_INT 1
18691: ARRAY
18692: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18693: LD_ADDR_VAR 0 10
18697: PUSH
18698: LD_VAR 0 10
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 3
18710: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18711: LD_VAR 0 2
18715: PPUSH
18716: LD_VAR 0 5
18720: PPUSH
18721: CALL 19034 0 2
18725: IFTRUE 18736
18727: PUSH
18728: LD_VAR 0 10
18732: PUSH
18733: EMPTY
18734: EQUAL
18735: OR
18736: IFFALSE 18679
// result := [ ] ;
18738: LD_ADDR_VAR 0 6
18742: PUSH
18743: EMPTY
18744: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18745: LD_VAR 0 1
18749: PPUSH
18750: LD_VAR 0 2
18754: PPUSH
18755: LD_VAR 0 3
18759: PPUSH
18760: LD_VAR 0 4
18764: PPUSH
18765: LD_VAR 0 5
18769: PPUSH
18770: CALL_OW 448
18774: IFFALSE 18807
// result := [ chassis , engine , control , weapon ] ;
18776: LD_ADDR_VAR 0 6
18780: PUSH
18781: LD_VAR 0 2
18785: PUSH
18786: LD_VAR 0 3
18790: PUSH
18791: LD_VAR 0 4
18795: PUSH
18796: LD_VAR 0 5
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: ST_TO_ADDR
// end ;
18807: LD_VAR 0 6
18811: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18812: LD_INT 0
18814: PPUSH
// if not chassis or not engine then
18815: LD_VAR 0 1
18819: NOT
18820: IFTRUE 18829
18822: PUSH
18823: LD_VAR 0 2
18827: NOT
18828: OR
18829: IFFALSE 18833
// exit ;
18831: GO 19029
// case engine of engine_solar :
18833: LD_VAR 0 2
18837: PUSH
18838: LD_INT 2
18840: DOUBLE
18841: EQUAL
18842: IFTRUE 18846
18844: GO 18884
18846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18847: LD_ADDR_VAR 0 3
18851: PUSH
18852: LD_INT 11
18854: PUSH
18855: LD_INT 12
18857: PUSH
18858: LD_INT 13
18860: PUSH
18861: LD_INT 14
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: LD_INT 2
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: ST_TO_ADDR
18882: GO 19013
18884: LD_INT 1
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 18954
18892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18893: LD_ADDR_VAR 0 3
18897: PUSH
18898: LD_INT 11
18900: PUSH
18901: LD_INT 12
18903: PUSH
18904: LD_INT 13
18906: PUSH
18907: LD_INT 14
18909: PUSH
18910: LD_INT 1
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: LD_INT 3
18918: PUSH
18919: LD_INT 4
18921: PUSH
18922: LD_INT 5
18924: PUSH
18925: LD_INT 21
18927: PUSH
18928: LD_INT 23
18930: PUSH
18931: LD_INT 22
18933: PUSH
18934: LD_INT 24
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: LIST
18941: LIST
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: ST_TO_ADDR
18952: GO 19013
18954: LD_INT 3
18956: DOUBLE
18957: EQUAL
18958: IFTRUE 18962
18960: GO 19012
18962: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18963: LD_ADDR_VAR 0 3
18967: PUSH
18968: LD_INT 13
18970: PUSH
18971: LD_INT 14
18973: PUSH
18974: LD_INT 2
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: LD_INT 4
18982: PUSH
18983: LD_INT 5
18985: PUSH
18986: LD_INT 21
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_INT 23
18994: PUSH
18995: LD_INT 24
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: ST_TO_ADDR
19010: GO 19013
19012: POP
// result := ( chassis in result ) ;
19013: LD_ADDR_VAR 0 3
19017: PUSH
19018: LD_VAR 0 1
19022: PUSH
19023: LD_VAR 0 3
19027: IN
19028: ST_TO_ADDR
// end ;
19029: LD_VAR 0 3
19033: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19034: LD_INT 0
19036: PPUSH
// if not chassis or not weapon then
19037: LD_VAR 0 1
19041: NOT
19042: IFTRUE 19051
19044: PUSH
19045: LD_VAR 0 2
19049: NOT
19050: OR
19051: IFFALSE 19055
// exit ;
19053: GO 20115
// case weapon of us_machine_gun :
19055: LD_VAR 0 2
19059: PUSH
19060: LD_INT 2
19062: DOUBLE
19063: EQUAL
19064: IFTRUE 19068
19066: GO 19098
19068: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19069: LD_ADDR_VAR 0 3
19073: PUSH
19074: LD_INT 1
19076: PUSH
19077: LD_INT 2
19079: PUSH
19080: LD_INT 3
19082: PUSH
19083: LD_INT 4
19085: PUSH
19086: LD_INT 5
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: ST_TO_ADDR
19096: GO 20099
19098: LD_INT 3
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19136
19106: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19107: LD_ADDR_VAR 0 3
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 3
19120: PUSH
19121: LD_INT 4
19123: PUSH
19124: LD_INT 5
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: ST_TO_ADDR
19134: GO 20099
19136: LD_INT 11
19138: DOUBLE
19139: EQUAL
19140: IFTRUE 19144
19142: GO 19174
19144: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19145: LD_ADDR_VAR 0 3
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: LD_INT 2
19155: PUSH
19156: LD_INT 3
19158: PUSH
19159: LD_INT 4
19161: PUSH
19162: LD_INT 5
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: ST_TO_ADDR
19172: GO 20099
19174: LD_INT 4
19176: DOUBLE
19177: EQUAL
19178: IFTRUE 19182
19180: GO 19208
19182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19183: LD_ADDR_VAR 0 3
19187: PUSH
19188: LD_INT 2
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: LD_INT 4
19196: PUSH
19197: LD_INT 5
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: ST_TO_ADDR
19206: GO 20099
19208: LD_INT 5
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19242
19216: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19217: LD_ADDR_VAR 0 3
19221: PUSH
19222: LD_INT 2
19224: PUSH
19225: LD_INT 3
19227: PUSH
19228: LD_INT 4
19230: PUSH
19231: LD_INT 5
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: ST_TO_ADDR
19240: GO 20099
19242: LD_INT 9
19244: DOUBLE
19245: EQUAL
19246: IFTRUE 19250
19248: GO 19276
19250: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19251: LD_ADDR_VAR 0 3
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: LD_INT 3
19261: PUSH
19262: LD_INT 4
19264: PUSH
19265: LD_INT 5
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: ST_TO_ADDR
19274: GO 20099
19276: LD_INT 7
19278: DOUBLE
19279: EQUAL
19280: IFTRUE 19284
19282: GO 19310
19284: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19285: LD_ADDR_VAR 0 3
19289: PUSH
19290: LD_INT 2
19292: PUSH
19293: LD_INT 3
19295: PUSH
19296: LD_INT 4
19298: PUSH
19299: LD_INT 5
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: ST_TO_ADDR
19308: GO 20099
19310: LD_INT 12
19312: DOUBLE
19313: EQUAL
19314: IFTRUE 19318
19316: GO 19344
19318: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19319: LD_ADDR_VAR 0 3
19323: PUSH
19324: LD_INT 2
19326: PUSH
19327: LD_INT 3
19329: PUSH
19330: LD_INT 4
19332: PUSH
19333: LD_INT 5
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: ST_TO_ADDR
19342: GO 20099
19344: LD_INT 13
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19378
19352: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19353: LD_ADDR_VAR 0 3
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 3
19363: PUSH
19364: LD_INT 4
19366: PUSH
19367: LD_INT 5
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: ST_TO_ADDR
19376: GO 20099
19378: LD_INT 14
19380: DOUBLE
19381: EQUAL
19382: IFTRUE 19386
19384: GO 19404
19386: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19387: LD_ADDR_VAR 0 3
19391: PUSH
19392: LD_INT 4
19394: PUSH
19395: LD_INT 5
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: ST_TO_ADDR
19402: GO 20099
19404: LD_INT 6
19406: DOUBLE
19407: EQUAL
19408: IFTRUE 19412
19410: GO 19430
19412: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19413: LD_ADDR_VAR 0 3
19417: PUSH
19418: LD_INT 4
19420: PUSH
19421: LD_INT 5
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: ST_TO_ADDR
19428: GO 20099
19430: LD_INT 10
19432: DOUBLE
19433: EQUAL
19434: IFTRUE 19438
19436: GO 19456
19438: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19439: LD_ADDR_VAR 0 3
19443: PUSH
19444: LD_INT 4
19446: PUSH
19447: LD_INT 5
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 20099
19456: LD_INT 22
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19490
19464: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: LD_INT 11
19472: PUSH
19473: LD_INT 12
19475: PUSH
19476: LD_INT 13
19478: PUSH
19479: LD_INT 14
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: ST_TO_ADDR
19488: GO 20099
19490: LD_INT 23
19492: DOUBLE
19493: EQUAL
19494: IFTRUE 19498
19496: GO 19524
19498: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19499: LD_ADDR_VAR 0 3
19503: PUSH
19504: LD_INT 11
19506: PUSH
19507: LD_INT 12
19509: PUSH
19510: LD_INT 13
19512: PUSH
19513: LD_INT 14
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: ST_TO_ADDR
19522: GO 20099
19524: LD_INT 24
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19558
19532: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_INT 11
19540: PUSH
19541: LD_INT 12
19543: PUSH
19544: LD_INT 13
19546: PUSH
19547: LD_INT 14
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: ST_TO_ADDR
19556: GO 20099
19558: LD_INT 30
19560: DOUBLE
19561: EQUAL
19562: IFTRUE 19566
19564: GO 19592
19566: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_INT 11
19574: PUSH
19575: LD_INT 12
19577: PUSH
19578: LD_INT 13
19580: PUSH
19581: LD_INT 14
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: ST_TO_ADDR
19590: GO 20099
19592: LD_INT 25
19594: DOUBLE
19595: EQUAL
19596: IFTRUE 19600
19598: GO 19618
19600: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19601: LD_ADDR_VAR 0 3
19605: PUSH
19606: LD_INT 13
19608: PUSH
19609: LD_INT 14
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: ST_TO_ADDR
19616: GO 20099
19618: LD_INT 27
19620: DOUBLE
19621: EQUAL
19622: IFTRUE 19626
19624: GO 19644
19626: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19627: LD_ADDR_VAR 0 3
19631: PUSH
19632: LD_INT 13
19634: PUSH
19635: LD_INT 14
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: ST_TO_ADDR
19642: GO 20099
19644: LD_INT 92
19646: DOUBLE
19647: EQUAL
19648: IFTRUE 19652
19650: GO 19678
19652: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19653: LD_ADDR_VAR 0 3
19657: PUSH
19658: LD_INT 11
19660: PUSH
19661: LD_INT 12
19663: PUSH
19664: LD_INT 13
19666: PUSH
19667: LD_INT 14
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: ST_TO_ADDR
19676: GO 20099
19678: LD_INT 28
19680: DOUBLE
19681: EQUAL
19682: IFTRUE 19686
19684: GO 19704
19686: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19687: LD_ADDR_VAR 0 3
19691: PUSH
19692: LD_INT 13
19694: PUSH
19695: LD_INT 14
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: ST_TO_ADDR
19702: GO 20099
19704: LD_INT 29
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19730
19712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: LD_INT 13
19720: PUSH
19721: LD_INT 14
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: ST_TO_ADDR
19728: GO 20099
19730: LD_INT 31
19732: DOUBLE
19733: EQUAL
19734: IFTRUE 19738
19736: GO 19756
19738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19739: LD_ADDR_VAR 0 3
19743: PUSH
19744: LD_INT 13
19746: PUSH
19747: LD_INT 14
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: ST_TO_ADDR
19754: GO 20099
19756: LD_INT 26
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19782
19764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19765: LD_ADDR_VAR 0 3
19769: PUSH
19770: LD_INT 13
19772: PUSH
19773: LD_INT 14
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: ST_TO_ADDR
19780: GO 20099
19782: LD_INT 42
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19816
19790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_INT 21
19798: PUSH
19799: LD_INT 22
19801: PUSH
19802: LD_INT 23
19804: PUSH
19805: LD_INT 24
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 20099
19816: LD_INT 43
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19850
19824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19825: LD_ADDR_VAR 0 3
19829: PUSH
19830: LD_INT 21
19832: PUSH
19833: LD_INT 22
19835: PUSH
19836: LD_INT 23
19838: PUSH
19839: LD_INT 24
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: ST_TO_ADDR
19848: GO 20099
19850: LD_INT 44
19852: DOUBLE
19853: EQUAL
19854: IFTRUE 19858
19856: GO 19884
19858: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19859: LD_ADDR_VAR 0 3
19863: PUSH
19864: LD_INT 21
19866: PUSH
19867: LD_INT 22
19869: PUSH
19870: LD_INT 23
19872: PUSH
19873: LD_INT 24
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: ST_TO_ADDR
19882: GO 20099
19884: LD_INT 45
19886: DOUBLE
19887: EQUAL
19888: IFTRUE 19892
19890: GO 19918
19892: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19893: LD_ADDR_VAR 0 3
19897: PUSH
19898: LD_INT 21
19900: PUSH
19901: LD_INT 22
19903: PUSH
19904: LD_INT 23
19906: PUSH
19907: LD_INT 24
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: LIST
19914: LIST
19915: ST_TO_ADDR
19916: GO 20099
19918: LD_INT 49
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 19952
19926: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_INT 21
19934: PUSH
19935: LD_INT 22
19937: PUSH
19938: LD_INT 23
19940: PUSH
19941: LD_INT 24
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: ST_TO_ADDR
19950: GO 20099
19952: LD_INT 51
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19986
19960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19961: LD_ADDR_VAR 0 3
19965: PUSH
19966: LD_INT 21
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_INT 23
19974: PUSH
19975: LD_INT 24
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: ST_TO_ADDR
19984: GO 20099
19986: LD_INT 52
19988: DOUBLE
19989: EQUAL
19990: IFTRUE 19994
19992: GO 20020
19994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19995: LD_ADDR_VAR 0 3
19999: PUSH
20000: LD_INT 21
20002: PUSH
20003: LD_INT 22
20005: PUSH
20006: LD_INT 23
20008: PUSH
20009: LD_INT 24
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: ST_TO_ADDR
20018: GO 20099
20020: LD_INT 53
20022: DOUBLE
20023: EQUAL
20024: IFTRUE 20028
20026: GO 20046
20028: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_INT 23
20036: PUSH
20037: LD_INT 24
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: ST_TO_ADDR
20044: GO 20099
20046: LD_INT 46
20048: DOUBLE
20049: EQUAL
20050: IFTRUE 20054
20052: GO 20072
20054: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20055: LD_ADDR_VAR 0 3
20059: PUSH
20060: LD_INT 23
20062: PUSH
20063: LD_INT 24
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: ST_TO_ADDR
20070: GO 20099
20072: LD_INT 47
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20098
20080: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20081: LD_ADDR_VAR 0 3
20085: PUSH
20086: LD_INT 23
20088: PUSH
20089: LD_INT 24
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: ST_TO_ADDR
20096: GO 20099
20098: POP
// result := ( chassis in result ) ;
20099: LD_ADDR_VAR 0 3
20103: PUSH
20104: LD_VAR 0 1
20108: PUSH
20109: LD_VAR 0 3
20113: IN
20114: ST_TO_ADDR
// end ;
20115: LD_VAR 0 3
20119: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20120: LD_INT 0
20122: PPUSH
20123: PPUSH
20124: PPUSH
20125: PPUSH
20126: PPUSH
20127: PPUSH
20128: PPUSH
// result := array ;
20129: LD_ADDR_VAR 0 5
20133: PUSH
20134: LD_VAR 0 1
20138: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20139: LD_VAR 0 1
20143: NOT
20144: IFTRUE 20153
20146: PUSH
20147: LD_VAR 0 2
20151: NOT
20152: OR
20153: IFTRUE 20162
20155: PUSH
20156: LD_VAR 0 3
20160: NOT
20161: OR
20162: IFTRUE 20176
20164: PUSH
20165: LD_VAR 0 2
20169: PUSH
20170: LD_VAR 0 1
20174: GREATER
20175: OR
20176: IFTRUE 20190
20178: PUSH
20179: LD_VAR 0 3
20183: PUSH
20184: LD_VAR 0 1
20188: GREATER
20189: OR
20190: IFFALSE 20194
// exit ;
20192: GO 20490
// if direction then
20194: LD_VAR 0 4
20198: IFFALSE 20262
// begin d := 1 ;
20200: LD_ADDR_VAR 0 9
20204: PUSH
20205: LD_INT 1
20207: ST_TO_ADDR
// if i_from > i_to then
20208: LD_VAR 0 2
20212: PUSH
20213: LD_VAR 0 3
20217: GREATER
20218: IFFALSE 20244
// length := ( array - i_from ) + i_to else
20220: LD_ADDR_VAR 0 11
20224: PUSH
20225: LD_VAR 0 1
20229: PUSH
20230: LD_VAR 0 2
20234: MINUS
20235: PUSH
20236: LD_VAR 0 3
20240: PLUS
20241: ST_TO_ADDR
20242: GO 20260
// length := i_to - i_from ;
20244: LD_ADDR_VAR 0 11
20248: PUSH
20249: LD_VAR 0 3
20253: PUSH
20254: LD_VAR 0 2
20258: MINUS
20259: ST_TO_ADDR
// end else
20260: GO 20323
// begin d := - 1 ;
20262: LD_ADDR_VAR 0 9
20266: PUSH
20267: LD_INT 1
20269: NEG
20270: ST_TO_ADDR
// if i_from > i_to then
20271: LD_VAR 0 2
20275: PUSH
20276: LD_VAR 0 3
20280: GREATER
20281: IFFALSE 20301
// length := i_from - i_to else
20283: LD_ADDR_VAR 0 11
20287: PUSH
20288: LD_VAR 0 2
20292: PUSH
20293: LD_VAR 0 3
20297: MINUS
20298: ST_TO_ADDR
20299: GO 20323
// length := ( array - i_to ) + i_from ;
20301: LD_ADDR_VAR 0 11
20305: PUSH
20306: LD_VAR 0 1
20310: PUSH
20311: LD_VAR 0 3
20315: MINUS
20316: PUSH
20317: LD_VAR 0 2
20321: PLUS
20322: ST_TO_ADDR
// end ; if not length then
20323: LD_VAR 0 11
20327: NOT
20328: IFFALSE 20332
// exit ;
20330: GO 20490
// tmp := array ;
20332: LD_ADDR_VAR 0 10
20336: PUSH
20337: LD_VAR 0 1
20341: ST_TO_ADDR
// for i = 1 to length do
20342: LD_ADDR_VAR 0 6
20346: PUSH
20347: DOUBLE
20348: LD_INT 1
20350: DEC
20351: ST_TO_ADDR
20352: LD_VAR 0 11
20356: PUSH
20357: FOR_TO
20358: IFFALSE 20478
// begin for j = 1 to array do
20360: LD_ADDR_VAR 0 7
20364: PUSH
20365: DOUBLE
20366: LD_INT 1
20368: DEC
20369: ST_TO_ADDR
20370: LD_VAR 0 1
20374: PUSH
20375: FOR_TO
20376: IFFALSE 20464
// begin k := j + d ;
20378: LD_ADDR_VAR 0 8
20382: PUSH
20383: LD_VAR 0 7
20387: PUSH
20388: LD_VAR 0 9
20392: PLUS
20393: ST_TO_ADDR
// if k > array then
20394: LD_VAR 0 8
20398: PUSH
20399: LD_VAR 0 1
20403: GREATER
20404: IFFALSE 20414
// k := 1 ;
20406: LD_ADDR_VAR 0 8
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if not k then
20414: LD_VAR 0 8
20418: NOT
20419: IFFALSE 20431
// k := array ;
20421: LD_ADDR_VAR 0 8
20425: PUSH
20426: LD_VAR 0 1
20430: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20431: LD_ADDR_VAR 0 10
20435: PUSH
20436: LD_VAR 0 10
20440: PPUSH
20441: LD_VAR 0 8
20445: PPUSH
20446: LD_VAR 0 1
20450: PUSH
20451: LD_VAR 0 7
20455: ARRAY
20456: PPUSH
20457: CALL_OW 1
20461: ST_TO_ADDR
// end ;
20462: GO 20375
20464: POP
20465: POP
// array := tmp ;
20466: LD_ADDR_VAR 0 1
20470: PUSH
20471: LD_VAR 0 10
20475: ST_TO_ADDR
// end ;
20476: GO 20357
20478: POP
20479: POP
// result := array ;
20480: LD_ADDR_VAR 0 5
20484: PUSH
20485: LD_VAR 0 1
20489: ST_TO_ADDR
// end ;
20490: LD_VAR 0 5
20494: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20495: LD_INT 0
20497: PPUSH
20498: PPUSH
// result := 0 ;
20499: LD_ADDR_VAR 0 3
20503: PUSH
20504: LD_INT 0
20506: ST_TO_ADDR
// if not array or not value in array then
20507: LD_VAR 0 1
20511: NOT
20512: IFTRUE 20527
20514: PUSH
20515: LD_VAR 0 2
20519: PUSH
20520: LD_VAR 0 1
20524: IN
20525: NOT
20526: OR
20527: IFFALSE 20531
// exit ;
20529: GO 20585
// for i = 1 to array do
20531: LD_ADDR_VAR 0 4
20535: PUSH
20536: DOUBLE
20537: LD_INT 1
20539: DEC
20540: ST_TO_ADDR
20541: LD_VAR 0 1
20545: PUSH
20546: FOR_TO
20547: IFFALSE 20583
// if value = array [ i ] then
20549: LD_VAR 0 2
20553: PUSH
20554: LD_VAR 0 1
20558: PUSH
20559: LD_VAR 0 4
20563: ARRAY
20564: EQUAL
20565: IFFALSE 20581
// begin result := i ;
20567: LD_ADDR_VAR 0 3
20571: PUSH
20572: LD_VAR 0 4
20576: ST_TO_ADDR
// exit ;
20577: POP
20578: POP
20579: GO 20585
// end ;
20581: GO 20546
20583: POP
20584: POP
// end ;
20585: LD_VAR 0 3
20589: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20590: LD_INT 0
20592: PPUSH
// vc_chassis := chassis ;
20593: LD_ADDR_OWVAR 37
20597: PUSH
20598: LD_VAR 0 1
20602: ST_TO_ADDR
// vc_engine := engine ;
20603: LD_ADDR_OWVAR 39
20607: PUSH
20608: LD_VAR 0 2
20612: ST_TO_ADDR
// vc_control := control ;
20613: LD_ADDR_OWVAR 38
20617: PUSH
20618: LD_VAR 0 3
20622: ST_TO_ADDR
// vc_weapon := weapon ;
20623: LD_ADDR_OWVAR 40
20627: PUSH
20628: LD_VAR 0 4
20632: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20633: LD_ADDR_OWVAR 41
20637: PUSH
20638: LD_VAR 0 5
20642: ST_TO_ADDR
// end ;
20643: LD_VAR 0 6
20647: RET
// export function WantPlant ( unit ) ; var task ; begin
20648: LD_INT 0
20650: PPUSH
20651: PPUSH
// result := false ;
20652: LD_ADDR_VAR 0 2
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20660: LD_ADDR_VAR 0 3
20664: PUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 437
20674: ST_TO_ADDR
// if task then
20675: LD_VAR 0 3
20679: IFFALSE 20707
// if task [ 1 ] [ 1 ] = p then
20681: LD_VAR 0 3
20685: PUSH
20686: LD_INT 1
20688: ARRAY
20689: PUSH
20690: LD_INT 1
20692: ARRAY
20693: PUSH
20694: LD_STRING p
20696: EQUAL
20697: IFFALSE 20707
// result := true ;
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 1
20706: ST_TO_ADDR
// end ;
20707: LD_VAR 0 2
20711: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20712: LD_INT 0
20714: PPUSH
20715: PPUSH
20716: PPUSH
20717: PPUSH
// if pos < 1 then
20718: LD_VAR 0 2
20722: PUSH
20723: LD_INT 1
20725: LESS
20726: IFFALSE 20730
// exit ;
20728: GO 21033
// if pos = 1 then
20730: LD_VAR 0 2
20734: PUSH
20735: LD_INT 1
20737: EQUAL
20738: IFFALSE 20771
// result := Replace ( arr , pos [ 1 ] , value ) else
20740: LD_ADDR_VAR 0 4
20744: PUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_VAR 0 2
20754: PUSH
20755: LD_INT 1
20757: ARRAY
20758: PPUSH
20759: LD_VAR 0 3
20763: PPUSH
20764: CALL_OW 1
20768: ST_TO_ADDR
20769: GO 21033
// begin tmp := arr ;
20771: LD_ADDR_VAR 0 6
20775: PUSH
20776: LD_VAR 0 1
20780: ST_TO_ADDR
// s_arr := [ tmp ] ;
20781: LD_ADDR_VAR 0 7
20785: PUSH
20786: LD_VAR 0 6
20790: PUSH
20791: EMPTY
20792: LIST
20793: ST_TO_ADDR
// for i = 1 to pos - 1 do
20794: LD_ADDR_VAR 0 5
20798: PUSH
20799: DOUBLE
20800: LD_INT 1
20802: DEC
20803: ST_TO_ADDR
20804: LD_VAR 0 2
20808: PUSH
20809: LD_INT 1
20811: MINUS
20812: PUSH
20813: FOR_TO
20814: IFFALSE 20859
// begin tmp := tmp [ pos [ i ] ] ;
20816: LD_ADDR_VAR 0 6
20820: PUSH
20821: LD_VAR 0 6
20825: PUSH
20826: LD_VAR 0 2
20830: PUSH
20831: LD_VAR 0 5
20835: ARRAY
20836: ARRAY
20837: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20838: LD_ADDR_VAR 0 7
20842: PUSH
20843: LD_VAR 0 7
20847: PUSH
20848: LD_VAR 0 6
20852: PUSH
20853: EMPTY
20854: LIST
20855: ADD
20856: ST_TO_ADDR
// end ;
20857: GO 20813
20859: POP
20860: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20861: LD_ADDR_VAR 0 6
20865: PUSH
20866: LD_VAR 0 6
20870: PPUSH
20871: LD_VAR 0 2
20875: PUSH
20876: LD_VAR 0 2
20880: ARRAY
20881: PPUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: CALL_OW 1
20891: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20892: LD_ADDR_VAR 0 7
20896: PUSH
20897: LD_VAR 0 7
20901: PPUSH
20902: LD_VAR 0 7
20906: PPUSH
20907: LD_VAR 0 6
20911: PPUSH
20912: CALL_OW 1
20916: ST_TO_ADDR
// for i = s_arr downto 2 do
20917: LD_ADDR_VAR 0 5
20921: PUSH
20922: DOUBLE
20923: LD_VAR 0 7
20927: INC
20928: ST_TO_ADDR
20929: LD_INT 2
20931: PUSH
20932: FOR_DOWNTO
20933: IFFALSE 21017
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: LD_VAR 0 7
20944: PUSH
20945: LD_VAR 0 5
20949: PUSH
20950: LD_INT 1
20952: MINUS
20953: ARRAY
20954: PPUSH
20955: LD_VAR 0 2
20959: PUSH
20960: LD_VAR 0 5
20964: PUSH
20965: LD_INT 1
20967: MINUS
20968: ARRAY
20969: PPUSH
20970: LD_VAR 0 7
20974: PUSH
20975: LD_VAR 0 5
20979: ARRAY
20980: PPUSH
20981: CALL_OW 1
20985: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20986: LD_ADDR_VAR 0 7
20990: PUSH
20991: LD_VAR 0 7
20995: PPUSH
20996: LD_VAR 0 5
21000: PUSH
21001: LD_INT 1
21003: MINUS
21004: PPUSH
21005: LD_VAR 0 6
21009: PPUSH
21010: CALL_OW 1
21014: ST_TO_ADDR
// end ;
21015: GO 20932
21017: POP
21018: POP
// result := s_arr [ 1 ] ;
21019: LD_ADDR_VAR 0 4
21023: PUSH
21024: LD_VAR 0 7
21028: PUSH
21029: LD_INT 1
21031: ARRAY
21032: ST_TO_ADDR
// end ; end ;
21033: LD_VAR 0 4
21037: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21038: LD_INT 0
21040: PPUSH
21041: PPUSH
// if not list then
21042: LD_VAR 0 1
21046: NOT
21047: IFFALSE 21051
// exit ;
21049: GO 21142
// i := list [ pos1 ] ;
21051: LD_ADDR_VAR 0 5
21055: PUSH
21056: LD_VAR 0 1
21060: PUSH
21061: LD_VAR 0 2
21065: ARRAY
21066: ST_TO_ADDR
// if not i then
21067: LD_VAR 0 5
21071: NOT
21072: IFFALSE 21076
// exit ;
21074: GO 21142
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21076: LD_ADDR_VAR 0 1
21080: PUSH
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_VAR 0 2
21090: PPUSH
21091: LD_VAR 0 1
21095: PUSH
21096: LD_VAR 0 3
21100: ARRAY
21101: PPUSH
21102: CALL_OW 1
21106: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_VAR 0 1
21116: PPUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: LD_VAR 0 5
21126: PPUSH
21127: CALL_OW 1
21131: ST_TO_ADDR
// result := list ;
21132: LD_ADDR_VAR 0 4
21136: PUSH
21137: LD_VAR 0 1
21141: ST_TO_ADDR
// end ;
21142: LD_VAR 0 4
21146: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21147: LD_INT 0
21149: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21150: LD_ADDR_VAR 0 5
21154: PUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: CALL_OW 250
21164: PPUSH
21165: LD_VAR 0 1
21169: PPUSH
21170: CALL_OW 251
21174: PPUSH
21175: LD_VAR 0 2
21179: PPUSH
21180: LD_VAR 0 3
21184: PPUSH
21185: LD_VAR 0 4
21189: PPUSH
21190: CALL 21572 0 5
21194: ST_TO_ADDR
// end ;
21195: LD_VAR 0 5
21199: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21200: LD_INT 0
21202: PPUSH
21203: PPUSH
21204: PPUSH
21205: PPUSH
// if not list or not unit then
21206: LD_VAR 0 2
21210: NOT
21211: IFTRUE 21220
21213: PUSH
21214: LD_VAR 0 1
21218: NOT
21219: OR
21220: IFFALSE 21224
// exit ;
21222: GO 21567
// result := [ ] ;
21224: LD_ADDR_VAR 0 5
21228: PUSH
21229: EMPTY
21230: ST_TO_ADDR
// for i in list do
21231: LD_ADDR_VAR 0 6
21235: PUSH
21236: LD_VAR 0 2
21240: PUSH
21241: FOR_IN
21242: IFFALSE 21460
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21244: LD_ADDR_VAR 0 8
21248: PUSH
21249: LD_VAR 0 1
21253: PPUSH
21254: LD_VAR 0 6
21258: PUSH
21259: LD_INT 1
21261: ARRAY
21262: PPUSH
21263: LD_VAR 0 6
21267: PUSH
21268: LD_INT 2
21270: ARRAY
21271: PPUSH
21272: CALL_OW 297
21276: ST_TO_ADDR
// if not Count ( result ) then
21277: LD_VAR 0 5
21281: PPUSH
21282: CALL 17828 0 1
21286: NOT
21287: IFFALSE 21320
// begin result := Join ( result , [ i , tmp ] ) ;
21289: LD_ADDR_VAR 0 5
21293: PUSH
21294: LD_VAR 0 5
21298: PPUSH
21299: LD_VAR 0 6
21303: PUSH
21304: LD_VAR 0 8
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PPUSH
21313: CALL 53760 0 2
21317: ST_TO_ADDR
// continue ;
21318: GO 21241
// end ; if result [ result ] [ 2 ] <= tmp then
21320: LD_VAR 0 5
21324: PUSH
21325: LD_VAR 0 5
21329: ARRAY
21330: PUSH
21331: LD_INT 2
21333: ARRAY
21334: PUSH
21335: LD_VAR 0 8
21339: LESSEQUAL
21340: IFFALSE 21373
// result := Join ( result , [ i , tmp ] ) else
21342: LD_ADDR_VAR 0 5
21346: PUSH
21347: LD_VAR 0 5
21351: PPUSH
21352: LD_VAR 0 6
21356: PUSH
21357: LD_VAR 0 8
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL 53760 0 2
21370: ST_TO_ADDR
21371: GO 21458
// begin for j := 1 to Count ( result ) do
21373: LD_ADDR_VAR 0 7
21377: PUSH
21378: DOUBLE
21379: LD_INT 1
21381: DEC
21382: ST_TO_ADDR
21383: LD_VAR 0 5
21387: PPUSH
21388: CALL 17828 0 1
21392: PUSH
21393: FOR_TO
21394: IFFALSE 21456
// begin if tmp < result [ j ] [ 2 ] then
21396: LD_VAR 0 8
21400: PUSH
21401: LD_VAR 0 5
21405: PUSH
21406: LD_VAR 0 7
21410: ARRAY
21411: PUSH
21412: LD_INT 2
21414: ARRAY
21415: LESS
21416: IFFALSE 21454
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21418: LD_ADDR_VAR 0 5
21422: PUSH
21423: LD_VAR 0 5
21427: PPUSH
21428: LD_VAR 0 7
21432: PPUSH
21433: LD_VAR 0 6
21437: PUSH
21438: LD_VAR 0 8
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PPUSH
21447: CALL_OW 2
21451: ST_TO_ADDR
// break ;
21452: GO 21456
// end ; end ;
21454: GO 21393
21456: POP
21457: POP
// end ; end ;
21458: GO 21241
21460: POP
21461: POP
// if result and not asc then
21462: LD_VAR 0 5
21466: IFFALSE 21475
21468: PUSH
21469: LD_VAR 0 3
21473: NOT
21474: AND
21475: IFFALSE 21492
// result := ReverseArray ( result ) ;
21477: LD_ADDR_VAR 0 5
21481: PUSH
21482: LD_VAR 0 5
21486: PPUSH
21487: CALL 48850 0 1
21491: ST_TO_ADDR
// tmp := [ ] ;
21492: LD_ADDR_VAR 0 8
21496: PUSH
21497: EMPTY
21498: ST_TO_ADDR
// if mode then
21499: LD_VAR 0 4
21503: IFFALSE 21567
// begin for i := 1 to result do
21505: LD_ADDR_VAR 0 6
21509: PUSH
21510: DOUBLE
21511: LD_INT 1
21513: DEC
21514: ST_TO_ADDR
21515: LD_VAR 0 5
21519: PUSH
21520: FOR_TO
21521: IFFALSE 21555
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21523: LD_ADDR_VAR 0 8
21527: PUSH
21528: LD_VAR 0 8
21532: PPUSH
21533: LD_VAR 0 5
21537: PUSH
21538: LD_VAR 0 6
21542: ARRAY
21543: PUSH
21544: LD_INT 1
21546: ARRAY
21547: PPUSH
21548: CALL 53760 0 2
21552: ST_TO_ADDR
21553: GO 21520
21555: POP
21556: POP
// result := tmp ;
21557: LD_ADDR_VAR 0 5
21561: PUSH
21562: LD_VAR 0 8
21566: ST_TO_ADDR
// end ; end ;
21567: LD_VAR 0 5
21571: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21572: LD_INT 0
21574: PPUSH
21575: PPUSH
21576: PPUSH
21577: PPUSH
// if not list then
21578: LD_VAR 0 3
21582: NOT
21583: IFFALSE 21587
// exit ;
21585: GO 21977
// result := [ ] ;
21587: LD_ADDR_VAR 0 6
21591: PUSH
21592: EMPTY
21593: ST_TO_ADDR
// for i in list do
21594: LD_ADDR_VAR 0 7
21598: PUSH
21599: LD_VAR 0 3
21603: PUSH
21604: FOR_IN
21605: IFFALSE 21807
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21607: LD_ADDR_VAR 0 9
21611: PUSH
21612: LD_VAR 0 7
21616: PPUSH
21617: LD_VAR 0 1
21621: PPUSH
21622: LD_VAR 0 2
21626: PPUSH
21627: CALL_OW 297
21631: ST_TO_ADDR
// if not result then
21632: LD_VAR 0 6
21636: NOT
21637: IFFALSE 21663
// result := [ [ i , tmp ] ] else
21639: LD_ADDR_VAR 0 6
21643: PUSH
21644: LD_VAR 0 7
21648: PUSH
21649: LD_VAR 0 9
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: EMPTY
21659: LIST
21660: ST_TO_ADDR
21661: GO 21805
// begin if result [ result ] [ 2 ] <= tmp then
21663: LD_VAR 0 6
21667: PUSH
21668: LD_VAR 0 6
21672: ARRAY
21673: PUSH
21674: LD_INT 2
21676: ARRAY
21677: PUSH
21678: LD_VAR 0 9
21682: LESSEQUAL
21683: IFFALSE 21725
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21685: LD_ADDR_VAR 0 6
21689: PUSH
21690: LD_VAR 0 6
21694: PPUSH
21695: LD_VAR 0 6
21699: PUSH
21700: LD_INT 1
21702: PLUS
21703: PPUSH
21704: LD_VAR 0 7
21708: PUSH
21709: LD_VAR 0 9
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 2
21722: ST_TO_ADDR
21723: GO 21805
// for j := 1 to result do
21725: LD_ADDR_VAR 0 8
21729: PUSH
21730: DOUBLE
21731: LD_INT 1
21733: DEC
21734: ST_TO_ADDR
21735: LD_VAR 0 6
21739: PUSH
21740: FOR_TO
21741: IFFALSE 21803
// begin if tmp < result [ j ] [ 2 ] then
21743: LD_VAR 0 9
21747: PUSH
21748: LD_VAR 0 6
21752: PUSH
21753: LD_VAR 0 8
21757: ARRAY
21758: PUSH
21759: LD_INT 2
21761: ARRAY
21762: LESS
21763: IFFALSE 21801
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21765: LD_ADDR_VAR 0 6
21769: PUSH
21770: LD_VAR 0 6
21774: PPUSH
21775: LD_VAR 0 8
21779: PPUSH
21780: LD_VAR 0 7
21784: PUSH
21785: LD_VAR 0 9
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PPUSH
21794: CALL_OW 2
21798: ST_TO_ADDR
// break ;
21799: GO 21803
// end ; end ;
21801: GO 21740
21803: POP
21804: POP
// end ; end ;
21805: GO 21604
21807: POP
21808: POP
// if result and not asc then
21809: LD_VAR 0 6
21813: IFFALSE 21822
21815: PUSH
21816: LD_VAR 0 4
21820: NOT
21821: AND
21822: IFFALSE 21897
// begin tmp := result ;
21824: LD_ADDR_VAR 0 9
21828: PUSH
21829: LD_VAR 0 6
21833: ST_TO_ADDR
// for i = tmp downto 1 do
21834: LD_ADDR_VAR 0 7
21838: PUSH
21839: DOUBLE
21840: LD_VAR 0 9
21844: INC
21845: ST_TO_ADDR
21846: LD_INT 1
21848: PUSH
21849: FOR_DOWNTO
21850: IFFALSE 21895
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21852: LD_ADDR_VAR 0 6
21856: PUSH
21857: LD_VAR 0 6
21861: PPUSH
21862: LD_VAR 0 9
21866: PUSH
21867: LD_VAR 0 7
21871: MINUS
21872: PUSH
21873: LD_INT 1
21875: PLUS
21876: PPUSH
21877: LD_VAR 0 9
21881: PUSH
21882: LD_VAR 0 7
21886: ARRAY
21887: PPUSH
21888: CALL_OW 1
21892: ST_TO_ADDR
21893: GO 21849
21895: POP
21896: POP
// end ; tmp := [ ] ;
21897: LD_ADDR_VAR 0 9
21901: PUSH
21902: EMPTY
21903: ST_TO_ADDR
// if mode then
21904: LD_VAR 0 5
21908: IFFALSE 21977
// begin for i = 1 to result do
21910: LD_ADDR_VAR 0 7
21914: PUSH
21915: DOUBLE
21916: LD_INT 1
21918: DEC
21919: ST_TO_ADDR
21920: LD_VAR 0 6
21924: PUSH
21925: FOR_TO
21926: IFFALSE 21965
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21928: LD_ADDR_VAR 0 9
21932: PUSH
21933: LD_VAR 0 9
21937: PPUSH
21938: LD_VAR 0 7
21942: PPUSH
21943: LD_VAR 0 6
21947: PUSH
21948: LD_VAR 0 7
21952: ARRAY
21953: PUSH
21954: LD_INT 1
21956: ARRAY
21957: PPUSH
21958: CALL_OW 1
21962: ST_TO_ADDR
21963: GO 21925
21965: POP
21966: POP
// result := tmp ;
21967: LD_ADDR_VAR 0 6
21971: PUSH
21972: LD_VAR 0 9
21976: ST_TO_ADDR
// end ; end ;
21977: LD_VAR 0 6
21981: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21982: LD_INT 0
21984: PPUSH
21985: PPUSH
21986: PPUSH
21987: PPUSH
21988: PPUSH
21989: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21990: LD_ADDR_VAR 0 5
21994: PUSH
21995: LD_INT 0
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: ST_TO_ADDR
// if not x or not y then
22012: LD_VAR 0 2
22016: NOT
22017: IFTRUE 22026
22019: PUSH
22020: LD_VAR 0 3
22024: NOT
22025: OR
22026: IFFALSE 22030
// exit ;
22028: GO 23686
// if not range then
22030: LD_VAR 0 4
22034: NOT
22035: IFFALSE 22045
// range := 10 ;
22037: LD_ADDR_VAR 0 4
22041: PUSH
22042: LD_INT 10
22044: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22045: LD_ADDR_VAR 0 8
22049: PUSH
22050: LD_INT 81
22052: PUSH
22053: LD_VAR 0 1
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 92
22064: PUSH
22065: LD_VAR 0 2
22069: PUSH
22070: LD_VAR 0 3
22074: PUSH
22075: LD_VAR 0 4
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: LD_INT 21
22091: PUSH
22092: LD_INT 3
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 69
22112: ST_TO_ADDR
// if not tmp then
22113: LD_VAR 0 8
22117: NOT
22118: IFFALSE 22122
// exit ;
22120: GO 23686
// for i in tmp do
22122: LD_ADDR_VAR 0 6
22126: PUSH
22127: LD_VAR 0 8
22131: PUSH
22132: FOR_IN
22133: IFFALSE 23661
// begin points := [ 0 , 0 , 0 ] ;
22135: LD_ADDR_VAR 0 9
22139: PUSH
22140: LD_INT 0
22142: PUSH
22143: LD_INT 0
22145: PUSH
22146: LD_INT 0
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: LIST
22153: ST_TO_ADDR
// bpoints := 1 ;
22154: LD_ADDR_VAR 0 10
22158: PUSH
22159: LD_INT 1
22161: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22162: LD_VAR 0 6
22166: PPUSH
22167: CALL_OW 247
22171: PUSH
22172: LD_INT 1
22174: DOUBLE
22175: EQUAL
22176: IFTRUE 22180
22178: GO 22762
22180: POP
// begin if GetClass ( i ) = 1 then
22181: LD_VAR 0 6
22185: PPUSH
22186: CALL_OW 257
22190: PUSH
22191: LD_INT 1
22193: EQUAL
22194: IFFALSE 22215
// points := [ 10 , 5 , 3 ] ;
22196: LD_ADDR_VAR 0 9
22200: PUSH
22201: LD_INT 10
22203: PUSH
22204: LD_INT 5
22206: PUSH
22207: LD_INT 3
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22215: LD_VAR 0 6
22219: PPUSH
22220: CALL_OW 257
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 3
22230: PUSH
22231: LD_INT 4
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: LIST
22238: IN
22239: IFFALSE 22260
// points := [ 3 , 2 , 1 ] ;
22241: LD_ADDR_VAR 0 9
22245: PUSH
22246: LD_INT 3
22248: PUSH
22249: LD_INT 2
22251: PUSH
22252: LD_INT 1
22254: PUSH
22255: EMPTY
22256: LIST
22257: LIST
22258: LIST
22259: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22260: LD_VAR 0 6
22264: PPUSH
22265: CALL_OW 257
22269: PUSH
22270: LD_INT 5
22272: EQUAL
22273: IFFALSE 22294
// points := [ 130 , 5 , 2 ] ;
22275: LD_ADDR_VAR 0 9
22279: PUSH
22280: LD_INT 130
22282: PUSH
22283: LD_INT 5
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22294: LD_VAR 0 6
22298: PPUSH
22299: CALL_OW 257
22303: PUSH
22304: LD_INT 8
22306: EQUAL
22307: IFFALSE 22328
// points := [ 35 , 35 , 30 ] ;
22309: LD_ADDR_VAR 0 9
22313: PUSH
22314: LD_INT 35
22316: PUSH
22317: LD_INT 35
22319: PUSH
22320: LD_INT 30
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: LIST
22327: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22328: LD_VAR 0 6
22332: PPUSH
22333: CALL_OW 257
22337: PUSH
22338: LD_INT 9
22340: EQUAL
22341: IFFALSE 22362
// points := [ 20 , 55 , 40 ] ;
22343: LD_ADDR_VAR 0 9
22347: PUSH
22348: LD_INT 20
22350: PUSH
22351: LD_INT 55
22353: PUSH
22354: LD_INT 40
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: LIST
22361: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22362: LD_VAR 0 6
22366: PPUSH
22367: CALL_OW 257
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: LD_INT 16
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: IN
22382: IFFALSE 22403
// points := [ 5 , 3 , 2 ] ;
22384: LD_ADDR_VAR 0 9
22388: PUSH
22389: LD_INT 5
22391: PUSH
22392: LD_INT 3
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: LIST
22402: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22403: LD_VAR 0 6
22407: PPUSH
22408: CALL_OW 257
22412: PUSH
22413: LD_INT 17
22415: EQUAL
22416: IFFALSE 22437
// points := [ 100 , 50 , 75 ] ;
22418: LD_ADDR_VAR 0 9
22422: PUSH
22423: LD_INT 100
22425: PUSH
22426: LD_INT 50
22428: PUSH
22429: LD_INT 75
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22437: LD_VAR 0 6
22441: PPUSH
22442: CALL_OW 257
22446: PUSH
22447: LD_INT 15
22449: EQUAL
22450: IFFALSE 22471
// points := [ 10 , 5 , 3 ] ;
22452: LD_ADDR_VAR 0 9
22456: PUSH
22457: LD_INT 10
22459: PUSH
22460: LD_INT 5
22462: PUSH
22463: LD_INT 3
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22471: LD_VAR 0 6
22475: PPUSH
22476: CALL_OW 257
22480: PUSH
22481: LD_INT 14
22483: EQUAL
22484: IFFALSE 22505
// points := [ 10 , 0 , 0 ] ;
22486: LD_ADDR_VAR 0 9
22490: PUSH
22491: LD_INT 10
22493: PUSH
22494: LD_INT 0
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: LIST
22504: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22505: LD_VAR 0 6
22509: PPUSH
22510: CALL_OW 257
22514: PUSH
22515: LD_INT 11
22517: EQUAL
22518: IFFALSE 22539
// points := [ 30 , 10 , 5 ] ;
22520: LD_ADDR_VAR 0 9
22524: PUSH
22525: LD_INT 30
22527: PUSH
22528: LD_INT 10
22530: PUSH
22531: LD_INT 5
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22539: LD_VAR 0 1
22543: PPUSH
22544: LD_INT 5
22546: PPUSH
22547: CALL_OW 321
22551: PUSH
22552: LD_INT 2
22554: EQUAL
22555: IFFALSE 22572
// bpoints := bpoints * 1.8 ;
22557: LD_ADDR_VAR 0 10
22561: PUSH
22562: LD_VAR 0 10
22566: PUSH
22567: LD_REAL  1.80000000000000E+0000
22570: MUL
22571: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22572: LD_VAR 0 6
22576: PPUSH
22577: CALL_OW 257
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: LD_INT 3
22590: PUSH
22591: LD_INT 4
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: IN
22600: IFFALSE 22620
22602: PUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: LD_INT 51
22610: PPUSH
22611: CALL_OW 321
22615: PUSH
22616: LD_INT 2
22618: EQUAL
22619: AND
22620: IFFALSE 22637
// bpoints := bpoints * 1.2 ;
22622: LD_ADDR_VAR 0 10
22626: PUSH
22627: LD_VAR 0 10
22631: PUSH
22632: LD_REAL  1.20000000000000E+0000
22635: MUL
22636: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22637: LD_VAR 0 6
22641: PPUSH
22642: CALL_OW 257
22646: PUSH
22647: LD_INT 5
22649: PUSH
22650: LD_INT 7
22652: PUSH
22653: LD_INT 9
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: IN
22661: IFFALSE 22681
22663: PUSH
22664: LD_VAR 0 1
22668: PPUSH
22669: LD_INT 52
22671: PPUSH
22672: CALL_OW 321
22676: PUSH
22677: LD_INT 2
22679: EQUAL
22680: AND
22681: IFFALSE 22698
// bpoints := bpoints * 1.5 ;
22683: LD_ADDR_VAR 0 10
22687: PUSH
22688: LD_VAR 0 10
22692: PUSH
22693: LD_REAL  1.50000000000000E+0000
22696: MUL
22697: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22698: LD_VAR 0 1
22702: PPUSH
22703: LD_INT 66
22705: PPUSH
22706: CALL_OW 321
22710: PUSH
22711: LD_INT 2
22713: EQUAL
22714: IFFALSE 22731
// bpoints := bpoints * 1.1 ;
22716: LD_ADDR_VAR 0 10
22720: PUSH
22721: LD_VAR 0 10
22725: PUSH
22726: LD_REAL  1.10000000000000E+0000
22729: MUL
22730: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22731: LD_ADDR_VAR 0 10
22735: PUSH
22736: LD_VAR 0 10
22740: PUSH
22741: LD_VAR 0 6
22745: PPUSH
22746: LD_INT 1
22748: PPUSH
22749: CALL_OW 259
22753: PUSH
22754: LD_REAL  1.15000000000000E+0000
22757: MUL
22758: MUL
22759: ST_TO_ADDR
// end ; unit_vehicle :
22760: GO 23590
22762: LD_INT 2
22764: DOUBLE
22765: EQUAL
22766: IFTRUE 22770
22768: GO 23578
22770: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22771: LD_VAR 0 6
22775: PPUSH
22776: CALL_OW 264
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: LD_INT 42
22786: PUSH
22787: LD_INT 24
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: IN
22795: IFFALSE 22816
// points := [ 25 , 5 , 3 ] ;
22797: LD_ADDR_VAR 0 9
22801: PUSH
22802: LD_INT 25
22804: PUSH
22805: LD_INT 5
22807: PUSH
22808: LD_INT 3
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22816: LD_VAR 0 6
22820: PPUSH
22821: CALL_OW 264
22825: PUSH
22826: LD_INT 4
22828: PUSH
22829: LD_INT 43
22831: PUSH
22832: LD_INT 25
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: IN
22840: IFFALSE 22861
// points := [ 40 , 15 , 5 ] ;
22842: LD_ADDR_VAR 0 9
22846: PUSH
22847: LD_INT 40
22849: PUSH
22850: LD_INT 15
22852: PUSH
22853: LD_INT 5
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22861: LD_VAR 0 6
22865: PPUSH
22866: CALL_OW 264
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: LD_INT 23
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: IN
22881: IFFALSE 22902
// points := [ 7 , 25 , 8 ] ;
22883: LD_ADDR_VAR 0 9
22887: PUSH
22888: LD_INT 7
22890: PUSH
22891: LD_INT 25
22893: PUSH
22894: LD_INT 8
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: LIST
22901: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22902: LD_VAR 0 6
22906: PPUSH
22907: CALL_OW 264
22911: PUSH
22912: LD_INT 5
22914: PUSH
22915: LD_INT 27
22917: PUSH
22918: LD_INT 44
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: IN
22926: IFFALSE 22947
// points := [ 14 , 50 , 16 ] ;
22928: LD_ADDR_VAR 0 9
22932: PUSH
22933: LD_INT 14
22935: PUSH
22936: LD_INT 50
22938: PUSH
22939: LD_INT 16
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22947: LD_VAR 0 6
22951: PPUSH
22952: CALL_OW 264
22956: PUSH
22957: LD_INT 6
22959: PUSH
22960: LD_INT 46
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: IN
22967: IFFALSE 22988
// points := [ 32 , 120 , 70 ] ;
22969: LD_ADDR_VAR 0 9
22973: PUSH
22974: LD_INT 32
22976: PUSH
22977: LD_INT 120
22979: PUSH
22980: LD_INT 70
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22988: LD_VAR 0 6
22992: PPUSH
22993: CALL_OW 264
22997: PUSH
22998: LD_INT 7
23000: PUSH
23001: LD_INT 28
23003: PUSH
23004: LD_INT 45
23006: PUSH
23007: LD_INT 92
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: IN
23016: IFFALSE 23037
// points := [ 35 , 20 , 45 ] ;
23018: LD_ADDR_VAR 0 9
23022: PUSH
23023: LD_INT 35
23025: PUSH
23026: LD_INT 20
23028: PUSH
23029: LD_INT 45
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23037: LD_VAR 0 6
23041: PPUSH
23042: CALL_OW 264
23046: PUSH
23047: LD_INT 47
23049: PUSH
23050: EMPTY
23051: LIST
23052: IN
23053: IFFALSE 23074
// points := [ 67 , 45 , 75 ] ;
23055: LD_ADDR_VAR 0 9
23059: PUSH
23060: LD_INT 67
23062: PUSH
23063: LD_INT 45
23065: PUSH
23066: LD_INT 75
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23074: LD_VAR 0 6
23078: PPUSH
23079: CALL_OW 264
23083: PUSH
23084: LD_INT 26
23086: PUSH
23087: EMPTY
23088: LIST
23089: IN
23090: IFFALSE 23111
// points := [ 120 , 30 , 80 ] ;
23092: LD_ADDR_VAR 0 9
23096: PUSH
23097: LD_INT 120
23099: PUSH
23100: LD_INT 30
23102: PUSH
23103: LD_INT 80
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23111: LD_VAR 0 6
23115: PPUSH
23116: CALL_OW 264
23120: PUSH
23121: LD_INT 22
23123: PUSH
23124: EMPTY
23125: LIST
23126: IN
23127: IFFALSE 23148
// points := [ 40 , 1 , 1 ] ;
23129: LD_ADDR_VAR 0 9
23133: PUSH
23134: LD_INT 40
23136: PUSH
23137: LD_INT 1
23139: PUSH
23140: LD_INT 1
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23148: LD_VAR 0 6
23152: PPUSH
23153: CALL_OW 264
23157: PUSH
23158: LD_INT 29
23160: PUSH
23161: EMPTY
23162: LIST
23163: IN
23164: IFFALSE 23185
// points := [ 70 , 200 , 400 ] ;
23166: LD_ADDR_VAR 0 9
23170: PUSH
23171: LD_INT 70
23173: PUSH
23174: LD_INT 200
23176: PUSH
23177: LD_INT 400
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23185: LD_VAR 0 6
23189: PPUSH
23190: CALL_OW 264
23194: PUSH
23195: LD_INT 14
23197: PUSH
23198: LD_INT 53
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: IN
23205: IFFALSE 23226
// points := [ 40 , 10 , 20 ] ;
23207: LD_ADDR_VAR 0 9
23211: PUSH
23212: LD_INT 40
23214: PUSH
23215: LD_INT 10
23217: PUSH
23218: LD_INT 20
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: LIST
23225: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23226: LD_VAR 0 6
23230: PPUSH
23231: CALL_OW 264
23235: PUSH
23236: LD_INT 9
23238: PUSH
23239: EMPTY
23240: LIST
23241: IN
23242: IFFALSE 23263
// points := [ 5 , 70 , 20 ] ;
23244: LD_ADDR_VAR 0 9
23248: PUSH
23249: LD_INT 5
23251: PUSH
23252: LD_INT 70
23254: PUSH
23255: LD_INT 20
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: LIST
23262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23263: LD_VAR 0 6
23267: PPUSH
23268: CALL_OW 264
23272: PUSH
23273: LD_INT 10
23275: PUSH
23276: EMPTY
23277: LIST
23278: IN
23279: IFFALSE 23300
// points := [ 35 , 110 , 70 ] ;
23281: LD_ADDR_VAR 0 9
23285: PUSH
23286: LD_INT 35
23288: PUSH
23289: LD_INT 110
23291: PUSH
23292: LD_INT 70
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23300: LD_VAR 0 6
23304: PPUSH
23305: CALL_OW 265
23309: PUSH
23310: LD_INT 25
23312: EQUAL
23313: IFFALSE 23334
// points := [ 80 , 65 , 100 ] ;
23315: LD_ADDR_VAR 0 9
23319: PUSH
23320: LD_INT 80
23322: PUSH
23323: LD_INT 65
23325: PUSH
23326: LD_INT 100
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23334: LD_VAR 0 6
23338: PPUSH
23339: CALL_OW 263
23343: PUSH
23344: LD_INT 1
23346: EQUAL
23347: IFFALSE 23382
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23349: LD_ADDR_VAR 0 10
23353: PUSH
23354: LD_VAR 0 10
23358: PUSH
23359: LD_VAR 0 6
23363: PPUSH
23364: CALL_OW 311
23368: PPUSH
23369: LD_INT 3
23371: PPUSH
23372: CALL_OW 259
23376: PUSH
23377: LD_INT 4
23379: MUL
23380: MUL
23381: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23382: LD_VAR 0 6
23386: PPUSH
23387: CALL_OW 263
23391: PUSH
23392: LD_INT 2
23394: EQUAL
23395: IFFALSE 23446
// begin j := IsControledBy ( i ) ;
23397: LD_ADDR_VAR 0 7
23401: PUSH
23402: LD_VAR 0 6
23406: PPUSH
23407: CALL_OW 312
23411: ST_TO_ADDR
// if j then
23412: LD_VAR 0 7
23416: IFFALSE 23446
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23418: LD_ADDR_VAR 0 10
23422: PUSH
23423: LD_VAR 0 10
23427: PUSH
23428: LD_VAR 0 7
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: CALL_OW 259
23440: PUSH
23441: LD_INT 3
23443: MUL
23444: MUL
23445: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23446: LD_VAR 0 6
23450: PPUSH
23451: CALL_OW 264
23455: PUSH
23456: LD_INT 5
23458: PUSH
23459: LD_INT 6
23461: PUSH
23462: LD_INT 46
23464: PUSH
23465: LD_INT 44
23467: PUSH
23468: LD_INT 47
23470: PUSH
23471: LD_INT 45
23473: PUSH
23474: LD_INT 28
23476: PUSH
23477: LD_INT 7
23479: PUSH
23480: LD_INT 27
23482: PUSH
23483: LD_INT 29
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: IN
23498: IFFALSE 23518
23500: PUSH
23501: LD_VAR 0 1
23505: PPUSH
23506: LD_INT 52
23508: PPUSH
23509: CALL_OW 321
23513: PUSH
23514: LD_INT 2
23516: EQUAL
23517: AND
23518: IFFALSE 23535
// bpoints := bpoints * 1.2 ;
23520: LD_ADDR_VAR 0 10
23524: PUSH
23525: LD_VAR 0 10
23529: PUSH
23530: LD_REAL  1.20000000000000E+0000
23533: MUL
23534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23535: LD_VAR 0 6
23539: PPUSH
23540: CALL_OW 264
23544: PUSH
23545: LD_INT 6
23547: PUSH
23548: LD_INT 46
23550: PUSH
23551: LD_INT 47
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: LIST
23558: IN
23559: IFFALSE 23576
// bpoints := bpoints * 1.2 ;
23561: LD_ADDR_VAR 0 10
23565: PUSH
23566: LD_VAR 0 10
23570: PUSH
23571: LD_REAL  1.20000000000000E+0000
23574: MUL
23575: ST_TO_ADDR
// end ; unit_building :
23576: GO 23590
23578: LD_INT 3
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23589
23586: POP
// ; end ;
23587: GO 23590
23589: POP
// for j = 1 to 3 do
23590: LD_ADDR_VAR 0 7
23594: PUSH
23595: DOUBLE
23596: LD_INT 1
23598: DEC
23599: ST_TO_ADDR
23600: LD_INT 3
23602: PUSH
23603: FOR_TO
23604: IFFALSE 23657
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23606: LD_ADDR_VAR 0 5
23610: PUSH
23611: LD_VAR 0 5
23615: PPUSH
23616: LD_VAR 0 7
23620: PPUSH
23621: LD_VAR 0 5
23625: PUSH
23626: LD_VAR 0 7
23630: ARRAY
23631: PUSH
23632: LD_VAR 0 9
23636: PUSH
23637: LD_VAR 0 7
23641: ARRAY
23642: PUSH
23643: LD_VAR 0 10
23647: MUL
23648: PLUS
23649: PPUSH
23650: CALL_OW 1
23654: ST_TO_ADDR
23655: GO 23603
23657: POP
23658: POP
// end ;
23659: GO 22132
23661: POP
23662: POP
// result := Replace ( result , 4 , tmp ) ;
23663: LD_ADDR_VAR 0 5
23667: PUSH
23668: LD_VAR 0 5
23672: PPUSH
23673: LD_INT 4
23675: PPUSH
23676: LD_VAR 0 8
23680: PPUSH
23681: CALL_OW 1
23685: ST_TO_ADDR
// end ;
23686: LD_VAR 0 5
23690: RET
// export function DangerAtRange ( unit , range ) ; begin
23691: LD_INT 0
23693: PPUSH
// if not unit then
23694: LD_VAR 0 1
23698: NOT
23699: IFFALSE 23703
// exit ;
23701: GO 23748
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23703: LD_ADDR_VAR 0 3
23707: PUSH
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 255
23717: PPUSH
23718: LD_VAR 0 1
23722: PPUSH
23723: CALL_OW 250
23727: PPUSH
23728: LD_VAR 0 1
23732: PPUSH
23733: CALL_OW 251
23737: PPUSH
23738: LD_VAR 0 2
23742: PPUSH
23743: CALL 21982 0 4
23747: ST_TO_ADDR
// end ;
23748: LD_VAR 0 3
23752: RET
// export function DangerInArea ( side , area ) ; begin
23753: LD_INT 0
23755: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23756: LD_ADDR_VAR 0 3
23760: PUSH
23761: LD_VAR 0 2
23765: PPUSH
23766: LD_INT 81
23768: PUSH
23769: LD_VAR 0 1
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PPUSH
23778: CALL_OW 70
23782: ST_TO_ADDR
// end ;
23783: LD_VAR 0 3
23787: RET
// export function IsExtension ( b ) ; begin
23788: LD_INT 0
23790: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23791: LD_ADDR_VAR 0 2
23795: PUSH
23796: LD_VAR 0 1
23800: PUSH
23801: LD_INT 23
23803: PUSH
23804: LD_INT 20
23806: PUSH
23807: LD_INT 22
23809: PUSH
23810: LD_INT 17
23812: PUSH
23813: LD_INT 24
23815: PUSH
23816: LD_INT 21
23818: PUSH
23819: LD_INT 19
23821: PUSH
23822: LD_INT 16
23824: PUSH
23825: LD_INT 25
23827: PUSH
23828: LD_INT 18
23830: PUSH
23831: EMPTY
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: IN
23843: ST_TO_ADDR
// end ;
23844: LD_VAR 0 2
23848: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23849: LD_INT 0
23851: PPUSH
23852: PPUSH
23853: PPUSH
// result := [ ] ;
23854: LD_ADDR_VAR 0 4
23858: PUSH
23859: EMPTY
23860: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23861: LD_ADDR_VAR 0 5
23865: PUSH
23866: LD_VAR 0 2
23870: PPUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 3
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PPUSH
23881: CALL_OW 70
23885: ST_TO_ADDR
// if not tmp then
23886: LD_VAR 0 5
23890: NOT
23891: IFFALSE 23895
// exit ;
23893: GO 23959
// if checkLink then
23895: LD_VAR 0 3
23899: IFFALSE 23949
// begin for i in tmp do
23901: LD_ADDR_VAR 0 6
23905: PUSH
23906: LD_VAR 0 5
23910: PUSH
23911: FOR_IN
23912: IFFALSE 23947
// if GetBase ( i ) <> base then
23914: LD_VAR 0 6
23918: PPUSH
23919: CALL_OW 274
23923: PUSH
23924: LD_VAR 0 1
23928: NONEQUAL
23929: IFFALSE 23945
// ComLinkToBase ( base , i ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_VAR 0 6
23940: PPUSH
23941: CALL_OW 169
23945: GO 23911
23947: POP
23948: POP
// end ; result := tmp ;
23949: LD_ADDR_VAR 0 4
23953: PUSH
23954: LD_VAR 0 5
23958: ST_TO_ADDR
// end ;
23959: LD_VAR 0 4
23963: RET
// export function ComComplete ( units , b ) ; var i ; begin
23964: LD_INT 0
23966: PPUSH
23967: PPUSH
// if not units then
23968: LD_VAR 0 1
23972: NOT
23973: IFFALSE 23977
// exit ;
23975: GO 24067
// for i in units do
23977: LD_ADDR_VAR 0 4
23981: PUSH
23982: LD_VAR 0 1
23986: PUSH
23987: FOR_IN
23988: IFFALSE 24065
// if BuildingStatus ( b ) = bs_build then
23990: LD_VAR 0 2
23994: PPUSH
23995: CALL_OW 461
23999: PUSH
24000: LD_INT 1
24002: EQUAL
24003: IFFALSE 24063
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24005: LD_VAR 0 4
24009: PPUSH
24010: LD_STRING h
24012: PUSH
24013: LD_VAR 0 2
24017: PPUSH
24018: CALL_OW 250
24022: PUSH
24023: LD_VAR 0 2
24027: PPUSH
24028: CALL_OW 251
24032: PUSH
24033: LD_VAR 0 2
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: LD_INT 0
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: PPUSH
24059: CALL_OW 446
24063: GO 23987
24065: POP
24066: POP
// end ;
24067: LD_VAR 0 3
24071: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24072: LD_INT 0
24074: PPUSH
24075: PPUSH
24076: PPUSH
24077: PPUSH
24078: PPUSH
24079: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24080: LD_VAR 0 1
24084: NOT
24085: IFTRUE 24102
24087: PUSH
24088: LD_VAR 0 1
24092: PPUSH
24093: CALL_OW 263
24097: PUSH
24098: LD_INT 2
24100: NONEQUAL
24101: OR
24102: IFFALSE 24106
// exit ;
24104: GO 24422
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24106: LD_ADDR_VAR 0 6
24110: PUSH
24111: LD_INT 22
24113: PUSH
24114: LD_VAR 0 1
24118: PPUSH
24119: CALL_OW 255
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 30
24133: PUSH
24134: LD_INT 36
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 34
24143: PUSH
24144: LD_INT 31
24146: PUSH
24147: EMPTY
24148: LIST
24149: LIST
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: LIST
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PPUSH
24160: CALL_OW 69
24164: ST_TO_ADDR
// if not tmp then
24165: LD_VAR 0 6
24169: NOT
24170: IFFALSE 24174
// exit ;
24172: GO 24422
// result := [ ] ;
24174: LD_ADDR_VAR 0 2
24178: PUSH
24179: EMPTY
24180: ST_TO_ADDR
// for i in tmp do
24181: LD_ADDR_VAR 0 3
24185: PUSH
24186: LD_VAR 0 6
24190: PUSH
24191: FOR_IN
24192: IFFALSE 24263
// begin t := UnitsInside ( i ) ;
24194: LD_ADDR_VAR 0 4
24198: PUSH
24199: LD_VAR 0 3
24203: PPUSH
24204: CALL_OW 313
24208: ST_TO_ADDR
// if t then
24209: LD_VAR 0 4
24213: IFFALSE 24261
// for j in t do
24215: LD_ADDR_VAR 0 7
24219: PUSH
24220: LD_VAR 0 4
24224: PUSH
24225: FOR_IN
24226: IFFALSE 24259
// result := Replace ( result , result + 1 , j ) ;
24228: LD_ADDR_VAR 0 2
24232: PUSH
24233: LD_VAR 0 2
24237: PPUSH
24238: LD_VAR 0 2
24242: PUSH
24243: LD_INT 1
24245: PLUS
24246: PPUSH
24247: LD_VAR 0 7
24251: PPUSH
24252: CALL_OW 1
24256: ST_TO_ADDR
24257: GO 24225
24259: POP
24260: POP
// end ;
24261: GO 24191
24263: POP
24264: POP
// if not result then
24265: LD_VAR 0 2
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 24422
// mech := result [ 1 ] ;
24274: LD_ADDR_VAR 0 5
24278: PUSH
24279: LD_VAR 0 2
24283: PUSH
24284: LD_INT 1
24286: ARRAY
24287: ST_TO_ADDR
// if result > 1 then
24288: LD_VAR 0 2
24292: PUSH
24293: LD_INT 1
24295: GREATER
24296: IFFALSE 24408
// begin for i = 2 to result do
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: DOUBLE
24304: LD_INT 2
24306: DEC
24307: ST_TO_ADDR
24308: LD_VAR 0 2
24312: PUSH
24313: FOR_TO
24314: IFFALSE 24406
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24316: LD_ADDR_VAR 0 4
24320: PUSH
24321: LD_VAR 0 2
24325: PUSH
24326: LD_VAR 0 3
24330: ARRAY
24331: PPUSH
24332: LD_INT 3
24334: PPUSH
24335: CALL_OW 259
24339: PUSH
24340: LD_VAR 0 2
24344: PUSH
24345: LD_VAR 0 3
24349: ARRAY
24350: PPUSH
24351: CALL_OW 432
24355: MINUS
24356: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24357: LD_VAR 0 4
24361: PUSH
24362: LD_VAR 0 5
24366: PPUSH
24367: LD_INT 3
24369: PPUSH
24370: CALL_OW 259
24374: PUSH
24375: LD_VAR 0 5
24379: PPUSH
24380: CALL_OW 432
24384: MINUS
24385: GREATEREQUAL
24386: IFFALSE 24404
// mech := result [ i ] ;
24388: LD_ADDR_VAR 0 5
24392: PUSH
24393: LD_VAR 0 2
24397: PUSH
24398: LD_VAR 0 3
24402: ARRAY
24403: ST_TO_ADDR
// end ;
24404: GO 24313
24406: POP
24407: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24408: LD_VAR 0 1
24412: PPUSH
24413: LD_VAR 0 5
24417: PPUSH
24418: CALL_OW 135
// end ;
24422: LD_VAR 0 2
24426: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24427: LD_INT 0
24429: PPUSH
24430: PPUSH
24431: PPUSH
24432: PPUSH
24433: PPUSH
24434: PPUSH
24435: PPUSH
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
24440: PPUSH
24441: PPUSH
// result := [ ] ;
24442: LD_ADDR_VAR 0 7
24446: PUSH
24447: EMPTY
24448: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24449: LD_VAR 0 1
24453: PPUSH
24454: CALL_OW 266
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: LD_INT 1
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: IN
24469: NOT
24470: IFFALSE 24474
// exit ;
24472: GO 26114
// if name then
24474: LD_VAR 0 3
24478: IFFALSE 24494
// SetBName ( base_dep , name ) ;
24480: LD_VAR 0 1
24484: PPUSH
24485: LD_VAR 0 3
24489: PPUSH
24490: CALL_OW 500
// base := GetBase ( base_dep ) ;
24494: LD_ADDR_VAR 0 15
24498: PUSH
24499: LD_VAR 0 1
24503: PPUSH
24504: CALL_OW 274
24508: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24509: LD_ADDR_VAR 0 16
24513: PUSH
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 255
24523: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24524: LD_ADDR_VAR 0 17
24528: PUSH
24529: LD_VAR 0 1
24533: PPUSH
24534: CALL_OW 248
24538: ST_TO_ADDR
// if sources then
24539: LD_VAR 0 5
24543: IFFALSE 24590
// for i = 1 to 3 do
24545: LD_ADDR_VAR 0 8
24549: PUSH
24550: DOUBLE
24551: LD_INT 1
24553: DEC
24554: ST_TO_ADDR
24555: LD_INT 3
24557: PUSH
24558: FOR_TO
24559: IFFALSE 24588
// AddResourceType ( base , i , sources [ i ] ) ;
24561: LD_VAR 0 15
24565: PPUSH
24566: LD_VAR 0 8
24570: PPUSH
24571: LD_VAR 0 5
24575: PUSH
24576: LD_VAR 0 8
24580: ARRAY
24581: PPUSH
24582: CALL_OW 276
24586: GO 24558
24588: POP
24589: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24590: LD_ADDR_VAR 0 18
24594: PUSH
24595: LD_VAR 0 15
24599: PPUSH
24600: LD_VAR 0 2
24604: PPUSH
24605: LD_INT 1
24607: PPUSH
24608: CALL 23849 0 3
24612: ST_TO_ADDR
// InitHc ;
24613: CALL_OW 19
// InitUc ;
24617: CALL_OW 18
// uc_side := side ;
24621: LD_ADDR_OWVAR 20
24625: PUSH
24626: LD_VAR 0 16
24630: ST_TO_ADDR
// uc_nation := nation ;
24631: LD_ADDR_OWVAR 21
24635: PUSH
24636: LD_VAR 0 17
24640: ST_TO_ADDR
// if buildings then
24641: LD_VAR 0 18
24645: IFFALSE 25973
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24647: LD_ADDR_VAR 0 19
24651: PUSH
24652: LD_VAR 0 18
24656: PPUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 30
24662: PUSH
24663: LD_INT 29
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 30
24672: PUSH
24673: LD_INT 30
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PPUSH
24685: CALL_OW 72
24689: ST_TO_ADDR
// if tmp then
24690: LD_VAR 0 19
24694: IFFALSE 24742
// for i in tmp do
24696: LD_ADDR_VAR 0 8
24700: PUSH
24701: LD_VAR 0 19
24705: PUSH
24706: FOR_IN
24707: IFFALSE 24740
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24709: LD_VAR 0 8
24713: PPUSH
24714: CALL_OW 250
24718: PPUSH
24719: LD_VAR 0 8
24723: PPUSH
24724: CALL_OW 251
24728: PPUSH
24729: LD_VAR 0 16
24733: PPUSH
24734: CALL_OW 441
24738: GO 24706
24740: POP
24741: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24742: LD_VAR 0 18
24746: PPUSH
24747: LD_INT 2
24749: PUSH
24750: LD_INT 30
24752: PUSH
24753: LD_INT 32
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 30
24762: PUSH
24763: LD_INT 33
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: LIST
24774: PPUSH
24775: CALL_OW 72
24779: IFFALSE 24867
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24781: LD_ADDR_VAR 0 8
24785: PUSH
24786: LD_VAR 0 18
24790: PPUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 30
24796: PUSH
24797: LD_INT 32
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 30
24806: PUSH
24807: LD_INT 33
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: PPUSH
24819: CALL_OW 72
24823: PUSH
24824: FOR_IN
24825: IFFALSE 24865
// begin if not GetBWeapon ( i ) then
24827: LD_VAR 0 8
24831: PPUSH
24832: CALL_OW 269
24836: NOT
24837: IFFALSE 24863
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24839: LD_VAR 0 8
24843: PPUSH
24844: LD_VAR 0 8
24848: PPUSH
24849: LD_VAR 0 2
24853: PPUSH
24854: CALL 26119 0 2
24858: PPUSH
24859: CALL_OW 431
// end ;
24863: GO 24824
24865: POP
24866: POP
// end ; for i = 1 to personel do
24867: LD_ADDR_VAR 0 8
24871: PUSH
24872: DOUBLE
24873: LD_INT 1
24875: DEC
24876: ST_TO_ADDR
24877: LD_VAR 0 6
24881: PUSH
24882: FOR_TO
24883: IFFALSE 25953
// begin if i > 4 then
24885: LD_VAR 0 8
24889: PUSH
24890: LD_INT 4
24892: GREATER
24893: IFFALSE 24897
// break ;
24895: GO 25953
// case i of 1 :
24897: LD_VAR 0 8
24901: PUSH
24902: LD_INT 1
24904: DOUBLE
24905: EQUAL
24906: IFTRUE 24910
24908: GO 24990
24910: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24911: LD_ADDR_VAR 0 12
24915: PUSH
24916: LD_VAR 0 18
24920: PPUSH
24921: LD_INT 22
24923: PUSH
24924: LD_VAR 0 16
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 58
24935: PUSH
24936: EMPTY
24937: LIST
24938: PUSH
24939: LD_INT 2
24941: PUSH
24942: LD_INT 30
24944: PUSH
24945: LD_INT 32
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 30
24954: PUSH
24955: LD_INT 4
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 30
24964: PUSH
24965: LD_INT 5
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: PPUSH
24983: CALL_OW 72
24987: ST_TO_ADDR
24988: GO 25212
24990: LD_INT 2
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25060
24998: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24999: LD_ADDR_VAR 0 12
25003: PUSH
25004: LD_VAR 0 18
25008: PPUSH
25009: LD_INT 22
25011: PUSH
25012: LD_VAR 0 16
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 2
25023: PUSH
25024: LD_INT 30
25026: PUSH
25027: LD_INT 0
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: LD_INT 30
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PPUSH
25053: CALL_OW 72
25057: ST_TO_ADDR
25058: GO 25212
25060: LD_INT 3
25062: DOUBLE
25063: EQUAL
25064: IFTRUE 25068
25066: GO 25130
25068: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25069: LD_ADDR_VAR 0 12
25073: PUSH
25074: LD_VAR 0 18
25078: PPUSH
25079: LD_INT 22
25081: PUSH
25082: LD_VAR 0 16
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: PUSH
25091: LD_INT 2
25093: PUSH
25094: LD_INT 30
25096: PUSH
25097: LD_INT 2
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 30
25106: PUSH
25107: LD_INT 3
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: LIST
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PPUSH
25123: CALL_OW 72
25127: ST_TO_ADDR
25128: GO 25212
25130: LD_INT 4
25132: DOUBLE
25133: EQUAL
25134: IFTRUE 25138
25136: GO 25211
25138: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25139: LD_ADDR_VAR 0 12
25143: PUSH
25144: LD_VAR 0 18
25148: PPUSH
25149: LD_INT 22
25151: PUSH
25152: LD_VAR 0 16
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 30
25166: PUSH
25167: LD_INT 6
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 30
25176: PUSH
25177: LD_INT 7
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 30
25186: PUSH
25187: LD_INT 8
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PPUSH
25204: CALL_OW 72
25208: ST_TO_ADDR
25209: GO 25212
25211: POP
// if i = 1 then
25212: LD_VAR 0 8
25216: PUSH
25217: LD_INT 1
25219: EQUAL
25220: IFFALSE 25331
// begin tmp := [ ] ;
25222: LD_ADDR_VAR 0 19
25226: PUSH
25227: EMPTY
25228: ST_TO_ADDR
// for j in f do
25229: LD_ADDR_VAR 0 9
25233: PUSH
25234: LD_VAR 0 12
25238: PUSH
25239: FOR_IN
25240: IFFALSE 25313
// if GetBType ( j ) = b_bunker then
25242: LD_VAR 0 9
25246: PPUSH
25247: CALL_OW 266
25251: PUSH
25252: LD_INT 32
25254: EQUAL
25255: IFFALSE 25282
// tmp := Insert ( tmp , 1 , j ) else
25257: LD_ADDR_VAR 0 19
25261: PUSH
25262: LD_VAR 0 19
25266: PPUSH
25267: LD_INT 1
25269: PPUSH
25270: LD_VAR 0 9
25274: PPUSH
25275: CALL_OW 2
25279: ST_TO_ADDR
25280: GO 25311
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25282: LD_ADDR_VAR 0 19
25286: PUSH
25287: LD_VAR 0 19
25291: PPUSH
25292: LD_VAR 0 19
25296: PUSH
25297: LD_INT 1
25299: PLUS
25300: PPUSH
25301: LD_VAR 0 9
25305: PPUSH
25306: CALL_OW 2
25310: ST_TO_ADDR
25311: GO 25239
25313: POP
25314: POP
// if tmp then
25315: LD_VAR 0 19
25319: IFFALSE 25331
// f := tmp ;
25321: LD_ADDR_VAR 0 12
25325: PUSH
25326: LD_VAR 0 19
25330: ST_TO_ADDR
// end ; x := personel [ i ] ;
25331: LD_ADDR_VAR 0 13
25335: PUSH
25336: LD_VAR 0 6
25340: PUSH
25341: LD_VAR 0 8
25345: ARRAY
25346: ST_TO_ADDR
// if x = - 1 then
25347: LD_VAR 0 13
25351: PUSH
25352: LD_INT 1
25354: NEG
25355: EQUAL
25356: IFFALSE 25567
// begin for j in f do
25358: LD_ADDR_VAR 0 9
25362: PUSH
25363: LD_VAR 0 12
25367: PUSH
25368: FOR_IN
25369: IFFALSE 25563
// repeat InitHc ;
25371: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25375: LD_VAR 0 9
25379: PPUSH
25380: CALL_OW 266
25384: PUSH
25385: LD_INT 5
25387: EQUAL
25388: IFFALSE 25458
// begin if UnitsInside ( j ) < 3 then
25390: LD_VAR 0 9
25394: PPUSH
25395: CALL_OW 313
25399: PUSH
25400: LD_INT 3
25402: LESS
25403: IFFALSE 25439
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25405: LD_INT 0
25407: PPUSH
25408: LD_INT 5
25410: PUSH
25411: LD_INT 8
25413: PUSH
25414: LD_INT 9
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: PUSH
25422: LD_VAR 0 17
25426: ARRAY
25427: PPUSH
25428: LD_VAR 0 4
25432: PPUSH
25433: CALL_OW 380
25437: GO 25456
// PrepareHuman ( false , i , skill ) ;
25439: LD_INT 0
25441: PPUSH
25442: LD_VAR 0 8
25446: PPUSH
25447: LD_VAR 0 4
25451: PPUSH
25452: CALL_OW 380
// end else
25456: GO 25475
// PrepareHuman ( false , i , skill ) ;
25458: LD_INT 0
25460: PPUSH
25461: LD_VAR 0 8
25465: PPUSH
25466: LD_VAR 0 4
25470: PPUSH
25471: CALL_OW 380
// un := CreateHuman ;
25475: LD_ADDR_VAR 0 14
25479: PUSH
25480: CALL_OW 44
25484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25485: LD_ADDR_VAR 0 7
25489: PUSH
25490: LD_VAR 0 7
25494: PPUSH
25495: LD_INT 1
25497: PPUSH
25498: LD_VAR 0 14
25502: PPUSH
25503: CALL_OW 2
25507: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25508: LD_VAR 0 14
25512: PPUSH
25513: LD_VAR 0 9
25517: PPUSH
25518: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25522: LD_VAR 0 9
25526: PPUSH
25527: CALL_OW 313
25531: PUSH
25532: LD_INT 6
25534: EQUAL
25535: IFTRUE 25559
25537: PUSH
25538: LD_VAR 0 9
25542: PPUSH
25543: CALL_OW 266
25547: PUSH
25548: LD_INT 32
25550: PUSH
25551: LD_INT 31
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: IN
25558: OR
25559: IFFALSE 25371
25561: GO 25368
25563: POP
25564: POP
// end else
25565: GO 25951
// for j = 1 to x do
25567: LD_ADDR_VAR 0 9
25571: PUSH
25572: DOUBLE
25573: LD_INT 1
25575: DEC
25576: ST_TO_ADDR
25577: LD_VAR 0 13
25581: PUSH
25582: FOR_TO
25583: IFFALSE 25949
// begin InitHc ;
25585: CALL_OW 19
// if not f then
25589: LD_VAR 0 12
25593: NOT
25594: IFFALSE 25683
// begin PrepareHuman ( false , i , skill ) ;
25596: LD_INT 0
25598: PPUSH
25599: LD_VAR 0 8
25603: PPUSH
25604: LD_VAR 0 4
25608: PPUSH
25609: CALL_OW 380
// un := CreateHuman ;
25613: LD_ADDR_VAR 0 14
25617: PUSH
25618: CALL_OW 44
25622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25623: LD_ADDR_VAR 0 7
25627: PUSH
25628: LD_VAR 0 7
25632: PPUSH
25633: LD_INT 1
25635: PPUSH
25636: LD_VAR 0 14
25640: PPUSH
25641: CALL_OW 2
25645: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25646: LD_VAR 0 14
25650: PPUSH
25651: LD_VAR 0 1
25655: PPUSH
25656: CALL_OW 250
25660: PPUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: CALL_OW 251
25670: PPUSH
25671: LD_INT 10
25673: PPUSH
25674: LD_INT 0
25676: PPUSH
25677: CALL_OW 50
// continue ;
25681: GO 25582
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25683: LD_VAR 0 12
25687: PUSH
25688: LD_INT 1
25690: ARRAY
25691: PPUSH
25692: CALL_OW 313
25696: IFFALSE 25724
25698: PUSH
25699: LD_VAR 0 12
25703: PUSH
25704: LD_INT 1
25706: ARRAY
25707: PPUSH
25708: CALL_OW 266
25712: PUSH
25713: LD_INT 32
25715: PUSH
25716: LD_INT 31
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: IN
25723: AND
25724: IFTRUE 25745
25726: PUSH
25727: LD_VAR 0 12
25731: PUSH
25732: LD_INT 1
25734: ARRAY
25735: PPUSH
25736: CALL_OW 313
25740: PUSH
25741: LD_INT 6
25743: EQUAL
25744: OR
25745: IFFALSE 25765
// f := Delete ( f , 1 ) ;
25747: LD_ADDR_VAR 0 12
25751: PUSH
25752: LD_VAR 0 12
25756: PPUSH
25757: LD_INT 1
25759: PPUSH
25760: CALL_OW 3
25764: ST_TO_ADDR
// if not f then
25765: LD_VAR 0 12
25769: NOT
25770: IFFALSE 25788
// begin x := x + 2 ;
25772: LD_ADDR_VAR 0 13
25776: PUSH
25777: LD_VAR 0 13
25781: PUSH
25782: LD_INT 2
25784: PLUS
25785: ST_TO_ADDR
// continue ;
25786: GO 25582
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25788: LD_VAR 0 12
25792: PUSH
25793: LD_INT 1
25795: ARRAY
25796: PPUSH
25797: CALL_OW 266
25801: PUSH
25802: LD_INT 5
25804: EQUAL
25805: IFFALSE 25879
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25807: LD_VAR 0 12
25811: PUSH
25812: LD_INT 1
25814: ARRAY
25815: PPUSH
25816: CALL_OW 313
25820: PUSH
25821: LD_INT 3
25823: LESS
25824: IFFALSE 25860
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25826: LD_INT 0
25828: PPUSH
25829: LD_INT 5
25831: PUSH
25832: LD_INT 8
25834: PUSH
25835: LD_INT 9
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: LIST
25842: PUSH
25843: LD_VAR 0 17
25847: ARRAY
25848: PPUSH
25849: LD_VAR 0 4
25853: PPUSH
25854: CALL_OW 380
25858: GO 25877
// PrepareHuman ( false , i , skill ) ;
25860: LD_INT 0
25862: PPUSH
25863: LD_VAR 0 8
25867: PPUSH
25868: LD_VAR 0 4
25872: PPUSH
25873: CALL_OW 380
// end else
25877: GO 25896
// PrepareHuman ( false , i , skill ) ;
25879: LD_INT 0
25881: PPUSH
25882: LD_VAR 0 8
25886: PPUSH
25887: LD_VAR 0 4
25891: PPUSH
25892: CALL_OW 380
// un := CreateHuman ;
25896: LD_ADDR_VAR 0 14
25900: PUSH
25901: CALL_OW 44
25905: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25906: LD_ADDR_VAR 0 7
25910: PUSH
25911: LD_VAR 0 7
25915: PPUSH
25916: LD_INT 1
25918: PPUSH
25919: LD_VAR 0 14
25923: PPUSH
25924: CALL_OW 2
25928: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25929: LD_VAR 0 14
25933: PPUSH
25934: LD_VAR 0 12
25938: PUSH
25939: LD_INT 1
25941: ARRAY
25942: PPUSH
25943: CALL_OW 52
// end ;
25947: GO 25582
25949: POP
25950: POP
// end ;
25951: GO 24882
25953: POP
25954: POP
// result := result ^ buildings ;
25955: LD_ADDR_VAR 0 7
25959: PUSH
25960: LD_VAR 0 7
25964: PUSH
25965: LD_VAR 0 18
25969: ADD
25970: ST_TO_ADDR
// end else
25971: GO 26114
// begin for i = 1 to personel do
25973: LD_ADDR_VAR 0 8
25977: PUSH
25978: DOUBLE
25979: LD_INT 1
25981: DEC
25982: ST_TO_ADDR
25983: LD_VAR 0 6
25987: PUSH
25988: FOR_TO
25989: IFFALSE 26112
// begin if i > 4 then
25991: LD_VAR 0 8
25995: PUSH
25996: LD_INT 4
25998: GREATER
25999: IFFALSE 26003
// break ;
26001: GO 26112
// x := personel [ i ] ;
26003: LD_ADDR_VAR 0 13
26007: PUSH
26008: LD_VAR 0 6
26012: PUSH
26013: LD_VAR 0 8
26017: ARRAY
26018: ST_TO_ADDR
// if x = - 1 then
26019: LD_VAR 0 13
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: EQUAL
26028: IFFALSE 26032
// continue ;
26030: GO 25988
// PrepareHuman ( false , i , skill ) ;
26032: LD_INT 0
26034: PPUSH
26035: LD_VAR 0 8
26039: PPUSH
26040: LD_VAR 0 4
26044: PPUSH
26045: CALL_OW 380
// un := CreateHuman ;
26049: LD_ADDR_VAR 0 14
26053: PUSH
26054: CALL_OW 44
26058: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26059: LD_VAR 0 14
26063: PPUSH
26064: LD_VAR 0 1
26068: PPUSH
26069: CALL_OW 250
26073: PPUSH
26074: LD_VAR 0 1
26078: PPUSH
26079: CALL_OW 251
26083: PPUSH
26084: LD_INT 10
26086: PPUSH
26087: LD_INT 0
26089: PPUSH
26090: CALL_OW 50
// result := result ^ un ;
26094: LD_ADDR_VAR 0 7
26098: PUSH
26099: LD_VAR 0 7
26103: PUSH
26104: LD_VAR 0 14
26108: ADD
26109: ST_TO_ADDR
// end ;
26110: GO 25988
26112: POP
26113: POP
// end ; end ;
26114: LD_VAR 0 7
26118: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26119: LD_INT 0
26121: PPUSH
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
26135: PPUSH
26136: PPUSH
// result := false ;
26137: LD_ADDR_VAR 0 3
26141: PUSH
26142: LD_INT 0
26144: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26145: LD_VAR 0 1
26149: NOT
26150: IFTRUE 26175
26152: PUSH
26153: LD_VAR 0 1
26157: PPUSH
26158: CALL_OW 266
26162: PUSH
26163: LD_INT 32
26165: PUSH
26166: LD_INT 33
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: IN
26173: NOT
26174: OR
26175: IFFALSE 26179
// exit ;
26177: GO 27314
// nat := GetNation ( tower ) ;
26179: LD_ADDR_VAR 0 12
26183: PUSH
26184: LD_VAR 0 1
26188: PPUSH
26189: CALL_OW 248
26193: ST_TO_ADDR
// side := GetSide ( tower ) ;
26194: LD_ADDR_VAR 0 16
26198: PUSH
26199: LD_VAR 0 1
26203: PPUSH
26204: CALL_OW 255
26208: ST_TO_ADDR
// x := GetX ( tower ) ;
26209: LD_ADDR_VAR 0 10
26213: PUSH
26214: LD_VAR 0 1
26218: PPUSH
26219: CALL_OW 250
26223: ST_TO_ADDR
// y := GetY ( tower ) ;
26224: LD_ADDR_VAR 0 11
26228: PUSH
26229: LD_VAR 0 1
26233: PPUSH
26234: CALL_OW 251
26238: ST_TO_ADDR
// if not x or not y then
26239: LD_VAR 0 10
26243: NOT
26244: IFTRUE 26253
26246: PUSH
26247: LD_VAR 0 11
26251: NOT
26252: OR
26253: IFFALSE 26257
// exit ;
26255: GO 27314
// weapon := 0 ;
26257: LD_ADDR_VAR 0 18
26261: PUSH
26262: LD_INT 0
26264: ST_TO_ADDR
// fac_list := [ ] ;
26265: LD_ADDR_VAR 0 17
26269: PUSH
26270: EMPTY
26271: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26272: LD_ADDR_VAR 0 6
26276: PUSH
26277: LD_VAR 0 1
26281: PPUSH
26282: CALL_OW 274
26286: PPUSH
26287: LD_VAR 0 2
26291: PPUSH
26292: LD_INT 0
26294: PPUSH
26295: CALL 23849 0 3
26299: PPUSH
26300: LD_INT 30
26302: PUSH
26303: LD_INT 3
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PPUSH
26310: CALL_OW 72
26314: ST_TO_ADDR
// if not factories then
26315: LD_VAR 0 6
26319: NOT
26320: IFFALSE 26324
// exit ;
26322: GO 27314
// for i in factories do
26324: LD_ADDR_VAR 0 8
26328: PUSH
26329: LD_VAR 0 6
26333: PUSH
26334: FOR_IN
26335: IFFALSE 26360
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26337: LD_ADDR_VAR 0 17
26341: PUSH
26342: LD_VAR 0 17
26346: PUSH
26347: LD_VAR 0 8
26351: PPUSH
26352: CALL_OW 478
26356: UNION
26357: ST_TO_ADDR
26358: GO 26334
26360: POP
26361: POP
// if not fac_list then
26362: LD_VAR 0 17
26366: NOT
26367: IFFALSE 26371
// exit ;
26369: GO 27314
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26371: LD_ADDR_VAR 0 5
26375: PUSH
26376: LD_INT 4
26378: PUSH
26379: LD_INT 5
26381: PUSH
26382: LD_INT 9
26384: PUSH
26385: LD_INT 10
26387: PUSH
26388: LD_INT 6
26390: PUSH
26391: LD_INT 7
26393: PUSH
26394: LD_INT 11
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 27
26408: PUSH
26409: LD_INT 28
26411: PUSH
26412: LD_INT 26
26414: PUSH
26415: LD_INT 30
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: PUSH
26424: LD_INT 43
26426: PUSH
26427: LD_INT 44
26429: PUSH
26430: LD_INT 46
26432: PUSH
26433: LD_INT 45
26435: PUSH
26436: LD_INT 47
26438: PUSH
26439: LD_INT 49
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: LIST
26446: LIST
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: PUSH
26455: LD_VAR 0 12
26459: ARRAY
26460: ST_TO_ADDR
// list := list isect fac_list ;
26461: LD_ADDR_VAR 0 5
26465: PUSH
26466: LD_VAR 0 5
26470: PUSH
26471: LD_VAR 0 17
26475: ISECT
26476: ST_TO_ADDR
// if not list then
26477: LD_VAR 0 5
26481: NOT
26482: IFFALSE 26486
// exit ;
26484: GO 27314
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26486: LD_VAR 0 12
26490: PUSH
26491: LD_INT 3
26493: EQUAL
26494: IFFALSE 26506
26496: PUSH
26497: LD_INT 49
26499: PUSH
26500: LD_VAR 0 5
26504: IN
26505: AND
26506: IFFALSE 26526
26508: PUSH
26509: LD_INT 31
26511: PPUSH
26512: LD_VAR 0 16
26516: PPUSH
26517: CALL_OW 321
26521: PUSH
26522: LD_INT 2
26524: EQUAL
26525: AND
26526: IFFALSE 26586
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26528: LD_INT 22
26530: PUSH
26531: LD_VAR 0 16
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 35
26542: PUSH
26543: LD_INT 49
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 91
26552: PUSH
26553: LD_VAR 0 1
26557: PUSH
26558: LD_INT 10
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: LIST
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: PPUSH
26571: CALL_OW 69
26575: NOT
26576: IFFALSE 26586
// weapon := ru_time_lapser ;
26578: LD_ADDR_VAR 0 18
26582: PUSH
26583: LD_INT 49
26585: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26586: LD_VAR 0 12
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: IN
26601: IFFALSE 26625
26603: PUSH
26604: LD_INT 11
26606: PUSH
26607: LD_VAR 0 5
26611: IN
26612: IFTRUE 26624
26614: PUSH
26615: LD_INT 30
26617: PUSH
26618: LD_VAR 0 5
26622: IN
26623: OR
26624: AND
26625: IFFALSE 26645
26627: PUSH
26628: LD_INT 6
26630: PPUSH
26631: LD_VAR 0 16
26635: PPUSH
26636: CALL_OW 321
26640: PUSH
26641: LD_INT 2
26643: EQUAL
26644: AND
26645: IFFALSE 26812
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26647: LD_INT 22
26649: PUSH
26650: LD_VAR 0 16
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: LD_INT 35
26664: PUSH
26665: LD_INT 11
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 35
26674: PUSH
26675: LD_INT 30
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: LIST
26686: PUSH
26687: LD_INT 91
26689: PUSH
26690: LD_VAR 0 1
26694: PUSH
26695: LD_INT 18
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: LIST
26707: PPUSH
26708: CALL_OW 69
26712: NOT
26713: IFFALSE 26789
26715: PUSH
26716: LD_INT 22
26718: PUSH
26719: LD_VAR 0 16
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: LD_INT 30
26733: PUSH
26734: LD_INT 32
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 30
26743: PUSH
26744: LD_INT 33
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 91
26758: PUSH
26759: LD_VAR 0 1
26763: PUSH
26764: LD_INT 12
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: PUSH
26777: EMPTY
26778: LIST
26779: PPUSH
26780: CALL_OW 69
26784: PUSH
26785: LD_INT 2
26787: GREATER
26788: AND
26789: IFFALSE 26812
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26791: LD_ADDR_VAR 0 18
26795: PUSH
26796: LD_INT 11
26798: PUSH
26799: LD_INT 30
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_VAR 0 12
26810: ARRAY
26811: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26812: LD_VAR 0 18
26816: NOT
26817: IFFALSE 26837
26819: PUSH
26820: LD_INT 40
26822: PPUSH
26823: LD_VAR 0 16
26827: PPUSH
26828: CALL_OW 321
26832: PUSH
26833: LD_INT 2
26835: EQUAL
26836: AND
26837: IFFALSE 26873
26839: PUSH
26840: LD_INT 7
26842: PUSH
26843: LD_VAR 0 5
26847: IN
26848: IFTRUE 26860
26850: PUSH
26851: LD_INT 28
26853: PUSH
26854: LD_VAR 0 5
26858: IN
26859: OR
26860: IFTRUE 26872
26862: PUSH
26863: LD_INT 45
26865: PUSH
26866: LD_VAR 0 5
26870: IN
26871: OR
26872: AND
26873: IFFALSE 27127
// begin hex := GetHexInfo ( x , y ) ;
26875: LD_ADDR_VAR 0 4
26879: PUSH
26880: LD_VAR 0 10
26884: PPUSH
26885: LD_VAR 0 11
26889: PPUSH
26890: CALL_OW 546
26894: ST_TO_ADDR
// if hex [ 1 ] then
26895: LD_VAR 0 4
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: IFFALSE 26907
// exit ;
26905: GO 27314
// height := hex [ 2 ] ;
26907: LD_ADDR_VAR 0 15
26911: PUSH
26912: LD_VAR 0 4
26916: PUSH
26917: LD_INT 2
26919: ARRAY
26920: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26921: LD_ADDR_VAR 0 14
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 2
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 5
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: ST_TO_ADDR
// for i in tmp do
26944: LD_ADDR_VAR 0 8
26948: PUSH
26949: LD_VAR 0 14
26953: PUSH
26954: FOR_IN
26955: IFFALSE 27125
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26957: LD_ADDR_VAR 0 9
26961: PUSH
26962: LD_VAR 0 10
26966: PPUSH
26967: LD_VAR 0 8
26971: PPUSH
26972: LD_INT 5
26974: PPUSH
26975: CALL_OW 272
26979: PUSH
26980: LD_VAR 0 11
26984: PPUSH
26985: LD_VAR 0 8
26989: PPUSH
26990: LD_INT 5
26992: PPUSH
26993: CALL_OW 273
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27002: LD_VAR 0 9
27006: PUSH
27007: LD_INT 1
27009: ARRAY
27010: PPUSH
27011: LD_VAR 0 9
27015: PUSH
27016: LD_INT 2
27018: ARRAY
27019: PPUSH
27020: CALL_OW 488
27024: IFFALSE 27123
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27026: LD_ADDR_VAR 0 4
27030: PUSH
27031: LD_VAR 0 9
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: LD_VAR 0 9
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: PPUSH
27049: CALL_OW 546
27053: ST_TO_ADDR
// if hex [ 1 ] then
27054: LD_VAR 0 4
27058: PUSH
27059: LD_INT 1
27061: ARRAY
27062: IFFALSE 27066
// continue ;
27064: GO 26954
// h := hex [ 2 ] ;
27066: LD_ADDR_VAR 0 13
27070: PUSH
27071: LD_VAR 0 4
27075: PUSH
27076: LD_INT 2
27078: ARRAY
27079: ST_TO_ADDR
// if h + 7 < height then
27080: LD_VAR 0 13
27084: PUSH
27085: LD_INT 7
27087: PLUS
27088: PUSH
27089: LD_VAR 0 15
27093: LESS
27094: IFFALSE 27123
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27096: LD_ADDR_VAR 0 18
27100: PUSH
27101: LD_INT 7
27103: PUSH
27104: LD_INT 28
27106: PUSH
27107: LD_INT 45
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: LIST
27114: PUSH
27115: LD_VAR 0 12
27119: ARRAY
27120: ST_TO_ADDR
// break ;
27121: GO 27125
// end ; end ; end ;
27123: GO 26954
27125: POP
27126: POP
// end ; if not weapon then
27127: LD_VAR 0 18
27131: NOT
27132: IFFALSE 27192
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27134: LD_ADDR_VAR 0 5
27138: PUSH
27139: LD_VAR 0 5
27143: PUSH
27144: LD_INT 11
27146: PUSH
27147: LD_INT 30
27149: PUSH
27150: LD_INT 49
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: DIFF
27158: ST_TO_ADDR
// if not list then
27159: LD_VAR 0 5
27163: NOT
27164: IFFALSE 27168
// exit ;
27166: GO 27314
// weapon := list [ rand ( 1 , list ) ] ;
27168: LD_ADDR_VAR 0 18
27172: PUSH
27173: LD_VAR 0 5
27177: PUSH
27178: LD_INT 1
27180: PPUSH
27181: LD_VAR 0 5
27185: PPUSH
27186: CALL_OW 12
27190: ARRAY
27191: ST_TO_ADDR
// end ; if weapon then
27192: LD_VAR 0 18
27196: IFFALSE 27314
// begin tmp := CostOfWeapon ( weapon ) ;
27198: LD_ADDR_VAR 0 14
27202: PUSH
27203: LD_VAR 0 18
27207: PPUSH
27208: CALL_OW 451
27212: ST_TO_ADDR
// j := GetBase ( tower ) ;
27213: LD_ADDR_VAR 0 9
27217: PUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: CALL_OW 274
27227: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27228: LD_VAR 0 9
27232: PPUSH
27233: LD_INT 1
27235: PPUSH
27236: CALL_OW 275
27240: PUSH
27241: LD_VAR 0 14
27245: PUSH
27246: LD_INT 1
27248: ARRAY
27249: GREATEREQUAL
27250: IFFALSE 27276
27252: PUSH
27253: LD_VAR 0 9
27257: PPUSH
27258: LD_INT 2
27260: PPUSH
27261: CALL_OW 275
27265: PUSH
27266: LD_VAR 0 14
27270: PUSH
27271: LD_INT 2
27273: ARRAY
27274: GREATEREQUAL
27275: AND
27276: IFFALSE 27302
27278: PUSH
27279: LD_VAR 0 9
27283: PPUSH
27284: LD_INT 3
27286: PPUSH
27287: CALL_OW 275
27291: PUSH
27292: LD_VAR 0 14
27296: PUSH
27297: LD_INT 3
27299: ARRAY
27300: GREATEREQUAL
27301: AND
27302: IFFALSE 27314
// result := weapon ;
27304: LD_ADDR_VAR 0 3
27308: PUSH
27309: LD_VAR 0 18
27313: ST_TO_ADDR
// end ; end ;
27314: LD_VAR 0 3
27318: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27319: LD_INT 0
27321: PPUSH
27322: PPUSH
// result := true ;
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: LD_INT 1
27330: ST_TO_ADDR
// if array1 = array2 then
27331: LD_VAR 0 1
27335: PUSH
27336: LD_VAR 0 2
27340: EQUAL
27341: IFFALSE 27401
// begin for i = 1 to array1 do
27343: LD_ADDR_VAR 0 4
27347: PUSH
27348: DOUBLE
27349: LD_INT 1
27351: DEC
27352: ST_TO_ADDR
27353: LD_VAR 0 1
27357: PUSH
27358: FOR_TO
27359: IFFALSE 27397
// if array1 [ i ] <> array2 [ i ] then
27361: LD_VAR 0 1
27365: PUSH
27366: LD_VAR 0 4
27370: ARRAY
27371: PUSH
27372: LD_VAR 0 2
27376: PUSH
27377: LD_VAR 0 4
27381: ARRAY
27382: NONEQUAL
27383: IFFALSE 27395
// begin result := false ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_INT 0
27392: ST_TO_ADDR
// break ;
27393: GO 27397
// end ;
27395: GO 27358
27397: POP
27398: POP
// end else
27399: GO 27409
// result := false ;
27401: LD_ADDR_VAR 0 3
27405: PUSH
27406: LD_INT 0
27408: ST_TO_ADDR
// end ;
27409: LD_VAR 0 3
27413: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27414: LD_INT 0
27416: PPUSH
27417: PPUSH
// if not array1 or not array2 then
27418: LD_VAR 0 1
27422: NOT
27423: IFTRUE 27432
27425: PUSH
27426: LD_VAR 0 2
27430: NOT
27431: OR
27432: IFFALSE 27436
// exit ;
27434: GO 27500
// result := true ;
27436: LD_ADDR_VAR 0 3
27440: PUSH
27441: LD_INT 1
27443: ST_TO_ADDR
// for i = 1 to array1 do
27444: LD_ADDR_VAR 0 4
27448: PUSH
27449: DOUBLE
27450: LD_INT 1
27452: DEC
27453: ST_TO_ADDR
27454: LD_VAR 0 1
27458: PUSH
27459: FOR_TO
27460: IFFALSE 27498
// if array1 [ i ] <> array2 [ i ] then
27462: LD_VAR 0 1
27466: PUSH
27467: LD_VAR 0 4
27471: ARRAY
27472: PUSH
27473: LD_VAR 0 2
27477: PUSH
27478: LD_VAR 0 4
27482: ARRAY
27483: NONEQUAL
27484: IFFALSE 27496
// begin result := false ;
27486: LD_ADDR_VAR 0 3
27490: PUSH
27491: LD_INT 0
27493: ST_TO_ADDR
// break ;
27494: GO 27498
// end ;
27496: GO 27459
27498: POP
27499: POP
// end ;
27500: LD_VAR 0 3
27504: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27505: LD_INT 0
27507: PPUSH
27508: PPUSH
27509: PPUSH
// pom := GetBase ( fac ) ;
27510: LD_ADDR_VAR 0 5
27514: PUSH
27515: LD_VAR 0 1
27519: PPUSH
27520: CALL_OW 274
27524: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27525: LD_ADDR_VAR 0 4
27529: PUSH
27530: LD_VAR 0 2
27534: PUSH
27535: LD_INT 1
27537: ARRAY
27538: PPUSH
27539: LD_VAR 0 2
27543: PUSH
27544: LD_INT 2
27546: ARRAY
27547: PPUSH
27548: LD_VAR 0 2
27552: PUSH
27553: LD_INT 3
27555: ARRAY
27556: PPUSH
27557: LD_VAR 0 2
27561: PUSH
27562: LD_INT 4
27564: ARRAY
27565: PPUSH
27566: CALL_OW 449
27570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27571: LD_ADDR_VAR 0 3
27575: PUSH
27576: LD_VAR 0 5
27580: PPUSH
27581: LD_INT 1
27583: PPUSH
27584: CALL_OW 275
27588: PUSH
27589: LD_VAR 0 4
27593: PUSH
27594: LD_INT 1
27596: ARRAY
27597: GREATEREQUAL
27598: IFFALSE 27624
27600: PUSH
27601: LD_VAR 0 5
27605: PPUSH
27606: LD_INT 2
27608: PPUSH
27609: CALL_OW 275
27613: PUSH
27614: LD_VAR 0 4
27618: PUSH
27619: LD_INT 2
27621: ARRAY
27622: GREATEREQUAL
27623: AND
27624: IFFALSE 27650
27626: PUSH
27627: LD_VAR 0 5
27631: PPUSH
27632: LD_INT 3
27634: PPUSH
27635: CALL_OW 275
27639: PUSH
27640: LD_VAR 0 4
27644: PUSH
27645: LD_INT 3
27647: ARRAY
27648: GREATEREQUAL
27649: AND
27650: ST_TO_ADDR
// end ;
27651: LD_VAR 0 3
27655: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
// pom := GetBase ( building ) ;
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_VAR 0 1
27671: PPUSH
27672: CALL_OW 274
27676: ST_TO_ADDR
// if not pom then
27677: LD_VAR 0 3
27681: NOT
27682: IFFALSE 27686
// exit ;
27684: GO 27860
// btype := GetBType ( building ) ;
27686: LD_ADDR_VAR 0 5
27690: PUSH
27691: LD_VAR 0 1
27695: PPUSH
27696: CALL_OW 266
27700: ST_TO_ADDR
// if btype = b_armoury then
27701: LD_VAR 0 5
27705: PUSH
27706: LD_INT 4
27708: EQUAL
27709: IFFALSE 27719
// btype := b_barracks ;
27711: LD_ADDR_VAR 0 5
27715: PUSH
27716: LD_INT 5
27718: ST_TO_ADDR
// if btype = b_depot then
27719: LD_VAR 0 5
27723: PUSH
27724: LD_INT 0
27726: EQUAL
27727: IFFALSE 27737
// btype := b_warehouse ;
27729: LD_ADDR_VAR 0 5
27733: PUSH
27734: LD_INT 1
27736: ST_TO_ADDR
// if btype = b_workshop then
27737: LD_VAR 0 5
27741: PUSH
27742: LD_INT 2
27744: EQUAL
27745: IFFALSE 27755
// btype := b_factory ;
27747: LD_ADDR_VAR 0 5
27751: PUSH
27752: LD_INT 3
27754: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27755: LD_ADDR_VAR 0 4
27759: PUSH
27760: LD_VAR 0 5
27764: PPUSH
27765: LD_VAR 0 1
27769: PPUSH
27770: CALL_OW 248
27774: PPUSH
27775: CALL_OW 450
27779: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27780: LD_ADDR_VAR 0 2
27784: PUSH
27785: LD_VAR 0 3
27789: PPUSH
27790: LD_INT 1
27792: PPUSH
27793: CALL_OW 275
27797: PUSH
27798: LD_VAR 0 4
27802: PUSH
27803: LD_INT 1
27805: ARRAY
27806: GREATEREQUAL
27807: IFFALSE 27833
27809: PUSH
27810: LD_VAR 0 3
27814: PPUSH
27815: LD_INT 2
27817: PPUSH
27818: CALL_OW 275
27822: PUSH
27823: LD_VAR 0 4
27827: PUSH
27828: LD_INT 2
27830: ARRAY
27831: GREATEREQUAL
27832: AND
27833: IFFALSE 27859
27835: PUSH
27836: LD_VAR 0 3
27840: PPUSH
27841: LD_INT 3
27843: PPUSH
27844: CALL_OW 275
27848: PUSH
27849: LD_VAR 0 4
27853: PUSH
27854: LD_INT 3
27856: ARRAY
27857: GREATEREQUAL
27858: AND
27859: ST_TO_ADDR
// end ;
27860: LD_VAR 0 2
27864: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
27869: PPUSH
// pom := GetBase ( building ) ;
27870: LD_ADDR_VAR 0 4
27874: PUSH
27875: LD_VAR 0 1
27879: PPUSH
27880: CALL_OW 274
27884: ST_TO_ADDR
// if not pom then
27885: LD_VAR 0 4
27889: NOT
27890: IFFALSE 27894
// exit ;
27892: GO 27999
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27894: LD_ADDR_VAR 0 5
27898: PUSH
27899: LD_VAR 0 2
27903: PPUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 248
27913: PPUSH
27914: CALL_OW 450
27918: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27919: LD_ADDR_VAR 0 3
27923: PUSH
27924: LD_VAR 0 4
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: CALL_OW 275
27936: PUSH
27937: LD_VAR 0 5
27941: PUSH
27942: LD_INT 1
27944: ARRAY
27945: GREATEREQUAL
27946: IFFALSE 27972
27948: PUSH
27949: LD_VAR 0 4
27953: PPUSH
27954: LD_INT 2
27956: PPUSH
27957: CALL_OW 275
27961: PUSH
27962: LD_VAR 0 5
27966: PUSH
27967: LD_INT 2
27969: ARRAY
27970: GREATEREQUAL
27971: AND
27972: IFFALSE 27998
27974: PUSH
27975: LD_VAR 0 4
27979: PPUSH
27980: LD_INT 3
27982: PPUSH
27983: CALL_OW 275
27987: PUSH
27988: LD_VAR 0 5
27992: PUSH
27993: LD_INT 3
27995: ARRAY
27996: GREATEREQUAL
27997: AND
27998: ST_TO_ADDR
// end ;
27999: LD_VAR 0 3
28003: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
28008: PPUSH
28009: PPUSH
28010: PPUSH
28011: PPUSH
28012: PPUSH
28013: PPUSH
28014: PPUSH
28015: PPUSH
28016: PPUSH
// result := false ;
28017: LD_ADDR_VAR 0 8
28021: PUSH
28022: LD_INT 0
28024: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28025: LD_VAR 0 5
28029: NOT
28030: IFTRUE 28039
28032: PUSH
28033: LD_VAR 0 1
28037: NOT
28038: OR
28039: IFTRUE 28048
28041: PUSH
28042: LD_VAR 0 2
28046: NOT
28047: OR
28048: IFTRUE 28057
28050: PUSH
28051: LD_VAR 0 3
28055: NOT
28056: OR
28057: IFFALSE 28061
// exit ;
28059: GO 28887
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28061: LD_ADDR_VAR 0 14
28065: PUSH
28066: LD_VAR 0 1
28070: PPUSH
28071: LD_VAR 0 2
28075: PPUSH
28076: LD_VAR 0 3
28080: PPUSH
28081: LD_VAR 0 4
28085: PPUSH
28086: LD_VAR 0 5
28090: PUSH
28091: LD_INT 1
28093: ARRAY
28094: PPUSH
28095: CALL_OW 248
28099: PPUSH
28100: LD_INT 0
28102: PPUSH
28103: CALL 30168 0 6
28107: ST_TO_ADDR
// if not hexes then
28108: LD_VAR 0 14
28112: NOT
28113: IFFALSE 28117
// exit ;
28115: GO 28887
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28117: LD_ADDR_VAR 0 17
28121: PUSH
28122: LD_VAR 0 5
28126: PPUSH
28127: LD_INT 22
28129: PUSH
28130: LD_VAR 0 13
28134: PPUSH
28135: CALL_OW 255
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: PUSH
28147: LD_INT 30
28149: PUSH
28150: LD_INT 0
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 30
28159: PUSH
28160: LD_INT 1
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: LIST
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PPUSH
28176: CALL_OW 72
28180: ST_TO_ADDR
// for i = 1 to hexes do
28181: LD_ADDR_VAR 0 9
28185: PUSH
28186: DOUBLE
28187: LD_INT 1
28189: DEC
28190: ST_TO_ADDR
28191: LD_VAR 0 14
28195: PUSH
28196: FOR_TO
28197: IFFALSE 28885
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28199: LD_ADDR_VAR 0 13
28203: PUSH
28204: LD_VAR 0 14
28208: PUSH
28209: LD_VAR 0 9
28213: ARRAY
28214: PUSH
28215: LD_INT 1
28217: ARRAY
28218: PPUSH
28219: LD_VAR 0 14
28223: PUSH
28224: LD_VAR 0 9
28228: ARRAY
28229: PUSH
28230: LD_INT 2
28232: ARRAY
28233: PPUSH
28234: CALL_OW 428
28238: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28239: LD_VAR 0 14
28243: PUSH
28244: LD_VAR 0 9
28248: ARRAY
28249: PUSH
28250: LD_INT 1
28252: ARRAY
28253: PPUSH
28254: LD_VAR 0 14
28258: PUSH
28259: LD_VAR 0 9
28263: ARRAY
28264: PUSH
28265: LD_INT 2
28267: ARRAY
28268: PPUSH
28269: CALL_OW 351
28273: IFTRUE 28312
28275: PUSH
28276: LD_VAR 0 14
28280: PUSH
28281: LD_VAR 0 9
28285: ARRAY
28286: PUSH
28287: LD_INT 1
28289: ARRAY
28290: PPUSH
28291: LD_VAR 0 14
28295: PUSH
28296: LD_VAR 0 9
28300: ARRAY
28301: PUSH
28302: LD_INT 2
28304: ARRAY
28305: PPUSH
28306: CALL_OW 488
28310: NOT
28311: OR
28312: IFTRUE 28329
28314: PUSH
28315: LD_VAR 0 13
28319: PPUSH
28320: CALL_OW 247
28324: PUSH
28325: LD_INT 3
28327: EQUAL
28328: OR
28329: IFFALSE 28335
// exit ;
28331: POP
28332: POP
28333: GO 28887
// if not tmp then
28335: LD_VAR 0 13
28339: NOT
28340: IFFALSE 28344
// continue ;
28342: GO 28196
// result := true ;
28344: LD_ADDR_VAR 0 8
28348: PUSH
28349: LD_INT 1
28351: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28352: LD_VAR 0 6
28356: IFFALSE 28373
28358: PUSH
28359: LD_VAR 0 13
28363: PPUSH
28364: CALL_OW 247
28368: PUSH
28369: LD_INT 2
28371: EQUAL
28372: AND
28373: IFFALSE 28390
28375: PUSH
28376: LD_VAR 0 13
28380: PPUSH
28381: CALL_OW 263
28385: PUSH
28386: LD_INT 1
28388: EQUAL
28389: AND
28390: IFFALSE 28554
// begin if IsDrivenBy ( tmp ) then
28392: LD_VAR 0 13
28396: PPUSH
28397: CALL_OW 311
28401: IFFALSE 28405
// continue ;
28403: GO 28196
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28405: LD_VAR 0 6
28409: PPUSH
28410: LD_INT 3
28412: PUSH
28413: LD_INT 60
28415: PUSH
28416: EMPTY
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 3
28425: PUSH
28426: LD_INT 55
28428: PUSH
28429: EMPTY
28430: LIST
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PPUSH
28440: CALL_OW 72
28444: IFFALSE 28552
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28446: LD_ADDR_VAR 0 18
28450: PUSH
28451: LD_VAR 0 6
28455: PPUSH
28456: LD_INT 3
28458: PUSH
28459: LD_INT 60
28461: PUSH
28462: EMPTY
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 3
28471: PUSH
28472: LD_INT 55
28474: PUSH
28475: EMPTY
28476: LIST
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PPUSH
28486: CALL_OW 72
28490: PUSH
28491: LD_INT 1
28493: ARRAY
28494: ST_TO_ADDR
// if IsInUnit ( driver ) then
28495: LD_VAR 0 18
28499: PPUSH
28500: CALL_OW 310
28504: IFFALSE 28515
// ComExit ( driver ) ;
28506: LD_VAR 0 18
28510: PPUSH
28511: CALL 54158 0 1
// AddComEnterUnit ( driver , tmp ) ;
28515: LD_VAR 0 18
28519: PPUSH
28520: LD_VAR 0 13
28524: PPUSH
28525: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28529: LD_VAR 0 18
28533: PPUSH
28534: LD_VAR 0 7
28538: PPUSH
28539: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28543: LD_VAR 0 18
28547: PPUSH
28548: CALL_OW 181
// end ; continue ;
28552: GO 28196
// end ; if not cleaners or not tmp in cleaners then
28554: LD_VAR 0 6
28558: NOT
28559: IFTRUE 28574
28561: PUSH
28562: LD_VAR 0 13
28566: PUSH
28567: LD_VAR 0 6
28571: IN
28572: NOT
28573: OR
28574: IFFALSE 28883
// begin if dep then
28576: LD_VAR 0 17
28580: IFFALSE 28716
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28582: LD_ADDR_VAR 0 16
28586: PUSH
28587: LD_VAR 0 17
28591: PUSH
28592: LD_INT 1
28594: ARRAY
28595: PPUSH
28596: CALL_OW 250
28600: PPUSH
28601: LD_VAR 0 17
28605: PUSH
28606: LD_INT 1
28608: ARRAY
28609: PPUSH
28610: CALL_OW 254
28614: PPUSH
28615: LD_INT 5
28617: PPUSH
28618: CALL_OW 272
28622: PUSH
28623: LD_VAR 0 17
28627: PUSH
28628: LD_INT 1
28630: ARRAY
28631: PPUSH
28632: CALL_OW 251
28636: PPUSH
28637: LD_VAR 0 17
28641: PUSH
28642: LD_INT 1
28644: ARRAY
28645: PPUSH
28646: CALL_OW 254
28650: PPUSH
28651: LD_INT 5
28653: PPUSH
28654: CALL_OW 273
28658: PUSH
28659: EMPTY
28660: LIST
28661: LIST
28662: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28663: LD_VAR 0 16
28667: PUSH
28668: LD_INT 1
28670: ARRAY
28671: PPUSH
28672: LD_VAR 0 16
28676: PUSH
28677: LD_INT 2
28679: ARRAY
28680: PPUSH
28681: CALL_OW 488
28685: IFFALSE 28716
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28687: LD_VAR 0 13
28691: PPUSH
28692: LD_VAR 0 16
28696: PUSH
28697: LD_INT 1
28699: ARRAY
28700: PPUSH
28701: LD_VAR 0 16
28705: PUSH
28706: LD_INT 2
28708: ARRAY
28709: PPUSH
28710: CALL_OW 111
// continue ;
28714: GO 28196
// end ; end ; r := GetDir ( tmp ) ;
28716: LD_ADDR_VAR 0 15
28720: PUSH
28721: LD_VAR 0 13
28725: PPUSH
28726: CALL_OW 254
28730: ST_TO_ADDR
// if r = 5 then
28731: LD_VAR 0 15
28735: PUSH
28736: LD_INT 5
28738: EQUAL
28739: IFFALSE 28749
// r := 0 ;
28741: LD_ADDR_VAR 0 15
28745: PUSH
28746: LD_INT 0
28748: ST_TO_ADDR
// for j = r to 5 do
28749: LD_ADDR_VAR 0 10
28753: PUSH
28754: DOUBLE
28755: LD_VAR 0 15
28759: DEC
28760: ST_TO_ADDR
28761: LD_INT 5
28763: PUSH
28764: FOR_TO
28765: IFFALSE 28881
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28767: LD_ADDR_VAR 0 11
28771: PUSH
28772: LD_VAR 0 13
28776: PPUSH
28777: CALL_OW 250
28781: PPUSH
28782: LD_VAR 0 10
28786: PPUSH
28787: LD_INT 2
28789: PPUSH
28790: CALL_OW 272
28794: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28795: LD_ADDR_VAR 0 12
28799: PUSH
28800: LD_VAR 0 13
28804: PPUSH
28805: CALL_OW 251
28809: PPUSH
28810: LD_VAR 0 10
28814: PPUSH
28815: LD_INT 2
28817: PPUSH
28818: CALL_OW 273
28822: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28823: LD_VAR 0 11
28827: PPUSH
28828: LD_VAR 0 12
28832: PPUSH
28833: CALL_OW 488
28837: IFFALSE 28856
28839: PUSH
28840: LD_VAR 0 11
28844: PPUSH
28845: LD_VAR 0 12
28849: PPUSH
28850: CALL_OW 428
28854: NOT
28855: AND
28856: IFFALSE 28879
// begin ComMoveXY ( tmp , _x , _y ) ;
28858: LD_VAR 0 13
28862: PPUSH
28863: LD_VAR 0 11
28867: PPUSH
28868: LD_VAR 0 12
28872: PPUSH
28873: CALL_OW 111
// break ;
28877: GO 28881
// end ; end ;
28879: GO 28764
28881: POP
28882: POP
// end ; end ;
28883: GO 28196
28885: POP
28886: POP
// end ;
28887: LD_VAR 0 8
28891: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28892: LD_INT 0
28894: PPUSH
// result := true ;
28895: LD_ADDR_VAR 0 3
28899: PUSH
28900: LD_INT 1
28902: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28903: LD_VAR 0 2
28907: PUSH
28908: LD_INT 24
28910: DOUBLE
28911: EQUAL
28912: IFTRUE 28922
28914: LD_INT 33
28916: DOUBLE
28917: EQUAL
28918: IFTRUE 28922
28920: GO 28947
28922: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28923: LD_ADDR_VAR 0 3
28927: PUSH
28928: LD_INT 32
28930: PPUSH
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL_OW 321
28940: PUSH
28941: LD_INT 2
28943: EQUAL
28944: ST_TO_ADDR
28945: GO 29263
28947: LD_INT 20
28949: DOUBLE
28950: EQUAL
28951: IFTRUE 28955
28953: GO 28980
28955: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28956: LD_ADDR_VAR 0 3
28960: PUSH
28961: LD_INT 6
28963: PPUSH
28964: LD_VAR 0 1
28968: PPUSH
28969: CALL_OW 321
28973: PUSH
28974: LD_INT 2
28976: EQUAL
28977: ST_TO_ADDR
28978: GO 29263
28980: LD_INT 22
28982: DOUBLE
28983: EQUAL
28984: IFTRUE 28994
28986: LD_INT 36
28988: DOUBLE
28989: EQUAL
28990: IFTRUE 28994
28992: GO 29019
28994: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_INT 15
29002: PPUSH
29003: LD_VAR 0 1
29007: PPUSH
29008: CALL_OW 321
29012: PUSH
29013: LD_INT 2
29015: EQUAL
29016: ST_TO_ADDR
29017: GO 29263
29019: LD_INT 30
29021: DOUBLE
29022: EQUAL
29023: IFTRUE 29027
29025: GO 29052
29027: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29028: LD_ADDR_VAR 0 3
29032: PUSH
29033: LD_INT 20
29035: PPUSH
29036: LD_VAR 0 1
29040: PPUSH
29041: CALL_OW 321
29045: PUSH
29046: LD_INT 2
29048: EQUAL
29049: ST_TO_ADDR
29050: GO 29263
29052: LD_INT 28
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29066
29058: LD_INT 21
29060: DOUBLE
29061: EQUAL
29062: IFTRUE 29066
29064: GO 29091
29066: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29067: LD_ADDR_VAR 0 3
29071: PUSH
29072: LD_INT 21
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL_OW 321
29084: PUSH
29085: LD_INT 2
29087: EQUAL
29088: ST_TO_ADDR
29089: GO 29263
29091: LD_INT 16
29093: DOUBLE
29094: EQUAL
29095: IFTRUE 29099
29097: GO 29124
29099: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29100: LD_ADDR_VAR 0 3
29104: PUSH
29105: LD_INT 84
29107: PPUSH
29108: LD_VAR 0 1
29112: PPUSH
29113: CALL_OW 321
29117: PUSH
29118: LD_INT 2
29120: EQUAL
29121: ST_TO_ADDR
29122: GO 29263
29124: LD_INT 19
29126: DOUBLE
29127: EQUAL
29128: IFTRUE 29138
29130: LD_INT 23
29132: DOUBLE
29133: EQUAL
29134: IFTRUE 29138
29136: GO 29163
29138: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29139: LD_ADDR_VAR 0 3
29143: PUSH
29144: LD_INT 83
29146: PPUSH
29147: LD_VAR 0 1
29151: PPUSH
29152: CALL_OW 321
29156: PUSH
29157: LD_INT 2
29159: EQUAL
29160: ST_TO_ADDR
29161: GO 29263
29163: LD_INT 17
29165: DOUBLE
29166: EQUAL
29167: IFTRUE 29171
29169: GO 29196
29171: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29172: LD_ADDR_VAR 0 3
29176: PUSH
29177: LD_INT 39
29179: PPUSH
29180: LD_VAR 0 1
29184: PPUSH
29185: CALL_OW 321
29189: PUSH
29190: LD_INT 2
29192: EQUAL
29193: ST_TO_ADDR
29194: GO 29263
29196: LD_INT 18
29198: DOUBLE
29199: EQUAL
29200: IFTRUE 29204
29202: GO 29229
29204: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29205: LD_ADDR_VAR 0 3
29209: PUSH
29210: LD_INT 40
29212: PPUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 321
29222: PUSH
29223: LD_INT 2
29225: EQUAL
29226: ST_TO_ADDR
29227: GO 29263
29229: LD_INT 27
29231: DOUBLE
29232: EQUAL
29233: IFTRUE 29237
29235: GO 29262
29237: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 35
29245: PPUSH
29246: LD_VAR 0 1
29250: PPUSH
29251: CALL_OW 321
29255: PUSH
29256: LD_INT 2
29258: EQUAL
29259: ST_TO_ADDR
29260: GO 29263
29262: POP
// end ;
29263: LD_VAR 0 3
29267: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29268: LD_INT 0
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
// result := false ;
29281: LD_ADDR_VAR 0 6
29285: PUSH
29286: LD_INT 0
29288: ST_TO_ADDR
// if btype = b_depot then
29289: LD_VAR 0 2
29293: PUSH
29294: LD_INT 0
29296: EQUAL
29297: IFFALSE 29309
// begin result := true ;
29299: LD_ADDR_VAR 0 6
29303: PUSH
29304: LD_INT 1
29306: ST_TO_ADDR
// exit ;
29307: GO 30163
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29309: LD_VAR 0 1
29313: NOT
29314: IFTRUE 29339
29316: PUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 266
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: IN
29337: NOT
29338: OR
29339: IFTRUE 29348
29341: PUSH
29342: LD_VAR 0 2
29346: NOT
29347: OR
29348: IFTRUE 29384
29350: PUSH
29351: LD_VAR 0 5
29355: PUSH
29356: LD_INT 0
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 2
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: LD_INT 4
29370: PUSH
29371: LD_INT 5
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: IN
29382: NOT
29383: OR
29384: IFTRUE 29403
29386: PUSH
29387: LD_VAR 0 3
29391: PPUSH
29392: LD_VAR 0 4
29396: PPUSH
29397: CALL_OW 488
29401: NOT
29402: OR
29403: IFFALSE 29407
// exit ;
29405: GO 30163
// side := GetSide ( depot ) ;
29407: LD_ADDR_VAR 0 9
29411: PUSH
29412: LD_VAR 0 1
29416: PPUSH
29417: CALL_OW 255
29421: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29422: LD_VAR 0 9
29426: PPUSH
29427: LD_VAR 0 2
29431: PPUSH
29432: CALL 28892 0 2
29436: NOT
29437: IFFALSE 29441
// exit ;
29439: GO 30163
// pom := GetBase ( depot ) ;
29441: LD_ADDR_VAR 0 10
29445: PUSH
29446: LD_VAR 0 1
29450: PPUSH
29451: CALL_OW 274
29455: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29456: LD_ADDR_VAR 0 11
29460: PUSH
29461: LD_VAR 0 2
29465: PPUSH
29466: LD_VAR 0 1
29470: PPUSH
29471: CALL_OW 248
29475: PPUSH
29476: CALL_OW 450
29480: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29481: LD_VAR 0 10
29485: PPUSH
29486: LD_INT 1
29488: PPUSH
29489: CALL_OW 275
29493: PUSH
29494: LD_VAR 0 11
29498: PUSH
29499: LD_INT 1
29501: ARRAY
29502: GREATEREQUAL
29503: IFFALSE 29529
29505: PUSH
29506: LD_VAR 0 10
29510: PPUSH
29511: LD_INT 2
29513: PPUSH
29514: CALL_OW 275
29518: PUSH
29519: LD_VAR 0 11
29523: PUSH
29524: LD_INT 2
29526: ARRAY
29527: GREATEREQUAL
29528: AND
29529: IFFALSE 29555
29531: PUSH
29532: LD_VAR 0 10
29536: PPUSH
29537: LD_INT 3
29539: PPUSH
29540: CALL_OW 275
29544: PUSH
29545: LD_VAR 0 11
29549: PUSH
29550: LD_INT 3
29552: ARRAY
29553: GREATEREQUAL
29554: AND
29555: NOT
29556: IFFALSE 29560
// exit ;
29558: GO 30163
// if GetBType ( depot ) = b_depot then
29560: LD_VAR 0 1
29564: PPUSH
29565: CALL_OW 266
29569: PUSH
29570: LD_INT 0
29572: EQUAL
29573: IFFALSE 29585
// dist := 28 else
29575: LD_ADDR_VAR 0 14
29579: PUSH
29580: LD_INT 28
29582: ST_TO_ADDR
29583: GO 29593
// dist := 36 ;
29585: LD_ADDR_VAR 0 14
29589: PUSH
29590: LD_INT 36
29592: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29593: LD_VAR 0 1
29597: PPUSH
29598: LD_VAR 0 3
29602: PPUSH
29603: LD_VAR 0 4
29607: PPUSH
29608: CALL_OW 297
29612: PUSH
29613: LD_VAR 0 14
29617: GREATER
29618: IFFALSE 29622
// exit ;
29620: GO 30163
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29622: LD_ADDR_VAR 0 12
29626: PUSH
29627: LD_VAR 0 2
29631: PPUSH
29632: LD_VAR 0 3
29636: PPUSH
29637: LD_VAR 0 4
29641: PPUSH
29642: LD_VAR 0 5
29646: PPUSH
29647: LD_VAR 0 1
29651: PPUSH
29652: CALL_OW 248
29656: PPUSH
29657: LD_INT 0
29659: PPUSH
29660: CALL 30168 0 6
29664: ST_TO_ADDR
// if not hexes then
29665: LD_VAR 0 12
29669: NOT
29670: IFFALSE 29674
// exit ;
29672: GO 30163
// hex := GetHexInfo ( x , y ) ;
29674: LD_ADDR_VAR 0 15
29678: PUSH
29679: LD_VAR 0 3
29683: PPUSH
29684: LD_VAR 0 4
29688: PPUSH
29689: CALL_OW 546
29693: ST_TO_ADDR
// if hex [ 1 ] then
29694: LD_VAR 0 15
29698: PUSH
29699: LD_INT 1
29701: ARRAY
29702: IFFALSE 29706
// exit ;
29704: GO 30163
// height := hex [ 2 ] ;
29706: LD_ADDR_VAR 0 13
29710: PUSH
29711: LD_VAR 0 15
29715: PUSH
29716: LD_INT 2
29718: ARRAY
29719: ST_TO_ADDR
// for i = 1 to hexes do
29720: LD_ADDR_VAR 0 7
29724: PUSH
29725: DOUBLE
29726: LD_INT 1
29728: DEC
29729: ST_TO_ADDR
29730: LD_VAR 0 12
29734: PUSH
29735: FOR_TO
29736: IFFALSE 30080
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29738: LD_VAR 0 12
29742: PUSH
29743: LD_VAR 0 7
29747: ARRAY
29748: PUSH
29749: LD_INT 1
29751: ARRAY
29752: PPUSH
29753: LD_VAR 0 12
29757: PUSH
29758: LD_VAR 0 7
29762: ARRAY
29763: PUSH
29764: LD_INT 2
29766: ARRAY
29767: PPUSH
29768: CALL_OW 488
29772: NOT
29773: IFTRUE 29815
29775: PUSH
29776: LD_VAR 0 12
29780: PUSH
29781: LD_VAR 0 7
29785: ARRAY
29786: PUSH
29787: LD_INT 1
29789: ARRAY
29790: PPUSH
29791: LD_VAR 0 12
29795: PUSH
29796: LD_VAR 0 7
29800: ARRAY
29801: PUSH
29802: LD_INT 2
29804: ARRAY
29805: PPUSH
29806: CALL_OW 428
29810: PUSH
29811: LD_INT 0
29813: GREATER
29814: OR
29815: IFTRUE 29853
29817: PUSH
29818: LD_VAR 0 12
29822: PUSH
29823: LD_VAR 0 7
29827: ARRAY
29828: PUSH
29829: LD_INT 1
29831: ARRAY
29832: PPUSH
29833: LD_VAR 0 12
29837: PUSH
29838: LD_VAR 0 7
29842: ARRAY
29843: PUSH
29844: LD_INT 2
29846: ARRAY
29847: PPUSH
29848: CALL_OW 351
29852: OR
29853: IFFALSE 29859
// exit ;
29855: POP
29856: POP
29857: GO 30163
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29859: LD_ADDR_VAR 0 8
29863: PUSH
29864: LD_VAR 0 12
29868: PUSH
29869: LD_VAR 0 7
29873: ARRAY
29874: PUSH
29875: LD_INT 1
29877: ARRAY
29878: PPUSH
29879: LD_VAR 0 12
29883: PUSH
29884: LD_VAR 0 7
29888: ARRAY
29889: PUSH
29890: LD_INT 2
29892: ARRAY
29893: PPUSH
29894: CALL_OW 546
29898: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29899: LD_VAR 0 8
29903: PUSH
29904: LD_INT 1
29906: ARRAY
29907: IFTRUE 29929
29909: PUSH
29910: LD_VAR 0 8
29914: PUSH
29915: LD_INT 2
29917: ARRAY
29918: PUSH
29919: LD_VAR 0 13
29923: PUSH
29924: LD_INT 2
29926: PLUS
29927: GREATER
29928: OR
29929: IFTRUE 29951
29931: PUSH
29932: LD_VAR 0 8
29936: PUSH
29937: LD_INT 2
29939: ARRAY
29940: PUSH
29941: LD_VAR 0 13
29945: PUSH
29946: LD_INT 2
29948: MINUS
29949: LESS
29950: OR
29951: IFTRUE 30019
29953: PUSH
29954: LD_VAR 0 8
29958: PUSH
29959: LD_INT 3
29961: ARRAY
29962: PUSH
29963: LD_INT 0
29965: PUSH
29966: LD_INT 8
29968: PUSH
29969: LD_INT 9
29971: PUSH
29972: LD_INT 10
29974: PUSH
29975: LD_INT 11
29977: PUSH
29978: LD_INT 12
29980: PUSH
29981: LD_INT 13
29983: PUSH
29984: LD_INT 16
29986: PUSH
29987: LD_INT 17
29989: PUSH
29990: LD_INT 18
29992: PUSH
29993: LD_INT 19
29995: PUSH
29996: LD_INT 20
29998: PUSH
29999: LD_INT 21
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: IN
30017: NOT
30018: OR
30019: IFTRUE 30032
30021: PUSH
30022: LD_VAR 0 8
30026: PUSH
30027: LD_INT 5
30029: ARRAY
30030: NOT
30031: OR
30032: IFTRUE 30072
30034: PUSH
30035: LD_VAR 0 8
30039: PUSH
30040: LD_INT 6
30042: ARRAY
30043: PUSH
30044: LD_INT 1
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 7
30052: PUSH
30053: LD_INT 9
30055: PUSH
30056: LD_INT 10
30058: PUSH
30059: LD_INT 11
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: LIST
30069: IN
30070: NOT
30071: OR
30072: IFFALSE 30078
// exit ;
30074: POP
30075: POP
30076: GO 30163
// end ;
30078: GO 29735
30080: POP
30081: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30082: LD_VAR 0 9
30086: PPUSH
30087: LD_VAR 0 3
30091: PPUSH
30092: LD_VAR 0 4
30096: PPUSH
30097: LD_INT 20
30099: PPUSH
30100: CALL 21982 0 4
30104: PUSH
30105: LD_INT 4
30107: ARRAY
30108: IFFALSE 30112
// exit ;
30110: GO 30163
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30112: LD_VAR 0 2
30116: PUSH
30117: LD_INT 29
30119: PUSH
30120: LD_INT 30
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: IN
30127: IFFALSE 30151
30129: PUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: LD_VAR 0 4
30139: PPUSH
30140: LD_VAR 0 9
30144: PPUSH
30145: CALL_OW 440
30149: NOT
30150: AND
30151: IFFALSE 30155
// exit ;
30153: GO 30163
// result := true ;
30155: LD_ADDR_VAR 0 6
30159: PUSH
30160: LD_INT 1
30162: ST_TO_ADDR
// end ;
30163: LD_VAR 0 6
30167: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30168: LD_INT 0
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
30197: PPUSH
30198: PPUSH
30199: PPUSH
30200: PPUSH
30201: PPUSH
30202: PPUSH
30203: PPUSH
30204: PPUSH
30205: PPUSH
30206: PPUSH
30207: PPUSH
30208: PPUSH
30209: PPUSH
30210: PPUSH
30211: PPUSH
30212: PPUSH
30213: PPUSH
30214: PPUSH
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
30219: PPUSH
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
// result = [ ] ;
30228: LD_ADDR_VAR 0 7
30232: PUSH
30233: EMPTY
30234: ST_TO_ADDR
// temp_list = [ ] ;
30235: LD_ADDR_VAR 0 9
30239: PUSH
30240: EMPTY
30241: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30242: LD_VAR 0 4
30246: PUSH
30247: LD_INT 0
30249: PUSH
30250: LD_INT 1
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: LD_INT 3
30258: PUSH
30259: LD_INT 4
30261: PUSH
30262: LD_INT 5
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: IN
30273: NOT
30274: IFTRUE 30317
30276: PUSH
30277: LD_VAR 0 1
30281: PUSH
30282: LD_INT 0
30284: PUSH
30285: LD_INT 1
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: IN
30292: IFFALSE 30316
30294: PUSH
30295: LD_VAR 0 5
30299: PUSH
30300: LD_INT 1
30302: PUSH
30303: LD_INT 2
30305: PUSH
30306: LD_INT 3
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: IN
30314: NOT
30315: AND
30316: OR
30317: IFFALSE 30321
// exit ;
30319: GO 48720
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30321: LD_VAR 0 1
30325: PUSH
30326: LD_INT 6
30328: PUSH
30329: LD_INT 7
30331: PUSH
30332: LD_INT 8
30334: PUSH
30335: LD_INT 13
30337: PUSH
30338: LD_INT 12
30340: PUSH
30341: LD_INT 15
30343: PUSH
30344: LD_INT 11
30346: PUSH
30347: LD_INT 14
30349: PUSH
30350: LD_INT 10
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: IN
30364: IFFALSE 30374
// btype = b_lab ;
30366: LD_ADDR_VAR 0 1
30370: PUSH
30371: LD_INT 6
30373: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30374: LD_VAR 0 6
30378: PUSH
30379: LD_INT 0
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: LD_INT 2
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: IN
30393: NOT
30394: IFTRUE 30462
30396: PUSH
30397: LD_VAR 0 1
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: LD_INT 1
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 6
30416: PUSH
30417: LD_INT 36
30419: PUSH
30420: LD_INT 4
30422: PUSH
30423: LD_INT 5
30425: PUSH
30426: LD_INT 31
30428: PUSH
30429: LD_INT 32
30431: PUSH
30432: LD_INT 33
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: IN
30448: NOT
30449: IFFALSE 30461
30451: PUSH
30452: LD_VAR 0 6
30456: PUSH
30457: LD_INT 1
30459: EQUAL
30460: AND
30461: OR
30462: IFTRUE 30494
30464: PUSH
30465: LD_VAR 0 1
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 3
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: IN
30480: NOT
30481: IFFALSE 30493
30483: PUSH
30484: LD_VAR 0 6
30488: PUSH
30489: LD_INT 2
30491: EQUAL
30492: AND
30493: OR
30494: IFFALSE 30504
// mode = 0 ;
30496: LD_ADDR_VAR 0 6
30500: PUSH
30501: LD_INT 0
30503: ST_TO_ADDR
// case mode of 0 :
30504: LD_VAR 0 6
30508: PUSH
30509: LD_INT 0
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 41970
30517: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30518: LD_ADDR_VAR 0 11
30522: PUSH
30523: LD_INT 0
30525: PUSH
30526: LD_INT 0
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 1
30538: NEG
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 0
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: LD_INT 2
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 0
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 1
30622: PUSH
30623: LD_INT 1
30625: NEG
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 0
30643: PUSH
30644: LD_INT 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 1
30653: NEG
30654: PUSH
30655: LD_INT 1
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: LD_INT 3
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: LD_INT 2
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30711: LD_ADDR_VAR 0 12
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 0
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: LD_INT 1
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: NEG
30770: PUSH
30771: LD_INT 0
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: LD_INT 1
30795: NEG
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: LD_INT 1
30823: NEG
30824: PUSH
30825: LD_INT 1
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 2
30834: NEG
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 2
30845: NEG
30846: PUSH
30847: LD_INT 1
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: NEG
30858: PUSH
30859: LD_INT 1
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 3
30868: NEG
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: NEG
30880: PUSH
30881: LD_INT 1
30883: NEG
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30907: LD_ADDR_VAR 0 13
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: LD_INT 1
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 2
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 1
31020: PUSH
31021: LD_INT 2
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: NEG
31055: PUSH
31056: LD_INT 3
31058: NEG
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: NEG
31067: PUSH
31068: LD_INT 2
31070: NEG
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 3
31078: NEG
31079: PUSH
31080: LD_INT 3
31082: NEG
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: LIST
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: LIST
31103: LIST
31104: LIST
31105: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31106: LD_ADDR_VAR 0 14
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: LD_INT 0
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 0
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: PUSH
31135: LD_INT 0
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 1
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 1
31164: NEG
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: NEG
31188: PUSH
31189: LD_INT 2
31191: NEG
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 2
31202: NEG
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: LD_INT 1
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 1
31221: PUSH
31222: LD_INT 2
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: LD_INT 2
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: NEG
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: NEG
31253: PUSH
31254: LD_INT 3
31256: NEG
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: LD_INT 3
31267: NEG
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: LD_INT 2
31278: NEG
31279: PUSH
31280: EMPTY
31281: LIST
31282: LIST
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31302: LD_ADDR_VAR 0 15
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 0
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 0
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 1
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: LD_INT 1
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: NEG
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 2
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: NEG
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 2
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: LD_INT 1
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 3
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 3
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31495: LD_ADDR_VAR 0 16
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 0
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: LD_INT 1
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: LD_INT 0
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: LD_INT 1
31568: NEG
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 1
31576: NEG
31577: PUSH
31578: LD_INT 2
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: LD_INT 2
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: LD_INT 1
31622: NEG
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: NEG
31631: PUSH
31632: LD_INT 2
31634: NEG
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 3
31642: PUSH
31643: LD_INT 2
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 3
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: PUSH
31663: LD_INT 3
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31688: LD_ADDR_VAR 0 17
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: LD_INT 0
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 0
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 1
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: LD_INT 1
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: EMPTY
31741: LIST
31742: LIST
31743: PUSH
31744: LD_INT 1
31746: NEG
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: LD_INT 2
31773: NEG
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 0
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: LD_INT 1
31795: NEG
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 0
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 2
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 2
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: LD_INT 2
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 2
31864: NEG
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 2
31875: NEG
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 2
31887: NEG
31888: PUSH
31889: LD_INT 2
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31918: LD_ADDR_VAR 0 18
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: LD_INT 0
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 0
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 1
31946: PUSH
31947: LD_INT 0
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 1
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: NEG
31988: PUSH
31989: LD_INT 1
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 1
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 2
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 2
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: PUSH
32064: LD_INT 2
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 0
32073: PUSH
32074: LD_INT 2
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 2
32094: NEG
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 2
32105: NEG
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 2
32117: NEG
32118: PUSH
32119: LD_INT 2
32121: NEG
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32148: LD_ADDR_VAR 0 19
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 0
32165: PUSH
32166: LD_INT 1
32168: NEG
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 1
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 1
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: PUSH
32194: LD_INT 0
32196: PUSH
32197: LD_INT 1
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: PUSH
32204: LD_INT 1
32206: NEG
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 1
32217: NEG
32218: PUSH
32219: LD_INT 1
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: LD_INT 2
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: PUSH
32271: LD_INT 2
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: EMPTY
32288: LIST
32289: LIST
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: LD_INT 2
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 0
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 2
32324: NEG
32325: PUSH
32326: LD_INT 0
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: NEG
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 2
32347: NEG
32348: PUSH
32349: LD_INT 2
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32378: LD_ADDR_VAR 0 20
32382: PUSH
32383: LD_INT 0
32385: PUSH
32386: LD_INT 0
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 1
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: LD_INT 0
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 1
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: LD_INT 1
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 1
32447: NEG
32448: PUSH
32449: LD_INT 1
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 2
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: LD_INT 0
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 2
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 2
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: LD_INT 2
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: LD_INT 2
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 2
32554: NEG
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: LD_INT 1
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 2
32577: NEG
32578: PUSH
32579: LD_INT 2
32581: NEG
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32608: LD_ADDR_VAR 0 21
32612: PUSH
32613: LD_INT 0
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 0
32625: PUSH
32626: LD_INT 1
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 1
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 0
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 1
32677: NEG
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: LD_INT 2
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: LD_INT 0
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: PUSH
32731: LD_INT 2
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 2
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: LD_INT 2
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: LD_INT 0
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: NEG
32808: PUSH
32809: LD_INT 2
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32838: LD_ADDR_VAR 0 22
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: LD_INT 0
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: LD_INT 0
32855: PUSH
32856: LD_INT 1
32858: NEG
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 2
32923: NEG
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 0
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 1
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 2
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: LD_INT 0
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 2
33025: NEG
33026: PUSH
33027: LD_INT 1
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 2
33037: NEG
33038: PUSH
33039: LD_INT 2
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33068: LD_ADDR_VAR 0 23
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 0
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 1
33137: NEG
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 2
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: LD_INT 0
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 1
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 0
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: LD_INT 1
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: LD_INT 0
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: PUSH
33253: LD_INT 2
33255: NEG
33256: PUSH
33257: LD_INT 1
33259: NEG
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 2
33267: NEG
33268: PUSH
33269: LD_INT 2
33271: NEG
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 3
33283: NEG
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 3
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 2
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 2
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33348: LD_ADDR_VAR 0 24
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 1
33559: PUSH
33560: LD_INT 2
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: LD_INT 1
33573: NEG
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 3
33591: PUSH
33592: LD_INT 2
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33624: LD_ADDR_VAR 0 25
33628: PUSH
33629: LD_INT 0
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 1
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: LD_INT 1
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: NEG
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: LD_INT 2
33709: NEG
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: LD_INT 2
33720: NEG
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 1
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 1
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 2
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 1
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 0
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: LD_INT 1
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 2
33811: NEG
33812: PUSH
33813: LD_INT 1
33815: NEG
33816: PUSH
33817: EMPTY
33818: LIST
33819: LIST
33820: PUSH
33821: LD_INT 2
33823: NEG
33824: PUSH
33825: LD_INT 2
33827: NEG
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: PUSH
33833: LD_INT 3
33835: PUSH
33836: LD_INT 1
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 3
33845: PUSH
33846: LD_INT 2
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 2
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 1
33865: PUSH
33866: LD_INT 3
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33898: LD_ADDR_VAR 0 26
33902: PUSH
33903: LD_INT 0
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 1
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 0
33946: PUSH
33947: LD_INT 1
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 0
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: LD_INT 1
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 0
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 2
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 2
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 2
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 2
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 1
34063: NEG
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 2
34074: NEG
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 1
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: LD_INT 2
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 3
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 3
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34174: LD_ADDR_VAR 0 27
34178: PUSH
34179: LD_INT 0
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 1
34194: NEG
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: PUSH
34213: LD_INT 1
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 0
34222: PUSH
34223: LD_INT 1
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: NEG
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 1
34243: NEG
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 0
34267: PUSH
34268: LD_INT 2
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 1
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 2
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: PUSH
34310: LD_INT 2
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: LD_INT 2
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 2
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: NEG
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 2
34350: NEG
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: NEG
34374: PUSH
34375: LD_INT 2
34377: NEG
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 2
34396: NEG
34397: PUSH
34398: LD_INT 1
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 3
34407: NEG
34408: PUSH
34409: LD_INT 1
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 3
34419: NEG
34420: PUSH
34421: LD_INT 2
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34454: LD_ADDR_VAR 0 28
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: LD_INT 0
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 1
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: LD_INT 0
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 2
34539: NEG
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: LD_INT 2
34550: NEG
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 0
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 2
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 1
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 2
34641: NEG
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: LD_INT 2
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: NEG
34666: PUSH
34667: LD_INT 3
34669: NEG
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: LD_INT 3
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 3
34689: NEG
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 3
34701: NEG
34702: PUSH
34703: LD_INT 2
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34736: LD_ADDR_VAR 0 29
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: PUSH
34852: LD_INT 0
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 2
34861: PUSH
34862: LD_INT 1
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 1
34871: PUSH
34872: LD_INT 2
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 2
34902: NEG
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: LD_INT 3
34930: NEG
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 3
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 3
34980: NEG
34981: PUSH
34982: LD_INT 2
34984: NEG
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35015: LD_ADDR_VAR 0 30
35019: PUSH
35020: LD_INT 0
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 1
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 0
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 1
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: NEG
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 0
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 1
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 2
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: LD_INT 1
35174: PUSH
35175: EMPTY
35176: LIST
35177: LIST
35178: PUSH
35179: LD_INT 2
35181: NEG
35182: PUSH
35183: LD_INT 0
35185: PUSH
35186: EMPTY
35187: LIST
35188: LIST
35189: PUSH
35190: LD_INT 2
35192: NEG
35193: PUSH
35194: LD_INT 1
35196: NEG
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 3
35227: PUSH
35228: LD_INT 2
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: LD_INT 3
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: PUSH
35245: LD_INT 2
35247: NEG
35248: PUSH
35249: LD_INT 1
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35293: LD_ADDR_VAR 0 31
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: LD_INT 0
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 0
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: NEG
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: LD_INT 2
35378: NEG
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 2
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 0
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 1
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: NEG
35471: PUSH
35472: LD_INT 2
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 3
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 1
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: LD_INT 3
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 1
35525: NEG
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: NEG
35537: PUSH
35538: LD_INT 2
35540: NEG
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35571: LD_ADDR_VAR 0 32
35575: PUSH
35576: LD_INT 0
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: LD_INT 0
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: LD_INT 1
35644: NEG
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: LD_INT 1
35652: NEG
35653: PUSH
35654: LD_INT 2
35656: NEG
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 2
35667: NEG
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: PUSH
35676: LD_INT 1
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: NEG
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 2
35748: NEG
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: LD_INT 3
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 2
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 3
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 2
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 2
35803: NEG
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 3
35814: NEG
35815: PUSH
35816: LD_INT 1
35818: NEG
35819: PUSH
35820: EMPTY
35821: LIST
35822: LIST
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35849: LD_ADDR_VAR 0 33
35853: PUSH
35854: LD_INT 0
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: PUSH
35888: LD_INT 1
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 1
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: NEG
35919: PUSH
35920: LD_INT 1
35922: NEG
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: LD_INT 2
35934: NEG
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: LD_INT 1
35945: NEG
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 2
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 0
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: LD_INT 2
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: LD_INT 3
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: EMPTY
36067: LIST
36068: LIST
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: LD_INT 3
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 1
36082: NEG
36083: PUSH
36084: LD_INT 2
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 3
36093: NEG
36094: PUSH
36095: LD_INT 2
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36128: LD_ADDR_VAR 0 34
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: LD_INT 0
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 1
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: PUSH
36167: LD_INT 1
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: LD_INT 1
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: NEG
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: NEG
36210: PUSH
36211: LD_INT 2
36213: NEG
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: PUSH
36219: LD_INT 0
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 1
36235: NEG
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 2
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 2
36253: PUSH
36254: LD_INT 2
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 2
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 1
36273: NEG
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: LD_INT 1
36299: NEG
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: NEG
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 1
36319: NEG
36320: PUSH
36321: LD_INT 3
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: LD_INT 2
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: LD_INT 3
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 3
36373: NEG
36374: PUSH
36375: LD_INT 1
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36408: LD_ADDR_VAR 0 35
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 1
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: NEG
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36520: LD_ADDR_VAR 0 36
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: LD_INT 0
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 1
36540: NEG
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 1
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: LD_INT 0
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36632: LD_ADDR_VAR 0 37
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 0
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 1
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: LD_INT 1
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: LD_INT 1
36705: NEG
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: LIST
36743: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36744: LD_ADDR_VAR 0 38
36748: PUSH
36749: LD_INT 0
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 1
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 2
36835: NEG
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36856: LD_ADDR_VAR 0 39
36860: PUSH
36861: LD_INT 0
36863: PUSH
36864: LD_INT 0
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 0
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: LD_INT 0
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 1
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 2
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: PUSH
36950: LD_INT 2
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36968: LD_ADDR_VAR 0 40
36972: PUSH
36973: LD_INT 0
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 0
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: LD_INT 0
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37080: LD_ADDR_VAR 0 41
37084: PUSH
37085: LD_INT 0
37087: PUSH
37088: LD_INT 0
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: LD_INT 1
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 1
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: PUSH
37119: LD_INT 1
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: LD_INT 0
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 1
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 1
37161: NEG
37162: PUSH
37163: LD_INT 2
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: LD_INT 2
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: NEG
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: LD_INT 3
37274: NEG
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 1
37285: NEG
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 3
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 3
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 2
37333: PUSH
37334: LD_INT 3
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 3
37354: NEG
37355: PUSH
37356: LD_INT 0
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 3
37365: NEG
37366: PUSH
37367: LD_INT 1
37369: NEG
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 3
37377: NEG
37378: PUSH
37379: LD_INT 2
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 3
37389: NEG
37390: PUSH
37391: LD_INT 3
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: LIST
37421: LIST
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37430: LD_ADDR_VAR 0 42
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 0
37447: PUSH
37448: LD_INT 1
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 0
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: PUSH
37469: LD_INT 1
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 1
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: NEG
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: NEG
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: LD_INT 2
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: LD_INT 1
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 2
37555: PUSH
37556: LD_INT 2
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 2
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: LD_INT 1
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: LD_INT 2
37612: NEG
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: LD_INT 3
37624: NEG
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 3
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: LD_INT 3
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 3
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 2
37686: PUSH
37687: LD_INT 3
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 3
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 3
37727: NEG
37728: PUSH
37729: LD_INT 2
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: NEG
37740: PUSH
37741: LD_INT 3
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37780: LD_ADDR_VAR 0 43
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: LD_INT 0
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: LD_INT 1
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 1
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 1
37838: NEG
37839: PUSH
37840: LD_INT 0
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 1
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: LD_INT 2
37865: NEG
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 0
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 3
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: LD_INT 3
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 1
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 2
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 3
38014: PUSH
38015: LD_INT 0
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 3
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: LD_INT 3
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 2
38065: NEG
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 3
38076: NEG
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 3
38087: NEG
38088: PUSH
38089: LD_INT 1
38091: NEG
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38128: LD_ADDR_VAR 0 44
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 1
38209: NEG
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 2
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: LD_INT 2
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 1
38272: NEG
38273: PUSH
38274: LD_INT 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 2
38283: NEG
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: NEG
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 2
38306: NEG
38307: PUSH
38308: LD_INT 2
38310: NEG
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: NEG
38319: PUSH
38320: LD_INT 3
38322: NEG
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 2
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 3
38351: PUSH
38352: LD_INT 1
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 3
38361: PUSH
38362: LD_INT 2
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 3
38371: PUSH
38372: LD_INT 3
38374: PUSH
38375: EMPTY
38376: LIST
38377: LIST
38378: PUSH
38379: LD_INT 2
38381: PUSH
38382: LD_INT 3
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 3
38402: NEG
38403: PUSH
38404: LD_INT 0
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 3
38413: NEG
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 3
38437: NEG
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38478: LD_ADDR_VAR 0 45
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 2
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: NEG
38669: PUSH
38670: LD_INT 3
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: NEG
38681: PUSH
38682: LD_INT 3
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 0
38692: PUSH
38693: LD_INT 3
38695: NEG
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 2
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 3
38724: PUSH
38725: LD_INT 3
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: LD_INT 3
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 3
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 0
38754: PUSH
38755: LD_INT 3
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 3
38775: NEG
38776: PUSH
38777: LD_INT 2
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 3
38787: NEG
38788: PUSH
38789: LD_INT 3
38791: NEG
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38828: LD_ADDR_VAR 0 46
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: LD_INT 1
38848: NEG
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 0
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: NEG
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: LD_INT 3
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 3
39032: NEG
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: LD_INT 2
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 3
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: LD_INT 3
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 1
39102: NEG
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 2
39113: NEG
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 3
39124: NEG
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 3
39135: NEG
39136: PUSH
39137: LD_INT 1
39139: NEG
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39176: LD_ADDR_VAR 0 47
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 0
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 1
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: LD_INT 1
39283: NEG
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: NEG
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39327: LD_ADDR_VAR 0 48
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 1
39400: NEG
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 2
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 2
39423: NEG
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 1
39434: NEG
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 2
39442: PUSH
39443: LD_INT 0
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39474: LD_ADDR_VAR 0 49
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 0
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39618: LD_ADDR_VAR 0 50
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 0
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 1
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 0
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 1
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: LD_INT 1
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39762: LD_ADDR_VAR 0 51
39766: PUSH
39767: LD_INT 0
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 0
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 0
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: LD_INT 1
39835: NEG
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 1
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 0
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 1
39863: NEG
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 2
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39909: LD_ADDR_VAR 0 52
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: NEG
39968: PUSH
39969: LD_INT 0
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: NEG
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40060: LD_ADDR_VAR 0 53
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: PUSH
40120: LD_INT 0
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 2
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 2
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 0
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 2
40247: NEG
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: LD_INT 2
40263: NEG
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40290: LD_ADDR_VAR 0 54
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 0
40307: PUSH
40308: LD_INT 1
40310: NEG
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 2
40375: NEG
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 2
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40520: LD_ADDR_VAR 0 55
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 1
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 1
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: NEG
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 2
40605: NEG
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 2
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 1
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: LD_INT 1
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 2
40696: NEG
40697: PUSH
40698: LD_INT 0
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40750: LD_ADDR_VAR 0 56
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 0
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: LD_INT 1
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 0
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 2
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: LD_INT 0
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 2
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 2
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 1
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: NEG
40927: PUSH
40928: LD_INT 0
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 2
40949: NEG
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40980: LD_ADDR_VAR 0 57
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 0
41028: PUSH
41029: LD_INT 1
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 0
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 1
41049: NEG
41050: PUSH
41051: LD_INT 1
41053: NEG
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 2
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 0
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: PUSH
41116: LD_INT 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 1
41125: PUSH
41126: LD_INT 2
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 2
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: LD_INT 1
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 2
41156: NEG
41157: PUSH
41158: LD_INT 0
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41210: LD_ADDR_VAR 0 58
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 0
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 1
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 2
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 1
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: LD_INT 1
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 2
41409: NEG
41410: PUSH
41411: LD_INT 2
41413: NEG
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41440: LD_ADDR_VAR 0 59
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 0
41488: PUSH
41489: LD_INT 1
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 1
41509: NEG
41510: PUSH
41511: LD_INT 1
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41528: LD_ADDR_VAR 0 60
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41616: LD_ADDR_VAR 0 61
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: NEG
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41704: LD_ADDR_VAR 0 62
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41792: LD_ADDR_VAR 0 63
41796: PUSH
41797: LD_INT 0
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: NEG
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 1
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41880: LD_ADDR_VAR 0 64
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 0
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: LD_INT 1
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 1
41949: NEG
41950: PUSH
41951: LD_INT 1
41953: NEG
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: ST_TO_ADDR
// end ; 1 :
41968: GO 47865
41970: LD_INT 1
41972: DOUBLE
41973: EQUAL
41974: IFTRUE 41978
41976: GO 44601
41978: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41979: LD_ADDR_VAR 0 11
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 3
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 0
41998: PUSH
41999: LD_INT 3
42001: NEG
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42023: LD_ADDR_VAR 0 12
42027: PUSH
42028: LD_INT 2
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42064: LD_ADDR_VAR 0 13
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42104: LD_ADDR_VAR 0 14
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 3
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 3
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: LD_INT 2
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: LIST
42144: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42145: LD_ADDR_VAR 0 15
42149: PUSH
42150: LD_INT 2
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 3
42163: NEG
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 3
42174: NEG
42175: PUSH
42176: LD_INT 1
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42189: LD_ADDR_VAR 0 16
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 3
42208: NEG
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 3
42220: NEG
42221: PUSH
42222: LD_INT 3
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42235: LD_ADDR_VAR 0 17
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 3
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: PUSH
42266: LD_INT 2
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: LIST
42278: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42279: LD_ADDR_VAR 0 18
42283: PUSH
42284: LD_INT 2
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: LD_INT 0
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42320: LD_ADDR_VAR 0 19
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: LD_INT 2
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 3
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 3
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42360: LD_ADDR_VAR 0 20
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 3
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: LD_INT 2
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42401: LD_ADDR_VAR 0 21
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: NEG
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 3
42430: NEG
42431: PUSH
42432: LD_INT 1
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42445: LD_ADDR_VAR 0 22
42449: PUSH
42450: LD_INT 2
42452: NEG
42453: PUSH
42454: LD_INT 3
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 3
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42491: LD_ADDR_VAR 0 23
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 3
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 4
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: LD_INT 3
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42535: LD_ADDR_VAR 0 24
42539: PUSH
42540: LD_INT 3
42542: PUSH
42543: LD_INT 0
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 3
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 4
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42576: LD_ADDR_VAR 0 25
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 4
42593: PUSH
42594: LD_INT 3
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: LD_INT 4
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42616: LD_ADDR_VAR 0 26
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 3
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: LD_INT 4
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 1
42643: NEG
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: LIST
42656: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42657: LD_ADDR_VAR 0 27
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 3
42675: NEG
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 4
42686: NEG
42687: PUSH
42688: LD_INT 1
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42701: LD_ADDR_VAR 0 28
42705: PUSH
42706: LD_INT 3
42708: NEG
42709: PUSH
42710: LD_INT 3
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 3
42720: NEG
42721: PUSH
42722: LD_INT 4
42724: NEG
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 4
42732: NEG
42733: PUSH
42734: LD_INT 3
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42747: LD_ADDR_VAR 0 29
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 3
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 3
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: LD_INT 4
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 4
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 5
42826: NEG
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 5
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: PUSH
42846: LD_INT 4
42848: NEG
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: LD_INT 6
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: LD_INT 6
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 5
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42902: LD_ADDR_VAR 0 30
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 3
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 3
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 4
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 4
42961: PUSH
42962: LD_INT 1
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 4
42971: PUSH
42972: LD_INT 1
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 5
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 5
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 5
43002: PUSH
43003: LD_INT 1
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 6
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 6
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43045: LD_ADDR_VAR 0 31
43049: PUSH
43050: LD_INT 3
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 3
43062: PUSH
43063: LD_INT 3
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 4
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 4
43092: PUSH
43093: LD_INT 4
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 3
43102: PUSH
43103: LD_INT 4
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 5
43112: PUSH
43113: LD_INT 4
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 5
43122: PUSH
43123: LD_INT 5
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 4
43132: PUSH
43133: LD_INT 5
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 6
43142: PUSH
43143: LD_INT 5
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 6
43152: PUSH
43153: LD_INT 6
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 5
43162: PUSH
43163: LD_INT 6
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43184: LD_ADDR_VAR 0 32
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 4
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: LD_INT 4
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: LD_INT 3
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 5
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 5
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 4
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: LD_INT 6
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: LD_INT 6
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 5
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43327: LD_ADDR_VAR 0 33
43331: PUSH
43332: LD_INT 2
43334: NEG
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 3
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: NEG
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 4
43379: NEG
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 4
43390: NEG
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 4
43402: NEG
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 5
43413: NEG
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 5
43424: NEG
43425: PUSH
43426: LD_INT 1
43428: NEG
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 5
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 6
43447: NEG
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 6
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43482: LD_ADDR_VAR 0 34
43486: PUSH
43487: LD_INT 2
43489: NEG
43490: PUSH
43491: LD_INT 3
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 3
43525: NEG
43526: PUSH
43527: LD_INT 4
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 4
43537: NEG
43538: PUSH
43539: LD_INT 3
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 4
43549: NEG
43550: PUSH
43551: LD_INT 4
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 4
43561: NEG
43562: PUSH
43563: LD_INT 5
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 5
43573: NEG
43574: PUSH
43575: LD_INT 4
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 5
43585: NEG
43586: PUSH
43587: LD_INT 5
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 5
43597: NEG
43598: PUSH
43599: LD_INT 6
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 6
43609: NEG
43610: PUSH
43611: LD_INT 5
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 6
43621: NEG
43622: PUSH
43623: LD_INT 6
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43645: LD_ADDR_VAR 0 41
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43689: LD_ADDR_VAR 0 42
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 2
43706: PUSH
43707: LD_INT 1
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43730: LD_ADDR_VAR 0 43
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: LD_INT 3
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43770: LD_ADDR_VAR 0 44
43774: PUSH
43775: LD_INT 0
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 1
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 1
43797: NEG
43798: PUSH
43799: LD_INT 2
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43811: LD_ADDR_VAR 0 45
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: LD_INT 1
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43855: LD_ADDR_VAR 0 46
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: LD_INT 3
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43901: LD_ADDR_VAR 0 47
43905: PUSH
43906: LD_INT 2
43908: NEG
43909: PUSH
43910: LD_INT 3
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43934: LD_ADDR_VAR 0 48
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 1
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: EMPTY
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43965: LD_ADDR_VAR 0 49
43969: PUSH
43970: LD_INT 3
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 3
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43994: LD_ADDR_VAR 0 50
43998: PUSH
43999: LD_INT 2
44001: PUSH
44002: LD_INT 3
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: LD_INT 3
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44023: LD_ADDR_VAR 0 51
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 2
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 2
44041: NEG
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44054: LD_ADDR_VAR 0 52
44058: PUSH
44059: LD_INT 3
44061: NEG
44062: PUSH
44063: LD_INT 1
44065: NEG
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44087: LD_ADDR_VAR 0 53
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 3
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 3
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44131: LD_ADDR_VAR 0 54
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 1
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 3
44149: PUSH
44150: LD_INT 0
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44172: LD_ADDR_VAR 0 55
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44212: LD_ADDR_VAR 0 56
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44253: LD_ADDR_VAR 0 57
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 3
44282: NEG
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: EMPTY
44293: LIST
44294: LIST
44295: LIST
44296: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44297: LD_ADDR_VAR 0 58
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 3
44328: NEG
44329: PUSH
44330: LD_INT 3
44332: NEG
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44343: LD_ADDR_VAR 0 59
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44387: LD_ADDR_VAR 0 60
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44428: LD_ADDR_VAR 0 61
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: LIST
44467: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44468: LD_ADDR_VAR 0 62
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 2
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 2
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44509: LD_ADDR_VAR 0 63
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: LD_INT 0
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: LIST
44552: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44553: LD_ADDR_VAR 0 64
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// end ; 2 :
44599: GO 47865
44601: LD_INT 2
44603: DOUBLE
44604: EQUAL
44605: IFTRUE 44609
44607: GO 47864
44609: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44610: LD_ADDR_VAR 0 29
44614: PUSH
44615: LD_INT 4
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 4
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 5
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 5
44648: PUSH
44649: LD_INT 1
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 4
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 1
44681: NEG
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 3
44689: PUSH
44690: LD_INT 2
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 5
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: LD_INT 3
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: LD_INT 2
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 4
44730: PUSH
44731: LD_INT 3
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 4
44740: PUSH
44741: LD_INT 4
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: LD_INT 4
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 3
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 4
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 4
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 4
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 4
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 5
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: LD_INT 5
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 4
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 3
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 5
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 3
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: NEG
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 2
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 3
44938: NEG
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 4
44949: NEG
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 4
44960: NEG
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 4
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 4
44995: NEG
44996: PUSH
44997: LD_INT 4
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 4
45007: NEG
45008: PUSH
45009: LD_INT 5
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 3
45019: NEG
45020: PUSH
45021: LD_INT 4
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: NEG
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 4
45043: NEG
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 5
45055: NEG
45056: PUSH
45057: LD_INT 4
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 5
45067: NEG
45068: PUSH
45069: LD_INT 5
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 3
45079: NEG
45080: PUSH
45081: LD_INT 5
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 5
45091: NEG
45092: PUSH
45093: LD_INT 3
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45148: LD_ADDR_VAR 0 30
45152: PUSH
45153: LD_INT 4
45155: PUSH
45156: LD_INT 4
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 4
45165: PUSH
45166: LD_INT 3
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 5
45175: PUSH
45176: LD_INT 4
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 5
45185: PUSH
45186: LD_INT 5
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 4
45195: PUSH
45196: LD_INT 5
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: LD_INT 4
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 3
45215: PUSH
45216: LD_INT 3
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 5
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 3
45235: PUSH
45236: LD_INT 5
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 4
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 4
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 3
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 1
45306: NEG
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: LD_INT 4
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 4
45338: NEG
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 4
45349: NEG
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 3
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 4
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 5
45394: NEG
45395: PUSH
45396: LD_INT 0
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 5
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 5
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 3
45429: NEG
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 3
45440: NEG
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 3
45452: NEG
45453: PUSH
45454: LD_INT 4
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 2
45464: NEG
45465: PUSH
45466: LD_INT 3
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 3
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 4
45500: NEG
45501: PUSH
45502: LD_INT 3
45504: NEG
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 4
45512: NEG
45513: PUSH
45514: LD_INT 4
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 4
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 4
45536: NEG
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 4
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 5
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: PUSH
45571: LD_INT 4
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 3
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 3
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: LD_INT 4
45607: NEG
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: NEG
45616: PUSH
45617: LD_INT 5
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: LD_INT 3
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: LD_INT 5
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45695: LD_ADDR_VAR 0 31
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 4
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 4
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 5
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 5
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: LD_INT 4
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: NEG
45764: PUSH
45765: LD_INT 3
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 5
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: LD_INT 3
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 3
45795: NEG
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 3
45806: NEG
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 3
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 4
45851: NEG
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 4
45862: NEG
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 4
45874: NEG
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 4
45897: NEG
45898: PUSH
45899: LD_INT 4
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 4
45909: NEG
45910: PUSH
45911: LD_INT 5
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: LD_INT 4
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 4
45945: NEG
45946: PUSH
45947: LD_INT 3
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 5
45957: NEG
45958: PUSH
45959: LD_INT 4
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 5
45969: NEG
45970: PUSH
45971: LD_INT 5
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 3
45981: NEG
45982: PUSH
45983: LD_INT 5
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 5
45993: NEG
45994: PUSH
45995: LD_INT 3
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 3
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 4
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 3
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 1
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: NEG
46061: PUSH
46062: LD_INT 3
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 4
46076: NEG
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 2
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 4
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 4
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 4
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 5
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 5
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 4
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 3
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 3
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 5
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46245: LD_ADDR_VAR 0 32
46249: PUSH
46250: LD_INT 4
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 4
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 3
46275: NEG
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 3
46286: NEG
46287: PUSH
46288: LD_INT 1
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 4
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 5
46308: NEG
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 5
46319: NEG
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 5
46331: NEG
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: LD_INT 4
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: LD_INT 3
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: NEG
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 3
46402: NEG
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 4
46414: NEG
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 4
46426: NEG
46427: PUSH
46428: LD_INT 4
46430: NEG
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: LD_INT 4
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 4
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 5
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 4
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 4
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: LD_INT 5
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: LD_INT 3
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 5
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 1
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 4
46585: PUSH
46586: LD_INT 0
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 4
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 4
46647: PUSH
46648: LD_INT 2
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 4
46657: PUSH
46658: LD_INT 4
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 4
46667: PUSH
46668: LD_INT 3
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 5
46677: PUSH
46678: LD_INT 4
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 5
46687: PUSH
46688: LD_INT 5
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 4
46697: PUSH
46698: LD_INT 5
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 3
46707: PUSH
46708: LD_INT 4
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 3
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 5
46727: PUSH
46728: LD_INT 3
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: LD_INT 5
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46792: LD_ADDR_VAR 0 33
46796: PUSH
46797: LD_INT 4
46799: NEG
46800: PUSH
46801: LD_INT 4
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 4
46811: NEG
46812: PUSH
46813: LD_INT 5
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 3
46823: NEG
46824: PUSH
46825: LD_INT 4
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: LD_INT 3
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 4
46847: NEG
46848: PUSH
46849: LD_INT 3
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 5
46859: NEG
46860: PUSH
46861: LD_INT 4
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 5
46871: NEG
46872: PUSH
46873: LD_INT 5
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: NEG
46884: PUSH
46885: LD_INT 5
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 5
46895: NEG
46896: PUSH
46897: LD_INT 3
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 0
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 4
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: LD_INT 2
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 4
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 2
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 2
46997: NEG
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 4
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 4
47019: PUSH
47020: LD_INT 1
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 5
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 5
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 4
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 3
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 5
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 3
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 4
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 4
47132: PUSH
47133: LD_INT 4
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 3
47142: PUSH
47143: LD_INT 4
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 4
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 5
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 5
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 4
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 5
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 3
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: LIST
47323: LIST
47324: LIST
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47330: LD_ADDR_VAR 0 34
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 4
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 5
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: LD_INT 4
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 3
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 4
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: LD_INT 5
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: LD_INT 3
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 5
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: LD_INT 1
47452: NEG
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 4
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 4
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: PUSH
47481: LD_INT 1
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 2
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 2
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 4
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 4
47532: PUSH
47533: LD_INT 4
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: LD_INT 3
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 5
47552: PUSH
47553: LD_INT 4
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 5
47562: PUSH
47563: LD_INT 5
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: PUSH
47573: LD_INT 5
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: LD_INT 4
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 5
47602: PUSH
47603: LD_INT 3
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 3
47612: PUSH
47613: LD_INT 5
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 3
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 2
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: LD_INT 4
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: LD_INT 4
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 1
47672: NEG
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 1
47683: NEG
47684: PUSH
47685: LD_INT 2
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 2
47694: PUSH
47695: LD_INT 4
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 4
47715: NEG
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 4
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: NEG
47739: PUSH
47740: LD_INT 0
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 4
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 5
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 5
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 5
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// end ; end ;
47862: GO 47865
47864: POP
// case btype of b_depot , b_warehouse :
47865: LD_VAR 0 1
47869: PUSH
47870: LD_INT 0
47872: DOUBLE
47873: EQUAL
47874: IFTRUE 47884
47876: LD_INT 1
47878: DOUBLE
47879: EQUAL
47880: IFTRUE 47884
47882: GO 48085
47884: POP
// case nation of nation_american :
47885: LD_VAR 0 5
47889: PUSH
47890: LD_INT 1
47892: DOUBLE
47893: EQUAL
47894: IFTRUE 47898
47896: GO 47954
47898: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47899: LD_ADDR_VAR 0 9
47903: PUSH
47904: LD_VAR 0 11
47908: PUSH
47909: LD_VAR 0 12
47913: PUSH
47914: LD_VAR 0 13
47918: PUSH
47919: LD_VAR 0 14
47923: PUSH
47924: LD_VAR 0 15
47928: PUSH
47929: LD_VAR 0 16
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: PUSH
47942: LD_VAR 0 4
47946: PUSH
47947: LD_INT 1
47949: PLUS
47950: ARRAY
47951: ST_TO_ADDR
47952: GO 48083
47954: LD_INT 2
47956: DOUBLE
47957: EQUAL
47958: IFTRUE 47962
47960: GO 48018
47962: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47963: LD_ADDR_VAR 0 9
47967: PUSH
47968: LD_VAR 0 17
47972: PUSH
47973: LD_VAR 0 18
47977: PUSH
47978: LD_VAR 0 19
47982: PUSH
47983: LD_VAR 0 20
47987: PUSH
47988: LD_VAR 0 21
47992: PUSH
47993: LD_VAR 0 22
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: PUSH
48006: LD_VAR 0 4
48010: PUSH
48011: LD_INT 1
48013: PLUS
48014: ARRAY
48015: ST_TO_ADDR
48016: GO 48083
48018: LD_INT 3
48020: DOUBLE
48021: EQUAL
48022: IFTRUE 48026
48024: GO 48082
48026: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48027: LD_ADDR_VAR 0 9
48031: PUSH
48032: LD_VAR 0 23
48036: PUSH
48037: LD_VAR 0 24
48041: PUSH
48042: LD_VAR 0 25
48046: PUSH
48047: LD_VAR 0 26
48051: PUSH
48052: LD_VAR 0 27
48056: PUSH
48057: LD_VAR 0 28
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: LIST
48069: PUSH
48070: LD_VAR 0 4
48074: PUSH
48075: LD_INT 1
48077: PLUS
48078: ARRAY
48079: ST_TO_ADDR
48080: GO 48083
48082: POP
48083: GO 48638
48085: LD_INT 2
48087: DOUBLE
48088: EQUAL
48089: IFTRUE 48099
48091: LD_INT 3
48093: DOUBLE
48094: EQUAL
48095: IFTRUE 48099
48097: GO 48155
48099: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48100: LD_ADDR_VAR 0 9
48104: PUSH
48105: LD_VAR 0 29
48109: PUSH
48110: LD_VAR 0 30
48114: PUSH
48115: LD_VAR 0 31
48119: PUSH
48120: LD_VAR 0 32
48124: PUSH
48125: LD_VAR 0 33
48129: PUSH
48130: LD_VAR 0 34
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: PUSH
48143: LD_VAR 0 4
48147: PUSH
48148: LD_INT 1
48150: PLUS
48151: ARRAY
48152: ST_TO_ADDR
48153: GO 48638
48155: LD_INT 16
48157: DOUBLE
48158: EQUAL
48159: IFTRUE 48217
48161: LD_INT 17
48163: DOUBLE
48164: EQUAL
48165: IFTRUE 48217
48167: LD_INT 18
48169: DOUBLE
48170: EQUAL
48171: IFTRUE 48217
48173: LD_INT 19
48175: DOUBLE
48176: EQUAL
48177: IFTRUE 48217
48179: LD_INT 22
48181: DOUBLE
48182: EQUAL
48183: IFTRUE 48217
48185: LD_INT 20
48187: DOUBLE
48188: EQUAL
48189: IFTRUE 48217
48191: LD_INT 21
48193: DOUBLE
48194: EQUAL
48195: IFTRUE 48217
48197: LD_INT 23
48199: DOUBLE
48200: EQUAL
48201: IFTRUE 48217
48203: LD_INT 24
48205: DOUBLE
48206: EQUAL
48207: IFTRUE 48217
48209: LD_INT 25
48211: DOUBLE
48212: EQUAL
48213: IFTRUE 48217
48215: GO 48273
48217: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48218: LD_ADDR_VAR 0 9
48222: PUSH
48223: LD_VAR 0 35
48227: PUSH
48228: LD_VAR 0 36
48232: PUSH
48233: LD_VAR 0 37
48237: PUSH
48238: LD_VAR 0 38
48242: PUSH
48243: LD_VAR 0 39
48247: PUSH
48248: LD_VAR 0 40
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: PUSH
48261: LD_VAR 0 4
48265: PUSH
48266: LD_INT 1
48268: PLUS
48269: ARRAY
48270: ST_TO_ADDR
48271: GO 48638
48273: LD_INT 6
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48329
48279: LD_INT 7
48281: DOUBLE
48282: EQUAL
48283: IFTRUE 48329
48285: LD_INT 8
48287: DOUBLE
48288: EQUAL
48289: IFTRUE 48329
48291: LD_INT 13
48293: DOUBLE
48294: EQUAL
48295: IFTRUE 48329
48297: LD_INT 12
48299: DOUBLE
48300: EQUAL
48301: IFTRUE 48329
48303: LD_INT 15
48305: DOUBLE
48306: EQUAL
48307: IFTRUE 48329
48309: LD_INT 11
48311: DOUBLE
48312: EQUAL
48313: IFTRUE 48329
48315: LD_INT 14
48317: DOUBLE
48318: EQUAL
48319: IFTRUE 48329
48321: LD_INT 10
48323: DOUBLE
48324: EQUAL
48325: IFTRUE 48329
48327: GO 48385
48329: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48330: LD_ADDR_VAR 0 9
48334: PUSH
48335: LD_VAR 0 41
48339: PUSH
48340: LD_VAR 0 42
48344: PUSH
48345: LD_VAR 0 43
48349: PUSH
48350: LD_VAR 0 44
48354: PUSH
48355: LD_VAR 0 45
48359: PUSH
48360: LD_VAR 0 46
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: PUSH
48373: LD_VAR 0 4
48377: PUSH
48378: LD_INT 1
48380: PLUS
48381: ARRAY
48382: ST_TO_ADDR
48383: GO 48638
48385: LD_INT 36
48387: DOUBLE
48388: EQUAL
48389: IFTRUE 48393
48391: GO 48449
48393: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48394: LD_ADDR_VAR 0 9
48398: PUSH
48399: LD_VAR 0 47
48403: PUSH
48404: LD_VAR 0 48
48408: PUSH
48409: LD_VAR 0 49
48413: PUSH
48414: LD_VAR 0 50
48418: PUSH
48419: LD_VAR 0 51
48423: PUSH
48424: LD_VAR 0 52
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: PUSH
48437: LD_VAR 0 4
48441: PUSH
48442: LD_INT 1
48444: PLUS
48445: ARRAY
48446: ST_TO_ADDR
48447: GO 48638
48449: LD_INT 4
48451: DOUBLE
48452: EQUAL
48453: IFTRUE 48475
48455: LD_INT 5
48457: DOUBLE
48458: EQUAL
48459: IFTRUE 48475
48461: LD_INT 34
48463: DOUBLE
48464: EQUAL
48465: IFTRUE 48475
48467: LD_INT 37
48469: DOUBLE
48470: EQUAL
48471: IFTRUE 48475
48473: GO 48531
48475: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48476: LD_ADDR_VAR 0 9
48480: PUSH
48481: LD_VAR 0 53
48485: PUSH
48486: LD_VAR 0 54
48490: PUSH
48491: LD_VAR 0 55
48495: PUSH
48496: LD_VAR 0 56
48500: PUSH
48501: LD_VAR 0 57
48505: PUSH
48506: LD_VAR 0 58
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: PUSH
48519: LD_VAR 0 4
48523: PUSH
48524: LD_INT 1
48526: PLUS
48527: ARRAY
48528: ST_TO_ADDR
48529: GO 48638
48531: LD_INT 31
48533: DOUBLE
48534: EQUAL
48535: IFTRUE 48581
48537: LD_INT 32
48539: DOUBLE
48540: EQUAL
48541: IFTRUE 48581
48543: LD_INT 33
48545: DOUBLE
48546: EQUAL
48547: IFTRUE 48581
48549: LD_INT 27
48551: DOUBLE
48552: EQUAL
48553: IFTRUE 48581
48555: LD_INT 26
48557: DOUBLE
48558: EQUAL
48559: IFTRUE 48581
48561: LD_INT 28
48563: DOUBLE
48564: EQUAL
48565: IFTRUE 48581
48567: LD_INT 29
48569: DOUBLE
48570: EQUAL
48571: IFTRUE 48581
48573: LD_INT 30
48575: DOUBLE
48576: EQUAL
48577: IFTRUE 48581
48579: GO 48637
48581: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48582: LD_ADDR_VAR 0 9
48586: PUSH
48587: LD_VAR 0 59
48591: PUSH
48592: LD_VAR 0 60
48596: PUSH
48597: LD_VAR 0 61
48601: PUSH
48602: LD_VAR 0 62
48606: PUSH
48607: LD_VAR 0 63
48611: PUSH
48612: LD_VAR 0 64
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: PUSH
48625: LD_VAR 0 4
48629: PUSH
48630: LD_INT 1
48632: PLUS
48633: ARRAY
48634: ST_TO_ADDR
48635: GO 48638
48637: POP
// temp_list2 = [ ] ;
48638: LD_ADDR_VAR 0 10
48642: PUSH
48643: EMPTY
48644: ST_TO_ADDR
// for i in temp_list do
48645: LD_ADDR_VAR 0 8
48649: PUSH
48650: LD_VAR 0 9
48654: PUSH
48655: FOR_IN
48656: IFFALSE 48708
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48658: LD_ADDR_VAR 0 10
48662: PUSH
48663: LD_VAR 0 10
48667: PUSH
48668: LD_VAR 0 8
48672: PUSH
48673: LD_INT 1
48675: ARRAY
48676: PUSH
48677: LD_VAR 0 2
48681: PLUS
48682: PUSH
48683: LD_VAR 0 8
48687: PUSH
48688: LD_INT 2
48690: ARRAY
48691: PUSH
48692: LD_VAR 0 3
48696: PLUS
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: EMPTY
48703: LIST
48704: ADD
48705: ST_TO_ADDR
48706: GO 48655
48708: POP
48709: POP
// result = temp_list2 ;
48710: LD_ADDR_VAR 0 7
48714: PUSH
48715: LD_VAR 0 10
48719: ST_TO_ADDR
// end ;
48720: LD_VAR 0 7
48724: RET
// export function EnemyInRange ( unit , dist ) ; begin
48725: LD_INT 0
48727: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48728: LD_ADDR_VAR 0 3
48732: PUSH
48733: LD_VAR 0 1
48737: PPUSH
48738: CALL_OW 255
48742: PPUSH
48743: LD_VAR 0 1
48747: PPUSH
48748: CALL_OW 250
48752: PPUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: CALL_OW 251
48762: PPUSH
48763: LD_VAR 0 2
48767: PPUSH
48768: CALL 21982 0 4
48772: PUSH
48773: LD_INT 4
48775: ARRAY
48776: ST_TO_ADDR
// end ;
48777: LD_VAR 0 3
48781: RET
// export function PlayerSeeMe ( unit ) ; begin
48782: LD_INT 0
48784: PPUSH
// result := See ( your_side , unit ) ;
48785: LD_ADDR_VAR 0 2
48789: PUSH
48790: LD_OWVAR 2
48794: PPUSH
48795: LD_VAR 0 1
48799: PPUSH
48800: CALL_OW 292
48804: ST_TO_ADDR
// end ;
48805: LD_VAR 0 2
48809: RET
// export function ReverseDir ( unit ) ; begin
48810: LD_INT 0
48812: PPUSH
// if not unit then
48813: LD_VAR 0 1
48817: NOT
48818: IFFALSE 48822
// exit ;
48820: GO 48845
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48822: LD_ADDR_VAR 0 2
48826: PUSH
48827: LD_VAR 0 1
48831: PPUSH
48832: CALL_OW 254
48836: PUSH
48837: LD_INT 3
48839: PLUS
48840: PUSH
48841: LD_INT 6
48843: MOD
48844: ST_TO_ADDR
// end ;
48845: LD_VAR 0 2
48849: RET
// export function ReverseArray ( array ) ; var i ; begin
48850: LD_INT 0
48852: PPUSH
48853: PPUSH
// if not array then
48854: LD_VAR 0 1
48858: NOT
48859: IFFALSE 48863
// exit ;
48861: GO 48918
// result := [ ] ;
48863: LD_ADDR_VAR 0 2
48867: PUSH
48868: EMPTY
48869: ST_TO_ADDR
// for i := array downto 1 do
48870: LD_ADDR_VAR 0 3
48874: PUSH
48875: DOUBLE
48876: LD_VAR 0 1
48880: INC
48881: ST_TO_ADDR
48882: LD_INT 1
48884: PUSH
48885: FOR_DOWNTO
48886: IFFALSE 48916
// result := Join ( result , array [ i ] ) ;
48888: LD_ADDR_VAR 0 2
48892: PUSH
48893: LD_VAR 0 2
48897: PPUSH
48898: LD_VAR 0 1
48902: PUSH
48903: LD_VAR 0 3
48907: ARRAY
48908: PPUSH
48909: CALL 53760 0 2
48913: ST_TO_ADDR
48914: GO 48885
48916: POP
48917: POP
// end ;
48918: LD_VAR 0 2
48922: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48923: LD_INT 0
48925: PPUSH
48926: PPUSH
48927: PPUSH
48928: PPUSH
48929: PPUSH
48930: PPUSH
// if not unit or not hexes then
48931: LD_VAR 0 1
48935: NOT
48936: IFTRUE 48945
48938: PUSH
48939: LD_VAR 0 2
48943: NOT
48944: OR
48945: IFFALSE 48949
// exit ;
48947: GO 49072
// dist := 9999 ;
48949: LD_ADDR_VAR 0 5
48953: PUSH
48954: LD_INT 9999
48956: ST_TO_ADDR
// for i = 1 to hexes do
48957: LD_ADDR_VAR 0 4
48961: PUSH
48962: DOUBLE
48963: LD_INT 1
48965: DEC
48966: ST_TO_ADDR
48967: LD_VAR 0 2
48971: PUSH
48972: FOR_TO
48973: IFFALSE 49060
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48975: LD_ADDR_VAR 0 6
48979: PUSH
48980: LD_VAR 0 1
48984: PPUSH
48985: LD_VAR 0 2
48989: PUSH
48990: LD_VAR 0 4
48994: ARRAY
48995: PUSH
48996: LD_INT 1
48998: ARRAY
48999: PPUSH
49000: LD_VAR 0 2
49004: PUSH
49005: LD_VAR 0 4
49009: ARRAY
49010: PUSH
49011: LD_INT 2
49013: ARRAY
49014: PPUSH
49015: CALL_OW 297
49019: ST_TO_ADDR
// if tdist < dist then
49020: LD_VAR 0 6
49024: PUSH
49025: LD_VAR 0 5
49029: LESS
49030: IFFALSE 49058
// begin hex := hexes [ i ] ;
49032: LD_ADDR_VAR 0 8
49036: PUSH
49037: LD_VAR 0 2
49041: PUSH
49042: LD_VAR 0 4
49046: ARRAY
49047: ST_TO_ADDR
// dist := tdist ;
49048: LD_ADDR_VAR 0 5
49052: PUSH
49053: LD_VAR 0 6
49057: ST_TO_ADDR
// end ; end ;
49058: GO 48972
49060: POP
49061: POP
// result := hex ;
49062: LD_ADDR_VAR 0 3
49066: PUSH
49067: LD_VAR 0 8
49071: ST_TO_ADDR
// end ;
49072: LD_VAR 0 3
49076: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49077: LD_INT 0
49079: PPUSH
49080: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49081: LD_VAR 0 1
49085: NOT
49086: IFTRUE 49125
49088: PUSH
49089: LD_VAR 0 1
49093: PUSH
49094: LD_INT 21
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 23
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PPUSH
49118: CALL_OW 69
49122: IN
49123: NOT
49124: OR
49125: IFFALSE 49129
// exit ;
49127: GO 49176
// for i = 1 to 3 do
49129: LD_ADDR_VAR 0 3
49133: PUSH
49134: DOUBLE
49135: LD_INT 1
49137: DEC
49138: ST_TO_ADDR
49139: LD_INT 3
49141: PUSH
49142: FOR_TO
49143: IFFALSE 49174
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49145: LD_VAR 0 1
49149: PPUSH
49150: CALL_OW 250
49154: PPUSH
49155: LD_VAR 0 1
49159: PPUSH
49160: CALL_OW 251
49164: PPUSH
49165: LD_INT 1
49167: PPUSH
49168: CALL_OW 453
49172: GO 49142
49174: POP
49175: POP
// end ;
49176: LD_VAR 0 2
49180: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49181: LD_INT 0
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
49188: PPUSH
// if not unit or not enemy_unit then
49189: LD_VAR 0 1
49193: NOT
49194: IFTRUE 49203
49196: PUSH
49197: LD_VAR 0 2
49201: NOT
49202: OR
49203: IFFALSE 49207
// exit ;
49205: GO 49678
// if GetLives ( i ) < 250 then
49207: LD_VAR 0 4
49211: PPUSH
49212: CALL_OW 256
49216: PUSH
49217: LD_INT 250
49219: LESS
49220: IFFALSE 49233
// begin ComAutodestruct ( i ) ;
49222: LD_VAR 0 4
49226: PPUSH
49227: CALL 49077 0 1
// exit ;
49231: GO 49678
// end ; x := GetX ( enemy_unit ) ;
49233: LD_ADDR_VAR 0 7
49237: PUSH
49238: LD_VAR 0 2
49242: PPUSH
49243: CALL_OW 250
49247: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49248: LD_ADDR_VAR 0 8
49252: PUSH
49253: LD_VAR 0 2
49257: PPUSH
49258: CALL_OW 251
49262: ST_TO_ADDR
// if not x or not y then
49263: LD_VAR 0 7
49267: NOT
49268: IFTRUE 49277
49270: PUSH
49271: LD_VAR 0 8
49275: NOT
49276: OR
49277: IFFALSE 49281
// exit ;
49279: GO 49678
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49281: LD_ADDR_VAR 0 6
49285: PUSH
49286: LD_VAR 0 7
49290: PPUSH
49291: LD_INT 0
49293: PPUSH
49294: LD_INT 4
49296: PPUSH
49297: CALL_OW 272
49301: PUSH
49302: LD_VAR 0 8
49306: PPUSH
49307: LD_INT 0
49309: PPUSH
49310: LD_INT 4
49312: PPUSH
49313: CALL_OW 273
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_VAR 0 7
49326: PPUSH
49327: LD_INT 1
49329: PPUSH
49330: LD_INT 4
49332: PPUSH
49333: CALL_OW 272
49337: PUSH
49338: LD_VAR 0 8
49342: PPUSH
49343: LD_INT 1
49345: PPUSH
49346: LD_INT 4
49348: PPUSH
49349: CALL_OW 273
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_VAR 0 7
49362: PPUSH
49363: LD_INT 2
49365: PPUSH
49366: LD_INT 4
49368: PPUSH
49369: CALL_OW 272
49373: PUSH
49374: LD_VAR 0 8
49378: PPUSH
49379: LD_INT 2
49381: PPUSH
49382: LD_INT 4
49384: PPUSH
49385: CALL_OW 273
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_VAR 0 7
49398: PPUSH
49399: LD_INT 3
49401: PPUSH
49402: LD_INT 4
49404: PPUSH
49405: CALL_OW 272
49409: PUSH
49410: LD_VAR 0 8
49414: PPUSH
49415: LD_INT 3
49417: PPUSH
49418: LD_INT 4
49420: PPUSH
49421: CALL_OW 273
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_VAR 0 7
49434: PPUSH
49435: LD_INT 4
49437: PPUSH
49438: LD_INT 4
49440: PPUSH
49441: CALL_OW 272
49445: PUSH
49446: LD_VAR 0 8
49450: PPUSH
49451: LD_INT 4
49453: PPUSH
49454: LD_INT 4
49456: PPUSH
49457: CALL_OW 273
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_VAR 0 7
49470: PPUSH
49471: LD_INT 5
49473: PPUSH
49474: LD_INT 4
49476: PPUSH
49477: CALL_OW 272
49481: PUSH
49482: LD_VAR 0 8
49486: PPUSH
49487: LD_INT 5
49489: PPUSH
49490: LD_INT 4
49492: PPUSH
49493: CALL_OW 273
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: ST_TO_ADDR
// for i = tmp downto 1 do
49510: LD_ADDR_VAR 0 4
49514: PUSH
49515: DOUBLE
49516: LD_VAR 0 6
49520: INC
49521: ST_TO_ADDR
49522: LD_INT 1
49524: PUSH
49525: FOR_DOWNTO
49526: IFFALSE 49629
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49528: LD_VAR 0 6
49532: PUSH
49533: LD_VAR 0 4
49537: ARRAY
49538: PUSH
49539: LD_INT 1
49541: ARRAY
49542: PPUSH
49543: LD_VAR 0 6
49547: PUSH
49548: LD_VAR 0 4
49552: ARRAY
49553: PUSH
49554: LD_INT 2
49556: ARRAY
49557: PPUSH
49558: CALL_OW 488
49562: NOT
49563: IFTRUE 49605
49565: PUSH
49566: LD_VAR 0 6
49570: PUSH
49571: LD_VAR 0 4
49575: ARRAY
49576: PUSH
49577: LD_INT 1
49579: ARRAY
49580: PPUSH
49581: LD_VAR 0 6
49585: PUSH
49586: LD_VAR 0 4
49590: ARRAY
49591: PUSH
49592: LD_INT 2
49594: ARRAY
49595: PPUSH
49596: CALL_OW 428
49600: PUSH
49601: LD_INT 0
49603: NONEQUAL
49604: OR
49605: IFFALSE 49627
// tmp := Delete ( tmp , i ) ;
49607: LD_ADDR_VAR 0 6
49611: PUSH
49612: LD_VAR 0 6
49616: PPUSH
49617: LD_VAR 0 4
49621: PPUSH
49622: CALL_OW 3
49626: ST_TO_ADDR
49627: GO 49525
49629: POP
49630: POP
// j := GetClosestHex ( unit , tmp ) ;
49631: LD_ADDR_VAR 0 5
49635: PUSH
49636: LD_VAR 0 1
49640: PPUSH
49641: LD_VAR 0 6
49645: PPUSH
49646: CALL 48923 0 2
49650: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49651: LD_VAR 0 1
49655: PPUSH
49656: LD_VAR 0 5
49660: PUSH
49661: LD_INT 1
49663: ARRAY
49664: PPUSH
49665: LD_VAR 0 5
49669: PUSH
49670: LD_INT 2
49672: ARRAY
49673: PPUSH
49674: CALL_OW 111
// end ;
49678: LD_VAR 0 3
49682: RET
// export function PrepareApemanSoldier ( ) ; begin
49683: LD_INT 0
49685: PPUSH
// uc_nation := 0 ;
49686: LD_ADDR_OWVAR 21
49690: PUSH
49691: LD_INT 0
49693: ST_TO_ADDR
// hc_sex := sex_male ;
49694: LD_ADDR_OWVAR 27
49698: PUSH
49699: LD_INT 1
49701: ST_TO_ADDR
// hc_name :=  ;
49702: LD_ADDR_OWVAR 26
49706: PUSH
49707: LD_STRING 
49709: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49710: LD_ADDR_OWVAR 28
49714: PUSH
49715: LD_INT 15
49717: ST_TO_ADDR
// hc_gallery :=  ;
49718: LD_ADDR_OWVAR 33
49722: PUSH
49723: LD_STRING 
49725: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49726: LD_ADDR_OWVAR 31
49730: PUSH
49731: LD_INT 0
49733: PPUSH
49734: LD_INT 3
49736: PPUSH
49737: CALL_OW 12
49741: PUSH
49742: LD_INT 0
49744: PPUSH
49745: LD_INT 3
49747: PPUSH
49748: CALL_OW 12
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49765: LD_ADDR_OWVAR 29
49769: PUSH
49770: LD_INT 12
49772: PUSH
49773: LD_INT 12
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// end ;
49780: LD_VAR 0 1
49784: RET
// export function PrepareApemanEngineer ( ) ; begin
49785: LD_INT 0
49787: PPUSH
// uc_nation := 0 ;
49788: LD_ADDR_OWVAR 21
49792: PUSH
49793: LD_INT 0
49795: ST_TO_ADDR
// hc_sex := sex_male ;
49796: LD_ADDR_OWVAR 27
49800: PUSH
49801: LD_INT 1
49803: ST_TO_ADDR
// hc_name :=  ;
49804: LD_ADDR_OWVAR 26
49808: PUSH
49809: LD_STRING 
49811: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49812: LD_ADDR_OWVAR 28
49816: PUSH
49817: LD_INT 16
49819: ST_TO_ADDR
// hc_gallery :=  ;
49820: LD_ADDR_OWVAR 33
49824: PUSH
49825: LD_STRING 
49827: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49828: LD_ADDR_OWVAR 31
49832: PUSH
49833: LD_INT 0
49835: PPUSH
49836: LD_INT 3
49838: PPUSH
49839: CALL_OW 12
49843: PUSH
49844: LD_INT 0
49846: PPUSH
49847: LD_INT 3
49849: PPUSH
49850: CALL_OW 12
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49867: LD_ADDR_OWVAR 29
49871: PUSH
49872: LD_INT 12
49874: PUSH
49875: LD_INT 12
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// end ;
49882: LD_VAR 0 1
49886: RET
// export function PrepareApeman ( agressivity ) ; begin
49887: LD_INT 0
49889: PPUSH
// uc_side := 0 ;
49890: LD_ADDR_OWVAR 20
49894: PUSH
49895: LD_INT 0
49897: ST_TO_ADDR
// uc_nation := 0 ;
49898: LD_ADDR_OWVAR 21
49902: PUSH
49903: LD_INT 0
49905: ST_TO_ADDR
// hc_sex := sex_male ;
49906: LD_ADDR_OWVAR 27
49910: PUSH
49911: LD_INT 1
49913: ST_TO_ADDR
// hc_class := class_apeman ;
49914: LD_ADDR_OWVAR 28
49918: PUSH
49919: LD_INT 12
49921: ST_TO_ADDR
// hc_gallery :=  ;
49922: LD_ADDR_OWVAR 33
49926: PUSH
49927: LD_STRING 
49929: ST_TO_ADDR
// hc_name :=  ;
49930: LD_ADDR_OWVAR 26
49934: PUSH
49935: LD_STRING 
49937: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49938: LD_ADDR_OWVAR 29
49942: PUSH
49943: LD_INT 12
49945: PUSH
49946: LD_INT 12
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// if agressivity = 0 then
49953: LD_VAR 0 1
49957: PUSH
49958: LD_INT 0
49960: EQUAL
49961: IFFALSE 49973
// hc_agressivity := 0 else
49963: LD_ADDR_OWVAR 35
49967: PUSH
49968: LD_INT 0
49970: ST_TO_ADDR
49971: GO 49994
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49973: LD_ADDR_OWVAR 35
49977: PUSH
49978: LD_VAR 0 1
49982: NEG
49983: PPUSH
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 12
49993: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49994: LD_ADDR_OWVAR 31
49998: PUSH
49999: LD_INT 0
50001: PPUSH
50002: LD_INT 3
50004: PPUSH
50005: CALL_OW 12
50009: PUSH
50010: LD_INT 0
50012: PPUSH
50013: LD_INT 3
50015: PPUSH
50016: CALL_OW 12
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: ST_TO_ADDR
// end ;
50033: LD_VAR 0 2
50037: RET
// export function PrepareTiger ( agressivity ) ; begin
50038: LD_INT 0
50040: PPUSH
// uc_side := 0 ;
50041: LD_ADDR_OWVAR 20
50045: PUSH
50046: LD_INT 0
50048: ST_TO_ADDR
// uc_nation := 0 ;
50049: LD_ADDR_OWVAR 21
50053: PUSH
50054: LD_INT 0
50056: ST_TO_ADDR
// InitHc ;
50057: CALL_OW 19
// hc_class := class_tiger ;
50061: LD_ADDR_OWVAR 28
50065: PUSH
50066: LD_INT 14
50068: ST_TO_ADDR
// hc_gallery :=  ;
50069: LD_ADDR_OWVAR 33
50073: PUSH
50074: LD_STRING 
50076: ST_TO_ADDR
// hc_name :=  ;
50077: LD_ADDR_OWVAR 26
50081: PUSH
50082: LD_STRING 
50084: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50085: LD_ADDR_OWVAR 35
50089: PUSH
50090: LD_VAR 0 1
50094: NEG
50095: PPUSH
50096: LD_VAR 0 1
50100: PPUSH
50101: CALL_OW 12
50105: ST_TO_ADDR
// end ;
50106: LD_VAR 0 2
50110: RET
// export function PrepareEnchidna ( ) ; begin
50111: LD_INT 0
50113: PPUSH
// uc_side := 0 ;
50114: LD_ADDR_OWVAR 20
50118: PUSH
50119: LD_INT 0
50121: ST_TO_ADDR
// uc_nation := 0 ;
50122: LD_ADDR_OWVAR 21
50126: PUSH
50127: LD_INT 0
50129: ST_TO_ADDR
// InitHc ;
50130: CALL_OW 19
// hc_class := class_baggie ;
50134: LD_ADDR_OWVAR 28
50138: PUSH
50139: LD_INT 13
50141: ST_TO_ADDR
// hc_gallery :=  ;
50142: LD_ADDR_OWVAR 33
50146: PUSH
50147: LD_STRING 
50149: ST_TO_ADDR
// hc_name :=  ;
50150: LD_ADDR_OWVAR 26
50154: PUSH
50155: LD_STRING 
50157: ST_TO_ADDR
// end ;
50158: LD_VAR 0 1
50162: RET
// export function PrepareFrog ( ) ; begin
50163: LD_INT 0
50165: PPUSH
// uc_side := 0 ;
50166: LD_ADDR_OWVAR 20
50170: PUSH
50171: LD_INT 0
50173: ST_TO_ADDR
// uc_nation := 0 ;
50174: LD_ADDR_OWVAR 21
50178: PUSH
50179: LD_INT 0
50181: ST_TO_ADDR
// InitHc ;
50182: CALL_OW 19
// hc_class := class_frog ;
50186: LD_ADDR_OWVAR 28
50190: PUSH
50191: LD_INT 19
50193: ST_TO_ADDR
// hc_gallery :=  ;
50194: LD_ADDR_OWVAR 33
50198: PUSH
50199: LD_STRING 
50201: ST_TO_ADDR
// hc_name :=  ;
50202: LD_ADDR_OWVAR 26
50206: PUSH
50207: LD_STRING 
50209: ST_TO_ADDR
// end ;
50210: LD_VAR 0 1
50214: RET
// export function PrepareFish ( ) ; begin
50215: LD_INT 0
50217: PPUSH
// uc_side := 0 ;
50218: LD_ADDR_OWVAR 20
50222: PUSH
50223: LD_INT 0
50225: ST_TO_ADDR
// uc_nation := 0 ;
50226: LD_ADDR_OWVAR 21
50230: PUSH
50231: LD_INT 0
50233: ST_TO_ADDR
// InitHc ;
50234: CALL_OW 19
// hc_class := class_fish ;
50238: LD_ADDR_OWVAR 28
50242: PUSH
50243: LD_INT 20
50245: ST_TO_ADDR
// hc_gallery :=  ;
50246: LD_ADDR_OWVAR 33
50250: PUSH
50251: LD_STRING 
50253: ST_TO_ADDR
// hc_name :=  ;
50254: LD_ADDR_OWVAR 26
50258: PUSH
50259: LD_STRING 
50261: ST_TO_ADDR
// end ;
50262: LD_VAR 0 1
50266: RET
// export function PrepareBird ( ) ; begin
50267: LD_INT 0
50269: PPUSH
// uc_side := 0 ;
50270: LD_ADDR_OWVAR 20
50274: PUSH
50275: LD_INT 0
50277: ST_TO_ADDR
// uc_nation := 0 ;
50278: LD_ADDR_OWVAR 21
50282: PUSH
50283: LD_INT 0
50285: ST_TO_ADDR
// InitHc ;
50286: CALL_OW 19
// hc_class := class_phororhacos ;
50290: LD_ADDR_OWVAR 28
50294: PUSH
50295: LD_INT 18
50297: ST_TO_ADDR
// hc_gallery :=  ;
50298: LD_ADDR_OWVAR 33
50302: PUSH
50303: LD_STRING 
50305: ST_TO_ADDR
// hc_name :=  ;
50306: LD_ADDR_OWVAR 26
50310: PUSH
50311: LD_STRING 
50313: ST_TO_ADDR
// end ;
50314: LD_VAR 0 1
50318: RET
// export function PrepareHorse ( ) ; begin
50319: LD_INT 0
50321: PPUSH
// uc_side := 0 ;
50322: LD_ADDR_OWVAR 20
50326: PUSH
50327: LD_INT 0
50329: ST_TO_ADDR
// uc_nation := 0 ;
50330: LD_ADDR_OWVAR 21
50334: PUSH
50335: LD_INT 0
50337: ST_TO_ADDR
// InitHc ;
50338: CALL_OW 19
// hc_class := class_horse ;
50342: LD_ADDR_OWVAR 28
50346: PUSH
50347: LD_INT 21
50349: ST_TO_ADDR
// hc_gallery :=  ;
50350: LD_ADDR_OWVAR 33
50354: PUSH
50355: LD_STRING 
50357: ST_TO_ADDR
// hc_name :=  ;
50358: LD_ADDR_OWVAR 26
50362: PUSH
50363: LD_STRING 
50365: ST_TO_ADDR
// end ;
50366: LD_VAR 0 1
50370: RET
// export function PrepareMastodont ( ) ; begin
50371: LD_INT 0
50373: PPUSH
// uc_side := 0 ;
50374: LD_ADDR_OWVAR 20
50378: PUSH
50379: LD_INT 0
50381: ST_TO_ADDR
// uc_nation := 0 ;
50382: LD_ADDR_OWVAR 21
50386: PUSH
50387: LD_INT 0
50389: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50390: LD_ADDR_OWVAR 37
50394: PUSH
50395: LD_INT 31
50397: ST_TO_ADDR
// vc_control := control_rider ;
50398: LD_ADDR_OWVAR 38
50402: PUSH
50403: LD_INT 4
50405: ST_TO_ADDR
// end ;
50406: LD_VAR 0 1
50410: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50411: LD_INT 0
50413: PPUSH
50414: PPUSH
50415: PPUSH
// uc_side = 0 ;
50416: LD_ADDR_OWVAR 20
50420: PUSH
50421: LD_INT 0
50423: ST_TO_ADDR
// uc_nation = 0 ;
50424: LD_ADDR_OWVAR 21
50428: PUSH
50429: LD_INT 0
50431: ST_TO_ADDR
// InitHc_All ( ) ;
50432: CALL_OW 584
// InitVc ;
50436: CALL_OW 20
// if mastodonts then
50440: LD_VAR 0 6
50444: IFFALSE 50511
// for i = 1 to mastodonts do
50446: LD_ADDR_VAR 0 11
50450: PUSH
50451: DOUBLE
50452: LD_INT 1
50454: DEC
50455: ST_TO_ADDR
50456: LD_VAR 0 6
50460: PUSH
50461: FOR_TO
50462: IFFALSE 50509
// begin vc_chassis := 31 ;
50464: LD_ADDR_OWVAR 37
50468: PUSH
50469: LD_INT 31
50471: ST_TO_ADDR
// vc_control := control_rider ;
50472: LD_ADDR_OWVAR 38
50476: PUSH
50477: LD_INT 4
50479: ST_TO_ADDR
// animal := CreateVehicle ;
50480: LD_ADDR_VAR 0 12
50484: PUSH
50485: CALL_OW 45
50489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50490: LD_VAR 0 12
50494: PPUSH
50495: LD_VAR 0 8
50499: PPUSH
50500: LD_INT 0
50502: PPUSH
50503: CALL 52653 0 3
// end ;
50507: GO 50461
50509: POP
50510: POP
// if horses then
50511: LD_VAR 0 5
50515: IFFALSE 50582
// for i = 1 to horses do
50517: LD_ADDR_VAR 0 11
50521: PUSH
50522: DOUBLE
50523: LD_INT 1
50525: DEC
50526: ST_TO_ADDR
50527: LD_VAR 0 5
50531: PUSH
50532: FOR_TO
50533: IFFALSE 50580
// begin hc_class := 21 ;
50535: LD_ADDR_OWVAR 28
50539: PUSH
50540: LD_INT 21
50542: ST_TO_ADDR
// hc_gallery :=  ;
50543: LD_ADDR_OWVAR 33
50547: PUSH
50548: LD_STRING 
50550: ST_TO_ADDR
// animal := CreateHuman ;
50551: LD_ADDR_VAR 0 12
50555: PUSH
50556: CALL_OW 44
50560: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50561: LD_VAR 0 12
50565: PPUSH
50566: LD_VAR 0 8
50570: PPUSH
50571: LD_INT 0
50573: PPUSH
50574: CALL 52653 0 3
// end ;
50578: GO 50532
50580: POP
50581: POP
// if birds then
50582: LD_VAR 0 1
50586: IFFALSE 50653
// for i = 1 to birds do
50588: LD_ADDR_VAR 0 11
50592: PUSH
50593: DOUBLE
50594: LD_INT 1
50596: DEC
50597: ST_TO_ADDR
50598: LD_VAR 0 1
50602: PUSH
50603: FOR_TO
50604: IFFALSE 50651
// begin hc_class := 18 ;
50606: LD_ADDR_OWVAR 28
50610: PUSH
50611: LD_INT 18
50613: ST_TO_ADDR
// hc_gallery =  ;
50614: LD_ADDR_OWVAR 33
50618: PUSH
50619: LD_STRING 
50621: ST_TO_ADDR
// animal := CreateHuman ;
50622: LD_ADDR_VAR 0 12
50626: PUSH
50627: CALL_OW 44
50631: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50632: LD_VAR 0 12
50636: PPUSH
50637: LD_VAR 0 8
50641: PPUSH
50642: LD_INT 0
50644: PPUSH
50645: CALL 52653 0 3
// end ;
50649: GO 50603
50651: POP
50652: POP
// if tigers then
50653: LD_VAR 0 2
50657: IFFALSE 50741
// for i = 1 to tigers do
50659: LD_ADDR_VAR 0 11
50663: PUSH
50664: DOUBLE
50665: LD_INT 1
50667: DEC
50668: ST_TO_ADDR
50669: LD_VAR 0 2
50673: PUSH
50674: FOR_TO
50675: IFFALSE 50739
// begin hc_class = class_tiger ;
50677: LD_ADDR_OWVAR 28
50681: PUSH
50682: LD_INT 14
50684: ST_TO_ADDR
// hc_gallery =  ;
50685: LD_ADDR_OWVAR 33
50689: PUSH
50690: LD_STRING 
50692: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50693: LD_ADDR_OWVAR 35
50697: PUSH
50698: LD_INT 7
50700: NEG
50701: PPUSH
50702: LD_INT 7
50704: PPUSH
50705: CALL_OW 12
50709: ST_TO_ADDR
// animal := CreateHuman ;
50710: LD_ADDR_VAR 0 12
50714: PUSH
50715: CALL_OW 44
50719: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50720: LD_VAR 0 12
50724: PPUSH
50725: LD_VAR 0 8
50729: PPUSH
50730: LD_INT 0
50732: PPUSH
50733: CALL 52653 0 3
// end ;
50737: GO 50674
50739: POP
50740: POP
// if apemans then
50741: LD_VAR 0 3
50745: IFFALSE 50868
// for i = 1 to apemans do
50747: LD_ADDR_VAR 0 11
50751: PUSH
50752: DOUBLE
50753: LD_INT 1
50755: DEC
50756: ST_TO_ADDR
50757: LD_VAR 0 3
50761: PUSH
50762: FOR_TO
50763: IFFALSE 50866
// begin hc_class = class_apeman ;
50765: LD_ADDR_OWVAR 28
50769: PUSH
50770: LD_INT 12
50772: ST_TO_ADDR
// hc_gallery =  ;
50773: LD_ADDR_OWVAR 33
50777: PUSH
50778: LD_STRING 
50780: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50781: LD_ADDR_OWVAR 35
50785: PUSH
50786: LD_INT 2
50788: NEG
50789: PPUSH
50790: LD_INT 2
50792: PPUSH
50793: CALL_OW 12
50797: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50798: LD_ADDR_OWVAR 31
50802: PUSH
50803: LD_INT 1
50805: PPUSH
50806: LD_INT 3
50808: PPUSH
50809: CALL_OW 12
50813: PUSH
50814: LD_INT 1
50816: PPUSH
50817: LD_INT 3
50819: PPUSH
50820: CALL_OW 12
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// animal := CreateHuman ;
50837: LD_ADDR_VAR 0 12
50841: PUSH
50842: CALL_OW 44
50846: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50847: LD_VAR 0 12
50851: PPUSH
50852: LD_VAR 0 8
50856: PPUSH
50857: LD_INT 0
50859: PPUSH
50860: CALL 52653 0 3
// end ;
50864: GO 50762
50866: POP
50867: POP
// if enchidnas then
50868: LD_VAR 0 4
50872: IFFALSE 50939
// for i = 1 to enchidnas do
50874: LD_ADDR_VAR 0 11
50878: PUSH
50879: DOUBLE
50880: LD_INT 1
50882: DEC
50883: ST_TO_ADDR
50884: LD_VAR 0 4
50888: PUSH
50889: FOR_TO
50890: IFFALSE 50937
// begin hc_class = 13 ;
50892: LD_ADDR_OWVAR 28
50896: PUSH
50897: LD_INT 13
50899: ST_TO_ADDR
// hc_gallery =  ;
50900: LD_ADDR_OWVAR 33
50904: PUSH
50905: LD_STRING 
50907: ST_TO_ADDR
// animal := CreateHuman ;
50908: LD_ADDR_VAR 0 12
50912: PUSH
50913: CALL_OW 44
50917: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50918: LD_VAR 0 12
50922: PPUSH
50923: LD_VAR 0 8
50927: PPUSH
50928: LD_INT 0
50930: PPUSH
50931: CALL 52653 0 3
// end ;
50935: GO 50889
50937: POP
50938: POP
// if fishes then
50939: LD_VAR 0 7
50943: IFFALSE 51010
// for i = 1 to fishes do
50945: LD_ADDR_VAR 0 11
50949: PUSH
50950: DOUBLE
50951: LD_INT 1
50953: DEC
50954: ST_TO_ADDR
50955: LD_VAR 0 7
50959: PUSH
50960: FOR_TO
50961: IFFALSE 51008
// begin hc_class = 20 ;
50963: LD_ADDR_OWVAR 28
50967: PUSH
50968: LD_INT 20
50970: ST_TO_ADDR
// hc_gallery =  ;
50971: LD_ADDR_OWVAR 33
50975: PUSH
50976: LD_STRING 
50978: ST_TO_ADDR
// animal := CreateHuman ;
50979: LD_ADDR_VAR 0 12
50983: PUSH
50984: CALL_OW 44
50988: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50989: LD_VAR 0 12
50993: PPUSH
50994: LD_VAR 0 9
50998: PPUSH
50999: LD_INT 0
51001: PPUSH
51002: CALL 52653 0 3
// end ;
51006: GO 50960
51008: POP
51009: POP
// end ;
51010: LD_VAR 0 10
51014: RET
// export function WantHeal ( sci , unit ) ; begin
51015: LD_INT 0
51017: PPUSH
// if GetTaskList ( sci ) > 0 then
51018: LD_VAR 0 1
51022: PPUSH
51023: CALL_OW 437
51027: PUSH
51028: LD_INT 0
51030: GREATER
51031: IFFALSE 51103
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51033: LD_VAR 0 1
51037: PPUSH
51038: CALL_OW 437
51042: PUSH
51043: LD_INT 1
51045: ARRAY
51046: PUSH
51047: LD_INT 1
51049: ARRAY
51050: PUSH
51051: LD_STRING l
51053: EQUAL
51054: IFFALSE 51081
51056: PUSH
51057: LD_VAR 0 1
51061: PPUSH
51062: CALL_OW 437
51066: PUSH
51067: LD_INT 1
51069: ARRAY
51070: PUSH
51071: LD_INT 4
51073: ARRAY
51074: PUSH
51075: LD_VAR 0 2
51079: EQUAL
51080: AND
51081: IFFALSE 51093
// result := true else
51083: LD_ADDR_VAR 0 3
51087: PUSH
51088: LD_INT 1
51090: ST_TO_ADDR
51091: GO 51101
// result := false ;
51093: LD_ADDR_VAR 0 3
51097: PUSH
51098: LD_INT 0
51100: ST_TO_ADDR
// end else
51101: GO 51111
// result := false ;
51103: LD_ADDR_VAR 0 3
51107: PUSH
51108: LD_INT 0
51110: ST_TO_ADDR
// end ;
51111: LD_VAR 0 3
51115: RET
// export function HealTarget ( sci ) ; begin
51116: LD_INT 0
51118: PPUSH
// if not sci then
51119: LD_VAR 0 1
51123: NOT
51124: IFFALSE 51128
// exit ;
51126: GO 51193
// result := 0 ;
51128: LD_ADDR_VAR 0 2
51132: PUSH
51133: LD_INT 0
51135: ST_TO_ADDR
// if GetTaskList ( sci ) then
51136: LD_VAR 0 1
51140: PPUSH
51141: CALL_OW 437
51145: IFFALSE 51193
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51147: LD_VAR 0 1
51151: PPUSH
51152: CALL_OW 437
51156: PUSH
51157: LD_INT 1
51159: ARRAY
51160: PUSH
51161: LD_INT 1
51163: ARRAY
51164: PUSH
51165: LD_STRING l
51167: EQUAL
51168: IFFALSE 51193
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51170: LD_ADDR_VAR 0 2
51174: PUSH
51175: LD_VAR 0 1
51179: PPUSH
51180: CALL_OW 437
51184: PUSH
51185: LD_INT 1
51187: ARRAY
51188: PUSH
51189: LD_INT 4
51191: ARRAY
51192: ST_TO_ADDR
// end ;
51193: LD_VAR 0 2
51197: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51198: LD_INT 0
51200: PPUSH
51201: PPUSH
51202: PPUSH
51203: PPUSH
// if not base_units then
51204: LD_VAR 0 1
51208: NOT
51209: IFFALSE 51213
// exit ;
51211: GO 51300
// result := false ;
51213: LD_ADDR_VAR 0 2
51217: PUSH
51218: LD_INT 0
51220: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51221: LD_ADDR_VAR 0 5
51225: PUSH
51226: LD_VAR 0 1
51230: PPUSH
51231: LD_INT 21
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PPUSH
51241: CALL_OW 72
51245: ST_TO_ADDR
// if not tmp then
51246: LD_VAR 0 5
51250: NOT
51251: IFFALSE 51255
// exit ;
51253: GO 51300
// for i in tmp do
51255: LD_ADDR_VAR 0 3
51259: PUSH
51260: LD_VAR 0 5
51264: PUSH
51265: FOR_IN
51266: IFFALSE 51298
// begin result := EnemyInRange ( i , 22 ) ;
51268: LD_ADDR_VAR 0 2
51272: PUSH
51273: LD_VAR 0 3
51277: PPUSH
51278: LD_INT 22
51280: PPUSH
51281: CALL 48725 0 2
51285: ST_TO_ADDR
// if result then
51286: LD_VAR 0 2
51290: IFFALSE 51296
// exit ;
51292: POP
51293: POP
51294: GO 51300
// end ;
51296: GO 51265
51298: POP
51299: POP
// end ;
51300: LD_VAR 0 2
51304: RET
// export function FilterByTag ( units , tag ) ; begin
51305: LD_INT 0
51307: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51308: LD_ADDR_VAR 0 3
51312: PUSH
51313: LD_VAR 0 1
51317: PPUSH
51318: LD_INT 120
51320: PUSH
51321: LD_VAR 0 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PPUSH
51330: CALL_OW 72
51334: ST_TO_ADDR
// end ;
51335: LD_VAR 0 3
51339: RET
// export function IsDriver ( un ) ; begin
51340: LD_INT 0
51342: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51343: LD_ADDR_VAR 0 2
51347: PUSH
51348: LD_VAR 0 1
51352: PUSH
51353: LD_INT 55
51355: PUSH
51356: EMPTY
51357: LIST
51358: PPUSH
51359: CALL_OW 69
51363: IN
51364: ST_TO_ADDR
// end ;
51365: LD_VAR 0 2
51369: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51370: LD_INT 0
51372: PPUSH
51373: PPUSH
// list := [ ] ;
51374: LD_ADDR_VAR 0 5
51378: PUSH
51379: EMPTY
51380: ST_TO_ADDR
// case d of 0 :
51381: LD_VAR 0 3
51385: PUSH
51386: LD_INT 0
51388: DOUBLE
51389: EQUAL
51390: IFTRUE 51394
51392: GO 51527
51394: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51395: LD_ADDR_VAR 0 5
51399: PUSH
51400: LD_VAR 0 1
51404: PUSH
51405: LD_INT 4
51407: MINUS
51408: PUSH
51409: LD_VAR 0 2
51413: PUSH
51414: LD_INT 4
51416: MINUS
51417: PUSH
51418: LD_INT 2
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: LIST
51425: PUSH
51426: LD_VAR 0 1
51430: PUSH
51431: LD_INT 3
51433: MINUS
51434: PUSH
51435: LD_VAR 0 2
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: PUSH
51448: LD_VAR 0 1
51452: PUSH
51453: LD_INT 4
51455: PLUS
51456: PUSH
51457: LD_VAR 0 2
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: PUSH
51470: LD_VAR 0 1
51474: PUSH
51475: LD_INT 3
51477: PLUS
51478: PUSH
51479: LD_VAR 0 2
51483: PUSH
51484: LD_INT 3
51486: PLUS
51487: PUSH
51488: LD_INT 5
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: LIST
51495: PUSH
51496: LD_VAR 0 1
51500: PUSH
51501: LD_VAR 0 2
51505: PUSH
51506: LD_INT 4
51508: PLUS
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: ST_TO_ADDR
// end ; 1 :
51525: GO 52225
51527: LD_INT 1
51529: DOUBLE
51530: EQUAL
51531: IFTRUE 51535
51533: GO 51668
51535: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51536: LD_ADDR_VAR 0 5
51540: PUSH
51541: LD_VAR 0 1
51545: PUSH
51546: LD_VAR 0 2
51550: PUSH
51551: LD_INT 4
51553: MINUS
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: PUSH
51563: LD_VAR 0 1
51567: PUSH
51568: LD_INT 3
51570: MINUS
51571: PUSH
51572: LD_VAR 0 2
51576: PUSH
51577: LD_INT 3
51579: MINUS
51580: PUSH
51581: LD_INT 2
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 1
51593: PUSH
51594: LD_INT 4
51596: MINUS
51597: PUSH
51598: LD_VAR 0 2
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PUSH
51611: LD_VAR 0 1
51615: PUSH
51616: LD_VAR 0 2
51620: PUSH
51621: LD_INT 3
51623: PLUS
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: LIST
51632: PUSH
51633: LD_VAR 0 1
51637: PUSH
51638: LD_INT 4
51640: PLUS
51641: PUSH
51642: LD_VAR 0 2
51646: PUSH
51647: LD_INT 4
51649: PLUS
51650: PUSH
51651: LD_INT 5
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// end ; 2 :
51666: GO 52225
51668: LD_INT 2
51670: DOUBLE
51671: EQUAL
51672: IFTRUE 51676
51674: GO 51805
51676: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51677: LD_ADDR_VAR 0 5
51681: PUSH
51682: LD_VAR 0 1
51686: PUSH
51687: LD_VAR 0 2
51691: PUSH
51692: LD_INT 3
51694: MINUS
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: LIST
51703: PUSH
51704: LD_VAR 0 1
51708: PUSH
51709: LD_INT 4
51711: PLUS
51712: PUSH
51713: LD_VAR 0 2
51717: PUSH
51718: LD_INT 4
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: LIST
51725: PUSH
51726: LD_VAR 0 1
51730: PUSH
51731: LD_VAR 0 2
51735: PUSH
51736: LD_INT 4
51738: PLUS
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: PUSH
51748: LD_VAR 0 1
51752: PUSH
51753: LD_INT 3
51755: MINUS
51756: PUSH
51757: LD_VAR 0 2
51761: PUSH
51762: LD_INT 1
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: LIST
51769: PUSH
51770: LD_VAR 0 1
51774: PUSH
51775: LD_INT 4
51777: MINUS
51778: PUSH
51779: LD_VAR 0 2
51783: PUSH
51784: LD_INT 4
51786: MINUS
51787: PUSH
51788: LD_INT 2
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: ST_TO_ADDR
// end ; 3 :
51803: GO 52225
51805: LD_INT 3
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51813
51811: GO 51946
51813: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51814: LD_ADDR_VAR 0 5
51818: PUSH
51819: LD_VAR 0 1
51823: PUSH
51824: LD_INT 3
51826: PLUS
51827: PUSH
51828: LD_VAR 0 2
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: PUSH
51841: LD_VAR 0 1
51845: PUSH
51846: LD_INT 4
51848: PLUS
51849: PUSH
51850: LD_VAR 0 2
51854: PUSH
51855: LD_INT 4
51857: PLUS
51858: PUSH
51859: LD_INT 5
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: LD_VAR 0 1
51871: PUSH
51872: LD_INT 4
51874: MINUS
51875: PUSH
51876: LD_VAR 0 2
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: LIST
51888: PUSH
51889: LD_VAR 0 1
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 4
51901: MINUS
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: LIST
51910: PUSH
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 3
51918: MINUS
51919: PUSH
51920: LD_VAR 0 2
51924: PUSH
51925: LD_INT 3
51927: MINUS
51928: PUSH
51929: LD_INT 2
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: ST_TO_ADDR
// end ; 4 :
51944: GO 52225
51946: LD_INT 4
51948: DOUBLE
51949: EQUAL
51950: IFTRUE 51954
51952: GO 52087
51954: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51955: LD_ADDR_VAR 0 5
51959: PUSH
51960: LD_VAR 0 1
51964: PUSH
51965: LD_VAR 0 2
51969: PUSH
51970: LD_INT 4
51972: PLUS
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: LIST
51981: PUSH
51982: LD_VAR 0 1
51986: PUSH
51987: LD_INT 3
51989: PLUS
51990: PUSH
51991: LD_VAR 0 2
51995: PUSH
51996: LD_INT 3
51998: PLUS
51999: PUSH
52000: LD_INT 5
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: LIST
52007: PUSH
52008: LD_VAR 0 1
52012: PUSH
52013: LD_INT 4
52015: PLUS
52016: PUSH
52017: LD_VAR 0 2
52021: PUSH
52022: LD_INT 4
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: PUSH
52030: LD_VAR 0 1
52034: PUSH
52035: LD_VAR 0 2
52039: PUSH
52040: LD_INT 3
52042: MINUS
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: PUSH
52052: LD_VAR 0 1
52056: PUSH
52057: LD_INT 4
52059: MINUS
52060: PUSH
52061: LD_VAR 0 2
52065: PUSH
52066: LD_INT 4
52068: MINUS
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: LIST
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: ST_TO_ADDR
// end ; 5 :
52085: GO 52225
52087: LD_INT 5
52089: DOUBLE
52090: EQUAL
52091: IFTRUE 52095
52093: GO 52224
52095: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52096: LD_ADDR_VAR 0 5
52100: PUSH
52101: LD_VAR 0 1
52105: PUSH
52106: LD_INT 4
52108: MINUS
52109: PUSH
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: LIST
52122: PUSH
52123: LD_VAR 0 1
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 4
52135: MINUS
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: PUSH
52145: LD_VAR 0 1
52149: PUSH
52150: LD_INT 4
52152: PLUS
52153: PUSH
52154: LD_VAR 0 2
52158: PUSH
52159: LD_INT 4
52161: PLUS
52162: PUSH
52163: LD_INT 5
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: PUSH
52171: LD_VAR 0 1
52175: PUSH
52176: LD_INT 3
52178: PLUS
52179: PUSH
52180: LD_VAR 0 2
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: LD_VAR 0 1
52197: PUSH
52198: LD_VAR 0 2
52202: PUSH
52203: LD_INT 3
52205: PLUS
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: ST_TO_ADDR
// end ; end ;
52222: GO 52225
52224: POP
// result := list ;
52225: LD_ADDR_VAR 0 4
52229: PUSH
52230: LD_VAR 0 5
52234: ST_TO_ADDR
// end ;
52235: LD_VAR 0 4
52239: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52240: LD_INT 0
52242: PPUSH
52243: PPUSH
52244: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52245: LD_VAR 0 1
52249: NOT
52250: IFTRUE 52278
52252: PUSH
52253: LD_VAR 0 2
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: LD_INT 2
52263: PUSH
52264: LD_INT 3
52266: PUSH
52267: LD_INT 4
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: IN
52276: NOT
52277: OR
52278: IFFALSE 52282
// exit ;
52280: GO 52365
// tmp := [ ] ;
52282: LD_ADDR_VAR 0 5
52286: PUSH
52287: EMPTY
52288: ST_TO_ADDR
// for i in units do
52289: LD_ADDR_VAR 0 4
52293: PUSH
52294: LD_VAR 0 1
52298: PUSH
52299: FOR_IN
52300: IFFALSE 52334
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52302: LD_ADDR_VAR 0 5
52306: PUSH
52307: LD_VAR 0 5
52311: PPUSH
52312: LD_VAR 0 4
52316: PPUSH
52317: LD_VAR 0 2
52321: PPUSH
52322: CALL_OW 259
52326: PPUSH
52327: CALL 53760 0 2
52331: ST_TO_ADDR
52332: GO 52299
52334: POP
52335: POP
// if not tmp then
52336: LD_VAR 0 5
52340: NOT
52341: IFFALSE 52345
// exit ;
52343: GO 52365
// result := SortListByListDesc ( units , tmp ) ;
52345: LD_ADDR_VAR 0 3
52349: PUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: LD_VAR 0 5
52359: PPUSH
52360: CALL_OW 77
52364: ST_TO_ADDR
// end ;
52365: LD_VAR 0 3
52369: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52370: LD_INT 0
52372: PPUSH
52373: PPUSH
52374: PPUSH
// result := false ;
52375: LD_ADDR_VAR 0 3
52379: PUSH
52380: LD_INT 0
52382: ST_TO_ADDR
// if not building then
52383: LD_VAR 0 2
52387: NOT
52388: IFFALSE 52392
// exit ;
52390: GO 52536
// x := GetX ( building ) ;
52392: LD_ADDR_VAR 0 4
52396: PUSH
52397: LD_VAR 0 2
52401: PPUSH
52402: CALL_OW 250
52406: ST_TO_ADDR
// y := GetY ( building ) ;
52407: LD_ADDR_VAR 0 5
52411: PUSH
52412: LD_VAR 0 2
52416: PPUSH
52417: CALL_OW 251
52421: ST_TO_ADDR
// if not x or not y then
52422: LD_VAR 0 4
52426: NOT
52427: IFTRUE 52436
52429: PUSH
52430: LD_VAR 0 5
52434: NOT
52435: OR
52436: IFFALSE 52440
// exit ;
52438: GO 52536
// if GetTaskList ( unit ) then
52440: LD_VAR 0 1
52444: PPUSH
52445: CALL_OW 437
52449: IFFALSE 52536
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52451: LD_STRING e
52453: PUSH
52454: LD_VAR 0 1
52458: PPUSH
52459: CALL_OW 437
52463: PUSH
52464: LD_INT 1
52466: ARRAY
52467: PUSH
52468: LD_INT 1
52470: ARRAY
52471: EQUAL
52472: IFFALSE 52499
52474: PUSH
52475: LD_VAR 0 4
52479: PUSH
52480: LD_VAR 0 1
52484: PPUSH
52485: CALL_OW 437
52489: PUSH
52490: LD_INT 1
52492: ARRAY
52493: PUSH
52494: LD_INT 2
52496: ARRAY
52497: EQUAL
52498: AND
52499: IFFALSE 52526
52501: PUSH
52502: LD_VAR 0 5
52506: PUSH
52507: LD_VAR 0 1
52511: PPUSH
52512: CALL_OW 437
52516: PUSH
52517: LD_INT 1
52519: ARRAY
52520: PUSH
52521: LD_INT 3
52523: ARRAY
52524: EQUAL
52525: AND
52526: IFFALSE 52536
// result := true end ;
52528: LD_ADDR_VAR 0 3
52532: PUSH
52533: LD_INT 1
52535: ST_TO_ADDR
// end ;
52536: LD_VAR 0 3
52540: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52541: LD_INT 0
52543: PPUSH
// result := false ;
52544: LD_ADDR_VAR 0 4
52548: PUSH
52549: LD_INT 0
52551: ST_TO_ADDR
// if GetTaskList ( unit ) then
52552: LD_VAR 0 1
52556: PPUSH
52557: CALL_OW 437
52561: IFFALSE 52648
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52563: LD_STRING M
52565: PUSH
52566: LD_VAR 0 1
52570: PPUSH
52571: CALL_OW 437
52575: PUSH
52576: LD_INT 1
52578: ARRAY
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: EQUAL
52584: IFFALSE 52611
52586: PUSH
52587: LD_VAR 0 2
52591: PUSH
52592: LD_VAR 0 1
52596: PPUSH
52597: CALL_OW 437
52601: PUSH
52602: LD_INT 1
52604: ARRAY
52605: PUSH
52606: LD_INT 2
52608: ARRAY
52609: EQUAL
52610: AND
52611: IFFALSE 52638
52613: PUSH
52614: LD_VAR 0 3
52618: PUSH
52619: LD_VAR 0 1
52623: PPUSH
52624: CALL_OW 437
52628: PUSH
52629: LD_INT 1
52631: ARRAY
52632: PUSH
52633: LD_INT 3
52635: ARRAY
52636: EQUAL
52637: AND
52638: IFFALSE 52648
// result := true ;
52640: LD_ADDR_VAR 0 4
52644: PUSH
52645: LD_INT 1
52647: ST_TO_ADDR
// end ; end ;
52648: LD_VAR 0 4
52652: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52653: LD_INT 0
52655: PPUSH
52656: PPUSH
52657: PPUSH
52658: PPUSH
// if not unit or not area then
52659: LD_VAR 0 1
52663: NOT
52664: IFTRUE 52673
52666: PUSH
52667: LD_VAR 0 2
52671: NOT
52672: OR
52673: IFFALSE 52677
// exit ;
52675: GO 52853
// tmp := AreaToList ( area , i ) ;
52677: LD_ADDR_VAR 0 6
52681: PUSH
52682: LD_VAR 0 2
52686: PPUSH
52687: LD_VAR 0 5
52691: PPUSH
52692: CALL_OW 517
52696: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52697: LD_ADDR_VAR 0 5
52701: PUSH
52702: DOUBLE
52703: LD_INT 1
52705: DEC
52706: ST_TO_ADDR
52707: LD_VAR 0 6
52711: PUSH
52712: LD_INT 1
52714: ARRAY
52715: PUSH
52716: FOR_TO
52717: IFFALSE 52851
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52719: LD_ADDR_VAR 0 7
52723: PUSH
52724: LD_VAR 0 6
52728: PUSH
52729: LD_INT 1
52731: ARRAY
52732: PUSH
52733: LD_VAR 0 5
52737: ARRAY
52738: PUSH
52739: LD_VAR 0 6
52743: PUSH
52744: LD_INT 2
52746: ARRAY
52747: PUSH
52748: LD_VAR 0 5
52752: ARRAY
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52758: LD_INT 92
52760: PUSH
52761: LD_VAR 0 7
52765: PUSH
52766: LD_INT 1
52768: ARRAY
52769: PUSH
52770: LD_VAR 0 7
52774: PUSH
52775: LD_INT 2
52777: ARRAY
52778: PUSH
52779: LD_INT 2
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: PPUSH
52788: CALL_OW 69
52792: PUSH
52793: LD_INT 0
52795: EQUAL
52796: IFFALSE 52849
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52798: LD_VAR 0 1
52802: PPUSH
52803: LD_VAR 0 7
52807: PUSH
52808: LD_INT 1
52810: ARRAY
52811: PPUSH
52812: LD_VAR 0 7
52816: PUSH
52817: LD_INT 2
52819: ARRAY
52820: PPUSH
52821: LD_VAR 0 3
52825: PPUSH
52826: CALL_OW 48
// result := IsPlaced ( unit ) ;
52830: LD_ADDR_VAR 0 4
52834: PUSH
52835: LD_VAR 0 1
52839: PPUSH
52840: CALL_OW 305
52844: ST_TO_ADDR
// exit ;
52845: POP
52846: POP
52847: GO 52853
// end ; end ;
52849: GO 52716
52851: POP
52852: POP
// end ;
52853: LD_VAR 0 4
52857: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52858: LD_INT 0
52860: PPUSH
52861: PPUSH
52862: PPUSH
// if not side or side > 8 then
52863: LD_VAR 0 1
52867: NOT
52868: IFTRUE 52880
52870: PUSH
52871: LD_VAR 0 1
52875: PUSH
52876: LD_INT 8
52878: GREATER
52879: OR
52880: IFFALSE 52884
// exit ;
52882: GO 53071
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52884: LD_ADDR_VAR 0 4
52888: PUSH
52889: LD_INT 22
52891: PUSH
52892: LD_VAR 0 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 21
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PPUSH
52915: CALL_OW 69
52919: ST_TO_ADDR
// if not tmp then
52920: LD_VAR 0 4
52924: NOT
52925: IFFALSE 52929
// exit ;
52927: GO 53071
// enable_addtolog := true ;
52929: LD_ADDR_OWVAR 81
52933: PUSH
52934: LD_INT 1
52936: ST_TO_ADDR
// AddToLog ( [ ) ;
52937: LD_STRING [
52939: PPUSH
52940: CALL_OW 561
// for i in tmp do
52944: LD_ADDR_VAR 0 3
52948: PUSH
52949: LD_VAR 0 4
52953: PUSH
52954: FOR_IN
52955: IFFALSE 53062
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52957: LD_STRING [
52959: PUSH
52960: LD_VAR 0 3
52964: PPUSH
52965: CALL_OW 266
52969: STR
52970: PUSH
52971: LD_STRING , 
52973: STR
52974: PUSH
52975: LD_VAR 0 3
52979: PPUSH
52980: CALL_OW 250
52984: STR
52985: PUSH
52986: LD_STRING , 
52988: STR
52989: PUSH
52990: LD_VAR 0 3
52994: PPUSH
52995: CALL_OW 251
52999: STR
53000: PUSH
53001: LD_STRING , 
53003: STR
53004: PUSH
53005: LD_VAR 0 3
53009: PPUSH
53010: CALL_OW 254
53014: STR
53015: PUSH
53016: LD_STRING , 
53018: STR
53019: PUSH
53020: LD_VAR 0 3
53024: PPUSH
53025: LD_INT 1
53027: PPUSH
53028: CALL_OW 268
53032: STR
53033: PUSH
53034: LD_STRING , 
53036: STR
53037: PUSH
53038: LD_VAR 0 3
53042: PPUSH
53043: LD_INT 2
53045: PPUSH
53046: CALL_OW 268
53050: STR
53051: PUSH
53052: LD_STRING ],
53054: STR
53055: PPUSH
53056: CALL_OW 561
// end ;
53060: GO 52954
53062: POP
53063: POP
// AddToLog ( ]; ) ;
53064: LD_STRING ];
53066: PPUSH
53067: CALL_OW 561
// end ;
53071: LD_VAR 0 2
53075: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53076: LD_INT 0
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
// if not area or not rate or not max then
53083: LD_VAR 0 1
53087: NOT
53088: IFTRUE 53097
53090: PUSH
53091: LD_VAR 0 2
53095: NOT
53096: OR
53097: IFTRUE 53106
53099: PUSH
53100: LD_VAR 0 4
53104: NOT
53105: OR
53106: IFFALSE 53110
// exit ;
53108: GO 53299
// while 1 do
53110: LD_INT 1
53112: IFFALSE 53299
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53114: LD_ADDR_VAR 0 9
53118: PUSH
53119: LD_VAR 0 1
53123: PPUSH
53124: LD_INT 1
53126: PPUSH
53127: CALL_OW 287
53131: PUSH
53132: LD_INT 10
53134: MUL
53135: ST_TO_ADDR
// r := rate / 10 ;
53136: LD_ADDR_VAR 0 7
53140: PUSH
53141: LD_VAR 0 2
53145: PUSH
53146: LD_INT 10
53148: DIVREAL
53149: ST_TO_ADDR
// time := 1 1$00 ;
53150: LD_ADDR_VAR 0 8
53154: PUSH
53155: LD_INT 2100
53157: ST_TO_ADDR
// if amount < min then
53158: LD_VAR 0 9
53162: PUSH
53163: LD_VAR 0 3
53167: LESS
53168: IFFALSE 53186
// r := r * 2 else
53170: LD_ADDR_VAR 0 7
53174: PUSH
53175: LD_VAR 0 7
53179: PUSH
53180: LD_INT 2
53182: MUL
53183: ST_TO_ADDR
53184: GO 53212
// if amount > max then
53186: LD_VAR 0 9
53190: PUSH
53191: LD_VAR 0 4
53195: GREATER
53196: IFFALSE 53212
// r := r / 2 ;
53198: LD_ADDR_VAR 0 7
53202: PUSH
53203: LD_VAR 0 7
53207: PUSH
53208: LD_INT 2
53210: DIVREAL
53211: ST_TO_ADDR
// time := time / r ;
53212: LD_ADDR_VAR 0 8
53216: PUSH
53217: LD_VAR 0 8
53221: PUSH
53222: LD_VAR 0 7
53226: DIVREAL
53227: ST_TO_ADDR
// if time < 0 then
53228: LD_VAR 0 8
53232: PUSH
53233: LD_INT 0
53235: LESS
53236: IFFALSE 53253
// time := time * - 1 ;
53238: LD_ADDR_VAR 0 8
53242: PUSH
53243: LD_VAR 0 8
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: MUL
53252: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53253: LD_VAR 0 8
53257: PUSH
53258: LD_INT 35
53260: PPUSH
53261: LD_INT 875
53263: PPUSH
53264: CALL_OW 12
53268: PLUS
53269: PPUSH
53270: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53274: LD_INT 1
53276: PPUSH
53277: LD_INT 5
53279: PPUSH
53280: CALL_OW 12
53284: PPUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: LD_INT 1
53292: PPUSH
53293: CALL_OW 55
// end ;
53297: GO 53110
// end ;
53299: LD_VAR 0 5
53303: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53304: LD_INT 0
53306: PPUSH
53307: PPUSH
53308: PPUSH
53309: PPUSH
53310: PPUSH
53311: PPUSH
53312: PPUSH
53313: PPUSH
// if not turrets or not factories then
53314: LD_VAR 0 1
53318: NOT
53319: IFTRUE 53328
53321: PUSH
53322: LD_VAR 0 2
53326: NOT
53327: OR
53328: IFFALSE 53332
// exit ;
53330: GO 53639
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53332: LD_ADDR_VAR 0 10
53336: PUSH
53337: LD_INT 5
53339: PUSH
53340: LD_INT 6
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 5
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 24
53374: PUSH
53375: LD_INT 25
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 23
53384: PUSH
53385: LD_INT 27
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 42
53398: PUSH
53399: LD_INT 43
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 44
53408: PUSH
53409: LD_INT 46
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 45
53418: PUSH
53419: LD_INT 47
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// result := [ ] ;
53436: LD_ADDR_VAR 0 3
53440: PUSH
53441: EMPTY
53442: ST_TO_ADDR
// for i in turrets do
53443: LD_ADDR_VAR 0 4
53447: PUSH
53448: LD_VAR 0 1
53452: PUSH
53453: FOR_IN
53454: IFFALSE 53637
// begin nat := GetNation ( i ) ;
53456: LD_ADDR_VAR 0 7
53460: PUSH
53461: LD_VAR 0 4
53465: PPUSH
53466: CALL_OW 248
53470: ST_TO_ADDR
// weapon := 0 ;
53471: LD_ADDR_VAR 0 8
53475: PUSH
53476: LD_INT 0
53478: ST_TO_ADDR
// if not nat then
53479: LD_VAR 0 7
53483: NOT
53484: IFFALSE 53488
// continue ;
53486: GO 53453
// for j in list [ nat ] do
53488: LD_ADDR_VAR 0 5
53492: PUSH
53493: LD_VAR 0 10
53497: PUSH
53498: LD_VAR 0 7
53502: ARRAY
53503: PUSH
53504: FOR_IN
53505: IFFALSE 53546
// if GetBWeapon ( i ) = j [ 1 ] then
53507: LD_VAR 0 4
53511: PPUSH
53512: CALL_OW 269
53516: PUSH
53517: LD_VAR 0 5
53521: PUSH
53522: LD_INT 1
53524: ARRAY
53525: EQUAL
53526: IFFALSE 53544
// begin weapon := j [ 2 ] ;
53528: LD_ADDR_VAR 0 8
53532: PUSH
53533: LD_VAR 0 5
53537: PUSH
53538: LD_INT 2
53540: ARRAY
53541: ST_TO_ADDR
// break ;
53542: GO 53546
// end ;
53544: GO 53504
53546: POP
53547: POP
// if not weapon then
53548: LD_VAR 0 8
53552: NOT
53553: IFFALSE 53557
// continue ;
53555: GO 53453
// for k in factories do
53557: LD_ADDR_VAR 0 6
53561: PUSH
53562: LD_VAR 0 2
53566: PUSH
53567: FOR_IN
53568: IFFALSE 53633
// begin weapons := AvailableWeaponList ( k ) ;
53570: LD_ADDR_VAR 0 9
53574: PUSH
53575: LD_VAR 0 6
53579: PPUSH
53580: CALL_OW 478
53584: ST_TO_ADDR
// if not weapons then
53585: LD_VAR 0 9
53589: NOT
53590: IFFALSE 53594
// continue ;
53592: GO 53567
// if weapon in weapons then
53594: LD_VAR 0 8
53598: PUSH
53599: LD_VAR 0 9
53603: IN
53604: IFFALSE 53631
// begin result := [ i , weapon ] ;
53606: LD_ADDR_VAR 0 3
53610: PUSH
53611: LD_VAR 0 4
53615: PUSH
53616: LD_VAR 0 8
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: ST_TO_ADDR
// exit ;
53625: POP
53626: POP
53627: POP
53628: POP
53629: GO 53639
// end ; end ;
53631: GO 53567
53633: POP
53634: POP
// end ;
53635: GO 53453
53637: POP
53638: POP
// end ;
53639: LD_VAR 0 3
53643: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53644: LD_INT 0
53646: PPUSH
// if not side or side > 8 then
53647: LD_VAR 0 3
53651: NOT
53652: IFTRUE 53664
53654: PUSH
53655: LD_VAR 0 3
53659: PUSH
53660: LD_INT 8
53662: GREATER
53663: OR
53664: IFFALSE 53668
// exit ;
53666: GO 53727
// if not range then
53668: LD_VAR 0 4
53672: NOT
53673: IFFALSE 53684
// range := - 12 ;
53675: LD_ADDR_VAR 0 4
53679: PUSH
53680: LD_INT 12
53682: NEG
53683: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53684: LD_VAR 0 1
53688: PPUSH
53689: LD_VAR 0 2
53693: PPUSH
53694: LD_VAR 0 3
53698: PPUSH
53699: LD_VAR 0 4
53703: PPUSH
53704: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53708: LD_VAR 0 1
53712: PPUSH
53713: LD_VAR 0 2
53717: PPUSH
53718: LD_VAR 0 3
53722: PPUSH
53723: CALL_OW 331
// end ;
53727: LD_VAR 0 5
53731: RET
// export function Video ( mode ) ; begin
53732: LD_INT 0
53734: PPUSH
// ingame_video = mode ;
53735: LD_ADDR_OWVAR 52
53739: PUSH
53740: LD_VAR 0 1
53744: ST_TO_ADDR
// interface_hidden = mode ;
53745: LD_ADDR_OWVAR 54
53749: PUSH
53750: LD_VAR 0 1
53754: ST_TO_ADDR
// end ;
53755: LD_VAR 0 2
53759: RET
// export function Join ( array , element ) ; begin
53760: LD_INT 0
53762: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53763: LD_ADDR_VAR 0 3
53767: PUSH
53768: LD_VAR 0 1
53772: PPUSH
53773: LD_VAR 0 1
53777: PUSH
53778: LD_INT 1
53780: PLUS
53781: PPUSH
53782: LD_VAR 0 2
53786: PPUSH
53787: CALL_OW 1
53791: ST_TO_ADDR
// end ;
53792: LD_VAR 0 3
53796: RET
// export function JoinUnion ( array , element ) ; begin
53797: LD_INT 0
53799: PPUSH
// result := array union element ;
53800: LD_ADDR_VAR 0 3
53804: PUSH
53805: LD_VAR 0 1
53809: PUSH
53810: LD_VAR 0 2
53814: UNION
53815: ST_TO_ADDR
// end ;
53816: LD_VAR 0 3
53820: RET
// export function GetBehemoths ( side ) ; begin
53821: LD_INT 0
53823: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53824: LD_ADDR_VAR 0 2
53828: PUSH
53829: LD_INT 22
53831: PUSH
53832: LD_VAR 0 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 31
53843: PUSH
53844: LD_INT 25
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PPUSH
53855: CALL_OW 69
53859: ST_TO_ADDR
// end ;
53860: LD_VAR 0 2
53864: RET
// export function Shuffle ( array ) ; var i , index ; begin
53865: LD_INT 0
53867: PPUSH
53868: PPUSH
53869: PPUSH
// result := [ ] ;
53870: LD_ADDR_VAR 0 2
53874: PUSH
53875: EMPTY
53876: ST_TO_ADDR
// if not array then
53877: LD_VAR 0 1
53881: NOT
53882: IFFALSE 53886
// exit ;
53884: GO 53985
// Randomize ;
53886: CALL_OW 10
// for i = array downto 1 do
53890: LD_ADDR_VAR 0 3
53894: PUSH
53895: DOUBLE
53896: LD_VAR 0 1
53900: INC
53901: ST_TO_ADDR
53902: LD_INT 1
53904: PUSH
53905: FOR_DOWNTO
53906: IFFALSE 53983
// begin index := rand ( 1 , array ) ;
53908: LD_ADDR_VAR 0 4
53912: PUSH
53913: LD_INT 1
53915: PPUSH
53916: LD_VAR 0 1
53920: PPUSH
53921: CALL_OW 12
53925: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53926: LD_ADDR_VAR 0 2
53930: PUSH
53931: LD_VAR 0 2
53935: PPUSH
53936: LD_VAR 0 2
53940: PUSH
53941: LD_INT 1
53943: PLUS
53944: PPUSH
53945: LD_VAR 0 1
53949: PUSH
53950: LD_VAR 0 4
53954: ARRAY
53955: PPUSH
53956: CALL_OW 2
53960: ST_TO_ADDR
// array := Delete ( array , index ) ;
53961: LD_ADDR_VAR 0 1
53965: PUSH
53966: LD_VAR 0 1
53970: PPUSH
53971: LD_VAR 0 4
53975: PPUSH
53976: CALL_OW 3
53980: ST_TO_ADDR
// end ;
53981: GO 53905
53983: POP
53984: POP
// end ;
53985: LD_VAR 0 2
53989: RET
// export function GetBaseMaterials ( base ) ; begin
53990: LD_INT 0
53992: PPUSH
// result := [ 0 , 0 , 0 ] ;
53993: LD_ADDR_VAR 0 2
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 0
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: ST_TO_ADDR
// if not base then
54012: LD_VAR 0 1
54016: NOT
54017: IFFALSE 54021
// exit ;
54019: GO 54070
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54021: LD_ADDR_VAR 0 2
54025: PUSH
54026: LD_VAR 0 1
54030: PPUSH
54031: LD_INT 1
54033: PPUSH
54034: CALL_OW 275
54038: PUSH
54039: LD_VAR 0 1
54043: PPUSH
54044: LD_INT 2
54046: PPUSH
54047: CALL_OW 275
54051: PUSH
54052: LD_VAR 0 1
54056: PPUSH
54057: LD_INT 3
54059: PPUSH
54060: CALL_OW 275
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// end ;
54070: LD_VAR 0 2
54074: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54075: LD_INT 0
54077: PPUSH
54078: PPUSH
// result := array ;
54079: LD_ADDR_VAR 0 3
54083: PUSH
54084: LD_VAR 0 1
54088: ST_TO_ADDR
// if size >= result then
54089: LD_VAR 0 2
54093: PUSH
54094: LD_VAR 0 3
54098: GREATEREQUAL
54099: IFFALSE 54103
// exit ;
54101: GO 54153
// if size then
54103: LD_VAR 0 2
54107: IFFALSE 54153
// for i := array downto size do
54109: LD_ADDR_VAR 0 4
54113: PUSH
54114: DOUBLE
54115: LD_VAR 0 1
54119: INC
54120: ST_TO_ADDR
54121: LD_VAR 0 2
54125: PUSH
54126: FOR_DOWNTO
54127: IFFALSE 54151
// result := Delete ( result , result ) ;
54129: LD_ADDR_VAR 0 3
54133: PUSH
54134: LD_VAR 0 3
54138: PPUSH
54139: LD_VAR 0 3
54143: PPUSH
54144: CALL_OW 3
54148: ST_TO_ADDR
54149: GO 54126
54151: POP
54152: POP
// end ;
54153: LD_VAR 0 3
54157: RET
// export function ComExit ( unit ) ; var tmp ; begin
54158: LD_INT 0
54160: PPUSH
54161: PPUSH
// if not IsInUnit ( unit ) then
54162: LD_VAR 0 1
54166: PPUSH
54167: CALL_OW 310
54171: NOT
54172: IFFALSE 54176
// exit ;
54174: GO 54236
// tmp := IsInUnit ( unit ) ;
54176: LD_ADDR_VAR 0 3
54180: PUSH
54181: LD_VAR 0 1
54185: PPUSH
54186: CALL_OW 310
54190: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54191: LD_VAR 0 3
54195: PPUSH
54196: CALL_OW 247
54200: PUSH
54201: LD_INT 2
54203: EQUAL
54204: IFFALSE 54217
// ComExitVehicle ( unit ) else
54206: LD_VAR 0 1
54210: PPUSH
54211: CALL_OW 121
54215: GO 54226
// ComExitBuilding ( unit ) ;
54217: LD_VAR 0 1
54221: PPUSH
54222: CALL_OW 122
// result := tmp ;
54226: LD_ADDR_VAR 0 2
54230: PUSH
54231: LD_VAR 0 3
54235: ST_TO_ADDR
// end ;
54236: LD_VAR 0 2
54240: RET
// export function ComExitAll ( units ) ; var i ; begin
54241: LD_INT 0
54243: PPUSH
54244: PPUSH
// if not units then
54245: LD_VAR 0 1
54249: NOT
54250: IFFALSE 54254
// exit ;
54252: GO 54280
// for i in units do
54254: LD_ADDR_VAR 0 3
54258: PUSH
54259: LD_VAR 0 1
54263: PUSH
54264: FOR_IN
54265: IFFALSE 54278
// ComExit ( i ) ;
54267: LD_VAR 0 3
54271: PPUSH
54272: CALL 54158 0 1
54276: GO 54264
54278: POP
54279: POP
// end ;
54280: LD_VAR 0 2
54284: RET
// export function ResetHc ; begin
54285: LD_INT 0
54287: PPUSH
// InitHc ;
54288: CALL_OW 19
// hc_importance := 0 ;
54292: LD_ADDR_OWVAR 32
54296: PUSH
54297: LD_INT 0
54299: ST_TO_ADDR
// end ;
54300: LD_VAR 0 1
54304: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54305: LD_INT 0
54307: PPUSH
54308: PPUSH
54309: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54310: LD_ADDR_VAR 0 6
54314: PUSH
54315: LD_VAR 0 1
54319: PUSH
54320: LD_VAR 0 3
54324: PLUS
54325: PUSH
54326: LD_INT 2
54328: DIV
54329: ST_TO_ADDR
// if _x < 0 then
54330: LD_VAR 0 6
54334: PUSH
54335: LD_INT 0
54337: LESS
54338: IFFALSE 54355
// _x := _x * - 1 ;
54340: LD_ADDR_VAR 0 6
54344: PUSH
54345: LD_VAR 0 6
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: MUL
54354: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54355: LD_ADDR_VAR 0 7
54359: PUSH
54360: LD_VAR 0 2
54364: PUSH
54365: LD_VAR 0 4
54369: PLUS
54370: PUSH
54371: LD_INT 2
54373: DIV
54374: ST_TO_ADDR
// if _y < 0 then
54375: LD_VAR 0 7
54379: PUSH
54380: LD_INT 0
54382: LESS
54383: IFFALSE 54400
// _y := _y * - 1 ;
54385: LD_ADDR_VAR 0 7
54389: PUSH
54390: LD_VAR 0 7
54394: PUSH
54395: LD_INT 1
54397: NEG
54398: MUL
54399: ST_TO_ADDR
// result := [ _x , _y ] ;
54400: LD_ADDR_VAR 0 5
54404: PUSH
54405: LD_VAR 0 6
54409: PUSH
54410: LD_VAR 0 7
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: ST_TO_ADDR
// end ;
54419: LD_VAR 0 5
54423: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54424: LD_INT 0
54426: PPUSH
54427: PPUSH
54428: PPUSH
54429: PPUSH
// task := GetTaskList ( unit ) ;
54430: LD_ADDR_VAR 0 7
54434: PUSH
54435: LD_VAR 0 1
54439: PPUSH
54440: CALL_OW 437
54444: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54445: LD_VAR 0 7
54449: NOT
54450: IFFALSE 54469
54452: PUSH
54453: LD_VAR 0 1
54457: PPUSH
54458: LD_VAR 0 2
54462: PPUSH
54463: CALL_OW 308
54467: NOT
54468: AND
54469: IFFALSE 54473
// exit ;
54471: GO 54591
// if IsInArea ( unit , area ) then
54473: LD_VAR 0 1
54477: PPUSH
54478: LD_VAR 0 2
54482: PPUSH
54483: CALL_OW 308
54487: IFFALSE 54505
// begin ComMoveToArea ( unit , goAway ) ;
54489: LD_VAR 0 1
54493: PPUSH
54494: LD_VAR 0 3
54498: PPUSH
54499: CALL_OW 113
// exit ;
54503: GO 54591
// end ; if task [ 1 ] [ 1 ] <> M then
54505: LD_VAR 0 7
54509: PUSH
54510: LD_INT 1
54512: ARRAY
54513: PUSH
54514: LD_INT 1
54516: ARRAY
54517: PUSH
54518: LD_STRING M
54520: NONEQUAL
54521: IFFALSE 54525
// exit ;
54523: GO 54591
// x := task [ 1 ] [ 2 ] ;
54525: LD_ADDR_VAR 0 5
54529: PUSH
54530: LD_VAR 0 7
54534: PUSH
54535: LD_INT 1
54537: ARRAY
54538: PUSH
54539: LD_INT 2
54541: ARRAY
54542: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54543: LD_ADDR_VAR 0 6
54547: PUSH
54548: LD_VAR 0 7
54552: PUSH
54553: LD_INT 1
54555: ARRAY
54556: PUSH
54557: LD_INT 3
54559: ARRAY
54560: ST_TO_ADDR
// if InArea ( x , y , area ) then
54561: LD_VAR 0 5
54565: PPUSH
54566: LD_VAR 0 6
54570: PPUSH
54571: LD_VAR 0 2
54575: PPUSH
54576: CALL_OW 309
54580: IFFALSE 54591
// ComStop ( unit ) ;
54582: LD_VAR 0 1
54586: PPUSH
54587: CALL_OW 141
// end ;
54591: LD_VAR 0 4
54595: RET
// export function Abs ( value ) ; begin
54596: LD_INT 0
54598: PPUSH
// result := value ;
54599: LD_ADDR_VAR 0 2
54603: PUSH
54604: LD_VAR 0 1
54608: ST_TO_ADDR
// if value < 0 then
54609: LD_VAR 0 1
54613: PUSH
54614: LD_INT 0
54616: LESS
54617: IFFALSE 54634
// result := value * - 1 ;
54619: LD_ADDR_VAR 0 2
54623: PUSH
54624: LD_VAR 0 1
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: MUL
54633: ST_TO_ADDR
// end ;
54634: LD_VAR 0 2
54638: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54639: LD_INT 0
54641: PPUSH
54642: PPUSH
54643: PPUSH
54644: PPUSH
54645: PPUSH
54646: PPUSH
54647: PPUSH
54648: PPUSH
// if not unit or not building then
54649: LD_VAR 0 1
54653: NOT
54654: IFTRUE 54663
54656: PUSH
54657: LD_VAR 0 2
54661: NOT
54662: OR
54663: IFFALSE 54667
// exit ;
54665: GO 54895
// x := GetX ( building ) ;
54667: LD_ADDR_VAR 0 4
54671: PUSH
54672: LD_VAR 0 2
54676: PPUSH
54677: CALL_OW 250
54681: ST_TO_ADDR
// y := GetY ( building ) ;
54682: LD_ADDR_VAR 0 6
54686: PUSH
54687: LD_VAR 0 2
54691: PPUSH
54692: CALL_OW 251
54696: ST_TO_ADDR
// d := GetDir ( building ) ;
54697: LD_ADDR_VAR 0 8
54701: PUSH
54702: LD_VAR 0 2
54706: PPUSH
54707: CALL_OW 254
54711: ST_TO_ADDR
// r := 4 ;
54712: LD_ADDR_VAR 0 9
54716: PUSH
54717: LD_INT 4
54719: ST_TO_ADDR
// for i := 1 to 5 do
54720: LD_ADDR_VAR 0 10
54724: PUSH
54725: DOUBLE
54726: LD_INT 1
54728: DEC
54729: ST_TO_ADDR
54730: LD_INT 5
54732: PUSH
54733: FOR_TO
54734: IFFALSE 54893
// begin _x := ShiftX ( x , d , r + i ) ;
54736: LD_ADDR_VAR 0 5
54740: PUSH
54741: LD_VAR 0 4
54745: PPUSH
54746: LD_VAR 0 8
54750: PPUSH
54751: LD_VAR 0 9
54755: PUSH
54756: LD_VAR 0 10
54760: PLUS
54761: PPUSH
54762: CALL_OW 272
54766: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54767: LD_ADDR_VAR 0 7
54771: PUSH
54772: LD_VAR 0 6
54776: PPUSH
54777: LD_VAR 0 8
54781: PPUSH
54782: LD_VAR 0 9
54786: PUSH
54787: LD_VAR 0 10
54791: PLUS
54792: PPUSH
54793: CALL_OW 273
54797: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54798: LD_VAR 0 5
54802: PPUSH
54803: LD_VAR 0 7
54807: PPUSH
54808: CALL_OW 488
54812: IFFALSE 54847
54814: PUSH
54815: LD_VAR 0 5
54819: PPUSH
54820: LD_VAR 0 7
54824: PPUSH
54825: CALL_OW 428
54829: PPUSH
54830: CALL_OW 247
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: IN
54845: NOT
54846: AND
54847: IFFALSE 54891
// begin ComMoveXY ( unit , _x , _y ) ;
54849: LD_VAR 0 1
54853: PPUSH
54854: LD_VAR 0 5
54858: PPUSH
54859: LD_VAR 0 7
54863: PPUSH
54864: CALL_OW 111
// result := [ _x , _y ] ;
54868: LD_ADDR_VAR 0 3
54872: PUSH
54873: LD_VAR 0 5
54877: PUSH
54878: LD_VAR 0 7
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: ST_TO_ADDR
// exit ;
54887: POP
54888: POP
54889: GO 54895
// end ; end ;
54891: GO 54733
54893: POP
54894: POP
// end ;
54895: LD_VAR 0 3
54899: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54900: LD_INT 0
54902: PPUSH
54903: PPUSH
54904: PPUSH
// result := 0 ;
54905: LD_ADDR_VAR 0 3
54909: PUSH
54910: LD_INT 0
54912: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54913: LD_VAR 0 1
54917: PUSH
54918: LD_INT 0
54920: LESS
54921: IFTRUE 54933
54923: PUSH
54924: LD_VAR 0 1
54928: PUSH
54929: LD_INT 8
54931: GREATER
54932: OR
54933: IFTRUE 54945
54935: PUSH
54936: LD_VAR 0 2
54940: PUSH
54941: LD_INT 0
54943: LESS
54944: OR
54945: IFTRUE 54957
54947: PUSH
54948: LD_VAR 0 2
54952: PUSH
54953: LD_INT 8
54955: GREATER
54956: OR
54957: IFFALSE 54961
// exit ;
54959: GO 55036
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54961: LD_ADDR_VAR 0 4
54965: PUSH
54966: LD_INT 22
54968: PUSH
54969: LD_VAR 0 2
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PPUSH
54978: CALL_OW 69
54982: PUSH
54983: FOR_IN
54984: IFFALSE 55034
// begin un := UnitShoot ( i ) ;
54986: LD_ADDR_VAR 0 5
54990: PUSH
54991: LD_VAR 0 4
54995: PPUSH
54996: CALL_OW 504
55000: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55001: LD_VAR 0 5
55005: PPUSH
55006: CALL_OW 255
55010: PUSH
55011: LD_VAR 0 1
55015: EQUAL
55016: IFFALSE 55032
// begin result := un ;
55018: LD_ADDR_VAR 0 3
55022: PUSH
55023: LD_VAR 0 5
55027: ST_TO_ADDR
// exit ;
55028: POP
55029: POP
55030: GO 55036
// end ; end ;
55032: GO 54983
55034: POP
55035: POP
// end ;
55036: LD_VAR 0 3
55040: RET
// export function GetCargoBay ( units ) ; begin
55041: LD_INT 0
55043: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55044: LD_ADDR_VAR 0 2
55048: PUSH
55049: LD_VAR 0 1
55053: PPUSH
55054: LD_INT 2
55056: PUSH
55057: LD_INT 34
55059: PUSH
55060: LD_INT 12
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 34
55069: PUSH
55070: LD_INT 51
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 34
55079: PUSH
55080: LD_INT 32
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 34
55089: PUSH
55090: LD_INT 89
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: PPUSH
55104: CALL_OW 72
55108: ST_TO_ADDR
// end ;
55109: LD_VAR 0 2
55113: RET
// export function Negate ( value ) ; begin
55114: LD_INT 0
55116: PPUSH
// result := not value ;
55117: LD_ADDR_VAR 0 2
55121: PUSH
55122: LD_VAR 0 1
55126: NOT
55127: ST_TO_ADDR
// end ;
55128: LD_VAR 0 2
55132: RET
// export function Inc ( value ) ; begin
55133: LD_INT 0
55135: PPUSH
// result := value + 1 ;
55136: LD_ADDR_VAR 0 2
55140: PUSH
55141: LD_VAR 0 1
55145: PUSH
55146: LD_INT 1
55148: PLUS
55149: ST_TO_ADDR
// end ;
55150: LD_VAR 0 2
55154: RET
// export function Dec ( value ) ; begin
55155: LD_INT 0
55157: PPUSH
// result := value - 1 ;
55158: LD_ADDR_VAR 0 2
55162: PUSH
55163: LD_VAR 0 1
55167: PUSH
55168: LD_INT 1
55170: MINUS
55171: ST_TO_ADDR
// end ;
55172: LD_VAR 0 2
55176: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55177: LD_INT 0
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55187: LD_VAR 0 1
55191: PPUSH
55192: LD_VAR 0 2
55196: PPUSH
55197: CALL_OW 488
55201: NOT
55202: IFTRUE 55221
55204: PUSH
55205: LD_VAR 0 3
55209: PPUSH
55210: LD_VAR 0 4
55214: PPUSH
55215: CALL_OW 488
55219: NOT
55220: OR
55221: IFFALSE 55234
// begin result := - 1 ;
55223: LD_ADDR_VAR 0 5
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: ST_TO_ADDR
// exit ;
55232: GO 55469
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55234: LD_ADDR_VAR 0 12
55238: PUSH
55239: LD_VAR 0 1
55243: PPUSH
55244: LD_VAR 0 2
55248: PPUSH
55249: LD_VAR 0 3
55253: PPUSH
55254: LD_VAR 0 4
55258: PPUSH
55259: CALL 54305 0 4
55263: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55264: LD_ADDR_VAR 0 11
55268: PUSH
55269: LD_VAR 0 1
55273: PPUSH
55274: LD_VAR 0 2
55278: PPUSH
55279: LD_VAR 0 12
55283: PUSH
55284: LD_INT 1
55286: ARRAY
55287: PPUSH
55288: LD_VAR 0 12
55292: PUSH
55293: LD_INT 2
55295: ARRAY
55296: PPUSH
55297: CALL_OW 298
55301: ST_TO_ADDR
// distance := 9999 ;
55302: LD_ADDR_VAR 0 10
55306: PUSH
55307: LD_INT 9999
55309: ST_TO_ADDR
// for i := 0 to 5 do
55310: LD_ADDR_VAR 0 6
55314: PUSH
55315: DOUBLE
55316: LD_INT 0
55318: DEC
55319: ST_TO_ADDR
55320: LD_INT 5
55322: PUSH
55323: FOR_TO
55324: IFFALSE 55467
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55326: LD_ADDR_VAR 0 7
55330: PUSH
55331: LD_VAR 0 1
55335: PPUSH
55336: LD_VAR 0 6
55340: PPUSH
55341: LD_VAR 0 11
55345: PPUSH
55346: CALL_OW 272
55350: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55351: LD_ADDR_VAR 0 8
55355: PUSH
55356: LD_VAR 0 2
55360: PPUSH
55361: LD_VAR 0 6
55365: PPUSH
55366: LD_VAR 0 11
55370: PPUSH
55371: CALL_OW 273
55375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55376: LD_VAR 0 7
55380: PPUSH
55381: LD_VAR 0 8
55385: PPUSH
55386: CALL_OW 488
55390: NOT
55391: IFFALSE 55395
// continue ;
55393: GO 55323
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55395: LD_ADDR_VAR 0 9
55399: PUSH
55400: LD_VAR 0 12
55404: PUSH
55405: LD_INT 1
55407: ARRAY
55408: PPUSH
55409: LD_VAR 0 12
55413: PUSH
55414: LD_INT 2
55416: ARRAY
55417: PPUSH
55418: LD_VAR 0 7
55422: PPUSH
55423: LD_VAR 0 8
55427: PPUSH
55428: CALL_OW 298
55432: ST_TO_ADDR
// if tmp < distance then
55433: LD_VAR 0 9
55437: PUSH
55438: LD_VAR 0 10
55442: LESS
55443: IFFALSE 55465
// begin result := i ;
55445: LD_ADDR_VAR 0 5
55449: PUSH
55450: LD_VAR 0 6
55454: ST_TO_ADDR
// distance := tmp ;
55455: LD_ADDR_VAR 0 10
55459: PUSH
55460: LD_VAR 0 9
55464: ST_TO_ADDR
// end ; end ;
55465: GO 55323
55467: POP
55468: POP
// end ;
55469: LD_VAR 0 5
55473: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55474: LD_INT 0
55476: PPUSH
55477: PPUSH
// if not driver or not IsInUnit ( driver ) then
55478: LD_VAR 0 1
55482: NOT
55483: IFTRUE 55497
55485: PUSH
55486: LD_VAR 0 1
55490: PPUSH
55491: CALL_OW 310
55495: NOT
55496: OR
55497: IFFALSE 55501
// exit ;
55499: GO 55591
// vehicle := IsInUnit ( driver ) ;
55501: LD_ADDR_VAR 0 3
55505: PUSH
55506: LD_VAR 0 1
55510: PPUSH
55511: CALL_OW 310
55515: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55516: LD_VAR 0 1
55520: PPUSH
55521: LD_STRING \
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 0
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: PUSH
55551: LD_STRING E
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_VAR 0 3
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PPUSH
55587: CALL_OW 446
// end ;
55591: LD_VAR 0 2
55595: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55596: LD_INT 0
55598: PPUSH
55599: PPUSH
// if not driver or not IsInUnit ( driver ) then
55600: LD_VAR 0 1
55604: NOT
55605: IFTRUE 55619
55607: PUSH
55608: LD_VAR 0 1
55612: PPUSH
55613: CALL_OW 310
55617: NOT
55618: OR
55619: IFFALSE 55623
// exit ;
55621: GO 55713
// vehicle := IsInUnit ( driver ) ;
55623: LD_ADDR_VAR 0 3
55627: PUSH
55628: LD_VAR 0 1
55632: PPUSH
55633: CALL_OW 310
55637: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55638: LD_VAR 0 1
55642: PPUSH
55643: LD_STRING \
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: PUSH
55673: LD_STRING E
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_VAR 0 3
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PPUSH
55709: CALL_OW 447
// end ;
55713: LD_VAR 0 2
55717: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55718: LD_INT 0
55720: PPUSH
55721: PPUSH
55722: PPUSH
// tmp := [ ] ;
55723: LD_ADDR_VAR 0 5
55727: PUSH
55728: EMPTY
55729: ST_TO_ADDR
// for i in units do
55730: LD_ADDR_VAR 0 4
55734: PUSH
55735: LD_VAR 0 1
55739: PUSH
55740: FOR_IN
55741: IFFALSE 55779
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55743: LD_ADDR_VAR 0 5
55747: PUSH
55748: LD_VAR 0 5
55752: PPUSH
55753: LD_VAR 0 5
55757: PUSH
55758: LD_INT 1
55760: PLUS
55761: PPUSH
55762: LD_VAR 0 4
55766: PPUSH
55767: CALL_OW 256
55771: PPUSH
55772: CALL_OW 2
55776: ST_TO_ADDR
55777: GO 55740
55779: POP
55780: POP
// if not tmp then
55781: LD_VAR 0 5
55785: NOT
55786: IFFALSE 55790
// exit ;
55788: GO 55838
// if asc then
55790: LD_VAR 0 2
55794: IFFALSE 55818
// result := SortListByListAsc ( units , tmp ) else
55796: LD_ADDR_VAR 0 3
55800: PUSH
55801: LD_VAR 0 1
55805: PPUSH
55806: LD_VAR 0 5
55810: PPUSH
55811: CALL_OW 76
55815: ST_TO_ADDR
55816: GO 55838
// result := SortListByListDesc ( units , tmp ) ;
55818: LD_ADDR_VAR 0 3
55822: PUSH
55823: LD_VAR 0 1
55827: PPUSH
55828: LD_VAR 0 5
55832: PPUSH
55833: CALL_OW 77
55837: ST_TO_ADDR
// end ;
55838: LD_VAR 0 3
55842: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55843: LD_INT 0
55845: PPUSH
55846: PPUSH
// task := GetTaskList ( mech ) ;
55847: LD_ADDR_VAR 0 4
55851: PUSH
55852: LD_VAR 0 1
55856: PPUSH
55857: CALL_OW 437
55861: ST_TO_ADDR
// if not task then
55862: LD_VAR 0 4
55866: NOT
55867: IFFALSE 55871
// exit ;
55869: GO 55915
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55871: LD_ADDR_VAR 0 3
55875: PUSH
55876: LD_VAR 0 4
55880: PUSH
55881: LD_INT 1
55883: ARRAY
55884: PUSH
55885: LD_INT 1
55887: ARRAY
55888: PUSH
55889: LD_STRING r
55891: EQUAL
55892: IFFALSE 55914
55894: PUSH
55895: LD_VAR 0 4
55899: PUSH
55900: LD_INT 1
55902: ARRAY
55903: PUSH
55904: LD_INT 4
55906: ARRAY
55907: PUSH
55908: LD_VAR 0 2
55912: EQUAL
55913: AND
55914: ST_TO_ADDR
// end ;
55915: LD_VAR 0 3
55919: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55920: LD_INT 0
55922: PPUSH
// SetDir ( unit , d ) ;
55923: LD_VAR 0 1
55927: PPUSH
55928: LD_VAR 0 4
55932: PPUSH
55933: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
55937: LD_ADDR_VAR 0 6
55941: PUSH
55942: LD_VAR 0 1
55946: PPUSH
55947: LD_VAR 0 2
55951: PPUSH
55952: LD_VAR 0 3
55956: PPUSH
55957: LD_VAR 0 5
55961: PPUSH
55962: CALL_OW 48
55966: ST_TO_ADDR
// end ;
55967: LD_VAR 0 6
55971: RET
// export function ToNaturalNumber ( number ) ; begin
55972: LD_INT 0
55974: PPUSH
// result := number div 1 ;
55975: LD_ADDR_VAR 0 2
55979: PUSH
55980: LD_VAR 0 1
55984: PUSH
55985: LD_INT 1
55987: DIV
55988: ST_TO_ADDR
// if number < 0 then
55989: LD_VAR 0 1
55993: PUSH
55994: LD_INT 0
55996: LESS
55997: IFFALSE 56007
// result := 0 ;
55999: LD_ADDR_VAR 0 2
56003: PUSH
56004: LD_INT 0
56006: ST_TO_ADDR
// end ;
56007: LD_VAR 0 2
56011: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56012: LD_INT 0
56014: PPUSH
56015: PPUSH
56016: PPUSH
// if not buildings then
56017: LD_VAR 0 1
56021: NOT
56022: IFFALSE 56026
// exit ;
56024: GO 56141
// tmp := [ ] ;
56026: LD_ADDR_VAR 0 5
56030: PUSH
56031: EMPTY
56032: ST_TO_ADDR
// for b in buildings do
56033: LD_ADDR_VAR 0 4
56037: PUSH
56038: LD_VAR 0 1
56042: PUSH
56043: FOR_IN
56044: IFFALSE 56082
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56046: LD_ADDR_VAR 0 5
56050: PUSH
56051: LD_VAR 0 5
56055: PPUSH
56056: LD_VAR 0 5
56060: PUSH
56061: LD_INT 1
56063: PLUS
56064: PPUSH
56065: LD_VAR 0 4
56069: PPUSH
56070: CALL_OW 266
56074: PPUSH
56075: CALL_OW 1
56079: ST_TO_ADDR
56080: GO 56043
56082: POP
56083: POP
// if not tmp then
56084: LD_VAR 0 5
56088: NOT
56089: IFFALSE 56093
// exit ;
56091: GO 56141
// if asc then
56093: LD_VAR 0 2
56097: IFFALSE 56121
// result := SortListByListAsc ( buildings , tmp ) else
56099: LD_ADDR_VAR 0 3
56103: PUSH
56104: LD_VAR 0 1
56108: PPUSH
56109: LD_VAR 0 5
56113: PPUSH
56114: CALL_OW 76
56118: ST_TO_ADDR
56119: GO 56141
// result := SortListByListDesc ( buildings , tmp ) ;
56121: LD_ADDR_VAR 0 3
56125: PUSH
56126: LD_VAR 0 1
56130: PPUSH
56131: LD_VAR 0 5
56135: PPUSH
56136: CALL_OW 77
56140: ST_TO_ADDR
// end ;
56141: LD_VAR 0 3
56145: RET
// export function SortByClass ( units , class ) ; var un ; begin
56146: LD_INT 0
56148: PPUSH
56149: PPUSH
// if not units or not class then
56150: LD_VAR 0 1
56154: NOT
56155: IFTRUE 56164
56157: PUSH
56158: LD_VAR 0 2
56162: NOT
56163: OR
56164: IFFALSE 56168
// exit ;
56166: GO 56263
// result := [ ] ;
56168: LD_ADDR_VAR 0 3
56172: PUSH
56173: EMPTY
56174: ST_TO_ADDR
// for un in units do
56175: LD_ADDR_VAR 0 4
56179: PUSH
56180: LD_VAR 0 1
56184: PUSH
56185: FOR_IN
56186: IFFALSE 56261
// if GetClass ( un ) = class then
56188: LD_VAR 0 4
56192: PPUSH
56193: CALL_OW 257
56197: PUSH
56198: LD_VAR 0 2
56202: EQUAL
56203: IFFALSE 56230
// result := Insert ( result , 1 , un ) else
56205: LD_ADDR_VAR 0 3
56209: PUSH
56210: LD_VAR 0 3
56214: PPUSH
56215: LD_INT 1
56217: PPUSH
56218: LD_VAR 0 4
56222: PPUSH
56223: CALL_OW 2
56227: ST_TO_ADDR
56228: GO 56259
// result := Replace ( result , result + 1 , un ) ;
56230: LD_ADDR_VAR 0 3
56234: PUSH
56235: LD_VAR 0 3
56239: PPUSH
56240: LD_VAR 0 3
56244: PUSH
56245: LD_INT 1
56247: PLUS
56248: PPUSH
56249: LD_VAR 0 4
56253: PPUSH
56254: CALL_OW 1
56258: ST_TO_ADDR
56259: GO 56185
56261: POP
56262: POP
// end ;
56263: LD_VAR 0 3
56267: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56268: LD_INT 0
56270: PPUSH
56271: PPUSH
56272: PPUSH
56273: PPUSH
56274: PPUSH
56275: PPUSH
56276: PPUSH
// result := [ ] ;
56277: LD_ADDR_VAR 0 4
56281: PUSH
56282: EMPTY
56283: ST_TO_ADDR
// if x - r < 0 then
56284: LD_VAR 0 1
56288: PUSH
56289: LD_VAR 0 3
56293: MINUS
56294: PUSH
56295: LD_INT 0
56297: LESS
56298: IFFALSE 56310
// min_x := 0 else
56300: LD_ADDR_VAR 0 8
56304: PUSH
56305: LD_INT 0
56307: ST_TO_ADDR
56308: GO 56326
// min_x := x - r ;
56310: LD_ADDR_VAR 0 8
56314: PUSH
56315: LD_VAR 0 1
56319: PUSH
56320: LD_VAR 0 3
56324: MINUS
56325: ST_TO_ADDR
// if y - r < 0 then
56326: LD_VAR 0 2
56330: PUSH
56331: LD_VAR 0 3
56335: MINUS
56336: PUSH
56337: LD_INT 0
56339: LESS
56340: IFFALSE 56352
// min_y := 0 else
56342: LD_ADDR_VAR 0 7
56346: PUSH
56347: LD_INT 0
56349: ST_TO_ADDR
56350: GO 56368
// min_y := y - r ;
56352: LD_ADDR_VAR 0 7
56356: PUSH
56357: LD_VAR 0 2
56361: PUSH
56362: LD_VAR 0 3
56366: MINUS
56367: ST_TO_ADDR
// max_x := x + r ;
56368: LD_ADDR_VAR 0 9
56372: PUSH
56373: LD_VAR 0 1
56377: PUSH
56378: LD_VAR 0 3
56382: PLUS
56383: ST_TO_ADDR
// max_y := y + r ;
56384: LD_ADDR_VAR 0 10
56388: PUSH
56389: LD_VAR 0 2
56393: PUSH
56394: LD_VAR 0 3
56398: PLUS
56399: ST_TO_ADDR
// for _x = min_x to max_x do
56400: LD_ADDR_VAR 0 5
56404: PUSH
56405: DOUBLE
56406: LD_VAR 0 8
56410: DEC
56411: ST_TO_ADDR
56412: LD_VAR 0 9
56416: PUSH
56417: FOR_TO
56418: IFFALSE 56519
// for _y = min_y to max_y do
56420: LD_ADDR_VAR 0 6
56424: PUSH
56425: DOUBLE
56426: LD_VAR 0 7
56430: DEC
56431: ST_TO_ADDR
56432: LD_VAR 0 10
56436: PUSH
56437: FOR_TO
56438: IFFALSE 56515
// begin if not ValidHex ( _x , _y ) then
56440: LD_VAR 0 5
56444: PPUSH
56445: LD_VAR 0 6
56449: PPUSH
56450: CALL_OW 488
56454: NOT
56455: IFFALSE 56459
// continue ;
56457: GO 56437
// if GetResourceTypeXY ( _x , _y ) then
56459: LD_VAR 0 5
56463: PPUSH
56464: LD_VAR 0 6
56468: PPUSH
56469: CALL_OW 283
56473: IFFALSE 56513
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56475: LD_ADDR_VAR 0 4
56479: PUSH
56480: LD_VAR 0 4
56484: PPUSH
56485: LD_VAR 0 4
56489: PUSH
56490: LD_INT 1
56492: PLUS
56493: PPUSH
56494: LD_VAR 0 5
56498: PUSH
56499: LD_VAR 0 6
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PPUSH
56508: CALL_OW 1
56512: ST_TO_ADDR
// end ;
56513: GO 56437
56515: POP
56516: POP
56517: GO 56417
56519: POP
56520: POP
// end ;
56521: LD_VAR 0 4
56525: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56526: LD_INT 0
56528: PPUSH
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
56533: PPUSH
56534: PPUSH
56535: PPUSH
// if not units then
56536: LD_VAR 0 1
56540: NOT
56541: IFFALSE 56545
// exit ;
56543: GO 57077
// result := UnitFilter ( units , [ f_ok ] ) ;
56545: LD_ADDR_VAR 0 3
56549: PUSH
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_INT 50
56557: PUSH
56558: EMPTY
56559: LIST
56560: PPUSH
56561: CALL_OW 72
56565: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56566: LD_ADDR_VAR 0 8
56570: PUSH
56571: LD_VAR 0 1
56575: PUSH
56576: LD_INT 1
56578: ARRAY
56579: PPUSH
56580: CALL_OW 255
56584: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56585: LD_ADDR_VAR 0 10
56589: PUSH
56590: LD_INT 29
56592: PUSH
56593: LD_INT 91
56595: PUSH
56596: LD_INT 49
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: LIST
56603: ST_TO_ADDR
// if not result then
56604: LD_VAR 0 3
56608: NOT
56609: IFFALSE 56613
// exit ;
56611: GO 57077
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56613: LD_ADDR_VAR 0 5
56617: PUSH
56618: LD_INT 81
56620: PUSH
56621: LD_VAR 0 8
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PPUSH
56630: CALL_OW 69
56634: ST_TO_ADDR
// for i in result do
56635: LD_ADDR_VAR 0 4
56639: PUSH
56640: LD_VAR 0 3
56644: PUSH
56645: FOR_IN
56646: IFFALSE 57075
// begin tag := GetTag ( i ) + 1 ;
56648: LD_ADDR_VAR 0 9
56652: PUSH
56653: LD_VAR 0 4
56657: PPUSH
56658: CALL_OW 110
56662: PUSH
56663: LD_INT 1
56665: PLUS
56666: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56667: LD_ADDR_VAR 0 7
56671: PUSH
56672: LD_VAR 0 4
56676: PPUSH
56677: CALL_OW 250
56681: PPUSH
56682: LD_VAR 0 4
56686: PPUSH
56687: CALL_OW 251
56691: PPUSH
56692: LD_INT 4
56694: PPUSH
56695: CALL 56268 0 3
56699: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56700: LD_VAR 0 4
56704: PPUSH
56705: CALL_OW 247
56709: PUSH
56710: LD_INT 2
56712: EQUAL
56713: IFFALSE 56725
56715: PUSH
56716: LD_VAR 0 7
56720: PUSH
56721: LD_INT 2
56723: GREATER
56724: AND
56725: IFFALSE 56745
56727: PUSH
56728: LD_VAR 0 4
56732: PPUSH
56733: CALL_OW 264
56737: PUSH
56738: LD_VAR 0 10
56742: IN
56743: NOT
56744: AND
56745: IFFALSE 56784
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56747: LD_VAR 0 4
56751: PPUSH
56752: LD_VAR 0 7
56756: PUSH
56757: LD_INT 1
56759: ARRAY
56760: PUSH
56761: LD_INT 1
56763: ARRAY
56764: PPUSH
56765: LD_VAR 0 7
56769: PUSH
56770: LD_INT 1
56772: ARRAY
56773: PUSH
56774: LD_INT 2
56776: ARRAY
56777: PPUSH
56778: CALL_OW 116
56782: GO 57073
// if path > tag then
56784: LD_VAR 0 2
56788: PUSH
56789: LD_VAR 0 9
56793: GREATER
56794: IFFALSE 57002
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56796: LD_ADDR_VAR 0 6
56800: PUSH
56801: LD_VAR 0 5
56805: PPUSH
56806: LD_INT 91
56808: PUSH
56809: LD_VAR 0 4
56813: PUSH
56814: LD_INT 8
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: PPUSH
56822: CALL_OW 72
56826: ST_TO_ADDR
// if nearEnemy then
56827: LD_VAR 0 6
56831: IFFALSE 56900
// begin if GetWeapon ( i ) = ru_time_lapser then
56833: LD_VAR 0 4
56837: PPUSH
56838: CALL_OW 264
56842: PUSH
56843: LD_INT 49
56845: EQUAL
56846: IFFALSE 56874
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56848: LD_VAR 0 4
56852: PPUSH
56853: LD_VAR 0 6
56857: PPUSH
56858: LD_VAR 0 4
56862: PPUSH
56863: CALL_OW 74
56867: PPUSH
56868: CALL_OW 112
56872: GO 56898
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56874: LD_VAR 0 4
56878: PPUSH
56879: LD_VAR 0 6
56883: PPUSH
56884: LD_VAR 0 4
56888: PPUSH
56889: CALL_OW 74
56893: PPUSH
56894: CALL 58158 0 2
// end else
56898: GO 57000
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56900: LD_VAR 0 4
56904: PPUSH
56905: LD_VAR 0 2
56909: PUSH
56910: LD_VAR 0 9
56914: ARRAY
56915: PUSH
56916: LD_INT 1
56918: ARRAY
56919: PPUSH
56920: LD_VAR 0 2
56924: PUSH
56925: LD_VAR 0 9
56929: ARRAY
56930: PUSH
56931: LD_INT 2
56933: ARRAY
56934: PPUSH
56935: CALL_OW 297
56939: PUSH
56940: LD_INT 6
56942: GREATER
56943: IFFALSE 56986
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56945: LD_VAR 0 4
56949: PPUSH
56950: LD_VAR 0 2
56954: PUSH
56955: LD_VAR 0 9
56959: ARRAY
56960: PUSH
56961: LD_INT 1
56963: ARRAY
56964: PPUSH
56965: LD_VAR 0 2
56969: PUSH
56970: LD_VAR 0 9
56974: ARRAY
56975: PUSH
56976: LD_INT 2
56978: ARRAY
56979: PPUSH
56980: CALL_OW 114
56984: GO 57000
// SetTag ( i , tag ) ;
56986: LD_VAR 0 4
56990: PPUSH
56991: LD_VAR 0 9
56995: PPUSH
56996: CALL_OW 109
// end else
57000: GO 57073
// if enemy then
57002: LD_VAR 0 5
57006: IFFALSE 57073
// begin if GetWeapon ( i ) = ru_time_lapser then
57008: LD_VAR 0 4
57012: PPUSH
57013: CALL_OW 264
57017: PUSH
57018: LD_INT 49
57020: EQUAL
57021: IFFALSE 57049
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57023: LD_VAR 0 4
57027: PPUSH
57028: LD_VAR 0 5
57032: PPUSH
57033: LD_VAR 0 4
57037: PPUSH
57038: CALL_OW 74
57042: PPUSH
57043: CALL_OW 112
57047: GO 57073
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57049: LD_VAR 0 4
57053: PPUSH
57054: LD_VAR 0 5
57058: PPUSH
57059: LD_VAR 0 4
57063: PPUSH
57064: CALL_OW 74
57068: PPUSH
57069: CALL 58158 0 2
// end ; end ;
57073: GO 56645
57075: POP
57076: POP
// end ;
57077: LD_VAR 0 3
57081: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57082: LD_INT 0
57084: PPUSH
57085: PPUSH
57086: PPUSH
// if not unit or IsInUnit ( unit ) then
57087: LD_VAR 0 1
57091: NOT
57092: IFTRUE 57105
57094: PUSH
57095: LD_VAR 0 1
57099: PPUSH
57100: CALL_OW 310
57104: OR
57105: IFFALSE 57109
// exit ;
57107: GO 57200
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57109: LD_ADDR_VAR 0 4
57113: PUSH
57114: LD_VAR 0 1
57118: PPUSH
57119: CALL_OW 250
57123: PPUSH
57124: LD_VAR 0 2
57128: PPUSH
57129: LD_INT 1
57131: PPUSH
57132: CALL_OW 272
57136: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57137: LD_ADDR_VAR 0 5
57141: PUSH
57142: LD_VAR 0 1
57146: PPUSH
57147: CALL_OW 251
57151: PPUSH
57152: LD_VAR 0 2
57156: PPUSH
57157: LD_INT 1
57159: PPUSH
57160: CALL_OW 273
57164: ST_TO_ADDR
// if ValidHex ( x , y ) then
57165: LD_VAR 0 4
57169: PPUSH
57170: LD_VAR 0 5
57174: PPUSH
57175: CALL_OW 488
57179: IFFALSE 57200
// ComTurnXY ( unit , x , y ) ;
57181: LD_VAR 0 1
57185: PPUSH
57186: LD_VAR 0 4
57190: PPUSH
57191: LD_VAR 0 5
57195: PPUSH
57196: CALL_OW 118
// end ;
57200: LD_VAR 0 3
57204: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57205: LD_INT 0
57207: PPUSH
57208: PPUSH
// result := false ;
57209: LD_ADDR_VAR 0 3
57213: PUSH
57214: LD_INT 0
57216: ST_TO_ADDR
// if not units then
57217: LD_VAR 0 2
57221: NOT
57222: IFFALSE 57226
// exit ;
57224: GO 57271
// for i in units do
57226: LD_ADDR_VAR 0 4
57230: PUSH
57231: LD_VAR 0 2
57235: PUSH
57236: FOR_IN
57237: IFFALSE 57269
// if See ( side , i ) then
57239: LD_VAR 0 1
57243: PPUSH
57244: LD_VAR 0 4
57248: PPUSH
57249: CALL_OW 292
57253: IFFALSE 57267
// begin result := true ;
57255: LD_ADDR_VAR 0 3
57259: PUSH
57260: LD_INT 1
57262: ST_TO_ADDR
// exit ;
57263: POP
57264: POP
57265: GO 57271
// end ;
57267: GO 57236
57269: POP
57270: POP
// end ;
57271: LD_VAR 0 3
57275: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57276: LD_INT 0
57278: PPUSH
57279: PPUSH
57280: PPUSH
57281: PPUSH
// if not unit or not points then
57282: LD_VAR 0 1
57286: NOT
57287: IFTRUE 57296
57289: PUSH
57290: LD_VAR 0 2
57294: NOT
57295: OR
57296: IFFALSE 57300
// exit ;
57298: GO 57390
// dist := 99999 ;
57300: LD_ADDR_VAR 0 5
57304: PUSH
57305: LD_INT 99999
57307: ST_TO_ADDR
// for i in points do
57308: LD_ADDR_VAR 0 4
57312: PUSH
57313: LD_VAR 0 2
57317: PUSH
57318: FOR_IN
57319: IFFALSE 57388
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57321: LD_ADDR_VAR 0 6
57325: PUSH
57326: LD_VAR 0 1
57330: PPUSH
57331: LD_VAR 0 4
57335: PUSH
57336: LD_INT 1
57338: ARRAY
57339: PPUSH
57340: LD_VAR 0 4
57344: PUSH
57345: LD_INT 2
57347: ARRAY
57348: PPUSH
57349: CALL_OW 297
57353: ST_TO_ADDR
// if tmpDist < dist then
57354: LD_VAR 0 6
57358: PUSH
57359: LD_VAR 0 5
57363: LESS
57364: IFFALSE 57386
// begin result := i ;
57366: LD_ADDR_VAR 0 3
57370: PUSH
57371: LD_VAR 0 4
57375: ST_TO_ADDR
// dist := tmpDist ;
57376: LD_ADDR_VAR 0 5
57380: PUSH
57381: LD_VAR 0 6
57385: ST_TO_ADDR
// end ; end ;
57386: GO 57318
57388: POP
57389: POP
// end ;
57390: LD_VAR 0 3
57394: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57395: LD_INT 0
57397: PPUSH
// uc_side := side ;
57398: LD_ADDR_OWVAR 20
57402: PUSH
57403: LD_VAR 0 1
57407: ST_TO_ADDR
// uc_nation := 3 ;
57408: LD_ADDR_OWVAR 21
57412: PUSH
57413: LD_INT 3
57415: ST_TO_ADDR
// vc_chassis := 25 ;
57416: LD_ADDR_OWVAR 37
57420: PUSH
57421: LD_INT 25
57423: ST_TO_ADDR
// vc_engine := engine_siberite ;
57424: LD_ADDR_OWVAR 39
57428: PUSH
57429: LD_INT 3
57431: ST_TO_ADDR
// vc_control := control_computer ;
57432: LD_ADDR_OWVAR 38
57436: PUSH
57437: LD_INT 3
57439: ST_TO_ADDR
// vc_weapon := 59 ;
57440: LD_ADDR_OWVAR 40
57444: PUSH
57445: LD_INT 59
57447: ST_TO_ADDR
// result := CreateVehicle ;
57448: LD_ADDR_VAR 0 5
57452: PUSH
57453: CALL_OW 45
57457: ST_TO_ADDR
// SetDir ( result , d ) ;
57458: LD_VAR 0 5
57462: PPUSH
57463: LD_VAR 0 4
57467: PPUSH
57468: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57472: LD_VAR 0 5
57476: PPUSH
57477: LD_VAR 0 2
57481: PPUSH
57482: LD_VAR 0 3
57486: PPUSH
57487: LD_INT 0
57489: PPUSH
57490: CALL_OW 48
// end ;
57494: LD_VAR 0 5
57498: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57499: LD_INT 0
57501: PPUSH
57502: PPUSH
57503: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57504: LD_ADDR_VAR 0 2
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 0
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57527: LD_VAR 0 1
57531: NOT
57532: IFTRUE 57565
57534: PUSH
57535: LD_VAR 0 1
57539: PPUSH
57540: CALL_OW 264
57544: PUSH
57545: LD_INT 12
57547: PUSH
57548: LD_INT 51
57550: PUSH
57551: LD_INT 32
57553: PUSH
57554: LD_INT 89
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: IN
57563: NOT
57564: OR
57565: IFFALSE 57569
// exit ;
57567: GO 57667
// for i := 1 to 3 do
57569: LD_ADDR_VAR 0 3
57573: PUSH
57574: DOUBLE
57575: LD_INT 1
57577: DEC
57578: ST_TO_ADDR
57579: LD_INT 3
57581: PUSH
57582: FOR_TO
57583: IFFALSE 57665
// begin tmp := GetCargo ( cargo , i ) ;
57585: LD_ADDR_VAR 0 4
57589: PUSH
57590: LD_VAR 0 1
57594: PPUSH
57595: LD_VAR 0 3
57599: PPUSH
57600: CALL_OW 289
57604: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57605: LD_ADDR_VAR 0 2
57609: PUSH
57610: LD_VAR 0 2
57614: PPUSH
57615: LD_VAR 0 3
57619: PPUSH
57620: LD_VAR 0 4
57624: PPUSH
57625: CALL_OW 1
57629: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57630: LD_ADDR_VAR 0 2
57634: PUSH
57635: LD_VAR 0 2
57639: PPUSH
57640: LD_INT 4
57642: PPUSH
57643: LD_VAR 0 2
57647: PUSH
57648: LD_INT 4
57650: ARRAY
57651: PUSH
57652: LD_VAR 0 4
57656: PLUS
57657: PPUSH
57658: CALL_OW 1
57662: ST_TO_ADDR
// end ;
57663: GO 57582
57665: POP
57666: POP
// end ;
57667: LD_VAR 0 2
57671: RET
// export function Length ( array ) ; begin
57672: LD_INT 0
57674: PPUSH
// result := array + 0 ;
57675: LD_ADDR_VAR 0 2
57679: PUSH
57680: LD_VAR 0 1
57684: PUSH
57685: LD_INT 0
57687: PLUS
57688: ST_TO_ADDR
// end ;
57689: LD_VAR 0 2
57693: RET
// export function PrepareArray ( array ) ; begin
57694: LD_INT 0
57696: PPUSH
// result := array diff 0 ;
57697: LD_ADDR_VAR 0 2
57701: PUSH
57702: LD_VAR 0 1
57706: PUSH
57707: LD_INT 0
57709: DIFF
57710: ST_TO_ADDR
// if not result [ 1 ] then
57711: LD_VAR 0 2
57715: PUSH
57716: LD_INT 1
57718: ARRAY
57719: NOT
57720: IFFALSE 57740
// result := Delete ( result , 1 ) ;
57722: LD_ADDR_VAR 0 2
57726: PUSH
57727: LD_VAR 0 2
57731: PPUSH
57732: LD_INT 1
57734: PPUSH
57735: CALL_OW 3
57739: ST_TO_ADDR
// end ;
57740: LD_VAR 0 2
57744: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57745: LD_INT 0
57747: PPUSH
57748: PPUSH
57749: PPUSH
57750: PPUSH
// sibRocketRange := 25 ;
57751: LD_ADDR_VAR 0 6
57755: PUSH
57756: LD_INT 25
57758: ST_TO_ADDR
// result := false ;
57759: LD_ADDR_VAR 0 4
57763: PUSH
57764: LD_INT 0
57766: ST_TO_ADDR
// for i := 0 to 5 do
57767: LD_ADDR_VAR 0 5
57771: PUSH
57772: DOUBLE
57773: LD_INT 0
57775: DEC
57776: ST_TO_ADDR
57777: LD_INT 5
57779: PUSH
57780: FOR_TO
57781: IFFALSE 57848
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57783: LD_VAR 0 1
57787: PPUSH
57788: LD_VAR 0 5
57792: PPUSH
57793: LD_VAR 0 6
57797: PPUSH
57798: CALL_OW 272
57802: PPUSH
57803: LD_VAR 0 2
57807: PPUSH
57808: LD_VAR 0 5
57812: PPUSH
57813: LD_VAR 0 6
57817: PPUSH
57818: CALL_OW 273
57822: PPUSH
57823: LD_VAR 0 3
57827: PPUSH
57828: CALL_OW 309
57832: IFFALSE 57846
// begin result := true ;
57834: LD_ADDR_VAR 0 4
57838: PUSH
57839: LD_INT 1
57841: ST_TO_ADDR
// exit ;
57842: POP
57843: POP
57844: GO 57850
// end ;
57846: GO 57780
57848: POP
57849: POP
// end ;
57850: LD_VAR 0 4
57854: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
57855: LD_INT 0
57857: PPUSH
57858: PPUSH
57859: PPUSH
// if btype = b_depot then
57860: LD_VAR 0 2
57864: PUSH
57865: LD_INT 0
57867: EQUAL
57868: IFFALSE 57880
// begin result := true ;
57870: LD_ADDR_VAR 0 3
57874: PUSH
57875: LD_INT 1
57877: ST_TO_ADDR
// exit ;
57878: GO 58000
// end ; pom := GetBase ( depot ) ;
57880: LD_ADDR_VAR 0 4
57884: PUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 274
57894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
57895: LD_ADDR_VAR 0 5
57899: PUSH
57900: LD_VAR 0 2
57904: PPUSH
57905: LD_VAR 0 1
57909: PPUSH
57910: CALL_OW 248
57914: PPUSH
57915: CALL_OW 450
57919: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
57920: LD_ADDR_VAR 0 3
57924: PUSH
57925: LD_VAR 0 4
57929: PPUSH
57930: LD_INT 1
57932: PPUSH
57933: CALL_OW 275
57937: PUSH
57938: LD_VAR 0 5
57942: PUSH
57943: LD_INT 1
57945: ARRAY
57946: GREATEREQUAL
57947: IFFALSE 57973
57949: PUSH
57950: LD_VAR 0 4
57954: PPUSH
57955: LD_INT 2
57957: PPUSH
57958: CALL_OW 275
57962: PUSH
57963: LD_VAR 0 5
57967: PUSH
57968: LD_INT 2
57970: ARRAY
57971: GREATEREQUAL
57972: AND
57973: IFFALSE 57999
57975: PUSH
57976: LD_VAR 0 4
57980: PPUSH
57981: LD_INT 3
57983: PPUSH
57984: CALL_OW 275
57988: PUSH
57989: LD_VAR 0 5
57993: PUSH
57994: LD_INT 3
57996: ARRAY
57997: GREATEREQUAL
57998: AND
57999: ST_TO_ADDR
// end ;
58000: LD_VAR 0 3
58004: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58005: LD_INT 0
58007: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58008: LD_VAR 0 1
58012: PPUSH
58013: LD_VAR 0 2
58017: PPUSH
58018: LD_INT 0
58020: PPUSH
58021: LD_INT 0
58023: PPUSH
58024: LD_INT 1
58026: PPUSH
58027: LD_INT 0
58029: PPUSH
58030: CALL_OW 587
// end ;
58034: LD_VAR 0 3
58038: RET
// export function CenterOnNow ( unit ) ; begin
58039: LD_INT 0
58041: PPUSH
// result := IsInUnit ( unit ) ;
58042: LD_ADDR_VAR 0 2
58046: PUSH
58047: LD_VAR 0 1
58051: PPUSH
58052: CALL_OW 310
58056: ST_TO_ADDR
// if not result then
58057: LD_VAR 0 2
58061: NOT
58062: IFFALSE 58074
// result := unit ;
58064: LD_ADDR_VAR 0 2
58068: PUSH
58069: LD_VAR 0 1
58073: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58074: LD_VAR 0 1
58078: PPUSH
58079: CALL_OW 87
// end ;
58083: LD_VAR 0 2
58087: RET
// export function ComMoveHex ( unit , hex ) ; begin
58088: LD_INT 0
58090: PPUSH
// if not hex then
58091: LD_VAR 0 2
58095: NOT
58096: IFFALSE 58100
// exit ;
58098: GO 58153
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58100: LD_VAR 0 2
58104: PUSH
58105: LD_INT 1
58107: ARRAY
58108: PPUSH
58109: LD_VAR 0 2
58113: PUSH
58114: LD_INT 2
58116: ARRAY
58117: PPUSH
58118: CALL_OW 428
58122: IFFALSE 58126
// exit ;
58124: GO 58153
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58126: LD_VAR 0 1
58130: PPUSH
58131: LD_VAR 0 2
58135: PUSH
58136: LD_INT 1
58138: ARRAY
58139: PPUSH
58140: LD_VAR 0 2
58144: PUSH
58145: LD_INT 2
58147: ARRAY
58148: PPUSH
58149: CALL_OW 111
// end ;
58153: LD_VAR 0 3
58157: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58158: LD_INT 0
58160: PPUSH
58161: PPUSH
58162: PPUSH
// if not unit or not enemy then
58163: LD_VAR 0 1
58167: NOT
58168: IFTRUE 58177
58170: PUSH
58171: LD_VAR 0 2
58175: NOT
58176: OR
58177: IFFALSE 58181
// exit ;
58179: GO 58307
// x := GetX ( enemy ) ;
58181: LD_ADDR_VAR 0 4
58185: PUSH
58186: LD_VAR 0 2
58190: PPUSH
58191: CALL_OW 250
58195: ST_TO_ADDR
// y := GetY ( enemy ) ;
58196: LD_ADDR_VAR 0 5
58200: PUSH
58201: LD_VAR 0 2
58205: PPUSH
58206: CALL_OW 251
58210: ST_TO_ADDR
// if ValidHex ( x , y ) then
58211: LD_VAR 0 4
58215: PPUSH
58216: LD_VAR 0 5
58220: PPUSH
58221: CALL_OW 488
58225: IFFALSE 58307
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58227: LD_VAR 0 2
58231: PPUSH
58232: CALL_OW 247
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: IN
58247: IFTRUE 58270
58249: PUSH
58250: LD_VAR 0 1
58254: PPUSH
58255: CALL_OW 255
58259: PPUSH
58260: LD_VAR 0 2
58264: PPUSH
58265: CALL_OW 292
58269: OR
58270: IFFALSE 58288
// ComAttackUnit ( unit , enemy ) else
58272: LD_VAR 0 1
58276: PPUSH
58277: LD_VAR 0 2
58281: PPUSH
58282: CALL_OW 115
58286: GO 58307
// ComAgressiveMove ( unit , x , y ) ;
58288: LD_VAR 0 1
58292: PPUSH
58293: LD_VAR 0 4
58297: PPUSH
58298: LD_VAR 0 5
58302: PPUSH
58303: CALL_OW 114
// end ;
58307: LD_VAR 0 3
58311: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58312: LD_INT 0
58314: PPUSH
58315: PPUSH
58316: PPUSH
// list := AreaToList ( area , 0 ) ;
58317: LD_ADDR_VAR 0 5
58321: PUSH
58322: LD_VAR 0 1
58326: PPUSH
58327: LD_INT 0
58329: PPUSH
58330: CALL_OW 517
58334: ST_TO_ADDR
// if not list then
58335: LD_VAR 0 5
58339: NOT
58340: IFFALSE 58344
// exit ;
58342: GO 58474
// if all then
58344: LD_VAR 0 2
58348: IFFALSE 58436
// begin for i := 1 to list [ 1 ] do
58350: LD_ADDR_VAR 0 4
58354: PUSH
58355: DOUBLE
58356: LD_INT 1
58358: DEC
58359: ST_TO_ADDR
58360: LD_VAR 0 5
58364: PUSH
58365: LD_INT 1
58367: ARRAY
58368: PUSH
58369: FOR_TO
58370: IFFALSE 58432
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58372: LD_ADDR_VAR 0 3
58376: PUSH
58377: LD_VAR 0 3
58381: PPUSH
58382: LD_VAR 0 3
58386: PUSH
58387: LD_INT 1
58389: PLUS
58390: PPUSH
58391: LD_VAR 0 5
58395: PUSH
58396: LD_INT 1
58398: ARRAY
58399: PUSH
58400: LD_VAR 0 4
58404: ARRAY
58405: PUSH
58406: LD_VAR 0 5
58410: PUSH
58411: LD_INT 2
58413: ARRAY
58414: PUSH
58415: LD_VAR 0 4
58419: ARRAY
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PPUSH
58425: CALL_OW 1
58429: ST_TO_ADDR
58430: GO 58369
58432: POP
58433: POP
// exit ;
58434: GO 58474
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58436: LD_ADDR_VAR 0 3
58440: PUSH
58441: LD_VAR 0 5
58445: PUSH
58446: LD_INT 1
58448: ARRAY
58449: PUSH
58450: LD_INT 1
58452: ARRAY
58453: PUSH
58454: LD_VAR 0 5
58458: PUSH
58459: LD_INT 2
58461: ARRAY
58462: PUSH
58463: LD_INT 1
58465: ARRAY
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: EMPTY
58472: LIST
58473: ST_TO_ADDR
// end ;
58474: LD_VAR 0 3
58478: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58479: LD_INT 0
58481: PPUSH
58482: PPUSH
// list := AreaToList ( area , 0 ) ;
58483: LD_ADDR_VAR 0 4
58487: PUSH
58488: LD_VAR 0 1
58492: PPUSH
58493: LD_INT 0
58495: PPUSH
58496: CALL_OW 517
58500: ST_TO_ADDR
// if not list then
58501: LD_VAR 0 4
58505: NOT
58506: IFFALSE 58510
// exit ;
58508: GO 58551
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58510: LD_ADDR_VAR 0 3
58514: PUSH
58515: LD_VAR 0 4
58519: PUSH
58520: LD_INT 1
58522: ARRAY
58523: PUSH
58524: LD_INT 1
58526: ARRAY
58527: PUSH
58528: LD_VAR 0 4
58532: PUSH
58533: LD_INT 2
58535: ARRAY
58536: PUSH
58537: LD_INT 1
58539: ARRAY
58540: PUSH
58541: LD_VAR 0 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
// end ;
58551: LD_VAR 0 3
58555: RET
// export function First ( array ) ; begin
58556: LD_INT 0
58558: PPUSH
// if not array then
58559: LD_VAR 0 1
58563: NOT
58564: IFFALSE 58568
// exit ;
58566: GO 58582
// result := array [ 1 ] ;
58568: LD_ADDR_VAR 0 2
58572: PUSH
58573: LD_VAR 0 1
58577: PUSH
58578: LD_INT 1
58580: ARRAY
58581: ST_TO_ADDR
// end ;
58582: LD_VAR 0 2
58586: RET
// export function Last ( array ) ; begin
58587: LD_INT 0
58589: PPUSH
// if not array then
58590: LD_VAR 0 1
58594: NOT
58595: IFFALSE 58599
// exit ;
58597: GO 58615
// result := array [ array ] ;
58599: LD_ADDR_VAR 0 2
58603: PUSH
58604: LD_VAR 0 1
58608: PUSH
58609: LD_VAR 0 1
58613: ARRAY
58614: ST_TO_ADDR
// end ;
58615: LD_VAR 0 2
58619: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58620: LD_INT 0
58622: PPUSH
58623: PPUSH
// result := [ ] ;
58624: LD_ADDR_VAR 0 5
58628: PUSH
58629: EMPTY
58630: ST_TO_ADDR
// if not array then
58631: LD_VAR 0 1
58635: NOT
58636: IFFALSE 58640
// exit ;
58638: GO 58752
// for i := 1 to array do
58640: LD_ADDR_VAR 0 6
58644: PUSH
58645: DOUBLE
58646: LD_INT 1
58648: DEC
58649: ST_TO_ADDR
58650: LD_VAR 0 1
58654: PUSH
58655: FOR_TO
58656: IFFALSE 58750
// if array [ i ] [ index ] = value then
58658: LD_VAR 0 1
58662: PUSH
58663: LD_VAR 0 6
58667: ARRAY
58668: PUSH
58669: LD_VAR 0 2
58673: ARRAY
58674: PUSH
58675: LD_VAR 0 3
58679: EQUAL
58680: IFFALSE 58748
// begin if indexColumn then
58682: LD_VAR 0 4
58686: IFFALSE 58722
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58688: LD_ADDR_VAR 0 5
58692: PUSH
58693: LD_VAR 0 5
58697: PPUSH
58698: LD_VAR 0 1
58702: PUSH
58703: LD_VAR 0 6
58707: ARRAY
58708: PUSH
58709: LD_VAR 0 4
58713: ARRAY
58714: PPUSH
58715: CALL 53760 0 2
58719: ST_TO_ADDR
58720: GO 58748
// result := Join ( result , array [ i ] ) ;
58722: LD_ADDR_VAR 0 5
58726: PUSH
58727: LD_VAR 0 5
58731: PPUSH
58732: LD_VAR 0 1
58736: PUSH
58737: LD_VAR 0 6
58741: ARRAY
58742: PPUSH
58743: CALL 53760 0 2
58747: ST_TO_ADDR
// end ;
58748: GO 58655
58750: POP
58751: POP
// end ;
58752: LD_VAR 0 5
58756: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58757: LD_INT 0
58759: PPUSH
// if not vehicles or not parkingPoint then
58760: LD_VAR 0 1
58764: NOT
58765: IFTRUE 58774
58767: PUSH
58768: LD_VAR 0 2
58772: NOT
58773: OR
58774: IFFALSE 58778
// exit ;
58776: GO 58876
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58778: LD_ADDR_VAR 0 1
58782: PUSH
58783: LD_VAR 0 1
58787: PPUSH
58788: LD_INT 50
58790: PUSH
58791: EMPTY
58792: LIST
58793: PUSH
58794: LD_INT 3
58796: PUSH
58797: LD_INT 92
58799: PUSH
58800: LD_VAR 0 2
58804: PUSH
58805: LD_INT 1
58807: ARRAY
58808: PUSH
58809: LD_VAR 0 2
58813: PUSH
58814: LD_INT 2
58816: ARRAY
58817: PUSH
58818: LD_INT 8
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PPUSH
58835: CALL_OW 72
58839: ST_TO_ADDR
// if not vehicles then
58840: LD_VAR 0 1
58844: NOT
58845: IFFALSE 58849
// exit ;
58847: GO 58876
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58849: LD_VAR 0 1
58853: PPUSH
58854: LD_VAR 0 2
58858: PUSH
58859: LD_INT 1
58861: ARRAY
58862: PPUSH
58863: LD_VAR 0 2
58867: PUSH
58868: LD_INT 2
58870: ARRAY
58871: PPUSH
58872: CALL_OW 111
// end ;
58876: LD_VAR 0 3
58880: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
58881: LD_INT 0
58883: PPUSH
58884: PPUSH
58885: PPUSH
// if not side or not area then
58886: LD_VAR 0 1
58890: NOT
58891: IFTRUE 58900
58893: PUSH
58894: LD_VAR 0 2
58898: NOT
58899: OR
58900: IFFALSE 58904
// exit ;
58902: GO 59023
// tmp := AreaToList ( area , 0 ) ;
58904: LD_ADDR_VAR 0 5
58908: PUSH
58909: LD_VAR 0 2
58913: PPUSH
58914: LD_INT 0
58916: PPUSH
58917: CALL_OW 517
58921: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
58922: LD_ADDR_VAR 0 4
58926: PUSH
58927: DOUBLE
58928: LD_INT 1
58930: DEC
58931: ST_TO_ADDR
58932: LD_VAR 0 5
58936: PUSH
58937: LD_INT 1
58939: ARRAY
58940: PUSH
58941: FOR_TO
58942: IFFALSE 59021
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
58944: LD_VAR 0 5
58948: PUSH
58949: LD_INT 1
58951: ARRAY
58952: PUSH
58953: LD_VAR 0 4
58957: ARRAY
58958: PPUSH
58959: LD_VAR 0 5
58963: PUSH
58964: LD_INT 2
58966: ARRAY
58967: PUSH
58968: LD_VAR 0 4
58972: ARRAY
58973: PPUSH
58974: CALL_OW 351
58978: IFFALSE 59019
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
58980: LD_VAR 0 5
58984: PUSH
58985: LD_INT 1
58987: ARRAY
58988: PUSH
58989: LD_VAR 0 4
58993: ARRAY
58994: PPUSH
58995: LD_VAR 0 5
58999: PUSH
59000: LD_INT 2
59002: ARRAY
59003: PUSH
59004: LD_VAR 0 4
59008: ARRAY
59009: PPUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: CALL_OW 244
// end ;
59019: GO 58941
59021: POP
59022: POP
// end ;
59023: LD_VAR 0 3
59027: RET
// export function UniqueArray ( array ) ; var i ; begin
59028: LD_INT 0
59030: PPUSH
59031: PPUSH
// result := [ ] ;
59032: LD_ADDR_VAR 0 2
59036: PUSH
59037: EMPTY
59038: ST_TO_ADDR
// if not array then
59039: LD_VAR 0 1
59043: NOT
59044: IFFALSE 59048
// exit ;
59046: GO 59109
// for i := 1 to array do
59048: LD_ADDR_VAR 0 3
59052: PUSH
59053: DOUBLE
59054: LD_INT 1
59056: DEC
59057: ST_TO_ADDR
59058: LD_VAR 0 1
59062: PUSH
59063: FOR_TO
59064: IFFALSE 59107
// if not array [ i ] in result then
59066: LD_VAR 0 1
59070: PUSH
59071: LD_VAR 0 3
59075: ARRAY
59076: PUSH
59077: LD_VAR 0 2
59081: IN
59082: NOT
59083: IFFALSE 59105
// result := Join ( result , i ) ;
59085: LD_ADDR_VAR 0 2
59089: PUSH
59090: LD_VAR 0 2
59094: PPUSH
59095: LD_VAR 0 3
59099: PPUSH
59100: CALL 53760 0 2
59104: ST_TO_ADDR
59105: GO 59063
59107: POP
59108: POP
// end ; end_of_file
59109: LD_VAR 0 2
59113: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59114: LD_INT 0
59116: PPUSH
// ComRadiation ( un ) ;
59117: LD_VAR 0 1
59121: PPUSH
59122: CALL 60203 0 1
// end ;
59126: LD_VAR 0 2
59130: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59131: LD_INT 0
59133: PPUSH
// ComRadiation ( un ) ;
59134: LD_VAR 0 1
59138: PPUSH
59139: CALL 60203 0 1
// end ;
59143: LD_VAR 0 2
59147: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59148: LD_INT 0
59150: PPUSH
// end ;
59151: LD_VAR 0 4
59155: RET
// export function SOS_Command ( cmd ) ; begin
59156: LD_INT 0
59158: PPUSH
// end ;
59159: LD_VAR 0 2
59163: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59164: LD_INT 0
59166: PPUSH
// end ;
59167: LD_VAR 0 6
59171: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
59172: LD_INT 0
59174: PPUSH
59175: PPUSH
59176: PPUSH
59177: PPUSH
// if not vehicle or not factory then
59178: LD_VAR 0 1
59182: NOT
59183: IFTRUE 59192
59185: PUSH
59186: LD_VAR 0 2
59190: NOT
59191: OR
59192: IFFALSE 59196
// exit ;
59194: GO 59778
// if not factoryWaypoints then
59196: LD_EXP 53
59200: NOT
59201: IFFALSE 59205
// exit ;
59203: GO 59778
// for i := 1 to Count ( factoryWaypoints ) do
59205: LD_ADDR_VAR 0 4
59209: PUSH
59210: DOUBLE
59211: LD_INT 1
59213: DEC
59214: ST_TO_ADDR
59215: LD_EXP 53
59219: PPUSH
59220: CALL 17828 0 1
59224: PUSH
59225: FOR_TO
59226: IFFALSE 59776
// if factoryWaypoints [ i ] [ 2 ] = factory then
59228: LD_EXP 53
59232: PUSH
59233: LD_VAR 0 4
59237: ARRAY
59238: PUSH
59239: LD_INT 2
59241: ARRAY
59242: PUSH
59243: LD_VAR 0 2
59247: EQUAL
59248: IFFALSE 59774
// begin if GetControl ( vehicle ) = control_manual then
59250: LD_VAR 0 1
59254: PPUSH
59255: CALL_OW 263
59259: PUSH
59260: LD_INT 1
59262: EQUAL
59263: IFFALSE 59627
// begin driver := IsDrivenBy ( vehicle ) ;
59265: LD_ADDR_VAR 0 5
59269: PUSH
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 311
59279: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59280: LD_VAR 0 5
59284: PUSH
59285: LD_EXP 54
59289: IN
59290: IFTRUE 59304
59292: PUSH
59293: LD_VAR 0 1
59297: PUSH
59298: LD_EXP 54
59302: IN
59303: OR
59304: IFFALSE 59310
// exit ;
59306: POP
59307: POP
59308: GO 59778
// if not HasTask ( driver ) then
59310: LD_VAR 0 5
59314: PPUSH
59315: CALL_OW 314
59319: NOT
59320: IFFALSE 59625
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59322: LD_ADDR_EXP 54
59326: PUSH
59327: LD_EXP 54
59331: PPUSH
59332: LD_VAR 0 5
59336: PPUSH
59337: CALL 53760 0 2
59341: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59342: LD_ADDR_EXP 54
59346: PUSH
59347: LD_EXP 54
59351: PPUSH
59352: LD_VAR 0 1
59356: PPUSH
59357: CALL 53760 0 2
59361: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59362: LD_ADDR_VAR 0 6
59366: PUSH
59367: LD_EXP 53
59371: PUSH
59372: LD_VAR 0 4
59376: ARRAY
59377: PUSH
59378: LD_INT 3
59380: ARRAY
59381: PPUSH
59382: LD_EXP 53
59386: PUSH
59387: LD_VAR 0 4
59391: ARRAY
59392: PUSH
59393: LD_INT 4
59395: ARRAY
59396: PPUSH
59397: CALL_OW 428
59401: ST_TO_ADDR
// if hex then
59402: LD_VAR 0 6
59406: IFFALSE 59424
// ComMoveUnit ( driver , hex ) else
59408: LD_VAR 0 5
59412: PPUSH
59413: LD_VAR 0 6
59417: PPUSH
59418: CALL_OW 112
59422: GO 59508
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59424: LD_VAR 0 1
59428: PPUSH
59429: LD_EXP 53
59433: PUSH
59434: LD_VAR 0 4
59438: ARRAY
59439: PUSH
59440: LD_INT 3
59442: ARRAY
59443: PPUSH
59444: LD_EXP 53
59448: PUSH
59449: LD_VAR 0 4
59453: ARRAY
59454: PUSH
59455: LD_INT 4
59457: ARRAY
59458: PPUSH
59459: CALL_OW 297
59463: PUSH
59464: LD_INT 0
59466: GREATER
59467: IFFALSE 59508
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59469: LD_VAR 0 5
59473: PPUSH
59474: LD_EXP 53
59478: PUSH
59479: LD_VAR 0 4
59483: ARRAY
59484: PUSH
59485: LD_INT 3
59487: ARRAY
59488: PPUSH
59489: LD_EXP 53
59493: PUSH
59494: LD_VAR 0 4
59498: ARRAY
59499: PUSH
59500: LD_INT 4
59502: ARRAY
59503: PPUSH
59504: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59508: LD_VAR 0 5
59512: PPUSH
59513: CALL_OW 181
// if Multiplayer then
59517: LD_OWVAR 4
59521: IFFALSE 59570
// begin repeat wait ( 10 ) ;
59523: LD_INT 10
59525: PPUSH
59526: CALL_OW 67
// until not IsInUnit ( driver ) ;
59530: LD_VAR 0 5
59534: PPUSH
59535: CALL_OW 310
59539: NOT
59540: IFFALSE 59523
// if not HasTask ( driver ) then
59542: LD_VAR 0 5
59546: PPUSH
59547: CALL_OW 314
59551: NOT
59552: IFFALSE 59568
// ComEnterUnit ( driver , factory ) ;
59554: LD_VAR 0 5
59558: PPUSH
59559: LD_VAR 0 2
59563: PPUSH
59564: CALL_OW 120
// end else
59568: GO 59584
// AddComEnterUnit ( driver , factory ) ;
59570: LD_VAR 0 5
59574: PPUSH
59575: LD_VAR 0 2
59579: PPUSH
59580: CALL_OW 180
// wait ( 0 0$1 ) ;
59584: LD_INT 35
59586: PPUSH
59587: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59591: LD_ADDR_EXP 54
59595: PUSH
59596: LD_EXP 54
59600: PUSH
59601: LD_VAR 0 5
59605: DIFF
59606: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59607: LD_ADDR_EXP 54
59611: PUSH
59612: LD_EXP 54
59616: PUSH
59617: LD_VAR 0 1
59621: DIFF
59622: ST_TO_ADDR
// break ;
59623: GO 59776
// end ; end else
59625: GO 59774
// if GetControl ( vehicle ) = control_remote then
59627: LD_VAR 0 1
59631: PPUSH
59632: CALL_OW 263
59636: PUSH
59637: LD_INT 2
59639: EQUAL
59640: IFFALSE 59726
// begin wait ( 0 0$2 ) ;
59642: LD_INT 70
59644: PPUSH
59645: CALL_OW 67
// repeat wait ( 10 ) ;
59649: LD_INT 10
59651: PPUSH
59652: CALL_OW 67
// Connect ( vehicle ) ;
59656: LD_VAR 0 1
59660: PPUSH
59661: CALL 24072 0 1
// until IsControledBy ( vehicle ) ;
59665: LD_VAR 0 1
59669: PPUSH
59670: CALL_OW 312
59674: IFFALSE 59649
// wait ( 10 ) ;
59676: LD_INT 10
59678: PPUSH
59679: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59683: LD_VAR 0 1
59687: PPUSH
59688: LD_EXP 53
59692: PUSH
59693: LD_VAR 0 4
59697: ARRAY
59698: PUSH
59699: LD_INT 3
59701: ARRAY
59702: PPUSH
59703: LD_EXP 53
59707: PUSH
59708: LD_VAR 0 4
59712: ARRAY
59713: PUSH
59714: LD_INT 4
59716: ARRAY
59717: PPUSH
59718: CALL_OW 111
// break ;
59722: GO 59776
// end else
59724: GO 59774
// begin wait ( 0 0$3 ) ;
59726: LD_INT 105
59728: PPUSH
59729: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59733: LD_VAR 0 1
59737: PPUSH
59738: LD_EXP 53
59742: PUSH
59743: LD_VAR 0 4
59747: ARRAY
59748: PUSH
59749: LD_INT 3
59751: ARRAY
59752: PPUSH
59753: LD_EXP 53
59757: PUSH
59758: LD_VAR 0 4
59762: ARRAY
59763: PUSH
59764: LD_INT 4
59766: ARRAY
59767: PPUSH
59768: CALL_OW 111
// break ;
59772: GO 59776
// end ; end ;
59774: GO 59225
59776: POP
59777: POP
// end ;
59778: LD_VAR 0 3
59782: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
59783: LD_INT 0
59785: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
59786: LD_VAR 0 1
59790: PUSH
59791: LD_INT 250
59793: EQUAL
59794: IFFALSE 59811
59796: PUSH
59797: LD_VAR 0 2
59801: PPUSH
59802: CALL_OW 264
59806: PUSH
59807: LD_INT 81
59809: EQUAL
59810: AND
59811: IFFALSE 59832
// MinerPlaceMine ( unit , x , y ) ;
59813: LD_VAR 0 2
59817: PPUSH
59818: LD_VAR 0 4
59822: PPUSH
59823: LD_VAR 0 5
59827: PPUSH
59828: CALL 62964 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
59832: LD_VAR 0 1
59836: PUSH
59837: LD_INT 251
59839: EQUAL
59840: IFFALSE 59857
59842: PUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: CALL_OW 264
59852: PUSH
59853: LD_INT 81
59855: EQUAL
59856: AND
59857: IFFALSE 59878
// MinerDetonateMine ( unit , x , y ) ;
59859: LD_VAR 0 2
59863: PPUSH
59864: LD_VAR 0 4
59868: PPUSH
59869: LD_VAR 0 5
59873: PPUSH
59874: CALL 63243 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
59878: LD_VAR 0 1
59882: PUSH
59883: LD_INT 252
59885: EQUAL
59886: IFFALSE 59903
59888: PUSH
59889: LD_VAR 0 2
59893: PPUSH
59894: CALL_OW 264
59898: PUSH
59899: LD_INT 81
59901: EQUAL
59902: AND
59903: IFFALSE 59924
// MinerCreateMinefield ( unit , x , y ) ;
59905: LD_VAR 0 2
59909: PPUSH
59910: LD_VAR 0 4
59914: PPUSH
59915: LD_VAR 0 5
59919: PPUSH
59920: CALL 63662 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
59924: LD_VAR 0 1
59928: PUSH
59929: LD_INT 253
59931: EQUAL
59932: IFFALSE 59949
59934: PUSH
59935: LD_VAR 0 2
59939: PPUSH
59940: CALL_OW 257
59944: PUSH
59945: LD_INT 5
59947: EQUAL
59948: AND
59949: IFFALSE 59970
// ComBinocular ( unit , x , y ) ;
59951: LD_VAR 0 2
59955: PPUSH
59956: LD_VAR 0 4
59960: PPUSH
59961: LD_VAR 0 5
59965: PPUSH
59966: CALL 64037 0 3
// if selectedUnit then
59970: LD_VAR 0 3
59974: IFFALSE 60034
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
59976: LD_VAR 0 1
59980: PUSH
59981: LD_INT 254
59983: EQUAL
59984: IFFALSE 60001
59986: PUSH
59987: LD_VAR 0 2
59991: PPUSH
59992: CALL_OW 264
59996: PUSH
59997: LD_INT 99
59999: EQUAL
60000: AND
60001: IFFALSE 60018
60003: PUSH
60004: LD_VAR 0 3
60008: PPUSH
60009: CALL_OW 263
60013: PUSH
60014: LD_INT 3
60016: EQUAL
60017: AND
60018: IFFALSE 60034
// HackDestroyVehicle ( unit , selectedUnit ) ;
60020: LD_VAR 0 2
60024: PPUSH
60025: LD_VAR 0 3
60029: PPUSH
60030: CALL 62324 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60034: LD_VAR 0 1
60038: PUSH
60039: LD_INT 255
60041: EQUAL
60042: IFFALSE 60066
60044: PUSH
60045: LD_VAR 0 2
60049: PPUSH
60050: CALL_OW 264
60054: PUSH
60055: LD_INT 14
60057: PUSH
60058: LD_INT 53
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: IN
60065: AND
60066: IFFALSE 60084
60068: PUSH
60069: LD_VAR 0 4
60073: PPUSH
60074: LD_VAR 0 5
60078: PPUSH
60079: CALL_OW 488
60083: AND
60084: IFFALSE 60108
// CutTreeXYR ( unit , x , y , 12 ) ;
60086: LD_VAR 0 2
60090: PPUSH
60091: LD_VAR 0 4
60095: PPUSH
60096: LD_VAR 0 5
60100: PPUSH
60101: LD_INT 12
60103: PPUSH
60104: CALL 60299 0 4
// if cmd = 256 then
60108: LD_VAR 0 1
60112: PUSH
60113: LD_INT 256
60115: EQUAL
60116: IFFALSE 60137
// SetFactoryWaypoint ( unit , x , y ) ;
60118: LD_VAR 0 2
60122: PPUSH
60123: LD_VAR 0 4
60127: PPUSH
60128: LD_VAR 0 5
60132: PPUSH
60133: CALL 65196 0 3
// if cmd = 257 then
60137: LD_VAR 0 1
60141: PUSH
60142: LD_INT 257
60144: EQUAL
60145: IFFALSE 60166
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60147: LD_VAR 0 2
60151: PPUSH
60152: LD_VAR 0 4
60156: PPUSH
60157: LD_VAR 0 5
60161: PPUSH
60162: CALL 65692 0 3
// if cmd = 258 then
60166: LD_VAR 0 1
60170: PUSH
60171: LD_INT 258
60173: EQUAL
60174: IFFALSE 60198
// BurnTreeXYR ( unit , x , y , 8 ) ;
60176: LD_VAR 0 2
60180: PPUSH
60181: LD_VAR 0 4
60185: PPUSH
60186: LD_VAR 0 5
60190: PPUSH
60191: LD_INT 8
60193: PPUSH
60194: CALL 60699 0 4
// end ;
60198: LD_VAR 0 6
60202: RET
// export function ComRadiation ( un ) ; var eff ; begin
60203: LD_INT 0
60205: PPUSH
60206: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60207: LD_VAR 0 1
60211: PPUSH
60212: CALL_OW 264
60216: PUSH
60217: LD_INT 91
60219: NONEQUAL
60220: IFFALSE 60224
// exit ;
60222: GO 60294
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60224: LD_INT 68
60226: PPUSH
60227: LD_VAR 0 1
60231: PPUSH
60232: CALL_OW 255
60236: PPUSH
60237: CALL_OW 321
60241: PUSH
60242: LD_INT 2
60244: EQUAL
60245: IFFALSE 60257
// eff := 50 else
60247: LD_ADDR_VAR 0 3
60251: PUSH
60252: LD_INT 50
60254: ST_TO_ADDR
60255: GO 60265
// eff := 25 ;
60257: LD_ADDR_VAR 0 3
60261: PUSH
60262: LD_INT 25
60264: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60265: LD_VAR 0 1
60269: PPUSH
60270: CALL_OW 250
60274: PPUSH
60275: LD_VAR 0 1
60279: PPUSH
60280: CALL_OW 251
60284: PPUSH
60285: LD_VAR 0 3
60289: PPUSH
60290: CALL_OW 495
// end ;
60294: LD_VAR 0 2
60298: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60299: LD_INT 0
60301: PPUSH
60302: PPUSH
60303: PPUSH
60304: PPUSH
60305: PPUSH
60306: PPUSH
60307: PPUSH
60308: PPUSH
60309: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60310: LD_VAR 0 1
60314: PPUSH
60315: CALL_OW 302
60319: NOT
60320: IFTRUE 60339
60322: PUSH
60323: LD_VAR 0 2
60327: PPUSH
60328: LD_VAR 0 3
60332: PPUSH
60333: CALL_OW 488
60337: NOT
60338: OR
60339: IFTRUE 60348
60341: PUSH
60342: LD_VAR 0 4
60346: NOT
60347: OR
60348: IFFALSE 60352
// exit ;
60350: GO 60694
// list := [ ] ;
60352: LD_ADDR_VAR 0 13
60356: PUSH
60357: EMPTY
60358: ST_TO_ADDR
// if x - r < 0 then
60359: LD_VAR 0 2
60363: PUSH
60364: LD_VAR 0 4
60368: MINUS
60369: PUSH
60370: LD_INT 0
60372: LESS
60373: IFFALSE 60385
// min_x := 0 else
60375: LD_ADDR_VAR 0 7
60379: PUSH
60380: LD_INT 0
60382: ST_TO_ADDR
60383: GO 60401
// min_x := x - r ;
60385: LD_ADDR_VAR 0 7
60389: PUSH
60390: LD_VAR 0 2
60394: PUSH
60395: LD_VAR 0 4
60399: MINUS
60400: ST_TO_ADDR
// if y - r < 0 then
60401: LD_VAR 0 3
60405: PUSH
60406: LD_VAR 0 4
60410: MINUS
60411: PUSH
60412: LD_INT 0
60414: LESS
60415: IFFALSE 60427
// min_y := 0 else
60417: LD_ADDR_VAR 0 8
60421: PUSH
60422: LD_INT 0
60424: ST_TO_ADDR
60425: GO 60443
// min_y := y - r ;
60427: LD_ADDR_VAR 0 8
60431: PUSH
60432: LD_VAR 0 3
60436: PUSH
60437: LD_VAR 0 4
60441: MINUS
60442: ST_TO_ADDR
// max_x := x + r ;
60443: LD_ADDR_VAR 0 9
60447: PUSH
60448: LD_VAR 0 2
60452: PUSH
60453: LD_VAR 0 4
60457: PLUS
60458: ST_TO_ADDR
// max_y := y + r ;
60459: LD_ADDR_VAR 0 10
60463: PUSH
60464: LD_VAR 0 3
60468: PUSH
60469: LD_VAR 0 4
60473: PLUS
60474: ST_TO_ADDR
// for _x = min_x to max_x do
60475: LD_ADDR_VAR 0 11
60479: PUSH
60480: DOUBLE
60481: LD_VAR 0 7
60485: DEC
60486: ST_TO_ADDR
60487: LD_VAR 0 9
60491: PUSH
60492: FOR_TO
60493: IFFALSE 60612
// for _y = min_y to max_y do
60495: LD_ADDR_VAR 0 12
60499: PUSH
60500: DOUBLE
60501: LD_VAR 0 8
60505: DEC
60506: ST_TO_ADDR
60507: LD_VAR 0 10
60511: PUSH
60512: FOR_TO
60513: IFFALSE 60608
// begin if not ValidHex ( _x , _y ) then
60515: LD_VAR 0 11
60519: PPUSH
60520: LD_VAR 0 12
60524: PPUSH
60525: CALL_OW 488
60529: NOT
60530: IFFALSE 60534
// continue ;
60532: GO 60512
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60534: LD_VAR 0 11
60538: PPUSH
60539: LD_VAR 0 12
60543: PPUSH
60544: CALL_OW 351
60548: IFFALSE 60566
60550: PUSH
60551: LD_VAR 0 11
60555: PPUSH
60556: LD_VAR 0 12
60560: PPUSH
60561: CALL_OW 554
60565: AND
60566: IFFALSE 60606
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60568: LD_ADDR_VAR 0 13
60572: PUSH
60573: LD_VAR 0 13
60577: PPUSH
60578: LD_VAR 0 13
60582: PUSH
60583: LD_INT 1
60585: PLUS
60586: PPUSH
60587: LD_VAR 0 11
60591: PUSH
60592: LD_VAR 0 12
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PPUSH
60601: CALL_OW 2
60605: ST_TO_ADDR
// end ;
60606: GO 60512
60608: POP
60609: POP
60610: GO 60492
60612: POP
60613: POP
// if not list then
60614: LD_VAR 0 13
60618: NOT
60619: IFFALSE 60623
// exit ;
60621: GO 60694
// for i in list do
60623: LD_ADDR_VAR 0 6
60627: PUSH
60628: LD_VAR 0 13
60632: PUSH
60633: FOR_IN
60634: IFFALSE 60692
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60636: LD_VAR 0 1
60640: PPUSH
60641: LD_STRING M
60643: PUSH
60644: LD_VAR 0 6
60648: PUSH
60649: LD_INT 1
60651: ARRAY
60652: PUSH
60653: LD_VAR 0 6
60657: PUSH
60658: LD_INT 2
60660: ARRAY
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: PUSH
60683: EMPTY
60684: LIST
60685: PPUSH
60686: CALL_OW 447
60690: GO 60633
60692: POP
60693: POP
// end ;
60694: LD_VAR 0 5
60698: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60699: LD_INT 0
60701: PPUSH
60702: PPUSH
60703: PPUSH
60704: PPUSH
60705: PPUSH
60706: PPUSH
60707: PPUSH
60708: PPUSH
60709: PPUSH
60710: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60711: LD_VAR 0 1
60715: PPUSH
60716: CALL_OW 302
60720: NOT
60721: IFTRUE 60740
60723: PUSH
60724: LD_VAR 0 2
60728: PPUSH
60729: LD_VAR 0 3
60733: PPUSH
60734: CALL_OW 488
60738: NOT
60739: OR
60740: IFTRUE 60749
60742: PUSH
60743: LD_VAR 0 4
60747: NOT
60748: OR
60749: IFFALSE 60753
// exit ;
60751: GO 61270
// list := [ ] ;
60753: LD_ADDR_VAR 0 13
60757: PUSH
60758: EMPTY
60759: ST_TO_ADDR
// if x - r < 0 then
60760: LD_VAR 0 2
60764: PUSH
60765: LD_VAR 0 4
60769: MINUS
60770: PUSH
60771: LD_INT 0
60773: LESS
60774: IFFALSE 60786
// min_x := 0 else
60776: LD_ADDR_VAR 0 7
60780: PUSH
60781: LD_INT 0
60783: ST_TO_ADDR
60784: GO 60802
// min_x := x - r ;
60786: LD_ADDR_VAR 0 7
60790: PUSH
60791: LD_VAR 0 2
60795: PUSH
60796: LD_VAR 0 4
60800: MINUS
60801: ST_TO_ADDR
// if y - r < 0 then
60802: LD_VAR 0 3
60806: PUSH
60807: LD_VAR 0 4
60811: MINUS
60812: PUSH
60813: LD_INT 0
60815: LESS
60816: IFFALSE 60828
// min_y := 0 else
60818: LD_ADDR_VAR 0 8
60822: PUSH
60823: LD_INT 0
60825: ST_TO_ADDR
60826: GO 60844
// min_y := y - r ;
60828: LD_ADDR_VAR 0 8
60832: PUSH
60833: LD_VAR 0 3
60837: PUSH
60838: LD_VAR 0 4
60842: MINUS
60843: ST_TO_ADDR
// max_x := x + r ;
60844: LD_ADDR_VAR 0 9
60848: PUSH
60849: LD_VAR 0 2
60853: PUSH
60854: LD_VAR 0 4
60858: PLUS
60859: ST_TO_ADDR
// max_y := y + r ;
60860: LD_ADDR_VAR 0 10
60864: PUSH
60865: LD_VAR 0 3
60869: PUSH
60870: LD_VAR 0 4
60874: PLUS
60875: ST_TO_ADDR
// for _x = min_x to max_x do
60876: LD_ADDR_VAR 0 11
60880: PUSH
60881: DOUBLE
60882: LD_VAR 0 7
60886: DEC
60887: ST_TO_ADDR
60888: LD_VAR 0 9
60892: PUSH
60893: FOR_TO
60894: IFFALSE 61013
// for _y = min_y to max_y do
60896: LD_ADDR_VAR 0 12
60900: PUSH
60901: DOUBLE
60902: LD_VAR 0 8
60906: DEC
60907: ST_TO_ADDR
60908: LD_VAR 0 10
60912: PUSH
60913: FOR_TO
60914: IFFALSE 61009
// begin if not ValidHex ( _x , _y ) then
60916: LD_VAR 0 11
60920: PPUSH
60921: LD_VAR 0 12
60925: PPUSH
60926: CALL_OW 488
60930: NOT
60931: IFFALSE 60935
// continue ;
60933: GO 60913
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60935: LD_VAR 0 11
60939: PPUSH
60940: LD_VAR 0 12
60944: PPUSH
60945: CALL_OW 351
60949: IFFALSE 60967
60951: PUSH
60952: LD_VAR 0 11
60956: PPUSH
60957: LD_VAR 0 12
60961: PPUSH
60962: CALL_OW 554
60966: AND
60967: IFFALSE 61007
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60969: LD_ADDR_VAR 0 13
60973: PUSH
60974: LD_VAR 0 13
60978: PPUSH
60979: LD_VAR 0 13
60983: PUSH
60984: LD_INT 1
60986: PLUS
60987: PPUSH
60988: LD_VAR 0 11
60992: PUSH
60993: LD_VAR 0 12
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PPUSH
61002: CALL_OW 2
61006: ST_TO_ADDR
// end ;
61007: GO 60913
61009: POP
61010: POP
61011: GO 60893
61013: POP
61014: POP
// if not list then
61015: LD_VAR 0 13
61019: NOT
61020: IFFALSE 61024
// exit ;
61022: GO 61270
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61024: LD_ADDR_VAR 0 13
61028: PUSH
61029: LD_VAR 0 1
61033: PPUSH
61034: LD_VAR 0 13
61038: PPUSH
61039: LD_INT 1
61041: PPUSH
61042: LD_INT 1
61044: PPUSH
61045: CALL 21200 0 4
61049: ST_TO_ADDR
// ComStop ( flame ) ;
61050: LD_VAR 0 1
61054: PPUSH
61055: CALL_OW 141
// for i in list do
61059: LD_ADDR_VAR 0 6
61063: PUSH
61064: LD_VAR 0 13
61068: PUSH
61069: FOR_IN
61070: IFFALSE 61101
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61072: LD_VAR 0 1
61076: PPUSH
61077: LD_VAR 0 6
61081: PUSH
61082: LD_INT 1
61084: ARRAY
61085: PPUSH
61086: LD_VAR 0 6
61090: PUSH
61091: LD_INT 2
61093: ARRAY
61094: PPUSH
61095: CALL_OW 176
61099: GO 61069
61101: POP
61102: POP
// repeat wait ( 0 0$1 ) ;
61103: LD_INT 35
61105: PPUSH
61106: CALL_OW 67
// task := GetTaskList ( flame ) ;
61110: LD_ADDR_VAR 0 14
61114: PUSH
61115: LD_VAR 0 1
61119: PPUSH
61120: CALL_OW 437
61124: ST_TO_ADDR
// if not task then
61125: LD_VAR 0 14
61129: NOT
61130: IFFALSE 61134
// exit ;
61132: GO 61270
// if task [ 1 ] [ 1 ] <> | then
61134: LD_VAR 0 14
61138: PUSH
61139: LD_INT 1
61141: ARRAY
61142: PUSH
61143: LD_INT 1
61145: ARRAY
61146: PUSH
61147: LD_STRING |
61149: NONEQUAL
61150: IFFALSE 61154
// exit ;
61152: GO 61270
// _x := task [ 1 ] [ 2 ] ;
61154: LD_ADDR_VAR 0 11
61158: PUSH
61159: LD_VAR 0 14
61163: PUSH
61164: LD_INT 1
61166: ARRAY
61167: PUSH
61168: LD_INT 2
61170: ARRAY
61171: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61172: LD_ADDR_VAR 0 12
61176: PUSH
61177: LD_VAR 0 14
61181: PUSH
61182: LD_INT 1
61184: ARRAY
61185: PUSH
61186: LD_INT 3
61188: ARRAY
61189: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61190: LD_VAR 0 11
61194: PPUSH
61195: LD_VAR 0 12
61199: PPUSH
61200: CALL_OW 351
61204: NOT
61205: IFTRUE 61224
61207: PUSH
61208: LD_VAR 0 11
61212: PPUSH
61213: LD_VAR 0 12
61217: PPUSH
61218: CALL_OW 554
61222: NOT
61223: OR
61224: IFFALSE 61258
// begin task := Delete ( task , 1 ) ;
61226: LD_ADDR_VAR 0 14
61230: PUSH
61231: LD_VAR 0 14
61235: PPUSH
61236: LD_INT 1
61238: PPUSH
61239: CALL_OW 3
61243: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61244: LD_VAR 0 1
61248: PPUSH
61249: LD_VAR 0 14
61253: PPUSH
61254: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61258: LD_VAR 0 1
61262: PPUSH
61263: CALL_OW 314
61267: NOT
61268: IFFALSE 61103
// end ;
61270: LD_VAR 0 5
61274: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61275: LD_EXP 43
61279: NOT
61280: IFFALSE 61330
61282: GO 61284
61284: DISABLE
// begin initHack := true ;
61285: LD_ADDR_EXP 43
61289: PUSH
61290: LD_INT 1
61292: ST_TO_ADDR
// hackTanks := [ ] ;
61293: LD_ADDR_EXP 44
61297: PUSH
61298: EMPTY
61299: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61300: LD_ADDR_EXP 45
61304: PUSH
61305: EMPTY
61306: ST_TO_ADDR
// hackLimit := 3 ;
61307: LD_ADDR_EXP 46
61311: PUSH
61312: LD_INT 3
61314: ST_TO_ADDR
// hackDist := 12 ;
61315: LD_ADDR_EXP 47
61319: PUSH
61320: LD_INT 12
61322: ST_TO_ADDR
// hackCounter := [ ] ;
61323: LD_ADDR_EXP 48
61327: PUSH
61328: EMPTY
61329: ST_TO_ADDR
// end ;
61330: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61331: LD_EXP 43
61335: IFFALSE 61353
61337: PUSH
61338: LD_INT 34
61340: PUSH
61341: LD_INT 99
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PPUSH
61348: CALL_OW 69
61352: AND
61353: IFFALSE 61606
61355: GO 61357
61357: DISABLE
61358: LD_INT 0
61360: PPUSH
61361: PPUSH
// begin enable ;
61362: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61363: LD_ADDR_VAR 0 1
61367: PUSH
61368: LD_INT 34
61370: PUSH
61371: LD_INT 99
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PPUSH
61378: CALL_OW 69
61382: PUSH
61383: FOR_IN
61384: IFFALSE 61604
// begin if not i in hackTanks then
61386: LD_VAR 0 1
61390: PUSH
61391: LD_EXP 44
61395: IN
61396: NOT
61397: IFFALSE 61480
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61399: LD_ADDR_EXP 44
61403: PUSH
61404: LD_EXP 44
61408: PPUSH
61409: LD_EXP 44
61413: PUSH
61414: LD_INT 1
61416: PLUS
61417: PPUSH
61418: LD_VAR 0 1
61422: PPUSH
61423: CALL_OW 1
61427: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61428: LD_ADDR_EXP 45
61432: PUSH
61433: LD_EXP 45
61437: PPUSH
61438: LD_EXP 45
61442: PUSH
61443: LD_INT 1
61445: PLUS
61446: PPUSH
61447: EMPTY
61448: PPUSH
61449: CALL_OW 1
61453: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61454: LD_ADDR_EXP 48
61458: PUSH
61459: LD_EXP 48
61463: PPUSH
61464: LD_EXP 48
61468: PUSH
61469: LD_INT 1
61471: PLUS
61472: PPUSH
61473: EMPTY
61474: PPUSH
61475: CALL_OW 1
61479: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61480: LD_VAR 0 1
61484: PPUSH
61485: CALL_OW 302
61489: NOT
61490: IFFALSE 61503
// begin HackUnlinkAll ( i ) ;
61492: LD_VAR 0 1
61496: PPUSH
61497: CALL 61609 0 1
// continue ;
61501: GO 61383
// end ; HackCheckCapturedStatus ( i ) ;
61503: LD_VAR 0 1
61507: PPUSH
61508: CALL 62054 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61512: LD_ADDR_VAR 0 2
61516: PUSH
61517: LD_INT 81
61519: PUSH
61520: LD_VAR 0 1
61524: PPUSH
61525: CALL_OW 255
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 33
61536: PUSH
61537: LD_INT 3
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: LD_INT 91
61546: PUSH
61547: LD_VAR 0 1
61551: PUSH
61552: LD_EXP 47
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 50
61564: PUSH
61565: EMPTY
61566: LIST
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: PPUSH
61574: CALL_OW 69
61578: ST_TO_ADDR
// if not tmp then
61579: LD_VAR 0 2
61583: NOT
61584: IFFALSE 61588
// continue ;
61586: GO 61383
// HackLink ( i , tmp ) ;
61588: LD_VAR 0 1
61592: PPUSH
61593: LD_VAR 0 2
61597: PPUSH
61598: CALL 61745 0 2
// end ;
61602: GO 61383
61604: POP
61605: POP
// end ;
61606: PPOPN 2
61608: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61609: LD_INT 0
61611: PPUSH
61612: PPUSH
61613: PPUSH
// if not hack in hackTanks then
61614: LD_VAR 0 1
61618: PUSH
61619: LD_EXP 44
61623: IN
61624: NOT
61625: IFFALSE 61629
// exit ;
61627: GO 61740
// index := GetElementIndex ( hackTanks , hack ) ;
61629: LD_ADDR_VAR 0 4
61633: PUSH
61634: LD_EXP 44
61638: PPUSH
61639: LD_VAR 0 1
61643: PPUSH
61644: CALL 20495 0 2
61648: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61649: LD_EXP 45
61653: PUSH
61654: LD_VAR 0 4
61658: ARRAY
61659: IFFALSE 61740
// begin for i in hackTanksCaptured [ index ] do
61661: LD_ADDR_VAR 0 3
61665: PUSH
61666: LD_EXP 45
61670: PUSH
61671: LD_VAR 0 4
61675: ARRAY
61676: PUSH
61677: FOR_IN
61678: IFFALSE 61704
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61680: LD_VAR 0 3
61684: PUSH
61685: LD_INT 1
61687: ARRAY
61688: PPUSH
61689: LD_VAR 0 3
61693: PUSH
61694: LD_INT 2
61696: ARRAY
61697: PPUSH
61698: CALL_OW 235
61702: GO 61677
61704: POP
61705: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61706: LD_ADDR_EXP 45
61710: PUSH
61711: LD_EXP 45
61715: PPUSH
61716: LD_VAR 0 4
61720: PPUSH
61721: EMPTY
61722: PPUSH
61723: CALL_OW 1
61727: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61728: LD_VAR 0 1
61732: PPUSH
61733: LD_INT 0
61735: PPUSH
61736: CALL_OW 505
// end ; end ;
61740: LD_VAR 0 2
61744: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61745: LD_INT 0
61747: PPUSH
61748: PPUSH
61749: PPUSH
// if not hack in hackTanks or not vehicles then
61750: LD_VAR 0 1
61754: PUSH
61755: LD_EXP 44
61759: IN
61760: NOT
61761: IFTRUE 61770
61763: PUSH
61764: LD_VAR 0 2
61768: NOT
61769: OR
61770: IFFALSE 61774
// exit ;
61772: GO 62049
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
61774: LD_ADDR_VAR 0 2
61778: PUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: LD_VAR 0 2
61788: PPUSH
61789: LD_INT 1
61791: PPUSH
61792: LD_INT 1
61794: PPUSH
61795: CALL 21147 0 4
61799: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
61800: LD_ADDR_VAR 0 5
61804: PUSH
61805: LD_EXP 44
61809: PPUSH
61810: LD_VAR 0 1
61814: PPUSH
61815: CALL 20495 0 2
61819: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
61820: LD_EXP 45
61824: PUSH
61825: LD_VAR 0 5
61829: ARRAY
61830: PUSH
61831: LD_EXP 46
61835: LESS
61836: IFFALSE 62025
// begin for i := 1 to vehicles do
61838: LD_ADDR_VAR 0 4
61842: PUSH
61843: DOUBLE
61844: LD_INT 1
61846: DEC
61847: ST_TO_ADDR
61848: LD_VAR 0 2
61852: PUSH
61853: FOR_TO
61854: IFFALSE 62023
// begin if hackTanksCaptured [ index ] = hackLimit then
61856: LD_EXP 45
61860: PUSH
61861: LD_VAR 0 5
61865: ARRAY
61866: PUSH
61867: LD_EXP 46
61871: EQUAL
61872: IFFALSE 61876
// break ;
61874: GO 62023
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
61876: LD_ADDR_EXP 48
61880: PUSH
61881: LD_EXP 48
61885: PPUSH
61886: LD_VAR 0 5
61890: PPUSH
61891: LD_EXP 48
61895: PUSH
61896: LD_VAR 0 5
61900: ARRAY
61901: PUSH
61902: LD_INT 1
61904: PLUS
61905: PPUSH
61906: CALL_OW 1
61910: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
61911: LD_ADDR_EXP 45
61915: PUSH
61916: LD_EXP 45
61920: PPUSH
61921: LD_VAR 0 5
61925: PUSH
61926: LD_EXP 45
61930: PUSH
61931: LD_VAR 0 5
61935: ARRAY
61936: PUSH
61937: LD_INT 1
61939: PLUS
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PPUSH
61945: LD_VAR 0 2
61949: PUSH
61950: LD_VAR 0 4
61954: ARRAY
61955: PUSH
61956: LD_VAR 0 2
61960: PUSH
61961: LD_VAR 0 4
61965: ARRAY
61966: PPUSH
61967: CALL_OW 255
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PPUSH
61976: CALL 20712 0 3
61980: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
61981: LD_VAR 0 2
61985: PUSH
61986: LD_VAR 0 4
61990: ARRAY
61991: PPUSH
61992: LD_VAR 0 1
61996: PPUSH
61997: CALL_OW 255
62001: PPUSH
62002: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62006: LD_VAR 0 2
62010: PUSH
62011: LD_VAR 0 4
62015: ARRAY
62016: PPUSH
62017: CALL_OW 141
// end ;
62021: GO 61853
62023: POP
62024: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62025: LD_VAR 0 1
62029: PPUSH
62030: LD_EXP 45
62034: PUSH
62035: LD_VAR 0 5
62039: ARRAY
62040: PUSH
62041: LD_INT 0
62043: PLUS
62044: PPUSH
62045: CALL_OW 505
// end ;
62049: LD_VAR 0 3
62053: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62054: LD_INT 0
62056: PPUSH
62057: PPUSH
62058: PPUSH
62059: PPUSH
// if not hack in hackTanks then
62060: LD_VAR 0 1
62064: PUSH
62065: LD_EXP 44
62069: IN
62070: NOT
62071: IFFALSE 62075
// exit ;
62073: GO 62319
// index := GetElementIndex ( hackTanks , hack ) ;
62075: LD_ADDR_VAR 0 4
62079: PUSH
62080: LD_EXP 44
62084: PPUSH
62085: LD_VAR 0 1
62089: PPUSH
62090: CALL 20495 0 2
62094: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62095: LD_ADDR_VAR 0 3
62099: PUSH
62100: DOUBLE
62101: LD_EXP 45
62105: PUSH
62106: LD_VAR 0 4
62110: ARRAY
62111: INC
62112: ST_TO_ADDR
62113: LD_INT 1
62115: PUSH
62116: FOR_DOWNTO
62117: IFFALSE 62293
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62119: LD_ADDR_VAR 0 5
62123: PUSH
62124: LD_EXP 45
62128: PUSH
62129: LD_VAR 0 4
62133: ARRAY
62134: PUSH
62135: LD_VAR 0 3
62139: ARRAY
62140: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62141: LD_VAR 0 5
62145: PUSH
62146: LD_INT 1
62148: ARRAY
62149: PPUSH
62150: CALL_OW 302
62154: NOT
62155: IFTRUE 62183
62157: PUSH
62158: LD_VAR 0 5
62162: PUSH
62163: LD_INT 1
62165: ARRAY
62166: PPUSH
62167: CALL_OW 255
62171: PUSH
62172: LD_VAR 0 1
62176: PPUSH
62177: CALL_OW 255
62181: NONEQUAL
62182: OR
62183: IFFALSE 62291
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62185: LD_VAR 0 5
62189: PUSH
62190: LD_INT 1
62192: ARRAY
62193: PPUSH
62194: CALL_OW 305
62198: IFFALSE 62226
62200: PUSH
62201: LD_VAR 0 5
62205: PUSH
62206: LD_INT 1
62208: ARRAY
62209: PPUSH
62210: CALL_OW 255
62214: PUSH
62215: LD_VAR 0 1
62219: PPUSH
62220: CALL_OW 255
62224: EQUAL
62225: AND
62226: IFFALSE 62250
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62228: LD_VAR 0 5
62232: PUSH
62233: LD_INT 1
62235: ARRAY
62236: PPUSH
62237: LD_VAR 0 5
62241: PUSH
62242: LD_INT 2
62244: ARRAY
62245: PPUSH
62246: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62250: LD_ADDR_EXP 45
62254: PUSH
62255: LD_EXP 45
62259: PPUSH
62260: LD_VAR 0 4
62264: PPUSH
62265: LD_EXP 45
62269: PUSH
62270: LD_VAR 0 4
62274: ARRAY
62275: PPUSH
62276: LD_VAR 0 3
62280: PPUSH
62281: CALL_OW 3
62285: PPUSH
62286: CALL_OW 1
62290: ST_TO_ADDR
// end ; end ;
62291: GO 62116
62293: POP
62294: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62295: LD_VAR 0 1
62299: PPUSH
62300: LD_EXP 45
62304: PUSH
62305: LD_VAR 0 4
62309: ARRAY
62310: PUSH
62311: LD_INT 0
62313: PLUS
62314: PPUSH
62315: CALL_OW 505
// end ;
62319: LD_VAR 0 2
62323: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62324: LD_INT 0
62326: PPUSH
62327: PPUSH
62328: PPUSH
62329: PPUSH
// if not hack in hackTanks then
62330: LD_VAR 0 1
62334: PUSH
62335: LD_EXP 44
62339: IN
62340: NOT
62341: IFFALSE 62345
// exit ;
62343: GO 62430
// index := GetElementIndex ( hackTanks , hack ) ;
62345: LD_ADDR_VAR 0 5
62349: PUSH
62350: LD_EXP 44
62354: PPUSH
62355: LD_VAR 0 1
62359: PPUSH
62360: CALL 20495 0 2
62364: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62365: LD_ADDR_VAR 0 4
62369: PUSH
62370: DOUBLE
62371: LD_INT 1
62373: DEC
62374: ST_TO_ADDR
62375: LD_EXP 45
62379: PUSH
62380: LD_VAR 0 5
62384: ARRAY
62385: PUSH
62386: FOR_TO
62387: IFFALSE 62428
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62389: LD_EXP 45
62393: PUSH
62394: LD_VAR 0 5
62398: ARRAY
62399: PUSH
62400: LD_VAR 0 4
62404: ARRAY
62405: PUSH
62406: LD_INT 1
62408: ARRAY
62409: PUSH
62410: LD_VAR 0 2
62414: EQUAL
62415: IFFALSE 62426
// KillUnit ( vehicle ) ;
62417: LD_VAR 0 2
62421: PPUSH
62422: CALL_OW 66
62426: GO 62386
62428: POP
62429: POP
// end ;
62430: LD_VAR 0 3
62434: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
62435: LD_EXP 49
62439: NOT
62440: IFFALSE 62475
62442: GO 62444
62444: DISABLE
// begin initMiner := true ;
62445: LD_ADDR_EXP 49
62449: PUSH
62450: LD_INT 1
62452: ST_TO_ADDR
// minersList := [ ] ;
62453: LD_ADDR_EXP 50
62457: PUSH
62458: EMPTY
62459: ST_TO_ADDR
// minerMinesList := [ ] ;
62460: LD_ADDR_EXP 51
62464: PUSH
62465: EMPTY
62466: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
62467: LD_ADDR_EXP 52
62471: PUSH
62472: LD_INT 5
62474: ST_TO_ADDR
// end ;
62475: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
62476: LD_EXP 49
62480: IFFALSE 62498
62482: PUSH
62483: LD_INT 34
62485: PUSH
62486: LD_INT 81
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PPUSH
62493: CALL_OW 69
62497: AND
62498: IFFALSE 62961
62500: GO 62502
62502: DISABLE
62503: LD_INT 0
62505: PPUSH
62506: PPUSH
62507: PPUSH
62508: PPUSH
// begin enable ;
62509: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62510: LD_ADDR_VAR 0 1
62514: PUSH
62515: LD_INT 34
62517: PUSH
62518: LD_INT 81
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PPUSH
62525: CALL_OW 69
62529: PUSH
62530: FOR_IN
62531: IFFALSE 62603
// begin if not i in minersList then
62533: LD_VAR 0 1
62537: PUSH
62538: LD_EXP 50
62542: IN
62543: NOT
62544: IFFALSE 62601
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62546: LD_ADDR_EXP 50
62550: PUSH
62551: LD_EXP 50
62555: PPUSH
62556: LD_EXP 50
62560: PUSH
62561: LD_INT 1
62563: PLUS
62564: PPUSH
62565: LD_VAR 0 1
62569: PPUSH
62570: CALL_OW 1
62574: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62575: LD_ADDR_EXP 51
62579: PUSH
62580: LD_EXP 51
62584: PPUSH
62585: LD_EXP 51
62589: PUSH
62590: LD_INT 1
62592: PLUS
62593: PPUSH
62594: EMPTY
62595: PPUSH
62596: CALL_OW 1
62600: ST_TO_ADDR
// end end ;
62601: GO 62530
62603: POP
62604: POP
// for i := minerMinesList downto 1 do
62605: LD_ADDR_VAR 0 1
62609: PUSH
62610: DOUBLE
62611: LD_EXP 51
62615: INC
62616: ST_TO_ADDR
62617: LD_INT 1
62619: PUSH
62620: FOR_DOWNTO
62621: IFFALSE 62959
// begin if IsLive ( minersList [ i ] ) then
62623: LD_EXP 50
62627: PUSH
62628: LD_VAR 0 1
62632: ARRAY
62633: PPUSH
62634: CALL_OW 300
62638: IFFALSE 62666
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
62640: LD_EXP 50
62644: PUSH
62645: LD_VAR 0 1
62649: ARRAY
62650: PPUSH
62651: LD_EXP 51
62655: PUSH
62656: LD_VAR 0 1
62660: ARRAY
62661: PPUSH
62662: CALL_OW 505
// if not minerMinesList [ i ] then
62666: LD_EXP 51
62670: PUSH
62671: LD_VAR 0 1
62675: ARRAY
62676: NOT
62677: IFFALSE 62681
// continue ;
62679: GO 62620
// for j := minerMinesList [ i ] downto 1 do
62681: LD_ADDR_VAR 0 2
62685: PUSH
62686: DOUBLE
62687: LD_EXP 51
62691: PUSH
62692: LD_VAR 0 1
62696: ARRAY
62697: INC
62698: ST_TO_ADDR
62699: LD_INT 1
62701: PUSH
62702: FOR_DOWNTO
62703: IFFALSE 62955
// begin side := GetSide ( minersList [ i ] ) ;
62705: LD_ADDR_VAR 0 3
62709: PUSH
62710: LD_EXP 50
62714: PUSH
62715: LD_VAR 0 1
62719: ARRAY
62720: PPUSH
62721: CALL_OW 255
62725: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
62726: LD_ADDR_VAR 0 4
62730: PUSH
62731: LD_EXP 51
62735: PUSH
62736: LD_VAR 0 1
62740: ARRAY
62741: PUSH
62742: LD_VAR 0 2
62746: ARRAY
62747: PUSH
62748: LD_INT 1
62750: ARRAY
62751: PPUSH
62752: LD_EXP 51
62756: PUSH
62757: LD_VAR 0 1
62761: ARRAY
62762: PUSH
62763: LD_VAR 0 2
62767: ARRAY
62768: PUSH
62769: LD_INT 2
62771: ARRAY
62772: PPUSH
62773: CALL_OW 428
62777: ST_TO_ADDR
// if not tmp then
62778: LD_VAR 0 4
62782: NOT
62783: IFFALSE 62787
// continue ;
62785: GO 62702
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
62787: LD_VAR 0 4
62791: PUSH
62792: LD_INT 81
62794: PUSH
62795: LD_VAR 0 3
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PPUSH
62804: CALL_OW 69
62808: IN
62809: IFFALSE 62859
62811: PUSH
62812: LD_EXP 51
62816: PUSH
62817: LD_VAR 0 1
62821: ARRAY
62822: PUSH
62823: LD_VAR 0 2
62827: ARRAY
62828: PUSH
62829: LD_INT 1
62831: ARRAY
62832: PPUSH
62833: LD_EXP 51
62837: PUSH
62838: LD_VAR 0 1
62842: ARRAY
62843: PUSH
62844: LD_VAR 0 2
62848: ARRAY
62849: PUSH
62850: LD_INT 2
62852: ARRAY
62853: PPUSH
62854: CALL_OW 458
62858: AND
62859: IFFALSE 62953
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
62861: LD_EXP 51
62865: PUSH
62866: LD_VAR 0 1
62870: ARRAY
62871: PUSH
62872: LD_VAR 0 2
62876: ARRAY
62877: PUSH
62878: LD_INT 1
62880: ARRAY
62881: PPUSH
62882: LD_EXP 51
62886: PUSH
62887: LD_VAR 0 1
62891: ARRAY
62892: PUSH
62893: LD_VAR 0 2
62897: ARRAY
62898: PUSH
62899: LD_INT 2
62901: ARRAY
62902: PPUSH
62903: LD_VAR 0 3
62907: PPUSH
62908: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
62912: LD_ADDR_EXP 51
62916: PUSH
62917: LD_EXP 51
62921: PPUSH
62922: LD_VAR 0 1
62926: PPUSH
62927: LD_EXP 51
62931: PUSH
62932: LD_VAR 0 1
62936: ARRAY
62937: PPUSH
62938: LD_VAR 0 2
62942: PPUSH
62943: CALL_OW 3
62947: PPUSH
62948: CALL_OW 1
62952: ST_TO_ADDR
// end ; end ;
62953: GO 62702
62955: POP
62956: POP
// end ;
62957: GO 62620
62959: POP
62960: POP
// end ;
62961: PPOPN 4
62963: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
62964: LD_INT 0
62966: PPUSH
62967: PPUSH
// result := false ;
62968: LD_ADDR_VAR 0 4
62972: PUSH
62973: LD_INT 0
62975: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
62976: LD_VAR 0 1
62980: PPUSH
62981: CALL_OW 264
62985: PUSH
62986: LD_INT 81
62988: EQUAL
62989: NOT
62990: IFFALSE 62994
// exit ;
62992: GO 63238
// index := GetElementIndex ( minersList , unit ) ;
62994: LD_ADDR_VAR 0 5
62998: PUSH
62999: LD_EXP 50
63003: PPUSH
63004: LD_VAR 0 1
63008: PPUSH
63009: CALL 20495 0 2
63013: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63014: LD_EXP 51
63018: PUSH
63019: LD_VAR 0 5
63023: ARRAY
63024: PUSH
63025: LD_EXP 52
63029: GREATEREQUAL
63030: IFFALSE 63034
// exit ;
63032: GO 63238
// ComMoveXY ( unit , x , y ) ;
63034: LD_VAR 0 1
63038: PPUSH
63039: LD_VAR 0 2
63043: PPUSH
63044: LD_VAR 0 3
63048: PPUSH
63049: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63053: LD_INT 35
63055: PPUSH
63056: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63060: LD_VAR 0 1
63064: PPUSH
63065: LD_VAR 0 2
63069: PPUSH
63070: LD_VAR 0 3
63074: PPUSH
63075: CALL 52541 0 3
63079: NOT
63080: IFFALSE 63093
63082: PUSH
63083: LD_VAR 0 1
63087: PPUSH
63088: CALL_OW 314
63092: AND
63093: IFFALSE 63097
// exit ;
63095: GO 63238
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63097: LD_VAR 0 2
63101: PPUSH
63102: LD_VAR 0 3
63106: PPUSH
63107: CALL_OW 428
63111: PUSH
63112: LD_VAR 0 1
63116: EQUAL
63117: IFFALSE 63131
63119: PUSH
63120: LD_VAR 0 1
63124: PPUSH
63125: CALL_OW 314
63129: NOT
63130: AND
63131: IFFALSE 63053
// PlaySoundXY ( x , y , PlantMine ) ;
63133: LD_VAR 0 2
63137: PPUSH
63138: LD_VAR 0 3
63142: PPUSH
63143: LD_STRING PlantMine
63145: PPUSH
63146: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
63150: LD_VAR 0 2
63154: PPUSH
63155: LD_VAR 0 3
63159: PPUSH
63160: LD_VAR 0 1
63164: PPUSH
63165: CALL_OW 255
63169: PPUSH
63170: LD_INT 0
63172: PPUSH
63173: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63177: LD_ADDR_EXP 51
63181: PUSH
63182: LD_EXP 51
63186: PPUSH
63187: LD_VAR 0 5
63191: PUSH
63192: LD_EXP 51
63196: PUSH
63197: LD_VAR 0 5
63201: ARRAY
63202: PUSH
63203: LD_INT 1
63205: PLUS
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PPUSH
63211: LD_VAR 0 2
63215: PUSH
63216: LD_VAR 0 3
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PPUSH
63225: CALL 20712 0 3
63229: ST_TO_ADDR
// result := true ;
63230: LD_ADDR_VAR 0 4
63234: PUSH
63235: LD_INT 1
63237: ST_TO_ADDR
// end ;
63238: LD_VAR 0 4
63242: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63243: LD_INT 0
63245: PPUSH
63246: PPUSH
63247: PPUSH
// if not unit in minersList then
63248: LD_VAR 0 1
63252: PUSH
63253: LD_EXP 50
63257: IN
63258: NOT
63259: IFFALSE 63263
// exit ;
63261: GO 63657
// index := GetElementIndex ( minersList , unit ) ;
63263: LD_ADDR_VAR 0 6
63267: PUSH
63268: LD_EXP 50
63272: PPUSH
63273: LD_VAR 0 1
63277: PPUSH
63278: CALL 20495 0 2
63282: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63283: LD_ADDR_VAR 0 5
63287: PUSH
63288: DOUBLE
63289: LD_EXP 51
63293: PUSH
63294: LD_VAR 0 6
63298: ARRAY
63299: INC
63300: ST_TO_ADDR
63301: LD_INT 1
63303: PUSH
63304: FOR_DOWNTO
63305: IFFALSE 63468
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
63307: LD_EXP 51
63311: PUSH
63312: LD_VAR 0 6
63316: ARRAY
63317: PUSH
63318: LD_VAR 0 5
63322: ARRAY
63323: PUSH
63324: LD_INT 1
63326: ARRAY
63327: PUSH
63328: LD_VAR 0 2
63332: EQUAL
63333: IFFALSE 63363
63335: PUSH
63336: LD_EXP 51
63340: PUSH
63341: LD_VAR 0 6
63345: ARRAY
63346: PUSH
63347: LD_VAR 0 5
63351: ARRAY
63352: PUSH
63353: LD_INT 2
63355: ARRAY
63356: PUSH
63357: LD_VAR 0 3
63361: EQUAL
63362: AND
63363: IFFALSE 63466
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63365: LD_EXP 51
63369: PUSH
63370: LD_VAR 0 6
63374: ARRAY
63375: PUSH
63376: LD_VAR 0 5
63380: ARRAY
63381: PUSH
63382: LD_INT 1
63384: ARRAY
63385: PPUSH
63386: LD_EXP 51
63390: PUSH
63391: LD_VAR 0 6
63395: ARRAY
63396: PUSH
63397: LD_VAR 0 5
63401: ARRAY
63402: PUSH
63403: LD_INT 2
63405: ARRAY
63406: PPUSH
63407: LD_VAR 0 1
63411: PPUSH
63412: CALL_OW 255
63416: PPUSH
63417: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63421: LD_ADDR_EXP 51
63425: PUSH
63426: LD_EXP 51
63430: PPUSH
63431: LD_VAR 0 6
63435: PPUSH
63436: LD_EXP 51
63440: PUSH
63441: LD_VAR 0 6
63445: ARRAY
63446: PPUSH
63447: LD_VAR 0 5
63451: PPUSH
63452: CALL_OW 3
63456: PPUSH
63457: CALL_OW 1
63461: ST_TO_ADDR
// exit ;
63462: POP
63463: POP
63464: GO 63657
// end ; end ;
63466: GO 63304
63468: POP
63469: POP
// for i := minerMinesList [ index ] downto 1 do
63470: LD_ADDR_VAR 0 5
63474: PUSH
63475: DOUBLE
63476: LD_EXP 51
63480: PUSH
63481: LD_VAR 0 6
63485: ARRAY
63486: INC
63487: ST_TO_ADDR
63488: LD_INT 1
63490: PUSH
63491: FOR_DOWNTO
63492: IFFALSE 63655
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63494: LD_EXP 51
63498: PUSH
63499: LD_VAR 0 6
63503: ARRAY
63504: PUSH
63505: LD_VAR 0 5
63509: ARRAY
63510: PUSH
63511: LD_INT 1
63513: ARRAY
63514: PPUSH
63515: LD_EXP 51
63519: PUSH
63520: LD_VAR 0 6
63524: ARRAY
63525: PUSH
63526: LD_VAR 0 5
63530: ARRAY
63531: PUSH
63532: LD_INT 2
63534: ARRAY
63535: PPUSH
63536: LD_VAR 0 2
63540: PPUSH
63541: LD_VAR 0 3
63545: PPUSH
63546: CALL_OW 298
63550: PUSH
63551: LD_INT 6
63553: LESS
63554: IFFALSE 63653
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63556: LD_EXP 51
63560: PUSH
63561: LD_VAR 0 6
63565: ARRAY
63566: PUSH
63567: LD_VAR 0 5
63571: ARRAY
63572: PUSH
63573: LD_INT 1
63575: ARRAY
63576: PPUSH
63577: LD_EXP 51
63581: PUSH
63582: LD_VAR 0 6
63586: ARRAY
63587: PUSH
63588: LD_VAR 0 5
63592: ARRAY
63593: PUSH
63594: LD_INT 2
63596: ARRAY
63597: PPUSH
63598: LD_VAR 0 1
63602: PPUSH
63603: CALL_OW 255
63607: PPUSH
63608: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63612: LD_ADDR_EXP 51
63616: PUSH
63617: LD_EXP 51
63621: PPUSH
63622: LD_VAR 0 6
63626: PPUSH
63627: LD_EXP 51
63631: PUSH
63632: LD_VAR 0 6
63636: ARRAY
63637: PPUSH
63638: LD_VAR 0 5
63642: PPUSH
63643: CALL_OW 3
63647: PPUSH
63648: CALL_OW 1
63652: ST_TO_ADDR
// end ; end ;
63653: GO 63491
63655: POP
63656: POP
// end ;
63657: LD_VAR 0 4
63661: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63662: LD_INT 0
63664: PPUSH
63665: PPUSH
63666: PPUSH
63667: PPUSH
63668: PPUSH
63669: PPUSH
63670: PPUSH
63671: PPUSH
63672: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63673: LD_VAR 0 1
63677: PPUSH
63678: CALL_OW 264
63682: PUSH
63683: LD_INT 81
63685: EQUAL
63686: NOT
63687: IFTRUE 63702
63689: PUSH
63690: LD_VAR 0 1
63694: PUSH
63695: LD_EXP 50
63699: IN
63700: NOT
63701: OR
63702: IFFALSE 63706
// exit ;
63704: GO 64032
// index := GetElementIndex ( minersList , unit ) ;
63706: LD_ADDR_VAR 0 6
63710: PUSH
63711: LD_EXP 50
63715: PPUSH
63716: LD_VAR 0 1
63720: PPUSH
63721: CALL 20495 0 2
63725: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
63726: LD_ADDR_VAR 0 8
63730: PUSH
63731: LD_EXP 52
63735: PUSH
63736: LD_EXP 51
63740: PUSH
63741: LD_VAR 0 6
63745: ARRAY
63746: MINUS
63747: ST_TO_ADDR
// if not minesFreeAmount then
63748: LD_VAR 0 8
63752: NOT
63753: IFFALSE 63757
// exit ;
63755: GO 64032
// tmp := [ ] ;
63757: LD_ADDR_VAR 0 7
63761: PUSH
63762: EMPTY
63763: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
63764: LD_ADDR_VAR 0 5
63768: PUSH
63769: DOUBLE
63770: LD_INT 1
63772: DEC
63773: ST_TO_ADDR
63774: LD_VAR 0 8
63778: PUSH
63779: FOR_TO
63780: IFFALSE 63979
// begin _d := rand ( 0 , 5 ) ;
63782: LD_ADDR_VAR 0 11
63786: PUSH
63787: LD_INT 0
63789: PPUSH
63790: LD_INT 5
63792: PPUSH
63793: CALL_OW 12
63797: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
63798: LD_ADDR_VAR 0 12
63802: PUSH
63803: LD_INT 2
63805: PPUSH
63806: LD_INT 6
63808: PPUSH
63809: CALL_OW 12
63813: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
63814: LD_ADDR_VAR 0 9
63818: PUSH
63819: LD_VAR 0 2
63823: PPUSH
63824: LD_VAR 0 11
63828: PPUSH
63829: LD_VAR 0 12
63833: PPUSH
63834: CALL_OW 272
63838: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
63839: LD_ADDR_VAR 0 10
63843: PUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: LD_VAR 0 11
63853: PPUSH
63854: LD_VAR 0 12
63858: PPUSH
63859: CALL_OW 273
63863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
63864: LD_VAR 0 9
63868: PPUSH
63869: LD_VAR 0 10
63873: PPUSH
63874: CALL_OW 488
63878: IFFALSE 63902
63880: PUSH
63881: LD_VAR 0 9
63885: PUSH
63886: LD_VAR 0 10
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 7
63899: IN
63900: NOT
63901: AND
63902: IFFALSE 63921
63904: PUSH
63905: LD_VAR 0 9
63909: PPUSH
63910: LD_VAR 0 10
63914: PPUSH
63915: CALL_OW 458
63919: NOT
63920: AND
63921: IFFALSE 63963
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
63923: LD_ADDR_VAR 0 7
63927: PUSH
63928: LD_VAR 0 7
63932: PPUSH
63933: LD_VAR 0 7
63937: PUSH
63938: LD_INT 1
63940: PLUS
63941: PPUSH
63942: LD_VAR 0 9
63946: PUSH
63947: LD_VAR 0 10
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PPUSH
63956: CALL_OW 1
63960: ST_TO_ADDR
63961: GO 63977
// i := i - 1 ;
63963: LD_ADDR_VAR 0 5
63967: PUSH
63968: LD_VAR 0 5
63972: PUSH
63973: LD_INT 1
63975: MINUS
63976: ST_TO_ADDR
// end ;
63977: GO 63779
63979: POP
63980: POP
// for i in tmp do
63981: LD_ADDR_VAR 0 5
63985: PUSH
63986: LD_VAR 0 7
63990: PUSH
63991: FOR_IN
63992: IFFALSE 64030
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
63994: LD_VAR 0 1
63998: PPUSH
63999: LD_VAR 0 5
64003: PUSH
64004: LD_INT 1
64006: ARRAY
64007: PPUSH
64008: LD_VAR 0 5
64012: PUSH
64013: LD_INT 2
64015: ARRAY
64016: PPUSH
64017: CALL 62964 0 3
64021: NOT
64022: IFFALSE 64028
// exit ;
64024: POP
64025: POP
64026: GO 64032
64028: GO 63991
64030: POP
64031: POP
// end ;
64032: LD_VAR 0 4
64036: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64037: LD_INT 0
64039: PPUSH
64040: PPUSH
64041: PPUSH
64042: PPUSH
64043: PPUSH
64044: PPUSH
64045: PPUSH
64046: PPUSH
64047: PPUSH
// if GetClass ( unit ) <> class_sniper then
64048: LD_VAR 0 1
64052: PPUSH
64053: CALL_OW 257
64057: PUSH
64058: LD_INT 5
64060: NONEQUAL
64061: IFFALSE 64065
// exit ;
64063: GO 64535
// dist := 8 ;
64065: LD_ADDR_VAR 0 5
64069: PUSH
64070: LD_INT 8
64072: ST_TO_ADDR
// viewRange := 12 ;
64073: LD_ADDR_VAR 0 8
64077: PUSH
64078: LD_INT 12
64080: ST_TO_ADDR
// side := GetSide ( unit ) ;
64081: LD_ADDR_VAR 0 6
64085: PUSH
64086: LD_VAR 0 1
64090: PPUSH
64091: CALL_OW 255
64095: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64096: LD_INT 61
64098: PPUSH
64099: LD_VAR 0 6
64103: PPUSH
64104: CALL_OW 321
64108: PUSH
64109: LD_INT 2
64111: EQUAL
64112: IFFALSE 64122
// viewRange := 16 ;
64114: LD_ADDR_VAR 0 8
64118: PUSH
64119: LD_INT 16
64121: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64122: LD_VAR 0 1
64126: PPUSH
64127: LD_VAR 0 2
64131: PPUSH
64132: LD_VAR 0 3
64136: PPUSH
64137: CALL_OW 297
64141: PUSH
64142: LD_VAR 0 5
64146: GREATER
64147: IFFALSE 64226
// begin ComMoveXY ( unit , x , y ) ;
64149: LD_VAR 0 1
64153: PPUSH
64154: LD_VAR 0 2
64158: PPUSH
64159: LD_VAR 0 3
64163: PPUSH
64164: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64168: LD_INT 35
64170: PPUSH
64171: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64175: LD_VAR 0 1
64179: PPUSH
64180: LD_VAR 0 2
64184: PPUSH
64185: LD_VAR 0 3
64189: PPUSH
64190: CALL 52541 0 3
64194: NOT
64195: IFFALSE 64199
// exit ;
64197: GO 64535
// until GetDistUnitXY ( unit , x , y ) < dist ;
64199: LD_VAR 0 1
64203: PPUSH
64204: LD_VAR 0 2
64208: PPUSH
64209: LD_VAR 0 3
64213: PPUSH
64214: CALL_OW 297
64218: PUSH
64219: LD_VAR 0 5
64223: LESS
64224: IFFALSE 64168
// end ; ComTurnXY ( unit , x , y ) ;
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_VAR 0 2
64235: PPUSH
64236: LD_VAR 0 3
64240: PPUSH
64241: CALL_OW 118
// repeat if Multiplayer then
64245: LD_OWVAR 4
64249: IFFALSE 64260
// wait ( 35 ) else
64251: LD_INT 35
64253: PPUSH
64254: CALL_OW 67
64258: GO 64267
// wait ( 5 ) ;
64260: LD_INT 5
64262: PPUSH
64263: CALL_OW 67
// _d := GetDir ( unit ) ;
64267: LD_ADDR_VAR 0 11
64271: PUSH
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 254
64281: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64282: LD_ADDR_VAR 0 7
64286: PUSH
64287: LD_VAR 0 1
64291: PPUSH
64292: CALL_OW 250
64296: PPUSH
64297: LD_VAR 0 1
64301: PPUSH
64302: CALL_OW 251
64306: PPUSH
64307: LD_VAR 0 2
64311: PPUSH
64312: LD_VAR 0 3
64316: PPUSH
64317: CALL 55177 0 4
64321: ST_TO_ADDR
// until dir = _d ;
64322: LD_VAR 0 7
64326: PUSH
64327: LD_VAR 0 11
64331: EQUAL
64332: IFFALSE 64245
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64334: LD_ADDR_VAR 0 9
64338: PUSH
64339: LD_VAR 0 1
64343: PPUSH
64344: CALL_OW 250
64348: PPUSH
64349: LD_VAR 0 7
64353: PPUSH
64354: LD_VAR 0 5
64358: PPUSH
64359: CALL_OW 272
64363: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64364: LD_ADDR_VAR 0 10
64368: PUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 251
64378: PPUSH
64379: LD_VAR 0 7
64383: PPUSH
64384: LD_VAR 0 5
64388: PPUSH
64389: CALL_OW 273
64393: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64394: LD_VAR 0 9
64398: PPUSH
64399: LD_VAR 0 10
64403: PPUSH
64404: CALL_OW 488
64408: NOT
64409: IFFALSE 64413
// exit ;
64411: GO 64535
// ComAnimCustom ( unit , 1 ) ;
64413: LD_VAR 0 1
64417: PPUSH
64418: LD_INT 1
64420: PPUSH
64421: CALL_OW 592
// p := 0 ;
64425: LD_ADDR_VAR 0 12
64429: PUSH
64430: LD_INT 0
64432: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64433: LD_VAR 0 9
64437: PPUSH
64438: LD_VAR 0 10
64442: PPUSH
64443: LD_VAR 0 6
64447: PPUSH
64448: LD_VAR 0 8
64452: PPUSH
64453: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64457: LD_INT 35
64459: PPUSH
64460: CALL_OW 67
// p := Inc ( p ) ;
64464: LD_ADDR_VAR 0 12
64468: PUSH
64469: LD_VAR 0 12
64473: PPUSH
64474: CALL 55133 0 1
64478: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64479: LD_VAR 0 12
64483: PUSH
64484: LD_INT 3
64486: EQUAL
64487: IFTRUE 64501
64489: PUSH
64490: LD_VAR 0 1
64494: PPUSH
64495: CALL_OW 302
64499: NOT
64500: OR
64501: IFTRUE 64514
64503: PUSH
64504: LD_VAR 0 1
64508: PPUSH
64509: CALL_OW 301
64513: OR
64514: IFFALSE 64457
// RemoveSeeing ( _x , _y , side ) ;
64516: LD_VAR 0 9
64520: PPUSH
64521: LD_VAR 0 10
64525: PPUSH
64526: LD_VAR 0 6
64530: PPUSH
64531: CALL_OW 331
// end ; end_of_file end_of_file
64535: LD_VAR 0 4
64539: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
64540: PPOPN 6
64542: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
64543: LD_EXP 36
64547: PUSH
64548: LD_INT 4
64550: EQUAL
64551: IFFALSE 64587
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
64553: LD_STRING setGameDifficulty(
64555: PUSH
64556: LD_OWVAR 67
64560: STR
64561: PUSH
64562: LD_STRING )
64564: STR
64565: PPUSH
64566: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
64570: LD_STRING displayDifficulty(
64572: PUSH
64573: LD_OWVAR 67
64577: STR
64578: PUSH
64579: LD_STRING )
64581: STR
64582: PPUSH
64583: CALL_OW 559
// end ; SOS_MapStart ( ) ;
64587: CALL 64616 0 0
// end ; end_of_file
64591: PPOPN 1
64593: END
// every 0 0$1 do
64594: GO 64596
64596: DISABLE
// begin enable ;
64597: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
64598: LD_STRING updateTimer(
64600: PUSH
64601: LD_OWVAR 1
64605: STR
64606: PUSH
64607: LD_STRING );
64609: STR
64610: PPUSH
64611: CALL_OW 559
// end ;
64615: END
// export function SOS_MapStart ( ) ; begin
64616: LD_INT 0
64618: PPUSH
// UpdateFactoryWaypoints ( ) ;
64619: CALL 65550 0 0
// UpdateWarehouseGatheringPoints ( ) ;
64623: CALL 65802 0 0
// ParseMultiDataToLua ( ) ;
64627: CALL 65949 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
64631: LD_STRING setSpecLogoNumber(
64633: PUSH
64634: LD_INT 2
64636: STR
64637: PUSH
64638: LD_STRING ,
64640: STR
64641: PUSH
64642: LD_INT 1
64644: STR
64645: PUSH
64646: LD_STRING )
64648: STR
64649: PPUSH
64650: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
64654: LD_STRING setSpecLogoNumber(
64656: PUSH
64657: LD_INT 3
64659: STR
64660: PUSH
64661: LD_STRING ,
64663: STR
64664: PUSH
64665: LD_INT 2
64667: STR
64668: PUSH
64669: LD_STRING )
64671: STR
64672: PPUSH
64673: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
64677: LD_STRING setSpecLogoNumber(
64679: PUSH
64680: LD_INT 4
64682: STR
64683: PUSH
64684: LD_STRING ,
64686: STR
64687: PUSH
64688: LD_INT 3
64690: STR
64691: PUSH
64692: LD_STRING )
64694: STR
64695: PPUSH
64696: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
64700: LD_STRING setSpecLogoNumber(
64702: PUSH
64703: LD_INT 5
64705: STR
64706: PUSH
64707: LD_STRING ,
64709: STR
64710: PUSH
64711: LD_INT 4
64713: STR
64714: PUSH
64715: LD_STRING )
64717: STR
64718: PPUSH
64719: CALL_OW 559
// end ;
64723: LD_VAR 0 1
64727: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
64728: LD_INT 0
64730: PPUSH
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
64735: PPUSH
64736: PPUSH
64737: PPUSH
64738: PPUSH
// for i := 1 to 8 do
64739: LD_ADDR_VAR 0 2
64743: PUSH
64744: DOUBLE
64745: LD_INT 1
64747: DEC
64748: ST_TO_ADDR
64749: LD_INT 8
64751: PUSH
64752: FOR_TO
64753: IFFALSE 65138
// begin if mpSidePositions [ i ] then
64755: LD_EXP 37
64759: PUSH
64760: LD_VAR 0 2
64764: ARRAY
64765: IFFALSE 65136
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
64767: LD_ADDR_VAR 0 7
64771: PUSH
64772: LD_INT 22
64774: PUSH
64775: LD_VAR 0 2
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 21
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PPUSH
64798: CALL_OW 69
64802: PPUSH
64803: CALL 17828 0 1
64807: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64808: LD_ADDR_VAR 0 9
64812: PUSH
64813: LD_INT 22
64815: PUSH
64816: LD_VAR 0 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 2
64827: PUSH
64828: LD_INT 30
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 30
64840: PUSH
64841: LD_INT 1
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PPUSH
64857: CALL_OW 69
64861: ST_TO_ADDR
// crates := 0 ;
64862: LD_ADDR_VAR 0 4
64866: PUSH
64867: LD_INT 0
64869: ST_TO_ADDR
// oil := 0 ;
64870: LD_ADDR_VAR 0 5
64874: PUSH
64875: LD_INT 0
64877: ST_TO_ADDR
// sib := 0 ;
64878: LD_ADDR_VAR 0 6
64882: PUSH
64883: LD_INT 0
64885: ST_TO_ADDR
// if bases then
64886: LD_VAR 0 9
64890: IFFALSE 64996
// begin for j in bases do
64892: LD_ADDR_VAR 0 3
64896: PUSH
64897: LD_VAR 0 9
64901: PUSH
64902: FOR_IN
64903: IFFALSE 64994
// begin base := GetBase ( j ) ;
64905: LD_ADDR_VAR 0 8
64909: PUSH
64910: LD_VAR 0 3
64914: PPUSH
64915: CALL_OW 274
64919: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
64920: LD_ADDR_VAR 0 4
64924: PUSH
64925: LD_VAR 0 4
64929: PUSH
64930: LD_VAR 0 8
64934: PPUSH
64935: LD_INT 1
64937: PPUSH
64938: CALL_OW 275
64942: PLUS
64943: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
64944: LD_ADDR_VAR 0 5
64948: PUSH
64949: LD_VAR 0 5
64953: PUSH
64954: LD_VAR 0 8
64958: PPUSH
64959: LD_INT 2
64961: PPUSH
64962: CALL_OW 275
64966: PLUS
64967: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
64968: LD_ADDR_VAR 0 6
64972: PUSH
64973: LD_VAR 0 6
64977: PUSH
64978: LD_VAR 0 8
64982: PPUSH
64983: LD_INT 3
64985: PPUSH
64986: CALL_OW 275
64990: PLUS
64991: ST_TO_ADDR
// end ;
64992: GO 64902
64994: POP
64995: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
64996: LD_STRING setSpecText(
64998: PUSH
64999: LD_VAR 0 2
65003: STR
65004: PUSH
65005: LD_STRING ,
65007: STR
65008: PUSH
65009: LD_INT 2
65011: STR
65012: PUSH
65013: LD_STRING ,
65015: STR
65016: PUSH
65017: LD_VAR 0 4
65021: STR
65022: PUSH
65023: LD_STRING )
65025: STR
65026: PPUSH
65027: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
65031: LD_STRING setSpecText(
65033: PUSH
65034: LD_VAR 0 2
65038: STR
65039: PUSH
65040: LD_STRING ,
65042: STR
65043: PUSH
65044: LD_INT 3
65046: STR
65047: PUSH
65048: LD_STRING ,
65050: STR
65051: PUSH
65052: LD_VAR 0 5
65056: STR
65057: PUSH
65058: LD_STRING )
65060: STR
65061: PPUSH
65062: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
65066: LD_STRING setSpecText(
65068: PUSH
65069: LD_VAR 0 2
65073: STR
65074: PUSH
65075: LD_STRING ,
65077: STR
65078: PUSH
65079: LD_INT 4
65081: STR
65082: PUSH
65083: LD_STRING ,
65085: STR
65086: PUSH
65087: LD_VAR 0 6
65091: STR
65092: PUSH
65093: LD_STRING )
65095: STR
65096: PPUSH
65097: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
65101: LD_STRING setSpecText(
65103: PUSH
65104: LD_VAR 0 2
65108: STR
65109: PUSH
65110: LD_STRING ,
65112: STR
65113: PUSH
65114: LD_INT 5
65116: STR
65117: PUSH
65118: LD_STRING ,
65120: STR
65121: PUSH
65122: LD_VAR 0 7
65126: STR
65127: PUSH
65128: LD_STRING )
65130: STR
65131: PPUSH
65132: CALL_OW 559
// end ; end ;
65136: GO 64752
65138: POP
65139: POP
// end ;
65140: LD_VAR 0 1
65144: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
65145: LD_INT 2
65147: PUSH
65148: LD_INT 30
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PUSH
65158: LD_INT 30
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: PPUSH
65173: CALL_OW 69
65177: IFFALSE 65187
65179: GO 65181
65181: DISABLE
// begin enable ;
65182: ENABLE
// UpdateSpectatorBar ;
65183: CALL 64728 0 0
// end ;
65187: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65188: LD_INT 0
65190: PPUSH
// end ;
65191: LD_VAR 0 12
65195: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
65196: LD_INT 0
65198: PPUSH
65199: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
65200: LD_VAR 0 1
65204: NOT
65205: IFTRUE 65224
65207: PUSH
65208: LD_VAR 0 2
65212: PPUSH
65213: LD_VAR 0 3
65217: PPUSH
65218: CALL_OW 488
65222: NOT
65223: OR
65224: IFTRUE 65259
65226: PUSH
65227: LD_VAR 0 1
65231: PPUSH
65232: CALL_OW 266
65236: PUSH
65237: LD_INT 3
65239: NONEQUAL
65240: IFFALSE 65258
65242: PUSH
65243: LD_VAR 0 1
65247: PPUSH
65248: CALL_OW 247
65252: PUSH
65253: LD_INT 1
65255: EQUAL
65256: NOT
65257: AND
65258: OR
65259: IFFALSE 65263
// exit ;
65261: GO 65545
// if GetType ( factory ) = unit_human then
65263: LD_VAR 0 1
65267: PPUSH
65268: CALL_OW 247
65272: PUSH
65273: LD_INT 1
65275: EQUAL
65276: IFFALSE 65293
// factory := IsInUnit ( factory ) ;
65278: LD_ADDR_VAR 0 1
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: CALL_OW 310
65292: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 266
65302: PUSH
65303: LD_INT 3
65305: NONEQUAL
65306: IFFALSE 65310
// exit ;
65308: GO 65545
// for i := 1 to Count ( factoryWaypoints ) do
65310: LD_ADDR_VAR 0 5
65314: PUSH
65315: DOUBLE
65316: LD_INT 1
65318: DEC
65319: ST_TO_ADDR
65320: LD_EXP 53
65324: PPUSH
65325: CALL 17828 0 1
65329: PUSH
65330: FOR_TO
65331: IFFALSE 65493
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
65333: LD_VAR 0 2
65337: PPUSH
65338: LD_VAR 0 3
65342: PPUSH
65343: CALL_OW 428
65347: PUSH
65348: LD_EXP 53
65352: PUSH
65353: LD_VAR 0 5
65357: ARRAY
65358: PUSH
65359: LD_INT 2
65361: ARRAY
65362: EQUAL
65363: IFFALSE 65395
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65365: LD_ADDR_EXP 53
65369: PUSH
65370: LD_EXP 53
65374: PPUSH
65375: LD_VAR 0 5
65379: PPUSH
65380: CALL_OW 3
65384: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65385: CALL 65550 0 0
// exit ;
65389: POP
65390: POP
65391: GO 65545
// end else
65393: GO 65491
// if factory = factoryWaypoints [ i ] [ 2 ] then
65395: LD_VAR 0 1
65399: PUSH
65400: LD_EXP 53
65404: PUSH
65405: LD_VAR 0 5
65409: ARRAY
65410: PUSH
65411: LD_INT 2
65413: ARRAY
65414: EQUAL
65415: IFFALSE 65491
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
65417: LD_ADDR_EXP 53
65421: PUSH
65422: LD_EXP 53
65426: PPUSH
65427: LD_VAR 0 5
65431: PPUSH
65432: CALL_OW 3
65436: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65437: LD_ADDR_EXP 53
65441: PUSH
65442: LD_EXP 53
65446: PPUSH
65447: LD_VAR 0 1
65451: PPUSH
65452: CALL_OW 255
65456: PUSH
65457: LD_VAR 0 1
65461: PUSH
65462: LD_VAR 0 2
65466: PUSH
65467: LD_VAR 0 3
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: LIST
65476: LIST
65477: PPUSH
65478: CALL 53760 0 2
65482: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65483: CALL 65550 0 0
// exit ;
65487: POP
65488: POP
65489: GO 65545
// end ; end ;
65491: GO 65330
65493: POP
65494: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65495: LD_ADDR_EXP 53
65499: PUSH
65500: LD_EXP 53
65504: PPUSH
65505: LD_VAR 0 1
65509: PPUSH
65510: CALL_OW 255
65514: PUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_VAR 0 3
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: PPUSH
65536: CALL 53760 0 2
65540: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65541: CALL 65550 0 0
// end ;
65545: LD_VAR 0 4
65549: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65550: LD_INT 0
65552: PPUSH
65553: PPUSH
65554: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65555: LD_STRING resetFactoryWaypoint();
65557: PPUSH
65558: CALL_OW 559
// if factoryWaypoints then
65562: LD_EXP 53
65566: IFFALSE 65687
// begin list := factoryWaypoints ;
65568: LD_ADDR_VAR 0 3
65572: PUSH
65573: LD_EXP 53
65577: ST_TO_ADDR
// for i := 1 to list do
65578: LD_ADDR_VAR 0 2
65582: PUSH
65583: DOUBLE
65584: LD_INT 1
65586: DEC
65587: ST_TO_ADDR
65588: LD_VAR 0 3
65592: PUSH
65593: FOR_TO
65594: IFFALSE 65685
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65596: LD_STRING setFactoryWaypointXY(
65598: PUSH
65599: LD_VAR 0 3
65603: PUSH
65604: LD_VAR 0 2
65608: ARRAY
65609: PUSH
65610: LD_INT 1
65612: ARRAY
65613: STR
65614: PUSH
65615: LD_STRING ,
65617: STR
65618: PUSH
65619: LD_VAR 0 3
65623: PUSH
65624: LD_VAR 0 2
65628: ARRAY
65629: PUSH
65630: LD_INT 2
65632: ARRAY
65633: STR
65634: PUSH
65635: LD_STRING ,
65637: STR
65638: PUSH
65639: LD_VAR 0 3
65643: PUSH
65644: LD_VAR 0 2
65648: ARRAY
65649: PUSH
65650: LD_INT 3
65652: ARRAY
65653: STR
65654: PUSH
65655: LD_STRING ,
65657: STR
65658: PUSH
65659: LD_VAR 0 3
65663: PUSH
65664: LD_VAR 0 2
65668: ARRAY
65669: PUSH
65670: LD_INT 4
65672: ARRAY
65673: STR
65674: PUSH
65675: LD_STRING )
65677: STR
65678: PPUSH
65679: CALL_OW 559
65683: GO 65593
65685: POP
65686: POP
// end ; end ;
65687: LD_VAR 0 1
65691: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65692: LD_INT 0
65694: PPUSH
// if HexInfo ( x , y ) = warehouse then
65695: LD_VAR 0 2
65699: PPUSH
65700: LD_VAR 0 3
65704: PPUSH
65705: CALL_OW 428
65709: PUSH
65710: LD_VAR 0 1
65714: EQUAL
65715: IFFALSE 65742
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65717: LD_ADDR_EXP 55
65721: PUSH
65722: LD_EXP 55
65726: PPUSH
65727: LD_VAR 0 1
65731: PPUSH
65732: LD_INT 0
65734: PPUSH
65735: CALL_OW 1
65739: ST_TO_ADDR
65740: GO 65793
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65742: LD_ADDR_EXP 55
65746: PUSH
65747: LD_EXP 55
65751: PPUSH
65752: LD_VAR 0 1
65756: PPUSH
65757: LD_VAR 0 1
65761: PPUSH
65762: CALL_OW 255
65766: PUSH
65767: LD_VAR 0 1
65771: PUSH
65772: LD_VAR 0 2
65776: PUSH
65777: LD_VAR 0 3
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: PPUSH
65788: CALL_OW 1
65792: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65793: CALL 65802 0 0
// end ;
65797: LD_VAR 0 4
65801: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65802: LD_INT 0
65804: PPUSH
65805: PPUSH
65806: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65807: LD_STRING resetWarehouseGatheringPoints();
65809: PPUSH
65810: CALL_OW 559
// if warehouseGatheringPoints then
65814: LD_EXP 55
65818: IFFALSE 65944
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65820: LD_ADDR_VAR 0 3
65824: PUSH
65825: LD_EXP 55
65829: PPUSH
65830: CALL 57694 0 1
65834: ST_TO_ADDR
// for i := 1 to list do
65835: LD_ADDR_VAR 0 2
65839: PUSH
65840: DOUBLE
65841: LD_INT 1
65843: DEC
65844: ST_TO_ADDR
65845: LD_VAR 0 3
65849: PUSH
65850: FOR_TO
65851: IFFALSE 65942
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65853: LD_STRING setWarehouseGatheringPointXY(
65855: PUSH
65856: LD_VAR 0 3
65860: PUSH
65861: LD_VAR 0 2
65865: ARRAY
65866: PUSH
65867: LD_INT 1
65869: ARRAY
65870: STR
65871: PUSH
65872: LD_STRING ,
65874: STR
65875: PUSH
65876: LD_VAR 0 3
65880: PUSH
65881: LD_VAR 0 2
65885: ARRAY
65886: PUSH
65887: LD_INT 2
65889: ARRAY
65890: STR
65891: PUSH
65892: LD_STRING ,
65894: STR
65895: PUSH
65896: LD_VAR 0 3
65900: PUSH
65901: LD_VAR 0 2
65905: ARRAY
65906: PUSH
65907: LD_INT 3
65909: ARRAY
65910: STR
65911: PUSH
65912: LD_STRING ,
65914: STR
65915: PUSH
65916: LD_VAR 0 3
65920: PUSH
65921: LD_VAR 0 2
65925: ARRAY
65926: PUSH
65927: LD_INT 4
65929: ARRAY
65930: STR
65931: PUSH
65932: LD_STRING )
65934: STR
65935: PPUSH
65936: CALL_OW 559
65940: GO 65850
65942: POP
65943: POP
// end ; end ;
65944: LD_VAR 0 1
65948: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
65949: LD_INT 0
65951: PPUSH
65952: PPUSH
// if not mpSidePositions then
65953: LD_EXP 37
65957: NOT
65958: IFFALSE 65962
// exit ;
65960: GO 66033
// result :=  ;
65962: LD_ADDR_VAR 0 1
65966: PUSH
65967: LD_STRING 
65969: ST_TO_ADDR
// for i := 1 to 8 do
65970: LD_ADDR_VAR 0 2
65974: PUSH
65975: DOUBLE
65976: LD_INT 1
65978: DEC
65979: ST_TO_ADDR
65980: LD_INT 8
65982: PUSH
65983: FOR_TO
65984: IFFALSE 66014
// begin result := result & mpSidePositions [ i ] & ; ;
65986: LD_ADDR_VAR 0 1
65990: PUSH
65991: LD_VAR 0 1
65995: PUSH
65996: LD_EXP 37
66000: PUSH
66001: LD_VAR 0 2
66005: ARRAY
66006: STR
66007: PUSH
66008: LD_STRING ;
66010: STR
66011: ST_TO_ADDR
// end ;
66012: GO 65983
66014: POP
66015: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
66016: LD_STRING setMultiplayerRealPosition("
66018: PUSH
66019: LD_VAR 0 1
66023: STR
66024: PUSH
66025: LD_STRING ");
66027: STR
66028: PPUSH
66029: CALL_OW 559
// end ;
66033: LD_VAR 0 1
66037: RET
