// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3923 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5869 0 1
  44: PPUSH
  45: CALL 1028 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5869 0 1
  56: PPUSH
  57: CALL 12504 0 1
// Multiplayer_Start ;
  61: CALL 7599 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 42
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 42
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7718 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: IFFALSE 199
 192: PUSH
 193: LD_OWVAR 48
 197: NOT
 198: AND
 199: IFFALSE 215
 201: GO 203
 203: DISABLE
// begin enable ;
 204: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 205: LD_ADDR_OWVAR 47
 209: PUSH
 210: CALL 8151 0 0
 214: ST_TO_ADDR
// end ; end_of_file
 215: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] , [ 26 , 30 , 34 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 216: LD_EXP 41
 220: PUSH
 221: LD_INT 6
 223: PUSH
 224: LD_INT 8
 226: PUSH
 227: LD_INT 10
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: LIST
 234: PUSH
 235: LD_OWVAR 67
 239: ARRAY
 240: PUSH
 241: LD_INT 16
 243: PUSH
 244: LD_INT 20
 246: PUSH
 247: LD_INT 24
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: PUSH
 261: LD_INT 26
 263: PUSH
 264: LD_INT 30
 266: PUSH
 267: LD_INT 34
 269: PUSH
 270: EMPTY
 271: LIST
 272: LIST
 273: LIST
 274: PUSH
 275: LD_OWVAR 67
 279: ARRAY
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: IN
 286: IFFALSE 660
 288: GO 290
 290: DISABLE
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// begin repeat wait ( 10 ) ;
 298: LD_INT 10
 300: PPUSH
 301: CALL_OW 67
// until not blockThread ;
 305: LD_EXP 6
 309: NOT
 310: IFFALSE 298
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 312: LD_ADDR_VAR 0 5
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: ST_TO_ADDR
// for i := 1 to 8 do
 337: LD_ADDR_VAR 0 1
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 8
 349: PUSH
 350: FOR_TO
 351: IFFALSE 650
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 353: LD_EXP 15
 357: PUSH
 358: LD_VAR 0 1
 362: ARRAY
 363: PUSH
 364: LD_INT 2
 366: EQUAL
 367: IFFALSE 382
 369: PUSH
 370: LD_EXP 32
 374: PUSH
 375: LD_VAR 0 1
 379: ARRAY
 380: NOT
 381: AND
 382: IFFALSE 648
// begin uc_side := i ;
 384: LD_ADDR_OWVAR 20
 388: PUSH
 389: LD_VAR 0 1
 393: ST_TO_ADDR
// uc_nation := nation_russian ;
 394: LD_ADDR_OWVAR 21
 398: PUSH
 399: LD_INT 3
 401: ST_TO_ADDR
// if i = your_side then
 402: LD_VAR 0 1
 406: PUSH
 407: LD_OWVAR 2
 411: EQUAL
 412: IFFALSE 424
// CenterNowOnXY ( 112 , 172 ) ;
 414: LD_INT 112
 416: PPUSH
 417: LD_INT 172
 419: PPUSH
 420: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 424: LD_INT 0
 426: PPUSH
 427: LD_VAR 0 5
 431: PPUSH
 432: CALL_OW 382
// un := CreateHuman ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: CALL_OW 44
 445: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 446: LD_VAR 0 3
 450: PPUSH
 451: LD_INT 25
 453: PPUSH
 454: LD_INT 0
 456: PPUSH
 457: CALL_OW 49
// for j := 1 to 2 do
 461: LD_ADDR_VAR 0 2
 465: PUSH
 466: DOUBLE
 467: LD_INT 1
 469: DEC
 470: ST_TO_ADDR
 471: LD_INT 2
 473: PUSH
 474: FOR_TO
 475: IFFALSE 516
// begin PrepareMechanic ( false , skill ) ;
 477: LD_INT 0
 479: PPUSH
 480: LD_VAR 0 5
 484: PPUSH
 485: CALL_OW 383
// un := CreateHuman ;
 489: LD_ADDR_VAR 0 3
 493: PUSH
 494: CALL_OW 44
 498: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 499: LD_VAR 0 3
 503: PPUSH
 504: LD_INT 25
 506: PPUSH
 507: LD_INT 0
 509: PPUSH
 510: CALL_OW 49
// end ;
 514: GO 474
 516: POP
 517: POP
// for j := 1 to 2 do
 518: LD_ADDR_VAR 0 2
 522: PUSH
 523: DOUBLE
 524: LD_INT 1
 526: DEC
 527: ST_TO_ADDR
 528: LD_INT 2
 530: PUSH
 531: FOR_TO
 532: IFFALSE 646
// begin uc_side := i ;
 534: LD_ADDR_OWVAR 20
 538: PUSH
 539: LD_VAR 0 1
 543: ST_TO_ADDR
// uc_nation := nation_russian ;
 544: LD_ADDR_OWVAR 21
 548: PUSH
 549: LD_INT 3
 551: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 552: LD_INT 22
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: LD_INT 1
 560: PPUSH
 561: LD_INT 44
 563: PPUSH
 564: LD_INT 50
 566: PPUSH
 567: CALL 20736 0 5
// veh := CreateVehicle ;
 571: LD_ADDR_VAR 0 4
 575: PUSH
 576: CALL_OW 45
 580: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 581: LD_VAR 0 4
 585: PPUSH
 586: LD_INT 5
 588: PPUSH
 589: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 593: LD_INT 0
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: CALL_OW 383
// un := CreateHuman ;
 605: LD_ADDR_VAR 0 3
 609: PUSH
 610: CALL_OW 44
 614: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 615: LD_VAR 0 4
 619: PPUSH
 620: LD_INT 25
 622: PPUSH
 623: LD_INT 0
 625: PPUSH
 626: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 630: LD_VAR 0 3
 634: PPUSH
 635: LD_VAR 0 4
 639: PPUSH
 640: CALL_OW 52
// end ;
 644: GO 531
 646: POP
 647: POP
// end ;
 648: GO 350
 650: POP
 651: POP
// wait ( 10 10$0 ) ;
 652: LD_INT 21000
 654: PPUSH
 655: CALL_OW 67
// enable ;
 659: ENABLE
// end ;
 660: PPOPN 5
 662: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 22 , 26 , 30 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 663: LD_EXP 41
 667: PUSH
 668: LD_INT 12
 670: PUSH
 671: LD_INT 14
 673: PUSH
 674: LD_INT 16
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: LD_OWVAR 67
 686: ARRAY
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_INT 26
 693: PUSH
 694: LD_INT 30
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: LD_OWVAR 67
 706: ARRAY
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 36
 713: PUSH
 714: LD_INT 40
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: PUSH
 722: LD_OWVAR 67
 726: ARRAY
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: IN
 733: IFFALSE 1025
 735: GO 737
 737: DISABLE
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// begin repeat wait ( 10 ) ;
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 67
// until not blockThread ;
 752: LD_EXP 6
 756: NOT
 757: IFFALSE 745
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 759: LD_ADDR_VAR 0 5
 763: PUSH
 764: LD_INT 6
 766: PUSH
 767: LD_INT 5
 769: PUSH
 770: LD_INT 4
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// for i := 1 to 8 do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 8
 796: PUSH
 797: FOR_TO
 798: IFFALSE 1015
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 800: LD_EXP 15
 804: PUSH
 805: LD_VAR 0 1
 809: ARRAY
 810: PUSH
 811: LD_INT 1
 813: EQUAL
 814: IFFALSE 829
 816: PUSH
 817: LD_EXP 32
 821: PUSH
 822: LD_VAR 0 1
 826: ARRAY
 827: NOT
 828: AND
 829: IFFALSE 1013
// begin if i = your_side then
 831: LD_VAR 0 1
 835: PUSH
 836: LD_OWVAR 2
 840: EQUAL
 841: IFFALSE 853
// CenterNowOnXY ( 112 , 172 ) ;
 843: LD_INT 112
 845: PPUSH
 846: LD_INT 172
 848: PPUSH
 849: CALL_OW 86
// for j := 1 to 3 do
 853: LD_ADDR_VAR 0 2
 857: PUSH
 858: DOUBLE
 859: LD_INT 1
 861: DEC
 862: ST_TO_ADDR
 863: LD_INT 3
 865: PUSH
 866: FOR_TO
 867: IFFALSE 1011
// begin uc_side := i ;
 869: LD_ADDR_OWVAR 20
 873: PUSH
 874: LD_VAR 0 1
 878: ST_TO_ADDR
// uc_nation := nation_russian ;
 879: LD_ADDR_OWVAR 21
 883: PUSH
 884: LD_INT 3
 886: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ j mod 2 + 1 ] , 50 ) ;
 887: LD_INT 22
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 1
 895: PPUSH
 896: LD_INT 44
 898: PUSH
 899: LD_INT 43
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_VAR 0 2
 910: PUSH
 911: LD_INT 2
 913: MOD
 914: PUSH
 915: LD_INT 1
 917: PLUS
 918: ARRAY
 919: PPUSH
 920: LD_INT 50
 922: PPUSH
 923: CALL 20736 0 5
// veh := CreateVehicle ;
 927: LD_ADDR_VAR 0 4
 931: PUSH
 932: CALL_OW 45
 936: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 937: LD_VAR 0 4
 941: PPUSH
 942: LD_INT 5
 944: PPUSH
 945: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 949: LD_INT 0
 951: PPUSH
 952: LD_VAR 0 5
 956: PPUSH
 957: CALL_OW 383
// un := CreateHuman ;
 961: LD_ADDR_VAR 0 3
 965: PUSH
 966: CALL_OW 44
 970: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 971: LD_INT 35
 973: PPUSH
 974: CALL_OW 67
// until PlaceUnitArea ( veh , southRefArea , false ) ;
 978: LD_VAR 0 4
 982: PPUSH
 983: LD_INT 25
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 49
 993: IFFALSE 971
// PlaceHumanInUnit ( un , veh ) ;
 995: LD_VAR 0 3
 999: PPUSH
1000: LD_VAR 0 4
1004: PPUSH
1005: CALL_OW 52
// end ;
1009: GO 866
1011: POP
1012: POP
// end ;
1013: GO 797
1015: POP
1016: POP
// wait ( 10 10$0 ) ;
1017: LD_INT 21000
1019: PPUSH
1020: CALL_OW 67
// enable ;
1024: ENABLE
// end ; end_of_file
1025: PPOPN 5
1027: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
1028: LD_INT 0
1030: PPUSH
1031: PPUSH
1032: PPUSH
1033: PPUSH
1034: PPUSH
// enemySide := side ;
1035: LD_ADDR_EXP 12
1039: PUSH
1040: LD_VAR 0 1
1044: ST_TO_ADDR
// enemyUnits := [ ] ;
1045: LD_ADDR_EXP 9
1049: PUSH
1050: EMPTY
1051: ST_TO_ADDR
// enemyMobile := [ ] ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// enemyForestGuard := [ ] ;
1059: LD_ADDR_EXP 11
1063: PUSH
1064: EMPTY
1065: ST_TO_ADDR
// arAttackersInf := [ ] ;
1066: LD_ADDR_EXP 13
1070: PUSH
1071: EMPTY
1072: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 6
1083: PUSH
1084: LD_INT 8
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_OWVAR 67
1096: ARRAY
1097: ST_TO_ADDR
// uc_side := side ;
1098: LD_ADDR_OWVAR 20
1102: PUSH
1103: LD_VAR 0 1
1107: ST_TO_ADDR
// uc_nation := nation_arabian ;
1108: LD_ADDR_OWVAR 21
1112: PUSH
1113: LD_INT 2
1115: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: PUSH
1146: FOR_TO
1147: IFFALSE 1234
// begin PrepareSoldier ( false , skill ) ;
1149: LD_INT 0
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 381
// un := CreateHuman ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: CALL_OW 44
1170: ST_TO_ADDR
// if i mod 2 = 0 then
1171: LD_VAR 0 3
1175: PUSH
1176: LD_INT 2
1178: MOD
1179: PUSH
1180: LD_INT 0
1182: EQUAL
1183: IFFALSE 1197
// SetClass ( un , class_mortar ) ;
1185: LD_VAR 0 4
1189: PPUSH
1190: LD_INT 8
1192: PPUSH
1193: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1197: LD_ADDR_EXP 11
1201: PUSH
1202: LD_EXP 11
1206: PPUSH
1207: LD_VAR 0 4
1211: PPUSH
1212: CALL 53906 0 2
1216: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_INT 17
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 49
// end ;
1232: GO 1146
1234: POP
1235: POP
// for i := 1 to 2 do
1236: LD_ADDR_VAR 0 3
1240: PUSH
1241: DOUBLE
1242: LD_INT 1
1244: DEC
1245: ST_TO_ADDR
1246: LD_INT 2
1248: PUSH
1249: FOR_TO
1250: IFFALSE 1311
// begin PrepareScientist ( false , skill ) ;
1252: LD_INT 0
1254: PPUSH
1255: LD_VAR 0 5
1259: PPUSH
1260: CALL_OW 384
// un := CreateHuman ;
1264: LD_ADDR_VAR 0 4
1268: PUSH
1269: CALL_OW 44
1273: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1274: LD_ADDR_EXP 11
1278: PUSH
1279: LD_EXP 11
1283: PPUSH
1284: LD_VAR 0 4
1288: PPUSH
1289: CALL 53906 0 2
1293: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1294: LD_VAR 0 4
1298: PPUSH
1299: LD_INT 17
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// end ;
1309: GO 1249
1311: POP
1312: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_INT 2
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_OWVAR 67
1341: ARRAY
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1480
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1346: LD_INT 14
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_INT 27
1357: PPUSH
1358: LD_INT 100
1360: PPUSH
1361: CALL 20736 0 5
// veh := CreateVehicle ;
1365: LD_ADDR_VAR 0 6
1369: PUSH
1370: CALL_OW 45
1374: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1375: LD_ADDR_EXP 11
1379: PUSH
1380: LD_EXP 11
1384: PPUSH
1385: LD_VAR 0 6
1389: PPUSH
1390: CALL 53906 0 2
1394: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1395: LD_VAR 0 6
1399: PPUSH
1400: LD_INT 5
1402: PPUSH
1403: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1407: LD_INT 0
1409: PPUSH
1410: LD_VAR 0 5
1414: PPUSH
1415: CALL_OW 383
// un := CreateHuman ;
1419: LD_ADDR_VAR 0 4
1423: PUSH
1424: CALL_OW 44
1428: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1429: LD_ADDR_EXP 11
1433: PUSH
1434: LD_EXP 11
1438: PPUSH
1439: LD_VAR 0 4
1443: PPUSH
1444: CALL 53906 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1449: LD_VAR 0 6
1453: PPUSH
1454: LD_INT 18
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1464: LD_VAR 0 4
1468: PPUSH
1469: LD_VAR 0 6
1473: PPUSH
1474: CALL_OW 52
// end ;
1478: GO 1343
1480: POP
1481: POP
// for i := 1 to 2 do
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_INT 2
1494: PUSH
1495: FOR_TO
1496: IFFALSE 1579
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1498: LD_INT 14
1500: PPUSH
1501: LD_INT 2
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 32
1509: PPUSH
1510: LD_INT 100
1512: PPUSH
1513: CALL 20736 0 5
// veh := CreateVehicle ;
1517: LD_ADDR_VAR 0 6
1521: PUSH
1522: CALL_OW 45
1526: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1527: LD_VAR 0 6
1531: PPUSH
1532: LD_INT 2
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 12
1542: PPUSH
1543: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1547: LD_VAR 0 6
1551: PPUSH
1552: LD_INT 22
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1562: LD_VAR 0 6
1566: PPUSH
1567: LD_INT 2
1569: PPUSH
1570: LD_INT 100
1572: PPUSH
1573: CALL_OW 290
// end ;
1577: GO 1495
1579: POP
1580: POP
// end ;
1581: LD_VAR 0 2
1585: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// blockThread := true ;
1594: LD_ADDR_EXP 6
1598: PUSH
1599: LD_INT 1
1601: ST_TO_ADDR
// v := convoyWave div 12 ;
1602: LD_ADDR_VAR 0 6
1606: PUSH
1607: LD_EXP 41
1611: PUSH
1612: LD_INT 12
1614: DIV
1615: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 6
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_VAR 0 6
1645: PLUS
1646: ST_TO_ADDR
// if skill > 10 then
1647: LD_VAR 0 5
1651: PUSH
1652: LD_INT 10
1654: GREATER
1655: IFFALSE 1665
// skill := 10 ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_INT 10
1664: ST_TO_ADDR
// if v > 8 then
1665: LD_VAR 0 6
1669: PUSH
1670: LD_INT 8
1672: GREATER
1673: IFFALSE 1683
// v := 8 ;
1675: LD_ADDR_VAR 0 6
1679: PUSH
1680: LD_INT 8
1682: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1683: LD_ADDR_VAR 0 2
1687: PUSH
1688: DOUBLE
1689: LD_INT 1
1691: DEC
1692: ST_TO_ADDR
1693: LD_INT 2
1695: PUSH
1696: LD_INT 3
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_OWVAR 67
1711: ARRAY
1712: PUSH
1713: LD_VAR 0 6
1717: PLUS
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1899
// begin uc_side := enemySide ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_EXP 12
1731: ST_TO_ADDR
// uc_nation := nation_arabian ;
1732: LD_ADDR_OWVAR 21
1736: PUSH
1737: LD_INT 2
1739: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1740: LD_INT 14
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: LD_INT 27
1751: PUSH
1752: LD_INT 25
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 2
1766: MOD
1767: PUSH
1768: LD_INT 1
1770: PLUS
1771: ARRAY
1772: PPUSH
1773: LD_INT 100
1775: PPUSH
1776: CALL 20736 0 5
// veh := CreateVehicle ;
1780: LD_ADDR_VAR 0 3
1784: PUSH
1785: CALL_OW 45
1789: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1790: LD_ADDR_EXP 10
1794: PUSH
1795: LD_EXP 10
1799: PPUSH
1800: LD_VAR 0 3
1804: PPUSH
1805: CALL 53906 0 2
1809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1810: LD_VAR 0 3
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_VAR 0 5
1829: PPUSH
1830: CALL_OW 383
// un := CreateHuman ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: CALL_OW 44
1843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1844: LD_INT 35
1846: PPUSH
1847: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: LD_INT 23
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
1866: IFFALSE 1844
// PlaceHumanInUnit ( un , veh ) ;
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1882: LD_VAR 0 3
1886: PPUSH
1887: LD_INT 104
1889: PPUSH
1890: LD_INT 18
1892: PPUSH
1893: CALL_OW 111
// end ;
1897: GO 1719
1899: POP
1900: POP
// blockThread := false ;
1901: LD_ADDR_EXP 6
1905: PUSH
1906: LD_INT 0
1908: ST_TO_ADDR
// end ;
1909: LD_VAR 0 1
1913: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1914: LD_INT 0
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
// blockThread := true ;
1922: LD_ADDR_EXP 6
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// v := convoyWave div 12 ;
1930: LD_ADDR_VAR 0 6
1934: PUSH
1935: LD_EXP 41
1939: PUSH
1940: LD_INT 12
1942: DIV
1943: ST_TO_ADDR
// if v > 8 then
1944: LD_VAR 0 6
1948: PUSH
1949: LD_INT 8
1951: GREATER
1952: IFFALSE 1962
// v := 8 ;
1954: LD_ADDR_VAR 0 6
1958: PUSH
1959: LD_INT 8
1961: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1962: LD_ADDR_VAR 0 5
1966: PUSH
1967: LD_INT 4
1969: PUSH
1970: LD_INT 5
1972: PUSH
1973: LD_INT 6
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_OWVAR 67
1985: ARRAY
1986: PUSH
1987: LD_VAR 0 6
1991: PLUS
1992: ST_TO_ADDR
// if skill > 10 then
1993: LD_VAR 0 5
1997: PUSH
1998: LD_INT 10
2000: GREATER
2001: IFFALSE 2011
// skill := 10 ;
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_INT 10
2010: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: DOUBLE
2017: LD_INT 1
2019: DEC
2020: ST_TO_ADDR
2021: LD_INT 3
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_OWVAR 67
2039: ARRAY
2040: PUSH
2041: LD_VAR 0 6
2045: PLUS
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2231
// begin uc_side := enemySide ;
2050: LD_ADDR_OWVAR 20
2054: PUSH
2055: LD_EXP 12
2059: ST_TO_ADDR
// uc_nation := nation_arabian ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2068: LD_INT 14
2070: PPUSH
2071: LD_INT 1
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 27
2079: PUSH
2080: LD_INT 25
2082: PUSH
2083: LD_INT 26
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_VAR 0 2
2095: PUSH
2096: LD_INT 3
2098: MOD
2099: PUSH
2100: LD_INT 1
2102: PLUS
2103: ARRAY
2104: PPUSH
2105: LD_INT 100
2107: PPUSH
2108: CALL 20736 0 5
// veh := CreateVehicle ;
2112: LD_ADDR_VAR 0 3
2116: PUSH
2117: CALL_OW 45
2121: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2122: LD_ADDR_EXP 10
2126: PUSH
2127: LD_EXP 10
2131: PPUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL 53906 0 2
2141: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2142: LD_VAR 0 3
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2154: LD_INT 0
2156: PPUSH
2157: LD_VAR 0 5
2161: PPUSH
2162: CALL_OW 383
// un := CreateHuman ;
2166: LD_ADDR_VAR 0 4
2170: PUSH
2171: CALL_OW 44
2175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2176: LD_INT 35
2178: PPUSH
2179: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2183: LD_VAR 0 3
2187: PPUSH
2188: LD_INT 14
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: CALL_OW 49
2198: IFFALSE 2176
// PlaceHumanInUnit ( un , veh ) ;
2200: LD_VAR 0 4
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2214: LD_VAR 0 3
2218: PPUSH
2219: LD_INT 151
2221: PPUSH
2222: LD_INT 28
2224: PPUSH
2225: CALL_OW 111
// end ;
2229: GO 2047
2231: POP
2232: POP
// blockThread := false ;
2233: LD_ADDR_EXP 6
2237: PUSH
2238: LD_INT 0
2240: ST_TO_ADDR
// end ;
2241: LD_VAR 0 1
2245: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2246: LD_INT 0
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
// blockThread := true ;
2254: LD_ADDR_EXP 6
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2262: LD_ADDR_VAR 0 6
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: LD_INT 5
2272: PUSH
2273: LD_INT 7
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: LIST
2280: PUSH
2281: LD_OWVAR 67
2285: ARRAY
2286: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2287: LD_ADDR_VAR 0 5
2291: PUSH
2292: LD_INT 15
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: CALL_OW 517
2302: ST_TO_ADDR
// uc_side := enemySide ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_EXP 12
2312: ST_TO_ADDR
// uc_nation := nation_arabian ;
2313: LD_ADDR_OWVAR 21
2317: PUSH
2318: LD_INT 2
2320: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2321: LD_INT 0
2323: PPUSH
2324: LD_VAR 0 6
2328: PPUSH
2329: CALL_OW 383
// un := CreateHuman ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: CALL_OW 44
2342: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2343: LD_INT 14
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: LD_INT 26
2354: PPUSH
2355: LD_INT 100
2357: PPUSH
2358: CALL 20736 0 5
// veh := CreateVehicle ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: CALL_OW 45
2371: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2372: LD_VAR 0 4
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2384: LD_INT 35
2386: PPUSH
2387: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_INT 14
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 49
2406: IFFALSE 2384
// PlaceHumanInUnit ( un , veh ) ;
2408: LD_VAR 0 3
2412: PPUSH
2413: LD_VAR 0 4
2417: PPUSH
2418: CALL_OW 52
// blockThread := false ;
2422: LD_ADDR_EXP 6
2426: PUSH
2427: LD_INT 0
2429: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: DOUBLE
2436: LD_INT 1
2438: DEC
2439: ST_TO_ADDR
2440: LD_VAR 0 5
2444: PUSH
2445: LD_INT 1
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2496
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_VAR 0 5
2461: PUSH
2462: LD_INT 1
2464: ARRAY
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PPUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 2
2485: ARRAY
2486: PPUSH
2487: LD_INT 7
2489: PPUSH
2490: CALL 60926 0 4
2494: GO 2449
2496: POP
2497: POP
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// if IsDead ( veh ) then
2505: LD_VAR 0 4
2509: PPUSH
2510: CALL_OW 301
2514: IFFALSE 2518
// exit ;
2516: GO 2595
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2518: LD_INT 16
2520: PPUSH
2521: LD_INT 22
2523: PUSH
2524: LD_EXP 12
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 70
2537: IFTRUE 2551
2539: PUSH
2540: LD_VAR 0 4
2544: PPUSH
2545: CALL_OW 314
2549: NOT
2550: OR
2551: IFTRUE 2565
2553: PUSH
2554: LD_VAR 0 3
2558: PPUSH
2559: CALL_OW 314
2563: NOT
2564: OR
2565: IFFALSE 2498
// forestIsCleared := true ;
2567: LD_ADDR_EXP 7
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2575: LD_ADDR_EXP 10
2579: PUSH
2580: LD_EXP 10
2584: PPUSH
2585: LD_VAR 0 4
2589: PPUSH
2590: CALL 53906 0 2
2594: ST_TO_ADDR
// end ;
2595: LD_VAR 0 1
2599: RET
// export function SendWestGroup ; var i , un , skill ; begin
2600: LD_INT 0
2602: PPUSH
2603: PPUSH
2604: PPUSH
2605: PPUSH
// blockThread := true ;
2606: LD_ADDR_EXP 6
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2614: LD_ADDR_VAR 0 4
2618: PUSH
2619: LD_INT 3
2621: PUSH
2622: LD_INT 5
2624: PUSH
2625: LD_INT 7
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_OWVAR 67
2637: ARRAY
2638: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2639: LD_ADDR_VAR 0 2
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 2
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 3
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2795
// begin uc_side := enemySide ;
2672: LD_ADDR_OWVAR 20
2676: PUSH
2677: LD_EXP 12
2681: ST_TO_ADDR
// uc_nation := nation_arabian ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2690: LD_INT 0
2692: PPUSH
2693: LD_VAR 0 4
2697: PPUSH
2698: CALL_OW 381
// un := CreateHuman ;
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: CALL_OW 44
2711: ST_TO_ADDR
// if i mod 3 = 0 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 3
2719: MOD
2720: PUSH
2721: LD_INT 0
2723: EQUAL
2724: IFFALSE 2738
// SetClass ( un , class_mortar ) ;
2726: LD_VAR 0 3
2730: PPUSH
2731: LD_INT 8
2733: PPUSH
2734: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2738: LD_ADDR_EXP 9
2742: PUSH
2743: LD_EXP 9
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 53906 0 2
2757: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2758: LD_VAR 0 3
2762: PPUSH
2763: LD_INT 24
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 49
// result := Join ( result , un ) ;
2773: LD_ADDR_VAR 0 1
2777: PUSH
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 3
2787: PPUSH
2788: CALL 53906 0 2
2792: ST_TO_ADDR
// end ;
2793: GO 2669
2795: POP
2796: POP
// PrepareScientist ( false , skill ) ;
2797: LD_INT 0
2799: PPUSH
2800: LD_VAR 0 4
2804: PPUSH
2805: CALL_OW 384
// un := CreateHuman ;
2809: LD_ADDR_VAR 0 3
2813: PUSH
2814: CALL_OW 44
2818: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2819: LD_ADDR_EXP 9
2823: PUSH
2824: LD_EXP 9
2828: PPUSH
2829: LD_VAR 0 3
2833: PPUSH
2834: CALL 53906 0 2
2838: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2839: LD_VAR 0 3
2843: PPUSH
2844: LD_INT 24
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 49
// result := Join ( result , un ) ;
2854: LD_ADDR_VAR 0 1
2858: PUSH
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL 53906 0 2
2873: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 24
2881: PPUSH
2882: LD_INT 37
2884: PPUSH
2885: CALL_OW 114
// blockThread := false ;
2889: LD_ADDR_EXP 6
2893: PUSH
2894: LD_INT 0
2896: ST_TO_ADDR
// end ;
2897: LD_VAR 0 1
2901: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2902: LD_INT 0
2904: PPUSH
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
// blockThread := true ;
2910: LD_ADDR_EXP 6
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// v := convoyWave div 12 ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_EXP 41
2927: PUSH
2928: LD_INT 12
2930: DIV
2931: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2932: LD_ADDR_VAR 0 5
2936: PUSH
2937: LD_INT 4
2939: PUSH
2940: LD_INT 5
2942: PUSH
2943: LD_INT 6
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_OWVAR 67
2955: ARRAY
2956: PUSH
2957: LD_VAR 0 6
2961: PLUS
2962: ST_TO_ADDR
// if skill > 10 then
2963: LD_VAR 0 5
2967: PUSH
2968: LD_INT 10
2970: GREATER
2971: IFFALSE 2981
// skill := 10 ;
2973: LD_ADDR_VAR 0 5
2977: PUSH
2978: LD_INT 10
2980: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: LD_INT 3
2996: PUSH
2997: LD_INT 3
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: PUSH
3005: LD_OWVAR 67
3009: ARRAY
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3215
// begin uc_side := enemySide ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_EXP 12
3023: ST_TO_ADDR
// uc_nation := nation_arabian ;
3024: LD_ADDR_OWVAR 21
3028: PUSH
3029: LD_INT 2
3031: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
3032: LD_INT 14
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: LD_INT 27
3043: PUSH
3044: LD_INT 30
3046: PUSH
3047: LD_INT 23
3049: PUSH
3050: EMPTY
3051: LIST
3052: LIST
3053: LIST
3054: PUSH
3055: LD_VAR 0 2
3059: PUSH
3060: LD_INT 3
3062: MOD
3063: PUSH
3064: LD_INT 1
3066: PLUS
3067: ARRAY
3068: PPUSH
3069: LD_INT 100
3071: PPUSH
3072: CALL 20736 0 5
// veh := CreateVehicle ;
3076: LD_ADDR_VAR 0 3
3080: PUSH
3081: CALL_OW 45
3085: ST_TO_ADDR
// result := Join ( result , veh ) ;
3086: LD_ADDR_VAR 0 1
3090: PUSH
3091: LD_VAR 0 1
3095: PPUSH
3096: LD_VAR 0 3
3100: PPUSH
3101: CALL 53906 0 2
3105: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 4
3113: PPUSH
3114: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
3118: LD_INT 0
3120: PPUSH
3121: LD_VAR 0 5
3125: PPUSH
3126: CALL_OW 383
// un := CreateHuman ;
3130: LD_ADDR_VAR 0 4
3134: PUSH
3135: CALL_OW 44
3139: ST_TO_ADDR
// result := Join ( result , un ) ;
3140: LD_ADDR_VAR 0 1
3144: PUSH
3145: LD_VAR 0 1
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: CALL 53906 0 2
3159: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3160: LD_INT 35
3162: PPUSH
3163: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 14
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 49
3182: IFFALSE 3160
// PlaceHumanInUnit ( un , veh ) ;
3184: LD_VAR 0 4
3188: PPUSH
3189: LD_VAR 0 3
3193: PPUSH
3194: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3198: LD_VAR 0 3
3202: PPUSH
3203: LD_INT 159
3205: PPUSH
3206: LD_INT 53
3208: PPUSH
3209: CALL_OW 111
// end ;
3213: GO 3011
3215: POP
3216: POP
// blockThread := false ;
3217: LD_ADDR_EXP 6
3221: PUSH
3222: LD_INT 0
3224: ST_TO_ADDR
// end ;
3225: LD_VAR 0 1
3229: RET
// export function SendEastGroup ; var i , un , skill ; begin
3230: LD_INT 0
3232: PPUSH
3233: PPUSH
3234: PPUSH
3235: PPUSH
// blockThread := true ;
3236: LD_ADDR_EXP 6
3240: PUSH
3241: LD_INT 1
3243: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3244: LD_ADDR_VAR 0 4
3248: PUSH
3249: LD_INT 3
3251: PUSH
3252: LD_INT 5
3254: PUSH
3255: LD_INT 7
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: PUSH
3263: LD_OWVAR 67
3267: ARRAY
3268: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: DOUBLE
3275: LD_INT 1
3277: DEC
3278: ST_TO_ADDR
3279: LD_INT 4
3281: PUSH
3282: LD_INT 5
3284: PUSH
3285: LD_INT 6
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: LIST
3292: PUSH
3293: LD_OWVAR 67
3297: ARRAY
3298: PUSH
3299: FOR_TO
3300: IFFALSE 3405
// begin uc_side := enemySide ;
3302: LD_ADDR_OWVAR 20
3306: PUSH
3307: LD_EXP 12
3311: ST_TO_ADDR
// uc_nation := nation_arabian ;
3312: LD_ADDR_OWVAR 21
3316: PUSH
3317: LD_INT 2
3319: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3320: LD_INT 0
3322: PPUSH
3323: LD_VAR 0 4
3327: PPUSH
3328: CALL_OW 381
// un := CreateHuman ;
3332: LD_ADDR_VAR 0 3
3336: PUSH
3337: CALL_OW 44
3341: ST_TO_ADDR
// if i mod 3 = 0 then
3342: LD_VAR 0 2
3346: PUSH
3347: LD_INT 3
3349: MOD
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3368
// SetClass ( un , class_mortar ) ;
3356: LD_VAR 0 3
3360: PPUSH
3361: LD_INT 8
3363: PPUSH
3364: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: LD_INT 26
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 49
// result := Join ( result , un ) ;
3383: LD_ADDR_VAR 0 1
3387: PUSH
3388: LD_VAR 0 1
3392: PPUSH
3393: LD_VAR 0 3
3397: PPUSH
3398: CALL 53906 0 2
3402: ST_TO_ADDR
// end ;
3403: GO 3299
3405: POP
3406: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3407: LD_VAR 0 1
3411: PPUSH
3412: LD_INT 219
3414: PPUSH
3415: LD_INT 168
3417: PPUSH
3418: CALL_OW 114
// blockThread := false ;
3422: LD_ADDR_EXP 6
3426: PUSH
3427: LD_INT 0
3429: ST_TO_ADDR
// end ;
3430: LD_VAR 0 1
3434: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3435: LD_INT 0
3437: PPUSH
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
// blockThread := true ;
3442: LD_ADDR_EXP 6
3446: PUSH
3447: LD_INT 1
3449: ST_TO_ADDR
// v := convoyWave div 12 ;
3450: LD_ADDR_VAR 0 5
3454: PUSH
3455: LD_EXP 41
3459: PUSH
3460: LD_INT 12
3462: DIV
3463: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3464: LD_ADDR_VAR 0 4
3468: PUSH
3469: LD_INT 4
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 6
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: PUSH
3489: LD_VAR 0 5
3493: PLUS
3494: ST_TO_ADDR
// if skill > 10 then
3495: LD_VAR 0 4
3499: PUSH
3500: LD_INT 10
3502: GREATER
3503: IFFALSE 3513
// skill := 10 ;
3505: LD_ADDR_VAR 0 4
3509: PUSH
3510: LD_INT 10
3512: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3513: LD_ADDR_VAR 0 2
3517: PUSH
3518: DOUBLE
3519: LD_INT 1
3521: DEC
3522: ST_TO_ADDR
3523: LD_INT 3
3525: PUSH
3526: LD_INT 4
3528: PUSH
3529: LD_INT 5
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: LIST
3536: PUSH
3537: LD_OWVAR 67
3541: ARRAY
3542: PUSH
3543: FOR_TO
3544: IFFALSE 3649
// begin uc_side := enemySide ;
3546: LD_ADDR_OWVAR 20
3550: PUSH
3551: LD_EXP 12
3555: ST_TO_ADDR
// uc_nation := nation_arabian ;
3556: LD_ADDR_OWVAR 21
3560: PUSH
3561: LD_INT 2
3563: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3564: LD_INT 0
3566: PPUSH
3567: LD_VAR 0 4
3571: PPUSH
3572: CALL_OW 381
// un := CreateHuman ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: CALL_OW 44
3585: ST_TO_ADDR
// if i mod 3 = 0 then
3586: LD_VAR 0 2
3590: PUSH
3591: LD_INT 3
3593: MOD
3594: PUSH
3595: LD_INT 0
3597: EQUAL
3598: IFFALSE 3612
// SetClass ( un , class_mortar ) ;
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_INT 8
3607: PPUSH
3608: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3612: LD_VAR 0 3
3616: PPUSH
3617: LD_INT 27
3619: PPUSH
3620: LD_INT 0
3622: PPUSH
3623: CALL_OW 49
// result := Join ( result , un ) ;
3627: LD_ADDR_VAR 0 1
3631: PUSH
3632: LD_VAR 0 1
3636: PPUSH
3637: LD_VAR 0 3
3641: PPUSH
3642: CALL 53906 0 2
3646: ST_TO_ADDR
// end ;
3647: GO 3543
3649: POP
3650: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3651: LD_VAR 0 1
3655: PPUSH
3656: LD_INT 77
3658: PPUSH
3659: LD_INT 23
3661: PPUSH
3662: CALL_OW 114
// blockThread := false ;
3666: LD_ADDR_EXP 6
3670: PUSH
3671: LD_INT 0
3673: ST_TO_ADDR
// end ;
3674: LD_VAR 0 1
3678: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3679: LD_INT 0
3681: PPUSH
3682: PPUSH
3683: PPUSH
3684: PPUSH
3685: PPUSH
// blockThread := true ;
3686: LD_ADDR_EXP 6
3690: PUSH
3691: LD_INT 1
3693: ST_TO_ADDR
// v := convoyWave div 12 ;
3694: LD_ADDR_VAR 0 5
3698: PUSH
3699: LD_EXP 41
3703: PUSH
3704: LD_INT 12
3706: DIV
3707: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3708: LD_ADDR_VAR 0 4
3712: PUSH
3713: LD_INT 4
3715: PUSH
3716: LD_INT 5
3718: PUSH
3719: LD_INT 6
3721: PUSH
3722: EMPTY
3723: LIST
3724: LIST
3725: LIST
3726: PUSH
3727: LD_OWVAR 67
3731: ARRAY
3732: PUSH
3733: LD_VAR 0 5
3737: PLUS
3738: ST_TO_ADDR
// if skill > 10 then
3739: LD_VAR 0 4
3743: PUSH
3744: LD_INT 10
3746: GREATER
3747: IFFALSE 3757
// skill := 10 ;
3749: LD_ADDR_VAR 0 4
3753: PUSH
3754: LD_INT 10
3756: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3757: LD_ADDR_VAR 0 2
3761: PUSH
3762: DOUBLE
3763: LD_INT 1
3765: DEC
3766: ST_TO_ADDR
3767: LD_INT 3
3769: PUSH
3770: LD_INT 4
3772: PUSH
3773: LD_INT 4
3775: PUSH
3776: EMPTY
3777: LIST
3778: LIST
3779: LIST
3780: PUSH
3781: LD_OWVAR 67
3785: ARRAY
3786: PUSH
3787: FOR_TO
3788: IFFALSE 3893
// begin uc_side := enemySide ;
3790: LD_ADDR_OWVAR 20
3794: PUSH
3795: LD_EXP 12
3799: ST_TO_ADDR
// uc_nation := nation_arabian ;
3800: LD_ADDR_OWVAR 21
3804: PUSH
3805: LD_INT 2
3807: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_VAR 0 4
3815: PPUSH
3816: CALL_OW 381
// un := CreateHuman ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: CALL_OW 44
3829: ST_TO_ADDR
// if i mod 3 = 0 then
3830: LD_VAR 0 2
3834: PUSH
3835: LD_INT 3
3837: MOD
3838: PUSH
3839: LD_INT 0
3841: EQUAL
3842: IFFALSE 3856
// SetClass ( un , class_mortar ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 8
3851: PPUSH
3852: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3856: LD_VAR 0 3
3860: PPUSH
3861: LD_INT 28
3863: PPUSH
3864: LD_INT 0
3866: PPUSH
3867: CALL_OW 49
// result := Join ( result , un ) ;
3871: LD_ADDR_VAR 0 1
3875: PUSH
3876: LD_VAR 0 1
3880: PPUSH
3881: LD_VAR 0 3
3885: PPUSH
3886: CALL 53906 0 2
3890: ST_TO_ADDR
// end ;
3891: GO 3787
3893: POP
3894: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3895: LD_VAR 0 1
3899: PPUSH
3900: LD_INT 147
3902: PPUSH
3903: LD_INT 100
3905: PPUSH
3906: CALL_OW 114
// blockThread := false ;
3910: LD_ADDR_EXP 6
3914: PUSH
3915: LD_INT 0
3917: ST_TO_ADDR
// end ; end_of_file
3918: LD_VAR 0 1
3922: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3923: LD_INT 0
3925: PPUSH
3926: PPUSH
3927: PPUSH
3928: PPUSH
3929: PPUSH
// mpGameType := GameTypeCoop ;
3930: LD_ADDR_EXP 36
3934: PUSH
3935: LD_INT 4
3937: ST_TO_ADDR
// multi_settings_counter := 5 ;
3938: LD_ADDR_EXP 26
3942: PUSH
3943: LD_INT 5
3945: ST_TO_ADDR
// multi_settings := [ ] ;
3946: LD_ADDR_EXP 25
3950: PUSH
3951: EMPTY
3952: ST_TO_ADDR
// if Multiplayer then
3953: LD_OWVAR 4
3957: IFFALSE 4137
// begin your_side := mp_player_side ;
3959: LD_ADDR_OWVAR 2
3963: PUSH
3964: LD_OWVAR 7
3968: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3969: LD_ADDR_EXP 14
3973: PUSH
3974: LD_OWVAR 6
3978: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3979: LD_ADDR_EXP 15
3983: PUSH
3984: LD_OWVAR 17
3988: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3989: LD_ADDR_EXP 16
3993: PUSH
3994: LD_OWVAR 15
3998: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3999: LD_ADDR_EXP 17
4003: PUSH
4004: LD_OWVAR 16
4008: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
4009: LD_ADDR_EXP 18
4013: PUSH
4014: EMPTY
4015: PUSH
4016: EMPTY
4017: LIST
4018: ST_TO_ADDR
// for i in mp_teams do
4019: LD_ADDR_VAR 0 2
4023: PUSH
4024: LD_OWVAR 12
4028: PUSH
4029: FOR_IN
4030: IFFALSE 4073
// if i then
4032: LD_VAR 0 2
4036: IFFALSE 4071
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
4038: LD_ADDR_EXP 18
4042: PUSH
4043: LD_EXP 18
4047: PPUSH
4048: LD_INT 1
4050: PPUSH
4051: LD_EXP 18
4055: PUSH
4056: LD_INT 1
4058: ARRAY
4059: PUSH
4060: LD_VAR 0 2
4064: UNION
4065: PPUSH
4066: CALL_OW 1
4070: ST_TO_ADDR
4071: GO 4029
4073: POP
4074: POP
// for i := 1 to multi_settings_counter do
4075: LD_ADDR_VAR 0 2
4079: PUSH
4080: DOUBLE
4081: LD_INT 1
4083: DEC
4084: ST_TO_ADDR
4085: LD_EXP 26
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4133
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
4093: LD_ADDR_EXP 25
4097: PUSH
4098: LD_EXP 25
4102: PPUSH
4103: LD_EXP 25
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_VAR 0 2
4116: PPUSH
4117: CALL_OW 426
4121: PUSH
4122: LD_INT 1
4124: PLUS
4125: PPUSH
4126: CALL_OW 1
4130: ST_TO_ADDR
4131: GO 4090
4133: POP
4134: POP
// end else
4135: GO 4319
// begin your_side := 3 ;
4137: LD_ADDR_OWVAR 2
4141: PUSH
4142: LD_INT 3
4144: ST_TO_ADDR
// multi_gametype := 1 ;
4145: LD_ADDR_EXP 14
4149: PUSH
4150: LD_INT 1
4152: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4153: LD_ADDR_EXP 15
4157: PUSH
4158: LD_INT 0
4160: PUSH
4161: LD_INT 0
4163: PUSH
4164: LD_INT 2
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: LD_INT 0
4175: PUSH
4176: LD_INT 1
4178: PUSH
4179: LD_INT 0
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4192: LD_ADDR_EXP 16
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: LD_INT 1
4217: PUSH
4218: LD_INT 0
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4231: LD_ADDR_EXP 17
4235: PUSH
4236: LD_INT 0
4238: PUSH
4239: LD_INT 0
4241: PUSH
4242: LD_INT 3
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: LD_INT 3
4256: PUSH
4257: LD_INT 0
4259: PUSH
4260: EMPTY
4261: LIST
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4270: LD_ADDR_EXP 18
4274: PUSH
4275: LD_INT 3
4277: PUSH
4278: LD_INT 7
4280: PUSH
4281: EMPTY
4282: LIST
4283: LIST
4284: PUSH
4285: EMPTY
4286: LIST
4287: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4288: LD_ADDR_EXP 25
4292: PUSH
4293: LD_INT 2
4295: PUSH
4296: LD_INT 1
4298: PUSH
4299: LD_INT 4
4301: PUSH
4302: LD_INT 3
4304: PUSH
4305: LD_INT 2
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: EMPTY
4312: LIST
4313: LIST
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
4319: LD_ADDR_EXP 37
4323: PUSH
4324: LD_EXP 15
4328: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4329: LD_ADDR_EXP 19
4333: PUSH
4334: LD_INT 0
4336: PUSH
4337: LD_INT 0
4339: PUSH
4340: LD_INT 0
4342: PUSH
4343: LD_INT 0
4345: PUSH
4346: LD_INT 0
4348: PUSH
4349: LD_INT 0
4351: PUSH
4352: LD_INT 0
4354: PUSH
4355: LD_INT 0
4357: PUSH
4358: EMPTY
4359: LIST
4360: LIST
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4368: LD_ADDR_EXP 22
4372: PUSH
4373: LD_INT 0
4375: PUSH
4376: LD_INT 0
4378: PUSH
4379: LD_INT 0
4381: PUSH
4382: LD_INT 0
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: LD_INT 0
4396: PUSH
4397: EMPTY
4398: LIST
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4407: LD_ADDR_EXP 32
4411: PUSH
4412: LD_INT 0
4414: PUSH
4415: LD_INT 0
4417: PUSH
4418: LD_INT 0
4420: PUSH
4421: LD_INT 0
4423: PUSH
4424: LD_INT 0
4426: PUSH
4427: LD_INT 0
4429: PUSH
4430: LD_INT 0
4432: PUSH
4433: LD_INT 0
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: ST_TO_ADDR
// multi_teamgame := true ;
4446: LD_ADDR_EXP 23
4450: PUSH
4451: LD_INT 1
4453: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4454: LD_ADDR_EXP 21
4458: PUSH
4459: LD_INT 3
4461: PUSH
4462: EMPTY
4463: LIST
4464: ST_TO_ADDR
// multi_custom_commanders := true ;
4465: LD_ADDR_EXP 24
4469: PUSH
4470: LD_INT 1
4472: ST_TO_ADDR
// multi_commanders := [ ] ;
4473: LD_ADDR_EXP 31
4477: PUSH
4478: EMPTY
4479: ST_TO_ADDR
// multi_players_amount := 0 ;
4480: LD_ADDR_EXP 33
4484: PUSH
4485: LD_INT 0
4487: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4488: LD_ADDR_EXP 20
4492: PUSH
4493: LD_INT 3
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 4
4505: PUSH
4506: LD_INT 6
4508: PUSH
4509: EMPTY
4510: LIST
4511: LIST
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_depot , [ 112 , 145 , 2 ] ] , [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 99 , 54 , 3 ] ] , [ b_breastwork , [ 122 , 70 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 121 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4517: LD_ADDR_EXP 35
4521: PUSH
4522: LD_INT 0
4524: PUSH
4525: LD_INT 108
4527: PUSH
4528: LD_INT 110
4530: PUSH
4531: LD_INT 2
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: PUSH
4543: LD_INT 32
4545: PUSH
4546: LD_INT 117
4548: PUSH
4549: LD_INT 101
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: LIST
4559: PUSH
4560: LD_INT 44
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 32
4570: PUSH
4571: LD_INT 124
4573: PUSH
4574: LD_INT 107
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_INT 43
4587: PUSH
4588: EMPTY
4589: LIST
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 32
4595: PUSH
4596: LD_INT 94
4598: PUSH
4599: LD_INT 114
4601: PUSH
4602: LD_INT 1
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 44
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: PUSH
4618: LD_INT 32
4620: PUSH
4621: LD_INT 110
4623: PUSH
4624: LD_INT 94
4626: PUSH
4627: LD_INT 4
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: LIST
4634: PUSH
4635: LD_INT 44
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: LIST
4642: PUSH
4643: LD_INT 29
4645: PUSH
4646: LD_INT 126
4648: PUSH
4649: LD_INT 124
4651: PUSH
4652: LD_INT 5
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: PUSH
4664: LD_INT 26
4666: PUSH
4667: LD_INT 101
4669: PUSH
4670: LD_INT 115
4672: PUSH
4673: LD_INT 0
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 26
4687: PUSH
4688: LD_INT 125
4690: PUSH
4691: LD_INT 121
4693: PUSH
4694: LD_INT 3
4696: PUSH
4697: EMPTY
4698: LIST
4699: LIST
4700: LIST
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: PUSH
4706: LD_INT 3
4708: PUSH
4709: LD_INT 109
4711: PUSH
4712: LD_INT 126
4714: PUSH
4715: LD_INT 0
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: LIST
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: PUSH
4727: LD_INT 17
4729: PUSH
4730: LD_INT 112
4732: PUSH
4733: LD_INT 129
4735: PUSH
4736: LD_INT 5
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: PUSH
4760: LD_INT 0
4762: PUSH
4763: LD_INT 112
4765: PUSH
4766: LD_INT 145
4768: PUSH
4769: LD_INT 2
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: LD_INT 31
4783: PUSH
4784: LD_INT 95
4786: PUSH
4787: LD_INT 36
4789: PUSH
4790: LD_INT 4
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 31
4804: PUSH
4805: LD_INT 116
4807: PUSH
4808: LD_INT 66
4810: PUSH
4811: LD_INT 3
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: LIST
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 31
4825: PUSH
4826: LD_INT 99
4828: PUSH
4829: LD_INT 54
4831: PUSH
4832: LD_INT 3
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: EMPTY
4841: LIST
4842: LIST
4843: PUSH
4844: LD_INT 31
4846: PUSH
4847: LD_INT 122
4849: PUSH
4850: LD_INT 70
4852: PUSH
4853: LD_INT 3
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 31
4867: PUSH
4868: LD_INT 157
4870: PUSH
4871: LD_INT 159
4873: PUSH
4874: LD_INT 4
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: LD_INT 31
4888: PUSH
4889: LD_INT 75
4891: PUSH
4892: LD_INT 88
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 31
4909: PUSH
4910: LD_INT 63
4912: PUSH
4913: LD_INT 82
4915: PUSH
4916: LD_INT 3
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: LD_INT 31
4930: PUSH
4931: LD_INT 121
4933: PUSH
4934: LD_INT 147
4936: PUSH
4937: LD_INT 4
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 2
4951: PUSH
4952: LD_INT 124
4954: PUSH
4955: LD_INT 164
4957: PUSH
4958: LD_INT 5
4960: PUSH
4961: EMPTY
4962: LIST
4963: LIST
4964: LIST
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: LD_INT 129
4975: PUSH
4976: LD_INT 159
4978: PUSH
4979: LD_INT 4
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: PUSH
5004: EMPTY
5005: PUSH
5006: EMPTY
5007: PUSH
5008: EMPTY
5009: PUSH
5010: EMPTY
5011: PUSH
5012: EMPTY
5013: PUSH
5014: EMPTY
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5026: LD_ADDR_EXP 30
5030: PUSH
5031: EMPTY
5032: PUSH
5033: LD_INT 21
5035: PUSH
5036: LD_INT 1
5038: PUSH
5039: LD_INT 1
5041: PUSH
5042: LD_INT 42
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 22
5053: PUSH
5054: LD_INT 1
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: LD_INT 51
5062: PUSH
5063: EMPTY
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 22
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: LD_INT 1
5077: PUSH
5078: LD_INT 44
5080: PUSH
5081: LD_INT 43
5083: PUSH
5084: LD_INT 42
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_OWVAR 67
5096: ARRAY
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 22
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: LD_INT 44
5115: PUSH
5116: LD_INT 43
5118: PUSH
5119: LD_INT 42
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: LIST
5126: PUSH
5127: LD_OWVAR 67
5131: ARRAY
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 1
5144: PUSH
5145: LD_INT 1
5147: PUSH
5148: LD_INT 44
5150: PUSH
5151: LD_INT 43
5153: PUSH
5154: LD_INT 42
5156: PUSH
5157: EMPTY
5158: LIST
5159: LIST
5160: LIST
5161: PUSH
5162: LD_OWVAR 67
5166: ARRAY
5167: PUSH
5168: EMPTY
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: PUSH
5181: EMPTY
5182: PUSH
5183: EMPTY
5184: PUSH
5185: EMPTY
5186: PUSH
5187: EMPTY
5188: PUSH
5189: EMPTY
5190: PUSH
5191: EMPTY
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: LIST
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: ST_TO_ADDR
// for i := 1 to 8 do
5203: LD_ADDR_VAR 0 2
5207: PUSH
5208: DOUBLE
5209: LD_INT 1
5211: DEC
5212: ST_TO_ADDR
5213: LD_INT 8
5215: PUSH
5216: FOR_TO
5217: IFFALSE 5552
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5219: LD_VAR 0 2
5223: PPUSH
5224: CALL_OW 530
5228: IFFALSE 5386
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5230: LD_ADDR_EXP 19
5234: PUSH
5235: LD_EXP 19
5239: PPUSH
5240: LD_VAR 0 2
5244: PPUSH
5245: LD_INT 1
5247: PPUSH
5248: CALL_OW 1
5252: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5253: LD_ADDR_EXP 17
5257: PUSH
5258: LD_EXP 17
5262: PPUSH
5263: LD_VAR 0 2
5267: PPUSH
5268: LD_INT 0
5270: PPUSH
5271: CALL_OW 1
5275: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5276: LD_ADDR_EXP 15
5280: PUSH
5281: LD_EXP 15
5285: PPUSH
5286: LD_VAR 0 2
5290: PPUSH
5291: LD_INT 0
5293: PPUSH
5294: CALL_OW 1
5298: ST_TO_ADDR
// for j = 1 to multi_teams do
5299: LD_ADDR_VAR 0 3
5303: PUSH
5304: DOUBLE
5305: LD_INT 1
5307: DEC
5308: ST_TO_ADDR
5309: LD_EXP 18
5313: PUSH
5314: FOR_TO
5315: IFFALSE 5384
// begin if i in multi_teams [ j ] then
5317: LD_VAR 0 2
5321: PUSH
5322: LD_EXP 18
5326: PUSH
5327: LD_VAR 0 3
5331: ARRAY
5332: IN
5333: IFFALSE 5382
// begin tmp := multi_teams [ j ] diff i ;
5335: LD_ADDR_VAR 0 5
5339: PUSH
5340: LD_EXP 18
5344: PUSH
5345: LD_VAR 0 3
5349: ARRAY
5350: PUSH
5351: LD_VAR 0 2
5355: DIFF
5356: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5357: LD_ADDR_EXP 18
5361: PUSH
5362: LD_EXP 18
5366: PPUSH
5367: LD_VAR 0 3
5371: PPUSH
5372: LD_VAR 0 5
5376: PPUSH
5377: CALL_OW 1
5381: ST_TO_ADDR
// end ; end ;
5382: GO 5314
5384: POP
5385: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5386: LD_EXP 17
5390: PUSH
5391: LD_VAR 0 2
5395: ARRAY
5396: IFFALSE 5417
5398: PUSH
5399: LD_EXP 17
5403: PUSH
5404: LD_VAR 0 2
5408: ARRAY
5409: PUSH
5410: LD_EXP 21
5414: IN
5415: NOT
5416: AND
5417: IFFALSE 5458
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5419: LD_ADDR_EXP 17
5423: PUSH
5424: LD_EXP 17
5428: PPUSH
5429: LD_VAR 0 2
5433: PPUSH
5434: LD_EXP 21
5438: PUSH
5439: LD_INT 1
5441: PPUSH
5442: LD_EXP 21
5446: PPUSH
5447: CALL_OW 12
5451: ARRAY
5452: PPUSH
5453: CALL_OW 1
5457: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5458: LD_EXP 17
5462: PUSH
5463: LD_VAR 0 2
5467: ARRAY
5468: NOT
5469: IFFALSE 5484
5471: PUSH
5472: LD_EXP 15
5476: PUSH
5477: LD_VAR 0 2
5481: ARRAY
5482: NOT
5483: AND
5484: IFFALSE 5499
5486: PUSH
5487: LD_EXP 19
5491: PUSH
5492: LD_VAR 0 2
5496: ARRAY
5497: NOT
5498: AND
5499: IFFALSE 5524
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5501: LD_ADDR_EXP 22
5505: PUSH
5506: LD_EXP 22
5510: PPUSH
5511: LD_VAR 0 2
5515: PPUSH
5516: LD_INT 1
5518: PPUSH
5519: CALL_OW 1
5523: ST_TO_ADDR
// if multi_sides [ i ] then
5524: LD_EXP 15
5528: PUSH
5529: LD_VAR 0 2
5533: ARRAY
5534: IFFALSE 5550
// multi_players_amount := multi_players_amount + 1 ;
5536: LD_ADDR_EXP 33
5540: PUSH
5541: LD_EXP 33
5545: PUSH
5546: LD_INT 1
5548: PLUS
5549: ST_TO_ADDR
// end ;
5550: GO 5216
5552: POP
5553: POP
// for i in multi_teams do
5554: LD_ADDR_VAR 0 2
5558: PUSH
5559: LD_EXP 18
5563: PUSH
5564: FOR_IN
5565: IFFALSE 5673
// begin for j = 2 to i do
5567: LD_ADDR_VAR 0 3
5571: PUSH
5572: DOUBLE
5573: LD_INT 2
5575: DEC
5576: ST_TO_ADDR
5577: LD_VAR 0 2
5581: PUSH
5582: FOR_TO
5583: IFFALSE 5669
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5585: LD_VAR 0 2
5589: PUSH
5590: LD_VAR 0 3
5594: ARRAY
5595: PPUSH
5596: LD_VAR 0 2
5600: PUSH
5601: LD_INT 1
5603: ARRAY
5604: PPUSH
5605: CALL_OW 343
// for x = 1 to j - 1 do
5609: LD_ADDR_VAR 0 4
5613: PUSH
5614: DOUBLE
5615: LD_INT 1
5617: DEC
5618: ST_TO_ADDR
5619: LD_VAR 0 3
5623: PUSH
5624: LD_INT 1
5626: MINUS
5627: PUSH
5628: FOR_TO
5629: IFFALSE 5665
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5631: LD_VAR 0 2
5635: PUSH
5636: LD_VAR 0 3
5640: ARRAY
5641: PPUSH
5642: LD_VAR 0 2
5646: PUSH
5647: LD_VAR 0 4
5651: ARRAY
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: LD_INT 1
5658: PPUSH
5659: CALL_OW 80
5663: GO 5628
5665: POP
5666: POP
// end ;
5667: GO 5582
5669: POP
5670: POP
// end ;
5671: GO 5564
5673: POP
5674: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5675: LD_ADDR_OWVAR 67
5679: PUSH
5680: LD_INT 1
5682: PUSH
5683: LD_INT 2
5685: PUSH
5686: LD_INT 3
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: LIST
5693: PUSH
5694: LD_EXP 25
5698: PUSH
5699: LD_INT 1
5701: ARRAY
5702: ARRAY
5703: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5704: LD_ADDR_EXP 27
5708: PUSH
5709: LD_INT 9
5711: PUSH
5712: LD_INT 12
5714: PUSH
5715: LD_INT 15
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: LIST
5722: PUSH
5723: LD_EXP 25
5727: PUSH
5728: LD_INT 2
5730: ARRAY
5731: ARRAY
5732: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5733: LD_ADDR_EXP 28
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 4
5746: PUSH
5747: LD_INT 6
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PUSH
5756: LD_EXP 25
5760: PUSH
5761: LD_INT 3
5763: ARRAY
5764: ARRAY
5765: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5766: LD_ADDR_EXP 34
5770: PUSH
5771: LD_INT 3500
5773: PUSH
5774: LD_INT 5000
5776: PUSH
5777: LD_INT 7500
5779: PUSH
5780: LD_INT 10000
5782: PUSH
5783: LD_INT 15000
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: PUSH
5793: LD_EXP 25
5797: PUSH
5798: LD_INT 4
5800: ARRAY
5801: ARRAY
5802: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5803: LD_ADDR_EXP 29
5807: PUSH
5808: LD_INT 1000
5810: PUSH
5811: LD_INT 1260
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 2000
5820: PUSH
5821: LD_INT 1050
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 3000
5830: PUSH
5831: LD_INT 840
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PUSH
5838: LD_INT 4000
5840: PUSH
5841: LD_INT 630
5843: PUSH
5844: EMPTY
5845: LIST
5846: LIST
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: PUSH
5854: LD_EXP 25
5858: PUSH
5859: LD_INT 5
5861: ARRAY
5862: ARRAY
5863: ST_TO_ADDR
// end ;
5864: LD_VAR 0 1
5868: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5869: LD_INT 0
5871: PPUSH
5872: PPUSH
// if not multi_sides [ preferSide ] then
5873: LD_EXP 15
5877: PUSH
5878: LD_VAR 0 1
5882: ARRAY
5883: NOT
5884: IFFALSE 5898
// begin result := preferSide ;
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 1
5895: ST_TO_ADDR
// exit ;
5896: GO 5945
// end ; for i := 1 to 8 do
5898: LD_ADDR_VAR 0 3
5902: PUSH
5903: DOUBLE
5904: LD_INT 1
5906: DEC
5907: ST_TO_ADDR
5908: LD_INT 8
5910: PUSH
5911: FOR_TO
5912: IFFALSE 5943
// if not multi_sides [ i ] then
5914: LD_EXP 15
5918: PUSH
5919: LD_VAR 0 3
5923: ARRAY
5924: NOT
5925: IFFALSE 5941
// begin result := i ;
5927: LD_ADDR_VAR 0 2
5931: PUSH
5932: LD_VAR 0 3
5936: ST_TO_ADDR
// exit ;
5937: POP
5938: POP
5939: GO 5945
// end ;
5941: GO 5911
5943: POP
5944: POP
// end ;
5945: LD_VAR 0 2
5949: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5950: LD_INT 0
5952: PPUSH
// uc_side := side ;
5953: LD_ADDR_OWVAR 20
5957: PUSH
5958: LD_VAR 0 1
5962: ST_TO_ADDR
// uc_nation := nation_russian ;
5963: LD_ADDR_OWVAR 21
5967: PUSH
5968: LD_INT 3
5970: ST_TO_ADDR
// hc_importance := 100 ;
5971: LD_ADDR_OWVAR 32
5975: PUSH
5976: LD_INT 100
5978: ST_TO_ADDR
// if num = 1 then
5979: LD_VAR 0 2
5983: PUSH
5984: LD_INT 1
5986: EQUAL
5987: IFFALSE 6054
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5989: LD_INT 1
5991: PPUSH
5992: LD_EXP 28
5996: PUSH
5997: LD_INT 1
5999: PLUS
6000: PPUSH
6001: CALL_OW 381
// hc_gallery := ru ;
6005: LD_ADDR_OWVAR 33
6009: PUSH
6010: LD_STRING ru
6012: ST_TO_ADDR
// hc_face_number := 13 ;
6013: LD_ADDR_OWVAR 34
6017: PUSH
6018: LD_INT 13
6020: ST_TO_ADDR
// hc_name := Kuzmov ;
6021: LD_ADDR_OWVAR 26
6025: PUSH
6026: LD_STRING Kuzmov
6028: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
6029: LD_ADDR_OWVAR 29
6033: PUSH
6034: LD_INT 11
6036: PUSH
6037: LD_INT 11
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: ST_TO_ADDR
// result := CreateHuman ;
6044: LD_ADDR_VAR 0 3
6048: PUSH
6049: CALL_OW 44
6053: ST_TO_ADDR
// end ; if num = 2 then
6054: LD_VAR 0 2
6058: PUSH
6059: LD_INT 2
6061: EQUAL
6062: IFFALSE 6129
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
6064: LD_INT 1
6066: PPUSH
6067: LD_EXP 28
6071: PUSH
6072: LD_INT 2
6074: PLUS
6075: PPUSH
6076: CALL_OW 383
// hc_gallery := ru ;
6080: LD_ADDR_OWVAR 33
6084: PUSH
6085: LD_STRING ru
6087: ST_TO_ADDR
// hc_face_number := 1 ;
6088: LD_ADDR_OWVAR 34
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// hc_name := Burlak ;
6096: LD_ADDR_OWVAR 26
6100: PUSH
6101: LD_STRING Burlak
6103: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6104: LD_ADDR_OWVAR 29
6108: PUSH
6109: LD_INT 10
6111: PUSH
6112: LD_INT 11
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: ST_TO_ADDR
// result := CreateHuman ;
6119: LD_ADDR_VAR 0 3
6123: PUSH
6124: CALL_OW 44
6128: ST_TO_ADDR
// end ; end ;
6129: LD_VAR 0 3
6133: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
6134: LD_INT 0
6136: PPUSH
6137: PPUSH
6138: PPUSH
6139: PPUSH
6140: PPUSH
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// for i := 1 to 8 do
6146: LD_ADDR_VAR 0 2
6150: PUSH
6151: DOUBLE
6152: LD_INT 1
6154: DEC
6155: ST_TO_ADDR
6156: LD_INT 8
6158: PUSH
6159: FOR_TO
6160: IFFALSE 7592
// begin if not multi_sides [ i ] then
6162: LD_EXP 15
6166: PUSH
6167: LD_VAR 0 2
6171: ARRAY
6172: NOT
6173: IFFALSE 6177
// continue ;
6175: GO 6159
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
6177: LD_ADDR_VAR 0 8
6181: PUSH
6182: LD_EXP 30
6186: PUSH
6187: LD_EXP 15
6191: PUSH
6192: LD_VAR 0 2
6196: ARRAY
6197: ARRAY
6198: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
6199: LD_EXP 35
6203: PUSH
6204: LD_EXP 15
6208: PUSH
6209: LD_VAR 0 2
6213: ARRAY
6214: ARRAY
6215: IFFALSE 6512
// begin uc_side := i ;
6217: LD_ADDR_OWVAR 20
6221: PUSH
6222: LD_VAR 0 2
6226: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6227: LD_ADDR_OWVAR 21
6231: PUSH
6232: LD_EXP 17
6236: PUSH
6237: LD_VAR 0 2
6241: ARRAY
6242: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6243: LD_ADDR_VAR 0 3
6247: PUSH
6248: LD_EXP 35
6252: PUSH
6253: LD_EXP 15
6257: PUSH
6258: LD_VAR 0 2
6262: ARRAY
6263: ARRAY
6264: PUSH
6265: FOR_IN
6266: IFFALSE 6510
// begin if j [ 1 ] = b_oil_mine then
6268: LD_VAR 0 3
6272: PUSH
6273: LD_INT 1
6275: ARRAY
6276: PUSH
6277: LD_INT 29
6279: EQUAL
6280: IFFALSE 6317
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6282: LD_VAR 0 3
6286: PUSH
6287: LD_INT 2
6289: ARRAY
6290: PUSH
6291: LD_INT 1
6293: ARRAY
6294: PPUSH
6295: LD_VAR 0 3
6299: PUSH
6300: LD_INT 2
6302: ARRAY
6303: PUSH
6304: LD_INT 2
6306: ARRAY
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 441
// bc_type := j [ 1 ] ;
6317: LD_ADDR_OWVAR 42
6321: PUSH
6322: LD_VAR 0 3
6326: PUSH
6327: LD_INT 1
6329: ARRAY
6330: ST_TO_ADDR
// bc_level := 3 ;
6331: LD_ADDR_OWVAR 43
6335: PUSH
6336: LD_INT 3
6338: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6339: LD_ADDR_VAR 0 4
6343: PUSH
6344: LD_VAR 0 3
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PUSH
6353: LD_INT 1
6355: ARRAY
6356: PPUSH
6357: LD_VAR 0 3
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PUSH
6366: LD_INT 2
6368: ARRAY
6369: PPUSH
6370: LD_VAR 0 3
6374: PUSH
6375: LD_INT 2
6377: ARRAY
6378: PUSH
6379: LD_INT 3
6381: ARRAY
6382: PPUSH
6383: CALL_OW 47
6387: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6388: LD_VAR 0 3
6392: PUSH
6393: LD_INT 1
6395: ARRAY
6396: PUSH
6397: LD_INT 0
6399: EQUAL
6400: IFFALSE 6476
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6402: LD_VAR 0 4
6406: PPUSH
6407: CALL_OW 274
6411: PPUSH
6412: LD_INT 1
6414: PPUSH
6415: LD_INT 450
6417: PUSH
6418: LD_INT 350
6420: PUSH
6421: LD_INT 230
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: PUSH
6429: LD_OWVAR 67
6433: ARRAY
6434: PPUSH
6435: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6439: LD_VAR 0 4
6443: PPUSH
6444: CALL_OW 274
6448: PPUSH
6449: LD_INT 2
6451: PPUSH
6452: LD_INT 90
6454: PUSH
6455: LD_INT 60
6457: PUSH
6458: LD_INT 40
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: PUSH
6466: LD_OWVAR 67
6470: ARRAY
6471: PPUSH
6472: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PUSH
6485: LD_INT 32
6487: EQUAL
6488: IFFALSE 6508
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6490: LD_VAR 0 4
6494: PPUSH
6495: LD_VAR 0 3
6499: PUSH
6500: LD_INT 3
6502: ARRAY
6503: PPUSH
6504: CALL_OW 431
// end ;
6508: GO 6265
6510: POP
6511: POP
// end ; if multi_custom_commanders then
6512: LD_EXP 24
6516: IFFALSE 6733
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6518: LD_ADDR_VAR 0 6
6522: PUSH
6523: LD_VAR 0 2
6527: PPUSH
6528: LD_EXP 15
6532: PUSH
6533: LD_VAR 0 2
6537: ARRAY
6538: PPUSH
6539: CALL 5950 0 2
6543: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6544: LD_ADDR_EXP 31
6548: PUSH
6549: LD_EXP 31
6553: PPUSH
6554: LD_EXP 31
6558: PUSH
6559: LD_INT 1
6561: PLUS
6562: PPUSH
6563: LD_VAR 0 6
6567: PPUSH
6568: CALL_OW 2
6572: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6573: LD_VAR 0 6
6577: PPUSH
6578: CALL_OW 257
6582: PUSH
6583: LD_INT 3
6585: EQUAL
6586: IFFALSE 6698
// begin uc_nation := nation_russian ;
6588: LD_ADDR_OWVAR 21
6592: PUSH
6593: LD_INT 3
6595: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6596: LD_INT 23
6598: PPUSH
6599: LD_INT 1
6601: PPUSH
6602: LD_INT 1
6604: PPUSH
6605: LD_INT 44
6607: PPUSH
6608: LD_INT 80
6610: PPUSH
6611: CALL 20736 0 5
// veh := CreateVehicle ;
6615: LD_ADDR_VAR 0 7
6619: PUSH
6620: CALL_OW 45
6624: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6625: LD_VAR 0 7
6629: PPUSH
6630: LD_VAR 0 6
6634: PPUSH
6635: CALL_OW 255
6639: PUSH
6640: LD_INT 1
6642: NEG
6643: MUL
6644: PPUSH
6645: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6649: LD_VAR 0 7
6653: PPUSH
6654: LD_EXP 20
6658: PUSH
6659: LD_EXP 15
6663: PUSH
6664: LD_VAR 0 2
6668: ARRAY
6669: ARRAY
6670: PUSH
6671: LD_INT 2
6673: ARRAY
6674: PPUSH
6675: LD_INT 0
6677: PPUSH
6678: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6682: LD_VAR 0 6
6686: PPUSH
6687: LD_VAR 0 7
6691: PPUSH
6692: CALL_OW 52
// end else
6696: GO 6731
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6698: LD_VAR 0 6
6702: PPUSH
6703: LD_EXP 20
6707: PUSH
6708: LD_EXP 15
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: ARRAY
6719: PUSH
6720: LD_INT 1
6722: ARRAY
6723: PPUSH
6724: LD_INT 0
6726: PPUSH
6727: CALL_OW 49
// end else
6731: GO 6944
// begin uc_side := i ;
6733: LD_ADDR_OWVAR 20
6737: PUSH
6738: LD_VAR 0 2
6742: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6743: LD_ADDR_OWVAR 21
6747: PUSH
6748: LD_EXP 17
6752: PUSH
6753: LD_VAR 0 2
6757: ARRAY
6758: ST_TO_ADDR
// hc_importance := 100 ;
6759: LD_ADDR_OWVAR 32
6763: PUSH
6764: LD_INT 100
6766: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6767: LD_INT 0
6769: PPUSH
6770: LD_INT 1
6772: PPUSH
6773: LD_EXP 28
6777: PPUSH
6778: CALL_OW 380
// if multiplayer then
6782: LD_OWVAR 4
6786: IFFALSE 6844
// begin hc_name := mp_sides_players_names [ i ] ;
6788: LD_ADDR_OWVAR 26
6792: PUSH
6793: LD_OWVAR 19
6797: PUSH
6798: LD_VAR 0 2
6802: ARRAY
6803: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6804: LD_ADDR_OWVAR 33
6808: PUSH
6809: LD_STRING MULTIAVATARS
6811: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6812: LD_ADDR_OWVAR 34
6816: PUSH
6817: LD_VAR 0 2
6821: PPUSH
6822: CALL_OW 525
6826: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6827: LD_ADDR_OWVAR 27
6831: PUSH
6832: LD_VAR 0 2
6836: PPUSH
6837: CALL_OW 526
6841: ST_TO_ADDR
// end else
6842: GO 6876
// begin hc_gallery :=  ;
6844: LD_ADDR_OWVAR 33
6848: PUSH
6849: LD_STRING 
6851: ST_TO_ADDR
// hc_name :=  ;
6852: LD_ADDR_OWVAR 26
6856: PUSH
6857: LD_STRING 
6859: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6860: LD_ADDR_OWVAR 27
6864: PUSH
6865: LD_INT 1
6867: PPUSH
6868: LD_INT 2
6870: PPUSH
6871: CALL_OW 12
6875: ST_TO_ADDR
// end ; un := CreateHuman ;
6876: LD_ADDR_VAR 0 6
6880: PUSH
6881: CALL_OW 44
6885: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6886: LD_VAR 0 6
6890: PPUSH
6891: LD_EXP 20
6895: PUSH
6896: LD_EXP 15
6900: PUSH
6901: LD_VAR 0 2
6905: ARRAY
6906: ARRAY
6907: PUSH
6908: LD_INT 1
6910: ARRAY
6911: PPUSH
6912: LD_INT 0
6914: PPUSH
6915: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6919: LD_ADDR_EXP 31
6923: PUSH
6924: LD_EXP 31
6928: PPUSH
6929: LD_VAR 0 2
6933: PPUSH
6934: LD_VAR 0 6
6938: PPUSH
6939: CALL_OW 1
6943: ST_TO_ADDR
// end ; InitHc ;
6944: CALL_OW 19
// InitUc ;
6948: CALL_OW 18
// uc_side := i ;
6952: LD_ADDR_OWVAR 20
6956: PUSH
6957: LD_VAR 0 2
6961: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6962: LD_ADDR_OWVAR 21
6966: PUSH
6967: LD_EXP 17
6971: PUSH
6972: LD_VAR 0 2
6976: ARRAY
6977: ST_TO_ADDR
// hc_gallery :=  ;
6978: LD_ADDR_OWVAR 33
6982: PUSH
6983: LD_STRING 
6985: ST_TO_ADDR
// hc_name :=  ;
6986: LD_ADDR_OWVAR 26
6990: PUSH
6991: LD_STRING 
6993: ST_TO_ADDR
// hc_importance := 0 ;
6994: LD_ADDR_OWVAR 32
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// cl := 1 ;
7002: LD_ADDR_VAR 0 5
7006: PUSH
7007: LD_INT 1
7009: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
7010: LD_ADDR_VAR 0 3
7014: PUSH
7015: DOUBLE
7016: LD_INT 2
7018: DEC
7019: ST_TO_ADDR
7020: LD_EXP 27
7024: PUSH
7025: FOR_TO
7026: IFFALSE 7588
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
7028: LD_VAR 0 3
7032: PUSH
7033: LD_INT 1
7035: MINUS
7036: PUSH
7037: LD_EXP 27
7041: PUSH
7042: LD_INT 1
7044: MINUS
7045: PUSH
7046: LD_INT 4
7048: DIVREAL
7049: MOD
7050: PUSH
7051: LD_INT 0
7053: EQUAL
7054: IFFALSE 7070
// cl := cl + 1 ;
7056: LD_ADDR_VAR 0 5
7060: PUSH
7061: LD_VAR 0 5
7065: PUSH
7066: LD_INT 1
7068: PLUS
7069: ST_TO_ADDR
// if cl > 4 then
7070: LD_VAR 0 5
7074: PUSH
7075: LD_INT 4
7077: GREATER
7078: IFFALSE 7088
// cl := 1 ;
7080: LD_ADDR_VAR 0 5
7084: PUSH
7085: LD_INT 1
7087: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
7088: LD_EXP 15
7092: PUSH
7093: LD_VAR 0 2
7097: ARRAY
7098: PUSH
7099: LD_INT 2
7101: EQUAL
7102: IFFALSE 7164
7104: PUSH
7105: LD_VAR 0 5
7109: PUSH
7110: LD_INT 2
7112: EQUAL
7113: IFTRUE 7163
7115: PUSH
7116: LD_VAR 0 5
7120: PUSH
7121: LD_INT 4
7123: EQUAL
7124: IFFALSE 7162
7126: PUSH
7127: LD_INT 22
7129: PUSH
7130: LD_VAR 0 2
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 4
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PPUSH
7153: CALL_OW 69
7157: PUSH
7158: LD_INT 1
7160: GREATER
7161: AND
7162: OR
7163: AND
7164: IFFALSE 7183
// PrepareHuman ( false , 1 , multi_skill_level ) else
7166: LD_INT 0
7168: PPUSH
7169: LD_INT 1
7171: PPUSH
7172: LD_EXP 28
7176: PPUSH
7177: CALL_OW 380
7181: GO 7200
// PrepareHuman ( false , cl , multi_skill_level ) ;
7183: LD_INT 0
7185: PPUSH
7186: LD_VAR 0 5
7190: PPUSH
7191: LD_EXP 28
7195: PPUSH
7196: CALL_OW 380
// un := CreateHuman ;
7200: LD_ADDR_VAR 0 6
7204: PUSH
7205: CALL_OW 44
7209: ST_TO_ADDR
// if multi_pos_area then
7210: LD_EXP 20
7214: IFFALSE 7586
// begin if GetClass ( un ) = 3 and vehicles then
7216: LD_VAR 0 6
7220: PPUSH
7221: CALL_OW 257
7225: PUSH
7226: LD_INT 3
7228: EQUAL
7229: IFFALSE 7237
7231: PUSH
7232: LD_VAR 0 8
7236: AND
7237: IFFALSE 7422
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
7239: LD_VAR 0 8
7243: PUSH
7244: LD_INT 1
7246: ARRAY
7247: PUSH
7248: LD_INT 1
7250: ARRAY
7251: PPUSH
7252: LD_VAR 0 8
7256: PUSH
7257: LD_INT 1
7259: ARRAY
7260: PUSH
7261: LD_INT 2
7263: ARRAY
7264: PPUSH
7265: LD_VAR 0 8
7269: PUSH
7270: LD_INT 1
7272: ARRAY
7273: PUSH
7274: LD_INT 3
7276: ARRAY
7277: PPUSH
7278: LD_VAR 0 8
7282: PUSH
7283: LD_INT 1
7285: ARRAY
7286: PUSH
7287: LD_INT 4
7289: ARRAY
7290: PPUSH
7291: LD_INT 80
7293: PUSH
7294: LD_INT 60
7296: PUSH
7297: LD_INT 40
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: LD_OWVAR 67
7309: ARRAY
7310: PPUSH
7311: CALL 20736 0 5
// veh := CreateVehicle ;
7315: LD_ADDR_VAR 0 7
7319: PUSH
7320: CALL_OW 45
7324: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7325: LD_VAR 0 7
7329: PPUSH
7330: LD_EXP 20
7334: PUSH
7335: LD_EXP 15
7339: PUSH
7340: LD_VAR 0 2
7344: ARRAY
7345: ARRAY
7346: PUSH
7347: LD_INT 2
7349: ARRAY
7350: PPUSH
7351: LD_INT 0
7353: PPUSH
7354: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7358: LD_VAR 0 6
7362: PPUSH
7363: LD_VAR 0 7
7367: PPUSH
7368: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7372: LD_VAR 0 7
7376: PPUSH
7377: CALL_OW 264
7381: PUSH
7382: LD_INT 51
7384: EQUAL
7385: IFFALSE 7402
// SetCargo ( veh , mat_oil , 60 ) ;
7387: LD_VAR 0 7
7391: PPUSH
7392: LD_INT 2
7394: PPUSH
7395: LD_INT 60
7397: PPUSH
7398: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7402: LD_ADDR_VAR 0 8
7406: PUSH
7407: LD_VAR 0 8
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 3
7419: ST_TO_ADDR
// continue ;
7420: GO 7025
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7422: LD_ADDR_VAR 0 9
7426: PUSH
7427: LD_INT 22
7429: PUSH
7430: LD_VAR 0 2
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 2
7441: PUSH
7442: LD_INT 30
7444: PUSH
7445: LD_INT 32
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 30
7454: PUSH
7455: LD_INT 31
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PUSH
7467: LD_INT 58
7469: PUSH
7470: EMPTY
7471: LIST
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: LIST
7477: PPUSH
7478: CALL_OW 69
7482: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7483: LD_VAR 0 6
7487: PPUSH
7488: CALL_OW 257
7492: PUSH
7493: LD_INT 1
7495: EQUAL
7496: IFFALSE 7504
7498: PUSH
7499: LD_VAR 0 9
7503: AND
7504: IFFALSE 7553
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7506: LD_VAR 0 6
7510: PPUSH
7511: LD_VAR 0 9
7515: PUSH
7516: LD_INT 1
7518: ARRAY
7519: PPUSH
7520: CALL_OW 254
7524: PUSH
7525: LD_INT 3
7527: MINUS
7528: PPUSH
7529: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7533: LD_VAR 0 6
7537: PPUSH
7538: LD_VAR 0 9
7542: PUSH
7543: LD_INT 1
7545: ARRAY
7546: PPUSH
7547: CALL_OW 52
// continue ;
7551: GO 7025
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7553: LD_VAR 0 6
7557: PPUSH
7558: LD_EXP 20
7562: PUSH
7563: LD_EXP 15
7567: PUSH
7568: LD_VAR 0 2
7572: ARRAY
7573: ARRAY
7574: PUSH
7575: LD_INT 1
7577: ARRAY
7578: PPUSH
7579: LD_INT 0
7581: PPUSH
7582: CALL_OW 49
// end ; end ;
7586: GO 7025
7588: POP
7589: POP
// end ;
7590: GO 6159
7592: POP
7593: POP
// end ;
7594: LD_VAR 0 1
7598: RET
// export function Multiplayer_Start ( ) ; begin
7599: LD_INT 0
7601: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7602: CALL 6134 0 0
// Multiplayer_InitPointSystem ( ) ;
7606: CALL 8323 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7610: LD_INT 20
7612: PPUSH
7613: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7617: LD_INT 150
7619: PPUSH
7620: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7624: LD_INT 5
7626: PPUSH
7627: CALL 8507 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7631: LD_INT 60
7633: NEG
7634: PPUSH
7635: CALL 8507 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7639: LD_INT 40
7641: NEG
7642: PPUSH
7643: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7647: LD_INT 2
7649: PPUSH
7650: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7654: LD_INT 110
7656: PPUSH
7657: CALL 8507 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7661: LD_INT 55
7663: PPUSH
7664: CALL 8507 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7668: LD_INT 1000
7670: NEG
7671: PPUSH
7672: CALL 8507 0 1
// if multi_sides [ your_side ] then
7676: LD_EXP 15
7680: PUSH
7681: LD_OWVAR 2
7685: ARRAY
7686: IFFALSE 7713
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7688: LD_INT 22
7690: PUSH
7691: LD_OWVAR 2
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PPUSH
7700: CALL_OW 69
7704: PUSH
7705: LD_INT 1
7707: ARRAY
7708: PPUSH
7709: CALL_OW 87
// end ;
7713: LD_VAR 0 1
7717: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
// repeat wait ( 0 0$1 ) ;
7724: LD_INT 35
7726: PPUSH
7727: CALL_OW 67
// points := 0 ;
7731: LD_ADDR_VAR 0 4
7735: PUSH
7736: LD_INT 0
7738: ST_TO_ADDR
// for i := 1 to 8 do
7739: LD_ADDR_VAR 0 2
7743: PUSH
7744: DOUBLE
7745: LD_INT 1
7747: DEC
7748: ST_TO_ADDR
7749: LD_INT 8
7751: PUSH
7752: FOR_TO
7753: IFFALSE 7779
// points := points + multi_points [ i ] ;
7755: LD_ADDR_VAR 0 4
7759: PUSH
7760: LD_VAR 0 4
7764: PUSH
7765: LD_EXP 38
7769: PUSH
7770: LD_VAR 0 2
7774: ARRAY
7775: PLUS
7776: ST_TO_ADDR
7777: GO 7752
7779: POP
7780: POP
// if not multi_custom_commanders then
7781: LD_EXP 24
7785: NOT
7786: IFFALSE 7901
// begin for i := 1 to 8 do
7788: LD_ADDR_VAR 0 2
7792: PUSH
7793: DOUBLE
7794: LD_INT 1
7796: DEC
7797: ST_TO_ADDR
7798: LD_INT 8
7800: PUSH
7801: FOR_TO
7802: IFFALSE 7875
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7804: LD_INT 22
7806: PUSH
7807: LD_VAR 0 2
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PPUSH
7816: CALL_OW 69
7820: PUSH
7821: LD_INT 0
7823: EQUAL
7824: IFFALSE 7839
7826: PUSH
7827: LD_EXP 32
7831: PUSH
7832: LD_VAR 0 2
7836: ARRAY
7837: NOT
7838: AND
7839: IFFALSE 7873
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7841: LD_ADDR_EXP 32
7845: PUSH
7846: LD_EXP 32
7850: PPUSH
7851: LD_VAR 0 2
7855: PPUSH
7856: LD_INT 1
7858: PPUSH
7859: CALL_OW 1
7863: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7864: LD_VAR 0 2
7868: PPUSH
7869: CALL 8577 0 1
// end ; end ;
7873: GO 7801
7875: POP
7876: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7877: LD_EXP 32
7881: PPUSH
7882: CALL 17940 0 1
7886: PUSH
7887: LD_EXP 15
7891: PPUSH
7892: CALL 17940 0 1
7896: EQUAL
7897: IFFALSE 7901
// break ;
7899: GO 7946
// end ; if points >= multi_points_to_victory then
7901: LD_VAR 0 4
7905: PUSH
7906: LD_EXP 34
7910: GREATEREQUAL
7911: IFFALSE 7923
// begin winAllowed := true ;
7913: LD_ADDR_EXP 3
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// break ;
7921: GO 7946
// end ; until ( winAllowed and game ) or not multi_commanders ;
7923: LD_EXP 3
7927: IFFALSE 7935
7929: PUSH
7930: LD_EXP 2
7934: AND
7935: IFTRUE 7944
7937: PUSH
7938: LD_EXP 31
7942: NOT
7943: OR
7944: IFFALSE 7724
// game := false ;
7946: LD_ADDR_EXP 2
7950: PUSH
7951: LD_INT 0
7953: ST_TO_ADDR
// for i := 1 to 8 do
7954: LD_ADDR_VAR 0 2
7958: PUSH
7959: DOUBLE
7960: LD_INT 1
7962: DEC
7963: ST_TO_ADDR
7964: LD_INT 8
7966: PUSH
7967: FOR_TO
7968: IFFALSE 8004
// begin if multi_sides [ i ] then
7970: LD_EXP 15
7974: PUSH
7975: LD_VAR 0 2
7979: ARRAY
7980: IFFALSE 8002
// SetMultiScore ( i , multi_points [ i ] ) ;
7982: LD_VAR 0 2
7986: PPUSH
7987: LD_EXP 38
7991: PUSH
7992: LD_VAR 0 2
7996: ARRAY
7997: PPUSH
7998: CALL_OW 506
// end ;
8002: GO 7967
8004: POP
8005: POP
// if multi_loosers [ your_side ] then
8006: LD_EXP 32
8010: PUSH
8011: LD_OWVAR 2
8015: ARRAY
8016: IFFALSE 8039
// begin if Multiplayer then
8018: LD_OWVAR 4
8022: IFFALSE 8030
// YouLostInMultiplayer else
8024: CALL_OW 107
8028: GO 8037
// YouLost (  ) ;
8030: LD_STRING 
8032: PPUSH
8033: CALL_OW 104
// end else
8037: GO 8055
// begin if Multiplayer then
8039: LD_OWVAR 4
8043: IFFALSE 8051
// YouWinInMultiplayer else
8045: CALL_OW 106
8049: GO 8055
// YouWin ;
8051: CALL_OW 103
// end ; end ;
8055: LD_VAR 0 1
8059: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// result := false ;
8064: LD_ADDR_VAR 0 1
8068: PUSH
8069: LD_INT 0
8071: ST_TO_ADDR
// for side in botSides do
8072: LD_ADDR_VAR 0 2
8076: PUSH
8077: LD_EXP 4
8081: PUSH
8082: FOR_IN
8083: IFFALSE 8144
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
8085: LD_ADDR_VAR 0 1
8089: PUSH
8090: LD_INT 22
8092: PUSH
8093: LD_VAR 0 2
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 21
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 50
8114: PUSH
8115: EMPTY
8116: LIST
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: PPUSH
8123: CALL_OW 69
8127: PUSH
8128: LD_INT 0
8130: GREATER
8131: ST_TO_ADDR
// if result then
8132: LD_VAR 0 1
8136: IFFALSE 8142
// exit ;
8138: POP
8139: POP
8140: GO 8146
// end ;
8142: GO 8082
8144: POP
8145: POP
// end ;
8146: LD_VAR 0 1
8150: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
8155: PPUSH
// result := [ ] ;
8156: LD_ADDR_VAR 0 1
8160: PUSH
8161: EMPTY
8162: ST_TO_ADDR
// points := 0 ;
8163: LD_ADDR_VAR 0 3
8167: PUSH
8168: LD_INT 0
8170: ST_TO_ADDR
// for i := 1 to 8 do
8171: LD_ADDR_VAR 0 2
8175: PUSH
8176: DOUBLE
8177: LD_INT 1
8179: DEC
8180: ST_TO_ADDR
8181: LD_INT 8
8183: PUSH
8184: FOR_TO
8185: IFFALSE 8264
// begin points := points + multi_points [ i ] ;
8187: LD_ADDR_VAR 0 3
8191: PUSH
8192: LD_VAR 0 3
8196: PUSH
8197: LD_EXP 38
8201: PUSH
8202: LD_VAR 0 2
8206: ARRAY
8207: PLUS
8208: ST_TO_ADDR
// if multi_sides [ i ] then
8209: LD_EXP 15
8213: PUSH
8214: LD_VAR 0 2
8218: ARRAY
8219: IFFALSE 8262
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8221: LD_ADDR_VAR 0 1
8225: PUSH
8226: LD_VAR 0 1
8230: PUSH
8231: LD_STRING #coop-points
8233: PUSH
8234: LD_VAR 0 2
8238: PUSH
8239: LD_VAR 0 2
8243: PUSH
8244: LD_EXP 38
8248: PUSH
8249: LD_VAR 0 2
8253: ARRAY
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: ADD
8261: ST_TO_ADDR
// end ; end ;
8262: GO 8184
8264: POP
8265: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8266: LD_ADDR_VAR 0 1
8270: PUSH
8271: LD_VAR 0 1
8275: PUSH
8276: LD_STRING #saved-convoys
8278: PUSH
8279: LD_EXP 5
8283: PUSH
8284: EMPTY
8285: LIST
8286: LIST
8287: ADD
8288: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8289: LD_ADDR_VAR 0 1
8293: PUSH
8294: LD_VAR 0 1
8298: PUSH
8299: LD_STRING #points-to-win
8301: PUSH
8302: LD_VAR 0 3
8306: PUSH
8307: LD_EXP 34
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: ADD
8317: ST_TO_ADDR
// end ;
8318: LD_VAR 0 1
8322: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8323: LD_INT 0
8325: PPUSH
8326: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8327: LD_ADDR_EXP 38
8331: PUSH
8332: LD_INT 0
8334: PUSH
8335: LD_INT 0
8337: PUSH
8338: LD_INT 0
8340: PUSH
8341: LD_INT 0
8343: PUSH
8344: LD_INT 0
8346: PUSH
8347: LD_INT 0
8349: PUSH
8350: LD_INT 0
8352: PUSH
8353: LD_INT 0
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8366: LD_ADDR_EXP 39
8370: PUSH
8371: EMPTY
8372: ST_TO_ADDR
// end ;
8373: LD_VAR 0 1
8377: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8378: LD_INT 0
8380: PPUSH
// if not multi_points or not side or side > 8 then
8381: LD_EXP 38
8385: NOT
8386: IFTRUE 8395
8388: PUSH
8389: LD_VAR 0 1
8393: NOT
8394: OR
8395: IFTRUE 8407
8397: PUSH
8398: LD_VAR 0 1
8402: PUSH
8403: LD_INT 8
8405: GREATER
8406: OR
8407: IFFALSE 8411
// exit ;
8409: GO 8448
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8411: LD_ADDR_EXP 38
8415: PUSH
8416: LD_EXP 38
8420: PPUSH
8421: LD_VAR 0 1
8425: PPUSH
8426: LD_EXP 38
8430: PUSH
8431: LD_VAR 0 1
8435: ARRAY
8436: PUSH
8437: LD_VAR 0 2
8441: PLUS
8442: PPUSH
8443: CALL_OW 1
8447: ST_TO_ADDR
// end ;
8448: LD_VAR 0 3
8452: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8453: LD_INT 0
8455: PPUSH
// if not multi_points or not side or side > 8 then
8456: LD_EXP 38
8460: NOT
8461: IFTRUE 8470
8463: PUSH
8464: LD_VAR 0 1
8468: NOT
8469: OR
8470: IFTRUE 8482
8472: PUSH
8473: LD_VAR 0 1
8477: PUSH
8478: LD_INT 8
8480: GREATER
8481: OR
8482: IFFALSE 8486
// exit ;
8484: GO 8502
// result := multi_points [ side ] ;
8486: LD_ADDR_VAR 0 2
8490: PUSH
8491: LD_EXP 38
8495: PUSH
8496: LD_VAR 0 1
8500: ARRAY
8501: ST_TO_ADDR
// end ;
8502: LD_VAR 0 2
8506: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8507: LD_INT 0
8509: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8510: LD_ADDR_EXP 39
8514: PUSH
8515: LD_EXP 39
8519: PPUSH
8520: LD_EXP 39
8524: PUSH
8525: LD_INT 1
8527: PLUS
8528: PPUSH
8529: LD_VAR 0 1
8533: PPUSH
8534: CALL_OW 1
8538: ST_TO_ADDR
// end ;
8539: LD_VAR 0 2
8543: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8544: LD_INT 0
8546: PPUSH
// if not id then
8547: LD_VAR 0 1
8551: NOT
8552: IFFALSE 8556
// exit ;
8554: GO 8572
// result := multi_points_conditions [ id ] ;
8556: LD_ADDR_VAR 0 2
8560: PUSH
8561: LD_EXP 39
8565: PUSH
8566: LD_VAR 0 1
8570: ARRAY
8571: ST_TO_ADDR
// end ;
8572: LD_VAR 0 2
8576: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8577: LD_INT 0
8579: PPUSH
8580: PPUSH
8581: PPUSH
8582: PPUSH
8583: PPUSH
// players := [ ] ;
8584: LD_ADDR_VAR 0 3
8588: PUSH
8589: EMPTY
8590: ST_TO_ADDR
// for i = 1 to 8 do
8591: LD_ADDR_VAR 0 4
8595: PUSH
8596: DOUBLE
8597: LD_INT 1
8599: DEC
8600: ST_TO_ADDR
8601: LD_INT 8
8603: PUSH
8604: FOR_TO
8605: IFFALSE 8666
// begin if i = side then
8607: LD_VAR 0 4
8611: PUSH
8612: LD_VAR 0 1
8616: EQUAL
8617: IFFALSE 8621
// continue ;
8619: GO 8604
// if multi_sides [ i ] and not multi_loosers [ i ] then
8621: LD_EXP 15
8625: PUSH
8626: LD_VAR 0 4
8630: ARRAY
8631: IFFALSE 8646
8633: PUSH
8634: LD_EXP 32
8638: PUSH
8639: LD_VAR 0 4
8643: ARRAY
8644: NOT
8645: AND
8646: IFFALSE 8664
// players := players ^ i ;
8648: LD_ADDR_VAR 0 3
8652: PUSH
8653: LD_VAR 0 3
8657: PUSH
8658: LD_VAR 0 4
8662: ADD
8663: ST_TO_ADDR
// end ;
8664: GO 8604
8666: POP
8667: POP
// if not players then
8668: LD_VAR 0 3
8672: NOT
8673: IFFALSE 8677
// exit ;
8675: GO 8944
// if players = 1 then
8677: LD_VAR 0 3
8681: PUSH
8682: LD_INT 1
8684: EQUAL
8685: IFFALSE 8746
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8687: LD_ADDR_VAR 0 4
8691: PUSH
8692: LD_INT 22
8694: PUSH
8695: LD_VAR 0 1
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PUSH
8704: LD_INT 51
8706: PUSH
8707: EMPTY
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: PPUSH
8714: CALL_OW 69
8718: PUSH
8719: FOR_IN
8720: IFFALSE 8742
// SetSide ( i , players [ 1 ] ) ;
8722: LD_VAR 0 4
8726: PPUSH
8727: LD_VAR 0 3
8731: PUSH
8732: LD_INT 1
8734: ARRAY
8735: PPUSH
8736: CALL_OW 235
8740: GO 8719
8742: POP
8743: POP
// end else
8744: GO 8944
// begin j := 1 ;
8746: LD_ADDR_VAR 0 5
8750: PUSH
8751: LD_INT 1
8753: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8754: LD_ADDR_VAR 0 4
8758: PUSH
8759: LD_INT 22
8761: PUSH
8762: LD_VAR 0 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: LD_INT 21
8776: PUSH
8777: LD_INT 1
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: LD_INT 51
8786: PUSH
8787: EMPTY
8788: LIST
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 21
8796: PUSH
8797: LD_INT 2
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: LIST
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 69
8817: PUSH
8818: FOR_IN
8819: IFFALSE 8942
// begin SetSide ( i , players [ j ] ) ;
8821: LD_VAR 0 4
8825: PPUSH
8826: LD_VAR 0 3
8830: PUSH
8831: LD_VAR 0 5
8835: ARRAY
8836: PPUSH
8837: CALL_OW 235
// if IsDrivenBy ( i ) then
8841: LD_VAR 0 4
8845: PPUSH
8846: CALL_OW 311
8850: IFFALSE 8877
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8852: LD_VAR 0 4
8856: PPUSH
8857: CALL_OW 311
8861: PPUSH
8862: LD_VAR 0 3
8866: PUSH
8867: LD_VAR 0 5
8871: ARRAY
8872: PPUSH
8873: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8877: LD_VAR 0 4
8881: PPUSH
8882: CALL_OW 310
8886: PPUSH
8887: CALL_OW 247
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: IFFALSE 8906
// ComExitBuilding ( i ) ;
8897: LD_VAR 0 4
8901: PPUSH
8902: CALL_OW 122
// j := j + 1 ;
8906: LD_ADDR_VAR 0 5
8910: PUSH
8911: LD_VAR 0 5
8915: PUSH
8916: LD_INT 1
8918: PLUS
8919: ST_TO_ADDR
// if j > players then
8920: LD_VAR 0 5
8924: PUSH
8925: LD_VAR 0 3
8929: GREATER
8930: IFFALSE 8940
// j := 1 ;
8932: LD_ADDR_VAR 0 5
8936: PUSH
8937: LD_INT 1
8939: ST_TO_ADDR
// end ;
8940: GO 8818
8942: POP
8943: POP
// end ; end ;
8944: LD_VAR 0 2
8948: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8949: LD_INT 0
8951: PPUSH
// if not side or side > 8 then
8952: LD_VAR 0 1
8956: NOT
8957: IFTRUE 8969
8959: PUSH
8960: LD_VAR 0 1
8964: PUSH
8965: LD_INT 8
8967: GREATER
8968: OR
8969: IFFALSE 8973
// exit ;
8971: GO 8990
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8973: LD_VAR 0 1
8977: PPUSH
8978: LD_INT 6
8980: PPUSH
8981: CALL 8544 0 1
8985: PPUSH
8986: CALL 8378 0 2
// end ;
8990: LD_VAR 0 2
8994: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8995: LD_INT 0
8997: PPUSH
// if not side or side > 8 then
8998: LD_VAR 0 1
9002: NOT
9003: IFTRUE 9015
9005: PUSH
9006: LD_VAR 0 1
9010: PUSH
9011: LD_INT 8
9013: GREATER
9014: OR
9015: IFFALSE 9019
// exit ;
9017: GO 9036
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
9019: LD_VAR 0 1
9023: PPUSH
9024: LD_INT 4
9026: PPUSH
9027: CALL 8544 0 1
9031: PPUSH
9032: CALL 8378 0 2
// end ;
9036: LD_VAR 0 2
9040: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
9041: LD_INT 0
9043: PPUSH
// if not side or side > 8 then
9044: LD_VAR 0 1
9048: NOT
9049: IFTRUE 9061
9051: PUSH
9052: LD_VAR 0 1
9056: PUSH
9057: LD_INT 8
9059: GREATER
9060: OR
9061: IFFALSE 9065
// exit ;
9063: GO 9082
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
9065: LD_VAR 0 1
9069: PPUSH
9070: LD_INT 5
9072: PPUSH
9073: CALL 8544 0 1
9077: PPUSH
9078: CALL 8378 0 2
// end ;
9082: LD_VAR 0 2
9086: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
9087: LD_INT 0
9089: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
9090: LD_VAR 0 1
9094: NOT
9095: IFTRUE 9107
9097: PUSH
9098: LD_VAR 0 1
9102: PUSH
9103: LD_INT 8
9105: GREATER
9106: OR
9107: IFTRUE 9135
9109: PUSH
9110: LD_VAR 0 2
9114: PUSH
9115: LD_INT 2
9117: PUSH
9118: LD_INT 6
9120: PUSH
9121: LD_INT 36
9123: PUSH
9124: LD_INT 0
9126: PUSH
9127: EMPTY
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: IN
9133: NOT
9134: OR
9135: IFFALSE 9139
// exit ;
9137: GO 9156
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
9139: LD_VAR 0 1
9143: PPUSH
9144: LD_INT 3
9146: PPUSH
9147: CALL 8544 0 1
9151: PPUSH
9152: CALL 8378 0 2
// end ;
9156: LD_VAR 0 3
9160: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
9161: LD_INT 0
9163: PPUSH
9164: PPUSH
// if not un then
9165: LD_VAR 0 1
9169: NOT
9170: IFFALSE 9174
// exit ;
9172: GO 9220
// if not points then
9174: LD_VAR 0 3
9178: NOT
9179: IFFALSE 9196
// gained_points := Multiplayer_GetCondition ( 1 ) else
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_INT 1
9188: PPUSH
9189: CALL 8544 0 1
9193: ST_TO_ADDR
9194: GO 9206
// gained_points := points ;
9196: LD_ADDR_VAR 0 5
9200: PUSH
9201: LD_VAR 0 3
9205: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
9206: LD_VAR 0 2
9210: PPUSH
9211: LD_VAR 0 5
9215: PPUSH
9216: CALL 8378 0 2
// end ; end_of_file
9220: LD_VAR 0 4
9224: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
9225: LD_INT 0
9227: PPUSH
// begin side := GetSide ( un ) ;
9228: LD_ADDR_VAR 0 4
9232: PUSH
9233: LD_VAR 0 1
9237: PPUSH
9238: CALL_OW 255
9242: ST_TO_ADDR
// if killerSide = enemySide then
9243: LD_VAR 0 2
9247: PUSH
9248: LD_EXP 12
9252: EQUAL
9253: IFFALSE 9257
// exit ;
9255: GO 9319
// if side = convoySide and multi_sides [ killerSide ] then
9257: LD_VAR 0 4
9261: PUSH
9262: LD_EXP 42
9266: EQUAL
9267: IFFALSE 9281
9269: PUSH
9270: LD_EXP 15
9274: PUSH
9275: LD_VAR 0 2
9279: ARRAY
9280: AND
9281: IFFALSE 9302
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9283: LD_VAR 0 4
9287: PPUSH
9288: LD_INT 9
9290: PPUSH
9291: CALL 8544 0 1
9295: PPUSH
9296: CALL 8378 0 2
// exit ;
9300: GO 9319
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9302: LD_VAR 0 1
9306: PPUSH
9307: LD_VAR 0 2
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: CALL 9161 0 3
// end ;
9319: PPOPN 4
9321: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9322: LD_INT 0
9324: PPUSH
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
9330: PPUSH
9331: PPUSH
9332: PPUSH
9333: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9334: LD_VAR 0 1
9338: PPUSH
9339: CALL 59260 0 1
// side := GetSide ( un ) ;
9343: LD_ADDR_VAR 0 3
9347: PUSH
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 255
9357: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9358: LD_EXP 15
9362: PUSH
9363: LD_VAR 0 3
9367: ARRAY
9368: IFTRUE 9382
9370: PUSH
9371: LD_VAR 0 3
9375: PUSH
9376: LD_EXP 42
9380: EQUAL
9381: OR
9382: IFFALSE 9460
// begin if un in convoys then
9384: LD_VAR 0 1
9388: PUSH
9389: LD_EXP 40
9393: IN
9394: IFFALSE 9412
// convoys := convoys diff un ;
9396: LD_ADDR_EXP 40
9400: PUSH
9401: LD_EXP 40
9405: PUSH
9406: LD_VAR 0 1
9410: DIFF
9411: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9412: LD_VAR 0 1
9416: PPUSH
9417: CALL_OW 247
9421: PUSH
9422: LD_INT 1
9424: EQUAL
9425: IFFALSE 9436
// MultiplayerEvent_HumanLost ( side ) ;
9427: LD_VAR 0 3
9431: PPUSH
9432: CALL 8995 0 1
// if GetType ( un ) = unit_vehicle then
9436: LD_VAR 0 1
9440: PPUSH
9441: CALL_OW 247
9445: PUSH
9446: LD_INT 2
9448: EQUAL
9449: IFFALSE 9460
// MultiplayerEvent_VehicleLost ( side ) ;
9451: LD_VAR 0 3
9455: PPUSH
9456: CALL 9041 0 1
// end ; if un in enemyForestGuard then
9460: LD_VAR 0 1
9464: PUSH
9465: LD_EXP 11
9469: IN
9470: IFFALSE 9488
// enemyForestGuard := enemyForestGuard diff un ;
9472: LD_ADDR_EXP 11
9476: PUSH
9477: LD_EXP 11
9481: PUSH
9482: LD_VAR 0 1
9486: DIFF
9487: ST_TO_ADDR
// if un in enemyMobile then
9488: LD_VAR 0 1
9492: PUSH
9493: LD_EXP 10
9497: IN
9498: IFFALSE 9516
// enemyMobile := enemyMobile diff un ;
9500: LD_ADDR_EXP 10
9504: PUSH
9505: LD_EXP 10
9509: PUSH
9510: LD_VAR 0 1
9514: DIFF
9515: ST_TO_ADDR
// if un in enemyUnits then
9516: LD_VAR 0 1
9520: PUSH
9521: LD_EXP 9
9525: IN
9526: IFFALSE 9544
// enemyUnits := enemyUnits diff un ;
9528: LD_ADDR_EXP 9
9532: PUSH
9533: LD_EXP 9
9537: PUSH
9538: LD_VAR 0 1
9542: DIFF
9543: ST_TO_ADDR
// if un in arAttackersInf then
9544: LD_VAR 0 1
9548: PUSH
9549: LD_EXP 13
9553: IN
9554: IFFALSE 9572
// arAttackersInf := arAttackersInf diff un ;
9556: LD_ADDR_EXP 13
9560: PUSH
9561: LD_EXP 13
9565: PUSH
9566: LD_VAR 0 1
9570: DIFF
9571: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
9572: LD_EXP 31
9576: IFFALSE 9584
9578: PUSH
9579: LD_EXP 24
9583: AND
9584: IFFALSE 9599
9586: PUSH
9587: LD_EXP 32
9591: PUSH
9592: LD_VAR 0 3
9596: ARRAY
9597: NOT
9598: AND
9599: IFFALSE 9677
// if un in multi_commanders then
9601: LD_VAR 0 1
9605: PUSH
9606: LD_EXP 31
9610: IN
9611: IFFALSE 9677
// begin if side = your_side then
9613: LD_VAR 0 3
9617: PUSH
9618: LD_OWVAR 2
9622: EQUAL
9623: IFFALSE 9629
// Multiplayer_Loose_Message ;
9625: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9629: LD_ADDR_EXP 32
9633: PUSH
9634: LD_EXP 32
9638: PPUSH
9639: LD_VAR 0 3
9643: PPUSH
9644: LD_INT 1
9646: PPUSH
9647: CALL_OW 1
9651: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9652: LD_ADDR_EXP 31
9656: PUSH
9657: LD_EXP 31
9661: PUSH
9662: LD_VAR 0 1
9666: DIFF
9667: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9668: LD_VAR 0 3
9672: PPUSH
9673: CALL 8577 0 1
// end ; end ;
9677: PPOPN 11
9679: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9680: LD_INT 0
9682: PPUSH
9683: PPUSH
9684: PPUSH
9685: PPUSH
// begin side := GetSide ( building ) ;
9686: LD_ADDR_VAR 0 4
9690: PUSH
9691: LD_VAR 0 1
9695: PPUSH
9696: CALL_OW 255
9700: ST_TO_ADDR
// if multi_sides [ side ] then
9701: LD_EXP 15
9705: PUSH
9706: LD_VAR 0 4
9710: ARRAY
9711: IFFALSE 9732
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9713: LD_VAR 0 4
9717: PPUSH
9718: LD_VAR 0 1
9722: PPUSH
9723: CALL_OW 266
9727: PPUSH
9728: CALL 9087 0 2
// end ;
9732: PPOPN 5
9734: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9735: LD_INT 0
9737: PPUSH
9738: PPUSH
9739: PPUSH
9740: PPUSH
9741: PPUSH
9742: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9743: LD_VAR 0 1
9747: PPUSH
9748: LD_VAR 0 2
9752: PPUSH
9753: CALL 59318 0 2
// side := GetSide ( vehicle ) ;
9757: LD_ADDR_VAR 0 4
9761: PUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 255
9771: ST_TO_ADDR
// if multi_sides [ side ] then
9772: LD_EXP 15
9776: PUSH
9777: LD_VAR 0 4
9781: ARRAY
9782: IFFALSE 9793
// MultiplayerEvent_Produced ( side ) ;
9784: LD_VAR 0 4
9788: PPUSH
9789: CALL 8949 0 1
// end ;
9793: PPOPN 8
9795: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9796: LD_INT 0
9798: PPUSH
9799: PPUSH
// begin side := GetSide ( lab ) ;
9800: LD_ADDR_VAR 0 4
9804: PUSH
9805: LD_VAR 0 2
9809: PPUSH
9810: CALL_OW 255
9814: ST_TO_ADDR
// if multi_sides [ side ] then
9815: LD_EXP 15
9819: PUSH
9820: LD_VAR 0 4
9824: ARRAY
9825: IFFALSE 9890
// for i := 1 to 8 do
9827: LD_ADDR_VAR 0 3
9831: PUSH
9832: DOUBLE
9833: LD_INT 1
9835: DEC
9836: ST_TO_ADDR
9837: LD_INT 8
9839: PUSH
9840: FOR_TO
9841: IFFALSE 9888
// if multi_sides [ i ] and i <> side then
9843: LD_EXP 15
9847: PUSH
9848: LD_VAR 0 3
9852: ARRAY
9853: IFFALSE 9867
9855: PUSH
9856: LD_VAR 0 3
9860: PUSH
9861: LD_VAR 0 4
9865: NONEQUAL
9866: AND
9867: IFFALSE 9886
// SetTech ( tech , i , state_researched ) ;
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_VAR 0 3
9878: PPUSH
9879: LD_INT 2
9881: PPUSH
9882: CALL_OW 322
9886: GO 9840
9888: POP
9889: POP
// end ;
9890: PPOPN 4
9892: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9893: LD_VAR 0 2
9897: PUSH
9898: LD_EXP 10
9902: IN
9903: IFFALSE 9966
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9905: LD_VAR 0 1
9909: PPUSH
9910: LD_INT 163
9912: PPUSH
9913: LD_INT 31
9915: PPUSH
9916: CALL_OW 111
// wait ( 0 0$1 ) ;
9920: LD_INT 35
9922: PPUSH
9923: CALL_OW 67
// if IsDead ( driver ) then
9927: LD_VAR 0 1
9931: PPUSH
9932: CALL_OW 301
9936: IFFALSE 9940
// exit ;
9938: GO 9966
// until IsAt ( driver , 163 , 31 ) ;
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 163
9947: PPUSH
9948: LD_INT 31
9950: PPUSH
9951: CALL_OW 307
9955: IFFALSE 9905
// RemoveUnit ( driver ) ;
9957: LD_VAR 0 1
9961: PPUSH
9962: CALL_OW 64
// end ; end ;
9966: PPOPN 4
9968: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do var side ;
9969: LD_INT 0
9971: PPUSH
// begin side := GetSide ( factory ) ;
9972: LD_ADDR_VAR 0 6
9976: PUSH
9977: LD_VAR 0 1
9981: PPUSH
9982: CALL_OW 255
9986: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9987: LD_VAR 0 5
9991: PUSH
9992: LD_INT 81
9994: EQUAL
9995: IFFALSE 10033
9997: PUSH
9998: LD_INT 22
10000: PUSH
10001: LD_VAR 0 6
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 34
10012: PUSH
10013: LD_INT 81
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PPUSH
10024: CALL_OW 69
10028: PUSH
10029: LD_INT 0
10031: GREATER
10032: AND
10033: IFFALSE 10054
// begin ComCancel ( factory ) ;
10035: LD_VAR 0 1
10039: PPUSH
10040: CALL_OW 127
// HintSpec ( VehLimit , 2 ) ;
10044: LD_STRING VehLimit
10046: PPUSH
10047: LD_INT 2
10049: PPUSH
10050: CALL_OW 338
// end ; end ; end_of_file
10054: PPOPN 6
10056: END
// every 8 8$00 trigger not forestIsCleared do
10057: LD_EXP 7
10061: NOT
10062: IFFALSE 10071
10064: GO 10066
10066: DISABLE
// ClearRoadInForest ;
10067: CALL 2246 0 0
10071: END
// every 18 18$00 trigger not forestIsCleared do
10072: LD_EXP 7
10076: NOT
10077: IFFALSE 10086
10079: GO 10081
10081: DISABLE
// ClearRoadInForest ;
10082: CALL 2246 0 0
10086: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
10087: LD_EXP 41
10091: PUSH
10092: LD_INT 4
10094: MOD
10095: PUSH
10096: LD_INT 0
10098: EQUAL
10099: IFFALSE 10111
10101: PUSH
10102: LD_EXP 41
10106: PUSH
10107: LD_INT 4
10109: GREATEREQUAL
10110: AND
10111: IFFALSE 10140
10113: GO 10115
10115: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
10116: LD_ADDR_EXP 13
10120: PUSH
10121: LD_EXP 13
10125: PUSH
10126: CALL 3435 0 0
10130: UNION
10131: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10132: LD_INT 10500
10134: PPUSH
10135: CALL_OW 67
// enable ;
10139: ENABLE
// end ;
10140: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
10141: LD_EXP 41
10145: PUSH
10146: LD_INT 7
10148: MOD
10149: PUSH
10150: LD_INT 0
10152: EQUAL
10153: IFFALSE 10165
10155: PUSH
10156: LD_EXP 41
10160: PUSH
10161: LD_INT 7
10163: GREATEREQUAL
10164: AND
10165: IFFALSE 10194
10167: GO 10169
10169: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
10170: LD_ADDR_EXP 13
10174: PUSH
10175: LD_EXP 13
10179: PUSH
10180: CALL 3679 0 0
10184: UNION
10185: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10186: LD_INT 10500
10188: PPUSH
10189: CALL_OW 67
// enable ;
10193: ENABLE
// end ;
10194: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 36 , 38 ] do
10195: LD_EXP 41
10199: PUSH
10200: LD_INT 8
10202: PUSH
10203: LD_INT 12
10205: PUSH
10206: LD_INT 16
10208: PUSH
10209: LD_INT 20
10211: PUSH
10212: LD_INT 22
10214: PUSH
10215: LD_INT 24
10217: PUSH
10218: LD_INT 26
10220: PUSH
10221: LD_INT 28
10223: PUSH
10224: LD_INT 30
10226: PUSH
10227: LD_INT 32
10229: PUSH
10230: LD_INT 36
10232: PUSH
10233: LD_INT 38
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: IN
10250: IFFALSE 10279
10252: GO 10254
10254: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
10255: LD_ADDR_EXP 13
10259: PUSH
10260: LD_EXP 13
10264: PUSH
10265: CALL 3230 0 0
10269: UNION
10270: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10271: LD_INT 10500
10273: PPUSH
10274: CALL_OW 67
// enable ;
10278: ENABLE
// end ;
10279: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
10280: LD_EXP 41
10284: PUSH
10285: LD_INT 5
10287: MOD
10288: PUSH
10289: LD_INT 4
10291: EQUAL
10292: IFFALSE 10335
10294: PUSH
10295: LD_INT 22
10297: PUSH
10298: LD_EXP 12
10302: PUSH
10303: EMPTY
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 92
10309: PUSH
10310: LD_INT 30
10312: PUSH
10313: LD_INT 48
10315: PUSH
10316: LD_INT 20
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PPUSH
10329: CALL_OW 69
10333: NOT
10334: AND
10335: IFFALSE 10352
10337: GO 10339
10339: DISABLE
// begin SendWestGroup ;
10340: CALL 2600 0 0
// wait ( 6 6$00 ) ;
10344: LD_INT 12600
10346: PPUSH
10347: CALL_OW 67
// enable ;
10351: ENABLE
// end ;
10352: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
10353: LD_EXP 10
10357: PPUSH
10358: LD_INT 50
10360: PUSH
10361: EMPTY
10362: LIST
10363: PPUSH
10364: CALL_OW 72
10368: PUSH
10369: LD_INT 5
10371: LESS
10372: IFFALSE 10406
10374: GO 10376
10376: DISABLE
// begin PrepareMobileGroup ;
10377: CALL 1586 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
10381: LD_INT 7350
10383: PUSH
10384: LD_INT 6300
10386: PUSH
10387: LD_INT 5250
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: LIST
10394: PUSH
10395: LD_OWVAR 67
10399: ARRAY
10400: PPUSH
10401: CALL_OW 67
// enable ;
10405: ENABLE
// end ;
10406: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
10407: LD_EXP 41
10411: PUSH
10412: LD_INT 6
10414: MOD
10415: PUSH
10416: LD_INT 0
10418: EQUAL
10419: IFFALSE 10431
10421: PUSH
10422: LD_EXP 41
10426: PUSH
10427: LD_INT 6
10429: GREATEREQUAL
10430: AND
10431: IFFALSE 10454
10433: PUSH
10434: LD_EXP 10
10438: PPUSH
10439: LD_INT 50
10441: PUSH
10442: EMPTY
10443: LIST
10444: PPUSH
10445: CALL_OW 72
10449: PUSH
10450: LD_INT 10
10452: LESS
10453: AND
10454: IFFALSE 10488
10456: GO 10458
10458: DISABLE
// begin PrepareMobileGroup2 ;
10459: CALL 1914 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10463: LD_INT 9450
10465: PUSH
10466: LD_INT 8400
10468: PUSH
10469: LD_INT 7350
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: PUSH
10477: LD_OWVAR 67
10481: ARRAY
10482: PPUSH
10483: CALL_OW 67
// enable ;
10487: ENABLE
// end ;
10488: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10489: LD_EXP 7
10493: IFFALSE 10706
10495: GO 10497
10497: DISABLE
10498: LD_INT 0
10500: PPUSH
10501: PPUSH
// begin if tick > 50 50$00 then
10502: LD_OWVAR 1
10506: PUSH
10507: LD_INT 105000
10509: GREATER
10510: IFFALSE 10515
// begin disable ;
10512: DISABLE
// exit ;
10513: GO 10706
// end ; tmp := PrepareForestOnslaught ;
10515: LD_ADDR_VAR 0 2
10519: PUSH
10520: CALL 2902 0 0
10524: ST_TO_ADDR
// for i in tmp do
10525: LD_ADDR_VAR 0 1
10529: PUSH
10530: LD_VAR 0 2
10534: PUSH
10535: FOR_IN
10536: IFFALSE 10600
// begin AddComMoveXY ( i , 197 , 152 ) ;
10538: LD_VAR 0 1
10542: PPUSH
10543: LD_INT 197
10545: PPUSH
10546: LD_INT 152
10548: PPUSH
10549: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10553: LD_VAR 0 1
10557: PPUSH
10558: LD_INT 159
10560: PPUSH
10561: LD_INT 163
10563: PPUSH
10564: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10568: LD_VAR 0 1
10572: PPUSH
10573: LD_INT 116
10575: PPUSH
10576: LD_INT 154
10578: PPUSH
10579: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10583: LD_VAR 0 1
10587: PPUSH
10588: LD_INT 93
10590: PPUSH
10591: LD_INT 177
10593: PPUSH
10594: CALL_OW 171
// end ;
10598: GO 10535
10600: POP
10601: POP
// repeat wait ( 0 0$1 ) ;
10602: LD_INT 35
10604: PPUSH
10605: CALL_OW 67
// for i in tmp do
10609: LD_ADDR_VAR 0 1
10613: PUSH
10614: LD_VAR 0 2
10618: PUSH
10619: FOR_IN
10620: IFFALSE 10681
// if not IsOk ( i ) then
10622: LD_VAR 0 1
10626: PPUSH
10627: CALL_OW 302
10631: NOT
10632: IFFALSE 10652
// tmp := tmp diff i else
10634: LD_ADDR_VAR 0 2
10638: PUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_VAR 0 1
10648: DIFF
10649: ST_TO_ADDR
10650: GO 10679
// if not HasTask ( i ) then
10652: LD_VAR 0 1
10656: PPUSH
10657: CALL_OW 314
10661: NOT
10662: IFFALSE 10679
// ComMoveXY ( i , 93 , 177 ) ;
10664: LD_VAR 0 1
10668: PPUSH
10669: LD_INT 93
10671: PPUSH
10672: LD_INT 177
10674: PPUSH
10675: CALL_OW 111
10679: GO 10619
10681: POP
10682: POP
// until not tmp ;
10683: LD_VAR 0 2
10687: NOT
10688: IFFALSE 10602
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10690: LD_INT 1050
10692: PPUSH
10693: LD_INT 11550
10695: PPUSH
10696: CALL_OW 12
10700: PPUSH
10701: CALL_OW 67
// enable ;
10705: ENABLE
// end ;
10706: PPOPN 2
10708: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10709: LD_EXP 11
10713: IFFALSE 11232
10715: GO 10717
10717: DISABLE
10718: LD_INT 0
10720: PPUSH
10721: PPUSH
10722: PPUSH
10723: PPUSH
// begin enable ;
10724: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10725: LD_ADDR_VAR 0 2
10729: PUSH
10730: LD_EXP 11
10734: PPUSH
10735: LD_INT 50
10737: PUSH
10738: EMPTY
10739: LIST
10740: PPUSH
10741: CALL_OW 72
10745: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10746: LD_ADDR_VAR 0 3
10750: PUSH
10751: LD_INT 19
10753: PPUSH
10754: LD_INT 3
10756: PUSH
10757: LD_INT 22
10759: PUSH
10760: LD_EXP 12
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PPUSH
10773: CALL_OW 70
10777: ST_TO_ADDR
// if not tmp then
10778: LD_VAR 0 2
10782: NOT
10783: IFFALSE 10787
// exit ;
10785: GO 11232
// for i in tmp do
10787: LD_ADDR_VAR 0 1
10791: PUSH
10792: LD_VAR 0 2
10796: PUSH
10797: FOR_IN
10798: IFFALSE 11230
// begin if enemyInForest then
10800: LD_VAR 0 3
10804: IFFALSE 10894
// begin if GetClass ( i ) = 4 then
10806: LD_VAR 0 1
10810: PPUSH
10811: CALL_OW 257
10815: PUSH
10816: LD_INT 4
10818: EQUAL
10819: IFFALSE 10853
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10821: LD_VAR 0 1
10825: PPUSH
10826: LD_VAR 0 2
10830: PUSH
10831: LD_VAR 0 1
10835: DIFF
10836: PPUSH
10837: LD_VAR 0 1
10841: PPUSH
10842: CALL_OW 74
10846: PPUSH
10847: CALL_OW 112
10851: GO 10892
// if GetClass ( i ) <> 3 then
10853: LD_VAR 0 1
10857: PPUSH
10858: CALL_OW 257
10862: PUSH
10863: LD_INT 3
10865: NONEQUAL
10866: IFFALSE 10892
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10868: LD_VAR 0 1
10872: PPUSH
10873: LD_VAR 0 3
10877: PPUSH
10878: LD_VAR 0 1
10882: PPUSH
10883: CALL_OW 74
10887: PPUSH
10888: CALL_OW 115
// end else
10892: GO 11228
// if not IsInArea ( i , arForestArea ) then
10894: LD_VAR 0 1
10898: PPUSH
10899: LD_INT 21
10901: PPUSH
10902: CALL_OW 308
10906: NOT
10907: IFFALSE 10923
// ComMoveToArea ( i , arForestArea ) else
10909: LD_VAR 0 1
10913: PPUSH
10914: LD_INT 21
10916: PPUSH
10917: CALL_OW 113
10921: GO 11228
// if GetClass ( i ) = 3 then
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 257
10932: PUSH
10933: LD_INT 3
10935: EQUAL
10936: IFFALSE 11228
// begin vehicle := IsInUnit ( i ) ;
10938: LD_ADDR_VAR 0 4
10942: PUSH
10943: LD_VAR 0 1
10947: PPUSH
10948: CALL_OW 310
10952: ST_TO_ADDR
// if vehicle then
10953: LD_VAR 0 4
10957: IFFALSE 11184
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10959: LD_VAR 0 4
10963: PPUSH
10964: CALL_OW 256
10968: PUSH
10969: LD_INT 1000
10971: LESS
10972: IFFALSE 10986
10974: PUSH
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 314
10984: NOT
10985: AND
10986: IFFALSE 11182
// begin if not IsInArea ( vehicle , arParkingArea ) then
10988: LD_VAR 0 4
10992: PPUSH
10993: LD_INT 20
10995: PPUSH
10996: CALL_OW 308
11000: NOT
11001: IFFALSE 11017
// ComMoveToArea ( vehicle , arParkingArea ) else
11003: LD_VAR 0 4
11007: PPUSH
11008: LD_INT 20
11010: PPUSH
11011: CALL_OW 113
11015: GO 11182
// if not GetTag ( i ) then
11017: LD_VAR 0 1
11021: PPUSH
11022: CALL_OW 110
11026: NOT
11027: IFFALSE 11182
// begin SetTag ( i , tMech ) ;
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_INT 7
11036: PPUSH
11037: CALL_OW 109
// ComExitVehicle ( i ) ;
11041: LD_VAR 0 1
11045: PPUSH
11046: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
11050: LD_VAR 0 1
11054: PPUSH
11055: LD_VAR 0 4
11059: PPUSH
11060: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11064: LD_INT 35
11066: PPUSH
11067: CALL_OW 67
// if FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) then
11071: LD_INT 19
11073: PPUSH
11074: LD_INT 3
11076: PUSH
11077: LD_INT 22
11079: PUSH
11080: LD_EXP 12
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PPUSH
11093: CALL_OW 70
11097: IFFALSE 11129
// begin ComEnterUnit ( i , vehicle ) ;
11099: LD_VAR 0 1
11103: PPUSH
11104: LD_VAR 0 4
11108: PPUSH
11109: CALL_OW 120
// SetTag ( i , 0 ) ;
11113: LD_VAR 0 1
11117: PPUSH
11118: LD_INT 0
11120: PPUSH
11121: CALL_OW 109
// exit ;
11125: POP
11126: POP
11127: GO 11232
// end ; until GetLives ( vehicle ) = 1000 ;
11129: LD_VAR 0 4
11133: PPUSH
11134: CALL_OW 256
11138: PUSH
11139: LD_INT 1000
11141: EQUAL
11142: IFFALSE 11064
// SetLives ( i , 1000 ) ;
11144: LD_VAR 0 1
11148: PPUSH
11149: LD_INT 1000
11151: PPUSH
11152: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_VAR 0 4
11165: PPUSH
11166: CALL_OW 120
// SetTag ( i , 0 ) ;
11170: LD_VAR 0 1
11174: PPUSH
11175: LD_INT 0
11177: PPUSH
11178: CALL_OW 109
// end ; end ; end else
11182: GO 11228
// if not IsInArea ( i , arParkingArea ) and GetClass ( i ) <> 3 then
11184: LD_VAR 0 1
11188: PPUSH
11189: LD_INT 20
11191: PPUSH
11192: CALL_OW 308
11196: NOT
11197: IFFALSE 11214
11199: PUSH
11200: LD_VAR 0 1
11204: PPUSH
11205: CALL_OW 257
11209: PUSH
11210: LD_INT 3
11212: NONEQUAL
11213: AND
11214: IFFALSE 11228
// ComMoveToArea ( i , arParkingArea ) ;
11216: LD_VAR 0 1
11220: PPUSH
11221: LD_INT 20
11223: PPUSH
11224: CALL_OW 113
// end ; end ;
11228: GO 10797
11230: POP
11231: POP
// end ;
11232: PPOPN 4
11234: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
11235: LD_EXP 10
11239: IFFALSE 11772
11241: GO 11243
11243: DISABLE
11244: LD_INT 0
11246: PPUSH
11247: PPUSH
11248: PPUSH
// begin enable ;
11249: ENABLE
// if not enemyMobile then
11250: LD_EXP 10
11254: NOT
11255: IFFALSE 11259
// exit ;
11257: GO 11772
// for i in enemyMobile do
11259: LD_ADDR_VAR 0 1
11263: PUSH
11264: LD_EXP 10
11268: PUSH
11269: FOR_IN
11270: IFFALSE 11770
// begin if GetSide ( i ) <> enemySide then
11272: LD_VAR 0 1
11276: PPUSH
11277: CALL_OW 255
11281: PUSH
11282: LD_EXP 12
11286: NONEQUAL
11287: IFFALSE 11307
// begin enemyMobile := enemyMobile diff i ;
11289: LD_ADDR_EXP 10
11293: PUSH
11294: LD_EXP 10
11298: PUSH
11299: LD_VAR 0 1
11303: DIFF
11304: ST_TO_ADDR
// continue ;
11305: GO 11269
// end ; if GetTag ( i ) = 300 then
11307: LD_VAR 0 1
11311: PPUSH
11312: CALL_OW 110
11316: PUSH
11317: LD_INT 300
11319: EQUAL
11320: IFFALSE 11435
// begin if GetFuel ( i ) < 50 then
11322: LD_VAR 0 1
11326: PPUSH
11327: CALL_OW 261
11331: PUSH
11332: LD_INT 50
11334: LESS
11335: IFFALSE 11394
// begin ComMoveXY ( i , 170 , 50 ) ;
11337: LD_VAR 0 1
11341: PPUSH
11342: LD_INT 170
11344: PPUSH
11345: LD_INT 50
11347: PPUSH
11348: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11352: LD_INT 35
11354: PPUSH
11355: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
11359: LD_VAR 0 1
11363: PPUSH
11364: LD_INT 170
11366: PPUSH
11367: LD_INT 50
11369: PPUSH
11370: CALL_OW 297
11374: PUSH
11375: LD_INT 4
11377: LESS
11378: IFFALSE 11352
// SetFuel ( i , 100 ) ;
11380: LD_VAR 0 1
11384: PPUSH
11385: LD_INT 100
11387: PPUSH
11388: CALL_OW 240
// end else
11392: GO 11435
// if not IsInArea ( i , arParkingArea ) then
11394: LD_VAR 0 1
11398: PPUSH
11399: LD_INT 20
11401: PPUSH
11402: CALL_OW 308
11406: NOT
11407: IFFALSE 11423
// ComMoveToArea ( i , arParkingArea ) else
11409: LD_VAR 0 1
11413: PPUSH
11414: LD_INT 20
11416: PPUSH
11417: CALL_OW 113
11421: GO 11435
// SetTag ( i , 301 ) ;
11423: LD_VAR 0 1
11427: PPUSH
11428: LD_INT 301
11430: PPUSH
11431: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11435: LD_VAR 0 1
11439: PPUSH
11440: CALL_OW 110
11444: PUSH
11445: LD_INT 301
11447: EQUAL
11448: IFFALSE 11590
// begin if GetLives ( i ) < 1000 then
11450: LD_VAR 0 1
11454: PPUSH
11455: CALL_OW 256
11459: PUSH
11460: LD_INT 1000
11462: LESS
11463: IFFALSE 11567
// begin if not IsDrivenBy ( i ) then
11465: LD_VAR 0 1
11469: PPUSH
11470: CALL_OW 311
11474: NOT
11475: IFFALSE 11479
// continue ;
11477: GO 11269
// mech := IsDrivenBy ( i ) ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: LD_VAR 0 1
11488: PPUSH
11489: CALL_OW 311
11493: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11494: LD_VAR 0 2
11498: PPUSH
11499: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11503: LD_VAR 0 2
11507: PPUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11517: LD_INT 35
11519: PPUSH
11520: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11524: LD_VAR 0 1
11528: PPUSH
11529: CALL_OW 256
11533: PUSH
11534: LD_INT 1000
11536: EQUAL
11537: IFFALSE 11517
// SetLives ( mech , 1000 ) ;
11539: LD_VAR 0 2
11543: PPUSH
11544: LD_INT 1000
11546: PPUSH
11547: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11551: LD_VAR 0 2
11555: PPUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 120
// end else
11565: GO 11590
// if IsDrivenBy ( i ) then
11567: LD_VAR 0 1
11571: PPUSH
11572: CALL_OW 311
11576: IFFALSE 11590
// SetTag ( i , 0 ) ;
11578: LD_VAR 0 1
11582: PPUSH
11583: LD_INT 0
11585: PPUSH
11586: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11590: LD_VAR 0 1
11594: PPUSH
11595: CALL_OW 110
11599: PUSH
11600: LD_INT 300
11602: LESS
11603: IFFALSE 11768
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11605: LD_ADDR_VAR 0 3
11609: PUSH
11610: LD_INT 19
11612: PPUSH
11613: LD_INT 81
11615: PUSH
11616: LD_EXP 12
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 70
11629: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11630: LD_VAR 0 1
11634: PPUSH
11635: CALL_OW 256
11639: PUSH
11640: LD_INT 650
11642: LESS
11643: IFFALSE 11668
// begin ComStop ( i ) ;
11645: LD_VAR 0 1
11649: PPUSH
11650: CALL_OW 141
// SetTag ( i , 300 ) ;
11654: LD_VAR 0 1
11658: PPUSH
11659: LD_INT 300
11661: PPUSH
11662: CALL_OW 109
// continue ;
11666: GO 11269
// end ; if enemy then
11668: LD_VAR 0 3
11672: IFFALSE 11712
// begin if not HasTask ( i ) then
11674: LD_VAR 0 1
11678: PPUSH
11679: CALL_OW 314
11683: NOT
11684: IFFALSE 11710
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11686: LD_VAR 0 1
11690: PPUSH
11691: LD_VAR 0 3
11695: PPUSH
11696: LD_VAR 0 1
11700: PPUSH
11701: CALL_OW 74
11705: PPUSH
11706: CALL_OW 115
// end else
11710: GO 11768
// if enemyMobile then
11712: LD_EXP 10
11716: IFFALSE 11768
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: LD_INT 81
11725: PUSH
11726: LD_EXP 12
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 69
11739: ST_TO_ADDR
// if enemy then
11740: LD_VAR 0 3
11744: IFFALSE 11768
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11746: LD_VAR 0 1
11750: PPUSH
11751: LD_INT 130
11753: PUSH
11754: LD_INT 28
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: PPUSH
11764: CALL 56672 0 2
// end ; end ; end ;
11768: GO 11269
11770: POP
11771: POP
// end ;
11772: PPOPN 3
11774: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11775: LD_EXP 13
11779: IFFALSE 12304
11781: GO 11783
11783: DISABLE
11784: LD_INT 0
11786: PPUSH
11787: PPUSH
11788: PPUSH
11789: PPUSH
11790: PPUSH
// begin enable ;
11791: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11792: LD_ADDR_VAR 0 2
11796: PUSH
11797: LD_EXP 13
11801: PPUSH
11802: LD_INT 50
11804: PUSH
11805: EMPTY
11806: LIST
11807: PPUSH
11808: CALL_OW 72
11812: ST_TO_ADDR
// arAttackersInf := [ ] ;
11813: LD_ADDR_EXP 13
11817: PUSH
11818: EMPTY
11819: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11820: LD_ADDR_VAR 0 1
11824: PUSH
11825: LD_VAR 0 2
11829: PPUSH
11830: LD_INT 25
11832: PUSH
11833: LD_INT 1
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 72
11844: PUSH
11845: FOR_IN
11846: IFFALSE 11998
// begin if Prob ( 50 ) then
11848: LD_INT 50
11850: PPUSH
11851: CALL_OW 13
11855: IFFALSE 11871
// SetTag ( i , tMine ) else
11857: LD_VAR 0 1
11861: PPUSH
11862: LD_INT 6
11864: PPUSH
11865: CALL_OW 109
11869: GO 11873
// continue ;
11871: GO 11845
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_INT 81
11880: PUSH
11881: LD_EXP 12
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 3
11892: PUSH
11893: LD_INT 120
11895: PUSH
11896: LD_INT 11
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 21
11912: PUSH
11913: LD_INT 2
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: LD_INT 21
11922: PUSH
11923: LD_INT 3
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: LIST
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: PPUSH
11940: CALL_OW 69
11944: PPUSH
11945: LD_VAR 0 1
11949: PPUSH
11950: CALL_OW 74
11954: ST_TO_ADDR
// if not nearest then
11955: LD_VAR 0 3
11959: NOT
11960: IFFALSE 11964
// break ;
11962: GO 11998
// SetTag ( nearest , tMined ) ;
11964: LD_VAR 0 3
11968: PPUSH
11969: LD_INT 11
11971: PPUSH
11972: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11976: LD_VAR 0 1
11980: PPUSH
11981: LD_INT 0
11983: PPUSH
11984: LD_INT 0
11986: PPUSH
11987: LD_VAR 0 3
11991: PPUSH
11992: CALL_OW 192
// end ;
11996: GO 11845
11998: POP
11999: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12000: LD_ADDR_VAR 0 2
12004: PUSH
12005: LD_VAR 0 2
12009: PPUSH
12010: LD_INT 50
12012: PUSH
12013: EMPTY
12014: LIST
12015: PPUSH
12016: CALL_OW 72
12020: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
12021: LD_INT 70
12023: PPUSH
12024: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12028: LD_ADDR_VAR 0 2
12032: PUSH
12033: LD_VAR 0 2
12037: PPUSH
12038: LD_INT 50
12040: PUSH
12041: EMPTY
12042: LIST
12043: PPUSH
12044: CALL_OW 72
12048: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
12049: LD_ADDR_VAR 0 4
12053: PUSH
12054: LD_INT 81
12056: PUSH
12057: LD_EXP 12
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PPUSH
12066: CALL_OW 69
12070: ST_TO_ADDR
// for i in tmp do
12071: LD_ADDR_VAR 0 1
12075: PUSH
12076: LD_VAR 0 2
12080: PUSH
12081: FOR_IN
12082: IFFALSE 12295
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
12084: LD_VAR 0 1
12088: PPUSH
12089: CALL_OW 257
12093: PUSH
12094: LD_INT 1
12096: NONEQUAL
12097: IFFALSE 12114
12099: PUSH
12100: LD_VAR 0 1
12104: PPUSH
12105: CALL_OW 110
12109: PUSH
12110: LD_INT 6
12112: NONEQUAL
12113: AND
12114: IFFALSE 12142
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12116: LD_VAR 0 1
12120: PPUSH
12121: LD_VAR 0 4
12125: PPUSH
12126: LD_VAR 0 1
12130: PPUSH
12131: CALL_OW 74
12135: PPUSH
12136: CALL_OW 115
12140: GO 12293
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
12142: LD_ADDR_VAR 0 3
12146: PUSH
12147: LD_VAR 0 4
12151: PPUSH
12152: LD_INT 3
12154: PUSH
12155: LD_INT 120
12157: PUSH
12158: LD_INT 11
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 2
12171: PUSH
12172: LD_INT 21
12174: PUSH
12175: LD_INT 2
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 21
12184: PUSH
12185: LD_INT 3
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 72
12205: PPUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 74
12215: ST_TO_ADDR
// if not nearest then
12216: LD_VAR 0 3
12220: NOT
12221: IFFALSE 12249
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12223: LD_VAR 0 1
12227: PPUSH
12228: LD_VAR 0 4
12232: PPUSH
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL_OW 74
12242: PPUSH
12243: CALL_OW 115
12247: GO 12293
// if not HasTask ( i ) then
12249: LD_VAR 0 1
12253: PPUSH
12254: CALL_OW 314
12258: NOT
12259: IFFALSE 12293
// begin SetTag ( nearest , tMined ) ;
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 11
12268: PPUSH
12269: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
12273: LD_VAR 0 1
12277: PPUSH
12278: LD_INT 0
12280: PPUSH
12281: LD_INT 0
12283: PPUSH
12284: LD_VAR 0 3
12288: PPUSH
12289: CALL_OW 132
// end ; end ;
12293: GO 12081
12295: POP
12296: POP
// until not tmp ;
12297: LD_VAR 0 2
12301: NOT
12302: IFFALSE 12021
// end ;
12304: PPOPN 5
12306: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
12307: LD_INT 22
12309: PUSH
12310: LD_EXP 12
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 32
12321: PUSH
12322: LD_INT 1
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PPUSH
12333: CALL_OW 69
12337: IFFALSE 12416
12339: GO 12341
12341: DISABLE
12342: LD_INT 0
12344: PPUSH
// begin enable ;
12345: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
12346: LD_ADDR_VAR 0 1
12350: PUSH
12351: LD_INT 22
12353: PUSH
12354: LD_EXP 12
12358: PUSH
12359: EMPTY
12360: LIST
12361: LIST
12362: PUSH
12363: LD_INT 32
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: PUSH
12382: FOR_IN
12383: IFFALSE 12414
// if GetFuel ( i ) < 3 then
12385: LD_VAR 0 1
12389: PPUSH
12390: CALL_OW 261
12394: PUSH
12395: LD_INT 3
12397: LESS
12398: IFFALSE 12412
// SetFuel ( i , 3 ) ;
12400: LD_VAR 0 1
12404: PPUSH
12405: LD_INT 3
12407: PPUSH
12408: CALL_OW 240
12412: GO 12382
12414: POP
12415: POP
// end ;
12416: PPOPN 1
12418: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
12419: LD_INT 9
12421: PPUSH
12422: LD_INT 22
12424: PUSH
12425: LD_EXP 12
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PPUSH
12434: CALL_OW 70
12438: IFFALSE 12501
12440: GO 12442
12442: DISABLE
12443: LD_INT 0
12445: PPUSH
// begin enable ;
12446: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
12447: LD_ADDR_VAR 0 1
12451: PUSH
12452: LD_INT 9
12454: PPUSH
12455: LD_INT 22
12457: PUSH
12458: LD_EXP 12
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: PPUSH
12467: CALL_OW 70
12471: PUSH
12472: FOR_IN
12473: IFFALSE 12499
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
12475: LD_EXP 42
12479: PPUSH
12480: LD_INT 250
12482: NEG
12483: PPUSH
12484: CALL 8378 0 2
// RemoveUnit ( i ) ;
12488: LD_VAR 0 1
12492: PPUSH
12493: CALL_OW 64
// end ;
12497: GO 12472
12499: POP
12500: POP
// end ; end_of_file
12501: PPOPN 1
12503: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
12504: LD_INT 0
12506: PPUSH
12507: PPUSH
// convoys := [ ] ;
12508: LD_ADDR_EXP 40
12512: PUSH
12513: EMPTY
12514: ST_TO_ADDR
// convoySide := side ;
12515: LD_ADDR_EXP 42
12519: PUSH
12520: LD_VAR 0 1
12524: ST_TO_ADDR
// convoyWave := 1 ;
12525: LD_ADDR_EXP 41
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// for i := 1 to 8 do
12533: LD_ADDR_VAR 0 3
12537: PUSH
12538: DOUBLE
12539: LD_INT 1
12541: DEC
12542: ST_TO_ADDR
12543: LD_INT 8
12545: PUSH
12546: FOR_TO
12547: IFFALSE 12577
// if multi_sides [ i ] then
12549: LD_EXP 15
12553: PUSH
12554: LD_VAR 0 3
12558: ARRAY
12559: IFFALSE 12575
// ChangeSideFog ( i , side ) ;
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 343
12575: GO 12546
12577: POP
12578: POP
// end ;
12579: LD_VAR 0 2
12583: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12584: LD_EXP 2
12588: IFFALSE 12623
12590: GO 12592
12592: DISABLE
12593: LD_INT 0
12595: PPUSH
12596: PPUSH
// begin enable ;
12597: ENABLE
// blockThread := true ;
12598: LD_ADDR_EXP 6
12602: PUSH
12603: LD_INT 1
12605: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12606: LD_EXP 41
12610: PPUSH
12611: CALL 12626 0 1
// blockThread := false ;
12615: LD_ADDR_EXP 6
12619: PUSH
12620: LD_INT 0
12622: ST_TO_ADDR
// end ;
12623: PPOPN 2
12625: END
// function SendConvoy ( wave ) ; var i , v , skill , un , veh , tmp , path ; begin
12626: LD_INT 0
12628: PPUSH
12629: PPUSH
12630: PPUSH
12631: PPUSH
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
// convoyWave := Inc ( wave ) ;
12636: LD_ADDR_EXP 41
12640: PUSH
12641: LD_VAR 0 1
12645: PPUSH
12646: CALL 55279 0 1
12650: ST_TO_ADDR
// v := convoyWave div 12 ;
12651: LD_ADDR_VAR 0 4
12655: PUSH
12656: LD_EXP 41
12660: PUSH
12661: LD_INT 12
12663: DIV
12664: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] + v ;
12665: LD_ADDR_VAR 0 5
12669: PUSH
12670: LD_INT 5
12672: PUSH
12673: LD_INT 4
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: PUSH
12684: LD_OWVAR 67
12688: ARRAY
12689: PUSH
12690: LD_VAR 0 4
12694: PLUS
12695: ST_TO_ADDR
// if skill > 10 then
12696: LD_VAR 0 5
12700: PUSH
12701: LD_INT 10
12703: GREATER
12704: IFFALSE 12714
// skill := 10 ;
12706: LD_ADDR_VAR 0 5
12710: PUSH
12711: LD_INT 10
12713: ST_TO_ADDR
// tmp := [ ] ;
12714: LD_ADDR_VAR 0 8
12718: PUSH
12719: EMPTY
12720: ST_TO_ADDR
// if wave mod 5 = 0 then
12721: LD_VAR 0 1
12725: PUSH
12726: LD_INT 5
12728: MOD
12729: PUSH
12730: LD_INT 0
12732: EQUAL
12733: IFFALSE 12979
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12735: LD_ADDR_VAR 0 9
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 21
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 36
12752: PUSH
12753: LD_INT 45
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 48
12762: PUSH
12763: LD_INT 58
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: LD_INT 59
12772: PUSH
12773: LD_INT 88
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 76
12782: PUSH
12783: LD_INT 106
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 93
12792: PUSH
12793: LD_INT 150
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 92
12802: PUSH
12803: LD_INT 177
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: ST_TO_ADDR
// for i := 1 to 4 do
12819: LD_ADDR_VAR 0 3
12823: PUSH
12824: DOUBLE
12825: LD_INT 1
12827: DEC
12828: ST_TO_ADDR
12829: LD_INT 4
12831: PUSH
12832: FOR_TO
12833: IFFALSE 12975
// begin uc_side := convoySide ;
12835: LD_ADDR_OWVAR 20
12839: PUSH
12840: LD_EXP 42
12844: ST_TO_ADDR
// uc_nation := nation_russian ;
12845: LD_ADDR_OWVAR 21
12849: PUSH
12850: LD_INT 3
12852: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12853: LD_INT 0
12855: PPUSH
12856: LD_INT 1
12858: PPUSH
12859: LD_INT 4
12861: PPUSH
12862: CALL_OW 12
12866: PPUSH
12867: LD_VAR 0 5
12871: PPUSH
12872: CALL_OW 380
// un := CreateHuman ;
12876: LD_ADDR_VAR 0 6
12880: PUSH
12881: CALL_OW 44
12885: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12886: LD_VAR 0 6
12890: PPUSH
12891: LD_INT 3
12893: PPUSH
12894: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12898: LD_VAR 0 6
12902: PPUSH
12903: LD_INT 10
12905: PPUSH
12906: LD_INT 0
12908: PPUSH
12909: CALL_OW 49
// SetLives ( un , rand ( 400 , 1000 ) ) ;
12913: LD_VAR 0 6
12917: PPUSH
12918: LD_INT 400
12920: PPUSH
12921: LD_INT 1000
12923: PPUSH
12924: CALL_OW 12
12928: PPUSH
12929: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12933: LD_ADDR_EXP 40
12937: PUSH
12938: LD_EXP 40
12942: PPUSH
12943: LD_VAR 0 6
12947: PPUSH
12948: CALL 53906 0 2
12952: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12953: LD_ADDR_VAR 0 8
12957: PUSH
12958: LD_VAR 0 8
12962: PPUSH
12963: LD_VAR 0 6
12967: PPUSH
12968: CALL 53906 0 2
12972: ST_TO_ADDR
// end ;
12973: GO 12832
12975: POP
12976: POP
// end else
12977: GO 14160
// if wave mod 3 = 0 then
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 3
12986: MOD
12987: PUSH
12988: LD_INT 0
12990: EQUAL
12991: IFFALSE 13481
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12993: LD_ADDR_VAR 0 9
12997: PUSH
12998: LD_INT 133
13000: PUSH
13001: LD_INT 15
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 125
13010: PUSH
13011: LD_INT 34
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 109
13020: PUSH
13021: LD_INT 55
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 99
13030: PUSH
13031: LD_INT 64
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 133
13040: PUSH
13041: LD_INT 102
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 143
13050: PUSH
13051: LD_INT 136
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 127
13060: PUSH
13061: LD_INT 154
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 92
13070: PUSH
13071: LD_INT 152
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 93
13080: PUSH
13081: LD_INT 177
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: ST_TO_ADDR
// for i := 1 to 4 do
13099: LD_ADDR_VAR 0 3
13103: PUSH
13104: DOUBLE
13105: LD_INT 1
13107: DEC
13108: ST_TO_ADDR
13109: LD_INT 4
13111: PUSH
13112: FOR_TO
13113: IFFALSE 13477
// begin uc_side := convoySide ;
13115: LD_ADDR_OWVAR 20
13119: PUSH
13120: LD_EXP 42
13124: ST_TO_ADDR
// uc_nation := nation_russian ;
13125: LD_ADDR_OWVAR 21
13129: PUSH
13130: LD_INT 3
13132: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13133: LD_INT 0
13135: PPUSH
13136: LD_INT 1
13138: PPUSH
13139: LD_INT 4
13141: PPUSH
13142: CALL_OW 12
13146: PPUSH
13147: LD_VAR 0 5
13151: PPUSH
13152: CALL_OW 380
// un := CreateHuman ;
13156: LD_ADDR_VAR 0 6
13160: PUSH
13161: CALL_OW 44
13165: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
13166: LD_INT 21
13168: PUSH
13169: LD_INT 22
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 2
13181: PPUSH
13182: CALL_OW 12
13186: ARRAY
13187: PPUSH
13188: LD_INT 1
13190: PPUSH
13191: LD_INT 1
13193: PPUSH
13194: LD_INT 42
13196: PUSH
13197: LD_INT 43
13199: PUSH
13200: LD_INT 51
13202: PUSH
13203: LD_INT 44
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 1
13214: PPUSH
13215: LD_INT 4
13217: PPUSH
13218: CALL_OW 12
13222: ARRAY
13223: PPUSH
13224: LD_INT 60
13226: PPUSH
13227: LD_INT 90
13229: PPUSH
13230: CALL_OW 12
13234: PPUSH
13235: CALL 20736 0 5
// veh := CreateVehicle ;
13239: LD_ADDR_VAR 0 7
13243: PUSH
13244: CALL_OW 45
13248: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13249: LD_VAR 0 7
13253: PPUSH
13254: LD_INT 3
13256: PPUSH
13257: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13261: LD_VAR 0 7
13265: PPUSH
13266: LD_INT 400
13268: PPUSH
13269: LD_INT 1000
13271: PPUSH
13272: CALL_OW 12
13276: PPUSH
13277: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13281: LD_VAR 0 7
13285: PPUSH
13286: CALL_OW 264
13290: PUSH
13291: LD_INT 51
13293: EQUAL
13294: IFFALSE 13342
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
13296: LD_VAR 0 7
13300: PPUSH
13301: LD_INT 1
13303: PUSH
13304: LD_INT 2
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 1
13313: PPUSH
13314: LD_INT 2
13316: PPUSH
13317: CALL_OW 12
13321: ARRAY
13322: PPUSH
13323: LD_INT 10
13325: PUSH
13326: LD_INT 1
13328: PPUSH
13329: LD_INT 10
13331: PPUSH
13332: CALL_OW 12
13336: MUL
13337: PPUSH
13338: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13342: LD_INT 10
13344: PPUSH
13345: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13349: LD_VAR 0 7
13353: PPUSH
13354: LD_INT 7
13356: PPUSH
13357: LD_INT 0
13359: PPUSH
13360: CALL_OW 49
13364: IFFALSE 13342
// PlaceHumanInUnit ( un , veh ) ;
13366: LD_VAR 0 6
13370: PPUSH
13371: LD_VAR 0 7
13375: PPUSH
13376: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13380: LD_ADDR_EXP 40
13384: PUSH
13385: LD_EXP 40
13389: PPUSH
13390: LD_VAR 0 6
13394: PPUSH
13395: CALL 53906 0 2
13399: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13400: LD_ADDR_VAR 0 8
13404: PUSH
13405: LD_VAR 0 8
13409: PPUSH
13410: LD_VAR 0 6
13414: PPUSH
13415: CALL 53906 0 2
13419: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13420: LD_ADDR_EXP 40
13424: PUSH
13425: LD_EXP 40
13429: PPUSH
13430: LD_VAR 0 7
13434: PPUSH
13435: CALL 53906 0 2
13439: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13440: LD_ADDR_VAR 0 8
13444: PUSH
13445: LD_VAR 0 8
13449: PPUSH
13450: LD_VAR 0 7
13454: PPUSH
13455: CALL 53906 0 2
13459: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13460: LD_VAR 0 6
13464: PPUSH
13465: LD_INT 133
13467: PPUSH
13468: LD_INT 15
13470: PPUSH
13471: CALL_OW 111
// end ;
13475: GO 13112
13477: POP
13478: POP
// end else
13479: GO 14160
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
13481: LD_ADDR_VAR 0 9
13485: PUSH
13486: LD_INT 133
13488: PUSH
13489: LD_INT 15
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 125
13498: PUSH
13499: LD_INT 34
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 109
13508: PUSH
13509: LD_INT 55
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: LD_INT 99
13518: PUSH
13519: LD_INT 64
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 88
13528: PUSH
13529: LD_INT 70
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 74
13538: PUSH
13539: LD_INT 78
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 70
13548: PUSH
13549: LD_INT 91
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 80
13558: PUSH
13559: LD_INT 113
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 89
13568: PUSH
13569: LD_INT 133
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 91
13578: PUSH
13579: LD_INT 159
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 93
13588: PUSH
13589: LD_INT 177
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: ST_TO_ADDR
// for i := 1 to 2 do
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: DOUBLE
13615: LD_INT 1
13617: DEC
13618: ST_TO_ADDR
13619: LD_INT 2
13621: PUSH
13622: FOR_TO
13623: IFFALSE 13968
// begin uc_side := convoySide ;
13625: LD_ADDR_OWVAR 20
13629: PUSH
13630: LD_EXP 42
13634: ST_TO_ADDR
// uc_nation := nation_russian ;
13635: LD_ADDR_OWVAR 21
13639: PUSH
13640: LD_INT 3
13642: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13643: LD_INT 0
13645: PPUSH
13646: LD_INT 1
13648: PPUSH
13649: LD_INT 4
13651: PPUSH
13652: CALL_OW 12
13656: PPUSH
13657: LD_VAR 0 5
13661: PPUSH
13662: CALL_OW 380
// un := CreateHuman ;
13666: LD_ADDR_VAR 0 6
13670: PUSH
13671: CALL_OW 44
13675: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13676: LD_INT 21
13678: PUSH
13679: LD_INT 22
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_INT 2
13691: PPUSH
13692: CALL_OW 12
13696: ARRAY
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: LD_INT 42
13706: PUSH
13707: LD_INT 43
13709: PUSH
13710: LD_INT 51
13712: PUSH
13713: LD_INT 44
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 1
13724: PPUSH
13725: LD_INT 4
13727: PPUSH
13728: CALL_OW 12
13732: ARRAY
13733: PPUSH
13734: LD_INT 70
13736: PPUSH
13737: LD_INT 90
13739: PPUSH
13740: CALL_OW 12
13744: PPUSH
13745: CALL 20736 0 5
// veh := CreateVehicle ;
13749: LD_ADDR_VAR 0 7
13753: PUSH
13754: CALL_OW 45
13758: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13759: LD_VAR 0 7
13763: PPUSH
13764: LD_INT 3
13766: PPUSH
13767: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13771: LD_VAR 0 7
13775: PPUSH
13776: LD_INT 400
13778: PPUSH
13779: LD_INT 1000
13781: PPUSH
13782: CALL_OW 12
13786: PPUSH
13787: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13791: LD_VAR 0 7
13795: PPUSH
13796: CALL_OW 264
13800: PUSH
13801: LD_INT 51
13803: EQUAL
13804: IFFALSE 13833
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13806: LD_VAR 0 7
13810: PPUSH
13811: LD_INT 1
13813: PPUSH
13814: LD_INT 10
13816: PUSH
13817: LD_INT 1
13819: PPUSH
13820: LD_INT 10
13822: PPUSH
13823: CALL_OW 12
13827: MUL
13828: PPUSH
13829: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13833: LD_INT 10
13835: PPUSH
13836: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13840: LD_VAR 0 7
13844: PPUSH
13845: LD_INT 7
13847: PPUSH
13848: LD_INT 0
13850: PPUSH
13851: CALL_OW 49
13855: IFFALSE 13833
// PlaceHumanInUnit ( un , veh ) ;
13857: LD_VAR 0 6
13861: PPUSH
13862: LD_VAR 0 7
13866: PPUSH
13867: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13871: LD_ADDR_EXP 40
13875: PUSH
13876: LD_EXP 40
13880: PPUSH
13881: LD_VAR 0 6
13885: PPUSH
13886: CALL 53906 0 2
13890: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13891: LD_ADDR_VAR 0 8
13895: PUSH
13896: LD_VAR 0 8
13900: PPUSH
13901: LD_VAR 0 6
13905: PPUSH
13906: CALL 53906 0 2
13910: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13911: LD_ADDR_EXP 40
13915: PUSH
13916: LD_EXP 40
13920: PPUSH
13921: LD_VAR 0 7
13925: PPUSH
13926: CALL 53906 0 2
13930: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13931: LD_ADDR_VAR 0 8
13935: PUSH
13936: LD_VAR 0 8
13940: PPUSH
13941: LD_VAR 0 7
13945: PPUSH
13946: CALL 53906 0 2
13950: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13951: LD_VAR 0 6
13955: PPUSH
13956: LD_INT 133
13958: PPUSH
13959: LD_INT 15
13961: PPUSH
13962: CALL_OW 111
// end ;
13966: GO 13622
13968: POP
13969: POP
// for i := 1 to rand ( 3 , 5 ) do
13970: LD_ADDR_VAR 0 3
13974: PUSH
13975: DOUBLE
13976: LD_INT 1
13978: DEC
13979: ST_TO_ADDR
13980: LD_INT 3
13982: PPUSH
13983: LD_INT 5
13985: PPUSH
13986: CALL_OW 12
13990: PUSH
13991: FOR_TO
13992: IFFALSE 14158
// begin uc_side := convoySide ;
13994: LD_ADDR_OWVAR 20
13998: PUSH
13999: LD_EXP 42
14003: ST_TO_ADDR
// uc_nation := nation_russian ;
14004: LD_ADDR_OWVAR 21
14008: PUSH
14009: LD_INT 3
14011: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
14012: LD_INT 0
14014: PPUSH
14015: LD_INT 1
14017: PPUSH
14018: LD_INT 4
14020: PPUSH
14021: CALL_OW 12
14025: PPUSH
14026: LD_VAR 0 5
14030: PPUSH
14031: CALL_OW 380
// un := CreateHuman ;
14035: LD_ADDR_VAR 0 6
14039: PUSH
14040: CALL_OW 44
14044: ST_TO_ADDR
// SetDir ( un , 3 ) ;
14045: LD_VAR 0 6
14049: PPUSH
14050: LD_INT 3
14052: PPUSH
14053: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
14057: LD_INT 35
14059: PPUSH
14060: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
14064: LD_VAR 0 6
14068: PPUSH
14069: LD_INT 7
14071: PPUSH
14072: LD_INT 0
14074: PPUSH
14075: CALL_OW 49
14079: IFFALSE 14057
// SetLives ( un , rand ( 400 , 1000 ) ) ;
14081: LD_VAR 0 6
14085: PPUSH
14086: LD_INT 400
14088: PPUSH
14089: LD_INT 1000
14091: PPUSH
14092: CALL_OW 12
14096: PPUSH
14097: CALL_OW 234
// convoys := Join ( convoys , un ) ;
14101: LD_ADDR_EXP 40
14105: PUSH
14106: LD_EXP 40
14110: PPUSH
14111: LD_VAR 0 6
14115: PPUSH
14116: CALL 53906 0 2
14120: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
14121: LD_ADDR_VAR 0 8
14125: PUSH
14126: LD_VAR 0 8
14130: PPUSH
14131: LD_VAR 0 6
14135: PPUSH
14136: CALL 53906 0 2
14140: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
14141: LD_VAR 0 6
14145: PPUSH
14146: LD_INT 133
14148: PPUSH
14149: LD_INT 15
14151: PPUSH
14152: CALL_OW 111
// end ;
14156: GO 13991
14158: POP
14159: POP
// end ; if not tmp then
14160: LD_VAR 0 8
14164: NOT
14165: IFFALSE 14169
// exit ;
14167: GO 14477
// repeat wait ( 0 0$1 ) ;
14169: LD_INT 35
14171: PPUSH
14172: CALL_OW 67
// for i in tmp do
14176: LD_ADDR_VAR 0 3
14180: PUSH
14181: LD_VAR 0 8
14185: PUSH
14186: FOR_IN
14187: IFFALSE 14468
// begin if IsDead ( i ) then
14189: LD_VAR 0 3
14193: PPUSH
14194: CALL_OW 301
14198: IFFALSE 14218
// tmp := tmp diff i else
14200: LD_ADDR_VAR 0 8
14204: PUSH
14205: LD_VAR 0 8
14209: PUSH
14210: LD_VAR 0 3
14214: DIFF
14215: ST_TO_ADDR
14216: GO 14466
// if IsInArea ( i , southEndArea ) then
14218: LD_VAR 0 3
14222: PPUSH
14223: LD_INT 9
14225: PPUSH
14226: CALL_OW 308
14230: IFFALSE 14383
// begin tmp := tmp diff i ;
14232: LD_ADDR_VAR 0 8
14236: PUSH
14237: LD_VAR 0 8
14241: PUSH
14242: LD_VAR 0 3
14246: DIFF
14247: ST_TO_ADDR
// convoys := convoys diff i ;
14248: LD_ADDR_EXP 40
14252: PUSH
14253: LD_EXP 40
14257: PUSH
14258: LD_VAR 0 3
14262: DIFF
14263: ST_TO_ADDR
// if GetType ( i ) = unit_human then
14264: LD_VAR 0 3
14268: PPUSH
14269: CALL_OW 247
14273: PUSH
14274: LD_INT 1
14276: EQUAL
14277: IFFALSE 14298
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
14279: LD_EXP 42
14283: PPUSH
14284: LD_INT 7
14286: PPUSH
14287: CALL 8544 0 1
14291: PPUSH
14292: CALL 8378 0 2
14296: GO 14357
// begin tmp := tmp diff IsInUnit ( i ) ;
14298: LD_ADDR_VAR 0 8
14302: PUSH
14303: LD_VAR 0 8
14307: PUSH
14308: LD_VAR 0 3
14312: PPUSH
14313: CALL_OW 310
14317: DIFF
14318: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
14319: LD_ADDR_EXP 40
14323: PUSH
14324: LD_EXP 40
14328: PUSH
14329: LD_VAR 0 3
14333: PPUSH
14334: CALL_OW 310
14338: DIFF
14339: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
14340: LD_EXP 42
14344: PPUSH
14345: LD_INT 8
14347: PPUSH
14348: CALL 8544 0 1
14352: PPUSH
14353: CALL 8378 0 2
// end ; RemoveUnit ( i ) ;
14357: LD_VAR 0 3
14361: PPUSH
14362: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
14366: LD_ADDR_EXP 5
14370: PUSH
14371: LD_EXP 5
14375: PPUSH
14376: CALL 55279 0 1
14380: ST_TO_ADDR
// end else
14381: GO 14466
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 247
14392: PUSH
14393: LD_INT 2
14395: EQUAL
14396: IFFALSE 14413
14398: PUSH
14399: LD_VAR 0 3
14403: PPUSH
14404: CALL_OW 261
14408: PUSH
14409: LD_INT 0
14411: EQUAL
14412: AND
14413: IFFALSE 14449
// begin tmp := tmp diff i ;
14415: LD_ADDR_VAR 0 8
14419: PUSH
14420: LD_VAR 0 8
14424: PUSH
14425: LD_VAR 0 3
14429: DIFF
14430: ST_TO_ADDR
// convoys := convoys diff i ;
14431: LD_ADDR_EXP 40
14435: PUSH
14436: LD_EXP 40
14440: PUSH
14441: LD_VAR 0 3
14445: DIFF
14446: ST_TO_ADDR
// end else
14447: GO 14466
// MoveTo ( i , path , southEndArea ) ;
14449: LD_VAR 0 3
14453: PPUSH
14454: LD_VAR 0 9
14458: PPUSH
14459: LD_INT 9
14461: PPUSH
14462: CALL 14482 0 3
// end ;
14466: GO 14186
14468: POP
14469: POP
// until not tmp ;
14470: LD_VAR 0 8
14474: NOT
14475: IFFALSE 14169
// end ;
14477: LD_VAR 0 2
14481: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
14482: LD_INT 0
14484: PPUSH
14485: PPUSH
14486: PPUSH
14487: PPUSH
14488: PPUSH
14489: PPUSH
// if not unit then
14490: LD_VAR 0 1
14494: NOT
14495: IFFALSE 14499
// exit ;
14497: GO 15275
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
14499: LD_ADDR_VAR 0 9
14503: PUSH
14504: LD_INT 29
14506: PUSH
14507: LD_INT 91
14509: PUSH
14510: LD_INT 49
14512: PUSH
14513: LD_INT 51
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: ST_TO_ADDR
// if IsOk ( unit ) then
14522: LD_VAR 0 1
14526: PPUSH
14527: CALL_OW 302
14531: IFFALSE 15275
// begin tag := GetTag ( unit ) + 1 ;
14533: LD_ADDR_VAR 0 6
14537: PUSH
14538: LD_VAR 0 1
14542: PPUSH
14543: CALL_OW 110
14547: PUSH
14548: LD_INT 1
14550: PLUS
14551: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
14552: LD_ADDR_VAR 0 5
14556: PUSH
14557: LD_VAR 0 1
14561: PPUSH
14562: CALL_OW 250
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 251
14576: PPUSH
14577: LD_INT 3
14579: PPUSH
14580: CALL 56414 0 3
14584: ST_TO_ADDR
// type := GetType ( unit ) ;
14585: LD_ADDR_VAR 0 7
14589: PUSH
14590: LD_VAR 0 1
14594: PPUSH
14595: CALL_OW 247
14599: ST_TO_ADDR
// if type = unit_human then
14600: LD_VAR 0 7
14604: PUSH
14605: LD_INT 1
14607: EQUAL
14608: IFFALSE 14700
// begin vehicle := IsInUnit ( unit ) ;
14610: LD_ADDR_VAR 0 8
14614: PUSH
14615: LD_VAR 0 1
14619: PPUSH
14620: CALL_OW 310
14624: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14625: LD_VAR 0 8
14629: IFFALSE 14646
14631: PUSH
14632: LD_VAR 0 8
14636: PPUSH
14637: CALL_OW 261
14641: PUSH
14642: LD_INT 0
14644: EQUAL
14645: AND
14646: IFFALSE 14698
// begin ComExitVehicle ( unit ) ;
14648: LD_VAR 0 1
14652: PPUSH
14653: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14657: LD_VAR 0 1
14661: PPUSH
14662: LD_VAR 0 2
14666: PUSH
14667: LD_VAR 0 6
14671: ARRAY
14672: PUSH
14673: LD_INT 1
14675: ARRAY
14676: PPUSH
14677: LD_VAR 0 2
14681: PUSH
14682: LD_VAR 0 6
14686: ARRAY
14687: PUSH
14688: LD_INT 2
14690: ARRAY
14691: PPUSH
14692: CALL_OW 171
// exit ;
14696: GO 15275
// end ; end else
14698: GO 14775
// begin if GetFuel ( unit ) = 0 then
14700: LD_VAR 0 1
14704: PPUSH
14705: CALL_OW 261
14709: PUSH
14710: LD_INT 0
14712: EQUAL
14713: IFFALSE 14775
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14715: LD_VAR 0 1
14719: PPUSH
14720: CALL_OW 311
14724: PPUSH
14725: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 311
14738: PPUSH
14739: LD_VAR 0 2
14743: PUSH
14744: LD_VAR 0 6
14748: ARRAY
14749: PUSH
14750: LD_INT 1
14752: ARRAY
14753: PPUSH
14754: LD_VAR 0 2
14758: PUSH
14759: LD_VAR 0 6
14763: ARRAY
14764: PUSH
14765: LD_INT 2
14767: ARRAY
14768: PPUSH
14769: CALL_OW 171
// exit ;
14773: GO 15275
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14775: LD_VAR 0 7
14779: PUSH
14780: LD_INT 2
14782: EQUAL
14783: IFFALSE 14800
14785: PUSH
14786: LD_VAR 0 1
14790: PPUSH
14791: CALL_OW 264
14795: PUSH
14796: LD_INT 51
14798: EQUAL
14799: AND
14800: IFFALSE 14816
14802: PUSH
14803: LD_VAR 0 1
14807: PPUSH
14808: LD_INT 29
14810: PPUSH
14811: CALL_OW 308
14815: AND
14816: IFFALSE 14848
14818: PUSH
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 1
14826: PPUSH
14827: CALL_OW 289
14831: IFTRUE 14847
14833: PUSH
14834: LD_VAR 0 1
14838: PPUSH
14839: LD_INT 2
14841: PPUSH
14842: CALL_OW 289
14846: OR
14847: AND
14848: IFFALSE 14896
// begin goToUnload := Join ( goToUnload , unit ) ;
14850: LD_ADDR_EXP 8
14854: PUSH
14855: LD_EXP 8
14859: PPUSH
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL 53906 0 2
14869: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14870: LD_VAR 0 1
14874: PPUSH
14875: LD_INT 113
14877: PPUSH
14878: LD_INT 117
14880: PPUSH
14881: CALL_OW 111
// AddComUnload ( unit ) ;
14885: LD_VAR 0 1
14889: PPUSH
14890: CALL_OW 219
// exit ;
14894: GO 15275
// end ; if unit in goToUnload then
14896: LD_VAR 0 1
14900: PUSH
14901: LD_EXP 8
14905: IN
14906: IFFALSE 14984
// begin if GetCargo ( unit , mat_cans ) = 0 and GetCargo ( unit , mat_oil ) = 0 then
14908: LD_VAR 0 1
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: CALL_OW 289
14920: PUSH
14921: LD_INT 0
14923: EQUAL
14924: IFFALSE 14944
14926: PUSH
14927: LD_VAR 0 1
14931: PPUSH
14932: LD_INT 2
14934: PPUSH
14935: CALL_OW 289
14939: PUSH
14940: LD_INT 0
14942: EQUAL
14943: AND
14944: IFFALSE 14982
// begin SetTag ( unit , tag + 2 ) ;
14946: LD_VAR 0 1
14950: PPUSH
14951: LD_VAR 0 6
14955: PUSH
14956: LD_INT 2
14958: PLUS
14959: PPUSH
14960: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14964: LD_ADDR_EXP 8
14968: PUSH
14969: LD_EXP 8
14973: PUSH
14974: LD_VAR 0 1
14978: DIFF
14979: ST_TO_ADDR
// end else
14980: GO 14984
// exit ;
14982: GO 15275
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14984: LD_VAR 0 7
14988: PUSH
14989: LD_INT 2
14991: EQUAL
14992: IFFALSE 15004
14994: PUSH
14995: LD_VAR 0 5
14999: PUSH
15000: LD_INT 3
15002: GREATER
15003: AND
15004: IFFALSE 15024
15006: PUSH
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 264
15016: PUSH
15017: LD_VAR 0 9
15021: IN
15022: NOT
15023: AND
15024: IFFALSE 15063
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
15026: LD_VAR 0 1
15030: PPUSH
15031: LD_VAR 0 5
15035: PUSH
15036: LD_INT 1
15038: ARRAY
15039: PUSH
15040: LD_INT 1
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 5
15048: PUSH
15049: LD_INT 1
15051: ARRAY
15052: PUSH
15053: LD_INT 2
15055: ARRAY
15056: PPUSH
15057: CALL_OW 116
15061: GO 15275
// if path > tag then
15063: LD_VAR 0 2
15067: PUSH
15068: LD_VAR 0 6
15072: GREATER
15073: IFFALSE 15244
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
15075: LD_VAR 0 1
15079: PPUSH
15080: LD_VAR 0 2
15084: PUSH
15085: LD_VAR 0 6
15089: ARRAY
15090: PUSH
15091: LD_INT 1
15093: ARRAY
15094: PPUSH
15095: LD_VAR 0 2
15099: PUSH
15100: LD_VAR 0 6
15104: ARRAY
15105: PUSH
15106: LD_INT 2
15108: ARRAY
15109: PPUSH
15110: CALL_OW 297
15114: PUSH
15115: LD_INT 6
15117: GREATER
15118: IFFALSE 15228
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
15120: LD_VAR 0 1
15124: PPUSH
15125: CALL_OW 257
15129: PUSH
15130: LD_INT 2
15132: PUSH
15133: LD_INT 3
15135: PUSH
15136: LD_INT 4
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: IN
15144: IFFALSE 15187
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
15146: LD_VAR 0 1
15150: PPUSH
15151: LD_VAR 0 2
15155: PUSH
15156: LD_VAR 0 6
15160: ARRAY
15161: PUSH
15162: LD_INT 1
15164: ARRAY
15165: PPUSH
15166: LD_VAR 0 2
15170: PUSH
15171: LD_VAR 0 6
15175: ARRAY
15176: PUSH
15177: LD_INT 2
15179: ARRAY
15180: PPUSH
15181: CALL_OW 111
15185: GO 15226
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
15187: LD_VAR 0 1
15191: PPUSH
15192: LD_VAR 0 2
15196: PUSH
15197: LD_VAR 0 6
15201: ARRAY
15202: PUSH
15203: LD_INT 1
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 2
15211: PUSH
15212: LD_VAR 0 6
15216: ARRAY
15217: PUSH
15218: LD_INT 2
15220: ARRAY
15221: PPUSH
15222: CALL_OW 114
15226: GO 15242
// SetTag ( unit , tag ) ;
15228: LD_VAR 0 1
15232: PPUSH
15233: LD_VAR 0 6
15237: PPUSH
15238: CALL_OW 109
// end else
15242: GO 15275
// if not IsInArea ( unit , area ) then
15244: LD_VAR 0 1
15248: PPUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: CALL_OW 308
15258: NOT
15259: IFFALSE 15275
// ComMoveToArea ( unit , area ) ;
15261: LD_VAR 0 1
15265: PPUSH
15266: LD_VAR 0 3
15270: PPUSH
15271: CALL_OW 113
// end ; end ; end_of_file
15275: LD_VAR 0 4
15279: RET
// every 0 0$20 trigger game do
15280: LD_EXP 2
15284: IFFALSE 15325
15286: GO 15288
15288: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15289: LD_INT 11
15291: PUSH
15292: LD_INT 12
15294: PUSH
15295: LD_INT 13
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: PPUSH
15303: LD_EXP 29
15307: PUSH
15308: LD_INT 2
15310: ARRAY
15311: PPUSH
15312: LD_EXP 29
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL 15326 0 3
15325: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
15326: LD_INT 0
15328: PPUSH
15329: PPUSH
15330: PPUSH
// if not areas then
15331: LD_VAR 0 1
15335: NOT
15336: IFFALSE 15340
// exit ;
15338: GO 15548
// x := 5 ;
15340: LD_ADDR_VAR 0 6
15344: PUSH
15345: LD_INT 5
15347: ST_TO_ADDR
// repeat wait ( time ) ;
15348: LD_VAR 0 2
15352: PPUSH
15353: CALL_OW 67
// for i in areas do
15357: LD_ADDR_VAR 0 5
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: FOR_IN
15368: IFFALSE 15457
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
15370: LD_VAR 0 5
15374: PPUSH
15375: LD_INT 1
15377: PPUSH
15378: CALL_OW 287
15382: PUSH
15383: LD_INT 15
15385: PUSH
15386: LD_INT 12
15388: PUSH
15389: LD_INT 10
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: PUSH
15397: LD_OWVAR 67
15401: ARRAY
15402: LESS
15403: IFFALSE 15455
// begin wait ( 0 0$10 * Difficulty ) ;
15405: LD_INT 350
15407: PUSH
15408: LD_OWVAR 67
15412: MUL
15413: PPUSH
15414: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15418: LD_VAR 0 6
15422: PPUSH
15423: LD_VAR 0 5
15427: PPUSH
15428: LD_INT 1
15430: PPUSH
15431: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15435: LD_ADDR_VAR 0 3
15439: PUSH
15440: LD_VAR 0 3
15444: PUSH
15445: LD_VAR 0 6
15449: PUSH
15450: LD_INT 10
15452: MUL
15453: MINUS
15454: ST_TO_ADDR
// end ; end ;
15455: GO 15367
15457: POP
15458: POP
// time := time + ( 0 0$5 * Difficulty ) ;
15459: LD_ADDR_VAR 0 2
15463: PUSH
15464: LD_VAR 0 2
15468: PUSH
15469: LD_INT 175
15471: PUSH
15472: LD_OWVAR 67
15476: MUL
15477: PLUS
15478: ST_TO_ADDR
// x := x - 1 ;
15479: LD_ADDR_VAR 0 6
15483: PUSH
15484: LD_VAR 0 6
15488: PUSH
15489: LD_INT 1
15491: MINUS
15492: ST_TO_ADDR
// if x = 0 then
15493: LD_VAR 0 6
15497: PUSH
15498: LD_INT 0
15500: EQUAL
15501: IFFALSE 15511
// x := 5 ;
15503: LD_ADDR_VAR 0 6
15507: PUSH
15508: LD_INT 5
15510: ST_TO_ADDR
// if time > 2 2$00 then
15511: LD_VAR 0 2
15515: PUSH
15516: LD_INT 4200
15518: GREATER
15519: IFFALSE 15529
// time := 0 0$40 ;
15521: LD_ADDR_VAR 0 2
15525: PUSH
15526: LD_INT 1400
15528: ST_TO_ADDR
// until not game or amount <= 0 ;
15529: LD_EXP 2
15533: NOT
15534: IFTRUE 15546
15536: PUSH
15537: LD_VAR 0 3
15541: PUSH
15542: LD_INT 0
15544: LESSEQUAL
15545: OR
15546: IFFALSE 15348
// end ; end_of_file
15548: LD_VAR 0 4
15552: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15553: LD_VAR 0 1
15557: PUSH
15558: LD_INT 200
15560: DOUBLE
15561: GREATEREQUAL
15562: IFFALSE 15570
15564: LD_INT 299
15566: DOUBLE
15567: LESSEQUAL
15568: IFTRUE 15572
15570: GO 15604
15572: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15573: LD_VAR 0 1
15577: PPUSH
15578: LD_VAR 0 2
15582: PPUSH
15583: LD_VAR 0 3
15587: PPUSH
15588: LD_VAR 0 4
15592: PPUSH
15593: LD_VAR 0 5
15597: PPUSH
15598: CALL 60010 0 5
15602: GO 15681
15604: LD_INT 300
15606: DOUBLE
15607: GREATEREQUAL
15608: IFFALSE 15616
15610: LD_INT 399
15612: DOUBLE
15613: LESSEQUAL
15614: IFTRUE 15618
15616: GO 15680
15618: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15619: LD_VAR 0 1
15623: PPUSH
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_VAR 0 3
15633: PPUSH
15634: LD_VAR 0 4
15638: PPUSH
15639: LD_VAR 0 5
15643: PPUSH
15644: LD_VAR 0 6
15648: PPUSH
15649: LD_VAR 0 7
15653: PPUSH
15654: LD_VAR 0 8
15658: PPUSH
15659: LD_VAR 0 9
15663: PPUSH
15664: LD_VAR 0 10
15668: PPUSH
15669: LD_VAR 0 11
15673: PPUSH
15674: CALL 66331 0 11
15678: GO 15681
15680: POP
// end ;
15681: PPOPN 11
15683: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15684: LD_VAR 0 1
15688: PPUSH
15689: LD_VAR 0 2
15693: PPUSH
15694: LD_VAR 0 3
15698: PPUSH
15699: LD_VAR 0 4
15703: PPUSH
15704: LD_VAR 0 5
15708: PPUSH
15709: CALL 59310 0 5
// end ; end_of_file
15713: PPOPN 5
15715: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15716: LD_INT 0
15718: PPUSH
15719: PPUSH
// if exist_mode then
15720: LD_VAR 0 2
15724: IFFALSE 15770
// begin unit := CreateCharacter ( prefix & ident ) ;
15726: LD_ADDR_VAR 0 5
15730: PUSH
15731: LD_VAR 0 3
15735: PUSH
15736: LD_VAR 0 1
15740: STR
15741: PPUSH
15742: CALL_OW 34
15746: ST_TO_ADDR
// if unit then
15747: LD_VAR 0 5
15751: IFFALSE 15768
// DeleteCharacters ( prefix & ident ) ;
15753: LD_VAR 0 3
15757: PUSH
15758: LD_VAR 0 1
15762: STR
15763: PPUSH
15764: CALL_OW 40
// end else
15768: GO 15785
// unit := NewCharacter ( ident ) ;
15770: LD_ADDR_VAR 0 5
15774: PUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 25
15784: ST_TO_ADDR
// result := unit ;
15785: LD_ADDR_VAR 0 4
15789: PUSH
15790: LD_VAR 0 5
15794: ST_TO_ADDR
// end ;
15795: LD_VAR 0 4
15799: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15800: LD_INT 0
15802: PPUSH
15803: PPUSH
// if exist_mode then
15804: LD_VAR 0 2
15808: IFFALSE 15833
// unit := CreateCharacter ( prefix & ident ) else
15810: LD_ADDR_VAR 0 5
15814: PUSH
15815: LD_VAR 0 3
15819: PUSH
15820: LD_VAR 0 1
15824: STR
15825: PPUSH
15826: CALL_OW 34
15830: ST_TO_ADDR
15831: GO 15848
// unit := NewCharacter ( ident ) ;
15833: LD_ADDR_VAR 0 5
15837: PUSH
15838: LD_VAR 0 1
15842: PPUSH
15843: CALL_OW 25
15847: ST_TO_ADDR
// result := unit ;
15848: LD_ADDR_VAR 0 4
15852: PUSH
15853: LD_VAR 0 5
15857: ST_TO_ADDR
// end ;
15858: LD_VAR 0 4
15862: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15863: LD_INT 0
15865: PPUSH
15866: PPUSH
// if not side or not nation then
15867: LD_VAR 0 1
15871: NOT
15872: IFTRUE 15881
15874: PUSH
15875: LD_VAR 0 2
15879: NOT
15880: OR
15881: IFFALSE 15885
// exit ;
15883: GO 16679
// case nation of nation_american :
15885: LD_VAR 0 2
15889: PUSH
15890: LD_INT 1
15892: DOUBLE
15893: EQUAL
15894: IFTRUE 15898
15896: GO 16120
15898: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15899: LD_ADDR_VAR 0 4
15903: PUSH
15904: LD_INT 35
15906: PUSH
15907: LD_INT 45
15909: PUSH
15910: LD_INT 46
15912: PUSH
15913: LD_INT 47
15915: PUSH
15916: LD_INT 82
15918: PUSH
15919: LD_INT 83
15921: PUSH
15922: LD_INT 84
15924: PUSH
15925: LD_INT 85
15927: PUSH
15928: LD_INT 86
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: LD_INT 2
15936: PUSH
15937: LD_INT 6
15939: PUSH
15940: LD_INT 15
15942: PUSH
15943: LD_INT 16
15945: PUSH
15946: LD_INT 7
15948: PUSH
15949: LD_INT 12
15951: PUSH
15952: LD_INT 13
15954: PUSH
15955: LD_INT 10
15957: PUSH
15958: LD_INT 14
15960: PUSH
15961: LD_INT 20
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 22
15969: PUSH
15970: LD_INT 25
15972: PUSH
15973: LD_INT 32
15975: PUSH
15976: LD_INT 27
15978: PUSH
15979: LD_INT 36
15981: PUSH
15982: LD_INT 69
15984: PUSH
15985: LD_INT 39
15987: PUSH
15988: LD_INT 34
15990: PUSH
15991: LD_INT 40
15993: PUSH
15994: LD_INT 48
15996: PUSH
15997: LD_INT 49
15999: PUSH
16000: LD_INT 50
16002: PUSH
16003: LD_INT 51
16005: PUSH
16006: LD_INT 52
16008: PUSH
16009: LD_INT 53
16011: PUSH
16012: LD_INT 54
16014: PUSH
16015: LD_INT 55
16017: PUSH
16018: LD_INT 56
16020: PUSH
16021: LD_INT 57
16023: PUSH
16024: LD_INT 58
16026: PUSH
16027: LD_INT 59
16029: PUSH
16030: LD_INT 60
16032: PUSH
16033: LD_INT 61
16035: PUSH
16036: LD_INT 62
16038: PUSH
16039: LD_INT 80
16041: PUSH
16042: LD_INT 82
16044: PUSH
16045: LD_INT 83
16047: PUSH
16048: LD_INT 84
16050: PUSH
16051: LD_INT 85
16053: PUSH
16054: LD_INT 86
16056: PUSH
16057: LD_INT 90
16059: PUSH
16060: LD_INT 93
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: ST_TO_ADDR
16118: GO 16601
16120: LD_INT 2
16122: DOUBLE
16123: EQUAL
16124: IFTRUE 16128
16126: GO 16362
16128: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16129: LD_ADDR_VAR 0 4
16133: PUSH
16134: LD_INT 35
16136: PUSH
16137: LD_INT 45
16139: PUSH
16140: LD_INT 46
16142: PUSH
16143: LD_INT 47
16145: PUSH
16146: LD_INT 82
16148: PUSH
16149: LD_INT 83
16151: PUSH
16152: LD_INT 84
16154: PUSH
16155: LD_INT 85
16157: PUSH
16158: LD_INT 87
16160: PUSH
16161: LD_INT 70
16163: PUSH
16164: LD_INT 1
16166: PUSH
16167: LD_INT 11
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 4
16175: PUSH
16176: LD_INT 5
16178: PUSH
16179: LD_INT 6
16181: PUSH
16182: LD_INT 15
16184: PUSH
16185: LD_INT 18
16187: PUSH
16188: LD_INT 7
16190: PUSH
16191: LD_INT 17
16193: PUSH
16194: LD_INT 8
16196: PUSH
16197: LD_INT 20
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 22
16205: PUSH
16206: LD_INT 72
16208: PUSH
16209: LD_INT 26
16211: PUSH
16212: LD_INT 69
16214: PUSH
16215: LD_INT 39
16217: PUSH
16218: LD_INT 40
16220: PUSH
16221: LD_INT 41
16223: PUSH
16224: LD_INT 42
16226: PUSH
16227: LD_INT 43
16229: PUSH
16230: LD_INT 48
16232: PUSH
16233: LD_INT 49
16235: PUSH
16236: LD_INT 50
16238: PUSH
16239: LD_INT 51
16241: PUSH
16242: LD_INT 52
16244: PUSH
16245: LD_INT 53
16247: PUSH
16248: LD_INT 54
16250: PUSH
16251: LD_INT 55
16253: PUSH
16254: LD_INT 56
16256: PUSH
16257: LD_INT 60
16259: PUSH
16260: LD_INT 61
16262: PUSH
16263: LD_INT 62
16265: PUSH
16266: LD_INT 66
16268: PUSH
16269: LD_INT 67
16271: PUSH
16272: LD_INT 68
16274: PUSH
16275: LD_INT 81
16277: PUSH
16278: LD_INT 82
16280: PUSH
16281: LD_INT 83
16283: PUSH
16284: LD_INT 84
16286: PUSH
16287: LD_INT 85
16289: PUSH
16290: LD_INT 87
16292: PUSH
16293: LD_INT 88
16295: PUSH
16296: LD_INT 92
16298: PUSH
16299: LD_INT 94
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: ST_TO_ADDR
16360: GO 16601
16362: LD_INT 3
16364: DOUBLE
16365: EQUAL
16366: IFTRUE 16370
16368: GO 16600
16370: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16371: LD_ADDR_VAR 0 4
16375: PUSH
16376: LD_INT 46
16378: PUSH
16379: LD_INT 47
16381: PUSH
16382: LD_INT 1
16384: PUSH
16385: LD_INT 2
16387: PUSH
16388: LD_INT 82
16390: PUSH
16391: LD_INT 83
16393: PUSH
16394: LD_INT 84
16396: PUSH
16397: LD_INT 85
16399: PUSH
16400: LD_INT 86
16402: PUSH
16403: LD_INT 11
16405: PUSH
16406: LD_INT 9
16408: PUSH
16409: LD_INT 20
16411: PUSH
16412: LD_INT 19
16414: PUSH
16415: LD_INT 21
16417: PUSH
16418: LD_INT 24
16420: PUSH
16421: LD_INT 22
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 28
16429: PUSH
16430: LD_INT 29
16432: PUSH
16433: LD_INT 30
16435: PUSH
16436: LD_INT 31
16438: PUSH
16439: LD_INT 37
16441: PUSH
16442: LD_INT 38
16444: PUSH
16445: LD_INT 32
16447: PUSH
16448: LD_INT 27
16450: PUSH
16451: LD_INT 33
16453: PUSH
16454: LD_INT 69
16456: PUSH
16457: LD_INT 39
16459: PUSH
16460: LD_INT 34
16462: PUSH
16463: LD_INT 40
16465: PUSH
16466: LD_INT 71
16468: PUSH
16469: LD_INT 23
16471: PUSH
16472: LD_INT 44
16474: PUSH
16475: LD_INT 48
16477: PUSH
16478: LD_INT 49
16480: PUSH
16481: LD_INT 50
16483: PUSH
16484: LD_INT 51
16486: PUSH
16487: LD_INT 52
16489: PUSH
16490: LD_INT 53
16492: PUSH
16493: LD_INT 54
16495: PUSH
16496: LD_INT 55
16498: PUSH
16499: LD_INT 56
16501: PUSH
16502: LD_INT 57
16504: PUSH
16505: LD_INT 58
16507: PUSH
16508: LD_INT 59
16510: PUSH
16511: LD_INT 63
16513: PUSH
16514: LD_INT 64
16516: PUSH
16517: LD_INT 65
16519: PUSH
16520: LD_INT 82
16522: PUSH
16523: LD_INT 83
16525: PUSH
16526: LD_INT 84
16528: PUSH
16529: LD_INT 85
16531: PUSH
16532: LD_INT 86
16534: PUSH
16535: LD_INT 89
16537: PUSH
16538: LD_INT 91
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: ST_TO_ADDR
16598: GO 16601
16600: POP
// if state > - 1 and state < 3 then
16601: LD_VAR 0 3
16605: PUSH
16606: LD_INT 1
16608: NEG
16609: GREATER
16610: IFFALSE 16622
16612: PUSH
16613: LD_VAR 0 3
16617: PUSH
16618: LD_INT 3
16620: LESS
16621: AND
16622: IFFALSE 16679
// for i in result do
16624: LD_ADDR_VAR 0 5
16628: PUSH
16629: LD_VAR 0 4
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16677
// if GetTech ( i , side ) <> state then
16637: LD_VAR 0 5
16641: PPUSH
16642: LD_VAR 0 1
16646: PPUSH
16647: CALL_OW 321
16651: PUSH
16652: LD_VAR 0 3
16656: NONEQUAL
16657: IFFALSE 16675
// result := result diff i ;
16659: LD_ADDR_VAR 0 4
16663: PUSH
16664: LD_VAR 0 4
16668: PUSH
16669: LD_VAR 0 5
16673: DIFF
16674: ST_TO_ADDR
16675: GO 16634
16677: POP
16678: POP
// end ;
16679: LD_VAR 0 4
16683: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16684: LD_INT 0
16686: PPUSH
16687: PPUSH
16688: PPUSH
// result := true ;
16689: LD_ADDR_VAR 0 3
16693: PUSH
16694: LD_INT 1
16696: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16697: LD_ADDR_VAR 0 5
16701: PUSH
16702: LD_VAR 0 2
16706: PPUSH
16707: CALL_OW 480
16711: ST_TO_ADDR
// if not tmp then
16712: LD_VAR 0 5
16716: NOT
16717: IFFALSE 16721
// exit ;
16719: GO 16770
// for i in tmp do
16721: LD_ADDR_VAR 0 4
16725: PUSH
16726: LD_VAR 0 5
16730: PUSH
16731: FOR_IN
16732: IFFALSE 16768
// if GetTech ( i , side ) <> state_researched then
16734: LD_VAR 0 4
16738: PPUSH
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 321
16748: PUSH
16749: LD_INT 2
16751: NONEQUAL
16752: IFFALSE 16766
// begin result := false ;
16754: LD_ADDR_VAR 0 3
16758: PUSH
16759: LD_INT 0
16761: ST_TO_ADDR
// exit ;
16762: POP
16763: POP
16764: GO 16770
// end ;
16766: GO 16731
16768: POP
16769: POP
// end ;
16770: LD_VAR 0 3
16774: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16775: LD_INT 0
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16790: LD_VAR 0 1
16794: NOT
16795: IFTRUE 16812
16797: PUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 257
16807: PUSH
16808: LD_INT 9
16810: NONEQUAL
16811: OR
16812: IFFALSE 16816
// exit ;
16814: GO 17395
// side := GetSide ( unit ) ;
16816: LD_ADDR_VAR 0 9
16820: PUSH
16821: LD_VAR 0 1
16825: PPUSH
16826: CALL_OW 255
16830: ST_TO_ADDR
// tech_space := tech_spacanom ;
16831: LD_ADDR_VAR 0 12
16835: PUSH
16836: LD_INT 29
16838: ST_TO_ADDR
// tech_time := tech_taurad ;
16839: LD_ADDR_VAR 0 13
16843: PUSH
16844: LD_INT 28
16846: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16847: LD_ADDR_VAR 0 11
16851: PUSH
16852: LD_VAR 0 1
16856: PPUSH
16857: CALL_OW 310
16861: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16862: LD_VAR 0 11
16866: PPUSH
16867: CALL_OW 247
16871: PUSH
16872: LD_INT 2
16874: EQUAL
16875: IFFALSE 16879
// exit ;
16877: GO 17395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16879: LD_ADDR_VAR 0 8
16883: PUSH
16884: LD_INT 81
16886: PUSH
16887: LD_VAR 0 9
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 3
16898: PUSH
16899: LD_INT 21
16901: PUSH
16902: LD_INT 3
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: ST_TO_ADDR
// if not tmp then
16922: LD_VAR 0 8
16926: NOT
16927: IFFALSE 16931
// exit ;
16929: GO 17395
// if in_unit then
16931: LD_VAR 0 11
16935: IFFALSE 16959
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16937: LD_ADDR_VAR 0 10
16941: PUSH
16942: LD_VAR 0 8
16946: PPUSH
16947: LD_VAR 0 11
16951: PPUSH
16952: CALL_OW 74
16956: ST_TO_ADDR
16957: GO 16979
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16959: LD_ADDR_VAR 0 10
16963: PUSH
16964: LD_VAR 0 8
16968: PPUSH
16969: LD_VAR 0 1
16973: PPUSH
16974: CALL_OW 74
16978: ST_TO_ADDR
// if not enemy then
16979: LD_VAR 0 10
16983: NOT
16984: IFFALSE 16988
// exit ;
16986: GO 17395
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16988: LD_VAR 0 11
16992: IFFALSE 17014
16994: PUSH
16995: LD_VAR 0 11
16999: PPUSH
17000: LD_VAR 0 10
17004: PPUSH
17005: CALL_OW 296
17009: PUSH
17010: LD_INT 13
17012: GREATER
17013: AND
17014: IFTRUE 17036
17016: PUSH
17017: LD_VAR 0 1
17021: PPUSH
17022: LD_VAR 0 10
17026: PPUSH
17027: CALL_OW 296
17031: PUSH
17032: LD_INT 12
17034: GREATER
17035: OR
17036: IFFALSE 17040
// exit ;
17038: GO 17395
// missile := [ 1 ] ;
17040: LD_ADDR_VAR 0 14
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: EMPTY
17049: LIST
17050: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17051: LD_VAR 0 9
17055: PPUSH
17056: LD_VAR 0 12
17060: PPUSH
17061: CALL_OW 325
17065: IFFALSE 17094
// missile := Replace ( missile , missile + 1 , 2 ) ;
17067: LD_ADDR_VAR 0 14
17071: PUSH
17072: LD_VAR 0 14
17076: PPUSH
17077: LD_VAR 0 14
17081: PUSH
17082: LD_INT 1
17084: PLUS
17085: PPUSH
17086: LD_INT 2
17088: PPUSH
17089: CALL_OW 1
17093: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17094: LD_VAR 0 9
17098: PPUSH
17099: LD_VAR 0 13
17103: PPUSH
17104: CALL_OW 325
17108: IFFALSE 17132
17110: PUSH
17111: LD_VAR 0 10
17115: PPUSH
17116: CALL_OW 255
17120: PPUSH
17121: LD_VAR 0 13
17125: PPUSH
17126: CALL_OW 325
17130: NOT
17131: AND
17132: IFFALSE 17161
// missile := Replace ( missile , missile + 1 , 3 ) ;
17134: LD_ADDR_VAR 0 14
17138: PUSH
17139: LD_VAR 0 14
17143: PPUSH
17144: LD_VAR 0 14
17148: PUSH
17149: LD_INT 1
17151: PLUS
17152: PPUSH
17153: LD_INT 3
17155: PPUSH
17156: CALL_OW 1
17160: ST_TO_ADDR
// if missile < 2 then
17161: LD_VAR 0 14
17165: PUSH
17166: LD_INT 2
17168: LESS
17169: IFFALSE 17173
// exit ;
17171: GO 17395
// x := GetX ( enemy ) ;
17173: LD_ADDR_VAR 0 4
17177: PUSH
17178: LD_VAR 0 10
17182: PPUSH
17183: CALL_OW 250
17187: ST_TO_ADDR
// y := GetY ( enemy ) ;
17188: LD_ADDR_VAR 0 5
17192: PUSH
17193: LD_VAR 0 10
17197: PPUSH
17198: CALL_OW 251
17202: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17203: LD_ADDR_VAR 0 6
17207: PUSH
17208: LD_VAR 0 4
17212: PUSH
17213: LD_INT 1
17215: NEG
17216: PPUSH
17217: LD_INT 1
17219: PPUSH
17220: CALL_OW 12
17224: PLUS
17225: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17226: LD_ADDR_VAR 0 7
17230: PUSH
17231: LD_VAR 0 5
17235: PUSH
17236: LD_INT 1
17238: NEG
17239: PPUSH
17240: LD_INT 1
17242: PPUSH
17243: CALL_OW 12
17247: PLUS
17248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17249: LD_VAR 0 6
17253: PPUSH
17254: LD_VAR 0 7
17258: PPUSH
17259: CALL_OW 488
17263: NOT
17264: IFFALSE 17286
// begin _x := x ;
17266: LD_ADDR_VAR 0 6
17270: PUSH
17271: LD_VAR 0 4
17275: ST_TO_ADDR
// _y := y ;
17276: LD_ADDR_VAR 0 7
17280: PUSH
17281: LD_VAR 0 5
17285: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17286: LD_ADDR_VAR 0 3
17290: PUSH
17291: LD_INT 1
17293: PPUSH
17294: LD_VAR 0 14
17298: PPUSH
17299: CALL_OW 12
17303: ST_TO_ADDR
// case i of 1 :
17304: LD_VAR 0 3
17308: PUSH
17309: LD_INT 1
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17334
17317: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17318: LD_VAR 0 1
17322: PPUSH
17323: LD_VAR 0 10
17327: PPUSH
17328: CALL_OW 115
17332: GO 17395
17334: LD_INT 2
17336: DOUBLE
17337: EQUAL
17338: IFTRUE 17342
17340: GO 17364
17342: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17343: LD_VAR 0 1
17347: PPUSH
17348: LD_VAR 0 6
17352: PPUSH
17353: LD_VAR 0 7
17357: PPUSH
17358: CALL_OW 153
17362: GO 17395
17364: LD_INT 3
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17394
17372: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17373: LD_VAR 0 1
17377: PPUSH
17378: LD_VAR 0 6
17382: PPUSH
17383: LD_VAR 0 7
17387: PPUSH
17388: CALL_OW 154
17392: GO 17395
17394: POP
// end ;
17395: LD_VAR 0 2
17399: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
17404: PPUSH
17405: PPUSH
17406: PPUSH
17407: PPUSH
// if not unit or not building then
17408: LD_VAR 0 1
17412: NOT
17413: IFTRUE 17422
17415: PUSH
17416: LD_VAR 0 2
17420: NOT
17421: OR
17422: IFFALSE 17426
// exit ;
17424: GO 17584
// x := GetX ( building ) ;
17426: LD_ADDR_VAR 0 5
17430: PUSH
17431: LD_VAR 0 2
17435: PPUSH
17436: CALL_OW 250
17440: ST_TO_ADDR
// y := GetY ( building ) ;
17441: LD_ADDR_VAR 0 6
17445: PUSH
17446: LD_VAR 0 2
17450: PPUSH
17451: CALL_OW 251
17455: ST_TO_ADDR
// for i := 0 to 5 do
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: DOUBLE
17462: LD_INT 0
17464: DEC
17465: ST_TO_ADDR
17466: LD_INT 5
17468: PUSH
17469: FOR_TO
17470: IFFALSE 17582
// begin _x := ShiftX ( x , i , 3 ) ;
17472: LD_ADDR_VAR 0 7
17476: PUSH
17477: LD_VAR 0 5
17481: PPUSH
17482: LD_VAR 0 4
17486: PPUSH
17487: LD_INT 3
17489: PPUSH
17490: CALL_OW 272
17494: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17495: LD_ADDR_VAR 0 8
17499: PUSH
17500: LD_VAR 0 6
17504: PPUSH
17505: LD_VAR 0 4
17509: PPUSH
17510: LD_INT 3
17512: PPUSH
17513: CALL_OW 273
17517: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17518: LD_VAR 0 7
17522: PPUSH
17523: LD_VAR 0 8
17527: PPUSH
17528: CALL_OW 488
17532: NOT
17533: IFFALSE 17537
// continue ;
17535: GO 17469
// if HexInfo ( _x , _y ) = 0 then
17537: LD_VAR 0 7
17541: PPUSH
17542: LD_VAR 0 8
17546: PPUSH
17547: CALL_OW 428
17551: PUSH
17552: LD_INT 0
17554: EQUAL
17555: IFFALSE 17580
// begin ComMoveXY ( unit , _x , _y ) ;
17557: LD_VAR 0 1
17561: PPUSH
17562: LD_VAR 0 7
17566: PPUSH
17567: LD_VAR 0 8
17571: PPUSH
17572: CALL_OW 111
// exit ;
17576: POP
17577: POP
17578: GO 17584
// end ; end ;
17580: GO 17469
17582: POP
17583: POP
// end ;
17584: LD_VAR 0 3
17588: RET
// export function ScanBase ( side , base_area ) ; begin
17589: LD_INT 0
17591: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17592: LD_ADDR_VAR 0 3
17596: PUSH
17597: LD_VAR 0 2
17601: PPUSH
17602: LD_INT 81
17604: PUSH
17605: LD_VAR 0 1
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 70
17618: ST_TO_ADDR
// end ;
17619: LD_VAR 0 3
17623: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17624: LD_INT 0
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
// result := false ;
17630: LD_ADDR_VAR 0 2
17634: PUSH
17635: LD_INT 0
17637: ST_TO_ADDR
// side := GetSide ( unit ) ;
17638: LD_ADDR_VAR 0 3
17642: PUSH
17643: LD_VAR 0 1
17647: PPUSH
17648: CALL_OW 255
17652: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17653: LD_ADDR_VAR 0 4
17657: PUSH
17658: LD_VAR 0 1
17662: PPUSH
17663: CALL_OW 248
17667: ST_TO_ADDR
// case nat of 1 :
17668: LD_VAR 0 4
17672: PUSH
17673: LD_INT 1
17675: DOUBLE
17676: EQUAL
17677: IFTRUE 17681
17679: GO 17692
17681: POP
// tech := tech_lassight ; 2 :
17682: LD_ADDR_VAR 0 5
17686: PUSH
17687: LD_INT 12
17689: ST_TO_ADDR
17690: GO 17731
17692: LD_INT 2
17694: DOUBLE
17695: EQUAL
17696: IFTRUE 17700
17698: GO 17711
17700: POP
// tech := tech_mortar ; 3 :
17701: LD_ADDR_VAR 0 5
17705: PUSH
17706: LD_INT 41
17708: ST_TO_ADDR
17709: GO 17731
17711: LD_INT 3
17713: DOUBLE
17714: EQUAL
17715: IFTRUE 17719
17717: GO 17730
17719: POP
// tech := tech_bazooka ; end ;
17720: LD_ADDR_VAR 0 5
17724: PUSH
17725: LD_INT 44
17727: ST_TO_ADDR
17728: GO 17731
17730: POP
// if Researched ( side , tech ) then
17731: LD_VAR 0 3
17735: PPUSH
17736: LD_VAR 0 5
17740: PPUSH
17741: CALL_OW 325
17745: IFFALSE 17772
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17747: LD_ADDR_VAR 0 2
17751: PUSH
17752: LD_INT 5
17754: PUSH
17755: LD_INT 8
17757: PUSH
17758: LD_INT 9
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: LD_VAR 0 4
17770: ARRAY
17771: ST_TO_ADDR
// end ;
17772: LD_VAR 0 2
17776: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17777: LD_INT 0
17779: PPUSH
17780: PPUSH
17781: PPUSH
// if not mines then
17782: LD_VAR 0 2
17786: NOT
17787: IFFALSE 17791
// exit ;
17789: GO 17935
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17791: LD_ADDR_VAR 0 5
17795: PUSH
17796: LD_INT 81
17798: PUSH
17799: LD_VAR 0 1
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: LD_INT 21
17813: PUSH
17814: LD_INT 3
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// for i in mines do
17834: LD_ADDR_VAR 0 4
17838: PUSH
17839: LD_VAR 0 2
17843: PUSH
17844: FOR_IN
17845: IFFALSE 17933
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17847: LD_VAR 0 4
17851: PUSH
17852: LD_INT 1
17854: ARRAY
17855: PPUSH
17856: LD_VAR 0 4
17860: PUSH
17861: LD_INT 2
17863: ARRAY
17864: PPUSH
17865: CALL_OW 458
17869: NOT
17870: IFFALSE 17874
// continue ;
17872: GO 17844
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17874: LD_VAR 0 4
17878: PUSH
17879: LD_INT 1
17881: ARRAY
17882: PPUSH
17883: LD_VAR 0 4
17887: PUSH
17888: LD_INT 2
17890: ARRAY
17891: PPUSH
17892: CALL_OW 428
17896: PUSH
17897: LD_VAR 0 5
17901: IN
17902: IFFALSE 17931
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17904: LD_VAR 0 4
17908: PUSH
17909: LD_INT 1
17911: ARRAY
17912: PPUSH
17913: LD_VAR 0 4
17917: PUSH
17918: LD_INT 2
17920: ARRAY
17921: PPUSH
17922: LD_VAR 0 1
17926: PPUSH
17927: CALL_OW 456
// end ;
17931: GO 17844
17933: POP
17934: POP
// end ;
17935: LD_VAR 0 3
17939: RET
// export function Count ( array ) ; begin
17940: LD_INT 0
17942: PPUSH
// result := array + 0 ;
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: LD_VAR 0 1
17952: PUSH
17953: LD_INT 0
17955: PLUS
17956: ST_TO_ADDR
// end ;
17957: LD_VAR 0 2
17961: RET
// export function IsEmpty ( building ) ; begin
17962: LD_INT 0
17964: PPUSH
// if not building then
17965: LD_VAR 0 1
17969: NOT
17970: IFFALSE 17974
// exit ;
17972: GO 18017
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17974: LD_ADDR_VAR 0 2
17978: PUSH
17979: LD_VAR 0 1
17983: PUSH
17984: LD_INT 22
17986: PUSH
17987: LD_VAR 0 1
17991: PPUSH
17992: CALL_OW 255
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 58
18003: PUSH
18004: EMPTY
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: PPUSH
18011: CALL_OW 69
18015: IN
18016: ST_TO_ADDR
// end ;
18017: LD_VAR 0 2
18021: RET
// export function IsNotFull ( building ) ; var places ; begin
18022: LD_INT 0
18024: PPUSH
18025: PPUSH
// if not building then
18026: LD_VAR 0 1
18030: NOT
18031: IFFALSE 18035
// exit ;
18033: GO 18063
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18035: LD_ADDR_VAR 0 2
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: LD_INT 3
18047: PUSH
18048: LD_INT 62
18050: PUSH
18051: EMPTY
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 72
18062: ST_TO_ADDR
// end ;
18063: LD_VAR 0 2
18067: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18068: LD_INT 0
18070: PPUSH
18071: PPUSH
18072: PPUSH
18073: PPUSH
// tmp := [ ] ;
18074: LD_ADDR_VAR 0 3
18078: PUSH
18079: EMPTY
18080: ST_TO_ADDR
// list := [ ] ;
18081: LD_ADDR_VAR 0 5
18085: PUSH
18086: EMPTY
18087: ST_TO_ADDR
// for i = 16 to 25 do
18088: LD_ADDR_VAR 0 4
18092: PUSH
18093: DOUBLE
18094: LD_INT 16
18096: DEC
18097: ST_TO_ADDR
18098: LD_INT 25
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18175
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18104: LD_ADDR_VAR 0 3
18108: PUSH
18109: LD_VAR 0 3
18113: PUSH
18114: LD_INT 22
18116: PUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: CALL_OW 255
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 91
18133: PUSH
18134: LD_VAR 0 1
18138: PUSH
18139: LD_INT 6
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 30
18149: PUSH
18150: LD_VAR 0 4
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: PPUSH
18167: CALL_OW 69
18171: ADD
18172: ST_TO_ADDR
18173: GO 18101
18175: POP
18176: POP
// for i = 1 to tmp do
18177: LD_ADDR_VAR 0 4
18181: PUSH
18182: DOUBLE
18183: LD_INT 1
18185: DEC
18186: ST_TO_ADDR
18187: LD_VAR 0 3
18191: PUSH
18192: FOR_TO
18193: IFFALSE 18281
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18195: LD_ADDR_VAR 0 5
18199: PUSH
18200: LD_VAR 0 5
18204: PUSH
18205: LD_VAR 0 3
18209: PUSH
18210: LD_VAR 0 4
18214: ARRAY
18215: PPUSH
18216: CALL_OW 266
18220: PUSH
18221: LD_VAR 0 3
18225: PUSH
18226: LD_VAR 0 4
18230: ARRAY
18231: PPUSH
18232: CALL_OW 250
18236: PUSH
18237: LD_VAR 0 3
18241: PUSH
18242: LD_VAR 0 4
18246: ARRAY
18247: PPUSH
18248: CALL_OW 251
18252: PUSH
18253: LD_VAR 0 3
18257: PUSH
18258: LD_VAR 0 4
18262: ARRAY
18263: PPUSH
18264: CALL_OW 254
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: ADD
18278: ST_TO_ADDR
18279: GO 18192
18281: POP
18282: POP
// result := list ;
18283: LD_ADDR_VAR 0 2
18287: PUSH
18288: LD_VAR 0 5
18292: ST_TO_ADDR
// end ;
18293: LD_VAR 0 2
18297: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18298: LD_INT 0
18300: PPUSH
18301: PPUSH
18302: PPUSH
18303: PPUSH
18304: PPUSH
18305: PPUSH
18306: PPUSH
// if not factory then
18307: LD_VAR 0 1
18311: NOT
18312: IFFALSE 18316
// exit ;
18314: GO 18919
// if control = control_apeman then
18316: LD_VAR 0 4
18320: PUSH
18321: LD_INT 5
18323: EQUAL
18324: IFFALSE 18433
// begin tmp := UnitsInside ( factory ) ;
18326: LD_ADDR_VAR 0 8
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 313
18340: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18341: LD_VAR 0 8
18345: PPUSH
18346: LD_INT 25
18348: PUSH
18349: LD_INT 12
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PPUSH
18356: CALL_OW 72
18360: NOT
18361: IFFALSE 18371
// control := control_manual ;
18363: LD_ADDR_VAR 0 4
18367: PUSH
18368: LD_INT 1
18370: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18371: LD_ADDR_VAR 0 8
18375: PUSH
18376: LD_VAR 0 1
18380: PPUSH
18381: CALL 18068 0 1
18385: ST_TO_ADDR
// if tmp then
18386: LD_VAR 0 8
18390: IFFALSE 18433
// begin for i in tmp do
18392: LD_ADDR_VAR 0 7
18396: PUSH
18397: LD_VAR 0 8
18401: PUSH
18402: FOR_IN
18403: IFFALSE 18431
// if i [ 1 ] = b_ext_radio then
18405: LD_VAR 0 7
18409: PUSH
18410: LD_INT 1
18412: ARRAY
18413: PUSH
18414: LD_INT 22
18416: EQUAL
18417: IFFALSE 18429
// begin control := control_remote ;
18419: LD_ADDR_VAR 0 4
18423: PUSH
18424: LD_INT 2
18426: ST_TO_ADDR
// break ;
18427: GO 18431
// end ;
18429: GO 18402
18431: POP
18432: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18433: LD_VAR 0 1
18437: PPUSH
18438: LD_VAR 0 2
18442: PPUSH
18443: LD_VAR 0 3
18447: PPUSH
18448: LD_VAR 0 4
18452: PPUSH
18453: LD_VAR 0 5
18457: PPUSH
18458: CALL_OW 448
18462: IFFALSE 18497
// begin result := [ chassis , engine , control , weapon ] ;
18464: LD_ADDR_VAR 0 6
18468: PUSH
18469: LD_VAR 0 2
18473: PUSH
18474: LD_VAR 0 3
18478: PUSH
18479: LD_VAR 0 4
18483: PUSH
18484: LD_VAR 0 5
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: ST_TO_ADDR
// exit ;
18495: GO 18919
// end ; _chassis := AvailableChassisList ( factory ) ;
18497: LD_ADDR_VAR 0 9
18501: PUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 475
18511: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18512: LD_ADDR_VAR 0 11
18516: PUSH
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 476
18526: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18527: LD_ADDR_VAR 0 12
18531: PUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 477
18541: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18542: LD_ADDR_VAR 0 10
18546: PUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 478
18556: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18557: LD_VAR 0 9
18561: NOT
18562: IFTRUE 18571
18564: PUSH
18565: LD_VAR 0 11
18569: NOT
18570: OR
18571: IFTRUE 18580
18573: PUSH
18574: LD_VAR 0 12
18578: NOT
18579: OR
18580: IFTRUE 18589
18582: PUSH
18583: LD_VAR 0 10
18587: NOT
18588: OR
18589: IFFALSE 18624
// begin result := [ chassis , engine , control , weapon ] ;
18591: LD_ADDR_VAR 0 6
18595: PUSH
18596: LD_VAR 0 2
18600: PUSH
18601: LD_VAR 0 3
18605: PUSH
18606: LD_VAR 0 4
18610: PUSH
18611: LD_VAR 0 5
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: ST_TO_ADDR
// exit ;
18622: GO 18919
// end ; if not chassis in _chassis then
18624: LD_VAR 0 2
18628: PUSH
18629: LD_VAR 0 9
18633: IN
18634: NOT
18635: IFFALSE 18661
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18637: LD_ADDR_VAR 0 2
18641: PUSH
18642: LD_VAR 0 9
18646: PUSH
18647: LD_INT 1
18649: PPUSH
18650: LD_VAR 0 9
18654: PPUSH
18655: CALL_OW 12
18659: ARRAY
18660: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18661: LD_VAR 0 2
18665: PPUSH
18666: LD_VAR 0 3
18670: PPUSH
18671: CALL 18924 0 2
18675: NOT
18676: IFFALSE 18737
// repeat engine := _engine [ 1 ] ;
18678: LD_ADDR_VAR 0 3
18682: PUSH
18683: LD_VAR 0 11
18687: PUSH
18688: LD_INT 1
18690: ARRAY
18691: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18692: LD_ADDR_VAR 0 11
18696: PUSH
18697: LD_VAR 0 11
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 3
18709: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18710: LD_VAR 0 2
18714: PPUSH
18715: LD_VAR 0 3
18719: PPUSH
18720: CALL 18924 0 2
18724: IFTRUE 18735
18726: PUSH
18727: LD_VAR 0 11
18731: PUSH
18732: EMPTY
18733: EQUAL
18734: OR
18735: IFFALSE 18678
// if not control in _control then
18737: LD_VAR 0 4
18741: PUSH
18742: LD_VAR 0 12
18746: IN
18747: NOT
18748: IFFALSE 18774
// control := _control [ rand ( 1 , _control ) ] ;
18750: LD_ADDR_VAR 0 4
18754: PUSH
18755: LD_VAR 0 12
18759: PUSH
18760: LD_INT 1
18762: PPUSH
18763: LD_VAR 0 12
18767: PPUSH
18768: CALL_OW 12
18772: ARRAY
18773: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18774: LD_VAR 0 2
18778: PPUSH
18779: LD_VAR 0 5
18783: PPUSH
18784: CALL 19146 0 2
18788: NOT
18789: IFFALSE 18850
// repeat weapon := _weapon [ 1 ] ;
18791: LD_ADDR_VAR 0 5
18795: PUSH
18796: LD_VAR 0 10
18800: PUSH
18801: LD_INT 1
18803: ARRAY
18804: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18805: LD_ADDR_VAR 0 10
18809: PUSH
18810: LD_VAR 0 10
18814: PPUSH
18815: LD_INT 1
18817: PPUSH
18818: CALL_OW 3
18822: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18823: LD_VAR 0 2
18827: PPUSH
18828: LD_VAR 0 5
18832: PPUSH
18833: CALL 19146 0 2
18837: IFTRUE 18848
18839: PUSH
18840: LD_VAR 0 10
18844: PUSH
18845: EMPTY
18846: EQUAL
18847: OR
18848: IFFALSE 18791
// result := [ ] ;
18850: LD_ADDR_VAR 0 6
18854: PUSH
18855: EMPTY
18856: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18857: LD_VAR 0 1
18861: PPUSH
18862: LD_VAR 0 2
18866: PPUSH
18867: LD_VAR 0 3
18871: PPUSH
18872: LD_VAR 0 4
18876: PPUSH
18877: LD_VAR 0 5
18881: PPUSH
18882: CALL_OW 448
18886: IFFALSE 18919
// result := [ chassis , engine , control , weapon ] ;
18888: LD_ADDR_VAR 0 6
18892: PUSH
18893: LD_VAR 0 2
18897: PUSH
18898: LD_VAR 0 3
18902: PUSH
18903: LD_VAR 0 4
18907: PUSH
18908: LD_VAR 0 5
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: ST_TO_ADDR
// end ;
18919: LD_VAR 0 6
18923: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18924: LD_INT 0
18926: PPUSH
// if not chassis or not engine then
18927: LD_VAR 0 1
18931: NOT
18932: IFTRUE 18941
18934: PUSH
18935: LD_VAR 0 2
18939: NOT
18940: OR
18941: IFFALSE 18945
// exit ;
18943: GO 19141
// case engine of engine_solar :
18945: LD_VAR 0 2
18949: PUSH
18950: LD_INT 2
18952: DOUBLE
18953: EQUAL
18954: IFTRUE 18958
18956: GO 18996
18958: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_INT 11
18966: PUSH
18967: LD_INT 12
18969: PUSH
18970: LD_INT 13
18972: PUSH
18973: LD_INT 14
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 3
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 19125
18996: LD_INT 1
18998: DOUBLE
18999: EQUAL
19000: IFTRUE 19004
19002: GO 19066
19004: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_INT 11
19012: PUSH
19013: LD_INT 12
19015: PUSH
19016: LD_INT 13
19018: PUSH
19019: LD_INT 14
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 3
19030: PUSH
19031: LD_INT 4
19033: PUSH
19034: LD_INT 5
19036: PUSH
19037: LD_INT 21
19039: PUSH
19040: LD_INT 23
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: LD_INT 24
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: ST_TO_ADDR
19064: GO 19125
19066: LD_INT 3
19068: DOUBLE
19069: EQUAL
19070: IFTRUE 19074
19072: GO 19124
19074: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19075: LD_ADDR_VAR 0 3
19079: PUSH
19080: LD_INT 13
19082: PUSH
19083: LD_INT 14
19085: PUSH
19086: LD_INT 2
19088: PUSH
19089: LD_INT 3
19091: PUSH
19092: LD_INT 4
19094: PUSH
19095: LD_INT 5
19097: PUSH
19098: LD_INT 21
19100: PUSH
19101: LD_INT 22
19103: PUSH
19104: LD_INT 23
19106: PUSH
19107: LD_INT 24
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: ST_TO_ADDR
19122: GO 19125
19124: POP
// result := ( chassis in result ) ;
19125: LD_ADDR_VAR 0 3
19129: PUSH
19130: LD_VAR 0 1
19134: PUSH
19135: LD_VAR 0 3
19139: IN
19140: ST_TO_ADDR
// end ;
19141: LD_VAR 0 3
19145: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19146: LD_INT 0
19148: PPUSH
// if not chassis or not weapon then
19149: LD_VAR 0 1
19153: NOT
19154: IFTRUE 19163
19156: PUSH
19157: LD_VAR 0 2
19161: NOT
19162: OR
19163: IFFALSE 19167
// exit ;
19165: GO 20261
// case weapon of us_machine_gun :
19167: LD_VAR 0 2
19171: PUSH
19172: LD_INT 2
19174: DOUBLE
19175: EQUAL
19176: IFTRUE 19180
19178: GO 19210
19180: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19181: LD_ADDR_VAR 0 3
19185: PUSH
19186: LD_INT 1
19188: PUSH
19189: LD_INT 2
19191: PUSH
19192: LD_INT 3
19194: PUSH
19195: LD_INT 4
19197: PUSH
19198: LD_INT 5
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: ST_TO_ADDR
19208: GO 20245
19210: LD_INT 3
19212: DOUBLE
19213: EQUAL
19214: IFTRUE 19218
19216: GO 19248
19218: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19219: LD_ADDR_VAR 0 3
19223: PUSH
19224: LD_INT 1
19226: PUSH
19227: LD_INT 2
19229: PUSH
19230: LD_INT 3
19232: PUSH
19233: LD_INT 4
19235: PUSH
19236: LD_INT 5
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: ST_TO_ADDR
19246: GO 20245
19248: LD_INT 11
19250: DOUBLE
19251: EQUAL
19252: IFTRUE 19256
19254: GO 19286
19256: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19257: LD_ADDR_VAR 0 3
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: LD_INT 2
19267: PUSH
19268: LD_INT 3
19270: PUSH
19271: LD_INT 4
19273: PUSH
19274: LD_INT 5
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: ST_TO_ADDR
19284: GO 20245
19286: LD_INT 4
19288: DOUBLE
19289: EQUAL
19290: IFTRUE 19294
19292: GO 19320
19294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19295: LD_ADDR_VAR 0 3
19299: PUSH
19300: LD_INT 2
19302: PUSH
19303: LD_INT 3
19305: PUSH
19306: LD_INT 4
19308: PUSH
19309: LD_INT 5
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: ST_TO_ADDR
19318: GO 20245
19320: LD_INT 5
19322: DOUBLE
19323: EQUAL
19324: IFTRUE 19328
19326: GO 19354
19328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 3
19339: PUSH
19340: LD_INT 4
19342: PUSH
19343: LD_INT 5
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: ST_TO_ADDR
19352: GO 20245
19354: LD_INT 9
19356: DOUBLE
19357: EQUAL
19358: IFTRUE 19362
19360: GO 19388
19362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19363: LD_ADDR_VAR 0 3
19367: PUSH
19368: LD_INT 2
19370: PUSH
19371: LD_INT 3
19373: PUSH
19374: LD_INT 4
19376: PUSH
19377: LD_INT 5
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: ST_TO_ADDR
19386: GO 20245
19388: LD_INT 7
19390: DOUBLE
19391: EQUAL
19392: IFTRUE 19396
19394: GO 19422
19396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19397: LD_ADDR_VAR 0 3
19401: PUSH
19402: LD_INT 2
19404: PUSH
19405: LD_INT 3
19407: PUSH
19408: LD_INT 4
19410: PUSH
19411: LD_INT 5
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: ST_TO_ADDR
19420: GO 20245
19422: LD_INT 12
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19456
19430: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19431: LD_ADDR_VAR 0 3
19435: PUSH
19436: LD_INT 2
19438: PUSH
19439: LD_INT 3
19441: PUSH
19442: LD_INT 4
19444: PUSH
19445: LD_INT 5
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: ST_TO_ADDR
19454: GO 20245
19456: LD_INT 13
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19490
19464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19465: LD_ADDR_VAR 0 3
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 3
19475: PUSH
19476: LD_INT 4
19478: PUSH
19479: LD_INT 5
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: ST_TO_ADDR
19488: GO 20245
19490: LD_INT 14
19492: DOUBLE
19493: EQUAL
19494: IFTRUE 19498
19496: GO 19516
19498: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19499: LD_ADDR_VAR 0 3
19503: PUSH
19504: LD_INT 4
19506: PUSH
19507: LD_INT 5
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: ST_TO_ADDR
19514: GO 20245
19516: LD_INT 6
19518: DOUBLE
19519: EQUAL
19520: IFTRUE 19524
19522: GO 19542
19524: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19525: LD_ADDR_VAR 0 3
19529: PUSH
19530: LD_INT 4
19532: PUSH
19533: LD_INT 5
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: ST_TO_ADDR
19540: GO 20245
19542: LD_INT 10
19544: DOUBLE
19545: EQUAL
19546: IFTRUE 19550
19548: GO 19568
19550: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19551: LD_ADDR_VAR 0 3
19555: PUSH
19556: LD_INT 4
19558: PUSH
19559: LD_INT 5
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: ST_TO_ADDR
19566: GO 20245
19568: LD_INT 22
19570: DOUBLE
19571: EQUAL
19572: IFTRUE 19576
19574: GO 19602
19576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19577: LD_ADDR_VAR 0 3
19581: PUSH
19582: LD_INT 11
19584: PUSH
19585: LD_INT 12
19587: PUSH
19588: LD_INT 13
19590: PUSH
19591: LD_INT 14
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: ST_TO_ADDR
19600: GO 20245
19602: LD_INT 23
19604: DOUBLE
19605: EQUAL
19606: IFTRUE 19610
19608: GO 19636
19610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19611: LD_ADDR_VAR 0 3
19615: PUSH
19616: LD_INT 11
19618: PUSH
19619: LD_INT 12
19621: PUSH
19622: LD_INT 13
19624: PUSH
19625: LD_INT 14
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: ST_TO_ADDR
19634: GO 20245
19636: LD_INT 24
19638: DOUBLE
19639: EQUAL
19640: IFTRUE 19644
19642: GO 19670
19644: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19645: LD_ADDR_VAR 0 3
19649: PUSH
19650: LD_INT 11
19652: PUSH
19653: LD_INT 12
19655: PUSH
19656: LD_INT 13
19658: PUSH
19659: LD_INT 14
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: ST_TO_ADDR
19668: GO 20245
19670: LD_INT 30
19672: DOUBLE
19673: EQUAL
19674: IFTRUE 19678
19676: GO 19704
19678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19679: LD_ADDR_VAR 0 3
19683: PUSH
19684: LD_INT 11
19686: PUSH
19687: LD_INT 12
19689: PUSH
19690: LD_INT 13
19692: PUSH
19693: LD_INT 14
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: ST_TO_ADDR
19702: GO 20245
19704: LD_INT 25
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19730
19712: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19713: LD_ADDR_VAR 0 3
19717: PUSH
19718: LD_INT 13
19720: PUSH
19721: LD_INT 14
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: ST_TO_ADDR
19728: GO 20245
19730: LD_INT 27
19732: DOUBLE
19733: EQUAL
19734: IFTRUE 19738
19736: GO 19756
19738: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19739: LD_ADDR_VAR 0 3
19743: PUSH
19744: LD_INT 13
19746: PUSH
19747: LD_INT 14
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: ST_TO_ADDR
19754: GO 20245
19756: LD_INT 92
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19790
19764: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19765: LD_ADDR_VAR 0 3
19769: PUSH
19770: LD_INT 11
19772: PUSH
19773: LD_INT 12
19775: PUSH
19776: LD_INT 13
19778: PUSH
19779: LD_INT 14
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: ST_TO_ADDR
19788: GO 20245
19790: LD_INT 28
19792: DOUBLE
19793: EQUAL
19794: IFTRUE 19798
19796: GO 19816
19798: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19799: LD_ADDR_VAR 0 3
19803: PUSH
19804: LD_INT 13
19806: PUSH
19807: LD_INT 14
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: ST_TO_ADDR
19814: GO 20245
19816: LD_INT 29
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19842
19824: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19825: LD_ADDR_VAR 0 3
19829: PUSH
19830: LD_INT 13
19832: PUSH
19833: LD_INT 14
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: ST_TO_ADDR
19840: GO 20245
19842: LD_INT 31
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19868
19850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_INT 13
19858: PUSH
19859: LD_INT 14
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: ST_TO_ADDR
19866: GO 20245
19868: LD_INT 26
19870: DOUBLE
19871: EQUAL
19872: IFTRUE 19876
19874: GO 19894
19876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19877: LD_ADDR_VAR 0 3
19881: PUSH
19882: LD_INT 13
19884: PUSH
19885: LD_INT 14
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: ST_TO_ADDR
19892: GO 20245
19894: LD_INT 42
19896: DOUBLE
19897: EQUAL
19898: IFTRUE 19902
19900: GO 19928
19902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19903: LD_ADDR_VAR 0 3
19907: PUSH
19908: LD_INT 21
19910: PUSH
19911: LD_INT 22
19913: PUSH
19914: LD_INT 23
19916: PUSH
19917: LD_INT 24
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: ST_TO_ADDR
19926: GO 20245
19928: LD_INT 43
19930: DOUBLE
19931: EQUAL
19932: IFTRUE 19936
19934: GO 19962
19936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19937: LD_ADDR_VAR 0 3
19941: PUSH
19942: LD_INT 21
19944: PUSH
19945: LD_INT 22
19947: PUSH
19948: LD_INT 23
19950: PUSH
19951: LD_INT 24
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: ST_TO_ADDR
19960: GO 20245
19962: LD_INT 44
19964: DOUBLE
19965: EQUAL
19966: IFTRUE 19970
19968: GO 19996
19970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19971: LD_ADDR_VAR 0 3
19975: PUSH
19976: LD_INT 21
19978: PUSH
19979: LD_INT 22
19981: PUSH
19982: LD_INT 23
19984: PUSH
19985: LD_INT 24
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: ST_TO_ADDR
19994: GO 20245
19996: LD_INT 45
19998: DOUBLE
19999: EQUAL
20000: IFTRUE 20004
20002: GO 20030
20004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20005: LD_ADDR_VAR 0 3
20009: PUSH
20010: LD_INT 21
20012: PUSH
20013: LD_INT 22
20015: PUSH
20016: LD_INT 23
20018: PUSH
20019: LD_INT 24
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: ST_TO_ADDR
20028: GO 20245
20030: LD_INT 49
20032: DOUBLE
20033: EQUAL
20034: IFTRUE 20038
20036: GO 20064
20038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20039: LD_ADDR_VAR 0 3
20043: PUSH
20044: LD_INT 21
20046: PUSH
20047: LD_INT 22
20049: PUSH
20050: LD_INT 23
20052: PUSH
20053: LD_INT 24
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: LIST
20060: LIST
20061: ST_TO_ADDR
20062: GO 20245
20064: LD_INT 51
20066: DOUBLE
20067: EQUAL
20068: IFTRUE 20072
20070: GO 20098
20072: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20073: LD_ADDR_VAR 0 3
20077: PUSH
20078: LD_INT 21
20080: PUSH
20081: LD_INT 22
20083: PUSH
20084: LD_INT 23
20086: PUSH
20087: LD_INT 24
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: ST_TO_ADDR
20096: GO 20245
20098: LD_INT 52
20100: DOUBLE
20101: EQUAL
20102: IFTRUE 20106
20104: GO 20132
20106: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20107: LD_ADDR_VAR 0 3
20111: PUSH
20112: LD_INT 21
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_INT 23
20120: PUSH
20121: LD_INT 24
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: ST_TO_ADDR
20130: GO 20245
20132: LD_INT 53
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20158
20140: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20141: LD_ADDR_VAR 0 3
20145: PUSH
20146: LD_INT 23
20148: PUSH
20149: LD_INT 24
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: ST_TO_ADDR
20156: GO 20245
20158: LD_INT 46
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20184
20166: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: LD_INT 23
20174: PUSH
20175: LD_INT 24
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: ST_TO_ADDR
20182: GO 20245
20184: LD_INT 47
20186: DOUBLE
20187: EQUAL
20188: IFTRUE 20192
20190: GO 20210
20192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_INT 23
20200: PUSH
20201: LD_INT 24
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: ST_TO_ADDR
20208: GO 20245
20210: LD_INT 98
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20244
20218: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20219: LD_ADDR_VAR 0 3
20223: PUSH
20224: LD_INT 21
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_INT 23
20232: PUSH
20233: LD_INT 24
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: ST_TO_ADDR
20242: GO 20245
20244: POP
// result := ( chassis in result ) ;
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: LD_VAR 0 1
20254: PUSH
20255: LD_VAR 0 3
20259: IN
20260: ST_TO_ADDR
// end ;
20261: LD_VAR 0 3
20265: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20266: LD_INT 0
20268: PPUSH
20269: PPUSH
20270: PPUSH
20271: PPUSH
20272: PPUSH
20273: PPUSH
20274: PPUSH
// result := array ;
20275: LD_ADDR_VAR 0 5
20279: PUSH
20280: LD_VAR 0 1
20284: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20285: LD_VAR 0 1
20289: NOT
20290: IFTRUE 20299
20292: PUSH
20293: LD_VAR 0 2
20297: NOT
20298: OR
20299: IFTRUE 20308
20301: PUSH
20302: LD_VAR 0 3
20306: NOT
20307: OR
20308: IFTRUE 20322
20310: PUSH
20311: LD_VAR 0 2
20315: PUSH
20316: LD_VAR 0 1
20320: GREATER
20321: OR
20322: IFTRUE 20336
20324: PUSH
20325: LD_VAR 0 3
20329: PUSH
20330: LD_VAR 0 1
20334: GREATER
20335: OR
20336: IFFALSE 20340
// exit ;
20338: GO 20636
// if direction then
20340: LD_VAR 0 4
20344: IFFALSE 20408
// begin d := 1 ;
20346: LD_ADDR_VAR 0 9
20350: PUSH
20351: LD_INT 1
20353: ST_TO_ADDR
// if i_from > i_to then
20354: LD_VAR 0 2
20358: PUSH
20359: LD_VAR 0 3
20363: GREATER
20364: IFFALSE 20390
// length := ( array - i_from ) + i_to else
20366: LD_ADDR_VAR 0 11
20370: PUSH
20371: LD_VAR 0 1
20375: PUSH
20376: LD_VAR 0 2
20380: MINUS
20381: PUSH
20382: LD_VAR 0 3
20386: PLUS
20387: ST_TO_ADDR
20388: GO 20406
// length := i_to - i_from ;
20390: LD_ADDR_VAR 0 11
20394: PUSH
20395: LD_VAR 0 3
20399: PUSH
20400: LD_VAR 0 2
20404: MINUS
20405: ST_TO_ADDR
// end else
20406: GO 20469
// begin d := - 1 ;
20408: LD_ADDR_VAR 0 9
20412: PUSH
20413: LD_INT 1
20415: NEG
20416: ST_TO_ADDR
// if i_from > i_to then
20417: LD_VAR 0 2
20421: PUSH
20422: LD_VAR 0 3
20426: GREATER
20427: IFFALSE 20447
// length := i_from - i_to else
20429: LD_ADDR_VAR 0 11
20433: PUSH
20434: LD_VAR 0 2
20438: PUSH
20439: LD_VAR 0 3
20443: MINUS
20444: ST_TO_ADDR
20445: GO 20469
// length := ( array - i_to ) + i_from ;
20447: LD_ADDR_VAR 0 11
20451: PUSH
20452: LD_VAR 0 1
20456: PUSH
20457: LD_VAR 0 3
20461: MINUS
20462: PUSH
20463: LD_VAR 0 2
20467: PLUS
20468: ST_TO_ADDR
// end ; if not length then
20469: LD_VAR 0 11
20473: NOT
20474: IFFALSE 20478
// exit ;
20476: GO 20636
// tmp := array ;
20478: LD_ADDR_VAR 0 10
20482: PUSH
20483: LD_VAR 0 1
20487: ST_TO_ADDR
// for i = 1 to length do
20488: LD_ADDR_VAR 0 6
20492: PUSH
20493: DOUBLE
20494: LD_INT 1
20496: DEC
20497: ST_TO_ADDR
20498: LD_VAR 0 11
20502: PUSH
20503: FOR_TO
20504: IFFALSE 20624
// begin for j = 1 to array do
20506: LD_ADDR_VAR 0 7
20510: PUSH
20511: DOUBLE
20512: LD_INT 1
20514: DEC
20515: ST_TO_ADDR
20516: LD_VAR 0 1
20520: PUSH
20521: FOR_TO
20522: IFFALSE 20610
// begin k := j + d ;
20524: LD_ADDR_VAR 0 8
20528: PUSH
20529: LD_VAR 0 7
20533: PUSH
20534: LD_VAR 0 9
20538: PLUS
20539: ST_TO_ADDR
// if k > array then
20540: LD_VAR 0 8
20544: PUSH
20545: LD_VAR 0 1
20549: GREATER
20550: IFFALSE 20560
// k := 1 ;
20552: LD_ADDR_VAR 0 8
20556: PUSH
20557: LD_INT 1
20559: ST_TO_ADDR
// if not k then
20560: LD_VAR 0 8
20564: NOT
20565: IFFALSE 20577
// k := array ;
20567: LD_ADDR_VAR 0 8
20571: PUSH
20572: LD_VAR 0 1
20576: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20577: LD_ADDR_VAR 0 10
20581: PUSH
20582: LD_VAR 0 10
20586: PPUSH
20587: LD_VAR 0 8
20591: PPUSH
20592: LD_VAR 0 1
20596: PUSH
20597: LD_VAR 0 7
20601: ARRAY
20602: PPUSH
20603: CALL_OW 1
20607: ST_TO_ADDR
// end ;
20608: GO 20521
20610: POP
20611: POP
// array := tmp ;
20612: LD_ADDR_VAR 0 1
20616: PUSH
20617: LD_VAR 0 10
20621: ST_TO_ADDR
// end ;
20622: GO 20503
20624: POP
20625: POP
// result := array ;
20626: LD_ADDR_VAR 0 5
20630: PUSH
20631: LD_VAR 0 1
20635: ST_TO_ADDR
// end ;
20636: LD_VAR 0 5
20640: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20641: LD_INT 0
20643: PPUSH
20644: PPUSH
// result := 0 ;
20645: LD_ADDR_VAR 0 3
20649: PUSH
20650: LD_INT 0
20652: ST_TO_ADDR
// if not array or not value in array then
20653: LD_VAR 0 1
20657: NOT
20658: IFTRUE 20673
20660: PUSH
20661: LD_VAR 0 2
20665: PUSH
20666: LD_VAR 0 1
20670: IN
20671: NOT
20672: OR
20673: IFFALSE 20677
// exit ;
20675: GO 20731
// for i = 1 to array do
20677: LD_ADDR_VAR 0 4
20681: PUSH
20682: DOUBLE
20683: LD_INT 1
20685: DEC
20686: ST_TO_ADDR
20687: LD_VAR 0 1
20691: PUSH
20692: FOR_TO
20693: IFFALSE 20729
// if value = array [ i ] then
20695: LD_VAR 0 2
20699: PUSH
20700: LD_VAR 0 1
20704: PUSH
20705: LD_VAR 0 4
20709: ARRAY
20710: EQUAL
20711: IFFALSE 20727
// begin result := i ;
20713: LD_ADDR_VAR 0 3
20717: PUSH
20718: LD_VAR 0 4
20722: ST_TO_ADDR
// exit ;
20723: POP
20724: POP
20725: GO 20731
// end ;
20727: GO 20692
20729: POP
20730: POP
// end ;
20731: LD_VAR 0 3
20735: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20736: LD_INT 0
20738: PPUSH
// vc_chassis := chassis ;
20739: LD_ADDR_OWVAR 37
20743: PUSH
20744: LD_VAR 0 1
20748: ST_TO_ADDR
// vc_engine := engine ;
20749: LD_ADDR_OWVAR 39
20753: PUSH
20754: LD_VAR 0 2
20758: ST_TO_ADDR
// vc_control := control ;
20759: LD_ADDR_OWVAR 38
20763: PUSH
20764: LD_VAR 0 3
20768: ST_TO_ADDR
// vc_weapon := weapon ;
20769: LD_ADDR_OWVAR 40
20773: PUSH
20774: LD_VAR 0 4
20778: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20779: LD_ADDR_OWVAR 41
20783: PUSH
20784: LD_VAR 0 5
20788: ST_TO_ADDR
// end ;
20789: LD_VAR 0 6
20793: RET
// export function WantPlant ( unit ) ; var task ; begin
20794: LD_INT 0
20796: PPUSH
20797: PPUSH
// result := false ;
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 437
20820: ST_TO_ADDR
// if task then
20821: LD_VAR 0 3
20825: IFFALSE 20853
// if task [ 1 ] [ 1 ] = p then
20827: LD_VAR 0 3
20831: PUSH
20832: LD_INT 1
20834: ARRAY
20835: PUSH
20836: LD_INT 1
20838: ARRAY
20839: PUSH
20840: LD_STRING p
20842: EQUAL
20843: IFFALSE 20853
// result := true ;
20845: LD_ADDR_VAR 0 2
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// end ;
20853: LD_VAR 0 2
20857: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20858: LD_INT 0
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
// if pos < 1 then
20864: LD_VAR 0 2
20868: PUSH
20869: LD_INT 1
20871: LESS
20872: IFFALSE 20876
// exit ;
20874: GO 21179
// if pos = 1 then
20876: LD_VAR 0 2
20880: PUSH
20881: LD_INT 1
20883: EQUAL
20884: IFFALSE 20917
// result := Replace ( arr , pos [ 1 ] , value ) else
20886: LD_ADDR_VAR 0 4
20890: PUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: LD_VAR 0 2
20900: PUSH
20901: LD_INT 1
20903: ARRAY
20904: PPUSH
20905: LD_VAR 0 3
20909: PPUSH
20910: CALL_OW 1
20914: ST_TO_ADDR
20915: GO 21179
// begin tmp := arr ;
20917: LD_ADDR_VAR 0 6
20921: PUSH
20922: LD_VAR 0 1
20926: ST_TO_ADDR
// s_arr := [ tmp ] ;
20927: LD_ADDR_VAR 0 7
20931: PUSH
20932: LD_VAR 0 6
20936: PUSH
20937: EMPTY
20938: LIST
20939: ST_TO_ADDR
// for i = 1 to pos - 1 do
20940: LD_ADDR_VAR 0 5
20944: PUSH
20945: DOUBLE
20946: LD_INT 1
20948: DEC
20949: ST_TO_ADDR
20950: LD_VAR 0 2
20954: PUSH
20955: LD_INT 1
20957: MINUS
20958: PUSH
20959: FOR_TO
20960: IFFALSE 21005
// begin tmp := tmp [ pos [ i ] ] ;
20962: LD_ADDR_VAR 0 6
20966: PUSH
20967: LD_VAR 0 6
20971: PUSH
20972: LD_VAR 0 2
20976: PUSH
20977: LD_VAR 0 5
20981: ARRAY
20982: ARRAY
20983: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20984: LD_ADDR_VAR 0 7
20988: PUSH
20989: LD_VAR 0 7
20993: PUSH
20994: LD_VAR 0 6
20998: PUSH
20999: EMPTY
21000: LIST
21001: ADD
21002: ST_TO_ADDR
// end ;
21003: GO 20959
21005: POP
21006: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21007: LD_ADDR_VAR 0 6
21011: PUSH
21012: LD_VAR 0 6
21016: PPUSH
21017: LD_VAR 0 2
21021: PUSH
21022: LD_VAR 0 2
21026: ARRAY
21027: PPUSH
21028: LD_VAR 0 3
21032: PPUSH
21033: CALL_OW 1
21037: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21038: LD_ADDR_VAR 0 7
21042: PUSH
21043: LD_VAR 0 7
21047: PPUSH
21048: LD_VAR 0 7
21052: PPUSH
21053: LD_VAR 0 6
21057: PPUSH
21058: CALL_OW 1
21062: ST_TO_ADDR
// for i = s_arr downto 2 do
21063: LD_ADDR_VAR 0 5
21067: PUSH
21068: DOUBLE
21069: LD_VAR 0 7
21073: INC
21074: ST_TO_ADDR
21075: LD_INT 2
21077: PUSH
21078: FOR_DOWNTO
21079: IFFALSE 21163
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21081: LD_ADDR_VAR 0 6
21085: PUSH
21086: LD_VAR 0 7
21090: PUSH
21091: LD_VAR 0 5
21095: PUSH
21096: LD_INT 1
21098: MINUS
21099: ARRAY
21100: PPUSH
21101: LD_VAR 0 2
21105: PUSH
21106: LD_VAR 0 5
21110: PUSH
21111: LD_INT 1
21113: MINUS
21114: ARRAY
21115: PPUSH
21116: LD_VAR 0 7
21120: PUSH
21121: LD_VAR 0 5
21125: ARRAY
21126: PPUSH
21127: CALL_OW 1
21131: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21132: LD_ADDR_VAR 0 7
21136: PUSH
21137: LD_VAR 0 7
21141: PPUSH
21142: LD_VAR 0 5
21146: PUSH
21147: LD_INT 1
21149: MINUS
21150: PPUSH
21151: LD_VAR 0 6
21155: PPUSH
21156: CALL_OW 1
21160: ST_TO_ADDR
// end ;
21161: GO 21078
21163: POP
21164: POP
// result := s_arr [ 1 ] ;
21165: LD_ADDR_VAR 0 4
21169: PUSH
21170: LD_VAR 0 7
21174: PUSH
21175: LD_INT 1
21177: ARRAY
21178: ST_TO_ADDR
// end ; end ;
21179: LD_VAR 0 4
21183: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21184: LD_INT 0
21186: PPUSH
21187: PPUSH
// if not list then
21188: LD_VAR 0 1
21192: NOT
21193: IFFALSE 21197
// exit ;
21195: GO 21288
// i := list [ pos1 ] ;
21197: LD_ADDR_VAR 0 5
21201: PUSH
21202: LD_VAR 0 1
21206: PUSH
21207: LD_VAR 0 2
21211: ARRAY
21212: ST_TO_ADDR
// if not i then
21213: LD_VAR 0 5
21217: NOT
21218: IFFALSE 21222
// exit ;
21220: GO 21288
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21222: LD_ADDR_VAR 0 1
21226: PUSH
21227: LD_VAR 0 1
21231: PPUSH
21232: LD_VAR 0 2
21236: PPUSH
21237: LD_VAR 0 1
21241: PUSH
21242: LD_VAR 0 3
21246: ARRAY
21247: PPUSH
21248: CALL_OW 1
21252: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21253: LD_ADDR_VAR 0 1
21257: PUSH
21258: LD_VAR 0 1
21262: PPUSH
21263: LD_VAR 0 3
21267: PPUSH
21268: LD_VAR 0 5
21272: PPUSH
21273: CALL_OW 1
21277: ST_TO_ADDR
// result := list ;
21278: LD_ADDR_VAR 0 4
21282: PUSH
21283: LD_VAR 0 1
21287: ST_TO_ADDR
// end ;
21288: LD_VAR 0 4
21292: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21293: LD_INT 0
21295: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21296: LD_ADDR_VAR 0 5
21300: PUSH
21301: LD_VAR 0 1
21305: PPUSH
21306: CALL_OW 250
21310: PPUSH
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 251
21320: PPUSH
21321: LD_VAR 0 2
21325: PPUSH
21326: LD_VAR 0 3
21330: PPUSH
21331: LD_VAR 0 4
21335: PPUSH
21336: CALL 21718 0 5
21340: ST_TO_ADDR
// end ;
21341: LD_VAR 0 5
21345: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21346: LD_INT 0
21348: PPUSH
21349: PPUSH
21350: PPUSH
21351: PPUSH
// if not list or not unit then
21352: LD_VAR 0 2
21356: NOT
21357: IFTRUE 21366
21359: PUSH
21360: LD_VAR 0 1
21364: NOT
21365: OR
21366: IFFALSE 21370
// exit ;
21368: GO 21713
// result := [ ] ;
21370: LD_ADDR_VAR 0 5
21374: PUSH
21375: EMPTY
21376: ST_TO_ADDR
// for i in list do
21377: LD_ADDR_VAR 0 6
21381: PUSH
21382: LD_VAR 0 2
21386: PUSH
21387: FOR_IN
21388: IFFALSE 21606
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21390: LD_ADDR_VAR 0 8
21394: PUSH
21395: LD_VAR 0 1
21399: PPUSH
21400: LD_VAR 0 6
21404: PUSH
21405: LD_INT 1
21407: ARRAY
21408: PPUSH
21409: LD_VAR 0 6
21413: PUSH
21414: LD_INT 2
21416: ARRAY
21417: PPUSH
21418: CALL_OW 297
21422: ST_TO_ADDR
// if not Count ( result ) then
21423: LD_VAR 0 5
21427: PPUSH
21428: CALL 17940 0 1
21432: NOT
21433: IFFALSE 21466
// begin result := Join ( result , [ i , tmp ] ) ;
21435: LD_ADDR_VAR 0 5
21439: PUSH
21440: LD_VAR 0 5
21444: PPUSH
21445: LD_VAR 0 6
21449: PUSH
21450: LD_VAR 0 8
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL 53906 0 2
21463: ST_TO_ADDR
// continue ;
21464: GO 21387
// end ; if result [ result ] [ 2 ] <= tmp then
21466: LD_VAR 0 5
21470: PUSH
21471: LD_VAR 0 5
21475: ARRAY
21476: PUSH
21477: LD_INT 2
21479: ARRAY
21480: PUSH
21481: LD_VAR 0 8
21485: LESSEQUAL
21486: IFFALSE 21519
// result := Join ( result , [ i , tmp ] ) else
21488: LD_ADDR_VAR 0 5
21492: PUSH
21493: LD_VAR 0 5
21497: PPUSH
21498: LD_VAR 0 6
21502: PUSH
21503: LD_VAR 0 8
21507: PUSH
21508: EMPTY
21509: LIST
21510: LIST
21511: PPUSH
21512: CALL 53906 0 2
21516: ST_TO_ADDR
21517: GO 21604
// begin for j := 1 to Count ( result ) do
21519: LD_ADDR_VAR 0 7
21523: PUSH
21524: DOUBLE
21525: LD_INT 1
21527: DEC
21528: ST_TO_ADDR
21529: LD_VAR 0 5
21533: PPUSH
21534: CALL 17940 0 1
21538: PUSH
21539: FOR_TO
21540: IFFALSE 21602
// begin if tmp < result [ j ] [ 2 ] then
21542: LD_VAR 0 8
21546: PUSH
21547: LD_VAR 0 5
21551: PUSH
21552: LD_VAR 0 7
21556: ARRAY
21557: PUSH
21558: LD_INT 2
21560: ARRAY
21561: LESS
21562: IFFALSE 21600
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21564: LD_ADDR_VAR 0 5
21568: PUSH
21569: LD_VAR 0 5
21573: PPUSH
21574: LD_VAR 0 7
21578: PPUSH
21579: LD_VAR 0 6
21583: PUSH
21584: LD_VAR 0 8
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PPUSH
21593: CALL_OW 2
21597: ST_TO_ADDR
// break ;
21598: GO 21602
// end ; end ;
21600: GO 21539
21602: POP
21603: POP
// end ; end ;
21604: GO 21387
21606: POP
21607: POP
// if result and not asc then
21608: LD_VAR 0 5
21612: IFFALSE 21621
21614: PUSH
21615: LD_VAR 0 3
21619: NOT
21620: AND
21621: IFFALSE 21638
// result := ReverseArray ( result ) ;
21623: LD_ADDR_VAR 0 5
21627: PUSH
21628: LD_VAR 0 5
21632: PPUSH
21633: CALL 48996 0 1
21637: ST_TO_ADDR
// tmp := [ ] ;
21638: LD_ADDR_VAR 0 8
21642: PUSH
21643: EMPTY
21644: ST_TO_ADDR
// if mode then
21645: LD_VAR 0 4
21649: IFFALSE 21713
// begin for i := 1 to result do
21651: LD_ADDR_VAR 0 6
21655: PUSH
21656: DOUBLE
21657: LD_INT 1
21659: DEC
21660: ST_TO_ADDR
21661: LD_VAR 0 5
21665: PUSH
21666: FOR_TO
21667: IFFALSE 21701
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21669: LD_ADDR_VAR 0 8
21673: PUSH
21674: LD_VAR 0 8
21678: PPUSH
21679: LD_VAR 0 5
21683: PUSH
21684: LD_VAR 0 6
21688: ARRAY
21689: PUSH
21690: LD_INT 1
21692: ARRAY
21693: PPUSH
21694: CALL 53906 0 2
21698: ST_TO_ADDR
21699: GO 21666
21701: POP
21702: POP
// result := tmp ;
21703: LD_ADDR_VAR 0 5
21707: PUSH
21708: LD_VAR 0 8
21712: ST_TO_ADDR
// end ; end ;
21713: LD_VAR 0 5
21717: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21718: LD_INT 0
21720: PPUSH
21721: PPUSH
21722: PPUSH
21723: PPUSH
// if not list then
21724: LD_VAR 0 3
21728: NOT
21729: IFFALSE 21733
// exit ;
21731: GO 22123
// result := [ ] ;
21733: LD_ADDR_VAR 0 6
21737: PUSH
21738: EMPTY
21739: ST_TO_ADDR
// for i in list do
21740: LD_ADDR_VAR 0 7
21744: PUSH
21745: LD_VAR 0 3
21749: PUSH
21750: FOR_IN
21751: IFFALSE 21953
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21753: LD_ADDR_VAR 0 9
21757: PUSH
21758: LD_VAR 0 7
21762: PPUSH
21763: LD_VAR 0 1
21767: PPUSH
21768: LD_VAR 0 2
21772: PPUSH
21773: CALL_OW 297
21777: ST_TO_ADDR
// if not result then
21778: LD_VAR 0 6
21782: NOT
21783: IFFALSE 21809
// result := [ [ i , tmp ] ] else
21785: LD_ADDR_VAR 0 6
21789: PUSH
21790: LD_VAR 0 7
21794: PUSH
21795: LD_VAR 0 9
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: ST_TO_ADDR
21807: GO 21951
// begin if result [ result ] [ 2 ] <= tmp then
21809: LD_VAR 0 6
21813: PUSH
21814: LD_VAR 0 6
21818: ARRAY
21819: PUSH
21820: LD_INT 2
21822: ARRAY
21823: PUSH
21824: LD_VAR 0 9
21828: LESSEQUAL
21829: IFFALSE 21871
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21831: LD_ADDR_VAR 0 6
21835: PUSH
21836: LD_VAR 0 6
21840: PPUSH
21841: LD_VAR 0 6
21845: PUSH
21846: LD_INT 1
21848: PLUS
21849: PPUSH
21850: LD_VAR 0 7
21854: PUSH
21855: LD_VAR 0 9
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: PPUSH
21864: CALL_OW 2
21868: ST_TO_ADDR
21869: GO 21951
// for j := 1 to result do
21871: LD_ADDR_VAR 0 8
21875: PUSH
21876: DOUBLE
21877: LD_INT 1
21879: DEC
21880: ST_TO_ADDR
21881: LD_VAR 0 6
21885: PUSH
21886: FOR_TO
21887: IFFALSE 21949
// begin if tmp < result [ j ] [ 2 ] then
21889: LD_VAR 0 9
21893: PUSH
21894: LD_VAR 0 6
21898: PUSH
21899: LD_VAR 0 8
21903: ARRAY
21904: PUSH
21905: LD_INT 2
21907: ARRAY
21908: LESS
21909: IFFALSE 21947
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21911: LD_ADDR_VAR 0 6
21915: PUSH
21916: LD_VAR 0 6
21920: PPUSH
21921: LD_VAR 0 8
21925: PPUSH
21926: LD_VAR 0 7
21930: PUSH
21931: LD_VAR 0 9
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PPUSH
21940: CALL_OW 2
21944: ST_TO_ADDR
// break ;
21945: GO 21949
// end ; end ;
21947: GO 21886
21949: POP
21950: POP
// end ; end ;
21951: GO 21750
21953: POP
21954: POP
// if result and not asc then
21955: LD_VAR 0 6
21959: IFFALSE 21968
21961: PUSH
21962: LD_VAR 0 4
21966: NOT
21967: AND
21968: IFFALSE 22043
// begin tmp := result ;
21970: LD_ADDR_VAR 0 9
21974: PUSH
21975: LD_VAR 0 6
21979: ST_TO_ADDR
// for i = tmp downto 1 do
21980: LD_ADDR_VAR 0 7
21984: PUSH
21985: DOUBLE
21986: LD_VAR 0 9
21990: INC
21991: ST_TO_ADDR
21992: LD_INT 1
21994: PUSH
21995: FOR_DOWNTO
21996: IFFALSE 22041
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21998: LD_ADDR_VAR 0 6
22002: PUSH
22003: LD_VAR 0 6
22007: PPUSH
22008: LD_VAR 0 9
22012: PUSH
22013: LD_VAR 0 7
22017: MINUS
22018: PUSH
22019: LD_INT 1
22021: PLUS
22022: PPUSH
22023: LD_VAR 0 9
22027: PUSH
22028: LD_VAR 0 7
22032: ARRAY
22033: PPUSH
22034: CALL_OW 1
22038: ST_TO_ADDR
22039: GO 21995
22041: POP
22042: POP
// end ; tmp := [ ] ;
22043: LD_ADDR_VAR 0 9
22047: PUSH
22048: EMPTY
22049: ST_TO_ADDR
// if mode then
22050: LD_VAR 0 5
22054: IFFALSE 22123
// begin for i = 1 to result do
22056: LD_ADDR_VAR 0 7
22060: PUSH
22061: DOUBLE
22062: LD_INT 1
22064: DEC
22065: ST_TO_ADDR
22066: LD_VAR 0 6
22070: PUSH
22071: FOR_TO
22072: IFFALSE 22111
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22074: LD_ADDR_VAR 0 9
22078: PUSH
22079: LD_VAR 0 9
22083: PPUSH
22084: LD_VAR 0 7
22088: PPUSH
22089: LD_VAR 0 6
22093: PUSH
22094: LD_VAR 0 7
22098: ARRAY
22099: PUSH
22100: LD_INT 1
22102: ARRAY
22103: PPUSH
22104: CALL_OW 1
22108: ST_TO_ADDR
22109: GO 22071
22111: POP
22112: POP
// result := tmp ;
22113: LD_ADDR_VAR 0 6
22117: PUSH
22118: LD_VAR 0 9
22122: ST_TO_ADDR
// end ; end ;
22123: LD_VAR 0 6
22127: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
22132: PPUSH
22133: PPUSH
22134: PPUSH
22135: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22136: LD_ADDR_VAR 0 5
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 0
22146: PUSH
22147: LD_INT 0
22149: PUSH
22150: EMPTY
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: ST_TO_ADDR
// if not x or not y then
22158: LD_VAR 0 2
22162: NOT
22163: IFTRUE 22172
22165: PUSH
22166: LD_VAR 0 3
22170: NOT
22171: OR
22172: IFFALSE 22176
// exit ;
22174: GO 23832
// if not range then
22176: LD_VAR 0 4
22180: NOT
22181: IFFALSE 22191
// range := 10 ;
22183: LD_ADDR_VAR 0 4
22187: PUSH
22188: LD_INT 10
22190: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22191: LD_ADDR_VAR 0 8
22195: PUSH
22196: LD_INT 81
22198: PUSH
22199: LD_VAR 0 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 92
22210: PUSH
22211: LD_VAR 0 2
22215: PUSH
22216: LD_VAR 0 3
22220: PUSH
22221: LD_VAR 0 4
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: LD_INT 21
22237: PUSH
22238: LD_INT 3
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: LIST
22253: PPUSH
22254: CALL_OW 69
22258: ST_TO_ADDR
// if not tmp then
22259: LD_VAR 0 8
22263: NOT
22264: IFFALSE 22268
// exit ;
22266: GO 23832
// for i in tmp do
22268: LD_ADDR_VAR 0 6
22272: PUSH
22273: LD_VAR 0 8
22277: PUSH
22278: FOR_IN
22279: IFFALSE 23807
// begin points := [ 0 , 0 , 0 ] ;
22281: LD_ADDR_VAR 0 9
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 0
22291: PUSH
22292: LD_INT 0
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: ST_TO_ADDR
// bpoints := 1 ;
22300: LD_ADDR_VAR 0 10
22304: PUSH
22305: LD_INT 1
22307: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22308: LD_VAR 0 6
22312: PPUSH
22313: CALL_OW 247
22317: PUSH
22318: LD_INT 1
22320: DOUBLE
22321: EQUAL
22322: IFTRUE 22326
22324: GO 22908
22326: POP
// begin if GetClass ( i ) = 1 then
22327: LD_VAR 0 6
22331: PPUSH
22332: CALL_OW 257
22336: PUSH
22337: LD_INT 1
22339: EQUAL
22340: IFFALSE 22361
// points := [ 10 , 5 , 3 ] ;
22342: LD_ADDR_VAR 0 9
22346: PUSH
22347: LD_INT 10
22349: PUSH
22350: LD_INT 5
22352: PUSH
22353: LD_INT 3
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: LIST
22360: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22361: LD_VAR 0 6
22365: PPUSH
22366: CALL_OW 257
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 3
22376: PUSH
22377: LD_INT 4
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: IN
22385: IFFALSE 22406
// points := [ 3 , 2 , 1 ] ;
22387: LD_ADDR_VAR 0 9
22391: PUSH
22392: LD_INT 3
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22406: LD_VAR 0 6
22410: PPUSH
22411: CALL_OW 257
22415: PUSH
22416: LD_INT 5
22418: EQUAL
22419: IFFALSE 22440
// points := [ 130 , 5 , 2 ] ;
22421: LD_ADDR_VAR 0 9
22425: PUSH
22426: LD_INT 130
22428: PUSH
22429: LD_INT 5
22431: PUSH
22432: LD_INT 2
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: LIST
22439: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22440: LD_VAR 0 6
22444: PPUSH
22445: CALL_OW 257
22449: PUSH
22450: LD_INT 8
22452: EQUAL
22453: IFFALSE 22474
// points := [ 35 , 35 , 30 ] ;
22455: LD_ADDR_VAR 0 9
22459: PUSH
22460: LD_INT 35
22462: PUSH
22463: LD_INT 35
22465: PUSH
22466: LD_INT 30
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22474: LD_VAR 0 6
22478: PPUSH
22479: CALL_OW 257
22483: PUSH
22484: LD_INT 9
22486: EQUAL
22487: IFFALSE 22508
// points := [ 20 , 55 , 40 ] ;
22489: LD_ADDR_VAR 0 9
22493: PUSH
22494: LD_INT 20
22496: PUSH
22497: LD_INT 55
22499: PUSH
22500: LD_INT 40
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: LIST
22507: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22508: LD_VAR 0 6
22512: PPUSH
22513: CALL_OW 257
22517: PUSH
22518: LD_INT 12
22520: PUSH
22521: LD_INT 16
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: IN
22528: IFFALSE 22549
// points := [ 5 , 3 , 2 ] ;
22530: LD_ADDR_VAR 0 9
22534: PUSH
22535: LD_INT 5
22537: PUSH
22538: LD_INT 3
22540: PUSH
22541: LD_INT 2
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: LIST
22548: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22549: LD_VAR 0 6
22553: PPUSH
22554: CALL_OW 257
22558: PUSH
22559: LD_INT 17
22561: EQUAL
22562: IFFALSE 22583
// points := [ 100 , 50 , 75 ] ;
22564: LD_ADDR_VAR 0 9
22568: PUSH
22569: LD_INT 100
22571: PUSH
22572: LD_INT 50
22574: PUSH
22575: LD_INT 75
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: LIST
22582: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22583: LD_VAR 0 6
22587: PPUSH
22588: CALL_OW 257
22592: PUSH
22593: LD_INT 15
22595: EQUAL
22596: IFFALSE 22617
// points := [ 10 , 5 , 3 ] ;
22598: LD_ADDR_VAR 0 9
22602: PUSH
22603: LD_INT 10
22605: PUSH
22606: LD_INT 5
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: LIST
22616: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22617: LD_VAR 0 6
22621: PPUSH
22622: CALL_OW 257
22626: PUSH
22627: LD_INT 14
22629: EQUAL
22630: IFFALSE 22651
// points := [ 10 , 0 , 0 ] ;
22632: LD_ADDR_VAR 0 9
22636: PUSH
22637: LD_INT 10
22639: PUSH
22640: LD_INT 0
22642: PUSH
22643: LD_INT 0
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22651: LD_VAR 0 6
22655: PPUSH
22656: CALL_OW 257
22660: PUSH
22661: LD_INT 11
22663: EQUAL
22664: IFFALSE 22685
// points := [ 30 , 10 , 5 ] ;
22666: LD_ADDR_VAR 0 9
22670: PUSH
22671: LD_INT 30
22673: PUSH
22674: LD_INT 10
22676: PUSH
22677: LD_INT 5
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22685: LD_VAR 0 1
22689: PPUSH
22690: LD_INT 5
22692: PPUSH
22693: CALL_OW 321
22697: PUSH
22698: LD_INT 2
22700: EQUAL
22701: IFFALSE 22718
// bpoints := bpoints * 1.8 ;
22703: LD_ADDR_VAR 0 10
22707: PUSH
22708: LD_VAR 0 10
22712: PUSH
22713: LD_REAL  1.80000000000000E+0000
22716: MUL
22717: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22718: LD_VAR 0 6
22722: PPUSH
22723: CALL_OW 257
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: LD_INT 2
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: LD_INT 4
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: IN
22746: IFFALSE 22766
22748: PUSH
22749: LD_VAR 0 1
22753: PPUSH
22754: LD_INT 51
22756: PPUSH
22757: CALL_OW 321
22761: PUSH
22762: LD_INT 2
22764: EQUAL
22765: AND
22766: IFFALSE 22783
// bpoints := bpoints * 1.2 ;
22768: LD_ADDR_VAR 0 10
22772: PUSH
22773: LD_VAR 0 10
22777: PUSH
22778: LD_REAL  1.20000000000000E+0000
22781: MUL
22782: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22783: LD_VAR 0 6
22787: PPUSH
22788: CALL_OW 257
22792: PUSH
22793: LD_INT 5
22795: PUSH
22796: LD_INT 7
22798: PUSH
22799: LD_INT 9
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: LIST
22806: IN
22807: IFFALSE 22827
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: LD_INT 52
22817: PPUSH
22818: CALL_OW 321
22822: PUSH
22823: LD_INT 2
22825: EQUAL
22826: AND
22827: IFFALSE 22844
// bpoints := bpoints * 1.5 ;
22829: LD_ADDR_VAR 0 10
22833: PUSH
22834: LD_VAR 0 10
22838: PUSH
22839: LD_REAL  1.50000000000000E+0000
22842: MUL
22843: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_INT 66
22851: PPUSH
22852: CALL_OW 321
22856: PUSH
22857: LD_INT 2
22859: EQUAL
22860: IFFALSE 22877
// bpoints := bpoints * 1.1 ;
22862: LD_ADDR_VAR 0 10
22866: PUSH
22867: LD_VAR 0 10
22871: PUSH
22872: LD_REAL  1.10000000000000E+0000
22875: MUL
22876: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22877: LD_ADDR_VAR 0 10
22881: PUSH
22882: LD_VAR 0 10
22886: PUSH
22887: LD_VAR 0 6
22891: PPUSH
22892: LD_INT 1
22894: PPUSH
22895: CALL_OW 259
22899: PUSH
22900: LD_REAL  1.15000000000000E+0000
22903: MUL
22904: MUL
22905: ST_TO_ADDR
// end ; unit_vehicle :
22906: GO 23736
22908: LD_INT 2
22910: DOUBLE
22911: EQUAL
22912: IFTRUE 22916
22914: GO 23724
22916: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22917: LD_VAR 0 6
22921: PPUSH
22922: CALL_OW 264
22926: PUSH
22927: LD_INT 2
22929: PUSH
22930: LD_INT 42
22932: PUSH
22933: LD_INT 24
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: LIST
22940: IN
22941: IFFALSE 22962
// points := [ 25 , 5 , 3 ] ;
22943: LD_ADDR_VAR 0 9
22947: PUSH
22948: LD_INT 25
22950: PUSH
22951: LD_INT 5
22953: PUSH
22954: LD_INT 3
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: LIST
22961: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22962: LD_VAR 0 6
22966: PPUSH
22967: CALL_OW 264
22971: PUSH
22972: LD_INT 4
22974: PUSH
22975: LD_INT 43
22977: PUSH
22978: LD_INT 25
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: LIST
22985: IN
22986: IFFALSE 23007
// points := [ 40 , 15 , 5 ] ;
22988: LD_ADDR_VAR 0 9
22992: PUSH
22993: LD_INT 40
22995: PUSH
22996: LD_INT 15
22998: PUSH
22999: LD_INT 5
23001: PUSH
23002: EMPTY
23003: LIST
23004: LIST
23005: LIST
23006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23007: LD_VAR 0 6
23011: PPUSH
23012: CALL_OW 264
23016: PUSH
23017: LD_INT 3
23019: PUSH
23020: LD_INT 23
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: IN
23027: IFFALSE 23048
// points := [ 7 , 25 , 8 ] ;
23029: LD_ADDR_VAR 0 9
23033: PUSH
23034: LD_INT 7
23036: PUSH
23037: LD_INT 25
23039: PUSH
23040: LD_INT 8
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23048: LD_VAR 0 6
23052: PPUSH
23053: CALL_OW 264
23057: PUSH
23058: LD_INT 5
23060: PUSH
23061: LD_INT 27
23063: PUSH
23064: LD_INT 44
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: LIST
23071: IN
23072: IFFALSE 23093
// points := [ 14 , 50 , 16 ] ;
23074: LD_ADDR_VAR 0 9
23078: PUSH
23079: LD_INT 14
23081: PUSH
23082: LD_INT 50
23084: PUSH
23085: LD_INT 16
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: LIST
23092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23093: LD_VAR 0 6
23097: PPUSH
23098: CALL_OW 264
23102: PUSH
23103: LD_INT 6
23105: PUSH
23106: LD_INT 46
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: IN
23113: IFFALSE 23134
// points := [ 32 , 120 , 70 ] ;
23115: LD_ADDR_VAR 0 9
23119: PUSH
23120: LD_INT 32
23122: PUSH
23123: LD_INT 120
23125: PUSH
23126: LD_INT 70
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23134: LD_VAR 0 6
23138: PPUSH
23139: CALL_OW 264
23143: PUSH
23144: LD_INT 7
23146: PUSH
23147: LD_INT 28
23149: PUSH
23150: LD_INT 45
23152: PUSH
23153: LD_INT 92
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: IN
23162: IFFALSE 23183
// points := [ 35 , 20 , 45 ] ;
23164: LD_ADDR_VAR 0 9
23168: PUSH
23169: LD_INT 35
23171: PUSH
23172: LD_INT 20
23174: PUSH
23175: LD_INT 45
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: LIST
23182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23183: LD_VAR 0 6
23187: PPUSH
23188: CALL_OW 264
23192: PUSH
23193: LD_INT 47
23195: PUSH
23196: EMPTY
23197: LIST
23198: IN
23199: IFFALSE 23220
// points := [ 67 , 45 , 75 ] ;
23201: LD_ADDR_VAR 0 9
23205: PUSH
23206: LD_INT 67
23208: PUSH
23209: LD_INT 45
23211: PUSH
23212: LD_INT 75
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23220: LD_VAR 0 6
23224: PPUSH
23225: CALL_OW 264
23229: PUSH
23230: LD_INT 26
23232: PUSH
23233: EMPTY
23234: LIST
23235: IN
23236: IFFALSE 23257
// points := [ 120 , 30 , 80 ] ;
23238: LD_ADDR_VAR 0 9
23242: PUSH
23243: LD_INT 120
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 80
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: LIST
23256: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23257: LD_VAR 0 6
23261: PPUSH
23262: CALL_OW 264
23266: PUSH
23267: LD_INT 22
23269: PUSH
23270: EMPTY
23271: LIST
23272: IN
23273: IFFALSE 23294
// points := [ 40 , 1 , 1 ] ;
23275: LD_ADDR_VAR 0 9
23279: PUSH
23280: LD_INT 40
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: LIST
23293: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23294: LD_VAR 0 6
23298: PPUSH
23299: CALL_OW 264
23303: PUSH
23304: LD_INT 29
23306: PUSH
23307: EMPTY
23308: LIST
23309: IN
23310: IFFALSE 23331
// points := [ 70 , 200 , 400 ] ;
23312: LD_ADDR_VAR 0 9
23316: PUSH
23317: LD_INT 70
23319: PUSH
23320: LD_INT 200
23322: PUSH
23323: LD_INT 400
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: LIST
23330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23331: LD_VAR 0 6
23335: PPUSH
23336: CALL_OW 264
23340: PUSH
23341: LD_INT 14
23343: PUSH
23344: LD_INT 53
23346: PUSH
23347: EMPTY
23348: LIST
23349: LIST
23350: IN
23351: IFFALSE 23372
// points := [ 40 , 10 , 20 ] ;
23353: LD_ADDR_VAR 0 9
23357: PUSH
23358: LD_INT 40
23360: PUSH
23361: LD_INT 10
23363: PUSH
23364: LD_INT 20
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: LIST
23371: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23372: LD_VAR 0 6
23376: PPUSH
23377: CALL_OW 264
23381: PUSH
23382: LD_INT 9
23384: PUSH
23385: EMPTY
23386: LIST
23387: IN
23388: IFFALSE 23409
// points := [ 5 , 70 , 20 ] ;
23390: LD_ADDR_VAR 0 9
23394: PUSH
23395: LD_INT 5
23397: PUSH
23398: LD_INT 70
23400: PUSH
23401: LD_INT 20
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23409: LD_VAR 0 6
23413: PPUSH
23414: CALL_OW 264
23418: PUSH
23419: LD_INT 10
23421: PUSH
23422: EMPTY
23423: LIST
23424: IN
23425: IFFALSE 23446
// points := [ 35 , 110 , 70 ] ;
23427: LD_ADDR_VAR 0 9
23431: PUSH
23432: LD_INT 35
23434: PUSH
23435: LD_INT 110
23437: PUSH
23438: LD_INT 70
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23446: LD_VAR 0 6
23450: PPUSH
23451: CALL_OW 265
23455: PUSH
23456: LD_INT 25
23458: EQUAL
23459: IFFALSE 23480
// points := [ 80 , 65 , 100 ] ;
23461: LD_ADDR_VAR 0 9
23465: PUSH
23466: LD_INT 80
23468: PUSH
23469: LD_INT 65
23471: PUSH
23472: LD_INT 100
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23480: LD_VAR 0 6
23484: PPUSH
23485: CALL_OW 263
23489: PUSH
23490: LD_INT 1
23492: EQUAL
23493: IFFALSE 23528
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23495: LD_ADDR_VAR 0 10
23499: PUSH
23500: LD_VAR 0 10
23504: PUSH
23505: LD_VAR 0 6
23509: PPUSH
23510: CALL_OW 311
23514: PPUSH
23515: LD_INT 3
23517: PPUSH
23518: CALL_OW 259
23522: PUSH
23523: LD_INT 4
23525: MUL
23526: MUL
23527: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23528: LD_VAR 0 6
23532: PPUSH
23533: CALL_OW 263
23537: PUSH
23538: LD_INT 2
23540: EQUAL
23541: IFFALSE 23592
// begin j := IsControledBy ( i ) ;
23543: LD_ADDR_VAR 0 7
23547: PUSH
23548: LD_VAR 0 6
23552: PPUSH
23553: CALL_OW 312
23557: ST_TO_ADDR
// if j then
23558: LD_VAR 0 7
23562: IFFALSE 23592
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23564: LD_ADDR_VAR 0 10
23568: PUSH
23569: LD_VAR 0 10
23573: PUSH
23574: LD_VAR 0 7
23578: PPUSH
23579: LD_INT 3
23581: PPUSH
23582: CALL_OW 259
23586: PUSH
23587: LD_INT 3
23589: MUL
23590: MUL
23591: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23592: LD_VAR 0 6
23596: PPUSH
23597: CALL_OW 264
23601: PUSH
23602: LD_INT 5
23604: PUSH
23605: LD_INT 6
23607: PUSH
23608: LD_INT 46
23610: PUSH
23611: LD_INT 44
23613: PUSH
23614: LD_INT 47
23616: PUSH
23617: LD_INT 45
23619: PUSH
23620: LD_INT 28
23622: PUSH
23623: LD_INT 7
23625: PUSH
23626: LD_INT 27
23628: PUSH
23629: LD_INT 29
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: IN
23644: IFFALSE 23664
23646: PUSH
23647: LD_VAR 0 1
23651: PPUSH
23652: LD_INT 52
23654: PPUSH
23655: CALL_OW 321
23659: PUSH
23660: LD_INT 2
23662: EQUAL
23663: AND
23664: IFFALSE 23681
// bpoints := bpoints * 1.2 ;
23666: LD_ADDR_VAR 0 10
23670: PUSH
23671: LD_VAR 0 10
23675: PUSH
23676: LD_REAL  1.20000000000000E+0000
23679: MUL
23680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23681: LD_VAR 0 6
23685: PPUSH
23686: CALL_OW 264
23690: PUSH
23691: LD_INT 6
23693: PUSH
23694: LD_INT 46
23696: PUSH
23697: LD_INT 47
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: LIST
23704: IN
23705: IFFALSE 23722
// bpoints := bpoints * 1.2 ;
23707: LD_ADDR_VAR 0 10
23711: PUSH
23712: LD_VAR 0 10
23716: PUSH
23717: LD_REAL  1.20000000000000E+0000
23720: MUL
23721: ST_TO_ADDR
// end ; unit_building :
23722: GO 23736
23724: LD_INT 3
23726: DOUBLE
23727: EQUAL
23728: IFTRUE 23732
23730: GO 23735
23732: POP
// ; end ;
23733: GO 23736
23735: POP
// for j = 1 to 3 do
23736: LD_ADDR_VAR 0 7
23740: PUSH
23741: DOUBLE
23742: LD_INT 1
23744: DEC
23745: ST_TO_ADDR
23746: LD_INT 3
23748: PUSH
23749: FOR_TO
23750: IFFALSE 23803
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23752: LD_ADDR_VAR 0 5
23756: PUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: LD_VAR 0 7
23766: PPUSH
23767: LD_VAR 0 5
23771: PUSH
23772: LD_VAR 0 7
23776: ARRAY
23777: PUSH
23778: LD_VAR 0 9
23782: PUSH
23783: LD_VAR 0 7
23787: ARRAY
23788: PUSH
23789: LD_VAR 0 10
23793: MUL
23794: PLUS
23795: PPUSH
23796: CALL_OW 1
23800: ST_TO_ADDR
23801: GO 23749
23803: POP
23804: POP
// end ;
23805: GO 22278
23807: POP
23808: POP
// result := Replace ( result , 4 , tmp ) ;
23809: LD_ADDR_VAR 0 5
23813: PUSH
23814: LD_VAR 0 5
23818: PPUSH
23819: LD_INT 4
23821: PPUSH
23822: LD_VAR 0 8
23826: PPUSH
23827: CALL_OW 1
23831: ST_TO_ADDR
// end ;
23832: LD_VAR 0 5
23836: RET
// export function DangerAtRange ( unit , range ) ; begin
23837: LD_INT 0
23839: PPUSH
// if not unit then
23840: LD_VAR 0 1
23844: NOT
23845: IFFALSE 23849
// exit ;
23847: GO 23894
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 255
23863: PPUSH
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 250
23873: PPUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 251
23883: PPUSH
23884: LD_VAR 0 2
23888: PPUSH
23889: CALL 22128 0 4
23893: ST_TO_ADDR
// end ;
23894: LD_VAR 0 3
23898: RET
// export function DangerInArea ( side , area ) ; begin
23899: LD_INT 0
23901: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23902: LD_ADDR_VAR 0 3
23906: PUSH
23907: LD_VAR 0 2
23911: PPUSH
23912: LD_INT 81
23914: PUSH
23915: LD_VAR 0 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PPUSH
23924: CALL_OW 70
23928: ST_TO_ADDR
// end ;
23929: LD_VAR 0 3
23933: RET
// export function IsExtension ( b ) ; begin
23934: LD_INT 0
23936: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_VAR 0 1
23946: PUSH
23947: LD_INT 23
23949: PUSH
23950: LD_INT 20
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_INT 17
23958: PUSH
23959: LD_INT 24
23961: PUSH
23962: LD_INT 21
23964: PUSH
23965: LD_INT 19
23967: PUSH
23968: LD_INT 16
23970: PUSH
23971: LD_INT 25
23973: PUSH
23974: LD_INT 18
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: IN
23989: ST_TO_ADDR
// end ;
23990: LD_VAR 0 2
23994: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23995: LD_INT 0
23997: PPUSH
23998: PPUSH
23999: PPUSH
// result := [ ] ;
24000: LD_ADDR_VAR 0 4
24004: PUSH
24005: EMPTY
24006: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24007: LD_ADDR_VAR 0 5
24011: PUSH
24012: LD_VAR 0 2
24016: PPUSH
24017: LD_INT 21
24019: PUSH
24020: LD_INT 3
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PPUSH
24027: CALL_OW 70
24031: ST_TO_ADDR
// if not tmp then
24032: LD_VAR 0 5
24036: NOT
24037: IFFALSE 24041
// exit ;
24039: GO 24105
// if checkLink then
24041: LD_VAR 0 3
24045: IFFALSE 24095
// begin for i in tmp do
24047: LD_ADDR_VAR 0 6
24051: PUSH
24052: LD_VAR 0 5
24056: PUSH
24057: FOR_IN
24058: IFFALSE 24093
// if GetBase ( i ) <> base then
24060: LD_VAR 0 6
24064: PPUSH
24065: CALL_OW 274
24069: PUSH
24070: LD_VAR 0 1
24074: NONEQUAL
24075: IFFALSE 24091
// ComLinkToBase ( base , i ) ;
24077: LD_VAR 0 1
24081: PPUSH
24082: LD_VAR 0 6
24086: PPUSH
24087: CALL_OW 169
24091: GO 24057
24093: POP
24094: POP
// end ; result := tmp ;
24095: LD_ADDR_VAR 0 4
24099: PUSH
24100: LD_VAR 0 5
24104: ST_TO_ADDR
// end ;
24105: LD_VAR 0 4
24109: RET
// export function ComComplete ( units , b ) ; var i ; begin
24110: LD_INT 0
24112: PPUSH
24113: PPUSH
// if not units then
24114: LD_VAR 0 1
24118: NOT
24119: IFFALSE 24123
// exit ;
24121: GO 24213
// for i in units do
24123: LD_ADDR_VAR 0 4
24127: PUSH
24128: LD_VAR 0 1
24132: PUSH
24133: FOR_IN
24134: IFFALSE 24211
// if BuildingStatus ( b ) = bs_build then
24136: LD_VAR 0 2
24140: PPUSH
24141: CALL_OW 461
24145: PUSH
24146: LD_INT 1
24148: EQUAL
24149: IFFALSE 24209
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24151: LD_VAR 0 4
24155: PPUSH
24156: LD_STRING h
24158: PUSH
24159: LD_VAR 0 2
24163: PPUSH
24164: CALL_OW 250
24168: PUSH
24169: LD_VAR 0 2
24173: PPUSH
24174: CALL_OW 251
24178: PUSH
24179: LD_VAR 0 2
24183: PUSH
24184: LD_INT 0
24186: PUSH
24187: LD_INT 0
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: PPUSH
24205: CALL_OW 446
24209: GO 24133
24211: POP
24212: POP
// end ;
24213: LD_VAR 0 3
24217: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24218: LD_INT 0
24220: PPUSH
24221: PPUSH
24222: PPUSH
24223: PPUSH
24224: PPUSH
24225: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24226: LD_VAR 0 1
24230: NOT
24231: IFTRUE 24248
24233: PUSH
24234: LD_VAR 0 1
24238: PPUSH
24239: CALL_OW 263
24243: PUSH
24244: LD_INT 2
24246: NONEQUAL
24247: OR
24248: IFFALSE 24252
// exit ;
24250: GO 24568
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24252: LD_ADDR_VAR 0 6
24256: PUSH
24257: LD_INT 22
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 255
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 36
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 34
24289: PUSH
24290: LD_INT 31
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PPUSH
24306: CALL_OW 69
24310: ST_TO_ADDR
// if not tmp then
24311: LD_VAR 0 6
24315: NOT
24316: IFFALSE 24320
// exit ;
24318: GO 24568
// result := [ ] ;
24320: LD_ADDR_VAR 0 2
24324: PUSH
24325: EMPTY
24326: ST_TO_ADDR
// for i in tmp do
24327: LD_ADDR_VAR 0 3
24331: PUSH
24332: LD_VAR 0 6
24336: PUSH
24337: FOR_IN
24338: IFFALSE 24409
// begin t := UnitsInside ( i ) ;
24340: LD_ADDR_VAR 0 4
24344: PUSH
24345: LD_VAR 0 3
24349: PPUSH
24350: CALL_OW 313
24354: ST_TO_ADDR
// if t then
24355: LD_VAR 0 4
24359: IFFALSE 24407
// for j in t do
24361: LD_ADDR_VAR 0 7
24365: PUSH
24366: LD_VAR 0 4
24370: PUSH
24371: FOR_IN
24372: IFFALSE 24405
// result := Replace ( result , result + 1 , j ) ;
24374: LD_ADDR_VAR 0 2
24378: PUSH
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_VAR 0 2
24388: PUSH
24389: LD_INT 1
24391: PLUS
24392: PPUSH
24393: LD_VAR 0 7
24397: PPUSH
24398: CALL_OW 1
24402: ST_TO_ADDR
24403: GO 24371
24405: POP
24406: POP
// end ;
24407: GO 24337
24409: POP
24410: POP
// if not result then
24411: LD_VAR 0 2
24415: NOT
24416: IFFALSE 24420
// exit ;
24418: GO 24568
// mech := result [ 1 ] ;
24420: LD_ADDR_VAR 0 5
24424: PUSH
24425: LD_VAR 0 2
24429: PUSH
24430: LD_INT 1
24432: ARRAY
24433: ST_TO_ADDR
// if result > 1 then
24434: LD_VAR 0 2
24438: PUSH
24439: LD_INT 1
24441: GREATER
24442: IFFALSE 24554
// begin for i = 2 to result do
24444: LD_ADDR_VAR 0 3
24448: PUSH
24449: DOUBLE
24450: LD_INT 2
24452: DEC
24453: ST_TO_ADDR
24454: LD_VAR 0 2
24458: PUSH
24459: FOR_TO
24460: IFFALSE 24552
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24462: LD_ADDR_VAR 0 4
24466: PUSH
24467: LD_VAR 0 2
24471: PUSH
24472: LD_VAR 0 3
24476: ARRAY
24477: PPUSH
24478: LD_INT 3
24480: PPUSH
24481: CALL_OW 259
24485: PUSH
24486: LD_VAR 0 2
24490: PUSH
24491: LD_VAR 0 3
24495: ARRAY
24496: PPUSH
24497: CALL_OW 432
24501: MINUS
24502: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24503: LD_VAR 0 4
24507: PUSH
24508: LD_VAR 0 5
24512: PPUSH
24513: LD_INT 3
24515: PPUSH
24516: CALL_OW 259
24520: PUSH
24521: LD_VAR 0 5
24525: PPUSH
24526: CALL_OW 432
24530: MINUS
24531: GREATEREQUAL
24532: IFFALSE 24550
// mech := result [ i ] ;
24534: LD_ADDR_VAR 0 5
24538: PUSH
24539: LD_VAR 0 2
24543: PUSH
24544: LD_VAR 0 3
24548: ARRAY
24549: ST_TO_ADDR
// end ;
24550: GO 24459
24552: POP
24553: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24554: LD_VAR 0 1
24558: PPUSH
24559: LD_VAR 0 5
24563: PPUSH
24564: CALL_OW 135
// end ;
24568: LD_VAR 0 2
24572: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24573: LD_INT 0
24575: PPUSH
24576: PPUSH
24577: PPUSH
24578: PPUSH
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
// result := [ ] ;
24588: LD_ADDR_VAR 0 7
24592: PUSH
24593: EMPTY
24594: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 266
24604: PUSH
24605: LD_INT 0
24607: PUSH
24608: LD_INT 1
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: IN
24615: NOT
24616: IFFALSE 24620
// exit ;
24618: GO 26260
// if name then
24620: LD_VAR 0 3
24624: IFFALSE 24640
// SetBName ( base_dep , name ) ;
24626: LD_VAR 0 1
24630: PPUSH
24631: LD_VAR 0 3
24635: PPUSH
24636: CALL_OW 500
// base := GetBase ( base_dep ) ;
24640: LD_ADDR_VAR 0 15
24644: PUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 274
24654: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24655: LD_ADDR_VAR 0 16
24659: PUSH
24660: LD_VAR 0 1
24664: PPUSH
24665: CALL_OW 255
24669: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24670: LD_ADDR_VAR 0 17
24674: PUSH
24675: LD_VAR 0 1
24679: PPUSH
24680: CALL_OW 248
24684: ST_TO_ADDR
// if sources then
24685: LD_VAR 0 5
24689: IFFALSE 24736
// for i = 1 to 3 do
24691: LD_ADDR_VAR 0 8
24695: PUSH
24696: DOUBLE
24697: LD_INT 1
24699: DEC
24700: ST_TO_ADDR
24701: LD_INT 3
24703: PUSH
24704: FOR_TO
24705: IFFALSE 24734
// AddResourceType ( base , i , sources [ i ] ) ;
24707: LD_VAR 0 15
24711: PPUSH
24712: LD_VAR 0 8
24716: PPUSH
24717: LD_VAR 0 5
24721: PUSH
24722: LD_VAR 0 8
24726: ARRAY
24727: PPUSH
24728: CALL_OW 276
24732: GO 24704
24734: POP
24735: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24736: LD_ADDR_VAR 0 18
24740: PUSH
24741: LD_VAR 0 15
24745: PPUSH
24746: LD_VAR 0 2
24750: PPUSH
24751: LD_INT 1
24753: PPUSH
24754: CALL 23995 0 3
24758: ST_TO_ADDR
// InitHc ;
24759: CALL_OW 19
// InitUc ;
24763: CALL_OW 18
// uc_side := side ;
24767: LD_ADDR_OWVAR 20
24771: PUSH
24772: LD_VAR 0 16
24776: ST_TO_ADDR
// uc_nation := nation ;
24777: LD_ADDR_OWVAR 21
24781: PUSH
24782: LD_VAR 0 17
24786: ST_TO_ADDR
// if buildings then
24787: LD_VAR 0 18
24791: IFFALSE 26119
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24793: LD_ADDR_VAR 0 19
24797: PUSH
24798: LD_VAR 0 18
24802: PPUSH
24803: LD_INT 2
24805: PUSH
24806: LD_INT 30
24808: PUSH
24809: LD_INT 29
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 30
24818: PUSH
24819: LD_INT 30
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 72
24835: ST_TO_ADDR
// if tmp then
24836: LD_VAR 0 19
24840: IFFALSE 24888
// for i in tmp do
24842: LD_ADDR_VAR 0 8
24846: PUSH
24847: LD_VAR 0 19
24851: PUSH
24852: FOR_IN
24853: IFFALSE 24886
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24855: LD_VAR 0 8
24859: PPUSH
24860: CALL_OW 250
24864: PPUSH
24865: LD_VAR 0 8
24869: PPUSH
24870: CALL_OW 251
24874: PPUSH
24875: LD_VAR 0 16
24879: PPUSH
24880: CALL_OW 441
24884: GO 24852
24886: POP
24887: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24888: LD_VAR 0 18
24892: PPUSH
24893: LD_INT 2
24895: PUSH
24896: LD_INT 30
24898: PUSH
24899: LD_INT 32
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 30
24908: PUSH
24909: LD_INT 33
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: PPUSH
24921: CALL_OW 72
24925: IFFALSE 25013
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24927: LD_ADDR_VAR 0 8
24931: PUSH
24932: LD_VAR 0 18
24936: PPUSH
24937: LD_INT 2
24939: PUSH
24940: LD_INT 30
24942: PUSH
24943: LD_INT 32
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 30
24952: PUSH
24953: LD_INT 33
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: PPUSH
24965: CALL_OW 72
24969: PUSH
24970: FOR_IN
24971: IFFALSE 25011
// begin if not GetBWeapon ( i ) then
24973: LD_VAR 0 8
24977: PPUSH
24978: CALL_OW 269
24982: NOT
24983: IFFALSE 25009
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24985: LD_VAR 0 8
24989: PPUSH
24990: LD_VAR 0 8
24994: PPUSH
24995: LD_VAR 0 2
24999: PPUSH
25000: CALL 26265 0 2
25004: PPUSH
25005: CALL_OW 431
// end ;
25009: GO 24970
25011: POP
25012: POP
// end ; for i = 1 to personel do
25013: LD_ADDR_VAR 0 8
25017: PUSH
25018: DOUBLE
25019: LD_INT 1
25021: DEC
25022: ST_TO_ADDR
25023: LD_VAR 0 6
25027: PUSH
25028: FOR_TO
25029: IFFALSE 26099
// begin if i > 4 then
25031: LD_VAR 0 8
25035: PUSH
25036: LD_INT 4
25038: GREATER
25039: IFFALSE 25043
// break ;
25041: GO 26099
// case i of 1 :
25043: LD_VAR 0 8
25047: PUSH
25048: LD_INT 1
25050: DOUBLE
25051: EQUAL
25052: IFTRUE 25056
25054: GO 25136
25056: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25057: LD_ADDR_VAR 0 12
25061: PUSH
25062: LD_VAR 0 18
25066: PPUSH
25067: LD_INT 22
25069: PUSH
25070: LD_VAR 0 16
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 58
25081: PUSH
25082: EMPTY
25083: LIST
25084: PUSH
25085: LD_INT 2
25087: PUSH
25088: LD_INT 30
25090: PUSH
25091: LD_INT 32
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 30
25100: PUSH
25101: LD_INT 4
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 30
25110: PUSH
25111: LD_INT 5
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: LIST
25128: PPUSH
25129: CALL_OW 72
25133: ST_TO_ADDR
25134: GO 25358
25136: LD_INT 2
25138: DOUBLE
25139: EQUAL
25140: IFTRUE 25144
25142: GO 25206
25144: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25145: LD_ADDR_VAR 0 12
25149: PUSH
25150: LD_VAR 0 18
25154: PPUSH
25155: LD_INT 22
25157: PUSH
25158: LD_VAR 0 16
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: LD_INT 2
25169: PUSH
25170: LD_INT 30
25172: PUSH
25173: LD_INT 0
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 30
25182: PUSH
25183: LD_INT 1
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: LIST
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PPUSH
25199: CALL_OW 72
25203: ST_TO_ADDR
25204: GO 25358
25206: LD_INT 3
25208: DOUBLE
25209: EQUAL
25210: IFTRUE 25214
25212: GO 25276
25214: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25215: LD_ADDR_VAR 0 12
25219: PUSH
25220: LD_VAR 0 18
25224: PPUSH
25225: LD_INT 22
25227: PUSH
25228: LD_VAR 0 16
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: LD_INT 30
25242: PUSH
25243: LD_INT 2
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 30
25252: PUSH
25253: LD_INT 3
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: LIST
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PPUSH
25269: CALL_OW 72
25273: ST_TO_ADDR
25274: GO 25358
25276: LD_INT 4
25278: DOUBLE
25279: EQUAL
25280: IFTRUE 25284
25282: GO 25357
25284: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25285: LD_ADDR_VAR 0 12
25289: PUSH
25290: LD_VAR 0 18
25294: PPUSH
25295: LD_INT 22
25297: PUSH
25298: LD_VAR 0 16
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: LD_INT 30
25312: PUSH
25313: LD_INT 6
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 30
25322: PUSH
25323: LD_INT 7
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 30
25332: PUSH
25333: LD_INT 8
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 72
25354: ST_TO_ADDR
25355: GO 25358
25357: POP
// if i = 1 then
25358: LD_VAR 0 8
25362: PUSH
25363: LD_INT 1
25365: EQUAL
25366: IFFALSE 25477
// begin tmp := [ ] ;
25368: LD_ADDR_VAR 0 19
25372: PUSH
25373: EMPTY
25374: ST_TO_ADDR
// for j in f do
25375: LD_ADDR_VAR 0 9
25379: PUSH
25380: LD_VAR 0 12
25384: PUSH
25385: FOR_IN
25386: IFFALSE 25459
// if GetBType ( j ) = b_bunker then
25388: LD_VAR 0 9
25392: PPUSH
25393: CALL_OW 266
25397: PUSH
25398: LD_INT 32
25400: EQUAL
25401: IFFALSE 25428
// tmp := Insert ( tmp , 1 , j ) else
25403: LD_ADDR_VAR 0 19
25407: PUSH
25408: LD_VAR 0 19
25412: PPUSH
25413: LD_INT 1
25415: PPUSH
25416: LD_VAR 0 9
25420: PPUSH
25421: CALL_OW 2
25425: ST_TO_ADDR
25426: GO 25457
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25428: LD_ADDR_VAR 0 19
25432: PUSH
25433: LD_VAR 0 19
25437: PPUSH
25438: LD_VAR 0 19
25442: PUSH
25443: LD_INT 1
25445: PLUS
25446: PPUSH
25447: LD_VAR 0 9
25451: PPUSH
25452: CALL_OW 2
25456: ST_TO_ADDR
25457: GO 25385
25459: POP
25460: POP
// if tmp then
25461: LD_VAR 0 19
25465: IFFALSE 25477
// f := tmp ;
25467: LD_ADDR_VAR 0 12
25471: PUSH
25472: LD_VAR 0 19
25476: ST_TO_ADDR
// end ; x := personel [ i ] ;
25477: LD_ADDR_VAR 0 13
25481: PUSH
25482: LD_VAR 0 6
25486: PUSH
25487: LD_VAR 0 8
25491: ARRAY
25492: ST_TO_ADDR
// if x = - 1 then
25493: LD_VAR 0 13
25497: PUSH
25498: LD_INT 1
25500: NEG
25501: EQUAL
25502: IFFALSE 25713
// begin for j in f do
25504: LD_ADDR_VAR 0 9
25508: PUSH
25509: LD_VAR 0 12
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25709
// repeat InitHc ;
25517: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25521: LD_VAR 0 9
25525: PPUSH
25526: CALL_OW 266
25530: PUSH
25531: LD_INT 5
25533: EQUAL
25534: IFFALSE 25604
// begin if UnitsInside ( j ) < 3 then
25536: LD_VAR 0 9
25540: PPUSH
25541: CALL_OW 313
25545: PUSH
25546: LD_INT 3
25548: LESS
25549: IFFALSE 25585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25551: LD_INT 0
25553: PPUSH
25554: LD_INT 5
25556: PUSH
25557: LD_INT 8
25559: PUSH
25560: LD_INT 9
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: LIST
25567: PUSH
25568: LD_VAR 0 17
25572: ARRAY
25573: PPUSH
25574: LD_VAR 0 4
25578: PPUSH
25579: CALL_OW 380
25583: GO 25602
// PrepareHuman ( false , i , skill ) ;
25585: LD_INT 0
25587: PPUSH
25588: LD_VAR 0 8
25592: PPUSH
25593: LD_VAR 0 4
25597: PPUSH
25598: CALL_OW 380
// end else
25602: GO 25621
// PrepareHuman ( false , i , skill ) ;
25604: LD_INT 0
25606: PPUSH
25607: LD_VAR 0 8
25611: PPUSH
25612: LD_VAR 0 4
25616: PPUSH
25617: CALL_OW 380
// un := CreateHuman ;
25621: LD_ADDR_VAR 0 14
25625: PUSH
25626: CALL_OW 44
25630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25631: LD_ADDR_VAR 0 7
25635: PUSH
25636: LD_VAR 0 7
25640: PPUSH
25641: LD_INT 1
25643: PPUSH
25644: LD_VAR 0 14
25648: PPUSH
25649: CALL_OW 2
25653: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25654: LD_VAR 0 14
25658: PPUSH
25659: LD_VAR 0 9
25663: PPUSH
25664: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25668: LD_VAR 0 9
25672: PPUSH
25673: CALL_OW 313
25677: PUSH
25678: LD_INT 6
25680: EQUAL
25681: IFTRUE 25705
25683: PUSH
25684: LD_VAR 0 9
25688: PPUSH
25689: CALL_OW 266
25693: PUSH
25694: LD_INT 32
25696: PUSH
25697: LD_INT 31
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: IN
25704: OR
25705: IFFALSE 25517
25707: GO 25514
25709: POP
25710: POP
// end else
25711: GO 26097
// for j = 1 to x do
25713: LD_ADDR_VAR 0 9
25717: PUSH
25718: DOUBLE
25719: LD_INT 1
25721: DEC
25722: ST_TO_ADDR
25723: LD_VAR 0 13
25727: PUSH
25728: FOR_TO
25729: IFFALSE 26095
// begin InitHc ;
25731: CALL_OW 19
// if not f then
25735: LD_VAR 0 12
25739: NOT
25740: IFFALSE 25829
// begin PrepareHuman ( false , i , skill ) ;
25742: LD_INT 0
25744: PPUSH
25745: LD_VAR 0 8
25749: PPUSH
25750: LD_VAR 0 4
25754: PPUSH
25755: CALL_OW 380
// un := CreateHuman ;
25759: LD_ADDR_VAR 0 14
25763: PUSH
25764: CALL_OW 44
25768: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25769: LD_ADDR_VAR 0 7
25773: PUSH
25774: LD_VAR 0 7
25778: PPUSH
25779: LD_INT 1
25781: PPUSH
25782: LD_VAR 0 14
25786: PPUSH
25787: CALL_OW 2
25791: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25792: LD_VAR 0 14
25796: PPUSH
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 250
25806: PPUSH
25807: LD_VAR 0 1
25811: PPUSH
25812: CALL_OW 251
25816: PPUSH
25817: LD_INT 10
25819: PPUSH
25820: LD_INT 0
25822: PPUSH
25823: CALL_OW 50
// continue ;
25827: GO 25728
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25829: LD_VAR 0 12
25833: PUSH
25834: LD_INT 1
25836: ARRAY
25837: PPUSH
25838: CALL_OW 313
25842: IFFALSE 25870
25844: PUSH
25845: LD_VAR 0 12
25849: PUSH
25850: LD_INT 1
25852: ARRAY
25853: PPUSH
25854: CALL_OW 266
25858: PUSH
25859: LD_INT 32
25861: PUSH
25862: LD_INT 31
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: IN
25869: AND
25870: IFTRUE 25891
25872: PUSH
25873: LD_VAR 0 12
25877: PUSH
25878: LD_INT 1
25880: ARRAY
25881: PPUSH
25882: CALL_OW 313
25886: PUSH
25887: LD_INT 6
25889: EQUAL
25890: OR
25891: IFFALSE 25911
// f := Delete ( f , 1 ) ;
25893: LD_ADDR_VAR 0 12
25897: PUSH
25898: LD_VAR 0 12
25902: PPUSH
25903: LD_INT 1
25905: PPUSH
25906: CALL_OW 3
25910: ST_TO_ADDR
// if not f then
25911: LD_VAR 0 12
25915: NOT
25916: IFFALSE 25934
// begin x := x + 2 ;
25918: LD_ADDR_VAR 0 13
25922: PUSH
25923: LD_VAR 0 13
25927: PUSH
25928: LD_INT 2
25930: PLUS
25931: ST_TO_ADDR
// continue ;
25932: GO 25728
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25934: LD_VAR 0 12
25938: PUSH
25939: LD_INT 1
25941: ARRAY
25942: PPUSH
25943: CALL_OW 266
25947: PUSH
25948: LD_INT 5
25950: EQUAL
25951: IFFALSE 26025
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25953: LD_VAR 0 12
25957: PUSH
25958: LD_INT 1
25960: ARRAY
25961: PPUSH
25962: CALL_OW 313
25966: PUSH
25967: LD_INT 3
25969: LESS
25970: IFFALSE 26006
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25972: LD_INT 0
25974: PPUSH
25975: LD_INT 5
25977: PUSH
25978: LD_INT 8
25980: PUSH
25981: LD_INT 9
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: LIST
25988: PUSH
25989: LD_VAR 0 17
25993: ARRAY
25994: PPUSH
25995: LD_VAR 0 4
25999: PPUSH
26000: CALL_OW 380
26004: GO 26023
// PrepareHuman ( false , i , skill ) ;
26006: LD_INT 0
26008: PPUSH
26009: LD_VAR 0 8
26013: PPUSH
26014: LD_VAR 0 4
26018: PPUSH
26019: CALL_OW 380
// end else
26023: GO 26042
// PrepareHuman ( false , i , skill ) ;
26025: LD_INT 0
26027: PPUSH
26028: LD_VAR 0 8
26032: PPUSH
26033: LD_VAR 0 4
26037: PPUSH
26038: CALL_OW 380
// un := CreateHuman ;
26042: LD_ADDR_VAR 0 14
26046: PUSH
26047: CALL_OW 44
26051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26052: LD_ADDR_VAR 0 7
26056: PUSH
26057: LD_VAR 0 7
26061: PPUSH
26062: LD_INT 1
26064: PPUSH
26065: LD_VAR 0 14
26069: PPUSH
26070: CALL_OW 2
26074: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26075: LD_VAR 0 14
26079: PPUSH
26080: LD_VAR 0 12
26084: PUSH
26085: LD_INT 1
26087: ARRAY
26088: PPUSH
26089: CALL_OW 52
// end ;
26093: GO 25728
26095: POP
26096: POP
// end ;
26097: GO 25028
26099: POP
26100: POP
// result := result ^ buildings ;
26101: LD_ADDR_VAR 0 7
26105: PUSH
26106: LD_VAR 0 7
26110: PUSH
26111: LD_VAR 0 18
26115: ADD
26116: ST_TO_ADDR
// end else
26117: GO 26260
// begin for i = 1 to personel do
26119: LD_ADDR_VAR 0 8
26123: PUSH
26124: DOUBLE
26125: LD_INT 1
26127: DEC
26128: ST_TO_ADDR
26129: LD_VAR 0 6
26133: PUSH
26134: FOR_TO
26135: IFFALSE 26258
// begin if i > 4 then
26137: LD_VAR 0 8
26141: PUSH
26142: LD_INT 4
26144: GREATER
26145: IFFALSE 26149
// break ;
26147: GO 26258
// x := personel [ i ] ;
26149: LD_ADDR_VAR 0 13
26153: PUSH
26154: LD_VAR 0 6
26158: PUSH
26159: LD_VAR 0 8
26163: ARRAY
26164: ST_TO_ADDR
// if x = - 1 then
26165: LD_VAR 0 13
26169: PUSH
26170: LD_INT 1
26172: NEG
26173: EQUAL
26174: IFFALSE 26178
// continue ;
26176: GO 26134
// PrepareHuman ( false , i , skill ) ;
26178: LD_INT 0
26180: PPUSH
26181: LD_VAR 0 8
26185: PPUSH
26186: LD_VAR 0 4
26190: PPUSH
26191: CALL_OW 380
// un := CreateHuman ;
26195: LD_ADDR_VAR 0 14
26199: PUSH
26200: CALL_OW 44
26204: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26205: LD_VAR 0 14
26209: PPUSH
26210: LD_VAR 0 1
26214: PPUSH
26215: CALL_OW 250
26219: PPUSH
26220: LD_VAR 0 1
26224: PPUSH
26225: CALL_OW 251
26229: PPUSH
26230: LD_INT 10
26232: PPUSH
26233: LD_INT 0
26235: PPUSH
26236: CALL_OW 50
// result := result ^ un ;
26240: LD_ADDR_VAR 0 7
26244: PUSH
26245: LD_VAR 0 7
26249: PUSH
26250: LD_VAR 0 14
26254: ADD
26255: ST_TO_ADDR
// end ;
26256: GO 26134
26258: POP
26259: POP
// end ; end ;
26260: LD_VAR 0 7
26264: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26265: LD_INT 0
26267: PPUSH
26268: PPUSH
26269: PPUSH
26270: PPUSH
26271: PPUSH
26272: PPUSH
26273: PPUSH
26274: PPUSH
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
// result := false ;
26283: LD_ADDR_VAR 0 3
26287: PUSH
26288: LD_INT 0
26290: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26291: LD_VAR 0 1
26295: NOT
26296: IFTRUE 26321
26298: PUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 266
26308: PUSH
26309: LD_INT 32
26311: PUSH
26312: LD_INT 33
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: IN
26319: NOT
26320: OR
26321: IFFALSE 26325
// exit ;
26323: GO 27460
// nat := GetNation ( tower ) ;
26325: LD_ADDR_VAR 0 12
26329: PUSH
26330: LD_VAR 0 1
26334: PPUSH
26335: CALL_OW 248
26339: ST_TO_ADDR
// side := GetSide ( tower ) ;
26340: LD_ADDR_VAR 0 16
26344: PUSH
26345: LD_VAR 0 1
26349: PPUSH
26350: CALL_OW 255
26354: ST_TO_ADDR
// x := GetX ( tower ) ;
26355: LD_ADDR_VAR 0 10
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 250
26369: ST_TO_ADDR
// y := GetY ( tower ) ;
26370: LD_ADDR_VAR 0 11
26374: PUSH
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL_OW 251
26384: ST_TO_ADDR
// if not x or not y then
26385: LD_VAR 0 10
26389: NOT
26390: IFTRUE 26399
26392: PUSH
26393: LD_VAR 0 11
26397: NOT
26398: OR
26399: IFFALSE 26403
// exit ;
26401: GO 27460
// weapon := 0 ;
26403: LD_ADDR_VAR 0 18
26407: PUSH
26408: LD_INT 0
26410: ST_TO_ADDR
// fac_list := [ ] ;
26411: LD_ADDR_VAR 0 17
26415: PUSH
26416: EMPTY
26417: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26418: LD_ADDR_VAR 0 6
26422: PUSH
26423: LD_VAR 0 1
26427: PPUSH
26428: CALL_OW 274
26432: PPUSH
26433: LD_VAR 0 2
26437: PPUSH
26438: LD_INT 0
26440: PPUSH
26441: CALL 23995 0 3
26445: PPUSH
26446: LD_INT 30
26448: PUSH
26449: LD_INT 3
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 72
26460: ST_TO_ADDR
// if not factories then
26461: LD_VAR 0 6
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 27460
// for i in factories do
26470: LD_ADDR_VAR 0 8
26474: PUSH
26475: LD_VAR 0 6
26479: PUSH
26480: FOR_IN
26481: IFFALSE 26506
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26483: LD_ADDR_VAR 0 17
26487: PUSH
26488: LD_VAR 0 17
26492: PUSH
26493: LD_VAR 0 8
26497: PPUSH
26498: CALL_OW 478
26502: UNION
26503: ST_TO_ADDR
26504: GO 26480
26506: POP
26507: POP
// if not fac_list then
26508: LD_VAR 0 17
26512: NOT
26513: IFFALSE 26517
// exit ;
26515: GO 27460
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26517: LD_ADDR_VAR 0 5
26521: PUSH
26522: LD_INT 4
26524: PUSH
26525: LD_INT 5
26527: PUSH
26528: LD_INT 9
26530: PUSH
26531: LD_INT 10
26533: PUSH
26534: LD_INT 6
26536: PUSH
26537: LD_INT 7
26539: PUSH
26540: LD_INT 11
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 27
26554: PUSH
26555: LD_INT 28
26557: PUSH
26558: LD_INT 26
26560: PUSH
26561: LD_INT 30
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 43
26572: PUSH
26573: LD_INT 44
26575: PUSH
26576: LD_INT 46
26578: PUSH
26579: LD_INT 45
26581: PUSH
26582: LD_INT 47
26584: PUSH
26585: LD_INT 49
26587: PUSH
26588: EMPTY
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: LIST
26600: PUSH
26601: LD_VAR 0 12
26605: ARRAY
26606: ST_TO_ADDR
// list := list isect fac_list ;
26607: LD_ADDR_VAR 0 5
26611: PUSH
26612: LD_VAR 0 5
26616: PUSH
26617: LD_VAR 0 17
26621: ISECT
26622: ST_TO_ADDR
// if not list then
26623: LD_VAR 0 5
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 27460
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26632: LD_VAR 0 12
26636: PUSH
26637: LD_INT 3
26639: EQUAL
26640: IFFALSE 26652
26642: PUSH
26643: LD_INT 49
26645: PUSH
26646: LD_VAR 0 5
26650: IN
26651: AND
26652: IFFALSE 26672
26654: PUSH
26655: LD_INT 31
26657: PPUSH
26658: LD_VAR 0 16
26662: PPUSH
26663: CALL_OW 321
26667: PUSH
26668: LD_INT 2
26670: EQUAL
26671: AND
26672: IFFALSE 26732
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26674: LD_INT 22
26676: PUSH
26677: LD_VAR 0 16
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: LD_INT 35
26688: PUSH
26689: LD_INT 49
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 91
26698: PUSH
26699: LD_VAR 0 1
26703: PUSH
26704: LD_INT 10
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 69
26721: NOT
26722: IFFALSE 26732
// weapon := ru_time_lapser ;
26724: LD_ADDR_VAR 0 18
26728: PUSH
26729: LD_INT 49
26731: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26732: LD_VAR 0 12
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: LD_INT 2
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: IN
26747: IFFALSE 26771
26749: PUSH
26750: LD_INT 11
26752: PUSH
26753: LD_VAR 0 5
26757: IN
26758: IFTRUE 26770
26760: PUSH
26761: LD_INT 30
26763: PUSH
26764: LD_VAR 0 5
26768: IN
26769: OR
26770: AND
26771: IFFALSE 26791
26773: PUSH
26774: LD_INT 6
26776: PPUSH
26777: LD_VAR 0 16
26781: PPUSH
26782: CALL_OW 321
26786: PUSH
26787: LD_INT 2
26789: EQUAL
26790: AND
26791: IFFALSE 26958
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26793: LD_INT 22
26795: PUSH
26796: LD_VAR 0 16
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: LD_INT 35
26810: PUSH
26811: LD_INT 11
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: PUSH
26818: LD_INT 35
26820: PUSH
26821: LD_INT 30
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 91
26835: PUSH
26836: LD_VAR 0 1
26840: PUSH
26841: LD_INT 18
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: LIST
26848: PUSH
26849: EMPTY
26850: LIST
26851: LIST
26852: LIST
26853: PPUSH
26854: CALL_OW 69
26858: NOT
26859: IFFALSE 26935
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_VAR 0 16
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 2
26876: PUSH
26877: LD_INT 30
26879: PUSH
26880: LD_INT 32
26882: PUSH
26883: EMPTY
26884: LIST
26885: LIST
26886: PUSH
26887: LD_INT 30
26889: PUSH
26890: LD_INT 33
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 91
26904: PUSH
26905: LD_VAR 0 1
26909: PUSH
26910: LD_INT 12
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: PPUSH
26926: CALL_OW 69
26930: PUSH
26931: LD_INT 2
26933: GREATER
26934: AND
26935: IFFALSE 26958
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26937: LD_ADDR_VAR 0 18
26941: PUSH
26942: LD_INT 11
26944: PUSH
26945: LD_INT 30
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_VAR 0 12
26956: ARRAY
26957: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26958: LD_VAR 0 18
26962: NOT
26963: IFFALSE 26983
26965: PUSH
26966: LD_INT 40
26968: PPUSH
26969: LD_VAR 0 16
26973: PPUSH
26974: CALL_OW 321
26978: PUSH
26979: LD_INT 2
26981: EQUAL
26982: AND
26983: IFFALSE 27019
26985: PUSH
26986: LD_INT 7
26988: PUSH
26989: LD_VAR 0 5
26993: IN
26994: IFTRUE 27006
26996: PUSH
26997: LD_INT 28
26999: PUSH
27000: LD_VAR 0 5
27004: IN
27005: OR
27006: IFTRUE 27018
27008: PUSH
27009: LD_INT 45
27011: PUSH
27012: LD_VAR 0 5
27016: IN
27017: OR
27018: AND
27019: IFFALSE 27273
// begin hex := GetHexInfo ( x , y ) ;
27021: LD_ADDR_VAR 0 4
27025: PUSH
27026: LD_VAR 0 10
27030: PPUSH
27031: LD_VAR 0 11
27035: PPUSH
27036: CALL_OW 546
27040: ST_TO_ADDR
// if hex [ 1 ] then
27041: LD_VAR 0 4
27045: PUSH
27046: LD_INT 1
27048: ARRAY
27049: IFFALSE 27053
// exit ;
27051: GO 27460
// height := hex [ 2 ] ;
27053: LD_ADDR_VAR 0 15
27057: PUSH
27058: LD_VAR 0 4
27062: PUSH
27063: LD_INT 2
27065: ARRAY
27066: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27067: LD_ADDR_VAR 0 14
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 2
27077: PUSH
27078: LD_INT 3
27080: PUSH
27081: LD_INT 5
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: ST_TO_ADDR
// for i in tmp do
27090: LD_ADDR_VAR 0 8
27094: PUSH
27095: LD_VAR 0 14
27099: PUSH
27100: FOR_IN
27101: IFFALSE 27271
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27103: LD_ADDR_VAR 0 9
27107: PUSH
27108: LD_VAR 0 10
27112: PPUSH
27113: LD_VAR 0 8
27117: PPUSH
27118: LD_INT 5
27120: PPUSH
27121: CALL_OW 272
27125: PUSH
27126: LD_VAR 0 11
27130: PPUSH
27131: LD_VAR 0 8
27135: PPUSH
27136: LD_INT 5
27138: PPUSH
27139: CALL_OW 273
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27148: LD_VAR 0 9
27152: PUSH
27153: LD_INT 1
27155: ARRAY
27156: PPUSH
27157: LD_VAR 0 9
27161: PUSH
27162: LD_INT 2
27164: ARRAY
27165: PPUSH
27166: CALL_OW 488
27170: IFFALSE 27269
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27172: LD_ADDR_VAR 0 4
27176: PUSH
27177: LD_VAR 0 9
27181: PUSH
27182: LD_INT 1
27184: ARRAY
27185: PPUSH
27186: LD_VAR 0 9
27190: PUSH
27191: LD_INT 2
27193: ARRAY
27194: PPUSH
27195: CALL_OW 546
27199: ST_TO_ADDR
// if hex [ 1 ] then
27200: LD_VAR 0 4
27204: PUSH
27205: LD_INT 1
27207: ARRAY
27208: IFFALSE 27212
// continue ;
27210: GO 27100
// h := hex [ 2 ] ;
27212: LD_ADDR_VAR 0 13
27216: PUSH
27217: LD_VAR 0 4
27221: PUSH
27222: LD_INT 2
27224: ARRAY
27225: ST_TO_ADDR
// if h + 7 < height then
27226: LD_VAR 0 13
27230: PUSH
27231: LD_INT 7
27233: PLUS
27234: PUSH
27235: LD_VAR 0 15
27239: LESS
27240: IFFALSE 27269
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27242: LD_ADDR_VAR 0 18
27246: PUSH
27247: LD_INT 7
27249: PUSH
27250: LD_INT 28
27252: PUSH
27253: LD_INT 45
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: PUSH
27261: LD_VAR 0 12
27265: ARRAY
27266: ST_TO_ADDR
// break ;
27267: GO 27271
// end ; end ; end ;
27269: GO 27100
27271: POP
27272: POP
// end ; if not weapon then
27273: LD_VAR 0 18
27277: NOT
27278: IFFALSE 27338
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27280: LD_ADDR_VAR 0 5
27284: PUSH
27285: LD_VAR 0 5
27289: PUSH
27290: LD_INT 11
27292: PUSH
27293: LD_INT 30
27295: PUSH
27296: LD_INT 49
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: LIST
27303: DIFF
27304: ST_TO_ADDR
// if not list then
27305: LD_VAR 0 5
27309: NOT
27310: IFFALSE 27314
// exit ;
27312: GO 27460
// weapon := list [ rand ( 1 , list ) ] ;
27314: LD_ADDR_VAR 0 18
27318: PUSH
27319: LD_VAR 0 5
27323: PUSH
27324: LD_INT 1
27326: PPUSH
27327: LD_VAR 0 5
27331: PPUSH
27332: CALL_OW 12
27336: ARRAY
27337: ST_TO_ADDR
// end ; if weapon then
27338: LD_VAR 0 18
27342: IFFALSE 27460
// begin tmp := CostOfWeapon ( weapon ) ;
27344: LD_ADDR_VAR 0 14
27348: PUSH
27349: LD_VAR 0 18
27353: PPUSH
27354: CALL_OW 451
27358: ST_TO_ADDR
// j := GetBase ( tower ) ;
27359: LD_ADDR_VAR 0 9
27363: PUSH
27364: LD_VAR 0 1
27368: PPUSH
27369: CALL_OW 274
27373: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27374: LD_VAR 0 9
27378: PPUSH
27379: LD_INT 1
27381: PPUSH
27382: CALL_OW 275
27386: PUSH
27387: LD_VAR 0 14
27391: PUSH
27392: LD_INT 1
27394: ARRAY
27395: GREATEREQUAL
27396: IFFALSE 27422
27398: PUSH
27399: LD_VAR 0 9
27403: PPUSH
27404: LD_INT 2
27406: PPUSH
27407: CALL_OW 275
27411: PUSH
27412: LD_VAR 0 14
27416: PUSH
27417: LD_INT 2
27419: ARRAY
27420: GREATEREQUAL
27421: AND
27422: IFFALSE 27448
27424: PUSH
27425: LD_VAR 0 9
27429: PPUSH
27430: LD_INT 3
27432: PPUSH
27433: CALL_OW 275
27437: PUSH
27438: LD_VAR 0 14
27442: PUSH
27443: LD_INT 3
27445: ARRAY
27446: GREATEREQUAL
27447: AND
27448: IFFALSE 27460
// result := weapon ;
27450: LD_ADDR_VAR 0 3
27454: PUSH
27455: LD_VAR 0 18
27459: ST_TO_ADDR
// end ; end ;
27460: LD_VAR 0 3
27464: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27465: LD_INT 0
27467: PPUSH
27468: PPUSH
// result := true ;
27469: LD_ADDR_VAR 0 3
27473: PUSH
27474: LD_INT 1
27476: ST_TO_ADDR
// if array1 = array2 then
27477: LD_VAR 0 1
27481: PUSH
27482: LD_VAR 0 2
27486: EQUAL
27487: IFFALSE 27547
// begin for i = 1 to array1 do
27489: LD_ADDR_VAR 0 4
27493: PUSH
27494: DOUBLE
27495: LD_INT 1
27497: DEC
27498: ST_TO_ADDR
27499: LD_VAR 0 1
27503: PUSH
27504: FOR_TO
27505: IFFALSE 27543
// if array1 [ i ] <> array2 [ i ] then
27507: LD_VAR 0 1
27511: PUSH
27512: LD_VAR 0 4
27516: ARRAY
27517: PUSH
27518: LD_VAR 0 2
27522: PUSH
27523: LD_VAR 0 4
27527: ARRAY
27528: NONEQUAL
27529: IFFALSE 27541
// begin result := false ;
27531: LD_ADDR_VAR 0 3
27535: PUSH
27536: LD_INT 0
27538: ST_TO_ADDR
// break ;
27539: GO 27543
// end ;
27541: GO 27504
27543: POP
27544: POP
// end else
27545: GO 27555
// result := false ;
27547: LD_ADDR_VAR 0 3
27551: PUSH
27552: LD_INT 0
27554: ST_TO_ADDR
// end ;
27555: LD_VAR 0 3
27559: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27560: LD_INT 0
27562: PPUSH
27563: PPUSH
// if not array1 or not array2 then
27564: LD_VAR 0 1
27568: NOT
27569: IFTRUE 27578
27571: PUSH
27572: LD_VAR 0 2
27576: NOT
27577: OR
27578: IFFALSE 27582
// exit ;
27580: GO 27646
// result := true ;
27582: LD_ADDR_VAR 0 3
27586: PUSH
27587: LD_INT 1
27589: ST_TO_ADDR
// for i = 1 to array1 do
27590: LD_ADDR_VAR 0 4
27594: PUSH
27595: DOUBLE
27596: LD_INT 1
27598: DEC
27599: ST_TO_ADDR
27600: LD_VAR 0 1
27604: PUSH
27605: FOR_TO
27606: IFFALSE 27644
// if array1 [ i ] <> array2 [ i ] then
27608: LD_VAR 0 1
27612: PUSH
27613: LD_VAR 0 4
27617: ARRAY
27618: PUSH
27619: LD_VAR 0 2
27623: PUSH
27624: LD_VAR 0 4
27628: ARRAY
27629: NONEQUAL
27630: IFFALSE 27642
// begin result := false ;
27632: LD_ADDR_VAR 0 3
27636: PUSH
27637: LD_INT 0
27639: ST_TO_ADDR
// break ;
27640: GO 27644
// end ;
27642: GO 27605
27644: POP
27645: POP
// end ;
27646: LD_VAR 0 3
27650: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27651: LD_INT 0
27653: PPUSH
27654: PPUSH
27655: PPUSH
// pom := GetBase ( fac ) ;
27656: LD_ADDR_VAR 0 5
27660: PUSH
27661: LD_VAR 0 1
27665: PPUSH
27666: CALL_OW 274
27670: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27671: LD_ADDR_VAR 0 4
27675: PUSH
27676: LD_VAR 0 2
27680: PUSH
27681: LD_INT 1
27683: ARRAY
27684: PPUSH
27685: LD_VAR 0 2
27689: PUSH
27690: LD_INT 2
27692: ARRAY
27693: PPUSH
27694: LD_VAR 0 2
27698: PUSH
27699: LD_INT 3
27701: ARRAY
27702: PPUSH
27703: LD_VAR 0 2
27707: PUSH
27708: LD_INT 4
27710: ARRAY
27711: PPUSH
27712: CALL_OW 449
27716: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27717: LD_ADDR_VAR 0 3
27721: PUSH
27722: LD_VAR 0 5
27726: PPUSH
27727: LD_INT 1
27729: PPUSH
27730: CALL_OW 275
27734: PUSH
27735: LD_VAR 0 4
27739: PUSH
27740: LD_INT 1
27742: ARRAY
27743: GREATEREQUAL
27744: IFFALSE 27770
27746: PUSH
27747: LD_VAR 0 5
27751: PPUSH
27752: LD_INT 2
27754: PPUSH
27755: CALL_OW 275
27759: PUSH
27760: LD_VAR 0 4
27764: PUSH
27765: LD_INT 2
27767: ARRAY
27768: GREATEREQUAL
27769: AND
27770: IFFALSE 27796
27772: PUSH
27773: LD_VAR 0 5
27777: PPUSH
27778: LD_INT 3
27780: PPUSH
27781: CALL_OW 275
27785: PUSH
27786: LD_VAR 0 4
27790: PUSH
27791: LD_INT 3
27793: ARRAY
27794: GREATEREQUAL
27795: AND
27796: ST_TO_ADDR
// end ;
27797: LD_VAR 0 3
27801: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27802: LD_INT 0
27804: PPUSH
27805: PPUSH
27806: PPUSH
27807: PPUSH
// pom := GetBase ( building ) ;
27808: LD_ADDR_VAR 0 3
27812: PUSH
27813: LD_VAR 0 1
27817: PPUSH
27818: CALL_OW 274
27822: ST_TO_ADDR
// if not pom then
27823: LD_VAR 0 3
27827: NOT
27828: IFFALSE 27832
// exit ;
27830: GO 28006
// btype := GetBType ( building ) ;
27832: LD_ADDR_VAR 0 5
27836: PUSH
27837: LD_VAR 0 1
27841: PPUSH
27842: CALL_OW 266
27846: ST_TO_ADDR
// if btype = b_armoury then
27847: LD_VAR 0 5
27851: PUSH
27852: LD_INT 4
27854: EQUAL
27855: IFFALSE 27865
// btype := b_barracks ;
27857: LD_ADDR_VAR 0 5
27861: PUSH
27862: LD_INT 5
27864: ST_TO_ADDR
// if btype = b_depot then
27865: LD_VAR 0 5
27869: PUSH
27870: LD_INT 0
27872: EQUAL
27873: IFFALSE 27883
// btype := b_warehouse ;
27875: LD_ADDR_VAR 0 5
27879: PUSH
27880: LD_INT 1
27882: ST_TO_ADDR
// if btype = b_workshop then
27883: LD_VAR 0 5
27887: PUSH
27888: LD_INT 2
27890: EQUAL
27891: IFFALSE 27901
// btype := b_factory ;
27893: LD_ADDR_VAR 0 5
27897: PUSH
27898: LD_INT 3
27900: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27901: LD_ADDR_VAR 0 4
27905: PUSH
27906: LD_VAR 0 5
27910: PPUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 248
27920: PPUSH
27921: CALL_OW 450
27925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27926: LD_ADDR_VAR 0 2
27930: PUSH
27931: LD_VAR 0 3
27935: PPUSH
27936: LD_INT 1
27938: PPUSH
27939: CALL_OW 275
27943: PUSH
27944: LD_VAR 0 4
27948: PUSH
27949: LD_INT 1
27951: ARRAY
27952: GREATEREQUAL
27953: IFFALSE 27979
27955: PUSH
27956: LD_VAR 0 3
27960: PPUSH
27961: LD_INT 2
27963: PPUSH
27964: CALL_OW 275
27968: PUSH
27969: LD_VAR 0 4
27973: PUSH
27974: LD_INT 2
27976: ARRAY
27977: GREATEREQUAL
27978: AND
27979: IFFALSE 28005
27981: PUSH
27982: LD_VAR 0 3
27986: PPUSH
27987: LD_INT 3
27989: PPUSH
27990: CALL_OW 275
27994: PUSH
27995: LD_VAR 0 4
27999: PUSH
28000: LD_INT 3
28002: ARRAY
28003: GREATEREQUAL
28004: AND
28005: ST_TO_ADDR
// end ;
28006: LD_VAR 0 2
28010: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28011: LD_INT 0
28013: PPUSH
28014: PPUSH
28015: PPUSH
// pom := GetBase ( building ) ;
28016: LD_ADDR_VAR 0 4
28020: PUSH
28021: LD_VAR 0 1
28025: PPUSH
28026: CALL_OW 274
28030: ST_TO_ADDR
// if not pom then
28031: LD_VAR 0 4
28035: NOT
28036: IFFALSE 28040
// exit ;
28038: GO 28145
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28040: LD_ADDR_VAR 0 5
28044: PUSH
28045: LD_VAR 0 2
28049: PPUSH
28050: LD_VAR 0 1
28054: PPUSH
28055: CALL_OW 248
28059: PPUSH
28060: CALL_OW 450
28064: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_VAR 0 4
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: CALL_OW 275
28082: PUSH
28083: LD_VAR 0 5
28087: PUSH
28088: LD_INT 1
28090: ARRAY
28091: GREATEREQUAL
28092: IFFALSE 28118
28094: PUSH
28095: LD_VAR 0 4
28099: PPUSH
28100: LD_INT 2
28102: PPUSH
28103: CALL_OW 275
28107: PUSH
28108: LD_VAR 0 5
28112: PUSH
28113: LD_INT 2
28115: ARRAY
28116: GREATEREQUAL
28117: AND
28118: IFFALSE 28144
28120: PUSH
28121: LD_VAR 0 4
28125: PPUSH
28126: LD_INT 3
28128: PPUSH
28129: CALL_OW 275
28133: PUSH
28134: LD_VAR 0 5
28138: PUSH
28139: LD_INT 3
28141: ARRAY
28142: GREATEREQUAL
28143: AND
28144: ST_TO_ADDR
// end ;
28145: LD_VAR 0 3
28149: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28150: LD_INT 0
28152: PPUSH
28153: PPUSH
28154: PPUSH
28155: PPUSH
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
// result := false ;
28163: LD_ADDR_VAR 0 8
28167: PUSH
28168: LD_INT 0
28170: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28171: LD_VAR 0 5
28175: NOT
28176: IFTRUE 28185
28178: PUSH
28179: LD_VAR 0 1
28183: NOT
28184: OR
28185: IFTRUE 28194
28187: PUSH
28188: LD_VAR 0 2
28192: NOT
28193: OR
28194: IFTRUE 28203
28196: PUSH
28197: LD_VAR 0 3
28201: NOT
28202: OR
28203: IFFALSE 28207
// exit ;
28205: GO 29033
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28207: LD_ADDR_VAR 0 14
28211: PUSH
28212: LD_VAR 0 1
28216: PPUSH
28217: LD_VAR 0 2
28221: PPUSH
28222: LD_VAR 0 3
28226: PPUSH
28227: LD_VAR 0 4
28231: PPUSH
28232: LD_VAR 0 5
28236: PUSH
28237: LD_INT 1
28239: ARRAY
28240: PPUSH
28241: CALL_OW 248
28245: PPUSH
28246: LD_INT 0
28248: PPUSH
28249: CALL 30314 0 6
28253: ST_TO_ADDR
// if not hexes then
28254: LD_VAR 0 14
28258: NOT
28259: IFFALSE 28263
// exit ;
28261: GO 29033
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28263: LD_ADDR_VAR 0 17
28267: PUSH
28268: LD_VAR 0 5
28272: PPUSH
28273: LD_INT 22
28275: PUSH
28276: LD_VAR 0 13
28280: PPUSH
28281: CALL_OW 255
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 2
28292: PUSH
28293: LD_INT 30
28295: PUSH
28296: LD_INT 0
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 30
28305: PUSH
28306: LD_INT 1
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PPUSH
28322: CALL_OW 72
28326: ST_TO_ADDR
// for i = 1 to hexes do
28327: LD_ADDR_VAR 0 9
28331: PUSH
28332: DOUBLE
28333: LD_INT 1
28335: DEC
28336: ST_TO_ADDR
28337: LD_VAR 0 14
28341: PUSH
28342: FOR_TO
28343: IFFALSE 29031
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28345: LD_ADDR_VAR 0 13
28349: PUSH
28350: LD_VAR 0 14
28354: PUSH
28355: LD_VAR 0 9
28359: ARRAY
28360: PUSH
28361: LD_INT 1
28363: ARRAY
28364: PPUSH
28365: LD_VAR 0 14
28369: PUSH
28370: LD_VAR 0 9
28374: ARRAY
28375: PUSH
28376: LD_INT 2
28378: ARRAY
28379: PPUSH
28380: CALL_OW 428
28384: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28385: LD_VAR 0 14
28389: PUSH
28390: LD_VAR 0 9
28394: ARRAY
28395: PUSH
28396: LD_INT 1
28398: ARRAY
28399: PPUSH
28400: LD_VAR 0 14
28404: PUSH
28405: LD_VAR 0 9
28409: ARRAY
28410: PUSH
28411: LD_INT 2
28413: ARRAY
28414: PPUSH
28415: CALL_OW 351
28419: IFTRUE 28458
28421: PUSH
28422: LD_VAR 0 14
28426: PUSH
28427: LD_VAR 0 9
28431: ARRAY
28432: PUSH
28433: LD_INT 1
28435: ARRAY
28436: PPUSH
28437: LD_VAR 0 14
28441: PUSH
28442: LD_VAR 0 9
28446: ARRAY
28447: PUSH
28448: LD_INT 2
28450: ARRAY
28451: PPUSH
28452: CALL_OW 488
28456: NOT
28457: OR
28458: IFTRUE 28475
28460: PUSH
28461: LD_VAR 0 13
28465: PPUSH
28466: CALL_OW 247
28470: PUSH
28471: LD_INT 3
28473: EQUAL
28474: OR
28475: IFFALSE 28481
// exit ;
28477: POP
28478: POP
28479: GO 29033
// if not tmp then
28481: LD_VAR 0 13
28485: NOT
28486: IFFALSE 28490
// continue ;
28488: GO 28342
// result := true ;
28490: LD_ADDR_VAR 0 8
28494: PUSH
28495: LD_INT 1
28497: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28498: LD_VAR 0 6
28502: IFFALSE 28519
28504: PUSH
28505: LD_VAR 0 13
28509: PPUSH
28510: CALL_OW 247
28514: PUSH
28515: LD_INT 2
28517: EQUAL
28518: AND
28519: IFFALSE 28536
28521: PUSH
28522: LD_VAR 0 13
28526: PPUSH
28527: CALL_OW 263
28531: PUSH
28532: LD_INT 1
28534: EQUAL
28535: AND
28536: IFFALSE 28700
// begin if IsDrivenBy ( tmp ) then
28538: LD_VAR 0 13
28542: PPUSH
28543: CALL_OW 311
28547: IFFALSE 28551
// continue ;
28549: GO 28342
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28551: LD_VAR 0 6
28555: PPUSH
28556: LD_INT 3
28558: PUSH
28559: LD_INT 60
28561: PUSH
28562: EMPTY
28563: LIST
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: LD_INT 3
28571: PUSH
28572: LD_INT 55
28574: PUSH
28575: EMPTY
28576: LIST
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PPUSH
28586: CALL_OW 72
28590: IFFALSE 28698
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28592: LD_ADDR_VAR 0 18
28596: PUSH
28597: LD_VAR 0 6
28601: PPUSH
28602: LD_INT 3
28604: PUSH
28605: LD_INT 60
28607: PUSH
28608: EMPTY
28609: LIST
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 3
28617: PUSH
28618: LD_INT 55
28620: PUSH
28621: EMPTY
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 72
28636: PUSH
28637: LD_INT 1
28639: ARRAY
28640: ST_TO_ADDR
// if IsInUnit ( driver ) then
28641: LD_VAR 0 18
28645: PPUSH
28646: CALL_OW 310
28650: IFFALSE 28661
// ComExit ( driver ) ;
28652: LD_VAR 0 18
28656: PPUSH
28657: CALL 54304 0 1
// AddComEnterUnit ( driver , tmp ) ;
28661: LD_VAR 0 18
28665: PPUSH
28666: LD_VAR 0 13
28670: PPUSH
28671: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28675: LD_VAR 0 18
28679: PPUSH
28680: LD_VAR 0 7
28684: PPUSH
28685: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28689: LD_VAR 0 18
28693: PPUSH
28694: CALL_OW 181
// end ; continue ;
28698: GO 28342
// end ; if not cleaners or not tmp in cleaners then
28700: LD_VAR 0 6
28704: NOT
28705: IFTRUE 28720
28707: PUSH
28708: LD_VAR 0 13
28712: PUSH
28713: LD_VAR 0 6
28717: IN
28718: NOT
28719: OR
28720: IFFALSE 29029
// begin if dep then
28722: LD_VAR 0 17
28726: IFFALSE 28862
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28728: LD_ADDR_VAR 0 16
28732: PUSH
28733: LD_VAR 0 17
28737: PUSH
28738: LD_INT 1
28740: ARRAY
28741: PPUSH
28742: CALL_OW 250
28746: PPUSH
28747: LD_VAR 0 17
28751: PUSH
28752: LD_INT 1
28754: ARRAY
28755: PPUSH
28756: CALL_OW 254
28760: PPUSH
28761: LD_INT 5
28763: PPUSH
28764: CALL_OW 272
28768: PUSH
28769: LD_VAR 0 17
28773: PUSH
28774: LD_INT 1
28776: ARRAY
28777: PPUSH
28778: CALL_OW 251
28782: PPUSH
28783: LD_VAR 0 17
28787: PUSH
28788: LD_INT 1
28790: ARRAY
28791: PPUSH
28792: CALL_OW 254
28796: PPUSH
28797: LD_INT 5
28799: PPUSH
28800: CALL_OW 273
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28809: LD_VAR 0 16
28813: PUSH
28814: LD_INT 1
28816: ARRAY
28817: PPUSH
28818: LD_VAR 0 16
28822: PUSH
28823: LD_INT 2
28825: ARRAY
28826: PPUSH
28827: CALL_OW 488
28831: IFFALSE 28862
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28833: LD_VAR 0 13
28837: PPUSH
28838: LD_VAR 0 16
28842: PUSH
28843: LD_INT 1
28845: ARRAY
28846: PPUSH
28847: LD_VAR 0 16
28851: PUSH
28852: LD_INT 2
28854: ARRAY
28855: PPUSH
28856: CALL_OW 111
// continue ;
28860: GO 28342
// end ; end ; r := GetDir ( tmp ) ;
28862: LD_ADDR_VAR 0 15
28866: PUSH
28867: LD_VAR 0 13
28871: PPUSH
28872: CALL_OW 254
28876: ST_TO_ADDR
// if r = 5 then
28877: LD_VAR 0 15
28881: PUSH
28882: LD_INT 5
28884: EQUAL
28885: IFFALSE 28895
// r := 0 ;
28887: LD_ADDR_VAR 0 15
28891: PUSH
28892: LD_INT 0
28894: ST_TO_ADDR
// for j = r to 5 do
28895: LD_ADDR_VAR 0 10
28899: PUSH
28900: DOUBLE
28901: LD_VAR 0 15
28905: DEC
28906: ST_TO_ADDR
28907: LD_INT 5
28909: PUSH
28910: FOR_TO
28911: IFFALSE 29027
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28913: LD_ADDR_VAR 0 11
28917: PUSH
28918: LD_VAR 0 13
28922: PPUSH
28923: CALL_OW 250
28927: PPUSH
28928: LD_VAR 0 10
28932: PPUSH
28933: LD_INT 2
28935: PPUSH
28936: CALL_OW 272
28940: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28941: LD_ADDR_VAR 0 12
28945: PUSH
28946: LD_VAR 0 13
28950: PPUSH
28951: CALL_OW 251
28955: PPUSH
28956: LD_VAR 0 10
28960: PPUSH
28961: LD_INT 2
28963: PPUSH
28964: CALL_OW 273
28968: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28969: LD_VAR 0 11
28973: PPUSH
28974: LD_VAR 0 12
28978: PPUSH
28979: CALL_OW 488
28983: IFFALSE 29002
28985: PUSH
28986: LD_VAR 0 11
28990: PPUSH
28991: LD_VAR 0 12
28995: PPUSH
28996: CALL_OW 428
29000: NOT
29001: AND
29002: IFFALSE 29025
// begin ComMoveXY ( tmp , _x , _y ) ;
29004: LD_VAR 0 13
29008: PPUSH
29009: LD_VAR 0 11
29013: PPUSH
29014: LD_VAR 0 12
29018: PPUSH
29019: CALL_OW 111
// break ;
29023: GO 29027
// end ; end ;
29025: GO 28910
29027: POP
29028: POP
// end ; end ;
29029: GO 28342
29031: POP
29032: POP
// end ;
29033: LD_VAR 0 8
29037: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29038: LD_INT 0
29040: PPUSH
// result := true ;
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 1
29048: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29049: LD_VAR 0 2
29053: PUSH
29054: LD_INT 24
29056: DOUBLE
29057: EQUAL
29058: IFTRUE 29068
29060: LD_INT 33
29062: DOUBLE
29063: EQUAL
29064: IFTRUE 29068
29066: GO 29093
29068: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_INT 32
29076: PPUSH
29077: LD_VAR 0 1
29081: PPUSH
29082: CALL_OW 321
29086: PUSH
29087: LD_INT 2
29089: EQUAL
29090: ST_TO_ADDR
29091: GO 29409
29093: LD_INT 20
29095: DOUBLE
29096: EQUAL
29097: IFTRUE 29101
29099: GO 29126
29101: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29102: LD_ADDR_VAR 0 3
29106: PUSH
29107: LD_INT 6
29109: PPUSH
29110: LD_VAR 0 1
29114: PPUSH
29115: CALL_OW 321
29119: PUSH
29120: LD_INT 2
29122: EQUAL
29123: ST_TO_ADDR
29124: GO 29409
29126: LD_INT 22
29128: DOUBLE
29129: EQUAL
29130: IFTRUE 29140
29132: LD_INT 36
29134: DOUBLE
29135: EQUAL
29136: IFTRUE 29140
29138: GO 29165
29140: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29141: LD_ADDR_VAR 0 3
29145: PUSH
29146: LD_INT 15
29148: PPUSH
29149: LD_VAR 0 1
29153: PPUSH
29154: CALL_OW 321
29158: PUSH
29159: LD_INT 2
29161: EQUAL
29162: ST_TO_ADDR
29163: GO 29409
29165: LD_INT 30
29167: DOUBLE
29168: EQUAL
29169: IFTRUE 29173
29171: GO 29198
29173: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29174: LD_ADDR_VAR 0 3
29178: PUSH
29179: LD_INT 20
29181: PPUSH
29182: LD_VAR 0 1
29186: PPUSH
29187: CALL_OW 321
29191: PUSH
29192: LD_INT 2
29194: EQUAL
29195: ST_TO_ADDR
29196: GO 29409
29198: LD_INT 28
29200: DOUBLE
29201: EQUAL
29202: IFTRUE 29212
29204: LD_INT 21
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29212
29210: GO 29237
29212: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_INT 21
29220: PPUSH
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 321
29230: PUSH
29231: LD_INT 2
29233: EQUAL
29234: ST_TO_ADDR
29235: GO 29409
29237: LD_INT 16
29239: DOUBLE
29240: EQUAL
29241: IFTRUE 29245
29243: GO 29270
29245: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_INT 84
29253: PPUSH
29254: LD_VAR 0 1
29258: PPUSH
29259: CALL_OW 321
29263: PUSH
29264: LD_INT 2
29266: EQUAL
29267: ST_TO_ADDR
29268: GO 29409
29270: LD_INT 19
29272: DOUBLE
29273: EQUAL
29274: IFTRUE 29284
29276: LD_INT 23
29278: DOUBLE
29279: EQUAL
29280: IFTRUE 29284
29282: GO 29309
29284: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29285: LD_ADDR_VAR 0 3
29289: PUSH
29290: LD_INT 83
29292: PPUSH
29293: LD_VAR 0 1
29297: PPUSH
29298: CALL_OW 321
29302: PUSH
29303: LD_INT 2
29305: EQUAL
29306: ST_TO_ADDR
29307: GO 29409
29309: LD_INT 17
29311: DOUBLE
29312: EQUAL
29313: IFTRUE 29317
29315: GO 29342
29317: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29318: LD_ADDR_VAR 0 3
29322: PUSH
29323: LD_INT 39
29325: PPUSH
29326: LD_VAR 0 1
29330: PPUSH
29331: CALL_OW 321
29335: PUSH
29336: LD_INT 2
29338: EQUAL
29339: ST_TO_ADDR
29340: GO 29409
29342: LD_INT 18
29344: DOUBLE
29345: EQUAL
29346: IFTRUE 29350
29348: GO 29375
29350: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_INT 40
29358: PPUSH
29359: LD_VAR 0 1
29363: PPUSH
29364: CALL_OW 321
29368: PUSH
29369: LD_INT 2
29371: EQUAL
29372: ST_TO_ADDR
29373: GO 29409
29375: LD_INT 27
29377: DOUBLE
29378: EQUAL
29379: IFTRUE 29383
29381: GO 29408
29383: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: LD_INT 35
29391: PPUSH
29392: LD_VAR 0 1
29396: PPUSH
29397: CALL_OW 321
29401: PUSH
29402: LD_INT 2
29404: EQUAL
29405: ST_TO_ADDR
29406: GO 29409
29408: POP
// end ;
29409: LD_VAR 0 3
29413: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29414: LD_INT 0
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
// result := false ;
29427: LD_ADDR_VAR 0 6
29431: PUSH
29432: LD_INT 0
29434: ST_TO_ADDR
// if btype = b_depot then
29435: LD_VAR 0 2
29439: PUSH
29440: LD_INT 0
29442: EQUAL
29443: IFFALSE 29455
// begin result := true ;
29445: LD_ADDR_VAR 0 6
29449: PUSH
29450: LD_INT 1
29452: ST_TO_ADDR
// exit ;
29453: GO 30309
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29455: LD_VAR 0 1
29459: NOT
29460: IFTRUE 29485
29462: PUSH
29463: LD_VAR 0 1
29467: PPUSH
29468: CALL_OW 266
29472: PUSH
29473: LD_INT 0
29475: PUSH
29476: LD_INT 1
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: IN
29483: NOT
29484: OR
29485: IFTRUE 29494
29487: PUSH
29488: LD_VAR 0 2
29492: NOT
29493: OR
29494: IFTRUE 29530
29496: PUSH
29497: LD_VAR 0 5
29501: PUSH
29502: LD_INT 0
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: LD_INT 2
29510: PUSH
29511: LD_INT 3
29513: PUSH
29514: LD_INT 4
29516: PUSH
29517: LD_INT 5
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: IN
29528: NOT
29529: OR
29530: IFTRUE 29549
29532: PUSH
29533: LD_VAR 0 3
29537: PPUSH
29538: LD_VAR 0 4
29542: PPUSH
29543: CALL_OW 488
29547: NOT
29548: OR
29549: IFFALSE 29553
// exit ;
29551: GO 30309
// side := GetSide ( depot ) ;
29553: LD_ADDR_VAR 0 9
29557: PUSH
29558: LD_VAR 0 1
29562: PPUSH
29563: CALL_OW 255
29567: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29568: LD_VAR 0 9
29572: PPUSH
29573: LD_VAR 0 2
29577: PPUSH
29578: CALL 29038 0 2
29582: NOT
29583: IFFALSE 29587
// exit ;
29585: GO 30309
// pom := GetBase ( depot ) ;
29587: LD_ADDR_VAR 0 10
29591: PUSH
29592: LD_VAR 0 1
29596: PPUSH
29597: CALL_OW 274
29601: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29602: LD_ADDR_VAR 0 11
29606: PUSH
29607: LD_VAR 0 2
29611: PPUSH
29612: LD_VAR 0 1
29616: PPUSH
29617: CALL_OW 248
29621: PPUSH
29622: CALL_OW 450
29626: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29627: LD_VAR 0 10
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 275
29639: PUSH
29640: LD_VAR 0 11
29644: PUSH
29645: LD_INT 1
29647: ARRAY
29648: GREATEREQUAL
29649: IFFALSE 29675
29651: PUSH
29652: LD_VAR 0 10
29656: PPUSH
29657: LD_INT 2
29659: PPUSH
29660: CALL_OW 275
29664: PUSH
29665: LD_VAR 0 11
29669: PUSH
29670: LD_INT 2
29672: ARRAY
29673: GREATEREQUAL
29674: AND
29675: IFFALSE 29701
29677: PUSH
29678: LD_VAR 0 10
29682: PPUSH
29683: LD_INT 3
29685: PPUSH
29686: CALL_OW 275
29690: PUSH
29691: LD_VAR 0 11
29695: PUSH
29696: LD_INT 3
29698: ARRAY
29699: GREATEREQUAL
29700: AND
29701: NOT
29702: IFFALSE 29706
// exit ;
29704: GO 30309
// if GetBType ( depot ) = b_depot then
29706: LD_VAR 0 1
29710: PPUSH
29711: CALL_OW 266
29715: PUSH
29716: LD_INT 0
29718: EQUAL
29719: IFFALSE 29731
// dist := 28 else
29721: LD_ADDR_VAR 0 14
29725: PUSH
29726: LD_INT 28
29728: ST_TO_ADDR
29729: GO 29739
// dist := 36 ;
29731: LD_ADDR_VAR 0 14
29735: PUSH
29736: LD_INT 36
29738: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29739: LD_VAR 0 1
29743: PPUSH
29744: LD_VAR 0 3
29748: PPUSH
29749: LD_VAR 0 4
29753: PPUSH
29754: CALL_OW 297
29758: PUSH
29759: LD_VAR 0 14
29763: GREATER
29764: IFFALSE 29768
// exit ;
29766: GO 30309
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29768: LD_ADDR_VAR 0 12
29772: PUSH
29773: LD_VAR 0 2
29777: PPUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: LD_VAR 0 4
29787: PPUSH
29788: LD_VAR 0 5
29792: PPUSH
29793: LD_VAR 0 1
29797: PPUSH
29798: CALL_OW 248
29802: PPUSH
29803: LD_INT 0
29805: PPUSH
29806: CALL 30314 0 6
29810: ST_TO_ADDR
// if not hexes then
29811: LD_VAR 0 12
29815: NOT
29816: IFFALSE 29820
// exit ;
29818: GO 30309
// hex := GetHexInfo ( x , y ) ;
29820: LD_ADDR_VAR 0 15
29824: PUSH
29825: LD_VAR 0 3
29829: PPUSH
29830: LD_VAR 0 4
29834: PPUSH
29835: CALL_OW 546
29839: ST_TO_ADDR
// if hex [ 1 ] then
29840: LD_VAR 0 15
29844: PUSH
29845: LD_INT 1
29847: ARRAY
29848: IFFALSE 29852
// exit ;
29850: GO 30309
// height := hex [ 2 ] ;
29852: LD_ADDR_VAR 0 13
29856: PUSH
29857: LD_VAR 0 15
29861: PUSH
29862: LD_INT 2
29864: ARRAY
29865: ST_TO_ADDR
// for i = 1 to hexes do
29866: LD_ADDR_VAR 0 7
29870: PUSH
29871: DOUBLE
29872: LD_INT 1
29874: DEC
29875: ST_TO_ADDR
29876: LD_VAR 0 12
29880: PUSH
29881: FOR_TO
29882: IFFALSE 30226
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29884: LD_VAR 0 12
29888: PUSH
29889: LD_VAR 0 7
29893: ARRAY
29894: PUSH
29895: LD_INT 1
29897: ARRAY
29898: PPUSH
29899: LD_VAR 0 12
29903: PUSH
29904: LD_VAR 0 7
29908: ARRAY
29909: PUSH
29910: LD_INT 2
29912: ARRAY
29913: PPUSH
29914: CALL_OW 488
29918: NOT
29919: IFTRUE 29961
29921: PUSH
29922: LD_VAR 0 12
29926: PUSH
29927: LD_VAR 0 7
29931: ARRAY
29932: PUSH
29933: LD_INT 1
29935: ARRAY
29936: PPUSH
29937: LD_VAR 0 12
29941: PUSH
29942: LD_VAR 0 7
29946: ARRAY
29947: PUSH
29948: LD_INT 2
29950: ARRAY
29951: PPUSH
29952: CALL_OW 428
29956: PUSH
29957: LD_INT 0
29959: GREATER
29960: OR
29961: IFTRUE 29999
29963: PUSH
29964: LD_VAR 0 12
29968: PUSH
29969: LD_VAR 0 7
29973: ARRAY
29974: PUSH
29975: LD_INT 1
29977: ARRAY
29978: PPUSH
29979: LD_VAR 0 12
29983: PUSH
29984: LD_VAR 0 7
29988: ARRAY
29989: PUSH
29990: LD_INT 2
29992: ARRAY
29993: PPUSH
29994: CALL_OW 351
29998: OR
29999: IFFALSE 30005
// exit ;
30001: POP
30002: POP
30003: GO 30309
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30005: LD_ADDR_VAR 0 8
30009: PUSH
30010: LD_VAR 0 12
30014: PUSH
30015: LD_VAR 0 7
30019: ARRAY
30020: PUSH
30021: LD_INT 1
30023: ARRAY
30024: PPUSH
30025: LD_VAR 0 12
30029: PUSH
30030: LD_VAR 0 7
30034: ARRAY
30035: PUSH
30036: LD_INT 2
30038: ARRAY
30039: PPUSH
30040: CALL_OW 546
30044: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30045: LD_VAR 0 8
30049: PUSH
30050: LD_INT 1
30052: ARRAY
30053: IFTRUE 30075
30055: PUSH
30056: LD_VAR 0 8
30060: PUSH
30061: LD_INT 2
30063: ARRAY
30064: PUSH
30065: LD_VAR 0 13
30069: PUSH
30070: LD_INT 2
30072: PLUS
30073: GREATER
30074: OR
30075: IFTRUE 30097
30077: PUSH
30078: LD_VAR 0 8
30082: PUSH
30083: LD_INT 2
30085: ARRAY
30086: PUSH
30087: LD_VAR 0 13
30091: PUSH
30092: LD_INT 2
30094: MINUS
30095: LESS
30096: OR
30097: IFTRUE 30165
30099: PUSH
30100: LD_VAR 0 8
30104: PUSH
30105: LD_INT 3
30107: ARRAY
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: LD_INT 8
30114: PUSH
30115: LD_INT 9
30117: PUSH
30118: LD_INT 10
30120: PUSH
30121: LD_INT 11
30123: PUSH
30124: LD_INT 12
30126: PUSH
30127: LD_INT 13
30129: PUSH
30130: LD_INT 16
30132: PUSH
30133: LD_INT 17
30135: PUSH
30136: LD_INT 18
30138: PUSH
30139: LD_INT 19
30141: PUSH
30142: LD_INT 20
30144: PUSH
30145: LD_INT 21
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: IN
30163: NOT
30164: OR
30165: IFTRUE 30178
30167: PUSH
30168: LD_VAR 0 8
30172: PUSH
30173: LD_INT 5
30175: ARRAY
30176: NOT
30177: OR
30178: IFTRUE 30218
30180: PUSH
30181: LD_VAR 0 8
30185: PUSH
30186: LD_INT 6
30188: ARRAY
30189: PUSH
30190: LD_INT 1
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 7
30198: PUSH
30199: LD_INT 9
30201: PUSH
30202: LD_INT 10
30204: PUSH
30205: LD_INT 11
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: IN
30216: NOT
30217: OR
30218: IFFALSE 30224
// exit ;
30220: POP
30221: POP
30222: GO 30309
// end ;
30224: GO 29881
30226: POP
30227: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30228: LD_VAR 0 9
30232: PPUSH
30233: LD_VAR 0 3
30237: PPUSH
30238: LD_VAR 0 4
30242: PPUSH
30243: LD_INT 20
30245: PPUSH
30246: CALL 22128 0 4
30250: PUSH
30251: LD_INT 4
30253: ARRAY
30254: IFFALSE 30258
// exit ;
30256: GO 30309
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30258: LD_VAR 0 2
30262: PUSH
30263: LD_INT 29
30265: PUSH
30266: LD_INT 30
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: IN
30273: IFFALSE 30297
30275: PUSH
30276: LD_VAR 0 3
30280: PPUSH
30281: LD_VAR 0 4
30285: PPUSH
30286: LD_VAR 0 9
30290: PPUSH
30291: CALL_OW 440
30295: NOT
30296: AND
30297: IFFALSE 30301
// exit ;
30299: GO 30309
// result := true ;
30301: LD_ADDR_VAR 0 6
30305: PUSH
30306: LD_INT 1
30308: ST_TO_ADDR
// end ;
30309: LD_VAR 0 6
30313: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30314: LD_INT 0
30316: PPUSH
30317: PPUSH
30318: PPUSH
30319: PPUSH
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
// result = [ ] ;
30374: LD_ADDR_VAR 0 7
30378: PUSH
30379: EMPTY
30380: ST_TO_ADDR
// temp_list = [ ] ;
30381: LD_ADDR_VAR 0 9
30385: PUSH
30386: EMPTY
30387: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30388: LD_VAR 0 4
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 1
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 3
30404: PUSH
30405: LD_INT 4
30407: PUSH
30408: LD_INT 5
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: IN
30419: NOT
30420: IFTRUE 30463
30422: PUSH
30423: LD_VAR 0 1
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 1
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: IN
30438: IFFALSE 30462
30440: PUSH
30441: LD_VAR 0 5
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 2
30451: PUSH
30452: LD_INT 3
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: LIST
30459: IN
30460: NOT
30461: AND
30462: OR
30463: IFFALSE 30467
// exit ;
30465: GO 48866
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30467: LD_VAR 0 1
30471: PUSH
30472: LD_INT 6
30474: PUSH
30475: LD_INT 7
30477: PUSH
30478: LD_INT 8
30480: PUSH
30481: LD_INT 13
30483: PUSH
30484: LD_INT 12
30486: PUSH
30487: LD_INT 15
30489: PUSH
30490: LD_INT 11
30492: PUSH
30493: LD_INT 14
30495: PUSH
30496: LD_INT 10
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: IN
30510: IFFALSE 30520
// btype = b_lab ;
30512: LD_ADDR_VAR 0 1
30516: PUSH
30517: LD_INT 6
30519: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30520: LD_VAR 0 6
30524: PUSH
30525: LD_INT 0
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: LD_INT 2
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: IN
30539: NOT
30540: IFTRUE 30608
30542: PUSH
30543: LD_VAR 0 1
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: LD_INT 1
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 6
30562: PUSH
30563: LD_INT 36
30565: PUSH
30566: LD_INT 4
30568: PUSH
30569: LD_INT 5
30571: PUSH
30572: LD_INT 31
30574: PUSH
30575: LD_INT 32
30577: PUSH
30578: LD_INT 33
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: IN
30594: NOT
30595: IFFALSE 30607
30597: PUSH
30598: LD_VAR 0 6
30602: PUSH
30603: LD_INT 1
30605: EQUAL
30606: AND
30607: OR
30608: IFTRUE 30640
30610: PUSH
30611: LD_VAR 0 1
30615: PUSH
30616: LD_INT 2
30618: PUSH
30619: LD_INT 3
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: IN
30626: NOT
30627: IFFALSE 30639
30629: PUSH
30630: LD_VAR 0 6
30634: PUSH
30635: LD_INT 2
30637: EQUAL
30638: AND
30639: OR
30640: IFFALSE 30650
// mode = 0 ;
30642: LD_ADDR_VAR 0 6
30646: PUSH
30647: LD_INT 0
30649: ST_TO_ADDR
// case mode of 0 :
30650: LD_VAR 0 6
30654: PUSH
30655: LD_INT 0
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 42116
30663: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30664: LD_ADDR_VAR 0 11
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 0
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 0
30681: PUSH
30682: LD_INT 1
30684: NEG
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 0
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 0
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 1
30722: NEG
30723: PUSH
30724: LD_INT 0
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 0
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 1
30768: PUSH
30769: LD_INT 1
30771: NEG
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 1
30810: PUSH
30811: LD_INT 3
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 0
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 1
30830: NEG
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30857: LD_ADDR_VAR 0 12
30861: PUSH
30862: LD_INT 0
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: LD_INT 1
30877: NEG
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: LD_INT 0
30888: PUSH
30889: EMPTY
30890: LIST
30891: LIST
30892: PUSH
30893: LD_INT 1
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: LD_INT 1
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 2
30949: PUSH
30950: LD_INT 0
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: LD_INT 1
30962: PUSH
30963: EMPTY
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: LD_INT 0
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: LD_INT 1
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: PUSH
31012: LD_INT 3
31014: NEG
31015: PUSH
31016: LD_INT 0
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 3
31025: NEG
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31053: LD_ADDR_VAR 0 13
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: LD_INT 0
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 1
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 1
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 2
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 2
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: LD_INT 2
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: NEG
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: NEG
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 2
31200: NEG
31201: PUSH
31202: LD_INT 3
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: LD_INT 3
31212: NEG
31213: PUSH
31214: LD_INT 2
31216: NEG
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 3
31224: NEG
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31252: LD_ADDR_VAR 0 14
31256: PUSH
31257: LD_INT 0
31259: PUSH
31260: LD_INT 0
31262: PUSH
31263: EMPTY
31264: LIST
31265: LIST
31266: PUSH
31267: LD_INT 0
31269: PUSH
31270: LD_INT 1
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: NEG
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 1
31333: NEG
31334: PUSH
31335: LD_INT 2
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 2
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 1
31367: PUSH
31368: LD_INT 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: LD_INT 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_INT 1
31398: NEG
31399: PUSH
31400: LD_INT 3
31402: NEG
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 3
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31448: LD_ADDR_VAR 0 15
31452: PUSH
31453: LD_INT 0
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 0
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 0
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 2
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 1
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 1
31560: NEG
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 2
31571: NEG
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 2
31582: NEG
31583: PUSH
31584: LD_INT 1
31586: NEG
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 2
31594: PUSH
31595: LD_INT 1
31597: NEG
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 3
31605: PUSH
31606: LD_INT 0
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 3
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31641: LD_ADDR_VAR 0 16
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 0
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 1
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 1
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 0
31689: PUSH
31690: LD_INT 1
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: NEG
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 1
31710: NEG
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 1
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 2
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: LD_INT 1
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: EMPTY
31783: LIST
31784: LIST
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 2
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: PUSH
31796: LD_INT 3
31798: PUSH
31799: LD_INT 3
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 2
31808: PUSH
31809: LD_INT 3
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31834: LD_ADDR_VAR 0 17
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 0
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: LD_INT 1
31854: NEG
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: PUSH
31863: LD_INT 0
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: PUSH
31873: LD_INT 1
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 1
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: NEG
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: NEG
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 2
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: LD_INT 1
31941: NEG
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: EMPTY
31954: LIST
31955: LIST
31956: PUSH
31957: LD_INT 2
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 2
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: NEG
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32064: LD_ADDR_VAR 0 18
32068: PUSH
32069: LD_INT 0
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: EMPTY
32076: LIST
32077: LIST
32078: PUSH
32079: LD_INT 0
32081: PUSH
32082: LD_INT 1
32084: NEG
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: PUSH
32093: LD_INT 0
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: PUSH
32103: LD_INT 1
32105: PUSH
32106: EMPTY
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: LD_INT 0
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 2
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 0
32157: PUSH
32158: LD_INT 2
32160: NEG
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 1
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 2
32179: PUSH
32180: LD_INT 0
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 2
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 2
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 0
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 1
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: NEG
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 2
32251: NEG
32252: PUSH
32253: LD_INT 1
32255: NEG
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32294: LD_ADDR_VAR 0 19
32298: PUSH
32299: LD_INT 0
32301: PUSH
32302: LD_INT 0
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 0
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: PUSH
32320: LD_INT 1
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 1
32332: PUSH
32333: LD_INT 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: LD_INT 1
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: NEG
32353: PUSH
32354: LD_INT 0
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 0
32387: PUSH
32388: LD_INT 2
32390: NEG
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PUSH
32396: LD_INT 1
32398: PUSH
32399: LD_INT 1
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 2
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 2
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 2
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: PUSH
32447: LD_INT 0
32449: PUSH
32450: LD_INT 2
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: LD_INT 0
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: LD_INT 1
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32524: LD_ADDR_VAR 0 20
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 0
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 1
32582: NEG
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 2
32620: NEG
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 0
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: LD_INT 1
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 2
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: LD_INT 2
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 2
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: NEG
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: NEG
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: NEG
32712: PUSH
32713: LD_INT 1
32715: NEG
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PUSH
32721: LD_INT 2
32723: NEG
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32754: LD_ADDR_VAR 0 21
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 0
32771: PUSH
32772: LD_INT 1
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 1
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 1
32792: PUSH
32793: LD_INT 1
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 1
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 1
32812: NEG
32813: PUSH
32814: LD_INT 0
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: NEG
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: LD_INT 2
32839: NEG
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 2
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: LD_INT 1
32861: NEG
32862: PUSH
32863: EMPTY
32864: LIST
32865: LIST
32866: PUSH
32867: LD_INT 2
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 2
32879: PUSH
32880: LD_INT 1
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: LD_INT 2
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 2
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 0
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: NEG
32931: PUSH
32932: LD_INT 0
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: LD_INT 2
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32984: LD_ADDR_VAR 0 22
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 0
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 0
33001: PUSH
33002: LD_INT 1
33004: NEG
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 1
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: LD_INT 1
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: LD_INT 0
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: LD_INT 2
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: LD_INT 2
33080: NEG
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: LD_INT 1
33091: NEG
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 2
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: EMPTY
33114: LIST
33115: LIST
33116: PUSH
33117: LD_INT 2
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 2
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 0
33139: PUSH
33140: LD_INT 2
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: NEG
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: NEG
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 2
33171: NEG
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: LD_INT 2
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33214: LD_ADDR_VAR 0 23
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: LD_INT 1
33234: NEG
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 1
33242: PUSH
33243: LD_INT 0
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 0
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: NEG
33273: PUSH
33274: LD_INT 0
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: EMPTY
33290: LIST
33291: LIST
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: LD_INT 2
33299: NEG
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 0
33307: PUSH
33308: LD_INT 2
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: LD_INT 1
33318: PUSH
33319: LD_INT 1
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 2
33339: PUSH
33340: LD_INT 1
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: LD_INT 2
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 1
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 0
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: NEG
33380: PUSH
33381: LD_INT 1
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: LD_INT 1
33405: NEG
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 2
33413: NEG
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 2
33425: NEG
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: LD_INT 3
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33494: LD_ADDR_VAR 0 24
33498: PUSH
33499: LD_INT 0
33501: PUSH
33502: LD_INT 0
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: PUSH
33523: LD_INT 0
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 1
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 0
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: NEG
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: PUSH
33573: LD_INT 1
33575: NEG
33576: PUSH
33577: LD_INT 2
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 0
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 2
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 2
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 0
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 2
33670: NEG
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: NEG
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 1
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 3
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 3
33737: PUSH
33738: LD_INT 2
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33770: LD_ADDR_VAR 0 25
33774: PUSH
33775: LD_INT 0
33777: PUSH
33778: LD_INT 0
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 1
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 1
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: LD_INT 1
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: NEG
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 0
33863: PUSH
33864: LD_INT 2
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 2
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: EMPTY
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 2
33905: PUSH
33906: LD_INT 2
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 2
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 0
33925: PUSH
33926: LD_INT 2
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: LD_INT 2
33946: NEG
33947: PUSH
33948: LD_INT 0
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 2
33957: NEG
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 2
33969: NEG
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 3
33981: PUSH
33982: LD_INT 1
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 3
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34044: LD_ADDR_VAR 0 26
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 1
34064: NEG
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: PUSH
34073: LD_INT 0
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 1
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 1
34102: NEG
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: PUSH
34111: LD_INT 1
34113: NEG
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 1
34125: NEG
34126: PUSH
34127: LD_INT 2
34129: NEG
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 0
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 2
34179: PUSH
34180: LD_INT 2
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: LD_INT 2
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: LD_INT 0
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: LD_INT 1
34209: NEG
34210: PUSH
34211: LD_INT 1
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: LD_INT 2
34220: NEG
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 2
34243: NEG
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 1
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 2
34286: NEG
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34320: LD_ADDR_VAR 0 27
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 2
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 3
34553: NEG
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 3
34565: NEG
34566: PUSH
34567: LD_INT 2
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34600: LD_ADDR_VAR 0 28
34604: PUSH
34605: LD_INT 0
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 1
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: LD_INT 1
34669: NEG
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 2
34685: NEG
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 1
34704: PUSH
34705: LD_INT 1
34707: NEG
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: PUSH
34716: LD_INT 0
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: PUSH
34726: LD_INT 1
34728: PUSH
34729: EMPTY
34730: LIST
34731: LIST
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: LD_INT 2
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: LD_INT 1
34745: PUSH
34746: LD_INT 2
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: LD_INT 2
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: LD_INT 1
34769: PUSH
34770: EMPTY
34771: LIST
34772: LIST
34773: PUSH
34774: LD_INT 2
34776: NEG
34777: PUSH
34778: LD_INT 0
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: NEG
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 2
34799: NEG
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 2
34811: NEG
34812: PUSH
34813: LD_INT 3
34815: NEG
34816: PUSH
34817: EMPTY
34818: LIST
34819: LIST
34820: PUSH
34821: LD_INT 1
34823: NEG
34824: PUSH
34825: LD_INT 3
34827: NEG
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 3
34847: NEG
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34882: LD_ADDR_VAR 0 29
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: LD_INT 1
34902: NEG
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: LD_INT 0
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 0
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: EMPTY
34946: LIST
34947: LIST
34948: PUSH
34949: LD_INT 1
34951: NEG
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 2
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 1
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 1
35037: NEG
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 2
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: PUSH
35058: LD_INT 2
35060: NEG
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: LD_INT 3
35076: NEG
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: PUSH
35096: LD_INT 1
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: PUSH
35106: LD_INT 3
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: LD_INT 2
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 3
35126: NEG
35127: PUSH
35128: LD_INT 2
35130: NEG
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35161: LD_ADDR_VAR 0 30
35165: PUSH
35166: LD_INT 0
35168: PUSH
35169: LD_INT 0
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 0
35178: PUSH
35179: LD_INT 1
35181: NEG
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: PUSH
35190: LD_INT 0
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: LD_INT 1
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 0
35209: PUSH
35210: LD_INT 1
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 0
35223: PUSH
35224: EMPTY
35225: LIST
35226: LIST
35227: PUSH
35228: LD_INT 1
35230: NEG
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: NEG
35243: PUSH
35244: LD_INT 2
35246: NEG
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: LD_INT 2
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 1
35265: PUSH
35266: LD_INT 1
35268: NEG
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: LD_INT 0
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 1
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: LD_INT 2
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 1
35316: NEG
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 2
35327: NEG
35328: PUSH
35329: LD_INT 0
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 2
35338: NEG
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: NEG
35351: PUSH
35352: LD_INT 3
35354: NEG
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 1
35362: PUSH
35363: LD_INT 2
35365: NEG
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: LD_INT 2
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 3
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 3
35404: NEG
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35439: LD_ADDR_VAR 0 31
35443: PUSH
35444: LD_INT 0
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 0
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 1
35520: NEG
35521: PUSH
35522: LD_INT 2
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 1
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 2
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: PUSH
35561: LD_INT 2
35563: PUSH
35564: LD_INT 2
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: PUSH
35571: LD_INT 1
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: NEG
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 2
35604: NEG
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: NEG
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 3
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 1
35643: NEG
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 3
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 3
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 2
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 3
35682: NEG
35683: PUSH
35684: LD_INT 2
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35717: LD_ADDR_VAR 0 32
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: LD_INT 0
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: LD_INT 1
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 1
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: LD_INT 0
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: NEG
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: LD_INT 2
35802: NEG
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 0
35810: PUSH
35811: LD_INT 2
35813: NEG
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: PUSH
35843: LD_INT 2
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 0
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 1
35872: NEG
35873: PUSH
35874: LD_INT 1
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 2
35883: NEG
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: NEG
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 3
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 1
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 3
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: LD_INT 3
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 3
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35995: LD_ADDR_VAR 0 33
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 1
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 2
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 2
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 1
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: NEG
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: LD_INT 1
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 2
36173: NEG
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: LD_INT 3
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 2
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 3
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 3
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 3
36239: NEG
36240: PUSH
36241: LD_INT 2
36243: NEG
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36274: LD_ADDR_VAR 0 34
36278: PUSH
36279: LD_INT 0
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: EMPTY
36286: LIST
36287: LIST
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: LD_INT 0
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: PUSH
36313: LD_INT 1
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: LD_INT 0
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 1
36355: NEG
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 1
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: LD_INT 2
36389: PUSH
36390: LD_INT 1
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 2
36430: NEG
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 2
36441: NEG
36442: PUSH
36443: LD_INT 1
36445: NEG
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 2
36453: NEG
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 3
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 2
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: LD_INT 2
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: NEG
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36554: LD_ADDR_VAR 0 35
36558: PUSH
36559: LD_INT 0
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 1
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 1
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 1
36623: NEG
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 2
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 2
36645: NEG
36646: PUSH
36647: LD_INT 1
36649: NEG
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36666: LD_ADDR_VAR 0 36
36670: PUSH
36671: LD_INT 0
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: LD_INT 1
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 1
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: LD_INT 0
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 2
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36778: LD_ADDR_VAR 0 37
36782: PUSH
36783: LD_INT 0
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: LD_INT 1
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: NEG
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 1
36874: PUSH
36875: EMPTY
36876: LIST
36877: LIST
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36890: LD_ADDR_VAR 0 38
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 0
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 1
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: NEG
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: NEG
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 1
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: NEG
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37002: LD_ADDR_VAR 0 39
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 1
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: LD_INT 0
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 1
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 1
37060: NEG
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 1
37083: NEG
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37114: LD_ADDR_VAR 0 40
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37226: LD_ADDR_VAR 0 41
37230: PUSH
37231: LD_INT 0
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 0
37243: PUSH
37244: LD_INT 1
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 0
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 1
37284: NEG
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 1
37295: NEG
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: NEG
37308: PUSH
37309: LD_INT 2
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 2
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 2
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 2
37350: PUSH
37351: LD_INT 2
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: LD_INT 2
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: LD_INT 1
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: PUSH
37379: LD_INT 2
37381: NEG
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: NEG
37393: PUSH
37394: LD_INT 1
37396: NEG
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: LD_INT 3
37420: NEG
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: PUSH
37429: LD_INT 1
37431: NEG
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 3
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 3
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 3
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 3
37500: NEG
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 3
37511: NEG
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 3
37523: NEG
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: LD_INT 3
37535: NEG
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37576: LD_ADDR_VAR 0 42
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: NEG
37658: PUSH
37659: LD_INT 2
37661: NEG
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: LD_INT 2
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 2
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: LD_INT 2
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 2
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: LD_INT 1
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 2
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: NEG
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: LD_INT 3
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 1
37778: NEG
37779: PUSH
37780: LD_INT 3
37782: NEG
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: LD_INT 3
37793: NEG
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: PUSH
37802: LD_INT 2
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 3
37812: PUSH
37813: LD_INT 2
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 3
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: PUSH
37833: LD_INT 3
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 1
37862: NEG
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 3
37873: NEG
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 3
37885: NEG
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37926: LD_ADDR_VAR 0 43
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 1
37946: NEG
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: PUSH
37955: LD_INT 0
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 1
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 2
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 2
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 3
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 3
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 2
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 3
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 3
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 3
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 1
38200: NEG
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: LD_INT 1
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 3
38222: NEG
38223: PUSH
38224: LD_INT 0
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 3
38233: NEG
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38274: LD_ADDR_VAR 0 44
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 0
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 0
38291: PUSH
38292: LD_INT 1
38294: NEG
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: LD_INT 1
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 0
38322: PUSH
38323: LD_INT 1
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 1
38332: NEG
38333: PUSH
38334: LD_INT 0
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 2
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: PUSH
38409: LD_INT 2
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: NEG
38419: PUSH
38420: LD_INT 1
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: NEG
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: NEG
38441: PUSH
38442: LD_INT 1
38444: NEG
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 3
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 2
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 3
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: LD_INT 2
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: LD_INT 3
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 2
38527: PUSH
38528: LD_INT 3
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 3
38548: NEG
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: NEG
38560: PUSH
38561: LD_INT 1
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 3
38571: NEG
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 3
38583: NEG
38584: PUSH
38585: LD_INT 3
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38624: LD_ADDR_VAR 0 45
38628: PUSH
38629: LD_INT 0
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 0
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: LD_INT 0
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: LD_INT 2
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 2
38720: NEG
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: LD_INT 2
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 2
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: NEG
38815: PUSH
38816: LD_INT 3
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: NEG
38827: PUSH
38828: LD_INT 3
38830: NEG
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 3
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: LD_INT 3
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 1
38910: NEG
38911: PUSH
38912: LD_INT 2
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 3
38921: NEG
38922: PUSH
38923: LD_INT 2
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 3
38933: NEG
38934: PUSH
38935: LD_INT 3
38937: NEG
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38974: LD_ADDR_VAR 0 46
38978: PUSH
38979: LD_INT 0
38981: PUSH
38982: LD_INT 0
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 0
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 1
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: NEG
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 0
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: LD_INT 1
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 2
39151: NEG
39152: PUSH
39153: LD_INT 1
39155: NEG
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: LD_INT 3
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 3
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 2
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: EMPTY
39203: LIST
39204: LIST
39205: PUSH
39206: LD_INT 3
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: PUSH
39229: LD_INT 3
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: LD_INT 3
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 1
39248: NEG
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: LD_INT 1
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 3
39270: NEG
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 3
39281: NEG
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39322: LD_ADDR_VAR 0 47
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 0
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 1
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: LD_INT 1
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: NEG
39381: PUSH
39382: LD_INT 0
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 2
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 0
39415: PUSH
39416: LD_INT 2
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 1
39429: NEG
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 2
39449: NEG
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39473: LD_ADDR_VAR 0 48
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 0
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: LD_INT 0
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: PUSH
39589: LD_INT 0
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: LD_INT 1
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39620: LD_ADDR_VAR 0 49
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 1
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39764: LD_ADDR_VAR 0 50
39768: PUSH
39769: LD_INT 0
39771: PUSH
39772: LD_INT 0
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: LD_INT 1
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: LD_INT 0
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39908: LD_ADDR_VAR 0 51
39912: PUSH
39913: LD_INT 0
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 0
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 0
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 0
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 1
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 2
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40055: LD_ADDR_VAR 0 52
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 2
40140: NEG
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: LD_INT 0
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 2
40182: NEG
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40206: LD_ADDR_VAR 0 53
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40436: LD_ADDR_VAR 0 54
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40666: LD_ADDR_VAR 0 55
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 0
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 0
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: NEG
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 2
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 2
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 2
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: NEG
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: NEG
40854: PUSH
40855: LD_INT 1
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40896: LD_ADDR_VAR 0 56
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: LD_INT 1
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 1
40934: PUSH
40935: LD_INT 1
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 2
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 1
41003: NEG
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: LD_INT 0
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 2
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41126: LD_ADDR_VAR 0 57
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 0
41219: PUSH
41220: LD_INT 2
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 1
41230: PUSH
41231: LD_INT 1
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: NEG
41303: PUSH
41304: LD_INT 0
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: NEG
41314: PUSH
41315: LD_INT 1
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41356: LD_ADDR_VAR 0 58
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 0
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 2
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 2
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 2
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 2
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: NEG
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 2
41543: NEG
41544: PUSH
41545: LD_INT 1
41547: NEG
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41586: LD_ADDR_VAR 0 59
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: LD_INT 0
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 0
41634: PUSH
41635: LD_INT 1
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: LD_INT 0
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41674: LD_ADDR_VAR 0 60
41678: PUSH
41679: LD_INT 0
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 1
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 1
41743: NEG
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41762: LD_ADDR_VAR 0 61
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 1
41782: NEG
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41850: LD_ADDR_VAR 0 62
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 0
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: LD_INT 1
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: LD_INT 1
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41938: LD_ADDR_VAR 0 63
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42026: LD_ADDR_VAR 0 64
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: LD_INT 0
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 0
42043: PUSH
42044: LD_INT 1
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 1
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: NEG
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: ST_TO_ADDR
// end ; 1 :
42114: GO 48011
42116: LD_INT 1
42118: DOUBLE
42119: EQUAL
42120: IFTRUE 42124
42122: GO 44747
42124: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42125: LD_ADDR_VAR 0 11
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: LD_INT 3
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 3
42147: NEG
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42169: LD_ADDR_VAR 0 12
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 3
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42210: LD_ADDR_VAR 0 13
42214: PUSH
42215: LD_INT 3
42217: PUSH
42218: LD_INT 2
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 3
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42250: LD_ADDR_VAR 0 14
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 3
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 0
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: NEG
42278: PUSH
42279: LD_INT 2
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42291: LD_ADDR_VAR 0 15
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 3
42309: NEG
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 3
42320: NEG
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42335: LD_ADDR_VAR 0 16
42339: PUSH
42340: LD_INT 2
42342: NEG
42343: PUSH
42344: LD_INT 3
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 3
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 3
42366: NEG
42367: PUSH
42368: LD_INT 3
42370: NEG
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42381: LD_ADDR_VAR 0 17
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 3
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42425: LD_ADDR_VAR 0 18
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: LD_INT 1
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42466: LD_ADDR_VAR 0 19
42470: PUSH
42471: LD_INT 3
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: PUSH
42484: LD_INT 3
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 3
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: LIST
42505: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42506: LD_ADDR_VAR 0 20
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 3
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 2
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42547: LD_ADDR_VAR 0 21
42551: PUSH
42552: LD_INT 2
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: NEG
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42591: LD_ADDR_VAR 0 22
42595: PUSH
42596: LD_INT 2
42598: NEG
42599: PUSH
42600: LD_INT 3
42602: NEG
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 3
42610: NEG
42611: PUSH
42612: LD_INT 2
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 3
42622: NEG
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: LIST
42636: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42637: LD_ADDR_VAR 0 23
42641: PUSH
42642: LD_INT 0
42644: PUSH
42645: LD_INT 3
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 4
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: LD_INT 3
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: LIST
42680: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42681: LD_ADDR_VAR 0 24
42685: PUSH
42686: LD_INT 3
42688: PUSH
42689: LD_INT 0
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 3
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 4
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42722: LD_ADDR_VAR 0 25
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 4
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 4
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42762: LD_ADDR_VAR 0 26
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: LD_INT 4
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: NEG
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42803: LD_ADDR_VAR 0 27
42807: PUSH
42808: LD_INT 3
42810: NEG
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 4
42832: NEG
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42847: LD_ADDR_VAR 0 28
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 3
42866: NEG
42867: PUSH
42868: LD_INT 4
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 4
42878: NEG
42879: PUSH
42880: LD_INT 3
42882: NEG
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: LIST
42892: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42893: LD_ADDR_VAR 0 29
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 3
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: LD_INT 4
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 4
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 3
42960: NEG
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: LD_INT 5
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 0
42980: PUSH
42981: LD_INT 5
42983: NEG
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 4
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: LD_INT 6
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 6
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 5
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43048: LD_ADDR_VAR 0 30
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 3
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 3
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 4
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 4
43107: PUSH
43108: LD_INT 1
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 4
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 5
43138: PUSH
43139: LD_INT 1
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 5
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 6
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 6
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: LIST
43181: LIST
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43191: LD_ADDR_VAR 0 31
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 4
43228: PUSH
43229: LD_INT 3
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 4
43238: PUSH
43239: LD_INT 4
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 3
43248: PUSH
43249: LD_INT 4
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 5
43258: PUSH
43259: LD_INT 4
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 5
43268: PUSH
43269: LD_INT 5
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 4
43278: PUSH
43279: LD_INT 5
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 6
43288: PUSH
43289: LD_INT 5
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 6
43298: PUSH
43299: LD_INT 6
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 5
43308: PUSH
43309: LD_INT 6
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43330: LD_ADDR_VAR 0 32
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 4
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 4
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: LD_INT 5
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 5
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 4
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 6
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 6
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 5
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43473: LD_ADDR_VAR 0 33
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 3
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 3
43514: NEG
43515: PUSH
43516: LD_INT 1
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 4
43525: NEG
43526: PUSH
43527: LD_INT 0
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 4
43536: NEG
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 4
43548: NEG
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 5
43559: NEG
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 5
43570: NEG
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 5
43582: NEG
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 6
43593: NEG
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 6
43604: NEG
43605: PUSH
43606: LD_INT 1
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43628: LD_ADDR_VAR 0 34
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: LD_INT 3
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 3
43647: NEG
43648: PUSH
43649: LD_INT 2
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 3
43659: NEG
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 3
43671: NEG
43672: PUSH
43673: LD_INT 4
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 4
43683: NEG
43684: PUSH
43685: LD_INT 3
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 4
43695: NEG
43696: PUSH
43697: LD_INT 4
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 4
43707: NEG
43708: PUSH
43709: LD_INT 5
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 5
43719: NEG
43720: PUSH
43721: LD_INT 4
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 5
43731: NEG
43732: PUSH
43733: LD_INT 5
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 5
43743: NEG
43744: PUSH
43745: LD_INT 6
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 6
43755: NEG
43756: PUSH
43757: LD_INT 5
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 6
43767: NEG
43768: PUSH
43769: LD_INT 6
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43791: LD_ADDR_VAR 0 41
43795: PUSH
43796: LD_INT 0
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 2
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43835: LD_ADDR_VAR 0 42
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 1
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: LIST
43875: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43876: LD_ADDR_VAR 0 43
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: LD_INT 2
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: LIST
43915: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43916: LD_ADDR_VAR 0 44
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: LD_INT 3
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43957: LD_ADDR_VAR 0 45
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: NEG
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: LIST
44000: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44001: LD_ADDR_VAR 0 46
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 3
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 3
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: LIST
44046: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44047: LD_ADDR_VAR 0 47
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 3
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 3
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44080: LD_ADDR_VAR 0 48
44084: PUSH
44085: LD_INT 1
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44111: LD_ADDR_VAR 0 49
44115: PUSH
44116: LD_INT 3
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 3
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44140: LD_ADDR_VAR 0 50
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: LD_INT 3
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 3
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44169: LD_ADDR_VAR 0 51
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 2
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44200: LD_ADDR_VAR 0 52
44204: PUSH
44205: LD_INT 3
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: NEG
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 3
44219: NEG
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44233: LD_ADDR_VAR 0 53
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: LD_INT 3
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 3
44255: NEG
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44277: LD_ADDR_VAR 0 54
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: LIST
44317: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44318: LD_ADDR_VAR 0 55
44322: PUSH
44323: LD_INT 3
44325: PUSH
44326: LD_INT 2
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 3
44335: PUSH
44336: LD_INT 3
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 2
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: LIST
44357: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44358: LD_ADDR_VAR 0 56
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: LD_INT 2
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44399: LD_ADDR_VAR 0 57
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 3
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 3
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44443: LD_ADDR_VAR 0 58
44447: PUSH
44448: LD_INT 2
44450: NEG
44451: PUSH
44452: LD_INT 3
44454: NEG
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 3
44462: NEG
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 3
44474: NEG
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44489: LD_ADDR_VAR 0 59
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: LD_INT 2
44500: NEG
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 0
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44533: LD_ADDR_VAR 0 60
44537: PUSH
44538: LD_INT 1
44540: PUSH
44541: LD_INT 1
44543: NEG
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 0
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: PUSH
44562: LD_INT 1
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44574: LD_ADDR_VAR 0 61
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 1
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 2
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: LIST
44613: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44614: LD_ADDR_VAR 0 62
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 2
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: NEG
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44655: LD_ADDR_VAR 0 63
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 2
44673: NEG
44674: PUSH
44675: LD_INT 0
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: NEG
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: LIST
44698: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44699: LD_ADDR_VAR 0 64
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: LIST
44744: ST_TO_ADDR
// end ; 2 :
44745: GO 48011
44747: LD_INT 2
44749: DOUBLE
44750: EQUAL
44751: IFTRUE 44755
44753: GO 48010
44755: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44756: LD_ADDR_VAR 0 29
44760: PUSH
44761: LD_INT 4
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 4
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 5
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 5
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 4
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 3
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 3
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 3
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 5
44846: PUSH
44847: LD_INT 2
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: LD_INT 3
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 2
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 4
44886: PUSH
44887: LD_INT 4
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 3
44896: PUSH
44897: LD_INT 4
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 2
44906: PUSH
44907: LD_INT 3
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 4
44926: PUSH
44927: LD_INT 2
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: LD_INT 4
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 4
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 3
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 1
44966: PUSH
44967: LD_INT 4
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 1
44976: PUSH
44977: LD_INT 5
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: LD_INT 5
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: LD_INT 4
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: NEG
45008: PUSH
45009: LD_INT 3
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 2
45018: PUSH
45019: LD_INT 5
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 2
45028: NEG
45029: PUSH
45030: LD_INT 3
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 3
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 0
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 2
45073: NEG
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: LD_INT 1
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 4
45095: NEG
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 4
45106: NEG
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 4
45118: NEG
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 4
45141: NEG
45142: PUSH
45143: LD_INT 4
45145: NEG
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 4
45153: NEG
45154: PUSH
45155: LD_INT 5
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 3
45165: NEG
45166: PUSH
45167: LD_INT 4
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 3
45177: NEG
45178: PUSH
45179: LD_INT 3
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 4
45189: NEG
45190: PUSH
45191: LD_INT 3
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 5
45201: NEG
45202: PUSH
45203: LD_INT 4
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 5
45213: NEG
45214: PUSH
45215: LD_INT 5
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 3
45225: NEG
45226: PUSH
45227: LD_INT 5
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 5
45237: NEG
45238: PUSH
45239: LD_INT 3
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45294: LD_ADDR_VAR 0 30
45298: PUSH
45299: LD_INT 4
45301: PUSH
45302: LD_INT 4
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 4
45311: PUSH
45312: LD_INT 3
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 5
45321: PUSH
45322: LD_INT 4
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 5
45331: PUSH
45332: LD_INT 5
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 4
45341: PUSH
45342: LD_INT 5
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: LD_INT 4
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: LD_INT 3
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 5
45371: PUSH
45372: LD_INT 3
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 5
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 3
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 3
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 4
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 4
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 3
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 2
45463: PUSH
45464: LD_INT 4
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 4
45484: NEG
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 4
45495: NEG
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 3
45507: NEG
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 3
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 4
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 5
45540: NEG
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 5
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 5
45563: NEG
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: LD_INT 4
45602: NEG
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 3
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 4
45646: NEG
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 4
45658: NEG
45659: PUSH
45660: LD_INT 4
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 2
45670: NEG
45671: PUSH
45672: LD_INT 4
45674: NEG
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 4
45682: NEG
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: LD_INT 4
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: LD_INT 5
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 4
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: LD_INT 3
45730: NEG
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 3
45741: NEG
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 4
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 5
45765: NEG
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 3
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: NEG
45785: PUSH
45786: LD_INT 5
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45841: LD_ADDR_VAR 0 31
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 4
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 3
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 4
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: LD_INT 5
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: LD_INT 5
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 4
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 3
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: LD_INT 5
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 2
45930: NEG
45931: PUSH
45932: LD_INT 3
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 0
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: LD_INT 1
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 4
45997: NEG
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 4
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 4
46020: NEG
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 2
46032: NEG
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 4
46043: NEG
46044: PUSH
46045: LD_INT 4
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 4
46055: NEG
46056: PUSH
46057: LD_INT 5
46059: NEG
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 3
46067: NEG
46068: PUSH
46069: LD_INT 4
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 3
46079: NEG
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 4
46091: NEG
46092: PUSH
46093: LD_INT 3
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 5
46103: NEG
46104: PUSH
46105: LD_INT 4
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 5
46115: NEG
46116: PUSH
46117: LD_INT 5
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: LD_INT 5
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 5
46139: NEG
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 4
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: LD_INT 3
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 4
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 2
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 4
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 4
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 4
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 5
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 5
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 4
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 3
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 3
46314: PUSH
46315: LD_INT 1
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: LD_INT 3
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 5
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46391: LD_ADDR_VAR 0 32
46395: PUSH
46396: LD_INT 4
46398: NEG
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: LD_INT 4
46409: NEG
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 4
46443: NEG
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 5
46454: NEG
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 5
46465: NEG
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 5
46477: NEG
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 3
46489: NEG
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 3
46500: NEG
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 4
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 3
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 2
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 4
46560: NEG
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 4
46572: NEG
46573: PUSH
46574: LD_INT 4
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: NEG
46585: PUSH
46586: LD_INT 4
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 4
46596: NEG
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 4
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 5
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 4
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 3
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: LD_INT 3
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 4
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 1
46675: NEG
46676: PUSH
46677: LD_INT 5
46679: NEG
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: LD_INT 5
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: PUSH
46721: LD_INT 1
46723: NEG
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 4
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: EMPTY
46736: LIST
46737: LIST
46738: PUSH
46739: LD_INT 4
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 3
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 2
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 2
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 4
46793: PUSH
46794: LD_INT 2
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 4
46803: PUSH
46804: LD_INT 4
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 4
46813: PUSH
46814: LD_INT 3
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 5
46823: PUSH
46824: LD_INT 4
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 5
46833: PUSH
46834: LD_INT 5
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 4
46843: PUSH
46844: LD_INT 5
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 3
46853: PUSH
46854: LD_INT 4
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: LD_INT 3
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 5
46873: PUSH
46874: LD_INT 3
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: LD_INT 5
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46938: LD_ADDR_VAR 0 33
46942: PUSH
46943: LD_INT 4
46945: NEG
46946: PUSH
46947: LD_INT 4
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 4
46957: NEG
46958: PUSH
46959: LD_INT 5
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 3
46969: NEG
46970: PUSH
46971: LD_INT 4
46973: NEG
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 3
46981: NEG
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 4
46993: NEG
46994: PUSH
46995: LD_INT 3
46997: NEG
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 5
47005: NEG
47006: PUSH
47007: LD_INT 4
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 5
47017: NEG
47018: PUSH
47019: LD_INT 5
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 3
47029: NEG
47030: PUSH
47031: LD_INT 5
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 5
47041: NEG
47042: PUSH
47043: LD_INT 3
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 4
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 3
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 2
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 2
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 3
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 4
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: LD_INT 4
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 4
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 5
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 5
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 4
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 3
47206: PUSH
47207: LD_INT 0
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 5
47238: PUSH
47239: LD_INT 2
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: LD_INT 3
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 4
47268: PUSH
47269: LD_INT 3
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 4
47278: PUSH
47279: LD_INT 4
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 3
47288: PUSH
47289: LD_INT 4
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: PUSH
47309: LD_INT 2
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 4
47318: PUSH
47319: LD_INT 2
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 4
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 4
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 3
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 4
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 5
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 4
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: NEG
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: LD_INT 5
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 3
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47476: LD_ADDR_VAR 0 34
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 4
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 0
47494: PUSH
47495: LD_INT 5
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 4
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 3
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 4
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 5
47554: NEG
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 3
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 5
47577: NEG
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: PUSH
47583: LD_INT 3
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 3
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 4
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 4
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: LD_INT 1
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 2
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 4
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 4
47678: PUSH
47679: LD_INT 4
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 4
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 5
47698: PUSH
47699: LD_INT 4
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 5
47708: PUSH
47709: LD_INT 5
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 4
47718: PUSH
47719: LD_INT 5
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: PUSH
47729: LD_INT 4
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 5
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: LD_INT 5
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 0
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 3
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 4
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 4
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 4
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: NEG
47851: PUSH
47852: LD_INT 2
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 4
47861: NEG
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 4
47872: NEG
47873: PUSH
47874: LD_INT 1
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 3
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 4
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 5
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 5
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 5
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 3
47952: NEG
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: ST_TO_ADDR
// end ; end ;
48008: GO 48011
48010: POP
// case btype of b_depot , b_warehouse :
48011: LD_VAR 0 1
48015: PUSH
48016: LD_INT 0
48018: DOUBLE
48019: EQUAL
48020: IFTRUE 48030
48022: LD_INT 1
48024: DOUBLE
48025: EQUAL
48026: IFTRUE 48030
48028: GO 48231
48030: POP
// case nation of nation_american :
48031: LD_VAR 0 5
48035: PUSH
48036: LD_INT 1
48038: DOUBLE
48039: EQUAL
48040: IFTRUE 48044
48042: GO 48100
48044: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48045: LD_ADDR_VAR 0 9
48049: PUSH
48050: LD_VAR 0 11
48054: PUSH
48055: LD_VAR 0 12
48059: PUSH
48060: LD_VAR 0 13
48064: PUSH
48065: LD_VAR 0 14
48069: PUSH
48070: LD_VAR 0 15
48074: PUSH
48075: LD_VAR 0 16
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: PUSH
48088: LD_VAR 0 4
48092: PUSH
48093: LD_INT 1
48095: PLUS
48096: ARRAY
48097: ST_TO_ADDR
48098: GO 48229
48100: LD_INT 2
48102: DOUBLE
48103: EQUAL
48104: IFTRUE 48108
48106: GO 48164
48108: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48109: LD_ADDR_VAR 0 9
48113: PUSH
48114: LD_VAR 0 17
48118: PUSH
48119: LD_VAR 0 18
48123: PUSH
48124: LD_VAR 0 19
48128: PUSH
48129: LD_VAR 0 20
48133: PUSH
48134: LD_VAR 0 21
48138: PUSH
48139: LD_VAR 0 22
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: PUSH
48152: LD_VAR 0 4
48156: PUSH
48157: LD_INT 1
48159: PLUS
48160: ARRAY
48161: ST_TO_ADDR
48162: GO 48229
48164: LD_INT 3
48166: DOUBLE
48167: EQUAL
48168: IFTRUE 48172
48170: GO 48228
48172: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48173: LD_ADDR_VAR 0 9
48177: PUSH
48178: LD_VAR 0 23
48182: PUSH
48183: LD_VAR 0 24
48187: PUSH
48188: LD_VAR 0 25
48192: PUSH
48193: LD_VAR 0 26
48197: PUSH
48198: LD_VAR 0 27
48202: PUSH
48203: LD_VAR 0 28
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: PUSH
48216: LD_VAR 0 4
48220: PUSH
48221: LD_INT 1
48223: PLUS
48224: ARRAY
48225: ST_TO_ADDR
48226: GO 48229
48228: POP
48229: GO 48784
48231: LD_INT 2
48233: DOUBLE
48234: EQUAL
48235: IFTRUE 48245
48237: LD_INT 3
48239: DOUBLE
48240: EQUAL
48241: IFTRUE 48245
48243: GO 48301
48245: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48246: LD_ADDR_VAR 0 9
48250: PUSH
48251: LD_VAR 0 29
48255: PUSH
48256: LD_VAR 0 30
48260: PUSH
48261: LD_VAR 0 31
48265: PUSH
48266: LD_VAR 0 32
48270: PUSH
48271: LD_VAR 0 33
48275: PUSH
48276: LD_VAR 0 34
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: PUSH
48289: LD_VAR 0 4
48293: PUSH
48294: LD_INT 1
48296: PLUS
48297: ARRAY
48298: ST_TO_ADDR
48299: GO 48784
48301: LD_INT 16
48303: DOUBLE
48304: EQUAL
48305: IFTRUE 48363
48307: LD_INT 17
48309: DOUBLE
48310: EQUAL
48311: IFTRUE 48363
48313: LD_INT 18
48315: DOUBLE
48316: EQUAL
48317: IFTRUE 48363
48319: LD_INT 19
48321: DOUBLE
48322: EQUAL
48323: IFTRUE 48363
48325: LD_INT 22
48327: DOUBLE
48328: EQUAL
48329: IFTRUE 48363
48331: LD_INT 20
48333: DOUBLE
48334: EQUAL
48335: IFTRUE 48363
48337: LD_INT 21
48339: DOUBLE
48340: EQUAL
48341: IFTRUE 48363
48343: LD_INT 23
48345: DOUBLE
48346: EQUAL
48347: IFTRUE 48363
48349: LD_INT 24
48351: DOUBLE
48352: EQUAL
48353: IFTRUE 48363
48355: LD_INT 25
48357: DOUBLE
48358: EQUAL
48359: IFTRUE 48363
48361: GO 48419
48363: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48364: LD_ADDR_VAR 0 9
48368: PUSH
48369: LD_VAR 0 35
48373: PUSH
48374: LD_VAR 0 36
48378: PUSH
48379: LD_VAR 0 37
48383: PUSH
48384: LD_VAR 0 38
48388: PUSH
48389: LD_VAR 0 39
48393: PUSH
48394: LD_VAR 0 40
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: PUSH
48407: LD_VAR 0 4
48411: PUSH
48412: LD_INT 1
48414: PLUS
48415: ARRAY
48416: ST_TO_ADDR
48417: GO 48784
48419: LD_INT 6
48421: DOUBLE
48422: EQUAL
48423: IFTRUE 48475
48425: LD_INT 7
48427: DOUBLE
48428: EQUAL
48429: IFTRUE 48475
48431: LD_INT 8
48433: DOUBLE
48434: EQUAL
48435: IFTRUE 48475
48437: LD_INT 13
48439: DOUBLE
48440: EQUAL
48441: IFTRUE 48475
48443: LD_INT 12
48445: DOUBLE
48446: EQUAL
48447: IFTRUE 48475
48449: LD_INT 15
48451: DOUBLE
48452: EQUAL
48453: IFTRUE 48475
48455: LD_INT 11
48457: DOUBLE
48458: EQUAL
48459: IFTRUE 48475
48461: LD_INT 14
48463: DOUBLE
48464: EQUAL
48465: IFTRUE 48475
48467: LD_INT 10
48469: DOUBLE
48470: EQUAL
48471: IFTRUE 48475
48473: GO 48531
48475: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48476: LD_ADDR_VAR 0 9
48480: PUSH
48481: LD_VAR 0 41
48485: PUSH
48486: LD_VAR 0 42
48490: PUSH
48491: LD_VAR 0 43
48495: PUSH
48496: LD_VAR 0 44
48500: PUSH
48501: LD_VAR 0 45
48505: PUSH
48506: LD_VAR 0 46
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: PUSH
48519: LD_VAR 0 4
48523: PUSH
48524: LD_INT 1
48526: PLUS
48527: ARRAY
48528: ST_TO_ADDR
48529: GO 48784
48531: LD_INT 36
48533: DOUBLE
48534: EQUAL
48535: IFTRUE 48539
48537: GO 48595
48539: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48540: LD_ADDR_VAR 0 9
48544: PUSH
48545: LD_VAR 0 47
48549: PUSH
48550: LD_VAR 0 48
48554: PUSH
48555: LD_VAR 0 49
48559: PUSH
48560: LD_VAR 0 50
48564: PUSH
48565: LD_VAR 0 51
48569: PUSH
48570: LD_VAR 0 52
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: PUSH
48583: LD_VAR 0 4
48587: PUSH
48588: LD_INT 1
48590: PLUS
48591: ARRAY
48592: ST_TO_ADDR
48593: GO 48784
48595: LD_INT 4
48597: DOUBLE
48598: EQUAL
48599: IFTRUE 48621
48601: LD_INT 5
48603: DOUBLE
48604: EQUAL
48605: IFTRUE 48621
48607: LD_INT 34
48609: DOUBLE
48610: EQUAL
48611: IFTRUE 48621
48613: LD_INT 37
48615: DOUBLE
48616: EQUAL
48617: IFTRUE 48621
48619: GO 48677
48621: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48622: LD_ADDR_VAR 0 9
48626: PUSH
48627: LD_VAR 0 53
48631: PUSH
48632: LD_VAR 0 54
48636: PUSH
48637: LD_VAR 0 55
48641: PUSH
48642: LD_VAR 0 56
48646: PUSH
48647: LD_VAR 0 57
48651: PUSH
48652: LD_VAR 0 58
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: PUSH
48665: LD_VAR 0 4
48669: PUSH
48670: LD_INT 1
48672: PLUS
48673: ARRAY
48674: ST_TO_ADDR
48675: GO 48784
48677: LD_INT 31
48679: DOUBLE
48680: EQUAL
48681: IFTRUE 48727
48683: LD_INT 32
48685: DOUBLE
48686: EQUAL
48687: IFTRUE 48727
48689: LD_INT 33
48691: DOUBLE
48692: EQUAL
48693: IFTRUE 48727
48695: LD_INT 27
48697: DOUBLE
48698: EQUAL
48699: IFTRUE 48727
48701: LD_INT 26
48703: DOUBLE
48704: EQUAL
48705: IFTRUE 48727
48707: LD_INT 28
48709: DOUBLE
48710: EQUAL
48711: IFTRUE 48727
48713: LD_INT 29
48715: DOUBLE
48716: EQUAL
48717: IFTRUE 48727
48719: LD_INT 30
48721: DOUBLE
48722: EQUAL
48723: IFTRUE 48727
48725: GO 48783
48727: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48728: LD_ADDR_VAR 0 9
48732: PUSH
48733: LD_VAR 0 59
48737: PUSH
48738: LD_VAR 0 60
48742: PUSH
48743: LD_VAR 0 61
48747: PUSH
48748: LD_VAR 0 62
48752: PUSH
48753: LD_VAR 0 63
48757: PUSH
48758: LD_VAR 0 64
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: PUSH
48771: LD_VAR 0 4
48775: PUSH
48776: LD_INT 1
48778: PLUS
48779: ARRAY
48780: ST_TO_ADDR
48781: GO 48784
48783: POP
// temp_list2 = [ ] ;
48784: LD_ADDR_VAR 0 10
48788: PUSH
48789: EMPTY
48790: ST_TO_ADDR
// for i in temp_list do
48791: LD_ADDR_VAR 0 8
48795: PUSH
48796: LD_VAR 0 9
48800: PUSH
48801: FOR_IN
48802: IFFALSE 48854
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48804: LD_ADDR_VAR 0 10
48808: PUSH
48809: LD_VAR 0 10
48813: PUSH
48814: LD_VAR 0 8
48818: PUSH
48819: LD_INT 1
48821: ARRAY
48822: PUSH
48823: LD_VAR 0 2
48827: PLUS
48828: PUSH
48829: LD_VAR 0 8
48833: PUSH
48834: LD_INT 2
48836: ARRAY
48837: PUSH
48838: LD_VAR 0 3
48842: PLUS
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: EMPTY
48849: LIST
48850: ADD
48851: ST_TO_ADDR
48852: GO 48801
48854: POP
48855: POP
// result = temp_list2 ;
48856: LD_ADDR_VAR 0 7
48860: PUSH
48861: LD_VAR 0 10
48865: ST_TO_ADDR
// end ;
48866: LD_VAR 0 7
48870: RET
// export function EnemyInRange ( unit , dist ) ; begin
48871: LD_INT 0
48873: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48874: LD_ADDR_VAR 0 3
48878: PUSH
48879: LD_VAR 0 1
48883: PPUSH
48884: CALL_OW 255
48888: PPUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: CALL_OW 250
48898: PPUSH
48899: LD_VAR 0 1
48903: PPUSH
48904: CALL_OW 251
48908: PPUSH
48909: LD_VAR 0 2
48913: PPUSH
48914: CALL 22128 0 4
48918: PUSH
48919: LD_INT 4
48921: ARRAY
48922: ST_TO_ADDR
// end ;
48923: LD_VAR 0 3
48927: RET
// export function PlayerSeeMe ( unit ) ; begin
48928: LD_INT 0
48930: PPUSH
// result := See ( your_side , unit ) ;
48931: LD_ADDR_VAR 0 2
48935: PUSH
48936: LD_OWVAR 2
48940: PPUSH
48941: LD_VAR 0 1
48945: PPUSH
48946: CALL_OW 292
48950: ST_TO_ADDR
// end ;
48951: LD_VAR 0 2
48955: RET
// export function ReverseDir ( unit ) ; begin
48956: LD_INT 0
48958: PPUSH
// if not unit then
48959: LD_VAR 0 1
48963: NOT
48964: IFFALSE 48968
// exit ;
48966: GO 48991
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48968: LD_ADDR_VAR 0 2
48972: PUSH
48973: LD_VAR 0 1
48977: PPUSH
48978: CALL_OW 254
48982: PUSH
48983: LD_INT 3
48985: PLUS
48986: PUSH
48987: LD_INT 6
48989: MOD
48990: ST_TO_ADDR
// end ;
48991: LD_VAR 0 2
48995: RET
// export function ReverseArray ( array ) ; var i ; begin
48996: LD_INT 0
48998: PPUSH
48999: PPUSH
// if not array then
49000: LD_VAR 0 1
49004: NOT
49005: IFFALSE 49009
// exit ;
49007: GO 49064
// result := [ ] ;
49009: LD_ADDR_VAR 0 2
49013: PUSH
49014: EMPTY
49015: ST_TO_ADDR
// for i := array downto 1 do
49016: LD_ADDR_VAR 0 3
49020: PUSH
49021: DOUBLE
49022: LD_VAR 0 1
49026: INC
49027: ST_TO_ADDR
49028: LD_INT 1
49030: PUSH
49031: FOR_DOWNTO
49032: IFFALSE 49062
// result := Join ( result , array [ i ] ) ;
49034: LD_ADDR_VAR 0 2
49038: PUSH
49039: LD_VAR 0 2
49043: PPUSH
49044: LD_VAR 0 1
49048: PUSH
49049: LD_VAR 0 3
49053: ARRAY
49054: PPUSH
49055: CALL 53906 0 2
49059: ST_TO_ADDR
49060: GO 49031
49062: POP
49063: POP
// end ;
49064: LD_VAR 0 2
49068: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49069: LD_INT 0
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
// if not unit or not hexes then
49077: LD_VAR 0 1
49081: NOT
49082: IFTRUE 49091
49084: PUSH
49085: LD_VAR 0 2
49089: NOT
49090: OR
49091: IFFALSE 49095
// exit ;
49093: GO 49218
// dist := 9999 ;
49095: LD_ADDR_VAR 0 5
49099: PUSH
49100: LD_INT 9999
49102: ST_TO_ADDR
// for i = 1 to hexes do
49103: LD_ADDR_VAR 0 4
49107: PUSH
49108: DOUBLE
49109: LD_INT 1
49111: DEC
49112: ST_TO_ADDR
49113: LD_VAR 0 2
49117: PUSH
49118: FOR_TO
49119: IFFALSE 49206
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49121: LD_ADDR_VAR 0 6
49125: PUSH
49126: LD_VAR 0 1
49130: PPUSH
49131: LD_VAR 0 2
49135: PUSH
49136: LD_VAR 0 4
49140: ARRAY
49141: PUSH
49142: LD_INT 1
49144: ARRAY
49145: PPUSH
49146: LD_VAR 0 2
49150: PUSH
49151: LD_VAR 0 4
49155: ARRAY
49156: PUSH
49157: LD_INT 2
49159: ARRAY
49160: PPUSH
49161: CALL_OW 297
49165: ST_TO_ADDR
// if tdist < dist then
49166: LD_VAR 0 6
49170: PUSH
49171: LD_VAR 0 5
49175: LESS
49176: IFFALSE 49204
// begin hex := hexes [ i ] ;
49178: LD_ADDR_VAR 0 8
49182: PUSH
49183: LD_VAR 0 2
49187: PUSH
49188: LD_VAR 0 4
49192: ARRAY
49193: ST_TO_ADDR
// dist := tdist ;
49194: LD_ADDR_VAR 0 5
49198: PUSH
49199: LD_VAR 0 6
49203: ST_TO_ADDR
// end ; end ;
49204: GO 49118
49206: POP
49207: POP
// result := hex ;
49208: LD_ADDR_VAR 0 3
49212: PUSH
49213: LD_VAR 0 8
49217: ST_TO_ADDR
// end ;
49218: LD_VAR 0 3
49222: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49223: LD_INT 0
49225: PPUSH
49226: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49227: LD_VAR 0 1
49231: NOT
49232: IFTRUE 49271
49234: PUSH
49235: LD_VAR 0 1
49239: PUSH
49240: LD_INT 21
49242: PUSH
49243: LD_INT 2
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 23
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PPUSH
49264: CALL_OW 69
49268: IN
49269: NOT
49270: OR
49271: IFFALSE 49275
// exit ;
49273: GO 49322
// for i = 1 to 3 do
49275: LD_ADDR_VAR 0 3
49279: PUSH
49280: DOUBLE
49281: LD_INT 1
49283: DEC
49284: ST_TO_ADDR
49285: LD_INT 3
49287: PUSH
49288: FOR_TO
49289: IFFALSE 49320
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49291: LD_VAR 0 1
49295: PPUSH
49296: CALL_OW 250
49300: PPUSH
49301: LD_VAR 0 1
49305: PPUSH
49306: CALL_OW 251
49310: PPUSH
49311: LD_INT 1
49313: PPUSH
49314: CALL_OW 453
49318: GO 49288
49320: POP
49321: POP
// end ;
49322: LD_VAR 0 2
49326: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49327: LD_INT 0
49329: PPUSH
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
// if not unit or not enemy_unit then
49335: LD_VAR 0 1
49339: NOT
49340: IFTRUE 49349
49342: PUSH
49343: LD_VAR 0 2
49347: NOT
49348: OR
49349: IFFALSE 49353
// exit ;
49351: GO 49824
// if GetLives ( i ) < 250 then
49353: LD_VAR 0 4
49357: PPUSH
49358: CALL_OW 256
49362: PUSH
49363: LD_INT 250
49365: LESS
49366: IFFALSE 49379
// begin ComAutodestruct ( i ) ;
49368: LD_VAR 0 4
49372: PPUSH
49373: CALL 49223 0 1
// exit ;
49377: GO 49824
// end ; x := GetX ( enemy_unit ) ;
49379: LD_ADDR_VAR 0 7
49383: PUSH
49384: LD_VAR 0 2
49388: PPUSH
49389: CALL_OW 250
49393: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49394: LD_ADDR_VAR 0 8
49398: PUSH
49399: LD_VAR 0 2
49403: PPUSH
49404: CALL_OW 251
49408: ST_TO_ADDR
// if not x or not y then
49409: LD_VAR 0 7
49413: NOT
49414: IFTRUE 49423
49416: PUSH
49417: LD_VAR 0 8
49421: NOT
49422: OR
49423: IFFALSE 49427
// exit ;
49425: GO 49824
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49427: LD_ADDR_VAR 0 6
49431: PUSH
49432: LD_VAR 0 7
49436: PPUSH
49437: LD_INT 0
49439: PPUSH
49440: LD_INT 4
49442: PPUSH
49443: CALL_OW 272
49447: PUSH
49448: LD_VAR 0 8
49452: PPUSH
49453: LD_INT 0
49455: PPUSH
49456: LD_INT 4
49458: PPUSH
49459: CALL_OW 273
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_VAR 0 7
49472: PPUSH
49473: LD_INT 1
49475: PPUSH
49476: LD_INT 4
49478: PPUSH
49479: CALL_OW 272
49483: PUSH
49484: LD_VAR 0 8
49488: PPUSH
49489: LD_INT 1
49491: PPUSH
49492: LD_INT 4
49494: PPUSH
49495: CALL_OW 273
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_VAR 0 7
49508: PPUSH
49509: LD_INT 2
49511: PPUSH
49512: LD_INT 4
49514: PPUSH
49515: CALL_OW 272
49519: PUSH
49520: LD_VAR 0 8
49524: PPUSH
49525: LD_INT 2
49527: PPUSH
49528: LD_INT 4
49530: PPUSH
49531: CALL_OW 273
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_VAR 0 7
49544: PPUSH
49545: LD_INT 3
49547: PPUSH
49548: LD_INT 4
49550: PPUSH
49551: CALL_OW 272
49555: PUSH
49556: LD_VAR 0 8
49560: PPUSH
49561: LD_INT 3
49563: PPUSH
49564: LD_INT 4
49566: PPUSH
49567: CALL_OW 273
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_VAR 0 7
49580: PPUSH
49581: LD_INT 4
49583: PPUSH
49584: LD_INT 4
49586: PPUSH
49587: CALL_OW 272
49591: PUSH
49592: LD_VAR 0 8
49596: PPUSH
49597: LD_INT 4
49599: PPUSH
49600: LD_INT 4
49602: PPUSH
49603: CALL_OW 273
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_VAR 0 7
49616: PPUSH
49617: LD_INT 5
49619: PPUSH
49620: LD_INT 4
49622: PPUSH
49623: CALL_OW 272
49627: PUSH
49628: LD_VAR 0 8
49632: PPUSH
49633: LD_INT 5
49635: PPUSH
49636: LD_INT 4
49638: PPUSH
49639: CALL_OW 273
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: ST_TO_ADDR
// for i = tmp downto 1 do
49656: LD_ADDR_VAR 0 4
49660: PUSH
49661: DOUBLE
49662: LD_VAR 0 6
49666: INC
49667: ST_TO_ADDR
49668: LD_INT 1
49670: PUSH
49671: FOR_DOWNTO
49672: IFFALSE 49775
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49674: LD_VAR 0 6
49678: PUSH
49679: LD_VAR 0 4
49683: ARRAY
49684: PUSH
49685: LD_INT 1
49687: ARRAY
49688: PPUSH
49689: LD_VAR 0 6
49693: PUSH
49694: LD_VAR 0 4
49698: ARRAY
49699: PUSH
49700: LD_INT 2
49702: ARRAY
49703: PPUSH
49704: CALL_OW 488
49708: NOT
49709: IFTRUE 49751
49711: PUSH
49712: LD_VAR 0 6
49716: PUSH
49717: LD_VAR 0 4
49721: ARRAY
49722: PUSH
49723: LD_INT 1
49725: ARRAY
49726: PPUSH
49727: LD_VAR 0 6
49731: PUSH
49732: LD_VAR 0 4
49736: ARRAY
49737: PUSH
49738: LD_INT 2
49740: ARRAY
49741: PPUSH
49742: CALL_OW 428
49746: PUSH
49747: LD_INT 0
49749: NONEQUAL
49750: OR
49751: IFFALSE 49773
// tmp := Delete ( tmp , i ) ;
49753: LD_ADDR_VAR 0 6
49757: PUSH
49758: LD_VAR 0 6
49762: PPUSH
49763: LD_VAR 0 4
49767: PPUSH
49768: CALL_OW 3
49772: ST_TO_ADDR
49773: GO 49671
49775: POP
49776: POP
// j := GetClosestHex ( unit , tmp ) ;
49777: LD_ADDR_VAR 0 5
49781: PUSH
49782: LD_VAR 0 1
49786: PPUSH
49787: LD_VAR 0 6
49791: PPUSH
49792: CALL 49069 0 2
49796: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49797: LD_VAR 0 1
49801: PPUSH
49802: LD_VAR 0 5
49806: PUSH
49807: LD_INT 1
49809: ARRAY
49810: PPUSH
49811: LD_VAR 0 5
49815: PUSH
49816: LD_INT 2
49818: ARRAY
49819: PPUSH
49820: CALL_OW 111
// end ;
49824: LD_VAR 0 3
49828: RET
// export function PrepareApemanSoldier ( ) ; begin
49829: LD_INT 0
49831: PPUSH
// uc_nation := 0 ;
49832: LD_ADDR_OWVAR 21
49836: PUSH
49837: LD_INT 0
49839: ST_TO_ADDR
// hc_sex := sex_male ;
49840: LD_ADDR_OWVAR 27
49844: PUSH
49845: LD_INT 1
49847: ST_TO_ADDR
// hc_name :=  ;
49848: LD_ADDR_OWVAR 26
49852: PUSH
49853: LD_STRING 
49855: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49856: LD_ADDR_OWVAR 28
49860: PUSH
49861: LD_INT 15
49863: ST_TO_ADDR
// hc_gallery :=  ;
49864: LD_ADDR_OWVAR 33
49868: PUSH
49869: LD_STRING 
49871: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49872: LD_ADDR_OWVAR 31
49876: PUSH
49877: LD_INT 0
49879: PPUSH
49880: LD_INT 3
49882: PPUSH
49883: CALL_OW 12
49887: PUSH
49888: LD_INT 0
49890: PPUSH
49891: LD_INT 3
49893: PPUSH
49894: CALL_OW 12
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
49911: LD_ADDR_OWVAR 29
49915: PUSH
49916: LD_INT 12
49918: PUSH
49919: LD_INT 12
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// end ;
49926: LD_VAR 0 1
49930: RET
// export function PrepareApemanEngineer ( ) ; begin
49931: LD_INT 0
49933: PPUSH
// uc_nation := 0 ;
49934: LD_ADDR_OWVAR 21
49938: PUSH
49939: LD_INT 0
49941: ST_TO_ADDR
// hc_sex := sex_male ;
49942: LD_ADDR_OWVAR 27
49946: PUSH
49947: LD_INT 1
49949: ST_TO_ADDR
// hc_name :=  ;
49950: LD_ADDR_OWVAR 26
49954: PUSH
49955: LD_STRING 
49957: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49958: LD_ADDR_OWVAR 28
49962: PUSH
49963: LD_INT 16
49965: ST_TO_ADDR
// hc_gallery :=  ;
49966: LD_ADDR_OWVAR 33
49970: PUSH
49971: LD_STRING 
49973: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49974: LD_ADDR_OWVAR 31
49978: PUSH
49979: LD_INT 0
49981: PPUSH
49982: LD_INT 3
49984: PPUSH
49985: CALL_OW 12
49989: PUSH
49990: LD_INT 0
49992: PPUSH
49993: LD_INT 3
49995: PPUSH
49996: CALL_OW 12
50000: PUSH
50001: LD_INT 0
50003: PUSH
50004: LD_INT 0
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50013: LD_ADDR_OWVAR 29
50017: PUSH
50018: LD_INT 12
50020: PUSH
50021: LD_INT 12
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: ST_TO_ADDR
// end ;
50028: LD_VAR 0 1
50032: RET
// export function PrepareApeman ( agressivity ) ; begin
50033: LD_INT 0
50035: PPUSH
// uc_side := 0 ;
50036: LD_ADDR_OWVAR 20
50040: PUSH
50041: LD_INT 0
50043: ST_TO_ADDR
// uc_nation := 0 ;
50044: LD_ADDR_OWVAR 21
50048: PUSH
50049: LD_INT 0
50051: ST_TO_ADDR
// hc_sex := sex_male ;
50052: LD_ADDR_OWVAR 27
50056: PUSH
50057: LD_INT 1
50059: ST_TO_ADDR
// hc_class := class_apeman ;
50060: LD_ADDR_OWVAR 28
50064: PUSH
50065: LD_INT 12
50067: ST_TO_ADDR
// hc_gallery :=  ;
50068: LD_ADDR_OWVAR 33
50072: PUSH
50073: LD_STRING 
50075: ST_TO_ADDR
// hc_name :=  ;
50076: LD_ADDR_OWVAR 26
50080: PUSH
50081: LD_STRING 
50083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
50084: LD_ADDR_OWVAR 29
50088: PUSH
50089: LD_INT 12
50091: PUSH
50092: LD_INT 12
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// if agressivity = 0 then
50099: LD_VAR 0 1
50103: PUSH
50104: LD_INT 0
50106: EQUAL
50107: IFFALSE 50119
// hc_agressivity := 0 else
50109: LD_ADDR_OWVAR 35
50113: PUSH
50114: LD_INT 0
50116: ST_TO_ADDR
50117: GO 50140
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50119: LD_ADDR_OWVAR 35
50123: PUSH
50124: LD_VAR 0 1
50128: NEG
50129: PPUSH
50130: LD_VAR 0 1
50134: PPUSH
50135: CALL_OW 12
50139: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50140: LD_ADDR_OWVAR 31
50144: PUSH
50145: LD_INT 0
50147: PPUSH
50148: LD_INT 3
50150: PPUSH
50151: CALL_OW 12
50155: PUSH
50156: LD_INT 0
50158: PPUSH
50159: LD_INT 3
50161: PPUSH
50162: CALL_OW 12
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: ST_TO_ADDR
// end ;
50179: LD_VAR 0 2
50183: RET
// export function PrepareTiger ( agressivity ) ; begin
50184: LD_INT 0
50186: PPUSH
// uc_side := 0 ;
50187: LD_ADDR_OWVAR 20
50191: PUSH
50192: LD_INT 0
50194: ST_TO_ADDR
// uc_nation := 0 ;
50195: LD_ADDR_OWVAR 21
50199: PUSH
50200: LD_INT 0
50202: ST_TO_ADDR
// InitHc ;
50203: CALL_OW 19
// hc_class := class_tiger ;
50207: LD_ADDR_OWVAR 28
50211: PUSH
50212: LD_INT 14
50214: ST_TO_ADDR
// hc_gallery :=  ;
50215: LD_ADDR_OWVAR 33
50219: PUSH
50220: LD_STRING 
50222: ST_TO_ADDR
// hc_name :=  ;
50223: LD_ADDR_OWVAR 26
50227: PUSH
50228: LD_STRING 
50230: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50231: LD_ADDR_OWVAR 35
50235: PUSH
50236: LD_VAR 0 1
50240: NEG
50241: PPUSH
50242: LD_VAR 0 1
50246: PPUSH
50247: CALL_OW 12
50251: ST_TO_ADDR
// end ;
50252: LD_VAR 0 2
50256: RET
// export function PrepareEnchidna ( ) ; begin
50257: LD_INT 0
50259: PPUSH
// uc_side := 0 ;
50260: LD_ADDR_OWVAR 20
50264: PUSH
50265: LD_INT 0
50267: ST_TO_ADDR
// uc_nation := 0 ;
50268: LD_ADDR_OWVAR 21
50272: PUSH
50273: LD_INT 0
50275: ST_TO_ADDR
// InitHc ;
50276: CALL_OW 19
// hc_class := class_baggie ;
50280: LD_ADDR_OWVAR 28
50284: PUSH
50285: LD_INT 13
50287: ST_TO_ADDR
// hc_gallery :=  ;
50288: LD_ADDR_OWVAR 33
50292: PUSH
50293: LD_STRING 
50295: ST_TO_ADDR
// hc_name :=  ;
50296: LD_ADDR_OWVAR 26
50300: PUSH
50301: LD_STRING 
50303: ST_TO_ADDR
// end ;
50304: LD_VAR 0 1
50308: RET
// export function PrepareFrog ( ) ; begin
50309: LD_INT 0
50311: PPUSH
// uc_side := 0 ;
50312: LD_ADDR_OWVAR 20
50316: PUSH
50317: LD_INT 0
50319: ST_TO_ADDR
// uc_nation := 0 ;
50320: LD_ADDR_OWVAR 21
50324: PUSH
50325: LD_INT 0
50327: ST_TO_ADDR
// InitHc ;
50328: CALL_OW 19
// hc_class := class_frog ;
50332: LD_ADDR_OWVAR 28
50336: PUSH
50337: LD_INT 19
50339: ST_TO_ADDR
// hc_gallery :=  ;
50340: LD_ADDR_OWVAR 33
50344: PUSH
50345: LD_STRING 
50347: ST_TO_ADDR
// hc_name :=  ;
50348: LD_ADDR_OWVAR 26
50352: PUSH
50353: LD_STRING 
50355: ST_TO_ADDR
// end ;
50356: LD_VAR 0 1
50360: RET
// export function PrepareFish ( ) ; begin
50361: LD_INT 0
50363: PPUSH
// uc_side := 0 ;
50364: LD_ADDR_OWVAR 20
50368: PUSH
50369: LD_INT 0
50371: ST_TO_ADDR
// uc_nation := 0 ;
50372: LD_ADDR_OWVAR 21
50376: PUSH
50377: LD_INT 0
50379: ST_TO_ADDR
// InitHc ;
50380: CALL_OW 19
// hc_class := class_fish ;
50384: LD_ADDR_OWVAR 28
50388: PUSH
50389: LD_INT 20
50391: ST_TO_ADDR
// hc_gallery :=  ;
50392: LD_ADDR_OWVAR 33
50396: PUSH
50397: LD_STRING 
50399: ST_TO_ADDR
// hc_name :=  ;
50400: LD_ADDR_OWVAR 26
50404: PUSH
50405: LD_STRING 
50407: ST_TO_ADDR
// end ;
50408: LD_VAR 0 1
50412: RET
// export function PrepareBird ( ) ; begin
50413: LD_INT 0
50415: PPUSH
// uc_side := 0 ;
50416: LD_ADDR_OWVAR 20
50420: PUSH
50421: LD_INT 0
50423: ST_TO_ADDR
// uc_nation := 0 ;
50424: LD_ADDR_OWVAR 21
50428: PUSH
50429: LD_INT 0
50431: ST_TO_ADDR
// InitHc ;
50432: CALL_OW 19
// hc_class := class_phororhacos ;
50436: LD_ADDR_OWVAR 28
50440: PUSH
50441: LD_INT 18
50443: ST_TO_ADDR
// hc_gallery :=  ;
50444: LD_ADDR_OWVAR 33
50448: PUSH
50449: LD_STRING 
50451: ST_TO_ADDR
// hc_name :=  ;
50452: LD_ADDR_OWVAR 26
50456: PUSH
50457: LD_STRING 
50459: ST_TO_ADDR
// end ;
50460: LD_VAR 0 1
50464: RET
// export function PrepareHorse ( ) ; begin
50465: LD_INT 0
50467: PPUSH
// uc_side := 0 ;
50468: LD_ADDR_OWVAR 20
50472: PUSH
50473: LD_INT 0
50475: ST_TO_ADDR
// uc_nation := 0 ;
50476: LD_ADDR_OWVAR 21
50480: PUSH
50481: LD_INT 0
50483: ST_TO_ADDR
// InitHc ;
50484: CALL_OW 19
// hc_class := class_horse ;
50488: LD_ADDR_OWVAR 28
50492: PUSH
50493: LD_INT 21
50495: ST_TO_ADDR
// hc_gallery :=  ;
50496: LD_ADDR_OWVAR 33
50500: PUSH
50501: LD_STRING 
50503: ST_TO_ADDR
// hc_name :=  ;
50504: LD_ADDR_OWVAR 26
50508: PUSH
50509: LD_STRING 
50511: ST_TO_ADDR
// end ;
50512: LD_VAR 0 1
50516: RET
// export function PrepareMastodont ( ) ; begin
50517: LD_INT 0
50519: PPUSH
// uc_side := 0 ;
50520: LD_ADDR_OWVAR 20
50524: PUSH
50525: LD_INT 0
50527: ST_TO_ADDR
// uc_nation := 0 ;
50528: LD_ADDR_OWVAR 21
50532: PUSH
50533: LD_INT 0
50535: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50536: LD_ADDR_OWVAR 37
50540: PUSH
50541: LD_INT 31
50543: ST_TO_ADDR
// vc_control := control_rider ;
50544: LD_ADDR_OWVAR 38
50548: PUSH
50549: LD_INT 4
50551: ST_TO_ADDR
// end ;
50552: LD_VAR 0 1
50556: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50557: LD_INT 0
50559: PPUSH
50560: PPUSH
50561: PPUSH
// uc_side = 0 ;
50562: LD_ADDR_OWVAR 20
50566: PUSH
50567: LD_INT 0
50569: ST_TO_ADDR
// uc_nation = 0 ;
50570: LD_ADDR_OWVAR 21
50574: PUSH
50575: LD_INT 0
50577: ST_TO_ADDR
// InitHc_All ( ) ;
50578: CALL_OW 584
// InitVc ;
50582: CALL_OW 20
// if mastodonts then
50586: LD_VAR 0 6
50590: IFFALSE 50657
// for i = 1 to mastodonts do
50592: LD_ADDR_VAR 0 11
50596: PUSH
50597: DOUBLE
50598: LD_INT 1
50600: DEC
50601: ST_TO_ADDR
50602: LD_VAR 0 6
50606: PUSH
50607: FOR_TO
50608: IFFALSE 50655
// begin vc_chassis := 31 ;
50610: LD_ADDR_OWVAR 37
50614: PUSH
50615: LD_INT 31
50617: ST_TO_ADDR
// vc_control := control_rider ;
50618: LD_ADDR_OWVAR 38
50622: PUSH
50623: LD_INT 4
50625: ST_TO_ADDR
// animal := CreateVehicle ;
50626: LD_ADDR_VAR 0 12
50630: PUSH
50631: CALL_OW 45
50635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50636: LD_VAR 0 12
50640: PPUSH
50641: LD_VAR 0 8
50645: PPUSH
50646: LD_INT 0
50648: PPUSH
50649: CALL 52799 0 3
// end ;
50653: GO 50607
50655: POP
50656: POP
// if horses then
50657: LD_VAR 0 5
50661: IFFALSE 50728
// for i = 1 to horses do
50663: LD_ADDR_VAR 0 11
50667: PUSH
50668: DOUBLE
50669: LD_INT 1
50671: DEC
50672: ST_TO_ADDR
50673: LD_VAR 0 5
50677: PUSH
50678: FOR_TO
50679: IFFALSE 50726
// begin hc_class := 21 ;
50681: LD_ADDR_OWVAR 28
50685: PUSH
50686: LD_INT 21
50688: ST_TO_ADDR
// hc_gallery :=  ;
50689: LD_ADDR_OWVAR 33
50693: PUSH
50694: LD_STRING 
50696: ST_TO_ADDR
// animal := CreateHuman ;
50697: LD_ADDR_VAR 0 12
50701: PUSH
50702: CALL_OW 44
50706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50707: LD_VAR 0 12
50711: PPUSH
50712: LD_VAR 0 8
50716: PPUSH
50717: LD_INT 0
50719: PPUSH
50720: CALL 52799 0 3
// end ;
50724: GO 50678
50726: POP
50727: POP
// if birds then
50728: LD_VAR 0 1
50732: IFFALSE 50799
// for i = 1 to birds do
50734: LD_ADDR_VAR 0 11
50738: PUSH
50739: DOUBLE
50740: LD_INT 1
50742: DEC
50743: ST_TO_ADDR
50744: LD_VAR 0 1
50748: PUSH
50749: FOR_TO
50750: IFFALSE 50797
// begin hc_class := 18 ;
50752: LD_ADDR_OWVAR 28
50756: PUSH
50757: LD_INT 18
50759: ST_TO_ADDR
// hc_gallery =  ;
50760: LD_ADDR_OWVAR 33
50764: PUSH
50765: LD_STRING 
50767: ST_TO_ADDR
// animal := CreateHuman ;
50768: LD_ADDR_VAR 0 12
50772: PUSH
50773: CALL_OW 44
50777: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50778: LD_VAR 0 12
50782: PPUSH
50783: LD_VAR 0 8
50787: PPUSH
50788: LD_INT 0
50790: PPUSH
50791: CALL 52799 0 3
// end ;
50795: GO 50749
50797: POP
50798: POP
// if tigers then
50799: LD_VAR 0 2
50803: IFFALSE 50887
// for i = 1 to tigers do
50805: LD_ADDR_VAR 0 11
50809: PUSH
50810: DOUBLE
50811: LD_INT 1
50813: DEC
50814: ST_TO_ADDR
50815: LD_VAR 0 2
50819: PUSH
50820: FOR_TO
50821: IFFALSE 50885
// begin hc_class = class_tiger ;
50823: LD_ADDR_OWVAR 28
50827: PUSH
50828: LD_INT 14
50830: ST_TO_ADDR
// hc_gallery =  ;
50831: LD_ADDR_OWVAR 33
50835: PUSH
50836: LD_STRING 
50838: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50839: LD_ADDR_OWVAR 35
50843: PUSH
50844: LD_INT 7
50846: NEG
50847: PPUSH
50848: LD_INT 7
50850: PPUSH
50851: CALL_OW 12
50855: ST_TO_ADDR
// animal := CreateHuman ;
50856: LD_ADDR_VAR 0 12
50860: PUSH
50861: CALL_OW 44
50865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50866: LD_VAR 0 12
50870: PPUSH
50871: LD_VAR 0 8
50875: PPUSH
50876: LD_INT 0
50878: PPUSH
50879: CALL 52799 0 3
// end ;
50883: GO 50820
50885: POP
50886: POP
// if apemans then
50887: LD_VAR 0 3
50891: IFFALSE 51014
// for i = 1 to apemans do
50893: LD_ADDR_VAR 0 11
50897: PUSH
50898: DOUBLE
50899: LD_INT 1
50901: DEC
50902: ST_TO_ADDR
50903: LD_VAR 0 3
50907: PUSH
50908: FOR_TO
50909: IFFALSE 51012
// begin hc_class = class_apeman ;
50911: LD_ADDR_OWVAR 28
50915: PUSH
50916: LD_INT 12
50918: ST_TO_ADDR
// hc_gallery =  ;
50919: LD_ADDR_OWVAR 33
50923: PUSH
50924: LD_STRING 
50926: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50927: LD_ADDR_OWVAR 35
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PPUSH
50936: LD_INT 2
50938: PPUSH
50939: CALL_OW 12
50943: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50944: LD_ADDR_OWVAR 31
50948: PUSH
50949: LD_INT 1
50951: PPUSH
50952: LD_INT 3
50954: PPUSH
50955: CALL_OW 12
50959: PUSH
50960: LD_INT 1
50962: PPUSH
50963: LD_INT 3
50965: PPUSH
50966: CALL_OW 12
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: ST_TO_ADDR
// animal := CreateHuman ;
50983: LD_ADDR_VAR 0 12
50987: PUSH
50988: CALL_OW 44
50992: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50993: LD_VAR 0 12
50997: PPUSH
50998: LD_VAR 0 8
51002: PPUSH
51003: LD_INT 0
51005: PPUSH
51006: CALL 52799 0 3
// end ;
51010: GO 50908
51012: POP
51013: POP
// if enchidnas then
51014: LD_VAR 0 4
51018: IFFALSE 51085
// for i = 1 to enchidnas do
51020: LD_ADDR_VAR 0 11
51024: PUSH
51025: DOUBLE
51026: LD_INT 1
51028: DEC
51029: ST_TO_ADDR
51030: LD_VAR 0 4
51034: PUSH
51035: FOR_TO
51036: IFFALSE 51083
// begin hc_class = 13 ;
51038: LD_ADDR_OWVAR 28
51042: PUSH
51043: LD_INT 13
51045: ST_TO_ADDR
// hc_gallery =  ;
51046: LD_ADDR_OWVAR 33
51050: PUSH
51051: LD_STRING 
51053: ST_TO_ADDR
// animal := CreateHuman ;
51054: LD_ADDR_VAR 0 12
51058: PUSH
51059: CALL_OW 44
51063: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51064: LD_VAR 0 12
51068: PPUSH
51069: LD_VAR 0 8
51073: PPUSH
51074: LD_INT 0
51076: PPUSH
51077: CALL 52799 0 3
// end ;
51081: GO 51035
51083: POP
51084: POP
// if fishes then
51085: LD_VAR 0 7
51089: IFFALSE 51156
// for i = 1 to fishes do
51091: LD_ADDR_VAR 0 11
51095: PUSH
51096: DOUBLE
51097: LD_INT 1
51099: DEC
51100: ST_TO_ADDR
51101: LD_VAR 0 7
51105: PUSH
51106: FOR_TO
51107: IFFALSE 51154
// begin hc_class = 20 ;
51109: LD_ADDR_OWVAR 28
51113: PUSH
51114: LD_INT 20
51116: ST_TO_ADDR
// hc_gallery =  ;
51117: LD_ADDR_OWVAR 33
51121: PUSH
51122: LD_STRING 
51124: ST_TO_ADDR
// animal := CreateHuman ;
51125: LD_ADDR_VAR 0 12
51129: PUSH
51130: CALL_OW 44
51134: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51135: LD_VAR 0 12
51139: PPUSH
51140: LD_VAR 0 9
51144: PPUSH
51145: LD_INT 0
51147: PPUSH
51148: CALL 52799 0 3
// end ;
51152: GO 51106
51154: POP
51155: POP
// end ;
51156: LD_VAR 0 10
51160: RET
// export function WantHeal ( sci , unit ) ; begin
51161: LD_INT 0
51163: PPUSH
// if GetTaskList ( sci ) > 0 then
51164: LD_VAR 0 1
51168: PPUSH
51169: CALL_OW 437
51173: PUSH
51174: LD_INT 0
51176: GREATER
51177: IFFALSE 51249
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 437
51188: PUSH
51189: LD_INT 1
51191: ARRAY
51192: PUSH
51193: LD_INT 1
51195: ARRAY
51196: PUSH
51197: LD_STRING l
51199: EQUAL
51200: IFFALSE 51227
51202: PUSH
51203: LD_VAR 0 1
51207: PPUSH
51208: CALL_OW 437
51212: PUSH
51213: LD_INT 1
51215: ARRAY
51216: PUSH
51217: LD_INT 4
51219: ARRAY
51220: PUSH
51221: LD_VAR 0 2
51225: EQUAL
51226: AND
51227: IFFALSE 51239
// result := true else
51229: LD_ADDR_VAR 0 3
51233: PUSH
51234: LD_INT 1
51236: ST_TO_ADDR
51237: GO 51247
// result := false ;
51239: LD_ADDR_VAR 0 3
51243: PUSH
51244: LD_INT 0
51246: ST_TO_ADDR
// end else
51247: GO 51257
// result := false ;
51249: LD_ADDR_VAR 0 3
51253: PUSH
51254: LD_INT 0
51256: ST_TO_ADDR
// end ;
51257: LD_VAR 0 3
51261: RET
// export function HealTarget ( sci ) ; begin
51262: LD_INT 0
51264: PPUSH
// if not sci then
51265: LD_VAR 0 1
51269: NOT
51270: IFFALSE 51274
// exit ;
51272: GO 51339
// result := 0 ;
51274: LD_ADDR_VAR 0 2
51278: PUSH
51279: LD_INT 0
51281: ST_TO_ADDR
// if GetTaskList ( sci ) then
51282: LD_VAR 0 1
51286: PPUSH
51287: CALL_OW 437
51291: IFFALSE 51339
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51293: LD_VAR 0 1
51297: PPUSH
51298: CALL_OW 437
51302: PUSH
51303: LD_INT 1
51305: ARRAY
51306: PUSH
51307: LD_INT 1
51309: ARRAY
51310: PUSH
51311: LD_STRING l
51313: EQUAL
51314: IFFALSE 51339
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51316: LD_ADDR_VAR 0 2
51320: PUSH
51321: LD_VAR 0 1
51325: PPUSH
51326: CALL_OW 437
51330: PUSH
51331: LD_INT 1
51333: ARRAY
51334: PUSH
51335: LD_INT 4
51337: ARRAY
51338: ST_TO_ADDR
// end ;
51339: LD_VAR 0 2
51343: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51344: LD_INT 0
51346: PPUSH
51347: PPUSH
51348: PPUSH
51349: PPUSH
// if not base_units then
51350: LD_VAR 0 1
51354: NOT
51355: IFFALSE 51359
// exit ;
51357: GO 51446
// result := false ;
51359: LD_ADDR_VAR 0 2
51363: PUSH
51364: LD_INT 0
51366: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51367: LD_ADDR_VAR 0 5
51371: PUSH
51372: LD_VAR 0 1
51376: PPUSH
51377: LD_INT 21
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PPUSH
51387: CALL_OW 72
51391: ST_TO_ADDR
// if not tmp then
51392: LD_VAR 0 5
51396: NOT
51397: IFFALSE 51401
// exit ;
51399: GO 51446
// for i in tmp do
51401: LD_ADDR_VAR 0 3
51405: PUSH
51406: LD_VAR 0 5
51410: PUSH
51411: FOR_IN
51412: IFFALSE 51444
// begin result := EnemyInRange ( i , 22 ) ;
51414: LD_ADDR_VAR 0 2
51418: PUSH
51419: LD_VAR 0 3
51423: PPUSH
51424: LD_INT 22
51426: PPUSH
51427: CALL 48871 0 2
51431: ST_TO_ADDR
// if result then
51432: LD_VAR 0 2
51436: IFFALSE 51442
// exit ;
51438: POP
51439: POP
51440: GO 51446
// end ;
51442: GO 51411
51444: POP
51445: POP
// end ;
51446: LD_VAR 0 2
51450: RET
// export function FilterByTag ( units , tag ) ; begin
51451: LD_INT 0
51453: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51454: LD_ADDR_VAR 0 3
51458: PUSH
51459: LD_VAR 0 1
51463: PPUSH
51464: LD_INT 120
51466: PUSH
51467: LD_VAR 0 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PPUSH
51476: CALL_OW 72
51480: ST_TO_ADDR
// end ;
51481: LD_VAR 0 3
51485: RET
// export function IsDriver ( un ) ; begin
51486: LD_INT 0
51488: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51489: LD_ADDR_VAR 0 2
51493: PUSH
51494: LD_VAR 0 1
51498: PUSH
51499: LD_INT 55
51501: PUSH
51502: EMPTY
51503: LIST
51504: PPUSH
51505: CALL_OW 69
51509: IN
51510: ST_TO_ADDR
// end ;
51511: LD_VAR 0 2
51515: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51516: LD_INT 0
51518: PPUSH
51519: PPUSH
// list := [ ] ;
51520: LD_ADDR_VAR 0 5
51524: PUSH
51525: EMPTY
51526: ST_TO_ADDR
// case d of 0 :
51527: LD_VAR 0 3
51531: PUSH
51532: LD_INT 0
51534: DOUBLE
51535: EQUAL
51536: IFTRUE 51540
51538: GO 51673
51540: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51541: LD_ADDR_VAR 0 5
51545: PUSH
51546: LD_VAR 0 1
51550: PUSH
51551: LD_INT 4
51553: MINUS
51554: PUSH
51555: LD_VAR 0 2
51559: PUSH
51560: LD_INT 4
51562: MINUS
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: PUSH
51572: LD_VAR 0 1
51576: PUSH
51577: LD_INT 3
51579: MINUS
51580: PUSH
51581: LD_VAR 0 2
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: LIST
51593: PUSH
51594: LD_VAR 0 1
51598: PUSH
51599: LD_INT 4
51601: PLUS
51602: PUSH
51603: LD_VAR 0 2
51607: PUSH
51608: LD_INT 4
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: PUSH
51616: LD_VAR 0 1
51620: PUSH
51621: LD_INT 3
51623: PLUS
51624: PUSH
51625: LD_VAR 0 2
51629: PUSH
51630: LD_INT 3
51632: PLUS
51633: PUSH
51634: LD_INT 5
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: LIST
51641: PUSH
51642: LD_VAR 0 1
51646: PUSH
51647: LD_VAR 0 2
51651: PUSH
51652: LD_INT 4
51654: PLUS
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: LIST
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// end ; 1 :
51671: GO 52371
51673: LD_INT 1
51675: DOUBLE
51676: EQUAL
51677: IFTRUE 51681
51679: GO 51814
51681: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51682: LD_ADDR_VAR 0 5
51686: PUSH
51687: LD_VAR 0 1
51691: PUSH
51692: LD_VAR 0 2
51696: PUSH
51697: LD_INT 4
51699: MINUS
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: PUSH
51709: LD_VAR 0 1
51713: PUSH
51714: LD_INT 3
51716: MINUS
51717: PUSH
51718: LD_VAR 0 2
51722: PUSH
51723: LD_INT 3
51725: MINUS
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: LIST
51734: PUSH
51735: LD_VAR 0 1
51739: PUSH
51740: LD_INT 4
51742: MINUS
51743: PUSH
51744: LD_VAR 0 2
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: LD_VAR 0 1
51761: PUSH
51762: LD_VAR 0 2
51766: PUSH
51767: LD_INT 3
51769: PLUS
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: PUSH
51779: LD_VAR 0 1
51783: PUSH
51784: LD_INT 4
51786: PLUS
51787: PUSH
51788: LD_VAR 0 2
51792: PUSH
51793: LD_INT 4
51795: PLUS
51796: PUSH
51797: LD_INT 5
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: ST_TO_ADDR
// end ; 2 :
51812: GO 52371
51814: LD_INT 2
51816: DOUBLE
51817: EQUAL
51818: IFTRUE 51822
51820: GO 51951
51822: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51823: LD_ADDR_VAR 0 5
51827: PUSH
51828: LD_VAR 0 1
51832: PUSH
51833: LD_VAR 0 2
51837: PUSH
51838: LD_INT 3
51840: MINUS
51841: PUSH
51842: LD_INT 3
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: LIST
51849: PUSH
51850: LD_VAR 0 1
51854: PUSH
51855: LD_INT 4
51857: PLUS
51858: PUSH
51859: LD_VAR 0 2
51863: PUSH
51864: LD_INT 4
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: PUSH
51872: LD_VAR 0 1
51876: PUSH
51877: LD_VAR 0 2
51881: PUSH
51882: LD_INT 4
51884: PLUS
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: LIST
51893: PUSH
51894: LD_VAR 0 1
51898: PUSH
51899: LD_INT 3
51901: MINUS
51902: PUSH
51903: LD_VAR 0 2
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: PUSH
51916: LD_VAR 0 1
51920: PUSH
51921: LD_INT 4
51923: MINUS
51924: PUSH
51925: LD_VAR 0 2
51929: PUSH
51930: LD_INT 4
51932: MINUS
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// end ; 3 :
51949: GO 52371
51951: LD_INT 3
51953: DOUBLE
51954: EQUAL
51955: IFTRUE 51959
51957: GO 52092
51959: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51960: LD_ADDR_VAR 0 5
51964: PUSH
51965: LD_VAR 0 1
51969: PUSH
51970: LD_INT 3
51972: PLUS
51973: PUSH
51974: LD_VAR 0 2
51978: PUSH
51979: LD_INT 4
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: LIST
51986: PUSH
51987: LD_VAR 0 1
51991: PUSH
51992: LD_INT 4
51994: PLUS
51995: PUSH
51996: LD_VAR 0 2
52000: PUSH
52001: LD_INT 4
52003: PLUS
52004: PUSH
52005: LD_INT 5
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: PUSH
52013: LD_VAR 0 1
52017: PUSH
52018: LD_INT 4
52020: MINUS
52021: PUSH
52022: LD_VAR 0 2
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: PUSH
52035: LD_VAR 0 1
52039: PUSH
52040: LD_VAR 0 2
52044: PUSH
52045: LD_INT 4
52047: MINUS
52048: PUSH
52049: LD_INT 3
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: PUSH
52057: LD_VAR 0 1
52061: PUSH
52062: LD_INT 3
52064: MINUS
52065: PUSH
52066: LD_VAR 0 2
52070: PUSH
52071: LD_INT 3
52073: MINUS
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: ST_TO_ADDR
// end ; 4 :
52090: GO 52371
52092: LD_INT 4
52094: DOUBLE
52095: EQUAL
52096: IFTRUE 52100
52098: GO 52233
52100: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52101: LD_ADDR_VAR 0 5
52105: PUSH
52106: LD_VAR 0 1
52110: PUSH
52111: LD_VAR 0 2
52115: PUSH
52116: LD_INT 4
52118: PLUS
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: LIST
52127: PUSH
52128: LD_VAR 0 1
52132: PUSH
52133: LD_INT 3
52135: PLUS
52136: PUSH
52137: LD_VAR 0 2
52141: PUSH
52142: LD_INT 3
52144: PLUS
52145: PUSH
52146: LD_INT 5
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: PUSH
52154: LD_VAR 0 1
52158: PUSH
52159: LD_INT 4
52161: PLUS
52162: PUSH
52163: LD_VAR 0 2
52167: PUSH
52168: LD_INT 4
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: PUSH
52176: LD_VAR 0 1
52180: PUSH
52181: LD_VAR 0 2
52185: PUSH
52186: LD_INT 3
52188: MINUS
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: PUSH
52198: LD_VAR 0 1
52202: PUSH
52203: LD_INT 4
52205: MINUS
52206: PUSH
52207: LD_VAR 0 2
52211: PUSH
52212: LD_INT 4
52214: MINUS
52215: PUSH
52216: LD_INT 2
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: LIST
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: ST_TO_ADDR
// end ; 5 :
52231: GO 52371
52233: LD_INT 5
52235: DOUBLE
52236: EQUAL
52237: IFTRUE 52241
52239: GO 52370
52241: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52242: LD_ADDR_VAR 0 5
52246: PUSH
52247: LD_VAR 0 1
52251: PUSH
52252: LD_INT 4
52254: MINUS
52255: PUSH
52256: LD_VAR 0 2
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: PUSH
52269: LD_VAR 0 1
52273: PUSH
52274: LD_VAR 0 2
52278: PUSH
52279: LD_INT 4
52281: MINUS
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: LIST
52290: PUSH
52291: LD_VAR 0 1
52295: PUSH
52296: LD_INT 4
52298: PLUS
52299: PUSH
52300: LD_VAR 0 2
52304: PUSH
52305: LD_INT 4
52307: PLUS
52308: PUSH
52309: LD_INT 5
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: PUSH
52317: LD_VAR 0 1
52321: PUSH
52322: LD_INT 3
52324: PLUS
52325: PUSH
52326: LD_VAR 0 2
52330: PUSH
52331: LD_INT 4
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: PUSH
52339: LD_VAR 0 1
52343: PUSH
52344: LD_VAR 0 2
52348: PUSH
52349: LD_INT 3
52351: PLUS
52352: PUSH
52353: LD_INT 0
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: LIST
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: ST_TO_ADDR
// end ; end ;
52368: GO 52371
52370: POP
// result := list ;
52371: LD_ADDR_VAR 0 4
52375: PUSH
52376: LD_VAR 0 5
52380: ST_TO_ADDR
// end ;
52381: LD_VAR 0 4
52385: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52386: LD_INT 0
52388: PPUSH
52389: PPUSH
52390: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52391: LD_VAR 0 1
52395: NOT
52396: IFTRUE 52424
52398: PUSH
52399: LD_VAR 0 2
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 2
52409: PUSH
52410: LD_INT 3
52412: PUSH
52413: LD_INT 4
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: IN
52422: NOT
52423: OR
52424: IFFALSE 52428
// exit ;
52426: GO 52511
// tmp := [ ] ;
52428: LD_ADDR_VAR 0 5
52432: PUSH
52433: EMPTY
52434: ST_TO_ADDR
// for i in units do
52435: LD_ADDR_VAR 0 4
52439: PUSH
52440: LD_VAR 0 1
52444: PUSH
52445: FOR_IN
52446: IFFALSE 52480
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52448: LD_ADDR_VAR 0 5
52452: PUSH
52453: LD_VAR 0 5
52457: PPUSH
52458: LD_VAR 0 4
52462: PPUSH
52463: LD_VAR 0 2
52467: PPUSH
52468: CALL_OW 259
52472: PPUSH
52473: CALL 53906 0 2
52477: ST_TO_ADDR
52478: GO 52445
52480: POP
52481: POP
// if not tmp then
52482: LD_VAR 0 5
52486: NOT
52487: IFFALSE 52491
// exit ;
52489: GO 52511
// result := SortListByListDesc ( units , tmp ) ;
52491: LD_ADDR_VAR 0 3
52495: PUSH
52496: LD_VAR 0 1
52500: PPUSH
52501: LD_VAR 0 5
52505: PPUSH
52506: CALL_OW 77
52510: ST_TO_ADDR
// end ;
52511: LD_VAR 0 3
52515: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52516: LD_INT 0
52518: PPUSH
52519: PPUSH
52520: PPUSH
// result := false ;
52521: LD_ADDR_VAR 0 3
52525: PUSH
52526: LD_INT 0
52528: ST_TO_ADDR
// if not building then
52529: LD_VAR 0 2
52533: NOT
52534: IFFALSE 52538
// exit ;
52536: GO 52682
// x := GetX ( building ) ;
52538: LD_ADDR_VAR 0 4
52542: PUSH
52543: LD_VAR 0 2
52547: PPUSH
52548: CALL_OW 250
52552: ST_TO_ADDR
// y := GetY ( building ) ;
52553: LD_ADDR_VAR 0 5
52557: PUSH
52558: LD_VAR 0 2
52562: PPUSH
52563: CALL_OW 251
52567: ST_TO_ADDR
// if not x or not y then
52568: LD_VAR 0 4
52572: NOT
52573: IFTRUE 52582
52575: PUSH
52576: LD_VAR 0 5
52580: NOT
52581: OR
52582: IFFALSE 52586
// exit ;
52584: GO 52682
// if GetTaskList ( unit ) then
52586: LD_VAR 0 1
52590: PPUSH
52591: CALL_OW 437
52595: IFFALSE 52682
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52597: LD_STRING e
52599: PUSH
52600: LD_VAR 0 1
52604: PPUSH
52605: CALL_OW 437
52609: PUSH
52610: LD_INT 1
52612: ARRAY
52613: PUSH
52614: LD_INT 1
52616: ARRAY
52617: EQUAL
52618: IFFALSE 52645
52620: PUSH
52621: LD_VAR 0 4
52625: PUSH
52626: LD_VAR 0 1
52630: PPUSH
52631: CALL_OW 437
52635: PUSH
52636: LD_INT 1
52638: ARRAY
52639: PUSH
52640: LD_INT 2
52642: ARRAY
52643: EQUAL
52644: AND
52645: IFFALSE 52672
52647: PUSH
52648: LD_VAR 0 5
52652: PUSH
52653: LD_VAR 0 1
52657: PPUSH
52658: CALL_OW 437
52662: PUSH
52663: LD_INT 1
52665: ARRAY
52666: PUSH
52667: LD_INT 3
52669: ARRAY
52670: EQUAL
52671: AND
52672: IFFALSE 52682
// result := true end ;
52674: LD_ADDR_VAR 0 3
52678: PUSH
52679: LD_INT 1
52681: ST_TO_ADDR
// end ;
52682: LD_VAR 0 3
52686: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52687: LD_INT 0
52689: PPUSH
// result := false ;
52690: LD_ADDR_VAR 0 4
52694: PUSH
52695: LD_INT 0
52697: ST_TO_ADDR
// if GetTaskList ( unit ) then
52698: LD_VAR 0 1
52702: PPUSH
52703: CALL_OW 437
52707: IFFALSE 52794
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52709: LD_STRING M
52711: PUSH
52712: LD_VAR 0 1
52716: PPUSH
52717: CALL_OW 437
52721: PUSH
52722: LD_INT 1
52724: ARRAY
52725: PUSH
52726: LD_INT 1
52728: ARRAY
52729: EQUAL
52730: IFFALSE 52757
52732: PUSH
52733: LD_VAR 0 2
52737: PUSH
52738: LD_VAR 0 1
52742: PPUSH
52743: CALL_OW 437
52747: PUSH
52748: LD_INT 1
52750: ARRAY
52751: PUSH
52752: LD_INT 2
52754: ARRAY
52755: EQUAL
52756: AND
52757: IFFALSE 52784
52759: PUSH
52760: LD_VAR 0 3
52764: PUSH
52765: LD_VAR 0 1
52769: PPUSH
52770: CALL_OW 437
52774: PUSH
52775: LD_INT 1
52777: ARRAY
52778: PUSH
52779: LD_INT 3
52781: ARRAY
52782: EQUAL
52783: AND
52784: IFFALSE 52794
// result := true ;
52786: LD_ADDR_VAR 0 4
52790: PUSH
52791: LD_INT 1
52793: ST_TO_ADDR
// end ; end ;
52794: LD_VAR 0 4
52798: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52799: LD_INT 0
52801: PPUSH
52802: PPUSH
52803: PPUSH
52804: PPUSH
// if not unit or not area then
52805: LD_VAR 0 1
52809: NOT
52810: IFTRUE 52819
52812: PUSH
52813: LD_VAR 0 2
52817: NOT
52818: OR
52819: IFFALSE 52823
// exit ;
52821: GO 52999
// tmp := AreaToList ( area , i ) ;
52823: LD_ADDR_VAR 0 6
52827: PUSH
52828: LD_VAR 0 2
52832: PPUSH
52833: LD_VAR 0 5
52837: PPUSH
52838: CALL_OW 517
52842: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52843: LD_ADDR_VAR 0 5
52847: PUSH
52848: DOUBLE
52849: LD_INT 1
52851: DEC
52852: ST_TO_ADDR
52853: LD_VAR 0 6
52857: PUSH
52858: LD_INT 1
52860: ARRAY
52861: PUSH
52862: FOR_TO
52863: IFFALSE 52997
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52865: LD_ADDR_VAR 0 7
52869: PUSH
52870: LD_VAR 0 6
52874: PUSH
52875: LD_INT 1
52877: ARRAY
52878: PUSH
52879: LD_VAR 0 5
52883: ARRAY
52884: PUSH
52885: LD_VAR 0 6
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: PUSH
52894: LD_VAR 0 5
52898: ARRAY
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52904: LD_INT 92
52906: PUSH
52907: LD_VAR 0 7
52911: PUSH
52912: LD_INT 1
52914: ARRAY
52915: PUSH
52916: LD_VAR 0 7
52920: PUSH
52921: LD_INT 2
52923: ARRAY
52924: PUSH
52925: LD_INT 2
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: PPUSH
52934: CALL_OW 69
52938: PUSH
52939: LD_INT 0
52941: EQUAL
52942: IFFALSE 52995
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52944: LD_VAR 0 1
52948: PPUSH
52949: LD_VAR 0 7
52953: PUSH
52954: LD_INT 1
52956: ARRAY
52957: PPUSH
52958: LD_VAR 0 7
52962: PUSH
52963: LD_INT 2
52965: ARRAY
52966: PPUSH
52967: LD_VAR 0 3
52971: PPUSH
52972: CALL_OW 48
// result := IsPlaced ( unit ) ;
52976: LD_ADDR_VAR 0 4
52980: PUSH
52981: LD_VAR 0 1
52985: PPUSH
52986: CALL_OW 305
52990: ST_TO_ADDR
// exit ;
52991: POP
52992: POP
52993: GO 52999
// end ; end ;
52995: GO 52862
52997: POP
52998: POP
// end ;
52999: LD_VAR 0 4
53003: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53004: LD_INT 0
53006: PPUSH
53007: PPUSH
53008: PPUSH
// if not side or side > 8 then
53009: LD_VAR 0 1
53013: NOT
53014: IFTRUE 53026
53016: PUSH
53017: LD_VAR 0 1
53021: PUSH
53022: LD_INT 8
53024: GREATER
53025: OR
53026: IFFALSE 53030
// exit ;
53028: GO 53217
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53030: LD_ADDR_VAR 0 4
53034: PUSH
53035: LD_INT 22
53037: PUSH
53038: LD_VAR 0 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 21
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PPUSH
53061: CALL_OW 69
53065: ST_TO_ADDR
// if not tmp then
53066: LD_VAR 0 4
53070: NOT
53071: IFFALSE 53075
// exit ;
53073: GO 53217
// enable_addtolog := true ;
53075: LD_ADDR_OWVAR 81
53079: PUSH
53080: LD_INT 1
53082: ST_TO_ADDR
// AddToLog ( [ ) ;
53083: LD_STRING [
53085: PPUSH
53086: CALL_OW 561
// for i in tmp do
53090: LD_ADDR_VAR 0 3
53094: PUSH
53095: LD_VAR 0 4
53099: PUSH
53100: FOR_IN
53101: IFFALSE 53208
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53103: LD_STRING [
53105: PUSH
53106: LD_VAR 0 3
53110: PPUSH
53111: CALL_OW 266
53115: STR
53116: PUSH
53117: LD_STRING , 
53119: STR
53120: PUSH
53121: LD_VAR 0 3
53125: PPUSH
53126: CALL_OW 250
53130: STR
53131: PUSH
53132: LD_STRING , 
53134: STR
53135: PUSH
53136: LD_VAR 0 3
53140: PPUSH
53141: CALL_OW 251
53145: STR
53146: PUSH
53147: LD_STRING , 
53149: STR
53150: PUSH
53151: LD_VAR 0 3
53155: PPUSH
53156: CALL_OW 254
53160: STR
53161: PUSH
53162: LD_STRING , 
53164: STR
53165: PUSH
53166: LD_VAR 0 3
53170: PPUSH
53171: LD_INT 1
53173: PPUSH
53174: CALL_OW 268
53178: STR
53179: PUSH
53180: LD_STRING , 
53182: STR
53183: PUSH
53184: LD_VAR 0 3
53188: PPUSH
53189: LD_INT 2
53191: PPUSH
53192: CALL_OW 268
53196: STR
53197: PUSH
53198: LD_STRING ],
53200: STR
53201: PPUSH
53202: CALL_OW 561
// end ;
53206: GO 53100
53208: POP
53209: POP
// AddToLog ( ]; ) ;
53210: LD_STRING ];
53212: PPUSH
53213: CALL_OW 561
// end ;
53217: LD_VAR 0 2
53221: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53222: LD_INT 0
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
// if not area or not rate or not max then
53229: LD_VAR 0 1
53233: NOT
53234: IFTRUE 53243
53236: PUSH
53237: LD_VAR 0 2
53241: NOT
53242: OR
53243: IFTRUE 53252
53245: PUSH
53246: LD_VAR 0 4
53250: NOT
53251: OR
53252: IFFALSE 53256
// exit ;
53254: GO 53445
// while 1 do
53256: LD_INT 1
53258: IFFALSE 53445
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53260: LD_ADDR_VAR 0 9
53264: PUSH
53265: LD_VAR 0 1
53269: PPUSH
53270: LD_INT 1
53272: PPUSH
53273: CALL_OW 287
53277: PUSH
53278: LD_INT 10
53280: MUL
53281: ST_TO_ADDR
// r := rate / 10 ;
53282: LD_ADDR_VAR 0 7
53286: PUSH
53287: LD_VAR 0 2
53291: PUSH
53292: LD_INT 10
53294: DIVREAL
53295: ST_TO_ADDR
// time := 1 1$00 ;
53296: LD_ADDR_VAR 0 8
53300: PUSH
53301: LD_INT 2100
53303: ST_TO_ADDR
// if amount < min then
53304: LD_VAR 0 9
53308: PUSH
53309: LD_VAR 0 3
53313: LESS
53314: IFFALSE 53332
// r := r * 2 else
53316: LD_ADDR_VAR 0 7
53320: PUSH
53321: LD_VAR 0 7
53325: PUSH
53326: LD_INT 2
53328: MUL
53329: ST_TO_ADDR
53330: GO 53358
// if amount > max then
53332: LD_VAR 0 9
53336: PUSH
53337: LD_VAR 0 4
53341: GREATER
53342: IFFALSE 53358
// r := r / 2 ;
53344: LD_ADDR_VAR 0 7
53348: PUSH
53349: LD_VAR 0 7
53353: PUSH
53354: LD_INT 2
53356: DIVREAL
53357: ST_TO_ADDR
// time := time / r ;
53358: LD_ADDR_VAR 0 8
53362: PUSH
53363: LD_VAR 0 8
53367: PUSH
53368: LD_VAR 0 7
53372: DIVREAL
53373: ST_TO_ADDR
// if time < 0 then
53374: LD_VAR 0 8
53378: PUSH
53379: LD_INT 0
53381: LESS
53382: IFFALSE 53399
// time := time * - 1 ;
53384: LD_ADDR_VAR 0 8
53388: PUSH
53389: LD_VAR 0 8
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: MUL
53398: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53399: LD_VAR 0 8
53403: PUSH
53404: LD_INT 35
53406: PPUSH
53407: LD_INT 875
53409: PPUSH
53410: CALL_OW 12
53414: PLUS
53415: PPUSH
53416: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53420: LD_INT 1
53422: PPUSH
53423: LD_INT 5
53425: PPUSH
53426: CALL_OW 12
53430: PPUSH
53431: LD_VAR 0 1
53435: PPUSH
53436: LD_INT 1
53438: PPUSH
53439: CALL_OW 55
// end ;
53443: GO 53256
// end ;
53445: LD_VAR 0 5
53449: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53450: LD_INT 0
53452: PPUSH
53453: PPUSH
53454: PPUSH
53455: PPUSH
53456: PPUSH
53457: PPUSH
53458: PPUSH
53459: PPUSH
// if not turrets or not factories then
53460: LD_VAR 0 1
53464: NOT
53465: IFTRUE 53474
53467: PUSH
53468: LD_VAR 0 2
53472: NOT
53473: OR
53474: IFFALSE 53478
// exit ;
53476: GO 53785
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53478: LD_ADDR_VAR 0 10
53482: PUSH
53483: LD_INT 5
53485: PUSH
53486: LD_INT 6
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: LD_INT 4
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 3
53505: PUSH
53506: LD_INT 5
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 24
53520: PUSH
53521: LD_INT 25
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 23
53530: PUSH
53531: LD_INT 27
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 42
53544: PUSH
53545: LD_INT 43
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 44
53554: PUSH
53555: LD_INT 46
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 45
53564: PUSH
53565: LD_INT 47
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// result := [ ] ;
53582: LD_ADDR_VAR 0 3
53586: PUSH
53587: EMPTY
53588: ST_TO_ADDR
// for i in turrets do
53589: LD_ADDR_VAR 0 4
53593: PUSH
53594: LD_VAR 0 1
53598: PUSH
53599: FOR_IN
53600: IFFALSE 53783
// begin nat := GetNation ( i ) ;
53602: LD_ADDR_VAR 0 7
53606: PUSH
53607: LD_VAR 0 4
53611: PPUSH
53612: CALL_OW 248
53616: ST_TO_ADDR
// weapon := 0 ;
53617: LD_ADDR_VAR 0 8
53621: PUSH
53622: LD_INT 0
53624: ST_TO_ADDR
// if not nat then
53625: LD_VAR 0 7
53629: NOT
53630: IFFALSE 53634
// continue ;
53632: GO 53599
// for j in list [ nat ] do
53634: LD_ADDR_VAR 0 5
53638: PUSH
53639: LD_VAR 0 10
53643: PUSH
53644: LD_VAR 0 7
53648: ARRAY
53649: PUSH
53650: FOR_IN
53651: IFFALSE 53692
// if GetBWeapon ( i ) = j [ 1 ] then
53653: LD_VAR 0 4
53657: PPUSH
53658: CALL_OW 269
53662: PUSH
53663: LD_VAR 0 5
53667: PUSH
53668: LD_INT 1
53670: ARRAY
53671: EQUAL
53672: IFFALSE 53690
// begin weapon := j [ 2 ] ;
53674: LD_ADDR_VAR 0 8
53678: PUSH
53679: LD_VAR 0 5
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: ST_TO_ADDR
// break ;
53688: GO 53692
// end ;
53690: GO 53650
53692: POP
53693: POP
// if not weapon then
53694: LD_VAR 0 8
53698: NOT
53699: IFFALSE 53703
// continue ;
53701: GO 53599
// for k in factories do
53703: LD_ADDR_VAR 0 6
53707: PUSH
53708: LD_VAR 0 2
53712: PUSH
53713: FOR_IN
53714: IFFALSE 53779
// begin weapons := AvailableWeaponList ( k ) ;
53716: LD_ADDR_VAR 0 9
53720: PUSH
53721: LD_VAR 0 6
53725: PPUSH
53726: CALL_OW 478
53730: ST_TO_ADDR
// if not weapons then
53731: LD_VAR 0 9
53735: NOT
53736: IFFALSE 53740
// continue ;
53738: GO 53713
// if weapon in weapons then
53740: LD_VAR 0 8
53744: PUSH
53745: LD_VAR 0 9
53749: IN
53750: IFFALSE 53777
// begin result := [ i , weapon ] ;
53752: LD_ADDR_VAR 0 3
53756: PUSH
53757: LD_VAR 0 4
53761: PUSH
53762: LD_VAR 0 8
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: ST_TO_ADDR
// exit ;
53771: POP
53772: POP
53773: POP
53774: POP
53775: GO 53785
// end ; end ;
53777: GO 53713
53779: POP
53780: POP
// end ;
53781: GO 53599
53783: POP
53784: POP
// end ;
53785: LD_VAR 0 3
53789: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53790: LD_INT 0
53792: PPUSH
// if not side or side > 8 then
53793: LD_VAR 0 3
53797: NOT
53798: IFTRUE 53810
53800: PUSH
53801: LD_VAR 0 3
53805: PUSH
53806: LD_INT 8
53808: GREATER
53809: OR
53810: IFFALSE 53814
// exit ;
53812: GO 53873
// if not range then
53814: LD_VAR 0 4
53818: NOT
53819: IFFALSE 53830
// range := - 12 ;
53821: LD_ADDR_VAR 0 4
53825: PUSH
53826: LD_INT 12
53828: NEG
53829: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53830: LD_VAR 0 1
53834: PPUSH
53835: LD_VAR 0 2
53839: PPUSH
53840: LD_VAR 0 3
53844: PPUSH
53845: LD_VAR 0 4
53849: PPUSH
53850: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53854: LD_VAR 0 1
53858: PPUSH
53859: LD_VAR 0 2
53863: PPUSH
53864: LD_VAR 0 3
53868: PPUSH
53869: CALL_OW 331
// end ;
53873: LD_VAR 0 5
53877: RET
// export function Video ( mode ) ; begin
53878: LD_INT 0
53880: PPUSH
// ingame_video = mode ;
53881: LD_ADDR_OWVAR 52
53885: PUSH
53886: LD_VAR 0 1
53890: ST_TO_ADDR
// interface_hidden = mode ;
53891: LD_ADDR_OWVAR 54
53895: PUSH
53896: LD_VAR 0 1
53900: ST_TO_ADDR
// end ;
53901: LD_VAR 0 2
53905: RET
// export function Join ( array , element ) ; begin
53906: LD_INT 0
53908: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53909: LD_ADDR_VAR 0 3
53913: PUSH
53914: LD_VAR 0 1
53918: PPUSH
53919: LD_VAR 0 1
53923: PUSH
53924: LD_INT 1
53926: PLUS
53927: PPUSH
53928: LD_VAR 0 2
53932: PPUSH
53933: CALL_OW 1
53937: ST_TO_ADDR
// end ;
53938: LD_VAR 0 3
53942: RET
// export function JoinUnion ( array , element ) ; begin
53943: LD_INT 0
53945: PPUSH
// result := array union element ;
53946: LD_ADDR_VAR 0 3
53950: PUSH
53951: LD_VAR 0 1
53955: PUSH
53956: LD_VAR 0 2
53960: UNION
53961: ST_TO_ADDR
// end ;
53962: LD_VAR 0 3
53966: RET
// export function GetBehemoths ( side ) ; begin
53967: LD_INT 0
53969: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53970: LD_ADDR_VAR 0 2
53974: PUSH
53975: LD_INT 22
53977: PUSH
53978: LD_VAR 0 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 31
53989: PUSH
53990: LD_INT 25
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PPUSH
54001: CALL_OW 69
54005: ST_TO_ADDR
// end ;
54006: LD_VAR 0 2
54010: RET
// export function Shuffle ( array ) ; var i , index ; begin
54011: LD_INT 0
54013: PPUSH
54014: PPUSH
54015: PPUSH
// result := [ ] ;
54016: LD_ADDR_VAR 0 2
54020: PUSH
54021: EMPTY
54022: ST_TO_ADDR
// if not array then
54023: LD_VAR 0 1
54027: NOT
54028: IFFALSE 54032
// exit ;
54030: GO 54131
// Randomize ;
54032: CALL_OW 10
// for i = array downto 1 do
54036: LD_ADDR_VAR 0 3
54040: PUSH
54041: DOUBLE
54042: LD_VAR 0 1
54046: INC
54047: ST_TO_ADDR
54048: LD_INT 1
54050: PUSH
54051: FOR_DOWNTO
54052: IFFALSE 54129
// begin index := rand ( 1 , array ) ;
54054: LD_ADDR_VAR 0 4
54058: PUSH
54059: LD_INT 1
54061: PPUSH
54062: LD_VAR 0 1
54066: PPUSH
54067: CALL_OW 12
54071: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54072: LD_ADDR_VAR 0 2
54076: PUSH
54077: LD_VAR 0 2
54081: PPUSH
54082: LD_VAR 0 2
54086: PUSH
54087: LD_INT 1
54089: PLUS
54090: PPUSH
54091: LD_VAR 0 1
54095: PUSH
54096: LD_VAR 0 4
54100: ARRAY
54101: PPUSH
54102: CALL_OW 2
54106: ST_TO_ADDR
// array := Delete ( array , index ) ;
54107: LD_ADDR_VAR 0 1
54111: PUSH
54112: LD_VAR 0 1
54116: PPUSH
54117: LD_VAR 0 4
54121: PPUSH
54122: CALL_OW 3
54126: ST_TO_ADDR
// end ;
54127: GO 54051
54129: POP
54130: POP
// end ;
54131: LD_VAR 0 2
54135: RET
// export function GetBaseMaterials ( base ) ; begin
54136: LD_INT 0
54138: PPUSH
// result := [ 0 , 0 , 0 ] ;
54139: LD_ADDR_VAR 0 2
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: ST_TO_ADDR
// if not base then
54158: LD_VAR 0 1
54162: NOT
54163: IFFALSE 54167
// exit ;
54165: GO 54216
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54167: LD_ADDR_VAR 0 2
54171: PUSH
54172: LD_VAR 0 1
54176: PPUSH
54177: LD_INT 1
54179: PPUSH
54180: CALL_OW 275
54184: PUSH
54185: LD_VAR 0 1
54189: PPUSH
54190: LD_INT 2
54192: PPUSH
54193: CALL_OW 275
54197: PUSH
54198: LD_VAR 0 1
54202: PPUSH
54203: LD_INT 3
54205: PPUSH
54206: CALL_OW 275
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// end ;
54216: LD_VAR 0 2
54220: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54221: LD_INT 0
54223: PPUSH
54224: PPUSH
// result := array ;
54225: LD_ADDR_VAR 0 3
54229: PUSH
54230: LD_VAR 0 1
54234: ST_TO_ADDR
// if size >= result then
54235: LD_VAR 0 2
54239: PUSH
54240: LD_VAR 0 3
54244: GREATEREQUAL
54245: IFFALSE 54249
// exit ;
54247: GO 54299
// if size then
54249: LD_VAR 0 2
54253: IFFALSE 54299
// for i := array downto size do
54255: LD_ADDR_VAR 0 4
54259: PUSH
54260: DOUBLE
54261: LD_VAR 0 1
54265: INC
54266: ST_TO_ADDR
54267: LD_VAR 0 2
54271: PUSH
54272: FOR_DOWNTO
54273: IFFALSE 54297
// result := Delete ( result , result ) ;
54275: LD_ADDR_VAR 0 3
54279: PUSH
54280: LD_VAR 0 3
54284: PPUSH
54285: LD_VAR 0 3
54289: PPUSH
54290: CALL_OW 3
54294: ST_TO_ADDR
54295: GO 54272
54297: POP
54298: POP
// end ;
54299: LD_VAR 0 3
54303: RET
// export function ComExit ( unit ) ; var tmp ; begin
54304: LD_INT 0
54306: PPUSH
54307: PPUSH
// if not IsInUnit ( unit ) then
54308: LD_VAR 0 1
54312: PPUSH
54313: CALL_OW 310
54317: NOT
54318: IFFALSE 54322
// exit ;
54320: GO 54382
// tmp := IsInUnit ( unit ) ;
54322: LD_ADDR_VAR 0 3
54326: PUSH
54327: LD_VAR 0 1
54331: PPUSH
54332: CALL_OW 310
54336: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54337: LD_VAR 0 3
54341: PPUSH
54342: CALL_OW 247
54346: PUSH
54347: LD_INT 2
54349: EQUAL
54350: IFFALSE 54363
// ComExitVehicle ( unit ) else
54352: LD_VAR 0 1
54356: PPUSH
54357: CALL_OW 121
54361: GO 54372
// ComExitBuilding ( unit ) ;
54363: LD_VAR 0 1
54367: PPUSH
54368: CALL_OW 122
// result := tmp ;
54372: LD_ADDR_VAR 0 2
54376: PUSH
54377: LD_VAR 0 3
54381: ST_TO_ADDR
// end ;
54382: LD_VAR 0 2
54386: RET
// export function ComExitAll ( units ) ; var i ; begin
54387: LD_INT 0
54389: PPUSH
54390: PPUSH
// if not units then
54391: LD_VAR 0 1
54395: NOT
54396: IFFALSE 54400
// exit ;
54398: GO 54426
// for i in units do
54400: LD_ADDR_VAR 0 3
54404: PUSH
54405: LD_VAR 0 1
54409: PUSH
54410: FOR_IN
54411: IFFALSE 54424
// ComExit ( i ) ;
54413: LD_VAR 0 3
54417: PPUSH
54418: CALL 54304 0 1
54422: GO 54410
54424: POP
54425: POP
// end ;
54426: LD_VAR 0 2
54430: RET
// export function ResetHc ; begin
54431: LD_INT 0
54433: PPUSH
// InitHc ;
54434: CALL_OW 19
// hc_importance := 0 ;
54438: LD_ADDR_OWVAR 32
54442: PUSH
54443: LD_INT 0
54445: ST_TO_ADDR
// end ;
54446: LD_VAR 0 1
54450: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54451: LD_INT 0
54453: PPUSH
54454: PPUSH
54455: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54456: LD_ADDR_VAR 0 6
54460: PUSH
54461: LD_VAR 0 1
54465: PUSH
54466: LD_VAR 0 3
54470: PLUS
54471: PUSH
54472: LD_INT 2
54474: DIV
54475: ST_TO_ADDR
// if _x < 0 then
54476: LD_VAR 0 6
54480: PUSH
54481: LD_INT 0
54483: LESS
54484: IFFALSE 54501
// _x := _x * - 1 ;
54486: LD_ADDR_VAR 0 6
54490: PUSH
54491: LD_VAR 0 6
54495: PUSH
54496: LD_INT 1
54498: NEG
54499: MUL
54500: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54501: LD_ADDR_VAR 0 7
54505: PUSH
54506: LD_VAR 0 2
54510: PUSH
54511: LD_VAR 0 4
54515: PLUS
54516: PUSH
54517: LD_INT 2
54519: DIV
54520: ST_TO_ADDR
// if _y < 0 then
54521: LD_VAR 0 7
54525: PUSH
54526: LD_INT 0
54528: LESS
54529: IFFALSE 54546
// _y := _y * - 1 ;
54531: LD_ADDR_VAR 0 7
54535: PUSH
54536: LD_VAR 0 7
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: MUL
54545: ST_TO_ADDR
// result := [ _x , _y ] ;
54546: LD_ADDR_VAR 0 5
54550: PUSH
54551: LD_VAR 0 6
54555: PUSH
54556: LD_VAR 0 7
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: ST_TO_ADDR
// end ;
54565: LD_VAR 0 5
54569: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54570: LD_INT 0
54572: PPUSH
54573: PPUSH
54574: PPUSH
54575: PPUSH
// task := GetTaskList ( unit ) ;
54576: LD_ADDR_VAR 0 7
54580: PUSH
54581: LD_VAR 0 1
54585: PPUSH
54586: CALL_OW 437
54590: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54591: LD_VAR 0 7
54595: NOT
54596: IFFALSE 54615
54598: PUSH
54599: LD_VAR 0 1
54603: PPUSH
54604: LD_VAR 0 2
54608: PPUSH
54609: CALL_OW 308
54613: NOT
54614: AND
54615: IFFALSE 54619
// exit ;
54617: GO 54737
// if IsInArea ( unit , area ) then
54619: LD_VAR 0 1
54623: PPUSH
54624: LD_VAR 0 2
54628: PPUSH
54629: CALL_OW 308
54633: IFFALSE 54651
// begin ComMoveToArea ( unit , goAway ) ;
54635: LD_VAR 0 1
54639: PPUSH
54640: LD_VAR 0 3
54644: PPUSH
54645: CALL_OW 113
// exit ;
54649: GO 54737
// end ; if task [ 1 ] [ 1 ] <> M then
54651: LD_VAR 0 7
54655: PUSH
54656: LD_INT 1
54658: ARRAY
54659: PUSH
54660: LD_INT 1
54662: ARRAY
54663: PUSH
54664: LD_STRING M
54666: NONEQUAL
54667: IFFALSE 54671
// exit ;
54669: GO 54737
// x := task [ 1 ] [ 2 ] ;
54671: LD_ADDR_VAR 0 5
54675: PUSH
54676: LD_VAR 0 7
54680: PUSH
54681: LD_INT 1
54683: ARRAY
54684: PUSH
54685: LD_INT 2
54687: ARRAY
54688: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54689: LD_ADDR_VAR 0 6
54693: PUSH
54694: LD_VAR 0 7
54698: PUSH
54699: LD_INT 1
54701: ARRAY
54702: PUSH
54703: LD_INT 3
54705: ARRAY
54706: ST_TO_ADDR
// if InArea ( x , y , area ) then
54707: LD_VAR 0 5
54711: PPUSH
54712: LD_VAR 0 6
54716: PPUSH
54717: LD_VAR 0 2
54721: PPUSH
54722: CALL_OW 309
54726: IFFALSE 54737
// ComStop ( unit ) ;
54728: LD_VAR 0 1
54732: PPUSH
54733: CALL_OW 141
// end ;
54737: LD_VAR 0 4
54741: RET
// export function Abs ( value ) ; begin
54742: LD_INT 0
54744: PPUSH
// result := value ;
54745: LD_ADDR_VAR 0 2
54749: PUSH
54750: LD_VAR 0 1
54754: ST_TO_ADDR
// if value < 0 then
54755: LD_VAR 0 1
54759: PUSH
54760: LD_INT 0
54762: LESS
54763: IFFALSE 54780
// result := value * - 1 ;
54765: LD_ADDR_VAR 0 2
54769: PUSH
54770: LD_VAR 0 1
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: MUL
54779: ST_TO_ADDR
// end ;
54780: LD_VAR 0 2
54784: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54785: LD_INT 0
54787: PPUSH
54788: PPUSH
54789: PPUSH
54790: PPUSH
54791: PPUSH
54792: PPUSH
54793: PPUSH
54794: PPUSH
// if not unit or not building then
54795: LD_VAR 0 1
54799: NOT
54800: IFTRUE 54809
54802: PUSH
54803: LD_VAR 0 2
54807: NOT
54808: OR
54809: IFFALSE 54813
// exit ;
54811: GO 55041
// x := GetX ( building ) ;
54813: LD_ADDR_VAR 0 4
54817: PUSH
54818: LD_VAR 0 2
54822: PPUSH
54823: CALL_OW 250
54827: ST_TO_ADDR
// y := GetY ( building ) ;
54828: LD_ADDR_VAR 0 6
54832: PUSH
54833: LD_VAR 0 2
54837: PPUSH
54838: CALL_OW 251
54842: ST_TO_ADDR
// d := GetDir ( building ) ;
54843: LD_ADDR_VAR 0 8
54847: PUSH
54848: LD_VAR 0 2
54852: PPUSH
54853: CALL_OW 254
54857: ST_TO_ADDR
// r := 4 ;
54858: LD_ADDR_VAR 0 9
54862: PUSH
54863: LD_INT 4
54865: ST_TO_ADDR
// for i := 1 to 5 do
54866: LD_ADDR_VAR 0 10
54870: PUSH
54871: DOUBLE
54872: LD_INT 1
54874: DEC
54875: ST_TO_ADDR
54876: LD_INT 5
54878: PUSH
54879: FOR_TO
54880: IFFALSE 55039
// begin _x := ShiftX ( x , d , r + i ) ;
54882: LD_ADDR_VAR 0 5
54886: PUSH
54887: LD_VAR 0 4
54891: PPUSH
54892: LD_VAR 0 8
54896: PPUSH
54897: LD_VAR 0 9
54901: PUSH
54902: LD_VAR 0 10
54906: PLUS
54907: PPUSH
54908: CALL_OW 272
54912: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54913: LD_ADDR_VAR 0 7
54917: PUSH
54918: LD_VAR 0 6
54922: PPUSH
54923: LD_VAR 0 8
54927: PPUSH
54928: LD_VAR 0 9
54932: PUSH
54933: LD_VAR 0 10
54937: PLUS
54938: PPUSH
54939: CALL_OW 273
54943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54944: LD_VAR 0 5
54948: PPUSH
54949: LD_VAR 0 7
54953: PPUSH
54954: CALL_OW 488
54958: IFFALSE 54993
54960: PUSH
54961: LD_VAR 0 5
54965: PPUSH
54966: LD_VAR 0 7
54970: PPUSH
54971: CALL_OW 428
54975: PPUSH
54976: CALL_OW 247
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: IN
54991: NOT
54992: AND
54993: IFFALSE 55037
// begin ComMoveXY ( unit , _x , _y ) ;
54995: LD_VAR 0 1
54999: PPUSH
55000: LD_VAR 0 5
55004: PPUSH
55005: LD_VAR 0 7
55009: PPUSH
55010: CALL_OW 111
// result := [ _x , _y ] ;
55014: LD_ADDR_VAR 0 3
55018: PUSH
55019: LD_VAR 0 5
55023: PUSH
55024: LD_VAR 0 7
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: ST_TO_ADDR
// exit ;
55033: POP
55034: POP
55035: GO 55041
// end ; end ;
55037: GO 54879
55039: POP
55040: POP
// end ;
55041: LD_VAR 0 3
55045: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55046: LD_INT 0
55048: PPUSH
55049: PPUSH
55050: PPUSH
// result := 0 ;
55051: LD_ADDR_VAR 0 3
55055: PUSH
55056: LD_INT 0
55058: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55059: LD_VAR 0 1
55063: PUSH
55064: LD_INT 0
55066: LESS
55067: IFTRUE 55079
55069: PUSH
55070: LD_VAR 0 1
55074: PUSH
55075: LD_INT 8
55077: GREATER
55078: OR
55079: IFTRUE 55091
55081: PUSH
55082: LD_VAR 0 2
55086: PUSH
55087: LD_INT 0
55089: LESS
55090: OR
55091: IFTRUE 55103
55093: PUSH
55094: LD_VAR 0 2
55098: PUSH
55099: LD_INT 8
55101: GREATER
55102: OR
55103: IFFALSE 55107
// exit ;
55105: GO 55182
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55107: LD_ADDR_VAR 0 4
55111: PUSH
55112: LD_INT 22
55114: PUSH
55115: LD_VAR 0 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PPUSH
55124: CALL_OW 69
55128: PUSH
55129: FOR_IN
55130: IFFALSE 55180
// begin un := UnitShoot ( i ) ;
55132: LD_ADDR_VAR 0 5
55136: PUSH
55137: LD_VAR 0 4
55141: PPUSH
55142: CALL_OW 504
55146: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55147: LD_VAR 0 5
55151: PPUSH
55152: CALL_OW 255
55156: PUSH
55157: LD_VAR 0 1
55161: EQUAL
55162: IFFALSE 55178
// begin result := un ;
55164: LD_ADDR_VAR 0 3
55168: PUSH
55169: LD_VAR 0 5
55173: ST_TO_ADDR
// exit ;
55174: POP
55175: POP
55176: GO 55182
// end ; end ;
55178: GO 55129
55180: POP
55181: POP
// end ;
55182: LD_VAR 0 3
55186: RET
// export function GetCargoBay ( units ) ; begin
55187: LD_INT 0
55189: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55190: LD_ADDR_VAR 0 2
55194: PUSH
55195: LD_VAR 0 1
55199: PPUSH
55200: LD_INT 2
55202: PUSH
55203: LD_INT 34
55205: PUSH
55206: LD_INT 12
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 34
55215: PUSH
55216: LD_INT 51
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 34
55225: PUSH
55226: LD_INT 32
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 34
55235: PUSH
55236: LD_INT 89
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: PPUSH
55250: CALL_OW 72
55254: ST_TO_ADDR
// end ;
55255: LD_VAR 0 2
55259: RET
// export function Negate ( value ) ; begin
55260: LD_INT 0
55262: PPUSH
// result := not value ;
55263: LD_ADDR_VAR 0 2
55267: PUSH
55268: LD_VAR 0 1
55272: NOT
55273: ST_TO_ADDR
// end ;
55274: LD_VAR 0 2
55278: RET
// export function Inc ( value ) ; begin
55279: LD_INT 0
55281: PPUSH
// result := value + 1 ;
55282: LD_ADDR_VAR 0 2
55286: PUSH
55287: LD_VAR 0 1
55291: PUSH
55292: LD_INT 1
55294: PLUS
55295: ST_TO_ADDR
// end ;
55296: LD_VAR 0 2
55300: RET
// export function Dec ( value ) ; begin
55301: LD_INT 0
55303: PPUSH
// result := value - 1 ;
55304: LD_ADDR_VAR 0 2
55308: PUSH
55309: LD_VAR 0 1
55313: PUSH
55314: LD_INT 1
55316: MINUS
55317: ST_TO_ADDR
// end ;
55318: LD_VAR 0 2
55322: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55323: LD_INT 0
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
55330: PPUSH
55331: PPUSH
55332: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55333: LD_VAR 0 1
55337: PPUSH
55338: LD_VAR 0 2
55342: PPUSH
55343: CALL_OW 488
55347: NOT
55348: IFTRUE 55367
55350: PUSH
55351: LD_VAR 0 3
55355: PPUSH
55356: LD_VAR 0 4
55360: PPUSH
55361: CALL_OW 488
55365: NOT
55366: OR
55367: IFFALSE 55380
// begin result := - 1 ;
55369: LD_ADDR_VAR 0 5
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: ST_TO_ADDR
// exit ;
55378: GO 55615
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55380: LD_ADDR_VAR 0 12
55384: PUSH
55385: LD_VAR 0 1
55389: PPUSH
55390: LD_VAR 0 2
55394: PPUSH
55395: LD_VAR 0 3
55399: PPUSH
55400: LD_VAR 0 4
55404: PPUSH
55405: CALL 54451 0 4
55409: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55410: LD_ADDR_VAR 0 11
55414: PUSH
55415: LD_VAR 0 1
55419: PPUSH
55420: LD_VAR 0 2
55424: PPUSH
55425: LD_VAR 0 12
55429: PUSH
55430: LD_INT 1
55432: ARRAY
55433: PPUSH
55434: LD_VAR 0 12
55438: PUSH
55439: LD_INT 2
55441: ARRAY
55442: PPUSH
55443: CALL_OW 298
55447: ST_TO_ADDR
// distance := 9999 ;
55448: LD_ADDR_VAR 0 10
55452: PUSH
55453: LD_INT 9999
55455: ST_TO_ADDR
// for i := 0 to 5 do
55456: LD_ADDR_VAR 0 6
55460: PUSH
55461: DOUBLE
55462: LD_INT 0
55464: DEC
55465: ST_TO_ADDR
55466: LD_INT 5
55468: PUSH
55469: FOR_TO
55470: IFFALSE 55613
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55472: LD_ADDR_VAR 0 7
55476: PUSH
55477: LD_VAR 0 1
55481: PPUSH
55482: LD_VAR 0 6
55486: PPUSH
55487: LD_VAR 0 11
55491: PPUSH
55492: CALL_OW 272
55496: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55497: LD_ADDR_VAR 0 8
55501: PUSH
55502: LD_VAR 0 2
55506: PPUSH
55507: LD_VAR 0 6
55511: PPUSH
55512: LD_VAR 0 11
55516: PPUSH
55517: CALL_OW 273
55521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55522: LD_VAR 0 7
55526: PPUSH
55527: LD_VAR 0 8
55531: PPUSH
55532: CALL_OW 488
55536: NOT
55537: IFFALSE 55541
// continue ;
55539: GO 55469
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55541: LD_ADDR_VAR 0 9
55545: PUSH
55546: LD_VAR 0 12
55550: PUSH
55551: LD_INT 1
55553: ARRAY
55554: PPUSH
55555: LD_VAR 0 12
55559: PUSH
55560: LD_INT 2
55562: ARRAY
55563: PPUSH
55564: LD_VAR 0 7
55568: PPUSH
55569: LD_VAR 0 8
55573: PPUSH
55574: CALL_OW 298
55578: ST_TO_ADDR
// if tmp < distance then
55579: LD_VAR 0 9
55583: PUSH
55584: LD_VAR 0 10
55588: LESS
55589: IFFALSE 55611
// begin result := i ;
55591: LD_ADDR_VAR 0 5
55595: PUSH
55596: LD_VAR 0 6
55600: ST_TO_ADDR
// distance := tmp ;
55601: LD_ADDR_VAR 0 10
55605: PUSH
55606: LD_VAR 0 9
55610: ST_TO_ADDR
// end ; end ;
55611: GO 55469
55613: POP
55614: POP
// end ;
55615: LD_VAR 0 5
55619: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55620: LD_INT 0
55622: PPUSH
55623: PPUSH
// if not driver or not IsInUnit ( driver ) then
55624: LD_VAR 0 1
55628: NOT
55629: IFTRUE 55643
55631: PUSH
55632: LD_VAR 0 1
55636: PPUSH
55637: CALL_OW 310
55641: NOT
55642: OR
55643: IFFALSE 55647
// exit ;
55645: GO 55737
// vehicle := IsInUnit ( driver ) ;
55647: LD_ADDR_VAR 0 3
55651: PUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 310
55661: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55662: LD_VAR 0 1
55666: PPUSH
55667: LD_STRING \
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: LD_INT 0
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: PUSH
55697: LD_STRING E
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_VAR 0 3
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PPUSH
55733: CALL_OW 446
// end ;
55737: LD_VAR 0 2
55741: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55742: LD_INT 0
55744: PPUSH
55745: PPUSH
// if not driver or not IsInUnit ( driver ) then
55746: LD_VAR 0 1
55750: NOT
55751: IFTRUE 55765
55753: PUSH
55754: LD_VAR 0 1
55758: PPUSH
55759: CALL_OW 310
55763: NOT
55764: OR
55765: IFFALSE 55769
// exit ;
55767: GO 55859
// vehicle := IsInUnit ( driver ) ;
55769: LD_ADDR_VAR 0 3
55773: PUSH
55774: LD_VAR 0 1
55778: PPUSH
55779: CALL_OW 310
55783: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55784: LD_VAR 0 1
55788: PPUSH
55789: LD_STRING \
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: LD_INT 0
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: PUSH
55819: LD_STRING E
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_VAR 0 3
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PPUSH
55855: CALL_OW 447
// end ;
55859: LD_VAR 0 2
55863: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55864: LD_INT 0
55866: PPUSH
55867: PPUSH
55868: PPUSH
// tmp := [ ] ;
55869: LD_ADDR_VAR 0 5
55873: PUSH
55874: EMPTY
55875: ST_TO_ADDR
// for i in units do
55876: LD_ADDR_VAR 0 4
55880: PUSH
55881: LD_VAR 0 1
55885: PUSH
55886: FOR_IN
55887: IFFALSE 55925
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55889: LD_ADDR_VAR 0 5
55893: PUSH
55894: LD_VAR 0 5
55898: PPUSH
55899: LD_VAR 0 5
55903: PUSH
55904: LD_INT 1
55906: PLUS
55907: PPUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 256
55917: PPUSH
55918: CALL_OW 2
55922: ST_TO_ADDR
55923: GO 55886
55925: POP
55926: POP
// if not tmp then
55927: LD_VAR 0 5
55931: NOT
55932: IFFALSE 55936
// exit ;
55934: GO 55984
// if asc then
55936: LD_VAR 0 2
55940: IFFALSE 55964
// result := SortListByListAsc ( units , tmp ) else
55942: LD_ADDR_VAR 0 3
55946: PUSH
55947: LD_VAR 0 1
55951: PPUSH
55952: LD_VAR 0 5
55956: PPUSH
55957: CALL_OW 76
55961: ST_TO_ADDR
55962: GO 55984
// result := SortListByListDesc ( units , tmp ) ;
55964: LD_ADDR_VAR 0 3
55968: PUSH
55969: LD_VAR 0 1
55973: PPUSH
55974: LD_VAR 0 5
55978: PPUSH
55979: CALL_OW 77
55983: ST_TO_ADDR
// end ;
55984: LD_VAR 0 3
55988: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55989: LD_INT 0
55991: PPUSH
55992: PPUSH
// task := GetTaskList ( mech ) ;
55993: LD_ADDR_VAR 0 4
55997: PUSH
55998: LD_VAR 0 1
56002: PPUSH
56003: CALL_OW 437
56007: ST_TO_ADDR
// if not task then
56008: LD_VAR 0 4
56012: NOT
56013: IFFALSE 56017
// exit ;
56015: GO 56061
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56017: LD_ADDR_VAR 0 3
56021: PUSH
56022: LD_VAR 0 4
56026: PUSH
56027: LD_INT 1
56029: ARRAY
56030: PUSH
56031: LD_INT 1
56033: ARRAY
56034: PUSH
56035: LD_STRING r
56037: EQUAL
56038: IFFALSE 56060
56040: PUSH
56041: LD_VAR 0 4
56045: PUSH
56046: LD_INT 1
56048: ARRAY
56049: PUSH
56050: LD_INT 4
56052: ARRAY
56053: PUSH
56054: LD_VAR 0 2
56058: EQUAL
56059: AND
56060: ST_TO_ADDR
// end ;
56061: LD_VAR 0 3
56065: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56066: LD_INT 0
56068: PPUSH
// SetDir ( unit , d ) ;
56069: LD_VAR 0 1
56073: PPUSH
56074: LD_VAR 0 4
56078: PPUSH
56079: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56083: LD_ADDR_VAR 0 6
56087: PUSH
56088: LD_VAR 0 1
56092: PPUSH
56093: LD_VAR 0 2
56097: PPUSH
56098: LD_VAR 0 3
56102: PPUSH
56103: LD_VAR 0 5
56107: PPUSH
56108: CALL_OW 48
56112: ST_TO_ADDR
// end ;
56113: LD_VAR 0 6
56117: RET
// export function ToNaturalNumber ( number ) ; begin
56118: LD_INT 0
56120: PPUSH
// result := number div 1 ;
56121: LD_ADDR_VAR 0 2
56125: PUSH
56126: LD_VAR 0 1
56130: PUSH
56131: LD_INT 1
56133: DIV
56134: ST_TO_ADDR
// if number < 0 then
56135: LD_VAR 0 1
56139: PUSH
56140: LD_INT 0
56142: LESS
56143: IFFALSE 56153
// result := 0 ;
56145: LD_ADDR_VAR 0 2
56149: PUSH
56150: LD_INT 0
56152: ST_TO_ADDR
// end ;
56153: LD_VAR 0 2
56157: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56158: LD_INT 0
56160: PPUSH
56161: PPUSH
56162: PPUSH
// if not buildings then
56163: LD_VAR 0 1
56167: NOT
56168: IFFALSE 56172
// exit ;
56170: GO 56287
// tmp := [ ] ;
56172: LD_ADDR_VAR 0 5
56176: PUSH
56177: EMPTY
56178: ST_TO_ADDR
// for b in buildings do
56179: LD_ADDR_VAR 0 4
56183: PUSH
56184: LD_VAR 0 1
56188: PUSH
56189: FOR_IN
56190: IFFALSE 56228
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56192: LD_ADDR_VAR 0 5
56196: PUSH
56197: LD_VAR 0 5
56201: PPUSH
56202: LD_VAR 0 5
56206: PUSH
56207: LD_INT 1
56209: PLUS
56210: PPUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: CALL_OW 266
56220: PPUSH
56221: CALL_OW 1
56225: ST_TO_ADDR
56226: GO 56189
56228: POP
56229: POP
// if not tmp then
56230: LD_VAR 0 5
56234: NOT
56235: IFFALSE 56239
// exit ;
56237: GO 56287
// if asc then
56239: LD_VAR 0 2
56243: IFFALSE 56267
// result := SortListByListAsc ( buildings , tmp ) else
56245: LD_ADDR_VAR 0 3
56249: PUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: LD_VAR 0 5
56259: PPUSH
56260: CALL_OW 76
56264: ST_TO_ADDR
56265: GO 56287
// result := SortListByListDesc ( buildings , tmp ) ;
56267: LD_ADDR_VAR 0 3
56271: PUSH
56272: LD_VAR 0 1
56276: PPUSH
56277: LD_VAR 0 5
56281: PPUSH
56282: CALL_OW 77
56286: ST_TO_ADDR
// end ;
56287: LD_VAR 0 3
56291: RET
// export function SortByClass ( units , class ) ; var un ; begin
56292: LD_INT 0
56294: PPUSH
56295: PPUSH
// if not units or not class then
56296: LD_VAR 0 1
56300: NOT
56301: IFTRUE 56310
56303: PUSH
56304: LD_VAR 0 2
56308: NOT
56309: OR
56310: IFFALSE 56314
// exit ;
56312: GO 56409
// result := [ ] ;
56314: LD_ADDR_VAR 0 3
56318: PUSH
56319: EMPTY
56320: ST_TO_ADDR
// for un in units do
56321: LD_ADDR_VAR 0 4
56325: PUSH
56326: LD_VAR 0 1
56330: PUSH
56331: FOR_IN
56332: IFFALSE 56407
// if GetClass ( un ) = class then
56334: LD_VAR 0 4
56338: PPUSH
56339: CALL_OW 257
56343: PUSH
56344: LD_VAR 0 2
56348: EQUAL
56349: IFFALSE 56376
// result := Insert ( result , 1 , un ) else
56351: LD_ADDR_VAR 0 3
56355: PUSH
56356: LD_VAR 0 3
56360: PPUSH
56361: LD_INT 1
56363: PPUSH
56364: LD_VAR 0 4
56368: PPUSH
56369: CALL_OW 2
56373: ST_TO_ADDR
56374: GO 56405
// result := Replace ( result , result + 1 , un ) ;
56376: LD_ADDR_VAR 0 3
56380: PUSH
56381: LD_VAR 0 3
56385: PPUSH
56386: LD_VAR 0 3
56390: PUSH
56391: LD_INT 1
56393: PLUS
56394: PPUSH
56395: LD_VAR 0 4
56399: PPUSH
56400: CALL_OW 1
56404: ST_TO_ADDR
56405: GO 56331
56407: POP
56408: POP
// end ;
56409: LD_VAR 0 3
56413: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56414: LD_INT 0
56416: PPUSH
56417: PPUSH
56418: PPUSH
56419: PPUSH
56420: PPUSH
56421: PPUSH
56422: PPUSH
// result := [ ] ;
56423: LD_ADDR_VAR 0 4
56427: PUSH
56428: EMPTY
56429: ST_TO_ADDR
// if x - r < 0 then
56430: LD_VAR 0 1
56434: PUSH
56435: LD_VAR 0 3
56439: MINUS
56440: PUSH
56441: LD_INT 0
56443: LESS
56444: IFFALSE 56456
// min_x := 0 else
56446: LD_ADDR_VAR 0 8
56450: PUSH
56451: LD_INT 0
56453: ST_TO_ADDR
56454: GO 56472
// min_x := x - r ;
56456: LD_ADDR_VAR 0 8
56460: PUSH
56461: LD_VAR 0 1
56465: PUSH
56466: LD_VAR 0 3
56470: MINUS
56471: ST_TO_ADDR
// if y - r < 0 then
56472: LD_VAR 0 2
56476: PUSH
56477: LD_VAR 0 3
56481: MINUS
56482: PUSH
56483: LD_INT 0
56485: LESS
56486: IFFALSE 56498
// min_y := 0 else
56488: LD_ADDR_VAR 0 7
56492: PUSH
56493: LD_INT 0
56495: ST_TO_ADDR
56496: GO 56514
// min_y := y - r ;
56498: LD_ADDR_VAR 0 7
56502: PUSH
56503: LD_VAR 0 2
56507: PUSH
56508: LD_VAR 0 3
56512: MINUS
56513: ST_TO_ADDR
// max_x := x + r ;
56514: LD_ADDR_VAR 0 9
56518: PUSH
56519: LD_VAR 0 1
56523: PUSH
56524: LD_VAR 0 3
56528: PLUS
56529: ST_TO_ADDR
// max_y := y + r ;
56530: LD_ADDR_VAR 0 10
56534: PUSH
56535: LD_VAR 0 2
56539: PUSH
56540: LD_VAR 0 3
56544: PLUS
56545: ST_TO_ADDR
// for _x = min_x to max_x do
56546: LD_ADDR_VAR 0 5
56550: PUSH
56551: DOUBLE
56552: LD_VAR 0 8
56556: DEC
56557: ST_TO_ADDR
56558: LD_VAR 0 9
56562: PUSH
56563: FOR_TO
56564: IFFALSE 56665
// for _y = min_y to max_y do
56566: LD_ADDR_VAR 0 6
56570: PUSH
56571: DOUBLE
56572: LD_VAR 0 7
56576: DEC
56577: ST_TO_ADDR
56578: LD_VAR 0 10
56582: PUSH
56583: FOR_TO
56584: IFFALSE 56661
// begin if not ValidHex ( _x , _y ) then
56586: LD_VAR 0 5
56590: PPUSH
56591: LD_VAR 0 6
56595: PPUSH
56596: CALL_OW 488
56600: NOT
56601: IFFALSE 56605
// continue ;
56603: GO 56583
// if GetResourceTypeXY ( _x , _y ) then
56605: LD_VAR 0 5
56609: PPUSH
56610: LD_VAR 0 6
56614: PPUSH
56615: CALL_OW 283
56619: IFFALSE 56659
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56621: LD_ADDR_VAR 0 4
56625: PUSH
56626: LD_VAR 0 4
56630: PPUSH
56631: LD_VAR 0 4
56635: PUSH
56636: LD_INT 1
56638: PLUS
56639: PPUSH
56640: LD_VAR 0 5
56644: PUSH
56645: LD_VAR 0 6
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PPUSH
56654: CALL_OW 1
56658: ST_TO_ADDR
// end ;
56659: GO 56583
56661: POP
56662: POP
56663: GO 56563
56665: POP
56666: POP
// end ;
56667: LD_VAR 0 4
56671: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56672: LD_INT 0
56674: PPUSH
56675: PPUSH
56676: PPUSH
56677: PPUSH
56678: PPUSH
56679: PPUSH
56680: PPUSH
56681: PPUSH
// if not units then
56682: LD_VAR 0 1
56686: NOT
56687: IFFALSE 56691
// exit ;
56689: GO 57223
// result := UnitFilter ( units , [ f_ok ] ) ;
56691: LD_ADDR_VAR 0 3
56695: PUSH
56696: LD_VAR 0 1
56700: PPUSH
56701: LD_INT 50
56703: PUSH
56704: EMPTY
56705: LIST
56706: PPUSH
56707: CALL_OW 72
56711: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56712: LD_ADDR_VAR 0 8
56716: PUSH
56717: LD_VAR 0 1
56721: PUSH
56722: LD_INT 1
56724: ARRAY
56725: PPUSH
56726: CALL_OW 255
56730: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56731: LD_ADDR_VAR 0 10
56735: PUSH
56736: LD_INT 29
56738: PUSH
56739: LD_INT 91
56741: PUSH
56742: LD_INT 49
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: ST_TO_ADDR
// if not result then
56750: LD_VAR 0 3
56754: NOT
56755: IFFALSE 56759
// exit ;
56757: GO 57223
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56759: LD_ADDR_VAR 0 5
56763: PUSH
56764: LD_INT 81
56766: PUSH
56767: LD_VAR 0 8
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PPUSH
56776: CALL_OW 69
56780: ST_TO_ADDR
// for i in result do
56781: LD_ADDR_VAR 0 4
56785: PUSH
56786: LD_VAR 0 3
56790: PUSH
56791: FOR_IN
56792: IFFALSE 57221
// begin tag := GetTag ( i ) + 1 ;
56794: LD_ADDR_VAR 0 9
56798: PUSH
56799: LD_VAR 0 4
56803: PPUSH
56804: CALL_OW 110
56808: PUSH
56809: LD_INT 1
56811: PLUS
56812: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56813: LD_ADDR_VAR 0 7
56817: PUSH
56818: LD_VAR 0 4
56822: PPUSH
56823: CALL_OW 250
56827: PPUSH
56828: LD_VAR 0 4
56832: PPUSH
56833: CALL_OW 251
56837: PPUSH
56838: LD_INT 4
56840: PPUSH
56841: CALL 56414 0 3
56845: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56846: LD_VAR 0 4
56850: PPUSH
56851: CALL_OW 247
56855: PUSH
56856: LD_INT 2
56858: EQUAL
56859: IFFALSE 56871
56861: PUSH
56862: LD_VAR 0 7
56866: PUSH
56867: LD_INT 2
56869: GREATER
56870: AND
56871: IFFALSE 56891
56873: PUSH
56874: LD_VAR 0 4
56878: PPUSH
56879: CALL_OW 264
56883: PUSH
56884: LD_VAR 0 10
56888: IN
56889: NOT
56890: AND
56891: IFFALSE 56930
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56893: LD_VAR 0 4
56897: PPUSH
56898: LD_VAR 0 7
56902: PUSH
56903: LD_INT 1
56905: ARRAY
56906: PUSH
56907: LD_INT 1
56909: ARRAY
56910: PPUSH
56911: LD_VAR 0 7
56915: PUSH
56916: LD_INT 1
56918: ARRAY
56919: PUSH
56920: LD_INT 2
56922: ARRAY
56923: PPUSH
56924: CALL_OW 116
56928: GO 57219
// if path > tag then
56930: LD_VAR 0 2
56934: PUSH
56935: LD_VAR 0 9
56939: GREATER
56940: IFFALSE 57148
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56942: LD_ADDR_VAR 0 6
56946: PUSH
56947: LD_VAR 0 5
56951: PPUSH
56952: LD_INT 91
56954: PUSH
56955: LD_VAR 0 4
56959: PUSH
56960: LD_INT 8
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: PPUSH
56968: CALL_OW 72
56972: ST_TO_ADDR
// if nearEnemy then
56973: LD_VAR 0 6
56977: IFFALSE 57046
// begin if GetWeapon ( i ) = ru_time_lapser then
56979: LD_VAR 0 4
56983: PPUSH
56984: CALL_OW 264
56988: PUSH
56989: LD_INT 49
56991: EQUAL
56992: IFFALSE 57020
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56994: LD_VAR 0 4
56998: PPUSH
56999: LD_VAR 0 6
57003: PPUSH
57004: LD_VAR 0 4
57008: PPUSH
57009: CALL_OW 74
57013: PPUSH
57014: CALL_OW 112
57018: GO 57044
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57020: LD_VAR 0 4
57024: PPUSH
57025: LD_VAR 0 6
57029: PPUSH
57030: LD_VAR 0 4
57034: PPUSH
57035: CALL_OW 74
57039: PPUSH
57040: CALL 58304 0 2
// end else
57044: GO 57146
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57046: LD_VAR 0 4
57050: PPUSH
57051: LD_VAR 0 2
57055: PUSH
57056: LD_VAR 0 9
57060: ARRAY
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PPUSH
57066: LD_VAR 0 2
57070: PUSH
57071: LD_VAR 0 9
57075: ARRAY
57076: PUSH
57077: LD_INT 2
57079: ARRAY
57080: PPUSH
57081: CALL_OW 297
57085: PUSH
57086: LD_INT 6
57088: GREATER
57089: IFFALSE 57132
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57091: LD_VAR 0 4
57095: PPUSH
57096: LD_VAR 0 2
57100: PUSH
57101: LD_VAR 0 9
57105: ARRAY
57106: PUSH
57107: LD_INT 1
57109: ARRAY
57110: PPUSH
57111: LD_VAR 0 2
57115: PUSH
57116: LD_VAR 0 9
57120: ARRAY
57121: PUSH
57122: LD_INT 2
57124: ARRAY
57125: PPUSH
57126: CALL_OW 114
57130: GO 57146
// SetTag ( i , tag ) ;
57132: LD_VAR 0 4
57136: PPUSH
57137: LD_VAR 0 9
57141: PPUSH
57142: CALL_OW 109
// end else
57146: GO 57219
// if enemy then
57148: LD_VAR 0 5
57152: IFFALSE 57219
// begin if GetWeapon ( i ) = ru_time_lapser then
57154: LD_VAR 0 4
57158: PPUSH
57159: CALL_OW 264
57163: PUSH
57164: LD_INT 49
57166: EQUAL
57167: IFFALSE 57195
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57169: LD_VAR 0 4
57173: PPUSH
57174: LD_VAR 0 5
57178: PPUSH
57179: LD_VAR 0 4
57183: PPUSH
57184: CALL_OW 74
57188: PPUSH
57189: CALL_OW 112
57193: GO 57219
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57195: LD_VAR 0 4
57199: PPUSH
57200: LD_VAR 0 5
57204: PPUSH
57205: LD_VAR 0 4
57209: PPUSH
57210: CALL_OW 74
57214: PPUSH
57215: CALL 58304 0 2
// end ; end ;
57219: GO 56791
57221: POP
57222: POP
// end ;
57223: LD_VAR 0 3
57227: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57228: LD_INT 0
57230: PPUSH
57231: PPUSH
57232: PPUSH
// if not unit or IsInUnit ( unit ) then
57233: LD_VAR 0 1
57237: NOT
57238: IFTRUE 57251
57240: PUSH
57241: LD_VAR 0 1
57245: PPUSH
57246: CALL_OW 310
57250: OR
57251: IFFALSE 57255
// exit ;
57253: GO 57346
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57255: LD_ADDR_VAR 0 4
57259: PUSH
57260: LD_VAR 0 1
57264: PPUSH
57265: CALL_OW 250
57269: PPUSH
57270: LD_VAR 0 2
57274: PPUSH
57275: LD_INT 1
57277: PPUSH
57278: CALL_OW 272
57282: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57283: LD_ADDR_VAR 0 5
57287: PUSH
57288: LD_VAR 0 1
57292: PPUSH
57293: CALL_OW 251
57297: PPUSH
57298: LD_VAR 0 2
57302: PPUSH
57303: LD_INT 1
57305: PPUSH
57306: CALL_OW 273
57310: ST_TO_ADDR
// if ValidHex ( x , y ) then
57311: LD_VAR 0 4
57315: PPUSH
57316: LD_VAR 0 5
57320: PPUSH
57321: CALL_OW 488
57325: IFFALSE 57346
// ComTurnXY ( unit , x , y ) ;
57327: LD_VAR 0 1
57331: PPUSH
57332: LD_VAR 0 4
57336: PPUSH
57337: LD_VAR 0 5
57341: PPUSH
57342: CALL_OW 118
// end ;
57346: LD_VAR 0 3
57350: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57351: LD_INT 0
57353: PPUSH
57354: PPUSH
// result := false ;
57355: LD_ADDR_VAR 0 3
57359: PUSH
57360: LD_INT 0
57362: ST_TO_ADDR
// if not units then
57363: LD_VAR 0 2
57367: NOT
57368: IFFALSE 57372
// exit ;
57370: GO 57417
// for i in units do
57372: LD_ADDR_VAR 0 4
57376: PUSH
57377: LD_VAR 0 2
57381: PUSH
57382: FOR_IN
57383: IFFALSE 57415
// if See ( side , i ) then
57385: LD_VAR 0 1
57389: PPUSH
57390: LD_VAR 0 4
57394: PPUSH
57395: CALL_OW 292
57399: IFFALSE 57413
// begin result := true ;
57401: LD_ADDR_VAR 0 3
57405: PUSH
57406: LD_INT 1
57408: ST_TO_ADDR
// exit ;
57409: POP
57410: POP
57411: GO 57417
// end ;
57413: GO 57382
57415: POP
57416: POP
// end ;
57417: LD_VAR 0 3
57421: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57422: LD_INT 0
57424: PPUSH
57425: PPUSH
57426: PPUSH
57427: PPUSH
// if not unit or not points then
57428: LD_VAR 0 1
57432: NOT
57433: IFTRUE 57442
57435: PUSH
57436: LD_VAR 0 2
57440: NOT
57441: OR
57442: IFFALSE 57446
// exit ;
57444: GO 57536
// dist := 99999 ;
57446: LD_ADDR_VAR 0 5
57450: PUSH
57451: LD_INT 99999
57453: ST_TO_ADDR
// for i in points do
57454: LD_ADDR_VAR 0 4
57458: PUSH
57459: LD_VAR 0 2
57463: PUSH
57464: FOR_IN
57465: IFFALSE 57534
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57467: LD_ADDR_VAR 0 6
57471: PUSH
57472: LD_VAR 0 1
57476: PPUSH
57477: LD_VAR 0 4
57481: PUSH
57482: LD_INT 1
57484: ARRAY
57485: PPUSH
57486: LD_VAR 0 4
57490: PUSH
57491: LD_INT 2
57493: ARRAY
57494: PPUSH
57495: CALL_OW 297
57499: ST_TO_ADDR
// if tmpDist < dist then
57500: LD_VAR 0 6
57504: PUSH
57505: LD_VAR 0 5
57509: LESS
57510: IFFALSE 57532
// begin result := i ;
57512: LD_ADDR_VAR 0 3
57516: PUSH
57517: LD_VAR 0 4
57521: ST_TO_ADDR
// dist := tmpDist ;
57522: LD_ADDR_VAR 0 5
57526: PUSH
57527: LD_VAR 0 6
57531: ST_TO_ADDR
// end ; end ;
57532: GO 57464
57534: POP
57535: POP
// end ;
57536: LD_VAR 0 3
57540: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57541: LD_INT 0
57543: PPUSH
// uc_side := side ;
57544: LD_ADDR_OWVAR 20
57548: PUSH
57549: LD_VAR 0 1
57553: ST_TO_ADDR
// uc_nation := 3 ;
57554: LD_ADDR_OWVAR 21
57558: PUSH
57559: LD_INT 3
57561: ST_TO_ADDR
// vc_chassis := 25 ;
57562: LD_ADDR_OWVAR 37
57566: PUSH
57567: LD_INT 25
57569: ST_TO_ADDR
// vc_engine := engine_siberite ;
57570: LD_ADDR_OWVAR 39
57574: PUSH
57575: LD_INT 3
57577: ST_TO_ADDR
// vc_control := control_computer ;
57578: LD_ADDR_OWVAR 38
57582: PUSH
57583: LD_INT 3
57585: ST_TO_ADDR
// vc_weapon := 59 ;
57586: LD_ADDR_OWVAR 40
57590: PUSH
57591: LD_INT 59
57593: ST_TO_ADDR
// result := CreateVehicle ;
57594: LD_ADDR_VAR 0 5
57598: PUSH
57599: CALL_OW 45
57603: ST_TO_ADDR
// SetDir ( result , d ) ;
57604: LD_VAR 0 5
57608: PPUSH
57609: LD_VAR 0 4
57613: PPUSH
57614: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57618: LD_VAR 0 5
57622: PPUSH
57623: LD_VAR 0 2
57627: PPUSH
57628: LD_VAR 0 3
57632: PPUSH
57633: LD_INT 0
57635: PPUSH
57636: CALL_OW 48
// end ;
57640: LD_VAR 0 5
57644: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57645: LD_INT 0
57647: PPUSH
57648: PPUSH
57649: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57650: LD_ADDR_VAR 0 2
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57673: LD_VAR 0 1
57677: NOT
57678: IFTRUE 57711
57680: PUSH
57681: LD_VAR 0 1
57685: PPUSH
57686: CALL_OW 264
57690: PUSH
57691: LD_INT 12
57693: PUSH
57694: LD_INT 51
57696: PUSH
57697: LD_INT 32
57699: PUSH
57700: LD_INT 89
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: IN
57709: NOT
57710: OR
57711: IFFALSE 57715
// exit ;
57713: GO 57813
// for i := 1 to 3 do
57715: LD_ADDR_VAR 0 3
57719: PUSH
57720: DOUBLE
57721: LD_INT 1
57723: DEC
57724: ST_TO_ADDR
57725: LD_INT 3
57727: PUSH
57728: FOR_TO
57729: IFFALSE 57811
// begin tmp := GetCargo ( cargo , i ) ;
57731: LD_ADDR_VAR 0 4
57735: PUSH
57736: LD_VAR 0 1
57740: PPUSH
57741: LD_VAR 0 3
57745: PPUSH
57746: CALL_OW 289
57750: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57751: LD_ADDR_VAR 0 2
57755: PUSH
57756: LD_VAR 0 2
57760: PPUSH
57761: LD_VAR 0 3
57765: PPUSH
57766: LD_VAR 0 4
57770: PPUSH
57771: CALL_OW 1
57775: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57776: LD_ADDR_VAR 0 2
57780: PUSH
57781: LD_VAR 0 2
57785: PPUSH
57786: LD_INT 4
57788: PPUSH
57789: LD_VAR 0 2
57793: PUSH
57794: LD_INT 4
57796: ARRAY
57797: PUSH
57798: LD_VAR 0 4
57802: PLUS
57803: PPUSH
57804: CALL_OW 1
57808: ST_TO_ADDR
// end ;
57809: GO 57728
57811: POP
57812: POP
// end ;
57813: LD_VAR 0 2
57817: RET
// export function Length ( array ) ; begin
57818: LD_INT 0
57820: PPUSH
// result := array + 0 ;
57821: LD_ADDR_VAR 0 2
57825: PUSH
57826: LD_VAR 0 1
57830: PUSH
57831: LD_INT 0
57833: PLUS
57834: ST_TO_ADDR
// end ;
57835: LD_VAR 0 2
57839: RET
// export function PrepareArray ( array ) ; begin
57840: LD_INT 0
57842: PPUSH
// result := array diff 0 ;
57843: LD_ADDR_VAR 0 2
57847: PUSH
57848: LD_VAR 0 1
57852: PUSH
57853: LD_INT 0
57855: DIFF
57856: ST_TO_ADDR
// if not result [ 1 ] then
57857: LD_VAR 0 2
57861: PUSH
57862: LD_INT 1
57864: ARRAY
57865: NOT
57866: IFFALSE 57886
// result := Delete ( result , 1 ) ;
57868: LD_ADDR_VAR 0 2
57872: PUSH
57873: LD_VAR 0 2
57877: PPUSH
57878: LD_INT 1
57880: PPUSH
57881: CALL_OW 3
57885: ST_TO_ADDR
// end ;
57886: LD_VAR 0 2
57890: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57891: LD_INT 0
57893: PPUSH
57894: PPUSH
57895: PPUSH
57896: PPUSH
// sibRocketRange := 25 ;
57897: LD_ADDR_VAR 0 6
57901: PUSH
57902: LD_INT 25
57904: ST_TO_ADDR
// result := false ;
57905: LD_ADDR_VAR 0 4
57909: PUSH
57910: LD_INT 0
57912: ST_TO_ADDR
// for i := 0 to 5 do
57913: LD_ADDR_VAR 0 5
57917: PUSH
57918: DOUBLE
57919: LD_INT 0
57921: DEC
57922: ST_TO_ADDR
57923: LD_INT 5
57925: PUSH
57926: FOR_TO
57927: IFFALSE 57994
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57929: LD_VAR 0 1
57933: PPUSH
57934: LD_VAR 0 5
57938: PPUSH
57939: LD_VAR 0 6
57943: PPUSH
57944: CALL_OW 272
57948: PPUSH
57949: LD_VAR 0 2
57953: PPUSH
57954: LD_VAR 0 5
57958: PPUSH
57959: LD_VAR 0 6
57963: PPUSH
57964: CALL_OW 273
57968: PPUSH
57969: LD_VAR 0 3
57973: PPUSH
57974: CALL_OW 309
57978: IFFALSE 57992
// begin result := true ;
57980: LD_ADDR_VAR 0 4
57984: PUSH
57985: LD_INT 1
57987: ST_TO_ADDR
// exit ;
57988: POP
57989: POP
57990: GO 57996
// end ;
57992: GO 57926
57994: POP
57995: POP
// end ;
57996: LD_VAR 0 4
58000: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58001: LD_INT 0
58003: PPUSH
58004: PPUSH
58005: PPUSH
// if btype = b_depot then
58006: LD_VAR 0 2
58010: PUSH
58011: LD_INT 0
58013: EQUAL
58014: IFFALSE 58026
// begin result := true ;
58016: LD_ADDR_VAR 0 3
58020: PUSH
58021: LD_INT 1
58023: ST_TO_ADDR
// exit ;
58024: GO 58146
// end ; pom := GetBase ( depot ) ;
58026: LD_ADDR_VAR 0 4
58030: PUSH
58031: LD_VAR 0 1
58035: PPUSH
58036: CALL_OW 274
58040: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58041: LD_ADDR_VAR 0 5
58045: PUSH
58046: LD_VAR 0 2
58050: PPUSH
58051: LD_VAR 0 1
58055: PPUSH
58056: CALL_OW 248
58060: PPUSH
58061: CALL_OW 450
58065: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58066: LD_ADDR_VAR 0 3
58070: PUSH
58071: LD_VAR 0 4
58075: PPUSH
58076: LD_INT 1
58078: PPUSH
58079: CALL_OW 275
58083: PUSH
58084: LD_VAR 0 5
58088: PUSH
58089: LD_INT 1
58091: ARRAY
58092: GREATEREQUAL
58093: IFFALSE 58119
58095: PUSH
58096: LD_VAR 0 4
58100: PPUSH
58101: LD_INT 2
58103: PPUSH
58104: CALL_OW 275
58108: PUSH
58109: LD_VAR 0 5
58113: PUSH
58114: LD_INT 2
58116: ARRAY
58117: GREATEREQUAL
58118: AND
58119: IFFALSE 58145
58121: PUSH
58122: LD_VAR 0 4
58126: PPUSH
58127: LD_INT 3
58129: PPUSH
58130: CALL_OW 275
58134: PUSH
58135: LD_VAR 0 5
58139: PUSH
58140: LD_INT 3
58142: ARRAY
58143: GREATEREQUAL
58144: AND
58145: ST_TO_ADDR
// end ;
58146: LD_VAR 0 3
58150: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58151: LD_INT 0
58153: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58154: LD_VAR 0 1
58158: PPUSH
58159: LD_VAR 0 2
58163: PPUSH
58164: LD_INT 0
58166: PPUSH
58167: LD_INT 0
58169: PPUSH
58170: LD_INT 1
58172: PPUSH
58173: LD_INT 0
58175: PPUSH
58176: CALL_OW 587
// end ;
58180: LD_VAR 0 3
58184: RET
// export function CenterOnNow ( unit ) ; begin
58185: LD_INT 0
58187: PPUSH
// result := IsInUnit ( unit ) ;
58188: LD_ADDR_VAR 0 2
58192: PUSH
58193: LD_VAR 0 1
58197: PPUSH
58198: CALL_OW 310
58202: ST_TO_ADDR
// if not result then
58203: LD_VAR 0 2
58207: NOT
58208: IFFALSE 58220
// result := unit ;
58210: LD_ADDR_VAR 0 2
58214: PUSH
58215: LD_VAR 0 1
58219: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58220: LD_VAR 0 1
58224: PPUSH
58225: CALL_OW 87
// end ;
58229: LD_VAR 0 2
58233: RET
// export function ComMoveHex ( unit , hex ) ; begin
58234: LD_INT 0
58236: PPUSH
// if not hex then
58237: LD_VAR 0 2
58241: NOT
58242: IFFALSE 58246
// exit ;
58244: GO 58299
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58246: LD_VAR 0 2
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PPUSH
58255: LD_VAR 0 2
58259: PUSH
58260: LD_INT 2
58262: ARRAY
58263: PPUSH
58264: CALL_OW 428
58268: IFFALSE 58272
// exit ;
58270: GO 58299
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58272: LD_VAR 0 1
58276: PPUSH
58277: LD_VAR 0 2
58281: PUSH
58282: LD_INT 1
58284: ARRAY
58285: PPUSH
58286: LD_VAR 0 2
58290: PUSH
58291: LD_INT 2
58293: ARRAY
58294: PPUSH
58295: CALL_OW 111
// end ;
58299: LD_VAR 0 3
58303: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58304: LD_INT 0
58306: PPUSH
58307: PPUSH
58308: PPUSH
// if not unit or not enemy then
58309: LD_VAR 0 1
58313: NOT
58314: IFTRUE 58323
58316: PUSH
58317: LD_VAR 0 2
58321: NOT
58322: OR
58323: IFFALSE 58327
// exit ;
58325: GO 58453
// x := GetX ( enemy ) ;
58327: LD_ADDR_VAR 0 4
58331: PUSH
58332: LD_VAR 0 2
58336: PPUSH
58337: CALL_OW 250
58341: ST_TO_ADDR
// y := GetY ( enemy ) ;
58342: LD_ADDR_VAR 0 5
58346: PUSH
58347: LD_VAR 0 2
58351: PPUSH
58352: CALL_OW 251
58356: ST_TO_ADDR
// if ValidHex ( x , y ) then
58357: LD_VAR 0 4
58361: PPUSH
58362: LD_VAR 0 5
58366: PPUSH
58367: CALL_OW 488
58371: IFFALSE 58453
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58373: LD_VAR 0 2
58377: PPUSH
58378: CALL_OW 247
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: IN
58393: IFTRUE 58416
58395: PUSH
58396: LD_VAR 0 1
58400: PPUSH
58401: CALL_OW 255
58405: PPUSH
58406: LD_VAR 0 2
58410: PPUSH
58411: CALL_OW 292
58415: OR
58416: IFFALSE 58434
// ComAttackUnit ( unit , enemy ) else
58418: LD_VAR 0 1
58422: PPUSH
58423: LD_VAR 0 2
58427: PPUSH
58428: CALL_OW 115
58432: GO 58453
// ComAgressiveMove ( unit , x , y ) ;
58434: LD_VAR 0 1
58438: PPUSH
58439: LD_VAR 0 4
58443: PPUSH
58444: LD_VAR 0 5
58448: PPUSH
58449: CALL_OW 114
// end ;
58453: LD_VAR 0 3
58457: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58458: LD_INT 0
58460: PPUSH
58461: PPUSH
58462: PPUSH
// list := AreaToList ( area , 0 ) ;
58463: LD_ADDR_VAR 0 5
58467: PUSH
58468: LD_VAR 0 1
58472: PPUSH
58473: LD_INT 0
58475: PPUSH
58476: CALL_OW 517
58480: ST_TO_ADDR
// if not list then
58481: LD_VAR 0 5
58485: NOT
58486: IFFALSE 58490
// exit ;
58488: GO 58620
// if all then
58490: LD_VAR 0 2
58494: IFFALSE 58582
// begin for i := 1 to list [ 1 ] do
58496: LD_ADDR_VAR 0 4
58500: PUSH
58501: DOUBLE
58502: LD_INT 1
58504: DEC
58505: ST_TO_ADDR
58506: LD_VAR 0 5
58510: PUSH
58511: LD_INT 1
58513: ARRAY
58514: PUSH
58515: FOR_TO
58516: IFFALSE 58578
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58518: LD_ADDR_VAR 0 3
58522: PUSH
58523: LD_VAR 0 3
58527: PPUSH
58528: LD_VAR 0 3
58532: PUSH
58533: LD_INT 1
58535: PLUS
58536: PPUSH
58537: LD_VAR 0 5
58541: PUSH
58542: LD_INT 1
58544: ARRAY
58545: PUSH
58546: LD_VAR 0 4
58550: ARRAY
58551: PUSH
58552: LD_VAR 0 5
58556: PUSH
58557: LD_INT 2
58559: ARRAY
58560: PUSH
58561: LD_VAR 0 4
58565: ARRAY
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PPUSH
58571: CALL_OW 1
58575: ST_TO_ADDR
58576: GO 58515
58578: POP
58579: POP
// exit ;
58580: GO 58620
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58582: LD_ADDR_VAR 0 3
58586: PUSH
58587: LD_VAR 0 5
58591: PUSH
58592: LD_INT 1
58594: ARRAY
58595: PUSH
58596: LD_INT 1
58598: ARRAY
58599: PUSH
58600: LD_VAR 0 5
58604: PUSH
58605: LD_INT 2
58607: ARRAY
58608: PUSH
58609: LD_INT 1
58611: ARRAY
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: EMPTY
58618: LIST
58619: ST_TO_ADDR
// end ;
58620: LD_VAR 0 3
58624: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58625: LD_INT 0
58627: PPUSH
58628: PPUSH
// list := AreaToList ( area , 0 ) ;
58629: LD_ADDR_VAR 0 4
58633: PUSH
58634: LD_VAR 0 1
58638: PPUSH
58639: LD_INT 0
58641: PPUSH
58642: CALL_OW 517
58646: ST_TO_ADDR
// if not list then
58647: LD_VAR 0 4
58651: NOT
58652: IFFALSE 58656
// exit ;
58654: GO 58697
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58656: LD_ADDR_VAR 0 3
58660: PUSH
58661: LD_VAR 0 4
58665: PUSH
58666: LD_INT 1
58668: ARRAY
58669: PUSH
58670: LD_INT 1
58672: ARRAY
58673: PUSH
58674: LD_VAR 0 4
58678: PUSH
58679: LD_INT 2
58681: ARRAY
58682: PUSH
58683: LD_INT 1
58685: ARRAY
58686: PUSH
58687: LD_VAR 0 2
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: ST_TO_ADDR
// end ;
58697: LD_VAR 0 3
58701: RET
// export function First ( array ) ; begin
58702: LD_INT 0
58704: PPUSH
// if not array then
58705: LD_VAR 0 1
58709: NOT
58710: IFFALSE 58714
// exit ;
58712: GO 58728
// result := array [ 1 ] ;
58714: LD_ADDR_VAR 0 2
58718: PUSH
58719: LD_VAR 0 1
58723: PUSH
58724: LD_INT 1
58726: ARRAY
58727: ST_TO_ADDR
// end ;
58728: LD_VAR 0 2
58732: RET
// export function Last ( array ) ; begin
58733: LD_INT 0
58735: PPUSH
// if not array then
58736: LD_VAR 0 1
58740: NOT
58741: IFFALSE 58745
// exit ;
58743: GO 58761
// result := array [ array ] ;
58745: LD_ADDR_VAR 0 2
58749: PUSH
58750: LD_VAR 0 1
58754: PUSH
58755: LD_VAR 0 1
58759: ARRAY
58760: ST_TO_ADDR
// end ;
58761: LD_VAR 0 2
58765: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58766: LD_INT 0
58768: PPUSH
58769: PPUSH
// result := [ ] ;
58770: LD_ADDR_VAR 0 5
58774: PUSH
58775: EMPTY
58776: ST_TO_ADDR
// if not array then
58777: LD_VAR 0 1
58781: NOT
58782: IFFALSE 58786
// exit ;
58784: GO 58898
// for i := 1 to array do
58786: LD_ADDR_VAR 0 6
58790: PUSH
58791: DOUBLE
58792: LD_INT 1
58794: DEC
58795: ST_TO_ADDR
58796: LD_VAR 0 1
58800: PUSH
58801: FOR_TO
58802: IFFALSE 58896
// if array [ i ] [ index ] = value then
58804: LD_VAR 0 1
58808: PUSH
58809: LD_VAR 0 6
58813: ARRAY
58814: PUSH
58815: LD_VAR 0 2
58819: ARRAY
58820: PUSH
58821: LD_VAR 0 3
58825: EQUAL
58826: IFFALSE 58894
// begin if indexColumn then
58828: LD_VAR 0 4
58832: IFFALSE 58868
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58834: LD_ADDR_VAR 0 5
58838: PUSH
58839: LD_VAR 0 5
58843: PPUSH
58844: LD_VAR 0 1
58848: PUSH
58849: LD_VAR 0 6
58853: ARRAY
58854: PUSH
58855: LD_VAR 0 4
58859: ARRAY
58860: PPUSH
58861: CALL 53906 0 2
58865: ST_TO_ADDR
58866: GO 58894
// result := Join ( result , array [ i ] ) ;
58868: LD_ADDR_VAR 0 5
58872: PUSH
58873: LD_VAR 0 5
58877: PPUSH
58878: LD_VAR 0 1
58882: PUSH
58883: LD_VAR 0 6
58887: ARRAY
58888: PPUSH
58889: CALL 53906 0 2
58893: ST_TO_ADDR
// end ;
58894: GO 58801
58896: POP
58897: POP
// end ;
58898: LD_VAR 0 5
58902: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58903: LD_INT 0
58905: PPUSH
// if not vehicles or not parkingPoint then
58906: LD_VAR 0 1
58910: NOT
58911: IFTRUE 58920
58913: PUSH
58914: LD_VAR 0 2
58918: NOT
58919: OR
58920: IFFALSE 58924
// exit ;
58922: GO 59022
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58924: LD_ADDR_VAR 0 1
58928: PUSH
58929: LD_VAR 0 1
58933: PPUSH
58934: LD_INT 50
58936: PUSH
58937: EMPTY
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: PUSH
58943: LD_INT 92
58945: PUSH
58946: LD_VAR 0 2
58950: PUSH
58951: LD_INT 1
58953: ARRAY
58954: PUSH
58955: LD_VAR 0 2
58959: PUSH
58960: LD_INT 2
58962: ARRAY
58963: PUSH
58964: LD_INT 8
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 72
58985: ST_TO_ADDR
// if not vehicles then
58986: LD_VAR 0 1
58990: NOT
58991: IFFALSE 58995
// exit ;
58993: GO 59022
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
58995: LD_VAR 0 1
58999: PPUSH
59000: LD_VAR 0 2
59004: PUSH
59005: LD_INT 1
59007: ARRAY
59008: PPUSH
59009: LD_VAR 0 2
59013: PUSH
59014: LD_INT 2
59016: ARRAY
59017: PPUSH
59018: CALL_OW 111
// end ;
59022: LD_VAR 0 3
59026: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59027: LD_INT 0
59029: PPUSH
59030: PPUSH
59031: PPUSH
// if not side or not area then
59032: LD_VAR 0 1
59036: NOT
59037: IFTRUE 59046
59039: PUSH
59040: LD_VAR 0 2
59044: NOT
59045: OR
59046: IFFALSE 59050
// exit ;
59048: GO 59169
// tmp := AreaToList ( area , 0 ) ;
59050: LD_ADDR_VAR 0 5
59054: PUSH
59055: LD_VAR 0 2
59059: PPUSH
59060: LD_INT 0
59062: PPUSH
59063: CALL_OW 517
59067: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59068: LD_ADDR_VAR 0 4
59072: PUSH
59073: DOUBLE
59074: LD_INT 1
59076: DEC
59077: ST_TO_ADDR
59078: LD_VAR 0 5
59082: PUSH
59083: LD_INT 1
59085: ARRAY
59086: PUSH
59087: FOR_TO
59088: IFFALSE 59167
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59090: LD_VAR 0 5
59094: PUSH
59095: LD_INT 1
59097: ARRAY
59098: PUSH
59099: LD_VAR 0 4
59103: ARRAY
59104: PPUSH
59105: LD_VAR 0 5
59109: PUSH
59110: LD_INT 2
59112: ARRAY
59113: PUSH
59114: LD_VAR 0 4
59118: ARRAY
59119: PPUSH
59120: CALL_OW 351
59124: IFFALSE 59165
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59126: LD_VAR 0 5
59130: PUSH
59131: LD_INT 1
59133: ARRAY
59134: PUSH
59135: LD_VAR 0 4
59139: ARRAY
59140: PPUSH
59141: LD_VAR 0 5
59145: PUSH
59146: LD_INT 2
59148: ARRAY
59149: PUSH
59150: LD_VAR 0 4
59154: ARRAY
59155: PPUSH
59156: LD_VAR 0 1
59160: PPUSH
59161: CALL_OW 244
// end ;
59165: GO 59087
59167: POP
59168: POP
// end ;
59169: LD_VAR 0 3
59173: RET
// export function UniqueArray ( array ) ; var i ; begin
59174: LD_INT 0
59176: PPUSH
59177: PPUSH
// result := [ ] ;
59178: LD_ADDR_VAR 0 2
59182: PUSH
59183: EMPTY
59184: ST_TO_ADDR
// if not array then
59185: LD_VAR 0 1
59189: NOT
59190: IFFALSE 59194
// exit ;
59192: GO 59255
// for i := 1 to array do
59194: LD_ADDR_VAR 0 3
59198: PUSH
59199: DOUBLE
59200: LD_INT 1
59202: DEC
59203: ST_TO_ADDR
59204: LD_VAR 0 1
59208: PUSH
59209: FOR_TO
59210: IFFALSE 59253
// if not array [ i ] in result then
59212: LD_VAR 0 1
59216: PUSH
59217: LD_VAR 0 3
59221: ARRAY
59222: PUSH
59223: LD_VAR 0 2
59227: IN
59228: NOT
59229: IFFALSE 59251
// result := Join ( result , i ) ;
59231: LD_ADDR_VAR 0 2
59235: PUSH
59236: LD_VAR 0 2
59240: PPUSH
59241: LD_VAR 0 3
59245: PPUSH
59246: CALL 53906 0 2
59250: ST_TO_ADDR
59251: GO 59209
59253: POP
59254: POP
// end ; end_of_file
59255: LD_VAR 0 2
59259: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59260: LD_INT 0
59262: PPUSH
// ComRadiation ( un ) ;
59263: LD_VAR 0 1
59267: PPUSH
59268: CALL 60430 0 1
// end ;
59272: LD_VAR 0 2
59276: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59277: LD_INT 0
59279: PPUSH
// ComRadiation ( un ) ;
59280: LD_VAR 0 1
59284: PPUSH
59285: CALL 60430 0 1
// end ;
59289: LD_VAR 0 2
59293: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59294: LD_INT 0
59296: PPUSH
// end ;
59297: LD_VAR 0 4
59301: RET
// export function SOS_Command ( cmd ) ; begin
59302: LD_INT 0
59304: PPUSH
// end ;
59305: LD_VAR 0 2
59309: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59310: LD_INT 0
59312: PPUSH
// end ;
59313: LD_VAR 0 6
59317: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59318: LD_INT 0
59320: PPUSH
59321: PPUSH
59322: PPUSH
59323: PPUSH
59324: PPUSH
// if not vehicle or not factory then
59325: LD_VAR 0 1
59329: NOT
59330: IFTRUE 59339
59332: PUSH
59333: LD_VAR 0 2
59337: NOT
59338: OR
59339: IFFALSE 59343
// exit ;
59341: GO 60005
// weapon := GetWeapon ( vehicle ) ;
59343: LD_ADDR_VAR 0 7
59347: PUSH
59348: LD_VAR 0 1
59352: PPUSH
59353: CALL_OW 264
59357: ST_TO_ADDR
// if weapon = ar_miner then
59358: LD_VAR 0 7
59362: PUSH
59363: LD_INT 81
59365: EQUAL
59366: IFFALSE 59423
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59368: LD_ADDR_EXP 50
59372: PUSH
59373: LD_EXP 50
59377: PPUSH
59378: LD_EXP 50
59382: PUSH
59383: LD_INT 1
59385: PLUS
59386: PPUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: CALL_OW 1
59396: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59397: LD_ADDR_EXP 51
59401: PUSH
59402: LD_EXP 51
59406: PPUSH
59407: LD_EXP 51
59411: PUSH
59412: LD_INT 1
59414: PLUS
59415: PPUSH
59416: EMPTY
59417: PPUSH
59418: CALL_OW 1
59422: ST_TO_ADDR
// end ; if not factoryWaypoints then
59423: LD_EXP 53
59427: NOT
59428: IFFALSE 59432
// exit ;
59430: GO 60005
// for i := 1 to Count ( factoryWaypoints ) do
59432: LD_ADDR_VAR 0 4
59436: PUSH
59437: DOUBLE
59438: LD_INT 1
59440: DEC
59441: ST_TO_ADDR
59442: LD_EXP 53
59446: PPUSH
59447: CALL 17940 0 1
59451: PUSH
59452: FOR_TO
59453: IFFALSE 60003
// if factoryWaypoints [ i ] [ 2 ] = factory then
59455: LD_EXP 53
59459: PUSH
59460: LD_VAR 0 4
59464: ARRAY
59465: PUSH
59466: LD_INT 2
59468: ARRAY
59469: PUSH
59470: LD_VAR 0 2
59474: EQUAL
59475: IFFALSE 60001
// begin if GetControl ( vehicle ) = control_manual then
59477: LD_VAR 0 1
59481: PPUSH
59482: CALL_OW 263
59486: PUSH
59487: LD_INT 1
59489: EQUAL
59490: IFFALSE 59854
// begin driver := IsDrivenBy ( vehicle ) ;
59492: LD_ADDR_VAR 0 5
59496: PUSH
59497: LD_VAR 0 1
59501: PPUSH
59502: CALL_OW 311
59506: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59507: LD_VAR 0 5
59511: PUSH
59512: LD_EXP 54
59516: IN
59517: IFTRUE 59531
59519: PUSH
59520: LD_VAR 0 1
59524: PUSH
59525: LD_EXP 54
59529: IN
59530: OR
59531: IFFALSE 59537
// exit ;
59533: POP
59534: POP
59535: GO 60005
// if not HasTask ( driver ) then
59537: LD_VAR 0 5
59541: PPUSH
59542: CALL_OW 314
59546: NOT
59547: IFFALSE 59852
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59549: LD_ADDR_EXP 54
59553: PUSH
59554: LD_EXP 54
59558: PPUSH
59559: LD_VAR 0 5
59563: PPUSH
59564: CALL 53906 0 2
59568: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59569: LD_ADDR_EXP 54
59573: PUSH
59574: LD_EXP 54
59578: PPUSH
59579: LD_VAR 0 1
59583: PPUSH
59584: CALL 53906 0 2
59588: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59589: LD_ADDR_VAR 0 6
59593: PUSH
59594: LD_EXP 53
59598: PUSH
59599: LD_VAR 0 4
59603: ARRAY
59604: PUSH
59605: LD_INT 3
59607: ARRAY
59608: PPUSH
59609: LD_EXP 53
59613: PUSH
59614: LD_VAR 0 4
59618: ARRAY
59619: PUSH
59620: LD_INT 4
59622: ARRAY
59623: PPUSH
59624: CALL_OW 428
59628: ST_TO_ADDR
// if hex then
59629: LD_VAR 0 6
59633: IFFALSE 59651
// ComMoveUnit ( driver , hex ) else
59635: LD_VAR 0 5
59639: PPUSH
59640: LD_VAR 0 6
59644: PPUSH
59645: CALL_OW 112
59649: GO 59735
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59651: LD_VAR 0 1
59655: PPUSH
59656: LD_EXP 53
59660: PUSH
59661: LD_VAR 0 4
59665: ARRAY
59666: PUSH
59667: LD_INT 3
59669: ARRAY
59670: PPUSH
59671: LD_EXP 53
59675: PUSH
59676: LD_VAR 0 4
59680: ARRAY
59681: PUSH
59682: LD_INT 4
59684: ARRAY
59685: PPUSH
59686: CALL_OW 297
59690: PUSH
59691: LD_INT 0
59693: GREATER
59694: IFFALSE 59735
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59696: LD_VAR 0 5
59700: PPUSH
59701: LD_EXP 53
59705: PUSH
59706: LD_VAR 0 4
59710: ARRAY
59711: PUSH
59712: LD_INT 3
59714: ARRAY
59715: PPUSH
59716: LD_EXP 53
59720: PUSH
59721: LD_VAR 0 4
59725: ARRAY
59726: PUSH
59727: LD_INT 4
59729: ARRAY
59730: PPUSH
59731: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59735: LD_VAR 0 5
59739: PPUSH
59740: CALL_OW 181
// if Multiplayer then
59744: LD_OWVAR 4
59748: IFFALSE 59797
// begin repeat wait ( 10 ) ;
59750: LD_INT 10
59752: PPUSH
59753: CALL_OW 67
// until not IsInUnit ( driver ) ;
59757: LD_VAR 0 5
59761: PPUSH
59762: CALL_OW 310
59766: NOT
59767: IFFALSE 59750
// if not HasTask ( driver ) then
59769: LD_VAR 0 5
59773: PPUSH
59774: CALL_OW 314
59778: NOT
59779: IFFALSE 59795
// ComEnterUnit ( driver , factory ) ;
59781: LD_VAR 0 5
59785: PPUSH
59786: LD_VAR 0 2
59790: PPUSH
59791: CALL_OW 120
// end else
59795: GO 59811
// AddComEnterUnit ( driver , factory ) ;
59797: LD_VAR 0 5
59801: PPUSH
59802: LD_VAR 0 2
59806: PPUSH
59807: CALL_OW 180
// wait ( 0 0$1 ) ;
59811: LD_INT 35
59813: PPUSH
59814: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59818: LD_ADDR_EXP 54
59822: PUSH
59823: LD_EXP 54
59827: PUSH
59828: LD_VAR 0 5
59832: DIFF
59833: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59834: LD_ADDR_EXP 54
59838: PUSH
59839: LD_EXP 54
59843: PUSH
59844: LD_VAR 0 1
59848: DIFF
59849: ST_TO_ADDR
// break ;
59850: GO 60003
// end ; end else
59852: GO 60001
// if GetControl ( vehicle ) = control_remote then
59854: LD_VAR 0 1
59858: PPUSH
59859: CALL_OW 263
59863: PUSH
59864: LD_INT 2
59866: EQUAL
59867: IFFALSE 59953
// begin wait ( 0 0$2 ) ;
59869: LD_INT 70
59871: PPUSH
59872: CALL_OW 67
// repeat wait ( 10 ) ;
59876: LD_INT 10
59878: PPUSH
59879: CALL_OW 67
// Connect ( vehicle ) ;
59883: LD_VAR 0 1
59887: PPUSH
59888: CALL 24218 0 1
// until IsControledBy ( vehicle ) ;
59892: LD_VAR 0 1
59896: PPUSH
59897: CALL_OW 312
59901: IFFALSE 59876
// wait ( 10 ) ;
59903: LD_INT 10
59905: PPUSH
59906: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59910: LD_VAR 0 1
59914: PPUSH
59915: LD_EXP 53
59919: PUSH
59920: LD_VAR 0 4
59924: ARRAY
59925: PUSH
59926: LD_INT 3
59928: ARRAY
59929: PPUSH
59930: LD_EXP 53
59934: PUSH
59935: LD_VAR 0 4
59939: ARRAY
59940: PUSH
59941: LD_INT 4
59943: ARRAY
59944: PPUSH
59945: CALL_OW 111
// break ;
59949: GO 60003
// end else
59951: GO 60001
// begin wait ( 0 0$3 ) ;
59953: LD_INT 105
59955: PPUSH
59956: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59960: LD_VAR 0 1
59964: PPUSH
59965: LD_EXP 53
59969: PUSH
59970: LD_VAR 0 4
59974: ARRAY
59975: PUSH
59976: LD_INT 3
59978: ARRAY
59979: PPUSH
59980: LD_EXP 53
59984: PUSH
59985: LD_VAR 0 4
59989: ARRAY
59990: PUSH
59991: LD_INT 4
59993: ARRAY
59994: PPUSH
59995: CALL_OW 111
// break ;
59999: GO 60003
// end ; end ;
60001: GO 59452
60003: POP
60004: POP
// end ;
60005: LD_VAR 0 3
60009: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60010: LD_INT 0
60012: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60013: LD_VAR 0 1
60017: PUSH
60018: LD_INT 250
60020: EQUAL
60021: IFFALSE 60038
60023: PUSH
60024: LD_VAR 0 2
60028: PPUSH
60029: CALL_OW 264
60033: PUSH
60034: LD_INT 81
60036: EQUAL
60037: AND
60038: IFFALSE 60059
// MinerPlaceMine ( unit , x , y ) ;
60040: LD_VAR 0 2
60044: PPUSH
60045: LD_VAR 0 4
60049: PPUSH
60050: LD_VAR 0 5
60054: PPUSH
60055: CALL 63340 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60059: LD_VAR 0 1
60063: PUSH
60064: LD_INT 251
60066: EQUAL
60067: IFFALSE 60084
60069: PUSH
60070: LD_VAR 0 2
60074: PPUSH
60075: CALL_OW 264
60079: PUSH
60080: LD_INT 81
60082: EQUAL
60083: AND
60084: IFFALSE 60105
// MinerDetonateMine ( unit , x , y ) ;
60086: LD_VAR 0 2
60090: PPUSH
60091: LD_VAR 0 4
60095: PPUSH
60096: LD_VAR 0 5
60100: PPUSH
60101: CALL 63747 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60105: LD_VAR 0 1
60109: PUSH
60110: LD_INT 252
60112: EQUAL
60113: IFFALSE 60130
60115: PUSH
60116: LD_VAR 0 2
60120: PPUSH
60121: CALL_OW 264
60125: PUSH
60126: LD_INT 81
60128: EQUAL
60129: AND
60130: IFFALSE 60151
// MinerCreateMinefield ( unit , x , y ) ;
60132: LD_VAR 0 2
60136: PPUSH
60137: LD_VAR 0 4
60141: PPUSH
60142: LD_VAR 0 5
60146: PPUSH
60147: CALL 63979 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60151: LD_VAR 0 1
60155: PUSH
60156: LD_INT 253
60158: EQUAL
60159: IFFALSE 60176
60161: PUSH
60162: LD_VAR 0 2
60166: PPUSH
60167: CALL_OW 257
60171: PUSH
60172: LD_INT 5
60174: EQUAL
60175: AND
60176: IFFALSE 60197
// ComBinocular ( unit , x , y ) ;
60178: LD_VAR 0 2
60182: PPUSH
60183: LD_VAR 0 4
60187: PPUSH
60188: LD_VAR 0 5
60192: PPUSH
60193: CALL 64354 0 3
// if selectedUnit then
60197: LD_VAR 0 3
60201: IFFALSE 60261
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60203: LD_VAR 0 1
60207: PUSH
60208: LD_INT 254
60210: EQUAL
60211: IFFALSE 60228
60213: PUSH
60214: LD_VAR 0 2
60218: PPUSH
60219: CALL_OW 264
60223: PUSH
60224: LD_INT 99
60226: EQUAL
60227: AND
60228: IFFALSE 60245
60230: PUSH
60231: LD_VAR 0 3
60235: PPUSH
60236: CALL_OW 263
60240: PUSH
60241: LD_INT 3
60243: EQUAL
60244: AND
60245: IFFALSE 60261
// HackDestroyVehicle ( unit , selectedUnit ) ;
60247: LD_VAR 0 2
60251: PPUSH
60252: LD_VAR 0 3
60256: PPUSH
60257: CALL 62551 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60261: LD_VAR 0 1
60265: PUSH
60266: LD_INT 255
60268: EQUAL
60269: IFFALSE 60293
60271: PUSH
60272: LD_VAR 0 2
60276: PPUSH
60277: CALL_OW 264
60281: PUSH
60282: LD_INT 14
60284: PUSH
60285: LD_INT 53
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: IN
60292: AND
60293: IFFALSE 60311
60295: PUSH
60296: LD_VAR 0 4
60300: PPUSH
60301: LD_VAR 0 5
60305: PPUSH
60306: CALL_OW 488
60310: AND
60311: IFFALSE 60335
// CutTreeXYR ( unit , x , y , 12 ) ;
60313: LD_VAR 0 2
60317: PPUSH
60318: LD_VAR 0 4
60322: PPUSH
60323: LD_VAR 0 5
60327: PPUSH
60328: LD_INT 12
60330: PPUSH
60331: CALL 60526 0 4
// if cmd = 256 then
60335: LD_VAR 0 1
60339: PUSH
60340: LD_INT 256
60342: EQUAL
60343: IFFALSE 60364
// SetFactoryWaypoint ( unit , x , y ) ;
60345: LD_VAR 0 2
60349: PPUSH
60350: LD_VAR 0 4
60354: PPUSH
60355: LD_VAR 0 5
60359: PPUSH
60360: CALL 66339 0 3
// if cmd = 257 then
60364: LD_VAR 0 1
60368: PUSH
60369: LD_INT 257
60371: EQUAL
60372: IFFALSE 60393
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60374: LD_VAR 0 2
60378: PPUSH
60379: LD_VAR 0 4
60383: PPUSH
60384: LD_VAR 0 5
60388: PPUSH
60389: CALL 66835 0 3
// if cmd = 258 then
60393: LD_VAR 0 1
60397: PUSH
60398: LD_INT 258
60400: EQUAL
60401: IFFALSE 60425
// BurnTreeXYR ( unit , x , y , 8 ) ;
60403: LD_VAR 0 2
60407: PPUSH
60408: LD_VAR 0 4
60412: PPUSH
60413: LD_VAR 0 5
60417: PPUSH
60418: LD_INT 8
60420: PPUSH
60421: CALL 60926 0 4
// end ;
60425: LD_VAR 0 6
60429: RET
// export function ComRadiation ( un ) ; var eff ; begin
60430: LD_INT 0
60432: PPUSH
60433: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60434: LD_VAR 0 1
60438: PPUSH
60439: CALL_OW 264
60443: PUSH
60444: LD_INT 91
60446: NONEQUAL
60447: IFFALSE 60451
// exit ;
60449: GO 60521
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60451: LD_INT 68
60453: PPUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: CALL_OW 255
60463: PPUSH
60464: CALL_OW 321
60468: PUSH
60469: LD_INT 2
60471: EQUAL
60472: IFFALSE 60484
// eff := 50 else
60474: LD_ADDR_VAR 0 3
60478: PUSH
60479: LD_INT 50
60481: ST_TO_ADDR
60482: GO 60492
// eff := 25 ;
60484: LD_ADDR_VAR 0 3
60488: PUSH
60489: LD_INT 25
60491: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60492: LD_VAR 0 1
60496: PPUSH
60497: CALL_OW 250
60501: PPUSH
60502: LD_VAR 0 1
60506: PPUSH
60507: CALL_OW 251
60511: PPUSH
60512: LD_VAR 0 3
60516: PPUSH
60517: CALL_OW 495
// end ;
60521: LD_VAR 0 2
60525: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60526: LD_INT 0
60528: PPUSH
60529: PPUSH
60530: PPUSH
60531: PPUSH
60532: PPUSH
60533: PPUSH
60534: PPUSH
60535: PPUSH
60536: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60537: LD_VAR 0 1
60541: PPUSH
60542: CALL_OW 302
60546: NOT
60547: IFTRUE 60566
60549: PUSH
60550: LD_VAR 0 2
60554: PPUSH
60555: LD_VAR 0 3
60559: PPUSH
60560: CALL_OW 488
60564: NOT
60565: OR
60566: IFTRUE 60575
60568: PUSH
60569: LD_VAR 0 4
60573: NOT
60574: OR
60575: IFFALSE 60579
// exit ;
60577: GO 60921
// list := [ ] ;
60579: LD_ADDR_VAR 0 13
60583: PUSH
60584: EMPTY
60585: ST_TO_ADDR
// if x - r < 0 then
60586: LD_VAR 0 2
60590: PUSH
60591: LD_VAR 0 4
60595: MINUS
60596: PUSH
60597: LD_INT 0
60599: LESS
60600: IFFALSE 60612
// min_x := 0 else
60602: LD_ADDR_VAR 0 7
60606: PUSH
60607: LD_INT 0
60609: ST_TO_ADDR
60610: GO 60628
// min_x := x - r ;
60612: LD_ADDR_VAR 0 7
60616: PUSH
60617: LD_VAR 0 2
60621: PUSH
60622: LD_VAR 0 4
60626: MINUS
60627: ST_TO_ADDR
// if y - r < 0 then
60628: LD_VAR 0 3
60632: PUSH
60633: LD_VAR 0 4
60637: MINUS
60638: PUSH
60639: LD_INT 0
60641: LESS
60642: IFFALSE 60654
// min_y := 0 else
60644: LD_ADDR_VAR 0 8
60648: PUSH
60649: LD_INT 0
60651: ST_TO_ADDR
60652: GO 60670
// min_y := y - r ;
60654: LD_ADDR_VAR 0 8
60658: PUSH
60659: LD_VAR 0 3
60663: PUSH
60664: LD_VAR 0 4
60668: MINUS
60669: ST_TO_ADDR
// max_x := x + r ;
60670: LD_ADDR_VAR 0 9
60674: PUSH
60675: LD_VAR 0 2
60679: PUSH
60680: LD_VAR 0 4
60684: PLUS
60685: ST_TO_ADDR
// max_y := y + r ;
60686: LD_ADDR_VAR 0 10
60690: PUSH
60691: LD_VAR 0 3
60695: PUSH
60696: LD_VAR 0 4
60700: PLUS
60701: ST_TO_ADDR
// for _x = min_x to max_x do
60702: LD_ADDR_VAR 0 11
60706: PUSH
60707: DOUBLE
60708: LD_VAR 0 7
60712: DEC
60713: ST_TO_ADDR
60714: LD_VAR 0 9
60718: PUSH
60719: FOR_TO
60720: IFFALSE 60839
// for _y = min_y to max_y do
60722: LD_ADDR_VAR 0 12
60726: PUSH
60727: DOUBLE
60728: LD_VAR 0 8
60732: DEC
60733: ST_TO_ADDR
60734: LD_VAR 0 10
60738: PUSH
60739: FOR_TO
60740: IFFALSE 60835
// begin if not ValidHex ( _x , _y ) then
60742: LD_VAR 0 11
60746: PPUSH
60747: LD_VAR 0 12
60751: PPUSH
60752: CALL_OW 488
60756: NOT
60757: IFFALSE 60761
// continue ;
60759: GO 60739
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60761: LD_VAR 0 11
60765: PPUSH
60766: LD_VAR 0 12
60770: PPUSH
60771: CALL_OW 351
60775: IFFALSE 60793
60777: PUSH
60778: LD_VAR 0 11
60782: PPUSH
60783: LD_VAR 0 12
60787: PPUSH
60788: CALL_OW 554
60792: AND
60793: IFFALSE 60833
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60795: LD_ADDR_VAR 0 13
60799: PUSH
60800: LD_VAR 0 13
60804: PPUSH
60805: LD_VAR 0 13
60809: PUSH
60810: LD_INT 1
60812: PLUS
60813: PPUSH
60814: LD_VAR 0 11
60818: PUSH
60819: LD_VAR 0 12
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PPUSH
60828: CALL_OW 2
60832: ST_TO_ADDR
// end ;
60833: GO 60739
60835: POP
60836: POP
60837: GO 60719
60839: POP
60840: POP
// if not list then
60841: LD_VAR 0 13
60845: NOT
60846: IFFALSE 60850
// exit ;
60848: GO 60921
// for i in list do
60850: LD_ADDR_VAR 0 6
60854: PUSH
60855: LD_VAR 0 13
60859: PUSH
60860: FOR_IN
60861: IFFALSE 60919
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60863: LD_VAR 0 1
60867: PPUSH
60868: LD_STRING M
60870: PUSH
60871: LD_VAR 0 6
60875: PUSH
60876: LD_INT 1
60878: ARRAY
60879: PUSH
60880: LD_VAR 0 6
60884: PUSH
60885: LD_INT 2
60887: ARRAY
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: PPUSH
60913: CALL_OW 447
60917: GO 60860
60919: POP
60920: POP
// end ;
60921: LD_VAR 0 5
60925: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60926: LD_INT 0
60928: PPUSH
60929: PPUSH
60930: PPUSH
60931: PPUSH
60932: PPUSH
60933: PPUSH
60934: PPUSH
60935: PPUSH
60936: PPUSH
60937: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60938: LD_VAR 0 1
60942: PPUSH
60943: CALL_OW 302
60947: NOT
60948: IFTRUE 60967
60950: PUSH
60951: LD_VAR 0 2
60955: PPUSH
60956: LD_VAR 0 3
60960: PPUSH
60961: CALL_OW 488
60965: NOT
60966: OR
60967: IFTRUE 60976
60969: PUSH
60970: LD_VAR 0 4
60974: NOT
60975: OR
60976: IFFALSE 60980
// exit ;
60978: GO 61497
// list := [ ] ;
60980: LD_ADDR_VAR 0 13
60984: PUSH
60985: EMPTY
60986: ST_TO_ADDR
// if x - r < 0 then
60987: LD_VAR 0 2
60991: PUSH
60992: LD_VAR 0 4
60996: MINUS
60997: PUSH
60998: LD_INT 0
61000: LESS
61001: IFFALSE 61013
// min_x := 0 else
61003: LD_ADDR_VAR 0 7
61007: PUSH
61008: LD_INT 0
61010: ST_TO_ADDR
61011: GO 61029
// min_x := x - r ;
61013: LD_ADDR_VAR 0 7
61017: PUSH
61018: LD_VAR 0 2
61022: PUSH
61023: LD_VAR 0 4
61027: MINUS
61028: ST_TO_ADDR
// if y - r < 0 then
61029: LD_VAR 0 3
61033: PUSH
61034: LD_VAR 0 4
61038: MINUS
61039: PUSH
61040: LD_INT 0
61042: LESS
61043: IFFALSE 61055
// min_y := 0 else
61045: LD_ADDR_VAR 0 8
61049: PUSH
61050: LD_INT 0
61052: ST_TO_ADDR
61053: GO 61071
// min_y := y - r ;
61055: LD_ADDR_VAR 0 8
61059: PUSH
61060: LD_VAR 0 3
61064: PUSH
61065: LD_VAR 0 4
61069: MINUS
61070: ST_TO_ADDR
// max_x := x + r ;
61071: LD_ADDR_VAR 0 9
61075: PUSH
61076: LD_VAR 0 2
61080: PUSH
61081: LD_VAR 0 4
61085: PLUS
61086: ST_TO_ADDR
// max_y := y + r ;
61087: LD_ADDR_VAR 0 10
61091: PUSH
61092: LD_VAR 0 3
61096: PUSH
61097: LD_VAR 0 4
61101: PLUS
61102: ST_TO_ADDR
// for _x = min_x to max_x do
61103: LD_ADDR_VAR 0 11
61107: PUSH
61108: DOUBLE
61109: LD_VAR 0 7
61113: DEC
61114: ST_TO_ADDR
61115: LD_VAR 0 9
61119: PUSH
61120: FOR_TO
61121: IFFALSE 61240
// for _y = min_y to max_y do
61123: LD_ADDR_VAR 0 12
61127: PUSH
61128: DOUBLE
61129: LD_VAR 0 8
61133: DEC
61134: ST_TO_ADDR
61135: LD_VAR 0 10
61139: PUSH
61140: FOR_TO
61141: IFFALSE 61236
// begin if not ValidHex ( _x , _y ) then
61143: LD_VAR 0 11
61147: PPUSH
61148: LD_VAR 0 12
61152: PPUSH
61153: CALL_OW 488
61157: NOT
61158: IFFALSE 61162
// continue ;
61160: GO 61140
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61162: LD_VAR 0 11
61166: PPUSH
61167: LD_VAR 0 12
61171: PPUSH
61172: CALL_OW 351
61176: IFFALSE 61194
61178: PUSH
61179: LD_VAR 0 11
61183: PPUSH
61184: LD_VAR 0 12
61188: PPUSH
61189: CALL_OW 554
61193: AND
61194: IFFALSE 61234
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61196: LD_ADDR_VAR 0 13
61200: PUSH
61201: LD_VAR 0 13
61205: PPUSH
61206: LD_VAR 0 13
61210: PUSH
61211: LD_INT 1
61213: PLUS
61214: PPUSH
61215: LD_VAR 0 11
61219: PUSH
61220: LD_VAR 0 12
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PPUSH
61229: CALL_OW 2
61233: ST_TO_ADDR
// end ;
61234: GO 61140
61236: POP
61237: POP
61238: GO 61120
61240: POP
61241: POP
// if not list then
61242: LD_VAR 0 13
61246: NOT
61247: IFFALSE 61251
// exit ;
61249: GO 61497
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61251: LD_ADDR_VAR 0 13
61255: PUSH
61256: LD_VAR 0 1
61260: PPUSH
61261: LD_VAR 0 13
61265: PPUSH
61266: LD_INT 1
61268: PPUSH
61269: LD_INT 1
61271: PPUSH
61272: CALL 21346 0 4
61276: ST_TO_ADDR
// ComStop ( flame ) ;
61277: LD_VAR 0 1
61281: PPUSH
61282: CALL_OW 141
// for i in list do
61286: LD_ADDR_VAR 0 6
61290: PUSH
61291: LD_VAR 0 13
61295: PUSH
61296: FOR_IN
61297: IFFALSE 61328
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61299: LD_VAR 0 1
61303: PPUSH
61304: LD_VAR 0 6
61308: PUSH
61309: LD_INT 1
61311: ARRAY
61312: PPUSH
61313: LD_VAR 0 6
61317: PUSH
61318: LD_INT 2
61320: ARRAY
61321: PPUSH
61322: CALL_OW 176
61326: GO 61296
61328: POP
61329: POP
// repeat wait ( 0 0$1 ) ;
61330: LD_INT 35
61332: PPUSH
61333: CALL_OW 67
// task := GetTaskList ( flame ) ;
61337: LD_ADDR_VAR 0 14
61341: PUSH
61342: LD_VAR 0 1
61346: PPUSH
61347: CALL_OW 437
61351: ST_TO_ADDR
// if not task then
61352: LD_VAR 0 14
61356: NOT
61357: IFFALSE 61361
// exit ;
61359: GO 61497
// if task [ 1 ] [ 1 ] <> | then
61361: LD_VAR 0 14
61365: PUSH
61366: LD_INT 1
61368: ARRAY
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PUSH
61374: LD_STRING |
61376: NONEQUAL
61377: IFFALSE 61381
// exit ;
61379: GO 61497
// _x := task [ 1 ] [ 2 ] ;
61381: LD_ADDR_VAR 0 11
61385: PUSH
61386: LD_VAR 0 14
61390: PUSH
61391: LD_INT 1
61393: ARRAY
61394: PUSH
61395: LD_INT 2
61397: ARRAY
61398: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61399: LD_ADDR_VAR 0 12
61403: PUSH
61404: LD_VAR 0 14
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_INT 3
61415: ARRAY
61416: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61417: LD_VAR 0 11
61421: PPUSH
61422: LD_VAR 0 12
61426: PPUSH
61427: CALL_OW 351
61431: NOT
61432: IFTRUE 61451
61434: PUSH
61435: LD_VAR 0 11
61439: PPUSH
61440: LD_VAR 0 12
61444: PPUSH
61445: CALL_OW 554
61449: NOT
61450: OR
61451: IFFALSE 61485
// begin task := Delete ( task , 1 ) ;
61453: LD_ADDR_VAR 0 14
61457: PUSH
61458: LD_VAR 0 14
61462: PPUSH
61463: LD_INT 1
61465: PPUSH
61466: CALL_OW 3
61470: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61471: LD_VAR 0 1
61475: PPUSH
61476: LD_VAR 0 14
61480: PPUSH
61481: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61485: LD_VAR 0 1
61489: PPUSH
61490: CALL_OW 314
61494: NOT
61495: IFFALSE 61330
// end ;
61497: LD_VAR 0 5
61501: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61502: LD_EXP 43
61506: NOT
61507: IFFALSE 61557
61509: GO 61511
61511: DISABLE
// begin initHack := true ;
61512: LD_ADDR_EXP 43
61516: PUSH
61517: LD_INT 1
61519: ST_TO_ADDR
// hackTanks := [ ] ;
61520: LD_ADDR_EXP 44
61524: PUSH
61525: EMPTY
61526: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61527: LD_ADDR_EXP 45
61531: PUSH
61532: EMPTY
61533: ST_TO_ADDR
// hackLimit := 3 ;
61534: LD_ADDR_EXP 46
61538: PUSH
61539: LD_INT 3
61541: ST_TO_ADDR
// hackDist := 12 ;
61542: LD_ADDR_EXP 47
61546: PUSH
61547: LD_INT 12
61549: ST_TO_ADDR
// hackCounter := [ ] ;
61550: LD_ADDR_EXP 48
61554: PUSH
61555: EMPTY
61556: ST_TO_ADDR
// end ;
61557: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61558: LD_EXP 43
61562: IFFALSE 61580
61564: PUSH
61565: LD_INT 34
61567: PUSH
61568: LD_INT 99
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PPUSH
61575: CALL_OW 69
61579: AND
61580: IFFALSE 61833
61582: GO 61584
61584: DISABLE
61585: LD_INT 0
61587: PPUSH
61588: PPUSH
// begin enable ;
61589: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61590: LD_ADDR_VAR 0 1
61594: PUSH
61595: LD_INT 34
61597: PUSH
61598: LD_INT 99
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PPUSH
61605: CALL_OW 69
61609: PUSH
61610: FOR_IN
61611: IFFALSE 61831
// begin if not i in hackTanks then
61613: LD_VAR 0 1
61617: PUSH
61618: LD_EXP 44
61622: IN
61623: NOT
61624: IFFALSE 61707
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61626: LD_ADDR_EXP 44
61630: PUSH
61631: LD_EXP 44
61635: PPUSH
61636: LD_EXP 44
61640: PUSH
61641: LD_INT 1
61643: PLUS
61644: PPUSH
61645: LD_VAR 0 1
61649: PPUSH
61650: CALL_OW 1
61654: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61655: LD_ADDR_EXP 45
61659: PUSH
61660: LD_EXP 45
61664: PPUSH
61665: LD_EXP 45
61669: PUSH
61670: LD_INT 1
61672: PLUS
61673: PPUSH
61674: EMPTY
61675: PPUSH
61676: CALL_OW 1
61680: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61681: LD_ADDR_EXP 48
61685: PUSH
61686: LD_EXP 48
61690: PPUSH
61691: LD_EXP 48
61695: PUSH
61696: LD_INT 1
61698: PLUS
61699: PPUSH
61700: EMPTY
61701: PPUSH
61702: CALL_OW 1
61706: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61707: LD_VAR 0 1
61711: PPUSH
61712: CALL_OW 302
61716: NOT
61717: IFFALSE 61730
// begin HackUnlinkAll ( i ) ;
61719: LD_VAR 0 1
61723: PPUSH
61724: CALL 61836 0 1
// continue ;
61728: GO 61610
// end ; HackCheckCapturedStatus ( i ) ;
61730: LD_VAR 0 1
61734: PPUSH
61735: CALL 62281 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61739: LD_ADDR_VAR 0 2
61743: PUSH
61744: LD_INT 81
61746: PUSH
61747: LD_VAR 0 1
61751: PPUSH
61752: CALL_OW 255
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 33
61763: PUSH
61764: LD_INT 3
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 91
61773: PUSH
61774: LD_VAR 0 1
61778: PUSH
61779: LD_EXP 47
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 50
61791: PUSH
61792: EMPTY
61793: LIST
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: PPUSH
61801: CALL_OW 69
61805: ST_TO_ADDR
// if not tmp then
61806: LD_VAR 0 2
61810: NOT
61811: IFFALSE 61815
// continue ;
61813: GO 61610
// HackLink ( i , tmp ) ;
61815: LD_VAR 0 1
61819: PPUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: CALL 61972 0 2
// end ;
61829: GO 61610
61831: POP
61832: POP
// end ;
61833: PPOPN 2
61835: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61836: LD_INT 0
61838: PPUSH
61839: PPUSH
61840: PPUSH
// if not hack in hackTanks then
61841: LD_VAR 0 1
61845: PUSH
61846: LD_EXP 44
61850: IN
61851: NOT
61852: IFFALSE 61856
// exit ;
61854: GO 61967
// index := GetElementIndex ( hackTanks , hack ) ;
61856: LD_ADDR_VAR 0 4
61860: PUSH
61861: LD_EXP 44
61865: PPUSH
61866: LD_VAR 0 1
61870: PPUSH
61871: CALL 20641 0 2
61875: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61876: LD_EXP 45
61880: PUSH
61881: LD_VAR 0 4
61885: ARRAY
61886: IFFALSE 61967
// begin for i in hackTanksCaptured [ index ] do
61888: LD_ADDR_VAR 0 3
61892: PUSH
61893: LD_EXP 45
61897: PUSH
61898: LD_VAR 0 4
61902: ARRAY
61903: PUSH
61904: FOR_IN
61905: IFFALSE 61931
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61907: LD_VAR 0 3
61911: PUSH
61912: LD_INT 1
61914: ARRAY
61915: PPUSH
61916: LD_VAR 0 3
61920: PUSH
61921: LD_INT 2
61923: ARRAY
61924: PPUSH
61925: CALL_OW 235
61929: GO 61904
61931: POP
61932: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61933: LD_ADDR_EXP 45
61937: PUSH
61938: LD_EXP 45
61942: PPUSH
61943: LD_VAR 0 4
61947: PPUSH
61948: EMPTY
61949: PPUSH
61950: CALL_OW 1
61954: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
61955: LD_VAR 0 1
61959: PPUSH
61960: LD_INT 0
61962: PPUSH
61963: CALL_OW 505
// end ; end ;
61967: LD_VAR 0 2
61971: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
61972: LD_INT 0
61974: PPUSH
61975: PPUSH
61976: PPUSH
// if not hack in hackTanks or not vehicles then
61977: LD_VAR 0 1
61981: PUSH
61982: LD_EXP 44
61986: IN
61987: NOT
61988: IFTRUE 61997
61990: PUSH
61991: LD_VAR 0 2
61995: NOT
61996: OR
61997: IFFALSE 62001
// exit ;
61999: GO 62276
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62001: LD_ADDR_VAR 0 2
62005: PUSH
62006: LD_VAR 0 1
62010: PPUSH
62011: LD_VAR 0 2
62015: PPUSH
62016: LD_INT 1
62018: PPUSH
62019: LD_INT 1
62021: PPUSH
62022: CALL 21293 0 4
62026: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62027: LD_ADDR_VAR 0 5
62031: PUSH
62032: LD_EXP 44
62036: PPUSH
62037: LD_VAR 0 1
62041: PPUSH
62042: CALL 20641 0 2
62046: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62047: LD_EXP 45
62051: PUSH
62052: LD_VAR 0 5
62056: ARRAY
62057: PUSH
62058: LD_EXP 46
62062: LESS
62063: IFFALSE 62252
// begin for i := 1 to vehicles do
62065: LD_ADDR_VAR 0 4
62069: PUSH
62070: DOUBLE
62071: LD_INT 1
62073: DEC
62074: ST_TO_ADDR
62075: LD_VAR 0 2
62079: PUSH
62080: FOR_TO
62081: IFFALSE 62250
// begin if hackTanksCaptured [ index ] = hackLimit then
62083: LD_EXP 45
62087: PUSH
62088: LD_VAR 0 5
62092: ARRAY
62093: PUSH
62094: LD_EXP 46
62098: EQUAL
62099: IFFALSE 62103
// break ;
62101: GO 62250
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62103: LD_ADDR_EXP 48
62107: PUSH
62108: LD_EXP 48
62112: PPUSH
62113: LD_VAR 0 5
62117: PPUSH
62118: LD_EXP 48
62122: PUSH
62123: LD_VAR 0 5
62127: ARRAY
62128: PUSH
62129: LD_INT 1
62131: PLUS
62132: PPUSH
62133: CALL_OW 1
62137: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62138: LD_ADDR_EXP 45
62142: PUSH
62143: LD_EXP 45
62147: PPUSH
62148: LD_VAR 0 5
62152: PUSH
62153: LD_EXP 45
62157: PUSH
62158: LD_VAR 0 5
62162: ARRAY
62163: PUSH
62164: LD_INT 1
62166: PLUS
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PPUSH
62172: LD_VAR 0 2
62176: PUSH
62177: LD_VAR 0 4
62181: ARRAY
62182: PUSH
62183: LD_VAR 0 2
62187: PUSH
62188: LD_VAR 0 4
62192: ARRAY
62193: PPUSH
62194: CALL_OW 255
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PPUSH
62203: CALL 20858 0 3
62207: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62208: LD_VAR 0 2
62212: PUSH
62213: LD_VAR 0 4
62217: ARRAY
62218: PPUSH
62219: LD_VAR 0 1
62223: PPUSH
62224: CALL_OW 255
62228: PPUSH
62229: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62233: LD_VAR 0 2
62237: PUSH
62238: LD_VAR 0 4
62242: ARRAY
62243: PPUSH
62244: CALL_OW 141
// end ;
62248: GO 62080
62250: POP
62251: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62252: LD_VAR 0 1
62256: PPUSH
62257: LD_EXP 45
62261: PUSH
62262: LD_VAR 0 5
62266: ARRAY
62267: PUSH
62268: LD_INT 0
62270: PLUS
62271: PPUSH
62272: CALL_OW 505
// end ;
62276: LD_VAR 0 3
62280: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62281: LD_INT 0
62283: PPUSH
62284: PPUSH
62285: PPUSH
62286: PPUSH
// if not hack in hackTanks then
62287: LD_VAR 0 1
62291: PUSH
62292: LD_EXP 44
62296: IN
62297: NOT
62298: IFFALSE 62302
// exit ;
62300: GO 62546
// index := GetElementIndex ( hackTanks , hack ) ;
62302: LD_ADDR_VAR 0 4
62306: PUSH
62307: LD_EXP 44
62311: PPUSH
62312: LD_VAR 0 1
62316: PPUSH
62317: CALL 20641 0 2
62321: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62322: LD_ADDR_VAR 0 3
62326: PUSH
62327: DOUBLE
62328: LD_EXP 45
62332: PUSH
62333: LD_VAR 0 4
62337: ARRAY
62338: INC
62339: ST_TO_ADDR
62340: LD_INT 1
62342: PUSH
62343: FOR_DOWNTO
62344: IFFALSE 62520
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_EXP 45
62355: PUSH
62356: LD_VAR 0 4
62360: ARRAY
62361: PUSH
62362: LD_VAR 0 3
62366: ARRAY
62367: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62368: LD_VAR 0 5
62372: PUSH
62373: LD_INT 1
62375: ARRAY
62376: PPUSH
62377: CALL_OW 302
62381: NOT
62382: IFTRUE 62410
62384: PUSH
62385: LD_VAR 0 5
62389: PUSH
62390: LD_INT 1
62392: ARRAY
62393: PPUSH
62394: CALL_OW 255
62398: PUSH
62399: LD_VAR 0 1
62403: PPUSH
62404: CALL_OW 255
62408: NONEQUAL
62409: OR
62410: IFFALSE 62518
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62412: LD_VAR 0 5
62416: PUSH
62417: LD_INT 1
62419: ARRAY
62420: PPUSH
62421: CALL_OW 305
62425: IFFALSE 62453
62427: PUSH
62428: LD_VAR 0 5
62432: PUSH
62433: LD_INT 1
62435: ARRAY
62436: PPUSH
62437: CALL_OW 255
62441: PUSH
62442: LD_VAR 0 1
62446: PPUSH
62447: CALL_OW 255
62451: EQUAL
62452: AND
62453: IFFALSE 62477
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62455: LD_VAR 0 5
62459: PUSH
62460: LD_INT 1
62462: ARRAY
62463: PPUSH
62464: LD_VAR 0 5
62468: PUSH
62469: LD_INT 2
62471: ARRAY
62472: PPUSH
62473: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62477: LD_ADDR_EXP 45
62481: PUSH
62482: LD_EXP 45
62486: PPUSH
62487: LD_VAR 0 4
62491: PPUSH
62492: LD_EXP 45
62496: PUSH
62497: LD_VAR 0 4
62501: ARRAY
62502: PPUSH
62503: LD_VAR 0 3
62507: PPUSH
62508: CALL_OW 3
62512: PPUSH
62513: CALL_OW 1
62517: ST_TO_ADDR
// end ; end ;
62518: GO 62343
62520: POP
62521: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62522: LD_VAR 0 1
62526: PPUSH
62527: LD_EXP 45
62531: PUSH
62532: LD_VAR 0 4
62536: ARRAY
62537: PUSH
62538: LD_INT 0
62540: PLUS
62541: PPUSH
62542: CALL_OW 505
// end ;
62546: LD_VAR 0 2
62550: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62551: LD_INT 0
62553: PPUSH
62554: PPUSH
62555: PPUSH
62556: PPUSH
// if not hack in hackTanks then
62557: LD_VAR 0 1
62561: PUSH
62562: LD_EXP 44
62566: IN
62567: NOT
62568: IFFALSE 62572
// exit ;
62570: GO 62657
// index := GetElementIndex ( hackTanks , hack ) ;
62572: LD_ADDR_VAR 0 5
62576: PUSH
62577: LD_EXP 44
62581: PPUSH
62582: LD_VAR 0 1
62586: PPUSH
62587: CALL 20641 0 2
62591: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: DOUBLE
62598: LD_INT 1
62600: DEC
62601: ST_TO_ADDR
62602: LD_EXP 45
62606: PUSH
62607: LD_VAR 0 5
62611: ARRAY
62612: PUSH
62613: FOR_TO
62614: IFFALSE 62655
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62616: LD_EXP 45
62620: PUSH
62621: LD_VAR 0 5
62625: ARRAY
62626: PUSH
62627: LD_VAR 0 4
62631: ARRAY
62632: PUSH
62633: LD_INT 1
62635: ARRAY
62636: PUSH
62637: LD_VAR 0 2
62641: EQUAL
62642: IFFALSE 62653
// KillUnit ( vehicle ) ;
62644: LD_VAR 0 2
62648: PPUSH
62649: CALL_OW 66
62653: GO 62613
62655: POP
62656: POP
// end ;
62657: LD_VAR 0 3
62661: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
62662: LD_EXP 49
62666: NOT
62667: IFFALSE 62800
62669: GO 62671
62671: DISABLE
62672: LD_INT 0
62674: PPUSH
// begin initMiner := true ;
62675: LD_ADDR_EXP 49
62679: PUSH
62680: LD_INT 1
62682: ST_TO_ADDR
// minersList := [ ] ;
62683: LD_ADDR_EXP 50
62687: PUSH
62688: EMPTY
62689: ST_TO_ADDR
// minerMinesList := [ ] ;
62690: LD_ADDR_EXP 51
62694: PUSH
62695: EMPTY
62696: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
62697: LD_ADDR_EXP 52
62701: PUSH
62702: LD_INT 6
62704: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62705: LD_ADDR_VAR 0 1
62709: PUSH
62710: LD_INT 34
62712: PUSH
62713: LD_INT 81
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PPUSH
62720: CALL_OW 69
62724: PUSH
62725: FOR_IN
62726: IFFALSE 62798
// begin if not i in minersList then
62728: LD_VAR 0 1
62732: PUSH
62733: LD_EXP 50
62737: IN
62738: NOT
62739: IFFALSE 62796
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62741: LD_ADDR_EXP 50
62745: PUSH
62746: LD_EXP 50
62750: PPUSH
62751: LD_EXP 50
62755: PUSH
62756: LD_INT 1
62758: PLUS
62759: PPUSH
62760: LD_VAR 0 1
62764: PPUSH
62765: CALL_OW 1
62769: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62770: LD_ADDR_EXP 51
62774: PUSH
62775: LD_EXP 51
62779: PPUSH
62780: LD_EXP 51
62784: PUSH
62785: LD_INT 1
62787: PLUS
62788: PPUSH
62789: EMPTY
62790: PPUSH
62791: CALL_OW 1
62795: ST_TO_ADDR
// end end ;
62796: GO 62725
62798: POP
62799: POP
// end ;
62800: PPOPN 1
62802: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
62803: LD_EXP 49
62807: IFFALSE 62838
62809: PUSH
62810: LD_EXP 51
62814: PPUSH
62815: CALL 17940 0 1
62819: IFTRUE 62837
62821: PUSH
62822: LD_INT 34
62824: PUSH
62825: LD_INT 81
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PPUSH
62832: CALL_OW 69
62836: OR
62837: AND
62838: IFFALSE 63337
62840: GO 62842
62842: DISABLE
62843: LD_INT 0
62845: PPUSH
62846: PPUSH
62847: PPUSH
62848: PPUSH
// begin enable ;
62849: ENABLE
// for i := minerMinesList downto 1 do
62850: LD_ADDR_VAR 0 1
62854: PUSH
62855: DOUBLE
62856: LD_EXP 51
62860: INC
62861: ST_TO_ADDR
62862: LD_INT 1
62864: PUSH
62865: FOR_DOWNTO
62866: IFFALSE 63335
// begin if IsLive ( minersList [ i ] ) then
62868: LD_EXP 50
62872: PUSH
62873: LD_VAR 0 1
62877: ARRAY
62878: PPUSH
62879: CALL_OW 300
62883: IFFALSE 62916
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
62885: LD_EXP 50
62889: PUSH
62890: LD_VAR 0 1
62894: ARRAY
62895: PPUSH
62896: LD_EXP 51
62900: PUSH
62901: LD_VAR 0 1
62905: ARRAY
62906: PPUSH
62907: CALL 17940 0 1
62911: PPUSH
62912: CALL_OW 505
// if not minerMinesList [ i ] then
62916: LD_EXP 51
62920: PUSH
62921: LD_VAR 0 1
62925: ARRAY
62926: NOT
62927: IFFALSE 62931
// continue ;
62929: GO 62865
// for j := minerMinesList [ i ] downto 1 do
62931: LD_ADDR_VAR 0 2
62935: PUSH
62936: DOUBLE
62937: LD_EXP 51
62941: PUSH
62942: LD_VAR 0 1
62946: ARRAY
62947: INC
62948: ST_TO_ADDR
62949: LD_INT 1
62951: PUSH
62952: FOR_DOWNTO
62953: IFFALSE 63331
// begin side := GetSide ( minersList [ i ] ) ;
62955: LD_ADDR_VAR 0 3
62959: PUSH
62960: LD_EXP 50
62964: PUSH
62965: LD_VAR 0 1
62969: ARRAY
62970: PPUSH
62971: CALL_OW 255
62975: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
62976: LD_EXP 50
62980: PUSH
62981: LD_VAR 0 1
62985: ARRAY
62986: PPUSH
62987: CALL_OW 301
62991: IFTRUE 63011
62993: PUSH
62994: LD_EXP 50
62998: PUSH
62999: LD_VAR 0 1
63003: ARRAY
63004: PPUSH
63005: CALL_OW 305
63009: NOT
63010: OR
63011: IFFALSE 63102
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63013: LD_EXP 51
63017: PUSH
63018: LD_VAR 0 1
63022: ARRAY
63023: PUSH
63024: LD_VAR 0 2
63028: ARRAY
63029: PUSH
63030: LD_INT 1
63032: ARRAY
63033: PPUSH
63034: LD_EXP 51
63038: PUSH
63039: LD_VAR 0 1
63043: ARRAY
63044: PUSH
63045: LD_VAR 0 2
63049: ARRAY
63050: PUSH
63051: LD_INT 2
63053: ARRAY
63054: PPUSH
63055: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63059: LD_ADDR_EXP 51
63063: PUSH
63064: LD_EXP 51
63068: PPUSH
63069: LD_VAR 0 1
63073: PPUSH
63074: LD_EXP 51
63078: PUSH
63079: LD_VAR 0 1
63083: ARRAY
63084: PPUSH
63085: LD_VAR 0 2
63089: PPUSH
63090: CALL_OW 3
63094: PPUSH
63095: CALL_OW 1
63099: ST_TO_ADDR
// continue ;
63100: GO 62952
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63102: LD_ADDR_VAR 0 4
63106: PUSH
63107: LD_EXP 51
63111: PUSH
63112: LD_VAR 0 1
63116: ARRAY
63117: PUSH
63118: LD_VAR 0 2
63122: ARRAY
63123: PUSH
63124: LD_INT 1
63126: ARRAY
63127: PPUSH
63128: LD_EXP 51
63132: PUSH
63133: LD_VAR 0 1
63137: ARRAY
63138: PUSH
63139: LD_VAR 0 2
63143: ARRAY
63144: PUSH
63145: LD_INT 2
63147: ARRAY
63148: PPUSH
63149: CALL_OW 428
63153: ST_TO_ADDR
// if not tmp then
63154: LD_VAR 0 4
63158: NOT
63159: IFFALSE 63163
// continue ;
63161: GO 62952
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63163: LD_VAR 0 4
63167: PUSH
63168: LD_INT 81
63170: PUSH
63171: LD_VAR 0 3
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PPUSH
63180: CALL_OW 69
63184: IN
63185: IFFALSE 63235
63187: PUSH
63188: LD_EXP 51
63192: PUSH
63193: LD_VAR 0 1
63197: ARRAY
63198: PUSH
63199: LD_VAR 0 2
63203: ARRAY
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PPUSH
63209: LD_EXP 51
63213: PUSH
63214: LD_VAR 0 1
63218: ARRAY
63219: PUSH
63220: LD_VAR 0 2
63224: ARRAY
63225: PUSH
63226: LD_INT 2
63228: ARRAY
63229: PPUSH
63230: CALL_OW 458
63234: AND
63235: IFFALSE 63329
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63237: LD_EXP 51
63241: PUSH
63242: LD_VAR 0 1
63246: ARRAY
63247: PUSH
63248: LD_VAR 0 2
63252: ARRAY
63253: PUSH
63254: LD_INT 1
63256: ARRAY
63257: PPUSH
63258: LD_EXP 51
63262: PUSH
63263: LD_VAR 0 1
63267: ARRAY
63268: PUSH
63269: LD_VAR 0 2
63273: ARRAY
63274: PUSH
63275: LD_INT 2
63277: ARRAY
63278: PPUSH
63279: LD_VAR 0 3
63283: PPUSH
63284: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63288: LD_ADDR_EXP 51
63292: PUSH
63293: LD_EXP 51
63297: PPUSH
63298: LD_VAR 0 1
63302: PPUSH
63303: LD_EXP 51
63307: PUSH
63308: LD_VAR 0 1
63312: ARRAY
63313: PPUSH
63314: LD_VAR 0 2
63318: PPUSH
63319: CALL_OW 3
63323: PPUSH
63324: CALL_OW 1
63328: ST_TO_ADDR
// end ; end ;
63329: GO 62952
63331: POP
63332: POP
// end ;
63333: GO 62865
63335: POP
63336: POP
// end ;
63337: PPOPN 4
63339: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63340: LD_INT 0
63342: PPUSH
63343: PPUSH
63344: PPUSH
63345: PPUSH
// result := false ;
63346: LD_ADDR_VAR 0 4
63350: PUSH
63351: LD_INT 0
63353: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63354: LD_VAR 0 1
63358: PPUSH
63359: CALL_OW 264
63363: PUSH
63364: LD_INT 81
63366: EQUAL
63367: NOT
63368: IFFALSE 63372
// exit ;
63370: GO 63742
// side := GetSide ( unit ) ;
63372: LD_ADDR_VAR 0 6
63376: PUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: CALL_OW 255
63386: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63387: LD_ADDR_VAR 0 5
63391: PUSH
63392: LD_EXP 50
63396: PPUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: CALL 20641 0 2
63406: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63407: LD_EXP 51
63411: PUSH
63412: LD_VAR 0 5
63416: ARRAY
63417: PUSH
63418: LD_EXP 52
63422: GREATEREQUAL
63423: IFFALSE 63427
// exit ;
63425: GO 63742
// ComMoveXY ( unit , x , y ) ;
63427: LD_VAR 0 1
63431: PPUSH
63432: LD_VAR 0 2
63436: PPUSH
63437: LD_VAR 0 3
63441: PPUSH
63442: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63446: LD_INT 35
63448: PPUSH
63449: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63453: LD_VAR 0 1
63457: PPUSH
63458: LD_VAR 0 2
63462: PPUSH
63463: LD_VAR 0 3
63467: PPUSH
63468: CALL 52687 0 3
63472: NOT
63473: IFFALSE 63486
63475: PUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 314
63485: AND
63486: IFFALSE 63490
// exit ;
63488: GO 63742
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63490: LD_VAR 0 2
63494: PPUSH
63495: LD_VAR 0 3
63499: PPUSH
63500: CALL_OW 428
63504: PUSH
63505: LD_VAR 0 1
63509: EQUAL
63510: IFFALSE 63524
63512: PUSH
63513: LD_VAR 0 1
63517: PPUSH
63518: CALL_OW 314
63522: NOT
63523: AND
63524: IFFALSE 63446
// if MineAtPos ( x , y ) then
63526: LD_VAR 0 2
63530: PPUSH
63531: LD_VAR 0 3
63535: PPUSH
63536: CALL_OW 458
63540: IFFALSE 63544
// exit ;
63542: GO 63742
// if your_side = side then
63544: LD_OWVAR 2
63548: PUSH
63549: LD_VAR 0 6
63553: EQUAL
63554: IFFALSE 63573
// PlaySoundXY ( x , y , PlantMine ) ;
63556: LD_VAR 0 2
63560: PPUSH
63561: LD_VAR 0 3
63565: PPUSH
63566: LD_STRING PlantMine
63568: PPUSH
63569: CALL_OW 366
// repeat wait ( 1 ) ;
63573: LD_INT 1
63575: PPUSH
63576: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
63580: LD_VAR 0 2
63584: PPUSH
63585: LD_VAR 0 3
63589: PPUSH
63590: LD_VAR 0 6
63594: PPUSH
63595: LD_INT 0
63597: PPUSH
63598: CALL_OW 454
63602: IFFALSE 63573
// if MineAtPos ( x , y ) then
63604: LD_VAR 0 2
63608: PPUSH
63609: LD_VAR 0 3
63613: PPUSH
63614: CALL_OW 458
63618: IFFALSE 63734
// begin for i in minerMinesList [ index ] do
63620: LD_ADDR_VAR 0 7
63624: PUSH
63625: LD_EXP 51
63629: PUSH
63630: LD_VAR 0 5
63634: ARRAY
63635: PUSH
63636: FOR_IN
63637: IFFALSE 63679
// if i [ 1 ] = x and i [ 2 ] = y then
63639: LD_VAR 0 7
63643: PUSH
63644: LD_INT 1
63646: ARRAY
63647: PUSH
63648: LD_VAR 0 2
63652: EQUAL
63653: IFFALSE 63671
63655: PUSH
63656: LD_VAR 0 7
63660: PUSH
63661: LD_INT 2
63663: ARRAY
63664: PUSH
63665: LD_VAR 0 3
63669: EQUAL
63670: AND
63671: IFFALSE 63677
// exit ;
63673: POP
63674: POP
63675: GO 63742
63677: GO 63636
63679: POP
63680: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63681: LD_ADDR_EXP 51
63685: PUSH
63686: LD_EXP 51
63690: PPUSH
63691: LD_VAR 0 5
63695: PUSH
63696: LD_EXP 51
63700: PUSH
63701: LD_VAR 0 5
63705: ARRAY
63706: PUSH
63707: LD_INT 1
63709: PLUS
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PPUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_VAR 0 3
63724: PUSH
63725: EMPTY
63726: LIST
63727: LIST
63728: PPUSH
63729: CALL 20858 0 3
63733: ST_TO_ADDR
// end ; result := true ;
63734: LD_ADDR_VAR 0 4
63738: PUSH
63739: LD_INT 1
63741: ST_TO_ADDR
// end ;
63742: LD_VAR 0 4
63746: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63747: LD_INT 0
63749: PPUSH
63750: PPUSH
63751: PPUSH
// if not unit in minersList then
63752: LD_VAR 0 1
63756: PUSH
63757: LD_EXP 50
63761: IN
63762: NOT
63763: IFFALSE 63767
// exit ;
63765: GO 63974
// index := GetElementIndex ( minersList , unit ) ;
63767: LD_ADDR_VAR 0 6
63771: PUSH
63772: LD_EXP 50
63776: PPUSH
63777: LD_VAR 0 1
63781: PPUSH
63782: CALL 20641 0 2
63786: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63787: LD_ADDR_VAR 0 5
63791: PUSH
63792: DOUBLE
63793: LD_EXP 51
63797: PUSH
63798: LD_VAR 0 6
63802: ARRAY
63803: INC
63804: ST_TO_ADDR
63805: LD_INT 1
63807: PUSH
63808: FOR_DOWNTO
63809: IFFALSE 63972
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63811: LD_EXP 51
63815: PUSH
63816: LD_VAR 0 6
63820: ARRAY
63821: PUSH
63822: LD_VAR 0 5
63826: ARRAY
63827: PUSH
63828: LD_INT 1
63830: ARRAY
63831: PPUSH
63832: LD_EXP 51
63836: PUSH
63837: LD_VAR 0 6
63841: ARRAY
63842: PUSH
63843: LD_VAR 0 5
63847: ARRAY
63848: PUSH
63849: LD_INT 2
63851: ARRAY
63852: PPUSH
63853: LD_VAR 0 2
63857: PPUSH
63858: LD_VAR 0 3
63862: PPUSH
63863: CALL_OW 298
63867: PUSH
63868: LD_INT 6
63870: LESS
63871: IFFALSE 63970
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63873: LD_EXP 51
63877: PUSH
63878: LD_VAR 0 6
63882: ARRAY
63883: PUSH
63884: LD_VAR 0 5
63888: ARRAY
63889: PUSH
63890: LD_INT 1
63892: ARRAY
63893: PPUSH
63894: LD_EXP 51
63898: PUSH
63899: LD_VAR 0 6
63903: ARRAY
63904: PUSH
63905: LD_VAR 0 5
63909: ARRAY
63910: PUSH
63911: LD_INT 2
63913: ARRAY
63914: PPUSH
63915: LD_VAR 0 1
63919: PPUSH
63920: CALL_OW 255
63924: PPUSH
63925: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
63929: LD_ADDR_EXP 51
63933: PUSH
63934: LD_EXP 51
63938: PPUSH
63939: LD_VAR 0 6
63943: PPUSH
63944: LD_EXP 51
63948: PUSH
63949: LD_VAR 0 6
63953: ARRAY
63954: PPUSH
63955: LD_VAR 0 5
63959: PPUSH
63960: CALL_OW 3
63964: PPUSH
63965: CALL_OW 1
63969: ST_TO_ADDR
// end ; end ;
63970: GO 63808
63972: POP
63973: POP
// end ;
63974: LD_VAR 0 4
63978: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
63979: LD_INT 0
63981: PPUSH
63982: PPUSH
63983: PPUSH
63984: PPUSH
63985: PPUSH
63986: PPUSH
63987: PPUSH
63988: PPUSH
63989: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
63990: LD_VAR 0 1
63994: PPUSH
63995: CALL_OW 264
63999: PUSH
64000: LD_INT 81
64002: EQUAL
64003: NOT
64004: IFTRUE 64019
64006: PUSH
64007: LD_VAR 0 1
64011: PUSH
64012: LD_EXP 50
64016: IN
64017: NOT
64018: OR
64019: IFFALSE 64023
// exit ;
64021: GO 64349
// index := GetElementIndex ( minersList , unit ) ;
64023: LD_ADDR_VAR 0 6
64027: PUSH
64028: LD_EXP 50
64032: PPUSH
64033: LD_VAR 0 1
64037: PPUSH
64038: CALL 20641 0 2
64042: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64043: LD_ADDR_VAR 0 8
64047: PUSH
64048: LD_EXP 52
64052: PUSH
64053: LD_EXP 51
64057: PUSH
64058: LD_VAR 0 6
64062: ARRAY
64063: MINUS
64064: ST_TO_ADDR
// if not minesFreeAmount then
64065: LD_VAR 0 8
64069: NOT
64070: IFFALSE 64074
// exit ;
64072: GO 64349
// tmp := [ ] ;
64074: LD_ADDR_VAR 0 7
64078: PUSH
64079: EMPTY
64080: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64081: LD_ADDR_VAR 0 5
64085: PUSH
64086: DOUBLE
64087: LD_INT 1
64089: DEC
64090: ST_TO_ADDR
64091: LD_VAR 0 8
64095: PUSH
64096: FOR_TO
64097: IFFALSE 64296
// begin _d := rand ( 0 , 5 ) ;
64099: LD_ADDR_VAR 0 11
64103: PUSH
64104: LD_INT 0
64106: PPUSH
64107: LD_INT 5
64109: PPUSH
64110: CALL_OW 12
64114: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64115: LD_ADDR_VAR 0 12
64119: PUSH
64120: LD_INT 2
64122: PPUSH
64123: LD_INT 6
64125: PPUSH
64126: CALL_OW 12
64130: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64131: LD_ADDR_VAR 0 9
64135: PUSH
64136: LD_VAR 0 2
64140: PPUSH
64141: LD_VAR 0 11
64145: PPUSH
64146: LD_VAR 0 12
64150: PPUSH
64151: CALL_OW 272
64155: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64156: LD_ADDR_VAR 0 10
64160: PUSH
64161: LD_VAR 0 3
64165: PPUSH
64166: LD_VAR 0 11
64170: PPUSH
64171: LD_VAR 0 12
64175: PPUSH
64176: CALL_OW 273
64180: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64181: LD_VAR 0 9
64185: PPUSH
64186: LD_VAR 0 10
64190: PPUSH
64191: CALL_OW 488
64195: IFFALSE 64219
64197: PUSH
64198: LD_VAR 0 9
64202: PUSH
64203: LD_VAR 0 10
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_VAR 0 7
64216: IN
64217: NOT
64218: AND
64219: IFFALSE 64238
64221: PUSH
64222: LD_VAR 0 9
64226: PPUSH
64227: LD_VAR 0 10
64231: PPUSH
64232: CALL_OW 458
64236: NOT
64237: AND
64238: IFFALSE 64280
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64240: LD_ADDR_VAR 0 7
64244: PUSH
64245: LD_VAR 0 7
64249: PPUSH
64250: LD_VAR 0 7
64254: PUSH
64255: LD_INT 1
64257: PLUS
64258: PPUSH
64259: LD_VAR 0 9
64263: PUSH
64264: LD_VAR 0 10
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PPUSH
64273: CALL_OW 1
64277: ST_TO_ADDR
64278: GO 64294
// i := i - 1 ;
64280: LD_ADDR_VAR 0 5
64284: PUSH
64285: LD_VAR 0 5
64289: PUSH
64290: LD_INT 1
64292: MINUS
64293: ST_TO_ADDR
// end ;
64294: GO 64096
64296: POP
64297: POP
// for i in tmp do
64298: LD_ADDR_VAR 0 5
64302: PUSH
64303: LD_VAR 0 7
64307: PUSH
64308: FOR_IN
64309: IFFALSE 64347
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64311: LD_VAR 0 1
64315: PPUSH
64316: LD_VAR 0 5
64320: PUSH
64321: LD_INT 1
64323: ARRAY
64324: PPUSH
64325: LD_VAR 0 5
64329: PUSH
64330: LD_INT 2
64332: ARRAY
64333: PPUSH
64334: CALL 63340 0 3
64338: NOT
64339: IFFALSE 64345
// exit ;
64341: POP
64342: POP
64343: GO 64349
64345: GO 64308
64347: POP
64348: POP
// end ;
64349: LD_VAR 0 4
64353: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64354: LD_INT 0
64356: PPUSH
64357: PPUSH
64358: PPUSH
64359: PPUSH
64360: PPUSH
64361: PPUSH
64362: PPUSH
64363: PPUSH
64364: PPUSH
// if GetClass ( unit ) <> class_sniper then
64365: LD_VAR 0 1
64369: PPUSH
64370: CALL_OW 257
64374: PUSH
64375: LD_INT 5
64377: NONEQUAL
64378: IFFALSE 64382
// exit ;
64380: GO 64852
// dist := 8 ;
64382: LD_ADDR_VAR 0 5
64386: PUSH
64387: LD_INT 8
64389: ST_TO_ADDR
// viewRange := 12 ;
64390: LD_ADDR_VAR 0 8
64394: PUSH
64395: LD_INT 12
64397: ST_TO_ADDR
// side := GetSide ( unit ) ;
64398: LD_ADDR_VAR 0 6
64402: PUSH
64403: LD_VAR 0 1
64407: PPUSH
64408: CALL_OW 255
64412: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64413: LD_INT 61
64415: PPUSH
64416: LD_VAR 0 6
64420: PPUSH
64421: CALL_OW 321
64425: PUSH
64426: LD_INT 2
64428: EQUAL
64429: IFFALSE 64439
// viewRange := 16 ;
64431: LD_ADDR_VAR 0 8
64435: PUSH
64436: LD_INT 16
64438: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64439: LD_VAR 0 1
64443: PPUSH
64444: LD_VAR 0 2
64448: PPUSH
64449: LD_VAR 0 3
64453: PPUSH
64454: CALL_OW 297
64458: PUSH
64459: LD_VAR 0 5
64463: GREATER
64464: IFFALSE 64543
// begin ComMoveXY ( unit , x , y ) ;
64466: LD_VAR 0 1
64470: PPUSH
64471: LD_VAR 0 2
64475: PPUSH
64476: LD_VAR 0 3
64480: PPUSH
64481: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64485: LD_INT 35
64487: PPUSH
64488: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64492: LD_VAR 0 1
64496: PPUSH
64497: LD_VAR 0 2
64501: PPUSH
64502: LD_VAR 0 3
64506: PPUSH
64507: CALL 52687 0 3
64511: NOT
64512: IFFALSE 64516
// exit ;
64514: GO 64852
// until GetDistUnitXY ( unit , x , y ) < dist ;
64516: LD_VAR 0 1
64520: PPUSH
64521: LD_VAR 0 2
64525: PPUSH
64526: LD_VAR 0 3
64530: PPUSH
64531: CALL_OW 297
64535: PUSH
64536: LD_VAR 0 5
64540: LESS
64541: IFFALSE 64485
// end ; ComTurnXY ( unit , x , y ) ;
64543: LD_VAR 0 1
64547: PPUSH
64548: LD_VAR 0 2
64552: PPUSH
64553: LD_VAR 0 3
64557: PPUSH
64558: CALL_OW 118
// repeat if Multiplayer then
64562: LD_OWVAR 4
64566: IFFALSE 64577
// wait ( 35 ) else
64568: LD_INT 35
64570: PPUSH
64571: CALL_OW 67
64575: GO 64584
// wait ( 5 ) ;
64577: LD_INT 5
64579: PPUSH
64580: CALL_OW 67
// _d := GetDir ( unit ) ;
64584: LD_ADDR_VAR 0 11
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 254
64598: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64599: LD_ADDR_VAR 0 7
64603: PUSH
64604: LD_VAR 0 1
64608: PPUSH
64609: CALL_OW 250
64613: PPUSH
64614: LD_VAR 0 1
64618: PPUSH
64619: CALL_OW 251
64623: PPUSH
64624: LD_VAR 0 2
64628: PPUSH
64629: LD_VAR 0 3
64633: PPUSH
64634: CALL 55323 0 4
64638: ST_TO_ADDR
// until dir = _d ;
64639: LD_VAR 0 7
64643: PUSH
64644: LD_VAR 0 11
64648: EQUAL
64649: IFFALSE 64562
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64651: LD_ADDR_VAR 0 9
64655: PUSH
64656: LD_VAR 0 1
64660: PPUSH
64661: CALL_OW 250
64665: PPUSH
64666: LD_VAR 0 7
64670: PPUSH
64671: LD_VAR 0 5
64675: PPUSH
64676: CALL_OW 272
64680: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64681: LD_ADDR_VAR 0 10
64685: PUSH
64686: LD_VAR 0 1
64690: PPUSH
64691: CALL_OW 251
64695: PPUSH
64696: LD_VAR 0 7
64700: PPUSH
64701: LD_VAR 0 5
64705: PPUSH
64706: CALL_OW 273
64710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64711: LD_VAR 0 9
64715: PPUSH
64716: LD_VAR 0 10
64720: PPUSH
64721: CALL_OW 488
64725: NOT
64726: IFFALSE 64730
// exit ;
64728: GO 64852
// ComAnimCustom ( unit , 1 ) ;
64730: LD_VAR 0 1
64734: PPUSH
64735: LD_INT 1
64737: PPUSH
64738: CALL_OW 592
// p := 0 ;
64742: LD_ADDR_VAR 0 12
64746: PUSH
64747: LD_INT 0
64749: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64750: LD_VAR 0 9
64754: PPUSH
64755: LD_VAR 0 10
64759: PPUSH
64760: LD_VAR 0 6
64764: PPUSH
64765: LD_VAR 0 8
64769: PPUSH
64770: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64774: LD_INT 35
64776: PPUSH
64777: CALL_OW 67
// p := Inc ( p ) ;
64781: LD_ADDR_VAR 0 12
64785: PUSH
64786: LD_VAR 0 12
64790: PPUSH
64791: CALL 55279 0 1
64795: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64796: LD_VAR 0 12
64800: PUSH
64801: LD_INT 3
64803: EQUAL
64804: IFTRUE 64818
64806: PUSH
64807: LD_VAR 0 1
64811: PPUSH
64812: CALL_OW 302
64816: NOT
64817: OR
64818: IFTRUE 64831
64820: PUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: CALL_OW 301
64830: OR
64831: IFFALSE 64774
// RemoveSeeing ( _x , _y , side ) ;
64833: LD_VAR 0 9
64837: PPUSH
64838: LD_VAR 0 10
64842: PPUSH
64843: LD_VAR 0 6
64847: PPUSH
64848: CALL_OW 331
// end ;
64852: LD_VAR 0 4
64856: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
64857: LD_INT 0
64859: PPUSH
64860: PPUSH
64861: PPUSH
64862: PPUSH
64863: PPUSH
64864: PPUSH
64865: PPUSH
64866: PPUSH
64867: PPUSH
64868: PPUSH
64869: PPUSH
// if not unit then
64870: LD_VAR 0 1
64874: NOT
64875: IFFALSE 64879
// exit ;
64877: GO 65150
// side := GetSide ( unit ) ;
64879: LD_ADDR_VAR 0 3
64883: PUSH
64884: LD_VAR 0 1
64888: PPUSH
64889: CALL_OW 255
64893: ST_TO_ADDR
// x := GetX ( unit ) ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_VAR 0 1
64903: PPUSH
64904: CALL_OW 250
64908: ST_TO_ADDR
// y := GetY ( unit ) ;
64909: LD_ADDR_VAR 0 6
64913: PUSH
64914: LD_VAR 0 1
64918: PPUSH
64919: CALL_OW 251
64923: ST_TO_ADDR
// r := 8 ;
64924: LD_ADDR_VAR 0 4
64928: PUSH
64929: LD_INT 8
64931: ST_TO_ADDR
// if x - r < 0 then
64932: LD_VAR 0 5
64936: PUSH
64937: LD_VAR 0 4
64941: MINUS
64942: PUSH
64943: LD_INT 0
64945: LESS
64946: IFFALSE 64958
// min_x := 0 else
64948: LD_ADDR_VAR 0 7
64952: PUSH
64953: LD_INT 0
64955: ST_TO_ADDR
64956: GO 64974
// min_x := x - r ;
64958: LD_ADDR_VAR 0 7
64962: PUSH
64963: LD_VAR 0 5
64967: PUSH
64968: LD_VAR 0 4
64972: MINUS
64973: ST_TO_ADDR
// if y - r < 0 then
64974: LD_VAR 0 6
64978: PUSH
64979: LD_VAR 0 4
64983: MINUS
64984: PUSH
64985: LD_INT 0
64987: LESS
64988: IFFALSE 65000
// min_y := 0 else
64990: LD_ADDR_VAR 0 8
64994: PUSH
64995: LD_INT 0
64997: ST_TO_ADDR
64998: GO 65016
// min_y := y - r ;
65000: LD_ADDR_VAR 0 8
65004: PUSH
65005: LD_VAR 0 6
65009: PUSH
65010: LD_VAR 0 4
65014: MINUS
65015: ST_TO_ADDR
// max_x := x + r ;
65016: LD_ADDR_VAR 0 9
65020: PUSH
65021: LD_VAR 0 5
65025: PUSH
65026: LD_VAR 0 4
65030: PLUS
65031: ST_TO_ADDR
// max_y := y + r ;
65032: LD_ADDR_VAR 0 10
65036: PUSH
65037: LD_VAR 0 6
65041: PUSH
65042: LD_VAR 0 4
65046: PLUS
65047: ST_TO_ADDR
// for _x = min_x to max_x do
65048: LD_ADDR_VAR 0 11
65052: PUSH
65053: DOUBLE
65054: LD_VAR 0 7
65058: DEC
65059: ST_TO_ADDR
65060: LD_VAR 0 9
65064: PUSH
65065: FOR_TO
65066: IFFALSE 65148
// for _y = min_y to max_y do
65068: LD_ADDR_VAR 0 12
65072: PUSH
65073: DOUBLE
65074: LD_VAR 0 8
65078: DEC
65079: ST_TO_ADDR
65080: LD_VAR 0 10
65084: PUSH
65085: FOR_TO
65086: IFFALSE 65144
// begin if not ValidHex ( _x , _y ) then
65088: LD_VAR 0 11
65092: PPUSH
65093: LD_VAR 0 12
65097: PPUSH
65098: CALL_OW 488
65102: NOT
65103: IFFALSE 65107
// continue ;
65105: GO 65085
// if MineAtPos ( _x , _y ) then
65107: LD_VAR 0 11
65111: PPUSH
65112: LD_VAR 0 12
65116: PPUSH
65117: CALL_OW 458
65121: IFFALSE 65142
// ViewMineAtPos ( _x , _y , side ) ;
65123: LD_VAR 0 11
65127: PPUSH
65128: LD_VAR 0 12
65132: PPUSH
65133: LD_VAR 0 3
65137: PPUSH
65138: CALL_OW 457
// end ;
65142: GO 65085
65144: POP
65145: POP
65146: GO 65065
65148: POP
65149: POP
// end ;
65150: LD_VAR 0 2
65154: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
65155: LD_INT 0
65157: PPUSH
65158: PPUSH
65159: PPUSH
65160: PPUSH
65161: PPUSH
65162: PPUSH
// if not units then
65163: LD_VAR 0 1
65167: NOT
65168: IFFALSE 65172
// exit ;
65170: GO 65602
// scaners := [ ] ;
65172: LD_ADDR_VAR 0 6
65176: PUSH
65177: EMPTY
65178: ST_TO_ADDR
// for i in units do
65179: LD_ADDR_VAR 0 3
65183: PUSH
65184: LD_VAR 0 1
65188: PUSH
65189: FOR_IN
65190: IFFALSE 65347
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65192: LD_VAR 0 3
65196: PPUSH
65197: CALL_OW 264
65201: PUSH
65202: LD_INT 11
65204: NONEQUAL
65205: IFTRUE 65219
65207: PUSH
65208: LD_VAR 0 3
65212: PPUSH
65213: CALL_OW 302
65217: NOT
65218: OR
65219: IFTRUE 65236
65221: PUSH
65222: LD_VAR 0 3
65226: PPUSH
65227: CALL_OW 110
65231: PUSH
65232: LD_INT 502
65234: EQUAL
65235: OR
65236: IFFALSE 65240
// continue ;
65238: GO 65189
// ComStop ( i ) ;
65240: LD_VAR 0 3
65244: PPUSH
65245: CALL_OW 141
// x := GetX ( i ) ;
65249: LD_ADDR_VAR 0 4
65253: PUSH
65254: LD_VAR 0 3
65258: PPUSH
65259: CALL_OW 250
65263: ST_TO_ADDR
// y := GetY ( i ) ;
65264: LD_ADDR_VAR 0 5
65268: PUSH
65269: LD_VAR 0 3
65273: PPUSH
65274: CALL_OW 251
65278: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65279: LD_VAR 0 3
65283: PPUSH
65284: CALL_OW 255
65288: PUSH
65289: LD_OWVAR 2
65293: EQUAL
65294: IFFALSE 65313
// PlaySoundXY ( x , y , mineDetector ) ;
65296: LD_VAR 0 4
65300: PPUSH
65301: LD_VAR 0 5
65305: PPUSH
65306: LD_STRING mineDetector
65308: PPUSH
65309: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65313: LD_ADDR_VAR 0 6
65317: PUSH
65318: LD_VAR 0 6
65322: PPUSH
65323: LD_VAR 0 3
65327: PPUSH
65328: CALL 53906 0 2
65332: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65333: LD_VAR 0 3
65337: PPUSH
65338: LD_INT 502
65340: PPUSH
65341: CALL_OW 109
// end ;
65345: GO 65189
65347: POP
65348: POP
// if not scaners then
65349: LD_VAR 0 6
65353: NOT
65354: IFFALSE 65358
// exit ;
65356: GO 65602
// wait ( 3 ) ;
65358: LD_INT 3
65360: PPUSH
65361: CALL_OW 67
// timer := 6 ;
65365: LD_ADDR_VAR 0 7
65369: PUSH
65370: LD_INT 6
65372: ST_TO_ADDR
// repeat for i in scaners do
65373: LD_ADDR_VAR 0 3
65377: PUSH
65378: LD_VAR 0 6
65382: PUSH
65383: FOR_IN
65384: IFFALSE 65500
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65386: LD_VAR 0 3
65390: PPUSH
65391: CALL_OW 302
65395: NOT
65396: IFTRUE 65409
65398: PUSH
65399: LD_VAR 0 3
65403: PPUSH
65404: CALL_OW 314
65408: OR
65409: IFTRUE 65440
65411: PUSH
65412: LD_VAR 0 3
65416: PPUSH
65417: CALL_OW 263
65421: PUSH
65422: LD_INT 1
65424: EQUAL
65425: IFFALSE 65439
65427: PUSH
65428: LD_VAR 0 3
65432: PPUSH
65433: CALL_OW 311
65437: NOT
65438: AND
65439: OR
65440: IFFALSE 65484
// begin SetUnitDisplayNumber ( i , 0 ) ;
65442: LD_VAR 0 3
65446: PPUSH
65447: LD_INT 0
65449: PPUSH
65450: CALL_OW 505
// SetTag ( i , 0 ) ;
65454: LD_VAR 0 3
65458: PPUSH
65459: LD_INT 0
65461: PPUSH
65462: CALL_OW 109
// scaners := scaners diff i ;
65466: LD_ADDR_VAR 0 6
65470: PUSH
65471: LD_VAR 0 6
65475: PUSH
65476: LD_VAR 0 3
65480: DIFF
65481: ST_TO_ADDR
// continue ;
65482: GO 65383
// end ; SetUnitDisplayNumber ( i , timer ) ;
65484: LD_VAR 0 3
65488: PPUSH
65489: LD_VAR 0 7
65493: PPUSH
65494: CALL_OW 505
// end ;
65498: GO 65383
65500: POP
65501: POP
// if not scaners then
65502: LD_VAR 0 6
65506: NOT
65507: IFFALSE 65511
// exit ;
65509: GO 65602
// timer := Dec ( timer ) ;
65511: LD_ADDR_VAR 0 7
65515: PUSH
65516: LD_VAR 0 7
65520: PPUSH
65521: CALL 55301 0 1
65525: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65526: LD_INT 35
65528: PPUSH
65529: CALL_OW 67
// until timer = 0 ;
65533: LD_VAR 0 7
65537: PUSH
65538: LD_INT 0
65540: EQUAL
65541: IFFALSE 65373
// if not scaners then
65543: LD_VAR 0 6
65547: NOT
65548: IFFALSE 65552
// exit ;
65550: GO 65602
// for i in scaners do
65552: LD_ADDR_VAR 0 3
65556: PUSH
65557: LD_VAR 0 6
65561: PUSH
65562: FOR_IN
65563: IFFALSE 65600
// begin SetUnitDisplayNumber ( i , 0 ) ;
65565: LD_VAR 0 3
65569: PPUSH
65570: LD_INT 0
65572: PPUSH
65573: CALL_OW 505
// SetTag ( i , 0 ) ;
65577: LD_VAR 0 3
65581: PPUSH
65582: LD_INT 0
65584: PPUSH
65585: CALL_OW 109
// RevealDetectorMine ( i ) ;
65589: LD_VAR 0 3
65593: PPUSH
65594: CALL 64857 0 1
// end ;
65598: GO 65562
65600: POP
65601: POP
// end ;
65602: LD_VAR 0 2
65606: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
65607: LD_INT 0
65609: PPUSH
// if p1 = mine_detector_mode then
65610: LD_VAR 0 2
65614: PUSH
65615: LD_INT 103
65617: EQUAL
65618: IFFALSE 65629
// DetectMine ( units ) ;
65620: LD_VAR 0 1
65624: PPUSH
65625: CALL 65155 0 1
// end ; end_of_file end_of_file
65629: LD_VAR 0 7
65633: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65634: PPOPN 6
65636: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65637: LD_INT 0
65639: PPUSH
// begin if not units then
65640: LD_VAR 0 1
65644: NOT
65645: IFFALSE 65649
// exit ;
65647: GO 65683
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
65649: LD_VAR 0 1
65653: PPUSH
65654: LD_VAR 0 2
65658: PPUSH
65659: LD_VAR 0 3
65663: PPUSH
65664: LD_VAR 0 4
65668: PPUSH
65669: LD_VAR 0 5
65673: PPUSH
65674: LD_VAR 0 6
65678: PPUSH
65679: CALL 65607 0 6
// end ;
65683: PPOPN 7
65685: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65686: LD_EXP 36
65690: PUSH
65691: LD_INT 4
65693: EQUAL
65694: IFFALSE 65730
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65696: LD_STRING setGameDifficulty(
65698: PUSH
65699: LD_OWVAR 67
65703: STR
65704: PUSH
65705: LD_STRING )
65707: STR
65708: PPUSH
65709: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65713: LD_STRING displayDifficulty(
65715: PUSH
65716: LD_OWVAR 67
65720: STR
65721: PUSH
65722: LD_STRING )
65724: STR
65725: PPUSH
65726: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65730: CALL 65759 0 0
// end ; end_of_file
65734: PPOPN 1
65736: END
// every 0 0$1 do
65737: GO 65739
65739: DISABLE
// begin enable ;
65740: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65741: LD_STRING updateTimer(
65743: PUSH
65744: LD_OWVAR 1
65748: STR
65749: PUSH
65750: LD_STRING );
65752: STR
65753: PPUSH
65754: CALL_OW 559
// end ;
65758: END
// export function SOS_MapStart ( ) ; begin
65759: LD_INT 0
65761: PPUSH
// UpdateFactoryWaypoints ( ) ;
65762: CALL 66693 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65766: CALL 66945 0 0
// ParseMultiDataToLua ( ) ;
65770: CALL 67092 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
65774: LD_STRING setSpecLogoNumber(
65776: PUSH
65777: LD_INT 2
65779: STR
65780: PUSH
65781: LD_STRING ,
65783: STR
65784: PUSH
65785: LD_INT 1
65787: STR
65788: PUSH
65789: LD_STRING )
65791: STR
65792: PPUSH
65793: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
65797: LD_STRING setSpecLogoNumber(
65799: PUSH
65800: LD_INT 3
65802: STR
65803: PUSH
65804: LD_STRING ,
65806: STR
65807: PUSH
65808: LD_INT 2
65810: STR
65811: PUSH
65812: LD_STRING )
65814: STR
65815: PPUSH
65816: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
65820: LD_STRING setSpecLogoNumber(
65822: PUSH
65823: LD_INT 4
65825: STR
65826: PUSH
65827: LD_STRING ,
65829: STR
65830: PUSH
65831: LD_INT 3
65833: STR
65834: PUSH
65835: LD_STRING )
65837: STR
65838: PPUSH
65839: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
65843: LD_STRING setSpecLogoNumber(
65845: PUSH
65846: LD_INT 5
65848: STR
65849: PUSH
65850: LD_STRING ,
65852: STR
65853: PUSH
65854: LD_INT 4
65856: STR
65857: PUSH
65858: LD_STRING )
65860: STR
65861: PPUSH
65862: CALL_OW 559
// end ;
65866: LD_VAR 0 1
65870: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
65871: LD_INT 0
65873: PPUSH
65874: PPUSH
65875: PPUSH
65876: PPUSH
65877: PPUSH
65878: PPUSH
65879: PPUSH
65880: PPUSH
65881: PPUSH
// for i := 1 to 8 do
65882: LD_ADDR_VAR 0 2
65886: PUSH
65887: DOUBLE
65888: LD_INT 1
65890: DEC
65891: ST_TO_ADDR
65892: LD_INT 8
65894: PUSH
65895: FOR_TO
65896: IFFALSE 66281
// begin if mpSidePositions [ i ] then
65898: LD_EXP 37
65902: PUSH
65903: LD_VAR 0 2
65907: ARRAY
65908: IFFALSE 66279
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
65910: LD_ADDR_VAR 0 7
65914: PUSH
65915: LD_INT 22
65917: PUSH
65918: LD_VAR 0 2
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 21
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: PPUSH
65941: CALL_OW 69
65945: PPUSH
65946: CALL 17940 0 1
65950: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65951: LD_ADDR_VAR 0 9
65955: PUSH
65956: LD_INT 22
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: LD_INT 30
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 30
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: LIST
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PPUSH
66000: CALL_OW 69
66004: ST_TO_ADDR
// crates := 0 ;
66005: LD_ADDR_VAR 0 4
66009: PUSH
66010: LD_INT 0
66012: ST_TO_ADDR
// oil := 0 ;
66013: LD_ADDR_VAR 0 5
66017: PUSH
66018: LD_INT 0
66020: ST_TO_ADDR
// sib := 0 ;
66021: LD_ADDR_VAR 0 6
66025: PUSH
66026: LD_INT 0
66028: ST_TO_ADDR
// if bases then
66029: LD_VAR 0 9
66033: IFFALSE 66139
// begin for j in bases do
66035: LD_ADDR_VAR 0 3
66039: PUSH
66040: LD_VAR 0 9
66044: PUSH
66045: FOR_IN
66046: IFFALSE 66137
// begin base := GetBase ( j ) ;
66048: LD_ADDR_VAR 0 8
66052: PUSH
66053: LD_VAR 0 3
66057: PPUSH
66058: CALL_OW 274
66062: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66063: LD_ADDR_VAR 0 4
66067: PUSH
66068: LD_VAR 0 4
66072: PUSH
66073: LD_VAR 0 8
66077: PPUSH
66078: LD_INT 1
66080: PPUSH
66081: CALL_OW 275
66085: PLUS
66086: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66087: LD_ADDR_VAR 0 5
66091: PUSH
66092: LD_VAR 0 5
66096: PUSH
66097: LD_VAR 0 8
66101: PPUSH
66102: LD_INT 2
66104: PPUSH
66105: CALL_OW 275
66109: PLUS
66110: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66111: LD_ADDR_VAR 0 6
66115: PUSH
66116: LD_VAR 0 6
66120: PUSH
66121: LD_VAR 0 8
66125: PPUSH
66126: LD_INT 3
66128: PPUSH
66129: CALL_OW 275
66133: PLUS
66134: ST_TO_ADDR
// end ;
66135: GO 66045
66137: POP
66138: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66139: LD_STRING setSpecText(
66141: PUSH
66142: LD_VAR 0 2
66146: STR
66147: PUSH
66148: LD_STRING ,
66150: STR
66151: PUSH
66152: LD_INT 2
66154: STR
66155: PUSH
66156: LD_STRING ,
66158: STR
66159: PUSH
66160: LD_VAR 0 4
66164: STR
66165: PUSH
66166: LD_STRING )
66168: STR
66169: PPUSH
66170: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66174: LD_STRING setSpecText(
66176: PUSH
66177: LD_VAR 0 2
66181: STR
66182: PUSH
66183: LD_STRING ,
66185: STR
66186: PUSH
66187: LD_INT 3
66189: STR
66190: PUSH
66191: LD_STRING ,
66193: STR
66194: PUSH
66195: LD_VAR 0 5
66199: STR
66200: PUSH
66201: LD_STRING )
66203: STR
66204: PPUSH
66205: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
66209: LD_STRING setSpecText(
66211: PUSH
66212: LD_VAR 0 2
66216: STR
66217: PUSH
66218: LD_STRING ,
66220: STR
66221: PUSH
66222: LD_INT 4
66224: STR
66225: PUSH
66226: LD_STRING ,
66228: STR
66229: PUSH
66230: LD_VAR 0 6
66234: STR
66235: PUSH
66236: LD_STRING )
66238: STR
66239: PPUSH
66240: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
66244: LD_STRING setSpecText(
66246: PUSH
66247: LD_VAR 0 2
66251: STR
66252: PUSH
66253: LD_STRING ,
66255: STR
66256: PUSH
66257: LD_INT 5
66259: STR
66260: PUSH
66261: LD_STRING ,
66263: STR
66264: PUSH
66265: LD_VAR 0 7
66269: STR
66270: PUSH
66271: LD_STRING )
66273: STR
66274: PPUSH
66275: CALL_OW 559
// end ; end ;
66279: GO 65895
66281: POP
66282: POP
// end ;
66283: LD_VAR 0 1
66287: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
66288: LD_INT 2
66290: PUSH
66291: LD_INT 30
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 30
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: LIST
66315: PPUSH
66316: CALL_OW 69
66320: IFFALSE 66330
66322: GO 66324
66324: DISABLE
// begin enable ;
66325: ENABLE
// UpdateSpectatorBar ;
66326: CALL 65871 0 0
// end ;
66330: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66331: LD_INT 0
66333: PPUSH
// end ;
66334: LD_VAR 0 12
66338: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66339: LD_INT 0
66341: PPUSH
66342: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66343: LD_VAR 0 1
66347: NOT
66348: IFTRUE 66367
66350: PUSH
66351: LD_VAR 0 2
66355: PPUSH
66356: LD_VAR 0 3
66360: PPUSH
66361: CALL_OW 488
66365: NOT
66366: OR
66367: IFTRUE 66402
66369: PUSH
66370: LD_VAR 0 1
66374: PPUSH
66375: CALL_OW 266
66379: PUSH
66380: LD_INT 3
66382: NONEQUAL
66383: IFFALSE 66401
66385: PUSH
66386: LD_VAR 0 1
66390: PPUSH
66391: CALL_OW 247
66395: PUSH
66396: LD_INT 1
66398: EQUAL
66399: NOT
66400: AND
66401: OR
66402: IFFALSE 66406
// exit ;
66404: GO 66688
// if GetType ( factory ) = unit_human then
66406: LD_VAR 0 1
66410: PPUSH
66411: CALL_OW 247
66415: PUSH
66416: LD_INT 1
66418: EQUAL
66419: IFFALSE 66436
// factory := IsInUnit ( factory ) ;
66421: LD_ADDR_VAR 0 1
66425: PUSH
66426: LD_VAR 0 1
66430: PPUSH
66431: CALL_OW 310
66435: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66436: LD_VAR 0 1
66440: PPUSH
66441: CALL_OW 266
66445: PUSH
66446: LD_INT 3
66448: NONEQUAL
66449: IFFALSE 66453
// exit ;
66451: GO 66688
// for i := 1 to Count ( factoryWaypoints ) do
66453: LD_ADDR_VAR 0 5
66457: PUSH
66458: DOUBLE
66459: LD_INT 1
66461: DEC
66462: ST_TO_ADDR
66463: LD_EXP 53
66467: PPUSH
66468: CALL 17940 0 1
66472: PUSH
66473: FOR_TO
66474: IFFALSE 66636
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
66476: LD_VAR 0 2
66480: PPUSH
66481: LD_VAR 0 3
66485: PPUSH
66486: CALL_OW 428
66490: PUSH
66491: LD_EXP 53
66495: PUSH
66496: LD_VAR 0 5
66500: ARRAY
66501: PUSH
66502: LD_INT 2
66504: ARRAY
66505: EQUAL
66506: IFFALSE 66538
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66508: LD_ADDR_EXP 53
66512: PUSH
66513: LD_EXP 53
66517: PPUSH
66518: LD_VAR 0 5
66522: PPUSH
66523: CALL_OW 3
66527: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66528: CALL 66693 0 0
// exit ;
66532: POP
66533: POP
66534: GO 66688
// end else
66536: GO 66634
// if factory = factoryWaypoints [ i ] [ 2 ] then
66538: LD_VAR 0 1
66542: PUSH
66543: LD_EXP 53
66547: PUSH
66548: LD_VAR 0 5
66552: ARRAY
66553: PUSH
66554: LD_INT 2
66556: ARRAY
66557: EQUAL
66558: IFFALSE 66634
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66560: LD_ADDR_EXP 53
66564: PUSH
66565: LD_EXP 53
66569: PPUSH
66570: LD_VAR 0 5
66574: PPUSH
66575: CALL_OW 3
66579: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66580: LD_ADDR_EXP 53
66584: PUSH
66585: LD_EXP 53
66589: PPUSH
66590: LD_VAR 0 1
66594: PPUSH
66595: CALL_OW 255
66599: PUSH
66600: LD_VAR 0 1
66604: PUSH
66605: LD_VAR 0 2
66609: PUSH
66610: LD_VAR 0 3
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: PPUSH
66621: CALL 53906 0 2
66625: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66626: CALL 66693 0 0
// exit ;
66630: POP
66631: POP
66632: GO 66688
// end ; end ;
66634: GO 66473
66636: POP
66637: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66638: LD_ADDR_EXP 53
66642: PUSH
66643: LD_EXP 53
66647: PPUSH
66648: LD_VAR 0 1
66652: PPUSH
66653: CALL_OW 255
66657: PUSH
66658: LD_VAR 0 1
66662: PUSH
66663: LD_VAR 0 2
66667: PUSH
66668: LD_VAR 0 3
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: PPUSH
66679: CALL 53906 0 2
66683: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66684: CALL 66693 0 0
// end ;
66688: LD_VAR 0 4
66692: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66693: LD_INT 0
66695: PPUSH
66696: PPUSH
66697: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66698: LD_STRING resetFactoryWaypoint();
66700: PPUSH
66701: CALL_OW 559
// if factoryWaypoints then
66705: LD_EXP 53
66709: IFFALSE 66830
// begin list := factoryWaypoints ;
66711: LD_ADDR_VAR 0 3
66715: PUSH
66716: LD_EXP 53
66720: ST_TO_ADDR
// for i := 1 to list do
66721: LD_ADDR_VAR 0 2
66725: PUSH
66726: DOUBLE
66727: LD_INT 1
66729: DEC
66730: ST_TO_ADDR
66731: LD_VAR 0 3
66735: PUSH
66736: FOR_TO
66737: IFFALSE 66828
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66739: LD_STRING setFactoryWaypointXY(
66741: PUSH
66742: LD_VAR 0 3
66746: PUSH
66747: LD_VAR 0 2
66751: ARRAY
66752: PUSH
66753: LD_INT 1
66755: ARRAY
66756: STR
66757: PUSH
66758: LD_STRING ,
66760: STR
66761: PUSH
66762: LD_VAR 0 3
66766: PUSH
66767: LD_VAR 0 2
66771: ARRAY
66772: PUSH
66773: LD_INT 2
66775: ARRAY
66776: STR
66777: PUSH
66778: LD_STRING ,
66780: STR
66781: PUSH
66782: LD_VAR 0 3
66786: PUSH
66787: LD_VAR 0 2
66791: ARRAY
66792: PUSH
66793: LD_INT 3
66795: ARRAY
66796: STR
66797: PUSH
66798: LD_STRING ,
66800: STR
66801: PUSH
66802: LD_VAR 0 3
66806: PUSH
66807: LD_VAR 0 2
66811: ARRAY
66812: PUSH
66813: LD_INT 4
66815: ARRAY
66816: STR
66817: PUSH
66818: LD_STRING )
66820: STR
66821: PPUSH
66822: CALL_OW 559
66826: GO 66736
66828: POP
66829: POP
// end ; end ;
66830: LD_VAR 0 1
66834: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66835: LD_INT 0
66837: PPUSH
// if HexInfo ( x , y ) = warehouse then
66838: LD_VAR 0 2
66842: PPUSH
66843: LD_VAR 0 3
66847: PPUSH
66848: CALL_OW 428
66852: PUSH
66853: LD_VAR 0 1
66857: EQUAL
66858: IFFALSE 66885
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66860: LD_ADDR_EXP 55
66864: PUSH
66865: LD_EXP 55
66869: PPUSH
66870: LD_VAR 0 1
66874: PPUSH
66875: LD_INT 0
66877: PPUSH
66878: CALL_OW 1
66882: ST_TO_ADDR
66883: GO 66936
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66885: LD_ADDR_EXP 55
66889: PUSH
66890: LD_EXP 55
66894: PPUSH
66895: LD_VAR 0 1
66899: PPUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: CALL_OW 255
66909: PUSH
66910: LD_VAR 0 1
66914: PUSH
66915: LD_VAR 0 2
66919: PUSH
66920: LD_VAR 0 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: PPUSH
66931: CALL_OW 1
66935: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66936: CALL 66945 0 0
// end ;
66940: LD_VAR 0 4
66944: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66945: LD_INT 0
66947: PPUSH
66948: PPUSH
66949: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66950: LD_STRING resetWarehouseGatheringPoints();
66952: PPUSH
66953: CALL_OW 559
// if warehouseGatheringPoints then
66957: LD_EXP 55
66961: IFFALSE 67087
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66963: LD_ADDR_VAR 0 3
66967: PUSH
66968: LD_EXP 55
66972: PPUSH
66973: CALL 57840 0 1
66977: ST_TO_ADDR
// for i := 1 to list do
66978: LD_ADDR_VAR 0 2
66982: PUSH
66983: DOUBLE
66984: LD_INT 1
66986: DEC
66987: ST_TO_ADDR
66988: LD_VAR 0 3
66992: PUSH
66993: FOR_TO
66994: IFFALSE 67085
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66996: LD_STRING setWarehouseGatheringPointXY(
66998: PUSH
66999: LD_VAR 0 3
67003: PUSH
67004: LD_VAR 0 2
67008: ARRAY
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: STR
67014: PUSH
67015: LD_STRING ,
67017: STR
67018: PUSH
67019: LD_VAR 0 3
67023: PUSH
67024: LD_VAR 0 2
67028: ARRAY
67029: PUSH
67030: LD_INT 2
67032: ARRAY
67033: STR
67034: PUSH
67035: LD_STRING ,
67037: STR
67038: PUSH
67039: LD_VAR 0 3
67043: PUSH
67044: LD_VAR 0 2
67048: ARRAY
67049: PUSH
67050: LD_INT 3
67052: ARRAY
67053: STR
67054: PUSH
67055: LD_STRING ,
67057: STR
67058: PUSH
67059: LD_VAR 0 3
67063: PUSH
67064: LD_VAR 0 2
67068: ARRAY
67069: PUSH
67070: LD_INT 4
67072: ARRAY
67073: STR
67074: PUSH
67075: LD_STRING )
67077: STR
67078: PPUSH
67079: CALL_OW 559
67083: GO 66993
67085: POP
67086: POP
// end ; end ;
67087: LD_VAR 0 1
67091: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67092: LD_INT 0
67094: PPUSH
67095: PPUSH
// if not mpSidePositions then
67096: LD_EXP 37
67100: NOT
67101: IFFALSE 67105
// exit ;
67103: GO 67176
// result :=  ;
67105: LD_ADDR_VAR 0 1
67109: PUSH
67110: LD_STRING 
67112: ST_TO_ADDR
// for i := 1 to 8 do
67113: LD_ADDR_VAR 0 2
67117: PUSH
67118: DOUBLE
67119: LD_INT 1
67121: DEC
67122: ST_TO_ADDR
67123: LD_INT 8
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67157
// begin result := result & mpSidePositions [ i ] & ; ;
67129: LD_ADDR_VAR 0 1
67133: PUSH
67134: LD_VAR 0 1
67138: PUSH
67139: LD_EXP 37
67143: PUSH
67144: LD_VAR 0 2
67148: ARRAY
67149: STR
67150: PUSH
67151: LD_STRING ;
67153: STR
67154: ST_TO_ADDR
// end ;
67155: GO 67126
67157: POP
67158: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67159: LD_STRING setMultiplayerRealPosition("
67161: PUSH
67162: LD_VAR 0 1
67166: STR
67167: PUSH
67168: LD_STRING ");
67170: STR
67171: PPUSH
67172: CALL_OW 559
// end ;
67176: LD_VAR 0 1
67180: RET
