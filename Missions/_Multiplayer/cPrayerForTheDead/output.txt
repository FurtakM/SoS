// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3927 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5873 0 1
  44: PPUSH
  45: CALL 1028 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5873 0 1
  56: PPUSH
  57: CALL 12508 0 1
// Multiplayer_Start ;
  61: CALL 7603 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 42
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 42
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7722 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: IFFALSE 199
 192: PUSH
 193: LD_OWVAR 48
 197: NOT
 198: AND
 199: IFFALSE 215
 201: GO 203
 203: DISABLE
// begin enable ;
 204: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 205: LD_ADDR_OWVAR 47
 209: PUSH
 210: CALL 8155 0 0
 214: ST_TO_ADDR
// end ; end_of_file
 215: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] , [ 26 , 30 , 34 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 216: LD_EXP 41
 220: PUSH
 221: LD_INT 6
 223: PUSH
 224: LD_INT 8
 226: PUSH
 227: LD_INT 10
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: LIST
 234: PUSH
 235: LD_OWVAR 67
 239: ARRAY
 240: PUSH
 241: LD_INT 16
 243: PUSH
 244: LD_INT 20
 246: PUSH
 247: LD_INT 24
 249: PUSH
 250: EMPTY
 251: LIST
 252: LIST
 253: LIST
 254: PUSH
 255: LD_OWVAR 67
 259: ARRAY
 260: PUSH
 261: LD_INT 26
 263: PUSH
 264: LD_INT 30
 266: PUSH
 267: LD_INT 34
 269: PUSH
 270: EMPTY
 271: LIST
 272: LIST
 273: LIST
 274: PUSH
 275: LD_OWVAR 67
 279: ARRAY
 280: PUSH
 281: EMPTY
 282: LIST
 283: LIST
 284: LIST
 285: IN
 286: IFFALSE 660
 288: GO 290
 290: DISABLE
 291: LD_INT 0
 293: PPUSH
 294: PPUSH
 295: PPUSH
 296: PPUSH
 297: PPUSH
// begin repeat wait ( 10 ) ;
 298: LD_INT 10
 300: PPUSH
 301: CALL_OW 67
// until not blockThread ;
 305: LD_EXP 6
 309: NOT
 310: IFFALSE 298
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 312: LD_ADDR_VAR 0 5
 316: PUSH
 317: LD_INT 6
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: LD_INT 4
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: PUSH
 331: LD_OWVAR 67
 335: ARRAY
 336: ST_TO_ADDR
// for i := 1 to 8 do
 337: LD_ADDR_VAR 0 1
 341: PUSH
 342: DOUBLE
 343: LD_INT 1
 345: DEC
 346: ST_TO_ADDR
 347: LD_INT 8
 349: PUSH
 350: FOR_TO
 351: IFFALSE 650
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 353: LD_EXP 15
 357: PUSH
 358: LD_VAR 0 1
 362: ARRAY
 363: PUSH
 364: LD_INT 2
 366: EQUAL
 367: IFFALSE 382
 369: PUSH
 370: LD_EXP 32
 374: PUSH
 375: LD_VAR 0 1
 379: ARRAY
 380: NOT
 381: AND
 382: IFFALSE 648
// begin uc_side := i ;
 384: LD_ADDR_OWVAR 20
 388: PUSH
 389: LD_VAR 0 1
 393: ST_TO_ADDR
// uc_nation := nation_russian ;
 394: LD_ADDR_OWVAR 21
 398: PUSH
 399: LD_INT 3
 401: ST_TO_ADDR
// PrepareEngineer ( false , skill ) ;
 402: LD_INT 0
 404: PPUSH
 405: LD_VAR 0 5
 409: PPUSH
 410: CALL_OW 382
// un := CreateHuman ;
 414: LD_ADDR_VAR 0 3
 418: PUSH
 419: CALL_OW 44
 423: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 424: LD_VAR 0 3
 428: PPUSH
 429: LD_INT 25
 431: PPUSH
 432: LD_INT 0
 434: PPUSH
 435: CALL_OW 49
// for j := 1 to 2 do
 439: LD_ADDR_VAR 0 2
 443: PUSH
 444: DOUBLE
 445: LD_INT 1
 447: DEC
 448: ST_TO_ADDR
 449: LD_INT 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 494
// begin PrepareMechanic ( false , skill ) ;
 455: LD_INT 0
 457: PPUSH
 458: LD_VAR 0 5
 462: PPUSH
 463: CALL_OW 383
// un := CreateHuman ;
 467: LD_ADDR_VAR 0 3
 471: PUSH
 472: CALL_OW 44
 476: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 477: LD_VAR 0 3
 481: PPUSH
 482: LD_INT 25
 484: PPUSH
 485: LD_INT 0
 487: PPUSH
 488: CALL_OW 49
// end ;
 492: GO 452
 494: POP
 495: POP
// for j := 1 to 2 do
 496: LD_ADDR_VAR 0 2
 500: PUSH
 501: DOUBLE
 502: LD_INT 1
 504: DEC
 505: ST_TO_ADDR
 506: LD_INT 2
 508: PUSH
 509: FOR_TO
 510: IFFALSE 624
// begin uc_side := i ;
 512: LD_ADDR_OWVAR 20
 516: PUSH
 517: LD_VAR 0 1
 521: ST_TO_ADDR
// uc_nation := nation_russian ;
 522: LD_ADDR_OWVAR 21
 526: PUSH
 527: LD_INT 3
 529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 530: LD_INT 22
 532: PPUSH
 533: LD_INT 1
 535: PPUSH
 536: LD_INT 1
 538: PPUSH
 539: LD_INT 44
 541: PPUSH
 542: LD_INT 50
 544: PPUSH
 545: CALL 20740 0 5
// veh := CreateVehicle ;
 549: LD_ADDR_VAR 0 4
 553: PUSH
 554: CALL_OW 45
 558: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 559: LD_VAR 0 4
 563: PPUSH
 564: LD_INT 5
 566: PPUSH
 567: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 571: LD_INT 0
 573: PPUSH
 574: LD_VAR 0 5
 578: PPUSH
 579: CALL_OW 383
// un := CreateHuman ;
 583: LD_ADDR_VAR 0 3
 587: PUSH
 588: CALL_OW 44
 592: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 593: LD_VAR 0 4
 597: PPUSH
 598: LD_INT 25
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 608: LD_VAR 0 3
 612: PPUSH
 613: LD_VAR 0 4
 617: PPUSH
 618: CALL_OW 52
// end ;
 622: GO 509
 624: POP
 625: POP
// if i = your_side then
 626: LD_VAR 0 1
 630: PUSH
 631: LD_OWVAR 2
 635: EQUAL
 636: IFFALSE 648
// CenterNowOnXY ( 112 , 172 ) ;
 638: LD_INT 112
 640: PPUSH
 641: LD_INT 172
 643: PPUSH
 644: CALL_OW 86
// end ;
 648: GO 350
 650: POP
 651: POP
// wait ( 10 10$0 ) ;
 652: LD_INT 21000
 654: PPUSH
 655: CALL_OW 67
// enable ;
 659: ENABLE
// end ;
 660: PPOPN 5
 662: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 22 , 26 , 30 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 663: LD_EXP 41
 667: PUSH
 668: LD_INT 12
 670: PUSH
 671: LD_INT 14
 673: PUSH
 674: LD_INT 16
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: LIST
 681: PUSH
 682: LD_OWVAR 67
 686: ARRAY
 687: PUSH
 688: LD_INT 22
 690: PUSH
 691: LD_INT 26
 693: PUSH
 694: LD_INT 30
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: LD_OWVAR 67
 706: ARRAY
 707: PUSH
 708: LD_INT 32
 710: PUSH
 711: LD_INT 36
 713: PUSH
 714: LD_INT 40
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: LIST
 721: PUSH
 722: LD_OWVAR 67
 726: ARRAY
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: IN
 733: IFFALSE 1025
 735: GO 737
 737: DISABLE
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
 742: PPUSH
 743: PPUSH
 744: PPUSH
// begin repeat wait ( 10 ) ;
 745: LD_INT 10
 747: PPUSH
 748: CALL_OW 67
// until not blockThread ;
 752: LD_EXP 6
 756: NOT
 757: IFFALSE 745
// skill := [ 6 , 5 , 4 ] [ Difficulty ] ;
 759: LD_ADDR_VAR 0 5
 763: PUSH
 764: LD_INT 6
 766: PUSH
 767: LD_INT 5
 769: PUSH
 770: LD_INT 4
 772: PUSH
 773: EMPTY
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// for i := 1 to 8 do
 784: LD_ADDR_VAR 0 1
 788: PUSH
 789: DOUBLE
 790: LD_INT 1
 792: DEC
 793: ST_TO_ADDR
 794: LD_INT 8
 796: PUSH
 797: FOR_TO
 798: IFFALSE 1015
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 800: LD_EXP 15
 804: PUSH
 805: LD_VAR 0 1
 809: ARRAY
 810: PUSH
 811: LD_INT 1
 813: EQUAL
 814: IFFALSE 829
 816: PUSH
 817: LD_EXP 32
 821: PUSH
 822: LD_VAR 0 1
 826: ARRAY
 827: NOT
 828: AND
 829: IFFALSE 1013
// begin for j := 1 to 3 do
 831: LD_ADDR_VAR 0 2
 835: PUSH
 836: DOUBLE
 837: LD_INT 1
 839: DEC
 840: ST_TO_ADDR
 841: LD_INT 3
 843: PUSH
 844: FOR_TO
 845: IFFALSE 989
// begin uc_side := i ;
 847: LD_ADDR_OWVAR 20
 851: PUSH
 852: LD_VAR 0 1
 856: ST_TO_ADDR
// uc_nation := nation_russian ;
 857: LD_ADDR_OWVAR 21
 861: PUSH
 862: LD_INT 3
 864: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ j mod 2 + 1 ] , 50 ) ;
 865: LD_INT 22
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: LD_INT 1
 873: PPUSH
 874: LD_INT 44
 876: PUSH
 877: LD_INT 43
 879: PUSH
 880: EMPTY
 881: LIST
 882: LIST
 883: PUSH
 884: LD_VAR 0 2
 888: PUSH
 889: LD_INT 2
 891: MOD
 892: PUSH
 893: LD_INT 1
 895: PLUS
 896: ARRAY
 897: PPUSH
 898: LD_INT 50
 900: PPUSH
 901: CALL 20740 0 5
// veh := CreateVehicle ;
 905: LD_ADDR_VAR 0 4
 909: PUSH
 910: CALL_OW 45
 914: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 915: LD_VAR 0 4
 919: PPUSH
 920: LD_INT 5
 922: PPUSH
 923: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 927: LD_INT 0
 929: PPUSH
 930: LD_VAR 0 5
 934: PPUSH
 935: CALL_OW 383
// un := CreateHuman ;
 939: LD_ADDR_VAR 0 3
 943: PUSH
 944: CALL_OW 44
 948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 949: LD_INT 35
 951: PPUSH
 952: CALL_OW 67
// until PlaceUnitArea ( veh , southRefArea , false ) ;
 956: LD_VAR 0 4
 960: PPUSH
 961: LD_INT 25
 963: PPUSH
 964: LD_INT 0
 966: PPUSH
 967: CALL_OW 49
 971: IFFALSE 949
// PlaceHumanInUnit ( un , veh ) ;
 973: LD_VAR 0 3
 977: PPUSH
 978: LD_VAR 0 4
 982: PPUSH
 983: CALL_OW 52
// end ;
 987: GO 844
 989: POP
 990: POP
// if i = your_side then
 991: LD_VAR 0 1
 995: PUSH
 996: LD_OWVAR 2
1000: EQUAL
1001: IFFALSE 1013
// CenterNowOnXY ( 112 , 172 ) ;
1003: LD_INT 112
1005: PPUSH
1006: LD_INT 172
1008: PPUSH
1009: CALL_OW 86
// end ;
1013: GO 797
1015: POP
1016: POP
// wait ( 10 10$0 ) ;
1017: LD_INT 21000
1019: PPUSH
1020: CALL_OW 67
// enable ;
1024: ENABLE
// end ; end_of_file
1025: PPOPN 5
1027: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
1028: LD_INT 0
1030: PPUSH
1031: PPUSH
1032: PPUSH
1033: PPUSH
1034: PPUSH
// enemySide := side ;
1035: LD_ADDR_EXP 12
1039: PUSH
1040: LD_VAR 0 1
1044: ST_TO_ADDR
// enemyUnits := [ ] ;
1045: LD_ADDR_EXP 9
1049: PUSH
1050: EMPTY
1051: ST_TO_ADDR
// enemyMobile := [ ] ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: EMPTY
1058: ST_TO_ADDR
// enemyForestGuard := [ ] ;
1059: LD_ADDR_EXP 11
1063: PUSH
1064: EMPTY
1065: ST_TO_ADDR
// arAttackersInf := [ ] ;
1066: LD_ADDR_EXP 13
1070: PUSH
1071: EMPTY
1072: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
1073: LD_ADDR_VAR 0 5
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 6
1083: PUSH
1084: LD_INT 8
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_OWVAR 67
1096: ARRAY
1097: ST_TO_ADDR
// uc_side := side ;
1098: LD_ADDR_OWVAR 20
1102: PUSH
1103: LD_VAR 0 1
1107: ST_TO_ADDR
// uc_nation := nation_arabian ;
1108: LD_ADDR_OWVAR 21
1112: PUSH
1113: LD_INT 2
1115: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: LD_INT 6
1131: PUSH
1132: LD_INT 7
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: LIST
1139: PUSH
1140: LD_OWVAR 67
1144: ARRAY
1145: PUSH
1146: FOR_TO
1147: IFFALSE 1234
// begin PrepareSoldier ( false , skill ) ;
1149: LD_INT 0
1151: PPUSH
1152: LD_VAR 0 5
1156: PPUSH
1157: CALL_OW 381
// un := CreateHuman ;
1161: LD_ADDR_VAR 0 4
1165: PUSH
1166: CALL_OW 44
1170: ST_TO_ADDR
// if i mod 2 = 0 then
1171: LD_VAR 0 3
1175: PUSH
1176: LD_INT 2
1178: MOD
1179: PUSH
1180: LD_INT 0
1182: EQUAL
1183: IFFALSE 1197
// SetClass ( un , class_mortar ) ;
1185: LD_VAR 0 4
1189: PPUSH
1190: LD_INT 8
1192: PPUSH
1193: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1197: LD_ADDR_EXP 11
1201: PUSH
1202: LD_EXP 11
1206: PPUSH
1207: LD_VAR 0 4
1211: PPUSH
1212: CALL 53920 0 2
1216: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1217: LD_VAR 0 4
1221: PPUSH
1222: LD_INT 17
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 49
// end ;
1232: GO 1146
1234: POP
1235: POP
// for i := 1 to 2 do
1236: LD_ADDR_VAR 0 3
1240: PUSH
1241: DOUBLE
1242: LD_INT 1
1244: DEC
1245: ST_TO_ADDR
1246: LD_INT 2
1248: PUSH
1249: FOR_TO
1250: IFFALSE 1311
// begin PrepareScientist ( false , skill ) ;
1252: LD_INT 0
1254: PPUSH
1255: LD_VAR 0 5
1259: PPUSH
1260: CALL_OW 384
// un := CreateHuman ;
1264: LD_ADDR_VAR 0 4
1268: PUSH
1269: CALL_OW 44
1273: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1274: LD_ADDR_EXP 11
1278: PUSH
1279: LD_EXP 11
1283: PPUSH
1284: LD_VAR 0 4
1288: PPUSH
1289: CALL 53920 0 2
1293: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1294: LD_VAR 0 4
1298: PPUSH
1299: LD_INT 17
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL_OW 49
// end ;
1309: GO 1249
1311: POP
1312: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1313: LD_ADDR_VAR 0 3
1317: PUSH
1318: DOUBLE
1319: LD_INT 1
1321: DEC
1322: ST_TO_ADDR
1323: LD_INT 2
1325: PUSH
1326: LD_INT 3
1328: PUSH
1329: LD_INT 3
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: LIST
1336: PUSH
1337: LD_OWVAR 67
1341: ARRAY
1342: PUSH
1343: FOR_TO
1344: IFFALSE 1480
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1346: LD_INT 14
1348: PPUSH
1349: LD_INT 2
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: LD_INT 27
1357: PPUSH
1358: LD_INT 100
1360: PPUSH
1361: CALL 20740 0 5
// veh := CreateVehicle ;
1365: LD_ADDR_VAR 0 6
1369: PUSH
1370: CALL_OW 45
1374: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1375: LD_ADDR_EXP 11
1379: PUSH
1380: LD_EXP 11
1384: PPUSH
1385: LD_VAR 0 6
1389: PPUSH
1390: CALL 53920 0 2
1394: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1395: LD_VAR 0 6
1399: PPUSH
1400: LD_INT 5
1402: PPUSH
1403: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1407: LD_INT 0
1409: PPUSH
1410: LD_VAR 0 5
1414: PPUSH
1415: CALL_OW 383
// un := CreateHuman ;
1419: LD_ADDR_VAR 0 4
1423: PUSH
1424: CALL_OW 44
1428: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1429: LD_ADDR_EXP 11
1433: PUSH
1434: LD_EXP 11
1438: PPUSH
1439: LD_VAR 0 4
1443: PPUSH
1444: CALL 53920 0 2
1448: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1449: LD_VAR 0 6
1453: PPUSH
1454: LD_INT 18
1456: PPUSH
1457: LD_INT 0
1459: PPUSH
1460: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1464: LD_VAR 0 4
1468: PPUSH
1469: LD_VAR 0 6
1473: PPUSH
1474: CALL_OW 52
// end ;
1478: GO 1343
1480: POP
1481: POP
// for i := 1 to 2 do
1482: LD_ADDR_VAR 0 3
1486: PUSH
1487: DOUBLE
1488: LD_INT 1
1490: DEC
1491: ST_TO_ADDR
1492: LD_INT 2
1494: PUSH
1495: FOR_TO
1496: IFFALSE 1579
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1498: LD_INT 14
1500: PPUSH
1501: LD_INT 2
1503: PPUSH
1504: LD_INT 1
1506: PPUSH
1507: LD_INT 32
1509: PPUSH
1510: LD_INT 100
1512: PPUSH
1513: CALL 20740 0 5
// veh := CreateVehicle ;
1517: LD_ADDR_VAR 0 6
1521: PUSH
1522: CALL_OW 45
1526: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1527: LD_VAR 0 6
1531: PPUSH
1532: LD_INT 2
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: CALL_OW 12
1542: PPUSH
1543: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1547: LD_VAR 0 6
1551: PPUSH
1552: LD_INT 22
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1562: LD_VAR 0 6
1566: PPUSH
1567: LD_INT 2
1569: PPUSH
1570: LD_INT 100
1572: PPUSH
1573: CALL_OW 290
// end ;
1577: GO 1495
1579: POP
1580: POP
// end ;
1581: LD_VAR 0 2
1585: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1586: LD_INT 0
1588: PPUSH
1589: PPUSH
1590: PPUSH
1591: PPUSH
1592: PPUSH
1593: PPUSH
// blockThread := true ;
1594: LD_ADDR_EXP 6
1598: PUSH
1599: LD_INT 1
1601: ST_TO_ADDR
// v := convoyWave div 12 ;
1602: LD_ADDR_VAR 0 6
1606: PUSH
1607: LD_EXP 41
1611: PUSH
1612: LD_INT 12
1614: DIV
1615: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_INT 4
1623: PUSH
1624: LD_INT 5
1626: PUSH
1627: LD_INT 6
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: LIST
1634: PUSH
1635: LD_OWVAR 67
1639: ARRAY
1640: PUSH
1641: LD_VAR 0 6
1645: PLUS
1646: ST_TO_ADDR
// if skill > 10 then
1647: LD_VAR 0 5
1651: PUSH
1652: LD_INT 10
1654: GREATER
1655: IFFALSE 1665
// skill := 10 ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_INT 10
1664: ST_TO_ADDR
// if v > 8 then
1665: LD_VAR 0 6
1669: PUSH
1670: LD_INT 8
1672: GREATER
1673: IFFALSE 1683
// v := 8 ;
1675: LD_ADDR_VAR 0 6
1679: PUSH
1680: LD_INT 8
1682: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1683: LD_ADDR_VAR 0 2
1687: PUSH
1688: DOUBLE
1689: LD_INT 1
1691: DEC
1692: ST_TO_ADDR
1693: LD_INT 2
1695: PUSH
1696: LD_INT 3
1698: PUSH
1699: LD_INT 3
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: PUSH
1707: LD_OWVAR 67
1711: ARRAY
1712: PUSH
1713: LD_VAR 0 6
1717: PLUS
1718: PUSH
1719: FOR_TO
1720: IFFALSE 1899
// begin uc_side := enemySide ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_EXP 12
1731: ST_TO_ADDR
// uc_nation := nation_arabian ;
1732: LD_ADDR_OWVAR 21
1736: PUSH
1737: LD_INT 2
1739: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1740: LD_INT 14
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: LD_INT 1
1748: PPUSH
1749: LD_INT 27
1751: PUSH
1752: LD_INT 25
1754: PUSH
1755: EMPTY
1756: LIST
1757: LIST
1758: PUSH
1759: LD_VAR 0 2
1763: PUSH
1764: LD_INT 2
1766: MOD
1767: PUSH
1768: LD_INT 1
1770: PLUS
1771: ARRAY
1772: PPUSH
1773: LD_INT 100
1775: PPUSH
1776: CALL 20740 0 5
// veh := CreateVehicle ;
1780: LD_ADDR_VAR 0 3
1784: PUSH
1785: CALL_OW 45
1789: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1790: LD_ADDR_EXP 10
1794: PUSH
1795: LD_EXP 10
1799: PPUSH
1800: LD_VAR 0 3
1804: PPUSH
1805: CALL 53920 0 2
1809: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1810: LD_VAR 0 3
1814: PPUSH
1815: LD_INT 2
1817: PPUSH
1818: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_VAR 0 5
1829: PPUSH
1830: CALL_OW 383
// un := CreateHuman ;
1834: LD_ADDR_VAR 0 4
1838: PUSH
1839: CALL_OW 44
1843: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1844: LD_INT 35
1846: PPUSH
1847: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1851: LD_VAR 0 3
1855: PPUSH
1856: LD_INT 23
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
1866: IFFALSE 1844
// PlaceHumanInUnit ( un , veh ) ;
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_VAR 0 3
1877: PPUSH
1878: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1882: LD_VAR 0 3
1886: PPUSH
1887: LD_INT 104
1889: PPUSH
1890: LD_INT 18
1892: PPUSH
1893: CALL_OW 111
// end ;
1897: GO 1719
1899: POP
1900: POP
// blockThread := false ;
1901: LD_ADDR_EXP 6
1905: PUSH
1906: LD_INT 0
1908: ST_TO_ADDR
// end ;
1909: LD_VAR 0 1
1913: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1914: LD_INT 0
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
1921: PPUSH
// blockThread := true ;
1922: LD_ADDR_EXP 6
1926: PUSH
1927: LD_INT 1
1929: ST_TO_ADDR
// v := convoyWave div 12 ;
1930: LD_ADDR_VAR 0 6
1934: PUSH
1935: LD_EXP 41
1939: PUSH
1940: LD_INT 12
1942: DIV
1943: ST_TO_ADDR
// if v > 8 then
1944: LD_VAR 0 6
1948: PUSH
1949: LD_INT 8
1951: GREATER
1952: IFFALSE 1962
// v := 8 ;
1954: LD_ADDR_VAR 0 6
1958: PUSH
1959: LD_INT 8
1961: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1962: LD_ADDR_VAR 0 5
1966: PUSH
1967: LD_INT 4
1969: PUSH
1970: LD_INT 5
1972: PUSH
1973: LD_INT 6
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: PUSH
1981: LD_OWVAR 67
1985: ARRAY
1986: PUSH
1987: LD_VAR 0 6
1991: PLUS
1992: ST_TO_ADDR
// if skill > 10 then
1993: LD_VAR 0 5
1997: PUSH
1998: LD_INT 10
2000: GREATER
2001: IFFALSE 2011
// skill := 10 ;
2003: LD_ADDR_VAR 0 5
2007: PUSH
2008: LD_INT 10
2010: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: DOUBLE
2017: LD_INT 1
2019: DEC
2020: ST_TO_ADDR
2021: LD_INT 3
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: LD_INT 5
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: PUSH
2035: LD_OWVAR 67
2039: ARRAY
2040: PUSH
2041: LD_VAR 0 6
2045: PLUS
2046: PUSH
2047: FOR_TO
2048: IFFALSE 2231
// begin uc_side := enemySide ;
2050: LD_ADDR_OWVAR 20
2054: PUSH
2055: LD_EXP 12
2059: ST_TO_ADDR
// uc_nation := nation_arabian ;
2060: LD_ADDR_OWVAR 21
2064: PUSH
2065: LD_INT 2
2067: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2068: LD_INT 14
2070: PPUSH
2071: LD_INT 1
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 27
2079: PUSH
2080: LD_INT 25
2082: PUSH
2083: LD_INT 26
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: LIST
2090: PUSH
2091: LD_VAR 0 2
2095: PUSH
2096: LD_INT 3
2098: MOD
2099: PUSH
2100: LD_INT 1
2102: PLUS
2103: ARRAY
2104: PPUSH
2105: LD_INT 100
2107: PPUSH
2108: CALL 20740 0 5
// veh := CreateVehicle ;
2112: LD_ADDR_VAR 0 3
2116: PUSH
2117: CALL_OW 45
2121: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2122: LD_ADDR_EXP 10
2126: PUSH
2127: LD_EXP 10
2131: PPUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL 53920 0 2
2141: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2142: LD_VAR 0 3
2146: PPUSH
2147: LD_INT 4
2149: PPUSH
2150: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2154: LD_INT 0
2156: PPUSH
2157: LD_VAR 0 5
2161: PPUSH
2162: CALL_OW 383
// un := CreateHuman ;
2166: LD_ADDR_VAR 0 4
2170: PUSH
2171: CALL_OW 44
2175: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2176: LD_INT 35
2178: PPUSH
2179: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2183: LD_VAR 0 3
2187: PPUSH
2188: LD_INT 14
2190: PPUSH
2191: LD_INT 0
2193: PPUSH
2194: CALL_OW 49
2198: IFFALSE 2176
// PlaceHumanInUnit ( un , veh ) ;
2200: LD_VAR 0 4
2204: PPUSH
2205: LD_VAR 0 3
2209: PPUSH
2210: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2214: LD_VAR 0 3
2218: PPUSH
2219: LD_INT 151
2221: PPUSH
2222: LD_INT 28
2224: PPUSH
2225: CALL_OW 111
// end ;
2229: GO 2047
2231: POP
2232: POP
// blockThread := false ;
2233: LD_ADDR_EXP 6
2237: PUSH
2238: LD_INT 0
2240: ST_TO_ADDR
// end ;
2241: LD_VAR 0 1
2245: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2246: LD_INT 0
2248: PPUSH
2249: PPUSH
2250: PPUSH
2251: PPUSH
2252: PPUSH
2253: PPUSH
// blockThread := true ;
2254: LD_ADDR_EXP 6
2258: PUSH
2259: LD_INT 1
2261: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2262: LD_ADDR_VAR 0 6
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: LD_INT 5
2272: PUSH
2273: LD_INT 7
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: LIST
2280: PUSH
2281: LD_OWVAR 67
2285: ARRAY
2286: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2287: LD_ADDR_VAR 0 5
2291: PUSH
2292: LD_INT 15
2294: PPUSH
2295: LD_INT 0
2297: PPUSH
2298: CALL_OW 517
2302: ST_TO_ADDR
// uc_side := enemySide ;
2303: LD_ADDR_OWVAR 20
2307: PUSH
2308: LD_EXP 12
2312: ST_TO_ADDR
// uc_nation := nation_arabian ;
2313: LD_ADDR_OWVAR 21
2317: PUSH
2318: LD_INT 2
2320: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2321: LD_INT 0
2323: PPUSH
2324: LD_VAR 0 6
2328: PPUSH
2329: CALL_OW 383
// un := CreateHuman ;
2333: LD_ADDR_VAR 0 3
2337: PUSH
2338: CALL_OW 44
2342: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2343: LD_INT 14
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: LD_INT 1
2351: PPUSH
2352: LD_INT 26
2354: PPUSH
2355: LD_INT 100
2357: PPUSH
2358: CALL 20740 0 5
// veh := CreateVehicle ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: CALL_OW 45
2371: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2372: LD_VAR 0 4
2376: PPUSH
2377: LD_INT 4
2379: PPUSH
2380: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2384: LD_INT 35
2386: PPUSH
2387: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2391: LD_VAR 0 4
2395: PPUSH
2396: LD_INT 14
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 49
2406: IFFALSE 2384
// PlaceHumanInUnit ( un , veh ) ;
2408: LD_VAR 0 3
2412: PPUSH
2413: LD_VAR 0 4
2417: PPUSH
2418: CALL_OW 52
// blockThread := false ;
2422: LD_ADDR_EXP 6
2426: PUSH
2427: LD_INT 0
2429: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: DOUBLE
2436: LD_INT 1
2438: DEC
2439: ST_TO_ADDR
2440: LD_VAR 0 5
2444: PUSH
2445: LD_INT 1
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2496
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2452: LD_VAR 0 4
2456: PPUSH
2457: LD_VAR 0 5
2461: PUSH
2462: LD_INT 1
2464: ARRAY
2465: PUSH
2466: LD_VAR 0 2
2470: ARRAY
2471: PPUSH
2472: LD_VAR 0 5
2476: PUSH
2477: LD_INT 2
2479: ARRAY
2480: PUSH
2481: LD_VAR 0 2
2485: ARRAY
2486: PPUSH
2487: LD_INT 7
2489: PPUSH
2490: CALL 60962 0 4
2494: GO 2449
2496: POP
2497: POP
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// if IsDead ( veh ) then
2505: LD_VAR 0 4
2509: PPUSH
2510: CALL_OW 301
2514: IFFALSE 2518
// exit ;
2516: GO 2595
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2518: LD_INT 16
2520: PPUSH
2521: LD_INT 22
2523: PUSH
2524: LD_EXP 12
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: PPUSH
2533: CALL_OW 70
2537: IFTRUE 2551
2539: PUSH
2540: LD_VAR 0 4
2544: PPUSH
2545: CALL_OW 314
2549: NOT
2550: OR
2551: IFTRUE 2565
2553: PUSH
2554: LD_VAR 0 3
2558: PPUSH
2559: CALL_OW 314
2563: NOT
2564: OR
2565: IFFALSE 2498
// forestIsCleared := true ;
2567: LD_ADDR_EXP 7
2571: PUSH
2572: LD_INT 1
2574: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2575: LD_ADDR_EXP 10
2579: PUSH
2580: LD_EXP 10
2584: PPUSH
2585: LD_VAR 0 4
2589: PPUSH
2590: CALL 53920 0 2
2594: ST_TO_ADDR
// end ;
2595: LD_VAR 0 1
2599: RET
// export function SendWestGroup ; var i , un , skill ; begin
2600: LD_INT 0
2602: PPUSH
2603: PPUSH
2604: PPUSH
2605: PPUSH
// blockThread := true ;
2606: LD_ADDR_EXP 6
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2614: LD_ADDR_VAR 0 4
2618: PUSH
2619: LD_INT 3
2621: PUSH
2622: LD_INT 5
2624: PUSH
2625: LD_INT 7
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_OWVAR 67
2637: ARRAY
2638: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2639: LD_ADDR_VAR 0 2
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 2
2651: PUSH
2652: LD_INT 3
2654: PUSH
2655: LD_INT 3
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: LIST
2662: PUSH
2663: LD_OWVAR 67
2667: ARRAY
2668: PUSH
2669: FOR_TO
2670: IFFALSE 2795
// begin uc_side := enemySide ;
2672: LD_ADDR_OWVAR 20
2676: PUSH
2677: LD_EXP 12
2681: ST_TO_ADDR
// uc_nation := nation_arabian ;
2682: LD_ADDR_OWVAR 21
2686: PUSH
2687: LD_INT 2
2689: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2690: LD_INT 0
2692: PPUSH
2693: LD_VAR 0 4
2697: PPUSH
2698: CALL_OW 381
// un := CreateHuman ;
2702: LD_ADDR_VAR 0 3
2706: PUSH
2707: CALL_OW 44
2711: ST_TO_ADDR
// if i mod 3 = 0 then
2712: LD_VAR 0 2
2716: PUSH
2717: LD_INT 3
2719: MOD
2720: PUSH
2721: LD_INT 0
2723: EQUAL
2724: IFFALSE 2738
// SetClass ( un , class_mortar ) ;
2726: LD_VAR 0 3
2730: PPUSH
2731: LD_INT 8
2733: PPUSH
2734: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2738: LD_ADDR_EXP 9
2742: PUSH
2743: LD_EXP 9
2747: PPUSH
2748: LD_VAR 0 3
2752: PPUSH
2753: CALL 53920 0 2
2757: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2758: LD_VAR 0 3
2762: PPUSH
2763: LD_INT 24
2765: PPUSH
2766: LD_INT 0
2768: PPUSH
2769: CALL_OW 49
// result := Join ( result , un ) ;
2773: LD_ADDR_VAR 0 1
2777: PUSH
2778: LD_VAR 0 1
2782: PPUSH
2783: LD_VAR 0 3
2787: PPUSH
2788: CALL 53920 0 2
2792: ST_TO_ADDR
// end ;
2793: GO 2669
2795: POP
2796: POP
// PrepareScientist ( false , skill ) ;
2797: LD_INT 0
2799: PPUSH
2800: LD_VAR 0 4
2804: PPUSH
2805: CALL_OW 384
// un := CreateHuman ;
2809: LD_ADDR_VAR 0 3
2813: PUSH
2814: CALL_OW 44
2818: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2819: LD_ADDR_EXP 9
2823: PUSH
2824: LD_EXP 9
2828: PPUSH
2829: LD_VAR 0 3
2833: PPUSH
2834: CALL 53920 0 2
2838: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2839: LD_VAR 0 3
2843: PPUSH
2844: LD_INT 24
2846: PPUSH
2847: LD_INT 0
2849: PPUSH
2850: CALL_OW 49
// result := Join ( result , un ) ;
2854: LD_ADDR_VAR 0 1
2858: PUSH
2859: LD_VAR 0 1
2863: PPUSH
2864: LD_VAR 0 3
2868: PPUSH
2869: CALL 53920 0 2
2873: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2874: LD_VAR 0 1
2878: PPUSH
2879: LD_INT 24
2881: PPUSH
2882: LD_INT 37
2884: PPUSH
2885: CALL_OW 114
// blockThread := false ;
2889: LD_ADDR_EXP 6
2893: PUSH
2894: LD_INT 0
2896: ST_TO_ADDR
// end ;
2897: LD_VAR 0 1
2901: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2902: LD_INT 0
2904: PPUSH
2905: PPUSH
2906: PPUSH
2907: PPUSH
2908: PPUSH
2909: PPUSH
// blockThread := true ;
2910: LD_ADDR_EXP 6
2914: PUSH
2915: LD_INT 1
2917: ST_TO_ADDR
// v := convoyWave div 12 ;
2918: LD_ADDR_VAR 0 6
2922: PUSH
2923: LD_EXP 41
2927: PUSH
2928: LD_INT 12
2930: DIV
2931: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2932: LD_ADDR_VAR 0 5
2936: PUSH
2937: LD_INT 4
2939: PUSH
2940: LD_INT 5
2942: PUSH
2943: LD_INT 6
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: LIST
2950: PUSH
2951: LD_OWVAR 67
2955: ARRAY
2956: PUSH
2957: LD_VAR 0 6
2961: PLUS
2962: ST_TO_ADDR
// if skill > 10 then
2963: LD_VAR 0 5
2967: PUSH
2968: LD_INT 10
2970: GREATER
2971: IFFALSE 2981
// skill := 10 ;
2973: LD_ADDR_VAR 0 5
2977: PUSH
2978: LD_INT 10
2980: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2981: LD_ADDR_VAR 0 2
2985: PUSH
2986: DOUBLE
2987: LD_INT 1
2989: DEC
2990: ST_TO_ADDR
2991: LD_INT 2
2993: PUSH
2994: LD_INT 3
2996: PUSH
2997: LD_INT 3
2999: PUSH
3000: EMPTY
3001: LIST
3002: LIST
3003: LIST
3004: PUSH
3005: LD_OWVAR 67
3009: ARRAY
3010: PUSH
3011: FOR_TO
3012: IFFALSE 3219
// begin uc_side := enemySide ;
3014: LD_ADDR_OWVAR 20
3018: PUSH
3019: LD_EXP 12
3023: ST_TO_ADDR
// uc_nation := nation_arabian ;
3024: LD_ADDR_OWVAR 21
3028: PUSH
3029: LD_INT 2
3031: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun , ar_double_machine_gun ] [ i mod 4 + 1 ] , 100 ) ;
3032: LD_INT 14
3034: PPUSH
3035: LD_INT 1
3037: PPUSH
3038: LD_INT 1
3040: PPUSH
3041: LD_INT 27
3043: PUSH
3044: LD_INT 30
3046: PUSH
3047: LD_INT 23
3049: PUSH
3050: LD_INT 24
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: LIST
3057: LIST
3058: PUSH
3059: LD_VAR 0 2
3063: PUSH
3064: LD_INT 4
3066: MOD
3067: PUSH
3068: LD_INT 1
3070: PLUS
3071: ARRAY
3072: PPUSH
3073: LD_INT 100
3075: PPUSH
3076: CALL 20740 0 5
// veh := CreateVehicle ;
3080: LD_ADDR_VAR 0 3
3084: PUSH
3085: CALL_OW 45
3089: ST_TO_ADDR
// result := Join ( result , veh ) ;
3090: LD_ADDR_VAR 0 1
3094: PUSH
3095: LD_VAR 0 1
3099: PPUSH
3100: LD_VAR 0 3
3104: PPUSH
3105: CALL 53920 0 2
3109: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3110: LD_VAR 0 3
3114: PPUSH
3115: LD_INT 4
3117: PPUSH
3118: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
3122: LD_INT 0
3124: PPUSH
3125: LD_VAR 0 5
3129: PPUSH
3130: CALL_OW 383
// un := CreateHuman ;
3134: LD_ADDR_VAR 0 4
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// result := Join ( result , un ) ;
3144: LD_ADDR_VAR 0 1
3148: PUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: LD_VAR 0 4
3158: PPUSH
3159: CALL 53920 0 2
3163: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3164: LD_INT 35
3166: PPUSH
3167: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3171: LD_VAR 0 3
3175: PPUSH
3176: LD_INT 14
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: IFFALSE 3164
// PlaceHumanInUnit ( un , veh ) ;
3188: LD_VAR 0 4
3192: PPUSH
3193: LD_VAR 0 3
3197: PPUSH
3198: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 159
3209: PPUSH
3210: LD_INT 53
3212: PPUSH
3213: CALL_OW 111
// end ;
3217: GO 3011
3219: POP
3220: POP
// blockThread := false ;
3221: LD_ADDR_EXP 6
3225: PUSH
3226: LD_INT 0
3228: ST_TO_ADDR
// end ;
3229: LD_VAR 0 1
3233: RET
// export function SendEastGroup ; var i , un , skill ; begin
3234: LD_INT 0
3236: PPUSH
3237: PPUSH
3238: PPUSH
3239: PPUSH
// blockThread := true ;
3240: LD_ADDR_EXP 6
3244: PUSH
3245: LD_INT 1
3247: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3248: LD_ADDR_VAR 0 4
3252: PUSH
3253: LD_INT 3
3255: PUSH
3256: LD_INT 5
3258: PUSH
3259: LD_INT 7
3261: PUSH
3262: EMPTY
3263: LIST
3264: LIST
3265: LIST
3266: PUSH
3267: LD_OWVAR 67
3271: ARRAY
3272: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3273: LD_ADDR_VAR 0 2
3277: PUSH
3278: DOUBLE
3279: LD_INT 1
3281: DEC
3282: ST_TO_ADDR
3283: LD_INT 4
3285: PUSH
3286: LD_INT 5
3288: PUSH
3289: LD_INT 6
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: LIST
3296: PUSH
3297: LD_OWVAR 67
3301: ARRAY
3302: PUSH
3303: FOR_TO
3304: IFFALSE 3409
// begin uc_side := enemySide ;
3306: LD_ADDR_OWVAR 20
3310: PUSH
3311: LD_EXP 12
3315: ST_TO_ADDR
// uc_nation := nation_arabian ;
3316: LD_ADDR_OWVAR 21
3320: PUSH
3321: LD_INT 2
3323: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3324: LD_INT 0
3326: PPUSH
3327: LD_VAR 0 4
3331: PPUSH
3332: CALL_OW 381
// un := CreateHuman ;
3336: LD_ADDR_VAR 0 3
3340: PUSH
3341: CALL_OW 44
3345: ST_TO_ADDR
// if i mod 3 = 0 then
3346: LD_VAR 0 2
3350: PUSH
3351: LD_INT 3
3353: MOD
3354: PUSH
3355: LD_INT 0
3357: EQUAL
3358: IFFALSE 3372
// SetClass ( un , class_mortar ) ;
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 8
3367: PPUSH
3368: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3372: LD_VAR 0 3
3376: PPUSH
3377: LD_INT 26
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
// result := Join ( result , un ) ;
3387: LD_ADDR_VAR 0 1
3391: PUSH
3392: LD_VAR 0 1
3396: PPUSH
3397: LD_VAR 0 3
3401: PPUSH
3402: CALL 53920 0 2
3406: ST_TO_ADDR
// end ;
3407: GO 3303
3409: POP
3410: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3411: LD_VAR 0 1
3415: PPUSH
3416: LD_INT 219
3418: PPUSH
3419: LD_INT 168
3421: PPUSH
3422: CALL_OW 114
// blockThread := false ;
3426: LD_ADDR_EXP 6
3430: PUSH
3431: LD_INT 0
3433: ST_TO_ADDR
// end ;
3434: LD_VAR 0 1
3438: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3439: LD_INT 0
3441: PPUSH
3442: PPUSH
3443: PPUSH
3444: PPUSH
3445: PPUSH
// blockThread := true ;
3446: LD_ADDR_EXP 6
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// v := convoyWave div 12 ;
3454: LD_ADDR_VAR 0 5
3458: PUSH
3459: LD_EXP 41
3463: PUSH
3464: LD_INT 12
3466: DIV
3467: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3468: LD_ADDR_VAR 0 4
3472: PUSH
3473: LD_INT 4
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: LD_INT 6
3481: PUSH
3482: EMPTY
3483: LIST
3484: LIST
3485: LIST
3486: PUSH
3487: LD_OWVAR 67
3491: ARRAY
3492: PUSH
3493: LD_VAR 0 5
3497: PLUS
3498: ST_TO_ADDR
// if skill > 10 then
3499: LD_VAR 0 4
3503: PUSH
3504: LD_INT 10
3506: GREATER
3507: IFFALSE 3517
// skill := 10 ;
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: LD_INT 10
3516: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3517: LD_ADDR_VAR 0 2
3521: PUSH
3522: DOUBLE
3523: LD_INT 1
3525: DEC
3526: ST_TO_ADDR
3527: LD_INT 3
3529: PUSH
3530: LD_INT 4
3532: PUSH
3533: LD_INT 5
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_OWVAR 67
3545: ARRAY
3546: PUSH
3547: FOR_TO
3548: IFFALSE 3653
// begin uc_side := enemySide ;
3550: LD_ADDR_OWVAR 20
3554: PUSH
3555: LD_EXP 12
3559: ST_TO_ADDR
// uc_nation := nation_arabian ;
3560: LD_ADDR_OWVAR 21
3564: PUSH
3565: LD_INT 2
3567: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3568: LD_INT 0
3570: PPUSH
3571: LD_VAR 0 4
3575: PPUSH
3576: CALL_OW 381
// un := CreateHuman ;
3580: LD_ADDR_VAR 0 3
3584: PUSH
3585: CALL_OW 44
3589: ST_TO_ADDR
// if i mod 3 = 0 then
3590: LD_VAR 0 2
3594: PUSH
3595: LD_INT 3
3597: MOD
3598: PUSH
3599: LD_INT 0
3601: EQUAL
3602: IFFALSE 3616
// SetClass ( un , class_mortar ) ;
3604: LD_VAR 0 3
3608: PPUSH
3609: LD_INT 8
3611: PPUSH
3612: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3616: LD_VAR 0 3
3620: PPUSH
3621: LD_INT 27
3623: PPUSH
3624: LD_INT 0
3626: PPUSH
3627: CALL_OW 49
// result := Join ( result , un ) ;
3631: LD_ADDR_VAR 0 1
3635: PUSH
3636: LD_VAR 0 1
3640: PPUSH
3641: LD_VAR 0 3
3645: PPUSH
3646: CALL 53920 0 2
3650: ST_TO_ADDR
// end ;
3651: GO 3547
3653: POP
3654: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3655: LD_VAR 0 1
3659: PPUSH
3660: LD_INT 77
3662: PPUSH
3663: LD_INT 23
3665: PPUSH
3666: CALL_OW 114
// blockThread := false ;
3670: LD_ADDR_EXP 6
3674: PUSH
3675: LD_INT 0
3677: ST_TO_ADDR
// end ;
3678: LD_VAR 0 1
3682: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3683: LD_INT 0
3685: PPUSH
3686: PPUSH
3687: PPUSH
3688: PPUSH
3689: PPUSH
// blockThread := true ;
3690: LD_ADDR_EXP 6
3694: PUSH
3695: LD_INT 1
3697: ST_TO_ADDR
// v := convoyWave div 12 ;
3698: LD_ADDR_VAR 0 5
3702: PUSH
3703: LD_EXP 41
3707: PUSH
3708: LD_INT 12
3710: DIV
3711: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 4
3719: PUSH
3720: LD_INT 5
3722: PUSH
3723: LD_INT 6
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: LIST
3730: PUSH
3731: LD_OWVAR 67
3735: ARRAY
3736: PUSH
3737: LD_VAR 0 5
3741: PLUS
3742: ST_TO_ADDR
// if skill > 10 then
3743: LD_VAR 0 4
3747: PUSH
3748: LD_INT 10
3750: GREATER
3751: IFFALSE 3761
// skill := 10 ;
3753: LD_ADDR_VAR 0 4
3757: PUSH
3758: LD_INT 10
3760: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 3
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: LD_INT 4
3779: PUSH
3780: EMPTY
3781: LIST
3782: LIST
3783: LIST
3784: PUSH
3785: LD_OWVAR 67
3789: ARRAY
3790: PUSH
3791: FOR_TO
3792: IFFALSE 3897
// begin uc_side := enemySide ;
3794: LD_ADDR_OWVAR 20
3798: PUSH
3799: LD_EXP 12
3803: ST_TO_ADDR
// uc_nation := nation_arabian ;
3804: LD_ADDR_OWVAR 21
3808: PUSH
3809: LD_INT 2
3811: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3812: LD_INT 0
3814: PPUSH
3815: LD_VAR 0 4
3819: PPUSH
3820: CALL_OW 381
// un := CreateHuman ;
3824: LD_ADDR_VAR 0 3
3828: PUSH
3829: CALL_OW 44
3833: ST_TO_ADDR
// if i mod 3 = 0 then
3834: LD_VAR 0 2
3838: PUSH
3839: LD_INT 3
3841: MOD
3842: PUSH
3843: LD_INT 0
3845: EQUAL
3846: IFFALSE 3860
// SetClass ( un , class_mortar ) ;
3848: LD_VAR 0 3
3852: PPUSH
3853: LD_INT 8
3855: PPUSH
3856: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3860: LD_VAR 0 3
3864: PPUSH
3865: LD_INT 28
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 49
// result := Join ( result , un ) ;
3875: LD_ADDR_VAR 0 1
3879: PUSH
3880: LD_VAR 0 1
3884: PPUSH
3885: LD_VAR 0 3
3889: PPUSH
3890: CALL 53920 0 2
3894: ST_TO_ADDR
// end ;
3895: GO 3791
3897: POP
3898: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3899: LD_VAR 0 1
3903: PPUSH
3904: LD_INT 147
3906: PPUSH
3907: LD_INT 100
3909: PPUSH
3910: CALL_OW 114
// blockThread := false ;
3914: LD_ADDR_EXP 6
3918: PUSH
3919: LD_INT 0
3921: ST_TO_ADDR
// end ; end_of_file
3922: LD_VAR 0 1
3926: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export mpGameType , mpSidePositions ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3927: LD_INT 0
3929: PPUSH
3930: PPUSH
3931: PPUSH
3932: PPUSH
3933: PPUSH
// mpGameType := GameTypeCoop ;
3934: LD_ADDR_EXP 36
3938: PUSH
3939: LD_INT 4
3941: ST_TO_ADDR
// multi_settings_counter := 5 ;
3942: LD_ADDR_EXP 26
3946: PUSH
3947: LD_INT 5
3949: ST_TO_ADDR
// multi_settings := [ ] ;
3950: LD_ADDR_EXP 25
3954: PUSH
3955: EMPTY
3956: ST_TO_ADDR
// if Multiplayer then
3957: LD_OWVAR 4
3961: IFFALSE 4141
// begin your_side := mp_player_side ;
3963: LD_ADDR_OWVAR 2
3967: PUSH
3968: LD_OWVAR 7
3972: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3973: LD_ADDR_EXP 14
3977: PUSH
3978: LD_OWVAR 6
3982: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3983: LD_ADDR_EXP 15
3987: PUSH
3988: LD_OWVAR 17
3992: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3993: LD_ADDR_EXP 16
3997: PUSH
3998: LD_OWVAR 15
4002: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
4003: LD_ADDR_EXP 17
4007: PUSH
4008: LD_OWVAR 16
4012: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
4013: LD_ADDR_EXP 18
4017: PUSH
4018: EMPTY
4019: PUSH
4020: EMPTY
4021: LIST
4022: ST_TO_ADDR
// for i in mp_teams do
4023: LD_ADDR_VAR 0 2
4027: PUSH
4028: LD_OWVAR 12
4032: PUSH
4033: FOR_IN
4034: IFFALSE 4077
// if i then
4036: LD_VAR 0 2
4040: IFFALSE 4075
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
4042: LD_ADDR_EXP 18
4046: PUSH
4047: LD_EXP 18
4051: PPUSH
4052: LD_INT 1
4054: PPUSH
4055: LD_EXP 18
4059: PUSH
4060: LD_INT 1
4062: ARRAY
4063: PUSH
4064: LD_VAR 0 2
4068: UNION
4069: PPUSH
4070: CALL_OW 1
4074: ST_TO_ADDR
4075: GO 4033
4077: POP
4078: POP
// for i := 1 to multi_settings_counter do
4079: LD_ADDR_VAR 0 2
4083: PUSH
4084: DOUBLE
4085: LD_INT 1
4087: DEC
4088: ST_TO_ADDR
4089: LD_EXP 26
4093: PUSH
4094: FOR_TO
4095: IFFALSE 4137
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
4097: LD_ADDR_EXP 25
4101: PUSH
4102: LD_EXP 25
4106: PPUSH
4107: LD_EXP 25
4111: PUSH
4112: LD_INT 1
4114: PLUS
4115: PPUSH
4116: LD_VAR 0 2
4120: PPUSH
4121: CALL_OW 426
4125: PUSH
4126: LD_INT 1
4128: PLUS
4129: PPUSH
4130: CALL_OW 1
4134: ST_TO_ADDR
4135: GO 4094
4137: POP
4138: POP
// end else
4139: GO 4323
// begin your_side := 3 ;
4141: LD_ADDR_OWVAR 2
4145: PUSH
4146: LD_INT 3
4148: ST_TO_ADDR
// multi_gametype := 1 ;
4149: LD_ADDR_EXP 14
4153: PUSH
4154: LD_INT 1
4156: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4157: LD_ADDR_EXP 15
4161: PUSH
4162: LD_INT 0
4164: PUSH
4165: LD_INT 0
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 0
4173: PUSH
4174: LD_INT 0
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 1
4182: PUSH
4183: LD_INT 0
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: LIST
4194: LIST
4195: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4196: LD_ADDR_EXP 16
4200: PUSH
4201: LD_INT 0
4203: PUSH
4204: LD_INT 0
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: LD_INT 0
4212: PUSH
4213: LD_INT 0
4215: PUSH
4216: LD_INT 0
4218: PUSH
4219: LD_INT 1
4221: PUSH
4222: LD_INT 0
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4235: LD_ADDR_EXP 17
4239: PUSH
4240: LD_INT 0
4242: PUSH
4243: LD_INT 0
4245: PUSH
4246: LD_INT 3
4248: PUSH
4249: LD_INT 0
4251: PUSH
4252: LD_INT 0
4254: PUSH
4255: LD_INT 0
4257: PUSH
4258: LD_INT 3
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: LIST
4273: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4274: LD_ADDR_EXP 18
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: LD_INT 7
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PUSH
4289: EMPTY
4290: LIST
4291: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4292: LD_ADDR_EXP 25
4296: PUSH
4297: LD_INT 2
4299: PUSH
4300: LD_INT 1
4302: PUSH
4303: LD_INT 4
4305: PUSH
4306: LD_INT 3
4308: PUSH
4309: LD_INT 2
4311: PUSH
4312: LD_INT 4
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: ST_TO_ADDR
// end ; mpSidePositions := multi_sides ;
4323: LD_ADDR_EXP 37
4327: PUSH
4328: LD_EXP 15
4332: ST_TO_ADDR
// multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4333: LD_ADDR_EXP 19
4337: PUSH
4338: LD_INT 0
4340: PUSH
4341: LD_INT 0
4343: PUSH
4344: LD_INT 0
4346: PUSH
4347: LD_INT 0
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: LD_INT 0
4355: PUSH
4356: LD_INT 0
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: EMPTY
4363: LIST
4364: LIST
4365: LIST
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_INT 0
4379: PUSH
4380: LD_INT 0
4382: PUSH
4383: LD_INT 0
4385: PUSH
4386: LD_INT 0
4388: PUSH
4389: LD_INT 0
4391: PUSH
4392: LD_INT 0
4394: PUSH
4395: LD_INT 0
4397: PUSH
4398: LD_INT 0
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: LIST
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4411: LD_ADDR_EXP 32
4415: PUSH
4416: LD_INT 0
4418: PUSH
4419: LD_INT 0
4421: PUSH
4422: LD_INT 0
4424: PUSH
4425: LD_INT 0
4427: PUSH
4428: LD_INT 0
4430: PUSH
4431: LD_INT 0
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: LD_INT 0
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// multi_teamgame := true ;
4450: LD_ADDR_EXP 23
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4458: LD_ADDR_EXP 21
4462: PUSH
4463: LD_INT 3
4465: PUSH
4466: EMPTY
4467: LIST
4468: ST_TO_ADDR
// multi_custom_commanders := true ;
4469: LD_ADDR_EXP 24
4473: PUSH
4474: LD_INT 1
4476: ST_TO_ADDR
// multi_commanders := [ ] ;
4477: LD_ADDR_EXP 31
4481: PUSH
4482: EMPTY
4483: ST_TO_ADDR
// multi_players_amount := 0 ;
4484: LD_ADDR_EXP 33
4488: PUSH
4489: LD_INT 0
4491: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4492: LD_ADDR_EXP 20
4496: PUSH
4497: LD_INT 3
4499: PUSH
4500: LD_INT 3
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: PUSH
4507: LD_INT 4
4509: PUSH
4510: LD_INT 6
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_depot , [ 112 , 145 , 2 ] ] , [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 99 , 54 , 3 ] ] , [ b_breastwork , [ 122 , 70 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 121 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4521: LD_ADDR_EXP 35
4525: PUSH
4526: LD_INT 0
4528: PUSH
4529: LD_INT 108
4531: PUSH
4532: LD_INT 110
4534: PUSH
4535: LD_INT 2
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: LIST
4542: PUSH
4543: EMPTY
4544: LIST
4545: LIST
4546: PUSH
4547: LD_INT 32
4549: PUSH
4550: LD_INT 117
4552: PUSH
4553: LD_INT 101
4555: PUSH
4556: LD_INT 3
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 44
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: LIST
4571: PUSH
4572: LD_INT 32
4574: PUSH
4575: LD_INT 124
4577: PUSH
4578: LD_INT 107
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: LIST
4588: PUSH
4589: LD_INT 43
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 32
4599: PUSH
4600: LD_INT 94
4602: PUSH
4603: LD_INT 114
4605: PUSH
4606: LD_INT 1
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PUSH
4614: LD_INT 44
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: PUSH
4622: LD_INT 32
4624: PUSH
4625: LD_INT 110
4627: PUSH
4628: LD_INT 94
4630: PUSH
4631: LD_INT 4
4633: PUSH
4634: EMPTY
4635: LIST
4636: LIST
4637: LIST
4638: PUSH
4639: LD_INT 44
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: PUSH
4647: LD_INT 29
4649: PUSH
4650: LD_INT 126
4652: PUSH
4653: LD_INT 124
4655: PUSH
4656: LD_INT 5
4658: PUSH
4659: EMPTY
4660: LIST
4661: LIST
4662: LIST
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: PUSH
4668: LD_INT 26
4670: PUSH
4671: LD_INT 101
4673: PUSH
4674: LD_INT 115
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: LD_INT 26
4691: PUSH
4692: LD_INT 125
4694: PUSH
4695: LD_INT 121
4697: PUSH
4698: LD_INT 3
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: LIST
4705: PUSH
4706: EMPTY
4707: LIST
4708: LIST
4709: PUSH
4710: LD_INT 3
4712: PUSH
4713: LD_INT 109
4715: PUSH
4716: LD_INT 126
4718: PUSH
4719: LD_INT 0
4721: PUSH
4722: EMPTY
4723: LIST
4724: LIST
4725: LIST
4726: PUSH
4727: EMPTY
4728: LIST
4729: LIST
4730: PUSH
4731: LD_INT 17
4733: PUSH
4734: LD_INT 112
4736: PUSH
4737: LD_INT 129
4739: PUSH
4740: LD_INT 5
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: PUSH
4752: EMPTY
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: PUSH
4764: LD_INT 0
4766: PUSH
4767: LD_INT 112
4769: PUSH
4770: LD_INT 145
4772: PUSH
4773: LD_INT 2
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: LD_INT 31
4787: PUSH
4788: LD_INT 95
4790: PUSH
4791: LD_INT 36
4793: PUSH
4794: LD_INT 4
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 31
4808: PUSH
4809: LD_INT 116
4811: PUSH
4812: LD_INT 66
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 31
4829: PUSH
4830: LD_INT 99
4832: PUSH
4833: LD_INT 54
4835: PUSH
4836: LD_INT 3
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 31
4850: PUSH
4851: LD_INT 122
4853: PUSH
4854: LD_INT 70
4856: PUSH
4857: LD_INT 3
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: LIST
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 31
4871: PUSH
4872: LD_INT 157
4874: PUSH
4875: LD_INT 159
4877: PUSH
4878: LD_INT 4
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 31
4892: PUSH
4893: LD_INT 75
4895: PUSH
4896: LD_INT 88
4898: PUSH
4899: LD_INT 3
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: LIST
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 31
4913: PUSH
4914: LD_INT 63
4916: PUSH
4917: LD_INT 82
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 31
4934: PUSH
4935: LD_INT 121
4937: PUSH
4938: LD_INT 147
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PUSH
4953: LD_INT 2
4955: PUSH
4956: LD_INT 124
4958: PUSH
4959: LD_INT 164
4961: PUSH
4962: LD_INT 5
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 4
4976: PUSH
4977: LD_INT 129
4979: PUSH
4980: LD_INT 159
4982: PUSH
4983: LD_INT 4
4985: PUSH
4986: EMPTY
4987: LIST
4988: LIST
4989: LIST
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: PUSH
5010: EMPTY
5011: PUSH
5012: EMPTY
5013: PUSH
5014: EMPTY
5015: PUSH
5016: EMPTY
5017: PUSH
5018: EMPTY
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
5030: LD_ADDR_EXP 30
5034: PUSH
5035: EMPTY
5036: PUSH
5037: LD_INT 21
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: LD_INT 42
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: PUSH
5055: LD_INT 22
5057: PUSH
5058: LD_INT 1
5060: PUSH
5061: LD_INT 1
5063: PUSH
5064: LD_INT 51
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: PUSH
5073: LD_INT 22
5075: PUSH
5076: LD_INT 1
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: LD_INT 44
5084: PUSH
5085: LD_INT 43
5087: PUSH
5088: LD_INT 42
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_OWVAR 67
5100: ARRAY
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 22
5110: PUSH
5111: LD_INT 1
5113: PUSH
5114: LD_INT 1
5116: PUSH
5117: LD_INT 44
5119: PUSH
5120: LD_INT 43
5122: PUSH
5123: LD_INT 42
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: PUSH
5131: LD_OWVAR 67
5135: ARRAY
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 22
5145: PUSH
5146: LD_INT 1
5148: PUSH
5149: LD_INT 1
5151: PUSH
5152: LD_INT 44
5154: PUSH
5155: LD_INT 43
5157: PUSH
5158: LD_INT 42
5160: PUSH
5161: EMPTY
5162: LIST
5163: LIST
5164: LIST
5165: PUSH
5166: LD_OWVAR 67
5170: ARRAY
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PUSH
5185: EMPTY
5186: PUSH
5187: EMPTY
5188: PUSH
5189: EMPTY
5190: PUSH
5191: EMPTY
5192: PUSH
5193: EMPTY
5194: PUSH
5195: EMPTY
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: ST_TO_ADDR
// for i := 1 to 8 do
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: DOUBLE
5213: LD_INT 1
5215: DEC
5216: ST_TO_ADDR
5217: LD_INT 8
5219: PUSH
5220: FOR_TO
5221: IFFALSE 5556
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
5223: LD_VAR 0 2
5227: PPUSH
5228: CALL_OW 530
5232: IFFALSE 5390
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5234: LD_ADDR_EXP 19
5238: PUSH
5239: LD_EXP 19
5243: PPUSH
5244: LD_VAR 0 2
5248: PPUSH
5249: LD_INT 1
5251: PPUSH
5252: CALL_OW 1
5256: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5257: LD_ADDR_EXP 17
5261: PUSH
5262: LD_EXP 17
5266: PPUSH
5267: LD_VAR 0 2
5271: PPUSH
5272: LD_INT 0
5274: PPUSH
5275: CALL_OW 1
5279: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5280: LD_ADDR_EXP 15
5284: PUSH
5285: LD_EXP 15
5289: PPUSH
5290: LD_VAR 0 2
5294: PPUSH
5295: LD_INT 0
5297: PPUSH
5298: CALL_OW 1
5302: ST_TO_ADDR
// for j = 1 to multi_teams do
5303: LD_ADDR_VAR 0 3
5307: PUSH
5308: DOUBLE
5309: LD_INT 1
5311: DEC
5312: ST_TO_ADDR
5313: LD_EXP 18
5317: PUSH
5318: FOR_TO
5319: IFFALSE 5388
// begin if i in multi_teams [ j ] then
5321: LD_VAR 0 2
5325: PUSH
5326: LD_EXP 18
5330: PUSH
5331: LD_VAR 0 3
5335: ARRAY
5336: IN
5337: IFFALSE 5386
// begin tmp := multi_teams [ j ] diff i ;
5339: LD_ADDR_VAR 0 5
5343: PUSH
5344: LD_EXP 18
5348: PUSH
5349: LD_VAR 0 3
5353: ARRAY
5354: PUSH
5355: LD_VAR 0 2
5359: DIFF
5360: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5361: LD_ADDR_EXP 18
5365: PUSH
5366: LD_EXP 18
5370: PPUSH
5371: LD_VAR 0 3
5375: PPUSH
5376: LD_VAR 0 5
5380: PPUSH
5381: CALL_OW 1
5385: ST_TO_ADDR
// end ; end ;
5386: GO 5318
5388: POP
5389: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5390: LD_EXP 17
5394: PUSH
5395: LD_VAR 0 2
5399: ARRAY
5400: IFFALSE 5421
5402: PUSH
5403: LD_EXP 17
5407: PUSH
5408: LD_VAR 0 2
5412: ARRAY
5413: PUSH
5414: LD_EXP 21
5418: IN
5419: NOT
5420: AND
5421: IFFALSE 5462
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5423: LD_ADDR_EXP 17
5427: PUSH
5428: LD_EXP 17
5432: PPUSH
5433: LD_VAR 0 2
5437: PPUSH
5438: LD_EXP 21
5442: PUSH
5443: LD_INT 1
5445: PPUSH
5446: LD_EXP 21
5450: PPUSH
5451: CALL_OW 12
5455: ARRAY
5456: PPUSH
5457: CALL_OW 1
5461: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5462: LD_EXP 17
5466: PUSH
5467: LD_VAR 0 2
5471: ARRAY
5472: NOT
5473: IFFALSE 5488
5475: PUSH
5476: LD_EXP 15
5480: PUSH
5481: LD_VAR 0 2
5485: ARRAY
5486: NOT
5487: AND
5488: IFFALSE 5503
5490: PUSH
5491: LD_EXP 19
5495: PUSH
5496: LD_VAR 0 2
5500: ARRAY
5501: NOT
5502: AND
5503: IFFALSE 5528
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5505: LD_ADDR_EXP 22
5509: PUSH
5510: LD_EXP 22
5514: PPUSH
5515: LD_VAR 0 2
5519: PPUSH
5520: LD_INT 1
5522: PPUSH
5523: CALL_OW 1
5527: ST_TO_ADDR
// if multi_sides [ i ] then
5528: LD_EXP 15
5532: PUSH
5533: LD_VAR 0 2
5537: ARRAY
5538: IFFALSE 5554
// multi_players_amount := multi_players_amount + 1 ;
5540: LD_ADDR_EXP 33
5544: PUSH
5545: LD_EXP 33
5549: PUSH
5550: LD_INT 1
5552: PLUS
5553: ST_TO_ADDR
// end ;
5554: GO 5220
5556: POP
5557: POP
// for i in multi_teams do
5558: LD_ADDR_VAR 0 2
5562: PUSH
5563: LD_EXP 18
5567: PUSH
5568: FOR_IN
5569: IFFALSE 5677
// begin for j = 2 to i do
5571: LD_ADDR_VAR 0 3
5575: PUSH
5576: DOUBLE
5577: LD_INT 2
5579: DEC
5580: ST_TO_ADDR
5581: LD_VAR 0 2
5585: PUSH
5586: FOR_TO
5587: IFFALSE 5673
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5589: LD_VAR 0 2
5593: PUSH
5594: LD_VAR 0 3
5598: ARRAY
5599: PPUSH
5600: LD_VAR 0 2
5604: PUSH
5605: LD_INT 1
5607: ARRAY
5608: PPUSH
5609: CALL_OW 343
// for x = 1 to j - 1 do
5613: LD_ADDR_VAR 0 4
5617: PUSH
5618: DOUBLE
5619: LD_INT 1
5621: DEC
5622: ST_TO_ADDR
5623: LD_VAR 0 3
5627: PUSH
5628: LD_INT 1
5630: MINUS
5631: PUSH
5632: FOR_TO
5633: IFFALSE 5669
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5635: LD_VAR 0 2
5639: PUSH
5640: LD_VAR 0 3
5644: ARRAY
5645: PPUSH
5646: LD_VAR 0 2
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PPUSH
5657: LD_INT 1
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 80
5667: GO 5632
5669: POP
5670: POP
// end ;
5671: GO 5586
5673: POP
5674: POP
// end ;
5675: GO 5568
5677: POP
5678: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5679: LD_ADDR_OWVAR 67
5683: PUSH
5684: LD_INT 1
5686: PUSH
5687: LD_INT 2
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: LD_EXP 25
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: ARRAY
5707: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5708: LD_ADDR_EXP 27
5712: PUSH
5713: LD_INT 9
5715: PUSH
5716: LD_INT 12
5718: PUSH
5719: LD_INT 15
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: LIST
5726: PUSH
5727: LD_EXP 25
5731: PUSH
5732: LD_INT 2
5734: ARRAY
5735: ARRAY
5736: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5737: LD_ADDR_EXP 28
5741: PUSH
5742: LD_INT 1
5744: PUSH
5745: LD_INT 3
5747: PUSH
5748: LD_INT 4
5750: PUSH
5751: LD_INT 6
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: PUSH
5760: LD_EXP 25
5764: PUSH
5765: LD_INT 3
5767: ARRAY
5768: ARRAY
5769: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5770: LD_ADDR_EXP 34
5774: PUSH
5775: LD_INT 3500
5777: PUSH
5778: LD_INT 5000
5780: PUSH
5781: LD_INT 7500
5783: PUSH
5784: LD_INT 10000
5786: PUSH
5787: LD_INT 15000
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: PUSH
5797: LD_EXP 25
5801: PUSH
5802: LD_INT 4
5804: ARRAY
5805: ARRAY
5806: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5807: LD_ADDR_EXP 29
5811: PUSH
5812: LD_INT 1000
5814: PUSH
5815: LD_INT 1260
5817: PUSH
5818: EMPTY
5819: LIST
5820: LIST
5821: PUSH
5822: LD_INT 2000
5824: PUSH
5825: LD_INT 1050
5827: PUSH
5828: EMPTY
5829: LIST
5830: LIST
5831: PUSH
5832: LD_INT 3000
5834: PUSH
5835: LD_INT 840
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 4000
5844: PUSH
5845: LD_INT 630
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: PUSH
5858: LD_EXP 25
5862: PUSH
5863: LD_INT 5
5865: ARRAY
5866: ARRAY
5867: ST_TO_ADDR
// end ;
5868: LD_VAR 0 1
5872: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5873: LD_INT 0
5875: PPUSH
5876: PPUSH
// if not multi_sides [ preferSide ] then
5877: LD_EXP 15
5881: PUSH
5882: LD_VAR 0 1
5886: ARRAY
5887: NOT
5888: IFFALSE 5902
// begin result := preferSide ;
5890: LD_ADDR_VAR 0 2
5894: PUSH
5895: LD_VAR 0 1
5899: ST_TO_ADDR
// exit ;
5900: GO 5949
// end ; for i := 1 to 8 do
5902: LD_ADDR_VAR 0 3
5906: PUSH
5907: DOUBLE
5908: LD_INT 1
5910: DEC
5911: ST_TO_ADDR
5912: LD_INT 8
5914: PUSH
5915: FOR_TO
5916: IFFALSE 5947
// if not multi_sides [ i ] then
5918: LD_EXP 15
5922: PUSH
5923: LD_VAR 0 3
5927: ARRAY
5928: NOT
5929: IFFALSE 5945
// begin result := i ;
5931: LD_ADDR_VAR 0 2
5935: PUSH
5936: LD_VAR 0 3
5940: ST_TO_ADDR
// exit ;
5941: POP
5942: POP
5943: GO 5949
// end ;
5945: GO 5915
5947: POP
5948: POP
// end ;
5949: LD_VAR 0 2
5953: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5954: LD_INT 0
5956: PPUSH
// uc_side := side ;
5957: LD_ADDR_OWVAR 20
5961: PUSH
5962: LD_VAR 0 1
5966: ST_TO_ADDR
// uc_nation := nation_russian ;
5967: LD_ADDR_OWVAR 21
5971: PUSH
5972: LD_INT 3
5974: ST_TO_ADDR
// hc_importance := 100 ;
5975: LD_ADDR_OWVAR 32
5979: PUSH
5980: LD_INT 100
5982: ST_TO_ADDR
// if num = 1 then
5983: LD_VAR 0 2
5987: PUSH
5988: LD_INT 1
5990: EQUAL
5991: IFFALSE 6058
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5993: LD_INT 1
5995: PPUSH
5996: LD_EXP 28
6000: PUSH
6001: LD_INT 1
6003: PLUS
6004: PPUSH
6005: CALL_OW 381
// hc_gallery := ru ;
6009: LD_ADDR_OWVAR 33
6013: PUSH
6014: LD_STRING ru
6016: ST_TO_ADDR
// hc_face_number := 13 ;
6017: LD_ADDR_OWVAR 34
6021: PUSH
6022: LD_INT 13
6024: ST_TO_ADDR
// hc_name := Kuzmov ;
6025: LD_ADDR_OWVAR 26
6029: PUSH
6030: LD_STRING Kuzmov
6032: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
6033: LD_ADDR_OWVAR 29
6037: PUSH
6038: LD_INT 11
6040: PUSH
6041: LD_INT 11
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: ST_TO_ADDR
// result := CreateHuman ;
6048: LD_ADDR_VAR 0 3
6052: PUSH
6053: CALL_OW 44
6057: ST_TO_ADDR
// end ; if num = 2 then
6058: LD_VAR 0 2
6062: PUSH
6063: LD_INT 2
6065: EQUAL
6066: IFFALSE 6133
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
6068: LD_INT 1
6070: PPUSH
6071: LD_EXP 28
6075: PUSH
6076: LD_INT 2
6078: PLUS
6079: PPUSH
6080: CALL_OW 383
// hc_gallery := ru ;
6084: LD_ADDR_OWVAR 33
6088: PUSH
6089: LD_STRING ru
6091: ST_TO_ADDR
// hc_face_number := 1 ;
6092: LD_ADDR_OWVAR 34
6096: PUSH
6097: LD_INT 1
6099: ST_TO_ADDR
// hc_name := Burlak ;
6100: LD_ADDR_OWVAR 26
6104: PUSH
6105: LD_STRING Burlak
6107: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
6108: LD_ADDR_OWVAR 29
6112: PUSH
6113: LD_INT 10
6115: PUSH
6116: LD_INT 11
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: ST_TO_ADDR
// result := CreateHuman ;
6123: LD_ADDR_VAR 0 3
6127: PUSH
6128: CALL_OW 44
6132: ST_TO_ADDR
// end ; end ;
6133: LD_VAR 0 3
6137: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
6138: LD_INT 0
6140: PPUSH
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
6146: PPUSH
6147: PPUSH
6148: PPUSH
6149: PPUSH
// for i := 1 to 8 do
6150: LD_ADDR_VAR 0 2
6154: PUSH
6155: DOUBLE
6156: LD_INT 1
6158: DEC
6159: ST_TO_ADDR
6160: LD_INT 8
6162: PUSH
6163: FOR_TO
6164: IFFALSE 7596
// begin if not multi_sides [ i ] then
6166: LD_EXP 15
6170: PUSH
6171: LD_VAR 0 2
6175: ARRAY
6176: NOT
6177: IFFALSE 6181
// continue ;
6179: GO 6163
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
6181: LD_ADDR_VAR 0 8
6185: PUSH
6186: LD_EXP 30
6190: PUSH
6191: LD_EXP 15
6195: PUSH
6196: LD_VAR 0 2
6200: ARRAY
6201: ARRAY
6202: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
6203: LD_EXP 35
6207: PUSH
6208: LD_EXP 15
6212: PUSH
6213: LD_VAR 0 2
6217: ARRAY
6218: ARRAY
6219: IFFALSE 6516
// begin uc_side := i ;
6221: LD_ADDR_OWVAR 20
6225: PUSH
6226: LD_VAR 0 2
6230: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6231: LD_ADDR_OWVAR 21
6235: PUSH
6236: LD_EXP 17
6240: PUSH
6241: LD_VAR 0 2
6245: ARRAY
6246: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6247: LD_ADDR_VAR 0 3
6251: PUSH
6252: LD_EXP 35
6256: PUSH
6257: LD_EXP 15
6261: PUSH
6262: LD_VAR 0 2
6266: ARRAY
6267: ARRAY
6268: PUSH
6269: FOR_IN
6270: IFFALSE 6514
// begin if j [ 1 ] = b_oil_mine then
6272: LD_VAR 0 3
6276: PUSH
6277: LD_INT 1
6279: ARRAY
6280: PUSH
6281: LD_INT 29
6283: EQUAL
6284: IFFALSE 6321
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6286: LD_VAR 0 3
6290: PUSH
6291: LD_INT 2
6293: ARRAY
6294: PUSH
6295: LD_INT 1
6297: ARRAY
6298: PPUSH
6299: LD_VAR 0 3
6303: PUSH
6304: LD_INT 2
6306: ARRAY
6307: PUSH
6308: LD_INT 2
6310: ARRAY
6311: PPUSH
6312: LD_VAR 0 2
6316: PPUSH
6317: CALL_OW 441
// bc_type := j [ 1 ] ;
6321: LD_ADDR_OWVAR 42
6325: PUSH
6326: LD_VAR 0 3
6330: PUSH
6331: LD_INT 1
6333: ARRAY
6334: ST_TO_ADDR
// bc_level := 3 ;
6335: LD_ADDR_OWVAR 43
6339: PUSH
6340: LD_INT 3
6342: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6343: LD_ADDR_VAR 0 4
6347: PUSH
6348: LD_VAR 0 3
6352: PUSH
6353: LD_INT 2
6355: ARRAY
6356: PUSH
6357: LD_INT 1
6359: ARRAY
6360: PPUSH
6361: LD_VAR 0 3
6365: PUSH
6366: LD_INT 2
6368: ARRAY
6369: PUSH
6370: LD_INT 2
6372: ARRAY
6373: PPUSH
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 2
6381: ARRAY
6382: PUSH
6383: LD_INT 3
6385: ARRAY
6386: PPUSH
6387: CALL_OW 47
6391: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6392: LD_VAR 0 3
6396: PUSH
6397: LD_INT 1
6399: ARRAY
6400: PUSH
6401: LD_INT 0
6403: EQUAL
6404: IFFALSE 6480
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6406: LD_VAR 0 4
6410: PPUSH
6411: CALL_OW 274
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: LD_INT 450
6421: PUSH
6422: LD_INT 350
6424: PUSH
6425: LD_INT 230
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: PUSH
6433: LD_OWVAR 67
6437: ARRAY
6438: PPUSH
6439: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 274
6452: PPUSH
6453: LD_INT 2
6455: PPUSH
6456: LD_INT 90
6458: PUSH
6459: LD_INT 60
6461: PUSH
6462: LD_INT 40
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: LIST
6469: PUSH
6470: LD_OWVAR 67
6474: ARRAY
6475: PPUSH
6476: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6480: LD_VAR 0 3
6484: PUSH
6485: LD_INT 1
6487: ARRAY
6488: PUSH
6489: LD_INT 32
6491: EQUAL
6492: IFFALSE 6512
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6494: LD_VAR 0 4
6498: PPUSH
6499: LD_VAR 0 3
6503: PUSH
6504: LD_INT 3
6506: ARRAY
6507: PPUSH
6508: CALL_OW 431
// end ;
6512: GO 6269
6514: POP
6515: POP
// end ; if multi_custom_commanders then
6516: LD_EXP 24
6520: IFFALSE 6737
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6522: LD_ADDR_VAR 0 6
6526: PUSH
6527: LD_VAR 0 2
6531: PPUSH
6532: LD_EXP 15
6536: PUSH
6537: LD_VAR 0 2
6541: ARRAY
6542: PPUSH
6543: CALL 5954 0 2
6547: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6548: LD_ADDR_EXP 31
6552: PUSH
6553: LD_EXP 31
6557: PPUSH
6558: LD_EXP 31
6562: PUSH
6563: LD_INT 1
6565: PLUS
6566: PPUSH
6567: LD_VAR 0 6
6571: PPUSH
6572: CALL_OW 2
6576: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6577: LD_VAR 0 6
6581: PPUSH
6582: CALL_OW 257
6586: PUSH
6587: LD_INT 3
6589: EQUAL
6590: IFFALSE 6702
// begin uc_nation := nation_russian ;
6592: LD_ADDR_OWVAR 21
6596: PUSH
6597: LD_INT 3
6599: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6600: LD_INT 23
6602: PPUSH
6603: LD_INT 1
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: LD_INT 44
6611: PPUSH
6612: LD_INT 80
6614: PPUSH
6615: CALL 20740 0 5
// veh := CreateVehicle ;
6619: LD_ADDR_VAR 0 7
6623: PUSH
6624: CALL_OW 45
6628: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6629: LD_VAR 0 7
6633: PPUSH
6634: LD_VAR 0 6
6638: PPUSH
6639: CALL_OW 255
6643: PUSH
6644: LD_INT 1
6646: NEG
6647: MUL
6648: PPUSH
6649: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6653: LD_VAR 0 7
6657: PPUSH
6658: LD_EXP 20
6662: PUSH
6663: LD_EXP 15
6667: PUSH
6668: LD_VAR 0 2
6672: ARRAY
6673: ARRAY
6674: PUSH
6675: LD_INT 2
6677: ARRAY
6678: PPUSH
6679: LD_INT 0
6681: PPUSH
6682: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6686: LD_VAR 0 6
6690: PPUSH
6691: LD_VAR 0 7
6695: PPUSH
6696: CALL_OW 52
// end else
6700: GO 6735
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6702: LD_VAR 0 6
6706: PPUSH
6707: LD_EXP 20
6711: PUSH
6712: LD_EXP 15
6716: PUSH
6717: LD_VAR 0 2
6721: ARRAY
6722: ARRAY
6723: PUSH
6724: LD_INT 1
6726: ARRAY
6727: PPUSH
6728: LD_INT 0
6730: PPUSH
6731: CALL_OW 49
// end else
6735: GO 6948
// begin uc_side := i ;
6737: LD_ADDR_OWVAR 20
6741: PUSH
6742: LD_VAR 0 2
6746: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6747: LD_ADDR_OWVAR 21
6751: PUSH
6752: LD_EXP 17
6756: PUSH
6757: LD_VAR 0 2
6761: ARRAY
6762: ST_TO_ADDR
// hc_importance := 100 ;
6763: LD_ADDR_OWVAR 32
6767: PUSH
6768: LD_INT 100
6770: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6771: LD_INT 0
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: LD_EXP 28
6781: PPUSH
6782: CALL_OW 380
// if multiplayer then
6786: LD_OWVAR 4
6790: IFFALSE 6848
// begin hc_name := mp_sides_players_names [ i ] ;
6792: LD_ADDR_OWVAR 26
6796: PUSH
6797: LD_OWVAR 19
6801: PUSH
6802: LD_VAR 0 2
6806: ARRAY
6807: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6808: LD_ADDR_OWVAR 33
6812: PUSH
6813: LD_STRING MULTIAVATARS
6815: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6816: LD_ADDR_OWVAR 34
6820: PUSH
6821: LD_VAR 0 2
6825: PPUSH
6826: CALL_OW 525
6830: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6831: LD_ADDR_OWVAR 27
6835: PUSH
6836: LD_VAR 0 2
6840: PPUSH
6841: CALL_OW 526
6845: ST_TO_ADDR
// end else
6846: GO 6880
// begin hc_gallery :=  ;
6848: LD_ADDR_OWVAR 33
6852: PUSH
6853: LD_STRING 
6855: ST_TO_ADDR
// hc_name :=  ;
6856: LD_ADDR_OWVAR 26
6860: PUSH
6861: LD_STRING 
6863: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6864: LD_ADDR_OWVAR 27
6868: PUSH
6869: LD_INT 1
6871: PPUSH
6872: LD_INT 2
6874: PPUSH
6875: CALL_OW 12
6879: ST_TO_ADDR
// end ; un := CreateHuman ;
6880: LD_ADDR_VAR 0 6
6884: PUSH
6885: CALL_OW 44
6889: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6890: LD_VAR 0 6
6894: PPUSH
6895: LD_EXP 20
6899: PUSH
6900: LD_EXP 15
6904: PUSH
6905: LD_VAR 0 2
6909: ARRAY
6910: ARRAY
6911: PUSH
6912: LD_INT 1
6914: ARRAY
6915: PPUSH
6916: LD_INT 0
6918: PPUSH
6919: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6923: LD_ADDR_EXP 31
6927: PUSH
6928: LD_EXP 31
6932: PPUSH
6933: LD_VAR 0 2
6937: PPUSH
6938: LD_VAR 0 6
6942: PPUSH
6943: CALL_OW 1
6947: ST_TO_ADDR
// end ; InitHc ;
6948: CALL_OW 19
// InitUc ;
6952: CALL_OW 18
// uc_side := i ;
6956: LD_ADDR_OWVAR 20
6960: PUSH
6961: LD_VAR 0 2
6965: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6966: LD_ADDR_OWVAR 21
6970: PUSH
6971: LD_EXP 17
6975: PUSH
6976: LD_VAR 0 2
6980: ARRAY
6981: ST_TO_ADDR
// hc_gallery :=  ;
6982: LD_ADDR_OWVAR 33
6986: PUSH
6987: LD_STRING 
6989: ST_TO_ADDR
// hc_name :=  ;
6990: LD_ADDR_OWVAR 26
6994: PUSH
6995: LD_STRING 
6997: ST_TO_ADDR
// hc_importance := 0 ;
6998: LD_ADDR_OWVAR 32
7002: PUSH
7003: LD_INT 0
7005: ST_TO_ADDR
// cl := 1 ;
7006: LD_ADDR_VAR 0 5
7010: PUSH
7011: LD_INT 1
7013: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
7014: LD_ADDR_VAR 0 3
7018: PUSH
7019: DOUBLE
7020: LD_INT 2
7022: DEC
7023: ST_TO_ADDR
7024: LD_EXP 27
7028: PUSH
7029: FOR_TO
7030: IFFALSE 7592
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
7032: LD_VAR 0 3
7036: PUSH
7037: LD_INT 1
7039: MINUS
7040: PUSH
7041: LD_EXP 27
7045: PUSH
7046: LD_INT 1
7048: MINUS
7049: PUSH
7050: LD_INT 4
7052: DIVREAL
7053: MOD
7054: PUSH
7055: LD_INT 0
7057: EQUAL
7058: IFFALSE 7074
// cl := cl + 1 ;
7060: LD_ADDR_VAR 0 5
7064: PUSH
7065: LD_VAR 0 5
7069: PUSH
7070: LD_INT 1
7072: PLUS
7073: ST_TO_ADDR
// if cl > 4 then
7074: LD_VAR 0 5
7078: PUSH
7079: LD_INT 4
7081: GREATER
7082: IFFALSE 7092
// cl := 1 ;
7084: LD_ADDR_VAR 0 5
7088: PUSH
7089: LD_INT 1
7091: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
7092: LD_EXP 15
7096: PUSH
7097: LD_VAR 0 2
7101: ARRAY
7102: PUSH
7103: LD_INT 2
7105: EQUAL
7106: IFFALSE 7168
7108: PUSH
7109: LD_VAR 0 5
7113: PUSH
7114: LD_INT 2
7116: EQUAL
7117: IFTRUE 7167
7119: PUSH
7120: LD_VAR 0 5
7124: PUSH
7125: LD_INT 4
7127: EQUAL
7128: IFFALSE 7166
7130: PUSH
7131: LD_INT 22
7133: PUSH
7134: LD_VAR 0 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 4
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 69
7161: PUSH
7162: LD_INT 1
7164: GREATER
7165: AND
7166: OR
7167: AND
7168: IFFALSE 7187
// PrepareHuman ( false , 1 , multi_skill_level ) else
7170: LD_INT 0
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: LD_EXP 28
7180: PPUSH
7181: CALL_OW 380
7185: GO 7204
// PrepareHuman ( false , cl , multi_skill_level ) ;
7187: LD_INT 0
7189: PPUSH
7190: LD_VAR 0 5
7194: PPUSH
7195: LD_EXP 28
7199: PPUSH
7200: CALL_OW 380
// un := CreateHuman ;
7204: LD_ADDR_VAR 0 6
7208: PUSH
7209: CALL_OW 44
7213: ST_TO_ADDR
// if multi_pos_area then
7214: LD_EXP 20
7218: IFFALSE 7590
// begin if GetClass ( un ) = 3 and vehicles then
7220: LD_VAR 0 6
7224: PPUSH
7225: CALL_OW 257
7229: PUSH
7230: LD_INT 3
7232: EQUAL
7233: IFFALSE 7241
7235: PUSH
7236: LD_VAR 0 8
7240: AND
7241: IFFALSE 7426
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
7243: LD_VAR 0 8
7247: PUSH
7248: LD_INT 1
7250: ARRAY
7251: PUSH
7252: LD_INT 1
7254: ARRAY
7255: PPUSH
7256: LD_VAR 0 8
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PUSH
7265: LD_INT 2
7267: ARRAY
7268: PPUSH
7269: LD_VAR 0 8
7273: PUSH
7274: LD_INT 1
7276: ARRAY
7277: PUSH
7278: LD_INT 3
7280: ARRAY
7281: PPUSH
7282: LD_VAR 0 8
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PUSH
7291: LD_INT 4
7293: ARRAY
7294: PPUSH
7295: LD_INT 80
7297: PUSH
7298: LD_INT 60
7300: PUSH
7301: LD_INT 40
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: PUSH
7309: LD_OWVAR 67
7313: ARRAY
7314: PPUSH
7315: CALL 20740 0 5
// veh := CreateVehicle ;
7319: LD_ADDR_VAR 0 7
7323: PUSH
7324: CALL_OW 45
7328: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7329: LD_VAR 0 7
7333: PPUSH
7334: LD_EXP 20
7338: PUSH
7339: LD_EXP 15
7343: PUSH
7344: LD_VAR 0 2
7348: ARRAY
7349: ARRAY
7350: PUSH
7351: LD_INT 2
7353: ARRAY
7354: PPUSH
7355: LD_INT 0
7357: PPUSH
7358: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7362: LD_VAR 0 6
7366: PPUSH
7367: LD_VAR 0 7
7371: PPUSH
7372: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7376: LD_VAR 0 7
7380: PPUSH
7381: CALL_OW 264
7385: PUSH
7386: LD_INT 51
7388: EQUAL
7389: IFFALSE 7406
// SetCargo ( veh , mat_oil , 60 ) ;
7391: LD_VAR 0 7
7395: PPUSH
7396: LD_INT 2
7398: PPUSH
7399: LD_INT 60
7401: PPUSH
7402: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7406: LD_ADDR_VAR 0 8
7410: PUSH
7411: LD_VAR 0 8
7415: PPUSH
7416: LD_INT 1
7418: PPUSH
7419: CALL_OW 3
7423: ST_TO_ADDR
// continue ;
7424: GO 7029
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7426: LD_ADDR_VAR 0 9
7430: PUSH
7431: LD_INT 22
7433: PUSH
7434: LD_VAR 0 2
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 30
7448: PUSH
7449: LD_INT 32
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 30
7458: PUSH
7459: LD_INT 31
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: LIST
7470: PUSH
7471: LD_INT 58
7473: PUSH
7474: EMPTY
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: LIST
7481: PPUSH
7482: CALL_OW 69
7486: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7487: LD_VAR 0 6
7491: PPUSH
7492: CALL_OW 257
7496: PUSH
7497: LD_INT 1
7499: EQUAL
7500: IFFALSE 7508
7502: PUSH
7503: LD_VAR 0 9
7507: AND
7508: IFFALSE 7557
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7510: LD_VAR 0 6
7514: PPUSH
7515: LD_VAR 0 9
7519: PUSH
7520: LD_INT 1
7522: ARRAY
7523: PPUSH
7524: CALL_OW 254
7528: PUSH
7529: LD_INT 3
7531: MINUS
7532: PPUSH
7533: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7537: LD_VAR 0 6
7541: PPUSH
7542: LD_VAR 0 9
7546: PUSH
7547: LD_INT 1
7549: ARRAY
7550: PPUSH
7551: CALL_OW 52
// continue ;
7555: GO 7029
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7557: LD_VAR 0 6
7561: PPUSH
7562: LD_EXP 20
7566: PUSH
7567: LD_EXP 15
7571: PUSH
7572: LD_VAR 0 2
7576: ARRAY
7577: ARRAY
7578: PUSH
7579: LD_INT 1
7581: ARRAY
7582: PPUSH
7583: LD_INT 0
7585: PPUSH
7586: CALL_OW 49
// end ; end ;
7590: GO 7029
7592: POP
7593: POP
// end ;
7594: GO 6163
7596: POP
7597: POP
// end ;
7598: LD_VAR 0 1
7602: RET
// export function Multiplayer_Start ( ) ; begin
7603: LD_INT 0
7605: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7606: CALL 6138 0 0
// Multiplayer_InitPointSystem ( ) ;
7610: CALL 8327 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7614: LD_INT 20
7616: PPUSH
7617: CALL 8511 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7621: LD_INT 150
7623: PPUSH
7624: CALL 8511 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7628: LD_INT 5
7630: PPUSH
7631: CALL 8511 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7635: LD_INT 60
7637: NEG
7638: PPUSH
7639: CALL 8511 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
7643: LD_INT 40
7645: NEG
7646: PPUSH
7647: CALL 8511 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7651: LD_INT 2
7653: PPUSH
7654: CALL 8511 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7658: LD_INT 110
7660: PPUSH
7661: CALL 8511 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7665: LD_INT 55
7667: PPUSH
7668: CALL 8511 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7672: LD_INT 1000
7674: NEG
7675: PPUSH
7676: CALL 8511 0 1
// if multi_sides [ your_side ] then
7680: LD_EXP 15
7684: PUSH
7685: LD_OWVAR 2
7689: ARRAY
7690: IFFALSE 7717
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7692: LD_INT 22
7694: PUSH
7695: LD_OWVAR 2
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: PUSH
7709: LD_INT 1
7711: ARRAY
7712: PPUSH
7713: CALL_OW 87
// end ;
7717: LD_VAR 0 1
7721: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7722: LD_INT 0
7724: PPUSH
7725: PPUSH
7726: PPUSH
7727: PPUSH
// repeat wait ( 0 0$1 ) ;
7728: LD_INT 35
7730: PPUSH
7731: CALL_OW 67
// points := 0 ;
7735: LD_ADDR_VAR 0 4
7739: PUSH
7740: LD_INT 0
7742: ST_TO_ADDR
// for i := 1 to 8 do
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: DOUBLE
7749: LD_INT 1
7751: DEC
7752: ST_TO_ADDR
7753: LD_INT 8
7755: PUSH
7756: FOR_TO
7757: IFFALSE 7783
// points := points + multi_points [ i ] ;
7759: LD_ADDR_VAR 0 4
7763: PUSH
7764: LD_VAR 0 4
7768: PUSH
7769: LD_EXP 38
7773: PUSH
7774: LD_VAR 0 2
7778: ARRAY
7779: PLUS
7780: ST_TO_ADDR
7781: GO 7756
7783: POP
7784: POP
// if not multi_custom_commanders then
7785: LD_EXP 24
7789: NOT
7790: IFFALSE 7905
// begin for i := 1 to 8 do
7792: LD_ADDR_VAR 0 2
7796: PUSH
7797: DOUBLE
7798: LD_INT 1
7800: DEC
7801: ST_TO_ADDR
7802: LD_INT 8
7804: PUSH
7805: FOR_TO
7806: IFFALSE 7879
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7808: LD_INT 22
7810: PUSH
7811: LD_VAR 0 2
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 69
7824: PUSH
7825: LD_INT 0
7827: EQUAL
7828: IFFALSE 7843
7830: PUSH
7831: LD_EXP 32
7835: PUSH
7836: LD_VAR 0 2
7840: ARRAY
7841: NOT
7842: AND
7843: IFFALSE 7877
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7845: LD_ADDR_EXP 32
7849: PUSH
7850: LD_EXP 32
7854: PPUSH
7855: LD_VAR 0 2
7859: PPUSH
7860: LD_INT 1
7862: PPUSH
7863: CALL_OW 1
7867: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7868: LD_VAR 0 2
7872: PPUSH
7873: CALL 8581 0 1
// end ; end ;
7877: GO 7805
7879: POP
7880: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7881: LD_EXP 32
7885: PPUSH
7886: CALL 17944 0 1
7890: PUSH
7891: LD_EXP 15
7895: PPUSH
7896: CALL 17944 0 1
7900: EQUAL
7901: IFFALSE 7905
// break ;
7903: GO 7950
// end ; if points >= multi_points_to_victory then
7905: LD_VAR 0 4
7909: PUSH
7910: LD_EXP 34
7914: GREATEREQUAL
7915: IFFALSE 7927
// begin winAllowed := true ;
7917: LD_ADDR_EXP 3
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// break ;
7925: GO 7950
// end ; until ( winAllowed and game ) or not multi_commanders ;
7927: LD_EXP 3
7931: IFFALSE 7939
7933: PUSH
7934: LD_EXP 2
7938: AND
7939: IFTRUE 7948
7941: PUSH
7942: LD_EXP 31
7946: NOT
7947: OR
7948: IFFALSE 7728
// game := false ;
7950: LD_ADDR_EXP 2
7954: PUSH
7955: LD_INT 0
7957: ST_TO_ADDR
// for i := 1 to 8 do
7958: LD_ADDR_VAR 0 2
7962: PUSH
7963: DOUBLE
7964: LD_INT 1
7966: DEC
7967: ST_TO_ADDR
7968: LD_INT 8
7970: PUSH
7971: FOR_TO
7972: IFFALSE 8008
// begin if multi_sides [ i ] then
7974: LD_EXP 15
7978: PUSH
7979: LD_VAR 0 2
7983: ARRAY
7984: IFFALSE 8006
// SetMultiScore ( i , multi_points [ i ] ) ;
7986: LD_VAR 0 2
7990: PPUSH
7991: LD_EXP 38
7995: PUSH
7996: LD_VAR 0 2
8000: ARRAY
8001: PPUSH
8002: CALL_OW 506
// end ;
8006: GO 7971
8008: POP
8009: POP
// if multi_loosers [ your_side ] then
8010: LD_EXP 32
8014: PUSH
8015: LD_OWVAR 2
8019: ARRAY
8020: IFFALSE 8043
// begin if Multiplayer then
8022: LD_OWVAR 4
8026: IFFALSE 8034
// YouLostInMultiplayer else
8028: CALL_OW 107
8032: GO 8041
// YouLost (  ) ;
8034: LD_STRING 
8036: PPUSH
8037: CALL_OW 104
// end else
8041: GO 8059
// begin if Multiplayer then
8043: LD_OWVAR 4
8047: IFFALSE 8055
// YouWinInMultiplayer else
8049: CALL_OW 106
8053: GO 8059
// YouWin ;
8055: CALL_OW 103
// end ; end ;
8059: LD_VAR 0 1
8063: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
8064: LD_INT 0
8066: PPUSH
8067: PPUSH
// result := false ;
8068: LD_ADDR_VAR 0 1
8072: PUSH
8073: LD_INT 0
8075: ST_TO_ADDR
// for side in botSides do
8076: LD_ADDR_VAR 0 2
8080: PUSH
8081: LD_EXP 4
8085: PUSH
8086: FOR_IN
8087: IFFALSE 8148
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_VAR 0 2
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PUSH
8106: LD_INT 21
8108: PUSH
8109: LD_INT 1
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: PUSH
8116: LD_INT 50
8118: PUSH
8119: EMPTY
8120: LIST
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 69
8131: PUSH
8132: LD_INT 0
8134: GREATER
8135: ST_TO_ADDR
// if result then
8136: LD_VAR 0 1
8140: IFFALSE 8146
// exit ;
8142: POP
8143: POP
8144: GO 8150
// end ;
8146: GO 8086
8148: POP
8149: POP
// end ;
8150: LD_VAR 0 1
8154: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
8155: LD_INT 0
8157: PPUSH
8158: PPUSH
8159: PPUSH
// result := [ ] ;
8160: LD_ADDR_VAR 0 1
8164: PUSH
8165: EMPTY
8166: ST_TO_ADDR
// points := 0 ;
8167: LD_ADDR_VAR 0 3
8171: PUSH
8172: LD_INT 0
8174: ST_TO_ADDR
// for i := 1 to 8 do
8175: LD_ADDR_VAR 0 2
8179: PUSH
8180: DOUBLE
8181: LD_INT 1
8183: DEC
8184: ST_TO_ADDR
8185: LD_INT 8
8187: PUSH
8188: FOR_TO
8189: IFFALSE 8268
// begin points := points + multi_points [ i ] ;
8191: LD_ADDR_VAR 0 3
8195: PUSH
8196: LD_VAR 0 3
8200: PUSH
8201: LD_EXP 38
8205: PUSH
8206: LD_VAR 0 2
8210: ARRAY
8211: PLUS
8212: ST_TO_ADDR
// if multi_sides [ i ] then
8213: LD_EXP 15
8217: PUSH
8218: LD_VAR 0 2
8222: ARRAY
8223: IFFALSE 8266
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
8225: LD_ADDR_VAR 0 1
8229: PUSH
8230: LD_VAR 0 1
8234: PUSH
8235: LD_STRING #coop-points
8237: PUSH
8238: LD_VAR 0 2
8242: PUSH
8243: LD_VAR 0 2
8247: PUSH
8248: LD_EXP 38
8252: PUSH
8253: LD_VAR 0 2
8257: ARRAY
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: ADD
8265: ST_TO_ADDR
// end ; end ;
8266: GO 8188
8268: POP
8269: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8270: LD_ADDR_VAR 0 1
8274: PUSH
8275: LD_VAR 0 1
8279: PUSH
8280: LD_STRING #saved-convoys
8282: PUSH
8283: LD_EXP 5
8287: PUSH
8288: EMPTY
8289: LIST
8290: LIST
8291: ADD
8292: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8293: LD_ADDR_VAR 0 1
8297: PUSH
8298: LD_VAR 0 1
8302: PUSH
8303: LD_STRING #points-to-win
8305: PUSH
8306: LD_VAR 0 3
8310: PUSH
8311: LD_EXP 34
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: ADD
8321: ST_TO_ADDR
// end ;
8322: LD_VAR 0 1
8326: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8327: LD_INT 0
8329: PPUSH
8330: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8331: LD_ADDR_EXP 38
8335: PUSH
8336: LD_INT 0
8338: PUSH
8339: LD_INT 0
8341: PUSH
8342: LD_INT 0
8344: PUSH
8345: LD_INT 0
8347: PUSH
8348: LD_INT 0
8350: PUSH
8351: LD_INT 0
8353: PUSH
8354: LD_INT 0
8356: PUSH
8357: LD_INT 0
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8370: LD_ADDR_EXP 39
8374: PUSH
8375: EMPTY
8376: ST_TO_ADDR
// end ;
8377: LD_VAR 0 1
8381: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8382: LD_INT 0
8384: PPUSH
// if not multi_points or not side or side > 8 then
8385: LD_EXP 38
8389: NOT
8390: IFTRUE 8399
8392: PUSH
8393: LD_VAR 0 1
8397: NOT
8398: OR
8399: IFTRUE 8411
8401: PUSH
8402: LD_VAR 0 1
8406: PUSH
8407: LD_INT 8
8409: GREATER
8410: OR
8411: IFFALSE 8415
// exit ;
8413: GO 8452
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8415: LD_ADDR_EXP 38
8419: PUSH
8420: LD_EXP 38
8424: PPUSH
8425: LD_VAR 0 1
8429: PPUSH
8430: LD_EXP 38
8434: PUSH
8435: LD_VAR 0 1
8439: ARRAY
8440: PUSH
8441: LD_VAR 0 2
8445: PLUS
8446: PPUSH
8447: CALL_OW 1
8451: ST_TO_ADDR
// end ;
8452: LD_VAR 0 3
8456: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8457: LD_INT 0
8459: PPUSH
// if not multi_points or not side or side > 8 then
8460: LD_EXP 38
8464: NOT
8465: IFTRUE 8474
8467: PUSH
8468: LD_VAR 0 1
8472: NOT
8473: OR
8474: IFTRUE 8486
8476: PUSH
8477: LD_VAR 0 1
8481: PUSH
8482: LD_INT 8
8484: GREATER
8485: OR
8486: IFFALSE 8490
// exit ;
8488: GO 8506
// result := multi_points [ side ] ;
8490: LD_ADDR_VAR 0 2
8494: PUSH
8495: LD_EXP 38
8499: PUSH
8500: LD_VAR 0 1
8504: ARRAY
8505: ST_TO_ADDR
// end ;
8506: LD_VAR 0 2
8510: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8511: LD_INT 0
8513: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8514: LD_ADDR_EXP 39
8518: PUSH
8519: LD_EXP 39
8523: PPUSH
8524: LD_EXP 39
8528: PUSH
8529: LD_INT 1
8531: PLUS
8532: PPUSH
8533: LD_VAR 0 1
8537: PPUSH
8538: CALL_OW 1
8542: ST_TO_ADDR
// end ;
8543: LD_VAR 0 2
8547: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8548: LD_INT 0
8550: PPUSH
// if not id then
8551: LD_VAR 0 1
8555: NOT
8556: IFFALSE 8560
// exit ;
8558: GO 8576
// result := multi_points_conditions [ id ] ;
8560: LD_ADDR_VAR 0 2
8564: PUSH
8565: LD_EXP 39
8569: PUSH
8570: LD_VAR 0 1
8574: ARRAY
8575: ST_TO_ADDR
// end ;
8576: LD_VAR 0 2
8580: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8581: LD_INT 0
8583: PPUSH
8584: PPUSH
8585: PPUSH
8586: PPUSH
8587: PPUSH
// players := [ ] ;
8588: LD_ADDR_VAR 0 3
8592: PUSH
8593: EMPTY
8594: ST_TO_ADDR
// for i = 1 to 8 do
8595: LD_ADDR_VAR 0 4
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 8
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8670
// begin if i = side then
8611: LD_VAR 0 4
8615: PUSH
8616: LD_VAR 0 1
8620: EQUAL
8621: IFFALSE 8625
// continue ;
8623: GO 8608
// if multi_sides [ i ] and not multi_loosers [ i ] then
8625: LD_EXP 15
8629: PUSH
8630: LD_VAR 0 4
8634: ARRAY
8635: IFFALSE 8650
8637: PUSH
8638: LD_EXP 32
8642: PUSH
8643: LD_VAR 0 4
8647: ARRAY
8648: NOT
8649: AND
8650: IFFALSE 8668
// players := players ^ i ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: LD_VAR 0 3
8661: PUSH
8662: LD_VAR 0 4
8666: ADD
8667: ST_TO_ADDR
// end ;
8668: GO 8608
8670: POP
8671: POP
// if not players then
8672: LD_VAR 0 3
8676: NOT
8677: IFFALSE 8681
// exit ;
8679: GO 8948
// if players = 1 then
8681: LD_VAR 0 3
8685: PUSH
8686: LD_INT 1
8688: EQUAL
8689: IFFALSE 8750
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8691: LD_ADDR_VAR 0 4
8695: PUSH
8696: LD_INT 22
8698: PUSH
8699: LD_VAR 0 1
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 51
8710: PUSH
8711: EMPTY
8712: LIST
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PPUSH
8718: CALL_OW 69
8722: PUSH
8723: FOR_IN
8724: IFFALSE 8746
// SetSide ( i , players [ 1 ] ) ;
8726: LD_VAR 0 4
8730: PPUSH
8731: LD_VAR 0 3
8735: PUSH
8736: LD_INT 1
8738: ARRAY
8739: PPUSH
8740: CALL_OW 235
8744: GO 8723
8746: POP
8747: POP
// end else
8748: GO 8948
// begin j := 1 ;
8750: LD_ADDR_VAR 0 5
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8758: LD_ADDR_VAR 0 4
8762: PUSH
8763: LD_INT 22
8765: PUSH
8766: LD_VAR 0 1
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 2
8777: PUSH
8778: LD_INT 21
8780: PUSH
8781: LD_INT 1
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 51
8790: PUSH
8791: EMPTY
8792: LIST
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 2
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: PUSH
8813: EMPTY
8814: LIST
8815: LIST
8816: PPUSH
8817: CALL_OW 69
8821: PUSH
8822: FOR_IN
8823: IFFALSE 8946
// begin SetSide ( i , players [ j ] ) ;
8825: LD_VAR 0 4
8829: PPUSH
8830: LD_VAR 0 3
8834: PUSH
8835: LD_VAR 0 5
8839: ARRAY
8840: PPUSH
8841: CALL_OW 235
// if IsDrivenBy ( i ) then
8845: LD_VAR 0 4
8849: PPUSH
8850: CALL_OW 311
8854: IFFALSE 8881
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8856: LD_VAR 0 4
8860: PPUSH
8861: CALL_OW 311
8865: PPUSH
8866: LD_VAR 0 3
8870: PUSH
8871: LD_VAR 0 5
8875: ARRAY
8876: PPUSH
8877: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8881: LD_VAR 0 4
8885: PPUSH
8886: CALL_OW 310
8890: PPUSH
8891: CALL_OW 247
8895: PUSH
8896: LD_INT 3
8898: EQUAL
8899: IFFALSE 8910
// ComExitBuilding ( i ) ;
8901: LD_VAR 0 4
8905: PPUSH
8906: CALL_OW 122
// j := j + 1 ;
8910: LD_ADDR_VAR 0 5
8914: PUSH
8915: LD_VAR 0 5
8919: PUSH
8920: LD_INT 1
8922: PLUS
8923: ST_TO_ADDR
// if j > players then
8924: LD_VAR 0 5
8928: PUSH
8929: LD_VAR 0 3
8933: GREATER
8934: IFFALSE 8944
// j := 1 ;
8936: LD_ADDR_VAR 0 5
8940: PUSH
8941: LD_INT 1
8943: ST_TO_ADDR
// end ;
8944: GO 8822
8946: POP
8947: POP
// end ; end ;
8948: LD_VAR 0 2
8952: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8953: LD_INT 0
8955: PPUSH
// if not side or side > 8 then
8956: LD_VAR 0 1
8960: NOT
8961: IFTRUE 8973
8963: PUSH
8964: LD_VAR 0 1
8968: PUSH
8969: LD_INT 8
8971: GREATER
8972: OR
8973: IFFALSE 8977
// exit ;
8975: GO 8994
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8977: LD_VAR 0 1
8981: PPUSH
8982: LD_INT 6
8984: PPUSH
8985: CALL 8548 0 1
8989: PPUSH
8990: CALL 8382 0 2
// end ;
8994: LD_VAR 0 2
8998: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8999: LD_INT 0
9001: PPUSH
// if not side or side > 8 then
9002: LD_VAR 0 1
9006: NOT
9007: IFTRUE 9019
9009: PUSH
9010: LD_VAR 0 1
9014: PUSH
9015: LD_INT 8
9017: GREATER
9018: OR
9019: IFFALSE 9023
// exit ;
9021: GO 9040
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
9023: LD_VAR 0 1
9027: PPUSH
9028: LD_INT 4
9030: PPUSH
9031: CALL 8548 0 1
9035: PPUSH
9036: CALL 8382 0 2
// end ;
9040: LD_VAR 0 2
9044: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
9045: LD_INT 0
9047: PPUSH
// if not side or side > 8 then
9048: LD_VAR 0 1
9052: NOT
9053: IFTRUE 9065
9055: PUSH
9056: LD_VAR 0 1
9060: PUSH
9061: LD_INT 8
9063: GREATER
9064: OR
9065: IFFALSE 9069
// exit ;
9067: GO 9086
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_INT 5
9076: PPUSH
9077: CALL 8548 0 1
9081: PPUSH
9082: CALL 8382 0 2
// end ;
9086: LD_VAR 0 2
9090: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
9091: LD_INT 0
9093: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
9094: LD_VAR 0 1
9098: NOT
9099: IFTRUE 9111
9101: PUSH
9102: LD_VAR 0 1
9106: PUSH
9107: LD_INT 8
9109: GREATER
9110: OR
9111: IFTRUE 9139
9113: PUSH
9114: LD_VAR 0 2
9118: PUSH
9119: LD_INT 2
9121: PUSH
9122: LD_INT 6
9124: PUSH
9125: LD_INT 36
9127: PUSH
9128: LD_INT 0
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: IN
9137: NOT
9138: OR
9139: IFFALSE 9143
// exit ;
9141: GO 9160
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
9143: LD_VAR 0 1
9147: PPUSH
9148: LD_INT 3
9150: PPUSH
9151: CALL 8548 0 1
9155: PPUSH
9156: CALL 8382 0 2
// end ;
9160: LD_VAR 0 3
9164: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
9165: LD_INT 0
9167: PPUSH
9168: PPUSH
// if not un then
9169: LD_VAR 0 1
9173: NOT
9174: IFFALSE 9178
// exit ;
9176: GO 9224
// if not points then
9178: LD_VAR 0 3
9182: NOT
9183: IFFALSE 9200
// gained_points := Multiplayer_GetCondition ( 1 ) else
9185: LD_ADDR_VAR 0 5
9189: PUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL 8548 0 1
9197: ST_TO_ADDR
9198: GO 9210
// gained_points := points ;
9200: LD_ADDR_VAR 0 5
9204: PUSH
9205: LD_VAR 0 3
9209: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
9210: LD_VAR 0 2
9214: PPUSH
9215: LD_VAR 0 5
9219: PPUSH
9220: CALL 8382 0 2
// end ; end_of_file
9224: LD_VAR 0 4
9228: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
9229: LD_INT 0
9231: PPUSH
// begin side := GetSide ( un ) ;
9232: LD_ADDR_VAR 0 4
9236: PUSH
9237: LD_VAR 0 1
9241: PPUSH
9242: CALL_OW 255
9246: ST_TO_ADDR
// if killerSide = enemySide then
9247: LD_VAR 0 2
9251: PUSH
9252: LD_EXP 12
9256: EQUAL
9257: IFFALSE 9261
// exit ;
9259: GO 9323
// if side = convoySide and multi_sides [ killerSide ] then
9261: LD_VAR 0 4
9265: PUSH
9266: LD_EXP 42
9270: EQUAL
9271: IFFALSE 9285
9273: PUSH
9274: LD_EXP 15
9278: PUSH
9279: LD_VAR 0 2
9283: ARRAY
9284: AND
9285: IFFALSE 9306
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9287: LD_VAR 0 4
9291: PPUSH
9292: LD_INT 9
9294: PPUSH
9295: CALL 8548 0 1
9299: PPUSH
9300: CALL 8382 0 2
// exit ;
9304: GO 9323
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9306: LD_VAR 0 1
9310: PPUSH
9311: LD_VAR 0 2
9315: PPUSH
9316: LD_INT 0
9318: PPUSH
9319: CALL 9165 0 3
// end ;
9323: PPOPN 4
9325: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9326: LD_INT 0
9328: PPUSH
9329: PPUSH
9330: PPUSH
9331: PPUSH
9332: PPUSH
9333: PPUSH
9334: PPUSH
9335: PPUSH
9336: PPUSH
9337: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL 59274 0 1
// side := GetSide ( un ) ;
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: LD_VAR 0 1
9356: PPUSH
9357: CALL_OW 255
9361: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9362: LD_EXP 15
9366: PUSH
9367: LD_VAR 0 3
9371: ARRAY
9372: IFTRUE 9386
9374: PUSH
9375: LD_VAR 0 3
9379: PUSH
9380: LD_EXP 42
9384: EQUAL
9385: OR
9386: IFFALSE 9464
// begin if un in convoys then
9388: LD_VAR 0 1
9392: PUSH
9393: LD_EXP 40
9397: IN
9398: IFFALSE 9416
// convoys := convoys diff un ;
9400: LD_ADDR_EXP 40
9404: PUSH
9405: LD_EXP 40
9409: PUSH
9410: LD_VAR 0 1
9414: DIFF
9415: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 247
9425: PUSH
9426: LD_INT 1
9428: EQUAL
9429: IFFALSE 9440
// MultiplayerEvent_HumanLost ( side ) ;
9431: LD_VAR 0 3
9435: PPUSH
9436: CALL 8999 0 1
// if GetType ( un ) = unit_vehicle then
9440: LD_VAR 0 1
9444: PPUSH
9445: CALL_OW 247
9449: PUSH
9450: LD_INT 2
9452: EQUAL
9453: IFFALSE 9464
// MultiplayerEvent_VehicleLost ( side ) ;
9455: LD_VAR 0 3
9459: PPUSH
9460: CALL 9045 0 1
// end ; if un in enemyForestGuard then
9464: LD_VAR 0 1
9468: PUSH
9469: LD_EXP 11
9473: IN
9474: IFFALSE 9492
// enemyForestGuard := enemyForestGuard diff un ;
9476: LD_ADDR_EXP 11
9480: PUSH
9481: LD_EXP 11
9485: PUSH
9486: LD_VAR 0 1
9490: DIFF
9491: ST_TO_ADDR
// if un in enemyMobile then
9492: LD_VAR 0 1
9496: PUSH
9497: LD_EXP 10
9501: IN
9502: IFFALSE 9520
// enemyMobile := enemyMobile diff un ;
9504: LD_ADDR_EXP 10
9508: PUSH
9509: LD_EXP 10
9513: PUSH
9514: LD_VAR 0 1
9518: DIFF
9519: ST_TO_ADDR
// if un in enemyUnits then
9520: LD_VAR 0 1
9524: PUSH
9525: LD_EXP 9
9529: IN
9530: IFFALSE 9548
// enemyUnits := enemyUnits diff un ;
9532: LD_ADDR_EXP 9
9536: PUSH
9537: LD_EXP 9
9541: PUSH
9542: LD_VAR 0 1
9546: DIFF
9547: ST_TO_ADDR
// if un in arAttackersInf then
9548: LD_VAR 0 1
9552: PUSH
9553: LD_EXP 13
9557: IN
9558: IFFALSE 9576
// arAttackersInf := arAttackersInf diff un ;
9560: LD_ADDR_EXP 13
9564: PUSH
9565: LD_EXP 13
9569: PUSH
9570: LD_VAR 0 1
9574: DIFF
9575: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders and not multi_loosers [ side ] then
9576: LD_EXP 31
9580: IFFALSE 9588
9582: PUSH
9583: LD_EXP 24
9587: AND
9588: IFFALSE 9603
9590: PUSH
9591: LD_EXP 32
9595: PUSH
9596: LD_VAR 0 3
9600: ARRAY
9601: NOT
9602: AND
9603: IFFALSE 9681
// if un in multi_commanders then
9605: LD_VAR 0 1
9609: PUSH
9610: LD_EXP 31
9614: IN
9615: IFFALSE 9681
// begin if side = your_side then
9617: LD_VAR 0 3
9621: PUSH
9622: LD_OWVAR 2
9626: EQUAL
9627: IFFALSE 9633
// Multiplayer_Loose_Message ;
9629: CALL_OW 521
// multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9633: LD_ADDR_EXP 32
9637: PUSH
9638: LD_EXP 32
9642: PPUSH
9643: LD_VAR 0 3
9647: PPUSH
9648: LD_INT 1
9650: PPUSH
9651: CALL_OW 1
9655: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9656: LD_ADDR_EXP 31
9660: PUSH
9661: LD_EXP 31
9665: PUSH
9666: LD_VAR 0 1
9670: DIFF
9671: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9672: LD_VAR 0 3
9676: PPUSH
9677: CALL 8581 0 1
// end ; end ;
9681: PPOPN 11
9683: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9684: LD_INT 0
9686: PPUSH
9687: PPUSH
9688: PPUSH
9689: PPUSH
// begin side := GetSide ( building ) ;
9690: LD_ADDR_VAR 0 4
9694: PUSH
9695: LD_VAR 0 1
9699: PPUSH
9700: CALL_OW 255
9704: ST_TO_ADDR
// if multi_sides [ side ] then
9705: LD_EXP 15
9709: PUSH
9710: LD_VAR 0 4
9714: ARRAY
9715: IFFALSE 9736
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9717: LD_VAR 0 4
9721: PPUSH
9722: LD_VAR 0 1
9726: PPUSH
9727: CALL_OW 266
9731: PPUSH
9732: CALL 9091 0 2
// end ;
9736: PPOPN 5
9738: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9739: LD_INT 0
9741: PPUSH
9742: PPUSH
9743: PPUSH
9744: PPUSH
9745: PPUSH
9746: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9747: LD_VAR 0 1
9751: PPUSH
9752: LD_VAR 0 2
9756: PPUSH
9757: CALL 59332 0 2
// side := GetSide ( vehicle ) ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: LD_VAR 0 1
9770: PPUSH
9771: CALL_OW 255
9775: ST_TO_ADDR
// if multi_sides [ side ] then
9776: LD_EXP 15
9780: PUSH
9781: LD_VAR 0 4
9785: ARRAY
9786: IFFALSE 9797
// MultiplayerEvent_Produced ( side ) ;
9788: LD_VAR 0 4
9792: PPUSH
9793: CALL 8953 0 1
// end ;
9797: PPOPN 8
9799: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9800: LD_INT 0
9802: PPUSH
9803: PPUSH
// begin side := GetSide ( lab ) ;
9804: LD_ADDR_VAR 0 4
9808: PUSH
9809: LD_VAR 0 2
9813: PPUSH
9814: CALL_OW 255
9818: ST_TO_ADDR
// if multi_sides [ side ] then
9819: LD_EXP 15
9823: PUSH
9824: LD_VAR 0 4
9828: ARRAY
9829: IFFALSE 9894
// for i := 1 to 8 do
9831: LD_ADDR_VAR 0 3
9835: PUSH
9836: DOUBLE
9837: LD_INT 1
9839: DEC
9840: ST_TO_ADDR
9841: LD_INT 8
9843: PUSH
9844: FOR_TO
9845: IFFALSE 9892
// if multi_sides [ i ] and i <> side then
9847: LD_EXP 15
9851: PUSH
9852: LD_VAR 0 3
9856: ARRAY
9857: IFFALSE 9871
9859: PUSH
9860: LD_VAR 0 3
9864: PUSH
9865: LD_VAR 0 4
9869: NONEQUAL
9870: AND
9871: IFFALSE 9890
// SetTech ( tech , i , state_researched ) ;
9873: LD_VAR 0 1
9877: PPUSH
9878: LD_VAR 0 3
9882: PPUSH
9883: LD_INT 2
9885: PPUSH
9886: CALL_OW 322
9890: GO 9844
9892: POP
9893: POP
// end ;
9894: PPOPN 4
9896: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9897: LD_VAR 0 2
9901: PUSH
9902: LD_EXP 10
9906: IN
9907: IFFALSE 9970
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9909: LD_VAR 0 1
9913: PPUSH
9914: LD_INT 163
9916: PPUSH
9917: LD_INT 31
9919: PPUSH
9920: CALL_OW 111
// wait ( 0 0$1 ) ;
9924: LD_INT 35
9926: PPUSH
9927: CALL_OW 67
// if IsDead ( driver ) then
9931: LD_VAR 0 1
9935: PPUSH
9936: CALL_OW 301
9940: IFFALSE 9944
// exit ;
9942: GO 9970
// until IsAt ( driver , 163 , 31 ) ;
9944: LD_VAR 0 1
9948: PPUSH
9949: LD_INT 163
9951: PPUSH
9952: LD_INT 31
9954: PPUSH
9955: CALL_OW 307
9959: IFFALSE 9909
// RemoveUnit ( driver ) ;
9961: LD_VAR 0 1
9965: PPUSH
9966: CALL_OW 64
// end ; end ;
9970: PPOPN 4
9972: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do var side ;
9973: LD_INT 0
9975: PPUSH
// begin side := GetSide ( factory ) ;
9976: LD_ADDR_VAR 0 6
9980: PUSH
9981: LD_VAR 0 1
9985: PPUSH
9986: CALL_OW 255
9990: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
9991: LD_VAR 0 5
9995: PUSH
9996: LD_INT 81
9998: EQUAL
9999: IFFALSE 10037
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_VAR 0 6
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: LD_INT 34
10016: PUSH
10017: LD_INT 81
10019: PUSH
10020: EMPTY
10021: LIST
10022: LIST
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: PPUSH
10028: CALL_OW 69
10032: PUSH
10033: LD_INT 0
10035: GREATER
10036: AND
10037: IFFALSE 10058
// begin ComCancel ( factory ) ;
10039: LD_VAR 0 1
10043: PPUSH
10044: CALL_OW 127
// HintSpec ( VehLimit , 2 ) ;
10048: LD_STRING VehLimit
10050: PPUSH
10051: LD_INT 2
10053: PPUSH
10054: CALL_OW 338
// end ; end ; end_of_file
10058: PPOPN 6
10060: END
// every 8 8$00 trigger not forestIsCleared do
10061: LD_EXP 7
10065: NOT
10066: IFFALSE 10075
10068: GO 10070
10070: DISABLE
// ClearRoadInForest ;
10071: CALL 2246 0 0
10075: END
// every 18 18$00 trigger not forestIsCleared do
10076: LD_EXP 7
10080: NOT
10081: IFFALSE 10090
10083: GO 10085
10085: DISABLE
// ClearRoadInForest ;
10086: CALL 2246 0 0
10090: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
10091: LD_EXP 41
10095: PUSH
10096: LD_INT 4
10098: MOD
10099: PUSH
10100: LD_INT 0
10102: EQUAL
10103: IFFALSE 10115
10105: PUSH
10106: LD_EXP 41
10110: PUSH
10111: LD_INT 4
10113: GREATEREQUAL
10114: AND
10115: IFFALSE 10144
10117: GO 10119
10119: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
10120: LD_ADDR_EXP 13
10124: PUSH
10125: LD_EXP 13
10129: PUSH
10130: CALL 3439 0 0
10134: UNION
10135: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10136: LD_INT 10500
10138: PPUSH
10139: CALL_OW 67
// enable ;
10143: ENABLE
// end ;
10144: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
10145: LD_EXP 41
10149: PUSH
10150: LD_INT 7
10152: MOD
10153: PUSH
10154: LD_INT 0
10156: EQUAL
10157: IFFALSE 10169
10159: PUSH
10160: LD_EXP 41
10164: PUSH
10165: LD_INT 7
10167: GREATEREQUAL
10168: AND
10169: IFFALSE 10198
10171: GO 10173
10173: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
10174: LD_ADDR_EXP 13
10178: PUSH
10179: LD_EXP 13
10183: PUSH
10184: CALL 3683 0 0
10188: UNION
10189: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10190: LD_INT 10500
10192: PPUSH
10193: CALL_OW 67
// enable ;
10197: ENABLE
// end ;
10198: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 36 , 38 ] do
10199: LD_EXP 41
10203: PUSH
10204: LD_INT 8
10206: PUSH
10207: LD_INT 12
10209: PUSH
10210: LD_INT 16
10212: PUSH
10213: LD_INT 20
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_INT 24
10221: PUSH
10222: LD_INT 26
10224: PUSH
10225: LD_INT 28
10227: PUSH
10228: LD_INT 30
10230: PUSH
10231: LD_INT 32
10233: PUSH
10234: LD_INT 36
10236: PUSH
10237: LD_INT 38
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: IN
10254: IFFALSE 10283
10256: GO 10258
10258: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
10259: LD_ADDR_EXP 13
10263: PUSH
10264: LD_EXP 13
10268: PUSH
10269: CALL 3234 0 0
10273: UNION
10274: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10275: LD_INT 10500
10277: PPUSH
10278: CALL_OW 67
// enable ;
10282: ENABLE
// end ;
10283: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
10284: LD_EXP 41
10288: PUSH
10289: LD_INT 5
10291: MOD
10292: PUSH
10293: LD_INT 4
10295: EQUAL
10296: IFFALSE 10339
10298: PUSH
10299: LD_INT 22
10301: PUSH
10302: LD_EXP 12
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 92
10313: PUSH
10314: LD_INT 30
10316: PUSH
10317: LD_INT 48
10319: PUSH
10320: LD_INT 20
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PPUSH
10333: CALL_OW 69
10337: NOT
10338: AND
10339: IFFALSE 10356
10341: GO 10343
10343: DISABLE
// begin SendWestGroup ;
10344: CALL 2600 0 0
// wait ( 12 12$00 ) ;
10348: LD_INT 25200
10350: PPUSH
10351: CALL_OW 67
// enable ;
10355: ENABLE
// end ;
10356: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
10357: LD_EXP 10
10361: PPUSH
10362: LD_INT 50
10364: PUSH
10365: EMPTY
10366: LIST
10367: PPUSH
10368: CALL_OW 72
10372: PUSH
10373: LD_INT 5
10375: LESS
10376: IFFALSE 10410
10378: GO 10380
10380: DISABLE
// begin PrepareMobileGroup ;
10381: CALL 1586 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
10385: LD_INT 7350
10387: PUSH
10388: LD_INT 6300
10390: PUSH
10391: LD_INT 5250
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_OWVAR 67
10403: ARRAY
10404: PPUSH
10405: CALL_OW 67
// enable ;
10409: ENABLE
// end ;
10410: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
10411: LD_EXP 41
10415: PUSH
10416: LD_INT 6
10418: MOD
10419: PUSH
10420: LD_INT 0
10422: EQUAL
10423: IFFALSE 10435
10425: PUSH
10426: LD_EXP 41
10430: PUSH
10431: LD_INT 6
10433: GREATEREQUAL
10434: AND
10435: IFFALSE 10458
10437: PUSH
10438: LD_EXP 10
10442: PPUSH
10443: LD_INT 50
10445: PUSH
10446: EMPTY
10447: LIST
10448: PPUSH
10449: CALL_OW 72
10453: PUSH
10454: LD_INT 10
10456: LESS
10457: AND
10458: IFFALSE 10492
10460: GO 10462
10462: DISABLE
// begin PrepareMobileGroup2 ;
10463: CALL 1914 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10467: LD_INT 9450
10469: PUSH
10470: LD_INT 8400
10472: PUSH
10473: LD_INT 7350
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: LIST
10480: PUSH
10481: LD_OWVAR 67
10485: ARRAY
10486: PPUSH
10487: CALL_OW 67
// enable ;
10491: ENABLE
// end ;
10492: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10493: LD_EXP 7
10497: IFFALSE 10710
10499: GO 10501
10501: DISABLE
10502: LD_INT 0
10504: PPUSH
10505: PPUSH
// begin if tick > 50 50$00 then
10506: LD_OWVAR 1
10510: PUSH
10511: LD_INT 105000
10513: GREATER
10514: IFFALSE 10519
// begin disable ;
10516: DISABLE
// exit ;
10517: GO 10710
// end ; tmp := PrepareForestOnslaught ;
10519: LD_ADDR_VAR 0 2
10523: PUSH
10524: CALL 2902 0 0
10528: ST_TO_ADDR
// for i in tmp do
10529: LD_ADDR_VAR 0 1
10533: PUSH
10534: LD_VAR 0 2
10538: PUSH
10539: FOR_IN
10540: IFFALSE 10604
// begin AddComMoveXY ( i , 197 , 152 ) ;
10542: LD_VAR 0 1
10546: PPUSH
10547: LD_INT 197
10549: PPUSH
10550: LD_INT 152
10552: PPUSH
10553: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10557: LD_VAR 0 1
10561: PPUSH
10562: LD_INT 159
10564: PPUSH
10565: LD_INT 163
10567: PPUSH
10568: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10572: LD_VAR 0 1
10576: PPUSH
10577: LD_INT 116
10579: PPUSH
10580: LD_INT 154
10582: PPUSH
10583: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10587: LD_VAR 0 1
10591: PPUSH
10592: LD_INT 93
10594: PPUSH
10595: LD_INT 177
10597: PPUSH
10598: CALL_OW 171
// end ;
10602: GO 10539
10604: POP
10605: POP
// repeat wait ( 0 0$1 ) ;
10606: LD_INT 35
10608: PPUSH
10609: CALL_OW 67
// for i in tmp do
10613: LD_ADDR_VAR 0 1
10617: PUSH
10618: LD_VAR 0 2
10622: PUSH
10623: FOR_IN
10624: IFFALSE 10685
// if not IsOk ( i ) then
10626: LD_VAR 0 1
10630: PPUSH
10631: CALL_OW 302
10635: NOT
10636: IFFALSE 10656
// tmp := tmp diff i else
10638: LD_ADDR_VAR 0 2
10642: PUSH
10643: LD_VAR 0 2
10647: PUSH
10648: LD_VAR 0 1
10652: DIFF
10653: ST_TO_ADDR
10654: GO 10683
// if not HasTask ( i ) then
10656: LD_VAR 0 1
10660: PPUSH
10661: CALL_OW 314
10665: NOT
10666: IFFALSE 10683
// ComMoveXY ( i , 93 , 177 ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: LD_INT 93
10675: PPUSH
10676: LD_INT 177
10678: PPUSH
10679: CALL_OW 111
10683: GO 10623
10685: POP
10686: POP
// until not tmp ;
10687: LD_VAR 0 2
10691: NOT
10692: IFFALSE 10606
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10694: LD_INT 1050
10696: PPUSH
10697: LD_INT 11550
10699: PPUSH
10700: CALL_OW 12
10704: PPUSH
10705: CALL_OW 67
// enable ;
10709: ENABLE
// end ;
10710: PPOPN 2
10712: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10713: LD_EXP 11
10717: IFFALSE 11236
10719: GO 10721
10721: DISABLE
10722: LD_INT 0
10724: PPUSH
10725: PPUSH
10726: PPUSH
10727: PPUSH
// begin enable ;
10728: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_EXP 11
10738: PPUSH
10739: LD_INT 50
10741: PUSH
10742: EMPTY
10743: LIST
10744: PPUSH
10745: CALL_OW 72
10749: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10750: LD_ADDR_VAR 0 3
10754: PUSH
10755: LD_INT 19
10757: PPUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 22
10763: PUSH
10764: LD_EXP 12
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PPUSH
10777: CALL_OW 70
10781: ST_TO_ADDR
// if not tmp then
10782: LD_VAR 0 2
10786: NOT
10787: IFFALSE 10791
// exit ;
10789: GO 11236
// for i in tmp do
10791: LD_ADDR_VAR 0 1
10795: PUSH
10796: LD_VAR 0 2
10800: PUSH
10801: FOR_IN
10802: IFFALSE 11234
// begin if enemyInForest then
10804: LD_VAR 0 3
10808: IFFALSE 10898
// begin if GetClass ( i ) = 4 then
10810: LD_VAR 0 1
10814: PPUSH
10815: CALL_OW 257
10819: PUSH
10820: LD_INT 4
10822: EQUAL
10823: IFFALSE 10857
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10825: LD_VAR 0 1
10829: PPUSH
10830: LD_VAR 0 2
10834: PUSH
10835: LD_VAR 0 1
10839: DIFF
10840: PPUSH
10841: LD_VAR 0 1
10845: PPUSH
10846: CALL_OW 74
10850: PPUSH
10851: CALL_OW 112
10855: GO 10896
// if GetClass ( i ) <> 3 then
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 257
10866: PUSH
10867: LD_INT 3
10869: NONEQUAL
10870: IFFALSE 10896
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10872: LD_VAR 0 1
10876: PPUSH
10877: LD_VAR 0 3
10881: PPUSH
10882: LD_VAR 0 1
10886: PPUSH
10887: CALL_OW 74
10891: PPUSH
10892: CALL_OW 115
// end else
10896: GO 11232
// if not IsInArea ( i , arForestArea ) then
10898: LD_VAR 0 1
10902: PPUSH
10903: LD_INT 21
10905: PPUSH
10906: CALL_OW 308
10910: NOT
10911: IFFALSE 10927
// ComMoveToArea ( i , arForestArea ) else
10913: LD_VAR 0 1
10917: PPUSH
10918: LD_INT 21
10920: PPUSH
10921: CALL_OW 113
10925: GO 11232
// if GetClass ( i ) = 3 then
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 257
10936: PUSH
10937: LD_INT 3
10939: EQUAL
10940: IFFALSE 11232
// begin vehicle := IsInUnit ( i ) ;
10942: LD_ADDR_VAR 0 4
10946: PUSH
10947: LD_VAR 0 1
10951: PPUSH
10952: CALL_OW 310
10956: ST_TO_ADDR
// if vehicle then
10957: LD_VAR 0 4
10961: IFFALSE 11188
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10963: LD_VAR 0 4
10967: PPUSH
10968: CALL_OW 256
10972: PUSH
10973: LD_INT 1000
10975: LESS
10976: IFFALSE 10990
10978: PUSH
10979: LD_VAR 0 1
10983: PPUSH
10984: CALL_OW 314
10988: NOT
10989: AND
10990: IFFALSE 11186
// begin if not IsInArea ( vehicle , arParkingArea ) then
10992: LD_VAR 0 4
10996: PPUSH
10997: LD_INT 20
10999: PPUSH
11000: CALL_OW 308
11004: NOT
11005: IFFALSE 11021
// ComMoveToArea ( vehicle , arParkingArea ) else
11007: LD_VAR 0 4
11011: PPUSH
11012: LD_INT 20
11014: PPUSH
11015: CALL_OW 113
11019: GO 11186
// if not GetTag ( i ) then
11021: LD_VAR 0 1
11025: PPUSH
11026: CALL_OW 110
11030: NOT
11031: IFFALSE 11186
// begin SetTag ( i , tMech ) ;
11033: LD_VAR 0 1
11037: PPUSH
11038: LD_INT 7
11040: PPUSH
11041: CALL_OW 109
// ComExitVehicle ( i ) ;
11045: LD_VAR 0 1
11049: PPUSH
11050: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
11054: LD_VAR 0 1
11058: PPUSH
11059: LD_VAR 0 4
11063: PPUSH
11064: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11068: LD_INT 35
11070: PPUSH
11071: CALL_OW 67
// if FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) then
11075: LD_INT 19
11077: PPUSH
11078: LD_INT 3
11080: PUSH
11081: LD_INT 22
11083: PUSH
11084: LD_EXP 12
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 70
11101: IFFALSE 11133
// begin ComEnterUnit ( i , vehicle ) ;
11103: LD_VAR 0 1
11107: PPUSH
11108: LD_VAR 0 4
11112: PPUSH
11113: CALL_OW 120
// SetTag ( i , 0 ) ;
11117: LD_VAR 0 1
11121: PPUSH
11122: LD_INT 0
11124: PPUSH
11125: CALL_OW 109
// exit ;
11129: POP
11130: POP
11131: GO 11236
// end ; until GetLives ( vehicle ) = 1000 ;
11133: LD_VAR 0 4
11137: PPUSH
11138: CALL_OW 256
11142: PUSH
11143: LD_INT 1000
11145: EQUAL
11146: IFFALSE 11068
// SetLives ( i , 1000 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_INT 1000
11155: PPUSH
11156: CALL_OW 234
// ComEnterUnit ( i , vehicle ) ;
11160: LD_VAR 0 1
11164: PPUSH
11165: LD_VAR 0 4
11169: PPUSH
11170: CALL_OW 120
// SetTag ( i , 0 ) ;
11174: LD_VAR 0 1
11178: PPUSH
11179: LD_INT 0
11181: PPUSH
11182: CALL_OW 109
// end ; end ; end else
11186: GO 11232
// if not IsInArea ( i , arParkingArea ) and GetClass ( i ) <> 3 then
11188: LD_VAR 0 1
11192: PPUSH
11193: LD_INT 20
11195: PPUSH
11196: CALL_OW 308
11200: NOT
11201: IFFALSE 11218
11203: PUSH
11204: LD_VAR 0 1
11208: PPUSH
11209: CALL_OW 257
11213: PUSH
11214: LD_INT 3
11216: NONEQUAL
11217: AND
11218: IFFALSE 11232
// ComMoveToArea ( i , arParkingArea ) ;
11220: LD_VAR 0 1
11224: PPUSH
11225: LD_INT 20
11227: PPUSH
11228: CALL_OW 113
// end ; end ;
11232: GO 10801
11234: POP
11235: POP
// end ;
11236: PPOPN 4
11238: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
11239: LD_EXP 10
11243: IFFALSE 11776
11245: GO 11247
11247: DISABLE
11248: LD_INT 0
11250: PPUSH
11251: PPUSH
11252: PPUSH
// begin enable ;
11253: ENABLE
// if not enemyMobile then
11254: LD_EXP 10
11258: NOT
11259: IFFALSE 11263
// exit ;
11261: GO 11776
// for i in enemyMobile do
11263: LD_ADDR_VAR 0 1
11267: PUSH
11268: LD_EXP 10
11272: PUSH
11273: FOR_IN
11274: IFFALSE 11774
// begin if GetSide ( i ) <> enemySide then
11276: LD_VAR 0 1
11280: PPUSH
11281: CALL_OW 255
11285: PUSH
11286: LD_EXP 12
11290: NONEQUAL
11291: IFFALSE 11311
// begin enemyMobile := enemyMobile diff i ;
11293: LD_ADDR_EXP 10
11297: PUSH
11298: LD_EXP 10
11302: PUSH
11303: LD_VAR 0 1
11307: DIFF
11308: ST_TO_ADDR
// continue ;
11309: GO 11273
// end ; if GetTag ( i ) = 300 then
11311: LD_VAR 0 1
11315: PPUSH
11316: CALL_OW 110
11320: PUSH
11321: LD_INT 300
11323: EQUAL
11324: IFFALSE 11439
// begin if GetFuel ( i ) < 50 then
11326: LD_VAR 0 1
11330: PPUSH
11331: CALL_OW 261
11335: PUSH
11336: LD_INT 50
11338: LESS
11339: IFFALSE 11398
// begin ComMoveXY ( i , 170 , 50 ) ;
11341: LD_VAR 0 1
11345: PPUSH
11346: LD_INT 170
11348: PPUSH
11349: LD_INT 50
11351: PPUSH
11352: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11356: LD_INT 35
11358: PPUSH
11359: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
11363: LD_VAR 0 1
11367: PPUSH
11368: LD_INT 170
11370: PPUSH
11371: LD_INT 50
11373: PPUSH
11374: CALL_OW 297
11378: PUSH
11379: LD_INT 4
11381: LESS
11382: IFFALSE 11356
// SetFuel ( i , 100 ) ;
11384: LD_VAR 0 1
11388: PPUSH
11389: LD_INT 100
11391: PPUSH
11392: CALL_OW 240
// end else
11396: GO 11439
// if not IsInArea ( i , arParkingArea ) then
11398: LD_VAR 0 1
11402: PPUSH
11403: LD_INT 20
11405: PPUSH
11406: CALL_OW 308
11410: NOT
11411: IFFALSE 11427
// ComMoveToArea ( i , arParkingArea ) else
11413: LD_VAR 0 1
11417: PPUSH
11418: LD_INT 20
11420: PPUSH
11421: CALL_OW 113
11425: GO 11439
// SetTag ( i , 301 ) ;
11427: LD_VAR 0 1
11431: PPUSH
11432: LD_INT 301
11434: PPUSH
11435: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
11439: LD_VAR 0 1
11443: PPUSH
11444: CALL_OW 110
11448: PUSH
11449: LD_INT 301
11451: EQUAL
11452: IFFALSE 11594
// begin if GetLives ( i ) < 1000 then
11454: LD_VAR 0 1
11458: PPUSH
11459: CALL_OW 256
11463: PUSH
11464: LD_INT 1000
11466: LESS
11467: IFFALSE 11571
// begin if not IsDrivenBy ( i ) then
11469: LD_VAR 0 1
11473: PPUSH
11474: CALL_OW 311
11478: NOT
11479: IFFALSE 11483
// continue ;
11481: GO 11273
// mech := IsDrivenBy ( i ) ;
11483: LD_ADDR_VAR 0 2
11487: PUSH
11488: LD_VAR 0 1
11492: PPUSH
11493: CALL_OW 311
11497: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
11498: LD_VAR 0 2
11502: PPUSH
11503: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
11507: LD_VAR 0 2
11511: PPUSH
11512: LD_VAR 0 1
11516: PPUSH
11517: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
11521: LD_INT 35
11523: PPUSH
11524: CALL_OW 67
// until GetLives ( i ) = 1000 ;
11528: LD_VAR 0 1
11532: PPUSH
11533: CALL_OW 256
11537: PUSH
11538: LD_INT 1000
11540: EQUAL
11541: IFFALSE 11521
// SetLives ( mech , 1000 ) ;
11543: LD_VAR 0 2
11547: PPUSH
11548: LD_INT 1000
11550: PPUSH
11551: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11555: LD_VAR 0 2
11559: PPUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 120
// end else
11569: GO 11594
// if IsDrivenBy ( i ) then
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 311
11580: IFFALSE 11594
// SetTag ( i , 0 ) ;
11582: LD_VAR 0 1
11586: PPUSH
11587: LD_INT 0
11589: PPUSH
11590: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11594: LD_VAR 0 1
11598: PPUSH
11599: CALL_OW 110
11603: PUSH
11604: LD_INT 300
11606: LESS
11607: IFFALSE 11772
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11609: LD_ADDR_VAR 0 3
11613: PUSH
11614: LD_INT 19
11616: PPUSH
11617: LD_INT 81
11619: PUSH
11620: LD_EXP 12
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PPUSH
11629: CALL_OW 70
11633: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11634: LD_VAR 0 1
11638: PPUSH
11639: CALL_OW 256
11643: PUSH
11644: LD_INT 650
11646: LESS
11647: IFFALSE 11672
// begin ComStop ( i ) ;
11649: LD_VAR 0 1
11653: PPUSH
11654: CALL_OW 141
// SetTag ( i , 300 ) ;
11658: LD_VAR 0 1
11662: PPUSH
11663: LD_INT 300
11665: PPUSH
11666: CALL_OW 109
// continue ;
11670: GO 11273
// end ; if enemy then
11672: LD_VAR 0 3
11676: IFFALSE 11716
// begin if not HasTask ( i ) then
11678: LD_VAR 0 1
11682: PPUSH
11683: CALL_OW 314
11687: NOT
11688: IFFALSE 11714
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: LD_VAR 0 3
11699: PPUSH
11700: LD_VAR 0 1
11704: PPUSH
11705: CALL_OW 74
11709: PPUSH
11710: CALL_OW 115
// end else
11714: GO 11772
// if enemyMobile then
11716: LD_EXP 10
11720: IFFALSE 11772
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11722: LD_ADDR_VAR 0 3
11726: PUSH
11727: LD_INT 81
11729: PUSH
11730: LD_EXP 12
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PPUSH
11739: CALL_OW 69
11743: ST_TO_ADDR
// if enemy then
11744: LD_VAR 0 3
11748: IFFALSE 11772
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11750: LD_VAR 0 1
11754: PPUSH
11755: LD_INT 130
11757: PUSH
11758: LD_INT 28
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: EMPTY
11766: LIST
11767: PPUSH
11768: CALL 56686 0 2
// end ; end ; end ;
11772: GO 11273
11774: POP
11775: POP
// end ;
11776: PPOPN 3
11778: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11779: LD_EXP 13
11783: IFFALSE 12308
11785: GO 11787
11787: DISABLE
11788: LD_INT 0
11790: PPUSH
11791: PPUSH
11792: PPUSH
11793: PPUSH
11794: PPUSH
// begin enable ;
11795: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11796: LD_ADDR_VAR 0 2
11800: PUSH
11801: LD_EXP 13
11805: PPUSH
11806: LD_INT 50
11808: PUSH
11809: EMPTY
11810: LIST
11811: PPUSH
11812: CALL_OW 72
11816: ST_TO_ADDR
// arAttackersInf := [ ] ;
11817: LD_ADDR_EXP 13
11821: PUSH
11822: EMPTY
11823: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: LD_VAR 0 2
11833: PPUSH
11834: LD_INT 25
11836: PUSH
11837: LD_INT 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PPUSH
11844: CALL_OW 72
11848: PUSH
11849: FOR_IN
11850: IFFALSE 12002
// begin if Prob ( 50 ) then
11852: LD_INT 50
11854: PPUSH
11855: CALL_OW 13
11859: IFFALSE 11875
// SetTag ( i , tMine ) else
11861: LD_VAR 0 1
11865: PPUSH
11866: LD_INT 6
11868: PPUSH
11869: CALL_OW 109
11873: GO 11877
// continue ;
11875: GO 11849
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11877: LD_ADDR_VAR 0 3
11881: PUSH
11882: LD_INT 81
11884: PUSH
11885: LD_EXP 12
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: LD_INT 120
11899: PUSH
11900: LD_INT 11
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: LD_INT 21
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: PUSH
11924: LD_INT 21
11926: PUSH
11927: LD_INT 3
11929: PUSH
11930: EMPTY
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: PPUSH
11944: CALL_OW 69
11948: PPUSH
11949: LD_VAR 0 1
11953: PPUSH
11954: CALL_OW 74
11958: ST_TO_ADDR
// if not nearest then
11959: LD_VAR 0 3
11963: NOT
11964: IFFALSE 11968
// break ;
11966: GO 12002
// SetTag ( nearest , tMined ) ;
11968: LD_VAR 0 3
11972: PPUSH
11973: LD_INT 11
11975: PPUSH
11976: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11980: LD_VAR 0 1
11984: PPUSH
11985: LD_INT 0
11987: PPUSH
11988: LD_INT 0
11990: PPUSH
11991: LD_VAR 0 3
11995: PPUSH
11996: CALL_OW 192
// end ;
12000: GO 11849
12002: POP
12003: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12004: LD_ADDR_VAR 0 2
12008: PUSH
12009: LD_VAR 0 2
12013: PPUSH
12014: LD_INT 50
12016: PUSH
12017: EMPTY
12018: LIST
12019: PPUSH
12020: CALL_OW 72
12024: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
12025: LD_INT 70
12027: PPUSH
12028: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
12032: LD_ADDR_VAR 0 2
12036: PUSH
12037: LD_VAR 0 2
12041: PPUSH
12042: LD_INT 50
12044: PUSH
12045: EMPTY
12046: LIST
12047: PPUSH
12048: CALL_OW 72
12052: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
12053: LD_ADDR_VAR 0 4
12057: PUSH
12058: LD_INT 81
12060: PUSH
12061: LD_EXP 12
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PPUSH
12070: CALL_OW 69
12074: ST_TO_ADDR
// for i in tmp do
12075: LD_ADDR_VAR 0 1
12079: PUSH
12080: LD_VAR 0 2
12084: PUSH
12085: FOR_IN
12086: IFFALSE 12299
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
12088: LD_VAR 0 1
12092: PPUSH
12093: CALL_OW 257
12097: PUSH
12098: LD_INT 1
12100: NONEQUAL
12101: IFFALSE 12118
12103: PUSH
12104: LD_VAR 0 1
12108: PPUSH
12109: CALL_OW 110
12113: PUSH
12114: LD_INT 6
12116: NONEQUAL
12117: AND
12118: IFFALSE 12146
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12120: LD_VAR 0 1
12124: PPUSH
12125: LD_VAR 0 4
12129: PPUSH
12130: LD_VAR 0 1
12134: PPUSH
12135: CALL_OW 74
12139: PPUSH
12140: CALL_OW 115
12144: GO 12297
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
12146: LD_ADDR_VAR 0 3
12150: PUSH
12151: LD_VAR 0 4
12155: PPUSH
12156: LD_INT 3
12158: PUSH
12159: LD_INT 120
12161: PUSH
12162: LD_INT 11
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 2
12175: PUSH
12176: LD_INT 21
12178: PUSH
12179: LD_INT 2
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 3
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 72
12209: PPUSH
12210: LD_VAR 0 1
12214: PPUSH
12215: CALL_OW 74
12219: ST_TO_ADDR
// if not nearest then
12220: LD_VAR 0 3
12224: NOT
12225: IFFALSE 12253
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
12227: LD_VAR 0 1
12231: PPUSH
12232: LD_VAR 0 4
12236: PPUSH
12237: LD_VAR 0 1
12241: PPUSH
12242: CALL_OW 74
12246: PPUSH
12247: CALL_OW 115
12251: GO 12297
// if not HasTask ( i ) then
12253: LD_VAR 0 1
12257: PPUSH
12258: CALL_OW 314
12262: NOT
12263: IFFALSE 12297
// begin SetTag ( nearest , tMined ) ;
12265: LD_VAR 0 3
12269: PPUSH
12270: LD_INT 11
12272: PPUSH
12273: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
12277: LD_VAR 0 1
12281: PPUSH
12282: LD_INT 0
12284: PPUSH
12285: LD_INT 0
12287: PPUSH
12288: LD_VAR 0 3
12292: PPUSH
12293: CALL_OW 132
// end ; end ;
12297: GO 12085
12299: POP
12300: POP
// until not tmp ;
12301: LD_VAR 0 2
12305: NOT
12306: IFFALSE 12025
// end ;
12308: PPOPN 5
12310: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
12311: LD_INT 22
12313: PUSH
12314: LD_EXP 12
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 32
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PPUSH
12337: CALL_OW 69
12341: IFFALSE 12420
12343: GO 12345
12345: DISABLE
12346: LD_INT 0
12348: PPUSH
// begin enable ;
12349: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
12350: LD_ADDR_VAR 0 1
12354: PUSH
12355: LD_INT 22
12357: PUSH
12358: LD_EXP 12
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 32
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 69
12385: PUSH
12386: FOR_IN
12387: IFFALSE 12418
// if GetFuel ( i ) < 3 then
12389: LD_VAR 0 1
12393: PPUSH
12394: CALL_OW 261
12398: PUSH
12399: LD_INT 3
12401: LESS
12402: IFFALSE 12416
// SetFuel ( i , 3 ) ;
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_INT 3
12411: PPUSH
12412: CALL_OW 240
12416: GO 12386
12418: POP
12419: POP
// end ;
12420: PPOPN 1
12422: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
12423: LD_INT 9
12425: PPUSH
12426: LD_INT 22
12428: PUSH
12429: LD_EXP 12
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 70
12442: IFFALSE 12505
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
// begin enable ;
12450: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 9
12458: PPUSH
12459: LD_INT 22
12461: PUSH
12462: LD_EXP 12
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 70
12475: PUSH
12476: FOR_IN
12477: IFFALSE 12503
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
12479: LD_EXP 42
12483: PPUSH
12484: LD_INT 250
12486: NEG
12487: PPUSH
12488: CALL 8382 0 2
// RemoveUnit ( i ) ;
12492: LD_VAR 0 1
12496: PPUSH
12497: CALL_OW 64
// end ;
12501: GO 12476
12503: POP
12504: POP
// end ; end_of_file
12505: PPOPN 1
12507: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
12508: LD_INT 0
12510: PPUSH
12511: PPUSH
// convoys := [ ] ;
12512: LD_ADDR_EXP 40
12516: PUSH
12517: EMPTY
12518: ST_TO_ADDR
// convoySide := side ;
12519: LD_ADDR_EXP 42
12523: PUSH
12524: LD_VAR 0 1
12528: ST_TO_ADDR
// convoyWave := 1 ;
12529: LD_ADDR_EXP 41
12533: PUSH
12534: LD_INT 1
12536: ST_TO_ADDR
// for i := 1 to 8 do
12537: LD_ADDR_VAR 0 3
12541: PUSH
12542: DOUBLE
12543: LD_INT 1
12545: DEC
12546: ST_TO_ADDR
12547: LD_INT 8
12549: PUSH
12550: FOR_TO
12551: IFFALSE 12581
// if multi_sides [ i ] then
12553: LD_EXP 15
12557: PUSH
12558: LD_VAR 0 3
12562: ARRAY
12563: IFFALSE 12579
// ChangeSideFog ( i , side ) ;
12565: LD_VAR 0 3
12569: PPUSH
12570: LD_VAR 0 1
12574: PPUSH
12575: CALL_OW 343
12579: GO 12550
12581: POP
12582: POP
// end ;
12583: LD_VAR 0 2
12587: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12588: LD_EXP 2
12592: IFFALSE 12627
12594: GO 12596
12596: DISABLE
12597: LD_INT 0
12599: PPUSH
12600: PPUSH
// begin enable ;
12601: ENABLE
// blockThread := true ;
12602: LD_ADDR_EXP 6
12606: PUSH
12607: LD_INT 1
12609: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12610: LD_EXP 41
12614: PPUSH
12615: CALL 12630 0 1
// blockThread := false ;
12619: LD_ADDR_EXP 6
12623: PUSH
12624: LD_INT 0
12626: ST_TO_ADDR
// end ;
12627: PPOPN 2
12629: END
// function SendConvoy ( wave ) ; var i , v , skill , un , veh , tmp , path ; begin
12630: LD_INT 0
12632: PPUSH
12633: PPUSH
12634: PPUSH
12635: PPUSH
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// convoyWave := Inc ( wave ) ;
12640: LD_ADDR_EXP 41
12644: PUSH
12645: LD_VAR 0 1
12649: PPUSH
12650: CALL 55293 0 1
12654: ST_TO_ADDR
// v := convoyWave div 12 ;
12655: LD_ADDR_VAR 0 4
12659: PUSH
12660: LD_EXP 41
12664: PUSH
12665: LD_INT 12
12667: DIV
12668: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] + v ;
12669: LD_ADDR_VAR 0 5
12673: PUSH
12674: LD_INT 5
12676: PUSH
12677: LD_INT 4
12679: PUSH
12680: LD_INT 3
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: LIST
12687: PUSH
12688: LD_OWVAR 67
12692: ARRAY
12693: PUSH
12694: LD_VAR 0 4
12698: PLUS
12699: ST_TO_ADDR
// if skill > 10 then
12700: LD_VAR 0 5
12704: PUSH
12705: LD_INT 10
12707: GREATER
12708: IFFALSE 12718
// skill := 10 ;
12710: LD_ADDR_VAR 0 5
12714: PUSH
12715: LD_INT 10
12717: ST_TO_ADDR
// tmp := [ ] ;
12718: LD_ADDR_VAR 0 8
12722: PUSH
12723: EMPTY
12724: ST_TO_ADDR
// if wave mod 5 = 0 then
12725: LD_VAR 0 1
12729: PUSH
12730: LD_INT 5
12732: MOD
12733: PUSH
12734: LD_INT 0
12736: EQUAL
12737: IFFALSE 12983
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12739: LD_ADDR_VAR 0 9
12743: PUSH
12744: LD_INT 16
12746: PUSH
12747: LD_INT 21
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 36
12756: PUSH
12757: LD_INT 45
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 48
12766: PUSH
12767: LD_INT 58
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 59
12776: PUSH
12777: LD_INT 88
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 76
12786: PUSH
12787: LD_INT 106
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 93
12796: PUSH
12797: LD_INT 150
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 92
12806: PUSH
12807: LD_INT 177
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: ST_TO_ADDR
// for i := 1 to 4 do
12823: LD_ADDR_VAR 0 3
12827: PUSH
12828: DOUBLE
12829: LD_INT 1
12831: DEC
12832: ST_TO_ADDR
12833: LD_INT 4
12835: PUSH
12836: FOR_TO
12837: IFFALSE 12979
// begin uc_side := convoySide ;
12839: LD_ADDR_OWVAR 20
12843: PUSH
12844: LD_EXP 42
12848: ST_TO_ADDR
// uc_nation := nation_russian ;
12849: LD_ADDR_OWVAR 21
12853: PUSH
12854: LD_INT 3
12856: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12857: LD_INT 0
12859: PPUSH
12860: LD_INT 1
12862: PPUSH
12863: LD_INT 4
12865: PPUSH
12866: CALL_OW 12
12870: PPUSH
12871: LD_VAR 0 5
12875: PPUSH
12876: CALL_OW 380
// un := CreateHuman ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: CALL_OW 44
12889: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12890: LD_VAR 0 6
12894: PPUSH
12895: LD_INT 3
12897: PPUSH
12898: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12902: LD_VAR 0 6
12906: PPUSH
12907: LD_INT 10
12909: PPUSH
12910: LD_INT 0
12912: PPUSH
12913: CALL_OW 49
// SetLives ( un , rand ( 400 , 1000 ) ) ;
12917: LD_VAR 0 6
12921: PPUSH
12922: LD_INT 400
12924: PPUSH
12925: LD_INT 1000
12927: PPUSH
12928: CALL_OW 12
12932: PPUSH
12933: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12937: LD_ADDR_EXP 40
12941: PUSH
12942: LD_EXP 40
12946: PPUSH
12947: LD_VAR 0 6
12951: PPUSH
12952: CALL 53920 0 2
12956: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12957: LD_ADDR_VAR 0 8
12961: PUSH
12962: LD_VAR 0 8
12966: PPUSH
12967: LD_VAR 0 6
12971: PPUSH
12972: CALL 53920 0 2
12976: ST_TO_ADDR
// end ;
12977: GO 12836
12979: POP
12980: POP
// end else
12981: GO 14164
// if wave mod 3 = 0 then
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 3
12990: MOD
12991: PUSH
12992: LD_INT 0
12994: EQUAL
12995: IFFALSE 13485
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12997: LD_ADDR_VAR 0 9
13001: PUSH
13002: LD_INT 133
13004: PUSH
13005: LD_INT 15
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 125
13014: PUSH
13015: LD_INT 34
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 109
13024: PUSH
13025: LD_INT 55
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 99
13034: PUSH
13035: LD_INT 64
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 133
13044: PUSH
13045: LD_INT 102
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 143
13054: PUSH
13055: LD_INT 136
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 127
13064: PUSH
13065: LD_INT 154
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 92
13074: PUSH
13075: LD_INT 152
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: PUSH
13082: LD_INT 93
13084: PUSH
13085: LD_INT 177
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: ST_TO_ADDR
// for i := 1 to 4 do
13103: LD_ADDR_VAR 0 3
13107: PUSH
13108: DOUBLE
13109: LD_INT 1
13111: DEC
13112: ST_TO_ADDR
13113: LD_INT 4
13115: PUSH
13116: FOR_TO
13117: IFFALSE 13481
// begin uc_side := convoySide ;
13119: LD_ADDR_OWVAR 20
13123: PUSH
13124: LD_EXP 42
13128: ST_TO_ADDR
// uc_nation := nation_russian ;
13129: LD_ADDR_OWVAR 21
13133: PUSH
13134: LD_INT 3
13136: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 1
13142: PPUSH
13143: LD_INT 4
13145: PPUSH
13146: CALL_OW 12
13150: PPUSH
13151: LD_VAR 0 5
13155: PPUSH
13156: CALL_OW 380
// un := CreateHuman ;
13160: LD_ADDR_VAR 0 6
13164: PUSH
13165: CALL_OW 44
13169: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
13170: LD_INT 21
13172: PUSH
13173: LD_INT 22
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: PUSH
13180: LD_INT 1
13182: PPUSH
13183: LD_INT 2
13185: PPUSH
13186: CALL_OW 12
13190: ARRAY
13191: PPUSH
13192: LD_INT 1
13194: PPUSH
13195: LD_INT 1
13197: PPUSH
13198: LD_INT 42
13200: PUSH
13201: LD_INT 43
13203: PUSH
13204: LD_INT 51
13206: PUSH
13207: LD_INT 44
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 1
13218: PPUSH
13219: LD_INT 4
13221: PPUSH
13222: CALL_OW 12
13226: ARRAY
13227: PPUSH
13228: LD_INT 60
13230: PPUSH
13231: LD_INT 90
13233: PPUSH
13234: CALL_OW 12
13238: PPUSH
13239: CALL 20740 0 5
// veh := CreateVehicle ;
13243: LD_ADDR_VAR 0 7
13247: PUSH
13248: CALL_OW 45
13252: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13253: LD_VAR 0 7
13257: PPUSH
13258: LD_INT 3
13260: PPUSH
13261: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13265: LD_VAR 0 7
13269: PPUSH
13270: LD_INT 400
13272: PPUSH
13273: LD_INT 1000
13275: PPUSH
13276: CALL_OW 12
13280: PPUSH
13281: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13285: LD_VAR 0 7
13289: PPUSH
13290: CALL_OW 264
13294: PUSH
13295: LD_INT 51
13297: EQUAL
13298: IFFALSE 13346
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
13300: LD_VAR 0 7
13304: PPUSH
13305: LD_INT 1
13307: PUSH
13308: LD_INT 2
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 1
13317: PPUSH
13318: LD_INT 2
13320: PPUSH
13321: CALL_OW 12
13325: ARRAY
13326: PPUSH
13327: LD_INT 10
13329: PUSH
13330: LD_INT 1
13332: PPUSH
13333: LD_INT 10
13335: PPUSH
13336: CALL_OW 12
13340: MUL
13341: PPUSH
13342: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13346: LD_INT 10
13348: PPUSH
13349: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13353: LD_VAR 0 7
13357: PPUSH
13358: LD_INT 7
13360: PPUSH
13361: LD_INT 0
13363: PPUSH
13364: CALL_OW 49
13368: IFFALSE 13346
// PlaceHumanInUnit ( un , veh ) ;
13370: LD_VAR 0 6
13374: PPUSH
13375: LD_VAR 0 7
13379: PPUSH
13380: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13384: LD_ADDR_EXP 40
13388: PUSH
13389: LD_EXP 40
13393: PPUSH
13394: LD_VAR 0 6
13398: PPUSH
13399: CALL 53920 0 2
13403: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13404: LD_ADDR_VAR 0 8
13408: PUSH
13409: LD_VAR 0 8
13413: PPUSH
13414: LD_VAR 0 6
13418: PPUSH
13419: CALL 53920 0 2
13423: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13424: LD_ADDR_EXP 40
13428: PUSH
13429: LD_EXP 40
13433: PPUSH
13434: LD_VAR 0 7
13438: PPUSH
13439: CALL 53920 0 2
13443: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13444: LD_ADDR_VAR 0 8
13448: PUSH
13449: LD_VAR 0 8
13453: PPUSH
13454: LD_VAR 0 7
13458: PPUSH
13459: CALL 53920 0 2
13463: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13464: LD_VAR 0 6
13468: PPUSH
13469: LD_INT 133
13471: PPUSH
13472: LD_INT 15
13474: PPUSH
13475: CALL_OW 111
// end ;
13479: GO 13116
13481: POP
13482: POP
// end else
13483: GO 14164
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
13485: LD_ADDR_VAR 0 9
13489: PUSH
13490: LD_INT 133
13492: PUSH
13493: LD_INT 15
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 125
13502: PUSH
13503: LD_INT 34
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 109
13512: PUSH
13513: LD_INT 55
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 99
13522: PUSH
13523: LD_INT 64
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 88
13532: PUSH
13533: LD_INT 70
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 74
13542: PUSH
13543: LD_INT 78
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 70
13552: PUSH
13553: LD_INT 91
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 80
13562: PUSH
13563: LD_INT 113
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 89
13572: PUSH
13573: LD_INT 133
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 91
13582: PUSH
13583: LD_INT 159
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 93
13592: PUSH
13593: LD_INT 177
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: ST_TO_ADDR
// for i := 1 to 2 do
13613: LD_ADDR_VAR 0 3
13617: PUSH
13618: DOUBLE
13619: LD_INT 1
13621: DEC
13622: ST_TO_ADDR
13623: LD_INT 2
13625: PUSH
13626: FOR_TO
13627: IFFALSE 13972
// begin uc_side := convoySide ;
13629: LD_ADDR_OWVAR 20
13633: PUSH
13634: LD_EXP 42
13638: ST_TO_ADDR
// uc_nation := nation_russian ;
13639: LD_ADDR_OWVAR 21
13643: PUSH
13644: LD_INT 3
13646: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13647: LD_INT 0
13649: PPUSH
13650: LD_INT 1
13652: PPUSH
13653: LD_INT 4
13655: PPUSH
13656: CALL_OW 12
13660: PPUSH
13661: LD_VAR 0 5
13665: PPUSH
13666: CALL_OW 380
// un := CreateHuman ;
13670: LD_ADDR_VAR 0 6
13674: PUSH
13675: CALL_OW 44
13679: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13680: LD_INT 21
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 1
13692: PPUSH
13693: LD_INT 2
13695: PPUSH
13696: CALL_OW 12
13700: ARRAY
13701: PPUSH
13702: LD_INT 1
13704: PPUSH
13705: LD_INT 1
13707: PPUSH
13708: LD_INT 42
13710: PUSH
13711: LD_INT 43
13713: PUSH
13714: LD_INT 51
13716: PUSH
13717: LD_INT 44
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 1
13728: PPUSH
13729: LD_INT 4
13731: PPUSH
13732: CALL_OW 12
13736: ARRAY
13737: PPUSH
13738: LD_INT 70
13740: PPUSH
13741: LD_INT 90
13743: PPUSH
13744: CALL_OW 12
13748: PPUSH
13749: CALL 20740 0 5
// veh := CreateVehicle ;
13753: LD_ADDR_VAR 0 7
13757: PUSH
13758: CALL_OW 45
13762: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13763: LD_VAR 0 7
13767: PPUSH
13768: LD_INT 3
13770: PPUSH
13771: CALL_OW 233
// SetLives ( veh , rand ( 400 , 1000 ) ) ;
13775: LD_VAR 0 7
13779: PPUSH
13780: LD_INT 400
13782: PPUSH
13783: LD_INT 1000
13785: PPUSH
13786: CALL_OW 12
13790: PPUSH
13791: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13795: LD_VAR 0 7
13799: PPUSH
13800: CALL_OW 264
13804: PUSH
13805: LD_INT 51
13807: EQUAL
13808: IFFALSE 13837
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13810: LD_VAR 0 7
13814: PPUSH
13815: LD_INT 1
13817: PPUSH
13818: LD_INT 10
13820: PUSH
13821: LD_INT 1
13823: PPUSH
13824: LD_INT 10
13826: PPUSH
13827: CALL_OW 12
13831: MUL
13832: PPUSH
13833: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13837: LD_INT 10
13839: PPUSH
13840: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13844: LD_VAR 0 7
13848: PPUSH
13849: LD_INT 7
13851: PPUSH
13852: LD_INT 0
13854: PPUSH
13855: CALL_OW 49
13859: IFFALSE 13837
// PlaceHumanInUnit ( un , veh ) ;
13861: LD_VAR 0 6
13865: PPUSH
13866: LD_VAR 0 7
13870: PPUSH
13871: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13875: LD_ADDR_EXP 40
13879: PUSH
13880: LD_EXP 40
13884: PPUSH
13885: LD_VAR 0 6
13889: PPUSH
13890: CALL 53920 0 2
13894: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13895: LD_ADDR_VAR 0 8
13899: PUSH
13900: LD_VAR 0 8
13904: PPUSH
13905: LD_VAR 0 6
13909: PPUSH
13910: CALL 53920 0 2
13914: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13915: LD_ADDR_EXP 40
13919: PUSH
13920: LD_EXP 40
13924: PPUSH
13925: LD_VAR 0 7
13929: PPUSH
13930: CALL 53920 0 2
13934: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13935: LD_ADDR_VAR 0 8
13939: PUSH
13940: LD_VAR 0 8
13944: PPUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: CALL 53920 0 2
13954: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13955: LD_VAR 0 6
13959: PPUSH
13960: LD_INT 133
13962: PPUSH
13963: LD_INT 15
13965: PPUSH
13966: CALL_OW 111
// end ;
13970: GO 13626
13972: POP
13973: POP
// for i := 1 to rand ( 3 , 5 ) do
13974: LD_ADDR_VAR 0 3
13978: PUSH
13979: DOUBLE
13980: LD_INT 1
13982: DEC
13983: ST_TO_ADDR
13984: LD_INT 3
13986: PPUSH
13987: LD_INT 5
13989: PPUSH
13990: CALL_OW 12
13994: PUSH
13995: FOR_TO
13996: IFFALSE 14162
// begin uc_side := convoySide ;
13998: LD_ADDR_OWVAR 20
14002: PUSH
14003: LD_EXP 42
14007: ST_TO_ADDR
// uc_nation := nation_russian ;
14008: LD_ADDR_OWVAR 21
14012: PUSH
14013: LD_INT 3
14015: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
14016: LD_INT 0
14018: PPUSH
14019: LD_INT 1
14021: PPUSH
14022: LD_INT 4
14024: PPUSH
14025: CALL_OW 12
14029: PPUSH
14030: LD_VAR 0 5
14034: PPUSH
14035: CALL_OW 380
// un := CreateHuman ;
14039: LD_ADDR_VAR 0 6
14043: PUSH
14044: CALL_OW 44
14048: ST_TO_ADDR
// SetDir ( un , 3 ) ;
14049: LD_VAR 0 6
14053: PPUSH
14054: LD_INT 3
14056: PPUSH
14057: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
14061: LD_INT 35
14063: PPUSH
14064: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
14068: LD_VAR 0 6
14072: PPUSH
14073: LD_INT 7
14075: PPUSH
14076: LD_INT 0
14078: PPUSH
14079: CALL_OW 49
14083: IFFALSE 14061
// SetLives ( un , rand ( 400 , 1000 ) ) ;
14085: LD_VAR 0 6
14089: PPUSH
14090: LD_INT 400
14092: PPUSH
14093: LD_INT 1000
14095: PPUSH
14096: CALL_OW 12
14100: PPUSH
14101: CALL_OW 234
// convoys := Join ( convoys , un ) ;
14105: LD_ADDR_EXP 40
14109: PUSH
14110: LD_EXP 40
14114: PPUSH
14115: LD_VAR 0 6
14119: PPUSH
14120: CALL 53920 0 2
14124: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
14125: LD_ADDR_VAR 0 8
14129: PUSH
14130: LD_VAR 0 8
14134: PPUSH
14135: LD_VAR 0 6
14139: PPUSH
14140: CALL 53920 0 2
14144: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
14145: LD_VAR 0 6
14149: PPUSH
14150: LD_INT 133
14152: PPUSH
14153: LD_INT 15
14155: PPUSH
14156: CALL_OW 111
// end ;
14160: GO 13995
14162: POP
14163: POP
// end ; if not tmp then
14164: LD_VAR 0 8
14168: NOT
14169: IFFALSE 14173
// exit ;
14171: GO 14481
// repeat wait ( 0 0$1 ) ;
14173: LD_INT 35
14175: PPUSH
14176: CALL_OW 67
// for i in tmp do
14180: LD_ADDR_VAR 0 3
14184: PUSH
14185: LD_VAR 0 8
14189: PUSH
14190: FOR_IN
14191: IFFALSE 14472
// begin if IsDead ( i ) then
14193: LD_VAR 0 3
14197: PPUSH
14198: CALL_OW 301
14202: IFFALSE 14222
// tmp := tmp diff i else
14204: LD_ADDR_VAR 0 8
14208: PUSH
14209: LD_VAR 0 8
14213: PUSH
14214: LD_VAR 0 3
14218: DIFF
14219: ST_TO_ADDR
14220: GO 14470
// if IsInArea ( i , southEndArea ) then
14222: LD_VAR 0 3
14226: PPUSH
14227: LD_INT 9
14229: PPUSH
14230: CALL_OW 308
14234: IFFALSE 14387
// begin tmp := tmp diff i ;
14236: LD_ADDR_VAR 0 8
14240: PUSH
14241: LD_VAR 0 8
14245: PUSH
14246: LD_VAR 0 3
14250: DIFF
14251: ST_TO_ADDR
// convoys := convoys diff i ;
14252: LD_ADDR_EXP 40
14256: PUSH
14257: LD_EXP 40
14261: PUSH
14262: LD_VAR 0 3
14266: DIFF
14267: ST_TO_ADDR
// if GetType ( i ) = unit_human then
14268: LD_VAR 0 3
14272: PPUSH
14273: CALL_OW 247
14277: PUSH
14278: LD_INT 1
14280: EQUAL
14281: IFFALSE 14302
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
14283: LD_EXP 42
14287: PPUSH
14288: LD_INT 7
14290: PPUSH
14291: CALL 8548 0 1
14295: PPUSH
14296: CALL 8382 0 2
14300: GO 14361
// begin tmp := tmp diff IsInUnit ( i ) ;
14302: LD_ADDR_VAR 0 8
14306: PUSH
14307: LD_VAR 0 8
14311: PUSH
14312: LD_VAR 0 3
14316: PPUSH
14317: CALL_OW 310
14321: DIFF
14322: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
14323: LD_ADDR_EXP 40
14327: PUSH
14328: LD_EXP 40
14332: PUSH
14333: LD_VAR 0 3
14337: PPUSH
14338: CALL_OW 310
14342: DIFF
14343: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
14344: LD_EXP 42
14348: PPUSH
14349: LD_INT 8
14351: PPUSH
14352: CALL 8548 0 1
14356: PPUSH
14357: CALL 8382 0 2
// end ; RemoveUnit ( i ) ;
14361: LD_VAR 0 3
14365: PPUSH
14366: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
14370: LD_ADDR_EXP 5
14374: PUSH
14375: LD_EXP 5
14379: PPUSH
14380: CALL 55293 0 1
14384: ST_TO_ADDR
// end else
14385: GO 14470
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
14387: LD_VAR 0 3
14391: PPUSH
14392: CALL_OW 247
14396: PUSH
14397: LD_INT 2
14399: EQUAL
14400: IFFALSE 14417
14402: PUSH
14403: LD_VAR 0 3
14407: PPUSH
14408: CALL_OW 261
14412: PUSH
14413: LD_INT 0
14415: EQUAL
14416: AND
14417: IFFALSE 14453
// begin tmp := tmp diff i ;
14419: LD_ADDR_VAR 0 8
14423: PUSH
14424: LD_VAR 0 8
14428: PUSH
14429: LD_VAR 0 3
14433: DIFF
14434: ST_TO_ADDR
// convoys := convoys diff i ;
14435: LD_ADDR_EXP 40
14439: PUSH
14440: LD_EXP 40
14444: PUSH
14445: LD_VAR 0 3
14449: DIFF
14450: ST_TO_ADDR
// end else
14451: GO 14470
// MoveTo ( i , path , southEndArea ) ;
14453: LD_VAR 0 3
14457: PPUSH
14458: LD_VAR 0 9
14462: PPUSH
14463: LD_INT 9
14465: PPUSH
14466: CALL 14486 0 3
// end ;
14470: GO 14190
14472: POP
14473: POP
// until not tmp ;
14474: LD_VAR 0 8
14478: NOT
14479: IFFALSE 14173
// end ;
14481: LD_VAR 0 2
14485: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
14486: LD_INT 0
14488: PPUSH
14489: PPUSH
14490: PPUSH
14491: PPUSH
14492: PPUSH
14493: PPUSH
// if not unit then
14494: LD_VAR 0 1
14498: NOT
14499: IFFALSE 14503
// exit ;
14501: GO 15279
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
14503: LD_ADDR_VAR 0 9
14507: PUSH
14508: LD_INT 29
14510: PUSH
14511: LD_INT 91
14513: PUSH
14514: LD_INT 49
14516: PUSH
14517: LD_INT 51
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: ST_TO_ADDR
// if IsOk ( unit ) then
14526: LD_VAR 0 1
14530: PPUSH
14531: CALL_OW 302
14535: IFFALSE 15279
// begin tag := GetTag ( unit ) + 1 ;
14537: LD_ADDR_VAR 0 6
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 110
14551: PUSH
14552: LD_INT 1
14554: PLUS
14555: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
14556: LD_ADDR_VAR 0 5
14560: PUSH
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 250
14570: PPUSH
14571: LD_VAR 0 1
14575: PPUSH
14576: CALL_OW 251
14580: PPUSH
14581: LD_INT 3
14583: PPUSH
14584: CALL 56428 0 3
14588: ST_TO_ADDR
// type := GetType ( unit ) ;
14589: LD_ADDR_VAR 0 7
14593: PUSH
14594: LD_VAR 0 1
14598: PPUSH
14599: CALL_OW 247
14603: ST_TO_ADDR
// if type = unit_human then
14604: LD_VAR 0 7
14608: PUSH
14609: LD_INT 1
14611: EQUAL
14612: IFFALSE 14704
// begin vehicle := IsInUnit ( unit ) ;
14614: LD_ADDR_VAR 0 8
14618: PUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: CALL_OW 310
14628: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14629: LD_VAR 0 8
14633: IFFALSE 14650
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: CALL_OW 261
14645: PUSH
14646: LD_INT 0
14648: EQUAL
14649: AND
14650: IFFALSE 14702
// begin ComExitVehicle ( unit ) ;
14652: LD_VAR 0 1
14656: PPUSH
14657: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14661: LD_VAR 0 1
14665: PPUSH
14666: LD_VAR 0 2
14670: PUSH
14671: LD_VAR 0 6
14675: ARRAY
14676: PUSH
14677: LD_INT 1
14679: ARRAY
14680: PPUSH
14681: LD_VAR 0 2
14685: PUSH
14686: LD_VAR 0 6
14690: ARRAY
14691: PUSH
14692: LD_INT 2
14694: ARRAY
14695: PPUSH
14696: CALL_OW 171
// exit ;
14700: GO 15279
// end ; end else
14702: GO 14779
// begin if GetFuel ( unit ) = 0 then
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 261
14713: PUSH
14714: LD_INT 0
14716: EQUAL
14717: IFFALSE 14779
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14719: LD_VAR 0 1
14723: PPUSH
14724: CALL_OW 311
14728: PPUSH
14729: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 311
14742: PPUSH
14743: LD_VAR 0 2
14747: PUSH
14748: LD_VAR 0 6
14752: ARRAY
14753: PUSH
14754: LD_INT 1
14756: ARRAY
14757: PPUSH
14758: LD_VAR 0 2
14762: PUSH
14763: LD_VAR 0 6
14767: ARRAY
14768: PUSH
14769: LD_INT 2
14771: ARRAY
14772: PPUSH
14773: CALL_OW 171
// exit ;
14777: GO 15279
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14779: LD_VAR 0 7
14783: PUSH
14784: LD_INT 2
14786: EQUAL
14787: IFFALSE 14804
14789: PUSH
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL_OW 264
14799: PUSH
14800: LD_INT 51
14802: EQUAL
14803: AND
14804: IFFALSE 14820
14806: PUSH
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_INT 29
14814: PPUSH
14815: CALL_OW 308
14819: AND
14820: IFFALSE 14852
14822: PUSH
14823: LD_VAR 0 1
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: CALL_OW 289
14835: IFTRUE 14851
14837: PUSH
14838: LD_VAR 0 1
14842: PPUSH
14843: LD_INT 2
14845: PPUSH
14846: CALL_OW 289
14850: OR
14851: AND
14852: IFFALSE 14900
// begin goToUnload := Join ( goToUnload , unit ) ;
14854: LD_ADDR_EXP 8
14858: PUSH
14859: LD_EXP 8
14863: PPUSH
14864: LD_VAR 0 1
14868: PPUSH
14869: CALL 53920 0 2
14873: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14874: LD_VAR 0 1
14878: PPUSH
14879: LD_INT 113
14881: PPUSH
14882: LD_INT 117
14884: PPUSH
14885: CALL_OW 111
// AddComUnload ( unit ) ;
14889: LD_VAR 0 1
14893: PPUSH
14894: CALL_OW 219
// exit ;
14898: GO 15279
// end ; if unit in goToUnload then
14900: LD_VAR 0 1
14904: PUSH
14905: LD_EXP 8
14909: IN
14910: IFFALSE 14988
// begin if GetCargo ( unit , mat_cans ) = 0 and GetCargo ( unit , mat_oil ) = 0 then
14912: LD_VAR 0 1
14916: PPUSH
14917: LD_INT 1
14919: PPUSH
14920: CALL_OW 289
14924: PUSH
14925: LD_INT 0
14927: EQUAL
14928: IFFALSE 14948
14930: PUSH
14931: LD_VAR 0 1
14935: PPUSH
14936: LD_INT 2
14938: PPUSH
14939: CALL_OW 289
14943: PUSH
14944: LD_INT 0
14946: EQUAL
14947: AND
14948: IFFALSE 14986
// begin SetTag ( unit , tag + 2 ) ;
14950: LD_VAR 0 1
14954: PPUSH
14955: LD_VAR 0 6
14959: PUSH
14960: LD_INT 2
14962: PLUS
14963: PPUSH
14964: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14968: LD_ADDR_EXP 8
14972: PUSH
14973: LD_EXP 8
14977: PUSH
14978: LD_VAR 0 1
14982: DIFF
14983: ST_TO_ADDR
// end else
14984: GO 14988
// exit ;
14986: GO 15279
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14988: LD_VAR 0 7
14992: PUSH
14993: LD_INT 2
14995: EQUAL
14996: IFFALSE 15008
14998: PUSH
14999: LD_VAR 0 5
15003: PUSH
15004: LD_INT 3
15006: GREATER
15007: AND
15008: IFFALSE 15028
15010: PUSH
15011: LD_VAR 0 1
15015: PPUSH
15016: CALL_OW 264
15020: PUSH
15021: LD_VAR 0 9
15025: IN
15026: NOT
15027: AND
15028: IFFALSE 15067
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
15030: LD_VAR 0 1
15034: PPUSH
15035: LD_VAR 0 5
15039: PUSH
15040: LD_INT 1
15042: ARRAY
15043: PUSH
15044: LD_INT 1
15046: ARRAY
15047: PPUSH
15048: LD_VAR 0 5
15052: PUSH
15053: LD_INT 1
15055: ARRAY
15056: PUSH
15057: LD_INT 2
15059: ARRAY
15060: PPUSH
15061: CALL_OW 116
15065: GO 15279
// if path > tag then
15067: LD_VAR 0 2
15071: PUSH
15072: LD_VAR 0 6
15076: GREATER
15077: IFFALSE 15248
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
15079: LD_VAR 0 1
15083: PPUSH
15084: LD_VAR 0 2
15088: PUSH
15089: LD_VAR 0 6
15093: ARRAY
15094: PUSH
15095: LD_INT 1
15097: ARRAY
15098: PPUSH
15099: LD_VAR 0 2
15103: PUSH
15104: LD_VAR 0 6
15108: ARRAY
15109: PUSH
15110: LD_INT 2
15112: ARRAY
15113: PPUSH
15114: CALL_OW 297
15118: PUSH
15119: LD_INT 6
15121: GREATER
15122: IFFALSE 15232
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
15124: LD_VAR 0 1
15128: PPUSH
15129: CALL_OW 257
15133: PUSH
15134: LD_INT 2
15136: PUSH
15137: LD_INT 3
15139: PUSH
15140: LD_INT 4
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: LIST
15147: IN
15148: IFFALSE 15191
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_VAR 0 2
15159: PUSH
15160: LD_VAR 0 6
15164: ARRAY
15165: PUSH
15166: LD_INT 1
15168: ARRAY
15169: PPUSH
15170: LD_VAR 0 2
15174: PUSH
15175: LD_VAR 0 6
15179: ARRAY
15180: PUSH
15181: LD_INT 2
15183: ARRAY
15184: PPUSH
15185: CALL_OW 111
15189: GO 15230
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
15191: LD_VAR 0 1
15195: PPUSH
15196: LD_VAR 0 2
15200: PUSH
15201: LD_VAR 0 6
15205: ARRAY
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: PPUSH
15211: LD_VAR 0 2
15215: PUSH
15216: LD_VAR 0 6
15220: ARRAY
15221: PUSH
15222: LD_INT 2
15224: ARRAY
15225: PPUSH
15226: CALL_OW 114
15230: GO 15246
// SetTag ( unit , tag ) ;
15232: LD_VAR 0 1
15236: PPUSH
15237: LD_VAR 0 6
15241: PPUSH
15242: CALL_OW 109
// end else
15246: GO 15279
// if not IsInArea ( unit , area ) then
15248: LD_VAR 0 1
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: CALL_OW 308
15262: NOT
15263: IFFALSE 15279
// ComMoveToArea ( unit , area ) ;
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_VAR 0 3
15274: PPUSH
15275: CALL_OW 113
// end ; end ; end_of_file
15279: LD_VAR 0 4
15283: RET
// every 0 0$20 trigger game do
15284: LD_EXP 2
15288: IFFALSE 15329
15290: GO 15292
15292: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: LIST
15306: PPUSH
15307: LD_EXP 29
15311: PUSH
15312: LD_INT 2
15314: ARRAY
15315: PPUSH
15316: LD_EXP 29
15320: PUSH
15321: LD_INT 1
15323: ARRAY
15324: PPUSH
15325: CALL 15330 0 3
15329: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
15330: LD_INT 0
15332: PPUSH
15333: PPUSH
15334: PPUSH
// if not areas then
15335: LD_VAR 0 1
15339: NOT
15340: IFFALSE 15344
// exit ;
15342: GO 15552
// x := 5 ;
15344: LD_ADDR_VAR 0 6
15348: PUSH
15349: LD_INT 5
15351: ST_TO_ADDR
// repeat wait ( time ) ;
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 67
// for i in areas do
15361: LD_ADDR_VAR 0 5
15365: PUSH
15366: LD_VAR 0 1
15370: PUSH
15371: FOR_IN
15372: IFFALSE 15461
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
15374: LD_VAR 0 5
15378: PPUSH
15379: LD_INT 1
15381: PPUSH
15382: CALL_OW 287
15386: PUSH
15387: LD_INT 15
15389: PUSH
15390: LD_INT 12
15392: PUSH
15393: LD_INT 10
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: PUSH
15401: LD_OWVAR 67
15405: ARRAY
15406: LESS
15407: IFFALSE 15459
// begin wait ( 0 0$10 * Difficulty ) ;
15409: LD_INT 350
15411: PUSH
15412: LD_OWVAR 67
15416: MUL
15417: PPUSH
15418: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
15422: LD_VAR 0 6
15426: PPUSH
15427: LD_VAR 0 5
15431: PPUSH
15432: LD_INT 1
15434: PPUSH
15435: CALL_OW 55
// amount := amount - ( x * 10 ) ;
15439: LD_ADDR_VAR 0 3
15443: PUSH
15444: LD_VAR 0 3
15448: PUSH
15449: LD_VAR 0 6
15453: PUSH
15454: LD_INT 10
15456: MUL
15457: MINUS
15458: ST_TO_ADDR
// end ; end ;
15459: GO 15371
15461: POP
15462: POP
// time := time + ( 0 0$5 * Difficulty ) ;
15463: LD_ADDR_VAR 0 2
15467: PUSH
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 175
15475: PUSH
15476: LD_OWVAR 67
15480: MUL
15481: PLUS
15482: ST_TO_ADDR
// x := x - 1 ;
15483: LD_ADDR_VAR 0 6
15487: PUSH
15488: LD_VAR 0 6
15492: PUSH
15493: LD_INT 1
15495: MINUS
15496: ST_TO_ADDR
// if x = 0 then
15497: LD_VAR 0 6
15501: PUSH
15502: LD_INT 0
15504: EQUAL
15505: IFFALSE 15515
// x := 5 ;
15507: LD_ADDR_VAR 0 6
15511: PUSH
15512: LD_INT 5
15514: ST_TO_ADDR
// if time > 2 2$00 then
15515: LD_VAR 0 2
15519: PUSH
15520: LD_INT 4200
15522: GREATER
15523: IFFALSE 15533
// time := 0 0$40 ;
15525: LD_ADDR_VAR 0 2
15529: PUSH
15530: LD_INT 1400
15532: ST_TO_ADDR
// until not game or amount <= 0 ;
15533: LD_EXP 2
15537: NOT
15538: IFTRUE 15550
15540: PUSH
15541: LD_VAR 0 3
15545: PUSH
15546: LD_INT 0
15548: LESSEQUAL
15549: OR
15550: IFFALSE 15352
// end ; end_of_file
15552: LD_VAR 0 4
15556: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
15557: LD_VAR 0 1
15561: PUSH
15562: LD_INT 200
15564: DOUBLE
15565: GREATEREQUAL
15566: IFFALSE 15574
15568: LD_INT 299
15570: DOUBLE
15571: LESSEQUAL
15572: IFTRUE 15576
15574: GO 15608
15576: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
15577: LD_VAR 0 1
15581: PPUSH
15582: LD_VAR 0 2
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_VAR 0 4
15596: PPUSH
15597: LD_VAR 0 5
15601: PPUSH
15602: CALL 60024 0 5
15606: GO 15685
15608: LD_INT 300
15610: DOUBLE
15611: GREATEREQUAL
15612: IFFALSE 15620
15614: LD_INT 399
15616: DOUBLE
15617: LESSEQUAL
15618: IFTRUE 15622
15620: GO 15684
15622: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15623: LD_VAR 0 1
15627: PPUSH
15628: LD_VAR 0 2
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_VAR 0 4
15642: PPUSH
15643: LD_VAR 0 5
15647: PPUSH
15648: LD_VAR 0 6
15652: PPUSH
15653: LD_VAR 0 7
15657: PPUSH
15658: LD_VAR 0 8
15662: PPUSH
15663: LD_VAR 0 9
15667: PPUSH
15668: LD_VAR 0 10
15672: PPUSH
15673: LD_VAR 0 11
15677: PPUSH
15678: CALL 66445 0 11
15682: GO 15685
15684: POP
// end ;
15685: PPOPN 11
15687: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15688: LD_VAR 0 1
15692: PPUSH
15693: LD_VAR 0 2
15697: PPUSH
15698: LD_VAR 0 3
15702: PPUSH
15703: LD_VAR 0 4
15707: PPUSH
15708: LD_VAR 0 5
15712: PPUSH
15713: CALL 59324 0 5
// end ; end_of_file
15717: PPOPN 5
15719: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15720: LD_INT 0
15722: PPUSH
15723: PPUSH
// if exist_mode then
15724: LD_VAR 0 2
15728: IFFALSE 15774
// begin unit := CreateCharacter ( prefix & ident ) ;
15730: LD_ADDR_VAR 0 5
15734: PUSH
15735: LD_VAR 0 3
15739: PUSH
15740: LD_VAR 0 1
15744: STR
15745: PPUSH
15746: CALL_OW 34
15750: ST_TO_ADDR
// if unit then
15751: LD_VAR 0 5
15755: IFFALSE 15772
// DeleteCharacters ( prefix & ident ) ;
15757: LD_VAR 0 3
15761: PUSH
15762: LD_VAR 0 1
15766: STR
15767: PPUSH
15768: CALL_OW 40
// end else
15772: GO 15789
// unit := NewCharacter ( ident ) ;
15774: LD_ADDR_VAR 0 5
15778: PUSH
15779: LD_VAR 0 1
15783: PPUSH
15784: CALL_OW 25
15788: ST_TO_ADDR
// result := unit ;
15789: LD_ADDR_VAR 0 4
15793: PUSH
15794: LD_VAR 0 5
15798: ST_TO_ADDR
// end ;
15799: LD_VAR 0 4
15803: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
15804: LD_INT 0
15806: PPUSH
15807: PPUSH
// if exist_mode then
15808: LD_VAR 0 2
15812: IFFALSE 15837
// unit := CreateCharacter ( prefix & ident ) else
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_VAR 0 3
15823: PUSH
15824: LD_VAR 0 1
15828: STR
15829: PPUSH
15830: CALL_OW 34
15834: ST_TO_ADDR
15835: GO 15852
// unit := NewCharacter ( ident ) ;
15837: LD_ADDR_VAR 0 5
15841: PUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 25
15851: ST_TO_ADDR
// result := unit ;
15852: LD_ADDR_VAR 0 4
15856: PUSH
15857: LD_VAR 0 5
15861: ST_TO_ADDR
// end ;
15862: LD_VAR 0 4
15866: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15867: LD_INT 0
15869: PPUSH
15870: PPUSH
// if not side or not nation then
15871: LD_VAR 0 1
15875: NOT
15876: IFTRUE 15885
15878: PUSH
15879: LD_VAR 0 2
15883: NOT
15884: OR
15885: IFFALSE 15889
// exit ;
15887: GO 16683
// case nation of nation_american :
15889: LD_VAR 0 2
15893: PUSH
15894: LD_INT 1
15896: DOUBLE
15897: EQUAL
15898: IFTRUE 15902
15900: GO 16124
15902: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
15903: LD_ADDR_VAR 0 4
15907: PUSH
15908: LD_INT 35
15910: PUSH
15911: LD_INT 45
15913: PUSH
15914: LD_INT 46
15916: PUSH
15917: LD_INT 47
15919: PUSH
15920: LD_INT 82
15922: PUSH
15923: LD_INT 83
15925: PUSH
15926: LD_INT 84
15928: PUSH
15929: LD_INT 85
15931: PUSH
15932: LD_INT 86
15934: PUSH
15935: LD_INT 1
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 6
15943: PUSH
15944: LD_INT 15
15946: PUSH
15947: LD_INT 16
15949: PUSH
15950: LD_INT 7
15952: PUSH
15953: LD_INT 12
15955: PUSH
15956: LD_INT 13
15958: PUSH
15959: LD_INT 10
15961: PUSH
15962: LD_INT 14
15964: PUSH
15965: LD_INT 20
15967: PUSH
15968: LD_INT 21
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 32
15979: PUSH
15980: LD_INT 27
15982: PUSH
15983: LD_INT 36
15985: PUSH
15986: LD_INT 69
15988: PUSH
15989: LD_INT 39
15991: PUSH
15992: LD_INT 34
15994: PUSH
15995: LD_INT 40
15997: PUSH
15998: LD_INT 48
16000: PUSH
16001: LD_INT 49
16003: PUSH
16004: LD_INT 50
16006: PUSH
16007: LD_INT 51
16009: PUSH
16010: LD_INT 52
16012: PUSH
16013: LD_INT 53
16015: PUSH
16016: LD_INT 54
16018: PUSH
16019: LD_INT 55
16021: PUSH
16022: LD_INT 56
16024: PUSH
16025: LD_INT 57
16027: PUSH
16028: LD_INT 58
16030: PUSH
16031: LD_INT 59
16033: PUSH
16034: LD_INT 60
16036: PUSH
16037: LD_INT 61
16039: PUSH
16040: LD_INT 62
16042: PUSH
16043: LD_INT 80
16045: PUSH
16046: LD_INT 82
16048: PUSH
16049: LD_INT 83
16051: PUSH
16052: LD_INT 84
16054: PUSH
16055: LD_INT 85
16057: PUSH
16058: LD_INT 86
16060: PUSH
16061: LD_INT 90
16063: PUSH
16064: LD_INT 93
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: ST_TO_ADDR
16122: GO 16605
16124: LD_INT 2
16126: DOUBLE
16127: EQUAL
16128: IFTRUE 16132
16130: GO 16366
16132: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
16133: LD_ADDR_VAR 0 4
16137: PUSH
16138: LD_INT 35
16140: PUSH
16141: LD_INT 45
16143: PUSH
16144: LD_INT 46
16146: PUSH
16147: LD_INT 47
16149: PUSH
16150: LD_INT 82
16152: PUSH
16153: LD_INT 83
16155: PUSH
16156: LD_INT 84
16158: PUSH
16159: LD_INT 85
16161: PUSH
16162: LD_INT 87
16164: PUSH
16165: LD_INT 70
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: LD_INT 11
16173: PUSH
16174: LD_INT 3
16176: PUSH
16177: LD_INT 4
16179: PUSH
16180: LD_INT 5
16182: PUSH
16183: LD_INT 6
16185: PUSH
16186: LD_INT 15
16188: PUSH
16189: LD_INT 18
16191: PUSH
16192: LD_INT 7
16194: PUSH
16195: LD_INT 17
16197: PUSH
16198: LD_INT 8
16200: PUSH
16201: LD_INT 20
16203: PUSH
16204: LD_INT 21
16206: PUSH
16207: LD_INT 22
16209: PUSH
16210: LD_INT 72
16212: PUSH
16213: LD_INT 26
16215: PUSH
16216: LD_INT 69
16218: PUSH
16219: LD_INT 39
16221: PUSH
16222: LD_INT 40
16224: PUSH
16225: LD_INT 41
16227: PUSH
16228: LD_INT 42
16230: PUSH
16231: LD_INT 43
16233: PUSH
16234: LD_INT 48
16236: PUSH
16237: LD_INT 49
16239: PUSH
16240: LD_INT 50
16242: PUSH
16243: LD_INT 51
16245: PUSH
16246: LD_INT 52
16248: PUSH
16249: LD_INT 53
16251: PUSH
16252: LD_INT 54
16254: PUSH
16255: LD_INT 55
16257: PUSH
16258: LD_INT 56
16260: PUSH
16261: LD_INT 60
16263: PUSH
16264: LD_INT 61
16266: PUSH
16267: LD_INT 62
16269: PUSH
16270: LD_INT 66
16272: PUSH
16273: LD_INT 67
16275: PUSH
16276: LD_INT 68
16278: PUSH
16279: LD_INT 81
16281: PUSH
16282: LD_INT 82
16284: PUSH
16285: LD_INT 83
16287: PUSH
16288: LD_INT 84
16290: PUSH
16291: LD_INT 85
16293: PUSH
16294: LD_INT 87
16296: PUSH
16297: LD_INT 88
16299: PUSH
16300: LD_INT 92
16302: PUSH
16303: LD_INT 94
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: ST_TO_ADDR
16364: GO 16605
16366: LD_INT 3
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16374
16372: GO 16604
16374: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
16375: LD_ADDR_VAR 0 4
16379: PUSH
16380: LD_INT 46
16382: PUSH
16383: LD_INT 47
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: LD_INT 2
16391: PUSH
16392: LD_INT 82
16394: PUSH
16395: LD_INT 83
16397: PUSH
16398: LD_INT 84
16400: PUSH
16401: LD_INT 85
16403: PUSH
16404: LD_INT 86
16406: PUSH
16407: LD_INT 11
16409: PUSH
16410: LD_INT 9
16412: PUSH
16413: LD_INT 20
16415: PUSH
16416: LD_INT 19
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 24
16424: PUSH
16425: LD_INT 22
16427: PUSH
16428: LD_INT 25
16430: PUSH
16431: LD_INT 28
16433: PUSH
16434: LD_INT 29
16436: PUSH
16437: LD_INT 30
16439: PUSH
16440: LD_INT 31
16442: PUSH
16443: LD_INT 37
16445: PUSH
16446: LD_INT 38
16448: PUSH
16449: LD_INT 32
16451: PUSH
16452: LD_INT 27
16454: PUSH
16455: LD_INT 33
16457: PUSH
16458: LD_INT 69
16460: PUSH
16461: LD_INT 39
16463: PUSH
16464: LD_INT 34
16466: PUSH
16467: LD_INT 40
16469: PUSH
16470: LD_INT 71
16472: PUSH
16473: LD_INT 23
16475: PUSH
16476: LD_INT 44
16478: PUSH
16479: LD_INT 48
16481: PUSH
16482: LD_INT 49
16484: PUSH
16485: LD_INT 50
16487: PUSH
16488: LD_INT 51
16490: PUSH
16491: LD_INT 52
16493: PUSH
16494: LD_INT 53
16496: PUSH
16497: LD_INT 54
16499: PUSH
16500: LD_INT 55
16502: PUSH
16503: LD_INT 56
16505: PUSH
16506: LD_INT 57
16508: PUSH
16509: LD_INT 58
16511: PUSH
16512: LD_INT 59
16514: PUSH
16515: LD_INT 63
16517: PUSH
16518: LD_INT 64
16520: PUSH
16521: LD_INT 65
16523: PUSH
16524: LD_INT 82
16526: PUSH
16527: LD_INT 83
16529: PUSH
16530: LD_INT 84
16532: PUSH
16533: LD_INT 85
16535: PUSH
16536: LD_INT 86
16538: PUSH
16539: LD_INT 89
16541: PUSH
16542: LD_INT 91
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: ST_TO_ADDR
16602: GO 16605
16604: POP
// if state > - 1 and state < 3 then
16605: LD_VAR 0 3
16609: PUSH
16610: LD_INT 1
16612: NEG
16613: GREATER
16614: IFFALSE 16626
16616: PUSH
16617: LD_VAR 0 3
16621: PUSH
16622: LD_INT 3
16624: LESS
16625: AND
16626: IFFALSE 16683
// for i in result do
16628: LD_ADDR_VAR 0 5
16632: PUSH
16633: LD_VAR 0 4
16637: PUSH
16638: FOR_IN
16639: IFFALSE 16681
// if GetTech ( i , side ) <> state then
16641: LD_VAR 0 5
16645: PPUSH
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL_OW 321
16655: PUSH
16656: LD_VAR 0 3
16660: NONEQUAL
16661: IFFALSE 16679
// result := result diff i ;
16663: LD_ADDR_VAR 0 4
16667: PUSH
16668: LD_VAR 0 4
16672: PUSH
16673: LD_VAR 0 5
16677: DIFF
16678: ST_TO_ADDR
16679: GO 16638
16681: POP
16682: POP
// end ;
16683: LD_VAR 0 4
16687: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
16688: LD_INT 0
16690: PPUSH
16691: PPUSH
16692: PPUSH
// result := true ;
16693: LD_ADDR_VAR 0 3
16697: PUSH
16698: LD_INT 1
16700: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
16701: LD_ADDR_VAR 0 5
16705: PUSH
16706: LD_VAR 0 2
16710: PPUSH
16711: CALL_OW 480
16715: ST_TO_ADDR
// if not tmp then
16716: LD_VAR 0 5
16720: NOT
16721: IFFALSE 16725
// exit ;
16723: GO 16774
// for i in tmp do
16725: LD_ADDR_VAR 0 4
16729: PUSH
16730: LD_VAR 0 5
16734: PUSH
16735: FOR_IN
16736: IFFALSE 16772
// if GetTech ( i , side ) <> state_researched then
16738: LD_VAR 0 4
16742: PPUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 321
16752: PUSH
16753: LD_INT 2
16755: NONEQUAL
16756: IFFALSE 16770
// begin result := false ;
16758: LD_ADDR_VAR 0 3
16762: PUSH
16763: LD_INT 0
16765: ST_TO_ADDR
// exit ;
16766: POP
16767: POP
16768: GO 16774
// end ;
16770: GO 16735
16772: POP
16773: POP
// end ;
16774: LD_VAR 0 3
16778: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16779: LD_INT 0
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
16790: PPUSH
16791: PPUSH
16792: PPUSH
16793: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16794: LD_VAR 0 1
16798: NOT
16799: IFTRUE 16816
16801: PUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 257
16811: PUSH
16812: LD_INT 9
16814: NONEQUAL
16815: OR
16816: IFFALSE 16820
// exit ;
16818: GO 17399
// side := GetSide ( unit ) ;
16820: LD_ADDR_VAR 0 9
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 255
16834: ST_TO_ADDR
// tech_space := tech_spacanom ;
16835: LD_ADDR_VAR 0 12
16839: PUSH
16840: LD_INT 29
16842: ST_TO_ADDR
// tech_time := tech_taurad ;
16843: LD_ADDR_VAR 0 13
16847: PUSH
16848: LD_INT 28
16850: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16851: LD_ADDR_VAR 0 11
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 310
16865: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16866: LD_VAR 0 11
16870: PPUSH
16871: CALL_OW 247
16875: PUSH
16876: LD_INT 2
16878: EQUAL
16879: IFFALSE 16883
// exit ;
16881: GO 17399
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16883: LD_ADDR_VAR 0 8
16887: PUSH
16888: LD_INT 81
16890: PUSH
16891: LD_VAR 0 9
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 69
16925: ST_TO_ADDR
// if not tmp then
16926: LD_VAR 0 8
16930: NOT
16931: IFFALSE 16935
// exit ;
16933: GO 17399
// if in_unit then
16935: LD_VAR 0 11
16939: IFFALSE 16963
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16941: LD_ADDR_VAR 0 10
16945: PUSH
16946: LD_VAR 0 8
16950: PPUSH
16951: LD_VAR 0 11
16955: PPUSH
16956: CALL_OW 74
16960: ST_TO_ADDR
16961: GO 16983
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16963: LD_ADDR_VAR 0 10
16967: PUSH
16968: LD_VAR 0 8
16972: PPUSH
16973: LD_VAR 0 1
16977: PPUSH
16978: CALL_OW 74
16982: ST_TO_ADDR
// if not enemy then
16983: LD_VAR 0 10
16987: NOT
16988: IFFALSE 16992
// exit ;
16990: GO 17399
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16992: LD_VAR 0 11
16996: IFFALSE 17018
16998: PUSH
16999: LD_VAR 0 11
17003: PPUSH
17004: LD_VAR 0 10
17008: PPUSH
17009: CALL_OW 296
17013: PUSH
17014: LD_INT 13
17016: GREATER
17017: AND
17018: IFTRUE 17040
17020: PUSH
17021: LD_VAR 0 1
17025: PPUSH
17026: LD_VAR 0 10
17030: PPUSH
17031: CALL_OW 296
17035: PUSH
17036: LD_INT 12
17038: GREATER
17039: OR
17040: IFFALSE 17044
// exit ;
17042: GO 17399
// missile := [ 1 ] ;
17044: LD_ADDR_VAR 0 14
17048: PUSH
17049: LD_INT 1
17051: PUSH
17052: EMPTY
17053: LIST
17054: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17055: LD_VAR 0 9
17059: PPUSH
17060: LD_VAR 0 12
17064: PPUSH
17065: CALL_OW 325
17069: IFFALSE 17098
// missile := Replace ( missile , missile + 1 , 2 ) ;
17071: LD_ADDR_VAR 0 14
17075: PUSH
17076: LD_VAR 0 14
17080: PPUSH
17081: LD_VAR 0 14
17085: PUSH
17086: LD_INT 1
17088: PLUS
17089: PPUSH
17090: LD_INT 2
17092: PPUSH
17093: CALL_OW 1
17097: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17098: LD_VAR 0 9
17102: PPUSH
17103: LD_VAR 0 13
17107: PPUSH
17108: CALL_OW 325
17112: IFFALSE 17136
17114: PUSH
17115: LD_VAR 0 10
17119: PPUSH
17120: CALL_OW 255
17124: PPUSH
17125: LD_VAR 0 13
17129: PPUSH
17130: CALL_OW 325
17134: NOT
17135: AND
17136: IFFALSE 17165
// missile := Replace ( missile , missile + 1 , 3 ) ;
17138: LD_ADDR_VAR 0 14
17142: PUSH
17143: LD_VAR 0 14
17147: PPUSH
17148: LD_VAR 0 14
17152: PUSH
17153: LD_INT 1
17155: PLUS
17156: PPUSH
17157: LD_INT 3
17159: PPUSH
17160: CALL_OW 1
17164: ST_TO_ADDR
// if missile < 2 then
17165: LD_VAR 0 14
17169: PUSH
17170: LD_INT 2
17172: LESS
17173: IFFALSE 17177
// exit ;
17175: GO 17399
// x := GetX ( enemy ) ;
17177: LD_ADDR_VAR 0 4
17181: PUSH
17182: LD_VAR 0 10
17186: PPUSH
17187: CALL_OW 250
17191: ST_TO_ADDR
// y := GetY ( enemy ) ;
17192: LD_ADDR_VAR 0 5
17196: PUSH
17197: LD_VAR 0 10
17201: PPUSH
17202: CALL_OW 251
17206: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17207: LD_ADDR_VAR 0 6
17211: PUSH
17212: LD_VAR 0 4
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PPUSH
17221: LD_INT 1
17223: PPUSH
17224: CALL_OW 12
17228: PLUS
17229: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17230: LD_ADDR_VAR 0 7
17234: PUSH
17235: LD_VAR 0 5
17239: PUSH
17240: LD_INT 1
17242: NEG
17243: PPUSH
17244: LD_INT 1
17246: PPUSH
17247: CALL_OW 12
17251: PLUS
17252: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17253: LD_VAR 0 6
17257: PPUSH
17258: LD_VAR 0 7
17262: PPUSH
17263: CALL_OW 488
17267: NOT
17268: IFFALSE 17290
// begin _x := x ;
17270: LD_ADDR_VAR 0 6
17274: PUSH
17275: LD_VAR 0 4
17279: ST_TO_ADDR
// _y := y ;
17280: LD_ADDR_VAR 0 7
17284: PUSH
17285: LD_VAR 0 5
17289: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17290: LD_ADDR_VAR 0 3
17294: PUSH
17295: LD_INT 1
17297: PPUSH
17298: LD_VAR 0 14
17302: PPUSH
17303: CALL_OW 12
17307: ST_TO_ADDR
// case i of 1 :
17308: LD_VAR 0 3
17312: PUSH
17313: LD_INT 1
17315: DOUBLE
17316: EQUAL
17317: IFTRUE 17321
17319: GO 17338
17321: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17322: LD_VAR 0 1
17326: PPUSH
17327: LD_VAR 0 10
17331: PPUSH
17332: CALL_OW 115
17336: GO 17399
17338: LD_INT 2
17340: DOUBLE
17341: EQUAL
17342: IFTRUE 17346
17344: GO 17368
17346: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17347: LD_VAR 0 1
17351: PPUSH
17352: LD_VAR 0 6
17356: PPUSH
17357: LD_VAR 0 7
17361: PPUSH
17362: CALL_OW 153
17366: GO 17399
17368: LD_INT 3
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17398
17376: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17377: LD_VAR 0 1
17381: PPUSH
17382: LD_VAR 0 6
17386: PPUSH
17387: LD_VAR 0 7
17391: PPUSH
17392: CALL_OW 154
17396: GO 17399
17398: POP
// end ;
17399: LD_VAR 0 2
17403: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17404: LD_INT 0
17406: PPUSH
17407: PPUSH
17408: PPUSH
17409: PPUSH
17410: PPUSH
17411: PPUSH
// if not unit or not building then
17412: LD_VAR 0 1
17416: NOT
17417: IFTRUE 17426
17419: PUSH
17420: LD_VAR 0 2
17424: NOT
17425: OR
17426: IFFALSE 17430
// exit ;
17428: GO 17588
// x := GetX ( building ) ;
17430: LD_ADDR_VAR 0 5
17434: PUSH
17435: LD_VAR 0 2
17439: PPUSH
17440: CALL_OW 250
17444: ST_TO_ADDR
// y := GetY ( building ) ;
17445: LD_ADDR_VAR 0 6
17449: PUSH
17450: LD_VAR 0 2
17454: PPUSH
17455: CALL_OW 251
17459: ST_TO_ADDR
// for i := 0 to 5 do
17460: LD_ADDR_VAR 0 4
17464: PUSH
17465: DOUBLE
17466: LD_INT 0
17468: DEC
17469: ST_TO_ADDR
17470: LD_INT 5
17472: PUSH
17473: FOR_TO
17474: IFFALSE 17586
// begin _x := ShiftX ( x , i , 3 ) ;
17476: LD_ADDR_VAR 0 7
17480: PUSH
17481: LD_VAR 0 5
17485: PPUSH
17486: LD_VAR 0 4
17490: PPUSH
17491: LD_INT 3
17493: PPUSH
17494: CALL_OW 272
17498: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17499: LD_ADDR_VAR 0 8
17503: PUSH
17504: LD_VAR 0 6
17508: PPUSH
17509: LD_VAR 0 4
17513: PPUSH
17514: LD_INT 3
17516: PPUSH
17517: CALL_OW 273
17521: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17522: LD_VAR 0 7
17526: PPUSH
17527: LD_VAR 0 8
17531: PPUSH
17532: CALL_OW 488
17536: NOT
17537: IFFALSE 17541
// continue ;
17539: GO 17473
// if HexInfo ( _x , _y ) = 0 then
17541: LD_VAR 0 7
17545: PPUSH
17546: LD_VAR 0 8
17550: PPUSH
17551: CALL_OW 428
17555: PUSH
17556: LD_INT 0
17558: EQUAL
17559: IFFALSE 17584
// begin ComMoveXY ( unit , _x , _y ) ;
17561: LD_VAR 0 1
17565: PPUSH
17566: LD_VAR 0 7
17570: PPUSH
17571: LD_VAR 0 8
17575: PPUSH
17576: CALL_OW 111
// exit ;
17580: POP
17581: POP
17582: GO 17588
// end ; end ;
17584: GO 17473
17586: POP
17587: POP
// end ;
17588: LD_VAR 0 3
17592: RET
// export function ScanBase ( side , base_area ) ; begin
17593: LD_INT 0
17595: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17596: LD_ADDR_VAR 0 3
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 81
17608: PUSH
17609: LD_VAR 0 1
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PPUSH
17618: CALL_OW 70
17622: ST_TO_ADDR
// end ;
17623: LD_VAR 0 3
17627: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17628: LD_INT 0
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
// result := false ;
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// side := GetSide ( unit ) ;
17642: LD_ADDR_VAR 0 3
17646: PUSH
17647: LD_VAR 0 1
17651: PPUSH
17652: CALL_OW 255
17656: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17657: LD_ADDR_VAR 0 4
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 248
17671: ST_TO_ADDR
// case nat of 1 :
17672: LD_VAR 0 4
17676: PUSH
17677: LD_INT 1
17679: DOUBLE
17680: EQUAL
17681: IFTRUE 17685
17683: GO 17696
17685: POP
// tech := tech_lassight ; 2 :
17686: LD_ADDR_VAR 0 5
17690: PUSH
17691: LD_INT 12
17693: ST_TO_ADDR
17694: GO 17735
17696: LD_INT 2
17698: DOUBLE
17699: EQUAL
17700: IFTRUE 17704
17702: GO 17715
17704: POP
// tech := tech_mortar ; 3 :
17705: LD_ADDR_VAR 0 5
17709: PUSH
17710: LD_INT 41
17712: ST_TO_ADDR
17713: GO 17735
17715: LD_INT 3
17717: DOUBLE
17718: EQUAL
17719: IFTRUE 17723
17721: GO 17734
17723: POP
// tech := tech_bazooka ; end ;
17724: LD_ADDR_VAR 0 5
17728: PUSH
17729: LD_INT 44
17731: ST_TO_ADDR
17732: GO 17735
17734: POP
// if Researched ( side , tech ) then
17735: LD_VAR 0 3
17739: PPUSH
17740: LD_VAR 0 5
17744: PPUSH
17745: CALL_OW 325
17749: IFFALSE 17776
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17751: LD_ADDR_VAR 0 2
17755: PUSH
17756: LD_INT 5
17758: PUSH
17759: LD_INT 8
17761: PUSH
17762: LD_INT 9
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: LIST
17769: PUSH
17770: LD_VAR 0 4
17774: ARRAY
17775: ST_TO_ADDR
// end ;
17776: LD_VAR 0 2
17780: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17781: LD_INT 0
17783: PPUSH
17784: PPUSH
17785: PPUSH
// if not mines then
17786: LD_VAR 0 2
17790: NOT
17791: IFFALSE 17795
// exit ;
17793: GO 17939
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17795: LD_ADDR_VAR 0 5
17799: PUSH
17800: LD_INT 81
17802: PUSH
17803: LD_VAR 0 1
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 3
17814: PUSH
17815: LD_INT 21
17817: PUSH
17818: LD_INT 3
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PPUSH
17833: CALL_OW 69
17837: ST_TO_ADDR
// for i in mines do
17838: LD_ADDR_VAR 0 4
17842: PUSH
17843: LD_VAR 0 2
17847: PUSH
17848: FOR_IN
17849: IFFALSE 17937
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17851: LD_VAR 0 4
17855: PUSH
17856: LD_INT 1
17858: ARRAY
17859: PPUSH
17860: LD_VAR 0 4
17864: PUSH
17865: LD_INT 2
17867: ARRAY
17868: PPUSH
17869: CALL_OW 458
17873: NOT
17874: IFFALSE 17878
// continue ;
17876: GO 17848
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17878: LD_VAR 0 4
17882: PUSH
17883: LD_INT 1
17885: ARRAY
17886: PPUSH
17887: LD_VAR 0 4
17891: PUSH
17892: LD_INT 2
17894: ARRAY
17895: PPUSH
17896: CALL_OW 428
17900: PUSH
17901: LD_VAR 0 5
17905: IN
17906: IFFALSE 17935
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17908: LD_VAR 0 4
17912: PUSH
17913: LD_INT 1
17915: ARRAY
17916: PPUSH
17917: LD_VAR 0 4
17921: PUSH
17922: LD_INT 2
17924: ARRAY
17925: PPUSH
17926: LD_VAR 0 1
17930: PPUSH
17931: CALL_OW 456
// end ;
17935: GO 17848
17937: POP
17938: POP
// end ;
17939: LD_VAR 0 3
17943: RET
// export function Count ( array ) ; begin
17944: LD_INT 0
17946: PPUSH
// result := array + 0 ;
17947: LD_ADDR_VAR 0 2
17951: PUSH
17952: LD_VAR 0 1
17956: PUSH
17957: LD_INT 0
17959: PLUS
17960: ST_TO_ADDR
// end ;
17961: LD_VAR 0 2
17965: RET
// export function IsEmpty ( building ) ; begin
17966: LD_INT 0
17968: PPUSH
// if not building then
17969: LD_VAR 0 1
17973: NOT
17974: IFFALSE 17978
// exit ;
17976: GO 18021
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17978: LD_ADDR_VAR 0 2
17982: PUSH
17983: LD_VAR 0 1
17987: PUSH
17988: LD_INT 22
17990: PUSH
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 255
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 58
18007: PUSH
18008: EMPTY
18009: LIST
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PPUSH
18015: CALL_OW 69
18019: IN
18020: ST_TO_ADDR
// end ;
18021: LD_VAR 0 2
18025: RET
// export function IsNotFull ( building ) ; var places ; begin
18026: LD_INT 0
18028: PPUSH
18029: PPUSH
// if not building then
18030: LD_VAR 0 1
18034: NOT
18035: IFFALSE 18039
// exit ;
18037: GO 18067
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
18039: LD_ADDR_VAR 0 2
18043: PUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: LD_INT 3
18051: PUSH
18052: LD_INT 62
18054: PUSH
18055: EMPTY
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 72
18066: ST_TO_ADDR
// end ;
18067: LD_VAR 0 2
18071: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18072: LD_INT 0
18074: PPUSH
18075: PPUSH
18076: PPUSH
18077: PPUSH
// tmp := [ ] ;
18078: LD_ADDR_VAR 0 3
18082: PUSH
18083: EMPTY
18084: ST_TO_ADDR
// list := [ ] ;
18085: LD_ADDR_VAR 0 5
18089: PUSH
18090: EMPTY
18091: ST_TO_ADDR
// for i = 16 to 25 do
18092: LD_ADDR_VAR 0 4
18096: PUSH
18097: DOUBLE
18098: LD_INT 16
18100: DEC
18101: ST_TO_ADDR
18102: LD_INT 25
18104: PUSH
18105: FOR_TO
18106: IFFALSE 18179
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_VAR 0 3
18117: PUSH
18118: LD_INT 22
18120: PUSH
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL_OW 255
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 91
18137: PUSH
18138: LD_VAR 0 1
18142: PUSH
18143: LD_INT 6
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 30
18153: PUSH
18154: LD_VAR 0 4
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: PUSH
18163: EMPTY
18164: LIST
18165: LIST
18166: LIST
18167: PUSH
18168: EMPTY
18169: LIST
18170: PPUSH
18171: CALL_OW 69
18175: ADD
18176: ST_TO_ADDR
18177: GO 18105
18179: POP
18180: POP
// for i = 1 to tmp do
18181: LD_ADDR_VAR 0 4
18185: PUSH
18186: DOUBLE
18187: LD_INT 1
18189: DEC
18190: ST_TO_ADDR
18191: LD_VAR 0 3
18195: PUSH
18196: FOR_TO
18197: IFFALSE 18285
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18199: LD_ADDR_VAR 0 5
18203: PUSH
18204: LD_VAR 0 5
18208: PUSH
18209: LD_VAR 0 3
18213: PUSH
18214: LD_VAR 0 4
18218: ARRAY
18219: PPUSH
18220: CALL_OW 266
18224: PUSH
18225: LD_VAR 0 3
18229: PUSH
18230: LD_VAR 0 4
18234: ARRAY
18235: PPUSH
18236: CALL_OW 250
18240: PUSH
18241: LD_VAR 0 3
18245: PUSH
18246: LD_VAR 0 4
18250: ARRAY
18251: PPUSH
18252: CALL_OW 251
18256: PUSH
18257: LD_VAR 0 3
18261: PUSH
18262: LD_VAR 0 4
18266: ARRAY
18267: PPUSH
18268: CALL_OW 254
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: PUSH
18279: EMPTY
18280: LIST
18281: ADD
18282: ST_TO_ADDR
18283: GO 18196
18285: POP
18286: POP
// result := list ;
18287: LD_ADDR_VAR 0 2
18291: PUSH
18292: LD_VAR 0 5
18296: ST_TO_ADDR
// end ;
18297: LD_VAR 0 2
18301: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
18306: PPUSH
18307: PPUSH
18308: PPUSH
18309: PPUSH
18310: PPUSH
// if not factory then
18311: LD_VAR 0 1
18315: NOT
18316: IFFALSE 18320
// exit ;
18318: GO 18923
// if control = control_apeman then
18320: LD_VAR 0 4
18324: PUSH
18325: LD_INT 5
18327: EQUAL
18328: IFFALSE 18437
// begin tmp := UnitsInside ( factory ) ;
18330: LD_ADDR_VAR 0 8
18334: PUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: CALL_OW 313
18344: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18345: LD_VAR 0 8
18349: PPUSH
18350: LD_INT 25
18352: PUSH
18353: LD_INT 12
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PPUSH
18360: CALL_OW 72
18364: NOT
18365: IFFALSE 18375
// control := control_manual ;
18367: LD_ADDR_VAR 0 4
18371: PUSH
18372: LD_INT 1
18374: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18375: LD_ADDR_VAR 0 8
18379: PUSH
18380: LD_VAR 0 1
18384: PPUSH
18385: CALL 18072 0 1
18389: ST_TO_ADDR
// if tmp then
18390: LD_VAR 0 8
18394: IFFALSE 18437
// begin for i in tmp do
18396: LD_ADDR_VAR 0 7
18400: PUSH
18401: LD_VAR 0 8
18405: PUSH
18406: FOR_IN
18407: IFFALSE 18435
// if i [ 1 ] = b_ext_radio then
18409: LD_VAR 0 7
18413: PUSH
18414: LD_INT 1
18416: ARRAY
18417: PUSH
18418: LD_INT 22
18420: EQUAL
18421: IFFALSE 18433
// begin control := control_remote ;
18423: LD_ADDR_VAR 0 4
18427: PUSH
18428: LD_INT 2
18430: ST_TO_ADDR
// break ;
18431: GO 18435
// end ;
18433: GO 18406
18435: POP
18436: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18437: LD_VAR 0 1
18441: PPUSH
18442: LD_VAR 0 2
18446: PPUSH
18447: LD_VAR 0 3
18451: PPUSH
18452: LD_VAR 0 4
18456: PPUSH
18457: LD_VAR 0 5
18461: PPUSH
18462: CALL_OW 448
18466: IFFALSE 18501
// begin result := [ chassis , engine , control , weapon ] ;
18468: LD_ADDR_VAR 0 6
18472: PUSH
18473: LD_VAR 0 2
18477: PUSH
18478: LD_VAR 0 3
18482: PUSH
18483: LD_VAR 0 4
18487: PUSH
18488: LD_VAR 0 5
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: ST_TO_ADDR
// exit ;
18499: GO 18923
// end ; _chassis := AvailableChassisList ( factory ) ;
18501: LD_ADDR_VAR 0 9
18505: PUSH
18506: LD_VAR 0 1
18510: PPUSH
18511: CALL_OW 475
18515: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18516: LD_ADDR_VAR 0 11
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 476
18530: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18531: LD_ADDR_VAR 0 12
18535: PUSH
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL_OW 477
18545: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18546: LD_ADDR_VAR 0 10
18550: PUSH
18551: LD_VAR 0 1
18555: PPUSH
18556: CALL_OW 478
18560: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18561: LD_VAR 0 9
18565: NOT
18566: IFTRUE 18575
18568: PUSH
18569: LD_VAR 0 11
18573: NOT
18574: OR
18575: IFTRUE 18584
18577: PUSH
18578: LD_VAR 0 12
18582: NOT
18583: OR
18584: IFTRUE 18593
18586: PUSH
18587: LD_VAR 0 10
18591: NOT
18592: OR
18593: IFFALSE 18628
// begin result := [ chassis , engine , control , weapon ] ;
18595: LD_ADDR_VAR 0 6
18599: PUSH
18600: LD_VAR 0 2
18604: PUSH
18605: LD_VAR 0 3
18609: PUSH
18610: LD_VAR 0 4
18614: PUSH
18615: LD_VAR 0 5
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: ST_TO_ADDR
// exit ;
18626: GO 18923
// end ; if not chassis in _chassis then
18628: LD_VAR 0 2
18632: PUSH
18633: LD_VAR 0 9
18637: IN
18638: NOT
18639: IFFALSE 18665
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18641: LD_ADDR_VAR 0 2
18645: PUSH
18646: LD_VAR 0 9
18650: PUSH
18651: LD_INT 1
18653: PPUSH
18654: LD_VAR 0 9
18658: PPUSH
18659: CALL_OW 12
18663: ARRAY
18664: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
18665: LD_VAR 0 2
18669: PPUSH
18670: LD_VAR 0 3
18674: PPUSH
18675: CALL 18928 0 2
18679: NOT
18680: IFFALSE 18741
// repeat engine := _engine [ 1 ] ;
18682: LD_ADDR_VAR 0 3
18686: PUSH
18687: LD_VAR 0 11
18691: PUSH
18692: LD_INT 1
18694: ARRAY
18695: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
18696: LD_ADDR_VAR 0 11
18700: PUSH
18701: LD_VAR 0 11
18705: PPUSH
18706: LD_INT 1
18708: PPUSH
18709: CALL_OW 3
18713: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
18714: LD_VAR 0 2
18718: PPUSH
18719: LD_VAR 0 3
18723: PPUSH
18724: CALL 18928 0 2
18728: IFTRUE 18739
18730: PUSH
18731: LD_VAR 0 11
18735: PUSH
18736: EMPTY
18737: EQUAL
18738: OR
18739: IFFALSE 18682
// if not control in _control then
18741: LD_VAR 0 4
18745: PUSH
18746: LD_VAR 0 12
18750: IN
18751: NOT
18752: IFFALSE 18778
// control := _control [ rand ( 1 , _control ) ] ;
18754: LD_ADDR_VAR 0 4
18758: PUSH
18759: LD_VAR 0 12
18763: PUSH
18764: LD_INT 1
18766: PPUSH
18767: LD_VAR 0 12
18771: PPUSH
18772: CALL_OW 12
18776: ARRAY
18777: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18778: LD_VAR 0 2
18782: PPUSH
18783: LD_VAR 0 5
18787: PPUSH
18788: CALL 19150 0 2
18792: NOT
18793: IFFALSE 18854
// repeat weapon := _weapon [ 1 ] ;
18795: LD_ADDR_VAR 0 5
18799: PUSH
18800: LD_VAR 0 10
18804: PUSH
18805: LD_INT 1
18807: ARRAY
18808: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18809: LD_ADDR_VAR 0 10
18813: PUSH
18814: LD_VAR 0 10
18818: PPUSH
18819: LD_INT 1
18821: PPUSH
18822: CALL_OW 3
18826: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18827: LD_VAR 0 2
18831: PPUSH
18832: LD_VAR 0 5
18836: PPUSH
18837: CALL 19150 0 2
18841: IFTRUE 18852
18843: PUSH
18844: LD_VAR 0 10
18848: PUSH
18849: EMPTY
18850: EQUAL
18851: OR
18852: IFFALSE 18795
// result := [ ] ;
18854: LD_ADDR_VAR 0 6
18858: PUSH
18859: EMPTY
18860: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18861: LD_VAR 0 1
18865: PPUSH
18866: LD_VAR 0 2
18870: PPUSH
18871: LD_VAR 0 3
18875: PPUSH
18876: LD_VAR 0 4
18880: PPUSH
18881: LD_VAR 0 5
18885: PPUSH
18886: CALL_OW 448
18890: IFFALSE 18923
// result := [ chassis , engine , control , weapon ] ;
18892: LD_ADDR_VAR 0 6
18896: PUSH
18897: LD_VAR 0 2
18901: PUSH
18902: LD_VAR 0 3
18906: PUSH
18907: LD_VAR 0 4
18911: PUSH
18912: LD_VAR 0 5
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: ST_TO_ADDR
// end ;
18923: LD_VAR 0 6
18927: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18928: LD_INT 0
18930: PPUSH
// if not chassis or not engine then
18931: LD_VAR 0 1
18935: NOT
18936: IFTRUE 18945
18938: PUSH
18939: LD_VAR 0 2
18943: NOT
18944: OR
18945: IFFALSE 18949
// exit ;
18947: GO 19145
// case engine of engine_solar :
18949: LD_VAR 0 2
18953: PUSH
18954: LD_INT 2
18956: DOUBLE
18957: EQUAL
18958: IFTRUE 18962
18960: GO 19000
18962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18963: LD_ADDR_VAR 0 3
18967: PUSH
18968: LD_INT 11
18970: PUSH
18971: LD_INT 12
18973: PUSH
18974: LD_INT 13
18976: PUSH
18977: LD_INT 14
18979: PUSH
18980: LD_INT 1
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 3
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: ST_TO_ADDR
18998: GO 19129
19000: LD_INT 1
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19070
19008: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19009: LD_ADDR_VAR 0 3
19013: PUSH
19014: LD_INT 11
19016: PUSH
19017: LD_INT 12
19019: PUSH
19020: LD_INT 13
19022: PUSH
19023: LD_INT 14
19025: PUSH
19026: LD_INT 1
19028: PUSH
19029: LD_INT 2
19031: PUSH
19032: LD_INT 3
19034: PUSH
19035: LD_INT 4
19037: PUSH
19038: LD_INT 5
19040: PUSH
19041: LD_INT 21
19043: PUSH
19044: LD_INT 23
19046: PUSH
19047: LD_INT 22
19049: PUSH
19050: LD_INT 24
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: ST_TO_ADDR
19068: GO 19129
19070: LD_INT 3
19072: DOUBLE
19073: EQUAL
19074: IFTRUE 19078
19076: GO 19128
19078: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19079: LD_ADDR_VAR 0 3
19083: PUSH
19084: LD_INT 13
19086: PUSH
19087: LD_INT 14
19089: PUSH
19090: LD_INT 2
19092: PUSH
19093: LD_INT 3
19095: PUSH
19096: LD_INT 4
19098: PUSH
19099: LD_INT 5
19101: PUSH
19102: LD_INT 21
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_INT 23
19110: PUSH
19111: LD_INT 24
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: ST_TO_ADDR
19126: GO 19129
19128: POP
// result := ( chassis in result ) ;
19129: LD_ADDR_VAR 0 3
19133: PUSH
19134: LD_VAR 0 1
19138: PUSH
19139: LD_VAR 0 3
19143: IN
19144: ST_TO_ADDR
// end ;
19145: LD_VAR 0 3
19149: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19150: LD_INT 0
19152: PPUSH
// if not chassis or not weapon then
19153: LD_VAR 0 1
19157: NOT
19158: IFTRUE 19167
19160: PUSH
19161: LD_VAR 0 2
19165: NOT
19166: OR
19167: IFFALSE 19171
// exit ;
19169: GO 20265
// case weapon of us_machine_gun :
19171: LD_VAR 0 2
19175: PUSH
19176: LD_INT 2
19178: DOUBLE
19179: EQUAL
19180: IFTRUE 19184
19182: GO 19214
19184: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19185: LD_ADDR_VAR 0 3
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: LD_INT 3
19198: PUSH
19199: LD_INT 4
19201: PUSH
19202: LD_INT 5
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: ST_TO_ADDR
19212: GO 20249
19214: LD_INT 3
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19252
19222: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19223: LD_ADDR_VAR 0 3
19227: PUSH
19228: LD_INT 1
19230: PUSH
19231: LD_INT 2
19233: PUSH
19234: LD_INT 3
19236: PUSH
19237: LD_INT 4
19239: PUSH
19240: LD_INT 5
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: ST_TO_ADDR
19250: GO 20249
19252: LD_INT 11
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19290
19260: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19261: LD_ADDR_VAR 0 3
19265: PUSH
19266: LD_INT 1
19268: PUSH
19269: LD_INT 2
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: LD_INT 4
19277: PUSH
19278: LD_INT 5
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: ST_TO_ADDR
19288: GO 20249
19290: LD_INT 4
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19324
19298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: LD_INT 2
19306: PUSH
19307: LD_INT 3
19309: PUSH
19310: LD_INT 4
19312: PUSH
19313: LD_INT 5
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: ST_TO_ADDR
19322: GO 20249
19324: LD_INT 5
19326: DOUBLE
19327: EQUAL
19328: IFTRUE 19332
19330: GO 19358
19332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 3
19343: PUSH
19344: LD_INT 4
19346: PUSH
19347: LD_INT 5
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: ST_TO_ADDR
19356: GO 20249
19358: LD_INT 9
19360: DOUBLE
19361: EQUAL
19362: IFTRUE 19366
19364: GO 19392
19366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19367: LD_ADDR_VAR 0 3
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: LD_INT 3
19377: PUSH
19378: LD_INT 4
19380: PUSH
19381: LD_INT 5
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: ST_TO_ADDR
19390: GO 20249
19392: LD_INT 7
19394: DOUBLE
19395: EQUAL
19396: IFTRUE 19400
19398: GO 19426
19400: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19401: LD_ADDR_VAR 0 3
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: LD_INT 4
19414: PUSH
19415: LD_INT 5
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: ST_TO_ADDR
19424: GO 20249
19426: LD_INT 12
19428: DOUBLE
19429: EQUAL
19430: IFTRUE 19434
19432: GO 19460
19434: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19435: LD_ADDR_VAR 0 3
19439: PUSH
19440: LD_INT 2
19442: PUSH
19443: LD_INT 3
19445: PUSH
19446: LD_INT 4
19448: PUSH
19449: LD_INT 5
19451: PUSH
19452: EMPTY
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: ST_TO_ADDR
19458: GO 20249
19460: LD_INT 13
19462: DOUBLE
19463: EQUAL
19464: IFTRUE 19468
19466: GO 19494
19468: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: LD_INT 2
19476: PUSH
19477: LD_INT 3
19479: PUSH
19480: LD_INT 4
19482: PUSH
19483: LD_INT 5
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: LIST
19491: ST_TO_ADDR
19492: GO 20249
19494: LD_INT 14
19496: DOUBLE
19497: EQUAL
19498: IFTRUE 19502
19500: GO 19520
19502: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19503: LD_ADDR_VAR 0 3
19507: PUSH
19508: LD_INT 4
19510: PUSH
19511: LD_INT 5
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: ST_TO_ADDR
19518: GO 20249
19520: LD_INT 6
19522: DOUBLE
19523: EQUAL
19524: IFTRUE 19528
19526: GO 19546
19528: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19529: LD_ADDR_VAR 0 3
19533: PUSH
19534: LD_INT 4
19536: PUSH
19537: LD_INT 5
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: ST_TO_ADDR
19544: GO 20249
19546: LD_INT 10
19548: DOUBLE
19549: EQUAL
19550: IFTRUE 19554
19552: GO 19572
19554: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19555: LD_ADDR_VAR 0 3
19559: PUSH
19560: LD_INT 4
19562: PUSH
19563: LD_INT 5
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: ST_TO_ADDR
19570: GO 20249
19572: LD_INT 22
19574: DOUBLE
19575: EQUAL
19576: IFTRUE 19580
19578: GO 19606
19580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_INT 11
19588: PUSH
19589: LD_INT 12
19591: PUSH
19592: LD_INT 13
19594: PUSH
19595: LD_INT 14
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: ST_TO_ADDR
19604: GO 20249
19606: LD_INT 23
19608: DOUBLE
19609: EQUAL
19610: IFTRUE 19614
19612: GO 19640
19614: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19615: LD_ADDR_VAR 0 3
19619: PUSH
19620: LD_INT 11
19622: PUSH
19623: LD_INT 12
19625: PUSH
19626: LD_INT 13
19628: PUSH
19629: LD_INT 14
19631: PUSH
19632: EMPTY
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: ST_TO_ADDR
19638: GO 20249
19640: LD_INT 24
19642: DOUBLE
19643: EQUAL
19644: IFTRUE 19648
19646: GO 19674
19648: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19649: LD_ADDR_VAR 0 3
19653: PUSH
19654: LD_INT 11
19656: PUSH
19657: LD_INT 12
19659: PUSH
19660: LD_INT 13
19662: PUSH
19663: LD_INT 14
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: ST_TO_ADDR
19672: GO 20249
19674: LD_INT 30
19676: DOUBLE
19677: EQUAL
19678: IFTRUE 19682
19680: GO 19708
19682: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
19683: LD_ADDR_VAR 0 3
19687: PUSH
19688: LD_INT 11
19690: PUSH
19691: LD_INT 12
19693: PUSH
19694: LD_INT 13
19696: PUSH
19697: LD_INT 14
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: ST_TO_ADDR
19706: GO 20249
19708: LD_INT 25
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19734
19716: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
19717: LD_ADDR_VAR 0 3
19721: PUSH
19722: LD_INT 13
19724: PUSH
19725: LD_INT 14
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: ST_TO_ADDR
19732: GO 20249
19734: LD_INT 27
19736: DOUBLE
19737: EQUAL
19738: IFTRUE 19742
19740: GO 19760
19742: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: LD_INT 13
19750: PUSH
19751: LD_INT 14
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: ST_TO_ADDR
19758: GO 20249
19760: LD_INT 92
19762: DOUBLE
19763: EQUAL
19764: IFTRUE 19768
19766: GO 19794
19768: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19769: LD_ADDR_VAR 0 3
19773: PUSH
19774: LD_INT 11
19776: PUSH
19777: LD_INT 12
19779: PUSH
19780: LD_INT 13
19782: PUSH
19783: LD_INT 14
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: ST_TO_ADDR
19792: GO 20249
19794: LD_INT 28
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19820
19802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19803: LD_ADDR_VAR 0 3
19807: PUSH
19808: LD_INT 13
19810: PUSH
19811: LD_INT 14
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: ST_TO_ADDR
19818: GO 20249
19820: LD_INT 29
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19846
19828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19829: LD_ADDR_VAR 0 3
19833: PUSH
19834: LD_INT 13
19836: PUSH
19837: LD_INT 14
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: ST_TO_ADDR
19844: GO 20249
19846: LD_INT 31
19848: DOUBLE
19849: EQUAL
19850: IFTRUE 19854
19852: GO 19872
19854: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: LD_INT 13
19862: PUSH
19863: LD_INT 14
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: ST_TO_ADDR
19870: GO 20249
19872: LD_INT 26
19874: DOUBLE
19875: EQUAL
19876: IFTRUE 19880
19878: GO 19898
19880: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19881: LD_ADDR_VAR 0 3
19885: PUSH
19886: LD_INT 13
19888: PUSH
19889: LD_INT 14
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: ST_TO_ADDR
19896: GO 20249
19898: LD_INT 42
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 19932
19906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19907: LD_ADDR_VAR 0 3
19911: PUSH
19912: LD_INT 21
19914: PUSH
19915: LD_INT 22
19917: PUSH
19918: LD_INT 23
19920: PUSH
19921: LD_INT 24
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: ST_TO_ADDR
19930: GO 20249
19932: LD_INT 43
19934: DOUBLE
19935: EQUAL
19936: IFTRUE 19940
19938: GO 19966
19940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19941: LD_ADDR_VAR 0 3
19945: PUSH
19946: LD_INT 21
19948: PUSH
19949: LD_INT 22
19951: PUSH
19952: LD_INT 23
19954: PUSH
19955: LD_INT 24
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: ST_TO_ADDR
19964: GO 20249
19966: LD_INT 44
19968: DOUBLE
19969: EQUAL
19970: IFTRUE 19974
19972: GO 20000
19974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19975: LD_ADDR_VAR 0 3
19979: PUSH
19980: LD_INT 21
19982: PUSH
19983: LD_INT 22
19985: PUSH
19986: LD_INT 23
19988: PUSH
19989: LD_INT 24
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: ST_TO_ADDR
19998: GO 20249
20000: LD_INT 45
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20034
20008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_INT 21
20016: PUSH
20017: LD_INT 22
20019: PUSH
20020: LD_INT 23
20022: PUSH
20023: LD_INT 24
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: ST_TO_ADDR
20032: GO 20249
20034: LD_INT 49
20036: DOUBLE
20037: EQUAL
20038: IFTRUE 20042
20040: GO 20068
20042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20043: LD_ADDR_VAR 0 3
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_INT 23
20056: PUSH
20057: LD_INT 24
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: LIST
20065: ST_TO_ADDR
20066: GO 20249
20068: LD_INT 51
20070: DOUBLE
20071: EQUAL
20072: IFTRUE 20076
20074: GO 20102
20076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20077: LD_ADDR_VAR 0 3
20081: PUSH
20082: LD_INT 21
20084: PUSH
20085: LD_INT 22
20087: PUSH
20088: LD_INT 23
20090: PUSH
20091: LD_INT 24
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: ST_TO_ADDR
20100: GO 20249
20102: LD_INT 52
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20136
20110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20111: LD_ADDR_VAR 0 3
20115: PUSH
20116: LD_INT 21
20118: PUSH
20119: LD_INT 22
20121: PUSH
20122: LD_INT 23
20124: PUSH
20125: LD_INT 24
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: ST_TO_ADDR
20134: GO 20249
20136: LD_INT 53
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20162
20144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20145: LD_ADDR_VAR 0 3
20149: PUSH
20150: LD_INT 23
20152: PUSH
20153: LD_INT 24
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: ST_TO_ADDR
20160: GO 20249
20162: LD_INT 46
20164: DOUBLE
20165: EQUAL
20166: IFTRUE 20170
20168: GO 20188
20170: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20171: LD_ADDR_VAR 0 3
20175: PUSH
20176: LD_INT 23
20178: PUSH
20179: LD_INT 24
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: ST_TO_ADDR
20186: GO 20249
20188: LD_INT 47
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20214
20196: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
20197: LD_ADDR_VAR 0 3
20201: PUSH
20202: LD_INT 23
20204: PUSH
20205: LD_INT 24
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: ST_TO_ADDR
20212: GO 20249
20214: LD_INT 98
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20248
20222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20223: LD_ADDR_VAR 0 3
20227: PUSH
20228: LD_INT 21
20230: PUSH
20231: LD_INT 22
20233: PUSH
20234: LD_INT 23
20236: PUSH
20237: LD_INT 24
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: ST_TO_ADDR
20246: GO 20249
20248: POP
// result := ( chassis in result ) ;
20249: LD_ADDR_VAR 0 3
20253: PUSH
20254: LD_VAR 0 1
20258: PUSH
20259: LD_VAR 0 3
20263: IN
20264: ST_TO_ADDR
// end ;
20265: LD_VAR 0 3
20269: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20270: LD_INT 0
20272: PPUSH
20273: PPUSH
20274: PPUSH
20275: PPUSH
20276: PPUSH
20277: PPUSH
20278: PPUSH
// result := array ;
20279: LD_ADDR_VAR 0 5
20283: PUSH
20284: LD_VAR 0 1
20288: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20289: LD_VAR 0 1
20293: NOT
20294: IFTRUE 20303
20296: PUSH
20297: LD_VAR 0 2
20301: NOT
20302: OR
20303: IFTRUE 20312
20305: PUSH
20306: LD_VAR 0 3
20310: NOT
20311: OR
20312: IFTRUE 20326
20314: PUSH
20315: LD_VAR 0 2
20319: PUSH
20320: LD_VAR 0 1
20324: GREATER
20325: OR
20326: IFTRUE 20340
20328: PUSH
20329: LD_VAR 0 3
20333: PUSH
20334: LD_VAR 0 1
20338: GREATER
20339: OR
20340: IFFALSE 20344
// exit ;
20342: GO 20640
// if direction then
20344: LD_VAR 0 4
20348: IFFALSE 20412
// begin d := 1 ;
20350: LD_ADDR_VAR 0 9
20354: PUSH
20355: LD_INT 1
20357: ST_TO_ADDR
// if i_from > i_to then
20358: LD_VAR 0 2
20362: PUSH
20363: LD_VAR 0 3
20367: GREATER
20368: IFFALSE 20394
// length := ( array - i_from ) + i_to else
20370: LD_ADDR_VAR 0 11
20374: PUSH
20375: LD_VAR 0 1
20379: PUSH
20380: LD_VAR 0 2
20384: MINUS
20385: PUSH
20386: LD_VAR 0 3
20390: PLUS
20391: ST_TO_ADDR
20392: GO 20410
// length := i_to - i_from ;
20394: LD_ADDR_VAR 0 11
20398: PUSH
20399: LD_VAR 0 3
20403: PUSH
20404: LD_VAR 0 2
20408: MINUS
20409: ST_TO_ADDR
// end else
20410: GO 20473
// begin d := - 1 ;
20412: LD_ADDR_VAR 0 9
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: ST_TO_ADDR
// if i_from > i_to then
20421: LD_VAR 0 2
20425: PUSH
20426: LD_VAR 0 3
20430: GREATER
20431: IFFALSE 20451
// length := i_from - i_to else
20433: LD_ADDR_VAR 0 11
20437: PUSH
20438: LD_VAR 0 2
20442: PUSH
20443: LD_VAR 0 3
20447: MINUS
20448: ST_TO_ADDR
20449: GO 20473
// length := ( array - i_to ) + i_from ;
20451: LD_ADDR_VAR 0 11
20455: PUSH
20456: LD_VAR 0 1
20460: PUSH
20461: LD_VAR 0 3
20465: MINUS
20466: PUSH
20467: LD_VAR 0 2
20471: PLUS
20472: ST_TO_ADDR
// end ; if not length then
20473: LD_VAR 0 11
20477: NOT
20478: IFFALSE 20482
// exit ;
20480: GO 20640
// tmp := array ;
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: LD_VAR 0 1
20491: ST_TO_ADDR
// for i = 1 to length do
20492: LD_ADDR_VAR 0 6
20496: PUSH
20497: DOUBLE
20498: LD_INT 1
20500: DEC
20501: ST_TO_ADDR
20502: LD_VAR 0 11
20506: PUSH
20507: FOR_TO
20508: IFFALSE 20628
// begin for j = 1 to array do
20510: LD_ADDR_VAR 0 7
20514: PUSH
20515: DOUBLE
20516: LD_INT 1
20518: DEC
20519: ST_TO_ADDR
20520: LD_VAR 0 1
20524: PUSH
20525: FOR_TO
20526: IFFALSE 20614
// begin k := j + d ;
20528: LD_ADDR_VAR 0 8
20532: PUSH
20533: LD_VAR 0 7
20537: PUSH
20538: LD_VAR 0 9
20542: PLUS
20543: ST_TO_ADDR
// if k > array then
20544: LD_VAR 0 8
20548: PUSH
20549: LD_VAR 0 1
20553: GREATER
20554: IFFALSE 20564
// k := 1 ;
20556: LD_ADDR_VAR 0 8
20560: PUSH
20561: LD_INT 1
20563: ST_TO_ADDR
// if not k then
20564: LD_VAR 0 8
20568: NOT
20569: IFFALSE 20581
// k := array ;
20571: LD_ADDR_VAR 0 8
20575: PUSH
20576: LD_VAR 0 1
20580: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20581: LD_ADDR_VAR 0 10
20585: PUSH
20586: LD_VAR 0 10
20590: PPUSH
20591: LD_VAR 0 8
20595: PPUSH
20596: LD_VAR 0 1
20600: PUSH
20601: LD_VAR 0 7
20605: ARRAY
20606: PPUSH
20607: CALL_OW 1
20611: ST_TO_ADDR
// end ;
20612: GO 20525
20614: POP
20615: POP
// array := tmp ;
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_VAR 0 10
20625: ST_TO_ADDR
// end ;
20626: GO 20507
20628: POP
20629: POP
// result := array ;
20630: LD_ADDR_VAR 0 5
20634: PUSH
20635: LD_VAR 0 1
20639: ST_TO_ADDR
// end ;
20640: LD_VAR 0 5
20644: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20645: LD_INT 0
20647: PPUSH
20648: PPUSH
// result := 0 ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// if not array or not value in array then
20657: LD_VAR 0 1
20661: NOT
20662: IFTRUE 20677
20664: PUSH
20665: LD_VAR 0 2
20669: PUSH
20670: LD_VAR 0 1
20674: IN
20675: NOT
20676: OR
20677: IFFALSE 20681
// exit ;
20679: GO 20735
// for i = 1 to array do
20681: LD_ADDR_VAR 0 4
20685: PUSH
20686: DOUBLE
20687: LD_INT 1
20689: DEC
20690: ST_TO_ADDR
20691: LD_VAR 0 1
20695: PUSH
20696: FOR_TO
20697: IFFALSE 20733
// if value = array [ i ] then
20699: LD_VAR 0 2
20703: PUSH
20704: LD_VAR 0 1
20708: PUSH
20709: LD_VAR 0 4
20713: ARRAY
20714: EQUAL
20715: IFFALSE 20731
// begin result := i ;
20717: LD_ADDR_VAR 0 3
20721: PUSH
20722: LD_VAR 0 4
20726: ST_TO_ADDR
// exit ;
20727: POP
20728: POP
20729: GO 20735
// end ;
20731: GO 20696
20733: POP
20734: POP
// end ;
20735: LD_VAR 0 3
20739: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20740: LD_INT 0
20742: PPUSH
// vc_chassis := chassis ;
20743: LD_ADDR_OWVAR 37
20747: PUSH
20748: LD_VAR 0 1
20752: ST_TO_ADDR
// vc_engine := engine ;
20753: LD_ADDR_OWVAR 39
20757: PUSH
20758: LD_VAR 0 2
20762: ST_TO_ADDR
// vc_control := control ;
20763: LD_ADDR_OWVAR 38
20767: PUSH
20768: LD_VAR 0 3
20772: ST_TO_ADDR
// vc_weapon := weapon ;
20773: LD_ADDR_OWVAR 40
20777: PUSH
20778: LD_VAR 0 4
20782: ST_TO_ADDR
// vc_fuel_battery := fuel ;
20783: LD_ADDR_OWVAR 41
20787: PUSH
20788: LD_VAR 0 5
20792: ST_TO_ADDR
// end ;
20793: LD_VAR 0 6
20797: RET
// export function WantPlant ( unit ) ; var task ; begin
20798: LD_INT 0
20800: PPUSH
20801: PPUSH
// result := false ;
20802: LD_ADDR_VAR 0 2
20806: PUSH
20807: LD_INT 0
20809: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20810: LD_ADDR_VAR 0 3
20814: PUSH
20815: LD_VAR 0 1
20819: PPUSH
20820: CALL_OW 437
20824: ST_TO_ADDR
// if task then
20825: LD_VAR 0 3
20829: IFFALSE 20857
// if task [ 1 ] [ 1 ] = p then
20831: LD_VAR 0 3
20835: PUSH
20836: LD_INT 1
20838: ARRAY
20839: PUSH
20840: LD_INT 1
20842: ARRAY
20843: PUSH
20844: LD_STRING p
20846: EQUAL
20847: IFFALSE 20857
// result := true ;
20849: LD_ADDR_VAR 0 2
20853: PUSH
20854: LD_INT 1
20856: ST_TO_ADDR
// end ;
20857: LD_VAR 0 2
20861: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20862: LD_INT 0
20864: PPUSH
20865: PPUSH
20866: PPUSH
20867: PPUSH
// if pos < 1 then
20868: LD_VAR 0 2
20872: PUSH
20873: LD_INT 1
20875: LESS
20876: IFFALSE 20880
// exit ;
20878: GO 21183
// if pos = 1 then
20880: LD_VAR 0 2
20884: PUSH
20885: LD_INT 1
20887: EQUAL
20888: IFFALSE 20921
// result := Replace ( arr , pos [ 1 ] , value ) else
20890: LD_ADDR_VAR 0 4
20894: PUSH
20895: LD_VAR 0 1
20899: PPUSH
20900: LD_VAR 0 2
20904: PUSH
20905: LD_INT 1
20907: ARRAY
20908: PPUSH
20909: LD_VAR 0 3
20913: PPUSH
20914: CALL_OW 1
20918: ST_TO_ADDR
20919: GO 21183
// begin tmp := arr ;
20921: LD_ADDR_VAR 0 6
20925: PUSH
20926: LD_VAR 0 1
20930: ST_TO_ADDR
// s_arr := [ tmp ] ;
20931: LD_ADDR_VAR 0 7
20935: PUSH
20936: LD_VAR 0 6
20940: PUSH
20941: EMPTY
20942: LIST
20943: ST_TO_ADDR
// for i = 1 to pos - 1 do
20944: LD_ADDR_VAR 0 5
20948: PUSH
20949: DOUBLE
20950: LD_INT 1
20952: DEC
20953: ST_TO_ADDR
20954: LD_VAR 0 2
20958: PUSH
20959: LD_INT 1
20961: MINUS
20962: PUSH
20963: FOR_TO
20964: IFFALSE 21009
// begin tmp := tmp [ pos [ i ] ] ;
20966: LD_ADDR_VAR 0 6
20970: PUSH
20971: LD_VAR 0 6
20975: PUSH
20976: LD_VAR 0 2
20980: PUSH
20981: LD_VAR 0 5
20985: ARRAY
20986: ARRAY
20987: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20988: LD_ADDR_VAR 0 7
20992: PUSH
20993: LD_VAR 0 7
20997: PUSH
20998: LD_VAR 0 6
21002: PUSH
21003: EMPTY
21004: LIST
21005: ADD
21006: ST_TO_ADDR
// end ;
21007: GO 20963
21009: POP
21010: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21011: LD_ADDR_VAR 0 6
21015: PUSH
21016: LD_VAR 0 6
21020: PPUSH
21021: LD_VAR 0 2
21025: PUSH
21026: LD_VAR 0 2
21030: ARRAY
21031: PPUSH
21032: LD_VAR 0 3
21036: PPUSH
21037: CALL_OW 1
21041: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21042: LD_ADDR_VAR 0 7
21046: PUSH
21047: LD_VAR 0 7
21051: PPUSH
21052: LD_VAR 0 7
21056: PPUSH
21057: LD_VAR 0 6
21061: PPUSH
21062: CALL_OW 1
21066: ST_TO_ADDR
// for i = s_arr downto 2 do
21067: LD_ADDR_VAR 0 5
21071: PUSH
21072: DOUBLE
21073: LD_VAR 0 7
21077: INC
21078: ST_TO_ADDR
21079: LD_INT 2
21081: PUSH
21082: FOR_DOWNTO
21083: IFFALSE 21167
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21085: LD_ADDR_VAR 0 6
21089: PUSH
21090: LD_VAR 0 7
21094: PUSH
21095: LD_VAR 0 5
21099: PUSH
21100: LD_INT 1
21102: MINUS
21103: ARRAY
21104: PPUSH
21105: LD_VAR 0 2
21109: PUSH
21110: LD_VAR 0 5
21114: PUSH
21115: LD_INT 1
21117: MINUS
21118: ARRAY
21119: PPUSH
21120: LD_VAR 0 7
21124: PUSH
21125: LD_VAR 0 5
21129: ARRAY
21130: PPUSH
21131: CALL_OW 1
21135: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21136: LD_ADDR_VAR 0 7
21140: PUSH
21141: LD_VAR 0 7
21145: PPUSH
21146: LD_VAR 0 5
21150: PUSH
21151: LD_INT 1
21153: MINUS
21154: PPUSH
21155: LD_VAR 0 6
21159: PPUSH
21160: CALL_OW 1
21164: ST_TO_ADDR
// end ;
21165: GO 21082
21167: POP
21168: POP
// result := s_arr [ 1 ] ;
21169: LD_ADDR_VAR 0 4
21173: PUSH
21174: LD_VAR 0 7
21178: PUSH
21179: LD_INT 1
21181: ARRAY
21182: ST_TO_ADDR
// end ; end ;
21183: LD_VAR 0 4
21187: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21188: LD_INT 0
21190: PPUSH
21191: PPUSH
// if not list then
21192: LD_VAR 0 1
21196: NOT
21197: IFFALSE 21201
// exit ;
21199: GO 21292
// i := list [ pos1 ] ;
21201: LD_ADDR_VAR 0 5
21205: PUSH
21206: LD_VAR 0 1
21210: PUSH
21211: LD_VAR 0 2
21215: ARRAY
21216: ST_TO_ADDR
// if not i then
21217: LD_VAR 0 5
21221: NOT
21222: IFFALSE 21226
// exit ;
21224: GO 21292
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21226: LD_ADDR_VAR 0 1
21230: PUSH
21231: LD_VAR 0 1
21235: PPUSH
21236: LD_VAR 0 2
21240: PPUSH
21241: LD_VAR 0 1
21245: PUSH
21246: LD_VAR 0 3
21250: ARRAY
21251: PPUSH
21252: CALL_OW 1
21256: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21257: LD_ADDR_VAR 0 1
21261: PUSH
21262: LD_VAR 0 1
21266: PPUSH
21267: LD_VAR 0 3
21271: PPUSH
21272: LD_VAR 0 5
21276: PPUSH
21277: CALL_OW 1
21281: ST_TO_ADDR
// result := list ;
21282: LD_ADDR_VAR 0 4
21286: PUSH
21287: LD_VAR 0 1
21291: ST_TO_ADDR
// end ;
21292: LD_VAR 0 4
21296: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21297: LD_INT 0
21299: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21300: LD_ADDR_VAR 0 5
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 250
21314: PPUSH
21315: LD_VAR 0 1
21319: PPUSH
21320: CALL_OW 251
21324: PPUSH
21325: LD_VAR 0 2
21329: PPUSH
21330: LD_VAR 0 3
21334: PPUSH
21335: LD_VAR 0 4
21339: PPUSH
21340: CALL 21722 0 5
21344: ST_TO_ADDR
// end ;
21345: LD_VAR 0 5
21349: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
21350: LD_INT 0
21352: PPUSH
21353: PPUSH
21354: PPUSH
21355: PPUSH
// if not list or not unit then
21356: LD_VAR 0 2
21360: NOT
21361: IFTRUE 21370
21363: PUSH
21364: LD_VAR 0 1
21368: NOT
21369: OR
21370: IFFALSE 21374
// exit ;
21372: GO 21717
// result := [ ] ;
21374: LD_ADDR_VAR 0 5
21378: PUSH
21379: EMPTY
21380: ST_TO_ADDR
// for i in list do
21381: LD_ADDR_VAR 0 6
21385: PUSH
21386: LD_VAR 0 2
21390: PUSH
21391: FOR_IN
21392: IFFALSE 21610
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
21394: LD_ADDR_VAR 0 8
21398: PUSH
21399: LD_VAR 0 1
21403: PPUSH
21404: LD_VAR 0 6
21408: PUSH
21409: LD_INT 1
21411: ARRAY
21412: PPUSH
21413: LD_VAR 0 6
21417: PUSH
21418: LD_INT 2
21420: ARRAY
21421: PPUSH
21422: CALL_OW 297
21426: ST_TO_ADDR
// if not Count ( result ) then
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL 17944 0 1
21436: NOT
21437: IFFALSE 21470
// begin result := Join ( result , [ i , tmp ] ) ;
21439: LD_ADDR_VAR 0 5
21443: PUSH
21444: LD_VAR 0 5
21448: PPUSH
21449: LD_VAR 0 6
21453: PUSH
21454: LD_VAR 0 8
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PPUSH
21463: CALL 53920 0 2
21467: ST_TO_ADDR
// continue ;
21468: GO 21391
// end ; if result [ result ] [ 2 ] <= tmp then
21470: LD_VAR 0 5
21474: PUSH
21475: LD_VAR 0 5
21479: ARRAY
21480: PUSH
21481: LD_INT 2
21483: ARRAY
21484: PUSH
21485: LD_VAR 0 8
21489: LESSEQUAL
21490: IFFALSE 21523
// result := Join ( result , [ i , tmp ] ) else
21492: LD_ADDR_VAR 0 5
21496: PUSH
21497: LD_VAR 0 5
21501: PPUSH
21502: LD_VAR 0 6
21506: PUSH
21507: LD_VAR 0 8
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PPUSH
21516: CALL 53920 0 2
21520: ST_TO_ADDR
21521: GO 21608
// begin for j := 1 to Count ( result ) do
21523: LD_ADDR_VAR 0 7
21527: PUSH
21528: DOUBLE
21529: LD_INT 1
21531: DEC
21532: ST_TO_ADDR
21533: LD_VAR 0 5
21537: PPUSH
21538: CALL 17944 0 1
21542: PUSH
21543: FOR_TO
21544: IFFALSE 21606
// begin if tmp < result [ j ] [ 2 ] then
21546: LD_VAR 0 8
21550: PUSH
21551: LD_VAR 0 5
21555: PUSH
21556: LD_VAR 0 7
21560: ARRAY
21561: PUSH
21562: LD_INT 2
21564: ARRAY
21565: LESS
21566: IFFALSE 21604
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21568: LD_ADDR_VAR 0 5
21572: PUSH
21573: LD_VAR 0 5
21577: PPUSH
21578: LD_VAR 0 7
21582: PPUSH
21583: LD_VAR 0 6
21587: PUSH
21588: LD_VAR 0 8
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PPUSH
21597: CALL_OW 2
21601: ST_TO_ADDR
// break ;
21602: GO 21606
// end ; end ;
21604: GO 21543
21606: POP
21607: POP
// end ; end ;
21608: GO 21391
21610: POP
21611: POP
// if result and not asc then
21612: LD_VAR 0 5
21616: IFFALSE 21625
21618: PUSH
21619: LD_VAR 0 3
21623: NOT
21624: AND
21625: IFFALSE 21642
// result := ReverseArray ( result ) ;
21627: LD_ADDR_VAR 0 5
21631: PUSH
21632: LD_VAR 0 5
21636: PPUSH
21637: CALL 49000 0 1
21641: ST_TO_ADDR
// tmp := [ ] ;
21642: LD_ADDR_VAR 0 8
21646: PUSH
21647: EMPTY
21648: ST_TO_ADDR
// if mode then
21649: LD_VAR 0 4
21653: IFFALSE 21717
// begin for i := 1 to result do
21655: LD_ADDR_VAR 0 6
21659: PUSH
21660: DOUBLE
21661: LD_INT 1
21663: DEC
21664: ST_TO_ADDR
21665: LD_VAR 0 5
21669: PUSH
21670: FOR_TO
21671: IFFALSE 21705
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
21673: LD_ADDR_VAR 0 8
21677: PUSH
21678: LD_VAR 0 8
21682: PPUSH
21683: LD_VAR 0 5
21687: PUSH
21688: LD_VAR 0 6
21692: ARRAY
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: PPUSH
21698: CALL 53920 0 2
21702: ST_TO_ADDR
21703: GO 21670
21705: POP
21706: POP
// result := tmp ;
21707: LD_ADDR_VAR 0 5
21711: PUSH
21712: LD_VAR 0 8
21716: ST_TO_ADDR
// end ; end ;
21717: LD_VAR 0 5
21721: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21722: LD_INT 0
21724: PPUSH
21725: PPUSH
21726: PPUSH
21727: PPUSH
// if not list then
21728: LD_VAR 0 3
21732: NOT
21733: IFFALSE 21737
// exit ;
21735: GO 22127
// result := [ ] ;
21737: LD_ADDR_VAR 0 6
21741: PUSH
21742: EMPTY
21743: ST_TO_ADDR
// for i in list do
21744: LD_ADDR_VAR 0 7
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: FOR_IN
21755: IFFALSE 21957
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21757: LD_ADDR_VAR 0 9
21761: PUSH
21762: LD_VAR 0 7
21766: PPUSH
21767: LD_VAR 0 1
21771: PPUSH
21772: LD_VAR 0 2
21776: PPUSH
21777: CALL_OW 297
21781: ST_TO_ADDR
// if not result then
21782: LD_VAR 0 6
21786: NOT
21787: IFFALSE 21813
// result := [ [ i , tmp ] ] else
21789: LD_ADDR_VAR 0 6
21793: PUSH
21794: LD_VAR 0 7
21798: PUSH
21799: LD_VAR 0 9
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: EMPTY
21809: LIST
21810: ST_TO_ADDR
21811: GO 21955
// begin if result [ result ] [ 2 ] <= tmp then
21813: LD_VAR 0 6
21817: PUSH
21818: LD_VAR 0 6
21822: ARRAY
21823: PUSH
21824: LD_INT 2
21826: ARRAY
21827: PUSH
21828: LD_VAR 0 9
21832: LESSEQUAL
21833: IFFALSE 21875
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21835: LD_ADDR_VAR 0 6
21839: PUSH
21840: LD_VAR 0 6
21844: PPUSH
21845: LD_VAR 0 6
21849: PUSH
21850: LD_INT 1
21852: PLUS
21853: PPUSH
21854: LD_VAR 0 7
21858: PUSH
21859: LD_VAR 0 9
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PPUSH
21868: CALL_OW 2
21872: ST_TO_ADDR
21873: GO 21955
// for j := 1 to result do
21875: LD_ADDR_VAR 0 8
21879: PUSH
21880: DOUBLE
21881: LD_INT 1
21883: DEC
21884: ST_TO_ADDR
21885: LD_VAR 0 6
21889: PUSH
21890: FOR_TO
21891: IFFALSE 21953
// begin if tmp < result [ j ] [ 2 ] then
21893: LD_VAR 0 9
21897: PUSH
21898: LD_VAR 0 6
21902: PUSH
21903: LD_VAR 0 8
21907: ARRAY
21908: PUSH
21909: LD_INT 2
21911: ARRAY
21912: LESS
21913: IFFALSE 21951
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21915: LD_ADDR_VAR 0 6
21919: PUSH
21920: LD_VAR 0 6
21924: PPUSH
21925: LD_VAR 0 8
21929: PPUSH
21930: LD_VAR 0 7
21934: PUSH
21935: LD_VAR 0 9
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PPUSH
21944: CALL_OW 2
21948: ST_TO_ADDR
// break ;
21949: GO 21953
// end ; end ;
21951: GO 21890
21953: POP
21954: POP
// end ; end ;
21955: GO 21754
21957: POP
21958: POP
// if result and not asc then
21959: LD_VAR 0 6
21963: IFFALSE 21972
21965: PUSH
21966: LD_VAR 0 4
21970: NOT
21971: AND
21972: IFFALSE 22047
// begin tmp := result ;
21974: LD_ADDR_VAR 0 9
21978: PUSH
21979: LD_VAR 0 6
21983: ST_TO_ADDR
// for i = tmp downto 1 do
21984: LD_ADDR_VAR 0 7
21988: PUSH
21989: DOUBLE
21990: LD_VAR 0 9
21994: INC
21995: ST_TO_ADDR
21996: LD_INT 1
21998: PUSH
21999: FOR_DOWNTO
22000: IFFALSE 22045
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22002: LD_ADDR_VAR 0 6
22006: PUSH
22007: LD_VAR 0 6
22011: PPUSH
22012: LD_VAR 0 9
22016: PUSH
22017: LD_VAR 0 7
22021: MINUS
22022: PUSH
22023: LD_INT 1
22025: PLUS
22026: PPUSH
22027: LD_VAR 0 9
22031: PUSH
22032: LD_VAR 0 7
22036: ARRAY
22037: PPUSH
22038: CALL_OW 1
22042: ST_TO_ADDR
22043: GO 21999
22045: POP
22046: POP
// end ; tmp := [ ] ;
22047: LD_ADDR_VAR 0 9
22051: PUSH
22052: EMPTY
22053: ST_TO_ADDR
// if mode then
22054: LD_VAR 0 5
22058: IFFALSE 22127
// begin for i = 1 to result do
22060: LD_ADDR_VAR 0 7
22064: PUSH
22065: DOUBLE
22066: LD_INT 1
22068: DEC
22069: ST_TO_ADDR
22070: LD_VAR 0 6
22074: PUSH
22075: FOR_TO
22076: IFFALSE 22115
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22078: LD_ADDR_VAR 0 9
22082: PUSH
22083: LD_VAR 0 9
22087: PPUSH
22088: LD_VAR 0 7
22092: PPUSH
22093: LD_VAR 0 6
22097: PUSH
22098: LD_VAR 0 7
22102: ARRAY
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: PPUSH
22108: CALL_OW 1
22112: ST_TO_ADDR
22113: GO 22075
22115: POP
22116: POP
// result := tmp ;
22117: LD_ADDR_VAR 0 6
22121: PUSH
22122: LD_VAR 0 9
22126: ST_TO_ADDR
// end ; end ;
22127: LD_VAR 0 6
22131: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22132: LD_INT 0
22134: PPUSH
22135: PPUSH
22136: PPUSH
22137: PPUSH
22138: PPUSH
22139: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22140: LD_ADDR_VAR 0 5
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: LD_INT 0
22150: PUSH
22151: LD_INT 0
22153: PUSH
22154: EMPTY
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: ST_TO_ADDR
// if not x or not y then
22162: LD_VAR 0 2
22166: NOT
22167: IFTRUE 22176
22169: PUSH
22170: LD_VAR 0 3
22174: NOT
22175: OR
22176: IFFALSE 22180
// exit ;
22178: GO 23836
// if not range then
22180: LD_VAR 0 4
22184: NOT
22185: IFFALSE 22195
// range := 10 ;
22187: LD_ADDR_VAR 0 4
22191: PUSH
22192: LD_INT 10
22194: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22195: LD_ADDR_VAR 0 8
22199: PUSH
22200: LD_INT 81
22202: PUSH
22203: LD_VAR 0 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 92
22214: PUSH
22215: LD_VAR 0 2
22219: PUSH
22220: LD_VAR 0 3
22224: PUSH
22225: LD_VAR 0 4
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PUSH
22236: LD_INT 3
22238: PUSH
22239: LD_INT 21
22241: PUSH
22242: LD_INT 3
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: LIST
22257: PPUSH
22258: CALL_OW 69
22262: ST_TO_ADDR
// if not tmp then
22263: LD_VAR 0 8
22267: NOT
22268: IFFALSE 22272
// exit ;
22270: GO 23836
// for i in tmp do
22272: LD_ADDR_VAR 0 6
22276: PUSH
22277: LD_VAR 0 8
22281: PUSH
22282: FOR_IN
22283: IFFALSE 23811
// begin points := [ 0 , 0 , 0 ] ;
22285: LD_ADDR_VAR 0 9
22289: PUSH
22290: LD_INT 0
22292: PUSH
22293: LD_INT 0
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: ST_TO_ADDR
// bpoints := 1 ;
22304: LD_ADDR_VAR 0 10
22308: PUSH
22309: LD_INT 1
22311: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22312: LD_VAR 0 6
22316: PPUSH
22317: CALL_OW 247
22321: PUSH
22322: LD_INT 1
22324: DOUBLE
22325: EQUAL
22326: IFTRUE 22330
22328: GO 22912
22330: POP
// begin if GetClass ( i ) = 1 then
22331: LD_VAR 0 6
22335: PPUSH
22336: CALL_OW 257
22340: PUSH
22341: LD_INT 1
22343: EQUAL
22344: IFFALSE 22365
// points := [ 10 , 5 , 3 ] ;
22346: LD_ADDR_VAR 0 9
22350: PUSH
22351: LD_INT 10
22353: PUSH
22354: LD_INT 5
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: LIST
22364: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22365: LD_VAR 0 6
22369: PPUSH
22370: CALL_OW 257
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 4
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: IN
22389: IFFALSE 22410
// points := [ 3 , 2 , 1 ] ;
22391: LD_ADDR_VAR 0 9
22395: PUSH
22396: LD_INT 3
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 1
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22410: LD_VAR 0 6
22414: PPUSH
22415: CALL_OW 257
22419: PUSH
22420: LD_INT 5
22422: EQUAL
22423: IFFALSE 22444
// points := [ 130 , 5 , 2 ] ;
22425: LD_ADDR_VAR 0 9
22429: PUSH
22430: LD_INT 130
22432: PUSH
22433: LD_INT 5
22435: PUSH
22436: LD_INT 2
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: LIST
22443: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22444: LD_VAR 0 6
22448: PPUSH
22449: CALL_OW 257
22453: PUSH
22454: LD_INT 8
22456: EQUAL
22457: IFFALSE 22478
// points := [ 35 , 35 , 30 ] ;
22459: LD_ADDR_VAR 0 9
22463: PUSH
22464: LD_INT 35
22466: PUSH
22467: LD_INT 35
22469: PUSH
22470: LD_INT 30
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: LIST
22477: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22478: LD_VAR 0 6
22482: PPUSH
22483: CALL_OW 257
22487: PUSH
22488: LD_INT 9
22490: EQUAL
22491: IFFALSE 22512
// points := [ 20 , 55 , 40 ] ;
22493: LD_ADDR_VAR 0 9
22497: PUSH
22498: LD_INT 20
22500: PUSH
22501: LD_INT 55
22503: PUSH
22504: LD_INT 40
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22512: LD_VAR 0 6
22516: PPUSH
22517: CALL_OW 257
22521: PUSH
22522: LD_INT 12
22524: PUSH
22525: LD_INT 16
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: IN
22532: IFFALSE 22553
// points := [ 5 , 3 , 2 ] ;
22534: LD_ADDR_VAR 0 9
22538: PUSH
22539: LD_INT 5
22541: PUSH
22542: LD_INT 3
22544: PUSH
22545: LD_INT 2
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22553: LD_VAR 0 6
22557: PPUSH
22558: CALL_OW 257
22562: PUSH
22563: LD_INT 17
22565: EQUAL
22566: IFFALSE 22587
// points := [ 100 , 50 , 75 ] ;
22568: LD_ADDR_VAR 0 9
22572: PUSH
22573: LD_INT 100
22575: PUSH
22576: LD_INT 50
22578: PUSH
22579: LD_INT 75
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: LIST
22586: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22587: LD_VAR 0 6
22591: PPUSH
22592: CALL_OW 257
22596: PUSH
22597: LD_INT 15
22599: EQUAL
22600: IFFALSE 22621
// points := [ 10 , 5 , 3 ] ;
22602: LD_ADDR_VAR 0 9
22606: PUSH
22607: LD_INT 10
22609: PUSH
22610: LD_INT 5
22612: PUSH
22613: LD_INT 3
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22621: LD_VAR 0 6
22625: PPUSH
22626: CALL_OW 257
22630: PUSH
22631: LD_INT 14
22633: EQUAL
22634: IFFALSE 22655
// points := [ 10 , 0 , 0 ] ;
22636: LD_ADDR_VAR 0 9
22640: PUSH
22641: LD_INT 10
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 0
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: LIST
22654: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22655: LD_VAR 0 6
22659: PPUSH
22660: CALL_OW 257
22664: PUSH
22665: LD_INT 11
22667: EQUAL
22668: IFFALSE 22689
// points := [ 30 , 10 , 5 ] ;
22670: LD_ADDR_VAR 0 9
22674: PUSH
22675: LD_INT 30
22677: PUSH
22678: LD_INT 10
22680: PUSH
22681: LD_INT 5
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: LIST
22688: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22689: LD_VAR 0 1
22693: PPUSH
22694: LD_INT 5
22696: PPUSH
22697: CALL_OW 321
22701: PUSH
22702: LD_INT 2
22704: EQUAL
22705: IFFALSE 22722
// bpoints := bpoints * 1.8 ;
22707: LD_ADDR_VAR 0 10
22711: PUSH
22712: LD_VAR 0 10
22716: PUSH
22717: LD_REAL  1.80000000000000E+0000
22720: MUL
22721: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22722: LD_VAR 0 6
22726: PPUSH
22727: CALL_OW 257
22731: PUSH
22732: LD_INT 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 3
22740: PUSH
22741: LD_INT 4
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: IN
22750: IFFALSE 22770
22752: PUSH
22753: LD_VAR 0 1
22757: PPUSH
22758: LD_INT 51
22760: PPUSH
22761: CALL_OW 321
22765: PUSH
22766: LD_INT 2
22768: EQUAL
22769: AND
22770: IFFALSE 22787
// bpoints := bpoints * 1.2 ;
22772: LD_ADDR_VAR 0 10
22776: PUSH
22777: LD_VAR 0 10
22781: PUSH
22782: LD_REAL  1.20000000000000E+0000
22785: MUL
22786: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22787: LD_VAR 0 6
22791: PPUSH
22792: CALL_OW 257
22796: PUSH
22797: LD_INT 5
22799: PUSH
22800: LD_INT 7
22802: PUSH
22803: LD_INT 9
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: IN
22811: IFFALSE 22831
22813: PUSH
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_INT 52
22821: PPUSH
22822: CALL_OW 321
22826: PUSH
22827: LD_INT 2
22829: EQUAL
22830: AND
22831: IFFALSE 22848
// bpoints := bpoints * 1.5 ;
22833: LD_ADDR_VAR 0 10
22837: PUSH
22838: LD_VAR 0 10
22842: PUSH
22843: LD_REAL  1.50000000000000E+0000
22846: MUL
22847: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22848: LD_VAR 0 1
22852: PPUSH
22853: LD_INT 66
22855: PPUSH
22856: CALL_OW 321
22860: PUSH
22861: LD_INT 2
22863: EQUAL
22864: IFFALSE 22881
// bpoints := bpoints * 1.1 ;
22866: LD_ADDR_VAR 0 10
22870: PUSH
22871: LD_VAR 0 10
22875: PUSH
22876: LD_REAL  1.10000000000000E+0000
22879: MUL
22880: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22881: LD_ADDR_VAR 0 10
22885: PUSH
22886: LD_VAR 0 10
22890: PUSH
22891: LD_VAR 0 6
22895: PPUSH
22896: LD_INT 1
22898: PPUSH
22899: CALL_OW 259
22903: PUSH
22904: LD_REAL  1.15000000000000E+0000
22907: MUL
22908: MUL
22909: ST_TO_ADDR
// end ; unit_vehicle :
22910: GO 23740
22912: LD_INT 2
22914: DOUBLE
22915: EQUAL
22916: IFTRUE 22920
22918: GO 23728
22920: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22921: LD_VAR 0 6
22925: PPUSH
22926: CALL_OW 264
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: LD_INT 42
22936: PUSH
22937: LD_INT 24
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: LIST
22944: IN
22945: IFFALSE 22966
// points := [ 25 , 5 , 3 ] ;
22947: LD_ADDR_VAR 0 9
22951: PUSH
22952: LD_INT 25
22954: PUSH
22955: LD_INT 5
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22966: LD_VAR 0 6
22970: PPUSH
22971: CALL_OW 264
22975: PUSH
22976: LD_INT 4
22978: PUSH
22979: LD_INT 43
22981: PUSH
22982: LD_INT 25
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: IN
22990: IFFALSE 23011
// points := [ 40 , 15 , 5 ] ;
22992: LD_ADDR_VAR 0 9
22996: PUSH
22997: LD_INT 40
22999: PUSH
23000: LD_INT 15
23002: PUSH
23003: LD_INT 5
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: LIST
23010: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23011: LD_VAR 0 6
23015: PPUSH
23016: CALL_OW 264
23020: PUSH
23021: LD_INT 3
23023: PUSH
23024: LD_INT 23
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: IN
23031: IFFALSE 23052
// points := [ 7 , 25 , 8 ] ;
23033: LD_ADDR_VAR 0 9
23037: PUSH
23038: LD_INT 7
23040: PUSH
23041: LD_INT 25
23043: PUSH
23044: LD_INT 8
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: LIST
23051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23052: LD_VAR 0 6
23056: PPUSH
23057: CALL_OW 264
23061: PUSH
23062: LD_INT 5
23064: PUSH
23065: LD_INT 27
23067: PUSH
23068: LD_INT 44
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: IN
23076: IFFALSE 23097
// points := [ 14 , 50 , 16 ] ;
23078: LD_ADDR_VAR 0 9
23082: PUSH
23083: LD_INT 14
23085: PUSH
23086: LD_INT 50
23088: PUSH
23089: LD_INT 16
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: LIST
23096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23097: LD_VAR 0 6
23101: PPUSH
23102: CALL_OW 264
23106: PUSH
23107: LD_INT 6
23109: PUSH
23110: LD_INT 46
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: IN
23117: IFFALSE 23138
// points := [ 32 , 120 , 70 ] ;
23119: LD_ADDR_VAR 0 9
23123: PUSH
23124: LD_INT 32
23126: PUSH
23127: LD_INT 120
23129: PUSH
23130: LD_INT 70
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23138: LD_VAR 0 6
23142: PPUSH
23143: CALL_OW 264
23147: PUSH
23148: LD_INT 7
23150: PUSH
23151: LD_INT 28
23153: PUSH
23154: LD_INT 45
23156: PUSH
23157: LD_INT 92
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: IN
23166: IFFALSE 23187
// points := [ 35 , 20 , 45 ] ;
23168: LD_ADDR_VAR 0 9
23172: PUSH
23173: LD_INT 35
23175: PUSH
23176: LD_INT 20
23178: PUSH
23179: LD_INT 45
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23187: LD_VAR 0 6
23191: PPUSH
23192: CALL_OW 264
23196: PUSH
23197: LD_INT 47
23199: PUSH
23200: EMPTY
23201: LIST
23202: IN
23203: IFFALSE 23224
// points := [ 67 , 45 , 75 ] ;
23205: LD_ADDR_VAR 0 9
23209: PUSH
23210: LD_INT 67
23212: PUSH
23213: LD_INT 45
23215: PUSH
23216: LD_INT 75
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23224: LD_VAR 0 6
23228: PPUSH
23229: CALL_OW 264
23233: PUSH
23234: LD_INT 26
23236: PUSH
23237: EMPTY
23238: LIST
23239: IN
23240: IFFALSE 23261
// points := [ 120 , 30 , 80 ] ;
23242: LD_ADDR_VAR 0 9
23246: PUSH
23247: LD_INT 120
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: LD_INT 80
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: LIST
23260: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23261: LD_VAR 0 6
23265: PPUSH
23266: CALL_OW 264
23270: PUSH
23271: LD_INT 22
23273: PUSH
23274: EMPTY
23275: LIST
23276: IN
23277: IFFALSE 23298
// points := [ 40 , 1 , 1 ] ;
23279: LD_ADDR_VAR 0 9
23283: PUSH
23284: LD_INT 40
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: LD_INT 1
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: LIST
23297: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23298: LD_VAR 0 6
23302: PPUSH
23303: CALL_OW 264
23307: PUSH
23308: LD_INT 29
23310: PUSH
23311: EMPTY
23312: LIST
23313: IN
23314: IFFALSE 23335
// points := [ 70 , 200 , 400 ] ;
23316: LD_ADDR_VAR 0 9
23320: PUSH
23321: LD_INT 70
23323: PUSH
23324: LD_INT 200
23326: PUSH
23327: LD_INT 400
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: LIST
23334: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23335: LD_VAR 0 6
23339: PPUSH
23340: CALL_OW 264
23344: PUSH
23345: LD_INT 14
23347: PUSH
23348: LD_INT 53
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: IN
23355: IFFALSE 23376
// points := [ 40 , 10 , 20 ] ;
23357: LD_ADDR_VAR 0 9
23361: PUSH
23362: LD_INT 40
23364: PUSH
23365: LD_INT 10
23367: PUSH
23368: LD_INT 20
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: LIST
23375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23376: LD_VAR 0 6
23380: PPUSH
23381: CALL_OW 264
23385: PUSH
23386: LD_INT 9
23388: PUSH
23389: EMPTY
23390: LIST
23391: IN
23392: IFFALSE 23413
// points := [ 5 , 70 , 20 ] ;
23394: LD_ADDR_VAR 0 9
23398: PUSH
23399: LD_INT 5
23401: PUSH
23402: LD_INT 70
23404: PUSH
23405: LD_INT 20
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23413: LD_VAR 0 6
23417: PPUSH
23418: CALL_OW 264
23422: PUSH
23423: LD_INT 10
23425: PUSH
23426: EMPTY
23427: LIST
23428: IN
23429: IFFALSE 23450
// points := [ 35 , 110 , 70 ] ;
23431: LD_ADDR_VAR 0 9
23435: PUSH
23436: LD_INT 35
23438: PUSH
23439: LD_INT 110
23441: PUSH
23442: LD_INT 70
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: LIST
23449: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23450: LD_VAR 0 6
23454: PPUSH
23455: CALL_OW 265
23459: PUSH
23460: LD_INT 25
23462: EQUAL
23463: IFFALSE 23484
// points := [ 80 , 65 , 100 ] ;
23465: LD_ADDR_VAR 0 9
23469: PUSH
23470: LD_INT 80
23472: PUSH
23473: LD_INT 65
23475: PUSH
23476: LD_INT 100
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: LIST
23483: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23484: LD_VAR 0 6
23488: PPUSH
23489: CALL_OW 263
23493: PUSH
23494: LD_INT 1
23496: EQUAL
23497: IFFALSE 23532
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23499: LD_ADDR_VAR 0 10
23503: PUSH
23504: LD_VAR 0 10
23508: PUSH
23509: LD_VAR 0 6
23513: PPUSH
23514: CALL_OW 311
23518: PPUSH
23519: LD_INT 3
23521: PPUSH
23522: CALL_OW 259
23526: PUSH
23527: LD_INT 4
23529: MUL
23530: MUL
23531: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23532: LD_VAR 0 6
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 2
23544: EQUAL
23545: IFFALSE 23596
// begin j := IsControledBy ( i ) ;
23547: LD_ADDR_VAR 0 7
23551: PUSH
23552: LD_VAR 0 6
23556: PPUSH
23557: CALL_OW 312
23561: ST_TO_ADDR
// if j then
23562: LD_VAR 0 7
23566: IFFALSE 23596
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23568: LD_ADDR_VAR 0 10
23572: PUSH
23573: LD_VAR 0 10
23577: PUSH
23578: LD_VAR 0 7
23582: PPUSH
23583: LD_INT 3
23585: PPUSH
23586: CALL_OW 259
23590: PUSH
23591: LD_INT 3
23593: MUL
23594: MUL
23595: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23596: LD_VAR 0 6
23600: PPUSH
23601: CALL_OW 264
23605: PUSH
23606: LD_INT 5
23608: PUSH
23609: LD_INT 6
23611: PUSH
23612: LD_INT 46
23614: PUSH
23615: LD_INT 44
23617: PUSH
23618: LD_INT 47
23620: PUSH
23621: LD_INT 45
23623: PUSH
23624: LD_INT 28
23626: PUSH
23627: LD_INT 7
23629: PUSH
23630: LD_INT 27
23632: PUSH
23633: LD_INT 29
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: IN
23648: IFFALSE 23668
23650: PUSH
23651: LD_VAR 0 1
23655: PPUSH
23656: LD_INT 52
23658: PPUSH
23659: CALL_OW 321
23663: PUSH
23664: LD_INT 2
23666: EQUAL
23667: AND
23668: IFFALSE 23685
// bpoints := bpoints * 1.2 ;
23670: LD_ADDR_VAR 0 10
23674: PUSH
23675: LD_VAR 0 10
23679: PUSH
23680: LD_REAL  1.20000000000000E+0000
23683: MUL
23684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23685: LD_VAR 0 6
23689: PPUSH
23690: CALL_OW 264
23694: PUSH
23695: LD_INT 6
23697: PUSH
23698: LD_INT 46
23700: PUSH
23701: LD_INT 47
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: LIST
23708: IN
23709: IFFALSE 23726
// bpoints := bpoints * 1.2 ;
23711: LD_ADDR_VAR 0 10
23715: PUSH
23716: LD_VAR 0 10
23720: PUSH
23721: LD_REAL  1.20000000000000E+0000
23724: MUL
23725: ST_TO_ADDR
// end ; unit_building :
23726: GO 23740
23728: LD_INT 3
23730: DOUBLE
23731: EQUAL
23732: IFTRUE 23736
23734: GO 23739
23736: POP
// ; end ;
23737: GO 23740
23739: POP
// for j = 1 to 3 do
23740: LD_ADDR_VAR 0 7
23744: PUSH
23745: DOUBLE
23746: LD_INT 1
23748: DEC
23749: ST_TO_ADDR
23750: LD_INT 3
23752: PUSH
23753: FOR_TO
23754: IFFALSE 23807
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23756: LD_ADDR_VAR 0 5
23760: PUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: LD_VAR 0 7
23770: PPUSH
23771: LD_VAR 0 5
23775: PUSH
23776: LD_VAR 0 7
23780: ARRAY
23781: PUSH
23782: LD_VAR 0 9
23786: PUSH
23787: LD_VAR 0 7
23791: ARRAY
23792: PUSH
23793: LD_VAR 0 10
23797: MUL
23798: PLUS
23799: PPUSH
23800: CALL_OW 1
23804: ST_TO_ADDR
23805: GO 23753
23807: POP
23808: POP
// end ;
23809: GO 22282
23811: POP
23812: POP
// result := Replace ( result , 4 , tmp ) ;
23813: LD_ADDR_VAR 0 5
23817: PUSH
23818: LD_VAR 0 5
23822: PPUSH
23823: LD_INT 4
23825: PPUSH
23826: LD_VAR 0 8
23830: PPUSH
23831: CALL_OW 1
23835: ST_TO_ADDR
// end ;
23836: LD_VAR 0 5
23840: RET
// export function DangerAtRange ( unit , range ) ; begin
23841: LD_INT 0
23843: PPUSH
// if not unit then
23844: LD_VAR 0 1
23848: NOT
23849: IFFALSE 23853
// exit ;
23851: GO 23898
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23853: LD_ADDR_VAR 0 3
23857: PUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 255
23867: PPUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 250
23877: PPUSH
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 251
23887: PPUSH
23888: LD_VAR 0 2
23892: PPUSH
23893: CALL 22132 0 4
23897: ST_TO_ADDR
// end ;
23898: LD_VAR 0 3
23902: RET
// export function DangerInArea ( side , area ) ; begin
23903: LD_INT 0
23905: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_VAR 0 2
23915: PPUSH
23916: LD_INT 81
23918: PUSH
23919: LD_VAR 0 1
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PPUSH
23928: CALL_OW 70
23932: ST_TO_ADDR
// end ;
23933: LD_VAR 0 3
23937: RET
// export function IsExtension ( b ) ; begin
23938: LD_INT 0
23940: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23941: LD_ADDR_VAR 0 2
23945: PUSH
23946: LD_VAR 0 1
23950: PUSH
23951: LD_INT 23
23953: PUSH
23954: LD_INT 20
23956: PUSH
23957: LD_INT 22
23959: PUSH
23960: LD_INT 17
23962: PUSH
23963: LD_INT 24
23965: PUSH
23966: LD_INT 21
23968: PUSH
23969: LD_INT 19
23971: PUSH
23972: LD_INT 16
23974: PUSH
23975: LD_INT 25
23977: PUSH
23978: LD_INT 18
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: IN
23993: ST_TO_ADDR
// end ;
23994: LD_VAR 0 2
23998: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23999: LD_INT 0
24001: PPUSH
24002: PPUSH
24003: PPUSH
// result := [ ] ;
24004: LD_ADDR_VAR 0 4
24008: PUSH
24009: EMPTY
24010: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24011: LD_ADDR_VAR 0 5
24015: PUSH
24016: LD_VAR 0 2
24020: PPUSH
24021: LD_INT 21
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PPUSH
24031: CALL_OW 70
24035: ST_TO_ADDR
// if not tmp then
24036: LD_VAR 0 5
24040: NOT
24041: IFFALSE 24045
// exit ;
24043: GO 24109
// if checkLink then
24045: LD_VAR 0 3
24049: IFFALSE 24099
// begin for i in tmp do
24051: LD_ADDR_VAR 0 6
24055: PUSH
24056: LD_VAR 0 5
24060: PUSH
24061: FOR_IN
24062: IFFALSE 24097
// if GetBase ( i ) <> base then
24064: LD_VAR 0 6
24068: PPUSH
24069: CALL_OW 274
24073: PUSH
24074: LD_VAR 0 1
24078: NONEQUAL
24079: IFFALSE 24095
// ComLinkToBase ( base , i ) ;
24081: LD_VAR 0 1
24085: PPUSH
24086: LD_VAR 0 6
24090: PPUSH
24091: CALL_OW 169
24095: GO 24061
24097: POP
24098: POP
// end ; result := tmp ;
24099: LD_ADDR_VAR 0 4
24103: PUSH
24104: LD_VAR 0 5
24108: ST_TO_ADDR
// end ;
24109: LD_VAR 0 4
24113: RET
// export function ComComplete ( units , b ) ; var i ; begin
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
// if not units then
24118: LD_VAR 0 1
24122: NOT
24123: IFFALSE 24127
// exit ;
24125: GO 24217
// for i in units do
24127: LD_ADDR_VAR 0 4
24131: PUSH
24132: LD_VAR 0 1
24136: PUSH
24137: FOR_IN
24138: IFFALSE 24215
// if BuildingStatus ( b ) = bs_build then
24140: LD_VAR 0 2
24144: PPUSH
24145: CALL_OW 461
24149: PUSH
24150: LD_INT 1
24152: EQUAL
24153: IFFALSE 24213
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24155: LD_VAR 0 4
24159: PPUSH
24160: LD_STRING h
24162: PUSH
24163: LD_VAR 0 2
24167: PPUSH
24168: CALL_OW 250
24172: PUSH
24173: LD_VAR 0 2
24177: PPUSH
24178: CALL_OW 251
24182: PUSH
24183: LD_VAR 0 2
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: PUSH
24206: EMPTY
24207: LIST
24208: PPUSH
24209: CALL_OW 446
24213: GO 24137
24215: POP
24216: POP
// end ;
24217: LD_VAR 0 3
24221: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24222: LD_INT 0
24224: PPUSH
24225: PPUSH
24226: PPUSH
24227: PPUSH
24228: PPUSH
24229: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24230: LD_VAR 0 1
24234: NOT
24235: IFTRUE 24252
24237: PUSH
24238: LD_VAR 0 1
24242: PPUSH
24243: CALL_OW 263
24247: PUSH
24248: LD_INT 2
24250: NONEQUAL
24251: OR
24252: IFFALSE 24256
// exit ;
24254: GO 24572
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24256: LD_ADDR_VAR 0 6
24260: PUSH
24261: LD_INT 22
24263: PUSH
24264: LD_VAR 0 1
24268: PPUSH
24269: CALL_OW 255
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: LD_INT 30
24283: PUSH
24284: LD_INT 36
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 34
24293: PUSH
24294: LD_INT 31
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PPUSH
24310: CALL_OW 69
24314: ST_TO_ADDR
// if not tmp then
24315: LD_VAR 0 6
24319: NOT
24320: IFFALSE 24324
// exit ;
24322: GO 24572
// result := [ ] ;
24324: LD_ADDR_VAR 0 2
24328: PUSH
24329: EMPTY
24330: ST_TO_ADDR
// for i in tmp do
24331: LD_ADDR_VAR 0 3
24335: PUSH
24336: LD_VAR 0 6
24340: PUSH
24341: FOR_IN
24342: IFFALSE 24413
// begin t := UnitsInside ( i ) ;
24344: LD_ADDR_VAR 0 4
24348: PUSH
24349: LD_VAR 0 3
24353: PPUSH
24354: CALL_OW 313
24358: ST_TO_ADDR
// if t then
24359: LD_VAR 0 4
24363: IFFALSE 24411
// for j in t do
24365: LD_ADDR_VAR 0 7
24369: PUSH
24370: LD_VAR 0 4
24374: PUSH
24375: FOR_IN
24376: IFFALSE 24409
// result := Replace ( result , result + 1 , j ) ;
24378: LD_ADDR_VAR 0 2
24382: PUSH
24383: LD_VAR 0 2
24387: PPUSH
24388: LD_VAR 0 2
24392: PUSH
24393: LD_INT 1
24395: PLUS
24396: PPUSH
24397: LD_VAR 0 7
24401: PPUSH
24402: CALL_OW 1
24406: ST_TO_ADDR
24407: GO 24375
24409: POP
24410: POP
// end ;
24411: GO 24341
24413: POP
24414: POP
// if not result then
24415: LD_VAR 0 2
24419: NOT
24420: IFFALSE 24424
// exit ;
24422: GO 24572
// mech := result [ 1 ] ;
24424: LD_ADDR_VAR 0 5
24428: PUSH
24429: LD_VAR 0 2
24433: PUSH
24434: LD_INT 1
24436: ARRAY
24437: ST_TO_ADDR
// if result > 1 then
24438: LD_VAR 0 2
24442: PUSH
24443: LD_INT 1
24445: GREATER
24446: IFFALSE 24558
// begin for i = 2 to result do
24448: LD_ADDR_VAR 0 3
24452: PUSH
24453: DOUBLE
24454: LD_INT 2
24456: DEC
24457: ST_TO_ADDR
24458: LD_VAR 0 2
24462: PUSH
24463: FOR_TO
24464: IFFALSE 24556
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24466: LD_ADDR_VAR 0 4
24470: PUSH
24471: LD_VAR 0 2
24475: PUSH
24476: LD_VAR 0 3
24480: ARRAY
24481: PPUSH
24482: LD_INT 3
24484: PPUSH
24485: CALL_OW 259
24489: PUSH
24490: LD_VAR 0 2
24494: PUSH
24495: LD_VAR 0 3
24499: ARRAY
24500: PPUSH
24501: CALL_OW 432
24505: MINUS
24506: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24507: LD_VAR 0 4
24511: PUSH
24512: LD_VAR 0 5
24516: PPUSH
24517: LD_INT 3
24519: PPUSH
24520: CALL_OW 259
24524: PUSH
24525: LD_VAR 0 5
24529: PPUSH
24530: CALL_OW 432
24534: MINUS
24535: GREATEREQUAL
24536: IFFALSE 24554
// mech := result [ i ] ;
24538: LD_ADDR_VAR 0 5
24542: PUSH
24543: LD_VAR 0 2
24547: PUSH
24548: LD_VAR 0 3
24552: ARRAY
24553: ST_TO_ADDR
// end ;
24554: GO 24463
24556: POP
24557: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_VAR 0 5
24567: PPUSH
24568: CALL_OW 135
// end ;
24572: LD_VAR 0 2
24576: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24577: LD_INT 0
24579: PPUSH
24580: PPUSH
24581: PPUSH
24582: PPUSH
24583: PPUSH
24584: PPUSH
24585: PPUSH
24586: PPUSH
24587: PPUSH
24588: PPUSH
24589: PPUSH
24590: PPUSH
24591: PPUSH
// result := [ ] ;
24592: LD_ADDR_VAR 0 7
24596: PUSH
24597: EMPTY
24598: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24599: LD_VAR 0 1
24603: PPUSH
24604: CALL_OW 266
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: IN
24619: NOT
24620: IFFALSE 24624
// exit ;
24622: GO 26264
// if name then
24624: LD_VAR 0 3
24628: IFFALSE 24644
// SetBName ( base_dep , name ) ;
24630: LD_VAR 0 1
24634: PPUSH
24635: LD_VAR 0 3
24639: PPUSH
24640: CALL_OW 500
// base := GetBase ( base_dep ) ;
24644: LD_ADDR_VAR 0 15
24648: PUSH
24649: LD_VAR 0 1
24653: PPUSH
24654: CALL_OW 274
24658: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24659: LD_ADDR_VAR 0 16
24663: PUSH
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 255
24673: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24674: LD_ADDR_VAR 0 17
24678: PUSH
24679: LD_VAR 0 1
24683: PPUSH
24684: CALL_OW 248
24688: ST_TO_ADDR
// if sources then
24689: LD_VAR 0 5
24693: IFFALSE 24740
// for i = 1 to 3 do
24695: LD_ADDR_VAR 0 8
24699: PUSH
24700: DOUBLE
24701: LD_INT 1
24703: DEC
24704: ST_TO_ADDR
24705: LD_INT 3
24707: PUSH
24708: FOR_TO
24709: IFFALSE 24738
// AddResourceType ( base , i , sources [ i ] ) ;
24711: LD_VAR 0 15
24715: PPUSH
24716: LD_VAR 0 8
24720: PPUSH
24721: LD_VAR 0 5
24725: PUSH
24726: LD_VAR 0 8
24730: ARRAY
24731: PPUSH
24732: CALL_OW 276
24736: GO 24708
24738: POP
24739: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24740: LD_ADDR_VAR 0 18
24744: PUSH
24745: LD_VAR 0 15
24749: PPUSH
24750: LD_VAR 0 2
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: CALL 23999 0 3
24762: ST_TO_ADDR
// InitHc ;
24763: CALL_OW 19
// InitUc ;
24767: CALL_OW 18
// uc_side := side ;
24771: LD_ADDR_OWVAR 20
24775: PUSH
24776: LD_VAR 0 16
24780: ST_TO_ADDR
// uc_nation := nation ;
24781: LD_ADDR_OWVAR 21
24785: PUSH
24786: LD_VAR 0 17
24790: ST_TO_ADDR
// if buildings then
24791: LD_VAR 0 18
24795: IFFALSE 26123
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24797: LD_ADDR_VAR 0 19
24801: PUSH
24802: LD_VAR 0 18
24806: PPUSH
24807: LD_INT 2
24809: PUSH
24810: LD_INT 30
24812: PUSH
24813: LD_INT 29
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 30
24822: PUSH
24823: LD_INT 30
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 72
24839: ST_TO_ADDR
// if tmp then
24840: LD_VAR 0 19
24844: IFFALSE 24892
// for i in tmp do
24846: LD_ADDR_VAR 0 8
24850: PUSH
24851: LD_VAR 0 19
24855: PUSH
24856: FOR_IN
24857: IFFALSE 24890
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24859: LD_VAR 0 8
24863: PPUSH
24864: CALL_OW 250
24868: PPUSH
24869: LD_VAR 0 8
24873: PPUSH
24874: CALL_OW 251
24878: PPUSH
24879: LD_VAR 0 16
24883: PPUSH
24884: CALL_OW 441
24888: GO 24856
24890: POP
24891: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24892: LD_VAR 0 18
24896: PPUSH
24897: LD_INT 2
24899: PUSH
24900: LD_INT 30
24902: PUSH
24903: LD_INT 32
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 30
24912: PUSH
24913: LD_INT 33
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: LIST
24924: PPUSH
24925: CALL_OW 72
24929: IFFALSE 25017
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24931: LD_ADDR_VAR 0 8
24935: PUSH
24936: LD_VAR 0 18
24940: PPUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 30
24946: PUSH
24947: LD_INT 32
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 30
24956: PUSH
24957: LD_INT 33
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 72
24973: PUSH
24974: FOR_IN
24975: IFFALSE 25015
// begin if not GetBWeapon ( i ) then
24977: LD_VAR 0 8
24981: PPUSH
24982: CALL_OW 269
24986: NOT
24987: IFFALSE 25013
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24989: LD_VAR 0 8
24993: PPUSH
24994: LD_VAR 0 8
24998: PPUSH
24999: LD_VAR 0 2
25003: PPUSH
25004: CALL 26269 0 2
25008: PPUSH
25009: CALL_OW 431
// end ;
25013: GO 24974
25015: POP
25016: POP
// end ; for i = 1 to personel do
25017: LD_ADDR_VAR 0 8
25021: PUSH
25022: DOUBLE
25023: LD_INT 1
25025: DEC
25026: ST_TO_ADDR
25027: LD_VAR 0 6
25031: PUSH
25032: FOR_TO
25033: IFFALSE 26103
// begin if i > 4 then
25035: LD_VAR 0 8
25039: PUSH
25040: LD_INT 4
25042: GREATER
25043: IFFALSE 25047
// break ;
25045: GO 26103
// case i of 1 :
25047: LD_VAR 0 8
25051: PUSH
25052: LD_INT 1
25054: DOUBLE
25055: EQUAL
25056: IFTRUE 25060
25058: GO 25140
25060: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25061: LD_ADDR_VAR 0 12
25065: PUSH
25066: LD_VAR 0 18
25070: PPUSH
25071: LD_INT 22
25073: PUSH
25074: LD_VAR 0 16
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 58
25085: PUSH
25086: EMPTY
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 30
25094: PUSH
25095: LD_INT 32
25097: PUSH
25098: EMPTY
25099: LIST
25100: LIST
25101: PUSH
25102: LD_INT 30
25104: PUSH
25105: LD_INT 4
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 30
25114: PUSH
25115: LD_INT 5
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: LIST
25132: PPUSH
25133: CALL_OW 72
25137: ST_TO_ADDR
25138: GO 25362
25140: LD_INT 2
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25210
25148: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25149: LD_ADDR_VAR 0 12
25153: PUSH
25154: LD_VAR 0 18
25158: PPUSH
25159: LD_INT 22
25161: PUSH
25162: LD_VAR 0 16
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 2
25173: PUSH
25174: LD_INT 30
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PUSH
25184: LD_INT 30
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: PUSH
25199: EMPTY
25200: LIST
25201: LIST
25202: PPUSH
25203: CALL_OW 72
25207: ST_TO_ADDR
25208: GO 25362
25210: LD_INT 3
25212: DOUBLE
25213: EQUAL
25214: IFTRUE 25218
25216: GO 25280
25218: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25219: LD_ADDR_VAR 0 12
25223: PUSH
25224: LD_VAR 0 18
25228: PPUSH
25229: LD_INT 22
25231: PUSH
25232: LD_VAR 0 16
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PUSH
25241: LD_INT 2
25243: PUSH
25244: LD_INT 30
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 30
25256: PUSH
25257: LD_INT 3
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PPUSH
25273: CALL_OW 72
25277: ST_TO_ADDR
25278: GO 25362
25280: LD_INT 4
25282: DOUBLE
25283: EQUAL
25284: IFTRUE 25288
25286: GO 25361
25288: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25289: LD_ADDR_VAR 0 12
25293: PUSH
25294: LD_VAR 0 18
25298: PPUSH
25299: LD_INT 22
25301: PUSH
25302: LD_VAR 0 16
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: LD_INT 2
25313: PUSH
25314: LD_INT 30
25316: PUSH
25317: LD_INT 6
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PUSH
25324: LD_INT 30
25326: PUSH
25327: LD_INT 7
25329: PUSH
25330: EMPTY
25331: LIST
25332: LIST
25333: PUSH
25334: LD_INT 30
25336: PUSH
25337: LD_INT 8
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PPUSH
25354: CALL_OW 72
25358: ST_TO_ADDR
25359: GO 25362
25361: POP
// if i = 1 then
25362: LD_VAR 0 8
25366: PUSH
25367: LD_INT 1
25369: EQUAL
25370: IFFALSE 25481
// begin tmp := [ ] ;
25372: LD_ADDR_VAR 0 19
25376: PUSH
25377: EMPTY
25378: ST_TO_ADDR
// for j in f do
25379: LD_ADDR_VAR 0 9
25383: PUSH
25384: LD_VAR 0 12
25388: PUSH
25389: FOR_IN
25390: IFFALSE 25463
// if GetBType ( j ) = b_bunker then
25392: LD_VAR 0 9
25396: PPUSH
25397: CALL_OW 266
25401: PUSH
25402: LD_INT 32
25404: EQUAL
25405: IFFALSE 25432
// tmp := Insert ( tmp , 1 , j ) else
25407: LD_ADDR_VAR 0 19
25411: PUSH
25412: LD_VAR 0 19
25416: PPUSH
25417: LD_INT 1
25419: PPUSH
25420: LD_VAR 0 9
25424: PPUSH
25425: CALL_OW 2
25429: ST_TO_ADDR
25430: GO 25461
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25432: LD_ADDR_VAR 0 19
25436: PUSH
25437: LD_VAR 0 19
25441: PPUSH
25442: LD_VAR 0 19
25446: PUSH
25447: LD_INT 1
25449: PLUS
25450: PPUSH
25451: LD_VAR 0 9
25455: PPUSH
25456: CALL_OW 2
25460: ST_TO_ADDR
25461: GO 25389
25463: POP
25464: POP
// if tmp then
25465: LD_VAR 0 19
25469: IFFALSE 25481
// f := tmp ;
25471: LD_ADDR_VAR 0 12
25475: PUSH
25476: LD_VAR 0 19
25480: ST_TO_ADDR
// end ; x := personel [ i ] ;
25481: LD_ADDR_VAR 0 13
25485: PUSH
25486: LD_VAR 0 6
25490: PUSH
25491: LD_VAR 0 8
25495: ARRAY
25496: ST_TO_ADDR
// if x = - 1 then
25497: LD_VAR 0 13
25501: PUSH
25502: LD_INT 1
25504: NEG
25505: EQUAL
25506: IFFALSE 25717
// begin for j in f do
25508: LD_ADDR_VAR 0 9
25512: PUSH
25513: LD_VAR 0 12
25517: PUSH
25518: FOR_IN
25519: IFFALSE 25713
// repeat InitHc ;
25521: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25525: LD_VAR 0 9
25529: PPUSH
25530: CALL_OW 266
25534: PUSH
25535: LD_INT 5
25537: EQUAL
25538: IFFALSE 25608
// begin if UnitsInside ( j ) < 3 then
25540: LD_VAR 0 9
25544: PPUSH
25545: CALL_OW 313
25549: PUSH
25550: LD_INT 3
25552: LESS
25553: IFFALSE 25589
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25555: LD_INT 0
25557: PPUSH
25558: LD_INT 5
25560: PUSH
25561: LD_INT 8
25563: PUSH
25564: LD_INT 9
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: LIST
25571: PUSH
25572: LD_VAR 0 17
25576: ARRAY
25577: PPUSH
25578: LD_VAR 0 4
25582: PPUSH
25583: CALL_OW 380
25587: GO 25606
// PrepareHuman ( false , i , skill ) ;
25589: LD_INT 0
25591: PPUSH
25592: LD_VAR 0 8
25596: PPUSH
25597: LD_VAR 0 4
25601: PPUSH
25602: CALL_OW 380
// end else
25606: GO 25625
// PrepareHuman ( false , i , skill ) ;
25608: LD_INT 0
25610: PPUSH
25611: LD_VAR 0 8
25615: PPUSH
25616: LD_VAR 0 4
25620: PPUSH
25621: CALL_OW 380
// un := CreateHuman ;
25625: LD_ADDR_VAR 0 14
25629: PUSH
25630: CALL_OW 44
25634: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25635: LD_ADDR_VAR 0 7
25639: PUSH
25640: LD_VAR 0 7
25644: PPUSH
25645: LD_INT 1
25647: PPUSH
25648: LD_VAR 0 14
25652: PPUSH
25653: CALL_OW 2
25657: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25658: LD_VAR 0 14
25662: PPUSH
25663: LD_VAR 0 9
25667: PPUSH
25668: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25672: LD_VAR 0 9
25676: PPUSH
25677: CALL_OW 313
25681: PUSH
25682: LD_INT 6
25684: EQUAL
25685: IFTRUE 25709
25687: PUSH
25688: LD_VAR 0 9
25692: PPUSH
25693: CALL_OW 266
25697: PUSH
25698: LD_INT 32
25700: PUSH
25701: LD_INT 31
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: IN
25708: OR
25709: IFFALSE 25521
25711: GO 25518
25713: POP
25714: POP
// end else
25715: GO 26101
// for j = 1 to x do
25717: LD_ADDR_VAR 0 9
25721: PUSH
25722: DOUBLE
25723: LD_INT 1
25725: DEC
25726: ST_TO_ADDR
25727: LD_VAR 0 13
25731: PUSH
25732: FOR_TO
25733: IFFALSE 26099
// begin InitHc ;
25735: CALL_OW 19
// if not f then
25739: LD_VAR 0 12
25743: NOT
25744: IFFALSE 25833
// begin PrepareHuman ( false , i , skill ) ;
25746: LD_INT 0
25748: PPUSH
25749: LD_VAR 0 8
25753: PPUSH
25754: LD_VAR 0 4
25758: PPUSH
25759: CALL_OW 380
// un := CreateHuman ;
25763: LD_ADDR_VAR 0 14
25767: PUSH
25768: CALL_OW 44
25772: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25773: LD_ADDR_VAR 0 7
25777: PUSH
25778: LD_VAR 0 7
25782: PPUSH
25783: LD_INT 1
25785: PPUSH
25786: LD_VAR 0 14
25790: PPUSH
25791: CALL_OW 2
25795: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25796: LD_VAR 0 14
25800: PPUSH
25801: LD_VAR 0 1
25805: PPUSH
25806: CALL_OW 250
25810: PPUSH
25811: LD_VAR 0 1
25815: PPUSH
25816: CALL_OW 251
25820: PPUSH
25821: LD_INT 10
25823: PPUSH
25824: LD_INT 0
25826: PPUSH
25827: CALL_OW 50
// continue ;
25831: GO 25732
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25833: LD_VAR 0 12
25837: PUSH
25838: LD_INT 1
25840: ARRAY
25841: PPUSH
25842: CALL_OW 313
25846: IFFALSE 25874
25848: PUSH
25849: LD_VAR 0 12
25853: PUSH
25854: LD_INT 1
25856: ARRAY
25857: PPUSH
25858: CALL_OW 266
25862: PUSH
25863: LD_INT 32
25865: PUSH
25866: LD_INT 31
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: IN
25873: AND
25874: IFTRUE 25895
25876: PUSH
25877: LD_VAR 0 12
25881: PUSH
25882: LD_INT 1
25884: ARRAY
25885: PPUSH
25886: CALL_OW 313
25890: PUSH
25891: LD_INT 6
25893: EQUAL
25894: OR
25895: IFFALSE 25915
// f := Delete ( f , 1 ) ;
25897: LD_ADDR_VAR 0 12
25901: PUSH
25902: LD_VAR 0 12
25906: PPUSH
25907: LD_INT 1
25909: PPUSH
25910: CALL_OW 3
25914: ST_TO_ADDR
// if not f then
25915: LD_VAR 0 12
25919: NOT
25920: IFFALSE 25938
// begin x := x + 2 ;
25922: LD_ADDR_VAR 0 13
25926: PUSH
25927: LD_VAR 0 13
25931: PUSH
25932: LD_INT 2
25934: PLUS
25935: ST_TO_ADDR
// continue ;
25936: GO 25732
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25938: LD_VAR 0 12
25942: PUSH
25943: LD_INT 1
25945: ARRAY
25946: PPUSH
25947: CALL_OW 266
25951: PUSH
25952: LD_INT 5
25954: EQUAL
25955: IFFALSE 26029
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25957: LD_VAR 0 12
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PPUSH
25966: CALL_OW 313
25970: PUSH
25971: LD_INT 3
25973: LESS
25974: IFFALSE 26010
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25976: LD_INT 0
25978: PPUSH
25979: LD_INT 5
25981: PUSH
25982: LD_INT 8
25984: PUSH
25985: LD_INT 9
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: LIST
25992: PUSH
25993: LD_VAR 0 17
25997: ARRAY
25998: PPUSH
25999: LD_VAR 0 4
26003: PPUSH
26004: CALL_OW 380
26008: GO 26027
// PrepareHuman ( false , i , skill ) ;
26010: LD_INT 0
26012: PPUSH
26013: LD_VAR 0 8
26017: PPUSH
26018: LD_VAR 0 4
26022: PPUSH
26023: CALL_OW 380
// end else
26027: GO 26046
// PrepareHuman ( false , i , skill ) ;
26029: LD_INT 0
26031: PPUSH
26032: LD_VAR 0 8
26036: PPUSH
26037: LD_VAR 0 4
26041: PPUSH
26042: CALL_OW 380
// un := CreateHuman ;
26046: LD_ADDR_VAR 0 14
26050: PUSH
26051: CALL_OW 44
26055: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26056: LD_ADDR_VAR 0 7
26060: PUSH
26061: LD_VAR 0 7
26065: PPUSH
26066: LD_INT 1
26068: PPUSH
26069: LD_VAR 0 14
26073: PPUSH
26074: CALL_OW 2
26078: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26079: LD_VAR 0 14
26083: PPUSH
26084: LD_VAR 0 12
26088: PUSH
26089: LD_INT 1
26091: ARRAY
26092: PPUSH
26093: CALL_OW 52
// end ;
26097: GO 25732
26099: POP
26100: POP
// end ;
26101: GO 25032
26103: POP
26104: POP
// result := result ^ buildings ;
26105: LD_ADDR_VAR 0 7
26109: PUSH
26110: LD_VAR 0 7
26114: PUSH
26115: LD_VAR 0 18
26119: ADD
26120: ST_TO_ADDR
// end else
26121: GO 26264
// begin for i = 1 to personel do
26123: LD_ADDR_VAR 0 8
26127: PUSH
26128: DOUBLE
26129: LD_INT 1
26131: DEC
26132: ST_TO_ADDR
26133: LD_VAR 0 6
26137: PUSH
26138: FOR_TO
26139: IFFALSE 26262
// begin if i > 4 then
26141: LD_VAR 0 8
26145: PUSH
26146: LD_INT 4
26148: GREATER
26149: IFFALSE 26153
// break ;
26151: GO 26262
// x := personel [ i ] ;
26153: LD_ADDR_VAR 0 13
26157: PUSH
26158: LD_VAR 0 6
26162: PUSH
26163: LD_VAR 0 8
26167: ARRAY
26168: ST_TO_ADDR
// if x = - 1 then
26169: LD_VAR 0 13
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: EQUAL
26178: IFFALSE 26182
// continue ;
26180: GO 26138
// PrepareHuman ( false , i , skill ) ;
26182: LD_INT 0
26184: PPUSH
26185: LD_VAR 0 8
26189: PPUSH
26190: LD_VAR 0 4
26194: PPUSH
26195: CALL_OW 380
// un := CreateHuman ;
26199: LD_ADDR_VAR 0 14
26203: PUSH
26204: CALL_OW 44
26208: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26209: LD_VAR 0 14
26213: PPUSH
26214: LD_VAR 0 1
26218: PPUSH
26219: CALL_OW 250
26223: PPUSH
26224: LD_VAR 0 1
26228: PPUSH
26229: CALL_OW 251
26233: PPUSH
26234: LD_INT 10
26236: PPUSH
26237: LD_INT 0
26239: PPUSH
26240: CALL_OW 50
// result := result ^ un ;
26244: LD_ADDR_VAR 0 7
26248: PUSH
26249: LD_VAR 0 7
26253: PUSH
26254: LD_VAR 0 14
26258: ADD
26259: ST_TO_ADDR
// end ;
26260: GO 26138
26262: POP
26263: POP
// end ; end ;
26264: LD_VAR 0 7
26268: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26269: LD_INT 0
26271: PPUSH
26272: PPUSH
26273: PPUSH
26274: PPUSH
26275: PPUSH
26276: PPUSH
26277: PPUSH
26278: PPUSH
26279: PPUSH
26280: PPUSH
26281: PPUSH
26282: PPUSH
26283: PPUSH
26284: PPUSH
26285: PPUSH
26286: PPUSH
// result := false ;
26287: LD_ADDR_VAR 0 3
26291: PUSH
26292: LD_INT 0
26294: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26295: LD_VAR 0 1
26299: NOT
26300: IFTRUE 26325
26302: PUSH
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL_OW 266
26312: PUSH
26313: LD_INT 32
26315: PUSH
26316: LD_INT 33
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: IN
26323: NOT
26324: OR
26325: IFFALSE 26329
// exit ;
26327: GO 27464
// nat := GetNation ( tower ) ;
26329: LD_ADDR_VAR 0 12
26333: PUSH
26334: LD_VAR 0 1
26338: PPUSH
26339: CALL_OW 248
26343: ST_TO_ADDR
// side := GetSide ( tower ) ;
26344: LD_ADDR_VAR 0 16
26348: PUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: CALL_OW 255
26358: ST_TO_ADDR
// x := GetX ( tower ) ;
26359: LD_ADDR_VAR 0 10
26363: PUSH
26364: LD_VAR 0 1
26368: PPUSH
26369: CALL_OW 250
26373: ST_TO_ADDR
// y := GetY ( tower ) ;
26374: LD_ADDR_VAR 0 11
26378: PUSH
26379: LD_VAR 0 1
26383: PPUSH
26384: CALL_OW 251
26388: ST_TO_ADDR
// if not x or not y then
26389: LD_VAR 0 10
26393: NOT
26394: IFTRUE 26403
26396: PUSH
26397: LD_VAR 0 11
26401: NOT
26402: OR
26403: IFFALSE 26407
// exit ;
26405: GO 27464
// weapon := 0 ;
26407: LD_ADDR_VAR 0 18
26411: PUSH
26412: LD_INT 0
26414: ST_TO_ADDR
// fac_list := [ ] ;
26415: LD_ADDR_VAR 0 17
26419: PUSH
26420: EMPTY
26421: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26422: LD_ADDR_VAR 0 6
26426: PUSH
26427: LD_VAR 0 1
26431: PPUSH
26432: CALL_OW 274
26436: PPUSH
26437: LD_VAR 0 2
26441: PPUSH
26442: LD_INT 0
26444: PPUSH
26445: CALL 23999 0 3
26449: PPUSH
26450: LD_INT 30
26452: PUSH
26453: LD_INT 3
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 72
26464: ST_TO_ADDR
// if not factories then
26465: LD_VAR 0 6
26469: NOT
26470: IFFALSE 26474
// exit ;
26472: GO 27464
// for i in factories do
26474: LD_ADDR_VAR 0 8
26478: PUSH
26479: LD_VAR 0 6
26483: PUSH
26484: FOR_IN
26485: IFFALSE 26510
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26487: LD_ADDR_VAR 0 17
26491: PUSH
26492: LD_VAR 0 17
26496: PUSH
26497: LD_VAR 0 8
26501: PPUSH
26502: CALL_OW 478
26506: UNION
26507: ST_TO_ADDR
26508: GO 26484
26510: POP
26511: POP
// if not fac_list then
26512: LD_VAR 0 17
26516: NOT
26517: IFFALSE 26521
// exit ;
26519: GO 27464
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26521: LD_ADDR_VAR 0 5
26525: PUSH
26526: LD_INT 4
26528: PUSH
26529: LD_INT 5
26531: PUSH
26532: LD_INT 9
26534: PUSH
26535: LD_INT 10
26537: PUSH
26538: LD_INT 6
26540: PUSH
26541: LD_INT 7
26543: PUSH
26544: LD_INT 11
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 27
26558: PUSH
26559: LD_INT 28
26561: PUSH
26562: LD_INT 26
26564: PUSH
26565: LD_INT 30
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 43
26576: PUSH
26577: LD_INT 44
26579: PUSH
26580: LD_INT 46
26582: PUSH
26583: LD_INT 45
26585: PUSH
26586: LD_INT 47
26588: PUSH
26589: LD_INT 49
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: PUSH
26605: LD_VAR 0 12
26609: ARRAY
26610: ST_TO_ADDR
// list := list isect fac_list ;
26611: LD_ADDR_VAR 0 5
26615: PUSH
26616: LD_VAR 0 5
26620: PUSH
26621: LD_VAR 0 17
26625: ISECT
26626: ST_TO_ADDR
// if not list then
26627: LD_VAR 0 5
26631: NOT
26632: IFFALSE 26636
// exit ;
26634: GO 27464
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26636: LD_VAR 0 12
26640: PUSH
26641: LD_INT 3
26643: EQUAL
26644: IFFALSE 26656
26646: PUSH
26647: LD_INT 49
26649: PUSH
26650: LD_VAR 0 5
26654: IN
26655: AND
26656: IFFALSE 26676
26658: PUSH
26659: LD_INT 31
26661: PPUSH
26662: LD_VAR 0 16
26666: PPUSH
26667: CALL_OW 321
26671: PUSH
26672: LD_INT 2
26674: EQUAL
26675: AND
26676: IFFALSE 26736
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26678: LD_INT 22
26680: PUSH
26681: LD_VAR 0 16
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 35
26692: PUSH
26693: LD_INT 49
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 91
26702: PUSH
26703: LD_VAR 0 1
26707: PUSH
26708: LD_INT 10
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: LIST
26720: PPUSH
26721: CALL_OW 69
26725: NOT
26726: IFFALSE 26736
// weapon := ru_time_lapser ;
26728: LD_ADDR_VAR 0 18
26732: PUSH
26733: LD_INT 49
26735: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26736: LD_VAR 0 12
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: LD_INT 2
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: IN
26751: IFFALSE 26775
26753: PUSH
26754: LD_INT 11
26756: PUSH
26757: LD_VAR 0 5
26761: IN
26762: IFTRUE 26774
26764: PUSH
26765: LD_INT 30
26767: PUSH
26768: LD_VAR 0 5
26772: IN
26773: OR
26774: AND
26775: IFFALSE 26795
26777: PUSH
26778: LD_INT 6
26780: PPUSH
26781: LD_VAR 0 16
26785: PPUSH
26786: CALL_OW 321
26790: PUSH
26791: LD_INT 2
26793: EQUAL
26794: AND
26795: IFFALSE 26962
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26797: LD_INT 22
26799: PUSH
26800: LD_VAR 0 16
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: LD_INT 35
26814: PUSH
26815: LD_INT 11
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 35
26824: PUSH
26825: LD_INT 30
26827: PUSH
26828: EMPTY
26829: LIST
26830: LIST
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 91
26839: PUSH
26840: LD_VAR 0 1
26844: PUSH
26845: LD_INT 18
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: LIST
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: LIST
26857: PPUSH
26858: CALL_OW 69
26862: NOT
26863: IFFALSE 26939
26865: PUSH
26866: LD_INT 22
26868: PUSH
26869: LD_VAR 0 16
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 30
26883: PUSH
26884: LD_INT 32
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 30
26893: PUSH
26894: LD_INT 33
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 91
26908: PUSH
26909: LD_VAR 0 1
26913: PUSH
26914: LD_INT 12
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: PUSH
26927: EMPTY
26928: LIST
26929: PPUSH
26930: CALL_OW 69
26934: PUSH
26935: LD_INT 2
26937: GREATER
26938: AND
26939: IFFALSE 26962
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26941: LD_ADDR_VAR 0 18
26945: PUSH
26946: LD_INT 11
26948: PUSH
26949: LD_INT 30
26951: PUSH
26952: EMPTY
26953: LIST
26954: LIST
26955: PUSH
26956: LD_VAR 0 12
26960: ARRAY
26961: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26962: LD_VAR 0 18
26966: NOT
26967: IFFALSE 26987
26969: PUSH
26970: LD_INT 40
26972: PPUSH
26973: LD_VAR 0 16
26977: PPUSH
26978: CALL_OW 321
26982: PUSH
26983: LD_INT 2
26985: EQUAL
26986: AND
26987: IFFALSE 27023
26989: PUSH
26990: LD_INT 7
26992: PUSH
26993: LD_VAR 0 5
26997: IN
26998: IFTRUE 27010
27000: PUSH
27001: LD_INT 28
27003: PUSH
27004: LD_VAR 0 5
27008: IN
27009: OR
27010: IFTRUE 27022
27012: PUSH
27013: LD_INT 45
27015: PUSH
27016: LD_VAR 0 5
27020: IN
27021: OR
27022: AND
27023: IFFALSE 27277
// begin hex := GetHexInfo ( x , y ) ;
27025: LD_ADDR_VAR 0 4
27029: PUSH
27030: LD_VAR 0 10
27034: PPUSH
27035: LD_VAR 0 11
27039: PPUSH
27040: CALL_OW 546
27044: ST_TO_ADDR
// if hex [ 1 ] then
27045: LD_VAR 0 4
27049: PUSH
27050: LD_INT 1
27052: ARRAY
27053: IFFALSE 27057
// exit ;
27055: GO 27464
// height := hex [ 2 ] ;
27057: LD_ADDR_VAR 0 15
27061: PUSH
27062: LD_VAR 0 4
27066: PUSH
27067: LD_INT 2
27069: ARRAY
27070: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27071: LD_ADDR_VAR 0 14
27075: PUSH
27076: LD_INT 0
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: LD_INT 5
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// for i in tmp do
27094: LD_ADDR_VAR 0 8
27098: PUSH
27099: LD_VAR 0 14
27103: PUSH
27104: FOR_IN
27105: IFFALSE 27275
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27107: LD_ADDR_VAR 0 9
27111: PUSH
27112: LD_VAR 0 10
27116: PPUSH
27117: LD_VAR 0 8
27121: PPUSH
27122: LD_INT 5
27124: PPUSH
27125: CALL_OW 272
27129: PUSH
27130: LD_VAR 0 11
27134: PPUSH
27135: LD_VAR 0 8
27139: PPUSH
27140: LD_INT 5
27142: PPUSH
27143: CALL_OW 273
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27152: LD_VAR 0 9
27156: PUSH
27157: LD_INT 1
27159: ARRAY
27160: PPUSH
27161: LD_VAR 0 9
27165: PUSH
27166: LD_INT 2
27168: ARRAY
27169: PPUSH
27170: CALL_OW 488
27174: IFFALSE 27273
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27176: LD_ADDR_VAR 0 4
27180: PUSH
27181: LD_VAR 0 9
27185: PUSH
27186: LD_INT 1
27188: ARRAY
27189: PPUSH
27190: LD_VAR 0 9
27194: PUSH
27195: LD_INT 2
27197: ARRAY
27198: PPUSH
27199: CALL_OW 546
27203: ST_TO_ADDR
// if hex [ 1 ] then
27204: LD_VAR 0 4
27208: PUSH
27209: LD_INT 1
27211: ARRAY
27212: IFFALSE 27216
// continue ;
27214: GO 27104
// h := hex [ 2 ] ;
27216: LD_ADDR_VAR 0 13
27220: PUSH
27221: LD_VAR 0 4
27225: PUSH
27226: LD_INT 2
27228: ARRAY
27229: ST_TO_ADDR
// if h + 7 < height then
27230: LD_VAR 0 13
27234: PUSH
27235: LD_INT 7
27237: PLUS
27238: PUSH
27239: LD_VAR 0 15
27243: LESS
27244: IFFALSE 27273
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27246: LD_ADDR_VAR 0 18
27250: PUSH
27251: LD_INT 7
27253: PUSH
27254: LD_INT 28
27256: PUSH
27257: LD_INT 45
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: PUSH
27265: LD_VAR 0 12
27269: ARRAY
27270: ST_TO_ADDR
// break ;
27271: GO 27275
// end ; end ; end ;
27273: GO 27104
27275: POP
27276: POP
// end ; if not weapon then
27277: LD_VAR 0 18
27281: NOT
27282: IFFALSE 27342
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27284: LD_ADDR_VAR 0 5
27288: PUSH
27289: LD_VAR 0 5
27293: PUSH
27294: LD_INT 11
27296: PUSH
27297: LD_INT 30
27299: PUSH
27300: LD_INT 49
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: LIST
27307: DIFF
27308: ST_TO_ADDR
// if not list then
27309: LD_VAR 0 5
27313: NOT
27314: IFFALSE 27318
// exit ;
27316: GO 27464
// weapon := list [ rand ( 1 , list ) ] ;
27318: LD_ADDR_VAR 0 18
27322: PUSH
27323: LD_VAR 0 5
27327: PUSH
27328: LD_INT 1
27330: PPUSH
27331: LD_VAR 0 5
27335: PPUSH
27336: CALL_OW 12
27340: ARRAY
27341: ST_TO_ADDR
// end ; if weapon then
27342: LD_VAR 0 18
27346: IFFALSE 27464
// begin tmp := CostOfWeapon ( weapon ) ;
27348: LD_ADDR_VAR 0 14
27352: PUSH
27353: LD_VAR 0 18
27357: PPUSH
27358: CALL_OW 451
27362: ST_TO_ADDR
// j := GetBase ( tower ) ;
27363: LD_ADDR_VAR 0 9
27367: PUSH
27368: LD_VAR 0 1
27372: PPUSH
27373: CALL_OW 274
27377: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27378: LD_VAR 0 9
27382: PPUSH
27383: LD_INT 1
27385: PPUSH
27386: CALL_OW 275
27390: PUSH
27391: LD_VAR 0 14
27395: PUSH
27396: LD_INT 1
27398: ARRAY
27399: GREATEREQUAL
27400: IFFALSE 27426
27402: PUSH
27403: LD_VAR 0 9
27407: PPUSH
27408: LD_INT 2
27410: PPUSH
27411: CALL_OW 275
27415: PUSH
27416: LD_VAR 0 14
27420: PUSH
27421: LD_INT 2
27423: ARRAY
27424: GREATEREQUAL
27425: AND
27426: IFFALSE 27452
27428: PUSH
27429: LD_VAR 0 9
27433: PPUSH
27434: LD_INT 3
27436: PPUSH
27437: CALL_OW 275
27441: PUSH
27442: LD_VAR 0 14
27446: PUSH
27447: LD_INT 3
27449: ARRAY
27450: GREATEREQUAL
27451: AND
27452: IFFALSE 27464
// result := weapon ;
27454: LD_ADDR_VAR 0 3
27458: PUSH
27459: LD_VAR 0 18
27463: ST_TO_ADDR
// end ; end ;
27464: LD_VAR 0 3
27468: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27469: LD_INT 0
27471: PPUSH
27472: PPUSH
// result := true ;
27473: LD_ADDR_VAR 0 3
27477: PUSH
27478: LD_INT 1
27480: ST_TO_ADDR
// if array1 = array2 then
27481: LD_VAR 0 1
27485: PUSH
27486: LD_VAR 0 2
27490: EQUAL
27491: IFFALSE 27551
// begin for i = 1 to array1 do
27493: LD_ADDR_VAR 0 4
27497: PUSH
27498: DOUBLE
27499: LD_INT 1
27501: DEC
27502: ST_TO_ADDR
27503: LD_VAR 0 1
27507: PUSH
27508: FOR_TO
27509: IFFALSE 27547
// if array1 [ i ] <> array2 [ i ] then
27511: LD_VAR 0 1
27515: PUSH
27516: LD_VAR 0 4
27520: ARRAY
27521: PUSH
27522: LD_VAR 0 2
27526: PUSH
27527: LD_VAR 0 4
27531: ARRAY
27532: NONEQUAL
27533: IFFALSE 27545
// begin result := false ;
27535: LD_ADDR_VAR 0 3
27539: PUSH
27540: LD_INT 0
27542: ST_TO_ADDR
// break ;
27543: GO 27547
// end ;
27545: GO 27508
27547: POP
27548: POP
// end else
27549: GO 27559
// result := false ;
27551: LD_ADDR_VAR 0 3
27555: PUSH
27556: LD_INT 0
27558: ST_TO_ADDR
// end ;
27559: LD_VAR 0 3
27563: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27564: LD_INT 0
27566: PPUSH
27567: PPUSH
// if not array1 or not array2 then
27568: LD_VAR 0 1
27572: NOT
27573: IFTRUE 27582
27575: PUSH
27576: LD_VAR 0 2
27580: NOT
27581: OR
27582: IFFALSE 27586
// exit ;
27584: GO 27650
// result := true ;
27586: LD_ADDR_VAR 0 3
27590: PUSH
27591: LD_INT 1
27593: ST_TO_ADDR
// for i = 1 to array1 do
27594: LD_ADDR_VAR 0 4
27598: PUSH
27599: DOUBLE
27600: LD_INT 1
27602: DEC
27603: ST_TO_ADDR
27604: LD_VAR 0 1
27608: PUSH
27609: FOR_TO
27610: IFFALSE 27648
// if array1 [ i ] <> array2 [ i ] then
27612: LD_VAR 0 1
27616: PUSH
27617: LD_VAR 0 4
27621: ARRAY
27622: PUSH
27623: LD_VAR 0 2
27627: PUSH
27628: LD_VAR 0 4
27632: ARRAY
27633: NONEQUAL
27634: IFFALSE 27646
// begin result := false ;
27636: LD_ADDR_VAR 0 3
27640: PUSH
27641: LD_INT 0
27643: ST_TO_ADDR
// break ;
27644: GO 27648
// end ;
27646: GO 27609
27648: POP
27649: POP
// end ;
27650: LD_VAR 0 3
27654: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
27659: PPUSH
// pom := GetBase ( fac ) ;
27660: LD_ADDR_VAR 0 5
27664: PUSH
27665: LD_VAR 0 1
27669: PPUSH
27670: CALL_OW 274
27674: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27675: LD_ADDR_VAR 0 4
27679: PUSH
27680: LD_VAR 0 2
27684: PUSH
27685: LD_INT 1
27687: ARRAY
27688: PPUSH
27689: LD_VAR 0 2
27693: PUSH
27694: LD_INT 2
27696: ARRAY
27697: PPUSH
27698: LD_VAR 0 2
27702: PUSH
27703: LD_INT 3
27705: ARRAY
27706: PPUSH
27707: LD_VAR 0 2
27711: PUSH
27712: LD_INT 4
27714: ARRAY
27715: PPUSH
27716: CALL_OW 449
27720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27721: LD_ADDR_VAR 0 3
27725: PUSH
27726: LD_VAR 0 5
27730: PPUSH
27731: LD_INT 1
27733: PPUSH
27734: CALL_OW 275
27738: PUSH
27739: LD_VAR 0 4
27743: PUSH
27744: LD_INT 1
27746: ARRAY
27747: GREATEREQUAL
27748: IFFALSE 27774
27750: PUSH
27751: LD_VAR 0 5
27755: PPUSH
27756: LD_INT 2
27758: PPUSH
27759: CALL_OW 275
27763: PUSH
27764: LD_VAR 0 4
27768: PUSH
27769: LD_INT 2
27771: ARRAY
27772: GREATEREQUAL
27773: AND
27774: IFFALSE 27800
27776: PUSH
27777: LD_VAR 0 5
27781: PPUSH
27782: LD_INT 3
27784: PPUSH
27785: CALL_OW 275
27789: PUSH
27790: LD_VAR 0 4
27794: PUSH
27795: LD_INT 3
27797: ARRAY
27798: GREATEREQUAL
27799: AND
27800: ST_TO_ADDR
// end ;
27801: LD_VAR 0 3
27805: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27806: LD_INT 0
27808: PPUSH
27809: PPUSH
27810: PPUSH
27811: PPUSH
// pom := GetBase ( building ) ;
27812: LD_ADDR_VAR 0 3
27816: PUSH
27817: LD_VAR 0 1
27821: PPUSH
27822: CALL_OW 274
27826: ST_TO_ADDR
// if not pom then
27827: LD_VAR 0 3
27831: NOT
27832: IFFALSE 27836
// exit ;
27834: GO 28010
// btype := GetBType ( building ) ;
27836: LD_ADDR_VAR 0 5
27840: PUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 266
27850: ST_TO_ADDR
// if btype = b_armoury then
27851: LD_VAR 0 5
27855: PUSH
27856: LD_INT 4
27858: EQUAL
27859: IFFALSE 27869
// btype := b_barracks ;
27861: LD_ADDR_VAR 0 5
27865: PUSH
27866: LD_INT 5
27868: ST_TO_ADDR
// if btype = b_depot then
27869: LD_VAR 0 5
27873: PUSH
27874: LD_INT 0
27876: EQUAL
27877: IFFALSE 27887
// btype := b_warehouse ;
27879: LD_ADDR_VAR 0 5
27883: PUSH
27884: LD_INT 1
27886: ST_TO_ADDR
// if btype = b_workshop then
27887: LD_VAR 0 5
27891: PUSH
27892: LD_INT 2
27894: EQUAL
27895: IFFALSE 27905
// btype := b_factory ;
27897: LD_ADDR_VAR 0 5
27901: PUSH
27902: LD_INT 3
27904: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27905: LD_ADDR_VAR 0 4
27909: PUSH
27910: LD_VAR 0 5
27914: PPUSH
27915: LD_VAR 0 1
27919: PPUSH
27920: CALL_OW 248
27924: PPUSH
27925: CALL_OW 450
27929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27930: LD_ADDR_VAR 0 2
27934: PUSH
27935: LD_VAR 0 3
27939: PPUSH
27940: LD_INT 1
27942: PPUSH
27943: CALL_OW 275
27947: PUSH
27948: LD_VAR 0 4
27952: PUSH
27953: LD_INT 1
27955: ARRAY
27956: GREATEREQUAL
27957: IFFALSE 27983
27959: PUSH
27960: LD_VAR 0 3
27964: PPUSH
27965: LD_INT 2
27967: PPUSH
27968: CALL_OW 275
27972: PUSH
27973: LD_VAR 0 4
27977: PUSH
27978: LD_INT 2
27980: ARRAY
27981: GREATEREQUAL
27982: AND
27983: IFFALSE 28009
27985: PUSH
27986: LD_VAR 0 3
27990: PPUSH
27991: LD_INT 3
27993: PPUSH
27994: CALL_OW 275
27998: PUSH
27999: LD_VAR 0 4
28003: PUSH
28004: LD_INT 3
28006: ARRAY
28007: GREATEREQUAL
28008: AND
28009: ST_TO_ADDR
// end ;
28010: LD_VAR 0 2
28014: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28015: LD_INT 0
28017: PPUSH
28018: PPUSH
28019: PPUSH
// pom := GetBase ( building ) ;
28020: LD_ADDR_VAR 0 4
28024: PUSH
28025: LD_VAR 0 1
28029: PPUSH
28030: CALL_OW 274
28034: ST_TO_ADDR
// if not pom then
28035: LD_VAR 0 4
28039: NOT
28040: IFFALSE 28044
// exit ;
28042: GO 28149
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28044: LD_ADDR_VAR 0 5
28048: PUSH
28049: LD_VAR 0 2
28053: PPUSH
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 248
28063: PPUSH
28064: CALL_OW 450
28068: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_VAR 0 4
28078: PPUSH
28079: LD_INT 1
28081: PPUSH
28082: CALL_OW 275
28086: PUSH
28087: LD_VAR 0 5
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: GREATEREQUAL
28096: IFFALSE 28122
28098: PUSH
28099: LD_VAR 0 4
28103: PPUSH
28104: LD_INT 2
28106: PPUSH
28107: CALL_OW 275
28111: PUSH
28112: LD_VAR 0 5
28116: PUSH
28117: LD_INT 2
28119: ARRAY
28120: GREATEREQUAL
28121: AND
28122: IFFALSE 28148
28124: PUSH
28125: LD_VAR 0 4
28129: PPUSH
28130: LD_INT 3
28132: PPUSH
28133: CALL_OW 275
28137: PUSH
28138: LD_VAR 0 5
28142: PUSH
28143: LD_INT 3
28145: ARRAY
28146: GREATEREQUAL
28147: AND
28148: ST_TO_ADDR
// end ;
28149: LD_VAR 0 3
28153: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28154: LD_INT 0
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
// result := false ;
28167: LD_ADDR_VAR 0 8
28171: PUSH
28172: LD_INT 0
28174: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28175: LD_VAR 0 5
28179: NOT
28180: IFTRUE 28189
28182: PUSH
28183: LD_VAR 0 1
28187: NOT
28188: OR
28189: IFTRUE 28198
28191: PUSH
28192: LD_VAR 0 2
28196: NOT
28197: OR
28198: IFTRUE 28207
28200: PUSH
28201: LD_VAR 0 3
28205: NOT
28206: OR
28207: IFFALSE 28211
// exit ;
28209: GO 29037
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28211: LD_ADDR_VAR 0 14
28215: PUSH
28216: LD_VAR 0 1
28220: PPUSH
28221: LD_VAR 0 2
28225: PPUSH
28226: LD_VAR 0 3
28230: PPUSH
28231: LD_VAR 0 4
28235: PPUSH
28236: LD_VAR 0 5
28240: PUSH
28241: LD_INT 1
28243: ARRAY
28244: PPUSH
28245: CALL_OW 248
28249: PPUSH
28250: LD_INT 0
28252: PPUSH
28253: CALL 30318 0 6
28257: ST_TO_ADDR
// if not hexes then
28258: LD_VAR 0 14
28262: NOT
28263: IFFALSE 28267
// exit ;
28265: GO 29037
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28267: LD_ADDR_VAR 0 17
28271: PUSH
28272: LD_VAR 0 5
28276: PPUSH
28277: LD_INT 22
28279: PUSH
28280: LD_VAR 0 13
28284: PPUSH
28285: CALL_OW 255
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: PUSH
28294: LD_INT 2
28296: PUSH
28297: LD_INT 30
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 30
28309: PUSH
28310: LD_INT 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: LIST
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PPUSH
28326: CALL_OW 72
28330: ST_TO_ADDR
// for i = 1 to hexes do
28331: LD_ADDR_VAR 0 9
28335: PUSH
28336: DOUBLE
28337: LD_INT 1
28339: DEC
28340: ST_TO_ADDR
28341: LD_VAR 0 14
28345: PUSH
28346: FOR_TO
28347: IFFALSE 29035
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28349: LD_ADDR_VAR 0 13
28353: PUSH
28354: LD_VAR 0 14
28358: PUSH
28359: LD_VAR 0 9
28363: ARRAY
28364: PUSH
28365: LD_INT 1
28367: ARRAY
28368: PPUSH
28369: LD_VAR 0 14
28373: PUSH
28374: LD_VAR 0 9
28378: ARRAY
28379: PUSH
28380: LD_INT 2
28382: ARRAY
28383: PPUSH
28384: CALL_OW 428
28388: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28389: LD_VAR 0 14
28393: PUSH
28394: LD_VAR 0 9
28398: ARRAY
28399: PUSH
28400: LD_INT 1
28402: ARRAY
28403: PPUSH
28404: LD_VAR 0 14
28408: PUSH
28409: LD_VAR 0 9
28413: ARRAY
28414: PUSH
28415: LD_INT 2
28417: ARRAY
28418: PPUSH
28419: CALL_OW 351
28423: IFTRUE 28462
28425: PUSH
28426: LD_VAR 0 14
28430: PUSH
28431: LD_VAR 0 9
28435: ARRAY
28436: PUSH
28437: LD_INT 1
28439: ARRAY
28440: PPUSH
28441: LD_VAR 0 14
28445: PUSH
28446: LD_VAR 0 9
28450: ARRAY
28451: PUSH
28452: LD_INT 2
28454: ARRAY
28455: PPUSH
28456: CALL_OW 488
28460: NOT
28461: OR
28462: IFTRUE 28479
28464: PUSH
28465: LD_VAR 0 13
28469: PPUSH
28470: CALL_OW 247
28474: PUSH
28475: LD_INT 3
28477: EQUAL
28478: OR
28479: IFFALSE 28485
// exit ;
28481: POP
28482: POP
28483: GO 29037
// if not tmp then
28485: LD_VAR 0 13
28489: NOT
28490: IFFALSE 28494
// continue ;
28492: GO 28346
// result := true ;
28494: LD_ADDR_VAR 0 8
28498: PUSH
28499: LD_INT 1
28501: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28502: LD_VAR 0 6
28506: IFFALSE 28523
28508: PUSH
28509: LD_VAR 0 13
28513: PPUSH
28514: CALL_OW 247
28518: PUSH
28519: LD_INT 2
28521: EQUAL
28522: AND
28523: IFFALSE 28540
28525: PUSH
28526: LD_VAR 0 13
28530: PPUSH
28531: CALL_OW 263
28535: PUSH
28536: LD_INT 1
28538: EQUAL
28539: AND
28540: IFFALSE 28704
// begin if IsDrivenBy ( tmp ) then
28542: LD_VAR 0 13
28546: PPUSH
28547: CALL_OW 311
28551: IFFALSE 28555
// continue ;
28553: GO 28346
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28555: LD_VAR 0 6
28559: PPUSH
28560: LD_INT 3
28562: PUSH
28563: LD_INT 60
28565: PUSH
28566: EMPTY
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 3
28575: PUSH
28576: LD_INT 55
28578: PUSH
28579: EMPTY
28580: LIST
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PPUSH
28590: CALL_OW 72
28594: IFFALSE 28702
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28596: LD_ADDR_VAR 0 18
28600: PUSH
28601: LD_VAR 0 6
28605: PPUSH
28606: LD_INT 3
28608: PUSH
28609: LD_INT 60
28611: PUSH
28612: EMPTY
28613: LIST
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: LD_INT 55
28624: PUSH
28625: EMPTY
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PPUSH
28636: CALL_OW 72
28640: PUSH
28641: LD_INT 1
28643: ARRAY
28644: ST_TO_ADDR
// if IsInUnit ( driver ) then
28645: LD_VAR 0 18
28649: PPUSH
28650: CALL_OW 310
28654: IFFALSE 28665
// ComExit ( driver ) ;
28656: LD_VAR 0 18
28660: PPUSH
28661: CALL 54318 0 1
// AddComEnterUnit ( driver , tmp ) ;
28665: LD_VAR 0 18
28669: PPUSH
28670: LD_VAR 0 13
28674: PPUSH
28675: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28679: LD_VAR 0 18
28683: PPUSH
28684: LD_VAR 0 7
28688: PPUSH
28689: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28693: LD_VAR 0 18
28697: PPUSH
28698: CALL_OW 181
// end ; continue ;
28702: GO 28346
// end ; if not cleaners or not tmp in cleaners then
28704: LD_VAR 0 6
28708: NOT
28709: IFTRUE 28724
28711: PUSH
28712: LD_VAR 0 13
28716: PUSH
28717: LD_VAR 0 6
28721: IN
28722: NOT
28723: OR
28724: IFFALSE 29033
// begin if dep then
28726: LD_VAR 0 17
28730: IFFALSE 28866
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28732: LD_ADDR_VAR 0 16
28736: PUSH
28737: LD_VAR 0 17
28741: PUSH
28742: LD_INT 1
28744: ARRAY
28745: PPUSH
28746: CALL_OW 250
28750: PPUSH
28751: LD_VAR 0 17
28755: PUSH
28756: LD_INT 1
28758: ARRAY
28759: PPUSH
28760: CALL_OW 254
28764: PPUSH
28765: LD_INT 5
28767: PPUSH
28768: CALL_OW 272
28772: PUSH
28773: LD_VAR 0 17
28777: PUSH
28778: LD_INT 1
28780: ARRAY
28781: PPUSH
28782: CALL_OW 251
28786: PPUSH
28787: LD_VAR 0 17
28791: PUSH
28792: LD_INT 1
28794: ARRAY
28795: PPUSH
28796: CALL_OW 254
28800: PPUSH
28801: LD_INT 5
28803: PPUSH
28804: CALL_OW 273
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28813: LD_VAR 0 16
28817: PUSH
28818: LD_INT 1
28820: ARRAY
28821: PPUSH
28822: LD_VAR 0 16
28826: PUSH
28827: LD_INT 2
28829: ARRAY
28830: PPUSH
28831: CALL_OW 488
28835: IFFALSE 28866
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28837: LD_VAR 0 13
28841: PPUSH
28842: LD_VAR 0 16
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: PPUSH
28851: LD_VAR 0 16
28855: PUSH
28856: LD_INT 2
28858: ARRAY
28859: PPUSH
28860: CALL_OW 111
// continue ;
28864: GO 28346
// end ; end ; r := GetDir ( tmp ) ;
28866: LD_ADDR_VAR 0 15
28870: PUSH
28871: LD_VAR 0 13
28875: PPUSH
28876: CALL_OW 254
28880: ST_TO_ADDR
// if r = 5 then
28881: LD_VAR 0 15
28885: PUSH
28886: LD_INT 5
28888: EQUAL
28889: IFFALSE 28899
// r := 0 ;
28891: LD_ADDR_VAR 0 15
28895: PUSH
28896: LD_INT 0
28898: ST_TO_ADDR
// for j = r to 5 do
28899: LD_ADDR_VAR 0 10
28903: PUSH
28904: DOUBLE
28905: LD_VAR 0 15
28909: DEC
28910: ST_TO_ADDR
28911: LD_INT 5
28913: PUSH
28914: FOR_TO
28915: IFFALSE 29031
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28917: LD_ADDR_VAR 0 11
28921: PUSH
28922: LD_VAR 0 13
28926: PPUSH
28927: CALL_OW 250
28931: PPUSH
28932: LD_VAR 0 10
28936: PPUSH
28937: LD_INT 2
28939: PPUSH
28940: CALL_OW 272
28944: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28945: LD_ADDR_VAR 0 12
28949: PUSH
28950: LD_VAR 0 13
28954: PPUSH
28955: CALL_OW 251
28959: PPUSH
28960: LD_VAR 0 10
28964: PPUSH
28965: LD_INT 2
28967: PPUSH
28968: CALL_OW 273
28972: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28973: LD_VAR 0 11
28977: PPUSH
28978: LD_VAR 0 12
28982: PPUSH
28983: CALL_OW 488
28987: IFFALSE 29006
28989: PUSH
28990: LD_VAR 0 11
28994: PPUSH
28995: LD_VAR 0 12
28999: PPUSH
29000: CALL_OW 428
29004: NOT
29005: AND
29006: IFFALSE 29029
// begin ComMoveXY ( tmp , _x , _y ) ;
29008: LD_VAR 0 13
29012: PPUSH
29013: LD_VAR 0 11
29017: PPUSH
29018: LD_VAR 0 12
29022: PPUSH
29023: CALL_OW 111
// break ;
29027: GO 29031
// end ; end ;
29029: GO 28914
29031: POP
29032: POP
// end ; end ;
29033: GO 28346
29035: POP
29036: POP
// end ;
29037: LD_VAR 0 8
29041: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29042: LD_INT 0
29044: PPUSH
// result := true ;
29045: LD_ADDR_VAR 0 3
29049: PUSH
29050: LD_INT 1
29052: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29053: LD_VAR 0 2
29057: PUSH
29058: LD_INT 24
29060: DOUBLE
29061: EQUAL
29062: IFTRUE 29072
29064: LD_INT 33
29066: DOUBLE
29067: EQUAL
29068: IFTRUE 29072
29070: GO 29097
29072: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29073: LD_ADDR_VAR 0 3
29077: PUSH
29078: LD_INT 32
29080: PPUSH
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL_OW 321
29090: PUSH
29091: LD_INT 2
29093: EQUAL
29094: ST_TO_ADDR
29095: GO 29413
29097: LD_INT 20
29099: DOUBLE
29100: EQUAL
29101: IFTRUE 29105
29103: GO 29130
29105: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29106: LD_ADDR_VAR 0 3
29110: PUSH
29111: LD_INT 6
29113: PPUSH
29114: LD_VAR 0 1
29118: PPUSH
29119: CALL_OW 321
29123: PUSH
29124: LD_INT 2
29126: EQUAL
29127: ST_TO_ADDR
29128: GO 29413
29130: LD_INT 22
29132: DOUBLE
29133: EQUAL
29134: IFTRUE 29144
29136: LD_INT 36
29138: DOUBLE
29139: EQUAL
29140: IFTRUE 29144
29142: GO 29169
29144: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29145: LD_ADDR_VAR 0 3
29149: PUSH
29150: LD_INT 15
29152: PPUSH
29153: LD_VAR 0 1
29157: PPUSH
29158: CALL_OW 321
29162: PUSH
29163: LD_INT 2
29165: EQUAL
29166: ST_TO_ADDR
29167: GO 29413
29169: LD_INT 30
29171: DOUBLE
29172: EQUAL
29173: IFTRUE 29177
29175: GO 29202
29177: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29178: LD_ADDR_VAR 0 3
29182: PUSH
29183: LD_INT 20
29185: PPUSH
29186: LD_VAR 0 1
29190: PPUSH
29191: CALL_OW 321
29195: PUSH
29196: LD_INT 2
29198: EQUAL
29199: ST_TO_ADDR
29200: GO 29413
29202: LD_INT 28
29204: DOUBLE
29205: EQUAL
29206: IFTRUE 29216
29208: LD_INT 21
29210: DOUBLE
29211: EQUAL
29212: IFTRUE 29216
29214: GO 29241
29216: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29217: LD_ADDR_VAR 0 3
29221: PUSH
29222: LD_INT 21
29224: PPUSH
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 321
29234: PUSH
29235: LD_INT 2
29237: EQUAL
29238: ST_TO_ADDR
29239: GO 29413
29241: LD_INT 16
29243: DOUBLE
29244: EQUAL
29245: IFTRUE 29249
29247: GO 29274
29249: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29250: LD_ADDR_VAR 0 3
29254: PUSH
29255: LD_INT 84
29257: PPUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: CALL_OW 321
29267: PUSH
29268: LD_INT 2
29270: EQUAL
29271: ST_TO_ADDR
29272: GO 29413
29274: LD_INT 19
29276: DOUBLE
29277: EQUAL
29278: IFTRUE 29288
29280: LD_INT 23
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29313
29288: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_INT 83
29296: PPUSH
29297: LD_VAR 0 1
29301: PPUSH
29302: CALL_OW 321
29306: PUSH
29307: LD_INT 2
29309: EQUAL
29310: ST_TO_ADDR
29311: GO 29413
29313: LD_INT 17
29315: DOUBLE
29316: EQUAL
29317: IFTRUE 29321
29319: GO 29346
29321: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29322: LD_ADDR_VAR 0 3
29326: PUSH
29327: LD_INT 39
29329: PPUSH
29330: LD_VAR 0 1
29334: PPUSH
29335: CALL_OW 321
29339: PUSH
29340: LD_INT 2
29342: EQUAL
29343: ST_TO_ADDR
29344: GO 29413
29346: LD_INT 18
29348: DOUBLE
29349: EQUAL
29350: IFTRUE 29354
29352: GO 29379
29354: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_INT 40
29362: PPUSH
29363: LD_VAR 0 1
29367: PPUSH
29368: CALL_OW 321
29372: PUSH
29373: LD_INT 2
29375: EQUAL
29376: ST_TO_ADDR
29377: GO 29413
29379: LD_INT 27
29381: DOUBLE
29382: EQUAL
29383: IFTRUE 29387
29385: GO 29412
29387: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29388: LD_ADDR_VAR 0 3
29392: PUSH
29393: LD_INT 35
29395: PPUSH
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 321
29405: PUSH
29406: LD_INT 2
29408: EQUAL
29409: ST_TO_ADDR
29410: GO 29413
29412: POP
// end ;
29413: LD_VAR 0 3
29417: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29418: LD_INT 0
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
// result := false ;
29431: LD_ADDR_VAR 0 6
29435: PUSH
29436: LD_INT 0
29438: ST_TO_ADDR
// if btype = b_depot then
29439: LD_VAR 0 2
29443: PUSH
29444: LD_INT 0
29446: EQUAL
29447: IFFALSE 29459
// begin result := true ;
29449: LD_ADDR_VAR 0 6
29453: PUSH
29454: LD_INT 1
29456: ST_TO_ADDR
// exit ;
29457: GO 30313
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29459: LD_VAR 0 1
29463: NOT
29464: IFTRUE 29489
29466: PUSH
29467: LD_VAR 0 1
29471: PPUSH
29472: CALL_OW 266
29476: PUSH
29477: LD_INT 0
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: IN
29487: NOT
29488: OR
29489: IFTRUE 29498
29491: PUSH
29492: LD_VAR 0 2
29496: NOT
29497: OR
29498: IFTRUE 29534
29500: PUSH
29501: LD_VAR 0 5
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: LD_INT 3
29517: PUSH
29518: LD_INT 4
29520: PUSH
29521: LD_INT 5
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: IN
29532: NOT
29533: OR
29534: IFTRUE 29553
29536: PUSH
29537: LD_VAR 0 3
29541: PPUSH
29542: LD_VAR 0 4
29546: PPUSH
29547: CALL_OW 488
29551: NOT
29552: OR
29553: IFFALSE 29557
// exit ;
29555: GO 30313
// side := GetSide ( depot ) ;
29557: LD_ADDR_VAR 0 9
29561: PUSH
29562: LD_VAR 0 1
29566: PPUSH
29567: CALL_OW 255
29571: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29572: LD_VAR 0 9
29576: PPUSH
29577: LD_VAR 0 2
29581: PPUSH
29582: CALL 29042 0 2
29586: NOT
29587: IFFALSE 29591
// exit ;
29589: GO 30313
// pom := GetBase ( depot ) ;
29591: LD_ADDR_VAR 0 10
29595: PUSH
29596: LD_VAR 0 1
29600: PPUSH
29601: CALL_OW 274
29605: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29606: LD_ADDR_VAR 0 11
29610: PUSH
29611: LD_VAR 0 2
29615: PPUSH
29616: LD_VAR 0 1
29620: PPUSH
29621: CALL_OW 248
29625: PPUSH
29626: CALL_OW 450
29630: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29631: LD_VAR 0 10
29635: PPUSH
29636: LD_INT 1
29638: PPUSH
29639: CALL_OW 275
29643: PUSH
29644: LD_VAR 0 11
29648: PUSH
29649: LD_INT 1
29651: ARRAY
29652: GREATEREQUAL
29653: IFFALSE 29679
29655: PUSH
29656: LD_VAR 0 10
29660: PPUSH
29661: LD_INT 2
29663: PPUSH
29664: CALL_OW 275
29668: PUSH
29669: LD_VAR 0 11
29673: PUSH
29674: LD_INT 2
29676: ARRAY
29677: GREATEREQUAL
29678: AND
29679: IFFALSE 29705
29681: PUSH
29682: LD_VAR 0 10
29686: PPUSH
29687: LD_INT 3
29689: PPUSH
29690: CALL_OW 275
29694: PUSH
29695: LD_VAR 0 11
29699: PUSH
29700: LD_INT 3
29702: ARRAY
29703: GREATEREQUAL
29704: AND
29705: NOT
29706: IFFALSE 29710
// exit ;
29708: GO 30313
// if GetBType ( depot ) = b_depot then
29710: LD_VAR 0 1
29714: PPUSH
29715: CALL_OW 266
29719: PUSH
29720: LD_INT 0
29722: EQUAL
29723: IFFALSE 29735
// dist := 28 else
29725: LD_ADDR_VAR 0 14
29729: PUSH
29730: LD_INT 28
29732: ST_TO_ADDR
29733: GO 29743
// dist := 36 ;
29735: LD_ADDR_VAR 0 14
29739: PUSH
29740: LD_INT 36
29742: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29743: LD_VAR 0 1
29747: PPUSH
29748: LD_VAR 0 3
29752: PPUSH
29753: LD_VAR 0 4
29757: PPUSH
29758: CALL_OW 297
29762: PUSH
29763: LD_VAR 0 14
29767: GREATER
29768: IFFALSE 29772
// exit ;
29770: GO 30313
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29772: LD_ADDR_VAR 0 12
29776: PUSH
29777: LD_VAR 0 2
29781: PPUSH
29782: LD_VAR 0 3
29786: PPUSH
29787: LD_VAR 0 4
29791: PPUSH
29792: LD_VAR 0 5
29796: PPUSH
29797: LD_VAR 0 1
29801: PPUSH
29802: CALL_OW 248
29806: PPUSH
29807: LD_INT 0
29809: PPUSH
29810: CALL 30318 0 6
29814: ST_TO_ADDR
// if not hexes then
29815: LD_VAR 0 12
29819: NOT
29820: IFFALSE 29824
// exit ;
29822: GO 30313
// hex := GetHexInfo ( x , y ) ;
29824: LD_ADDR_VAR 0 15
29828: PUSH
29829: LD_VAR 0 3
29833: PPUSH
29834: LD_VAR 0 4
29838: PPUSH
29839: CALL_OW 546
29843: ST_TO_ADDR
// if hex [ 1 ] then
29844: LD_VAR 0 15
29848: PUSH
29849: LD_INT 1
29851: ARRAY
29852: IFFALSE 29856
// exit ;
29854: GO 30313
// height := hex [ 2 ] ;
29856: LD_ADDR_VAR 0 13
29860: PUSH
29861: LD_VAR 0 15
29865: PUSH
29866: LD_INT 2
29868: ARRAY
29869: ST_TO_ADDR
// for i = 1 to hexes do
29870: LD_ADDR_VAR 0 7
29874: PUSH
29875: DOUBLE
29876: LD_INT 1
29878: DEC
29879: ST_TO_ADDR
29880: LD_VAR 0 12
29884: PUSH
29885: FOR_TO
29886: IFFALSE 30230
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29888: LD_VAR 0 12
29892: PUSH
29893: LD_VAR 0 7
29897: ARRAY
29898: PUSH
29899: LD_INT 1
29901: ARRAY
29902: PPUSH
29903: LD_VAR 0 12
29907: PUSH
29908: LD_VAR 0 7
29912: ARRAY
29913: PUSH
29914: LD_INT 2
29916: ARRAY
29917: PPUSH
29918: CALL_OW 488
29922: NOT
29923: IFTRUE 29965
29925: PUSH
29926: LD_VAR 0 12
29930: PUSH
29931: LD_VAR 0 7
29935: ARRAY
29936: PUSH
29937: LD_INT 1
29939: ARRAY
29940: PPUSH
29941: LD_VAR 0 12
29945: PUSH
29946: LD_VAR 0 7
29950: ARRAY
29951: PUSH
29952: LD_INT 2
29954: ARRAY
29955: PPUSH
29956: CALL_OW 428
29960: PUSH
29961: LD_INT 0
29963: GREATER
29964: OR
29965: IFTRUE 30003
29967: PUSH
29968: LD_VAR 0 12
29972: PUSH
29973: LD_VAR 0 7
29977: ARRAY
29978: PUSH
29979: LD_INT 1
29981: ARRAY
29982: PPUSH
29983: LD_VAR 0 12
29987: PUSH
29988: LD_VAR 0 7
29992: ARRAY
29993: PUSH
29994: LD_INT 2
29996: ARRAY
29997: PPUSH
29998: CALL_OW 351
30002: OR
30003: IFFALSE 30009
// exit ;
30005: POP
30006: POP
30007: GO 30313
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30009: LD_ADDR_VAR 0 8
30013: PUSH
30014: LD_VAR 0 12
30018: PUSH
30019: LD_VAR 0 7
30023: ARRAY
30024: PUSH
30025: LD_INT 1
30027: ARRAY
30028: PPUSH
30029: LD_VAR 0 12
30033: PUSH
30034: LD_VAR 0 7
30038: ARRAY
30039: PUSH
30040: LD_INT 2
30042: ARRAY
30043: PPUSH
30044: CALL_OW 546
30048: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30049: LD_VAR 0 8
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: IFTRUE 30079
30059: PUSH
30060: LD_VAR 0 8
30064: PUSH
30065: LD_INT 2
30067: ARRAY
30068: PUSH
30069: LD_VAR 0 13
30073: PUSH
30074: LD_INT 2
30076: PLUS
30077: GREATER
30078: OR
30079: IFTRUE 30101
30081: PUSH
30082: LD_VAR 0 8
30086: PUSH
30087: LD_INT 2
30089: ARRAY
30090: PUSH
30091: LD_VAR 0 13
30095: PUSH
30096: LD_INT 2
30098: MINUS
30099: LESS
30100: OR
30101: IFTRUE 30169
30103: PUSH
30104: LD_VAR 0 8
30108: PUSH
30109: LD_INT 3
30111: ARRAY
30112: PUSH
30113: LD_INT 0
30115: PUSH
30116: LD_INT 8
30118: PUSH
30119: LD_INT 9
30121: PUSH
30122: LD_INT 10
30124: PUSH
30125: LD_INT 11
30127: PUSH
30128: LD_INT 12
30130: PUSH
30131: LD_INT 13
30133: PUSH
30134: LD_INT 16
30136: PUSH
30137: LD_INT 17
30139: PUSH
30140: LD_INT 18
30142: PUSH
30143: LD_INT 19
30145: PUSH
30146: LD_INT 20
30148: PUSH
30149: LD_INT 21
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: IN
30167: NOT
30168: OR
30169: IFTRUE 30182
30171: PUSH
30172: LD_VAR 0 8
30176: PUSH
30177: LD_INT 5
30179: ARRAY
30180: NOT
30181: OR
30182: IFTRUE 30222
30184: PUSH
30185: LD_VAR 0 8
30189: PUSH
30190: LD_INT 6
30192: ARRAY
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: LD_INT 2
30199: PUSH
30200: LD_INT 7
30202: PUSH
30203: LD_INT 9
30205: PUSH
30206: LD_INT 10
30208: PUSH
30209: LD_INT 11
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: IN
30220: NOT
30221: OR
30222: IFFALSE 30228
// exit ;
30224: POP
30225: POP
30226: GO 30313
// end ;
30228: GO 29885
30230: POP
30231: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30232: LD_VAR 0 9
30236: PPUSH
30237: LD_VAR 0 3
30241: PPUSH
30242: LD_VAR 0 4
30246: PPUSH
30247: LD_INT 20
30249: PPUSH
30250: CALL 22132 0 4
30254: PUSH
30255: LD_INT 4
30257: ARRAY
30258: IFFALSE 30262
// exit ;
30260: GO 30313
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30262: LD_VAR 0 2
30266: PUSH
30267: LD_INT 29
30269: PUSH
30270: LD_INT 30
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: IN
30277: IFFALSE 30301
30279: PUSH
30280: LD_VAR 0 3
30284: PPUSH
30285: LD_VAR 0 4
30289: PPUSH
30290: LD_VAR 0 9
30294: PPUSH
30295: CALL_OW 440
30299: NOT
30300: AND
30301: IFFALSE 30305
// exit ;
30303: GO 30313
// result := true ;
30305: LD_ADDR_VAR 0 6
30309: PUSH
30310: LD_INT 1
30312: ST_TO_ADDR
// end ;
30313: LD_VAR 0 6
30317: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30318: LD_INT 0
30320: PPUSH
30321: PPUSH
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
30334: PPUSH
30335: PPUSH
30336: PPUSH
30337: PPUSH
30338: PPUSH
30339: PPUSH
30340: PPUSH
30341: PPUSH
30342: PPUSH
30343: PPUSH
30344: PPUSH
30345: PPUSH
30346: PPUSH
30347: PPUSH
30348: PPUSH
30349: PPUSH
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
30355: PPUSH
30356: PPUSH
30357: PPUSH
30358: PPUSH
30359: PPUSH
30360: PPUSH
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
// result = [ ] ;
30378: LD_ADDR_VAR 0 7
30382: PUSH
30383: EMPTY
30384: ST_TO_ADDR
// temp_list = [ ] ;
30385: LD_ADDR_VAR 0 9
30389: PUSH
30390: EMPTY
30391: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30392: LD_VAR 0 4
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: LD_INT 2
30405: PUSH
30406: LD_INT 3
30408: PUSH
30409: LD_INT 4
30411: PUSH
30412: LD_INT 5
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: IN
30423: NOT
30424: IFTRUE 30467
30426: PUSH
30427: LD_VAR 0 1
30431: PUSH
30432: LD_INT 0
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: IN
30442: IFFALSE 30466
30444: PUSH
30445: LD_VAR 0 5
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 3
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: IN
30464: NOT
30465: AND
30466: OR
30467: IFFALSE 30471
// exit ;
30469: GO 48870
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30471: LD_VAR 0 1
30475: PUSH
30476: LD_INT 6
30478: PUSH
30479: LD_INT 7
30481: PUSH
30482: LD_INT 8
30484: PUSH
30485: LD_INT 13
30487: PUSH
30488: LD_INT 12
30490: PUSH
30491: LD_INT 15
30493: PUSH
30494: LD_INT 11
30496: PUSH
30497: LD_INT 14
30499: PUSH
30500: LD_INT 10
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: IN
30514: IFFALSE 30524
// btype = b_lab ;
30516: LD_ADDR_VAR 0 1
30520: PUSH
30521: LD_INT 6
30523: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30524: LD_VAR 0 6
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 2
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: IN
30543: NOT
30544: IFTRUE 30612
30546: PUSH
30547: LD_VAR 0 1
30551: PUSH
30552: LD_INT 0
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: LD_INT 2
30560: PUSH
30561: LD_INT 3
30563: PUSH
30564: LD_INT 6
30566: PUSH
30567: LD_INT 36
30569: PUSH
30570: LD_INT 4
30572: PUSH
30573: LD_INT 5
30575: PUSH
30576: LD_INT 31
30578: PUSH
30579: LD_INT 32
30581: PUSH
30582: LD_INT 33
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: IN
30598: NOT
30599: IFFALSE 30611
30601: PUSH
30602: LD_VAR 0 6
30606: PUSH
30607: LD_INT 1
30609: EQUAL
30610: AND
30611: OR
30612: IFTRUE 30644
30614: PUSH
30615: LD_VAR 0 1
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: IN
30630: NOT
30631: IFFALSE 30643
30633: PUSH
30634: LD_VAR 0 6
30638: PUSH
30639: LD_INT 2
30641: EQUAL
30642: AND
30643: OR
30644: IFFALSE 30654
// mode = 0 ;
30646: LD_ADDR_VAR 0 6
30650: PUSH
30651: LD_INT 0
30653: ST_TO_ADDR
// case mode of 0 :
30654: LD_VAR 0 6
30658: PUSH
30659: LD_INT 0
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 42120
30667: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30668: LD_ADDR_VAR 0 11
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: LD_INT 2
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 2
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: LD_INT 1
30775: NEG
30776: PUSH
30777: EMPTY
30778: LIST
30779: LIST
30780: PUSH
30781: LD_INT 1
30783: PUSH
30784: LD_INT 2
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 1
30803: NEG
30804: PUSH
30805: LD_INT 1
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: PUSH
30815: LD_INT 3
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 0
30824: PUSH
30825: LD_INT 3
30827: PUSH
30828: EMPTY
30829: LIST
30830: LIST
30831: PUSH
30832: LD_INT 1
30834: NEG
30835: PUSH
30836: LD_INT 2
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30861: LD_ADDR_VAR 0 12
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: LD_INT 0
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 0
30909: PUSH
30910: LD_INT 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 0
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 1
30930: NEG
30931: PUSH
30932: LD_INT 1
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: NEG
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 2
30984: NEG
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 2
30995: NEG
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 2
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 3
31018: NEG
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 3
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31057: LD_ADDR_VAR 0 13
31061: PUSH
31062: LD_INT 0
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: LD_INT 0
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 1
31115: NEG
31116: PUSH
31117: LD_INT 0
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 2
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: EMPTY
31155: LIST
31156: LIST
31157: PUSH
31158: LD_INT 2
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 2
31180: NEG
31181: PUSH
31182: LD_INT 1
31184: NEG
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 2
31192: NEG
31193: PUSH
31194: LD_INT 2
31196: NEG
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 3
31216: NEG
31217: PUSH
31218: LD_INT 2
31220: NEG
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 3
31228: NEG
31229: PUSH
31230: LD_INT 3
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: LIST
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31256: LD_ADDR_VAR 0 14
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 0
31273: PUSH
31274: LD_INT 1
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: LD_INT 0
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: LD_INT 1
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PUSH
31316: LD_INT 0
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 1
31325: NEG
31326: PUSH
31327: LD_INT 1
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 0
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: LD_INT 1
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: EMPTY
31376: LIST
31377: LIST
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: LD_INT 2
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PUSH
31404: LD_INT 3
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: LD_INT 3
31417: NEG
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 2
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31452: LD_ADDR_VAR 0 15
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: NEG
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 0
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 1
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 2
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 3
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31645: LD_ADDR_VAR 0 16
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 1
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: PUSH
31746: LD_INT 2
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 1
31758: PUSH
31759: LD_INT 2
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: NEG
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 3
31792: PUSH
31793: LD_INT 2
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 3
31802: PUSH
31803: LD_INT 3
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 2
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31838: LD_ADDR_VAR 0 17
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 2
31923: NEG
31924: PUSH
31925: EMPTY
31926: LIST
31927: LIST
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: LD_INT 1
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: LD_INT 2
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 1
31983: PUSH
31984: LD_INT 2
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: LD_INT 2
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: LD_INT 0
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: LD_INT 1
32029: NEG
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 2
32037: NEG
32038: PUSH
32039: LD_INT 2
32041: NEG
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32068: LD_ADDR_VAR 0 18
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: LD_INT 0
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 1
32088: NEG
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 0
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 0
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: LD_INT 1
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: LD_INT 2
32153: NEG
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 0
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 1
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 2
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: PUSH
32211: LD_INT 1
32213: PUSH
32214: LD_INT 2
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: LD_INT 2
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 0
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: LD_INT 2
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32298: LD_ADDR_VAR 0 19
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 0
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 0
32315: PUSH
32316: LD_INT 1
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: PUSH
32337: LD_INT 1
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 2
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 2
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 2
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: PUSH
32444: LD_INT 2
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: LD_INT 2
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: NEG
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 2
32474: NEG
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: LD_INT 1
32489: NEG
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 2
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32528: LD_ADDR_VAR 0 20
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32758: LD_ADDR_VAR 0 21
32762: PUSH
32763: LD_INT 0
32765: PUSH
32766: LD_INT 0
32768: PUSH
32769: EMPTY
32770: LIST
32771: LIST
32772: PUSH
32773: LD_INT 0
32775: PUSH
32776: LD_INT 1
32778: NEG
32779: PUSH
32780: EMPTY
32781: LIST
32782: LIST
32783: PUSH
32784: LD_INT 1
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: PUSH
32797: LD_INT 1
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 1
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: NEG
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: LD_INT 2
32854: NEG
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: LD_INT 1
32865: NEG
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: PUSH
32874: LD_INT 0
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: PUSH
32891: LD_INT 2
32893: PUSH
32894: LD_INT 2
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 2
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: NEG
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32988: LD_ADDR_VAR 0 22
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 0
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: LD_INT 0
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 1
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: LD_INT 1
33039: PUSH
33040: EMPTY
33041: LIST
33042: LIST
33043: PUSH
33044: LD_INT 1
33046: NEG
33047: PUSH
33048: LD_INT 0
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: LD_INT 2
33073: NEG
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 2
33084: NEG
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 1
33092: PUSH
33093: LD_INT 1
33095: NEG
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: LD_INT 2
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: PUSH
33124: LD_INT 2
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 1
33133: PUSH
33134: LD_INT 2
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: LD_INT 1
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: NEG
33165: PUSH
33166: LD_INT 0
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 2
33175: NEG
33176: PUSH
33177: LD_INT 1
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 2
33187: NEG
33188: PUSH
33189: LD_INT 2
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33218: LD_ADDR_VAR 0 23
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 0
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 0
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: PUSH
33257: LD_INT 1
33259: PUSH
33260: EMPTY
33261: LIST
33262: LIST
33263: PUSH
33264: LD_INT 0
33266: PUSH
33267: LD_INT 1
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: LD_INT 1
33276: NEG
33277: PUSH
33278: LD_INT 0
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: PUSH
33285: LD_INT 1
33287: NEG
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 0
33311: PUSH
33312: LD_INT 2
33314: NEG
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 2
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 2
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 2
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 2
33405: NEG
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 2
33417: NEG
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: LD_INT 3
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: NEG
33442: PUSH
33443: LD_INT 3
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 2
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: LD_INT 2
33464: PUSH
33465: LD_INT 1
33467: NEG
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33498: LD_ADDR_VAR 0 24
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 0
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: EMPTY
33521: LIST
33522: LIST
33523: PUSH
33524: LD_INT 1
33526: PUSH
33527: LD_INT 0
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: PUSH
33537: LD_INT 1
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 0
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 1
33556: NEG
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 1
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: LD_INT 2
33583: NEG
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: LD_INT 2
33594: NEG
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 1
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: LD_INT 0
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 2
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 2
33633: PUSH
33634: LD_INT 2
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 2
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: LD_INT 1
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 2
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 3
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 3
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33774: LD_ADDR_VAR 0 25
33778: PUSH
33779: LD_INT 0
33781: PUSH
33782: LD_INT 0
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: LD_INT 0
33791: PUSH
33792: LD_INT 1
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: LD_INT 0
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 1
33812: PUSH
33813: LD_INT 1
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 0
33822: PUSH
33823: LD_INT 1
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: LD_INT 0
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: PUSH
33853: LD_INT 1
33855: NEG
33856: PUSH
33857: LD_INT 2
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 2
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 2
33909: PUSH
33910: LD_INT 2
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: LD_INT 2
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 0
33929: PUSH
33930: LD_INT 2
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 1
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: NEG
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 2
33961: NEG
33962: PUSH
33963: LD_INT 1
33965: NEG
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 2
33973: NEG
33974: PUSH
33975: LD_INT 2
33977: NEG
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 3
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 3
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 2
34005: PUSH
34006: LD_INT 3
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34048: LD_ADDR_VAR 0 26
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: LD_INT 1
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 0
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 1
34106: NEG
34107: PUSH
34108: LD_INT 0
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 2
34133: NEG
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: LD_INT 2
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: LD_INT 1
34155: NEG
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 0
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 1
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 2
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 0
34203: PUSH
34204: LD_INT 2
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 1
34213: NEG
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 2
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 3
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 3
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 2
34290: NEG
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34324: LD_ADDR_VAR 0 27
34328: PUSH
34329: LD_INT 0
34331: PUSH
34332: LD_INT 0
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 0
34341: PUSH
34342: LD_INT 1
34344: NEG
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 1
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 0
34372: PUSH
34373: LD_INT 1
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: NEG
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 1
34405: NEG
34406: PUSH
34407: LD_INT 2
34409: NEG
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 0
34417: PUSH
34418: LD_INT 2
34420: NEG
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 1
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 2
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 2
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: PUSH
34470: LD_INT 2
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 0
34479: PUSH
34480: LD_INT 2
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: LD_INT 1
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: NEG
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: LD_INT 2
34527: NEG
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 1
34535: NEG
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: NEG
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: PUSH
34555: LD_INT 3
34557: NEG
34558: PUSH
34559: LD_INT 1
34561: NEG
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 3
34569: NEG
34570: PUSH
34571: LD_INT 2
34573: NEG
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34604: LD_ADDR_VAR 0 28
34608: PUSH
34609: LD_INT 0
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 0
34621: PUSH
34622: LD_INT 1
34624: NEG
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 1
34642: PUSH
34643: LD_INT 1
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: LD_INT 1
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 0
34697: PUSH
34698: LD_INT 2
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 1
34708: PUSH
34709: LD_INT 1
34711: NEG
34712: PUSH
34713: EMPTY
34714: LIST
34715: LIST
34716: PUSH
34717: LD_INT 2
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: PUSH
34730: LD_INT 1
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 2
34739: PUSH
34740: LD_INT 2
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 1
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 2
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 1
34769: NEG
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 2
34780: NEG
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 2
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 2
34803: NEG
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 2
34815: NEG
34816: PUSH
34817: LD_INT 3
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 1
34827: NEG
34828: PUSH
34829: LD_INT 3
34831: NEG
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 3
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 3
34851: NEG
34852: PUSH
34853: LD_INT 2
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34886: LD_ADDR_VAR 0 29
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 0
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: LD_INT 0
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 1
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 0
34934: PUSH
34935: LD_INT 1
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: NEG
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 1
34955: NEG
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: NEG
34968: PUSH
34969: LD_INT 2
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 2
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: LD_INT 1
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: LD_INT 1
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 1
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 2
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 2
35064: NEG
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: LD_INT 3
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: PUSH
35110: LD_INT 3
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 1
35119: NEG
35120: PUSH
35121: LD_INT 2
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: PUSH
35128: LD_INT 3
35130: NEG
35131: PUSH
35132: LD_INT 2
35134: NEG
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35165: LD_ADDR_VAR 0 30
35169: PUSH
35170: LD_INT 0
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 0
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 0
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 0
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: LD_INT 1
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: NEG
35247: PUSH
35248: LD_INT 2
35250: NEG
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 0
35258: PUSH
35259: LD_INT 2
35261: NEG
35262: PUSH
35263: EMPTY
35264: LIST
35265: LIST
35266: PUSH
35267: LD_INT 1
35269: PUSH
35270: LD_INT 1
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 0
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 2
35331: NEG
35332: PUSH
35333: LD_INT 0
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 2
35342: NEG
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: NEG
35355: PUSH
35356: LD_INT 3
35358: NEG
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: PUSH
35367: LD_INT 2
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: LD_INT 3
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: LD_INT 1
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: PUSH
35406: LD_INT 3
35408: NEG
35409: PUSH
35410: LD_INT 1
35412: NEG
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35443: LD_ADDR_VAR 0 31
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 0
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 1
35471: PUSH
35472: LD_INT 0
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 1
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 1
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: NEG
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: LD_INT 2
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 2
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: LD_INT 2
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 2
35608: NEG
35609: PUSH
35610: LD_INT 1
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: NEG
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: LD_INT 3
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 3
35655: PUSH
35656: LD_INT 1
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 3
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 2
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 3
35686: NEG
35687: PUSH
35688: LD_INT 2
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35721: LD_ADDR_VAR 0 32
35725: PUSH
35726: LD_INT 0
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 0
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 0
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 1
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 1
35790: NEG
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: LD_INT 1
35802: NEG
35803: PUSH
35804: LD_INT 2
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 2
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 1
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 2
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 2
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: LD_INT 1
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 1
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 2
35887: NEG
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 2
35898: NEG
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 1
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 3
35933: PUSH
35934: LD_INT 2
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 2
35953: NEG
35954: PUSH
35955: LD_INT 1
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 3
35964: NEG
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35999: LD_ADDR_VAR 0 33
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 1
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 0
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 2
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: LD_INT 1
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 2
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 2
36154: NEG
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 2
36165: NEG
36166: PUSH
36167: LD_INT 1
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 2
36177: NEG
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 2
36189: NEG
36190: PUSH
36191: LD_INT 3
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: LD_INT 1
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 3
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 3
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 3
36243: NEG
36244: PUSH
36245: LD_INT 2
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: LIST
36277: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36278: LD_ADDR_VAR 0 34
36282: PUSH
36283: LD_INT 0
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 0
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: PUSH
36317: LD_INT 1
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 0
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: LD_INT 0
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 1
36347: NEG
36348: PUSH
36349: LD_INT 1
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 2
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 0
36371: PUSH
36372: LD_INT 2
36374: NEG
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: LD_INT 2
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: PUSH
36414: LD_INT 2
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 1
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 2
36434: NEG
36435: PUSH
36436: LD_INT 0
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 2
36445: NEG
36446: PUSH
36447: LD_INT 1
36449: NEG
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: PUSH
36455: LD_INT 2
36457: NEG
36458: PUSH
36459: LD_INT 2
36461: NEG
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: LD_INT 3
36473: NEG
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: LD_INT 3
36492: PUSH
36493: LD_INT 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: PUSH
36503: LD_INT 3
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: LD_INT 1
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 3
36523: NEG
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36558: LD_ADDR_VAR 0 35
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 0
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: PUSH
36587: LD_INT 0
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: NEG
36628: PUSH
36629: LD_INT 1
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: PUSH
36647: LD_INT 2
36649: NEG
36650: PUSH
36651: LD_INT 1
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36670: LD_ADDR_VAR 0 36
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: LD_INT 0
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 0
36687: PUSH
36688: LD_INT 1
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: PUSH
36699: LD_INT 0
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 1
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: NEG
36740: PUSH
36741: LD_INT 1
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36782: LD_ADDR_VAR 0 37
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 0
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 0
36799: PUSH
36800: LD_INT 1
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 1
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 1
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: NEG
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: PUSH
36861: LD_INT 1
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 1
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36894: LD_ADDR_VAR 0 38
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 0
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 0
36911: PUSH
36912: LD_INT 1
36914: NEG
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 0
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: NEG
36964: PUSH
36965: LD_INT 1
36967: NEG
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 1
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 2
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37006: LD_ADDR_VAR 0 39
37010: PUSH
37011: LD_INT 0
37013: PUSH
37014: LD_INT 0
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: LD_INT 0
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: LD_INT 1
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: LD_INT 1
37079: NEG
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 2
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 2
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: LIST
37115: LIST
37116: LIST
37117: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37118: LD_ADDR_VAR 0 40
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 1
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 1
37210: NEG
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37230: LD_ADDR_VAR 0 41
37234: PUSH
37235: LD_INT 0
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 0
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 1
37258: PUSH
37259: LD_INT 0
37261: PUSH
37262: EMPTY
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 1
37268: PUSH
37269: LD_INT 1
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 1
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 1
37288: NEG
37289: PUSH
37290: LD_INT 0
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 1
37311: NEG
37312: PUSH
37313: LD_INT 2
37315: NEG
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 1
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 2
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 2
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 2
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 2
37396: NEG
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 2
37420: NEG
37421: PUSH
37422: LD_INT 3
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 3
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 3
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 3
37473: PUSH
37474: LD_INT 3
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 3
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 3
37504: NEG
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 3
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 3
37527: NEG
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: LD_INT 3
37543: NEG
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37580: LD_ADDR_VAR 0 42
37584: PUSH
37585: LD_INT 0
37587: PUSH
37588: LD_INT 0
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 1
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: NEG
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 1
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 1
37661: NEG
37662: PUSH
37663: LD_INT 2
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 2
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 2
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 1
37735: NEG
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 2
37746: NEG
37747: PUSH
37748: LD_INT 1
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: NEG
37771: PUSH
37772: LD_INT 3
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 3
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 3
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 3
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: LD_INT 3
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 3
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 3
37877: NEG
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: NEG
37890: PUSH
37891: LD_INT 3
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37930: LD_ADDR_VAR 0 43
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 0
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 0
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: EMPTY
37963: LIST
37964: LIST
37965: PUSH
37966: LD_INT 1
37968: PUSH
37969: LD_INT 1
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 2
38015: NEG
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 0
38023: PUSH
38024: LD_INT 2
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: PUSH
38056: LD_INT 1
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 0
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: NEG
38097: PUSH
38098: LD_INT 0
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: EMPTY
38114: LIST
38115: LIST
38116: PUSH
38117: LD_INT 1
38119: NEG
38120: PUSH
38121: LD_INT 3
38123: NEG
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 3
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 2
38153: PUSH
38154: LD_INT 1
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 0
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 3
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: LD_INT 3
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 1
38204: NEG
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 2
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 3
38226: NEG
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 3
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38278: LD_ADDR_VAR 0 44
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: LD_INT 0
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 1
38298: NEG
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: LD_INT 1
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: NEG
38337: PUSH
38338: LD_INT 0
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: NEG
38360: PUSH
38361: LD_INT 2
38363: NEG
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: PUSH
38383: LD_INT 0
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 1
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 2
38402: PUSH
38403: LD_INT 2
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 1
38422: NEG
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 2
38444: NEG
38445: PUSH
38446: LD_INT 1
38448: NEG
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: NEG
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: LD_INT 3
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 2
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 3
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 3
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: LD_INT 3
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 3
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: NEG
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 3
38575: NEG
38576: PUSH
38577: LD_INT 2
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 3
38587: NEG
38588: PUSH
38589: LD_INT 3
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38628: LD_ADDR_VAR 0 45
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 0
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 2
38794: NEG
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: LD_INT 2
38810: NEG
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 2
38818: NEG
38819: PUSH
38820: LD_INT 3
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 1
38830: NEG
38831: PUSH
38832: LD_INT 3
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 0
38842: PUSH
38843: LD_INT 3
38845: NEG
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: LD_INT 2
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: PUSH
38865: LD_INT 2
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 3
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 3
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 3
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: LD_INT 2
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 3
38925: NEG
38926: PUSH
38927: LD_INT 2
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 3
38937: NEG
38938: PUSH
38939: LD_INT 3
38941: NEG
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38978: LD_ADDR_VAR 0 46
38982: PUSH
38983: LD_INT 0
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: NEG
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: LD_INT 1
39085: NEG
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 2
39103: PUSH
39104: LD_INT 1
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: NEG
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 1
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 3
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 1
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: LD_INT 0
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 3
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 2
39263: NEG
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 3
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 3
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39326: LD_ADDR_VAR 0 47
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: LD_INT 1
39433: NEG
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 2
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: NEG
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39477: LD_ADDR_VAR 0 48
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: LD_INT 1
39497: NEG
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 1
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: NEG
39559: PUSH
39560: LD_INT 2
39562: NEG
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 2
39573: NEG
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: LD_INT 1
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39624: LD_ADDR_VAR 0 49
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 0
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: LD_INT 1
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 1
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 0
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 1
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 1
39708: NEG
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 2
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 2
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 2
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 2
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39768: LD_ADDR_VAR 0 50
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 0
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 0
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: LD_INT 1
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: NEG
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: NEG
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 1
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 2
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39912: LD_ADDR_VAR 0 51
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 0
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 1
39950: PUSH
39951: LD_INT 1
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 2
40024: NEG
40025: PUSH
40026: LD_INT 0
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40059: LD_ADDR_VAR 0 52
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 1
40079: NEG
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: NEG
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 1
40140: NEG
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: NEG
40187: PUSH
40188: LD_INT 2
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40210: LD_ADDR_VAR 0 53
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 1
40230: NEG
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 1
40268: NEG
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: LD_INT 1
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: LD_INT 2
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 2
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 1
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: LD_INT 2
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 2
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 2
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: NEG
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: LD_INT 2
40413: NEG
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40440: LD_ADDR_VAR 0 54
40444: PUSH
40445: LD_INT 0
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 1
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 1
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: LD_INT 2
40525: NEG
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 2
40565: PUSH
40566: LD_INT 1
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: PUSH
40576: LD_INT 2
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 1
40585: PUSH
40586: LD_INT 2
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 2
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 1
40605: NEG
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 2
40616: NEG
40617: PUSH
40618: LD_INT 0
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 2
40627: NEG
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: LD_INT 2
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40670: LD_ADDR_VAR 0 55
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: PUSH
40699: LD_INT 0
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 1
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 0
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: NEG
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: EMPTY
40746: LIST
40747: LIST
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: LD_INT 2
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 2
40805: PUSH
40806: LD_INT 2
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 2
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: NEG
40847: PUSH
40848: LD_INT 0
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 2
40857: NEG
40858: PUSH
40859: LD_INT 1
40861: NEG
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 2
40869: NEG
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40900: LD_ADDR_VAR 0 56
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: PUSH
40929: LD_INT 0
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: LD_INT 1
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 0
40948: PUSH
40949: LD_INT 1
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 0
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 0
40993: PUSH
40994: LD_INT 2
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 1
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 2
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 2
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: LD_INT 2
41087: NEG
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 2
41099: NEG
41100: PUSH
41101: LD_INT 2
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41130: LD_ADDR_VAR 0 57
41134: PUSH
41135: LD_INT 0
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: LD_INT 0
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: LD_INT 1
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 1
41188: NEG
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 2
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 2
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 0
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: PUSH
41256: LD_INT 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 2
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 2
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: LD_INT 0
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: LD_INT 1
41321: NEG
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: NEG
41330: PUSH
41331: LD_INT 2
41333: NEG
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41360: LD_ADDR_VAR 0 58
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: LD_INT 0
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 1
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 1
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 1
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: LD_INT 2
41445: NEG
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: LD_INT 2
41456: NEG
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: PUSH
41465: LD_INT 1
41467: NEG
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 2
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 1
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 2
41536: NEG
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 1
41551: NEG
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: LD_INT 2
41563: NEG
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41590: LD_ADDR_VAR 0 59
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: LD_INT 0
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: PUSH
41629: LD_INT 1
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 1
41659: NEG
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41678: LD_ADDR_VAR 0 60
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 0
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 1
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41766: LD_ADDR_VAR 0 61
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41854: LD_ADDR_VAR 0 62
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 1
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 0
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 1
41923: NEG
41924: PUSH
41925: LD_INT 1
41927: NEG
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41942: LD_ADDR_VAR 0 63
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: LD_INT 1
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: LD_INT 0
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 0
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 1
42000: NEG
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42030: LD_ADDR_VAR 0 64
42034: PUSH
42035: LD_INT 0
42037: PUSH
42038: LD_INT 0
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 1
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
// end ; 1 :
42118: GO 48015
42120: LD_INT 1
42122: DOUBLE
42123: EQUAL
42124: IFTRUE 42128
42126: GO 44751
42128: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42129: LD_ADDR_VAR 0 11
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: LD_INT 3
42140: NEG
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: LD_INT 3
42151: NEG
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 2
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42173: LD_ADDR_VAR 0 12
42177: PUSH
42178: LD_INT 2
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 3
42191: PUSH
42192: LD_INT 0
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 3
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42214: LD_ADDR_VAR 0 13
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 3
42231: PUSH
42232: LD_INT 3
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 3
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42254: LD_ADDR_VAR 0 14
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 3
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: LD_INT 3
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: LD_INT 2
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: LIST
42294: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42295: LD_ADDR_VAR 0 15
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 3
42313: NEG
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 3
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: LIST
42338: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42339: LD_ADDR_VAR 0 16
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: LD_INT 3
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 3
42358: NEG
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 3
42370: NEG
42371: PUSH
42372: LD_INT 3
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42385: LD_ADDR_VAR 0 17
42389: PUSH
42390: LD_INT 1
42392: NEG
42393: PUSH
42394: LD_INT 3
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 0
42404: PUSH
42405: LD_INT 3
42407: NEG
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 1
42415: PUSH
42416: LD_INT 2
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42429: LD_ADDR_VAR 0 18
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 1
42439: NEG
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: PUSH
42448: LD_INT 0
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: PUSH
42455: LD_INT 3
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: LIST
42469: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42470: LD_ADDR_VAR 0 19
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 3
42487: PUSH
42488: LD_INT 3
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 2
42497: PUSH
42498: LD_INT 3
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42510: LD_ADDR_VAR 0 20
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: LD_INT 3
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 1
42537: NEG
42538: PUSH
42539: LD_INT 2
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42551: LD_ADDR_VAR 0 21
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: NEG
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 3
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42595: LD_ADDR_VAR 0 22
42599: PUSH
42600: LD_INT 2
42602: NEG
42603: PUSH
42604: LD_INT 3
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 3
42614: NEG
42615: PUSH
42616: LD_INT 2
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: LD_INT 3
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42641: LD_ADDR_VAR 0 23
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 3
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: NEG
42660: PUSH
42661: LD_INT 4
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 1
42671: PUSH
42672: LD_INT 3
42674: NEG
42675: PUSH
42676: EMPTY
42677: LIST
42678: LIST
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42685: LD_ADDR_VAR 0 24
42689: PUSH
42690: LD_INT 3
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 4
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: LIST
42725: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42726: LD_ADDR_VAR 0 25
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: LD_INT 3
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 4
42743: PUSH
42744: LD_INT 3
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 3
42753: PUSH
42754: LD_INT 4
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42766: LD_ADDR_VAR 0 26
42770: PUSH
42771: LD_INT 0
42773: PUSH
42774: LD_INT 3
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 4
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 1
42793: NEG
42794: PUSH
42795: LD_INT 3
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42807: LD_ADDR_VAR 0 27
42811: PUSH
42812: LD_INT 3
42814: NEG
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: NEG
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 4
42836: NEG
42837: PUSH
42838: LD_INT 1
42840: NEG
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: LIST
42850: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42851: LD_ADDR_VAR 0 28
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 3
42870: NEG
42871: PUSH
42872: LD_INT 4
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 4
42882: NEG
42883: PUSH
42884: LD_INT 3
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42897: LD_ADDR_VAR 0 29
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 3
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 4
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: LD_INT 4
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 3
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: LD_INT 5
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 5
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 4
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 6
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 6
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 5
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43052: LD_ADDR_VAR 0 30
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 3
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: PUSH
43091: LD_INT 1
43093: NEG
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 4
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: LD_INT 1
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 4
43121: PUSH
43122: LD_INT 1
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 5
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 5
43142: PUSH
43143: LD_INT 1
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 5
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 6
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 6
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: LIST
43185: LIST
43186: LIST
43187: LIST
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43195: LD_ADDR_VAR 0 31
43199: PUSH
43200: LD_INT 3
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 3
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: PUSH
43223: LD_INT 3
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: LD_INT 4
43232: PUSH
43233: LD_INT 3
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: LD_INT 4
43242: PUSH
43243: LD_INT 4
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: LD_INT 4
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 5
43262: PUSH
43263: LD_INT 4
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: LD_INT 5
43272: PUSH
43273: LD_INT 5
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 4
43282: PUSH
43283: LD_INT 5
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PUSH
43290: LD_INT 6
43292: PUSH
43293: LD_INT 5
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 6
43302: PUSH
43303: LD_INT 6
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 5
43312: PUSH
43313: LD_INT 6
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43334: LD_ADDR_VAR 0 32
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 3
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 3
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 1
43372: PUSH
43373: LD_INT 4
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 4
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: LD_INT 3
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: LD_INT 5
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: LD_INT 5
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: LD_INT 4
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: PUSH
43435: LD_INT 6
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: LD_INT 6
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 5
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43477: LD_ADDR_VAR 0 33
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 4
43529: NEG
43530: PUSH
43531: LD_INT 0
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 4
43540: NEG
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 4
43552: NEG
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 5
43563: NEG
43564: PUSH
43565: LD_INT 0
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 5
43574: NEG
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 5
43586: NEG
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 6
43597: NEG
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 6
43608: NEG
43609: PUSH
43610: LD_INT 1
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43632: LD_ADDR_VAR 0 34
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: LD_INT 3
43643: NEG
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: LD_INT 2
43655: NEG
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 3
43663: NEG
43664: PUSH
43665: LD_INT 3
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 3
43675: NEG
43676: PUSH
43677: LD_INT 4
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 4
43687: NEG
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 4
43699: NEG
43700: PUSH
43701: LD_INT 4
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 4
43711: NEG
43712: PUSH
43713: LD_INT 5
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 5
43723: NEG
43724: PUSH
43725: LD_INT 4
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 5
43735: NEG
43736: PUSH
43737: LD_INT 5
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 5
43747: NEG
43748: PUSH
43749: LD_INT 6
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 6
43759: NEG
43760: PUSH
43761: LD_INT 5
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 6
43771: NEG
43772: PUSH
43773: LD_INT 6
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43795: LD_ADDR_VAR 0 41
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43839: LD_ADDR_VAR 0 42
43843: PUSH
43844: LD_INT 2
43846: PUSH
43847: LD_INT 0
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 2
43856: PUSH
43857: LD_INT 1
43859: NEG
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: PUSH
43868: LD_INT 1
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43880: LD_ADDR_VAR 0 43
43884: PUSH
43885: LD_INT 2
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: LD_INT 3
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43920: LD_ADDR_VAR 0 44
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 1
43937: PUSH
43938: LD_INT 3
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43961: LD_ADDR_VAR 0 45
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: NEG
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 3
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44005: LD_ADDR_VAR 0 46
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: LD_INT 3
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 3
44036: NEG
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44051: LD_ADDR_VAR 0 47
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 3
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 3
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44084: LD_ADDR_VAR 0 48
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 2
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44115: LD_ADDR_VAR 0 49
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 2
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44144: LD_ADDR_VAR 0 50
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 3
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 3
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44173: LD_ADDR_VAR 0 51
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44204: LD_ADDR_VAR 0 52
44208: PUSH
44209: LD_INT 3
44211: NEG
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: LD_INT 2
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44237: LD_ADDR_VAR 0 53
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 2
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44281: LD_ADDR_VAR 0 54
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 3
44299: PUSH
44300: LD_INT 0
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: LIST
44321: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44322: LD_ADDR_VAR 0 55
44326: PUSH
44327: LD_INT 3
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 3
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44362: LD_ADDR_VAR 0 56
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 3
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 3
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: LIST
44402: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44403: LD_ADDR_VAR 0 57
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: LD_INT 1
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 3
44421: NEG
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 3
44432: NEG
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: LIST
44446: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44447: LD_ADDR_VAR 0 58
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 3
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 3
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 3
44478: NEG
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: LIST
44492: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44493: LD_ADDR_VAR 0 59
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 2
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: LIST
44536: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44537: LD_ADDR_VAR 0 60
44541: PUSH
44542: LD_INT 1
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44578: LD_ADDR_VAR 0 61
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: PUSH
44596: LD_INT 2
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 2
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: LIST
44617: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44618: LD_ADDR_VAR 0 62
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: LD_INT 2
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 0
44635: PUSH
44636: LD_INT 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: NEG
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44659: LD_ADDR_VAR 0 63
44663: PUSH
44664: LD_INT 1
44666: NEG
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44703: LD_ADDR_VAR 0 64
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: LIST
44748: ST_TO_ADDR
// end ; 2 :
44749: GO 48015
44751: LD_INT 2
44753: DOUBLE
44754: EQUAL
44755: IFTRUE 44759
44757: GO 48014
44759: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44760: LD_ADDR_VAR 0 29
44764: PUSH
44765: LD_INT 4
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 4
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 5
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 4
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 3
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 3
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 3
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 5
44850: PUSH
44851: LD_INT 2
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 3
44860: PUSH
44861: LD_INT 3
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: LD_INT 2
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 4
44880: PUSH
44881: LD_INT 3
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 4
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 3
44900: PUSH
44901: LD_INT 4
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 3
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 4
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: PUSH
44941: LD_INT 4
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 4
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 3
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 4
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: PUSH
44981: LD_INT 5
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 0
44990: PUSH
44991: LD_INT 5
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: LD_INT 3
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 5
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 3
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 3
45054: NEG
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: LD_INT 1
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 4
45099: NEG
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 4
45110: NEG
45111: PUSH
45112: LD_INT 1
45114: NEG
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 4
45122: NEG
45123: PUSH
45124: LD_INT 2
45126: NEG
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: NEG
45135: PUSH
45136: LD_INT 2
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 4
45145: NEG
45146: PUSH
45147: LD_INT 4
45149: NEG
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 4
45157: NEG
45158: PUSH
45159: LD_INT 5
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 3
45169: NEG
45170: PUSH
45171: LD_INT 4
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 3
45181: NEG
45182: PUSH
45183: LD_INT 3
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 4
45193: NEG
45194: PUSH
45195: LD_INT 3
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 5
45205: NEG
45206: PUSH
45207: LD_INT 4
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 5
45217: NEG
45218: PUSH
45219: LD_INT 5
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: LD_INT 5
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 5
45241: NEG
45242: PUSH
45243: LD_INT 3
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45298: LD_ADDR_VAR 0 30
45302: PUSH
45303: LD_INT 4
45305: PUSH
45306: LD_INT 4
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 4
45315: PUSH
45316: LD_INT 3
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 5
45325: PUSH
45326: LD_INT 4
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 5
45335: PUSH
45336: LD_INT 5
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 4
45345: PUSH
45346: LD_INT 5
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: LD_INT 4
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 5
45375: PUSH
45376: LD_INT 3
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 3
45385: PUSH
45386: LD_INT 5
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 3
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: LD_INT 2
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: LD_INT 3
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 4
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 3
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 4
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 4
45488: NEG
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 4
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 3
45511: NEG
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: NEG
45523: PUSH
45524: LD_INT 1
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 4
45533: NEG
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 5
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 5
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: LD_INT 5
45567: NEG
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: NEG
45580: PUSH
45581: LD_INT 2
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 3
45590: NEG
45591: PUSH
45592: LD_INT 3
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 3
45602: NEG
45603: PUSH
45604: LD_INT 4
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: NEG
45615: PUSH
45616: LD_INT 3
45618: NEG
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: LD_INT 2
45630: NEG
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 4
45650: NEG
45651: PUSH
45652: LD_INT 3
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 4
45662: NEG
45663: PUSH
45664: LD_INT 4
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 4
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 0
45698: PUSH
45699: LD_INT 4
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_INT 5
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 4
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: LD_INT 3
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 4
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 5
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: PUSH
45778: LD_INT 3
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: LD_INT 5
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45845: LD_ADDR_VAR 0 31
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: LD_INT 4
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 4
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 5
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 5
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 4
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 3
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 2
45924: PUSH
45925: LD_INT 5
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 3
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 3
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 4
46001: NEG
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 4
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 4
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 2
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 4
46047: NEG
46048: PUSH
46049: LD_INT 4
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 4
46059: NEG
46060: PUSH
46061: LD_INT 5
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 3
46071: NEG
46072: PUSH
46073: LD_INT 4
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: LD_INT 3
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 4
46095: NEG
46096: PUSH
46097: LD_INT 3
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 5
46107: NEG
46108: PUSH
46109: LD_INT 4
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 5
46119: NEG
46120: PUSH
46121: LD_INT 5
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: LD_INT 5
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 5
46143: NEG
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 0
46155: PUSH
46156: LD_INT 3
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 4
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 3
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 3
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: LD_INT 4
46226: NEG
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 2
46234: PUSH
46235: LD_INT 2
46237: NEG
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: LD_INT 4
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 4
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 5
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 5
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 4
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 3
46318: PUSH
46319: LD_INT 1
46321: NEG
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 5
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46395: LD_ADDR_VAR 0 32
46399: PUSH
46400: LD_INT 4
46402: NEG
46403: PUSH
46404: LD_INT 0
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 4
46413: NEG
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: NEG
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 4
46447: NEG
46448: PUSH
46449: LD_INT 1
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 5
46458: NEG
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 5
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 5
46481: NEG
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 3
46493: NEG
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 3
46504: NEG
46505: PUSH
46506: LD_INT 3
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 3
46516: NEG
46517: PUSH
46518: LD_INT 4
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 3
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 3
46552: NEG
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 4
46564: NEG
46565: PUSH
46566: LD_INT 3
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 4
46576: NEG
46577: PUSH
46578: LD_INT 4
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: LD_INT 4
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 4
46600: NEG
46601: PUSH
46602: LD_INT 2
46604: NEG
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 0
46612: PUSH
46613: LD_INT 4
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 0
46623: PUSH
46624: LD_INT 5
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: LD_INT 4
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 3
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 3
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 4
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 5
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 5
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 3
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 3
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 4
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: PUSH
46766: LD_INT 0
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: LD_INT 2
46789: NEG
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 4
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 4
46807: PUSH
46808: LD_INT 4
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 4
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 5
46827: PUSH
46828: LD_INT 4
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 5
46837: PUSH
46838: LD_INT 5
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 4
46847: PUSH
46848: LD_INT 5
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: LD_INT 4
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 5
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 3
46887: PUSH
46888: LD_INT 5
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46942: LD_ADDR_VAR 0 33
46946: PUSH
46947: LD_INT 4
46949: NEG
46950: PUSH
46951: LD_INT 4
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 4
46961: NEG
46962: PUSH
46963: LD_INT 5
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 4
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 3
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 4
46997: NEG
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: NEG
47010: PUSH
47011: LD_INT 4
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 5
47021: NEG
47022: PUSH
47023: LD_INT 5
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 3
47033: NEG
47034: PUSH
47035: LD_INT 5
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 5
47045: NEG
47046: PUSH
47047: LD_INT 3
47049: NEG
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 4
47071: NEG
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 1
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: NEG
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: NEG
47125: PUSH
47126: LD_INT 4
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 4
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 4
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 4
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 5
47180: PUSH
47181: LD_INT 0
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 5
47190: PUSH
47191: LD_INT 1
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 4
47200: PUSH
47201: LD_INT 1
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: LD_INT 1
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: LD_INT 2
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 5
47242: PUSH
47243: LD_INT 2
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: LD_INT 3
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: LD_INT 2
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 4
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 4
47282: PUSH
47283: LD_INT 4
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 4
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 2
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 4
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: LD_INT 4
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: LD_INT 3
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 4
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 1
47372: PUSH
47373: LD_INT 5
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: LD_INT 5
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 4
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: PUSH
47415: LD_INT 5
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 3
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47480: LD_ADDR_VAR 0 34
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 4
47490: NEG
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: LD_INT 5
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: LD_INT 4
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 3
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 4
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 1
47554: NEG
47555: PUSH
47556: LD_INT 5
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: LD_INT 3
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 5
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 4
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 4
47620: PUSH
47621: LD_INT 1
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 1
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 4
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 4
47682: PUSH
47683: LD_INT 4
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 4
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 5
47702: PUSH
47703: LD_INT 4
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 5
47712: PUSH
47713: LD_INT 5
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 4
47722: PUSH
47723: LD_INT 5
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 4
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 3
47742: PUSH
47743: LD_INT 3
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 5
47752: PUSH
47753: LD_INT 3
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: LD_INT 5
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: LD_INT 3
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 1
47802: PUSH
47803: LD_INT 4
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 4
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 4
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 4
47865: NEG
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 4
47876: NEG
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: NEG
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 3
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 4
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 5
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 5
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 5
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 3
47956: NEG
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: ST_TO_ADDR
// end ; end ;
48012: GO 48015
48014: POP
// case btype of b_depot , b_warehouse :
48015: LD_VAR 0 1
48019: PUSH
48020: LD_INT 0
48022: DOUBLE
48023: EQUAL
48024: IFTRUE 48034
48026: LD_INT 1
48028: DOUBLE
48029: EQUAL
48030: IFTRUE 48034
48032: GO 48235
48034: POP
// case nation of nation_american :
48035: LD_VAR 0 5
48039: PUSH
48040: LD_INT 1
48042: DOUBLE
48043: EQUAL
48044: IFTRUE 48048
48046: GO 48104
48048: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48049: LD_ADDR_VAR 0 9
48053: PUSH
48054: LD_VAR 0 11
48058: PUSH
48059: LD_VAR 0 12
48063: PUSH
48064: LD_VAR 0 13
48068: PUSH
48069: LD_VAR 0 14
48073: PUSH
48074: LD_VAR 0 15
48078: PUSH
48079: LD_VAR 0 16
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: PUSH
48092: LD_VAR 0 4
48096: PUSH
48097: LD_INT 1
48099: PLUS
48100: ARRAY
48101: ST_TO_ADDR
48102: GO 48233
48104: LD_INT 2
48106: DOUBLE
48107: EQUAL
48108: IFTRUE 48112
48110: GO 48168
48112: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48113: LD_ADDR_VAR 0 9
48117: PUSH
48118: LD_VAR 0 17
48122: PUSH
48123: LD_VAR 0 18
48127: PUSH
48128: LD_VAR 0 19
48132: PUSH
48133: LD_VAR 0 20
48137: PUSH
48138: LD_VAR 0 21
48142: PUSH
48143: LD_VAR 0 22
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: PUSH
48156: LD_VAR 0 4
48160: PUSH
48161: LD_INT 1
48163: PLUS
48164: ARRAY
48165: ST_TO_ADDR
48166: GO 48233
48168: LD_INT 3
48170: DOUBLE
48171: EQUAL
48172: IFTRUE 48176
48174: GO 48232
48176: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48177: LD_ADDR_VAR 0 9
48181: PUSH
48182: LD_VAR 0 23
48186: PUSH
48187: LD_VAR 0 24
48191: PUSH
48192: LD_VAR 0 25
48196: PUSH
48197: LD_VAR 0 26
48201: PUSH
48202: LD_VAR 0 27
48206: PUSH
48207: LD_VAR 0 28
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: LD_VAR 0 4
48224: PUSH
48225: LD_INT 1
48227: PLUS
48228: ARRAY
48229: ST_TO_ADDR
48230: GO 48233
48232: POP
48233: GO 48788
48235: LD_INT 2
48237: DOUBLE
48238: EQUAL
48239: IFTRUE 48249
48241: LD_INT 3
48243: DOUBLE
48244: EQUAL
48245: IFTRUE 48249
48247: GO 48305
48249: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48250: LD_ADDR_VAR 0 9
48254: PUSH
48255: LD_VAR 0 29
48259: PUSH
48260: LD_VAR 0 30
48264: PUSH
48265: LD_VAR 0 31
48269: PUSH
48270: LD_VAR 0 32
48274: PUSH
48275: LD_VAR 0 33
48279: PUSH
48280: LD_VAR 0 34
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: PUSH
48293: LD_VAR 0 4
48297: PUSH
48298: LD_INT 1
48300: PLUS
48301: ARRAY
48302: ST_TO_ADDR
48303: GO 48788
48305: LD_INT 16
48307: DOUBLE
48308: EQUAL
48309: IFTRUE 48367
48311: LD_INT 17
48313: DOUBLE
48314: EQUAL
48315: IFTRUE 48367
48317: LD_INT 18
48319: DOUBLE
48320: EQUAL
48321: IFTRUE 48367
48323: LD_INT 19
48325: DOUBLE
48326: EQUAL
48327: IFTRUE 48367
48329: LD_INT 22
48331: DOUBLE
48332: EQUAL
48333: IFTRUE 48367
48335: LD_INT 20
48337: DOUBLE
48338: EQUAL
48339: IFTRUE 48367
48341: LD_INT 21
48343: DOUBLE
48344: EQUAL
48345: IFTRUE 48367
48347: LD_INT 23
48349: DOUBLE
48350: EQUAL
48351: IFTRUE 48367
48353: LD_INT 24
48355: DOUBLE
48356: EQUAL
48357: IFTRUE 48367
48359: LD_INT 25
48361: DOUBLE
48362: EQUAL
48363: IFTRUE 48367
48365: GO 48423
48367: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48368: LD_ADDR_VAR 0 9
48372: PUSH
48373: LD_VAR 0 35
48377: PUSH
48378: LD_VAR 0 36
48382: PUSH
48383: LD_VAR 0 37
48387: PUSH
48388: LD_VAR 0 38
48392: PUSH
48393: LD_VAR 0 39
48397: PUSH
48398: LD_VAR 0 40
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: PUSH
48411: LD_VAR 0 4
48415: PUSH
48416: LD_INT 1
48418: PLUS
48419: ARRAY
48420: ST_TO_ADDR
48421: GO 48788
48423: LD_INT 6
48425: DOUBLE
48426: EQUAL
48427: IFTRUE 48479
48429: LD_INT 7
48431: DOUBLE
48432: EQUAL
48433: IFTRUE 48479
48435: LD_INT 8
48437: DOUBLE
48438: EQUAL
48439: IFTRUE 48479
48441: LD_INT 13
48443: DOUBLE
48444: EQUAL
48445: IFTRUE 48479
48447: LD_INT 12
48449: DOUBLE
48450: EQUAL
48451: IFTRUE 48479
48453: LD_INT 15
48455: DOUBLE
48456: EQUAL
48457: IFTRUE 48479
48459: LD_INT 11
48461: DOUBLE
48462: EQUAL
48463: IFTRUE 48479
48465: LD_INT 14
48467: DOUBLE
48468: EQUAL
48469: IFTRUE 48479
48471: LD_INT 10
48473: DOUBLE
48474: EQUAL
48475: IFTRUE 48479
48477: GO 48535
48479: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48480: LD_ADDR_VAR 0 9
48484: PUSH
48485: LD_VAR 0 41
48489: PUSH
48490: LD_VAR 0 42
48494: PUSH
48495: LD_VAR 0 43
48499: PUSH
48500: LD_VAR 0 44
48504: PUSH
48505: LD_VAR 0 45
48509: PUSH
48510: LD_VAR 0 46
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: PUSH
48523: LD_VAR 0 4
48527: PUSH
48528: LD_INT 1
48530: PLUS
48531: ARRAY
48532: ST_TO_ADDR
48533: GO 48788
48535: LD_INT 36
48537: DOUBLE
48538: EQUAL
48539: IFTRUE 48543
48541: GO 48599
48543: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48544: LD_ADDR_VAR 0 9
48548: PUSH
48549: LD_VAR 0 47
48553: PUSH
48554: LD_VAR 0 48
48558: PUSH
48559: LD_VAR 0 49
48563: PUSH
48564: LD_VAR 0 50
48568: PUSH
48569: LD_VAR 0 51
48573: PUSH
48574: LD_VAR 0 52
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: PUSH
48587: LD_VAR 0 4
48591: PUSH
48592: LD_INT 1
48594: PLUS
48595: ARRAY
48596: ST_TO_ADDR
48597: GO 48788
48599: LD_INT 4
48601: DOUBLE
48602: EQUAL
48603: IFTRUE 48625
48605: LD_INT 5
48607: DOUBLE
48608: EQUAL
48609: IFTRUE 48625
48611: LD_INT 34
48613: DOUBLE
48614: EQUAL
48615: IFTRUE 48625
48617: LD_INT 37
48619: DOUBLE
48620: EQUAL
48621: IFTRUE 48625
48623: GO 48681
48625: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48626: LD_ADDR_VAR 0 9
48630: PUSH
48631: LD_VAR 0 53
48635: PUSH
48636: LD_VAR 0 54
48640: PUSH
48641: LD_VAR 0 55
48645: PUSH
48646: LD_VAR 0 56
48650: PUSH
48651: LD_VAR 0 57
48655: PUSH
48656: LD_VAR 0 58
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: PUSH
48669: LD_VAR 0 4
48673: PUSH
48674: LD_INT 1
48676: PLUS
48677: ARRAY
48678: ST_TO_ADDR
48679: GO 48788
48681: LD_INT 31
48683: DOUBLE
48684: EQUAL
48685: IFTRUE 48731
48687: LD_INT 32
48689: DOUBLE
48690: EQUAL
48691: IFTRUE 48731
48693: LD_INT 33
48695: DOUBLE
48696: EQUAL
48697: IFTRUE 48731
48699: LD_INT 27
48701: DOUBLE
48702: EQUAL
48703: IFTRUE 48731
48705: LD_INT 26
48707: DOUBLE
48708: EQUAL
48709: IFTRUE 48731
48711: LD_INT 28
48713: DOUBLE
48714: EQUAL
48715: IFTRUE 48731
48717: LD_INT 29
48719: DOUBLE
48720: EQUAL
48721: IFTRUE 48731
48723: LD_INT 30
48725: DOUBLE
48726: EQUAL
48727: IFTRUE 48731
48729: GO 48787
48731: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48732: LD_ADDR_VAR 0 9
48736: PUSH
48737: LD_VAR 0 59
48741: PUSH
48742: LD_VAR 0 60
48746: PUSH
48747: LD_VAR 0 61
48751: PUSH
48752: LD_VAR 0 62
48756: PUSH
48757: LD_VAR 0 63
48761: PUSH
48762: LD_VAR 0 64
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: PUSH
48775: LD_VAR 0 4
48779: PUSH
48780: LD_INT 1
48782: PLUS
48783: ARRAY
48784: ST_TO_ADDR
48785: GO 48788
48787: POP
// temp_list2 = [ ] ;
48788: LD_ADDR_VAR 0 10
48792: PUSH
48793: EMPTY
48794: ST_TO_ADDR
// for i in temp_list do
48795: LD_ADDR_VAR 0 8
48799: PUSH
48800: LD_VAR 0 9
48804: PUSH
48805: FOR_IN
48806: IFFALSE 48858
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48808: LD_ADDR_VAR 0 10
48812: PUSH
48813: LD_VAR 0 10
48817: PUSH
48818: LD_VAR 0 8
48822: PUSH
48823: LD_INT 1
48825: ARRAY
48826: PUSH
48827: LD_VAR 0 2
48831: PLUS
48832: PUSH
48833: LD_VAR 0 8
48837: PUSH
48838: LD_INT 2
48840: ARRAY
48841: PUSH
48842: LD_VAR 0 3
48846: PLUS
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: EMPTY
48853: LIST
48854: ADD
48855: ST_TO_ADDR
48856: GO 48805
48858: POP
48859: POP
// result = temp_list2 ;
48860: LD_ADDR_VAR 0 7
48864: PUSH
48865: LD_VAR 0 10
48869: ST_TO_ADDR
// end ;
48870: LD_VAR 0 7
48874: RET
// export function EnemyInRange ( unit , dist ) ; begin
48875: LD_INT 0
48877: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48878: LD_ADDR_VAR 0 3
48882: PUSH
48883: LD_VAR 0 1
48887: PPUSH
48888: CALL_OW 255
48892: PPUSH
48893: LD_VAR 0 1
48897: PPUSH
48898: CALL_OW 250
48902: PPUSH
48903: LD_VAR 0 1
48907: PPUSH
48908: CALL_OW 251
48912: PPUSH
48913: LD_VAR 0 2
48917: PPUSH
48918: CALL 22132 0 4
48922: PUSH
48923: LD_INT 4
48925: ARRAY
48926: ST_TO_ADDR
// end ;
48927: LD_VAR 0 3
48931: RET
// export function PlayerSeeMe ( unit ) ; begin
48932: LD_INT 0
48934: PPUSH
// result := See ( your_side , unit ) ;
48935: LD_ADDR_VAR 0 2
48939: PUSH
48940: LD_OWVAR 2
48944: PPUSH
48945: LD_VAR 0 1
48949: PPUSH
48950: CALL_OW 292
48954: ST_TO_ADDR
// end ;
48955: LD_VAR 0 2
48959: RET
// export function ReverseDir ( unit ) ; begin
48960: LD_INT 0
48962: PPUSH
// if not unit then
48963: LD_VAR 0 1
48967: NOT
48968: IFFALSE 48972
// exit ;
48970: GO 48995
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48972: LD_ADDR_VAR 0 2
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 254
48986: PUSH
48987: LD_INT 3
48989: PLUS
48990: PUSH
48991: LD_INT 6
48993: MOD
48994: ST_TO_ADDR
// end ;
48995: LD_VAR 0 2
48999: RET
// export function ReverseArray ( array ) ; var i ; begin
49000: LD_INT 0
49002: PPUSH
49003: PPUSH
// if not array then
49004: LD_VAR 0 1
49008: NOT
49009: IFFALSE 49013
// exit ;
49011: GO 49068
// result := [ ] ;
49013: LD_ADDR_VAR 0 2
49017: PUSH
49018: EMPTY
49019: ST_TO_ADDR
// for i := array downto 1 do
49020: LD_ADDR_VAR 0 3
49024: PUSH
49025: DOUBLE
49026: LD_VAR 0 1
49030: INC
49031: ST_TO_ADDR
49032: LD_INT 1
49034: PUSH
49035: FOR_DOWNTO
49036: IFFALSE 49066
// result := Join ( result , array [ i ] ) ;
49038: LD_ADDR_VAR 0 2
49042: PUSH
49043: LD_VAR 0 2
49047: PPUSH
49048: LD_VAR 0 1
49052: PUSH
49053: LD_VAR 0 3
49057: ARRAY
49058: PPUSH
49059: CALL 53920 0 2
49063: ST_TO_ADDR
49064: GO 49035
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 2
49072: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
// if not unit or not hexes then
49081: LD_VAR 0 1
49085: NOT
49086: IFTRUE 49095
49088: PUSH
49089: LD_VAR 0 2
49093: NOT
49094: OR
49095: IFFALSE 49099
// exit ;
49097: GO 49222
// dist := 9999 ;
49099: LD_ADDR_VAR 0 5
49103: PUSH
49104: LD_INT 9999
49106: ST_TO_ADDR
// for i = 1 to hexes do
49107: LD_ADDR_VAR 0 4
49111: PUSH
49112: DOUBLE
49113: LD_INT 1
49115: DEC
49116: ST_TO_ADDR
49117: LD_VAR 0 2
49121: PUSH
49122: FOR_TO
49123: IFFALSE 49210
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49125: LD_ADDR_VAR 0 6
49129: PUSH
49130: LD_VAR 0 1
49134: PPUSH
49135: LD_VAR 0 2
49139: PUSH
49140: LD_VAR 0 4
49144: ARRAY
49145: PUSH
49146: LD_INT 1
49148: ARRAY
49149: PPUSH
49150: LD_VAR 0 2
49154: PUSH
49155: LD_VAR 0 4
49159: ARRAY
49160: PUSH
49161: LD_INT 2
49163: ARRAY
49164: PPUSH
49165: CALL_OW 297
49169: ST_TO_ADDR
// if tdist < dist then
49170: LD_VAR 0 6
49174: PUSH
49175: LD_VAR 0 5
49179: LESS
49180: IFFALSE 49208
// begin hex := hexes [ i ] ;
49182: LD_ADDR_VAR 0 8
49186: PUSH
49187: LD_VAR 0 2
49191: PUSH
49192: LD_VAR 0 4
49196: ARRAY
49197: ST_TO_ADDR
// dist := tdist ;
49198: LD_ADDR_VAR 0 5
49202: PUSH
49203: LD_VAR 0 6
49207: ST_TO_ADDR
// end ; end ;
49208: GO 49122
49210: POP
49211: POP
// result := hex ;
49212: LD_ADDR_VAR 0 3
49216: PUSH
49217: LD_VAR 0 8
49221: ST_TO_ADDR
// end ;
49222: LD_VAR 0 3
49226: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49227: LD_INT 0
49229: PPUSH
49230: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49231: LD_VAR 0 1
49235: NOT
49236: IFTRUE 49275
49238: PUSH
49239: LD_VAR 0 1
49243: PUSH
49244: LD_INT 21
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 23
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PPUSH
49268: CALL_OW 69
49272: IN
49273: NOT
49274: OR
49275: IFFALSE 49279
// exit ;
49277: GO 49326
// for i = 1 to 3 do
49279: LD_ADDR_VAR 0 3
49283: PUSH
49284: DOUBLE
49285: LD_INT 1
49287: DEC
49288: ST_TO_ADDR
49289: LD_INT 3
49291: PUSH
49292: FOR_TO
49293: IFFALSE 49324
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 250
49304: PPUSH
49305: LD_VAR 0 1
49309: PPUSH
49310: CALL_OW 251
49314: PPUSH
49315: LD_INT 1
49317: PPUSH
49318: CALL_OW 453
49322: GO 49292
49324: POP
49325: POP
// end ;
49326: LD_VAR 0 2
49330: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49331: LD_INT 0
49333: PPUSH
49334: PPUSH
49335: PPUSH
49336: PPUSH
49337: PPUSH
49338: PPUSH
// if not unit or not enemy_unit then
49339: LD_VAR 0 1
49343: NOT
49344: IFTRUE 49353
49346: PUSH
49347: LD_VAR 0 2
49351: NOT
49352: OR
49353: IFFALSE 49357
// exit ;
49355: GO 49838
// if GetLives ( i ) < 250 then
49357: LD_VAR 0 4
49361: PPUSH
49362: CALL_OW 256
49366: PUSH
49367: LD_INT 250
49369: LESS
49370: IFFALSE 49383
// begin ComAutodestruct ( i ) ;
49372: LD_VAR 0 4
49376: PPUSH
49377: CALL 49227 0 1
// exit ;
49381: GO 49838
// end ; x := GetX ( enemy_unit ) ;
49383: LD_ADDR_VAR 0 7
49387: PUSH
49388: LD_VAR 0 2
49392: PPUSH
49393: CALL_OW 250
49397: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49398: LD_ADDR_VAR 0 8
49402: PUSH
49403: LD_VAR 0 2
49407: PPUSH
49408: CALL_OW 251
49412: ST_TO_ADDR
// if not x or not y then
49413: LD_VAR 0 7
49417: NOT
49418: IFTRUE 49427
49420: PUSH
49421: LD_VAR 0 8
49425: NOT
49426: OR
49427: IFFALSE 49431
// exit ;
49429: GO 49838
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49431: LD_ADDR_VAR 0 6
49435: PUSH
49436: LD_VAR 0 7
49440: PPUSH
49441: LD_INT 0
49443: PPUSH
49444: LD_INT 4
49446: PPUSH
49447: CALL_OW 272
49451: PUSH
49452: LD_VAR 0 8
49456: PPUSH
49457: LD_INT 0
49459: PPUSH
49460: LD_INT 4
49462: PPUSH
49463: CALL_OW 273
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_VAR 0 7
49476: PPUSH
49477: LD_INT 1
49479: PPUSH
49480: LD_INT 4
49482: PPUSH
49483: CALL_OW 272
49487: PUSH
49488: LD_VAR 0 8
49492: PPUSH
49493: LD_INT 1
49495: PPUSH
49496: LD_INT 4
49498: PPUSH
49499: CALL_OW 273
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_VAR 0 7
49512: PPUSH
49513: LD_INT 2
49515: PPUSH
49516: LD_INT 4
49518: PPUSH
49519: CALL_OW 272
49523: PUSH
49524: LD_VAR 0 8
49528: PPUSH
49529: LD_INT 2
49531: PPUSH
49532: LD_INT 4
49534: PPUSH
49535: CALL_OW 273
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_VAR 0 7
49548: PPUSH
49549: LD_INT 3
49551: PPUSH
49552: LD_INT 4
49554: PPUSH
49555: CALL_OW 272
49559: PUSH
49560: LD_VAR 0 8
49564: PPUSH
49565: LD_INT 3
49567: PPUSH
49568: LD_INT 4
49570: PPUSH
49571: CALL_OW 273
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_VAR 0 7
49584: PPUSH
49585: LD_INT 4
49587: PPUSH
49588: LD_INT 4
49590: PPUSH
49591: CALL_OW 272
49595: PUSH
49596: LD_VAR 0 8
49600: PPUSH
49601: LD_INT 4
49603: PPUSH
49604: LD_INT 4
49606: PPUSH
49607: CALL_OW 273
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_VAR 0 7
49620: PPUSH
49621: LD_INT 5
49623: PPUSH
49624: LD_INT 4
49626: PPUSH
49627: CALL_OW 272
49631: PUSH
49632: LD_VAR 0 8
49636: PPUSH
49637: LD_INT 5
49639: PPUSH
49640: LD_INT 4
49642: PPUSH
49643: CALL_OW 273
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: ST_TO_ADDR
// for i = tmp downto 1 do
49660: LD_ADDR_VAR 0 4
49664: PUSH
49665: DOUBLE
49666: LD_VAR 0 6
49670: INC
49671: ST_TO_ADDR
49672: LD_INT 1
49674: PUSH
49675: FOR_DOWNTO
49676: IFFALSE 49779
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49678: LD_VAR 0 6
49682: PUSH
49683: LD_VAR 0 4
49687: ARRAY
49688: PUSH
49689: LD_INT 1
49691: ARRAY
49692: PPUSH
49693: LD_VAR 0 6
49697: PUSH
49698: LD_VAR 0 4
49702: ARRAY
49703: PUSH
49704: LD_INT 2
49706: ARRAY
49707: PPUSH
49708: CALL_OW 488
49712: NOT
49713: IFTRUE 49755
49715: PUSH
49716: LD_VAR 0 6
49720: PUSH
49721: LD_VAR 0 4
49725: ARRAY
49726: PUSH
49727: LD_INT 1
49729: ARRAY
49730: PPUSH
49731: LD_VAR 0 6
49735: PUSH
49736: LD_VAR 0 4
49740: ARRAY
49741: PUSH
49742: LD_INT 2
49744: ARRAY
49745: PPUSH
49746: CALL_OW 428
49750: PUSH
49751: LD_INT 0
49753: NONEQUAL
49754: OR
49755: IFFALSE 49777
// tmp := Delete ( tmp , i ) ;
49757: LD_ADDR_VAR 0 6
49761: PUSH
49762: LD_VAR 0 6
49766: PPUSH
49767: LD_VAR 0 4
49771: PPUSH
49772: CALL_OW 3
49776: ST_TO_ADDR
49777: GO 49675
49779: POP
49780: POP
// j := GetClosestHex ( unit , tmp ) ;
49781: LD_ADDR_VAR 0 5
49785: PUSH
49786: LD_VAR 0 1
49790: PPUSH
49791: LD_VAR 0 6
49795: PPUSH
49796: CALL 49073 0 2
49800: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49801: LD_VAR 0 1
49805: PPUSH
49806: LD_VAR 0 5
49810: PUSH
49811: LD_INT 1
49813: ARRAY
49814: PPUSH
49815: LD_VAR 0 5
49819: PUSH
49820: LD_INT 2
49822: ARRAY
49823: PPUSH
49824: CALL_OW 111
// result := j ;
49828: LD_ADDR_VAR 0 3
49832: PUSH
49833: LD_VAR 0 5
49837: ST_TO_ADDR
// end ;
49838: LD_VAR 0 3
49842: RET
// export function PrepareApemanSoldier ( ) ; begin
49843: LD_INT 0
49845: PPUSH
// uc_nation := 0 ;
49846: LD_ADDR_OWVAR 21
49850: PUSH
49851: LD_INT 0
49853: ST_TO_ADDR
// hc_sex := sex_male ;
49854: LD_ADDR_OWVAR 27
49858: PUSH
49859: LD_INT 1
49861: ST_TO_ADDR
// hc_name :=  ;
49862: LD_ADDR_OWVAR 26
49866: PUSH
49867: LD_STRING 
49869: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
49870: LD_ADDR_OWVAR 28
49874: PUSH
49875: LD_INT 15
49877: ST_TO_ADDR
// hc_gallery :=  ;
49878: LD_ADDR_OWVAR 33
49882: PUSH
49883: LD_STRING 
49885: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49886: LD_ADDR_OWVAR 31
49890: PUSH
49891: LD_INT 0
49893: PPUSH
49894: LD_INT 3
49896: PPUSH
49897: CALL_OW 12
49901: PUSH
49902: LD_INT 0
49904: PPUSH
49905: LD_INT 3
49907: PPUSH
49908: CALL_OW 12
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
49925: LD_ADDR_OWVAR 29
49929: PUSH
49930: LD_INT 10
49932: PUSH
49933: LD_INT 12
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// end ;
49940: LD_VAR 0 1
49944: RET
// export function PrepareApemanEngineer ( ) ; begin
49945: LD_INT 0
49947: PPUSH
// uc_nation := 0 ;
49948: LD_ADDR_OWVAR 21
49952: PUSH
49953: LD_INT 0
49955: ST_TO_ADDR
// hc_sex := sex_male ;
49956: LD_ADDR_OWVAR 27
49960: PUSH
49961: LD_INT 1
49963: ST_TO_ADDR
// hc_name :=  ;
49964: LD_ADDR_OWVAR 26
49968: PUSH
49969: LD_STRING 
49971: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49972: LD_ADDR_OWVAR 28
49976: PUSH
49977: LD_INT 16
49979: ST_TO_ADDR
// hc_gallery :=  ;
49980: LD_ADDR_OWVAR 33
49984: PUSH
49985: LD_STRING 
49987: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49988: LD_ADDR_OWVAR 31
49992: PUSH
49993: LD_INT 0
49995: PPUSH
49996: LD_INT 3
49998: PPUSH
49999: CALL_OW 12
50003: PUSH
50004: LD_INT 0
50006: PPUSH
50007: LD_INT 3
50009: PPUSH
50010: CALL_OW 12
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50027: LD_ADDR_OWVAR 29
50031: PUSH
50032: LD_INT 10
50034: PUSH
50035: LD_INT 12
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// end ;
50042: LD_VAR 0 1
50046: RET
// export function PrepareApeman ( agressivity ) ; begin
50047: LD_INT 0
50049: PPUSH
// uc_side := 0 ;
50050: LD_ADDR_OWVAR 20
50054: PUSH
50055: LD_INT 0
50057: ST_TO_ADDR
// uc_nation := 0 ;
50058: LD_ADDR_OWVAR 21
50062: PUSH
50063: LD_INT 0
50065: ST_TO_ADDR
// hc_sex := sex_male ;
50066: LD_ADDR_OWVAR 27
50070: PUSH
50071: LD_INT 1
50073: ST_TO_ADDR
// hc_class := class_apeman ;
50074: LD_ADDR_OWVAR 28
50078: PUSH
50079: LD_INT 12
50081: ST_TO_ADDR
// hc_gallery :=  ;
50082: LD_ADDR_OWVAR 33
50086: PUSH
50087: LD_STRING 
50089: ST_TO_ADDR
// hc_name :=  ;
50090: LD_ADDR_OWVAR 26
50094: PUSH
50095: LD_STRING 
50097: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
50098: LD_ADDR_OWVAR 29
50102: PUSH
50103: LD_INT 10
50105: PUSH
50106: LD_INT 12
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: ST_TO_ADDR
// if agressivity = 0 then
50113: LD_VAR 0 1
50117: PUSH
50118: LD_INT 0
50120: EQUAL
50121: IFFALSE 50133
// hc_agressivity := 0 else
50123: LD_ADDR_OWVAR 35
50127: PUSH
50128: LD_INT 0
50130: ST_TO_ADDR
50131: GO 50154
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50133: LD_ADDR_OWVAR 35
50137: PUSH
50138: LD_VAR 0 1
50142: NEG
50143: PPUSH
50144: LD_VAR 0 1
50148: PPUSH
50149: CALL_OW 12
50153: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50154: LD_ADDR_OWVAR 31
50158: PUSH
50159: LD_INT 0
50161: PPUSH
50162: LD_INT 3
50164: PPUSH
50165: CALL_OW 12
50169: PUSH
50170: LD_INT 0
50172: PPUSH
50173: LD_INT 3
50175: PPUSH
50176: CALL_OW 12
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: ST_TO_ADDR
// end ;
50193: LD_VAR 0 2
50197: RET
// export function PrepareTiger ( agressivity ) ; begin
50198: LD_INT 0
50200: PPUSH
// uc_side := 0 ;
50201: LD_ADDR_OWVAR 20
50205: PUSH
50206: LD_INT 0
50208: ST_TO_ADDR
// uc_nation := 0 ;
50209: LD_ADDR_OWVAR 21
50213: PUSH
50214: LD_INT 0
50216: ST_TO_ADDR
// InitHc ;
50217: CALL_OW 19
// hc_class := class_tiger ;
50221: LD_ADDR_OWVAR 28
50225: PUSH
50226: LD_INT 14
50228: ST_TO_ADDR
// hc_gallery :=  ;
50229: LD_ADDR_OWVAR 33
50233: PUSH
50234: LD_STRING 
50236: ST_TO_ADDR
// hc_name :=  ;
50237: LD_ADDR_OWVAR 26
50241: PUSH
50242: LD_STRING 
50244: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
50245: LD_ADDR_OWVAR 35
50249: PUSH
50250: LD_VAR 0 1
50254: NEG
50255: PPUSH
50256: LD_VAR 0 1
50260: PPUSH
50261: CALL_OW 12
50265: ST_TO_ADDR
// end ;
50266: LD_VAR 0 2
50270: RET
// export function PrepareEnchidna ( ) ; begin
50271: LD_INT 0
50273: PPUSH
// uc_side := 0 ;
50274: LD_ADDR_OWVAR 20
50278: PUSH
50279: LD_INT 0
50281: ST_TO_ADDR
// uc_nation := 0 ;
50282: LD_ADDR_OWVAR 21
50286: PUSH
50287: LD_INT 0
50289: ST_TO_ADDR
// InitHc ;
50290: CALL_OW 19
// hc_class := class_baggie ;
50294: LD_ADDR_OWVAR 28
50298: PUSH
50299: LD_INT 13
50301: ST_TO_ADDR
// hc_gallery :=  ;
50302: LD_ADDR_OWVAR 33
50306: PUSH
50307: LD_STRING 
50309: ST_TO_ADDR
// hc_name :=  ;
50310: LD_ADDR_OWVAR 26
50314: PUSH
50315: LD_STRING 
50317: ST_TO_ADDR
// end ;
50318: LD_VAR 0 1
50322: RET
// export function PrepareFrog ( ) ; begin
50323: LD_INT 0
50325: PPUSH
// uc_side := 0 ;
50326: LD_ADDR_OWVAR 20
50330: PUSH
50331: LD_INT 0
50333: ST_TO_ADDR
// uc_nation := 0 ;
50334: LD_ADDR_OWVAR 21
50338: PUSH
50339: LD_INT 0
50341: ST_TO_ADDR
// InitHc ;
50342: CALL_OW 19
// hc_class := class_frog ;
50346: LD_ADDR_OWVAR 28
50350: PUSH
50351: LD_INT 19
50353: ST_TO_ADDR
// hc_gallery :=  ;
50354: LD_ADDR_OWVAR 33
50358: PUSH
50359: LD_STRING 
50361: ST_TO_ADDR
// hc_name :=  ;
50362: LD_ADDR_OWVAR 26
50366: PUSH
50367: LD_STRING 
50369: ST_TO_ADDR
// end ;
50370: LD_VAR 0 1
50374: RET
// export function PrepareFish ( ) ; begin
50375: LD_INT 0
50377: PPUSH
// uc_side := 0 ;
50378: LD_ADDR_OWVAR 20
50382: PUSH
50383: LD_INT 0
50385: ST_TO_ADDR
// uc_nation := 0 ;
50386: LD_ADDR_OWVAR 21
50390: PUSH
50391: LD_INT 0
50393: ST_TO_ADDR
// InitHc ;
50394: CALL_OW 19
// hc_class := class_fish ;
50398: LD_ADDR_OWVAR 28
50402: PUSH
50403: LD_INT 20
50405: ST_TO_ADDR
// hc_gallery :=  ;
50406: LD_ADDR_OWVAR 33
50410: PUSH
50411: LD_STRING 
50413: ST_TO_ADDR
// hc_name :=  ;
50414: LD_ADDR_OWVAR 26
50418: PUSH
50419: LD_STRING 
50421: ST_TO_ADDR
// end ;
50422: LD_VAR 0 1
50426: RET
// export function PrepareBird ( ) ; begin
50427: LD_INT 0
50429: PPUSH
// uc_side := 0 ;
50430: LD_ADDR_OWVAR 20
50434: PUSH
50435: LD_INT 0
50437: ST_TO_ADDR
// uc_nation := 0 ;
50438: LD_ADDR_OWVAR 21
50442: PUSH
50443: LD_INT 0
50445: ST_TO_ADDR
// InitHc ;
50446: CALL_OW 19
// hc_class := class_phororhacos ;
50450: LD_ADDR_OWVAR 28
50454: PUSH
50455: LD_INT 18
50457: ST_TO_ADDR
// hc_gallery :=  ;
50458: LD_ADDR_OWVAR 33
50462: PUSH
50463: LD_STRING 
50465: ST_TO_ADDR
// hc_name :=  ;
50466: LD_ADDR_OWVAR 26
50470: PUSH
50471: LD_STRING 
50473: ST_TO_ADDR
// end ;
50474: LD_VAR 0 1
50478: RET
// export function PrepareHorse ( ) ; begin
50479: LD_INT 0
50481: PPUSH
// uc_side := 0 ;
50482: LD_ADDR_OWVAR 20
50486: PUSH
50487: LD_INT 0
50489: ST_TO_ADDR
// uc_nation := 0 ;
50490: LD_ADDR_OWVAR 21
50494: PUSH
50495: LD_INT 0
50497: ST_TO_ADDR
// InitHc ;
50498: CALL_OW 19
// hc_class := class_horse ;
50502: LD_ADDR_OWVAR 28
50506: PUSH
50507: LD_INT 21
50509: ST_TO_ADDR
// hc_gallery :=  ;
50510: LD_ADDR_OWVAR 33
50514: PUSH
50515: LD_STRING 
50517: ST_TO_ADDR
// hc_name :=  ;
50518: LD_ADDR_OWVAR 26
50522: PUSH
50523: LD_STRING 
50525: ST_TO_ADDR
// end ;
50526: LD_VAR 0 1
50530: RET
// export function PrepareMastodont ( ) ; begin
50531: LD_INT 0
50533: PPUSH
// uc_side := 0 ;
50534: LD_ADDR_OWVAR 20
50538: PUSH
50539: LD_INT 0
50541: ST_TO_ADDR
// uc_nation := 0 ;
50542: LD_ADDR_OWVAR 21
50546: PUSH
50547: LD_INT 0
50549: ST_TO_ADDR
// vc_chassis := class_mastodont ;
50550: LD_ADDR_OWVAR 37
50554: PUSH
50555: LD_INT 31
50557: ST_TO_ADDR
// vc_control := control_rider ;
50558: LD_ADDR_OWVAR 38
50562: PUSH
50563: LD_INT 4
50565: ST_TO_ADDR
// end ;
50566: LD_VAR 0 1
50570: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50571: LD_INT 0
50573: PPUSH
50574: PPUSH
50575: PPUSH
// uc_side = 0 ;
50576: LD_ADDR_OWVAR 20
50580: PUSH
50581: LD_INT 0
50583: ST_TO_ADDR
// uc_nation = 0 ;
50584: LD_ADDR_OWVAR 21
50588: PUSH
50589: LD_INT 0
50591: ST_TO_ADDR
// InitHc_All ( ) ;
50592: CALL_OW 584
// InitVc ;
50596: CALL_OW 20
// if mastodonts then
50600: LD_VAR 0 6
50604: IFFALSE 50671
// for i = 1 to mastodonts do
50606: LD_ADDR_VAR 0 11
50610: PUSH
50611: DOUBLE
50612: LD_INT 1
50614: DEC
50615: ST_TO_ADDR
50616: LD_VAR 0 6
50620: PUSH
50621: FOR_TO
50622: IFFALSE 50669
// begin vc_chassis := 31 ;
50624: LD_ADDR_OWVAR 37
50628: PUSH
50629: LD_INT 31
50631: ST_TO_ADDR
// vc_control := control_rider ;
50632: LD_ADDR_OWVAR 38
50636: PUSH
50637: LD_INT 4
50639: ST_TO_ADDR
// animal := CreateVehicle ;
50640: LD_ADDR_VAR 0 12
50644: PUSH
50645: CALL_OW 45
50649: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50650: LD_VAR 0 12
50654: PPUSH
50655: LD_VAR 0 8
50659: PPUSH
50660: LD_INT 0
50662: PPUSH
50663: CALL 52813 0 3
// end ;
50667: GO 50621
50669: POP
50670: POP
// if horses then
50671: LD_VAR 0 5
50675: IFFALSE 50742
// for i = 1 to horses do
50677: LD_ADDR_VAR 0 11
50681: PUSH
50682: DOUBLE
50683: LD_INT 1
50685: DEC
50686: ST_TO_ADDR
50687: LD_VAR 0 5
50691: PUSH
50692: FOR_TO
50693: IFFALSE 50740
// begin hc_class := 21 ;
50695: LD_ADDR_OWVAR 28
50699: PUSH
50700: LD_INT 21
50702: ST_TO_ADDR
// hc_gallery :=  ;
50703: LD_ADDR_OWVAR 33
50707: PUSH
50708: LD_STRING 
50710: ST_TO_ADDR
// animal := CreateHuman ;
50711: LD_ADDR_VAR 0 12
50715: PUSH
50716: CALL_OW 44
50720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50721: LD_VAR 0 12
50725: PPUSH
50726: LD_VAR 0 8
50730: PPUSH
50731: LD_INT 0
50733: PPUSH
50734: CALL 52813 0 3
// end ;
50738: GO 50692
50740: POP
50741: POP
// if birds then
50742: LD_VAR 0 1
50746: IFFALSE 50813
// for i = 1 to birds do
50748: LD_ADDR_VAR 0 11
50752: PUSH
50753: DOUBLE
50754: LD_INT 1
50756: DEC
50757: ST_TO_ADDR
50758: LD_VAR 0 1
50762: PUSH
50763: FOR_TO
50764: IFFALSE 50811
// begin hc_class := 18 ;
50766: LD_ADDR_OWVAR 28
50770: PUSH
50771: LD_INT 18
50773: ST_TO_ADDR
// hc_gallery =  ;
50774: LD_ADDR_OWVAR 33
50778: PUSH
50779: LD_STRING 
50781: ST_TO_ADDR
// animal := CreateHuman ;
50782: LD_ADDR_VAR 0 12
50786: PUSH
50787: CALL_OW 44
50791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50792: LD_VAR 0 12
50796: PPUSH
50797: LD_VAR 0 8
50801: PPUSH
50802: LD_INT 0
50804: PPUSH
50805: CALL 52813 0 3
// end ;
50809: GO 50763
50811: POP
50812: POP
// if tigers then
50813: LD_VAR 0 2
50817: IFFALSE 50901
// for i = 1 to tigers do
50819: LD_ADDR_VAR 0 11
50823: PUSH
50824: DOUBLE
50825: LD_INT 1
50827: DEC
50828: ST_TO_ADDR
50829: LD_VAR 0 2
50833: PUSH
50834: FOR_TO
50835: IFFALSE 50899
// begin hc_class = class_tiger ;
50837: LD_ADDR_OWVAR 28
50841: PUSH
50842: LD_INT 14
50844: ST_TO_ADDR
// hc_gallery =  ;
50845: LD_ADDR_OWVAR 33
50849: PUSH
50850: LD_STRING 
50852: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50853: LD_ADDR_OWVAR 35
50857: PUSH
50858: LD_INT 7
50860: NEG
50861: PPUSH
50862: LD_INT 7
50864: PPUSH
50865: CALL_OW 12
50869: ST_TO_ADDR
// animal := CreateHuman ;
50870: LD_ADDR_VAR 0 12
50874: PUSH
50875: CALL_OW 44
50879: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50880: LD_VAR 0 12
50884: PPUSH
50885: LD_VAR 0 8
50889: PPUSH
50890: LD_INT 0
50892: PPUSH
50893: CALL 52813 0 3
// end ;
50897: GO 50834
50899: POP
50900: POP
// if apemans then
50901: LD_VAR 0 3
50905: IFFALSE 51028
// for i = 1 to apemans do
50907: LD_ADDR_VAR 0 11
50911: PUSH
50912: DOUBLE
50913: LD_INT 1
50915: DEC
50916: ST_TO_ADDR
50917: LD_VAR 0 3
50921: PUSH
50922: FOR_TO
50923: IFFALSE 51026
// begin hc_class = class_apeman ;
50925: LD_ADDR_OWVAR 28
50929: PUSH
50930: LD_INT 12
50932: ST_TO_ADDR
// hc_gallery =  ;
50933: LD_ADDR_OWVAR 33
50937: PUSH
50938: LD_STRING 
50940: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50941: LD_ADDR_OWVAR 35
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PPUSH
50950: LD_INT 2
50952: PPUSH
50953: CALL_OW 12
50957: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50958: LD_ADDR_OWVAR 31
50962: PUSH
50963: LD_INT 1
50965: PPUSH
50966: LD_INT 3
50968: PPUSH
50969: CALL_OW 12
50973: PUSH
50974: LD_INT 1
50976: PPUSH
50977: LD_INT 3
50979: PPUSH
50980: CALL_OW 12
50984: PUSH
50985: LD_INT 0
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: ST_TO_ADDR
// animal := CreateHuman ;
50997: LD_ADDR_VAR 0 12
51001: PUSH
51002: CALL_OW 44
51006: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51007: LD_VAR 0 12
51011: PPUSH
51012: LD_VAR 0 8
51016: PPUSH
51017: LD_INT 0
51019: PPUSH
51020: CALL 52813 0 3
// end ;
51024: GO 50922
51026: POP
51027: POP
// if enchidnas then
51028: LD_VAR 0 4
51032: IFFALSE 51099
// for i = 1 to enchidnas do
51034: LD_ADDR_VAR 0 11
51038: PUSH
51039: DOUBLE
51040: LD_INT 1
51042: DEC
51043: ST_TO_ADDR
51044: LD_VAR 0 4
51048: PUSH
51049: FOR_TO
51050: IFFALSE 51097
// begin hc_class = 13 ;
51052: LD_ADDR_OWVAR 28
51056: PUSH
51057: LD_INT 13
51059: ST_TO_ADDR
// hc_gallery =  ;
51060: LD_ADDR_OWVAR 33
51064: PUSH
51065: LD_STRING 
51067: ST_TO_ADDR
// animal := CreateHuman ;
51068: LD_ADDR_VAR 0 12
51072: PUSH
51073: CALL_OW 44
51077: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51078: LD_VAR 0 12
51082: PPUSH
51083: LD_VAR 0 8
51087: PPUSH
51088: LD_INT 0
51090: PPUSH
51091: CALL 52813 0 3
// end ;
51095: GO 51049
51097: POP
51098: POP
// if fishes then
51099: LD_VAR 0 7
51103: IFFALSE 51170
// for i = 1 to fishes do
51105: LD_ADDR_VAR 0 11
51109: PUSH
51110: DOUBLE
51111: LD_INT 1
51113: DEC
51114: ST_TO_ADDR
51115: LD_VAR 0 7
51119: PUSH
51120: FOR_TO
51121: IFFALSE 51168
// begin hc_class = 20 ;
51123: LD_ADDR_OWVAR 28
51127: PUSH
51128: LD_INT 20
51130: ST_TO_ADDR
// hc_gallery =  ;
51131: LD_ADDR_OWVAR 33
51135: PUSH
51136: LD_STRING 
51138: ST_TO_ADDR
// animal := CreateHuman ;
51139: LD_ADDR_VAR 0 12
51143: PUSH
51144: CALL_OW 44
51148: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51149: LD_VAR 0 12
51153: PPUSH
51154: LD_VAR 0 9
51158: PPUSH
51159: LD_INT 0
51161: PPUSH
51162: CALL 52813 0 3
// end ;
51166: GO 51120
51168: POP
51169: POP
// end ;
51170: LD_VAR 0 10
51174: RET
// export function WantHeal ( sci , unit ) ; begin
51175: LD_INT 0
51177: PPUSH
// if GetTaskList ( sci ) > 0 then
51178: LD_VAR 0 1
51182: PPUSH
51183: CALL_OW 437
51187: PUSH
51188: LD_INT 0
51190: GREATER
51191: IFFALSE 51263
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51193: LD_VAR 0 1
51197: PPUSH
51198: CALL_OW 437
51202: PUSH
51203: LD_INT 1
51205: ARRAY
51206: PUSH
51207: LD_INT 1
51209: ARRAY
51210: PUSH
51211: LD_STRING l
51213: EQUAL
51214: IFFALSE 51241
51216: PUSH
51217: LD_VAR 0 1
51221: PPUSH
51222: CALL_OW 437
51226: PUSH
51227: LD_INT 1
51229: ARRAY
51230: PUSH
51231: LD_INT 4
51233: ARRAY
51234: PUSH
51235: LD_VAR 0 2
51239: EQUAL
51240: AND
51241: IFFALSE 51253
// result := true else
51243: LD_ADDR_VAR 0 3
51247: PUSH
51248: LD_INT 1
51250: ST_TO_ADDR
51251: GO 51261
// result := false ;
51253: LD_ADDR_VAR 0 3
51257: PUSH
51258: LD_INT 0
51260: ST_TO_ADDR
// end else
51261: GO 51271
// result := false ;
51263: LD_ADDR_VAR 0 3
51267: PUSH
51268: LD_INT 0
51270: ST_TO_ADDR
// end ;
51271: LD_VAR 0 3
51275: RET
// export function HealTarget ( sci ) ; begin
51276: LD_INT 0
51278: PPUSH
// if not sci then
51279: LD_VAR 0 1
51283: NOT
51284: IFFALSE 51288
// exit ;
51286: GO 51353
// result := 0 ;
51288: LD_ADDR_VAR 0 2
51292: PUSH
51293: LD_INT 0
51295: ST_TO_ADDR
// if GetTaskList ( sci ) then
51296: LD_VAR 0 1
51300: PPUSH
51301: CALL_OW 437
51305: IFFALSE 51353
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51307: LD_VAR 0 1
51311: PPUSH
51312: CALL_OW 437
51316: PUSH
51317: LD_INT 1
51319: ARRAY
51320: PUSH
51321: LD_INT 1
51323: ARRAY
51324: PUSH
51325: LD_STRING l
51327: EQUAL
51328: IFFALSE 51353
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51330: LD_ADDR_VAR 0 2
51334: PUSH
51335: LD_VAR 0 1
51339: PPUSH
51340: CALL_OW 437
51344: PUSH
51345: LD_INT 1
51347: ARRAY
51348: PUSH
51349: LD_INT 4
51351: ARRAY
51352: ST_TO_ADDR
// end ;
51353: LD_VAR 0 2
51357: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51358: LD_INT 0
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
// if not base_units then
51364: LD_VAR 0 1
51368: NOT
51369: IFFALSE 51373
// exit ;
51371: GO 51460
// result := false ;
51373: LD_ADDR_VAR 0 2
51377: PUSH
51378: LD_INT 0
51380: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51381: LD_ADDR_VAR 0 5
51385: PUSH
51386: LD_VAR 0 1
51390: PPUSH
51391: LD_INT 21
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PPUSH
51401: CALL_OW 72
51405: ST_TO_ADDR
// if not tmp then
51406: LD_VAR 0 5
51410: NOT
51411: IFFALSE 51415
// exit ;
51413: GO 51460
// for i in tmp do
51415: LD_ADDR_VAR 0 3
51419: PUSH
51420: LD_VAR 0 5
51424: PUSH
51425: FOR_IN
51426: IFFALSE 51458
// begin result := EnemyInRange ( i , 22 ) ;
51428: LD_ADDR_VAR 0 2
51432: PUSH
51433: LD_VAR 0 3
51437: PPUSH
51438: LD_INT 22
51440: PPUSH
51441: CALL 48875 0 2
51445: ST_TO_ADDR
// if result then
51446: LD_VAR 0 2
51450: IFFALSE 51456
// exit ;
51452: POP
51453: POP
51454: GO 51460
// end ;
51456: GO 51425
51458: POP
51459: POP
// end ;
51460: LD_VAR 0 2
51464: RET
// export function FilterByTag ( units , tag ) ; begin
51465: LD_INT 0
51467: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51468: LD_ADDR_VAR 0 3
51472: PUSH
51473: LD_VAR 0 1
51477: PPUSH
51478: LD_INT 120
51480: PUSH
51481: LD_VAR 0 2
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PPUSH
51490: CALL_OW 72
51494: ST_TO_ADDR
// end ;
51495: LD_VAR 0 3
51499: RET
// export function IsDriver ( un ) ; begin
51500: LD_INT 0
51502: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51503: LD_ADDR_VAR 0 2
51507: PUSH
51508: LD_VAR 0 1
51512: PUSH
51513: LD_INT 55
51515: PUSH
51516: EMPTY
51517: LIST
51518: PPUSH
51519: CALL_OW 69
51523: IN
51524: ST_TO_ADDR
// end ;
51525: LD_VAR 0 2
51529: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51530: LD_INT 0
51532: PPUSH
51533: PPUSH
// list := [ ] ;
51534: LD_ADDR_VAR 0 5
51538: PUSH
51539: EMPTY
51540: ST_TO_ADDR
// case d of 0 :
51541: LD_VAR 0 3
51545: PUSH
51546: LD_INT 0
51548: DOUBLE
51549: EQUAL
51550: IFTRUE 51554
51552: GO 51687
51554: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51555: LD_ADDR_VAR 0 5
51559: PUSH
51560: LD_VAR 0 1
51564: PUSH
51565: LD_INT 4
51567: MINUS
51568: PUSH
51569: LD_VAR 0 2
51573: PUSH
51574: LD_INT 4
51576: MINUS
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: PUSH
51586: LD_VAR 0 1
51590: PUSH
51591: LD_INT 3
51593: MINUS
51594: PUSH
51595: LD_VAR 0 2
51599: PUSH
51600: LD_INT 1
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: LIST
51607: PUSH
51608: LD_VAR 0 1
51612: PUSH
51613: LD_INT 4
51615: PLUS
51616: PUSH
51617: LD_VAR 0 2
51621: PUSH
51622: LD_INT 4
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: LD_VAR 0 1
51634: PUSH
51635: LD_INT 3
51637: PLUS
51638: PUSH
51639: LD_VAR 0 2
51643: PUSH
51644: LD_INT 3
51646: PLUS
51647: PUSH
51648: LD_INT 5
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: PUSH
51656: LD_VAR 0 1
51660: PUSH
51661: LD_VAR 0 2
51665: PUSH
51666: LD_INT 4
51668: PLUS
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: ST_TO_ADDR
// end ; 1 :
51685: GO 52385
51687: LD_INT 1
51689: DOUBLE
51690: EQUAL
51691: IFTRUE 51695
51693: GO 51828
51695: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51696: LD_ADDR_VAR 0 5
51700: PUSH
51701: LD_VAR 0 1
51705: PUSH
51706: LD_VAR 0 2
51710: PUSH
51711: LD_INT 4
51713: MINUS
51714: PUSH
51715: LD_INT 3
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: LIST
51722: PUSH
51723: LD_VAR 0 1
51727: PUSH
51728: LD_INT 3
51730: MINUS
51731: PUSH
51732: LD_VAR 0 2
51736: PUSH
51737: LD_INT 3
51739: MINUS
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: PUSH
51749: LD_VAR 0 1
51753: PUSH
51754: LD_INT 4
51756: MINUS
51757: PUSH
51758: LD_VAR 0 2
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: PUSH
51771: LD_VAR 0 1
51775: PUSH
51776: LD_VAR 0 2
51780: PUSH
51781: LD_INT 3
51783: PLUS
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: LIST
51792: PUSH
51793: LD_VAR 0 1
51797: PUSH
51798: LD_INT 4
51800: PLUS
51801: PUSH
51802: LD_VAR 0 2
51806: PUSH
51807: LD_INT 4
51809: PLUS
51810: PUSH
51811: LD_INT 5
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// end ; 2 :
51826: GO 52385
51828: LD_INT 2
51830: DOUBLE
51831: EQUAL
51832: IFTRUE 51836
51834: GO 51965
51836: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51837: LD_ADDR_VAR 0 5
51841: PUSH
51842: LD_VAR 0 1
51846: PUSH
51847: LD_VAR 0 2
51851: PUSH
51852: LD_INT 3
51854: MINUS
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: LIST
51863: PUSH
51864: LD_VAR 0 1
51868: PUSH
51869: LD_INT 4
51871: PLUS
51872: PUSH
51873: LD_VAR 0 2
51877: PUSH
51878: LD_INT 4
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: LIST
51885: PUSH
51886: LD_VAR 0 1
51890: PUSH
51891: LD_VAR 0 2
51895: PUSH
51896: LD_INT 4
51898: PLUS
51899: PUSH
51900: LD_INT 0
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: LD_VAR 0 1
51912: PUSH
51913: LD_INT 3
51915: MINUS
51916: PUSH
51917: LD_VAR 0 2
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: LIST
51929: PUSH
51930: LD_VAR 0 1
51934: PUSH
51935: LD_INT 4
51937: MINUS
51938: PUSH
51939: LD_VAR 0 2
51943: PUSH
51944: LD_INT 4
51946: MINUS
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: LIST
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: ST_TO_ADDR
// end ; 3 :
51963: GO 52385
51965: LD_INT 3
51967: DOUBLE
51968: EQUAL
51969: IFTRUE 51973
51971: GO 52106
51973: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51974: LD_ADDR_VAR 0 5
51978: PUSH
51979: LD_VAR 0 1
51983: PUSH
51984: LD_INT 3
51986: PLUS
51987: PUSH
51988: LD_VAR 0 2
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: LIST
52000: PUSH
52001: LD_VAR 0 1
52005: PUSH
52006: LD_INT 4
52008: PLUS
52009: PUSH
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 4
52017: PLUS
52018: PUSH
52019: LD_INT 5
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: PUSH
52027: LD_VAR 0 1
52031: PUSH
52032: LD_INT 4
52034: MINUS
52035: PUSH
52036: LD_VAR 0 2
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: PUSH
52049: LD_VAR 0 1
52053: PUSH
52054: LD_VAR 0 2
52058: PUSH
52059: LD_INT 4
52061: MINUS
52062: PUSH
52063: LD_INT 3
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: LIST
52070: PUSH
52071: LD_VAR 0 1
52075: PUSH
52076: LD_INT 3
52078: MINUS
52079: PUSH
52080: LD_VAR 0 2
52084: PUSH
52085: LD_INT 3
52087: MINUS
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// end ; 4 :
52104: GO 52385
52106: LD_INT 4
52108: DOUBLE
52109: EQUAL
52110: IFTRUE 52114
52112: GO 52247
52114: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52115: LD_ADDR_VAR 0 5
52119: PUSH
52120: LD_VAR 0 1
52124: PUSH
52125: LD_VAR 0 2
52129: PUSH
52130: LD_INT 4
52132: PLUS
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: PUSH
52142: LD_VAR 0 1
52146: PUSH
52147: LD_INT 3
52149: PLUS
52150: PUSH
52151: LD_VAR 0 2
52155: PUSH
52156: LD_INT 3
52158: PLUS
52159: PUSH
52160: LD_INT 5
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: LIST
52167: PUSH
52168: LD_VAR 0 1
52172: PUSH
52173: LD_INT 4
52175: PLUS
52176: PUSH
52177: LD_VAR 0 2
52181: PUSH
52182: LD_INT 4
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: LD_VAR 0 1
52194: PUSH
52195: LD_VAR 0 2
52199: PUSH
52200: LD_INT 3
52202: MINUS
52203: PUSH
52204: LD_INT 3
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: LIST
52211: PUSH
52212: LD_VAR 0 1
52216: PUSH
52217: LD_INT 4
52219: MINUS
52220: PUSH
52221: LD_VAR 0 2
52225: PUSH
52226: LD_INT 4
52228: MINUS
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: LIST
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// end ; 5 :
52245: GO 52385
52247: LD_INT 5
52249: DOUBLE
52250: EQUAL
52251: IFTRUE 52255
52253: GO 52384
52255: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
52256: LD_ADDR_VAR 0 5
52260: PUSH
52261: LD_VAR 0 1
52265: PUSH
52266: LD_INT 4
52268: MINUS
52269: PUSH
52270: LD_VAR 0 2
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: PUSH
52283: LD_VAR 0 1
52287: PUSH
52288: LD_VAR 0 2
52292: PUSH
52293: LD_INT 4
52295: MINUS
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: PUSH
52305: LD_VAR 0 1
52309: PUSH
52310: LD_INT 4
52312: PLUS
52313: PUSH
52314: LD_VAR 0 2
52318: PUSH
52319: LD_INT 4
52321: PLUS
52322: PUSH
52323: LD_INT 5
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: PUSH
52331: LD_VAR 0 1
52335: PUSH
52336: LD_INT 3
52338: PLUS
52339: PUSH
52340: LD_VAR 0 2
52344: PUSH
52345: LD_INT 4
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: LIST
52352: PUSH
52353: LD_VAR 0 1
52357: PUSH
52358: LD_VAR 0 2
52362: PUSH
52363: LD_INT 3
52365: PLUS
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: ST_TO_ADDR
// end ; end ;
52382: GO 52385
52384: POP
// result := list ;
52385: LD_ADDR_VAR 0 4
52389: PUSH
52390: LD_VAR 0 5
52394: ST_TO_ADDR
// end ;
52395: LD_VAR 0 4
52399: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52400: LD_INT 0
52402: PPUSH
52403: PPUSH
52404: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52405: LD_VAR 0 1
52409: NOT
52410: IFTRUE 52438
52412: PUSH
52413: LD_VAR 0 2
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 3
52426: PUSH
52427: LD_INT 4
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: IN
52436: NOT
52437: OR
52438: IFFALSE 52442
// exit ;
52440: GO 52525
// tmp := [ ] ;
52442: LD_ADDR_VAR 0 5
52446: PUSH
52447: EMPTY
52448: ST_TO_ADDR
// for i in units do
52449: LD_ADDR_VAR 0 4
52453: PUSH
52454: LD_VAR 0 1
52458: PUSH
52459: FOR_IN
52460: IFFALSE 52494
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
52462: LD_ADDR_VAR 0 5
52466: PUSH
52467: LD_VAR 0 5
52471: PPUSH
52472: LD_VAR 0 4
52476: PPUSH
52477: LD_VAR 0 2
52481: PPUSH
52482: CALL_OW 259
52486: PPUSH
52487: CALL 53920 0 2
52491: ST_TO_ADDR
52492: GO 52459
52494: POP
52495: POP
// if not tmp then
52496: LD_VAR 0 5
52500: NOT
52501: IFFALSE 52505
// exit ;
52503: GO 52525
// result := SortListByListDesc ( units , tmp ) ;
52505: LD_ADDR_VAR 0 3
52509: PUSH
52510: LD_VAR 0 1
52514: PPUSH
52515: LD_VAR 0 5
52519: PPUSH
52520: CALL_OW 77
52524: ST_TO_ADDR
// end ;
52525: LD_VAR 0 3
52529: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52530: LD_INT 0
52532: PPUSH
52533: PPUSH
52534: PPUSH
// result := false ;
52535: LD_ADDR_VAR 0 3
52539: PUSH
52540: LD_INT 0
52542: ST_TO_ADDR
// if not building then
52543: LD_VAR 0 2
52547: NOT
52548: IFFALSE 52552
// exit ;
52550: GO 52696
// x := GetX ( building ) ;
52552: LD_ADDR_VAR 0 4
52556: PUSH
52557: LD_VAR 0 2
52561: PPUSH
52562: CALL_OW 250
52566: ST_TO_ADDR
// y := GetY ( building ) ;
52567: LD_ADDR_VAR 0 5
52571: PUSH
52572: LD_VAR 0 2
52576: PPUSH
52577: CALL_OW 251
52581: ST_TO_ADDR
// if not x or not y then
52582: LD_VAR 0 4
52586: NOT
52587: IFTRUE 52596
52589: PUSH
52590: LD_VAR 0 5
52594: NOT
52595: OR
52596: IFFALSE 52600
// exit ;
52598: GO 52696
// if GetTaskList ( unit ) then
52600: LD_VAR 0 1
52604: PPUSH
52605: CALL_OW 437
52609: IFFALSE 52696
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52611: LD_STRING e
52613: PUSH
52614: LD_VAR 0 1
52618: PPUSH
52619: CALL_OW 437
52623: PUSH
52624: LD_INT 1
52626: ARRAY
52627: PUSH
52628: LD_INT 1
52630: ARRAY
52631: EQUAL
52632: IFFALSE 52659
52634: PUSH
52635: LD_VAR 0 4
52639: PUSH
52640: LD_VAR 0 1
52644: PPUSH
52645: CALL_OW 437
52649: PUSH
52650: LD_INT 1
52652: ARRAY
52653: PUSH
52654: LD_INT 2
52656: ARRAY
52657: EQUAL
52658: AND
52659: IFFALSE 52686
52661: PUSH
52662: LD_VAR 0 5
52666: PUSH
52667: LD_VAR 0 1
52671: PPUSH
52672: CALL_OW 437
52676: PUSH
52677: LD_INT 1
52679: ARRAY
52680: PUSH
52681: LD_INT 3
52683: ARRAY
52684: EQUAL
52685: AND
52686: IFFALSE 52696
// result := true end ;
52688: LD_ADDR_VAR 0 3
52692: PUSH
52693: LD_INT 1
52695: ST_TO_ADDR
// end ;
52696: LD_VAR 0 3
52700: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52701: LD_INT 0
52703: PPUSH
// result := false ;
52704: LD_ADDR_VAR 0 4
52708: PUSH
52709: LD_INT 0
52711: ST_TO_ADDR
// if GetTaskList ( unit ) then
52712: LD_VAR 0 1
52716: PPUSH
52717: CALL_OW 437
52721: IFFALSE 52808
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52723: LD_STRING M
52725: PUSH
52726: LD_VAR 0 1
52730: PPUSH
52731: CALL_OW 437
52735: PUSH
52736: LD_INT 1
52738: ARRAY
52739: PUSH
52740: LD_INT 1
52742: ARRAY
52743: EQUAL
52744: IFFALSE 52771
52746: PUSH
52747: LD_VAR 0 2
52751: PUSH
52752: LD_VAR 0 1
52756: PPUSH
52757: CALL_OW 437
52761: PUSH
52762: LD_INT 1
52764: ARRAY
52765: PUSH
52766: LD_INT 2
52768: ARRAY
52769: EQUAL
52770: AND
52771: IFFALSE 52798
52773: PUSH
52774: LD_VAR 0 3
52778: PUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: CALL_OW 437
52788: PUSH
52789: LD_INT 1
52791: ARRAY
52792: PUSH
52793: LD_INT 3
52795: ARRAY
52796: EQUAL
52797: AND
52798: IFFALSE 52808
// result := true ;
52800: LD_ADDR_VAR 0 4
52804: PUSH
52805: LD_INT 1
52807: ST_TO_ADDR
// end ; end ;
52808: LD_VAR 0 4
52812: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52813: LD_INT 0
52815: PPUSH
52816: PPUSH
52817: PPUSH
52818: PPUSH
// if not unit or not area then
52819: LD_VAR 0 1
52823: NOT
52824: IFTRUE 52833
52826: PUSH
52827: LD_VAR 0 2
52831: NOT
52832: OR
52833: IFFALSE 52837
// exit ;
52835: GO 53013
// tmp := AreaToList ( area , i ) ;
52837: LD_ADDR_VAR 0 6
52841: PUSH
52842: LD_VAR 0 2
52846: PPUSH
52847: LD_VAR 0 5
52851: PPUSH
52852: CALL_OW 517
52856: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52857: LD_ADDR_VAR 0 5
52861: PUSH
52862: DOUBLE
52863: LD_INT 1
52865: DEC
52866: ST_TO_ADDR
52867: LD_VAR 0 6
52871: PUSH
52872: LD_INT 1
52874: ARRAY
52875: PUSH
52876: FOR_TO
52877: IFFALSE 53011
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52879: LD_ADDR_VAR 0 7
52883: PUSH
52884: LD_VAR 0 6
52888: PUSH
52889: LD_INT 1
52891: ARRAY
52892: PUSH
52893: LD_VAR 0 5
52897: ARRAY
52898: PUSH
52899: LD_VAR 0 6
52903: PUSH
52904: LD_INT 2
52906: ARRAY
52907: PUSH
52908: LD_VAR 0 5
52912: ARRAY
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
52918: LD_INT 92
52920: PUSH
52921: LD_VAR 0 7
52925: PUSH
52926: LD_INT 1
52928: ARRAY
52929: PUSH
52930: LD_VAR 0 7
52934: PUSH
52935: LD_INT 2
52937: ARRAY
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: PPUSH
52948: CALL_OW 69
52952: PUSH
52953: LD_INT 0
52955: EQUAL
52956: IFFALSE 53009
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52958: LD_VAR 0 1
52962: PPUSH
52963: LD_VAR 0 7
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: PPUSH
52972: LD_VAR 0 7
52976: PUSH
52977: LD_INT 2
52979: ARRAY
52980: PPUSH
52981: LD_VAR 0 3
52985: PPUSH
52986: CALL_OW 48
// result := IsPlaced ( unit ) ;
52990: LD_ADDR_VAR 0 4
52994: PUSH
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL_OW 305
53004: ST_TO_ADDR
// exit ;
53005: POP
53006: POP
53007: GO 53013
// end ; end ;
53009: GO 52876
53011: POP
53012: POP
// end ;
53013: LD_VAR 0 4
53017: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53018: LD_INT 0
53020: PPUSH
53021: PPUSH
53022: PPUSH
// if not side or side > 8 then
53023: LD_VAR 0 1
53027: NOT
53028: IFTRUE 53040
53030: PUSH
53031: LD_VAR 0 1
53035: PUSH
53036: LD_INT 8
53038: GREATER
53039: OR
53040: IFFALSE 53044
// exit ;
53042: GO 53231
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53044: LD_ADDR_VAR 0 4
53048: PUSH
53049: LD_INT 22
53051: PUSH
53052: LD_VAR 0 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 21
53063: PUSH
53064: LD_INT 3
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PPUSH
53075: CALL_OW 69
53079: ST_TO_ADDR
// if not tmp then
53080: LD_VAR 0 4
53084: NOT
53085: IFFALSE 53089
// exit ;
53087: GO 53231
// enable_addtolog := true ;
53089: LD_ADDR_OWVAR 81
53093: PUSH
53094: LD_INT 1
53096: ST_TO_ADDR
// AddToLog ( [ ) ;
53097: LD_STRING [
53099: PPUSH
53100: CALL_OW 561
// for i in tmp do
53104: LD_ADDR_VAR 0 3
53108: PUSH
53109: LD_VAR 0 4
53113: PUSH
53114: FOR_IN
53115: IFFALSE 53222
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53117: LD_STRING [
53119: PUSH
53120: LD_VAR 0 3
53124: PPUSH
53125: CALL_OW 266
53129: STR
53130: PUSH
53131: LD_STRING , 
53133: STR
53134: PUSH
53135: LD_VAR 0 3
53139: PPUSH
53140: CALL_OW 250
53144: STR
53145: PUSH
53146: LD_STRING , 
53148: STR
53149: PUSH
53150: LD_VAR 0 3
53154: PPUSH
53155: CALL_OW 251
53159: STR
53160: PUSH
53161: LD_STRING , 
53163: STR
53164: PUSH
53165: LD_VAR 0 3
53169: PPUSH
53170: CALL_OW 254
53174: STR
53175: PUSH
53176: LD_STRING , 
53178: STR
53179: PUSH
53180: LD_VAR 0 3
53184: PPUSH
53185: LD_INT 1
53187: PPUSH
53188: CALL_OW 268
53192: STR
53193: PUSH
53194: LD_STRING , 
53196: STR
53197: PUSH
53198: LD_VAR 0 3
53202: PPUSH
53203: LD_INT 2
53205: PPUSH
53206: CALL_OW 268
53210: STR
53211: PUSH
53212: LD_STRING ],
53214: STR
53215: PPUSH
53216: CALL_OW 561
// end ;
53220: GO 53114
53222: POP
53223: POP
// AddToLog ( ]; ) ;
53224: LD_STRING ];
53226: PPUSH
53227: CALL_OW 561
// end ;
53231: LD_VAR 0 2
53235: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
53236: LD_INT 0
53238: PPUSH
53239: PPUSH
53240: PPUSH
53241: PPUSH
53242: PPUSH
// if not area or not rate or not max then
53243: LD_VAR 0 1
53247: NOT
53248: IFTRUE 53257
53250: PUSH
53251: LD_VAR 0 2
53255: NOT
53256: OR
53257: IFTRUE 53266
53259: PUSH
53260: LD_VAR 0 4
53264: NOT
53265: OR
53266: IFFALSE 53270
// exit ;
53268: GO 53459
// while 1 do
53270: LD_INT 1
53272: IFFALSE 53459
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
53274: LD_ADDR_VAR 0 9
53278: PUSH
53279: LD_VAR 0 1
53283: PPUSH
53284: LD_INT 1
53286: PPUSH
53287: CALL_OW 287
53291: PUSH
53292: LD_INT 10
53294: MUL
53295: ST_TO_ADDR
// r := rate / 10 ;
53296: LD_ADDR_VAR 0 7
53300: PUSH
53301: LD_VAR 0 2
53305: PUSH
53306: LD_INT 10
53308: DIVREAL
53309: ST_TO_ADDR
// time := 1 1$00 ;
53310: LD_ADDR_VAR 0 8
53314: PUSH
53315: LD_INT 2100
53317: ST_TO_ADDR
// if amount < min then
53318: LD_VAR 0 9
53322: PUSH
53323: LD_VAR 0 3
53327: LESS
53328: IFFALSE 53346
// r := r * 2 else
53330: LD_ADDR_VAR 0 7
53334: PUSH
53335: LD_VAR 0 7
53339: PUSH
53340: LD_INT 2
53342: MUL
53343: ST_TO_ADDR
53344: GO 53372
// if amount > max then
53346: LD_VAR 0 9
53350: PUSH
53351: LD_VAR 0 4
53355: GREATER
53356: IFFALSE 53372
// r := r / 2 ;
53358: LD_ADDR_VAR 0 7
53362: PUSH
53363: LD_VAR 0 7
53367: PUSH
53368: LD_INT 2
53370: DIVREAL
53371: ST_TO_ADDR
// time := time / r ;
53372: LD_ADDR_VAR 0 8
53376: PUSH
53377: LD_VAR 0 8
53381: PUSH
53382: LD_VAR 0 7
53386: DIVREAL
53387: ST_TO_ADDR
// if time < 0 then
53388: LD_VAR 0 8
53392: PUSH
53393: LD_INT 0
53395: LESS
53396: IFFALSE 53413
// time := time * - 1 ;
53398: LD_ADDR_VAR 0 8
53402: PUSH
53403: LD_VAR 0 8
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: MUL
53412: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53413: LD_VAR 0 8
53417: PUSH
53418: LD_INT 35
53420: PPUSH
53421: LD_INT 875
53423: PPUSH
53424: CALL_OW 12
53428: PLUS
53429: PPUSH
53430: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53434: LD_INT 1
53436: PPUSH
53437: LD_INT 5
53439: PPUSH
53440: CALL_OW 12
53444: PPUSH
53445: LD_VAR 0 1
53449: PPUSH
53450: LD_INT 1
53452: PPUSH
53453: CALL_OW 55
// end ;
53457: GO 53270
// end ;
53459: LD_VAR 0 5
53463: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53464: LD_INT 0
53466: PPUSH
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
53471: PPUSH
53472: PPUSH
53473: PPUSH
// if not turrets or not factories then
53474: LD_VAR 0 1
53478: NOT
53479: IFTRUE 53488
53481: PUSH
53482: LD_VAR 0 2
53486: NOT
53487: OR
53488: IFFALSE 53492
// exit ;
53490: GO 53799
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53492: LD_ADDR_VAR 0 10
53496: PUSH
53497: LD_INT 5
53499: PUSH
53500: LD_INT 6
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 3
53519: PUSH
53520: LD_INT 5
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 24
53534: PUSH
53535: LD_INT 25
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 23
53544: PUSH
53545: LD_INT 27
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 42
53558: PUSH
53559: LD_INT 43
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 44
53568: PUSH
53569: LD_INT 46
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 45
53578: PUSH
53579: LD_INT 47
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: ST_TO_ADDR
// result := [ ] ;
53596: LD_ADDR_VAR 0 3
53600: PUSH
53601: EMPTY
53602: ST_TO_ADDR
// for i in turrets do
53603: LD_ADDR_VAR 0 4
53607: PUSH
53608: LD_VAR 0 1
53612: PUSH
53613: FOR_IN
53614: IFFALSE 53797
// begin nat := GetNation ( i ) ;
53616: LD_ADDR_VAR 0 7
53620: PUSH
53621: LD_VAR 0 4
53625: PPUSH
53626: CALL_OW 248
53630: ST_TO_ADDR
// weapon := 0 ;
53631: LD_ADDR_VAR 0 8
53635: PUSH
53636: LD_INT 0
53638: ST_TO_ADDR
// if not nat then
53639: LD_VAR 0 7
53643: NOT
53644: IFFALSE 53648
// continue ;
53646: GO 53613
// for j in list [ nat ] do
53648: LD_ADDR_VAR 0 5
53652: PUSH
53653: LD_VAR 0 10
53657: PUSH
53658: LD_VAR 0 7
53662: ARRAY
53663: PUSH
53664: FOR_IN
53665: IFFALSE 53706
// if GetBWeapon ( i ) = j [ 1 ] then
53667: LD_VAR 0 4
53671: PPUSH
53672: CALL_OW 269
53676: PUSH
53677: LD_VAR 0 5
53681: PUSH
53682: LD_INT 1
53684: ARRAY
53685: EQUAL
53686: IFFALSE 53704
// begin weapon := j [ 2 ] ;
53688: LD_ADDR_VAR 0 8
53692: PUSH
53693: LD_VAR 0 5
53697: PUSH
53698: LD_INT 2
53700: ARRAY
53701: ST_TO_ADDR
// break ;
53702: GO 53706
// end ;
53704: GO 53664
53706: POP
53707: POP
// if not weapon then
53708: LD_VAR 0 8
53712: NOT
53713: IFFALSE 53717
// continue ;
53715: GO 53613
// for k in factories do
53717: LD_ADDR_VAR 0 6
53721: PUSH
53722: LD_VAR 0 2
53726: PUSH
53727: FOR_IN
53728: IFFALSE 53793
// begin weapons := AvailableWeaponList ( k ) ;
53730: LD_ADDR_VAR 0 9
53734: PUSH
53735: LD_VAR 0 6
53739: PPUSH
53740: CALL_OW 478
53744: ST_TO_ADDR
// if not weapons then
53745: LD_VAR 0 9
53749: NOT
53750: IFFALSE 53754
// continue ;
53752: GO 53727
// if weapon in weapons then
53754: LD_VAR 0 8
53758: PUSH
53759: LD_VAR 0 9
53763: IN
53764: IFFALSE 53791
// begin result := [ i , weapon ] ;
53766: LD_ADDR_VAR 0 3
53770: PUSH
53771: LD_VAR 0 4
53775: PUSH
53776: LD_VAR 0 8
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: ST_TO_ADDR
// exit ;
53785: POP
53786: POP
53787: POP
53788: POP
53789: GO 53799
// end ; end ;
53791: GO 53727
53793: POP
53794: POP
// end ;
53795: GO 53613
53797: POP
53798: POP
// end ;
53799: LD_VAR 0 3
53803: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53804: LD_INT 0
53806: PPUSH
// if not side or side > 8 then
53807: LD_VAR 0 3
53811: NOT
53812: IFTRUE 53824
53814: PUSH
53815: LD_VAR 0 3
53819: PUSH
53820: LD_INT 8
53822: GREATER
53823: OR
53824: IFFALSE 53828
// exit ;
53826: GO 53887
// if not range then
53828: LD_VAR 0 4
53832: NOT
53833: IFFALSE 53844
// range := - 12 ;
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: LD_INT 12
53842: NEG
53843: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53844: LD_VAR 0 1
53848: PPUSH
53849: LD_VAR 0 2
53853: PPUSH
53854: LD_VAR 0 3
53858: PPUSH
53859: LD_VAR 0 4
53863: PPUSH
53864: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53868: LD_VAR 0 1
53872: PPUSH
53873: LD_VAR 0 2
53877: PPUSH
53878: LD_VAR 0 3
53882: PPUSH
53883: CALL_OW 331
// end ;
53887: LD_VAR 0 5
53891: RET
// export function Video ( mode ) ; begin
53892: LD_INT 0
53894: PPUSH
// ingame_video = mode ;
53895: LD_ADDR_OWVAR 52
53899: PUSH
53900: LD_VAR 0 1
53904: ST_TO_ADDR
// interface_hidden = mode ;
53905: LD_ADDR_OWVAR 54
53909: PUSH
53910: LD_VAR 0 1
53914: ST_TO_ADDR
// end ;
53915: LD_VAR 0 2
53919: RET
// export function Join ( array , element ) ; begin
53920: LD_INT 0
53922: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53923: LD_ADDR_VAR 0 3
53927: PUSH
53928: LD_VAR 0 1
53932: PPUSH
53933: LD_VAR 0 1
53937: PUSH
53938: LD_INT 1
53940: PLUS
53941: PPUSH
53942: LD_VAR 0 2
53946: PPUSH
53947: CALL_OW 1
53951: ST_TO_ADDR
// end ;
53952: LD_VAR 0 3
53956: RET
// export function JoinUnion ( array , element ) ; begin
53957: LD_INT 0
53959: PPUSH
// result := array union element ;
53960: LD_ADDR_VAR 0 3
53964: PUSH
53965: LD_VAR 0 1
53969: PUSH
53970: LD_VAR 0 2
53974: UNION
53975: ST_TO_ADDR
// end ;
53976: LD_VAR 0 3
53980: RET
// export function GetBehemoths ( side ) ; begin
53981: LD_INT 0
53983: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
53984: LD_ADDR_VAR 0 2
53988: PUSH
53989: LD_INT 22
53991: PUSH
53992: LD_VAR 0 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 31
54003: PUSH
54004: LD_INT 25
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PPUSH
54015: CALL_OW 69
54019: ST_TO_ADDR
// end ;
54020: LD_VAR 0 2
54024: RET
// export function Shuffle ( array ) ; var i , index ; begin
54025: LD_INT 0
54027: PPUSH
54028: PPUSH
54029: PPUSH
// result := [ ] ;
54030: LD_ADDR_VAR 0 2
54034: PUSH
54035: EMPTY
54036: ST_TO_ADDR
// if not array then
54037: LD_VAR 0 1
54041: NOT
54042: IFFALSE 54046
// exit ;
54044: GO 54145
// Randomize ;
54046: CALL_OW 10
// for i = array downto 1 do
54050: LD_ADDR_VAR 0 3
54054: PUSH
54055: DOUBLE
54056: LD_VAR 0 1
54060: INC
54061: ST_TO_ADDR
54062: LD_INT 1
54064: PUSH
54065: FOR_DOWNTO
54066: IFFALSE 54143
// begin index := rand ( 1 , array ) ;
54068: LD_ADDR_VAR 0 4
54072: PUSH
54073: LD_INT 1
54075: PPUSH
54076: LD_VAR 0 1
54080: PPUSH
54081: CALL_OW 12
54085: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54086: LD_ADDR_VAR 0 2
54090: PUSH
54091: LD_VAR 0 2
54095: PPUSH
54096: LD_VAR 0 2
54100: PUSH
54101: LD_INT 1
54103: PLUS
54104: PPUSH
54105: LD_VAR 0 1
54109: PUSH
54110: LD_VAR 0 4
54114: ARRAY
54115: PPUSH
54116: CALL_OW 2
54120: ST_TO_ADDR
// array := Delete ( array , index ) ;
54121: LD_ADDR_VAR 0 1
54125: PUSH
54126: LD_VAR 0 1
54130: PPUSH
54131: LD_VAR 0 4
54135: PPUSH
54136: CALL_OW 3
54140: ST_TO_ADDR
// end ;
54141: GO 54065
54143: POP
54144: POP
// end ;
54145: LD_VAR 0 2
54149: RET
// export function GetBaseMaterials ( base ) ; begin
54150: LD_INT 0
54152: PPUSH
// result := [ 0 , 0 , 0 ] ;
54153: LD_ADDR_VAR 0 2
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// if not base then
54172: LD_VAR 0 1
54176: NOT
54177: IFFALSE 54181
// exit ;
54179: GO 54230
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54181: LD_ADDR_VAR 0 2
54185: PUSH
54186: LD_VAR 0 1
54190: PPUSH
54191: LD_INT 1
54193: PPUSH
54194: CALL_OW 275
54198: PUSH
54199: LD_VAR 0 1
54203: PPUSH
54204: LD_INT 2
54206: PPUSH
54207: CALL_OW 275
54211: PUSH
54212: LD_VAR 0 1
54216: PPUSH
54217: LD_INT 3
54219: PPUSH
54220: CALL_OW 275
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// end ;
54230: LD_VAR 0 2
54234: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
54235: LD_INT 0
54237: PPUSH
54238: PPUSH
// result := array ;
54239: LD_ADDR_VAR 0 3
54243: PUSH
54244: LD_VAR 0 1
54248: ST_TO_ADDR
// if size >= result then
54249: LD_VAR 0 2
54253: PUSH
54254: LD_VAR 0 3
54258: GREATEREQUAL
54259: IFFALSE 54263
// exit ;
54261: GO 54313
// if size then
54263: LD_VAR 0 2
54267: IFFALSE 54313
// for i := array downto size do
54269: LD_ADDR_VAR 0 4
54273: PUSH
54274: DOUBLE
54275: LD_VAR 0 1
54279: INC
54280: ST_TO_ADDR
54281: LD_VAR 0 2
54285: PUSH
54286: FOR_DOWNTO
54287: IFFALSE 54311
// result := Delete ( result , result ) ;
54289: LD_ADDR_VAR 0 3
54293: PUSH
54294: LD_VAR 0 3
54298: PPUSH
54299: LD_VAR 0 3
54303: PPUSH
54304: CALL_OW 3
54308: ST_TO_ADDR
54309: GO 54286
54311: POP
54312: POP
// end ;
54313: LD_VAR 0 3
54317: RET
// export function ComExit ( unit ) ; var tmp ; begin
54318: LD_INT 0
54320: PPUSH
54321: PPUSH
// if not IsInUnit ( unit ) then
54322: LD_VAR 0 1
54326: PPUSH
54327: CALL_OW 310
54331: NOT
54332: IFFALSE 54336
// exit ;
54334: GO 54396
// tmp := IsInUnit ( unit ) ;
54336: LD_ADDR_VAR 0 3
54340: PUSH
54341: LD_VAR 0 1
54345: PPUSH
54346: CALL_OW 310
54350: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54351: LD_VAR 0 3
54355: PPUSH
54356: CALL_OW 247
54360: PUSH
54361: LD_INT 2
54363: EQUAL
54364: IFFALSE 54377
// ComExitVehicle ( unit ) else
54366: LD_VAR 0 1
54370: PPUSH
54371: CALL_OW 121
54375: GO 54386
// ComExitBuilding ( unit ) ;
54377: LD_VAR 0 1
54381: PPUSH
54382: CALL_OW 122
// result := tmp ;
54386: LD_ADDR_VAR 0 2
54390: PUSH
54391: LD_VAR 0 3
54395: ST_TO_ADDR
// end ;
54396: LD_VAR 0 2
54400: RET
// export function ComExitAll ( units ) ; var i ; begin
54401: LD_INT 0
54403: PPUSH
54404: PPUSH
// if not units then
54405: LD_VAR 0 1
54409: NOT
54410: IFFALSE 54414
// exit ;
54412: GO 54440
// for i in units do
54414: LD_ADDR_VAR 0 3
54418: PUSH
54419: LD_VAR 0 1
54423: PUSH
54424: FOR_IN
54425: IFFALSE 54438
// ComExit ( i ) ;
54427: LD_VAR 0 3
54431: PPUSH
54432: CALL 54318 0 1
54436: GO 54424
54438: POP
54439: POP
// end ;
54440: LD_VAR 0 2
54444: RET
// export function ResetHc ; begin
54445: LD_INT 0
54447: PPUSH
// InitHc ;
54448: CALL_OW 19
// hc_importance := 0 ;
54452: LD_ADDR_OWVAR 32
54456: PUSH
54457: LD_INT 0
54459: ST_TO_ADDR
// end ;
54460: LD_VAR 0 1
54464: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54465: LD_INT 0
54467: PPUSH
54468: PPUSH
54469: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54470: LD_ADDR_VAR 0 6
54474: PUSH
54475: LD_VAR 0 1
54479: PUSH
54480: LD_VAR 0 3
54484: PLUS
54485: PUSH
54486: LD_INT 2
54488: DIV
54489: ST_TO_ADDR
// if _x < 0 then
54490: LD_VAR 0 6
54494: PUSH
54495: LD_INT 0
54497: LESS
54498: IFFALSE 54515
// _x := _x * - 1 ;
54500: LD_ADDR_VAR 0 6
54504: PUSH
54505: LD_VAR 0 6
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: MUL
54514: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54515: LD_ADDR_VAR 0 7
54519: PUSH
54520: LD_VAR 0 2
54524: PUSH
54525: LD_VAR 0 4
54529: PLUS
54530: PUSH
54531: LD_INT 2
54533: DIV
54534: ST_TO_ADDR
// if _y < 0 then
54535: LD_VAR 0 7
54539: PUSH
54540: LD_INT 0
54542: LESS
54543: IFFALSE 54560
// _y := _y * - 1 ;
54545: LD_ADDR_VAR 0 7
54549: PUSH
54550: LD_VAR 0 7
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: MUL
54559: ST_TO_ADDR
// result := [ _x , _y ] ;
54560: LD_ADDR_VAR 0 5
54564: PUSH
54565: LD_VAR 0 6
54569: PUSH
54570: LD_VAR 0 7
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: ST_TO_ADDR
// end ;
54579: LD_VAR 0 5
54583: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54584: LD_INT 0
54586: PPUSH
54587: PPUSH
54588: PPUSH
54589: PPUSH
// task := GetTaskList ( unit ) ;
54590: LD_ADDR_VAR 0 7
54594: PUSH
54595: LD_VAR 0 1
54599: PPUSH
54600: CALL_OW 437
54604: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54605: LD_VAR 0 7
54609: NOT
54610: IFFALSE 54629
54612: PUSH
54613: LD_VAR 0 1
54617: PPUSH
54618: LD_VAR 0 2
54622: PPUSH
54623: CALL_OW 308
54627: NOT
54628: AND
54629: IFFALSE 54633
// exit ;
54631: GO 54751
// if IsInArea ( unit , area ) then
54633: LD_VAR 0 1
54637: PPUSH
54638: LD_VAR 0 2
54642: PPUSH
54643: CALL_OW 308
54647: IFFALSE 54665
// begin ComMoveToArea ( unit , goAway ) ;
54649: LD_VAR 0 1
54653: PPUSH
54654: LD_VAR 0 3
54658: PPUSH
54659: CALL_OW 113
// exit ;
54663: GO 54751
// end ; if task [ 1 ] [ 1 ] <> M then
54665: LD_VAR 0 7
54669: PUSH
54670: LD_INT 1
54672: ARRAY
54673: PUSH
54674: LD_INT 1
54676: ARRAY
54677: PUSH
54678: LD_STRING M
54680: NONEQUAL
54681: IFFALSE 54685
// exit ;
54683: GO 54751
// x := task [ 1 ] [ 2 ] ;
54685: LD_ADDR_VAR 0 5
54689: PUSH
54690: LD_VAR 0 7
54694: PUSH
54695: LD_INT 1
54697: ARRAY
54698: PUSH
54699: LD_INT 2
54701: ARRAY
54702: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54703: LD_ADDR_VAR 0 6
54707: PUSH
54708: LD_VAR 0 7
54712: PUSH
54713: LD_INT 1
54715: ARRAY
54716: PUSH
54717: LD_INT 3
54719: ARRAY
54720: ST_TO_ADDR
// if InArea ( x , y , area ) then
54721: LD_VAR 0 5
54725: PPUSH
54726: LD_VAR 0 6
54730: PPUSH
54731: LD_VAR 0 2
54735: PPUSH
54736: CALL_OW 309
54740: IFFALSE 54751
// ComStop ( unit ) ;
54742: LD_VAR 0 1
54746: PPUSH
54747: CALL_OW 141
// end ;
54751: LD_VAR 0 4
54755: RET
// export function Abs ( value ) ; begin
54756: LD_INT 0
54758: PPUSH
// result := value ;
54759: LD_ADDR_VAR 0 2
54763: PUSH
54764: LD_VAR 0 1
54768: ST_TO_ADDR
// if value < 0 then
54769: LD_VAR 0 1
54773: PUSH
54774: LD_INT 0
54776: LESS
54777: IFFALSE 54794
// result := value * - 1 ;
54779: LD_ADDR_VAR 0 2
54783: PUSH
54784: LD_VAR 0 1
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: MUL
54793: ST_TO_ADDR
// end ;
54794: LD_VAR 0 2
54798: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54799: LD_INT 0
54801: PPUSH
54802: PPUSH
54803: PPUSH
54804: PPUSH
54805: PPUSH
54806: PPUSH
54807: PPUSH
54808: PPUSH
// if not unit or not building then
54809: LD_VAR 0 1
54813: NOT
54814: IFTRUE 54823
54816: PUSH
54817: LD_VAR 0 2
54821: NOT
54822: OR
54823: IFFALSE 54827
// exit ;
54825: GO 55055
// x := GetX ( building ) ;
54827: LD_ADDR_VAR 0 4
54831: PUSH
54832: LD_VAR 0 2
54836: PPUSH
54837: CALL_OW 250
54841: ST_TO_ADDR
// y := GetY ( building ) ;
54842: LD_ADDR_VAR 0 6
54846: PUSH
54847: LD_VAR 0 2
54851: PPUSH
54852: CALL_OW 251
54856: ST_TO_ADDR
// d := GetDir ( building ) ;
54857: LD_ADDR_VAR 0 8
54861: PUSH
54862: LD_VAR 0 2
54866: PPUSH
54867: CALL_OW 254
54871: ST_TO_ADDR
// r := 4 ;
54872: LD_ADDR_VAR 0 9
54876: PUSH
54877: LD_INT 4
54879: ST_TO_ADDR
// for i := 1 to 5 do
54880: LD_ADDR_VAR 0 10
54884: PUSH
54885: DOUBLE
54886: LD_INT 1
54888: DEC
54889: ST_TO_ADDR
54890: LD_INT 5
54892: PUSH
54893: FOR_TO
54894: IFFALSE 55053
// begin _x := ShiftX ( x , d , r + i ) ;
54896: LD_ADDR_VAR 0 5
54900: PUSH
54901: LD_VAR 0 4
54905: PPUSH
54906: LD_VAR 0 8
54910: PPUSH
54911: LD_VAR 0 9
54915: PUSH
54916: LD_VAR 0 10
54920: PLUS
54921: PPUSH
54922: CALL_OW 272
54926: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54927: LD_ADDR_VAR 0 7
54931: PUSH
54932: LD_VAR 0 6
54936: PPUSH
54937: LD_VAR 0 8
54941: PPUSH
54942: LD_VAR 0 9
54946: PUSH
54947: LD_VAR 0 10
54951: PLUS
54952: PPUSH
54953: CALL_OW 273
54957: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54958: LD_VAR 0 5
54962: PPUSH
54963: LD_VAR 0 7
54967: PPUSH
54968: CALL_OW 488
54972: IFFALSE 55007
54974: PUSH
54975: LD_VAR 0 5
54979: PPUSH
54980: LD_VAR 0 7
54984: PPUSH
54985: CALL_OW 428
54989: PPUSH
54990: CALL_OW 247
54994: PUSH
54995: LD_INT 3
54997: PUSH
54998: LD_INT 2
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: IN
55005: NOT
55006: AND
55007: IFFALSE 55051
// begin ComMoveXY ( unit , _x , _y ) ;
55009: LD_VAR 0 1
55013: PPUSH
55014: LD_VAR 0 5
55018: PPUSH
55019: LD_VAR 0 7
55023: PPUSH
55024: CALL_OW 111
// result := [ _x , _y ] ;
55028: LD_ADDR_VAR 0 3
55032: PUSH
55033: LD_VAR 0 5
55037: PUSH
55038: LD_VAR 0 7
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: ST_TO_ADDR
// exit ;
55047: POP
55048: POP
55049: GO 55055
// end ; end ;
55051: GO 54893
55053: POP
55054: POP
// end ;
55055: LD_VAR 0 3
55059: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55060: LD_INT 0
55062: PPUSH
55063: PPUSH
55064: PPUSH
// result := 0 ;
55065: LD_ADDR_VAR 0 3
55069: PUSH
55070: LD_INT 0
55072: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55073: LD_VAR 0 1
55077: PUSH
55078: LD_INT 0
55080: LESS
55081: IFTRUE 55093
55083: PUSH
55084: LD_VAR 0 1
55088: PUSH
55089: LD_INT 8
55091: GREATER
55092: OR
55093: IFTRUE 55105
55095: PUSH
55096: LD_VAR 0 2
55100: PUSH
55101: LD_INT 0
55103: LESS
55104: OR
55105: IFTRUE 55117
55107: PUSH
55108: LD_VAR 0 2
55112: PUSH
55113: LD_INT 8
55115: GREATER
55116: OR
55117: IFFALSE 55121
// exit ;
55119: GO 55196
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55121: LD_ADDR_VAR 0 4
55125: PUSH
55126: LD_INT 22
55128: PUSH
55129: LD_VAR 0 2
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PPUSH
55138: CALL_OW 69
55142: PUSH
55143: FOR_IN
55144: IFFALSE 55194
// begin un := UnitShoot ( i ) ;
55146: LD_ADDR_VAR 0 5
55150: PUSH
55151: LD_VAR 0 4
55155: PPUSH
55156: CALL_OW 504
55160: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55161: LD_VAR 0 5
55165: PPUSH
55166: CALL_OW 255
55170: PUSH
55171: LD_VAR 0 1
55175: EQUAL
55176: IFFALSE 55192
// begin result := un ;
55178: LD_ADDR_VAR 0 3
55182: PUSH
55183: LD_VAR 0 5
55187: ST_TO_ADDR
// exit ;
55188: POP
55189: POP
55190: GO 55196
// end ; end ;
55192: GO 55143
55194: POP
55195: POP
// end ;
55196: LD_VAR 0 3
55200: RET
// export function GetCargoBay ( units ) ; begin
55201: LD_INT 0
55203: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55204: LD_ADDR_VAR 0 2
55208: PUSH
55209: LD_VAR 0 1
55213: PPUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 34
55219: PUSH
55220: LD_INT 12
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 34
55229: PUSH
55230: LD_INT 51
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 34
55239: PUSH
55240: LD_INT 32
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 34
55249: PUSH
55250: LD_INT 89
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: PPUSH
55264: CALL_OW 72
55268: ST_TO_ADDR
// end ;
55269: LD_VAR 0 2
55273: RET
// export function Negate ( value ) ; begin
55274: LD_INT 0
55276: PPUSH
// result := not value ;
55277: LD_ADDR_VAR 0 2
55281: PUSH
55282: LD_VAR 0 1
55286: NOT
55287: ST_TO_ADDR
// end ;
55288: LD_VAR 0 2
55292: RET
// export function Inc ( value ) ; begin
55293: LD_INT 0
55295: PPUSH
// result := value + 1 ;
55296: LD_ADDR_VAR 0 2
55300: PUSH
55301: LD_VAR 0 1
55305: PUSH
55306: LD_INT 1
55308: PLUS
55309: ST_TO_ADDR
// end ;
55310: LD_VAR 0 2
55314: RET
// export function Dec ( value ) ; begin
55315: LD_INT 0
55317: PPUSH
// result := value - 1 ;
55318: LD_ADDR_VAR 0 2
55322: PUSH
55323: LD_VAR 0 1
55327: PUSH
55328: LD_INT 1
55330: MINUS
55331: ST_TO_ADDR
// end ;
55332: LD_VAR 0 2
55336: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55337: LD_INT 0
55339: PPUSH
55340: PPUSH
55341: PPUSH
55342: PPUSH
55343: PPUSH
55344: PPUSH
55345: PPUSH
55346: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55347: LD_VAR 0 1
55351: PPUSH
55352: LD_VAR 0 2
55356: PPUSH
55357: CALL_OW 488
55361: NOT
55362: IFTRUE 55381
55364: PUSH
55365: LD_VAR 0 3
55369: PPUSH
55370: LD_VAR 0 4
55374: PPUSH
55375: CALL_OW 488
55379: NOT
55380: OR
55381: IFFALSE 55394
// begin result := - 1 ;
55383: LD_ADDR_VAR 0 5
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: ST_TO_ADDR
// exit ;
55392: GO 55629
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55394: LD_ADDR_VAR 0 12
55398: PUSH
55399: LD_VAR 0 1
55403: PPUSH
55404: LD_VAR 0 2
55408: PPUSH
55409: LD_VAR 0 3
55413: PPUSH
55414: LD_VAR 0 4
55418: PPUSH
55419: CALL 54465 0 4
55423: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55424: LD_ADDR_VAR 0 11
55428: PUSH
55429: LD_VAR 0 1
55433: PPUSH
55434: LD_VAR 0 2
55438: PPUSH
55439: LD_VAR 0 12
55443: PUSH
55444: LD_INT 1
55446: ARRAY
55447: PPUSH
55448: LD_VAR 0 12
55452: PUSH
55453: LD_INT 2
55455: ARRAY
55456: PPUSH
55457: CALL_OW 298
55461: ST_TO_ADDR
// distance := 9999 ;
55462: LD_ADDR_VAR 0 10
55466: PUSH
55467: LD_INT 9999
55469: ST_TO_ADDR
// for i := 0 to 5 do
55470: LD_ADDR_VAR 0 6
55474: PUSH
55475: DOUBLE
55476: LD_INT 0
55478: DEC
55479: ST_TO_ADDR
55480: LD_INT 5
55482: PUSH
55483: FOR_TO
55484: IFFALSE 55627
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55486: LD_ADDR_VAR 0 7
55490: PUSH
55491: LD_VAR 0 1
55495: PPUSH
55496: LD_VAR 0 6
55500: PPUSH
55501: LD_VAR 0 11
55505: PPUSH
55506: CALL_OW 272
55510: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55511: LD_ADDR_VAR 0 8
55515: PUSH
55516: LD_VAR 0 2
55520: PPUSH
55521: LD_VAR 0 6
55525: PPUSH
55526: LD_VAR 0 11
55530: PPUSH
55531: CALL_OW 273
55535: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55536: LD_VAR 0 7
55540: PPUSH
55541: LD_VAR 0 8
55545: PPUSH
55546: CALL_OW 488
55550: NOT
55551: IFFALSE 55555
// continue ;
55553: GO 55483
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55555: LD_ADDR_VAR 0 9
55559: PUSH
55560: LD_VAR 0 12
55564: PUSH
55565: LD_INT 1
55567: ARRAY
55568: PPUSH
55569: LD_VAR 0 12
55573: PUSH
55574: LD_INT 2
55576: ARRAY
55577: PPUSH
55578: LD_VAR 0 7
55582: PPUSH
55583: LD_VAR 0 8
55587: PPUSH
55588: CALL_OW 298
55592: ST_TO_ADDR
// if tmp < distance then
55593: LD_VAR 0 9
55597: PUSH
55598: LD_VAR 0 10
55602: LESS
55603: IFFALSE 55625
// begin result := i ;
55605: LD_ADDR_VAR 0 5
55609: PUSH
55610: LD_VAR 0 6
55614: ST_TO_ADDR
// distance := tmp ;
55615: LD_ADDR_VAR 0 10
55619: PUSH
55620: LD_VAR 0 9
55624: ST_TO_ADDR
// end ; end ;
55625: GO 55483
55627: POP
55628: POP
// end ;
55629: LD_VAR 0 5
55633: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55634: LD_INT 0
55636: PPUSH
55637: PPUSH
// if not driver or not IsInUnit ( driver ) then
55638: LD_VAR 0 1
55642: NOT
55643: IFTRUE 55657
55645: PUSH
55646: LD_VAR 0 1
55650: PPUSH
55651: CALL_OW 310
55655: NOT
55656: OR
55657: IFFALSE 55661
// exit ;
55659: GO 55751
// vehicle := IsInUnit ( driver ) ;
55661: LD_ADDR_VAR 0 3
55665: PUSH
55666: LD_VAR 0 1
55670: PPUSH
55671: CALL_OW 310
55675: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55676: LD_VAR 0 1
55680: PPUSH
55681: LD_STRING \
55683: PUSH
55684: LD_INT 0
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: PUSH
55711: LD_STRING E
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: LD_VAR 0 3
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PPUSH
55747: CALL_OW 446
// end ;
55751: LD_VAR 0 2
55755: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
// if not driver or not IsInUnit ( driver ) then
55760: LD_VAR 0 1
55764: NOT
55765: IFTRUE 55779
55767: PUSH
55768: LD_VAR 0 1
55772: PPUSH
55773: CALL_OW 310
55777: NOT
55778: OR
55779: IFFALSE 55783
// exit ;
55781: GO 55873
// vehicle := IsInUnit ( driver ) ;
55783: LD_ADDR_VAR 0 3
55787: PUSH
55788: LD_VAR 0 1
55792: PPUSH
55793: CALL_OW 310
55797: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55798: LD_VAR 0 1
55802: PPUSH
55803: LD_STRING \
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: PUSH
55833: LD_STRING E
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_VAR 0 3
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PPUSH
55869: CALL_OW 447
// end ;
55873: LD_VAR 0 2
55877: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55878: LD_INT 0
55880: PPUSH
55881: PPUSH
55882: PPUSH
// tmp := [ ] ;
55883: LD_ADDR_VAR 0 5
55887: PUSH
55888: EMPTY
55889: ST_TO_ADDR
// for i in units do
55890: LD_ADDR_VAR 0 4
55894: PUSH
55895: LD_VAR 0 1
55899: PUSH
55900: FOR_IN
55901: IFFALSE 55939
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55903: LD_ADDR_VAR 0 5
55907: PUSH
55908: LD_VAR 0 5
55912: PPUSH
55913: LD_VAR 0 5
55917: PUSH
55918: LD_INT 1
55920: PLUS
55921: PPUSH
55922: LD_VAR 0 4
55926: PPUSH
55927: CALL_OW 256
55931: PPUSH
55932: CALL_OW 2
55936: ST_TO_ADDR
55937: GO 55900
55939: POP
55940: POP
// if not tmp then
55941: LD_VAR 0 5
55945: NOT
55946: IFFALSE 55950
// exit ;
55948: GO 55998
// if asc then
55950: LD_VAR 0 2
55954: IFFALSE 55978
// result := SortListByListAsc ( units , tmp ) else
55956: LD_ADDR_VAR 0 3
55960: PUSH
55961: LD_VAR 0 1
55965: PPUSH
55966: LD_VAR 0 5
55970: PPUSH
55971: CALL_OW 76
55975: ST_TO_ADDR
55976: GO 55998
// result := SortListByListDesc ( units , tmp ) ;
55978: LD_ADDR_VAR 0 3
55982: PUSH
55983: LD_VAR 0 1
55987: PPUSH
55988: LD_VAR 0 5
55992: PPUSH
55993: CALL_OW 77
55997: ST_TO_ADDR
// end ;
55998: LD_VAR 0 3
56002: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56003: LD_INT 0
56005: PPUSH
56006: PPUSH
// task := GetTaskList ( mech ) ;
56007: LD_ADDR_VAR 0 4
56011: PUSH
56012: LD_VAR 0 1
56016: PPUSH
56017: CALL_OW 437
56021: ST_TO_ADDR
// if not task then
56022: LD_VAR 0 4
56026: NOT
56027: IFFALSE 56031
// exit ;
56029: GO 56075
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56031: LD_ADDR_VAR 0 3
56035: PUSH
56036: LD_VAR 0 4
56040: PUSH
56041: LD_INT 1
56043: ARRAY
56044: PUSH
56045: LD_INT 1
56047: ARRAY
56048: PUSH
56049: LD_STRING r
56051: EQUAL
56052: IFFALSE 56074
56054: PUSH
56055: LD_VAR 0 4
56059: PUSH
56060: LD_INT 1
56062: ARRAY
56063: PUSH
56064: LD_INT 4
56066: ARRAY
56067: PUSH
56068: LD_VAR 0 2
56072: EQUAL
56073: AND
56074: ST_TO_ADDR
// end ;
56075: LD_VAR 0 3
56079: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56080: LD_INT 0
56082: PPUSH
// SetDir ( unit , d ) ;
56083: LD_VAR 0 1
56087: PPUSH
56088: LD_VAR 0 4
56092: PPUSH
56093: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
56097: LD_ADDR_VAR 0 6
56101: PUSH
56102: LD_VAR 0 1
56106: PPUSH
56107: LD_VAR 0 2
56111: PPUSH
56112: LD_VAR 0 3
56116: PPUSH
56117: LD_VAR 0 5
56121: PPUSH
56122: CALL_OW 48
56126: ST_TO_ADDR
// end ;
56127: LD_VAR 0 6
56131: RET
// export function ToNaturalNumber ( number ) ; begin
56132: LD_INT 0
56134: PPUSH
// result := number div 1 ;
56135: LD_ADDR_VAR 0 2
56139: PUSH
56140: LD_VAR 0 1
56144: PUSH
56145: LD_INT 1
56147: DIV
56148: ST_TO_ADDR
// if number < 0 then
56149: LD_VAR 0 1
56153: PUSH
56154: LD_INT 0
56156: LESS
56157: IFFALSE 56167
// result := 0 ;
56159: LD_ADDR_VAR 0 2
56163: PUSH
56164: LD_INT 0
56166: ST_TO_ADDR
// end ;
56167: LD_VAR 0 2
56171: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
56172: LD_INT 0
56174: PPUSH
56175: PPUSH
56176: PPUSH
// if not buildings then
56177: LD_VAR 0 1
56181: NOT
56182: IFFALSE 56186
// exit ;
56184: GO 56301
// tmp := [ ] ;
56186: LD_ADDR_VAR 0 5
56190: PUSH
56191: EMPTY
56192: ST_TO_ADDR
// for b in buildings do
56193: LD_ADDR_VAR 0 4
56197: PUSH
56198: LD_VAR 0 1
56202: PUSH
56203: FOR_IN
56204: IFFALSE 56242
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
56206: LD_ADDR_VAR 0 5
56210: PUSH
56211: LD_VAR 0 5
56215: PPUSH
56216: LD_VAR 0 5
56220: PUSH
56221: LD_INT 1
56223: PLUS
56224: PPUSH
56225: LD_VAR 0 4
56229: PPUSH
56230: CALL_OW 266
56234: PPUSH
56235: CALL_OW 1
56239: ST_TO_ADDR
56240: GO 56203
56242: POP
56243: POP
// if not tmp then
56244: LD_VAR 0 5
56248: NOT
56249: IFFALSE 56253
// exit ;
56251: GO 56301
// if asc then
56253: LD_VAR 0 2
56257: IFFALSE 56281
// result := SortListByListAsc ( buildings , tmp ) else
56259: LD_ADDR_VAR 0 3
56263: PUSH
56264: LD_VAR 0 1
56268: PPUSH
56269: LD_VAR 0 5
56273: PPUSH
56274: CALL_OW 76
56278: ST_TO_ADDR
56279: GO 56301
// result := SortListByListDesc ( buildings , tmp ) ;
56281: LD_ADDR_VAR 0 3
56285: PUSH
56286: LD_VAR 0 1
56290: PPUSH
56291: LD_VAR 0 5
56295: PPUSH
56296: CALL_OW 77
56300: ST_TO_ADDR
// end ;
56301: LD_VAR 0 3
56305: RET
// export function SortByClass ( units , class ) ; var un ; begin
56306: LD_INT 0
56308: PPUSH
56309: PPUSH
// if not units or not class then
56310: LD_VAR 0 1
56314: NOT
56315: IFTRUE 56324
56317: PUSH
56318: LD_VAR 0 2
56322: NOT
56323: OR
56324: IFFALSE 56328
// exit ;
56326: GO 56423
// result := [ ] ;
56328: LD_ADDR_VAR 0 3
56332: PUSH
56333: EMPTY
56334: ST_TO_ADDR
// for un in units do
56335: LD_ADDR_VAR 0 4
56339: PUSH
56340: LD_VAR 0 1
56344: PUSH
56345: FOR_IN
56346: IFFALSE 56421
// if GetClass ( un ) = class then
56348: LD_VAR 0 4
56352: PPUSH
56353: CALL_OW 257
56357: PUSH
56358: LD_VAR 0 2
56362: EQUAL
56363: IFFALSE 56390
// result := Insert ( result , 1 , un ) else
56365: LD_ADDR_VAR 0 3
56369: PUSH
56370: LD_VAR 0 3
56374: PPUSH
56375: LD_INT 1
56377: PPUSH
56378: LD_VAR 0 4
56382: PPUSH
56383: CALL_OW 2
56387: ST_TO_ADDR
56388: GO 56419
// result := Replace ( result , result + 1 , un ) ;
56390: LD_ADDR_VAR 0 3
56394: PUSH
56395: LD_VAR 0 3
56399: PPUSH
56400: LD_VAR 0 3
56404: PUSH
56405: LD_INT 1
56407: PLUS
56408: PPUSH
56409: LD_VAR 0 4
56413: PPUSH
56414: CALL_OW 1
56418: ST_TO_ADDR
56419: GO 56345
56421: POP
56422: POP
// end ;
56423: LD_VAR 0 3
56427: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
56428: LD_INT 0
56430: PPUSH
56431: PPUSH
56432: PPUSH
56433: PPUSH
56434: PPUSH
56435: PPUSH
56436: PPUSH
// result := [ ] ;
56437: LD_ADDR_VAR 0 4
56441: PUSH
56442: EMPTY
56443: ST_TO_ADDR
// if x - r < 0 then
56444: LD_VAR 0 1
56448: PUSH
56449: LD_VAR 0 3
56453: MINUS
56454: PUSH
56455: LD_INT 0
56457: LESS
56458: IFFALSE 56470
// min_x := 0 else
56460: LD_ADDR_VAR 0 8
56464: PUSH
56465: LD_INT 0
56467: ST_TO_ADDR
56468: GO 56486
// min_x := x - r ;
56470: LD_ADDR_VAR 0 8
56474: PUSH
56475: LD_VAR 0 1
56479: PUSH
56480: LD_VAR 0 3
56484: MINUS
56485: ST_TO_ADDR
// if y - r < 0 then
56486: LD_VAR 0 2
56490: PUSH
56491: LD_VAR 0 3
56495: MINUS
56496: PUSH
56497: LD_INT 0
56499: LESS
56500: IFFALSE 56512
// min_y := 0 else
56502: LD_ADDR_VAR 0 7
56506: PUSH
56507: LD_INT 0
56509: ST_TO_ADDR
56510: GO 56528
// min_y := y - r ;
56512: LD_ADDR_VAR 0 7
56516: PUSH
56517: LD_VAR 0 2
56521: PUSH
56522: LD_VAR 0 3
56526: MINUS
56527: ST_TO_ADDR
// max_x := x + r ;
56528: LD_ADDR_VAR 0 9
56532: PUSH
56533: LD_VAR 0 1
56537: PUSH
56538: LD_VAR 0 3
56542: PLUS
56543: ST_TO_ADDR
// max_y := y + r ;
56544: LD_ADDR_VAR 0 10
56548: PUSH
56549: LD_VAR 0 2
56553: PUSH
56554: LD_VAR 0 3
56558: PLUS
56559: ST_TO_ADDR
// for _x = min_x to max_x do
56560: LD_ADDR_VAR 0 5
56564: PUSH
56565: DOUBLE
56566: LD_VAR 0 8
56570: DEC
56571: ST_TO_ADDR
56572: LD_VAR 0 9
56576: PUSH
56577: FOR_TO
56578: IFFALSE 56679
// for _y = min_y to max_y do
56580: LD_ADDR_VAR 0 6
56584: PUSH
56585: DOUBLE
56586: LD_VAR 0 7
56590: DEC
56591: ST_TO_ADDR
56592: LD_VAR 0 10
56596: PUSH
56597: FOR_TO
56598: IFFALSE 56675
// begin if not ValidHex ( _x , _y ) then
56600: LD_VAR 0 5
56604: PPUSH
56605: LD_VAR 0 6
56609: PPUSH
56610: CALL_OW 488
56614: NOT
56615: IFFALSE 56619
// continue ;
56617: GO 56597
// if GetResourceTypeXY ( _x , _y ) then
56619: LD_VAR 0 5
56623: PPUSH
56624: LD_VAR 0 6
56628: PPUSH
56629: CALL_OW 283
56633: IFFALSE 56673
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56635: LD_ADDR_VAR 0 4
56639: PUSH
56640: LD_VAR 0 4
56644: PPUSH
56645: LD_VAR 0 4
56649: PUSH
56650: LD_INT 1
56652: PLUS
56653: PPUSH
56654: LD_VAR 0 5
56658: PUSH
56659: LD_VAR 0 6
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PPUSH
56668: CALL_OW 1
56672: ST_TO_ADDR
// end ;
56673: GO 56597
56675: POP
56676: POP
56677: GO 56577
56679: POP
56680: POP
// end ;
56681: LD_VAR 0 4
56685: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56686: LD_INT 0
56688: PPUSH
56689: PPUSH
56690: PPUSH
56691: PPUSH
56692: PPUSH
56693: PPUSH
56694: PPUSH
56695: PPUSH
// if not units then
56696: LD_VAR 0 1
56700: NOT
56701: IFFALSE 56705
// exit ;
56703: GO 57237
// result := UnitFilter ( units , [ f_ok ] ) ;
56705: LD_ADDR_VAR 0 3
56709: PUSH
56710: LD_VAR 0 1
56714: PPUSH
56715: LD_INT 50
56717: PUSH
56718: EMPTY
56719: LIST
56720: PPUSH
56721: CALL_OW 72
56725: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56726: LD_ADDR_VAR 0 8
56730: PUSH
56731: LD_VAR 0 1
56735: PUSH
56736: LD_INT 1
56738: ARRAY
56739: PPUSH
56740: CALL_OW 255
56744: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56745: LD_ADDR_VAR 0 10
56749: PUSH
56750: LD_INT 29
56752: PUSH
56753: LD_INT 91
56755: PUSH
56756: LD_INT 49
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// if not result then
56764: LD_VAR 0 3
56768: NOT
56769: IFFALSE 56773
// exit ;
56771: GO 57237
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56773: LD_ADDR_VAR 0 5
56777: PUSH
56778: LD_INT 81
56780: PUSH
56781: LD_VAR 0 8
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PPUSH
56790: CALL_OW 69
56794: ST_TO_ADDR
// for i in result do
56795: LD_ADDR_VAR 0 4
56799: PUSH
56800: LD_VAR 0 3
56804: PUSH
56805: FOR_IN
56806: IFFALSE 57235
// begin tag := GetTag ( i ) + 1 ;
56808: LD_ADDR_VAR 0 9
56812: PUSH
56813: LD_VAR 0 4
56817: PPUSH
56818: CALL_OW 110
56822: PUSH
56823: LD_INT 1
56825: PLUS
56826: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
56827: LD_ADDR_VAR 0 7
56831: PUSH
56832: LD_VAR 0 4
56836: PPUSH
56837: CALL_OW 250
56841: PPUSH
56842: LD_VAR 0 4
56846: PPUSH
56847: CALL_OW 251
56851: PPUSH
56852: LD_INT 4
56854: PPUSH
56855: CALL 56428 0 3
56859: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
56860: LD_VAR 0 4
56864: PPUSH
56865: CALL_OW 247
56869: PUSH
56870: LD_INT 2
56872: EQUAL
56873: IFFALSE 56885
56875: PUSH
56876: LD_VAR 0 7
56880: PUSH
56881: LD_INT 2
56883: GREATER
56884: AND
56885: IFFALSE 56905
56887: PUSH
56888: LD_VAR 0 4
56892: PPUSH
56893: CALL_OW 264
56897: PUSH
56898: LD_VAR 0 10
56902: IN
56903: NOT
56904: AND
56905: IFFALSE 56944
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56907: LD_VAR 0 4
56911: PPUSH
56912: LD_VAR 0 7
56916: PUSH
56917: LD_INT 1
56919: ARRAY
56920: PUSH
56921: LD_INT 1
56923: ARRAY
56924: PPUSH
56925: LD_VAR 0 7
56929: PUSH
56930: LD_INT 1
56932: ARRAY
56933: PUSH
56934: LD_INT 2
56936: ARRAY
56937: PPUSH
56938: CALL_OW 116
56942: GO 57233
// if path > tag then
56944: LD_VAR 0 2
56948: PUSH
56949: LD_VAR 0 9
56953: GREATER
56954: IFFALSE 57162
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
56956: LD_ADDR_VAR 0 6
56960: PUSH
56961: LD_VAR 0 5
56965: PPUSH
56966: LD_INT 91
56968: PUSH
56969: LD_VAR 0 4
56973: PUSH
56974: LD_INT 8
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: PPUSH
56982: CALL_OW 72
56986: ST_TO_ADDR
// if nearEnemy then
56987: LD_VAR 0 6
56991: IFFALSE 57060
// begin if GetWeapon ( i ) = ru_time_lapser then
56993: LD_VAR 0 4
56997: PPUSH
56998: CALL_OW 264
57002: PUSH
57003: LD_INT 49
57005: EQUAL
57006: IFFALSE 57034
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57008: LD_VAR 0 4
57012: PPUSH
57013: LD_VAR 0 6
57017: PPUSH
57018: LD_VAR 0 4
57022: PPUSH
57023: CALL_OW 74
57027: PPUSH
57028: CALL_OW 112
57032: GO 57058
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57034: LD_VAR 0 4
57038: PPUSH
57039: LD_VAR 0 6
57043: PPUSH
57044: LD_VAR 0 4
57048: PPUSH
57049: CALL_OW 74
57053: PPUSH
57054: CALL 58318 0 2
// end else
57058: GO 57160
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57060: LD_VAR 0 4
57064: PPUSH
57065: LD_VAR 0 2
57069: PUSH
57070: LD_VAR 0 9
57074: ARRAY
57075: PUSH
57076: LD_INT 1
57078: ARRAY
57079: PPUSH
57080: LD_VAR 0 2
57084: PUSH
57085: LD_VAR 0 9
57089: ARRAY
57090: PUSH
57091: LD_INT 2
57093: ARRAY
57094: PPUSH
57095: CALL_OW 297
57099: PUSH
57100: LD_INT 6
57102: GREATER
57103: IFFALSE 57146
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57105: LD_VAR 0 4
57109: PPUSH
57110: LD_VAR 0 2
57114: PUSH
57115: LD_VAR 0 9
57119: ARRAY
57120: PUSH
57121: LD_INT 1
57123: ARRAY
57124: PPUSH
57125: LD_VAR 0 2
57129: PUSH
57130: LD_VAR 0 9
57134: ARRAY
57135: PUSH
57136: LD_INT 2
57138: ARRAY
57139: PPUSH
57140: CALL_OW 114
57144: GO 57160
// SetTag ( i , tag ) ;
57146: LD_VAR 0 4
57150: PPUSH
57151: LD_VAR 0 9
57155: PPUSH
57156: CALL_OW 109
// end else
57160: GO 57233
// if enemy then
57162: LD_VAR 0 5
57166: IFFALSE 57233
// begin if GetWeapon ( i ) = ru_time_lapser then
57168: LD_VAR 0 4
57172: PPUSH
57173: CALL_OW 264
57177: PUSH
57178: LD_INT 49
57180: EQUAL
57181: IFFALSE 57209
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57183: LD_VAR 0 4
57187: PPUSH
57188: LD_VAR 0 5
57192: PPUSH
57193: LD_VAR 0 4
57197: PPUSH
57198: CALL_OW 74
57202: PPUSH
57203: CALL_OW 112
57207: GO 57233
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57209: LD_VAR 0 4
57213: PPUSH
57214: LD_VAR 0 5
57218: PPUSH
57219: LD_VAR 0 4
57223: PPUSH
57224: CALL_OW 74
57228: PPUSH
57229: CALL 58318 0 2
// end ; end ;
57233: GO 56805
57235: POP
57236: POP
// end ;
57237: LD_VAR 0 3
57241: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57242: LD_INT 0
57244: PPUSH
57245: PPUSH
57246: PPUSH
// if not unit or IsInUnit ( unit ) then
57247: LD_VAR 0 1
57251: NOT
57252: IFTRUE 57265
57254: PUSH
57255: LD_VAR 0 1
57259: PPUSH
57260: CALL_OW 310
57264: OR
57265: IFFALSE 57269
// exit ;
57267: GO 57360
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57269: LD_ADDR_VAR 0 4
57273: PUSH
57274: LD_VAR 0 1
57278: PPUSH
57279: CALL_OW 250
57283: PPUSH
57284: LD_VAR 0 2
57288: PPUSH
57289: LD_INT 1
57291: PPUSH
57292: CALL_OW 272
57296: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57297: LD_ADDR_VAR 0 5
57301: PUSH
57302: LD_VAR 0 1
57306: PPUSH
57307: CALL_OW 251
57311: PPUSH
57312: LD_VAR 0 2
57316: PPUSH
57317: LD_INT 1
57319: PPUSH
57320: CALL_OW 273
57324: ST_TO_ADDR
// if ValidHex ( x , y ) then
57325: LD_VAR 0 4
57329: PPUSH
57330: LD_VAR 0 5
57334: PPUSH
57335: CALL_OW 488
57339: IFFALSE 57360
// ComTurnXY ( unit , x , y ) ;
57341: LD_VAR 0 1
57345: PPUSH
57346: LD_VAR 0 4
57350: PPUSH
57351: LD_VAR 0 5
57355: PPUSH
57356: CALL_OW 118
// end ;
57360: LD_VAR 0 3
57364: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57365: LD_INT 0
57367: PPUSH
57368: PPUSH
// result := false ;
57369: LD_ADDR_VAR 0 3
57373: PUSH
57374: LD_INT 0
57376: ST_TO_ADDR
// if not units then
57377: LD_VAR 0 2
57381: NOT
57382: IFFALSE 57386
// exit ;
57384: GO 57431
// for i in units do
57386: LD_ADDR_VAR 0 4
57390: PUSH
57391: LD_VAR 0 2
57395: PUSH
57396: FOR_IN
57397: IFFALSE 57429
// if See ( side , i ) then
57399: LD_VAR 0 1
57403: PPUSH
57404: LD_VAR 0 4
57408: PPUSH
57409: CALL_OW 292
57413: IFFALSE 57427
// begin result := true ;
57415: LD_ADDR_VAR 0 3
57419: PUSH
57420: LD_INT 1
57422: ST_TO_ADDR
// exit ;
57423: POP
57424: POP
57425: GO 57431
// end ;
57427: GO 57396
57429: POP
57430: POP
// end ;
57431: LD_VAR 0 3
57435: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
57436: LD_INT 0
57438: PPUSH
57439: PPUSH
57440: PPUSH
57441: PPUSH
// if not unit or not points then
57442: LD_VAR 0 1
57446: NOT
57447: IFTRUE 57456
57449: PUSH
57450: LD_VAR 0 2
57454: NOT
57455: OR
57456: IFFALSE 57460
// exit ;
57458: GO 57550
// dist := 99999 ;
57460: LD_ADDR_VAR 0 5
57464: PUSH
57465: LD_INT 99999
57467: ST_TO_ADDR
// for i in points do
57468: LD_ADDR_VAR 0 4
57472: PUSH
57473: LD_VAR 0 2
57477: PUSH
57478: FOR_IN
57479: IFFALSE 57548
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
57481: LD_ADDR_VAR 0 6
57485: PUSH
57486: LD_VAR 0 1
57490: PPUSH
57491: LD_VAR 0 4
57495: PUSH
57496: LD_INT 1
57498: ARRAY
57499: PPUSH
57500: LD_VAR 0 4
57504: PUSH
57505: LD_INT 2
57507: ARRAY
57508: PPUSH
57509: CALL_OW 297
57513: ST_TO_ADDR
// if tmpDist < dist then
57514: LD_VAR 0 6
57518: PUSH
57519: LD_VAR 0 5
57523: LESS
57524: IFFALSE 57546
// begin result := i ;
57526: LD_ADDR_VAR 0 3
57530: PUSH
57531: LD_VAR 0 4
57535: ST_TO_ADDR
// dist := tmpDist ;
57536: LD_ADDR_VAR 0 5
57540: PUSH
57541: LD_VAR 0 6
57545: ST_TO_ADDR
// end ; end ;
57546: GO 57478
57548: POP
57549: POP
// end ;
57550: LD_VAR 0 3
57554: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57555: LD_INT 0
57557: PPUSH
// uc_side := side ;
57558: LD_ADDR_OWVAR 20
57562: PUSH
57563: LD_VAR 0 1
57567: ST_TO_ADDR
// uc_nation := 3 ;
57568: LD_ADDR_OWVAR 21
57572: PUSH
57573: LD_INT 3
57575: ST_TO_ADDR
// vc_chassis := 25 ;
57576: LD_ADDR_OWVAR 37
57580: PUSH
57581: LD_INT 25
57583: ST_TO_ADDR
// vc_engine := engine_siberite ;
57584: LD_ADDR_OWVAR 39
57588: PUSH
57589: LD_INT 3
57591: ST_TO_ADDR
// vc_control := control_computer ;
57592: LD_ADDR_OWVAR 38
57596: PUSH
57597: LD_INT 3
57599: ST_TO_ADDR
// vc_weapon := 59 ;
57600: LD_ADDR_OWVAR 40
57604: PUSH
57605: LD_INT 59
57607: ST_TO_ADDR
// result := CreateVehicle ;
57608: LD_ADDR_VAR 0 5
57612: PUSH
57613: CALL_OW 45
57617: ST_TO_ADDR
// SetDir ( result , d ) ;
57618: LD_VAR 0 5
57622: PPUSH
57623: LD_VAR 0 4
57627: PPUSH
57628: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57632: LD_VAR 0 5
57636: PPUSH
57637: LD_VAR 0 2
57641: PPUSH
57642: LD_VAR 0 3
57646: PPUSH
57647: LD_INT 0
57649: PPUSH
57650: CALL_OW 48
// end ;
57654: LD_VAR 0 5
57658: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57659: LD_INT 0
57661: PPUSH
57662: PPUSH
57663: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57664: LD_ADDR_VAR 0 2
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 0
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57687: LD_VAR 0 1
57691: NOT
57692: IFTRUE 57725
57694: PUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: CALL_OW 264
57704: PUSH
57705: LD_INT 12
57707: PUSH
57708: LD_INT 51
57710: PUSH
57711: LD_INT 32
57713: PUSH
57714: LD_INT 89
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: IN
57723: NOT
57724: OR
57725: IFFALSE 57729
// exit ;
57727: GO 57827
// for i := 1 to 3 do
57729: LD_ADDR_VAR 0 3
57733: PUSH
57734: DOUBLE
57735: LD_INT 1
57737: DEC
57738: ST_TO_ADDR
57739: LD_INT 3
57741: PUSH
57742: FOR_TO
57743: IFFALSE 57825
// begin tmp := GetCargo ( cargo , i ) ;
57745: LD_ADDR_VAR 0 4
57749: PUSH
57750: LD_VAR 0 1
57754: PPUSH
57755: LD_VAR 0 3
57759: PPUSH
57760: CALL_OW 289
57764: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57765: LD_ADDR_VAR 0 2
57769: PUSH
57770: LD_VAR 0 2
57774: PPUSH
57775: LD_VAR 0 3
57779: PPUSH
57780: LD_VAR 0 4
57784: PPUSH
57785: CALL_OW 1
57789: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57790: LD_ADDR_VAR 0 2
57794: PUSH
57795: LD_VAR 0 2
57799: PPUSH
57800: LD_INT 4
57802: PPUSH
57803: LD_VAR 0 2
57807: PUSH
57808: LD_INT 4
57810: ARRAY
57811: PUSH
57812: LD_VAR 0 4
57816: PLUS
57817: PPUSH
57818: CALL_OW 1
57822: ST_TO_ADDR
// end ;
57823: GO 57742
57825: POP
57826: POP
// end ;
57827: LD_VAR 0 2
57831: RET
// export function Length ( array ) ; begin
57832: LD_INT 0
57834: PPUSH
// result := array + 0 ;
57835: LD_ADDR_VAR 0 2
57839: PUSH
57840: LD_VAR 0 1
57844: PUSH
57845: LD_INT 0
57847: PLUS
57848: ST_TO_ADDR
// end ;
57849: LD_VAR 0 2
57853: RET
// export function PrepareArray ( array ) ; begin
57854: LD_INT 0
57856: PPUSH
// result := array diff 0 ;
57857: LD_ADDR_VAR 0 2
57861: PUSH
57862: LD_VAR 0 1
57866: PUSH
57867: LD_INT 0
57869: DIFF
57870: ST_TO_ADDR
// if not result [ 1 ] then
57871: LD_VAR 0 2
57875: PUSH
57876: LD_INT 1
57878: ARRAY
57879: NOT
57880: IFFALSE 57900
// result := Delete ( result , 1 ) ;
57882: LD_ADDR_VAR 0 2
57886: PUSH
57887: LD_VAR 0 2
57891: PPUSH
57892: LD_INT 1
57894: PPUSH
57895: CALL_OW 3
57899: ST_TO_ADDR
// end ;
57900: LD_VAR 0 2
57904: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
57905: LD_INT 0
57907: PPUSH
57908: PPUSH
57909: PPUSH
57910: PPUSH
// sibRocketRange := 25 ;
57911: LD_ADDR_VAR 0 6
57915: PUSH
57916: LD_INT 25
57918: ST_TO_ADDR
// result := false ;
57919: LD_ADDR_VAR 0 4
57923: PUSH
57924: LD_INT 0
57926: ST_TO_ADDR
// for i := 0 to 5 do
57927: LD_ADDR_VAR 0 5
57931: PUSH
57932: DOUBLE
57933: LD_INT 0
57935: DEC
57936: ST_TO_ADDR
57937: LD_INT 5
57939: PUSH
57940: FOR_TO
57941: IFFALSE 58008
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
57943: LD_VAR 0 1
57947: PPUSH
57948: LD_VAR 0 5
57952: PPUSH
57953: LD_VAR 0 6
57957: PPUSH
57958: CALL_OW 272
57962: PPUSH
57963: LD_VAR 0 2
57967: PPUSH
57968: LD_VAR 0 5
57972: PPUSH
57973: LD_VAR 0 6
57977: PPUSH
57978: CALL_OW 273
57982: PPUSH
57983: LD_VAR 0 3
57987: PPUSH
57988: CALL_OW 309
57992: IFFALSE 58006
// begin result := true ;
57994: LD_ADDR_VAR 0 4
57998: PUSH
57999: LD_INT 1
58001: ST_TO_ADDR
// exit ;
58002: POP
58003: POP
58004: GO 58010
// end ;
58006: GO 57940
58008: POP
58009: POP
// end ;
58010: LD_VAR 0 4
58014: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
58015: LD_INT 0
58017: PPUSH
58018: PPUSH
58019: PPUSH
// if btype = b_depot then
58020: LD_VAR 0 2
58024: PUSH
58025: LD_INT 0
58027: EQUAL
58028: IFFALSE 58040
// begin result := true ;
58030: LD_ADDR_VAR 0 3
58034: PUSH
58035: LD_INT 1
58037: ST_TO_ADDR
// exit ;
58038: GO 58160
// end ; pom := GetBase ( depot ) ;
58040: LD_ADDR_VAR 0 4
58044: PUSH
58045: LD_VAR 0 1
58049: PPUSH
58050: CALL_OW 274
58054: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
58055: LD_ADDR_VAR 0 5
58059: PUSH
58060: LD_VAR 0 2
58064: PPUSH
58065: LD_VAR 0 1
58069: PPUSH
58070: CALL_OW 248
58074: PPUSH
58075: CALL_OW 450
58079: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
58080: LD_ADDR_VAR 0 3
58084: PUSH
58085: LD_VAR 0 4
58089: PPUSH
58090: LD_INT 1
58092: PPUSH
58093: CALL_OW 275
58097: PUSH
58098: LD_VAR 0 5
58102: PUSH
58103: LD_INT 1
58105: ARRAY
58106: GREATEREQUAL
58107: IFFALSE 58133
58109: PUSH
58110: LD_VAR 0 4
58114: PPUSH
58115: LD_INT 2
58117: PPUSH
58118: CALL_OW 275
58122: PUSH
58123: LD_VAR 0 5
58127: PUSH
58128: LD_INT 2
58130: ARRAY
58131: GREATEREQUAL
58132: AND
58133: IFFALSE 58159
58135: PUSH
58136: LD_VAR 0 4
58140: PPUSH
58141: LD_INT 3
58143: PPUSH
58144: CALL_OW 275
58148: PUSH
58149: LD_VAR 0 5
58153: PUSH
58154: LD_INT 3
58156: ARRAY
58157: GREATEREQUAL
58158: AND
58159: ST_TO_ADDR
// end ;
58160: LD_VAR 0 3
58164: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58165: LD_INT 0
58167: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58168: LD_VAR 0 1
58172: PPUSH
58173: LD_VAR 0 2
58177: PPUSH
58178: LD_INT 0
58180: PPUSH
58181: LD_INT 0
58183: PPUSH
58184: LD_INT 1
58186: PPUSH
58187: LD_INT 0
58189: PPUSH
58190: CALL_OW 587
// end ;
58194: LD_VAR 0 3
58198: RET
// export function CenterOnNow ( unit ) ; begin
58199: LD_INT 0
58201: PPUSH
// result := IsInUnit ( unit ) ;
58202: LD_ADDR_VAR 0 2
58206: PUSH
58207: LD_VAR 0 1
58211: PPUSH
58212: CALL_OW 310
58216: ST_TO_ADDR
// if not result then
58217: LD_VAR 0 2
58221: NOT
58222: IFFALSE 58234
// result := unit ;
58224: LD_ADDR_VAR 0 2
58228: PUSH
58229: LD_VAR 0 1
58233: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58234: LD_VAR 0 1
58238: PPUSH
58239: CALL_OW 87
// end ;
58243: LD_VAR 0 2
58247: RET
// export function ComMoveHex ( unit , hex ) ; begin
58248: LD_INT 0
58250: PPUSH
// if not hex then
58251: LD_VAR 0 2
58255: NOT
58256: IFFALSE 58260
// exit ;
58258: GO 58313
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58260: LD_VAR 0 2
58264: PUSH
58265: LD_INT 1
58267: ARRAY
58268: PPUSH
58269: LD_VAR 0 2
58273: PUSH
58274: LD_INT 2
58276: ARRAY
58277: PPUSH
58278: CALL_OW 428
58282: IFFALSE 58286
// exit ;
58284: GO 58313
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58286: LD_VAR 0 1
58290: PPUSH
58291: LD_VAR 0 2
58295: PUSH
58296: LD_INT 1
58298: ARRAY
58299: PPUSH
58300: LD_VAR 0 2
58304: PUSH
58305: LD_INT 2
58307: ARRAY
58308: PPUSH
58309: CALL_OW 111
// end ;
58313: LD_VAR 0 3
58317: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58318: LD_INT 0
58320: PPUSH
58321: PPUSH
58322: PPUSH
// if not unit or not enemy then
58323: LD_VAR 0 1
58327: NOT
58328: IFTRUE 58337
58330: PUSH
58331: LD_VAR 0 2
58335: NOT
58336: OR
58337: IFFALSE 58341
// exit ;
58339: GO 58467
// x := GetX ( enemy ) ;
58341: LD_ADDR_VAR 0 4
58345: PUSH
58346: LD_VAR 0 2
58350: PPUSH
58351: CALL_OW 250
58355: ST_TO_ADDR
// y := GetY ( enemy ) ;
58356: LD_ADDR_VAR 0 5
58360: PUSH
58361: LD_VAR 0 2
58365: PPUSH
58366: CALL_OW 251
58370: ST_TO_ADDR
// if ValidHex ( x , y ) then
58371: LD_VAR 0 4
58375: PPUSH
58376: LD_VAR 0 5
58380: PPUSH
58381: CALL_OW 488
58385: IFFALSE 58467
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58387: LD_VAR 0 2
58391: PPUSH
58392: CALL_OW 247
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 2
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: IN
58407: IFTRUE 58430
58409: PUSH
58410: LD_VAR 0 1
58414: PPUSH
58415: CALL_OW 255
58419: PPUSH
58420: LD_VAR 0 2
58424: PPUSH
58425: CALL_OW 292
58429: OR
58430: IFFALSE 58448
// ComAttackUnit ( unit , enemy ) else
58432: LD_VAR 0 1
58436: PPUSH
58437: LD_VAR 0 2
58441: PPUSH
58442: CALL_OW 115
58446: GO 58467
// ComAgressiveMove ( unit , x , y ) ;
58448: LD_VAR 0 1
58452: PPUSH
58453: LD_VAR 0 4
58457: PPUSH
58458: LD_VAR 0 5
58462: PPUSH
58463: CALL_OW 114
// end ;
58467: LD_VAR 0 3
58471: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58472: LD_INT 0
58474: PPUSH
58475: PPUSH
58476: PPUSH
// list := AreaToList ( area , 0 ) ;
58477: LD_ADDR_VAR 0 5
58481: PUSH
58482: LD_VAR 0 1
58486: PPUSH
58487: LD_INT 0
58489: PPUSH
58490: CALL_OW 517
58494: ST_TO_ADDR
// if not list then
58495: LD_VAR 0 5
58499: NOT
58500: IFFALSE 58504
// exit ;
58502: GO 58634
// if all then
58504: LD_VAR 0 2
58508: IFFALSE 58596
// begin for i := 1 to list [ 1 ] do
58510: LD_ADDR_VAR 0 4
58514: PUSH
58515: DOUBLE
58516: LD_INT 1
58518: DEC
58519: ST_TO_ADDR
58520: LD_VAR 0 5
58524: PUSH
58525: LD_INT 1
58527: ARRAY
58528: PUSH
58529: FOR_TO
58530: IFFALSE 58592
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58532: LD_ADDR_VAR 0 3
58536: PUSH
58537: LD_VAR 0 3
58541: PPUSH
58542: LD_VAR 0 3
58546: PUSH
58547: LD_INT 1
58549: PLUS
58550: PPUSH
58551: LD_VAR 0 5
58555: PUSH
58556: LD_INT 1
58558: ARRAY
58559: PUSH
58560: LD_VAR 0 4
58564: ARRAY
58565: PUSH
58566: LD_VAR 0 5
58570: PUSH
58571: LD_INT 2
58573: ARRAY
58574: PUSH
58575: LD_VAR 0 4
58579: ARRAY
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PPUSH
58585: CALL_OW 1
58589: ST_TO_ADDR
58590: GO 58529
58592: POP
58593: POP
// exit ;
58594: GO 58634
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
58596: LD_ADDR_VAR 0 3
58600: PUSH
58601: LD_VAR 0 5
58605: PUSH
58606: LD_INT 1
58608: ARRAY
58609: PUSH
58610: LD_INT 1
58612: ARRAY
58613: PUSH
58614: LD_VAR 0 5
58618: PUSH
58619: LD_INT 2
58621: ARRAY
58622: PUSH
58623: LD_INT 1
58625: ARRAY
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: EMPTY
58632: LIST
58633: ST_TO_ADDR
// end ;
58634: LD_VAR 0 3
58638: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
58639: LD_INT 0
58641: PPUSH
58642: PPUSH
// list := AreaToList ( area , 0 ) ;
58643: LD_ADDR_VAR 0 4
58647: PUSH
58648: LD_VAR 0 1
58652: PPUSH
58653: LD_INT 0
58655: PPUSH
58656: CALL_OW 517
58660: ST_TO_ADDR
// if not list then
58661: LD_VAR 0 4
58665: NOT
58666: IFFALSE 58670
// exit ;
58668: GO 58711
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
58670: LD_ADDR_VAR 0 3
58674: PUSH
58675: LD_VAR 0 4
58679: PUSH
58680: LD_INT 1
58682: ARRAY
58683: PUSH
58684: LD_INT 1
58686: ARRAY
58687: PUSH
58688: LD_VAR 0 4
58692: PUSH
58693: LD_INT 2
58695: ARRAY
58696: PUSH
58697: LD_INT 1
58699: ARRAY
58700: PUSH
58701: LD_VAR 0 2
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// end ;
58711: LD_VAR 0 3
58715: RET
// export function First ( array ) ; begin
58716: LD_INT 0
58718: PPUSH
// if not array then
58719: LD_VAR 0 1
58723: NOT
58724: IFFALSE 58728
// exit ;
58726: GO 58742
// result := array [ 1 ] ;
58728: LD_ADDR_VAR 0 2
58732: PUSH
58733: LD_VAR 0 1
58737: PUSH
58738: LD_INT 1
58740: ARRAY
58741: ST_TO_ADDR
// end ;
58742: LD_VAR 0 2
58746: RET
// export function Last ( array ) ; begin
58747: LD_INT 0
58749: PPUSH
// if not array then
58750: LD_VAR 0 1
58754: NOT
58755: IFFALSE 58759
// exit ;
58757: GO 58775
// result := array [ array ] ;
58759: LD_ADDR_VAR 0 2
58763: PUSH
58764: LD_VAR 0 1
58768: PUSH
58769: LD_VAR 0 1
58773: ARRAY
58774: ST_TO_ADDR
// end ;
58775: LD_VAR 0 2
58779: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
58780: LD_INT 0
58782: PPUSH
58783: PPUSH
// result := [ ] ;
58784: LD_ADDR_VAR 0 5
58788: PUSH
58789: EMPTY
58790: ST_TO_ADDR
// if not array then
58791: LD_VAR 0 1
58795: NOT
58796: IFFALSE 58800
// exit ;
58798: GO 58912
// for i := 1 to array do
58800: LD_ADDR_VAR 0 6
58804: PUSH
58805: DOUBLE
58806: LD_INT 1
58808: DEC
58809: ST_TO_ADDR
58810: LD_VAR 0 1
58814: PUSH
58815: FOR_TO
58816: IFFALSE 58910
// if array [ i ] [ index ] = value then
58818: LD_VAR 0 1
58822: PUSH
58823: LD_VAR 0 6
58827: ARRAY
58828: PUSH
58829: LD_VAR 0 2
58833: ARRAY
58834: PUSH
58835: LD_VAR 0 3
58839: EQUAL
58840: IFFALSE 58908
// begin if indexColumn then
58842: LD_VAR 0 4
58846: IFFALSE 58882
// result := Join ( result , array [ i ] [ indexColumn ] ) else
58848: LD_ADDR_VAR 0 5
58852: PUSH
58853: LD_VAR 0 5
58857: PPUSH
58858: LD_VAR 0 1
58862: PUSH
58863: LD_VAR 0 6
58867: ARRAY
58868: PUSH
58869: LD_VAR 0 4
58873: ARRAY
58874: PPUSH
58875: CALL 53920 0 2
58879: ST_TO_ADDR
58880: GO 58908
// result := Join ( result , array [ i ] ) ;
58882: LD_ADDR_VAR 0 5
58886: PUSH
58887: LD_VAR 0 5
58891: PPUSH
58892: LD_VAR 0 1
58896: PUSH
58897: LD_VAR 0 6
58901: ARRAY
58902: PPUSH
58903: CALL 53920 0 2
58907: ST_TO_ADDR
// end ;
58908: GO 58815
58910: POP
58911: POP
// end ;
58912: LD_VAR 0 5
58916: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
58917: LD_INT 0
58919: PPUSH
// if not vehicles or not parkingPoint then
58920: LD_VAR 0 1
58924: NOT
58925: IFTRUE 58934
58927: PUSH
58928: LD_VAR 0 2
58932: NOT
58933: OR
58934: IFFALSE 58938
// exit ;
58936: GO 59036
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
58938: LD_ADDR_VAR 0 1
58942: PUSH
58943: LD_VAR 0 1
58947: PPUSH
58948: LD_INT 50
58950: PUSH
58951: EMPTY
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: LD_INT 92
58959: PUSH
58960: LD_VAR 0 2
58964: PUSH
58965: LD_INT 1
58967: ARRAY
58968: PUSH
58969: LD_VAR 0 2
58973: PUSH
58974: LD_INT 2
58976: ARRAY
58977: PUSH
58978: LD_INT 8
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PPUSH
58995: CALL_OW 72
58999: ST_TO_ADDR
// if not vehicles then
59000: LD_VAR 0 1
59004: NOT
59005: IFFALSE 59009
// exit ;
59007: GO 59036
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59009: LD_VAR 0 1
59013: PPUSH
59014: LD_VAR 0 2
59018: PUSH
59019: LD_INT 1
59021: ARRAY
59022: PPUSH
59023: LD_VAR 0 2
59027: PUSH
59028: LD_INT 2
59030: ARRAY
59031: PPUSH
59032: CALL_OW 111
// end ;
59036: LD_VAR 0 3
59040: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59041: LD_INT 0
59043: PPUSH
59044: PPUSH
59045: PPUSH
// if not side or not area then
59046: LD_VAR 0 1
59050: NOT
59051: IFTRUE 59060
59053: PUSH
59054: LD_VAR 0 2
59058: NOT
59059: OR
59060: IFFALSE 59064
// exit ;
59062: GO 59183
// tmp := AreaToList ( area , 0 ) ;
59064: LD_ADDR_VAR 0 5
59068: PUSH
59069: LD_VAR 0 2
59073: PPUSH
59074: LD_INT 0
59076: PPUSH
59077: CALL_OW 517
59081: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59082: LD_ADDR_VAR 0 4
59086: PUSH
59087: DOUBLE
59088: LD_INT 1
59090: DEC
59091: ST_TO_ADDR
59092: LD_VAR 0 5
59096: PUSH
59097: LD_INT 1
59099: ARRAY
59100: PUSH
59101: FOR_TO
59102: IFFALSE 59181
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59104: LD_VAR 0 5
59108: PUSH
59109: LD_INT 1
59111: ARRAY
59112: PUSH
59113: LD_VAR 0 4
59117: ARRAY
59118: PPUSH
59119: LD_VAR 0 5
59123: PUSH
59124: LD_INT 2
59126: ARRAY
59127: PUSH
59128: LD_VAR 0 4
59132: ARRAY
59133: PPUSH
59134: CALL_OW 351
59138: IFFALSE 59179
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59140: LD_VAR 0 5
59144: PUSH
59145: LD_INT 1
59147: ARRAY
59148: PUSH
59149: LD_VAR 0 4
59153: ARRAY
59154: PPUSH
59155: LD_VAR 0 5
59159: PUSH
59160: LD_INT 2
59162: ARRAY
59163: PUSH
59164: LD_VAR 0 4
59168: ARRAY
59169: PPUSH
59170: LD_VAR 0 1
59174: PPUSH
59175: CALL_OW 244
// end ;
59179: GO 59101
59181: POP
59182: POP
// end ;
59183: LD_VAR 0 3
59187: RET
// export function UniqueArray ( array ) ; var i ; begin
59188: LD_INT 0
59190: PPUSH
59191: PPUSH
// result := [ ] ;
59192: LD_ADDR_VAR 0 2
59196: PUSH
59197: EMPTY
59198: ST_TO_ADDR
// if not array then
59199: LD_VAR 0 1
59203: NOT
59204: IFFALSE 59208
// exit ;
59206: GO 59269
// for i := 1 to array do
59208: LD_ADDR_VAR 0 3
59212: PUSH
59213: DOUBLE
59214: LD_INT 1
59216: DEC
59217: ST_TO_ADDR
59218: LD_VAR 0 1
59222: PUSH
59223: FOR_TO
59224: IFFALSE 59267
// if not array [ i ] in result then
59226: LD_VAR 0 1
59230: PUSH
59231: LD_VAR 0 3
59235: ARRAY
59236: PUSH
59237: LD_VAR 0 2
59241: IN
59242: NOT
59243: IFFALSE 59265
// result := Join ( result , i ) ;
59245: LD_ADDR_VAR 0 2
59249: PUSH
59250: LD_VAR 0 2
59254: PPUSH
59255: LD_VAR 0 3
59259: PPUSH
59260: CALL 53920 0 2
59264: ST_TO_ADDR
59265: GO 59223
59267: POP
59268: POP
// end ; end_of_file
59269: LD_VAR 0 2
59273: RET
// export function SOS_UnitDestroyed ( un ) ; begin
59274: LD_INT 0
59276: PPUSH
// ComRadiation ( un ) ;
59277: LD_VAR 0 1
59281: PPUSH
59282: CALL 60444 0 1
// end ;
59286: LD_VAR 0 2
59290: RET
// export function SOS_UnitKamikazed ( un ) ; begin
59291: LD_INT 0
59293: PPUSH
// ComRadiation ( un ) ;
59294: LD_VAR 0 1
59298: PPUSH
59299: CALL 60444 0 1
// end ;
59303: LD_VAR 0 2
59307: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
59308: LD_INT 0
59310: PPUSH
// end ;
59311: LD_VAR 0 4
59315: RET
// export function SOS_Command ( cmd ) ; begin
59316: LD_INT 0
59318: PPUSH
// end ;
59319: LD_VAR 0 2
59323: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
59324: LD_INT 0
59326: PPUSH
// end ;
59327: LD_VAR 0 6
59331: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
59332: LD_INT 0
59334: PPUSH
59335: PPUSH
59336: PPUSH
59337: PPUSH
59338: PPUSH
// if not vehicle or not factory then
59339: LD_VAR 0 1
59343: NOT
59344: IFTRUE 59353
59346: PUSH
59347: LD_VAR 0 2
59351: NOT
59352: OR
59353: IFFALSE 59357
// exit ;
59355: GO 60019
// weapon := GetWeapon ( vehicle ) ;
59357: LD_ADDR_VAR 0 7
59361: PUSH
59362: LD_VAR 0 1
59366: PPUSH
59367: CALL_OW 264
59371: ST_TO_ADDR
// if weapon = ar_miner then
59372: LD_VAR 0 7
59376: PUSH
59377: LD_INT 81
59379: EQUAL
59380: IFFALSE 59437
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
59382: LD_ADDR_EXP 50
59386: PUSH
59387: LD_EXP 50
59391: PPUSH
59392: LD_EXP 50
59396: PUSH
59397: LD_INT 1
59399: PLUS
59400: PPUSH
59401: LD_VAR 0 1
59405: PPUSH
59406: CALL_OW 1
59410: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59411: LD_ADDR_EXP 51
59415: PUSH
59416: LD_EXP 51
59420: PPUSH
59421: LD_EXP 51
59425: PUSH
59426: LD_INT 1
59428: PLUS
59429: PPUSH
59430: EMPTY
59431: PPUSH
59432: CALL_OW 1
59436: ST_TO_ADDR
// end ; if not factoryWaypoints then
59437: LD_EXP 53
59441: NOT
59442: IFFALSE 59446
// exit ;
59444: GO 60019
// for i := 1 to Count ( factoryWaypoints ) do
59446: LD_ADDR_VAR 0 4
59450: PUSH
59451: DOUBLE
59452: LD_INT 1
59454: DEC
59455: ST_TO_ADDR
59456: LD_EXP 53
59460: PPUSH
59461: CALL 17944 0 1
59465: PUSH
59466: FOR_TO
59467: IFFALSE 60017
// if factoryWaypoints [ i ] [ 2 ] = factory then
59469: LD_EXP 53
59473: PUSH
59474: LD_VAR 0 4
59478: ARRAY
59479: PUSH
59480: LD_INT 2
59482: ARRAY
59483: PUSH
59484: LD_VAR 0 2
59488: EQUAL
59489: IFFALSE 60015
// begin if GetControl ( vehicle ) = control_manual then
59491: LD_VAR 0 1
59495: PPUSH
59496: CALL_OW 263
59500: PUSH
59501: LD_INT 1
59503: EQUAL
59504: IFFALSE 59868
// begin driver := IsDrivenBy ( vehicle ) ;
59506: LD_ADDR_VAR 0 5
59510: PUSH
59511: LD_VAR 0 1
59515: PPUSH
59516: CALL_OW 311
59520: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
59521: LD_VAR 0 5
59525: PUSH
59526: LD_EXP 54
59530: IN
59531: IFTRUE 59545
59533: PUSH
59534: LD_VAR 0 1
59538: PUSH
59539: LD_EXP 54
59543: IN
59544: OR
59545: IFFALSE 59551
// exit ;
59547: POP
59548: POP
59549: GO 60019
// if not HasTask ( driver ) then
59551: LD_VAR 0 5
59555: PPUSH
59556: CALL_OW 314
59560: NOT
59561: IFFALSE 59866
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
59563: LD_ADDR_EXP 54
59567: PUSH
59568: LD_EXP 54
59572: PPUSH
59573: LD_VAR 0 5
59577: PPUSH
59578: CALL 53920 0 2
59582: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
59583: LD_ADDR_EXP 54
59587: PUSH
59588: LD_EXP 54
59592: PPUSH
59593: LD_VAR 0 1
59597: PPUSH
59598: CALL 53920 0 2
59602: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59603: LD_ADDR_VAR 0 6
59607: PUSH
59608: LD_EXP 53
59612: PUSH
59613: LD_VAR 0 4
59617: ARRAY
59618: PUSH
59619: LD_INT 3
59621: ARRAY
59622: PPUSH
59623: LD_EXP 53
59627: PUSH
59628: LD_VAR 0 4
59632: ARRAY
59633: PUSH
59634: LD_INT 4
59636: ARRAY
59637: PPUSH
59638: CALL_OW 428
59642: ST_TO_ADDR
// if hex then
59643: LD_VAR 0 6
59647: IFFALSE 59665
// ComMoveUnit ( driver , hex ) else
59649: LD_VAR 0 5
59653: PPUSH
59654: LD_VAR 0 6
59658: PPUSH
59659: CALL_OW 112
59663: GO 59749
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
59665: LD_VAR 0 1
59669: PPUSH
59670: LD_EXP 53
59674: PUSH
59675: LD_VAR 0 4
59679: ARRAY
59680: PUSH
59681: LD_INT 3
59683: ARRAY
59684: PPUSH
59685: LD_EXP 53
59689: PUSH
59690: LD_VAR 0 4
59694: ARRAY
59695: PUSH
59696: LD_INT 4
59698: ARRAY
59699: PPUSH
59700: CALL_OW 297
59704: PUSH
59705: LD_INT 0
59707: GREATER
59708: IFFALSE 59749
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59710: LD_VAR 0 5
59714: PPUSH
59715: LD_EXP 53
59719: PUSH
59720: LD_VAR 0 4
59724: ARRAY
59725: PUSH
59726: LD_INT 3
59728: ARRAY
59729: PPUSH
59730: LD_EXP 53
59734: PUSH
59735: LD_VAR 0 4
59739: ARRAY
59740: PUSH
59741: LD_INT 4
59743: ARRAY
59744: PPUSH
59745: CALL_OW 111
// AddComExitVehicle ( driver ) ;
59749: LD_VAR 0 5
59753: PPUSH
59754: CALL_OW 181
// if Multiplayer then
59758: LD_OWVAR 4
59762: IFFALSE 59811
// begin repeat wait ( 10 ) ;
59764: LD_INT 10
59766: PPUSH
59767: CALL_OW 67
// until not IsInUnit ( driver ) ;
59771: LD_VAR 0 5
59775: PPUSH
59776: CALL_OW 310
59780: NOT
59781: IFFALSE 59764
// if not HasTask ( driver ) then
59783: LD_VAR 0 5
59787: PPUSH
59788: CALL_OW 314
59792: NOT
59793: IFFALSE 59809
// ComEnterUnit ( driver , factory ) ;
59795: LD_VAR 0 5
59799: PPUSH
59800: LD_VAR 0 2
59804: PPUSH
59805: CALL_OW 120
// end else
59809: GO 59825
// AddComEnterUnit ( driver , factory ) ;
59811: LD_VAR 0 5
59815: PPUSH
59816: LD_VAR 0 2
59820: PPUSH
59821: CALL_OW 180
// wait ( 0 0$1 ) ;
59825: LD_INT 35
59827: PPUSH
59828: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
59832: LD_ADDR_EXP 54
59836: PUSH
59837: LD_EXP 54
59841: PUSH
59842: LD_VAR 0 5
59846: DIFF
59847: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
59848: LD_ADDR_EXP 54
59852: PUSH
59853: LD_EXP 54
59857: PUSH
59858: LD_VAR 0 1
59862: DIFF
59863: ST_TO_ADDR
// break ;
59864: GO 60017
// end ; end else
59866: GO 60015
// if GetControl ( vehicle ) = control_remote then
59868: LD_VAR 0 1
59872: PPUSH
59873: CALL_OW 263
59877: PUSH
59878: LD_INT 2
59880: EQUAL
59881: IFFALSE 59967
// begin wait ( 0 0$2 ) ;
59883: LD_INT 70
59885: PPUSH
59886: CALL_OW 67
// repeat wait ( 10 ) ;
59890: LD_INT 10
59892: PPUSH
59893: CALL_OW 67
// Connect ( vehicle ) ;
59897: LD_VAR 0 1
59901: PPUSH
59902: CALL 24222 0 1
// until IsControledBy ( vehicle ) ;
59906: LD_VAR 0 1
59910: PPUSH
59911: CALL_OW 312
59915: IFFALSE 59890
// wait ( 10 ) ;
59917: LD_INT 10
59919: PPUSH
59920: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59924: LD_VAR 0 1
59928: PPUSH
59929: LD_EXP 53
59933: PUSH
59934: LD_VAR 0 4
59938: ARRAY
59939: PUSH
59940: LD_INT 3
59942: ARRAY
59943: PPUSH
59944: LD_EXP 53
59948: PUSH
59949: LD_VAR 0 4
59953: ARRAY
59954: PUSH
59955: LD_INT 4
59957: ARRAY
59958: PPUSH
59959: CALL_OW 111
// break ;
59963: GO 60017
// end else
59965: GO 60015
// begin wait ( 0 0$3 ) ;
59967: LD_INT 105
59969: PPUSH
59970: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
59974: LD_VAR 0 1
59978: PPUSH
59979: LD_EXP 53
59983: PUSH
59984: LD_VAR 0 4
59988: ARRAY
59989: PUSH
59990: LD_INT 3
59992: ARRAY
59993: PPUSH
59994: LD_EXP 53
59998: PUSH
59999: LD_VAR 0 4
60003: ARRAY
60004: PUSH
60005: LD_INT 4
60007: ARRAY
60008: PPUSH
60009: CALL_OW 111
// break ;
60013: GO 60017
// end ; end ;
60015: GO 59466
60017: POP
60018: POP
// end ;
60019: LD_VAR 0 3
60023: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
60024: LD_INT 0
60026: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
60027: LD_VAR 0 1
60031: PUSH
60032: LD_INT 250
60034: EQUAL
60035: IFFALSE 60052
60037: PUSH
60038: LD_VAR 0 2
60042: PPUSH
60043: CALL_OW 264
60047: PUSH
60048: LD_INT 81
60050: EQUAL
60051: AND
60052: IFFALSE 60073
// MinerPlaceMine ( unit , x , y ) ;
60054: LD_VAR 0 2
60058: PPUSH
60059: LD_VAR 0 4
60063: PPUSH
60064: LD_VAR 0 5
60068: PPUSH
60069: CALL 63419 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
60073: LD_VAR 0 1
60077: PUSH
60078: LD_INT 251
60080: EQUAL
60081: IFFALSE 60098
60083: PUSH
60084: LD_VAR 0 2
60088: PPUSH
60089: CALL_OW 264
60093: PUSH
60094: LD_INT 81
60096: EQUAL
60097: AND
60098: IFFALSE 60119
// MinerDetonateMine ( unit , x , y ) ;
60100: LD_VAR 0 2
60104: PPUSH
60105: LD_VAR 0 4
60109: PPUSH
60110: LD_VAR 0 5
60114: PPUSH
60115: CALL 63826 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
60119: LD_VAR 0 1
60123: PUSH
60124: LD_INT 252
60126: EQUAL
60127: IFFALSE 60144
60129: PUSH
60130: LD_VAR 0 2
60134: PPUSH
60135: CALL_OW 264
60139: PUSH
60140: LD_INT 81
60142: EQUAL
60143: AND
60144: IFFALSE 60165
// MinerCreateMinefield ( unit , x , y ) ;
60146: LD_VAR 0 2
60150: PPUSH
60151: LD_VAR 0 4
60155: PPUSH
60156: LD_VAR 0 5
60160: PPUSH
60161: CALL 64058 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
60165: LD_VAR 0 1
60169: PUSH
60170: LD_INT 253
60172: EQUAL
60173: IFFALSE 60190
60175: PUSH
60176: LD_VAR 0 2
60180: PPUSH
60181: CALL_OW 257
60185: PUSH
60186: LD_INT 5
60188: EQUAL
60189: AND
60190: IFFALSE 60211
// ComBinocular ( unit , x , y ) ;
60192: LD_VAR 0 2
60196: PPUSH
60197: LD_VAR 0 4
60201: PPUSH
60202: LD_VAR 0 5
60206: PPUSH
60207: CALL 64433 0 3
// if selectedUnit then
60211: LD_VAR 0 3
60215: IFFALSE 60275
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
60217: LD_VAR 0 1
60221: PUSH
60222: LD_INT 254
60224: EQUAL
60225: IFFALSE 60242
60227: PUSH
60228: LD_VAR 0 2
60232: PPUSH
60233: CALL_OW 264
60237: PUSH
60238: LD_INT 99
60240: EQUAL
60241: AND
60242: IFFALSE 60259
60244: PUSH
60245: LD_VAR 0 3
60249: PPUSH
60250: CALL_OW 263
60254: PUSH
60255: LD_INT 3
60257: EQUAL
60258: AND
60259: IFFALSE 60275
// HackDestroyVehicle ( unit , selectedUnit ) ;
60261: LD_VAR 0 2
60265: PPUSH
60266: LD_VAR 0 3
60270: PPUSH
60271: CALL 62609 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
60275: LD_VAR 0 1
60279: PUSH
60280: LD_INT 255
60282: EQUAL
60283: IFFALSE 60307
60285: PUSH
60286: LD_VAR 0 2
60290: PPUSH
60291: CALL_OW 264
60295: PUSH
60296: LD_INT 14
60298: PUSH
60299: LD_INT 53
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: IN
60306: AND
60307: IFFALSE 60325
60309: PUSH
60310: LD_VAR 0 4
60314: PPUSH
60315: LD_VAR 0 5
60319: PPUSH
60320: CALL_OW 488
60324: AND
60325: IFFALSE 60349
// CutTreeXYR ( unit , x , y , 12 ) ;
60327: LD_VAR 0 2
60331: PPUSH
60332: LD_VAR 0 4
60336: PPUSH
60337: LD_VAR 0 5
60341: PPUSH
60342: LD_INT 12
60344: PPUSH
60345: CALL 60540 0 4
// if cmd = 256 then
60349: LD_VAR 0 1
60353: PUSH
60354: LD_INT 256
60356: EQUAL
60357: IFFALSE 60378
// SetFactoryWaypoint ( unit , x , y ) ;
60359: LD_VAR 0 2
60363: PPUSH
60364: LD_VAR 0 4
60368: PPUSH
60369: LD_VAR 0 5
60373: PPUSH
60374: CALL 66453 0 3
// if cmd = 257 then
60378: LD_VAR 0 1
60382: PUSH
60383: LD_INT 257
60385: EQUAL
60386: IFFALSE 60407
// SetWarehouseGatheringPoint ( unit , x , y ) ;
60388: LD_VAR 0 2
60392: PPUSH
60393: LD_VAR 0 4
60397: PPUSH
60398: LD_VAR 0 5
60402: PPUSH
60403: CALL 66949 0 3
// if cmd = 258 then
60407: LD_VAR 0 1
60411: PUSH
60412: LD_INT 258
60414: EQUAL
60415: IFFALSE 60439
// BurnTreeXYR ( unit , x , y , 8 ) ;
60417: LD_VAR 0 2
60421: PPUSH
60422: LD_VAR 0 4
60426: PPUSH
60427: LD_VAR 0 5
60431: PPUSH
60432: LD_INT 8
60434: PPUSH
60435: CALL 60962 0 4
// end ;
60439: LD_VAR 0 6
60443: RET
// export function ComRadiation ( un ) ; var eff ; begin
60444: LD_INT 0
60446: PPUSH
60447: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
60448: LD_VAR 0 1
60452: PPUSH
60453: CALL_OW 264
60457: PUSH
60458: LD_INT 91
60460: NONEQUAL
60461: IFFALSE 60465
// exit ;
60463: GO 60535
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
60465: LD_INT 68
60467: PPUSH
60468: LD_VAR 0 1
60472: PPUSH
60473: CALL_OW 255
60477: PPUSH
60478: CALL_OW 321
60482: PUSH
60483: LD_INT 2
60485: EQUAL
60486: IFFALSE 60498
// eff := 50 else
60488: LD_ADDR_VAR 0 3
60492: PUSH
60493: LD_INT 50
60495: ST_TO_ADDR
60496: GO 60506
// eff := 25 ;
60498: LD_ADDR_VAR 0 3
60502: PUSH
60503: LD_INT 25
60505: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 250
60515: PPUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: CALL_OW 251
60525: PPUSH
60526: LD_VAR 0 3
60530: PPUSH
60531: CALL_OW 495
// end ;
60535: LD_VAR 0 2
60539: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
60540: LD_INT 0
60542: PPUSH
60543: PPUSH
60544: PPUSH
60545: PPUSH
60546: PPUSH
60547: PPUSH
60548: PPUSH
60549: PPUSH
60550: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
60551: LD_VAR 0 1
60555: PPUSH
60556: CALL_OW 302
60560: NOT
60561: IFTRUE 60580
60563: PUSH
60564: LD_VAR 0 2
60568: PPUSH
60569: LD_VAR 0 3
60573: PPUSH
60574: CALL_OW 488
60578: NOT
60579: OR
60580: IFTRUE 60589
60582: PUSH
60583: LD_VAR 0 4
60587: NOT
60588: OR
60589: IFFALSE 60593
// exit ;
60591: GO 60957
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
60593: LD_VAR 0 1
60597: PPUSH
60598: CALL_OW 437
60602: PPUSH
60603: CALL 17944 0 1
60607: PUSH
60608: LD_INT 10
60610: GREATER
60611: IFFALSE 60615
// exit ;
60613: GO 60957
// list := [ ] ;
60615: LD_ADDR_VAR 0 13
60619: PUSH
60620: EMPTY
60621: ST_TO_ADDR
// if x - r < 0 then
60622: LD_VAR 0 2
60626: PUSH
60627: LD_VAR 0 4
60631: MINUS
60632: PUSH
60633: LD_INT 0
60635: LESS
60636: IFFALSE 60648
// min_x := 0 else
60638: LD_ADDR_VAR 0 7
60642: PUSH
60643: LD_INT 0
60645: ST_TO_ADDR
60646: GO 60664
// min_x := x - r ;
60648: LD_ADDR_VAR 0 7
60652: PUSH
60653: LD_VAR 0 2
60657: PUSH
60658: LD_VAR 0 4
60662: MINUS
60663: ST_TO_ADDR
// if y - r < 0 then
60664: LD_VAR 0 3
60668: PUSH
60669: LD_VAR 0 4
60673: MINUS
60674: PUSH
60675: LD_INT 0
60677: LESS
60678: IFFALSE 60690
// min_y := 0 else
60680: LD_ADDR_VAR 0 8
60684: PUSH
60685: LD_INT 0
60687: ST_TO_ADDR
60688: GO 60706
// min_y := y - r ;
60690: LD_ADDR_VAR 0 8
60694: PUSH
60695: LD_VAR 0 3
60699: PUSH
60700: LD_VAR 0 4
60704: MINUS
60705: ST_TO_ADDR
// max_x := x + r ;
60706: LD_ADDR_VAR 0 9
60710: PUSH
60711: LD_VAR 0 2
60715: PUSH
60716: LD_VAR 0 4
60720: PLUS
60721: ST_TO_ADDR
// max_y := y + r ;
60722: LD_ADDR_VAR 0 10
60726: PUSH
60727: LD_VAR 0 3
60731: PUSH
60732: LD_VAR 0 4
60736: PLUS
60737: ST_TO_ADDR
// for _x = min_x to max_x do
60738: LD_ADDR_VAR 0 11
60742: PUSH
60743: DOUBLE
60744: LD_VAR 0 7
60748: DEC
60749: ST_TO_ADDR
60750: LD_VAR 0 9
60754: PUSH
60755: FOR_TO
60756: IFFALSE 60875
// for _y = min_y to max_y do
60758: LD_ADDR_VAR 0 12
60762: PUSH
60763: DOUBLE
60764: LD_VAR 0 8
60768: DEC
60769: ST_TO_ADDR
60770: LD_VAR 0 10
60774: PUSH
60775: FOR_TO
60776: IFFALSE 60871
// begin if not ValidHex ( _x , _y ) then
60778: LD_VAR 0 11
60782: PPUSH
60783: LD_VAR 0 12
60787: PPUSH
60788: CALL_OW 488
60792: NOT
60793: IFFALSE 60797
// continue ;
60795: GO 60775
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
60797: LD_VAR 0 11
60801: PPUSH
60802: LD_VAR 0 12
60806: PPUSH
60807: CALL_OW 351
60811: IFFALSE 60829
60813: PUSH
60814: LD_VAR 0 11
60818: PPUSH
60819: LD_VAR 0 12
60823: PPUSH
60824: CALL_OW 554
60828: AND
60829: IFFALSE 60869
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
60831: LD_ADDR_VAR 0 13
60835: PUSH
60836: LD_VAR 0 13
60840: PPUSH
60841: LD_VAR 0 13
60845: PUSH
60846: LD_INT 1
60848: PLUS
60849: PPUSH
60850: LD_VAR 0 11
60854: PUSH
60855: LD_VAR 0 12
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PPUSH
60864: CALL_OW 2
60868: ST_TO_ADDR
// end ;
60869: GO 60775
60871: POP
60872: POP
60873: GO 60755
60875: POP
60876: POP
// if not list then
60877: LD_VAR 0 13
60881: NOT
60882: IFFALSE 60886
// exit ;
60884: GO 60957
// for i in list do
60886: LD_ADDR_VAR 0 6
60890: PUSH
60891: LD_VAR 0 13
60895: PUSH
60896: FOR_IN
60897: IFFALSE 60955
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
60899: LD_VAR 0 1
60903: PPUSH
60904: LD_STRING M
60906: PUSH
60907: LD_VAR 0 6
60911: PUSH
60912: LD_INT 1
60914: ARRAY
60915: PUSH
60916: LD_VAR 0 6
60920: PUSH
60921: LD_INT 2
60923: ARRAY
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 0
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: PUSH
60946: EMPTY
60947: LIST
60948: PPUSH
60949: CALL_OW 447
60953: GO 60896
60955: POP
60956: POP
// end ;
60957: LD_VAR 0 5
60961: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
60962: LD_INT 0
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
60968: PPUSH
60969: PPUSH
60970: PPUSH
60971: PPUSH
60972: PPUSH
60973: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
60974: LD_VAR 0 1
60978: PPUSH
60979: CALL_OW 302
60983: NOT
60984: IFTRUE 61003
60986: PUSH
60987: LD_VAR 0 2
60991: PPUSH
60992: LD_VAR 0 3
60996: PPUSH
60997: CALL_OW 488
61001: NOT
61002: OR
61003: IFTRUE 61012
61005: PUSH
61006: LD_VAR 0 4
61010: NOT
61011: OR
61012: IFFALSE 61016
// exit ;
61014: GO 61555
// if Count ( GetTaskList ( flame ) ) > 10 then
61016: LD_VAR 0 1
61020: PPUSH
61021: CALL_OW 437
61025: PPUSH
61026: CALL 17944 0 1
61030: PUSH
61031: LD_INT 10
61033: GREATER
61034: IFFALSE 61038
// exit ;
61036: GO 61555
// list := [ ] ;
61038: LD_ADDR_VAR 0 13
61042: PUSH
61043: EMPTY
61044: ST_TO_ADDR
// if x - r < 0 then
61045: LD_VAR 0 2
61049: PUSH
61050: LD_VAR 0 4
61054: MINUS
61055: PUSH
61056: LD_INT 0
61058: LESS
61059: IFFALSE 61071
// min_x := 0 else
61061: LD_ADDR_VAR 0 7
61065: PUSH
61066: LD_INT 0
61068: ST_TO_ADDR
61069: GO 61087
// min_x := x - r ;
61071: LD_ADDR_VAR 0 7
61075: PUSH
61076: LD_VAR 0 2
61080: PUSH
61081: LD_VAR 0 4
61085: MINUS
61086: ST_TO_ADDR
// if y - r < 0 then
61087: LD_VAR 0 3
61091: PUSH
61092: LD_VAR 0 4
61096: MINUS
61097: PUSH
61098: LD_INT 0
61100: LESS
61101: IFFALSE 61113
// min_y := 0 else
61103: LD_ADDR_VAR 0 8
61107: PUSH
61108: LD_INT 0
61110: ST_TO_ADDR
61111: GO 61129
// min_y := y - r ;
61113: LD_ADDR_VAR 0 8
61117: PUSH
61118: LD_VAR 0 3
61122: PUSH
61123: LD_VAR 0 4
61127: MINUS
61128: ST_TO_ADDR
// max_x := x + r ;
61129: LD_ADDR_VAR 0 9
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_VAR 0 4
61143: PLUS
61144: ST_TO_ADDR
// max_y := y + r ;
61145: LD_ADDR_VAR 0 10
61149: PUSH
61150: LD_VAR 0 3
61154: PUSH
61155: LD_VAR 0 4
61159: PLUS
61160: ST_TO_ADDR
// for _x = min_x to max_x do
61161: LD_ADDR_VAR 0 11
61165: PUSH
61166: DOUBLE
61167: LD_VAR 0 7
61171: DEC
61172: ST_TO_ADDR
61173: LD_VAR 0 9
61177: PUSH
61178: FOR_TO
61179: IFFALSE 61298
// for _y = min_y to max_y do
61181: LD_ADDR_VAR 0 12
61185: PUSH
61186: DOUBLE
61187: LD_VAR 0 8
61191: DEC
61192: ST_TO_ADDR
61193: LD_VAR 0 10
61197: PUSH
61198: FOR_TO
61199: IFFALSE 61294
// begin if not ValidHex ( _x , _y ) then
61201: LD_VAR 0 11
61205: PPUSH
61206: LD_VAR 0 12
61210: PPUSH
61211: CALL_OW 488
61215: NOT
61216: IFFALSE 61220
// continue ;
61218: GO 61198
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
61220: LD_VAR 0 11
61224: PPUSH
61225: LD_VAR 0 12
61229: PPUSH
61230: CALL_OW 351
61234: IFFALSE 61252
61236: PUSH
61237: LD_VAR 0 11
61241: PPUSH
61242: LD_VAR 0 12
61246: PPUSH
61247: CALL_OW 554
61251: AND
61252: IFFALSE 61292
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
61254: LD_ADDR_VAR 0 13
61258: PUSH
61259: LD_VAR 0 13
61263: PPUSH
61264: LD_VAR 0 13
61268: PUSH
61269: LD_INT 1
61271: PLUS
61272: PPUSH
61273: LD_VAR 0 11
61277: PUSH
61278: LD_VAR 0 12
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PPUSH
61287: CALL_OW 2
61291: ST_TO_ADDR
// end ;
61292: GO 61198
61294: POP
61295: POP
61296: GO 61178
61298: POP
61299: POP
// if not list then
61300: LD_VAR 0 13
61304: NOT
61305: IFFALSE 61309
// exit ;
61307: GO 61555
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
61309: LD_ADDR_VAR 0 13
61313: PUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: LD_VAR 0 13
61323: PPUSH
61324: LD_INT 1
61326: PPUSH
61327: LD_INT 1
61329: PPUSH
61330: CALL 21350 0 4
61334: ST_TO_ADDR
// ComStop ( flame ) ;
61335: LD_VAR 0 1
61339: PPUSH
61340: CALL_OW 141
// for i in list do
61344: LD_ADDR_VAR 0 6
61348: PUSH
61349: LD_VAR 0 13
61353: PUSH
61354: FOR_IN
61355: IFFALSE 61386
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
61357: LD_VAR 0 1
61361: PPUSH
61362: LD_VAR 0 6
61366: PUSH
61367: LD_INT 1
61369: ARRAY
61370: PPUSH
61371: LD_VAR 0 6
61375: PUSH
61376: LD_INT 2
61378: ARRAY
61379: PPUSH
61380: CALL_OW 176
61384: GO 61354
61386: POP
61387: POP
// repeat wait ( 0 0$1 ) ;
61388: LD_INT 35
61390: PPUSH
61391: CALL_OW 67
// task := GetTaskList ( flame ) ;
61395: LD_ADDR_VAR 0 14
61399: PUSH
61400: LD_VAR 0 1
61404: PPUSH
61405: CALL_OW 437
61409: ST_TO_ADDR
// if not task then
61410: LD_VAR 0 14
61414: NOT
61415: IFFALSE 61419
// exit ;
61417: GO 61555
// if task [ 1 ] [ 1 ] <> | then
61419: LD_VAR 0 14
61423: PUSH
61424: LD_INT 1
61426: ARRAY
61427: PUSH
61428: LD_INT 1
61430: ARRAY
61431: PUSH
61432: LD_STRING |
61434: NONEQUAL
61435: IFFALSE 61439
// exit ;
61437: GO 61555
// _x := task [ 1 ] [ 2 ] ;
61439: LD_ADDR_VAR 0 11
61443: PUSH
61444: LD_VAR 0 14
61448: PUSH
61449: LD_INT 1
61451: ARRAY
61452: PUSH
61453: LD_INT 2
61455: ARRAY
61456: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
61457: LD_ADDR_VAR 0 12
61461: PUSH
61462: LD_VAR 0 14
61466: PUSH
61467: LD_INT 1
61469: ARRAY
61470: PUSH
61471: LD_INT 3
61473: ARRAY
61474: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
61475: LD_VAR 0 11
61479: PPUSH
61480: LD_VAR 0 12
61484: PPUSH
61485: CALL_OW 351
61489: NOT
61490: IFTRUE 61509
61492: PUSH
61493: LD_VAR 0 11
61497: PPUSH
61498: LD_VAR 0 12
61502: PPUSH
61503: CALL_OW 554
61507: NOT
61508: OR
61509: IFFALSE 61543
// begin task := Delete ( task , 1 ) ;
61511: LD_ADDR_VAR 0 14
61515: PUSH
61516: LD_VAR 0 14
61520: PPUSH
61521: LD_INT 1
61523: PPUSH
61524: CALL_OW 3
61528: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
61529: LD_VAR 0 1
61533: PPUSH
61534: LD_VAR 0 14
61538: PPUSH
61539: CALL_OW 446
// end ; until not HasTask ( flame ) ;
61543: LD_VAR 0 1
61547: PPUSH
61548: CALL_OW 314
61552: NOT
61553: IFFALSE 61388
// end ;
61555: LD_VAR 0 5
61559: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
61560: LD_EXP 43
61564: NOT
61565: IFFALSE 61615
61567: GO 61569
61569: DISABLE
// begin initHack := true ;
61570: LD_ADDR_EXP 43
61574: PUSH
61575: LD_INT 1
61577: ST_TO_ADDR
// hackTanks := [ ] ;
61578: LD_ADDR_EXP 44
61582: PUSH
61583: EMPTY
61584: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
61585: LD_ADDR_EXP 45
61589: PUSH
61590: EMPTY
61591: ST_TO_ADDR
// hackLimit := 3 ;
61592: LD_ADDR_EXP 46
61596: PUSH
61597: LD_INT 3
61599: ST_TO_ADDR
// hackDist := 12 ;
61600: LD_ADDR_EXP 47
61604: PUSH
61605: LD_INT 12
61607: ST_TO_ADDR
// hackCounter := [ ] ;
61608: LD_ADDR_EXP 48
61612: PUSH
61613: EMPTY
61614: ST_TO_ADDR
// end ;
61615: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
61616: LD_EXP 43
61620: IFFALSE 61638
61622: PUSH
61623: LD_INT 34
61625: PUSH
61626: LD_INT 99
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PPUSH
61633: CALL_OW 69
61637: AND
61638: IFFALSE 61891
61640: GO 61642
61642: DISABLE
61643: LD_INT 0
61645: PPUSH
61646: PPUSH
// begin enable ;
61647: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
61648: LD_ADDR_VAR 0 1
61652: PUSH
61653: LD_INT 34
61655: PUSH
61656: LD_INT 99
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PPUSH
61663: CALL_OW 69
61667: PUSH
61668: FOR_IN
61669: IFFALSE 61889
// begin if not i in hackTanks then
61671: LD_VAR 0 1
61675: PUSH
61676: LD_EXP 44
61680: IN
61681: NOT
61682: IFFALSE 61765
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
61684: LD_ADDR_EXP 44
61688: PUSH
61689: LD_EXP 44
61693: PPUSH
61694: LD_EXP 44
61698: PUSH
61699: LD_INT 1
61701: PLUS
61702: PPUSH
61703: LD_VAR 0 1
61707: PPUSH
61708: CALL_OW 1
61712: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
61713: LD_ADDR_EXP 45
61717: PUSH
61718: LD_EXP 45
61722: PPUSH
61723: LD_EXP 45
61727: PUSH
61728: LD_INT 1
61730: PLUS
61731: PPUSH
61732: EMPTY
61733: PPUSH
61734: CALL_OW 1
61738: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
61739: LD_ADDR_EXP 48
61743: PUSH
61744: LD_EXP 48
61748: PPUSH
61749: LD_EXP 48
61753: PUSH
61754: LD_INT 1
61756: PLUS
61757: PPUSH
61758: EMPTY
61759: PPUSH
61760: CALL_OW 1
61764: ST_TO_ADDR
// end ; if not IsOk ( i ) then
61765: LD_VAR 0 1
61769: PPUSH
61770: CALL_OW 302
61774: NOT
61775: IFFALSE 61788
// begin HackUnlinkAll ( i ) ;
61777: LD_VAR 0 1
61781: PPUSH
61782: CALL 61894 0 1
// continue ;
61786: GO 61668
// end ; HackCheckCapturedStatus ( i ) ;
61788: LD_VAR 0 1
61792: PPUSH
61793: CALL 62339 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
61797: LD_ADDR_VAR 0 2
61801: PUSH
61802: LD_INT 81
61804: PUSH
61805: LD_VAR 0 1
61809: PPUSH
61810: CALL_OW 255
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 33
61821: PUSH
61822: LD_INT 3
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 91
61831: PUSH
61832: LD_VAR 0 1
61836: PUSH
61837: LD_EXP 47
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 50
61849: PUSH
61850: EMPTY
61851: LIST
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: PPUSH
61859: CALL_OW 69
61863: ST_TO_ADDR
// if not tmp then
61864: LD_VAR 0 2
61868: NOT
61869: IFFALSE 61873
// continue ;
61871: GO 61668
// HackLink ( i , tmp ) ;
61873: LD_VAR 0 1
61877: PPUSH
61878: LD_VAR 0 2
61882: PPUSH
61883: CALL 62030 0 2
// end ;
61887: GO 61668
61889: POP
61890: POP
// end ;
61891: PPOPN 2
61893: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
61894: LD_INT 0
61896: PPUSH
61897: PPUSH
61898: PPUSH
// if not hack in hackTanks then
61899: LD_VAR 0 1
61903: PUSH
61904: LD_EXP 44
61908: IN
61909: NOT
61910: IFFALSE 61914
// exit ;
61912: GO 62025
// index := GetElementIndex ( hackTanks , hack ) ;
61914: LD_ADDR_VAR 0 4
61918: PUSH
61919: LD_EXP 44
61923: PPUSH
61924: LD_VAR 0 1
61928: PPUSH
61929: CALL 20645 0 2
61933: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
61934: LD_EXP 45
61938: PUSH
61939: LD_VAR 0 4
61943: ARRAY
61944: IFFALSE 62025
// begin for i in hackTanksCaptured [ index ] do
61946: LD_ADDR_VAR 0 3
61950: PUSH
61951: LD_EXP 45
61955: PUSH
61956: LD_VAR 0 4
61960: ARRAY
61961: PUSH
61962: FOR_IN
61963: IFFALSE 61989
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
61965: LD_VAR 0 3
61969: PUSH
61970: LD_INT 1
61972: ARRAY
61973: PPUSH
61974: LD_VAR 0 3
61978: PUSH
61979: LD_INT 2
61981: ARRAY
61982: PPUSH
61983: CALL_OW 235
61987: GO 61962
61989: POP
61990: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
61991: LD_ADDR_EXP 45
61995: PUSH
61996: LD_EXP 45
62000: PPUSH
62001: LD_VAR 0 4
62005: PPUSH
62006: EMPTY
62007: PPUSH
62008: CALL_OW 1
62012: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
62013: LD_VAR 0 1
62017: PPUSH
62018: LD_INT 0
62020: PPUSH
62021: CALL_OW 505
// end ; end ;
62025: LD_VAR 0 2
62029: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
62030: LD_INT 0
62032: PPUSH
62033: PPUSH
62034: PPUSH
// if not hack in hackTanks or not vehicles then
62035: LD_VAR 0 1
62039: PUSH
62040: LD_EXP 44
62044: IN
62045: NOT
62046: IFTRUE 62055
62048: PUSH
62049: LD_VAR 0 2
62053: NOT
62054: OR
62055: IFFALSE 62059
// exit ;
62057: GO 62334
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
62059: LD_ADDR_VAR 0 2
62063: PUSH
62064: LD_VAR 0 1
62068: PPUSH
62069: LD_VAR 0 2
62073: PPUSH
62074: LD_INT 1
62076: PPUSH
62077: LD_INT 1
62079: PPUSH
62080: CALL 21297 0 4
62084: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
62085: LD_ADDR_VAR 0 5
62089: PUSH
62090: LD_EXP 44
62094: PPUSH
62095: LD_VAR 0 1
62099: PPUSH
62100: CALL 20645 0 2
62104: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
62105: LD_EXP 45
62109: PUSH
62110: LD_VAR 0 5
62114: ARRAY
62115: PUSH
62116: LD_EXP 46
62120: LESS
62121: IFFALSE 62310
// begin for i := 1 to vehicles do
62123: LD_ADDR_VAR 0 4
62127: PUSH
62128: DOUBLE
62129: LD_INT 1
62131: DEC
62132: ST_TO_ADDR
62133: LD_VAR 0 2
62137: PUSH
62138: FOR_TO
62139: IFFALSE 62308
// begin if hackTanksCaptured [ index ] = hackLimit then
62141: LD_EXP 45
62145: PUSH
62146: LD_VAR 0 5
62150: ARRAY
62151: PUSH
62152: LD_EXP 46
62156: EQUAL
62157: IFFALSE 62161
// break ;
62159: GO 62308
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
62161: LD_ADDR_EXP 48
62165: PUSH
62166: LD_EXP 48
62170: PPUSH
62171: LD_VAR 0 5
62175: PPUSH
62176: LD_EXP 48
62180: PUSH
62181: LD_VAR 0 5
62185: ARRAY
62186: PUSH
62187: LD_INT 1
62189: PLUS
62190: PPUSH
62191: CALL_OW 1
62195: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
62196: LD_ADDR_EXP 45
62200: PUSH
62201: LD_EXP 45
62205: PPUSH
62206: LD_VAR 0 5
62210: PUSH
62211: LD_EXP 45
62215: PUSH
62216: LD_VAR 0 5
62220: ARRAY
62221: PUSH
62222: LD_INT 1
62224: PLUS
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PPUSH
62230: LD_VAR 0 2
62234: PUSH
62235: LD_VAR 0 4
62239: ARRAY
62240: PUSH
62241: LD_VAR 0 2
62245: PUSH
62246: LD_VAR 0 4
62250: ARRAY
62251: PPUSH
62252: CALL_OW 255
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PPUSH
62261: CALL 20862 0 3
62265: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
62266: LD_VAR 0 2
62270: PUSH
62271: LD_VAR 0 4
62275: ARRAY
62276: PPUSH
62277: LD_VAR 0 1
62281: PPUSH
62282: CALL_OW 255
62286: PPUSH
62287: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
62291: LD_VAR 0 2
62295: PUSH
62296: LD_VAR 0 4
62300: ARRAY
62301: PPUSH
62302: CALL_OW 141
// end ;
62306: GO 62138
62308: POP
62309: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62310: LD_VAR 0 1
62314: PPUSH
62315: LD_EXP 45
62319: PUSH
62320: LD_VAR 0 5
62324: ARRAY
62325: PUSH
62326: LD_INT 0
62328: PLUS
62329: PPUSH
62330: CALL_OW 505
// end ;
62334: LD_VAR 0 3
62338: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
62339: LD_INT 0
62341: PPUSH
62342: PPUSH
62343: PPUSH
62344: PPUSH
// if not hack in hackTanks then
62345: LD_VAR 0 1
62349: PUSH
62350: LD_EXP 44
62354: IN
62355: NOT
62356: IFFALSE 62360
// exit ;
62358: GO 62604
// index := GetElementIndex ( hackTanks , hack ) ;
62360: LD_ADDR_VAR 0 4
62364: PUSH
62365: LD_EXP 44
62369: PPUSH
62370: LD_VAR 0 1
62374: PPUSH
62375: CALL 20645 0 2
62379: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
62380: LD_ADDR_VAR 0 3
62384: PUSH
62385: DOUBLE
62386: LD_EXP 45
62390: PUSH
62391: LD_VAR 0 4
62395: ARRAY
62396: INC
62397: ST_TO_ADDR
62398: LD_INT 1
62400: PUSH
62401: FOR_DOWNTO
62402: IFFALSE 62578
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
62404: LD_ADDR_VAR 0 5
62408: PUSH
62409: LD_EXP 45
62413: PUSH
62414: LD_VAR 0 4
62418: ARRAY
62419: PUSH
62420: LD_VAR 0 3
62424: ARRAY
62425: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
62426: LD_VAR 0 5
62430: PUSH
62431: LD_INT 1
62433: ARRAY
62434: PPUSH
62435: CALL_OW 302
62439: NOT
62440: IFTRUE 62468
62442: PUSH
62443: LD_VAR 0 5
62447: PUSH
62448: LD_INT 1
62450: ARRAY
62451: PPUSH
62452: CALL_OW 255
62456: PUSH
62457: LD_VAR 0 1
62461: PPUSH
62462: CALL_OW 255
62466: NONEQUAL
62467: OR
62468: IFFALSE 62576
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
62470: LD_VAR 0 5
62474: PUSH
62475: LD_INT 1
62477: ARRAY
62478: PPUSH
62479: CALL_OW 305
62483: IFFALSE 62511
62485: PUSH
62486: LD_VAR 0 5
62490: PUSH
62491: LD_INT 1
62493: ARRAY
62494: PPUSH
62495: CALL_OW 255
62499: PUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 255
62509: EQUAL
62510: AND
62511: IFFALSE 62535
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
62513: LD_VAR 0 5
62517: PUSH
62518: LD_INT 1
62520: ARRAY
62521: PPUSH
62522: LD_VAR 0 5
62526: PUSH
62527: LD_INT 2
62529: ARRAY
62530: PPUSH
62531: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
62535: LD_ADDR_EXP 45
62539: PUSH
62540: LD_EXP 45
62544: PPUSH
62545: LD_VAR 0 4
62549: PPUSH
62550: LD_EXP 45
62554: PUSH
62555: LD_VAR 0 4
62559: ARRAY
62560: PPUSH
62561: LD_VAR 0 3
62565: PPUSH
62566: CALL_OW 3
62570: PPUSH
62571: CALL_OW 1
62575: ST_TO_ADDR
// end ; end ;
62576: GO 62401
62578: POP
62579: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
62580: LD_VAR 0 1
62584: PPUSH
62585: LD_EXP 45
62589: PUSH
62590: LD_VAR 0 4
62594: ARRAY
62595: PUSH
62596: LD_INT 0
62598: PLUS
62599: PPUSH
62600: CALL_OW 505
// end ;
62604: LD_VAR 0 2
62608: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
62609: LD_INT 0
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
// if not hack in hackTanks then
62615: LD_VAR 0 1
62619: PUSH
62620: LD_EXP 44
62624: IN
62625: NOT
62626: IFFALSE 62630
// exit ;
62628: GO 62715
// index := GetElementIndex ( hackTanks , hack ) ;
62630: LD_ADDR_VAR 0 5
62634: PUSH
62635: LD_EXP 44
62639: PPUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: CALL 20645 0 2
62649: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
62650: LD_ADDR_VAR 0 4
62654: PUSH
62655: DOUBLE
62656: LD_INT 1
62658: DEC
62659: ST_TO_ADDR
62660: LD_EXP 45
62664: PUSH
62665: LD_VAR 0 5
62669: ARRAY
62670: PUSH
62671: FOR_TO
62672: IFFALSE 62713
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
62674: LD_EXP 45
62678: PUSH
62679: LD_VAR 0 5
62683: ARRAY
62684: PUSH
62685: LD_VAR 0 4
62689: ARRAY
62690: PUSH
62691: LD_INT 1
62693: ARRAY
62694: PUSH
62695: LD_VAR 0 2
62699: EQUAL
62700: IFFALSE 62711
// KillUnit ( vehicle ) ;
62702: LD_VAR 0 2
62706: PPUSH
62707: CALL_OW 66
62711: GO 62671
62713: POP
62714: POP
// end ;
62715: LD_VAR 0 3
62719: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
62720: LD_EXP 49
62724: NOT
62725: IFFALSE 62858
62727: GO 62729
62729: DISABLE
62730: LD_INT 0
62732: PPUSH
// begin initMiner := true ;
62733: LD_ADDR_EXP 49
62737: PUSH
62738: LD_INT 1
62740: ST_TO_ADDR
// minersList := [ ] ;
62741: LD_ADDR_EXP 50
62745: PUSH
62746: EMPTY
62747: ST_TO_ADDR
// minerMinesList := [ ] ;
62748: LD_ADDR_EXP 51
62752: PUSH
62753: EMPTY
62754: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
62755: LD_ADDR_EXP 52
62759: PUSH
62760: LD_INT 10
62762: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
62763: LD_ADDR_VAR 0 1
62767: PUSH
62768: LD_INT 34
62770: PUSH
62771: LD_INT 81
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PPUSH
62778: CALL_OW 69
62782: PUSH
62783: FOR_IN
62784: IFFALSE 62856
// begin if not i in minersList then
62786: LD_VAR 0 1
62790: PUSH
62791: LD_EXP 50
62795: IN
62796: NOT
62797: IFFALSE 62854
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
62799: LD_ADDR_EXP 50
62803: PUSH
62804: LD_EXP 50
62808: PPUSH
62809: LD_EXP 50
62813: PUSH
62814: LD_INT 1
62816: PLUS
62817: PPUSH
62818: LD_VAR 0 1
62822: PPUSH
62823: CALL_OW 1
62827: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
62828: LD_ADDR_EXP 51
62832: PUSH
62833: LD_EXP 51
62837: PPUSH
62838: LD_EXP 51
62842: PUSH
62843: LD_INT 1
62845: PLUS
62846: PPUSH
62847: EMPTY
62848: PPUSH
62849: CALL_OW 1
62853: ST_TO_ADDR
// end end ;
62854: GO 62783
62856: POP
62857: POP
// end ;
62858: PPOPN 1
62860: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
62861: LD_EXP 49
62865: IFFALSE 62896
62867: PUSH
62868: LD_EXP 51
62872: PPUSH
62873: CALL 17944 0 1
62877: IFTRUE 62895
62879: PUSH
62880: LD_INT 34
62882: PUSH
62883: LD_INT 81
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PPUSH
62890: CALL_OW 69
62894: OR
62895: AND
62896: IFFALSE 63416
62898: GO 62900
62900: DISABLE
62901: LD_INT 0
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
// begin enable ;
62907: ENABLE
// for i := minerMinesList downto 1 do
62908: LD_ADDR_VAR 0 1
62912: PUSH
62913: DOUBLE
62914: LD_EXP 51
62918: INC
62919: ST_TO_ADDR
62920: LD_INT 1
62922: PUSH
62923: FOR_DOWNTO
62924: IFFALSE 63414
// begin side := GetSide ( minersList [ i ] ) ;
62926: LD_ADDR_VAR 0 3
62930: PUSH
62931: LD_EXP 50
62935: PUSH
62936: LD_VAR 0 1
62940: ARRAY
62941: PPUSH
62942: CALL_OW 255
62946: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
62947: LD_EXP 50
62951: PUSH
62952: LD_VAR 0 1
62956: ARRAY
62957: PPUSH
62958: CALL_OW 300
62962: IFFALSE 62983
62964: PUSH
62965: LD_VAR 0 3
62969: PUSH
62970: LD_OWVAR 2
62974: PUSH
62975: LD_INT 9
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: IN
62982: AND
62983: IFFALSE 63016
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
62985: LD_EXP 50
62989: PUSH
62990: LD_VAR 0 1
62994: ARRAY
62995: PPUSH
62996: LD_EXP 51
63000: PUSH
63001: LD_VAR 0 1
63005: ARRAY
63006: PPUSH
63007: CALL 17944 0 1
63011: PPUSH
63012: CALL_OW 505
// if not minerMinesList [ i ] then
63016: LD_EXP 51
63020: PUSH
63021: LD_VAR 0 1
63025: ARRAY
63026: NOT
63027: IFFALSE 63031
// continue ;
63029: GO 62923
// for j := minerMinesList [ i ] downto 1 do
63031: LD_ADDR_VAR 0 2
63035: PUSH
63036: DOUBLE
63037: LD_EXP 51
63041: PUSH
63042: LD_VAR 0 1
63046: ARRAY
63047: INC
63048: ST_TO_ADDR
63049: LD_INT 1
63051: PUSH
63052: FOR_DOWNTO
63053: IFFALSE 63410
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
63055: LD_EXP 50
63059: PUSH
63060: LD_VAR 0 1
63064: ARRAY
63065: PPUSH
63066: CALL_OW 301
63070: IFTRUE 63090
63072: PUSH
63073: LD_EXP 50
63077: PUSH
63078: LD_VAR 0 1
63082: ARRAY
63083: PPUSH
63084: CALL_OW 305
63088: NOT
63089: OR
63090: IFFALSE 63181
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63092: LD_EXP 51
63096: PUSH
63097: LD_VAR 0 1
63101: ARRAY
63102: PUSH
63103: LD_VAR 0 2
63107: ARRAY
63108: PUSH
63109: LD_INT 1
63111: ARRAY
63112: PPUSH
63113: LD_EXP 51
63117: PUSH
63118: LD_VAR 0 1
63122: ARRAY
63123: PUSH
63124: LD_VAR 0 2
63128: ARRAY
63129: PUSH
63130: LD_INT 2
63132: ARRAY
63133: PPUSH
63134: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63138: LD_ADDR_EXP 51
63142: PUSH
63143: LD_EXP 51
63147: PPUSH
63148: LD_VAR 0 1
63152: PPUSH
63153: LD_EXP 51
63157: PUSH
63158: LD_VAR 0 1
63162: ARRAY
63163: PPUSH
63164: LD_VAR 0 2
63168: PPUSH
63169: CALL_OW 3
63173: PPUSH
63174: CALL_OW 1
63178: ST_TO_ADDR
// continue ;
63179: GO 63052
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
63181: LD_ADDR_VAR 0 4
63185: PUSH
63186: LD_EXP 51
63190: PUSH
63191: LD_VAR 0 1
63195: ARRAY
63196: PUSH
63197: LD_VAR 0 2
63201: ARRAY
63202: PUSH
63203: LD_INT 1
63205: ARRAY
63206: PPUSH
63207: LD_EXP 51
63211: PUSH
63212: LD_VAR 0 1
63216: ARRAY
63217: PUSH
63218: LD_VAR 0 2
63222: ARRAY
63223: PUSH
63224: LD_INT 2
63226: ARRAY
63227: PPUSH
63228: CALL_OW 428
63232: ST_TO_ADDR
// if not tmp then
63233: LD_VAR 0 4
63237: NOT
63238: IFFALSE 63242
// continue ;
63240: GO 63052
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
63242: LD_VAR 0 4
63246: PUSH
63247: LD_INT 81
63249: PUSH
63250: LD_VAR 0 3
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PPUSH
63259: CALL_OW 69
63263: IN
63264: IFFALSE 63314
63266: PUSH
63267: LD_EXP 51
63271: PUSH
63272: LD_VAR 0 1
63276: ARRAY
63277: PUSH
63278: LD_VAR 0 2
63282: ARRAY
63283: PUSH
63284: LD_INT 1
63286: ARRAY
63287: PPUSH
63288: LD_EXP 51
63292: PUSH
63293: LD_VAR 0 1
63297: ARRAY
63298: PUSH
63299: LD_VAR 0 2
63303: ARRAY
63304: PUSH
63305: LD_INT 2
63307: ARRAY
63308: PPUSH
63309: CALL_OW 458
63313: AND
63314: IFFALSE 63408
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
63316: LD_EXP 51
63320: PUSH
63321: LD_VAR 0 1
63325: ARRAY
63326: PUSH
63327: LD_VAR 0 2
63331: ARRAY
63332: PUSH
63333: LD_INT 1
63335: ARRAY
63336: PPUSH
63337: LD_EXP 51
63341: PUSH
63342: LD_VAR 0 1
63346: ARRAY
63347: PUSH
63348: LD_VAR 0 2
63352: ARRAY
63353: PUSH
63354: LD_INT 2
63356: ARRAY
63357: PPUSH
63358: LD_VAR 0 3
63362: PPUSH
63363: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
63367: LD_ADDR_EXP 51
63371: PUSH
63372: LD_EXP 51
63376: PPUSH
63377: LD_VAR 0 1
63381: PPUSH
63382: LD_EXP 51
63386: PUSH
63387: LD_VAR 0 1
63391: ARRAY
63392: PPUSH
63393: LD_VAR 0 2
63397: PPUSH
63398: CALL_OW 3
63402: PPUSH
63403: CALL_OW 1
63407: ST_TO_ADDR
// end ; end ;
63408: GO 63052
63410: POP
63411: POP
// end ;
63412: GO 62923
63414: POP
63415: POP
// end ;
63416: PPOPN 4
63418: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
63419: LD_INT 0
63421: PPUSH
63422: PPUSH
63423: PPUSH
63424: PPUSH
// result := false ;
63425: LD_ADDR_VAR 0 4
63429: PUSH
63430: LD_INT 0
63432: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
63433: LD_VAR 0 1
63437: PPUSH
63438: CALL_OW 264
63442: PUSH
63443: LD_INT 81
63445: EQUAL
63446: NOT
63447: IFFALSE 63451
// exit ;
63449: GO 63821
// side := GetSide ( unit ) ;
63451: LD_ADDR_VAR 0 6
63455: PUSH
63456: LD_VAR 0 1
63460: PPUSH
63461: CALL_OW 255
63465: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
63466: LD_ADDR_VAR 0 5
63470: PUSH
63471: LD_EXP 50
63475: PPUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL 20645 0 2
63485: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
63486: LD_EXP 51
63490: PUSH
63491: LD_VAR 0 5
63495: ARRAY
63496: PUSH
63497: LD_EXP 52
63501: GREATEREQUAL
63502: IFFALSE 63506
// exit ;
63504: GO 63821
// ComMoveXY ( unit , x , y ) ;
63506: LD_VAR 0 1
63510: PPUSH
63511: LD_VAR 0 2
63515: PPUSH
63516: LD_VAR 0 3
63520: PPUSH
63521: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
63525: LD_INT 35
63527: PPUSH
63528: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
63532: LD_VAR 0 1
63536: PPUSH
63537: LD_VAR 0 2
63541: PPUSH
63542: LD_VAR 0 3
63546: PPUSH
63547: CALL 52701 0 3
63551: NOT
63552: IFFALSE 63565
63554: PUSH
63555: LD_VAR 0 1
63559: PPUSH
63560: CALL_OW 314
63564: AND
63565: IFFALSE 63569
// exit ;
63567: GO 63821
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
63569: LD_VAR 0 2
63573: PPUSH
63574: LD_VAR 0 3
63578: PPUSH
63579: CALL_OW 428
63583: PUSH
63584: LD_VAR 0 1
63588: EQUAL
63589: IFFALSE 63603
63591: PUSH
63592: LD_VAR 0 1
63596: PPUSH
63597: CALL_OW 314
63601: NOT
63602: AND
63603: IFFALSE 63525
// if MineAtPos ( x , y ) then
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 3
63614: PPUSH
63615: CALL_OW 458
63619: IFFALSE 63623
// exit ;
63621: GO 63821
// if your_side = side then
63623: LD_OWVAR 2
63627: PUSH
63628: LD_VAR 0 6
63632: EQUAL
63633: IFFALSE 63652
// PlaySoundXY ( x , y , PlantMine ) ;
63635: LD_VAR 0 2
63639: PPUSH
63640: LD_VAR 0 3
63644: PPUSH
63645: LD_STRING PlantMine
63647: PPUSH
63648: CALL_OW 366
// repeat wait ( 1 ) ;
63652: LD_INT 1
63654: PPUSH
63655: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
63659: LD_VAR 0 2
63663: PPUSH
63664: LD_VAR 0 3
63668: PPUSH
63669: LD_VAR 0 6
63673: PPUSH
63674: LD_INT 0
63676: PPUSH
63677: CALL_OW 454
63681: IFFALSE 63652
// if MineAtPos ( x , y ) then
63683: LD_VAR 0 2
63687: PPUSH
63688: LD_VAR 0 3
63692: PPUSH
63693: CALL_OW 458
63697: IFFALSE 63813
// begin for i in minerMinesList [ index ] do
63699: LD_ADDR_VAR 0 7
63703: PUSH
63704: LD_EXP 51
63708: PUSH
63709: LD_VAR 0 5
63713: ARRAY
63714: PUSH
63715: FOR_IN
63716: IFFALSE 63758
// if i [ 1 ] = x and i [ 2 ] = y then
63718: LD_VAR 0 7
63722: PUSH
63723: LD_INT 1
63725: ARRAY
63726: PUSH
63727: LD_VAR 0 2
63731: EQUAL
63732: IFFALSE 63750
63734: PUSH
63735: LD_VAR 0 7
63739: PUSH
63740: LD_INT 2
63742: ARRAY
63743: PUSH
63744: LD_VAR 0 3
63748: EQUAL
63749: AND
63750: IFFALSE 63756
// exit ;
63752: POP
63753: POP
63754: GO 63821
63756: GO 63715
63758: POP
63759: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
63760: LD_ADDR_EXP 51
63764: PUSH
63765: LD_EXP 51
63769: PPUSH
63770: LD_VAR 0 5
63774: PUSH
63775: LD_EXP 51
63779: PUSH
63780: LD_VAR 0 5
63784: ARRAY
63785: PUSH
63786: LD_INT 1
63788: PLUS
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PPUSH
63794: LD_VAR 0 2
63798: PUSH
63799: LD_VAR 0 3
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PPUSH
63808: CALL 20862 0 3
63812: ST_TO_ADDR
// end ; result := true ;
63813: LD_ADDR_VAR 0 4
63817: PUSH
63818: LD_INT 1
63820: ST_TO_ADDR
// end ;
63821: LD_VAR 0 4
63825: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
63826: LD_INT 0
63828: PPUSH
63829: PPUSH
63830: PPUSH
// if not unit in minersList then
63831: LD_VAR 0 1
63835: PUSH
63836: LD_EXP 50
63840: IN
63841: NOT
63842: IFFALSE 63846
// exit ;
63844: GO 64053
// index := GetElementIndex ( minersList , unit ) ;
63846: LD_ADDR_VAR 0 6
63850: PUSH
63851: LD_EXP 50
63855: PPUSH
63856: LD_VAR 0 1
63860: PPUSH
63861: CALL 20645 0 2
63865: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
63866: LD_ADDR_VAR 0 5
63870: PUSH
63871: DOUBLE
63872: LD_EXP 51
63876: PUSH
63877: LD_VAR 0 6
63881: ARRAY
63882: INC
63883: ST_TO_ADDR
63884: LD_INT 1
63886: PUSH
63887: FOR_DOWNTO
63888: IFFALSE 64051
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
63890: LD_EXP 51
63894: PUSH
63895: LD_VAR 0 6
63899: ARRAY
63900: PUSH
63901: LD_VAR 0 5
63905: ARRAY
63906: PUSH
63907: LD_INT 1
63909: ARRAY
63910: PPUSH
63911: LD_EXP 51
63915: PUSH
63916: LD_VAR 0 6
63920: ARRAY
63921: PUSH
63922: LD_VAR 0 5
63926: ARRAY
63927: PUSH
63928: LD_INT 2
63930: ARRAY
63931: PPUSH
63932: LD_VAR 0 2
63936: PPUSH
63937: LD_VAR 0 3
63941: PPUSH
63942: CALL_OW 298
63946: PUSH
63947: LD_INT 6
63949: LESS
63950: IFFALSE 64049
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
63952: LD_EXP 51
63956: PUSH
63957: LD_VAR 0 6
63961: ARRAY
63962: PUSH
63963: LD_VAR 0 5
63967: ARRAY
63968: PUSH
63969: LD_INT 1
63971: ARRAY
63972: PPUSH
63973: LD_EXP 51
63977: PUSH
63978: LD_VAR 0 6
63982: ARRAY
63983: PUSH
63984: LD_VAR 0 5
63988: ARRAY
63989: PUSH
63990: LD_INT 2
63992: ARRAY
63993: PPUSH
63994: LD_VAR 0 1
63998: PPUSH
63999: CALL_OW 255
64003: PPUSH
64004: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
64008: LD_ADDR_EXP 51
64012: PUSH
64013: LD_EXP 51
64017: PPUSH
64018: LD_VAR 0 6
64022: PPUSH
64023: LD_EXP 51
64027: PUSH
64028: LD_VAR 0 6
64032: ARRAY
64033: PPUSH
64034: LD_VAR 0 5
64038: PPUSH
64039: CALL_OW 3
64043: PPUSH
64044: CALL_OW 1
64048: ST_TO_ADDR
// end ; end ;
64049: GO 63887
64051: POP
64052: POP
// end ;
64053: LD_VAR 0 4
64057: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
64058: LD_INT 0
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
64065: PPUSH
64066: PPUSH
64067: PPUSH
64068: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
64069: LD_VAR 0 1
64073: PPUSH
64074: CALL_OW 264
64078: PUSH
64079: LD_INT 81
64081: EQUAL
64082: NOT
64083: IFTRUE 64098
64085: PUSH
64086: LD_VAR 0 1
64090: PUSH
64091: LD_EXP 50
64095: IN
64096: NOT
64097: OR
64098: IFFALSE 64102
// exit ;
64100: GO 64428
// index := GetElementIndex ( minersList , unit ) ;
64102: LD_ADDR_VAR 0 6
64106: PUSH
64107: LD_EXP 50
64111: PPUSH
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL 20645 0 2
64121: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
64122: LD_ADDR_VAR 0 8
64126: PUSH
64127: LD_EXP 52
64131: PUSH
64132: LD_EXP 51
64136: PUSH
64137: LD_VAR 0 6
64141: ARRAY
64142: MINUS
64143: ST_TO_ADDR
// if not minesFreeAmount then
64144: LD_VAR 0 8
64148: NOT
64149: IFFALSE 64153
// exit ;
64151: GO 64428
// tmp := [ ] ;
64153: LD_ADDR_VAR 0 7
64157: PUSH
64158: EMPTY
64159: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
64160: LD_ADDR_VAR 0 5
64164: PUSH
64165: DOUBLE
64166: LD_INT 1
64168: DEC
64169: ST_TO_ADDR
64170: LD_VAR 0 8
64174: PUSH
64175: FOR_TO
64176: IFFALSE 64375
// begin _d := rand ( 0 , 5 ) ;
64178: LD_ADDR_VAR 0 11
64182: PUSH
64183: LD_INT 0
64185: PPUSH
64186: LD_INT 5
64188: PPUSH
64189: CALL_OW 12
64193: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
64194: LD_ADDR_VAR 0 12
64198: PUSH
64199: LD_INT 2
64201: PPUSH
64202: LD_INT 6
64204: PPUSH
64205: CALL_OW 12
64209: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
64210: LD_ADDR_VAR 0 9
64214: PUSH
64215: LD_VAR 0 2
64219: PPUSH
64220: LD_VAR 0 11
64224: PPUSH
64225: LD_VAR 0 12
64229: PPUSH
64230: CALL_OW 272
64234: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
64235: LD_ADDR_VAR 0 10
64239: PUSH
64240: LD_VAR 0 3
64244: PPUSH
64245: LD_VAR 0 11
64249: PPUSH
64250: LD_VAR 0 12
64254: PPUSH
64255: CALL_OW 273
64259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
64260: LD_VAR 0 9
64264: PPUSH
64265: LD_VAR 0 10
64269: PPUSH
64270: CALL_OW 488
64274: IFFALSE 64298
64276: PUSH
64277: LD_VAR 0 9
64281: PUSH
64282: LD_VAR 0 10
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_VAR 0 7
64295: IN
64296: NOT
64297: AND
64298: IFFALSE 64317
64300: PUSH
64301: LD_VAR 0 9
64305: PPUSH
64306: LD_VAR 0 10
64310: PPUSH
64311: CALL_OW 458
64315: NOT
64316: AND
64317: IFFALSE 64359
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
64319: LD_ADDR_VAR 0 7
64323: PUSH
64324: LD_VAR 0 7
64328: PPUSH
64329: LD_VAR 0 7
64333: PUSH
64334: LD_INT 1
64336: PLUS
64337: PPUSH
64338: LD_VAR 0 9
64342: PUSH
64343: LD_VAR 0 10
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PPUSH
64352: CALL_OW 1
64356: ST_TO_ADDR
64357: GO 64373
// i := i - 1 ;
64359: LD_ADDR_VAR 0 5
64363: PUSH
64364: LD_VAR 0 5
64368: PUSH
64369: LD_INT 1
64371: MINUS
64372: ST_TO_ADDR
// end ;
64373: GO 64175
64375: POP
64376: POP
// for i in tmp do
64377: LD_ADDR_VAR 0 5
64381: PUSH
64382: LD_VAR 0 7
64386: PUSH
64387: FOR_IN
64388: IFFALSE 64426
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
64390: LD_VAR 0 1
64394: PPUSH
64395: LD_VAR 0 5
64399: PUSH
64400: LD_INT 1
64402: ARRAY
64403: PPUSH
64404: LD_VAR 0 5
64408: PUSH
64409: LD_INT 2
64411: ARRAY
64412: PPUSH
64413: CALL 63419 0 3
64417: NOT
64418: IFFALSE 64424
// exit ;
64420: POP
64421: POP
64422: GO 64428
64424: GO 64387
64426: POP
64427: POP
// end ;
64428: LD_VAR 0 4
64432: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
64433: LD_INT 0
64435: PPUSH
64436: PPUSH
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
64441: PPUSH
64442: PPUSH
64443: PPUSH
// if GetClass ( unit ) <> class_sniper then
64444: LD_VAR 0 1
64448: PPUSH
64449: CALL_OW 257
64453: PUSH
64454: LD_INT 5
64456: NONEQUAL
64457: IFFALSE 64461
// exit ;
64459: GO 64931
// dist := 8 ;
64461: LD_ADDR_VAR 0 5
64465: PUSH
64466: LD_INT 8
64468: ST_TO_ADDR
// viewRange := 12 ;
64469: LD_ADDR_VAR 0 8
64473: PUSH
64474: LD_INT 12
64476: ST_TO_ADDR
// side := GetSide ( unit ) ;
64477: LD_ADDR_VAR 0 6
64481: PUSH
64482: LD_VAR 0 1
64486: PPUSH
64487: CALL_OW 255
64491: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
64492: LD_INT 61
64494: PPUSH
64495: LD_VAR 0 6
64499: PPUSH
64500: CALL_OW 321
64504: PUSH
64505: LD_INT 2
64507: EQUAL
64508: IFFALSE 64518
// viewRange := 16 ;
64510: LD_ADDR_VAR 0 8
64514: PUSH
64515: LD_INT 16
64517: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
64518: LD_VAR 0 1
64522: PPUSH
64523: LD_VAR 0 2
64527: PPUSH
64528: LD_VAR 0 3
64532: PPUSH
64533: CALL_OW 297
64537: PUSH
64538: LD_VAR 0 5
64542: GREATER
64543: IFFALSE 64622
// begin ComMoveXY ( unit , x , y ) ;
64545: LD_VAR 0 1
64549: PPUSH
64550: LD_VAR 0 2
64554: PPUSH
64555: LD_VAR 0 3
64559: PPUSH
64560: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
64564: LD_INT 35
64566: PPUSH
64567: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
64571: LD_VAR 0 1
64575: PPUSH
64576: LD_VAR 0 2
64580: PPUSH
64581: LD_VAR 0 3
64585: PPUSH
64586: CALL 52701 0 3
64590: NOT
64591: IFFALSE 64595
// exit ;
64593: GO 64931
// until GetDistUnitXY ( unit , x , y ) < dist ;
64595: LD_VAR 0 1
64599: PPUSH
64600: LD_VAR 0 2
64604: PPUSH
64605: LD_VAR 0 3
64609: PPUSH
64610: CALL_OW 297
64614: PUSH
64615: LD_VAR 0 5
64619: LESS
64620: IFFALSE 64564
// end ; ComTurnXY ( unit , x , y ) ;
64622: LD_VAR 0 1
64626: PPUSH
64627: LD_VAR 0 2
64631: PPUSH
64632: LD_VAR 0 3
64636: PPUSH
64637: CALL_OW 118
// repeat if Multiplayer then
64641: LD_OWVAR 4
64645: IFFALSE 64656
// wait ( 35 ) else
64647: LD_INT 35
64649: PPUSH
64650: CALL_OW 67
64654: GO 64663
// wait ( 5 ) ;
64656: LD_INT 5
64658: PPUSH
64659: CALL_OW 67
// _d := GetDir ( unit ) ;
64663: LD_ADDR_VAR 0 11
64667: PUSH
64668: LD_VAR 0 1
64672: PPUSH
64673: CALL_OW 254
64677: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
64678: LD_ADDR_VAR 0 7
64682: PUSH
64683: LD_VAR 0 1
64687: PPUSH
64688: CALL_OW 250
64692: PPUSH
64693: LD_VAR 0 1
64697: PPUSH
64698: CALL_OW 251
64702: PPUSH
64703: LD_VAR 0 2
64707: PPUSH
64708: LD_VAR 0 3
64712: PPUSH
64713: CALL 55337 0 4
64717: ST_TO_ADDR
// until dir = _d ;
64718: LD_VAR 0 7
64722: PUSH
64723: LD_VAR 0 11
64727: EQUAL
64728: IFFALSE 64641
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
64730: LD_ADDR_VAR 0 9
64734: PUSH
64735: LD_VAR 0 1
64739: PPUSH
64740: CALL_OW 250
64744: PPUSH
64745: LD_VAR 0 7
64749: PPUSH
64750: LD_VAR 0 5
64754: PPUSH
64755: CALL_OW 272
64759: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
64760: LD_ADDR_VAR 0 10
64764: PUSH
64765: LD_VAR 0 1
64769: PPUSH
64770: CALL_OW 251
64774: PPUSH
64775: LD_VAR 0 7
64779: PPUSH
64780: LD_VAR 0 5
64784: PPUSH
64785: CALL_OW 273
64789: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64790: LD_VAR 0 9
64794: PPUSH
64795: LD_VAR 0 10
64799: PPUSH
64800: CALL_OW 488
64804: NOT
64805: IFFALSE 64809
// exit ;
64807: GO 64931
// ComAnimCustom ( unit , 1 ) ;
64809: LD_VAR 0 1
64813: PPUSH
64814: LD_INT 1
64816: PPUSH
64817: CALL_OW 592
// p := 0 ;
64821: LD_ADDR_VAR 0 12
64825: PUSH
64826: LD_INT 0
64828: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
64829: LD_VAR 0 9
64833: PPUSH
64834: LD_VAR 0 10
64838: PPUSH
64839: LD_VAR 0 6
64843: PPUSH
64844: LD_VAR 0 8
64848: PPUSH
64849: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
64853: LD_INT 35
64855: PPUSH
64856: CALL_OW 67
// p := Inc ( p ) ;
64860: LD_ADDR_VAR 0 12
64864: PUSH
64865: LD_VAR 0 12
64869: PPUSH
64870: CALL 55293 0 1
64874: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
64875: LD_VAR 0 12
64879: PUSH
64880: LD_INT 3
64882: EQUAL
64883: IFTRUE 64897
64885: PUSH
64886: LD_VAR 0 1
64890: PPUSH
64891: CALL_OW 302
64895: NOT
64896: OR
64897: IFTRUE 64910
64899: PUSH
64900: LD_VAR 0 1
64904: PPUSH
64905: CALL_OW 301
64909: OR
64910: IFFALSE 64853
// RemoveSeeing ( _x , _y , side ) ;
64912: LD_VAR 0 9
64916: PPUSH
64917: LD_VAR 0 10
64921: PPUSH
64922: LD_VAR 0 6
64926: PPUSH
64927: CALL_OW 331
// end ;
64931: LD_VAR 0 4
64935: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
64936: LD_INT 0
64938: PPUSH
64939: PPUSH
64940: PPUSH
64941: PPUSH
64942: PPUSH
64943: PPUSH
64944: PPUSH
64945: PPUSH
64946: PPUSH
64947: PPUSH
64948: PPUSH
// if not unit then
64949: LD_VAR 0 1
64953: NOT
64954: IFFALSE 64958
// exit ;
64956: GO 65229
// side := GetSide ( unit ) ;
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_VAR 0 1
64967: PPUSH
64968: CALL_OW 255
64972: ST_TO_ADDR
// x := GetX ( unit ) ;
64973: LD_ADDR_VAR 0 5
64977: PUSH
64978: LD_VAR 0 1
64982: PPUSH
64983: CALL_OW 250
64987: ST_TO_ADDR
// y := GetY ( unit ) ;
64988: LD_ADDR_VAR 0 6
64992: PUSH
64993: LD_VAR 0 1
64997: PPUSH
64998: CALL_OW 251
65002: ST_TO_ADDR
// r := 8 ;
65003: LD_ADDR_VAR 0 4
65007: PUSH
65008: LD_INT 8
65010: ST_TO_ADDR
// if x - r < 0 then
65011: LD_VAR 0 5
65015: PUSH
65016: LD_VAR 0 4
65020: MINUS
65021: PUSH
65022: LD_INT 0
65024: LESS
65025: IFFALSE 65037
// min_x := 0 else
65027: LD_ADDR_VAR 0 7
65031: PUSH
65032: LD_INT 0
65034: ST_TO_ADDR
65035: GO 65053
// min_x := x - r ;
65037: LD_ADDR_VAR 0 7
65041: PUSH
65042: LD_VAR 0 5
65046: PUSH
65047: LD_VAR 0 4
65051: MINUS
65052: ST_TO_ADDR
// if y - r < 0 then
65053: LD_VAR 0 6
65057: PUSH
65058: LD_VAR 0 4
65062: MINUS
65063: PUSH
65064: LD_INT 0
65066: LESS
65067: IFFALSE 65079
// min_y := 0 else
65069: LD_ADDR_VAR 0 8
65073: PUSH
65074: LD_INT 0
65076: ST_TO_ADDR
65077: GO 65095
// min_y := y - r ;
65079: LD_ADDR_VAR 0 8
65083: PUSH
65084: LD_VAR 0 6
65088: PUSH
65089: LD_VAR 0 4
65093: MINUS
65094: ST_TO_ADDR
// max_x := x + r ;
65095: LD_ADDR_VAR 0 9
65099: PUSH
65100: LD_VAR 0 5
65104: PUSH
65105: LD_VAR 0 4
65109: PLUS
65110: ST_TO_ADDR
// max_y := y + r ;
65111: LD_ADDR_VAR 0 10
65115: PUSH
65116: LD_VAR 0 6
65120: PUSH
65121: LD_VAR 0 4
65125: PLUS
65126: ST_TO_ADDR
// for _x = min_x to max_x do
65127: LD_ADDR_VAR 0 11
65131: PUSH
65132: DOUBLE
65133: LD_VAR 0 7
65137: DEC
65138: ST_TO_ADDR
65139: LD_VAR 0 9
65143: PUSH
65144: FOR_TO
65145: IFFALSE 65227
// for _y = min_y to max_y do
65147: LD_ADDR_VAR 0 12
65151: PUSH
65152: DOUBLE
65153: LD_VAR 0 8
65157: DEC
65158: ST_TO_ADDR
65159: LD_VAR 0 10
65163: PUSH
65164: FOR_TO
65165: IFFALSE 65223
// begin if not ValidHex ( _x , _y ) then
65167: LD_VAR 0 11
65171: PPUSH
65172: LD_VAR 0 12
65176: PPUSH
65177: CALL_OW 488
65181: NOT
65182: IFFALSE 65186
// continue ;
65184: GO 65164
// if MineAtPos ( _x , _y ) then
65186: LD_VAR 0 11
65190: PPUSH
65191: LD_VAR 0 12
65195: PPUSH
65196: CALL_OW 458
65200: IFFALSE 65221
// ViewMineAtPos ( _x , _y , side ) ;
65202: LD_VAR 0 11
65206: PPUSH
65207: LD_VAR 0 12
65211: PPUSH
65212: LD_VAR 0 3
65216: PPUSH
65217: CALL_OW 457
// end ;
65221: GO 65164
65223: POP
65224: POP
65225: GO 65144
65227: POP
65228: POP
// end ;
65229: LD_VAR 0 2
65233: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
65234: LD_INT 0
65236: PPUSH
65237: PPUSH
65238: PPUSH
65239: PPUSH
65240: PPUSH
65241: PPUSH
65242: PPUSH
// if not units then
65243: LD_VAR 0 1
65247: NOT
65248: IFFALSE 65252
// exit ;
65250: GO 65716
// scaners := [ ] ;
65252: LD_ADDR_VAR 0 6
65256: PUSH
65257: EMPTY
65258: ST_TO_ADDR
// for i in units do
65259: LD_ADDR_VAR 0 3
65263: PUSH
65264: LD_VAR 0 1
65268: PUSH
65269: FOR_IN
65270: IFFALSE 65427
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
65272: LD_VAR 0 3
65276: PPUSH
65277: CALL_OW 264
65281: PUSH
65282: LD_INT 11
65284: NONEQUAL
65285: IFTRUE 65299
65287: PUSH
65288: LD_VAR 0 3
65292: PPUSH
65293: CALL_OW 302
65297: NOT
65298: OR
65299: IFTRUE 65316
65301: PUSH
65302: LD_VAR 0 3
65306: PPUSH
65307: CALL_OW 110
65311: PUSH
65312: LD_INT 502
65314: EQUAL
65315: OR
65316: IFFALSE 65320
// continue ;
65318: GO 65269
// ComStop ( i ) ;
65320: LD_VAR 0 3
65324: PPUSH
65325: CALL_OW 141
// x := GetX ( i ) ;
65329: LD_ADDR_VAR 0 4
65333: PUSH
65334: LD_VAR 0 3
65338: PPUSH
65339: CALL_OW 250
65343: ST_TO_ADDR
// y := GetY ( i ) ;
65344: LD_ADDR_VAR 0 5
65348: PUSH
65349: LD_VAR 0 3
65353: PPUSH
65354: CALL_OW 251
65358: ST_TO_ADDR
// if GetSide ( i ) = your_side then
65359: LD_VAR 0 3
65363: PPUSH
65364: CALL_OW 255
65368: PUSH
65369: LD_OWVAR 2
65373: EQUAL
65374: IFFALSE 65393
// PlaySoundXY ( x , y , mineDetector ) ;
65376: LD_VAR 0 4
65380: PPUSH
65381: LD_VAR 0 5
65385: PPUSH
65386: LD_STRING mineDetector
65388: PPUSH
65389: CALL_OW 366
// scaners := Join ( scaners , i ) ;
65393: LD_ADDR_VAR 0 6
65397: PUSH
65398: LD_VAR 0 6
65402: PPUSH
65403: LD_VAR 0 3
65407: PPUSH
65408: CALL 53920 0 2
65412: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
65413: LD_VAR 0 3
65417: PPUSH
65418: LD_INT 502
65420: PPUSH
65421: CALL_OW 109
// end ;
65425: GO 65269
65427: POP
65428: POP
// if not scaners then
65429: LD_VAR 0 6
65433: NOT
65434: IFFALSE 65438
// exit ;
65436: GO 65716
// wait ( 3 ) ;
65438: LD_INT 3
65440: PPUSH
65441: CALL_OW 67
// timer := 6 ;
65445: LD_ADDR_VAR 0 7
65449: PUSH
65450: LD_INT 6
65452: ST_TO_ADDR
// repeat for i in scaners do
65453: LD_ADDR_VAR 0 3
65457: PUSH
65458: LD_VAR 0 6
65462: PUSH
65463: FOR_IN
65464: IFFALSE 65614
// begin side := GetSide ( i ) ;
65466: LD_ADDR_VAR 0 8
65470: PUSH
65471: LD_VAR 0 3
65475: PPUSH
65476: CALL_OW 255
65480: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
65481: LD_VAR 0 3
65485: PPUSH
65486: CALL_OW 302
65490: NOT
65491: IFTRUE 65504
65493: PUSH
65494: LD_VAR 0 3
65498: PPUSH
65499: CALL_OW 314
65503: OR
65504: IFTRUE 65535
65506: PUSH
65507: LD_VAR 0 3
65511: PPUSH
65512: CALL_OW 263
65516: PUSH
65517: LD_INT 1
65519: EQUAL
65520: IFFALSE 65534
65522: PUSH
65523: LD_VAR 0 3
65527: PPUSH
65528: CALL_OW 311
65532: NOT
65533: AND
65534: OR
65535: IFFALSE 65579
// begin SetUnitDisplayNumber ( i , 0 ) ;
65537: LD_VAR 0 3
65541: PPUSH
65542: LD_INT 0
65544: PPUSH
65545: CALL_OW 505
// SetTag ( i , 0 ) ;
65549: LD_VAR 0 3
65553: PPUSH
65554: LD_INT 0
65556: PPUSH
65557: CALL_OW 109
// scaners := scaners diff i ;
65561: LD_ADDR_VAR 0 6
65565: PUSH
65566: LD_VAR 0 6
65570: PUSH
65571: LD_VAR 0 3
65575: DIFF
65576: ST_TO_ADDR
// continue ;
65577: GO 65463
// end ; if side in [ your_side , 9 ] then
65579: LD_VAR 0 8
65583: PUSH
65584: LD_OWVAR 2
65588: PUSH
65589: LD_INT 9
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: IN
65596: IFFALSE 65612
// SetUnitDisplayNumber ( i , timer ) ;
65598: LD_VAR 0 3
65602: PPUSH
65603: LD_VAR 0 7
65607: PPUSH
65608: CALL_OW 505
// end ;
65612: GO 65463
65614: POP
65615: POP
// if not scaners then
65616: LD_VAR 0 6
65620: NOT
65621: IFFALSE 65625
// exit ;
65623: GO 65716
// timer := Dec ( timer ) ;
65625: LD_ADDR_VAR 0 7
65629: PUSH
65630: LD_VAR 0 7
65634: PPUSH
65635: CALL 55315 0 1
65639: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65640: LD_INT 35
65642: PPUSH
65643: CALL_OW 67
// until timer = 0 ;
65647: LD_VAR 0 7
65651: PUSH
65652: LD_INT 0
65654: EQUAL
65655: IFFALSE 65453
// if not scaners then
65657: LD_VAR 0 6
65661: NOT
65662: IFFALSE 65666
// exit ;
65664: GO 65716
// for i in scaners do
65666: LD_ADDR_VAR 0 3
65670: PUSH
65671: LD_VAR 0 6
65675: PUSH
65676: FOR_IN
65677: IFFALSE 65714
// begin SetUnitDisplayNumber ( i , 0 ) ;
65679: LD_VAR 0 3
65683: PPUSH
65684: LD_INT 0
65686: PPUSH
65687: CALL_OW 505
// SetTag ( i , 0 ) ;
65691: LD_VAR 0 3
65695: PPUSH
65696: LD_INT 0
65698: PPUSH
65699: CALL_OW 109
// RevealDetectorMine ( i ) ;
65703: LD_VAR 0 3
65707: PPUSH
65708: CALL 64936 0 1
// end ;
65712: GO 65676
65714: POP
65715: POP
// end ;
65716: LD_VAR 0 2
65720: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
65721: LD_INT 0
65723: PPUSH
// if p1 = mine_detector_mode then
65724: LD_VAR 0 2
65728: PUSH
65729: LD_INT 103
65731: EQUAL
65732: IFFALSE 65743
// DetectMine ( units ) ;
65734: LD_VAR 0 1
65738: PPUSH
65739: CALL 65234 0 1
// end ; end_of_file end_of_file
65743: LD_VAR 0 7
65747: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
65748: PPOPN 6
65750: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65751: LD_INT 0
65753: PPUSH
// begin if not units then
65754: LD_VAR 0 1
65758: NOT
65759: IFFALSE 65763
// exit ;
65761: GO 65797
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
65763: LD_VAR 0 1
65767: PPUSH
65768: LD_VAR 0 2
65772: PPUSH
65773: LD_VAR 0 3
65777: PPUSH
65778: LD_VAR 0 4
65782: PPUSH
65783: LD_VAR 0 5
65787: PPUSH
65788: LD_VAR 0 6
65792: PPUSH
65793: CALL 65721 0 6
// end ;
65797: PPOPN 7
65799: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
65800: LD_EXP 36
65804: PUSH
65805: LD_INT 4
65807: EQUAL
65808: IFFALSE 65844
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
65810: LD_STRING setGameDifficulty(
65812: PUSH
65813: LD_OWVAR 67
65817: STR
65818: PUSH
65819: LD_STRING )
65821: STR
65822: PPUSH
65823: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
65827: LD_STRING displayDifficulty(
65829: PUSH
65830: LD_OWVAR 67
65834: STR
65835: PUSH
65836: LD_STRING )
65838: STR
65839: PPUSH
65840: CALL_OW 559
// end ; SOS_MapStart ( ) ;
65844: CALL 65873 0 0
// end ; end_of_file
65848: PPOPN 1
65850: END
// every 0 0$1 do
65851: GO 65853
65853: DISABLE
// begin enable ;
65854: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
65855: LD_STRING updateTimer(
65857: PUSH
65858: LD_OWVAR 1
65862: STR
65863: PUSH
65864: LD_STRING );
65866: STR
65867: PPUSH
65868: CALL_OW 559
// end ;
65872: END
// export function SOS_MapStart ( ) ; begin
65873: LD_INT 0
65875: PPUSH
// UpdateFactoryWaypoints ( ) ;
65876: CALL 66807 0 0
// UpdateWarehouseGatheringPoints ( ) ;
65880: CALL 67059 0 0
// ParseMultiDataToLua ( ) ;
65884: CALL 67206 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
65888: LD_STRING setSpecLogoNumber(
65890: PUSH
65891: LD_INT 2
65893: STR
65894: PUSH
65895: LD_STRING ,
65897: STR
65898: PUSH
65899: LD_INT 1
65901: STR
65902: PUSH
65903: LD_STRING )
65905: STR
65906: PPUSH
65907: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
65911: LD_STRING setSpecLogoNumber(
65913: PUSH
65914: LD_INT 3
65916: STR
65917: PUSH
65918: LD_STRING ,
65920: STR
65921: PUSH
65922: LD_INT 2
65924: STR
65925: PUSH
65926: LD_STRING )
65928: STR
65929: PPUSH
65930: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
65934: LD_STRING setSpecLogoNumber(
65936: PUSH
65937: LD_INT 4
65939: STR
65940: PUSH
65941: LD_STRING ,
65943: STR
65944: PUSH
65945: LD_INT 3
65947: STR
65948: PUSH
65949: LD_STRING )
65951: STR
65952: PPUSH
65953: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
65957: LD_STRING setSpecLogoNumber(
65959: PUSH
65960: LD_INT 5
65962: STR
65963: PUSH
65964: LD_STRING ,
65966: STR
65967: PUSH
65968: LD_INT 4
65970: STR
65971: PUSH
65972: LD_STRING )
65974: STR
65975: PPUSH
65976: CALL_OW 559
// end ;
65980: LD_VAR 0 1
65984: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
65985: LD_INT 0
65987: PPUSH
65988: PPUSH
65989: PPUSH
65990: PPUSH
65991: PPUSH
65992: PPUSH
65993: PPUSH
65994: PPUSH
65995: PPUSH
// for i := 1 to 8 do
65996: LD_ADDR_VAR 0 2
66000: PUSH
66001: DOUBLE
66002: LD_INT 1
66004: DEC
66005: ST_TO_ADDR
66006: LD_INT 8
66008: PUSH
66009: FOR_TO
66010: IFFALSE 66395
// begin if mpSidePositions [ i ] then
66012: LD_EXP 37
66016: PUSH
66017: LD_VAR 0 2
66021: ARRAY
66022: IFFALSE 66393
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
66024: LD_ADDR_VAR 0 7
66028: PUSH
66029: LD_INT 22
66031: PUSH
66032: LD_VAR 0 2
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 21
66043: PUSH
66044: LD_INT 1
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PPUSH
66055: CALL_OW 69
66059: PPUSH
66060: CALL 17944 0 1
66064: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66065: LD_ADDR_VAR 0 9
66069: PUSH
66070: LD_INT 22
66072: PUSH
66073: LD_VAR 0 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 30
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 30
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PPUSH
66114: CALL_OW 69
66118: ST_TO_ADDR
// crates := 0 ;
66119: LD_ADDR_VAR 0 4
66123: PUSH
66124: LD_INT 0
66126: ST_TO_ADDR
// oil := 0 ;
66127: LD_ADDR_VAR 0 5
66131: PUSH
66132: LD_INT 0
66134: ST_TO_ADDR
// sib := 0 ;
66135: LD_ADDR_VAR 0 6
66139: PUSH
66140: LD_INT 0
66142: ST_TO_ADDR
// if bases then
66143: LD_VAR 0 9
66147: IFFALSE 66253
// begin for j in bases do
66149: LD_ADDR_VAR 0 3
66153: PUSH
66154: LD_VAR 0 9
66158: PUSH
66159: FOR_IN
66160: IFFALSE 66251
// begin base := GetBase ( j ) ;
66162: LD_ADDR_VAR 0 8
66166: PUSH
66167: LD_VAR 0 3
66171: PPUSH
66172: CALL_OW 274
66176: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
66177: LD_ADDR_VAR 0 4
66181: PUSH
66182: LD_VAR 0 4
66186: PUSH
66187: LD_VAR 0 8
66191: PPUSH
66192: LD_INT 1
66194: PPUSH
66195: CALL_OW 275
66199: PLUS
66200: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
66201: LD_ADDR_VAR 0 5
66205: PUSH
66206: LD_VAR 0 5
66210: PUSH
66211: LD_VAR 0 8
66215: PPUSH
66216: LD_INT 2
66218: PPUSH
66219: CALL_OW 275
66223: PLUS
66224: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
66225: LD_ADDR_VAR 0 6
66229: PUSH
66230: LD_VAR 0 6
66234: PUSH
66235: LD_VAR 0 8
66239: PPUSH
66240: LD_INT 3
66242: PPUSH
66243: CALL_OW 275
66247: PLUS
66248: ST_TO_ADDR
// end ;
66249: GO 66159
66251: POP
66252: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
66253: LD_STRING setSpecText(
66255: PUSH
66256: LD_VAR 0 2
66260: STR
66261: PUSH
66262: LD_STRING ,
66264: STR
66265: PUSH
66266: LD_INT 2
66268: STR
66269: PUSH
66270: LD_STRING ,
66272: STR
66273: PUSH
66274: LD_VAR 0 4
66278: STR
66279: PUSH
66280: LD_STRING )
66282: STR
66283: PPUSH
66284: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
66288: LD_STRING setSpecText(
66290: PUSH
66291: LD_VAR 0 2
66295: STR
66296: PUSH
66297: LD_STRING ,
66299: STR
66300: PUSH
66301: LD_INT 3
66303: STR
66304: PUSH
66305: LD_STRING ,
66307: STR
66308: PUSH
66309: LD_VAR 0 5
66313: STR
66314: PUSH
66315: LD_STRING )
66317: STR
66318: PPUSH
66319: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
66323: LD_STRING setSpecText(
66325: PUSH
66326: LD_VAR 0 2
66330: STR
66331: PUSH
66332: LD_STRING ,
66334: STR
66335: PUSH
66336: LD_INT 4
66338: STR
66339: PUSH
66340: LD_STRING ,
66342: STR
66343: PUSH
66344: LD_VAR 0 6
66348: STR
66349: PUSH
66350: LD_STRING )
66352: STR
66353: PPUSH
66354: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
66358: LD_STRING setSpecText(
66360: PUSH
66361: LD_VAR 0 2
66365: STR
66366: PUSH
66367: LD_STRING ,
66369: STR
66370: PUSH
66371: LD_INT 5
66373: STR
66374: PUSH
66375: LD_STRING ,
66377: STR
66378: PUSH
66379: LD_VAR 0 7
66383: STR
66384: PUSH
66385: LD_STRING )
66387: STR
66388: PPUSH
66389: CALL_OW 559
// end ; end ;
66393: GO 66009
66395: POP
66396: POP
// end ;
66397: LD_VAR 0 1
66401: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
66402: LD_INT 2
66404: PUSH
66405: LD_INT 30
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 30
66417: PUSH
66418: LD_INT 1
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: LIST
66429: PPUSH
66430: CALL_OW 69
66434: IFFALSE 66444
66436: GO 66438
66438: DISABLE
// begin enable ;
66439: ENABLE
// UpdateSpectatorBar ;
66440: CALL 65985 0 0
// end ;
66444: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66445: LD_INT 0
66447: PPUSH
// end ;
66448: LD_VAR 0 12
66452: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66453: LD_INT 0
66455: PPUSH
66456: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66457: LD_VAR 0 1
66461: NOT
66462: IFTRUE 66481
66464: PUSH
66465: LD_VAR 0 2
66469: PPUSH
66470: LD_VAR 0 3
66474: PPUSH
66475: CALL_OW 488
66479: NOT
66480: OR
66481: IFTRUE 66516
66483: PUSH
66484: LD_VAR 0 1
66488: PPUSH
66489: CALL_OW 266
66493: PUSH
66494: LD_INT 3
66496: NONEQUAL
66497: IFFALSE 66515
66499: PUSH
66500: LD_VAR 0 1
66504: PPUSH
66505: CALL_OW 247
66509: PUSH
66510: LD_INT 1
66512: EQUAL
66513: NOT
66514: AND
66515: OR
66516: IFFALSE 66520
// exit ;
66518: GO 66802
// if GetType ( factory ) = unit_human then
66520: LD_VAR 0 1
66524: PPUSH
66525: CALL_OW 247
66529: PUSH
66530: LD_INT 1
66532: EQUAL
66533: IFFALSE 66550
// factory := IsInUnit ( factory ) ;
66535: LD_ADDR_VAR 0 1
66539: PUSH
66540: LD_VAR 0 1
66544: PPUSH
66545: CALL_OW 310
66549: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66550: LD_VAR 0 1
66554: PPUSH
66555: CALL_OW 266
66559: PUSH
66560: LD_INT 3
66562: NONEQUAL
66563: IFFALSE 66567
// exit ;
66565: GO 66802
// for i := 1 to Count ( factoryWaypoints ) do
66567: LD_ADDR_VAR 0 5
66571: PUSH
66572: DOUBLE
66573: LD_INT 1
66575: DEC
66576: ST_TO_ADDR
66577: LD_EXP 53
66581: PPUSH
66582: CALL 17944 0 1
66586: PUSH
66587: FOR_TO
66588: IFFALSE 66750
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
66590: LD_VAR 0 2
66594: PPUSH
66595: LD_VAR 0 3
66599: PPUSH
66600: CALL_OW 428
66604: PUSH
66605: LD_EXP 53
66609: PUSH
66610: LD_VAR 0 5
66614: ARRAY
66615: PUSH
66616: LD_INT 2
66618: ARRAY
66619: EQUAL
66620: IFFALSE 66652
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66622: LD_ADDR_EXP 53
66626: PUSH
66627: LD_EXP 53
66631: PPUSH
66632: LD_VAR 0 5
66636: PPUSH
66637: CALL_OW 3
66641: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66642: CALL 66807 0 0
// exit ;
66646: POP
66647: POP
66648: GO 66802
// end else
66650: GO 66748
// if factory = factoryWaypoints [ i ] [ 2 ] then
66652: LD_VAR 0 1
66656: PUSH
66657: LD_EXP 53
66661: PUSH
66662: LD_VAR 0 5
66666: ARRAY
66667: PUSH
66668: LD_INT 2
66670: ARRAY
66671: EQUAL
66672: IFFALSE 66748
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
66674: LD_ADDR_EXP 53
66678: PUSH
66679: LD_EXP 53
66683: PPUSH
66684: LD_VAR 0 5
66688: PPUSH
66689: CALL_OW 3
66693: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66694: LD_ADDR_EXP 53
66698: PUSH
66699: LD_EXP 53
66703: PPUSH
66704: LD_VAR 0 1
66708: PPUSH
66709: CALL_OW 255
66713: PUSH
66714: LD_VAR 0 1
66718: PUSH
66719: LD_VAR 0 2
66723: PUSH
66724: LD_VAR 0 3
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: PPUSH
66735: CALL 53920 0 2
66739: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66740: CALL 66807 0 0
// exit ;
66744: POP
66745: POP
66746: GO 66802
// end ; end ;
66748: GO 66587
66750: POP
66751: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
66752: LD_ADDR_EXP 53
66756: PUSH
66757: LD_EXP 53
66761: PPUSH
66762: LD_VAR 0 1
66766: PPUSH
66767: CALL_OW 255
66771: PUSH
66772: LD_VAR 0 1
66776: PUSH
66777: LD_VAR 0 2
66781: PUSH
66782: LD_VAR 0 3
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: PPUSH
66793: CALL 53920 0 2
66797: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66798: CALL 66807 0 0
// end ;
66802: LD_VAR 0 4
66806: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66807: LD_INT 0
66809: PPUSH
66810: PPUSH
66811: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66812: LD_STRING resetFactoryWaypoint();
66814: PPUSH
66815: CALL_OW 559
// if factoryWaypoints then
66819: LD_EXP 53
66823: IFFALSE 66944
// begin list := factoryWaypoints ;
66825: LD_ADDR_VAR 0 3
66829: PUSH
66830: LD_EXP 53
66834: ST_TO_ADDR
// for i := 1 to list do
66835: LD_ADDR_VAR 0 2
66839: PUSH
66840: DOUBLE
66841: LD_INT 1
66843: DEC
66844: ST_TO_ADDR
66845: LD_VAR 0 3
66849: PUSH
66850: FOR_TO
66851: IFFALSE 66942
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66853: LD_STRING setFactoryWaypointXY(
66855: PUSH
66856: LD_VAR 0 3
66860: PUSH
66861: LD_VAR 0 2
66865: ARRAY
66866: PUSH
66867: LD_INT 1
66869: ARRAY
66870: STR
66871: PUSH
66872: LD_STRING ,
66874: STR
66875: PUSH
66876: LD_VAR 0 3
66880: PUSH
66881: LD_VAR 0 2
66885: ARRAY
66886: PUSH
66887: LD_INT 2
66889: ARRAY
66890: STR
66891: PUSH
66892: LD_STRING ,
66894: STR
66895: PUSH
66896: LD_VAR 0 3
66900: PUSH
66901: LD_VAR 0 2
66905: ARRAY
66906: PUSH
66907: LD_INT 3
66909: ARRAY
66910: STR
66911: PUSH
66912: LD_STRING ,
66914: STR
66915: PUSH
66916: LD_VAR 0 3
66920: PUSH
66921: LD_VAR 0 2
66925: ARRAY
66926: PUSH
66927: LD_INT 4
66929: ARRAY
66930: STR
66931: PUSH
66932: LD_STRING )
66934: STR
66935: PPUSH
66936: CALL_OW 559
66940: GO 66850
66942: POP
66943: POP
// end ; end ;
66944: LD_VAR 0 1
66948: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66949: LD_INT 0
66951: PPUSH
// if HexInfo ( x , y ) = warehouse then
66952: LD_VAR 0 2
66956: PPUSH
66957: LD_VAR 0 3
66961: PPUSH
66962: CALL_OW 428
66966: PUSH
66967: LD_VAR 0 1
66971: EQUAL
66972: IFFALSE 66999
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66974: LD_ADDR_EXP 55
66978: PUSH
66979: LD_EXP 55
66983: PPUSH
66984: LD_VAR 0 1
66988: PPUSH
66989: LD_INT 0
66991: PPUSH
66992: CALL_OW 1
66996: ST_TO_ADDR
66997: GO 67050
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66999: LD_ADDR_EXP 55
67003: PUSH
67004: LD_EXP 55
67008: PPUSH
67009: LD_VAR 0 1
67013: PPUSH
67014: LD_VAR 0 1
67018: PPUSH
67019: CALL_OW 255
67023: PUSH
67024: LD_VAR 0 1
67028: PUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_VAR 0 3
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: PPUSH
67045: CALL_OW 1
67049: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
67050: CALL 67059 0 0
// end ;
67054: LD_VAR 0 4
67058: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
67059: LD_INT 0
67061: PPUSH
67062: PPUSH
67063: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
67064: LD_STRING resetWarehouseGatheringPoints();
67066: PPUSH
67067: CALL_OW 559
// if warehouseGatheringPoints then
67071: LD_EXP 55
67075: IFFALSE 67201
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_EXP 55
67086: PPUSH
67087: CALL 57854 0 1
67091: ST_TO_ADDR
// for i := 1 to list do
67092: LD_ADDR_VAR 0 2
67096: PUSH
67097: DOUBLE
67098: LD_INT 1
67100: DEC
67101: ST_TO_ADDR
67102: LD_VAR 0 3
67106: PUSH
67107: FOR_TO
67108: IFFALSE 67199
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67110: LD_STRING setWarehouseGatheringPointXY(
67112: PUSH
67113: LD_VAR 0 3
67117: PUSH
67118: LD_VAR 0 2
67122: ARRAY
67123: PUSH
67124: LD_INT 1
67126: ARRAY
67127: STR
67128: PUSH
67129: LD_STRING ,
67131: STR
67132: PUSH
67133: LD_VAR 0 3
67137: PUSH
67138: LD_VAR 0 2
67142: ARRAY
67143: PUSH
67144: LD_INT 2
67146: ARRAY
67147: STR
67148: PUSH
67149: LD_STRING ,
67151: STR
67152: PUSH
67153: LD_VAR 0 3
67157: PUSH
67158: LD_VAR 0 2
67162: ARRAY
67163: PUSH
67164: LD_INT 3
67166: ARRAY
67167: STR
67168: PUSH
67169: LD_STRING ,
67171: STR
67172: PUSH
67173: LD_VAR 0 3
67177: PUSH
67178: LD_VAR 0 2
67182: ARRAY
67183: PUSH
67184: LD_INT 4
67186: ARRAY
67187: STR
67188: PUSH
67189: LD_STRING )
67191: STR
67192: PPUSH
67193: CALL_OW 559
67197: GO 67107
67199: POP
67200: POP
// end ; end ;
67201: LD_VAR 0 1
67205: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
67206: LD_INT 0
67208: PPUSH
67209: PPUSH
// if not mpSidePositions then
67210: LD_EXP 37
67214: NOT
67215: IFFALSE 67219
// exit ;
67217: GO 67290
// result :=  ;
67219: LD_ADDR_VAR 0 1
67223: PUSH
67224: LD_STRING 
67226: ST_TO_ADDR
// for i := 1 to 8 do
67227: LD_ADDR_VAR 0 2
67231: PUSH
67232: DOUBLE
67233: LD_INT 1
67235: DEC
67236: ST_TO_ADDR
67237: LD_INT 8
67239: PUSH
67240: FOR_TO
67241: IFFALSE 67271
// begin result := result & mpSidePositions [ i ] & ; ;
67243: LD_ADDR_VAR 0 1
67247: PUSH
67248: LD_VAR 0 1
67252: PUSH
67253: LD_EXP 37
67257: PUSH
67258: LD_VAR 0 2
67262: ARRAY
67263: STR
67264: PUSH
67265: LD_STRING ;
67267: STR
67268: ST_TO_ADDR
// end ;
67269: GO 67240
67271: POP
67272: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
67273: LD_STRING setMultiplayerRealPosition("
67275: PUSH
67276: LD_VAR 0 1
67280: STR
67281: PUSH
67282: LD_STRING ");
67284: STR
67285: PPUSH
67286: CALL_OW 559
// end ;
67290: LD_VAR 0 1
67294: RET
