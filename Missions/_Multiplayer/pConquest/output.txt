// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46536 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46920 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeams := [ ] ;
 808: LD_ADDR_EXP 8
 812: PUSH
 813: EMPTY
 814: ST_TO_ADDR
// mpTeamGame := false ;
 815: LD_ADDR_EXP 9
 819: PUSH
 820: LD_INT 0
 822: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 823: LD_ADDR_EXP 27
 827: PUSH
 828: LD_INT 160
 830: PUSH
 831: LD_INT 200
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: ST_TO_ADDR
// end ;
 838: LD_VAR 0 1
 842: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 843: LD_INT 0
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
 850: PPUSH
 851: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 852: LD_ADDR_EXP 17
 856: PUSH
 857: LD_INT 1
 859: PUSH
 860: LD_INT 2
 862: PUSH
 863: LD_INT 3
 865: PUSH
 866: LD_INT 4
 868: PUSH
 869: LD_INT 5
 871: PUSH
 872: LD_INT 6
 874: PUSH
 875: LD_INT 7
 877: PUSH
 878: LD_INT 8
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 891: LD_ADDR_EXP 16
 895: PUSH
 896: LD_INT 9
 898: PUSH
 899: LD_INT 10
 901: PUSH
 902: LD_INT 11
 904: PUSH
 905: LD_INT 12
 907: PUSH
 908: LD_INT 13
 910: PUSH
 911: LD_INT 14
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: PUSH
 922: LD_EXP 17
 926: UNION
 927: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 928: LD_VAR 0 1
 932: PUSH
 933: LD_INT 2
 935: EQUAL
 936: IFFALSE 948
// baseLevel := 1 else
 938: LD_ADDR_VAR 0 7
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
 946: GO 962
// baseLevel := mpGameSettings [ 1 ] ;
 948: LD_ADDR_VAR 0 7
 952: PUSH
 953: LD_EXP 4
 957: PUSH
 958: LD_INT 1
 960: ARRAY
 961: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 962: LD_ADDR_EXP 22
 966: PUSH
 967: LD_EXP 4
 971: PUSH
 972: LD_INT 2
 974: ARRAY
 975: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 976: LD_ADDR_EXP 23
 980: PUSH
 981: LD_EXP 4
 985: PUSH
 986: LD_INT 3
 988: ARRAY
 989: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 990: LD_ADDR_EXP 13
 994: PUSH
 995: LD_EXP 4
 999: PUSH
1000: LD_INT 4
1002: ARRAY
1003: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1004: LD_ADDR_EXP 25
1008: PUSH
1009: LD_EXP 4
1013: PUSH
1014: LD_INT 5
1016: ARRAY
1017: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1018: LD_ADDR_VAR 0 5
1022: PUSH
1023: LD_EXP 4
1027: PUSH
1028: LD_INT 6
1030: ARRAY
1031: PUSH
1032: LD_INT 0
1034: GREATER
1035: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1036: LD_ADDR_VAR 0 6
1040: PUSH
1041: LD_EXP 4
1045: PUSH
1046: LD_INT 7
1048: ARRAY
1049: PUSH
1050: LD_INT 0
1052: GREATER
1053: ST_TO_ADDR
// if gameType = GameTypeKing then
1054: LD_VAR 0 1
1058: PUSH
1059: LD_INT 3
1061: EQUAL
1062: IFFALSE 1102
// begin mpKingArea := kingArea ;
1064: LD_ADDR_EXP 32
1068: PUSH
1069: LD_INT 15
1071: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1072: LD_ADDR_EXP 33
1076: PUSH
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 8
1084: ARRAY
1085: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1086: LD_ADDR_EXP 35
1090: PUSH
1091: LD_EXP 4
1095: PUSH
1096: LD_INT 10
1098: ARRAY
1099: ST_TO_ADDR
// end else
1100: GO 1126
// begin mpKingArea := 0 ;
1102: LD_ADDR_EXP 32
1106: PUSH
1107: LD_INT 0
1109: ST_TO_ADDR
// mpPoints := 0 ;
1110: LD_ADDR_EXP 33
1114: PUSH
1115: LD_INT 0
1117: ST_TO_ADDR
// mpEmissions := 0 ;
1118: LD_ADDR_EXP 35
1122: PUSH
1123: LD_INT 0
1125: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 9
1133: ARRAY
1134: IFFALSE 1266
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1136: LD_ADDR_EXP 34
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: LD_INT 24
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 12
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: LD_INT 23
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 42
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 42
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1266: LD_ADDR_EXP 14
1270: PUSH
1271: LD_EXP 4
1275: PUSH
1276: LD_INT 11
1278: ARRAY
1279: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1280: LD_ADDR_EXP 20
1284: PUSH
1285: LD_EXP 4
1289: PUSH
1290: LD_INT 12
1292: ARRAY
1293: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1294: LD_ADDR_EXP 24
1298: PUSH
1299: LD_EXP 4
1303: PUSH
1304: LD_INT 13
1306: ARRAY
1307: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1308: LD_ADDR_EXP 31
1312: PUSH
1313: LD_EXP 4
1317: PUSH
1318: LD_INT 14
1320: ARRAY
1321: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1322: LD_ADDR_EXP 28
1326: PUSH
1327: LD_EXP 4
1331: PUSH
1332: LD_INT 15
1334: ARRAY
1335: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1336: LD_ADDR_EXP 26
1340: PUSH
1341: LD_EXP 4
1345: PUSH
1346: LD_INT 18
1348: ARRAY
1349: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1350: LD_ADDR_EXP 18
1354: PUSH
1355: LD_EXP 4
1359: PUSH
1360: LD_INT 21
1362: ARRAY
1363: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1364: LD_ADDR_EXP 29
1368: PUSH
1369: LD_INT 16
1371: PUSH
1372: LD_INT 17
1374: PUSH
1375: LD_INT 18
1377: PUSH
1378: LD_INT 19
1380: PUSH
1381: LD_INT 20
1383: PUSH
1384: LD_INT 21
1386: PUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 23
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 0 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1403: LD_ADDR_VAR 0 8
1407: PUSH
1408: LD_INT 24
1410: PPUSH
1411: LD_INT 3
1413: PPUSH
1414: CALL 45901 0 2
1418: PUSH
1419: LD_INT 30
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: CALL 45901 0 2
1429: PUSH
1430: LD_INT 36
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL 45901 0 2
1440: PUSH
1441: LD_INT 42
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL 45901 0 2
1451: PUSH
1452: LD_INT 48
1454: PPUSH
1455: LD_INT 3
1457: PPUSH
1458: CALL 45901 0 2
1462: PUSH
1463: LD_INT 54
1465: PPUSH
1466: LD_INT 3
1468: PPUSH
1469: CALL 45901 0 2
1473: PUSH
1474: LD_INT 60
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL 45901 0 2
1484: PUSH
1485: LD_INT 66
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 45901 0 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1506: LD_ADDR_VAR 0 3
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_VAR 0 8
1520: PPUSH
1521: CALL 5216 0 1
1525: PUSH
1526: FOR_TO
1527: IFFALSE 1631
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1529: LD_ADDR_EXP 19
1533: PUSH
1534: LD_EXP 19
1538: PPUSH
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_VAR 0 8
1548: PUSH
1549: LD_VAR 0 3
1553: ARRAY
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: LD_VAR 0 8
1563: PUSH
1564: LD_VAR 0 3
1568: ARRAY
1569: PUSH
1570: LD_INT 3
1572: ARRAY
1573: PPUSH
1574: LD_INT 10
1576: PPUSH
1577: CALL_OW 272
1581: PUSH
1582: LD_VAR 0 8
1586: PUSH
1587: LD_VAR 0 3
1591: ARRAY
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PPUSH
1597: LD_VAR 0 8
1601: PUSH
1602: LD_VAR 0 3
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: CALL_OW 273
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 1
1628: ST_TO_ADDR
1629: GO 1526
1631: POP
1632: POP
// if hasOil then
1633: LD_VAR 0 5
1637: IFFALSE 1776
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1639: LD_ADDR_VAR 0 4
1643: PUSH
1644: LD_EXP 4
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PUSH
1653: LD_INT 2
1655: EQUAL
1656: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1657: LD_ADDR_EXP 10
1661: PUSH
1662: LD_INT 25
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL 45734 0 2
1674: PUSH
1675: LD_INT 31
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL 45734 0 2
1687: PUSH
1688: LD_INT 37
1690: PPUSH
1691: LD_VAR 0 4
1695: PPUSH
1696: CALL 45734 0 2
1700: PUSH
1701: LD_INT 43
1703: PPUSH
1704: LD_VAR 0 4
1708: PPUSH
1709: CALL 45734 0 2
1713: PUSH
1714: LD_INT 49
1716: PPUSH
1717: LD_VAR 0 4
1721: PPUSH
1722: CALL 45734 0 2
1726: PUSH
1727: LD_INT 55
1729: PPUSH
1730: LD_VAR 0 4
1734: PPUSH
1735: CALL 45734 0 2
1739: PUSH
1740: LD_INT 61
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL 45734 0 2
1752: PUSH
1753: LD_INT 67
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 45734 0 2
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// end ; if hasSib then
1776: LD_VAR 0 6
1780: IFFALSE 1919
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_EXP 4
1791: PUSH
1792: LD_INT 7
1794: ARRAY
1795: PUSH
1796: LD_INT 2
1798: EQUAL
1799: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1800: LD_ADDR_EXP 11
1804: PUSH
1805: LD_INT 26
1807: PPUSH
1808: LD_VAR 0 4
1812: PPUSH
1813: CALL 45734 0 2
1817: PUSH
1818: LD_INT 32
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 45734 0 2
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 45734 0 2
1843: PUSH
1844: LD_INT 44
1846: PPUSH
1847: LD_VAR 0 4
1851: PPUSH
1852: CALL 45734 0 2
1856: PUSH
1857: LD_INT 50
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL 45734 0 2
1869: PUSH
1870: LD_INT 56
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL 45734 0 2
1882: PUSH
1883: LD_INT 62
1885: PPUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL 45734 0 2
1895: PUSH
1896: LD_INT 68
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL 45734 0 2
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1919: LD_VAR 0 7
1923: PUSH
1924: LD_INT 1
1926: GREATEREQUAL
1927: IFFALSE 1939
// mpDepots := startPos ;
1929: LD_ADDR_EXP 12
1933: PUSH
1934: LD_VAR 0 8
1938: ST_TO_ADDR
// if baseLevel >= 2 then
1939: LD_VAR 0 7
1943: PUSH
1944: LD_INT 2
1946: GREATEREQUAL
1947: IFFALSE 2364
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 1 ) ] ] ;
1949: LD_ADDR_EXP 15
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 28
1959: PPUSH
1960: LD_INT 5
1962: PPUSH
1963: CALL 45901 0 2
1967: ADD
1968: PUSH
1969: LD_INT 31
1971: PUSH
1972: LD_INT 29
1974: PPUSH
1975: LD_INT 5
1977: PPUSH
1978: CALL 45901 0 2
1982: ADD
1983: PUSH
1984: LD_INT 4
1986: PUSH
1987: LD_INT 27
1989: PPUSH
1990: LD_INT 4
1992: PPUSH
1993: CALL 45901 0 2
1997: ADD
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 34
2009: PPUSH
2010: LD_INT 4
2012: PPUSH
2013: CALL 45901 0 2
2017: ADD
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: LD_INT 35
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL 45901 0 2
2032: ADD
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: LD_INT 33
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: CALL 45901 0 2
2047: ADD
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 40
2059: PPUSH
2060: LD_INT 4
2062: PPUSH
2063: CALL 45901 0 2
2067: ADD
2068: PUSH
2069: LD_INT 31
2071: PUSH
2072: LD_INT 41
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: CALL 45901 0 2
2082: ADD
2083: PUSH
2084: LD_INT 4
2086: PUSH
2087: LD_INT 39
2089: PPUSH
2090: LD_INT 4
2092: PPUSH
2093: CALL 45901 0 2
2097: ADD
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 31
2106: PUSH
2107: LD_INT 46
2109: PPUSH
2110: LD_INT 4
2112: PPUSH
2113: CALL 45901 0 2
2117: ADD
2118: PUSH
2119: LD_INT 31
2121: PUSH
2122: LD_INT 47
2124: PPUSH
2125: LD_INT 4
2127: PPUSH
2128: CALL 45901 0 2
2132: ADD
2133: PUSH
2134: LD_INT 4
2136: PUSH
2137: LD_INT 45
2139: PPUSH
2140: LD_INT 2
2142: PPUSH
2143: CALL 45901 0 2
2147: ADD
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 31
2156: PUSH
2157: LD_INT 52
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL 45901 0 2
2167: ADD
2168: PUSH
2169: LD_INT 31
2171: PUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 45901 0 2
2182: ADD
2183: PUSH
2184: LD_INT 4
2186: PUSH
2187: LD_INT 51
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: CALL 45901 0 2
2197: ADD
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 31
2206: PUSH
2207: LD_INT 58
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: CALL 45901 0 2
2217: ADD
2218: PUSH
2219: LD_INT 31
2221: PUSH
2222: LD_INT 59
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL 45901 0 2
2232: ADD
2233: PUSH
2234: LD_INT 4
2236: PUSH
2237: LD_INT 57
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL 45901 0 2
2247: ADD
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 31
2256: PUSH
2257: LD_INT 64
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL 45901 0 2
2267: ADD
2268: PUSH
2269: LD_INT 31
2271: PUSH
2272: LD_INT 65
2274: PPUSH
2275: LD_INT 0
2277: PPUSH
2278: CALL 45901 0 2
2282: ADD
2283: PUSH
2284: LD_INT 4
2286: PUSH
2287: LD_INT 63
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL 45901 0 2
2297: ADD
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 31
2306: PUSH
2307: LD_INT 70
2309: PPUSH
2310: LD_INT 2
2312: PPUSH
2313: CALL 45901 0 2
2317: ADD
2318: PUSH
2319: LD_INT 31
2321: PUSH
2322: LD_INT 71
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL 45901 0 2
2332: ADD
2333: PUSH
2334: LD_INT 4
2336: PUSH
2337: LD_INT 69
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL 45901 0 2
2347: ADD
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// end ; end ;
2364: LD_VAR 0 2
2368: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2369: GO 2371
2371: DISABLE
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
// begin if not mpShipments then
2382: LD_EXP 25
2386: NOT
2387: IFFALSE 2391
// exit ;
2389: GO 2846
// case mpShipments of 1 :
2391: LD_EXP 25
2395: PUSH
2396: LD_INT 1
2398: DOUBLE
2399: EQUAL
2400: IFTRUE 2404
2402: GO 2439
2404: POP
// begin time := 0 0$30 ;
2405: LD_ADDR_VAR 0 5
2409: PUSH
2410: LD_INT 1050
2412: ST_TO_ADDR
// normalTime := 0 0$30 ;
2413: LD_ADDR_VAR 0 6
2417: PUSH
2418: LD_INT 1050
2420: ST_TO_ADDR
// maxTime := 1 1$20 ;
2421: LD_ADDR_VAR 0 8
2425: PUSH
2426: LD_INT 2800
2428: ST_TO_ADDR
// delayTime := 0 0$5 ;
2429: LD_ADDR_VAR 0 7
2433: PUSH
2434: LD_INT 175
2436: ST_TO_ADDR
// end ; 2 :
2437: GO 2569
2439: LD_INT 2
2441: DOUBLE
2442: EQUAL
2443: IFTRUE 2447
2445: GO 2482
2447: POP
// begin time := 0 0$25 ;
2448: LD_ADDR_VAR 0 5
2452: PUSH
2453: LD_INT 875
2455: ST_TO_ADDR
// normalTime := 0 0$25 ;
2456: LD_ADDR_VAR 0 6
2460: PUSH
2461: LD_INT 875
2463: ST_TO_ADDR
// maxTime := 1 1$10 ;
2464: LD_ADDR_VAR 0 8
2468: PUSH
2469: LD_INT 2450
2471: ST_TO_ADDR
// delayTime := 0 0$4 ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_INT 140
2479: ST_TO_ADDR
// end ; 3 :
2480: GO 2569
2482: LD_INT 3
2484: DOUBLE
2485: EQUAL
2486: IFTRUE 2490
2488: GO 2525
2490: POP
// begin time := 0 0$20 ;
2491: LD_ADDR_VAR 0 5
2495: PUSH
2496: LD_INT 700
2498: ST_TO_ADDR
// normalTime := 0 0$20 ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_INT 700
2506: ST_TO_ADDR
// maxTime := 1 1$00 ;
2507: LD_ADDR_VAR 0 8
2511: PUSH
2512: LD_INT 2100
2514: ST_TO_ADDR
// delayTime := 0 0$3 ;
2515: LD_ADDR_VAR 0 7
2519: PUSH
2520: LD_INT 105
2522: ST_TO_ADDR
// end ; 4 :
2523: GO 2569
2525: LD_INT 4
2527: DOUBLE
2528: EQUAL
2529: IFTRUE 2533
2531: GO 2568
2533: POP
// begin time := 0 0$15 ;
2534: LD_ADDR_VAR 0 5
2538: PUSH
2539: LD_INT 525
2541: ST_TO_ADDR
// normalTime := 0 0$15 ;
2542: LD_ADDR_VAR 0 6
2546: PUSH
2547: LD_INT 525
2549: ST_TO_ADDR
// maxTime := 0 0$55 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1925
2557: ST_TO_ADDR
// delayTime := 0 0$2 ;
2558: LD_ADDR_VAR 0 7
2562: PUSH
2563: LD_INT 70
2565: ST_TO_ADDR
// end ; end ;
2566: GO 2569
2568: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2569: LD_ADDR_VAR 0 4
2573: PUSH
2574: LD_INT 9
2576: PUSH
2577: LD_INT 10
2579: PUSH
2580: LD_INT 11
2582: PUSH
2583: LD_INT 12
2585: PUSH
2586: LD_INT 13
2588: PUSH
2589: LD_INT 14
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: PUSH
2608: LD_INT 2
2610: PUSH
2611: LD_INT 3
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: LD_INT 7
2625: PUSH
2626: LD_INT 8
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// for i := 1 to 8 do
2639: LD_ADDR_VAR 0 1
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 8
2651: PUSH
2652: FOR_TO
2653: IFFALSE 2700
// begin if not mpSidePositions [ i ] then
2655: LD_EXP 5
2659: PUSH
2660: LD_VAR 0 1
2664: ARRAY
2665: NOT
2666: IFFALSE 2670
// continue ;
2668: GO 2652
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_VAR 0 3
2684: PUSH
2685: LD_EXP 5
2689: PUSH
2690: LD_VAR 0 1
2694: ARRAY
2695: ARRAY
2696: ADD
2697: ST_TO_ADDR
// end ;
2698: GO 2652
2700: POP
2701: POP
// x := 1 ;
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// repeat wait ( time ) ;
2710: LD_VAR 0 5
2714: PPUSH
2715: CALL_OW 67
// x := Inc ( x ) ;
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: LD_VAR 0 2
2728: PPUSH
2729: CALL 42555 0 1
2733: ST_TO_ADDR
// if x > 5 then
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 5
2741: GREATER
2742: IFFALSE 2752
// x := 1 ;
2744: LD_ADDR_VAR 0 2
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// for i in areas do
2752: LD_ADDR_VAR 0 1
2756: PUSH
2757: LD_VAR 0 4
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2802
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2765: LD_VAR 0 1
2769: PPUSH
2770: LD_INT 1
2772: PPUSH
2773: CALL_OW 287
2777: PUSH
2778: LD_INT 20
2780: LESS
2781: IFFALSE 2800
// begin CreateCratesArea ( x , i , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 1
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: CALL_OW 55
// end ; end ;
2800: GO 2762
2802: POP
2803: POP
// time := time + delayTime ;
2804: LD_ADDR_VAR 0 5
2808: PUSH
2809: LD_VAR 0 5
2813: PUSH
2814: LD_VAR 0 7
2818: PLUS
2819: ST_TO_ADDR
// if time > maxTime then
2820: LD_VAR 0 5
2824: PUSH
2825: LD_VAR 0 8
2829: GREATER
2830: IFFALSE 2842
// time := normalTime ;
2832: LD_ADDR_VAR 0 5
2836: PUSH
2837: LD_VAR 0 6
2841: ST_TO_ADDR
// until false ;
2842: LD_INT 0
2844: IFFALSE 2710
// end ; end_of_file
2846: PPOPN 8
2848: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2849: LD_VAR 0 1
2853: PPUSH
2854: CALL 56261 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 51822 0 1
// end ;
2867: PPOPN 1
2869: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2870: LD_VAR 0 1
2874: PPUSH
2875: CALL 56278 0 1
// end ;
2879: PPOPN 1
2881: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL 52529 0 1
2891: PPOPN 1
2893: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL 56319 0 2
2908: PPOPN 2
2910: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL 52582 0 3
2930: PPOPN 3
2932: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2933: LD_VAR 0 1
2937: PPUSH
2938: LD_VAR 0 2
2942: PPUSH
2943: LD_VAR 0 3
2947: PPUSH
2948: LD_VAR 0 4
2952: PPUSH
2953: LD_VAR 0 5
2957: PPUSH
2958: CALL 53221 0 5
2962: PPOPN 5
2964: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2965: LD_VAR 0 1
2969: PPUSH
2970: LD_VAR 0 2
2974: PPUSH
2975: LD_VAR 0 3
2979: PPUSH
2980: LD_VAR 0 4
2984: PPUSH
2985: CALL 53324 0 4
2989: PPOPN 4
2991: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2992: LD_INT 0
2994: PPUSH
2995: PPUSH
// if exist_mode then
2996: LD_VAR 0 2
3000: IFFALSE 3046
// begin unit := CreateCharacter ( prefix & ident ) ;
3002: LD_ADDR_VAR 0 5
3006: PUSH
3007: LD_VAR 0 3
3011: PUSH
3012: LD_VAR 0 1
3016: STR
3017: PPUSH
3018: CALL_OW 34
3022: ST_TO_ADDR
// if unit then
3023: LD_VAR 0 5
3027: IFFALSE 3044
// DeleteCharacters ( prefix & ident ) ;
3029: LD_VAR 0 3
3033: PUSH
3034: LD_VAR 0 1
3038: STR
3039: PPUSH
3040: CALL_OW 40
// end else
3044: GO 3061
// unit := NewCharacter ( ident ) ;
3046: LD_ADDR_VAR 0 5
3050: PUSH
3051: LD_VAR 0 1
3055: PPUSH
3056: CALL_OW 25
3060: ST_TO_ADDR
// result := unit ;
3061: LD_ADDR_VAR 0 4
3065: PUSH
3066: LD_VAR 0 5
3070: ST_TO_ADDR
// end ;
3071: LD_VAR 0 4
3075: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3076: LD_INT 0
3078: PPUSH
3079: PPUSH
// if exist_mode then
3080: LD_VAR 0 2
3084: IFFALSE 3109
// unit := CreateCharacter ( prefix & ident ) else
3086: LD_ADDR_VAR 0 5
3090: PUSH
3091: LD_VAR 0 3
3095: PUSH
3096: LD_VAR 0 1
3100: STR
3101: PPUSH
3102: CALL_OW 34
3106: ST_TO_ADDR
3107: GO 3124
// unit := NewCharacter ( ident ) ;
3109: LD_ADDR_VAR 0 5
3113: PUSH
3114: LD_VAR 0 1
3118: PPUSH
3119: CALL_OW 25
3123: ST_TO_ADDR
// result := unit ;
3124: LD_ADDR_VAR 0 4
3128: PUSH
3129: LD_VAR 0 5
3133: ST_TO_ADDR
// end ;
3134: LD_VAR 0 4
3138: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3139: LD_INT 0
3141: PPUSH
3142: PPUSH
// if not side or not nation then
3143: LD_VAR 0 1
3147: NOT
3148: IFTRUE 3157
3150: PUSH
3151: LD_VAR 0 2
3155: NOT
3156: OR
3157: IFFALSE 3161
// exit ;
3159: GO 3955
// case nation of nation_american :
3161: LD_VAR 0 2
3165: PUSH
3166: LD_INT 1
3168: DOUBLE
3169: EQUAL
3170: IFTRUE 3174
3172: GO 3396
3174: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: LD_INT 35
3182: PUSH
3183: LD_INT 45
3185: PUSH
3186: LD_INT 46
3188: PUSH
3189: LD_INT 47
3191: PUSH
3192: LD_INT 82
3194: PUSH
3195: LD_INT 83
3197: PUSH
3198: LD_INT 84
3200: PUSH
3201: LD_INT 85
3203: PUSH
3204: LD_INT 86
3206: PUSH
3207: LD_INT 1
3209: PUSH
3210: LD_INT 2
3212: PUSH
3213: LD_INT 6
3215: PUSH
3216: LD_INT 15
3218: PUSH
3219: LD_INT 16
3221: PUSH
3222: LD_INT 7
3224: PUSH
3225: LD_INT 12
3227: PUSH
3228: LD_INT 13
3230: PUSH
3231: LD_INT 10
3233: PUSH
3234: LD_INT 14
3236: PUSH
3237: LD_INT 20
3239: PUSH
3240: LD_INT 21
3242: PUSH
3243: LD_INT 22
3245: PUSH
3246: LD_INT 25
3248: PUSH
3249: LD_INT 32
3251: PUSH
3252: LD_INT 27
3254: PUSH
3255: LD_INT 36
3257: PUSH
3258: LD_INT 69
3260: PUSH
3261: LD_INT 39
3263: PUSH
3264: LD_INT 34
3266: PUSH
3267: LD_INT 40
3269: PUSH
3270: LD_INT 48
3272: PUSH
3273: LD_INT 49
3275: PUSH
3276: LD_INT 50
3278: PUSH
3279: LD_INT 51
3281: PUSH
3282: LD_INT 52
3284: PUSH
3285: LD_INT 53
3287: PUSH
3288: LD_INT 54
3290: PUSH
3291: LD_INT 55
3293: PUSH
3294: LD_INT 56
3296: PUSH
3297: LD_INT 57
3299: PUSH
3300: LD_INT 58
3302: PUSH
3303: LD_INT 59
3305: PUSH
3306: LD_INT 60
3308: PUSH
3309: LD_INT 61
3311: PUSH
3312: LD_INT 62
3314: PUSH
3315: LD_INT 80
3317: PUSH
3318: LD_INT 82
3320: PUSH
3321: LD_INT 83
3323: PUSH
3324: LD_INT 84
3326: PUSH
3327: LD_INT 85
3329: PUSH
3330: LD_INT 86
3332: PUSH
3333: LD_INT 90
3335: PUSH
3336: LD_INT 93
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: LIST
3343: LIST
3344: LIST
3345: LIST
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: ST_TO_ADDR
3394: GO 3877
3396: LD_INT 2
3398: DOUBLE
3399: EQUAL
3400: IFTRUE 3404
3402: GO 3638
3404: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3405: LD_ADDR_VAR 0 4
3409: PUSH
3410: LD_INT 35
3412: PUSH
3413: LD_INT 45
3415: PUSH
3416: LD_INT 46
3418: PUSH
3419: LD_INT 47
3421: PUSH
3422: LD_INT 82
3424: PUSH
3425: LD_INT 83
3427: PUSH
3428: LD_INT 84
3430: PUSH
3431: LD_INT 85
3433: PUSH
3434: LD_INT 87
3436: PUSH
3437: LD_INT 70
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: LD_INT 11
3445: PUSH
3446: LD_INT 3
3448: PUSH
3449: LD_INT 4
3451: PUSH
3452: LD_INT 5
3454: PUSH
3455: LD_INT 6
3457: PUSH
3458: LD_INT 15
3460: PUSH
3461: LD_INT 18
3463: PUSH
3464: LD_INT 7
3466: PUSH
3467: LD_INT 17
3469: PUSH
3470: LD_INT 8
3472: PUSH
3473: LD_INT 20
3475: PUSH
3476: LD_INT 21
3478: PUSH
3479: LD_INT 22
3481: PUSH
3482: LD_INT 72
3484: PUSH
3485: LD_INT 26
3487: PUSH
3488: LD_INT 69
3490: PUSH
3491: LD_INT 39
3493: PUSH
3494: LD_INT 40
3496: PUSH
3497: LD_INT 41
3499: PUSH
3500: LD_INT 42
3502: PUSH
3503: LD_INT 43
3505: PUSH
3506: LD_INT 48
3508: PUSH
3509: LD_INT 49
3511: PUSH
3512: LD_INT 50
3514: PUSH
3515: LD_INT 51
3517: PUSH
3518: LD_INT 52
3520: PUSH
3521: LD_INT 53
3523: PUSH
3524: LD_INT 54
3526: PUSH
3527: LD_INT 55
3529: PUSH
3530: LD_INT 56
3532: PUSH
3533: LD_INT 60
3535: PUSH
3536: LD_INT 61
3538: PUSH
3539: LD_INT 62
3541: PUSH
3542: LD_INT 66
3544: PUSH
3545: LD_INT 67
3547: PUSH
3548: LD_INT 68
3550: PUSH
3551: LD_INT 81
3553: PUSH
3554: LD_INT 82
3556: PUSH
3557: LD_INT 83
3559: PUSH
3560: LD_INT 84
3562: PUSH
3563: LD_INT 85
3565: PUSH
3566: LD_INT 87
3568: PUSH
3569: LD_INT 88
3571: PUSH
3572: LD_INT 92
3574: PUSH
3575: LD_INT 94
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: ST_TO_ADDR
3636: GO 3877
3638: LD_INT 3
3640: DOUBLE
3641: EQUAL
3642: IFTRUE 3646
3644: GO 3876
3646: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3647: LD_ADDR_VAR 0 4
3651: PUSH
3652: LD_INT 46
3654: PUSH
3655: LD_INT 47
3657: PUSH
3658: LD_INT 1
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: LD_INT 82
3666: PUSH
3667: LD_INT 83
3669: PUSH
3670: LD_INT 84
3672: PUSH
3673: LD_INT 85
3675: PUSH
3676: LD_INT 86
3678: PUSH
3679: LD_INT 11
3681: PUSH
3682: LD_INT 9
3684: PUSH
3685: LD_INT 20
3687: PUSH
3688: LD_INT 19
3690: PUSH
3691: LD_INT 21
3693: PUSH
3694: LD_INT 24
3696: PUSH
3697: LD_INT 22
3699: PUSH
3700: LD_INT 25
3702: PUSH
3703: LD_INT 28
3705: PUSH
3706: LD_INT 29
3708: PUSH
3709: LD_INT 30
3711: PUSH
3712: LD_INT 31
3714: PUSH
3715: LD_INT 37
3717: PUSH
3718: LD_INT 38
3720: PUSH
3721: LD_INT 32
3723: PUSH
3724: LD_INT 27
3726: PUSH
3727: LD_INT 33
3729: PUSH
3730: LD_INT 69
3732: PUSH
3733: LD_INT 39
3735: PUSH
3736: LD_INT 34
3738: PUSH
3739: LD_INT 40
3741: PUSH
3742: LD_INT 71
3744: PUSH
3745: LD_INT 23
3747: PUSH
3748: LD_INT 44
3750: PUSH
3751: LD_INT 48
3753: PUSH
3754: LD_INT 49
3756: PUSH
3757: LD_INT 50
3759: PUSH
3760: LD_INT 51
3762: PUSH
3763: LD_INT 52
3765: PUSH
3766: LD_INT 53
3768: PUSH
3769: LD_INT 54
3771: PUSH
3772: LD_INT 55
3774: PUSH
3775: LD_INT 56
3777: PUSH
3778: LD_INT 57
3780: PUSH
3781: LD_INT 58
3783: PUSH
3784: LD_INT 59
3786: PUSH
3787: LD_INT 63
3789: PUSH
3790: LD_INT 64
3792: PUSH
3793: LD_INT 65
3795: PUSH
3796: LD_INT 82
3798: PUSH
3799: LD_INT 83
3801: PUSH
3802: LD_INT 84
3804: PUSH
3805: LD_INT 85
3807: PUSH
3808: LD_INT 86
3810: PUSH
3811: LD_INT 89
3813: PUSH
3814: LD_INT 91
3816: PUSH
3817: EMPTY
3818: LIST
3819: LIST
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: LIST
3834: LIST
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: ST_TO_ADDR
3874: GO 3877
3876: POP
// if state > - 1 and state < 3 then
3877: LD_VAR 0 3
3881: PUSH
3882: LD_INT 1
3884: NEG
3885: GREATER
3886: IFFALSE 3898
3888: PUSH
3889: LD_VAR 0 3
3893: PUSH
3894: LD_INT 3
3896: LESS
3897: AND
3898: IFFALSE 3955
// for i in result do
3900: LD_ADDR_VAR 0 5
3904: PUSH
3905: LD_VAR 0 4
3909: PUSH
3910: FOR_IN
3911: IFFALSE 3953
// if GetTech ( i , side ) <> state then
3913: LD_VAR 0 5
3917: PPUSH
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 321
3927: PUSH
3928: LD_VAR 0 3
3932: NONEQUAL
3933: IFFALSE 3951
// result := result diff i ;
3935: LD_ADDR_VAR 0 4
3939: PUSH
3940: LD_VAR 0 4
3944: PUSH
3945: LD_VAR 0 5
3949: DIFF
3950: ST_TO_ADDR
3951: GO 3910
3953: POP
3954: POP
// end ;
3955: LD_VAR 0 4
3959: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3960: LD_INT 0
3962: PPUSH
3963: PPUSH
3964: PPUSH
// result := true ;
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: LD_INT 1
3972: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3973: LD_ADDR_VAR 0 5
3977: PUSH
3978: LD_VAR 0 2
3982: PPUSH
3983: CALL_OW 480
3987: ST_TO_ADDR
// if not tmp then
3988: LD_VAR 0 5
3992: NOT
3993: IFFALSE 3997
// exit ;
3995: GO 4046
// for i in tmp do
3997: LD_ADDR_VAR 0 4
4001: PUSH
4002: LD_VAR 0 5
4006: PUSH
4007: FOR_IN
4008: IFFALSE 4044
// if GetTech ( i , side ) <> state_researched then
4010: LD_VAR 0 4
4014: PPUSH
4015: LD_VAR 0 1
4019: PPUSH
4020: CALL_OW 321
4024: PUSH
4025: LD_INT 2
4027: NONEQUAL
4028: IFFALSE 4042
// begin result := false ;
4030: LD_ADDR_VAR 0 3
4034: PUSH
4035: LD_INT 0
4037: ST_TO_ADDR
// exit ;
4038: POP
4039: POP
4040: GO 4046
// end ;
4042: GO 4007
4044: POP
4045: POP
// end ;
4046: LD_VAR 0 3
4050: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4051: LD_INT 0
4053: PPUSH
4054: PPUSH
4055: PPUSH
4056: PPUSH
4057: PPUSH
4058: PPUSH
4059: PPUSH
4060: PPUSH
4061: PPUSH
4062: PPUSH
4063: PPUSH
4064: PPUSH
4065: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4066: LD_VAR 0 1
4070: NOT
4071: IFTRUE 4088
4073: PUSH
4074: LD_VAR 0 1
4078: PPUSH
4079: CALL_OW 257
4083: PUSH
4084: LD_INT 9
4086: NONEQUAL
4087: OR
4088: IFFALSE 4092
// exit ;
4090: GO 4671
// side := GetSide ( unit ) ;
4092: LD_ADDR_VAR 0 9
4096: PUSH
4097: LD_VAR 0 1
4101: PPUSH
4102: CALL_OW 255
4106: ST_TO_ADDR
// tech_space := tech_spacanom ;
4107: LD_ADDR_VAR 0 12
4111: PUSH
4112: LD_INT 29
4114: ST_TO_ADDR
// tech_time := tech_taurad ;
4115: LD_ADDR_VAR 0 13
4119: PUSH
4120: LD_INT 28
4122: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4123: LD_ADDR_VAR 0 11
4127: PUSH
4128: LD_VAR 0 1
4132: PPUSH
4133: CALL_OW 310
4137: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4138: LD_VAR 0 11
4142: PPUSH
4143: CALL_OW 247
4147: PUSH
4148: LD_INT 2
4150: EQUAL
4151: IFFALSE 4155
// exit ;
4153: GO 4671
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4155: LD_ADDR_VAR 0 8
4159: PUSH
4160: LD_INT 81
4162: PUSH
4163: LD_VAR 0 9
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 21
4177: PUSH
4178: LD_INT 3
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 69
4197: ST_TO_ADDR
// if not tmp then
4198: LD_VAR 0 8
4202: NOT
4203: IFFALSE 4207
// exit ;
4205: GO 4671
// if in_unit then
4207: LD_VAR 0 11
4211: IFFALSE 4235
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4213: LD_ADDR_VAR 0 10
4217: PUSH
4218: LD_VAR 0 8
4222: PPUSH
4223: LD_VAR 0 11
4227: PPUSH
4228: CALL_OW 74
4232: ST_TO_ADDR
4233: GO 4255
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4235: LD_ADDR_VAR 0 10
4239: PUSH
4240: LD_VAR 0 8
4244: PPUSH
4245: LD_VAR 0 1
4249: PPUSH
4250: CALL_OW 74
4254: ST_TO_ADDR
// if not enemy then
4255: LD_VAR 0 10
4259: NOT
4260: IFFALSE 4264
// exit ;
4262: GO 4671
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4264: LD_VAR 0 11
4268: IFFALSE 4290
4270: PUSH
4271: LD_VAR 0 11
4275: PPUSH
4276: LD_VAR 0 10
4280: PPUSH
4281: CALL_OW 296
4285: PUSH
4286: LD_INT 13
4288: GREATER
4289: AND
4290: IFTRUE 4312
4292: PUSH
4293: LD_VAR 0 1
4297: PPUSH
4298: LD_VAR 0 10
4302: PPUSH
4303: CALL_OW 296
4307: PUSH
4308: LD_INT 12
4310: GREATER
4311: OR
4312: IFFALSE 4316
// exit ;
4314: GO 4671
// missile := [ 1 ] ;
4316: LD_ADDR_VAR 0 14
4320: PUSH
4321: LD_INT 1
4323: PUSH
4324: EMPTY
4325: LIST
4326: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4327: LD_VAR 0 9
4331: PPUSH
4332: LD_VAR 0 12
4336: PPUSH
4337: CALL_OW 325
4341: IFFALSE 4370
// missile := Replace ( missile , missile + 1 , 2 ) ;
4343: LD_ADDR_VAR 0 14
4347: PUSH
4348: LD_VAR 0 14
4352: PPUSH
4353: LD_VAR 0 14
4357: PUSH
4358: LD_INT 1
4360: PLUS
4361: PPUSH
4362: LD_INT 2
4364: PPUSH
4365: CALL_OW 1
4369: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4370: LD_VAR 0 9
4374: PPUSH
4375: LD_VAR 0 13
4379: PPUSH
4380: CALL_OW 325
4384: IFFALSE 4408
4386: PUSH
4387: LD_VAR 0 10
4391: PPUSH
4392: CALL_OW 255
4396: PPUSH
4397: LD_VAR 0 13
4401: PPUSH
4402: CALL_OW 325
4406: NOT
4407: AND
4408: IFFALSE 4437
// missile := Replace ( missile , missile + 1 , 3 ) ;
4410: LD_ADDR_VAR 0 14
4414: PUSH
4415: LD_VAR 0 14
4419: PPUSH
4420: LD_VAR 0 14
4424: PUSH
4425: LD_INT 1
4427: PLUS
4428: PPUSH
4429: LD_INT 3
4431: PPUSH
4432: CALL_OW 1
4436: ST_TO_ADDR
// if missile < 2 then
4437: LD_VAR 0 14
4441: PUSH
4442: LD_INT 2
4444: LESS
4445: IFFALSE 4449
// exit ;
4447: GO 4671
// x := GetX ( enemy ) ;
4449: LD_ADDR_VAR 0 4
4453: PUSH
4454: LD_VAR 0 10
4458: PPUSH
4459: CALL_OW 250
4463: ST_TO_ADDR
// y := GetY ( enemy ) ;
4464: LD_ADDR_VAR 0 5
4468: PUSH
4469: LD_VAR 0 10
4473: PPUSH
4474: CALL_OW 251
4478: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4479: LD_ADDR_VAR 0 6
4483: PUSH
4484: LD_VAR 0 4
4488: PUSH
4489: LD_INT 1
4491: NEG
4492: PPUSH
4493: LD_INT 1
4495: PPUSH
4496: CALL_OW 12
4500: PLUS
4501: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4502: LD_ADDR_VAR 0 7
4506: PUSH
4507: LD_VAR 0 5
4511: PUSH
4512: LD_INT 1
4514: NEG
4515: PPUSH
4516: LD_INT 1
4518: PPUSH
4519: CALL_OW 12
4523: PLUS
4524: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4525: LD_VAR 0 6
4529: PPUSH
4530: LD_VAR 0 7
4534: PPUSH
4535: CALL_OW 488
4539: NOT
4540: IFFALSE 4562
// begin _x := x ;
4542: LD_ADDR_VAR 0 6
4546: PUSH
4547: LD_VAR 0 4
4551: ST_TO_ADDR
// _y := y ;
4552: LD_ADDR_VAR 0 7
4556: PUSH
4557: LD_VAR 0 5
4561: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4562: LD_ADDR_VAR 0 3
4566: PUSH
4567: LD_INT 1
4569: PPUSH
4570: LD_VAR 0 14
4574: PPUSH
4575: CALL_OW 12
4579: ST_TO_ADDR
// case i of 1 :
4580: LD_VAR 0 3
4584: PUSH
4585: LD_INT 1
4587: DOUBLE
4588: EQUAL
4589: IFTRUE 4593
4591: GO 4610
4593: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4594: LD_VAR 0 1
4598: PPUSH
4599: LD_VAR 0 10
4603: PPUSH
4604: CALL_OW 115
4608: GO 4671
4610: LD_INT 2
4612: DOUBLE
4613: EQUAL
4614: IFTRUE 4618
4616: GO 4640
4618: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4619: LD_VAR 0 1
4623: PPUSH
4624: LD_VAR 0 6
4628: PPUSH
4629: LD_VAR 0 7
4633: PPUSH
4634: CALL_OW 153
4638: GO 4671
4640: LD_INT 3
4642: DOUBLE
4643: EQUAL
4644: IFTRUE 4648
4646: GO 4670
4648: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4649: LD_VAR 0 1
4653: PPUSH
4654: LD_VAR 0 6
4658: PPUSH
4659: LD_VAR 0 7
4663: PPUSH
4664: CALL_OW 154
4668: GO 4671
4670: POP
// end ;
4671: LD_VAR 0 2
4675: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4676: LD_INT 0
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
4682: PPUSH
4683: PPUSH
// if not unit or not building then
4684: LD_VAR 0 1
4688: NOT
4689: IFTRUE 4698
4691: PUSH
4692: LD_VAR 0 2
4696: NOT
4697: OR
4698: IFFALSE 4702
// exit ;
4700: GO 4860
// x := GetX ( building ) ;
4702: LD_ADDR_VAR 0 5
4706: PUSH
4707: LD_VAR 0 2
4711: PPUSH
4712: CALL_OW 250
4716: ST_TO_ADDR
// y := GetY ( building ) ;
4717: LD_ADDR_VAR 0 6
4721: PUSH
4722: LD_VAR 0 2
4726: PPUSH
4727: CALL_OW 251
4731: ST_TO_ADDR
// for i := 0 to 5 do
4732: LD_ADDR_VAR 0 4
4736: PUSH
4737: DOUBLE
4738: LD_INT 0
4740: DEC
4741: ST_TO_ADDR
4742: LD_INT 5
4744: PUSH
4745: FOR_TO
4746: IFFALSE 4858
// begin _x := ShiftX ( x , i , 3 ) ;
4748: LD_ADDR_VAR 0 7
4752: PUSH
4753: LD_VAR 0 5
4757: PPUSH
4758: LD_VAR 0 4
4762: PPUSH
4763: LD_INT 3
4765: PPUSH
4766: CALL_OW 272
4770: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4771: LD_ADDR_VAR 0 8
4775: PUSH
4776: LD_VAR 0 6
4780: PPUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: LD_INT 3
4788: PPUSH
4789: CALL_OW 273
4793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4794: LD_VAR 0 7
4798: PPUSH
4799: LD_VAR 0 8
4803: PPUSH
4804: CALL_OW 488
4808: NOT
4809: IFFALSE 4813
// continue ;
4811: GO 4745
// if HexInfo ( _x , _y ) = 0 then
4813: LD_VAR 0 7
4817: PPUSH
4818: LD_VAR 0 8
4822: PPUSH
4823: CALL_OW 428
4827: PUSH
4828: LD_INT 0
4830: EQUAL
4831: IFFALSE 4856
// begin ComMoveXY ( unit , _x , _y ) ;
4833: LD_VAR 0 1
4837: PPUSH
4838: LD_VAR 0 7
4842: PPUSH
4843: LD_VAR 0 8
4847: PPUSH
4848: CALL_OW 111
// exit ;
4852: POP
4853: POP
4854: GO 4860
// end ; end ;
4856: GO 4745
4858: POP
4859: POP
// end ;
4860: LD_VAR 0 3
4864: RET
// export function ScanBase ( side , base_area ) ; begin
4865: LD_INT 0
4867: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4868: LD_ADDR_VAR 0 3
4872: PUSH
4873: LD_VAR 0 2
4877: PPUSH
4878: LD_INT 81
4880: PUSH
4881: LD_VAR 0 1
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PPUSH
4890: CALL_OW 70
4894: ST_TO_ADDR
// end ;
4895: LD_VAR 0 3
4899: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4900: LD_INT 0
4902: PPUSH
4903: PPUSH
4904: PPUSH
4905: PPUSH
// result := false ;
4906: LD_ADDR_VAR 0 2
4910: PUSH
4911: LD_INT 0
4913: ST_TO_ADDR
// side := GetSide ( unit ) ;
4914: LD_ADDR_VAR 0 3
4918: PUSH
4919: LD_VAR 0 1
4923: PPUSH
4924: CALL_OW 255
4928: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4929: LD_ADDR_VAR 0 4
4933: PUSH
4934: LD_VAR 0 1
4938: PPUSH
4939: CALL_OW 248
4943: ST_TO_ADDR
// case nat of 1 :
4944: LD_VAR 0 4
4948: PUSH
4949: LD_INT 1
4951: DOUBLE
4952: EQUAL
4953: IFTRUE 4957
4955: GO 4968
4957: POP
// tech := tech_lassight ; 2 :
4958: LD_ADDR_VAR 0 5
4962: PUSH
4963: LD_INT 12
4965: ST_TO_ADDR
4966: GO 5007
4968: LD_INT 2
4970: DOUBLE
4971: EQUAL
4972: IFTRUE 4976
4974: GO 4987
4976: POP
// tech := tech_mortar ; 3 :
4977: LD_ADDR_VAR 0 5
4981: PUSH
4982: LD_INT 41
4984: ST_TO_ADDR
4985: GO 5007
4987: LD_INT 3
4989: DOUBLE
4990: EQUAL
4991: IFTRUE 4995
4993: GO 5006
4995: POP
// tech := tech_bazooka ; end ;
4996: LD_ADDR_VAR 0 5
5000: PUSH
5001: LD_INT 44
5003: ST_TO_ADDR
5004: GO 5007
5006: POP
// if Researched ( side , tech ) then
5007: LD_VAR 0 3
5011: PPUSH
5012: LD_VAR 0 5
5016: PPUSH
5017: CALL_OW 325
5021: IFFALSE 5048
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5023: LD_ADDR_VAR 0 2
5027: PUSH
5028: LD_INT 5
5030: PUSH
5031: LD_INT 8
5033: PUSH
5034: LD_INT 9
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: PUSH
5042: LD_VAR 0 4
5046: ARRAY
5047: ST_TO_ADDR
// end ;
5048: LD_VAR 0 2
5052: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5053: LD_INT 0
5055: PPUSH
5056: PPUSH
5057: PPUSH
// if not mines then
5058: LD_VAR 0 2
5062: NOT
5063: IFFALSE 5067
// exit ;
5065: GO 5211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5067: LD_ADDR_VAR 0 5
5071: PUSH
5072: LD_INT 81
5074: PUSH
5075: LD_VAR 0 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 3
5086: PUSH
5087: LD_INT 21
5089: PUSH
5090: LD_INT 3
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: PPUSH
5105: CALL_OW 69
5109: ST_TO_ADDR
// for i in mines do
5110: LD_ADDR_VAR 0 4
5114: PUSH
5115: LD_VAR 0 2
5119: PUSH
5120: FOR_IN
5121: IFFALSE 5209
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5123: LD_VAR 0 4
5127: PUSH
5128: LD_INT 1
5130: ARRAY
5131: PPUSH
5132: LD_VAR 0 4
5136: PUSH
5137: LD_INT 2
5139: ARRAY
5140: PPUSH
5141: CALL_OW 458
5145: NOT
5146: IFFALSE 5150
// continue ;
5148: GO 5120
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5150: LD_VAR 0 4
5154: PUSH
5155: LD_INT 1
5157: ARRAY
5158: PPUSH
5159: LD_VAR 0 4
5163: PUSH
5164: LD_INT 2
5166: ARRAY
5167: PPUSH
5168: CALL_OW 428
5172: PUSH
5173: LD_VAR 0 5
5177: IN
5178: IFFALSE 5207
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5180: LD_VAR 0 4
5184: PUSH
5185: LD_INT 1
5187: ARRAY
5188: PPUSH
5189: LD_VAR 0 4
5193: PUSH
5194: LD_INT 2
5196: ARRAY
5197: PPUSH
5198: LD_VAR 0 1
5202: PPUSH
5203: CALL_OW 456
// end ;
5207: GO 5120
5209: POP
5210: POP
// end ;
5211: LD_VAR 0 3
5215: RET
// export function Count ( array ) ; begin
5216: LD_INT 0
5218: PPUSH
// result := array + 0 ;
5219: LD_ADDR_VAR 0 2
5223: PUSH
5224: LD_VAR 0 1
5228: PUSH
5229: LD_INT 0
5231: PLUS
5232: ST_TO_ADDR
// end ;
5233: LD_VAR 0 2
5237: RET
// export function IsEmpty ( building ) ; begin
5238: LD_INT 0
5240: PPUSH
// if not building then
5241: LD_VAR 0 1
5245: NOT
5246: IFFALSE 5250
// exit ;
5248: GO 5293
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5250: LD_ADDR_VAR 0 2
5254: PUSH
5255: LD_VAR 0 1
5259: PUSH
5260: LD_INT 22
5262: PUSH
5263: LD_VAR 0 1
5267: PPUSH
5268: CALL_OW 255
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: PUSH
5277: LD_INT 58
5279: PUSH
5280: EMPTY
5281: LIST
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PPUSH
5287: CALL_OW 69
5291: IN
5292: ST_TO_ADDR
// end ;
5293: LD_VAR 0 2
5297: RET
// export function IsNotFull ( building ) ; var places ; begin
5298: LD_INT 0
5300: PPUSH
5301: PPUSH
// if not building then
5302: LD_VAR 0 1
5306: NOT
5307: IFFALSE 5311
// exit ;
5309: GO 5339
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5311: LD_ADDR_VAR 0 2
5315: PUSH
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_INT 3
5323: PUSH
5324: LD_INT 62
5326: PUSH
5327: EMPTY
5328: LIST
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 72
5338: ST_TO_ADDR
// end ;
5339: LD_VAR 0 2
5343: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5344: LD_INT 0
5346: PPUSH
5347: PPUSH
5348: PPUSH
5349: PPUSH
// tmp := [ ] ;
5350: LD_ADDR_VAR 0 3
5354: PUSH
5355: EMPTY
5356: ST_TO_ADDR
// list := [ ] ;
5357: LD_ADDR_VAR 0 5
5361: PUSH
5362: EMPTY
5363: ST_TO_ADDR
// for i = 16 to 25 do
5364: LD_ADDR_VAR 0 4
5368: PUSH
5369: DOUBLE
5370: LD_INT 16
5372: DEC
5373: ST_TO_ADDR
5374: LD_INT 25
5376: PUSH
5377: FOR_TO
5378: IFFALSE 5451
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5380: LD_ADDR_VAR 0 3
5384: PUSH
5385: LD_VAR 0 3
5389: PUSH
5390: LD_INT 22
5392: PUSH
5393: LD_VAR 0 1
5397: PPUSH
5398: CALL_OW 255
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 91
5409: PUSH
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 6
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: LIST
5422: PUSH
5423: LD_INT 30
5425: PUSH
5426: LD_VAR 0 4
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: EMPTY
5441: LIST
5442: PPUSH
5443: CALL_OW 69
5447: ADD
5448: ST_TO_ADDR
5449: GO 5377
5451: POP
5452: POP
// for i = 1 to tmp do
5453: LD_ADDR_VAR 0 4
5457: PUSH
5458: DOUBLE
5459: LD_INT 1
5461: DEC
5462: ST_TO_ADDR
5463: LD_VAR 0 3
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5557
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5471: LD_ADDR_VAR 0 5
5475: PUSH
5476: LD_VAR 0 5
5480: PUSH
5481: LD_VAR 0 3
5485: PUSH
5486: LD_VAR 0 4
5490: ARRAY
5491: PPUSH
5492: CALL_OW 266
5496: PUSH
5497: LD_VAR 0 3
5501: PUSH
5502: LD_VAR 0 4
5506: ARRAY
5507: PPUSH
5508: CALL_OW 250
5512: PUSH
5513: LD_VAR 0 3
5517: PUSH
5518: LD_VAR 0 4
5522: ARRAY
5523: PPUSH
5524: CALL_OW 251
5528: PUSH
5529: LD_VAR 0 3
5533: PUSH
5534: LD_VAR 0 4
5538: ARRAY
5539: PPUSH
5540: CALL_OW 254
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: LIST
5549: LIST
5550: PUSH
5551: EMPTY
5552: LIST
5553: ADD
5554: ST_TO_ADDR
5555: GO 5468
5557: POP
5558: POP
// result := list ;
5559: LD_ADDR_VAR 0 2
5563: PUSH
5564: LD_VAR 0 5
5568: ST_TO_ADDR
// end ;
5569: LD_VAR 0 2
5573: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5574: LD_INT 0
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
// if not factory then
5583: LD_VAR 0 1
5587: NOT
5588: IFFALSE 5592
// exit ;
5590: GO 6195
// if control = control_apeman then
5592: LD_VAR 0 4
5596: PUSH
5597: LD_INT 5
5599: EQUAL
5600: IFFALSE 5709
// begin tmp := UnitsInside ( factory ) ;
5602: LD_ADDR_VAR 0 8
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: CALL_OW 313
5616: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5617: LD_VAR 0 8
5621: PPUSH
5622: LD_INT 25
5624: PUSH
5625: LD_INT 12
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PPUSH
5632: CALL_OW 72
5636: NOT
5637: IFFALSE 5647
// control := control_manual ;
5639: LD_ADDR_VAR 0 4
5643: PUSH
5644: LD_INT 1
5646: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5647: LD_ADDR_VAR 0 8
5651: PUSH
5652: LD_VAR 0 1
5656: PPUSH
5657: CALL 5344 0 1
5661: ST_TO_ADDR
// if tmp then
5662: LD_VAR 0 8
5666: IFFALSE 5709
// begin for i in tmp do
5668: LD_ADDR_VAR 0 7
5672: PUSH
5673: LD_VAR 0 8
5677: PUSH
5678: FOR_IN
5679: IFFALSE 5707
// if i [ 1 ] = b_ext_radio then
5681: LD_VAR 0 7
5685: PUSH
5686: LD_INT 1
5688: ARRAY
5689: PUSH
5690: LD_INT 22
5692: EQUAL
5693: IFFALSE 5705
// begin control := control_remote ;
5695: LD_ADDR_VAR 0 4
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// break ;
5703: GO 5707
// end ;
5705: GO 5678
5707: POP
5708: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5709: LD_VAR 0 1
5713: PPUSH
5714: LD_VAR 0 2
5718: PPUSH
5719: LD_VAR 0 3
5723: PPUSH
5724: LD_VAR 0 4
5728: PPUSH
5729: LD_VAR 0 5
5733: PPUSH
5734: CALL_OW 448
5738: IFFALSE 5773
// begin result := [ chassis , engine , control , weapon ] ;
5740: LD_ADDR_VAR 0 6
5744: PUSH
5745: LD_VAR 0 2
5749: PUSH
5750: LD_VAR 0 3
5754: PUSH
5755: LD_VAR 0 4
5759: PUSH
5760: LD_VAR 0 5
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: ST_TO_ADDR
// exit ;
5771: GO 6195
// end ; _chassis := AvailableChassisList ( factory ) ;
5773: LD_ADDR_VAR 0 9
5777: PUSH
5778: LD_VAR 0 1
5782: PPUSH
5783: CALL_OW 475
5787: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5788: LD_ADDR_VAR 0 11
5792: PUSH
5793: LD_VAR 0 1
5797: PPUSH
5798: CALL_OW 476
5802: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5803: LD_ADDR_VAR 0 12
5807: PUSH
5808: LD_VAR 0 1
5812: PPUSH
5813: CALL_OW 477
5817: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5818: LD_ADDR_VAR 0 10
5822: PUSH
5823: LD_VAR 0 1
5827: PPUSH
5828: CALL_OW 478
5832: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5833: LD_VAR 0 9
5837: NOT
5838: IFTRUE 5847
5840: PUSH
5841: LD_VAR 0 11
5845: NOT
5846: OR
5847: IFTRUE 5856
5849: PUSH
5850: LD_VAR 0 12
5854: NOT
5855: OR
5856: IFTRUE 5865
5858: PUSH
5859: LD_VAR 0 10
5863: NOT
5864: OR
5865: IFFALSE 5900
// begin result := [ chassis , engine , control , weapon ] ;
5867: LD_ADDR_VAR 0 6
5871: PUSH
5872: LD_VAR 0 2
5876: PUSH
5877: LD_VAR 0 3
5881: PUSH
5882: LD_VAR 0 4
5886: PUSH
5887: LD_VAR 0 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: ST_TO_ADDR
// exit ;
5898: GO 6195
// end ; if not chassis in _chassis then
5900: LD_VAR 0 2
5904: PUSH
5905: LD_VAR 0 9
5909: IN
5910: NOT
5911: IFFALSE 5937
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5913: LD_ADDR_VAR 0 2
5917: PUSH
5918: LD_VAR 0 9
5922: PUSH
5923: LD_INT 1
5925: PPUSH
5926: LD_VAR 0 9
5930: PPUSH
5931: CALL_OW 12
5935: ARRAY
5936: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5937: LD_VAR 0 2
5941: PPUSH
5942: LD_VAR 0 3
5946: PPUSH
5947: CALL 6200 0 2
5951: NOT
5952: IFFALSE 6013
// repeat engine := _engine [ 1 ] ;
5954: LD_ADDR_VAR 0 3
5958: PUSH
5959: LD_VAR 0 11
5963: PUSH
5964: LD_INT 1
5966: ARRAY
5967: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5968: LD_ADDR_VAR 0 11
5972: PUSH
5973: LD_VAR 0 11
5977: PPUSH
5978: LD_INT 1
5980: PPUSH
5981: CALL_OW 3
5985: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5986: LD_VAR 0 2
5990: PPUSH
5991: LD_VAR 0 3
5995: PPUSH
5996: CALL 6200 0 2
6000: IFTRUE 6011
6002: PUSH
6003: LD_VAR 0 11
6007: PUSH
6008: EMPTY
6009: EQUAL
6010: OR
6011: IFFALSE 5954
// if not control in _control then
6013: LD_VAR 0 4
6017: PUSH
6018: LD_VAR 0 12
6022: IN
6023: NOT
6024: IFFALSE 6050
// control := _control [ rand ( 1 , _control ) ] ;
6026: LD_ADDR_VAR 0 4
6030: PUSH
6031: LD_VAR 0 12
6035: PUSH
6036: LD_INT 1
6038: PPUSH
6039: LD_VAR 0 12
6043: PPUSH
6044: CALL_OW 12
6048: ARRAY
6049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6050: LD_VAR 0 2
6054: PPUSH
6055: LD_VAR 0 5
6059: PPUSH
6060: CALL 6422 0 2
6064: NOT
6065: IFFALSE 6126
// repeat weapon := _weapon [ 1 ] ;
6067: LD_ADDR_VAR 0 5
6071: PUSH
6072: LD_VAR 0 10
6076: PUSH
6077: LD_INT 1
6079: ARRAY
6080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6081: LD_ADDR_VAR 0 10
6085: PUSH
6086: LD_VAR 0 10
6090: PPUSH
6091: LD_INT 1
6093: PPUSH
6094: CALL_OW 3
6098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6099: LD_VAR 0 2
6103: PPUSH
6104: LD_VAR 0 5
6108: PPUSH
6109: CALL 6422 0 2
6113: IFTRUE 6124
6115: PUSH
6116: LD_VAR 0 10
6120: PUSH
6121: EMPTY
6122: EQUAL
6123: OR
6124: IFFALSE 6067
// result := [ ] ;
6126: LD_ADDR_VAR 0 6
6130: PUSH
6131: EMPTY
6132: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6133: LD_VAR 0 1
6137: PPUSH
6138: LD_VAR 0 2
6142: PPUSH
6143: LD_VAR 0 3
6147: PPUSH
6148: LD_VAR 0 4
6152: PPUSH
6153: LD_VAR 0 5
6157: PPUSH
6158: CALL_OW 448
6162: IFFALSE 6195
// result := [ chassis , engine , control , weapon ] ;
6164: LD_ADDR_VAR 0 6
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: LD_VAR 0 3
6178: PUSH
6179: LD_VAR 0 4
6183: PUSH
6184: LD_VAR 0 5
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: ST_TO_ADDR
// end ;
6195: LD_VAR 0 6
6199: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6200: LD_INT 0
6202: PPUSH
// if not chassis or not engine then
6203: LD_VAR 0 1
6207: NOT
6208: IFTRUE 6217
6210: PUSH
6211: LD_VAR 0 2
6215: NOT
6216: OR
6217: IFFALSE 6221
// exit ;
6219: GO 6417
// case engine of engine_solar :
6221: LD_VAR 0 2
6225: PUSH
6226: LD_INT 2
6228: DOUBLE
6229: EQUAL
6230: IFTRUE 6234
6232: GO 6272
6234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6235: LD_ADDR_VAR 0 3
6239: PUSH
6240: LD_INT 11
6242: PUSH
6243: LD_INT 12
6245: PUSH
6246: LD_INT 13
6248: PUSH
6249: LD_INT 14
6251: PUSH
6252: LD_INT 1
6254: PUSH
6255: LD_INT 2
6257: PUSH
6258: LD_INT 3
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: ST_TO_ADDR
6270: GO 6401
6272: LD_INT 1
6274: DOUBLE
6275: EQUAL
6276: IFTRUE 6280
6278: GO 6342
6280: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6281: LD_ADDR_VAR 0 3
6285: PUSH
6286: LD_INT 11
6288: PUSH
6289: LD_INT 12
6291: PUSH
6292: LD_INT 13
6294: PUSH
6295: LD_INT 14
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 3
6306: PUSH
6307: LD_INT 4
6309: PUSH
6310: LD_INT 5
6312: PUSH
6313: LD_INT 21
6315: PUSH
6316: LD_INT 23
6318: PUSH
6319: LD_INT 22
6321: PUSH
6322: LD_INT 24
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: ST_TO_ADDR
6340: GO 6401
6342: LD_INT 3
6344: DOUBLE
6345: EQUAL
6346: IFTRUE 6350
6348: GO 6400
6350: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6351: LD_ADDR_VAR 0 3
6355: PUSH
6356: LD_INT 13
6358: PUSH
6359: LD_INT 14
6361: PUSH
6362: LD_INT 2
6364: PUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 4
6370: PUSH
6371: LD_INT 5
6373: PUSH
6374: LD_INT 21
6376: PUSH
6377: LD_INT 22
6379: PUSH
6380: LD_INT 23
6382: PUSH
6383: LD_INT 24
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: ST_TO_ADDR
6398: GO 6401
6400: POP
// result := ( chassis in result ) ;
6401: LD_ADDR_VAR 0 3
6405: PUSH
6406: LD_VAR 0 1
6410: PUSH
6411: LD_VAR 0 3
6415: IN
6416: ST_TO_ADDR
// end ;
6417: LD_VAR 0 3
6421: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6422: LD_INT 0
6424: PPUSH
// if not chassis or not weapon then
6425: LD_VAR 0 1
6429: NOT
6430: IFTRUE 6439
6432: PUSH
6433: LD_VAR 0 2
6437: NOT
6438: OR
6439: IFFALSE 6443
// exit ;
6441: GO 7537
// case weapon of us_machine_gun :
6443: LD_VAR 0 2
6447: PUSH
6448: LD_INT 2
6450: DOUBLE
6451: EQUAL
6452: IFTRUE 6456
6454: GO 6486
6456: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6457: LD_ADDR_VAR 0 3
6461: PUSH
6462: LD_INT 1
6464: PUSH
6465: LD_INT 2
6467: PUSH
6468: LD_INT 3
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 7521
6486: LD_INT 3
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6524
6494: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6495: LD_ADDR_VAR 0 3
6499: PUSH
6500: LD_INT 1
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 3
6508: PUSH
6509: LD_INT 4
6511: PUSH
6512: LD_INT 5
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: ST_TO_ADDR
6522: GO 7521
6524: LD_INT 11
6526: DOUBLE
6527: EQUAL
6528: IFTRUE 6532
6530: GO 6562
6532: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6533: LD_ADDR_VAR 0 3
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: LD_INT 3
6546: PUSH
6547: LD_INT 4
6549: PUSH
6550: LD_INT 5
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: ST_TO_ADDR
6560: GO 7521
6562: LD_INT 4
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6596
6570: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6571: LD_ADDR_VAR 0 3
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 3
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: LD_INT 5
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: ST_TO_ADDR
6594: GO 7521
6596: LD_INT 5
6598: DOUBLE
6599: EQUAL
6600: IFTRUE 6604
6602: GO 6630
6604: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6605: LD_ADDR_VAR 0 3
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: ST_TO_ADDR
6628: GO 7521
6630: LD_INT 9
6632: DOUBLE
6633: EQUAL
6634: IFTRUE 6638
6636: GO 6664
6638: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6639: LD_ADDR_VAR 0 3
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: LD_INT 3
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: LD_INT 5
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: ST_TO_ADDR
6662: GO 7521
6664: LD_INT 7
6666: DOUBLE
6667: EQUAL
6668: IFTRUE 6672
6670: GO 6698
6672: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 2
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 4
6686: PUSH
6687: LD_INT 5
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: ST_TO_ADDR
6696: GO 7521
6698: LD_INT 12
6700: DOUBLE
6701: EQUAL
6702: IFTRUE 6706
6704: GO 6732
6706: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6707: LD_ADDR_VAR 0 3
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 3
6717: PUSH
6718: LD_INT 4
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: ST_TO_ADDR
6730: GO 7521
6732: LD_INT 13
6734: DOUBLE
6735: EQUAL
6736: IFTRUE 6740
6738: GO 6766
6740: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6741: LD_ADDR_VAR 0 3
6745: PUSH
6746: LD_INT 2
6748: PUSH
6749: LD_INT 3
6751: PUSH
6752: LD_INT 4
6754: PUSH
6755: LD_INT 5
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: ST_TO_ADDR
6764: GO 7521
6766: LD_INT 14
6768: DOUBLE
6769: EQUAL
6770: IFTRUE 6774
6772: GO 6792
6774: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6775: LD_ADDR_VAR 0 3
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: ST_TO_ADDR
6790: GO 7521
6792: LD_INT 6
6794: DOUBLE
6795: EQUAL
6796: IFTRUE 6800
6798: GO 6818
6800: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6801: LD_ADDR_VAR 0 3
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: LD_INT 5
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: ST_TO_ADDR
6816: GO 7521
6818: LD_INT 10
6820: DOUBLE
6821: EQUAL
6822: IFTRUE 6826
6824: GO 6844
6826: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6827: LD_ADDR_VAR 0 3
6831: PUSH
6832: LD_INT 4
6834: PUSH
6835: LD_INT 5
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: ST_TO_ADDR
6842: GO 7521
6844: LD_INT 22
6846: DOUBLE
6847: EQUAL
6848: IFTRUE 6852
6850: GO 6878
6852: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6853: LD_ADDR_VAR 0 3
6857: PUSH
6858: LD_INT 11
6860: PUSH
6861: LD_INT 12
6863: PUSH
6864: LD_INT 13
6866: PUSH
6867: LD_INT 14
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: ST_TO_ADDR
6876: GO 7521
6878: LD_INT 23
6880: DOUBLE
6881: EQUAL
6882: IFTRUE 6886
6884: GO 6912
6886: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6887: LD_ADDR_VAR 0 3
6891: PUSH
6892: LD_INT 11
6894: PUSH
6895: LD_INT 12
6897: PUSH
6898: LD_INT 13
6900: PUSH
6901: LD_INT 14
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: ST_TO_ADDR
6910: GO 7521
6912: LD_INT 24
6914: DOUBLE
6915: EQUAL
6916: IFTRUE 6920
6918: GO 6946
6920: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6921: LD_ADDR_VAR 0 3
6925: PUSH
6926: LD_INT 11
6928: PUSH
6929: LD_INT 12
6931: PUSH
6932: LD_INT 13
6934: PUSH
6935: LD_INT 14
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: ST_TO_ADDR
6944: GO 7521
6946: LD_INT 30
6948: DOUBLE
6949: EQUAL
6950: IFTRUE 6954
6952: GO 6980
6954: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6955: LD_ADDR_VAR 0 3
6959: PUSH
6960: LD_INT 11
6962: PUSH
6963: LD_INT 12
6965: PUSH
6966: LD_INT 13
6968: PUSH
6969: LD_INT 14
6971: PUSH
6972: EMPTY
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: ST_TO_ADDR
6978: GO 7521
6980: LD_INT 25
6982: DOUBLE
6983: EQUAL
6984: IFTRUE 6988
6986: GO 7006
6988: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6989: LD_ADDR_VAR 0 3
6993: PUSH
6994: LD_INT 13
6996: PUSH
6997: LD_INT 14
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: ST_TO_ADDR
7004: GO 7521
7006: LD_INT 27
7008: DOUBLE
7009: EQUAL
7010: IFTRUE 7014
7012: GO 7032
7014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7015: LD_ADDR_VAR 0 3
7019: PUSH
7020: LD_INT 13
7022: PUSH
7023: LD_INT 14
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: ST_TO_ADDR
7030: GO 7521
7032: LD_INT 92
7034: DOUBLE
7035: EQUAL
7036: IFTRUE 7040
7038: GO 7066
7040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7041: LD_ADDR_VAR 0 3
7045: PUSH
7046: LD_INT 11
7048: PUSH
7049: LD_INT 12
7051: PUSH
7052: LD_INT 13
7054: PUSH
7055: LD_INT 14
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 7521
7066: LD_INT 28
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7092
7074: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7075: LD_ADDR_VAR 0 3
7079: PUSH
7080: LD_INT 13
7082: PUSH
7083: LD_INT 14
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: ST_TO_ADDR
7090: GO 7521
7092: LD_INT 29
7094: DOUBLE
7095: EQUAL
7096: IFTRUE 7100
7098: GO 7118
7100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7101: LD_ADDR_VAR 0 3
7105: PUSH
7106: LD_INT 13
7108: PUSH
7109: LD_INT 14
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: ST_TO_ADDR
7116: GO 7521
7118: LD_INT 31
7120: DOUBLE
7121: EQUAL
7122: IFTRUE 7126
7124: GO 7144
7126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_INT 13
7134: PUSH
7135: LD_INT 14
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: ST_TO_ADDR
7142: GO 7521
7144: LD_INT 26
7146: DOUBLE
7147: EQUAL
7148: IFTRUE 7152
7150: GO 7170
7152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7153: LD_ADDR_VAR 0 3
7157: PUSH
7158: LD_INT 13
7160: PUSH
7161: LD_INT 14
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: ST_TO_ADDR
7168: GO 7521
7170: LD_INT 42
7172: DOUBLE
7173: EQUAL
7174: IFTRUE 7178
7176: GO 7204
7178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7179: LD_ADDR_VAR 0 3
7183: PUSH
7184: LD_INT 21
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 23
7192: PUSH
7193: LD_INT 24
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: ST_TO_ADDR
7202: GO 7521
7204: LD_INT 43
7206: DOUBLE
7207: EQUAL
7208: IFTRUE 7212
7210: GO 7238
7212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7213: LD_ADDR_VAR 0 3
7217: PUSH
7218: LD_INT 21
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 23
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: ST_TO_ADDR
7236: GO 7521
7238: LD_INT 44
7240: DOUBLE
7241: EQUAL
7242: IFTRUE 7246
7244: GO 7272
7246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 21
7254: PUSH
7255: LD_INT 22
7257: PUSH
7258: LD_INT 23
7260: PUSH
7261: LD_INT 24
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: ST_TO_ADDR
7270: GO 7521
7272: LD_INT 45
7274: DOUBLE
7275: EQUAL
7276: IFTRUE 7280
7278: GO 7306
7280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: LD_INT 21
7288: PUSH
7289: LD_INT 22
7291: PUSH
7292: LD_INT 23
7294: PUSH
7295: LD_INT 24
7297: PUSH
7298: EMPTY
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: ST_TO_ADDR
7304: GO 7521
7306: LD_INT 49
7308: DOUBLE
7309: EQUAL
7310: IFTRUE 7314
7312: GO 7340
7314: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7315: LD_ADDR_VAR 0 3
7319: PUSH
7320: LD_INT 21
7322: PUSH
7323: LD_INT 22
7325: PUSH
7326: LD_INT 23
7328: PUSH
7329: LD_INT 24
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: ST_TO_ADDR
7338: GO 7521
7340: LD_INT 51
7342: DOUBLE
7343: EQUAL
7344: IFTRUE 7348
7346: GO 7374
7348: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7349: LD_ADDR_VAR 0 3
7353: PUSH
7354: LD_INT 21
7356: PUSH
7357: LD_INT 22
7359: PUSH
7360: LD_INT 23
7362: PUSH
7363: LD_INT 24
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: ST_TO_ADDR
7372: GO 7521
7374: LD_INT 52
7376: DOUBLE
7377: EQUAL
7378: IFTRUE 7382
7380: GO 7408
7382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_INT 21
7390: PUSH
7391: LD_INT 22
7393: PUSH
7394: LD_INT 23
7396: PUSH
7397: LD_INT 24
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: ST_TO_ADDR
7406: GO 7521
7408: LD_INT 53
7410: DOUBLE
7411: EQUAL
7412: IFTRUE 7416
7414: GO 7434
7416: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7417: LD_ADDR_VAR 0 3
7421: PUSH
7422: LD_INT 23
7424: PUSH
7425: LD_INT 24
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 7521
7434: LD_INT 46
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7460
7442: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: LD_INT 23
7450: PUSH
7451: LD_INT 24
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 7521
7460: LD_INT 47
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7486
7468: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7469: LD_ADDR_VAR 0 3
7473: PUSH
7474: LD_INT 23
7476: PUSH
7477: LD_INT 24
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: ST_TO_ADDR
7484: GO 7521
7486: LD_INT 98
7488: DOUBLE
7489: EQUAL
7490: IFTRUE 7494
7492: GO 7520
7494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7495: LD_ADDR_VAR 0 3
7499: PUSH
7500: LD_INT 21
7502: PUSH
7503: LD_INT 22
7505: PUSH
7506: LD_INT 23
7508: PUSH
7509: LD_INT 24
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: ST_TO_ADDR
7518: GO 7521
7520: POP
// result := ( chassis in result ) ;
7521: LD_ADDR_VAR 0 3
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: LD_VAR 0 3
7535: IN
7536: ST_TO_ADDR
// end ;
7537: LD_VAR 0 3
7541: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7542: LD_INT 0
7544: PPUSH
7545: PPUSH
7546: PPUSH
7547: PPUSH
7548: PPUSH
7549: PPUSH
7550: PPUSH
// result := array ;
7551: LD_ADDR_VAR 0 5
7555: PUSH
7556: LD_VAR 0 1
7560: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7561: LD_VAR 0 1
7565: NOT
7566: IFTRUE 7575
7568: PUSH
7569: LD_VAR 0 2
7573: NOT
7574: OR
7575: IFTRUE 7584
7577: PUSH
7578: LD_VAR 0 3
7582: NOT
7583: OR
7584: IFTRUE 7598
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: LD_VAR 0 1
7596: GREATER
7597: OR
7598: IFTRUE 7612
7600: PUSH
7601: LD_VAR 0 3
7605: PUSH
7606: LD_VAR 0 1
7610: GREATER
7611: OR
7612: IFFALSE 7616
// exit ;
7614: GO 7912
// if direction then
7616: LD_VAR 0 4
7620: IFFALSE 7684
// begin d := 1 ;
7622: LD_ADDR_VAR 0 9
7626: PUSH
7627: LD_INT 1
7629: ST_TO_ADDR
// if i_from > i_to then
7630: LD_VAR 0 2
7634: PUSH
7635: LD_VAR 0 3
7639: GREATER
7640: IFFALSE 7666
// length := ( array - i_from ) + i_to else
7642: LD_ADDR_VAR 0 11
7646: PUSH
7647: LD_VAR 0 1
7651: PUSH
7652: LD_VAR 0 2
7656: MINUS
7657: PUSH
7658: LD_VAR 0 3
7662: PLUS
7663: ST_TO_ADDR
7664: GO 7682
// length := i_to - i_from ;
7666: LD_ADDR_VAR 0 11
7670: PUSH
7671: LD_VAR 0 3
7675: PUSH
7676: LD_VAR 0 2
7680: MINUS
7681: ST_TO_ADDR
// end else
7682: GO 7745
// begin d := - 1 ;
7684: LD_ADDR_VAR 0 9
7688: PUSH
7689: LD_INT 1
7691: NEG
7692: ST_TO_ADDR
// if i_from > i_to then
7693: LD_VAR 0 2
7697: PUSH
7698: LD_VAR 0 3
7702: GREATER
7703: IFFALSE 7723
// length := i_from - i_to else
7705: LD_ADDR_VAR 0 11
7709: PUSH
7710: LD_VAR 0 2
7714: PUSH
7715: LD_VAR 0 3
7719: MINUS
7720: ST_TO_ADDR
7721: GO 7745
// length := ( array - i_to ) + i_from ;
7723: LD_ADDR_VAR 0 11
7727: PUSH
7728: LD_VAR 0 1
7732: PUSH
7733: LD_VAR 0 3
7737: MINUS
7738: PUSH
7739: LD_VAR 0 2
7743: PLUS
7744: ST_TO_ADDR
// end ; if not length then
7745: LD_VAR 0 11
7749: NOT
7750: IFFALSE 7754
// exit ;
7752: GO 7912
// tmp := array ;
7754: LD_ADDR_VAR 0 10
7758: PUSH
7759: LD_VAR 0 1
7763: ST_TO_ADDR
// for i = 1 to length do
7764: LD_ADDR_VAR 0 6
7768: PUSH
7769: DOUBLE
7770: LD_INT 1
7772: DEC
7773: ST_TO_ADDR
7774: LD_VAR 0 11
7778: PUSH
7779: FOR_TO
7780: IFFALSE 7900
// begin for j = 1 to array do
7782: LD_ADDR_VAR 0 7
7786: PUSH
7787: DOUBLE
7788: LD_INT 1
7790: DEC
7791: ST_TO_ADDR
7792: LD_VAR 0 1
7796: PUSH
7797: FOR_TO
7798: IFFALSE 7886
// begin k := j + d ;
7800: LD_ADDR_VAR 0 8
7804: PUSH
7805: LD_VAR 0 7
7809: PUSH
7810: LD_VAR 0 9
7814: PLUS
7815: ST_TO_ADDR
// if k > array then
7816: LD_VAR 0 8
7820: PUSH
7821: LD_VAR 0 1
7825: GREATER
7826: IFFALSE 7836
// k := 1 ;
7828: LD_ADDR_VAR 0 8
7832: PUSH
7833: LD_INT 1
7835: ST_TO_ADDR
// if not k then
7836: LD_VAR 0 8
7840: NOT
7841: IFFALSE 7853
// k := array ;
7843: LD_ADDR_VAR 0 8
7847: PUSH
7848: LD_VAR 0 1
7852: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7853: LD_ADDR_VAR 0 10
7857: PUSH
7858: LD_VAR 0 10
7862: PPUSH
7863: LD_VAR 0 8
7867: PPUSH
7868: LD_VAR 0 1
7872: PUSH
7873: LD_VAR 0 7
7877: ARRAY
7878: PPUSH
7879: CALL_OW 1
7883: ST_TO_ADDR
// end ;
7884: GO 7797
7886: POP
7887: POP
// array := tmp ;
7888: LD_ADDR_VAR 0 1
7892: PUSH
7893: LD_VAR 0 10
7897: ST_TO_ADDR
// end ;
7898: GO 7779
7900: POP
7901: POP
// result := array ;
7902: LD_ADDR_VAR 0 5
7906: PUSH
7907: LD_VAR 0 1
7911: ST_TO_ADDR
// end ;
7912: LD_VAR 0 5
7916: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7917: LD_INT 0
7919: PPUSH
7920: PPUSH
// result := 0 ;
7921: LD_ADDR_VAR 0 3
7925: PUSH
7926: LD_INT 0
7928: ST_TO_ADDR
// if not array or not value in array then
7929: LD_VAR 0 1
7933: NOT
7934: IFTRUE 7949
7936: PUSH
7937: LD_VAR 0 2
7941: PUSH
7942: LD_VAR 0 1
7946: IN
7947: NOT
7948: OR
7949: IFFALSE 7953
// exit ;
7951: GO 8007
// for i = 1 to array do
7953: LD_ADDR_VAR 0 4
7957: PUSH
7958: DOUBLE
7959: LD_INT 1
7961: DEC
7962: ST_TO_ADDR
7963: LD_VAR 0 1
7967: PUSH
7968: FOR_TO
7969: IFFALSE 8005
// if value = array [ i ] then
7971: LD_VAR 0 2
7975: PUSH
7976: LD_VAR 0 1
7980: PUSH
7981: LD_VAR 0 4
7985: ARRAY
7986: EQUAL
7987: IFFALSE 8003
// begin result := i ;
7989: LD_ADDR_VAR 0 3
7993: PUSH
7994: LD_VAR 0 4
7998: ST_TO_ADDR
// exit ;
7999: POP
8000: POP
8001: GO 8007
// end ;
8003: GO 7968
8005: POP
8006: POP
// end ;
8007: LD_VAR 0 3
8011: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8012: LD_INT 0
8014: PPUSH
// vc_chassis := chassis ;
8015: LD_ADDR_OWVAR 37
8019: PUSH
8020: LD_VAR 0 1
8024: ST_TO_ADDR
// vc_engine := engine ;
8025: LD_ADDR_OWVAR 39
8029: PUSH
8030: LD_VAR 0 2
8034: ST_TO_ADDR
// vc_control := control ;
8035: LD_ADDR_OWVAR 38
8039: PUSH
8040: LD_VAR 0 3
8044: ST_TO_ADDR
// vc_weapon := weapon ;
8045: LD_ADDR_OWVAR 40
8049: PUSH
8050: LD_VAR 0 4
8054: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8055: LD_ADDR_OWVAR 41
8059: PUSH
8060: LD_VAR 0 5
8064: ST_TO_ADDR
// end ;
8065: LD_VAR 0 6
8069: RET
// export function WantPlant ( unit ) ; var task ; begin
8070: LD_INT 0
8072: PPUSH
8073: PPUSH
// result := false ;
8074: LD_ADDR_VAR 0 2
8078: PUSH
8079: LD_INT 0
8081: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8082: LD_ADDR_VAR 0 3
8086: PUSH
8087: LD_VAR 0 1
8091: PPUSH
8092: CALL_OW 437
8096: ST_TO_ADDR
// if task then
8097: LD_VAR 0 3
8101: IFFALSE 8129
// if task [ 1 ] [ 1 ] = p then
8103: LD_VAR 0 3
8107: PUSH
8108: LD_INT 1
8110: ARRAY
8111: PUSH
8112: LD_INT 1
8114: ARRAY
8115: PUSH
8116: LD_STRING p
8118: EQUAL
8119: IFFALSE 8129
// result := true ;
8121: LD_ADDR_VAR 0 2
8125: PUSH
8126: LD_INT 1
8128: ST_TO_ADDR
// end ;
8129: LD_VAR 0 2
8133: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8134: LD_INT 0
8136: PPUSH
8137: PPUSH
8138: PPUSH
8139: PPUSH
// if pos < 1 then
8140: LD_VAR 0 2
8144: PUSH
8145: LD_INT 1
8147: LESS
8148: IFFALSE 8152
// exit ;
8150: GO 8455
// if pos = 1 then
8152: LD_VAR 0 2
8156: PUSH
8157: LD_INT 1
8159: EQUAL
8160: IFFALSE 8193
// result := Replace ( arr , pos [ 1 ] , value ) else
8162: LD_ADDR_VAR 0 4
8166: PUSH
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_VAR 0 2
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: PPUSH
8181: LD_VAR 0 3
8185: PPUSH
8186: CALL_OW 1
8190: ST_TO_ADDR
8191: GO 8455
// begin tmp := arr ;
8193: LD_ADDR_VAR 0 6
8197: PUSH
8198: LD_VAR 0 1
8202: ST_TO_ADDR
// s_arr := [ tmp ] ;
8203: LD_ADDR_VAR 0 7
8207: PUSH
8208: LD_VAR 0 6
8212: PUSH
8213: EMPTY
8214: LIST
8215: ST_TO_ADDR
// for i = 1 to pos - 1 do
8216: LD_ADDR_VAR 0 5
8220: PUSH
8221: DOUBLE
8222: LD_INT 1
8224: DEC
8225: ST_TO_ADDR
8226: LD_VAR 0 2
8230: PUSH
8231: LD_INT 1
8233: MINUS
8234: PUSH
8235: FOR_TO
8236: IFFALSE 8281
// begin tmp := tmp [ pos [ i ] ] ;
8238: LD_ADDR_VAR 0 6
8242: PUSH
8243: LD_VAR 0 6
8247: PUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_VAR 0 5
8257: ARRAY
8258: ARRAY
8259: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8260: LD_ADDR_VAR 0 7
8264: PUSH
8265: LD_VAR 0 7
8269: PUSH
8270: LD_VAR 0 6
8274: PUSH
8275: EMPTY
8276: LIST
8277: ADD
8278: ST_TO_ADDR
// end ;
8279: GO 8235
8281: POP
8282: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8283: LD_ADDR_VAR 0 6
8287: PUSH
8288: LD_VAR 0 6
8292: PPUSH
8293: LD_VAR 0 2
8297: PUSH
8298: LD_VAR 0 2
8302: ARRAY
8303: PPUSH
8304: LD_VAR 0 3
8308: PPUSH
8309: CALL_OW 1
8313: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8314: LD_ADDR_VAR 0 7
8318: PUSH
8319: LD_VAR 0 7
8323: PPUSH
8324: LD_VAR 0 7
8328: PPUSH
8329: LD_VAR 0 6
8333: PPUSH
8334: CALL_OW 1
8338: ST_TO_ADDR
// for i = s_arr downto 2 do
8339: LD_ADDR_VAR 0 5
8343: PUSH
8344: DOUBLE
8345: LD_VAR 0 7
8349: INC
8350: ST_TO_ADDR
8351: LD_INT 2
8353: PUSH
8354: FOR_DOWNTO
8355: IFFALSE 8439
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8357: LD_ADDR_VAR 0 6
8361: PUSH
8362: LD_VAR 0 7
8366: PUSH
8367: LD_VAR 0 5
8371: PUSH
8372: LD_INT 1
8374: MINUS
8375: ARRAY
8376: PPUSH
8377: LD_VAR 0 2
8381: PUSH
8382: LD_VAR 0 5
8386: PUSH
8387: LD_INT 1
8389: MINUS
8390: ARRAY
8391: PPUSH
8392: LD_VAR 0 7
8396: PUSH
8397: LD_VAR 0 5
8401: ARRAY
8402: PPUSH
8403: CALL_OW 1
8407: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8408: LD_ADDR_VAR 0 7
8412: PUSH
8413: LD_VAR 0 7
8417: PPUSH
8418: LD_VAR 0 5
8422: PUSH
8423: LD_INT 1
8425: MINUS
8426: PPUSH
8427: LD_VAR 0 6
8431: PPUSH
8432: CALL_OW 1
8436: ST_TO_ADDR
// end ;
8437: GO 8354
8439: POP
8440: POP
// result := s_arr [ 1 ] ;
8441: LD_ADDR_VAR 0 4
8445: PUSH
8446: LD_VAR 0 7
8450: PUSH
8451: LD_INT 1
8453: ARRAY
8454: ST_TO_ADDR
// end ; end ;
8455: LD_VAR 0 4
8459: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8460: LD_INT 0
8462: PPUSH
8463: PPUSH
// if not list then
8464: LD_VAR 0 1
8468: NOT
8469: IFFALSE 8473
// exit ;
8471: GO 8564
// i := list [ pos1 ] ;
8473: LD_ADDR_VAR 0 5
8477: PUSH
8478: LD_VAR 0 1
8482: PUSH
8483: LD_VAR 0 2
8487: ARRAY
8488: ST_TO_ADDR
// if not i then
8489: LD_VAR 0 5
8493: NOT
8494: IFFALSE 8498
// exit ;
8496: GO 8564
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8498: LD_ADDR_VAR 0 1
8502: PUSH
8503: LD_VAR 0 1
8507: PPUSH
8508: LD_VAR 0 2
8512: PPUSH
8513: LD_VAR 0 1
8517: PUSH
8518: LD_VAR 0 3
8522: ARRAY
8523: PPUSH
8524: CALL_OW 1
8528: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8529: LD_ADDR_VAR 0 1
8533: PUSH
8534: LD_VAR 0 1
8538: PPUSH
8539: LD_VAR 0 3
8543: PPUSH
8544: LD_VAR 0 5
8548: PPUSH
8549: CALL_OW 1
8553: ST_TO_ADDR
// result := list ;
8554: LD_ADDR_VAR 0 4
8558: PUSH
8559: LD_VAR 0 1
8563: ST_TO_ADDR
// end ;
8564: LD_VAR 0 4
8568: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8569: LD_INT 0
8571: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8572: LD_ADDR_VAR 0 5
8576: PUSH
8577: LD_VAR 0 1
8581: PPUSH
8582: CALL_OW 250
8586: PPUSH
8587: LD_VAR 0 1
8591: PPUSH
8592: CALL_OW 251
8596: PPUSH
8597: LD_VAR 0 2
8601: PPUSH
8602: LD_VAR 0 3
8606: PPUSH
8607: LD_VAR 0 4
8611: PPUSH
8612: CALL 8994 0 5
8616: ST_TO_ADDR
// end ;
8617: LD_VAR 0 5
8621: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8622: LD_INT 0
8624: PPUSH
8625: PPUSH
8626: PPUSH
8627: PPUSH
// if not list or not unit then
8628: LD_VAR 0 2
8632: NOT
8633: IFTRUE 8642
8635: PUSH
8636: LD_VAR 0 1
8640: NOT
8641: OR
8642: IFFALSE 8646
// exit ;
8644: GO 8989
// result := [ ] ;
8646: LD_ADDR_VAR 0 5
8650: PUSH
8651: EMPTY
8652: ST_TO_ADDR
// for i in list do
8653: LD_ADDR_VAR 0 6
8657: PUSH
8658: LD_VAR 0 2
8662: PUSH
8663: FOR_IN
8664: IFFALSE 8882
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8666: LD_ADDR_VAR 0 8
8670: PUSH
8671: LD_VAR 0 1
8675: PPUSH
8676: LD_VAR 0 6
8680: PUSH
8681: LD_INT 1
8683: ARRAY
8684: PPUSH
8685: LD_VAR 0 6
8689: PUSH
8690: LD_INT 2
8692: ARRAY
8693: PPUSH
8694: CALL_OW 297
8698: ST_TO_ADDR
// if not Count ( result ) then
8699: LD_VAR 0 5
8703: PPUSH
8704: CALL 5216 0 1
8708: NOT
8709: IFFALSE 8742
// begin result := Join ( result , [ i , tmp ] ) ;
8711: LD_ADDR_VAR 0 5
8715: PUSH
8716: LD_VAR 0 5
8720: PPUSH
8721: LD_VAR 0 6
8725: PUSH
8726: LD_VAR 0 8
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: PPUSH
8735: CALL 41182 0 2
8739: ST_TO_ADDR
// continue ;
8740: GO 8663
// end ; if result [ result ] [ 2 ] <= tmp then
8742: LD_VAR 0 5
8746: PUSH
8747: LD_VAR 0 5
8751: ARRAY
8752: PUSH
8753: LD_INT 2
8755: ARRAY
8756: PUSH
8757: LD_VAR 0 8
8761: LESSEQUAL
8762: IFFALSE 8795
// result := Join ( result , [ i , tmp ] ) else
8764: LD_ADDR_VAR 0 5
8768: PUSH
8769: LD_VAR 0 5
8773: PPUSH
8774: LD_VAR 0 6
8778: PUSH
8779: LD_VAR 0 8
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL 41182 0 2
8792: ST_TO_ADDR
8793: GO 8880
// begin for j := 1 to Count ( result ) do
8795: LD_ADDR_VAR 0 7
8799: PUSH
8800: DOUBLE
8801: LD_INT 1
8803: DEC
8804: ST_TO_ADDR
8805: LD_VAR 0 5
8809: PPUSH
8810: CALL 5216 0 1
8814: PUSH
8815: FOR_TO
8816: IFFALSE 8878
// begin if tmp < result [ j ] [ 2 ] then
8818: LD_VAR 0 8
8822: PUSH
8823: LD_VAR 0 5
8827: PUSH
8828: LD_VAR 0 7
8832: ARRAY
8833: PUSH
8834: LD_INT 2
8836: ARRAY
8837: LESS
8838: IFFALSE 8876
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8840: LD_ADDR_VAR 0 5
8844: PUSH
8845: LD_VAR 0 5
8849: PPUSH
8850: LD_VAR 0 7
8854: PPUSH
8855: LD_VAR 0 6
8859: PUSH
8860: LD_VAR 0 8
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PPUSH
8869: CALL_OW 2
8873: ST_TO_ADDR
// break ;
8874: GO 8878
// end ; end ;
8876: GO 8815
8878: POP
8879: POP
// end ; end ;
8880: GO 8663
8882: POP
8883: POP
// if result and not asc then
8884: LD_VAR 0 5
8888: IFFALSE 8897
8890: PUSH
8891: LD_VAR 0 3
8895: NOT
8896: AND
8897: IFFALSE 8914
// result := ReverseArray ( result ) ;
8899: LD_ADDR_VAR 0 5
8903: PUSH
8904: LD_VAR 0 5
8908: PPUSH
8909: CALL 36272 0 1
8913: ST_TO_ADDR
// tmp := [ ] ;
8914: LD_ADDR_VAR 0 8
8918: PUSH
8919: EMPTY
8920: ST_TO_ADDR
// if mode then
8921: LD_VAR 0 4
8925: IFFALSE 8989
// begin for i := 1 to result do
8927: LD_ADDR_VAR 0 6
8931: PUSH
8932: DOUBLE
8933: LD_INT 1
8935: DEC
8936: ST_TO_ADDR
8937: LD_VAR 0 5
8941: PUSH
8942: FOR_TO
8943: IFFALSE 8977
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8945: LD_ADDR_VAR 0 8
8949: PUSH
8950: LD_VAR 0 8
8954: PPUSH
8955: LD_VAR 0 5
8959: PUSH
8960: LD_VAR 0 6
8964: ARRAY
8965: PUSH
8966: LD_INT 1
8968: ARRAY
8969: PPUSH
8970: CALL 41182 0 2
8974: ST_TO_ADDR
8975: GO 8942
8977: POP
8978: POP
// result := tmp ;
8979: LD_ADDR_VAR 0 5
8983: PUSH
8984: LD_VAR 0 8
8988: ST_TO_ADDR
// end ; end ;
8989: LD_VAR 0 5
8993: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8994: LD_INT 0
8996: PPUSH
8997: PPUSH
8998: PPUSH
8999: PPUSH
// if not list then
9000: LD_VAR 0 3
9004: NOT
9005: IFFALSE 9009
// exit ;
9007: GO 9399
// result := [ ] ;
9009: LD_ADDR_VAR 0 6
9013: PUSH
9014: EMPTY
9015: ST_TO_ADDR
// for i in list do
9016: LD_ADDR_VAR 0 7
9020: PUSH
9021: LD_VAR 0 3
9025: PUSH
9026: FOR_IN
9027: IFFALSE 9229
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9029: LD_ADDR_VAR 0 9
9033: PUSH
9034: LD_VAR 0 7
9038: PPUSH
9039: LD_VAR 0 1
9043: PPUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 297
9053: ST_TO_ADDR
// if not result then
9054: LD_VAR 0 6
9058: NOT
9059: IFFALSE 9085
// result := [ [ i , tmp ] ] else
9061: LD_ADDR_VAR 0 6
9065: PUSH
9066: LD_VAR 0 7
9070: PUSH
9071: LD_VAR 0 9
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: EMPTY
9081: LIST
9082: ST_TO_ADDR
9083: GO 9227
// begin if result [ result ] [ 2 ] <= tmp then
9085: LD_VAR 0 6
9089: PUSH
9090: LD_VAR 0 6
9094: ARRAY
9095: PUSH
9096: LD_INT 2
9098: ARRAY
9099: PUSH
9100: LD_VAR 0 9
9104: LESSEQUAL
9105: IFFALSE 9147
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9107: LD_ADDR_VAR 0 6
9111: PUSH
9112: LD_VAR 0 6
9116: PPUSH
9117: LD_VAR 0 6
9121: PUSH
9122: LD_INT 1
9124: PLUS
9125: PPUSH
9126: LD_VAR 0 7
9130: PUSH
9131: LD_VAR 0 9
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: PPUSH
9140: CALL_OW 2
9144: ST_TO_ADDR
9145: GO 9227
// for j := 1 to result do
9147: LD_ADDR_VAR 0 8
9151: PUSH
9152: DOUBLE
9153: LD_INT 1
9155: DEC
9156: ST_TO_ADDR
9157: LD_VAR 0 6
9161: PUSH
9162: FOR_TO
9163: IFFALSE 9225
// begin if tmp < result [ j ] [ 2 ] then
9165: LD_VAR 0 9
9169: PUSH
9170: LD_VAR 0 6
9174: PUSH
9175: LD_VAR 0 8
9179: ARRAY
9180: PUSH
9181: LD_INT 2
9183: ARRAY
9184: LESS
9185: IFFALSE 9223
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9187: LD_ADDR_VAR 0 6
9191: PUSH
9192: LD_VAR 0 6
9196: PPUSH
9197: LD_VAR 0 8
9201: PPUSH
9202: LD_VAR 0 7
9206: PUSH
9207: LD_VAR 0 9
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 2
9220: ST_TO_ADDR
// break ;
9221: GO 9225
// end ; end ;
9223: GO 9162
9225: POP
9226: POP
// end ; end ;
9227: GO 9026
9229: POP
9230: POP
// if result and not asc then
9231: LD_VAR 0 6
9235: IFFALSE 9244
9237: PUSH
9238: LD_VAR 0 4
9242: NOT
9243: AND
9244: IFFALSE 9319
// begin tmp := result ;
9246: LD_ADDR_VAR 0 9
9250: PUSH
9251: LD_VAR 0 6
9255: ST_TO_ADDR
// for i = tmp downto 1 do
9256: LD_ADDR_VAR 0 7
9260: PUSH
9261: DOUBLE
9262: LD_VAR 0 9
9266: INC
9267: ST_TO_ADDR
9268: LD_INT 1
9270: PUSH
9271: FOR_DOWNTO
9272: IFFALSE 9317
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9274: LD_ADDR_VAR 0 6
9278: PUSH
9279: LD_VAR 0 6
9283: PPUSH
9284: LD_VAR 0 9
9288: PUSH
9289: LD_VAR 0 7
9293: MINUS
9294: PUSH
9295: LD_INT 1
9297: PLUS
9298: PPUSH
9299: LD_VAR 0 9
9303: PUSH
9304: LD_VAR 0 7
9308: ARRAY
9309: PPUSH
9310: CALL_OW 1
9314: ST_TO_ADDR
9315: GO 9271
9317: POP
9318: POP
// end ; tmp := [ ] ;
9319: LD_ADDR_VAR 0 9
9323: PUSH
9324: EMPTY
9325: ST_TO_ADDR
// if mode then
9326: LD_VAR 0 5
9330: IFFALSE 9399
// begin for i = 1 to result do
9332: LD_ADDR_VAR 0 7
9336: PUSH
9337: DOUBLE
9338: LD_INT 1
9340: DEC
9341: ST_TO_ADDR
9342: LD_VAR 0 6
9346: PUSH
9347: FOR_TO
9348: IFFALSE 9387
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9350: LD_ADDR_VAR 0 9
9354: PUSH
9355: LD_VAR 0 9
9359: PPUSH
9360: LD_VAR 0 7
9364: PPUSH
9365: LD_VAR 0 6
9369: PUSH
9370: LD_VAR 0 7
9374: ARRAY
9375: PUSH
9376: LD_INT 1
9378: ARRAY
9379: PPUSH
9380: CALL_OW 1
9384: ST_TO_ADDR
9385: GO 9347
9387: POP
9388: POP
// result := tmp ;
9389: LD_ADDR_VAR 0 6
9393: PUSH
9394: LD_VAR 0 9
9398: ST_TO_ADDR
// end ; end ;
9399: LD_VAR 0 6
9403: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9404: LD_INT 0
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
9410: PPUSH
9411: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9412: LD_ADDR_VAR 0 5
9416: PUSH
9417: LD_INT 0
9419: PUSH
9420: LD_INT 0
9422: PUSH
9423: LD_INT 0
9425: PUSH
9426: EMPTY
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: ST_TO_ADDR
// if not x or not y then
9434: LD_VAR 0 2
9438: NOT
9439: IFTRUE 9448
9441: PUSH
9442: LD_VAR 0 3
9446: NOT
9447: OR
9448: IFFALSE 9452
// exit ;
9450: GO 11108
// if not range then
9452: LD_VAR 0 4
9456: NOT
9457: IFFALSE 9467
// range := 10 ;
9459: LD_ADDR_VAR 0 4
9463: PUSH
9464: LD_INT 10
9466: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9467: LD_ADDR_VAR 0 8
9471: PUSH
9472: LD_INT 81
9474: PUSH
9475: LD_VAR 0 1
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 92
9486: PUSH
9487: LD_VAR 0 2
9491: PUSH
9492: LD_VAR 0 3
9496: PUSH
9497: LD_VAR 0 4
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 3
9510: PUSH
9511: LD_INT 21
9513: PUSH
9514: LD_INT 3
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: PUSH
9525: EMPTY
9526: LIST
9527: LIST
9528: LIST
9529: PPUSH
9530: CALL_OW 69
9534: ST_TO_ADDR
// if not tmp then
9535: LD_VAR 0 8
9539: NOT
9540: IFFALSE 9544
// exit ;
9542: GO 11108
// for i in tmp do
9544: LD_ADDR_VAR 0 6
9548: PUSH
9549: LD_VAR 0 8
9553: PUSH
9554: FOR_IN
9555: IFFALSE 11083
// begin points := [ 0 , 0 , 0 ] ;
9557: LD_ADDR_VAR 0 9
9561: PUSH
9562: LD_INT 0
9564: PUSH
9565: LD_INT 0
9567: PUSH
9568: LD_INT 0
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: ST_TO_ADDR
// bpoints := 1 ;
9576: LD_ADDR_VAR 0 10
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9584: LD_VAR 0 6
9588: PPUSH
9589: CALL_OW 247
9593: PUSH
9594: LD_INT 1
9596: DOUBLE
9597: EQUAL
9598: IFTRUE 9602
9600: GO 10184
9602: POP
// begin if GetClass ( i ) = 1 then
9603: LD_VAR 0 6
9607: PPUSH
9608: CALL_OW 257
9612: PUSH
9613: LD_INT 1
9615: EQUAL
9616: IFFALSE 9637
// points := [ 10 , 5 , 3 ] ;
9618: LD_ADDR_VAR 0 9
9622: PUSH
9623: LD_INT 10
9625: PUSH
9626: LD_INT 5
9628: PUSH
9629: LD_INT 3
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9637: LD_VAR 0 6
9641: PPUSH
9642: CALL_OW 257
9646: PUSH
9647: LD_INT 2
9649: PUSH
9650: LD_INT 3
9652: PUSH
9653: LD_INT 4
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: IN
9661: IFFALSE 9682
// points := [ 3 , 2 , 1 ] ;
9663: LD_ADDR_VAR 0 9
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: LD_INT 2
9673: PUSH
9674: LD_INT 1
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9682: LD_VAR 0 6
9686: PPUSH
9687: CALL_OW 257
9691: PUSH
9692: LD_INT 5
9694: EQUAL
9695: IFFALSE 9716
// points := [ 130 , 5 , 2 ] ;
9697: LD_ADDR_VAR 0 9
9701: PUSH
9702: LD_INT 130
9704: PUSH
9705: LD_INT 5
9707: PUSH
9708: LD_INT 2
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9716: LD_VAR 0 6
9720: PPUSH
9721: CALL_OW 257
9725: PUSH
9726: LD_INT 8
9728: EQUAL
9729: IFFALSE 9750
// points := [ 35 , 35 , 30 ] ;
9731: LD_ADDR_VAR 0 9
9735: PUSH
9736: LD_INT 35
9738: PUSH
9739: LD_INT 35
9741: PUSH
9742: LD_INT 30
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: LIST
9749: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9750: LD_VAR 0 6
9754: PPUSH
9755: CALL_OW 257
9759: PUSH
9760: LD_INT 9
9762: EQUAL
9763: IFFALSE 9784
// points := [ 20 , 55 , 40 ] ;
9765: LD_ADDR_VAR 0 9
9769: PUSH
9770: LD_INT 20
9772: PUSH
9773: LD_INT 55
9775: PUSH
9776: LD_INT 40
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9784: LD_VAR 0 6
9788: PPUSH
9789: CALL_OW 257
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 16
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: IN
9804: IFFALSE 9825
// points := [ 5 , 3 , 2 ] ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 5
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: EMPTY
9821: LIST
9822: LIST
9823: LIST
9824: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9825: LD_VAR 0 6
9829: PPUSH
9830: CALL_OW 257
9834: PUSH
9835: LD_INT 17
9837: EQUAL
9838: IFFALSE 9859
// points := [ 100 , 50 , 75 ] ;
9840: LD_ADDR_VAR 0 9
9844: PUSH
9845: LD_INT 100
9847: PUSH
9848: LD_INT 50
9850: PUSH
9851: LD_INT 75
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: LIST
9858: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9859: LD_VAR 0 6
9863: PPUSH
9864: CALL_OW 257
9868: PUSH
9869: LD_INT 15
9871: EQUAL
9872: IFFALSE 9893
// points := [ 10 , 5 , 3 ] ;
9874: LD_ADDR_VAR 0 9
9878: PUSH
9879: LD_INT 10
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9893: LD_VAR 0 6
9897: PPUSH
9898: CALL_OW 257
9902: PUSH
9903: LD_INT 14
9905: EQUAL
9906: IFFALSE 9927
// points := [ 10 , 0 , 0 ] ;
9908: LD_ADDR_VAR 0 9
9912: PUSH
9913: LD_INT 10
9915: PUSH
9916: LD_INT 0
9918: PUSH
9919: LD_INT 0
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9927: LD_VAR 0 6
9931: PPUSH
9932: CALL_OW 257
9936: PUSH
9937: LD_INT 11
9939: EQUAL
9940: IFFALSE 9961
// points := [ 30 , 10 , 5 ] ;
9942: LD_ADDR_VAR 0 9
9946: PUSH
9947: LD_INT 30
9949: PUSH
9950: LD_INT 10
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9961: LD_VAR 0 1
9965: PPUSH
9966: LD_INT 5
9968: PPUSH
9969: CALL_OW 321
9973: PUSH
9974: LD_INT 2
9976: EQUAL
9977: IFFALSE 9994
// bpoints := bpoints * 1.8 ;
9979: LD_ADDR_VAR 0 10
9983: PUSH
9984: LD_VAR 0 10
9988: PUSH
9989: LD_REAL  1.80000000000000E+0000
9992: MUL
9993: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9994: LD_VAR 0 6
9998: PPUSH
9999: CALL_OW 257
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: LD_INT 2
10009: PUSH
10010: LD_INT 3
10012: PUSH
10013: LD_INT 4
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: IN
10022: IFFALSE 10042
10024: PUSH
10025: LD_VAR 0 1
10029: PPUSH
10030: LD_INT 51
10032: PPUSH
10033: CALL_OW 321
10037: PUSH
10038: LD_INT 2
10040: EQUAL
10041: AND
10042: IFFALSE 10059
// bpoints := bpoints * 1.2 ;
10044: LD_ADDR_VAR 0 10
10048: PUSH
10049: LD_VAR 0 10
10053: PUSH
10054: LD_REAL  1.20000000000000E+0000
10057: MUL
10058: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10059: LD_VAR 0 6
10063: PPUSH
10064: CALL_OW 257
10068: PUSH
10069: LD_INT 5
10071: PUSH
10072: LD_INT 7
10074: PUSH
10075: LD_INT 9
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: IN
10083: IFFALSE 10103
10085: PUSH
10086: LD_VAR 0 1
10090: PPUSH
10091: LD_INT 52
10093: PPUSH
10094: CALL_OW 321
10098: PUSH
10099: LD_INT 2
10101: EQUAL
10102: AND
10103: IFFALSE 10120
// bpoints := bpoints * 1.5 ;
10105: LD_ADDR_VAR 0 10
10109: PUSH
10110: LD_VAR 0 10
10114: PUSH
10115: LD_REAL  1.50000000000000E+0000
10118: MUL
10119: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10120: LD_VAR 0 1
10124: PPUSH
10125: LD_INT 66
10127: PPUSH
10128: CALL_OW 321
10132: PUSH
10133: LD_INT 2
10135: EQUAL
10136: IFFALSE 10153
// bpoints := bpoints * 1.1 ;
10138: LD_ADDR_VAR 0 10
10142: PUSH
10143: LD_VAR 0 10
10147: PUSH
10148: LD_REAL  1.10000000000000E+0000
10151: MUL
10152: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10153: LD_ADDR_VAR 0 10
10157: PUSH
10158: LD_VAR 0 10
10162: PUSH
10163: LD_VAR 0 6
10167: PPUSH
10168: LD_INT 1
10170: PPUSH
10171: CALL_OW 259
10175: PUSH
10176: LD_REAL  1.15000000000000E+0000
10179: MUL
10180: MUL
10181: ST_TO_ADDR
// end ; unit_vehicle :
10182: GO 11012
10184: LD_INT 2
10186: DOUBLE
10187: EQUAL
10188: IFTRUE 10192
10190: GO 11000
10192: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10193: LD_VAR 0 6
10197: PPUSH
10198: CALL_OW 264
10202: PUSH
10203: LD_INT 2
10205: PUSH
10206: LD_INT 42
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: IN
10217: IFFALSE 10238
// points := [ 25 , 5 , 3 ] ;
10219: LD_ADDR_VAR 0 9
10223: PUSH
10224: LD_INT 25
10226: PUSH
10227: LD_INT 5
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10238: LD_VAR 0 6
10242: PPUSH
10243: CALL_OW 264
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: LD_INT 43
10253: PUSH
10254: LD_INT 25
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: IN
10262: IFFALSE 10283
// points := [ 40 , 15 , 5 ] ;
10264: LD_ADDR_VAR 0 9
10268: PUSH
10269: LD_INT 40
10271: PUSH
10272: LD_INT 15
10274: PUSH
10275: LD_INT 5
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10283: LD_VAR 0 6
10287: PPUSH
10288: CALL_OW 264
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: LD_INT 23
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: IN
10303: IFFALSE 10324
// points := [ 7 , 25 , 8 ] ;
10305: LD_ADDR_VAR 0 9
10309: PUSH
10310: LD_INT 7
10312: PUSH
10313: LD_INT 25
10315: PUSH
10316: LD_INT 8
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10324: LD_VAR 0 6
10328: PPUSH
10329: CALL_OW 264
10333: PUSH
10334: LD_INT 5
10336: PUSH
10337: LD_INT 27
10339: PUSH
10340: LD_INT 44
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: IN
10348: IFFALSE 10369
// points := [ 14 , 50 , 16 ] ;
10350: LD_ADDR_VAR 0 9
10354: PUSH
10355: LD_INT 14
10357: PUSH
10358: LD_INT 50
10360: PUSH
10361: LD_INT 16
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10369: LD_VAR 0 6
10373: PPUSH
10374: CALL_OW 264
10378: PUSH
10379: LD_INT 6
10381: PUSH
10382: LD_INT 46
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: IN
10389: IFFALSE 10410
// points := [ 32 , 120 , 70 ] ;
10391: LD_ADDR_VAR 0 9
10395: PUSH
10396: LD_INT 32
10398: PUSH
10399: LD_INT 120
10401: PUSH
10402: LD_INT 70
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: LIST
10409: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10410: LD_VAR 0 6
10414: PPUSH
10415: CALL_OW 264
10419: PUSH
10420: LD_INT 7
10422: PUSH
10423: LD_INT 28
10425: PUSH
10426: LD_INT 45
10428: PUSH
10429: LD_INT 92
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: IN
10438: IFFALSE 10459
// points := [ 35 , 20 , 45 ] ;
10440: LD_ADDR_VAR 0 9
10444: PUSH
10445: LD_INT 35
10447: PUSH
10448: LD_INT 20
10450: PUSH
10451: LD_INT 45
10453: PUSH
10454: EMPTY
10455: LIST
10456: LIST
10457: LIST
10458: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10459: LD_VAR 0 6
10463: PPUSH
10464: CALL_OW 264
10468: PUSH
10469: LD_INT 47
10471: PUSH
10472: EMPTY
10473: LIST
10474: IN
10475: IFFALSE 10496
// points := [ 67 , 45 , 75 ] ;
10477: LD_ADDR_VAR 0 9
10481: PUSH
10482: LD_INT 67
10484: PUSH
10485: LD_INT 45
10487: PUSH
10488: LD_INT 75
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: LIST
10495: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10496: LD_VAR 0 6
10500: PPUSH
10501: CALL_OW 264
10505: PUSH
10506: LD_INT 26
10508: PUSH
10509: EMPTY
10510: LIST
10511: IN
10512: IFFALSE 10533
// points := [ 120 , 30 , 80 ] ;
10514: LD_ADDR_VAR 0 9
10518: PUSH
10519: LD_INT 120
10521: PUSH
10522: LD_INT 30
10524: PUSH
10525: LD_INT 80
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: LIST
10532: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10533: LD_VAR 0 6
10537: PPUSH
10538: CALL_OW 264
10542: PUSH
10543: LD_INT 22
10545: PUSH
10546: EMPTY
10547: LIST
10548: IN
10549: IFFALSE 10570
// points := [ 40 , 1 , 1 ] ;
10551: LD_ADDR_VAR 0 9
10555: PUSH
10556: LD_INT 40
10558: PUSH
10559: LD_INT 1
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10570: LD_VAR 0 6
10574: PPUSH
10575: CALL_OW 264
10579: PUSH
10580: LD_INT 29
10582: PUSH
10583: EMPTY
10584: LIST
10585: IN
10586: IFFALSE 10607
// points := [ 70 , 200 , 400 ] ;
10588: LD_ADDR_VAR 0 9
10592: PUSH
10593: LD_INT 70
10595: PUSH
10596: LD_INT 200
10598: PUSH
10599: LD_INT 400
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10607: LD_VAR 0 6
10611: PPUSH
10612: CALL_OW 264
10616: PUSH
10617: LD_INT 14
10619: PUSH
10620: LD_INT 53
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: IN
10627: IFFALSE 10648
// points := [ 40 , 10 , 20 ] ;
10629: LD_ADDR_VAR 0 9
10633: PUSH
10634: LD_INT 40
10636: PUSH
10637: LD_INT 10
10639: PUSH
10640: LD_INT 20
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10648: LD_VAR 0 6
10652: PPUSH
10653: CALL_OW 264
10657: PUSH
10658: LD_INT 9
10660: PUSH
10661: EMPTY
10662: LIST
10663: IN
10664: IFFALSE 10685
// points := [ 5 , 70 , 20 ] ;
10666: LD_ADDR_VAR 0 9
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: LD_INT 70
10676: PUSH
10677: LD_INT 20
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: LIST
10684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10685: LD_VAR 0 6
10689: PPUSH
10690: CALL_OW 264
10694: PUSH
10695: LD_INT 10
10697: PUSH
10698: EMPTY
10699: LIST
10700: IN
10701: IFFALSE 10722
// points := [ 35 , 110 , 70 ] ;
10703: LD_ADDR_VAR 0 9
10707: PUSH
10708: LD_INT 35
10710: PUSH
10711: LD_INT 110
10713: PUSH
10714: LD_INT 70
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10722: LD_VAR 0 6
10726: PPUSH
10727: CALL_OW 265
10731: PUSH
10732: LD_INT 25
10734: EQUAL
10735: IFFALSE 10756
// points := [ 80 , 65 , 100 ] ;
10737: LD_ADDR_VAR 0 9
10741: PUSH
10742: LD_INT 80
10744: PUSH
10745: LD_INT 65
10747: PUSH
10748: LD_INT 100
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10756: LD_VAR 0 6
10760: PPUSH
10761: CALL_OW 263
10765: PUSH
10766: LD_INT 1
10768: EQUAL
10769: IFFALSE 10804
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10771: LD_ADDR_VAR 0 10
10775: PUSH
10776: LD_VAR 0 10
10780: PUSH
10781: LD_VAR 0 6
10785: PPUSH
10786: CALL_OW 311
10790: PPUSH
10791: LD_INT 3
10793: PPUSH
10794: CALL_OW 259
10798: PUSH
10799: LD_INT 4
10801: MUL
10802: MUL
10803: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10804: LD_VAR 0 6
10808: PPUSH
10809: CALL_OW 263
10813: PUSH
10814: LD_INT 2
10816: EQUAL
10817: IFFALSE 10868
// begin j := IsControledBy ( i ) ;
10819: LD_ADDR_VAR 0 7
10823: PUSH
10824: LD_VAR 0 6
10828: PPUSH
10829: CALL_OW 312
10833: ST_TO_ADDR
// if j then
10834: LD_VAR 0 7
10838: IFFALSE 10868
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10840: LD_ADDR_VAR 0 10
10844: PUSH
10845: LD_VAR 0 10
10849: PUSH
10850: LD_VAR 0 7
10854: PPUSH
10855: LD_INT 3
10857: PPUSH
10858: CALL_OW 259
10862: PUSH
10863: LD_INT 3
10865: MUL
10866: MUL
10867: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10868: LD_VAR 0 6
10872: PPUSH
10873: CALL_OW 264
10877: PUSH
10878: LD_INT 5
10880: PUSH
10881: LD_INT 6
10883: PUSH
10884: LD_INT 46
10886: PUSH
10887: LD_INT 44
10889: PUSH
10890: LD_INT 47
10892: PUSH
10893: LD_INT 45
10895: PUSH
10896: LD_INT 28
10898: PUSH
10899: LD_INT 7
10901: PUSH
10902: LD_INT 27
10904: PUSH
10905: LD_INT 29
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: IN
10920: IFFALSE 10940
10922: PUSH
10923: LD_VAR 0 1
10927: PPUSH
10928: LD_INT 52
10930: PPUSH
10931: CALL_OW 321
10935: PUSH
10936: LD_INT 2
10938: EQUAL
10939: AND
10940: IFFALSE 10957
// bpoints := bpoints * 1.2 ;
10942: LD_ADDR_VAR 0 10
10946: PUSH
10947: LD_VAR 0 10
10951: PUSH
10952: LD_REAL  1.20000000000000E+0000
10955: MUL
10956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10957: LD_VAR 0 6
10961: PPUSH
10962: CALL_OW 264
10966: PUSH
10967: LD_INT 6
10969: PUSH
10970: LD_INT 46
10972: PUSH
10973: LD_INT 47
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: LIST
10980: IN
10981: IFFALSE 10998
// bpoints := bpoints * 1.2 ;
10983: LD_ADDR_VAR 0 10
10987: PUSH
10988: LD_VAR 0 10
10992: PUSH
10993: LD_REAL  1.20000000000000E+0000
10996: MUL
10997: ST_TO_ADDR
// end ; unit_building :
10998: GO 11012
11000: LD_INT 3
11002: DOUBLE
11003: EQUAL
11004: IFTRUE 11008
11006: GO 11011
11008: POP
// ; end ;
11009: GO 11012
11011: POP
// for j = 1 to 3 do
11012: LD_ADDR_VAR 0 7
11016: PUSH
11017: DOUBLE
11018: LD_INT 1
11020: DEC
11021: ST_TO_ADDR
11022: LD_INT 3
11024: PUSH
11025: FOR_TO
11026: IFFALSE 11079
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11028: LD_ADDR_VAR 0 5
11032: PUSH
11033: LD_VAR 0 5
11037: PPUSH
11038: LD_VAR 0 7
11042: PPUSH
11043: LD_VAR 0 5
11047: PUSH
11048: LD_VAR 0 7
11052: ARRAY
11053: PUSH
11054: LD_VAR 0 9
11058: PUSH
11059: LD_VAR 0 7
11063: ARRAY
11064: PUSH
11065: LD_VAR 0 10
11069: MUL
11070: PLUS
11071: PPUSH
11072: CALL_OW 1
11076: ST_TO_ADDR
11077: GO 11025
11079: POP
11080: POP
// end ;
11081: GO 9554
11083: POP
11084: POP
// result := Replace ( result , 4 , tmp ) ;
11085: LD_ADDR_VAR 0 5
11089: PUSH
11090: LD_VAR 0 5
11094: PPUSH
11095: LD_INT 4
11097: PPUSH
11098: LD_VAR 0 8
11102: PPUSH
11103: CALL_OW 1
11107: ST_TO_ADDR
// end ;
11108: LD_VAR 0 5
11112: RET
// export function DangerAtRange ( unit , range ) ; begin
11113: LD_INT 0
11115: PPUSH
// if not unit then
11116: LD_VAR 0 1
11120: NOT
11121: IFFALSE 11125
// exit ;
11123: GO 11170
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11125: LD_ADDR_VAR 0 3
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 255
11139: PPUSH
11140: LD_VAR 0 1
11144: PPUSH
11145: CALL_OW 250
11149: PPUSH
11150: LD_VAR 0 1
11154: PPUSH
11155: CALL_OW 251
11159: PPUSH
11160: LD_VAR 0 2
11164: PPUSH
11165: CALL 9404 0 4
11169: ST_TO_ADDR
// end ;
11170: LD_VAR 0 3
11174: RET
// export function DangerInArea ( side , area ) ; begin
11175: LD_INT 0
11177: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11178: LD_ADDR_VAR 0 3
11182: PUSH
11183: LD_VAR 0 2
11187: PPUSH
11188: LD_INT 81
11190: PUSH
11191: LD_VAR 0 1
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 70
11204: ST_TO_ADDR
// end ;
11205: LD_VAR 0 3
11209: RET
// export function IsExtension ( b ) ; begin
11210: LD_INT 0
11212: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_VAR 0 1
11222: PUSH
11223: LD_INT 23
11225: PUSH
11226: LD_INT 20
11228: PUSH
11229: LD_INT 22
11231: PUSH
11232: LD_INT 17
11234: PUSH
11235: LD_INT 24
11237: PUSH
11238: LD_INT 21
11240: PUSH
11241: LD_INT 19
11243: PUSH
11244: LD_INT 16
11246: PUSH
11247: LD_INT 25
11249: PUSH
11250: LD_INT 18
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: IN
11265: ST_TO_ADDR
// end ;
11266: LD_VAR 0 2
11270: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11271: LD_INT 0
11273: PPUSH
11274: PPUSH
11275: PPUSH
// result := [ ] ;
11276: LD_ADDR_VAR 0 4
11280: PUSH
11281: EMPTY
11282: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11283: LD_ADDR_VAR 0 5
11287: PUSH
11288: LD_VAR 0 2
11292: PPUSH
11293: LD_INT 21
11295: PUSH
11296: LD_INT 3
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 70
11307: ST_TO_ADDR
// if not tmp then
11308: LD_VAR 0 5
11312: NOT
11313: IFFALSE 11317
// exit ;
11315: GO 11381
// if checkLink then
11317: LD_VAR 0 3
11321: IFFALSE 11371
// begin for i in tmp do
11323: LD_ADDR_VAR 0 6
11327: PUSH
11328: LD_VAR 0 5
11332: PUSH
11333: FOR_IN
11334: IFFALSE 11369
// if GetBase ( i ) <> base then
11336: LD_VAR 0 6
11340: PPUSH
11341: CALL_OW 274
11345: PUSH
11346: LD_VAR 0 1
11350: NONEQUAL
11351: IFFALSE 11367
// ComLinkToBase ( base , i ) ;
11353: LD_VAR 0 1
11357: PPUSH
11358: LD_VAR 0 6
11362: PPUSH
11363: CALL_OW 169
11367: GO 11333
11369: POP
11370: POP
// end ; result := tmp ;
11371: LD_ADDR_VAR 0 4
11375: PUSH
11376: LD_VAR 0 5
11380: ST_TO_ADDR
// end ;
11381: LD_VAR 0 4
11385: RET
// export function ComComplete ( units , b ) ; var i ; begin
11386: LD_INT 0
11388: PPUSH
11389: PPUSH
// if not units then
11390: LD_VAR 0 1
11394: NOT
11395: IFFALSE 11399
// exit ;
11397: GO 11489
// for i in units do
11399: LD_ADDR_VAR 0 4
11403: PUSH
11404: LD_VAR 0 1
11408: PUSH
11409: FOR_IN
11410: IFFALSE 11487
// if BuildingStatus ( b ) = bs_build then
11412: LD_VAR 0 2
11416: PPUSH
11417: CALL_OW 461
11421: PUSH
11422: LD_INT 1
11424: EQUAL
11425: IFFALSE 11485
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11427: LD_VAR 0 4
11431: PPUSH
11432: LD_STRING h
11434: PUSH
11435: LD_VAR 0 2
11439: PPUSH
11440: CALL_OW 250
11444: PUSH
11445: LD_VAR 0 2
11449: PPUSH
11450: CALL_OW 251
11454: PUSH
11455: LD_VAR 0 2
11459: PUSH
11460: LD_INT 0
11462: PUSH
11463: LD_INT 0
11465: PUSH
11466: LD_INT 0
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: PUSH
11478: EMPTY
11479: LIST
11480: PPUSH
11481: CALL_OW 446
11485: GO 11409
11487: POP
11488: POP
// end ;
11489: LD_VAR 0 3
11493: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11494: LD_INT 0
11496: PPUSH
11497: PPUSH
11498: PPUSH
11499: PPUSH
11500: PPUSH
11501: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11502: LD_VAR 0 1
11506: NOT
11507: IFTRUE 11524
11509: PUSH
11510: LD_VAR 0 1
11514: PPUSH
11515: CALL_OW 263
11519: PUSH
11520: LD_INT 2
11522: NONEQUAL
11523: OR
11524: IFFALSE 11528
// exit ;
11526: GO 11844
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11528: LD_ADDR_VAR 0 6
11532: PUSH
11533: LD_INT 22
11535: PUSH
11536: LD_VAR 0 1
11540: PPUSH
11541: CALL_OW 255
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: LD_INT 2
11552: PUSH
11553: LD_INT 30
11555: PUSH
11556: LD_INT 36
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 34
11565: PUSH
11566: LD_INT 31
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PPUSH
11582: CALL_OW 69
11586: ST_TO_ADDR
// if not tmp then
11587: LD_VAR 0 6
11591: NOT
11592: IFFALSE 11596
// exit ;
11594: GO 11844
// result := [ ] ;
11596: LD_ADDR_VAR 0 2
11600: PUSH
11601: EMPTY
11602: ST_TO_ADDR
// for i in tmp do
11603: LD_ADDR_VAR 0 3
11607: PUSH
11608: LD_VAR 0 6
11612: PUSH
11613: FOR_IN
11614: IFFALSE 11685
// begin t := UnitsInside ( i ) ;
11616: LD_ADDR_VAR 0 4
11620: PUSH
11621: LD_VAR 0 3
11625: PPUSH
11626: CALL_OW 313
11630: ST_TO_ADDR
// if t then
11631: LD_VAR 0 4
11635: IFFALSE 11683
// for j in t do
11637: LD_ADDR_VAR 0 7
11641: PUSH
11642: LD_VAR 0 4
11646: PUSH
11647: FOR_IN
11648: IFFALSE 11681
// result := Replace ( result , result + 1 , j ) ;
11650: LD_ADDR_VAR 0 2
11654: PUSH
11655: LD_VAR 0 2
11659: PPUSH
11660: LD_VAR 0 2
11664: PUSH
11665: LD_INT 1
11667: PLUS
11668: PPUSH
11669: LD_VAR 0 7
11673: PPUSH
11674: CALL_OW 1
11678: ST_TO_ADDR
11679: GO 11647
11681: POP
11682: POP
// end ;
11683: GO 11613
11685: POP
11686: POP
// if not result then
11687: LD_VAR 0 2
11691: NOT
11692: IFFALSE 11696
// exit ;
11694: GO 11844
// mech := result [ 1 ] ;
11696: LD_ADDR_VAR 0 5
11700: PUSH
11701: LD_VAR 0 2
11705: PUSH
11706: LD_INT 1
11708: ARRAY
11709: ST_TO_ADDR
// if result > 1 then
11710: LD_VAR 0 2
11714: PUSH
11715: LD_INT 1
11717: GREATER
11718: IFFALSE 11830
// begin for i = 2 to result do
11720: LD_ADDR_VAR 0 3
11724: PUSH
11725: DOUBLE
11726: LD_INT 2
11728: DEC
11729: ST_TO_ADDR
11730: LD_VAR 0 2
11734: PUSH
11735: FOR_TO
11736: IFFALSE 11828
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11738: LD_ADDR_VAR 0 4
11742: PUSH
11743: LD_VAR 0 2
11747: PUSH
11748: LD_VAR 0 3
11752: ARRAY
11753: PPUSH
11754: LD_INT 3
11756: PPUSH
11757: CALL_OW 259
11761: PUSH
11762: LD_VAR 0 2
11766: PUSH
11767: LD_VAR 0 3
11771: ARRAY
11772: PPUSH
11773: CALL_OW 432
11777: MINUS
11778: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11779: LD_VAR 0 4
11783: PUSH
11784: LD_VAR 0 5
11788: PPUSH
11789: LD_INT 3
11791: PPUSH
11792: CALL_OW 259
11796: PUSH
11797: LD_VAR 0 5
11801: PPUSH
11802: CALL_OW 432
11806: MINUS
11807: GREATEREQUAL
11808: IFFALSE 11826
// mech := result [ i ] ;
11810: LD_ADDR_VAR 0 5
11814: PUSH
11815: LD_VAR 0 2
11819: PUSH
11820: LD_VAR 0 3
11824: ARRAY
11825: ST_TO_ADDR
// end ;
11826: GO 11735
11828: POP
11829: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11830: LD_VAR 0 1
11834: PPUSH
11835: LD_VAR 0 5
11839: PPUSH
11840: CALL_OW 135
// end ;
11844: LD_VAR 0 2
11848: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11849: LD_INT 0
11851: PPUSH
11852: PPUSH
11853: PPUSH
11854: PPUSH
11855: PPUSH
11856: PPUSH
11857: PPUSH
11858: PPUSH
11859: PPUSH
11860: PPUSH
11861: PPUSH
11862: PPUSH
11863: PPUSH
// result := [ ] ;
11864: LD_ADDR_VAR 0 7
11868: PUSH
11869: EMPTY
11870: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11871: LD_VAR 0 1
11875: PPUSH
11876: CALL_OW 266
11880: PUSH
11881: LD_INT 0
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: IN
11891: NOT
11892: IFFALSE 11896
// exit ;
11894: GO 13536
// if name then
11896: LD_VAR 0 3
11900: IFFALSE 11916
// SetBName ( base_dep , name ) ;
11902: LD_VAR 0 1
11906: PPUSH
11907: LD_VAR 0 3
11911: PPUSH
11912: CALL_OW 500
// base := GetBase ( base_dep ) ;
11916: LD_ADDR_VAR 0 15
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 274
11930: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11931: LD_ADDR_VAR 0 16
11935: PUSH
11936: LD_VAR 0 1
11940: PPUSH
11941: CALL_OW 255
11945: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11946: LD_ADDR_VAR 0 17
11950: PUSH
11951: LD_VAR 0 1
11955: PPUSH
11956: CALL_OW 248
11960: ST_TO_ADDR
// if sources then
11961: LD_VAR 0 5
11965: IFFALSE 12012
// for i = 1 to 3 do
11967: LD_ADDR_VAR 0 8
11971: PUSH
11972: DOUBLE
11973: LD_INT 1
11975: DEC
11976: ST_TO_ADDR
11977: LD_INT 3
11979: PUSH
11980: FOR_TO
11981: IFFALSE 12010
// AddResourceType ( base , i , sources [ i ] ) ;
11983: LD_VAR 0 15
11987: PPUSH
11988: LD_VAR 0 8
11992: PPUSH
11993: LD_VAR 0 5
11997: PUSH
11998: LD_VAR 0 8
12002: ARRAY
12003: PPUSH
12004: CALL_OW 276
12008: GO 11980
12010: POP
12011: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12012: LD_ADDR_VAR 0 18
12016: PUSH
12017: LD_VAR 0 15
12021: PPUSH
12022: LD_VAR 0 2
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL 11271 0 3
12034: ST_TO_ADDR
// InitHc ;
12035: CALL_OW 19
// InitUc ;
12039: CALL_OW 18
// uc_side := side ;
12043: LD_ADDR_OWVAR 20
12047: PUSH
12048: LD_VAR 0 16
12052: ST_TO_ADDR
// uc_nation := nation ;
12053: LD_ADDR_OWVAR 21
12057: PUSH
12058: LD_VAR 0 17
12062: ST_TO_ADDR
// if buildings then
12063: LD_VAR 0 18
12067: IFFALSE 13395
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12069: LD_ADDR_VAR 0 19
12073: PUSH
12074: LD_VAR 0 18
12078: PPUSH
12079: LD_INT 2
12081: PUSH
12082: LD_INT 30
12084: PUSH
12085: LD_INT 29
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 30
12094: PUSH
12095: LD_INT 30
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: PPUSH
12107: CALL_OW 72
12111: ST_TO_ADDR
// if tmp then
12112: LD_VAR 0 19
12116: IFFALSE 12164
// for i in tmp do
12118: LD_ADDR_VAR 0 8
12122: PUSH
12123: LD_VAR 0 19
12127: PUSH
12128: FOR_IN
12129: IFFALSE 12162
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12131: LD_VAR 0 8
12135: PPUSH
12136: CALL_OW 250
12140: PPUSH
12141: LD_VAR 0 8
12145: PPUSH
12146: CALL_OW 251
12150: PPUSH
12151: LD_VAR 0 16
12155: PPUSH
12156: CALL_OW 441
12160: GO 12128
12162: POP
12163: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12164: LD_VAR 0 18
12168: PPUSH
12169: LD_INT 2
12171: PUSH
12172: LD_INT 30
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 30
12184: PUSH
12185: LD_INT 33
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: PPUSH
12197: CALL_OW 72
12201: IFFALSE 12289
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12203: LD_ADDR_VAR 0 8
12207: PUSH
12208: LD_VAR 0 18
12212: PPUSH
12213: LD_INT 2
12215: PUSH
12216: LD_INT 30
12218: PUSH
12219: LD_INT 32
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 30
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: PPUSH
12241: CALL_OW 72
12245: PUSH
12246: FOR_IN
12247: IFFALSE 12287
// begin if not GetBWeapon ( i ) then
12249: LD_VAR 0 8
12253: PPUSH
12254: CALL_OW 269
12258: NOT
12259: IFFALSE 12285
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12261: LD_VAR 0 8
12265: PPUSH
12266: LD_VAR 0 8
12270: PPUSH
12271: LD_VAR 0 2
12275: PPUSH
12276: CALL 13541 0 2
12280: PPUSH
12281: CALL_OW 431
// end ;
12285: GO 12246
12287: POP
12288: POP
// end ; for i = 1 to personel do
12289: LD_ADDR_VAR 0 8
12293: PUSH
12294: DOUBLE
12295: LD_INT 1
12297: DEC
12298: ST_TO_ADDR
12299: LD_VAR 0 6
12303: PUSH
12304: FOR_TO
12305: IFFALSE 13375
// begin if i > 4 then
12307: LD_VAR 0 8
12311: PUSH
12312: LD_INT 4
12314: GREATER
12315: IFFALSE 12319
// break ;
12317: GO 13375
// case i of 1 :
12319: LD_VAR 0 8
12323: PUSH
12324: LD_INT 1
12326: DOUBLE
12327: EQUAL
12328: IFTRUE 12332
12330: GO 12412
12332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12333: LD_ADDR_VAR 0 12
12337: PUSH
12338: LD_VAR 0 18
12342: PPUSH
12343: LD_INT 22
12345: PUSH
12346: LD_VAR 0 16
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 58
12357: PUSH
12358: EMPTY
12359: LIST
12360: PUSH
12361: LD_INT 2
12363: PUSH
12364: LD_INT 30
12366: PUSH
12367: LD_INT 32
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 30
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 30
12386: PUSH
12387: LD_INT 5
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 72
12409: ST_TO_ADDR
12410: GO 12634
12412: LD_INT 2
12414: DOUBLE
12415: EQUAL
12416: IFTRUE 12420
12418: GO 12482
12420: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12421: LD_ADDR_VAR 0 12
12425: PUSH
12426: LD_VAR 0 18
12430: PPUSH
12431: LD_INT 22
12433: PUSH
12434: LD_VAR 0 16
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 2
12445: PUSH
12446: LD_INT 30
12448: PUSH
12449: LD_INT 0
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 30
12458: PUSH
12459: LD_INT 1
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PPUSH
12475: CALL_OW 72
12479: ST_TO_ADDR
12480: GO 12634
12482: LD_INT 3
12484: DOUBLE
12485: EQUAL
12486: IFTRUE 12490
12488: GO 12552
12490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12491: LD_ADDR_VAR 0 12
12495: PUSH
12496: LD_VAR 0 18
12500: PPUSH
12501: LD_INT 22
12503: PUSH
12504: LD_VAR 0 16
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PUSH
12513: LD_INT 2
12515: PUSH
12516: LD_INT 30
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 30
12528: PUSH
12529: LD_INT 3
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PPUSH
12545: CALL_OW 72
12549: ST_TO_ADDR
12550: GO 12634
12552: LD_INT 4
12554: DOUBLE
12555: EQUAL
12556: IFTRUE 12560
12558: GO 12633
12560: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12561: LD_ADDR_VAR 0 12
12565: PUSH
12566: LD_VAR 0 18
12570: PPUSH
12571: LD_INT 22
12573: PUSH
12574: LD_VAR 0 16
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 2
12585: PUSH
12586: LD_INT 30
12588: PUSH
12589: LD_INT 6
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 30
12598: PUSH
12599: LD_INT 7
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 30
12608: PUSH
12609: LD_INT 8
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 72
12630: ST_TO_ADDR
12631: GO 12634
12633: POP
// if i = 1 then
12634: LD_VAR 0 8
12638: PUSH
12639: LD_INT 1
12641: EQUAL
12642: IFFALSE 12753
// begin tmp := [ ] ;
12644: LD_ADDR_VAR 0 19
12648: PUSH
12649: EMPTY
12650: ST_TO_ADDR
// for j in f do
12651: LD_ADDR_VAR 0 9
12655: PUSH
12656: LD_VAR 0 12
12660: PUSH
12661: FOR_IN
12662: IFFALSE 12735
// if GetBType ( j ) = b_bunker then
12664: LD_VAR 0 9
12668: PPUSH
12669: CALL_OW 266
12673: PUSH
12674: LD_INT 32
12676: EQUAL
12677: IFFALSE 12704
// tmp := Insert ( tmp , 1 , j ) else
12679: LD_ADDR_VAR 0 19
12683: PUSH
12684: LD_VAR 0 19
12688: PPUSH
12689: LD_INT 1
12691: PPUSH
12692: LD_VAR 0 9
12696: PPUSH
12697: CALL_OW 2
12701: ST_TO_ADDR
12702: GO 12733
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12704: LD_ADDR_VAR 0 19
12708: PUSH
12709: LD_VAR 0 19
12713: PPUSH
12714: LD_VAR 0 19
12718: PUSH
12719: LD_INT 1
12721: PLUS
12722: PPUSH
12723: LD_VAR 0 9
12727: PPUSH
12728: CALL_OW 2
12732: ST_TO_ADDR
12733: GO 12661
12735: POP
12736: POP
// if tmp then
12737: LD_VAR 0 19
12741: IFFALSE 12753
// f := tmp ;
12743: LD_ADDR_VAR 0 12
12747: PUSH
12748: LD_VAR 0 19
12752: ST_TO_ADDR
// end ; x := personel [ i ] ;
12753: LD_ADDR_VAR 0 13
12757: PUSH
12758: LD_VAR 0 6
12762: PUSH
12763: LD_VAR 0 8
12767: ARRAY
12768: ST_TO_ADDR
// if x = - 1 then
12769: LD_VAR 0 13
12773: PUSH
12774: LD_INT 1
12776: NEG
12777: EQUAL
12778: IFFALSE 12989
// begin for j in f do
12780: LD_ADDR_VAR 0 9
12784: PUSH
12785: LD_VAR 0 12
12789: PUSH
12790: FOR_IN
12791: IFFALSE 12985
// repeat InitHc ;
12793: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12797: LD_VAR 0 9
12801: PPUSH
12802: CALL_OW 266
12806: PUSH
12807: LD_INT 5
12809: EQUAL
12810: IFFALSE 12880
// begin if UnitsInside ( j ) < 3 then
12812: LD_VAR 0 9
12816: PPUSH
12817: CALL_OW 313
12821: PUSH
12822: LD_INT 3
12824: LESS
12825: IFFALSE 12861
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12827: LD_INT 0
12829: PPUSH
12830: LD_INT 5
12832: PUSH
12833: LD_INT 8
12835: PUSH
12836: LD_INT 9
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: LD_VAR 0 17
12848: ARRAY
12849: PPUSH
12850: LD_VAR 0 4
12854: PPUSH
12855: CALL_OW 380
12859: GO 12878
// PrepareHuman ( false , i , skill ) ;
12861: LD_INT 0
12863: PPUSH
12864: LD_VAR 0 8
12868: PPUSH
12869: LD_VAR 0 4
12873: PPUSH
12874: CALL_OW 380
// end else
12878: GO 12897
// PrepareHuman ( false , i , skill ) ;
12880: LD_INT 0
12882: PPUSH
12883: LD_VAR 0 8
12887: PPUSH
12888: LD_VAR 0 4
12892: PPUSH
12893: CALL_OW 380
// un := CreateHuman ;
12897: LD_ADDR_VAR 0 14
12901: PUSH
12902: CALL_OW 44
12906: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12907: LD_ADDR_VAR 0 7
12911: PUSH
12912: LD_VAR 0 7
12916: PPUSH
12917: LD_INT 1
12919: PPUSH
12920: LD_VAR 0 14
12924: PPUSH
12925: CALL_OW 2
12929: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12930: LD_VAR 0 14
12934: PPUSH
12935: LD_VAR 0 9
12939: PPUSH
12940: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12944: LD_VAR 0 9
12948: PPUSH
12949: CALL_OW 313
12953: PUSH
12954: LD_INT 6
12956: EQUAL
12957: IFTRUE 12981
12959: PUSH
12960: LD_VAR 0 9
12964: PPUSH
12965: CALL_OW 266
12969: PUSH
12970: LD_INT 32
12972: PUSH
12973: LD_INT 31
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: IN
12980: OR
12981: IFFALSE 12793
12983: GO 12790
12985: POP
12986: POP
// end else
12987: GO 13373
// for j = 1 to x do
12989: LD_ADDR_VAR 0 9
12993: PUSH
12994: DOUBLE
12995: LD_INT 1
12997: DEC
12998: ST_TO_ADDR
12999: LD_VAR 0 13
13003: PUSH
13004: FOR_TO
13005: IFFALSE 13371
// begin InitHc ;
13007: CALL_OW 19
// if not f then
13011: LD_VAR 0 12
13015: NOT
13016: IFFALSE 13105
// begin PrepareHuman ( false , i , skill ) ;
13018: LD_INT 0
13020: PPUSH
13021: LD_VAR 0 8
13025: PPUSH
13026: LD_VAR 0 4
13030: PPUSH
13031: CALL_OW 380
// un := CreateHuman ;
13035: LD_ADDR_VAR 0 14
13039: PUSH
13040: CALL_OW 44
13044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13045: LD_ADDR_VAR 0 7
13049: PUSH
13050: LD_VAR 0 7
13054: PPUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_VAR 0 14
13062: PPUSH
13063: CALL_OW 2
13067: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13068: LD_VAR 0 14
13072: PPUSH
13073: LD_VAR 0 1
13077: PPUSH
13078: CALL_OW 250
13082: PPUSH
13083: LD_VAR 0 1
13087: PPUSH
13088: CALL_OW 251
13092: PPUSH
13093: LD_INT 10
13095: PPUSH
13096: LD_INT 0
13098: PPUSH
13099: CALL_OW 50
// continue ;
13103: GO 13004
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13105: LD_VAR 0 12
13109: PUSH
13110: LD_INT 1
13112: ARRAY
13113: PPUSH
13114: CALL_OW 313
13118: IFFALSE 13146
13120: PUSH
13121: LD_VAR 0 12
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PPUSH
13130: CALL_OW 266
13134: PUSH
13135: LD_INT 32
13137: PUSH
13138: LD_INT 31
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: IN
13145: AND
13146: IFTRUE 13167
13148: PUSH
13149: LD_VAR 0 12
13153: PUSH
13154: LD_INT 1
13156: ARRAY
13157: PPUSH
13158: CALL_OW 313
13162: PUSH
13163: LD_INT 6
13165: EQUAL
13166: OR
13167: IFFALSE 13187
// f := Delete ( f , 1 ) ;
13169: LD_ADDR_VAR 0 12
13173: PUSH
13174: LD_VAR 0 12
13178: PPUSH
13179: LD_INT 1
13181: PPUSH
13182: CALL_OW 3
13186: ST_TO_ADDR
// if not f then
13187: LD_VAR 0 12
13191: NOT
13192: IFFALSE 13210
// begin x := x + 2 ;
13194: LD_ADDR_VAR 0 13
13198: PUSH
13199: LD_VAR 0 13
13203: PUSH
13204: LD_INT 2
13206: PLUS
13207: ST_TO_ADDR
// continue ;
13208: GO 13004
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13210: LD_VAR 0 12
13214: PUSH
13215: LD_INT 1
13217: ARRAY
13218: PPUSH
13219: CALL_OW 266
13223: PUSH
13224: LD_INT 5
13226: EQUAL
13227: IFFALSE 13301
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13229: LD_VAR 0 12
13233: PUSH
13234: LD_INT 1
13236: ARRAY
13237: PPUSH
13238: CALL_OW 313
13242: PUSH
13243: LD_INT 3
13245: LESS
13246: IFFALSE 13282
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13248: LD_INT 0
13250: PPUSH
13251: LD_INT 5
13253: PUSH
13254: LD_INT 8
13256: PUSH
13257: LD_INT 9
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: PUSH
13265: LD_VAR 0 17
13269: ARRAY
13270: PPUSH
13271: LD_VAR 0 4
13275: PPUSH
13276: CALL_OW 380
13280: GO 13299
// PrepareHuman ( false , i , skill ) ;
13282: LD_INT 0
13284: PPUSH
13285: LD_VAR 0 8
13289: PPUSH
13290: LD_VAR 0 4
13294: PPUSH
13295: CALL_OW 380
// end else
13299: GO 13318
// PrepareHuman ( false , i , skill ) ;
13301: LD_INT 0
13303: PPUSH
13304: LD_VAR 0 8
13308: PPUSH
13309: LD_VAR 0 4
13313: PPUSH
13314: CALL_OW 380
// un := CreateHuman ;
13318: LD_ADDR_VAR 0 14
13322: PUSH
13323: CALL_OW 44
13327: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13328: LD_ADDR_VAR 0 7
13332: PUSH
13333: LD_VAR 0 7
13337: PPUSH
13338: LD_INT 1
13340: PPUSH
13341: LD_VAR 0 14
13345: PPUSH
13346: CALL_OW 2
13350: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13351: LD_VAR 0 14
13355: PPUSH
13356: LD_VAR 0 12
13360: PUSH
13361: LD_INT 1
13363: ARRAY
13364: PPUSH
13365: CALL_OW 52
// end ;
13369: GO 13004
13371: POP
13372: POP
// end ;
13373: GO 12304
13375: POP
13376: POP
// result := result ^ buildings ;
13377: LD_ADDR_VAR 0 7
13381: PUSH
13382: LD_VAR 0 7
13386: PUSH
13387: LD_VAR 0 18
13391: ADD
13392: ST_TO_ADDR
// end else
13393: GO 13536
// begin for i = 1 to personel do
13395: LD_ADDR_VAR 0 8
13399: PUSH
13400: DOUBLE
13401: LD_INT 1
13403: DEC
13404: ST_TO_ADDR
13405: LD_VAR 0 6
13409: PUSH
13410: FOR_TO
13411: IFFALSE 13534
// begin if i > 4 then
13413: LD_VAR 0 8
13417: PUSH
13418: LD_INT 4
13420: GREATER
13421: IFFALSE 13425
// break ;
13423: GO 13534
// x := personel [ i ] ;
13425: LD_ADDR_VAR 0 13
13429: PUSH
13430: LD_VAR 0 6
13434: PUSH
13435: LD_VAR 0 8
13439: ARRAY
13440: ST_TO_ADDR
// if x = - 1 then
13441: LD_VAR 0 13
13445: PUSH
13446: LD_INT 1
13448: NEG
13449: EQUAL
13450: IFFALSE 13454
// continue ;
13452: GO 13410
// PrepareHuman ( false , i , skill ) ;
13454: LD_INT 0
13456: PPUSH
13457: LD_VAR 0 8
13461: PPUSH
13462: LD_VAR 0 4
13466: PPUSH
13467: CALL_OW 380
// un := CreateHuman ;
13471: LD_ADDR_VAR 0 14
13475: PUSH
13476: CALL_OW 44
13480: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13481: LD_VAR 0 14
13485: PPUSH
13486: LD_VAR 0 1
13490: PPUSH
13491: CALL_OW 250
13495: PPUSH
13496: LD_VAR 0 1
13500: PPUSH
13501: CALL_OW 251
13505: PPUSH
13506: LD_INT 10
13508: PPUSH
13509: LD_INT 0
13511: PPUSH
13512: CALL_OW 50
// result := result ^ un ;
13516: LD_ADDR_VAR 0 7
13520: PUSH
13521: LD_VAR 0 7
13525: PUSH
13526: LD_VAR 0 14
13530: ADD
13531: ST_TO_ADDR
// end ;
13532: GO 13410
13534: POP
13535: POP
// end ; end ;
13536: LD_VAR 0 7
13540: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13541: LD_INT 0
13543: PPUSH
13544: PPUSH
13545: PPUSH
13546: PPUSH
13547: PPUSH
13548: PPUSH
13549: PPUSH
13550: PPUSH
13551: PPUSH
13552: PPUSH
13553: PPUSH
13554: PPUSH
13555: PPUSH
13556: PPUSH
13557: PPUSH
13558: PPUSH
// result := false ;
13559: LD_ADDR_VAR 0 3
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13567: LD_VAR 0 1
13571: NOT
13572: IFTRUE 13597
13574: PUSH
13575: LD_VAR 0 1
13579: PPUSH
13580: CALL_OW 266
13584: PUSH
13585: LD_INT 32
13587: PUSH
13588: LD_INT 33
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: IN
13595: NOT
13596: OR
13597: IFFALSE 13601
// exit ;
13599: GO 14736
// nat := GetNation ( tower ) ;
13601: LD_ADDR_VAR 0 12
13605: PUSH
13606: LD_VAR 0 1
13610: PPUSH
13611: CALL_OW 248
13615: ST_TO_ADDR
// side := GetSide ( tower ) ;
13616: LD_ADDR_VAR 0 16
13620: PUSH
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 255
13630: ST_TO_ADDR
// x := GetX ( tower ) ;
13631: LD_ADDR_VAR 0 10
13635: PUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 250
13645: ST_TO_ADDR
// y := GetY ( tower ) ;
13646: LD_ADDR_VAR 0 11
13650: PUSH
13651: LD_VAR 0 1
13655: PPUSH
13656: CALL_OW 251
13660: ST_TO_ADDR
// if not x or not y then
13661: LD_VAR 0 10
13665: NOT
13666: IFTRUE 13675
13668: PUSH
13669: LD_VAR 0 11
13673: NOT
13674: OR
13675: IFFALSE 13679
// exit ;
13677: GO 14736
// weapon := 0 ;
13679: LD_ADDR_VAR 0 18
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// fac_list := [ ] ;
13687: LD_ADDR_VAR 0 17
13691: PUSH
13692: EMPTY
13693: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13694: LD_ADDR_VAR 0 6
13698: PUSH
13699: LD_VAR 0 1
13703: PPUSH
13704: CALL_OW 274
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: LD_INT 0
13716: PPUSH
13717: CALL 11271 0 3
13721: PPUSH
13722: LD_INT 30
13724: PUSH
13725: LD_INT 3
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 72
13736: ST_TO_ADDR
// if not factories then
13737: LD_VAR 0 6
13741: NOT
13742: IFFALSE 13746
// exit ;
13744: GO 14736
// for i in factories do
13746: LD_ADDR_VAR 0 8
13750: PUSH
13751: LD_VAR 0 6
13755: PUSH
13756: FOR_IN
13757: IFFALSE 13782
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13759: LD_ADDR_VAR 0 17
13763: PUSH
13764: LD_VAR 0 17
13768: PUSH
13769: LD_VAR 0 8
13773: PPUSH
13774: CALL_OW 478
13778: UNION
13779: ST_TO_ADDR
13780: GO 13756
13782: POP
13783: POP
// if not fac_list then
13784: LD_VAR 0 17
13788: NOT
13789: IFFALSE 13793
// exit ;
13791: GO 14736
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13793: LD_ADDR_VAR 0 5
13797: PUSH
13798: LD_INT 4
13800: PUSH
13801: LD_INT 5
13803: PUSH
13804: LD_INT 9
13806: PUSH
13807: LD_INT 10
13809: PUSH
13810: LD_INT 6
13812: PUSH
13813: LD_INT 7
13815: PUSH
13816: LD_INT 11
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 27
13830: PUSH
13831: LD_INT 28
13833: PUSH
13834: LD_INT 26
13836: PUSH
13837: LD_INT 30
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 43
13848: PUSH
13849: LD_INT 44
13851: PUSH
13852: LD_INT 46
13854: PUSH
13855: LD_INT 45
13857: PUSH
13858: LD_INT 47
13860: PUSH
13861: LD_INT 49
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: LIST
13876: PUSH
13877: LD_VAR 0 12
13881: ARRAY
13882: ST_TO_ADDR
// list := list isect fac_list ;
13883: LD_ADDR_VAR 0 5
13887: PUSH
13888: LD_VAR 0 5
13892: PUSH
13893: LD_VAR 0 17
13897: ISECT
13898: ST_TO_ADDR
// if not list then
13899: LD_VAR 0 5
13903: NOT
13904: IFFALSE 13908
// exit ;
13906: GO 14736
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13908: LD_VAR 0 12
13912: PUSH
13913: LD_INT 3
13915: EQUAL
13916: IFFALSE 13928
13918: PUSH
13919: LD_INT 49
13921: PUSH
13922: LD_VAR 0 5
13926: IN
13927: AND
13928: IFFALSE 13948
13930: PUSH
13931: LD_INT 31
13933: PPUSH
13934: LD_VAR 0 16
13938: PPUSH
13939: CALL_OW 321
13943: PUSH
13944: LD_INT 2
13946: EQUAL
13947: AND
13948: IFFALSE 14008
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13950: LD_INT 22
13952: PUSH
13953: LD_VAR 0 16
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 35
13964: PUSH
13965: LD_INT 49
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 91
13974: PUSH
13975: LD_VAR 0 1
13979: PUSH
13980: LD_INT 10
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: LIST
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: LIST
13992: PPUSH
13993: CALL_OW 69
13997: NOT
13998: IFFALSE 14008
// weapon := ru_time_lapser ;
14000: LD_ADDR_VAR 0 18
14004: PUSH
14005: LD_INT 49
14007: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14008: LD_VAR 0 12
14012: PUSH
14013: LD_INT 1
14015: PUSH
14016: LD_INT 2
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: IN
14023: IFFALSE 14047
14025: PUSH
14026: LD_INT 11
14028: PUSH
14029: LD_VAR 0 5
14033: IN
14034: IFTRUE 14046
14036: PUSH
14037: LD_INT 30
14039: PUSH
14040: LD_VAR 0 5
14044: IN
14045: OR
14046: AND
14047: IFFALSE 14067
14049: PUSH
14050: LD_INT 6
14052: PPUSH
14053: LD_VAR 0 16
14057: PPUSH
14058: CALL_OW 321
14062: PUSH
14063: LD_INT 2
14065: EQUAL
14066: AND
14067: IFFALSE 14234
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14069: LD_INT 22
14071: PUSH
14072: LD_VAR 0 16
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 2
14083: PUSH
14084: LD_INT 35
14086: PUSH
14087: LD_INT 11
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 35
14096: PUSH
14097: LD_INT 30
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 91
14111: PUSH
14112: LD_VAR 0 1
14116: PUSH
14117: LD_INT 18
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 69
14134: NOT
14135: IFFALSE 14211
14137: PUSH
14138: LD_INT 22
14140: PUSH
14141: LD_VAR 0 16
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 2
14152: PUSH
14153: LD_INT 30
14155: PUSH
14156: LD_INT 32
14158: PUSH
14159: EMPTY
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 30
14165: PUSH
14166: LD_INT 33
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 91
14180: PUSH
14181: LD_VAR 0 1
14185: PUSH
14186: LD_INT 12
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: LIST
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: PPUSH
14202: CALL_OW 69
14206: PUSH
14207: LD_INT 2
14209: GREATER
14210: AND
14211: IFFALSE 14234
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14213: LD_ADDR_VAR 0 18
14217: PUSH
14218: LD_INT 11
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_VAR 0 12
14232: ARRAY
14233: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14234: LD_VAR 0 18
14238: NOT
14239: IFFALSE 14259
14241: PUSH
14242: LD_INT 40
14244: PPUSH
14245: LD_VAR 0 16
14249: PPUSH
14250: CALL_OW 321
14254: PUSH
14255: LD_INT 2
14257: EQUAL
14258: AND
14259: IFFALSE 14295
14261: PUSH
14262: LD_INT 7
14264: PUSH
14265: LD_VAR 0 5
14269: IN
14270: IFTRUE 14282
14272: PUSH
14273: LD_INT 28
14275: PUSH
14276: LD_VAR 0 5
14280: IN
14281: OR
14282: IFTRUE 14294
14284: PUSH
14285: LD_INT 45
14287: PUSH
14288: LD_VAR 0 5
14292: IN
14293: OR
14294: AND
14295: IFFALSE 14549
// begin hex := GetHexInfo ( x , y ) ;
14297: LD_ADDR_VAR 0 4
14301: PUSH
14302: LD_VAR 0 10
14306: PPUSH
14307: LD_VAR 0 11
14311: PPUSH
14312: CALL_OW 546
14316: ST_TO_ADDR
// if hex [ 1 ] then
14317: LD_VAR 0 4
14321: PUSH
14322: LD_INT 1
14324: ARRAY
14325: IFFALSE 14329
// exit ;
14327: GO 14736
// height := hex [ 2 ] ;
14329: LD_ADDR_VAR 0 15
14333: PUSH
14334: LD_VAR 0 4
14338: PUSH
14339: LD_INT 2
14341: ARRAY
14342: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14343: LD_ADDR_VAR 0 14
14347: PUSH
14348: LD_INT 0
14350: PUSH
14351: LD_INT 2
14353: PUSH
14354: LD_INT 3
14356: PUSH
14357: LD_INT 5
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: ST_TO_ADDR
// for i in tmp do
14366: LD_ADDR_VAR 0 8
14370: PUSH
14371: LD_VAR 0 14
14375: PUSH
14376: FOR_IN
14377: IFFALSE 14547
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14379: LD_ADDR_VAR 0 9
14383: PUSH
14384: LD_VAR 0 10
14388: PPUSH
14389: LD_VAR 0 8
14393: PPUSH
14394: LD_INT 5
14396: PPUSH
14397: CALL_OW 272
14401: PUSH
14402: LD_VAR 0 11
14406: PPUSH
14407: LD_VAR 0 8
14411: PPUSH
14412: LD_INT 5
14414: PPUSH
14415: CALL_OW 273
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14424: LD_VAR 0 9
14428: PUSH
14429: LD_INT 1
14431: ARRAY
14432: PPUSH
14433: LD_VAR 0 9
14437: PUSH
14438: LD_INT 2
14440: ARRAY
14441: PPUSH
14442: CALL_OW 488
14446: IFFALSE 14545
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14448: LD_ADDR_VAR 0 4
14452: PUSH
14453: LD_VAR 0 9
14457: PUSH
14458: LD_INT 1
14460: ARRAY
14461: PPUSH
14462: LD_VAR 0 9
14466: PUSH
14467: LD_INT 2
14469: ARRAY
14470: PPUSH
14471: CALL_OW 546
14475: ST_TO_ADDR
// if hex [ 1 ] then
14476: LD_VAR 0 4
14480: PUSH
14481: LD_INT 1
14483: ARRAY
14484: IFFALSE 14488
// continue ;
14486: GO 14376
// h := hex [ 2 ] ;
14488: LD_ADDR_VAR 0 13
14492: PUSH
14493: LD_VAR 0 4
14497: PUSH
14498: LD_INT 2
14500: ARRAY
14501: ST_TO_ADDR
// if h + 7 < height then
14502: LD_VAR 0 13
14506: PUSH
14507: LD_INT 7
14509: PLUS
14510: PUSH
14511: LD_VAR 0 15
14515: LESS
14516: IFFALSE 14545
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14518: LD_ADDR_VAR 0 18
14522: PUSH
14523: LD_INT 7
14525: PUSH
14526: LD_INT 28
14528: PUSH
14529: LD_INT 45
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: LIST
14536: PUSH
14537: LD_VAR 0 12
14541: ARRAY
14542: ST_TO_ADDR
// break ;
14543: GO 14547
// end ; end ; end ;
14545: GO 14376
14547: POP
14548: POP
// end ; if not weapon then
14549: LD_VAR 0 18
14553: NOT
14554: IFFALSE 14614
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14556: LD_ADDR_VAR 0 5
14560: PUSH
14561: LD_VAR 0 5
14565: PUSH
14566: LD_INT 11
14568: PUSH
14569: LD_INT 30
14571: PUSH
14572: LD_INT 49
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: LIST
14579: DIFF
14580: ST_TO_ADDR
// if not list then
14581: LD_VAR 0 5
14585: NOT
14586: IFFALSE 14590
// exit ;
14588: GO 14736
// weapon := list [ rand ( 1 , list ) ] ;
14590: LD_ADDR_VAR 0 18
14594: PUSH
14595: LD_VAR 0 5
14599: PUSH
14600: LD_INT 1
14602: PPUSH
14603: LD_VAR 0 5
14607: PPUSH
14608: CALL_OW 12
14612: ARRAY
14613: ST_TO_ADDR
// end ; if weapon then
14614: LD_VAR 0 18
14618: IFFALSE 14736
// begin tmp := CostOfWeapon ( weapon ) ;
14620: LD_ADDR_VAR 0 14
14624: PUSH
14625: LD_VAR 0 18
14629: PPUSH
14630: CALL_OW 451
14634: ST_TO_ADDR
// j := GetBase ( tower ) ;
14635: LD_ADDR_VAR 0 9
14639: PUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: CALL_OW 274
14649: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14650: LD_VAR 0 9
14654: PPUSH
14655: LD_INT 1
14657: PPUSH
14658: CALL_OW 275
14662: PUSH
14663: LD_VAR 0 14
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: GREATEREQUAL
14672: IFFALSE 14698
14674: PUSH
14675: LD_VAR 0 9
14679: PPUSH
14680: LD_INT 2
14682: PPUSH
14683: CALL_OW 275
14687: PUSH
14688: LD_VAR 0 14
14692: PUSH
14693: LD_INT 2
14695: ARRAY
14696: GREATEREQUAL
14697: AND
14698: IFFALSE 14724
14700: PUSH
14701: LD_VAR 0 9
14705: PPUSH
14706: LD_INT 3
14708: PPUSH
14709: CALL_OW 275
14713: PUSH
14714: LD_VAR 0 14
14718: PUSH
14719: LD_INT 3
14721: ARRAY
14722: GREATEREQUAL
14723: AND
14724: IFFALSE 14736
// result := weapon ;
14726: LD_ADDR_VAR 0 3
14730: PUSH
14731: LD_VAR 0 18
14735: ST_TO_ADDR
// end ; end ;
14736: LD_VAR 0 3
14740: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14741: LD_INT 0
14743: PPUSH
14744: PPUSH
// result := true ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 1
14752: ST_TO_ADDR
// if array1 = array2 then
14753: LD_VAR 0 1
14757: PUSH
14758: LD_VAR 0 2
14762: EQUAL
14763: IFFALSE 14823
// begin for i = 1 to array1 do
14765: LD_ADDR_VAR 0 4
14769: PUSH
14770: DOUBLE
14771: LD_INT 1
14773: DEC
14774: ST_TO_ADDR
14775: LD_VAR 0 1
14779: PUSH
14780: FOR_TO
14781: IFFALSE 14819
// if array1 [ i ] <> array2 [ i ] then
14783: LD_VAR 0 1
14787: PUSH
14788: LD_VAR 0 4
14792: ARRAY
14793: PUSH
14794: LD_VAR 0 2
14798: PUSH
14799: LD_VAR 0 4
14803: ARRAY
14804: NONEQUAL
14805: IFFALSE 14817
// begin result := false ;
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: LD_INT 0
14814: ST_TO_ADDR
// break ;
14815: GO 14819
// end ;
14817: GO 14780
14819: POP
14820: POP
// end else
14821: GO 14831
// result := false ;
14823: LD_ADDR_VAR 0 3
14827: PUSH
14828: LD_INT 0
14830: ST_TO_ADDR
// end ;
14831: LD_VAR 0 3
14835: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
// if not array1 or not array2 then
14840: LD_VAR 0 1
14844: NOT
14845: IFTRUE 14854
14847: PUSH
14848: LD_VAR 0 2
14852: NOT
14853: OR
14854: IFFALSE 14858
// exit ;
14856: GO 14922
// result := true ;
14858: LD_ADDR_VAR 0 3
14862: PUSH
14863: LD_INT 1
14865: ST_TO_ADDR
// for i = 1 to array1 do
14866: LD_ADDR_VAR 0 4
14870: PUSH
14871: DOUBLE
14872: LD_INT 1
14874: DEC
14875: ST_TO_ADDR
14876: LD_VAR 0 1
14880: PUSH
14881: FOR_TO
14882: IFFALSE 14920
// if array1 [ i ] <> array2 [ i ] then
14884: LD_VAR 0 1
14888: PUSH
14889: LD_VAR 0 4
14893: ARRAY
14894: PUSH
14895: LD_VAR 0 2
14899: PUSH
14900: LD_VAR 0 4
14904: ARRAY
14905: NONEQUAL
14906: IFFALSE 14918
// begin result := false ;
14908: LD_ADDR_VAR 0 3
14912: PUSH
14913: LD_INT 0
14915: ST_TO_ADDR
// break ;
14916: GO 14920
// end ;
14918: GO 14881
14920: POP
14921: POP
// end ;
14922: LD_VAR 0 3
14926: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14927: LD_INT 0
14929: PPUSH
14930: PPUSH
14931: PPUSH
// pom := GetBase ( fac ) ;
14932: LD_ADDR_VAR 0 5
14936: PUSH
14937: LD_VAR 0 1
14941: PPUSH
14942: CALL_OW 274
14946: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14947: LD_ADDR_VAR 0 4
14951: PUSH
14952: LD_VAR 0 2
14956: PUSH
14957: LD_INT 1
14959: ARRAY
14960: PPUSH
14961: LD_VAR 0 2
14965: PUSH
14966: LD_INT 2
14968: ARRAY
14969: PPUSH
14970: LD_VAR 0 2
14974: PUSH
14975: LD_INT 3
14977: ARRAY
14978: PPUSH
14979: LD_VAR 0 2
14983: PUSH
14984: LD_INT 4
14986: ARRAY
14987: PPUSH
14988: CALL_OW 449
14992: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14993: LD_ADDR_VAR 0 3
14997: PUSH
14998: LD_VAR 0 5
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 275
15010: PUSH
15011: LD_VAR 0 4
15015: PUSH
15016: LD_INT 1
15018: ARRAY
15019: GREATEREQUAL
15020: IFFALSE 15046
15022: PUSH
15023: LD_VAR 0 5
15027: PPUSH
15028: LD_INT 2
15030: PPUSH
15031: CALL_OW 275
15035: PUSH
15036: LD_VAR 0 4
15040: PUSH
15041: LD_INT 2
15043: ARRAY
15044: GREATEREQUAL
15045: AND
15046: IFFALSE 15072
15048: PUSH
15049: LD_VAR 0 5
15053: PPUSH
15054: LD_INT 3
15056: PPUSH
15057: CALL_OW 275
15061: PUSH
15062: LD_VAR 0 4
15066: PUSH
15067: LD_INT 3
15069: ARRAY
15070: GREATEREQUAL
15071: AND
15072: ST_TO_ADDR
// end ;
15073: LD_VAR 0 3
15077: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15078: LD_INT 0
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
// pom := GetBase ( building ) ;
15084: LD_ADDR_VAR 0 3
15088: PUSH
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 274
15098: ST_TO_ADDR
// if not pom then
15099: LD_VAR 0 3
15103: NOT
15104: IFFALSE 15108
// exit ;
15106: GO 15282
// btype := GetBType ( building ) ;
15108: LD_ADDR_VAR 0 5
15112: PUSH
15113: LD_VAR 0 1
15117: PPUSH
15118: CALL_OW 266
15122: ST_TO_ADDR
// if btype = b_armoury then
15123: LD_VAR 0 5
15127: PUSH
15128: LD_INT 4
15130: EQUAL
15131: IFFALSE 15141
// btype := b_barracks ;
15133: LD_ADDR_VAR 0 5
15137: PUSH
15138: LD_INT 5
15140: ST_TO_ADDR
// if btype = b_depot then
15141: LD_VAR 0 5
15145: PUSH
15146: LD_INT 0
15148: EQUAL
15149: IFFALSE 15159
// btype := b_warehouse ;
15151: LD_ADDR_VAR 0 5
15155: PUSH
15156: LD_INT 1
15158: ST_TO_ADDR
// if btype = b_workshop then
15159: LD_VAR 0 5
15163: PUSH
15164: LD_INT 2
15166: EQUAL
15167: IFFALSE 15177
// btype := b_factory ;
15169: LD_ADDR_VAR 0 5
15173: PUSH
15174: LD_INT 3
15176: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15177: LD_ADDR_VAR 0 4
15181: PUSH
15182: LD_VAR 0 5
15186: PPUSH
15187: LD_VAR 0 1
15191: PPUSH
15192: CALL_OW 248
15196: PPUSH
15197: CALL_OW 450
15201: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15202: LD_ADDR_VAR 0 2
15206: PUSH
15207: LD_VAR 0 3
15211: PPUSH
15212: LD_INT 1
15214: PPUSH
15215: CALL_OW 275
15219: PUSH
15220: LD_VAR 0 4
15224: PUSH
15225: LD_INT 1
15227: ARRAY
15228: GREATEREQUAL
15229: IFFALSE 15255
15231: PUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: LD_INT 2
15239: PPUSH
15240: CALL_OW 275
15244: PUSH
15245: LD_VAR 0 4
15249: PUSH
15250: LD_INT 2
15252: ARRAY
15253: GREATEREQUAL
15254: AND
15255: IFFALSE 15281
15257: PUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: LD_INT 3
15265: PPUSH
15266: CALL_OW 275
15270: PUSH
15271: LD_VAR 0 4
15275: PUSH
15276: LD_INT 3
15278: ARRAY
15279: GREATEREQUAL
15280: AND
15281: ST_TO_ADDR
// end ;
15282: LD_VAR 0 2
15286: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15287: LD_INT 0
15289: PPUSH
15290: PPUSH
15291: PPUSH
// pom := GetBase ( building ) ;
15292: LD_ADDR_VAR 0 4
15296: PUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 274
15306: ST_TO_ADDR
// if not pom then
15307: LD_VAR 0 4
15311: NOT
15312: IFFALSE 15316
// exit ;
15314: GO 15421
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15316: LD_ADDR_VAR 0 5
15320: PUSH
15321: LD_VAR 0 2
15325: PPUSH
15326: LD_VAR 0 1
15330: PPUSH
15331: CALL_OW 248
15335: PPUSH
15336: CALL_OW 450
15340: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15341: LD_ADDR_VAR 0 3
15345: PUSH
15346: LD_VAR 0 4
15350: PPUSH
15351: LD_INT 1
15353: PPUSH
15354: CALL_OW 275
15358: PUSH
15359: LD_VAR 0 5
15363: PUSH
15364: LD_INT 1
15366: ARRAY
15367: GREATEREQUAL
15368: IFFALSE 15394
15370: PUSH
15371: LD_VAR 0 4
15375: PPUSH
15376: LD_INT 2
15378: PPUSH
15379: CALL_OW 275
15383: PUSH
15384: LD_VAR 0 5
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: GREATEREQUAL
15393: AND
15394: IFFALSE 15420
15396: PUSH
15397: LD_VAR 0 4
15401: PPUSH
15402: LD_INT 3
15404: PPUSH
15405: CALL_OW 275
15409: PUSH
15410: LD_VAR 0 5
15414: PUSH
15415: LD_INT 3
15417: ARRAY
15418: GREATEREQUAL
15419: AND
15420: ST_TO_ADDR
// end ;
15421: LD_VAR 0 3
15425: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
15430: PPUSH
15431: PPUSH
15432: PPUSH
15433: PPUSH
15434: PPUSH
15435: PPUSH
15436: PPUSH
15437: PPUSH
15438: PPUSH
// result := false ;
15439: LD_ADDR_VAR 0 8
15443: PUSH
15444: LD_INT 0
15446: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15447: LD_VAR 0 5
15451: NOT
15452: IFTRUE 15461
15454: PUSH
15455: LD_VAR 0 1
15459: NOT
15460: OR
15461: IFTRUE 15470
15463: PUSH
15464: LD_VAR 0 2
15468: NOT
15469: OR
15470: IFTRUE 15479
15472: PUSH
15473: LD_VAR 0 3
15477: NOT
15478: OR
15479: IFFALSE 15483
// exit ;
15481: GO 16309
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15483: LD_ADDR_VAR 0 14
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: LD_VAR 0 2
15497: PPUSH
15498: LD_VAR 0 3
15502: PPUSH
15503: LD_VAR 0 4
15507: PPUSH
15508: LD_VAR 0 5
15512: PUSH
15513: LD_INT 1
15515: ARRAY
15516: PPUSH
15517: CALL_OW 248
15521: PPUSH
15522: LD_INT 0
15524: PPUSH
15525: CALL 17590 0 6
15529: ST_TO_ADDR
// if not hexes then
15530: LD_VAR 0 14
15534: NOT
15535: IFFALSE 15539
// exit ;
15537: GO 16309
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15539: LD_ADDR_VAR 0 17
15543: PUSH
15544: LD_VAR 0 5
15548: PPUSH
15549: LD_INT 22
15551: PUSH
15552: LD_VAR 0 13
15556: PPUSH
15557: CALL_OW 255
15561: PUSH
15562: EMPTY
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 2
15568: PUSH
15569: LD_INT 30
15571: PUSH
15572: LD_INT 0
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 30
15581: PUSH
15582: LD_INT 1
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PPUSH
15598: CALL_OW 72
15602: ST_TO_ADDR
// for i = 1 to hexes do
15603: LD_ADDR_VAR 0 9
15607: PUSH
15608: DOUBLE
15609: LD_INT 1
15611: DEC
15612: ST_TO_ADDR
15613: LD_VAR 0 14
15617: PUSH
15618: FOR_TO
15619: IFFALSE 16307
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15621: LD_ADDR_VAR 0 13
15625: PUSH
15626: LD_VAR 0 14
15630: PUSH
15631: LD_VAR 0 9
15635: ARRAY
15636: PUSH
15637: LD_INT 1
15639: ARRAY
15640: PPUSH
15641: LD_VAR 0 14
15645: PUSH
15646: LD_VAR 0 9
15650: ARRAY
15651: PUSH
15652: LD_INT 2
15654: ARRAY
15655: PPUSH
15656: CALL_OW 428
15660: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15661: LD_VAR 0 14
15665: PUSH
15666: LD_VAR 0 9
15670: ARRAY
15671: PUSH
15672: LD_INT 1
15674: ARRAY
15675: PPUSH
15676: LD_VAR 0 14
15680: PUSH
15681: LD_VAR 0 9
15685: ARRAY
15686: PUSH
15687: LD_INT 2
15689: ARRAY
15690: PPUSH
15691: CALL_OW 351
15695: IFTRUE 15734
15697: PUSH
15698: LD_VAR 0 14
15702: PUSH
15703: LD_VAR 0 9
15707: ARRAY
15708: PUSH
15709: LD_INT 1
15711: ARRAY
15712: PPUSH
15713: LD_VAR 0 14
15717: PUSH
15718: LD_VAR 0 9
15722: ARRAY
15723: PUSH
15724: LD_INT 2
15726: ARRAY
15727: PPUSH
15728: CALL_OW 488
15732: NOT
15733: OR
15734: IFTRUE 15751
15736: PUSH
15737: LD_VAR 0 13
15741: PPUSH
15742: CALL_OW 247
15746: PUSH
15747: LD_INT 3
15749: EQUAL
15750: OR
15751: IFFALSE 15757
// exit ;
15753: POP
15754: POP
15755: GO 16309
// if not tmp then
15757: LD_VAR 0 13
15761: NOT
15762: IFFALSE 15766
// continue ;
15764: GO 15618
// result := true ;
15766: LD_ADDR_VAR 0 8
15770: PUSH
15771: LD_INT 1
15773: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15774: LD_VAR 0 6
15778: IFFALSE 15795
15780: PUSH
15781: LD_VAR 0 13
15785: PPUSH
15786: CALL_OW 247
15790: PUSH
15791: LD_INT 2
15793: EQUAL
15794: AND
15795: IFFALSE 15812
15797: PUSH
15798: LD_VAR 0 13
15802: PPUSH
15803: CALL_OW 263
15807: PUSH
15808: LD_INT 1
15810: EQUAL
15811: AND
15812: IFFALSE 15976
// begin if IsDrivenBy ( tmp ) then
15814: LD_VAR 0 13
15818: PPUSH
15819: CALL_OW 311
15823: IFFALSE 15827
// continue ;
15825: GO 15618
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15827: LD_VAR 0 6
15831: PPUSH
15832: LD_INT 3
15834: PUSH
15835: LD_INT 60
15837: PUSH
15838: EMPTY
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 3
15847: PUSH
15848: LD_INT 55
15850: PUSH
15851: EMPTY
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PPUSH
15862: CALL_OW 72
15866: IFFALSE 15974
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15868: LD_ADDR_VAR 0 18
15872: PUSH
15873: LD_VAR 0 6
15877: PPUSH
15878: LD_INT 3
15880: PUSH
15881: LD_INT 60
15883: PUSH
15884: EMPTY
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: PUSH
15891: LD_INT 3
15893: PUSH
15894: LD_INT 55
15896: PUSH
15897: EMPTY
15898: LIST
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 72
15912: PUSH
15913: LD_INT 1
15915: ARRAY
15916: ST_TO_ADDR
// if IsInUnit ( driver ) then
15917: LD_VAR 0 18
15921: PPUSH
15922: CALL_OW 310
15926: IFFALSE 15937
// ComExit ( driver ) ;
15928: LD_VAR 0 18
15932: PPUSH
15933: CALL 41580 0 1
// AddComEnterUnit ( driver , tmp ) ;
15937: LD_VAR 0 18
15941: PPUSH
15942: LD_VAR 0 13
15946: PPUSH
15947: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15951: LD_VAR 0 18
15955: PPUSH
15956: LD_VAR 0 7
15960: PPUSH
15961: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15965: LD_VAR 0 18
15969: PPUSH
15970: CALL_OW 181
// end ; continue ;
15974: GO 15618
// end ; if not cleaners or not tmp in cleaners then
15976: LD_VAR 0 6
15980: NOT
15981: IFTRUE 15996
15983: PUSH
15984: LD_VAR 0 13
15988: PUSH
15989: LD_VAR 0 6
15993: IN
15994: NOT
15995: OR
15996: IFFALSE 16305
// begin if dep then
15998: LD_VAR 0 17
16002: IFFALSE 16138
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16004: LD_ADDR_VAR 0 16
16008: PUSH
16009: LD_VAR 0 17
16013: PUSH
16014: LD_INT 1
16016: ARRAY
16017: PPUSH
16018: CALL_OW 250
16022: PPUSH
16023: LD_VAR 0 17
16027: PUSH
16028: LD_INT 1
16030: ARRAY
16031: PPUSH
16032: CALL_OW 254
16036: PPUSH
16037: LD_INT 5
16039: PPUSH
16040: CALL_OW 272
16044: PUSH
16045: LD_VAR 0 17
16049: PUSH
16050: LD_INT 1
16052: ARRAY
16053: PPUSH
16054: CALL_OW 251
16058: PPUSH
16059: LD_VAR 0 17
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: PPUSH
16068: CALL_OW 254
16072: PPUSH
16073: LD_INT 5
16075: PPUSH
16076: CALL_OW 273
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16085: LD_VAR 0 16
16089: PUSH
16090: LD_INT 1
16092: ARRAY
16093: PPUSH
16094: LD_VAR 0 16
16098: PUSH
16099: LD_INT 2
16101: ARRAY
16102: PPUSH
16103: CALL_OW 488
16107: IFFALSE 16138
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16109: LD_VAR 0 13
16113: PPUSH
16114: LD_VAR 0 16
16118: PUSH
16119: LD_INT 1
16121: ARRAY
16122: PPUSH
16123: LD_VAR 0 16
16127: PUSH
16128: LD_INT 2
16130: ARRAY
16131: PPUSH
16132: CALL_OW 111
// continue ;
16136: GO 15618
// end ; end ; r := GetDir ( tmp ) ;
16138: LD_ADDR_VAR 0 15
16142: PUSH
16143: LD_VAR 0 13
16147: PPUSH
16148: CALL_OW 254
16152: ST_TO_ADDR
// if r = 5 then
16153: LD_VAR 0 15
16157: PUSH
16158: LD_INT 5
16160: EQUAL
16161: IFFALSE 16171
// r := 0 ;
16163: LD_ADDR_VAR 0 15
16167: PUSH
16168: LD_INT 0
16170: ST_TO_ADDR
// for j = r to 5 do
16171: LD_ADDR_VAR 0 10
16175: PUSH
16176: DOUBLE
16177: LD_VAR 0 15
16181: DEC
16182: ST_TO_ADDR
16183: LD_INT 5
16185: PUSH
16186: FOR_TO
16187: IFFALSE 16303
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16189: LD_ADDR_VAR 0 11
16193: PUSH
16194: LD_VAR 0 13
16198: PPUSH
16199: CALL_OW 250
16203: PPUSH
16204: LD_VAR 0 10
16208: PPUSH
16209: LD_INT 2
16211: PPUSH
16212: CALL_OW 272
16216: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16217: LD_ADDR_VAR 0 12
16221: PUSH
16222: LD_VAR 0 13
16226: PPUSH
16227: CALL_OW 251
16231: PPUSH
16232: LD_VAR 0 10
16236: PPUSH
16237: LD_INT 2
16239: PPUSH
16240: CALL_OW 273
16244: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16245: LD_VAR 0 11
16249: PPUSH
16250: LD_VAR 0 12
16254: PPUSH
16255: CALL_OW 488
16259: IFFALSE 16278
16261: PUSH
16262: LD_VAR 0 11
16266: PPUSH
16267: LD_VAR 0 12
16271: PPUSH
16272: CALL_OW 428
16276: NOT
16277: AND
16278: IFFALSE 16301
// begin ComMoveXY ( tmp , _x , _y ) ;
16280: LD_VAR 0 13
16284: PPUSH
16285: LD_VAR 0 11
16289: PPUSH
16290: LD_VAR 0 12
16294: PPUSH
16295: CALL_OW 111
// break ;
16299: GO 16303
// end ; end ;
16301: GO 16186
16303: POP
16304: POP
// end ; end ;
16305: GO 15618
16307: POP
16308: POP
// end ;
16309: LD_VAR 0 8
16313: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16314: LD_INT 0
16316: PPUSH
// result := true ;
16317: LD_ADDR_VAR 0 3
16321: PUSH
16322: LD_INT 1
16324: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16325: LD_VAR 0 2
16329: PUSH
16330: LD_INT 24
16332: DOUBLE
16333: EQUAL
16334: IFTRUE 16344
16336: LD_INT 33
16338: DOUBLE
16339: EQUAL
16340: IFTRUE 16344
16342: GO 16369
16344: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: LD_INT 32
16352: PPUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 321
16362: PUSH
16363: LD_INT 2
16365: EQUAL
16366: ST_TO_ADDR
16367: GO 16685
16369: LD_INT 20
16371: DOUBLE
16372: EQUAL
16373: IFTRUE 16377
16375: GO 16402
16377: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16378: LD_ADDR_VAR 0 3
16382: PUSH
16383: LD_INT 6
16385: PPUSH
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 321
16395: PUSH
16396: LD_INT 2
16398: EQUAL
16399: ST_TO_ADDR
16400: GO 16685
16402: LD_INT 22
16404: DOUBLE
16405: EQUAL
16406: IFTRUE 16416
16408: LD_INT 36
16410: DOUBLE
16411: EQUAL
16412: IFTRUE 16416
16414: GO 16441
16416: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16417: LD_ADDR_VAR 0 3
16421: PUSH
16422: LD_INT 15
16424: PPUSH
16425: LD_VAR 0 1
16429: PPUSH
16430: CALL_OW 321
16434: PUSH
16435: LD_INT 2
16437: EQUAL
16438: ST_TO_ADDR
16439: GO 16685
16441: LD_INT 30
16443: DOUBLE
16444: EQUAL
16445: IFTRUE 16449
16447: GO 16474
16449: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_INT 20
16457: PPUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 321
16467: PUSH
16468: LD_INT 2
16470: EQUAL
16471: ST_TO_ADDR
16472: GO 16685
16474: LD_INT 28
16476: DOUBLE
16477: EQUAL
16478: IFTRUE 16488
16480: LD_INT 21
16482: DOUBLE
16483: EQUAL
16484: IFTRUE 16488
16486: GO 16513
16488: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16489: LD_ADDR_VAR 0 3
16493: PUSH
16494: LD_INT 21
16496: PPUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 321
16506: PUSH
16507: LD_INT 2
16509: EQUAL
16510: ST_TO_ADDR
16511: GO 16685
16513: LD_INT 16
16515: DOUBLE
16516: EQUAL
16517: IFTRUE 16521
16519: GO 16546
16521: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: LD_INT 84
16529: PPUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 321
16539: PUSH
16540: LD_INT 2
16542: EQUAL
16543: ST_TO_ADDR
16544: GO 16685
16546: LD_INT 19
16548: DOUBLE
16549: EQUAL
16550: IFTRUE 16560
16552: LD_INT 23
16554: DOUBLE
16555: EQUAL
16556: IFTRUE 16560
16558: GO 16585
16560: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16561: LD_ADDR_VAR 0 3
16565: PUSH
16566: LD_INT 83
16568: PPUSH
16569: LD_VAR 0 1
16573: PPUSH
16574: CALL_OW 321
16578: PUSH
16579: LD_INT 2
16581: EQUAL
16582: ST_TO_ADDR
16583: GO 16685
16585: LD_INT 17
16587: DOUBLE
16588: EQUAL
16589: IFTRUE 16593
16591: GO 16618
16593: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16594: LD_ADDR_VAR 0 3
16598: PUSH
16599: LD_INT 39
16601: PPUSH
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 321
16611: PUSH
16612: LD_INT 2
16614: EQUAL
16615: ST_TO_ADDR
16616: GO 16685
16618: LD_INT 18
16620: DOUBLE
16621: EQUAL
16622: IFTRUE 16626
16624: GO 16651
16626: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16627: LD_ADDR_VAR 0 3
16631: PUSH
16632: LD_INT 40
16634: PPUSH
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 321
16644: PUSH
16645: LD_INT 2
16647: EQUAL
16648: ST_TO_ADDR
16649: GO 16685
16651: LD_INT 27
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16684
16659: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_INT 35
16667: PPUSH
16668: LD_VAR 0 1
16672: PPUSH
16673: CALL_OW 321
16677: PUSH
16678: LD_INT 2
16680: EQUAL
16681: ST_TO_ADDR
16682: GO 16685
16684: POP
// end ;
16685: LD_VAR 0 3
16689: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16690: LD_INT 0
16692: PPUSH
16693: PPUSH
16694: PPUSH
16695: PPUSH
16696: PPUSH
16697: PPUSH
16698: PPUSH
16699: PPUSH
16700: PPUSH
16701: PPUSH
16702: PPUSH
// result := false ;
16703: LD_ADDR_VAR 0 6
16707: PUSH
16708: LD_INT 0
16710: ST_TO_ADDR
// if btype = b_depot then
16711: LD_VAR 0 2
16715: PUSH
16716: LD_INT 0
16718: EQUAL
16719: IFFALSE 16731
// begin result := true ;
16721: LD_ADDR_VAR 0 6
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
// exit ;
16729: GO 17585
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16731: LD_VAR 0 1
16735: NOT
16736: IFTRUE 16761
16738: PUSH
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 266
16748: PUSH
16749: LD_INT 0
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: IN
16759: NOT
16760: OR
16761: IFTRUE 16770
16763: PUSH
16764: LD_VAR 0 2
16768: NOT
16769: OR
16770: IFTRUE 16806
16772: PUSH
16773: LD_VAR 0 5
16777: PUSH
16778: LD_INT 0
16780: PUSH
16781: LD_INT 1
16783: PUSH
16784: LD_INT 2
16786: PUSH
16787: LD_INT 3
16789: PUSH
16790: LD_INT 4
16792: PUSH
16793: LD_INT 5
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: IN
16804: NOT
16805: OR
16806: IFTRUE 16825
16808: PUSH
16809: LD_VAR 0 3
16813: PPUSH
16814: LD_VAR 0 4
16818: PPUSH
16819: CALL_OW 488
16823: NOT
16824: OR
16825: IFFALSE 16829
// exit ;
16827: GO 17585
// side := GetSide ( depot ) ;
16829: LD_ADDR_VAR 0 9
16833: PUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 255
16843: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16844: LD_VAR 0 9
16848: PPUSH
16849: LD_VAR 0 2
16853: PPUSH
16854: CALL 16314 0 2
16858: NOT
16859: IFFALSE 16863
// exit ;
16861: GO 17585
// pom := GetBase ( depot ) ;
16863: LD_ADDR_VAR 0 10
16867: PUSH
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL_OW 274
16877: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16878: LD_ADDR_VAR 0 11
16882: PUSH
16883: LD_VAR 0 2
16887: PPUSH
16888: LD_VAR 0 1
16892: PPUSH
16893: CALL_OW 248
16897: PPUSH
16898: CALL_OW 450
16902: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16903: LD_VAR 0 10
16907: PPUSH
16908: LD_INT 1
16910: PPUSH
16911: CALL_OW 275
16915: PUSH
16916: LD_VAR 0 11
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: GREATEREQUAL
16925: IFFALSE 16951
16927: PUSH
16928: LD_VAR 0 10
16932: PPUSH
16933: LD_INT 2
16935: PPUSH
16936: CALL_OW 275
16940: PUSH
16941: LD_VAR 0 11
16945: PUSH
16946: LD_INT 2
16948: ARRAY
16949: GREATEREQUAL
16950: AND
16951: IFFALSE 16977
16953: PUSH
16954: LD_VAR 0 10
16958: PPUSH
16959: LD_INT 3
16961: PPUSH
16962: CALL_OW 275
16966: PUSH
16967: LD_VAR 0 11
16971: PUSH
16972: LD_INT 3
16974: ARRAY
16975: GREATEREQUAL
16976: AND
16977: NOT
16978: IFFALSE 16982
// exit ;
16980: GO 17585
// if GetBType ( depot ) = b_depot then
16982: LD_VAR 0 1
16986: PPUSH
16987: CALL_OW 266
16991: PUSH
16992: LD_INT 0
16994: EQUAL
16995: IFFALSE 17007
// dist := 28 else
16997: LD_ADDR_VAR 0 14
17001: PUSH
17002: LD_INT 28
17004: ST_TO_ADDR
17005: GO 17015
// dist := 36 ;
17007: LD_ADDR_VAR 0 14
17011: PUSH
17012: LD_INT 36
17014: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_VAR 0 3
17024: PPUSH
17025: LD_VAR 0 4
17029: PPUSH
17030: CALL_OW 297
17034: PUSH
17035: LD_VAR 0 14
17039: GREATER
17040: IFFALSE 17044
// exit ;
17042: GO 17585
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17044: LD_ADDR_VAR 0 12
17048: PUSH
17049: LD_VAR 0 2
17053: PPUSH
17054: LD_VAR 0 3
17058: PPUSH
17059: LD_VAR 0 4
17063: PPUSH
17064: LD_VAR 0 5
17068: PPUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 248
17078: PPUSH
17079: LD_INT 0
17081: PPUSH
17082: CALL 17590 0 6
17086: ST_TO_ADDR
// if not hexes then
17087: LD_VAR 0 12
17091: NOT
17092: IFFALSE 17096
// exit ;
17094: GO 17585
// hex := GetHexInfo ( x , y ) ;
17096: LD_ADDR_VAR 0 15
17100: PUSH
17101: LD_VAR 0 3
17105: PPUSH
17106: LD_VAR 0 4
17110: PPUSH
17111: CALL_OW 546
17115: ST_TO_ADDR
// if hex [ 1 ] then
17116: LD_VAR 0 15
17120: PUSH
17121: LD_INT 1
17123: ARRAY
17124: IFFALSE 17128
// exit ;
17126: GO 17585
// height := hex [ 2 ] ;
17128: LD_ADDR_VAR 0 13
17132: PUSH
17133: LD_VAR 0 15
17137: PUSH
17138: LD_INT 2
17140: ARRAY
17141: ST_TO_ADDR
// for i = 1 to hexes do
17142: LD_ADDR_VAR 0 7
17146: PUSH
17147: DOUBLE
17148: LD_INT 1
17150: DEC
17151: ST_TO_ADDR
17152: LD_VAR 0 12
17156: PUSH
17157: FOR_TO
17158: IFFALSE 17502
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17160: LD_VAR 0 12
17164: PUSH
17165: LD_VAR 0 7
17169: ARRAY
17170: PUSH
17171: LD_INT 1
17173: ARRAY
17174: PPUSH
17175: LD_VAR 0 12
17179: PUSH
17180: LD_VAR 0 7
17184: ARRAY
17185: PUSH
17186: LD_INT 2
17188: ARRAY
17189: PPUSH
17190: CALL_OW 488
17194: NOT
17195: IFTRUE 17237
17197: PUSH
17198: LD_VAR 0 12
17202: PUSH
17203: LD_VAR 0 7
17207: ARRAY
17208: PUSH
17209: LD_INT 1
17211: ARRAY
17212: PPUSH
17213: LD_VAR 0 12
17217: PUSH
17218: LD_VAR 0 7
17222: ARRAY
17223: PUSH
17224: LD_INT 2
17226: ARRAY
17227: PPUSH
17228: CALL_OW 428
17232: PUSH
17233: LD_INT 0
17235: GREATER
17236: OR
17237: IFTRUE 17275
17239: PUSH
17240: LD_VAR 0 12
17244: PUSH
17245: LD_VAR 0 7
17249: ARRAY
17250: PUSH
17251: LD_INT 1
17253: ARRAY
17254: PPUSH
17255: LD_VAR 0 12
17259: PUSH
17260: LD_VAR 0 7
17264: ARRAY
17265: PUSH
17266: LD_INT 2
17268: ARRAY
17269: PPUSH
17270: CALL_OW 351
17274: OR
17275: IFFALSE 17281
// exit ;
17277: POP
17278: POP
17279: GO 17585
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17281: LD_ADDR_VAR 0 8
17285: PUSH
17286: LD_VAR 0 12
17290: PUSH
17291: LD_VAR 0 7
17295: ARRAY
17296: PUSH
17297: LD_INT 1
17299: ARRAY
17300: PPUSH
17301: LD_VAR 0 12
17305: PUSH
17306: LD_VAR 0 7
17310: ARRAY
17311: PUSH
17312: LD_INT 2
17314: ARRAY
17315: PPUSH
17316: CALL_OW 546
17320: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17321: LD_VAR 0 8
17325: PUSH
17326: LD_INT 1
17328: ARRAY
17329: IFTRUE 17351
17331: PUSH
17332: LD_VAR 0 8
17336: PUSH
17337: LD_INT 2
17339: ARRAY
17340: PUSH
17341: LD_VAR 0 13
17345: PUSH
17346: LD_INT 2
17348: PLUS
17349: GREATER
17350: OR
17351: IFTRUE 17373
17353: PUSH
17354: LD_VAR 0 8
17358: PUSH
17359: LD_INT 2
17361: ARRAY
17362: PUSH
17363: LD_VAR 0 13
17367: PUSH
17368: LD_INT 2
17370: MINUS
17371: LESS
17372: OR
17373: IFTRUE 17441
17375: PUSH
17376: LD_VAR 0 8
17380: PUSH
17381: LD_INT 3
17383: ARRAY
17384: PUSH
17385: LD_INT 0
17387: PUSH
17388: LD_INT 8
17390: PUSH
17391: LD_INT 9
17393: PUSH
17394: LD_INT 10
17396: PUSH
17397: LD_INT 11
17399: PUSH
17400: LD_INT 12
17402: PUSH
17403: LD_INT 13
17405: PUSH
17406: LD_INT 16
17408: PUSH
17409: LD_INT 17
17411: PUSH
17412: LD_INT 18
17414: PUSH
17415: LD_INT 19
17417: PUSH
17418: LD_INT 20
17420: PUSH
17421: LD_INT 21
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: IN
17439: NOT
17440: OR
17441: IFTRUE 17454
17443: PUSH
17444: LD_VAR 0 8
17448: PUSH
17449: LD_INT 5
17451: ARRAY
17452: NOT
17453: OR
17454: IFTRUE 17494
17456: PUSH
17457: LD_VAR 0 8
17461: PUSH
17462: LD_INT 6
17464: ARRAY
17465: PUSH
17466: LD_INT 1
17468: PUSH
17469: LD_INT 2
17471: PUSH
17472: LD_INT 7
17474: PUSH
17475: LD_INT 9
17477: PUSH
17478: LD_INT 10
17480: PUSH
17481: LD_INT 11
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: IN
17492: NOT
17493: OR
17494: IFFALSE 17500
// exit ;
17496: POP
17497: POP
17498: GO 17585
// end ;
17500: GO 17157
17502: POP
17503: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17504: LD_VAR 0 9
17508: PPUSH
17509: LD_VAR 0 3
17513: PPUSH
17514: LD_VAR 0 4
17518: PPUSH
17519: LD_INT 20
17521: PPUSH
17522: CALL 9404 0 4
17526: PUSH
17527: LD_INT 4
17529: ARRAY
17530: IFFALSE 17534
// exit ;
17532: GO 17585
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17534: LD_VAR 0 2
17538: PUSH
17539: LD_INT 29
17541: PUSH
17542: LD_INT 30
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: IN
17549: IFFALSE 17573
17551: PUSH
17552: LD_VAR 0 3
17556: PPUSH
17557: LD_VAR 0 4
17561: PPUSH
17562: LD_VAR 0 9
17566: PPUSH
17567: CALL_OW 440
17571: NOT
17572: AND
17573: IFFALSE 17577
// exit ;
17575: GO 17585
// result := true ;
17577: LD_ADDR_VAR 0 6
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// end ;
17585: LD_VAR 0 6
17589: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17590: LD_INT 0
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
17597: PPUSH
17598: PPUSH
17599: PPUSH
17600: PPUSH
17601: PPUSH
17602: PPUSH
17603: PPUSH
17604: PPUSH
17605: PPUSH
17606: PPUSH
17607: PPUSH
17608: PPUSH
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
// result = [ ] ;
17650: LD_ADDR_VAR 0 7
17654: PUSH
17655: EMPTY
17656: ST_TO_ADDR
// temp_list = [ ] ;
17657: LD_ADDR_VAR 0 9
17661: PUSH
17662: EMPTY
17663: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17664: LD_VAR 0 4
17668: PUSH
17669: LD_INT 0
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: LD_INT 2
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: LD_INT 4
17683: PUSH
17684: LD_INT 5
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: IN
17695: NOT
17696: IFTRUE 17739
17698: PUSH
17699: LD_VAR 0 1
17703: PUSH
17704: LD_INT 0
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: IN
17714: IFFALSE 17738
17716: PUSH
17717: LD_VAR 0 5
17721: PUSH
17722: LD_INT 1
17724: PUSH
17725: LD_INT 2
17727: PUSH
17728: LD_INT 3
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: IN
17736: NOT
17737: AND
17738: OR
17739: IFFALSE 17743
// exit ;
17741: GO 36142
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17743: LD_VAR 0 1
17747: PUSH
17748: LD_INT 6
17750: PUSH
17751: LD_INT 7
17753: PUSH
17754: LD_INT 8
17756: PUSH
17757: LD_INT 13
17759: PUSH
17760: LD_INT 12
17762: PUSH
17763: LD_INT 15
17765: PUSH
17766: LD_INT 11
17768: PUSH
17769: LD_INT 14
17771: PUSH
17772: LD_INT 10
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: IN
17786: IFFALSE 17796
// btype = b_lab ;
17788: LD_ADDR_VAR 0 1
17792: PUSH
17793: LD_INT 6
17795: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17796: LD_VAR 0 6
17800: PUSH
17801: LD_INT 0
17803: PUSH
17804: LD_INT 1
17806: PUSH
17807: LD_INT 2
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: IN
17815: NOT
17816: IFTRUE 17884
17818: PUSH
17819: LD_VAR 0 1
17823: PUSH
17824: LD_INT 0
17826: PUSH
17827: LD_INT 1
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: LD_INT 3
17835: PUSH
17836: LD_INT 6
17838: PUSH
17839: LD_INT 36
17841: PUSH
17842: LD_INT 4
17844: PUSH
17845: LD_INT 5
17847: PUSH
17848: LD_INT 31
17850: PUSH
17851: LD_INT 32
17853: PUSH
17854: LD_INT 33
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: IN
17870: NOT
17871: IFFALSE 17883
17873: PUSH
17874: LD_VAR 0 6
17878: PUSH
17879: LD_INT 1
17881: EQUAL
17882: AND
17883: OR
17884: IFTRUE 17916
17886: PUSH
17887: LD_VAR 0 1
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: LD_INT 3
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: IN
17902: NOT
17903: IFFALSE 17915
17905: PUSH
17906: LD_VAR 0 6
17910: PUSH
17911: LD_INT 2
17913: EQUAL
17914: AND
17915: OR
17916: IFFALSE 17926
// mode = 0 ;
17918: LD_ADDR_VAR 0 6
17922: PUSH
17923: LD_INT 0
17925: ST_TO_ADDR
// case mode of 0 :
17926: LD_VAR 0 6
17930: PUSH
17931: LD_INT 0
17933: DOUBLE
17934: EQUAL
17935: IFTRUE 17939
17937: GO 29392
17939: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17940: LD_ADDR_VAR 0 11
17944: PUSH
17945: LD_INT 0
17947: PUSH
17948: LD_INT 0
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 0
17957: PUSH
17958: LD_INT 1
17960: NEG
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 1
17968: PUSH
17969: LD_INT 0
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: LD_INT 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: LD_INT 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 1
17998: NEG
17999: PUSH
18000: LD_INT 0
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 1
18009: NEG
18010: PUSH
18011: LD_INT 1
18013: NEG
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 1
18021: NEG
18022: PUSH
18023: LD_INT 2
18025: NEG
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 2
18036: NEG
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: LD_INT 1
18047: NEG
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: LD_INT 2
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 0
18065: PUSH
18066: LD_INT 2
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 1
18075: NEG
18076: PUSH
18077: LD_INT 1
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PUSH
18084: LD_INT 1
18086: PUSH
18087: LD_INT 3
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 0
18096: PUSH
18097: LD_INT 3
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 1
18106: NEG
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18133: LD_ADDR_VAR 0 12
18137: PUSH
18138: LD_INT 0
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 0
18150: PUSH
18151: LD_INT 1
18153: NEG
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: PUSH
18159: LD_INT 1
18161: PUSH
18162: LD_INT 0
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: LD_INT 1
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: LD_INT 1
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 1
18191: NEG
18192: PUSH
18193: LD_INT 0
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 1
18202: NEG
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: LD_INT 1
18217: NEG
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 0
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 1
18245: NEG
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 2
18256: NEG
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 2
18267: NEG
18268: PUSH
18269: LD_INT 1
18271: NEG
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 2
18279: NEG
18280: PUSH
18281: LD_INT 1
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 3
18290: NEG
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 3
18301: NEG
18302: PUSH
18303: LD_INT 1
18305: NEG
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18329: LD_ADDR_VAR 0 13
18333: PUSH
18334: LD_INT 0
18336: PUSH
18337: LD_INT 0
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: LD_INT 0
18346: PUSH
18347: LD_INT 1
18349: NEG
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: LD_INT 0
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: LD_INT 1
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 1
18387: NEG
18388: PUSH
18389: LD_INT 0
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: NEG
18399: PUSH
18400: LD_INT 1
18402: NEG
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 1
18410: NEG
18411: PUSH
18412: LD_INT 2
18414: NEG
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 2
18432: PUSH
18433: LD_INT 2
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: LD_INT 1
18456: NEG
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: NEG
18465: PUSH
18466: LD_INT 2
18468: NEG
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 2
18476: NEG
18477: PUSH
18478: LD_INT 3
18480: NEG
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 3
18488: NEG
18489: PUSH
18490: LD_INT 2
18492: NEG
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 3
18500: NEG
18501: PUSH
18502: LD_INT 3
18504: NEG
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18528: LD_ADDR_VAR 0 14
18532: PUSH
18533: LD_INT 0
18535: PUSH
18536: LD_INT 0
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 0
18545: PUSH
18546: LD_INT 1
18548: NEG
18549: PUSH
18550: EMPTY
18551: LIST
18552: LIST
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: LD_INT 0
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 1
18586: NEG
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 1
18597: NEG
18598: PUSH
18599: LD_INT 1
18601: NEG
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 1
18609: NEG
18610: PUSH
18611: LD_INT 2
18613: NEG
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PUSH
18619: LD_INT 0
18621: PUSH
18622: LD_INT 2
18624: NEG
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 1
18632: PUSH
18633: LD_INT 1
18635: NEG
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 1
18643: PUSH
18644: LD_INT 2
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 0
18653: PUSH
18654: LD_INT 2
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: LD_INT 1
18663: NEG
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 1
18674: NEG
18675: PUSH
18676: LD_INT 3
18678: NEG
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: LD_INT 3
18689: NEG
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 2
18700: NEG
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18724: LD_ADDR_VAR 0 15
18728: PUSH
18729: LD_INT 0
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 0
18741: PUSH
18742: LD_INT 1
18744: NEG
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: LD_INT 0
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 1
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: LD_INT 1
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: LD_INT 1
18782: NEG
18783: PUSH
18784: LD_INT 0
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 1
18793: NEG
18794: PUSH
18795: LD_INT 1
18797: NEG
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: LD_INT 1
18808: NEG
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 2
18816: PUSH
18817: LD_INT 0
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 1
18836: NEG
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: NEG
18848: PUSH
18849: LD_INT 0
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 2
18858: NEG
18859: PUSH
18860: LD_INT 1
18862: NEG
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: LD_INT 0
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: LD_INT 3
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18917: LD_ADDR_VAR 0 16
18921: PUSH
18922: LD_INT 0
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 0
18934: PUSH
18935: LD_INT 1
18937: NEG
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: LD_INT 0
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 1
18975: NEG
18976: PUSH
18977: LD_INT 0
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 1
18986: NEG
18987: PUSH
18988: LD_INT 1
18990: NEG
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 1
18998: NEG
18999: PUSH
19000: LD_INT 2
19002: NEG
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 2
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: LD_INT 2
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: LD_INT 2
19040: NEG
19041: PUSH
19042: LD_INT 1
19044: NEG
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 2
19052: NEG
19053: PUSH
19054: LD_INT 2
19056: NEG
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 3
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 3
19074: PUSH
19075: LD_INT 3
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: LD_INT 3
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19110: LD_ADDR_VAR 0 17
19114: PUSH
19115: LD_INT 0
19117: PUSH
19118: LD_INT 0
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 1
19130: NEG
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: LD_INT 1
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 1
19168: NEG
19169: PUSH
19170: LD_INT 0
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 1
19179: NEG
19180: PUSH
19181: LD_INT 1
19183: NEG
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 1
19191: NEG
19192: PUSH
19193: LD_INT 2
19195: NEG
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PUSH
19201: LD_INT 0
19203: PUSH
19204: LD_INT 2
19206: NEG
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 1
19214: PUSH
19215: LD_INT 1
19217: NEG
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 2
19225: PUSH
19226: LD_INT 0
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 2
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: LD_INT 2
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 1
19275: NEG
19276: PUSH
19277: LD_INT 1
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 2
19286: NEG
19287: PUSH
19288: LD_INT 0
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 2
19297: NEG
19298: PUSH
19299: LD_INT 1
19301: NEG
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: LD_INT 2
19309: NEG
19310: PUSH
19311: LD_INT 2
19313: NEG
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: LIST
19330: LIST
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19340: LD_ADDR_VAR 0 18
19344: PUSH
19345: LD_INT 0
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 0
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 1
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 1
19398: NEG
19399: PUSH
19400: LD_INT 0
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 1
19409: NEG
19410: PUSH
19411: LD_INT 1
19413: NEG
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 1
19421: NEG
19422: PUSH
19423: LD_INT 2
19425: NEG
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 0
19433: PUSH
19434: LD_INT 2
19436: NEG
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 1
19444: PUSH
19445: LD_INT 1
19447: NEG
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: LD_INT 2
19455: PUSH
19456: LD_INT 0
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 1
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: LD_INT 2
19478: PUSH
19479: EMPTY
19480: LIST
19481: LIST
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 0
19495: PUSH
19496: LD_INT 2
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: NEG
19506: PUSH
19507: LD_INT 1
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 2
19516: NEG
19517: PUSH
19518: LD_INT 0
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 2
19527: NEG
19528: PUSH
19529: LD_INT 1
19531: NEG
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 2
19539: NEG
19540: PUSH
19541: LD_INT 2
19543: NEG
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19570: LD_ADDR_VAR 0 19
19574: PUSH
19575: LD_INT 0
19577: PUSH
19578: LD_INT 0
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 0
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 0
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 1
19608: PUSH
19609: LD_INT 1
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 1
19628: NEG
19629: PUSH
19630: LD_INT 0
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: LD_INT 1
19639: NEG
19640: PUSH
19641: LD_INT 1
19643: NEG
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: LD_INT 1
19651: NEG
19652: PUSH
19653: LD_INT 2
19655: NEG
19656: PUSH
19657: EMPTY
19658: LIST
19659: LIST
19660: PUSH
19661: LD_INT 0
19663: PUSH
19664: LD_INT 2
19666: NEG
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: LD_INT 1
19677: NEG
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 2
19685: PUSH
19686: LD_INT 0
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: LD_INT 1
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: LD_INT 2
19705: PUSH
19706: LD_INT 2
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: LD_INT 2
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: LD_INT 0
19725: PUSH
19726: LD_INT 2
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 1
19735: NEG
19736: PUSH
19737: LD_INT 1
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 2
19746: NEG
19747: PUSH
19748: LD_INT 0
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: NEG
19758: PUSH
19759: LD_INT 1
19761: NEG
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 2
19769: NEG
19770: PUSH
19771: LD_INT 2
19773: NEG
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19800: LD_ADDR_VAR 0 20
19804: PUSH
19805: LD_INT 0
19807: PUSH
19808: LD_INT 0
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 0
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 0
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 1
19838: PUSH
19839: LD_INT 1
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: LD_INT 1
19851: PUSH
19852: EMPTY
19853: LIST
19854: LIST
19855: PUSH
19856: LD_INT 1
19858: NEG
19859: PUSH
19860: LD_INT 0
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 1
19869: NEG
19870: PUSH
19871: LD_INT 1
19873: NEG
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: LD_INT 1
19881: NEG
19882: PUSH
19883: LD_INT 2
19885: NEG
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 0
19893: PUSH
19894: LD_INT 2
19896: NEG
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: LD_INT 1
19904: PUSH
19905: LD_INT 1
19907: NEG
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 0
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: LD_INT 1
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 2
19935: PUSH
19936: LD_INT 2
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 0
19955: PUSH
19956: LD_INT 2
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 1
19965: NEG
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 2
19976: NEG
19977: PUSH
19978: LD_INT 0
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: NEG
19988: PUSH
19989: LD_INT 1
19991: NEG
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 2
19999: NEG
20000: PUSH
20001: LD_INT 2
20003: NEG
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20030: LD_ADDR_VAR 0 21
20034: PUSH
20035: LD_INT 0
20037: PUSH
20038: LD_INT 0
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: LD_INT 0
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 0
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 1
20068: PUSH
20069: LD_INT 1
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 1
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: PUSH
20090: LD_INT 0
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: LD_INT 1
20099: NEG
20100: PUSH
20101: LD_INT 1
20103: NEG
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: LD_INT 1
20111: NEG
20112: PUSH
20113: LD_INT 2
20115: NEG
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: LD_INT 0
20123: PUSH
20124: LD_INT 2
20126: NEG
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: PUSH
20132: LD_INT 1
20134: PUSH
20135: LD_INT 1
20137: NEG
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 0
20148: PUSH
20149: EMPTY
20150: LIST
20151: LIST
20152: PUSH
20153: LD_INT 2
20155: PUSH
20156: LD_INT 1
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 2
20165: PUSH
20166: LD_INT 2
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: LD_INT 2
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 0
20185: PUSH
20186: LD_INT 2
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 1
20195: NEG
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 2
20206: NEG
20207: PUSH
20208: LD_INT 0
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 2
20217: NEG
20218: PUSH
20219: LD_INT 1
20221: NEG
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 2
20229: NEG
20230: PUSH
20231: LD_INT 2
20233: NEG
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20260: LD_ADDR_VAR 0 22
20264: PUSH
20265: LD_INT 0
20267: PUSH
20268: LD_INT 0
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: PUSH
20275: LD_INT 0
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 0
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 1
20298: PUSH
20299: LD_INT 1
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: LD_INT 1
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 1
20318: NEG
20319: PUSH
20320: LD_INT 0
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: LD_INT 1
20329: NEG
20330: PUSH
20331: LD_INT 1
20333: NEG
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 1
20341: NEG
20342: PUSH
20343: LD_INT 2
20345: NEG
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 0
20353: PUSH
20354: LD_INT 2
20356: NEG
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: LD_INT 1
20367: NEG
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: PUSH
20373: LD_INT 2
20375: PUSH
20376: LD_INT 0
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PUSH
20383: LD_INT 2
20385: PUSH
20386: LD_INT 1
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PUSH
20393: LD_INT 2
20395: PUSH
20396: LD_INT 2
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: LD_INT 2
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: PUSH
20413: LD_INT 0
20415: PUSH
20416: LD_INT 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 1
20425: NEG
20426: PUSH
20427: LD_INT 1
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PUSH
20434: LD_INT 2
20436: NEG
20437: PUSH
20438: LD_INT 0
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: LD_INT 2
20447: NEG
20448: PUSH
20449: LD_INT 1
20451: NEG
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: LD_INT 2
20459: NEG
20460: PUSH
20461: LD_INT 2
20463: NEG
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20490: LD_ADDR_VAR 0 23
20494: PUSH
20495: LD_INT 0
20497: PUSH
20498: LD_INT 0
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 0
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: LD_INT 0
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PUSH
20546: LD_INT 1
20548: NEG
20549: PUSH
20550: LD_INT 0
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: PUSH
20557: LD_INT 1
20559: NEG
20560: PUSH
20561: LD_INT 1
20563: NEG
20564: PUSH
20565: EMPTY
20566: LIST
20567: LIST
20568: PUSH
20569: LD_INT 1
20571: NEG
20572: PUSH
20573: LD_INT 2
20575: NEG
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 0
20583: PUSH
20584: LD_INT 2
20586: NEG
20587: PUSH
20588: EMPTY
20589: LIST
20590: LIST
20591: PUSH
20592: LD_INT 1
20594: PUSH
20595: LD_INT 1
20597: NEG
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: LD_INT 0
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 2
20615: PUSH
20616: LD_INT 1
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: LD_INT 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: LD_INT 2
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: LD_INT 0
20645: PUSH
20646: LD_INT 2
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 1
20655: NEG
20656: PUSH
20657: LD_INT 1
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: NEG
20667: PUSH
20668: LD_INT 0
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: LD_INT 2
20677: NEG
20678: PUSH
20679: LD_INT 1
20681: NEG
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 2
20689: NEG
20690: PUSH
20691: LD_INT 2
20693: NEG
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 2
20701: NEG
20702: PUSH
20703: LD_INT 3
20705: NEG
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: NEG
20714: PUSH
20715: LD_INT 3
20717: NEG
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 1
20725: PUSH
20726: LD_INT 2
20728: NEG
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: PUSH
20737: LD_INT 1
20739: NEG
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20770: LD_ADDR_VAR 0 24
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: LD_INT 0
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 0
20787: PUSH
20788: LD_INT 1
20790: NEG
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 0
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 1
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PUSH
20826: LD_INT 1
20828: NEG
20829: PUSH
20830: LD_INT 0
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PUSH
20837: LD_INT 1
20839: NEG
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 1
20851: NEG
20852: PUSH
20853: LD_INT 2
20855: NEG
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 0
20863: PUSH
20864: LD_INT 2
20866: NEG
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: PUSH
20872: LD_INT 1
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 2
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 2
20905: PUSH
20906: LD_INT 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 0
20925: PUSH
20926: LD_INT 2
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: LD_INT 1
20935: NEG
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: NEG
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 2
20957: NEG
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 2
20969: NEG
20970: PUSH
20971: LD_INT 2
20973: NEG
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 1
20981: PUSH
20982: LD_INT 2
20984: NEG
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 2
20992: PUSH
20993: LD_INT 1
20995: NEG
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 3
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 3
21013: PUSH
21014: LD_INT 2
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21046: LD_ADDR_VAR 0 25
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: LD_INT 0
21063: PUSH
21064: LD_INT 1
21066: NEG
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: LD_INT 0
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: LD_INT 1
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 1
21104: NEG
21105: PUSH
21106: LD_INT 0
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 1
21115: NEG
21116: PUSH
21117: LD_INT 1
21119: NEG
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: LD_INT 2
21131: NEG
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: LD_INT 2
21142: NEG
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 2
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PUSH
21169: LD_INT 2
21171: PUSH
21172: LD_INT 1
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: LD_INT 2
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: PUSH
21199: LD_INT 0
21201: PUSH
21202: LD_INT 2
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: LD_INT 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 2
21222: NEG
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: EMPTY
21228: LIST
21229: LIST
21230: PUSH
21231: LD_INT 2
21233: NEG
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: LD_INT 2
21245: NEG
21246: PUSH
21247: LD_INT 2
21249: NEG
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 3
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 3
21267: PUSH
21268: LD_INT 2
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 2
21277: PUSH
21278: LD_INT 3
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 1
21287: PUSH
21288: LD_INT 3
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21320: LD_ADDR_VAR 0 26
21324: PUSH
21325: LD_INT 0
21327: PUSH
21328: LD_INT 0
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 1
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 1
21358: PUSH
21359: LD_INT 1
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 1
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: NEG
21379: PUSH
21380: LD_INT 0
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: NEG
21390: PUSH
21391: LD_INT 1
21393: NEG
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 1
21401: NEG
21402: PUSH
21403: LD_INT 2
21405: NEG
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: LD_INT 2
21416: NEG
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 2
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 2
21455: PUSH
21456: LD_INT 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 2
21496: NEG
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 2
21507: NEG
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 2
21519: NEG
21520: PUSH
21521: LD_INT 2
21523: NEG
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: PUSH
21529: LD_INT 2
21531: PUSH
21532: LD_INT 3
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: PUSH
21542: LD_INT 3
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 1
21551: NEG
21552: PUSH
21553: LD_INT 2
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 2
21562: NEG
21563: PUSH
21564: LD_INT 1
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21596: LD_ADDR_VAR 0 27
21600: PUSH
21601: LD_INT 0
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 1
21616: NEG
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 0
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 1
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: LD_INT 1
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 1
21654: NEG
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 1
21665: NEG
21666: PUSH
21667: LD_INT 1
21669: NEG
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 1
21677: NEG
21678: PUSH
21679: LD_INT 2
21681: NEG
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 2
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 1
21703: NEG
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 2
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 2
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 2
21731: PUSH
21732: LD_INT 2
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: LD_INT 2
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 0
21751: PUSH
21752: LD_INT 2
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 2
21772: NEG
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: EMPTY
21778: LIST
21779: LIST
21780: PUSH
21781: LD_INT 2
21783: NEG
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: LD_INT 2
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 1
21807: NEG
21808: PUSH
21809: LD_INT 2
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PUSH
21816: LD_INT 2
21818: NEG
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 3
21829: NEG
21830: PUSH
21831: LD_INT 1
21833: NEG
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: LD_INT 2
21845: NEG
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21876: LD_ADDR_VAR 0 28
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: NEG
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 0
21969: PUSH
21970: LD_INT 2
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 1
21980: PUSH
21981: LD_INT 1
21983: NEG
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 2
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 1
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 2
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 0
22031: PUSH
22032: LD_INT 2
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 1
22041: NEG
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: NEG
22053: PUSH
22054: LD_INT 0
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 2
22063: NEG
22064: PUSH
22065: LD_INT 1
22067: NEG
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: LD_INT 2
22075: NEG
22076: PUSH
22077: LD_INT 2
22079: NEG
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 2
22087: NEG
22088: PUSH
22089: LD_INT 3
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: NEG
22100: PUSH
22101: LD_INT 3
22103: NEG
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: LD_INT 3
22111: NEG
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 3
22123: NEG
22124: PUSH
22125: LD_INT 2
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22158: LD_ADDR_VAR 0 29
22162: PUSH
22163: LD_INT 0
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 0
22175: PUSH
22176: LD_INT 1
22178: NEG
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: LD_INT 0
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 1
22216: NEG
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 1
22227: NEG
22228: PUSH
22229: LD_INT 1
22231: NEG
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: LD_INT 2
22243: NEG
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: LD_INT 2
22254: NEG
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: LD_INT 1
22265: NEG
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 0
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 1
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 1
22293: PUSH
22294: LD_INT 2
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: LD_INT 1
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: LD_INT 2
22324: NEG
22325: PUSH
22326: LD_INT 1
22328: NEG
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 2
22336: NEG
22337: PUSH
22338: LD_INT 2
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 2
22348: NEG
22349: PUSH
22350: LD_INT 3
22352: NEG
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 2
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 3
22371: PUSH
22372: LD_INT 1
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: LD_INT 3
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 1
22391: NEG
22392: PUSH
22393: LD_INT 2
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 3
22402: NEG
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: EMPTY
22409: LIST
22410: LIST
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22437: LD_ADDR_VAR 0 30
22441: PUSH
22442: LD_INT 0
22444: PUSH
22445: LD_INT 0
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 0
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: PUSH
22476: LD_INT 1
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 1
22495: NEG
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: LD_INT 1
22506: NEG
22507: PUSH
22508: LD_INT 1
22510: NEG
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 2
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: LD_INT 2
22533: NEG
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 0
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: LD_INT 1
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 2
22572: PUSH
22573: LD_INT 2
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: LD_INT 2
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: NEG
22604: PUSH
22605: LD_INT 0
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 2
22614: NEG
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 3
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: LD_INT 2
22641: NEG
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 3
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 2
22659: PUSH
22660: LD_INT 3
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PUSH
22667: LD_INT 2
22669: NEG
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 3
22680: NEG
22681: PUSH
22682: LD_INT 1
22684: NEG
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22715: LD_ADDR_VAR 0 31
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: LD_INT 0
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: LD_INT 1
22735: NEG
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 1
22743: PUSH
22744: LD_INT 0
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 1
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: LD_INT 1
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: LD_INT 1
22784: NEG
22785: PUSH
22786: LD_INT 1
22788: NEG
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 1
22796: NEG
22797: PUSH
22798: LD_INT 2
22800: NEG
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 2
22819: PUSH
22820: LD_INT 0
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 1
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: LD_INT 2
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: NEG
22870: PUSH
22871: LD_INT 1
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: NEG
22881: PUSH
22882: LD_INT 1
22884: NEG
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: LD_INT 2
22892: NEG
22893: PUSH
22894: LD_INT 2
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: LD_INT 3
22908: NEG
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 2
22916: PUSH
22917: LD_INT 1
22919: NEG
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: LD_INT 3
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: NEG
22948: PUSH
22949: LD_INT 2
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: PUSH
22956: LD_INT 3
22958: NEG
22959: PUSH
22960: LD_INT 2
22962: NEG
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22993: LD_ADDR_VAR 0 32
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 0
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 1
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 1
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 1
23051: NEG
23052: PUSH
23053: LD_INT 0
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 1
23062: NEG
23063: PUSH
23064: LD_INT 1
23066: NEG
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 2
23078: NEG
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 2
23089: NEG
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 2
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 2
23170: NEG
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 3
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 1
23194: PUSH
23195: LD_INT 2
23197: NEG
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 2
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: LD_INT 3
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 2
23225: NEG
23226: PUSH
23227: LD_INT 1
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23271: LD_ADDR_VAR 0 33
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: LD_INT 0
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 1
23291: NEG
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 1
23309: PUSH
23310: LD_INT 1
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: NEG
23330: PUSH
23331: LD_INT 0
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: NEG
23341: PUSH
23342: LD_INT 1
23344: NEG
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: LD_INT 2
23356: NEG
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 1
23364: PUSH
23365: LD_INT 1
23367: NEG
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 2
23375: PUSH
23376: LD_INT 0
23378: PUSH
23379: EMPTY
23380: LIST
23381: LIST
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: LD_INT 1
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: PUSH
23393: LD_INT 1
23395: PUSH
23396: LD_INT 2
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 2
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PUSH
23413: LD_INT 1
23415: NEG
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: LD_INT 2
23426: NEG
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: NEG
23438: PUSH
23439: LD_INT 1
23441: NEG
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 2
23449: NEG
23450: PUSH
23451: LD_INT 2
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 2
23461: NEG
23462: PUSH
23463: LD_INT 3
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 2
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 3
23484: PUSH
23485: LD_INT 1
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: LD_INT 3
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 1
23504: NEG
23505: PUSH
23506: LD_INT 2
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 3
23515: NEG
23516: PUSH
23517: LD_INT 2
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23550: LD_ADDR_VAR 0 34
23554: PUSH
23555: LD_INT 0
23557: PUSH
23558: LD_INT 0
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 1
23570: NEG
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: LD_INT 0
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 1
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 1
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: LD_INT 0
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 1
23619: NEG
23620: PUSH
23621: LD_INT 1
23623: NEG
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: LD_INT 1
23631: NEG
23632: PUSH
23633: LD_INT 2
23635: NEG
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 2
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 2
23675: PUSH
23676: LD_INT 2
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: LD_INT 2
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: PUSH
23693: LD_INT 1
23695: NEG
23696: PUSH
23697: LD_INT 1
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: NEG
23718: PUSH
23719: LD_INT 1
23721: NEG
23722: PUSH
23723: EMPTY
23724: LIST
23725: LIST
23726: PUSH
23727: LD_INT 2
23729: NEG
23730: PUSH
23731: LD_INT 2
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: NEG
23742: PUSH
23743: LD_INT 3
23745: NEG
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: NEG
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 3
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 3
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: NEG
23785: PUSH
23786: LD_INT 1
23788: PUSH
23789: EMPTY
23790: LIST
23791: LIST
23792: PUSH
23793: LD_INT 3
23795: NEG
23796: PUSH
23797: LD_INT 1
23799: NEG
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23830: LD_ADDR_VAR 0 35
23834: PUSH
23835: LD_INT 0
23837: PUSH
23838: LD_INT 0
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 1
23858: PUSH
23859: LD_INT 0
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 1
23868: PUSH
23869: LD_INT 1
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: LD_INT 0
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: LD_INT 1
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: PUSH
23912: LD_INT 1
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: NEG
23922: PUSH
23923: LD_INT 1
23925: NEG
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23942: LD_ADDR_VAR 0 36
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: LD_INT 1
23962: NEG
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: PUSH
23981: LD_INT 1
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 1
24000: NEG
24001: PUSH
24002: LD_INT 0
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: LD_INT 1
24011: NEG
24012: PUSH
24013: LD_INT 1
24015: NEG
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: LD_INT 2
24027: NEG
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: EMPTY
24040: LIST
24041: LIST
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24054: LD_ADDR_VAR 0 37
24058: PUSH
24059: LD_INT 0
24061: PUSH
24062: LD_INT 0
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PUSH
24069: LD_INT 0
24071: PUSH
24072: LD_INT 1
24074: NEG
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: NEG
24113: PUSH
24114: LD_INT 0
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 1
24123: NEG
24124: PUSH
24125: LD_INT 1
24127: NEG
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: LD_INT 1
24138: NEG
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 1
24146: NEG
24147: PUSH
24148: LD_INT 1
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: EMPTY
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24166: LD_ADDR_VAR 0 38
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: LD_INT 0
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 0
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 1
24194: PUSH
24195: LD_INT 0
24197: PUSH
24198: EMPTY
24199: LIST
24200: LIST
24201: PUSH
24202: LD_INT 1
24204: PUSH
24205: LD_INT 1
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: LD_INT 1
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 1
24224: NEG
24225: PUSH
24226: LD_INT 0
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: NEG
24258: PUSH
24259: LD_INT 1
24261: NEG
24262: PUSH
24263: EMPTY
24264: LIST
24265: LIST
24266: PUSH
24267: EMPTY
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24278: LD_ADDR_VAR 0 39
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: LD_INT 0
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: PUSH
24307: LD_INT 0
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: LD_INT 1
24316: PUSH
24317: LD_INT 1
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 1
24336: NEG
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 1
24347: NEG
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: NEG
24360: PUSH
24361: LD_INT 2
24363: NEG
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24390: LD_ADDR_VAR 0 40
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: LD_INT 0
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: LD_INT 0
24407: PUSH
24408: LD_INT 1
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 0
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 1
24431: PUSH
24432: EMPTY
24433: LIST
24434: LIST
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: PUSH
24446: LD_INT 1
24448: NEG
24449: PUSH
24450: LD_INT 0
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: PUSH
24457: LD_INT 1
24459: NEG
24460: PUSH
24461: LD_INT 1
24463: NEG
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PUSH
24469: LD_INT 1
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 1
24482: NEG
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24502: LD_ADDR_VAR 0 41
24506: PUSH
24507: LD_INT 0
24509: PUSH
24510: LD_INT 0
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 0
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: LD_INT 1
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 1
24560: NEG
24561: PUSH
24562: LD_INT 0
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: LD_INT 1
24571: NEG
24572: PUSH
24573: LD_INT 1
24575: NEG
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 2
24587: NEG
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 1
24598: NEG
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: LD_INT 0
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: LD_INT 1
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 2
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: LD_INT 2
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 1
24646: NEG
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 2
24657: NEG
24658: PUSH
24659: LD_INT 0
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 2
24668: NEG
24669: PUSH
24670: LD_INT 1
24672: NEG
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 2
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: NEG
24693: PUSH
24694: LD_INT 3
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: LD_INT 1
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 3
24715: PUSH
24716: LD_INT 0
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 3
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: LD_INT 2
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: PUSH
24743: LD_INT 3
24745: PUSH
24746: LD_INT 3
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: LD_INT 3
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 2
24765: NEG
24766: PUSH
24767: LD_INT 1
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 3
24776: NEG
24777: PUSH
24778: LD_INT 0
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 3
24787: NEG
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: LD_INT 3
24799: NEG
24800: PUSH
24801: LD_INT 2
24803: NEG
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: LD_INT 3
24811: NEG
24812: PUSH
24813: LD_INT 3
24815: NEG
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24852: LD_ADDR_VAR 0 42
24856: PUSH
24857: LD_INT 0
24859: PUSH
24860: LD_INT 0
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 1
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: LD_INT 0
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 1
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: LD_INT 2
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 0
24945: PUSH
24946: LD_INT 2
24948: NEG
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: PUSH
24954: LD_INT 1
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 2
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: LD_INT 2
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 2
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PUSH
25005: LD_INT 1
25007: NEG
25008: PUSH
25009: LD_INT 1
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: NEG
25019: PUSH
25020: LD_INT 1
25022: NEG
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: PUSH
25028: LD_INT 2
25030: NEG
25031: PUSH
25032: LD_INT 2
25034: NEG
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: LD_INT 3
25046: NEG
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: LD_INT 3
25058: NEG
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 0
25066: PUSH
25067: LD_INT 3
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 2
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 3
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 3
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: LD_INT 3
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 0
25128: PUSH
25129: LD_INT 3
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: LD_INT 3
25149: NEG
25150: PUSH
25151: LD_INT 2
25153: NEG
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 3
25161: NEG
25162: PUSH
25163: LD_INT 3
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25202: LD_ADDR_VAR 0 43
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 0
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 0
25219: PUSH
25220: LD_INT 1
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: LD_INT 0
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: LD_INT 1
25271: NEG
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PUSH
25285: LD_INT 2
25287: NEG
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 0
25295: PUSH
25296: LD_INT 2
25298: NEG
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 2
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: NEG
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 2
25379: NEG
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 3
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: LD_INT 3
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 2
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 1
25428: NEG
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 3
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 1
25456: PUSH
25457: LD_INT 3
25459: PUSH
25460: EMPTY
25461: LIST
25462: LIST
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: LD_INT 3
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: NEG
25477: PUSH
25478: LD_INT 2
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 3
25498: NEG
25499: PUSH
25500: LD_INT 0
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 3
25509: NEG
25510: PUSH
25511: LD_INT 1
25513: NEG
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25550: LD_ADDR_VAR 0 44
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 0
25567: PUSH
25568: LD_INT 1
25570: NEG
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: LD_INT 1
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: LD_INT 1
25601: PUSH
25602: EMPTY
25603: LIST
25604: LIST
25605: PUSH
25606: LD_INT 1
25608: NEG
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: LD_INT 1
25623: NEG
25624: PUSH
25625: EMPTY
25626: LIST
25627: LIST
25628: PUSH
25629: LD_INT 1
25631: NEG
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 1
25646: NEG
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 0
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 1
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: LD_INT 2
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 2
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 2
25740: NEG
25741: PUSH
25742: LD_INT 3
25744: NEG
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: LD_INT 2
25752: PUSH
25753: LD_INT 1
25755: NEG
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 3
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 3
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 3
25783: PUSH
25784: LD_INT 2
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 3
25793: PUSH
25794: LD_INT 3
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: LD_INT 1
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: LD_INT 3
25824: NEG
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: LD_INT 3
25835: NEG
25836: PUSH
25837: LD_INT 1
25839: NEG
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 3
25847: NEG
25848: PUSH
25849: LD_INT 2
25851: NEG
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: LD_INT 3
25859: NEG
25860: PUSH
25861: LD_INT 3
25863: NEG
25864: PUSH
25865: EMPTY
25866: LIST
25867: LIST
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25900: LD_ADDR_VAR 0 45
25904: PUSH
25905: LD_INT 0
25907: PUSH
25908: LD_INT 0
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: LD_INT 1
25920: NEG
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: LD_INT 0
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: PUSH
25939: LD_INT 1
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 1
25958: NEG
25959: PUSH
25960: LD_INT 0
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: LD_INT 1
25973: NEG
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 1
25981: NEG
25982: PUSH
25983: LD_INT 2
25985: NEG
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 0
25993: PUSH
25994: LD_INT 2
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: LD_INT 1
26007: NEG
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 2
26015: PUSH
26016: LD_INT 1
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 2
26025: PUSH
26026: LD_INT 2
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: LD_INT 2
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 0
26045: PUSH
26046: LD_INT 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 1
26055: NEG
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 2
26066: NEG
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: NEG
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 2
26090: NEG
26091: PUSH
26092: LD_INT 3
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: LD_INT 3
26106: NEG
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 0
26114: PUSH
26115: LD_INT 3
26117: NEG
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 1
26125: PUSH
26126: LD_INT 2
26128: NEG
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 3
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 3
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: LD_INT 3
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 3
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 3
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 3
26197: NEG
26198: PUSH
26199: LD_INT 2
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 3
26209: NEG
26210: PUSH
26211: LD_INT 3
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26250: LD_ADDR_VAR 0 46
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 0
26267: PUSH
26268: LD_INT 1
26270: NEG
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 1
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 1
26308: NEG
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: PUSH
26317: LD_INT 1
26319: NEG
26320: PUSH
26321: LD_INT 1
26323: NEG
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: LD_INT 2
26335: NEG
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 0
26343: PUSH
26344: LD_INT 2
26346: NEG
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: PUSH
26355: LD_INT 1
26357: NEG
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 0
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 1
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 1
26385: PUSH
26386: LD_INT 2
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: PUSH
26393: LD_INT 0
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 1
26405: NEG
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: PUSH
26414: LD_INT 2
26416: NEG
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: NEG
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 1
26439: NEG
26440: PUSH
26441: LD_INT 3
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 0
26451: PUSH
26452: LD_INT 3
26454: NEG
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: LD_INT 1
26462: PUSH
26463: LD_INT 2
26465: NEG
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 3
26484: PUSH
26485: LD_INT 0
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 3
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: PUSH
26505: LD_INT 3
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 0
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 1
26524: NEG
26525: PUSH
26526: LD_INT 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 2
26535: NEG
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 3
26546: NEG
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 3
26557: NEG
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: LIST
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26598: LD_ADDR_VAR 0 47
26602: PUSH
26603: LD_INT 0
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 0
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 0
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 1
26667: NEG
26668: PUSH
26669: LD_INT 1
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: LD_INT 2
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 2
26694: NEG
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 1
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 2
26713: NEG
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 2
26725: NEG
26726: PUSH
26727: LD_INT 2
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: EMPTY
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26749: LD_ADDR_VAR 0 48
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 1
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: LD_INT 1
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: NEG
26808: PUSH
26809: LD_INT 0
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: PUSH
26832: LD_INT 2
26834: NEG
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 0
26842: PUSH
26843: LD_INT 2
26845: NEG
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 1
26853: PUSH
26854: LD_INT 1
26856: NEG
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26896: LD_ADDR_VAR 0 49
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: LD_INT 0
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: LD_INT 1
26916: NEG
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: LD_INT 0
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: LD_INT 1
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 1
26954: NEG
26955: PUSH
26956: LD_INT 0
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 1
26965: NEG
26966: PUSH
26967: LD_INT 1
26969: NEG
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: PUSH
26975: LD_INT 1
26977: PUSH
26978: LD_INT 1
26980: NEG
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: LD_INT 2
26988: PUSH
26989: LD_INT 0
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 2
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 2
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: LD_INT 2
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27040: LD_ADDR_VAR 0 50
27044: PUSH
27045: LD_INT 0
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: LD_INT 1
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 1
27068: PUSH
27069: LD_INT 0
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: LD_INT 1
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: NEG
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: LD_INT 1
27109: NEG
27110: PUSH
27111: LD_INT 1
27113: NEG
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 0
27151: PUSH
27152: LD_INT 2
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: NEG
27162: PUSH
27163: LD_INT 1
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27184: LD_ADDR_VAR 0 51
27188: PUSH
27189: LD_INT 0
27191: PUSH
27192: LD_INT 0
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: PUSH
27199: LD_INT 0
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: EMPTY
27207: LIST
27208: LIST
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 1
27222: PUSH
27223: LD_INT 1
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: NEG
27243: PUSH
27244: LD_INT 0
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 2
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: LD_INT 2
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: LD_INT 1
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: PUSH
27294: LD_INT 2
27296: NEG
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 2
27307: NEG
27308: PUSH
27309: LD_INT 1
27311: NEG
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27331: LD_ADDR_VAR 0 52
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 0
27348: PUSH
27349: LD_INT 1
27351: NEG
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: LD_INT 1
27382: PUSH
27383: EMPTY
27384: LIST
27385: LIST
27386: PUSH
27387: LD_INT 1
27389: NEG
27390: PUSH
27391: LD_INT 0
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 1
27404: NEG
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: PUSH
27414: LD_INT 2
27416: NEG
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: LD_INT 0
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 2
27446: NEG
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 2
27458: NEG
27459: PUSH
27460: LD_INT 2
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: LIST
27473: LIST
27474: LIST
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27482: LD_ADDR_VAR 0 53
27486: PUSH
27487: LD_INT 0
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 0
27499: PUSH
27500: LD_INT 1
27502: NEG
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: LD_INT 0
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 1
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: LD_INT 0
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: LD_INT 1
27555: NEG
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 2
27567: NEG
27568: PUSH
27569: EMPTY
27570: LIST
27571: LIST
27572: PUSH
27573: LD_INT 0
27575: PUSH
27576: LD_INT 2
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 1
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: PUSH
27598: LD_INT 0
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 2
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: LD_INT 2
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: LD_INT 2
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 0
27637: PUSH
27638: LD_INT 2
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 1
27647: NEG
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: PUSH
27656: LD_INT 2
27658: NEG
27659: PUSH
27660: LD_INT 0
27662: PUSH
27663: EMPTY
27664: LIST
27665: LIST
27666: PUSH
27667: LD_INT 2
27669: NEG
27670: PUSH
27671: LD_INT 1
27673: NEG
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 2
27681: NEG
27682: PUSH
27683: LD_INT 2
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27712: LD_ADDR_VAR 0 54
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 0
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 1
27770: NEG
27771: PUSH
27772: LD_INT 0
27774: PUSH
27775: EMPTY
27776: LIST
27777: LIST
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 1
27793: NEG
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: EMPTY
27800: LIST
27801: LIST
27802: PUSH
27803: LD_INT 0
27805: PUSH
27806: LD_INT 2
27808: NEG
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: LD_INT 1
27819: NEG
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 2
27827: PUSH
27828: LD_INT 0
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: PUSH
27848: LD_INT 2
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: LD_INT 2
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 0
27867: PUSH
27868: LD_INT 2
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 1
27877: NEG
27878: PUSH
27879: LD_INT 1
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: LD_INT 0
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: NEG
27900: PUSH
27901: LD_INT 1
27903: NEG
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: LD_INT 2
27911: NEG
27912: PUSH
27913: LD_INT 2
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27942: LD_ADDR_VAR 0 55
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 1
27962: NEG
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 0
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 1
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 1
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 1
28000: NEG
28001: PUSH
28002: LD_INT 0
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: PUSH
28021: LD_INT 1
28023: NEG
28024: PUSH
28025: LD_INT 2
28027: NEG
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: LD_INT 2
28038: NEG
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PUSH
28044: LD_INT 1
28046: PUSH
28047: LD_INT 1
28049: NEG
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: LD_INT 0
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: LD_INT 1
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: PUSH
28075: LD_INT 2
28077: PUSH
28078: LD_INT 2
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 2
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 1
28107: NEG
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 2
28118: NEG
28119: PUSH
28120: LD_INT 0
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: NEG
28130: PUSH
28131: LD_INT 1
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: NEG
28142: PUSH
28143: LD_INT 2
28145: NEG
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: PUSH
28151: EMPTY
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28172: LD_ADDR_VAR 0 56
28176: PUSH
28177: LD_INT 0
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 0
28189: PUSH
28190: LD_INT 1
28192: NEG
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 0
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: LD_INT 1
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: PUSH
28228: LD_INT 1
28230: NEG
28231: PUSH
28232: LD_INT 0
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 1
28245: NEG
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 1
28253: NEG
28254: PUSH
28255: LD_INT 2
28257: NEG
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: LD_INT 2
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 1
28276: PUSH
28277: LD_INT 1
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 2
28287: PUSH
28288: LD_INT 0
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: LD_INT 1
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 2
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: EMPTY
28312: LIST
28313: LIST
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: LD_INT 2
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: NEG
28338: PUSH
28339: LD_INT 1
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 2
28348: NEG
28349: PUSH
28350: LD_INT 0
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 2
28371: NEG
28372: PUSH
28373: LD_INT 2
28375: NEG
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28402: LD_ADDR_VAR 0 57
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 0
28419: PUSH
28420: LD_INT 1
28422: NEG
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 0
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 1
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 1
28460: NEG
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 1
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 2
28498: NEG
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 2
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 2
28537: PUSH
28538: LD_INT 2
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: LD_INT 2
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 1
28567: NEG
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 2
28578: NEG
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: NEG
28590: PUSH
28591: LD_INT 1
28593: NEG
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 2
28601: NEG
28602: PUSH
28603: LD_INT 2
28605: NEG
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28632: LD_ADDR_VAR 0 58
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 2
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: NEG
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28862: LD_ADDR_VAR 0 59
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 1
28882: NEG
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: PUSH
28891: LD_INT 0
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 1
28920: NEG
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 1
28931: NEG
28932: PUSH
28933: LD_INT 1
28935: NEG
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28950: LD_ADDR_VAR 0 60
28954: PUSH
28955: LD_INT 0
28957: PUSH
28958: LD_INT 0
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 0
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 1
28978: PUSH
28979: LD_INT 0
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 1
29019: NEG
29020: PUSH
29021: LD_INT 1
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29038: LD_ADDR_VAR 0 61
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: LD_INT 1
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: EMPTY
29091: LIST
29092: LIST
29093: PUSH
29094: LD_INT 1
29096: NEG
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29126: LD_ADDR_VAR 0 62
29130: PUSH
29131: LD_INT 0
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: PUSH
29155: LD_INT 0
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: LD_INT 1
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: LD_INT 0
29188: PUSH
29189: EMPTY
29190: LIST
29191: LIST
29192: PUSH
29193: LD_INT 1
29195: NEG
29196: PUSH
29197: LD_INT 1
29199: NEG
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: LIST
29209: LIST
29210: LIST
29211: LIST
29212: LIST
29213: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29214: LD_ADDR_VAR 0 63
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 0
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 0
29231: PUSH
29232: LD_INT 1
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 1
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: LD_INT 1
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: LD_INT 1
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 1
29272: NEG
29273: PUSH
29274: LD_INT 0
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 1
29283: NEG
29284: PUSH
29285: LD_INT 1
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29302: LD_ADDR_VAR 0 64
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 0
29319: PUSH
29320: LD_INT 1
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 1
29330: PUSH
29331: LD_INT 0
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 1
29340: PUSH
29341: LD_INT 1
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 1
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: PUSH
29358: LD_INT 1
29360: NEG
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: LD_INT 1
29375: NEG
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: ST_TO_ADDR
// end ; 1 :
29390: GO 35287
29392: LD_INT 1
29394: DOUBLE
29395: EQUAL
29396: IFTRUE 29400
29398: GO 32023
29400: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29401: LD_ADDR_VAR 0 11
29405: PUSH
29406: LD_INT 1
29408: NEG
29409: PUSH
29410: LD_INT 3
29412: NEG
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 0
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: LD_INT 2
29434: NEG
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29445: LD_ADDR_VAR 0 12
29449: PUSH
29450: LD_INT 2
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: PUSH
29461: LD_INT 3
29463: PUSH
29464: LD_INT 0
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 3
29473: PUSH
29474: LD_INT 1
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29486: LD_ADDR_VAR 0 13
29490: PUSH
29491: LD_INT 3
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 3
29503: PUSH
29504: LD_INT 3
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: LD_INT 3
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: LIST
29525: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29526: LD_ADDR_VAR 0 14
29530: PUSH
29531: LD_INT 1
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 0
29543: PUSH
29544: LD_INT 3
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 1
29553: NEG
29554: PUSH
29555: LD_INT 2
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29567: LD_ADDR_VAR 0 15
29571: PUSH
29572: LD_INT 2
29574: NEG
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 3
29585: NEG
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: NEG
29597: PUSH
29598: LD_INT 1
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: LIST
29610: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29611: LD_ADDR_VAR 0 16
29615: PUSH
29616: LD_INT 2
29618: NEG
29619: PUSH
29620: LD_INT 3
29622: NEG
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: PUSH
29628: LD_INT 3
29630: NEG
29631: PUSH
29632: LD_INT 2
29634: NEG
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: NEG
29643: PUSH
29644: LD_INT 3
29646: NEG
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29657: LD_ADDR_VAR 0 17
29661: PUSH
29662: LD_INT 1
29664: NEG
29665: PUSH
29666: LD_INT 3
29668: NEG
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 3
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 2
29690: NEG
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29701: LD_ADDR_VAR 0 18
29705: PUSH
29706: LD_INT 2
29708: PUSH
29709: LD_INT 1
29711: NEG
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 3
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 3
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29742: LD_ADDR_VAR 0 19
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 2
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 3
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: LD_INT 3
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29782: LD_ADDR_VAR 0 20
29786: PUSH
29787: LD_INT 1
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 0
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 1
29809: NEG
29810: PUSH
29811: LD_INT 2
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: LIST
29822: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29823: LD_ADDR_VAR 0 21
29827: PUSH
29828: LD_INT 2
29830: NEG
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: LD_INT 3
29841: NEG
29842: PUSH
29843: LD_INT 0
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 3
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29867: LD_ADDR_VAR 0 22
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 3
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 3
29886: NEG
29887: PUSH
29888: LD_INT 2
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 3
29898: NEG
29899: PUSH
29900: LD_INT 3
29902: NEG
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: LIST
29912: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29913: LD_ADDR_VAR 0 23
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: LD_INT 3
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 4
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 3
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: LIST
29956: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29957: LD_ADDR_VAR 0 24
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 4
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29998: LD_ADDR_VAR 0 25
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 4
30015: PUSH
30016: LD_INT 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30038: LD_ADDR_VAR 0 26
30042: PUSH
30043: LD_INT 0
30045: PUSH
30046: LD_INT 3
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 4
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: LD_INT 3
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: LIST
30078: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30079: LD_ADDR_VAR 0 27
30083: PUSH
30084: LD_INT 3
30086: NEG
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 3
30097: NEG
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 4
30108: NEG
30109: PUSH
30110: LD_INT 1
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30123: LD_ADDR_VAR 0 28
30127: PUSH
30128: LD_INT 3
30130: NEG
30131: PUSH
30132: LD_INT 3
30134: NEG
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: PUSH
30140: LD_INT 3
30142: NEG
30143: PUSH
30144: LD_INT 4
30146: NEG
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 4
30154: NEG
30155: PUSH
30156: LD_INT 3
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: LIST
30168: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30169: LD_ADDR_VAR 0 29
30173: PUSH
30174: LD_INT 1
30176: NEG
30177: PUSH
30178: LD_INT 3
30180: NEG
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 3
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: LD_INT 2
30202: NEG
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 1
30210: NEG
30211: PUSH
30212: LD_INT 4
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 0
30222: PUSH
30223: LD_INT 4
30225: NEG
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: LD_INT 3
30236: NEG
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: LD_INT 5
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 0
30256: PUSH
30257: LD_INT 5
30259: NEG
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 4
30270: NEG
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 6
30282: NEG
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: LD_INT 6
30293: NEG
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 1
30301: PUSH
30302: LD_INT 5
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30324: LD_ADDR_VAR 0 30
30328: PUSH
30329: LD_INT 2
30331: PUSH
30332: LD_INT 1
30334: NEG
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 3
30342: PUSH
30343: LD_INT 0
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 3
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: LD_INT 1
30365: NEG
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 4
30373: PUSH
30374: LD_INT 0
30376: PUSH
30377: EMPTY
30378: LIST
30379: LIST
30380: PUSH
30381: LD_INT 4
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 4
30393: PUSH
30394: LD_INT 1
30396: NEG
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 5
30404: PUSH
30405: LD_INT 0
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 5
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 5
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 6
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 6
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30467: LD_ADDR_VAR 0 31
30471: PUSH
30472: LD_INT 3
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 3
30484: PUSH
30485: LD_INT 3
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: LD_INT 3
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 4
30504: PUSH
30505: LD_INT 3
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 4
30514: PUSH
30515: LD_INT 4
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: LD_INT 4
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 5
30544: PUSH
30545: LD_INT 5
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: LD_INT 5
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 6
30564: PUSH
30565: LD_INT 5
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 6
30574: PUSH
30575: LD_INT 6
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 5
30584: PUSH
30585: LD_INT 6
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30606: LD_ADDR_VAR 0 32
30610: PUSH
30611: LD_INT 1
30613: PUSH
30614: LD_INT 3
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: LD_INT 3
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: LD_INT 4
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: LD_INT 4
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: LD_INT 3
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: LD_INT 5
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 5
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: LD_INT 4
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 6
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 6
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 5
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30749: LD_ADDR_VAR 0 33
30753: PUSH
30754: LD_INT 2
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 3
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 3
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 3
30790: NEG
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 4
30801: NEG
30802: PUSH
30803: LD_INT 0
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 4
30812: NEG
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: LD_INT 4
30824: NEG
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 5
30835: NEG
30836: PUSH
30837: LD_INT 0
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 5
30846: NEG
30847: PUSH
30848: LD_INT 1
30850: NEG
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: LD_INT 5
30858: NEG
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 6
30869: NEG
30870: PUSH
30871: LD_INT 0
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 6
30880: NEG
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30904: LD_ADDR_VAR 0 34
30908: PUSH
30909: LD_INT 2
30911: NEG
30912: PUSH
30913: LD_INT 3
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 3
30923: NEG
30924: PUSH
30925: LD_INT 2
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: NEG
30936: PUSH
30937: LD_INT 3
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 3
30947: NEG
30948: PUSH
30949: LD_INT 4
30951: NEG
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: PUSH
30957: LD_INT 4
30959: NEG
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: PUSH
30969: LD_INT 4
30971: NEG
30972: PUSH
30973: LD_INT 4
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 4
30983: NEG
30984: PUSH
30985: LD_INT 5
30987: NEG
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 5
30995: NEG
30996: PUSH
30997: LD_INT 4
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 5
31007: NEG
31008: PUSH
31009: LD_INT 5
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 5
31019: NEG
31020: PUSH
31021: LD_INT 6
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 6
31031: NEG
31032: PUSH
31033: LD_INT 5
31035: NEG
31036: PUSH
31037: EMPTY
31038: LIST
31039: LIST
31040: PUSH
31041: LD_INT 6
31043: NEG
31044: PUSH
31045: LD_INT 6
31047: NEG
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31067: LD_ADDR_VAR 0 41
31071: PUSH
31072: LD_INT 0
31074: PUSH
31075: LD_INT 2
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 3
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: LIST
31110: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31111: LD_ADDR_VAR 0 42
31115: PUSH
31116: LD_INT 2
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 3
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31152: LD_ADDR_VAR 0 43
31156: PUSH
31157: LD_INT 2
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: LIST
31191: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31192: LD_ADDR_VAR 0 44
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: LD_INT 2
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: LD_INT 3
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: LIST
31232: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31233: LD_ADDR_VAR 0 45
31237: PUSH
31238: LD_INT 2
31240: NEG
31241: PUSH
31242: LD_INT 0
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: NEG
31252: PUSH
31253: LD_INT 1
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 3
31262: NEG
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: LIST
31276: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31277: LD_ADDR_VAR 0 46
31281: PUSH
31282: LD_INT 2
31284: NEG
31285: PUSH
31286: LD_INT 2
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: LD_INT 2
31296: NEG
31297: PUSH
31298: LD_INT 3
31300: NEG
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: PUSH
31306: LD_INT 3
31308: NEG
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31323: LD_ADDR_VAR 0 47
31327: PUSH
31328: LD_INT 2
31330: NEG
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: PUSH
31340: LD_INT 1
31342: NEG
31343: PUSH
31344: LD_INT 3
31346: NEG
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31356: LD_ADDR_VAR 0 48
31360: PUSH
31361: LD_INT 1
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 2
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31387: LD_ADDR_VAR 0 49
31391: PUSH
31392: LD_INT 3
31394: PUSH
31395: LD_INT 1
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 3
31404: PUSH
31405: LD_INT 2
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31416: LD_ADDR_VAR 0 50
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: LD_INT 3
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31445: LD_ADDR_VAR 0 51
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PUSH
31454: LD_INT 2
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31476: LD_ADDR_VAR 0 52
31480: PUSH
31481: LD_INT 3
31483: NEG
31484: PUSH
31485: LD_INT 1
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: LD_INT 2
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31509: LD_ADDR_VAR 0 53
31513: PUSH
31514: LD_INT 1
31516: NEG
31517: PUSH
31518: LD_INT 3
31520: NEG
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 3
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31553: LD_ADDR_VAR 0 54
31557: PUSH
31558: LD_INT 2
31560: PUSH
31561: LD_INT 1
31563: NEG
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 3
31571: PUSH
31572: LD_INT 0
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 3
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31594: LD_ADDR_VAR 0 55
31598: PUSH
31599: LD_INT 3
31601: PUSH
31602: LD_INT 2
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: LD_INT 3
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 3
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31634: LD_ADDR_VAR 0 56
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: LD_INT 3
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 3
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: LD_INT 2
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: LIST
31674: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31675: LD_ADDR_VAR 0 57
31679: PUSH
31680: LD_INT 2
31682: NEG
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 3
31693: NEG
31694: PUSH
31695: LD_INT 0
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 3
31704: NEG
31705: PUSH
31706: LD_INT 1
31708: NEG
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31719: LD_ADDR_VAR 0 58
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 3
31738: NEG
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 3
31750: NEG
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: EMPTY
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31765: LD_ADDR_VAR 0 59
31769: PUSH
31770: LD_INT 1
31772: NEG
31773: PUSH
31774: LD_INT 2
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 0
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: LD_INT 1
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: LIST
31808: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31809: LD_ADDR_VAR 0 60
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 1
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 2
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: LIST
31849: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31850: LD_ADDR_VAR 0 61
31854: PUSH
31855: LD_INT 2
31857: PUSH
31858: LD_INT 1
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 2
31867: PUSH
31868: LD_INT 2
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 2
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31890: LD_ADDR_VAR 0 62
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: LD_INT 2
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: LD_INT 1
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: LIST
31930: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31931: LD_ADDR_VAR 0 63
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 1
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 2
31949: NEG
31950: PUSH
31951: LD_INT 0
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 1
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: LIST
31974: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31975: LD_ADDR_VAR 0 64
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: LD_INT 2
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: NEG
31995: PUSH
31996: LD_INT 1
31998: NEG
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 2
32006: NEG
32007: PUSH
32008: LD_INT 2
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: ST_TO_ADDR
// end ; 2 :
32021: GO 35287
32023: LD_INT 2
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 35286
32031: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32032: LD_ADDR_VAR 0 29
32036: PUSH
32037: LD_INT 4
32039: PUSH
32040: LD_INT 0
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 4
32049: PUSH
32050: LD_INT 1
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: LD_INT 5
32060: PUSH
32061: LD_INT 0
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 5
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 4
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 3
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 3
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 3
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 5
32122: PUSH
32123: LD_INT 2
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 3
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PUSH
32140: LD_INT 3
32142: PUSH
32143: LD_INT 2
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 4
32152: PUSH
32153: LD_INT 3
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: LD_INT 4
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: LD_INT 4
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 2
32182: PUSH
32183: LD_INT 3
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 2
32192: PUSH
32193: LD_INT 2
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 4
32202: PUSH
32203: LD_INT 2
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 4
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: LD_INT 4
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 0
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 1
32242: PUSH
32243: LD_INT 4
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: PUSH
32253: LD_INT 5
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 0
32262: PUSH
32263: LD_INT 5
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: NEG
32273: PUSH
32274: LD_INT 4
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 1
32283: NEG
32284: PUSH
32285: LD_INT 3
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 2
32294: PUSH
32295: LD_INT 5
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 3
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 3
32315: NEG
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 3
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 2
32338: NEG
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 3
32360: NEG
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 4
32371: NEG
32372: PUSH
32373: LD_INT 0
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 4
32382: NEG
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 4
32394: NEG
32395: PUSH
32396: LD_INT 2
32398: NEG
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 4
32417: NEG
32418: PUSH
32419: LD_INT 4
32421: NEG
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 4
32429: NEG
32430: PUSH
32431: LD_INT 5
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 3
32441: NEG
32442: PUSH
32443: LD_INT 4
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 3
32453: NEG
32454: PUSH
32455: LD_INT 3
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 4
32465: NEG
32466: PUSH
32467: LD_INT 3
32469: NEG
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 5
32477: NEG
32478: PUSH
32479: LD_INT 4
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 5
32489: NEG
32490: PUSH
32491: LD_INT 5
32493: NEG
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: LD_INT 5
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 5
32513: NEG
32514: PUSH
32515: LD_INT 3
32517: NEG
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32570: LD_ADDR_VAR 0 30
32574: PUSH
32575: LD_INT 4
32577: PUSH
32578: LD_INT 4
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 4
32587: PUSH
32588: LD_INT 3
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 5
32597: PUSH
32598: LD_INT 4
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 5
32607: PUSH
32608: LD_INT 5
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 4
32617: PUSH
32618: LD_INT 5
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 3
32627: PUSH
32628: LD_INT 4
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: LD_INT 3
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: LD_INT 5
32647: PUSH
32648: LD_INT 3
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: LD_INT 5
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: LD_INT 3
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 0
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: PUSH
32688: LD_INT 3
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: LD_INT 4
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 1
32717: NEG
32718: PUSH
32719: LD_INT 3
32721: PUSH
32722: EMPTY
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 1
32728: NEG
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: LD_INT 4
32742: PUSH
32743: EMPTY
32744: LIST
32745: LIST
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: LD_INT 2
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 4
32760: NEG
32761: PUSH
32762: LD_INT 0
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 4
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: NEG
32776: PUSH
32777: EMPTY
32778: LIST
32779: LIST
32780: PUSH
32781: LD_INT 3
32783: NEG
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 3
32794: NEG
32795: PUSH
32796: LD_INT 1
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: NEG
32806: PUSH
32807: LD_INT 1
32809: PUSH
32810: EMPTY
32811: LIST
32812: LIST
32813: PUSH
32814: LD_INT 5
32816: NEG
32817: PUSH
32818: LD_INT 0
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: PUSH
32825: LD_INT 5
32827: NEG
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 5
32839: NEG
32840: PUSH
32841: LD_INT 2
32843: NEG
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: NEG
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 3
32862: NEG
32863: PUSH
32864: LD_INT 3
32866: NEG
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 3
32874: NEG
32875: PUSH
32876: LD_INT 4
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 2
32886: NEG
32887: PUSH
32888: LD_INT 3
32890: NEG
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 2
32898: NEG
32899: PUSH
32900: LD_INT 2
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: NEG
32911: PUSH
32912: LD_INT 2
32914: NEG
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 4
32922: NEG
32923: PUSH
32924: LD_INT 3
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 4
32934: NEG
32935: PUSH
32936: LD_INT 4
32938: NEG
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: PUSH
32944: LD_INT 2
32946: NEG
32947: PUSH
32948: LD_INT 4
32950: NEG
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: LD_INT 4
32958: NEG
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 4
32973: NEG
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 0
32981: PUSH
32982: LD_INT 5
32984: NEG
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PUSH
32990: LD_INT 1
32992: PUSH
32993: LD_INT 4
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 1
33003: PUSH
33004: LD_INT 3
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 3
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 4
33029: NEG
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: NEG
33038: PUSH
33039: LD_INT 5
33041: NEG
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: LD_INT 3
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 2
33060: NEG
33061: PUSH
33062: LD_INT 5
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33117: LD_ADDR_VAR 0 31
33121: PUSH
33122: LD_INT 0
33124: PUSH
33125: LD_INT 4
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 0
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 1
33144: PUSH
33145: LD_INT 4
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 5
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 5
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PUSH
33176: LD_INT 4
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: LD_INT 5
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: NEG
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 2
33240: NEG
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: NEG
33252: PUSH
33253: LD_INT 1
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 3
33262: NEG
33263: PUSH
33264: LD_INT 1
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 4
33273: NEG
33274: PUSH
33275: LD_INT 0
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 4
33284: NEG
33285: PUSH
33286: LD_INT 1
33288: NEG
33289: PUSH
33290: EMPTY
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 4
33296: NEG
33297: PUSH
33298: LD_INT 2
33300: NEG
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: LD_INT 2
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 4
33319: NEG
33320: PUSH
33321: LD_INT 4
33323: NEG
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: LD_INT 4
33331: NEG
33332: PUSH
33333: LD_INT 5
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: LD_INT 4
33347: NEG
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: LD_INT 3
33355: NEG
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 4
33367: NEG
33368: PUSH
33369: LD_INT 3
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 5
33379: NEG
33380: PUSH
33381: LD_INT 4
33383: NEG
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 5
33391: NEG
33392: PUSH
33393: LD_INT 5
33395: NEG
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 3
33403: NEG
33404: PUSH
33405: LD_INT 5
33407: NEG
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 5
33415: NEG
33416: PUSH
33417: LD_INT 3
33419: NEG
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: LD_INT 3
33430: NEG
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 0
33438: PUSH
33439: LD_INT 4
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: PUSH
33450: LD_INT 3
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 2
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: LD_INT 1
33482: NEG
33483: PUSH
33484: LD_INT 3
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 1
33494: NEG
33495: PUSH
33496: LD_INT 4
33498: NEG
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 2
33509: NEG
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 2
33517: NEG
33518: PUSH
33519: LD_INT 4
33521: NEG
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: PUSH
33527: LD_INT 4
33529: PUSH
33530: LD_INT 0
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: PUSH
33537: LD_INT 4
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 5
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 5
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 4
33570: PUSH
33571: LD_INT 1
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 3
33580: PUSH
33581: LD_INT 0
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 3
33590: PUSH
33591: LD_INT 1
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 3
33601: PUSH
33602: LD_INT 2
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 5
33612: PUSH
33613: LD_INT 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33667: LD_ADDR_VAR 0 32
33671: PUSH
33672: LD_INT 4
33674: NEG
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: NEG
33686: PUSH
33687: LD_INT 1
33689: NEG
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 3
33697: NEG
33698: PUSH
33699: LD_INT 0
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 3
33708: NEG
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 4
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 5
33730: NEG
33731: PUSH
33732: LD_INT 0
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 5
33741: NEG
33742: PUSH
33743: LD_INT 1
33745: NEG
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: PUSH
33751: LD_INT 5
33753: NEG
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 3
33765: NEG
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 3
33776: NEG
33777: PUSH
33778: LD_INT 3
33780: NEG
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: PUSH
33786: LD_INT 3
33788: NEG
33789: PUSH
33790: LD_INT 4
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 2
33800: NEG
33801: PUSH
33802: LD_INT 3
33804: NEG
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 3
33824: NEG
33825: PUSH
33826: LD_INT 2
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 4
33836: NEG
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 4
33848: NEG
33849: PUSH
33850: LD_INT 4
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: NEG
33861: PUSH
33862: LD_INT 4
33864: NEG
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 4
33872: NEG
33873: PUSH
33874: LD_INT 2
33876: NEG
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 0
33884: PUSH
33885: LD_INT 4
33887: NEG
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: PUSH
33893: LD_INT 0
33895: PUSH
33896: LD_INT 5
33898: NEG
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: LD_INT 4
33909: NEG
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: LD_INT 3
33920: NEG
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: LD_INT 3
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 1
33951: NEG
33952: PUSH
33953: LD_INT 5
33955: NEG
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 2
33963: PUSH
33964: LD_INT 3
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 2
33974: NEG
33975: PUSH
33976: LD_INT 5
33978: NEG
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 3
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PUSH
33994: LD_INT 3
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 4
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 4
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 3
34027: PUSH
34028: LD_INT 1
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 2
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 4
34069: PUSH
34070: LD_INT 2
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 4
34079: PUSH
34080: LD_INT 4
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 4
34089: PUSH
34090: LD_INT 3
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 5
34099: PUSH
34100: LD_INT 4
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 5
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: LD_INT 5
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 4
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 5
34149: PUSH
34150: LD_INT 3
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 5
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34214: LD_ADDR_VAR 0 33
34218: PUSH
34219: LD_INT 4
34221: NEG
34222: PUSH
34223: LD_INT 4
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 4
34233: NEG
34234: PUSH
34235: LD_INT 5
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 3
34245: NEG
34246: PUSH
34247: LD_INT 4
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 3
34257: NEG
34258: PUSH
34259: LD_INT 3
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 4
34269: NEG
34270: PUSH
34271: LD_INT 3
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 5
34281: NEG
34282: PUSH
34283: LD_INT 4
34285: NEG
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 5
34293: NEG
34294: PUSH
34295: LD_INT 5
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 3
34305: NEG
34306: PUSH
34307: LD_INT 5
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 5
34317: NEG
34318: PUSH
34319: LD_INT 3
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 3
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 4
34343: NEG
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: PUSH
34349: LD_INT 1
34351: PUSH
34352: LD_INT 3
34354: NEG
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 1
34362: PUSH
34363: LD_INT 2
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 0
34373: PUSH
34374: LD_INT 2
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 3
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: LD_INT 4
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 2
34408: PUSH
34409: LD_INT 2
34411: NEG
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 4
34423: NEG
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: LD_INT 0
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 4
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: LD_INT 5
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 5
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 4
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 3
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 3
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: LD_INT 2
34506: NEG
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 5
34514: PUSH
34515: LD_INT 2
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 3
34524: PUSH
34525: LD_INT 3
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 3
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 4
34544: PUSH
34545: LD_INT 3
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 4
34554: PUSH
34555: LD_INT 4
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: LD_INT 4
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: LD_INT 3
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 2
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 4
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: EMPTY
34599: LIST
34600: LIST
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 4
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: LD_INT 4
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 0
34624: PUSH
34625: LD_INT 3
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: PUSH
34635: LD_INT 4
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: LD_INT 5
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 5
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: NEG
34665: PUSH
34666: LD_INT 4
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: LD_INT 3
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 2
34686: PUSH
34687: LD_INT 5
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 3
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34752: LD_ADDR_VAR 0 34
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 4
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 5
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 4
34784: NEG
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: LD_INT 3
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 3
34806: NEG
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: LD_INT 4
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 5
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 2
34838: PUSH
34839: LD_INT 3
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: LD_INT 5
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 3
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 3
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 4
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 4
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 2
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 2
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 4
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 4
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 4
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 5
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 5
34984: PUSH
34985: LD_INT 5
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: LD_INT 5
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 3
35004: PUSH
35005: LD_INT 4
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 3
35014: PUSH
35015: LD_INT 3
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: LD_INT 5
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 3
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 2
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: LD_INT 4
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 4
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 3
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: LD_INT 4
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 4
35137: NEG
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 4
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 3
35160: NEG
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 3
35171: NEG
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 4
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 5
35193: NEG
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 5
35204: NEG
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 5
35216: NEG
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 3
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: ST_TO_ADDR
// end ; end ;
35284: GO 35287
35286: POP
// case btype of b_depot , b_warehouse :
35287: LD_VAR 0 1
35291: PUSH
35292: LD_INT 0
35294: DOUBLE
35295: EQUAL
35296: IFTRUE 35306
35298: LD_INT 1
35300: DOUBLE
35301: EQUAL
35302: IFTRUE 35306
35304: GO 35507
35306: POP
// case nation of nation_american :
35307: LD_VAR 0 5
35311: PUSH
35312: LD_INT 1
35314: DOUBLE
35315: EQUAL
35316: IFTRUE 35320
35318: GO 35376
35320: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_VAR 0 11
35330: PUSH
35331: LD_VAR 0 12
35335: PUSH
35336: LD_VAR 0 13
35340: PUSH
35341: LD_VAR 0 14
35345: PUSH
35346: LD_VAR 0 15
35350: PUSH
35351: LD_VAR 0 16
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: PUSH
35364: LD_VAR 0 4
35368: PUSH
35369: LD_INT 1
35371: PLUS
35372: ARRAY
35373: ST_TO_ADDR
35374: GO 35505
35376: LD_INT 2
35378: DOUBLE
35379: EQUAL
35380: IFTRUE 35384
35382: GO 35440
35384: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35385: LD_ADDR_VAR 0 9
35389: PUSH
35390: LD_VAR 0 17
35394: PUSH
35395: LD_VAR 0 18
35399: PUSH
35400: LD_VAR 0 19
35404: PUSH
35405: LD_VAR 0 20
35409: PUSH
35410: LD_VAR 0 21
35414: PUSH
35415: LD_VAR 0 22
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: PUSH
35428: LD_VAR 0 4
35432: PUSH
35433: LD_INT 1
35435: PLUS
35436: ARRAY
35437: ST_TO_ADDR
35438: GO 35505
35440: LD_INT 3
35442: DOUBLE
35443: EQUAL
35444: IFTRUE 35448
35446: GO 35504
35448: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35449: LD_ADDR_VAR 0 9
35453: PUSH
35454: LD_VAR 0 23
35458: PUSH
35459: LD_VAR 0 24
35463: PUSH
35464: LD_VAR 0 25
35468: PUSH
35469: LD_VAR 0 26
35473: PUSH
35474: LD_VAR 0 27
35478: PUSH
35479: LD_VAR 0 28
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: LD_VAR 0 4
35496: PUSH
35497: LD_INT 1
35499: PLUS
35500: ARRAY
35501: ST_TO_ADDR
35502: GO 35505
35504: POP
35505: GO 36060
35507: LD_INT 2
35509: DOUBLE
35510: EQUAL
35511: IFTRUE 35521
35513: LD_INT 3
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35521
35519: GO 35577
35521: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35522: LD_ADDR_VAR 0 9
35526: PUSH
35527: LD_VAR 0 29
35531: PUSH
35532: LD_VAR 0 30
35536: PUSH
35537: LD_VAR 0 31
35541: PUSH
35542: LD_VAR 0 32
35546: PUSH
35547: LD_VAR 0 33
35551: PUSH
35552: LD_VAR 0 34
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: PUSH
35565: LD_VAR 0 4
35569: PUSH
35570: LD_INT 1
35572: PLUS
35573: ARRAY
35574: ST_TO_ADDR
35575: GO 36060
35577: LD_INT 16
35579: DOUBLE
35580: EQUAL
35581: IFTRUE 35639
35583: LD_INT 17
35585: DOUBLE
35586: EQUAL
35587: IFTRUE 35639
35589: LD_INT 18
35591: DOUBLE
35592: EQUAL
35593: IFTRUE 35639
35595: LD_INT 19
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35639
35601: LD_INT 22
35603: DOUBLE
35604: EQUAL
35605: IFTRUE 35639
35607: LD_INT 20
35609: DOUBLE
35610: EQUAL
35611: IFTRUE 35639
35613: LD_INT 21
35615: DOUBLE
35616: EQUAL
35617: IFTRUE 35639
35619: LD_INT 23
35621: DOUBLE
35622: EQUAL
35623: IFTRUE 35639
35625: LD_INT 24
35627: DOUBLE
35628: EQUAL
35629: IFTRUE 35639
35631: LD_INT 25
35633: DOUBLE
35634: EQUAL
35635: IFTRUE 35639
35637: GO 35695
35639: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35640: LD_ADDR_VAR 0 9
35644: PUSH
35645: LD_VAR 0 35
35649: PUSH
35650: LD_VAR 0 36
35654: PUSH
35655: LD_VAR 0 37
35659: PUSH
35660: LD_VAR 0 38
35664: PUSH
35665: LD_VAR 0 39
35669: PUSH
35670: LD_VAR 0 40
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: PUSH
35683: LD_VAR 0 4
35687: PUSH
35688: LD_INT 1
35690: PLUS
35691: ARRAY
35692: ST_TO_ADDR
35693: GO 36060
35695: LD_INT 6
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35751
35701: LD_INT 7
35703: DOUBLE
35704: EQUAL
35705: IFTRUE 35751
35707: LD_INT 8
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35751
35713: LD_INT 13
35715: DOUBLE
35716: EQUAL
35717: IFTRUE 35751
35719: LD_INT 12
35721: DOUBLE
35722: EQUAL
35723: IFTRUE 35751
35725: LD_INT 15
35727: DOUBLE
35728: EQUAL
35729: IFTRUE 35751
35731: LD_INT 11
35733: DOUBLE
35734: EQUAL
35735: IFTRUE 35751
35737: LD_INT 14
35739: DOUBLE
35740: EQUAL
35741: IFTRUE 35751
35743: LD_INT 10
35745: DOUBLE
35746: EQUAL
35747: IFTRUE 35751
35749: GO 35807
35751: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35752: LD_ADDR_VAR 0 9
35756: PUSH
35757: LD_VAR 0 41
35761: PUSH
35762: LD_VAR 0 42
35766: PUSH
35767: LD_VAR 0 43
35771: PUSH
35772: LD_VAR 0 44
35776: PUSH
35777: LD_VAR 0 45
35781: PUSH
35782: LD_VAR 0 46
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: PUSH
35795: LD_VAR 0 4
35799: PUSH
35800: LD_INT 1
35802: PLUS
35803: ARRAY
35804: ST_TO_ADDR
35805: GO 36060
35807: LD_INT 36
35809: DOUBLE
35810: EQUAL
35811: IFTRUE 35815
35813: GO 35871
35815: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35816: LD_ADDR_VAR 0 9
35820: PUSH
35821: LD_VAR 0 47
35825: PUSH
35826: LD_VAR 0 48
35830: PUSH
35831: LD_VAR 0 49
35835: PUSH
35836: LD_VAR 0 50
35840: PUSH
35841: LD_VAR 0 51
35845: PUSH
35846: LD_VAR 0 52
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: LD_VAR 0 4
35863: PUSH
35864: LD_INT 1
35866: PLUS
35867: ARRAY
35868: ST_TO_ADDR
35869: GO 36060
35871: LD_INT 4
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35897
35877: LD_INT 5
35879: DOUBLE
35880: EQUAL
35881: IFTRUE 35897
35883: LD_INT 34
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35897
35889: LD_INT 37
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35897
35895: GO 35953
35897: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35898: LD_ADDR_VAR 0 9
35902: PUSH
35903: LD_VAR 0 53
35907: PUSH
35908: LD_VAR 0 54
35912: PUSH
35913: LD_VAR 0 55
35917: PUSH
35918: LD_VAR 0 56
35922: PUSH
35923: LD_VAR 0 57
35927: PUSH
35928: LD_VAR 0 58
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: PUSH
35941: LD_VAR 0 4
35945: PUSH
35946: LD_INT 1
35948: PLUS
35949: ARRAY
35950: ST_TO_ADDR
35951: GO 36060
35953: LD_INT 31
35955: DOUBLE
35956: EQUAL
35957: IFTRUE 36003
35959: LD_INT 32
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 36003
35965: LD_INT 33
35967: DOUBLE
35968: EQUAL
35969: IFTRUE 36003
35971: LD_INT 27
35973: DOUBLE
35974: EQUAL
35975: IFTRUE 36003
35977: LD_INT 26
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 36003
35983: LD_INT 28
35985: DOUBLE
35986: EQUAL
35987: IFTRUE 36003
35989: LD_INT 29
35991: DOUBLE
35992: EQUAL
35993: IFTRUE 36003
35995: LD_INT 30
35997: DOUBLE
35998: EQUAL
35999: IFTRUE 36003
36001: GO 36059
36003: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36004: LD_ADDR_VAR 0 9
36008: PUSH
36009: LD_VAR 0 59
36013: PUSH
36014: LD_VAR 0 60
36018: PUSH
36019: LD_VAR 0 61
36023: PUSH
36024: LD_VAR 0 62
36028: PUSH
36029: LD_VAR 0 63
36033: PUSH
36034: LD_VAR 0 64
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: PUSH
36047: LD_VAR 0 4
36051: PUSH
36052: LD_INT 1
36054: PLUS
36055: ARRAY
36056: ST_TO_ADDR
36057: GO 36060
36059: POP
// temp_list2 = [ ] ;
36060: LD_ADDR_VAR 0 10
36064: PUSH
36065: EMPTY
36066: ST_TO_ADDR
// for i in temp_list do
36067: LD_ADDR_VAR 0 8
36071: PUSH
36072: LD_VAR 0 9
36076: PUSH
36077: FOR_IN
36078: IFFALSE 36130
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36080: LD_ADDR_VAR 0 10
36084: PUSH
36085: LD_VAR 0 10
36089: PUSH
36090: LD_VAR 0 8
36094: PUSH
36095: LD_INT 1
36097: ARRAY
36098: PUSH
36099: LD_VAR 0 2
36103: PLUS
36104: PUSH
36105: LD_VAR 0 8
36109: PUSH
36110: LD_INT 2
36112: ARRAY
36113: PUSH
36114: LD_VAR 0 3
36118: PLUS
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: EMPTY
36125: LIST
36126: ADD
36127: ST_TO_ADDR
36128: GO 36077
36130: POP
36131: POP
// result = temp_list2 ;
36132: LD_ADDR_VAR 0 7
36136: PUSH
36137: LD_VAR 0 10
36141: ST_TO_ADDR
// end ;
36142: LD_VAR 0 7
36146: RET
// export function EnemyInRange ( unit , dist ) ; begin
36147: LD_INT 0
36149: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36150: LD_ADDR_VAR 0 3
36154: PUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 255
36164: PPUSH
36165: LD_VAR 0 1
36169: PPUSH
36170: CALL_OW 250
36174: PPUSH
36175: LD_VAR 0 1
36179: PPUSH
36180: CALL_OW 251
36184: PPUSH
36185: LD_VAR 0 2
36189: PPUSH
36190: CALL 9404 0 4
36194: PUSH
36195: LD_INT 4
36197: ARRAY
36198: ST_TO_ADDR
// end ;
36199: LD_VAR 0 3
36203: RET
// export function PlayerSeeMe ( unit ) ; begin
36204: LD_INT 0
36206: PPUSH
// result := See ( your_side , unit ) ;
36207: LD_ADDR_VAR 0 2
36211: PUSH
36212: LD_OWVAR 2
36216: PPUSH
36217: LD_VAR 0 1
36221: PPUSH
36222: CALL_OW 292
36226: ST_TO_ADDR
// end ;
36227: LD_VAR 0 2
36231: RET
// export function ReverseDir ( unit ) ; begin
36232: LD_INT 0
36234: PPUSH
// if not unit then
36235: LD_VAR 0 1
36239: NOT
36240: IFFALSE 36244
// exit ;
36242: GO 36267
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36244: LD_ADDR_VAR 0 2
36248: PUSH
36249: LD_VAR 0 1
36253: PPUSH
36254: CALL_OW 254
36258: PUSH
36259: LD_INT 3
36261: PLUS
36262: PUSH
36263: LD_INT 6
36265: MOD
36266: ST_TO_ADDR
// end ;
36267: LD_VAR 0 2
36271: RET
// export function ReverseArray ( array ) ; var i ; begin
36272: LD_INT 0
36274: PPUSH
36275: PPUSH
// if not array then
36276: LD_VAR 0 1
36280: NOT
36281: IFFALSE 36285
// exit ;
36283: GO 36340
// result := [ ] ;
36285: LD_ADDR_VAR 0 2
36289: PUSH
36290: EMPTY
36291: ST_TO_ADDR
// for i := array downto 1 do
36292: LD_ADDR_VAR 0 3
36296: PUSH
36297: DOUBLE
36298: LD_VAR 0 1
36302: INC
36303: ST_TO_ADDR
36304: LD_INT 1
36306: PUSH
36307: FOR_DOWNTO
36308: IFFALSE 36338
// result := Join ( result , array [ i ] ) ;
36310: LD_ADDR_VAR 0 2
36314: PUSH
36315: LD_VAR 0 2
36319: PPUSH
36320: LD_VAR 0 1
36324: PUSH
36325: LD_VAR 0 3
36329: ARRAY
36330: PPUSH
36331: CALL 41182 0 2
36335: ST_TO_ADDR
36336: GO 36307
36338: POP
36339: POP
// end ;
36340: LD_VAR 0 2
36344: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36345: LD_INT 0
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
// if not unit or not hexes then
36353: LD_VAR 0 1
36357: NOT
36358: IFTRUE 36367
36360: PUSH
36361: LD_VAR 0 2
36365: NOT
36366: OR
36367: IFFALSE 36371
// exit ;
36369: GO 36494
// dist := 9999 ;
36371: LD_ADDR_VAR 0 5
36375: PUSH
36376: LD_INT 9999
36378: ST_TO_ADDR
// for i = 1 to hexes do
36379: LD_ADDR_VAR 0 4
36383: PUSH
36384: DOUBLE
36385: LD_INT 1
36387: DEC
36388: ST_TO_ADDR
36389: LD_VAR 0 2
36393: PUSH
36394: FOR_TO
36395: IFFALSE 36482
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36397: LD_ADDR_VAR 0 6
36401: PUSH
36402: LD_VAR 0 1
36406: PPUSH
36407: LD_VAR 0 2
36411: PUSH
36412: LD_VAR 0 4
36416: ARRAY
36417: PUSH
36418: LD_INT 1
36420: ARRAY
36421: PPUSH
36422: LD_VAR 0 2
36426: PUSH
36427: LD_VAR 0 4
36431: ARRAY
36432: PUSH
36433: LD_INT 2
36435: ARRAY
36436: PPUSH
36437: CALL_OW 297
36441: ST_TO_ADDR
// if tdist < dist then
36442: LD_VAR 0 6
36446: PUSH
36447: LD_VAR 0 5
36451: LESS
36452: IFFALSE 36480
// begin hex := hexes [ i ] ;
36454: LD_ADDR_VAR 0 8
36458: PUSH
36459: LD_VAR 0 2
36463: PUSH
36464: LD_VAR 0 4
36468: ARRAY
36469: ST_TO_ADDR
// dist := tdist ;
36470: LD_ADDR_VAR 0 5
36474: PUSH
36475: LD_VAR 0 6
36479: ST_TO_ADDR
// end ; end ;
36480: GO 36394
36482: POP
36483: POP
// result := hex ;
36484: LD_ADDR_VAR 0 3
36488: PUSH
36489: LD_VAR 0 8
36493: ST_TO_ADDR
// end ;
36494: LD_VAR 0 3
36498: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36499: LD_INT 0
36501: PPUSH
36502: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36503: LD_VAR 0 1
36507: NOT
36508: IFTRUE 36547
36510: PUSH
36511: LD_VAR 0 1
36515: PUSH
36516: LD_INT 21
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 23
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PPUSH
36540: CALL_OW 69
36544: IN
36545: NOT
36546: OR
36547: IFFALSE 36551
// exit ;
36549: GO 36598
// for i = 1 to 3 do
36551: LD_ADDR_VAR 0 3
36555: PUSH
36556: DOUBLE
36557: LD_INT 1
36559: DEC
36560: ST_TO_ADDR
36561: LD_INT 3
36563: PUSH
36564: FOR_TO
36565: IFFALSE 36596
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36567: LD_VAR 0 1
36571: PPUSH
36572: CALL_OW 250
36576: PPUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 251
36586: PPUSH
36587: LD_INT 1
36589: PPUSH
36590: CALL_OW 453
36594: GO 36564
36596: POP
36597: POP
// end ;
36598: LD_VAR 0 2
36602: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36603: LD_INT 0
36605: PPUSH
36606: PPUSH
36607: PPUSH
36608: PPUSH
36609: PPUSH
36610: PPUSH
// if not unit or not enemy_unit then
36611: LD_VAR 0 1
36615: NOT
36616: IFTRUE 36625
36618: PUSH
36619: LD_VAR 0 2
36623: NOT
36624: OR
36625: IFFALSE 36629
// exit ;
36627: GO 37100
// if GetLives ( i ) < 250 then
36629: LD_VAR 0 4
36633: PPUSH
36634: CALL_OW 256
36638: PUSH
36639: LD_INT 250
36641: LESS
36642: IFFALSE 36655
// begin ComAutodestruct ( i ) ;
36644: LD_VAR 0 4
36648: PPUSH
36649: CALL 36499 0 1
// exit ;
36653: GO 37100
// end ; x := GetX ( enemy_unit ) ;
36655: LD_ADDR_VAR 0 7
36659: PUSH
36660: LD_VAR 0 2
36664: PPUSH
36665: CALL_OW 250
36669: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36670: LD_ADDR_VAR 0 8
36674: PUSH
36675: LD_VAR 0 2
36679: PPUSH
36680: CALL_OW 251
36684: ST_TO_ADDR
// if not x or not y then
36685: LD_VAR 0 7
36689: NOT
36690: IFTRUE 36699
36692: PUSH
36693: LD_VAR 0 8
36697: NOT
36698: OR
36699: IFFALSE 36703
// exit ;
36701: GO 37100
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36703: LD_ADDR_VAR 0 6
36707: PUSH
36708: LD_VAR 0 7
36712: PPUSH
36713: LD_INT 0
36715: PPUSH
36716: LD_INT 4
36718: PPUSH
36719: CALL_OW 272
36723: PUSH
36724: LD_VAR 0 8
36728: PPUSH
36729: LD_INT 0
36731: PPUSH
36732: LD_INT 4
36734: PPUSH
36735: CALL_OW 273
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_VAR 0 7
36748: PPUSH
36749: LD_INT 1
36751: PPUSH
36752: LD_INT 4
36754: PPUSH
36755: CALL_OW 272
36759: PUSH
36760: LD_VAR 0 8
36764: PPUSH
36765: LD_INT 1
36767: PPUSH
36768: LD_INT 4
36770: PPUSH
36771: CALL_OW 273
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_VAR 0 7
36784: PPUSH
36785: LD_INT 2
36787: PPUSH
36788: LD_INT 4
36790: PPUSH
36791: CALL_OW 272
36795: PUSH
36796: LD_VAR 0 8
36800: PPUSH
36801: LD_INT 2
36803: PPUSH
36804: LD_INT 4
36806: PPUSH
36807: CALL_OW 273
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_VAR 0 7
36820: PPUSH
36821: LD_INT 3
36823: PPUSH
36824: LD_INT 4
36826: PPUSH
36827: CALL_OW 272
36831: PUSH
36832: LD_VAR 0 8
36836: PPUSH
36837: LD_INT 3
36839: PPUSH
36840: LD_INT 4
36842: PPUSH
36843: CALL_OW 273
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_VAR 0 7
36856: PPUSH
36857: LD_INT 4
36859: PPUSH
36860: LD_INT 4
36862: PPUSH
36863: CALL_OW 272
36867: PUSH
36868: LD_VAR 0 8
36872: PPUSH
36873: LD_INT 4
36875: PPUSH
36876: LD_INT 4
36878: PPUSH
36879: CALL_OW 273
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_VAR 0 7
36892: PPUSH
36893: LD_INT 5
36895: PPUSH
36896: LD_INT 4
36898: PPUSH
36899: CALL_OW 272
36903: PUSH
36904: LD_VAR 0 8
36908: PPUSH
36909: LD_INT 5
36911: PPUSH
36912: LD_INT 4
36914: PPUSH
36915: CALL_OW 273
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// for i = tmp downto 1 do
36932: LD_ADDR_VAR 0 4
36936: PUSH
36937: DOUBLE
36938: LD_VAR 0 6
36942: INC
36943: ST_TO_ADDR
36944: LD_INT 1
36946: PUSH
36947: FOR_DOWNTO
36948: IFFALSE 37051
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36950: LD_VAR 0 6
36954: PUSH
36955: LD_VAR 0 4
36959: ARRAY
36960: PUSH
36961: LD_INT 1
36963: ARRAY
36964: PPUSH
36965: LD_VAR 0 6
36969: PUSH
36970: LD_VAR 0 4
36974: ARRAY
36975: PUSH
36976: LD_INT 2
36978: ARRAY
36979: PPUSH
36980: CALL_OW 488
36984: NOT
36985: IFTRUE 37027
36987: PUSH
36988: LD_VAR 0 6
36992: PUSH
36993: LD_VAR 0 4
36997: ARRAY
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: LD_VAR 0 6
37007: PUSH
37008: LD_VAR 0 4
37012: ARRAY
37013: PUSH
37014: LD_INT 2
37016: ARRAY
37017: PPUSH
37018: CALL_OW 428
37022: PUSH
37023: LD_INT 0
37025: NONEQUAL
37026: OR
37027: IFFALSE 37049
// tmp := Delete ( tmp , i ) ;
37029: LD_ADDR_VAR 0 6
37033: PUSH
37034: LD_VAR 0 6
37038: PPUSH
37039: LD_VAR 0 4
37043: PPUSH
37044: CALL_OW 3
37048: ST_TO_ADDR
37049: GO 36947
37051: POP
37052: POP
// j := GetClosestHex ( unit , tmp ) ;
37053: LD_ADDR_VAR 0 5
37057: PUSH
37058: LD_VAR 0 1
37062: PPUSH
37063: LD_VAR 0 6
37067: PPUSH
37068: CALL 36345 0 2
37072: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37073: LD_VAR 0 1
37077: PPUSH
37078: LD_VAR 0 5
37082: PUSH
37083: LD_INT 1
37085: ARRAY
37086: PPUSH
37087: LD_VAR 0 5
37091: PUSH
37092: LD_INT 2
37094: ARRAY
37095: PPUSH
37096: CALL_OW 111
// end ;
37100: LD_VAR 0 3
37104: RET
// export function PrepareApemanSoldier ( ) ; begin
37105: LD_INT 0
37107: PPUSH
// uc_nation := 0 ;
37108: LD_ADDR_OWVAR 21
37112: PUSH
37113: LD_INT 0
37115: ST_TO_ADDR
// hc_sex := sex_male ;
37116: LD_ADDR_OWVAR 27
37120: PUSH
37121: LD_INT 1
37123: ST_TO_ADDR
// hc_name :=  ;
37124: LD_ADDR_OWVAR 26
37128: PUSH
37129: LD_STRING 
37131: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37132: LD_ADDR_OWVAR 28
37136: PUSH
37137: LD_INT 15
37139: ST_TO_ADDR
// hc_gallery :=  ;
37140: LD_ADDR_OWVAR 33
37144: PUSH
37145: LD_STRING 
37147: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37148: LD_ADDR_OWVAR 31
37152: PUSH
37153: LD_INT 0
37155: PPUSH
37156: LD_INT 3
37158: PPUSH
37159: CALL_OW 12
37163: PUSH
37164: LD_INT 0
37166: PPUSH
37167: LD_INT 3
37169: PPUSH
37170: CALL_OW 12
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: LD_INT 0
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37187: LD_ADDR_OWVAR 29
37191: PUSH
37192: LD_INT 12
37194: PUSH
37195: LD_INT 12
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: ST_TO_ADDR
// end ;
37202: LD_VAR 0 1
37206: RET
// export function PrepareApemanEngineer ( ) ; begin
37207: LD_INT 0
37209: PPUSH
// uc_nation := 0 ;
37210: LD_ADDR_OWVAR 21
37214: PUSH
37215: LD_INT 0
37217: ST_TO_ADDR
// hc_sex := sex_male ;
37218: LD_ADDR_OWVAR 27
37222: PUSH
37223: LD_INT 1
37225: ST_TO_ADDR
// hc_name :=  ;
37226: LD_ADDR_OWVAR 26
37230: PUSH
37231: LD_STRING 
37233: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37234: LD_ADDR_OWVAR 28
37238: PUSH
37239: LD_INT 16
37241: ST_TO_ADDR
// hc_gallery :=  ;
37242: LD_ADDR_OWVAR 33
37246: PUSH
37247: LD_STRING 
37249: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37250: LD_ADDR_OWVAR 31
37254: PUSH
37255: LD_INT 0
37257: PPUSH
37258: LD_INT 3
37260: PPUSH
37261: CALL_OW 12
37265: PUSH
37266: LD_INT 0
37268: PPUSH
37269: LD_INT 3
37271: PPUSH
37272: CALL_OW 12
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37289: LD_ADDR_OWVAR 29
37293: PUSH
37294: LD_INT 12
37296: PUSH
37297: LD_INT 12
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: ST_TO_ADDR
// end ;
37304: LD_VAR 0 1
37308: RET
// export function PrepareApeman ( agressivity ) ; begin
37309: LD_INT 0
37311: PPUSH
// uc_side := 0 ;
37312: LD_ADDR_OWVAR 20
37316: PUSH
37317: LD_INT 0
37319: ST_TO_ADDR
// uc_nation := 0 ;
37320: LD_ADDR_OWVAR 21
37324: PUSH
37325: LD_INT 0
37327: ST_TO_ADDR
// hc_sex := sex_male ;
37328: LD_ADDR_OWVAR 27
37332: PUSH
37333: LD_INT 1
37335: ST_TO_ADDR
// hc_class := class_apeman ;
37336: LD_ADDR_OWVAR 28
37340: PUSH
37341: LD_INT 12
37343: ST_TO_ADDR
// hc_gallery :=  ;
37344: LD_ADDR_OWVAR 33
37348: PUSH
37349: LD_STRING 
37351: ST_TO_ADDR
// hc_name :=  ;
37352: LD_ADDR_OWVAR 26
37356: PUSH
37357: LD_STRING 
37359: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37360: LD_ADDR_OWVAR 29
37364: PUSH
37365: LD_INT 12
37367: PUSH
37368: LD_INT 12
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: ST_TO_ADDR
// if agressivity = 0 then
37375: LD_VAR 0 1
37379: PUSH
37380: LD_INT 0
37382: EQUAL
37383: IFFALSE 37395
// hc_agressivity := 0 else
37385: LD_ADDR_OWVAR 35
37389: PUSH
37390: LD_INT 0
37392: ST_TO_ADDR
37393: GO 37416
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37395: LD_ADDR_OWVAR 35
37399: PUSH
37400: LD_VAR 0 1
37404: NEG
37405: PPUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 12
37415: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37416: LD_ADDR_OWVAR 31
37420: PUSH
37421: LD_INT 0
37423: PPUSH
37424: LD_INT 3
37426: PPUSH
37427: CALL_OW 12
37431: PUSH
37432: LD_INT 0
37434: PPUSH
37435: LD_INT 3
37437: PPUSH
37438: CALL_OW 12
37442: PUSH
37443: LD_INT 0
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: ST_TO_ADDR
// end ;
37455: LD_VAR 0 2
37459: RET
// export function PrepareTiger ( agressivity ) ; begin
37460: LD_INT 0
37462: PPUSH
// uc_side := 0 ;
37463: LD_ADDR_OWVAR 20
37467: PUSH
37468: LD_INT 0
37470: ST_TO_ADDR
// uc_nation := 0 ;
37471: LD_ADDR_OWVAR 21
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// InitHc ;
37479: CALL_OW 19
// hc_class := class_tiger ;
37483: LD_ADDR_OWVAR 28
37487: PUSH
37488: LD_INT 14
37490: ST_TO_ADDR
// hc_gallery :=  ;
37491: LD_ADDR_OWVAR 33
37495: PUSH
37496: LD_STRING 
37498: ST_TO_ADDR
// hc_name :=  ;
37499: LD_ADDR_OWVAR 26
37503: PUSH
37504: LD_STRING 
37506: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37507: LD_ADDR_OWVAR 35
37511: PUSH
37512: LD_VAR 0 1
37516: NEG
37517: PPUSH
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 12
37527: ST_TO_ADDR
// end ;
37528: LD_VAR 0 2
37532: RET
// export function PrepareEnchidna ( ) ; begin
37533: LD_INT 0
37535: PPUSH
// uc_side := 0 ;
37536: LD_ADDR_OWVAR 20
37540: PUSH
37541: LD_INT 0
37543: ST_TO_ADDR
// uc_nation := 0 ;
37544: LD_ADDR_OWVAR 21
37548: PUSH
37549: LD_INT 0
37551: ST_TO_ADDR
// InitHc ;
37552: CALL_OW 19
// hc_class := class_baggie ;
37556: LD_ADDR_OWVAR 28
37560: PUSH
37561: LD_INT 13
37563: ST_TO_ADDR
// hc_gallery :=  ;
37564: LD_ADDR_OWVAR 33
37568: PUSH
37569: LD_STRING 
37571: ST_TO_ADDR
// hc_name :=  ;
37572: LD_ADDR_OWVAR 26
37576: PUSH
37577: LD_STRING 
37579: ST_TO_ADDR
// end ;
37580: LD_VAR 0 1
37584: RET
// export function PrepareFrog ( ) ; begin
37585: LD_INT 0
37587: PPUSH
// uc_side := 0 ;
37588: LD_ADDR_OWVAR 20
37592: PUSH
37593: LD_INT 0
37595: ST_TO_ADDR
// uc_nation := 0 ;
37596: LD_ADDR_OWVAR 21
37600: PUSH
37601: LD_INT 0
37603: ST_TO_ADDR
// InitHc ;
37604: CALL_OW 19
// hc_class := class_frog ;
37608: LD_ADDR_OWVAR 28
37612: PUSH
37613: LD_INT 19
37615: ST_TO_ADDR
// hc_gallery :=  ;
37616: LD_ADDR_OWVAR 33
37620: PUSH
37621: LD_STRING 
37623: ST_TO_ADDR
// hc_name :=  ;
37624: LD_ADDR_OWVAR 26
37628: PUSH
37629: LD_STRING 
37631: ST_TO_ADDR
// end ;
37632: LD_VAR 0 1
37636: RET
// export function PrepareFish ( ) ; begin
37637: LD_INT 0
37639: PPUSH
// uc_side := 0 ;
37640: LD_ADDR_OWVAR 20
37644: PUSH
37645: LD_INT 0
37647: ST_TO_ADDR
// uc_nation := 0 ;
37648: LD_ADDR_OWVAR 21
37652: PUSH
37653: LD_INT 0
37655: ST_TO_ADDR
// InitHc ;
37656: CALL_OW 19
// hc_class := class_fish ;
37660: LD_ADDR_OWVAR 28
37664: PUSH
37665: LD_INT 20
37667: ST_TO_ADDR
// hc_gallery :=  ;
37668: LD_ADDR_OWVAR 33
37672: PUSH
37673: LD_STRING 
37675: ST_TO_ADDR
// hc_name :=  ;
37676: LD_ADDR_OWVAR 26
37680: PUSH
37681: LD_STRING 
37683: ST_TO_ADDR
// end ;
37684: LD_VAR 0 1
37688: RET
// export function PrepareBird ( ) ; begin
37689: LD_INT 0
37691: PPUSH
// uc_side := 0 ;
37692: LD_ADDR_OWVAR 20
37696: PUSH
37697: LD_INT 0
37699: ST_TO_ADDR
// uc_nation := 0 ;
37700: LD_ADDR_OWVAR 21
37704: PUSH
37705: LD_INT 0
37707: ST_TO_ADDR
// InitHc ;
37708: CALL_OW 19
// hc_class := class_phororhacos ;
37712: LD_ADDR_OWVAR 28
37716: PUSH
37717: LD_INT 18
37719: ST_TO_ADDR
// hc_gallery :=  ;
37720: LD_ADDR_OWVAR 33
37724: PUSH
37725: LD_STRING 
37727: ST_TO_ADDR
// hc_name :=  ;
37728: LD_ADDR_OWVAR 26
37732: PUSH
37733: LD_STRING 
37735: ST_TO_ADDR
// end ;
37736: LD_VAR 0 1
37740: RET
// export function PrepareHorse ( ) ; begin
37741: LD_INT 0
37743: PPUSH
// uc_side := 0 ;
37744: LD_ADDR_OWVAR 20
37748: PUSH
37749: LD_INT 0
37751: ST_TO_ADDR
// uc_nation := 0 ;
37752: LD_ADDR_OWVAR 21
37756: PUSH
37757: LD_INT 0
37759: ST_TO_ADDR
// InitHc ;
37760: CALL_OW 19
// hc_class := class_horse ;
37764: LD_ADDR_OWVAR 28
37768: PUSH
37769: LD_INT 21
37771: ST_TO_ADDR
// hc_gallery :=  ;
37772: LD_ADDR_OWVAR 33
37776: PUSH
37777: LD_STRING 
37779: ST_TO_ADDR
// hc_name :=  ;
37780: LD_ADDR_OWVAR 26
37784: PUSH
37785: LD_STRING 
37787: ST_TO_ADDR
// end ;
37788: LD_VAR 0 1
37792: RET
// export function PrepareMastodont ( ) ; begin
37793: LD_INT 0
37795: PPUSH
// uc_side := 0 ;
37796: LD_ADDR_OWVAR 20
37800: PUSH
37801: LD_INT 0
37803: ST_TO_ADDR
// uc_nation := 0 ;
37804: LD_ADDR_OWVAR 21
37808: PUSH
37809: LD_INT 0
37811: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37812: LD_ADDR_OWVAR 37
37816: PUSH
37817: LD_INT 31
37819: ST_TO_ADDR
// vc_control := control_rider ;
37820: LD_ADDR_OWVAR 38
37824: PUSH
37825: LD_INT 4
37827: ST_TO_ADDR
// end ;
37828: LD_VAR 0 1
37832: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37833: LD_INT 0
37835: PPUSH
37836: PPUSH
37837: PPUSH
// uc_side = 0 ;
37838: LD_ADDR_OWVAR 20
37842: PUSH
37843: LD_INT 0
37845: ST_TO_ADDR
// uc_nation = 0 ;
37846: LD_ADDR_OWVAR 21
37850: PUSH
37851: LD_INT 0
37853: ST_TO_ADDR
// InitHc_All ( ) ;
37854: CALL_OW 584
// InitVc ;
37858: CALL_OW 20
// if mastodonts then
37862: LD_VAR 0 6
37866: IFFALSE 37933
// for i = 1 to mastodonts do
37868: LD_ADDR_VAR 0 11
37872: PUSH
37873: DOUBLE
37874: LD_INT 1
37876: DEC
37877: ST_TO_ADDR
37878: LD_VAR 0 6
37882: PUSH
37883: FOR_TO
37884: IFFALSE 37931
// begin vc_chassis := 31 ;
37886: LD_ADDR_OWVAR 37
37890: PUSH
37891: LD_INT 31
37893: ST_TO_ADDR
// vc_control := control_rider ;
37894: LD_ADDR_OWVAR 38
37898: PUSH
37899: LD_INT 4
37901: ST_TO_ADDR
// animal := CreateVehicle ;
37902: LD_ADDR_VAR 0 12
37906: PUSH
37907: CALL_OW 45
37911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37912: LD_VAR 0 12
37916: PPUSH
37917: LD_VAR 0 8
37921: PPUSH
37922: LD_INT 0
37924: PPUSH
37925: CALL 40075 0 3
// end ;
37929: GO 37883
37931: POP
37932: POP
// if horses then
37933: LD_VAR 0 5
37937: IFFALSE 38004
// for i = 1 to horses do
37939: LD_ADDR_VAR 0 11
37943: PUSH
37944: DOUBLE
37945: LD_INT 1
37947: DEC
37948: ST_TO_ADDR
37949: LD_VAR 0 5
37953: PUSH
37954: FOR_TO
37955: IFFALSE 38002
// begin hc_class := 21 ;
37957: LD_ADDR_OWVAR 28
37961: PUSH
37962: LD_INT 21
37964: ST_TO_ADDR
// hc_gallery :=  ;
37965: LD_ADDR_OWVAR 33
37969: PUSH
37970: LD_STRING 
37972: ST_TO_ADDR
// animal := CreateHuman ;
37973: LD_ADDR_VAR 0 12
37977: PUSH
37978: CALL_OW 44
37982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37983: LD_VAR 0 12
37987: PPUSH
37988: LD_VAR 0 8
37992: PPUSH
37993: LD_INT 0
37995: PPUSH
37996: CALL 40075 0 3
// end ;
38000: GO 37954
38002: POP
38003: POP
// if birds then
38004: LD_VAR 0 1
38008: IFFALSE 38075
// for i = 1 to birds do
38010: LD_ADDR_VAR 0 11
38014: PUSH
38015: DOUBLE
38016: LD_INT 1
38018: DEC
38019: ST_TO_ADDR
38020: LD_VAR 0 1
38024: PUSH
38025: FOR_TO
38026: IFFALSE 38073
// begin hc_class := 18 ;
38028: LD_ADDR_OWVAR 28
38032: PUSH
38033: LD_INT 18
38035: ST_TO_ADDR
// hc_gallery =  ;
38036: LD_ADDR_OWVAR 33
38040: PUSH
38041: LD_STRING 
38043: ST_TO_ADDR
// animal := CreateHuman ;
38044: LD_ADDR_VAR 0 12
38048: PUSH
38049: CALL_OW 44
38053: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38054: LD_VAR 0 12
38058: PPUSH
38059: LD_VAR 0 8
38063: PPUSH
38064: LD_INT 0
38066: PPUSH
38067: CALL 40075 0 3
// end ;
38071: GO 38025
38073: POP
38074: POP
// if tigers then
38075: LD_VAR 0 2
38079: IFFALSE 38163
// for i = 1 to tigers do
38081: LD_ADDR_VAR 0 11
38085: PUSH
38086: DOUBLE
38087: LD_INT 1
38089: DEC
38090: ST_TO_ADDR
38091: LD_VAR 0 2
38095: PUSH
38096: FOR_TO
38097: IFFALSE 38161
// begin hc_class = class_tiger ;
38099: LD_ADDR_OWVAR 28
38103: PUSH
38104: LD_INT 14
38106: ST_TO_ADDR
// hc_gallery =  ;
38107: LD_ADDR_OWVAR 33
38111: PUSH
38112: LD_STRING 
38114: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38115: LD_ADDR_OWVAR 35
38119: PUSH
38120: LD_INT 7
38122: NEG
38123: PPUSH
38124: LD_INT 7
38126: PPUSH
38127: CALL_OW 12
38131: ST_TO_ADDR
// animal := CreateHuman ;
38132: LD_ADDR_VAR 0 12
38136: PUSH
38137: CALL_OW 44
38141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38142: LD_VAR 0 12
38146: PPUSH
38147: LD_VAR 0 8
38151: PPUSH
38152: LD_INT 0
38154: PPUSH
38155: CALL 40075 0 3
// end ;
38159: GO 38096
38161: POP
38162: POP
// if apemans then
38163: LD_VAR 0 3
38167: IFFALSE 38290
// for i = 1 to apemans do
38169: LD_ADDR_VAR 0 11
38173: PUSH
38174: DOUBLE
38175: LD_INT 1
38177: DEC
38178: ST_TO_ADDR
38179: LD_VAR 0 3
38183: PUSH
38184: FOR_TO
38185: IFFALSE 38288
// begin hc_class = class_apeman ;
38187: LD_ADDR_OWVAR 28
38191: PUSH
38192: LD_INT 12
38194: ST_TO_ADDR
// hc_gallery =  ;
38195: LD_ADDR_OWVAR 33
38199: PUSH
38200: LD_STRING 
38202: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38203: LD_ADDR_OWVAR 35
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PPUSH
38212: LD_INT 2
38214: PPUSH
38215: CALL_OW 12
38219: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38220: LD_ADDR_OWVAR 31
38224: PUSH
38225: LD_INT 1
38227: PPUSH
38228: LD_INT 3
38230: PPUSH
38231: CALL_OW 12
38235: PUSH
38236: LD_INT 1
38238: PPUSH
38239: LD_INT 3
38241: PPUSH
38242: CALL_OW 12
38246: PUSH
38247: LD_INT 0
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: ST_TO_ADDR
// animal := CreateHuman ;
38259: LD_ADDR_VAR 0 12
38263: PUSH
38264: CALL_OW 44
38268: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38269: LD_VAR 0 12
38273: PPUSH
38274: LD_VAR 0 8
38278: PPUSH
38279: LD_INT 0
38281: PPUSH
38282: CALL 40075 0 3
// end ;
38286: GO 38184
38288: POP
38289: POP
// if enchidnas then
38290: LD_VAR 0 4
38294: IFFALSE 38361
// for i = 1 to enchidnas do
38296: LD_ADDR_VAR 0 11
38300: PUSH
38301: DOUBLE
38302: LD_INT 1
38304: DEC
38305: ST_TO_ADDR
38306: LD_VAR 0 4
38310: PUSH
38311: FOR_TO
38312: IFFALSE 38359
// begin hc_class = 13 ;
38314: LD_ADDR_OWVAR 28
38318: PUSH
38319: LD_INT 13
38321: ST_TO_ADDR
// hc_gallery =  ;
38322: LD_ADDR_OWVAR 33
38326: PUSH
38327: LD_STRING 
38329: ST_TO_ADDR
// animal := CreateHuman ;
38330: LD_ADDR_VAR 0 12
38334: PUSH
38335: CALL_OW 44
38339: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38340: LD_VAR 0 12
38344: PPUSH
38345: LD_VAR 0 8
38349: PPUSH
38350: LD_INT 0
38352: PPUSH
38353: CALL 40075 0 3
// end ;
38357: GO 38311
38359: POP
38360: POP
// if fishes then
38361: LD_VAR 0 7
38365: IFFALSE 38432
// for i = 1 to fishes do
38367: LD_ADDR_VAR 0 11
38371: PUSH
38372: DOUBLE
38373: LD_INT 1
38375: DEC
38376: ST_TO_ADDR
38377: LD_VAR 0 7
38381: PUSH
38382: FOR_TO
38383: IFFALSE 38430
// begin hc_class = 20 ;
38385: LD_ADDR_OWVAR 28
38389: PUSH
38390: LD_INT 20
38392: ST_TO_ADDR
// hc_gallery =  ;
38393: LD_ADDR_OWVAR 33
38397: PUSH
38398: LD_STRING 
38400: ST_TO_ADDR
// animal := CreateHuman ;
38401: LD_ADDR_VAR 0 12
38405: PUSH
38406: CALL_OW 44
38410: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38411: LD_VAR 0 12
38415: PPUSH
38416: LD_VAR 0 9
38420: PPUSH
38421: LD_INT 0
38423: PPUSH
38424: CALL 40075 0 3
// end ;
38428: GO 38382
38430: POP
38431: POP
// end ;
38432: LD_VAR 0 10
38436: RET
// export function WantHeal ( sci , unit ) ; begin
38437: LD_INT 0
38439: PPUSH
// if GetTaskList ( sci ) > 0 then
38440: LD_VAR 0 1
38444: PPUSH
38445: CALL_OW 437
38449: PUSH
38450: LD_INT 0
38452: GREATER
38453: IFFALSE 38525
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38455: LD_VAR 0 1
38459: PPUSH
38460: CALL_OW 437
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: PUSH
38469: LD_INT 1
38471: ARRAY
38472: PUSH
38473: LD_STRING l
38475: EQUAL
38476: IFFALSE 38503
38478: PUSH
38479: LD_VAR 0 1
38483: PPUSH
38484: CALL_OW 437
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PUSH
38493: LD_INT 4
38495: ARRAY
38496: PUSH
38497: LD_VAR 0 2
38501: EQUAL
38502: AND
38503: IFFALSE 38515
// result := true else
38505: LD_ADDR_VAR 0 3
38509: PUSH
38510: LD_INT 1
38512: ST_TO_ADDR
38513: GO 38523
// result := false ;
38515: LD_ADDR_VAR 0 3
38519: PUSH
38520: LD_INT 0
38522: ST_TO_ADDR
// end else
38523: GO 38533
// result := false ;
38525: LD_ADDR_VAR 0 3
38529: PUSH
38530: LD_INT 0
38532: ST_TO_ADDR
// end ;
38533: LD_VAR 0 3
38537: RET
// export function HealTarget ( sci ) ; begin
38538: LD_INT 0
38540: PPUSH
// if not sci then
38541: LD_VAR 0 1
38545: NOT
38546: IFFALSE 38550
// exit ;
38548: GO 38615
// result := 0 ;
38550: LD_ADDR_VAR 0 2
38554: PUSH
38555: LD_INT 0
38557: ST_TO_ADDR
// if GetTaskList ( sci ) then
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 437
38567: IFFALSE 38615
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38569: LD_VAR 0 1
38573: PPUSH
38574: CALL_OW 437
38578: PUSH
38579: LD_INT 1
38581: ARRAY
38582: PUSH
38583: LD_INT 1
38585: ARRAY
38586: PUSH
38587: LD_STRING l
38589: EQUAL
38590: IFFALSE 38615
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38592: LD_ADDR_VAR 0 2
38596: PUSH
38597: LD_VAR 0 1
38601: PPUSH
38602: CALL_OW 437
38606: PUSH
38607: LD_INT 1
38609: ARRAY
38610: PUSH
38611: LD_INT 4
38613: ARRAY
38614: ST_TO_ADDR
// end ;
38615: LD_VAR 0 2
38619: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38620: LD_INT 0
38622: PPUSH
38623: PPUSH
38624: PPUSH
38625: PPUSH
// if not base_units then
38626: LD_VAR 0 1
38630: NOT
38631: IFFALSE 38635
// exit ;
38633: GO 38722
// result := false ;
38635: LD_ADDR_VAR 0 2
38639: PUSH
38640: LD_INT 0
38642: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38643: LD_ADDR_VAR 0 5
38647: PUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: LD_INT 21
38655: PUSH
38656: LD_INT 3
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PPUSH
38663: CALL_OW 72
38667: ST_TO_ADDR
// if not tmp then
38668: LD_VAR 0 5
38672: NOT
38673: IFFALSE 38677
// exit ;
38675: GO 38722
// for i in tmp do
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_VAR 0 5
38686: PUSH
38687: FOR_IN
38688: IFFALSE 38720
// begin result := EnemyInRange ( i , 22 ) ;
38690: LD_ADDR_VAR 0 2
38694: PUSH
38695: LD_VAR 0 3
38699: PPUSH
38700: LD_INT 22
38702: PPUSH
38703: CALL 36147 0 2
38707: ST_TO_ADDR
// if result then
38708: LD_VAR 0 2
38712: IFFALSE 38718
// exit ;
38714: POP
38715: POP
38716: GO 38722
// end ;
38718: GO 38687
38720: POP
38721: POP
// end ;
38722: LD_VAR 0 2
38726: RET
// export function FilterByTag ( units , tag ) ; begin
38727: LD_INT 0
38729: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38730: LD_ADDR_VAR 0 3
38734: PUSH
38735: LD_VAR 0 1
38739: PPUSH
38740: LD_INT 120
38742: PUSH
38743: LD_VAR 0 2
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PPUSH
38752: CALL_OW 72
38756: ST_TO_ADDR
// end ;
38757: LD_VAR 0 3
38761: RET
// export function IsDriver ( un ) ; begin
38762: LD_INT 0
38764: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38765: LD_ADDR_VAR 0 2
38769: PUSH
38770: LD_VAR 0 1
38774: PUSH
38775: LD_INT 55
38777: PUSH
38778: EMPTY
38779: LIST
38780: PPUSH
38781: CALL_OW 69
38785: IN
38786: ST_TO_ADDR
// end ;
38787: LD_VAR 0 2
38791: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38792: LD_INT 0
38794: PPUSH
38795: PPUSH
// list := [ ] ;
38796: LD_ADDR_VAR 0 5
38800: PUSH
38801: EMPTY
38802: ST_TO_ADDR
// case d of 0 :
38803: LD_VAR 0 3
38807: PUSH
38808: LD_INT 0
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38816
38814: GO 38949
38816: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38817: LD_ADDR_VAR 0 5
38821: PUSH
38822: LD_VAR 0 1
38826: PUSH
38827: LD_INT 4
38829: MINUS
38830: PUSH
38831: LD_VAR 0 2
38835: PUSH
38836: LD_INT 4
38838: MINUS
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: LIST
38847: PUSH
38848: LD_VAR 0 1
38852: PUSH
38853: LD_INT 3
38855: MINUS
38856: PUSH
38857: LD_VAR 0 2
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: PUSH
38870: LD_VAR 0 1
38874: PUSH
38875: LD_INT 4
38877: PLUS
38878: PUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_INT 4
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: LD_VAR 0 1
38896: PUSH
38897: LD_INT 3
38899: PLUS
38900: PUSH
38901: LD_VAR 0 2
38905: PUSH
38906: LD_INT 3
38908: PLUS
38909: PUSH
38910: LD_INT 5
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: PUSH
38918: LD_VAR 0 1
38922: PUSH
38923: LD_VAR 0 2
38927: PUSH
38928: LD_INT 4
38930: PLUS
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: LIST
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: ST_TO_ADDR
// end ; 1 :
38947: GO 39647
38949: LD_INT 1
38951: DOUBLE
38952: EQUAL
38953: IFTRUE 38957
38955: GO 39090
38957: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38958: LD_ADDR_VAR 0 5
38962: PUSH
38963: LD_VAR 0 1
38967: PUSH
38968: LD_VAR 0 2
38972: PUSH
38973: LD_INT 4
38975: MINUS
38976: PUSH
38977: LD_INT 3
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: LIST
38984: PUSH
38985: LD_VAR 0 1
38989: PUSH
38990: LD_INT 3
38992: MINUS
38993: PUSH
38994: LD_VAR 0 2
38998: PUSH
38999: LD_INT 3
39001: MINUS
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: LD_VAR 0 1
39015: PUSH
39016: LD_INT 4
39018: MINUS
39019: PUSH
39020: LD_VAR 0 2
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: PUSH
39033: LD_VAR 0 1
39037: PUSH
39038: LD_VAR 0 2
39042: PUSH
39043: LD_INT 3
39045: PLUS
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: PUSH
39055: LD_VAR 0 1
39059: PUSH
39060: LD_INT 4
39062: PLUS
39063: PUSH
39064: LD_VAR 0 2
39068: PUSH
39069: LD_INT 4
39071: PLUS
39072: PUSH
39073: LD_INT 5
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: ST_TO_ADDR
// end ; 2 :
39088: GO 39647
39090: LD_INT 2
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39098
39096: GO 39227
39098: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39099: LD_ADDR_VAR 0 5
39103: PUSH
39104: LD_VAR 0 1
39108: PUSH
39109: LD_VAR 0 2
39113: PUSH
39114: LD_INT 3
39116: MINUS
39117: PUSH
39118: LD_INT 3
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: PUSH
39126: LD_VAR 0 1
39130: PUSH
39131: LD_INT 4
39133: PLUS
39134: PUSH
39135: LD_VAR 0 2
39139: PUSH
39140: LD_INT 4
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: PUSH
39148: LD_VAR 0 1
39152: PUSH
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 4
39160: PLUS
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: PUSH
39170: LD_VAR 0 1
39174: PUSH
39175: LD_INT 3
39177: MINUS
39178: PUSH
39179: LD_VAR 0 2
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: PUSH
39192: LD_VAR 0 1
39196: PUSH
39197: LD_INT 4
39199: MINUS
39200: PUSH
39201: LD_VAR 0 2
39205: PUSH
39206: LD_INT 4
39208: MINUS
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: LIST
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
// end ; 3 :
39225: GO 39647
39227: LD_INT 3
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39368
39235: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39236: LD_ADDR_VAR 0 5
39240: PUSH
39241: LD_VAR 0 1
39245: PUSH
39246: LD_INT 3
39248: PLUS
39249: PUSH
39250: LD_VAR 0 2
39254: PUSH
39255: LD_INT 4
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: PUSH
39263: LD_VAR 0 1
39267: PUSH
39268: LD_INT 4
39270: PLUS
39271: PUSH
39272: LD_VAR 0 2
39276: PUSH
39277: LD_INT 4
39279: PLUS
39280: PUSH
39281: LD_INT 5
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: PUSH
39289: LD_VAR 0 1
39293: PUSH
39294: LD_INT 4
39296: MINUS
39297: PUSH
39298: LD_VAR 0 2
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: LIST
39310: PUSH
39311: LD_VAR 0 1
39315: PUSH
39316: LD_VAR 0 2
39320: PUSH
39321: LD_INT 4
39323: MINUS
39324: PUSH
39325: LD_INT 3
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: PUSH
39333: LD_VAR 0 1
39337: PUSH
39338: LD_INT 3
39340: MINUS
39341: PUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 3
39349: MINUS
39350: PUSH
39351: LD_INT 2
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// end ; 4 :
39366: GO 39647
39368: LD_INT 4
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39509
39376: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39377: LD_ADDR_VAR 0 5
39381: PUSH
39382: LD_VAR 0 1
39386: PUSH
39387: LD_VAR 0 2
39391: PUSH
39392: LD_INT 4
39394: PLUS
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: PUSH
39404: LD_VAR 0 1
39408: PUSH
39409: LD_INT 3
39411: PLUS
39412: PUSH
39413: LD_VAR 0 2
39417: PUSH
39418: LD_INT 3
39420: PLUS
39421: PUSH
39422: LD_INT 5
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: LIST
39429: PUSH
39430: LD_VAR 0 1
39434: PUSH
39435: LD_INT 4
39437: PLUS
39438: PUSH
39439: LD_VAR 0 2
39443: PUSH
39444: LD_INT 4
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: LIST
39451: PUSH
39452: LD_VAR 0 1
39456: PUSH
39457: LD_VAR 0 2
39461: PUSH
39462: LD_INT 3
39464: MINUS
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: LIST
39473: PUSH
39474: LD_VAR 0 1
39478: PUSH
39479: LD_INT 4
39481: MINUS
39482: PUSH
39483: LD_VAR 0 2
39487: PUSH
39488: LD_INT 4
39490: MINUS
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// end ; 5 :
39507: GO 39647
39509: LD_INT 5
39511: DOUBLE
39512: EQUAL
39513: IFTRUE 39517
39515: GO 39646
39517: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39518: LD_ADDR_VAR 0 5
39522: PUSH
39523: LD_VAR 0 1
39527: PUSH
39528: LD_INT 4
39530: MINUS
39531: PUSH
39532: LD_VAR 0 2
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: LIST
39544: PUSH
39545: LD_VAR 0 1
39549: PUSH
39550: LD_VAR 0 2
39554: PUSH
39555: LD_INT 4
39557: MINUS
39558: PUSH
39559: LD_INT 3
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: LIST
39566: PUSH
39567: LD_VAR 0 1
39571: PUSH
39572: LD_INT 4
39574: PLUS
39575: PUSH
39576: LD_VAR 0 2
39580: PUSH
39581: LD_INT 4
39583: PLUS
39584: PUSH
39585: LD_INT 5
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: LIST
39592: PUSH
39593: LD_VAR 0 1
39597: PUSH
39598: LD_INT 3
39600: PLUS
39601: PUSH
39602: LD_VAR 0 2
39606: PUSH
39607: LD_INT 4
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: LIST
39614: PUSH
39615: LD_VAR 0 1
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: LD_INT 3
39627: PLUS
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: LIST
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: ST_TO_ADDR
// end ; end ;
39644: GO 39647
39646: POP
// result := list ;
39647: LD_ADDR_VAR 0 4
39651: PUSH
39652: LD_VAR 0 5
39656: ST_TO_ADDR
// end ;
39657: LD_VAR 0 4
39661: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39662: LD_INT 0
39664: PPUSH
39665: PPUSH
39666: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39667: LD_VAR 0 1
39671: NOT
39672: IFTRUE 39700
39674: PUSH
39675: LD_VAR 0 2
39679: PUSH
39680: LD_INT 1
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: LD_INT 4
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: IN
39698: NOT
39699: OR
39700: IFFALSE 39704
// exit ;
39702: GO 39787
// tmp := [ ] ;
39704: LD_ADDR_VAR 0 5
39708: PUSH
39709: EMPTY
39710: ST_TO_ADDR
// for i in units do
39711: LD_ADDR_VAR 0 4
39715: PUSH
39716: LD_VAR 0 1
39720: PUSH
39721: FOR_IN
39722: IFFALSE 39756
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39724: LD_ADDR_VAR 0 5
39728: PUSH
39729: LD_VAR 0 5
39733: PPUSH
39734: LD_VAR 0 4
39738: PPUSH
39739: LD_VAR 0 2
39743: PPUSH
39744: CALL_OW 259
39748: PPUSH
39749: CALL 41182 0 2
39753: ST_TO_ADDR
39754: GO 39721
39756: POP
39757: POP
// if not tmp then
39758: LD_VAR 0 5
39762: NOT
39763: IFFALSE 39767
// exit ;
39765: GO 39787
// result := SortListByListDesc ( units , tmp ) ;
39767: LD_ADDR_VAR 0 3
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: LD_VAR 0 5
39781: PPUSH
39782: CALL_OW 77
39786: ST_TO_ADDR
// end ;
39787: LD_VAR 0 3
39791: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39792: LD_INT 0
39794: PPUSH
39795: PPUSH
39796: PPUSH
// result := false ;
39797: LD_ADDR_VAR 0 3
39801: PUSH
39802: LD_INT 0
39804: ST_TO_ADDR
// if not building then
39805: LD_VAR 0 2
39809: NOT
39810: IFFALSE 39814
// exit ;
39812: GO 39958
// x := GetX ( building ) ;
39814: LD_ADDR_VAR 0 4
39818: PUSH
39819: LD_VAR 0 2
39823: PPUSH
39824: CALL_OW 250
39828: ST_TO_ADDR
// y := GetY ( building ) ;
39829: LD_ADDR_VAR 0 5
39833: PUSH
39834: LD_VAR 0 2
39838: PPUSH
39839: CALL_OW 251
39843: ST_TO_ADDR
// if not x or not y then
39844: LD_VAR 0 4
39848: NOT
39849: IFTRUE 39858
39851: PUSH
39852: LD_VAR 0 5
39856: NOT
39857: OR
39858: IFFALSE 39862
// exit ;
39860: GO 39958
// if GetTaskList ( unit ) then
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 437
39871: IFFALSE 39958
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39873: LD_STRING e
39875: PUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 437
39885: PUSH
39886: LD_INT 1
39888: ARRAY
39889: PUSH
39890: LD_INT 1
39892: ARRAY
39893: EQUAL
39894: IFFALSE 39921
39896: PUSH
39897: LD_VAR 0 4
39901: PUSH
39902: LD_VAR 0 1
39906: PPUSH
39907: CALL_OW 437
39911: PUSH
39912: LD_INT 1
39914: ARRAY
39915: PUSH
39916: LD_INT 2
39918: ARRAY
39919: EQUAL
39920: AND
39921: IFFALSE 39948
39923: PUSH
39924: LD_VAR 0 5
39928: PUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 437
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PUSH
39943: LD_INT 3
39945: ARRAY
39946: EQUAL
39947: AND
39948: IFFALSE 39958
// result := true end ;
39950: LD_ADDR_VAR 0 3
39954: PUSH
39955: LD_INT 1
39957: ST_TO_ADDR
// end ;
39958: LD_VAR 0 3
39962: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39963: LD_INT 0
39965: PPUSH
// result := false ;
39966: LD_ADDR_VAR 0 4
39970: PUSH
39971: LD_INT 0
39973: ST_TO_ADDR
// if GetTaskList ( unit ) then
39974: LD_VAR 0 1
39978: PPUSH
39979: CALL_OW 437
39983: IFFALSE 40070
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39985: LD_STRING M
39987: PUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 437
39997: PUSH
39998: LD_INT 1
40000: ARRAY
40001: PUSH
40002: LD_INT 1
40004: ARRAY
40005: EQUAL
40006: IFFALSE 40033
40008: PUSH
40009: LD_VAR 0 2
40013: PUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 437
40023: PUSH
40024: LD_INT 1
40026: ARRAY
40027: PUSH
40028: LD_INT 2
40030: ARRAY
40031: EQUAL
40032: AND
40033: IFFALSE 40060
40035: PUSH
40036: LD_VAR 0 3
40040: PUSH
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 437
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: PUSH
40055: LD_INT 3
40057: ARRAY
40058: EQUAL
40059: AND
40060: IFFALSE 40070
// result := true ;
40062: LD_ADDR_VAR 0 4
40066: PUSH
40067: LD_INT 1
40069: ST_TO_ADDR
// end ; end ;
40070: LD_VAR 0 4
40074: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40075: LD_INT 0
40077: PPUSH
40078: PPUSH
40079: PPUSH
40080: PPUSH
// if not unit or not area then
40081: LD_VAR 0 1
40085: NOT
40086: IFTRUE 40095
40088: PUSH
40089: LD_VAR 0 2
40093: NOT
40094: OR
40095: IFFALSE 40099
// exit ;
40097: GO 40275
// tmp := AreaToList ( area , i ) ;
40099: LD_ADDR_VAR 0 6
40103: PUSH
40104: LD_VAR 0 2
40108: PPUSH
40109: LD_VAR 0 5
40113: PPUSH
40114: CALL_OW 517
40118: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40119: LD_ADDR_VAR 0 5
40123: PUSH
40124: DOUBLE
40125: LD_INT 1
40127: DEC
40128: ST_TO_ADDR
40129: LD_VAR 0 6
40133: PUSH
40134: LD_INT 1
40136: ARRAY
40137: PUSH
40138: FOR_TO
40139: IFFALSE 40273
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40141: LD_ADDR_VAR 0 7
40145: PUSH
40146: LD_VAR 0 6
40150: PUSH
40151: LD_INT 1
40153: ARRAY
40154: PUSH
40155: LD_VAR 0 5
40159: ARRAY
40160: PUSH
40161: LD_VAR 0 6
40165: PUSH
40166: LD_INT 2
40168: ARRAY
40169: PUSH
40170: LD_VAR 0 5
40174: ARRAY
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40180: LD_INT 92
40182: PUSH
40183: LD_VAR 0 7
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: PUSH
40192: LD_VAR 0 7
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: PUSH
40201: LD_INT 2
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: PPUSH
40210: CALL_OW 69
40214: PUSH
40215: LD_INT 0
40217: EQUAL
40218: IFFALSE 40271
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40220: LD_VAR 0 1
40224: PPUSH
40225: LD_VAR 0 7
40229: PUSH
40230: LD_INT 1
40232: ARRAY
40233: PPUSH
40234: LD_VAR 0 7
40238: PUSH
40239: LD_INT 2
40241: ARRAY
40242: PPUSH
40243: LD_VAR 0 3
40247: PPUSH
40248: CALL_OW 48
// result := IsPlaced ( unit ) ;
40252: LD_ADDR_VAR 0 4
40256: PUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: CALL_OW 305
40266: ST_TO_ADDR
// exit ;
40267: POP
40268: POP
40269: GO 40275
// end ; end ;
40271: GO 40138
40273: POP
40274: POP
// end ;
40275: LD_VAR 0 4
40279: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40280: LD_INT 0
40282: PPUSH
40283: PPUSH
40284: PPUSH
// if not side or side > 8 then
40285: LD_VAR 0 1
40289: NOT
40290: IFTRUE 40302
40292: PUSH
40293: LD_VAR 0 1
40297: PUSH
40298: LD_INT 8
40300: GREATER
40301: OR
40302: IFFALSE 40306
// exit ;
40304: GO 40493
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40306: LD_ADDR_VAR 0 4
40310: PUSH
40311: LD_INT 22
40313: PUSH
40314: LD_VAR 0 1
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 21
40325: PUSH
40326: LD_INT 3
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PPUSH
40337: CALL_OW 69
40341: ST_TO_ADDR
// if not tmp then
40342: LD_VAR 0 4
40346: NOT
40347: IFFALSE 40351
// exit ;
40349: GO 40493
// enable_addtolog := true ;
40351: LD_ADDR_OWVAR 81
40355: PUSH
40356: LD_INT 1
40358: ST_TO_ADDR
// AddToLog ( [ ) ;
40359: LD_STRING [
40361: PPUSH
40362: CALL_OW 561
// for i in tmp do
40366: LD_ADDR_VAR 0 3
40370: PUSH
40371: LD_VAR 0 4
40375: PUSH
40376: FOR_IN
40377: IFFALSE 40484
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40379: LD_STRING [
40381: PUSH
40382: LD_VAR 0 3
40386: PPUSH
40387: CALL_OW 266
40391: STR
40392: PUSH
40393: LD_STRING , 
40395: STR
40396: PUSH
40397: LD_VAR 0 3
40401: PPUSH
40402: CALL_OW 250
40406: STR
40407: PUSH
40408: LD_STRING , 
40410: STR
40411: PUSH
40412: LD_VAR 0 3
40416: PPUSH
40417: CALL_OW 251
40421: STR
40422: PUSH
40423: LD_STRING , 
40425: STR
40426: PUSH
40427: LD_VAR 0 3
40431: PPUSH
40432: CALL_OW 254
40436: STR
40437: PUSH
40438: LD_STRING , 
40440: STR
40441: PUSH
40442: LD_VAR 0 3
40446: PPUSH
40447: LD_INT 1
40449: PPUSH
40450: CALL_OW 268
40454: STR
40455: PUSH
40456: LD_STRING , 
40458: STR
40459: PUSH
40460: LD_VAR 0 3
40464: PPUSH
40465: LD_INT 2
40467: PPUSH
40468: CALL_OW 268
40472: STR
40473: PUSH
40474: LD_STRING ],
40476: STR
40477: PPUSH
40478: CALL_OW 561
// end ;
40482: GO 40376
40484: POP
40485: POP
// AddToLog ( ]; ) ;
40486: LD_STRING ];
40488: PPUSH
40489: CALL_OW 561
// end ;
40493: LD_VAR 0 2
40497: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40498: LD_INT 0
40500: PPUSH
40501: PPUSH
40502: PPUSH
40503: PPUSH
40504: PPUSH
// if not area or not rate or not max then
40505: LD_VAR 0 1
40509: NOT
40510: IFTRUE 40519
40512: PUSH
40513: LD_VAR 0 2
40517: NOT
40518: OR
40519: IFTRUE 40528
40521: PUSH
40522: LD_VAR 0 4
40526: NOT
40527: OR
40528: IFFALSE 40532
// exit ;
40530: GO 40721
// while 1 do
40532: LD_INT 1
40534: IFFALSE 40721
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40536: LD_ADDR_VAR 0 9
40540: PUSH
40541: LD_VAR 0 1
40545: PPUSH
40546: LD_INT 1
40548: PPUSH
40549: CALL_OW 287
40553: PUSH
40554: LD_INT 10
40556: MUL
40557: ST_TO_ADDR
// r := rate / 10 ;
40558: LD_ADDR_VAR 0 7
40562: PUSH
40563: LD_VAR 0 2
40567: PUSH
40568: LD_INT 10
40570: DIVREAL
40571: ST_TO_ADDR
// time := 1 1$00 ;
40572: LD_ADDR_VAR 0 8
40576: PUSH
40577: LD_INT 2100
40579: ST_TO_ADDR
// if amount < min then
40580: LD_VAR 0 9
40584: PUSH
40585: LD_VAR 0 3
40589: LESS
40590: IFFALSE 40608
// r := r * 2 else
40592: LD_ADDR_VAR 0 7
40596: PUSH
40597: LD_VAR 0 7
40601: PUSH
40602: LD_INT 2
40604: MUL
40605: ST_TO_ADDR
40606: GO 40634
// if amount > max then
40608: LD_VAR 0 9
40612: PUSH
40613: LD_VAR 0 4
40617: GREATER
40618: IFFALSE 40634
// r := r / 2 ;
40620: LD_ADDR_VAR 0 7
40624: PUSH
40625: LD_VAR 0 7
40629: PUSH
40630: LD_INT 2
40632: DIVREAL
40633: ST_TO_ADDR
// time := time / r ;
40634: LD_ADDR_VAR 0 8
40638: PUSH
40639: LD_VAR 0 8
40643: PUSH
40644: LD_VAR 0 7
40648: DIVREAL
40649: ST_TO_ADDR
// if time < 0 then
40650: LD_VAR 0 8
40654: PUSH
40655: LD_INT 0
40657: LESS
40658: IFFALSE 40675
// time := time * - 1 ;
40660: LD_ADDR_VAR 0 8
40664: PUSH
40665: LD_VAR 0 8
40669: PUSH
40670: LD_INT 1
40672: NEG
40673: MUL
40674: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40675: LD_VAR 0 8
40679: PUSH
40680: LD_INT 35
40682: PPUSH
40683: LD_INT 875
40685: PPUSH
40686: CALL_OW 12
40690: PLUS
40691: PPUSH
40692: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40696: LD_INT 1
40698: PPUSH
40699: LD_INT 5
40701: PPUSH
40702: CALL_OW 12
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: LD_INT 1
40714: PPUSH
40715: CALL_OW 55
// end ;
40719: GO 40532
// end ;
40721: LD_VAR 0 5
40725: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40726: LD_INT 0
40728: PPUSH
40729: PPUSH
40730: PPUSH
40731: PPUSH
40732: PPUSH
40733: PPUSH
40734: PPUSH
40735: PPUSH
// if not turrets or not factories then
40736: LD_VAR 0 1
40740: NOT
40741: IFTRUE 40750
40743: PUSH
40744: LD_VAR 0 2
40748: NOT
40749: OR
40750: IFFALSE 40754
// exit ;
40752: GO 41061
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40754: LD_ADDR_VAR 0 10
40758: PUSH
40759: LD_INT 5
40761: PUSH
40762: LD_INT 6
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 2
40771: PUSH
40772: LD_INT 4
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 3
40781: PUSH
40782: LD_INT 5
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 24
40796: PUSH
40797: LD_INT 25
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 23
40806: PUSH
40807: LD_INT 27
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 42
40820: PUSH
40821: LD_INT 43
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 44
40830: PUSH
40831: LD_INT 46
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 45
40840: PUSH
40841: LD_INT 47
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: ST_TO_ADDR
// result := [ ] ;
40858: LD_ADDR_VAR 0 3
40862: PUSH
40863: EMPTY
40864: ST_TO_ADDR
// for i in turrets do
40865: LD_ADDR_VAR 0 4
40869: PUSH
40870: LD_VAR 0 1
40874: PUSH
40875: FOR_IN
40876: IFFALSE 41059
// begin nat := GetNation ( i ) ;
40878: LD_ADDR_VAR 0 7
40882: PUSH
40883: LD_VAR 0 4
40887: PPUSH
40888: CALL_OW 248
40892: ST_TO_ADDR
// weapon := 0 ;
40893: LD_ADDR_VAR 0 8
40897: PUSH
40898: LD_INT 0
40900: ST_TO_ADDR
// if not nat then
40901: LD_VAR 0 7
40905: NOT
40906: IFFALSE 40910
// continue ;
40908: GO 40875
// for j in list [ nat ] do
40910: LD_ADDR_VAR 0 5
40914: PUSH
40915: LD_VAR 0 10
40919: PUSH
40920: LD_VAR 0 7
40924: ARRAY
40925: PUSH
40926: FOR_IN
40927: IFFALSE 40968
// if GetBWeapon ( i ) = j [ 1 ] then
40929: LD_VAR 0 4
40933: PPUSH
40934: CALL_OW 269
40938: PUSH
40939: LD_VAR 0 5
40943: PUSH
40944: LD_INT 1
40946: ARRAY
40947: EQUAL
40948: IFFALSE 40966
// begin weapon := j [ 2 ] ;
40950: LD_ADDR_VAR 0 8
40954: PUSH
40955: LD_VAR 0 5
40959: PUSH
40960: LD_INT 2
40962: ARRAY
40963: ST_TO_ADDR
// break ;
40964: GO 40968
// end ;
40966: GO 40926
40968: POP
40969: POP
// if not weapon then
40970: LD_VAR 0 8
40974: NOT
40975: IFFALSE 40979
// continue ;
40977: GO 40875
// for k in factories do
40979: LD_ADDR_VAR 0 6
40983: PUSH
40984: LD_VAR 0 2
40988: PUSH
40989: FOR_IN
40990: IFFALSE 41055
// begin weapons := AvailableWeaponList ( k ) ;
40992: LD_ADDR_VAR 0 9
40996: PUSH
40997: LD_VAR 0 6
41001: PPUSH
41002: CALL_OW 478
41006: ST_TO_ADDR
// if not weapons then
41007: LD_VAR 0 9
41011: NOT
41012: IFFALSE 41016
// continue ;
41014: GO 40989
// if weapon in weapons then
41016: LD_VAR 0 8
41020: PUSH
41021: LD_VAR 0 9
41025: IN
41026: IFFALSE 41053
// begin result := [ i , weapon ] ;
41028: LD_ADDR_VAR 0 3
41032: PUSH
41033: LD_VAR 0 4
41037: PUSH
41038: LD_VAR 0 8
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: ST_TO_ADDR
// exit ;
41047: POP
41048: POP
41049: POP
41050: POP
41051: GO 41061
// end ; end ;
41053: GO 40989
41055: POP
41056: POP
// end ;
41057: GO 40875
41059: POP
41060: POP
// end ;
41061: LD_VAR 0 3
41065: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41066: LD_INT 0
41068: PPUSH
// if not side or side > 8 then
41069: LD_VAR 0 3
41073: NOT
41074: IFTRUE 41086
41076: PUSH
41077: LD_VAR 0 3
41081: PUSH
41082: LD_INT 8
41084: GREATER
41085: OR
41086: IFFALSE 41090
// exit ;
41088: GO 41149
// if not range then
41090: LD_VAR 0 4
41094: NOT
41095: IFFALSE 41106
// range := - 12 ;
41097: LD_ADDR_VAR 0 4
41101: PUSH
41102: LD_INT 12
41104: NEG
41105: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41106: LD_VAR 0 1
41110: PPUSH
41111: LD_VAR 0 2
41115: PPUSH
41116: LD_VAR 0 3
41120: PPUSH
41121: LD_VAR 0 4
41125: PPUSH
41126: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41130: LD_VAR 0 1
41134: PPUSH
41135: LD_VAR 0 2
41139: PPUSH
41140: LD_VAR 0 3
41144: PPUSH
41145: CALL_OW 331
// end ;
41149: LD_VAR 0 5
41153: RET
// export function Video ( mode ) ; begin
41154: LD_INT 0
41156: PPUSH
// ingame_video = mode ;
41157: LD_ADDR_OWVAR 52
41161: PUSH
41162: LD_VAR 0 1
41166: ST_TO_ADDR
// interface_hidden = mode ;
41167: LD_ADDR_OWVAR 54
41171: PUSH
41172: LD_VAR 0 1
41176: ST_TO_ADDR
// end ;
41177: LD_VAR 0 2
41181: RET
// export function Join ( array , element ) ; begin
41182: LD_INT 0
41184: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 1
41199: PUSH
41200: LD_INT 1
41202: PLUS
41203: PPUSH
41204: LD_VAR 0 2
41208: PPUSH
41209: CALL_OW 1
41213: ST_TO_ADDR
// end ;
41214: LD_VAR 0 3
41218: RET
// export function JoinUnion ( array , element ) ; begin
41219: LD_INT 0
41221: PPUSH
// result := array union element ;
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_VAR 0 1
41231: PUSH
41232: LD_VAR 0 2
41236: UNION
41237: ST_TO_ADDR
// end ;
41238: LD_VAR 0 3
41242: RET
// export function GetBehemoths ( side ) ; begin
41243: LD_INT 0
41245: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_INT 22
41253: PUSH
41254: LD_VAR 0 1
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 31
41265: PUSH
41266: LD_INT 25
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PPUSH
41277: CALL_OW 69
41281: ST_TO_ADDR
// end ;
41282: LD_VAR 0 2
41286: RET
// export function Shuffle ( array ) ; var i , index ; begin
41287: LD_INT 0
41289: PPUSH
41290: PPUSH
41291: PPUSH
// result := [ ] ;
41292: LD_ADDR_VAR 0 2
41296: PUSH
41297: EMPTY
41298: ST_TO_ADDR
// if not array then
41299: LD_VAR 0 1
41303: NOT
41304: IFFALSE 41308
// exit ;
41306: GO 41407
// Randomize ;
41308: CALL_OW 10
// for i = array downto 1 do
41312: LD_ADDR_VAR 0 3
41316: PUSH
41317: DOUBLE
41318: LD_VAR 0 1
41322: INC
41323: ST_TO_ADDR
41324: LD_INT 1
41326: PUSH
41327: FOR_DOWNTO
41328: IFFALSE 41405
// begin index := rand ( 1 , array ) ;
41330: LD_ADDR_VAR 0 4
41334: PUSH
41335: LD_INT 1
41337: PPUSH
41338: LD_VAR 0 1
41342: PPUSH
41343: CALL_OW 12
41347: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41348: LD_ADDR_VAR 0 2
41352: PUSH
41353: LD_VAR 0 2
41357: PPUSH
41358: LD_VAR 0 2
41362: PUSH
41363: LD_INT 1
41365: PLUS
41366: PPUSH
41367: LD_VAR 0 1
41371: PUSH
41372: LD_VAR 0 4
41376: ARRAY
41377: PPUSH
41378: CALL_OW 2
41382: ST_TO_ADDR
// array := Delete ( array , index ) ;
41383: LD_ADDR_VAR 0 1
41387: PUSH
41388: LD_VAR 0 1
41392: PPUSH
41393: LD_VAR 0 4
41397: PPUSH
41398: CALL_OW 3
41402: ST_TO_ADDR
// end ;
41403: GO 41327
41405: POP
41406: POP
// end ;
41407: LD_VAR 0 2
41411: RET
// export function GetBaseMaterials ( base ) ; begin
41412: LD_INT 0
41414: PPUSH
// result := [ 0 , 0 , 0 ] ;
41415: LD_ADDR_VAR 0 2
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: ST_TO_ADDR
// if not base then
41434: LD_VAR 0 1
41438: NOT
41439: IFFALSE 41443
// exit ;
41441: GO 41492
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41443: LD_ADDR_VAR 0 2
41447: PUSH
41448: LD_VAR 0 1
41452: PPUSH
41453: LD_INT 1
41455: PPUSH
41456: CALL_OW 275
41460: PUSH
41461: LD_VAR 0 1
41465: PPUSH
41466: LD_INT 2
41468: PPUSH
41469: CALL_OW 275
41473: PUSH
41474: LD_VAR 0 1
41478: PPUSH
41479: LD_INT 3
41481: PPUSH
41482: CALL_OW 275
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: ST_TO_ADDR
// end ;
41492: LD_VAR 0 2
41496: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41497: LD_INT 0
41499: PPUSH
41500: PPUSH
// result := array ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 1
41510: ST_TO_ADDR
// if size >= result then
41511: LD_VAR 0 2
41515: PUSH
41516: LD_VAR 0 3
41520: GREATEREQUAL
41521: IFFALSE 41525
// exit ;
41523: GO 41575
// if size then
41525: LD_VAR 0 2
41529: IFFALSE 41575
// for i := array downto size do
41531: LD_ADDR_VAR 0 4
41535: PUSH
41536: DOUBLE
41537: LD_VAR 0 1
41541: INC
41542: ST_TO_ADDR
41543: LD_VAR 0 2
41547: PUSH
41548: FOR_DOWNTO
41549: IFFALSE 41573
// result := Delete ( result , result ) ;
41551: LD_ADDR_VAR 0 3
41555: PUSH
41556: LD_VAR 0 3
41560: PPUSH
41561: LD_VAR 0 3
41565: PPUSH
41566: CALL_OW 3
41570: ST_TO_ADDR
41571: GO 41548
41573: POP
41574: POP
// end ;
41575: LD_VAR 0 3
41579: RET
// export function ComExit ( unit ) ; var tmp ; begin
41580: LD_INT 0
41582: PPUSH
41583: PPUSH
// if not IsInUnit ( unit ) then
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 310
41593: NOT
41594: IFFALSE 41598
// exit ;
41596: GO 41658
// tmp := IsInUnit ( unit ) ;
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_VAR 0 1
41607: PPUSH
41608: CALL_OW 310
41612: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41613: LD_VAR 0 3
41617: PPUSH
41618: CALL_OW 247
41622: PUSH
41623: LD_INT 2
41625: EQUAL
41626: IFFALSE 41639
// ComExitVehicle ( unit ) else
41628: LD_VAR 0 1
41632: PPUSH
41633: CALL_OW 121
41637: GO 41648
// ComExitBuilding ( unit ) ;
41639: LD_VAR 0 1
41643: PPUSH
41644: CALL_OW 122
// result := tmp ;
41648: LD_ADDR_VAR 0 2
41652: PUSH
41653: LD_VAR 0 3
41657: ST_TO_ADDR
// end ;
41658: LD_VAR 0 2
41662: RET
// export function ComExitAll ( units ) ; var i ; begin
41663: LD_INT 0
41665: PPUSH
41666: PPUSH
// if not units then
41667: LD_VAR 0 1
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 41702
// for i in units do
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_VAR 0 1
41685: PUSH
41686: FOR_IN
41687: IFFALSE 41700
// ComExit ( i ) ;
41689: LD_VAR 0 3
41693: PPUSH
41694: CALL 41580 0 1
41698: GO 41686
41700: POP
41701: POP
// end ;
41702: LD_VAR 0 2
41706: RET
// export function ResetHc ; begin
41707: LD_INT 0
41709: PPUSH
// InitHc ;
41710: CALL_OW 19
// hc_importance := 0 ;
41714: LD_ADDR_OWVAR 32
41718: PUSH
41719: LD_INT 0
41721: ST_TO_ADDR
// end ;
41722: LD_VAR 0 1
41726: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41727: LD_INT 0
41729: PPUSH
41730: PPUSH
41731: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41732: LD_ADDR_VAR 0 6
41736: PUSH
41737: LD_VAR 0 1
41741: PUSH
41742: LD_VAR 0 3
41746: PLUS
41747: PUSH
41748: LD_INT 2
41750: DIV
41751: ST_TO_ADDR
// if _x < 0 then
41752: LD_VAR 0 6
41756: PUSH
41757: LD_INT 0
41759: LESS
41760: IFFALSE 41777
// _x := _x * - 1 ;
41762: LD_ADDR_VAR 0 6
41766: PUSH
41767: LD_VAR 0 6
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: MUL
41776: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41777: LD_ADDR_VAR 0 7
41781: PUSH
41782: LD_VAR 0 2
41786: PUSH
41787: LD_VAR 0 4
41791: PLUS
41792: PUSH
41793: LD_INT 2
41795: DIV
41796: ST_TO_ADDR
// if _y < 0 then
41797: LD_VAR 0 7
41801: PUSH
41802: LD_INT 0
41804: LESS
41805: IFFALSE 41822
// _y := _y * - 1 ;
41807: LD_ADDR_VAR 0 7
41811: PUSH
41812: LD_VAR 0 7
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: MUL
41821: ST_TO_ADDR
// result := [ _x , _y ] ;
41822: LD_ADDR_VAR 0 5
41826: PUSH
41827: LD_VAR 0 6
41831: PUSH
41832: LD_VAR 0 7
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: ST_TO_ADDR
// end ;
41841: LD_VAR 0 5
41845: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41846: LD_INT 0
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
// task := GetTaskList ( unit ) ;
41852: LD_ADDR_VAR 0 7
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 437
41866: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41867: LD_VAR 0 7
41871: NOT
41872: IFFALSE 41891
41874: PUSH
41875: LD_VAR 0 1
41879: PPUSH
41880: LD_VAR 0 2
41884: PPUSH
41885: CALL_OW 308
41889: NOT
41890: AND
41891: IFFALSE 41895
// exit ;
41893: GO 42013
// if IsInArea ( unit , area ) then
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_VAR 0 2
41904: PPUSH
41905: CALL_OW 308
41909: IFFALSE 41927
// begin ComMoveToArea ( unit , goAway ) ;
41911: LD_VAR 0 1
41915: PPUSH
41916: LD_VAR 0 3
41920: PPUSH
41921: CALL_OW 113
// exit ;
41925: GO 42013
// end ; if task [ 1 ] [ 1 ] <> M then
41927: LD_VAR 0 7
41931: PUSH
41932: LD_INT 1
41934: ARRAY
41935: PUSH
41936: LD_INT 1
41938: ARRAY
41939: PUSH
41940: LD_STRING M
41942: NONEQUAL
41943: IFFALSE 41947
// exit ;
41945: GO 42013
// x := task [ 1 ] [ 2 ] ;
41947: LD_ADDR_VAR 0 5
41951: PUSH
41952: LD_VAR 0 7
41956: PUSH
41957: LD_INT 1
41959: ARRAY
41960: PUSH
41961: LD_INT 2
41963: ARRAY
41964: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41965: LD_ADDR_VAR 0 6
41969: PUSH
41970: LD_VAR 0 7
41974: PUSH
41975: LD_INT 1
41977: ARRAY
41978: PUSH
41979: LD_INT 3
41981: ARRAY
41982: ST_TO_ADDR
// if InArea ( x , y , area ) then
41983: LD_VAR 0 5
41987: PPUSH
41988: LD_VAR 0 6
41992: PPUSH
41993: LD_VAR 0 2
41997: PPUSH
41998: CALL_OW 309
42002: IFFALSE 42013
// ComStop ( unit ) ;
42004: LD_VAR 0 1
42008: PPUSH
42009: CALL_OW 141
// end ;
42013: LD_VAR 0 4
42017: RET
// export function Abs ( value ) ; begin
42018: LD_INT 0
42020: PPUSH
// result := value ;
42021: LD_ADDR_VAR 0 2
42025: PUSH
42026: LD_VAR 0 1
42030: ST_TO_ADDR
// if value < 0 then
42031: LD_VAR 0 1
42035: PUSH
42036: LD_INT 0
42038: LESS
42039: IFFALSE 42056
// result := value * - 1 ;
42041: LD_ADDR_VAR 0 2
42045: PUSH
42046: LD_VAR 0 1
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: MUL
42055: ST_TO_ADDR
// end ;
42056: LD_VAR 0 2
42060: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42061: LD_INT 0
42063: PPUSH
42064: PPUSH
42065: PPUSH
42066: PPUSH
42067: PPUSH
42068: PPUSH
42069: PPUSH
42070: PPUSH
// if not unit or not building then
42071: LD_VAR 0 1
42075: NOT
42076: IFTRUE 42085
42078: PUSH
42079: LD_VAR 0 2
42083: NOT
42084: OR
42085: IFFALSE 42089
// exit ;
42087: GO 42317
// x := GetX ( building ) ;
42089: LD_ADDR_VAR 0 4
42093: PUSH
42094: LD_VAR 0 2
42098: PPUSH
42099: CALL_OW 250
42103: ST_TO_ADDR
// y := GetY ( building ) ;
42104: LD_ADDR_VAR 0 6
42108: PUSH
42109: LD_VAR 0 2
42113: PPUSH
42114: CALL_OW 251
42118: ST_TO_ADDR
// d := GetDir ( building ) ;
42119: LD_ADDR_VAR 0 8
42123: PUSH
42124: LD_VAR 0 2
42128: PPUSH
42129: CALL_OW 254
42133: ST_TO_ADDR
// r := 4 ;
42134: LD_ADDR_VAR 0 9
42138: PUSH
42139: LD_INT 4
42141: ST_TO_ADDR
// for i := 1 to 5 do
42142: LD_ADDR_VAR 0 10
42146: PUSH
42147: DOUBLE
42148: LD_INT 1
42150: DEC
42151: ST_TO_ADDR
42152: LD_INT 5
42154: PUSH
42155: FOR_TO
42156: IFFALSE 42315
// begin _x := ShiftX ( x , d , r + i ) ;
42158: LD_ADDR_VAR 0 5
42162: PUSH
42163: LD_VAR 0 4
42167: PPUSH
42168: LD_VAR 0 8
42172: PPUSH
42173: LD_VAR 0 9
42177: PUSH
42178: LD_VAR 0 10
42182: PLUS
42183: PPUSH
42184: CALL_OW 272
42188: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42189: LD_ADDR_VAR 0 7
42193: PUSH
42194: LD_VAR 0 6
42198: PPUSH
42199: LD_VAR 0 8
42203: PPUSH
42204: LD_VAR 0 9
42208: PUSH
42209: LD_VAR 0 10
42213: PLUS
42214: PPUSH
42215: CALL_OW 273
42219: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42220: LD_VAR 0 5
42224: PPUSH
42225: LD_VAR 0 7
42229: PPUSH
42230: CALL_OW 488
42234: IFFALSE 42269
42236: PUSH
42237: LD_VAR 0 5
42241: PPUSH
42242: LD_VAR 0 7
42246: PPUSH
42247: CALL_OW 428
42251: PPUSH
42252: CALL_OW 247
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: IN
42267: NOT
42268: AND
42269: IFFALSE 42313
// begin ComMoveXY ( unit , _x , _y ) ;
42271: LD_VAR 0 1
42275: PPUSH
42276: LD_VAR 0 5
42280: PPUSH
42281: LD_VAR 0 7
42285: PPUSH
42286: CALL_OW 111
// result := [ _x , _y ] ;
42290: LD_ADDR_VAR 0 3
42294: PUSH
42295: LD_VAR 0 5
42299: PUSH
42300: LD_VAR 0 7
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: ST_TO_ADDR
// exit ;
42309: POP
42310: POP
42311: GO 42317
// end ; end ;
42313: GO 42155
42315: POP
42316: POP
// end ;
42317: LD_VAR 0 3
42321: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
42326: PPUSH
// result := 0 ;
42327: LD_ADDR_VAR 0 3
42331: PUSH
42332: LD_INT 0
42334: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42335: LD_VAR 0 1
42339: PUSH
42340: LD_INT 0
42342: LESS
42343: IFTRUE 42355
42345: PUSH
42346: LD_VAR 0 1
42350: PUSH
42351: LD_INT 8
42353: GREATER
42354: OR
42355: IFTRUE 42367
42357: PUSH
42358: LD_VAR 0 2
42362: PUSH
42363: LD_INT 0
42365: LESS
42366: OR
42367: IFTRUE 42379
42369: PUSH
42370: LD_VAR 0 2
42374: PUSH
42375: LD_INT 8
42377: GREATER
42378: OR
42379: IFFALSE 42383
// exit ;
42381: GO 42458
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42383: LD_ADDR_VAR 0 4
42387: PUSH
42388: LD_INT 22
42390: PUSH
42391: LD_VAR 0 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PPUSH
42400: CALL_OW 69
42404: PUSH
42405: FOR_IN
42406: IFFALSE 42456
// begin un := UnitShoot ( i ) ;
42408: LD_ADDR_VAR 0 5
42412: PUSH
42413: LD_VAR 0 4
42417: PPUSH
42418: CALL_OW 504
42422: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42423: LD_VAR 0 5
42427: PPUSH
42428: CALL_OW 255
42432: PUSH
42433: LD_VAR 0 1
42437: EQUAL
42438: IFFALSE 42454
// begin result := un ;
42440: LD_ADDR_VAR 0 3
42444: PUSH
42445: LD_VAR 0 5
42449: ST_TO_ADDR
// exit ;
42450: POP
42451: POP
42452: GO 42458
// end ; end ;
42454: GO 42405
42456: POP
42457: POP
// end ;
42458: LD_VAR 0 3
42462: RET
// export function GetCargoBay ( units ) ; begin
42463: LD_INT 0
42465: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42466: LD_ADDR_VAR 0 2
42470: PUSH
42471: LD_VAR 0 1
42475: PPUSH
42476: LD_INT 2
42478: PUSH
42479: LD_INT 34
42481: PUSH
42482: LD_INT 12
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 34
42491: PUSH
42492: LD_INT 51
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 34
42501: PUSH
42502: LD_INT 32
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 34
42511: PUSH
42512: LD_INT 89
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: PPUSH
42526: CALL_OW 72
42530: ST_TO_ADDR
// end ;
42531: LD_VAR 0 2
42535: RET
// export function Negate ( value ) ; begin
42536: LD_INT 0
42538: PPUSH
// result := not value ;
42539: LD_ADDR_VAR 0 2
42543: PUSH
42544: LD_VAR 0 1
42548: NOT
42549: ST_TO_ADDR
// end ;
42550: LD_VAR 0 2
42554: RET
// export function Inc ( value ) ; begin
42555: LD_INT 0
42557: PPUSH
// result := value + 1 ;
42558: LD_ADDR_VAR 0 2
42562: PUSH
42563: LD_VAR 0 1
42567: PUSH
42568: LD_INT 1
42570: PLUS
42571: ST_TO_ADDR
// end ;
42572: LD_VAR 0 2
42576: RET
// export function Dec ( value ) ; begin
42577: LD_INT 0
42579: PPUSH
// result := value - 1 ;
42580: LD_ADDR_VAR 0 2
42584: PUSH
42585: LD_VAR 0 1
42589: PUSH
42590: LD_INT 1
42592: MINUS
42593: ST_TO_ADDR
// end ;
42594: LD_VAR 0 2
42598: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42599: LD_INT 0
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
42608: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42609: LD_VAR 0 1
42613: PPUSH
42614: LD_VAR 0 2
42618: PPUSH
42619: CALL_OW 488
42623: NOT
42624: IFTRUE 42643
42626: PUSH
42627: LD_VAR 0 3
42631: PPUSH
42632: LD_VAR 0 4
42636: PPUSH
42637: CALL_OW 488
42641: NOT
42642: OR
42643: IFFALSE 42656
// begin result := - 1 ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: ST_TO_ADDR
// exit ;
42654: GO 42891
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42656: LD_ADDR_VAR 0 12
42660: PUSH
42661: LD_VAR 0 1
42665: PPUSH
42666: LD_VAR 0 2
42670: PPUSH
42671: LD_VAR 0 3
42675: PPUSH
42676: LD_VAR 0 4
42680: PPUSH
42681: CALL 41727 0 4
42685: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42686: LD_ADDR_VAR 0 11
42690: PUSH
42691: LD_VAR 0 1
42695: PPUSH
42696: LD_VAR 0 2
42700: PPUSH
42701: LD_VAR 0 12
42705: PUSH
42706: LD_INT 1
42708: ARRAY
42709: PPUSH
42710: LD_VAR 0 12
42714: PUSH
42715: LD_INT 2
42717: ARRAY
42718: PPUSH
42719: CALL_OW 298
42723: ST_TO_ADDR
// distance := 9999 ;
42724: LD_ADDR_VAR 0 10
42728: PUSH
42729: LD_INT 9999
42731: ST_TO_ADDR
// for i := 0 to 5 do
42732: LD_ADDR_VAR 0 6
42736: PUSH
42737: DOUBLE
42738: LD_INT 0
42740: DEC
42741: ST_TO_ADDR
42742: LD_INT 5
42744: PUSH
42745: FOR_TO
42746: IFFALSE 42889
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42748: LD_ADDR_VAR 0 7
42752: PUSH
42753: LD_VAR 0 1
42757: PPUSH
42758: LD_VAR 0 6
42762: PPUSH
42763: LD_VAR 0 11
42767: PPUSH
42768: CALL_OW 272
42772: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42773: LD_ADDR_VAR 0 8
42777: PUSH
42778: LD_VAR 0 2
42782: PPUSH
42783: LD_VAR 0 6
42787: PPUSH
42788: LD_VAR 0 11
42792: PPUSH
42793: CALL_OW 273
42797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42798: LD_VAR 0 7
42802: PPUSH
42803: LD_VAR 0 8
42807: PPUSH
42808: CALL_OW 488
42812: NOT
42813: IFFALSE 42817
// continue ;
42815: GO 42745
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42817: LD_ADDR_VAR 0 9
42821: PUSH
42822: LD_VAR 0 12
42826: PUSH
42827: LD_INT 1
42829: ARRAY
42830: PPUSH
42831: LD_VAR 0 12
42835: PUSH
42836: LD_INT 2
42838: ARRAY
42839: PPUSH
42840: LD_VAR 0 7
42844: PPUSH
42845: LD_VAR 0 8
42849: PPUSH
42850: CALL_OW 298
42854: ST_TO_ADDR
// if tmp < distance then
42855: LD_VAR 0 9
42859: PUSH
42860: LD_VAR 0 10
42864: LESS
42865: IFFALSE 42887
// begin result := i ;
42867: LD_ADDR_VAR 0 5
42871: PUSH
42872: LD_VAR 0 6
42876: ST_TO_ADDR
// distance := tmp ;
42877: LD_ADDR_VAR 0 10
42881: PUSH
42882: LD_VAR 0 9
42886: ST_TO_ADDR
// end ; end ;
42887: GO 42745
42889: POP
42890: POP
// end ;
42891: LD_VAR 0 5
42895: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42896: LD_INT 0
42898: PPUSH
42899: PPUSH
// if not driver or not IsInUnit ( driver ) then
42900: LD_VAR 0 1
42904: NOT
42905: IFTRUE 42919
42907: PUSH
42908: LD_VAR 0 1
42912: PPUSH
42913: CALL_OW 310
42917: NOT
42918: OR
42919: IFFALSE 42923
// exit ;
42921: GO 43013
// vehicle := IsInUnit ( driver ) ;
42923: LD_ADDR_VAR 0 3
42927: PUSH
42928: LD_VAR 0 1
42932: PPUSH
42933: CALL_OW 310
42937: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42938: LD_VAR 0 1
42942: PPUSH
42943: LD_STRING \
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 0
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: LD_INT 0
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: PUSH
42973: LD_STRING E
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_VAR 0 3
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: LD_INT 0
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PPUSH
43009: CALL_OW 446
// end ;
43013: LD_VAR 0 2
43017: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43018: LD_INT 0
43020: PPUSH
43021: PPUSH
// if not driver or not IsInUnit ( driver ) then
43022: LD_VAR 0 1
43026: NOT
43027: IFTRUE 43041
43029: PUSH
43030: LD_VAR 0 1
43034: PPUSH
43035: CALL_OW 310
43039: NOT
43040: OR
43041: IFFALSE 43045
// exit ;
43043: GO 43135
// vehicle := IsInUnit ( driver ) ;
43045: LD_ADDR_VAR 0 3
43049: PUSH
43050: LD_VAR 0 1
43054: PPUSH
43055: CALL_OW 310
43059: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43060: LD_VAR 0 1
43064: PPUSH
43065: LD_STRING \
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 0
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: PUSH
43095: LD_STRING E
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_VAR 0 3
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: LD_INT 0
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PPUSH
43131: CALL_OW 447
// end ;
43135: LD_VAR 0 2
43139: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43140: LD_INT 0
43142: PPUSH
43143: PPUSH
43144: PPUSH
// tmp := [ ] ;
43145: LD_ADDR_VAR 0 5
43149: PUSH
43150: EMPTY
43151: ST_TO_ADDR
// for i in units do
43152: LD_ADDR_VAR 0 4
43156: PUSH
43157: LD_VAR 0 1
43161: PUSH
43162: FOR_IN
43163: IFFALSE 43201
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43165: LD_ADDR_VAR 0 5
43169: PUSH
43170: LD_VAR 0 5
43174: PPUSH
43175: LD_VAR 0 5
43179: PUSH
43180: LD_INT 1
43182: PLUS
43183: PPUSH
43184: LD_VAR 0 4
43188: PPUSH
43189: CALL_OW 256
43193: PPUSH
43194: CALL_OW 2
43198: ST_TO_ADDR
43199: GO 43162
43201: POP
43202: POP
// if not tmp then
43203: LD_VAR 0 5
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43260
// if asc then
43212: LD_VAR 0 2
43216: IFFALSE 43240
// result := SortListByListAsc ( units , tmp ) else
43218: LD_ADDR_VAR 0 3
43222: PUSH
43223: LD_VAR 0 1
43227: PPUSH
43228: LD_VAR 0 5
43232: PPUSH
43233: CALL_OW 76
43237: ST_TO_ADDR
43238: GO 43260
// result := SortListByListDesc ( units , tmp ) ;
43240: LD_ADDR_VAR 0 3
43244: PUSH
43245: LD_VAR 0 1
43249: PPUSH
43250: LD_VAR 0 5
43254: PPUSH
43255: CALL_OW 77
43259: ST_TO_ADDR
// end ;
43260: LD_VAR 0 3
43264: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43265: LD_INT 0
43267: PPUSH
43268: PPUSH
// task := GetTaskList ( mech ) ;
43269: LD_ADDR_VAR 0 4
43273: PUSH
43274: LD_VAR 0 1
43278: PPUSH
43279: CALL_OW 437
43283: ST_TO_ADDR
// if not task then
43284: LD_VAR 0 4
43288: NOT
43289: IFFALSE 43293
// exit ;
43291: GO 43337
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43293: LD_ADDR_VAR 0 3
43297: PUSH
43298: LD_VAR 0 4
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: PUSH
43307: LD_INT 1
43309: ARRAY
43310: PUSH
43311: LD_STRING r
43313: EQUAL
43314: IFFALSE 43336
43316: PUSH
43317: LD_VAR 0 4
43321: PUSH
43322: LD_INT 1
43324: ARRAY
43325: PUSH
43326: LD_INT 4
43328: ARRAY
43329: PUSH
43330: LD_VAR 0 2
43334: EQUAL
43335: AND
43336: ST_TO_ADDR
// end ;
43337: LD_VAR 0 3
43341: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43342: LD_INT 0
43344: PPUSH
// SetDir ( unit , d ) ;
43345: LD_VAR 0 1
43349: PPUSH
43350: LD_VAR 0 4
43354: PPUSH
43355: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43359: LD_ADDR_VAR 0 6
43363: PUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: LD_VAR 0 2
43373: PPUSH
43374: LD_VAR 0 3
43378: PPUSH
43379: LD_VAR 0 5
43383: PPUSH
43384: CALL_OW 48
43388: ST_TO_ADDR
// end ;
43389: LD_VAR 0 6
43393: RET
// export function ToNaturalNumber ( number ) ; begin
43394: LD_INT 0
43396: PPUSH
// result := number div 1 ;
43397: LD_ADDR_VAR 0 2
43401: PUSH
43402: LD_VAR 0 1
43406: PUSH
43407: LD_INT 1
43409: DIV
43410: ST_TO_ADDR
// if number < 0 then
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 0
43418: LESS
43419: IFFALSE 43429
// result := 0 ;
43421: LD_ADDR_VAR 0 2
43425: PUSH
43426: LD_INT 0
43428: ST_TO_ADDR
// end ;
43429: LD_VAR 0 2
43433: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43434: LD_INT 0
43436: PPUSH
43437: PPUSH
43438: PPUSH
// if not buildings then
43439: LD_VAR 0 1
43443: NOT
43444: IFFALSE 43448
// exit ;
43446: GO 43563
// tmp := [ ] ;
43448: LD_ADDR_VAR 0 5
43452: PUSH
43453: EMPTY
43454: ST_TO_ADDR
// for b in buildings do
43455: LD_ADDR_VAR 0 4
43459: PUSH
43460: LD_VAR 0 1
43464: PUSH
43465: FOR_IN
43466: IFFALSE 43504
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43468: LD_ADDR_VAR 0 5
43472: PUSH
43473: LD_VAR 0 5
43477: PPUSH
43478: LD_VAR 0 5
43482: PUSH
43483: LD_INT 1
43485: PLUS
43486: PPUSH
43487: LD_VAR 0 4
43491: PPUSH
43492: CALL_OW 266
43496: PPUSH
43497: CALL_OW 1
43501: ST_TO_ADDR
43502: GO 43465
43504: POP
43505: POP
// if not tmp then
43506: LD_VAR 0 5
43510: NOT
43511: IFFALSE 43515
// exit ;
43513: GO 43563
// if asc then
43515: LD_VAR 0 2
43519: IFFALSE 43543
// result := SortListByListAsc ( buildings , tmp ) else
43521: LD_ADDR_VAR 0 3
43525: PUSH
43526: LD_VAR 0 1
43530: PPUSH
43531: LD_VAR 0 5
43535: PPUSH
43536: CALL_OW 76
43540: ST_TO_ADDR
43541: GO 43563
// result := SortListByListDesc ( buildings , tmp ) ;
43543: LD_ADDR_VAR 0 3
43547: PUSH
43548: LD_VAR 0 1
43552: PPUSH
43553: LD_VAR 0 5
43557: PPUSH
43558: CALL_OW 77
43562: ST_TO_ADDR
// end ;
43563: LD_VAR 0 3
43567: RET
// export function SortByClass ( units , class ) ; var un ; begin
43568: LD_INT 0
43570: PPUSH
43571: PPUSH
// if not units or not class then
43572: LD_VAR 0 1
43576: NOT
43577: IFTRUE 43586
43579: PUSH
43580: LD_VAR 0 2
43584: NOT
43585: OR
43586: IFFALSE 43590
// exit ;
43588: GO 43685
// result := [ ] ;
43590: LD_ADDR_VAR 0 3
43594: PUSH
43595: EMPTY
43596: ST_TO_ADDR
// for un in units do
43597: LD_ADDR_VAR 0 4
43601: PUSH
43602: LD_VAR 0 1
43606: PUSH
43607: FOR_IN
43608: IFFALSE 43683
// if GetClass ( un ) = class then
43610: LD_VAR 0 4
43614: PPUSH
43615: CALL_OW 257
43619: PUSH
43620: LD_VAR 0 2
43624: EQUAL
43625: IFFALSE 43652
// result := Insert ( result , 1 , un ) else
43627: LD_ADDR_VAR 0 3
43631: PUSH
43632: LD_VAR 0 3
43636: PPUSH
43637: LD_INT 1
43639: PPUSH
43640: LD_VAR 0 4
43644: PPUSH
43645: CALL_OW 2
43649: ST_TO_ADDR
43650: GO 43681
// result := Replace ( result , result + 1 , un ) ;
43652: LD_ADDR_VAR 0 3
43656: PUSH
43657: LD_VAR 0 3
43661: PPUSH
43662: LD_VAR 0 3
43666: PUSH
43667: LD_INT 1
43669: PLUS
43670: PPUSH
43671: LD_VAR 0 4
43675: PPUSH
43676: CALL_OW 1
43680: ST_TO_ADDR
43681: GO 43607
43683: POP
43684: POP
// end ;
43685: LD_VAR 0 3
43689: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43690: LD_INT 0
43692: PPUSH
43693: PPUSH
43694: PPUSH
43695: PPUSH
43696: PPUSH
43697: PPUSH
43698: PPUSH
// result := [ ] ;
43699: LD_ADDR_VAR 0 4
43703: PUSH
43704: EMPTY
43705: ST_TO_ADDR
// if x - r < 0 then
43706: LD_VAR 0 1
43710: PUSH
43711: LD_VAR 0 3
43715: MINUS
43716: PUSH
43717: LD_INT 0
43719: LESS
43720: IFFALSE 43732
// min_x := 0 else
43722: LD_ADDR_VAR 0 8
43726: PUSH
43727: LD_INT 0
43729: ST_TO_ADDR
43730: GO 43748
// min_x := x - r ;
43732: LD_ADDR_VAR 0 8
43736: PUSH
43737: LD_VAR 0 1
43741: PUSH
43742: LD_VAR 0 3
43746: MINUS
43747: ST_TO_ADDR
// if y - r < 0 then
43748: LD_VAR 0 2
43752: PUSH
43753: LD_VAR 0 3
43757: MINUS
43758: PUSH
43759: LD_INT 0
43761: LESS
43762: IFFALSE 43774
// min_y := 0 else
43764: LD_ADDR_VAR 0 7
43768: PUSH
43769: LD_INT 0
43771: ST_TO_ADDR
43772: GO 43790
// min_y := y - r ;
43774: LD_ADDR_VAR 0 7
43778: PUSH
43779: LD_VAR 0 2
43783: PUSH
43784: LD_VAR 0 3
43788: MINUS
43789: ST_TO_ADDR
// max_x := x + r ;
43790: LD_ADDR_VAR 0 9
43794: PUSH
43795: LD_VAR 0 1
43799: PUSH
43800: LD_VAR 0 3
43804: PLUS
43805: ST_TO_ADDR
// max_y := y + r ;
43806: LD_ADDR_VAR 0 10
43810: PUSH
43811: LD_VAR 0 2
43815: PUSH
43816: LD_VAR 0 3
43820: PLUS
43821: ST_TO_ADDR
// for _x = min_x to max_x do
43822: LD_ADDR_VAR 0 5
43826: PUSH
43827: DOUBLE
43828: LD_VAR 0 8
43832: DEC
43833: ST_TO_ADDR
43834: LD_VAR 0 9
43838: PUSH
43839: FOR_TO
43840: IFFALSE 43941
// for _y = min_y to max_y do
43842: LD_ADDR_VAR 0 6
43846: PUSH
43847: DOUBLE
43848: LD_VAR 0 7
43852: DEC
43853: ST_TO_ADDR
43854: LD_VAR 0 10
43858: PUSH
43859: FOR_TO
43860: IFFALSE 43937
// begin if not ValidHex ( _x , _y ) then
43862: LD_VAR 0 5
43866: PPUSH
43867: LD_VAR 0 6
43871: PPUSH
43872: CALL_OW 488
43876: NOT
43877: IFFALSE 43881
// continue ;
43879: GO 43859
// if GetResourceTypeXY ( _x , _y ) then
43881: LD_VAR 0 5
43885: PPUSH
43886: LD_VAR 0 6
43890: PPUSH
43891: CALL_OW 283
43895: IFFALSE 43935
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43897: LD_ADDR_VAR 0 4
43901: PUSH
43902: LD_VAR 0 4
43906: PPUSH
43907: LD_VAR 0 4
43911: PUSH
43912: LD_INT 1
43914: PLUS
43915: PPUSH
43916: LD_VAR 0 5
43920: PUSH
43921: LD_VAR 0 6
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PPUSH
43930: CALL_OW 1
43934: ST_TO_ADDR
// end ;
43935: GO 43859
43937: POP
43938: POP
43939: GO 43839
43941: POP
43942: POP
// end ;
43943: LD_VAR 0 4
43947: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43948: LD_INT 0
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
// if not units then
43958: LD_VAR 0 1
43962: NOT
43963: IFFALSE 43967
// exit ;
43965: GO 44499
// result := UnitFilter ( units , [ f_ok ] ) ;
43967: LD_ADDR_VAR 0 3
43971: PUSH
43972: LD_VAR 0 1
43976: PPUSH
43977: LD_INT 50
43979: PUSH
43980: EMPTY
43981: LIST
43982: PPUSH
43983: CALL_OW 72
43987: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43988: LD_ADDR_VAR 0 8
43992: PUSH
43993: LD_VAR 0 1
43997: PUSH
43998: LD_INT 1
44000: ARRAY
44001: PPUSH
44002: CALL_OW 255
44006: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44007: LD_ADDR_VAR 0 10
44011: PUSH
44012: LD_INT 29
44014: PUSH
44015: LD_INT 91
44017: PUSH
44018: LD_INT 49
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: ST_TO_ADDR
// if not result then
44026: LD_VAR 0 3
44030: NOT
44031: IFFALSE 44035
// exit ;
44033: GO 44499
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44035: LD_ADDR_VAR 0 5
44039: PUSH
44040: LD_INT 81
44042: PUSH
44043: LD_VAR 0 8
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PPUSH
44052: CALL_OW 69
44056: ST_TO_ADDR
// for i in result do
44057: LD_ADDR_VAR 0 4
44061: PUSH
44062: LD_VAR 0 3
44066: PUSH
44067: FOR_IN
44068: IFFALSE 44497
// begin tag := GetTag ( i ) + 1 ;
44070: LD_ADDR_VAR 0 9
44074: PUSH
44075: LD_VAR 0 4
44079: PPUSH
44080: CALL_OW 110
44084: PUSH
44085: LD_INT 1
44087: PLUS
44088: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44089: LD_ADDR_VAR 0 7
44093: PUSH
44094: LD_VAR 0 4
44098: PPUSH
44099: CALL_OW 250
44103: PPUSH
44104: LD_VAR 0 4
44108: PPUSH
44109: CALL_OW 251
44113: PPUSH
44114: LD_INT 4
44116: PPUSH
44117: CALL 43690 0 3
44121: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44122: LD_VAR 0 4
44126: PPUSH
44127: CALL_OW 247
44131: PUSH
44132: LD_INT 2
44134: EQUAL
44135: IFFALSE 44147
44137: PUSH
44138: LD_VAR 0 7
44142: PUSH
44143: LD_INT 2
44145: GREATER
44146: AND
44147: IFFALSE 44167
44149: PUSH
44150: LD_VAR 0 4
44154: PPUSH
44155: CALL_OW 264
44159: PUSH
44160: LD_VAR 0 10
44164: IN
44165: NOT
44166: AND
44167: IFFALSE 44206
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44169: LD_VAR 0 4
44173: PPUSH
44174: LD_VAR 0 7
44178: PUSH
44179: LD_INT 1
44181: ARRAY
44182: PUSH
44183: LD_INT 1
44185: ARRAY
44186: PPUSH
44187: LD_VAR 0 7
44191: PUSH
44192: LD_INT 1
44194: ARRAY
44195: PUSH
44196: LD_INT 2
44198: ARRAY
44199: PPUSH
44200: CALL_OW 116
44204: GO 44495
// if path > tag then
44206: LD_VAR 0 2
44210: PUSH
44211: LD_VAR 0 9
44215: GREATER
44216: IFFALSE 44424
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44218: LD_ADDR_VAR 0 6
44222: PUSH
44223: LD_VAR 0 5
44227: PPUSH
44228: LD_INT 91
44230: PUSH
44231: LD_VAR 0 4
44235: PUSH
44236: LD_INT 8
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: PPUSH
44244: CALL_OW 72
44248: ST_TO_ADDR
// if nearEnemy then
44249: LD_VAR 0 6
44253: IFFALSE 44322
// begin if GetWeapon ( i ) = ru_time_lapser then
44255: LD_VAR 0 4
44259: PPUSH
44260: CALL_OW 264
44264: PUSH
44265: LD_INT 49
44267: EQUAL
44268: IFFALSE 44296
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44270: LD_VAR 0 4
44274: PPUSH
44275: LD_VAR 0 6
44279: PPUSH
44280: LD_VAR 0 4
44284: PPUSH
44285: CALL_OW 74
44289: PPUSH
44290: CALL_OW 112
44294: GO 44320
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44296: LD_VAR 0 4
44300: PPUSH
44301: LD_VAR 0 6
44305: PPUSH
44306: LD_VAR 0 4
44310: PPUSH
44311: CALL_OW 74
44315: PPUSH
44316: CALL 45580 0 2
// end else
44320: GO 44422
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44322: LD_VAR 0 4
44326: PPUSH
44327: LD_VAR 0 2
44331: PUSH
44332: LD_VAR 0 9
44336: ARRAY
44337: PUSH
44338: LD_INT 1
44340: ARRAY
44341: PPUSH
44342: LD_VAR 0 2
44346: PUSH
44347: LD_VAR 0 9
44351: ARRAY
44352: PUSH
44353: LD_INT 2
44355: ARRAY
44356: PPUSH
44357: CALL_OW 297
44361: PUSH
44362: LD_INT 6
44364: GREATER
44365: IFFALSE 44408
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44367: LD_VAR 0 4
44371: PPUSH
44372: LD_VAR 0 2
44376: PUSH
44377: LD_VAR 0 9
44381: ARRAY
44382: PUSH
44383: LD_INT 1
44385: ARRAY
44386: PPUSH
44387: LD_VAR 0 2
44391: PUSH
44392: LD_VAR 0 9
44396: ARRAY
44397: PUSH
44398: LD_INT 2
44400: ARRAY
44401: PPUSH
44402: CALL_OW 114
44406: GO 44422
// SetTag ( i , tag ) ;
44408: LD_VAR 0 4
44412: PPUSH
44413: LD_VAR 0 9
44417: PPUSH
44418: CALL_OW 109
// end else
44422: GO 44495
// if enemy then
44424: LD_VAR 0 5
44428: IFFALSE 44495
// begin if GetWeapon ( i ) = ru_time_lapser then
44430: LD_VAR 0 4
44434: PPUSH
44435: CALL_OW 264
44439: PUSH
44440: LD_INT 49
44442: EQUAL
44443: IFFALSE 44471
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44445: LD_VAR 0 4
44449: PPUSH
44450: LD_VAR 0 5
44454: PPUSH
44455: LD_VAR 0 4
44459: PPUSH
44460: CALL_OW 74
44464: PPUSH
44465: CALL_OW 112
44469: GO 44495
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44471: LD_VAR 0 4
44475: PPUSH
44476: LD_VAR 0 5
44480: PPUSH
44481: LD_VAR 0 4
44485: PPUSH
44486: CALL_OW 74
44490: PPUSH
44491: CALL 45580 0 2
// end ; end ;
44495: GO 44067
44497: POP
44498: POP
// end ;
44499: LD_VAR 0 3
44503: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44504: LD_INT 0
44506: PPUSH
44507: PPUSH
44508: PPUSH
// if not unit or IsInUnit ( unit ) then
44509: LD_VAR 0 1
44513: NOT
44514: IFTRUE 44527
44516: PUSH
44517: LD_VAR 0 1
44521: PPUSH
44522: CALL_OW 310
44526: OR
44527: IFFALSE 44531
// exit ;
44529: GO 44622
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44531: LD_ADDR_VAR 0 4
44535: PUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 250
44545: PPUSH
44546: LD_VAR 0 2
44550: PPUSH
44551: LD_INT 1
44553: PPUSH
44554: CALL_OW 272
44558: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44559: LD_ADDR_VAR 0 5
44563: PUSH
44564: LD_VAR 0 1
44568: PPUSH
44569: CALL_OW 251
44573: PPUSH
44574: LD_VAR 0 2
44578: PPUSH
44579: LD_INT 1
44581: PPUSH
44582: CALL_OW 273
44586: ST_TO_ADDR
// if ValidHex ( x , y ) then
44587: LD_VAR 0 4
44591: PPUSH
44592: LD_VAR 0 5
44596: PPUSH
44597: CALL_OW 488
44601: IFFALSE 44622
// ComTurnXY ( unit , x , y ) ;
44603: LD_VAR 0 1
44607: PPUSH
44608: LD_VAR 0 4
44612: PPUSH
44613: LD_VAR 0 5
44617: PPUSH
44618: CALL_OW 118
// end ;
44622: LD_VAR 0 3
44626: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44627: LD_INT 0
44629: PPUSH
44630: PPUSH
// result := false ;
44631: LD_ADDR_VAR 0 3
44635: PUSH
44636: LD_INT 0
44638: ST_TO_ADDR
// if not units then
44639: LD_VAR 0 2
44643: NOT
44644: IFFALSE 44648
// exit ;
44646: GO 44693
// for i in units do
44648: LD_ADDR_VAR 0 4
44652: PUSH
44653: LD_VAR 0 2
44657: PUSH
44658: FOR_IN
44659: IFFALSE 44691
// if See ( side , i ) then
44661: LD_VAR 0 1
44665: PPUSH
44666: LD_VAR 0 4
44670: PPUSH
44671: CALL_OW 292
44675: IFFALSE 44689
// begin result := true ;
44677: LD_ADDR_VAR 0 3
44681: PUSH
44682: LD_INT 1
44684: ST_TO_ADDR
// exit ;
44685: POP
44686: POP
44687: GO 44693
// end ;
44689: GO 44658
44691: POP
44692: POP
// end ;
44693: LD_VAR 0 3
44697: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44698: LD_INT 0
44700: PPUSH
44701: PPUSH
44702: PPUSH
44703: PPUSH
// if not unit or not points then
44704: LD_VAR 0 1
44708: NOT
44709: IFTRUE 44718
44711: PUSH
44712: LD_VAR 0 2
44716: NOT
44717: OR
44718: IFFALSE 44722
// exit ;
44720: GO 44812
// dist := 99999 ;
44722: LD_ADDR_VAR 0 5
44726: PUSH
44727: LD_INT 99999
44729: ST_TO_ADDR
// for i in points do
44730: LD_ADDR_VAR 0 4
44734: PUSH
44735: LD_VAR 0 2
44739: PUSH
44740: FOR_IN
44741: IFFALSE 44810
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44743: LD_ADDR_VAR 0 6
44747: PUSH
44748: LD_VAR 0 1
44752: PPUSH
44753: LD_VAR 0 4
44757: PUSH
44758: LD_INT 1
44760: ARRAY
44761: PPUSH
44762: LD_VAR 0 4
44766: PUSH
44767: LD_INT 2
44769: ARRAY
44770: PPUSH
44771: CALL_OW 297
44775: ST_TO_ADDR
// if tmpDist < dist then
44776: LD_VAR 0 6
44780: PUSH
44781: LD_VAR 0 5
44785: LESS
44786: IFFALSE 44808
// begin result := i ;
44788: LD_ADDR_VAR 0 3
44792: PUSH
44793: LD_VAR 0 4
44797: ST_TO_ADDR
// dist := tmpDist ;
44798: LD_ADDR_VAR 0 5
44802: PUSH
44803: LD_VAR 0 6
44807: ST_TO_ADDR
// end ; end ;
44808: GO 44740
44810: POP
44811: POP
// end ;
44812: LD_VAR 0 3
44816: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44817: LD_INT 0
44819: PPUSH
// uc_side := side ;
44820: LD_ADDR_OWVAR 20
44824: PUSH
44825: LD_VAR 0 1
44829: ST_TO_ADDR
// uc_nation := 3 ;
44830: LD_ADDR_OWVAR 21
44834: PUSH
44835: LD_INT 3
44837: ST_TO_ADDR
// vc_chassis := 25 ;
44838: LD_ADDR_OWVAR 37
44842: PUSH
44843: LD_INT 25
44845: ST_TO_ADDR
// vc_engine := engine_siberite ;
44846: LD_ADDR_OWVAR 39
44850: PUSH
44851: LD_INT 3
44853: ST_TO_ADDR
// vc_control := control_computer ;
44854: LD_ADDR_OWVAR 38
44858: PUSH
44859: LD_INT 3
44861: ST_TO_ADDR
// vc_weapon := 59 ;
44862: LD_ADDR_OWVAR 40
44866: PUSH
44867: LD_INT 59
44869: ST_TO_ADDR
// result := CreateVehicle ;
44870: LD_ADDR_VAR 0 5
44874: PUSH
44875: CALL_OW 45
44879: ST_TO_ADDR
// SetDir ( result , d ) ;
44880: LD_VAR 0 5
44884: PPUSH
44885: LD_VAR 0 4
44889: PPUSH
44890: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44894: LD_VAR 0 5
44898: PPUSH
44899: LD_VAR 0 2
44903: PPUSH
44904: LD_VAR 0 3
44908: PPUSH
44909: LD_INT 0
44911: PPUSH
44912: CALL_OW 48
// end ;
44916: LD_VAR 0 5
44920: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44921: LD_INT 0
44923: PPUSH
44924: PPUSH
44925: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44926: LD_ADDR_VAR 0 2
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44949: LD_VAR 0 1
44953: NOT
44954: IFTRUE 44987
44956: PUSH
44957: LD_VAR 0 1
44961: PPUSH
44962: CALL_OW 264
44966: PUSH
44967: LD_INT 12
44969: PUSH
44970: LD_INT 51
44972: PUSH
44973: LD_INT 32
44975: PUSH
44976: LD_INT 89
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: IN
44985: NOT
44986: OR
44987: IFFALSE 44991
// exit ;
44989: GO 45089
// for i := 1 to 3 do
44991: LD_ADDR_VAR 0 3
44995: PUSH
44996: DOUBLE
44997: LD_INT 1
44999: DEC
45000: ST_TO_ADDR
45001: LD_INT 3
45003: PUSH
45004: FOR_TO
45005: IFFALSE 45087
// begin tmp := GetCargo ( cargo , i ) ;
45007: LD_ADDR_VAR 0 4
45011: PUSH
45012: LD_VAR 0 1
45016: PPUSH
45017: LD_VAR 0 3
45021: PPUSH
45022: CALL_OW 289
45026: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45027: LD_ADDR_VAR 0 2
45031: PUSH
45032: LD_VAR 0 2
45036: PPUSH
45037: LD_VAR 0 3
45041: PPUSH
45042: LD_VAR 0 4
45046: PPUSH
45047: CALL_OW 1
45051: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45052: LD_ADDR_VAR 0 2
45056: PUSH
45057: LD_VAR 0 2
45061: PPUSH
45062: LD_INT 4
45064: PPUSH
45065: LD_VAR 0 2
45069: PUSH
45070: LD_INT 4
45072: ARRAY
45073: PUSH
45074: LD_VAR 0 4
45078: PLUS
45079: PPUSH
45080: CALL_OW 1
45084: ST_TO_ADDR
// end ;
45085: GO 45004
45087: POP
45088: POP
// end ;
45089: LD_VAR 0 2
45093: RET
// export function Length ( array ) ; begin
45094: LD_INT 0
45096: PPUSH
// result := array + 0 ;
45097: LD_ADDR_VAR 0 2
45101: PUSH
45102: LD_VAR 0 1
45106: PUSH
45107: LD_INT 0
45109: PLUS
45110: ST_TO_ADDR
// end ;
45111: LD_VAR 0 2
45115: RET
// export function PrepareArray ( array ) ; begin
45116: LD_INT 0
45118: PPUSH
// result := array diff 0 ;
45119: LD_ADDR_VAR 0 2
45123: PUSH
45124: LD_VAR 0 1
45128: PUSH
45129: LD_INT 0
45131: DIFF
45132: ST_TO_ADDR
// if not result [ 1 ] then
45133: LD_VAR 0 2
45137: PUSH
45138: LD_INT 1
45140: ARRAY
45141: NOT
45142: IFFALSE 45162
// result := Delete ( result , 1 ) ;
45144: LD_ADDR_VAR 0 2
45148: PUSH
45149: LD_VAR 0 2
45153: PPUSH
45154: LD_INT 1
45156: PPUSH
45157: CALL_OW 3
45161: ST_TO_ADDR
// end ;
45162: LD_VAR 0 2
45166: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45167: LD_INT 0
45169: PPUSH
45170: PPUSH
45171: PPUSH
45172: PPUSH
// sibRocketRange := 25 ;
45173: LD_ADDR_VAR 0 6
45177: PUSH
45178: LD_INT 25
45180: ST_TO_ADDR
// result := false ;
45181: LD_ADDR_VAR 0 4
45185: PUSH
45186: LD_INT 0
45188: ST_TO_ADDR
// for i := 0 to 5 do
45189: LD_ADDR_VAR 0 5
45193: PUSH
45194: DOUBLE
45195: LD_INT 0
45197: DEC
45198: ST_TO_ADDR
45199: LD_INT 5
45201: PUSH
45202: FOR_TO
45203: IFFALSE 45270
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45205: LD_VAR 0 1
45209: PPUSH
45210: LD_VAR 0 5
45214: PPUSH
45215: LD_VAR 0 6
45219: PPUSH
45220: CALL_OW 272
45224: PPUSH
45225: LD_VAR 0 2
45229: PPUSH
45230: LD_VAR 0 5
45234: PPUSH
45235: LD_VAR 0 6
45239: PPUSH
45240: CALL_OW 273
45244: PPUSH
45245: LD_VAR 0 3
45249: PPUSH
45250: CALL_OW 309
45254: IFFALSE 45268
// begin result := true ;
45256: LD_ADDR_VAR 0 4
45260: PUSH
45261: LD_INT 1
45263: ST_TO_ADDR
// exit ;
45264: POP
45265: POP
45266: GO 45272
// end ;
45268: GO 45202
45270: POP
45271: POP
// end ;
45272: LD_VAR 0 4
45276: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45277: LD_INT 0
45279: PPUSH
45280: PPUSH
45281: PPUSH
// if btype = b_depot then
45282: LD_VAR 0 2
45286: PUSH
45287: LD_INT 0
45289: EQUAL
45290: IFFALSE 45302
// begin result := true ;
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_INT 1
45299: ST_TO_ADDR
// exit ;
45300: GO 45422
// end ; pom := GetBase ( depot ) ;
45302: LD_ADDR_VAR 0 4
45306: PUSH
45307: LD_VAR 0 1
45311: PPUSH
45312: CALL_OW 274
45316: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45317: LD_ADDR_VAR 0 5
45321: PUSH
45322: LD_VAR 0 2
45326: PPUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: CALL_OW 248
45336: PPUSH
45337: CALL_OW 450
45341: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45342: LD_ADDR_VAR 0 3
45346: PUSH
45347: LD_VAR 0 4
45351: PPUSH
45352: LD_INT 1
45354: PPUSH
45355: CALL_OW 275
45359: PUSH
45360: LD_VAR 0 5
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: GREATEREQUAL
45369: IFFALSE 45395
45371: PUSH
45372: LD_VAR 0 4
45376: PPUSH
45377: LD_INT 2
45379: PPUSH
45380: CALL_OW 275
45384: PUSH
45385: LD_VAR 0 5
45389: PUSH
45390: LD_INT 2
45392: ARRAY
45393: GREATEREQUAL
45394: AND
45395: IFFALSE 45421
45397: PUSH
45398: LD_VAR 0 4
45402: PPUSH
45403: LD_INT 3
45405: PPUSH
45406: CALL_OW 275
45410: PUSH
45411: LD_VAR 0 5
45415: PUSH
45416: LD_INT 3
45418: ARRAY
45419: GREATEREQUAL
45420: AND
45421: ST_TO_ADDR
// end ;
45422: LD_VAR 0 3
45426: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45427: LD_INT 0
45429: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45430: LD_VAR 0 1
45434: PPUSH
45435: LD_VAR 0 2
45439: PPUSH
45440: LD_INT 0
45442: PPUSH
45443: LD_INT 0
45445: PPUSH
45446: LD_INT 1
45448: PPUSH
45449: LD_INT 0
45451: PPUSH
45452: CALL_OW 587
// end ;
45456: LD_VAR 0 3
45460: RET
// export function CenterOnNow ( unit ) ; begin
45461: LD_INT 0
45463: PPUSH
// result := IsInUnit ( unit ) ;
45464: LD_ADDR_VAR 0 2
45468: PUSH
45469: LD_VAR 0 1
45473: PPUSH
45474: CALL_OW 310
45478: ST_TO_ADDR
// if not result then
45479: LD_VAR 0 2
45483: NOT
45484: IFFALSE 45496
// result := unit ;
45486: LD_ADDR_VAR 0 2
45490: PUSH
45491: LD_VAR 0 1
45495: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45496: LD_VAR 0 1
45500: PPUSH
45501: CALL_OW 87
// end ;
45505: LD_VAR 0 2
45509: RET
// export function ComMoveHex ( unit , hex ) ; begin
45510: LD_INT 0
45512: PPUSH
// if not hex then
45513: LD_VAR 0 2
45517: NOT
45518: IFFALSE 45522
// exit ;
45520: GO 45575
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45522: LD_VAR 0 2
45526: PUSH
45527: LD_INT 1
45529: ARRAY
45530: PPUSH
45531: LD_VAR 0 2
45535: PUSH
45536: LD_INT 2
45538: ARRAY
45539: PPUSH
45540: CALL_OW 428
45544: IFFALSE 45548
// exit ;
45546: GO 45575
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45548: LD_VAR 0 1
45552: PPUSH
45553: LD_VAR 0 2
45557: PUSH
45558: LD_INT 1
45560: ARRAY
45561: PPUSH
45562: LD_VAR 0 2
45566: PUSH
45567: LD_INT 2
45569: ARRAY
45570: PPUSH
45571: CALL_OW 111
// end ;
45575: LD_VAR 0 3
45579: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45580: LD_INT 0
45582: PPUSH
45583: PPUSH
45584: PPUSH
// if not unit or not enemy then
45585: LD_VAR 0 1
45589: NOT
45590: IFTRUE 45599
45592: PUSH
45593: LD_VAR 0 2
45597: NOT
45598: OR
45599: IFFALSE 45603
// exit ;
45601: GO 45729
// x := GetX ( enemy ) ;
45603: LD_ADDR_VAR 0 4
45607: PUSH
45608: LD_VAR 0 2
45612: PPUSH
45613: CALL_OW 250
45617: ST_TO_ADDR
// y := GetY ( enemy ) ;
45618: LD_ADDR_VAR 0 5
45622: PUSH
45623: LD_VAR 0 2
45627: PPUSH
45628: CALL_OW 251
45632: ST_TO_ADDR
// if ValidHex ( x , y ) then
45633: LD_VAR 0 4
45637: PPUSH
45638: LD_VAR 0 5
45642: PPUSH
45643: CALL_OW 488
45647: IFFALSE 45729
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45649: LD_VAR 0 2
45653: PPUSH
45654: CALL_OW 247
45658: PUSH
45659: LD_INT 3
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: IN
45669: IFTRUE 45692
45671: PUSH
45672: LD_VAR 0 1
45676: PPUSH
45677: CALL_OW 255
45681: PPUSH
45682: LD_VAR 0 2
45686: PPUSH
45687: CALL_OW 292
45691: OR
45692: IFFALSE 45710
// ComAttackUnit ( unit , enemy ) else
45694: LD_VAR 0 1
45698: PPUSH
45699: LD_VAR 0 2
45703: PPUSH
45704: CALL_OW 115
45708: GO 45729
// ComAgressiveMove ( unit , x , y ) ;
45710: LD_VAR 0 1
45714: PPUSH
45715: LD_VAR 0 4
45719: PPUSH
45720: LD_VAR 0 5
45724: PPUSH
45725: CALL_OW 114
// end ;
45729: LD_VAR 0 3
45733: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45734: LD_INT 0
45736: PPUSH
45737: PPUSH
45738: PPUSH
// list := AreaToList ( area , 0 ) ;
45739: LD_ADDR_VAR 0 5
45743: PUSH
45744: LD_VAR 0 1
45748: PPUSH
45749: LD_INT 0
45751: PPUSH
45752: CALL_OW 517
45756: ST_TO_ADDR
// if not list then
45757: LD_VAR 0 5
45761: NOT
45762: IFFALSE 45766
// exit ;
45764: GO 45896
// if all then
45766: LD_VAR 0 2
45770: IFFALSE 45858
// begin for i := 1 to list [ 1 ] do
45772: LD_ADDR_VAR 0 4
45776: PUSH
45777: DOUBLE
45778: LD_INT 1
45780: DEC
45781: ST_TO_ADDR
45782: LD_VAR 0 5
45786: PUSH
45787: LD_INT 1
45789: ARRAY
45790: PUSH
45791: FOR_TO
45792: IFFALSE 45854
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45794: LD_ADDR_VAR 0 3
45798: PUSH
45799: LD_VAR 0 3
45803: PPUSH
45804: LD_VAR 0 3
45808: PUSH
45809: LD_INT 1
45811: PLUS
45812: PPUSH
45813: LD_VAR 0 5
45817: PUSH
45818: LD_INT 1
45820: ARRAY
45821: PUSH
45822: LD_VAR 0 4
45826: ARRAY
45827: PUSH
45828: LD_VAR 0 5
45832: PUSH
45833: LD_INT 2
45835: ARRAY
45836: PUSH
45837: LD_VAR 0 4
45841: ARRAY
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PPUSH
45847: CALL_OW 1
45851: ST_TO_ADDR
45852: GO 45791
45854: POP
45855: POP
// exit ;
45856: GO 45896
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45858: LD_ADDR_VAR 0 3
45862: PUSH
45863: LD_VAR 0 5
45867: PUSH
45868: LD_INT 1
45870: ARRAY
45871: PUSH
45872: LD_INT 1
45874: ARRAY
45875: PUSH
45876: LD_VAR 0 5
45880: PUSH
45881: LD_INT 2
45883: ARRAY
45884: PUSH
45885: LD_INT 1
45887: ARRAY
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: ST_TO_ADDR
// end ;
45896: LD_VAR 0 3
45900: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45901: LD_INT 0
45903: PPUSH
45904: PPUSH
// list := AreaToList ( area , 0 ) ;
45905: LD_ADDR_VAR 0 4
45909: PUSH
45910: LD_VAR 0 1
45914: PPUSH
45915: LD_INT 0
45917: PPUSH
45918: CALL_OW 517
45922: ST_TO_ADDR
// if not list then
45923: LD_VAR 0 4
45927: NOT
45928: IFFALSE 45932
// exit ;
45930: GO 45973
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45932: LD_ADDR_VAR 0 3
45936: PUSH
45937: LD_VAR 0 4
45941: PUSH
45942: LD_INT 1
45944: ARRAY
45945: PUSH
45946: LD_INT 1
45948: ARRAY
45949: PUSH
45950: LD_VAR 0 4
45954: PUSH
45955: LD_INT 2
45957: ARRAY
45958: PUSH
45959: LD_INT 1
45961: ARRAY
45962: PUSH
45963: LD_VAR 0 2
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: ST_TO_ADDR
// end ;
45973: LD_VAR 0 3
45977: RET
// export function First ( array ) ; begin
45978: LD_INT 0
45980: PPUSH
// if not array then
45981: LD_VAR 0 1
45985: NOT
45986: IFFALSE 45990
// exit ;
45988: GO 46004
// result := array [ 1 ] ;
45990: LD_ADDR_VAR 0 2
45994: PUSH
45995: LD_VAR 0 1
45999: PUSH
46000: LD_INT 1
46002: ARRAY
46003: ST_TO_ADDR
// end ;
46004: LD_VAR 0 2
46008: RET
// export function Last ( array ) ; begin
46009: LD_INT 0
46011: PPUSH
// if not array then
46012: LD_VAR 0 1
46016: NOT
46017: IFFALSE 46021
// exit ;
46019: GO 46037
// result := array [ array ] ;
46021: LD_ADDR_VAR 0 2
46025: PUSH
46026: LD_VAR 0 1
46030: PUSH
46031: LD_VAR 0 1
46035: ARRAY
46036: ST_TO_ADDR
// end ;
46037: LD_VAR 0 2
46041: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46042: LD_INT 0
46044: PPUSH
46045: PPUSH
// result := [ ] ;
46046: LD_ADDR_VAR 0 5
46050: PUSH
46051: EMPTY
46052: ST_TO_ADDR
// if not array then
46053: LD_VAR 0 1
46057: NOT
46058: IFFALSE 46062
// exit ;
46060: GO 46174
// for i := 1 to array do
46062: LD_ADDR_VAR 0 6
46066: PUSH
46067: DOUBLE
46068: LD_INT 1
46070: DEC
46071: ST_TO_ADDR
46072: LD_VAR 0 1
46076: PUSH
46077: FOR_TO
46078: IFFALSE 46172
// if array [ i ] [ index ] = value then
46080: LD_VAR 0 1
46084: PUSH
46085: LD_VAR 0 6
46089: ARRAY
46090: PUSH
46091: LD_VAR 0 2
46095: ARRAY
46096: PUSH
46097: LD_VAR 0 3
46101: EQUAL
46102: IFFALSE 46170
// begin if indexColumn then
46104: LD_VAR 0 4
46108: IFFALSE 46144
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46110: LD_ADDR_VAR 0 5
46114: PUSH
46115: LD_VAR 0 5
46119: PPUSH
46120: LD_VAR 0 1
46124: PUSH
46125: LD_VAR 0 6
46129: ARRAY
46130: PUSH
46131: LD_VAR 0 4
46135: ARRAY
46136: PPUSH
46137: CALL 41182 0 2
46141: ST_TO_ADDR
46142: GO 46170
// result := Join ( result , array [ i ] ) ;
46144: LD_ADDR_VAR 0 5
46148: PUSH
46149: LD_VAR 0 5
46153: PPUSH
46154: LD_VAR 0 1
46158: PUSH
46159: LD_VAR 0 6
46163: ARRAY
46164: PPUSH
46165: CALL 41182 0 2
46169: ST_TO_ADDR
// end ;
46170: GO 46077
46172: POP
46173: POP
// end ;
46174: LD_VAR 0 5
46178: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46179: LD_INT 0
46181: PPUSH
// if not vehicles or not parkingPoint then
46182: LD_VAR 0 1
46186: NOT
46187: IFTRUE 46196
46189: PUSH
46190: LD_VAR 0 2
46194: NOT
46195: OR
46196: IFFALSE 46200
// exit ;
46198: GO 46298
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46200: LD_ADDR_VAR 0 1
46204: PUSH
46205: LD_VAR 0 1
46209: PPUSH
46210: LD_INT 50
46212: PUSH
46213: EMPTY
46214: LIST
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: LD_INT 92
46221: PUSH
46222: LD_VAR 0 2
46226: PUSH
46227: LD_INT 1
46229: ARRAY
46230: PUSH
46231: LD_VAR 0 2
46235: PUSH
46236: LD_INT 2
46238: ARRAY
46239: PUSH
46240: LD_INT 8
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PPUSH
46257: CALL_OW 72
46261: ST_TO_ADDR
// if not vehicles then
46262: LD_VAR 0 1
46266: NOT
46267: IFFALSE 46271
// exit ;
46269: GO 46298
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46271: LD_VAR 0 1
46275: PPUSH
46276: LD_VAR 0 2
46280: PUSH
46281: LD_INT 1
46283: ARRAY
46284: PPUSH
46285: LD_VAR 0 2
46289: PUSH
46290: LD_INT 2
46292: ARRAY
46293: PPUSH
46294: CALL_OW 111
// end ;
46298: LD_VAR 0 3
46302: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46303: LD_INT 0
46305: PPUSH
46306: PPUSH
46307: PPUSH
// if not side or not area then
46308: LD_VAR 0 1
46312: NOT
46313: IFTRUE 46322
46315: PUSH
46316: LD_VAR 0 2
46320: NOT
46321: OR
46322: IFFALSE 46326
// exit ;
46324: GO 46445
// tmp := AreaToList ( area , 0 ) ;
46326: LD_ADDR_VAR 0 5
46330: PUSH
46331: LD_VAR 0 2
46335: PPUSH
46336: LD_INT 0
46338: PPUSH
46339: CALL_OW 517
46343: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46344: LD_ADDR_VAR 0 4
46348: PUSH
46349: DOUBLE
46350: LD_INT 1
46352: DEC
46353: ST_TO_ADDR
46354: LD_VAR 0 5
46358: PUSH
46359: LD_INT 1
46361: ARRAY
46362: PUSH
46363: FOR_TO
46364: IFFALSE 46443
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46366: LD_VAR 0 5
46370: PUSH
46371: LD_INT 1
46373: ARRAY
46374: PUSH
46375: LD_VAR 0 4
46379: ARRAY
46380: PPUSH
46381: LD_VAR 0 5
46385: PUSH
46386: LD_INT 2
46388: ARRAY
46389: PUSH
46390: LD_VAR 0 4
46394: ARRAY
46395: PPUSH
46396: CALL_OW 351
46400: IFFALSE 46441
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46402: LD_VAR 0 5
46406: PUSH
46407: LD_INT 1
46409: ARRAY
46410: PUSH
46411: LD_VAR 0 4
46415: ARRAY
46416: PPUSH
46417: LD_VAR 0 5
46421: PUSH
46422: LD_INT 2
46424: ARRAY
46425: PUSH
46426: LD_VAR 0 4
46430: ARRAY
46431: PPUSH
46432: LD_VAR 0 1
46436: PPUSH
46437: CALL_OW 244
// end ;
46441: GO 46363
46443: POP
46444: POP
// end ;
46445: LD_VAR 0 3
46449: RET
// export function UniqueArray ( array ) ; var i ; begin
46450: LD_INT 0
46452: PPUSH
46453: PPUSH
// result := [ ] ;
46454: LD_ADDR_VAR 0 2
46458: PUSH
46459: EMPTY
46460: ST_TO_ADDR
// if not array then
46461: LD_VAR 0 1
46465: NOT
46466: IFFALSE 46470
// exit ;
46468: GO 46531
// for i := 1 to array do
46470: LD_ADDR_VAR 0 3
46474: PUSH
46475: DOUBLE
46476: LD_INT 1
46478: DEC
46479: ST_TO_ADDR
46480: LD_VAR 0 1
46484: PUSH
46485: FOR_TO
46486: IFFALSE 46529
// if not array [ i ] in result then
46488: LD_VAR 0 1
46492: PUSH
46493: LD_VAR 0 3
46497: ARRAY
46498: PUSH
46499: LD_VAR 0 2
46503: IN
46504: NOT
46505: IFFALSE 46527
// result := Join ( result , i ) ;
46507: LD_ADDR_VAR 0 2
46511: PUSH
46512: LD_VAR 0 2
46516: PPUSH
46517: LD_VAR 0 3
46521: PPUSH
46522: CALL 41182 0 2
46526: ST_TO_ADDR
46527: GO 46485
46529: POP
46530: POP
// end ; end_of_file
46531: LD_VAR 0 2
46535: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46536: LD_INT 0
46538: PPUSH
46539: PPUSH
// disable ( mpActive ) ;
46540: LD_INT 100
46542: DISABLE_MARKED
// disable ( mpWin ) ;
46543: LD_INT 101
46545: DISABLE_MARKED
// disable ( mpLose ) ;
46546: LD_INT 102
46548: DISABLE_MARKED
// mpGameType := 0 ;
46549: LD_ADDR_EXP 1
46553: PUSH
46554: LD_INT 0
46556: ST_TO_ADDR
// mpGameSettings := [ ] ;
46557: LD_ADDR_EXP 4
46561: PUSH
46562: EMPTY
46563: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46564: LD_ADDR_EXP 2
46568: PUSH
46569: EMPTY
46570: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46571: LD_ADDR_EXP 3
46575: PUSH
46576: EMPTY
46577: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46578: LD_ADDR_EXP 27
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: LD_INT 2
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46593: LD_ADDR_EXP 10
46597: PUSH
46598: EMPTY
46599: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46600: LD_ADDR_EXP 11
46604: PUSH
46605: EMPTY
46606: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46607: LD_ADDR_EXP 39
46611: PUSH
46612: EMPTY
46613: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46614: LD_ADDR_EXP 40
46618: PUSH
46619: EMPTY
46620: ST_TO_ADDR
// mpDepots := [ ] ;
46621: LD_ADDR_EXP 12
46625: PUSH
46626: EMPTY
46627: ST_TO_ADDR
// mpBuildings := [ ] ;
46628: LD_ADDR_EXP 15
46632: PUSH
46633: EMPTY
46634: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46635: LD_ADDR_EXP 16
46639: PUSH
46640: EMPTY
46641: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46642: LD_ADDR_EXP 17
46646: PUSH
46647: EMPTY
46648: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46649: LD_ADDR_EXP 18
46653: PUSH
46654: EMPTY
46655: ST_TO_ADDR
// mpStartingResources := [ ] ;
46656: LD_ADDR_EXP 13
46660: PUSH
46661: EMPTY
46662: ST_TO_ADDR
// mpStartPos := [ ] ;
46663: LD_ADDR_EXP 19
46667: PUSH
46668: EMPTY
46669: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46670: LD_ADDR_EXP 20
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46679: LD_ADDR_EXP 21
46683: PUSH
46684: EMPTY
46685: ST_TO_ADDR
// mpApemans := [ ] ;
46686: LD_ADDR_EXP 28
46690: PUSH
46691: EMPTY
46692: ST_TO_ADDR
// mpApemansArea := [ ] ;
46693: LD_ADDR_EXP 29
46697: PUSH
46698: EMPTY
46699: ST_TO_ADDR
// mpRespawn := [ ] ;
46700: LD_ADDR_EXP 31
46704: PUSH
46705: EMPTY
46706: ST_TO_ADDR
// mpKingArea := 0 ;
46707: LD_ADDR_EXP 32
46711: PUSH
46712: LD_INT 0
46714: ST_TO_ADDR
// mpPoints := [ ] ;
46715: LD_ADDR_EXP 33
46719: PUSH
46720: EMPTY
46721: ST_TO_ADDR
// mpVehicles := 0 ;
46722: LD_ADDR_EXP 34
46726: PUSH
46727: LD_INT 0
46729: ST_TO_ADDR
// mpShipments := 0 ;
46730: LD_ADDR_EXP 25
46734: PUSH
46735: LD_INT 0
46737: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46738: LD_ADDR_EXP 38
46742: PUSH
46743: EMPTY
46744: PUSH
46745: EMPTY
46746: PUSH
46747: EMPTY
46748: PUSH
46749: EMPTY
46750: PUSH
46751: EMPTY
46752: PUSH
46753: EMPTY
46754: PUSH
46755: EMPTY
46756: PUSH
46757: EMPTY
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46769: LD_ADDR_EXP 30
46773: PUSH
46774: EMPTY
46775: PUSH
46776: EMPTY
46777: PUSH
46778: EMPTY
46779: PUSH
46780: EMPTY
46781: PUSH
46782: EMPTY
46783: PUSH
46784: EMPTY
46785: PUSH
46786: EMPTY
46787: PUSH
46788: EMPTY
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: ST_TO_ADDR
// mpEmissions := 0 ;
46800: LD_ADDR_EXP 35
46804: PUSH
46805: LD_INT 0
46807: ST_TO_ADDR
// mpTeleports := 0 ;
46808: LD_ADDR_EXP 41
46812: PUSH
46813: LD_INT 0
46815: ST_TO_ADDR
// mpArtifacts := 0 ;
46816: LD_ADDR_EXP 42
46820: PUSH
46821: LD_INT 0
46823: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46824: LD_ADDR_EXP 43
46828: PUSH
46829: LD_INT 0
46831: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46832: LD_ADDR_EXP 23
46836: PUSH
46837: LD_INT 3
46839: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46840: LD_ADDR_EXP 22
46844: PUSH
46845: LD_INT 15
46847: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46848: LD_ADDR_EXP 36
46852: PUSH
46853: LD_INT 0
46855: ST_TO_ADDR
// mpGameActive := false ;
46856: LD_ADDR_EXP 37
46860: PUSH
46861: LD_INT 0
46863: ST_TO_ADDR
// mpBlockRespThread := false ;
46864: LD_ADDR_EXP 44
46868: PUSH
46869: LD_INT 0
46871: ST_TO_ADDR
// for i := 1 to 32 do
46872: LD_ADDR_VAR 0 2
46876: PUSH
46877: DOUBLE
46878: LD_INT 1
46880: DEC
46881: ST_TO_ADDR
46882: LD_INT 32
46884: PUSH
46885: FOR_TO
46886: IFFALSE 46913
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46888: LD_ADDR_EXP 4
46892: PUSH
46893: LD_EXP 4
46897: PPUSH
46898: LD_VAR 0 2
46902: PPUSH
46903: LD_INT 0
46905: PPUSH
46906: CALL_OW 1
46910: ST_TO_ADDR
46911: GO 46885
46913: POP
46914: POP
// end ;
46915: LD_VAR 0 1
46919: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46920: LD_INT 0
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , ] ;
46936: LD_ADDR_VAR 0 14
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: LD_INT 3
46949: PUSH
46950: LD_INT 5
46952: PUSH
46953: LD_INT 6
46955: PUSH
46956: LD_INT 7
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: ST_TO_ADDR
// for i in gameTypes do
46967: LD_ADDR_VAR 0 2
46971: PUSH
46972: LD_VAR 0 14
46976: PUSH
46977: FOR_IN
46978: IFFALSE 46987
// disable ( i ) ;
46980: LD_VAR 0 2
46984: DISABLE_MARKED
46985: GO 46977
46987: POP
46988: POP
// if Multiplayer then
46989: LD_OWVAR 4
46993: IFFALSE 47177
// begin mpGameType := mp_game_type ;
46995: LD_ADDR_EXP 1
46999: PUSH
47000: LD_OWVAR 6
47004: ST_TO_ADDR
// your_side := mp_player_side ;
47005: LD_ADDR_OWVAR 2
47009: PUSH
47010: LD_OWVAR 7
47014: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47015: LD_ADDR_EXP 5
47019: PUSH
47020: LD_OWVAR 17
47024: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47025: LD_ADDR_EXP 6
47029: PUSH
47030: LD_OWVAR 15
47034: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47035: LD_ADDR_EXP 7
47039: PUSH
47040: LD_OWVAR 16
47044: ST_TO_ADDR
// mpTeams := mp_teams ;
47045: LD_ADDR_EXP 8
47049: PUSH
47050: LD_OWVAR 12
47054: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47055: LD_ADDR_VAR 0 2
47059: PUSH
47060: DOUBLE
47061: LD_INT 1
47063: DEC
47064: ST_TO_ADDR
47065: LD_EXP 2
47069: PPUSH
47070: CALL 5216 0 1
47074: PUSH
47075: FOR_TO
47076: IFFALSE 47152
// begin setting := mpGameSettingsKeys [ i ] ;
47078: LD_ADDR_VAR 0 12
47082: PUSH
47083: LD_EXP 2
47087: PUSH
47088: LD_VAR 0 2
47092: ARRAY
47093: ST_TO_ADDR
// if setting then
47094: LD_VAR 0 12
47098: IFFALSE 47150
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47100: LD_ADDR_EXP 4
47104: PUSH
47105: LD_EXP 4
47109: PPUSH
47110: LD_VAR 0 2
47114: PPUSH
47115: LD_EXP 3
47119: PUSH
47120: LD_VAR 0 2
47124: ARRAY
47125: PUSH
47126: LD_VAR 0 2
47130: PUSH
47131: LD_INT 1
47133: MINUS
47134: PPUSH
47135: CALL_OW 426
47139: PUSH
47140: LD_INT 1
47142: PLUS
47143: ARRAY
47144: PPUSH
47145: CALL_OW 1
47149: ST_TO_ADDR
// end ;
47150: GO 47075
47152: POP
47153: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47154: LD_ADDR_EXP 9
47158: PUSH
47159: LD_EXP 6
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: EMPTY
47168: LIST
47169: DIFF
47170: PUSH
47171: LD_INT 1
47173: GREATER
47174: ST_TO_ADDR
// end else
47175: GO 47177
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47177: LD_EXP 1
47181: PPUSH
47182: CALL 843 0 1
// if Count ( mpMarkedAreas ) then
47186: LD_EXP 16
47190: PPUSH
47191: CALL 5216 0 1
47195: IFFALSE 47226
// begin for i in mpMarkedAreas do
47197: LD_ADDR_VAR 0 2
47201: PUSH
47202: LD_EXP 16
47206: PUSH
47207: FOR_IN
47208: IFFALSE 47224
// SetAreaMapShow ( i , 0 ) ;
47210: LD_VAR 0 2
47214: PPUSH
47215: LD_INT 0
47217: PPUSH
47218: CALL_OW 424
47222: GO 47207
47224: POP
47225: POP
// end ; for i := 1 to 8 do
47226: LD_ADDR_VAR 0 2
47230: PUSH
47231: DOUBLE
47232: LD_INT 1
47234: DEC
47235: ST_TO_ADDR
47236: LD_INT 8
47238: PUSH
47239: FOR_TO
47240: IFFALSE 48675
// begin if not mpSidePositions [ i ] then
47242: LD_EXP 5
47246: PUSH
47247: LD_VAR 0 2
47251: ARRAY
47252: NOT
47253: IFFALSE 47257
// continue ;
47255: GO 47239
// side := i ;
47257: LD_ADDR_VAR 0 7
47261: PUSH
47262: LD_VAR 0 2
47266: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47267: LD_ADDR_VAR 0 9
47271: PUSH
47272: LD_EXP 7
47276: PUSH
47277: LD_VAR 0 2
47281: ARRAY
47282: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47283: LD_ADDR_VAR 0 8
47287: PUSH
47288: LD_EXP 5
47292: PUSH
47293: LD_VAR 0 2
47297: ARRAY
47298: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47299: LD_EXP 10
47303: PPUSH
47304: CALL 5216 0 1
47308: IFFALSE 47385
// begin for j in mpOilDeposits [ pos ] do
47310: LD_ADDR_VAR 0 3
47314: PUSH
47315: LD_EXP 10
47319: PUSH
47320: LD_VAR 0 8
47324: ARRAY
47325: PUSH
47326: FOR_IN
47327: IFFALSE 47383
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47329: LD_VAR 0 3
47333: PUSH
47334: LD_INT 1
47336: ARRAY
47337: PPUSH
47338: LD_VAR 0 3
47342: PUSH
47343: LD_INT 2
47345: ARRAY
47346: PPUSH
47347: LD_INT 2
47349: PPUSH
47350: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47354: LD_VAR 0 3
47358: PUSH
47359: LD_INT 1
47361: ARRAY
47362: PPUSH
47363: LD_VAR 0 3
47367: PUSH
47368: LD_INT 2
47370: ARRAY
47371: PPUSH
47372: LD_VAR 0 7
47376: PPUSH
47377: CALL_OW 441
// end ;
47381: GO 47326
47383: POP
47384: POP
// end ; if Count ( mpSibDeposits ) then
47385: LD_EXP 11
47389: PPUSH
47390: CALL 5216 0 1
47394: IFFALSE 47471
// begin for j in mpSibDeposits [ pos ] do
47396: LD_ADDR_VAR 0 3
47400: PUSH
47401: LD_EXP 11
47405: PUSH
47406: LD_VAR 0 8
47410: ARRAY
47411: PUSH
47412: FOR_IN
47413: IFFALSE 47469
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47415: LD_VAR 0 3
47419: PUSH
47420: LD_INT 1
47422: ARRAY
47423: PPUSH
47424: LD_VAR 0 3
47428: PUSH
47429: LD_INT 2
47431: ARRAY
47432: PPUSH
47433: LD_INT 3
47435: PPUSH
47436: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47440: LD_VAR 0 3
47444: PUSH
47445: LD_INT 1
47447: ARRAY
47448: PPUSH
47449: LD_VAR 0 3
47453: PUSH
47454: LD_INT 2
47456: ARRAY
47457: PPUSH
47458: LD_VAR 0 7
47462: PPUSH
47463: CALL_OW 441
// end ;
47467: GO 47412
47469: POP
47470: POP
// end ; InitBc ;
47471: CALL_OW 21
// InitUc ;
47475: CALL_OW 18
// uc_side := side ;
47479: LD_ADDR_OWVAR 20
47483: PUSH
47484: LD_VAR 0 7
47488: ST_TO_ADDR
// uc_nation := nation ;
47489: LD_ADDR_OWVAR 21
47493: PUSH
47494: LD_VAR 0 9
47498: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47499: LD_EXP 20
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: GREATER
47508: IFFALSE 47667
// begin x := mpStartPos [ pos ] [ 1 ] ;
47510: LD_ADDR_VAR 0 5
47514: PUSH
47515: LD_EXP 19
47519: PUSH
47520: LD_VAR 0 8
47524: ARRAY
47525: PUSH
47526: LD_INT 1
47528: ARRAY
47529: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47530: LD_ADDR_VAR 0 6
47534: PUSH
47535: LD_EXP 19
47539: PUSH
47540: LD_VAR 0 8
47544: ARRAY
47545: PUSH
47546: LD_INT 2
47548: ARRAY
47549: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47550: LD_VAR 0 5
47554: PPUSH
47555: LD_VAR 0 6
47559: PPUSH
47560: LD_INT 12
47562: PPUSH
47563: LD_INT 2
47565: PPUSH
47566: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47570: LD_ADDR_EXP 21
47574: PUSH
47575: LD_EXP 21
47579: PPUSH
47580: LD_VAR 0 7
47584: PPUSH
47585: LD_VAR 0 7
47589: PPUSH
47590: LD_VAR 0 5
47594: PPUSH
47595: LD_VAR 0 6
47599: PPUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 100
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: PUSH
47613: LD_INT 70
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: PUSH
47623: LD_INT 40
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 10
47632: PUSH
47633: LD_INT 25
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 20
47642: PUSH
47643: LD_INT 100
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: PPUSH
47657: CALL_OW 418
47661: PPUSH
47662: CALL_OW 1
47666: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47667: LD_EXP 12
47671: PPUSH
47672: CALL 5216 0 1
47676: IFFALSE 47871
// begin if mpGameType in [ GameTypeSurvival , GameTypeArmsRace , GameTypeArmsArtifact ] then
47678: LD_EXP 1
47682: PUSH
47683: LD_INT 2
47685: PUSH
47686: LD_INT 6
47688: PUSH
47689: LD_INT 7
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: IN
47697: IFFALSE 47717
// begin bc_level := 10 ;
47699: LD_ADDR_OWVAR 43
47703: PUSH
47704: LD_INT 10
47706: ST_TO_ADDR
// bc_type := b_warehouse ;
47707: LD_ADDR_OWVAR 42
47711: PUSH
47712: LD_INT 1
47714: ST_TO_ADDR
// end else
47715: GO 47733
// begin bc_level := 0 ;
47717: LD_ADDR_OWVAR 43
47721: PUSH
47722: LD_INT 0
47724: ST_TO_ADDR
// bc_type := b_depot ;
47725: LD_ADDR_OWVAR 42
47729: PUSH
47730: LD_INT 0
47732: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47733: LD_ADDR_VAR 0 4
47737: PUSH
47738: LD_EXP 12
47742: PUSH
47743: LD_VAR 0 8
47747: ARRAY
47748: PUSH
47749: LD_INT 1
47751: ARRAY
47752: PPUSH
47753: LD_EXP 12
47757: PUSH
47758: LD_VAR 0 8
47762: ARRAY
47763: PUSH
47764: LD_INT 2
47766: ARRAY
47767: PPUSH
47768: LD_EXP 12
47772: PUSH
47773: LD_VAR 0 8
47777: ARRAY
47778: PUSH
47779: LD_INT 3
47781: ARRAY
47782: PPUSH
47783: CALL_OW 47
47787: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47788: LD_VAR 0 4
47792: PPUSH
47793: LD_STRING @
47795: PUSH
47796: LD_VAR 0 7
47800: STR
47801: PPUSH
47802: CALL_OW 500
// if Count ( mpStartingResources ) then
47806: LD_EXP 13
47810: PPUSH
47811: CALL 5216 0 1
47815: IFFALSE 47869
// begin for j := 1 to mpStartingResources do
47817: LD_ADDR_VAR 0 3
47821: PUSH
47822: DOUBLE
47823: LD_INT 1
47825: DEC
47826: ST_TO_ADDR
47827: LD_EXP 13
47831: PUSH
47832: FOR_TO
47833: IFFALSE 47867
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47835: LD_VAR 0 4
47839: PPUSH
47840: CALL_OW 274
47844: PPUSH
47845: LD_VAR 0 3
47849: PPUSH
47850: LD_EXP 13
47854: PUSH
47855: LD_VAR 0 3
47859: ARRAY
47860: PPUSH
47861: CALL_OW 277
47865: GO 47832
47867: POP
47868: POP
// end ; end else
47869: GO 48078
// if Count ( mpStartingResources ) then
47871: LD_EXP 13
47875: PPUSH
47876: CALL 5216 0 1
47880: IFFALSE 48078
// begin x := mpStartPos [ pos ] [ 1 ] ;
47882: LD_ADDR_VAR 0 5
47886: PUSH
47887: LD_EXP 19
47891: PUSH
47892: LD_VAR 0 8
47896: ARRAY
47897: PUSH
47898: LD_INT 1
47900: ARRAY
47901: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47902: LD_ADDR_VAR 0 6
47906: PUSH
47907: LD_EXP 19
47911: PUSH
47912: LD_VAR 0 8
47916: ARRAY
47917: PUSH
47918: LD_INT 2
47920: ARRAY
47921: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47922: LD_ADDR_VAR 0 3
47926: PUSH
47927: DOUBLE
47928: LD_INT 1
47930: DEC
47931: ST_TO_ADDR
47932: LD_EXP 13
47936: PUSH
47937: FOR_TO
47938: IFFALSE 48076
// begin resources := mpStartingResources [ j ] ;
47940: LD_ADDR_VAR 0 13
47944: PUSH
47945: LD_EXP 13
47949: PUSH
47950: LD_VAR 0 3
47954: ARRAY
47955: ST_TO_ADDR
// if resources = 0 then
47956: LD_VAR 0 13
47960: PUSH
47961: LD_INT 0
47963: EQUAL
47964: IFFALSE 47968
// continue ;
47966: GO 47937
// repeat if resources >= 50 then
47968: LD_VAR 0 13
47972: PUSH
47973: LD_INT 50
47975: GREATEREQUAL
47976: IFFALSE 48022
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47978: LD_VAR 0 3
47982: PPUSH
47983: LD_INT 5
47985: PPUSH
47986: LD_VAR 0 5
47990: PPUSH
47991: LD_VAR 0 6
47995: PPUSH
47996: LD_INT 6
47998: PPUSH
47999: LD_INT 0
48001: PPUSH
48002: CALL_OW 60
// resources := resources - 50 ;
48006: LD_ADDR_VAR 0 13
48010: PUSH
48011: LD_VAR 0 13
48015: PUSH
48016: LD_INT 50
48018: MINUS
48019: ST_TO_ADDR
// end else
48020: GO 48064
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48022: LD_VAR 0 3
48026: PPUSH
48027: LD_VAR 0 13
48031: PUSH
48032: LD_INT 10
48034: DIV
48035: PPUSH
48036: LD_VAR 0 5
48040: PPUSH
48041: LD_VAR 0 6
48045: PPUSH
48046: LD_INT 6
48048: PPUSH
48049: LD_INT 0
48051: PPUSH
48052: CALL_OW 60
// resources := 0 ;
48056: LD_ADDR_VAR 0 13
48060: PUSH
48061: LD_INT 0
48063: ST_TO_ADDR
// end ; until resources <= 0 ;
48064: LD_VAR 0 13
48068: PUSH
48069: LD_INT 0
48071: LESSEQUAL
48072: IFFALSE 47968
// end ;
48074: GO 47937
48076: POP
48077: POP
// end ; if Count ( mpBuildings ) then
48078: LD_EXP 15
48082: PPUSH
48083: CALL 5216 0 1
48087: IFFALSE 48165
// begin for j in mpBuildings [ pos ] do
48089: LD_ADDR_VAR 0 3
48093: PUSH
48094: LD_EXP 15
48098: PUSH
48099: LD_VAR 0 8
48103: ARRAY
48104: PUSH
48105: FOR_IN
48106: IFFALSE 48163
// begin bc_level := 0 ;
48108: LD_ADDR_OWVAR 43
48112: PUSH
48113: LD_INT 0
48115: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48116: LD_ADDR_OWVAR 42
48120: PUSH
48121: LD_VAR 0 3
48125: PUSH
48126: LD_INT 1
48128: ARRAY
48129: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48130: LD_VAR 0 3
48134: PUSH
48135: LD_INT 2
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 3
48143: PUSH
48144: LD_INT 3
48146: ARRAY
48147: PPUSH
48148: LD_VAR 0 3
48152: PUSH
48153: LD_INT 4
48155: ARRAY
48156: PPUSH
48157: CALL_OW 47
// end ;
48161: GO 48105
48163: POP
48164: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48165: LD_EXP 24
48169: IFFALSE 48189
48171: PUSH
48172: LD_INT 20
48174: PPUSH
48175: LD_VAR 0 7
48179: PPUSH
48180: CALL_OW 321
48184: PUSH
48185: LD_INT 1
48187: EQUAL
48188: AND
48189: IFFALSE 48206
// SetTech ( tech_SibDet , side , state_researched ) ;
48191: LD_INT 20
48193: PPUSH
48194: LD_VAR 0 7
48198: PPUSH
48199: LD_INT 2
48201: PPUSH
48202: CALL_OW 322
// if not mpArtifacts then
48206: LD_EXP 42
48210: NOT
48211: IFFALSE 48228
// SetTech ( tech_artifact , side , state_disabled ) ;
48213: LD_INT 24
48215: PPUSH
48216: LD_VAR 0 7
48220: PPUSH
48221: LD_INT 0
48223: PPUSH
48224: CALL_OW 322
// if mpSibBomb = 1 then
48228: LD_EXP 26
48232: PUSH
48233: LD_INT 1
48235: EQUAL
48236: IFFALSE 48255
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48238: LD_INT 25
48240: PPUSH
48241: LD_VAR 0 7
48245: PPUSH
48246: LD_INT 1
48248: PPUSH
48249: CALL_OW 322
// end else
48253: GO 48270
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48255: LD_INT 25
48257: PPUSH
48258: LD_VAR 0 7
48262: PPUSH
48263: LD_INT 0
48265: PPUSH
48266: CALL_OW 322
// end ; if mpVehicles then
48270: LD_EXP 34
48274: IFFALSE 48373
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_VAR 0 7
48285: PPUSH
48286: LD_VAR 0 9
48290: PPUSH
48291: LD_EXP 34
48295: PPUSH
48296: CALL 49596 0 3
48300: PUSH
48301: FOR_IN
48302: IFFALSE 48371
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48304: LD_VAR 0 3
48308: PPUSH
48309: LD_INT 0
48311: PPUSH
48312: LD_INT 5
48314: PPUSH
48315: CALL_OW 12
48319: PPUSH
48320: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48324: LD_VAR 0 3
48328: PPUSH
48329: LD_EXP 19
48333: PUSH
48334: LD_VAR 0 8
48338: ARRAY
48339: PUSH
48340: LD_INT 1
48342: ARRAY
48343: PPUSH
48344: LD_EXP 19
48348: PUSH
48349: LD_VAR 0 8
48353: ARRAY
48354: PUSH
48355: LD_INT 2
48357: ARRAY
48358: PPUSH
48359: LD_INT 12
48361: PPUSH
48362: LD_INT 0
48364: PPUSH
48365: CALL_OW 50
// end ;
48369: GO 48301
48371: POP
48372: POP
// end ; uc_nation := nation ;
48373: LD_ADDR_OWVAR 21
48377: PUSH
48378: LD_VAR 0 9
48382: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48383: LD_EXP 1
48387: PUSH
48388: LD_INT 6
48390: PUSH
48391: LD_INT 7
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: IN
48398: IFFALSE 48423
48400: PUSH
48401: LD_EXP 5
48405: PUSH
48406: LD_VAR 0 2
48410: ARRAY
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: IN
48422: AND
48423: IFFALSE 48471
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48425: LD_ADDR_VAR 0 11
48429: PUSH
48430: LD_VAR 0 7
48434: PPUSH
48435: LD_VAR 0 9
48439: PPUSH
48440: LD_EXP 22
48444: PUSH
48445: LD_EXP 22
48449: PUSH
48450: LD_INT 2
48452: DIV
48453: PLUS
48454: PPUSH
48455: LD_EXP 23
48459: PUSH
48460: LD_INT 1
48462: PLUS
48463: PPUSH
48464: CALL 49087 0 4
48468: ST_TO_ADDR
48469: GO 48501
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48471: LD_ADDR_VAR 0 11
48475: PUSH
48476: LD_VAR 0 7
48480: PPUSH
48481: LD_VAR 0 9
48485: PPUSH
48486: LD_EXP 22
48490: PPUSH
48491: LD_EXP 23
48495: PPUSH
48496: CALL 49087 0 4
48500: ST_TO_ADDR
// for j in team do
48501: LD_ADDR_VAR 0 3
48505: PUSH
48506: LD_VAR 0 11
48510: PUSH
48511: FOR_IN
48512: IFFALSE 48561
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48514: LD_VAR 0 3
48518: PPUSH
48519: LD_EXP 19
48523: PUSH
48524: LD_VAR 0 8
48528: ARRAY
48529: PUSH
48530: LD_INT 1
48532: ARRAY
48533: PPUSH
48534: LD_EXP 19
48538: PUSH
48539: LD_VAR 0 8
48543: ARRAY
48544: PUSH
48545: LD_INT 2
48547: ARRAY
48548: PPUSH
48549: LD_INT 12
48551: PPUSH
48552: LD_INT 0
48554: PPUSH
48555: CALL_OW 50
48559: GO 48511
48561: POP
48562: POP
// if mpApemans then
48563: LD_EXP 28
48567: IFFALSE 48673
// begin for j := 1 to mpApemans do
48569: LD_ADDR_VAR 0 3
48573: PUSH
48574: DOUBLE
48575: LD_INT 1
48577: DEC
48578: ST_TO_ADDR
48579: LD_EXP 28
48583: PUSH
48584: FOR_TO
48585: IFFALSE 48671
// begin PrepareApeman ( - 5 ) ;
48587: LD_INT 5
48589: NEG
48590: PPUSH
48591: CALL 37309 0 1
// ape := CreateHuman ;
48595: LD_ADDR_VAR 0 10
48599: PUSH
48600: CALL_OW 44
48604: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48605: LD_ADDR_EXP 30
48609: PUSH
48610: LD_EXP 30
48614: PPUSH
48615: LD_VAR 0 8
48619: PPUSH
48620: LD_EXP 30
48624: PUSH
48625: LD_VAR 0 8
48629: ARRAY
48630: PPUSH
48631: LD_VAR 0 10
48635: PPUSH
48636: CALL 41182 0 2
48640: PPUSH
48641: CALL_OW 1
48645: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48646: LD_VAR 0 10
48650: PPUSH
48651: LD_EXP 29
48655: PUSH
48656: LD_VAR 0 8
48660: ARRAY
48661: PPUSH
48662: LD_INT 0
48664: PPUSH
48665: CALL_OW 49
// end ;
48669: GO 48584
48671: POP
48672: POP
// end ; end ;
48673: GO 47239
48675: POP
48676: POP
// if not mpTeamGame then
48677: LD_EXP 9
48681: NOT
48682: IFFALSE 48780
// begin for i := 1 to 8 do
48684: LD_ADDR_VAR 0 2
48688: PUSH
48689: DOUBLE
48690: LD_INT 1
48692: DEC
48693: ST_TO_ADDR
48694: LD_INT 8
48696: PUSH
48697: FOR_TO
48698: IFFALSE 48776
// for j := 1 to 8 do
48700: LD_ADDR_VAR 0 3
48704: PUSH
48705: DOUBLE
48706: LD_INT 1
48708: DEC
48709: ST_TO_ADDR
48710: LD_INT 8
48712: PUSH
48713: FOR_TO
48714: IFFALSE 48772
// if i <> j then
48716: LD_VAR 0 2
48720: PUSH
48721: LD_VAR 0 3
48725: NONEQUAL
48726: IFFALSE 48750
// SetAttitude ( i , j , att_neutral , true ) else
48728: LD_VAR 0 2
48732: PPUSH
48733: LD_VAR 0 3
48737: PPUSH
48738: LD_INT 0
48740: PPUSH
48741: LD_INT 1
48743: PPUSH
48744: CALL_OW 80
48748: GO 48770
// SetAttitude ( i , j , att_friend , true ) ;
48750: LD_VAR 0 2
48754: PPUSH
48755: LD_VAR 0 3
48759: PPUSH
48760: LD_INT 1
48762: PPUSH
48763: LD_INT 1
48765: PPUSH
48766: CALL_OW 80
48770: GO 48713
48772: POP
48773: POP
48774: GO 48697
48776: POP
48777: POP
// end else
48778: GO 48955
// begin if mpSharedVision then
48780: LD_EXP 14
48784: IFFALSE 48849
// begin for i in mpTeams do
48786: LD_ADDR_VAR 0 2
48790: PUSH
48791: LD_EXP 8
48795: PUSH
48796: FOR_IN
48797: IFFALSE 48847
// for j := 2 to i do
48799: LD_ADDR_VAR 0 3
48803: PUSH
48804: DOUBLE
48805: LD_INT 2
48807: DEC
48808: ST_TO_ADDR
48809: LD_VAR 0 2
48813: PUSH
48814: FOR_TO
48815: IFFALSE 48843
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48817: LD_VAR 0 2
48821: PUSH
48822: LD_VAR 0 3
48826: ARRAY
48827: PPUSH
48828: LD_VAR 0 2
48832: PUSH
48833: LD_INT 1
48835: ARRAY
48836: PPUSH
48837: CALL_OW 343
48841: GO 48814
48843: POP
48844: POP
48845: GO 48796
48847: POP
48848: POP
// end ; for i := 1 to 8 do
48849: LD_ADDR_VAR 0 2
48853: PUSH
48854: DOUBLE
48855: LD_INT 1
48857: DEC
48858: ST_TO_ADDR
48859: LD_INT 8
48861: PUSH
48862: FOR_TO
48863: IFFALSE 48953
// for j := 1 to 8 do
48865: LD_ADDR_VAR 0 3
48869: PUSH
48870: DOUBLE
48871: LD_INT 1
48873: DEC
48874: ST_TO_ADDR
48875: LD_INT 8
48877: PUSH
48878: FOR_TO
48879: IFFALSE 48949
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48881: LD_EXP 6
48885: PUSH
48886: LD_VAR 0 2
48890: ARRAY
48891: PUSH
48892: LD_EXP 6
48896: PUSH
48897: LD_VAR 0 3
48901: ARRAY
48902: EQUAL
48903: IFFALSE 48927
// SetAttitude ( i , j , att_friend , true ) else
48905: LD_VAR 0 2
48909: PPUSH
48910: LD_VAR 0 3
48914: PPUSH
48915: LD_INT 1
48917: PPUSH
48918: LD_INT 1
48920: PPUSH
48921: CALL_OW 80
48925: GO 48947
// SetAttitude ( i , j , att_enemy , true ) ;
48927: LD_VAR 0 2
48931: PPUSH
48932: LD_VAR 0 3
48936: PPUSH
48937: LD_INT 2
48939: PPUSH
48940: LD_INT 1
48942: PPUSH
48943: CALL_OW 80
48947: GO 48878
48949: POP
48950: POP
48951: GO 48862
48953: POP
48954: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48955: LD_ADDR_OWVAR 71
48959: PUSH
48960: LD_EXP 7
48964: PUSH
48965: LD_OWVAR 2
48969: ARRAY
48970: ST_TO_ADDR
// if IAmSpec then
48971: CALL_OW 531
48975: IFFALSE 49016
// begin FogOff ( true ) ;
48977: LD_INT 1
48979: PPUSH
48980: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48984: LD_EXP 27
48988: PUSH
48989: LD_INT 1
48991: ARRAY
48992: PUSH
48993: LD_INT 2
48995: DIV
48996: PPUSH
48997: LD_EXP 27
49001: PUSH
49002: LD_INT 2
49004: ARRAY
49005: PUSH
49006: LD_INT 2
49008: DIV
49009: PPUSH
49010: CALL_OW 86
// end else
49014: GO 49062
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49016: LD_EXP 19
49020: PUSH
49021: LD_EXP 5
49025: PUSH
49026: LD_OWVAR 2
49030: ARRAY
49031: ARRAY
49032: PUSH
49033: LD_INT 1
49035: ARRAY
49036: PPUSH
49037: LD_EXP 19
49041: PUSH
49042: LD_EXP 5
49046: PUSH
49047: LD_OWVAR 2
49051: ARRAY
49052: ARRAY
49053: PUSH
49054: LD_INT 2
49056: ARRAY
49057: PPUSH
49058: CALL_OW 86
// end ; BeginBuildUp ;
49062: CALL 50129 0 0
// enable ( mpActive ) ;
49066: LD_INT 100
49068: ENABLE_MARKED
// enable ( mpGameType ) ;
49069: LD_EXP 1
49073: ENABLE_MARKED
// mpGameActive := true ;
49074: LD_ADDR_EXP 37
49078: PUSH
49079: LD_INT 1
49081: ST_TO_ADDR
// end ;
49082: LD_VAR 0 1
49086: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
49087: LD_INT 0
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
// result := [ ] ;
49093: LD_ADDR_VAR 0 5
49097: PUSH
49098: EMPTY
49099: ST_TO_ADDR
// class := class_soldier ;
49100: LD_ADDR_VAR 0 8
49104: PUSH
49105: LD_INT 1
49107: ST_TO_ADDR
// uc_side := side ;
49108: LD_ADDR_OWVAR 20
49112: PUSH
49113: LD_VAR 0 1
49117: ST_TO_ADDR
// uc_nation := nation ;
49118: LD_ADDR_OWVAR 21
49122: PUSH
49123: LD_VAR 0 2
49127: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49128: LD_ADDR_OWVAR 26
49132: PUSH
49133: LD_OWVAR 19
49137: PUSH
49138: LD_VAR 0 1
49142: ARRAY
49143: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49144: LD_INT 1
49146: PPUSH
49147: LD_INT 2
49149: PPUSH
49150: CALL_OW 12
49154: PPUSH
49155: LD_VAR 0 8
49159: PPUSH
49160: LD_VAR 0 4
49164: PUSH
49165: LD_INT 2
49167: PLUS
49168: PPUSH
49169: CALL_OW 380
// hc_importance := 105 ;
49173: LD_ADDR_OWVAR 32
49177: PUSH
49178: LD_INT 105
49180: ST_TO_ADDR
// if Multiplayer then
49181: LD_OWVAR 4
49185: IFFALSE 49225
// begin hc_gallery := MULTIAVATARS ;
49187: LD_ADDR_OWVAR 33
49191: PUSH
49192: LD_STRING MULTIAVATARS
49194: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49195: LD_ADDR_OWVAR 34
49199: PUSH
49200: LD_VAR 0 1
49204: PPUSH
49205: CALL_OW 525
49209: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49210: LD_ADDR_OWVAR 27
49214: PUSH
49215: LD_VAR 0 1
49219: PPUSH
49220: CALL_OW 526
49224: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
49225: LD_ADDR_VAR 0 5
49229: PUSH
49230: LD_VAR 0 5
49234: PPUSH
49235: CALL_OW 44
49239: PPUSH
49240: CALL 41182 0 2
49244: ST_TO_ADDR
// if mpTeamPreset then
49245: LD_LOC 1
49249: IFFALSE 49345
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49251: LD_LOC 1
49255: PUSH
49256: LD_INT 1
49258: ARRAY
49259: PPUSH
49260: LD_VAR 0 5
49264: PUSH
49265: LD_VAR 0 5
49269: ARRAY
49270: PPUSH
49271: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49275: LD_VAR 0 5
49279: PUSH
49280: LD_VAR 0 5
49284: ARRAY
49285: PPUSH
49286: LD_INT 1
49288: PPUSH
49289: LD_LOC 1
49293: PUSH
49294: LD_INT 1
49296: ARRAY
49297: PPUSH
49298: LD_INT 1
49300: PPUSH
49301: CALL_OW 260
49305: PPUSH
49306: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49310: LD_VAR 0 5
49314: PUSH
49315: LD_VAR 0 5
49319: ARRAY
49320: PPUSH
49321: LD_INT 2
49323: PPUSH
49324: LD_LOC 1
49328: PUSH
49329: LD_INT 1
49331: ARRAY
49332: PPUSH
49333: LD_INT 2
49335: PPUSH
49336: CALL_OW 260
49340: PPUSH
49341: CALL_OW 239
// end ; InitHc_All ( ) ;
49345: CALL_OW 584
// class := 2 ;
49349: LD_ADDR_VAR 0 8
49353: PUSH
49354: LD_INT 2
49356: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49357: LD_ADDR_VAR 0 6
49361: PUSH
49362: DOUBLE
49363: LD_INT 1
49365: DEC
49366: ST_TO_ADDR
49367: LD_VAR 0 3
49371: PUSH
49372: LD_INT 1
49374: MINUS
49375: PUSH
49376: FOR_TO
49377: IFFALSE 49572
// begin PrepareHuman ( false , class , skill ) ;
49379: LD_INT 0
49381: PPUSH
49382: LD_VAR 0 8
49386: PPUSH
49387: LD_VAR 0 4
49391: PPUSH
49392: CALL_OW 380
// un := CreateHuman ;
49396: LD_ADDR_VAR 0 7
49400: PUSH
49401: CALL_OW 44
49405: ST_TO_ADDR
// result := Join ( result , un ) ;
49406: LD_ADDR_VAR 0 5
49410: PUSH
49411: LD_VAR 0 5
49415: PPUSH
49416: LD_VAR 0 7
49420: PPUSH
49421: CALL 41182 0 2
49425: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49426: LD_LOC 1
49430: PPUSH
49431: CALL 5216 0 1
49435: PUSH
49436: LD_VAR 0 3
49440: GREATEREQUAL
49441: IFFALSE 49537
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49443: LD_LOC 1
49447: PUSH
49448: LD_VAR 0 6
49452: PUSH
49453: LD_INT 1
49455: PLUS
49456: ARRAY
49457: PPUSH
49458: LD_VAR 0 7
49462: PPUSH
49463: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49467: LD_VAR 0 7
49471: PPUSH
49472: LD_INT 1
49474: PPUSH
49475: LD_LOC 1
49479: PUSH
49480: LD_VAR 0 6
49484: PUSH
49485: LD_INT 1
49487: PLUS
49488: ARRAY
49489: PPUSH
49490: LD_INT 1
49492: PPUSH
49493: CALL_OW 260
49497: PPUSH
49498: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49502: LD_VAR 0 7
49506: PPUSH
49507: LD_INT 2
49509: PPUSH
49510: LD_LOC 1
49514: PUSH
49515: LD_VAR 0 6
49519: PUSH
49520: LD_INT 1
49522: PLUS
49523: ARRAY
49524: PPUSH
49525: LD_INT 2
49527: PPUSH
49528: CALL_OW 260
49532: PPUSH
49533: CALL_OW 239
// end ; class := Inc ( class ) ;
49537: LD_ADDR_VAR 0 8
49541: PUSH
49542: LD_VAR 0 8
49546: PPUSH
49547: CALL 42555 0 1
49551: ST_TO_ADDR
// if class = 5 then
49552: LD_VAR 0 8
49556: PUSH
49557: LD_INT 5
49559: EQUAL
49560: IFFALSE 49570
// class := 1 ;
49562: LD_ADDR_VAR 0 8
49566: PUSH
49567: LD_INT 1
49569: ST_TO_ADDR
// end ;
49570: GO 49376
49572: POP
49573: POP
// if not mpTeamPreset then
49574: LD_LOC 1
49578: NOT
49579: IFFALSE 49591
// mpTeamPreset := result ;
49581: LD_ADDR_LOC 1
49585: PUSH
49586: LD_VAR 0 5
49590: ST_TO_ADDR
// end ;
49591: LD_VAR 0 5
49595: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49596: LD_INT 0
49598: PPUSH
49599: PPUSH
// result := [ ] ;
49600: LD_ADDR_VAR 0 4
49604: PUSH
49605: EMPTY
49606: ST_TO_ADDR
// if not vehicles then
49607: LD_VAR 0 3
49611: NOT
49612: IFFALSE 49616
// exit ;
49614: GO 49830
// for i := 1 to vehicles [ nation ] do
49616: LD_ADDR_VAR 0 5
49620: PUSH
49621: DOUBLE
49622: LD_INT 1
49624: DEC
49625: ST_TO_ADDR
49626: LD_VAR 0 3
49630: PUSH
49631: LD_VAR 0 2
49635: ARRAY
49636: PUSH
49637: FOR_TO
49638: IFFALSE 49828
// begin uc_side := side ;
49640: LD_ADDR_OWVAR 20
49644: PUSH
49645: LD_VAR 0 1
49649: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49650: LD_VAR 0 3
49654: PUSH
49655: LD_VAR 0 2
49659: ARRAY
49660: PUSH
49661: LD_VAR 0 5
49665: ARRAY
49666: PPUSH
49667: CALL 5216 0 1
49671: PUSH
49672: LD_INT 4
49674: GREATER
49675: IFFALSE 49705
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49677: LD_ADDR_OWVAR 21
49681: PUSH
49682: LD_VAR 0 3
49686: PUSH
49687: LD_VAR 0 2
49691: ARRAY
49692: PUSH
49693: LD_VAR 0 5
49697: ARRAY
49698: PUSH
49699: LD_INT 5
49701: ARRAY
49702: ST_TO_ADDR
49703: GO 49715
// uc_nation := nation ;
49705: LD_ADDR_OWVAR 21
49709: PUSH
49710: LD_VAR 0 2
49714: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49715: LD_VAR 0 3
49719: PUSH
49720: LD_VAR 0 2
49724: ARRAY
49725: PUSH
49726: LD_VAR 0 5
49730: ARRAY
49731: PUSH
49732: LD_INT 1
49734: ARRAY
49735: PPUSH
49736: LD_VAR 0 3
49740: PUSH
49741: LD_VAR 0 2
49745: ARRAY
49746: PUSH
49747: LD_VAR 0 5
49751: ARRAY
49752: PUSH
49753: LD_INT 2
49755: ARRAY
49756: PPUSH
49757: LD_VAR 0 3
49761: PUSH
49762: LD_VAR 0 2
49766: ARRAY
49767: PUSH
49768: LD_VAR 0 5
49772: ARRAY
49773: PUSH
49774: LD_INT 3
49776: ARRAY
49777: PPUSH
49778: LD_VAR 0 3
49782: PUSH
49783: LD_VAR 0 2
49787: ARRAY
49788: PUSH
49789: LD_VAR 0 5
49793: ARRAY
49794: PUSH
49795: LD_INT 4
49797: ARRAY
49798: PPUSH
49799: LD_INT 80
49801: PPUSH
49802: CALL 8012 0 5
// result := Join ( result , CreateVehicle ) ;
49806: LD_ADDR_VAR 0 4
49810: PUSH
49811: LD_VAR 0 4
49815: PPUSH
49816: CALL_OW 45
49820: PPUSH
49821: CALL 41182 0 2
49825: ST_TO_ADDR
// end ;
49826: GO 49637
49828: POP
49829: POP
// end ;
49830: LD_VAR 0 4
49834: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49835: LD_INT 0
49837: PPUSH
49838: PPUSH
// for i in mpBattleFlags do
49839: LD_ADDR_VAR 0 3
49843: PUSH
49844: LD_EXP 21
49848: PUSH
49849: FOR_IN
49850: IFFALSE 49927
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49852: LD_VAR 0 3
49856: PPUSH
49857: LD_INT 1
49859: PUSH
49860: LD_VAR 0 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: PUSH
49872: LD_VAR 0 1
49876: PUSH
49877: LD_REAL  7.00000000000000E-0001
49880: MUL
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 3
49888: PUSH
49889: LD_VAR 0 1
49893: PUSH
49894: LD_REAL  4.00000000000000E-0001
49897: MUL
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 20
49905: PUSH
49906: LD_VAR 0 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: PPUSH
49921: CALL_OW 423
49925: GO 49849
49927: POP
49928: POP
// end ;
49929: LD_VAR 0 2
49933: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49934: LD_INT 100
49936: IFFALSE 50031
49938: GO 49940
49940: DISABLE
49941: LD_INT 0
49943: PPUSH
49944: PPUSH
// begin if mpBattleFlag <= 0 then
49945: LD_EXP 20
49949: PUSH
49950: LD_INT 0
49952: LESSEQUAL
49953: IFFALSE 49957
// exit ;
49955: GO 50031
// strength := 100 ;
49957: LD_ADDR_VAR 0 2
49961: PUSH
49962: LD_INT 100
49964: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49965: LD_EXP 20
49969: PPUSH
49970: CALL_OW 67
// strength := Dec ( strength ) ;
49974: LD_ADDR_VAR 0 2
49978: PUSH
49979: LD_VAR 0 2
49983: PPUSH
49984: CALL 42577 0 1
49988: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49989: LD_VAR 0 2
49993: PPUSH
49994: CALL 49835 0 1
// until not strength ;
49998: LD_VAR 0 2
50002: NOT
50003: IFFALSE 49965
// for i in mpBattleFlags do
50005: LD_ADDR_VAR 0 1
50009: PUSH
50010: LD_EXP 21
50014: PUSH
50015: FOR_IN
50016: IFFALSE 50029
// KillBattleFlag ( i ) ;
50018: LD_VAR 0 1
50022: PPUSH
50023: CALL_OW 419
50027: GO 50015
50029: POP
50030: POP
// end ;
50031: PPOPN 2
50033: END
// every 0 0$1 marked mpActive do var side , tmp ;
50034: GO 50036
50036: DISABLE
50037: LD_INT 0
50039: PPUSH
50040: PPUSH
// begin if mpSibBomb <= 1 then
50041: LD_EXP 26
50045: PUSH
50046: LD_INT 1
50048: LESSEQUAL
50049: IFFALSE 50053
// exit ;
50051: GO 50126
// tmp := mpSibBomb ;
50053: LD_ADDR_VAR 0 2
50057: PUSH
50058: LD_EXP 26
50062: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50063: LD_INT 35
50065: PPUSH
50066: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50070: LD_ADDR_VAR 0 2
50074: PUSH
50075: LD_VAR 0 2
50079: PUSH
50080: LD_INT 35
50082: MINUS
50083: ST_TO_ADDR
// until not tmp ;
50084: LD_VAR 0 2
50088: NOT
50089: IFFALSE 50063
// for side := 1 to 8 do
50091: LD_ADDR_VAR 0 1
50095: PUSH
50096: DOUBLE
50097: LD_INT 1
50099: DEC
50100: ST_TO_ADDR
50101: LD_INT 8
50103: PUSH
50104: FOR_TO
50105: IFFALSE 50124
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50107: LD_INT 25
50109: PPUSH
50110: LD_VAR 0 1
50114: PPUSH
50115: LD_INT 1
50117: PPUSH
50118: CALL_OW 322
50122: GO 50104
50124: POP
50125: POP
// end ;
50126: PPOPN 2
50128: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50129: LD_INT 0
50131: PPUSH
50132: PPUSH
50133: PPUSH
// mpBuildUpTimeDelay := 0 ;
50134: LD_ADDR_EXP 45
50138: PUSH
50139: LD_INT 0
50141: ST_TO_ADDR
// if not mpBuildUpTime then
50142: LD_EXP 18
50146: NOT
50147: IFFALSE 50151
// exit ;
50149: GO 50340
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50151: LD_ADDR_EXP 45
50155: PUSH
50156: LD_INT 8400
50158: PUSH
50159: LD_INT 2100
50161: PUSH
50162: LD_EXP 18
50166: MUL
50167: PLUS
50168: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50169: LD_ADDR_EXP 46
50173: PUSH
50174: LD_INT 1
50176: ST_TO_ADDR
// for i := 1 to 8 do
50177: LD_ADDR_VAR 0 2
50181: PUSH
50182: DOUBLE
50183: LD_INT 1
50185: DEC
50186: ST_TO_ADDR
50187: LD_INT 8
50189: PUSH
50190: FOR_TO
50191: IFFALSE 50338
// if mpSidePositions [ i ] then
50193: LD_EXP 5
50197: PUSH
50198: LD_VAR 0 2
50202: ARRAY
50203: IFFALSE 50336
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50205: LD_EXP 17
50209: PUSH
50210: LD_EXP 5
50214: PUSH
50215: LD_VAR 0 2
50219: ARRAY
50220: ARRAY
50221: PPUSH
50222: LD_INT 5
50224: PPUSH
50225: CALL_OW 424
// for j := 1 to 8 do
50229: LD_ADDR_VAR 0 3
50233: PUSH
50234: DOUBLE
50235: LD_INT 1
50237: DEC
50238: ST_TO_ADDR
50239: LD_INT 8
50241: PUSH
50242: FOR_TO
50243: IFFALSE 50334
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50245: LD_EXP 5
50249: PUSH
50250: LD_VAR 0 3
50254: ARRAY
50255: IFFALSE 50304
50257: PUSH
50258: LD_EXP 6
50262: PUSH
50263: LD_VAR 0 2
50267: ARRAY
50268: PUSH
50269: LD_EXP 6
50273: PUSH
50274: LD_VAR 0 3
50278: ARRAY
50279: NONEQUAL
50280: IFTRUE 50303
50282: PUSH
50283: LD_EXP 9
50287: NOT
50288: IFFALSE 50302
50290: PUSH
50291: LD_VAR 0 2
50295: PUSH
50296: LD_VAR 0 3
50300: NONEQUAL
50301: AND
50302: OR
50303: AND
50304: IFFALSE 50332
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50306: LD_VAR 0 3
50310: PPUSH
50311: LD_EXP 17
50315: PUSH
50316: LD_EXP 5
50320: PUSH
50321: LD_VAR 0 2
50325: ARRAY
50326: ARRAY
50327: PPUSH
50328: CALL_OW 333
50332: GO 50242
50334: POP
50335: POP
// end ;
50336: GO 50190
50338: POP
50339: POP
// end ;
50340: LD_VAR 0 1
50344: RET
// function EndBuildUp ; var i , j ; begin
50345: LD_INT 0
50347: PPUSH
50348: PPUSH
50349: PPUSH
// mpBuildUpTimeActive := false ;
50350: LD_ADDR_EXP 46
50354: PUSH
50355: LD_INT 0
50357: ST_TO_ADDR
// for i := 1 to 8 do
50358: LD_ADDR_VAR 0 2
50362: PUSH
50363: DOUBLE
50364: LD_INT 1
50366: DEC
50367: ST_TO_ADDR
50368: LD_INT 8
50370: PUSH
50371: FOR_TO
50372: IFFALSE 50519
// if mpSidePositions [ i ] then
50374: LD_EXP 5
50378: PUSH
50379: LD_VAR 0 2
50383: ARRAY
50384: IFFALSE 50517
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50386: LD_EXP 17
50390: PUSH
50391: LD_EXP 5
50395: PUSH
50396: LD_VAR 0 2
50400: ARRAY
50401: ARRAY
50402: PPUSH
50403: LD_INT 0
50405: PPUSH
50406: CALL_OW 424
// for j := 1 to 8 do
50410: LD_ADDR_VAR 0 3
50414: PUSH
50415: DOUBLE
50416: LD_INT 1
50418: DEC
50419: ST_TO_ADDR
50420: LD_INT 8
50422: PUSH
50423: FOR_TO
50424: IFFALSE 50515
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50426: LD_EXP 5
50430: PUSH
50431: LD_VAR 0 3
50435: ARRAY
50436: IFFALSE 50485
50438: PUSH
50439: LD_EXP 6
50443: PUSH
50444: LD_VAR 0 2
50448: ARRAY
50449: PUSH
50450: LD_EXP 6
50454: PUSH
50455: LD_VAR 0 3
50459: ARRAY
50460: NONEQUAL
50461: IFTRUE 50484
50463: PUSH
50464: LD_EXP 9
50468: NOT
50469: IFFALSE 50483
50471: PUSH
50472: LD_VAR 0 2
50476: PUSH
50477: LD_VAR 0 3
50481: NONEQUAL
50482: AND
50483: OR
50484: AND
50485: IFFALSE 50513
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50487: LD_VAR 0 3
50491: PPUSH
50492: LD_EXP 17
50496: PUSH
50497: LD_EXP 5
50501: PUSH
50502: LD_VAR 0 2
50506: ARRAY
50507: ARRAY
50508: PPUSH
50509: CALL_OW 334
50513: GO 50423
50515: POP
50516: POP
// end ;
50517: GO 50371
50519: POP
50520: POP
// end ;
50521: LD_VAR 0 1
50525: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50526: LD_EXP 46
50530: IFFALSE 50709
50532: GO 50534
50534: DISABLE
50535: LD_INT 0
50537: PPUSH
50538: PPUSH
// begin for i := 1 to 8 do
50539: LD_ADDR_VAR 0 1
50543: PUSH
50544: DOUBLE
50545: LD_INT 1
50547: DEC
50548: ST_TO_ADDR
50549: LD_INT 8
50551: PUSH
50552: FOR_TO
50553: IFFALSE 50706
// if mpSidePositions [ i ] then
50555: LD_EXP 5
50559: PUSH
50560: LD_VAR 0 1
50564: ARRAY
50565: IFFALSE 50704
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50567: LD_ADDR_VAR 0 2
50571: PUSH
50572: LD_EXP 17
50576: PUSH
50577: LD_EXP 5
50581: PUSH
50582: LD_VAR 0 1
50586: ARRAY
50587: ARRAY
50588: PPUSH
50589: LD_INT 2
50591: PUSH
50592: LD_INT 21
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 21
50604: PUSH
50605: LD_INT 2
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 22
50619: PUSH
50620: LD_OWVAR 2
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PPUSH
50633: CALL_OW 70
50637: PUSH
50638: FOR_IN
50639: IFFALSE 50702
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50641: LD_EXP 6
50645: PUSH
50646: LD_VAR 0 1
50650: ARRAY
50651: PUSH
50652: LD_EXP 6
50656: PUSH
50657: LD_OWVAR 2
50661: ARRAY
50662: NONEQUAL
50663: IFTRUE 50686
50665: PUSH
50666: LD_EXP 9
50670: NOT
50671: IFFALSE 50685
50673: PUSH
50674: LD_VAR 0 1
50678: PUSH
50679: LD_OWVAR 2
50683: NONEQUAL
50684: AND
50685: OR
50686: IFFALSE 50700
// ComMoveToArea ( un , BuildUpEscape ) ;
50688: LD_VAR 0 2
50692: PPUSH
50693: LD_INT 72
50695: PPUSH
50696: CALL_OW 113
50700: GO 50638
50702: POP
50703: POP
50704: GO 50552
50706: POP
50707: POP
// enable ;
50708: ENABLE
// end ;
50709: PPOPN 2
50711: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50712: LD_EXP 18
50716: IFFALSE 50766
50718: GO 50720
50720: DISABLE
50721: LD_INT 0
50723: PPUSH
// begin tmp := mpBuildUpTime ;
50724: LD_ADDR_VAR 0 1
50728: PUSH
50729: LD_EXP 18
50733: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50734: LD_INT 35
50736: PPUSH
50737: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50741: LD_ADDR_VAR 0 1
50745: PUSH
50746: LD_VAR 0 1
50750: PUSH
50751: LD_INT 35
50753: MINUS
50754: ST_TO_ADDR
// until not tmp ;
50755: LD_VAR 0 1
50759: NOT
50760: IFFALSE 50734
// EndBuildUp ;
50762: CALL 50345 0 0
// end ;
50766: PPOPN 1
50768: END
// every 0 0$1 trigger mpActive marked mpWin do
50769: LD_INT 100
50771: IFFALSE 50805
50773: GO 50775
50775: DISABLE
// begin if IAmServer then
50776: CALL_OW 518
50780: IFFALSE 50789
// wait ( 0 0$3 ) ;
50782: LD_INT 105
50784: PPUSH
50785: CALL_OW 67
// if Multiplayer then
50789: LD_OWVAR 4
50793: IFFALSE 50801
// YouWinInMultiplayer else
50795: CALL_OW 106
50799: GO 50805
// YouWin ;
50801: CALL_OW 103
// end ;
50805: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50806: LD_INT 0
50808: PPUSH
// result := false ;
50809: LD_ADDR_VAR 0 3
50813: PUSH
50814: LD_INT 0
50816: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50817: LD_VAR 0 1
50821: PUSH
50822: LD_INT 1
50824: DOUBLE
50825: EQUAL
50826: IFTRUE 50848
50828: LD_INT 5
50830: DOUBLE
50831: EQUAL
50832: IFTRUE 50848
50834: LD_INT 6
50836: DOUBLE
50837: EQUAL
50838: IFTRUE 50848
50840: LD_INT 7
50842: DOUBLE
50843: EQUAL
50844: IFTRUE 50848
50846: GO 50921
50848: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50849: LD_ADDR_VAR 0 3
50853: PUSH
50854: LD_INT 22
50856: PUSH
50857: LD_VAR 0 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: LD_INT 21
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 33
50881: PUSH
50882: LD_INT 3
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 33
50891: PUSH
50892: LD_INT 5
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PPUSH
50909: CALL_OW 69
50913: PPUSH
50914: CALL 5216 0 1
50918: ST_TO_ADDR
// end ; GameTypeSurvival :
50919: GO 51160
50921: LD_INT 2
50923: DOUBLE
50924: EQUAL
50925: IFTRUE 50929
50927: GO 51059
50929: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50930: LD_ADDR_VAR 0 3
50934: PUSH
50935: LD_INT 22
50937: PUSH
50938: LD_VAR 0 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: PUSH
50950: LD_INT 30
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 30
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PPUSH
50979: CALL_OW 69
50983: PPUSH
50984: CALL 5216 0 1
50988: IFFALSE 51056
50990: PUSH
50991: LD_INT 22
50993: PUSH
50994: LD_VAR 0 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 21
51008: PUSH
51009: LD_INT 1
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 33
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 33
51028: PUSH
51029: LD_INT 5
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PPUSH
51046: CALL_OW 69
51050: PPUSH
51051: CALL 5216 0 1
51055: AND
51056: ST_TO_ADDR
// end ; GameTypeKing :
51057: GO 51160
51059: LD_INT 3
51061: DOUBLE
51062: EQUAL
51063: IFTRUE 51067
51065: GO 51159
51067: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51068: LD_ADDR_VAR 0 3
51072: PUSH
51073: LD_INT 22
51075: PUSH
51076: LD_VAR 0 2
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 21
51090: PUSH
51091: LD_INT 1
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 33
51100: PUSH
51101: LD_INT 3
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 33
51110: PUSH
51111: LD_INT 5
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PPUSH
51128: CALL_OW 69
51132: PPUSH
51133: CALL 5216 0 1
51137: IFFALSE 51156
51139: PUSH
51140: LD_VAR 0 2
51144: PPUSH
51145: CALL 55438 0 1
51149: PUSH
51150: LD_EXP 33
51154: LESS
51155: AND
51156: ST_TO_ADDR
// end ; end ;
51157: GO 51160
51159: POP
// end ;
51160: LD_VAR 0 3
51164: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51165: LD_INT 100
51167: IFFALSE 51397
51169: GO 51171
51171: DISABLE
51172: LD_INT 0
51174: PPUSH
51175: PPUSH
// begin if Multiplayer then
51176: LD_OWVAR 4
51180: IFFALSE 51188
// SetPlayerSpectator ( ) else
51182: CALL_OW 572
51186: GO 51197
// FogOff ( your_side ) ;
51188: LD_OWVAR 2
51192: PPUSH
51193: CALL_OW 344
// repeat gameIsOn := false ;
51197: LD_ADDR_VAR 0 1
51201: PUSH
51202: LD_INT 0
51204: ST_TO_ADDR
// for i := 1 to 8 do
51205: LD_ADDR_VAR 0 2
51209: PUSH
51210: DOUBLE
51211: LD_INT 1
51213: DEC
51214: ST_TO_ADDR
51215: LD_INT 8
51217: PUSH
51218: FOR_TO
51219: IFFALSE 51349
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51221: LD_EXP 5
51225: PUSH
51226: LD_VAR 0 2
51230: ARRAY
51231: IFFALSE 51244
51233: PUSH
51234: LD_VAR 0 2
51238: PPUSH
51239: CALL_OW 108
51243: AND
51244: IFFALSE 51258
51246: PUSH
51247: LD_VAR 0 2
51251: PUSH
51252: LD_OWVAR 2
51256: NONEQUAL
51257: AND
51258: IFFALSE 51347
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51260: LD_EXP 6
51264: PUSH
51265: LD_VAR 0 2
51269: ARRAY
51270: NOT
51271: IFTRUE 51319
51273: PUSH
51274: LD_EXP 6
51278: PUSH
51279: LD_VAR 0 2
51283: ARRAY
51284: PUSH
51285: LD_EXP 6
51289: PUSH
51290: LD_OWVAR 2
51294: ARRAY
51295: NONEQUAL
51296: IFFALSE 51318
51298: PUSH
51299: LD_OWVAR 2
51303: PPUSH
51304: LD_VAR 0 2
51308: PPUSH
51309: CALL_OW 81
51313: PUSH
51314: LD_INT 1
51316: NONEQUAL
51317: AND
51318: OR
51319: IFFALSE 51347
// if HasPowerByGameType ( mpGameType , i ) then
51321: LD_EXP 1
51325: PPUSH
51326: LD_VAR 0 2
51330: PPUSH
51331: CALL 50806 0 2
51335: IFFALSE 51347
// begin gameIsOn := true ;
51337: LD_ADDR_VAR 0 1
51341: PUSH
51342: LD_INT 1
51344: ST_TO_ADDR
// break ;
51345: GO 51349
// end ;
51347: GO 51218
51349: POP
51350: POP
// wait ( 100 ) ;
51351: LD_INT 100
51353: PPUSH
51354: CALL_OW 67
// until not gameIsOn ;
51358: LD_VAR 0 1
51362: NOT
51363: IFFALSE 51197
// if IAmServer then
51365: CALL_OW 518
51369: IFFALSE 51378
// wait ( 0 0$3 ) ;
51371: LD_INT 105
51373: PPUSH
51374: CALL_OW 67
// if Multiplayer then
51378: LD_OWVAR 4
51382: IFFALSE 51390
// YouLostInMultiplayer else
51384: CALL_OW 107
51388: GO 51397
// YouLost (  ) ;
51390: LD_STRING 
51392: PPUSH
51393: CALL_OW 104
// end ;
51397: PPOPN 2
51399: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51400: LD_EXP 31
51404: IFFALSE 51788
51406: GO 51408
51408: DISABLE
51409: LD_INT 0
51411: PPUSH
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51416: LD_ADDR_VAR 0 5
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 3
51429: PUSH
51430: LD_INT 4
51432: PUSH
51433: LD_INT 5
51435: PUSH
51436: LD_INT 6
51438: PUSH
51439: LD_INT 7
51441: PUSH
51442: LD_INT 8
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51455: LD_INT 350
51457: PPUSH
51458: CALL_OW 67
// for i := 1 to 8 do
51462: LD_ADDR_VAR 0 1
51466: PUSH
51467: DOUBLE
51468: LD_INT 1
51470: DEC
51471: ST_TO_ADDR
51472: LD_INT 8
51474: PUSH
51475: FOR_TO
51476: IFFALSE 51758
// begin j := sides [ i ] ;
51478: LD_ADDR_VAR 0 2
51482: PUSH
51483: LD_VAR 0 5
51487: PUSH
51488: LD_VAR 0 1
51492: ARRAY
51493: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51494: LD_EXP 38
51498: PUSH
51499: LD_VAR 0 2
51503: ARRAY
51504: PPUSH
51505: CALL 5216 0 1
51509: IFFALSE 51522
51511: PUSH
51512: LD_VAR 0 2
51516: PPUSH
51517: CALL_OW 108
51521: AND
51522: IFFALSE 51540
51524: PUSH
51525: LD_EXP 1
51529: PPUSH
51530: LD_VAR 0 2
51534: PPUSH
51535: CALL 50806 0 2
51539: AND
51540: IFFALSE 51756
// begin wait ( mpRespawn div 2 ) ;
51542: LD_EXP 31
51546: PUSH
51547: LD_INT 2
51549: DIV
51550: PPUSH
51551: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51555: LD_ADDR_VAR 0 3
51559: PUSH
51560: LD_INT 22
51562: PUSH
51563: LD_VAR 0 2
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 50
51574: PUSH
51575: EMPTY
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 30
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 30
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: PPUSH
51611: CALL_OW 69
51615: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51616: LD_VAR 0 3
51620: NOT
51621: IFTRUE 51635
51623: PUSH
51624: LD_VAR 0 2
51628: PPUSH
51629: CALL_OW 108
51633: NOT
51634: OR
51635: IFTRUE 51654
51637: PUSH
51638: LD_EXP 1
51642: PPUSH
51643: LD_VAR 0 2
51647: PPUSH
51648: CALL 50806 0 2
51652: NOT
51653: OR
51654: IFFALSE 51658
// continue ;
51656: GO 51475
// spawn := tmp [ 1 ] ;
51658: LD_ADDR_VAR 0 4
51662: PUSH
51663: LD_VAR 0 3
51667: PUSH
51668: LD_INT 1
51670: ARRAY
51671: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51672: LD_EXP 38
51676: PUSH
51677: LD_VAR 0 2
51681: ARRAY
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: PPUSH
51687: LD_VAR 0 4
51691: PPUSH
51692: CALL_OW 250
51696: PPUSH
51697: LD_VAR 0 4
51701: PPUSH
51702: CALL_OW 251
51706: PPUSH
51707: LD_INT 32
51709: PPUSH
51710: LD_INT 1
51712: PPUSH
51713: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51717: LD_ADDR_EXP 38
51721: PUSH
51722: LD_EXP 38
51726: PPUSH
51727: LD_VAR 0 2
51731: PPUSH
51732: LD_EXP 38
51736: PUSH
51737: LD_VAR 0 2
51741: ARRAY
51742: PPUSH
51743: LD_INT 1
51745: PPUSH
51746: CALL_OW 3
51750: PPUSH
51751: CALL_OW 1
51755: ST_TO_ADDR
// end ; end ;
51756: GO 51475
51758: POP
51759: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51760: LD_ADDR_VAR 0 5
51764: PUSH
51765: LD_VAR 0 5
51769: PPUSH
51770: LD_INT 1
51772: PPUSH
51773: LD_INT 8
51775: PPUSH
51776: LD_INT 1
51778: PPUSH
51779: CALL 7542 0 4
51783: ST_TO_ADDR
// until false ;
51784: LD_INT 0
51786: IFFALSE 51455
// end ;
51788: PPOPN 5
51790: END
// every 0 0$1 marked mpActive do
51791: GO 51793
51793: DISABLE
// begin enable ;
51794: ENABLE
// if not mpDisplayStrings then
51795: LD_EXP 36
51799: NOT
51800: IFFALSE 51811
// begin display_strings := [ ] ;
51802: LD_ADDR_OWVAR 47
51806: PUSH
51807: EMPTY
51808: ST_TO_ADDR
// exit ;
51809: GO 51821
// end ; display_strings := mpDisplayStrings ;
51811: LD_ADDR_OWVAR 47
51815: PUSH
51816: LD_EXP 36
51820: ST_TO_ADDR
// end ; end_of_file
51821: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51822: LD_INT 0
51824: PPUSH
51825: PPUSH
51826: PPUSH
51827: PPUSH
51828: PPUSH
51829: PPUSH
51830: PPUSH
51831: PPUSH
51832: PPUSH
// if GetType ( un ) = unit_vehicle then
51833: LD_VAR 0 1
51837: PPUSH
51838: CALL_OW 247
51842: PUSH
51843: LD_INT 2
51845: EQUAL
51846: IFFALSE 51850
// exit ;
51848: GO 52524
// side := GetSide ( un ) ;
51850: LD_ADDR_VAR 0 9
51854: PUSH
51855: LD_VAR 0 1
51859: PPUSH
51860: CALL_OW 255
51864: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51865: LD_EXP 1
51869: PUSH
51870: LD_INT 2
51872: EQUAL
51873: IFFALSE 51967
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51875: LD_VAR 0 1
51879: PPUSH
51880: CALL_OW 266
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: IN
51895: IFFALSE 51967
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51897: LD_ADDR_VAR 0 3
51901: PUSH
51902: LD_INT 22
51904: PUSH
51905: LD_VAR 0 9
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 21
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 33
51929: PUSH
51930: LD_INT 3
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: LIST
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PPUSH
51946: CALL_OW 69
51950: PUSH
51951: FOR_IN
51952: IFFALSE 51965
// KillUnit ( i ) ;
51954: LD_VAR 0 3
51958: PPUSH
51959: CALL_OW 66
51963: GO 51951
51965: POP
51966: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51967: LD_VAR 0 1
51971: PPUSH
51972: CALL_OW 257
51976: PUSH
51977: LD_INT 12
51979: PUSH
51980: LD_INT 17
51982: PUSH
51983: LD_INT 15
51985: PUSH
51986: LD_INT 16
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: IN
51995: IFTRUE 52012
51997: PUSH
51998: LD_VAR 0 1
52002: PPUSH
52003: CALL_OW 263
52007: PUSH
52008: LD_INT 5
52010: EQUAL
52011: OR
52012: IFFALSE 52249
// begin tag := 0 ;
52014: LD_ADDR_VAR 0 5
52018: PUSH
52019: LD_INT 0
52021: ST_TO_ADDR
// for i := 1 to 8 do
52022: LD_ADDR_VAR 0 3
52026: PUSH
52027: DOUBLE
52028: LD_INT 1
52030: DEC
52031: ST_TO_ADDR
52032: LD_INT 8
52034: PUSH
52035: FOR_TO
52036: IFFALSE 52070
// if un in mpApePosIndex [ i ] then
52038: LD_VAR 0 1
52042: PUSH
52043: LD_EXP 30
52047: PUSH
52048: LD_VAR 0 3
52052: ARRAY
52053: IN
52054: IFFALSE 52068
// begin tag := i ;
52056: LD_ADDR_VAR 0 5
52060: PUSH
52061: LD_VAR 0 3
52065: ST_TO_ADDR
// break ;
52066: GO 52070
// end ;
52068: GO 52035
52070: POP
52071: POP
// if not tag then
52072: LD_VAR 0 5
52076: NOT
52077: IFFALSE 52081
// exit ;
52079: GO 52524
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52081: LD_ADDR_VAR 0 7
52085: PUSH
52086: LD_EXP 29
52090: PUSH
52091: LD_EXP 5
52095: PUSH
52096: LD_VAR 0 5
52100: ARRAY
52101: ARRAY
52102: ST_TO_ADDR
// if not area then
52103: LD_VAR 0 7
52107: NOT
52108: IFFALSE 52112
// exit ;
52110: GO 52524
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52112: LD_INT 14700
52114: PUSH
52115: LD_VAR 0 1
52119: PUSH
52120: LD_INT 5
52122: MOD
52123: PUSH
52124: LD_INT 1
52126: PLUS
52127: PUSH
52128: LD_INT 700
52130: MUL
52131: PLUS
52132: PPUSH
52133: CALL_OW 67
// repeat wait ( 10 ) ;
52137: LD_INT 10
52139: PPUSH
52140: CALL_OW 67
// until not mpBlockRespThread ;
52144: LD_EXP 44
52148: NOT
52149: IFFALSE 52137
// mpBlockRespThread := true ;
52151: LD_ADDR_EXP 44
52155: PUSH
52156: LD_INT 1
52158: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52159: LD_INT 0
52161: PPUSH
52162: CALL 37309 0 1
// ape := CreateHuman ;
52166: LD_ADDR_VAR 0 4
52170: PUSH
52171: CALL_OW 44
52175: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52176: LD_ADDR_EXP 30
52180: PUSH
52181: LD_EXP 30
52185: PPUSH
52186: LD_VAR 0 5
52190: PPUSH
52191: LD_EXP 30
52195: PUSH
52196: LD_VAR 0 5
52200: ARRAY
52201: PPUSH
52202: LD_VAR 0 4
52206: PPUSH
52207: CALL 41182 0 2
52211: PPUSH
52212: CALL_OW 1
52216: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52217: LD_VAR 0 4
52221: PPUSH
52222: LD_VAR 0 7
52226: PPUSH
52227: LD_INT 0
52229: PPUSH
52230: CALL_OW 49
// wait ( 10 ) ;
52234: LD_INT 10
52236: PPUSH
52237: CALL_OW 67
// mpBlockRespThread := false ;
52241: LD_ADDR_EXP 44
52245: PUSH
52246: LD_INT 0
52248: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52249: LD_VAR 0 1
52253: PPUSH
52254: CALL_OW 247
52258: PUSH
52259: LD_INT 1
52261: EQUAL
52262: IFFALSE 52279
52264: PUSH
52265: LD_VAR 0 1
52269: PPUSH
52270: CALL_OW 248
52274: PUSH
52275: LD_INT 0
52277: GREATER
52278: AND
52279: IFFALSE 52524
// begin if not mpRespawn then
52281: LD_EXP 31
52285: NOT
52286: IFFALSE 52290
// exit ;
52288: GO 52524
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52290: LD_VAR 0 9
52294: PPUSH
52295: CALL_OW 108
52299: NOT
52300: IFFALSE 52319
52302: PUSH
52303: LD_EXP 1
52307: PPUSH
52308: LD_VAR 0 9
52312: PPUSH
52313: CALL 50806 0 2
52317: NOT
52318: AND
52319: IFFALSE 52323
// exit ;
52321: GO 52524
// side := GetSide ( un ) ;
52323: LD_ADDR_VAR 0 9
52327: PUSH
52328: LD_VAR 0 1
52332: PPUSH
52333: CALL_OW 255
52337: ST_TO_ADDR
// nation := GetNation ( un ) ;
52338: LD_ADDR_VAR 0 8
52342: PUSH
52343: LD_VAR 0 1
52347: PPUSH
52348: CALL_OW 248
52352: ST_TO_ADDR
// class := GetClass ( un ) ;
52353: LD_ADDR_VAR 0 6
52357: PUSH
52358: LD_VAR 0 1
52362: PPUSH
52363: CALL_OW 257
52367: ST_TO_ADDR
// if class > 4 then
52368: LD_VAR 0 6
52372: PUSH
52373: LD_INT 4
52375: GREATER
52376: IFFALSE 52386
// class := 1 ;
52378: LD_ADDR_VAR 0 6
52382: PUSH
52383: LD_INT 1
52385: ST_TO_ADDR
// repeat wait ( 10 ) ;
52386: LD_INT 10
52388: PPUSH
52389: CALL_OW 67
// until not mpBlockRespThread ;
52393: LD_EXP 44
52397: NOT
52398: IFFALSE 52386
// mpBlockRespThread := true ;
52400: LD_ADDR_EXP 44
52404: PUSH
52405: LD_INT 1
52407: ST_TO_ADDR
// uc_side := side ;
52408: LD_ADDR_OWVAR 20
52412: PUSH
52413: LD_VAR 0 9
52417: ST_TO_ADDR
// uc_nation := nation ;
52418: LD_ADDR_OWVAR 21
52422: PUSH
52423: LD_VAR 0 8
52427: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52428: LD_INT 0
52430: PPUSH
52431: LD_VAR 0 6
52435: PPUSH
52436: LD_INT 2
52438: PPUSH
52439: CALL_OW 380
// un := CreateHuman ;
52443: LD_ADDR_VAR 0 1
52447: PUSH
52448: CALL_OW 44
52452: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52453: LD_ADDR_EXP 38
52457: PUSH
52458: LD_EXP 38
52462: PPUSH
52463: LD_VAR 0 9
52467: PPUSH
52468: LD_EXP 38
52472: PUSH
52473: LD_VAR 0 9
52477: ARRAY
52478: PPUSH
52479: LD_EXP 38
52483: PUSH
52484: LD_VAR 0 9
52488: ARRAY
52489: PUSH
52490: LD_INT 1
52492: PLUS
52493: PPUSH
52494: LD_VAR 0 1
52498: PPUSH
52499: CALL_OW 1
52503: PPUSH
52504: CALL_OW 1
52508: ST_TO_ADDR
// wait ( 10 ) ;
52509: LD_INT 10
52511: PPUSH
52512: CALL_OW 67
// mpBlockRespThread := false ;
52516: LD_ADDR_EXP 44
52520: PUSH
52521: LD_INT 0
52523: ST_TO_ADDR
// end ; end ;
52524: LD_VAR 0 2
52528: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52529: LD_INT 0
52531: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52532: LD_VAR 0 1
52536: PPUSH
52537: CALL_OW 266
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: IN
52552: IFFALSE 52577
// SetBName ( building , @ & GetSide ( building ) ) ;
52554: LD_VAR 0 1
52558: PPUSH
52559: LD_STRING @
52561: PUSH
52562: LD_VAR 0 1
52566: PPUSH
52567: CALL_OW 255
52571: STR
52572: PPUSH
52573: CALL_OW 500
// end ;
52577: LD_VAR 0 2
52581: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52582: LD_INT 0
52584: PPUSH
52585: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52586: LD_EXP 1
52590: PUSH
52591: LD_INT 2
52593: EQUAL
52594: IFFALSE 52618
52596: PUSH
52597: LD_VAR 0 1
52601: PPUSH
52602: CALL_OW 266
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: IN
52617: AND
52618: IFFALSE 52697
// begin SetSide ( building , oldSide ) ;
52620: LD_VAR 0 1
52624: PPUSH
52625: LD_VAR 0 2
52629: PPUSH
52630: CALL_OW 235
// KillUnit ( building ) ;
52634: LD_VAR 0 1
52638: PPUSH
52639: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52643: LD_ADDR_VAR 0 5
52647: PUSH
52648: LD_INT 22
52650: PUSH
52651: LD_VAR 0 2
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 21
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PPUSH
52674: CALL_OW 69
52678: PUSH
52679: FOR_IN
52680: IFFALSE 52693
// KillUnit ( i ) ;
52682: LD_VAR 0 5
52686: PPUSH
52687: CALL_OW 66
52691: GO 52679
52693: POP
52694: POP
// exit ;
52695: GO 52742
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52697: LD_VAR 0 1
52701: PPUSH
52702: CALL_OW 266
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 1
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: IN
52717: IFFALSE 52742
// SetBName ( building , @ & GetSide ( building ) ) ;
52719: LD_VAR 0 1
52723: PPUSH
52724: LD_STRING @
52726: PUSH
52727: LD_VAR 0 1
52731: PPUSH
52732: CALL_OW 255
52736: STR
52737: PPUSH
52738: CALL_OW 500
// end ;
52742: LD_VAR 0 4
52746: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52747: LD_INT 0
52749: PPUSH
52750: PPUSH
52751: PPUSH
// if mpGameType <> GameTypeFamine then
52752: LD_EXP 1
52756: PUSH
52757: LD_INT 5
52759: NONEQUAL
52760: IFFALSE 52764
// exit ;
52762: GO 52979
// for i := 1 to mpGlobalOilDeposits do
52764: LD_ADDR_VAR 0 6
52768: PUSH
52769: DOUBLE
52770: LD_INT 1
52772: DEC
52773: ST_TO_ADDR
52774: LD_EXP 39
52778: PUSH
52779: FOR_TO
52780: IFFALSE 52977
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52782: LD_EXP 39
52786: PUSH
52787: LD_VAR 0 6
52791: ARRAY
52792: PUSH
52793: LD_INT 1
52795: ARRAY
52796: PPUSH
52797: LD_EXP 39
52801: PUSH
52802: LD_VAR 0 6
52806: ARRAY
52807: PUSH
52808: LD_INT 2
52810: ARRAY
52811: PPUSH
52812: CALL_OW 428
52816: PUSH
52817: LD_VAR 0 1
52821: EQUAL
52822: IFFALSE 52975
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52824: LD_ADDR_VAR 0 7
52828: PUSH
52829: LD_EXP 39
52833: PUSH
52834: LD_VAR 0 6
52838: ARRAY
52839: PUSH
52840: LD_INT 3
52842: ARRAY
52843: ST_TO_ADDR
// value := value - amount ;
52844: LD_ADDR_VAR 0 7
52848: PUSH
52849: LD_VAR 0 7
52853: PUSH
52854: LD_VAR 0 4
52858: MINUS
52859: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52860: LD_ADDR_EXP 39
52864: PUSH
52865: LD_EXP 39
52869: PPUSH
52870: LD_VAR 0 6
52874: PPUSH
52875: LD_EXP 39
52879: PUSH
52880: LD_VAR 0 6
52884: ARRAY
52885: PPUSH
52886: LD_INT 3
52888: PPUSH
52889: LD_VAR 0 7
52893: PPUSH
52894: CALL_OW 1
52898: PPUSH
52899: CALL_OW 1
52903: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52904: LD_VAR 0 1
52908: PPUSH
52909: LD_VAR 0 7
52913: PPUSH
52914: CALL_OW 505
// if value <= 0 then
52918: LD_VAR 0 7
52922: PUSH
52923: LD_INT 0
52925: LESSEQUAL
52926: IFFALSE 52975
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52928: LD_EXP 39
52932: PUSH
52933: LD_VAR 0 6
52937: ARRAY
52938: PUSH
52939: LD_INT 1
52941: ARRAY
52942: PPUSH
52943: LD_EXP 39
52947: PUSH
52948: LD_VAR 0 6
52952: ARRAY
52953: PUSH
52954: LD_INT 2
52956: ARRAY
52957: PPUSH
52958: CALL_OW 63
// KillUnit ( building ) ;
52962: LD_VAR 0 1
52966: PPUSH
52967: CALL_OW 66
// exit ;
52971: POP
52972: POP
52973: GO 52979
// end ; end ; end ;
52975: GO 52779
52977: POP
52978: POP
// end ;
52979: LD_VAR 0 5
52983: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52984: LD_INT 0
52986: PPUSH
52987: PPUSH
52988: PPUSH
// if mpGameType <> GameTypeFamine then
52989: LD_EXP 1
52993: PUSH
52994: LD_INT 5
52996: NONEQUAL
52997: IFFALSE 53001
// exit ;
52999: GO 53216
// for i := 1 to mpGlobalSibDeposits do
53001: LD_ADDR_VAR 0 6
53005: PUSH
53006: DOUBLE
53007: LD_INT 1
53009: DEC
53010: ST_TO_ADDR
53011: LD_EXP 40
53015: PUSH
53016: FOR_TO
53017: IFFALSE 53214
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53019: LD_EXP 40
53023: PUSH
53024: LD_VAR 0 6
53028: ARRAY
53029: PUSH
53030: LD_INT 1
53032: ARRAY
53033: PPUSH
53034: LD_EXP 40
53038: PUSH
53039: LD_VAR 0 6
53043: ARRAY
53044: PUSH
53045: LD_INT 2
53047: ARRAY
53048: PPUSH
53049: CALL_OW 428
53053: PUSH
53054: LD_VAR 0 1
53058: EQUAL
53059: IFFALSE 53212
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53061: LD_ADDR_VAR 0 7
53065: PUSH
53066: LD_EXP 40
53070: PUSH
53071: LD_VAR 0 6
53075: ARRAY
53076: PUSH
53077: LD_INT 3
53079: ARRAY
53080: ST_TO_ADDR
// value := value - amount ;
53081: LD_ADDR_VAR 0 7
53085: PUSH
53086: LD_VAR 0 7
53090: PUSH
53091: LD_VAR 0 4
53095: MINUS
53096: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53097: LD_ADDR_EXP 40
53101: PUSH
53102: LD_EXP 40
53106: PPUSH
53107: LD_VAR 0 6
53111: PPUSH
53112: LD_EXP 40
53116: PUSH
53117: LD_VAR 0 6
53121: ARRAY
53122: PPUSH
53123: LD_INT 3
53125: PPUSH
53126: LD_VAR 0 7
53130: PPUSH
53131: CALL_OW 1
53135: PPUSH
53136: CALL_OW 1
53140: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
53141: LD_VAR 0 1
53145: PPUSH
53146: LD_VAR 0 7
53150: PPUSH
53151: CALL_OW 505
// if value <= 0 then
53155: LD_VAR 0 7
53159: PUSH
53160: LD_INT 0
53162: LESSEQUAL
53163: IFFALSE 53212
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53165: LD_EXP 40
53169: PUSH
53170: LD_VAR 0 6
53174: ARRAY
53175: PUSH
53176: LD_INT 1
53178: ARRAY
53179: PPUSH
53180: LD_EXP 40
53184: PUSH
53185: LD_VAR 0 6
53189: ARRAY
53190: PUSH
53191: LD_INT 2
53193: ARRAY
53194: PPUSH
53195: CALL_OW 63
// KillUnit ( building ) ;
53199: LD_VAR 0 1
53203: PPUSH
53204: CALL_OW 66
// exit ;
53208: POP
53209: POP
53210: GO 53216
// end ; end ; end ;
53212: GO 53016
53214: POP
53215: POP
// end ;
53216: LD_VAR 0 5
53220: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53221: LD_INT 0
53223: PPUSH
53224: PPUSH
// side := GetSide ( factory ) ;
53225: LD_ADDR_VAR 0 7
53229: PUSH
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 255
53239: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53240: LD_VAR 0 5
53244: PUSH
53245: LD_INT 81
53247: EQUAL
53248: IFFALSE 53286
53250: PUSH
53251: LD_INT 22
53253: PUSH
53254: LD_VAR 0 7
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 34
53265: PUSH
53266: LD_INT 81
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PPUSH
53277: CALL_OW 69
53281: PUSH
53282: LD_INT 0
53284: GREATER
53285: AND
53286: IFFALSE 53319
// begin ComCancel ( factory ) ;
53288: LD_VAR 0 1
53292: PPUSH
53293: CALL_OW 127
// if side = your_side then
53297: LD_VAR 0 7
53301: PUSH
53302: LD_OWVAR 2
53306: EQUAL
53307: IFFALSE 53319
// HintSpec ( VehLimit , 2 ) ;
53309: LD_STRING VehLimit
53311: PPUSH
53312: LD_INT 2
53314: PPUSH
53315: CALL_OW 338
// end ; end ;
53319: LD_VAR 0 6
53323: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
53324: LD_INT 0
53326: PPUSH
53327: PPUSH
53328: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
53329: LD_VAR 0 1
53333: PPUSH
53334: CALL_OW 264
53338: PUSH
53339: LD_INT 81
53341: EQUAL
53342: IFFALSE 53359
53344: PUSH
53345: LD_VAR 0 1
53349: PPUSH
53350: CALL_OW 263
53354: PUSH
53355: LD_INT 1
53357: EQUAL
53358: AND
53359: IFFALSE 53639
// begin for i := 1 to Count ( minersList ) do
53361: LD_ADDR_VAR 0 6
53365: PUSH
53366: DOUBLE
53367: LD_INT 1
53369: DEC
53370: ST_TO_ADDR
53371: LD_EXP 55
53375: PPUSH
53376: CALL 5216 0 1
53380: PUSH
53381: FOR_TO
53382: IFFALSE 53500
// begin if minersList [ i ] = oldId then
53384: LD_EXP 55
53388: PUSH
53389: LD_VAR 0 6
53393: ARRAY
53394: PUSH
53395: LD_VAR 0 2
53399: EQUAL
53400: IFFALSE 53498
// begin for j := 1 to minerMinesList [ i ] do
53402: LD_ADDR_VAR 0 7
53406: PUSH
53407: DOUBLE
53408: LD_INT 1
53410: DEC
53411: ST_TO_ADDR
53412: LD_EXP 56
53416: PUSH
53417: LD_VAR 0 6
53421: ARRAY
53422: PUSH
53423: FOR_TO
53424: IFFALSE 53474
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53426: LD_EXP 56
53430: PUSH
53431: LD_VAR 0 6
53435: ARRAY
53436: PUSH
53437: LD_VAR 0 7
53441: ARRAY
53442: PUSH
53443: LD_INT 1
53445: ARRAY
53446: PPUSH
53447: LD_EXP 56
53451: PUSH
53452: LD_VAR 0 6
53456: ARRAY
53457: PUSH
53458: LD_VAR 0 7
53462: ARRAY
53463: PUSH
53464: LD_INT 2
53466: ARRAY
53467: PPUSH
53468: CALL_OW 612
53472: GO 53423
53474: POP
53475: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
53476: LD_ADDR_EXP 56
53480: PUSH
53481: LD_EXP 56
53485: PPUSH
53486: LD_VAR 0 6
53490: PPUSH
53491: CALL_OW 3
53495: ST_TO_ADDR
// break ;
53496: GO 53500
// end ; end ;
53498: GO 53381
53500: POP
53501: POP
// minersList := minersList diff oldId ;
53502: LD_ADDR_EXP 55
53506: PUSH
53507: LD_EXP 55
53511: PUSH
53512: LD_VAR 0 2
53516: DIFF
53517: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
53518: LD_INT 22
53520: PUSH
53521: LD_VAR 0 4
53525: PPUSH
53526: CALL_OW 255
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 34
53537: PUSH
53538: LD_INT 81
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PPUSH
53549: CALL_OW 69
53553: PUSH
53554: LD_INT 1
53556: GREATER
53557: IFFALSE 53584
// begin ComExit ( unit ) ;
53559: LD_VAR 0 4
53563: PPUSH
53564: CALL 41580 0 1
// SetSide ( newId , oldSide ) ;
53568: LD_VAR 0 1
53572: PPUSH
53573: LD_VAR 0 3
53577: PPUSH
53578: CALL_OW 235
// exit ;
53582: GO 53639
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
53584: LD_ADDR_EXP 55
53588: PUSH
53589: LD_EXP 55
53593: PPUSH
53594: LD_EXP 55
53598: PUSH
53599: LD_INT 1
53601: PLUS
53602: PPUSH
53603: LD_VAR 0 1
53607: PPUSH
53608: CALL_OW 1
53612: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53613: LD_ADDR_EXP 56
53617: PUSH
53618: LD_EXP 56
53622: PPUSH
53623: LD_EXP 56
53627: PUSH
53628: LD_INT 1
53630: PLUS
53631: PPUSH
53632: EMPTY
53633: PPUSH
53634: CALL_OW 1
53638: ST_TO_ADDR
// end ; end ; end_of_file
53639: LD_VAR 0 5
53643: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
53644: LD_EXP 37
53648: IFFALSE 53656
53650: PUSH
53651: CALL 53866 0 0
53655: AND
53656: IFFALSE 53664
53658: PUSH
53659: LD_OWVAR 4
53663: AND
53664: IFFALSE 53863
53666: GO 53668
53668: DISABLE
53669: LD_INT 0
53671: PPUSH
53672: PPUSH
// begin canWin := false ;
53673: LD_ADDR_VAR 0 2
53677: PUSH
53678: LD_INT 0
53680: ST_TO_ADDR
// if not HasPower ( your_side ) then
53681: LD_OWVAR 2
53685: PPUSH
53686: CALL 53908 0 1
53690: NOT
53691: IFFALSE 53702
// begin Multiplayer_Loose_Message ;
53693: CALL_OW 521
// enable ( mpLose ) ;
53697: LD_INT 102
53699: ENABLE_MARKED
// end else
53700: GO 53863
// begin canWin := true ;
53702: LD_ADDR_VAR 0 2
53706: PUSH
53707: LD_INT 1
53709: ST_TO_ADDR
// for i := 1 to 8 do
53710: LD_ADDR_VAR 0 1
53714: PUSH
53715: DOUBLE
53716: LD_INT 1
53718: DEC
53719: ST_TO_ADDR
53720: LD_INT 8
53722: PUSH
53723: FOR_TO
53724: IFFALSE 53849
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53726: LD_EXP 5
53730: PUSH
53731: LD_VAR 0 1
53735: ARRAY
53736: IFFALSE 53749
53738: PUSH
53739: LD_VAR 0 1
53743: PPUSH
53744: CALL_OW 108
53748: AND
53749: IFFALSE 53763
53751: PUSH
53752: LD_VAR 0 1
53756: PUSH
53757: LD_OWVAR 2
53761: NONEQUAL
53762: AND
53763: IFFALSE 53847
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53765: LD_EXP 6
53769: PUSH
53770: LD_VAR 0 1
53774: ARRAY
53775: NOT
53776: IFTRUE 53824
53778: PUSH
53779: LD_EXP 6
53783: PUSH
53784: LD_VAR 0 1
53788: ARRAY
53789: PUSH
53790: LD_EXP 6
53794: PUSH
53795: LD_OWVAR 2
53799: ARRAY
53800: NONEQUAL
53801: IFFALSE 53823
53803: PUSH
53804: LD_OWVAR 2
53808: PPUSH
53809: LD_VAR 0 1
53813: PPUSH
53814: CALL_OW 81
53818: PUSH
53819: LD_INT 1
53821: NONEQUAL
53822: AND
53823: OR
53824: IFFALSE 53847
// if HasPower ( i ) then
53826: LD_VAR 0 1
53830: PPUSH
53831: CALL 53908 0 1
53835: IFFALSE 53847
// begin canWin := false ;
53837: LD_ADDR_VAR 0 2
53841: PUSH
53842: LD_INT 0
53844: ST_TO_ADDR
// break ;
53845: GO 53849
// end ;
53847: GO 53723
53849: POP
53850: POP
// if canWin then
53851: LD_VAR 0 2
53855: IFFALSE 53862
// enable ( mpWin ) else
53857: LD_INT 101
53859: ENABLE_MARKED
53860: GO 53863
// enable ;
53862: ENABLE
// end ; end ;
53863: PPOPN 2
53865: END
// function CanWinLoose ; begin
53866: LD_INT 0
53868: PPUSH
// result := true ;
53869: LD_ADDR_VAR 0 1
53873: PUSH
53874: LD_INT 1
53876: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53877: CALL_OW 531
53881: IFFALSE 53893
53883: PUSH
53884: CALL_OW 519
53888: PUSH
53889: LD_INT 1
53891: GREATER
53892: AND
53893: IFFALSE 53903
// result := false ;
53895: LD_ADDR_VAR 0 1
53899: PUSH
53900: LD_INT 0
53902: ST_TO_ADDR
// end ;
53903: LD_VAR 0 1
53907: RET
// function HasPower ( i ) ; begin
53908: LD_INT 0
53910: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53911: LD_ADDR_VAR 0 2
53915: PUSH
53916: LD_INT 22
53918: PUSH
53919: LD_VAR 0 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 21
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 33
53943: PUSH
53944: LD_INT 3
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 33
53953: PUSH
53954: LD_INT 5
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PPUSH
53971: CALL_OW 69
53975: ST_TO_ADDR
// end ; end_of_file
53976: LD_VAR 0 2
53980: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53981: LD_EXP 37
53985: IFFALSE 54028
53987: GO 53989
53989: DISABLE
53990: LD_INT 0
53992: PPUSH
// begin for i := 1 to 8 do
53993: LD_ADDR_VAR 0 1
53997: PUSH
53998: DOUBLE
53999: LD_INT 1
54001: DEC
54002: ST_TO_ADDR
54003: LD_INT 8
54005: PUSH
54006: FOR_TO
54007: IFFALSE 54026
// SetRestrict ( b_depot , i , state_disabled ) ;
54009: LD_INT 0
54011: PPUSH
54012: LD_VAR 0 1
54016: PPUSH
54017: LD_INT 0
54019: PPUSH
54020: CALL_OW 324
54024: GO 54006
54026: POP
54027: POP
// end ;
54028: PPOPN 1
54030: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54031: LD_EXP 37
54035: IFFALSE 54043
54037: PUSH
54038: CALL 54253 0 0
54042: AND
54043: IFFALSE 54051
54045: PUSH
54046: LD_OWVAR 4
54050: AND
54051: IFFALSE 54250
54053: GO 54055
54055: DISABLE
54056: LD_INT 0
54058: PPUSH
54059: PPUSH
// begin canWin := false ;
54060: LD_ADDR_VAR 0 2
54064: PUSH
54065: LD_INT 0
54067: ST_TO_ADDR
// if not HasPower ( your_side ) then
54068: LD_OWVAR 2
54072: PPUSH
54073: CALL 54295 0 1
54077: NOT
54078: IFFALSE 54089
// begin Multiplayer_Loose_Message ;
54080: CALL_OW 521
// enable ( mpLose ) ;
54084: LD_INT 102
54086: ENABLE_MARKED
// end else
54087: GO 54250
// begin canWin := true ;
54089: LD_ADDR_VAR 0 2
54093: PUSH
54094: LD_INT 1
54096: ST_TO_ADDR
// for i := 1 to 8 do
54097: LD_ADDR_VAR 0 1
54101: PUSH
54102: DOUBLE
54103: LD_INT 1
54105: DEC
54106: ST_TO_ADDR
54107: LD_INT 8
54109: PUSH
54110: FOR_TO
54111: IFFALSE 54236
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54113: LD_EXP 5
54117: PUSH
54118: LD_VAR 0 1
54122: ARRAY
54123: IFFALSE 54136
54125: PUSH
54126: LD_VAR 0 1
54130: PPUSH
54131: CALL_OW 108
54135: AND
54136: IFFALSE 54150
54138: PUSH
54139: LD_VAR 0 1
54143: PUSH
54144: LD_OWVAR 2
54148: NONEQUAL
54149: AND
54150: IFFALSE 54234
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54152: LD_EXP 6
54156: PUSH
54157: LD_VAR 0 1
54161: ARRAY
54162: NOT
54163: IFTRUE 54211
54165: PUSH
54166: LD_EXP 6
54170: PUSH
54171: LD_VAR 0 1
54175: ARRAY
54176: PUSH
54177: LD_EXP 6
54181: PUSH
54182: LD_OWVAR 2
54186: ARRAY
54187: NONEQUAL
54188: IFFALSE 54210
54190: PUSH
54191: LD_OWVAR 2
54195: PPUSH
54196: LD_VAR 0 1
54200: PPUSH
54201: CALL_OW 81
54205: PUSH
54206: LD_INT 1
54208: NONEQUAL
54209: AND
54210: OR
54211: IFFALSE 54234
// if HasPower ( i ) then
54213: LD_VAR 0 1
54217: PPUSH
54218: CALL 54295 0 1
54222: IFFALSE 54234
// begin canWin := false ;
54224: LD_ADDR_VAR 0 2
54228: PUSH
54229: LD_INT 0
54231: ST_TO_ADDR
// break ;
54232: GO 54236
// end ;
54234: GO 54110
54236: POP
54237: POP
// if canWin then
54238: LD_VAR 0 2
54242: IFFALSE 54249
// enable ( mpWin ) else
54244: LD_INT 101
54246: ENABLE_MARKED
54247: GO 54250
// enable ;
54249: ENABLE
// end ; end ;
54250: PPOPN 2
54252: END
// function CanWinLoose ; begin
54253: LD_INT 0
54255: PPUSH
// result := true ;
54256: LD_ADDR_VAR 0 1
54260: PUSH
54261: LD_INT 1
54263: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54264: CALL_OW 531
54268: IFFALSE 54280
54270: PUSH
54271: CALL_OW 519
54275: PUSH
54276: LD_INT 1
54278: GREATER
54279: AND
54280: IFFALSE 54290
// result := false ;
54282: LD_ADDR_VAR 0 1
54286: PUSH
54287: LD_INT 0
54289: ST_TO_ADDR
// end ;
54290: LD_VAR 0 1
54294: RET
// function HasPower ( i ) ; begin
54295: LD_INT 0
54297: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54298: LD_INT 22
54300: PUSH
54301: LD_VAR 0 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 30
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 30
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PPUSH
54342: CALL_OW 69
54346: NOT
54347: IFFALSE 54351
// exit ;
54349: GO 54416
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54351: LD_ADDR_VAR 0 2
54355: PUSH
54356: LD_INT 22
54358: PUSH
54359: LD_VAR 0 1
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 21
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 33
54383: PUSH
54384: LD_INT 3
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 33
54393: PUSH
54394: LD_INT 5
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PPUSH
54411: CALL_OW 69
54415: ST_TO_ADDR
// end ; end_of_file
54416: LD_VAR 0 2
54420: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
54421: LD_EXP 37
54425: IFFALSE 54764
54427: GO 54429
54429: DISABLE
54430: LD_INT 0
54432: PPUSH
54433: PPUSH
54434: PPUSH
// begin mpKingPoints := [ ] ;
54435: LD_ADDR_EXP 47
54439: PUSH
54440: EMPTY
54441: ST_TO_ADDR
// if mpTeamGame then
54442: LD_EXP 9
54446: IFFALSE 54500
// begin for i := 1 to Count ( mpTeams ) do
54448: LD_ADDR_VAR 0 1
54452: PUSH
54453: DOUBLE
54454: LD_INT 1
54456: DEC
54457: ST_TO_ADDR
54458: LD_EXP 8
54462: PPUSH
54463: CALL 5216 0 1
54467: PUSH
54468: FOR_TO
54469: IFFALSE 54496
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54471: LD_ADDR_EXP 47
54475: PUSH
54476: LD_EXP 47
54480: PPUSH
54481: LD_VAR 0 1
54485: PPUSH
54486: LD_INT 0
54488: PPUSH
54489: CALL_OW 1
54493: ST_TO_ADDR
54494: GO 54468
54496: POP
54497: POP
// end else
54498: GO 54543
// begin for i := 1 to 8 do
54500: LD_ADDR_VAR 0 1
54504: PUSH
54505: DOUBLE
54506: LD_INT 1
54508: DEC
54509: ST_TO_ADDR
54510: LD_INT 8
54512: PUSH
54513: FOR_TO
54514: IFFALSE 54541
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
54516: LD_ADDR_EXP 47
54520: PUSH
54521: LD_EXP 47
54525: PPUSH
54526: LD_VAR 0 1
54530: PPUSH
54531: LD_INT 0
54533: PPUSH
54534: CALL_OW 1
54538: ST_TO_ADDR
54539: GO 54513
54541: POP
54542: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
54543: LD_ADDR_VAR 0 3
54547: PUSH
54548: LD_INT 73
54550: PPUSH
54551: LD_INT 0
54553: PPUSH
54554: CALL_OW 517
54558: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54559: LD_ADDR_VAR 0 1
54563: PUSH
54564: DOUBLE
54565: LD_INT 1
54567: DEC
54568: ST_TO_ADDR
54569: LD_VAR 0 3
54573: PUSH
54574: LD_INT 1
54576: ARRAY
54577: PUSH
54578: FOR_TO
54579: IFFALSE 54646
// for j := 1 to 8 do
54581: LD_ADDR_VAR 0 2
54585: PUSH
54586: DOUBLE
54587: LD_INT 1
54589: DEC
54590: ST_TO_ADDR
54591: LD_INT 8
54593: PUSH
54594: FOR_TO
54595: IFFALSE 54642
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
54597: LD_VAR 0 3
54601: PUSH
54602: LD_INT 1
54604: ARRAY
54605: PUSH
54606: LD_VAR 0 1
54610: ARRAY
54611: PPUSH
54612: LD_VAR 0 3
54616: PUSH
54617: LD_INT 2
54619: ARRAY
54620: PUSH
54621: LD_VAR 0 1
54625: ARRAY
54626: PPUSH
54627: LD_VAR 0 2
54631: PPUSH
54632: LD_INT 12
54634: NEG
54635: PPUSH
54636: CALL_OW 330
54640: GO 54594
54642: POP
54643: POP
54644: GO 54578
54646: POP
54647: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
54648: LD_EXP 32
54652: PPUSH
54653: LD_INT 1
54655: PPUSH
54656: CALL_OW 424
// UpdateCounter ;
54660: CALL 55268 0 0
// repeat wait ( 0 0$1 ) ;
54664: LD_INT 35
54666: PPUSH
54667: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
54671: LD_ADDR_VAR 0 3
54675: PUSH
54676: LD_EXP 32
54680: PPUSH
54681: LD_INT 3
54683: PUSH
54684: LD_INT 57
54686: PUSH
54687: EMPTY
54688: LIST
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 50
54696: PUSH
54697: EMPTY
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 30
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 30
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: PPUSH
54733: CALL_OW 70
54737: ST_TO_ADDR
// if not tmp then
54738: LD_VAR 0 3
54742: NOT
54743: IFFALSE 54747
// continue ;
54745: GO 54664
// AddPoints ( tmp ) ;
54747: LD_VAR 0 3
54751: PPUSH
54752: CALL 54946 0 1
// UpdateCounter ;
54756: CALL 55268 0 0
// until false ;
54760: LD_INT 0
54762: IFFALSE 54664
// end ;
54764: PPOPN 3
54766: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54767: LD_EXP 37
54771: IFFALSE 54779
54773: PUSH
54774: LD_EXP 35
54778: AND
54779: IFFALSE 54943
54781: GO 54783
54783: DISABLE
54784: LD_INT 0
54786: PPUSH
54787: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54788: LD_ADDR_VAR 0 2
54792: PUSH
54793: LD_INT 73
54795: PPUSH
54796: LD_INT 0
54798: PPUSH
54799: CALL_OW 517
54803: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54804: LD_ADDR_VAR 0 1
54808: PUSH
54809: DOUBLE
54810: LD_INT 1
54812: DEC
54813: ST_TO_ADDR
54814: LD_VAR 0 2
54818: PUSH
54819: LD_INT 1
54821: ARRAY
54822: PUSH
54823: FOR_TO
54824: IFFALSE 54865
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54826: LD_VAR 0 2
54830: PUSH
54831: LD_INT 1
54833: ARRAY
54834: PUSH
54835: LD_VAR 0 1
54839: ARRAY
54840: PPUSH
54841: LD_VAR 0 2
54845: PUSH
54846: LD_INT 2
54848: ARRAY
54849: PUSH
54850: LD_VAR 0 1
54854: ARRAY
54855: PPUSH
54856: LD_INT 125
54858: PPUSH
54859: CALL_OW 495
54863: GO 54823
54865: POP
54866: POP
// repeat wait ( mpEmissions ) ;
54867: LD_EXP 35
54871: PPUSH
54872: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54876: LD_ADDR_VAR 0 1
54880: PUSH
54881: DOUBLE
54882: LD_INT 1
54884: DEC
54885: ST_TO_ADDR
54886: LD_VAR 0 2
54890: PUSH
54891: LD_INT 1
54893: ARRAY
54894: PUSH
54895: FOR_TO
54896: IFFALSE 54937
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54898: LD_VAR 0 2
54902: PUSH
54903: LD_INT 1
54905: ARRAY
54906: PUSH
54907: LD_VAR 0 1
54911: ARRAY
54912: PPUSH
54913: LD_VAR 0 2
54917: PUSH
54918: LD_INT 2
54920: ARRAY
54921: PUSH
54922: LD_VAR 0 1
54926: ARRAY
54927: PPUSH
54928: LD_INT 15
54930: PPUSH
54931: CALL_OW 495
54935: GO 54895
54937: POP
54938: POP
// until false ;
54939: LD_INT 0
54941: IFFALSE 54867
// end ;
54943: PPOPN 2
54945: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54946: LD_INT 0
54948: PPUSH
54949: PPUSH
54950: PPUSH
54951: PPUSH
54952: PPUSH
// if mpTeamGame then
54953: LD_EXP 9
54957: IFFALSE 55154
// begin first := depots [ 1 ] ;
54959: LD_ADDR_VAR 0 4
54963: PUSH
54964: LD_VAR 0 1
54968: PUSH
54969: LD_INT 1
54971: ARRAY
54972: ST_TO_ADDR
// side := GetSide ( first ) ;
54973: LD_ADDR_VAR 0 6
54977: PUSH
54978: LD_VAR 0 4
54982: PPUSH
54983: CALL_OW 255
54987: ST_TO_ADDR
// for i := 1 to mpTeams do
54988: LD_ADDR_VAR 0 3
54992: PUSH
54993: DOUBLE
54994: LD_INT 1
54996: DEC
54997: ST_TO_ADDR
54998: LD_EXP 8
55002: PUSH
55003: FOR_TO
55004: IFFALSE 55038
// if side in mpTeams [ i ] then
55006: LD_VAR 0 6
55010: PUSH
55011: LD_EXP 8
55015: PUSH
55016: LD_VAR 0 3
55020: ARRAY
55021: IN
55022: IFFALSE 55036
// begin team := i ;
55024: LD_ADDR_VAR 0 5
55028: PUSH
55029: LD_VAR 0 3
55033: ST_TO_ADDR
// break ;
55034: GO 55038
// end ;
55036: GO 55003
55038: POP
55039: POP
// if not team then
55040: LD_VAR 0 5
55044: NOT
55045: IFFALSE 55049
// exit ;
55047: GO 55263
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55049: LD_EXP 32
55053: PPUSH
55054: LD_INT 81
55056: PUSH
55057: LD_VAR 0 6
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PPUSH
55066: CALL_OW 70
55070: IFFALSE 55074
// exit ;
55072: GO 55263
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55074: LD_ADDR_EXP 47
55078: PUSH
55079: LD_EXP 47
55083: PPUSH
55084: LD_VAR 0 5
55088: PPUSH
55089: LD_EXP 47
55093: PUSH
55094: LD_VAR 0 5
55098: ARRAY
55099: PUSH
55100: LD_INT 1
55102: PLUS
55103: PPUSH
55104: CALL_OW 1
55108: ST_TO_ADDR
// for i in mpTeams [ team ] do
55109: LD_ADDR_VAR 0 3
55113: PUSH
55114: LD_EXP 8
55118: PUSH
55119: LD_VAR 0 5
55123: ARRAY
55124: PUSH
55125: FOR_IN
55126: IFFALSE 55150
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55128: LD_VAR 0 3
55132: PPUSH
55133: LD_EXP 47
55137: PUSH
55138: LD_VAR 0 5
55142: ARRAY
55143: PPUSH
55144: CALL_OW 506
55148: GO 55125
55150: POP
55151: POP
// end else
55152: GO 55263
// begin first := depots [ 1 ] ;
55154: LD_ADDR_VAR 0 4
55158: PUSH
55159: LD_VAR 0 1
55163: PUSH
55164: LD_INT 1
55166: ARRAY
55167: ST_TO_ADDR
// side := GetSide ( first ) ;
55168: LD_ADDR_VAR 0 6
55172: PUSH
55173: LD_VAR 0 4
55177: PPUSH
55178: CALL_OW 255
55182: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55183: LD_EXP 32
55187: PPUSH
55188: LD_INT 81
55190: PUSH
55191: LD_VAR 0 6
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PPUSH
55200: CALL_OW 70
55204: IFFALSE 55208
// exit ;
55206: GO 55263
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55208: LD_ADDR_EXP 47
55212: PUSH
55213: LD_EXP 47
55217: PPUSH
55218: LD_VAR 0 6
55222: PPUSH
55223: LD_EXP 47
55227: PUSH
55228: LD_VAR 0 6
55232: ARRAY
55233: PUSH
55234: LD_INT 1
55236: PLUS
55237: PPUSH
55238: CALL_OW 1
55242: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55243: LD_VAR 0 6
55247: PPUSH
55248: LD_EXP 47
55252: PUSH
55253: LD_VAR 0 6
55257: ARRAY
55258: PPUSH
55259: CALL_OW 506
// end ; end ;
55263: LD_VAR 0 2
55267: RET
// function UpdateCounter ; var i ; begin
55268: LD_INT 0
55270: PPUSH
55271: PPUSH
// result := [ ] ;
55272: LD_ADDR_VAR 0 1
55276: PUSH
55277: EMPTY
55278: ST_TO_ADDR
// if mpTeamGame then
55279: LD_EXP 9
55283: IFFALSE 55350
// begin for i := 1 to mpTeams do
55285: LD_ADDR_VAR 0 2
55289: PUSH
55290: DOUBLE
55291: LD_INT 1
55293: DEC
55294: ST_TO_ADDR
55295: LD_EXP 8
55299: PUSH
55300: FOR_TO
55301: IFFALSE 55346
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55303: LD_ADDR_VAR 0 1
55307: PUSH
55308: LD_VAR 0 1
55312: PUSH
55313: LD_STRING #KingoftheHill-Team
55315: PUSH
55316: LD_VAR 0 2
55320: PUSH
55321: LD_EXP 47
55325: PUSH
55326: LD_VAR 0 2
55330: ARRAY
55331: PUSH
55332: LD_EXP 33
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: ADD
55343: ST_TO_ADDR
55344: GO 55300
55346: POP
55347: POP
// end else
55348: GO 55423
// begin for i := 1 to 8 do
55350: LD_ADDR_VAR 0 2
55354: PUSH
55355: DOUBLE
55356: LD_INT 1
55358: DEC
55359: ST_TO_ADDR
55360: LD_INT 8
55362: PUSH
55363: FOR_TO
55364: IFFALSE 55421
// if mpSidePositions [ i ] then
55366: LD_EXP 5
55370: PUSH
55371: LD_VAR 0 2
55375: ARRAY
55376: IFFALSE 55419
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
55378: LD_ADDR_VAR 0 1
55382: PUSH
55383: LD_VAR 0 1
55387: PUSH
55388: LD_STRING #KingoftheHill-Player
55390: PUSH
55391: LD_VAR 0 2
55395: PUSH
55396: LD_EXP 47
55400: PUSH
55401: LD_VAR 0 2
55405: ARRAY
55406: PUSH
55407: LD_EXP 33
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: ADD
55418: ST_TO_ADDR
55419: GO 55363
55421: POP
55422: POP
// end ; mpDisplayStrings := result ;
55423: LD_ADDR_EXP 36
55427: PUSH
55428: LD_VAR 0 1
55432: ST_TO_ADDR
// end ;
55433: LD_VAR 0 1
55437: RET
// export function HowMuchPointsKing ( side ) ; begin
55438: LD_INT 0
55440: PPUSH
// result := HowMuchPoints ( side ) ;
55441: LD_ADDR_VAR 0 2
55445: PUSH
55446: LD_VAR 0 1
55450: PPUSH
55451: CALL 55461 0 1
55455: ST_TO_ADDR
// end ;
55456: LD_VAR 0 2
55460: RET
// function HowMuchPoints ( side ) ; var i ; begin
55461: LD_INT 0
55463: PPUSH
55464: PPUSH
// if mpTeamGame then
55465: LD_EXP 9
55469: IFFALSE 55538
// begin for i := 1 to Count ( mpTeams ) do
55471: LD_ADDR_VAR 0 3
55475: PUSH
55476: DOUBLE
55477: LD_INT 1
55479: DEC
55480: ST_TO_ADDR
55481: LD_EXP 8
55485: PPUSH
55486: CALL 5216 0 1
55490: PUSH
55491: FOR_TO
55492: IFFALSE 55534
// begin if side in mpTeams [ i ] then
55494: LD_VAR 0 1
55498: PUSH
55499: LD_EXP 8
55503: PUSH
55504: LD_VAR 0 3
55508: ARRAY
55509: IN
55510: IFFALSE 55532
// begin result := mpKingPoints [ i ] ;
55512: LD_ADDR_VAR 0 2
55516: PUSH
55517: LD_EXP 47
55521: PUSH
55522: LD_VAR 0 3
55526: ARRAY
55527: ST_TO_ADDR
// exit ;
55528: POP
55529: POP
55530: GO 55554
// end ; end ;
55532: GO 55491
55534: POP
55535: POP
// end else
55536: GO 55554
// result := mpKingPoints [ side ] ;
55538: LD_ADDR_VAR 0 2
55542: PUSH
55543: LD_EXP 47
55547: PUSH
55548: LD_VAR 0 1
55552: ARRAY
55553: ST_TO_ADDR
// end ;
55554: LD_VAR 0 2
55558: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
55559: LD_EXP 37
55563: IFFALSE 55571
55565: PUSH
55566: CALL 55983 0 0
55570: AND
55571: IFFALSE 55579
55573: PUSH
55574: LD_OWVAR 4
55578: AND
55579: IFFALSE 55832
55581: GO 55583
55583: DISABLE
55584: LD_INT 0
55586: PPUSH
55587: PPUSH
// begin canWin := false ;
55588: LD_ADDR_VAR 0 2
55592: PUSH
55593: LD_INT 0
55595: ST_TO_ADDR
// if not HasPower ( your_side ) then
55596: LD_OWVAR 2
55600: PPUSH
55601: CALL 56025 0 1
55605: NOT
55606: IFFALSE 55617
// begin Multiplayer_Loose_Message ;
55608: CALL_OW 521
// enable ( mpLose ) ;
55612: LD_INT 102
55614: ENABLE_MARKED
// end else
55615: GO 55832
// begin if not EnemiesInGame then
55617: CALL 55835 0 0
55621: NOT
55622: IFFALSE 55629
// begin enable ( mpWin ) ;
55624: LD_INT 101
55626: ENABLE_MARKED
// exit ;
55627: GO 55832
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
55629: LD_ADDR_VAR 0 2
55633: PUSH
55634: LD_OWVAR 2
55638: PPUSH
55639: CALL 55461 0 1
55643: PUSH
55644: LD_EXP 33
55648: GREATEREQUAL
55649: IFFALSE 55662
55651: PUSH
55652: LD_OWVAR 2
55656: PPUSH
55657: CALL 56025 0 1
55661: AND
55662: ST_TO_ADDR
// for i := 1 to 8 do
55663: LD_ADDR_VAR 0 1
55667: PUSH
55668: DOUBLE
55669: LD_INT 1
55671: DEC
55672: ST_TO_ADDR
55673: LD_INT 8
55675: PUSH
55676: FOR_TO
55677: IFFALSE 55818
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
55679: LD_EXP 5
55683: PUSH
55684: LD_VAR 0 1
55688: ARRAY
55689: IFFALSE 55702
55691: PUSH
55692: LD_VAR 0 1
55696: PPUSH
55697: CALL_OW 108
55701: AND
55702: IFFALSE 55716
55704: PUSH
55705: LD_VAR 0 1
55709: PUSH
55710: LD_OWVAR 2
55714: NONEQUAL
55715: AND
55716: IFFALSE 55816
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55718: LD_EXP 6
55722: PUSH
55723: LD_VAR 0 1
55727: ARRAY
55728: NOT
55729: IFTRUE 55777
55731: PUSH
55732: LD_EXP 6
55736: PUSH
55737: LD_VAR 0 1
55741: ARRAY
55742: PUSH
55743: LD_EXP 6
55747: PUSH
55748: LD_OWVAR 2
55752: ARRAY
55753: NONEQUAL
55754: IFFALSE 55776
55756: PUSH
55757: LD_OWVAR 2
55761: PPUSH
55762: LD_VAR 0 1
55766: PPUSH
55767: CALL_OW 81
55771: PUSH
55772: LD_INT 1
55774: NONEQUAL
55775: AND
55776: OR
55777: IFFALSE 55816
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55779: LD_VAR 0 1
55783: PPUSH
55784: CALL 55461 0 1
55788: PUSH
55789: LD_EXP 33
55793: GREATEREQUAL
55794: IFFALSE 55807
55796: PUSH
55797: LD_VAR 0 1
55801: PPUSH
55802: CALL 56025 0 1
55806: AND
55807: IFFALSE 55816
// begin enable ( mpLose ) ;
55809: LD_INT 102
55811: ENABLE_MARKED
// exit ;
55812: POP
55813: POP
55814: GO 55832
// end ;
55816: GO 55676
55818: POP
55819: POP
// if canWin then
55820: LD_VAR 0 2
55824: IFFALSE 55831
// enable ( mpWin ) else
55826: LD_INT 101
55828: ENABLE_MARKED
55829: GO 55832
// enable ;
55831: ENABLE
// end ; end ;
55832: PPOPN 2
55834: END
// function EnemiesInGame ; var i ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
// result := false ;
55839: LD_ADDR_VAR 0 1
55843: PUSH
55844: LD_INT 0
55846: ST_TO_ADDR
// for i := 1 to 8 do
55847: LD_ADDR_VAR 0 2
55851: PUSH
55852: DOUBLE
55853: LD_INT 1
55855: DEC
55856: ST_TO_ADDR
55857: LD_INT 8
55859: PUSH
55860: FOR_TO
55861: IFFALSE 55976
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55863: LD_VAR 0 2
55867: PUSH
55868: LD_OWVAR 2
55872: NONEQUAL
55873: IFFALSE 55886
55875: PUSH
55876: LD_VAR 0 2
55880: PPUSH
55881: CALL 56025 0 1
55885: AND
55886: IFFALSE 55899
55888: PUSH
55889: LD_VAR 0 2
55893: PPUSH
55894: CALL_OW 108
55898: AND
55899: IFFALSE 55974
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55901: LD_EXP 6
55905: PUSH
55906: LD_VAR 0 2
55910: ARRAY
55911: NOT
55912: IFTRUE 55960
55914: PUSH
55915: LD_EXP 6
55919: PUSH
55920: LD_VAR 0 2
55924: ARRAY
55925: PUSH
55926: LD_EXP 6
55930: PUSH
55931: LD_OWVAR 2
55935: ARRAY
55936: NONEQUAL
55937: IFFALSE 55959
55939: PUSH
55940: LD_OWVAR 2
55944: PPUSH
55945: LD_VAR 0 2
55949: PPUSH
55950: CALL_OW 81
55954: PUSH
55955: LD_INT 1
55957: NONEQUAL
55958: AND
55959: OR
55960: IFFALSE 55974
// begin result := true ;
55962: LD_ADDR_VAR 0 1
55966: PUSH
55967: LD_INT 1
55969: ST_TO_ADDR
// exit ;
55970: POP
55971: POP
55972: GO 55978
// end ;
55974: GO 55860
55976: POP
55977: POP
// end ;
55978: LD_VAR 0 1
55982: RET
// function CanWinLoose ; begin
55983: LD_INT 0
55985: PPUSH
// result := true ;
55986: LD_ADDR_VAR 0 1
55990: PUSH
55991: LD_INT 1
55993: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55994: CALL_OW 531
55998: IFFALSE 56010
56000: PUSH
56001: CALL_OW 519
56005: PUSH
56006: LD_INT 1
56008: GREATER
56009: AND
56010: IFFALSE 56020
// result := false ;
56012: LD_ADDR_VAR 0 1
56016: PUSH
56017: LD_INT 0
56019: ST_TO_ADDR
// end ;
56020: LD_VAR 0 1
56024: RET
// function HasPower ( i ) ; begin
56025: LD_INT 0
56027: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56028: LD_ADDR_VAR 0 2
56032: PUSH
56033: LD_INT 22
56035: PUSH
56036: LD_VAR 0 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 21
56050: PUSH
56051: LD_INT 1
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 33
56060: PUSH
56061: LD_INT 3
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 33
56070: PUSH
56071: LD_INT 5
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PPUSH
56088: CALL_OW 69
56092: ST_TO_ADDR
// end ; end_of_file end_of_file
56093: LD_VAR 0 2
56097: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56098: LD_VAR 0 1
56102: PUSH
56103: LD_INT 200
56105: DOUBLE
56106: GREATEREQUAL
56107: IFFALSE 56115
56109: LD_INT 299
56111: DOUBLE
56112: LESSEQUAL
56113: IFTRUE 56117
56115: GO 56149
56117: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56118: LD_VAR 0 1
56122: PPUSH
56123: LD_VAR 0 2
56127: PPUSH
56128: LD_VAR 0 3
56132: PPUSH
56133: LD_VAR 0 4
56137: PPUSH
56138: LD_VAR 0 5
56142: PPUSH
56143: CALL 57011 0 5
56147: GO 56226
56149: LD_INT 300
56151: DOUBLE
56152: GREATEREQUAL
56153: IFFALSE 56161
56155: LD_INT 399
56157: DOUBLE
56158: LESSEQUAL
56159: IFTRUE 56163
56161: GO 56225
56163: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56164: LD_VAR 0 1
56168: PPUSH
56169: LD_VAR 0 2
56173: PPUSH
56174: LD_VAR 0 3
56178: PPUSH
56179: LD_VAR 0 4
56183: PPUSH
56184: LD_VAR 0 5
56188: PPUSH
56189: LD_VAR 0 6
56193: PPUSH
56194: LD_VAR 0 7
56198: PPUSH
56199: LD_VAR 0 8
56203: PPUSH
56204: LD_VAR 0 9
56208: PPUSH
56209: LD_VAR 0 10
56213: PPUSH
56214: LD_VAR 0 11
56218: PPUSH
56219: CALL 63332 0 11
56223: GO 56226
56225: POP
// end ;
56226: PPOPN 11
56228: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56229: LD_VAR 0 1
56233: PPUSH
56234: LD_VAR 0 2
56238: PPUSH
56239: LD_VAR 0 3
56243: PPUSH
56244: LD_VAR 0 4
56248: PPUSH
56249: LD_VAR 0 5
56253: PPUSH
56254: CALL 56311 0 5
// end ; end_of_file
56258: PPOPN 5
56260: END
// export function SOS_UnitDestroyed ( un ) ; begin
56261: LD_INT 0
56263: PPUSH
// ComRadiation ( un ) ;
56264: LD_VAR 0 1
56268: PPUSH
56269: CALL 57431 0 1
// end ;
56273: LD_VAR 0 2
56277: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56278: LD_INT 0
56280: PPUSH
// ComRadiation ( un ) ;
56281: LD_VAR 0 1
56285: PPUSH
56286: CALL 57431 0 1
// end ;
56290: LD_VAR 0 2
56294: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56295: LD_INT 0
56297: PPUSH
// end ;
56298: LD_VAR 0 4
56302: RET
// export function SOS_Command ( cmd ) ; begin
56303: LD_INT 0
56305: PPUSH
// end ;
56306: LD_VAR 0 2
56310: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56311: LD_INT 0
56313: PPUSH
// end ;
56314: LD_VAR 0 6
56318: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56319: LD_INT 0
56321: PPUSH
56322: PPUSH
56323: PPUSH
56324: PPUSH
56325: PPUSH
// if not vehicle or not factory then
56326: LD_VAR 0 1
56330: NOT
56331: IFTRUE 56340
56333: PUSH
56334: LD_VAR 0 2
56338: NOT
56339: OR
56340: IFFALSE 56344
// exit ;
56342: GO 57006
// weapon := GetWeapon ( vehicle ) ;
56344: LD_ADDR_VAR 0 7
56348: PUSH
56349: LD_VAR 0 1
56353: PPUSH
56354: CALL_OW 264
56358: ST_TO_ADDR
// if weapon = ar_miner then
56359: LD_VAR 0 7
56363: PUSH
56364: LD_INT 81
56366: EQUAL
56367: IFFALSE 56424
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
56369: LD_ADDR_EXP 55
56373: PUSH
56374: LD_EXP 55
56378: PPUSH
56379: LD_EXP 55
56383: PUSH
56384: LD_INT 1
56386: PLUS
56387: PPUSH
56388: LD_VAR 0 1
56392: PPUSH
56393: CALL_OW 1
56397: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
56398: LD_ADDR_EXP 56
56402: PUSH
56403: LD_EXP 56
56407: PPUSH
56408: LD_EXP 56
56412: PUSH
56413: LD_INT 1
56415: PLUS
56416: PPUSH
56417: EMPTY
56418: PPUSH
56419: CALL_OW 1
56423: ST_TO_ADDR
// end ; if not factoryWaypoints then
56424: LD_EXP 58
56428: NOT
56429: IFFALSE 56433
// exit ;
56431: GO 57006
// for i := 1 to Count ( factoryWaypoints ) do
56433: LD_ADDR_VAR 0 4
56437: PUSH
56438: DOUBLE
56439: LD_INT 1
56441: DEC
56442: ST_TO_ADDR
56443: LD_EXP 58
56447: PPUSH
56448: CALL 5216 0 1
56452: PUSH
56453: FOR_TO
56454: IFFALSE 57004
// if factoryWaypoints [ i ] [ 2 ] = factory then
56456: LD_EXP 58
56460: PUSH
56461: LD_VAR 0 4
56465: ARRAY
56466: PUSH
56467: LD_INT 2
56469: ARRAY
56470: PUSH
56471: LD_VAR 0 2
56475: EQUAL
56476: IFFALSE 57002
// begin if GetControl ( vehicle ) = control_manual then
56478: LD_VAR 0 1
56482: PPUSH
56483: CALL_OW 263
56487: PUSH
56488: LD_INT 1
56490: EQUAL
56491: IFFALSE 56855
// begin driver := IsDrivenBy ( vehicle ) ;
56493: LD_ADDR_VAR 0 5
56497: PUSH
56498: LD_VAR 0 1
56502: PPUSH
56503: CALL_OW 311
56507: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
56508: LD_VAR 0 5
56512: PUSH
56513: LD_EXP 59
56517: IN
56518: IFTRUE 56532
56520: PUSH
56521: LD_VAR 0 1
56525: PUSH
56526: LD_EXP 59
56530: IN
56531: OR
56532: IFFALSE 56538
// exit ;
56534: POP
56535: POP
56536: GO 57006
// if not HasTask ( driver ) then
56538: LD_VAR 0 5
56542: PPUSH
56543: CALL_OW 314
56547: NOT
56548: IFFALSE 56853
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
56550: LD_ADDR_EXP 59
56554: PUSH
56555: LD_EXP 59
56559: PPUSH
56560: LD_VAR 0 5
56564: PPUSH
56565: CALL 41182 0 2
56569: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
56570: LD_ADDR_EXP 59
56574: PUSH
56575: LD_EXP 59
56579: PPUSH
56580: LD_VAR 0 1
56584: PPUSH
56585: CALL 41182 0 2
56589: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56590: LD_ADDR_VAR 0 6
56594: PUSH
56595: LD_EXP 58
56599: PUSH
56600: LD_VAR 0 4
56604: ARRAY
56605: PUSH
56606: LD_INT 3
56608: ARRAY
56609: PPUSH
56610: LD_EXP 58
56614: PUSH
56615: LD_VAR 0 4
56619: ARRAY
56620: PUSH
56621: LD_INT 4
56623: ARRAY
56624: PPUSH
56625: CALL_OW 428
56629: ST_TO_ADDR
// if hex then
56630: LD_VAR 0 6
56634: IFFALSE 56652
// ComMoveUnit ( driver , hex ) else
56636: LD_VAR 0 5
56640: PPUSH
56641: LD_VAR 0 6
56645: PPUSH
56646: CALL_OW 112
56650: GO 56736
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
56652: LD_VAR 0 1
56656: PPUSH
56657: LD_EXP 58
56661: PUSH
56662: LD_VAR 0 4
56666: ARRAY
56667: PUSH
56668: LD_INT 3
56670: ARRAY
56671: PPUSH
56672: LD_EXP 58
56676: PUSH
56677: LD_VAR 0 4
56681: ARRAY
56682: PUSH
56683: LD_INT 4
56685: ARRAY
56686: PPUSH
56687: CALL_OW 297
56691: PUSH
56692: LD_INT 0
56694: GREATER
56695: IFFALSE 56736
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56697: LD_VAR 0 5
56701: PPUSH
56702: LD_EXP 58
56706: PUSH
56707: LD_VAR 0 4
56711: ARRAY
56712: PUSH
56713: LD_INT 3
56715: ARRAY
56716: PPUSH
56717: LD_EXP 58
56721: PUSH
56722: LD_VAR 0 4
56726: ARRAY
56727: PUSH
56728: LD_INT 4
56730: ARRAY
56731: PPUSH
56732: CALL_OW 111
// AddComExitVehicle ( driver ) ;
56736: LD_VAR 0 5
56740: PPUSH
56741: CALL_OW 181
// if Multiplayer then
56745: LD_OWVAR 4
56749: IFFALSE 56798
// begin repeat wait ( 10 ) ;
56751: LD_INT 10
56753: PPUSH
56754: CALL_OW 67
// until not IsInUnit ( driver ) ;
56758: LD_VAR 0 5
56762: PPUSH
56763: CALL_OW 310
56767: NOT
56768: IFFALSE 56751
// if not HasTask ( driver ) then
56770: LD_VAR 0 5
56774: PPUSH
56775: CALL_OW 314
56779: NOT
56780: IFFALSE 56796
// ComEnterUnit ( driver , factory ) ;
56782: LD_VAR 0 5
56786: PPUSH
56787: LD_VAR 0 2
56791: PPUSH
56792: CALL_OW 120
// end else
56796: GO 56812
// AddComEnterUnit ( driver , factory ) ;
56798: LD_VAR 0 5
56802: PPUSH
56803: LD_VAR 0 2
56807: PPUSH
56808: CALL_OW 180
// wait ( 0 0$1 ) ;
56812: LD_INT 35
56814: PPUSH
56815: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56819: LD_ADDR_EXP 59
56823: PUSH
56824: LD_EXP 59
56828: PUSH
56829: LD_VAR 0 5
56833: DIFF
56834: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56835: LD_ADDR_EXP 59
56839: PUSH
56840: LD_EXP 59
56844: PUSH
56845: LD_VAR 0 1
56849: DIFF
56850: ST_TO_ADDR
// break ;
56851: GO 57004
// end ; end else
56853: GO 57002
// if GetControl ( vehicle ) = control_remote then
56855: LD_VAR 0 1
56859: PPUSH
56860: CALL_OW 263
56864: PUSH
56865: LD_INT 2
56867: EQUAL
56868: IFFALSE 56954
// begin wait ( 0 0$2 ) ;
56870: LD_INT 70
56872: PPUSH
56873: CALL_OW 67
// repeat wait ( 10 ) ;
56877: LD_INT 10
56879: PPUSH
56880: CALL_OW 67
// Connect ( vehicle ) ;
56884: LD_VAR 0 1
56888: PPUSH
56889: CALL 11494 0 1
// until IsControledBy ( vehicle ) ;
56893: LD_VAR 0 1
56897: PPUSH
56898: CALL_OW 312
56902: IFFALSE 56877
// wait ( 10 ) ;
56904: LD_INT 10
56906: PPUSH
56907: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56911: LD_VAR 0 1
56915: PPUSH
56916: LD_EXP 58
56920: PUSH
56921: LD_VAR 0 4
56925: ARRAY
56926: PUSH
56927: LD_INT 3
56929: ARRAY
56930: PPUSH
56931: LD_EXP 58
56935: PUSH
56936: LD_VAR 0 4
56940: ARRAY
56941: PUSH
56942: LD_INT 4
56944: ARRAY
56945: PPUSH
56946: CALL_OW 111
// break ;
56950: GO 57004
// end else
56952: GO 57002
// begin wait ( 0 0$3 ) ;
56954: LD_INT 105
56956: PPUSH
56957: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56961: LD_VAR 0 1
56965: PPUSH
56966: LD_EXP 58
56970: PUSH
56971: LD_VAR 0 4
56975: ARRAY
56976: PUSH
56977: LD_INT 3
56979: ARRAY
56980: PPUSH
56981: LD_EXP 58
56985: PUSH
56986: LD_VAR 0 4
56990: ARRAY
56991: PUSH
56992: LD_INT 4
56994: ARRAY
56995: PPUSH
56996: CALL_OW 111
// break ;
57000: GO 57004
// end ; end ;
57002: GO 56453
57004: POP
57005: POP
// end ;
57006: LD_VAR 0 3
57010: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57011: LD_INT 0
57013: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57014: LD_VAR 0 1
57018: PUSH
57019: LD_INT 250
57021: EQUAL
57022: IFFALSE 57039
57024: PUSH
57025: LD_VAR 0 2
57029: PPUSH
57030: CALL_OW 264
57034: PUSH
57035: LD_INT 81
57037: EQUAL
57038: AND
57039: IFFALSE 57060
// MinerPlaceMine ( unit , x , y ) ;
57041: LD_VAR 0 2
57045: PPUSH
57046: LD_VAR 0 4
57050: PPUSH
57051: LD_VAR 0 5
57055: PPUSH
57056: CALL 60341 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 251
57067: EQUAL
57068: IFFALSE 57085
57070: PUSH
57071: LD_VAR 0 2
57075: PPUSH
57076: CALL_OW 264
57080: PUSH
57081: LD_INT 81
57083: EQUAL
57084: AND
57085: IFFALSE 57106
// MinerDetonateMine ( unit , x , y ) ;
57087: LD_VAR 0 2
57091: PPUSH
57092: LD_VAR 0 4
57096: PPUSH
57097: LD_VAR 0 5
57101: PPUSH
57102: CALL 60748 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57106: LD_VAR 0 1
57110: PUSH
57111: LD_INT 252
57113: EQUAL
57114: IFFALSE 57131
57116: PUSH
57117: LD_VAR 0 2
57121: PPUSH
57122: CALL_OW 264
57126: PUSH
57127: LD_INT 81
57129: EQUAL
57130: AND
57131: IFFALSE 57152
// MinerCreateMinefield ( unit , x , y ) ;
57133: LD_VAR 0 2
57137: PPUSH
57138: LD_VAR 0 4
57142: PPUSH
57143: LD_VAR 0 5
57147: PPUSH
57148: CALL 60980 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57152: LD_VAR 0 1
57156: PUSH
57157: LD_INT 253
57159: EQUAL
57160: IFFALSE 57177
57162: PUSH
57163: LD_VAR 0 2
57167: PPUSH
57168: CALL_OW 257
57172: PUSH
57173: LD_INT 5
57175: EQUAL
57176: AND
57177: IFFALSE 57198
// ComBinocular ( unit , x , y ) ;
57179: LD_VAR 0 2
57183: PPUSH
57184: LD_VAR 0 4
57188: PPUSH
57189: LD_VAR 0 5
57193: PPUSH
57194: CALL 61355 0 3
// if selectedUnit then
57198: LD_VAR 0 3
57202: IFFALSE 57262
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57204: LD_VAR 0 1
57208: PUSH
57209: LD_INT 254
57211: EQUAL
57212: IFFALSE 57229
57214: PUSH
57215: LD_VAR 0 2
57219: PPUSH
57220: CALL_OW 264
57224: PUSH
57225: LD_INT 99
57227: EQUAL
57228: AND
57229: IFFALSE 57246
57231: PUSH
57232: LD_VAR 0 3
57236: PPUSH
57237: CALL_OW 263
57241: PUSH
57242: LD_INT 3
57244: EQUAL
57245: AND
57246: IFFALSE 57262
// HackDestroyVehicle ( unit , selectedUnit ) ;
57248: LD_VAR 0 2
57252: PPUSH
57253: LD_VAR 0 3
57257: PPUSH
57258: CALL 59552 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57262: LD_VAR 0 1
57266: PUSH
57267: LD_INT 255
57269: EQUAL
57270: IFFALSE 57294
57272: PUSH
57273: LD_VAR 0 2
57277: PPUSH
57278: CALL_OW 264
57282: PUSH
57283: LD_INT 14
57285: PUSH
57286: LD_INT 53
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: IN
57293: AND
57294: IFFALSE 57312
57296: PUSH
57297: LD_VAR 0 4
57301: PPUSH
57302: LD_VAR 0 5
57306: PPUSH
57307: CALL_OW 488
57311: AND
57312: IFFALSE 57336
// CutTreeXYR ( unit , x , y , 12 ) ;
57314: LD_VAR 0 2
57318: PPUSH
57319: LD_VAR 0 4
57323: PPUSH
57324: LD_VAR 0 5
57328: PPUSH
57329: LD_INT 12
57331: PPUSH
57332: CALL 57527 0 4
// if cmd = 256 then
57336: LD_VAR 0 1
57340: PUSH
57341: LD_INT 256
57343: EQUAL
57344: IFFALSE 57365
// SetFactoryWaypoint ( unit , x , y ) ;
57346: LD_VAR 0 2
57350: PPUSH
57351: LD_VAR 0 4
57355: PPUSH
57356: LD_VAR 0 5
57360: PPUSH
57361: CALL 63340 0 3
// if cmd = 257 then
57365: LD_VAR 0 1
57369: PUSH
57370: LD_INT 257
57372: EQUAL
57373: IFFALSE 57394
// SetWarehouseGatheringPoint ( unit , x , y ) ;
57375: LD_VAR 0 2
57379: PPUSH
57380: LD_VAR 0 4
57384: PPUSH
57385: LD_VAR 0 5
57389: PPUSH
57390: CALL 63836 0 3
// if cmd = 258 then
57394: LD_VAR 0 1
57398: PUSH
57399: LD_INT 258
57401: EQUAL
57402: IFFALSE 57426
// BurnTreeXYR ( unit , x , y , 8 ) ;
57404: LD_VAR 0 2
57408: PPUSH
57409: LD_VAR 0 4
57413: PPUSH
57414: LD_VAR 0 5
57418: PPUSH
57419: LD_INT 8
57421: PPUSH
57422: CALL 57927 0 4
// end ;
57426: LD_VAR 0 6
57430: RET
// export function ComRadiation ( un ) ; var eff ; begin
57431: LD_INT 0
57433: PPUSH
57434: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
57435: LD_VAR 0 1
57439: PPUSH
57440: CALL_OW 264
57444: PUSH
57445: LD_INT 91
57447: NONEQUAL
57448: IFFALSE 57452
// exit ;
57450: GO 57522
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
57452: LD_INT 68
57454: PPUSH
57455: LD_VAR 0 1
57459: PPUSH
57460: CALL_OW 255
57464: PPUSH
57465: CALL_OW 321
57469: PUSH
57470: LD_INT 2
57472: EQUAL
57473: IFFALSE 57485
// eff := 50 else
57475: LD_ADDR_VAR 0 3
57479: PUSH
57480: LD_INT 50
57482: ST_TO_ADDR
57483: GO 57493
// eff := 25 ;
57485: LD_ADDR_VAR 0 3
57489: PUSH
57490: LD_INT 25
57492: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
57493: LD_VAR 0 1
57497: PPUSH
57498: CALL_OW 250
57502: PPUSH
57503: LD_VAR 0 1
57507: PPUSH
57508: CALL_OW 251
57512: PPUSH
57513: LD_VAR 0 3
57517: PPUSH
57518: CALL_OW 495
// end ;
57522: LD_VAR 0 2
57526: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
57527: LD_INT 0
57529: PPUSH
57530: PPUSH
57531: PPUSH
57532: PPUSH
57533: PPUSH
57534: PPUSH
57535: PPUSH
57536: PPUSH
57537: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
57538: LD_VAR 0 1
57542: PPUSH
57543: CALL_OW 302
57547: NOT
57548: IFTRUE 57567
57550: PUSH
57551: LD_VAR 0 2
57555: PPUSH
57556: LD_VAR 0 3
57560: PPUSH
57561: CALL_OW 488
57565: NOT
57566: OR
57567: IFTRUE 57576
57569: PUSH
57570: LD_VAR 0 4
57574: NOT
57575: OR
57576: IFFALSE 57580
// exit ;
57578: GO 57922
// list := [ ] ;
57580: LD_ADDR_VAR 0 13
57584: PUSH
57585: EMPTY
57586: ST_TO_ADDR
// if x - r < 0 then
57587: LD_VAR 0 2
57591: PUSH
57592: LD_VAR 0 4
57596: MINUS
57597: PUSH
57598: LD_INT 0
57600: LESS
57601: IFFALSE 57613
// min_x := 0 else
57603: LD_ADDR_VAR 0 7
57607: PUSH
57608: LD_INT 0
57610: ST_TO_ADDR
57611: GO 57629
// min_x := x - r ;
57613: LD_ADDR_VAR 0 7
57617: PUSH
57618: LD_VAR 0 2
57622: PUSH
57623: LD_VAR 0 4
57627: MINUS
57628: ST_TO_ADDR
// if y - r < 0 then
57629: LD_VAR 0 3
57633: PUSH
57634: LD_VAR 0 4
57638: MINUS
57639: PUSH
57640: LD_INT 0
57642: LESS
57643: IFFALSE 57655
// min_y := 0 else
57645: LD_ADDR_VAR 0 8
57649: PUSH
57650: LD_INT 0
57652: ST_TO_ADDR
57653: GO 57671
// min_y := y - r ;
57655: LD_ADDR_VAR 0 8
57659: PUSH
57660: LD_VAR 0 3
57664: PUSH
57665: LD_VAR 0 4
57669: MINUS
57670: ST_TO_ADDR
// max_x := x + r ;
57671: LD_ADDR_VAR 0 9
57675: PUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_VAR 0 4
57685: PLUS
57686: ST_TO_ADDR
// max_y := y + r ;
57687: LD_ADDR_VAR 0 10
57691: PUSH
57692: LD_VAR 0 3
57696: PUSH
57697: LD_VAR 0 4
57701: PLUS
57702: ST_TO_ADDR
// for _x = min_x to max_x do
57703: LD_ADDR_VAR 0 11
57707: PUSH
57708: DOUBLE
57709: LD_VAR 0 7
57713: DEC
57714: ST_TO_ADDR
57715: LD_VAR 0 9
57719: PUSH
57720: FOR_TO
57721: IFFALSE 57840
// for _y = min_y to max_y do
57723: LD_ADDR_VAR 0 12
57727: PUSH
57728: DOUBLE
57729: LD_VAR 0 8
57733: DEC
57734: ST_TO_ADDR
57735: LD_VAR 0 10
57739: PUSH
57740: FOR_TO
57741: IFFALSE 57836
// begin if not ValidHex ( _x , _y ) then
57743: LD_VAR 0 11
57747: PPUSH
57748: LD_VAR 0 12
57752: PPUSH
57753: CALL_OW 488
57757: NOT
57758: IFFALSE 57762
// continue ;
57760: GO 57740
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57762: LD_VAR 0 11
57766: PPUSH
57767: LD_VAR 0 12
57771: PPUSH
57772: CALL_OW 351
57776: IFFALSE 57794
57778: PUSH
57779: LD_VAR 0 11
57783: PPUSH
57784: LD_VAR 0 12
57788: PPUSH
57789: CALL_OW 554
57793: AND
57794: IFFALSE 57834
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57796: LD_ADDR_VAR 0 13
57800: PUSH
57801: LD_VAR 0 13
57805: PPUSH
57806: LD_VAR 0 13
57810: PUSH
57811: LD_INT 1
57813: PLUS
57814: PPUSH
57815: LD_VAR 0 11
57819: PUSH
57820: LD_VAR 0 12
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PPUSH
57829: CALL_OW 2
57833: ST_TO_ADDR
// end ;
57834: GO 57740
57836: POP
57837: POP
57838: GO 57720
57840: POP
57841: POP
// if not list then
57842: LD_VAR 0 13
57846: NOT
57847: IFFALSE 57851
// exit ;
57849: GO 57922
// for i in list do
57851: LD_ADDR_VAR 0 6
57855: PUSH
57856: LD_VAR 0 13
57860: PUSH
57861: FOR_IN
57862: IFFALSE 57920
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57864: LD_VAR 0 1
57868: PPUSH
57869: LD_STRING M
57871: PUSH
57872: LD_VAR 0 6
57876: PUSH
57877: LD_INT 1
57879: ARRAY
57880: PUSH
57881: LD_VAR 0 6
57885: PUSH
57886: LD_INT 2
57888: ARRAY
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: PPUSH
57914: CALL_OW 447
57918: GO 57861
57920: POP
57921: POP
// end ;
57922: LD_VAR 0 5
57926: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57927: LD_INT 0
57929: PPUSH
57930: PPUSH
57931: PPUSH
57932: PPUSH
57933: PPUSH
57934: PPUSH
57935: PPUSH
57936: PPUSH
57937: PPUSH
57938: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57939: LD_VAR 0 1
57943: PPUSH
57944: CALL_OW 302
57948: NOT
57949: IFTRUE 57968
57951: PUSH
57952: LD_VAR 0 2
57956: PPUSH
57957: LD_VAR 0 3
57961: PPUSH
57962: CALL_OW 488
57966: NOT
57967: OR
57968: IFTRUE 57977
57970: PUSH
57971: LD_VAR 0 4
57975: NOT
57976: OR
57977: IFFALSE 57981
// exit ;
57979: GO 58498
// list := [ ] ;
57981: LD_ADDR_VAR 0 13
57985: PUSH
57986: EMPTY
57987: ST_TO_ADDR
// if x - r < 0 then
57988: LD_VAR 0 2
57992: PUSH
57993: LD_VAR 0 4
57997: MINUS
57998: PUSH
57999: LD_INT 0
58001: LESS
58002: IFFALSE 58014
// min_x := 0 else
58004: LD_ADDR_VAR 0 7
58008: PUSH
58009: LD_INT 0
58011: ST_TO_ADDR
58012: GO 58030
// min_x := x - r ;
58014: LD_ADDR_VAR 0 7
58018: PUSH
58019: LD_VAR 0 2
58023: PUSH
58024: LD_VAR 0 4
58028: MINUS
58029: ST_TO_ADDR
// if y - r < 0 then
58030: LD_VAR 0 3
58034: PUSH
58035: LD_VAR 0 4
58039: MINUS
58040: PUSH
58041: LD_INT 0
58043: LESS
58044: IFFALSE 58056
// min_y := 0 else
58046: LD_ADDR_VAR 0 8
58050: PUSH
58051: LD_INT 0
58053: ST_TO_ADDR
58054: GO 58072
// min_y := y - r ;
58056: LD_ADDR_VAR 0 8
58060: PUSH
58061: LD_VAR 0 3
58065: PUSH
58066: LD_VAR 0 4
58070: MINUS
58071: ST_TO_ADDR
// max_x := x + r ;
58072: LD_ADDR_VAR 0 9
58076: PUSH
58077: LD_VAR 0 2
58081: PUSH
58082: LD_VAR 0 4
58086: PLUS
58087: ST_TO_ADDR
// max_y := y + r ;
58088: LD_ADDR_VAR 0 10
58092: PUSH
58093: LD_VAR 0 3
58097: PUSH
58098: LD_VAR 0 4
58102: PLUS
58103: ST_TO_ADDR
// for _x = min_x to max_x do
58104: LD_ADDR_VAR 0 11
58108: PUSH
58109: DOUBLE
58110: LD_VAR 0 7
58114: DEC
58115: ST_TO_ADDR
58116: LD_VAR 0 9
58120: PUSH
58121: FOR_TO
58122: IFFALSE 58241
// for _y = min_y to max_y do
58124: LD_ADDR_VAR 0 12
58128: PUSH
58129: DOUBLE
58130: LD_VAR 0 8
58134: DEC
58135: ST_TO_ADDR
58136: LD_VAR 0 10
58140: PUSH
58141: FOR_TO
58142: IFFALSE 58237
// begin if not ValidHex ( _x , _y ) then
58144: LD_VAR 0 11
58148: PPUSH
58149: LD_VAR 0 12
58153: PPUSH
58154: CALL_OW 488
58158: NOT
58159: IFFALSE 58163
// continue ;
58161: GO 58141
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58163: LD_VAR 0 11
58167: PPUSH
58168: LD_VAR 0 12
58172: PPUSH
58173: CALL_OW 351
58177: IFFALSE 58195
58179: PUSH
58180: LD_VAR 0 11
58184: PPUSH
58185: LD_VAR 0 12
58189: PPUSH
58190: CALL_OW 554
58194: AND
58195: IFFALSE 58235
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58197: LD_ADDR_VAR 0 13
58201: PUSH
58202: LD_VAR 0 13
58206: PPUSH
58207: LD_VAR 0 13
58211: PUSH
58212: LD_INT 1
58214: PLUS
58215: PPUSH
58216: LD_VAR 0 11
58220: PUSH
58221: LD_VAR 0 12
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PPUSH
58230: CALL_OW 2
58234: ST_TO_ADDR
// end ;
58235: GO 58141
58237: POP
58238: POP
58239: GO 58121
58241: POP
58242: POP
// if not list then
58243: LD_VAR 0 13
58247: NOT
58248: IFFALSE 58252
// exit ;
58250: GO 58498
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58252: LD_ADDR_VAR 0 13
58256: PUSH
58257: LD_VAR 0 1
58261: PPUSH
58262: LD_VAR 0 13
58266: PPUSH
58267: LD_INT 1
58269: PPUSH
58270: LD_INT 1
58272: PPUSH
58273: CALL 8622 0 4
58277: ST_TO_ADDR
// ComStop ( flame ) ;
58278: LD_VAR 0 1
58282: PPUSH
58283: CALL_OW 141
// for i in list do
58287: LD_ADDR_VAR 0 6
58291: PUSH
58292: LD_VAR 0 13
58296: PUSH
58297: FOR_IN
58298: IFFALSE 58329
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
58300: LD_VAR 0 1
58304: PPUSH
58305: LD_VAR 0 6
58309: PUSH
58310: LD_INT 1
58312: ARRAY
58313: PPUSH
58314: LD_VAR 0 6
58318: PUSH
58319: LD_INT 2
58321: ARRAY
58322: PPUSH
58323: CALL_OW 176
58327: GO 58297
58329: POP
58330: POP
// repeat wait ( 0 0$1 ) ;
58331: LD_INT 35
58333: PPUSH
58334: CALL_OW 67
// task := GetTaskList ( flame ) ;
58338: LD_ADDR_VAR 0 14
58342: PUSH
58343: LD_VAR 0 1
58347: PPUSH
58348: CALL_OW 437
58352: ST_TO_ADDR
// if not task then
58353: LD_VAR 0 14
58357: NOT
58358: IFFALSE 58362
// exit ;
58360: GO 58498
// if task [ 1 ] [ 1 ] <> | then
58362: LD_VAR 0 14
58366: PUSH
58367: LD_INT 1
58369: ARRAY
58370: PUSH
58371: LD_INT 1
58373: ARRAY
58374: PUSH
58375: LD_STRING |
58377: NONEQUAL
58378: IFFALSE 58382
// exit ;
58380: GO 58498
// _x := task [ 1 ] [ 2 ] ;
58382: LD_ADDR_VAR 0 11
58386: PUSH
58387: LD_VAR 0 14
58391: PUSH
58392: LD_INT 1
58394: ARRAY
58395: PUSH
58396: LD_INT 2
58398: ARRAY
58399: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
58400: LD_ADDR_VAR 0 12
58404: PUSH
58405: LD_VAR 0 14
58409: PUSH
58410: LD_INT 1
58412: ARRAY
58413: PUSH
58414: LD_INT 3
58416: ARRAY
58417: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
58418: LD_VAR 0 11
58422: PPUSH
58423: LD_VAR 0 12
58427: PPUSH
58428: CALL_OW 351
58432: NOT
58433: IFTRUE 58452
58435: PUSH
58436: LD_VAR 0 11
58440: PPUSH
58441: LD_VAR 0 12
58445: PPUSH
58446: CALL_OW 554
58450: NOT
58451: OR
58452: IFFALSE 58486
// begin task := Delete ( task , 1 ) ;
58454: LD_ADDR_VAR 0 14
58458: PUSH
58459: LD_VAR 0 14
58463: PPUSH
58464: LD_INT 1
58466: PPUSH
58467: CALL_OW 3
58471: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
58472: LD_VAR 0 1
58476: PPUSH
58477: LD_VAR 0 14
58481: PPUSH
58482: CALL_OW 446
// end ; until not HasTask ( flame ) ;
58486: LD_VAR 0 1
58490: PPUSH
58491: CALL_OW 314
58495: NOT
58496: IFFALSE 58331
// end ;
58498: LD_VAR 0 5
58502: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
58503: LD_EXP 48
58507: NOT
58508: IFFALSE 58558
58510: GO 58512
58512: DISABLE
// begin initHack := true ;
58513: LD_ADDR_EXP 48
58517: PUSH
58518: LD_INT 1
58520: ST_TO_ADDR
// hackTanks := [ ] ;
58521: LD_ADDR_EXP 49
58525: PUSH
58526: EMPTY
58527: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
58528: LD_ADDR_EXP 50
58532: PUSH
58533: EMPTY
58534: ST_TO_ADDR
// hackLimit := 3 ;
58535: LD_ADDR_EXP 51
58539: PUSH
58540: LD_INT 3
58542: ST_TO_ADDR
// hackDist := 12 ;
58543: LD_ADDR_EXP 52
58547: PUSH
58548: LD_INT 12
58550: ST_TO_ADDR
// hackCounter := [ ] ;
58551: LD_ADDR_EXP 53
58555: PUSH
58556: EMPTY
58557: ST_TO_ADDR
// end ;
58558: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
58559: LD_EXP 48
58563: IFFALSE 58581
58565: PUSH
58566: LD_INT 34
58568: PUSH
58569: LD_INT 99
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PPUSH
58576: CALL_OW 69
58580: AND
58581: IFFALSE 58834
58583: GO 58585
58585: DISABLE
58586: LD_INT 0
58588: PPUSH
58589: PPUSH
// begin enable ;
58590: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
58591: LD_ADDR_VAR 0 1
58595: PUSH
58596: LD_INT 34
58598: PUSH
58599: LD_INT 99
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PPUSH
58606: CALL_OW 69
58610: PUSH
58611: FOR_IN
58612: IFFALSE 58832
// begin if not i in hackTanks then
58614: LD_VAR 0 1
58618: PUSH
58619: LD_EXP 49
58623: IN
58624: NOT
58625: IFFALSE 58708
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
58627: LD_ADDR_EXP 49
58631: PUSH
58632: LD_EXP 49
58636: PPUSH
58637: LD_EXP 49
58641: PUSH
58642: LD_INT 1
58644: PLUS
58645: PPUSH
58646: LD_VAR 0 1
58650: PPUSH
58651: CALL_OW 1
58655: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
58656: LD_ADDR_EXP 50
58660: PUSH
58661: LD_EXP 50
58665: PPUSH
58666: LD_EXP 50
58670: PUSH
58671: LD_INT 1
58673: PLUS
58674: PPUSH
58675: EMPTY
58676: PPUSH
58677: CALL_OW 1
58681: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
58682: LD_ADDR_EXP 53
58686: PUSH
58687: LD_EXP 53
58691: PPUSH
58692: LD_EXP 53
58696: PUSH
58697: LD_INT 1
58699: PLUS
58700: PPUSH
58701: EMPTY
58702: PPUSH
58703: CALL_OW 1
58707: ST_TO_ADDR
// end ; if not IsOk ( i ) then
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL_OW 302
58717: NOT
58718: IFFALSE 58731
// begin HackUnlinkAll ( i ) ;
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL 58837 0 1
// continue ;
58729: GO 58611
// end ; HackCheckCapturedStatus ( i ) ;
58731: LD_VAR 0 1
58735: PPUSH
58736: CALL 59282 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
58740: LD_ADDR_VAR 0 2
58744: PUSH
58745: LD_INT 81
58747: PUSH
58748: LD_VAR 0 1
58752: PPUSH
58753: CALL_OW 255
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 33
58764: PUSH
58765: LD_INT 3
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 91
58774: PUSH
58775: LD_VAR 0 1
58779: PUSH
58780: LD_EXP 52
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 50
58792: PUSH
58793: EMPTY
58794: LIST
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: PPUSH
58802: CALL_OW 69
58806: ST_TO_ADDR
// if not tmp then
58807: LD_VAR 0 2
58811: NOT
58812: IFFALSE 58816
// continue ;
58814: GO 58611
// HackLink ( i , tmp ) ;
58816: LD_VAR 0 1
58820: PPUSH
58821: LD_VAR 0 2
58825: PPUSH
58826: CALL 58973 0 2
// end ;
58830: GO 58611
58832: POP
58833: POP
// end ;
58834: PPOPN 2
58836: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58837: LD_INT 0
58839: PPUSH
58840: PPUSH
58841: PPUSH
// if not hack in hackTanks then
58842: LD_VAR 0 1
58846: PUSH
58847: LD_EXP 49
58851: IN
58852: NOT
58853: IFFALSE 58857
// exit ;
58855: GO 58968
// index := GetElementIndex ( hackTanks , hack ) ;
58857: LD_ADDR_VAR 0 4
58861: PUSH
58862: LD_EXP 49
58866: PPUSH
58867: LD_VAR 0 1
58871: PPUSH
58872: CALL 7917 0 2
58876: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58877: LD_EXP 50
58881: PUSH
58882: LD_VAR 0 4
58886: ARRAY
58887: IFFALSE 58968
// begin for i in hackTanksCaptured [ index ] do
58889: LD_ADDR_VAR 0 3
58893: PUSH
58894: LD_EXP 50
58898: PUSH
58899: LD_VAR 0 4
58903: ARRAY
58904: PUSH
58905: FOR_IN
58906: IFFALSE 58932
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58908: LD_VAR 0 3
58912: PUSH
58913: LD_INT 1
58915: ARRAY
58916: PPUSH
58917: LD_VAR 0 3
58921: PUSH
58922: LD_INT 2
58924: ARRAY
58925: PPUSH
58926: CALL_OW 235
58930: GO 58905
58932: POP
58933: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58934: LD_ADDR_EXP 50
58938: PUSH
58939: LD_EXP 50
58943: PPUSH
58944: LD_VAR 0 4
58948: PPUSH
58949: EMPTY
58950: PPUSH
58951: CALL_OW 1
58955: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58956: LD_VAR 0 1
58960: PPUSH
58961: LD_INT 0
58963: PPUSH
58964: CALL_OW 505
// end ; end ;
58968: LD_VAR 0 2
58972: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58973: LD_INT 0
58975: PPUSH
58976: PPUSH
58977: PPUSH
// if not hack in hackTanks or not vehicles then
58978: LD_VAR 0 1
58982: PUSH
58983: LD_EXP 49
58987: IN
58988: NOT
58989: IFTRUE 58998
58991: PUSH
58992: LD_VAR 0 2
58996: NOT
58997: OR
58998: IFFALSE 59002
// exit ;
59000: GO 59277
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59002: LD_ADDR_VAR 0 2
59006: PUSH
59007: LD_VAR 0 1
59011: PPUSH
59012: LD_VAR 0 2
59016: PPUSH
59017: LD_INT 1
59019: PPUSH
59020: LD_INT 1
59022: PPUSH
59023: CALL 8569 0 4
59027: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59028: LD_ADDR_VAR 0 5
59032: PUSH
59033: LD_EXP 49
59037: PPUSH
59038: LD_VAR 0 1
59042: PPUSH
59043: CALL 7917 0 2
59047: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59048: LD_EXP 50
59052: PUSH
59053: LD_VAR 0 5
59057: ARRAY
59058: PUSH
59059: LD_EXP 51
59063: LESS
59064: IFFALSE 59253
// begin for i := 1 to vehicles do
59066: LD_ADDR_VAR 0 4
59070: PUSH
59071: DOUBLE
59072: LD_INT 1
59074: DEC
59075: ST_TO_ADDR
59076: LD_VAR 0 2
59080: PUSH
59081: FOR_TO
59082: IFFALSE 59251
// begin if hackTanksCaptured [ index ] = hackLimit then
59084: LD_EXP 50
59088: PUSH
59089: LD_VAR 0 5
59093: ARRAY
59094: PUSH
59095: LD_EXP 51
59099: EQUAL
59100: IFFALSE 59104
// break ;
59102: GO 59251
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59104: LD_ADDR_EXP 53
59108: PUSH
59109: LD_EXP 53
59113: PPUSH
59114: LD_VAR 0 5
59118: PPUSH
59119: LD_EXP 53
59123: PUSH
59124: LD_VAR 0 5
59128: ARRAY
59129: PUSH
59130: LD_INT 1
59132: PLUS
59133: PPUSH
59134: CALL_OW 1
59138: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59139: LD_ADDR_EXP 50
59143: PUSH
59144: LD_EXP 50
59148: PPUSH
59149: LD_VAR 0 5
59153: PUSH
59154: LD_EXP 50
59158: PUSH
59159: LD_VAR 0 5
59163: ARRAY
59164: PUSH
59165: LD_INT 1
59167: PLUS
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PPUSH
59173: LD_VAR 0 2
59177: PUSH
59178: LD_VAR 0 4
59182: ARRAY
59183: PUSH
59184: LD_VAR 0 2
59188: PUSH
59189: LD_VAR 0 4
59193: ARRAY
59194: PPUSH
59195: CALL_OW 255
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PPUSH
59204: CALL 8134 0 3
59208: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59209: LD_VAR 0 2
59213: PUSH
59214: LD_VAR 0 4
59218: ARRAY
59219: PPUSH
59220: LD_VAR 0 1
59224: PPUSH
59225: CALL_OW 255
59229: PPUSH
59230: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59234: LD_VAR 0 2
59238: PUSH
59239: LD_VAR 0 4
59243: ARRAY
59244: PPUSH
59245: CALL_OW 141
// end ;
59249: GO 59081
59251: POP
59252: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59253: LD_VAR 0 1
59257: PPUSH
59258: LD_EXP 50
59262: PUSH
59263: LD_VAR 0 5
59267: ARRAY
59268: PUSH
59269: LD_INT 0
59271: PLUS
59272: PPUSH
59273: CALL_OW 505
// end ;
59277: LD_VAR 0 3
59281: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
59282: LD_INT 0
59284: PPUSH
59285: PPUSH
59286: PPUSH
59287: PPUSH
// if not hack in hackTanks then
59288: LD_VAR 0 1
59292: PUSH
59293: LD_EXP 49
59297: IN
59298: NOT
59299: IFFALSE 59303
// exit ;
59301: GO 59547
// index := GetElementIndex ( hackTanks , hack ) ;
59303: LD_ADDR_VAR 0 4
59307: PUSH
59308: LD_EXP 49
59312: PPUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: CALL 7917 0 2
59322: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
59323: LD_ADDR_VAR 0 3
59327: PUSH
59328: DOUBLE
59329: LD_EXP 50
59333: PUSH
59334: LD_VAR 0 4
59338: ARRAY
59339: INC
59340: ST_TO_ADDR
59341: LD_INT 1
59343: PUSH
59344: FOR_DOWNTO
59345: IFFALSE 59521
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
59347: LD_ADDR_VAR 0 5
59351: PUSH
59352: LD_EXP 50
59356: PUSH
59357: LD_VAR 0 4
59361: ARRAY
59362: PUSH
59363: LD_VAR 0 3
59367: ARRAY
59368: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
59369: LD_VAR 0 5
59373: PUSH
59374: LD_INT 1
59376: ARRAY
59377: PPUSH
59378: CALL_OW 302
59382: NOT
59383: IFTRUE 59411
59385: PUSH
59386: LD_VAR 0 5
59390: PUSH
59391: LD_INT 1
59393: ARRAY
59394: PPUSH
59395: CALL_OW 255
59399: PUSH
59400: LD_VAR 0 1
59404: PPUSH
59405: CALL_OW 255
59409: NONEQUAL
59410: OR
59411: IFFALSE 59519
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
59413: LD_VAR 0 5
59417: PUSH
59418: LD_INT 1
59420: ARRAY
59421: PPUSH
59422: CALL_OW 305
59426: IFFALSE 59454
59428: PUSH
59429: LD_VAR 0 5
59433: PUSH
59434: LD_INT 1
59436: ARRAY
59437: PPUSH
59438: CALL_OW 255
59442: PUSH
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 255
59452: EQUAL
59453: AND
59454: IFFALSE 59478
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
59456: LD_VAR 0 5
59460: PUSH
59461: LD_INT 1
59463: ARRAY
59464: PPUSH
59465: LD_VAR 0 5
59469: PUSH
59470: LD_INT 2
59472: ARRAY
59473: PPUSH
59474: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
59478: LD_ADDR_EXP 50
59482: PUSH
59483: LD_EXP 50
59487: PPUSH
59488: LD_VAR 0 4
59492: PPUSH
59493: LD_EXP 50
59497: PUSH
59498: LD_VAR 0 4
59502: ARRAY
59503: PPUSH
59504: LD_VAR 0 3
59508: PPUSH
59509: CALL_OW 3
59513: PPUSH
59514: CALL_OW 1
59518: ST_TO_ADDR
// end ; end ;
59519: GO 59344
59521: POP
59522: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59523: LD_VAR 0 1
59527: PPUSH
59528: LD_EXP 50
59532: PUSH
59533: LD_VAR 0 4
59537: ARRAY
59538: PUSH
59539: LD_INT 0
59541: PLUS
59542: PPUSH
59543: CALL_OW 505
// end ;
59547: LD_VAR 0 2
59551: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
59552: LD_INT 0
59554: PPUSH
59555: PPUSH
59556: PPUSH
59557: PPUSH
// if not hack in hackTanks then
59558: LD_VAR 0 1
59562: PUSH
59563: LD_EXP 49
59567: IN
59568: NOT
59569: IFFALSE 59573
// exit ;
59571: GO 59658
// index := GetElementIndex ( hackTanks , hack ) ;
59573: LD_ADDR_VAR 0 5
59577: PUSH
59578: LD_EXP 49
59582: PPUSH
59583: LD_VAR 0 1
59587: PPUSH
59588: CALL 7917 0 2
59592: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
59593: LD_ADDR_VAR 0 4
59597: PUSH
59598: DOUBLE
59599: LD_INT 1
59601: DEC
59602: ST_TO_ADDR
59603: LD_EXP 50
59607: PUSH
59608: LD_VAR 0 5
59612: ARRAY
59613: PUSH
59614: FOR_TO
59615: IFFALSE 59656
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
59617: LD_EXP 50
59621: PUSH
59622: LD_VAR 0 5
59626: ARRAY
59627: PUSH
59628: LD_VAR 0 4
59632: ARRAY
59633: PUSH
59634: LD_INT 1
59636: ARRAY
59637: PUSH
59638: LD_VAR 0 2
59642: EQUAL
59643: IFFALSE 59654
// KillUnit ( vehicle ) ;
59645: LD_VAR 0 2
59649: PPUSH
59650: CALL_OW 66
59654: GO 59614
59656: POP
59657: POP
// end ;
59658: LD_VAR 0 3
59662: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
59663: LD_EXP 54
59667: NOT
59668: IFFALSE 59801
59670: GO 59672
59672: DISABLE
59673: LD_INT 0
59675: PPUSH
// begin initMiner := true ;
59676: LD_ADDR_EXP 54
59680: PUSH
59681: LD_INT 1
59683: ST_TO_ADDR
// minersList := [ ] ;
59684: LD_ADDR_EXP 55
59688: PUSH
59689: EMPTY
59690: ST_TO_ADDR
// minerMinesList := [ ] ;
59691: LD_ADDR_EXP 56
59695: PUSH
59696: EMPTY
59697: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
59698: LD_ADDR_EXP 57
59702: PUSH
59703: LD_INT 6
59705: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
59706: LD_ADDR_VAR 0 1
59710: PUSH
59711: LD_INT 34
59713: PUSH
59714: LD_INT 81
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PPUSH
59721: CALL_OW 69
59725: PUSH
59726: FOR_IN
59727: IFFALSE 59799
// begin if not i in minersList then
59729: LD_VAR 0 1
59733: PUSH
59734: LD_EXP 55
59738: IN
59739: NOT
59740: IFFALSE 59797
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59742: LD_ADDR_EXP 55
59746: PUSH
59747: LD_EXP 55
59751: PPUSH
59752: LD_EXP 55
59756: PUSH
59757: LD_INT 1
59759: PLUS
59760: PPUSH
59761: LD_VAR 0 1
59765: PPUSH
59766: CALL_OW 1
59770: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59771: LD_ADDR_EXP 56
59775: PUSH
59776: LD_EXP 56
59780: PPUSH
59781: LD_EXP 56
59785: PUSH
59786: LD_INT 1
59788: PLUS
59789: PPUSH
59790: EMPTY
59791: PPUSH
59792: CALL_OW 1
59796: ST_TO_ADDR
// end end ;
59797: GO 59726
59799: POP
59800: POP
// end ;
59801: PPOPN 1
59803: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
59804: LD_EXP 54
59808: IFFALSE 59839
59810: PUSH
59811: LD_EXP 56
59815: PPUSH
59816: CALL 5216 0 1
59820: IFTRUE 59838
59822: PUSH
59823: LD_INT 34
59825: PUSH
59826: LD_INT 81
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PPUSH
59833: CALL_OW 69
59837: OR
59838: AND
59839: IFFALSE 60338
59841: GO 59843
59843: DISABLE
59844: LD_INT 0
59846: PPUSH
59847: PPUSH
59848: PPUSH
59849: PPUSH
// begin enable ;
59850: ENABLE
// for i := minerMinesList downto 1 do
59851: LD_ADDR_VAR 0 1
59855: PUSH
59856: DOUBLE
59857: LD_EXP 56
59861: INC
59862: ST_TO_ADDR
59863: LD_INT 1
59865: PUSH
59866: FOR_DOWNTO
59867: IFFALSE 60336
// begin if IsLive ( minersList [ i ] ) then
59869: LD_EXP 55
59873: PUSH
59874: LD_VAR 0 1
59878: ARRAY
59879: PPUSH
59880: CALL_OW 300
59884: IFFALSE 59917
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
59886: LD_EXP 55
59890: PUSH
59891: LD_VAR 0 1
59895: ARRAY
59896: PPUSH
59897: LD_EXP 56
59901: PUSH
59902: LD_VAR 0 1
59906: ARRAY
59907: PPUSH
59908: CALL 5216 0 1
59912: PPUSH
59913: CALL_OW 505
// if not minerMinesList [ i ] then
59917: LD_EXP 56
59921: PUSH
59922: LD_VAR 0 1
59926: ARRAY
59927: NOT
59928: IFFALSE 59932
// continue ;
59930: GO 59866
// for j := minerMinesList [ i ] downto 1 do
59932: LD_ADDR_VAR 0 2
59936: PUSH
59937: DOUBLE
59938: LD_EXP 56
59942: PUSH
59943: LD_VAR 0 1
59947: ARRAY
59948: INC
59949: ST_TO_ADDR
59950: LD_INT 1
59952: PUSH
59953: FOR_DOWNTO
59954: IFFALSE 60332
// begin side := GetSide ( minersList [ i ] ) ;
59956: LD_ADDR_VAR 0 3
59960: PUSH
59961: LD_EXP 55
59965: PUSH
59966: LD_VAR 0 1
59970: ARRAY
59971: PPUSH
59972: CALL_OW 255
59976: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
59977: LD_EXP 55
59981: PUSH
59982: LD_VAR 0 1
59986: ARRAY
59987: PPUSH
59988: CALL_OW 301
59992: IFTRUE 60012
59994: PUSH
59995: LD_EXP 55
59999: PUSH
60000: LD_VAR 0 1
60004: ARRAY
60005: PPUSH
60006: CALL_OW 305
60010: NOT
60011: OR
60012: IFFALSE 60103
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60014: LD_EXP 56
60018: PUSH
60019: LD_VAR 0 1
60023: ARRAY
60024: PUSH
60025: LD_VAR 0 2
60029: ARRAY
60030: PUSH
60031: LD_INT 1
60033: ARRAY
60034: PPUSH
60035: LD_EXP 56
60039: PUSH
60040: LD_VAR 0 1
60044: ARRAY
60045: PUSH
60046: LD_VAR 0 2
60050: ARRAY
60051: PUSH
60052: LD_INT 2
60054: ARRAY
60055: PPUSH
60056: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60060: LD_ADDR_EXP 56
60064: PUSH
60065: LD_EXP 56
60069: PPUSH
60070: LD_VAR 0 1
60074: PPUSH
60075: LD_EXP 56
60079: PUSH
60080: LD_VAR 0 1
60084: ARRAY
60085: PPUSH
60086: LD_VAR 0 2
60090: PPUSH
60091: CALL_OW 3
60095: PPUSH
60096: CALL_OW 1
60100: ST_TO_ADDR
// continue ;
60101: GO 59953
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60103: LD_ADDR_VAR 0 4
60107: PUSH
60108: LD_EXP 56
60112: PUSH
60113: LD_VAR 0 1
60117: ARRAY
60118: PUSH
60119: LD_VAR 0 2
60123: ARRAY
60124: PUSH
60125: LD_INT 1
60127: ARRAY
60128: PPUSH
60129: LD_EXP 56
60133: PUSH
60134: LD_VAR 0 1
60138: ARRAY
60139: PUSH
60140: LD_VAR 0 2
60144: ARRAY
60145: PUSH
60146: LD_INT 2
60148: ARRAY
60149: PPUSH
60150: CALL_OW 428
60154: ST_TO_ADDR
// if not tmp then
60155: LD_VAR 0 4
60159: NOT
60160: IFFALSE 60164
// continue ;
60162: GO 59953
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60164: LD_VAR 0 4
60168: PUSH
60169: LD_INT 81
60171: PUSH
60172: LD_VAR 0 3
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PPUSH
60181: CALL_OW 69
60185: IN
60186: IFFALSE 60236
60188: PUSH
60189: LD_EXP 56
60193: PUSH
60194: LD_VAR 0 1
60198: ARRAY
60199: PUSH
60200: LD_VAR 0 2
60204: ARRAY
60205: PUSH
60206: LD_INT 1
60208: ARRAY
60209: PPUSH
60210: LD_EXP 56
60214: PUSH
60215: LD_VAR 0 1
60219: ARRAY
60220: PUSH
60221: LD_VAR 0 2
60225: ARRAY
60226: PUSH
60227: LD_INT 2
60229: ARRAY
60230: PPUSH
60231: CALL_OW 458
60235: AND
60236: IFFALSE 60330
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60238: LD_EXP 56
60242: PUSH
60243: LD_VAR 0 1
60247: ARRAY
60248: PUSH
60249: LD_VAR 0 2
60253: ARRAY
60254: PUSH
60255: LD_INT 1
60257: ARRAY
60258: PPUSH
60259: LD_EXP 56
60263: PUSH
60264: LD_VAR 0 1
60268: ARRAY
60269: PUSH
60270: LD_VAR 0 2
60274: ARRAY
60275: PUSH
60276: LD_INT 2
60278: ARRAY
60279: PPUSH
60280: LD_VAR 0 3
60284: PPUSH
60285: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60289: LD_ADDR_EXP 56
60293: PUSH
60294: LD_EXP 56
60298: PPUSH
60299: LD_VAR 0 1
60303: PPUSH
60304: LD_EXP 56
60308: PUSH
60309: LD_VAR 0 1
60313: ARRAY
60314: PPUSH
60315: LD_VAR 0 2
60319: PPUSH
60320: CALL_OW 3
60324: PPUSH
60325: CALL_OW 1
60329: ST_TO_ADDR
// end ; end ;
60330: GO 59953
60332: POP
60333: POP
// end ;
60334: GO 59866
60336: POP
60337: POP
// end ;
60338: PPOPN 4
60340: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
60341: LD_INT 0
60343: PPUSH
60344: PPUSH
60345: PPUSH
60346: PPUSH
// result := false ;
60347: LD_ADDR_VAR 0 4
60351: PUSH
60352: LD_INT 0
60354: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
60355: LD_VAR 0 1
60359: PPUSH
60360: CALL_OW 264
60364: PUSH
60365: LD_INT 81
60367: EQUAL
60368: NOT
60369: IFFALSE 60373
// exit ;
60371: GO 60743
// side := GetSide ( unit ) ;
60373: LD_ADDR_VAR 0 6
60377: PUSH
60378: LD_VAR 0 1
60382: PPUSH
60383: CALL_OW 255
60387: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
60388: LD_ADDR_VAR 0 5
60392: PUSH
60393: LD_EXP 55
60397: PPUSH
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL 7917 0 2
60407: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
60408: LD_EXP 56
60412: PUSH
60413: LD_VAR 0 5
60417: ARRAY
60418: PUSH
60419: LD_EXP 57
60423: GREATEREQUAL
60424: IFFALSE 60428
// exit ;
60426: GO 60743
// ComMoveXY ( unit , x , y ) ;
60428: LD_VAR 0 1
60432: PPUSH
60433: LD_VAR 0 2
60437: PPUSH
60438: LD_VAR 0 3
60442: PPUSH
60443: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60447: LD_INT 35
60449: PPUSH
60450: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
60454: LD_VAR 0 1
60458: PPUSH
60459: LD_VAR 0 2
60463: PPUSH
60464: LD_VAR 0 3
60468: PPUSH
60469: CALL 39963 0 3
60473: NOT
60474: IFFALSE 60487
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 314
60486: AND
60487: IFFALSE 60491
// exit ;
60489: GO 60743
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
60491: LD_VAR 0 2
60495: PPUSH
60496: LD_VAR 0 3
60500: PPUSH
60501: CALL_OW 428
60505: PUSH
60506: LD_VAR 0 1
60510: EQUAL
60511: IFFALSE 60525
60513: PUSH
60514: LD_VAR 0 1
60518: PPUSH
60519: CALL_OW 314
60523: NOT
60524: AND
60525: IFFALSE 60447
// if MineAtPos ( x , y ) then
60527: LD_VAR 0 2
60531: PPUSH
60532: LD_VAR 0 3
60536: PPUSH
60537: CALL_OW 458
60541: IFFALSE 60545
// exit ;
60543: GO 60743
// if your_side = side then
60545: LD_OWVAR 2
60549: PUSH
60550: LD_VAR 0 6
60554: EQUAL
60555: IFFALSE 60574
// PlaySoundXY ( x , y , PlantMine ) ;
60557: LD_VAR 0 2
60561: PPUSH
60562: LD_VAR 0 3
60566: PPUSH
60567: LD_STRING PlantMine
60569: PPUSH
60570: CALL_OW 366
// repeat wait ( 1 ) ;
60574: LD_INT 1
60576: PPUSH
60577: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
60581: LD_VAR 0 2
60585: PPUSH
60586: LD_VAR 0 3
60590: PPUSH
60591: LD_VAR 0 6
60595: PPUSH
60596: LD_INT 0
60598: PPUSH
60599: CALL_OW 454
60603: IFFALSE 60574
// if MineAtPos ( x , y ) then
60605: LD_VAR 0 2
60609: PPUSH
60610: LD_VAR 0 3
60614: PPUSH
60615: CALL_OW 458
60619: IFFALSE 60735
// begin for i in minerMinesList [ index ] do
60621: LD_ADDR_VAR 0 7
60625: PUSH
60626: LD_EXP 56
60630: PUSH
60631: LD_VAR 0 5
60635: ARRAY
60636: PUSH
60637: FOR_IN
60638: IFFALSE 60680
// if i [ 1 ] = x and i [ 2 ] = y then
60640: LD_VAR 0 7
60644: PUSH
60645: LD_INT 1
60647: ARRAY
60648: PUSH
60649: LD_VAR 0 2
60653: EQUAL
60654: IFFALSE 60672
60656: PUSH
60657: LD_VAR 0 7
60661: PUSH
60662: LD_INT 2
60664: ARRAY
60665: PUSH
60666: LD_VAR 0 3
60670: EQUAL
60671: AND
60672: IFFALSE 60678
// exit ;
60674: POP
60675: POP
60676: GO 60743
60678: GO 60637
60680: POP
60681: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
60682: LD_ADDR_EXP 56
60686: PUSH
60687: LD_EXP 56
60691: PPUSH
60692: LD_VAR 0 5
60696: PUSH
60697: LD_EXP 56
60701: PUSH
60702: LD_VAR 0 5
60706: ARRAY
60707: PUSH
60708: LD_INT 1
60710: PLUS
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PPUSH
60716: LD_VAR 0 2
60720: PUSH
60721: LD_VAR 0 3
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PPUSH
60730: CALL 8134 0 3
60734: ST_TO_ADDR
// end ; result := true ;
60735: LD_ADDR_VAR 0 4
60739: PUSH
60740: LD_INT 1
60742: ST_TO_ADDR
// end ;
60743: LD_VAR 0 4
60747: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
60748: LD_INT 0
60750: PPUSH
60751: PPUSH
60752: PPUSH
// if not unit in minersList then
60753: LD_VAR 0 1
60757: PUSH
60758: LD_EXP 55
60762: IN
60763: NOT
60764: IFFALSE 60768
// exit ;
60766: GO 60975
// index := GetElementIndex ( minersList , unit ) ;
60768: LD_ADDR_VAR 0 6
60772: PUSH
60773: LD_EXP 55
60777: PPUSH
60778: LD_VAR 0 1
60782: PPUSH
60783: CALL 7917 0 2
60787: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
60788: LD_ADDR_VAR 0 5
60792: PUSH
60793: DOUBLE
60794: LD_EXP 56
60798: PUSH
60799: LD_VAR 0 6
60803: ARRAY
60804: INC
60805: ST_TO_ADDR
60806: LD_INT 1
60808: PUSH
60809: FOR_DOWNTO
60810: IFFALSE 60973
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
60812: LD_EXP 56
60816: PUSH
60817: LD_VAR 0 6
60821: ARRAY
60822: PUSH
60823: LD_VAR 0 5
60827: ARRAY
60828: PUSH
60829: LD_INT 1
60831: ARRAY
60832: PPUSH
60833: LD_EXP 56
60837: PUSH
60838: LD_VAR 0 6
60842: ARRAY
60843: PUSH
60844: LD_VAR 0 5
60848: ARRAY
60849: PUSH
60850: LD_INT 2
60852: ARRAY
60853: PPUSH
60854: LD_VAR 0 2
60858: PPUSH
60859: LD_VAR 0 3
60863: PPUSH
60864: CALL_OW 298
60868: PUSH
60869: LD_INT 6
60871: LESS
60872: IFFALSE 60971
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60874: LD_EXP 56
60878: PUSH
60879: LD_VAR 0 6
60883: ARRAY
60884: PUSH
60885: LD_VAR 0 5
60889: ARRAY
60890: PUSH
60891: LD_INT 1
60893: ARRAY
60894: PPUSH
60895: LD_EXP 56
60899: PUSH
60900: LD_VAR 0 6
60904: ARRAY
60905: PUSH
60906: LD_VAR 0 5
60910: ARRAY
60911: PUSH
60912: LD_INT 2
60914: ARRAY
60915: PPUSH
60916: LD_VAR 0 1
60920: PPUSH
60921: CALL_OW 255
60925: PPUSH
60926: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60930: LD_ADDR_EXP 56
60934: PUSH
60935: LD_EXP 56
60939: PPUSH
60940: LD_VAR 0 6
60944: PPUSH
60945: LD_EXP 56
60949: PUSH
60950: LD_VAR 0 6
60954: ARRAY
60955: PPUSH
60956: LD_VAR 0 5
60960: PPUSH
60961: CALL_OW 3
60965: PPUSH
60966: CALL_OW 1
60970: ST_TO_ADDR
// end ; end ;
60971: GO 60809
60973: POP
60974: POP
// end ;
60975: LD_VAR 0 4
60979: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60980: LD_INT 0
60982: PPUSH
60983: PPUSH
60984: PPUSH
60985: PPUSH
60986: PPUSH
60987: PPUSH
60988: PPUSH
60989: PPUSH
60990: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60991: LD_VAR 0 1
60995: PPUSH
60996: CALL_OW 264
61000: PUSH
61001: LD_INT 81
61003: EQUAL
61004: NOT
61005: IFTRUE 61020
61007: PUSH
61008: LD_VAR 0 1
61012: PUSH
61013: LD_EXP 55
61017: IN
61018: NOT
61019: OR
61020: IFFALSE 61024
// exit ;
61022: GO 61350
// index := GetElementIndex ( minersList , unit ) ;
61024: LD_ADDR_VAR 0 6
61028: PUSH
61029: LD_EXP 55
61033: PPUSH
61034: LD_VAR 0 1
61038: PPUSH
61039: CALL 7917 0 2
61043: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61044: LD_ADDR_VAR 0 8
61048: PUSH
61049: LD_EXP 57
61053: PUSH
61054: LD_EXP 56
61058: PUSH
61059: LD_VAR 0 6
61063: ARRAY
61064: MINUS
61065: ST_TO_ADDR
// if not minesFreeAmount then
61066: LD_VAR 0 8
61070: NOT
61071: IFFALSE 61075
// exit ;
61073: GO 61350
// tmp := [ ] ;
61075: LD_ADDR_VAR 0 7
61079: PUSH
61080: EMPTY
61081: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61082: LD_ADDR_VAR 0 5
61086: PUSH
61087: DOUBLE
61088: LD_INT 1
61090: DEC
61091: ST_TO_ADDR
61092: LD_VAR 0 8
61096: PUSH
61097: FOR_TO
61098: IFFALSE 61297
// begin _d := rand ( 0 , 5 ) ;
61100: LD_ADDR_VAR 0 11
61104: PUSH
61105: LD_INT 0
61107: PPUSH
61108: LD_INT 5
61110: PPUSH
61111: CALL_OW 12
61115: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61116: LD_ADDR_VAR 0 12
61120: PUSH
61121: LD_INT 2
61123: PPUSH
61124: LD_INT 6
61126: PPUSH
61127: CALL_OW 12
61131: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61132: LD_ADDR_VAR 0 9
61136: PUSH
61137: LD_VAR 0 2
61141: PPUSH
61142: LD_VAR 0 11
61146: PPUSH
61147: LD_VAR 0 12
61151: PPUSH
61152: CALL_OW 272
61156: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61157: LD_ADDR_VAR 0 10
61161: PUSH
61162: LD_VAR 0 3
61166: PPUSH
61167: LD_VAR 0 11
61171: PPUSH
61172: LD_VAR 0 12
61176: PPUSH
61177: CALL_OW 273
61181: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61182: LD_VAR 0 9
61186: PPUSH
61187: LD_VAR 0 10
61191: PPUSH
61192: CALL_OW 488
61196: IFFALSE 61220
61198: PUSH
61199: LD_VAR 0 9
61203: PUSH
61204: LD_VAR 0 10
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_VAR 0 7
61217: IN
61218: NOT
61219: AND
61220: IFFALSE 61239
61222: PUSH
61223: LD_VAR 0 9
61227: PPUSH
61228: LD_VAR 0 10
61232: PPUSH
61233: CALL_OW 458
61237: NOT
61238: AND
61239: IFFALSE 61281
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61241: LD_ADDR_VAR 0 7
61245: PUSH
61246: LD_VAR 0 7
61250: PPUSH
61251: LD_VAR 0 7
61255: PUSH
61256: LD_INT 1
61258: PLUS
61259: PPUSH
61260: LD_VAR 0 9
61264: PUSH
61265: LD_VAR 0 10
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PPUSH
61274: CALL_OW 1
61278: ST_TO_ADDR
61279: GO 61295
// i := i - 1 ;
61281: LD_ADDR_VAR 0 5
61285: PUSH
61286: LD_VAR 0 5
61290: PUSH
61291: LD_INT 1
61293: MINUS
61294: ST_TO_ADDR
// end ;
61295: GO 61097
61297: POP
61298: POP
// for i in tmp do
61299: LD_ADDR_VAR 0 5
61303: PUSH
61304: LD_VAR 0 7
61308: PUSH
61309: FOR_IN
61310: IFFALSE 61348
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
61312: LD_VAR 0 1
61316: PPUSH
61317: LD_VAR 0 5
61321: PUSH
61322: LD_INT 1
61324: ARRAY
61325: PPUSH
61326: LD_VAR 0 5
61330: PUSH
61331: LD_INT 2
61333: ARRAY
61334: PPUSH
61335: CALL 60341 0 3
61339: NOT
61340: IFFALSE 61346
// exit ;
61342: POP
61343: POP
61344: GO 61350
61346: GO 61309
61348: POP
61349: POP
// end ;
61350: LD_VAR 0 4
61354: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
61355: LD_INT 0
61357: PPUSH
61358: PPUSH
61359: PPUSH
61360: PPUSH
61361: PPUSH
61362: PPUSH
61363: PPUSH
61364: PPUSH
61365: PPUSH
// if GetClass ( unit ) <> class_sniper then
61366: LD_VAR 0 1
61370: PPUSH
61371: CALL_OW 257
61375: PUSH
61376: LD_INT 5
61378: NONEQUAL
61379: IFFALSE 61383
// exit ;
61381: GO 61853
// dist := 8 ;
61383: LD_ADDR_VAR 0 5
61387: PUSH
61388: LD_INT 8
61390: ST_TO_ADDR
// viewRange := 12 ;
61391: LD_ADDR_VAR 0 8
61395: PUSH
61396: LD_INT 12
61398: ST_TO_ADDR
// side := GetSide ( unit ) ;
61399: LD_ADDR_VAR 0 6
61403: PUSH
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 255
61413: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
61414: LD_INT 61
61416: PPUSH
61417: LD_VAR 0 6
61421: PPUSH
61422: CALL_OW 321
61426: PUSH
61427: LD_INT 2
61429: EQUAL
61430: IFFALSE 61440
// viewRange := 16 ;
61432: LD_ADDR_VAR 0 8
61436: PUSH
61437: LD_INT 16
61439: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
61440: LD_VAR 0 1
61444: PPUSH
61445: LD_VAR 0 2
61449: PPUSH
61450: LD_VAR 0 3
61454: PPUSH
61455: CALL_OW 297
61459: PUSH
61460: LD_VAR 0 5
61464: GREATER
61465: IFFALSE 61544
// begin ComMoveXY ( unit , x , y ) ;
61467: LD_VAR 0 1
61471: PPUSH
61472: LD_VAR 0 2
61476: PPUSH
61477: LD_VAR 0 3
61481: PPUSH
61482: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61486: LD_INT 35
61488: PPUSH
61489: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_VAR 0 2
61502: PPUSH
61503: LD_VAR 0 3
61507: PPUSH
61508: CALL 39963 0 3
61512: NOT
61513: IFFALSE 61517
// exit ;
61515: GO 61853
// until GetDistUnitXY ( unit , x , y ) < dist ;
61517: LD_VAR 0 1
61521: PPUSH
61522: LD_VAR 0 2
61526: PPUSH
61527: LD_VAR 0 3
61531: PPUSH
61532: CALL_OW 297
61536: PUSH
61537: LD_VAR 0 5
61541: LESS
61542: IFFALSE 61486
// end ; ComTurnXY ( unit , x , y ) ;
61544: LD_VAR 0 1
61548: PPUSH
61549: LD_VAR 0 2
61553: PPUSH
61554: LD_VAR 0 3
61558: PPUSH
61559: CALL_OW 118
// repeat if Multiplayer then
61563: LD_OWVAR 4
61567: IFFALSE 61578
// wait ( 35 ) else
61569: LD_INT 35
61571: PPUSH
61572: CALL_OW 67
61576: GO 61585
// wait ( 5 ) ;
61578: LD_INT 5
61580: PPUSH
61581: CALL_OW 67
// _d := GetDir ( unit ) ;
61585: LD_ADDR_VAR 0 11
61589: PUSH
61590: LD_VAR 0 1
61594: PPUSH
61595: CALL_OW 254
61599: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
61600: LD_ADDR_VAR 0 7
61604: PUSH
61605: LD_VAR 0 1
61609: PPUSH
61610: CALL_OW 250
61614: PPUSH
61615: LD_VAR 0 1
61619: PPUSH
61620: CALL_OW 251
61624: PPUSH
61625: LD_VAR 0 2
61629: PPUSH
61630: LD_VAR 0 3
61634: PPUSH
61635: CALL 42599 0 4
61639: ST_TO_ADDR
// until dir = _d ;
61640: LD_VAR 0 7
61644: PUSH
61645: LD_VAR 0 11
61649: EQUAL
61650: IFFALSE 61563
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
61652: LD_ADDR_VAR 0 9
61656: PUSH
61657: LD_VAR 0 1
61661: PPUSH
61662: CALL_OW 250
61666: PPUSH
61667: LD_VAR 0 7
61671: PPUSH
61672: LD_VAR 0 5
61676: PPUSH
61677: CALL_OW 272
61681: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
61682: LD_ADDR_VAR 0 10
61686: PUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: CALL_OW 251
61696: PPUSH
61697: LD_VAR 0 7
61701: PPUSH
61702: LD_VAR 0 5
61706: PPUSH
61707: CALL_OW 273
61711: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
61712: LD_VAR 0 9
61716: PPUSH
61717: LD_VAR 0 10
61721: PPUSH
61722: CALL_OW 488
61726: NOT
61727: IFFALSE 61731
// exit ;
61729: GO 61853
// ComAnimCustom ( unit , 1 ) ;
61731: LD_VAR 0 1
61735: PPUSH
61736: LD_INT 1
61738: PPUSH
61739: CALL_OW 592
// p := 0 ;
61743: LD_ADDR_VAR 0 12
61747: PUSH
61748: LD_INT 0
61750: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
61751: LD_VAR 0 9
61755: PPUSH
61756: LD_VAR 0 10
61760: PPUSH
61761: LD_VAR 0 6
61765: PPUSH
61766: LD_VAR 0 8
61770: PPUSH
61771: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
61775: LD_INT 35
61777: PPUSH
61778: CALL_OW 67
// p := Inc ( p ) ;
61782: LD_ADDR_VAR 0 12
61786: PUSH
61787: LD_VAR 0 12
61791: PPUSH
61792: CALL 42555 0 1
61796: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
61797: LD_VAR 0 12
61801: PUSH
61802: LD_INT 3
61804: EQUAL
61805: IFTRUE 61819
61807: PUSH
61808: LD_VAR 0 1
61812: PPUSH
61813: CALL_OW 302
61817: NOT
61818: OR
61819: IFTRUE 61832
61821: PUSH
61822: LD_VAR 0 1
61826: PPUSH
61827: CALL_OW 301
61831: OR
61832: IFFALSE 61775
// RemoveSeeing ( _x , _y , side ) ;
61834: LD_VAR 0 9
61838: PPUSH
61839: LD_VAR 0 10
61843: PPUSH
61844: LD_VAR 0 6
61848: PPUSH
61849: CALL_OW 331
// end ;
61853: LD_VAR 0 4
61857: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
61858: LD_INT 0
61860: PPUSH
61861: PPUSH
61862: PPUSH
61863: PPUSH
61864: PPUSH
61865: PPUSH
61866: PPUSH
61867: PPUSH
61868: PPUSH
61869: PPUSH
61870: PPUSH
// if not unit then
61871: LD_VAR 0 1
61875: NOT
61876: IFFALSE 61880
// exit ;
61878: GO 62151
// side := GetSide ( unit ) ;
61880: LD_ADDR_VAR 0 3
61884: PUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: CALL_OW 255
61894: ST_TO_ADDR
// x := GetX ( unit ) ;
61895: LD_ADDR_VAR 0 5
61899: PUSH
61900: LD_VAR 0 1
61904: PPUSH
61905: CALL_OW 250
61909: ST_TO_ADDR
// y := GetY ( unit ) ;
61910: LD_ADDR_VAR 0 6
61914: PUSH
61915: LD_VAR 0 1
61919: PPUSH
61920: CALL_OW 251
61924: ST_TO_ADDR
// r := 8 ;
61925: LD_ADDR_VAR 0 4
61929: PUSH
61930: LD_INT 8
61932: ST_TO_ADDR
// if x - r < 0 then
61933: LD_VAR 0 5
61937: PUSH
61938: LD_VAR 0 4
61942: MINUS
61943: PUSH
61944: LD_INT 0
61946: LESS
61947: IFFALSE 61959
// min_x := 0 else
61949: LD_ADDR_VAR 0 7
61953: PUSH
61954: LD_INT 0
61956: ST_TO_ADDR
61957: GO 61975
// min_x := x - r ;
61959: LD_ADDR_VAR 0 7
61963: PUSH
61964: LD_VAR 0 5
61968: PUSH
61969: LD_VAR 0 4
61973: MINUS
61974: ST_TO_ADDR
// if y - r < 0 then
61975: LD_VAR 0 6
61979: PUSH
61980: LD_VAR 0 4
61984: MINUS
61985: PUSH
61986: LD_INT 0
61988: LESS
61989: IFFALSE 62001
// min_y := 0 else
61991: LD_ADDR_VAR 0 8
61995: PUSH
61996: LD_INT 0
61998: ST_TO_ADDR
61999: GO 62017
// min_y := y - r ;
62001: LD_ADDR_VAR 0 8
62005: PUSH
62006: LD_VAR 0 6
62010: PUSH
62011: LD_VAR 0 4
62015: MINUS
62016: ST_TO_ADDR
// max_x := x + r ;
62017: LD_ADDR_VAR 0 9
62021: PUSH
62022: LD_VAR 0 5
62026: PUSH
62027: LD_VAR 0 4
62031: PLUS
62032: ST_TO_ADDR
// max_y := y + r ;
62033: LD_ADDR_VAR 0 10
62037: PUSH
62038: LD_VAR 0 6
62042: PUSH
62043: LD_VAR 0 4
62047: PLUS
62048: ST_TO_ADDR
// for _x = min_x to max_x do
62049: LD_ADDR_VAR 0 11
62053: PUSH
62054: DOUBLE
62055: LD_VAR 0 7
62059: DEC
62060: ST_TO_ADDR
62061: LD_VAR 0 9
62065: PUSH
62066: FOR_TO
62067: IFFALSE 62149
// for _y = min_y to max_y do
62069: LD_ADDR_VAR 0 12
62073: PUSH
62074: DOUBLE
62075: LD_VAR 0 8
62079: DEC
62080: ST_TO_ADDR
62081: LD_VAR 0 10
62085: PUSH
62086: FOR_TO
62087: IFFALSE 62145
// begin if not ValidHex ( _x , _y ) then
62089: LD_VAR 0 11
62093: PPUSH
62094: LD_VAR 0 12
62098: PPUSH
62099: CALL_OW 488
62103: NOT
62104: IFFALSE 62108
// continue ;
62106: GO 62086
// if MineAtPos ( _x , _y ) then
62108: LD_VAR 0 11
62112: PPUSH
62113: LD_VAR 0 12
62117: PPUSH
62118: CALL_OW 458
62122: IFFALSE 62143
// ViewMineAtPos ( _x , _y , side ) ;
62124: LD_VAR 0 11
62128: PPUSH
62129: LD_VAR 0 12
62133: PPUSH
62134: LD_VAR 0 3
62138: PPUSH
62139: CALL_OW 457
// end ;
62143: GO 62086
62145: POP
62146: POP
62147: GO 62066
62149: POP
62150: POP
// end ;
62151: LD_VAR 0 2
62155: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
62156: LD_INT 0
62158: PPUSH
62159: PPUSH
62160: PPUSH
62161: PPUSH
62162: PPUSH
62163: PPUSH
// if not units then
62164: LD_VAR 0 1
62168: NOT
62169: IFFALSE 62173
// exit ;
62171: GO 62603
// scaners := [ ] ;
62173: LD_ADDR_VAR 0 6
62177: PUSH
62178: EMPTY
62179: ST_TO_ADDR
// for i in units do
62180: LD_ADDR_VAR 0 3
62184: PUSH
62185: LD_VAR 0 1
62189: PUSH
62190: FOR_IN
62191: IFFALSE 62348
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62193: LD_VAR 0 3
62197: PPUSH
62198: CALL_OW 264
62202: PUSH
62203: LD_INT 11
62205: NONEQUAL
62206: IFTRUE 62220
62208: PUSH
62209: LD_VAR 0 3
62213: PPUSH
62214: CALL_OW 302
62218: NOT
62219: OR
62220: IFTRUE 62237
62222: PUSH
62223: LD_VAR 0 3
62227: PPUSH
62228: CALL_OW 110
62232: PUSH
62233: LD_INT 502
62235: EQUAL
62236: OR
62237: IFFALSE 62241
// continue ;
62239: GO 62190
// ComStop ( i ) ;
62241: LD_VAR 0 3
62245: PPUSH
62246: CALL_OW 141
// x := GetX ( i ) ;
62250: LD_ADDR_VAR 0 4
62254: PUSH
62255: LD_VAR 0 3
62259: PPUSH
62260: CALL_OW 250
62264: ST_TO_ADDR
// y := GetY ( i ) ;
62265: LD_ADDR_VAR 0 5
62269: PUSH
62270: LD_VAR 0 3
62274: PPUSH
62275: CALL_OW 251
62279: ST_TO_ADDR
// if GetSide ( i ) = your_side then
62280: LD_VAR 0 3
62284: PPUSH
62285: CALL_OW 255
62289: PUSH
62290: LD_OWVAR 2
62294: EQUAL
62295: IFFALSE 62314
// PlaySoundXY ( x , y , mineDetector ) ;
62297: LD_VAR 0 4
62301: PPUSH
62302: LD_VAR 0 5
62306: PPUSH
62307: LD_STRING mineDetector
62309: PPUSH
62310: CALL_OW 366
// scaners := Join ( scaners , i ) ;
62314: LD_ADDR_VAR 0 6
62318: PUSH
62319: LD_VAR 0 6
62323: PPUSH
62324: LD_VAR 0 3
62328: PPUSH
62329: CALL 41182 0 2
62333: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
62334: LD_VAR 0 3
62338: PPUSH
62339: LD_INT 502
62341: PPUSH
62342: CALL_OW 109
// end ;
62346: GO 62190
62348: POP
62349: POP
// if not scaners then
62350: LD_VAR 0 6
62354: NOT
62355: IFFALSE 62359
// exit ;
62357: GO 62603
// wait ( 3 ) ;
62359: LD_INT 3
62361: PPUSH
62362: CALL_OW 67
// timer := 6 ;
62366: LD_ADDR_VAR 0 7
62370: PUSH
62371: LD_INT 6
62373: ST_TO_ADDR
// repeat for i in scaners do
62374: LD_ADDR_VAR 0 3
62378: PUSH
62379: LD_VAR 0 6
62383: PUSH
62384: FOR_IN
62385: IFFALSE 62501
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
62387: LD_VAR 0 3
62391: PPUSH
62392: CALL_OW 302
62396: NOT
62397: IFTRUE 62410
62399: PUSH
62400: LD_VAR 0 3
62404: PPUSH
62405: CALL_OW 314
62409: OR
62410: IFTRUE 62441
62412: PUSH
62413: LD_VAR 0 3
62417: PPUSH
62418: CALL_OW 263
62422: PUSH
62423: LD_INT 1
62425: EQUAL
62426: IFFALSE 62440
62428: PUSH
62429: LD_VAR 0 3
62433: PPUSH
62434: CALL_OW 311
62438: NOT
62439: AND
62440: OR
62441: IFFALSE 62485
// begin SetUnitDisplayNumber ( i , 0 ) ;
62443: LD_VAR 0 3
62447: PPUSH
62448: LD_INT 0
62450: PPUSH
62451: CALL_OW 505
// SetTag ( i , 0 ) ;
62455: LD_VAR 0 3
62459: PPUSH
62460: LD_INT 0
62462: PPUSH
62463: CALL_OW 109
// scaners := scaners diff i ;
62467: LD_ADDR_VAR 0 6
62471: PUSH
62472: LD_VAR 0 6
62476: PUSH
62477: LD_VAR 0 3
62481: DIFF
62482: ST_TO_ADDR
// continue ;
62483: GO 62384
// end ; SetUnitDisplayNumber ( i , timer ) ;
62485: LD_VAR 0 3
62489: PPUSH
62490: LD_VAR 0 7
62494: PPUSH
62495: CALL_OW 505
// end ;
62499: GO 62384
62501: POP
62502: POP
// if not scaners then
62503: LD_VAR 0 6
62507: NOT
62508: IFFALSE 62512
// exit ;
62510: GO 62603
// timer := Dec ( timer ) ;
62512: LD_ADDR_VAR 0 7
62516: PUSH
62517: LD_VAR 0 7
62521: PPUSH
62522: CALL 42577 0 1
62526: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62527: LD_INT 35
62529: PPUSH
62530: CALL_OW 67
// until timer = 0 ;
62534: LD_VAR 0 7
62538: PUSH
62539: LD_INT 0
62541: EQUAL
62542: IFFALSE 62374
// if not scaners then
62544: LD_VAR 0 6
62548: NOT
62549: IFFALSE 62553
// exit ;
62551: GO 62603
// for i in scaners do
62553: LD_ADDR_VAR 0 3
62557: PUSH
62558: LD_VAR 0 6
62562: PUSH
62563: FOR_IN
62564: IFFALSE 62601
// begin SetUnitDisplayNumber ( i , 0 ) ;
62566: LD_VAR 0 3
62570: PPUSH
62571: LD_INT 0
62573: PPUSH
62574: CALL_OW 505
// SetTag ( i , 0 ) ;
62578: LD_VAR 0 3
62582: PPUSH
62583: LD_INT 0
62585: PPUSH
62586: CALL_OW 109
// RevealDetectorMine ( i ) ;
62590: LD_VAR 0 3
62594: PPUSH
62595: CALL 61858 0 1
// end ;
62599: GO 62563
62601: POP
62602: POP
// end ;
62603: LD_VAR 0 2
62607: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
62608: LD_INT 0
62610: PPUSH
// if p1 = mine_detector_mode then
62611: LD_VAR 0 2
62615: PUSH
62616: LD_INT 103
62618: EQUAL
62619: IFFALSE 62630
// DetectMine ( units ) ;
62621: LD_VAR 0 1
62625: PPUSH
62626: CALL 62156 0 1
// end ; end_of_file
62630: LD_VAR 0 7
62634: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
62635: PPOPN 6
62637: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
62638: LD_INT 0
62640: PPUSH
// begin if not units then
62641: LD_VAR 0 1
62645: NOT
62646: IFFALSE 62650
// exit ;
62648: GO 62684
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
62650: LD_VAR 0 1
62654: PPUSH
62655: LD_VAR 0 2
62659: PPUSH
62660: LD_VAR 0 3
62664: PPUSH
62665: LD_VAR 0 4
62669: PPUSH
62670: LD_VAR 0 5
62674: PPUSH
62675: LD_VAR 0 6
62679: PPUSH
62680: CALL 62608 0 6
// end ;
62684: PPOPN 7
62686: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
62687: LD_EXP 1
62691: PUSH
62692: LD_INT 4
62694: EQUAL
62695: IFFALSE 62731
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
62697: LD_STRING setGameDifficulty(
62699: PUSH
62700: LD_OWVAR 67
62704: STR
62705: PUSH
62706: LD_STRING )
62708: STR
62709: PPUSH
62710: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
62714: LD_STRING displayDifficulty(
62716: PUSH
62717: LD_OWVAR 67
62721: STR
62722: PUSH
62723: LD_STRING )
62725: STR
62726: PPUSH
62727: CALL_OW 559
// end ; SOS_MapStart ( ) ;
62731: CALL 62760 0 0
// end ; end_of_file
62735: PPOPN 1
62737: END
// every 0 0$1 do
62738: GO 62740
62740: DISABLE
// begin enable ;
62741: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
62742: LD_STRING updateTimer(
62744: PUSH
62745: LD_OWVAR 1
62749: STR
62750: PUSH
62751: LD_STRING );
62753: STR
62754: PPUSH
62755: CALL_OW 559
// end ;
62759: END
// export function SOS_MapStart ( ) ; begin
62760: LD_INT 0
62762: PPUSH
// UpdateFactoryWaypoints ( ) ;
62763: CALL 63694 0 0
// UpdateWarehouseGatheringPoints ( ) ;
62767: CALL 63946 0 0
// ParseMultiDataToLua ( ) ;
62771: CALL 64093 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
62775: LD_STRING setSpecLogoNumber(
62777: PUSH
62778: LD_INT 2
62780: STR
62781: PUSH
62782: LD_STRING ,
62784: STR
62785: PUSH
62786: LD_INT 1
62788: STR
62789: PUSH
62790: LD_STRING )
62792: STR
62793: PPUSH
62794: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
62798: LD_STRING setSpecLogoNumber(
62800: PUSH
62801: LD_INT 3
62803: STR
62804: PUSH
62805: LD_STRING ,
62807: STR
62808: PUSH
62809: LD_INT 2
62811: STR
62812: PUSH
62813: LD_STRING )
62815: STR
62816: PPUSH
62817: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
62821: LD_STRING setSpecLogoNumber(
62823: PUSH
62824: LD_INT 4
62826: STR
62827: PUSH
62828: LD_STRING ,
62830: STR
62831: PUSH
62832: LD_INT 3
62834: STR
62835: PUSH
62836: LD_STRING )
62838: STR
62839: PPUSH
62840: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
62844: LD_STRING setSpecLogoNumber(
62846: PUSH
62847: LD_INT 5
62849: STR
62850: PUSH
62851: LD_STRING ,
62853: STR
62854: PUSH
62855: LD_INT 4
62857: STR
62858: PUSH
62859: LD_STRING )
62861: STR
62862: PPUSH
62863: CALL_OW 559
// end ;
62867: LD_VAR 0 1
62871: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
62872: LD_INT 0
62874: PPUSH
62875: PPUSH
62876: PPUSH
62877: PPUSH
62878: PPUSH
62879: PPUSH
62880: PPUSH
62881: PPUSH
62882: PPUSH
// for i := 1 to 8 do
62883: LD_ADDR_VAR 0 2
62887: PUSH
62888: DOUBLE
62889: LD_INT 1
62891: DEC
62892: ST_TO_ADDR
62893: LD_INT 8
62895: PUSH
62896: FOR_TO
62897: IFFALSE 63282
// begin if mpSidePositions [ i ] then
62899: LD_EXP 5
62903: PUSH
62904: LD_VAR 0 2
62908: ARRAY
62909: IFFALSE 63280
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
62911: LD_ADDR_VAR 0 7
62915: PUSH
62916: LD_INT 22
62918: PUSH
62919: LD_VAR 0 2
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 21
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PPUSH
62942: CALL_OW 69
62946: PPUSH
62947: CALL 5216 0 1
62951: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62952: LD_ADDR_VAR 0 9
62956: PUSH
62957: LD_INT 22
62959: PUSH
62960: LD_VAR 0 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: LD_INT 30
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 30
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: LIST
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PPUSH
63001: CALL_OW 69
63005: ST_TO_ADDR
// crates := 0 ;
63006: LD_ADDR_VAR 0 4
63010: PUSH
63011: LD_INT 0
63013: ST_TO_ADDR
// oil := 0 ;
63014: LD_ADDR_VAR 0 5
63018: PUSH
63019: LD_INT 0
63021: ST_TO_ADDR
// sib := 0 ;
63022: LD_ADDR_VAR 0 6
63026: PUSH
63027: LD_INT 0
63029: ST_TO_ADDR
// if bases then
63030: LD_VAR 0 9
63034: IFFALSE 63140
// begin for j in bases do
63036: LD_ADDR_VAR 0 3
63040: PUSH
63041: LD_VAR 0 9
63045: PUSH
63046: FOR_IN
63047: IFFALSE 63138
// begin base := GetBase ( j ) ;
63049: LD_ADDR_VAR 0 8
63053: PUSH
63054: LD_VAR 0 3
63058: PPUSH
63059: CALL_OW 274
63063: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63064: LD_ADDR_VAR 0 4
63068: PUSH
63069: LD_VAR 0 4
63073: PUSH
63074: LD_VAR 0 8
63078: PPUSH
63079: LD_INT 1
63081: PPUSH
63082: CALL_OW 275
63086: PLUS
63087: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63088: LD_ADDR_VAR 0 5
63092: PUSH
63093: LD_VAR 0 5
63097: PUSH
63098: LD_VAR 0 8
63102: PPUSH
63103: LD_INT 2
63105: PPUSH
63106: CALL_OW 275
63110: PLUS
63111: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63112: LD_ADDR_VAR 0 6
63116: PUSH
63117: LD_VAR 0 6
63121: PUSH
63122: LD_VAR 0 8
63126: PPUSH
63127: LD_INT 3
63129: PPUSH
63130: CALL_OW 275
63134: PLUS
63135: ST_TO_ADDR
// end ;
63136: GO 63046
63138: POP
63139: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63140: LD_STRING setSpecText(
63142: PUSH
63143: LD_VAR 0 2
63147: STR
63148: PUSH
63149: LD_STRING ,
63151: STR
63152: PUSH
63153: LD_INT 2
63155: STR
63156: PUSH
63157: LD_STRING ,
63159: STR
63160: PUSH
63161: LD_VAR 0 4
63165: STR
63166: PUSH
63167: LD_STRING )
63169: STR
63170: PPUSH
63171: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63175: LD_STRING setSpecText(
63177: PUSH
63178: LD_VAR 0 2
63182: STR
63183: PUSH
63184: LD_STRING ,
63186: STR
63187: PUSH
63188: LD_INT 3
63190: STR
63191: PUSH
63192: LD_STRING ,
63194: STR
63195: PUSH
63196: LD_VAR 0 5
63200: STR
63201: PUSH
63202: LD_STRING )
63204: STR
63205: PPUSH
63206: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63210: LD_STRING setSpecText(
63212: PUSH
63213: LD_VAR 0 2
63217: STR
63218: PUSH
63219: LD_STRING ,
63221: STR
63222: PUSH
63223: LD_INT 4
63225: STR
63226: PUSH
63227: LD_STRING ,
63229: STR
63230: PUSH
63231: LD_VAR 0 6
63235: STR
63236: PUSH
63237: LD_STRING )
63239: STR
63240: PPUSH
63241: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
63245: LD_STRING setSpecText(
63247: PUSH
63248: LD_VAR 0 2
63252: STR
63253: PUSH
63254: LD_STRING ,
63256: STR
63257: PUSH
63258: LD_INT 5
63260: STR
63261: PUSH
63262: LD_STRING ,
63264: STR
63265: PUSH
63266: LD_VAR 0 7
63270: STR
63271: PUSH
63272: LD_STRING )
63274: STR
63275: PPUSH
63276: CALL_OW 559
// end ; end ;
63280: GO 62896
63282: POP
63283: POP
// end ;
63284: LD_VAR 0 1
63288: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
63289: LD_INT 2
63291: PUSH
63292: LD_INT 30
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 30
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: LIST
63316: PPUSH
63317: CALL_OW 69
63321: IFFALSE 63331
63323: GO 63325
63325: DISABLE
// begin enable ;
63326: ENABLE
// UpdateSpectatorBar ;
63327: CALL 62872 0 0
// end ;
63331: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
63332: LD_INT 0
63334: PPUSH
// end ;
63335: LD_VAR 0 12
63339: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63340: LD_INT 0
63342: PPUSH
63343: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63344: LD_VAR 0 1
63348: NOT
63349: IFTRUE 63368
63351: PUSH
63352: LD_VAR 0 2
63356: PPUSH
63357: LD_VAR 0 3
63361: PPUSH
63362: CALL_OW 488
63366: NOT
63367: OR
63368: IFTRUE 63403
63370: PUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: CALL_OW 266
63380: PUSH
63381: LD_INT 3
63383: NONEQUAL
63384: IFFALSE 63402
63386: PUSH
63387: LD_VAR 0 1
63391: PPUSH
63392: CALL_OW 247
63396: PUSH
63397: LD_INT 1
63399: EQUAL
63400: NOT
63401: AND
63402: OR
63403: IFFALSE 63407
// exit ;
63405: GO 63689
// if GetType ( factory ) = unit_human then
63407: LD_VAR 0 1
63411: PPUSH
63412: CALL_OW 247
63416: PUSH
63417: LD_INT 1
63419: EQUAL
63420: IFFALSE 63437
// factory := IsInUnit ( factory ) ;
63422: LD_ADDR_VAR 0 1
63426: PUSH
63427: LD_VAR 0 1
63431: PPUSH
63432: CALL_OW 310
63436: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63437: LD_VAR 0 1
63441: PPUSH
63442: CALL_OW 266
63446: PUSH
63447: LD_INT 3
63449: NONEQUAL
63450: IFFALSE 63454
// exit ;
63452: GO 63689
// for i := 1 to Count ( factoryWaypoints ) do
63454: LD_ADDR_VAR 0 5
63458: PUSH
63459: DOUBLE
63460: LD_INT 1
63462: DEC
63463: ST_TO_ADDR
63464: LD_EXP 58
63468: PPUSH
63469: CALL 5216 0 1
63473: PUSH
63474: FOR_TO
63475: IFFALSE 63637
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63477: LD_VAR 0 2
63481: PPUSH
63482: LD_VAR 0 3
63486: PPUSH
63487: CALL_OW 428
63491: PUSH
63492: LD_EXP 58
63496: PUSH
63497: LD_VAR 0 5
63501: ARRAY
63502: PUSH
63503: LD_INT 2
63505: ARRAY
63506: EQUAL
63507: IFFALSE 63539
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63509: LD_ADDR_EXP 58
63513: PUSH
63514: LD_EXP 58
63518: PPUSH
63519: LD_VAR 0 5
63523: PPUSH
63524: CALL_OW 3
63528: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63529: CALL 63694 0 0
// exit ;
63533: POP
63534: POP
63535: GO 63689
// end else
63537: GO 63635
// if factory = factoryWaypoints [ i ] [ 2 ] then
63539: LD_VAR 0 1
63543: PUSH
63544: LD_EXP 58
63548: PUSH
63549: LD_VAR 0 5
63553: ARRAY
63554: PUSH
63555: LD_INT 2
63557: ARRAY
63558: EQUAL
63559: IFFALSE 63635
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63561: LD_ADDR_EXP 58
63565: PUSH
63566: LD_EXP 58
63570: PPUSH
63571: LD_VAR 0 5
63575: PPUSH
63576: CALL_OW 3
63580: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63581: LD_ADDR_EXP 58
63585: PUSH
63586: LD_EXP 58
63590: PPUSH
63591: LD_VAR 0 1
63595: PPUSH
63596: CALL_OW 255
63600: PUSH
63601: LD_VAR 0 1
63605: PUSH
63606: LD_VAR 0 2
63610: PUSH
63611: LD_VAR 0 3
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: PPUSH
63622: CALL 41182 0 2
63626: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63627: CALL 63694 0 0
// exit ;
63631: POP
63632: POP
63633: GO 63689
// end ; end ;
63635: GO 63474
63637: POP
63638: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
63639: LD_ADDR_EXP 58
63643: PUSH
63644: LD_EXP 58
63648: PPUSH
63649: LD_VAR 0 1
63653: PPUSH
63654: CALL_OW 255
63658: PUSH
63659: LD_VAR 0 1
63663: PUSH
63664: LD_VAR 0 2
63668: PUSH
63669: LD_VAR 0 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: PPUSH
63680: CALL 41182 0 2
63684: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63685: CALL 63694 0 0
// end ;
63689: LD_VAR 0 4
63693: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63694: LD_INT 0
63696: PPUSH
63697: PPUSH
63698: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63699: LD_STRING resetFactoryWaypoint();
63701: PPUSH
63702: CALL_OW 559
// if factoryWaypoints then
63706: LD_EXP 58
63710: IFFALSE 63831
// begin list := factoryWaypoints ;
63712: LD_ADDR_VAR 0 3
63716: PUSH
63717: LD_EXP 58
63721: ST_TO_ADDR
// for i := 1 to list do
63722: LD_ADDR_VAR 0 2
63726: PUSH
63727: DOUBLE
63728: LD_INT 1
63730: DEC
63731: ST_TO_ADDR
63732: LD_VAR 0 3
63736: PUSH
63737: FOR_TO
63738: IFFALSE 63829
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63740: LD_STRING setFactoryWaypointXY(
63742: PUSH
63743: LD_VAR 0 3
63747: PUSH
63748: LD_VAR 0 2
63752: ARRAY
63753: PUSH
63754: LD_INT 1
63756: ARRAY
63757: STR
63758: PUSH
63759: LD_STRING ,
63761: STR
63762: PUSH
63763: LD_VAR 0 3
63767: PUSH
63768: LD_VAR 0 2
63772: ARRAY
63773: PUSH
63774: LD_INT 2
63776: ARRAY
63777: STR
63778: PUSH
63779: LD_STRING ,
63781: STR
63782: PUSH
63783: LD_VAR 0 3
63787: PUSH
63788: LD_VAR 0 2
63792: ARRAY
63793: PUSH
63794: LD_INT 3
63796: ARRAY
63797: STR
63798: PUSH
63799: LD_STRING ,
63801: STR
63802: PUSH
63803: LD_VAR 0 3
63807: PUSH
63808: LD_VAR 0 2
63812: ARRAY
63813: PUSH
63814: LD_INT 4
63816: ARRAY
63817: STR
63818: PUSH
63819: LD_STRING )
63821: STR
63822: PPUSH
63823: CALL_OW 559
63827: GO 63737
63829: POP
63830: POP
// end ; end ;
63831: LD_VAR 0 1
63835: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63836: LD_INT 0
63838: PPUSH
// if HexInfo ( x , y ) = warehouse then
63839: LD_VAR 0 2
63843: PPUSH
63844: LD_VAR 0 3
63848: PPUSH
63849: CALL_OW 428
63853: PUSH
63854: LD_VAR 0 1
63858: EQUAL
63859: IFFALSE 63886
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63861: LD_ADDR_EXP 60
63865: PUSH
63866: LD_EXP 60
63870: PPUSH
63871: LD_VAR 0 1
63875: PPUSH
63876: LD_INT 0
63878: PPUSH
63879: CALL_OW 1
63883: ST_TO_ADDR
63884: GO 63937
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63886: LD_ADDR_EXP 60
63890: PUSH
63891: LD_EXP 60
63895: PPUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: LD_VAR 0 1
63905: PPUSH
63906: CALL_OW 255
63910: PUSH
63911: LD_VAR 0 1
63915: PUSH
63916: LD_VAR 0 2
63920: PUSH
63921: LD_VAR 0 3
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: PPUSH
63932: CALL_OW 1
63936: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63937: CALL 63946 0 0
// end ;
63941: LD_VAR 0 4
63945: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63946: LD_INT 0
63948: PPUSH
63949: PPUSH
63950: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63951: LD_STRING resetWarehouseGatheringPoints();
63953: PPUSH
63954: CALL_OW 559
// if warehouseGatheringPoints then
63958: LD_EXP 60
63962: IFFALSE 64088
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63964: LD_ADDR_VAR 0 3
63968: PUSH
63969: LD_EXP 60
63973: PPUSH
63974: CALL 45116 0 1
63978: ST_TO_ADDR
// for i := 1 to list do
63979: LD_ADDR_VAR 0 2
63983: PUSH
63984: DOUBLE
63985: LD_INT 1
63987: DEC
63988: ST_TO_ADDR
63989: LD_VAR 0 3
63993: PUSH
63994: FOR_TO
63995: IFFALSE 64086
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63997: LD_STRING setWarehouseGatheringPointXY(
63999: PUSH
64000: LD_VAR 0 3
64004: PUSH
64005: LD_VAR 0 2
64009: ARRAY
64010: PUSH
64011: LD_INT 1
64013: ARRAY
64014: STR
64015: PUSH
64016: LD_STRING ,
64018: STR
64019: PUSH
64020: LD_VAR 0 3
64024: PUSH
64025: LD_VAR 0 2
64029: ARRAY
64030: PUSH
64031: LD_INT 2
64033: ARRAY
64034: STR
64035: PUSH
64036: LD_STRING ,
64038: STR
64039: PUSH
64040: LD_VAR 0 3
64044: PUSH
64045: LD_VAR 0 2
64049: ARRAY
64050: PUSH
64051: LD_INT 3
64053: ARRAY
64054: STR
64055: PUSH
64056: LD_STRING ,
64058: STR
64059: PUSH
64060: LD_VAR 0 3
64064: PUSH
64065: LD_VAR 0 2
64069: ARRAY
64070: PUSH
64071: LD_INT 4
64073: ARRAY
64074: STR
64075: PUSH
64076: LD_STRING )
64078: STR
64079: PPUSH
64080: CALL_OW 559
64084: GO 63994
64086: POP
64087: POP
// end ; end ;
64088: LD_VAR 0 1
64092: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64093: LD_INT 0
64095: PPUSH
64096: PPUSH
// if not mpSidePositions then
64097: LD_EXP 5
64101: NOT
64102: IFFALSE 64106
// exit ;
64104: GO 64177
// result :=  ;
64106: LD_ADDR_VAR 0 1
64110: PUSH
64111: LD_STRING 
64113: ST_TO_ADDR
// for i := 1 to 8 do
64114: LD_ADDR_VAR 0 2
64118: PUSH
64119: DOUBLE
64120: LD_INT 1
64122: DEC
64123: ST_TO_ADDR
64124: LD_INT 8
64126: PUSH
64127: FOR_TO
64128: IFFALSE 64158
// begin result := result & mpSidePositions [ i ] & ; ;
64130: LD_ADDR_VAR 0 1
64134: PUSH
64135: LD_VAR 0 1
64139: PUSH
64140: LD_EXP 5
64144: PUSH
64145: LD_VAR 0 2
64149: ARRAY
64150: STR
64151: PUSH
64152: LD_STRING ;
64154: STR
64155: ST_TO_ADDR
// end ;
64156: GO 64127
64158: POP
64159: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64160: LD_STRING setMultiplayerRealPosition("
64162: PUSH
64163: LD_VAR 0 1
64167: STR
64168: PUSH
64169: LD_STRING ");
64171: STR
64172: PPUSH
64173: CALL_OW 559
// end ;
64177: LD_VAR 0 1
64181: RET
