// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46563 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46986 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeams := [ ] ;
 808: LD_ADDR_EXP 8
 812: PUSH
 813: EMPTY
 814: ST_TO_ADDR
// mpTeamGame := false ;
 815: LD_ADDR_EXP 9
 819: PUSH
 820: LD_INT 0
 822: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 823: LD_ADDR_EXP 27
 827: PUSH
 828: LD_INT 160
 830: PUSH
 831: LD_INT 200
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: ST_TO_ADDR
// end ;
 838: LD_VAR 0 1
 842: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 843: LD_INT 0
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
 850: PPUSH
 851: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 852: LD_ADDR_EXP 17
 856: PUSH
 857: LD_INT 1
 859: PUSH
 860: LD_INT 2
 862: PUSH
 863: LD_INT 3
 865: PUSH
 866: LD_INT 4
 868: PUSH
 869: LD_INT 5
 871: PUSH
 872: LD_INT 6
 874: PUSH
 875: LD_INT 7
 877: PUSH
 878: LD_INT 8
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 891: LD_ADDR_EXP 16
 895: PUSH
 896: LD_INT 9
 898: PUSH
 899: LD_INT 10
 901: PUSH
 902: LD_INT 11
 904: PUSH
 905: LD_INT 12
 907: PUSH
 908: LD_INT 13
 910: PUSH
 911: LD_INT 14
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: PUSH
 922: LD_EXP 17
 926: UNION
 927: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 928: LD_VAR 0 1
 932: PUSH
 933: LD_INT 2
 935: EQUAL
 936: IFFALSE 948
// baseLevel := 1 else
 938: LD_ADDR_VAR 0 7
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
 946: GO 962
// baseLevel := mpGameSettings [ 1 ] ;
 948: LD_ADDR_VAR 0 7
 952: PUSH
 953: LD_EXP 4
 957: PUSH
 958: LD_INT 1
 960: ARRAY
 961: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 962: LD_ADDR_EXP 22
 966: PUSH
 967: LD_EXP 4
 971: PUSH
 972: LD_INT 2
 974: ARRAY
 975: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 976: LD_ADDR_EXP 23
 980: PUSH
 981: LD_EXP 4
 985: PUSH
 986: LD_INT 3
 988: ARRAY
 989: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 990: LD_ADDR_EXP 13
 994: PUSH
 995: LD_EXP 4
 999: PUSH
1000: LD_INT 4
1002: ARRAY
1003: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1004: LD_ADDR_EXP 25
1008: PUSH
1009: LD_EXP 4
1013: PUSH
1014: LD_INT 5
1016: ARRAY
1017: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1018: LD_ADDR_VAR 0 5
1022: PUSH
1023: LD_EXP 4
1027: PUSH
1028: LD_INT 6
1030: ARRAY
1031: PUSH
1032: LD_INT 0
1034: GREATER
1035: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1036: LD_ADDR_VAR 0 6
1040: PUSH
1041: LD_EXP 4
1045: PUSH
1046: LD_INT 7
1048: ARRAY
1049: PUSH
1050: LD_INT 0
1052: GREATER
1053: ST_TO_ADDR
// if gameType = GameTypeKing then
1054: LD_VAR 0 1
1058: PUSH
1059: LD_INT 3
1061: EQUAL
1062: IFFALSE 1102
// begin mpKingArea := kingArea ;
1064: LD_ADDR_EXP 32
1068: PUSH
1069: LD_INT 15
1071: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1072: LD_ADDR_EXP 33
1076: PUSH
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 8
1084: ARRAY
1085: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1086: LD_ADDR_EXP 35
1090: PUSH
1091: LD_EXP 4
1095: PUSH
1096: LD_INT 10
1098: ARRAY
1099: ST_TO_ADDR
// end else
1100: GO 1126
// begin mpKingArea := 0 ;
1102: LD_ADDR_EXP 32
1106: PUSH
1107: LD_INT 0
1109: ST_TO_ADDR
// mpPoints := 0 ;
1110: LD_ADDR_EXP 33
1114: PUSH
1115: LD_INT 0
1117: ST_TO_ADDR
// mpEmissions := 0 ;
1118: LD_ADDR_EXP 35
1122: PUSH
1123: LD_INT 0
1125: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 9
1133: ARRAY
1134: IFFALSE 1266
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1136: LD_ADDR_EXP 34
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: LD_INT 24
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 12
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: LD_INT 23
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 42
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 42
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1266: LD_ADDR_EXP 14
1270: PUSH
1271: LD_EXP 4
1275: PUSH
1276: LD_INT 11
1278: ARRAY
1279: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1280: LD_ADDR_EXP 20
1284: PUSH
1285: LD_EXP 4
1289: PUSH
1290: LD_INT 12
1292: ARRAY
1293: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1294: LD_ADDR_EXP 24
1298: PUSH
1299: LD_EXP 4
1303: PUSH
1304: LD_INT 13
1306: ARRAY
1307: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1308: LD_ADDR_EXP 31
1312: PUSH
1313: LD_EXP 4
1317: PUSH
1318: LD_INT 14
1320: ARRAY
1321: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1322: LD_ADDR_EXP 28
1326: PUSH
1327: LD_EXP 4
1331: PUSH
1332: LD_INT 15
1334: ARRAY
1335: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1336: LD_ADDR_EXP 26
1340: PUSH
1341: LD_EXP 4
1345: PUSH
1346: LD_INT 18
1348: ARRAY
1349: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1350: LD_ADDR_EXP 18
1354: PUSH
1355: LD_EXP 4
1359: PUSH
1360: LD_INT 21
1362: ARRAY
1363: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1364: LD_ADDR_EXP 29
1368: PUSH
1369: LD_INT 16
1371: PUSH
1372: LD_INT 17
1374: PUSH
1375: LD_INT 18
1377: PUSH
1378: LD_INT 19
1380: PUSH
1381: LD_INT 20
1383: PUSH
1384: LD_INT 21
1386: PUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 23
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 0 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1403: LD_ADDR_VAR 0 8
1407: PUSH
1408: LD_INT 24
1410: PPUSH
1411: LD_INT 3
1413: PPUSH
1414: CALL 45928 0 2
1418: PUSH
1419: LD_INT 30
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: CALL 45928 0 2
1429: PUSH
1430: LD_INT 36
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL 45928 0 2
1440: PUSH
1441: LD_INT 42
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL 45928 0 2
1451: PUSH
1452: LD_INT 48
1454: PPUSH
1455: LD_INT 3
1457: PPUSH
1458: CALL 45928 0 2
1462: PUSH
1463: LD_INT 54
1465: PPUSH
1466: LD_INT 3
1468: PPUSH
1469: CALL 45928 0 2
1473: PUSH
1474: LD_INT 60
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL 45928 0 2
1484: PUSH
1485: LD_INT 66
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 45928 0 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1506: LD_ADDR_VAR 0 3
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_VAR 0 8
1520: PPUSH
1521: CALL 5233 0 1
1525: PUSH
1526: FOR_TO
1527: IFFALSE 1631
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1529: LD_ADDR_EXP 19
1533: PUSH
1534: LD_EXP 19
1538: PPUSH
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_VAR 0 8
1548: PUSH
1549: LD_VAR 0 3
1553: ARRAY
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: LD_VAR 0 8
1563: PUSH
1564: LD_VAR 0 3
1568: ARRAY
1569: PUSH
1570: LD_INT 3
1572: ARRAY
1573: PPUSH
1574: LD_INT 10
1576: PPUSH
1577: CALL_OW 272
1581: PUSH
1582: LD_VAR 0 8
1586: PUSH
1587: LD_VAR 0 3
1591: ARRAY
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PPUSH
1597: LD_VAR 0 8
1601: PUSH
1602: LD_VAR 0 3
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: CALL_OW 273
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 1
1628: ST_TO_ADDR
1629: GO 1526
1631: POP
1632: POP
// if hasOil then
1633: LD_VAR 0 5
1637: IFFALSE 1776
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1639: LD_ADDR_VAR 0 4
1643: PUSH
1644: LD_EXP 4
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PUSH
1653: LD_INT 2
1655: EQUAL
1656: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1657: LD_ADDR_EXP 10
1661: PUSH
1662: LD_INT 25
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL 45761 0 2
1674: PUSH
1675: LD_INT 31
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL 45761 0 2
1687: PUSH
1688: LD_INT 37
1690: PPUSH
1691: LD_VAR 0 4
1695: PPUSH
1696: CALL 45761 0 2
1700: PUSH
1701: LD_INT 43
1703: PPUSH
1704: LD_VAR 0 4
1708: PPUSH
1709: CALL 45761 0 2
1713: PUSH
1714: LD_INT 49
1716: PPUSH
1717: LD_VAR 0 4
1721: PPUSH
1722: CALL 45761 0 2
1726: PUSH
1727: LD_INT 55
1729: PPUSH
1730: LD_VAR 0 4
1734: PPUSH
1735: CALL 45761 0 2
1739: PUSH
1740: LD_INT 61
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL 45761 0 2
1752: PUSH
1753: LD_INT 67
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 45761 0 2
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// end ; if hasSib then
1776: LD_VAR 0 6
1780: IFFALSE 1919
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_EXP 4
1791: PUSH
1792: LD_INT 7
1794: ARRAY
1795: PUSH
1796: LD_INT 2
1798: EQUAL
1799: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1800: LD_ADDR_EXP 11
1804: PUSH
1805: LD_INT 26
1807: PPUSH
1808: LD_VAR 0 4
1812: PPUSH
1813: CALL 45761 0 2
1817: PUSH
1818: LD_INT 32
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 45761 0 2
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 45761 0 2
1843: PUSH
1844: LD_INT 44
1846: PPUSH
1847: LD_VAR 0 4
1851: PPUSH
1852: CALL 45761 0 2
1856: PUSH
1857: LD_INT 50
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL 45761 0 2
1869: PUSH
1870: LD_INT 56
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL 45761 0 2
1882: PUSH
1883: LD_INT 62
1885: PPUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL 45761 0 2
1895: PUSH
1896: LD_INT 68
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL 45761 0 2
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1919: LD_VAR 0 7
1923: PUSH
1924: LD_INT 1
1926: GREATEREQUAL
1927: IFFALSE 1939
// mpDepots := startPos ;
1929: LD_ADDR_EXP 12
1933: PUSH
1934: LD_VAR 0 8
1938: ST_TO_ADDR
// if baseLevel >= 2 then
1939: LD_VAR 0 7
1943: PUSH
1944: LD_INT 2
1946: GREATEREQUAL
1947: IFFALSE 2364
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 1 ) ] ] ;
1949: LD_ADDR_EXP 15
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 28
1959: PPUSH
1960: LD_INT 5
1962: PPUSH
1963: CALL 45928 0 2
1967: ADD
1968: PUSH
1969: LD_INT 31
1971: PUSH
1972: LD_INT 29
1974: PPUSH
1975: LD_INT 5
1977: PPUSH
1978: CALL 45928 0 2
1982: ADD
1983: PUSH
1984: LD_INT 4
1986: PUSH
1987: LD_INT 27
1989: PPUSH
1990: LD_INT 4
1992: PPUSH
1993: CALL 45928 0 2
1997: ADD
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 34
2009: PPUSH
2010: LD_INT 4
2012: PPUSH
2013: CALL 45928 0 2
2017: ADD
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: LD_INT 35
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL 45928 0 2
2032: ADD
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: LD_INT 33
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: CALL 45928 0 2
2047: ADD
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 40
2059: PPUSH
2060: LD_INT 4
2062: PPUSH
2063: CALL 45928 0 2
2067: ADD
2068: PUSH
2069: LD_INT 31
2071: PUSH
2072: LD_INT 41
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: CALL 45928 0 2
2082: ADD
2083: PUSH
2084: LD_INT 4
2086: PUSH
2087: LD_INT 39
2089: PPUSH
2090: LD_INT 4
2092: PPUSH
2093: CALL 45928 0 2
2097: ADD
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 31
2106: PUSH
2107: LD_INT 46
2109: PPUSH
2110: LD_INT 4
2112: PPUSH
2113: CALL 45928 0 2
2117: ADD
2118: PUSH
2119: LD_INT 31
2121: PUSH
2122: LD_INT 47
2124: PPUSH
2125: LD_INT 4
2127: PPUSH
2128: CALL 45928 0 2
2132: ADD
2133: PUSH
2134: LD_INT 4
2136: PUSH
2137: LD_INT 45
2139: PPUSH
2140: LD_INT 2
2142: PPUSH
2143: CALL 45928 0 2
2147: ADD
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 31
2156: PUSH
2157: LD_INT 52
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL 45928 0 2
2167: ADD
2168: PUSH
2169: LD_INT 31
2171: PUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 45928 0 2
2182: ADD
2183: PUSH
2184: LD_INT 4
2186: PUSH
2187: LD_INT 51
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: CALL 45928 0 2
2197: ADD
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 31
2206: PUSH
2207: LD_INT 58
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: CALL 45928 0 2
2217: ADD
2218: PUSH
2219: LD_INT 31
2221: PUSH
2222: LD_INT 59
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL 45928 0 2
2232: ADD
2233: PUSH
2234: LD_INT 4
2236: PUSH
2237: LD_INT 57
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL 45928 0 2
2247: ADD
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 31
2256: PUSH
2257: LD_INT 64
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL 45928 0 2
2267: ADD
2268: PUSH
2269: LD_INT 31
2271: PUSH
2272: LD_INT 65
2274: PPUSH
2275: LD_INT 0
2277: PPUSH
2278: CALL 45928 0 2
2282: ADD
2283: PUSH
2284: LD_INT 4
2286: PUSH
2287: LD_INT 63
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL 45928 0 2
2297: ADD
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 31
2306: PUSH
2307: LD_INT 70
2309: PPUSH
2310: LD_INT 2
2312: PPUSH
2313: CALL 45928 0 2
2317: ADD
2318: PUSH
2319: LD_INT 31
2321: PUSH
2322: LD_INT 71
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL 45928 0 2
2332: ADD
2333: PUSH
2334: LD_INT 4
2336: PUSH
2337: LD_INT 69
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL 45928 0 2
2347: ADD
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// end ; end ;
2364: LD_VAR 0 2
2368: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2369: GO 2371
2371: DISABLE
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
// begin if not mpShipments then
2382: LD_EXP 25
2386: NOT
2387: IFFALSE 2391
// exit ;
2389: GO 2846
// case mpShipments of 1 :
2391: LD_EXP 25
2395: PUSH
2396: LD_INT 1
2398: DOUBLE
2399: EQUAL
2400: IFTRUE 2404
2402: GO 2439
2404: POP
// begin time := 0 0$30 ;
2405: LD_ADDR_VAR 0 5
2409: PUSH
2410: LD_INT 1050
2412: ST_TO_ADDR
// normalTime := 0 0$30 ;
2413: LD_ADDR_VAR 0 6
2417: PUSH
2418: LD_INT 1050
2420: ST_TO_ADDR
// maxTime := 1 1$20 ;
2421: LD_ADDR_VAR 0 8
2425: PUSH
2426: LD_INT 2800
2428: ST_TO_ADDR
// delayTime := 0 0$5 ;
2429: LD_ADDR_VAR 0 7
2433: PUSH
2434: LD_INT 175
2436: ST_TO_ADDR
// end ; 2 :
2437: GO 2569
2439: LD_INT 2
2441: DOUBLE
2442: EQUAL
2443: IFTRUE 2447
2445: GO 2482
2447: POP
// begin time := 0 0$25 ;
2448: LD_ADDR_VAR 0 5
2452: PUSH
2453: LD_INT 875
2455: ST_TO_ADDR
// normalTime := 0 0$25 ;
2456: LD_ADDR_VAR 0 6
2460: PUSH
2461: LD_INT 875
2463: ST_TO_ADDR
// maxTime := 1 1$10 ;
2464: LD_ADDR_VAR 0 8
2468: PUSH
2469: LD_INT 2450
2471: ST_TO_ADDR
// delayTime := 0 0$4 ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_INT 140
2479: ST_TO_ADDR
// end ; 3 :
2480: GO 2569
2482: LD_INT 3
2484: DOUBLE
2485: EQUAL
2486: IFTRUE 2490
2488: GO 2525
2490: POP
// begin time := 0 0$20 ;
2491: LD_ADDR_VAR 0 5
2495: PUSH
2496: LD_INT 700
2498: ST_TO_ADDR
// normalTime := 0 0$20 ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_INT 700
2506: ST_TO_ADDR
// maxTime := 1 1$00 ;
2507: LD_ADDR_VAR 0 8
2511: PUSH
2512: LD_INT 2100
2514: ST_TO_ADDR
// delayTime := 0 0$3 ;
2515: LD_ADDR_VAR 0 7
2519: PUSH
2520: LD_INT 105
2522: ST_TO_ADDR
// end ; 4 :
2523: GO 2569
2525: LD_INT 4
2527: DOUBLE
2528: EQUAL
2529: IFTRUE 2533
2531: GO 2568
2533: POP
// begin time := 0 0$15 ;
2534: LD_ADDR_VAR 0 5
2538: PUSH
2539: LD_INT 525
2541: ST_TO_ADDR
// normalTime := 0 0$15 ;
2542: LD_ADDR_VAR 0 6
2546: PUSH
2547: LD_INT 525
2549: ST_TO_ADDR
// maxTime := 0 0$55 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1925
2557: ST_TO_ADDR
// delayTime := 0 0$2 ;
2558: LD_ADDR_VAR 0 7
2562: PUSH
2563: LD_INT 70
2565: ST_TO_ADDR
// end ; end ;
2566: GO 2569
2568: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2569: LD_ADDR_VAR 0 4
2573: PUSH
2574: LD_INT 9
2576: PUSH
2577: LD_INT 10
2579: PUSH
2580: LD_INT 11
2582: PUSH
2583: LD_INT 12
2585: PUSH
2586: LD_INT 13
2588: PUSH
2589: LD_INT 14
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: PUSH
2608: LD_INT 2
2610: PUSH
2611: LD_INT 3
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: LD_INT 7
2625: PUSH
2626: LD_INT 8
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// for i := 1 to 8 do
2639: LD_ADDR_VAR 0 1
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 8
2651: PUSH
2652: FOR_TO
2653: IFFALSE 2700
// begin if not mpSidePositions [ i ] then
2655: LD_EXP 5
2659: PUSH
2660: LD_VAR 0 1
2664: ARRAY
2665: NOT
2666: IFFALSE 2670
// continue ;
2668: GO 2652
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_VAR 0 3
2684: PUSH
2685: LD_EXP 5
2689: PUSH
2690: LD_VAR 0 1
2694: ARRAY
2695: ARRAY
2696: ADD
2697: ST_TO_ADDR
// end ;
2698: GO 2652
2700: POP
2701: POP
// x := 1 ;
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// repeat wait ( time ) ;
2710: LD_VAR 0 5
2714: PPUSH
2715: CALL_OW 67
// x := Inc ( x ) ;
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: LD_VAR 0 2
2728: PPUSH
2729: CALL 42582 0 1
2733: ST_TO_ADDR
// if x > 5 then
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 5
2741: GREATER
2742: IFFALSE 2752
// x := 1 ;
2744: LD_ADDR_VAR 0 2
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// for i in areas do
2752: LD_ADDR_VAR 0 1
2756: PUSH
2757: LD_VAR 0 4
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2802
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2765: LD_VAR 0 1
2769: PPUSH
2770: LD_INT 1
2772: PPUSH
2773: CALL_OW 287
2777: PUSH
2778: LD_INT 20
2780: LESS
2781: IFFALSE 2800
// begin CreateCratesArea ( x , i , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 1
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: CALL_OW 55
// end ; end ;
2800: GO 2762
2802: POP
2803: POP
// time := time + delayTime ;
2804: LD_ADDR_VAR 0 5
2808: PUSH
2809: LD_VAR 0 5
2813: PUSH
2814: LD_VAR 0 7
2818: PLUS
2819: ST_TO_ADDR
// if time > maxTime then
2820: LD_VAR 0 5
2824: PUSH
2825: LD_VAR 0 8
2829: GREATER
2830: IFFALSE 2842
// time := normalTime ;
2832: LD_ADDR_VAR 0 5
2836: PUSH
2837: LD_VAR 0 6
2841: ST_TO_ADDR
// until false ;
2842: LD_INT 0
2844: IFFALSE 2710
// end ; end_of_file
2846: PPOPN 8
2848: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2849: LD_VAR 0 1
2853: PPUSH
2854: CALL 56939 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 52109 0 1
// end ;
2867: PPOPN 1
2869: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2870: LD_VAR 0 1
2874: PPUSH
2875: CALL 56956 0 1
// end ;
2879: PPOPN 1
2881: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL 53162 0 1
2891: PPOPN 1
2893: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL 56997 0 2
2908: PPOPN 2
2910: END
// on VehicleConstruction_ApeConsumed ( factory , un ) do Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ;
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: CALL 52915 0 2
2925: PPOPN 2
2927: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ;
2928: LD_VAR 0 1
2932: PPUSH
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_VAR 0 3
2942: PPUSH
2943: CALL 53215 0 3
2947: PPOPN 3
2949: END
// on VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) do Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ;
2950: LD_VAR 0 1
2954: PPUSH
2955: LD_VAR 0 2
2959: PPUSH
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_VAR 0 4
2969: PPUSH
2970: LD_VAR 0 5
2974: PPUSH
2975: CALL 53899 0 5
2979: PPOPN 5
2981: END
// on VehicleCaptured ( newId , oldId , oldSide , unit ) do Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; end_of_file
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_VAR 0 3
2996: PPUSH
2997: LD_VAR 0 4
3001: PPUSH
3002: CALL 54002 0 4
3006: PPOPN 4
3008: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3009: LD_INT 0
3011: PPUSH
3012: PPUSH
// if exist_mode then
3013: LD_VAR 0 2
3017: IFFALSE 3063
// begin unit := CreateCharacter ( prefix & ident ) ;
3019: LD_ADDR_VAR 0 5
3023: PUSH
3024: LD_VAR 0 3
3028: PUSH
3029: LD_VAR 0 1
3033: STR
3034: PPUSH
3035: CALL_OW 34
3039: ST_TO_ADDR
// if unit then
3040: LD_VAR 0 5
3044: IFFALSE 3061
// DeleteCharacters ( prefix & ident ) ;
3046: LD_VAR 0 3
3050: PUSH
3051: LD_VAR 0 1
3055: STR
3056: PPUSH
3057: CALL_OW 40
// end else
3061: GO 3078
// unit := NewCharacter ( ident ) ;
3063: LD_ADDR_VAR 0 5
3067: PUSH
3068: LD_VAR 0 1
3072: PPUSH
3073: CALL_OW 25
3077: ST_TO_ADDR
// result := unit ;
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_VAR 0 5
3087: ST_TO_ADDR
// end ;
3088: LD_VAR 0 4
3092: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3093: LD_INT 0
3095: PPUSH
3096: PPUSH
// if exist_mode then
3097: LD_VAR 0 2
3101: IFFALSE 3126
// unit := CreateCharacter ( prefix & ident ) else
3103: LD_ADDR_VAR 0 5
3107: PUSH
3108: LD_VAR 0 3
3112: PUSH
3113: LD_VAR 0 1
3117: STR
3118: PPUSH
3119: CALL_OW 34
3123: ST_TO_ADDR
3124: GO 3141
// unit := NewCharacter ( ident ) ;
3126: LD_ADDR_VAR 0 5
3130: PUSH
3131: LD_VAR 0 1
3135: PPUSH
3136: CALL_OW 25
3140: ST_TO_ADDR
// result := unit ;
3141: LD_ADDR_VAR 0 4
3145: PUSH
3146: LD_VAR 0 5
3150: ST_TO_ADDR
// end ;
3151: LD_VAR 0 4
3155: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
// if not side or not nation then
3160: LD_VAR 0 1
3164: NOT
3165: IFTRUE 3174
3167: PUSH
3168: LD_VAR 0 2
3172: NOT
3173: OR
3174: IFFALSE 3178
// exit ;
3176: GO 3972
// case nation of nation_american :
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 1
3185: DOUBLE
3186: EQUAL
3187: IFTRUE 3191
3189: GO 3413
3191: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
3192: LD_ADDR_VAR 0 4
3196: PUSH
3197: LD_INT 35
3199: PUSH
3200: LD_INT 45
3202: PUSH
3203: LD_INT 46
3205: PUSH
3206: LD_INT 47
3208: PUSH
3209: LD_INT 82
3211: PUSH
3212: LD_INT 83
3214: PUSH
3215: LD_INT 84
3217: PUSH
3218: LD_INT 85
3220: PUSH
3221: LD_INT 86
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: LD_INT 2
3229: PUSH
3230: LD_INT 6
3232: PUSH
3233: LD_INT 15
3235: PUSH
3236: LD_INT 16
3238: PUSH
3239: LD_INT 7
3241: PUSH
3242: LD_INT 12
3244: PUSH
3245: LD_INT 13
3247: PUSH
3248: LD_INT 10
3250: PUSH
3251: LD_INT 14
3253: PUSH
3254: LD_INT 20
3256: PUSH
3257: LD_INT 21
3259: PUSH
3260: LD_INT 22
3262: PUSH
3263: LD_INT 25
3265: PUSH
3266: LD_INT 32
3268: PUSH
3269: LD_INT 27
3271: PUSH
3272: LD_INT 36
3274: PUSH
3275: LD_INT 69
3277: PUSH
3278: LD_INT 39
3280: PUSH
3281: LD_INT 34
3283: PUSH
3284: LD_INT 40
3286: PUSH
3287: LD_INT 48
3289: PUSH
3290: LD_INT 49
3292: PUSH
3293: LD_INT 50
3295: PUSH
3296: LD_INT 51
3298: PUSH
3299: LD_INT 52
3301: PUSH
3302: LD_INT 53
3304: PUSH
3305: LD_INT 54
3307: PUSH
3308: LD_INT 55
3310: PUSH
3311: LD_INT 56
3313: PUSH
3314: LD_INT 57
3316: PUSH
3317: LD_INT 58
3319: PUSH
3320: LD_INT 59
3322: PUSH
3323: LD_INT 60
3325: PUSH
3326: LD_INT 61
3328: PUSH
3329: LD_INT 62
3331: PUSH
3332: LD_INT 80
3334: PUSH
3335: LD_INT 82
3337: PUSH
3338: LD_INT 83
3340: PUSH
3341: LD_INT 84
3343: PUSH
3344: LD_INT 85
3346: PUSH
3347: LD_INT 86
3349: PUSH
3350: LD_INT 90
3352: PUSH
3353: LD_INT 93
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: LIST
3362: LIST
3363: LIST
3364: LIST
3365: LIST
3366: LIST
3367: LIST
3368: LIST
3369: LIST
3370: LIST
3371: LIST
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: LIST
3377: LIST
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: LIST
3395: LIST
3396: LIST
3397: LIST
3398: LIST
3399: LIST
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: ST_TO_ADDR
3411: GO 3894
3413: LD_INT 2
3415: DOUBLE
3416: EQUAL
3417: IFTRUE 3421
3419: GO 3655
3421: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
3422: LD_ADDR_VAR 0 4
3426: PUSH
3427: LD_INT 35
3429: PUSH
3430: LD_INT 45
3432: PUSH
3433: LD_INT 46
3435: PUSH
3436: LD_INT 47
3438: PUSH
3439: LD_INT 82
3441: PUSH
3442: LD_INT 83
3444: PUSH
3445: LD_INT 84
3447: PUSH
3448: LD_INT 85
3450: PUSH
3451: LD_INT 87
3453: PUSH
3454: LD_INT 70
3456: PUSH
3457: LD_INT 1
3459: PUSH
3460: LD_INT 11
3462: PUSH
3463: LD_INT 3
3465: PUSH
3466: LD_INT 4
3468: PUSH
3469: LD_INT 5
3471: PUSH
3472: LD_INT 6
3474: PUSH
3475: LD_INT 15
3477: PUSH
3478: LD_INT 18
3480: PUSH
3481: LD_INT 7
3483: PUSH
3484: LD_INT 17
3486: PUSH
3487: LD_INT 8
3489: PUSH
3490: LD_INT 20
3492: PUSH
3493: LD_INT 21
3495: PUSH
3496: LD_INT 22
3498: PUSH
3499: LD_INT 72
3501: PUSH
3502: LD_INT 26
3504: PUSH
3505: LD_INT 69
3507: PUSH
3508: LD_INT 39
3510: PUSH
3511: LD_INT 40
3513: PUSH
3514: LD_INT 41
3516: PUSH
3517: LD_INT 42
3519: PUSH
3520: LD_INT 43
3522: PUSH
3523: LD_INT 48
3525: PUSH
3526: LD_INT 49
3528: PUSH
3529: LD_INT 50
3531: PUSH
3532: LD_INT 51
3534: PUSH
3535: LD_INT 52
3537: PUSH
3538: LD_INT 53
3540: PUSH
3541: LD_INT 54
3543: PUSH
3544: LD_INT 55
3546: PUSH
3547: LD_INT 56
3549: PUSH
3550: LD_INT 60
3552: PUSH
3553: LD_INT 61
3555: PUSH
3556: LD_INT 62
3558: PUSH
3559: LD_INT 66
3561: PUSH
3562: LD_INT 67
3564: PUSH
3565: LD_INT 68
3567: PUSH
3568: LD_INT 81
3570: PUSH
3571: LD_INT 82
3573: PUSH
3574: LD_INT 83
3576: PUSH
3577: LD_INT 84
3579: PUSH
3580: LD_INT 85
3582: PUSH
3583: LD_INT 87
3585: PUSH
3586: LD_INT 88
3588: PUSH
3589: LD_INT 92
3591: PUSH
3592: LD_INT 94
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: LIST
3599: LIST
3600: LIST
3601: LIST
3602: LIST
3603: LIST
3604: LIST
3605: LIST
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: LIST
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: LIST
3651: LIST
3652: ST_TO_ADDR
3653: GO 3894
3655: LD_INT 3
3657: DOUBLE
3658: EQUAL
3659: IFTRUE 3663
3661: GO 3893
3663: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
3664: LD_ADDR_VAR 0 4
3668: PUSH
3669: LD_INT 46
3671: PUSH
3672: LD_INT 47
3674: PUSH
3675: LD_INT 1
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: LD_INT 82
3683: PUSH
3684: LD_INT 83
3686: PUSH
3687: LD_INT 84
3689: PUSH
3690: LD_INT 85
3692: PUSH
3693: LD_INT 86
3695: PUSH
3696: LD_INT 11
3698: PUSH
3699: LD_INT 9
3701: PUSH
3702: LD_INT 20
3704: PUSH
3705: LD_INT 19
3707: PUSH
3708: LD_INT 21
3710: PUSH
3711: LD_INT 24
3713: PUSH
3714: LD_INT 22
3716: PUSH
3717: LD_INT 25
3719: PUSH
3720: LD_INT 28
3722: PUSH
3723: LD_INT 29
3725: PUSH
3726: LD_INT 30
3728: PUSH
3729: LD_INT 31
3731: PUSH
3732: LD_INT 37
3734: PUSH
3735: LD_INT 38
3737: PUSH
3738: LD_INT 32
3740: PUSH
3741: LD_INT 27
3743: PUSH
3744: LD_INT 33
3746: PUSH
3747: LD_INT 69
3749: PUSH
3750: LD_INT 39
3752: PUSH
3753: LD_INT 34
3755: PUSH
3756: LD_INT 40
3758: PUSH
3759: LD_INT 71
3761: PUSH
3762: LD_INT 23
3764: PUSH
3765: LD_INT 44
3767: PUSH
3768: LD_INT 48
3770: PUSH
3771: LD_INT 49
3773: PUSH
3774: LD_INT 50
3776: PUSH
3777: LD_INT 51
3779: PUSH
3780: LD_INT 52
3782: PUSH
3783: LD_INT 53
3785: PUSH
3786: LD_INT 54
3788: PUSH
3789: LD_INT 55
3791: PUSH
3792: LD_INT 56
3794: PUSH
3795: LD_INT 57
3797: PUSH
3798: LD_INT 58
3800: PUSH
3801: LD_INT 59
3803: PUSH
3804: LD_INT 63
3806: PUSH
3807: LD_INT 64
3809: PUSH
3810: LD_INT 65
3812: PUSH
3813: LD_INT 82
3815: PUSH
3816: LD_INT 83
3818: PUSH
3819: LD_INT 84
3821: PUSH
3822: LD_INT 85
3824: PUSH
3825: LD_INT 86
3827: PUSH
3828: LD_INT 89
3830: PUSH
3831: LD_INT 91
3833: PUSH
3834: EMPTY
3835: LIST
3836: LIST
3837: LIST
3838: LIST
3839: LIST
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: LIST
3861: LIST
3862: LIST
3863: LIST
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: LIST
3869: LIST
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: ST_TO_ADDR
3891: GO 3894
3893: POP
// if state > - 1 and state < 3 then
3894: LD_VAR 0 3
3898: PUSH
3899: LD_INT 1
3901: NEG
3902: GREATER
3903: IFFALSE 3915
3905: PUSH
3906: LD_VAR 0 3
3910: PUSH
3911: LD_INT 3
3913: LESS
3914: AND
3915: IFFALSE 3972
// for i in result do
3917: LD_ADDR_VAR 0 5
3921: PUSH
3922: LD_VAR 0 4
3926: PUSH
3927: FOR_IN
3928: IFFALSE 3970
// if GetTech ( i , side ) <> state then
3930: LD_VAR 0 5
3934: PPUSH
3935: LD_VAR 0 1
3939: PPUSH
3940: CALL_OW 321
3944: PUSH
3945: LD_VAR 0 3
3949: NONEQUAL
3950: IFFALSE 3968
// result := result diff i ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: LD_VAR 0 4
3961: PUSH
3962: LD_VAR 0 5
3966: DIFF
3967: ST_TO_ADDR
3968: GO 3927
3970: POP
3971: POP
// end ;
3972: LD_VAR 0 4
3976: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3977: LD_INT 0
3979: PPUSH
3980: PPUSH
3981: PPUSH
// result := true ;
3982: LD_ADDR_VAR 0 3
3986: PUSH
3987: LD_INT 1
3989: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3990: LD_ADDR_VAR 0 5
3994: PUSH
3995: LD_VAR 0 2
3999: PPUSH
4000: CALL_OW 480
4004: ST_TO_ADDR
// if not tmp then
4005: LD_VAR 0 5
4009: NOT
4010: IFFALSE 4014
// exit ;
4012: GO 4063
// for i in tmp do
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: LD_VAR 0 5
4023: PUSH
4024: FOR_IN
4025: IFFALSE 4061
// if GetTech ( i , side ) <> state_researched then
4027: LD_VAR 0 4
4031: PPUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 321
4041: PUSH
4042: LD_INT 2
4044: NONEQUAL
4045: IFFALSE 4059
// begin result := false ;
4047: LD_ADDR_VAR 0 3
4051: PUSH
4052: LD_INT 0
4054: ST_TO_ADDR
// exit ;
4055: POP
4056: POP
4057: GO 4063
// end ;
4059: GO 4024
4061: POP
4062: POP
// end ;
4063: LD_VAR 0 3
4067: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
4068: LD_INT 0
4070: PPUSH
4071: PPUSH
4072: PPUSH
4073: PPUSH
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
4078: PPUSH
4079: PPUSH
4080: PPUSH
4081: PPUSH
4082: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
4083: LD_VAR 0 1
4087: NOT
4088: IFTRUE 4105
4090: PUSH
4091: LD_VAR 0 1
4095: PPUSH
4096: CALL_OW 257
4100: PUSH
4101: LD_INT 9
4103: NONEQUAL
4104: OR
4105: IFFALSE 4109
// exit ;
4107: GO 4688
// side := GetSide ( unit ) ;
4109: LD_ADDR_VAR 0 9
4113: PUSH
4114: LD_VAR 0 1
4118: PPUSH
4119: CALL_OW 255
4123: ST_TO_ADDR
// tech_space := tech_spacanom ;
4124: LD_ADDR_VAR 0 12
4128: PUSH
4129: LD_INT 29
4131: ST_TO_ADDR
// tech_time := tech_taurad ;
4132: LD_ADDR_VAR 0 13
4136: PUSH
4137: LD_INT 28
4139: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4140: LD_ADDR_VAR 0 11
4144: PUSH
4145: LD_VAR 0 1
4149: PPUSH
4150: CALL_OW 310
4154: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4155: LD_VAR 0 11
4159: PPUSH
4160: CALL_OW 247
4164: PUSH
4165: LD_INT 2
4167: EQUAL
4168: IFFALSE 4172
// exit ;
4170: GO 4688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4172: LD_ADDR_VAR 0 8
4176: PUSH
4177: LD_INT 81
4179: PUSH
4180: LD_VAR 0 9
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: LD_INT 21
4194: PUSH
4195: LD_INT 3
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PPUSH
4210: CALL_OW 69
4214: ST_TO_ADDR
// if not tmp then
4215: LD_VAR 0 8
4219: NOT
4220: IFFALSE 4224
// exit ;
4222: GO 4688
// if in_unit then
4224: LD_VAR 0 11
4228: IFFALSE 4252
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4230: LD_ADDR_VAR 0 10
4234: PUSH
4235: LD_VAR 0 8
4239: PPUSH
4240: LD_VAR 0 11
4244: PPUSH
4245: CALL_OW 74
4249: ST_TO_ADDR
4250: GO 4272
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4252: LD_ADDR_VAR 0 10
4256: PUSH
4257: LD_VAR 0 8
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: CALL_OW 74
4271: ST_TO_ADDR
// if not enemy then
4272: LD_VAR 0 10
4276: NOT
4277: IFFALSE 4281
// exit ;
4279: GO 4688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4281: LD_VAR 0 11
4285: IFFALSE 4307
4287: PUSH
4288: LD_VAR 0 11
4292: PPUSH
4293: LD_VAR 0 10
4297: PPUSH
4298: CALL_OW 296
4302: PUSH
4303: LD_INT 13
4305: GREATER
4306: AND
4307: IFTRUE 4329
4309: PUSH
4310: LD_VAR 0 1
4314: PPUSH
4315: LD_VAR 0 10
4319: PPUSH
4320: CALL_OW 296
4324: PUSH
4325: LD_INT 12
4327: GREATER
4328: OR
4329: IFFALSE 4333
// exit ;
4331: GO 4688
// missile := [ 1 ] ;
4333: LD_ADDR_VAR 0 14
4337: PUSH
4338: LD_INT 1
4340: PUSH
4341: EMPTY
4342: LIST
4343: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4344: LD_VAR 0 9
4348: PPUSH
4349: LD_VAR 0 12
4353: PPUSH
4354: CALL_OW 325
4358: IFFALSE 4387
// missile := Replace ( missile , missile + 1 , 2 ) ;
4360: LD_ADDR_VAR 0 14
4364: PUSH
4365: LD_VAR 0 14
4369: PPUSH
4370: LD_VAR 0 14
4374: PUSH
4375: LD_INT 1
4377: PLUS
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: CALL_OW 1
4386: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4387: LD_VAR 0 9
4391: PPUSH
4392: LD_VAR 0 13
4396: PPUSH
4397: CALL_OW 325
4401: IFFALSE 4425
4403: PUSH
4404: LD_VAR 0 10
4408: PPUSH
4409: CALL_OW 255
4413: PPUSH
4414: LD_VAR 0 13
4418: PPUSH
4419: CALL_OW 325
4423: NOT
4424: AND
4425: IFFALSE 4454
// missile := Replace ( missile , missile + 1 , 3 ) ;
4427: LD_ADDR_VAR 0 14
4431: PUSH
4432: LD_VAR 0 14
4436: PPUSH
4437: LD_VAR 0 14
4441: PUSH
4442: LD_INT 1
4444: PLUS
4445: PPUSH
4446: LD_INT 3
4448: PPUSH
4449: CALL_OW 1
4453: ST_TO_ADDR
// if missile < 2 then
4454: LD_VAR 0 14
4458: PUSH
4459: LD_INT 2
4461: LESS
4462: IFFALSE 4466
// exit ;
4464: GO 4688
// x := GetX ( enemy ) ;
4466: LD_ADDR_VAR 0 4
4470: PUSH
4471: LD_VAR 0 10
4475: PPUSH
4476: CALL_OW 250
4480: ST_TO_ADDR
// y := GetY ( enemy ) ;
4481: LD_ADDR_VAR 0 5
4485: PUSH
4486: LD_VAR 0 10
4490: PPUSH
4491: CALL_OW 251
4495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4496: LD_ADDR_VAR 0 6
4500: PUSH
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 1
4508: NEG
4509: PPUSH
4510: LD_INT 1
4512: PPUSH
4513: CALL_OW 12
4517: PLUS
4518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4519: LD_ADDR_VAR 0 7
4523: PUSH
4524: LD_VAR 0 5
4528: PUSH
4529: LD_INT 1
4531: NEG
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 12
4540: PLUS
4541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4542: LD_VAR 0 6
4546: PPUSH
4547: LD_VAR 0 7
4551: PPUSH
4552: CALL_OW 488
4556: NOT
4557: IFFALSE 4579
// begin _x := x ;
4559: LD_ADDR_VAR 0 6
4563: PUSH
4564: LD_VAR 0 4
4568: ST_TO_ADDR
// _y := y ;
4569: LD_ADDR_VAR 0 7
4573: PUSH
4574: LD_VAR 0 5
4578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4579: LD_ADDR_VAR 0 3
4583: PUSH
4584: LD_INT 1
4586: PPUSH
4587: LD_VAR 0 14
4591: PPUSH
4592: CALL_OW 12
4596: ST_TO_ADDR
// case i of 1 :
4597: LD_VAR 0 3
4601: PUSH
4602: LD_INT 1
4604: DOUBLE
4605: EQUAL
4606: IFTRUE 4610
4608: GO 4627
4610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4611: LD_VAR 0 1
4615: PPUSH
4616: LD_VAR 0 10
4620: PPUSH
4621: CALL_OW 115
4625: GO 4688
4627: LD_INT 2
4629: DOUBLE
4630: EQUAL
4631: IFTRUE 4635
4633: GO 4657
4635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4636: LD_VAR 0 1
4640: PPUSH
4641: LD_VAR 0 6
4645: PPUSH
4646: LD_VAR 0 7
4650: PPUSH
4651: CALL_OW 153
4655: GO 4688
4657: LD_INT 3
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4687
4665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 6
4675: PPUSH
4676: LD_VAR 0 7
4680: PPUSH
4681: CALL_OW 154
4685: GO 4688
4687: POP
// end ;
4688: LD_VAR 0 2
4692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4693: LD_INT 0
4695: PPUSH
4696: PPUSH
4697: PPUSH
4698: PPUSH
4699: PPUSH
4700: PPUSH
// if not unit or not building then
4701: LD_VAR 0 1
4705: NOT
4706: IFTRUE 4715
4708: PUSH
4709: LD_VAR 0 2
4713: NOT
4714: OR
4715: IFFALSE 4719
// exit ;
4717: GO 4877
// x := GetX ( building ) ;
4719: LD_ADDR_VAR 0 5
4723: PUSH
4724: LD_VAR 0 2
4728: PPUSH
4729: CALL_OW 250
4733: ST_TO_ADDR
// y := GetY ( building ) ;
4734: LD_ADDR_VAR 0 6
4738: PUSH
4739: LD_VAR 0 2
4743: PPUSH
4744: CALL_OW 251
4748: ST_TO_ADDR
// for i := 0 to 5 do
4749: LD_ADDR_VAR 0 4
4753: PUSH
4754: DOUBLE
4755: LD_INT 0
4757: DEC
4758: ST_TO_ADDR
4759: LD_INT 5
4761: PUSH
4762: FOR_TO
4763: IFFALSE 4875
// begin _x := ShiftX ( x , i , 3 ) ;
4765: LD_ADDR_VAR 0 7
4769: PUSH
4770: LD_VAR 0 5
4774: PPUSH
4775: LD_VAR 0 4
4779: PPUSH
4780: LD_INT 3
4782: PPUSH
4783: CALL_OW 272
4787: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4788: LD_ADDR_VAR 0 8
4792: PUSH
4793: LD_VAR 0 6
4797: PPUSH
4798: LD_VAR 0 4
4802: PPUSH
4803: LD_INT 3
4805: PPUSH
4806: CALL_OW 273
4810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4811: LD_VAR 0 7
4815: PPUSH
4816: LD_VAR 0 8
4820: PPUSH
4821: CALL_OW 488
4825: NOT
4826: IFFALSE 4830
// continue ;
4828: GO 4762
// if HexInfo ( _x , _y ) = 0 then
4830: LD_VAR 0 7
4834: PPUSH
4835: LD_VAR 0 8
4839: PPUSH
4840: CALL_OW 428
4844: PUSH
4845: LD_INT 0
4847: EQUAL
4848: IFFALSE 4873
// begin ComMoveXY ( unit , _x , _y ) ;
4850: LD_VAR 0 1
4854: PPUSH
4855: LD_VAR 0 7
4859: PPUSH
4860: LD_VAR 0 8
4864: PPUSH
4865: CALL_OW 111
// exit ;
4869: POP
4870: POP
4871: GO 4877
// end ; end ;
4873: GO 4762
4875: POP
4876: POP
// end ;
4877: LD_VAR 0 3
4881: RET
// export function ScanBase ( side , base_area ) ; begin
4882: LD_INT 0
4884: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4885: LD_ADDR_VAR 0 3
4889: PUSH
4890: LD_VAR 0 2
4894: PPUSH
4895: LD_INT 81
4897: PUSH
4898: LD_VAR 0 1
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 70
4911: ST_TO_ADDR
// end ;
4912: LD_VAR 0 3
4916: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4917: LD_INT 0
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
// result := false ;
4923: LD_ADDR_VAR 0 2
4927: PUSH
4928: LD_INT 0
4930: ST_TO_ADDR
// side := GetSide ( unit ) ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: LD_VAR 0 1
4940: PPUSH
4941: CALL_OW 255
4945: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4946: LD_ADDR_VAR 0 4
4950: PUSH
4951: LD_VAR 0 1
4955: PPUSH
4956: CALL_OW 248
4960: ST_TO_ADDR
// case nat of 1 :
4961: LD_VAR 0 4
4965: PUSH
4966: LD_INT 1
4968: DOUBLE
4969: EQUAL
4970: IFTRUE 4974
4972: GO 4985
4974: POP
// tech := tech_lassight ; 2 :
4975: LD_ADDR_VAR 0 5
4979: PUSH
4980: LD_INT 12
4982: ST_TO_ADDR
4983: GO 5024
4985: LD_INT 2
4987: DOUBLE
4988: EQUAL
4989: IFTRUE 4993
4991: GO 5004
4993: POP
// tech := tech_mortar ; 3 :
4994: LD_ADDR_VAR 0 5
4998: PUSH
4999: LD_INT 41
5001: ST_TO_ADDR
5002: GO 5024
5004: LD_INT 3
5006: DOUBLE
5007: EQUAL
5008: IFTRUE 5012
5010: GO 5023
5012: POP
// tech := tech_bazooka ; end ;
5013: LD_ADDR_VAR 0 5
5017: PUSH
5018: LD_INT 44
5020: ST_TO_ADDR
5021: GO 5024
5023: POP
// if Researched ( side , tech ) then
5024: LD_VAR 0 3
5028: PPUSH
5029: LD_VAR 0 5
5033: PPUSH
5034: CALL_OW 325
5038: IFFALSE 5065
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
5040: LD_ADDR_VAR 0 2
5044: PUSH
5045: LD_INT 5
5047: PUSH
5048: LD_INT 8
5050: PUSH
5051: LD_INT 9
5053: PUSH
5054: EMPTY
5055: LIST
5056: LIST
5057: LIST
5058: PUSH
5059: LD_VAR 0 4
5063: ARRAY
5064: ST_TO_ADDR
// end ;
5065: LD_VAR 0 2
5069: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
5070: LD_INT 0
5072: PPUSH
5073: PPUSH
5074: PPUSH
// if not mines then
5075: LD_VAR 0 2
5079: NOT
5080: IFFALSE 5084
// exit ;
5082: GO 5228
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
5084: LD_ADDR_VAR 0 5
5088: PUSH
5089: LD_INT 81
5091: PUSH
5092: LD_VAR 0 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: LD_INT 3
5103: PUSH
5104: LD_INT 21
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: ST_TO_ADDR
// for i in mines do
5127: LD_ADDR_VAR 0 4
5131: PUSH
5132: LD_VAR 0 2
5136: PUSH
5137: FOR_IN
5138: IFFALSE 5226
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5140: LD_VAR 0 4
5144: PUSH
5145: LD_INT 1
5147: ARRAY
5148: PPUSH
5149: LD_VAR 0 4
5153: PUSH
5154: LD_INT 2
5156: ARRAY
5157: PPUSH
5158: CALL_OW 458
5162: NOT
5163: IFFALSE 5167
// continue ;
5165: GO 5137
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5167: LD_VAR 0 4
5171: PUSH
5172: LD_INT 1
5174: ARRAY
5175: PPUSH
5176: LD_VAR 0 4
5180: PUSH
5181: LD_INT 2
5183: ARRAY
5184: PPUSH
5185: CALL_OW 428
5189: PUSH
5190: LD_VAR 0 5
5194: IN
5195: IFFALSE 5224
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5197: LD_VAR 0 4
5201: PUSH
5202: LD_INT 1
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 4
5210: PUSH
5211: LD_INT 2
5213: ARRAY
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: CALL_OW 456
// end ;
5224: GO 5137
5226: POP
5227: POP
// end ;
5228: LD_VAR 0 3
5232: RET
// export function Count ( array ) ; begin
5233: LD_INT 0
5235: PPUSH
// result := array + 0 ;
5236: LD_ADDR_VAR 0 2
5240: PUSH
5241: LD_VAR 0 1
5245: PUSH
5246: LD_INT 0
5248: PLUS
5249: ST_TO_ADDR
// end ;
5250: LD_VAR 0 2
5254: RET
// export function IsEmpty ( building ) ; begin
5255: LD_INT 0
5257: PPUSH
// if not building then
5258: LD_VAR 0 1
5262: NOT
5263: IFFALSE 5267
// exit ;
5265: GO 5310
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5267: LD_ADDR_VAR 0 2
5271: PUSH
5272: LD_VAR 0 1
5276: PUSH
5277: LD_INT 22
5279: PUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 255
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PUSH
5294: LD_INT 58
5296: PUSH
5297: EMPTY
5298: LIST
5299: PUSH
5300: EMPTY
5301: LIST
5302: LIST
5303: PPUSH
5304: CALL_OW 69
5308: IN
5309: ST_TO_ADDR
// end ;
5310: LD_VAR 0 2
5314: RET
// export function IsNotFull ( building ) ; var places ; begin
5315: LD_INT 0
5317: PPUSH
5318: PPUSH
// if not building then
5319: LD_VAR 0 1
5323: NOT
5324: IFFALSE 5328
// exit ;
5326: GO 5356
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5328: LD_ADDR_VAR 0 2
5332: PUSH
5333: LD_VAR 0 1
5337: PPUSH
5338: LD_INT 3
5340: PUSH
5341: LD_INT 62
5343: PUSH
5344: EMPTY
5345: LIST
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PPUSH
5351: CALL_OW 72
5355: ST_TO_ADDR
// end ;
5356: LD_VAR 0 2
5360: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5361: LD_INT 0
5363: PPUSH
5364: PPUSH
5365: PPUSH
5366: PPUSH
// tmp := [ ] ;
5367: LD_ADDR_VAR 0 3
5371: PUSH
5372: EMPTY
5373: ST_TO_ADDR
// list := [ ] ;
5374: LD_ADDR_VAR 0 5
5378: PUSH
5379: EMPTY
5380: ST_TO_ADDR
// for i = 16 to 25 do
5381: LD_ADDR_VAR 0 4
5385: PUSH
5386: DOUBLE
5387: LD_INT 16
5389: DEC
5390: ST_TO_ADDR
5391: LD_INT 25
5393: PUSH
5394: FOR_TO
5395: IFFALSE 5468
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5397: LD_ADDR_VAR 0 3
5401: PUSH
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 22
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 255
5419: PUSH
5420: EMPTY
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 91
5426: PUSH
5427: LD_VAR 0 1
5431: PUSH
5432: LD_INT 6
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: LD_INT 30
5442: PUSH
5443: LD_VAR 0 4
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: EMPTY
5453: LIST
5454: LIST
5455: LIST
5456: PUSH
5457: EMPTY
5458: LIST
5459: PPUSH
5460: CALL_OW 69
5464: ADD
5465: ST_TO_ADDR
5466: GO 5394
5468: POP
5469: POP
// for i = 1 to tmp do
5470: LD_ADDR_VAR 0 4
5474: PUSH
5475: DOUBLE
5476: LD_INT 1
5478: DEC
5479: ST_TO_ADDR
5480: LD_VAR 0 3
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5574
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5488: LD_ADDR_VAR 0 5
5492: PUSH
5493: LD_VAR 0 5
5497: PUSH
5498: LD_VAR 0 3
5502: PUSH
5503: LD_VAR 0 4
5507: ARRAY
5508: PPUSH
5509: CALL_OW 266
5513: PUSH
5514: LD_VAR 0 3
5518: PUSH
5519: LD_VAR 0 4
5523: ARRAY
5524: PPUSH
5525: CALL_OW 250
5529: PUSH
5530: LD_VAR 0 3
5534: PUSH
5535: LD_VAR 0 4
5539: ARRAY
5540: PPUSH
5541: CALL_OW 251
5545: PUSH
5546: LD_VAR 0 3
5550: PUSH
5551: LD_VAR 0 4
5555: ARRAY
5556: PPUSH
5557: CALL_OW 254
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: LIST
5567: PUSH
5568: EMPTY
5569: LIST
5570: ADD
5571: ST_TO_ADDR
5572: GO 5485
5574: POP
5575: POP
// result := list ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: LD_VAR 0 5
5585: ST_TO_ADDR
// end ;
5586: LD_VAR 0 2
5590: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5591: LD_INT 0
5593: PPUSH
5594: PPUSH
5595: PPUSH
5596: PPUSH
5597: PPUSH
5598: PPUSH
5599: PPUSH
// if not factory then
5600: LD_VAR 0 1
5604: NOT
5605: IFFALSE 5609
// exit ;
5607: GO 6212
// if control = control_apeman then
5609: LD_VAR 0 4
5613: PUSH
5614: LD_INT 5
5616: EQUAL
5617: IFFALSE 5726
// begin tmp := UnitsInside ( factory ) ;
5619: LD_ADDR_VAR 0 8
5623: PUSH
5624: LD_VAR 0 1
5628: PPUSH
5629: CALL_OW 313
5633: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5634: LD_VAR 0 8
5638: PPUSH
5639: LD_INT 25
5641: PUSH
5642: LD_INT 12
5644: PUSH
5645: EMPTY
5646: LIST
5647: LIST
5648: PPUSH
5649: CALL_OW 72
5653: NOT
5654: IFFALSE 5664
// control := control_manual ;
5656: LD_ADDR_VAR 0 4
5660: PUSH
5661: LD_INT 1
5663: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5664: LD_ADDR_VAR 0 8
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL 5361 0 1
5678: ST_TO_ADDR
// if tmp then
5679: LD_VAR 0 8
5683: IFFALSE 5726
// begin for i in tmp do
5685: LD_ADDR_VAR 0 7
5689: PUSH
5690: LD_VAR 0 8
5694: PUSH
5695: FOR_IN
5696: IFFALSE 5724
// if i [ 1 ] = b_ext_radio then
5698: LD_VAR 0 7
5702: PUSH
5703: LD_INT 1
5705: ARRAY
5706: PUSH
5707: LD_INT 22
5709: EQUAL
5710: IFFALSE 5722
// begin control := control_remote ;
5712: LD_ADDR_VAR 0 4
5716: PUSH
5717: LD_INT 2
5719: ST_TO_ADDR
// break ;
5720: GO 5724
// end ;
5722: GO 5695
5724: POP
5725: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_VAR 0 4
5745: PPUSH
5746: LD_VAR 0 5
5750: PPUSH
5751: CALL_OW 448
5755: IFFALSE 5790
// begin result := [ chassis , engine , control , weapon ] ;
5757: LD_ADDR_VAR 0 6
5761: PUSH
5762: LD_VAR 0 2
5766: PUSH
5767: LD_VAR 0 3
5771: PUSH
5772: LD_VAR 0 4
5776: PUSH
5777: LD_VAR 0 5
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: ST_TO_ADDR
// exit ;
5788: GO 6212
// end ; _chassis := AvailableChassisList ( factory ) ;
5790: LD_ADDR_VAR 0 9
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 475
5804: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5805: LD_ADDR_VAR 0 11
5809: PUSH
5810: LD_VAR 0 1
5814: PPUSH
5815: CALL_OW 476
5819: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5820: LD_ADDR_VAR 0 12
5824: PUSH
5825: LD_VAR 0 1
5829: PPUSH
5830: CALL_OW 477
5834: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5835: LD_ADDR_VAR 0 10
5839: PUSH
5840: LD_VAR 0 1
5844: PPUSH
5845: CALL_OW 478
5849: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5850: LD_VAR 0 9
5854: NOT
5855: IFTRUE 5864
5857: PUSH
5858: LD_VAR 0 11
5862: NOT
5863: OR
5864: IFTRUE 5873
5866: PUSH
5867: LD_VAR 0 12
5871: NOT
5872: OR
5873: IFTRUE 5882
5875: PUSH
5876: LD_VAR 0 10
5880: NOT
5881: OR
5882: IFFALSE 5917
// begin result := [ chassis , engine , control , weapon ] ;
5884: LD_ADDR_VAR 0 6
5888: PUSH
5889: LD_VAR 0 2
5893: PUSH
5894: LD_VAR 0 3
5898: PUSH
5899: LD_VAR 0 4
5903: PUSH
5904: LD_VAR 0 5
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: ST_TO_ADDR
// exit ;
5915: GO 6212
// end ; if not chassis in _chassis then
5917: LD_VAR 0 2
5921: PUSH
5922: LD_VAR 0 9
5926: IN
5927: NOT
5928: IFFALSE 5954
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: LD_VAR 0 9
5939: PUSH
5940: LD_INT 1
5942: PPUSH
5943: LD_VAR 0 9
5947: PPUSH
5948: CALL_OW 12
5952: ARRAY
5953: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5954: LD_VAR 0 2
5958: PPUSH
5959: LD_VAR 0 3
5963: PPUSH
5964: CALL 6217 0 2
5968: NOT
5969: IFFALSE 6030
// repeat engine := _engine [ 1 ] ;
5971: LD_ADDR_VAR 0 3
5975: PUSH
5976: LD_VAR 0 11
5980: PUSH
5981: LD_INT 1
5983: ARRAY
5984: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5985: LD_ADDR_VAR 0 11
5989: PUSH
5990: LD_VAR 0 11
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: CALL_OW 3
6002: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_VAR 0 3
6012: PPUSH
6013: CALL 6217 0 2
6017: IFTRUE 6028
6019: PUSH
6020: LD_VAR 0 11
6024: PUSH
6025: EMPTY
6026: EQUAL
6027: OR
6028: IFFALSE 5971
// if not control in _control then
6030: LD_VAR 0 4
6034: PUSH
6035: LD_VAR 0 12
6039: IN
6040: NOT
6041: IFFALSE 6067
// control := _control [ rand ( 1 , _control ) ] ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: LD_VAR 0 12
6052: PUSH
6053: LD_INT 1
6055: PPUSH
6056: LD_VAR 0 12
6060: PPUSH
6061: CALL_OW 12
6065: ARRAY
6066: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_VAR 0 5
6076: PPUSH
6077: CALL 6439 0 2
6081: NOT
6082: IFFALSE 6143
// repeat weapon := _weapon [ 1 ] ;
6084: LD_ADDR_VAR 0 5
6088: PUSH
6089: LD_VAR 0 10
6093: PUSH
6094: LD_INT 1
6096: ARRAY
6097: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
6098: LD_ADDR_VAR 0 10
6102: PUSH
6103: LD_VAR 0 10
6107: PPUSH
6108: LD_INT 1
6110: PPUSH
6111: CALL_OW 3
6115: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6116: LD_VAR 0 2
6120: PPUSH
6121: LD_VAR 0 5
6125: PPUSH
6126: CALL 6439 0 2
6130: IFTRUE 6141
6132: PUSH
6133: LD_VAR 0 10
6137: PUSH
6138: EMPTY
6139: EQUAL
6140: OR
6141: IFFALSE 6084
// result := [ ] ;
6143: LD_ADDR_VAR 0 6
6147: PUSH
6148: EMPTY
6149: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6150: LD_VAR 0 1
6154: PPUSH
6155: LD_VAR 0 2
6159: PPUSH
6160: LD_VAR 0 3
6164: PPUSH
6165: LD_VAR 0 4
6169: PPUSH
6170: LD_VAR 0 5
6174: PPUSH
6175: CALL_OW 448
6179: IFFALSE 6212
// result := [ chassis , engine , control , weapon ] ;
6181: LD_ADDR_VAR 0 6
6185: PUSH
6186: LD_VAR 0 2
6190: PUSH
6191: LD_VAR 0 3
6195: PUSH
6196: LD_VAR 0 4
6200: PUSH
6201: LD_VAR 0 5
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: ST_TO_ADDR
// end ;
6212: LD_VAR 0 6
6216: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6217: LD_INT 0
6219: PPUSH
// if not chassis or not engine then
6220: LD_VAR 0 1
6224: NOT
6225: IFTRUE 6234
6227: PUSH
6228: LD_VAR 0 2
6232: NOT
6233: OR
6234: IFFALSE 6238
// exit ;
6236: GO 6434
// case engine of engine_solar :
6238: LD_VAR 0 2
6242: PUSH
6243: LD_INT 2
6245: DOUBLE
6246: EQUAL
6247: IFTRUE 6251
6249: GO 6289
6251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6252: LD_ADDR_VAR 0 3
6256: PUSH
6257: LD_INT 11
6259: PUSH
6260: LD_INT 12
6262: PUSH
6263: LD_INT 13
6265: PUSH
6266: LD_INT 14
6268: PUSH
6269: LD_INT 1
6271: PUSH
6272: LD_INT 2
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: ST_TO_ADDR
6287: GO 6418
6289: LD_INT 1
6291: DOUBLE
6292: EQUAL
6293: IFTRUE 6297
6295: GO 6359
6297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6298: LD_ADDR_VAR 0 3
6302: PUSH
6303: LD_INT 11
6305: PUSH
6306: LD_INT 12
6308: PUSH
6309: LD_INT 13
6311: PUSH
6312: LD_INT 14
6314: PUSH
6315: LD_INT 1
6317: PUSH
6318: LD_INT 2
6320: PUSH
6321: LD_INT 3
6323: PUSH
6324: LD_INT 4
6326: PUSH
6327: LD_INT 5
6329: PUSH
6330: LD_INT 21
6332: PUSH
6333: LD_INT 23
6335: PUSH
6336: LD_INT 22
6338: PUSH
6339: LD_INT 24
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: ST_TO_ADDR
6357: GO 6418
6359: LD_INT 3
6361: DOUBLE
6362: EQUAL
6363: IFTRUE 6367
6365: GO 6417
6367: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6368: LD_ADDR_VAR 0 3
6372: PUSH
6373: LD_INT 13
6375: PUSH
6376: LD_INT 14
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 4
6387: PUSH
6388: LD_INT 5
6390: PUSH
6391: LD_INT 21
6393: PUSH
6394: LD_INT 22
6396: PUSH
6397: LD_INT 23
6399: PUSH
6400: LD_INT 24
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: ST_TO_ADDR
6415: GO 6418
6417: POP
// result := ( chassis in result ) ;
6418: LD_ADDR_VAR 0 3
6422: PUSH
6423: LD_VAR 0 1
6427: PUSH
6428: LD_VAR 0 3
6432: IN
6433: ST_TO_ADDR
// end ;
6434: LD_VAR 0 3
6438: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6439: LD_INT 0
6441: PPUSH
// if not chassis or not weapon then
6442: LD_VAR 0 1
6446: NOT
6447: IFTRUE 6456
6449: PUSH
6450: LD_VAR 0 2
6454: NOT
6455: OR
6456: IFFALSE 6460
// exit ;
6458: GO 7554
// case weapon of us_machine_gun :
6460: LD_VAR 0 2
6464: PUSH
6465: LD_INT 2
6467: DOUBLE
6468: EQUAL
6469: IFTRUE 6473
6471: GO 6503
6473: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6474: LD_ADDR_VAR 0 3
6478: PUSH
6479: LD_INT 1
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: LD_INT 3
6487: PUSH
6488: LD_INT 4
6490: PUSH
6491: LD_INT 5
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: ST_TO_ADDR
6501: GO 7538
6503: LD_INT 3
6505: DOUBLE
6506: EQUAL
6507: IFTRUE 6511
6509: GO 6541
6511: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6512: LD_ADDR_VAR 0 3
6516: PUSH
6517: LD_INT 1
6519: PUSH
6520: LD_INT 2
6522: PUSH
6523: LD_INT 3
6525: PUSH
6526: LD_INT 4
6528: PUSH
6529: LD_INT 5
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: ST_TO_ADDR
6539: GO 7538
6541: LD_INT 11
6543: DOUBLE
6544: EQUAL
6545: IFTRUE 6549
6547: GO 6579
6549: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_INT 1
6557: PUSH
6558: LD_INT 2
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 4
6566: PUSH
6567: LD_INT 5
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: ST_TO_ADDR
6577: GO 7538
6579: LD_INT 4
6581: DOUBLE
6582: EQUAL
6583: IFTRUE 6587
6585: GO 6613
6587: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6588: LD_ADDR_VAR 0 3
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: LD_INT 3
6598: PUSH
6599: LD_INT 4
6601: PUSH
6602: LD_INT 5
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: ST_TO_ADDR
6611: GO 7538
6613: LD_INT 5
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6647
6621: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6622: LD_ADDR_VAR 0 3
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 3
6632: PUSH
6633: LD_INT 4
6635: PUSH
6636: LD_INT 5
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: ST_TO_ADDR
6645: GO 7538
6647: LD_INT 9
6649: DOUBLE
6650: EQUAL
6651: IFTRUE 6655
6653: GO 6681
6655: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6656: LD_ADDR_VAR 0 3
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 3
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: LD_INT 5
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: ST_TO_ADDR
6679: GO 7538
6681: LD_INT 7
6683: DOUBLE
6684: EQUAL
6685: IFTRUE 6689
6687: GO 6715
6689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 2
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: ST_TO_ADDR
6713: GO 7538
6715: LD_INT 12
6717: DOUBLE
6718: EQUAL
6719: IFTRUE 6723
6721: GO 6749
6723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6724: LD_ADDR_VAR 0 3
6728: PUSH
6729: LD_INT 2
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 7538
6749: LD_INT 13
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6783
6757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6758: LD_ADDR_VAR 0 3
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: LD_INT 3
6768: PUSH
6769: LD_INT 4
6771: PUSH
6772: LD_INT 5
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: ST_TO_ADDR
6781: GO 7538
6783: LD_INT 14
6785: DOUBLE
6786: EQUAL
6787: IFTRUE 6791
6789: GO 6809
6791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6792: LD_ADDR_VAR 0 3
6796: PUSH
6797: LD_INT 4
6799: PUSH
6800: LD_INT 5
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: ST_TO_ADDR
6807: GO 7538
6809: LD_INT 6
6811: DOUBLE
6812: EQUAL
6813: IFTRUE 6817
6815: GO 6835
6817: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6818: LD_ADDR_VAR 0 3
6822: PUSH
6823: LD_INT 4
6825: PUSH
6826: LD_INT 5
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: ST_TO_ADDR
6833: GO 7538
6835: LD_INT 10
6837: DOUBLE
6838: EQUAL
6839: IFTRUE 6843
6841: GO 6861
6843: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6844: LD_ADDR_VAR 0 3
6848: PUSH
6849: LD_INT 4
6851: PUSH
6852: LD_INT 5
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: ST_TO_ADDR
6859: GO 7538
6861: LD_INT 22
6863: DOUBLE
6864: EQUAL
6865: IFTRUE 6869
6867: GO 6895
6869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6870: LD_ADDR_VAR 0 3
6874: PUSH
6875: LD_INT 11
6877: PUSH
6878: LD_INT 12
6880: PUSH
6881: LD_INT 13
6883: PUSH
6884: LD_INT 14
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: ST_TO_ADDR
6893: GO 7538
6895: LD_INT 23
6897: DOUBLE
6898: EQUAL
6899: IFTRUE 6903
6901: GO 6929
6903: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6904: LD_ADDR_VAR 0 3
6908: PUSH
6909: LD_INT 11
6911: PUSH
6912: LD_INT 12
6914: PUSH
6915: LD_INT 13
6917: PUSH
6918: LD_INT 14
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: ST_TO_ADDR
6927: GO 7538
6929: LD_INT 24
6931: DOUBLE
6932: EQUAL
6933: IFTRUE 6937
6935: GO 6963
6937: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_INT 11
6945: PUSH
6946: LD_INT 12
6948: PUSH
6949: LD_INT 13
6951: PUSH
6952: LD_INT 14
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: ST_TO_ADDR
6961: GO 7538
6963: LD_INT 30
6965: DOUBLE
6966: EQUAL
6967: IFTRUE 6971
6969: GO 6997
6971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6972: LD_ADDR_VAR 0 3
6976: PUSH
6977: LD_INT 11
6979: PUSH
6980: LD_INT 12
6982: PUSH
6983: LD_INT 13
6985: PUSH
6986: LD_INT 14
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: ST_TO_ADDR
6995: GO 7538
6997: LD_INT 25
6999: DOUBLE
7000: EQUAL
7001: IFTRUE 7005
7003: GO 7023
7005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
7006: LD_ADDR_VAR 0 3
7010: PUSH
7011: LD_INT 13
7013: PUSH
7014: LD_INT 14
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: ST_TO_ADDR
7021: GO 7538
7023: LD_INT 27
7025: DOUBLE
7026: EQUAL
7027: IFTRUE 7031
7029: GO 7049
7031: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
7032: LD_ADDR_VAR 0 3
7036: PUSH
7037: LD_INT 13
7039: PUSH
7040: LD_INT 14
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
7047: GO 7538
7049: LD_INT 92
7051: DOUBLE
7052: EQUAL
7053: IFTRUE 7057
7055: GO 7083
7057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_INT 11
7065: PUSH
7066: LD_INT 12
7068: PUSH
7069: LD_INT 13
7071: PUSH
7072: LD_INT 14
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: ST_TO_ADDR
7081: GO 7538
7083: LD_INT 28
7085: DOUBLE
7086: EQUAL
7087: IFTRUE 7091
7089: GO 7109
7091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
7092: LD_ADDR_VAR 0 3
7096: PUSH
7097: LD_INT 13
7099: PUSH
7100: LD_INT 14
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: ST_TO_ADDR
7107: GO 7538
7109: LD_INT 29
7111: DOUBLE
7112: EQUAL
7113: IFTRUE 7117
7115: GO 7135
7117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7118: LD_ADDR_VAR 0 3
7122: PUSH
7123: LD_INT 13
7125: PUSH
7126: LD_INT 14
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: ST_TO_ADDR
7133: GO 7538
7135: LD_INT 31
7137: DOUBLE
7138: EQUAL
7139: IFTRUE 7143
7141: GO 7161
7143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7144: LD_ADDR_VAR 0 3
7148: PUSH
7149: LD_INT 13
7151: PUSH
7152: LD_INT 14
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: ST_TO_ADDR
7159: GO 7538
7161: LD_INT 26
7163: DOUBLE
7164: EQUAL
7165: IFTRUE 7169
7167: GO 7187
7169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7170: LD_ADDR_VAR 0 3
7174: PUSH
7175: LD_INT 13
7177: PUSH
7178: LD_INT 14
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: ST_TO_ADDR
7185: GO 7538
7187: LD_INT 42
7189: DOUBLE
7190: EQUAL
7191: IFTRUE 7195
7193: GO 7221
7195: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7196: LD_ADDR_VAR 0 3
7200: PUSH
7201: LD_INT 21
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 23
7209: PUSH
7210: LD_INT 24
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: ST_TO_ADDR
7219: GO 7538
7221: LD_INT 43
7223: DOUBLE
7224: EQUAL
7225: IFTRUE 7229
7227: GO 7255
7229: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7230: LD_ADDR_VAR 0 3
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 22
7240: PUSH
7241: LD_INT 23
7243: PUSH
7244: LD_INT 24
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: ST_TO_ADDR
7253: GO 7538
7255: LD_INT 44
7257: DOUBLE
7258: EQUAL
7259: IFTRUE 7263
7261: GO 7289
7263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 21
7271: PUSH
7272: LD_INT 22
7274: PUSH
7275: LD_INT 23
7277: PUSH
7278: LD_INT 24
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: ST_TO_ADDR
7287: GO 7538
7289: LD_INT 45
7291: DOUBLE
7292: EQUAL
7293: IFTRUE 7297
7295: GO 7323
7297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7298: LD_ADDR_VAR 0 3
7302: PUSH
7303: LD_INT 21
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_INT 23
7311: PUSH
7312: LD_INT 24
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: ST_TO_ADDR
7321: GO 7538
7323: LD_INT 49
7325: DOUBLE
7326: EQUAL
7327: IFTRUE 7331
7329: GO 7357
7331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7332: LD_ADDR_VAR 0 3
7336: PUSH
7337: LD_INT 21
7339: PUSH
7340: LD_INT 22
7342: PUSH
7343: LD_INT 23
7345: PUSH
7346: LD_INT 24
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: ST_TO_ADDR
7355: GO 7538
7357: LD_INT 51
7359: DOUBLE
7360: EQUAL
7361: IFTRUE 7365
7363: GO 7391
7365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7366: LD_ADDR_VAR 0 3
7370: PUSH
7371: LD_INT 21
7373: PUSH
7374: LD_INT 22
7376: PUSH
7377: LD_INT 23
7379: PUSH
7380: LD_INT 24
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: ST_TO_ADDR
7389: GO 7538
7391: LD_INT 52
7393: DOUBLE
7394: EQUAL
7395: IFTRUE 7399
7397: GO 7425
7399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7400: LD_ADDR_VAR 0 3
7404: PUSH
7405: LD_INT 21
7407: PUSH
7408: LD_INT 22
7410: PUSH
7411: LD_INT 23
7413: PUSH
7414: LD_INT 24
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: ST_TO_ADDR
7423: GO 7538
7425: LD_INT 53
7427: DOUBLE
7428: EQUAL
7429: IFTRUE 7433
7431: GO 7451
7433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7434: LD_ADDR_VAR 0 3
7438: PUSH
7439: LD_INT 23
7441: PUSH
7442: LD_INT 24
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: ST_TO_ADDR
7449: GO 7538
7451: LD_INT 46
7453: DOUBLE
7454: EQUAL
7455: IFTRUE 7459
7457: GO 7477
7459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7460: LD_ADDR_VAR 0 3
7464: PUSH
7465: LD_INT 23
7467: PUSH
7468: LD_INT 24
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: ST_TO_ADDR
7475: GO 7538
7477: LD_INT 47
7479: DOUBLE
7480: EQUAL
7481: IFTRUE 7485
7483: GO 7503
7485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
7486: LD_ADDR_VAR 0 3
7490: PUSH
7491: LD_INT 23
7493: PUSH
7494: LD_INT 24
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: ST_TO_ADDR
7501: GO 7538
7503: LD_INT 98
7505: DOUBLE
7506: EQUAL
7507: IFTRUE 7511
7509: GO 7537
7511: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7512: LD_ADDR_VAR 0 3
7516: PUSH
7517: LD_INT 21
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 23
7525: PUSH
7526: LD_INT 24
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: ST_TO_ADDR
7535: GO 7538
7537: POP
// result := ( chassis in result ) ;
7538: LD_ADDR_VAR 0 3
7542: PUSH
7543: LD_VAR 0 1
7547: PUSH
7548: LD_VAR 0 3
7552: IN
7553: ST_TO_ADDR
// end ;
7554: LD_VAR 0 3
7558: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7559: LD_INT 0
7561: PPUSH
7562: PPUSH
7563: PPUSH
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
// result := array ;
7568: LD_ADDR_VAR 0 5
7572: PUSH
7573: LD_VAR 0 1
7577: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7578: LD_VAR 0 1
7582: NOT
7583: IFTRUE 7592
7585: PUSH
7586: LD_VAR 0 2
7590: NOT
7591: OR
7592: IFTRUE 7601
7594: PUSH
7595: LD_VAR 0 3
7599: NOT
7600: OR
7601: IFTRUE 7615
7603: PUSH
7604: LD_VAR 0 2
7608: PUSH
7609: LD_VAR 0 1
7613: GREATER
7614: OR
7615: IFTRUE 7629
7617: PUSH
7618: LD_VAR 0 3
7622: PUSH
7623: LD_VAR 0 1
7627: GREATER
7628: OR
7629: IFFALSE 7633
// exit ;
7631: GO 7929
// if direction then
7633: LD_VAR 0 4
7637: IFFALSE 7701
// begin d := 1 ;
7639: LD_ADDR_VAR 0 9
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if i_from > i_to then
7647: LD_VAR 0 2
7651: PUSH
7652: LD_VAR 0 3
7656: GREATER
7657: IFFALSE 7683
// length := ( array - i_from ) + i_to else
7659: LD_ADDR_VAR 0 11
7663: PUSH
7664: LD_VAR 0 1
7668: PUSH
7669: LD_VAR 0 2
7673: MINUS
7674: PUSH
7675: LD_VAR 0 3
7679: PLUS
7680: ST_TO_ADDR
7681: GO 7699
// length := i_to - i_from ;
7683: LD_ADDR_VAR 0 11
7687: PUSH
7688: LD_VAR 0 3
7692: PUSH
7693: LD_VAR 0 2
7697: MINUS
7698: ST_TO_ADDR
// end else
7699: GO 7762
// begin d := - 1 ;
7701: LD_ADDR_VAR 0 9
7705: PUSH
7706: LD_INT 1
7708: NEG
7709: ST_TO_ADDR
// if i_from > i_to then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_VAR 0 3
7719: GREATER
7720: IFFALSE 7740
// length := i_from - i_to else
7722: LD_ADDR_VAR 0 11
7726: PUSH
7727: LD_VAR 0 2
7731: PUSH
7732: LD_VAR 0 3
7736: MINUS
7737: ST_TO_ADDR
7738: GO 7762
// length := ( array - i_to ) + i_from ;
7740: LD_ADDR_VAR 0 11
7744: PUSH
7745: LD_VAR 0 1
7749: PUSH
7750: LD_VAR 0 3
7754: MINUS
7755: PUSH
7756: LD_VAR 0 2
7760: PLUS
7761: ST_TO_ADDR
// end ; if not length then
7762: LD_VAR 0 11
7766: NOT
7767: IFFALSE 7771
// exit ;
7769: GO 7929
// tmp := array ;
7771: LD_ADDR_VAR 0 10
7775: PUSH
7776: LD_VAR 0 1
7780: ST_TO_ADDR
// for i = 1 to length do
7781: LD_ADDR_VAR 0 6
7785: PUSH
7786: DOUBLE
7787: LD_INT 1
7789: DEC
7790: ST_TO_ADDR
7791: LD_VAR 0 11
7795: PUSH
7796: FOR_TO
7797: IFFALSE 7917
// begin for j = 1 to array do
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: DOUBLE
7805: LD_INT 1
7807: DEC
7808: ST_TO_ADDR
7809: LD_VAR 0 1
7813: PUSH
7814: FOR_TO
7815: IFFALSE 7903
// begin k := j + d ;
7817: LD_ADDR_VAR 0 8
7821: PUSH
7822: LD_VAR 0 7
7826: PUSH
7827: LD_VAR 0 9
7831: PLUS
7832: ST_TO_ADDR
// if k > array then
7833: LD_VAR 0 8
7837: PUSH
7838: LD_VAR 0 1
7842: GREATER
7843: IFFALSE 7853
// k := 1 ;
7845: LD_ADDR_VAR 0 8
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if not k then
7853: LD_VAR 0 8
7857: NOT
7858: IFFALSE 7870
// k := array ;
7860: LD_ADDR_VAR 0 8
7864: PUSH
7865: LD_VAR 0 1
7869: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7870: LD_ADDR_VAR 0 10
7874: PUSH
7875: LD_VAR 0 10
7879: PPUSH
7880: LD_VAR 0 8
7884: PPUSH
7885: LD_VAR 0 1
7889: PUSH
7890: LD_VAR 0 7
7894: ARRAY
7895: PPUSH
7896: CALL_OW 1
7900: ST_TO_ADDR
// end ;
7901: GO 7814
7903: POP
7904: POP
// array := tmp ;
7905: LD_ADDR_VAR 0 1
7909: PUSH
7910: LD_VAR 0 10
7914: ST_TO_ADDR
// end ;
7915: GO 7796
7917: POP
7918: POP
// result := array ;
7919: LD_ADDR_VAR 0 5
7923: PUSH
7924: LD_VAR 0 1
7928: ST_TO_ADDR
// end ;
7929: LD_VAR 0 5
7933: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
// result := 0 ;
7938: LD_ADDR_VAR 0 3
7942: PUSH
7943: LD_INT 0
7945: ST_TO_ADDR
// if not array or not value in array then
7946: LD_VAR 0 1
7950: NOT
7951: IFTRUE 7966
7953: PUSH
7954: LD_VAR 0 2
7958: PUSH
7959: LD_VAR 0 1
7963: IN
7964: NOT
7965: OR
7966: IFFALSE 7970
// exit ;
7968: GO 8024
// for i = 1 to array do
7970: LD_ADDR_VAR 0 4
7974: PUSH
7975: DOUBLE
7976: LD_INT 1
7978: DEC
7979: ST_TO_ADDR
7980: LD_VAR 0 1
7984: PUSH
7985: FOR_TO
7986: IFFALSE 8022
// if value = array [ i ] then
7988: LD_VAR 0 2
7992: PUSH
7993: LD_VAR 0 1
7997: PUSH
7998: LD_VAR 0 4
8002: ARRAY
8003: EQUAL
8004: IFFALSE 8020
// begin result := i ;
8006: LD_ADDR_VAR 0 3
8010: PUSH
8011: LD_VAR 0 4
8015: ST_TO_ADDR
// exit ;
8016: POP
8017: POP
8018: GO 8024
// end ;
8020: GO 7985
8022: POP
8023: POP
// end ;
8024: LD_VAR 0 3
8028: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
8029: LD_INT 0
8031: PPUSH
// vc_chassis := chassis ;
8032: LD_ADDR_OWVAR 37
8036: PUSH
8037: LD_VAR 0 1
8041: ST_TO_ADDR
// vc_engine := engine ;
8042: LD_ADDR_OWVAR 39
8046: PUSH
8047: LD_VAR 0 2
8051: ST_TO_ADDR
// vc_control := control ;
8052: LD_ADDR_OWVAR 38
8056: PUSH
8057: LD_VAR 0 3
8061: ST_TO_ADDR
// vc_weapon := weapon ;
8062: LD_ADDR_OWVAR 40
8066: PUSH
8067: LD_VAR 0 4
8071: ST_TO_ADDR
// vc_fuel_battery := fuel ;
8072: LD_ADDR_OWVAR 41
8076: PUSH
8077: LD_VAR 0 5
8081: ST_TO_ADDR
// end ;
8082: LD_VAR 0 6
8086: RET
// export function WantPlant ( unit ) ; var task ; begin
8087: LD_INT 0
8089: PPUSH
8090: PPUSH
// result := false ;
8091: LD_ADDR_VAR 0 2
8095: PUSH
8096: LD_INT 0
8098: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
8099: LD_ADDR_VAR 0 3
8103: PUSH
8104: LD_VAR 0 1
8108: PPUSH
8109: CALL_OW 437
8113: ST_TO_ADDR
// if task then
8114: LD_VAR 0 3
8118: IFFALSE 8146
// if task [ 1 ] [ 1 ] = p then
8120: LD_VAR 0 3
8124: PUSH
8125: LD_INT 1
8127: ARRAY
8128: PUSH
8129: LD_INT 1
8131: ARRAY
8132: PUSH
8133: LD_STRING p
8135: EQUAL
8136: IFFALSE 8146
// result := true ;
8138: LD_ADDR_VAR 0 2
8142: PUSH
8143: LD_INT 1
8145: ST_TO_ADDR
// end ;
8146: LD_VAR 0 2
8150: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8151: LD_INT 0
8153: PPUSH
8154: PPUSH
8155: PPUSH
8156: PPUSH
// if pos < 1 then
8157: LD_VAR 0 2
8161: PUSH
8162: LD_INT 1
8164: LESS
8165: IFFALSE 8169
// exit ;
8167: GO 8472
// if pos = 1 then
8169: LD_VAR 0 2
8173: PUSH
8174: LD_INT 1
8176: EQUAL
8177: IFFALSE 8210
// result := Replace ( arr , pos [ 1 ] , value ) else
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_VAR 0 1
8188: PPUSH
8189: LD_VAR 0 2
8193: PUSH
8194: LD_INT 1
8196: ARRAY
8197: PPUSH
8198: LD_VAR 0 3
8202: PPUSH
8203: CALL_OW 1
8207: ST_TO_ADDR
8208: GO 8472
// begin tmp := arr ;
8210: LD_ADDR_VAR 0 6
8214: PUSH
8215: LD_VAR 0 1
8219: ST_TO_ADDR
// s_arr := [ tmp ] ;
8220: LD_ADDR_VAR 0 7
8224: PUSH
8225: LD_VAR 0 6
8229: PUSH
8230: EMPTY
8231: LIST
8232: ST_TO_ADDR
// for i = 1 to pos - 1 do
8233: LD_ADDR_VAR 0 5
8237: PUSH
8238: DOUBLE
8239: LD_INT 1
8241: DEC
8242: ST_TO_ADDR
8243: LD_VAR 0 2
8247: PUSH
8248: LD_INT 1
8250: MINUS
8251: PUSH
8252: FOR_TO
8253: IFFALSE 8298
// begin tmp := tmp [ pos [ i ] ] ;
8255: LD_ADDR_VAR 0 6
8259: PUSH
8260: LD_VAR 0 6
8264: PUSH
8265: LD_VAR 0 2
8269: PUSH
8270: LD_VAR 0 5
8274: ARRAY
8275: ARRAY
8276: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8277: LD_ADDR_VAR 0 7
8281: PUSH
8282: LD_VAR 0 7
8286: PUSH
8287: LD_VAR 0 6
8291: PUSH
8292: EMPTY
8293: LIST
8294: ADD
8295: ST_TO_ADDR
// end ;
8296: GO 8252
8298: POP
8299: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8300: LD_ADDR_VAR 0 6
8304: PUSH
8305: LD_VAR 0 6
8309: PPUSH
8310: LD_VAR 0 2
8314: PUSH
8315: LD_VAR 0 2
8319: ARRAY
8320: PPUSH
8321: LD_VAR 0 3
8325: PPUSH
8326: CALL_OW 1
8330: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8331: LD_ADDR_VAR 0 7
8335: PUSH
8336: LD_VAR 0 7
8340: PPUSH
8341: LD_VAR 0 7
8345: PPUSH
8346: LD_VAR 0 6
8350: PPUSH
8351: CALL_OW 1
8355: ST_TO_ADDR
// for i = s_arr downto 2 do
8356: LD_ADDR_VAR 0 5
8360: PUSH
8361: DOUBLE
8362: LD_VAR 0 7
8366: INC
8367: ST_TO_ADDR
8368: LD_INT 2
8370: PUSH
8371: FOR_DOWNTO
8372: IFFALSE 8456
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8374: LD_ADDR_VAR 0 6
8378: PUSH
8379: LD_VAR 0 7
8383: PUSH
8384: LD_VAR 0 5
8388: PUSH
8389: LD_INT 1
8391: MINUS
8392: ARRAY
8393: PPUSH
8394: LD_VAR 0 2
8398: PUSH
8399: LD_VAR 0 5
8403: PUSH
8404: LD_INT 1
8406: MINUS
8407: ARRAY
8408: PPUSH
8409: LD_VAR 0 7
8413: PUSH
8414: LD_VAR 0 5
8418: ARRAY
8419: PPUSH
8420: CALL_OW 1
8424: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8425: LD_ADDR_VAR 0 7
8429: PUSH
8430: LD_VAR 0 7
8434: PPUSH
8435: LD_VAR 0 5
8439: PUSH
8440: LD_INT 1
8442: MINUS
8443: PPUSH
8444: LD_VAR 0 6
8448: PPUSH
8449: CALL_OW 1
8453: ST_TO_ADDR
// end ;
8454: GO 8371
8456: POP
8457: POP
// result := s_arr [ 1 ] ;
8458: LD_ADDR_VAR 0 4
8462: PUSH
8463: LD_VAR 0 7
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: ST_TO_ADDR
// end ; end ;
8472: LD_VAR 0 4
8476: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8477: LD_INT 0
8479: PPUSH
8480: PPUSH
// if not list then
8481: LD_VAR 0 1
8485: NOT
8486: IFFALSE 8490
// exit ;
8488: GO 8581
// i := list [ pos1 ] ;
8490: LD_ADDR_VAR 0 5
8494: PUSH
8495: LD_VAR 0 1
8499: PUSH
8500: LD_VAR 0 2
8504: ARRAY
8505: ST_TO_ADDR
// if not i then
8506: LD_VAR 0 5
8510: NOT
8511: IFFALSE 8515
// exit ;
8513: GO 8581
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_VAR 0 1
8524: PPUSH
8525: LD_VAR 0 2
8529: PPUSH
8530: LD_VAR 0 1
8534: PUSH
8535: LD_VAR 0 3
8539: ARRAY
8540: PPUSH
8541: CALL_OW 1
8545: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8546: LD_ADDR_VAR 0 1
8550: PUSH
8551: LD_VAR 0 1
8555: PPUSH
8556: LD_VAR 0 3
8560: PPUSH
8561: LD_VAR 0 5
8565: PPUSH
8566: CALL_OW 1
8570: ST_TO_ADDR
// result := list ;
8571: LD_ADDR_VAR 0 4
8575: PUSH
8576: LD_VAR 0 1
8580: ST_TO_ADDR
// end ;
8581: LD_VAR 0 4
8585: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8586: LD_INT 0
8588: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8589: LD_ADDR_VAR 0 5
8593: PUSH
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 250
8603: PPUSH
8604: LD_VAR 0 1
8608: PPUSH
8609: CALL_OW 251
8613: PPUSH
8614: LD_VAR 0 2
8618: PPUSH
8619: LD_VAR 0 3
8623: PPUSH
8624: LD_VAR 0 4
8628: PPUSH
8629: CALL 9011 0 5
8633: ST_TO_ADDR
// end ;
8634: LD_VAR 0 5
8638: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8639: LD_INT 0
8641: PPUSH
8642: PPUSH
8643: PPUSH
8644: PPUSH
// if not list or not unit then
8645: LD_VAR 0 2
8649: NOT
8650: IFTRUE 8659
8652: PUSH
8653: LD_VAR 0 1
8657: NOT
8658: OR
8659: IFFALSE 8663
// exit ;
8661: GO 9006
// result := [ ] ;
8663: LD_ADDR_VAR 0 5
8667: PUSH
8668: EMPTY
8669: ST_TO_ADDR
// for i in list do
8670: LD_ADDR_VAR 0 6
8674: PUSH
8675: LD_VAR 0 2
8679: PUSH
8680: FOR_IN
8681: IFFALSE 8899
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8683: LD_ADDR_VAR 0 8
8687: PUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: LD_VAR 0 6
8697: PUSH
8698: LD_INT 1
8700: ARRAY
8701: PPUSH
8702: LD_VAR 0 6
8706: PUSH
8707: LD_INT 2
8709: ARRAY
8710: PPUSH
8711: CALL_OW 297
8715: ST_TO_ADDR
// if not Count ( result ) then
8716: LD_VAR 0 5
8720: PPUSH
8721: CALL 5233 0 1
8725: NOT
8726: IFFALSE 8759
// begin result := Join ( result , [ i , tmp ] ) ;
8728: LD_ADDR_VAR 0 5
8732: PUSH
8733: LD_VAR 0 5
8737: PPUSH
8738: LD_VAR 0 6
8742: PUSH
8743: LD_VAR 0 8
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL 41209 0 2
8756: ST_TO_ADDR
// continue ;
8757: GO 8680
// end ; if result [ result ] [ 2 ] <= tmp then
8759: LD_VAR 0 5
8763: PUSH
8764: LD_VAR 0 5
8768: ARRAY
8769: PUSH
8770: LD_INT 2
8772: ARRAY
8773: PUSH
8774: LD_VAR 0 8
8778: LESSEQUAL
8779: IFFALSE 8812
// result := Join ( result , [ i , tmp ] ) else
8781: LD_ADDR_VAR 0 5
8785: PUSH
8786: LD_VAR 0 5
8790: PPUSH
8791: LD_VAR 0 6
8795: PUSH
8796: LD_VAR 0 8
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL 41209 0 2
8809: ST_TO_ADDR
8810: GO 8897
// begin for j := 1 to Count ( result ) do
8812: LD_ADDR_VAR 0 7
8816: PUSH
8817: DOUBLE
8818: LD_INT 1
8820: DEC
8821: ST_TO_ADDR
8822: LD_VAR 0 5
8826: PPUSH
8827: CALL 5233 0 1
8831: PUSH
8832: FOR_TO
8833: IFFALSE 8895
// begin if tmp < result [ j ] [ 2 ] then
8835: LD_VAR 0 8
8839: PUSH
8840: LD_VAR 0 5
8844: PUSH
8845: LD_VAR 0 7
8849: ARRAY
8850: PUSH
8851: LD_INT 2
8853: ARRAY
8854: LESS
8855: IFFALSE 8893
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8857: LD_ADDR_VAR 0 5
8861: PUSH
8862: LD_VAR 0 5
8866: PPUSH
8867: LD_VAR 0 7
8871: PPUSH
8872: LD_VAR 0 6
8876: PUSH
8877: LD_VAR 0 8
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PPUSH
8886: CALL_OW 2
8890: ST_TO_ADDR
// break ;
8891: GO 8895
// end ; end ;
8893: GO 8832
8895: POP
8896: POP
// end ; end ;
8897: GO 8680
8899: POP
8900: POP
// if result and not asc then
8901: LD_VAR 0 5
8905: IFFALSE 8914
8907: PUSH
8908: LD_VAR 0 3
8912: NOT
8913: AND
8914: IFFALSE 8931
// result := ReverseArray ( result ) ;
8916: LD_ADDR_VAR 0 5
8920: PUSH
8921: LD_VAR 0 5
8925: PPUSH
8926: CALL 36289 0 1
8930: ST_TO_ADDR
// tmp := [ ] ;
8931: LD_ADDR_VAR 0 8
8935: PUSH
8936: EMPTY
8937: ST_TO_ADDR
// if mode then
8938: LD_VAR 0 4
8942: IFFALSE 9006
// begin for i := 1 to result do
8944: LD_ADDR_VAR 0 6
8948: PUSH
8949: DOUBLE
8950: LD_INT 1
8952: DEC
8953: ST_TO_ADDR
8954: LD_VAR 0 5
8958: PUSH
8959: FOR_TO
8960: IFFALSE 8994
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8962: LD_ADDR_VAR 0 8
8966: PUSH
8967: LD_VAR 0 8
8971: PPUSH
8972: LD_VAR 0 5
8976: PUSH
8977: LD_VAR 0 6
8981: ARRAY
8982: PUSH
8983: LD_INT 1
8985: ARRAY
8986: PPUSH
8987: CALL 41209 0 2
8991: ST_TO_ADDR
8992: GO 8959
8994: POP
8995: POP
// result := tmp ;
8996: LD_ADDR_VAR 0 5
9000: PUSH
9001: LD_VAR 0 8
9005: ST_TO_ADDR
// end ; end ;
9006: LD_VAR 0 5
9010: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
9011: LD_INT 0
9013: PPUSH
9014: PPUSH
9015: PPUSH
9016: PPUSH
// if not list then
9017: LD_VAR 0 3
9021: NOT
9022: IFFALSE 9026
// exit ;
9024: GO 9416
// result := [ ] ;
9026: LD_ADDR_VAR 0 6
9030: PUSH
9031: EMPTY
9032: ST_TO_ADDR
// for i in list do
9033: LD_ADDR_VAR 0 7
9037: PUSH
9038: LD_VAR 0 3
9042: PUSH
9043: FOR_IN
9044: IFFALSE 9246
// begin tmp := GetDistUnitXY ( i , x , y ) ;
9046: LD_ADDR_VAR 0 9
9050: PUSH
9051: LD_VAR 0 7
9055: PPUSH
9056: LD_VAR 0 1
9060: PPUSH
9061: LD_VAR 0 2
9065: PPUSH
9066: CALL_OW 297
9070: ST_TO_ADDR
// if not result then
9071: LD_VAR 0 6
9075: NOT
9076: IFFALSE 9102
// result := [ [ i , tmp ] ] else
9078: LD_ADDR_VAR 0 6
9082: PUSH
9083: LD_VAR 0 7
9087: PUSH
9088: LD_VAR 0 9
9092: PUSH
9093: EMPTY
9094: LIST
9095: LIST
9096: PUSH
9097: EMPTY
9098: LIST
9099: ST_TO_ADDR
9100: GO 9244
// begin if result [ result ] [ 2 ] <= tmp then
9102: LD_VAR 0 6
9106: PUSH
9107: LD_VAR 0 6
9111: ARRAY
9112: PUSH
9113: LD_INT 2
9115: ARRAY
9116: PUSH
9117: LD_VAR 0 9
9121: LESSEQUAL
9122: IFFALSE 9164
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_VAR 0 6
9133: PPUSH
9134: LD_VAR 0 6
9138: PUSH
9139: LD_INT 1
9141: PLUS
9142: PPUSH
9143: LD_VAR 0 7
9147: PUSH
9148: LD_VAR 0 9
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: PPUSH
9157: CALL_OW 2
9161: ST_TO_ADDR
9162: GO 9244
// for j := 1 to result do
9164: LD_ADDR_VAR 0 8
9168: PUSH
9169: DOUBLE
9170: LD_INT 1
9172: DEC
9173: ST_TO_ADDR
9174: LD_VAR 0 6
9178: PUSH
9179: FOR_TO
9180: IFFALSE 9242
// begin if tmp < result [ j ] [ 2 ] then
9182: LD_VAR 0 9
9186: PUSH
9187: LD_VAR 0 6
9191: PUSH
9192: LD_VAR 0 8
9196: ARRAY
9197: PUSH
9198: LD_INT 2
9200: ARRAY
9201: LESS
9202: IFFALSE 9240
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9204: LD_ADDR_VAR 0 6
9208: PUSH
9209: LD_VAR 0 6
9213: PPUSH
9214: LD_VAR 0 8
9218: PPUSH
9219: LD_VAR 0 7
9223: PUSH
9224: LD_VAR 0 9
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PPUSH
9233: CALL_OW 2
9237: ST_TO_ADDR
// break ;
9238: GO 9242
// end ; end ;
9240: GO 9179
9242: POP
9243: POP
// end ; end ;
9244: GO 9043
9246: POP
9247: POP
// if result and not asc then
9248: LD_VAR 0 6
9252: IFFALSE 9261
9254: PUSH
9255: LD_VAR 0 4
9259: NOT
9260: AND
9261: IFFALSE 9336
// begin tmp := result ;
9263: LD_ADDR_VAR 0 9
9267: PUSH
9268: LD_VAR 0 6
9272: ST_TO_ADDR
// for i = tmp downto 1 do
9273: LD_ADDR_VAR 0 7
9277: PUSH
9278: DOUBLE
9279: LD_VAR 0 9
9283: INC
9284: ST_TO_ADDR
9285: LD_INT 1
9287: PUSH
9288: FOR_DOWNTO
9289: IFFALSE 9334
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9291: LD_ADDR_VAR 0 6
9295: PUSH
9296: LD_VAR 0 6
9300: PPUSH
9301: LD_VAR 0 9
9305: PUSH
9306: LD_VAR 0 7
9310: MINUS
9311: PUSH
9312: LD_INT 1
9314: PLUS
9315: PPUSH
9316: LD_VAR 0 9
9320: PUSH
9321: LD_VAR 0 7
9325: ARRAY
9326: PPUSH
9327: CALL_OW 1
9331: ST_TO_ADDR
9332: GO 9288
9334: POP
9335: POP
// end ; tmp := [ ] ;
9336: LD_ADDR_VAR 0 9
9340: PUSH
9341: EMPTY
9342: ST_TO_ADDR
// if mode then
9343: LD_VAR 0 5
9347: IFFALSE 9416
// begin for i = 1 to result do
9349: LD_ADDR_VAR 0 7
9353: PUSH
9354: DOUBLE
9355: LD_INT 1
9357: DEC
9358: ST_TO_ADDR
9359: LD_VAR 0 6
9363: PUSH
9364: FOR_TO
9365: IFFALSE 9404
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9367: LD_ADDR_VAR 0 9
9371: PUSH
9372: LD_VAR 0 9
9376: PPUSH
9377: LD_VAR 0 7
9381: PPUSH
9382: LD_VAR 0 6
9386: PUSH
9387: LD_VAR 0 7
9391: ARRAY
9392: PUSH
9393: LD_INT 1
9395: ARRAY
9396: PPUSH
9397: CALL_OW 1
9401: ST_TO_ADDR
9402: GO 9364
9404: POP
9405: POP
// result := tmp ;
9406: LD_ADDR_VAR 0 6
9410: PUSH
9411: LD_VAR 0 9
9415: ST_TO_ADDR
// end ; end ;
9416: LD_VAR 0 6
9420: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9421: LD_INT 0
9423: PPUSH
9424: PPUSH
9425: PPUSH
9426: PPUSH
9427: PPUSH
9428: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9429: LD_ADDR_VAR 0 5
9433: PUSH
9434: LD_INT 0
9436: PUSH
9437: LD_INT 0
9439: PUSH
9440: LD_INT 0
9442: PUSH
9443: EMPTY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: ST_TO_ADDR
// if not x or not y then
9451: LD_VAR 0 2
9455: NOT
9456: IFTRUE 9465
9458: PUSH
9459: LD_VAR 0 3
9463: NOT
9464: OR
9465: IFFALSE 9469
// exit ;
9467: GO 11125
// if not range then
9469: LD_VAR 0 4
9473: NOT
9474: IFFALSE 9484
// range := 10 ;
9476: LD_ADDR_VAR 0 4
9480: PUSH
9481: LD_INT 10
9483: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9484: LD_ADDR_VAR 0 8
9488: PUSH
9489: LD_INT 81
9491: PUSH
9492: LD_VAR 0 1
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 92
9503: PUSH
9504: LD_VAR 0 2
9508: PUSH
9509: LD_VAR 0 3
9513: PUSH
9514: LD_VAR 0 4
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: PUSH
9525: LD_INT 3
9527: PUSH
9528: LD_INT 21
9530: PUSH
9531: LD_INT 3
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: PPUSH
9547: CALL_OW 69
9551: ST_TO_ADDR
// if not tmp then
9552: LD_VAR 0 8
9556: NOT
9557: IFFALSE 9561
// exit ;
9559: GO 11125
// for i in tmp do
9561: LD_ADDR_VAR 0 6
9565: PUSH
9566: LD_VAR 0 8
9570: PUSH
9571: FOR_IN
9572: IFFALSE 11100
// begin points := [ 0 , 0 , 0 ] ;
9574: LD_ADDR_VAR 0 9
9578: PUSH
9579: LD_INT 0
9581: PUSH
9582: LD_INT 0
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: ST_TO_ADDR
// bpoints := 1 ;
9593: LD_ADDR_VAR 0 10
9597: PUSH
9598: LD_INT 1
9600: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9601: LD_VAR 0 6
9605: PPUSH
9606: CALL_OW 247
9610: PUSH
9611: LD_INT 1
9613: DOUBLE
9614: EQUAL
9615: IFTRUE 9619
9617: GO 10201
9619: POP
// begin if GetClass ( i ) = 1 then
9620: LD_VAR 0 6
9624: PPUSH
9625: CALL_OW 257
9629: PUSH
9630: LD_INT 1
9632: EQUAL
9633: IFFALSE 9654
// points := [ 10 , 5 , 3 ] ;
9635: LD_ADDR_VAR 0 9
9639: PUSH
9640: LD_INT 10
9642: PUSH
9643: LD_INT 5
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9654: LD_VAR 0 6
9658: PPUSH
9659: CALL_OW 257
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 3
9669: PUSH
9670: LD_INT 4
9672: PUSH
9673: EMPTY
9674: LIST
9675: LIST
9676: LIST
9677: IN
9678: IFFALSE 9699
// points := [ 3 , 2 , 1 ] ;
9680: LD_ADDR_VAR 0 9
9684: PUSH
9685: LD_INT 3
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 1
9693: PUSH
9694: EMPTY
9695: LIST
9696: LIST
9697: LIST
9698: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9699: LD_VAR 0 6
9703: PPUSH
9704: CALL_OW 257
9708: PUSH
9709: LD_INT 5
9711: EQUAL
9712: IFFALSE 9733
// points := [ 130 , 5 , 2 ] ;
9714: LD_ADDR_VAR 0 9
9718: PUSH
9719: LD_INT 130
9721: PUSH
9722: LD_INT 5
9724: PUSH
9725: LD_INT 2
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9733: LD_VAR 0 6
9737: PPUSH
9738: CALL_OW 257
9742: PUSH
9743: LD_INT 8
9745: EQUAL
9746: IFFALSE 9767
// points := [ 35 , 35 , 30 ] ;
9748: LD_ADDR_VAR 0 9
9752: PUSH
9753: LD_INT 35
9755: PUSH
9756: LD_INT 35
9758: PUSH
9759: LD_INT 30
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: LIST
9766: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9767: LD_VAR 0 6
9771: PPUSH
9772: CALL_OW 257
9776: PUSH
9777: LD_INT 9
9779: EQUAL
9780: IFFALSE 9801
// points := [ 20 , 55 , 40 ] ;
9782: LD_ADDR_VAR 0 9
9786: PUSH
9787: LD_INT 20
9789: PUSH
9790: LD_INT 55
9792: PUSH
9793: LD_INT 40
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9801: LD_VAR 0 6
9805: PPUSH
9806: CALL_OW 257
9810: PUSH
9811: LD_INT 12
9813: PUSH
9814: LD_INT 16
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: IN
9821: IFFALSE 9842
// points := [ 5 , 3 , 2 ] ;
9823: LD_ADDR_VAR 0 9
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 3
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9842: LD_VAR 0 6
9846: PPUSH
9847: CALL_OW 257
9851: PUSH
9852: LD_INT 17
9854: EQUAL
9855: IFFALSE 9876
// points := [ 100 , 50 , 75 ] ;
9857: LD_ADDR_VAR 0 9
9861: PUSH
9862: LD_INT 100
9864: PUSH
9865: LD_INT 50
9867: PUSH
9868: LD_INT 75
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9876: LD_VAR 0 6
9880: PPUSH
9881: CALL_OW 257
9885: PUSH
9886: LD_INT 15
9888: EQUAL
9889: IFFALSE 9910
// points := [ 10 , 5 , 3 ] ;
9891: LD_ADDR_VAR 0 9
9895: PUSH
9896: LD_INT 10
9898: PUSH
9899: LD_INT 5
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9910: LD_VAR 0 6
9914: PPUSH
9915: CALL_OW 257
9919: PUSH
9920: LD_INT 14
9922: EQUAL
9923: IFFALSE 9944
// points := [ 10 , 0 , 0 ] ;
9925: LD_ADDR_VAR 0 9
9929: PUSH
9930: LD_INT 10
9932: PUSH
9933: LD_INT 0
9935: PUSH
9936: LD_INT 0
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9944: LD_VAR 0 6
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 11
9956: EQUAL
9957: IFFALSE 9978
// points := [ 30 , 10 , 5 ] ;
9959: LD_ADDR_VAR 0 9
9963: PUSH
9964: LD_INT 30
9966: PUSH
9967: LD_INT 10
9969: PUSH
9970: LD_INT 5
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9978: LD_VAR 0 1
9982: PPUSH
9983: LD_INT 5
9985: PPUSH
9986: CALL_OW 321
9990: PUSH
9991: LD_INT 2
9993: EQUAL
9994: IFFALSE 10011
// bpoints := bpoints * 1.8 ;
9996: LD_ADDR_VAR 0 10
10000: PUSH
10001: LD_VAR 0 10
10005: PUSH
10006: LD_REAL  1.80000000000000E+0000
10009: MUL
10010: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
10011: LD_VAR 0 6
10015: PPUSH
10016: CALL_OW 257
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 4
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: IN
10039: IFFALSE 10059
10041: PUSH
10042: LD_VAR 0 1
10046: PPUSH
10047: LD_INT 51
10049: PPUSH
10050: CALL_OW 321
10054: PUSH
10055: LD_INT 2
10057: EQUAL
10058: AND
10059: IFFALSE 10076
// bpoints := bpoints * 1.2 ;
10061: LD_ADDR_VAR 0 10
10065: PUSH
10066: LD_VAR 0 10
10070: PUSH
10071: LD_REAL  1.20000000000000E+0000
10074: MUL
10075: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
10076: LD_VAR 0 6
10080: PPUSH
10081: CALL_OW 257
10085: PUSH
10086: LD_INT 5
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 9
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: IN
10100: IFFALSE 10120
10102: PUSH
10103: LD_VAR 0 1
10107: PPUSH
10108: LD_INT 52
10110: PPUSH
10111: CALL_OW 321
10115: PUSH
10116: LD_INT 2
10118: EQUAL
10119: AND
10120: IFFALSE 10137
// bpoints := bpoints * 1.5 ;
10122: LD_ADDR_VAR 0 10
10126: PUSH
10127: LD_VAR 0 10
10131: PUSH
10132: LD_REAL  1.50000000000000E+0000
10135: MUL
10136: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10137: LD_VAR 0 1
10141: PPUSH
10142: LD_INT 66
10144: PPUSH
10145: CALL_OW 321
10149: PUSH
10150: LD_INT 2
10152: EQUAL
10153: IFFALSE 10170
// bpoints := bpoints * 1.1 ;
10155: LD_ADDR_VAR 0 10
10159: PUSH
10160: LD_VAR 0 10
10164: PUSH
10165: LD_REAL  1.10000000000000E+0000
10168: MUL
10169: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10170: LD_ADDR_VAR 0 10
10174: PUSH
10175: LD_VAR 0 10
10179: PUSH
10180: LD_VAR 0 6
10184: PPUSH
10185: LD_INT 1
10187: PPUSH
10188: CALL_OW 259
10192: PUSH
10193: LD_REAL  1.15000000000000E+0000
10196: MUL
10197: MUL
10198: ST_TO_ADDR
// end ; unit_vehicle :
10199: GO 11029
10201: LD_INT 2
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 11017
10209: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10210: LD_VAR 0 6
10214: PPUSH
10215: CALL_OW 264
10219: PUSH
10220: LD_INT 2
10222: PUSH
10223: LD_INT 42
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: IN
10234: IFFALSE 10255
// points := [ 25 , 5 , 3 ] ;
10236: LD_ADDR_VAR 0 9
10240: PUSH
10241: LD_INT 25
10243: PUSH
10244: LD_INT 5
10246: PUSH
10247: LD_INT 3
10249: PUSH
10250: EMPTY
10251: LIST
10252: LIST
10253: LIST
10254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10255: LD_VAR 0 6
10259: PPUSH
10260: CALL_OW 264
10264: PUSH
10265: LD_INT 4
10267: PUSH
10268: LD_INT 43
10270: PUSH
10271: LD_INT 25
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: IN
10279: IFFALSE 10300
// points := [ 40 , 15 , 5 ] ;
10281: LD_ADDR_VAR 0 9
10285: PUSH
10286: LD_INT 40
10288: PUSH
10289: LD_INT 15
10291: PUSH
10292: LD_INT 5
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10300: LD_VAR 0 6
10304: PPUSH
10305: CALL_OW 264
10309: PUSH
10310: LD_INT 3
10312: PUSH
10313: LD_INT 23
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: IN
10320: IFFALSE 10341
// points := [ 7 , 25 , 8 ] ;
10322: LD_ADDR_VAR 0 9
10326: PUSH
10327: LD_INT 7
10329: PUSH
10330: LD_INT 25
10332: PUSH
10333: LD_INT 8
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: LIST
10340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10341: LD_VAR 0 6
10345: PPUSH
10346: CALL_OW 264
10350: PUSH
10351: LD_INT 5
10353: PUSH
10354: LD_INT 27
10356: PUSH
10357: LD_INT 44
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: LIST
10364: IN
10365: IFFALSE 10386
// points := [ 14 , 50 , 16 ] ;
10367: LD_ADDR_VAR 0 9
10371: PUSH
10372: LD_INT 14
10374: PUSH
10375: LD_INT 50
10377: PUSH
10378: LD_INT 16
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10386: LD_VAR 0 6
10390: PPUSH
10391: CALL_OW 264
10395: PUSH
10396: LD_INT 6
10398: PUSH
10399: LD_INT 46
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: IN
10406: IFFALSE 10427
// points := [ 32 , 120 , 70 ] ;
10408: LD_ADDR_VAR 0 9
10412: PUSH
10413: LD_INT 32
10415: PUSH
10416: LD_INT 120
10418: PUSH
10419: LD_INT 70
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10427: LD_VAR 0 6
10431: PPUSH
10432: CALL_OW 264
10436: PUSH
10437: LD_INT 7
10439: PUSH
10440: LD_INT 28
10442: PUSH
10443: LD_INT 45
10445: PUSH
10446: LD_INT 92
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: IN
10455: IFFALSE 10476
// points := [ 35 , 20 , 45 ] ;
10457: LD_ADDR_VAR 0 9
10461: PUSH
10462: LD_INT 35
10464: PUSH
10465: LD_INT 20
10467: PUSH
10468: LD_INT 45
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: LIST
10475: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10476: LD_VAR 0 6
10480: PPUSH
10481: CALL_OW 264
10485: PUSH
10486: LD_INT 47
10488: PUSH
10489: EMPTY
10490: LIST
10491: IN
10492: IFFALSE 10513
// points := [ 67 , 45 , 75 ] ;
10494: LD_ADDR_VAR 0 9
10498: PUSH
10499: LD_INT 67
10501: PUSH
10502: LD_INT 45
10504: PUSH
10505: LD_INT 75
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10513: LD_VAR 0 6
10517: PPUSH
10518: CALL_OW 264
10522: PUSH
10523: LD_INT 26
10525: PUSH
10526: EMPTY
10527: LIST
10528: IN
10529: IFFALSE 10550
// points := [ 120 , 30 , 80 ] ;
10531: LD_ADDR_VAR 0 9
10535: PUSH
10536: LD_INT 120
10538: PUSH
10539: LD_INT 30
10541: PUSH
10542: LD_INT 80
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: LIST
10549: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10550: LD_VAR 0 6
10554: PPUSH
10555: CALL_OW 264
10559: PUSH
10560: LD_INT 22
10562: PUSH
10563: EMPTY
10564: LIST
10565: IN
10566: IFFALSE 10587
// points := [ 40 , 1 , 1 ] ;
10568: LD_ADDR_VAR 0 9
10572: PUSH
10573: LD_INT 40
10575: PUSH
10576: LD_INT 1
10578: PUSH
10579: LD_INT 1
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10587: LD_VAR 0 6
10591: PPUSH
10592: CALL_OW 264
10596: PUSH
10597: LD_INT 29
10599: PUSH
10600: EMPTY
10601: LIST
10602: IN
10603: IFFALSE 10624
// points := [ 70 , 200 , 400 ] ;
10605: LD_ADDR_VAR 0 9
10609: PUSH
10610: LD_INT 70
10612: PUSH
10613: LD_INT 200
10615: PUSH
10616: LD_INT 400
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10624: LD_VAR 0 6
10628: PPUSH
10629: CALL_OW 264
10633: PUSH
10634: LD_INT 14
10636: PUSH
10637: LD_INT 53
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: IN
10644: IFFALSE 10665
// points := [ 40 , 10 , 20 ] ;
10646: LD_ADDR_VAR 0 9
10650: PUSH
10651: LD_INT 40
10653: PUSH
10654: LD_INT 10
10656: PUSH
10657: LD_INT 20
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10665: LD_VAR 0 6
10669: PPUSH
10670: CALL_OW 264
10674: PUSH
10675: LD_INT 9
10677: PUSH
10678: EMPTY
10679: LIST
10680: IN
10681: IFFALSE 10702
// points := [ 5 , 70 , 20 ] ;
10683: LD_ADDR_VAR 0 9
10687: PUSH
10688: LD_INT 5
10690: PUSH
10691: LD_INT 70
10693: PUSH
10694: LD_INT 20
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10702: LD_VAR 0 6
10706: PPUSH
10707: CALL_OW 264
10711: PUSH
10712: LD_INT 10
10714: PUSH
10715: EMPTY
10716: LIST
10717: IN
10718: IFFALSE 10739
// points := [ 35 , 110 , 70 ] ;
10720: LD_ADDR_VAR 0 9
10724: PUSH
10725: LD_INT 35
10727: PUSH
10728: LD_INT 110
10730: PUSH
10731: LD_INT 70
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10739: LD_VAR 0 6
10743: PPUSH
10744: CALL_OW 265
10748: PUSH
10749: LD_INT 25
10751: EQUAL
10752: IFFALSE 10773
// points := [ 80 , 65 , 100 ] ;
10754: LD_ADDR_VAR 0 9
10758: PUSH
10759: LD_INT 80
10761: PUSH
10762: LD_INT 65
10764: PUSH
10765: LD_INT 100
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10773: LD_VAR 0 6
10777: PPUSH
10778: CALL_OW 263
10782: PUSH
10783: LD_INT 1
10785: EQUAL
10786: IFFALSE 10821
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10788: LD_ADDR_VAR 0 10
10792: PUSH
10793: LD_VAR 0 10
10797: PUSH
10798: LD_VAR 0 6
10802: PPUSH
10803: CALL_OW 311
10807: PPUSH
10808: LD_INT 3
10810: PPUSH
10811: CALL_OW 259
10815: PUSH
10816: LD_INT 4
10818: MUL
10819: MUL
10820: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10821: LD_VAR 0 6
10825: PPUSH
10826: CALL_OW 263
10830: PUSH
10831: LD_INT 2
10833: EQUAL
10834: IFFALSE 10885
// begin j := IsControledBy ( i ) ;
10836: LD_ADDR_VAR 0 7
10840: PUSH
10841: LD_VAR 0 6
10845: PPUSH
10846: CALL_OW 312
10850: ST_TO_ADDR
// if j then
10851: LD_VAR 0 7
10855: IFFALSE 10885
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10857: LD_ADDR_VAR 0 10
10861: PUSH
10862: LD_VAR 0 10
10866: PUSH
10867: LD_VAR 0 7
10871: PPUSH
10872: LD_INT 3
10874: PPUSH
10875: CALL_OW 259
10879: PUSH
10880: LD_INT 3
10882: MUL
10883: MUL
10884: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10885: LD_VAR 0 6
10889: PPUSH
10890: CALL_OW 264
10894: PUSH
10895: LD_INT 5
10897: PUSH
10898: LD_INT 6
10900: PUSH
10901: LD_INT 46
10903: PUSH
10904: LD_INT 44
10906: PUSH
10907: LD_INT 47
10909: PUSH
10910: LD_INT 45
10912: PUSH
10913: LD_INT 28
10915: PUSH
10916: LD_INT 7
10918: PUSH
10919: LD_INT 27
10921: PUSH
10922: LD_INT 29
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: IN
10937: IFFALSE 10957
10939: PUSH
10940: LD_VAR 0 1
10944: PPUSH
10945: LD_INT 52
10947: PPUSH
10948: CALL_OW 321
10952: PUSH
10953: LD_INT 2
10955: EQUAL
10956: AND
10957: IFFALSE 10974
// bpoints := bpoints * 1.2 ;
10959: LD_ADDR_VAR 0 10
10963: PUSH
10964: LD_VAR 0 10
10968: PUSH
10969: LD_REAL  1.20000000000000E+0000
10972: MUL
10973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10974: LD_VAR 0 6
10978: PPUSH
10979: CALL_OW 264
10983: PUSH
10984: LD_INT 6
10986: PUSH
10987: LD_INT 46
10989: PUSH
10990: LD_INT 47
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: IN
10998: IFFALSE 11015
// bpoints := bpoints * 1.2 ;
11000: LD_ADDR_VAR 0 10
11004: PUSH
11005: LD_VAR 0 10
11009: PUSH
11010: LD_REAL  1.20000000000000E+0000
11013: MUL
11014: ST_TO_ADDR
// end ; unit_building :
11015: GO 11029
11017: LD_INT 3
11019: DOUBLE
11020: EQUAL
11021: IFTRUE 11025
11023: GO 11028
11025: POP
// ; end ;
11026: GO 11029
11028: POP
// for j = 1 to 3 do
11029: LD_ADDR_VAR 0 7
11033: PUSH
11034: DOUBLE
11035: LD_INT 1
11037: DEC
11038: ST_TO_ADDR
11039: LD_INT 3
11041: PUSH
11042: FOR_TO
11043: IFFALSE 11096
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
11045: LD_ADDR_VAR 0 5
11049: PUSH
11050: LD_VAR 0 5
11054: PPUSH
11055: LD_VAR 0 7
11059: PPUSH
11060: LD_VAR 0 5
11064: PUSH
11065: LD_VAR 0 7
11069: ARRAY
11070: PUSH
11071: LD_VAR 0 9
11075: PUSH
11076: LD_VAR 0 7
11080: ARRAY
11081: PUSH
11082: LD_VAR 0 10
11086: MUL
11087: PLUS
11088: PPUSH
11089: CALL_OW 1
11093: ST_TO_ADDR
11094: GO 11042
11096: POP
11097: POP
// end ;
11098: GO 9571
11100: POP
11101: POP
// result := Replace ( result , 4 , tmp ) ;
11102: LD_ADDR_VAR 0 5
11106: PUSH
11107: LD_VAR 0 5
11111: PPUSH
11112: LD_INT 4
11114: PPUSH
11115: LD_VAR 0 8
11119: PPUSH
11120: CALL_OW 1
11124: ST_TO_ADDR
// end ;
11125: LD_VAR 0 5
11129: RET
// export function DangerAtRange ( unit , range ) ; begin
11130: LD_INT 0
11132: PPUSH
// if not unit then
11133: LD_VAR 0 1
11137: NOT
11138: IFFALSE 11142
// exit ;
11140: GO 11187
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 255
11156: PPUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 250
11166: PPUSH
11167: LD_VAR 0 1
11171: PPUSH
11172: CALL_OW 251
11176: PPUSH
11177: LD_VAR 0 2
11181: PPUSH
11182: CALL 9421 0 4
11186: ST_TO_ADDR
// end ;
11187: LD_VAR 0 3
11191: RET
// export function DangerInArea ( side , area ) ; begin
11192: LD_INT 0
11194: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11195: LD_ADDR_VAR 0 3
11199: PUSH
11200: LD_VAR 0 2
11204: PPUSH
11205: LD_INT 81
11207: PUSH
11208: LD_VAR 0 1
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PPUSH
11217: CALL_OW 70
11221: ST_TO_ADDR
// end ;
11222: LD_VAR 0 3
11226: RET
// export function IsExtension ( b ) ; begin
11227: LD_INT 0
11229: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11230: LD_ADDR_VAR 0 2
11234: PUSH
11235: LD_VAR 0 1
11239: PUSH
11240: LD_INT 23
11242: PUSH
11243: LD_INT 20
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_INT 17
11251: PUSH
11252: LD_INT 24
11254: PUSH
11255: LD_INT 21
11257: PUSH
11258: LD_INT 19
11260: PUSH
11261: LD_INT 16
11263: PUSH
11264: LD_INT 25
11266: PUSH
11267: LD_INT 18
11269: PUSH
11270: EMPTY
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: IN
11282: ST_TO_ADDR
// end ;
11283: LD_VAR 0 2
11287: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11288: LD_INT 0
11290: PPUSH
11291: PPUSH
11292: PPUSH
// result := [ ] ;
11293: LD_ADDR_VAR 0 4
11297: PUSH
11298: EMPTY
11299: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11300: LD_ADDR_VAR 0 5
11304: PUSH
11305: LD_VAR 0 2
11309: PPUSH
11310: LD_INT 21
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 70
11324: ST_TO_ADDR
// if not tmp then
11325: LD_VAR 0 5
11329: NOT
11330: IFFALSE 11334
// exit ;
11332: GO 11398
// if checkLink then
11334: LD_VAR 0 3
11338: IFFALSE 11388
// begin for i in tmp do
11340: LD_ADDR_VAR 0 6
11344: PUSH
11345: LD_VAR 0 5
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11386
// if GetBase ( i ) <> base then
11353: LD_VAR 0 6
11357: PPUSH
11358: CALL_OW 274
11362: PUSH
11363: LD_VAR 0 1
11367: NONEQUAL
11368: IFFALSE 11384
// ComLinkToBase ( base , i ) ;
11370: LD_VAR 0 1
11374: PPUSH
11375: LD_VAR 0 6
11379: PPUSH
11380: CALL_OW 169
11384: GO 11350
11386: POP
11387: POP
// end ; result := tmp ;
11388: LD_ADDR_VAR 0 4
11392: PUSH
11393: LD_VAR 0 5
11397: ST_TO_ADDR
// end ;
11398: LD_VAR 0 4
11402: RET
// export function ComComplete ( units , b ) ; var i ; begin
11403: LD_INT 0
11405: PPUSH
11406: PPUSH
// if not units then
11407: LD_VAR 0 1
11411: NOT
11412: IFFALSE 11416
// exit ;
11414: GO 11506
// for i in units do
11416: LD_ADDR_VAR 0 4
11420: PUSH
11421: LD_VAR 0 1
11425: PUSH
11426: FOR_IN
11427: IFFALSE 11504
// if BuildingStatus ( b ) = bs_build then
11429: LD_VAR 0 2
11433: PPUSH
11434: CALL_OW 461
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: IFFALSE 11502
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11444: LD_VAR 0 4
11448: PPUSH
11449: LD_STRING h
11451: PUSH
11452: LD_VAR 0 2
11456: PPUSH
11457: CALL_OW 250
11461: PUSH
11462: LD_VAR 0 2
11466: PPUSH
11467: CALL_OW 251
11471: PUSH
11472: LD_VAR 0 2
11476: PUSH
11477: LD_INT 0
11479: PUSH
11480: LD_INT 0
11482: PUSH
11483: LD_INT 0
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: PPUSH
11498: CALL_OW 446
11502: GO 11426
11504: POP
11505: POP
// end ;
11506: LD_VAR 0 3
11510: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11511: LD_INT 0
11513: PPUSH
11514: PPUSH
11515: PPUSH
11516: PPUSH
11517: PPUSH
11518: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11519: LD_VAR 0 1
11523: NOT
11524: IFTRUE 11541
11526: PUSH
11527: LD_VAR 0 1
11531: PPUSH
11532: CALL_OW 263
11536: PUSH
11537: LD_INT 2
11539: NONEQUAL
11540: OR
11541: IFFALSE 11545
// exit ;
11543: GO 11861
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11545: LD_ADDR_VAR 0 6
11549: PUSH
11550: LD_INT 22
11552: PUSH
11553: LD_VAR 0 1
11557: PPUSH
11558: CALL_OW 255
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 2
11569: PUSH
11570: LD_INT 30
11572: PUSH
11573: LD_INT 36
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: LD_INT 34
11582: PUSH
11583: LD_INT 31
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: PPUSH
11599: CALL_OW 69
11603: ST_TO_ADDR
// if not tmp then
11604: LD_VAR 0 6
11608: NOT
11609: IFFALSE 11613
// exit ;
11611: GO 11861
// result := [ ] ;
11613: LD_ADDR_VAR 0 2
11617: PUSH
11618: EMPTY
11619: ST_TO_ADDR
// for i in tmp do
11620: LD_ADDR_VAR 0 3
11624: PUSH
11625: LD_VAR 0 6
11629: PUSH
11630: FOR_IN
11631: IFFALSE 11702
// begin t := UnitsInside ( i ) ;
11633: LD_ADDR_VAR 0 4
11637: PUSH
11638: LD_VAR 0 3
11642: PPUSH
11643: CALL_OW 313
11647: ST_TO_ADDR
// if t then
11648: LD_VAR 0 4
11652: IFFALSE 11700
// for j in t do
11654: LD_ADDR_VAR 0 7
11658: PUSH
11659: LD_VAR 0 4
11663: PUSH
11664: FOR_IN
11665: IFFALSE 11698
// result := Replace ( result , result + 1 , j ) ;
11667: LD_ADDR_VAR 0 2
11671: PUSH
11672: LD_VAR 0 2
11676: PPUSH
11677: LD_VAR 0 2
11681: PUSH
11682: LD_INT 1
11684: PLUS
11685: PPUSH
11686: LD_VAR 0 7
11690: PPUSH
11691: CALL_OW 1
11695: ST_TO_ADDR
11696: GO 11664
11698: POP
11699: POP
// end ;
11700: GO 11630
11702: POP
11703: POP
// if not result then
11704: LD_VAR 0 2
11708: NOT
11709: IFFALSE 11713
// exit ;
11711: GO 11861
// mech := result [ 1 ] ;
11713: LD_ADDR_VAR 0 5
11717: PUSH
11718: LD_VAR 0 2
11722: PUSH
11723: LD_INT 1
11725: ARRAY
11726: ST_TO_ADDR
// if result > 1 then
11727: LD_VAR 0 2
11731: PUSH
11732: LD_INT 1
11734: GREATER
11735: IFFALSE 11847
// begin for i = 2 to result do
11737: LD_ADDR_VAR 0 3
11741: PUSH
11742: DOUBLE
11743: LD_INT 2
11745: DEC
11746: ST_TO_ADDR
11747: LD_VAR 0 2
11751: PUSH
11752: FOR_TO
11753: IFFALSE 11845
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11755: LD_ADDR_VAR 0 4
11759: PUSH
11760: LD_VAR 0 2
11764: PUSH
11765: LD_VAR 0 3
11769: ARRAY
11770: PPUSH
11771: LD_INT 3
11773: PPUSH
11774: CALL_OW 259
11778: PUSH
11779: LD_VAR 0 2
11783: PUSH
11784: LD_VAR 0 3
11788: ARRAY
11789: PPUSH
11790: CALL_OW 432
11794: MINUS
11795: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11796: LD_VAR 0 4
11800: PUSH
11801: LD_VAR 0 5
11805: PPUSH
11806: LD_INT 3
11808: PPUSH
11809: CALL_OW 259
11813: PUSH
11814: LD_VAR 0 5
11818: PPUSH
11819: CALL_OW 432
11823: MINUS
11824: GREATEREQUAL
11825: IFFALSE 11843
// mech := result [ i ] ;
11827: LD_ADDR_VAR 0 5
11831: PUSH
11832: LD_VAR 0 2
11836: PUSH
11837: LD_VAR 0 3
11841: ARRAY
11842: ST_TO_ADDR
// end ;
11843: GO 11752
11845: POP
11846: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11847: LD_VAR 0 1
11851: PPUSH
11852: LD_VAR 0 5
11856: PPUSH
11857: CALL_OW 135
// end ;
11861: LD_VAR 0 2
11865: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11866: LD_INT 0
11868: PPUSH
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
11873: PPUSH
11874: PPUSH
11875: PPUSH
11876: PPUSH
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
// result := [ ] ;
11881: LD_ADDR_VAR 0 7
11885: PUSH
11886: EMPTY
11887: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11888: LD_VAR 0 1
11892: PPUSH
11893: CALL_OW 266
11897: PUSH
11898: LD_INT 0
11900: PUSH
11901: LD_INT 1
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: IN
11908: NOT
11909: IFFALSE 11913
// exit ;
11911: GO 13553
// if name then
11913: LD_VAR 0 3
11917: IFFALSE 11933
// SetBName ( base_dep , name ) ;
11919: LD_VAR 0 1
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: CALL_OW 500
// base := GetBase ( base_dep ) ;
11933: LD_ADDR_VAR 0 15
11937: PUSH
11938: LD_VAR 0 1
11942: PPUSH
11943: CALL_OW 274
11947: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11948: LD_ADDR_VAR 0 16
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 255
11962: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11963: LD_ADDR_VAR 0 17
11967: PUSH
11968: LD_VAR 0 1
11972: PPUSH
11973: CALL_OW 248
11977: ST_TO_ADDR
// if sources then
11978: LD_VAR 0 5
11982: IFFALSE 12029
// for i = 1 to 3 do
11984: LD_ADDR_VAR 0 8
11988: PUSH
11989: DOUBLE
11990: LD_INT 1
11992: DEC
11993: ST_TO_ADDR
11994: LD_INT 3
11996: PUSH
11997: FOR_TO
11998: IFFALSE 12027
// AddResourceType ( base , i , sources [ i ] ) ;
12000: LD_VAR 0 15
12004: PPUSH
12005: LD_VAR 0 8
12009: PPUSH
12010: LD_VAR 0 5
12014: PUSH
12015: LD_VAR 0 8
12019: ARRAY
12020: PPUSH
12021: CALL_OW 276
12025: GO 11997
12027: POP
12028: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
12029: LD_ADDR_VAR 0 18
12033: PUSH
12034: LD_VAR 0 15
12038: PPUSH
12039: LD_VAR 0 2
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL 11288 0 3
12051: ST_TO_ADDR
// InitHc ;
12052: CALL_OW 19
// InitUc ;
12056: CALL_OW 18
// uc_side := side ;
12060: LD_ADDR_OWVAR 20
12064: PUSH
12065: LD_VAR 0 16
12069: ST_TO_ADDR
// uc_nation := nation ;
12070: LD_ADDR_OWVAR 21
12074: PUSH
12075: LD_VAR 0 17
12079: ST_TO_ADDR
// if buildings then
12080: LD_VAR 0 18
12084: IFFALSE 13412
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
12086: LD_ADDR_VAR 0 19
12090: PUSH
12091: LD_VAR 0 18
12095: PPUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 29
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 30
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 72
12128: ST_TO_ADDR
// if tmp then
12129: LD_VAR 0 19
12133: IFFALSE 12181
// for i in tmp do
12135: LD_ADDR_VAR 0 8
12139: PUSH
12140: LD_VAR 0 19
12144: PUSH
12145: FOR_IN
12146: IFFALSE 12179
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12148: LD_VAR 0 8
12152: PPUSH
12153: CALL_OW 250
12157: PPUSH
12158: LD_VAR 0 8
12162: PPUSH
12163: CALL_OW 251
12167: PPUSH
12168: LD_VAR 0 16
12172: PPUSH
12173: CALL_OW 441
12177: GO 12145
12179: POP
12180: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12181: LD_VAR 0 18
12185: PPUSH
12186: LD_INT 2
12188: PUSH
12189: LD_INT 30
12191: PUSH
12192: LD_INT 32
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 33
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: PPUSH
12214: CALL_OW 72
12218: IFFALSE 12306
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12220: LD_ADDR_VAR 0 8
12224: PUSH
12225: LD_VAR 0 18
12229: PPUSH
12230: LD_INT 2
12232: PUSH
12233: LD_INT 30
12235: PUSH
12236: LD_INT 32
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 30
12245: PUSH
12246: LD_INT 33
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: PPUSH
12258: CALL_OW 72
12262: PUSH
12263: FOR_IN
12264: IFFALSE 12304
// begin if not GetBWeapon ( i ) then
12266: LD_VAR 0 8
12270: PPUSH
12271: CALL_OW 269
12275: NOT
12276: IFFALSE 12302
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12278: LD_VAR 0 8
12282: PPUSH
12283: LD_VAR 0 8
12287: PPUSH
12288: LD_VAR 0 2
12292: PPUSH
12293: CALL 13558 0 2
12297: PPUSH
12298: CALL_OW 431
// end ;
12302: GO 12263
12304: POP
12305: POP
// end ; for i = 1 to personel do
12306: LD_ADDR_VAR 0 8
12310: PUSH
12311: DOUBLE
12312: LD_INT 1
12314: DEC
12315: ST_TO_ADDR
12316: LD_VAR 0 6
12320: PUSH
12321: FOR_TO
12322: IFFALSE 13392
// begin if i > 4 then
12324: LD_VAR 0 8
12328: PUSH
12329: LD_INT 4
12331: GREATER
12332: IFFALSE 12336
// break ;
12334: GO 13392
// case i of 1 :
12336: LD_VAR 0 8
12340: PUSH
12341: LD_INT 1
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12429
12349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12350: LD_ADDR_VAR 0 12
12354: PUSH
12355: LD_VAR 0 18
12359: PPUSH
12360: LD_INT 22
12362: PUSH
12363: LD_VAR 0 16
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 58
12374: PUSH
12375: EMPTY
12376: LIST
12377: PUSH
12378: LD_INT 2
12380: PUSH
12381: LD_INT 30
12383: PUSH
12384: LD_INT 32
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 30
12393: PUSH
12394: LD_INT 4
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: LD_INT 30
12403: PUSH
12404: LD_INT 5
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: PPUSH
12422: CALL_OW 72
12426: ST_TO_ADDR
12427: GO 12651
12429: LD_INT 2
12431: DOUBLE
12432: EQUAL
12433: IFTRUE 12437
12435: GO 12499
12437: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12438: LD_ADDR_VAR 0 12
12442: PUSH
12443: LD_VAR 0 18
12447: PPUSH
12448: LD_INT 22
12450: PUSH
12451: LD_VAR 0 16
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 2
12462: PUSH
12463: LD_INT 30
12465: PUSH
12466: LD_INT 0
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 30
12475: PUSH
12476: LD_INT 1
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 72
12496: ST_TO_ADDR
12497: GO 12651
12499: LD_INT 3
12501: DOUBLE
12502: EQUAL
12503: IFTRUE 12507
12505: GO 12569
12507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12508: LD_ADDR_VAR 0 12
12512: PUSH
12513: LD_VAR 0 18
12517: PPUSH
12518: LD_INT 22
12520: PUSH
12521: LD_VAR 0 16
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: LD_INT 30
12535: PUSH
12536: LD_INT 2
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 30
12545: PUSH
12546: LD_INT 3
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 72
12566: ST_TO_ADDR
12567: GO 12651
12569: LD_INT 4
12571: DOUBLE
12572: EQUAL
12573: IFTRUE 12577
12575: GO 12650
12577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12578: LD_ADDR_VAR 0 12
12582: PUSH
12583: LD_VAR 0 18
12587: PPUSH
12588: LD_INT 22
12590: PUSH
12591: LD_VAR 0 16
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: LD_INT 30
12605: PUSH
12606: LD_INT 6
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 30
12615: PUSH
12616: LD_INT 7
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 30
12625: PUSH
12626: LD_INT 8
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: PPUSH
12643: CALL_OW 72
12647: ST_TO_ADDR
12648: GO 12651
12650: POP
// if i = 1 then
12651: LD_VAR 0 8
12655: PUSH
12656: LD_INT 1
12658: EQUAL
12659: IFFALSE 12770
// begin tmp := [ ] ;
12661: LD_ADDR_VAR 0 19
12665: PUSH
12666: EMPTY
12667: ST_TO_ADDR
// for j in f do
12668: LD_ADDR_VAR 0 9
12672: PUSH
12673: LD_VAR 0 12
12677: PUSH
12678: FOR_IN
12679: IFFALSE 12752
// if GetBType ( j ) = b_bunker then
12681: LD_VAR 0 9
12685: PPUSH
12686: CALL_OW 266
12690: PUSH
12691: LD_INT 32
12693: EQUAL
12694: IFFALSE 12721
// tmp := Insert ( tmp , 1 , j ) else
12696: LD_ADDR_VAR 0 19
12700: PUSH
12701: LD_VAR 0 19
12705: PPUSH
12706: LD_INT 1
12708: PPUSH
12709: LD_VAR 0 9
12713: PPUSH
12714: CALL_OW 2
12718: ST_TO_ADDR
12719: GO 12750
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12721: LD_ADDR_VAR 0 19
12725: PUSH
12726: LD_VAR 0 19
12730: PPUSH
12731: LD_VAR 0 19
12735: PUSH
12736: LD_INT 1
12738: PLUS
12739: PPUSH
12740: LD_VAR 0 9
12744: PPUSH
12745: CALL_OW 2
12749: ST_TO_ADDR
12750: GO 12678
12752: POP
12753: POP
// if tmp then
12754: LD_VAR 0 19
12758: IFFALSE 12770
// f := tmp ;
12760: LD_ADDR_VAR 0 12
12764: PUSH
12765: LD_VAR 0 19
12769: ST_TO_ADDR
// end ; x := personel [ i ] ;
12770: LD_ADDR_VAR 0 13
12774: PUSH
12775: LD_VAR 0 6
12779: PUSH
12780: LD_VAR 0 8
12784: ARRAY
12785: ST_TO_ADDR
// if x = - 1 then
12786: LD_VAR 0 13
12790: PUSH
12791: LD_INT 1
12793: NEG
12794: EQUAL
12795: IFFALSE 13006
// begin for j in f do
12797: LD_ADDR_VAR 0 9
12801: PUSH
12802: LD_VAR 0 12
12806: PUSH
12807: FOR_IN
12808: IFFALSE 13002
// repeat InitHc ;
12810: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12814: LD_VAR 0 9
12818: PPUSH
12819: CALL_OW 266
12823: PUSH
12824: LD_INT 5
12826: EQUAL
12827: IFFALSE 12897
// begin if UnitsInside ( j ) < 3 then
12829: LD_VAR 0 9
12833: PPUSH
12834: CALL_OW 313
12838: PUSH
12839: LD_INT 3
12841: LESS
12842: IFFALSE 12878
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12844: LD_INT 0
12846: PPUSH
12847: LD_INT 5
12849: PUSH
12850: LD_INT 8
12852: PUSH
12853: LD_INT 9
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PUSH
12861: LD_VAR 0 17
12865: ARRAY
12866: PPUSH
12867: LD_VAR 0 4
12871: PPUSH
12872: CALL_OW 380
12876: GO 12895
// PrepareHuman ( false , i , skill ) ;
12878: LD_INT 0
12880: PPUSH
12881: LD_VAR 0 8
12885: PPUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: CALL_OW 380
// end else
12895: GO 12914
// PrepareHuman ( false , i , skill ) ;
12897: LD_INT 0
12899: PPUSH
12900: LD_VAR 0 8
12904: PPUSH
12905: LD_VAR 0 4
12909: PPUSH
12910: CALL_OW 380
// un := CreateHuman ;
12914: LD_ADDR_VAR 0 14
12918: PUSH
12919: CALL_OW 44
12923: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12924: LD_ADDR_VAR 0 7
12928: PUSH
12929: LD_VAR 0 7
12933: PPUSH
12934: LD_INT 1
12936: PPUSH
12937: LD_VAR 0 14
12941: PPUSH
12942: CALL_OW 2
12946: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12947: LD_VAR 0 14
12951: PPUSH
12952: LD_VAR 0 9
12956: PPUSH
12957: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12961: LD_VAR 0 9
12965: PPUSH
12966: CALL_OW 313
12970: PUSH
12971: LD_INT 6
12973: EQUAL
12974: IFTRUE 12998
12976: PUSH
12977: LD_VAR 0 9
12981: PPUSH
12982: CALL_OW 266
12986: PUSH
12987: LD_INT 32
12989: PUSH
12990: LD_INT 31
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: IN
12997: OR
12998: IFFALSE 12810
13000: GO 12807
13002: POP
13003: POP
// end else
13004: GO 13390
// for j = 1 to x do
13006: LD_ADDR_VAR 0 9
13010: PUSH
13011: DOUBLE
13012: LD_INT 1
13014: DEC
13015: ST_TO_ADDR
13016: LD_VAR 0 13
13020: PUSH
13021: FOR_TO
13022: IFFALSE 13388
// begin InitHc ;
13024: CALL_OW 19
// if not f then
13028: LD_VAR 0 12
13032: NOT
13033: IFFALSE 13122
// begin PrepareHuman ( false , i , skill ) ;
13035: LD_INT 0
13037: PPUSH
13038: LD_VAR 0 8
13042: PPUSH
13043: LD_VAR 0 4
13047: PPUSH
13048: CALL_OW 380
// un := CreateHuman ;
13052: LD_ADDR_VAR 0 14
13056: PUSH
13057: CALL_OW 44
13061: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13062: LD_ADDR_VAR 0 7
13066: PUSH
13067: LD_VAR 0 7
13071: PPUSH
13072: LD_INT 1
13074: PPUSH
13075: LD_VAR 0 14
13079: PPUSH
13080: CALL_OW 2
13084: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13085: LD_VAR 0 14
13089: PPUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 250
13099: PPUSH
13100: LD_VAR 0 1
13104: PPUSH
13105: CALL_OW 251
13109: PPUSH
13110: LD_INT 10
13112: PPUSH
13113: LD_INT 0
13115: PPUSH
13116: CALL_OW 50
// continue ;
13120: GO 13021
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
13122: LD_VAR 0 12
13126: PUSH
13127: LD_INT 1
13129: ARRAY
13130: PPUSH
13131: CALL_OW 313
13135: IFFALSE 13163
13137: PUSH
13138: LD_VAR 0 12
13142: PUSH
13143: LD_INT 1
13145: ARRAY
13146: PPUSH
13147: CALL_OW 266
13151: PUSH
13152: LD_INT 32
13154: PUSH
13155: LD_INT 31
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: IN
13162: AND
13163: IFTRUE 13184
13165: PUSH
13166: LD_VAR 0 12
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 313
13179: PUSH
13180: LD_INT 6
13182: EQUAL
13183: OR
13184: IFFALSE 13204
// f := Delete ( f , 1 ) ;
13186: LD_ADDR_VAR 0 12
13190: PUSH
13191: LD_VAR 0 12
13195: PPUSH
13196: LD_INT 1
13198: PPUSH
13199: CALL_OW 3
13203: ST_TO_ADDR
// if not f then
13204: LD_VAR 0 12
13208: NOT
13209: IFFALSE 13227
// begin x := x + 2 ;
13211: LD_ADDR_VAR 0 13
13215: PUSH
13216: LD_VAR 0 13
13220: PUSH
13221: LD_INT 2
13223: PLUS
13224: ST_TO_ADDR
// continue ;
13225: GO 13021
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13227: LD_VAR 0 12
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: PPUSH
13236: CALL_OW 266
13240: PUSH
13241: LD_INT 5
13243: EQUAL
13244: IFFALSE 13318
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13246: LD_VAR 0 12
13250: PUSH
13251: LD_INT 1
13253: ARRAY
13254: PPUSH
13255: CALL_OW 313
13259: PUSH
13260: LD_INT 3
13262: LESS
13263: IFFALSE 13299
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13265: LD_INT 0
13267: PPUSH
13268: LD_INT 5
13270: PUSH
13271: LD_INT 8
13273: PUSH
13274: LD_INT 9
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: LIST
13281: PUSH
13282: LD_VAR 0 17
13286: ARRAY
13287: PPUSH
13288: LD_VAR 0 4
13292: PPUSH
13293: CALL_OW 380
13297: GO 13316
// PrepareHuman ( false , i , skill ) ;
13299: LD_INT 0
13301: PPUSH
13302: LD_VAR 0 8
13306: PPUSH
13307: LD_VAR 0 4
13311: PPUSH
13312: CALL_OW 380
// end else
13316: GO 13335
// PrepareHuman ( false , i , skill ) ;
13318: LD_INT 0
13320: PPUSH
13321: LD_VAR 0 8
13325: PPUSH
13326: LD_VAR 0 4
13330: PPUSH
13331: CALL_OW 380
// un := CreateHuman ;
13335: LD_ADDR_VAR 0 14
13339: PUSH
13340: CALL_OW 44
13344: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13345: LD_ADDR_VAR 0 7
13349: PUSH
13350: LD_VAR 0 7
13354: PPUSH
13355: LD_INT 1
13357: PPUSH
13358: LD_VAR 0 14
13362: PPUSH
13363: CALL_OW 2
13367: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13368: LD_VAR 0 14
13372: PPUSH
13373: LD_VAR 0 12
13377: PUSH
13378: LD_INT 1
13380: ARRAY
13381: PPUSH
13382: CALL_OW 52
// end ;
13386: GO 13021
13388: POP
13389: POP
// end ;
13390: GO 12321
13392: POP
13393: POP
// result := result ^ buildings ;
13394: LD_ADDR_VAR 0 7
13398: PUSH
13399: LD_VAR 0 7
13403: PUSH
13404: LD_VAR 0 18
13408: ADD
13409: ST_TO_ADDR
// end else
13410: GO 13553
// begin for i = 1 to personel do
13412: LD_ADDR_VAR 0 8
13416: PUSH
13417: DOUBLE
13418: LD_INT 1
13420: DEC
13421: ST_TO_ADDR
13422: LD_VAR 0 6
13426: PUSH
13427: FOR_TO
13428: IFFALSE 13551
// begin if i > 4 then
13430: LD_VAR 0 8
13434: PUSH
13435: LD_INT 4
13437: GREATER
13438: IFFALSE 13442
// break ;
13440: GO 13551
// x := personel [ i ] ;
13442: LD_ADDR_VAR 0 13
13446: PUSH
13447: LD_VAR 0 6
13451: PUSH
13452: LD_VAR 0 8
13456: ARRAY
13457: ST_TO_ADDR
// if x = - 1 then
13458: LD_VAR 0 13
13462: PUSH
13463: LD_INT 1
13465: NEG
13466: EQUAL
13467: IFFALSE 13471
// continue ;
13469: GO 13427
// PrepareHuman ( false , i , skill ) ;
13471: LD_INT 0
13473: PPUSH
13474: LD_VAR 0 8
13478: PPUSH
13479: LD_VAR 0 4
13483: PPUSH
13484: CALL_OW 380
// un := CreateHuman ;
13488: LD_ADDR_VAR 0 14
13492: PUSH
13493: CALL_OW 44
13497: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13498: LD_VAR 0 14
13502: PPUSH
13503: LD_VAR 0 1
13507: PPUSH
13508: CALL_OW 250
13512: PPUSH
13513: LD_VAR 0 1
13517: PPUSH
13518: CALL_OW 251
13522: PPUSH
13523: LD_INT 10
13525: PPUSH
13526: LD_INT 0
13528: PPUSH
13529: CALL_OW 50
// result := result ^ un ;
13533: LD_ADDR_VAR 0 7
13537: PUSH
13538: LD_VAR 0 7
13542: PUSH
13543: LD_VAR 0 14
13547: ADD
13548: ST_TO_ADDR
// end ;
13549: GO 13427
13551: POP
13552: POP
// end ; end ;
13553: LD_VAR 0 7
13557: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13558: LD_INT 0
13560: PPUSH
13561: PPUSH
13562: PPUSH
13563: PPUSH
13564: PPUSH
13565: PPUSH
13566: PPUSH
13567: PPUSH
13568: PPUSH
13569: PPUSH
13570: PPUSH
13571: PPUSH
13572: PPUSH
13573: PPUSH
13574: PPUSH
13575: PPUSH
// result := false ;
13576: LD_ADDR_VAR 0 3
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13584: LD_VAR 0 1
13588: NOT
13589: IFTRUE 13614
13591: PUSH
13592: LD_VAR 0 1
13596: PPUSH
13597: CALL_OW 266
13601: PUSH
13602: LD_INT 32
13604: PUSH
13605: LD_INT 33
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: IN
13612: NOT
13613: OR
13614: IFFALSE 13618
// exit ;
13616: GO 14753
// nat := GetNation ( tower ) ;
13618: LD_ADDR_VAR 0 12
13622: PUSH
13623: LD_VAR 0 1
13627: PPUSH
13628: CALL_OW 248
13632: ST_TO_ADDR
// side := GetSide ( tower ) ;
13633: LD_ADDR_VAR 0 16
13637: PUSH
13638: LD_VAR 0 1
13642: PPUSH
13643: CALL_OW 255
13647: ST_TO_ADDR
// x := GetX ( tower ) ;
13648: LD_ADDR_VAR 0 10
13652: PUSH
13653: LD_VAR 0 1
13657: PPUSH
13658: CALL_OW 250
13662: ST_TO_ADDR
// y := GetY ( tower ) ;
13663: LD_ADDR_VAR 0 11
13667: PUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 251
13677: ST_TO_ADDR
// if not x or not y then
13678: LD_VAR 0 10
13682: NOT
13683: IFTRUE 13692
13685: PUSH
13686: LD_VAR 0 11
13690: NOT
13691: OR
13692: IFFALSE 13696
// exit ;
13694: GO 14753
// weapon := 0 ;
13696: LD_ADDR_VAR 0 18
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// fac_list := [ ] ;
13704: LD_ADDR_VAR 0 17
13708: PUSH
13709: EMPTY
13710: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13711: LD_ADDR_VAR 0 6
13715: PUSH
13716: LD_VAR 0 1
13720: PPUSH
13721: CALL_OW 274
13725: PPUSH
13726: LD_VAR 0 2
13730: PPUSH
13731: LD_INT 0
13733: PPUSH
13734: CALL 11288 0 3
13738: PPUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 3
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PPUSH
13749: CALL_OW 72
13753: ST_TO_ADDR
// if not factories then
13754: LD_VAR 0 6
13758: NOT
13759: IFFALSE 13763
// exit ;
13761: GO 14753
// for i in factories do
13763: LD_ADDR_VAR 0 8
13767: PUSH
13768: LD_VAR 0 6
13772: PUSH
13773: FOR_IN
13774: IFFALSE 13799
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13776: LD_ADDR_VAR 0 17
13780: PUSH
13781: LD_VAR 0 17
13785: PUSH
13786: LD_VAR 0 8
13790: PPUSH
13791: CALL_OW 478
13795: UNION
13796: ST_TO_ADDR
13797: GO 13773
13799: POP
13800: POP
// if not fac_list then
13801: LD_VAR 0 17
13805: NOT
13806: IFFALSE 13810
// exit ;
13808: GO 14753
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13810: LD_ADDR_VAR 0 5
13814: PUSH
13815: LD_INT 4
13817: PUSH
13818: LD_INT 5
13820: PUSH
13821: LD_INT 9
13823: PUSH
13824: LD_INT 10
13826: PUSH
13827: LD_INT 6
13829: PUSH
13830: LD_INT 7
13832: PUSH
13833: LD_INT 11
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 27
13847: PUSH
13848: LD_INT 28
13850: PUSH
13851: LD_INT 26
13853: PUSH
13854: LD_INT 30
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: PUSH
13863: LD_INT 43
13865: PUSH
13866: LD_INT 44
13868: PUSH
13869: LD_INT 46
13871: PUSH
13872: LD_INT 45
13874: PUSH
13875: LD_INT 47
13877: PUSH
13878: LD_INT 49
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PUSH
13894: LD_VAR 0 12
13898: ARRAY
13899: ST_TO_ADDR
// list := list isect fac_list ;
13900: LD_ADDR_VAR 0 5
13904: PUSH
13905: LD_VAR 0 5
13909: PUSH
13910: LD_VAR 0 17
13914: ISECT
13915: ST_TO_ADDR
// if not list then
13916: LD_VAR 0 5
13920: NOT
13921: IFFALSE 13925
// exit ;
13923: GO 14753
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13925: LD_VAR 0 12
13929: PUSH
13930: LD_INT 3
13932: EQUAL
13933: IFFALSE 13945
13935: PUSH
13936: LD_INT 49
13938: PUSH
13939: LD_VAR 0 5
13943: IN
13944: AND
13945: IFFALSE 13965
13947: PUSH
13948: LD_INT 31
13950: PPUSH
13951: LD_VAR 0 16
13955: PPUSH
13956: CALL_OW 321
13960: PUSH
13961: LD_INT 2
13963: EQUAL
13964: AND
13965: IFFALSE 14025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13967: LD_INT 22
13969: PUSH
13970: LD_VAR 0 16
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 35
13981: PUSH
13982: LD_INT 49
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 91
13991: PUSH
13992: LD_VAR 0 1
13996: PUSH
13997: LD_INT 10
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 69
14014: NOT
14015: IFFALSE 14025
// weapon := ru_time_lapser ;
14017: LD_ADDR_VAR 0 18
14021: PUSH
14022: LD_INT 49
14024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
14025: LD_VAR 0 12
14029: PUSH
14030: LD_INT 1
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: IN
14040: IFFALSE 14064
14042: PUSH
14043: LD_INT 11
14045: PUSH
14046: LD_VAR 0 5
14050: IN
14051: IFTRUE 14063
14053: PUSH
14054: LD_INT 30
14056: PUSH
14057: LD_VAR 0 5
14061: IN
14062: OR
14063: AND
14064: IFFALSE 14084
14066: PUSH
14067: LD_INT 6
14069: PPUSH
14070: LD_VAR 0 16
14074: PPUSH
14075: CALL_OW 321
14079: PUSH
14080: LD_INT 2
14082: EQUAL
14083: AND
14084: IFFALSE 14251
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
14086: LD_INT 22
14088: PUSH
14089: LD_VAR 0 16
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: LD_INT 35
14103: PUSH
14104: LD_INT 11
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 35
14113: PUSH
14114: LD_INT 30
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 91
14128: PUSH
14129: LD_VAR 0 1
14133: PUSH
14134: LD_INT 18
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: NOT
14152: IFFALSE 14228
14154: PUSH
14155: LD_INT 22
14157: PUSH
14158: LD_VAR 0 16
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 2
14169: PUSH
14170: LD_INT 30
14172: PUSH
14173: LD_INT 32
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 30
14182: PUSH
14183: LD_INT 33
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PUSH
14190: EMPTY
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 91
14197: PUSH
14198: LD_VAR 0 1
14202: PUSH
14203: LD_INT 12
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: PPUSH
14219: CALL_OW 69
14223: PUSH
14224: LD_INT 2
14226: GREATER
14227: AND
14228: IFFALSE 14251
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14230: LD_ADDR_VAR 0 18
14234: PUSH
14235: LD_INT 11
14237: PUSH
14238: LD_INT 30
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: PUSH
14245: LD_VAR 0 12
14249: ARRAY
14250: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14251: LD_VAR 0 18
14255: NOT
14256: IFFALSE 14276
14258: PUSH
14259: LD_INT 40
14261: PPUSH
14262: LD_VAR 0 16
14266: PPUSH
14267: CALL_OW 321
14271: PUSH
14272: LD_INT 2
14274: EQUAL
14275: AND
14276: IFFALSE 14312
14278: PUSH
14279: LD_INT 7
14281: PUSH
14282: LD_VAR 0 5
14286: IN
14287: IFTRUE 14299
14289: PUSH
14290: LD_INT 28
14292: PUSH
14293: LD_VAR 0 5
14297: IN
14298: OR
14299: IFTRUE 14311
14301: PUSH
14302: LD_INT 45
14304: PUSH
14305: LD_VAR 0 5
14309: IN
14310: OR
14311: AND
14312: IFFALSE 14566
// begin hex := GetHexInfo ( x , y ) ;
14314: LD_ADDR_VAR 0 4
14318: PUSH
14319: LD_VAR 0 10
14323: PPUSH
14324: LD_VAR 0 11
14328: PPUSH
14329: CALL_OW 546
14333: ST_TO_ADDR
// if hex [ 1 ] then
14334: LD_VAR 0 4
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: IFFALSE 14346
// exit ;
14344: GO 14753
// height := hex [ 2 ] ;
14346: LD_ADDR_VAR 0 15
14350: PUSH
14351: LD_VAR 0 4
14355: PUSH
14356: LD_INT 2
14358: ARRAY
14359: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14360: LD_ADDR_VAR 0 14
14364: PUSH
14365: LD_INT 0
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: LD_INT 5
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: ST_TO_ADDR
// for i in tmp do
14383: LD_ADDR_VAR 0 8
14387: PUSH
14388: LD_VAR 0 14
14392: PUSH
14393: FOR_IN
14394: IFFALSE 14564
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14396: LD_ADDR_VAR 0 9
14400: PUSH
14401: LD_VAR 0 10
14405: PPUSH
14406: LD_VAR 0 8
14410: PPUSH
14411: LD_INT 5
14413: PPUSH
14414: CALL_OW 272
14418: PUSH
14419: LD_VAR 0 11
14423: PPUSH
14424: LD_VAR 0 8
14428: PPUSH
14429: LD_INT 5
14431: PPUSH
14432: CALL_OW 273
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14441: LD_VAR 0 9
14445: PUSH
14446: LD_INT 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 9
14454: PUSH
14455: LD_INT 2
14457: ARRAY
14458: PPUSH
14459: CALL_OW 488
14463: IFFALSE 14562
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14465: LD_ADDR_VAR 0 4
14469: PUSH
14470: LD_VAR 0 9
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PPUSH
14479: LD_VAR 0 9
14483: PUSH
14484: LD_INT 2
14486: ARRAY
14487: PPUSH
14488: CALL_OW 546
14492: ST_TO_ADDR
// if hex [ 1 ] then
14493: LD_VAR 0 4
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: IFFALSE 14505
// continue ;
14503: GO 14393
// h := hex [ 2 ] ;
14505: LD_ADDR_VAR 0 13
14509: PUSH
14510: LD_VAR 0 4
14514: PUSH
14515: LD_INT 2
14517: ARRAY
14518: ST_TO_ADDR
// if h + 7 < height then
14519: LD_VAR 0 13
14523: PUSH
14524: LD_INT 7
14526: PLUS
14527: PUSH
14528: LD_VAR 0 15
14532: LESS
14533: IFFALSE 14562
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14535: LD_ADDR_VAR 0 18
14539: PUSH
14540: LD_INT 7
14542: PUSH
14543: LD_INT 28
14545: PUSH
14546: LD_INT 45
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: PUSH
14554: LD_VAR 0 12
14558: ARRAY
14559: ST_TO_ADDR
// break ;
14560: GO 14564
// end ; end ; end ;
14562: GO 14393
14564: POP
14565: POP
// end ; if not weapon then
14566: LD_VAR 0 18
14570: NOT
14571: IFFALSE 14631
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14573: LD_ADDR_VAR 0 5
14577: PUSH
14578: LD_VAR 0 5
14582: PUSH
14583: LD_INT 11
14585: PUSH
14586: LD_INT 30
14588: PUSH
14589: LD_INT 49
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: LIST
14596: DIFF
14597: ST_TO_ADDR
// if not list then
14598: LD_VAR 0 5
14602: NOT
14603: IFFALSE 14607
// exit ;
14605: GO 14753
// weapon := list [ rand ( 1 , list ) ] ;
14607: LD_ADDR_VAR 0 18
14611: PUSH
14612: LD_VAR 0 5
14616: PUSH
14617: LD_INT 1
14619: PPUSH
14620: LD_VAR 0 5
14624: PPUSH
14625: CALL_OW 12
14629: ARRAY
14630: ST_TO_ADDR
// end ; if weapon then
14631: LD_VAR 0 18
14635: IFFALSE 14753
// begin tmp := CostOfWeapon ( weapon ) ;
14637: LD_ADDR_VAR 0 14
14641: PUSH
14642: LD_VAR 0 18
14646: PPUSH
14647: CALL_OW 451
14651: ST_TO_ADDR
// j := GetBase ( tower ) ;
14652: LD_ADDR_VAR 0 9
14656: PUSH
14657: LD_VAR 0 1
14661: PPUSH
14662: CALL_OW 274
14666: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14667: LD_VAR 0 9
14671: PPUSH
14672: LD_INT 1
14674: PPUSH
14675: CALL_OW 275
14679: PUSH
14680: LD_VAR 0 14
14684: PUSH
14685: LD_INT 1
14687: ARRAY
14688: GREATEREQUAL
14689: IFFALSE 14715
14691: PUSH
14692: LD_VAR 0 9
14696: PPUSH
14697: LD_INT 2
14699: PPUSH
14700: CALL_OW 275
14704: PUSH
14705: LD_VAR 0 14
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: GREATEREQUAL
14714: AND
14715: IFFALSE 14741
14717: PUSH
14718: LD_VAR 0 9
14722: PPUSH
14723: LD_INT 3
14725: PPUSH
14726: CALL_OW 275
14730: PUSH
14731: LD_VAR 0 14
14735: PUSH
14736: LD_INT 3
14738: ARRAY
14739: GREATEREQUAL
14740: AND
14741: IFFALSE 14753
// result := weapon ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_VAR 0 18
14752: ST_TO_ADDR
// end ; end ;
14753: LD_VAR 0 3
14757: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14758: LD_INT 0
14760: PPUSH
14761: PPUSH
// result := true ;
14762: LD_ADDR_VAR 0 3
14766: PUSH
14767: LD_INT 1
14769: ST_TO_ADDR
// if array1 = array2 then
14770: LD_VAR 0 1
14774: PUSH
14775: LD_VAR 0 2
14779: EQUAL
14780: IFFALSE 14840
// begin for i = 1 to array1 do
14782: LD_ADDR_VAR 0 4
14786: PUSH
14787: DOUBLE
14788: LD_INT 1
14790: DEC
14791: ST_TO_ADDR
14792: LD_VAR 0 1
14796: PUSH
14797: FOR_TO
14798: IFFALSE 14836
// if array1 [ i ] <> array2 [ i ] then
14800: LD_VAR 0 1
14804: PUSH
14805: LD_VAR 0 4
14809: ARRAY
14810: PUSH
14811: LD_VAR 0 2
14815: PUSH
14816: LD_VAR 0 4
14820: ARRAY
14821: NONEQUAL
14822: IFFALSE 14834
// begin result := false ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// break ;
14832: GO 14836
// end ;
14834: GO 14797
14836: POP
14837: POP
// end else
14838: GO 14848
// result := false ;
14840: LD_ADDR_VAR 0 3
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// end ;
14848: LD_VAR 0 3
14852: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14853: LD_INT 0
14855: PPUSH
14856: PPUSH
// if not array1 or not array2 then
14857: LD_VAR 0 1
14861: NOT
14862: IFTRUE 14871
14864: PUSH
14865: LD_VAR 0 2
14869: NOT
14870: OR
14871: IFFALSE 14875
// exit ;
14873: GO 14939
// result := true ;
14875: LD_ADDR_VAR 0 3
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// for i = 1 to array1 do
14883: LD_ADDR_VAR 0 4
14887: PUSH
14888: DOUBLE
14889: LD_INT 1
14891: DEC
14892: ST_TO_ADDR
14893: LD_VAR 0 1
14897: PUSH
14898: FOR_TO
14899: IFFALSE 14937
// if array1 [ i ] <> array2 [ i ] then
14901: LD_VAR 0 1
14905: PUSH
14906: LD_VAR 0 4
14910: ARRAY
14911: PUSH
14912: LD_VAR 0 2
14916: PUSH
14917: LD_VAR 0 4
14921: ARRAY
14922: NONEQUAL
14923: IFFALSE 14935
// begin result := false ;
14925: LD_ADDR_VAR 0 3
14929: PUSH
14930: LD_INT 0
14932: ST_TO_ADDR
// break ;
14933: GO 14937
// end ;
14935: GO 14898
14937: POP
14938: POP
// end ;
14939: LD_VAR 0 3
14943: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14944: LD_INT 0
14946: PPUSH
14947: PPUSH
14948: PPUSH
// pom := GetBase ( fac ) ;
14949: LD_ADDR_VAR 0 5
14953: PUSH
14954: LD_VAR 0 1
14958: PPUSH
14959: CALL_OW 274
14963: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14964: LD_ADDR_VAR 0 4
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 1
14976: ARRAY
14977: PPUSH
14978: LD_VAR 0 2
14982: PUSH
14983: LD_INT 2
14985: ARRAY
14986: PPUSH
14987: LD_VAR 0 2
14991: PUSH
14992: LD_INT 3
14994: ARRAY
14995: PPUSH
14996: LD_VAR 0 2
15000: PUSH
15001: LD_INT 4
15003: ARRAY
15004: PPUSH
15005: CALL_OW 449
15009: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: LD_VAR 0 5
15019: PPUSH
15020: LD_INT 1
15022: PPUSH
15023: CALL_OW 275
15027: PUSH
15028: LD_VAR 0 4
15032: PUSH
15033: LD_INT 1
15035: ARRAY
15036: GREATEREQUAL
15037: IFFALSE 15063
15039: PUSH
15040: LD_VAR 0 5
15044: PPUSH
15045: LD_INT 2
15047: PPUSH
15048: CALL_OW 275
15052: PUSH
15053: LD_VAR 0 4
15057: PUSH
15058: LD_INT 2
15060: ARRAY
15061: GREATEREQUAL
15062: AND
15063: IFFALSE 15089
15065: PUSH
15066: LD_VAR 0 5
15070: PPUSH
15071: LD_INT 3
15073: PPUSH
15074: CALL_OW 275
15078: PUSH
15079: LD_VAR 0 4
15083: PUSH
15084: LD_INT 3
15086: ARRAY
15087: GREATEREQUAL
15088: AND
15089: ST_TO_ADDR
// end ;
15090: LD_VAR 0 3
15094: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
15095: LD_INT 0
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
// pom := GetBase ( building ) ;
15101: LD_ADDR_VAR 0 3
15105: PUSH
15106: LD_VAR 0 1
15110: PPUSH
15111: CALL_OW 274
15115: ST_TO_ADDR
// if not pom then
15116: LD_VAR 0 3
15120: NOT
15121: IFFALSE 15125
// exit ;
15123: GO 15299
// btype := GetBType ( building ) ;
15125: LD_ADDR_VAR 0 5
15129: PUSH
15130: LD_VAR 0 1
15134: PPUSH
15135: CALL_OW 266
15139: ST_TO_ADDR
// if btype = b_armoury then
15140: LD_VAR 0 5
15144: PUSH
15145: LD_INT 4
15147: EQUAL
15148: IFFALSE 15158
// btype := b_barracks ;
15150: LD_ADDR_VAR 0 5
15154: PUSH
15155: LD_INT 5
15157: ST_TO_ADDR
// if btype = b_depot then
15158: LD_VAR 0 5
15162: PUSH
15163: LD_INT 0
15165: EQUAL
15166: IFFALSE 15176
// btype := b_warehouse ;
15168: LD_ADDR_VAR 0 5
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if btype = b_workshop then
15176: LD_VAR 0 5
15180: PUSH
15181: LD_INT 2
15183: EQUAL
15184: IFFALSE 15194
// btype := b_factory ;
15186: LD_ADDR_VAR 0 5
15190: PUSH
15191: LD_INT 3
15193: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15194: LD_ADDR_VAR 0 4
15198: PUSH
15199: LD_VAR 0 5
15203: PPUSH
15204: LD_VAR 0 1
15208: PPUSH
15209: CALL_OW 248
15213: PPUSH
15214: CALL_OW 450
15218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15219: LD_ADDR_VAR 0 2
15223: PUSH
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_INT 1
15231: PPUSH
15232: CALL_OW 275
15236: PUSH
15237: LD_VAR 0 4
15241: PUSH
15242: LD_INT 1
15244: ARRAY
15245: GREATEREQUAL
15246: IFFALSE 15272
15248: PUSH
15249: LD_VAR 0 3
15253: PPUSH
15254: LD_INT 2
15256: PPUSH
15257: CALL_OW 275
15261: PUSH
15262: LD_VAR 0 4
15266: PUSH
15267: LD_INT 2
15269: ARRAY
15270: GREATEREQUAL
15271: AND
15272: IFFALSE 15298
15274: PUSH
15275: LD_VAR 0 3
15279: PPUSH
15280: LD_INT 3
15282: PPUSH
15283: CALL_OW 275
15287: PUSH
15288: LD_VAR 0 4
15292: PUSH
15293: LD_INT 3
15295: ARRAY
15296: GREATEREQUAL
15297: AND
15298: ST_TO_ADDR
// end ;
15299: LD_VAR 0 2
15303: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15304: LD_INT 0
15306: PPUSH
15307: PPUSH
15308: PPUSH
// pom := GetBase ( building ) ;
15309: LD_ADDR_VAR 0 4
15313: PUSH
15314: LD_VAR 0 1
15318: PPUSH
15319: CALL_OW 274
15323: ST_TO_ADDR
// if not pom then
15324: LD_VAR 0 4
15328: NOT
15329: IFFALSE 15333
// exit ;
15331: GO 15438
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15333: LD_ADDR_VAR 0 5
15337: PUSH
15338: LD_VAR 0 2
15342: PPUSH
15343: LD_VAR 0 1
15347: PPUSH
15348: CALL_OW 248
15352: PPUSH
15353: CALL_OW 450
15357: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15358: LD_ADDR_VAR 0 3
15362: PUSH
15363: LD_VAR 0 4
15367: PPUSH
15368: LD_INT 1
15370: PPUSH
15371: CALL_OW 275
15375: PUSH
15376: LD_VAR 0 5
15380: PUSH
15381: LD_INT 1
15383: ARRAY
15384: GREATEREQUAL
15385: IFFALSE 15411
15387: PUSH
15388: LD_VAR 0 4
15392: PPUSH
15393: LD_INT 2
15395: PPUSH
15396: CALL_OW 275
15400: PUSH
15401: LD_VAR 0 5
15405: PUSH
15406: LD_INT 2
15408: ARRAY
15409: GREATEREQUAL
15410: AND
15411: IFFALSE 15437
15413: PUSH
15414: LD_VAR 0 4
15418: PPUSH
15419: LD_INT 3
15421: PPUSH
15422: CALL_OW 275
15426: PUSH
15427: LD_VAR 0 5
15431: PUSH
15432: LD_INT 3
15434: ARRAY
15435: GREATEREQUAL
15436: AND
15437: ST_TO_ADDR
// end ;
15438: LD_VAR 0 3
15442: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15443: LD_INT 0
15445: PPUSH
15446: PPUSH
15447: PPUSH
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
15454: PPUSH
15455: PPUSH
// result := false ;
15456: LD_ADDR_VAR 0 8
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15464: LD_VAR 0 5
15468: NOT
15469: IFTRUE 15478
15471: PUSH
15472: LD_VAR 0 1
15476: NOT
15477: OR
15478: IFTRUE 15487
15480: PUSH
15481: LD_VAR 0 2
15485: NOT
15486: OR
15487: IFTRUE 15496
15489: PUSH
15490: LD_VAR 0 3
15494: NOT
15495: OR
15496: IFFALSE 15500
// exit ;
15498: GO 16326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15500: LD_ADDR_VAR 0 14
15504: PUSH
15505: LD_VAR 0 1
15509: PPUSH
15510: LD_VAR 0 2
15514: PPUSH
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_VAR 0 4
15524: PPUSH
15525: LD_VAR 0 5
15529: PUSH
15530: LD_INT 1
15532: ARRAY
15533: PPUSH
15534: CALL_OW 248
15538: PPUSH
15539: LD_INT 0
15541: PPUSH
15542: CALL 17607 0 6
15546: ST_TO_ADDR
// if not hexes then
15547: LD_VAR 0 14
15551: NOT
15552: IFFALSE 15556
// exit ;
15554: GO 16326
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15556: LD_ADDR_VAR 0 17
15560: PUSH
15561: LD_VAR 0 5
15565: PPUSH
15566: LD_INT 22
15568: PUSH
15569: LD_VAR 0 13
15573: PPUSH
15574: CALL_OW 255
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 2
15585: PUSH
15586: LD_INT 30
15588: PUSH
15589: LD_INT 0
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 30
15598: PUSH
15599: LD_INT 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 72
15619: ST_TO_ADDR
// for i = 1 to hexes do
15620: LD_ADDR_VAR 0 9
15624: PUSH
15625: DOUBLE
15626: LD_INT 1
15628: DEC
15629: ST_TO_ADDR
15630: LD_VAR 0 14
15634: PUSH
15635: FOR_TO
15636: IFFALSE 16324
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15638: LD_ADDR_VAR 0 13
15642: PUSH
15643: LD_VAR 0 14
15647: PUSH
15648: LD_VAR 0 9
15652: ARRAY
15653: PUSH
15654: LD_INT 1
15656: ARRAY
15657: PPUSH
15658: LD_VAR 0 14
15662: PUSH
15663: LD_VAR 0 9
15667: ARRAY
15668: PUSH
15669: LD_INT 2
15671: ARRAY
15672: PPUSH
15673: CALL_OW 428
15677: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15678: LD_VAR 0 14
15682: PUSH
15683: LD_VAR 0 9
15687: ARRAY
15688: PUSH
15689: LD_INT 1
15691: ARRAY
15692: PPUSH
15693: LD_VAR 0 14
15697: PUSH
15698: LD_VAR 0 9
15702: ARRAY
15703: PUSH
15704: LD_INT 2
15706: ARRAY
15707: PPUSH
15708: CALL_OW 351
15712: IFTRUE 15751
15714: PUSH
15715: LD_VAR 0 14
15719: PUSH
15720: LD_VAR 0 9
15724: ARRAY
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: PPUSH
15730: LD_VAR 0 14
15734: PUSH
15735: LD_VAR 0 9
15739: ARRAY
15740: PUSH
15741: LD_INT 2
15743: ARRAY
15744: PPUSH
15745: CALL_OW 488
15749: NOT
15750: OR
15751: IFTRUE 15768
15753: PUSH
15754: LD_VAR 0 13
15758: PPUSH
15759: CALL_OW 247
15763: PUSH
15764: LD_INT 3
15766: EQUAL
15767: OR
15768: IFFALSE 15774
// exit ;
15770: POP
15771: POP
15772: GO 16326
// if not tmp then
15774: LD_VAR 0 13
15778: NOT
15779: IFFALSE 15783
// continue ;
15781: GO 15635
// result := true ;
15783: LD_ADDR_VAR 0 8
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15791: LD_VAR 0 6
15795: IFFALSE 15812
15797: PUSH
15798: LD_VAR 0 13
15802: PPUSH
15803: CALL_OW 247
15807: PUSH
15808: LD_INT 2
15810: EQUAL
15811: AND
15812: IFFALSE 15829
15814: PUSH
15815: LD_VAR 0 13
15819: PPUSH
15820: CALL_OW 263
15824: PUSH
15825: LD_INT 1
15827: EQUAL
15828: AND
15829: IFFALSE 15993
// begin if IsDrivenBy ( tmp ) then
15831: LD_VAR 0 13
15835: PPUSH
15836: CALL_OW 311
15840: IFFALSE 15844
// continue ;
15842: GO 15635
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15844: LD_VAR 0 6
15848: PPUSH
15849: LD_INT 3
15851: PUSH
15852: LD_INT 60
15854: PUSH
15855: EMPTY
15856: LIST
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: LD_INT 3
15864: PUSH
15865: LD_INT 55
15867: PUSH
15868: EMPTY
15869: LIST
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PPUSH
15879: CALL_OW 72
15883: IFFALSE 15991
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15885: LD_ADDR_VAR 0 18
15889: PUSH
15890: LD_VAR 0 6
15894: PPUSH
15895: LD_INT 3
15897: PUSH
15898: LD_INT 60
15900: PUSH
15901: EMPTY
15902: LIST
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: LD_INT 55
15913: PUSH
15914: EMPTY
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: EMPTY
15922: LIST
15923: LIST
15924: PPUSH
15925: CALL_OW 72
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: ST_TO_ADDR
// if IsInUnit ( driver ) then
15934: LD_VAR 0 18
15938: PPUSH
15939: CALL_OW 310
15943: IFFALSE 15954
// ComExit ( driver ) ;
15945: LD_VAR 0 18
15949: PPUSH
15950: CALL 41607 0 1
// AddComEnterUnit ( driver , tmp ) ;
15954: LD_VAR 0 18
15958: PPUSH
15959: LD_VAR 0 13
15963: PPUSH
15964: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15968: LD_VAR 0 18
15972: PPUSH
15973: LD_VAR 0 7
15977: PPUSH
15978: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15982: LD_VAR 0 18
15986: PPUSH
15987: CALL_OW 181
// end ; continue ;
15991: GO 15635
// end ; if not cleaners or not tmp in cleaners then
15993: LD_VAR 0 6
15997: NOT
15998: IFTRUE 16013
16000: PUSH
16001: LD_VAR 0 13
16005: PUSH
16006: LD_VAR 0 6
16010: IN
16011: NOT
16012: OR
16013: IFFALSE 16322
// begin if dep then
16015: LD_VAR 0 17
16019: IFFALSE 16155
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
16021: LD_ADDR_VAR 0 16
16025: PUSH
16026: LD_VAR 0 17
16030: PUSH
16031: LD_INT 1
16033: ARRAY
16034: PPUSH
16035: CALL_OW 250
16039: PPUSH
16040: LD_VAR 0 17
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: PPUSH
16049: CALL_OW 254
16053: PPUSH
16054: LD_INT 5
16056: PPUSH
16057: CALL_OW 272
16061: PUSH
16062: LD_VAR 0 17
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: CALL_OW 251
16075: PPUSH
16076: LD_VAR 0 17
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: CALL_OW 254
16089: PPUSH
16090: LD_INT 5
16092: PPUSH
16093: CALL_OW 273
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
16102: LD_VAR 0 16
16106: PUSH
16107: LD_INT 1
16109: ARRAY
16110: PPUSH
16111: LD_VAR 0 16
16115: PUSH
16116: LD_INT 2
16118: ARRAY
16119: PPUSH
16120: CALL_OW 488
16124: IFFALSE 16155
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
16126: LD_VAR 0 13
16130: PPUSH
16131: LD_VAR 0 16
16135: PUSH
16136: LD_INT 1
16138: ARRAY
16139: PPUSH
16140: LD_VAR 0 16
16144: PUSH
16145: LD_INT 2
16147: ARRAY
16148: PPUSH
16149: CALL_OW 111
// continue ;
16153: GO 15635
// end ; end ; r := GetDir ( tmp ) ;
16155: LD_ADDR_VAR 0 15
16159: PUSH
16160: LD_VAR 0 13
16164: PPUSH
16165: CALL_OW 254
16169: ST_TO_ADDR
// if r = 5 then
16170: LD_VAR 0 15
16174: PUSH
16175: LD_INT 5
16177: EQUAL
16178: IFFALSE 16188
// r := 0 ;
16180: LD_ADDR_VAR 0 15
16184: PUSH
16185: LD_INT 0
16187: ST_TO_ADDR
// for j = r to 5 do
16188: LD_ADDR_VAR 0 10
16192: PUSH
16193: DOUBLE
16194: LD_VAR 0 15
16198: DEC
16199: ST_TO_ADDR
16200: LD_INT 5
16202: PUSH
16203: FOR_TO
16204: IFFALSE 16320
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16206: LD_ADDR_VAR 0 11
16210: PUSH
16211: LD_VAR 0 13
16215: PPUSH
16216: CALL_OW 250
16220: PPUSH
16221: LD_VAR 0 10
16225: PPUSH
16226: LD_INT 2
16228: PPUSH
16229: CALL_OW 272
16233: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16234: LD_ADDR_VAR 0 12
16238: PUSH
16239: LD_VAR 0 13
16243: PPUSH
16244: CALL_OW 251
16248: PPUSH
16249: LD_VAR 0 10
16253: PPUSH
16254: LD_INT 2
16256: PPUSH
16257: CALL_OW 273
16261: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16262: LD_VAR 0 11
16266: PPUSH
16267: LD_VAR 0 12
16271: PPUSH
16272: CALL_OW 488
16276: IFFALSE 16295
16278: PUSH
16279: LD_VAR 0 11
16283: PPUSH
16284: LD_VAR 0 12
16288: PPUSH
16289: CALL_OW 428
16293: NOT
16294: AND
16295: IFFALSE 16318
// begin ComMoveXY ( tmp , _x , _y ) ;
16297: LD_VAR 0 13
16301: PPUSH
16302: LD_VAR 0 11
16306: PPUSH
16307: LD_VAR 0 12
16311: PPUSH
16312: CALL_OW 111
// break ;
16316: GO 16320
// end ; end ;
16318: GO 16203
16320: POP
16321: POP
// end ; end ;
16322: GO 15635
16324: POP
16325: POP
// end ;
16326: LD_VAR 0 8
16330: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16331: LD_INT 0
16333: PPUSH
// result := true ;
16334: LD_ADDR_VAR 0 3
16338: PUSH
16339: LD_INT 1
16341: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16342: LD_VAR 0 2
16346: PUSH
16347: LD_INT 24
16349: DOUBLE
16350: EQUAL
16351: IFTRUE 16361
16353: LD_INT 33
16355: DOUBLE
16356: EQUAL
16357: IFTRUE 16361
16359: GO 16386
16361: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16362: LD_ADDR_VAR 0 3
16366: PUSH
16367: LD_INT 32
16369: PPUSH
16370: LD_VAR 0 1
16374: PPUSH
16375: CALL_OW 321
16379: PUSH
16380: LD_INT 2
16382: EQUAL
16383: ST_TO_ADDR
16384: GO 16702
16386: LD_INT 20
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16419
16394: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: LD_INT 6
16402: PPUSH
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL_OW 321
16412: PUSH
16413: LD_INT 2
16415: EQUAL
16416: ST_TO_ADDR
16417: GO 16702
16419: LD_INT 22
16421: DOUBLE
16422: EQUAL
16423: IFTRUE 16433
16425: LD_INT 36
16427: DOUBLE
16428: EQUAL
16429: IFTRUE 16433
16431: GO 16458
16433: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16434: LD_ADDR_VAR 0 3
16438: PUSH
16439: LD_INT 15
16441: PPUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 321
16451: PUSH
16452: LD_INT 2
16454: EQUAL
16455: ST_TO_ADDR
16456: GO 16702
16458: LD_INT 30
16460: DOUBLE
16461: EQUAL
16462: IFTRUE 16466
16464: GO 16491
16466: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16467: LD_ADDR_VAR 0 3
16471: PUSH
16472: LD_INT 20
16474: PPUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 321
16484: PUSH
16485: LD_INT 2
16487: EQUAL
16488: ST_TO_ADDR
16489: GO 16702
16491: LD_INT 28
16493: DOUBLE
16494: EQUAL
16495: IFTRUE 16505
16497: LD_INT 21
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16530
16505: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16506: LD_ADDR_VAR 0 3
16510: PUSH
16511: LD_INT 21
16513: PPUSH
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 321
16523: PUSH
16524: LD_INT 2
16526: EQUAL
16527: ST_TO_ADDR
16528: GO 16702
16530: LD_INT 16
16532: DOUBLE
16533: EQUAL
16534: IFTRUE 16538
16536: GO 16563
16538: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16539: LD_ADDR_VAR 0 3
16543: PUSH
16544: LD_INT 84
16546: PPUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 321
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: ST_TO_ADDR
16561: GO 16702
16563: LD_INT 19
16565: DOUBLE
16566: EQUAL
16567: IFTRUE 16577
16569: LD_INT 23
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16602
16577: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16578: LD_ADDR_VAR 0 3
16582: PUSH
16583: LD_INT 83
16585: PPUSH
16586: LD_VAR 0 1
16590: PPUSH
16591: CALL_OW 321
16595: PUSH
16596: LD_INT 2
16598: EQUAL
16599: ST_TO_ADDR
16600: GO 16702
16602: LD_INT 17
16604: DOUBLE
16605: EQUAL
16606: IFTRUE 16610
16608: GO 16635
16610: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16611: LD_ADDR_VAR 0 3
16615: PUSH
16616: LD_INT 39
16618: PPUSH
16619: LD_VAR 0 1
16623: PPUSH
16624: CALL_OW 321
16628: PUSH
16629: LD_INT 2
16631: EQUAL
16632: ST_TO_ADDR
16633: GO 16702
16635: LD_INT 18
16637: DOUBLE
16638: EQUAL
16639: IFTRUE 16643
16641: GO 16668
16643: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16644: LD_ADDR_VAR 0 3
16648: PUSH
16649: LD_INT 40
16651: PPUSH
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 321
16661: PUSH
16662: LD_INT 2
16664: EQUAL
16665: ST_TO_ADDR
16666: GO 16702
16668: LD_INT 27
16670: DOUBLE
16671: EQUAL
16672: IFTRUE 16676
16674: GO 16701
16676: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16677: LD_ADDR_VAR 0 3
16681: PUSH
16682: LD_INT 35
16684: PPUSH
16685: LD_VAR 0 1
16689: PPUSH
16690: CALL_OW 321
16694: PUSH
16695: LD_INT 2
16697: EQUAL
16698: ST_TO_ADDR
16699: GO 16702
16701: POP
// end ;
16702: LD_VAR 0 3
16706: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16707: LD_INT 0
16709: PPUSH
16710: PPUSH
16711: PPUSH
16712: PPUSH
16713: PPUSH
16714: PPUSH
16715: PPUSH
16716: PPUSH
16717: PPUSH
16718: PPUSH
16719: PPUSH
// result := false ;
16720: LD_ADDR_VAR 0 6
16724: PUSH
16725: LD_INT 0
16727: ST_TO_ADDR
// if btype = b_depot then
16728: LD_VAR 0 2
16732: PUSH
16733: LD_INT 0
16735: EQUAL
16736: IFFALSE 16748
// begin result := true ;
16738: LD_ADDR_VAR 0 6
16742: PUSH
16743: LD_INT 1
16745: ST_TO_ADDR
// exit ;
16746: GO 17602
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16748: LD_VAR 0 1
16752: NOT
16753: IFTRUE 16778
16755: PUSH
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 266
16765: PUSH
16766: LD_INT 0
16768: PUSH
16769: LD_INT 1
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: IN
16776: NOT
16777: OR
16778: IFTRUE 16787
16780: PUSH
16781: LD_VAR 0 2
16785: NOT
16786: OR
16787: IFTRUE 16823
16789: PUSH
16790: LD_VAR 0 5
16794: PUSH
16795: LD_INT 0
16797: PUSH
16798: LD_INT 1
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: LD_INT 4
16809: PUSH
16810: LD_INT 5
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: IN
16821: NOT
16822: OR
16823: IFTRUE 16842
16825: PUSH
16826: LD_VAR 0 3
16830: PPUSH
16831: LD_VAR 0 4
16835: PPUSH
16836: CALL_OW 488
16840: NOT
16841: OR
16842: IFFALSE 16846
// exit ;
16844: GO 17602
// side := GetSide ( depot ) ;
16846: LD_ADDR_VAR 0 9
16850: PUSH
16851: LD_VAR 0 1
16855: PPUSH
16856: CALL_OW 255
16860: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16861: LD_VAR 0 9
16865: PPUSH
16866: LD_VAR 0 2
16870: PPUSH
16871: CALL 16331 0 2
16875: NOT
16876: IFFALSE 16880
// exit ;
16878: GO 17602
// pom := GetBase ( depot ) ;
16880: LD_ADDR_VAR 0 10
16884: PUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 274
16894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16895: LD_ADDR_VAR 0 11
16899: PUSH
16900: LD_VAR 0 2
16904: PPUSH
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 248
16914: PPUSH
16915: CALL_OW 450
16919: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16920: LD_VAR 0 10
16924: PPUSH
16925: LD_INT 1
16927: PPUSH
16928: CALL_OW 275
16932: PUSH
16933: LD_VAR 0 11
16937: PUSH
16938: LD_INT 1
16940: ARRAY
16941: GREATEREQUAL
16942: IFFALSE 16968
16944: PUSH
16945: LD_VAR 0 10
16949: PPUSH
16950: LD_INT 2
16952: PPUSH
16953: CALL_OW 275
16957: PUSH
16958: LD_VAR 0 11
16962: PUSH
16963: LD_INT 2
16965: ARRAY
16966: GREATEREQUAL
16967: AND
16968: IFFALSE 16994
16970: PUSH
16971: LD_VAR 0 10
16975: PPUSH
16976: LD_INT 3
16978: PPUSH
16979: CALL_OW 275
16983: PUSH
16984: LD_VAR 0 11
16988: PUSH
16989: LD_INT 3
16991: ARRAY
16992: GREATEREQUAL
16993: AND
16994: NOT
16995: IFFALSE 16999
// exit ;
16997: GO 17602
// if GetBType ( depot ) = b_depot then
16999: LD_VAR 0 1
17003: PPUSH
17004: CALL_OW 266
17008: PUSH
17009: LD_INT 0
17011: EQUAL
17012: IFFALSE 17024
// dist := 28 else
17014: LD_ADDR_VAR 0 14
17018: PUSH
17019: LD_INT 28
17021: ST_TO_ADDR
17022: GO 17032
// dist := 36 ;
17024: LD_ADDR_VAR 0 14
17028: PUSH
17029: LD_INT 36
17031: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
17032: LD_VAR 0 1
17036: PPUSH
17037: LD_VAR 0 3
17041: PPUSH
17042: LD_VAR 0 4
17046: PPUSH
17047: CALL_OW 297
17051: PUSH
17052: LD_VAR 0 14
17056: GREATER
17057: IFFALSE 17061
// exit ;
17059: GO 17602
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
17061: LD_ADDR_VAR 0 12
17065: PUSH
17066: LD_VAR 0 2
17070: PPUSH
17071: LD_VAR 0 3
17075: PPUSH
17076: LD_VAR 0 4
17080: PPUSH
17081: LD_VAR 0 5
17085: PPUSH
17086: LD_VAR 0 1
17090: PPUSH
17091: CALL_OW 248
17095: PPUSH
17096: LD_INT 0
17098: PPUSH
17099: CALL 17607 0 6
17103: ST_TO_ADDR
// if not hexes then
17104: LD_VAR 0 12
17108: NOT
17109: IFFALSE 17113
// exit ;
17111: GO 17602
// hex := GetHexInfo ( x , y ) ;
17113: LD_ADDR_VAR 0 15
17117: PUSH
17118: LD_VAR 0 3
17122: PPUSH
17123: LD_VAR 0 4
17127: PPUSH
17128: CALL_OW 546
17132: ST_TO_ADDR
// if hex [ 1 ] then
17133: LD_VAR 0 15
17137: PUSH
17138: LD_INT 1
17140: ARRAY
17141: IFFALSE 17145
// exit ;
17143: GO 17602
// height := hex [ 2 ] ;
17145: LD_ADDR_VAR 0 13
17149: PUSH
17150: LD_VAR 0 15
17154: PUSH
17155: LD_INT 2
17157: ARRAY
17158: ST_TO_ADDR
// for i = 1 to hexes do
17159: LD_ADDR_VAR 0 7
17163: PUSH
17164: DOUBLE
17165: LD_INT 1
17167: DEC
17168: ST_TO_ADDR
17169: LD_VAR 0 12
17173: PUSH
17174: FOR_TO
17175: IFFALSE 17519
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17177: LD_VAR 0 12
17181: PUSH
17182: LD_VAR 0 7
17186: ARRAY
17187: PUSH
17188: LD_INT 1
17190: ARRAY
17191: PPUSH
17192: LD_VAR 0 12
17196: PUSH
17197: LD_VAR 0 7
17201: ARRAY
17202: PUSH
17203: LD_INT 2
17205: ARRAY
17206: PPUSH
17207: CALL_OW 488
17211: NOT
17212: IFTRUE 17254
17214: PUSH
17215: LD_VAR 0 12
17219: PUSH
17220: LD_VAR 0 7
17224: ARRAY
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PPUSH
17230: LD_VAR 0 12
17234: PUSH
17235: LD_VAR 0 7
17239: ARRAY
17240: PUSH
17241: LD_INT 2
17243: ARRAY
17244: PPUSH
17245: CALL_OW 428
17249: PUSH
17250: LD_INT 0
17252: GREATER
17253: OR
17254: IFTRUE 17292
17256: PUSH
17257: LD_VAR 0 12
17261: PUSH
17262: LD_VAR 0 7
17266: ARRAY
17267: PUSH
17268: LD_INT 1
17270: ARRAY
17271: PPUSH
17272: LD_VAR 0 12
17276: PUSH
17277: LD_VAR 0 7
17281: ARRAY
17282: PUSH
17283: LD_INT 2
17285: ARRAY
17286: PPUSH
17287: CALL_OW 351
17291: OR
17292: IFFALSE 17298
// exit ;
17294: POP
17295: POP
17296: GO 17602
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17298: LD_ADDR_VAR 0 8
17302: PUSH
17303: LD_VAR 0 12
17307: PUSH
17308: LD_VAR 0 7
17312: ARRAY
17313: PUSH
17314: LD_INT 1
17316: ARRAY
17317: PPUSH
17318: LD_VAR 0 12
17322: PUSH
17323: LD_VAR 0 7
17327: ARRAY
17328: PUSH
17329: LD_INT 2
17331: ARRAY
17332: PPUSH
17333: CALL_OW 546
17337: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17338: LD_VAR 0 8
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: IFTRUE 17368
17348: PUSH
17349: LD_VAR 0 8
17353: PUSH
17354: LD_INT 2
17356: ARRAY
17357: PUSH
17358: LD_VAR 0 13
17362: PUSH
17363: LD_INT 2
17365: PLUS
17366: GREATER
17367: OR
17368: IFTRUE 17390
17370: PUSH
17371: LD_VAR 0 8
17375: PUSH
17376: LD_INT 2
17378: ARRAY
17379: PUSH
17380: LD_VAR 0 13
17384: PUSH
17385: LD_INT 2
17387: MINUS
17388: LESS
17389: OR
17390: IFTRUE 17458
17392: PUSH
17393: LD_VAR 0 8
17397: PUSH
17398: LD_INT 3
17400: ARRAY
17401: PUSH
17402: LD_INT 0
17404: PUSH
17405: LD_INT 8
17407: PUSH
17408: LD_INT 9
17410: PUSH
17411: LD_INT 10
17413: PUSH
17414: LD_INT 11
17416: PUSH
17417: LD_INT 12
17419: PUSH
17420: LD_INT 13
17422: PUSH
17423: LD_INT 16
17425: PUSH
17426: LD_INT 17
17428: PUSH
17429: LD_INT 18
17431: PUSH
17432: LD_INT 19
17434: PUSH
17435: LD_INT 20
17437: PUSH
17438: LD_INT 21
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: IN
17456: NOT
17457: OR
17458: IFTRUE 17471
17460: PUSH
17461: LD_VAR 0 8
17465: PUSH
17466: LD_INT 5
17468: ARRAY
17469: NOT
17470: OR
17471: IFTRUE 17511
17473: PUSH
17474: LD_VAR 0 8
17478: PUSH
17479: LD_INT 6
17481: ARRAY
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: LD_INT 2
17488: PUSH
17489: LD_INT 7
17491: PUSH
17492: LD_INT 9
17494: PUSH
17495: LD_INT 10
17497: PUSH
17498: LD_INT 11
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: IN
17509: NOT
17510: OR
17511: IFFALSE 17517
// exit ;
17513: POP
17514: POP
17515: GO 17602
// end ;
17517: GO 17174
17519: POP
17520: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17521: LD_VAR 0 9
17525: PPUSH
17526: LD_VAR 0 3
17530: PPUSH
17531: LD_VAR 0 4
17535: PPUSH
17536: LD_INT 20
17538: PPUSH
17539: CALL 9421 0 4
17543: PUSH
17544: LD_INT 4
17546: ARRAY
17547: IFFALSE 17551
// exit ;
17549: GO 17602
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17551: LD_VAR 0 2
17555: PUSH
17556: LD_INT 29
17558: PUSH
17559: LD_INT 30
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: IN
17566: IFFALSE 17590
17568: PUSH
17569: LD_VAR 0 3
17573: PPUSH
17574: LD_VAR 0 4
17578: PPUSH
17579: LD_VAR 0 9
17583: PPUSH
17584: CALL_OW 440
17588: NOT
17589: AND
17590: IFFALSE 17594
// exit ;
17592: GO 17602
// result := true ;
17594: LD_ADDR_VAR 0 6
17598: PUSH
17599: LD_INT 1
17601: ST_TO_ADDR
// end ;
17602: LD_VAR 0 6
17606: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
17622: PPUSH
17623: PPUSH
17624: PPUSH
17625: PPUSH
17626: PPUSH
17627: PPUSH
17628: PPUSH
17629: PPUSH
17630: PPUSH
17631: PPUSH
17632: PPUSH
17633: PPUSH
17634: PPUSH
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
17640: PPUSH
17641: PPUSH
17642: PPUSH
17643: PPUSH
17644: PPUSH
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
17651: PPUSH
17652: PPUSH
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
17660: PPUSH
17661: PPUSH
17662: PPUSH
17663: PPUSH
17664: PPUSH
17665: PPUSH
17666: PPUSH
// result = [ ] ;
17667: LD_ADDR_VAR 0 7
17671: PUSH
17672: EMPTY
17673: ST_TO_ADDR
// temp_list = [ ] ;
17674: LD_ADDR_VAR 0 9
17678: PUSH
17679: EMPTY
17680: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17681: LD_VAR 0 4
17685: PUSH
17686: LD_INT 0
17688: PUSH
17689: LD_INT 1
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: LD_INT 3
17697: PUSH
17698: LD_INT 4
17700: PUSH
17701: LD_INT 5
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: IN
17712: NOT
17713: IFTRUE 17756
17715: PUSH
17716: LD_VAR 0 1
17720: PUSH
17721: LD_INT 0
17723: PUSH
17724: LD_INT 1
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: IN
17731: IFFALSE 17755
17733: PUSH
17734: LD_VAR 0 5
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 3
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: IN
17753: NOT
17754: AND
17755: OR
17756: IFFALSE 17760
// exit ;
17758: GO 36159
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17760: LD_VAR 0 1
17764: PUSH
17765: LD_INT 6
17767: PUSH
17768: LD_INT 7
17770: PUSH
17771: LD_INT 8
17773: PUSH
17774: LD_INT 13
17776: PUSH
17777: LD_INT 12
17779: PUSH
17780: LD_INT 15
17782: PUSH
17783: LD_INT 11
17785: PUSH
17786: LD_INT 14
17788: PUSH
17789: LD_INT 10
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: IN
17803: IFFALSE 17813
// btype = b_lab ;
17805: LD_ADDR_VAR 0 1
17809: PUSH
17810: LD_INT 6
17812: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17813: LD_VAR 0 6
17817: PUSH
17818: LD_INT 0
17820: PUSH
17821: LD_INT 1
17823: PUSH
17824: LD_INT 2
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: LIST
17831: IN
17832: NOT
17833: IFTRUE 17901
17835: PUSH
17836: LD_VAR 0 1
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: LD_INT 2
17849: PUSH
17850: LD_INT 3
17852: PUSH
17853: LD_INT 6
17855: PUSH
17856: LD_INT 36
17858: PUSH
17859: LD_INT 4
17861: PUSH
17862: LD_INT 5
17864: PUSH
17865: LD_INT 31
17867: PUSH
17868: LD_INT 32
17870: PUSH
17871: LD_INT 33
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: IN
17887: NOT
17888: IFFALSE 17900
17890: PUSH
17891: LD_VAR 0 6
17895: PUSH
17896: LD_INT 1
17898: EQUAL
17899: AND
17900: OR
17901: IFTRUE 17933
17903: PUSH
17904: LD_VAR 0 1
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: LD_INT 3
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: IN
17919: NOT
17920: IFFALSE 17932
17922: PUSH
17923: LD_VAR 0 6
17927: PUSH
17928: LD_INT 2
17930: EQUAL
17931: AND
17932: OR
17933: IFFALSE 17943
// mode = 0 ;
17935: LD_ADDR_VAR 0 6
17939: PUSH
17940: LD_INT 0
17942: ST_TO_ADDR
// case mode of 0 :
17943: LD_VAR 0 6
17947: PUSH
17948: LD_INT 0
17950: DOUBLE
17951: EQUAL
17952: IFTRUE 17956
17954: GO 29409
17956: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17957: LD_ADDR_VAR 0 11
17961: PUSH
17962: LD_INT 0
17964: PUSH
17965: LD_INT 0
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PUSH
17972: LD_INT 0
17974: PUSH
17975: LD_INT 1
17977: NEG
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 0
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 1
17995: PUSH
17996: LD_INT 1
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 0
18005: PUSH
18006: LD_INT 1
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 1
18015: NEG
18016: PUSH
18017: LD_INT 0
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 1
18026: NEG
18027: PUSH
18028: LD_INT 1
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: PUSH
18040: LD_INT 2
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 2
18053: NEG
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 1
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 0
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 1
18092: NEG
18093: PUSH
18094: LD_INT 1
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: PUSH
18104: LD_INT 3
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: LD_INT 3
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: LD_INT 1
18123: NEG
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18150: LD_ADDR_VAR 0 12
18154: PUSH
18155: LD_INT 0
18157: PUSH
18158: LD_INT 0
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 0
18167: PUSH
18168: LD_INT 1
18170: NEG
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: LD_INT 1
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: LD_INT 1
18208: NEG
18209: PUSH
18210: LD_INT 0
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 1
18219: NEG
18220: PUSH
18221: LD_INT 1
18223: NEG
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 1
18231: PUSH
18232: LD_INT 1
18234: NEG
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: LD_INT 0
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 2
18252: PUSH
18253: LD_INT 1
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: LD_INT 1
18262: NEG
18263: PUSH
18264: LD_INT 1
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: NEG
18274: PUSH
18275: LD_INT 0
18277: PUSH
18278: EMPTY
18279: LIST
18280: LIST
18281: PUSH
18282: LD_INT 2
18284: NEG
18285: PUSH
18286: LD_INT 1
18288: NEG
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 2
18296: NEG
18297: PUSH
18298: LD_INT 1
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 3
18307: NEG
18308: PUSH
18309: LD_INT 0
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 3
18318: NEG
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18346: LD_ADDR_VAR 0 13
18350: PUSH
18351: LD_INT 0
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 0
18363: PUSH
18364: LD_INT 1
18366: NEG
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: LD_INT 0
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PUSH
18385: LD_INT 1
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 0
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 1
18404: NEG
18405: PUSH
18406: LD_INT 0
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 1
18415: NEG
18416: PUSH
18417: LD_INT 1
18419: NEG
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 1
18427: NEG
18428: PUSH
18429: LD_INT 2
18431: NEG
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 1
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 2
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 1
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 2
18469: NEG
18470: PUSH
18471: LD_INT 1
18473: NEG
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 2
18481: NEG
18482: PUSH
18483: LD_INT 2
18485: NEG
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 2
18493: NEG
18494: PUSH
18495: LD_INT 3
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 3
18505: NEG
18506: PUSH
18507: LD_INT 2
18509: NEG
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PUSH
18515: LD_INT 3
18517: NEG
18518: PUSH
18519: LD_INT 3
18521: NEG
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: EMPTY
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18545: LD_ADDR_VAR 0 14
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: LD_INT 0
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 0
18562: PUSH
18563: LD_INT 1
18565: NEG
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: LD_INT 0
18576: PUSH
18577: EMPTY
18578: LIST
18579: LIST
18580: PUSH
18581: LD_INT 1
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 0
18593: PUSH
18594: LD_INT 1
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: LD_INT 0
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 1
18614: NEG
18615: PUSH
18616: LD_INT 1
18618: NEG
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 1
18626: NEG
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: LD_INT 2
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 1
18649: PUSH
18650: LD_INT 1
18652: NEG
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 1
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 0
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: LD_INT 1
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: LD_INT 3
18695: NEG
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: LD_INT 0
18703: PUSH
18704: LD_INT 3
18706: NEG
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 1
18714: PUSH
18715: LD_INT 2
18717: NEG
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18741: LD_ADDR_VAR 0 15
18745: PUSH
18746: LD_INT 0
18748: PUSH
18749: LD_INT 0
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 0
18758: PUSH
18759: LD_INT 1
18761: NEG
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: LD_INT 1
18769: PUSH
18770: LD_INT 0
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 1
18779: PUSH
18780: LD_INT 1
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 0
18789: PUSH
18790: LD_INT 1
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: PUSH
18797: LD_INT 1
18799: NEG
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 1
18810: NEG
18811: PUSH
18812: LD_INT 1
18814: NEG
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 1
18825: NEG
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 2
18833: PUSH
18834: LD_INT 0
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 1
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: NEG
18854: PUSH
18855: LD_INT 1
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: NEG
18865: PUSH
18866: LD_INT 0
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 2
18875: NEG
18876: PUSH
18877: LD_INT 1
18879: NEG
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 2
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: LD_INT 3
18898: PUSH
18899: LD_INT 0
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PUSH
18906: LD_INT 3
18908: PUSH
18909: LD_INT 1
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18934: LD_ADDR_VAR 0 16
18938: PUSH
18939: LD_INT 0
18941: PUSH
18942: LD_INT 0
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PUSH
18949: LD_INT 0
18951: PUSH
18952: LD_INT 1
18954: NEG
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 1
18962: PUSH
18963: LD_INT 0
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: LD_INT 1
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 0
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 1
18992: NEG
18993: PUSH
18994: LD_INT 0
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 1
19003: NEG
19004: PUSH
19005: LD_INT 1
19007: NEG
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: LD_INT 2
19019: NEG
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: LD_INT 1
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 2
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 1
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: NEG
19058: PUSH
19059: LD_INT 1
19061: NEG
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 2
19069: NEG
19070: PUSH
19071: LD_INT 2
19073: NEG
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: LD_INT 3
19091: PUSH
19092: LD_INT 3
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 3
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19127: LD_ADDR_VAR 0 17
19131: PUSH
19132: LD_INT 0
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 0
19144: PUSH
19145: LD_INT 1
19147: NEG
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 1
19155: PUSH
19156: LD_INT 0
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 0
19175: PUSH
19176: LD_INT 1
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 1
19185: NEG
19186: PUSH
19187: LD_INT 0
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 1
19196: NEG
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 1
19208: NEG
19209: PUSH
19210: LD_INT 2
19212: NEG
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 0
19220: PUSH
19221: LD_INT 2
19223: NEG
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: LD_INT 1
19231: PUSH
19232: LD_INT 1
19234: NEG
19235: PUSH
19236: EMPTY
19237: LIST
19238: LIST
19239: PUSH
19240: LD_INT 2
19242: PUSH
19243: LD_INT 0
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 2
19252: PUSH
19253: LD_INT 1
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 2
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: LD_INT 2
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 0
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: LD_INT 2
19303: NEG
19304: PUSH
19305: LD_INT 0
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 2
19314: NEG
19315: PUSH
19316: LD_INT 1
19318: NEG
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 2
19326: NEG
19327: PUSH
19328: LD_INT 2
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: LIST
19356: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19357: LD_ADDR_VAR 0 18
19361: PUSH
19362: LD_INT 0
19364: PUSH
19365: LD_INT 0
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 0
19374: PUSH
19375: LD_INT 1
19377: NEG
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 1
19385: PUSH
19386: LD_INT 0
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 1
19395: PUSH
19396: LD_INT 1
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 0
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 1
19415: NEG
19416: PUSH
19417: LD_INT 0
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: LD_INT 1
19426: NEG
19427: PUSH
19428: LD_INT 1
19430: NEG
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: LD_INT 2
19442: NEG
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 0
19450: PUSH
19451: LD_INT 2
19453: NEG
19454: PUSH
19455: EMPTY
19456: LIST
19457: LIST
19458: PUSH
19459: LD_INT 1
19461: PUSH
19462: LD_INT 1
19464: NEG
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: LD_INT 0
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 2
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 0
19512: PUSH
19513: LD_INT 2
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: NEG
19534: PUSH
19535: LD_INT 0
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 2
19544: NEG
19545: PUSH
19546: LD_INT 1
19548: NEG
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: LD_INT 2
19556: NEG
19557: PUSH
19558: LD_INT 2
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19587: LD_ADDR_VAR 0 19
19591: PUSH
19592: LD_INT 0
19594: PUSH
19595: LD_INT 0
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 0
19604: PUSH
19605: LD_INT 1
19607: NEG
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: LD_INT 1
19615: PUSH
19616: LD_INT 0
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 1
19625: PUSH
19626: LD_INT 1
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: LD_INT 0
19635: PUSH
19636: LD_INT 1
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PUSH
19643: LD_INT 1
19645: NEG
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 1
19656: NEG
19657: PUSH
19658: LD_INT 1
19660: NEG
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: LD_INT 2
19672: NEG
19673: PUSH
19674: EMPTY
19675: LIST
19676: LIST
19677: PUSH
19678: LD_INT 0
19680: PUSH
19681: LD_INT 2
19683: NEG
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 1
19691: PUSH
19692: LD_INT 1
19694: NEG
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 0
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 2
19712: PUSH
19713: LD_INT 1
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 0
19742: PUSH
19743: LD_INT 2
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 2
19763: NEG
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 2
19774: NEG
19775: PUSH
19776: LD_INT 1
19778: NEG
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PUSH
19784: LD_INT 2
19786: NEG
19787: PUSH
19788: LD_INT 2
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19817: LD_ADDR_VAR 0 20
19821: PUSH
19822: LD_INT 0
19824: PUSH
19825: LD_INT 0
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 1
19837: NEG
19838: PUSH
19839: EMPTY
19840: LIST
19841: LIST
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: LD_INT 1
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 0
19865: PUSH
19866: LD_INT 1
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: LD_INT 1
19875: NEG
19876: PUSH
19877: LD_INT 0
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 1
19886: NEG
19887: PUSH
19888: LD_INT 1
19890: NEG
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: LD_INT 2
19902: NEG
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 0
19910: PUSH
19911: LD_INT 2
19913: NEG
19914: PUSH
19915: EMPTY
19916: LIST
19917: LIST
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: LD_INT 1
19924: NEG
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 0
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 1
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 2
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: LD_INT 2
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: PUSH
19970: LD_INT 0
19972: PUSH
19973: LD_INT 2
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: NEG
19994: PUSH
19995: LD_INT 0
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: NEG
20005: PUSH
20006: LD_INT 1
20008: NEG
20009: PUSH
20010: EMPTY
20011: LIST
20012: LIST
20013: PUSH
20014: LD_INT 2
20016: NEG
20017: PUSH
20018: LD_INT 2
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20047: LD_ADDR_VAR 0 21
20051: PUSH
20052: LD_INT 0
20054: PUSH
20055: LD_INT 0
20057: PUSH
20058: EMPTY
20059: LIST
20060: LIST
20061: PUSH
20062: LD_INT 0
20064: PUSH
20065: LD_INT 1
20067: NEG
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 1
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 1
20085: PUSH
20086: LD_INT 1
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: LD_INT 0
20095: PUSH
20096: LD_INT 1
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PUSH
20103: LD_INT 1
20105: NEG
20106: PUSH
20107: LD_INT 0
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: PUSH
20114: LD_INT 1
20116: NEG
20117: PUSH
20118: LD_INT 1
20120: NEG
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: LD_INT 2
20132: NEG
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 2
20143: NEG
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 1
20151: PUSH
20152: LD_INT 1
20154: NEG
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 0
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 1
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 2
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: LD_INT 2
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 0
20202: PUSH
20203: LD_INT 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 1
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: NEG
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 2
20234: NEG
20235: PUSH
20236: LD_INT 1
20238: NEG
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 2
20246: NEG
20247: PUSH
20248: LD_INT 2
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20277: LD_ADDR_VAR 0 22
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: LD_INT 0
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 0
20294: PUSH
20295: LD_INT 1
20297: NEG
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 1
20305: PUSH
20306: LD_INT 0
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 0
20325: PUSH
20326: LD_INT 1
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 1
20335: NEG
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 1
20346: NEG
20347: PUSH
20348: LD_INT 1
20350: NEG
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: LD_INT 2
20362: NEG
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 0
20370: PUSH
20371: LD_INT 2
20373: NEG
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 1
20381: PUSH
20382: LD_INT 1
20384: NEG
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: LD_INT 2
20392: PUSH
20393: LD_INT 0
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: PUSH
20400: LD_INT 2
20402: PUSH
20403: LD_INT 1
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 2
20412: PUSH
20413: LD_INT 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 1
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: LD_INT 0
20432: PUSH
20433: LD_INT 2
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 1
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: NEG
20454: PUSH
20455: LD_INT 0
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 2
20464: NEG
20465: PUSH
20466: LD_INT 1
20468: NEG
20469: PUSH
20470: EMPTY
20471: LIST
20472: LIST
20473: PUSH
20474: LD_INT 2
20476: NEG
20477: PUSH
20478: LD_INT 2
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20507: LD_ADDR_VAR 0 23
20511: PUSH
20512: LD_INT 0
20514: PUSH
20515: LD_INT 0
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: PUSH
20522: LD_INT 0
20524: PUSH
20525: LD_INT 1
20527: NEG
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: LD_INT 1
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 1
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PUSH
20553: LD_INT 0
20555: PUSH
20556: LD_INT 1
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: PUSH
20563: LD_INT 1
20565: NEG
20566: PUSH
20567: LD_INT 0
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: LD_INT 1
20576: NEG
20577: PUSH
20578: LD_INT 1
20580: NEG
20581: PUSH
20582: EMPTY
20583: LIST
20584: LIST
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: LD_INT 2
20592: NEG
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 0
20600: PUSH
20601: LD_INT 2
20603: NEG
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: LD_INT 1
20614: NEG
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 2
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 2
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 2
20642: PUSH
20643: LD_INT 2
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 1
20652: PUSH
20653: LD_INT 2
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 0
20662: PUSH
20663: LD_INT 2
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: PUSH
20674: LD_INT 1
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: NEG
20684: PUSH
20685: LD_INT 0
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 2
20694: NEG
20695: PUSH
20696: LD_INT 1
20698: NEG
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PUSH
20704: LD_INT 2
20706: NEG
20707: PUSH
20708: LD_INT 2
20710: NEG
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 2
20718: NEG
20719: PUSH
20720: LD_INT 3
20722: NEG
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PUSH
20728: LD_INT 1
20730: NEG
20731: PUSH
20732: LD_INT 3
20734: NEG
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: LD_INT 2
20745: NEG
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 2
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20787: LD_ADDR_VAR 0 24
20791: PUSH
20792: LD_INT 0
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 0
20804: PUSH
20805: LD_INT 1
20807: NEG
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: LD_INT 0
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: LD_INT 1
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 1
20845: NEG
20846: PUSH
20847: LD_INT 0
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: LD_INT 1
20860: NEG
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: NEG
20869: PUSH
20870: LD_INT 2
20872: NEG
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: PUSH
20878: LD_INT 0
20880: PUSH
20881: LD_INT 2
20883: NEG
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: LD_INT 1
20894: NEG
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: LD_INT 2
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 2
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: LD_INT 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 2
20963: NEG
20964: PUSH
20965: LD_INT 0
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 2
20974: NEG
20975: PUSH
20976: LD_INT 1
20978: NEG
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: LD_INT 2
20986: NEG
20987: PUSH
20988: LD_INT 2
20990: NEG
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: PUSH
20999: LD_INT 2
21001: NEG
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 1
21012: NEG
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 3
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
21063: LD_ADDR_VAR 0 25
21067: PUSH
21068: LD_INT 0
21070: PUSH
21071: LD_INT 0
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: PUSH
21078: LD_INT 0
21080: PUSH
21081: LD_INT 1
21083: NEG
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 1
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: PUSH
21102: LD_INT 1
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 0
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 1
21121: NEG
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 1
21132: NEG
21133: PUSH
21134: LD_INT 1
21136: NEG
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: LD_INT 2
21148: NEG
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 0
21156: PUSH
21157: LD_INT 2
21159: NEG
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 1
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 2
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 2
21198: PUSH
21199: LD_INT 2
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: PUSH
21209: LD_INT 2
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: LD_INT 2
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 2
21239: NEG
21240: PUSH
21241: LD_INT 0
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 2
21250: NEG
21251: PUSH
21252: LD_INT 1
21254: NEG
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: LD_INT 2
21262: NEG
21263: PUSH
21264: LD_INT 2
21266: NEG
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 3
21274: PUSH
21275: LD_INT 1
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 3
21284: PUSH
21285: LD_INT 2
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 2
21294: PUSH
21295: LD_INT 3
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: LD_INT 3
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: LIST
21332: LIST
21333: LIST
21334: LIST
21335: LIST
21336: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21337: LD_ADDR_VAR 0 26
21341: PUSH
21342: LD_INT 0
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 0
21354: PUSH
21355: LD_INT 1
21357: NEG
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 1
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 1
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: LD_INT 0
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 1
21395: NEG
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 1
21406: NEG
21407: PUSH
21408: LD_INT 1
21410: NEG
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: NEG
21419: PUSH
21420: LD_INT 2
21422: NEG
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 0
21430: PUSH
21431: LD_INT 2
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: LD_INT 1
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 2
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: EMPTY
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 2
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 2
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: PUSH
21480: LD_INT 1
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 0
21492: PUSH
21493: LD_INT 2
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: NEG
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 2
21513: NEG
21514: PUSH
21515: LD_INT 0
21517: PUSH
21518: EMPTY
21519: LIST
21520: LIST
21521: PUSH
21522: LD_INT 2
21524: NEG
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 2
21536: NEG
21537: PUSH
21538: LD_INT 2
21540: NEG
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 2
21548: PUSH
21549: LD_INT 3
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: PUSH
21566: LD_INT 1
21568: NEG
21569: PUSH
21570: LD_INT 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21613: LD_ADDR_VAR 0 27
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 0
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 0
21630: PUSH
21631: LD_INT 1
21633: NEG
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: LD_INT 0
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 0
21661: PUSH
21662: LD_INT 1
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: LD_INT 1
21671: NEG
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 1
21682: NEG
21683: PUSH
21684: LD_INT 1
21686: NEG
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 1
21694: NEG
21695: PUSH
21696: LD_INT 2
21698: NEG
21699: PUSH
21700: EMPTY
21701: LIST
21702: LIST
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: LD_INT 2
21709: NEG
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: LD_INT 1
21720: NEG
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 2
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 2
21738: PUSH
21739: LD_INT 1
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 2
21748: PUSH
21749: LD_INT 2
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 1
21758: PUSH
21759: LD_INT 2
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: LD_INT 0
21768: PUSH
21769: LD_INT 2
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 1
21778: NEG
21779: PUSH
21780: LD_INT 1
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: LD_INT 2
21789: NEG
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 2
21800: NEG
21801: PUSH
21802: LD_INT 1
21804: NEG
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: LD_INT 2
21812: NEG
21813: PUSH
21814: LD_INT 2
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: NEG
21825: PUSH
21826: LD_INT 2
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: NEG
21836: PUSH
21837: LD_INT 1
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: LD_INT 3
21846: NEG
21847: PUSH
21848: LD_INT 1
21850: NEG
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 3
21858: NEG
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21893: LD_ADDR_VAR 0 28
21897: PUSH
21898: LD_INT 0
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 0
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 1
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 1
21931: PUSH
21932: LD_INT 1
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: LD_INT 0
21941: PUSH
21942: LD_INT 1
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 1
21951: NEG
21952: PUSH
21953: LD_INT 0
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 1
21962: NEG
21963: PUSH
21964: LD_INT 1
21966: NEG
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 1
21974: NEG
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 0
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: PUSH
21995: LD_INT 1
21997: PUSH
21998: LD_INT 1
22000: NEG
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: PUSH
22006: LD_INT 2
22008: PUSH
22009: LD_INT 0
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: LD_INT 2
22018: PUSH
22019: LD_INT 1
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PUSH
22026: LD_INT 2
22028: PUSH
22029: LD_INT 2
22031: PUSH
22032: EMPTY
22033: LIST
22034: LIST
22035: PUSH
22036: LD_INT 1
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 2
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 1
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 2
22069: NEG
22070: PUSH
22071: LD_INT 0
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: NEG
22081: PUSH
22082: LD_INT 1
22084: NEG
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 2
22092: NEG
22093: PUSH
22094: LD_INT 2
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: NEG
22105: PUSH
22106: LD_INT 3
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: NEG
22117: PUSH
22118: LD_INT 3
22120: NEG
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: LD_INT 3
22128: NEG
22129: PUSH
22130: LD_INT 1
22132: NEG
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 3
22140: NEG
22141: PUSH
22142: LD_INT 2
22144: NEG
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22175: LD_ADDR_VAR 0 29
22179: PUSH
22180: LD_INT 0
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 0
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: LD_INT 1
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 0
22223: PUSH
22224: LD_INT 1
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: PUSH
22231: LD_INT 1
22233: NEG
22234: PUSH
22235: LD_INT 0
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: LD_INT 1
22248: NEG
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 1
22256: NEG
22257: PUSH
22258: LD_INT 2
22260: NEG
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: PUSH
22266: LD_INT 0
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 2
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 1
22330: NEG
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 2
22341: NEG
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 2
22353: NEG
22354: PUSH
22355: LD_INT 2
22357: NEG
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: LD_INT 3
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 1
22380: NEG
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 3
22388: PUSH
22389: LD_INT 1
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: PUSH
22406: LD_INT 1
22408: NEG
22409: PUSH
22410: LD_INT 2
22412: PUSH
22413: EMPTY
22414: LIST
22415: LIST
22416: PUSH
22417: LD_INT 3
22419: NEG
22420: PUSH
22421: LD_INT 2
22423: NEG
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22454: LD_ADDR_VAR 0 30
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: LD_INT 0
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 0
22471: PUSH
22472: LD_INT 1
22474: NEG
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: PUSH
22480: LD_INT 1
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: LD_INT 1
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: LD_INT 1
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: LD_INT 0
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: LD_INT 1
22523: NEG
22524: PUSH
22525: LD_INT 1
22527: NEG
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 1
22535: NEG
22536: PUSH
22537: LD_INT 2
22539: NEG
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 2
22550: NEG
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 1
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 2
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 2
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: LD_INT 2
22589: PUSH
22590: LD_INT 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: LD_INT 2
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 1
22609: NEG
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 2
22620: NEG
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: LD_INT 1
22635: NEG
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 3
22647: NEG
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 1
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: LD_INT 3
22666: PUSH
22667: LD_INT 2
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: LD_INT 3
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: PUSH
22684: LD_INT 2
22686: NEG
22687: PUSH
22688: LD_INT 1
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PUSH
22695: LD_INT 3
22697: NEG
22698: PUSH
22699: LD_INT 1
22701: NEG
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22732: LD_ADDR_VAR 0 31
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 0
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PUSH
22788: LD_INT 1
22790: NEG
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: LD_INT 2
22817: NEG
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 1
22828: NEG
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 2
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: PUSH
22867: LD_INT 2
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 0
22876: PUSH
22877: LD_INT 2
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: LD_INT 1
22886: NEG
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: NEG
22898: PUSH
22899: LD_INT 1
22901: NEG
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: LD_INT 2
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 3
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: LD_INT 1
22936: NEG
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: LD_INT 3
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 1
22964: NEG
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 3
22975: NEG
22976: PUSH
22977: LD_INT 2
22979: NEG
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23010: LD_ADDR_VAR 0 32
23014: PUSH
23015: LD_INT 0
23017: PUSH
23018: LD_INT 0
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: LD_INT 1
23030: NEG
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 1
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 1
23048: PUSH
23049: LD_INT 1
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 0
23058: PUSH
23059: LD_INT 1
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: LD_INT 0
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 1
23079: NEG
23080: PUSH
23081: LD_INT 1
23083: NEG
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: PUSH
23089: LD_INT 1
23091: NEG
23092: PUSH
23093: LD_INT 2
23095: NEG
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 0
23103: PUSH
23104: LD_INT 2
23106: NEG
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: LD_INT 1
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 2
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: LD_INT 2
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 0
23155: PUSH
23156: LD_INT 2
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: LD_INT 1
23165: NEG
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: NEG
23188: PUSH
23189: LD_INT 1
23191: NEG
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: NEG
23200: PUSH
23201: LD_INT 3
23203: NEG
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 1
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: LD_INT 2
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: PUSH
23233: LD_INT 3
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 2
23242: NEG
23243: PUSH
23244: LD_INT 1
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 3
23253: NEG
23254: PUSH
23255: LD_INT 1
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23288: LD_ADDR_VAR 0 33
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: LD_INT 0
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: LD_INT 1
23308: NEG
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: LD_INT 0
23336: PUSH
23337: LD_INT 1
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 1
23346: NEG
23347: PUSH
23348: LD_INT 0
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: LD_INT 1
23357: NEG
23358: PUSH
23359: LD_INT 1
23361: NEG
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 2
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: LD_INT 1
23384: NEG
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 0
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 2
23402: PUSH
23403: LD_INT 1
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PUSH
23413: LD_INT 2
23415: PUSH
23416: EMPTY
23417: LIST
23418: LIST
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: LD_INT 2
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: LD_INT 2
23443: NEG
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: LD_INT 1
23458: NEG
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: LD_INT 2
23466: NEG
23467: PUSH
23468: LD_INT 2
23470: NEG
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: LD_INT 3
23482: NEG
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 2
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 3
23501: PUSH
23502: LD_INT 1
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 1
23511: PUSH
23512: LD_INT 3
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 1
23521: NEG
23522: PUSH
23523: LD_INT 2
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 3
23532: NEG
23533: PUSH
23534: LD_INT 2
23536: NEG
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23567: LD_ADDR_VAR 0 34
23571: PUSH
23572: LD_INT 0
23574: PUSH
23575: LD_INT 0
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 0
23584: PUSH
23585: LD_INT 1
23587: NEG
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 1
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: LD_INT 1
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 0
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: LD_INT 0
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: NEG
23637: PUSH
23638: LD_INT 1
23640: NEG
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 1
23648: NEG
23649: PUSH
23650: LD_INT 2
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 2
23663: NEG
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: LD_INT 1
23674: NEG
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 1
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 2
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: PUSH
23703: LD_INT 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: NEG
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: NEG
23735: PUSH
23736: LD_INT 1
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 2
23746: NEG
23747: PUSH
23748: LD_INT 2
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 1
23758: NEG
23759: PUSH
23760: LD_INT 3
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 2
23773: NEG
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 3
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: PUSH
23792: LD_INT 3
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 2
23801: NEG
23802: PUSH
23803: LD_INT 1
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: LD_INT 3
23812: NEG
23813: PUSH
23814: LD_INT 1
23816: NEG
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23847: LD_ADDR_VAR 0 35
23851: PUSH
23852: LD_INT 0
23854: PUSH
23855: LD_INT 0
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: LD_INT 1
23867: NEG
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 1
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 0
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: NEG
23906: PUSH
23907: LD_INT 0
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 1
23916: NEG
23917: PUSH
23918: LD_INT 1
23920: NEG
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: NEG
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23959: LD_ADDR_VAR 0 36
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: LD_INT 0
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 0
23976: PUSH
23977: LD_INT 1
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 1
23987: PUSH
23988: LD_INT 0
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 0
24007: PUSH
24008: LD_INT 1
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 1
24017: NEG
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 1
24028: NEG
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 1
24040: NEG
24041: PUSH
24042: LD_INT 2
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 1
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24071: LD_ADDR_VAR 0 37
24075: PUSH
24076: LD_INT 0
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 0
24088: PUSH
24089: LD_INT 1
24091: NEG
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 0
24119: PUSH
24120: LD_INT 1
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: NEG
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 1
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: LD_INT 1
24155: NEG
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PUSH
24161: LD_INT 1
24163: NEG
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24183: LD_ADDR_VAR 0 38
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 2
24264: PUSH
24265: LD_INT 1
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: LD_INT 1
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24295: LD_ADDR_VAR 0 39
24299: PUSH
24300: LD_INT 0
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 0
24312: PUSH
24313: LD_INT 1
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 1
24323: PUSH
24324: LD_INT 0
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: LD_INT 1
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 0
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 1
24353: NEG
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 1
24376: NEG
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 2
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24407: LD_ADDR_VAR 0 40
24411: PUSH
24412: LD_INT 0
24414: PUSH
24415: LD_INT 0
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 1
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 1
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 1
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 1
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 1
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24519: LD_ADDR_VAR 0 41
24523: PUSH
24524: LD_INT 0
24526: PUSH
24527: LD_INT 0
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: LD_INT 1
24539: NEG
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: LD_INT 1
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: PUSH
24565: LD_INT 0
24567: PUSH
24568: LD_INT 1
24570: PUSH
24571: EMPTY
24572: LIST
24573: LIST
24574: PUSH
24575: LD_INT 1
24577: NEG
24578: PUSH
24579: LD_INT 0
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: LD_INT 1
24592: NEG
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: LD_INT 2
24604: NEG
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 1
24612: PUSH
24613: LD_INT 1
24615: NEG
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: LD_INT 1
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 2
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: LD_INT 1
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 0
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: LD_INT 2
24701: NEG
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: PUSH
24707: LD_INT 2
24709: NEG
24710: PUSH
24711: LD_INT 3
24713: NEG
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: LD_INT 2
24721: PUSH
24722: LD_INT 1
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 3
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: LD_INT 3
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 3
24752: PUSH
24753: LD_INT 2
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: LD_INT 3
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: LD_INT 3
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: LD_INT 2
24782: NEG
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 3
24793: NEG
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 3
24804: NEG
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 3
24816: NEG
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 3
24828: NEG
24829: PUSH
24830: LD_INT 3
24832: NEG
24833: PUSH
24834: EMPTY
24835: LIST
24836: LIST
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24869: LD_ADDR_VAR 0 42
24873: PUSH
24874: LD_INT 0
24876: PUSH
24877: LD_INT 0
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 1
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 1
24927: NEG
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: NEG
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 2
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: PUSH
24974: LD_INT 1
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 2
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 2
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 2
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 2
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: NEG
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 2
25035: NEG
25036: PUSH
25037: LD_INT 1
25039: NEG
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: NEG
25048: PUSH
25049: LD_INT 2
25051: NEG
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 3
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: NEG
25072: PUSH
25073: LD_INT 3
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: LD_INT 3
25086: NEG
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: LD_INT 2
25097: NEG
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: LD_INT 2
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: LD_INT 3
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 2
25125: PUSH
25126: LD_INT 3
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: LD_INT 3
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 0
25145: PUSH
25146: LD_INT 3
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 1
25155: NEG
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 3
25166: NEG
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 3
25178: NEG
25179: PUSH
25180: LD_INT 3
25182: NEG
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25219: LD_ADDR_VAR 0 43
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: LD_INT 0
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 0
25236: PUSH
25237: LD_INT 1
25239: NEG
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: LD_INT 0
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 0
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 1
25288: NEG
25289: PUSH
25290: LD_INT 1
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 1
25300: NEG
25301: PUSH
25302: LD_INT 2
25304: NEG
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 0
25312: PUSH
25313: LD_INT 2
25315: NEG
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: PUSH
25321: LD_INT 1
25323: PUSH
25324: LD_INT 1
25326: NEG
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: LD_INT 1
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 2
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 2
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 1
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 2
25396: NEG
25397: PUSH
25398: LD_INT 1
25400: NEG
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 1
25408: NEG
25409: PUSH
25410: LD_INT 3
25412: NEG
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 3
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 3
25453: PUSH
25454: LD_INT 0
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PUSH
25461: LD_INT 3
25463: PUSH
25464: LD_INT 1
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 3
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 0
25483: PUSH
25484: LD_INT 3
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 1
25493: NEG
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: PUSH
25502: LD_INT 2
25504: NEG
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: EMPTY
25510: LIST
25511: LIST
25512: PUSH
25513: LD_INT 3
25515: NEG
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 3
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: NEG
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25567: LD_ADDR_VAR 0 44
25571: PUSH
25572: LD_INT 0
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 0
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: LD_INT 0
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: LD_INT 1
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: LD_INT 0
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: LD_INT 1
25648: NEG
25649: PUSH
25650: LD_INT 2
25652: NEG
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 0
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: LD_INT 1
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 2
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PUSH
25709: LD_INT 1
25711: NEG
25712: PUSH
25713: LD_INT 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 2
25722: NEG
25723: PUSH
25724: LD_INT 0
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: LD_INT 1
25737: NEG
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 2
25757: NEG
25758: PUSH
25759: LD_INT 3
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 2
25769: PUSH
25770: LD_INT 1
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 3
25790: PUSH
25791: LD_INT 1
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: LD_INT 3
25810: PUSH
25811: LD_INT 3
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 2
25820: PUSH
25821: LD_INT 3
25823: PUSH
25824: EMPTY
25825: LIST
25826: LIST
25827: PUSH
25828: LD_INT 2
25830: NEG
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 3
25841: NEG
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 3
25852: NEG
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 3
25864: NEG
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: NEG
25877: PUSH
25878: LD_INT 3
25880: NEG
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25917: LD_ADDR_VAR 0 45
25921: PUSH
25922: LD_INT 0
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 0
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 1
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 1
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 0
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 1
25998: NEG
25999: PUSH
26000: LD_INT 2
26002: NEG
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: LD_INT 2
26013: NEG
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: PUSH
26022: LD_INT 1
26024: NEG
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 2
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 1
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 0
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 1
26072: NEG
26073: PUSH
26074: LD_INT 1
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 2
26107: NEG
26108: PUSH
26109: LD_INT 3
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: LD_INT 3
26123: NEG
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 3
26134: NEG
26135: PUSH
26136: EMPTY
26137: LIST
26138: LIST
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: LD_INT 2
26145: NEG
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 3
26153: PUSH
26154: LD_INT 2
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 3
26163: PUSH
26164: LD_INT 3
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 2
26173: PUSH
26174: LD_INT 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 3
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 3
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 3
26226: NEG
26227: PUSH
26228: LD_INT 3
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26267: LD_ADDR_VAR 0 46
26271: PUSH
26272: LD_INT 0
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: LD_INT 0
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 1
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 1
26336: NEG
26337: PUSH
26338: LD_INT 1
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: NEG
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 0
26360: PUSH
26361: LD_INT 2
26363: NEG
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 1
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 2
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: EMPTY
26387: LIST
26388: LIST
26389: PUSH
26390: LD_INT 2
26392: PUSH
26393: LD_INT 1
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PUSH
26403: LD_INT 2
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: NEG
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 2
26444: NEG
26445: PUSH
26446: LD_INT 1
26448: NEG
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: LD_INT 3
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: LD_INT 3
26471: NEG
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 1
26479: PUSH
26480: LD_INT 2
26482: NEG
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 2
26490: PUSH
26491: LD_INT 1
26493: NEG
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 3
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 3
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: LD_INT 3
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 3
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: LD_INT 2
26545: PUSH
26546: EMPTY
26547: LIST
26548: LIST
26549: PUSH
26550: LD_INT 2
26552: NEG
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 3
26563: NEG
26564: PUSH
26565: LD_INT 0
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 3
26574: NEG
26575: PUSH
26576: LD_INT 1
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: LIST
26600: LIST
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26615: LD_ADDR_VAR 0 47
26619: PUSH
26620: LD_INT 0
26622: PUSH
26623: LD_INT 0
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: LD_INT 0
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: LD_INT 1
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: LD_INT 1
26666: PUSH
26667: EMPTY
26668: LIST
26669: LIST
26670: PUSH
26671: LD_INT 1
26673: NEG
26674: PUSH
26675: LD_INT 0
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PUSH
26682: LD_INT 1
26684: NEG
26685: PUSH
26686: LD_INT 1
26688: NEG
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 1
26696: NEG
26697: PUSH
26698: LD_INT 2
26700: NEG
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: LD_INT 2
26711: NEG
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 2
26730: NEG
26731: PUSH
26732: LD_INT 1
26734: NEG
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 2
26742: NEG
26743: PUSH
26744: LD_INT 2
26746: NEG
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: LIST
26764: LIST
26765: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26766: LD_ADDR_VAR 0 48
26770: PUSH
26771: LD_INT 0
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 0
26783: PUSH
26784: LD_INT 1
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: LD_INT 0
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 0
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: PUSH
26822: LD_INT 1
26824: NEG
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 1
26835: NEG
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 0
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 0
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 1
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26913: LD_ADDR_VAR 0 49
26917: PUSH
26918: LD_INT 0
26920: PUSH
26921: LD_INT 0
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 1
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 1
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: NEG
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 1
26982: NEG
26983: PUSH
26984: LD_INT 1
26986: NEG
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 1
26997: NEG
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 2
27015: PUSH
27016: LD_INT 1
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 2
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 2
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
27057: LD_ADDR_VAR 0 50
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: LD_INT 0
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: LD_INT 1
27085: PUSH
27086: LD_INT 0
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: NEG
27127: PUSH
27128: LD_INT 1
27130: NEG
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 2
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 2
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 0
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 1
27178: NEG
27179: PUSH
27180: LD_INT 1
27182: PUSH
27183: EMPTY
27184: LIST
27185: LIST
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27201: LD_ADDR_VAR 0 51
27205: PUSH
27206: LD_INT 0
27208: PUSH
27209: LD_INT 0
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: PUSH
27216: LD_INT 0
27218: PUSH
27219: LD_INT 1
27221: NEG
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 1
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 1
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: PUSH
27257: LD_INT 1
27259: NEG
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: LD_INT 2
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: LD_INT 2
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 1
27302: NEG
27303: PUSH
27304: LD_INT 1
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 2
27313: NEG
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: NEG
27325: PUSH
27326: LD_INT 1
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27348: LD_ADDR_VAR 0 52
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: LD_INT 0
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: LD_INT 1
27368: NEG
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: LD_INT 0
27379: PUSH
27380: EMPTY
27381: LIST
27382: LIST
27383: PUSH
27384: LD_INT 1
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 1
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 1
27406: NEG
27407: PUSH
27408: LD_INT 0
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: NEG
27418: PUSH
27419: LD_INT 1
27421: NEG
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: LD_INT 2
27433: NEG
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PUSH
27439: LD_INT 1
27441: NEG
27442: PUSH
27443: LD_INT 1
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 2
27452: NEG
27453: PUSH
27454: LD_INT 0
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 2
27463: NEG
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: EMPTY
27470: LIST
27471: LIST
27472: PUSH
27473: LD_INT 2
27475: NEG
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27499: LD_ADDR_VAR 0 53
27503: PUSH
27504: LD_INT 0
27506: PUSH
27507: LD_INT 0
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: LD_INT 1
27519: NEG
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 1
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 0
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 1
27557: NEG
27558: PUSH
27559: LD_INT 0
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: PUSH
27566: LD_INT 1
27568: NEG
27569: PUSH
27570: LD_INT 1
27572: NEG
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: NEG
27581: PUSH
27582: LD_INT 2
27584: NEG
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: PUSH
27590: LD_INT 0
27592: PUSH
27593: LD_INT 2
27595: NEG
27596: PUSH
27597: EMPTY
27598: LIST
27599: LIST
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: LD_INT 1
27606: NEG
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 2
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 2
27624: PUSH
27625: LD_INT 1
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 1
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: LD_INT 0
27654: PUSH
27655: LD_INT 2
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: PUSH
27673: LD_INT 2
27675: NEG
27676: PUSH
27677: LD_INT 0
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: PUSH
27684: LD_INT 2
27686: NEG
27687: PUSH
27688: LD_INT 1
27690: NEG
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: NEG
27699: PUSH
27700: LD_INT 2
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27729: LD_ADDR_VAR 0 54
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 0
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 1
27757: PUSH
27758: LD_INT 0
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 1
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 0
27777: PUSH
27778: LD_INT 1
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: PUSH
27785: LD_INT 1
27787: NEG
27788: PUSH
27789: LD_INT 0
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: NEG
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: NEG
27811: PUSH
27812: LD_INT 2
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 0
27822: PUSH
27823: LD_INT 2
27825: NEG
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: LD_INT 1
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: PUSH
27855: LD_INT 1
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: PUSH
27865: LD_INT 2
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 1
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 0
27884: PUSH
27885: LD_INT 2
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 2
27916: NEG
27917: PUSH
27918: LD_INT 1
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 2
27928: NEG
27929: PUSH
27930: LD_INT 2
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27959: LD_ADDR_VAR 0 55
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 0
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 0
27976: PUSH
27977: LD_INT 1
27979: NEG
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 1
28028: NEG
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: NEG
28041: PUSH
28042: LD_INT 2
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 2
28055: NEG
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: LD_INT 1
28066: NEG
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 2
28094: PUSH
28095: LD_INT 2
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 1
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 0
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PUSH
28133: LD_INT 2
28135: NEG
28136: PUSH
28137: LD_INT 0
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 2
28146: NEG
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 2
28158: NEG
28159: PUSH
28160: LD_INT 2
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28189: LD_ADDR_VAR 0 56
28193: PUSH
28194: LD_INT 0
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: LD_INT 1
28209: NEG
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 1
28217: PUSH
28218: LD_INT 0
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 1
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 1
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 2
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 1
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 0
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 2
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 2
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: PUSH
28335: LD_INT 2
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_INT 2
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: LD_INT 2
28365: NEG
28366: PUSH
28367: LD_INT 0
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: PUSH
28374: LD_INT 2
28376: NEG
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 2
28388: NEG
28389: PUSH
28390: LD_INT 2
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28419: LD_ADDR_VAR 0 57
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 0
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 1
28447: PUSH
28448: LD_INT 0
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: LD_INT 1
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 1
28477: NEG
28478: PUSH
28479: LD_INT 0
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: NEG
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: PUSH
28498: LD_INT 1
28500: NEG
28501: PUSH
28502: LD_INT 2
28504: NEG
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: LD_INT 0
28512: PUSH
28513: LD_INT 2
28515: NEG
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: PUSH
28524: LD_INT 1
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 2
28544: PUSH
28545: LD_INT 1
28547: PUSH
28548: EMPTY
28549: LIST
28550: LIST
28551: PUSH
28552: LD_INT 2
28554: PUSH
28555: LD_INT 2
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 0
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: LD_INT 0
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: LD_INT 1
28610: NEG
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 2
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: EMPTY
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28649: LD_ADDR_VAR 0 58
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 0
28804: PUSH
28805: LD_INT 2
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 0
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 1
28840: NEG
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 2
28848: NEG
28849: PUSH
28850: LD_INT 2
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28879: LD_ADDR_VAR 0 59
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: LD_INT 0
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PUSH
28894: LD_INT 0
28896: PUSH
28897: LD_INT 1
28899: NEG
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: LD_INT 0
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: PUSH
28915: LD_INT 1
28917: PUSH
28918: LD_INT 1
28920: PUSH
28921: EMPTY
28922: LIST
28923: LIST
28924: PUSH
28925: LD_INT 0
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: EMPTY
28932: LIST
28933: LIST
28934: PUSH
28935: LD_INT 1
28937: NEG
28938: PUSH
28939: LD_INT 0
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 1
28948: NEG
28949: PUSH
28950: LD_INT 1
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28967: LD_ADDR_VAR 0 60
28971: PUSH
28972: LD_INT 0
28974: PUSH
28975: LD_INT 0
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 0
28984: PUSH
28985: LD_INT 1
28987: NEG
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PUSH
28993: LD_INT 1
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 1
29005: PUSH
29006: LD_INT 1
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: LD_INT 1
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: LD_INT 0
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: LD_INT 1
29040: NEG
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29055: LD_ADDR_VAR 0 61
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: LD_INT 0
29065: PUSH
29066: EMPTY
29067: LIST
29068: LIST
29069: PUSH
29070: LD_INT 0
29072: PUSH
29073: LD_INT 1
29075: NEG
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PUSH
29081: LD_INT 1
29083: PUSH
29084: LD_INT 0
29086: PUSH
29087: EMPTY
29088: LIST
29089: LIST
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: LD_INT 1
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: LD_INT 1
29113: NEG
29114: PUSH
29115: LD_INT 0
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 1
29124: NEG
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: LIST
29140: LIST
29141: LIST
29142: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29143: LD_ADDR_VAR 0 62
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: LD_INT 1
29163: NEG
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 1
29171: PUSH
29172: LD_INT 0
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: LD_INT 1
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 1
29216: NEG
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29231: LD_ADDR_VAR 0 63
29235: PUSH
29236: LD_INT 0
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: LD_INT 1
29251: NEG
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 1
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: PUSH
29287: LD_INT 1
29289: NEG
29290: PUSH
29291: LD_INT 0
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 1
29300: NEG
29301: PUSH
29302: LD_INT 1
29304: NEG
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29319: LD_ADDR_VAR 0 64
29323: PUSH
29324: LD_INT 0
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: EMPTY
29342: LIST
29343: LIST
29344: PUSH
29345: LD_INT 1
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 1
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 0
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: LD_INT 1
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
// end ; 1 :
29407: GO 35304
29409: LD_INT 1
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 32040
29417: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29418: LD_ADDR_VAR 0 11
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: LD_INT 3
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 3
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 2
29451: NEG
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29462: LD_ADDR_VAR 0 12
29466: PUSH
29467: LD_INT 2
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 3
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: PUSH
29488: LD_INT 3
29490: PUSH
29491: LD_INT 1
29493: PUSH
29494: EMPTY
29495: LIST
29496: LIST
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: LIST
29502: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29503: LD_ADDR_VAR 0 13
29507: PUSH
29508: LD_INT 3
29510: PUSH
29511: LD_INT 2
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PUSH
29518: LD_INT 3
29520: PUSH
29521: LD_INT 3
29523: PUSH
29524: EMPTY
29525: LIST
29526: LIST
29527: PUSH
29528: LD_INT 2
29530: PUSH
29531: LD_INT 3
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29543: LD_ADDR_VAR 0 14
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: LD_INT 3
29553: PUSH
29554: EMPTY
29555: LIST
29556: LIST
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 3
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 2
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29584: LD_ADDR_VAR 0 15
29588: PUSH
29589: LD_INT 2
29591: NEG
29592: PUSH
29593: LD_INT 1
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 3
29602: NEG
29603: PUSH
29604: LD_INT 0
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: NEG
29614: PUSH
29615: LD_INT 1
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29628: LD_ADDR_VAR 0 16
29632: PUSH
29633: LD_INT 2
29635: NEG
29636: PUSH
29637: LD_INT 3
29639: NEG
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 3
29647: NEG
29648: PUSH
29649: LD_INT 2
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 3
29659: NEG
29660: PUSH
29661: LD_INT 3
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29674: LD_ADDR_VAR 0 17
29678: PUSH
29679: LD_INT 1
29681: NEG
29682: PUSH
29683: LD_INT 3
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: LD_INT 3
29696: NEG
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: LD_INT 2
29707: NEG
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29718: LD_ADDR_VAR 0 18
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 3
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 3
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: EMPTY
29755: LIST
29756: LIST
29757: LIST
29758: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29759: LD_ADDR_VAR 0 19
29763: PUSH
29764: LD_INT 3
29766: PUSH
29767: LD_INT 2
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: LD_INT 3
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 2
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29799: LD_ADDR_VAR 0 20
29803: PUSH
29804: LD_INT 1
29806: PUSH
29807: LD_INT 3
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: PUSH
29814: LD_INT 0
29816: PUSH
29817: LD_INT 3
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: NEG
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29840: LD_ADDR_VAR 0 21
29844: PUSH
29845: LD_INT 2
29847: NEG
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 3
29858: NEG
29859: PUSH
29860: LD_INT 0
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 3
29869: NEG
29870: PUSH
29871: LD_INT 1
29873: NEG
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: LIST
29883: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29884: LD_ADDR_VAR 0 22
29888: PUSH
29889: LD_INT 2
29891: NEG
29892: PUSH
29893: LD_INT 3
29895: NEG
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: PUSH
29901: LD_INT 3
29903: NEG
29904: PUSH
29905: LD_INT 2
29907: NEG
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 3
29915: NEG
29916: PUSH
29917: LD_INT 3
29919: NEG
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29930: LD_ADDR_VAR 0 23
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 3
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 4
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 3
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: EMPTY
29970: LIST
29971: LIST
29972: LIST
29973: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29974: LD_ADDR_VAR 0 24
29978: PUSH
29979: LD_INT 3
29981: PUSH
29982: LD_INT 0
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 1
29994: NEG
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: PUSH
30000: LD_INT 4
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: LIST
30014: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
30015: LD_ADDR_VAR 0 25
30019: PUSH
30020: LD_INT 3
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: LD_INT 4
30032: PUSH
30033: LD_INT 3
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 3
30042: PUSH
30043: LD_INT 4
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: PUSH
30050: EMPTY
30051: LIST
30052: LIST
30053: LIST
30054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
30055: LD_ADDR_VAR 0 26
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 3
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 1
30072: PUSH
30073: LD_INT 4
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 3
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
30096: LD_ADDR_VAR 0 27
30100: PUSH
30101: LD_INT 3
30103: NEG
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 3
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 4
30125: NEG
30126: PUSH
30127: LD_INT 1
30129: NEG
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30140: LD_ADDR_VAR 0 28
30144: PUSH
30145: LD_INT 3
30147: NEG
30148: PUSH
30149: LD_INT 3
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 3
30159: NEG
30160: PUSH
30161: LD_INT 4
30163: NEG
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 4
30171: NEG
30172: PUSH
30173: LD_INT 3
30175: NEG
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30186: LD_ADDR_VAR 0 29
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: LD_INT 3
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 0
30205: PUSH
30206: LD_INT 3
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 1
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: NEG
30228: PUSH
30229: LD_INT 4
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 0
30239: PUSH
30240: LD_INT 4
30242: NEG
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: LD_INT 3
30253: NEG
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 5
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 0
30273: PUSH
30274: LD_INT 5
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: LD_INT 4
30287: NEG
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 6
30299: NEG
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 0
30307: PUSH
30308: LD_INT 6
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: PUSH
30319: LD_INT 5
30321: NEG
30322: PUSH
30323: EMPTY
30324: LIST
30325: LIST
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30341: LD_ADDR_VAR 0 30
30345: PUSH
30346: LD_INT 2
30348: PUSH
30349: LD_INT 1
30351: NEG
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: PUSH
30357: LD_INT 3
30359: PUSH
30360: LD_INT 0
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: LD_INT 3
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 3
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 4
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: LD_INT 1
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 4
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: LD_INT 0
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: LD_INT 1
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 5
30441: PUSH
30442: LD_INT 1
30444: NEG
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 6
30452: PUSH
30453: LD_INT 0
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 6
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30484: LD_ADDR_VAR 0 31
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 2
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: LD_INT 3
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 2
30511: PUSH
30512: LD_INT 3
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 4
30521: PUSH
30522: LD_INT 3
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: LD_INT 4
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 3
30541: PUSH
30542: LD_INT 4
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 5
30551: PUSH
30552: LD_INT 4
30554: PUSH
30555: EMPTY
30556: LIST
30557: LIST
30558: PUSH
30559: LD_INT 5
30561: PUSH
30562: LD_INT 5
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 4
30571: PUSH
30572: LD_INT 5
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 6
30581: PUSH
30582: LD_INT 5
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PUSH
30589: LD_INT 6
30591: PUSH
30592: LD_INT 6
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 5
30601: PUSH
30602: LD_INT 6
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30623: LD_ADDR_VAR 0 32
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: LD_INT 3
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: PUSH
30638: LD_INT 0
30640: PUSH
30641: LD_INT 3
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PUSH
30652: LD_INT 2
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: LD_INT 4
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 4
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 1
30681: NEG
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 5
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 4
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: PUSH
30724: LD_INT 6
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 0
30733: PUSH
30734: LD_INT 6
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 1
30743: NEG
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30766: LD_ADDR_VAR 0 33
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 3
30784: NEG
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 3
30795: NEG
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: PUSH
30805: LD_INT 3
30807: NEG
30808: PUSH
30809: LD_INT 1
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 4
30818: NEG
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: EMPTY
30824: LIST
30825: LIST
30826: PUSH
30827: LD_INT 4
30829: NEG
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: PUSH
30839: LD_INT 4
30841: NEG
30842: PUSH
30843: LD_INT 1
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 5
30852: NEG
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 5
30863: NEG
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: PUSH
30873: LD_INT 5
30875: NEG
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 6
30886: NEG
30887: PUSH
30888: LD_INT 0
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 6
30897: NEG
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30921: LD_ADDR_VAR 0 34
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: LD_INT 3
30932: NEG
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 3
30940: NEG
30941: PUSH
30942: LD_INT 2
30944: NEG
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 3
30952: NEG
30953: PUSH
30954: LD_INT 3
30956: NEG
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 3
30964: NEG
30965: PUSH
30966: LD_INT 4
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 4
30976: NEG
30977: PUSH
30978: LD_INT 3
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 4
30988: NEG
30989: PUSH
30990: LD_INT 4
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 4
31000: NEG
31001: PUSH
31002: LD_INT 5
31004: NEG
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: LD_INT 5
31012: NEG
31013: PUSH
31014: LD_INT 4
31016: NEG
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 5
31024: NEG
31025: PUSH
31026: LD_INT 5
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 5
31036: NEG
31037: PUSH
31038: LD_INT 6
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 6
31048: NEG
31049: PUSH
31050: LD_INT 5
31052: NEG
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 6
31060: NEG
31061: PUSH
31062: LD_INT 6
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
31084: LD_ADDR_VAR 0 41
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 3
31106: NEG
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: LD_INT 2
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
31128: LD_ADDR_VAR 0 42
31132: PUSH
31133: LD_INT 2
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 2
31145: PUSH
31146: LD_INT 1
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 3
31156: PUSH
31157: LD_INT 1
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31169: LD_ADDR_VAR 0 43
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 3
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 2
31196: PUSH
31197: LD_INT 3
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: LIST
31208: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31209: LD_ADDR_VAR 0 44
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: LD_INT 3
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: PUSH
31234: LD_INT 1
31236: NEG
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31250: LD_ADDR_VAR 0 45
31254: PUSH
31255: LD_INT 2
31257: NEG
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: LD_INT 1
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 3
31279: NEG
31280: PUSH
31281: LD_INT 1
31283: NEG
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: EMPTY
31290: LIST
31291: LIST
31292: LIST
31293: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31294: LD_ADDR_VAR 0 46
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: LD_INT 2
31305: NEG
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 3
31317: NEG
31318: PUSH
31319: EMPTY
31320: LIST
31321: LIST
31322: PUSH
31323: LD_INT 3
31325: NEG
31326: PUSH
31327: LD_INT 2
31329: NEG
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31340: LD_ADDR_VAR 0 47
31344: PUSH
31345: LD_INT 2
31347: NEG
31348: PUSH
31349: LD_INT 3
31351: NEG
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 1
31359: NEG
31360: PUSH
31361: LD_INT 3
31363: NEG
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31373: LD_ADDR_VAR 0 48
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 2
31383: NEG
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: PUSH
31389: LD_INT 2
31391: PUSH
31392: LD_INT 1
31394: NEG
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31404: LD_ADDR_VAR 0 49
31408: PUSH
31409: LD_INT 3
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 3
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31433: LD_ADDR_VAR 0 50
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: LD_INT 3
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31462: LD_ADDR_VAR 0 51
31466: PUSH
31467: LD_INT 1
31469: NEG
31470: PUSH
31471: LD_INT 2
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 1
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31493: LD_ADDR_VAR 0 52
31497: PUSH
31498: LD_INT 3
31500: NEG
31501: PUSH
31502: LD_INT 1
31504: NEG
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 3
31512: NEG
31513: PUSH
31514: LD_INT 2
31516: NEG
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31526: LD_ADDR_VAR 0 53
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 3
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 0
31545: PUSH
31546: LD_INT 3
31548: NEG
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: LD_INT 2
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: LIST
31569: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31570: LD_ADDR_VAR 0 54
31574: PUSH
31575: LD_INT 2
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: LD_INT 1
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31611: LD_ADDR_VAR 0 55
31615: PUSH
31616: LD_INT 3
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 3
31628: PUSH
31629: LD_INT 3
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: LD_INT 3
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31651: LD_ADDR_VAR 0 56
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 0
31668: PUSH
31669: LD_INT 3
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: NEG
31679: PUSH
31680: LD_INT 2
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31692: LD_ADDR_VAR 0 57
31696: PUSH
31697: LD_INT 2
31699: NEG
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 3
31710: NEG
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 3
31721: NEG
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31736: LD_ADDR_VAR 0 58
31740: PUSH
31741: LD_INT 2
31743: NEG
31744: PUSH
31745: LD_INT 3
31747: NEG
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 3
31755: NEG
31756: PUSH
31757: LD_INT 2
31759: NEG
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: PUSH
31765: LD_INT 3
31767: NEG
31768: PUSH
31769: LD_INT 3
31771: NEG
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: LIST
31781: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31782: LD_ADDR_VAR 0 59
31786: PUSH
31787: LD_INT 1
31789: NEG
31790: PUSH
31791: LD_INT 2
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 2
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: LIST
31825: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31826: LD_ADDR_VAR 0 60
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: LD_INT 2
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: LIST
31866: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31867: LD_ADDR_VAR 0 61
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 1
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31907: LD_ADDR_VAR 0 62
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 2
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: LD_INT 1
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31948: LD_ADDR_VAR 0 63
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 2
31977: NEG
31978: PUSH
31979: LD_INT 1
31981: NEG
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31992: LD_ADDR_VAR 0 64
31996: PUSH
31997: LD_INT 1
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: NEG
32012: PUSH
32013: LD_INT 1
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 2
32023: NEG
32024: PUSH
32025: LD_INT 2
32027: NEG
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
// end ; 2 :
32038: GO 35304
32040: LD_INT 2
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 35303
32048: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
32049: LD_ADDR_VAR 0 29
32053: PUSH
32054: LD_INT 4
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 4
32066: PUSH
32067: LD_INT 1
32069: NEG
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 5
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 5
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 4
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 3
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 3
32117: PUSH
32118: LD_INT 1
32120: NEG
32121: PUSH
32122: EMPTY
32123: LIST
32124: LIST
32125: PUSH
32126: LD_INT 3
32128: PUSH
32129: LD_INT 2
32131: NEG
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 5
32139: PUSH
32140: LD_INT 2
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 3
32149: PUSH
32150: LD_INT 3
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: LD_INT 3
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: PUSH
32177: LD_INT 4
32179: PUSH
32180: LD_INT 4
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: PUSH
32187: LD_INT 3
32189: PUSH
32190: LD_INT 4
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: LD_INT 2
32199: PUSH
32200: LD_INT 3
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 2
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 4
32219: PUSH
32220: LD_INT 2
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 4
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 0
32239: PUSH
32240: LD_INT 4
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 3
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: PUSH
32260: LD_INT 4
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: PUSH
32267: LD_INT 1
32269: PUSH
32270: LD_INT 5
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: LD_INT 5
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 1
32289: NEG
32290: PUSH
32291: LD_INT 4
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: PUSH
32309: LD_INT 2
32311: PUSH
32312: LD_INT 5
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 3
32332: NEG
32333: PUSH
32334: LD_INT 0
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: LD_INT 3
32343: NEG
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: LD_INT 2
32355: NEG
32356: PUSH
32357: LD_INT 0
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: NEG
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 1
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: PUSH
32386: LD_INT 4
32388: NEG
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 4
32399: NEG
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 4
32411: NEG
32412: PUSH
32413: LD_INT 2
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 2
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 4
32434: NEG
32435: PUSH
32436: LD_INT 4
32438: NEG
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 4
32446: NEG
32447: PUSH
32448: LD_INT 5
32450: NEG
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 3
32458: NEG
32459: PUSH
32460: LD_INT 4
32462: NEG
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 3
32470: NEG
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 4
32482: NEG
32483: PUSH
32484: LD_INT 3
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 5
32494: NEG
32495: PUSH
32496: LD_INT 4
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 5
32506: NEG
32507: PUSH
32508: LD_INT 5
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 3
32518: NEG
32519: PUSH
32520: LD_INT 5
32522: NEG
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 5
32530: NEG
32531: PUSH
32532: LD_INT 3
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32587: LD_ADDR_VAR 0 30
32591: PUSH
32592: LD_INT 4
32594: PUSH
32595: LD_INT 4
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 4
32604: PUSH
32605: LD_INT 3
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 5
32614: PUSH
32615: LD_INT 4
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 5
32624: PUSH
32625: LD_INT 5
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 4
32634: PUSH
32635: LD_INT 5
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 3
32644: PUSH
32645: LD_INT 4
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 3
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 5
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 3
32674: PUSH
32675: LD_INT 5
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: LD_INT 3
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 4
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 3
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 2
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 2
32756: PUSH
32757: LD_INT 4
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 2
32766: NEG
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 4
32777: NEG
32778: PUSH
32779: LD_INT 0
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 4
32788: NEG
32789: PUSH
32790: LD_INT 1
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: LD_INT 0
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: LD_INT 1
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 4
32822: NEG
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 5
32833: NEG
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 5
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 5
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 3
32868: NEG
32869: PUSH
32870: LD_INT 2
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 3
32879: NEG
32880: PUSH
32881: LD_INT 3
32883: NEG
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: LD_INT 3
32891: NEG
32892: PUSH
32893: LD_INT 4
32895: NEG
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 2
32903: NEG
32904: PUSH
32905: LD_INT 3
32907: NEG
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: LD_INT 2
32919: NEG
32920: PUSH
32921: EMPTY
32922: LIST
32923: LIST
32924: PUSH
32925: LD_INT 3
32927: NEG
32928: PUSH
32929: LD_INT 2
32931: NEG
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 4
32939: NEG
32940: PUSH
32941: LD_INT 3
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 4
32951: NEG
32952: PUSH
32953: LD_INT 4
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 2
32963: NEG
32964: PUSH
32965: LD_INT 4
32967: NEG
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 4
32975: NEG
32976: PUSH
32977: LD_INT 2
32979: NEG
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 0
32987: PUSH
32988: LD_INT 4
32990: NEG
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 5
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 4
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 1
33020: PUSH
33021: LD_INT 3
33023: NEG
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 0
33031: PUSH
33032: LD_INT 3
33034: NEG
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 1
33042: NEG
33043: PUSH
33044: LD_INT 4
33046: NEG
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: LD_INT 5
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 3
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: LD_INT 5
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33134: LD_ADDR_VAR 0 31
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 4
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 0
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 4
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: LD_INT 5
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 5
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 4
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 5
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 2
33223: NEG
33224: PUSH
33225: LD_INT 3
33227: PUSH
33228: EMPTY
33229: LIST
33230: LIST
33231: PUSH
33232: LD_INT 3
33234: NEG
33235: PUSH
33236: LD_INT 0
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: LD_INT 3
33245: NEG
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 2
33257: NEG
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 2
33268: NEG
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: NEG
33280: PUSH
33281: LD_INT 1
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 4
33290: NEG
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 4
33301: NEG
33302: PUSH
33303: LD_INT 1
33305: NEG
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 4
33313: NEG
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 4
33336: NEG
33337: PUSH
33338: LD_INT 4
33340: NEG
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: LD_INT 5
33352: NEG
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 3
33360: NEG
33361: PUSH
33362: LD_INT 4
33364: NEG
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: LD_INT 3
33372: NEG
33373: PUSH
33374: LD_INT 3
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 4
33384: NEG
33385: PUSH
33386: LD_INT 3
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 5
33396: NEG
33397: PUSH
33398: LD_INT 4
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 5
33408: NEG
33409: PUSH
33410: LD_INT 5
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: LD_INT 5
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 5
33432: NEG
33433: PUSH
33434: LD_INT 3
33436: NEG
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 3
33447: NEG
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: LD_INT 4
33458: NEG
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 3
33469: NEG
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 1
33477: PUSH
33478: LD_INT 2
33480: NEG
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 3
33503: NEG
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 1
33511: NEG
33512: PUSH
33513: LD_INT 4
33515: NEG
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 2
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 2
33534: NEG
33535: PUSH
33536: LD_INT 4
33538: NEG
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 4
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: LD_INT 0
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 4
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: LD_INT 0
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 1
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: LD_INT 2
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 5
33629: PUSH
33630: LD_INT 2
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33684: LD_ADDR_VAR 0 32
33688: PUSH
33689: LD_INT 4
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 4
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 3
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 3
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 4
33736: NEG
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 5
33747: NEG
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: PUSH
33756: LD_INT 5
33758: NEG
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 5
33770: NEG
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 3
33782: NEG
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 3
33793: NEG
33794: PUSH
33795: LD_INT 3
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 3
33805: NEG
33806: PUSH
33807: LD_INT 4
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: LD_INT 3
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 3
33841: NEG
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 4
33853: NEG
33854: PUSH
33855: LD_INT 3
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 4
33865: NEG
33866: PUSH
33867: LD_INT 4
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 2
33877: NEG
33878: PUSH
33879: LD_INT 4
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 4
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 4
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 0
33912: PUSH
33913: LD_INT 5
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: LD_INT 4
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 1
33934: PUSH
33935: LD_INT 3
33937: NEG
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 0
33945: PUSH
33946: LD_INT 3
33948: NEG
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 4
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 5
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: NEG
33992: PUSH
33993: LD_INT 5
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 3
34003: PUSH
34004: LD_INT 0
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 3
34013: PUSH
34014: LD_INT 1
34016: NEG
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 4
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 4
34034: PUSH
34035: LD_INT 1
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: LD_INT 3
34044: PUSH
34045: LD_INT 1
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 2
34075: PUSH
34076: LD_INT 2
34078: NEG
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 4
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 4
34096: PUSH
34097: LD_INT 4
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 4
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 5
34116: PUSH
34117: LD_INT 4
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 5
34126: PUSH
34127: LD_INT 5
34129: PUSH
34130: EMPTY
34131: LIST
34132: LIST
34133: PUSH
34134: LD_INT 4
34136: PUSH
34137: LD_INT 5
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: PUSH
34144: LD_INT 3
34146: PUSH
34147: LD_INT 4
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 3
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 5
34166: PUSH
34167: LD_INT 3
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 3
34176: PUSH
34177: LD_INT 5
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34231: LD_ADDR_VAR 0 33
34235: PUSH
34236: LD_INT 4
34238: NEG
34239: PUSH
34240: LD_INT 4
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 4
34250: NEG
34251: PUSH
34252: LD_INT 5
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 3
34262: NEG
34263: PUSH
34264: LD_INT 4
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 3
34274: NEG
34275: PUSH
34276: LD_INT 3
34278: NEG
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 4
34286: NEG
34287: PUSH
34288: LD_INT 3
34290: NEG
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 5
34298: NEG
34299: PUSH
34300: LD_INT 4
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 5
34310: NEG
34311: PUSH
34312: LD_INT 5
34314: NEG
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 3
34322: NEG
34323: PUSH
34324: LD_INT 5
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 5
34334: NEG
34335: PUSH
34336: LD_INT 3
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 3
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 0
34357: PUSH
34358: LD_INT 4
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: LD_INT 3
34371: NEG
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 0
34390: PUSH
34391: LD_INT 2
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 3
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: LD_INT 4
34417: NEG
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 2
34428: NEG
34429: PUSH
34430: EMPTY
34431: LIST
34432: LIST
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 4
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 4
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: PUSH
34456: LD_INT 4
34458: PUSH
34459: LD_INT 1
34461: NEG
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 5
34469: PUSH
34470: LD_INT 0
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: LD_INT 5
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: PUSH
34487: LD_INT 4
34489: PUSH
34490: LD_INT 1
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 3
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 3
34509: PUSH
34510: LD_INT 1
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 3
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: LD_INT 2
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 3
34541: PUSH
34542: LD_INT 3
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 3
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 4
34561: PUSH
34562: LD_INT 3
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 4
34571: PUSH
34572: LD_INT 4
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 3
34581: PUSH
34582: LD_INT 4
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: LD_INT 3
34594: PUSH
34595: EMPTY
34596: LIST
34597: LIST
34598: PUSH
34599: LD_INT 2
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: PUSH
34609: LD_INT 4
34611: PUSH
34612: LD_INT 2
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: PUSH
34622: LD_INT 4
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 0
34631: PUSH
34632: LD_INT 4
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 0
34641: PUSH
34642: LD_INT 3
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 1
34651: PUSH
34652: LD_INT 4
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: PUSH
34662: LD_INT 5
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 5
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: LD_INT 4
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: NEG
34693: PUSH
34694: LD_INT 3
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 2
34703: PUSH
34704: LD_INT 5
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 2
34713: NEG
34714: PUSH
34715: LD_INT 3
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34769: LD_ADDR_VAR 0 34
34773: PUSH
34774: LD_INT 0
34776: PUSH
34777: LD_INT 4
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 5
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: LD_INT 4
34801: NEG
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: PUSH
34810: LD_INT 3
34812: NEG
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 0
34820: PUSH
34821: LD_INT 3
34823: NEG
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 4
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: LD_INT 5
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 2
34855: PUSH
34856: LD_INT 3
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: NEG
34867: PUSH
34868: LD_INT 5
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 3
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 3
34888: PUSH
34889: LD_INT 1
34891: NEG
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 4
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 4
34909: PUSH
34910: LD_INT 1
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 0
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: LD_INT 2
34953: NEG
34954: PUSH
34955: EMPTY
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 4
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: LD_INT 4
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 4
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: LD_INT 4
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 5
35001: PUSH
35002: LD_INT 5
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: LD_INT 5
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 3
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 5
35041: PUSH
35042: LD_INT 3
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 3
35051: PUSH
35052: LD_INT 5
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 0
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: PUSH
35082: LD_INT 3
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 1
35111: NEG
35112: PUSH
35113: LD_INT 3
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: NEG
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 4
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: NEG
35144: PUSH
35145: LD_INT 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 4
35154: NEG
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 4
35165: NEG
35166: PUSH
35167: LD_INT 1
35169: NEG
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: LD_INT 1
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 4
35199: NEG
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 5
35210: NEG
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 5
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 5
35233: NEG
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 3
35245: NEG
35246: PUSH
35247: LD_INT 2
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// end ; end ;
35301: GO 35304
35303: POP
// case btype of b_depot , b_warehouse :
35304: LD_VAR 0 1
35308: PUSH
35309: LD_INT 0
35311: DOUBLE
35312: EQUAL
35313: IFTRUE 35323
35315: LD_INT 1
35317: DOUBLE
35318: EQUAL
35319: IFTRUE 35323
35321: GO 35524
35323: POP
// case nation of nation_american :
35324: LD_VAR 0 5
35328: PUSH
35329: LD_INT 1
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35393
35337: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35338: LD_ADDR_VAR 0 9
35342: PUSH
35343: LD_VAR 0 11
35347: PUSH
35348: LD_VAR 0 12
35352: PUSH
35353: LD_VAR 0 13
35357: PUSH
35358: LD_VAR 0 14
35362: PUSH
35363: LD_VAR 0 15
35367: PUSH
35368: LD_VAR 0 16
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: PUSH
35381: LD_VAR 0 4
35385: PUSH
35386: LD_INT 1
35388: PLUS
35389: ARRAY
35390: ST_TO_ADDR
35391: GO 35522
35393: LD_INT 2
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35401
35399: GO 35457
35401: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_VAR 0 17
35411: PUSH
35412: LD_VAR 0 18
35416: PUSH
35417: LD_VAR 0 19
35421: PUSH
35422: LD_VAR 0 20
35426: PUSH
35427: LD_VAR 0 21
35431: PUSH
35432: LD_VAR 0 22
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: PUSH
35445: LD_VAR 0 4
35449: PUSH
35450: LD_INT 1
35452: PLUS
35453: ARRAY
35454: ST_TO_ADDR
35455: GO 35522
35457: LD_INT 3
35459: DOUBLE
35460: EQUAL
35461: IFTRUE 35465
35463: GO 35521
35465: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35466: LD_ADDR_VAR 0 9
35470: PUSH
35471: LD_VAR 0 23
35475: PUSH
35476: LD_VAR 0 24
35480: PUSH
35481: LD_VAR 0 25
35485: PUSH
35486: LD_VAR 0 26
35490: PUSH
35491: LD_VAR 0 27
35495: PUSH
35496: LD_VAR 0 28
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: PUSH
35509: LD_VAR 0 4
35513: PUSH
35514: LD_INT 1
35516: PLUS
35517: ARRAY
35518: ST_TO_ADDR
35519: GO 35522
35521: POP
35522: GO 36077
35524: LD_INT 2
35526: DOUBLE
35527: EQUAL
35528: IFTRUE 35538
35530: LD_INT 3
35532: DOUBLE
35533: EQUAL
35534: IFTRUE 35538
35536: GO 35594
35538: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_VAR 0 29
35548: PUSH
35549: LD_VAR 0 30
35553: PUSH
35554: LD_VAR 0 31
35558: PUSH
35559: LD_VAR 0 32
35563: PUSH
35564: LD_VAR 0 33
35568: PUSH
35569: LD_VAR 0 34
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: PUSH
35582: LD_VAR 0 4
35586: PUSH
35587: LD_INT 1
35589: PLUS
35590: ARRAY
35591: ST_TO_ADDR
35592: GO 36077
35594: LD_INT 16
35596: DOUBLE
35597: EQUAL
35598: IFTRUE 35656
35600: LD_INT 17
35602: DOUBLE
35603: EQUAL
35604: IFTRUE 35656
35606: LD_INT 18
35608: DOUBLE
35609: EQUAL
35610: IFTRUE 35656
35612: LD_INT 19
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35656
35618: LD_INT 22
35620: DOUBLE
35621: EQUAL
35622: IFTRUE 35656
35624: LD_INT 20
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35656
35630: LD_INT 21
35632: DOUBLE
35633: EQUAL
35634: IFTRUE 35656
35636: LD_INT 23
35638: DOUBLE
35639: EQUAL
35640: IFTRUE 35656
35642: LD_INT 24
35644: DOUBLE
35645: EQUAL
35646: IFTRUE 35656
35648: LD_INT 25
35650: DOUBLE
35651: EQUAL
35652: IFTRUE 35656
35654: GO 35712
35656: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35657: LD_ADDR_VAR 0 9
35661: PUSH
35662: LD_VAR 0 35
35666: PUSH
35667: LD_VAR 0 36
35671: PUSH
35672: LD_VAR 0 37
35676: PUSH
35677: LD_VAR 0 38
35681: PUSH
35682: LD_VAR 0 39
35686: PUSH
35687: LD_VAR 0 40
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: PUSH
35700: LD_VAR 0 4
35704: PUSH
35705: LD_INT 1
35707: PLUS
35708: ARRAY
35709: ST_TO_ADDR
35710: GO 36077
35712: LD_INT 6
35714: DOUBLE
35715: EQUAL
35716: IFTRUE 35768
35718: LD_INT 7
35720: DOUBLE
35721: EQUAL
35722: IFTRUE 35768
35724: LD_INT 8
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35768
35730: LD_INT 13
35732: DOUBLE
35733: EQUAL
35734: IFTRUE 35768
35736: LD_INT 12
35738: DOUBLE
35739: EQUAL
35740: IFTRUE 35768
35742: LD_INT 15
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35768
35748: LD_INT 11
35750: DOUBLE
35751: EQUAL
35752: IFTRUE 35768
35754: LD_INT 14
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35768
35760: LD_INT 10
35762: DOUBLE
35763: EQUAL
35764: IFTRUE 35768
35766: GO 35824
35768: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35769: LD_ADDR_VAR 0 9
35773: PUSH
35774: LD_VAR 0 41
35778: PUSH
35779: LD_VAR 0 42
35783: PUSH
35784: LD_VAR 0 43
35788: PUSH
35789: LD_VAR 0 44
35793: PUSH
35794: LD_VAR 0 45
35798: PUSH
35799: LD_VAR 0 46
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: LD_VAR 0 4
35816: PUSH
35817: LD_INT 1
35819: PLUS
35820: ARRAY
35821: ST_TO_ADDR
35822: GO 36077
35824: LD_INT 36
35826: DOUBLE
35827: EQUAL
35828: IFTRUE 35832
35830: GO 35888
35832: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35833: LD_ADDR_VAR 0 9
35837: PUSH
35838: LD_VAR 0 47
35842: PUSH
35843: LD_VAR 0 48
35847: PUSH
35848: LD_VAR 0 49
35852: PUSH
35853: LD_VAR 0 50
35857: PUSH
35858: LD_VAR 0 51
35862: PUSH
35863: LD_VAR 0 52
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: PUSH
35876: LD_VAR 0 4
35880: PUSH
35881: LD_INT 1
35883: PLUS
35884: ARRAY
35885: ST_TO_ADDR
35886: GO 36077
35888: LD_INT 4
35890: DOUBLE
35891: EQUAL
35892: IFTRUE 35914
35894: LD_INT 5
35896: DOUBLE
35897: EQUAL
35898: IFTRUE 35914
35900: LD_INT 34
35902: DOUBLE
35903: EQUAL
35904: IFTRUE 35914
35906: LD_INT 37
35908: DOUBLE
35909: EQUAL
35910: IFTRUE 35914
35912: GO 35970
35914: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35915: LD_ADDR_VAR 0 9
35919: PUSH
35920: LD_VAR 0 53
35924: PUSH
35925: LD_VAR 0 54
35929: PUSH
35930: LD_VAR 0 55
35934: PUSH
35935: LD_VAR 0 56
35939: PUSH
35940: LD_VAR 0 57
35944: PUSH
35945: LD_VAR 0 58
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: PUSH
35958: LD_VAR 0 4
35962: PUSH
35963: LD_INT 1
35965: PLUS
35966: ARRAY
35967: ST_TO_ADDR
35968: GO 36077
35970: LD_INT 31
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 36020
35976: LD_INT 32
35978: DOUBLE
35979: EQUAL
35980: IFTRUE 36020
35982: LD_INT 33
35984: DOUBLE
35985: EQUAL
35986: IFTRUE 36020
35988: LD_INT 27
35990: DOUBLE
35991: EQUAL
35992: IFTRUE 36020
35994: LD_INT 26
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36020
36000: LD_INT 28
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36020
36006: LD_INT 29
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36020
36012: LD_INT 30
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36076
36020: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
36021: LD_ADDR_VAR 0 9
36025: PUSH
36026: LD_VAR 0 59
36030: PUSH
36031: LD_VAR 0 60
36035: PUSH
36036: LD_VAR 0 61
36040: PUSH
36041: LD_VAR 0 62
36045: PUSH
36046: LD_VAR 0 63
36050: PUSH
36051: LD_VAR 0 64
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: PUSH
36064: LD_VAR 0 4
36068: PUSH
36069: LD_INT 1
36071: PLUS
36072: ARRAY
36073: ST_TO_ADDR
36074: GO 36077
36076: POP
// temp_list2 = [ ] ;
36077: LD_ADDR_VAR 0 10
36081: PUSH
36082: EMPTY
36083: ST_TO_ADDR
// for i in temp_list do
36084: LD_ADDR_VAR 0 8
36088: PUSH
36089: LD_VAR 0 9
36093: PUSH
36094: FOR_IN
36095: IFFALSE 36147
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
36097: LD_ADDR_VAR 0 10
36101: PUSH
36102: LD_VAR 0 10
36106: PUSH
36107: LD_VAR 0 8
36111: PUSH
36112: LD_INT 1
36114: ARRAY
36115: PUSH
36116: LD_VAR 0 2
36120: PLUS
36121: PUSH
36122: LD_VAR 0 8
36126: PUSH
36127: LD_INT 2
36129: ARRAY
36130: PUSH
36131: LD_VAR 0 3
36135: PLUS
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: EMPTY
36142: LIST
36143: ADD
36144: ST_TO_ADDR
36145: GO 36094
36147: POP
36148: POP
// result = temp_list2 ;
36149: LD_ADDR_VAR 0 7
36153: PUSH
36154: LD_VAR 0 10
36158: ST_TO_ADDR
// end ;
36159: LD_VAR 0 7
36163: RET
// export function EnemyInRange ( unit , dist ) ; begin
36164: LD_INT 0
36166: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36167: LD_ADDR_VAR 0 3
36171: PUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: CALL_OW 255
36181: PPUSH
36182: LD_VAR 0 1
36186: PPUSH
36187: CALL_OW 250
36191: PPUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 251
36201: PPUSH
36202: LD_VAR 0 2
36206: PPUSH
36207: CALL 9421 0 4
36211: PUSH
36212: LD_INT 4
36214: ARRAY
36215: ST_TO_ADDR
// end ;
36216: LD_VAR 0 3
36220: RET
// export function PlayerSeeMe ( unit ) ; begin
36221: LD_INT 0
36223: PPUSH
// result := See ( your_side , unit ) ;
36224: LD_ADDR_VAR 0 2
36228: PUSH
36229: LD_OWVAR 2
36233: PPUSH
36234: LD_VAR 0 1
36238: PPUSH
36239: CALL_OW 292
36243: ST_TO_ADDR
// end ;
36244: LD_VAR 0 2
36248: RET
// export function ReverseDir ( unit ) ; begin
36249: LD_INT 0
36251: PPUSH
// if not unit then
36252: LD_VAR 0 1
36256: NOT
36257: IFFALSE 36261
// exit ;
36259: GO 36284
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36261: LD_ADDR_VAR 0 2
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 254
36275: PUSH
36276: LD_INT 3
36278: PLUS
36279: PUSH
36280: LD_INT 6
36282: MOD
36283: ST_TO_ADDR
// end ;
36284: LD_VAR 0 2
36288: RET
// export function ReverseArray ( array ) ; var i ; begin
36289: LD_INT 0
36291: PPUSH
36292: PPUSH
// if not array then
36293: LD_VAR 0 1
36297: NOT
36298: IFFALSE 36302
// exit ;
36300: GO 36357
// result := [ ] ;
36302: LD_ADDR_VAR 0 2
36306: PUSH
36307: EMPTY
36308: ST_TO_ADDR
// for i := array downto 1 do
36309: LD_ADDR_VAR 0 3
36313: PUSH
36314: DOUBLE
36315: LD_VAR 0 1
36319: INC
36320: ST_TO_ADDR
36321: LD_INT 1
36323: PUSH
36324: FOR_DOWNTO
36325: IFFALSE 36355
// result := Join ( result , array [ i ] ) ;
36327: LD_ADDR_VAR 0 2
36331: PUSH
36332: LD_VAR 0 2
36336: PPUSH
36337: LD_VAR 0 1
36341: PUSH
36342: LD_VAR 0 3
36346: ARRAY
36347: PPUSH
36348: CALL 41209 0 2
36352: ST_TO_ADDR
36353: GO 36324
36355: POP
36356: POP
// end ;
36357: LD_VAR 0 2
36361: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36362: LD_INT 0
36364: PPUSH
36365: PPUSH
36366: PPUSH
36367: PPUSH
36368: PPUSH
36369: PPUSH
// if not unit or not hexes then
36370: LD_VAR 0 1
36374: NOT
36375: IFTRUE 36384
36377: PUSH
36378: LD_VAR 0 2
36382: NOT
36383: OR
36384: IFFALSE 36388
// exit ;
36386: GO 36511
// dist := 9999 ;
36388: LD_ADDR_VAR 0 5
36392: PUSH
36393: LD_INT 9999
36395: ST_TO_ADDR
// for i = 1 to hexes do
36396: LD_ADDR_VAR 0 4
36400: PUSH
36401: DOUBLE
36402: LD_INT 1
36404: DEC
36405: ST_TO_ADDR
36406: LD_VAR 0 2
36410: PUSH
36411: FOR_TO
36412: IFFALSE 36499
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36414: LD_ADDR_VAR 0 6
36418: PUSH
36419: LD_VAR 0 1
36423: PPUSH
36424: LD_VAR 0 2
36428: PUSH
36429: LD_VAR 0 4
36433: ARRAY
36434: PUSH
36435: LD_INT 1
36437: ARRAY
36438: PPUSH
36439: LD_VAR 0 2
36443: PUSH
36444: LD_VAR 0 4
36448: ARRAY
36449: PUSH
36450: LD_INT 2
36452: ARRAY
36453: PPUSH
36454: CALL_OW 297
36458: ST_TO_ADDR
// if tdist < dist then
36459: LD_VAR 0 6
36463: PUSH
36464: LD_VAR 0 5
36468: LESS
36469: IFFALSE 36497
// begin hex := hexes [ i ] ;
36471: LD_ADDR_VAR 0 8
36475: PUSH
36476: LD_VAR 0 2
36480: PUSH
36481: LD_VAR 0 4
36485: ARRAY
36486: ST_TO_ADDR
// dist := tdist ;
36487: LD_ADDR_VAR 0 5
36491: PUSH
36492: LD_VAR 0 6
36496: ST_TO_ADDR
// end ; end ;
36497: GO 36411
36499: POP
36500: POP
// result := hex ;
36501: LD_ADDR_VAR 0 3
36505: PUSH
36506: LD_VAR 0 8
36510: ST_TO_ADDR
// end ;
36511: LD_VAR 0 3
36515: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36516: LD_INT 0
36518: PPUSH
36519: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36520: LD_VAR 0 1
36524: NOT
36525: IFTRUE 36564
36527: PUSH
36528: LD_VAR 0 1
36532: PUSH
36533: LD_INT 21
36535: PUSH
36536: LD_INT 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 23
36545: PUSH
36546: LD_INT 2
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PPUSH
36557: CALL_OW 69
36561: IN
36562: NOT
36563: OR
36564: IFFALSE 36568
// exit ;
36566: GO 36615
// for i = 1 to 3 do
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: DOUBLE
36574: LD_INT 1
36576: DEC
36577: ST_TO_ADDR
36578: LD_INT 3
36580: PUSH
36581: FOR_TO
36582: IFFALSE 36613
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36584: LD_VAR 0 1
36588: PPUSH
36589: CALL_OW 250
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 251
36603: PPUSH
36604: LD_INT 1
36606: PPUSH
36607: CALL_OW 453
36611: GO 36581
36613: POP
36614: POP
// end ;
36615: LD_VAR 0 2
36619: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36620: LD_INT 0
36622: PPUSH
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
// if not unit or not enemy_unit then
36628: LD_VAR 0 1
36632: NOT
36633: IFTRUE 36642
36635: PUSH
36636: LD_VAR 0 2
36640: NOT
36641: OR
36642: IFFALSE 36646
// exit ;
36644: GO 37127
// if GetLives ( i ) < 250 then
36646: LD_VAR 0 4
36650: PPUSH
36651: CALL_OW 256
36655: PUSH
36656: LD_INT 250
36658: LESS
36659: IFFALSE 36672
// begin ComAutodestruct ( i ) ;
36661: LD_VAR 0 4
36665: PPUSH
36666: CALL 36516 0 1
// exit ;
36670: GO 37127
// end ; x := GetX ( enemy_unit ) ;
36672: LD_ADDR_VAR 0 7
36676: PUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: CALL_OW 250
36686: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36687: LD_ADDR_VAR 0 8
36691: PUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: CALL_OW 251
36701: ST_TO_ADDR
// if not x or not y then
36702: LD_VAR 0 7
36706: NOT
36707: IFTRUE 36716
36709: PUSH
36710: LD_VAR 0 8
36714: NOT
36715: OR
36716: IFFALSE 36720
// exit ;
36718: GO 37127
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36720: LD_ADDR_VAR 0 6
36724: PUSH
36725: LD_VAR 0 7
36729: PPUSH
36730: LD_INT 0
36732: PPUSH
36733: LD_INT 4
36735: PPUSH
36736: CALL_OW 272
36740: PUSH
36741: LD_VAR 0 8
36745: PPUSH
36746: LD_INT 0
36748: PPUSH
36749: LD_INT 4
36751: PPUSH
36752: CALL_OW 273
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_VAR 0 7
36765: PPUSH
36766: LD_INT 1
36768: PPUSH
36769: LD_INT 4
36771: PPUSH
36772: CALL_OW 272
36776: PUSH
36777: LD_VAR 0 8
36781: PPUSH
36782: LD_INT 1
36784: PPUSH
36785: LD_INT 4
36787: PPUSH
36788: CALL_OW 273
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_VAR 0 7
36801: PPUSH
36802: LD_INT 2
36804: PPUSH
36805: LD_INT 4
36807: PPUSH
36808: CALL_OW 272
36812: PUSH
36813: LD_VAR 0 8
36817: PPUSH
36818: LD_INT 2
36820: PPUSH
36821: LD_INT 4
36823: PPUSH
36824: CALL_OW 273
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_VAR 0 7
36837: PPUSH
36838: LD_INT 3
36840: PPUSH
36841: LD_INT 4
36843: PPUSH
36844: CALL_OW 272
36848: PUSH
36849: LD_VAR 0 8
36853: PPUSH
36854: LD_INT 3
36856: PPUSH
36857: LD_INT 4
36859: PPUSH
36860: CALL_OW 273
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_VAR 0 7
36873: PPUSH
36874: LD_INT 4
36876: PPUSH
36877: LD_INT 4
36879: PPUSH
36880: CALL_OW 272
36884: PUSH
36885: LD_VAR 0 8
36889: PPUSH
36890: LD_INT 4
36892: PPUSH
36893: LD_INT 4
36895: PPUSH
36896: CALL_OW 273
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_VAR 0 7
36909: PPUSH
36910: LD_INT 5
36912: PPUSH
36913: LD_INT 4
36915: PPUSH
36916: CALL_OW 272
36920: PUSH
36921: LD_VAR 0 8
36925: PPUSH
36926: LD_INT 5
36928: PPUSH
36929: LD_INT 4
36931: PPUSH
36932: CALL_OW 273
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// for i = tmp downto 1 do
36949: LD_ADDR_VAR 0 4
36953: PUSH
36954: DOUBLE
36955: LD_VAR 0 6
36959: INC
36960: ST_TO_ADDR
36961: LD_INT 1
36963: PUSH
36964: FOR_DOWNTO
36965: IFFALSE 37068
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36967: LD_VAR 0 6
36971: PUSH
36972: LD_VAR 0 4
36976: ARRAY
36977: PUSH
36978: LD_INT 1
36980: ARRAY
36981: PPUSH
36982: LD_VAR 0 6
36986: PUSH
36987: LD_VAR 0 4
36991: ARRAY
36992: PUSH
36993: LD_INT 2
36995: ARRAY
36996: PPUSH
36997: CALL_OW 488
37001: NOT
37002: IFTRUE 37044
37004: PUSH
37005: LD_VAR 0 6
37009: PUSH
37010: LD_VAR 0 4
37014: ARRAY
37015: PUSH
37016: LD_INT 1
37018: ARRAY
37019: PPUSH
37020: LD_VAR 0 6
37024: PUSH
37025: LD_VAR 0 4
37029: ARRAY
37030: PUSH
37031: LD_INT 2
37033: ARRAY
37034: PPUSH
37035: CALL_OW 428
37039: PUSH
37040: LD_INT 0
37042: NONEQUAL
37043: OR
37044: IFFALSE 37066
// tmp := Delete ( tmp , i ) ;
37046: LD_ADDR_VAR 0 6
37050: PUSH
37051: LD_VAR 0 6
37055: PPUSH
37056: LD_VAR 0 4
37060: PPUSH
37061: CALL_OW 3
37065: ST_TO_ADDR
37066: GO 36964
37068: POP
37069: POP
// j := GetClosestHex ( unit , tmp ) ;
37070: LD_ADDR_VAR 0 5
37074: PUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: LD_VAR 0 6
37084: PPUSH
37085: CALL 36362 0 2
37089: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_VAR 0 5
37099: PUSH
37100: LD_INT 1
37102: ARRAY
37103: PPUSH
37104: LD_VAR 0 5
37108: PUSH
37109: LD_INT 2
37111: ARRAY
37112: PPUSH
37113: CALL_OW 111
// result := j ;
37117: LD_ADDR_VAR 0 3
37121: PUSH
37122: LD_VAR 0 5
37126: ST_TO_ADDR
// end ;
37127: LD_VAR 0 3
37131: RET
// export function PrepareApemanSoldier ( ) ; begin
37132: LD_INT 0
37134: PPUSH
// uc_nation := 0 ;
37135: LD_ADDR_OWVAR 21
37139: PUSH
37140: LD_INT 0
37142: ST_TO_ADDR
// hc_sex := sex_male ;
37143: LD_ADDR_OWVAR 27
37147: PUSH
37148: LD_INT 1
37150: ST_TO_ADDR
// hc_name :=  ;
37151: LD_ADDR_OWVAR 26
37155: PUSH
37156: LD_STRING 
37158: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37159: LD_ADDR_OWVAR 28
37163: PUSH
37164: LD_INT 15
37166: ST_TO_ADDR
// hc_gallery :=  ;
37167: LD_ADDR_OWVAR 33
37171: PUSH
37172: LD_STRING 
37174: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37175: LD_ADDR_OWVAR 31
37179: PUSH
37180: LD_INT 0
37182: PPUSH
37183: LD_INT 3
37185: PPUSH
37186: CALL_OW 12
37190: PUSH
37191: LD_INT 0
37193: PPUSH
37194: LD_INT 3
37196: PPUSH
37197: CALL_OW 12
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: LIST
37213: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37214: LD_ADDR_OWVAR 29
37218: PUSH
37219: LD_INT 10
37221: PUSH
37222: LD_INT 12
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: ST_TO_ADDR
// end ;
37229: LD_VAR 0 1
37233: RET
// export function PrepareApemanEngineer ( ) ; begin
37234: LD_INT 0
37236: PPUSH
// uc_nation := 0 ;
37237: LD_ADDR_OWVAR 21
37241: PUSH
37242: LD_INT 0
37244: ST_TO_ADDR
// hc_sex := sex_male ;
37245: LD_ADDR_OWVAR 27
37249: PUSH
37250: LD_INT 1
37252: ST_TO_ADDR
// hc_name :=  ;
37253: LD_ADDR_OWVAR 26
37257: PUSH
37258: LD_STRING 
37260: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37261: LD_ADDR_OWVAR 28
37265: PUSH
37266: LD_INT 16
37268: ST_TO_ADDR
// hc_gallery :=  ;
37269: LD_ADDR_OWVAR 33
37273: PUSH
37274: LD_STRING 
37276: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37277: LD_ADDR_OWVAR 31
37281: PUSH
37282: LD_INT 0
37284: PPUSH
37285: LD_INT 3
37287: PPUSH
37288: CALL_OW 12
37292: PUSH
37293: LD_INT 0
37295: PPUSH
37296: LD_INT 3
37298: PPUSH
37299: CALL_OW 12
37303: PUSH
37304: LD_INT 0
37306: PUSH
37307: LD_INT 0
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37316: LD_ADDR_OWVAR 29
37320: PUSH
37321: LD_INT 10
37323: PUSH
37324: LD_INT 12
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: ST_TO_ADDR
// end ;
37331: LD_VAR 0 1
37335: RET
// export function PrepareApeman ( agressivity ) ; begin
37336: LD_INT 0
37338: PPUSH
// uc_side := 0 ;
37339: LD_ADDR_OWVAR 20
37343: PUSH
37344: LD_INT 0
37346: ST_TO_ADDR
// uc_nation := 0 ;
37347: LD_ADDR_OWVAR 21
37351: PUSH
37352: LD_INT 0
37354: ST_TO_ADDR
// hc_sex := sex_male ;
37355: LD_ADDR_OWVAR 27
37359: PUSH
37360: LD_INT 1
37362: ST_TO_ADDR
// hc_class := class_apeman ;
37363: LD_ADDR_OWVAR 28
37367: PUSH
37368: LD_INT 12
37370: ST_TO_ADDR
// hc_gallery :=  ;
37371: LD_ADDR_OWVAR 33
37375: PUSH
37376: LD_STRING 
37378: ST_TO_ADDR
// hc_name :=  ;
37379: LD_ADDR_OWVAR 26
37383: PUSH
37384: LD_STRING 
37386: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
37387: LD_ADDR_OWVAR 29
37391: PUSH
37392: LD_INT 10
37394: PUSH
37395: LD_INT 12
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: ST_TO_ADDR
// if agressivity = 0 then
37402: LD_VAR 0 1
37406: PUSH
37407: LD_INT 0
37409: EQUAL
37410: IFFALSE 37422
// hc_agressivity := 0 else
37412: LD_ADDR_OWVAR 35
37416: PUSH
37417: LD_INT 0
37419: ST_TO_ADDR
37420: GO 37443
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37422: LD_ADDR_OWVAR 35
37426: PUSH
37427: LD_VAR 0 1
37431: NEG
37432: PPUSH
37433: LD_VAR 0 1
37437: PPUSH
37438: CALL_OW 12
37442: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37443: LD_ADDR_OWVAR 31
37447: PUSH
37448: LD_INT 0
37450: PPUSH
37451: LD_INT 3
37453: PPUSH
37454: CALL_OW 12
37458: PUSH
37459: LD_INT 0
37461: PPUSH
37462: LD_INT 3
37464: PPUSH
37465: CALL_OW 12
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 0
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: ST_TO_ADDR
// end ;
37482: LD_VAR 0 2
37486: RET
// export function PrepareTiger ( agressivity ) ; begin
37487: LD_INT 0
37489: PPUSH
// uc_side := 0 ;
37490: LD_ADDR_OWVAR 20
37494: PUSH
37495: LD_INT 0
37497: ST_TO_ADDR
// uc_nation := 0 ;
37498: LD_ADDR_OWVAR 21
37502: PUSH
37503: LD_INT 0
37505: ST_TO_ADDR
// InitHc ;
37506: CALL_OW 19
// hc_class := class_tiger ;
37510: LD_ADDR_OWVAR 28
37514: PUSH
37515: LD_INT 14
37517: ST_TO_ADDR
// hc_gallery :=  ;
37518: LD_ADDR_OWVAR 33
37522: PUSH
37523: LD_STRING 
37525: ST_TO_ADDR
// hc_name :=  ;
37526: LD_ADDR_OWVAR 26
37530: PUSH
37531: LD_STRING 
37533: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37534: LD_ADDR_OWVAR 35
37538: PUSH
37539: LD_VAR 0 1
37543: NEG
37544: PPUSH
37545: LD_VAR 0 1
37549: PPUSH
37550: CALL_OW 12
37554: ST_TO_ADDR
// end ;
37555: LD_VAR 0 2
37559: RET
// export function PrepareEnchidna ( ) ; begin
37560: LD_INT 0
37562: PPUSH
// uc_side := 0 ;
37563: LD_ADDR_OWVAR 20
37567: PUSH
37568: LD_INT 0
37570: ST_TO_ADDR
// uc_nation := 0 ;
37571: LD_ADDR_OWVAR 21
37575: PUSH
37576: LD_INT 0
37578: ST_TO_ADDR
// InitHc ;
37579: CALL_OW 19
// hc_class := class_baggie ;
37583: LD_ADDR_OWVAR 28
37587: PUSH
37588: LD_INT 13
37590: ST_TO_ADDR
// hc_gallery :=  ;
37591: LD_ADDR_OWVAR 33
37595: PUSH
37596: LD_STRING 
37598: ST_TO_ADDR
// hc_name :=  ;
37599: LD_ADDR_OWVAR 26
37603: PUSH
37604: LD_STRING 
37606: ST_TO_ADDR
// end ;
37607: LD_VAR 0 1
37611: RET
// export function PrepareFrog ( ) ; begin
37612: LD_INT 0
37614: PPUSH
// uc_side := 0 ;
37615: LD_ADDR_OWVAR 20
37619: PUSH
37620: LD_INT 0
37622: ST_TO_ADDR
// uc_nation := 0 ;
37623: LD_ADDR_OWVAR 21
37627: PUSH
37628: LD_INT 0
37630: ST_TO_ADDR
// InitHc ;
37631: CALL_OW 19
// hc_class := class_frog ;
37635: LD_ADDR_OWVAR 28
37639: PUSH
37640: LD_INT 19
37642: ST_TO_ADDR
// hc_gallery :=  ;
37643: LD_ADDR_OWVAR 33
37647: PUSH
37648: LD_STRING 
37650: ST_TO_ADDR
// hc_name :=  ;
37651: LD_ADDR_OWVAR 26
37655: PUSH
37656: LD_STRING 
37658: ST_TO_ADDR
// end ;
37659: LD_VAR 0 1
37663: RET
// export function PrepareFish ( ) ; begin
37664: LD_INT 0
37666: PPUSH
// uc_side := 0 ;
37667: LD_ADDR_OWVAR 20
37671: PUSH
37672: LD_INT 0
37674: ST_TO_ADDR
// uc_nation := 0 ;
37675: LD_ADDR_OWVAR 21
37679: PUSH
37680: LD_INT 0
37682: ST_TO_ADDR
// InitHc ;
37683: CALL_OW 19
// hc_class := class_fish ;
37687: LD_ADDR_OWVAR 28
37691: PUSH
37692: LD_INT 20
37694: ST_TO_ADDR
// hc_gallery :=  ;
37695: LD_ADDR_OWVAR 33
37699: PUSH
37700: LD_STRING 
37702: ST_TO_ADDR
// hc_name :=  ;
37703: LD_ADDR_OWVAR 26
37707: PUSH
37708: LD_STRING 
37710: ST_TO_ADDR
// end ;
37711: LD_VAR 0 1
37715: RET
// export function PrepareBird ( ) ; begin
37716: LD_INT 0
37718: PPUSH
// uc_side := 0 ;
37719: LD_ADDR_OWVAR 20
37723: PUSH
37724: LD_INT 0
37726: ST_TO_ADDR
// uc_nation := 0 ;
37727: LD_ADDR_OWVAR 21
37731: PUSH
37732: LD_INT 0
37734: ST_TO_ADDR
// InitHc ;
37735: CALL_OW 19
// hc_class := class_phororhacos ;
37739: LD_ADDR_OWVAR 28
37743: PUSH
37744: LD_INT 18
37746: ST_TO_ADDR
// hc_gallery :=  ;
37747: LD_ADDR_OWVAR 33
37751: PUSH
37752: LD_STRING 
37754: ST_TO_ADDR
// hc_name :=  ;
37755: LD_ADDR_OWVAR 26
37759: PUSH
37760: LD_STRING 
37762: ST_TO_ADDR
// end ;
37763: LD_VAR 0 1
37767: RET
// export function PrepareHorse ( ) ; begin
37768: LD_INT 0
37770: PPUSH
// uc_side := 0 ;
37771: LD_ADDR_OWVAR 20
37775: PUSH
37776: LD_INT 0
37778: ST_TO_ADDR
// uc_nation := 0 ;
37779: LD_ADDR_OWVAR 21
37783: PUSH
37784: LD_INT 0
37786: ST_TO_ADDR
// InitHc ;
37787: CALL_OW 19
// hc_class := class_horse ;
37791: LD_ADDR_OWVAR 28
37795: PUSH
37796: LD_INT 21
37798: ST_TO_ADDR
// hc_gallery :=  ;
37799: LD_ADDR_OWVAR 33
37803: PUSH
37804: LD_STRING 
37806: ST_TO_ADDR
// hc_name :=  ;
37807: LD_ADDR_OWVAR 26
37811: PUSH
37812: LD_STRING 
37814: ST_TO_ADDR
// end ;
37815: LD_VAR 0 1
37819: RET
// export function PrepareMastodont ( ) ; begin
37820: LD_INT 0
37822: PPUSH
// uc_side := 0 ;
37823: LD_ADDR_OWVAR 20
37827: PUSH
37828: LD_INT 0
37830: ST_TO_ADDR
// uc_nation := 0 ;
37831: LD_ADDR_OWVAR 21
37835: PUSH
37836: LD_INT 0
37838: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37839: LD_ADDR_OWVAR 37
37843: PUSH
37844: LD_INT 31
37846: ST_TO_ADDR
// vc_control := control_rider ;
37847: LD_ADDR_OWVAR 38
37851: PUSH
37852: LD_INT 4
37854: ST_TO_ADDR
// end ;
37855: LD_VAR 0 1
37859: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37860: LD_INT 0
37862: PPUSH
37863: PPUSH
37864: PPUSH
// uc_side = 0 ;
37865: LD_ADDR_OWVAR 20
37869: PUSH
37870: LD_INT 0
37872: ST_TO_ADDR
// uc_nation = 0 ;
37873: LD_ADDR_OWVAR 21
37877: PUSH
37878: LD_INT 0
37880: ST_TO_ADDR
// InitHc_All ( ) ;
37881: CALL_OW 584
// InitVc ;
37885: CALL_OW 20
// if mastodonts then
37889: LD_VAR 0 6
37893: IFFALSE 37960
// for i = 1 to mastodonts do
37895: LD_ADDR_VAR 0 11
37899: PUSH
37900: DOUBLE
37901: LD_INT 1
37903: DEC
37904: ST_TO_ADDR
37905: LD_VAR 0 6
37909: PUSH
37910: FOR_TO
37911: IFFALSE 37958
// begin vc_chassis := 31 ;
37913: LD_ADDR_OWVAR 37
37917: PUSH
37918: LD_INT 31
37920: ST_TO_ADDR
// vc_control := control_rider ;
37921: LD_ADDR_OWVAR 38
37925: PUSH
37926: LD_INT 4
37928: ST_TO_ADDR
// animal := CreateVehicle ;
37929: LD_ADDR_VAR 0 12
37933: PUSH
37934: CALL_OW 45
37938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37939: LD_VAR 0 12
37943: PPUSH
37944: LD_VAR 0 8
37948: PPUSH
37949: LD_INT 0
37951: PPUSH
37952: CALL 40102 0 3
// end ;
37956: GO 37910
37958: POP
37959: POP
// if horses then
37960: LD_VAR 0 5
37964: IFFALSE 38031
// for i = 1 to horses do
37966: LD_ADDR_VAR 0 11
37970: PUSH
37971: DOUBLE
37972: LD_INT 1
37974: DEC
37975: ST_TO_ADDR
37976: LD_VAR 0 5
37980: PUSH
37981: FOR_TO
37982: IFFALSE 38029
// begin hc_class := 21 ;
37984: LD_ADDR_OWVAR 28
37988: PUSH
37989: LD_INT 21
37991: ST_TO_ADDR
// hc_gallery :=  ;
37992: LD_ADDR_OWVAR 33
37996: PUSH
37997: LD_STRING 
37999: ST_TO_ADDR
// animal := CreateHuman ;
38000: LD_ADDR_VAR 0 12
38004: PUSH
38005: CALL_OW 44
38009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38010: LD_VAR 0 12
38014: PPUSH
38015: LD_VAR 0 8
38019: PPUSH
38020: LD_INT 0
38022: PPUSH
38023: CALL 40102 0 3
// end ;
38027: GO 37981
38029: POP
38030: POP
// if birds then
38031: LD_VAR 0 1
38035: IFFALSE 38102
// for i = 1 to birds do
38037: LD_ADDR_VAR 0 11
38041: PUSH
38042: DOUBLE
38043: LD_INT 1
38045: DEC
38046: ST_TO_ADDR
38047: LD_VAR 0 1
38051: PUSH
38052: FOR_TO
38053: IFFALSE 38100
// begin hc_class := 18 ;
38055: LD_ADDR_OWVAR 28
38059: PUSH
38060: LD_INT 18
38062: ST_TO_ADDR
// hc_gallery =  ;
38063: LD_ADDR_OWVAR 33
38067: PUSH
38068: LD_STRING 
38070: ST_TO_ADDR
// animal := CreateHuman ;
38071: LD_ADDR_VAR 0 12
38075: PUSH
38076: CALL_OW 44
38080: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38081: LD_VAR 0 12
38085: PPUSH
38086: LD_VAR 0 8
38090: PPUSH
38091: LD_INT 0
38093: PPUSH
38094: CALL 40102 0 3
// end ;
38098: GO 38052
38100: POP
38101: POP
// if tigers then
38102: LD_VAR 0 2
38106: IFFALSE 38190
// for i = 1 to tigers do
38108: LD_ADDR_VAR 0 11
38112: PUSH
38113: DOUBLE
38114: LD_INT 1
38116: DEC
38117: ST_TO_ADDR
38118: LD_VAR 0 2
38122: PUSH
38123: FOR_TO
38124: IFFALSE 38188
// begin hc_class = class_tiger ;
38126: LD_ADDR_OWVAR 28
38130: PUSH
38131: LD_INT 14
38133: ST_TO_ADDR
// hc_gallery =  ;
38134: LD_ADDR_OWVAR 33
38138: PUSH
38139: LD_STRING 
38141: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
38142: LD_ADDR_OWVAR 35
38146: PUSH
38147: LD_INT 7
38149: NEG
38150: PPUSH
38151: LD_INT 7
38153: PPUSH
38154: CALL_OW 12
38158: ST_TO_ADDR
// animal := CreateHuman ;
38159: LD_ADDR_VAR 0 12
38163: PUSH
38164: CALL_OW 44
38168: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38169: LD_VAR 0 12
38173: PPUSH
38174: LD_VAR 0 8
38178: PPUSH
38179: LD_INT 0
38181: PPUSH
38182: CALL 40102 0 3
// end ;
38186: GO 38123
38188: POP
38189: POP
// if apemans then
38190: LD_VAR 0 3
38194: IFFALSE 38317
// for i = 1 to apemans do
38196: LD_ADDR_VAR 0 11
38200: PUSH
38201: DOUBLE
38202: LD_INT 1
38204: DEC
38205: ST_TO_ADDR
38206: LD_VAR 0 3
38210: PUSH
38211: FOR_TO
38212: IFFALSE 38315
// begin hc_class = class_apeman ;
38214: LD_ADDR_OWVAR 28
38218: PUSH
38219: LD_INT 12
38221: ST_TO_ADDR
// hc_gallery =  ;
38222: LD_ADDR_OWVAR 33
38226: PUSH
38227: LD_STRING 
38229: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38230: LD_ADDR_OWVAR 35
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PPUSH
38239: LD_INT 2
38241: PPUSH
38242: CALL_OW 12
38246: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38247: LD_ADDR_OWVAR 31
38251: PUSH
38252: LD_INT 1
38254: PPUSH
38255: LD_INT 3
38257: PPUSH
38258: CALL_OW 12
38262: PUSH
38263: LD_INT 1
38265: PPUSH
38266: LD_INT 3
38268: PPUSH
38269: CALL_OW 12
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: ST_TO_ADDR
// animal := CreateHuman ;
38286: LD_ADDR_VAR 0 12
38290: PUSH
38291: CALL_OW 44
38295: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38296: LD_VAR 0 12
38300: PPUSH
38301: LD_VAR 0 8
38305: PPUSH
38306: LD_INT 0
38308: PPUSH
38309: CALL 40102 0 3
// end ;
38313: GO 38211
38315: POP
38316: POP
// if enchidnas then
38317: LD_VAR 0 4
38321: IFFALSE 38388
// for i = 1 to enchidnas do
38323: LD_ADDR_VAR 0 11
38327: PUSH
38328: DOUBLE
38329: LD_INT 1
38331: DEC
38332: ST_TO_ADDR
38333: LD_VAR 0 4
38337: PUSH
38338: FOR_TO
38339: IFFALSE 38386
// begin hc_class = 13 ;
38341: LD_ADDR_OWVAR 28
38345: PUSH
38346: LD_INT 13
38348: ST_TO_ADDR
// hc_gallery =  ;
38349: LD_ADDR_OWVAR 33
38353: PUSH
38354: LD_STRING 
38356: ST_TO_ADDR
// animal := CreateHuman ;
38357: LD_ADDR_VAR 0 12
38361: PUSH
38362: CALL_OW 44
38366: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38367: LD_VAR 0 12
38371: PPUSH
38372: LD_VAR 0 8
38376: PPUSH
38377: LD_INT 0
38379: PPUSH
38380: CALL 40102 0 3
// end ;
38384: GO 38338
38386: POP
38387: POP
// if fishes then
38388: LD_VAR 0 7
38392: IFFALSE 38459
// for i = 1 to fishes do
38394: LD_ADDR_VAR 0 11
38398: PUSH
38399: DOUBLE
38400: LD_INT 1
38402: DEC
38403: ST_TO_ADDR
38404: LD_VAR 0 7
38408: PUSH
38409: FOR_TO
38410: IFFALSE 38457
// begin hc_class = 20 ;
38412: LD_ADDR_OWVAR 28
38416: PUSH
38417: LD_INT 20
38419: ST_TO_ADDR
// hc_gallery =  ;
38420: LD_ADDR_OWVAR 33
38424: PUSH
38425: LD_STRING 
38427: ST_TO_ADDR
// animal := CreateHuman ;
38428: LD_ADDR_VAR 0 12
38432: PUSH
38433: CALL_OW 44
38437: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38438: LD_VAR 0 12
38442: PPUSH
38443: LD_VAR 0 9
38447: PPUSH
38448: LD_INT 0
38450: PPUSH
38451: CALL 40102 0 3
// end ;
38455: GO 38409
38457: POP
38458: POP
// end ;
38459: LD_VAR 0 10
38463: RET
// export function WantHeal ( sci , unit ) ; begin
38464: LD_INT 0
38466: PPUSH
// if GetTaskList ( sci ) > 0 then
38467: LD_VAR 0 1
38471: PPUSH
38472: CALL_OW 437
38476: PUSH
38477: LD_INT 0
38479: GREATER
38480: IFFALSE 38552
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38482: LD_VAR 0 1
38486: PPUSH
38487: CALL_OW 437
38491: PUSH
38492: LD_INT 1
38494: ARRAY
38495: PUSH
38496: LD_INT 1
38498: ARRAY
38499: PUSH
38500: LD_STRING l
38502: EQUAL
38503: IFFALSE 38530
38505: PUSH
38506: LD_VAR 0 1
38510: PPUSH
38511: CALL_OW 437
38515: PUSH
38516: LD_INT 1
38518: ARRAY
38519: PUSH
38520: LD_INT 4
38522: ARRAY
38523: PUSH
38524: LD_VAR 0 2
38528: EQUAL
38529: AND
38530: IFFALSE 38542
// result := true else
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_INT 1
38539: ST_TO_ADDR
38540: GO 38550
// result := false ;
38542: LD_ADDR_VAR 0 3
38546: PUSH
38547: LD_INT 0
38549: ST_TO_ADDR
// end else
38550: GO 38560
// result := false ;
38552: LD_ADDR_VAR 0 3
38556: PUSH
38557: LD_INT 0
38559: ST_TO_ADDR
// end ;
38560: LD_VAR 0 3
38564: RET
// export function HealTarget ( sci ) ; begin
38565: LD_INT 0
38567: PPUSH
// if not sci then
38568: LD_VAR 0 1
38572: NOT
38573: IFFALSE 38577
// exit ;
38575: GO 38642
// result := 0 ;
38577: LD_ADDR_VAR 0 2
38581: PUSH
38582: LD_INT 0
38584: ST_TO_ADDR
// if GetTaskList ( sci ) then
38585: LD_VAR 0 1
38589: PPUSH
38590: CALL_OW 437
38594: IFFALSE 38642
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38596: LD_VAR 0 1
38600: PPUSH
38601: CALL_OW 437
38605: PUSH
38606: LD_INT 1
38608: ARRAY
38609: PUSH
38610: LD_INT 1
38612: ARRAY
38613: PUSH
38614: LD_STRING l
38616: EQUAL
38617: IFFALSE 38642
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38619: LD_ADDR_VAR 0 2
38623: PUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 437
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PUSH
38638: LD_INT 4
38640: ARRAY
38641: ST_TO_ADDR
// end ;
38642: LD_VAR 0 2
38646: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38647: LD_INT 0
38649: PPUSH
38650: PPUSH
38651: PPUSH
38652: PPUSH
// if not base_units then
38653: LD_VAR 0 1
38657: NOT
38658: IFFALSE 38662
// exit ;
38660: GO 38749
// result := false ;
38662: LD_ADDR_VAR 0 2
38666: PUSH
38667: LD_INT 0
38669: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38670: LD_ADDR_VAR 0 5
38674: PUSH
38675: LD_VAR 0 1
38679: PPUSH
38680: LD_INT 21
38682: PUSH
38683: LD_INT 3
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 72
38694: ST_TO_ADDR
// if not tmp then
38695: LD_VAR 0 5
38699: NOT
38700: IFFALSE 38704
// exit ;
38702: GO 38749
// for i in tmp do
38704: LD_ADDR_VAR 0 3
38708: PUSH
38709: LD_VAR 0 5
38713: PUSH
38714: FOR_IN
38715: IFFALSE 38747
// begin result := EnemyInRange ( i , 22 ) ;
38717: LD_ADDR_VAR 0 2
38721: PUSH
38722: LD_VAR 0 3
38726: PPUSH
38727: LD_INT 22
38729: PPUSH
38730: CALL 36164 0 2
38734: ST_TO_ADDR
// if result then
38735: LD_VAR 0 2
38739: IFFALSE 38745
// exit ;
38741: POP
38742: POP
38743: GO 38749
// end ;
38745: GO 38714
38747: POP
38748: POP
// end ;
38749: LD_VAR 0 2
38753: RET
// export function FilterByTag ( units , tag ) ; begin
38754: LD_INT 0
38756: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38757: LD_ADDR_VAR 0 3
38761: PUSH
38762: LD_VAR 0 1
38766: PPUSH
38767: LD_INT 120
38769: PUSH
38770: LD_VAR 0 2
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PPUSH
38779: CALL_OW 72
38783: ST_TO_ADDR
// end ;
38784: LD_VAR 0 3
38788: RET
// export function IsDriver ( un ) ; begin
38789: LD_INT 0
38791: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38792: LD_ADDR_VAR 0 2
38796: PUSH
38797: LD_VAR 0 1
38801: PUSH
38802: LD_INT 55
38804: PUSH
38805: EMPTY
38806: LIST
38807: PPUSH
38808: CALL_OW 69
38812: IN
38813: ST_TO_ADDR
// end ;
38814: LD_VAR 0 2
38818: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38819: LD_INT 0
38821: PPUSH
38822: PPUSH
// list := [ ] ;
38823: LD_ADDR_VAR 0 5
38827: PUSH
38828: EMPTY
38829: ST_TO_ADDR
// case d of 0 :
38830: LD_VAR 0 3
38834: PUSH
38835: LD_INT 0
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38976
38843: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38844: LD_ADDR_VAR 0 5
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 4
38856: MINUS
38857: PUSH
38858: LD_VAR 0 2
38862: PUSH
38863: LD_INT 4
38865: MINUS
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: LD_VAR 0 1
38879: PUSH
38880: LD_INT 3
38882: MINUS
38883: PUSH
38884: LD_VAR 0 2
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: PUSH
38897: LD_VAR 0 1
38901: PUSH
38902: LD_INT 4
38904: PLUS
38905: PUSH
38906: LD_VAR 0 2
38910: PUSH
38911: LD_INT 4
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: LIST
38918: PUSH
38919: LD_VAR 0 1
38923: PUSH
38924: LD_INT 3
38926: PLUS
38927: PUSH
38928: LD_VAR 0 2
38932: PUSH
38933: LD_INT 3
38935: PLUS
38936: PUSH
38937: LD_INT 5
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: LIST
38944: PUSH
38945: LD_VAR 0 1
38949: PUSH
38950: LD_VAR 0 2
38954: PUSH
38955: LD_INT 4
38957: PLUS
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: LIST
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: ST_TO_ADDR
// end ; 1 :
38974: GO 39674
38976: LD_INT 1
38978: DOUBLE
38979: EQUAL
38980: IFTRUE 38984
38982: GO 39117
38984: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38985: LD_ADDR_VAR 0 5
38989: PUSH
38990: LD_VAR 0 1
38994: PUSH
38995: LD_VAR 0 2
38999: PUSH
39000: LD_INT 4
39002: MINUS
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: LD_VAR 0 1
39016: PUSH
39017: LD_INT 3
39019: MINUS
39020: PUSH
39021: LD_VAR 0 2
39025: PUSH
39026: LD_INT 3
39028: MINUS
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: PUSH
39038: LD_VAR 0 1
39042: PUSH
39043: LD_INT 4
39045: MINUS
39046: PUSH
39047: LD_VAR 0 2
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: LIST
39059: PUSH
39060: LD_VAR 0 1
39064: PUSH
39065: LD_VAR 0 2
39069: PUSH
39070: LD_INT 3
39072: PLUS
39073: PUSH
39074: LD_INT 0
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: PUSH
39082: LD_VAR 0 1
39086: PUSH
39087: LD_INT 4
39089: PLUS
39090: PUSH
39091: LD_VAR 0 2
39095: PUSH
39096: LD_INT 4
39098: PLUS
39099: PUSH
39100: LD_INT 5
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: LIST
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: ST_TO_ADDR
// end ; 2 :
39115: GO 39674
39117: LD_INT 2
39119: DOUBLE
39120: EQUAL
39121: IFTRUE 39125
39123: GO 39254
39125: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
39126: LD_ADDR_VAR 0 5
39130: PUSH
39131: LD_VAR 0 1
39135: PUSH
39136: LD_VAR 0 2
39140: PUSH
39141: LD_INT 3
39143: MINUS
39144: PUSH
39145: LD_INT 3
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: LD_VAR 0 1
39157: PUSH
39158: LD_INT 4
39160: PLUS
39161: PUSH
39162: LD_VAR 0 2
39166: PUSH
39167: LD_INT 4
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: PUSH
39175: LD_VAR 0 1
39179: PUSH
39180: LD_VAR 0 2
39184: PUSH
39185: LD_INT 4
39187: PLUS
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: LIST
39196: PUSH
39197: LD_VAR 0 1
39201: PUSH
39202: LD_INT 3
39204: MINUS
39205: PUSH
39206: LD_VAR 0 2
39210: PUSH
39211: LD_INT 1
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: PUSH
39219: LD_VAR 0 1
39223: PUSH
39224: LD_INT 4
39226: MINUS
39227: PUSH
39228: LD_VAR 0 2
39232: PUSH
39233: LD_INT 4
39235: MINUS
39236: PUSH
39237: LD_INT 2
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// end ; 3 :
39252: GO 39674
39254: LD_INT 3
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39395
39262: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39263: LD_ADDR_VAR 0 5
39267: PUSH
39268: LD_VAR 0 1
39272: PUSH
39273: LD_INT 3
39275: PLUS
39276: PUSH
39277: LD_VAR 0 2
39281: PUSH
39282: LD_INT 4
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: LIST
39289: PUSH
39290: LD_VAR 0 1
39294: PUSH
39295: LD_INT 4
39297: PLUS
39298: PUSH
39299: LD_VAR 0 2
39303: PUSH
39304: LD_INT 4
39306: PLUS
39307: PUSH
39308: LD_INT 5
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: LIST
39315: PUSH
39316: LD_VAR 0 1
39320: PUSH
39321: LD_INT 4
39323: MINUS
39324: PUSH
39325: LD_VAR 0 2
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: LIST
39337: PUSH
39338: LD_VAR 0 1
39342: PUSH
39343: LD_VAR 0 2
39347: PUSH
39348: LD_INT 4
39350: MINUS
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: PUSH
39360: LD_VAR 0 1
39364: PUSH
39365: LD_INT 3
39367: MINUS
39368: PUSH
39369: LD_VAR 0 2
39373: PUSH
39374: LD_INT 3
39376: MINUS
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: LIST
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: ST_TO_ADDR
// end ; 4 :
39393: GO 39674
39395: LD_INT 4
39397: DOUBLE
39398: EQUAL
39399: IFTRUE 39403
39401: GO 39536
39403: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39404: LD_ADDR_VAR 0 5
39408: PUSH
39409: LD_VAR 0 1
39413: PUSH
39414: LD_VAR 0 2
39418: PUSH
39419: LD_INT 4
39421: PLUS
39422: PUSH
39423: LD_INT 0
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: LIST
39430: PUSH
39431: LD_VAR 0 1
39435: PUSH
39436: LD_INT 3
39438: PLUS
39439: PUSH
39440: LD_VAR 0 2
39444: PUSH
39445: LD_INT 3
39447: PLUS
39448: PUSH
39449: LD_INT 5
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: PUSH
39457: LD_VAR 0 1
39461: PUSH
39462: LD_INT 4
39464: PLUS
39465: PUSH
39466: LD_VAR 0 2
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: PUSH
39479: LD_VAR 0 1
39483: PUSH
39484: LD_VAR 0 2
39488: PUSH
39489: LD_INT 3
39491: MINUS
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: LIST
39500: PUSH
39501: LD_VAR 0 1
39505: PUSH
39506: LD_INT 4
39508: MINUS
39509: PUSH
39510: LD_VAR 0 2
39514: PUSH
39515: LD_INT 4
39517: MINUS
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: LIST
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: ST_TO_ADDR
// end ; 5 :
39534: GO 39674
39536: LD_INT 5
39538: DOUBLE
39539: EQUAL
39540: IFTRUE 39544
39542: GO 39673
39544: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39545: LD_ADDR_VAR 0 5
39549: PUSH
39550: LD_VAR 0 1
39554: PUSH
39555: LD_INT 4
39557: MINUS
39558: PUSH
39559: LD_VAR 0 2
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: LIST
39571: PUSH
39572: LD_VAR 0 1
39576: PUSH
39577: LD_VAR 0 2
39581: PUSH
39582: LD_INT 4
39584: MINUS
39585: PUSH
39586: LD_INT 3
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: LIST
39593: PUSH
39594: LD_VAR 0 1
39598: PUSH
39599: LD_INT 4
39601: PLUS
39602: PUSH
39603: LD_VAR 0 2
39607: PUSH
39608: LD_INT 4
39610: PLUS
39611: PUSH
39612: LD_INT 5
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: PUSH
39620: LD_VAR 0 1
39624: PUSH
39625: LD_INT 3
39627: PLUS
39628: PUSH
39629: LD_VAR 0 2
39633: PUSH
39634: LD_INT 4
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: LIST
39641: PUSH
39642: LD_VAR 0 1
39646: PUSH
39647: LD_VAR 0 2
39651: PUSH
39652: LD_INT 3
39654: PLUS
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: LIST
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// end ; end ;
39671: GO 39674
39673: POP
// result := list ;
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: LD_VAR 0 5
39683: ST_TO_ADDR
// end ;
39684: LD_VAR 0 4
39688: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39689: LD_INT 0
39691: PPUSH
39692: PPUSH
39693: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39694: LD_VAR 0 1
39698: NOT
39699: IFTRUE 39727
39701: PUSH
39702: LD_VAR 0 2
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 3
39715: PUSH
39716: LD_INT 4
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: IN
39725: NOT
39726: OR
39727: IFFALSE 39731
// exit ;
39729: GO 39814
// tmp := [ ] ;
39731: LD_ADDR_VAR 0 5
39735: PUSH
39736: EMPTY
39737: ST_TO_ADDR
// for i in units do
39738: LD_ADDR_VAR 0 4
39742: PUSH
39743: LD_VAR 0 1
39747: PUSH
39748: FOR_IN
39749: IFFALSE 39783
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39751: LD_ADDR_VAR 0 5
39755: PUSH
39756: LD_VAR 0 5
39760: PPUSH
39761: LD_VAR 0 4
39765: PPUSH
39766: LD_VAR 0 2
39770: PPUSH
39771: CALL_OW 259
39775: PPUSH
39776: CALL 41209 0 2
39780: ST_TO_ADDR
39781: GO 39748
39783: POP
39784: POP
// if not tmp then
39785: LD_VAR 0 5
39789: NOT
39790: IFFALSE 39794
// exit ;
39792: GO 39814
// result := SortListByListDesc ( units , tmp ) ;
39794: LD_ADDR_VAR 0 3
39798: PUSH
39799: LD_VAR 0 1
39803: PPUSH
39804: LD_VAR 0 5
39808: PPUSH
39809: CALL_OW 77
39813: ST_TO_ADDR
// end ;
39814: LD_VAR 0 3
39818: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39819: LD_INT 0
39821: PPUSH
39822: PPUSH
39823: PPUSH
// result := false ;
39824: LD_ADDR_VAR 0 3
39828: PUSH
39829: LD_INT 0
39831: ST_TO_ADDR
// if not building then
39832: LD_VAR 0 2
39836: NOT
39837: IFFALSE 39841
// exit ;
39839: GO 39985
// x := GetX ( building ) ;
39841: LD_ADDR_VAR 0 4
39845: PUSH
39846: LD_VAR 0 2
39850: PPUSH
39851: CALL_OW 250
39855: ST_TO_ADDR
// y := GetY ( building ) ;
39856: LD_ADDR_VAR 0 5
39860: PUSH
39861: LD_VAR 0 2
39865: PPUSH
39866: CALL_OW 251
39870: ST_TO_ADDR
// if not x or not y then
39871: LD_VAR 0 4
39875: NOT
39876: IFTRUE 39885
39878: PUSH
39879: LD_VAR 0 5
39883: NOT
39884: OR
39885: IFFALSE 39889
// exit ;
39887: GO 39985
// if GetTaskList ( unit ) then
39889: LD_VAR 0 1
39893: PPUSH
39894: CALL_OW 437
39898: IFFALSE 39985
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39900: LD_STRING e
39902: PUSH
39903: LD_VAR 0 1
39907: PPUSH
39908: CALL_OW 437
39912: PUSH
39913: LD_INT 1
39915: ARRAY
39916: PUSH
39917: LD_INT 1
39919: ARRAY
39920: EQUAL
39921: IFFALSE 39948
39923: PUSH
39924: LD_VAR 0 4
39928: PUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 437
39938: PUSH
39939: LD_INT 1
39941: ARRAY
39942: PUSH
39943: LD_INT 2
39945: ARRAY
39946: EQUAL
39947: AND
39948: IFFALSE 39975
39950: PUSH
39951: LD_VAR 0 5
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: CALL_OW 437
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PUSH
39970: LD_INT 3
39972: ARRAY
39973: EQUAL
39974: AND
39975: IFFALSE 39985
// result := true end ;
39977: LD_ADDR_VAR 0 3
39981: PUSH
39982: LD_INT 1
39984: ST_TO_ADDR
// end ;
39985: LD_VAR 0 3
39989: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39990: LD_INT 0
39992: PPUSH
// result := false ;
39993: LD_ADDR_VAR 0 4
39997: PUSH
39998: LD_INT 0
40000: ST_TO_ADDR
// if GetTaskList ( unit ) then
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 437
40010: IFFALSE 40097
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
40012: LD_STRING M
40014: PUSH
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 437
40024: PUSH
40025: LD_INT 1
40027: ARRAY
40028: PUSH
40029: LD_INT 1
40031: ARRAY
40032: EQUAL
40033: IFFALSE 40060
40035: PUSH
40036: LD_VAR 0 2
40040: PUSH
40041: LD_VAR 0 1
40045: PPUSH
40046: CALL_OW 437
40050: PUSH
40051: LD_INT 1
40053: ARRAY
40054: PUSH
40055: LD_INT 2
40057: ARRAY
40058: EQUAL
40059: AND
40060: IFFALSE 40087
40062: PUSH
40063: LD_VAR 0 3
40067: PUSH
40068: LD_VAR 0 1
40072: PPUSH
40073: CALL_OW 437
40077: PUSH
40078: LD_INT 1
40080: ARRAY
40081: PUSH
40082: LD_INT 3
40084: ARRAY
40085: EQUAL
40086: AND
40087: IFFALSE 40097
// result := true ;
40089: LD_ADDR_VAR 0 4
40093: PUSH
40094: LD_INT 1
40096: ST_TO_ADDR
// end ; end ;
40097: LD_VAR 0 4
40101: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
40102: LD_INT 0
40104: PPUSH
40105: PPUSH
40106: PPUSH
40107: PPUSH
// if not unit or not area then
40108: LD_VAR 0 1
40112: NOT
40113: IFTRUE 40122
40115: PUSH
40116: LD_VAR 0 2
40120: NOT
40121: OR
40122: IFFALSE 40126
// exit ;
40124: GO 40302
// tmp := AreaToList ( area , i ) ;
40126: LD_ADDR_VAR 0 6
40130: PUSH
40131: LD_VAR 0 2
40135: PPUSH
40136: LD_VAR 0 5
40140: PPUSH
40141: CALL_OW 517
40145: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40146: LD_ADDR_VAR 0 5
40150: PUSH
40151: DOUBLE
40152: LD_INT 1
40154: DEC
40155: ST_TO_ADDR
40156: LD_VAR 0 6
40160: PUSH
40161: LD_INT 1
40163: ARRAY
40164: PUSH
40165: FOR_TO
40166: IFFALSE 40300
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40168: LD_ADDR_VAR 0 7
40172: PUSH
40173: LD_VAR 0 6
40177: PUSH
40178: LD_INT 1
40180: ARRAY
40181: PUSH
40182: LD_VAR 0 5
40186: ARRAY
40187: PUSH
40188: LD_VAR 0 6
40192: PUSH
40193: LD_INT 2
40195: ARRAY
40196: PUSH
40197: LD_VAR 0 5
40201: ARRAY
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40207: LD_INT 92
40209: PUSH
40210: LD_VAR 0 7
40214: PUSH
40215: LD_INT 1
40217: ARRAY
40218: PUSH
40219: LD_VAR 0 7
40223: PUSH
40224: LD_INT 2
40226: ARRAY
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: PPUSH
40237: CALL_OW 69
40241: PUSH
40242: LD_INT 0
40244: EQUAL
40245: IFFALSE 40298
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40247: LD_VAR 0 1
40251: PPUSH
40252: LD_VAR 0 7
40256: PUSH
40257: LD_INT 1
40259: ARRAY
40260: PPUSH
40261: LD_VAR 0 7
40265: PUSH
40266: LD_INT 2
40268: ARRAY
40269: PPUSH
40270: LD_VAR 0 3
40274: PPUSH
40275: CALL_OW 48
// result := IsPlaced ( unit ) ;
40279: LD_ADDR_VAR 0 4
40283: PUSH
40284: LD_VAR 0 1
40288: PPUSH
40289: CALL_OW 305
40293: ST_TO_ADDR
// exit ;
40294: POP
40295: POP
40296: GO 40302
// end ; end ;
40298: GO 40165
40300: POP
40301: POP
// end ;
40302: LD_VAR 0 4
40306: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40307: LD_INT 0
40309: PPUSH
40310: PPUSH
40311: PPUSH
// if not side or side > 8 then
40312: LD_VAR 0 1
40316: NOT
40317: IFTRUE 40329
40319: PUSH
40320: LD_VAR 0 1
40324: PUSH
40325: LD_INT 8
40327: GREATER
40328: OR
40329: IFFALSE 40333
// exit ;
40331: GO 40520
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40333: LD_ADDR_VAR 0 4
40337: PUSH
40338: LD_INT 22
40340: PUSH
40341: LD_VAR 0 1
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 21
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PPUSH
40364: CALL_OW 69
40368: ST_TO_ADDR
// if not tmp then
40369: LD_VAR 0 4
40373: NOT
40374: IFFALSE 40378
// exit ;
40376: GO 40520
// enable_addtolog := true ;
40378: LD_ADDR_OWVAR 81
40382: PUSH
40383: LD_INT 1
40385: ST_TO_ADDR
// AddToLog ( [ ) ;
40386: LD_STRING [
40388: PPUSH
40389: CALL_OW 561
// for i in tmp do
40393: LD_ADDR_VAR 0 3
40397: PUSH
40398: LD_VAR 0 4
40402: PUSH
40403: FOR_IN
40404: IFFALSE 40511
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40406: LD_STRING [
40408: PUSH
40409: LD_VAR 0 3
40413: PPUSH
40414: CALL_OW 266
40418: STR
40419: PUSH
40420: LD_STRING , 
40422: STR
40423: PUSH
40424: LD_VAR 0 3
40428: PPUSH
40429: CALL_OW 250
40433: STR
40434: PUSH
40435: LD_STRING , 
40437: STR
40438: PUSH
40439: LD_VAR 0 3
40443: PPUSH
40444: CALL_OW 251
40448: STR
40449: PUSH
40450: LD_STRING , 
40452: STR
40453: PUSH
40454: LD_VAR 0 3
40458: PPUSH
40459: CALL_OW 254
40463: STR
40464: PUSH
40465: LD_STRING , 
40467: STR
40468: PUSH
40469: LD_VAR 0 3
40473: PPUSH
40474: LD_INT 1
40476: PPUSH
40477: CALL_OW 268
40481: STR
40482: PUSH
40483: LD_STRING , 
40485: STR
40486: PUSH
40487: LD_VAR 0 3
40491: PPUSH
40492: LD_INT 2
40494: PPUSH
40495: CALL_OW 268
40499: STR
40500: PUSH
40501: LD_STRING ],
40503: STR
40504: PPUSH
40505: CALL_OW 561
// end ;
40509: GO 40403
40511: POP
40512: POP
// AddToLog ( ]; ) ;
40513: LD_STRING ];
40515: PPUSH
40516: CALL_OW 561
// end ;
40520: LD_VAR 0 2
40524: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40525: LD_INT 0
40527: PPUSH
40528: PPUSH
40529: PPUSH
40530: PPUSH
40531: PPUSH
// if not area or not rate or not max then
40532: LD_VAR 0 1
40536: NOT
40537: IFTRUE 40546
40539: PUSH
40540: LD_VAR 0 2
40544: NOT
40545: OR
40546: IFTRUE 40555
40548: PUSH
40549: LD_VAR 0 4
40553: NOT
40554: OR
40555: IFFALSE 40559
// exit ;
40557: GO 40748
// while 1 do
40559: LD_INT 1
40561: IFFALSE 40748
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40563: LD_ADDR_VAR 0 9
40567: PUSH
40568: LD_VAR 0 1
40572: PPUSH
40573: LD_INT 1
40575: PPUSH
40576: CALL_OW 287
40580: PUSH
40581: LD_INT 10
40583: MUL
40584: ST_TO_ADDR
// r := rate / 10 ;
40585: LD_ADDR_VAR 0 7
40589: PUSH
40590: LD_VAR 0 2
40594: PUSH
40595: LD_INT 10
40597: DIVREAL
40598: ST_TO_ADDR
// time := 1 1$00 ;
40599: LD_ADDR_VAR 0 8
40603: PUSH
40604: LD_INT 2100
40606: ST_TO_ADDR
// if amount < min then
40607: LD_VAR 0 9
40611: PUSH
40612: LD_VAR 0 3
40616: LESS
40617: IFFALSE 40635
// r := r * 2 else
40619: LD_ADDR_VAR 0 7
40623: PUSH
40624: LD_VAR 0 7
40628: PUSH
40629: LD_INT 2
40631: MUL
40632: ST_TO_ADDR
40633: GO 40661
// if amount > max then
40635: LD_VAR 0 9
40639: PUSH
40640: LD_VAR 0 4
40644: GREATER
40645: IFFALSE 40661
// r := r / 2 ;
40647: LD_ADDR_VAR 0 7
40651: PUSH
40652: LD_VAR 0 7
40656: PUSH
40657: LD_INT 2
40659: DIVREAL
40660: ST_TO_ADDR
// time := time / r ;
40661: LD_ADDR_VAR 0 8
40665: PUSH
40666: LD_VAR 0 8
40670: PUSH
40671: LD_VAR 0 7
40675: DIVREAL
40676: ST_TO_ADDR
// if time < 0 then
40677: LD_VAR 0 8
40681: PUSH
40682: LD_INT 0
40684: LESS
40685: IFFALSE 40702
// time := time * - 1 ;
40687: LD_ADDR_VAR 0 8
40691: PUSH
40692: LD_VAR 0 8
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: MUL
40701: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40702: LD_VAR 0 8
40706: PUSH
40707: LD_INT 35
40709: PPUSH
40710: LD_INT 875
40712: PPUSH
40713: CALL_OW 12
40717: PLUS
40718: PPUSH
40719: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40723: LD_INT 1
40725: PPUSH
40726: LD_INT 5
40728: PPUSH
40729: CALL_OW 12
40733: PPUSH
40734: LD_VAR 0 1
40738: PPUSH
40739: LD_INT 1
40741: PPUSH
40742: CALL_OW 55
// end ;
40746: GO 40559
// end ;
40748: LD_VAR 0 5
40752: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40753: LD_INT 0
40755: PPUSH
40756: PPUSH
40757: PPUSH
40758: PPUSH
40759: PPUSH
40760: PPUSH
40761: PPUSH
40762: PPUSH
// if not turrets or not factories then
40763: LD_VAR 0 1
40767: NOT
40768: IFTRUE 40777
40770: PUSH
40771: LD_VAR 0 2
40775: NOT
40776: OR
40777: IFFALSE 40781
// exit ;
40779: GO 41088
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40781: LD_ADDR_VAR 0 10
40785: PUSH
40786: LD_INT 5
40788: PUSH
40789: LD_INT 6
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: LD_INT 4
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: LD_INT 5
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 24
40823: PUSH
40824: LD_INT 25
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 23
40833: PUSH
40834: LD_INT 27
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 42
40847: PUSH
40848: LD_INT 43
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 44
40857: PUSH
40858: LD_INT 46
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 45
40867: PUSH
40868: LD_INT 47
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: LIST
40884: ST_TO_ADDR
// result := [ ] ;
40885: LD_ADDR_VAR 0 3
40889: PUSH
40890: EMPTY
40891: ST_TO_ADDR
// for i in turrets do
40892: LD_ADDR_VAR 0 4
40896: PUSH
40897: LD_VAR 0 1
40901: PUSH
40902: FOR_IN
40903: IFFALSE 41086
// begin nat := GetNation ( i ) ;
40905: LD_ADDR_VAR 0 7
40909: PUSH
40910: LD_VAR 0 4
40914: PPUSH
40915: CALL_OW 248
40919: ST_TO_ADDR
// weapon := 0 ;
40920: LD_ADDR_VAR 0 8
40924: PUSH
40925: LD_INT 0
40927: ST_TO_ADDR
// if not nat then
40928: LD_VAR 0 7
40932: NOT
40933: IFFALSE 40937
// continue ;
40935: GO 40902
// for j in list [ nat ] do
40937: LD_ADDR_VAR 0 5
40941: PUSH
40942: LD_VAR 0 10
40946: PUSH
40947: LD_VAR 0 7
40951: ARRAY
40952: PUSH
40953: FOR_IN
40954: IFFALSE 40995
// if GetBWeapon ( i ) = j [ 1 ] then
40956: LD_VAR 0 4
40960: PPUSH
40961: CALL_OW 269
40965: PUSH
40966: LD_VAR 0 5
40970: PUSH
40971: LD_INT 1
40973: ARRAY
40974: EQUAL
40975: IFFALSE 40993
// begin weapon := j [ 2 ] ;
40977: LD_ADDR_VAR 0 8
40981: PUSH
40982: LD_VAR 0 5
40986: PUSH
40987: LD_INT 2
40989: ARRAY
40990: ST_TO_ADDR
// break ;
40991: GO 40995
// end ;
40993: GO 40953
40995: POP
40996: POP
// if not weapon then
40997: LD_VAR 0 8
41001: NOT
41002: IFFALSE 41006
// continue ;
41004: GO 40902
// for k in factories do
41006: LD_ADDR_VAR 0 6
41010: PUSH
41011: LD_VAR 0 2
41015: PUSH
41016: FOR_IN
41017: IFFALSE 41082
// begin weapons := AvailableWeaponList ( k ) ;
41019: LD_ADDR_VAR 0 9
41023: PUSH
41024: LD_VAR 0 6
41028: PPUSH
41029: CALL_OW 478
41033: ST_TO_ADDR
// if not weapons then
41034: LD_VAR 0 9
41038: NOT
41039: IFFALSE 41043
// continue ;
41041: GO 41016
// if weapon in weapons then
41043: LD_VAR 0 8
41047: PUSH
41048: LD_VAR 0 9
41052: IN
41053: IFFALSE 41080
// begin result := [ i , weapon ] ;
41055: LD_ADDR_VAR 0 3
41059: PUSH
41060: LD_VAR 0 4
41064: PUSH
41065: LD_VAR 0 8
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: ST_TO_ADDR
// exit ;
41074: POP
41075: POP
41076: POP
41077: POP
41078: GO 41088
// end ; end ;
41080: GO 41016
41082: POP
41083: POP
// end ;
41084: GO 40902
41086: POP
41087: POP
// end ;
41088: LD_VAR 0 3
41092: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
41093: LD_INT 0
41095: PPUSH
// if not side or side > 8 then
41096: LD_VAR 0 3
41100: NOT
41101: IFTRUE 41113
41103: PUSH
41104: LD_VAR 0 3
41108: PUSH
41109: LD_INT 8
41111: GREATER
41112: OR
41113: IFFALSE 41117
// exit ;
41115: GO 41176
// if not range then
41117: LD_VAR 0 4
41121: NOT
41122: IFFALSE 41133
// range := - 12 ;
41124: LD_ADDR_VAR 0 4
41128: PUSH
41129: LD_INT 12
41131: NEG
41132: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
41133: LD_VAR 0 1
41137: PPUSH
41138: LD_VAR 0 2
41142: PPUSH
41143: LD_VAR 0 3
41147: PPUSH
41148: LD_VAR 0 4
41152: PPUSH
41153: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41157: LD_VAR 0 1
41161: PPUSH
41162: LD_VAR 0 2
41166: PPUSH
41167: LD_VAR 0 3
41171: PPUSH
41172: CALL_OW 331
// end ;
41176: LD_VAR 0 5
41180: RET
// export function Video ( mode ) ; begin
41181: LD_INT 0
41183: PPUSH
// ingame_video = mode ;
41184: LD_ADDR_OWVAR 52
41188: PUSH
41189: LD_VAR 0 1
41193: ST_TO_ADDR
// interface_hidden = mode ;
41194: LD_ADDR_OWVAR 54
41198: PUSH
41199: LD_VAR 0 1
41203: ST_TO_ADDR
// end ;
41204: LD_VAR 0 2
41208: RET
// export function Join ( array , element ) ; begin
41209: LD_INT 0
41211: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41212: LD_ADDR_VAR 0 3
41216: PUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: LD_VAR 0 1
41226: PUSH
41227: LD_INT 1
41229: PLUS
41230: PPUSH
41231: LD_VAR 0 2
41235: PPUSH
41236: CALL_OW 1
41240: ST_TO_ADDR
// end ;
41241: LD_VAR 0 3
41245: RET
// export function JoinUnion ( array , element ) ; begin
41246: LD_INT 0
41248: PPUSH
// result := array union element ;
41249: LD_ADDR_VAR 0 3
41253: PUSH
41254: LD_VAR 0 1
41258: PUSH
41259: LD_VAR 0 2
41263: UNION
41264: ST_TO_ADDR
// end ;
41265: LD_VAR 0 3
41269: RET
// export function GetBehemoths ( side ) ; begin
41270: LD_INT 0
41272: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41273: LD_ADDR_VAR 0 2
41277: PUSH
41278: LD_INT 22
41280: PUSH
41281: LD_VAR 0 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 31
41292: PUSH
41293: LD_INT 25
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PPUSH
41304: CALL_OW 69
41308: ST_TO_ADDR
// end ;
41309: LD_VAR 0 2
41313: RET
// export function Shuffle ( array ) ; var i , index ; begin
41314: LD_INT 0
41316: PPUSH
41317: PPUSH
41318: PPUSH
// result := [ ] ;
41319: LD_ADDR_VAR 0 2
41323: PUSH
41324: EMPTY
41325: ST_TO_ADDR
// if not array then
41326: LD_VAR 0 1
41330: NOT
41331: IFFALSE 41335
// exit ;
41333: GO 41434
// Randomize ;
41335: CALL_OW 10
// for i = array downto 1 do
41339: LD_ADDR_VAR 0 3
41343: PUSH
41344: DOUBLE
41345: LD_VAR 0 1
41349: INC
41350: ST_TO_ADDR
41351: LD_INT 1
41353: PUSH
41354: FOR_DOWNTO
41355: IFFALSE 41432
// begin index := rand ( 1 , array ) ;
41357: LD_ADDR_VAR 0 4
41361: PUSH
41362: LD_INT 1
41364: PPUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 12
41374: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41375: LD_ADDR_VAR 0 2
41379: PUSH
41380: LD_VAR 0 2
41384: PPUSH
41385: LD_VAR 0 2
41389: PUSH
41390: LD_INT 1
41392: PLUS
41393: PPUSH
41394: LD_VAR 0 1
41398: PUSH
41399: LD_VAR 0 4
41403: ARRAY
41404: PPUSH
41405: CALL_OW 2
41409: ST_TO_ADDR
// array := Delete ( array , index ) ;
41410: LD_ADDR_VAR 0 1
41414: PUSH
41415: LD_VAR 0 1
41419: PPUSH
41420: LD_VAR 0 4
41424: PPUSH
41425: CALL_OW 3
41429: ST_TO_ADDR
// end ;
41430: GO 41354
41432: POP
41433: POP
// end ;
41434: LD_VAR 0 2
41438: RET
// export function GetBaseMaterials ( base ) ; begin
41439: LD_INT 0
41441: PPUSH
// result := [ 0 , 0 , 0 ] ;
41442: LD_ADDR_VAR 0 2
41446: PUSH
41447: LD_INT 0
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: ST_TO_ADDR
// if not base then
41461: LD_VAR 0 1
41465: NOT
41466: IFFALSE 41470
// exit ;
41468: GO 41519
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41470: LD_ADDR_VAR 0 2
41474: PUSH
41475: LD_VAR 0 1
41479: PPUSH
41480: LD_INT 1
41482: PPUSH
41483: CALL_OW 275
41487: PUSH
41488: LD_VAR 0 1
41492: PPUSH
41493: LD_INT 2
41495: PPUSH
41496: CALL_OW 275
41500: PUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: LD_INT 3
41508: PPUSH
41509: CALL_OW 275
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: LIST
41518: ST_TO_ADDR
// end ;
41519: LD_VAR 0 2
41523: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41524: LD_INT 0
41526: PPUSH
41527: PPUSH
// result := array ;
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_VAR 0 1
41537: ST_TO_ADDR
// if size >= result then
41538: LD_VAR 0 2
41542: PUSH
41543: LD_VAR 0 3
41547: GREATEREQUAL
41548: IFFALSE 41552
// exit ;
41550: GO 41602
// if size then
41552: LD_VAR 0 2
41556: IFFALSE 41602
// for i := array downto size do
41558: LD_ADDR_VAR 0 4
41562: PUSH
41563: DOUBLE
41564: LD_VAR 0 1
41568: INC
41569: ST_TO_ADDR
41570: LD_VAR 0 2
41574: PUSH
41575: FOR_DOWNTO
41576: IFFALSE 41600
// result := Delete ( result , result ) ;
41578: LD_ADDR_VAR 0 3
41582: PUSH
41583: LD_VAR 0 3
41587: PPUSH
41588: LD_VAR 0 3
41592: PPUSH
41593: CALL_OW 3
41597: ST_TO_ADDR
41598: GO 41575
41600: POP
41601: POP
// end ;
41602: LD_VAR 0 3
41606: RET
// export function ComExit ( unit ) ; var tmp ; begin
41607: LD_INT 0
41609: PPUSH
41610: PPUSH
// if not IsInUnit ( unit ) then
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 310
41620: NOT
41621: IFFALSE 41625
// exit ;
41623: GO 41685
// tmp := IsInUnit ( unit ) ;
41625: LD_ADDR_VAR 0 3
41629: PUSH
41630: LD_VAR 0 1
41634: PPUSH
41635: CALL_OW 310
41639: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41640: LD_VAR 0 3
41644: PPUSH
41645: CALL_OW 247
41649: PUSH
41650: LD_INT 2
41652: EQUAL
41653: IFFALSE 41666
// ComExitVehicle ( unit ) else
41655: LD_VAR 0 1
41659: PPUSH
41660: CALL_OW 121
41664: GO 41675
// ComExitBuilding ( unit ) ;
41666: LD_VAR 0 1
41670: PPUSH
41671: CALL_OW 122
// result := tmp ;
41675: LD_ADDR_VAR 0 2
41679: PUSH
41680: LD_VAR 0 3
41684: ST_TO_ADDR
// end ;
41685: LD_VAR 0 2
41689: RET
// export function ComExitAll ( units ) ; var i ; begin
41690: LD_INT 0
41692: PPUSH
41693: PPUSH
// if not units then
41694: LD_VAR 0 1
41698: NOT
41699: IFFALSE 41703
// exit ;
41701: GO 41729
// for i in units do
41703: LD_ADDR_VAR 0 3
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: FOR_IN
41714: IFFALSE 41727
// ComExit ( i ) ;
41716: LD_VAR 0 3
41720: PPUSH
41721: CALL 41607 0 1
41725: GO 41713
41727: POP
41728: POP
// end ;
41729: LD_VAR 0 2
41733: RET
// export function ResetHc ; begin
41734: LD_INT 0
41736: PPUSH
// InitHc ;
41737: CALL_OW 19
// hc_importance := 0 ;
41741: LD_ADDR_OWVAR 32
41745: PUSH
41746: LD_INT 0
41748: ST_TO_ADDR
// end ;
41749: LD_VAR 0 1
41753: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41754: LD_INT 0
41756: PPUSH
41757: PPUSH
41758: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41759: LD_ADDR_VAR 0 6
41763: PUSH
41764: LD_VAR 0 1
41768: PUSH
41769: LD_VAR 0 3
41773: PLUS
41774: PUSH
41775: LD_INT 2
41777: DIV
41778: ST_TO_ADDR
// if _x < 0 then
41779: LD_VAR 0 6
41783: PUSH
41784: LD_INT 0
41786: LESS
41787: IFFALSE 41804
// _x := _x * - 1 ;
41789: LD_ADDR_VAR 0 6
41793: PUSH
41794: LD_VAR 0 6
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: MUL
41803: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41804: LD_ADDR_VAR 0 7
41808: PUSH
41809: LD_VAR 0 2
41813: PUSH
41814: LD_VAR 0 4
41818: PLUS
41819: PUSH
41820: LD_INT 2
41822: DIV
41823: ST_TO_ADDR
// if _y < 0 then
41824: LD_VAR 0 7
41828: PUSH
41829: LD_INT 0
41831: LESS
41832: IFFALSE 41849
// _y := _y * - 1 ;
41834: LD_ADDR_VAR 0 7
41838: PUSH
41839: LD_VAR 0 7
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: MUL
41848: ST_TO_ADDR
// result := [ _x , _y ] ;
41849: LD_ADDR_VAR 0 5
41853: PUSH
41854: LD_VAR 0 6
41858: PUSH
41859: LD_VAR 0 7
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: ST_TO_ADDR
// end ;
41868: LD_VAR 0 5
41872: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41873: LD_INT 0
41875: PPUSH
41876: PPUSH
41877: PPUSH
41878: PPUSH
// task := GetTaskList ( unit ) ;
41879: LD_ADDR_VAR 0 7
41883: PUSH
41884: LD_VAR 0 1
41888: PPUSH
41889: CALL_OW 437
41893: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41894: LD_VAR 0 7
41898: NOT
41899: IFFALSE 41918
41901: PUSH
41902: LD_VAR 0 1
41906: PPUSH
41907: LD_VAR 0 2
41911: PPUSH
41912: CALL_OW 308
41916: NOT
41917: AND
41918: IFFALSE 41922
// exit ;
41920: GO 42040
// if IsInArea ( unit , area ) then
41922: LD_VAR 0 1
41926: PPUSH
41927: LD_VAR 0 2
41931: PPUSH
41932: CALL_OW 308
41936: IFFALSE 41954
// begin ComMoveToArea ( unit , goAway ) ;
41938: LD_VAR 0 1
41942: PPUSH
41943: LD_VAR 0 3
41947: PPUSH
41948: CALL_OW 113
// exit ;
41952: GO 42040
// end ; if task [ 1 ] [ 1 ] <> M then
41954: LD_VAR 0 7
41958: PUSH
41959: LD_INT 1
41961: ARRAY
41962: PUSH
41963: LD_INT 1
41965: ARRAY
41966: PUSH
41967: LD_STRING M
41969: NONEQUAL
41970: IFFALSE 41974
// exit ;
41972: GO 42040
// x := task [ 1 ] [ 2 ] ;
41974: LD_ADDR_VAR 0 5
41978: PUSH
41979: LD_VAR 0 7
41983: PUSH
41984: LD_INT 1
41986: ARRAY
41987: PUSH
41988: LD_INT 2
41990: ARRAY
41991: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41992: LD_ADDR_VAR 0 6
41996: PUSH
41997: LD_VAR 0 7
42001: PUSH
42002: LD_INT 1
42004: ARRAY
42005: PUSH
42006: LD_INT 3
42008: ARRAY
42009: ST_TO_ADDR
// if InArea ( x , y , area ) then
42010: LD_VAR 0 5
42014: PPUSH
42015: LD_VAR 0 6
42019: PPUSH
42020: LD_VAR 0 2
42024: PPUSH
42025: CALL_OW 309
42029: IFFALSE 42040
// ComStop ( unit ) ;
42031: LD_VAR 0 1
42035: PPUSH
42036: CALL_OW 141
// end ;
42040: LD_VAR 0 4
42044: RET
// export function Abs ( value ) ; begin
42045: LD_INT 0
42047: PPUSH
// result := value ;
42048: LD_ADDR_VAR 0 2
42052: PUSH
42053: LD_VAR 0 1
42057: ST_TO_ADDR
// if value < 0 then
42058: LD_VAR 0 1
42062: PUSH
42063: LD_INT 0
42065: LESS
42066: IFFALSE 42083
// result := value * - 1 ;
42068: LD_ADDR_VAR 0 2
42072: PUSH
42073: LD_VAR 0 1
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: MUL
42082: ST_TO_ADDR
// end ;
42083: LD_VAR 0 2
42087: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
42088: LD_INT 0
42090: PPUSH
42091: PPUSH
42092: PPUSH
42093: PPUSH
42094: PPUSH
42095: PPUSH
42096: PPUSH
42097: PPUSH
// if not unit or not building then
42098: LD_VAR 0 1
42102: NOT
42103: IFTRUE 42112
42105: PUSH
42106: LD_VAR 0 2
42110: NOT
42111: OR
42112: IFFALSE 42116
// exit ;
42114: GO 42344
// x := GetX ( building ) ;
42116: LD_ADDR_VAR 0 4
42120: PUSH
42121: LD_VAR 0 2
42125: PPUSH
42126: CALL_OW 250
42130: ST_TO_ADDR
// y := GetY ( building ) ;
42131: LD_ADDR_VAR 0 6
42135: PUSH
42136: LD_VAR 0 2
42140: PPUSH
42141: CALL_OW 251
42145: ST_TO_ADDR
// d := GetDir ( building ) ;
42146: LD_ADDR_VAR 0 8
42150: PUSH
42151: LD_VAR 0 2
42155: PPUSH
42156: CALL_OW 254
42160: ST_TO_ADDR
// r := 4 ;
42161: LD_ADDR_VAR 0 9
42165: PUSH
42166: LD_INT 4
42168: ST_TO_ADDR
// for i := 1 to 5 do
42169: LD_ADDR_VAR 0 10
42173: PUSH
42174: DOUBLE
42175: LD_INT 1
42177: DEC
42178: ST_TO_ADDR
42179: LD_INT 5
42181: PUSH
42182: FOR_TO
42183: IFFALSE 42342
// begin _x := ShiftX ( x , d , r + i ) ;
42185: LD_ADDR_VAR 0 5
42189: PUSH
42190: LD_VAR 0 4
42194: PPUSH
42195: LD_VAR 0 8
42199: PPUSH
42200: LD_VAR 0 9
42204: PUSH
42205: LD_VAR 0 10
42209: PLUS
42210: PPUSH
42211: CALL_OW 272
42215: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42216: LD_ADDR_VAR 0 7
42220: PUSH
42221: LD_VAR 0 6
42225: PPUSH
42226: LD_VAR 0 8
42230: PPUSH
42231: LD_VAR 0 9
42235: PUSH
42236: LD_VAR 0 10
42240: PLUS
42241: PPUSH
42242: CALL_OW 273
42246: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42247: LD_VAR 0 5
42251: PPUSH
42252: LD_VAR 0 7
42256: PPUSH
42257: CALL_OW 488
42261: IFFALSE 42296
42263: PUSH
42264: LD_VAR 0 5
42268: PPUSH
42269: LD_VAR 0 7
42273: PPUSH
42274: CALL_OW 428
42278: PPUSH
42279: CALL_OW 247
42283: PUSH
42284: LD_INT 3
42286: PUSH
42287: LD_INT 2
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: IN
42294: NOT
42295: AND
42296: IFFALSE 42340
// begin ComMoveXY ( unit , _x , _y ) ;
42298: LD_VAR 0 1
42302: PPUSH
42303: LD_VAR 0 5
42307: PPUSH
42308: LD_VAR 0 7
42312: PPUSH
42313: CALL_OW 111
// result := [ _x , _y ] ;
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_VAR 0 5
42326: PUSH
42327: LD_VAR 0 7
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: ST_TO_ADDR
// exit ;
42336: POP
42337: POP
42338: GO 42344
// end ; end ;
42340: GO 42182
42342: POP
42343: POP
// end ;
42344: LD_VAR 0 3
42348: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42349: LD_INT 0
42351: PPUSH
42352: PPUSH
42353: PPUSH
// result := 0 ;
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_INT 0
42361: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 0
42369: LESS
42370: IFTRUE 42382
42372: PUSH
42373: LD_VAR 0 1
42377: PUSH
42378: LD_INT 8
42380: GREATER
42381: OR
42382: IFTRUE 42394
42384: PUSH
42385: LD_VAR 0 2
42389: PUSH
42390: LD_INT 0
42392: LESS
42393: OR
42394: IFTRUE 42406
42396: PUSH
42397: LD_VAR 0 2
42401: PUSH
42402: LD_INT 8
42404: GREATER
42405: OR
42406: IFFALSE 42410
// exit ;
42408: GO 42485
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42410: LD_ADDR_VAR 0 4
42414: PUSH
42415: LD_INT 22
42417: PUSH
42418: LD_VAR 0 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PPUSH
42427: CALL_OW 69
42431: PUSH
42432: FOR_IN
42433: IFFALSE 42483
// begin un := UnitShoot ( i ) ;
42435: LD_ADDR_VAR 0 5
42439: PUSH
42440: LD_VAR 0 4
42444: PPUSH
42445: CALL_OW 504
42449: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42450: LD_VAR 0 5
42454: PPUSH
42455: CALL_OW 255
42459: PUSH
42460: LD_VAR 0 1
42464: EQUAL
42465: IFFALSE 42481
// begin result := un ;
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_VAR 0 5
42476: ST_TO_ADDR
// exit ;
42477: POP
42478: POP
42479: GO 42485
// end ; end ;
42481: GO 42432
42483: POP
42484: POP
// end ;
42485: LD_VAR 0 3
42489: RET
// export function GetCargoBay ( units ) ; begin
42490: LD_INT 0
42492: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42493: LD_ADDR_VAR 0 2
42497: PUSH
42498: LD_VAR 0 1
42502: PPUSH
42503: LD_INT 2
42505: PUSH
42506: LD_INT 34
42508: PUSH
42509: LD_INT 12
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 34
42518: PUSH
42519: LD_INT 51
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 34
42528: PUSH
42529: LD_INT 32
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 34
42538: PUSH
42539: LD_INT 89
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: PPUSH
42553: CALL_OW 72
42557: ST_TO_ADDR
// end ;
42558: LD_VAR 0 2
42562: RET
// export function Negate ( value ) ; begin
42563: LD_INT 0
42565: PPUSH
// result := not value ;
42566: LD_ADDR_VAR 0 2
42570: PUSH
42571: LD_VAR 0 1
42575: NOT
42576: ST_TO_ADDR
// end ;
42577: LD_VAR 0 2
42581: RET
// export function Inc ( value ) ; begin
42582: LD_INT 0
42584: PPUSH
// result := value + 1 ;
42585: LD_ADDR_VAR 0 2
42589: PUSH
42590: LD_VAR 0 1
42594: PUSH
42595: LD_INT 1
42597: PLUS
42598: ST_TO_ADDR
// end ;
42599: LD_VAR 0 2
42603: RET
// export function Dec ( value ) ; begin
42604: LD_INT 0
42606: PPUSH
// result := value - 1 ;
42607: LD_ADDR_VAR 0 2
42611: PUSH
42612: LD_VAR 0 1
42616: PUSH
42617: LD_INT 1
42619: MINUS
42620: ST_TO_ADDR
// end ;
42621: LD_VAR 0 2
42625: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42626: LD_INT 0
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42636: LD_VAR 0 1
42640: PPUSH
42641: LD_VAR 0 2
42645: PPUSH
42646: CALL_OW 488
42650: NOT
42651: IFTRUE 42670
42653: PUSH
42654: LD_VAR 0 3
42658: PPUSH
42659: LD_VAR 0 4
42663: PPUSH
42664: CALL_OW 488
42668: NOT
42669: OR
42670: IFFALSE 42683
// begin result := - 1 ;
42672: LD_ADDR_VAR 0 5
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: ST_TO_ADDR
// exit ;
42681: GO 42918
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42683: LD_ADDR_VAR 0 12
42687: PUSH
42688: LD_VAR 0 1
42692: PPUSH
42693: LD_VAR 0 2
42697: PPUSH
42698: LD_VAR 0 3
42702: PPUSH
42703: LD_VAR 0 4
42707: PPUSH
42708: CALL 41754 0 4
42712: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42713: LD_ADDR_VAR 0 11
42717: PUSH
42718: LD_VAR 0 1
42722: PPUSH
42723: LD_VAR 0 2
42727: PPUSH
42728: LD_VAR 0 12
42732: PUSH
42733: LD_INT 1
42735: ARRAY
42736: PPUSH
42737: LD_VAR 0 12
42741: PUSH
42742: LD_INT 2
42744: ARRAY
42745: PPUSH
42746: CALL_OW 298
42750: ST_TO_ADDR
// distance := 9999 ;
42751: LD_ADDR_VAR 0 10
42755: PUSH
42756: LD_INT 9999
42758: ST_TO_ADDR
// for i := 0 to 5 do
42759: LD_ADDR_VAR 0 6
42763: PUSH
42764: DOUBLE
42765: LD_INT 0
42767: DEC
42768: ST_TO_ADDR
42769: LD_INT 5
42771: PUSH
42772: FOR_TO
42773: IFFALSE 42916
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42775: LD_ADDR_VAR 0 7
42779: PUSH
42780: LD_VAR 0 1
42784: PPUSH
42785: LD_VAR 0 6
42789: PPUSH
42790: LD_VAR 0 11
42794: PPUSH
42795: CALL_OW 272
42799: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42800: LD_ADDR_VAR 0 8
42804: PUSH
42805: LD_VAR 0 2
42809: PPUSH
42810: LD_VAR 0 6
42814: PPUSH
42815: LD_VAR 0 11
42819: PPUSH
42820: CALL_OW 273
42824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42825: LD_VAR 0 7
42829: PPUSH
42830: LD_VAR 0 8
42834: PPUSH
42835: CALL_OW 488
42839: NOT
42840: IFFALSE 42844
// continue ;
42842: GO 42772
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42844: LD_ADDR_VAR 0 9
42848: PUSH
42849: LD_VAR 0 12
42853: PUSH
42854: LD_INT 1
42856: ARRAY
42857: PPUSH
42858: LD_VAR 0 12
42862: PUSH
42863: LD_INT 2
42865: ARRAY
42866: PPUSH
42867: LD_VAR 0 7
42871: PPUSH
42872: LD_VAR 0 8
42876: PPUSH
42877: CALL_OW 298
42881: ST_TO_ADDR
// if tmp < distance then
42882: LD_VAR 0 9
42886: PUSH
42887: LD_VAR 0 10
42891: LESS
42892: IFFALSE 42914
// begin result := i ;
42894: LD_ADDR_VAR 0 5
42898: PUSH
42899: LD_VAR 0 6
42903: ST_TO_ADDR
// distance := tmp ;
42904: LD_ADDR_VAR 0 10
42908: PUSH
42909: LD_VAR 0 9
42913: ST_TO_ADDR
// end ; end ;
42914: GO 42772
42916: POP
42917: POP
// end ;
42918: LD_VAR 0 5
42922: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42923: LD_INT 0
42925: PPUSH
42926: PPUSH
// if not driver or not IsInUnit ( driver ) then
42927: LD_VAR 0 1
42931: NOT
42932: IFTRUE 42946
42934: PUSH
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 310
42944: NOT
42945: OR
42946: IFFALSE 42950
// exit ;
42948: GO 43040
// vehicle := IsInUnit ( driver ) ;
42950: LD_ADDR_VAR 0 3
42954: PUSH
42955: LD_VAR 0 1
42959: PPUSH
42960: CALL_OW 310
42964: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42965: LD_VAR 0 1
42969: PPUSH
42970: LD_STRING \
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 0
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: PUSH
43000: LD_STRING E
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 0
43008: PUSH
43009: LD_VAR 0 3
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PPUSH
43036: CALL_OW 446
// end ;
43040: LD_VAR 0 2
43044: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
43045: LD_INT 0
43047: PPUSH
43048: PPUSH
// if not driver or not IsInUnit ( driver ) then
43049: LD_VAR 0 1
43053: NOT
43054: IFTRUE 43068
43056: PUSH
43057: LD_VAR 0 1
43061: PPUSH
43062: CALL_OW 310
43066: NOT
43067: OR
43068: IFFALSE 43072
// exit ;
43070: GO 43162
// vehicle := IsInUnit ( driver ) ;
43072: LD_ADDR_VAR 0 3
43076: PUSH
43077: LD_VAR 0 1
43081: PPUSH
43082: CALL_OW 310
43086: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
43087: LD_VAR 0 1
43091: PPUSH
43092: LD_STRING \
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 0
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: PUSH
43122: LD_STRING E
43124: PUSH
43125: LD_INT 0
43127: PUSH
43128: LD_INT 0
43130: PUSH
43131: LD_VAR 0 3
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 0
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PPUSH
43158: CALL_OW 447
// end ;
43162: LD_VAR 0 2
43166: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43167: LD_INT 0
43169: PPUSH
43170: PPUSH
43171: PPUSH
// tmp := [ ] ;
43172: LD_ADDR_VAR 0 5
43176: PUSH
43177: EMPTY
43178: ST_TO_ADDR
// for i in units do
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: LD_VAR 0 1
43188: PUSH
43189: FOR_IN
43190: IFFALSE 43228
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43192: LD_ADDR_VAR 0 5
43196: PUSH
43197: LD_VAR 0 5
43201: PPUSH
43202: LD_VAR 0 5
43206: PUSH
43207: LD_INT 1
43209: PLUS
43210: PPUSH
43211: LD_VAR 0 4
43215: PPUSH
43216: CALL_OW 256
43220: PPUSH
43221: CALL_OW 2
43225: ST_TO_ADDR
43226: GO 43189
43228: POP
43229: POP
// if not tmp then
43230: LD_VAR 0 5
43234: NOT
43235: IFFALSE 43239
// exit ;
43237: GO 43287
// if asc then
43239: LD_VAR 0 2
43243: IFFALSE 43267
// result := SortListByListAsc ( units , tmp ) else
43245: LD_ADDR_VAR 0 3
43249: PUSH
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_VAR 0 5
43259: PPUSH
43260: CALL_OW 76
43264: ST_TO_ADDR
43265: GO 43287
// result := SortListByListDesc ( units , tmp ) ;
43267: LD_ADDR_VAR 0 3
43271: PUSH
43272: LD_VAR 0 1
43276: PPUSH
43277: LD_VAR 0 5
43281: PPUSH
43282: CALL_OW 77
43286: ST_TO_ADDR
// end ;
43287: LD_VAR 0 3
43291: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43292: LD_INT 0
43294: PPUSH
43295: PPUSH
// task := GetTaskList ( mech ) ;
43296: LD_ADDR_VAR 0 4
43300: PUSH
43301: LD_VAR 0 1
43305: PPUSH
43306: CALL_OW 437
43310: ST_TO_ADDR
// if not task then
43311: LD_VAR 0 4
43315: NOT
43316: IFFALSE 43320
// exit ;
43318: GO 43364
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43320: LD_ADDR_VAR 0 3
43324: PUSH
43325: LD_VAR 0 4
43329: PUSH
43330: LD_INT 1
43332: ARRAY
43333: PUSH
43334: LD_INT 1
43336: ARRAY
43337: PUSH
43338: LD_STRING r
43340: EQUAL
43341: IFFALSE 43363
43343: PUSH
43344: LD_VAR 0 4
43348: PUSH
43349: LD_INT 1
43351: ARRAY
43352: PUSH
43353: LD_INT 4
43355: ARRAY
43356: PUSH
43357: LD_VAR 0 2
43361: EQUAL
43362: AND
43363: ST_TO_ADDR
// end ;
43364: LD_VAR 0 3
43368: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43369: LD_INT 0
43371: PPUSH
// SetDir ( unit , d ) ;
43372: LD_VAR 0 1
43376: PPUSH
43377: LD_VAR 0 4
43381: PPUSH
43382: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43386: LD_ADDR_VAR 0 6
43390: PUSH
43391: LD_VAR 0 1
43395: PPUSH
43396: LD_VAR 0 2
43400: PPUSH
43401: LD_VAR 0 3
43405: PPUSH
43406: LD_VAR 0 5
43410: PPUSH
43411: CALL_OW 48
43415: ST_TO_ADDR
// end ;
43416: LD_VAR 0 6
43420: RET
// export function ToNaturalNumber ( number ) ; begin
43421: LD_INT 0
43423: PPUSH
// result := number div 1 ;
43424: LD_ADDR_VAR 0 2
43428: PUSH
43429: LD_VAR 0 1
43433: PUSH
43434: LD_INT 1
43436: DIV
43437: ST_TO_ADDR
// if number < 0 then
43438: LD_VAR 0 1
43442: PUSH
43443: LD_INT 0
43445: LESS
43446: IFFALSE 43456
// result := 0 ;
43448: LD_ADDR_VAR 0 2
43452: PUSH
43453: LD_INT 0
43455: ST_TO_ADDR
// end ;
43456: LD_VAR 0 2
43460: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43461: LD_INT 0
43463: PPUSH
43464: PPUSH
43465: PPUSH
// if not buildings then
43466: LD_VAR 0 1
43470: NOT
43471: IFFALSE 43475
// exit ;
43473: GO 43590
// tmp := [ ] ;
43475: LD_ADDR_VAR 0 5
43479: PUSH
43480: EMPTY
43481: ST_TO_ADDR
// for b in buildings do
43482: LD_ADDR_VAR 0 4
43486: PUSH
43487: LD_VAR 0 1
43491: PUSH
43492: FOR_IN
43493: IFFALSE 43531
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43495: LD_ADDR_VAR 0 5
43499: PUSH
43500: LD_VAR 0 5
43504: PPUSH
43505: LD_VAR 0 5
43509: PUSH
43510: LD_INT 1
43512: PLUS
43513: PPUSH
43514: LD_VAR 0 4
43518: PPUSH
43519: CALL_OW 266
43523: PPUSH
43524: CALL_OW 1
43528: ST_TO_ADDR
43529: GO 43492
43531: POP
43532: POP
// if not tmp then
43533: LD_VAR 0 5
43537: NOT
43538: IFFALSE 43542
// exit ;
43540: GO 43590
// if asc then
43542: LD_VAR 0 2
43546: IFFALSE 43570
// result := SortListByListAsc ( buildings , tmp ) else
43548: LD_ADDR_VAR 0 3
43552: PUSH
43553: LD_VAR 0 1
43557: PPUSH
43558: LD_VAR 0 5
43562: PPUSH
43563: CALL_OW 76
43567: ST_TO_ADDR
43568: GO 43590
// result := SortListByListDesc ( buildings , tmp ) ;
43570: LD_ADDR_VAR 0 3
43574: PUSH
43575: LD_VAR 0 1
43579: PPUSH
43580: LD_VAR 0 5
43584: PPUSH
43585: CALL_OW 77
43589: ST_TO_ADDR
// end ;
43590: LD_VAR 0 3
43594: RET
// export function SortByClass ( units , class ) ; var un ; begin
43595: LD_INT 0
43597: PPUSH
43598: PPUSH
// if not units or not class then
43599: LD_VAR 0 1
43603: NOT
43604: IFTRUE 43613
43606: PUSH
43607: LD_VAR 0 2
43611: NOT
43612: OR
43613: IFFALSE 43617
// exit ;
43615: GO 43712
// result := [ ] ;
43617: LD_ADDR_VAR 0 3
43621: PUSH
43622: EMPTY
43623: ST_TO_ADDR
// for un in units do
43624: LD_ADDR_VAR 0 4
43628: PUSH
43629: LD_VAR 0 1
43633: PUSH
43634: FOR_IN
43635: IFFALSE 43710
// if GetClass ( un ) = class then
43637: LD_VAR 0 4
43641: PPUSH
43642: CALL_OW 257
43646: PUSH
43647: LD_VAR 0 2
43651: EQUAL
43652: IFFALSE 43679
// result := Insert ( result , 1 , un ) else
43654: LD_ADDR_VAR 0 3
43658: PUSH
43659: LD_VAR 0 3
43663: PPUSH
43664: LD_INT 1
43666: PPUSH
43667: LD_VAR 0 4
43671: PPUSH
43672: CALL_OW 2
43676: ST_TO_ADDR
43677: GO 43708
// result := Replace ( result , result + 1 , un ) ;
43679: LD_ADDR_VAR 0 3
43683: PUSH
43684: LD_VAR 0 3
43688: PPUSH
43689: LD_VAR 0 3
43693: PUSH
43694: LD_INT 1
43696: PLUS
43697: PPUSH
43698: LD_VAR 0 4
43702: PPUSH
43703: CALL_OW 1
43707: ST_TO_ADDR
43708: GO 43634
43710: POP
43711: POP
// end ;
43712: LD_VAR 0 3
43716: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43717: LD_INT 0
43719: PPUSH
43720: PPUSH
43721: PPUSH
43722: PPUSH
43723: PPUSH
43724: PPUSH
43725: PPUSH
// result := [ ] ;
43726: LD_ADDR_VAR 0 4
43730: PUSH
43731: EMPTY
43732: ST_TO_ADDR
// if x - r < 0 then
43733: LD_VAR 0 1
43737: PUSH
43738: LD_VAR 0 3
43742: MINUS
43743: PUSH
43744: LD_INT 0
43746: LESS
43747: IFFALSE 43759
// min_x := 0 else
43749: LD_ADDR_VAR 0 8
43753: PUSH
43754: LD_INT 0
43756: ST_TO_ADDR
43757: GO 43775
// min_x := x - r ;
43759: LD_ADDR_VAR 0 8
43763: PUSH
43764: LD_VAR 0 1
43768: PUSH
43769: LD_VAR 0 3
43773: MINUS
43774: ST_TO_ADDR
// if y - r < 0 then
43775: LD_VAR 0 2
43779: PUSH
43780: LD_VAR 0 3
43784: MINUS
43785: PUSH
43786: LD_INT 0
43788: LESS
43789: IFFALSE 43801
// min_y := 0 else
43791: LD_ADDR_VAR 0 7
43795: PUSH
43796: LD_INT 0
43798: ST_TO_ADDR
43799: GO 43817
// min_y := y - r ;
43801: LD_ADDR_VAR 0 7
43805: PUSH
43806: LD_VAR 0 2
43810: PUSH
43811: LD_VAR 0 3
43815: MINUS
43816: ST_TO_ADDR
// max_x := x + r ;
43817: LD_ADDR_VAR 0 9
43821: PUSH
43822: LD_VAR 0 1
43826: PUSH
43827: LD_VAR 0 3
43831: PLUS
43832: ST_TO_ADDR
// max_y := y + r ;
43833: LD_ADDR_VAR 0 10
43837: PUSH
43838: LD_VAR 0 2
43842: PUSH
43843: LD_VAR 0 3
43847: PLUS
43848: ST_TO_ADDR
// for _x = min_x to max_x do
43849: LD_ADDR_VAR 0 5
43853: PUSH
43854: DOUBLE
43855: LD_VAR 0 8
43859: DEC
43860: ST_TO_ADDR
43861: LD_VAR 0 9
43865: PUSH
43866: FOR_TO
43867: IFFALSE 43968
// for _y = min_y to max_y do
43869: LD_ADDR_VAR 0 6
43873: PUSH
43874: DOUBLE
43875: LD_VAR 0 7
43879: DEC
43880: ST_TO_ADDR
43881: LD_VAR 0 10
43885: PUSH
43886: FOR_TO
43887: IFFALSE 43964
// begin if not ValidHex ( _x , _y ) then
43889: LD_VAR 0 5
43893: PPUSH
43894: LD_VAR 0 6
43898: PPUSH
43899: CALL_OW 488
43903: NOT
43904: IFFALSE 43908
// continue ;
43906: GO 43886
// if GetResourceTypeXY ( _x , _y ) then
43908: LD_VAR 0 5
43912: PPUSH
43913: LD_VAR 0 6
43917: PPUSH
43918: CALL_OW 283
43922: IFFALSE 43962
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43924: LD_ADDR_VAR 0 4
43928: PUSH
43929: LD_VAR 0 4
43933: PPUSH
43934: LD_VAR 0 4
43938: PUSH
43939: LD_INT 1
43941: PLUS
43942: PPUSH
43943: LD_VAR 0 5
43947: PUSH
43948: LD_VAR 0 6
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PPUSH
43957: CALL_OW 1
43961: ST_TO_ADDR
// end ;
43962: GO 43886
43964: POP
43965: POP
43966: GO 43866
43968: POP
43969: POP
// end ;
43970: LD_VAR 0 4
43974: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43975: LD_INT 0
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
43981: PPUSH
43982: PPUSH
43983: PPUSH
43984: PPUSH
// if not units then
43985: LD_VAR 0 1
43989: NOT
43990: IFFALSE 43994
// exit ;
43992: GO 44526
// result := UnitFilter ( units , [ f_ok ] ) ;
43994: LD_ADDR_VAR 0 3
43998: PUSH
43999: LD_VAR 0 1
44003: PPUSH
44004: LD_INT 50
44006: PUSH
44007: EMPTY
44008: LIST
44009: PPUSH
44010: CALL_OW 72
44014: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
44015: LD_ADDR_VAR 0 8
44019: PUSH
44020: LD_VAR 0 1
44024: PUSH
44025: LD_INT 1
44027: ARRAY
44028: PPUSH
44029: CALL_OW 255
44033: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
44034: LD_ADDR_VAR 0 10
44038: PUSH
44039: LD_INT 29
44041: PUSH
44042: LD_INT 91
44044: PUSH
44045: LD_INT 49
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: LIST
44052: ST_TO_ADDR
// if not result then
44053: LD_VAR 0 3
44057: NOT
44058: IFFALSE 44062
// exit ;
44060: GO 44526
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
44062: LD_ADDR_VAR 0 5
44066: PUSH
44067: LD_INT 81
44069: PUSH
44070: LD_VAR 0 8
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PPUSH
44079: CALL_OW 69
44083: ST_TO_ADDR
// for i in result do
44084: LD_ADDR_VAR 0 4
44088: PUSH
44089: LD_VAR 0 3
44093: PUSH
44094: FOR_IN
44095: IFFALSE 44524
// begin tag := GetTag ( i ) + 1 ;
44097: LD_ADDR_VAR 0 9
44101: PUSH
44102: LD_VAR 0 4
44106: PPUSH
44107: CALL_OW 110
44111: PUSH
44112: LD_INT 1
44114: PLUS
44115: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
44116: LD_ADDR_VAR 0 7
44120: PUSH
44121: LD_VAR 0 4
44125: PPUSH
44126: CALL_OW 250
44130: PPUSH
44131: LD_VAR 0 4
44135: PPUSH
44136: CALL_OW 251
44140: PPUSH
44141: LD_INT 4
44143: PPUSH
44144: CALL 43717 0 3
44148: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44149: LD_VAR 0 4
44153: PPUSH
44154: CALL_OW 247
44158: PUSH
44159: LD_INT 2
44161: EQUAL
44162: IFFALSE 44174
44164: PUSH
44165: LD_VAR 0 7
44169: PUSH
44170: LD_INT 2
44172: GREATER
44173: AND
44174: IFFALSE 44194
44176: PUSH
44177: LD_VAR 0 4
44181: PPUSH
44182: CALL_OW 264
44186: PUSH
44187: LD_VAR 0 10
44191: IN
44192: NOT
44193: AND
44194: IFFALSE 44233
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44196: LD_VAR 0 4
44200: PPUSH
44201: LD_VAR 0 7
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: PUSH
44210: LD_INT 1
44212: ARRAY
44213: PPUSH
44214: LD_VAR 0 7
44218: PUSH
44219: LD_INT 1
44221: ARRAY
44222: PUSH
44223: LD_INT 2
44225: ARRAY
44226: PPUSH
44227: CALL_OW 116
44231: GO 44522
// if path > tag then
44233: LD_VAR 0 2
44237: PUSH
44238: LD_VAR 0 9
44242: GREATER
44243: IFFALSE 44451
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44245: LD_ADDR_VAR 0 6
44249: PUSH
44250: LD_VAR 0 5
44254: PPUSH
44255: LD_INT 91
44257: PUSH
44258: LD_VAR 0 4
44262: PUSH
44263: LD_INT 8
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: PPUSH
44271: CALL_OW 72
44275: ST_TO_ADDR
// if nearEnemy then
44276: LD_VAR 0 6
44280: IFFALSE 44349
// begin if GetWeapon ( i ) = ru_time_lapser then
44282: LD_VAR 0 4
44286: PPUSH
44287: CALL_OW 264
44291: PUSH
44292: LD_INT 49
44294: EQUAL
44295: IFFALSE 44323
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44297: LD_VAR 0 4
44301: PPUSH
44302: LD_VAR 0 6
44306: PPUSH
44307: LD_VAR 0 4
44311: PPUSH
44312: CALL_OW 74
44316: PPUSH
44317: CALL_OW 112
44321: GO 44347
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44323: LD_VAR 0 4
44327: PPUSH
44328: LD_VAR 0 6
44332: PPUSH
44333: LD_VAR 0 4
44337: PPUSH
44338: CALL_OW 74
44342: PPUSH
44343: CALL 45607 0 2
// end else
44347: GO 44449
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44349: LD_VAR 0 4
44353: PPUSH
44354: LD_VAR 0 2
44358: PUSH
44359: LD_VAR 0 9
44363: ARRAY
44364: PUSH
44365: LD_INT 1
44367: ARRAY
44368: PPUSH
44369: LD_VAR 0 2
44373: PUSH
44374: LD_VAR 0 9
44378: ARRAY
44379: PUSH
44380: LD_INT 2
44382: ARRAY
44383: PPUSH
44384: CALL_OW 297
44388: PUSH
44389: LD_INT 6
44391: GREATER
44392: IFFALSE 44435
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44394: LD_VAR 0 4
44398: PPUSH
44399: LD_VAR 0 2
44403: PUSH
44404: LD_VAR 0 9
44408: ARRAY
44409: PUSH
44410: LD_INT 1
44412: ARRAY
44413: PPUSH
44414: LD_VAR 0 2
44418: PUSH
44419: LD_VAR 0 9
44423: ARRAY
44424: PUSH
44425: LD_INT 2
44427: ARRAY
44428: PPUSH
44429: CALL_OW 114
44433: GO 44449
// SetTag ( i , tag ) ;
44435: LD_VAR 0 4
44439: PPUSH
44440: LD_VAR 0 9
44444: PPUSH
44445: CALL_OW 109
// end else
44449: GO 44522
// if enemy then
44451: LD_VAR 0 5
44455: IFFALSE 44522
// begin if GetWeapon ( i ) = ru_time_lapser then
44457: LD_VAR 0 4
44461: PPUSH
44462: CALL_OW 264
44466: PUSH
44467: LD_INT 49
44469: EQUAL
44470: IFFALSE 44498
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44472: LD_VAR 0 4
44476: PPUSH
44477: LD_VAR 0 5
44481: PPUSH
44482: LD_VAR 0 4
44486: PPUSH
44487: CALL_OW 74
44491: PPUSH
44492: CALL_OW 112
44496: GO 44522
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44498: LD_VAR 0 4
44502: PPUSH
44503: LD_VAR 0 5
44507: PPUSH
44508: LD_VAR 0 4
44512: PPUSH
44513: CALL_OW 74
44517: PPUSH
44518: CALL 45607 0 2
// end ; end ;
44522: GO 44094
44524: POP
44525: POP
// end ;
44526: LD_VAR 0 3
44530: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44531: LD_INT 0
44533: PPUSH
44534: PPUSH
44535: PPUSH
// if not unit or IsInUnit ( unit ) then
44536: LD_VAR 0 1
44540: NOT
44541: IFTRUE 44554
44543: PUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 310
44553: OR
44554: IFFALSE 44558
// exit ;
44556: GO 44649
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44558: LD_ADDR_VAR 0 4
44562: PUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: CALL_OW 250
44572: PPUSH
44573: LD_VAR 0 2
44577: PPUSH
44578: LD_INT 1
44580: PPUSH
44581: CALL_OW 272
44585: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44586: LD_ADDR_VAR 0 5
44590: PUSH
44591: LD_VAR 0 1
44595: PPUSH
44596: CALL_OW 251
44600: PPUSH
44601: LD_VAR 0 2
44605: PPUSH
44606: LD_INT 1
44608: PPUSH
44609: CALL_OW 273
44613: ST_TO_ADDR
// if ValidHex ( x , y ) then
44614: LD_VAR 0 4
44618: PPUSH
44619: LD_VAR 0 5
44623: PPUSH
44624: CALL_OW 488
44628: IFFALSE 44649
// ComTurnXY ( unit , x , y ) ;
44630: LD_VAR 0 1
44634: PPUSH
44635: LD_VAR 0 4
44639: PPUSH
44640: LD_VAR 0 5
44644: PPUSH
44645: CALL_OW 118
// end ;
44649: LD_VAR 0 3
44653: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44654: LD_INT 0
44656: PPUSH
44657: PPUSH
// result := false ;
44658: LD_ADDR_VAR 0 3
44662: PUSH
44663: LD_INT 0
44665: ST_TO_ADDR
// if not units then
44666: LD_VAR 0 2
44670: NOT
44671: IFFALSE 44675
// exit ;
44673: GO 44720
// for i in units do
44675: LD_ADDR_VAR 0 4
44679: PUSH
44680: LD_VAR 0 2
44684: PUSH
44685: FOR_IN
44686: IFFALSE 44718
// if See ( side , i ) then
44688: LD_VAR 0 1
44692: PPUSH
44693: LD_VAR 0 4
44697: PPUSH
44698: CALL_OW 292
44702: IFFALSE 44716
// begin result := true ;
44704: LD_ADDR_VAR 0 3
44708: PUSH
44709: LD_INT 1
44711: ST_TO_ADDR
// exit ;
44712: POP
44713: POP
44714: GO 44720
// end ;
44716: GO 44685
44718: POP
44719: POP
// end ;
44720: LD_VAR 0 3
44724: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44725: LD_INT 0
44727: PPUSH
44728: PPUSH
44729: PPUSH
44730: PPUSH
// if not unit or not points then
44731: LD_VAR 0 1
44735: NOT
44736: IFTRUE 44745
44738: PUSH
44739: LD_VAR 0 2
44743: NOT
44744: OR
44745: IFFALSE 44749
// exit ;
44747: GO 44839
// dist := 99999 ;
44749: LD_ADDR_VAR 0 5
44753: PUSH
44754: LD_INT 99999
44756: ST_TO_ADDR
// for i in points do
44757: LD_ADDR_VAR 0 4
44761: PUSH
44762: LD_VAR 0 2
44766: PUSH
44767: FOR_IN
44768: IFFALSE 44837
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44770: LD_ADDR_VAR 0 6
44774: PUSH
44775: LD_VAR 0 1
44779: PPUSH
44780: LD_VAR 0 4
44784: PUSH
44785: LD_INT 1
44787: ARRAY
44788: PPUSH
44789: LD_VAR 0 4
44793: PUSH
44794: LD_INT 2
44796: ARRAY
44797: PPUSH
44798: CALL_OW 297
44802: ST_TO_ADDR
// if tmpDist < dist then
44803: LD_VAR 0 6
44807: PUSH
44808: LD_VAR 0 5
44812: LESS
44813: IFFALSE 44835
// begin result := i ;
44815: LD_ADDR_VAR 0 3
44819: PUSH
44820: LD_VAR 0 4
44824: ST_TO_ADDR
// dist := tmpDist ;
44825: LD_ADDR_VAR 0 5
44829: PUSH
44830: LD_VAR 0 6
44834: ST_TO_ADDR
// end ; end ;
44835: GO 44767
44837: POP
44838: POP
// end ;
44839: LD_VAR 0 3
44843: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44844: LD_INT 0
44846: PPUSH
// uc_side := side ;
44847: LD_ADDR_OWVAR 20
44851: PUSH
44852: LD_VAR 0 1
44856: ST_TO_ADDR
// uc_nation := 3 ;
44857: LD_ADDR_OWVAR 21
44861: PUSH
44862: LD_INT 3
44864: ST_TO_ADDR
// vc_chassis := 25 ;
44865: LD_ADDR_OWVAR 37
44869: PUSH
44870: LD_INT 25
44872: ST_TO_ADDR
// vc_engine := engine_siberite ;
44873: LD_ADDR_OWVAR 39
44877: PUSH
44878: LD_INT 3
44880: ST_TO_ADDR
// vc_control := control_computer ;
44881: LD_ADDR_OWVAR 38
44885: PUSH
44886: LD_INT 3
44888: ST_TO_ADDR
// vc_weapon := 59 ;
44889: LD_ADDR_OWVAR 40
44893: PUSH
44894: LD_INT 59
44896: ST_TO_ADDR
// result := CreateVehicle ;
44897: LD_ADDR_VAR 0 5
44901: PUSH
44902: CALL_OW 45
44906: ST_TO_ADDR
// SetDir ( result , d ) ;
44907: LD_VAR 0 5
44911: PPUSH
44912: LD_VAR 0 4
44916: PPUSH
44917: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44921: LD_VAR 0 5
44925: PPUSH
44926: LD_VAR 0 2
44930: PPUSH
44931: LD_VAR 0 3
44935: PPUSH
44936: LD_INT 0
44938: PPUSH
44939: CALL_OW 48
// end ;
44943: LD_VAR 0 5
44947: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44948: LD_INT 0
44950: PPUSH
44951: PPUSH
44952: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44953: LD_ADDR_VAR 0 2
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: LD_INT 0
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44976: LD_VAR 0 1
44980: NOT
44981: IFTRUE 45014
44983: PUSH
44984: LD_VAR 0 1
44988: PPUSH
44989: CALL_OW 264
44993: PUSH
44994: LD_INT 12
44996: PUSH
44997: LD_INT 51
44999: PUSH
45000: LD_INT 32
45002: PUSH
45003: LD_INT 89
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: IN
45012: NOT
45013: OR
45014: IFFALSE 45018
// exit ;
45016: GO 45116
// for i := 1 to 3 do
45018: LD_ADDR_VAR 0 3
45022: PUSH
45023: DOUBLE
45024: LD_INT 1
45026: DEC
45027: ST_TO_ADDR
45028: LD_INT 3
45030: PUSH
45031: FOR_TO
45032: IFFALSE 45114
// begin tmp := GetCargo ( cargo , i ) ;
45034: LD_ADDR_VAR 0 4
45038: PUSH
45039: LD_VAR 0 1
45043: PPUSH
45044: LD_VAR 0 3
45048: PPUSH
45049: CALL_OW 289
45053: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
45054: LD_ADDR_VAR 0 2
45058: PUSH
45059: LD_VAR 0 2
45063: PPUSH
45064: LD_VAR 0 3
45068: PPUSH
45069: LD_VAR 0 4
45073: PPUSH
45074: CALL_OW 1
45078: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
45079: LD_ADDR_VAR 0 2
45083: PUSH
45084: LD_VAR 0 2
45088: PPUSH
45089: LD_INT 4
45091: PPUSH
45092: LD_VAR 0 2
45096: PUSH
45097: LD_INT 4
45099: ARRAY
45100: PUSH
45101: LD_VAR 0 4
45105: PLUS
45106: PPUSH
45107: CALL_OW 1
45111: ST_TO_ADDR
// end ;
45112: GO 45031
45114: POP
45115: POP
// end ;
45116: LD_VAR 0 2
45120: RET
// export function Length ( array ) ; begin
45121: LD_INT 0
45123: PPUSH
// result := array + 0 ;
45124: LD_ADDR_VAR 0 2
45128: PUSH
45129: LD_VAR 0 1
45133: PUSH
45134: LD_INT 0
45136: PLUS
45137: ST_TO_ADDR
// end ;
45138: LD_VAR 0 2
45142: RET
// export function PrepareArray ( array ) ; begin
45143: LD_INT 0
45145: PPUSH
// result := array diff 0 ;
45146: LD_ADDR_VAR 0 2
45150: PUSH
45151: LD_VAR 0 1
45155: PUSH
45156: LD_INT 0
45158: DIFF
45159: ST_TO_ADDR
// if not result [ 1 ] then
45160: LD_VAR 0 2
45164: PUSH
45165: LD_INT 1
45167: ARRAY
45168: NOT
45169: IFFALSE 45189
// result := Delete ( result , 1 ) ;
45171: LD_ADDR_VAR 0 2
45175: PUSH
45176: LD_VAR 0 2
45180: PPUSH
45181: LD_INT 1
45183: PPUSH
45184: CALL_OW 3
45188: ST_TO_ADDR
// end ;
45189: LD_VAR 0 2
45193: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45194: LD_INT 0
45196: PPUSH
45197: PPUSH
45198: PPUSH
45199: PPUSH
// sibRocketRange := 25 ;
45200: LD_ADDR_VAR 0 6
45204: PUSH
45205: LD_INT 25
45207: ST_TO_ADDR
// result := false ;
45208: LD_ADDR_VAR 0 4
45212: PUSH
45213: LD_INT 0
45215: ST_TO_ADDR
// for i := 0 to 5 do
45216: LD_ADDR_VAR 0 5
45220: PUSH
45221: DOUBLE
45222: LD_INT 0
45224: DEC
45225: ST_TO_ADDR
45226: LD_INT 5
45228: PUSH
45229: FOR_TO
45230: IFFALSE 45297
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45232: LD_VAR 0 1
45236: PPUSH
45237: LD_VAR 0 5
45241: PPUSH
45242: LD_VAR 0 6
45246: PPUSH
45247: CALL_OW 272
45251: PPUSH
45252: LD_VAR 0 2
45256: PPUSH
45257: LD_VAR 0 5
45261: PPUSH
45262: LD_VAR 0 6
45266: PPUSH
45267: CALL_OW 273
45271: PPUSH
45272: LD_VAR 0 3
45276: PPUSH
45277: CALL_OW 309
45281: IFFALSE 45295
// begin result := true ;
45283: LD_ADDR_VAR 0 4
45287: PUSH
45288: LD_INT 1
45290: ST_TO_ADDR
// exit ;
45291: POP
45292: POP
45293: GO 45299
// end ;
45295: GO 45229
45297: POP
45298: POP
// end ;
45299: LD_VAR 0 4
45303: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45304: LD_INT 0
45306: PPUSH
45307: PPUSH
45308: PPUSH
// if btype = b_depot then
45309: LD_VAR 0 2
45313: PUSH
45314: LD_INT 0
45316: EQUAL
45317: IFFALSE 45329
// begin result := true ;
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_INT 1
45326: ST_TO_ADDR
// exit ;
45327: GO 45449
// end ; pom := GetBase ( depot ) ;
45329: LD_ADDR_VAR 0 4
45333: PUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: CALL_OW 274
45343: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45344: LD_ADDR_VAR 0 5
45348: PUSH
45349: LD_VAR 0 2
45353: PPUSH
45354: LD_VAR 0 1
45358: PPUSH
45359: CALL_OW 248
45363: PPUSH
45364: CALL_OW 450
45368: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45369: LD_ADDR_VAR 0 3
45373: PUSH
45374: LD_VAR 0 4
45378: PPUSH
45379: LD_INT 1
45381: PPUSH
45382: CALL_OW 275
45386: PUSH
45387: LD_VAR 0 5
45391: PUSH
45392: LD_INT 1
45394: ARRAY
45395: GREATEREQUAL
45396: IFFALSE 45422
45398: PUSH
45399: LD_VAR 0 4
45403: PPUSH
45404: LD_INT 2
45406: PPUSH
45407: CALL_OW 275
45411: PUSH
45412: LD_VAR 0 5
45416: PUSH
45417: LD_INT 2
45419: ARRAY
45420: GREATEREQUAL
45421: AND
45422: IFFALSE 45448
45424: PUSH
45425: LD_VAR 0 4
45429: PPUSH
45430: LD_INT 3
45432: PPUSH
45433: CALL_OW 275
45437: PUSH
45438: LD_VAR 0 5
45442: PUSH
45443: LD_INT 3
45445: ARRAY
45446: GREATEREQUAL
45447: AND
45448: ST_TO_ADDR
// end ;
45449: LD_VAR 0 3
45453: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45454: LD_INT 0
45456: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45457: LD_VAR 0 1
45461: PPUSH
45462: LD_VAR 0 2
45466: PPUSH
45467: LD_INT 0
45469: PPUSH
45470: LD_INT 0
45472: PPUSH
45473: LD_INT 1
45475: PPUSH
45476: LD_INT 0
45478: PPUSH
45479: CALL_OW 587
// end ;
45483: LD_VAR 0 3
45487: RET
// export function CenterOnNow ( unit ) ; begin
45488: LD_INT 0
45490: PPUSH
// result := IsInUnit ( unit ) ;
45491: LD_ADDR_VAR 0 2
45495: PUSH
45496: LD_VAR 0 1
45500: PPUSH
45501: CALL_OW 310
45505: ST_TO_ADDR
// if not result then
45506: LD_VAR 0 2
45510: NOT
45511: IFFALSE 45523
// result := unit ;
45513: LD_ADDR_VAR 0 2
45517: PUSH
45518: LD_VAR 0 1
45522: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45523: LD_VAR 0 1
45527: PPUSH
45528: CALL_OW 87
// end ;
45532: LD_VAR 0 2
45536: RET
// export function ComMoveHex ( unit , hex ) ; begin
45537: LD_INT 0
45539: PPUSH
// if not hex then
45540: LD_VAR 0 2
45544: NOT
45545: IFFALSE 45549
// exit ;
45547: GO 45602
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45549: LD_VAR 0 2
45553: PUSH
45554: LD_INT 1
45556: ARRAY
45557: PPUSH
45558: LD_VAR 0 2
45562: PUSH
45563: LD_INT 2
45565: ARRAY
45566: PPUSH
45567: CALL_OW 428
45571: IFFALSE 45575
// exit ;
45573: GO 45602
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45575: LD_VAR 0 1
45579: PPUSH
45580: LD_VAR 0 2
45584: PUSH
45585: LD_INT 1
45587: ARRAY
45588: PPUSH
45589: LD_VAR 0 2
45593: PUSH
45594: LD_INT 2
45596: ARRAY
45597: PPUSH
45598: CALL_OW 111
// end ;
45602: LD_VAR 0 3
45606: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45607: LD_INT 0
45609: PPUSH
45610: PPUSH
45611: PPUSH
// if not unit or not enemy then
45612: LD_VAR 0 1
45616: NOT
45617: IFTRUE 45626
45619: PUSH
45620: LD_VAR 0 2
45624: NOT
45625: OR
45626: IFFALSE 45630
// exit ;
45628: GO 45756
// x := GetX ( enemy ) ;
45630: LD_ADDR_VAR 0 4
45634: PUSH
45635: LD_VAR 0 2
45639: PPUSH
45640: CALL_OW 250
45644: ST_TO_ADDR
// y := GetY ( enemy ) ;
45645: LD_ADDR_VAR 0 5
45649: PUSH
45650: LD_VAR 0 2
45654: PPUSH
45655: CALL_OW 251
45659: ST_TO_ADDR
// if ValidHex ( x , y ) then
45660: LD_VAR 0 4
45664: PPUSH
45665: LD_VAR 0 5
45669: PPUSH
45670: CALL_OW 488
45674: IFFALSE 45756
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45676: LD_VAR 0 2
45680: PPUSH
45681: CALL_OW 247
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: IN
45696: IFTRUE 45719
45698: PUSH
45699: LD_VAR 0 1
45703: PPUSH
45704: CALL_OW 255
45708: PPUSH
45709: LD_VAR 0 2
45713: PPUSH
45714: CALL_OW 292
45718: OR
45719: IFFALSE 45737
// ComAttackUnit ( unit , enemy ) else
45721: LD_VAR 0 1
45725: PPUSH
45726: LD_VAR 0 2
45730: PPUSH
45731: CALL_OW 115
45735: GO 45756
// ComAgressiveMove ( unit , x , y ) ;
45737: LD_VAR 0 1
45741: PPUSH
45742: LD_VAR 0 4
45746: PPUSH
45747: LD_VAR 0 5
45751: PPUSH
45752: CALL_OW 114
// end ;
45756: LD_VAR 0 3
45760: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45761: LD_INT 0
45763: PPUSH
45764: PPUSH
45765: PPUSH
// list := AreaToList ( area , 0 ) ;
45766: LD_ADDR_VAR 0 5
45770: PUSH
45771: LD_VAR 0 1
45775: PPUSH
45776: LD_INT 0
45778: PPUSH
45779: CALL_OW 517
45783: ST_TO_ADDR
// if not list then
45784: LD_VAR 0 5
45788: NOT
45789: IFFALSE 45793
// exit ;
45791: GO 45923
// if all then
45793: LD_VAR 0 2
45797: IFFALSE 45885
// begin for i := 1 to list [ 1 ] do
45799: LD_ADDR_VAR 0 4
45803: PUSH
45804: DOUBLE
45805: LD_INT 1
45807: DEC
45808: ST_TO_ADDR
45809: LD_VAR 0 5
45813: PUSH
45814: LD_INT 1
45816: ARRAY
45817: PUSH
45818: FOR_TO
45819: IFFALSE 45881
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45821: LD_ADDR_VAR 0 3
45825: PUSH
45826: LD_VAR 0 3
45830: PPUSH
45831: LD_VAR 0 3
45835: PUSH
45836: LD_INT 1
45838: PLUS
45839: PPUSH
45840: LD_VAR 0 5
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 4
45853: ARRAY
45854: PUSH
45855: LD_VAR 0 5
45859: PUSH
45860: LD_INT 2
45862: ARRAY
45863: PUSH
45864: LD_VAR 0 4
45868: ARRAY
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 1
45878: ST_TO_ADDR
45879: GO 45818
45881: POP
45882: POP
// exit ;
45883: GO 45923
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45885: LD_ADDR_VAR 0 3
45889: PUSH
45890: LD_VAR 0 5
45894: PUSH
45895: LD_INT 1
45897: ARRAY
45898: PUSH
45899: LD_INT 1
45901: ARRAY
45902: PUSH
45903: LD_VAR 0 5
45907: PUSH
45908: LD_INT 2
45910: ARRAY
45911: PUSH
45912: LD_INT 1
45914: ARRAY
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: EMPTY
45921: LIST
45922: ST_TO_ADDR
// end ;
45923: LD_VAR 0 3
45927: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45928: LD_INT 0
45930: PPUSH
45931: PPUSH
// list := AreaToList ( area , 0 ) ;
45932: LD_ADDR_VAR 0 4
45936: PUSH
45937: LD_VAR 0 1
45941: PPUSH
45942: LD_INT 0
45944: PPUSH
45945: CALL_OW 517
45949: ST_TO_ADDR
// if not list then
45950: LD_VAR 0 4
45954: NOT
45955: IFFALSE 45959
// exit ;
45957: GO 46000
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: LD_VAR 0 4
45968: PUSH
45969: LD_INT 1
45971: ARRAY
45972: PUSH
45973: LD_INT 1
45975: ARRAY
45976: PUSH
45977: LD_VAR 0 4
45981: PUSH
45982: LD_INT 2
45984: ARRAY
45985: PUSH
45986: LD_INT 1
45988: ARRAY
45989: PUSH
45990: LD_VAR 0 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: ST_TO_ADDR
// end ;
46000: LD_VAR 0 3
46004: RET
// export function First ( array ) ; begin
46005: LD_INT 0
46007: PPUSH
// if not array then
46008: LD_VAR 0 1
46012: NOT
46013: IFFALSE 46017
// exit ;
46015: GO 46031
// result := array [ 1 ] ;
46017: LD_ADDR_VAR 0 2
46021: PUSH
46022: LD_VAR 0 1
46026: PUSH
46027: LD_INT 1
46029: ARRAY
46030: ST_TO_ADDR
// end ;
46031: LD_VAR 0 2
46035: RET
// export function Last ( array ) ; begin
46036: LD_INT 0
46038: PPUSH
// if not array then
46039: LD_VAR 0 1
46043: NOT
46044: IFFALSE 46048
// exit ;
46046: GO 46064
// result := array [ array ] ;
46048: LD_ADDR_VAR 0 2
46052: PUSH
46053: LD_VAR 0 1
46057: PUSH
46058: LD_VAR 0 1
46062: ARRAY
46063: ST_TO_ADDR
// end ;
46064: LD_VAR 0 2
46068: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
46069: LD_INT 0
46071: PPUSH
46072: PPUSH
// result := [ ] ;
46073: LD_ADDR_VAR 0 5
46077: PUSH
46078: EMPTY
46079: ST_TO_ADDR
// if not array then
46080: LD_VAR 0 1
46084: NOT
46085: IFFALSE 46089
// exit ;
46087: GO 46201
// for i := 1 to array do
46089: LD_ADDR_VAR 0 6
46093: PUSH
46094: DOUBLE
46095: LD_INT 1
46097: DEC
46098: ST_TO_ADDR
46099: LD_VAR 0 1
46103: PUSH
46104: FOR_TO
46105: IFFALSE 46199
// if array [ i ] [ index ] = value then
46107: LD_VAR 0 1
46111: PUSH
46112: LD_VAR 0 6
46116: ARRAY
46117: PUSH
46118: LD_VAR 0 2
46122: ARRAY
46123: PUSH
46124: LD_VAR 0 3
46128: EQUAL
46129: IFFALSE 46197
// begin if indexColumn then
46131: LD_VAR 0 4
46135: IFFALSE 46171
// result := Join ( result , array [ i ] [ indexColumn ] ) else
46137: LD_ADDR_VAR 0 5
46141: PUSH
46142: LD_VAR 0 5
46146: PPUSH
46147: LD_VAR 0 1
46151: PUSH
46152: LD_VAR 0 6
46156: ARRAY
46157: PUSH
46158: LD_VAR 0 4
46162: ARRAY
46163: PPUSH
46164: CALL 41209 0 2
46168: ST_TO_ADDR
46169: GO 46197
// result := Join ( result , array [ i ] ) ;
46171: LD_ADDR_VAR 0 5
46175: PUSH
46176: LD_VAR 0 5
46180: PPUSH
46181: LD_VAR 0 1
46185: PUSH
46186: LD_VAR 0 6
46190: ARRAY
46191: PPUSH
46192: CALL 41209 0 2
46196: ST_TO_ADDR
// end ;
46197: GO 46104
46199: POP
46200: POP
// end ;
46201: LD_VAR 0 5
46205: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46206: LD_INT 0
46208: PPUSH
// if not vehicles or not parkingPoint then
46209: LD_VAR 0 1
46213: NOT
46214: IFTRUE 46223
46216: PUSH
46217: LD_VAR 0 2
46221: NOT
46222: OR
46223: IFFALSE 46227
// exit ;
46225: GO 46325
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46227: LD_ADDR_VAR 0 1
46231: PUSH
46232: LD_VAR 0 1
46236: PPUSH
46237: LD_INT 50
46239: PUSH
46240: EMPTY
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: LD_INT 92
46248: PUSH
46249: LD_VAR 0 2
46253: PUSH
46254: LD_INT 1
46256: ARRAY
46257: PUSH
46258: LD_VAR 0 2
46262: PUSH
46263: LD_INT 2
46265: ARRAY
46266: PUSH
46267: LD_INT 8
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PPUSH
46284: CALL_OW 72
46288: ST_TO_ADDR
// if not vehicles then
46289: LD_VAR 0 1
46293: NOT
46294: IFFALSE 46298
// exit ;
46296: GO 46325
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46298: LD_VAR 0 1
46302: PPUSH
46303: LD_VAR 0 2
46307: PUSH
46308: LD_INT 1
46310: ARRAY
46311: PPUSH
46312: LD_VAR 0 2
46316: PUSH
46317: LD_INT 2
46319: ARRAY
46320: PPUSH
46321: CALL_OW 111
// end ;
46325: LD_VAR 0 3
46329: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46330: LD_INT 0
46332: PPUSH
46333: PPUSH
46334: PPUSH
// if not side or not area then
46335: LD_VAR 0 1
46339: NOT
46340: IFTRUE 46349
46342: PUSH
46343: LD_VAR 0 2
46347: NOT
46348: OR
46349: IFFALSE 46353
// exit ;
46351: GO 46472
// tmp := AreaToList ( area , 0 ) ;
46353: LD_ADDR_VAR 0 5
46357: PUSH
46358: LD_VAR 0 2
46362: PPUSH
46363: LD_INT 0
46365: PPUSH
46366: CALL_OW 517
46370: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46371: LD_ADDR_VAR 0 4
46375: PUSH
46376: DOUBLE
46377: LD_INT 1
46379: DEC
46380: ST_TO_ADDR
46381: LD_VAR 0 5
46385: PUSH
46386: LD_INT 1
46388: ARRAY
46389: PUSH
46390: FOR_TO
46391: IFFALSE 46470
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46393: LD_VAR 0 5
46397: PUSH
46398: LD_INT 1
46400: ARRAY
46401: PUSH
46402: LD_VAR 0 4
46406: ARRAY
46407: PPUSH
46408: LD_VAR 0 5
46412: PUSH
46413: LD_INT 2
46415: ARRAY
46416: PUSH
46417: LD_VAR 0 4
46421: ARRAY
46422: PPUSH
46423: CALL_OW 351
46427: IFFALSE 46468
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46429: LD_VAR 0 5
46433: PUSH
46434: LD_INT 1
46436: ARRAY
46437: PUSH
46438: LD_VAR 0 4
46442: ARRAY
46443: PPUSH
46444: LD_VAR 0 5
46448: PUSH
46449: LD_INT 2
46451: ARRAY
46452: PUSH
46453: LD_VAR 0 4
46457: ARRAY
46458: PPUSH
46459: LD_VAR 0 1
46463: PPUSH
46464: CALL_OW 244
// end ;
46468: GO 46390
46470: POP
46471: POP
// end ;
46472: LD_VAR 0 3
46476: RET
// export function UniqueArray ( array ) ; var i ; begin
46477: LD_INT 0
46479: PPUSH
46480: PPUSH
// result := [ ] ;
46481: LD_ADDR_VAR 0 2
46485: PUSH
46486: EMPTY
46487: ST_TO_ADDR
// if not array then
46488: LD_VAR 0 1
46492: NOT
46493: IFFALSE 46497
// exit ;
46495: GO 46558
// for i := 1 to array do
46497: LD_ADDR_VAR 0 3
46501: PUSH
46502: DOUBLE
46503: LD_INT 1
46505: DEC
46506: ST_TO_ADDR
46507: LD_VAR 0 1
46511: PUSH
46512: FOR_TO
46513: IFFALSE 46556
// if not array [ i ] in result then
46515: LD_VAR 0 1
46519: PUSH
46520: LD_VAR 0 3
46524: ARRAY
46525: PUSH
46526: LD_VAR 0 2
46530: IN
46531: NOT
46532: IFFALSE 46554
// result := Join ( result , i ) ;
46534: LD_ADDR_VAR 0 2
46538: PUSH
46539: LD_VAR 0 2
46543: PPUSH
46544: LD_VAR 0 3
46548: PPUSH
46549: CALL 41209 0 2
46553: ST_TO_ADDR
46554: GO 46512
46556: POP
46557: POP
// end ; end_of_file
46558: LD_VAR 0 2
46562: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpCommanders , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpTimeToWin , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46563: LD_INT 0
46565: PPUSH
46566: PPUSH
// disable ( mpActive ) ;
46567: LD_INT 100
46569: DISABLE_MARKED
// disable ( mpWin ) ;
46570: LD_INT 101
46572: DISABLE_MARKED
// disable ( mpLose ) ;
46573: LD_INT 102
46575: DISABLE_MARKED
// mpGameType := 0 ;
46576: LD_ADDR_EXP 1
46580: PUSH
46581: LD_INT 0
46583: ST_TO_ADDR
// mpGameSettings := [ ] ;
46584: LD_ADDR_EXP 4
46588: PUSH
46589: EMPTY
46590: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46591: LD_ADDR_EXP 2
46595: PUSH
46596: EMPTY
46597: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46598: LD_ADDR_EXP 3
46602: PUSH
46603: EMPTY
46604: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46605: LD_ADDR_EXP 27
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46620: LD_ADDR_EXP 10
46624: PUSH
46625: EMPTY
46626: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46627: LD_ADDR_EXP 11
46631: PUSH
46632: EMPTY
46633: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46634: LD_ADDR_EXP 40
46638: PUSH
46639: EMPTY
46640: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46641: LD_ADDR_EXP 41
46645: PUSH
46646: EMPTY
46647: ST_TO_ADDR
// mpDepots := [ ] ;
46648: LD_ADDR_EXP 12
46652: PUSH
46653: EMPTY
46654: ST_TO_ADDR
// mpBuildings := [ ] ;
46655: LD_ADDR_EXP 15
46659: PUSH
46660: EMPTY
46661: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46662: LD_ADDR_EXP 16
46666: PUSH
46667: EMPTY
46668: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46669: LD_ADDR_EXP 17
46673: PUSH
46674: EMPTY
46675: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46676: LD_ADDR_EXP 18
46680: PUSH
46681: EMPTY
46682: ST_TO_ADDR
// mpStartingResources := [ ] ;
46683: LD_ADDR_EXP 13
46687: PUSH
46688: EMPTY
46689: ST_TO_ADDR
// mpStartPos := [ ] ;
46690: LD_ADDR_EXP 19
46694: PUSH
46695: EMPTY
46696: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46697: LD_ADDR_EXP 20
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46706: LD_ADDR_EXP 21
46710: PUSH
46711: EMPTY
46712: ST_TO_ADDR
// mpApemans := [ ] ;
46713: LD_ADDR_EXP 28
46717: PUSH
46718: EMPTY
46719: ST_TO_ADDR
// mpApemansArea := [ ] ;
46720: LD_ADDR_EXP 29
46724: PUSH
46725: EMPTY
46726: ST_TO_ADDR
// mpRespawn := [ ] ;
46727: LD_ADDR_EXP 31
46731: PUSH
46732: EMPTY
46733: ST_TO_ADDR
// mpKingArea := 0 ;
46734: LD_ADDR_EXP 32
46738: PUSH
46739: LD_INT 0
46741: ST_TO_ADDR
// mpPoints := [ ] ;
46742: LD_ADDR_EXP 33
46746: PUSH
46747: EMPTY
46748: ST_TO_ADDR
// mpVehicles := 0 ;
46749: LD_ADDR_EXP 34
46753: PUSH
46754: LD_INT 0
46756: ST_TO_ADDR
// mpShipments := 0 ;
46757: LD_ADDR_EXP 25
46761: PUSH
46762: LD_INT 0
46764: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46765: LD_ADDR_EXP 38
46769: PUSH
46770: EMPTY
46771: PUSH
46772: EMPTY
46773: PUSH
46774: EMPTY
46775: PUSH
46776: EMPTY
46777: PUSH
46778: EMPTY
46779: PUSH
46780: EMPTY
46781: PUSH
46782: EMPTY
46783: PUSH
46784: EMPTY
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46796: LD_ADDR_EXP 30
46800: PUSH
46801: EMPTY
46802: PUSH
46803: EMPTY
46804: PUSH
46805: EMPTY
46806: PUSH
46807: EMPTY
46808: PUSH
46809: EMPTY
46810: PUSH
46811: EMPTY
46812: PUSH
46813: EMPTY
46814: PUSH
46815: EMPTY
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: ST_TO_ADDR
// mpCommanders := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
46827: LD_ADDR_EXP 39
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: LD_INT 0
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: ST_TO_ADDR
// mpEmissions := 0 ;
46866: LD_ADDR_EXP 35
46870: PUSH
46871: LD_INT 0
46873: ST_TO_ADDR
// mpTeleports := 0 ;
46874: LD_ADDR_EXP 42
46878: PUSH
46879: LD_INT 0
46881: ST_TO_ADDR
// mpArtifacts := 0 ;
46882: LD_ADDR_EXP 43
46886: PUSH
46887: LD_INT 0
46889: ST_TO_ADDR
// mpTimeToWin := 0 0$0 ;
46890: LD_ADDR_EXP 44
46894: PUSH
46895: LD_INT 0
46897: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46898: LD_ADDR_EXP 23
46902: PUSH
46903: LD_INT 3
46905: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46906: LD_ADDR_EXP 22
46910: PUSH
46911: LD_INT 15
46913: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46914: LD_ADDR_EXP 36
46918: PUSH
46919: LD_INT 0
46921: ST_TO_ADDR
// mpGameActive := false ;
46922: LD_ADDR_EXP 37
46926: PUSH
46927: LD_INT 0
46929: ST_TO_ADDR
// mpBlockRespThread := false ;
46930: LD_ADDR_EXP 45
46934: PUSH
46935: LD_INT 0
46937: ST_TO_ADDR
// for i := 1 to 32 do
46938: LD_ADDR_VAR 0 2
46942: PUSH
46943: DOUBLE
46944: LD_INT 1
46946: DEC
46947: ST_TO_ADDR
46948: LD_INT 32
46950: PUSH
46951: FOR_TO
46952: IFFALSE 46979
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46954: LD_ADDR_EXP 4
46958: PUSH
46959: LD_EXP 4
46963: PPUSH
46964: LD_VAR 0 2
46968: PPUSH
46969: LD_INT 0
46971: PPUSH
46972: CALL_OW 1
46976: ST_TO_ADDR
46977: GO 46951
46979: POP
46980: POP
// end ;
46981: LD_VAR 0 1
46985: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46986: LD_INT 0
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
46994: PPUSH
46995: PPUSH
46996: PPUSH
46997: PPUSH
46998: PPUSH
46999: PPUSH
47000: PPUSH
47001: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact , GameTypeSurvivalH ] ;
47002: LD_ADDR_VAR 0 14
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 2
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: LD_INT 5
47018: PUSH
47019: LD_INT 6
47021: PUSH
47022: LD_INT 7
47024: PUSH
47025: LD_INT 8
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: ST_TO_ADDR
// for i in gameTypes do
47037: LD_ADDR_VAR 0 2
47041: PUSH
47042: LD_VAR 0 14
47046: PUSH
47047: FOR_IN
47048: IFFALSE 47057
// disable ( i ) ;
47050: LD_VAR 0 2
47054: DISABLE_MARKED
47055: GO 47047
47057: POP
47058: POP
// if Multiplayer then
47059: LD_OWVAR 4
47063: IFFALSE 47247
// begin mpGameType := mp_game_type ;
47065: LD_ADDR_EXP 1
47069: PUSH
47070: LD_OWVAR 6
47074: ST_TO_ADDR
// your_side := mp_player_side ;
47075: LD_ADDR_OWVAR 2
47079: PUSH
47080: LD_OWVAR 7
47084: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
47085: LD_ADDR_EXP 5
47089: PUSH
47090: LD_OWVAR 17
47094: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
47095: LD_ADDR_EXP 6
47099: PUSH
47100: LD_OWVAR 15
47104: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
47105: LD_ADDR_EXP 7
47109: PUSH
47110: LD_OWVAR 16
47114: ST_TO_ADDR
// mpTeams := mp_teams ;
47115: LD_ADDR_EXP 8
47119: PUSH
47120: LD_OWVAR 12
47124: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
47125: LD_ADDR_VAR 0 2
47129: PUSH
47130: DOUBLE
47131: LD_INT 1
47133: DEC
47134: ST_TO_ADDR
47135: LD_EXP 2
47139: PPUSH
47140: CALL 5233 0 1
47144: PUSH
47145: FOR_TO
47146: IFFALSE 47222
// begin setting := mpGameSettingsKeys [ i ] ;
47148: LD_ADDR_VAR 0 12
47152: PUSH
47153: LD_EXP 2
47157: PUSH
47158: LD_VAR 0 2
47162: ARRAY
47163: ST_TO_ADDR
// if setting then
47164: LD_VAR 0 12
47168: IFFALSE 47220
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
47170: LD_ADDR_EXP 4
47174: PUSH
47175: LD_EXP 4
47179: PPUSH
47180: LD_VAR 0 2
47184: PPUSH
47185: LD_EXP 3
47189: PUSH
47190: LD_VAR 0 2
47194: ARRAY
47195: PUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 1
47203: MINUS
47204: PPUSH
47205: CALL_OW 426
47209: PUSH
47210: LD_INT 1
47212: PLUS
47213: ARRAY
47214: PPUSH
47215: CALL_OW 1
47219: ST_TO_ADDR
// end ;
47220: GO 47145
47222: POP
47223: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47224: LD_ADDR_EXP 9
47228: PUSH
47229: LD_EXP 6
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: DIFF
47240: PUSH
47241: LD_INT 1
47243: GREATER
47244: ST_TO_ADDR
// end else
47245: GO 47247
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47247: LD_EXP 1
47251: PPUSH
47252: CALL 843 0 1
// if Count ( mpMarkedAreas ) then
47256: LD_EXP 16
47260: PPUSH
47261: CALL 5233 0 1
47265: IFFALSE 47296
// begin for i in mpMarkedAreas do
47267: LD_ADDR_VAR 0 2
47271: PUSH
47272: LD_EXP 16
47276: PUSH
47277: FOR_IN
47278: IFFALSE 47294
// SetAreaMapShow ( i , 0 ) ;
47280: LD_VAR 0 2
47284: PPUSH
47285: LD_INT 0
47287: PPUSH
47288: CALL_OW 424
47292: GO 47277
47294: POP
47295: POP
// end ; for i := 1 to 8 do
47296: LD_ADDR_VAR 0 2
47300: PUSH
47301: DOUBLE
47302: LD_INT 1
47304: DEC
47305: ST_TO_ADDR
47306: LD_INT 8
47308: PUSH
47309: FOR_TO
47310: IFFALSE 48769
// begin if not mpSidePositions [ i ] then
47312: LD_EXP 5
47316: PUSH
47317: LD_VAR 0 2
47321: ARRAY
47322: NOT
47323: IFFALSE 47327
// continue ;
47325: GO 47309
// side := i ;
47327: LD_ADDR_VAR 0 7
47331: PUSH
47332: LD_VAR 0 2
47336: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_EXP 7
47346: PUSH
47347: LD_VAR 0 2
47351: ARRAY
47352: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47353: LD_ADDR_VAR 0 8
47357: PUSH
47358: LD_EXP 5
47362: PUSH
47363: LD_VAR 0 2
47367: ARRAY
47368: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47369: LD_EXP 10
47373: PPUSH
47374: CALL 5233 0 1
47378: IFFALSE 47455
// begin for j in mpOilDeposits [ pos ] do
47380: LD_ADDR_VAR 0 3
47384: PUSH
47385: LD_EXP 10
47389: PUSH
47390: LD_VAR 0 8
47394: ARRAY
47395: PUSH
47396: FOR_IN
47397: IFFALSE 47453
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47399: LD_VAR 0 3
47403: PUSH
47404: LD_INT 1
47406: ARRAY
47407: PPUSH
47408: LD_VAR 0 3
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: PPUSH
47417: LD_INT 2
47419: PPUSH
47420: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47424: LD_VAR 0 3
47428: PUSH
47429: LD_INT 1
47431: ARRAY
47432: PPUSH
47433: LD_VAR 0 3
47437: PUSH
47438: LD_INT 2
47440: ARRAY
47441: PPUSH
47442: LD_VAR 0 7
47446: PPUSH
47447: CALL_OW 441
// end ;
47451: GO 47396
47453: POP
47454: POP
// end ; if Count ( mpSibDeposits ) then
47455: LD_EXP 11
47459: PPUSH
47460: CALL 5233 0 1
47464: IFFALSE 47541
// begin for j in mpSibDeposits [ pos ] do
47466: LD_ADDR_VAR 0 3
47470: PUSH
47471: LD_EXP 11
47475: PUSH
47476: LD_VAR 0 8
47480: ARRAY
47481: PUSH
47482: FOR_IN
47483: IFFALSE 47539
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47485: LD_VAR 0 3
47489: PUSH
47490: LD_INT 1
47492: ARRAY
47493: PPUSH
47494: LD_VAR 0 3
47498: PUSH
47499: LD_INT 2
47501: ARRAY
47502: PPUSH
47503: LD_INT 3
47505: PPUSH
47506: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47510: LD_VAR 0 3
47514: PUSH
47515: LD_INT 1
47517: ARRAY
47518: PPUSH
47519: LD_VAR 0 3
47523: PUSH
47524: LD_INT 2
47526: ARRAY
47527: PPUSH
47528: LD_VAR 0 7
47532: PPUSH
47533: CALL_OW 441
// end ;
47537: GO 47482
47539: POP
47540: POP
// end ; InitBc ;
47541: CALL_OW 21
// InitUc ;
47545: CALL_OW 18
// uc_side := side ;
47549: LD_ADDR_OWVAR 20
47553: PUSH
47554: LD_VAR 0 7
47558: ST_TO_ADDR
// uc_nation := nation ;
47559: LD_ADDR_OWVAR 21
47563: PUSH
47564: LD_VAR 0 9
47568: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47569: LD_EXP 20
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: GREATER
47578: IFFALSE 47737
// begin x := mpStartPos [ pos ] [ 1 ] ;
47580: LD_ADDR_VAR 0 5
47584: PUSH
47585: LD_EXP 19
47589: PUSH
47590: LD_VAR 0 8
47594: ARRAY
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47600: LD_ADDR_VAR 0 6
47604: PUSH
47605: LD_EXP 19
47609: PUSH
47610: LD_VAR 0 8
47614: ARRAY
47615: PUSH
47616: LD_INT 2
47618: ARRAY
47619: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47620: LD_VAR 0 5
47624: PPUSH
47625: LD_VAR 0 6
47629: PPUSH
47630: LD_INT 12
47632: PPUSH
47633: LD_INT 2
47635: PPUSH
47636: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47640: LD_ADDR_EXP 21
47644: PUSH
47645: LD_EXP 21
47649: PPUSH
47650: LD_VAR 0 7
47654: PPUSH
47655: LD_VAR 0 7
47659: PPUSH
47660: LD_VAR 0 5
47664: PPUSH
47665: LD_VAR 0 6
47669: PPUSH
47670: LD_INT 1
47672: PUSH
47673: LD_INT 100
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: PUSH
47683: LD_INT 70
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 3
47692: PUSH
47693: LD_INT 40
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 10
47702: PUSH
47703: LD_INT 25
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 20
47712: PUSH
47713: LD_INT 100
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: PPUSH
47727: CALL_OW 418
47731: PPUSH
47732: CALL_OW 1
47736: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47737: LD_EXP 12
47741: PPUSH
47742: CALL 5233 0 1
47746: IFFALSE 47945
// begin if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH , GameTypeArmsRace , GameTypeArmsArtifact ] then
47748: LD_EXP 1
47752: PUSH
47753: LD_INT 2
47755: PUSH
47756: LD_INT 8
47758: PUSH
47759: LD_INT 6
47761: PUSH
47762: LD_INT 7
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: IN
47771: IFFALSE 47791
// begin bc_level := 10 ;
47773: LD_ADDR_OWVAR 43
47777: PUSH
47778: LD_INT 10
47780: ST_TO_ADDR
// bc_type := b_warehouse ;
47781: LD_ADDR_OWVAR 42
47785: PUSH
47786: LD_INT 1
47788: ST_TO_ADDR
// end else
47789: GO 47807
// begin bc_level := 0 ;
47791: LD_ADDR_OWVAR 43
47795: PUSH
47796: LD_INT 0
47798: ST_TO_ADDR
// bc_type := b_depot ;
47799: LD_ADDR_OWVAR 42
47803: PUSH
47804: LD_INT 0
47806: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47807: LD_ADDR_VAR 0 4
47811: PUSH
47812: LD_EXP 12
47816: PUSH
47817: LD_VAR 0 8
47821: ARRAY
47822: PUSH
47823: LD_INT 1
47825: ARRAY
47826: PPUSH
47827: LD_EXP 12
47831: PUSH
47832: LD_VAR 0 8
47836: ARRAY
47837: PUSH
47838: LD_INT 2
47840: ARRAY
47841: PPUSH
47842: LD_EXP 12
47846: PUSH
47847: LD_VAR 0 8
47851: ARRAY
47852: PUSH
47853: LD_INT 3
47855: ARRAY
47856: PPUSH
47857: CALL_OW 47
47861: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47862: LD_VAR 0 4
47866: PPUSH
47867: LD_STRING @
47869: PUSH
47870: LD_VAR 0 7
47874: STR
47875: PPUSH
47876: CALL_OW 500
// if Count ( mpStartingResources ) then
47880: LD_EXP 13
47884: PPUSH
47885: CALL 5233 0 1
47889: IFFALSE 47943
// begin for j := 1 to mpStartingResources do
47891: LD_ADDR_VAR 0 3
47895: PUSH
47896: DOUBLE
47897: LD_INT 1
47899: DEC
47900: ST_TO_ADDR
47901: LD_EXP 13
47905: PUSH
47906: FOR_TO
47907: IFFALSE 47941
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47909: LD_VAR 0 4
47913: PPUSH
47914: CALL_OW 274
47918: PPUSH
47919: LD_VAR 0 3
47923: PPUSH
47924: LD_EXP 13
47928: PUSH
47929: LD_VAR 0 3
47933: ARRAY
47934: PPUSH
47935: CALL_OW 277
47939: GO 47906
47941: POP
47942: POP
// end ; end else
47943: GO 48152
// if Count ( mpStartingResources ) then
47945: LD_EXP 13
47949: PPUSH
47950: CALL 5233 0 1
47954: IFFALSE 48152
// begin x := mpStartPos [ pos ] [ 1 ] ;
47956: LD_ADDR_VAR 0 5
47960: PUSH
47961: LD_EXP 19
47965: PUSH
47966: LD_VAR 0 8
47970: ARRAY
47971: PUSH
47972: LD_INT 1
47974: ARRAY
47975: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47976: LD_ADDR_VAR 0 6
47980: PUSH
47981: LD_EXP 19
47985: PUSH
47986: LD_VAR 0 8
47990: ARRAY
47991: PUSH
47992: LD_INT 2
47994: ARRAY
47995: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47996: LD_ADDR_VAR 0 3
48000: PUSH
48001: DOUBLE
48002: LD_INT 1
48004: DEC
48005: ST_TO_ADDR
48006: LD_EXP 13
48010: PUSH
48011: FOR_TO
48012: IFFALSE 48150
// begin resources := mpStartingResources [ j ] ;
48014: LD_ADDR_VAR 0 13
48018: PUSH
48019: LD_EXP 13
48023: PUSH
48024: LD_VAR 0 3
48028: ARRAY
48029: ST_TO_ADDR
// if resources = 0 then
48030: LD_VAR 0 13
48034: PUSH
48035: LD_INT 0
48037: EQUAL
48038: IFFALSE 48042
// continue ;
48040: GO 48011
// repeat if resources >= 50 then
48042: LD_VAR 0 13
48046: PUSH
48047: LD_INT 50
48049: GREATEREQUAL
48050: IFFALSE 48096
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
48052: LD_VAR 0 3
48056: PPUSH
48057: LD_INT 5
48059: PPUSH
48060: LD_VAR 0 5
48064: PPUSH
48065: LD_VAR 0 6
48069: PPUSH
48070: LD_INT 6
48072: PPUSH
48073: LD_INT 0
48075: PPUSH
48076: CALL_OW 60
// resources := resources - 50 ;
48080: LD_ADDR_VAR 0 13
48084: PUSH
48085: LD_VAR 0 13
48089: PUSH
48090: LD_INT 50
48092: MINUS
48093: ST_TO_ADDR
// end else
48094: GO 48138
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
48096: LD_VAR 0 3
48100: PPUSH
48101: LD_VAR 0 13
48105: PUSH
48106: LD_INT 10
48108: DIV
48109: PPUSH
48110: LD_VAR 0 5
48114: PPUSH
48115: LD_VAR 0 6
48119: PPUSH
48120: LD_INT 6
48122: PPUSH
48123: LD_INT 0
48125: PPUSH
48126: CALL_OW 60
// resources := 0 ;
48130: LD_ADDR_VAR 0 13
48134: PUSH
48135: LD_INT 0
48137: ST_TO_ADDR
// end ; until resources <= 0 ;
48138: LD_VAR 0 13
48142: PUSH
48143: LD_INT 0
48145: LESSEQUAL
48146: IFFALSE 48042
// end ;
48148: GO 48011
48150: POP
48151: POP
// end ; if Count ( mpBuildings ) and not mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
48152: LD_EXP 15
48156: PPUSH
48157: CALL 5233 0 1
48161: IFFALSE 48181
48163: PUSH
48164: LD_EXP 1
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: LD_INT 8
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: IN
48179: NOT
48180: AND
48181: IFFALSE 48259
// begin for j in mpBuildings [ pos ] do
48183: LD_ADDR_VAR 0 3
48187: PUSH
48188: LD_EXP 15
48192: PUSH
48193: LD_VAR 0 8
48197: ARRAY
48198: PUSH
48199: FOR_IN
48200: IFFALSE 48257
// begin bc_level := 0 ;
48202: LD_ADDR_OWVAR 43
48206: PUSH
48207: LD_INT 0
48209: ST_TO_ADDR
// bc_type := j [ 1 ] ;
48210: LD_ADDR_OWVAR 42
48214: PUSH
48215: LD_VAR 0 3
48219: PUSH
48220: LD_INT 1
48222: ARRAY
48223: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
48224: LD_VAR 0 3
48228: PUSH
48229: LD_INT 2
48231: ARRAY
48232: PPUSH
48233: LD_VAR 0 3
48237: PUSH
48238: LD_INT 3
48240: ARRAY
48241: PPUSH
48242: LD_VAR 0 3
48246: PUSH
48247: LD_INT 4
48249: ARRAY
48250: PPUSH
48251: CALL_OW 47
// end ;
48255: GO 48199
48257: POP
48258: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48259: LD_EXP 24
48263: IFFALSE 48283
48265: PUSH
48266: LD_INT 20
48268: PPUSH
48269: LD_VAR 0 7
48273: PPUSH
48274: CALL_OW 321
48278: PUSH
48279: LD_INT 1
48281: EQUAL
48282: AND
48283: IFFALSE 48300
// SetTech ( tech_SibDet , side , state_researched ) ;
48285: LD_INT 20
48287: PPUSH
48288: LD_VAR 0 7
48292: PPUSH
48293: LD_INT 2
48295: PPUSH
48296: CALL_OW 322
// if not mpArtifacts then
48300: LD_EXP 43
48304: NOT
48305: IFFALSE 48322
// SetTech ( tech_artifact , side , state_disabled ) ;
48307: LD_INT 24
48309: PPUSH
48310: LD_VAR 0 7
48314: PPUSH
48315: LD_INT 0
48317: PPUSH
48318: CALL_OW 322
// if mpSibBomb = 1 then
48322: LD_EXP 26
48326: PUSH
48327: LD_INT 1
48329: EQUAL
48330: IFFALSE 48349
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48332: LD_INT 25
48334: PPUSH
48335: LD_VAR 0 7
48339: PPUSH
48340: LD_INT 1
48342: PPUSH
48343: CALL_OW 322
// end else
48347: GO 48364
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48349: LD_INT 25
48351: PPUSH
48352: LD_VAR 0 7
48356: PPUSH
48357: LD_INT 0
48359: PPUSH
48360: CALL_OW 322
// end ; if mpVehicles then
48364: LD_EXP 34
48368: IFFALSE 48467
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48370: LD_ADDR_VAR 0 3
48374: PUSH
48375: LD_VAR 0 7
48379: PPUSH
48380: LD_VAR 0 9
48384: PPUSH
48385: LD_EXP 34
48389: PPUSH
48390: CALL 49726 0 3
48394: PUSH
48395: FOR_IN
48396: IFFALSE 48465
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48398: LD_VAR 0 3
48402: PPUSH
48403: LD_INT 0
48405: PPUSH
48406: LD_INT 5
48408: PPUSH
48409: CALL_OW 12
48413: PPUSH
48414: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48418: LD_VAR 0 3
48422: PPUSH
48423: LD_EXP 19
48427: PUSH
48428: LD_VAR 0 8
48432: ARRAY
48433: PUSH
48434: LD_INT 1
48436: ARRAY
48437: PPUSH
48438: LD_EXP 19
48442: PUSH
48443: LD_VAR 0 8
48447: ARRAY
48448: PUSH
48449: LD_INT 2
48451: ARRAY
48452: PPUSH
48453: LD_INT 12
48455: PPUSH
48456: LD_INT 0
48458: PPUSH
48459: CALL_OW 50
// end ;
48463: GO 48395
48465: POP
48466: POP
// end ; uc_nation := nation ;
48467: LD_ADDR_OWVAR 21
48471: PUSH
48472: LD_VAR 0 9
48476: ST_TO_ADDR
// if mpGameType in [ GameTypeArmsRace , GameTypeArmsArtifact ] and mpSidePositions [ i ] in [ 1 , 2 ] then
48477: LD_EXP 1
48481: PUSH
48482: LD_INT 6
48484: PUSH
48485: LD_INT 7
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: IN
48492: IFFALSE 48517
48494: PUSH
48495: LD_EXP 5
48499: PUSH
48500: LD_VAR 0 2
48504: ARRAY
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: IN
48516: AND
48517: IFFALSE 48565
// team := mpPrepareTeam ( side , nation , mpPeopleAmount + ( mpPeopleAmount div 2 ) , mpPeopleSkill + 1 ) else
48519: LD_ADDR_VAR 0 11
48523: PUSH
48524: LD_VAR 0 7
48528: PPUSH
48529: LD_VAR 0 9
48533: PPUSH
48534: LD_EXP 22
48538: PUSH
48539: LD_EXP 22
48543: PUSH
48544: LD_INT 2
48546: DIV
48547: PLUS
48548: PPUSH
48549: LD_EXP 23
48553: PUSH
48554: LD_INT 1
48556: PLUS
48557: PPUSH
48558: CALL 49181 0 4
48562: ST_TO_ADDR
48563: GO 48595
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48565: LD_ADDR_VAR 0 11
48569: PUSH
48570: LD_VAR 0 7
48574: PPUSH
48575: LD_VAR 0 9
48579: PPUSH
48580: LD_EXP 22
48584: PPUSH
48585: LD_EXP 23
48589: PPUSH
48590: CALL 49181 0 4
48594: ST_TO_ADDR
// for j in team do
48595: LD_ADDR_VAR 0 3
48599: PUSH
48600: LD_VAR 0 11
48604: PUSH
48605: FOR_IN
48606: IFFALSE 48655
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48608: LD_VAR 0 3
48612: PPUSH
48613: LD_EXP 19
48617: PUSH
48618: LD_VAR 0 8
48622: ARRAY
48623: PUSH
48624: LD_INT 1
48626: ARRAY
48627: PPUSH
48628: LD_EXP 19
48632: PUSH
48633: LD_VAR 0 8
48637: ARRAY
48638: PUSH
48639: LD_INT 2
48641: ARRAY
48642: PPUSH
48643: LD_INT 12
48645: PPUSH
48646: LD_INT 0
48648: PPUSH
48649: CALL_OW 50
48653: GO 48605
48655: POP
48656: POP
// if mpApemans then
48657: LD_EXP 28
48661: IFFALSE 48767
// begin for j := 1 to mpApemans do
48663: LD_ADDR_VAR 0 3
48667: PUSH
48668: DOUBLE
48669: LD_INT 1
48671: DEC
48672: ST_TO_ADDR
48673: LD_EXP 28
48677: PUSH
48678: FOR_TO
48679: IFFALSE 48765
// begin PrepareApeman ( - 5 ) ;
48681: LD_INT 5
48683: NEG
48684: PPUSH
48685: CALL 37336 0 1
// ape := CreateHuman ;
48689: LD_ADDR_VAR 0 10
48693: PUSH
48694: CALL_OW 44
48698: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48699: LD_ADDR_EXP 30
48703: PUSH
48704: LD_EXP 30
48708: PPUSH
48709: LD_VAR 0 8
48713: PPUSH
48714: LD_EXP 30
48718: PUSH
48719: LD_VAR 0 8
48723: ARRAY
48724: PPUSH
48725: LD_VAR 0 10
48729: PPUSH
48730: CALL 41209 0 2
48734: PPUSH
48735: CALL_OW 1
48739: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48740: LD_VAR 0 10
48744: PPUSH
48745: LD_EXP 29
48749: PUSH
48750: LD_VAR 0 8
48754: ARRAY
48755: PPUSH
48756: LD_INT 0
48758: PPUSH
48759: CALL_OW 49
// end ;
48763: GO 48678
48765: POP
48766: POP
// end ; end ;
48767: GO 47309
48769: POP
48770: POP
// if not mpTeamGame then
48771: LD_EXP 9
48775: NOT
48776: IFFALSE 48874
// begin for i := 1 to 8 do
48778: LD_ADDR_VAR 0 2
48782: PUSH
48783: DOUBLE
48784: LD_INT 1
48786: DEC
48787: ST_TO_ADDR
48788: LD_INT 8
48790: PUSH
48791: FOR_TO
48792: IFFALSE 48870
// for j := 1 to 8 do
48794: LD_ADDR_VAR 0 3
48798: PUSH
48799: DOUBLE
48800: LD_INT 1
48802: DEC
48803: ST_TO_ADDR
48804: LD_INT 8
48806: PUSH
48807: FOR_TO
48808: IFFALSE 48866
// if i <> j then
48810: LD_VAR 0 2
48814: PUSH
48815: LD_VAR 0 3
48819: NONEQUAL
48820: IFFALSE 48844
// SetAttitude ( i , j , att_neutral , true ) else
48822: LD_VAR 0 2
48826: PPUSH
48827: LD_VAR 0 3
48831: PPUSH
48832: LD_INT 0
48834: PPUSH
48835: LD_INT 1
48837: PPUSH
48838: CALL_OW 80
48842: GO 48864
// SetAttitude ( i , j , att_friend , true ) ;
48844: LD_VAR 0 2
48848: PPUSH
48849: LD_VAR 0 3
48853: PPUSH
48854: LD_INT 1
48856: PPUSH
48857: LD_INT 1
48859: PPUSH
48860: CALL_OW 80
48864: GO 48807
48866: POP
48867: POP
48868: GO 48791
48870: POP
48871: POP
// end else
48872: GO 49049
// begin if mpSharedVision then
48874: LD_EXP 14
48878: IFFALSE 48943
// begin for i in mpTeams do
48880: LD_ADDR_VAR 0 2
48884: PUSH
48885: LD_EXP 8
48889: PUSH
48890: FOR_IN
48891: IFFALSE 48941
// for j := 2 to i do
48893: LD_ADDR_VAR 0 3
48897: PUSH
48898: DOUBLE
48899: LD_INT 2
48901: DEC
48902: ST_TO_ADDR
48903: LD_VAR 0 2
48907: PUSH
48908: FOR_TO
48909: IFFALSE 48937
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48911: LD_VAR 0 2
48915: PUSH
48916: LD_VAR 0 3
48920: ARRAY
48921: PPUSH
48922: LD_VAR 0 2
48926: PUSH
48927: LD_INT 1
48929: ARRAY
48930: PPUSH
48931: CALL_OW 343
48935: GO 48908
48937: POP
48938: POP
48939: GO 48890
48941: POP
48942: POP
// end ; for i := 1 to 8 do
48943: LD_ADDR_VAR 0 2
48947: PUSH
48948: DOUBLE
48949: LD_INT 1
48951: DEC
48952: ST_TO_ADDR
48953: LD_INT 8
48955: PUSH
48956: FOR_TO
48957: IFFALSE 49047
// for j := 1 to 8 do
48959: LD_ADDR_VAR 0 3
48963: PUSH
48964: DOUBLE
48965: LD_INT 1
48967: DEC
48968: ST_TO_ADDR
48969: LD_INT 8
48971: PUSH
48972: FOR_TO
48973: IFFALSE 49043
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48975: LD_EXP 6
48979: PUSH
48980: LD_VAR 0 2
48984: ARRAY
48985: PUSH
48986: LD_EXP 6
48990: PUSH
48991: LD_VAR 0 3
48995: ARRAY
48996: EQUAL
48997: IFFALSE 49021
// SetAttitude ( i , j , att_friend , true ) else
48999: LD_VAR 0 2
49003: PPUSH
49004: LD_VAR 0 3
49008: PPUSH
49009: LD_INT 1
49011: PPUSH
49012: LD_INT 1
49014: PPUSH
49015: CALL_OW 80
49019: GO 49041
// SetAttitude ( i , j , att_enemy , true ) ;
49021: LD_VAR 0 2
49025: PPUSH
49026: LD_VAR 0 3
49030: PPUSH
49031: LD_INT 2
49033: PPUSH
49034: LD_INT 1
49036: PPUSH
49037: CALL_OW 80
49041: GO 48972
49043: POP
49044: POP
49045: GO 48956
49047: POP
49048: POP
// end ; music_nat := mpSideNations [ your_side ] ;
49049: LD_ADDR_OWVAR 71
49053: PUSH
49054: LD_EXP 7
49058: PUSH
49059: LD_OWVAR 2
49063: ARRAY
49064: ST_TO_ADDR
// if IAmSpec then
49065: CALL_OW 531
49069: IFFALSE 49110
// begin FogOff ( true ) ;
49071: LD_INT 1
49073: PPUSH
49074: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
49078: LD_EXP 27
49082: PUSH
49083: LD_INT 1
49085: ARRAY
49086: PUSH
49087: LD_INT 2
49089: DIV
49090: PPUSH
49091: LD_EXP 27
49095: PUSH
49096: LD_INT 2
49098: ARRAY
49099: PUSH
49100: LD_INT 2
49102: DIV
49103: PPUSH
49104: CALL_OW 86
// end else
49108: GO 49156
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
49110: LD_EXP 19
49114: PUSH
49115: LD_EXP 5
49119: PUSH
49120: LD_OWVAR 2
49124: ARRAY
49125: ARRAY
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PPUSH
49131: LD_EXP 19
49135: PUSH
49136: LD_EXP 5
49140: PUSH
49141: LD_OWVAR 2
49145: ARRAY
49146: ARRAY
49147: PUSH
49148: LD_INT 2
49150: ARRAY
49151: PPUSH
49152: CALL_OW 86
// end ; BeginBuildUp ;
49156: CALL 50259 0 0
// enable ( mpActive ) ;
49160: LD_INT 100
49162: ENABLE_MARKED
// enable ( mpGameType ) ;
49163: LD_EXP 1
49167: ENABLE_MARKED
// mpGameActive := true ;
49168: LD_ADDR_EXP 37
49172: PUSH
49173: LD_INT 1
49175: ST_TO_ADDR
// end ;
49176: LD_VAR 0 1
49180: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class , commander ; begin
49181: LD_INT 0
49183: PPUSH
49184: PPUSH
49185: PPUSH
49186: PPUSH
49187: PPUSH
// result := [ ] ;
49188: LD_ADDR_VAR 0 5
49192: PUSH
49193: EMPTY
49194: ST_TO_ADDR
// class := class_soldier ;
49195: LD_ADDR_VAR 0 8
49199: PUSH
49200: LD_INT 1
49202: ST_TO_ADDR
// uc_side := side ;
49203: LD_ADDR_OWVAR 20
49207: PUSH
49208: LD_VAR 0 1
49212: ST_TO_ADDR
// uc_nation := nation ;
49213: LD_ADDR_OWVAR 21
49217: PUSH
49218: LD_VAR 0 2
49222: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
49223: LD_ADDR_OWVAR 26
49227: PUSH
49228: LD_OWVAR 19
49232: PUSH
49233: LD_VAR 0 1
49237: ARRAY
49238: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
49239: LD_INT 1
49241: PPUSH
49242: LD_INT 2
49244: PPUSH
49245: CALL_OW 12
49249: PPUSH
49250: LD_VAR 0 8
49254: PPUSH
49255: LD_VAR 0 4
49259: PUSH
49260: LD_INT 2
49262: PLUS
49263: PPUSH
49264: CALL_OW 380
// hc_importance := 105 ;
49268: LD_ADDR_OWVAR 32
49272: PUSH
49273: LD_INT 105
49275: ST_TO_ADDR
// if Multiplayer then
49276: LD_OWVAR 4
49280: IFFALSE 49320
// begin hc_gallery := MULTIAVATARS ;
49282: LD_ADDR_OWVAR 33
49286: PUSH
49287: LD_STRING MULTIAVATARS
49289: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
49290: LD_ADDR_OWVAR 34
49294: PUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 525
49304: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
49305: LD_ADDR_OWVAR 27
49309: PUSH
49310: LD_VAR 0 1
49314: PPUSH
49315: CALL_OW 526
49319: ST_TO_ADDR
// end ; commander := CreateHuman ;
49320: LD_ADDR_VAR 0 9
49324: PUSH
49325: CALL_OW 44
49329: ST_TO_ADDR
// result := Join ( result , commander ) ;
49330: LD_ADDR_VAR 0 5
49334: PUSH
49335: LD_VAR 0 5
49339: PPUSH
49340: LD_VAR 0 9
49344: PPUSH
49345: CALL 41209 0 2
49349: ST_TO_ADDR
// mpCommanders := Replace ( mpCommanders , side , commander ) ;
49350: LD_ADDR_EXP 39
49354: PUSH
49355: LD_EXP 39
49359: PPUSH
49360: LD_VAR 0 1
49364: PPUSH
49365: LD_VAR 0 9
49369: PPUSH
49370: CALL_OW 1
49374: ST_TO_ADDR
// if mpTeamPreset then
49375: LD_LOC 1
49379: IFFALSE 49475
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49381: LD_LOC 1
49385: PUSH
49386: LD_INT 1
49388: ARRAY
49389: PPUSH
49390: LD_VAR 0 5
49394: PUSH
49395: LD_VAR 0 5
49399: ARRAY
49400: PPUSH
49401: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49405: LD_VAR 0 5
49409: PUSH
49410: LD_VAR 0 5
49414: ARRAY
49415: PPUSH
49416: LD_INT 1
49418: PPUSH
49419: LD_LOC 1
49423: PUSH
49424: LD_INT 1
49426: ARRAY
49427: PPUSH
49428: LD_INT 1
49430: PPUSH
49431: CALL_OW 260
49435: PPUSH
49436: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49440: LD_VAR 0 5
49444: PUSH
49445: LD_VAR 0 5
49449: ARRAY
49450: PPUSH
49451: LD_INT 2
49453: PPUSH
49454: LD_LOC 1
49458: PUSH
49459: LD_INT 1
49461: ARRAY
49462: PPUSH
49463: LD_INT 2
49465: PPUSH
49466: CALL_OW 260
49470: PPUSH
49471: CALL_OW 239
// end ; InitHc_All ( ) ;
49475: CALL_OW 584
// class := 2 ;
49479: LD_ADDR_VAR 0 8
49483: PUSH
49484: LD_INT 2
49486: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49487: LD_ADDR_VAR 0 6
49491: PUSH
49492: DOUBLE
49493: LD_INT 1
49495: DEC
49496: ST_TO_ADDR
49497: LD_VAR 0 3
49501: PUSH
49502: LD_INT 1
49504: MINUS
49505: PUSH
49506: FOR_TO
49507: IFFALSE 49702
// begin PrepareHuman ( false , class , skill ) ;
49509: LD_INT 0
49511: PPUSH
49512: LD_VAR 0 8
49516: PPUSH
49517: LD_VAR 0 4
49521: PPUSH
49522: CALL_OW 380
// un := CreateHuman ;
49526: LD_ADDR_VAR 0 7
49530: PUSH
49531: CALL_OW 44
49535: ST_TO_ADDR
// result := Join ( result , un ) ;
49536: LD_ADDR_VAR 0 5
49540: PUSH
49541: LD_VAR 0 5
49545: PPUSH
49546: LD_VAR 0 7
49550: PPUSH
49551: CALL 41209 0 2
49555: ST_TO_ADDR
// if Count ( mpTeamPreset ) >= amount then
49556: LD_LOC 1
49560: PPUSH
49561: CALL 5233 0 1
49565: PUSH
49566: LD_VAR 0 3
49570: GREATEREQUAL
49571: IFFALSE 49667
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49573: LD_LOC 1
49577: PUSH
49578: LD_VAR 0 6
49582: PUSH
49583: LD_INT 1
49585: PLUS
49586: ARRAY
49587: PPUSH
49588: LD_VAR 0 7
49592: PPUSH
49593: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49597: LD_VAR 0 7
49601: PPUSH
49602: LD_INT 1
49604: PPUSH
49605: LD_LOC 1
49609: PUSH
49610: LD_VAR 0 6
49614: PUSH
49615: LD_INT 1
49617: PLUS
49618: ARRAY
49619: PPUSH
49620: LD_INT 1
49622: PPUSH
49623: CALL_OW 260
49627: PPUSH
49628: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49632: LD_VAR 0 7
49636: PPUSH
49637: LD_INT 2
49639: PPUSH
49640: LD_LOC 1
49644: PUSH
49645: LD_VAR 0 6
49649: PUSH
49650: LD_INT 1
49652: PLUS
49653: ARRAY
49654: PPUSH
49655: LD_INT 2
49657: PPUSH
49658: CALL_OW 260
49662: PPUSH
49663: CALL_OW 239
// end ; class := Inc ( class ) ;
49667: LD_ADDR_VAR 0 8
49671: PUSH
49672: LD_VAR 0 8
49676: PPUSH
49677: CALL 42582 0 1
49681: ST_TO_ADDR
// if class = 5 then
49682: LD_VAR 0 8
49686: PUSH
49687: LD_INT 5
49689: EQUAL
49690: IFFALSE 49700
// class := 1 ;
49692: LD_ADDR_VAR 0 8
49696: PUSH
49697: LD_INT 1
49699: ST_TO_ADDR
// end ;
49700: GO 49506
49702: POP
49703: POP
// if not mpTeamPreset then
49704: LD_LOC 1
49708: NOT
49709: IFFALSE 49721
// mpTeamPreset := result ;
49711: LD_ADDR_LOC 1
49715: PUSH
49716: LD_VAR 0 5
49720: ST_TO_ADDR
// end ;
49721: LD_VAR 0 5
49725: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49726: LD_INT 0
49728: PPUSH
49729: PPUSH
// result := [ ] ;
49730: LD_ADDR_VAR 0 4
49734: PUSH
49735: EMPTY
49736: ST_TO_ADDR
// if not vehicles then
49737: LD_VAR 0 3
49741: NOT
49742: IFFALSE 49746
// exit ;
49744: GO 49960
// for i := 1 to vehicles [ nation ] do
49746: LD_ADDR_VAR 0 5
49750: PUSH
49751: DOUBLE
49752: LD_INT 1
49754: DEC
49755: ST_TO_ADDR
49756: LD_VAR 0 3
49760: PUSH
49761: LD_VAR 0 2
49765: ARRAY
49766: PUSH
49767: FOR_TO
49768: IFFALSE 49958
// begin uc_side := side ;
49770: LD_ADDR_OWVAR 20
49774: PUSH
49775: LD_VAR 0 1
49779: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49780: LD_VAR 0 3
49784: PUSH
49785: LD_VAR 0 2
49789: ARRAY
49790: PUSH
49791: LD_VAR 0 5
49795: ARRAY
49796: PPUSH
49797: CALL 5233 0 1
49801: PUSH
49802: LD_INT 4
49804: GREATER
49805: IFFALSE 49835
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49807: LD_ADDR_OWVAR 21
49811: PUSH
49812: LD_VAR 0 3
49816: PUSH
49817: LD_VAR 0 2
49821: ARRAY
49822: PUSH
49823: LD_VAR 0 5
49827: ARRAY
49828: PUSH
49829: LD_INT 5
49831: ARRAY
49832: ST_TO_ADDR
49833: GO 49845
// uc_nation := nation ;
49835: LD_ADDR_OWVAR 21
49839: PUSH
49840: LD_VAR 0 2
49844: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49845: LD_VAR 0 3
49849: PUSH
49850: LD_VAR 0 2
49854: ARRAY
49855: PUSH
49856: LD_VAR 0 5
49860: ARRAY
49861: PUSH
49862: LD_INT 1
49864: ARRAY
49865: PPUSH
49866: LD_VAR 0 3
49870: PUSH
49871: LD_VAR 0 2
49875: ARRAY
49876: PUSH
49877: LD_VAR 0 5
49881: ARRAY
49882: PUSH
49883: LD_INT 2
49885: ARRAY
49886: PPUSH
49887: LD_VAR 0 3
49891: PUSH
49892: LD_VAR 0 2
49896: ARRAY
49897: PUSH
49898: LD_VAR 0 5
49902: ARRAY
49903: PUSH
49904: LD_INT 3
49906: ARRAY
49907: PPUSH
49908: LD_VAR 0 3
49912: PUSH
49913: LD_VAR 0 2
49917: ARRAY
49918: PUSH
49919: LD_VAR 0 5
49923: ARRAY
49924: PUSH
49925: LD_INT 4
49927: ARRAY
49928: PPUSH
49929: LD_INT 80
49931: PPUSH
49932: CALL 8029 0 5
// result := Join ( result , CreateVehicle ) ;
49936: LD_ADDR_VAR 0 4
49940: PUSH
49941: LD_VAR 0 4
49945: PPUSH
49946: CALL_OW 45
49950: PPUSH
49951: CALL 41209 0 2
49955: ST_TO_ADDR
// end ;
49956: GO 49767
49958: POP
49959: POP
// end ;
49960: LD_VAR 0 4
49964: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49965: LD_INT 0
49967: PPUSH
49968: PPUSH
// for i in mpBattleFlags do
49969: LD_ADDR_VAR 0 3
49973: PUSH
49974: LD_EXP 21
49978: PUSH
49979: FOR_IN
49980: IFFALSE 50057
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49982: LD_VAR 0 3
49986: PPUSH
49987: LD_INT 1
49989: PUSH
49990: LD_VAR 0 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 2
50001: PUSH
50002: LD_VAR 0 1
50006: PUSH
50007: LD_REAL  7.00000000000000E-0001
50010: MUL
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 3
50018: PUSH
50019: LD_VAR 0 1
50023: PUSH
50024: LD_REAL  4.00000000000000E-0001
50027: MUL
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 20
50035: PUSH
50036: LD_VAR 0 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: PPUSH
50051: CALL_OW 423
50055: GO 49979
50057: POP
50058: POP
// end ;
50059: LD_VAR 0 2
50063: RET
// every 0 0$1 trigger mpActive do var i , strength ;
50064: LD_INT 100
50066: IFFALSE 50161
50068: GO 50070
50070: DISABLE
50071: LD_INT 0
50073: PPUSH
50074: PPUSH
// begin if mpBattleFlag <= 0 then
50075: LD_EXP 20
50079: PUSH
50080: LD_INT 0
50082: LESSEQUAL
50083: IFFALSE 50087
// exit ;
50085: GO 50161
// strength := 100 ;
50087: LD_ADDR_VAR 0 2
50091: PUSH
50092: LD_INT 100
50094: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
50095: LD_EXP 20
50099: PPUSH
50100: CALL_OW 67
// strength := Dec ( strength ) ;
50104: LD_ADDR_VAR 0 2
50108: PUSH
50109: LD_VAR 0 2
50113: PPUSH
50114: CALL 42604 0 1
50118: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
50119: LD_VAR 0 2
50123: PPUSH
50124: CALL 49965 0 1
// until not strength ;
50128: LD_VAR 0 2
50132: NOT
50133: IFFALSE 50095
// for i in mpBattleFlags do
50135: LD_ADDR_VAR 0 1
50139: PUSH
50140: LD_EXP 21
50144: PUSH
50145: FOR_IN
50146: IFFALSE 50159
// KillBattleFlag ( i ) ;
50148: LD_VAR 0 1
50152: PPUSH
50153: CALL_OW 419
50157: GO 50145
50159: POP
50160: POP
// end ;
50161: PPOPN 2
50163: END
// every 0 0$1 marked mpActive do var side , tmp ;
50164: GO 50166
50166: DISABLE
50167: LD_INT 0
50169: PPUSH
50170: PPUSH
// begin if mpSibBomb <= 1 then
50171: LD_EXP 26
50175: PUSH
50176: LD_INT 1
50178: LESSEQUAL
50179: IFFALSE 50183
// exit ;
50181: GO 50256
// tmp := mpSibBomb ;
50183: LD_ADDR_VAR 0 2
50187: PUSH
50188: LD_EXP 26
50192: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50193: LD_INT 35
50195: PPUSH
50196: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50200: LD_ADDR_VAR 0 2
50204: PUSH
50205: LD_VAR 0 2
50209: PUSH
50210: LD_INT 35
50212: MINUS
50213: ST_TO_ADDR
// until not tmp ;
50214: LD_VAR 0 2
50218: NOT
50219: IFFALSE 50193
// for side := 1 to 8 do
50221: LD_ADDR_VAR 0 1
50225: PUSH
50226: DOUBLE
50227: LD_INT 1
50229: DEC
50230: ST_TO_ADDR
50231: LD_INT 8
50233: PUSH
50234: FOR_TO
50235: IFFALSE 50254
// SetTech ( tech_SibFiss , side , state_enabled ) ;
50237: LD_INT 25
50239: PPUSH
50240: LD_VAR 0 1
50244: PPUSH
50245: LD_INT 1
50247: PPUSH
50248: CALL_OW 322
50252: GO 50234
50254: POP
50255: POP
// end ;
50256: PPOPN 2
50258: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
50259: LD_INT 0
50261: PPUSH
50262: PPUSH
50263: PPUSH
// mpBuildUpTimeDelay := 0 ;
50264: LD_ADDR_EXP 46
50268: PUSH
50269: LD_INT 0
50271: ST_TO_ADDR
// if not mpBuildUpTime then
50272: LD_EXP 18
50276: NOT
50277: IFFALSE 50281
// exit ;
50279: GO 50470
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
50281: LD_ADDR_EXP 46
50285: PUSH
50286: LD_INT 8400
50288: PUSH
50289: LD_INT 2100
50291: PUSH
50292: LD_EXP 18
50296: MUL
50297: PLUS
50298: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
50299: LD_ADDR_EXP 47
50303: PUSH
50304: LD_INT 1
50306: ST_TO_ADDR
// for i := 1 to 8 do
50307: LD_ADDR_VAR 0 2
50311: PUSH
50312: DOUBLE
50313: LD_INT 1
50315: DEC
50316: ST_TO_ADDR
50317: LD_INT 8
50319: PUSH
50320: FOR_TO
50321: IFFALSE 50468
// if mpSidePositions [ i ] then
50323: LD_EXP 5
50327: PUSH
50328: LD_VAR 0 2
50332: ARRAY
50333: IFFALSE 50466
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
50335: LD_EXP 17
50339: PUSH
50340: LD_EXP 5
50344: PUSH
50345: LD_VAR 0 2
50349: ARRAY
50350: ARRAY
50351: PPUSH
50352: LD_INT 5
50354: PPUSH
50355: CALL_OW 424
// for j := 1 to 8 do
50359: LD_ADDR_VAR 0 3
50363: PUSH
50364: DOUBLE
50365: LD_INT 1
50367: DEC
50368: ST_TO_ADDR
50369: LD_INT 8
50371: PUSH
50372: FOR_TO
50373: IFFALSE 50464
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50375: LD_EXP 5
50379: PUSH
50380: LD_VAR 0 3
50384: ARRAY
50385: IFFALSE 50434
50387: PUSH
50388: LD_EXP 6
50392: PUSH
50393: LD_VAR 0 2
50397: ARRAY
50398: PUSH
50399: LD_EXP 6
50403: PUSH
50404: LD_VAR 0 3
50408: ARRAY
50409: NONEQUAL
50410: IFTRUE 50433
50412: PUSH
50413: LD_EXP 9
50417: NOT
50418: IFFALSE 50432
50420: PUSH
50421: LD_VAR 0 2
50425: PUSH
50426: LD_VAR 0 3
50430: NONEQUAL
50431: AND
50432: OR
50433: AND
50434: IFFALSE 50462
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50436: LD_VAR 0 3
50440: PPUSH
50441: LD_EXP 17
50445: PUSH
50446: LD_EXP 5
50450: PUSH
50451: LD_VAR 0 2
50455: ARRAY
50456: ARRAY
50457: PPUSH
50458: CALL_OW 333
50462: GO 50372
50464: POP
50465: POP
// end ;
50466: GO 50320
50468: POP
50469: POP
// end ;
50470: LD_VAR 0 1
50474: RET
// function EndBuildUp ; var i , j ; begin
50475: LD_INT 0
50477: PPUSH
50478: PPUSH
50479: PPUSH
// mpBuildUpTimeActive := false ;
50480: LD_ADDR_EXP 47
50484: PUSH
50485: LD_INT 0
50487: ST_TO_ADDR
// for i := 1 to 8 do
50488: LD_ADDR_VAR 0 2
50492: PUSH
50493: DOUBLE
50494: LD_INT 1
50496: DEC
50497: ST_TO_ADDR
50498: LD_INT 8
50500: PUSH
50501: FOR_TO
50502: IFFALSE 50649
// if mpSidePositions [ i ] then
50504: LD_EXP 5
50508: PUSH
50509: LD_VAR 0 2
50513: ARRAY
50514: IFFALSE 50647
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50516: LD_EXP 17
50520: PUSH
50521: LD_EXP 5
50525: PUSH
50526: LD_VAR 0 2
50530: ARRAY
50531: ARRAY
50532: PPUSH
50533: LD_INT 0
50535: PPUSH
50536: CALL_OW 424
// for j := 1 to 8 do
50540: LD_ADDR_VAR 0 3
50544: PUSH
50545: DOUBLE
50546: LD_INT 1
50548: DEC
50549: ST_TO_ADDR
50550: LD_INT 8
50552: PUSH
50553: FOR_TO
50554: IFFALSE 50645
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50556: LD_EXP 5
50560: PUSH
50561: LD_VAR 0 3
50565: ARRAY
50566: IFFALSE 50615
50568: PUSH
50569: LD_EXP 6
50573: PUSH
50574: LD_VAR 0 2
50578: ARRAY
50579: PUSH
50580: LD_EXP 6
50584: PUSH
50585: LD_VAR 0 3
50589: ARRAY
50590: NONEQUAL
50591: IFTRUE 50614
50593: PUSH
50594: LD_EXP 9
50598: NOT
50599: IFFALSE 50613
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: LD_VAR 0 3
50611: NONEQUAL
50612: AND
50613: OR
50614: AND
50615: IFFALSE 50643
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50617: LD_VAR 0 3
50621: PPUSH
50622: LD_EXP 17
50626: PUSH
50627: LD_EXP 5
50631: PUSH
50632: LD_VAR 0 2
50636: ARRAY
50637: ARRAY
50638: PPUSH
50639: CALL_OW 334
50643: GO 50553
50645: POP
50646: POP
// end ;
50647: GO 50501
50649: POP
50650: POP
// end ;
50651: LD_VAR 0 1
50655: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50656: LD_EXP 47
50660: IFFALSE 50839
50662: GO 50664
50664: DISABLE
50665: LD_INT 0
50667: PPUSH
50668: PPUSH
// begin for i := 1 to 8 do
50669: LD_ADDR_VAR 0 1
50673: PUSH
50674: DOUBLE
50675: LD_INT 1
50677: DEC
50678: ST_TO_ADDR
50679: LD_INT 8
50681: PUSH
50682: FOR_TO
50683: IFFALSE 50836
// if mpSidePositions [ i ] then
50685: LD_EXP 5
50689: PUSH
50690: LD_VAR 0 1
50694: ARRAY
50695: IFFALSE 50834
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50697: LD_ADDR_VAR 0 2
50701: PUSH
50702: LD_EXP 17
50706: PUSH
50707: LD_EXP 5
50711: PUSH
50712: LD_VAR 0 1
50716: ARRAY
50717: ARRAY
50718: PPUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 21
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 21
50734: PUSH
50735: LD_INT 2
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 22
50749: PUSH
50750: LD_OWVAR 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PPUSH
50763: CALL_OW 70
50767: PUSH
50768: FOR_IN
50769: IFFALSE 50832
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50771: LD_EXP 6
50775: PUSH
50776: LD_VAR 0 1
50780: ARRAY
50781: PUSH
50782: LD_EXP 6
50786: PUSH
50787: LD_OWVAR 2
50791: ARRAY
50792: NONEQUAL
50793: IFTRUE 50816
50795: PUSH
50796: LD_EXP 9
50800: NOT
50801: IFFALSE 50815
50803: PUSH
50804: LD_VAR 0 1
50808: PUSH
50809: LD_OWVAR 2
50813: NONEQUAL
50814: AND
50815: OR
50816: IFFALSE 50830
// ComMoveToArea ( un , BuildUpEscape ) ;
50818: LD_VAR 0 2
50822: PPUSH
50823: LD_INT 72
50825: PPUSH
50826: CALL_OW 113
50830: GO 50768
50832: POP
50833: POP
50834: GO 50682
50836: POP
50837: POP
// enable ;
50838: ENABLE
// end ;
50839: PPOPN 2
50841: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50842: LD_EXP 18
50846: IFFALSE 50896
50848: GO 50850
50850: DISABLE
50851: LD_INT 0
50853: PPUSH
// begin tmp := mpBuildUpTime ;
50854: LD_ADDR_VAR 0 1
50858: PUSH
50859: LD_EXP 18
50863: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50864: LD_INT 35
50866: PPUSH
50867: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50871: LD_ADDR_VAR 0 1
50875: PUSH
50876: LD_VAR 0 1
50880: PUSH
50881: LD_INT 35
50883: MINUS
50884: ST_TO_ADDR
// until not tmp ;
50885: LD_VAR 0 1
50889: NOT
50890: IFFALSE 50864
// EndBuildUp ;
50892: CALL 50475 0 0
// end ;
50896: PPOPN 1
50898: END
// every 0 0$1 trigger mpActive marked mpWin do
50899: LD_INT 100
50901: IFFALSE 50935
50903: GO 50905
50905: DISABLE
// begin if IAmServer then
50906: CALL_OW 518
50910: IFFALSE 50919
// wait ( 0 0$3 ) ;
50912: LD_INT 105
50914: PPUSH
50915: CALL_OW 67
// if Multiplayer then
50919: LD_OWVAR 4
50923: IFFALSE 50931
// YouWinInMultiplayer else
50925: CALL_OW 106
50929: GO 50935
// YouWin ;
50931: CALL_OW 103
// end ;
50935: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50936: LD_INT 0
50938: PPUSH
// result := false ;
50939: LD_ADDR_VAR 0 3
50943: PUSH
50944: LD_INT 0
50946: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine , GameTypeArmsRace , GameTypeArmsArtifact :
50947: LD_VAR 0 1
50951: PUSH
50952: LD_INT 1
50954: DOUBLE
50955: EQUAL
50956: IFTRUE 50978
50958: LD_INT 5
50960: DOUBLE
50961: EQUAL
50962: IFTRUE 50978
50964: LD_INT 6
50966: DOUBLE
50967: EQUAL
50968: IFTRUE 50978
50970: LD_INT 7
50972: DOUBLE
50973: EQUAL
50974: IFTRUE 50978
50976: GO 51051
50978: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50979: LD_ADDR_VAR 0 3
50983: PUSH
50984: LD_INT 22
50986: PUSH
50987: LD_VAR 0 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 21
51001: PUSH
51002: LD_INT 1
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 33
51011: PUSH
51012: LD_INT 3
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 33
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PPUSH
51039: CALL_OW 69
51043: PPUSH
51044: CALL 5233 0 1
51048: ST_TO_ADDR
// end ; GameTypeSurvival :
51049: GO 51447
51051: LD_INT 2
51053: DOUBLE
51054: EQUAL
51055: IFTRUE 51059
51057: GO 51189
51059: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51060: LD_ADDR_VAR 0 3
51064: PUSH
51065: LD_INT 22
51067: PUSH
51068: LD_VAR 0 2
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 2
51079: PUSH
51080: LD_INT 30
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 30
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PPUSH
51109: CALL_OW 69
51113: PPUSH
51114: CALL 5233 0 1
51118: IFFALSE 51186
51120: PUSH
51121: LD_INT 22
51123: PUSH
51124: LD_VAR 0 2
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: LD_INT 21
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 33
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 33
51158: PUSH
51159: LD_INT 5
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PPUSH
51176: CALL_OW 69
51180: PPUSH
51181: CALL 5233 0 1
51185: AND
51186: ST_TO_ADDR
// end ; GameTypeSurvivalH :
51187: GO 51447
51189: LD_INT 8
51191: DOUBLE
51192: EQUAL
51193: IFTRUE 51197
51195: GO 51346
51197: POP
// begin result := IsLive ( mpCommanders [ side ] ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
51198: LD_ADDR_VAR 0 3
51202: PUSH
51203: LD_EXP 39
51207: PUSH
51208: LD_VAR 0 2
51212: ARRAY
51213: PPUSH
51214: CALL_OW 300
51218: IFFALSE 51275
51220: PUSH
51221: LD_INT 22
51223: PUSH
51224: LD_VAR 0 2
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 30
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 30
51248: PUSH
51249: LD_INT 1
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PPUSH
51265: CALL_OW 69
51269: PPUSH
51270: CALL 5233 0 1
51274: AND
51275: IFFALSE 51343
51277: PUSH
51278: LD_INT 22
51280: PUSH
51281: LD_VAR 0 2
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: PUSH
51293: LD_INT 21
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 33
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 33
51315: PUSH
51316: LD_INT 5
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PPUSH
51333: CALL_OW 69
51337: PPUSH
51338: CALL 5233 0 1
51342: AND
51343: ST_TO_ADDR
// end ; GameTypeKing :
51344: GO 51447
51346: LD_INT 3
51348: DOUBLE
51349: EQUAL
51350: IFTRUE 51354
51352: GO 51446
51354: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
51355: LD_ADDR_VAR 0 3
51359: PUSH
51360: LD_INT 22
51362: PUSH
51363: LD_VAR 0 2
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: PUSH
51375: LD_INT 21
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 33
51387: PUSH
51388: LD_INT 3
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 33
51397: PUSH
51398: LD_INT 5
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PPUSH
51415: CALL_OW 69
51419: PPUSH
51420: CALL 5233 0 1
51424: IFFALSE 51443
51426: PUSH
51427: LD_VAR 0 2
51431: PPUSH
51432: CALL 56116 0 1
51436: PUSH
51437: LD_EXP 33
51441: LESS
51442: AND
51443: ST_TO_ADDR
// end ; end ;
51444: GO 51447
51446: POP
// end ;
51447: LD_VAR 0 3
51451: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
51452: LD_INT 100
51454: IFFALSE 51684
51456: GO 51458
51458: DISABLE
51459: LD_INT 0
51461: PPUSH
51462: PPUSH
// begin if Multiplayer then
51463: LD_OWVAR 4
51467: IFFALSE 51475
// SetPlayerSpectator ( ) else
51469: CALL_OW 572
51473: GO 51484
// FogOff ( your_side ) ;
51475: LD_OWVAR 2
51479: PPUSH
51480: CALL_OW 344
// repeat gameIsOn := false ;
51484: LD_ADDR_VAR 0 1
51488: PUSH
51489: LD_INT 0
51491: ST_TO_ADDR
// for i := 1 to 8 do
51492: LD_ADDR_VAR 0 2
51496: PUSH
51497: DOUBLE
51498: LD_INT 1
51500: DEC
51501: ST_TO_ADDR
51502: LD_INT 8
51504: PUSH
51505: FOR_TO
51506: IFFALSE 51636
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
51508: LD_EXP 5
51512: PUSH
51513: LD_VAR 0 2
51517: ARRAY
51518: IFFALSE 51531
51520: PUSH
51521: LD_VAR 0 2
51525: PPUSH
51526: CALL_OW 108
51530: AND
51531: IFFALSE 51545
51533: PUSH
51534: LD_VAR 0 2
51538: PUSH
51539: LD_OWVAR 2
51543: NONEQUAL
51544: AND
51545: IFFALSE 51634
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51547: LD_EXP 6
51551: PUSH
51552: LD_VAR 0 2
51556: ARRAY
51557: NOT
51558: IFTRUE 51606
51560: PUSH
51561: LD_EXP 6
51565: PUSH
51566: LD_VAR 0 2
51570: ARRAY
51571: PUSH
51572: LD_EXP 6
51576: PUSH
51577: LD_OWVAR 2
51581: ARRAY
51582: NONEQUAL
51583: IFFALSE 51605
51585: PUSH
51586: LD_OWVAR 2
51590: PPUSH
51591: LD_VAR 0 2
51595: PPUSH
51596: CALL_OW 81
51600: PUSH
51601: LD_INT 1
51603: NONEQUAL
51604: AND
51605: OR
51606: IFFALSE 51634
// if HasPowerByGameType ( mpGameType , i ) then
51608: LD_EXP 1
51612: PPUSH
51613: LD_VAR 0 2
51617: PPUSH
51618: CALL 50936 0 2
51622: IFFALSE 51634
// begin gameIsOn := true ;
51624: LD_ADDR_VAR 0 1
51628: PUSH
51629: LD_INT 1
51631: ST_TO_ADDR
// break ;
51632: GO 51636
// end ;
51634: GO 51505
51636: POP
51637: POP
// wait ( 100 ) ;
51638: LD_INT 100
51640: PPUSH
51641: CALL_OW 67
// until not gameIsOn ;
51645: LD_VAR 0 1
51649: NOT
51650: IFFALSE 51484
// if IAmServer then
51652: CALL_OW 518
51656: IFFALSE 51665
// wait ( 0 0$3 ) ;
51658: LD_INT 105
51660: PPUSH
51661: CALL_OW 67
// if Multiplayer then
51665: LD_OWVAR 4
51669: IFFALSE 51677
// YouLostInMultiplayer else
51671: CALL_OW 107
51675: GO 51684
// YouLost (  ) ;
51677: LD_STRING 
51679: PPUSH
51680: CALL_OW 104
// end ;
51684: PPOPN 2
51686: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51687: LD_EXP 31
51691: IFFALSE 52075
51693: GO 51695
51695: DISABLE
51696: LD_INT 0
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51703: LD_ADDR_VAR 0 5
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 4
51719: PUSH
51720: LD_INT 5
51722: PUSH
51723: LD_INT 6
51725: PUSH
51726: LD_INT 7
51728: PUSH
51729: LD_INT 8
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51742: LD_INT 350
51744: PPUSH
51745: CALL_OW 67
// for i := 1 to 8 do
51749: LD_ADDR_VAR 0 1
51753: PUSH
51754: DOUBLE
51755: LD_INT 1
51757: DEC
51758: ST_TO_ADDR
51759: LD_INT 8
51761: PUSH
51762: FOR_TO
51763: IFFALSE 52045
// begin j := sides [ i ] ;
51765: LD_ADDR_VAR 0 2
51769: PUSH
51770: LD_VAR 0 5
51774: PUSH
51775: LD_VAR 0 1
51779: ARRAY
51780: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51781: LD_EXP 38
51785: PUSH
51786: LD_VAR 0 2
51790: ARRAY
51791: PPUSH
51792: CALL 5233 0 1
51796: IFFALSE 51809
51798: PUSH
51799: LD_VAR 0 2
51803: PPUSH
51804: CALL_OW 108
51808: AND
51809: IFFALSE 51827
51811: PUSH
51812: LD_EXP 1
51816: PPUSH
51817: LD_VAR 0 2
51821: PPUSH
51822: CALL 50936 0 2
51826: AND
51827: IFFALSE 52043
// begin wait ( mpRespawn div 2 ) ;
51829: LD_EXP 31
51833: PUSH
51834: LD_INT 2
51836: DIV
51837: PPUSH
51838: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51842: LD_ADDR_VAR 0 3
51846: PUSH
51847: LD_INT 22
51849: PUSH
51850: LD_VAR 0 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 50
51861: PUSH
51862: EMPTY
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 30
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 30
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: LIST
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: LIST
51897: PPUSH
51898: CALL_OW 69
51902: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51903: LD_VAR 0 3
51907: NOT
51908: IFTRUE 51922
51910: PUSH
51911: LD_VAR 0 2
51915: PPUSH
51916: CALL_OW 108
51920: NOT
51921: OR
51922: IFTRUE 51941
51924: PUSH
51925: LD_EXP 1
51929: PPUSH
51930: LD_VAR 0 2
51934: PPUSH
51935: CALL 50936 0 2
51939: NOT
51940: OR
51941: IFFALSE 51945
// continue ;
51943: GO 51762
// spawn := tmp [ 1 ] ;
51945: LD_ADDR_VAR 0 4
51949: PUSH
51950: LD_VAR 0 3
51954: PUSH
51955: LD_INT 1
51957: ARRAY
51958: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51959: LD_EXP 38
51963: PUSH
51964: LD_VAR 0 2
51968: ARRAY
51969: PUSH
51970: LD_INT 1
51972: ARRAY
51973: PPUSH
51974: LD_VAR 0 4
51978: PPUSH
51979: CALL_OW 250
51983: PPUSH
51984: LD_VAR 0 4
51988: PPUSH
51989: CALL_OW 251
51993: PPUSH
51994: LD_INT 32
51996: PPUSH
51997: LD_INT 1
51999: PPUSH
52000: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
52004: LD_ADDR_EXP 38
52008: PUSH
52009: LD_EXP 38
52013: PPUSH
52014: LD_VAR 0 2
52018: PPUSH
52019: LD_EXP 38
52023: PUSH
52024: LD_VAR 0 2
52028: ARRAY
52029: PPUSH
52030: LD_INT 1
52032: PPUSH
52033: CALL_OW 3
52037: PPUSH
52038: CALL_OW 1
52042: ST_TO_ADDR
// end ; end ;
52043: GO 51762
52045: POP
52046: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
52047: LD_ADDR_VAR 0 5
52051: PUSH
52052: LD_VAR 0 5
52056: PPUSH
52057: LD_INT 1
52059: PPUSH
52060: LD_INT 8
52062: PPUSH
52063: LD_INT 1
52065: PPUSH
52066: CALL 7559 0 4
52070: ST_TO_ADDR
// until false ;
52071: LD_INT 0
52073: IFFALSE 51742
// end ;
52075: PPOPN 5
52077: END
// every 0 0$1 marked mpActive do
52078: GO 52080
52080: DISABLE
// begin enable ;
52081: ENABLE
// if not mpDisplayStrings then
52082: LD_EXP 36
52086: NOT
52087: IFFALSE 52098
// begin display_strings := [ ] ;
52089: LD_ADDR_OWVAR 47
52093: PUSH
52094: EMPTY
52095: ST_TO_ADDR
// exit ;
52096: GO 52108
// end ; display_strings := mpDisplayStrings ;
52098: LD_ADDR_OWVAR 47
52102: PUSH
52103: LD_EXP 36
52107: ST_TO_ADDR
// end ; end_of_file
52108: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
52109: LD_INT 0
52111: PPUSH
52112: PPUSH
52113: PPUSH
52114: PPUSH
52115: PPUSH
52116: PPUSH
52117: PPUSH
52118: PPUSH
52119: PPUSH
// if GetType ( un ) = unit_vehicle then
52120: LD_VAR 0 1
52124: PPUSH
52125: CALL_OW 247
52129: PUSH
52130: LD_INT 2
52132: EQUAL
52133: IFFALSE 52137
// exit ;
52135: GO 52910
// side := GetSide ( un ) ;
52137: LD_ADDR_VAR 0 9
52141: PUSH
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 255
52151: ST_TO_ADDR
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] then
52152: LD_EXP 1
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: LD_INT 8
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: IN
52167: IFFALSE 52261
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
52169: LD_VAR 0 1
52173: PPUSH
52174: CALL_OW 266
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: IN
52189: IFFALSE 52261
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52191: LD_ADDR_VAR 0 3
52195: PUSH
52196: LD_INT 22
52198: PUSH
52199: LD_VAR 0 9
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 21
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 33
52223: PUSH
52224: LD_INT 3
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: LIST
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PPUSH
52240: CALL_OW 69
52244: PUSH
52245: FOR_IN
52246: IFFALSE 52259
// KillUnit ( i ) ;
52248: LD_VAR 0 3
52252: PPUSH
52253: CALL_OW 66
52257: GO 52245
52259: POP
52260: POP
// end ; if mpGameType = GameTypeSurvivalH then
52261: LD_EXP 1
52265: PUSH
52266: LD_INT 8
52268: EQUAL
52269: IFFALSE 52353
// if un in mpCommanders then
52271: LD_VAR 0 1
52275: PUSH
52276: LD_EXP 39
52280: IN
52281: IFFALSE 52353
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
52283: LD_ADDR_VAR 0 3
52287: PUSH
52288: LD_INT 22
52290: PUSH
52291: LD_VAR 0 9
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: LD_INT 21
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 33
52315: PUSH
52316: LD_INT 3
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PPUSH
52332: CALL_OW 69
52336: PUSH
52337: FOR_IN
52338: IFFALSE 52351
// KillUnit ( i ) ;
52340: LD_VAR 0 3
52344: PPUSH
52345: CALL_OW 66
52349: GO 52337
52351: POP
52352: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
52353: LD_VAR 0 1
52357: PPUSH
52358: CALL_OW 257
52362: PUSH
52363: LD_INT 12
52365: PUSH
52366: LD_INT 17
52368: PUSH
52369: LD_INT 15
52371: PUSH
52372: LD_INT 16
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: IN
52381: IFTRUE 52398
52383: PUSH
52384: LD_VAR 0 1
52388: PPUSH
52389: CALL_OW 263
52393: PUSH
52394: LD_INT 5
52396: EQUAL
52397: OR
52398: IFFALSE 52635
// begin tag := 0 ;
52400: LD_ADDR_VAR 0 5
52404: PUSH
52405: LD_INT 0
52407: ST_TO_ADDR
// for i := 1 to 8 do
52408: LD_ADDR_VAR 0 3
52412: PUSH
52413: DOUBLE
52414: LD_INT 1
52416: DEC
52417: ST_TO_ADDR
52418: LD_INT 8
52420: PUSH
52421: FOR_TO
52422: IFFALSE 52456
// if un in mpApePosIndex [ i ] then
52424: LD_VAR 0 1
52428: PUSH
52429: LD_EXP 30
52433: PUSH
52434: LD_VAR 0 3
52438: ARRAY
52439: IN
52440: IFFALSE 52454
// begin tag := i ;
52442: LD_ADDR_VAR 0 5
52446: PUSH
52447: LD_VAR 0 3
52451: ST_TO_ADDR
// break ;
52452: GO 52456
// end ;
52454: GO 52421
52456: POP
52457: POP
// if not tag then
52458: LD_VAR 0 5
52462: NOT
52463: IFFALSE 52467
// exit ;
52465: GO 52910
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52467: LD_ADDR_VAR 0 7
52471: PUSH
52472: LD_EXP 29
52476: PUSH
52477: LD_EXP 5
52481: PUSH
52482: LD_VAR 0 5
52486: ARRAY
52487: ARRAY
52488: ST_TO_ADDR
// if not area then
52489: LD_VAR 0 7
52493: NOT
52494: IFFALSE 52498
// exit ;
52496: GO 52910
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
52498: LD_INT 14700
52500: PUSH
52501: LD_VAR 0 1
52505: PUSH
52506: LD_INT 5
52508: MOD
52509: PUSH
52510: LD_INT 1
52512: PLUS
52513: PUSH
52514: LD_INT 700
52516: MUL
52517: PLUS
52518: PPUSH
52519: CALL_OW 67
// repeat wait ( 10 ) ;
52523: LD_INT 10
52525: PPUSH
52526: CALL_OW 67
// until not mpBlockRespThread ;
52530: LD_EXP 45
52534: NOT
52535: IFFALSE 52523
// mpBlockRespThread := true ;
52537: LD_ADDR_EXP 45
52541: PUSH
52542: LD_INT 1
52544: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
52545: LD_INT 0
52547: PPUSH
52548: CALL 37336 0 1
// ape := CreateHuman ;
52552: LD_ADDR_VAR 0 4
52556: PUSH
52557: CALL_OW 44
52561: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
52562: LD_ADDR_EXP 30
52566: PUSH
52567: LD_EXP 30
52571: PPUSH
52572: LD_VAR 0 5
52576: PPUSH
52577: LD_EXP 30
52581: PUSH
52582: LD_VAR 0 5
52586: ARRAY
52587: PPUSH
52588: LD_VAR 0 4
52592: PPUSH
52593: CALL 41209 0 2
52597: PPUSH
52598: CALL_OW 1
52602: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
52603: LD_VAR 0 4
52607: PPUSH
52608: LD_VAR 0 7
52612: PPUSH
52613: LD_INT 0
52615: PPUSH
52616: CALL_OW 49
// wait ( 10 ) ;
52620: LD_INT 10
52622: PPUSH
52623: CALL_OW 67
// mpBlockRespThread := false ;
52627: LD_ADDR_EXP 45
52631: PUSH
52632: LD_INT 0
52634: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
52635: LD_VAR 0 1
52639: PPUSH
52640: CALL_OW 247
52644: PUSH
52645: LD_INT 1
52647: EQUAL
52648: IFFALSE 52665
52650: PUSH
52651: LD_VAR 0 1
52655: PPUSH
52656: CALL_OW 248
52660: PUSH
52661: LD_INT 0
52663: GREATER
52664: AND
52665: IFFALSE 52910
// begin if not mpRespawn then
52667: LD_EXP 31
52671: NOT
52672: IFFALSE 52676
// exit ;
52674: GO 52910
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52676: LD_VAR 0 9
52680: PPUSH
52681: CALL_OW 108
52685: NOT
52686: IFFALSE 52705
52688: PUSH
52689: LD_EXP 1
52693: PPUSH
52694: LD_VAR 0 9
52698: PPUSH
52699: CALL 50936 0 2
52703: NOT
52704: AND
52705: IFFALSE 52709
// exit ;
52707: GO 52910
// side := GetSide ( un ) ;
52709: LD_ADDR_VAR 0 9
52713: PUSH
52714: LD_VAR 0 1
52718: PPUSH
52719: CALL_OW 255
52723: ST_TO_ADDR
// nation := GetNation ( un ) ;
52724: LD_ADDR_VAR 0 8
52728: PUSH
52729: LD_VAR 0 1
52733: PPUSH
52734: CALL_OW 248
52738: ST_TO_ADDR
// class := GetClass ( un ) ;
52739: LD_ADDR_VAR 0 6
52743: PUSH
52744: LD_VAR 0 1
52748: PPUSH
52749: CALL_OW 257
52753: ST_TO_ADDR
// if class > 4 then
52754: LD_VAR 0 6
52758: PUSH
52759: LD_INT 4
52761: GREATER
52762: IFFALSE 52772
// class := 1 ;
52764: LD_ADDR_VAR 0 6
52768: PUSH
52769: LD_INT 1
52771: ST_TO_ADDR
// repeat wait ( 10 ) ;
52772: LD_INT 10
52774: PPUSH
52775: CALL_OW 67
// until not mpBlockRespThread ;
52779: LD_EXP 45
52783: NOT
52784: IFFALSE 52772
// mpBlockRespThread := true ;
52786: LD_ADDR_EXP 45
52790: PUSH
52791: LD_INT 1
52793: ST_TO_ADDR
// uc_side := side ;
52794: LD_ADDR_OWVAR 20
52798: PUSH
52799: LD_VAR 0 9
52803: ST_TO_ADDR
// uc_nation := nation ;
52804: LD_ADDR_OWVAR 21
52808: PUSH
52809: LD_VAR 0 8
52813: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52814: LD_INT 0
52816: PPUSH
52817: LD_VAR 0 6
52821: PPUSH
52822: LD_INT 2
52824: PPUSH
52825: CALL_OW 380
// un := CreateHuman ;
52829: LD_ADDR_VAR 0 1
52833: PUSH
52834: CALL_OW 44
52838: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52839: LD_ADDR_EXP 38
52843: PUSH
52844: LD_EXP 38
52848: PPUSH
52849: LD_VAR 0 9
52853: PPUSH
52854: LD_EXP 38
52858: PUSH
52859: LD_VAR 0 9
52863: ARRAY
52864: PPUSH
52865: LD_EXP 38
52869: PUSH
52870: LD_VAR 0 9
52874: ARRAY
52875: PUSH
52876: LD_INT 1
52878: PLUS
52879: PPUSH
52880: LD_VAR 0 1
52884: PPUSH
52885: CALL_OW 1
52889: PPUSH
52890: CALL_OW 1
52894: ST_TO_ADDR
// wait ( 10 ) ;
52895: LD_INT 10
52897: PPUSH
52898: CALL_OW 67
// mpBlockRespThread := false ;
52902: LD_ADDR_EXP 45
52906: PUSH
52907: LD_INT 0
52909: ST_TO_ADDR
// end ; end ;
52910: LD_VAR 0 2
52914: RET
// export function Multiplayer_VehicleConstruction_ApeConsumed ( factory , un ) ; var i , tag , area , ape ; begin
52915: LD_INT 0
52917: PPUSH
52918: PPUSH
52919: PPUSH
52920: PPUSH
52921: PPUSH
// tag := 0 ;
52922: LD_ADDR_VAR 0 5
52926: PUSH
52927: LD_INT 0
52929: ST_TO_ADDR
// for i := 1 to 8 do
52930: LD_ADDR_VAR 0 4
52934: PUSH
52935: DOUBLE
52936: LD_INT 1
52938: DEC
52939: ST_TO_ADDR
52940: LD_INT 8
52942: PUSH
52943: FOR_TO
52944: IFFALSE 52978
// if un in mpApePosIndex [ i ] then
52946: LD_VAR 0 2
52950: PUSH
52951: LD_EXP 30
52955: PUSH
52956: LD_VAR 0 4
52960: ARRAY
52961: IN
52962: IFFALSE 52976
// begin tag := i ;
52964: LD_ADDR_VAR 0 5
52968: PUSH
52969: LD_VAR 0 4
52973: ST_TO_ADDR
// break ;
52974: GO 52978
// end ;
52976: GO 52943
52978: POP
52979: POP
// if not tag then
52980: LD_VAR 0 5
52984: NOT
52985: IFFALSE 52989
// exit ;
52987: GO 53157
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
52989: LD_ADDR_VAR 0 6
52993: PUSH
52994: LD_EXP 29
52998: PUSH
52999: LD_EXP 5
53003: PUSH
53004: LD_VAR 0 5
53008: ARRAY
53009: ARRAY
53010: ST_TO_ADDR
// if not area then
53011: LD_VAR 0 6
53015: NOT
53016: IFFALSE 53020
// exit ;
53018: GO 53157
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
53020: LD_INT 14700
53022: PUSH
53023: LD_VAR 0 2
53027: PUSH
53028: LD_INT 5
53030: MOD
53031: PUSH
53032: LD_INT 1
53034: PLUS
53035: PUSH
53036: LD_INT 700
53038: MUL
53039: PLUS
53040: PPUSH
53041: CALL_OW 67
// repeat wait ( 10 ) ;
53045: LD_INT 10
53047: PPUSH
53048: CALL_OW 67
// until not mpBlockRespThread ;
53052: LD_EXP 45
53056: NOT
53057: IFFALSE 53045
// mpBlockRespThread := true ;
53059: LD_ADDR_EXP 45
53063: PUSH
53064: LD_INT 1
53066: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
53067: LD_INT 0
53069: PPUSH
53070: CALL 37336 0 1
// ape := CreateHuman ;
53074: LD_ADDR_VAR 0 7
53078: PUSH
53079: CALL_OW 44
53083: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
53084: LD_ADDR_EXP 30
53088: PUSH
53089: LD_EXP 30
53093: PPUSH
53094: LD_VAR 0 5
53098: PPUSH
53099: LD_EXP 30
53103: PUSH
53104: LD_VAR 0 5
53108: ARRAY
53109: PPUSH
53110: LD_VAR 0 7
53114: PPUSH
53115: CALL 41209 0 2
53119: PPUSH
53120: CALL_OW 1
53124: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
53125: LD_VAR 0 7
53129: PPUSH
53130: LD_VAR 0 6
53134: PPUSH
53135: LD_INT 0
53137: PPUSH
53138: CALL_OW 49
// wait ( 10 ) ;
53142: LD_INT 10
53144: PPUSH
53145: CALL_OW 67
// mpBlockRespThread := false ;
53149: LD_ADDR_EXP 45
53153: PUSH
53154: LD_INT 0
53156: ST_TO_ADDR
// end ;
53157: LD_VAR 0 3
53161: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
53162: LD_INT 0
53164: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
53165: LD_VAR 0 1
53169: PPUSH
53170: CALL_OW 266
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: IN
53185: IFFALSE 53210
// SetBName ( building , @ & GetSide ( building ) ) ;
53187: LD_VAR 0 1
53191: PPUSH
53192: LD_STRING @
53194: PUSH
53195: LD_VAR 0 1
53199: PPUSH
53200: CALL_OW 255
53204: STR
53205: PPUSH
53206: CALL_OW 500
// end ;
53210: LD_VAR 0 2
53214: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
53215: LD_INT 0
53217: PPUSH
53218: PPUSH
// if mpGameType in [ GameTypeSurvival , GameTypeSurvivalH ] and GetBType ( building ) in [ b_depot , b_warehouse ] then
53219: LD_EXP 1
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 8
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: IN
53234: IFFALSE 53258
53236: PUSH
53237: LD_VAR 0 1
53241: PPUSH
53242: CALL_OW 266
53246: PUSH
53247: LD_INT 0
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: IN
53257: AND
53258: IFFALSE 53337
// begin SetSide ( building , oldSide ) ;
53260: LD_VAR 0 1
53264: PPUSH
53265: LD_VAR 0 2
53269: PPUSH
53270: CALL_OW 235
// KillUnit ( building ) ;
53274: LD_VAR 0 1
53278: PPUSH
53279: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
53283: LD_ADDR_VAR 0 5
53287: PUSH
53288: LD_INT 22
53290: PUSH
53291: LD_VAR 0 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 21
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PPUSH
53314: CALL_OW 69
53318: PUSH
53319: FOR_IN
53320: IFFALSE 53333
// KillUnit ( i ) ;
53322: LD_VAR 0 5
53326: PPUSH
53327: CALL_OW 66
53331: GO 53319
53333: POP
53334: POP
// exit ;
53335: GO 53382
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 266
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: IN
53357: IFFALSE 53382
// SetBName ( building , @ & GetSide ( building ) ) ;
53359: LD_VAR 0 1
53363: PPUSH
53364: LD_STRING @
53366: PUSH
53367: LD_VAR 0 1
53371: PPUSH
53372: CALL_OW 255
53376: STR
53377: PPUSH
53378: CALL_OW 500
// end ;
53382: LD_VAR 0 4
53386: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
53387: LD_INT 0
53389: PPUSH
53390: PPUSH
53391: PPUSH
// if mpGameType <> GameTypeFamine then
53392: LD_EXP 1
53396: PUSH
53397: LD_INT 5
53399: NONEQUAL
53400: IFFALSE 53404
// exit ;
53402: GO 53638
// for i := 1 to mpGlobalOilDeposits do
53404: LD_ADDR_VAR 0 6
53408: PUSH
53409: DOUBLE
53410: LD_INT 1
53412: DEC
53413: ST_TO_ADDR
53414: LD_EXP 40
53418: PUSH
53419: FOR_TO
53420: IFFALSE 53636
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
53422: LD_EXP 40
53426: PUSH
53427: LD_VAR 0 6
53431: ARRAY
53432: PUSH
53433: LD_INT 1
53435: ARRAY
53436: PPUSH
53437: LD_EXP 40
53441: PUSH
53442: LD_VAR 0 6
53446: ARRAY
53447: PUSH
53448: LD_INT 2
53450: ARRAY
53451: PPUSH
53452: CALL_OW 428
53456: PUSH
53457: LD_VAR 0 1
53461: EQUAL
53462: IFFALSE 53634
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
53464: LD_ADDR_VAR 0 7
53468: PUSH
53469: LD_EXP 40
53473: PUSH
53474: LD_VAR 0 6
53478: ARRAY
53479: PUSH
53480: LD_INT 3
53482: ARRAY
53483: ST_TO_ADDR
// value := value - amount ;
53484: LD_ADDR_VAR 0 7
53488: PUSH
53489: LD_VAR 0 7
53493: PUSH
53494: LD_VAR 0 4
53498: MINUS
53499: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
53500: LD_ADDR_EXP 40
53504: PUSH
53505: LD_EXP 40
53509: PPUSH
53510: LD_VAR 0 6
53514: PPUSH
53515: LD_EXP 40
53519: PUSH
53520: LD_VAR 0 6
53524: ARRAY
53525: PPUSH
53526: LD_INT 3
53528: PPUSH
53529: LD_VAR 0 7
53533: PPUSH
53534: CALL_OW 1
53538: PPUSH
53539: CALL_OW 1
53543: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53544: LD_VAR 0 2
53548: PUSH
53549: LD_OWVAR 2
53553: PUSH
53554: LD_INT 9
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: IN
53561: IFFALSE 53577
// SetUnitDisplayNumber ( building , value ) ;
53563: LD_VAR 0 1
53567: PPUSH
53568: LD_VAR 0 7
53572: PPUSH
53573: CALL_OW 505
// if value <= 0 then
53577: LD_VAR 0 7
53581: PUSH
53582: LD_INT 0
53584: LESSEQUAL
53585: IFFALSE 53634
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
53587: LD_EXP 40
53591: PUSH
53592: LD_VAR 0 6
53596: ARRAY
53597: PUSH
53598: LD_INT 1
53600: ARRAY
53601: PPUSH
53602: LD_EXP 40
53606: PUSH
53607: LD_VAR 0 6
53611: ARRAY
53612: PUSH
53613: LD_INT 2
53615: ARRAY
53616: PPUSH
53617: CALL_OW 63
// KillUnit ( building ) ;
53621: LD_VAR 0 1
53625: PPUSH
53626: CALL_OW 66
// exit ;
53630: POP
53631: POP
53632: GO 53638
// end ; end ; end ;
53634: GO 53419
53636: POP
53637: POP
// end ;
53638: LD_VAR 0 5
53642: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
53643: LD_INT 0
53645: PPUSH
53646: PPUSH
53647: PPUSH
// if mpGameType <> GameTypeFamine then
53648: LD_EXP 1
53652: PUSH
53653: LD_INT 5
53655: NONEQUAL
53656: IFFALSE 53660
// exit ;
53658: GO 53894
// for i := 1 to mpGlobalSibDeposits do
53660: LD_ADDR_VAR 0 6
53664: PUSH
53665: DOUBLE
53666: LD_INT 1
53668: DEC
53669: ST_TO_ADDR
53670: LD_EXP 41
53674: PUSH
53675: FOR_TO
53676: IFFALSE 53892
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
53678: LD_EXP 41
53682: PUSH
53683: LD_VAR 0 6
53687: ARRAY
53688: PUSH
53689: LD_INT 1
53691: ARRAY
53692: PPUSH
53693: LD_EXP 41
53697: PUSH
53698: LD_VAR 0 6
53702: ARRAY
53703: PUSH
53704: LD_INT 2
53706: ARRAY
53707: PPUSH
53708: CALL_OW 428
53712: PUSH
53713: LD_VAR 0 1
53717: EQUAL
53718: IFFALSE 53890
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
53720: LD_ADDR_VAR 0 7
53724: PUSH
53725: LD_EXP 41
53729: PUSH
53730: LD_VAR 0 6
53734: ARRAY
53735: PUSH
53736: LD_INT 3
53738: ARRAY
53739: ST_TO_ADDR
// value := value - amount ;
53740: LD_ADDR_VAR 0 7
53744: PUSH
53745: LD_VAR 0 7
53749: PUSH
53750: LD_VAR 0 4
53754: MINUS
53755: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
53756: LD_ADDR_EXP 41
53760: PUSH
53761: LD_EXP 41
53765: PPUSH
53766: LD_VAR 0 6
53770: PPUSH
53771: LD_EXP 41
53775: PUSH
53776: LD_VAR 0 6
53780: ARRAY
53781: PPUSH
53782: LD_INT 3
53784: PPUSH
53785: LD_VAR 0 7
53789: PPUSH
53790: CALL_OW 1
53794: PPUSH
53795: CALL_OW 1
53799: ST_TO_ADDR
// if side in [ your_side , 9 ] then
53800: LD_VAR 0 2
53804: PUSH
53805: LD_OWVAR 2
53809: PUSH
53810: LD_INT 9
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: IN
53817: IFFALSE 53833
// SetUnitDisplayNumber ( building , value ) ;
53819: LD_VAR 0 1
53823: PPUSH
53824: LD_VAR 0 7
53828: PPUSH
53829: CALL_OW 505
// if value <= 0 then
53833: LD_VAR 0 7
53837: PUSH
53838: LD_INT 0
53840: LESSEQUAL
53841: IFFALSE 53890
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
53843: LD_EXP 41
53847: PUSH
53848: LD_VAR 0 6
53852: ARRAY
53853: PUSH
53854: LD_INT 1
53856: ARRAY
53857: PPUSH
53858: LD_EXP 41
53862: PUSH
53863: LD_VAR 0 6
53867: ARRAY
53868: PUSH
53869: LD_INT 2
53871: ARRAY
53872: PPUSH
53873: CALL_OW 63
// KillUnit ( building ) ;
53877: LD_VAR 0 1
53881: PPUSH
53882: CALL_OW 66
// exit ;
53886: POP
53887: POP
53888: GO 53894
// end ; end ; end ;
53890: GO 53675
53892: POP
53893: POP
// end ;
53894: LD_VAR 0 5
53898: RET
// export function Multiplayer_VehicleConstructionStarted ( factory , chassis , engine , control , weapon ) ; var side ; begin
53899: LD_INT 0
53901: PPUSH
53902: PPUSH
// side := GetSide ( factory ) ;
53903: LD_ADDR_VAR 0 7
53907: PUSH
53908: LD_VAR 0 1
53912: PPUSH
53913: CALL_OW 255
53917: ST_TO_ADDR
// if weapon = ar_miner and FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , ar_miner ] ] ) > 0 then
53918: LD_VAR 0 5
53922: PUSH
53923: LD_INT 81
53925: EQUAL
53926: IFFALSE 53964
53928: PUSH
53929: LD_INT 22
53931: PUSH
53932: LD_VAR 0 7
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 34
53943: PUSH
53944: LD_INT 81
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PPUSH
53955: CALL_OW 69
53959: PUSH
53960: LD_INT 0
53962: GREATER
53963: AND
53964: IFFALSE 53997
// begin ComCancel ( factory ) ;
53966: LD_VAR 0 1
53970: PPUSH
53971: CALL_OW 127
// if side = your_side then
53975: LD_VAR 0 7
53979: PUSH
53980: LD_OWVAR 2
53984: EQUAL
53985: IFFALSE 53997
// HintSpec ( VehLimit , 2 ) ;
53987: LD_STRING VehLimit
53989: PPUSH
53990: LD_INT 2
53992: PPUSH
53993: CALL_OW 338
// end ; end ;
53997: LD_VAR 0 6
54001: RET
// export function Multiplayer_VehicleCaptured ( newId , oldId , oldSide , unit ) ; var i , j ; begin
54002: LD_INT 0
54004: PPUSH
54005: PPUSH
54006: PPUSH
// if GetWeapon ( newId ) = ar_miner and GetControl ( newId ) = control_manual then
54007: LD_VAR 0 1
54011: PPUSH
54012: CALL_OW 264
54016: PUSH
54017: LD_INT 81
54019: EQUAL
54020: IFFALSE 54037
54022: PUSH
54023: LD_VAR 0 1
54027: PPUSH
54028: CALL_OW 263
54032: PUSH
54033: LD_INT 1
54035: EQUAL
54036: AND
54037: IFFALSE 54317
// begin for i := 1 to Count ( minersList ) do
54039: LD_ADDR_VAR 0 6
54043: PUSH
54044: DOUBLE
54045: LD_INT 1
54047: DEC
54048: ST_TO_ADDR
54049: LD_EXP 56
54053: PPUSH
54054: CALL 5233 0 1
54058: PUSH
54059: FOR_TO
54060: IFFALSE 54178
// begin if minersList [ i ] = oldId then
54062: LD_EXP 56
54066: PUSH
54067: LD_VAR 0 6
54071: ARRAY
54072: PUSH
54073: LD_VAR 0 2
54077: EQUAL
54078: IFFALSE 54176
// begin for j := 1 to minerMinesList [ i ] do
54080: LD_ADDR_VAR 0 7
54084: PUSH
54085: DOUBLE
54086: LD_INT 1
54088: DEC
54089: ST_TO_ADDR
54090: LD_EXP 57
54094: PUSH
54095: LD_VAR 0 6
54099: ARRAY
54100: PUSH
54101: FOR_TO
54102: IFFALSE 54152
// RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54104: LD_EXP 57
54108: PUSH
54109: LD_VAR 0 6
54113: ARRAY
54114: PUSH
54115: LD_VAR 0 7
54119: ARRAY
54120: PUSH
54121: LD_INT 1
54123: ARRAY
54124: PPUSH
54125: LD_EXP 57
54129: PUSH
54130: LD_VAR 0 6
54134: ARRAY
54135: PUSH
54136: LD_VAR 0 7
54140: ARRAY
54141: PUSH
54142: LD_INT 2
54144: ARRAY
54145: PPUSH
54146: CALL_OW 612
54150: GO 54101
54152: POP
54153: POP
// minerMinesList := Delete ( minerMinesList , i ) ;
54154: LD_ADDR_EXP 57
54158: PUSH
54159: LD_EXP 57
54163: PPUSH
54164: LD_VAR 0 6
54168: PPUSH
54169: CALL_OW 3
54173: ST_TO_ADDR
// break ;
54174: GO 54178
// end ; end ;
54176: GO 54059
54178: POP
54179: POP
// minersList := minersList diff oldId ;
54180: LD_ADDR_EXP 56
54184: PUSH
54185: LD_EXP 56
54189: PUSH
54190: LD_VAR 0 2
54194: DIFF
54195: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_weapon , ar_miner ] ] ) > 1 then
54196: LD_INT 22
54198: PUSH
54199: LD_VAR 0 4
54203: PPUSH
54204: CALL_OW 255
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 34
54215: PUSH
54216: LD_INT 81
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PPUSH
54227: CALL_OW 69
54231: PUSH
54232: LD_INT 1
54234: GREATER
54235: IFFALSE 54262
// begin ComExit ( unit ) ;
54237: LD_VAR 0 4
54241: PPUSH
54242: CALL 41607 0 1
// SetSide ( newId , oldSide ) ;
54246: LD_VAR 0 1
54250: PPUSH
54251: LD_VAR 0 3
54255: PPUSH
54256: CALL_OW 235
// exit ;
54260: GO 54317
// end ; minersList := Replace ( minersList , minersList + 1 , newId ) ;
54262: LD_ADDR_EXP 56
54266: PUSH
54267: LD_EXP 56
54271: PPUSH
54272: LD_EXP 56
54276: PUSH
54277: LD_INT 1
54279: PLUS
54280: PPUSH
54281: LD_VAR 0 1
54285: PPUSH
54286: CALL_OW 1
54290: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
54291: LD_ADDR_EXP 57
54295: PUSH
54296: LD_EXP 57
54300: PPUSH
54301: LD_EXP 57
54305: PUSH
54306: LD_INT 1
54308: PLUS
54309: PPUSH
54310: EMPTY
54311: PPUSH
54312: CALL_OW 1
54316: ST_TO_ADDR
// end ; end ; end_of_file
54317: LD_VAR 0 5
54321: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
54322: LD_EXP 37
54326: IFFALSE 54334
54328: PUSH
54329: CALL 54544 0 0
54333: AND
54334: IFFALSE 54342
54336: PUSH
54337: LD_OWVAR 4
54341: AND
54342: IFFALSE 54541
54344: GO 54346
54346: DISABLE
54347: LD_INT 0
54349: PPUSH
54350: PPUSH
// begin canWin := false ;
54351: LD_ADDR_VAR 0 2
54355: PUSH
54356: LD_INT 0
54358: ST_TO_ADDR
// if not HasPower ( your_side ) then
54359: LD_OWVAR 2
54363: PPUSH
54364: CALL 54586 0 1
54368: NOT
54369: IFFALSE 54380
// begin Multiplayer_Loose_Message ;
54371: CALL_OW 521
// enable ( mpLose ) ;
54375: LD_INT 102
54377: ENABLE_MARKED
// end else
54378: GO 54541
// begin canWin := true ;
54380: LD_ADDR_VAR 0 2
54384: PUSH
54385: LD_INT 1
54387: ST_TO_ADDR
// for i := 1 to 8 do
54388: LD_ADDR_VAR 0 1
54392: PUSH
54393: DOUBLE
54394: LD_INT 1
54396: DEC
54397: ST_TO_ADDR
54398: LD_INT 8
54400: PUSH
54401: FOR_TO
54402: IFFALSE 54527
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54404: LD_EXP 5
54408: PUSH
54409: LD_VAR 0 1
54413: ARRAY
54414: IFFALSE 54427
54416: PUSH
54417: LD_VAR 0 1
54421: PPUSH
54422: CALL_OW 108
54426: AND
54427: IFFALSE 54441
54429: PUSH
54430: LD_VAR 0 1
54434: PUSH
54435: LD_OWVAR 2
54439: NONEQUAL
54440: AND
54441: IFFALSE 54525
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54443: LD_EXP 6
54447: PUSH
54448: LD_VAR 0 1
54452: ARRAY
54453: NOT
54454: IFTRUE 54502
54456: PUSH
54457: LD_EXP 6
54461: PUSH
54462: LD_VAR 0 1
54466: ARRAY
54467: PUSH
54468: LD_EXP 6
54472: PUSH
54473: LD_OWVAR 2
54477: ARRAY
54478: NONEQUAL
54479: IFFALSE 54501
54481: PUSH
54482: LD_OWVAR 2
54486: PPUSH
54487: LD_VAR 0 1
54491: PPUSH
54492: CALL_OW 81
54496: PUSH
54497: LD_INT 1
54499: NONEQUAL
54500: AND
54501: OR
54502: IFFALSE 54525
// if HasPower ( i ) then
54504: LD_VAR 0 1
54508: PPUSH
54509: CALL 54586 0 1
54513: IFFALSE 54525
// begin canWin := false ;
54515: LD_ADDR_VAR 0 2
54519: PUSH
54520: LD_INT 0
54522: ST_TO_ADDR
// break ;
54523: GO 54527
// end ;
54525: GO 54401
54527: POP
54528: POP
// if canWin then
54529: LD_VAR 0 2
54533: IFFALSE 54540
// enable ( mpWin ) else
54535: LD_INT 101
54537: ENABLE_MARKED
54538: GO 54541
// enable ;
54540: ENABLE
// end ; end ;
54541: PPOPN 2
54543: END
// function CanWinLoose ; begin
54544: LD_INT 0
54546: PPUSH
// result := true ;
54547: LD_ADDR_VAR 0 1
54551: PUSH
54552: LD_INT 1
54554: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54555: CALL_OW 531
54559: IFFALSE 54571
54561: PUSH
54562: CALL_OW 519
54566: PUSH
54567: LD_INT 1
54569: GREATER
54570: AND
54571: IFFALSE 54581
// result := false ;
54573: LD_ADDR_VAR 0 1
54577: PUSH
54578: LD_INT 0
54580: ST_TO_ADDR
// end ;
54581: LD_VAR 0 1
54585: RET
// function HasPower ( i ) ; begin
54586: LD_INT 0
54588: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
54589: LD_ADDR_VAR 0 2
54593: PUSH
54594: LD_INT 22
54596: PUSH
54597: LD_VAR 0 1
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 2
54608: PUSH
54609: LD_INT 21
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 33
54621: PUSH
54622: LD_INT 3
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 33
54631: PUSH
54632: LD_INT 5
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PPUSH
54649: CALL_OW 69
54653: ST_TO_ADDR
// end ; end_of_file
54654: LD_VAR 0 2
54658: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
54659: LD_EXP 37
54663: IFFALSE 54706
54665: GO 54667
54667: DISABLE
54668: LD_INT 0
54670: PPUSH
// begin for i := 1 to 8 do
54671: LD_ADDR_VAR 0 1
54675: PUSH
54676: DOUBLE
54677: LD_INT 1
54679: DEC
54680: ST_TO_ADDR
54681: LD_INT 8
54683: PUSH
54684: FOR_TO
54685: IFFALSE 54704
// SetRestrict ( b_depot , i , state_disabled ) ;
54687: LD_INT 0
54689: PPUSH
54690: LD_VAR 0 1
54694: PPUSH
54695: LD_INT 0
54697: PPUSH
54698: CALL_OW 324
54702: GO 54684
54704: POP
54705: POP
// end ;
54706: PPOPN 1
54708: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
54709: LD_EXP 37
54713: IFFALSE 54721
54715: PUSH
54716: CALL 54931 0 0
54720: AND
54721: IFFALSE 54729
54723: PUSH
54724: LD_OWVAR 4
54728: AND
54729: IFFALSE 54928
54731: GO 54733
54733: DISABLE
54734: LD_INT 0
54736: PPUSH
54737: PPUSH
// begin canWin := false ;
54738: LD_ADDR_VAR 0 2
54742: PUSH
54743: LD_INT 0
54745: ST_TO_ADDR
// if not HasPower ( your_side ) then
54746: LD_OWVAR 2
54750: PPUSH
54751: CALL 54973 0 1
54755: NOT
54756: IFFALSE 54767
// begin Multiplayer_Loose_Message ;
54758: CALL_OW 521
// enable ( mpLose ) ;
54762: LD_INT 102
54764: ENABLE_MARKED
// end else
54765: GO 54928
// begin canWin := true ;
54767: LD_ADDR_VAR 0 2
54771: PUSH
54772: LD_INT 1
54774: ST_TO_ADDR
// for i := 1 to 8 do
54775: LD_ADDR_VAR 0 1
54779: PUSH
54780: DOUBLE
54781: LD_INT 1
54783: DEC
54784: ST_TO_ADDR
54785: LD_INT 8
54787: PUSH
54788: FOR_TO
54789: IFFALSE 54914
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54791: LD_EXP 5
54795: PUSH
54796: LD_VAR 0 1
54800: ARRAY
54801: IFFALSE 54814
54803: PUSH
54804: LD_VAR 0 1
54808: PPUSH
54809: CALL_OW 108
54813: AND
54814: IFFALSE 54828
54816: PUSH
54817: LD_VAR 0 1
54821: PUSH
54822: LD_OWVAR 2
54826: NONEQUAL
54827: AND
54828: IFFALSE 54912
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
54830: LD_EXP 6
54834: PUSH
54835: LD_VAR 0 1
54839: ARRAY
54840: NOT
54841: IFTRUE 54889
54843: PUSH
54844: LD_EXP 6
54848: PUSH
54849: LD_VAR 0 1
54853: ARRAY
54854: PUSH
54855: LD_EXP 6
54859: PUSH
54860: LD_OWVAR 2
54864: ARRAY
54865: NONEQUAL
54866: IFFALSE 54888
54868: PUSH
54869: LD_OWVAR 2
54873: PPUSH
54874: LD_VAR 0 1
54878: PPUSH
54879: CALL_OW 81
54883: PUSH
54884: LD_INT 1
54886: NONEQUAL
54887: AND
54888: OR
54889: IFFALSE 54912
// if HasPower ( i ) then
54891: LD_VAR 0 1
54895: PPUSH
54896: CALL 54973 0 1
54900: IFFALSE 54912
// begin canWin := false ;
54902: LD_ADDR_VAR 0 2
54906: PUSH
54907: LD_INT 0
54909: ST_TO_ADDR
// break ;
54910: GO 54914
// end ;
54912: GO 54788
54914: POP
54915: POP
// if canWin then
54916: LD_VAR 0 2
54920: IFFALSE 54927
// enable ( mpWin ) else
54922: LD_INT 101
54924: ENABLE_MARKED
54925: GO 54928
// enable ;
54927: ENABLE
// end ; end ;
54928: PPOPN 2
54930: END
// function CanWinLoose ; begin
54931: LD_INT 0
54933: PPUSH
// result := true ;
54934: LD_ADDR_VAR 0 1
54938: PUSH
54939: LD_INT 1
54941: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
54942: CALL_OW 531
54946: IFFALSE 54958
54948: PUSH
54949: CALL_OW 519
54953: PUSH
54954: LD_INT 1
54956: GREATER
54957: AND
54958: IFFALSE 54968
// result := false ;
54960: LD_ADDR_VAR 0 1
54964: PUSH
54965: LD_INT 0
54967: ST_TO_ADDR
// end ;
54968: LD_VAR 0 1
54972: RET
// function HasPower ( i ) ; begin
54973: LD_INT 0
54975: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
54976: LD_INT 22
54978: PUSH
54979: LD_VAR 0 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: PUSH
54991: LD_INT 30
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 30
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PPUSH
55020: CALL_OW 69
55024: NOT
55025: IFFALSE 55029
// exit ;
55027: GO 55094
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55029: LD_ADDR_VAR 0 2
55033: PUSH
55034: LD_INT 22
55036: PUSH
55037: LD_VAR 0 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 21
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 33
55061: PUSH
55062: LD_INT 3
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 33
55071: PUSH
55072: LD_INT 5
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PPUSH
55089: CALL_OW 69
55093: ST_TO_ADDR
// end ; end_of_file
55094: LD_VAR 0 2
55098: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
55099: LD_EXP 37
55103: IFFALSE 55442
55105: GO 55107
55107: DISABLE
55108: LD_INT 0
55110: PPUSH
55111: PPUSH
55112: PPUSH
// begin mpKingPoints := [ ] ;
55113: LD_ADDR_EXP 48
55117: PUSH
55118: EMPTY
55119: ST_TO_ADDR
// if mpTeamGame then
55120: LD_EXP 9
55124: IFFALSE 55178
// begin for i := 1 to Count ( mpTeams ) do
55126: LD_ADDR_VAR 0 1
55130: PUSH
55131: DOUBLE
55132: LD_INT 1
55134: DEC
55135: ST_TO_ADDR
55136: LD_EXP 8
55140: PPUSH
55141: CALL 5233 0 1
55145: PUSH
55146: FOR_TO
55147: IFFALSE 55174
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55149: LD_ADDR_EXP 48
55153: PUSH
55154: LD_EXP 48
55158: PPUSH
55159: LD_VAR 0 1
55163: PPUSH
55164: LD_INT 0
55166: PPUSH
55167: CALL_OW 1
55171: ST_TO_ADDR
55172: GO 55146
55174: POP
55175: POP
// end else
55176: GO 55221
// begin for i := 1 to 8 do
55178: LD_ADDR_VAR 0 1
55182: PUSH
55183: DOUBLE
55184: LD_INT 1
55186: DEC
55187: ST_TO_ADDR
55188: LD_INT 8
55190: PUSH
55191: FOR_TO
55192: IFFALSE 55219
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
55194: LD_ADDR_EXP 48
55198: PUSH
55199: LD_EXP 48
55203: PPUSH
55204: LD_VAR 0 1
55208: PPUSH
55209: LD_INT 0
55211: PPUSH
55212: CALL_OW 1
55216: ST_TO_ADDR
55217: GO 55191
55219: POP
55220: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
55221: LD_ADDR_VAR 0 3
55225: PUSH
55226: LD_INT 73
55228: PPUSH
55229: LD_INT 0
55231: PPUSH
55232: CALL_OW 517
55236: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55237: LD_ADDR_VAR 0 1
55241: PUSH
55242: DOUBLE
55243: LD_INT 1
55245: DEC
55246: ST_TO_ADDR
55247: LD_VAR 0 3
55251: PUSH
55252: LD_INT 1
55254: ARRAY
55255: PUSH
55256: FOR_TO
55257: IFFALSE 55324
// for j := 1 to 8 do
55259: LD_ADDR_VAR 0 2
55263: PUSH
55264: DOUBLE
55265: LD_INT 1
55267: DEC
55268: ST_TO_ADDR
55269: LD_INT 8
55271: PUSH
55272: FOR_TO
55273: IFFALSE 55320
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
55275: LD_VAR 0 3
55279: PUSH
55280: LD_INT 1
55282: ARRAY
55283: PUSH
55284: LD_VAR 0 1
55288: ARRAY
55289: PPUSH
55290: LD_VAR 0 3
55294: PUSH
55295: LD_INT 2
55297: ARRAY
55298: PUSH
55299: LD_VAR 0 1
55303: ARRAY
55304: PPUSH
55305: LD_VAR 0 2
55309: PPUSH
55310: LD_INT 12
55312: NEG
55313: PPUSH
55314: CALL_OW 330
55318: GO 55272
55320: POP
55321: POP
55322: GO 55256
55324: POP
55325: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
55326: LD_EXP 32
55330: PPUSH
55331: LD_INT 1
55333: PPUSH
55334: CALL_OW 424
// UpdateCounter ;
55338: CALL 55946 0 0
// repeat wait ( 0 0$1 ) ;
55342: LD_INT 35
55344: PPUSH
55345: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55349: LD_ADDR_VAR 0 3
55353: PUSH
55354: LD_EXP 32
55358: PPUSH
55359: LD_INT 3
55361: PUSH
55362: LD_INT 57
55364: PUSH
55365: EMPTY
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 50
55374: PUSH
55375: EMPTY
55376: LIST
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: LD_INT 30
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 30
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: LIST
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: PPUSH
55411: CALL_OW 70
55415: ST_TO_ADDR
// if not tmp then
55416: LD_VAR 0 3
55420: NOT
55421: IFFALSE 55425
// continue ;
55423: GO 55342
// AddPoints ( tmp ) ;
55425: LD_VAR 0 3
55429: PPUSH
55430: CALL 55624 0 1
// UpdateCounter ;
55434: CALL 55946 0 0
// until false ;
55438: LD_INT 0
55440: IFFALSE 55342
// end ;
55442: PPOPN 3
55444: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
55445: LD_EXP 37
55449: IFFALSE 55457
55451: PUSH
55452: LD_EXP 35
55456: AND
55457: IFFALSE 55621
55459: GO 55461
55461: DISABLE
55462: LD_INT 0
55464: PPUSH
55465: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
55466: LD_ADDR_VAR 0 2
55470: PUSH
55471: LD_INT 73
55473: PPUSH
55474: LD_INT 0
55476: PPUSH
55477: CALL_OW 517
55481: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
55482: LD_ADDR_VAR 0 1
55486: PUSH
55487: DOUBLE
55488: LD_INT 1
55490: DEC
55491: ST_TO_ADDR
55492: LD_VAR 0 2
55496: PUSH
55497: LD_INT 1
55499: ARRAY
55500: PUSH
55501: FOR_TO
55502: IFFALSE 55543
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
55504: LD_VAR 0 2
55508: PUSH
55509: LD_INT 1
55511: ARRAY
55512: PUSH
55513: LD_VAR 0 1
55517: ARRAY
55518: PPUSH
55519: LD_VAR 0 2
55523: PUSH
55524: LD_INT 2
55526: ARRAY
55527: PUSH
55528: LD_VAR 0 1
55532: ARRAY
55533: PPUSH
55534: LD_INT 125
55536: PPUSH
55537: CALL_OW 495
55541: GO 55501
55543: POP
55544: POP
// repeat wait ( mpEmissions ) ;
55545: LD_EXP 35
55549: PPUSH
55550: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
55554: LD_ADDR_VAR 0 1
55558: PUSH
55559: DOUBLE
55560: LD_INT 1
55562: DEC
55563: ST_TO_ADDR
55564: LD_VAR 0 2
55568: PUSH
55569: LD_INT 1
55571: ARRAY
55572: PUSH
55573: FOR_TO
55574: IFFALSE 55615
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
55576: LD_VAR 0 2
55580: PUSH
55581: LD_INT 1
55583: ARRAY
55584: PUSH
55585: LD_VAR 0 1
55589: ARRAY
55590: PPUSH
55591: LD_VAR 0 2
55595: PUSH
55596: LD_INT 2
55598: ARRAY
55599: PUSH
55600: LD_VAR 0 1
55604: ARRAY
55605: PPUSH
55606: LD_INT 15
55608: PPUSH
55609: CALL_OW 495
55613: GO 55573
55615: POP
55616: POP
// until false ;
55617: LD_INT 0
55619: IFFALSE 55545
// end ;
55621: PPOPN 2
55623: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
55624: LD_INT 0
55626: PPUSH
55627: PPUSH
55628: PPUSH
55629: PPUSH
55630: PPUSH
// if mpTeamGame then
55631: LD_EXP 9
55635: IFFALSE 55832
// begin first := depots [ 1 ] ;
55637: LD_ADDR_VAR 0 4
55641: PUSH
55642: LD_VAR 0 1
55646: PUSH
55647: LD_INT 1
55649: ARRAY
55650: ST_TO_ADDR
// side := GetSide ( first ) ;
55651: LD_ADDR_VAR 0 6
55655: PUSH
55656: LD_VAR 0 4
55660: PPUSH
55661: CALL_OW 255
55665: ST_TO_ADDR
// for i := 1 to mpTeams do
55666: LD_ADDR_VAR 0 3
55670: PUSH
55671: DOUBLE
55672: LD_INT 1
55674: DEC
55675: ST_TO_ADDR
55676: LD_EXP 8
55680: PUSH
55681: FOR_TO
55682: IFFALSE 55716
// if side in mpTeams [ i ] then
55684: LD_VAR 0 6
55688: PUSH
55689: LD_EXP 8
55693: PUSH
55694: LD_VAR 0 3
55698: ARRAY
55699: IN
55700: IFFALSE 55714
// begin team := i ;
55702: LD_ADDR_VAR 0 5
55706: PUSH
55707: LD_VAR 0 3
55711: ST_TO_ADDR
// break ;
55712: GO 55716
// end ;
55714: GO 55681
55716: POP
55717: POP
// if not team then
55718: LD_VAR 0 5
55722: NOT
55723: IFFALSE 55727
// exit ;
55725: GO 55941
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55727: LD_EXP 32
55731: PPUSH
55732: LD_INT 81
55734: PUSH
55735: LD_VAR 0 6
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PPUSH
55744: CALL_OW 70
55748: IFFALSE 55752
// exit ;
55750: GO 55941
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
55752: LD_ADDR_EXP 48
55756: PUSH
55757: LD_EXP 48
55761: PPUSH
55762: LD_VAR 0 5
55766: PPUSH
55767: LD_EXP 48
55771: PUSH
55772: LD_VAR 0 5
55776: ARRAY
55777: PUSH
55778: LD_INT 1
55780: PLUS
55781: PPUSH
55782: CALL_OW 1
55786: ST_TO_ADDR
// for i in mpTeams [ team ] do
55787: LD_ADDR_VAR 0 3
55791: PUSH
55792: LD_EXP 8
55796: PUSH
55797: LD_VAR 0 5
55801: ARRAY
55802: PUSH
55803: FOR_IN
55804: IFFALSE 55828
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
55806: LD_VAR 0 3
55810: PPUSH
55811: LD_EXP 48
55815: PUSH
55816: LD_VAR 0 5
55820: ARRAY
55821: PPUSH
55822: CALL_OW 506
55826: GO 55803
55828: POP
55829: POP
// end else
55830: GO 55941
// begin first := depots [ 1 ] ;
55832: LD_ADDR_VAR 0 4
55836: PUSH
55837: LD_VAR 0 1
55841: PUSH
55842: LD_INT 1
55844: ARRAY
55845: ST_TO_ADDR
// side := GetSide ( first ) ;
55846: LD_ADDR_VAR 0 6
55850: PUSH
55851: LD_VAR 0 4
55855: PPUSH
55856: CALL_OW 255
55860: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
55861: LD_EXP 32
55865: PPUSH
55866: LD_INT 81
55868: PUSH
55869: LD_VAR 0 6
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PPUSH
55878: CALL_OW 70
55882: IFFALSE 55886
// exit ;
55884: GO 55941
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
55886: LD_ADDR_EXP 48
55890: PUSH
55891: LD_EXP 48
55895: PPUSH
55896: LD_VAR 0 6
55900: PPUSH
55901: LD_EXP 48
55905: PUSH
55906: LD_VAR 0 6
55910: ARRAY
55911: PUSH
55912: LD_INT 1
55914: PLUS
55915: PPUSH
55916: CALL_OW 1
55920: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
55921: LD_VAR 0 6
55925: PPUSH
55926: LD_EXP 48
55930: PUSH
55931: LD_VAR 0 6
55935: ARRAY
55936: PPUSH
55937: CALL_OW 506
// end ; end ;
55941: LD_VAR 0 2
55945: RET
// function UpdateCounter ; var i ; begin
55946: LD_INT 0
55948: PPUSH
55949: PPUSH
// result := [ ] ;
55950: LD_ADDR_VAR 0 1
55954: PUSH
55955: EMPTY
55956: ST_TO_ADDR
// if mpTeamGame then
55957: LD_EXP 9
55961: IFFALSE 56028
// begin for i := 1 to mpTeams do
55963: LD_ADDR_VAR 0 2
55967: PUSH
55968: DOUBLE
55969: LD_INT 1
55971: DEC
55972: ST_TO_ADDR
55973: LD_EXP 8
55977: PUSH
55978: FOR_TO
55979: IFFALSE 56024
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
55981: LD_ADDR_VAR 0 1
55985: PUSH
55986: LD_VAR 0 1
55990: PUSH
55991: LD_STRING #KingoftheHill-Team
55993: PUSH
55994: LD_VAR 0 2
55998: PUSH
55999: LD_EXP 48
56003: PUSH
56004: LD_VAR 0 2
56008: ARRAY
56009: PUSH
56010: LD_EXP 33
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: ADD
56021: ST_TO_ADDR
56022: GO 55978
56024: POP
56025: POP
// end else
56026: GO 56101
// begin for i := 1 to 8 do
56028: LD_ADDR_VAR 0 2
56032: PUSH
56033: DOUBLE
56034: LD_INT 1
56036: DEC
56037: ST_TO_ADDR
56038: LD_INT 8
56040: PUSH
56041: FOR_TO
56042: IFFALSE 56099
// if mpSidePositions [ i ] then
56044: LD_EXP 5
56048: PUSH
56049: LD_VAR 0 2
56053: ARRAY
56054: IFFALSE 56097
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
56056: LD_ADDR_VAR 0 1
56060: PUSH
56061: LD_VAR 0 1
56065: PUSH
56066: LD_STRING #KingoftheHill-Player
56068: PUSH
56069: LD_VAR 0 2
56073: PUSH
56074: LD_EXP 48
56078: PUSH
56079: LD_VAR 0 2
56083: ARRAY
56084: PUSH
56085: LD_EXP 33
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: ADD
56096: ST_TO_ADDR
56097: GO 56041
56099: POP
56100: POP
// end ; mpDisplayStrings := result ;
56101: LD_ADDR_EXP 36
56105: PUSH
56106: LD_VAR 0 1
56110: ST_TO_ADDR
// end ;
56111: LD_VAR 0 1
56115: RET
// export function HowMuchPointsKing ( side ) ; begin
56116: LD_INT 0
56118: PPUSH
// result := HowMuchPoints ( side ) ;
56119: LD_ADDR_VAR 0 2
56123: PUSH
56124: LD_VAR 0 1
56128: PPUSH
56129: CALL 56139 0 1
56133: ST_TO_ADDR
// end ;
56134: LD_VAR 0 2
56138: RET
// function HowMuchPoints ( side ) ; var i ; begin
56139: LD_INT 0
56141: PPUSH
56142: PPUSH
// if mpTeamGame then
56143: LD_EXP 9
56147: IFFALSE 56216
// begin for i := 1 to Count ( mpTeams ) do
56149: LD_ADDR_VAR 0 3
56153: PUSH
56154: DOUBLE
56155: LD_INT 1
56157: DEC
56158: ST_TO_ADDR
56159: LD_EXP 8
56163: PPUSH
56164: CALL 5233 0 1
56168: PUSH
56169: FOR_TO
56170: IFFALSE 56212
// begin if side in mpTeams [ i ] then
56172: LD_VAR 0 1
56176: PUSH
56177: LD_EXP 8
56181: PUSH
56182: LD_VAR 0 3
56186: ARRAY
56187: IN
56188: IFFALSE 56210
// begin result := mpKingPoints [ i ] ;
56190: LD_ADDR_VAR 0 2
56194: PUSH
56195: LD_EXP 48
56199: PUSH
56200: LD_VAR 0 3
56204: ARRAY
56205: ST_TO_ADDR
// exit ;
56206: POP
56207: POP
56208: GO 56232
// end ; end ;
56210: GO 56169
56212: POP
56213: POP
// end else
56214: GO 56232
// result := mpKingPoints [ side ] ;
56216: LD_ADDR_VAR 0 2
56220: PUSH
56221: LD_EXP 48
56225: PUSH
56226: LD_VAR 0 1
56230: ARRAY
56231: ST_TO_ADDR
// end ;
56232: LD_VAR 0 2
56236: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
56237: LD_EXP 37
56241: IFFALSE 56249
56243: PUSH
56244: CALL 56661 0 0
56248: AND
56249: IFFALSE 56257
56251: PUSH
56252: LD_OWVAR 4
56256: AND
56257: IFFALSE 56510
56259: GO 56261
56261: DISABLE
56262: LD_INT 0
56264: PPUSH
56265: PPUSH
// begin canWin := false ;
56266: LD_ADDR_VAR 0 2
56270: PUSH
56271: LD_INT 0
56273: ST_TO_ADDR
// if not HasPower ( your_side ) then
56274: LD_OWVAR 2
56278: PPUSH
56279: CALL 56703 0 1
56283: NOT
56284: IFFALSE 56295
// begin Multiplayer_Loose_Message ;
56286: CALL_OW 521
// enable ( mpLose ) ;
56290: LD_INT 102
56292: ENABLE_MARKED
// end else
56293: GO 56510
// begin if not EnemiesInGame then
56295: CALL 56513 0 0
56299: NOT
56300: IFFALSE 56307
// begin enable ( mpWin ) ;
56302: LD_INT 101
56304: ENABLE_MARKED
// exit ;
56305: GO 56510
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
56307: LD_ADDR_VAR 0 2
56311: PUSH
56312: LD_OWVAR 2
56316: PPUSH
56317: CALL 56139 0 1
56321: PUSH
56322: LD_EXP 33
56326: GREATEREQUAL
56327: IFFALSE 56340
56329: PUSH
56330: LD_OWVAR 2
56334: PPUSH
56335: CALL 56703 0 1
56339: AND
56340: ST_TO_ADDR
// for i := 1 to 8 do
56341: LD_ADDR_VAR 0 1
56345: PUSH
56346: DOUBLE
56347: LD_INT 1
56349: DEC
56350: ST_TO_ADDR
56351: LD_INT 8
56353: PUSH
56354: FOR_TO
56355: IFFALSE 56496
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
56357: LD_EXP 5
56361: PUSH
56362: LD_VAR 0 1
56366: ARRAY
56367: IFFALSE 56380
56369: PUSH
56370: LD_VAR 0 1
56374: PPUSH
56375: CALL_OW 108
56379: AND
56380: IFFALSE 56394
56382: PUSH
56383: LD_VAR 0 1
56387: PUSH
56388: LD_OWVAR 2
56392: NONEQUAL
56393: AND
56394: IFFALSE 56494
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56396: LD_EXP 6
56400: PUSH
56401: LD_VAR 0 1
56405: ARRAY
56406: NOT
56407: IFTRUE 56455
56409: PUSH
56410: LD_EXP 6
56414: PUSH
56415: LD_VAR 0 1
56419: ARRAY
56420: PUSH
56421: LD_EXP 6
56425: PUSH
56426: LD_OWVAR 2
56430: ARRAY
56431: NONEQUAL
56432: IFFALSE 56454
56434: PUSH
56435: LD_OWVAR 2
56439: PPUSH
56440: LD_VAR 0 1
56444: PPUSH
56445: CALL_OW 81
56449: PUSH
56450: LD_INT 1
56452: NONEQUAL
56453: AND
56454: OR
56455: IFFALSE 56494
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
56457: LD_VAR 0 1
56461: PPUSH
56462: CALL 56139 0 1
56466: PUSH
56467: LD_EXP 33
56471: GREATEREQUAL
56472: IFFALSE 56485
56474: PUSH
56475: LD_VAR 0 1
56479: PPUSH
56480: CALL 56703 0 1
56484: AND
56485: IFFALSE 56494
// begin enable ( mpLose ) ;
56487: LD_INT 102
56489: ENABLE_MARKED
// exit ;
56490: POP
56491: POP
56492: GO 56510
// end ;
56494: GO 56354
56496: POP
56497: POP
// if canWin then
56498: LD_VAR 0 2
56502: IFFALSE 56509
// enable ( mpWin ) else
56504: LD_INT 101
56506: ENABLE_MARKED
56507: GO 56510
// enable ;
56509: ENABLE
// end ; end ;
56510: PPOPN 2
56512: END
// function EnemiesInGame ; var i ; begin
56513: LD_INT 0
56515: PPUSH
56516: PPUSH
// result := false ;
56517: LD_ADDR_VAR 0 1
56521: PUSH
56522: LD_INT 0
56524: ST_TO_ADDR
// for i := 1 to 8 do
56525: LD_ADDR_VAR 0 2
56529: PUSH
56530: DOUBLE
56531: LD_INT 1
56533: DEC
56534: ST_TO_ADDR
56535: LD_INT 8
56537: PUSH
56538: FOR_TO
56539: IFFALSE 56654
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
56541: LD_VAR 0 2
56545: PUSH
56546: LD_OWVAR 2
56550: NONEQUAL
56551: IFFALSE 56564
56553: PUSH
56554: LD_VAR 0 2
56558: PPUSH
56559: CALL 56703 0 1
56563: AND
56564: IFFALSE 56577
56566: PUSH
56567: LD_VAR 0 2
56571: PPUSH
56572: CALL_OW 108
56576: AND
56577: IFFALSE 56652
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
56579: LD_EXP 6
56583: PUSH
56584: LD_VAR 0 2
56588: ARRAY
56589: NOT
56590: IFTRUE 56638
56592: PUSH
56593: LD_EXP 6
56597: PUSH
56598: LD_VAR 0 2
56602: ARRAY
56603: PUSH
56604: LD_EXP 6
56608: PUSH
56609: LD_OWVAR 2
56613: ARRAY
56614: NONEQUAL
56615: IFFALSE 56637
56617: PUSH
56618: LD_OWVAR 2
56622: PPUSH
56623: LD_VAR 0 2
56627: PPUSH
56628: CALL_OW 81
56632: PUSH
56633: LD_INT 1
56635: NONEQUAL
56636: AND
56637: OR
56638: IFFALSE 56652
// begin result := true ;
56640: LD_ADDR_VAR 0 1
56644: PUSH
56645: LD_INT 1
56647: ST_TO_ADDR
// exit ;
56648: POP
56649: POP
56650: GO 56656
// end ;
56652: GO 56538
56654: POP
56655: POP
// end ;
56656: LD_VAR 0 1
56660: RET
// function CanWinLoose ; begin
56661: LD_INT 0
56663: PPUSH
// result := true ;
56664: LD_ADDR_VAR 0 1
56668: PUSH
56669: LD_INT 1
56671: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
56672: CALL_OW 531
56676: IFFALSE 56688
56678: PUSH
56679: CALL_OW 519
56683: PUSH
56684: LD_INT 1
56686: GREATER
56687: AND
56688: IFFALSE 56698
// result := false ;
56690: LD_ADDR_VAR 0 1
56694: PUSH
56695: LD_INT 0
56697: ST_TO_ADDR
// end ;
56698: LD_VAR 0 1
56702: RET
// function HasPower ( i ) ; begin
56703: LD_INT 0
56705: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
56706: LD_ADDR_VAR 0 2
56710: PUSH
56711: LD_INT 22
56713: PUSH
56714: LD_VAR 0 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 21
56728: PUSH
56729: LD_INT 1
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 33
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 33
56748: PUSH
56749: LD_INT 5
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PPUSH
56766: CALL_OW 69
56770: ST_TO_ADDR
// end ; end_of_file end_of_file
56771: LD_VAR 0 2
56775: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
56776: LD_VAR 0 1
56780: PUSH
56781: LD_INT 200
56783: DOUBLE
56784: GREATEREQUAL
56785: IFFALSE 56793
56787: LD_INT 299
56789: DOUBLE
56790: LESSEQUAL
56791: IFTRUE 56795
56793: GO 56827
56795: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
56796: LD_VAR 0 1
56800: PPUSH
56801: LD_VAR 0 2
56805: PPUSH
56806: LD_VAR 0 3
56810: PPUSH
56811: LD_VAR 0 4
56815: PPUSH
56816: LD_VAR 0 5
56820: PPUSH
56821: CALL 57689 0 5
56825: GO 56904
56827: LD_INT 300
56829: DOUBLE
56830: GREATEREQUAL
56831: IFFALSE 56839
56833: LD_INT 399
56835: DOUBLE
56836: LESSEQUAL
56837: IFTRUE 56841
56839: GO 56903
56841: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
56842: LD_VAR 0 1
56846: PPUSH
56847: LD_VAR 0 2
56851: PPUSH
56852: LD_VAR 0 3
56856: PPUSH
56857: LD_VAR 0 4
56861: PPUSH
56862: LD_VAR 0 5
56866: PPUSH
56867: LD_VAR 0 6
56871: PPUSH
56872: LD_VAR 0 7
56876: PPUSH
56877: LD_VAR 0 8
56881: PPUSH
56882: LD_VAR 0 9
56886: PPUSH
56887: LD_VAR 0 10
56891: PPUSH
56892: LD_VAR 0 11
56896: PPUSH
56897: CALL 64110 0 11
56901: GO 56904
56903: POP
// end ;
56904: PPOPN 11
56906: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
56907: LD_VAR 0 1
56911: PPUSH
56912: LD_VAR 0 2
56916: PPUSH
56917: LD_VAR 0 3
56921: PPUSH
56922: LD_VAR 0 4
56926: PPUSH
56927: LD_VAR 0 5
56931: PPUSH
56932: CALL 56989 0 5
// end ; end_of_file
56936: PPOPN 5
56938: END
// export function SOS_UnitDestroyed ( un ) ; begin
56939: LD_INT 0
56941: PPUSH
// ComRadiation ( un ) ;
56942: LD_VAR 0 1
56946: PPUSH
56947: CALL 58109 0 1
// end ;
56951: LD_VAR 0 2
56955: RET
// export function SOS_UnitKamikazed ( un ) ; begin
56956: LD_INT 0
56958: PPUSH
// ComRadiation ( un ) ;
56959: LD_VAR 0 1
56963: PPUSH
56964: CALL 58109 0 1
// end ;
56968: LD_VAR 0 2
56972: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
56973: LD_INT 0
56975: PPUSH
// end ;
56976: LD_VAR 0 4
56980: RET
// export function SOS_Command ( cmd ) ; begin
56981: LD_INT 0
56983: PPUSH
// end ;
56984: LD_VAR 0 2
56988: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
56989: LD_INT 0
56991: PPUSH
// end ;
56992: LD_VAR 0 6
56996: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
56997: LD_INT 0
56999: PPUSH
57000: PPUSH
57001: PPUSH
57002: PPUSH
57003: PPUSH
// if not vehicle or not factory then
57004: LD_VAR 0 1
57008: NOT
57009: IFTRUE 57018
57011: PUSH
57012: LD_VAR 0 2
57016: NOT
57017: OR
57018: IFFALSE 57022
// exit ;
57020: GO 57684
// weapon := GetWeapon ( vehicle ) ;
57022: LD_ADDR_VAR 0 7
57026: PUSH
57027: LD_VAR 0 1
57031: PPUSH
57032: CALL_OW 264
57036: ST_TO_ADDR
// if weapon = ar_miner then
57037: LD_VAR 0 7
57041: PUSH
57042: LD_INT 81
57044: EQUAL
57045: IFFALSE 57102
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
57047: LD_ADDR_EXP 56
57051: PUSH
57052: LD_EXP 56
57056: PPUSH
57057: LD_EXP 56
57061: PUSH
57062: LD_INT 1
57064: PLUS
57065: PPUSH
57066: LD_VAR 0 1
57070: PPUSH
57071: CALL_OW 1
57075: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
57076: LD_ADDR_EXP 57
57080: PUSH
57081: LD_EXP 57
57085: PPUSH
57086: LD_EXP 57
57090: PUSH
57091: LD_INT 1
57093: PLUS
57094: PPUSH
57095: EMPTY
57096: PPUSH
57097: CALL_OW 1
57101: ST_TO_ADDR
// end ; if not factoryWaypoints then
57102: LD_EXP 59
57106: NOT
57107: IFFALSE 57111
// exit ;
57109: GO 57684
// for i := 1 to Count ( factoryWaypoints ) do
57111: LD_ADDR_VAR 0 4
57115: PUSH
57116: DOUBLE
57117: LD_INT 1
57119: DEC
57120: ST_TO_ADDR
57121: LD_EXP 59
57125: PPUSH
57126: CALL 5233 0 1
57130: PUSH
57131: FOR_TO
57132: IFFALSE 57682
// if factoryWaypoints [ i ] [ 2 ] = factory then
57134: LD_EXP 59
57138: PUSH
57139: LD_VAR 0 4
57143: ARRAY
57144: PUSH
57145: LD_INT 2
57147: ARRAY
57148: PUSH
57149: LD_VAR 0 2
57153: EQUAL
57154: IFFALSE 57680
// begin if GetControl ( vehicle ) = control_manual then
57156: LD_VAR 0 1
57160: PPUSH
57161: CALL_OW 263
57165: PUSH
57166: LD_INT 1
57168: EQUAL
57169: IFFALSE 57533
// begin driver := IsDrivenBy ( vehicle ) ;
57171: LD_ADDR_VAR 0 5
57175: PUSH
57176: LD_VAR 0 1
57180: PPUSH
57181: CALL_OW 311
57185: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
57186: LD_VAR 0 5
57190: PUSH
57191: LD_EXP 60
57195: IN
57196: IFTRUE 57210
57198: PUSH
57199: LD_VAR 0 1
57203: PUSH
57204: LD_EXP 60
57208: IN
57209: OR
57210: IFFALSE 57216
// exit ;
57212: POP
57213: POP
57214: GO 57684
// if not HasTask ( driver ) then
57216: LD_VAR 0 5
57220: PPUSH
57221: CALL_OW 314
57225: NOT
57226: IFFALSE 57531
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
57228: LD_ADDR_EXP 60
57232: PUSH
57233: LD_EXP 60
57237: PPUSH
57238: LD_VAR 0 5
57242: PPUSH
57243: CALL 41209 0 2
57247: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
57248: LD_ADDR_EXP 60
57252: PUSH
57253: LD_EXP 60
57257: PPUSH
57258: LD_VAR 0 1
57262: PPUSH
57263: CALL 41209 0 2
57267: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57268: LD_ADDR_VAR 0 6
57272: PUSH
57273: LD_EXP 59
57277: PUSH
57278: LD_VAR 0 4
57282: ARRAY
57283: PUSH
57284: LD_INT 3
57286: ARRAY
57287: PPUSH
57288: LD_EXP 59
57292: PUSH
57293: LD_VAR 0 4
57297: ARRAY
57298: PUSH
57299: LD_INT 4
57301: ARRAY
57302: PPUSH
57303: CALL_OW 428
57307: ST_TO_ADDR
// if hex then
57308: LD_VAR 0 6
57312: IFFALSE 57330
// ComMoveUnit ( driver , hex ) else
57314: LD_VAR 0 5
57318: PPUSH
57319: LD_VAR 0 6
57323: PPUSH
57324: CALL_OW 112
57328: GO 57414
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
57330: LD_VAR 0 1
57334: PPUSH
57335: LD_EXP 59
57339: PUSH
57340: LD_VAR 0 4
57344: ARRAY
57345: PUSH
57346: LD_INT 3
57348: ARRAY
57349: PPUSH
57350: LD_EXP 59
57354: PUSH
57355: LD_VAR 0 4
57359: ARRAY
57360: PUSH
57361: LD_INT 4
57363: ARRAY
57364: PPUSH
57365: CALL_OW 297
57369: PUSH
57370: LD_INT 0
57372: GREATER
57373: IFFALSE 57414
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57375: LD_VAR 0 5
57379: PPUSH
57380: LD_EXP 59
57384: PUSH
57385: LD_VAR 0 4
57389: ARRAY
57390: PUSH
57391: LD_INT 3
57393: ARRAY
57394: PPUSH
57395: LD_EXP 59
57399: PUSH
57400: LD_VAR 0 4
57404: ARRAY
57405: PUSH
57406: LD_INT 4
57408: ARRAY
57409: PPUSH
57410: CALL_OW 111
// AddComExitVehicle ( driver ) ;
57414: LD_VAR 0 5
57418: PPUSH
57419: CALL_OW 181
// if Multiplayer then
57423: LD_OWVAR 4
57427: IFFALSE 57476
// begin repeat wait ( 10 ) ;
57429: LD_INT 10
57431: PPUSH
57432: CALL_OW 67
// until not IsInUnit ( driver ) ;
57436: LD_VAR 0 5
57440: PPUSH
57441: CALL_OW 310
57445: NOT
57446: IFFALSE 57429
// if not HasTask ( driver ) then
57448: LD_VAR 0 5
57452: PPUSH
57453: CALL_OW 314
57457: NOT
57458: IFFALSE 57474
// ComEnterUnit ( driver , factory ) ;
57460: LD_VAR 0 5
57464: PPUSH
57465: LD_VAR 0 2
57469: PPUSH
57470: CALL_OW 120
// end else
57474: GO 57490
// AddComEnterUnit ( driver , factory ) ;
57476: LD_VAR 0 5
57480: PPUSH
57481: LD_VAR 0 2
57485: PPUSH
57486: CALL_OW 180
// wait ( 0 0$1 ) ;
57490: LD_INT 35
57492: PPUSH
57493: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
57497: LD_ADDR_EXP 60
57501: PUSH
57502: LD_EXP 60
57506: PUSH
57507: LD_VAR 0 5
57511: DIFF
57512: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
57513: LD_ADDR_EXP 60
57517: PUSH
57518: LD_EXP 60
57522: PUSH
57523: LD_VAR 0 1
57527: DIFF
57528: ST_TO_ADDR
// break ;
57529: GO 57682
// end ; end else
57531: GO 57680
// if GetControl ( vehicle ) = control_remote then
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 263
57542: PUSH
57543: LD_INT 2
57545: EQUAL
57546: IFFALSE 57632
// begin wait ( 0 0$2 ) ;
57548: LD_INT 70
57550: PPUSH
57551: CALL_OW 67
// repeat wait ( 10 ) ;
57555: LD_INT 10
57557: PPUSH
57558: CALL_OW 67
// Connect ( vehicle ) ;
57562: LD_VAR 0 1
57566: PPUSH
57567: CALL 11511 0 1
// until IsControledBy ( vehicle ) ;
57571: LD_VAR 0 1
57575: PPUSH
57576: CALL_OW 312
57580: IFFALSE 57555
// wait ( 10 ) ;
57582: LD_INT 10
57584: PPUSH
57585: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: LD_EXP 59
57598: PUSH
57599: LD_VAR 0 4
57603: ARRAY
57604: PUSH
57605: LD_INT 3
57607: ARRAY
57608: PPUSH
57609: LD_EXP 59
57613: PUSH
57614: LD_VAR 0 4
57618: ARRAY
57619: PUSH
57620: LD_INT 4
57622: ARRAY
57623: PPUSH
57624: CALL_OW 111
// break ;
57628: GO 57682
// end else
57630: GO 57680
// begin wait ( 0 0$3 ) ;
57632: LD_INT 105
57634: PPUSH
57635: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_EXP 59
57648: PUSH
57649: LD_VAR 0 4
57653: ARRAY
57654: PUSH
57655: LD_INT 3
57657: ARRAY
57658: PPUSH
57659: LD_EXP 59
57663: PUSH
57664: LD_VAR 0 4
57668: ARRAY
57669: PUSH
57670: LD_INT 4
57672: ARRAY
57673: PPUSH
57674: CALL_OW 111
// break ;
57678: GO 57682
// end ; end ;
57680: GO 57131
57682: POP
57683: POP
// end ;
57684: LD_VAR 0 3
57688: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
57689: LD_INT 0
57691: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
57692: LD_VAR 0 1
57696: PUSH
57697: LD_INT 250
57699: EQUAL
57700: IFFALSE 57717
57702: PUSH
57703: LD_VAR 0 2
57707: PPUSH
57708: CALL_OW 264
57712: PUSH
57713: LD_INT 81
57715: EQUAL
57716: AND
57717: IFFALSE 57738
// MinerPlaceMine ( unit , x , y ) ;
57719: LD_VAR 0 2
57723: PPUSH
57724: LD_VAR 0 4
57728: PPUSH
57729: LD_VAR 0 5
57733: PPUSH
57734: CALL 61084 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
57738: LD_VAR 0 1
57742: PUSH
57743: LD_INT 251
57745: EQUAL
57746: IFFALSE 57763
57748: PUSH
57749: LD_VAR 0 2
57753: PPUSH
57754: CALL_OW 264
57758: PUSH
57759: LD_INT 81
57761: EQUAL
57762: AND
57763: IFFALSE 57784
// MinerDetonateMine ( unit , x , y ) ;
57765: LD_VAR 0 2
57769: PPUSH
57770: LD_VAR 0 4
57774: PPUSH
57775: LD_VAR 0 5
57779: PPUSH
57780: CALL 61491 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
57784: LD_VAR 0 1
57788: PUSH
57789: LD_INT 252
57791: EQUAL
57792: IFFALSE 57809
57794: PUSH
57795: LD_VAR 0 2
57799: PPUSH
57800: CALL_OW 264
57804: PUSH
57805: LD_INT 81
57807: EQUAL
57808: AND
57809: IFFALSE 57830
// MinerCreateMinefield ( unit , x , y ) ;
57811: LD_VAR 0 2
57815: PPUSH
57816: LD_VAR 0 4
57820: PPUSH
57821: LD_VAR 0 5
57825: PPUSH
57826: CALL 61723 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
57830: LD_VAR 0 1
57834: PUSH
57835: LD_INT 253
57837: EQUAL
57838: IFFALSE 57855
57840: PUSH
57841: LD_VAR 0 2
57845: PPUSH
57846: CALL_OW 257
57850: PUSH
57851: LD_INT 5
57853: EQUAL
57854: AND
57855: IFFALSE 57876
// ComBinocular ( unit , x , y ) ;
57857: LD_VAR 0 2
57861: PPUSH
57862: LD_VAR 0 4
57866: PPUSH
57867: LD_VAR 0 5
57871: PPUSH
57872: CALL 62098 0 3
// if selectedUnit then
57876: LD_VAR 0 3
57880: IFFALSE 57940
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
57882: LD_VAR 0 1
57886: PUSH
57887: LD_INT 254
57889: EQUAL
57890: IFFALSE 57907
57892: PUSH
57893: LD_VAR 0 2
57897: PPUSH
57898: CALL_OW 264
57902: PUSH
57903: LD_INT 99
57905: EQUAL
57906: AND
57907: IFFALSE 57924
57909: PUSH
57910: LD_VAR 0 3
57914: PPUSH
57915: CALL_OW 263
57919: PUSH
57920: LD_INT 3
57922: EQUAL
57923: AND
57924: IFFALSE 57940
// HackDestroyVehicle ( unit , selectedUnit ) ;
57926: LD_VAR 0 2
57930: PPUSH
57931: LD_VAR 0 3
57935: PPUSH
57936: CALL 60274 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
57940: LD_VAR 0 1
57944: PUSH
57945: LD_INT 255
57947: EQUAL
57948: IFFALSE 57972
57950: PUSH
57951: LD_VAR 0 2
57955: PPUSH
57956: CALL_OW 264
57960: PUSH
57961: LD_INT 14
57963: PUSH
57964: LD_INT 53
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: IN
57971: AND
57972: IFFALSE 57990
57974: PUSH
57975: LD_VAR 0 4
57979: PPUSH
57980: LD_VAR 0 5
57984: PPUSH
57985: CALL_OW 488
57989: AND
57990: IFFALSE 58014
// CutTreeXYR ( unit , x , y , 12 ) ;
57992: LD_VAR 0 2
57996: PPUSH
57997: LD_VAR 0 4
58001: PPUSH
58002: LD_VAR 0 5
58006: PPUSH
58007: LD_INT 12
58009: PPUSH
58010: CALL 58205 0 4
// if cmd = 256 then
58014: LD_VAR 0 1
58018: PUSH
58019: LD_INT 256
58021: EQUAL
58022: IFFALSE 58043
// SetFactoryWaypoint ( unit , x , y ) ;
58024: LD_VAR 0 2
58028: PPUSH
58029: LD_VAR 0 4
58033: PPUSH
58034: LD_VAR 0 5
58038: PPUSH
58039: CALL 64118 0 3
// if cmd = 257 then
58043: LD_VAR 0 1
58047: PUSH
58048: LD_INT 257
58050: EQUAL
58051: IFFALSE 58072
// SetWarehouseGatheringPoint ( unit , x , y ) ;
58053: LD_VAR 0 2
58057: PPUSH
58058: LD_VAR 0 4
58062: PPUSH
58063: LD_VAR 0 5
58067: PPUSH
58068: CALL 64614 0 3
// if cmd = 258 then
58072: LD_VAR 0 1
58076: PUSH
58077: LD_INT 258
58079: EQUAL
58080: IFFALSE 58104
// BurnTreeXYR ( unit , x , y , 8 ) ;
58082: LD_VAR 0 2
58086: PPUSH
58087: LD_VAR 0 4
58091: PPUSH
58092: LD_VAR 0 5
58096: PPUSH
58097: LD_INT 8
58099: PPUSH
58100: CALL 58627 0 4
// end ;
58104: LD_VAR 0 6
58108: RET
// export function ComRadiation ( un ) ; var eff ; begin
58109: LD_INT 0
58111: PPUSH
58112: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
58113: LD_VAR 0 1
58117: PPUSH
58118: CALL_OW 264
58122: PUSH
58123: LD_INT 91
58125: NONEQUAL
58126: IFFALSE 58130
// exit ;
58128: GO 58200
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
58130: LD_INT 68
58132: PPUSH
58133: LD_VAR 0 1
58137: PPUSH
58138: CALL_OW 255
58142: PPUSH
58143: CALL_OW 321
58147: PUSH
58148: LD_INT 2
58150: EQUAL
58151: IFFALSE 58163
// eff := 50 else
58153: LD_ADDR_VAR 0 3
58157: PUSH
58158: LD_INT 50
58160: ST_TO_ADDR
58161: GO 58171
// eff := 25 ;
58163: LD_ADDR_VAR 0 3
58167: PUSH
58168: LD_INT 25
58170: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
58171: LD_VAR 0 1
58175: PPUSH
58176: CALL_OW 250
58180: PPUSH
58181: LD_VAR 0 1
58185: PPUSH
58186: CALL_OW 251
58190: PPUSH
58191: LD_VAR 0 3
58195: PPUSH
58196: CALL_OW 495
// end ;
58200: LD_VAR 0 2
58204: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
58205: LD_INT 0
58207: PPUSH
58208: PPUSH
58209: PPUSH
58210: PPUSH
58211: PPUSH
58212: PPUSH
58213: PPUSH
58214: PPUSH
58215: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
58216: LD_VAR 0 1
58220: PPUSH
58221: CALL_OW 302
58225: NOT
58226: IFTRUE 58245
58228: PUSH
58229: LD_VAR 0 2
58233: PPUSH
58234: LD_VAR 0 3
58238: PPUSH
58239: CALL_OW 488
58243: NOT
58244: OR
58245: IFTRUE 58254
58247: PUSH
58248: LD_VAR 0 4
58252: NOT
58253: OR
58254: IFFALSE 58258
// exit ;
58256: GO 58622
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
58258: LD_VAR 0 1
58262: PPUSH
58263: CALL_OW 437
58267: PPUSH
58268: CALL 5233 0 1
58272: PUSH
58273: LD_INT 10
58275: GREATER
58276: IFFALSE 58280
// exit ;
58278: GO 58622
// list := [ ] ;
58280: LD_ADDR_VAR 0 13
58284: PUSH
58285: EMPTY
58286: ST_TO_ADDR
// if x - r < 0 then
58287: LD_VAR 0 2
58291: PUSH
58292: LD_VAR 0 4
58296: MINUS
58297: PUSH
58298: LD_INT 0
58300: LESS
58301: IFFALSE 58313
// min_x := 0 else
58303: LD_ADDR_VAR 0 7
58307: PUSH
58308: LD_INT 0
58310: ST_TO_ADDR
58311: GO 58329
// min_x := x - r ;
58313: LD_ADDR_VAR 0 7
58317: PUSH
58318: LD_VAR 0 2
58322: PUSH
58323: LD_VAR 0 4
58327: MINUS
58328: ST_TO_ADDR
// if y - r < 0 then
58329: LD_VAR 0 3
58333: PUSH
58334: LD_VAR 0 4
58338: MINUS
58339: PUSH
58340: LD_INT 0
58342: LESS
58343: IFFALSE 58355
// min_y := 0 else
58345: LD_ADDR_VAR 0 8
58349: PUSH
58350: LD_INT 0
58352: ST_TO_ADDR
58353: GO 58371
// min_y := y - r ;
58355: LD_ADDR_VAR 0 8
58359: PUSH
58360: LD_VAR 0 3
58364: PUSH
58365: LD_VAR 0 4
58369: MINUS
58370: ST_TO_ADDR
// max_x := x + r ;
58371: LD_ADDR_VAR 0 9
58375: PUSH
58376: LD_VAR 0 2
58380: PUSH
58381: LD_VAR 0 4
58385: PLUS
58386: ST_TO_ADDR
// max_y := y + r ;
58387: LD_ADDR_VAR 0 10
58391: PUSH
58392: LD_VAR 0 3
58396: PUSH
58397: LD_VAR 0 4
58401: PLUS
58402: ST_TO_ADDR
// for _x = min_x to max_x do
58403: LD_ADDR_VAR 0 11
58407: PUSH
58408: DOUBLE
58409: LD_VAR 0 7
58413: DEC
58414: ST_TO_ADDR
58415: LD_VAR 0 9
58419: PUSH
58420: FOR_TO
58421: IFFALSE 58540
// for _y = min_y to max_y do
58423: LD_ADDR_VAR 0 12
58427: PUSH
58428: DOUBLE
58429: LD_VAR 0 8
58433: DEC
58434: ST_TO_ADDR
58435: LD_VAR 0 10
58439: PUSH
58440: FOR_TO
58441: IFFALSE 58536
// begin if not ValidHex ( _x , _y ) then
58443: LD_VAR 0 11
58447: PPUSH
58448: LD_VAR 0 12
58452: PPUSH
58453: CALL_OW 488
58457: NOT
58458: IFFALSE 58462
// continue ;
58460: GO 58440
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58462: LD_VAR 0 11
58466: PPUSH
58467: LD_VAR 0 12
58471: PPUSH
58472: CALL_OW 351
58476: IFFALSE 58494
58478: PUSH
58479: LD_VAR 0 11
58483: PPUSH
58484: LD_VAR 0 12
58488: PPUSH
58489: CALL_OW 554
58493: AND
58494: IFFALSE 58534
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58496: LD_ADDR_VAR 0 13
58500: PUSH
58501: LD_VAR 0 13
58505: PPUSH
58506: LD_VAR 0 13
58510: PUSH
58511: LD_INT 1
58513: PLUS
58514: PPUSH
58515: LD_VAR 0 11
58519: PUSH
58520: LD_VAR 0 12
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PPUSH
58529: CALL_OW 2
58533: ST_TO_ADDR
// end ;
58534: GO 58440
58536: POP
58537: POP
58538: GO 58420
58540: POP
58541: POP
// if not list then
58542: LD_VAR 0 13
58546: NOT
58547: IFFALSE 58551
// exit ;
58549: GO 58622
// for i in list do
58551: LD_ADDR_VAR 0 6
58555: PUSH
58556: LD_VAR 0 13
58560: PUSH
58561: FOR_IN
58562: IFFALSE 58620
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
58564: LD_VAR 0 1
58568: PPUSH
58569: LD_STRING M
58571: PUSH
58572: LD_VAR 0 6
58576: PUSH
58577: LD_INT 1
58579: ARRAY
58580: PUSH
58581: LD_VAR 0 6
58585: PUSH
58586: LD_INT 2
58588: ARRAY
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: PUSH
58611: EMPTY
58612: LIST
58613: PPUSH
58614: CALL_OW 447
58618: GO 58561
58620: POP
58621: POP
// end ;
58622: LD_VAR 0 5
58626: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
58627: LD_INT 0
58629: PPUSH
58630: PPUSH
58631: PPUSH
58632: PPUSH
58633: PPUSH
58634: PPUSH
58635: PPUSH
58636: PPUSH
58637: PPUSH
58638: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
58639: LD_VAR 0 1
58643: PPUSH
58644: CALL_OW 302
58648: NOT
58649: IFTRUE 58668
58651: PUSH
58652: LD_VAR 0 2
58656: PPUSH
58657: LD_VAR 0 3
58661: PPUSH
58662: CALL_OW 488
58666: NOT
58667: OR
58668: IFTRUE 58677
58670: PUSH
58671: LD_VAR 0 4
58675: NOT
58676: OR
58677: IFFALSE 58681
// exit ;
58679: GO 59220
// if Count ( GetTaskList ( flame ) ) > 10 then
58681: LD_VAR 0 1
58685: PPUSH
58686: CALL_OW 437
58690: PPUSH
58691: CALL 5233 0 1
58695: PUSH
58696: LD_INT 10
58698: GREATER
58699: IFFALSE 58703
// exit ;
58701: GO 59220
// list := [ ] ;
58703: LD_ADDR_VAR 0 13
58707: PUSH
58708: EMPTY
58709: ST_TO_ADDR
// if x - r < 0 then
58710: LD_VAR 0 2
58714: PUSH
58715: LD_VAR 0 4
58719: MINUS
58720: PUSH
58721: LD_INT 0
58723: LESS
58724: IFFALSE 58736
// min_x := 0 else
58726: LD_ADDR_VAR 0 7
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
58734: GO 58752
// min_x := x - r ;
58736: LD_ADDR_VAR 0 7
58740: PUSH
58741: LD_VAR 0 2
58745: PUSH
58746: LD_VAR 0 4
58750: MINUS
58751: ST_TO_ADDR
// if y - r < 0 then
58752: LD_VAR 0 3
58756: PUSH
58757: LD_VAR 0 4
58761: MINUS
58762: PUSH
58763: LD_INT 0
58765: LESS
58766: IFFALSE 58778
// min_y := 0 else
58768: LD_ADDR_VAR 0 8
58772: PUSH
58773: LD_INT 0
58775: ST_TO_ADDR
58776: GO 58794
// min_y := y - r ;
58778: LD_ADDR_VAR 0 8
58782: PUSH
58783: LD_VAR 0 3
58787: PUSH
58788: LD_VAR 0 4
58792: MINUS
58793: ST_TO_ADDR
// max_x := x + r ;
58794: LD_ADDR_VAR 0 9
58798: PUSH
58799: LD_VAR 0 2
58803: PUSH
58804: LD_VAR 0 4
58808: PLUS
58809: ST_TO_ADDR
// max_y := y + r ;
58810: LD_ADDR_VAR 0 10
58814: PUSH
58815: LD_VAR 0 3
58819: PUSH
58820: LD_VAR 0 4
58824: PLUS
58825: ST_TO_ADDR
// for _x = min_x to max_x do
58826: LD_ADDR_VAR 0 11
58830: PUSH
58831: DOUBLE
58832: LD_VAR 0 7
58836: DEC
58837: ST_TO_ADDR
58838: LD_VAR 0 9
58842: PUSH
58843: FOR_TO
58844: IFFALSE 58963
// for _y = min_y to max_y do
58846: LD_ADDR_VAR 0 12
58850: PUSH
58851: DOUBLE
58852: LD_VAR 0 8
58856: DEC
58857: ST_TO_ADDR
58858: LD_VAR 0 10
58862: PUSH
58863: FOR_TO
58864: IFFALSE 58959
// begin if not ValidHex ( _x , _y ) then
58866: LD_VAR 0 11
58870: PPUSH
58871: LD_VAR 0 12
58875: PPUSH
58876: CALL_OW 488
58880: NOT
58881: IFFALSE 58885
// continue ;
58883: GO 58863
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
58885: LD_VAR 0 11
58889: PPUSH
58890: LD_VAR 0 12
58894: PPUSH
58895: CALL_OW 351
58899: IFFALSE 58917
58901: PUSH
58902: LD_VAR 0 11
58906: PPUSH
58907: LD_VAR 0 12
58911: PPUSH
58912: CALL_OW 554
58916: AND
58917: IFFALSE 58957
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
58919: LD_ADDR_VAR 0 13
58923: PUSH
58924: LD_VAR 0 13
58928: PPUSH
58929: LD_VAR 0 13
58933: PUSH
58934: LD_INT 1
58936: PLUS
58937: PPUSH
58938: LD_VAR 0 11
58942: PUSH
58943: LD_VAR 0 12
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PPUSH
58952: CALL_OW 2
58956: ST_TO_ADDR
// end ;
58957: GO 58863
58959: POP
58960: POP
58961: GO 58843
58963: POP
58964: POP
// if not list then
58965: LD_VAR 0 13
58969: NOT
58970: IFFALSE 58974
// exit ;
58972: GO 59220
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
58974: LD_ADDR_VAR 0 13
58978: PUSH
58979: LD_VAR 0 1
58983: PPUSH
58984: LD_VAR 0 13
58988: PPUSH
58989: LD_INT 1
58991: PPUSH
58992: LD_INT 1
58994: PPUSH
58995: CALL 8639 0 4
58999: ST_TO_ADDR
// ComStop ( flame ) ;
59000: LD_VAR 0 1
59004: PPUSH
59005: CALL_OW 141
// for i in list do
59009: LD_ADDR_VAR 0 6
59013: PUSH
59014: LD_VAR 0 13
59018: PUSH
59019: FOR_IN
59020: IFFALSE 59051
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
59022: LD_VAR 0 1
59026: PPUSH
59027: LD_VAR 0 6
59031: PUSH
59032: LD_INT 1
59034: ARRAY
59035: PPUSH
59036: LD_VAR 0 6
59040: PUSH
59041: LD_INT 2
59043: ARRAY
59044: PPUSH
59045: CALL_OW 176
59049: GO 59019
59051: POP
59052: POP
// repeat wait ( 0 0$1 ) ;
59053: LD_INT 35
59055: PPUSH
59056: CALL_OW 67
// task := GetTaskList ( flame ) ;
59060: LD_ADDR_VAR 0 14
59064: PUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: CALL_OW 437
59074: ST_TO_ADDR
// if not task then
59075: LD_VAR 0 14
59079: NOT
59080: IFFALSE 59084
// exit ;
59082: GO 59220
// if task [ 1 ] [ 1 ] <> | then
59084: LD_VAR 0 14
59088: PUSH
59089: LD_INT 1
59091: ARRAY
59092: PUSH
59093: LD_INT 1
59095: ARRAY
59096: PUSH
59097: LD_STRING |
59099: NONEQUAL
59100: IFFALSE 59104
// exit ;
59102: GO 59220
// _x := task [ 1 ] [ 2 ] ;
59104: LD_ADDR_VAR 0 11
59108: PUSH
59109: LD_VAR 0 14
59113: PUSH
59114: LD_INT 1
59116: ARRAY
59117: PUSH
59118: LD_INT 2
59120: ARRAY
59121: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
59122: LD_ADDR_VAR 0 12
59126: PUSH
59127: LD_VAR 0 14
59131: PUSH
59132: LD_INT 1
59134: ARRAY
59135: PUSH
59136: LD_INT 3
59138: ARRAY
59139: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
59140: LD_VAR 0 11
59144: PPUSH
59145: LD_VAR 0 12
59149: PPUSH
59150: CALL_OW 351
59154: NOT
59155: IFTRUE 59174
59157: PUSH
59158: LD_VAR 0 11
59162: PPUSH
59163: LD_VAR 0 12
59167: PPUSH
59168: CALL_OW 554
59172: NOT
59173: OR
59174: IFFALSE 59208
// begin task := Delete ( task , 1 ) ;
59176: LD_ADDR_VAR 0 14
59180: PUSH
59181: LD_VAR 0 14
59185: PPUSH
59186: LD_INT 1
59188: PPUSH
59189: CALL_OW 3
59193: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
59194: LD_VAR 0 1
59198: PPUSH
59199: LD_VAR 0 14
59203: PPUSH
59204: CALL_OW 446
// end ; until not HasTask ( flame ) ;
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 314
59217: NOT
59218: IFFALSE 59053
// end ;
59220: LD_VAR 0 5
59224: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
59225: LD_EXP 49
59229: NOT
59230: IFFALSE 59280
59232: GO 59234
59234: DISABLE
// begin initHack := true ;
59235: LD_ADDR_EXP 49
59239: PUSH
59240: LD_INT 1
59242: ST_TO_ADDR
// hackTanks := [ ] ;
59243: LD_ADDR_EXP 50
59247: PUSH
59248: EMPTY
59249: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
59250: LD_ADDR_EXP 51
59254: PUSH
59255: EMPTY
59256: ST_TO_ADDR
// hackLimit := 3 ;
59257: LD_ADDR_EXP 52
59261: PUSH
59262: LD_INT 3
59264: ST_TO_ADDR
// hackDist := 12 ;
59265: LD_ADDR_EXP 53
59269: PUSH
59270: LD_INT 12
59272: ST_TO_ADDR
// hackCounter := [ ] ;
59273: LD_ADDR_EXP 54
59277: PUSH
59278: EMPTY
59279: ST_TO_ADDR
// end ;
59280: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
59281: LD_EXP 49
59285: IFFALSE 59303
59287: PUSH
59288: LD_INT 34
59290: PUSH
59291: LD_INT 99
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PPUSH
59298: CALL_OW 69
59302: AND
59303: IFFALSE 59556
59305: GO 59307
59307: DISABLE
59308: LD_INT 0
59310: PPUSH
59311: PPUSH
// begin enable ;
59312: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
59313: LD_ADDR_VAR 0 1
59317: PUSH
59318: LD_INT 34
59320: PUSH
59321: LD_INT 99
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PPUSH
59328: CALL_OW 69
59332: PUSH
59333: FOR_IN
59334: IFFALSE 59554
// begin if not i in hackTanks then
59336: LD_VAR 0 1
59340: PUSH
59341: LD_EXP 50
59345: IN
59346: NOT
59347: IFFALSE 59430
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
59349: LD_ADDR_EXP 50
59353: PUSH
59354: LD_EXP 50
59358: PPUSH
59359: LD_EXP 50
59363: PUSH
59364: LD_INT 1
59366: PLUS
59367: PPUSH
59368: LD_VAR 0 1
59372: PPUSH
59373: CALL_OW 1
59377: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
59378: LD_ADDR_EXP 51
59382: PUSH
59383: LD_EXP 51
59387: PPUSH
59388: LD_EXP 51
59392: PUSH
59393: LD_INT 1
59395: PLUS
59396: PPUSH
59397: EMPTY
59398: PPUSH
59399: CALL_OW 1
59403: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
59404: LD_ADDR_EXP 54
59408: PUSH
59409: LD_EXP 54
59413: PPUSH
59414: LD_EXP 54
59418: PUSH
59419: LD_INT 1
59421: PLUS
59422: PPUSH
59423: EMPTY
59424: PPUSH
59425: CALL_OW 1
59429: ST_TO_ADDR
// end ; if not IsOk ( i ) then
59430: LD_VAR 0 1
59434: PPUSH
59435: CALL_OW 302
59439: NOT
59440: IFFALSE 59453
// begin HackUnlinkAll ( i ) ;
59442: LD_VAR 0 1
59446: PPUSH
59447: CALL 59559 0 1
// continue ;
59451: GO 59333
// end ; HackCheckCapturedStatus ( i ) ;
59453: LD_VAR 0 1
59457: PPUSH
59458: CALL 60004 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
59462: LD_ADDR_VAR 0 2
59466: PUSH
59467: LD_INT 81
59469: PUSH
59470: LD_VAR 0 1
59474: PPUSH
59475: CALL_OW 255
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 33
59486: PUSH
59487: LD_INT 3
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 91
59496: PUSH
59497: LD_VAR 0 1
59501: PUSH
59502: LD_EXP 53
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 50
59514: PUSH
59515: EMPTY
59516: LIST
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: PPUSH
59524: CALL_OW 69
59528: ST_TO_ADDR
// if not tmp then
59529: LD_VAR 0 2
59533: NOT
59534: IFFALSE 59538
// continue ;
59536: GO 59333
// HackLink ( i , tmp ) ;
59538: LD_VAR 0 1
59542: PPUSH
59543: LD_VAR 0 2
59547: PPUSH
59548: CALL 59695 0 2
// end ;
59552: GO 59333
59554: POP
59555: POP
// end ;
59556: PPOPN 2
59558: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
59559: LD_INT 0
59561: PPUSH
59562: PPUSH
59563: PPUSH
// if not hack in hackTanks then
59564: LD_VAR 0 1
59568: PUSH
59569: LD_EXP 50
59573: IN
59574: NOT
59575: IFFALSE 59579
// exit ;
59577: GO 59690
// index := GetElementIndex ( hackTanks , hack ) ;
59579: LD_ADDR_VAR 0 4
59583: PUSH
59584: LD_EXP 50
59588: PPUSH
59589: LD_VAR 0 1
59593: PPUSH
59594: CALL 7934 0 2
59598: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
59599: LD_EXP 51
59603: PUSH
59604: LD_VAR 0 4
59608: ARRAY
59609: IFFALSE 59690
// begin for i in hackTanksCaptured [ index ] do
59611: LD_ADDR_VAR 0 3
59615: PUSH
59616: LD_EXP 51
59620: PUSH
59621: LD_VAR 0 4
59625: ARRAY
59626: PUSH
59627: FOR_IN
59628: IFFALSE 59654
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
59630: LD_VAR 0 3
59634: PUSH
59635: LD_INT 1
59637: ARRAY
59638: PPUSH
59639: LD_VAR 0 3
59643: PUSH
59644: LD_INT 2
59646: ARRAY
59647: PPUSH
59648: CALL_OW 235
59652: GO 59627
59654: POP
59655: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
59656: LD_ADDR_EXP 51
59660: PUSH
59661: LD_EXP 51
59665: PPUSH
59666: LD_VAR 0 4
59670: PPUSH
59671: EMPTY
59672: PPUSH
59673: CALL_OW 1
59677: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
59678: LD_VAR 0 1
59682: PPUSH
59683: LD_INT 0
59685: PPUSH
59686: CALL_OW 505
// end ; end ;
59690: LD_VAR 0 2
59694: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
59695: LD_INT 0
59697: PPUSH
59698: PPUSH
59699: PPUSH
// if not hack in hackTanks or not vehicles then
59700: LD_VAR 0 1
59704: PUSH
59705: LD_EXP 50
59709: IN
59710: NOT
59711: IFTRUE 59720
59713: PUSH
59714: LD_VAR 0 2
59718: NOT
59719: OR
59720: IFFALSE 59724
// exit ;
59722: GO 59999
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
59724: LD_ADDR_VAR 0 2
59728: PUSH
59729: LD_VAR 0 1
59733: PPUSH
59734: LD_VAR 0 2
59738: PPUSH
59739: LD_INT 1
59741: PPUSH
59742: LD_INT 1
59744: PPUSH
59745: CALL 8586 0 4
59749: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
59750: LD_ADDR_VAR 0 5
59754: PUSH
59755: LD_EXP 50
59759: PPUSH
59760: LD_VAR 0 1
59764: PPUSH
59765: CALL 7934 0 2
59769: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
59770: LD_EXP 51
59774: PUSH
59775: LD_VAR 0 5
59779: ARRAY
59780: PUSH
59781: LD_EXP 52
59785: LESS
59786: IFFALSE 59975
// begin for i := 1 to vehicles do
59788: LD_ADDR_VAR 0 4
59792: PUSH
59793: DOUBLE
59794: LD_INT 1
59796: DEC
59797: ST_TO_ADDR
59798: LD_VAR 0 2
59802: PUSH
59803: FOR_TO
59804: IFFALSE 59973
// begin if hackTanksCaptured [ index ] = hackLimit then
59806: LD_EXP 51
59810: PUSH
59811: LD_VAR 0 5
59815: ARRAY
59816: PUSH
59817: LD_EXP 52
59821: EQUAL
59822: IFFALSE 59826
// break ;
59824: GO 59973
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
59826: LD_ADDR_EXP 54
59830: PUSH
59831: LD_EXP 54
59835: PPUSH
59836: LD_VAR 0 5
59840: PPUSH
59841: LD_EXP 54
59845: PUSH
59846: LD_VAR 0 5
59850: ARRAY
59851: PUSH
59852: LD_INT 1
59854: PLUS
59855: PPUSH
59856: CALL_OW 1
59860: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
59861: LD_ADDR_EXP 51
59865: PUSH
59866: LD_EXP 51
59870: PPUSH
59871: LD_VAR 0 5
59875: PUSH
59876: LD_EXP 51
59880: PUSH
59881: LD_VAR 0 5
59885: ARRAY
59886: PUSH
59887: LD_INT 1
59889: PLUS
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PPUSH
59895: LD_VAR 0 2
59899: PUSH
59900: LD_VAR 0 4
59904: ARRAY
59905: PUSH
59906: LD_VAR 0 2
59910: PUSH
59911: LD_VAR 0 4
59915: ARRAY
59916: PPUSH
59917: CALL_OW 255
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PPUSH
59926: CALL 8151 0 3
59930: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
59931: LD_VAR 0 2
59935: PUSH
59936: LD_VAR 0 4
59940: ARRAY
59941: PPUSH
59942: LD_VAR 0 1
59946: PPUSH
59947: CALL_OW 255
59951: PPUSH
59952: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
59956: LD_VAR 0 2
59960: PUSH
59961: LD_VAR 0 4
59965: ARRAY
59966: PPUSH
59967: CALL_OW 141
// end ;
59971: GO 59803
59973: POP
59974: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
59975: LD_VAR 0 1
59979: PPUSH
59980: LD_EXP 51
59984: PUSH
59985: LD_VAR 0 5
59989: ARRAY
59990: PUSH
59991: LD_INT 0
59993: PLUS
59994: PPUSH
59995: CALL_OW 505
// end ;
59999: LD_VAR 0 3
60003: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
60004: LD_INT 0
60006: PPUSH
60007: PPUSH
60008: PPUSH
60009: PPUSH
// if not hack in hackTanks then
60010: LD_VAR 0 1
60014: PUSH
60015: LD_EXP 50
60019: IN
60020: NOT
60021: IFFALSE 60025
// exit ;
60023: GO 60269
// index := GetElementIndex ( hackTanks , hack ) ;
60025: LD_ADDR_VAR 0 4
60029: PUSH
60030: LD_EXP 50
60034: PPUSH
60035: LD_VAR 0 1
60039: PPUSH
60040: CALL 7934 0 2
60044: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
60045: LD_ADDR_VAR 0 3
60049: PUSH
60050: DOUBLE
60051: LD_EXP 51
60055: PUSH
60056: LD_VAR 0 4
60060: ARRAY
60061: INC
60062: ST_TO_ADDR
60063: LD_INT 1
60065: PUSH
60066: FOR_DOWNTO
60067: IFFALSE 60243
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
60069: LD_ADDR_VAR 0 5
60073: PUSH
60074: LD_EXP 51
60078: PUSH
60079: LD_VAR 0 4
60083: ARRAY
60084: PUSH
60085: LD_VAR 0 3
60089: ARRAY
60090: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
60091: LD_VAR 0 5
60095: PUSH
60096: LD_INT 1
60098: ARRAY
60099: PPUSH
60100: CALL_OW 302
60104: NOT
60105: IFTRUE 60133
60107: PUSH
60108: LD_VAR 0 5
60112: PUSH
60113: LD_INT 1
60115: ARRAY
60116: PPUSH
60117: CALL_OW 255
60121: PUSH
60122: LD_VAR 0 1
60126: PPUSH
60127: CALL_OW 255
60131: NONEQUAL
60132: OR
60133: IFFALSE 60241
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
60135: LD_VAR 0 5
60139: PUSH
60140: LD_INT 1
60142: ARRAY
60143: PPUSH
60144: CALL_OW 305
60148: IFFALSE 60176
60150: PUSH
60151: LD_VAR 0 5
60155: PUSH
60156: LD_INT 1
60158: ARRAY
60159: PPUSH
60160: CALL_OW 255
60164: PUSH
60165: LD_VAR 0 1
60169: PPUSH
60170: CALL_OW 255
60174: EQUAL
60175: AND
60176: IFFALSE 60200
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
60178: LD_VAR 0 5
60182: PUSH
60183: LD_INT 1
60185: ARRAY
60186: PPUSH
60187: LD_VAR 0 5
60191: PUSH
60192: LD_INT 2
60194: ARRAY
60195: PPUSH
60196: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
60200: LD_ADDR_EXP 51
60204: PUSH
60205: LD_EXP 51
60209: PPUSH
60210: LD_VAR 0 4
60214: PPUSH
60215: LD_EXP 51
60219: PUSH
60220: LD_VAR 0 4
60224: ARRAY
60225: PPUSH
60226: LD_VAR 0 3
60230: PPUSH
60231: CALL_OW 3
60235: PPUSH
60236: CALL_OW 1
60240: ST_TO_ADDR
// end ; end ;
60241: GO 60066
60243: POP
60244: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
60245: LD_VAR 0 1
60249: PPUSH
60250: LD_EXP 51
60254: PUSH
60255: LD_VAR 0 4
60259: ARRAY
60260: PUSH
60261: LD_INT 0
60263: PLUS
60264: PPUSH
60265: CALL_OW 505
// end ;
60269: LD_VAR 0 2
60273: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
60274: LD_INT 0
60276: PPUSH
60277: PPUSH
60278: PPUSH
60279: PPUSH
// if not hack in hackTanks then
60280: LD_VAR 0 1
60284: PUSH
60285: LD_EXP 50
60289: IN
60290: NOT
60291: IFFALSE 60295
// exit ;
60293: GO 60380
// index := GetElementIndex ( hackTanks , hack ) ;
60295: LD_ADDR_VAR 0 5
60299: PUSH
60300: LD_EXP 50
60304: PPUSH
60305: LD_VAR 0 1
60309: PPUSH
60310: CALL 7934 0 2
60314: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
60315: LD_ADDR_VAR 0 4
60319: PUSH
60320: DOUBLE
60321: LD_INT 1
60323: DEC
60324: ST_TO_ADDR
60325: LD_EXP 51
60329: PUSH
60330: LD_VAR 0 5
60334: ARRAY
60335: PUSH
60336: FOR_TO
60337: IFFALSE 60378
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
60339: LD_EXP 51
60343: PUSH
60344: LD_VAR 0 5
60348: ARRAY
60349: PUSH
60350: LD_VAR 0 4
60354: ARRAY
60355: PUSH
60356: LD_INT 1
60358: ARRAY
60359: PUSH
60360: LD_VAR 0 2
60364: EQUAL
60365: IFFALSE 60376
// KillUnit ( vehicle ) ;
60367: LD_VAR 0 2
60371: PPUSH
60372: CALL_OW 66
60376: GO 60336
60378: POP
60379: POP
// end ;
60380: LD_VAR 0 3
60384: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
60385: LD_EXP 55
60389: NOT
60390: IFFALSE 60523
60392: GO 60394
60394: DISABLE
60395: LD_INT 0
60397: PPUSH
// begin initMiner := true ;
60398: LD_ADDR_EXP 55
60402: PUSH
60403: LD_INT 1
60405: ST_TO_ADDR
// minersList := [ ] ;
60406: LD_ADDR_EXP 56
60410: PUSH
60411: EMPTY
60412: ST_TO_ADDR
// minerMinesList := [ ] ;
60413: LD_ADDR_EXP 57
60417: PUSH
60418: EMPTY
60419: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
60420: LD_ADDR_EXP 58
60424: PUSH
60425: LD_INT 10
60427: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
60428: LD_ADDR_VAR 0 1
60432: PUSH
60433: LD_INT 34
60435: PUSH
60436: LD_INT 81
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PPUSH
60443: CALL_OW 69
60447: PUSH
60448: FOR_IN
60449: IFFALSE 60521
// begin if not i in minersList then
60451: LD_VAR 0 1
60455: PUSH
60456: LD_EXP 56
60460: IN
60461: NOT
60462: IFFALSE 60519
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
60464: LD_ADDR_EXP 56
60468: PUSH
60469: LD_EXP 56
60473: PPUSH
60474: LD_EXP 56
60478: PUSH
60479: LD_INT 1
60481: PLUS
60482: PPUSH
60483: LD_VAR 0 1
60487: PPUSH
60488: CALL_OW 1
60492: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
60493: LD_ADDR_EXP 57
60497: PUSH
60498: LD_EXP 57
60502: PPUSH
60503: LD_EXP 57
60507: PUSH
60508: LD_INT 1
60510: PLUS
60511: PPUSH
60512: EMPTY
60513: PPUSH
60514: CALL_OW 1
60518: ST_TO_ADDR
// end end ;
60519: GO 60448
60521: POP
60522: POP
// end ;
60523: PPOPN 1
60525: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
60526: LD_EXP 55
60530: IFFALSE 60561
60532: PUSH
60533: LD_EXP 57
60537: PPUSH
60538: CALL 5233 0 1
60542: IFTRUE 60560
60544: PUSH
60545: LD_INT 34
60547: PUSH
60548: LD_INT 81
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PPUSH
60555: CALL_OW 69
60559: OR
60560: AND
60561: IFFALSE 61081
60563: GO 60565
60565: DISABLE
60566: LD_INT 0
60568: PPUSH
60569: PPUSH
60570: PPUSH
60571: PPUSH
// begin enable ;
60572: ENABLE
// for i := minerMinesList downto 1 do
60573: LD_ADDR_VAR 0 1
60577: PUSH
60578: DOUBLE
60579: LD_EXP 57
60583: INC
60584: ST_TO_ADDR
60585: LD_INT 1
60587: PUSH
60588: FOR_DOWNTO
60589: IFFALSE 61079
// begin side := GetSide ( minersList [ i ] ) ;
60591: LD_ADDR_VAR 0 3
60595: PUSH
60596: LD_EXP 56
60600: PUSH
60601: LD_VAR 0 1
60605: ARRAY
60606: PPUSH
60607: CALL_OW 255
60611: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
60612: LD_EXP 56
60616: PUSH
60617: LD_VAR 0 1
60621: ARRAY
60622: PPUSH
60623: CALL_OW 300
60627: IFFALSE 60648
60629: PUSH
60630: LD_VAR 0 3
60634: PUSH
60635: LD_OWVAR 2
60639: PUSH
60640: LD_INT 9
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: IN
60647: AND
60648: IFFALSE 60681
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
60650: LD_EXP 56
60654: PUSH
60655: LD_VAR 0 1
60659: ARRAY
60660: PPUSH
60661: LD_EXP 57
60665: PUSH
60666: LD_VAR 0 1
60670: ARRAY
60671: PPUSH
60672: CALL 5233 0 1
60676: PPUSH
60677: CALL_OW 505
// if not minerMinesList [ i ] then
60681: LD_EXP 57
60685: PUSH
60686: LD_VAR 0 1
60690: ARRAY
60691: NOT
60692: IFFALSE 60696
// continue ;
60694: GO 60588
// for j := minerMinesList [ i ] downto 1 do
60696: LD_ADDR_VAR 0 2
60700: PUSH
60701: DOUBLE
60702: LD_EXP 57
60706: PUSH
60707: LD_VAR 0 1
60711: ARRAY
60712: INC
60713: ST_TO_ADDR
60714: LD_INT 1
60716: PUSH
60717: FOR_DOWNTO
60718: IFFALSE 61075
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
60720: LD_EXP 56
60724: PUSH
60725: LD_VAR 0 1
60729: ARRAY
60730: PPUSH
60731: CALL_OW 301
60735: IFTRUE 60755
60737: PUSH
60738: LD_EXP 56
60742: PUSH
60743: LD_VAR 0 1
60747: ARRAY
60748: PPUSH
60749: CALL_OW 305
60753: NOT
60754: OR
60755: IFFALSE 60846
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60757: LD_EXP 57
60761: PUSH
60762: LD_VAR 0 1
60766: ARRAY
60767: PUSH
60768: LD_VAR 0 2
60772: ARRAY
60773: PUSH
60774: LD_INT 1
60776: ARRAY
60777: PPUSH
60778: LD_EXP 57
60782: PUSH
60783: LD_VAR 0 1
60787: ARRAY
60788: PUSH
60789: LD_VAR 0 2
60793: ARRAY
60794: PUSH
60795: LD_INT 2
60797: ARRAY
60798: PPUSH
60799: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
60803: LD_ADDR_EXP 57
60807: PUSH
60808: LD_EXP 57
60812: PPUSH
60813: LD_VAR 0 1
60817: PPUSH
60818: LD_EXP 57
60822: PUSH
60823: LD_VAR 0 1
60827: ARRAY
60828: PPUSH
60829: LD_VAR 0 2
60833: PPUSH
60834: CALL_OW 3
60838: PPUSH
60839: CALL_OW 1
60843: ST_TO_ADDR
// continue ;
60844: GO 60717
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
60846: LD_ADDR_VAR 0 4
60850: PUSH
60851: LD_EXP 57
60855: PUSH
60856: LD_VAR 0 1
60860: ARRAY
60861: PUSH
60862: LD_VAR 0 2
60866: ARRAY
60867: PUSH
60868: LD_INT 1
60870: ARRAY
60871: PPUSH
60872: LD_EXP 57
60876: PUSH
60877: LD_VAR 0 1
60881: ARRAY
60882: PUSH
60883: LD_VAR 0 2
60887: ARRAY
60888: PUSH
60889: LD_INT 2
60891: ARRAY
60892: PPUSH
60893: CALL_OW 428
60897: ST_TO_ADDR
// if not tmp then
60898: LD_VAR 0 4
60902: NOT
60903: IFFALSE 60907
// continue ;
60905: GO 60717
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
60907: LD_VAR 0 4
60911: PUSH
60912: LD_INT 81
60914: PUSH
60915: LD_VAR 0 3
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PPUSH
60924: CALL_OW 69
60928: IN
60929: IFFALSE 60979
60931: PUSH
60932: LD_EXP 57
60936: PUSH
60937: LD_VAR 0 1
60941: ARRAY
60942: PUSH
60943: LD_VAR 0 2
60947: ARRAY
60948: PUSH
60949: LD_INT 1
60951: ARRAY
60952: PPUSH
60953: LD_EXP 57
60957: PUSH
60958: LD_VAR 0 1
60962: ARRAY
60963: PUSH
60964: LD_VAR 0 2
60968: ARRAY
60969: PUSH
60970: LD_INT 2
60972: ARRAY
60973: PPUSH
60974: CALL_OW 458
60978: AND
60979: IFFALSE 61073
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
60981: LD_EXP 57
60985: PUSH
60986: LD_VAR 0 1
60990: ARRAY
60991: PUSH
60992: LD_VAR 0 2
60996: ARRAY
60997: PUSH
60998: LD_INT 1
61000: ARRAY
61001: PPUSH
61002: LD_EXP 57
61006: PUSH
61007: LD_VAR 0 1
61011: ARRAY
61012: PUSH
61013: LD_VAR 0 2
61017: ARRAY
61018: PUSH
61019: LD_INT 2
61021: ARRAY
61022: PPUSH
61023: LD_VAR 0 3
61027: PPUSH
61028: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
61032: LD_ADDR_EXP 57
61036: PUSH
61037: LD_EXP 57
61041: PPUSH
61042: LD_VAR 0 1
61046: PPUSH
61047: LD_EXP 57
61051: PUSH
61052: LD_VAR 0 1
61056: ARRAY
61057: PPUSH
61058: LD_VAR 0 2
61062: PPUSH
61063: CALL_OW 3
61067: PPUSH
61068: CALL_OW 1
61072: ST_TO_ADDR
// end ; end ;
61073: GO 60717
61075: POP
61076: POP
// end ;
61077: GO 60588
61079: POP
61080: POP
// end ;
61081: PPOPN 4
61083: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
61084: LD_INT 0
61086: PPUSH
61087: PPUSH
61088: PPUSH
61089: PPUSH
// result := false ;
61090: LD_ADDR_VAR 0 4
61094: PUSH
61095: LD_INT 0
61097: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
61098: LD_VAR 0 1
61102: PPUSH
61103: CALL_OW 264
61107: PUSH
61108: LD_INT 81
61110: EQUAL
61111: NOT
61112: IFFALSE 61116
// exit ;
61114: GO 61486
// side := GetSide ( unit ) ;
61116: LD_ADDR_VAR 0 6
61120: PUSH
61121: LD_VAR 0 1
61125: PPUSH
61126: CALL_OW 255
61130: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
61131: LD_ADDR_VAR 0 5
61135: PUSH
61136: LD_EXP 56
61140: PPUSH
61141: LD_VAR 0 1
61145: PPUSH
61146: CALL 7934 0 2
61150: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
61151: LD_EXP 57
61155: PUSH
61156: LD_VAR 0 5
61160: ARRAY
61161: PUSH
61162: LD_EXP 58
61166: GREATEREQUAL
61167: IFFALSE 61171
// exit ;
61169: GO 61486
// ComMoveXY ( unit , x , y ) ;
61171: LD_VAR 0 1
61175: PPUSH
61176: LD_VAR 0 2
61180: PPUSH
61181: LD_VAR 0 3
61185: PPUSH
61186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
61190: LD_INT 35
61192: PPUSH
61193: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_VAR 0 2
61206: PPUSH
61207: LD_VAR 0 3
61211: PPUSH
61212: CALL 39990 0 3
61216: NOT
61217: IFFALSE 61230
61219: PUSH
61220: LD_VAR 0 1
61224: PPUSH
61225: CALL_OW 314
61229: AND
61230: IFFALSE 61234
// exit ;
61232: GO 61486
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
61234: LD_VAR 0 2
61238: PPUSH
61239: LD_VAR 0 3
61243: PPUSH
61244: CALL_OW 428
61248: PUSH
61249: LD_VAR 0 1
61253: EQUAL
61254: IFFALSE 61268
61256: PUSH
61257: LD_VAR 0 1
61261: PPUSH
61262: CALL_OW 314
61266: NOT
61267: AND
61268: IFFALSE 61190
// if MineAtPos ( x , y ) then
61270: LD_VAR 0 2
61274: PPUSH
61275: LD_VAR 0 3
61279: PPUSH
61280: CALL_OW 458
61284: IFFALSE 61288
// exit ;
61286: GO 61486
// if your_side = side then
61288: LD_OWVAR 2
61292: PUSH
61293: LD_VAR 0 6
61297: EQUAL
61298: IFFALSE 61317
// PlaySoundXY ( x , y , PlantMine ) ;
61300: LD_VAR 0 2
61304: PPUSH
61305: LD_VAR 0 3
61309: PPUSH
61310: LD_STRING PlantMine
61312: PPUSH
61313: CALL_OW 366
// repeat wait ( 1 ) ;
61317: LD_INT 1
61319: PPUSH
61320: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
61324: LD_VAR 0 2
61328: PPUSH
61329: LD_VAR 0 3
61333: PPUSH
61334: LD_VAR 0 6
61338: PPUSH
61339: LD_INT 0
61341: PPUSH
61342: CALL_OW 454
61346: IFFALSE 61317
// if MineAtPos ( x , y ) then
61348: LD_VAR 0 2
61352: PPUSH
61353: LD_VAR 0 3
61357: PPUSH
61358: CALL_OW 458
61362: IFFALSE 61478
// begin for i in minerMinesList [ index ] do
61364: LD_ADDR_VAR 0 7
61368: PUSH
61369: LD_EXP 57
61373: PUSH
61374: LD_VAR 0 5
61378: ARRAY
61379: PUSH
61380: FOR_IN
61381: IFFALSE 61423
// if i [ 1 ] = x and i [ 2 ] = y then
61383: LD_VAR 0 7
61387: PUSH
61388: LD_INT 1
61390: ARRAY
61391: PUSH
61392: LD_VAR 0 2
61396: EQUAL
61397: IFFALSE 61415
61399: PUSH
61400: LD_VAR 0 7
61404: PUSH
61405: LD_INT 2
61407: ARRAY
61408: PUSH
61409: LD_VAR 0 3
61413: EQUAL
61414: AND
61415: IFFALSE 61421
// exit ;
61417: POP
61418: POP
61419: GO 61486
61421: GO 61380
61423: POP
61424: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
61425: LD_ADDR_EXP 57
61429: PUSH
61430: LD_EXP 57
61434: PPUSH
61435: LD_VAR 0 5
61439: PUSH
61440: LD_EXP 57
61444: PUSH
61445: LD_VAR 0 5
61449: ARRAY
61450: PUSH
61451: LD_INT 1
61453: PLUS
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PPUSH
61459: LD_VAR 0 2
61463: PUSH
61464: LD_VAR 0 3
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PPUSH
61473: CALL 8151 0 3
61477: ST_TO_ADDR
// end ; result := true ;
61478: LD_ADDR_VAR 0 4
61482: PUSH
61483: LD_INT 1
61485: ST_TO_ADDR
// end ;
61486: LD_VAR 0 4
61490: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
61491: LD_INT 0
61493: PPUSH
61494: PPUSH
61495: PPUSH
// if not unit in minersList then
61496: LD_VAR 0 1
61500: PUSH
61501: LD_EXP 56
61505: IN
61506: NOT
61507: IFFALSE 61511
// exit ;
61509: GO 61718
// index := GetElementIndex ( minersList , unit ) ;
61511: LD_ADDR_VAR 0 6
61515: PUSH
61516: LD_EXP 56
61520: PPUSH
61521: LD_VAR 0 1
61525: PPUSH
61526: CALL 7934 0 2
61530: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
61531: LD_ADDR_VAR 0 5
61535: PUSH
61536: DOUBLE
61537: LD_EXP 57
61541: PUSH
61542: LD_VAR 0 6
61546: ARRAY
61547: INC
61548: ST_TO_ADDR
61549: LD_INT 1
61551: PUSH
61552: FOR_DOWNTO
61553: IFFALSE 61716
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
61555: LD_EXP 57
61559: PUSH
61560: LD_VAR 0 6
61564: ARRAY
61565: PUSH
61566: LD_VAR 0 5
61570: ARRAY
61571: PUSH
61572: LD_INT 1
61574: ARRAY
61575: PPUSH
61576: LD_EXP 57
61580: PUSH
61581: LD_VAR 0 6
61585: ARRAY
61586: PUSH
61587: LD_VAR 0 5
61591: ARRAY
61592: PUSH
61593: LD_INT 2
61595: ARRAY
61596: PPUSH
61597: LD_VAR 0 2
61601: PPUSH
61602: LD_VAR 0 3
61606: PPUSH
61607: CALL_OW 298
61611: PUSH
61612: LD_INT 6
61614: LESS
61615: IFFALSE 61714
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
61617: LD_EXP 57
61621: PUSH
61622: LD_VAR 0 6
61626: ARRAY
61627: PUSH
61628: LD_VAR 0 5
61632: ARRAY
61633: PUSH
61634: LD_INT 1
61636: ARRAY
61637: PPUSH
61638: LD_EXP 57
61642: PUSH
61643: LD_VAR 0 6
61647: ARRAY
61648: PUSH
61649: LD_VAR 0 5
61653: ARRAY
61654: PUSH
61655: LD_INT 2
61657: ARRAY
61658: PPUSH
61659: LD_VAR 0 1
61663: PPUSH
61664: CALL_OW 255
61668: PPUSH
61669: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
61673: LD_ADDR_EXP 57
61677: PUSH
61678: LD_EXP 57
61682: PPUSH
61683: LD_VAR 0 6
61687: PPUSH
61688: LD_EXP 57
61692: PUSH
61693: LD_VAR 0 6
61697: ARRAY
61698: PPUSH
61699: LD_VAR 0 5
61703: PPUSH
61704: CALL_OW 3
61708: PPUSH
61709: CALL_OW 1
61713: ST_TO_ADDR
// end ; end ;
61714: GO 61552
61716: POP
61717: POP
// end ;
61718: LD_VAR 0 4
61722: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
61723: LD_INT 0
61725: PPUSH
61726: PPUSH
61727: PPUSH
61728: PPUSH
61729: PPUSH
61730: PPUSH
61731: PPUSH
61732: PPUSH
61733: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
61734: LD_VAR 0 1
61738: PPUSH
61739: CALL_OW 264
61743: PUSH
61744: LD_INT 81
61746: EQUAL
61747: NOT
61748: IFTRUE 61763
61750: PUSH
61751: LD_VAR 0 1
61755: PUSH
61756: LD_EXP 56
61760: IN
61761: NOT
61762: OR
61763: IFFALSE 61767
// exit ;
61765: GO 62093
// index := GetElementIndex ( minersList , unit ) ;
61767: LD_ADDR_VAR 0 6
61771: PUSH
61772: LD_EXP 56
61776: PPUSH
61777: LD_VAR 0 1
61781: PPUSH
61782: CALL 7934 0 2
61786: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
61787: LD_ADDR_VAR 0 8
61791: PUSH
61792: LD_EXP 58
61796: PUSH
61797: LD_EXP 57
61801: PUSH
61802: LD_VAR 0 6
61806: ARRAY
61807: MINUS
61808: ST_TO_ADDR
// if not minesFreeAmount then
61809: LD_VAR 0 8
61813: NOT
61814: IFFALSE 61818
// exit ;
61816: GO 62093
// tmp := [ ] ;
61818: LD_ADDR_VAR 0 7
61822: PUSH
61823: EMPTY
61824: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
61825: LD_ADDR_VAR 0 5
61829: PUSH
61830: DOUBLE
61831: LD_INT 1
61833: DEC
61834: ST_TO_ADDR
61835: LD_VAR 0 8
61839: PUSH
61840: FOR_TO
61841: IFFALSE 62040
// begin _d := rand ( 0 , 5 ) ;
61843: LD_ADDR_VAR 0 11
61847: PUSH
61848: LD_INT 0
61850: PPUSH
61851: LD_INT 5
61853: PPUSH
61854: CALL_OW 12
61858: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
61859: LD_ADDR_VAR 0 12
61863: PUSH
61864: LD_INT 2
61866: PPUSH
61867: LD_INT 6
61869: PPUSH
61870: CALL_OW 12
61874: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
61875: LD_ADDR_VAR 0 9
61879: PUSH
61880: LD_VAR 0 2
61884: PPUSH
61885: LD_VAR 0 11
61889: PPUSH
61890: LD_VAR 0 12
61894: PPUSH
61895: CALL_OW 272
61899: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
61900: LD_ADDR_VAR 0 10
61904: PUSH
61905: LD_VAR 0 3
61909: PPUSH
61910: LD_VAR 0 11
61914: PPUSH
61915: LD_VAR 0 12
61919: PPUSH
61920: CALL_OW 273
61924: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
61925: LD_VAR 0 9
61929: PPUSH
61930: LD_VAR 0 10
61934: PPUSH
61935: CALL_OW 488
61939: IFFALSE 61963
61941: PUSH
61942: LD_VAR 0 9
61946: PUSH
61947: LD_VAR 0 10
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_VAR 0 7
61960: IN
61961: NOT
61962: AND
61963: IFFALSE 61982
61965: PUSH
61966: LD_VAR 0 9
61970: PPUSH
61971: LD_VAR 0 10
61975: PPUSH
61976: CALL_OW 458
61980: NOT
61981: AND
61982: IFFALSE 62024
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
61984: LD_ADDR_VAR 0 7
61988: PUSH
61989: LD_VAR 0 7
61993: PPUSH
61994: LD_VAR 0 7
61998: PUSH
61999: LD_INT 1
62001: PLUS
62002: PPUSH
62003: LD_VAR 0 9
62007: PUSH
62008: LD_VAR 0 10
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PPUSH
62017: CALL_OW 1
62021: ST_TO_ADDR
62022: GO 62038
// i := i - 1 ;
62024: LD_ADDR_VAR 0 5
62028: PUSH
62029: LD_VAR 0 5
62033: PUSH
62034: LD_INT 1
62036: MINUS
62037: ST_TO_ADDR
// end ;
62038: GO 61840
62040: POP
62041: POP
// for i in tmp do
62042: LD_ADDR_VAR 0 5
62046: PUSH
62047: LD_VAR 0 7
62051: PUSH
62052: FOR_IN
62053: IFFALSE 62091
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
62055: LD_VAR 0 1
62059: PPUSH
62060: LD_VAR 0 5
62064: PUSH
62065: LD_INT 1
62067: ARRAY
62068: PPUSH
62069: LD_VAR 0 5
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: PPUSH
62078: CALL 61084 0 3
62082: NOT
62083: IFFALSE 62089
// exit ;
62085: POP
62086: POP
62087: GO 62093
62089: GO 62052
62091: POP
62092: POP
// end ;
62093: LD_VAR 0 4
62097: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
62098: LD_INT 0
62100: PPUSH
62101: PPUSH
62102: PPUSH
62103: PPUSH
62104: PPUSH
62105: PPUSH
62106: PPUSH
62107: PPUSH
62108: PPUSH
// if GetClass ( unit ) <> class_sniper then
62109: LD_VAR 0 1
62113: PPUSH
62114: CALL_OW 257
62118: PUSH
62119: LD_INT 5
62121: NONEQUAL
62122: IFFALSE 62126
// exit ;
62124: GO 62596
// dist := 8 ;
62126: LD_ADDR_VAR 0 5
62130: PUSH
62131: LD_INT 8
62133: ST_TO_ADDR
// viewRange := 12 ;
62134: LD_ADDR_VAR 0 8
62138: PUSH
62139: LD_INT 12
62141: ST_TO_ADDR
// side := GetSide ( unit ) ;
62142: LD_ADDR_VAR 0 6
62146: PUSH
62147: LD_VAR 0 1
62151: PPUSH
62152: CALL_OW 255
62156: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
62157: LD_INT 61
62159: PPUSH
62160: LD_VAR 0 6
62164: PPUSH
62165: CALL_OW 321
62169: PUSH
62170: LD_INT 2
62172: EQUAL
62173: IFFALSE 62183
// viewRange := 16 ;
62175: LD_ADDR_VAR 0 8
62179: PUSH
62180: LD_INT 16
62182: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
62183: LD_VAR 0 1
62187: PPUSH
62188: LD_VAR 0 2
62192: PPUSH
62193: LD_VAR 0 3
62197: PPUSH
62198: CALL_OW 297
62202: PUSH
62203: LD_VAR 0 5
62207: GREATER
62208: IFFALSE 62287
// begin ComMoveXY ( unit , x , y ) ;
62210: LD_VAR 0 1
62214: PPUSH
62215: LD_VAR 0 2
62219: PPUSH
62220: LD_VAR 0 3
62224: PPUSH
62225: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
62229: LD_INT 35
62231: PPUSH
62232: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
62236: LD_VAR 0 1
62240: PPUSH
62241: LD_VAR 0 2
62245: PPUSH
62246: LD_VAR 0 3
62250: PPUSH
62251: CALL 39990 0 3
62255: NOT
62256: IFFALSE 62260
// exit ;
62258: GO 62596
// until GetDistUnitXY ( unit , x , y ) < dist ;
62260: LD_VAR 0 1
62264: PPUSH
62265: LD_VAR 0 2
62269: PPUSH
62270: LD_VAR 0 3
62274: PPUSH
62275: CALL_OW 297
62279: PUSH
62280: LD_VAR 0 5
62284: LESS
62285: IFFALSE 62229
// end ; ComTurnXY ( unit , x , y ) ;
62287: LD_VAR 0 1
62291: PPUSH
62292: LD_VAR 0 2
62296: PPUSH
62297: LD_VAR 0 3
62301: PPUSH
62302: CALL_OW 118
// repeat if Multiplayer then
62306: LD_OWVAR 4
62310: IFFALSE 62321
// wait ( 35 ) else
62312: LD_INT 35
62314: PPUSH
62315: CALL_OW 67
62319: GO 62328
// wait ( 5 ) ;
62321: LD_INT 5
62323: PPUSH
62324: CALL_OW 67
// _d := GetDir ( unit ) ;
62328: LD_ADDR_VAR 0 11
62332: PUSH
62333: LD_VAR 0 1
62337: PPUSH
62338: CALL_OW 254
62342: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
62343: LD_ADDR_VAR 0 7
62347: PUSH
62348: LD_VAR 0 1
62352: PPUSH
62353: CALL_OW 250
62357: PPUSH
62358: LD_VAR 0 1
62362: PPUSH
62363: CALL_OW 251
62367: PPUSH
62368: LD_VAR 0 2
62372: PPUSH
62373: LD_VAR 0 3
62377: PPUSH
62378: CALL 42626 0 4
62382: ST_TO_ADDR
// until dir = _d ;
62383: LD_VAR 0 7
62387: PUSH
62388: LD_VAR 0 11
62392: EQUAL
62393: IFFALSE 62306
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
62395: LD_ADDR_VAR 0 9
62399: PUSH
62400: LD_VAR 0 1
62404: PPUSH
62405: CALL_OW 250
62409: PPUSH
62410: LD_VAR 0 7
62414: PPUSH
62415: LD_VAR 0 5
62419: PPUSH
62420: CALL_OW 272
62424: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
62425: LD_ADDR_VAR 0 10
62429: PUSH
62430: LD_VAR 0 1
62434: PPUSH
62435: CALL_OW 251
62439: PPUSH
62440: LD_VAR 0 7
62444: PPUSH
62445: LD_VAR 0 5
62449: PPUSH
62450: CALL_OW 273
62454: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62455: LD_VAR 0 9
62459: PPUSH
62460: LD_VAR 0 10
62464: PPUSH
62465: CALL_OW 488
62469: NOT
62470: IFFALSE 62474
// exit ;
62472: GO 62596
// ComAnimCustom ( unit , 1 ) ;
62474: LD_VAR 0 1
62478: PPUSH
62479: LD_INT 1
62481: PPUSH
62482: CALL_OW 592
// p := 0 ;
62486: LD_ADDR_VAR 0 12
62490: PUSH
62491: LD_INT 0
62493: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
62494: LD_VAR 0 9
62498: PPUSH
62499: LD_VAR 0 10
62503: PPUSH
62504: LD_VAR 0 6
62508: PPUSH
62509: LD_VAR 0 8
62513: PPUSH
62514: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
62518: LD_INT 35
62520: PPUSH
62521: CALL_OW 67
// p := Inc ( p ) ;
62525: LD_ADDR_VAR 0 12
62529: PUSH
62530: LD_VAR 0 12
62534: PPUSH
62535: CALL 42582 0 1
62539: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
62540: LD_VAR 0 12
62544: PUSH
62545: LD_INT 3
62547: EQUAL
62548: IFTRUE 62562
62550: PUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 302
62560: NOT
62561: OR
62562: IFTRUE 62575
62564: PUSH
62565: LD_VAR 0 1
62569: PPUSH
62570: CALL_OW 301
62574: OR
62575: IFFALSE 62518
// RemoveSeeing ( _x , _y , side ) ;
62577: LD_VAR 0 9
62581: PPUSH
62582: LD_VAR 0 10
62586: PPUSH
62587: LD_VAR 0 6
62591: PPUSH
62592: CALL_OW 331
// end ;
62596: LD_VAR 0 4
62600: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
62601: LD_INT 0
62603: PPUSH
62604: PPUSH
62605: PPUSH
62606: PPUSH
62607: PPUSH
62608: PPUSH
62609: PPUSH
62610: PPUSH
62611: PPUSH
62612: PPUSH
62613: PPUSH
// if not unit then
62614: LD_VAR 0 1
62618: NOT
62619: IFFALSE 62623
// exit ;
62621: GO 62894
// side := GetSide ( unit ) ;
62623: LD_ADDR_VAR 0 3
62627: PUSH
62628: LD_VAR 0 1
62632: PPUSH
62633: CALL_OW 255
62637: ST_TO_ADDR
// x := GetX ( unit ) ;
62638: LD_ADDR_VAR 0 5
62642: PUSH
62643: LD_VAR 0 1
62647: PPUSH
62648: CALL_OW 250
62652: ST_TO_ADDR
// y := GetY ( unit ) ;
62653: LD_ADDR_VAR 0 6
62657: PUSH
62658: LD_VAR 0 1
62662: PPUSH
62663: CALL_OW 251
62667: ST_TO_ADDR
// r := 8 ;
62668: LD_ADDR_VAR 0 4
62672: PUSH
62673: LD_INT 8
62675: ST_TO_ADDR
// if x - r < 0 then
62676: LD_VAR 0 5
62680: PUSH
62681: LD_VAR 0 4
62685: MINUS
62686: PUSH
62687: LD_INT 0
62689: LESS
62690: IFFALSE 62702
// min_x := 0 else
62692: LD_ADDR_VAR 0 7
62696: PUSH
62697: LD_INT 0
62699: ST_TO_ADDR
62700: GO 62718
// min_x := x - r ;
62702: LD_ADDR_VAR 0 7
62706: PUSH
62707: LD_VAR 0 5
62711: PUSH
62712: LD_VAR 0 4
62716: MINUS
62717: ST_TO_ADDR
// if y - r < 0 then
62718: LD_VAR 0 6
62722: PUSH
62723: LD_VAR 0 4
62727: MINUS
62728: PUSH
62729: LD_INT 0
62731: LESS
62732: IFFALSE 62744
// min_y := 0 else
62734: LD_ADDR_VAR 0 8
62738: PUSH
62739: LD_INT 0
62741: ST_TO_ADDR
62742: GO 62760
// min_y := y - r ;
62744: LD_ADDR_VAR 0 8
62748: PUSH
62749: LD_VAR 0 6
62753: PUSH
62754: LD_VAR 0 4
62758: MINUS
62759: ST_TO_ADDR
// max_x := x + r ;
62760: LD_ADDR_VAR 0 9
62764: PUSH
62765: LD_VAR 0 5
62769: PUSH
62770: LD_VAR 0 4
62774: PLUS
62775: ST_TO_ADDR
// max_y := y + r ;
62776: LD_ADDR_VAR 0 10
62780: PUSH
62781: LD_VAR 0 6
62785: PUSH
62786: LD_VAR 0 4
62790: PLUS
62791: ST_TO_ADDR
// for _x = min_x to max_x do
62792: LD_ADDR_VAR 0 11
62796: PUSH
62797: DOUBLE
62798: LD_VAR 0 7
62802: DEC
62803: ST_TO_ADDR
62804: LD_VAR 0 9
62808: PUSH
62809: FOR_TO
62810: IFFALSE 62892
// for _y = min_y to max_y do
62812: LD_ADDR_VAR 0 12
62816: PUSH
62817: DOUBLE
62818: LD_VAR 0 8
62822: DEC
62823: ST_TO_ADDR
62824: LD_VAR 0 10
62828: PUSH
62829: FOR_TO
62830: IFFALSE 62888
// begin if not ValidHex ( _x , _y ) then
62832: LD_VAR 0 11
62836: PPUSH
62837: LD_VAR 0 12
62841: PPUSH
62842: CALL_OW 488
62846: NOT
62847: IFFALSE 62851
// continue ;
62849: GO 62829
// if MineAtPos ( _x , _y ) then
62851: LD_VAR 0 11
62855: PPUSH
62856: LD_VAR 0 12
62860: PPUSH
62861: CALL_OW 458
62865: IFFALSE 62886
// ViewMineAtPos ( _x , _y , side ) ;
62867: LD_VAR 0 11
62871: PPUSH
62872: LD_VAR 0 12
62876: PPUSH
62877: LD_VAR 0 3
62881: PPUSH
62882: CALL_OW 457
// end ;
62886: GO 62829
62888: POP
62889: POP
62890: GO 62809
62892: POP
62893: POP
// end ;
62894: LD_VAR 0 2
62898: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
62899: LD_INT 0
62901: PPUSH
62902: PPUSH
62903: PPUSH
62904: PPUSH
62905: PPUSH
62906: PPUSH
62907: PPUSH
// if not units then
62908: LD_VAR 0 1
62912: NOT
62913: IFFALSE 62917
// exit ;
62915: GO 63381
// scaners := [ ] ;
62917: LD_ADDR_VAR 0 6
62921: PUSH
62922: EMPTY
62923: ST_TO_ADDR
// for i in units do
62924: LD_ADDR_VAR 0 3
62928: PUSH
62929: LD_VAR 0 1
62933: PUSH
62934: FOR_IN
62935: IFFALSE 63092
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
62937: LD_VAR 0 3
62941: PPUSH
62942: CALL_OW 264
62946: PUSH
62947: LD_INT 11
62949: NONEQUAL
62950: IFTRUE 62964
62952: PUSH
62953: LD_VAR 0 3
62957: PPUSH
62958: CALL_OW 302
62962: NOT
62963: OR
62964: IFTRUE 62981
62966: PUSH
62967: LD_VAR 0 3
62971: PPUSH
62972: CALL_OW 110
62976: PUSH
62977: LD_INT 502
62979: EQUAL
62980: OR
62981: IFFALSE 62985
// continue ;
62983: GO 62934
// ComStop ( i ) ;
62985: LD_VAR 0 3
62989: PPUSH
62990: CALL_OW 141
// x := GetX ( i ) ;
62994: LD_ADDR_VAR 0 4
62998: PUSH
62999: LD_VAR 0 3
63003: PPUSH
63004: CALL_OW 250
63008: ST_TO_ADDR
// y := GetY ( i ) ;
63009: LD_ADDR_VAR 0 5
63013: PUSH
63014: LD_VAR 0 3
63018: PPUSH
63019: CALL_OW 251
63023: ST_TO_ADDR
// if GetSide ( i ) = your_side then
63024: LD_VAR 0 3
63028: PPUSH
63029: CALL_OW 255
63033: PUSH
63034: LD_OWVAR 2
63038: EQUAL
63039: IFFALSE 63058
// PlaySoundXY ( x , y , mineDetector ) ;
63041: LD_VAR 0 4
63045: PPUSH
63046: LD_VAR 0 5
63050: PPUSH
63051: LD_STRING mineDetector
63053: PPUSH
63054: CALL_OW 366
// scaners := Join ( scaners , i ) ;
63058: LD_ADDR_VAR 0 6
63062: PUSH
63063: LD_VAR 0 6
63067: PPUSH
63068: LD_VAR 0 3
63072: PPUSH
63073: CALL 41209 0 2
63077: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
63078: LD_VAR 0 3
63082: PPUSH
63083: LD_INT 502
63085: PPUSH
63086: CALL_OW 109
// end ;
63090: GO 62934
63092: POP
63093: POP
// if not scaners then
63094: LD_VAR 0 6
63098: NOT
63099: IFFALSE 63103
// exit ;
63101: GO 63381
// wait ( 3 ) ;
63103: LD_INT 3
63105: PPUSH
63106: CALL_OW 67
// timer := 6 ;
63110: LD_ADDR_VAR 0 7
63114: PUSH
63115: LD_INT 6
63117: ST_TO_ADDR
// repeat for i in scaners do
63118: LD_ADDR_VAR 0 3
63122: PUSH
63123: LD_VAR 0 6
63127: PUSH
63128: FOR_IN
63129: IFFALSE 63279
// begin side := GetSide ( i ) ;
63131: LD_ADDR_VAR 0 8
63135: PUSH
63136: LD_VAR 0 3
63140: PPUSH
63141: CALL_OW 255
63145: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
63146: LD_VAR 0 3
63150: PPUSH
63151: CALL_OW 302
63155: NOT
63156: IFTRUE 63169
63158: PUSH
63159: LD_VAR 0 3
63163: PPUSH
63164: CALL_OW 314
63168: OR
63169: IFTRUE 63200
63171: PUSH
63172: LD_VAR 0 3
63176: PPUSH
63177: CALL_OW 263
63181: PUSH
63182: LD_INT 1
63184: EQUAL
63185: IFFALSE 63199
63187: PUSH
63188: LD_VAR 0 3
63192: PPUSH
63193: CALL_OW 311
63197: NOT
63198: AND
63199: OR
63200: IFFALSE 63244
// begin SetUnitDisplayNumber ( i , 0 ) ;
63202: LD_VAR 0 3
63206: PPUSH
63207: LD_INT 0
63209: PPUSH
63210: CALL_OW 505
// SetTag ( i , 0 ) ;
63214: LD_VAR 0 3
63218: PPUSH
63219: LD_INT 0
63221: PPUSH
63222: CALL_OW 109
// scaners := scaners diff i ;
63226: LD_ADDR_VAR 0 6
63230: PUSH
63231: LD_VAR 0 6
63235: PUSH
63236: LD_VAR 0 3
63240: DIFF
63241: ST_TO_ADDR
// continue ;
63242: GO 63128
// end ; if side in [ your_side , 9 ] then
63244: LD_VAR 0 8
63248: PUSH
63249: LD_OWVAR 2
63253: PUSH
63254: LD_INT 9
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: IN
63261: IFFALSE 63277
// SetUnitDisplayNumber ( i , timer ) ;
63263: LD_VAR 0 3
63267: PPUSH
63268: LD_VAR 0 7
63272: PPUSH
63273: CALL_OW 505
// end ;
63277: GO 63128
63279: POP
63280: POP
// if not scaners then
63281: LD_VAR 0 6
63285: NOT
63286: IFFALSE 63290
// exit ;
63288: GO 63381
// timer := Dec ( timer ) ;
63290: LD_ADDR_VAR 0 7
63294: PUSH
63295: LD_VAR 0 7
63299: PPUSH
63300: CALL 42604 0 1
63304: ST_TO_ADDR
// wait ( 0 0$1 ) ;
63305: LD_INT 35
63307: PPUSH
63308: CALL_OW 67
// until timer = 0 ;
63312: LD_VAR 0 7
63316: PUSH
63317: LD_INT 0
63319: EQUAL
63320: IFFALSE 63118
// if not scaners then
63322: LD_VAR 0 6
63326: NOT
63327: IFFALSE 63331
// exit ;
63329: GO 63381
// for i in scaners do
63331: LD_ADDR_VAR 0 3
63335: PUSH
63336: LD_VAR 0 6
63340: PUSH
63341: FOR_IN
63342: IFFALSE 63379
// begin SetUnitDisplayNumber ( i , 0 ) ;
63344: LD_VAR 0 3
63348: PPUSH
63349: LD_INT 0
63351: PPUSH
63352: CALL_OW 505
// SetTag ( i , 0 ) ;
63356: LD_VAR 0 3
63360: PPUSH
63361: LD_INT 0
63363: PPUSH
63364: CALL_OW 109
// RevealDetectorMine ( i ) ;
63368: LD_VAR 0 3
63372: PPUSH
63373: CALL 62601 0 1
// end ;
63377: GO 63341
63379: POP
63380: POP
// end ;
63381: LD_VAR 0 2
63385: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
63386: LD_INT 0
63388: PPUSH
// if p1 = mine_detector_mode then
63389: LD_VAR 0 2
63393: PUSH
63394: LD_INT 103
63396: EQUAL
63397: IFFALSE 63408
// DetectMine ( units ) ;
63399: LD_VAR 0 1
63403: PPUSH
63404: CALL 62899 0 1
// end ; end_of_file
63408: LD_VAR 0 7
63412: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
63413: PPOPN 6
63415: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
63416: LD_INT 0
63418: PPUSH
// begin if not units then
63419: LD_VAR 0 1
63423: NOT
63424: IFFALSE 63428
// exit ;
63426: GO 63462
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
63428: LD_VAR 0 1
63432: PPUSH
63433: LD_VAR 0 2
63437: PPUSH
63438: LD_VAR 0 3
63442: PPUSH
63443: LD_VAR 0 4
63447: PPUSH
63448: LD_VAR 0 5
63452: PPUSH
63453: LD_VAR 0 6
63457: PPUSH
63458: CALL 63386 0 6
// end ;
63462: PPOPN 7
63464: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
63465: LD_EXP 1
63469: PUSH
63470: LD_INT 4
63472: EQUAL
63473: IFFALSE 63509
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
63475: LD_STRING setGameDifficulty(
63477: PUSH
63478: LD_OWVAR 67
63482: STR
63483: PUSH
63484: LD_STRING )
63486: STR
63487: PPUSH
63488: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
63492: LD_STRING displayDifficulty(
63494: PUSH
63495: LD_OWVAR 67
63499: STR
63500: PUSH
63501: LD_STRING )
63503: STR
63504: PPUSH
63505: CALL_OW 559
// end ; SOS_MapStart ( ) ;
63509: CALL 63538 0 0
// end ; end_of_file
63513: PPOPN 1
63515: END
// every 0 0$1 do
63516: GO 63518
63518: DISABLE
// begin enable ;
63519: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
63520: LD_STRING updateTimer(
63522: PUSH
63523: LD_OWVAR 1
63527: STR
63528: PUSH
63529: LD_STRING );
63531: STR
63532: PPUSH
63533: CALL_OW 559
// end ;
63537: END
// export function SOS_MapStart ( ) ; begin
63538: LD_INT 0
63540: PPUSH
// UpdateFactoryWaypoints ( ) ;
63541: CALL 64472 0 0
// UpdateWarehouseGatheringPoints ( ) ;
63545: CALL 64724 0 0
// ParseMultiDataToLua ( ) ;
63549: CALL 64871 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
63553: LD_STRING setSpecLogoNumber(
63555: PUSH
63556: LD_INT 2
63558: STR
63559: PUSH
63560: LD_STRING ,
63562: STR
63563: PUSH
63564: LD_INT 1
63566: STR
63567: PUSH
63568: LD_STRING )
63570: STR
63571: PPUSH
63572: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
63576: LD_STRING setSpecLogoNumber(
63578: PUSH
63579: LD_INT 3
63581: STR
63582: PUSH
63583: LD_STRING ,
63585: STR
63586: PUSH
63587: LD_INT 2
63589: STR
63590: PUSH
63591: LD_STRING )
63593: STR
63594: PPUSH
63595: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
63599: LD_STRING setSpecLogoNumber(
63601: PUSH
63602: LD_INT 4
63604: STR
63605: PUSH
63606: LD_STRING ,
63608: STR
63609: PUSH
63610: LD_INT 3
63612: STR
63613: PUSH
63614: LD_STRING )
63616: STR
63617: PPUSH
63618: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
63622: LD_STRING setSpecLogoNumber(
63624: PUSH
63625: LD_INT 5
63627: STR
63628: PUSH
63629: LD_STRING ,
63631: STR
63632: PUSH
63633: LD_INT 4
63635: STR
63636: PUSH
63637: LD_STRING )
63639: STR
63640: PPUSH
63641: CALL_OW 559
// end ;
63645: LD_VAR 0 1
63649: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
63650: LD_INT 0
63652: PPUSH
63653: PPUSH
63654: PPUSH
63655: PPUSH
63656: PPUSH
63657: PPUSH
63658: PPUSH
63659: PPUSH
63660: PPUSH
// for i := 1 to 8 do
63661: LD_ADDR_VAR 0 2
63665: PUSH
63666: DOUBLE
63667: LD_INT 1
63669: DEC
63670: ST_TO_ADDR
63671: LD_INT 8
63673: PUSH
63674: FOR_TO
63675: IFFALSE 64060
// begin if mpSidePositions [ i ] then
63677: LD_EXP 5
63681: PUSH
63682: LD_VAR 0 2
63686: ARRAY
63687: IFFALSE 64058
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
63689: LD_ADDR_VAR 0 7
63693: PUSH
63694: LD_INT 22
63696: PUSH
63697: LD_VAR 0 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 21
63708: PUSH
63709: LD_INT 1
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PPUSH
63720: CALL_OW 69
63724: PPUSH
63725: CALL 5233 0 1
63729: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63730: LD_ADDR_VAR 0 9
63734: PUSH
63735: LD_INT 22
63737: PUSH
63738: LD_VAR 0 2
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: PUSH
63750: LD_INT 30
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 30
63762: PUSH
63763: LD_INT 1
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PPUSH
63779: CALL_OW 69
63783: ST_TO_ADDR
// crates := 0 ;
63784: LD_ADDR_VAR 0 4
63788: PUSH
63789: LD_INT 0
63791: ST_TO_ADDR
// oil := 0 ;
63792: LD_ADDR_VAR 0 5
63796: PUSH
63797: LD_INT 0
63799: ST_TO_ADDR
// sib := 0 ;
63800: LD_ADDR_VAR 0 6
63804: PUSH
63805: LD_INT 0
63807: ST_TO_ADDR
// if bases then
63808: LD_VAR 0 9
63812: IFFALSE 63918
// begin for j in bases do
63814: LD_ADDR_VAR 0 3
63818: PUSH
63819: LD_VAR 0 9
63823: PUSH
63824: FOR_IN
63825: IFFALSE 63916
// begin base := GetBase ( j ) ;
63827: LD_ADDR_VAR 0 8
63831: PUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: CALL_OW 274
63841: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
63842: LD_ADDR_VAR 0 4
63846: PUSH
63847: LD_VAR 0 4
63851: PUSH
63852: LD_VAR 0 8
63856: PPUSH
63857: LD_INT 1
63859: PPUSH
63860: CALL_OW 275
63864: PLUS
63865: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
63866: LD_ADDR_VAR 0 5
63870: PUSH
63871: LD_VAR 0 5
63875: PUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 2
63883: PPUSH
63884: CALL_OW 275
63888: PLUS
63889: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
63890: LD_ADDR_VAR 0 6
63894: PUSH
63895: LD_VAR 0 6
63899: PUSH
63900: LD_VAR 0 8
63904: PPUSH
63905: LD_INT 3
63907: PPUSH
63908: CALL_OW 275
63912: PLUS
63913: ST_TO_ADDR
// end ;
63914: GO 63824
63916: POP
63917: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
63918: LD_STRING setSpecText(
63920: PUSH
63921: LD_VAR 0 2
63925: STR
63926: PUSH
63927: LD_STRING ,
63929: STR
63930: PUSH
63931: LD_INT 2
63933: STR
63934: PUSH
63935: LD_STRING ,
63937: STR
63938: PUSH
63939: LD_VAR 0 4
63943: STR
63944: PUSH
63945: LD_STRING )
63947: STR
63948: PPUSH
63949: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
63953: LD_STRING setSpecText(
63955: PUSH
63956: LD_VAR 0 2
63960: STR
63961: PUSH
63962: LD_STRING ,
63964: STR
63965: PUSH
63966: LD_INT 3
63968: STR
63969: PUSH
63970: LD_STRING ,
63972: STR
63973: PUSH
63974: LD_VAR 0 5
63978: STR
63979: PUSH
63980: LD_STRING )
63982: STR
63983: PPUSH
63984: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
63988: LD_STRING setSpecText(
63990: PUSH
63991: LD_VAR 0 2
63995: STR
63996: PUSH
63997: LD_STRING ,
63999: STR
64000: PUSH
64001: LD_INT 4
64003: STR
64004: PUSH
64005: LD_STRING ,
64007: STR
64008: PUSH
64009: LD_VAR 0 6
64013: STR
64014: PUSH
64015: LD_STRING )
64017: STR
64018: PPUSH
64019: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
64023: LD_STRING setSpecText(
64025: PUSH
64026: LD_VAR 0 2
64030: STR
64031: PUSH
64032: LD_STRING ,
64034: STR
64035: PUSH
64036: LD_INT 5
64038: STR
64039: PUSH
64040: LD_STRING ,
64042: STR
64043: PUSH
64044: LD_VAR 0 7
64048: STR
64049: PUSH
64050: LD_STRING )
64052: STR
64053: PPUSH
64054: CALL_OW 559
// end ; end ;
64058: GO 63674
64060: POP
64061: POP
// end ;
64062: LD_VAR 0 1
64066: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
64067: LD_INT 2
64069: PUSH
64070: LD_INT 30
64072: PUSH
64073: LD_INT 0
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 30
64082: PUSH
64083: LD_INT 1
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: PPUSH
64095: CALL_OW 69
64099: IFFALSE 64109
64101: GO 64103
64103: DISABLE
// begin enable ;
64104: ENABLE
// UpdateSpectatorBar ;
64105: CALL 63650 0 0
// end ;
64109: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64110: LD_INT 0
64112: PPUSH
// end ;
64113: LD_VAR 0 12
64117: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64118: LD_INT 0
64120: PPUSH
64121: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64122: LD_VAR 0 1
64126: NOT
64127: IFTRUE 64146
64129: PUSH
64130: LD_VAR 0 2
64134: PPUSH
64135: LD_VAR 0 3
64139: PPUSH
64140: CALL_OW 488
64144: NOT
64145: OR
64146: IFTRUE 64181
64148: PUSH
64149: LD_VAR 0 1
64153: PPUSH
64154: CALL_OW 266
64158: PUSH
64159: LD_INT 3
64161: NONEQUAL
64162: IFFALSE 64180
64164: PUSH
64165: LD_VAR 0 1
64169: PPUSH
64170: CALL_OW 247
64174: PUSH
64175: LD_INT 1
64177: EQUAL
64178: NOT
64179: AND
64180: OR
64181: IFFALSE 64185
// exit ;
64183: GO 64467
// if GetType ( factory ) = unit_human then
64185: LD_VAR 0 1
64189: PPUSH
64190: CALL_OW 247
64194: PUSH
64195: LD_INT 1
64197: EQUAL
64198: IFFALSE 64215
// factory := IsInUnit ( factory ) ;
64200: LD_ADDR_VAR 0 1
64204: PUSH
64205: LD_VAR 0 1
64209: PPUSH
64210: CALL_OW 310
64214: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64215: LD_VAR 0 1
64219: PPUSH
64220: CALL_OW 266
64224: PUSH
64225: LD_INT 3
64227: NONEQUAL
64228: IFFALSE 64232
// exit ;
64230: GO 64467
// for i := 1 to Count ( factoryWaypoints ) do
64232: LD_ADDR_VAR 0 5
64236: PUSH
64237: DOUBLE
64238: LD_INT 1
64240: DEC
64241: ST_TO_ADDR
64242: LD_EXP 59
64246: PPUSH
64247: CALL 5233 0 1
64251: PUSH
64252: FOR_TO
64253: IFFALSE 64415
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64255: LD_VAR 0 2
64259: PPUSH
64260: LD_VAR 0 3
64264: PPUSH
64265: CALL_OW 428
64269: PUSH
64270: LD_EXP 59
64274: PUSH
64275: LD_VAR 0 5
64279: ARRAY
64280: PUSH
64281: LD_INT 2
64283: ARRAY
64284: EQUAL
64285: IFFALSE 64317
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64287: LD_ADDR_EXP 59
64291: PUSH
64292: LD_EXP 59
64296: PPUSH
64297: LD_VAR 0 5
64301: PPUSH
64302: CALL_OW 3
64306: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64307: CALL 64472 0 0
// exit ;
64311: POP
64312: POP
64313: GO 64467
// end else
64315: GO 64413
// if factory = factoryWaypoints [ i ] [ 2 ] then
64317: LD_VAR 0 1
64321: PUSH
64322: LD_EXP 59
64326: PUSH
64327: LD_VAR 0 5
64331: ARRAY
64332: PUSH
64333: LD_INT 2
64335: ARRAY
64336: EQUAL
64337: IFFALSE 64413
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64339: LD_ADDR_EXP 59
64343: PUSH
64344: LD_EXP 59
64348: PPUSH
64349: LD_VAR 0 5
64353: PPUSH
64354: CALL_OW 3
64358: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64359: LD_ADDR_EXP 59
64363: PUSH
64364: LD_EXP 59
64368: PPUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 255
64378: PUSH
64379: LD_VAR 0 1
64383: PUSH
64384: LD_VAR 0 2
64388: PUSH
64389: LD_VAR 0 3
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: PPUSH
64400: CALL 41209 0 2
64404: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64405: CALL 64472 0 0
// exit ;
64409: POP
64410: POP
64411: GO 64467
// end ; end ;
64413: GO 64252
64415: POP
64416: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64417: LD_ADDR_EXP 59
64421: PUSH
64422: LD_EXP 59
64426: PPUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 255
64436: PUSH
64437: LD_VAR 0 1
64441: PUSH
64442: LD_VAR 0 2
64446: PUSH
64447: LD_VAR 0 3
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: PPUSH
64458: CALL 41209 0 2
64462: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64463: CALL 64472 0 0
// end ;
64467: LD_VAR 0 4
64471: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64472: LD_INT 0
64474: PPUSH
64475: PPUSH
64476: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64477: LD_STRING resetFactoryWaypoint();
64479: PPUSH
64480: CALL_OW 559
// if factoryWaypoints then
64484: LD_EXP 59
64488: IFFALSE 64609
// begin list := factoryWaypoints ;
64490: LD_ADDR_VAR 0 3
64494: PUSH
64495: LD_EXP 59
64499: ST_TO_ADDR
// for i := 1 to list do
64500: LD_ADDR_VAR 0 2
64504: PUSH
64505: DOUBLE
64506: LD_INT 1
64508: DEC
64509: ST_TO_ADDR
64510: LD_VAR 0 3
64514: PUSH
64515: FOR_TO
64516: IFFALSE 64607
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64518: LD_STRING setFactoryWaypointXY(
64520: PUSH
64521: LD_VAR 0 3
64525: PUSH
64526: LD_VAR 0 2
64530: ARRAY
64531: PUSH
64532: LD_INT 1
64534: ARRAY
64535: STR
64536: PUSH
64537: LD_STRING ,
64539: STR
64540: PUSH
64541: LD_VAR 0 3
64545: PUSH
64546: LD_VAR 0 2
64550: ARRAY
64551: PUSH
64552: LD_INT 2
64554: ARRAY
64555: STR
64556: PUSH
64557: LD_STRING ,
64559: STR
64560: PUSH
64561: LD_VAR 0 3
64565: PUSH
64566: LD_VAR 0 2
64570: ARRAY
64571: PUSH
64572: LD_INT 3
64574: ARRAY
64575: STR
64576: PUSH
64577: LD_STRING ,
64579: STR
64580: PUSH
64581: LD_VAR 0 3
64585: PUSH
64586: LD_VAR 0 2
64590: ARRAY
64591: PUSH
64592: LD_INT 4
64594: ARRAY
64595: STR
64596: PUSH
64597: LD_STRING )
64599: STR
64600: PPUSH
64601: CALL_OW 559
64605: GO 64515
64607: POP
64608: POP
// end ; end ;
64609: LD_VAR 0 1
64613: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64614: LD_INT 0
64616: PPUSH
// if HexInfo ( x , y ) = warehouse then
64617: LD_VAR 0 2
64621: PPUSH
64622: LD_VAR 0 3
64626: PPUSH
64627: CALL_OW 428
64631: PUSH
64632: LD_VAR 0 1
64636: EQUAL
64637: IFFALSE 64664
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64639: LD_ADDR_EXP 61
64643: PUSH
64644: LD_EXP 61
64648: PPUSH
64649: LD_VAR 0 1
64653: PPUSH
64654: LD_INT 0
64656: PPUSH
64657: CALL_OW 1
64661: ST_TO_ADDR
64662: GO 64715
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64664: LD_ADDR_EXP 61
64668: PUSH
64669: LD_EXP 61
64673: PPUSH
64674: LD_VAR 0 1
64678: PPUSH
64679: LD_VAR 0 1
64683: PPUSH
64684: CALL_OW 255
64688: PUSH
64689: LD_VAR 0 1
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_VAR 0 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: PPUSH
64710: CALL_OW 1
64714: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64715: CALL 64724 0 0
// end ;
64719: LD_VAR 0 4
64723: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64724: LD_INT 0
64726: PPUSH
64727: PPUSH
64728: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64729: LD_STRING resetWarehouseGatheringPoints();
64731: PPUSH
64732: CALL_OW 559
// if warehouseGatheringPoints then
64736: LD_EXP 61
64740: IFFALSE 64866
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64742: LD_ADDR_VAR 0 3
64746: PUSH
64747: LD_EXP 61
64751: PPUSH
64752: CALL 45143 0 1
64756: ST_TO_ADDR
// for i := 1 to list do
64757: LD_ADDR_VAR 0 2
64761: PUSH
64762: DOUBLE
64763: LD_INT 1
64765: DEC
64766: ST_TO_ADDR
64767: LD_VAR 0 3
64771: PUSH
64772: FOR_TO
64773: IFFALSE 64864
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64775: LD_STRING setWarehouseGatheringPointXY(
64777: PUSH
64778: LD_VAR 0 3
64782: PUSH
64783: LD_VAR 0 2
64787: ARRAY
64788: PUSH
64789: LD_INT 1
64791: ARRAY
64792: STR
64793: PUSH
64794: LD_STRING ,
64796: STR
64797: PUSH
64798: LD_VAR 0 3
64802: PUSH
64803: LD_VAR 0 2
64807: ARRAY
64808: PUSH
64809: LD_INT 2
64811: ARRAY
64812: STR
64813: PUSH
64814: LD_STRING ,
64816: STR
64817: PUSH
64818: LD_VAR 0 3
64822: PUSH
64823: LD_VAR 0 2
64827: ARRAY
64828: PUSH
64829: LD_INT 3
64831: ARRAY
64832: STR
64833: PUSH
64834: LD_STRING ,
64836: STR
64837: PUSH
64838: LD_VAR 0 3
64842: PUSH
64843: LD_VAR 0 2
64847: ARRAY
64848: PUSH
64849: LD_INT 4
64851: ARRAY
64852: STR
64853: PUSH
64854: LD_STRING )
64856: STR
64857: PPUSH
64858: CALL_OW 559
64862: GO 64772
64864: POP
64865: POP
// end ; end ;
64866: LD_VAR 0 1
64870: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
64871: LD_INT 0
64873: PPUSH
64874: PPUSH
// if not mpSidePositions then
64875: LD_EXP 5
64879: NOT
64880: IFFALSE 64884
// exit ;
64882: GO 64955
// result :=  ;
64884: LD_ADDR_VAR 0 1
64888: PUSH
64889: LD_STRING 
64891: ST_TO_ADDR
// for i := 1 to 8 do
64892: LD_ADDR_VAR 0 2
64896: PUSH
64897: DOUBLE
64898: LD_INT 1
64900: DEC
64901: ST_TO_ADDR
64902: LD_INT 8
64904: PUSH
64905: FOR_TO
64906: IFFALSE 64936
// begin result := result & mpSidePositions [ i ] & ; ;
64908: LD_ADDR_VAR 0 1
64912: PUSH
64913: LD_VAR 0 1
64917: PUSH
64918: LD_EXP 5
64922: PUSH
64923: LD_VAR 0 2
64927: ARRAY
64928: STR
64929: PUSH
64930: LD_STRING ;
64932: STR
64933: ST_TO_ADDR
// end ;
64934: GO 64905
64936: POP
64937: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
64938: LD_STRING setMultiplayerRealPosition("
64940: PUSH
64941: LD_VAR 0 1
64945: STR
64946: PUSH
64947: LD_STRING ");
64949: STR
64950: PPUSH
64951: CALL_OW 559
// end ; end_of_file
64955: LD_VAR 0 1
64959: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvivalH do var i ;
64960: LD_EXP 37
64964: IFFALSE 65007
64966: GO 64968
64968: DISABLE
64969: LD_INT 0
64971: PPUSH
// begin for i := 1 to 8 do
64972: LD_ADDR_VAR 0 1
64976: PUSH
64977: DOUBLE
64978: LD_INT 1
64980: DEC
64981: ST_TO_ADDR
64982: LD_INT 8
64984: PUSH
64985: FOR_TO
64986: IFFALSE 65005
// SetRestrict ( b_depot , i , state_disabled ) ;
64988: LD_INT 0
64990: PPUSH
64991: LD_VAR 0 1
64995: PPUSH
64996: LD_INT 0
64998: PPUSH
64999: CALL_OW 324
65003: GO 64985
65005: POP
65006: POP
// end ;
65007: PPOPN 1
65009: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvivalH do var i , canWin ;
65010: LD_EXP 37
65014: IFFALSE 65022
65016: PUSH
65017: CALL 65232 0 0
65021: AND
65022: IFFALSE 65030
65024: PUSH
65025: LD_OWVAR 4
65029: AND
65030: IFFALSE 65229
65032: GO 65034
65034: DISABLE
65035: LD_INT 0
65037: PPUSH
65038: PPUSH
// begin canWin := false ;
65039: LD_ADDR_VAR 0 2
65043: PUSH
65044: LD_INT 0
65046: ST_TO_ADDR
// if not HasPower ( your_side ) then
65047: LD_OWVAR 2
65051: PPUSH
65052: CALL 65274 0 1
65056: NOT
65057: IFFALSE 65068
// begin Multiplayer_Loose_Message ;
65059: CALL_OW 521
// enable ( mpLose ) ;
65063: LD_INT 102
65065: ENABLE_MARKED
// end else
65066: GO 65229
// begin canWin := true ;
65068: LD_ADDR_VAR 0 2
65072: PUSH
65073: LD_INT 1
65075: ST_TO_ADDR
// for i := 1 to 8 do
65076: LD_ADDR_VAR 0 1
65080: PUSH
65081: DOUBLE
65082: LD_INT 1
65084: DEC
65085: ST_TO_ADDR
65086: LD_INT 8
65088: PUSH
65089: FOR_TO
65090: IFFALSE 65215
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
65092: LD_EXP 5
65096: PUSH
65097: LD_VAR 0 1
65101: ARRAY
65102: IFFALSE 65115
65104: PUSH
65105: LD_VAR 0 1
65109: PPUSH
65110: CALL_OW 108
65114: AND
65115: IFFALSE 65129
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: LD_OWVAR 2
65127: NONEQUAL
65128: AND
65129: IFFALSE 65213
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
65131: LD_EXP 6
65135: PUSH
65136: LD_VAR 0 1
65140: ARRAY
65141: NOT
65142: IFTRUE 65190
65144: PUSH
65145: LD_EXP 6
65149: PUSH
65150: LD_VAR 0 1
65154: ARRAY
65155: PUSH
65156: LD_EXP 6
65160: PUSH
65161: LD_OWVAR 2
65165: ARRAY
65166: NONEQUAL
65167: IFFALSE 65189
65169: PUSH
65170: LD_OWVAR 2
65174: PPUSH
65175: LD_VAR 0 1
65179: PPUSH
65180: CALL_OW 81
65184: PUSH
65185: LD_INT 1
65187: NONEQUAL
65188: AND
65189: OR
65190: IFFALSE 65213
// if HasPower ( i ) then
65192: LD_VAR 0 1
65196: PPUSH
65197: CALL 65274 0 1
65201: IFFALSE 65213
// begin canWin := false ;
65203: LD_ADDR_VAR 0 2
65207: PUSH
65208: LD_INT 0
65210: ST_TO_ADDR
// break ;
65211: GO 65215
// end ;
65213: GO 65089
65215: POP
65216: POP
// if canWin then
65217: LD_VAR 0 2
65221: IFFALSE 65228
// enable ( mpWin ) else
65223: LD_INT 101
65225: ENABLE_MARKED
65226: GO 65229
// enable ;
65228: ENABLE
// end ; end ;
65229: PPOPN 2
65231: END
// function CanWinLoose ; begin
65232: LD_INT 0
65234: PPUSH
// result := true ;
65235: LD_ADDR_VAR 0 1
65239: PUSH
65240: LD_INT 1
65242: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
65243: CALL_OW 531
65247: IFFALSE 65259
65249: PUSH
65250: CALL_OW 519
65254: PUSH
65255: LD_INT 1
65257: GREATER
65258: AND
65259: IFFALSE 65269
// result := false ;
65261: LD_ADDR_VAR 0 1
65265: PUSH
65266: LD_INT 0
65268: ST_TO_ADDR
// end ;
65269: LD_VAR 0 1
65273: RET
// function HasPower ( i ) ; begin
65274: LD_INT 0
65276: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
65277: LD_INT 22
65279: PUSH
65280: LD_VAR 0 1
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: PUSH
65292: LD_INT 30
65294: PUSH
65295: LD_INT 0
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 30
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PPUSH
65321: CALL_OW 69
65325: NOT
65326: IFFALSE 65330
// exit ;
65328: GO 65395
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
65330: LD_ADDR_VAR 0 2
65334: PUSH
65335: LD_INT 22
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: LD_INT 21
65352: PUSH
65353: LD_INT 1
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 33
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 33
65372: PUSH
65373: LD_INT 5
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PPUSH
65390: CALL_OW 69
65394: ST_TO_ADDR
// end ;
65395: LD_VAR 0 2
65399: RET
