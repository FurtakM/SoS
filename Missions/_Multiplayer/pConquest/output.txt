// starting begin ResetFog ;
   0: CALL_OW 335
// InitMultiplayer ;
   4: CALL 46419 0 0
// InitMultiplayerSettings ;
   8: CALL 17 0 0
// StartMultiplayer ;
  12: CALL 46795 0 0
// end ; end_of_file
  16: END
// export function InitMultiplayerSettings ; begin
  17: LD_INT 0
  19: PPUSH
// mpGameSettingsKeys := [ 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 ] ;
  20: LD_ADDR_EXP 2
  24: PUSH
  25: LD_INT 1
  27: PUSH
  28: LD_INT 1
  30: PUSH
  31: LD_INT 1
  33: PUSH
  34: LD_INT 1
  36: PUSH
  37: LD_INT 1
  39: PUSH
  40: LD_INT 1
  42: PUSH
  43: LD_INT 1
  45: PUSH
  46: LD_INT 1
  48: PUSH
  49: LD_INT 1
  51: PUSH
  52: LD_INT 1
  54: PUSH
  55: LD_INT 1
  57: PUSH
  58: LD_INT 1
  60: PUSH
  61: LD_INT 1
  63: PUSH
  64: LD_INT 1
  66: PUSH
  67: LD_INT 1
  69: PUSH
  70: LD_INT 0
  72: PUSH
  73: LD_INT 0
  75: PUSH
  76: LD_INT 1
  78: PUSH
  79: LD_INT 0
  81: PUSH
  82: LD_INT 0
  84: PUSH
  85: LD_INT 1
  87: PUSH
  88: EMPTY
  89: LIST
  90: LIST
  91: LIST
  92: LIST
  93: LIST
  94: LIST
  95: LIST
  96: LIST
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: LIST
 102: LIST
 103: LIST
 104: LIST
 105: LIST
 106: LIST
 107: LIST
 108: LIST
 109: LIST
 110: ST_TO_ADDR
// mpGameSettingsValues := [ [ 0 , 1 , 2 ] , [ 9 , 12 , 15 , 24 ] , [ 1 , 3 , 5 , 7 ] , [ [ 0 , 0 , 0 ] , [ 100 , 30 , 0 ] , [ 200 , 75 , 10 ] , [ 500 , 150 , 30 ] ] , [ 1 , 2 , 3 , 4 ] , [ 0 , 1 , 2 ] , [ 0 , 1 , 2 ] , [ 250 , 350 , 500 , 1000 , 2000 ] , [ 0 , 2 ] , [ 0 , 5 5$00 , 10 10$00 , 15 15$00 , 20 20$00 , 30 30$00 ] , [ 0 , 1 ] , [ - 1 , 0 0$10 , 0 0$20 , 0 0$40 , 0 0$0 ] , [ 0 , 1 ] , [ 0 , 6 6$30 , 3 3$30 ] , [ 0 , 2 , 4 , 6 ] , [ ] , [ ] , [ 0 , 1 , 15 15$0 , 25 25$0 , 30 30$0 , 45 45$0 , 60 60$0 , 90 90$0 , 100 100$0 , 120 120$0 , 180 180$0 ] , [ ] , [ ] , [ 0 , 3 3$0 , 5 5$0 , 8 8$0 , 10 10$0 , 12 12$0 , 15 15$0 , 20 20$0 , 30 30$0 ] ] ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_INT 0
 118: PUSH
 119: LD_INT 1
 121: PUSH
 122: LD_INT 2
 124: PUSH
 125: EMPTY
 126: LIST
 127: LIST
 128: LIST
 129: PUSH
 130: LD_INT 9
 132: PUSH
 133: LD_INT 12
 135: PUSH
 136: LD_INT 15
 138: PUSH
 139: LD_INT 24
 141: PUSH
 142: EMPTY
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: PUSH
 148: LD_INT 1
 150: PUSH
 151: LD_INT 3
 153: PUSH
 154: LD_INT 5
 156: PUSH
 157: LD_INT 7
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: LD_INT 100
 182: PUSH
 183: LD_INT 30
 185: PUSH
 186: LD_INT 0
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: LIST
 193: PUSH
 194: LD_INT 200
 196: PUSH
 197: LD_INT 75
 199: PUSH
 200: LD_INT 10
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_INT 500
 210: PUSH
 211: LD_INT 150
 213: PUSH
 214: LD_INT 30
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: PUSH
 222: EMPTY
 223: LIST
 224: LIST
 225: LIST
 226: LIST
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: LD_INT 2
 233: PUSH
 234: LD_INT 3
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: LIST
 244: LIST
 245: PUSH
 246: LD_INT 0
 248: PUSH
 249: LD_INT 1
 251: PUSH
 252: LD_INT 2
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: LIST
 259: PUSH
 260: LD_INT 0
 262: PUSH
 263: LD_INT 1
 265: PUSH
 266: LD_INT 2
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: LIST
 273: PUSH
 274: LD_INT 250
 276: PUSH
 277: LD_INT 350
 279: PUSH
 280: LD_INT 500
 282: PUSH
 283: LD_INT 1000
 285: PUSH
 286: LD_INT 2000
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: LD_INT 2
 301: PUSH
 302: EMPTY
 303: LIST
 304: LIST
 305: PUSH
 306: LD_INT 0
 308: PUSH
 309: LD_INT 10500
 311: PUSH
 312: LD_INT 21000
 314: PUSH
 315: LD_INT 31500
 317: PUSH
 318: LD_INT 42000
 320: PUSH
 321: LD_INT 63000
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: LD_INT 1
 337: PUSH
 338: EMPTY
 339: LIST
 340: LIST
 341: PUSH
 342: LD_INT 1
 344: NEG
 345: PUSH
 346: LD_INT 350
 348: PUSH
 349: LD_INT 700
 351: PUSH
 352: LD_INT 1400
 354: PUSH
 355: LD_INT 0
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: LIST
 362: LIST
 363: LIST
 364: PUSH
 365: LD_INT 0
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: LD_INT 13650
 380: PUSH
 381: LD_INT 7350
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: LD_INT 2
 394: PUSH
 395: LD_INT 4
 397: PUSH
 398: LD_INT 6
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: LIST
 406: PUSH
 407: EMPTY
 408: PUSH
 409: EMPTY
 410: PUSH
 411: LD_INT 0
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: LD_INT 31500
 419: PUSH
 420: LD_INT 52500
 422: PUSH
 423: LD_INT 63000
 425: PUSH
 426: LD_INT 94500
 428: PUSH
 429: LD_INT 126000
 431: PUSH
 432: LD_INT 189000
 434: PUSH
 435: LD_INT 210000
 437: PUSH
 438: LD_INT 252000
 440: PUSH
 441: LD_INT 378000
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: LIST
 449: LIST
 450: LIST
 451: LIST
 452: LIST
 453: LIST
 454: LIST
 455: LIST
 456: PUSH
 457: EMPTY
 458: PUSH
 459: EMPTY
 460: PUSH
 461: LD_INT 0
 463: PUSH
 464: LD_INT 6300
 466: PUSH
 467: LD_INT 10500
 469: PUSH
 470: LD_INT 16800
 472: PUSH
 473: LD_INT 21000
 475: PUSH
 476: LD_INT 25200
 478: PUSH
 479: LD_INT 31500
 481: PUSH
 482: LD_INT 42000
 484: PUSH
 485: LD_INT 63000
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: LIST
 492: LIST
 493: LIST
 494: LIST
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: LIST
 506: LIST
 507: LIST
 508: LIST
 509: LIST
 510: LIST
 511: LIST
 512: LIST
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// mpGameSettings := [ 2 , 15 , 4 , [ 100 , 30 , 0 ] , 3 , 1 , 2 , 250 , 2 , 5 5$00 , 1 , 0 0$20 , 1 , 0 0$20 , 3 , 0 , 0 , 15 15$0 , 0 , 0 , 0 ] ;
 522: LD_ADDR_EXP 4
 526: PUSH
 527: LD_INT 2
 529: PUSH
 530: LD_INT 15
 532: PUSH
 533: LD_INT 4
 535: PUSH
 536: LD_INT 100
 538: PUSH
 539: LD_INT 30
 541: PUSH
 542: LD_INT 0
 544: PUSH
 545: EMPTY
 546: LIST
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: LD_INT 2
 558: PUSH
 559: LD_INT 250
 561: PUSH
 562: LD_INT 2
 564: PUSH
 565: LD_INT 10500
 567: PUSH
 568: LD_INT 1
 570: PUSH
 571: LD_INT 700
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: LD_INT 700
 579: PUSH
 580: LD_INT 3
 582: PUSH
 583: LD_INT 0
 585: PUSH
 586: LD_INT 0
 588: PUSH
 589: LD_INT 31500
 591: PUSH
 592: LD_INT 0
 594: PUSH
 595: LD_INT 0
 597: PUSH
 598: LD_INT 0
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: LIST
 607: LIST
 608: LIST
 609: LIST
 610: LIST
 611: LIST
 612: LIST
 613: LIST
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: LIST
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: ST_TO_ADDR
// mpGameType := GameTypeKing ;
 624: LD_ADDR_EXP 1
 628: PUSH
 629: LD_INT 3
 631: ST_TO_ADDR
// your_side := 1 ;
 632: LD_ADDR_OWVAR 2
 636: PUSH
 637: LD_INT 1
 639: ST_TO_ADDR
// mpSidePositions := [ 8 , 2 , 3 , 4 , 5 , 6 , 7 , 1 ] ;
 640: LD_ADDR_EXP 5
 644: PUSH
 645: LD_INT 8
 647: PUSH
 648: LD_INT 2
 650: PUSH
 651: LD_INT 3
 653: PUSH
 654: LD_INT 4
 656: PUSH
 657: LD_INT 5
 659: PUSH
 660: LD_INT 6
 662: PUSH
 663: LD_INT 7
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: LIST
 676: LIST
 677: LIST
 678: ST_TO_ADDR
// mpSideTeams := [ 1 , 2 , 2 , 3 , 3 , 4 , 4 , 1 ] ;
 679: LD_ADDR_EXP 6
 683: PUSH
 684: LD_INT 1
 686: PUSH
 687: LD_INT 2
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: LD_INT 3
 695: PUSH
 696: LD_INT 3
 698: PUSH
 699: LD_INT 4
 701: PUSH
 702: LD_INT 4
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: EMPTY
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: LIST
 717: ST_TO_ADDR
// mpSideNations := [ 3 , 3 , 3 , 3 , 3 , 3 , 3 , 3 ] ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_INT 3
 725: PUSH
 726: LD_INT 3
 728: PUSH
 729: LD_INT 3
 731: PUSH
 732: LD_INT 3
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 3
 740: PUSH
 741: LD_INT 3
 743: PUSH
 744: LD_INT 3
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: ST_TO_ADDR
// mpTeams := [ [ 1 , 8 ] , [ 2 , 3 ] , [ 4 , 5 ] , [ 6 , 7 ] ] ;
 757: LD_ADDR_EXP 8
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: LD_INT 8
 767: PUSH
 768: EMPTY
 769: LIST
 770: LIST
 771: PUSH
 772: LD_INT 2
 774: PUSH
 775: LD_INT 3
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PUSH
 782: LD_INT 4
 784: PUSH
 785: LD_INT 5
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 6
 794: PUSH
 795: LD_INT 7
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: ST_TO_ADDR
// mpTeams := [ ] ;
 808: LD_ADDR_EXP 8
 812: PUSH
 813: EMPTY
 814: ST_TO_ADDR
// mpTeamGame := false ;
 815: LD_ADDR_EXP 9
 819: PUSH
 820: LD_INT 0
 822: ST_TO_ADDR
// mpMapSize := [ 160 , 200 ] ;
 823: LD_ADDR_EXP 27
 827: PUSH
 828: LD_INT 160
 830: PUSH
 831: LD_INT 200
 833: PUSH
 834: EMPTY
 835: LIST
 836: LIST
 837: ST_TO_ADDR
// end ;
 838: LD_VAR 0 1
 842: RET
// export function GetMultiplayerMapData ( gameType ) ; var i , all , hasOil , hasSib , baseLevel , startPos ; begin
 843: LD_INT 0
 845: PPUSH
 846: PPUSH
 847: PPUSH
 848: PPUSH
 849: PPUSH
 850: PPUSH
 851: PPUSH
// mpBuildUpAreas := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
 852: LD_ADDR_EXP 17
 856: PUSH
 857: LD_INT 1
 859: PUSH
 860: LD_INT 2
 862: PUSH
 863: LD_INT 3
 865: PUSH
 866: LD_INT 4
 868: PUSH
 869: LD_INT 5
 871: PUSH
 872: LD_INT 6
 874: PUSH
 875: LD_INT 7
 877: PUSH
 878: LD_INT 8
 880: PUSH
 881: EMPTY
 882: LIST
 883: LIST
 884: LIST
 885: LIST
 886: LIST
 887: LIST
 888: LIST
 889: LIST
 890: ST_TO_ADDR
// mpMarkedAreas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] union mpBuildUpAreas ;
 891: LD_ADDR_EXP 16
 895: PUSH
 896: LD_INT 9
 898: PUSH
 899: LD_INT 10
 901: PUSH
 902: LD_INT 11
 904: PUSH
 905: LD_INT 12
 907: PUSH
 908: LD_INT 13
 910: PUSH
 911: LD_INT 14
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: PUSH
 922: LD_EXP 17
 926: UNION
 927: ST_TO_ADDR
// if gameType = GameTypeSurvival then
 928: LD_VAR 0 1
 932: PUSH
 933: LD_INT 2
 935: EQUAL
 936: IFFALSE 948
// baseLevel := 1 else
 938: LD_ADDR_VAR 0 7
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
 946: GO 962
// baseLevel := mpGameSettings [ 1 ] ;
 948: LD_ADDR_VAR 0 7
 952: PUSH
 953: LD_EXP 4
 957: PUSH
 958: LD_INT 1
 960: ARRAY
 961: ST_TO_ADDR
// mpPeopleAmount := mpGameSettings [ 2 ] ;
 962: LD_ADDR_EXP 22
 966: PUSH
 967: LD_EXP 4
 971: PUSH
 972: LD_INT 2
 974: ARRAY
 975: ST_TO_ADDR
// mpPeopleSkill := mpGameSettings [ 3 ] ;
 976: LD_ADDR_EXP 23
 980: PUSH
 981: LD_EXP 4
 985: PUSH
 986: LD_INT 3
 988: ARRAY
 989: ST_TO_ADDR
// mpStartingResources := mpGameSettings [ 4 ] ;
 990: LD_ADDR_EXP 13
 994: PUSH
 995: LD_EXP 4
 999: PUSH
1000: LD_INT 4
1002: ARRAY
1003: ST_TO_ADDR
// mpShipments := mpGameSettings [ 5 ] ;
1004: LD_ADDR_EXP 25
1008: PUSH
1009: LD_EXP 4
1013: PUSH
1014: LD_INT 5
1016: ARRAY
1017: ST_TO_ADDR
// hasOil := mpGameSettings [ 6 ] > 0 ;
1018: LD_ADDR_VAR 0 5
1022: PUSH
1023: LD_EXP 4
1027: PUSH
1028: LD_INT 6
1030: ARRAY
1031: PUSH
1032: LD_INT 0
1034: GREATER
1035: ST_TO_ADDR
// hasSib := mpGameSettings [ 7 ] > 0 ;
1036: LD_ADDR_VAR 0 6
1040: PUSH
1041: LD_EXP 4
1045: PUSH
1046: LD_INT 7
1048: ARRAY
1049: PUSH
1050: LD_INT 0
1052: GREATER
1053: ST_TO_ADDR
// if gameType = GameTypeKing then
1054: LD_VAR 0 1
1058: PUSH
1059: LD_INT 3
1061: EQUAL
1062: IFFALSE 1102
// begin mpKingArea := kingArea ;
1064: LD_ADDR_EXP 32
1068: PUSH
1069: LD_INT 15
1071: ST_TO_ADDR
// mpPoints := mpGameSettings [ 8 ] ;
1072: LD_ADDR_EXP 33
1076: PUSH
1077: LD_EXP 4
1081: PUSH
1082: LD_INT 8
1084: ARRAY
1085: ST_TO_ADDR
// mpEmissions := mpGameSettings [ 10 ] ;
1086: LD_ADDR_EXP 35
1090: PUSH
1091: LD_EXP 4
1095: PUSH
1096: LD_INT 10
1098: ARRAY
1099: ST_TO_ADDR
// end else
1100: GO 1126
// begin mpKingArea := 0 ;
1102: LD_ADDR_EXP 32
1106: PUSH
1107: LD_INT 0
1109: ST_TO_ADDR
// mpPoints := 0 ;
1110: LD_ADDR_EXP 33
1114: PUSH
1115: LD_INT 0
1117: ST_TO_ADDR
// mpEmissions := 0 ;
1118: LD_ADDR_EXP 35
1122: PUSH
1123: LD_INT 0
1125: ST_TO_ADDR
// end ; if mpGameSettings [ 9 ] then
1126: LD_EXP 4
1130: PUSH
1131: LD_INT 9
1133: ARRAY
1134: IFFALSE 1266
// begin mpVehicles := [ [ [ us_light_wheeled , engine_combustion , control_manual , us_machine_gun ] , [ us_light_wheeled , engine_combustion , control_manual , us_light_gun ] ] , [ [ ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun ] , [ ar_light_trike , engine_combustion , control_manual , ar_light_gun ] ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] ] ] ;
1136: LD_ADDR_EXP 34
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: LD_INT 1
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: LIST
1157: LIST
1158: PUSH
1159: LD_INT 1
1161: PUSH
1162: LD_INT 1
1164: PUSH
1165: LD_INT 1
1167: PUSH
1168: LD_INT 3
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: LD_INT 1
1189: PUSH
1190: LD_INT 24
1192: PUSH
1193: EMPTY
1194: LIST
1195: LIST
1196: LIST
1197: LIST
1198: PUSH
1199: LD_INT 12
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 1
1207: PUSH
1208: LD_INT 23
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: LD_INT 21
1223: PUSH
1224: LD_INT 1
1226: PUSH
1227: LD_INT 1
1229: PUSH
1230: LD_INT 42
1232: PUSH
1233: EMPTY
1234: LIST
1235: LIST
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 21
1241: PUSH
1242: LD_INT 1
1244: PUSH
1245: LD_INT 1
1247: PUSH
1248: LD_INT 42
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: LIST
1265: ST_TO_ADDR
// end ; mpSharedVision := mpGameSettings [ 11 ] ;
1266: LD_ADDR_EXP 14
1270: PUSH
1271: LD_EXP 4
1275: PUSH
1276: LD_INT 11
1278: ARRAY
1279: ST_TO_ADDR
// mpBattleFlag := mpGameSettings [ 12 ] ;
1280: LD_ADDR_EXP 20
1284: PUSH
1285: LD_EXP 4
1289: PUSH
1290: LD_INT 12
1292: ARRAY
1293: ST_TO_ADDR
// mpSibDetection := mpGameSettings [ 13 ] ;
1294: LD_ADDR_EXP 24
1298: PUSH
1299: LD_EXP 4
1303: PUSH
1304: LD_INT 13
1306: ARRAY
1307: ST_TO_ADDR
// mpRespawn := mpGameSettings [ 14 ] ;
1308: LD_ADDR_EXP 31
1312: PUSH
1313: LD_EXP 4
1317: PUSH
1318: LD_INT 14
1320: ARRAY
1321: ST_TO_ADDR
// mpApemans := mpGameSettings [ 15 ] ;
1322: LD_ADDR_EXP 28
1326: PUSH
1327: LD_EXP 4
1331: PUSH
1332: LD_INT 15
1334: ARRAY
1335: ST_TO_ADDR
// mpSibBomb := mpGameSettings [ 18 ] ;
1336: LD_ADDR_EXP 26
1340: PUSH
1341: LD_EXP 4
1345: PUSH
1346: LD_INT 18
1348: ARRAY
1349: ST_TO_ADDR
// mpBuildUpTime := mpGameSettings [ 21 ] ;
1350: LD_ADDR_EXP 18
1354: PUSH
1355: LD_EXP 4
1359: PUSH
1360: LD_INT 21
1362: ARRAY
1363: ST_TO_ADDR
// mpApemansArea := [ Base1ApeArea , Base2ApeArea , Base3ApeArea , Base4ApeArea , Base5ApeArea , Base6ApeArea , Base7ApeArea , Base8ApeArea ] ;
1364: LD_ADDR_EXP 29
1368: PUSH
1369: LD_INT 16
1371: PUSH
1372: LD_INT 17
1374: PUSH
1375: LD_INT 18
1377: PUSH
1378: LD_INT 19
1380: PUSH
1381: LD_INT 20
1383: PUSH
1384: LD_INT 21
1386: PUSH
1387: LD_INT 22
1389: PUSH
1390: LD_INT 23
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// startPos := [ GetBuildingFromArea ( depotArea1 , 3 ) , GetBuildingFromArea ( depotArea2 , 2 ) , GetBuildingFromArea ( depotArea3 , 0 ) , GetBuildingFromArea ( depotArea4 , 0 ) , GetBuildingFromArea ( depotArea5 , 3 ) , GetBuildingFromArea ( depotArea6 , 3 ) , GetBuildingFromArea ( depotArea7 , 5 ) , GetBuildingFromArea ( depotArea8 , 0 ) ] ;
1403: LD_ADDR_VAR 0 8
1407: PUSH
1408: LD_INT 24
1410: PPUSH
1411: LD_INT 3
1413: PPUSH
1414: CALL 45784 0 2
1418: PUSH
1419: LD_INT 30
1421: PPUSH
1422: LD_INT 2
1424: PPUSH
1425: CALL 45784 0 2
1429: PUSH
1430: LD_INT 36
1432: PPUSH
1433: LD_INT 0
1435: PPUSH
1436: CALL 45784 0 2
1440: PUSH
1441: LD_INT 42
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL 45784 0 2
1451: PUSH
1452: LD_INT 48
1454: PPUSH
1455: LD_INT 3
1457: PPUSH
1458: CALL 45784 0 2
1462: PUSH
1463: LD_INT 54
1465: PPUSH
1466: LD_INT 3
1468: PPUSH
1469: CALL 45784 0 2
1473: PUSH
1474: LD_INT 60
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL 45784 0 2
1484: PUSH
1485: LD_INT 66
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 45784 0 2
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// for i := 1 to Count ( startPos ) do
1506: LD_ADDR_VAR 0 3
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_VAR 0 8
1520: PPUSH
1521: CALL 5133 0 1
1525: PUSH
1526: FOR_TO
1527: IFFALSE 1631
// mpStartPos := Replace ( mpStartPos , i , [ ShiftX ( startPos [ i ] [ 1 ] , startPos [ i ] [ 3 ] , 10 ) , ShiftY ( startPos [ i ] [ 2 ] , startPos [ i ] [ 3 ] , 10 ) ] ) ;
1529: LD_ADDR_EXP 19
1533: PUSH
1534: LD_EXP 19
1538: PPUSH
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_VAR 0 8
1548: PUSH
1549: LD_VAR 0 3
1553: ARRAY
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: LD_VAR 0 8
1563: PUSH
1564: LD_VAR 0 3
1568: ARRAY
1569: PUSH
1570: LD_INT 3
1572: ARRAY
1573: PPUSH
1574: LD_INT 10
1576: PPUSH
1577: CALL_OW 272
1581: PUSH
1582: LD_VAR 0 8
1586: PUSH
1587: LD_VAR 0 3
1591: ARRAY
1592: PUSH
1593: LD_INT 2
1595: ARRAY
1596: PPUSH
1597: LD_VAR 0 8
1601: PUSH
1602: LD_VAR 0 3
1606: ARRAY
1607: PUSH
1608: LD_INT 3
1610: ARRAY
1611: PPUSH
1612: LD_INT 10
1614: PPUSH
1615: CALL_OW 273
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PPUSH
1624: CALL_OW 1
1628: ST_TO_ADDR
1629: GO 1526
1631: POP
1632: POP
// if hasOil then
1633: LD_VAR 0 5
1637: IFFALSE 1776
// begin all := ( mpGameSettings [ 6 ] = 2 ) ;
1639: LD_ADDR_VAR 0 4
1643: PUSH
1644: LD_EXP 4
1648: PUSH
1649: LD_INT 6
1651: ARRAY
1652: PUSH
1653: LD_INT 2
1655: EQUAL
1656: ST_TO_ADDR
// mpOilDeposits := [ GetSourcesFromArea ( oilArea1 , all ) , GetSourcesFromArea ( oilArea2 , all ) , GetSourcesFromArea ( oilArea3 , all ) , GetSourcesFromArea ( oilArea4 , all ) , GetSourcesFromArea ( oilArea5 , all ) , GetSourcesFromArea ( oilArea6 , all ) , GetSourcesFromArea ( oilArea7 , all ) , GetSourcesFromArea ( oilArea8 , all ) ] ;
1657: LD_ADDR_EXP 10
1661: PUSH
1662: LD_INT 25
1664: PPUSH
1665: LD_VAR 0 4
1669: PPUSH
1670: CALL 45617 0 2
1674: PUSH
1675: LD_INT 31
1677: PPUSH
1678: LD_VAR 0 4
1682: PPUSH
1683: CALL 45617 0 2
1687: PUSH
1688: LD_INT 37
1690: PPUSH
1691: LD_VAR 0 4
1695: PPUSH
1696: CALL 45617 0 2
1700: PUSH
1701: LD_INT 43
1703: PPUSH
1704: LD_VAR 0 4
1708: PPUSH
1709: CALL 45617 0 2
1713: PUSH
1714: LD_INT 49
1716: PPUSH
1717: LD_VAR 0 4
1721: PPUSH
1722: CALL 45617 0 2
1726: PUSH
1727: LD_INT 55
1729: PPUSH
1730: LD_VAR 0 4
1734: PPUSH
1735: CALL 45617 0 2
1739: PUSH
1740: LD_INT 61
1742: PPUSH
1743: LD_VAR 0 4
1747: PPUSH
1748: CALL 45617 0 2
1752: PUSH
1753: LD_INT 67
1755: PPUSH
1756: LD_VAR 0 4
1760: PPUSH
1761: CALL 45617 0 2
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: LIST
1774: LIST
1775: ST_TO_ADDR
// end ; if hasSib then
1776: LD_VAR 0 6
1780: IFFALSE 1919
// begin all := ( mpGameSettings [ 7 ] = 2 ) ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_EXP 4
1791: PUSH
1792: LD_INT 7
1794: ARRAY
1795: PUSH
1796: LD_INT 2
1798: EQUAL
1799: ST_TO_ADDR
// mpSibDeposits := [ GetSourcesFromArea ( sibArea1 , all ) , GetSourcesFromArea ( sibArea2 , all ) , GetSourcesFromArea ( sibArea3 , all ) , GetSourcesFromArea ( sibArea4 , all ) , GetSourcesFromArea ( sibArea5 , all ) , GetSourcesFromArea ( sibArea6 , all ) , GetSourcesFromArea ( sibArea7 , all ) , GetSourcesFromArea ( sibArea8 , all ) ] ;
1800: LD_ADDR_EXP 11
1804: PUSH
1805: LD_INT 26
1807: PPUSH
1808: LD_VAR 0 4
1812: PPUSH
1813: CALL 45617 0 2
1817: PUSH
1818: LD_INT 32
1820: PPUSH
1821: LD_VAR 0 4
1825: PPUSH
1826: CALL 45617 0 2
1830: PUSH
1831: LD_INT 38
1833: PPUSH
1834: LD_VAR 0 4
1838: PPUSH
1839: CALL 45617 0 2
1843: PUSH
1844: LD_INT 44
1846: PPUSH
1847: LD_VAR 0 4
1851: PPUSH
1852: CALL 45617 0 2
1856: PUSH
1857: LD_INT 50
1859: PPUSH
1860: LD_VAR 0 4
1864: PPUSH
1865: CALL 45617 0 2
1869: PUSH
1870: LD_INT 56
1872: PPUSH
1873: LD_VAR 0 4
1877: PPUSH
1878: CALL 45617 0 2
1882: PUSH
1883: LD_INT 62
1885: PPUSH
1886: LD_VAR 0 4
1890: PPUSH
1891: CALL 45617 0 2
1895: PUSH
1896: LD_INT 68
1898: PPUSH
1899: LD_VAR 0 4
1903: PPUSH
1904: CALL 45617 0 2
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: LIST
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: LIST
1918: ST_TO_ADDR
// end ; if baseLevel >= 1 then
1919: LD_VAR 0 7
1923: PUSH
1924: LD_INT 1
1926: GREATEREQUAL
1927: IFFALSE 1939
// mpDepots := startPos ;
1929: LD_ADDR_EXP 12
1933: PUSH
1934: LD_VAR 0 8
1938: ST_TO_ADDR
// if baseLevel >= 2 then
1939: LD_VAR 0 7
1943: PUSH
1944: LD_INT 2
1946: GREATEREQUAL
1947: IFFALSE 2364
// begin mpBuildings := [ [ b_breastwork ^ GetBuildingFromArea ( bunArea1a , 5 ) , b_breastwork ^ GetBuildingFromArea ( bunArea1b , 5 ) , b_armoury ^ GetBuildingFromArea ( armArea1 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea2a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea2b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea2 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea3a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea3b , 3 ) , b_armoury ^ GetBuildingFromArea ( armArea3 , 4 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea4a , 4 ) , b_breastwork ^ GetBuildingFromArea ( bunArea4b , 4 ) , b_armoury ^ GetBuildingFromArea ( armArea4 , 2 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea5a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea5b , 1 ) , b_armoury ^ GetBuildingFromArea ( armArea5 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea6a , 1 ) , b_breastwork ^ GetBuildingFromArea ( bunArea6b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea6 , 1 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea7a , 0 ) , b_breastwork ^ GetBuildingFromArea ( bunArea7b , 0 ) , b_armoury ^ GetBuildingFromArea ( armArea7 , 3 ) ] , [ b_breastwork ^ GetBuildingFromArea ( bunArea8a , 2 ) , b_breastwork ^ GetBuildingFromArea ( bunArea8b , 2 ) , b_armoury ^ GetBuildingFromArea ( armArea8 , 1 ) ] ] ;
1949: LD_ADDR_EXP 15
1953: PUSH
1954: LD_INT 31
1956: PUSH
1957: LD_INT 28
1959: PPUSH
1960: LD_INT 5
1962: PPUSH
1963: CALL 45784 0 2
1967: ADD
1968: PUSH
1969: LD_INT 31
1971: PUSH
1972: LD_INT 29
1974: PPUSH
1975: LD_INT 5
1977: PPUSH
1978: CALL 45784 0 2
1982: ADD
1983: PUSH
1984: LD_INT 4
1986: PUSH
1987: LD_INT 27
1989: PPUSH
1990: LD_INT 4
1992: PPUSH
1993: CALL 45784 0 2
1997: ADD
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 31
2006: PUSH
2007: LD_INT 34
2009: PPUSH
2010: LD_INT 4
2012: PPUSH
2013: CALL 45784 0 2
2017: ADD
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: LD_INT 35
2024: PPUSH
2025: LD_INT 3
2027: PPUSH
2028: CALL 45784 0 2
2032: ADD
2033: PUSH
2034: LD_INT 4
2036: PUSH
2037: LD_INT 33
2039: PPUSH
2040: LD_INT 4
2042: PPUSH
2043: CALL 45784 0 2
2047: ADD
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: PUSH
2054: LD_INT 31
2056: PUSH
2057: LD_INT 40
2059: PPUSH
2060: LD_INT 4
2062: PPUSH
2063: CALL 45784 0 2
2067: ADD
2068: PUSH
2069: LD_INT 31
2071: PUSH
2072: LD_INT 41
2074: PPUSH
2075: LD_INT 3
2077: PPUSH
2078: CALL 45784 0 2
2082: ADD
2083: PUSH
2084: LD_INT 4
2086: PUSH
2087: LD_INT 39
2089: PPUSH
2090: LD_INT 4
2092: PPUSH
2093: CALL 45784 0 2
2097: ADD
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 31
2106: PUSH
2107: LD_INT 46
2109: PPUSH
2110: LD_INT 4
2112: PPUSH
2113: CALL 45784 0 2
2117: ADD
2118: PUSH
2119: LD_INT 31
2121: PUSH
2122: LD_INT 47
2124: PPUSH
2125: LD_INT 4
2127: PPUSH
2128: CALL 45784 0 2
2132: ADD
2133: PUSH
2134: LD_INT 4
2136: PUSH
2137: LD_INT 45
2139: PPUSH
2140: LD_INT 2
2142: PPUSH
2143: CALL 45784 0 2
2147: ADD
2148: PUSH
2149: EMPTY
2150: LIST
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 31
2156: PUSH
2157: LD_INT 52
2159: PPUSH
2160: LD_INT 1
2162: PPUSH
2163: CALL 45784 0 2
2167: ADD
2168: PUSH
2169: LD_INT 31
2171: PUSH
2172: LD_INT 53
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 45784 0 2
2182: ADD
2183: PUSH
2184: LD_INT 4
2186: PUSH
2187: LD_INT 51
2189: PPUSH
2190: LD_INT 1
2192: PPUSH
2193: CALL 45784 0 2
2197: ADD
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 31
2206: PUSH
2207: LD_INT 58
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: CALL 45784 0 2
2217: ADD
2218: PUSH
2219: LD_INT 31
2221: PUSH
2222: LD_INT 59
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: CALL 45784 0 2
2232: ADD
2233: PUSH
2234: LD_INT 4
2236: PUSH
2237: LD_INT 57
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: CALL 45784 0 2
2247: ADD
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: PUSH
2254: LD_INT 31
2256: PUSH
2257: LD_INT 64
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL 45784 0 2
2267: ADD
2268: PUSH
2269: LD_INT 31
2271: PUSH
2272: LD_INT 65
2274: PPUSH
2275: LD_INT 0
2277: PPUSH
2278: CALL 45784 0 2
2282: ADD
2283: PUSH
2284: LD_INT 4
2286: PUSH
2287: LD_INT 63
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL 45784 0 2
2297: ADD
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: LIST
2303: PUSH
2304: LD_INT 31
2306: PUSH
2307: LD_INT 70
2309: PPUSH
2310: LD_INT 2
2312: PPUSH
2313: CALL 45784 0 2
2317: ADD
2318: PUSH
2319: LD_INT 31
2321: PUSH
2322: LD_INT 71
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL 45784 0 2
2332: ADD
2333: PUSH
2334: LD_INT 4
2336: PUSH
2337: LD_INT 69
2339: PPUSH
2340: LD_INT 1
2342: PPUSH
2343: CALL 45784 0 2
2347: ADD
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: LIST
2361: LIST
2362: LIST
2363: ST_TO_ADDR
// end ; end ;
2364: LD_VAR 0 2
2368: RET
// every 0 0$2 marked mpActive do var i , x , tmp , areas , time , normalTime , delayTime , maxTime ;
2369: GO 2371
2371: DISABLE
2372: LD_INT 0
2374: PPUSH
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
2380: PPUSH
2381: PPUSH
// begin if not mpShipments then
2382: LD_EXP 25
2386: NOT
2387: IFFALSE 2391
// exit ;
2389: GO 2846
// case mpShipments of 1 :
2391: LD_EXP 25
2395: PUSH
2396: LD_INT 1
2398: DOUBLE
2399: EQUAL
2400: IFTRUE 2404
2402: GO 2439
2404: POP
// begin time := 0 0$30 ;
2405: LD_ADDR_VAR 0 5
2409: PUSH
2410: LD_INT 1050
2412: ST_TO_ADDR
// normalTime := 0 0$30 ;
2413: LD_ADDR_VAR 0 6
2417: PUSH
2418: LD_INT 1050
2420: ST_TO_ADDR
// maxTime := 1 1$20 ;
2421: LD_ADDR_VAR 0 8
2425: PUSH
2426: LD_INT 2800
2428: ST_TO_ADDR
// delayTime := 0 0$5 ;
2429: LD_ADDR_VAR 0 7
2433: PUSH
2434: LD_INT 175
2436: ST_TO_ADDR
// end ; 2 :
2437: GO 2569
2439: LD_INT 2
2441: DOUBLE
2442: EQUAL
2443: IFTRUE 2447
2445: GO 2482
2447: POP
// begin time := 0 0$25 ;
2448: LD_ADDR_VAR 0 5
2452: PUSH
2453: LD_INT 875
2455: ST_TO_ADDR
// normalTime := 0 0$25 ;
2456: LD_ADDR_VAR 0 6
2460: PUSH
2461: LD_INT 875
2463: ST_TO_ADDR
// maxTime := 1 1$10 ;
2464: LD_ADDR_VAR 0 8
2468: PUSH
2469: LD_INT 2450
2471: ST_TO_ADDR
// delayTime := 0 0$4 ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_INT 140
2479: ST_TO_ADDR
// end ; 3 :
2480: GO 2569
2482: LD_INT 3
2484: DOUBLE
2485: EQUAL
2486: IFTRUE 2490
2488: GO 2525
2490: POP
// begin time := 0 0$20 ;
2491: LD_ADDR_VAR 0 5
2495: PUSH
2496: LD_INT 700
2498: ST_TO_ADDR
// normalTime := 0 0$20 ;
2499: LD_ADDR_VAR 0 6
2503: PUSH
2504: LD_INT 700
2506: ST_TO_ADDR
// maxTime := 1 1$00 ;
2507: LD_ADDR_VAR 0 8
2511: PUSH
2512: LD_INT 2100
2514: ST_TO_ADDR
// delayTime := 0 0$3 ;
2515: LD_ADDR_VAR 0 7
2519: PUSH
2520: LD_INT 105
2522: ST_TO_ADDR
// end ; 4 :
2523: GO 2569
2525: LD_INT 4
2527: DOUBLE
2528: EQUAL
2529: IFTRUE 2533
2531: GO 2568
2533: POP
// begin time := 0 0$15 ;
2534: LD_ADDR_VAR 0 5
2538: PUSH
2539: LD_INT 525
2541: ST_TO_ADDR
// normalTime := 0 0$15 ;
2542: LD_ADDR_VAR 0 6
2546: PUSH
2547: LD_INT 525
2549: ST_TO_ADDR
// maxTime := 0 0$55 ;
2550: LD_ADDR_VAR 0 8
2554: PUSH
2555: LD_INT 1925
2557: ST_TO_ADDR
// delayTime := 0 0$2 ;
2558: LD_ADDR_VAR 0 7
2562: PUSH
2563: LD_INT 70
2565: ST_TO_ADDR
// end ; end ;
2566: GO 2569
2568: POP
// areas := [ Between1 , Between2 , Between3 , Between4 , Center1 , Center2 ] ;
2569: LD_ADDR_VAR 0 4
2573: PUSH
2574: LD_INT 9
2576: PUSH
2577: LD_INT 10
2579: PUSH
2580: LD_INT 11
2582: PUSH
2583: LD_INT 12
2585: PUSH
2586: LD_INT 13
2588: PUSH
2589: LD_INT 14
2591: PUSH
2592: EMPTY
2593: LIST
2594: LIST
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// tmp := [ buildUpTime1 , buildUpTime2 , buildUpTime3 , buildUpTime4 , buildUpTime5 , buildUpTime6 , buildUpTime7 , buildUpTime8 ] ;
2600: LD_ADDR_VAR 0 3
2604: PUSH
2605: LD_INT 1
2607: PUSH
2608: LD_INT 2
2610: PUSH
2611: LD_INT 3
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 5
2619: PUSH
2620: LD_INT 6
2622: PUSH
2623: LD_INT 7
2625: PUSH
2626: LD_INT 8
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: LIST
2637: LIST
2638: ST_TO_ADDR
// for i := 1 to 8 do
2639: LD_ADDR_VAR 0 1
2643: PUSH
2644: DOUBLE
2645: LD_INT 1
2647: DEC
2648: ST_TO_ADDR
2649: LD_INT 8
2651: PUSH
2652: FOR_TO
2653: IFFALSE 2700
// begin if not mpSidePositions [ i ] then
2655: LD_EXP 5
2659: PUSH
2660: LD_VAR 0 1
2664: ARRAY
2665: NOT
2666: IFFALSE 2670
// continue ;
2668: GO 2652
// areas := areas ^ tmp [ mpSidePositions [ i ] ] ;
2670: LD_ADDR_VAR 0 4
2674: PUSH
2675: LD_VAR 0 4
2679: PUSH
2680: LD_VAR 0 3
2684: PUSH
2685: LD_EXP 5
2689: PUSH
2690: LD_VAR 0 1
2694: ARRAY
2695: ARRAY
2696: ADD
2697: ST_TO_ADDR
// end ;
2698: GO 2652
2700: POP
2701: POP
// x := 1 ;
2702: LD_ADDR_VAR 0 2
2706: PUSH
2707: LD_INT 1
2709: ST_TO_ADDR
// repeat wait ( time ) ;
2710: LD_VAR 0 5
2714: PPUSH
2715: CALL_OW 67
// x := Inc ( x ) ;
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: LD_VAR 0 2
2728: PPUSH
2729: CALL 42438 0 1
2733: ST_TO_ADDR
// if x > 5 then
2734: LD_VAR 0 2
2738: PUSH
2739: LD_INT 5
2741: GREATER
2742: IFFALSE 2752
// x := 1 ;
2744: LD_ADDR_VAR 0 2
2748: PUSH
2749: LD_INT 1
2751: ST_TO_ADDR
// for i in areas do
2752: LD_ADDR_VAR 0 1
2756: PUSH
2757: LD_VAR 0 4
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2802
// begin if GetResourceArea ( i , mat_cans ) < 20 then
2765: LD_VAR 0 1
2769: PPUSH
2770: LD_INT 1
2772: PPUSH
2773: CALL_OW 287
2777: PUSH
2778: LD_INT 20
2780: LESS
2781: IFFALSE 2800
// begin CreateCratesArea ( x , i , true ) ;
2783: LD_VAR 0 2
2787: PPUSH
2788: LD_VAR 0 1
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: CALL_OW 55
// end ; end ;
2800: GO 2762
2802: POP
2803: POP
// time := time + delayTime ;
2804: LD_ADDR_VAR 0 5
2808: PUSH
2809: LD_VAR 0 5
2813: PUSH
2814: LD_VAR 0 7
2818: PLUS
2819: ST_TO_ADDR
// if time > maxTime then
2820: LD_VAR 0 5
2824: PUSH
2825: LD_VAR 0 8
2829: GREATER
2830: IFFALSE 2842
// time := normalTime ;
2832: LD_ADDR_VAR 0 5
2836: PUSH
2837: LD_VAR 0 6
2841: ST_TO_ADDR
// until false ;
2842: LD_INT 0
2844: IFFALSE 2710
// end ; end_of_file
2846: PPOPN 8
2848: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
2849: LD_VAR 0 1
2853: PPUSH
2854: CALL 55581 0 1
// Multiplayer_UnitDestroyed ( un ) ;
2858: LD_VAR 0 1
2862: PPUSH
2863: CALL 51567 0 1
// end ;
2867: PPOPN 1
2869: END
// on UnitKamikazed ( un ) do begin SOS_UnitKamikazed ( un ) ;
2870: LD_VAR 0 1
2874: PPUSH
2875: CALL 55598 0 1
// end ;
2879: PPOPN 1
2881: END
// on BuildingComplete ( b ) do Multiplayer_BuildingComplete ( b ) ;
2882: LD_VAR 0 1
2886: PPUSH
2887: CALL 52274 0 1
2891: PPOPN 1
2893: END
// on VehicleConstructed ( vehicle , factory ) do SOS_VehicleConstructed ( vehicle , factory ) ;
2894: LD_VAR 0 1
2898: PPUSH
2899: LD_VAR 0 2
2903: PPUSH
2904: CALL 55639 0 2
2908: PPOPN 2
2910: END
// on BuildingCaptured ( building , oldSide , unit ) do Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; end_of_file
2911: LD_VAR 0 1
2915: PPUSH
2916: LD_VAR 0 2
2920: PPUSH
2921: LD_VAR 0 3
2925: PPUSH
2926: CALL 52327 0 3
2930: PPOPN 3
2932: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
2933: LD_INT 0
2935: PPUSH
2936: PPUSH
// if exist_mode then
2937: LD_VAR 0 2
2941: IFFALSE 2987
// begin unit := CreateCharacter ( prefix & ident ) ;
2943: LD_ADDR_VAR 0 5
2947: PUSH
2948: LD_VAR 0 3
2952: PUSH
2953: LD_VAR 0 1
2957: STR
2958: PPUSH
2959: CALL_OW 34
2963: ST_TO_ADDR
// if unit then
2964: LD_VAR 0 5
2968: IFFALSE 2985
// DeleteCharacters ( prefix & ident ) ;
2970: LD_VAR 0 3
2974: PUSH
2975: LD_VAR 0 1
2979: STR
2980: PPUSH
2981: CALL_OW 40
// end else
2985: GO 3002
// unit := NewCharacter ( ident ) ;
2987: LD_ADDR_VAR 0 5
2991: PUSH
2992: LD_VAR 0 1
2996: PPUSH
2997: CALL_OW 25
3001: ST_TO_ADDR
// result := unit ;
3002: LD_ADDR_VAR 0 4
3006: PUSH
3007: LD_VAR 0 5
3011: ST_TO_ADDR
// end ;
3012: LD_VAR 0 4
3016: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
3017: LD_INT 0
3019: PPUSH
3020: PPUSH
// if exist_mode then
3021: LD_VAR 0 2
3025: IFFALSE 3050
// unit := CreateCharacter ( prefix & ident ) else
3027: LD_ADDR_VAR 0 5
3031: PUSH
3032: LD_VAR 0 3
3036: PUSH
3037: LD_VAR 0 1
3041: STR
3042: PPUSH
3043: CALL_OW 34
3047: ST_TO_ADDR
3048: GO 3065
// unit := NewCharacter ( ident ) ;
3050: LD_ADDR_VAR 0 5
3054: PUSH
3055: LD_VAR 0 1
3059: PPUSH
3060: CALL_OW 25
3064: ST_TO_ADDR
// result := unit ;
3065: LD_ADDR_VAR 0 4
3069: PUSH
3070: LD_VAR 0 5
3074: ST_TO_ADDR
// end ;
3075: LD_VAR 0 4
3079: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
3080: LD_INT 0
3082: PPUSH
3083: PPUSH
// if not side or not nation then
3084: LD_VAR 0 1
3088: NOT
3089: IFTRUE 3098
3091: PUSH
3092: LD_VAR 0 2
3096: NOT
3097: OR
3098: IFFALSE 3102
// exit ;
3100: GO 3872
// case nation of nation_american :
3102: LD_VAR 0 2
3106: PUSH
3107: LD_INT 1
3109: DOUBLE
3110: EQUAL
3111: IFTRUE 3115
3113: GO 3329
3115: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
3116: LD_ADDR_VAR 0 4
3120: PUSH
3121: LD_INT 35
3123: PUSH
3124: LD_INT 45
3126: PUSH
3127: LD_INT 46
3129: PUSH
3130: LD_INT 47
3132: PUSH
3133: LD_INT 82
3135: PUSH
3136: LD_INT 83
3138: PUSH
3139: LD_INT 84
3141: PUSH
3142: LD_INT 85
3144: PUSH
3145: LD_INT 86
3147: PUSH
3148: LD_INT 1
3150: PUSH
3151: LD_INT 2
3153: PUSH
3154: LD_INT 6
3156: PUSH
3157: LD_INT 15
3159: PUSH
3160: LD_INT 16
3162: PUSH
3163: LD_INT 7
3165: PUSH
3166: LD_INT 12
3168: PUSH
3169: LD_INT 13
3171: PUSH
3172: LD_INT 10
3174: PUSH
3175: LD_INT 14
3177: PUSH
3178: LD_INT 20
3180: PUSH
3181: LD_INT 21
3183: PUSH
3184: LD_INT 22
3186: PUSH
3187: LD_INT 25
3189: PUSH
3190: LD_INT 32
3192: PUSH
3193: LD_INT 27
3195: PUSH
3196: LD_INT 36
3198: PUSH
3199: LD_INT 69
3201: PUSH
3202: LD_INT 39
3204: PUSH
3205: LD_INT 34
3207: PUSH
3208: LD_INT 40
3210: PUSH
3211: LD_INT 48
3213: PUSH
3214: LD_INT 49
3216: PUSH
3217: LD_INT 50
3219: PUSH
3220: LD_INT 51
3222: PUSH
3223: LD_INT 52
3225: PUSH
3226: LD_INT 53
3228: PUSH
3229: LD_INT 54
3231: PUSH
3232: LD_INT 55
3234: PUSH
3235: LD_INT 56
3237: PUSH
3238: LD_INT 57
3240: PUSH
3241: LD_INT 58
3243: PUSH
3244: LD_INT 59
3246: PUSH
3247: LD_INT 60
3249: PUSH
3250: LD_INT 61
3252: PUSH
3253: LD_INT 62
3255: PUSH
3256: LD_INT 80
3258: PUSH
3259: LD_INT 82
3261: PUSH
3262: LD_INT 83
3264: PUSH
3265: LD_INT 84
3267: PUSH
3268: LD_INT 85
3270: PUSH
3271: LD_INT 86
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: LIST
3289: LIST
3290: LIST
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: LIST
3310: LIST
3311: LIST
3312: LIST
3313: LIST
3314: LIST
3315: LIST
3316: LIST
3317: LIST
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: ST_TO_ADDR
3327: GO 3794
3329: LD_INT 2
3331: DOUBLE
3332: EQUAL
3333: IFTRUE 3337
3335: GO 3563
3337: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
3338: LD_ADDR_VAR 0 4
3342: PUSH
3343: LD_INT 35
3345: PUSH
3346: LD_INT 45
3348: PUSH
3349: LD_INT 46
3351: PUSH
3352: LD_INT 47
3354: PUSH
3355: LD_INT 82
3357: PUSH
3358: LD_INT 83
3360: PUSH
3361: LD_INT 84
3363: PUSH
3364: LD_INT 85
3366: PUSH
3367: LD_INT 87
3369: PUSH
3370: LD_INT 70
3372: PUSH
3373: LD_INT 1
3375: PUSH
3376: LD_INT 11
3378: PUSH
3379: LD_INT 3
3381: PUSH
3382: LD_INT 4
3384: PUSH
3385: LD_INT 5
3387: PUSH
3388: LD_INT 6
3390: PUSH
3391: LD_INT 15
3393: PUSH
3394: LD_INT 18
3396: PUSH
3397: LD_INT 7
3399: PUSH
3400: LD_INT 17
3402: PUSH
3403: LD_INT 8
3405: PUSH
3406: LD_INT 20
3408: PUSH
3409: LD_INT 21
3411: PUSH
3412: LD_INT 22
3414: PUSH
3415: LD_INT 72
3417: PUSH
3418: LD_INT 26
3420: PUSH
3421: LD_INT 69
3423: PUSH
3424: LD_INT 39
3426: PUSH
3427: LD_INT 40
3429: PUSH
3430: LD_INT 41
3432: PUSH
3433: LD_INT 42
3435: PUSH
3436: LD_INT 43
3438: PUSH
3439: LD_INT 48
3441: PUSH
3442: LD_INT 49
3444: PUSH
3445: LD_INT 50
3447: PUSH
3448: LD_INT 51
3450: PUSH
3451: LD_INT 52
3453: PUSH
3454: LD_INT 53
3456: PUSH
3457: LD_INT 54
3459: PUSH
3460: LD_INT 55
3462: PUSH
3463: LD_INT 56
3465: PUSH
3466: LD_INT 60
3468: PUSH
3469: LD_INT 61
3471: PUSH
3472: LD_INT 62
3474: PUSH
3475: LD_INT 66
3477: PUSH
3478: LD_INT 67
3480: PUSH
3481: LD_INT 68
3483: PUSH
3484: LD_INT 81
3486: PUSH
3487: LD_INT 82
3489: PUSH
3490: LD_INT 83
3492: PUSH
3493: LD_INT 84
3495: PUSH
3496: LD_INT 85
3498: PUSH
3499: LD_INT 87
3501: PUSH
3502: LD_INT 88
3504: PUSH
3505: EMPTY
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: LIST
3521: LIST
3522: LIST
3523: LIST
3524: LIST
3525: LIST
3526: LIST
3527: LIST
3528: LIST
3529: LIST
3530: LIST
3531: LIST
3532: LIST
3533: LIST
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: LIST
3548: LIST
3549: LIST
3550: LIST
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: LIST
3560: ST_TO_ADDR
3561: GO 3794
3563: LD_INT 3
3565: DOUBLE
3566: EQUAL
3567: IFTRUE 3571
3569: GO 3793
3571: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
3572: LD_ADDR_VAR 0 4
3576: PUSH
3577: LD_INT 46
3579: PUSH
3580: LD_INT 47
3582: PUSH
3583: LD_INT 1
3585: PUSH
3586: LD_INT 2
3588: PUSH
3589: LD_INT 82
3591: PUSH
3592: LD_INT 83
3594: PUSH
3595: LD_INT 84
3597: PUSH
3598: LD_INT 85
3600: PUSH
3601: LD_INT 86
3603: PUSH
3604: LD_INT 11
3606: PUSH
3607: LD_INT 9
3609: PUSH
3610: LD_INT 20
3612: PUSH
3613: LD_INT 19
3615: PUSH
3616: LD_INT 21
3618: PUSH
3619: LD_INT 24
3621: PUSH
3622: LD_INT 22
3624: PUSH
3625: LD_INT 25
3627: PUSH
3628: LD_INT 28
3630: PUSH
3631: LD_INT 29
3633: PUSH
3634: LD_INT 30
3636: PUSH
3637: LD_INT 31
3639: PUSH
3640: LD_INT 37
3642: PUSH
3643: LD_INT 38
3645: PUSH
3646: LD_INT 32
3648: PUSH
3649: LD_INT 27
3651: PUSH
3652: LD_INT 33
3654: PUSH
3655: LD_INT 69
3657: PUSH
3658: LD_INT 39
3660: PUSH
3661: LD_INT 34
3663: PUSH
3664: LD_INT 40
3666: PUSH
3667: LD_INT 71
3669: PUSH
3670: LD_INT 23
3672: PUSH
3673: LD_INT 44
3675: PUSH
3676: LD_INT 48
3678: PUSH
3679: LD_INT 49
3681: PUSH
3682: LD_INT 50
3684: PUSH
3685: LD_INT 51
3687: PUSH
3688: LD_INT 52
3690: PUSH
3691: LD_INT 53
3693: PUSH
3694: LD_INT 54
3696: PUSH
3697: LD_INT 55
3699: PUSH
3700: LD_INT 56
3702: PUSH
3703: LD_INT 57
3705: PUSH
3706: LD_INT 58
3708: PUSH
3709: LD_INT 59
3711: PUSH
3712: LD_INT 63
3714: PUSH
3715: LD_INT 64
3717: PUSH
3718: LD_INT 65
3720: PUSH
3721: LD_INT 82
3723: PUSH
3724: LD_INT 83
3726: PUSH
3727: LD_INT 84
3729: PUSH
3730: LD_INT 85
3732: PUSH
3733: LD_INT 86
3735: PUSH
3736: EMPTY
3737: LIST
3738: LIST
3739: LIST
3740: LIST
3741: LIST
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: LIST
3752: LIST
3753: LIST
3754: LIST
3755: LIST
3756: LIST
3757: LIST
3758: LIST
3759: LIST
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: LIST
3765: LIST
3766: LIST
3767: LIST
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: LIST
3789: LIST
3790: ST_TO_ADDR
3791: GO 3794
3793: POP
// if state > - 1 and state < 3 then
3794: LD_VAR 0 3
3798: PUSH
3799: LD_INT 1
3801: NEG
3802: GREATER
3803: IFFALSE 3815
3805: PUSH
3806: LD_VAR 0 3
3810: PUSH
3811: LD_INT 3
3813: LESS
3814: AND
3815: IFFALSE 3872
// for i in result do
3817: LD_ADDR_VAR 0 5
3821: PUSH
3822: LD_VAR 0 4
3826: PUSH
3827: FOR_IN
3828: IFFALSE 3870
// if GetTech ( i , side ) <> state then
3830: LD_VAR 0 5
3834: PPUSH
3835: LD_VAR 0 1
3839: PPUSH
3840: CALL_OW 321
3844: PUSH
3845: LD_VAR 0 3
3849: NONEQUAL
3850: IFFALSE 3868
// result := result diff i ;
3852: LD_ADDR_VAR 0 4
3856: PUSH
3857: LD_VAR 0 4
3861: PUSH
3862: LD_VAR 0 5
3866: DIFF
3867: ST_TO_ADDR
3868: GO 3827
3870: POP
3871: POP
// end ;
3872: LD_VAR 0 4
3876: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
3877: LD_INT 0
3879: PPUSH
3880: PPUSH
3881: PPUSH
// result := true ;
3882: LD_ADDR_VAR 0 3
3886: PUSH
3887: LD_INT 1
3889: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
3890: LD_ADDR_VAR 0 5
3894: PUSH
3895: LD_VAR 0 2
3899: PPUSH
3900: CALL_OW 480
3904: ST_TO_ADDR
// if not tmp then
3905: LD_VAR 0 5
3909: NOT
3910: IFFALSE 3914
// exit ;
3912: GO 3963
// for i in tmp do
3914: LD_ADDR_VAR 0 4
3918: PUSH
3919: LD_VAR 0 5
3923: PUSH
3924: FOR_IN
3925: IFFALSE 3961
// if GetTech ( i , side ) <> state_researched then
3927: LD_VAR 0 4
3931: PPUSH
3932: LD_VAR 0 1
3936: PPUSH
3937: CALL_OW 321
3941: PUSH
3942: LD_INT 2
3944: NONEQUAL
3945: IFFALSE 3959
// begin result := false ;
3947: LD_ADDR_VAR 0 3
3951: PUSH
3952: LD_INT 0
3954: ST_TO_ADDR
// exit ;
3955: POP
3956: POP
3957: GO 3963
// end ;
3959: GO 3924
3961: POP
3962: POP
// end ;
3963: LD_VAR 0 3
3967: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
3968: LD_INT 0
3970: PPUSH
3971: PPUSH
3972: PPUSH
3973: PPUSH
3974: PPUSH
3975: PPUSH
3976: PPUSH
3977: PPUSH
3978: PPUSH
3979: PPUSH
3980: PPUSH
3981: PPUSH
3982: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
3983: LD_VAR 0 1
3987: NOT
3988: IFTRUE 4005
3990: PUSH
3991: LD_VAR 0 1
3995: PPUSH
3996: CALL_OW 257
4000: PUSH
4001: LD_INT 9
4003: NONEQUAL
4004: OR
4005: IFFALSE 4009
// exit ;
4007: GO 4588
// side := GetSide ( unit ) ;
4009: LD_ADDR_VAR 0 9
4013: PUSH
4014: LD_VAR 0 1
4018: PPUSH
4019: CALL_OW 255
4023: ST_TO_ADDR
// tech_space := tech_spacanom ;
4024: LD_ADDR_VAR 0 12
4028: PUSH
4029: LD_INT 29
4031: ST_TO_ADDR
// tech_time := tech_taurad ;
4032: LD_ADDR_VAR 0 13
4036: PUSH
4037: LD_INT 28
4039: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
4040: LD_ADDR_VAR 0 11
4044: PUSH
4045: LD_VAR 0 1
4049: PPUSH
4050: CALL_OW 310
4054: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
4055: LD_VAR 0 11
4059: PPUSH
4060: CALL_OW 247
4064: PUSH
4065: LD_INT 2
4067: EQUAL
4068: IFFALSE 4072
// exit ;
4070: GO 4588
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4072: LD_ADDR_VAR 0 8
4076: PUSH
4077: LD_INT 81
4079: PUSH
4080: LD_VAR 0 9
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 3
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 69
4114: ST_TO_ADDR
// if not tmp then
4115: LD_VAR 0 8
4119: NOT
4120: IFFALSE 4124
// exit ;
4122: GO 4588
// if in_unit then
4124: LD_VAR 0 11
4128: IFFALSE 4152
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
4130: LD_ADDR_VAR 0 10
4134: PUSH
4135: LD_VAR 0 8
4139: PPUSH
4140: LD_VAR 0 11
4144: PPUSH
4145: CALL_OW 74
4149: ST_TO_ADDR
4150: GO 4172
// enemy := NearestUnitToUnit ( tmp , unit ) ;
4152: LD_ADDR_VAR 0 10
4156: PUSH
4157: LD_VAR 0 8
4161: PPUSH
4162: LD_VAR 0 1
4166: PPUSH
4167: CALL_OW 74
4171: ST_TO_ADDR
// if not enemy then
4172: LD_VAR 0 10
4176: NOT
4177: IFFALSE 4181
// exit ;
4179: GO 4588
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
4181: LD_VAR 0 11
4185: IFFALSE 4207
4187: PUSH
4188: LD_VAR 0 11
4192: PPUSH
4193: LD_VAR 0 10
4197: PPUSH
4198: CALL_OW 296
4202: PUSH
4203: LD_INT 13
4205: GREATER
4206: AND
4207: IFTRUE 4229
4209: PUSH
4210: LD_VAR 0 1
4214: PPUSH
4215: LD_VAR 0 10
4219: PPUSH
4220: CALL_OW 296
4224: PUSH
4225: LD_INT 12
4227: GREATER
4228: OR
4229: IFFALSE 4233
// exit ;
4231: GO 4588
// missile := [ 1 ] ;
4233: LD_ADDR_VAR 0 14
4237: PUSH
4238: LD_INT 1
4240: PUSH
4241: EMPTY
4242: LIST
4243: ST_TO_ADDR
// if Researched ( side , tech_space ) then
4244: LD_VAR 0 9
4248: PPUSH
4249: LD_VAR 0 12
4253: PPUSH
4254: CALL_OW 325
4258: IFFALSE 4287
// missile := Replace ( missile , missile + 1 , 2 ) ;
4260: LD_ADDR_VAR 0 14
4264: PUSH
4265: LD_VAR 0 14
4269: PPUSH
4270: LD_VAR 0 14
4274: PUSH
4275: LD_INT 1
4277: PLUS
4278: PPUSH
4279: LD_INT 2
4281: PPUSH
4282: CALL_OW 1
4286: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
4287: LD_VAR 0 9
4291: PPUSH
4292: LD_VAR 0 13
4296: PPUSH
4297: CALL_OW 325
4301: IFFALSE 4325
4303: PUSH
4304: LD_VAR 0 10
4308: PPUSH
4309: CALL_OW 255
4313: PPUSH
4314: LD_VAR 0 13
4318: PPUSH
4319: CALL_OW 325
4323: NOT
4324: AND
4325: IFFALSE 4354
// missile := Replace ( missile , missile + 1 , 3 ) ;
4327: LD_ADDR_VAR 0 14
4331: PUSH
4332: LD_VAR 0 14
4336: PPUSH
4337: LD_VAR 0 14
4341: PUSH
4342: LD_INT 1
4344: PLUS
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 1
4353: ST_TO_ADDR
// if missile < 2 then
4354: LD_VAR 0 14
4358: PUSH
4359: LD_INT 2
4361: LESS
4362: IFFALSE 4366
// exit ;
4364: GO 4588
// x := GetX ( enemy ) ;
4366: LD_ADDR_VAR 0 4
4370: PUSH
4371: LD_VAR 0 10
4375: PPUSH
4376: CALL_OW 250
4380: ST_TO_ADDR
// y := GetY ( enemy ) ;
4381: LD_ADDR_VAR 0 5
4385: PUSH
4386: LD_VAR 0 10
4390: PPUSH
4391: CALL_OW 251
4395: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
4396: LD_ADDR_VAR 0 6
4400: PUSH
4401: LD_VAR 0 4
4405: PUSH
4406: LD_INT 1
4408: NEG
4409: PPUSH
4410: LD_INT 1
4412: PPUSH
4413: CALL_OW 12
4417: PLUS
4418: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
4419: LD_ADDR_VAR 0 7
4423: PUSH
4424: LD_VAR 0 5
4428: PUSH
4429: LD_INT 1
4431: NEG
4432: PPUSH
4433: LD_INT 1
4435: PPUSH
4436: CALL_OW 12
4440: PLUS
4441: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4442: LD_VAR 0 6
4446: PPUSH
4447: LD_VAR 0 7
4451: PPUSH
4452: CALL_OW 488
4456: NOT
4457: IFFALSE 4479
// begin _x := x ;
4459: LD_ADDR_VAR 0 6
4463: PUSH
4464: LD_VAR 0 4
4468: ST_TO_ADDR
// _y := y ;
4469: LD_ADDR_VAR 0 7
4473: PUSH
4474: LD_VAR 0 5
4478: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
4479: LD_ADDR_VAR 0 3
4483: PUSH
4484: LD_INT 1
4486: PPUSH
4487: LD_VAR 0 14
4491: PPUSH
4492: CALL_OW 12
4496: ST_TO_ADDR
// case i of 1 :
4497: LD_VAR 0 3
4501: PUSH
4502: LD_INT 1
4504: DOUBLE
4505: EQUAL
4506: IFTRUE 4510
4508: GO 4527
4510: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_VAR 0 10
4520: PPUSH
4521: CALL_OW 115
4525: GO 4588
4527: LD_INT 2
4529: DOUBLE
4530: EQUAL
4531: IFTRUE 4535
4533: GO 4557
4535: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
4536: LD_VAR 0 1
4540: PPUSH
4541: LD_VAR 0 6
4545: PPUSH
4546: LD_VAR 0 7
4550: PPUSH
4551: CALL_OW 153
4555: GO 4588
4557: LD_INT 3
4559: DOUBLE
4560: EQUAL
4561: IFTRUE 4565
4563: GO 4587
4565: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
4566: LD_VAR 0 1
4570: PPUSH
4571: LD_VAR 0 6
4575: PPUSH
4576: LD_VAR 0 7
4580: PPUSH
4581: CALL_OW 154
4585: GO 4588
4587: POP
// end ;
4588: LD_VAR 0 2
4592: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
4593: LD_INT 0
4595: PPUSH
4596: PPUSH
4597: PPUSH
4598: PPUSH
4599: PPUSH
4600: PPUSH
// if not unit or not building then
4601: LD_VAR 0 1
4605: NOT
4606: IFTRUE 4615
4608: PUSH
4609: LD_VAR 0 2
4613: NOT
4614: OR
4615: IFFALSE 4619
// exit ;
4617: GO 4777
// x := GetX ( building ) ;
4619: LD_ADDR_VAR 0 5
4623: PUSH
4624: LD_VAR 0 2
4628: PPUSH
4629: CALL_OW 250
4633: ST_TO_ADDR
// y := GetY ( building ) ;
4634: LD_ADDR_VAR 0 6
4638: PUSH
4639: LD_VAR 0 2
4643: PPUSH
4644: CALL_OW 251
4648: ST_TO_ADDR
// for i := 0 to 5 do
4649: LD_ADDR_VAR 0 4
4653: PUSH
4654: DOUBLE
4655: LD_INT 0
4657: DEC
4658: ST_TO_ADDR
4659: LD_INT 5
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4775
// begin _x := ShiftX ( x , i , 3 ) ;
4665: LD_ADDR_VAR 0 7
4669: PUSH
4670: LD_VAR 0 5
4674: PPUSH
4675: LD_VAR 0 4
4679: PPUSH
4680: LD_INT 3
4682: PPUSH
4683: CALL_OW 272
4687: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
4688: LD_ADDR_VAR 0 8
4692: PUSH
4693: LD_VAR 0 6
4697: PPUSH
4698: LD_VAR 0 4
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 273
4710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
4711: LD_VAR 0 7
4715: PPUSH
4716: LD_VAR 0 8
4720: PPUSH
4721: CALL_OW 488
4725: NOT
4726: IFFALSE 4730
// continue ;
4728: GO 4662
// if HexInfo ( _x , _y ) = 0 then
4730: LD_VAR 0 7
4734: PPUSH
4735: LD_VAR 0 8
4739: PPUSH
4740: CALL_OW 428
4744: PUSH
4745: LD_INT 0
4747: EQUAL
4748: IFFALSE 4773
// begin ComMoveXY ( unit , _x , _y ) ;
4750: LD_VAR 0 1
4754: PPUSH
4755: LD_VAR 0 7
4759: PPUSH
4760: LD_VAR 0 8
4764: PPUSH
4765: CALL_OW 111
// exit ;
4769: POP
4770: POP
4771: GO 4777
// end ; end ;
4773: GO 4662
4775: POP
4776: POP
// end ;
4777: LD_VAR 0 3
4781: RET
// export function ScanBase ( side , base_area ) ; begin
4782: LD_INT 0
4784: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
4785: LD_ADDR_VAR 0 3
4789: PUSH
4790: LD_VAR 0 2
4794: PPUSH
4795: LD_INT 81
4797: PUSH
4798: LD_VAR 0 1
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 70
4811: ST_TO_ADDR
// end ;
4812: LD_VAR 0 3
4816: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
4817: LD_INT 0
4819: PPUSH
4820: PPUSH
4821: PPUSH
4822: PPUSH
// result := false ;
4823: LD_ADDR_VAR 0 2
4827: PUSH
4828: LD_INT 0
4830: ST_TO_ADDR
// side := GetSide ( unit ) ;
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: LD_VAR 0 1
4840: PPUSH
4841: CALL_OW 255
4845: ST_TO_ADDR
// nat := GetNation ( unit ) ;
4846: LD_ADDR_VAR 0 4
4850: PUSH
4851: LD_VAR 0 1
4855: PPUSH
4856: CALL_OW 248
4860: ST_TO_ADDR
// case nat of 1 :
4861: LD_VAR 0 4
4865: PUSH
4866: LD_INT 1
4868: DOUBLE
4869: EQUAL
4870: IFTRUE 4874
4872: GO 4885
4874: POP
// tech := tech_lassight ; 2 :
4875: LD_ADDR_VAR 0 5
4879: PUSH
4880: LD_INT 12
4882: ST_TO_ADDR
4883: GO 4924
4885: LD_INT 2
4887: DOUBLE
4888: EQUAL
4889: IFTRUE 4893
4891: GO 4904
4893: POP
// tech := tech_mortar ; 3 :
4894: LD_ADDR_VAR 0 5
4898: PUSH
4899: LD_INT 41
4901: ST_TO_ADDR
4902: GO 4924
4904: LD_INT 3
4906: DOUBLE
4907: EQUAL
4908: IFTRUE 4912
4910: GO 4923
4912: POP
// tech := tech_bazooka ; end ;
4913: LD_ADDR_VAR 0 5
4917: PUSH
4918: LD_INT 44
4920: ST_TO_ADDR
4921: GO 4924
4923: POP
// if Researched ( side , tech ) then
4924: LD_VAR 0 3
4928: PPUSH
4929: LD_VAR 0 5
4933: PPUSH
4934: CALL_OW 325
4938: IFFALSE 4965
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
4940: LD_ADDR_VAR 0 2
4944: PUSH
4945: LD_INT 5
4947: PUSH
4948: LD_INT 8
4950: PUSH
4951: LD_INT 9
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: LIST
4958: PUSH
4959: LD_VAR 0 4
4963: ARRAY
4964: ST_TO_ADDR
// end ;
4965: LD_VAR 0 2
4969: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
4970: LD_INT 0
4972: PPUSH
4973: PPUSH
4974: PPUSH
// if not mines then
4975: LD_VAR 0 2
4979: NOT
4980: IFFALSE 4984
// exit ;
4982: GO 5128
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
4984: LD_ADDR_VAR 0 5
4988: PUSH
4989: LD_INT 81
4991: PUSH
4992: LD_VAR 0 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 3
5003: PUSH
5004: LD_INT 21
5006: PUSH
5007: LD_INT 3
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PPUSH
5022: CALL_OW 69
5026: ST_TO_ADDR
// for i in mines do
5027: LD_ADDR_VAR 0 4
5031: PUSH
5032: LD_VAR 0 2
5036: PUSH
5037: FOR_IN
5038: IFFALSE 5126
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
5040: LD_VAR 0 4
5044: PUSH
5045: LD_INT 1
5047: ARRAY
5048: PPUSH
5049: LD_VAR 0 4
5053: PUSH
5054: LD_INT 2
5056: ARRAY
5057: PPUSH
5058: CALL_OW 458
5062: NOT
5063: IFFALSE 5067
// continue ;
5065: GO 5037
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
5067: LD_VAR 0 4
5071: PUSH
5072: LD_INT 1
5074: ARRAY
5075: PPUSH
5076: LD_VAR 0 4
5080: PUSH
5081: LD_INT 2
5083: ARRAY
5084: PPUSH
5085: CALL_OW 428
5089: PUSH
5090: LD_VAR 0 5
5094: IN
5095: IFFALSE 5124
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
5097: LD_VAR 0 4
5101: PUSH
5102: LD_INT 1
5104: ARRAY
5105: PPUSH
5106: LD_VAR 0 4
5110: PUSH
5111: LD_INT 2
5113: ARRAY
5114: PPUSH
5115: LD_VAR 0 1
5119: PPUSH
5120: CALL_OW 456
// end ;
5124: GO 5037
5126: POP
5127: POP
// end ;
5128: LD_VAR 0 3
5132: RET
// export function Count ( array ) ; begin
5133: LD_INT 0
5135: PPUSH
// result := array + 0 ;
5136: LD_ADDR_VAR 0 2
5140: PUSH
5141: LD_VAR 0 1
5145: PUSH
5146: LD_INT 0
5148: PLUS
5149: ST_TO_ADDR
// end ;
5150: LD_VAR 0 2
5154: RET
// export function IsEmpty ( building ) ; begin
5155: LD_INT 0
5157: PPUSH
// if not building then
5158: LD_VAR 0 1
5162: NOT
5163: IFFALSE 5167
// exit ;
5165: GO 5210
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
5167: LD_ADDR_VAR 0 2
5171: PUSH
5172: LD_VAR 0 1
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_VAR 0 1
5184: PPUSH
5185: CALL_OW 255
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 58
5196: PUSH
5197: EMPTY
5198: LIST
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: IN
5209: ST_TO_ADDR
// end ;
5210: LD_VAR 0 2
5214: RET
// export function IsNotFull ( building ) ; var places ; begin
5215: LD_INT 0
5217: PPUSH
5218: PPUSH
// if not building then
5219: LD_VAR 0 1
5223: NOT
5224: IFFALSE 5228
// exit ;
5226: GO 5256
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
5228: LD_ADDR_VAR 0 2
5232: PUSH
5233: LD_VAR 0 1
5237: PPUSH
5238: LD_INT 3
5240: PUSH
5241: LD_INT 62
5243: PUSH
5244: EMPTY
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PPUSH
5251: CALL_OW 72
5255: ST_TO_ADDR
// end ;
5256: LD_VAR 0 2
5260: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
5261: LD_INT 0
5263: PPUSH
5264: PPUSH
5265: PPUSH
5266: PPUSH
// tmp := [ ] ;
5267: LD_ADDR_VAR 0 3
5271: PUSH
5272: EMPTY
5273: ST_TO_ADDR
// list := [ ] ;
5274: LD_ADDR_VAR 0 5
5278: PUSH
5279: EMPTY
5280: ST_TO_ADDR
// for i = 16 to 25 do
5281: LD_ADDR_VAR 0 4
5285: PUSH
5286: DOUBLE
5287: LD_INT 16
5289: DEC
5290: ST_TO_ADDR
5291: LD_INT 25
5293: PUSH
5294: FOR_TO
5295: IFFALSE 5368
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
5297: LD_ADDR_VAR 0 3
5301: PUSH
5302: LD_VAR 0 3
5306: PUSH
5307: LD_INT 22
5309: PUSH
5310: LD_VAR 0 1
5314: PPUSH
5315: CALL_OW 255
5319: PUSH
5320: EMPTY
5321: LIST
5322: LIST
5323: PUSH
5324: LD_INT 91
5326: PUSH
5327: LD_VAR 0 1
5331: PUSH
5332: LD_INT 6
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: LD_INT 30
5342: PUSH
5343: LD_VAR 0 4
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: EMPTY
5358: LIST
5359: PPUSH
5360: CALL_OW 69
5364: ADD
5365: ST_TO_ADDR
5366: GO 5294
5368: POP
5369: POP
// for i = 1 to tmp do
5370: LD_ADDR_VAR 0 4
5374: PUSH
5375: DOUBLE
5376: LD_INT 1
5378: DEC
5379: ST_TO_ADDR
5380: LD_VAR 0 3
5384: PUSH
5385: FOR_TO
5386: IFFALSE 5474
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
5388: LD_ADDR_VAR 0 5
5392: PUSH
5393: LD_VAR 0 5
5397: PUSH
5398: LD_VAR 0 3
5402: PUSH
5403: LD_VAR 0 4
5407: ARRAY
5408: PPUSH
5409: CALL_OW 266
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 4
5423: ARRAY
5424: PPUSH
5425: CALL_OW 250
5429: PUSH
5430: LD_VAR 0 3
5434: PUSH
5435: LD_VAR 0 4
5439: ARRAY
5440: PPUSH
5441: CALL_OW 251
5445: PUSH
5446: LD_VAR 0 3
5450: PUSH
5451: LD_VAR 0 4
5455: ARRAY
5456: PPUSH
5457: CALL_OW 254
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: ADD
5471: ST_TO_ADDR
5472: GO 5385
5474: POP
5475: POP
// result := list ;
5476: LD_ADDR_VAR 0 2
5480: PUSH
5481: LD_VAR 0 5
5485: ST_TO_ADDR
// end ;
5486: LD_VAR 0 2
5490: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
5491: LD_INT 0
5493: PPUSH
5494: PPUSH
5495: PPUSH
5496: PPUSH
5497: PPUSH
5498: PPUSH
5499: PPUSH
// if not factory then
5500: LD_VAR 0 1
5504: NOT
5505: IFFALSE 5509
// exit ;
5507: GO 6112
// if control = control_apeman then
5509: LD_VAR 0 4
5513: PUSH
5514: LD_INT 5
5516: EQUAL
5517: IFFALSE 5626
// begin tmp := UnitsInside ( factory ) ;
5519: LD_ADDR_VAR 0 8
5523: PUSH
5524: LD_VAR 0 1
5528: PPUSH
5529: CALL_OW 313
5533: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
5534: LD_VAR 0 8
5538: PPUSH
5539: LD_INT 25
5541: PUSH
5542: LD_INT 12
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 72
5553: NOT
5554: IFFALSE 5564
// control := control_manual ;
5556: LD_ADDR_VAR 0 4
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
5564: LD_ADDR_VAR 0 8
5568: PUSH
5569: LD_VAR 0 1
5573: PPUSH
5574: CALL 5261 0 1
5578: ST_TO_ADDR
// if tmp then
5579: LD_VAR 0 8
5583: IFFALSE 5626
// begin for i in tmp do
5585: LD_ADDR_VAR 0 7
5589: PUSH
5590: LD_VAR 0 8
5594: PUSH
5595: FOR_IN
5596: IFFALSE 5624
// if i [ 1 ] = b_ext_radio then
5598: LD_VAR 0 7
5602: PUSH
5603: LD_INT 1
5605: ARRAY
5606: PUSH
5607: LD_INT 22
5609: EQUAL
5610: IFFALSE 5622
// begin control := control_remote ;
5612: LD_ADDR_VAR 0 4
5616: PUSH
5617: LD_INT 2
5619: ST_TO_ADDR
// break ;
5620: GO 5624
// end ;
5622: GO 5595
5624: POP
5625: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
5626: LD_VAR 0 1
5630: PPUSH
5631: LD_VAR 0 2
5635: PPUSH
5636: LD_VAR 0 3
5640: PPUSH
5641: LD_VAR 0 4
5645: PPUSH
5646: LD_VAR 0 5
5650: PPUSH
5651: CALL_OW 448
5655: IFFALSE 5690
// begin result := [ chassis , engine , control , weapon ] ;
5657: LD_ADDR_VAR 0 6
5661: PUSH
5662: LD_VAR 0 2
5666: PUSH
5667: LD_VAR 0 3
5671: PUSH
5672: LD_VAR 0 4
5676: PUSH
5677: LD_VAR 0 5
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: LIST
5686: LIST
5687: ST_TO_ADDR
// exit ;
5688: GO 6112
// end ; _chassis := AvailableChassisList ( factory ) ;
5690: LD_ADDR_VAR 0 9
5694: PUSH
5695: LD_VAR 0 1
5699: PPUSH
5700: CALL_OW 475
5704: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
5705: LD_ADDR_VAR 0 11
5709: PUSH
5710: LD_VAR 0 1
5714: PPUSH
5715: CALL_OW 476
5719: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
5720: LD_ADDR_VAR 0 12
5724: PUSH
5725: LD_VAR 0 1
5729: PPUSH
5730: CALL_OW 477
5734: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
5735: LD_ADDR_VAR 0 10
5739: PUSH
5740: LD_VAR 0 1
5744: PPUSH
5745: CALL_OW 478
5749: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
5750: LD_VAR 0 9
5754: NOT
5755: IFTRUE 5764
5757: PUSH
5758: LD_VAR 0 11
5762: NOT
5763: OR
5764: IFTRUE 5773
5766: PUSH
5767: LD_VAR 0 12
5771: NOT
5772: OR
5773: IFTRUE 5782
5775: PUSH
5776: LD_VAR 0 10
5780: NOT
5781: OR
5782: IFFALSE 5817
// begin result := [ chassis , engine , control , weapon ] ;
5784: LD_ADDR_VAR 0 6
5788: PUSH
5789: LD_VAR 0 2
5793: PUSH
5794: LD_VAR 0 3
5798: PUSH
5799: LD_VAR 0 4
5803: PUSH
5804: LD_VAR 0 5
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: LIST
5814: ST_TO_ADDR
// exit ;
5815: GO 6112
// end ; if not chassis in _chassis then
5817: LD_VAR 0 2
5821: PUSH
5822: LD_VAR 0 9
5826: IN
5827: NOT
5828: IFFALSE 5854
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
5830: LD_ADDR_VAR 0 2
5834: PUSH
5835: LD_VAR 0 9
5839: PUSH
5840: LD_INT 1
5842: PPUSH
5843: LD_VAR 0 9
5847: PPUSH
5848: CALL_OW 12
5852: ARRAY
5853: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_VAR 0 3
5863: PPUSH
5864: CALL 6117 0 2
5868: NOT
5869: IFFALSE 5930
// repeat engine := _engine [ 1 ] ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: LD_VAR 0 11
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
5885: LD_ADDR_VAR 0 11
5889: PUSH
5890: LD_VAR 0 11
5894: PPUSH
5895: LD_INT 1
5897: PPUSH
5898: CALL_OW 3
5902: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
5903: LD_VAR 0 2
5907: PPUSH
5908: LD_VAR 0 3
5912: PPUSH
5913: CALL 6117 0 2
5917: IFTRUE 5928
5919: PUSH
5920: LD_VAR 0 11
5924: PUSH
5925: EMPTY
5926: EQUAL
5927: OR
5928: IFFALSE 5871
// if not control in _control then
5930: LD_VAR 0 4
5934: PUSH
5935: LD_VAR 0 12
5939: IN
5940: NOT
5941: IFFALSE 5967
// control := _control [ rand ( 1 , _control ) ] ;
5943: LD_ADDR_VAR 0 4
5947: PUSH
5948: LD_VAR 0 12
5952: PUSH
5953: LD_INT 1
5955: PPUSH
5956: LD_VAR 0 12
5960: PPUSH
5961: CALL_OW 12
5965: ARRAY
5966: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
5967: LD_VAR 0 2
5971: PPUSH
5972: LD_VAR 0 5
5976: PPUSH
5977: CALL 6339 0 2
5981: NOT
5982: IFFALSE 6043
// repeat weapon := _weapon [ 1 ] ;
5984: LD_ADDR_VAR 0 5
5988: PUSH
5989: LD_VAR 0 10
5993: PUSH
5994: LD_INT 1
5996: ARRAY
5997: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
5998: LD_ADDR_VAR 0 10
6002: PUSH
6003: LD_VAR 0 10
6007: PPUSH
6008: LD_INT 1
6010: PPUSH
6011: CALL_OW 3
6015: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
6016: LD_VAR 0 2
6020: PPUSH
6021: LD_VAR 0 5
6025: PPUSH
6026: CALL 6339 0 2
6030: IFTRUE 6041
6032: PUSH
6033: LD_VAR 0 10
6037: PUSH
6038: EMPTY
6039: EQUAL
6040: OR
6041: IFFALSE 5984
// result := [ ] ;
6043: LD_ADDR_VAR 0 6
6047: PUSH
6048: EMPTY
6049: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
6050: LD_VAR 0 1
6054: PPUSH
6055: LD_VAR 0 2
6059: PPUSH
6060: LD_VAR 0 3
6064: PPUSH
6065: LD_VAR 0 4
6069: PPUSH
6070: LD_VAR 0 5
6074: PPUSH
6075: CALL_OW 448
6079: IFFALSE 6112
// result := [ chassis , engine , control , weapon ] ;
6081: LD_ADDR_VAR 0 6
6085: PUSH
6086: LD_VAR 0 2
6090: PUSH
6091: LD_VAR 0 3
6095: PUSH
6096: LD_VAR 0 4
6100: PUSH
6101: LD_VAR 0 5
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: ST_TO_ADDR
// end ;
6112: LD_VAR 0 6
6116: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
6117: LD_INT 0
6119: PPUSH
// if not chassis or not engine then
6120: LD_VAR 0 1
6124: NOT
6125: IFTRUE 6134
6127: PUSH
6128: LD_VAR 0 2
6132: NOT
6133: OR
6134: IFFALSE 6138
// exit ;
6136: GO 6334
// case engine of engine_solar :
6138: LD_VAR 0 2
6142: PUSH
6143: LD_INT 2
6145: DOUBLE
6146: EQUAL
6147: IFTRUE 6151
6149: GO 6189
6151: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
6152: LD_ADDR_VAR 0 3
6156: PUSH
6157: LD_INT 11
6159: PUSH
6160: LD_INT 12
6162: PUSH
6163: LD_INT 13
6165: PUSH
6166: LD_INT 14
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: ST_TO_ADDR
6187: GO 6318
6189: LD_INT 1
6191: DOUBLE
6192: EQUAL
6193: IFTRUE 6197
6195: GO 6259
6197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
6198: LD_ADDR_VAR 0 3
6202: PUSH
6203: LD_INT 11
6205: PUSH
6206: LD_INT 12
6208: PUSH
6209: LD_INT 13
6211: PUSH
6212: LD_INT 14
6214: PUSH
6215: LD_INT 1
6217: PUSH
6218: LD_INT 2
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: LD_INT 4
6226: PUSH
6227: LD_INT 5
6229: PUSH
6230: LD_INT 21
6232: PUSH
6233: LD_INT 23
6235: PUSH
6236: LD_INT 22
6238: PUSH
6239: LD_INT 24
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: ST_TO_ADDR
6257: GO 6318
6259: LD_INT 3
6261: DOUBLE
6262: EQUAL
6263: IFTRUE 6267
6265: GO 6317
6267: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
6268: LD_ADDR_VAR 0 3
6272: PUSH
6273: LD_INT 13
6275: PUSH
6276: LD_INT 14
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: LD_INT 3
6284: PUSH
6285: LD_INT 4
6287: PUSH
6288: LD_INT 5
6290: PUSH
6291: LD_INT 21
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_INT 23
6299: PUSH
6300: LD_INT 24
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: ST_TO_ADDR
6315: GO 6318
6317: POP
// result := ( chassis in result ) ;
6318: LD_ADDR_VAR 0 3
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: LD_VAR 0 3
6332: IN
6333: ST_TO_ADDR
// end ;
6334: LD_VAR 0 3
6338: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
6339: LD_INT 0
6341: PPUSH
// if not chassis or not weapon then
6342: LD_VAR 0 1
6346: NOT
6347: IFTRUE 6356
6349: PUSH
6350: LD_VAR 0 2
6354: NOT
6355: OR
6356: IFFALSE 6360
// exit ;
6358: GO 7420
// case weapon of us_machine_gun :
6360: LD_VAR 0 2
6364: PUSH
6365: LD_INT 2
6367: DOUBLE
6368: EQUAL
6369: IFTRUE 6373
6371: GO 6403
6373: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
6374: LD_ADDR_VAR 0 3
6378: PUSH
6379: LD_INT 1
6381: PUSH
6382: LD_INT 2
6384: PUSH
6385: LD_INT 3
6387: PUSH
6388: LD_INT 4
6390: PUSH
6391: LD_INT 5
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: ST_TO_ADDR
6401: GO 7404
6403: LD_INT 3
6405: DOUBLE
6406: EQUAL
6407: IFTRUE 6411
6409: GO 6441
6411: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
6412: LD_ADDR_VAR 0 3
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: LD_INT 2
6422: PUSH
6423: LD_INT 3
6425: PUSH
6426: LD_INT 4
6428: PUSH
6429: LD_INT 5
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: ST_TO_ADDR
6439: GO 7404
6441: LD_INT 11
6443: DOUBLE
6444: EQUAL
6445: IFTRUE 6449
6447: GO 6479
6449: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
6450: LD_ADDR_VAR 0 3
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 3
6463: PUSH
6464: LD_INT 4
6466: PUSH
6467: LD_INT 5
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: ST_TO_ADDR
6477: GO 7404
6479: LD_INT 4
6481: DOUBLE
6482: EQUAL
6483: IFTRUE 6487
6485: GO 6513
6487: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
6488: LD_ADDR_VAR 0 3
6492: PUSH
6493: LD_INT 2
6495: PUSH
6496: LD_INT 3
6498: PUSH
6499: LD_INT 4
6501: PUSH
6502: LD_INT 5
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: ST_TO_ADDR
6511: GO 7404
6513: LD_INT 5
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6547
6521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: LD_INT 2
6529: PUSH
6530: LD_INT 3
6532: PUSH
6533: LD_INT 4
6535: PUSH
6536: LD_INT 5
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: ST_TO_ADDR
6545: GO 7404
6547: LD_INT 9
6549: DOUBLE
6550: EQUAL
6551: IFTRUE 6555
6553: GO 6581
6555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
6556: LD_ADDR_VAR 0 3
6560: PUSH
6561: LD_INT 2
6563: PUSH
6564: LD_INT 3
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: EMPTY
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: ST_TO_ADDR
6579: GO 7404
6581: LD_INT 7
6583: DOUBLE
6584: EQUAL
6585: IFTRUE 6589
6587: GO 6615
6589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
6590: LD_ADDR_VAR 0 3
6594: PUSH
6595: LD_INT 2
6597: PUSH
6598: LD_INT 3
6600: PUSH
6601: LD_INT 4
6603: PUSH
6604: LD_INT 5
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: ST_TO_ADDR
6613: GO 7404
6615: LD_INT 12
6617: DOUBLE
6618: EQUAL
6619: IFTRUE 6623
6621: GO 6649
6623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
6624: LD_ADDR_VAR 0 3
6628: PUSH
6629: LD_INT 2
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: LD_INT 4
6637: PUSH
6638: LD_INT 5
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: ST_TO_ADDR
6647: GO 7404
6649: LD_INT 13
6651: DOUBLE
6652: EQUAL
6653: IFTRUE 6657
6655: GO 6683
6657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
6658: LD_ADDR_VAR 0 3
6662: PUSH
6663: LD_INT 2
6665: PUSH
6666: LD_INT 3
6668: PUSH
6669: LD_INT 4
6671: PUSH
6672: LD_INT 5
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: ST_TO_ADDR
6681: GO 7404
6683: LD_INT 14
6685: DOUBLE
6686: EQUAL
6687: IFTRUE 6691
6689: GO 6709
6691: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
6692: LD_ADDR_VAR 0 3
6696: PUSH
6697: LD_INT 4
6699: PUSH
6700: LD_INT 5
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: ST_TO_ADDR
6707: GO 7404
6709: LD_INT 6
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6735
6717: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
6718: LD_ADDR_VAR 0 3
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 5
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: ST_TO_ADDR
6733: GO 7404
6735: LD_INT 10
6737: DOUBLE
6738: EQUAL
6739: IFTRUE 6743
6741: GO 6761
6743: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
6744: LD_ADDR_VAR 0 3
6748: PUSH
6749: LD_INT 4
6751: PUSH
6752: LD_INT 5
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: ST_TO_ADDR
6759: GO 7404
6761: LD_INT 22
6763: DOUBLE
6764: EQUAL
6765: IFTRUE 6769
6767: GO 6795
6769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
6770: LD_ADDR_VAR 0 3
6774: PUSH
6775: LD_INT 11
6777: PUSH
6778: LD_INT 12
6780: PUSH
6781: LD_INT 13
6783: PUSH
6784: LD_INT 14
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: ST_TO_ADDR
6793: GO 7404
6795: LD_INT 23
6797: DOUBLE
6798: EQUAL
6799: IFTRUE 6803
6801: GO 6829
6803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
6804: LD_ADDR_VAR 0 3
6808: PUSH
6809: LD_INT 11
6811: PUSH
6812: LD_INT 12
6814: PUSH
6815: LD_INT 13
6817: PUSH
6818: LD_INT 14
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: ST_TO_ADDR
6827: GO 7404
6829: LD_INT 24
6831: DOUBLE
6832: EQUAL
6833: IFTRUE 6837
6835: GO 6863
6837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
6838: LD_ADDR_VAR 0 3
6842: PUSH
6843: LD_INT 11
6845: PUSH
6846: LD_INT 12
6848: PUSH
6849: LD_INT 13
6851: PUSH
6852: LD_INT 14
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: ST_TO_ADDR
6861: GO 7404
6863: LD_INT 30
6865: DOUBLE
6866: EQUAL
6867: IFTRUE 6871
6869: GO 6897
6871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
6872: LD_ADDR_VAR 0 3
6876: PUSH
6877: LD_INT 11
6879: PUSH
6880: LD_INT 12
6882: PUSH
6883: LD_INT 13
6885: PUSH
6886: LD_INT 14
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 7404
6897: LD_INT 25
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 6923
6905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
6906: LD_ADDR_VAR 0 3
6910: PUSH
6911: LD_INT 13
6913: PUSH
6914: LD_INT 14
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: ST_TO_ADDR
6921: GO 7404
6923: LD_INT 27
6925: DOUBLE
6926: EQUAL
6927: IFTRUE 6931
6929: GO 6949
6931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
6932: LD_ADDR_VAR 0 3
6936: PUSH
6937: LD_INT 13
6939: PUSH
6940: LD_INT 14
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: ST_TO_ADDR
6947: GO 7404
6949: LD_INT 92
6951: DOUBLE
6952: EQUAL
6953: IFTRUE 6957
6955: GO 6983
6957: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
6958: LD_ADDR_VAR 0 3
6962: PUSH
6963: LD_INT 11
6965: PUSH
6966: LD_INT 12
6968: PUSH
6969: LD_INT 13
6971: PUSH
6972: LD_INT 14
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: ST_TO_ADDR
6981: GO 7404
6983: LD_INT 28
6985: DOUBLE
6986: EQUAL
6987: IFTRUE 6991
6989: GO 7009
6991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
6992: LD_ADDR_VAR 0 3
6996: PUSH
6997: LD_INT 13
6999: PUSH
7000: LD_INT 14
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: ST_TO_ADDR
7007: GO 7404
7009: LD_INT 29
7011: DOUBLE
7012: EQUAL
7013: IFTRUE 7017
7015: GO 7035
7017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
7018: LD_ADDR_VAR 0 3
7022: PUSH
7023: LD_INT 13
7025: PUSH
7026: LD_INT 14
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: ST_TO_ADDR
7033: GO 7404
7035: LD_INT 31
7037: DOUBLE
7038: EQUAL
7039: IFTRUE 7043
7041: GO 7061
7043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
7044: LD_ADDR_VAR 0 3
7048: PUSH
7049: LD_INT 13
7051: PUSH
7052: LD_INT 14
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: ST_TO_ADDR
7059: GO 7404
7061: LD_INT 26
7063: DOUBLE
7064: EQUAL
7065: IFTRUE 7069
7067: GO 7087
7069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
7070: LD_ADDR_VAR 0 3
7074: PUSH
7075: LD_INT 13
7077: PUSH
7078: LD_INT 14
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: ST_TO_ADDR
7085: GO 7404
7087: LD_INT 42
7089: DOUBLE
7090: EQUAL
7091: IFTRUE 7095
7093: GO 7121
7095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
7096: LD_ADDR_VAR 0 3
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 23
7109: PUSH
7110: LD_INT 24
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: ST_TO_ADDR
7119: GO 7404
7121: LD_INT 43
7123: DOUBLE
7124: EQUAL
7125: IFTRUE 7129
7127: GO 7155
7129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
7130: LD_ADDR_VAR 0 3
7134: PUSH
7135: LD_INT 21
7137: PUSH
7138: LD_INT 22
7140: PUSH
7141: LD_INT 23
7143: PUSH
7144: LD_INT 24
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: ST_TO_ADDR
7153: GO 7404
7155: LD_INT 44
7157: DOUBLE
7158: EQUAL
7159: IFTRUE 7163
7161: GO 7189
7163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
7164: LD_ADDR_VAR 0 3
7168: PUSH
7169: LD_INT 21
7171: PUSH
7172: LD_INT 22
7174: PUSH
7175: LD_INT 23
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: ST_TO_ADDR
7187: GO 7404
7189: LD_INT 45
7191: DOUBLE
7192: EQUAL
7193: IFTRUE 7197
7195: GO 7223
7197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
7198: LD_ADDR_VAR 0 3
7202: PUSH
7203: LD_INT 21
7205: PUSH
7206: LD_INT 22
7208: PUSH
7209: LD_INT 23
7211: PUSH
7212: LD_INT 24
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: ST_TO_ADDR
7221: GO 7404
7223: LD_INT 49
7225: DOUBLE
7226: EQUAL
7227: IFTRUE 7231
7229: GO 7257
7231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 22
7242: PUSH
7243: LD_INT 23
7245: PUSH
7246: LD_INT 24
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: ST_TO_ADDR
7255: GO 7404
7257: LD_INT 51
7259: DOUBLE
7260: EQUAL
7261: IFTRUE 7265
7263: GO 7291
7265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_INT 21
7273: PUSH
7274: LD_INT 22
7276: PUSH
7277: LD_INT 23
7279: PUSH
7280: LD_INT 24
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: ST_TO_ADDR
7289: GO 7404
7291: LD_INT 52
7293: DOUBLE
7294: EQUAL
7295: IFTRUE 7299
7297: GO 7325
7299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
7300: LD_ADDR_VAR 0 3
7304: PUSH
7305: LD_INT 21
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 23
7313: PUSH
7314: LD_INT 24
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: ST_TO_ADDR
7323: GO 7404
7325: LD_INT 53
7327: DOUBLE
7328: EQUAL
7329: IFTRUE 7333
7331: GO 7351
7333: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
7334: LD_ADDR_VAR 0 3
7338: PUSH
7339: LD_INT 23
7341: PUSH
7342: LD_INT 24
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: ST_TO_ADDR
7349: GO 7404
7351: LD_INT 46
7353: DOUBLE
7354: EQUAL
7355: IFTRUE 7359
7357: GO 7377
7359: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
7360: LD_ADDR_VAR 0 3
7364: PUSH
7365: LD_INT 23
7367: PUSH
7368: LD_INT 24
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: ST_TO_ADDR
7375: GO 7404
7377: LD_INT 47
7379: DOUBLE
7380: EQUAL
7381: IFTRUE 7385
7383: GO 7403
7385: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
7386: LD_ADDR_VAR 0 3
7390: PUSH
7391: LD_INT 23
7393: PUSH
7394: LD_INT 24
7396: PUSH
7397: EMPTY
7398: LIST
7399: LIST
7400: ST_TO_ADDR
7401: GO 7404
7403: POP
// result := ( chassis in result ) ;
7404: LD_ADDR_VAR 0 3
7408: PUSH
7409: LD_VAR 0 1
7413: PUSH
7414: LD_VAR 0 3
7418: IN
7419: ST_TO_ADDR
// end ;
7420: LD_VAR 0 3
7424: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
7433: PPUSH
// result := array ;
7434: LD_ADDR_VAR 0 5
7438: PUSH
7439: LD_VAR 0 1
7443: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
7444: LD_VAR 0 1
7448: NOT
7449: IFTRUE 7458
7451: PUSH
7452: LD_VAR 0 2
7456: NOT
7457: OR
7458: IFTRUE 7467
7460: PUSH
7461: LD_VAR 0 3
7465: NOT
7466: OR
7467: IFTRUE 7481
7469: PUSH
7470: LD_VAR 0 2
7474: PUSH
7475: LD_VAR 0 1
7479: GREATER
7480: OR
7481: IFTRUE 7495
7483: PUSH
7484: LD_VAR 0 3
7488: PUSH
7489: LD_VAR 0 1
7493: GREATER
7494: OR
7495: IFFALSE 7499
// exit ;
7497: GO 7795
// if direction then
7499: LD_VAR 0 4
7503: IFFALSE 7567
// begin d := 1 ;
7505: LD_ADDR_VAR 0 9
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if i_from > i_to then
7513: LD_VAR 0 2
7517: PUSH
7518: LD_VAR 0 3
7522: GREATER
7523: IFFALSE 7549
// length := ( array - i_from ) + i_to else
7525: LD_ADDR_VAR 0 11
7529: PUSH
7530: LD_VAR 0 1
7534: PUSH
7535: LD_VAR 0 2
7539: MINUS
7540: PUSH
7541: LD_VAR 0 3
7545: PLUS
7546: ST_TO_ADDR
7547: GO 7565
// length := i_to - i_from ;
7549: LD_ADDR_VAR 0 11
7553: PUSH
7554: LD_VAR 0 3
7558: PUSH
7559: LD_VAR 0 2
7563: MINUS
7564: ST_TO_ADDR
// end else
7565: GO 7628
// begin d := - 1 ;
7567: LD_ADDR_VAR 0 9
7571: PUSH
7572: LD_INT 1
7574: NEG
7575: ST_TO_ADDR
// if i_from > i_to then
7576: LD_VAR 0 2
7580: PUSH
7581: LD_VAR 0 3
7585: GREATER
7586: IFFALSE 7606
// length := i_from - i_to else
7588: LD_ADDR_VAR 0 11
7592: PUSH
7593: LD_VAR 0 2
7597: PUSH
7598: LD_VAR 0 3
7602: MINUS
7603: ST_TO_ADDR
7604: GO 7628
// length := ( array - i_to ) + i_from ;
7606: LD_ADDR_VAR 0 11
7610: PUSH
7611: LD_VAR 0 1
7615: PUSH
7616: LD_VAR 0 3
7620: MINUS
7621: PUSH
7622: LD_VAR 0 2
7626: PLUS
7627: ST_TO_ADDR
// end ; if not length then
7628: LD_VAR 0 11
7632: NOT
7633: IFFALSE 7637
// exit ;
7635: GO 7795
// tmp := array ;
7637: LD_ADDR_VAR 0 10
7641: PUSH
7642: LD_VAR 0 1
7646: ST_TO_ADDR
// for i = 1 to length do
7647: LD_ADDR_VAR 0 6
7651: PUSH
7652: DOUBLE
7653: LD_INT 1
7655: DEC
7656: ST_TO_ADDR
7657: LD_VAR 0 11
7661: PUSH
7662: FOR_TO
7663: IFFALSE 7783
// begin for j = 1 to array do
7665: LD_ADDR_VAR 0 7
7669: PUSH
7670: DOUBLE
7671: LD_INT 1
7673: DEC
7674: ST_TO_ADDR
7675: LD_VAR 0 1
7679: PUSH
7680: FOR_TO
7681: IFFALSE 7769
// begin k := j + d ;
7683: LD_ADDR_VAR 0 8
7687: PUSH
7688: LD_VAR 0 7
7692: PUSH
7693: LD_VAR 0 9
7697: PLUS
7698: ST_TO_ADDR
// if k > array then
7699: LD_VAR 0 8
7703: PUSH
7704: LD_VAR 0 1
7708: GREATER
7709: IFFALSE 7719
// k := 1 ;
7711: LD_ADDR_VAR 0 8
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if not k then
7719: LD_VAR 0 8
7723: NOT
7724: IFFALSE 7736
// k := array ;
7726: LD_ADDR_VAR 0 8
7730: PUSH
7731: LD_VAR 0 1
7735: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
7736: LD_ADDR_VAR 0 10
7740: PUSH
7741: LD_VAR 0 10
7745: PPUSH
7746: LD_VAR 0 8
7750: PPUSH
7751: LD_VAR 0 1
7755: PUSH
7756: LD_VAR 0 7
7760: ARRAY
7761: PPUSH
7762: CALL_OW 1
7766: ST_TO_ADDR
// end ;
7767: GO 7680
7769: POP
7770: POP
// array := tmp ;
7771: LD_ADDR_VAR 0 1
7775: PUSH
7776: LD_VAR 0 10
7780: ST_TO_ADDR
// end ;
7781: GO 7662
7783: POP
7784: POP
// result := array ;
7785: LD_ADDR_VAR 0 5
7789: PUSH
7790: LD_VAR 0 1
7794: ST_TO_ADDR
// end ;
7795: LD_VAR 0 5
7799: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
7800: LD_INT 0
7802: PPUSH
7803: PPUSH
// result := 0 ;
7804: LD_ADDR_VAR 0 3
7808: PUSH
7809: LD_INT 0
7811: ST_TO_ADDR
// if not array or not value in array then
7812: LD_VAR 0 1
7816: NOT
7817: IFTRUE 7832
7819: PUSH
7820: LD_VAR 0 2
7824: PUSH
7825: LD_VAR 0 1
7829: IN
7830: NOT
7831: OR
7832: IFFALSE 7836
// exit ;
7834: GO 7890
// for i = 1 to array do
7836: LD_ADDR_VAR 0 4
7840: PUSH
7841: DOUBLE
7842: LD_INT 1
7844: DEC
7845: ST_TO_ADDR
7846: LD_VAR 0 1
7850: PUSH
7851: FOR_TO
7852: IFFALSE 7888
// if value = array [ i ] then
7854: LD_VAR 0 2
7858: PUSH
7859: LD_VAR 0 1
7863: PUSH
7864: LD_VAR 0 4
7868: ARRAY
7869: EQUAL
7870: IFFALSE 7886
// begin result := i ;
7872: LD_ADDR_VAR 0 3
7876: PUSH
7877: LD_VAR 0 4
7881: ST_TO_ADDR
// exit ;
7882: POP
7883: POP
7884: GO 7890
// end ;
7886: GO 7851
7888: POP
7889: POP
// end ;
7890: LD_VAR 0 3
7894: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
7895: LD_INT 0
7897: PPUSH
// vc_chassis := chassis ;
7898: LD_ADDR_OWVAR 37
7902: PUSH
7903: LD_VAR 0 1
7907: ST_TO_ADDR
// vc_engine := engine ;
7908: LD_ADDR_OWVAR 39
7912: PUSH
7913: LD_VAR 0 2
7917: ST_TO_ADDR
// vc_control := control ;
7918: LD_ADDR_OWVAR 38
7922: PUSH
7923: LD_VAR 0 3
7927: ST_TO_ADDR
// vc_weapon := weapon ;
7928: LD_ADDR_OWVAR 40
7932: PUSH
7933: LD_VAR 0 4
7937: ST_TO_ADDR
// vc_fuel_battery := fuel ;
7938: LD_ADDR_OWVAR 41
7942: PUSH
7943: LD_VAR 0 5
7947: ST_TO_ADDR
// end ;
7948: LD_VAR 0 6
7952: RET
// export function WantPlant ( unit ) ; var task ; begin
7953: LD_INT 0
7955: PPUSH
7956: PPUSH
// result := false ;
7957: LD_ADDR_VAR 0 2
7961: PUSH
7962: LD_INT 0
7964: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
7965: LD_ADDR_VAR 0 3
7969: PUSH
7970: LD_VAR 0 1
7974: PPUSH
7975: CALL_OW 437
7979: ST_TO_ADDR
// if task then
7980: LD_VAR 0 3
7984: IFFALSE 8012
// if task [ 1 ] [ 1 ] = p then
7986: LD_VAR 0 3
7990: PUSH
7991: LD_INT 1
7993: ARRAY
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: PUSH
7999: LD_STRING p
8001: EQUAL
8002: IFFALSE 8012
// result := true ;
8004: LD_ADDR_VAR 0 2
8008: PUSH
8009: LD_INT 1
8011: ST_TO_ADDR
// end ;
8012: LD_VAR 0 2
8016: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
8017: LD_INT 0
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
// if pos < 1 then
8023: LD_VAR 0 2
8027: PUSH
8028: LD_INT 1
8030: LESS
8031: IFFALSE 8035
// exit ;
8033: GO 8338
// if pos = 1 then
8035: LD_VAR 0 2
8039: PUSH
8040: LD_INT 1
8042: EQUAL
8043: IFFALSE 8076
// result := Replace ( arr , pos [ 1 ] , value ) else
8045: LD_ADDR_VAR 0 4
8049: PUSH
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_VAR 0 2
8059: PUSH
8060: LD_INT 1
8062: ARRAY
8063: PPUSH
8064: LD_VAR 0 3
8068: PPUSH
8069: CALL_OW 1
8073: ST_TO_ADDR
8074: GO 8338
// begin tmp := arr ;
8076: LD_ADDR_VAR 0 6
8080: PUSH
8081: LD_VAR 0 1
8085: ST_TO_ADDR
// s_arr := [ tmp ] ;
8086: LD_ADDR_VAR 0 7
8090: PUSH
8091: LD_VAR 0 6
8095: PUSH
8096: EMPTY
8097: LIST
8098: ST_TO_ADDR
// for i = 1 to pos - 1 do
8099: LD_ADDR_VAR 0 5
8103: PUSH
8104: DOUBLE
8105: LD_INT 1
8107: DEC
8108: ST_TO_ADDR
8109: LD_VAR 0 2
8113: PUSH
8114: LD_INT 1
8116: MINUS
8117: PUSH
8118: FOR_TO
8119: IFFALSE 8164
// begin tmp := tmp [ pos [ i ] ] ;
8121: LD_ADDR_VAR 0 6
8125: PUSH
8126: LD_VAR 0 6
8130: PUSH
8131: LD_VAR 0 2
8135: PUSH
8136: LD_VAR 0 5
8140: ARRAY
8141: ARRAY
8142: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
8143: LD_ADDR_VAR 0 7
8147: PUSH
8148: LD_VAR 0 7
8152: PUSH
8153: LD_VAR 0 6
8157: PUSH
8158: EMPTY
8159: LIST
8160: ADD
8161: ST_TO_ADDR
// end ;
8162: GO 8118
8164: POP
8165: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
8166: LD_ADDR_VAR 0 6
8170: PUSH
8171: LD_VAR 0 6
8175: PPUSH
8176: LD_VAR 0 2
8180: PUSH
8181: LD_VAR 0 2
8185: ARRAY
8186: PPUSH
8187: LD_VAR 0 3
8191: PPUSH
8192: CALL_OW 1
8196: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
8197: LD_ADDR_VAR 0 7
8201: PUSH
8202: LD_VAR 0 7
8206: PPUSH
8207: LD_VAR 0 7
8211: PPUSH
8212: LD_VAR 0 6
8216: PPUSH
8217: CALL_OW 1
8221: ST_TO_ADDR
// for i = s_arr downto 2 do
8222: LD_ADDR_VAR 0 5
8226: PUSH
8227: DOUBLE
8228: LD_VAR 0 7
8232: INC
8233: ST_TO_ADDR
8234: LD_INT 2
8236: PUSH
8237: FOR_DOWNTO
8238: IFFALSE 8322
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
8240: LD_ADDR_VAR 0 6
8244: PUSH
8245: LD_VAR 0 7
8249: PUSH
8250: LD_VAR 0 5
8254: PUSH
8255: LD_INT 1
8257: MINUS
8258: ARRAY
8259: PPUSH
8260: LD_VAR 0 2
8264: PUSH
8265: LD_VAR 0 5
8269: PUSH
8270: LD_INT 1
8272: MINUS
8273: ARRAY
8274: PPUSH
8275: LD_VAR 0 7
8279: PUSH
8280: LD_VAR 0 5
8284: ARRAY
8285: PPUSH
8286: CALL_OW 1
8290: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
8291: LD_ADDR_VAR 0 7
8295: PUSH
8296: LD_VAR 0 7
8300: PPUSH
8301: LD_VAR 0 5
8305: PUSH
8306: LD_INT 1
8308: MINUS
8309: PPUSH
8310: LD_VAR 0 6
8314: PPUSH
8315: CALL_OW 1
8319: ST_TO_ADDR
// end ;
8320: GO 8237
8322: POP
8323: POP
// result := s_arr [ 1 ] ;
8324: LD_ADDR_VAR 0 4
8328: PUSH
8329: LD_VAR 0 7
8333: PUSH
8334: LD_INT 1
8336: ARRAY
8337: ST_TO_ADDR
// end ; end ;
8338: LD_VAR 0 4
8342: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
8343: LD_INT 0
8345: PPUSH
8346: PPUSH
// if not list then
8347: LD_VAR 0 1
8351: NOT
8352: IFFALSE 8356
// exit ;
8354: GO 8447
// i := list [ pos1 ] ;
8356: LD_ADDR_VAR 0 5
8360: PUSH
8361: LD_VAR 0 1
8365: PUSH
8366: LD_VAR 0 2
8370: ARRAY
8371: ST_TO_ADDR
// if not i then
8372: LD_VAR 0 5
8376: NOT
8377: IFFALSE 8381
// exit ;
8379: GO 8447
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
8381: LD_ADDR_VAR 0 1
8385: PUSH
8386: LD_VAR 0 1
8390: PPUSH
8391: LD_VAR 0 2
8395: PPUSH
8396: LD_VAR 0 1
8400: PUSH
8401: LD_VAR 0 3
8405: ARRAY
8406: PPUSH
8407: CALL_OW 1
8411: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
8412: LD_ADDR_VAR 0 1
8416: PUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: LD_VAR 0 3
8426: PPUSH
8427: LD_VAR 0 5
8431: PPUSH
8432: CALL_OW 1
8436: ST_TO_ADDR
// result := list ;
8437: LD_ADDR_VAR 0 4
8441: PUSH
8442: LD_VAR 0 1
8446: ST_TO_ADDR
// end ;
8447: LD_VAR 0 4
8451: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
8452: LD_INT 0
8454: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
8455: LD_ADDR_VAR 0 5
8459: PUSH
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 250
8469: PPUSH
8470: LD_VAR 0 1
8474: PPUSH
8475: CALL_OW 251
8479: PPUSH
8480: LD_VAR 0 2
8484: PPUSH
8485: LD_VAR 0 3
8489: PPUSH
8490: LD_VAR 0 4
8494: PPUSH
8495: CALL 8877 0 5
8499: ST_TO_ADDR
// end ;
8500: LD_VAR 0 5
8504: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
8505: LD_INT 0
8507: PPUSH
8508: PPUSH
8509: PPUSH
8510: PPUSH
// if not list or not unit then
8511: LD_VAR 0 2
8515: NOT
8516: IFTRUE 8525
8518: PUSH
8519: LD_VAR 0 1
8523: NOT
8524: OR
8525: IFFALSE 8529
// exit ;
8527: GO 8872
// result := [ ] ;
8529: LD_ADDR_VAR 0 5
8533: PUSH
8534: EMPTY
8535: ST_TO_ADDR
// for i in list do
8536: LD_ADDR_VAR 0 6
8540: PUSH
8541: LD_VAR 0 2
8545: PUSH
8546: FOR_IN
8547: IFFALSE 8765
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
8549: LD_ADDR_VAR 0 8
8553: PUSH
8554: LD_VAR 0 1
8558: PPUSH
8559: LD_VAR 0 6
8563: PUSH
8564: LD_INT 1
8566: ARRAY
8567: PPUSH
8568: LD_VAR 0 6
8572: PUSH
8573: LD_INT 2
8575: ARRAY
8576: PPUSH
8577: CALL_OW 297
8581: ST_TO_ADDR
// if not Count ( result ) then
8582: LD_VAR 0 5
8586: PPUSH
8587: CALL 5133 0 1
8591: NOT
8592: IFFALSE 8625
// begin result := Join ( result , [ i , tmp ] ) ;
8594: LD_ADDR_VAR 0 5
8598: PUSH
8599: LD_VAR 0 5
8603: PPUSH
8604: LD_VAR 0 6
8608: PUSH
8609: LD_VAR 0 8
8613: PUSH
8614: EMPTY
8615: LIST
8616: LIST
8617: PPUSH
8618: CALL 41065 0 2
8622: ST_TO_ADDR
// continue ;
8623: GO 8546
// end ; if result [ result ] [ 2 ] <= tmp then
8625: LD_VAR 0 5
8629: PUSH
8630: LD_VAR 0 5
8634: ARRAY
8635: PUSH
8636: LD_INT 2
8638: ARRAY
8639: PUSH
8640: LD_VAR 0 8
8644: LESSEQUAL
8645: IFFALSE 8678
// result := Join ( result , [ i , tmp ] ) else
8647: LD_ADDR_VAR 0 5
8651: PUSH
8652: LD_VAR 0 5
8656: PPUSH
8657: LD_VAR 0 6
8661: PUSH
8662: LD_VAR 0 8
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PPUSH
8671: CALL 41065 0 2
8675: ST_TO_ADDR
8676: GO 8763
// begin for j := 1 to Count ( result ) do
8678: LD_ADDR_VAR 0 7
8682: PUSH
8683: DOUBLE
8684: LD_INT 1
8686: DEC
8687: ST_TO_ADDR
8688: LD_VAR 0 5
8692: PPUSH
8693: CALL 5133 0 1
8697: PUSH
8698: FOR_TO
8699: IFFALSE 8761
// begin if tmp < result [ j ] [ 2 ] then
8701: LD_VAR 0 8
8705: PUSH
8706: LD_VAR 0 5
8710: PUSH
8711: LD_VAR 0 7
8715: ARRAY
8716: PUSH
8717: LD_INT 2
8719: ARRAY
8720: LESS
8721: IFFALSE 8759
// begin result := Insert ( result , j , [ i , tmp ] ) ;
8723: LD_ADDR_VAR 0 5
8727: PUSH
8728: LD_VAR 0 5
8732: PPUSH
8733: LD_VAR 0 7
8737: PPUSH
8738: LD_VAR 0 6
8742: PUSH
8743: LD_VAR 0 8
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 2
8756: ST_TO_ADDR
// break ;
8757: GO 8761
// end ; end ;
8759: GO 8698
8761: POP
8762: POP
// end ; end ;
8763: GO 8546
8765: POP
8766: POP
// if result and not asc then
8767: LD_VAR 0 5
8771: IFFALSE 8780
8773: PUSH
8774: LD_VAR 0 3
8778: NOT
8779: AND
8780: IFFALSE 8797
// result := ReverseArray ( result ) ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 5
8791: PPUSH
8792: CALL 36155 0 1
8796: ST_TO_ADDR
// tmp := [ ] ;
8797: LD_ADDR_VAR 0 8
8801: PUSH
8802: EMPTY
8803: ST_TO_ADDR
// if mode then
8804: LD_VAR 0 4
8808: IFFALSE 8872
// begin for i := 1 to result do
8810: LD_ADDR_VAR 0 6
8814: PUSH
8815: DOUBLE
8816: LD_INT 1
8818: DEC
8819: ST_TO_ADDR
8820: LD_VAR 0 5
8824: PUSH
8825: FOR_TO
8826: IFFALSE 8860
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
8828: LD_ADDR_VAR 0 8
8832: PUSH
8833: LD_VAR 0 8
8837: PPUSH
8838: LD_VAR 0 5
8842: PUSH
8843: LD_VAR 0 6
8847: ARRAY
8848: PUSH
8849: LD_INT 1
8851: ARRAY
8852: PPUSH
8853: CALL 41065 0 2
8857: ST_TO_ADDR
8858: GO 8825
8860: POP
8861: POP
// result := tmp ;
8862: LD_ADDR_VAR 0 5
8866: PUSH
8867: LD_VAR 0 8
8871: ST_TO_ADDR
// end ; end ;
8872: LD_VAR 0 5
8876: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
8877: LD_INT 0
8879: PPUSH
8880: PPUSH
8881: PPUSH
8882: PPUSH
// if not list then
8883: LD_VAR 0 3
8887: NOT
8888: IFFALSE 8892
// exit ;
8890: GO 9282
// result := [ ] ;
8892: LD_ADDR_VAR 0 6
8896: PUSH
8897: EMPTY
8898: ST_TO_ADDR
// for i in list do
8899: LD_ADDR_VAR 0 7
8903: PUSH
8904: LD_VAR 0 3
8908: PUSH
8909: FOR_IN
8910: IFFALSE 9112
// begin tmp := GetDistUnitXY ( i , x , y ) ;
8912: LD_ADDR_VAR 0 9
8916: PUSH
8917: LD_VAR 0 7
8921: PPUSH
8922: LD_VAR 0 1
8926: PPUSH
8927: LD_VAR 0 2
8931: PPUSH
8932: CALL_OW 297
8936: ST_TO_ADDR
// if not result then
8937: LD_VAR 0 6
8941: NOT
8942: IFFALSE 8968
// result := [ [ i , tmp ] ] else
8944: LD_ADDR_VAR 0 6
8948: PUSH
8949: LD_VAR 0 7
8953: PUSH
8954: LD_VAR 0 9
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: ST_TO_ADDR
8966: GO 9110
// begin if result [ result ] [ 2 ] <= tmp then
8968: LD_VAR 0 6
8972: PUSH
8973: LD_VAR 0 6
8977: ARRAY
8978: PUSH
8979: LD_INT 2
8981: ARRAY
8982: PUSH
8983: LD_VAR 0 9
8987: LESSEQUAL
8988: IFFALSE 9030
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
8990: LD_ADDR_VAR 0 6
8994: PUSH
8995: LD_VAR 0 6
8999: PPUSH
9000: LD_VAR 0 6
9004: PUSH
9005: LD_INT 1
9007: PLUS
9008: PPUSH
9009: LD_VAR 0 7
9013: PUSH
9014: LD_VAR 0 9
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PPUSH
9023: CALL_OW 2
9027: ST_TO_ADDR
9028: GO 9110
// for j := 1 to result do
9030: LD_ADDR_VAR 0 8
9034: PUSH
9035: DOUBLE
9036: LD_INT 1
9038: DEC
9039: ST_TO_ADDR
9040: LD_VAR 0 6
9044: PUSH
9045: FOR_TO
9046: IFFALSE 9108
// begin if tmp < result [ j ] [ 2 ] then
9048: LD_VAR 0 9
9052: PUSH
9053: LD_VAR 0 6
9057: PUSH
9058: LD_VAR 0 8
9062: ARRAY
9063: PUSH
9064: LD_INT 2
9066: ARRAY
9067: LESS
9068: IFFALSE 9106
// begin result := Insert ( result , j , [ i , tmp ] ) ;
9070: LD_ADDR_VAR 0 6
9074: PUSH
9075: LD_VAR 0 6
9079: PPUSH
9080: LD_VAR 0 8
9084: PPUSH
9085: LD_VAR 0 7
9089: PUSH
9090: LD_VAR 0 9
9094: PUSH
9095: EMPTY
9096: LIST
9097: LIST
9098: PPUSH
9099: CALL_OW 2
9103: ST_TO_ADDR
// break ;
9104: GO 9108
// end ; end ;
9106: GO 9045
9108: POP
9109: POP
// end ; end ;
9110: GO 8909
9112: POP
9113: POP
// if result and not asc then
9114: LD_VAR 0 6
9118: IFFALSE 9127
9120: PUSH
9121: LD_VAR 0 4
9125: NOT
9126: AND
9127: IFFALSE 9202
// begin tmp := result ;
9129: LD_ADDR_VAR 0 9
9133: PUSH
9134: LD_VAR 0 6
9138: ST_TO_ADDR
// for i = tmp downto 1 do
9139: LD_ADDR_VAR 0 7
9143: PUSH
9144: DOUBLE
9145: LD_VAR 0 9
9149: INC
9150: ST_TO_ADDR
9151: LD_INT 1
9153: PUSH
9154: FOR_DOWNTO
9155: IFFALSE 9200
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
9157: LD_ADDR_VAR 0 6
9161: PUSH
9162: LD_VAR 0 6
9166: PPUSH
9167: LD_VAR 0 9
9171: PUSH
9172: LD_VAR 0 7
9176: MINUS
9177: PUSH
9178: LD_INT 1
9180: PLUS
9181: PPUSH
9182: LD_VAR 0 9
9186: PUSH
9187: LD_VAR 0 7
9191: ARRAY
9192: PPUSH
9193: CALL_OW 1
9197: ST_TO_ADDR
9198: GO 9154
9200: POP
9201: POP
// end ; tmp := [ ] ;
9202: LD_ADDR_VAR 0 9
9206: PUSH
9207: EMPTY
9208: ST_TO_ADDR
// if mode then
9209: LD_VAR 0 5
9213: IFFALSE 9282
// begin for i = 1 to result do
9215: LD_ADDR_VAR 0 7
9219: PUSH
9220: DOUBLE
9221: LD_INT 1
9223: DEC
9224: ST_TO_ADDR
9225: LD_VAR 0 6
9229: PUSH
9230: FOR_TO
9231: IFFALSE 9270
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
9233: LD_ADDR_VAR 0 9
9237: PUSH
9238: LD_VAR 0 9
9242: PPUSH
9243: LD_VAR 0 7
9247: PPUSH
9248: LD_VAR 0 6
9252: PUSH
9253: LD_VAR 0 7
9257: ARRAY
9258: PUSH
9259: LD_INT 1
9261: ARRAY
9262: PPUSH
9263: CALL_OW 1
9267: ST_TO_ADDR
9268: GO 9230
9270: POP
9271: POP
// result := tmp ;
9272: LD_ADDR_VAR 0 6
9276: PUSH
9277: LD_VAR 0 9
9281: ST_TO_ADDR
// end ; end ;
9282: LD_VAR 0 6
9286: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
9287: LD_INT 0
9289: PPUSH
9290: PPUSH
9291: PPUSH
9292: PPUSH
9293: PPUSH
9294: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
9295: LD_ADDR_VAR 0 5
9299: PUSH
9300: LD_INT 0
9302: PUSH
9303: LD_INT 0
9305: PUSH
9306: LD_INT 0
9308: PUSH
9309: EMPTY
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: ST_TO_ADDR
// if not x or not y then
9317: LD_VAR 0 2
9321: NOT
9322: IFTRUE 9331
9324: PUSH
9325: LD_VAR 0 3
9329: NOT
9330: OR
9331: IFFALSE 9335
// exit ;
9333: GO 10991
// if not range then
9335: LD_VAR 0 4
9339: NOT
9340: IFFALSE 9350
// range := 10 ;
9342: LD_ADDR_VAR 0 4
9346: PUSH
9347: LD_INT 10
9349: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9350: LD_ADDR_VAR 0 8
9354: PUSH
9355: LD_INT 81
9357: PUSH
9358: LD_VAR 0 1
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 92
9369: PUSH
9370: LD_VAR 0 2
9374: PUSH
9375: LD_VAR 0 3
9379: PUSH
9380: LD_VAR 0 4
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 3
9393: PUSH
9394: LD_INT 21
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: PPUSH
9413: CALL_OW 69
9417: ST_TO_ADDR
// if not tmp then
9418: LD_VAR 0 8
9422: NOT
9423: IFFALSE 9427
// exit ;
9425: GO 10991
// for i in tmp do
9427: LD_ADDR_VAR 0 6
9431: PUSH
9432: LD_VAR 0 8
9436: PUSH
9437: FOR_IN
9438: IFFALSE 10966
// begin points := [ 0 , 0 , 0 ] ;
9440: LD_ADDR_VAR 0 9
9444: PUSH
9445: LD_INT 0
9447: PUSH
9448: LD_INT 0
9450: PUSH
9451: LD_INT 0
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: LIST
9458: ST_TO_ADDR
// bpoints := 1 ;
9459: LD_ADDR_VAR 0 10
9463: PUSH
9464: LD_INT 1
9466: ST_TO_ADDR
// case GetType ( i ) of unit_human :
9467: LD_VAR 0 6
9471: PPUSH
9472: CALL_OW 247
9476: PUSH
9477: LD_INT 1
9479: DOUBLE
9480: EQUAL
9481: IFTRUE 9485
9483: GO 10067
9485: POP
// begin if GetClass ( i ) = 1 then
9486: LD_VAR 0 6
9490: PPUSH
9491: CALL_OW 257
9495: PUSH
9496: LD_INT 1
9498: EQUAL
9499: IFFALSE 9520
// points := [ 10 , 5 , 3 ] ;
9501: LD_ADDR_VAR 0 9
9505: PUSH
9506: LD_INT 10
9508: PUSH
9509: LD_INT 5
9511: PUSH
9512: LD_INT 3
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
9520: LD_VAR 0 6
9524: PPUSH
9525: CALL_OW 257
9529: PUSH
9530: LD_INT 2
9532: PUSH
9533: LD_INT 3
9535: PUSH
9536: LD_INT 4
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: LIST
9543: IN
9544: IFFALSE 9565
// points := [ 3 , 2 , 1 ] ;
9546: LD_ADDR_VAR 0 9
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: LD_INT 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: ST_TO_ADDR
// if GetClass ( i ) = 5 then
9565: LD_VAR 0 6
9569: PPUSH
9570: CALL_OW 257
9574: PUSH
9575: LD_INT 5
9577: EQUAL
9578: IFFALSE 9599
// points := [ 130 , 5 , 2 ] ;
9580: LD_ADDR_VAR 0 9
9584: PUSH
9585: LD_INT 130
9587: PUSH
9588: LD_INT 5
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: ST_TO_ADDR
// if GetClass ( i ) = 8 then
9599: LD_VAR 0 6
9603: PPUSH
9604: CALL_OW 257
9608: PUSH
9609: LD_INT 8
9611: EQUAL
9612: IFFALSE 9633
// points := [ 35 , 35 , 30 ] ;
9614: LD_ADDR_VAR 0 9
9618: PUSH
9619: LD_INT 35
9621: PUSH
9622: LD_INT 35
9624: PUSH
9625: LD_INT 30
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: ST_TO_ADDR
// if GetClass ( i ) = 9 then
9633: LD_VAR 0 6
9637: PPUSH
9638: CALL_OW 257
9642: PUSH
9643: LD_INT 9
9645: EQUAL
9646: IFFALSE 9667
// points := [ 20 , 55 , 40 ] ;
9648: LD_ADDR_VAR 0 9
9652: PUSH
9653: LD_INT 20
9655: PUSH
9656: LD_INT 55
9658: PUSH
9659: LD_INT 40
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
9667: LD_VAR 0 6
9671: PPUSH
9672: CALL_OW 257
9676: PUSH
9677: LD_INT 12
9679: PUSH
9680: LD_INT 16
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: IN
9687: IFFALSE 9708
// points := [ 5 , 3 , 2 ] ;
9689: LD_ADDR_VAR 0 9
9693: PUSH
9694: LD_INT 5
9696: PUSH
9697: LD_INT 3
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: ST_TO_ADDR
// if GetClass ( i ) = 17 then
9708: LD_VAR 0 6
9712: PPUSH
9713: CALL_OW 257
9717: PUSH
9718: LD_INT 17
9720: EQUAL
9721: IFFALSE 9742
// points := [ 100 , 50 , 75 ] ;
9723: LD_ADDR_VAR 0 9
9727: PUSH
9728: LD_INT 100
9730: PUSH
9731: LD_INT 50
9733: PUSH
9734: LD_INT 75
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: LIST
9741: ST_TO_ADDR
// if GetClass ( i ) = 15 then
9742: LD_VAR 0 6
9746: PPUSH
9747: CALL_OW 257
9751: PUSH
9752: LD_INT 15
9754: EQUAL
9755: IFFALSE 9776
// points := [ 10 , 5 , 3 ] ;
9757: LD_ADDR_VAR 0 9
9761: PUSH
9762: LD_INT 10
9764: PUSH
9765: LD_INT 5
9767: PUSH
9768: LD_INT 3
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: LIST
9775: ST_TO_ADDR
// if GetClass ( i ) = 14 then
9776: LD_VAR 0 6
9780: PPUSH
9781: CALL_OW 257
9785: PUSH
9786: LD_INT 14
9788: EQUAL
9789: IFFALSE 9810
// points := [ 10 , 0 , 0 ] ;
9791: LD_ADDR_VAR 0 9
9795: PUSH
9796: LD_INT 10
9798: PUSH
9799: LD_INT 0
9801: PUSH
9802: LD_INT 0
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: LIST
9809: ST_TO_ADDR
// if GetClass ( i ) = 11 then
9810: LD_VAR 0 6
9814: PPUSH
9815: CALL_OW 257
9819: PUSH
9820: LD_INT 11
9822: EQUAL
9823: IFFALSE 9844
// points := [ 30 , 10 , 5 ] ;
9825: LD_ADDR_VAR 0 9
9829: PUSH
9830: LD_INT 30
9832: PUSH
9833: LD_INT 10
9835: PUSH
9836: LD_INT 5
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
9844: LD_VAR 0 1
9848: PPUSH
9849: LD_INT 5
9851: PPUSH
9852: CALL_OW 321
9856: PUSH
9857: LD_INT 2
9859: EQUAL
9860: IFFALSE 9877
// bpoints := bpoints * 1.8 ;
9862: LD_ADDR_VAR 0 10
9866: PUSH
9867: LD_VAR 0 10
9871: PUSH
9872: LD_REAL  1.80000000000000E+0000
9875: MUL
9876: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
9877: LD_VAR 0 6
9881: PPUSH
9882: CALL_OW 257
9886: PUSH
9887: LD_INT 1
9889: PUSH
9890: LD_INT 2
9892: PUSH
9893: LD_INT 3
9895: PUSH
9896: LD_INT 4
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: IN
9905: IFFALSE 9925
9907: PUSH
9908: LD_VAR 0 1
9912: PPUSH
9913: LD_INT 51
9915: PPUSH
9916: CALL_OW 321
9920: PUSH
9921: LD_INT 2
9923: EQUAL
9924: AND
9925: IFFALSE 9942
// bpoints := bpoints * 1.2 ;
9927: LD_ADDR_VAR 0 10
9931: PUSH
9932: LD_VAR 0 10
9936: PUSH
9937: LD_REAL  1.20000000000000E+0000
9940: MUL
9941: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
9942: LD_VAR 0 6
9946: PPUSH
9947: CALL_OW 257
9951: PUSH
9952: LD_INT 5
9954: PUSH
9955: LD_INT 7
9957: PUSH
9958: LD_INT 9
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: IN
9966: IFFALSE 9986
9968: PUSH
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_INT 52
9976: PPUSH
9977: CALL_OW 321
9981: PUSH
9982: LD_INT 2
9984: EQUAL
9985: AND
9986: IFFALSE 10003
// bpoints := bpoints * 1.5 ;
9988: LD_ADDR_VAR 0 10
9992: PUSH
9993: LD_VAR 0 10
9997: PUSH
9998: LD_REAL  1.50000000000000E+0000
10001: MUL
10002: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
10003: LD_VAR 0 1
10007: PPUSH
10008: LD_INT 66
10010: PPUSH
10011: CALL_OW 321
10015: PUSH
10016: LD_INT 2
10018: EQUAL
10019: IFFALSE 10036
// bpoints := bpoints * 1.1 ;
10021: LD_ADDR_VAR 0 10
10025: PUSH
10026: LD_VAR 0 10
10030: PUSH
10031: LD_REAL  1.10000000000000E+0000
10034: MUL
10035: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
10036: LD_ADDR_VAR 0 10
10040: PUSH
10041: LD_VAR 0 10
10045: PUSH
10046: LD_VAR 0 6
10050: PPUSH
10051: LD_INT 1
10053: PPUSH
10054: CALL_OW 259
10058: PUSH
10059: LD_REAL  1.15000000000000E+0000
10062: MUL
10063: MUL
10064: ST_TO_ADDR
// end ; unit_vehicle :
10065: GO 10895
10067: LD_INT 2
10069: DOUBLE
10070: EQUAL
10071: IFTRUE 10075
10073: GO 10883
10075: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
10076: LD_VAR 0 6
10080: PPUSH
10081: CALL_OW 264
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 42
10091: PUSH
10092: LD_INT 24
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: IN
10100: IFFALSE 10121
// points := [ 25 , 5 , 3 ] ;
10102: LD_ADDR_VAR 0 9
10106: PUSH
10107: LD_INT 25
10109: PUSH
10110: LD_INT 5
10112: PUSH
10113: LD_INT 3
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
10121: LD_VAR 0 6
10125: PPUSH
10126: CALL_OW 264
10130: PUSH
10131: LD_INT 4
10133: PUSH
10134: LD_INT 43
10136: PUSH
10137: LD_INT 25
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: LIST
10144: IN
10145: IFFALSE 10166
// points := [ 40 , 15 , 5 ] ;
10147: LD_ADDR_VAR 0 9
10151: PUSH
10152: LD_INT 40
10154: PUSH
10155: LD_INT 15
10157: PUSH
10158: LD_INT 5
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: LIST
10165: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
10166: LD_VAR 0 6
10170: PPUSH
10171: CALL_OW 264
10175: PUSH
10176: LD_INT 3
10178: PUSH
10179: LD_INT 23
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: IN
10186: IFFALSE 10207
// points := [ 7 , 25 , 8 ] ;
10188: LD_ADDR_VAR 0 9
10192: PUSH
10193: LD_INT 7
10195: PUSH
10196: LD_INT 25
10198: PUSH
10199: LD_INT 8
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
10207: LD_VAR 0 6
10211: PPUSH
10212: CALL_OW 264
10216: PUSH
10217: LD_INT 5
10219: PUSH
10220: LD_INT 27
10222: PUSH
10223: LD_INT 44
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: IN
10231: IFFALSE 10252
// points := [ 14 , 50 , 16 ] ;
10233: LD_ADDR_VAR 0 9
10237: PUSH
10238: LD_INT 14
10240: PUSH
10241: LD_INT 50
10243: PUSH
10244: LD_INT 16
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
10252: LD_VAR 0 6
10256: PPUSH
10257: CALL_OW 264
10261: PUSH
10262: LD_INT 6
10264: PUSH
10265: LD_INT 46
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: IN
10272: IFFALSE 10293
// points := [ 32 , 120 , 70 ] ;
10274: LD_ADDR_VAR 0 9
10278: PUSH
10279: LD_INT 32
10281: PUSH
10282: LD_INT 120
10284: PUSH
10285: LD_INT 70
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
10293: LD_VAR 0 6
10297: PPUSH
10298: CALL_OW 264
10302: PUSH
10303: LD_INT 7
10305: PUSH
10306: LD_INT 28
10308: PUSH
10309: LD_INT 45
10311: PUSH
10312: LD_INT 92
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: IN
10321: IFFALSE 10342
// points := [ 35 , 20 , 45 ] ;
10323: LD_ADDR_VAR 0 9
10327: PUSH
10328: LD_INT 35
10330: PUSH
10331: LD_INT 20
10333: PUSH
10334: LD_INT 45
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
10342: LD_VAR 0 6
10346: PPUSH
10347: CALL_OW 264
10351: PUSH
10352: LD_INT 47
10354: PUSH
10355: EMPTY
10356: LIST
10357: IN
10358: IFFALSE 10379
// points := [ 67 , 45 , 75 ] ;
10360: LD_ADDR_VAR 0 9
10364: PUSH
10365: LD_INT 67
10367: PUSH
10368: LD_INT 45
10370: PUSH
10371: LD_INT 75
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: LIST
10378: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
10379: LD_VAR 0 6
10383: PPUSH
10384: CALL_OW 264
10388: PUSH
10389: LD_INT 26
10391: PUSH
10392: EMPTY
10393: LIST
10394: IN
10395: IFFALSE 10416
// points := [ 120 , 30 , 80 ] ;
10397: LD_ADDR_VAR 0 9
10401: PUSH
10402: LD_INT 120
10404: PUSH
10405: LD_INT 30
10407: PUSH
10408: LD_INT 80
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
10416: LD_VAR 0 6
10420: PPUSH
10421: CALL_OW 264
10425: PUSH
10426: LD_INT 22
10428: PUSH
10429: EMPTY
10430: LIST
10431: IN
10432: IFFALSE 10453
// points := [ 40 , 1 , 1 ] ;
10434: LD_ADDR_VAR 0 9
10438: PUSH
10439: LD_INT 40
10441: PUSH
10442: LD_INT 1
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
10453: LD_VAR 0 6
10457: PPUSH
10458: CALL_OW 264
10462: PUSH
10463: LD_INT 29
10465: PUSH
10466: EMPTY
10467: LIST
10468: IN
10469: IFFALSE 10490
// points := [ 70 , 200 , 400 ] ;
10471: LD_ADDR_VAR 0 9
10475: PUSH
10476: LD_INT 70
10478: PUSH
10479: LD_INT 200
10481: PUSH
10482: LD_INT 400
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
10490: LD_VAR 0 6
10494: PPUSH
10495: CALL_OW 264
10499: PUSH
10500: LD_INT 14
10502: PUSH
10503: LD_INT 53
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: IN
10510: IFFALSE 10531
// points := [ 40 , 10 , 20 ] ;
10512: LD_ADDR_VAR 0 9
10516: PUSH
10517: LD_INT 40
10519: PUSH
10520: LD_INT 10
10522: PUSH
10523: LD_INT 20
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
10531: LD_VAR 0 6
10535: PPUSH
10536: CALL_OW 264
10540: PUSH
10541: LD_INT 9
10543: PUSH
10544: EMPTY
10545: LIST
10546: IN
10547: IFFALSE 10568
// points := [ 5 , 70 , 20 ] ;
10549: LD_ADDR_VAR 0 9
10553: PUSH
10554: LD_INT 5
10556: PUSH
10557: LD_INT 70
10559: PUSH
10560: LD_INT 20
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
10568: LD_VAR 0 6
10572: PPUSH
10573: CALL_OW 264
10577: PUSH
10578: LD_INT 10
10580: PUSH
10581: EMPTY
10582: LIST
10583: IN
10584: IFFALSE 10605
// points := [ 35 , 110 , 70 ] ;
10586: LD_ADDR_VAR 0 9
10590: PUSH
10591: LD_INT 35
10593: PUSH
10594: LD_INT 110
10596: PUSH
10597: LD_INT 70
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
10605: LD_VAR 0 6
10609: PPUSH
10610: CALL_OW 265
10614: PUSH
10615: LD_INT 25
10617: EQUAL
10618: IFFALSE 10639
// points := [ 80 , 65 , 100 ] ;
10620: LD_ADDR_VAR 0 9
10624: PUSH
10625: LD_INT 80
10627: PUSH
10628: LD_INT 65
10630: PUSH
10631: LD_INT 100
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
10639: LD_VAR 0 6
10643: PPUSH
10644: CALL_OW 263
10648: PUSH
10649: LD_INT 1
10651: EQUAL
10652: IFFALSE 10687
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
10654: LD_ADDR_VAR 0 10
10658: PUSH
10659: LD_VAR 0 10
10663: PUSH
10664: LD_VAR 0 6
10668: PPUSH
10669: CALL_OW 311
10673: PPUSH
10674: LD_INT 3
10676: PPUSH
10677: CALL_OW 259
10681: PUSH
10682: LD_INT 4
10684: MUL
10685: MUL
10686: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
10687: LD_VAR 0 6
10691: PPUSH
10692: CALL_OW 263
10696: PUSH
10697: LD_INT 2
10699: EQUAL
10700: IFFALSE 10751
// begin j := IsControledBy ( i ) ;
10702: LD_ADDR_VAR 0 7
10706: PUSH
10707: LD_VAR 0 6
10711: PPUSH
10712: CALL_OW 312
10716: ST_TO_ADDR
// if j then
10717: LD_VAR 0 7
10721: IFFALSE 10751
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
10723: LD_ADDR_VAR 0 10
10727: PUSH
10728: LD_VAR 0 10
10732: PUSH
10733: LD_VAR 0 7
10737: PPUSH
10738: LD_INT 3
10740: PPUSH
10741: CALL_OW 259
10745: PUSH
10746: LD_INT 3
10748: MUL
10749: MUL
10750: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
10751: LD_VAR 0 6
10755: PPUSH
10756: CALL_OW 264
10760: PUSH
10761: LD_INT 5
10763: PUSH
10764: LD_INT 6
10766: PUSH
10767: LD_INT 46
10769: PUSH
10770: LD_INT 44
10772: PUSH
10773: LD_INT 47
10775: PUSH
10776: LD_INT 45
10778: PUSH
10779: LD_INT 28
10781: PUSH
10782: LD_INT 7
10784: PUSH
10785: LD_INT 27
10787: PUSH
10788: LD_INT 29
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: IN
10803: IFFALSE 10823
10805: PUSH
10806: LD_VAR 0 1
10810: PPUSH
10811: LD_INT 52
10813: PPUSH
10814: CALL_OW 321
10818: PUSH
10819: LD_INT 2
10821: EQUAL
10822: AND
10823: IFFALSE 10840
// bpoints := bpoints * 1.2 ;
10825: LD_ADDR_VAR 0 10
10829: PUSH
10830: LD_VAR 0 10
10834: PUSH
10835: LD_REAL  1.20000000000000E+0000
10838: MUL
10839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
10840: LD_VAR 0 6
10844: PPUSH
10845: CALL_OW 264
10849: PUSH
10850: LD_INT 6
10852: PUSH
10853: LD_INT 46
10855: PUSH
10856: LD_INT 47
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: IN
10864: IFFALSE 10881
// bpoints := bpoints * 1.2 ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 10
10875: PUSH
10876: LD_REAL  1.20000000000000E+0000
10879: MUL
10880: ST_TO_ADDR
// end ; unit_building :
10881: GO 10895
10883: LD_INT 3
10885: DOUBLE
10886: EQUAL
10887: IFTRUE 10891
10889: GO 10894
10891: POP
// ; end ;
10892: GO 10895
10894: POP
// for j = 1 to 3 do
10895: LD_ADDR_VAR 0 7
10899: PUSH
10900: DOUBLE
10901: LD_INT 1
10903: DEC
10904: ST_TO_ADDR
10905: LD_INT 3
10907: PUSH
10908: FOR_TO
10909: IFFALSE 10962
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
10911: LD_ADDR_VAR 0 5
10915: PUSH
10916: LD_VAR 0 5
10920: PPUSH
10921: LD_VAR 0 7
10925: PPUSH
10926: LD_VAR 0 5
10930: PUSH
10931: LD_VAR 0 7
10935: ARRAY
10936: PUSH
10937: LD_VAR 0 9
10941: PUSH
10942: LD_VAR 0 7
10946: ARRAY
10947: PUSH
10948: LD_VAR 0 10
10952: MUL
10953: PLUS
10954: PPUSH
10955: CALL_OW 1
10959: ST_TO_ADDR
10960: GO 10908
10962: POP
10963: POP
// end ;
10964: GO 9437
10966: POP
10967: POP
// result := Replace ( result , 4 , tmp ) ;
10968: LD_ADDR_VAR 0 5
10972: PUSH
10973: LD_VAR 0 5
10977: PPUSH
10978: LD_INT 4
10980: PPUSH
10981: LD_VAR 0 8
10985: PPUSH
10986: CALL_OW 1
10990: ST_TO_ADDR
// end ;
10991: LD_VAR 0 5
10995: RET
// export function DangerAtRange ( unit , range ) ; begin
10996: LD_INT 0
10998: PPUSH
// if not unit then
10999: LD_VAR 0 1
11003: NOT
11004: IFFALSE 11008
// exit ;
11006: GO 11053
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
11008: LD_ADDR_VAR 0 3
11012: PUSH
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 255
11022: PPUSH
11023: LD_VAR 0 1
11027: PPUSH
11028: CALL_OW 250
11032: PPUSH
11033: LD_VAR 0 1
11037: PPUSH
11038: CALL_OW 251
11042: PPUSH
11043: LD_VAR 0 2
11047: PPUSH
11048: CALL 9287 0 4
11052: ST_TO_ADDR
// end ;
11053: LD_VAR 0 3
11057: RET
// export function DangerInArea ( side , area ) ; begin
11058: LD_INT 0
11060: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
11061: LD_ADDR_VAR 0 3
11065: PUSH
11066: LD_VAR 0 2
11070: PPUSH
11071: LD_INT 81
11073: PUSH
11074: LD_VAR 0 1
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PPUSH
11083: CALL_OW 70
11087: ST_TO_ADDR
// end ;
11088: LD_VAR 0 3
11092: RET
// export function IsExtension ( b ) ; begin
11093: LD_INT 0
11095: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
11096: LD_ADDR_VAR 0 2
11100: PUSH
11101: LD_VAR 0 1
11105: PUSH
11106: LD_INT 23
11108: PUSH
11109: LD_INT 20
11111: PUSH
11112: LD_INT 22
11114: PUSH
11115: LD_INT 17
11117: PUSH
11118: LD_INT 24
11120: PUSH
11121: LD_INT 21
11123: PUSH
11124: LD_INT 19
11126: PUSH
11127: LD_INT 16
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 18
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: IN
11148: ST_TO_ADDR
// end ;
11149: LD_VAR 0 2
11153: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
11154: LD_INT 0
11156: PPUSH
11157: PPUSH
11158: PPUSH
// result := [ ] ;
11159: LD_ADDR_VAR 0 4
11163: PUSH
11164: EMPTY
11165: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
11166: LD_ADDR_VAR 0 5
11170: PUSH
11171: LD_VAR 0 2
11175: PPUSH
11176: LD_INT 21
11178: PUSH
11179: LD_INT 3
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PPUSH
11186: CALL_OW 70
11190: ST_TO_ADDR
// if not tmp then
11191: LD_VAR 0 5
11195: NOT
11196: IFFALSE 11200
// exit ;
11198: GO 11264
// if checkLink then
11200: LD_VAR 0 3
11204: IFFALSE 11254
// begin for i in tmp do
11206: LD_ADDR_VAR 0 6
11210: PUSH
11211: LD_VAR 0 5
11215: PUSH
11216: FOR_IN
11217: IFFALSE 11252
// if GetBase ( i ) <> base then
11219: LD_VAR 0 6
11223: PPUSH
11224: CALL_OW 274
11228: PUSH
11229: LD_VAR 0 1
11233: NONEQUAL
11234: IFFALSE 11250
// ComLinkToBase ( base , i ) ;
11236: LD_VAR 0 1
11240: PPUSH
11241: LD_VAR 0 6
11245: PPUSH
11246: CALL_OW 169
11250: GO 11216
11252: POP
11253: POP
// end ; result := tmp ;
11254: LD_ADDR_VAR 0 4
11258: PUSH
11259: LD_VAR 0 5
11263: ST_TO_ADDR
// end ;
11264: LD_VAR 0 4
11268: RET
// export function ComComplete ( units , b ) ; var i ; begin
11269: LD_INT 0
11271: PPUSH
11272: PPUSH
// if not units then
11273: LD_VAR 0 1
11277: NOT
11278: IFFALSE 11282
// exit ;
11280: GO 11372
// for i in units do
11282: LD_ADDR_VAR 0 4
11286: PUSH
11287: LD_VAR 0 1
11291: PUSH
11292: FOR_IN
11293: IFFALSE 11370
// if BuildingStatus ( b ) = bs_build then
11295: LD_VAR 0 2
11299: PPUSH
11300: CALL_OW 461
11304: PUSH
11305: LD_INT 1
11307: EQUAL
11308: IFFALSE 11368
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
11310: LD_VAR 0 4
11314: PPUSH
11315: LD_STRING h
11317: PUSH
11318: LD_VAR 0 2
11322: PPUSH
11323: CALL_OW 250
11327: PUSH
11328: LD_VAR 0 2
11332: PPUSH
11333: CALL_OW 251
11337: PUSH
11338: LD_VAR 0 2
11342: PUSH
11343: LD_INT 0
11345: PUSH
11346: LD_INT 0
11348: PUSH
11349: LD_INT 0
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: PUSH
11361: EMPTY
11362: LIST
11363: PPUSH
11364: CALL_OW 446
11368: GO 11292
11370: POP
11371: POP
// end ;
11372: LD_VAR 0 3
11376: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
11377: LD_INT 0
11379: PPUSH
11380: PPUSH
11381: PPUSH
11382: PPUSH
11383: PPUSH
11384: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
11385: LD_VAR 0 1
11389: NOT
11390: IFTRUE 11407
11392: PUSH
11393: LD_VAR 0 1
11397: PPUSH
11398: CALL_OW 263
11402: PUSH
11403: LD_INT 2
11405: NONEQUAL
11406: OR
11407: IFFALSE 11411
// exit ;
11409: GO 11727
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
11411: LD_ADDR_VAR 0 6
11415: PUSH
11416: LD_INT 22
11418: PUSH
11419: LD_VAR 0 1
11423: PPUSH
11424: CALL_OW 255
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 2
11435: PUSH
11436: LD_INT 30
11438: PUSH
11439: LD_INT 36
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 34
11448: PUSH
11449: LD_INT 31
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: PPUSH
11465: CALL_OW 69
11469: ST_TO_ADDR
// if not tmp then
11470: LD_VAR 0 6
11474: NOT
11475: IFFALSE 11479
// exit ;
11477: GO 11727
// result := [ ] ;
11479: LD_ADDR_VAR 0 2
11483: PUSH
11484: EMPTY
11485: ST_TO_ADDR
// for i in tmp do
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: LD_VAR 0 6
11495: PUSH
11496: FOR_IN
11497: IFFALSE 11568
// begin t := UnitsInside ( i ) ;
11499: LD_ADDR_VAR 0 4
11503: PUSH
11504: LD_VAR 0 3
11508: PPUSH
11509: CALL_OW 313
11513: ST_TO_ADDR
// if t then
11514: LD_VAR 0 4
11518: IFFALSE 11566
// for j in t do
11520: LD_ADDR_VAR 0 7
11524: PUSH
11525: LD_VAR 0 4
11529: PUSH
11530: FOR_IN
11531: IFFALSE 11564
// result := Replace ( result , result + 1 , j ) ;
11533: LD_ADDR_VAR 0 2
11537: PUSH
11538: LD_VAR 0 2
11542: PPUSH
11543: LD_VAR 0 2
11547: PUSH
11548: LD_INT 1
11550: PLUS
11551: PPUSH
11552: LD_VAR 0 7
11556: PPUSH
11557: CALL_OW 1
11561: ST_TO_ADDR
11562: GO 11530
11564: POP
11565: POP
// end ;
11566: GO 11496
11568: POP
11569: POP
// if not result then
11570: LD_VAR 0 2
11574: NOT
11575: IFFALSE 11579
// exit ;
11577: GO 11727
// mech := result [ 1 ] ;
11579: LD_ADDR_VAR 0 5
11583: PUSH
11584: LD_VAR 0 2
11588: PUSH
11589: LD_INT 1
11591: ARRAY
11592: ST_TO_ADDR
// if result > 1 then
11593: LD_VAR 0 2
11597: PUSH
11598: LD_INT 1
11600: GREATER
11601: IFFALSE 11713
// begin for i = 2 to result do
11603: LD_ADDR_VAR 0 3
11607: PUSH
11608: DOUBLE
11609: LD_INT 2
11611: DEC
11612: ST_TO_ADDR
11613: LD_VAR 0 2
11617: PUSH
11618: FOR_TO
11619: IFFALSE 11711
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
11621: LD_ADDR_VAR 0 4
11625: PUSH
11626: LD_VAR 0 2
11630: PUSH
11631: LD_VAR 0 3
11635: ARRAY
11636: PPUSH
11637: LD_INT 3
11639: PPUSH
11640: CALL_OW 259
11644: PUSH
11645: LD_VAR 0 2
11649: PUSH
11650: LD_VAR 0 3
11654: ARRAY
11655: PPUSH
11656: CALL_OW 432
11660: MINUS
11661: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
11662: LD_VAR 0 4
11666: PUSH
11667: LD_VAR 0 5
11671: PPUSH
11672: LD_INT 3
11674: PPUSH
11675: CALL_OW 259
11679: PUSH
11680: LD_VAR 0 5
11684: PPUSH
11685: CALL_OW 432
11689: MINUS
11690: GREATEREQUAL
11691: IFFALSE 11709
// mech := result [ i ] ;
11693: LD_ADDR_VAR 0 5
11697: PUSH
11698: LD_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: ARRAY
11708: ST_TO_ADDR
// end ;
11709: GO 11618
11711: POP
11712: POP
// end ; ComLinkTo ( vehicle , mech ) ;
11713: LD_VAR 0 1
11717: PPUSH
11718: LD_VAR 0 5
11722: PPUSH
11723: CALL_OW 135
// end ;
11727: LD_VAR 0 2
11731: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
11732: LD_INT 0
11734: PPUSH
11735: PPUSH
11736: PPUSH
11737: PPUSH
11738: PPUSH
11739: PPUSH
11740: PPUSH
11741: PPUSH
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
// result := [ ] ;
11747: LD_ADDR_VAR 0 7
11751: PUSH
11752: EMPTY
11753: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
11754: LD_VAR 0 1
11758: PPUSH
11759: CALL_OW 266
11763: PUSH
11764: LD_INT 0
11766: PUSH
11767: LD_INT 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: IN
11774: NOT
11775: IFFALSE 11779
// exit ;
11777: GO 13419
// if name then
11779: LD_VAR 0 3
11783: IFFALSE 11799
// SetBName ( base_dep , name ) ;
11785: LD_VAR 0 1
11789: PPUSH
11790: LD_VAR 0 3
11794: PPUSH
11795: CALL_OW 500
// base := GetBase ( base_dep ) ;
11799: LD_ADDR_VAR 0 15
11803: PUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 274
11813: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
11814: LD_ADDR_VAR 0 16
11818: PUSH
11819: LD_VAR 0 1
11823: PPUSH
11824: CALL_OW 255
11828: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
11829: LD_ADDR_VAR 0 17
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 248
11843: ST_TO_ADDR
// if sources then
11844: LD_VAR 0 5
11848: IFFALSE 11895
// for i = 1 to 3 do
11850: LD_ADDR_VAR 0 8
11854: PUSH
11855: DOUBLE
11856: LD_INT 1
11858: DEC
11859: ST_TO_ADDR
11860: LD_INT 3
11862: PUSH
11863: FOR_TO
11864: IFFALSE 11893
// AddResourceType ( base , i , sources [ i ] ) ;
11866: LD_VAR 0 15
11870: PPUSH
11871: LD_VAR 0 8
11875: PPUSH
11876: LD_VAR 0 5
11880: PUSH
11881: LD_VAR 0 8
11885: ARRAY
11886: PPUSH
11887: CALL_OW 276
11891: GO 11863
11893: POP
11894: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
11895: LD_ADDR_VAR 0 18
11899: PUSH
11900: LD_VAR 0 15
11904: PPUSH
11905: LD_VAR 0 2
11909: PPUSH
11910: LD_INT 1
11912: PPUSH
11913: CALL 11154 0 3
11917: ST_TO_ADDR
// InitHc ;
11918: CALL_OW 19
// InitUc ;
11922: CALL_OW 18
// uc_side := side ;
11926: LD_ADDR_OWVAR 20
11930: PUSH
11931: LD_VAR 0 16
11935: ST_TO_ADDR
// uc_nation := nation ;
11936: LD_ADDR_OWVAR 21
11940: PUSH
11941: LD_VAR 0 17
11945: ST_TO_ADDR
// if buildings then
11946: LD_VAR 0 18
11950: IFFALSE 13278
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
11952: LD_ADDR_VAR 0 19
11956: PUSH
11957: LD_VAR 0 18
11961: PPUSH
11962: LD_INT 2
11964: PUSH
11965: LD_INT 30
11967: PUSH
11968: LD_INT 29
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 30
11977: PUSH
11978: LD_INT 30
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: ST_TO_ADDR
// if tmp then
11995: LD_VAR 0 19
11999: IFFALSE 12047
// for i in tmp do
12001: LD_ADDR_VAR 0 8
12005: PUSH
12006: LD_VAR 0 19
12010: PUSH
12011: FOR_IN
12012: IFFALSE 12045
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
12014: LD_VAR 0 8
12018: PPUSH
12019: CALL_OW 250
12023: PPUSH
12024: LD_VAR 0 8
12028: PPUSH
12029: CALL_OW 251
12033: PPUSH
12034: LD_VAR 0 16
12038: PPUSH
12039: CALL_OW 441
12043: GO 12011
12045: POP
12046: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
12047: LD_VAR 0 18
12051: PPUSH
12052: LD_INT 2
12054: PUSH
12055: LD_INT 30
12057: PUSH
12058: LD_INT 32
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 30
12067: PUSH
12068: LD_INT 33
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 72
12084: IFFALSE 12172
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
12086: LD_ADDR_VAR 0 8
12090: PUSH
12091: LD_VAR 0 18
12095: PPUSH
12096: LD_INT 2
12098: PUSH
12099: LD_INT 30
12101: PUSH
12102: LD_INT 32
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 33
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 72
12128: PUSH
12129: FOR_IN
12130: IFFALSE 12170
// begin if not GetBWeapon ( i ) then
12132: LD_VAR 0 8
12136: PPUSH
12137: CALL_OW 269
12141: NOT
12142: IFFALSE 12168
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
12144: LD_VAR 0 8
12148: PPUSH
12149: LD_VAR 0 8
12153: PPUSH
12154: LD_VAR 0 2
12158: PPUSH
12159: CALL 13424 0 2
12163: PPUSH
12164: CALL_OW 431
// end ;
12168: GO 12129
12170: POP
12171: POP
// end ; for i = 1 to personel do
12172: LD_ADDR_VAR 0 8
12176: PUSH
12177: DOUBLE
12178: LD_INT 1
12180: DEC
12181: ST_TO_ADDR
12182: LD_VAR 0 6
12186: PUSH
12187: FOR_TO
12188: IFFALSE 13258
// begin if i > 4 then
12190: LD_VAR 0 8
12194: PUSH
12195: LD_INT 4
12197: GREATER
12198: IFFALSE 12202
// break ;
12200: GO 13258
// case i of 1 :
12202: LD_VAR 0 8
12206: PUSH
12207: LD_INT 1
12209: DOUBLE
12210: EQUAL
12211: IFTRUE 12215
12213: GO 12295
12215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
12216: LD_ADDR_VAR 0 12
12220: PUSH
12221: LD_VAR 0 18
12225: PPUSH
12226: LD_INT 22
12228: PUSH
12229: LD_VAR 0 16
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 58
12240: PUSH
12241: EMPTY
12242: LIST
12243: PUSH
12244: LD_INT 2
12246: PUSH
12247: LD_INT 30
12249: PUSH
12250: LD_INT 32
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: LD_INT 4
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 30
12269: PUSH
12270: LD_INT 5
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: LIST
12287: PPUSH
12288: CALL_OW 72
12292: ST_TO_ADDR
12293: GO 12517
12295: LD_INT 2
12297: DOUBLE
12298: EQUAL
12299: IFTRUE 12303
12301: GO 12365
12303: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
12304: LD_ADDR_VAR 0 12
12308: PUSH
12309: LD_VAR 0 18
12313: PPUSH
12314: LD_INT 22
12316: PUSH
12317: LD_VAR 0 16
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: LD_INT 2
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: LD_INT 0
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 30
12341: PUSH
12342: LD_INT 1
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 72
12362: ST_TO_ADDR
12363: GO 12517
12365: LD_INT 3
12367: DOUBLE
12368: EQUAL
12369: IFTRUE 12373
12371: GO 12435
12373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
12374: LD_ADDR_VAR 0 12
12378: PUSH
12379: LD_VAR 0 18
12383: PPUSH
12384: LD_INT 22
12386: PUSH
12387: LD_VAR 0 16
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 2
12398: PUSH
12399: LD_INT 30
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 30
12411: PUSH
12412: LD_INT 3
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: PPUSH
12428: CALL_OW 72
12432: ST_TO_ADDR
12433: GO 12517
12435: LD_INT 4
12437: DOUBLE
12438: EQUAL
12439: IFTRUE 12443
12441: GO 12516
12443: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
12444: LD_ADDR_VAR 0 12
12448: PUSH
12449: LD_VAR 0 18
12453: PPUSH
12454: LD_INT 22
12456: PUSH
12457: LD_VAR 0 16
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 2
12468: PUSH
12469: LD_INT 30
12471: PUSH
12472: LD_INT 6
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: PUSH
12479: LD_INT 30
12481: PUSH
12482: LD_INT 7
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 30
12491: PUSH
12492: LD_INT 8
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 72
12513: ST_TO_ADDR
12514: GO 12517
12516: POP
// if i = 1 then
12517: LD_VAR 0 8
12521: PUSH
12522: LD_INT 1
12524: EQUAL
12525: IFFALSE 12636
// begin tmp := [ ] ;
12527: LD_ADDR_VAR 0 19
12531: PUSH
12532: EMPTY
12533: ST_TO_ADDR
// for j in f do
12534: LD_ADDR_VAR 0 9
12538: PUSH
12539: LD_VAR 0 12
12543: PUSH
12544: FOR_IN
12545: IFFALSE 12618
// if GetBType ( j ) = b_bunker then
12547: LD_VAR 0 9
12551: PPUSH
12552: CALL_OW 266
12556: PUSH
12557: LD_INT 32
12559: EQUAL
12560: IFFALSE 12587
// tmp := Insert ( tmp , 1 , j ) else
12562: LD_ADDR_VAR 0 19
12566: PUSH
12567: LD_VAR 0 19
12571: PPUSH
12572: LD_INT 1
12574: PPUSH
12575: LD_VAR 0 9
12579: PPUSH
12580: CALL_OW 2
12584: ST_TO_ADDR
12585: GO 12616
// tmp := Insert ( tmp , tmp + 1 , j ) ;
12587: LD_ADDR_VAR 0 19
12591: PUSH
12592: LD_VAR 0 19
12596: PPUSH
12597: LD_VAR 0 19
12601: PUSH
12602: LD_INT 1
12604: PLUS
12605: PPUSH
12606: LD_VAR 0 9
12610: PPUSH
12611: CALL_OW 2
12615: ST_TO_ADDR
12616: GO 12544
12618: POP
12619: POP
// if tmp then
12620: LD_VAR 0 19
12624: IFFALSE 12636
// f := tmp ;
12626: LD_ADDR_VAR 0 12
12630: PUSH
12631: LD_VAR 0 19
12635: ST_TO_ADDR
// end ; x := personel [ i ] ;
12636: LD_ADDR_VAR 0 13
12640: PUSH
12641: LD_VAR 0 6
12645: PUSH
12646: LD_VAR 0 8
12650: ARRAY
12651: ST_TO_ADDR
// if x = - 1 then
12652: LD_VAR 0 13
12656: PUSH
12657: LD_INT 1
12659: NEG
12660: EQUAL
12661: IFFALSE 12872
// begin for j in f do
12663: LD_ADDR_VAR 0 9
12667: PUSH
12668: LD_VAR 0 12
12672: PUSH
12673: FOR_IN
12674: IFFALSE 12868
// repeat InitHc ;
12676: CALL_OW 19
// if GetBType ( j ) = b_barracks then
12680: LD_VAR 0 9
12684: PPUSH
12685: CALL_OW 266
12689: PUSH
12690: LD_INT 5
12692: EQUAL
12693: IFFALSE 12763
// begin if UnitsInside ( j ) < 3 then
12695: LD_VAR 0 9
12699: PPUSH
12700: CALL_OW 313
12704: PUSH
12705: LD_INT 3
12707: LESS
12708: IFFALSE 12744
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
12710: LD_INT 0
12712: PPUSH
12713: LD_INT 5
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: PUSH
12727: LD_VAR 0 17
12731: ARRAY
12732: PPUSH
12733: LD_VAR 0 4
12737: PPUSH
12738: CALL_OW 380
12742: GO 12761
// PrepareHuman ( false , i , skill ) ;
12744: LD_INT 0
12746: PPUSH
12747: LD_VAR 0 8
12751: PPUSH
12752: LD_VAR 0 4
12756: PPUSH
12757: CALL_OW 380
// end else
12761: GO 12780
// PrepareHuman ( false , i , skill ) ;
12763: LD_INT 0
12765: PPUSH
12766: LD_VAR 0 8
12770: PPUSH
12771: LD_VAR 0 4
12775: PPUSH
12776: CALL_OW 380
// un := CreateHuman ;
12780: LD_ADDR_VAR 0 14
12784: PUSH
12785: CALL_OW 44
12789: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12790: LD_ADDR_VAR 0 7
12794: PUSH
12795: LD_VAR 0 7
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: LD_VAR 0 14
12807: PPUSH
12808: CALL_OW 2
12812: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
12813: LD_VAR 0 14
12817: PPUSH
12818: LD_VAR 0 9
12822: PPUSH
12823: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
12827: LD_VAR 0 9
12831: PPUSH
12832: CALL_OW 313
12836: PUSH
12837: LD_INT 6
12839: EQUAL
12840: IFTRUE 12864
12842: PUSH
12843: LD_VAR 0 9
12847: PPUSH
12848: CALL_OW 266
12852: PUSH
12853: LD_INT 32
12855: PUSH
12856: LD_INT 31
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: IN
12863: OR
12864: IFFALSE 12676
12866: GO 12673
12868: POP
12869: POP
// end else
12870: GO 13256
// for j = 1 to x do
12872: LD_ADDR_VAR 0 9
12876: PUSH
12877: DOUBLE
12878: LD_INT 1
12880: DEC
12881: ST_TO_ADDR
12882: LD_VAR 0 13
12886: PUSH
12887: FOR_TO
12888: IFFALSE 13254
// begin InitHc ;
12890: CALL_OW 19
// if not f then
12894: LD_VAR 0 12
12898: NOT
12899: IFFALSE 12988
// begin PrepareHuman ( false , i , skill ) ;
12901: LD_INT 0
12903: PPUSH
12904: LD_VAR 0 8
12908: PPUSH
12909: LD_VAR 0 4
12913: PPUSH
12914: CALL_OW 380
// un := CreateHuman ;
12918: LD_ADDR_VAR 0 14
12922: PUSH
12923: CALL_OW 44
12927: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
12928: LD_ADDR_VAR 0 7
12932: PUSH
12933: LD_VAR 0 7
12937: PPUSH
12938: LD_INT 1
12940: PPUSH
12941: LD_VAR 0 14
12945: PPUSH
12946: CALL_OW 2
12950: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
12951: LD_VAR 0 14
12955: PPUSH
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 250
12965: PPUSH
12966: LD_VAR 0 1
12970: PPUSH
12971: CALL_OW 251
12975: PPUSH
12976: LD_INT 10
12978: PPUSH
12979: LD_INT 0
12981: PPUSH
12982: CALL_OW 50
// continue ;
12986: GO 12887
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
12988: LD_VAR 0 12
12992: PUSH
12993: LD_INT 1
12995: ARRAY
12996: PPUSH
12997: CALL_OW 313
13001: IFFALSE 13029
13003: PUSH
13004: LD_VAR 0 12
13008: PUSH
13009: LD_INT 1
13011: ARRAY
13012: PPUSH
13013: CALL_OW 266
13017: PUSH
13018: LD_INT 32
13020: PUSH
13021: LD_INT 31
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: IN
13028: AND
13029: IFTRUE 13050
13031: PUSH
13032: LD_VAR 0 12
13036: PUSH
13037: LD_INT 1
13039: ARRAY
13040: PPUSH
13041: CALL_OW 313
13045: PUSH
13046: LD_INT 6
13048: EQUAL
13049: OR
13050: IFFALSE 13070
// f := Delete ( f , 1 ) ;
13052: LD_ADDR_VAR 0 12
13056: PUSH
13057: LD_VAR 0 12
13061: PPUSH
13062: LD_INT 1
13064: PPUSH
13065: CALL_OW 3
13069: ST_TO_ADDR
// if not f then
13070: LD_VAR 0 12
13074: NOT
13075: IFFALSE 13093
// begin x := x + 2 ;
13077: LD_ADDR_VAR 0 13
13081: PUSH
13082: LD_VAR 0 13
13086: PUSH
13087: LD_INT 2
13089: PLUS
13090: ST_TO_ADDR
// continue ;
13091: GO 12887
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
13093: LD_VAR 0 12
13097: PUSH
13098: LD_INT 1
13100: ARRAY
13101: PPUSH
13102: CALL_OW 266
13106: PUSH
13107: LD_INT 5
13109: EQUAL
13110: IFFALSE 13184
// begin if UnitsInside ( f [ 1 ] ) < 3 then
13112: LD_VAR 0 12
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: CALL_OW 313
13125: PUSH
13126: LD_INT 3
13128: LESS
13129: IFFALSE 13165
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
13131: LD_INT 0
13133: PPUSH
13134: LD_INT 5
13136: PUSH
13137: LD_INT 8
13139: PUSH
13140: LD_INT 9
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: PUSH
13148: LD_VAR 0 17
13152: ARRAY
13153: PPUSH
13154: LD_VAR 0 4
13158: PPUSH
13159: CALL_OW 380
13163: GO 13182
// PrepareHuman ( false , i , skill ) ;
13165: LD_INT 0
13167: PPUSH
13168: LD_VAR 0 8
13172: PPUSH
13173: LD_VAR 0 4
13177: PPUSH
13178: CALL_OW 380
// end else
13182: GO 13201
// PrepareHuman ( false , i , skill ) ;
13184: LD_INT 0
13186: PPUSH
13187: LD_VAR 0 8
13191: PPUSH
13192: LD_VAR 0 4
13196: PPUSH
13197: CALL_OW 380
// un := CreateHuman ;
13201: LD_ADDR_VAR 0 14
13205: PUSH
13206: CALL_OW 44
13210: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
13211: LD_ADDR_VAR 0 7
13215: PUSH
13216: LD_VAR 0 7
13220: PPUSH
13221: LD_INT 1
13223: PPUSH
13224: LD_VAR 0 14
13228: PPUSH
13229: CALL_OW 2
13233: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
13234: LD_VAR 0 14
13238: PPUSH
13239: LD_VAR 0 12
13243: PUSH
13244: LD_INT 1
13246: ARRAY
13247: PPUSH
13248: CALL_OW 52
// end ;
13252: GO 12887
13254: POP
13255: POP
// end ;
13256: GO 12187
13258: POP
13259: POP
// result := result ^ buildings ;
13260: LD_ADDR_VAR 0 7
13264: PUSH
13265: LD_VAR 0 7
13269: PUSH
13270: LD_VAR 0 18
13274: ADD
13275: ST_TO_ADDR
// end else
13276: GO 13419
// begin for i = 1 to personel do
13278: LD_ADDR_VAR 0 8
13282: PUSH
13283: DOUBLE
13284: LD_INT 1
13286: DEC
13287: ST_TO_ADDR
13288: LD_VAR 0 6
13292: PUSH
13293: FOR_TO
13294: IFFALSE 13417
// begin if i > 4 then
13296: LD_VAR 0 8
13300: PUSH
13301: LD_INT 4
13303: GREATER
13304: IFFALSE 13308
// break ;
13306: GO 13417
// x := personel [ i ] ;
13308: LD_ADDR_VAR 0 13
13312: PUSH
13313: LD_VAR 0 6
13317: PUSH
13318: LD_VAR 0 8
13322: ARRAY
13323: ST_TO_ADDR
// if x = - 1 then
13324: LD_VAR 0 13
13328: PUSH
13329: LD_INT 1
13331: NEG
13332: EQUAL
13333: IFFALSE 13337
// continue ;
13335: GO 13293
// PrepareHuman ( false , i , skill ) ;
13337: LD_INT 0
13339: PPUSH
13340: LD_VAR 0 8
13344: PPUSH
13345: LD_VAR 0 4
13349: PPUSH
13350: CALL_OW 380
// un := CreateHuman ;
13354: LD_ADDR_VAR 0 14
13358: PUSH
13359: CALL_OW 44
13363: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
13364: LD_VAR 0 14
13368: PPUSH
13369: LD_VAR 0 1
13373: PPUSH
13374: CALL_OW 250
13378: PPUSH
13379: LD_VAR 0 1
13383: PPUSH
13384: CALL_OW 251
13388: PPUSH
13389: LD_INT 10
13391: PPUSH
13392: LD_INT 0
13394: PPUSH
13395: CALL_OW 50
// result := result ^ un ;
13399: LD_ADDR_VAR 0 7
13403: PUSH
13404: LD_VAR 0 7
13408: PUSH
13409: LD_VAR 0 14
13413: ADD
13414: ST_TO_ADDR
// end ;
13415: GO 13293
13417: POP
13418: POP
// end ; end ;
13419: LD_VAR 0 7
13423: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
13424: LD_INT 0
13426: PPUSH
13427: PPUSH
13428: PPUSH
13429: PPUSH
13430: PPUSH
13431: PPUSH
13432: PPUSH
13433: PPUSH
13434: PPUSH
13435: PPUSH
13436: PPUSH
13437: PPUSH
13438: PPUSH
13439: PPUSH
13440: PPUSH
13441: PPUSH
// result := false ;
13442: LD_ADDR_VAR 0 3
13446: PUSH
13447: LD_INT 0
13449: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
13450: LD_VAR 0 1
13454: NOT
13455: IFTRUE 13480
13457: PUSH
13458: LD_VAR 0 1
13462: PPUSH
13463: CALL_OW 266
13467: PUSH
13468: LD_INT 32
13470: PUSH
13471: LD_INT 33
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: IN
13478: NOT
13479: OR
13480: IFFALSE 13484
// exit ;
13482: GO 14619
// nat := GetNation ( tower ) ;
13484: LD_ADDR_VAR 0 12
13488: PUSH
13489: LD_VAR 0 1
13493: PPUSH
13494: CALL_OW 248
13498: ST_TO_ADDR
// side := GetSide ( tower ) ;
13499: LD_ADDR_VAR 0 16
13503: PUSH
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 255
13513: ST_TO_ADDR
// x := GetX ( tower ) ;
13514: LD_ADDR_VAR 0 10
13518: PUSH
13519: LD_VAR 0 1
13523: PPUSH
13524: CALL_OW 250
13528: ST_TO_ADDR
// y := GetY ( tower ) ;
13529: LD_ADDR_VAR 0 11
13533: PUSH
13534: LD_VAR 0 1
13538: PPUSH
13539: CALL_OW 251
13543: ST_TO_ADDR
// if not x or not y then
13544: LD_VAR 0 10
13548: NOT
13549: IFTRUE 13558
13551: PUSH
13552: LD_VAR 0 11
13556: NOT
13557: OR
13558: IFFALSE 13562
// exit ;
13560: GO 14619
// weapon := 0 ;
13562: LD_ADDR_VAR 0 18
13566: PUSH
13567: LD_INT 0
13569: ST_TO_ADDR
// fac_list := [ ] ;
13570: LD_ADDR_VAR 0 17
13574: PUSH
13575: EMPTY
13576: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
13577: LD_ADDR_VAR 0 6
13581: PUSH
13582: LD_VAR 0 1
13586: PPUSH
13587: CALL_OW 274
13591: PPUSH
13592: LD_VAR 0 2
13596: PPUSH
13597: LD_INT 0
13599: PPUSH
13600: CALL 11154 0 3
13604: PPUSH
13605: LD_INT 30
13607: PUSH
13608: LD_INT 3
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PPUSH
13615: CALL_OW 72
13619: ST_TO_ADDR
// if not factories then
13620: LD_VAR 0 6
13624: NOT
13625: IFFALSE 13629
// exit ;
13627: GO 14619
// for i in factories do
13629: LD_ADDR_VAR 0 8
13633: PUSH
13634: LD_VAR 0 6
13638: PUSH
13639: FOR_IN
13640: IFFALSE 13665
// fac_list := fac_list union AvailableWeaponList ( i ) ;
13642: LD_ADDR_VAR 0 17
13646: PUSH
13647: LD_VAR 0 17
13651: PUSH
13652: LD_VAR 0 8
13656: PPUSH
13657: CALL_OW 478
13661: UNION
13662: ST_TO_ADDR
13663: GO 13639
13665: POP
13666: POP
// if not fac_list then
13667: LD_VAR 0 17
13671: NOT
13672: IFFALSE 13676
// exit ;
13674: GO 14619
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
13676: LD_ADDR_VAR 0 5
13680: PUSH
13681: LD_INT 4
13683: PUSH
13684: LD_INT 5
13686: PUSH
13687: LD_INT 9
13689: PUSH
13690: LD_INT 10
13692: PUSH
13693: LD_INT 6
13695: PUSH
13696: LD_INT 7
13698: PUSH
13699: LD_INT 11
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 27
13713: PUSH
13714: LD_INT 28
13716: PUSH
13717: LD_INT 26
13719: PUSH
13720: LD_INT 30
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 43
13731: PUSH
13732: LD_INT 44
13734: PUSH
13735: LD_INT 46
13737: PUSH
13738: LD_INT 45
13740: PUSH
13741: LD_INT 47
13743: PUSH
13744: LD_INT 49
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: LD_VAR 0 12
13764: ARRAY
13765: ST_TO_ADDR
// list := list isect fac_list ;
13766: LD_ADDR_VAR 0 5
13770: PUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_VAR 0 17
13780: ISECT
13781: ST_TO_ADDR
// if not list then
13782: LD_VAR 0 5
13786: NOT
13787: IFFALSE 13791
// exit ;
13789: GO 14619
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
13791: LD_VAR 0 12
13795: PUSH
13796: LD_INT 3
13798: EQUAL
13799: IFFALSE 13811
13801: PUSH
13802: LD_INT 49
13804: PUSH
13805: LD_VAR 0 5
13809: IN
13810: AND
13811: IFFALSE 13831
13813: PUSH
13814: LD_INT 31
13816: PPUSH
13817: LD_VAR 0 16
13821: PPUSH
13822: CALL_OW 321
13826: PUSH
13827: LD_INT 2
13829: EQUAL
13830: AND
13831: IFFALSE 13891
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
13833: LD_INT 22
13835: PUSH
13836: LD_VAR 0 16
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 35
13847: PUSH
13848: LD_INT 49
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 91
13857: PUSH
13858: LD_VAR 0 1
13862: PUSH
13863: LD_INT 10
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: LIST
13875: PPUSH
13876: CALL_OW 69
13880: NOT
13881: IFFALSE 13891
// weapon := ru_time_lapser ;
13883: LD_ADDR_VAR 0 18
13887: PUSH
13888: LD_INT 49
13890: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
13891: LD_VAR 0 12
13895: PUSH
13896: LD_INT 1
13898: PUSH
13899: LD_INT 2
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: IN
13906: IFFALSE 13930
13908: PUSH
13909: LD_INT 11
13911: PUSH
13912: LD_VAR 0 5
13916: IN
13917: IFTRUE 13929
13919: PUSH
13920: LD_INT 30
13922: PUSH
13923: LD_VAR 0 5
13927: IN
13928: OR
13929: AND
13930: IFFALSE 13950
13932: PUSH
13933: LD_INT 6
13935: PPUSH
13936: LD_VAR 0 16
13940: PPUSH
13941: CALL_OW 321
13945: PUSH
13946: LD_INT 2
13948: EQUAL
13949: AND
13950: IFFALSE 14117
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
13952: LD_INT 22
13954: PUSH
13955: LD_VAR 0 16
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 2
13966: PUSH
13967: LD_INT 35
13969: PUSH
13970: LD_INT 11
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 35
13979: PUSH
13980: LD_INT 30
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 91
13994: PUSH
13995: LD_VAR 0 1
13999: PUSH
14000: LD_INT 18
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 69
14017: NOT
14018: IFFALSE 14094
14020: PUSH
14021: LD_INT 22
14023: PUSH
14024: LD_VAR 0 16
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: LD_INT 30
14038: PUSH
14039: LD_INT 32
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 30
14048: PUSH
14049: LD_INT 33
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 91
14063: PUSH
14064: LD_VAR 0 1
14068: PUSH
14069: LD_INT 12
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: EMPTY
14083: LIST
14084: PPUSH
14085: CALL_OW 69
14089: PUSH
14090: LD_INT 2
14092: GREATER
14093: AND
14094: IFFALSE 14117
// weapon := [ us_radar , ar_radar ] [ nat ] ;
14096: LD_ADDR_VAR 0 18
14100: PUSH
14101: LD_INT 11
14103: PUSH
14104: LD_INT 30
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_VAR 0 12
14115: ARRAY
14116: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
14117: LD_VAR 0 18
14121: NOT
14122: IFFALSE 14142
14124: PUSH
14125: LD_INT 40
14127: PPUSH
14128: LD_VAR 0 16
14132: PPUSH
14133: CALL_OW 321
14137: PUSH
14138: LD_INT 2
14140: EQUAL
14141: AND
14142: IFFALSE 14178
14144: PUSH
14145: LD_INT 7
14147: PUSH
14148: LD_VAR 0 5
14152: IN
14153: IFTRUE 14165
14155: PUSH
14156: LD_INT 28
14158: PUSH
14159: LD_VAR 0 5
14163: IN
14164: OR
14165: IFTRUE 14177
14167: PUSH
14168: LD_INT 45
14170: PUSH
14171: LD_VAR 0 5
14175: IN
14176: OR
14177: AND
14178: IFFALSE 14432
// begin hex := GetHexInfo ( x , y ) ;
14180: LD_ADDR_VAR 0 4
14184: PUSH
14185: LD_VAR 0 10
14189: PPUSH
14190: LD_VAR 0 11
14194: PPUSH
14195: CALL_OW 546
14199: ST_TO_ADDR
// if hex [ 1 ] then
14200: LD_VAR 0 4
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: IFFALSE 14212
// exit ;
14210: GO 14619
// height := hex [ 2 ] ;
14212: LD_ADDR_VAR 0 15
14216: PUSH
14217: LD_VAR 0 4
14221: PUSH
14222: LD_INT 2
14224: ARRAY
14225: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
14226: LD_ADDR_VAR 0 14
14230: PUSH
14231: LD_INT 0
14233: PUSH
14234: LD_INT 2
14236: PUSH
14237: LD_INT 3
14239: PUSH
14240: LD_INT 5
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: ST_TO_ADDR
// for i in tmp do
14249: LD_ADDR_VAR 0 8
14253: PUSH
14254: LD_VAR 0 14
14258: PUSH
14259: FOR_IN
14260: IFFALSE 14430
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
14262: LD_ADDR_VAR 0 9
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: LD_VAR 0 8
14276: PPUSH
14277: LD_INT 5
14279: PPUSH
14280: CALL_OW 272
14284: PUSH
14285: LD_VAR 0 11
14289: PPUSH
14290: LD_VAR 0 8
14294: PPUSH
14295: LD_INT 5
14297: PPUSH
14298: CALL_OW 273
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
14307: LD_VAR 0 9
14311: PUSH
14312: LD_INT 1
14314: ARRAY
14315: PPUSH
14316: LD_VAR 0 9
14320: PUSH
14321: LD_INT 2
14323: ARRAY
14324: PPUSH
14325: CALL_OW 488
14329: IFFALSE 14428
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
14331: LD_ADDR_VAR 0 4
14335: PUSH
14336: LD_VAR 0 9
14340: PUSH
14341: LD_INT 1
14343: ARRAY
14344: PPUSH
14345: LD_VAR 0 9
14349: PUSH
14350: LD_INT 2
14352: ARRAY
14353: PPUSH
14354: CALL_OW 546
14358: ST_TO_ADDR
// if hex [ 1 ] then
14359: LD_VAR 0 4
14363: PUSH
14364: LD_INT 1
14366: ARRAY
14367: IFFALSE 14371
// continue ;
14369: GO 14259
// h := hex [ 2 ] ;
14371: LD_ADDR_VAR 0 13
14375: PUSH
14376: LD_VAR 0 4
14380: PUSH
14381: LD_INT 2
14383: ARRAY
14384: ST_TO_ADDR
// if h + 7 < height then
14385: LD_VAR 0 13
14389: PUSH
14390: LD_INT 7
14392: PLUS
14393: PUSH
14394: LD_VAR 0 15
14398: LESS
14399: IFFALSE 14428
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
14401: LD_ADDR_VAR 0 18
14405: PUSH
14406: LD_INT 7
14408: PUSH
14409: LD_INT 28
14411: PUSH
14412: LD_INT 45
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: PUSH
14420: LD_VAR 0 12
14424: ARRAY
14425: ST_TO_ADDR
// break ;
14426: GO 14430
// end ; end ; end ;
14428: GO 14259
14430: POP
14431: POP
// end ; if not weapon then
14432: LD_VAR 0 18
14436: NOT
14437: IFFALSE 14497
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
14439: LD_ADDR_VAR 0 5
14443: PUSH
14444: LD_VAR 0 5
14448: PUSH
14449: LD_INT 11
14451: PUSH
14452: LD_INT 30
14454: PUSH
14455: LD_INT 49
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: DIFF
14463: ST_TO_ADDR
// if not list then
14464: LD_VAR 0 5
14468: NOT
14469: IFFALSE 14473
// exit ;
14471: GO 14619
// weapon := list [ rand ( 1 , list ) ] ;
14473: LD_ADDR_VAR 0 18
14477: PUSH
14478: LD_VAR 0 5
14482: PUSH
14483: LD_INT 1
14485: PPUSH
14486: LD_VAR 0 5
14490: PPUSH
14491: CALL_OW 12
14495: ARRAY
14496: ST_TO_ADDR
// end ; if weapon then
14497: LD_VAR 0 18
14501: IFFALSE 14619
// begin tmp := CostOfWeapon ( weapon ) ;
14503: LD_ADDR_VAR 0 14
14507: PUSH
14508: LD_VAR 0 18
14512: PPUSH
14513: CALL_OW 451
14517: ST_TO_ADDR
// j := GetBase ( tower ) ;
14518: LD_ADDR_VAR 0 9
14522: PUSH
14523: LD_VAR 0 1
14527: PPUSH
14528: CALL_OW 274
14532: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
14533: LD_VAR 0 9
14537: PPUSH
14538: LD_INT 1
14540: PPUSH
14541: CALL_OW 275
14545: PUSH
14546: LD_VAR 0 14
14550: PUSH
14551: LD_INT 1
14553: ARRAY
14554: GREATEREQUAL
14555: IFFALSE 14581
14557: PUSH
14558: LD_VAR 0 9
14562: PPUSH
14563: LD_INT 2
14565: PPUSH
14566: CALL_OW 275
14570: PUSH
14571: LD_VAR 0 14
14575: PUSH
14576: LD_INT 2
14578: ARRAY
14579: GREATEREQUAL
14580: AND
14581: IFFALSE 14607
14583: PUSH
14584: LD_VAR 0 9
14588: PPUSH
14589: LD_INT 3
14591: PPUSH
14592: CALL_OW 275
14596: PUSH
14597: LD_VAR 0 14
14601: PUSH
14602: LD_INT 3
14604: ARRAY
14605: GREATEREQUAL
14606: AND
14607: IFFALSE 14619
// result := weapon ;
14609: LD_ADDR_VAR 0 3
14613: PUSH
14614: LD_VAR 0 18
14618: ST_TO_ADDR
// end ; end ;
14619: LD_VAR 0 3
14623: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
14624: LD_INT 0
14626: PPUSH
14627: PPUSH
// result := true ;
14628: LD_ADDR_VAR 0 3
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if array1 = array2 then
14636: LD_VAR 0 1
14640: PUSH
14641: LD_VAR 0 2
14645: EQUAL
14646: IFFALSE 14706
// begin for i = 1 to array1 do
14648: LD_ADDR_VAR 0 4
14652: PUSH
14653: DOUBLE
14654: LD_INT 1
14656: DEC
14657: ST_TO_ADDR
14658: LD_VAR 0 1
14662: PUSH
14663: FOR_TO
14664: IFFALSE 14702
// if array1 [ i ] <> array2 [ i ] then
14666: LD_VAR 0 1
14670: PUSH
14671: LD_VAR 0 4
14675: ARRAY
14676: PUSH
14677: LD_VAR 0 2
14681: PUSH
14682: LD_VAR 0 4
14686: ARRAY
14687: NONEQUAL
14688: IFFALSE 14700
// begin result := false ;
14690: LD_ADDR_VAR 0 3
14694: PUSH
14695: LD_INT 0
14697: ST_TO_ADDR
// break ;
14698: GO 14702
// end ;
14700: GO 14663
14702: POP
14703: POP
// end else
14704: GO 14714
// result := false ;
14706: LD_ADDR_VAR 0 3
14710: PUSH
14711: LD_INT 0
14713: ST_TO_ADDR
// end ;
14714: LD_VAR 0 3
14718: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
14719: LD_INT 0
14721: PPUSH
14722: PPUSH
// if not array1 or not array2 then
14723: LD_VAR 0 1
14727: NOT
14728: IFTRUE 14737
14730: PUSH
14731: LD_VAR 0 2
14735: NOT
14736: OR
14737: IFFALSE 14741
// exit ;
14739: GO 14805
// result := true ;
14741: LD_ADDR_VAR 0 3
14745: PUSH
14746: LD_INT 1
14748: ST_TO_ADDR
// for i = 1 to array1 do
14749: LD_ADDR_VAR 0 4
14753: PUSH
14754: DOUBLE
14755: LD_INT 1
14757: DEC
14758: ST_TO_ADDR
14759: LD_VAR 0 1
14763: PUSH
14764: FOR_TO
14765: IFFALSE 14803
// if array1 [ i ] <> array2 [ i ] then
14767: LD_VAR 0 1
14771: PUSH
14772: LD_VAR 0 4
14776: ARRAY
14777: PUSH
14778: LD_VAR 0 2
14782: PUSH
14783: LD_VAR 0 4
14787: ARRAY
14788: NONEQUAL
14789: IFFALSE 14801
// begin result := false ;
14791: LD_ADDR_VAR 0 3
14795: PUSH
14796: LD_INT 0
14798: ST_TO_ADDR
// break ;
14799: GO 14803
// end ;
14801: GO 14764
14803: POP
14804: POP
// end ;
14805: LD_VAR 0 3
14809: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
14810: LD_INT 0
14812: PPUSH
14813: PPUSH
14814: PPUSH
// pom := GetBase ( fac ) ;
14815: LD_ADDR_VAR 0 5
14819: PUSH
14820: LD_VAR 0 1
14824: PPUSH
14825: CALL_OW 274
14829: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
14830: LD_ADDR_VAR 0 4
14834: PUSH
14835: LD_VAR 0 2
14839: PUSH
14840: LD_INT 1
14842: ARRAY
14843: PPUSH
14844: LD_VAR 0 2
14848: PUSH
14849: LD_INT 2
14851: ARRAY
14852: PPUSH
14853: LD_VAR 0 2
14857: PUSH
14858: LD_INT 3
14860: ARRAY
14861: PPUSH
14862: LD_VAR 0 2
14866: PUSH
14867: LD_INT 4
14869: ARRAY
14870: PPUSH
14871: CALL_OW 449
14875: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
14876: LD_ADDR_VAR 0 3
14880: PUSH
14881: LD_VAR 0 5
14885: PPUSH
14886: LD_INT 1
14888: PPUSH
14889: CALL_OW 275
14893: PUSH
14894: LD_VAR 0 4
14898: PUSH
14899: LD_INT 1
14901: ARRAY
14902: GREATEREQUAL
14903: IFFALSE 14929
14905: PUSH
14906: LD_VAR 0 5
14910: PPUSH
14911: LD_INT 2
14913: PPUSH
14914: CALL_OW 275
14918: PUSH
14919: LD_VAR 0 4
14923: PUSH
14924: LD_INT 2
14926: ARRAY
14927: GREATEREQUAL
14928: AND
14929: IFFALSE 14955
14931: PUSH
14932: LD_VAR 0 5
14936: PPUSH
14937: LD_INT 3
14939: PPUSH
14940: CALL_OW 275
14944: PUSH
14945: LD_VAR 0 4
14949: PUSH
14950: LD_INT 3
14952: ARRAY
14953: GREATEREQUAL
14954: AND
14955: ST_TO_ADDR
// end ;
14956: LD_VAR 0 3
14960: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
// pom := GetBase ( building ) ;
14967: LD_ADDR_VAR 0 3
14971: PUSH
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 274
14981: ST_TO_ADDR
// if not pom then
14982: LD_VAR 0 3
14986: NOT
14987: IFFALSE 14991
// exit ;
14989: GO 15165
// btype := GetBType ( building ) ;
14991: LD_ADDR_VAR 0 5
14995: PUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 266
15005: ST_TO_ADDR
// if btype = b_armoury then
15006: LD_VAR 0 5
15010: PUSH
15011: LD_INT 4
15013: EQUAL
15014: IFFALSE 15024
// btype := b_barracks ;
15016: LD_ADDR_VAR 0 5
15020: PUSH
15021: LD_INT 5
15023: ST_TO_ADDR
// if btype = b_depot then
15024: LD_VAR 0 5
15028: PUSH
15029: LD_INT 0
15031: EQUAL
15032: IFFALSE 15042
// btype := b_warehouse ;
15034: LD_ADDR_VAR 0 5
15038: PUSH
15039: LD_INT 1
15041: ST_TO_ADDR
// if btype = b_workshop then
15042: LD_VAR 0 5
15046: PUSH
15047: LD_INT 2
15049: EQUAL
15050: IFFALSE 15060
// btype := b_factory ;
15052: LD_ADDR_VAR 0 5
15056: PUSH
15057: LD_INT 3
15059: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15060: LD_ADDR_VAR 0 4
15064: PUSH
15065: LD_VAR 0 5
15069: PPUSH
15070: LD_VAR 0 1
15074: PPUSH
15075: CALL_OW 248
15079: PPUSH
15080: CALL_OW 450
15084: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15085: LD_ADDR_VAR 0 2
15089: PUSH
15090: LD_VAR 0 3
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: CALL_OW 275
15102: PUSH
15103: LD_VAR 0 4
15107: PUSH
15108: LD_INT 1
15110: ARRAY
15111: GREATEREQUAL
15112: IFFALSE 15138
15114: PUSH
15115: LD_VAR 0 3
15119: PPUSH
15120: LD_INT 2
15122: PPUSH
15123: CALL_OW 275
15127: PUSH
15128: LD_VAR 0 4
15132: PUSH
15133: LD_INT 2
15135: ARRAY
15136: GREATEREQUAL
15137: AND
15138: IFFALSE 15164
15140: PUSH
15141: LD_VAR 0 3
15145: PPUSH
15146: LD_INT 3
15148: PPUSH
15149: CALL_OW 275
15153: PUSH
15154: LD_VAR 0 4
15158: PUSH
15159: LD_INT 3
15161: ARRAY
15162: GREATEREQUAL
15163: AND
15164: ST_TO_ADDR
// end ;
15165: LD_VAR 0 2
15169: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
15170: LD_INT 0
15172: PPUSH
15173: PPUSH
15174: PPUSH
// pom := GetBase ( building ) ;
15175: LD_ADDR_VAR 0 4
15179: PUSH
15180: LD_VAR 0 1
15184: PPUSH
15185: CALL_OW 274
15189: ST_TO_ADDR
// if not pom then
15190: LD_VAR 0 4
15194: NOT
15195: IFFALSE 15199
// exit ;
15197: GO 15304
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
15199: LD_ADDR_VAR 0 5
15203: PUSH
15204: LD_VAR 0 2
15208: PPUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 248
15218: PPUSH
15219: CALL_OW 450
15223: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
15224: LD_ADDR_VAR 0 3
15228: PUSH
15229: LD_VAR 0 4
15233: PPUSH
15234: LD_INT 1
15236: PPUSH
15237: CALL_OW 275
15241: PUSH
15242: LD_VAR 0 5
15246: PUSH
15247: LD_INT 1
15249: ARRAY
15250: GREATEREQUAL
15251: IFFALSE 15277
15253: PUSH
15254: LD_VAR 0 4
15258: PPUSH
15259: LD_INT 2
15261: PPUSH
15262: CALL_OW 275
15266: PUSH
15267: LD_VAR 0 5
15271: PUSH
15272: LD_INT 2
15274: ARRAY
15275: GREATEREQUAL
15276: AND
15277: IFFALSE 15303
15279: PUSH
15280: LD_VAR 0 4
15284: PPUSH
15285: LD_INT 3
15287: PPUSH
15288: CALL_OW 275
15292: PUSH
15293: LD_VAR 0 5
15297: PUSH
15298: LD_INT 3
15300: ARRAY
15301: GREATEREQUAL
15302: AND
15303: ST_TO_ADDR
// end ;
15304: LD_VAR 0 3
15308: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
15309: LD_INT 0
15311: PPUSH
15312: PPUSH
15313: PPUSH
15314: PPUSH
15315: PPUSH
15316: PPUSH
15317: PPUSH
15318: PPUSH
15319: PPUSH
15320: PPUSH
15321: PPUSH
// result := false ;
15322: LD_ADDR_VAR 0 8
15326: PUSH
15327: LD_INT 0
15329: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
15330: LD_VAR 0 5
15334: NOT
15335: IFTRUE 15344
15337: PUSH
15338: LD_VAR 0 1
15342: NOT
15343: OR
15344: IFTRUE 15353
15346: PUSH
15347: LD_VAR 0 2
15351: NOT
15352: OR
15353: IFTRUE 15362
15355: PUSH
15356: LD_VAR 0 3
15360: NOT
15361: OR
15362: IFFALSE 15366
// exit ;
15364: GO 16192
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
15366: LD_ADDR_VAR 0 14
15370: PUSH
15371: LD_VAR 0 1
15375: PPUSH
15376: LD_VAR 0 2
15380: PPUSH
15381: LD_VAR 0 3
15385: PPUSH
15386: LD_VAR 0 4
15390: PPUSH
15391: LD_VAR 0 5
15395: PUSH
15396: LD_INT 1
15398: ARRAY
15399: PPUSH
15400: CALL_OW 248
15404: PPUSH
15405: LD_INT 0
15407: PPUSH
15408: CALL 17473 0 6
15412: ST_TO_ADDR
// if not hexes then
15413: LD_VAR 0 14
15417: NOT
15418: IFFALSE 15422
// exit ;
15420: GO 16192
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15422: LD_ADDR_VAR 0 17
15426: PUSH
15427: LD_VAR 0 5
15431: PPUSH
15432: LD_INT 22
15434: PUSH
15435: LD_VAR 0 13
15439: PPUSH
15440: CALL_OW 255
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: LD_INT 30
15454: PUSH
15455: LD_INT 0
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: PUSH
15462: LD_INT 30
15464: PUSH
15465: LD_INT 1
15467: PUSH
15468: EMPTY
15469: LIST
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: PPUSH
15481: CALL_OW 72
15485: ST_TO_ADDR
// for i = 1 to hexes do
15486: LD_ADDR_VAR 0 9
15490: PUSH
15491: DOUBLE
15492: LD_INT 1
15494: DEC
15495: ST_TO_ADDR
15496: LD_VAR 0 14
15500: PUSH
15501: FOR_TO
15502: IFFALSE 16190
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
15504: LD_ADDR_VAR 0 13
15508: PUSH
15509: LD_VAR 0 14
15513: PUSH
15514: LD_VAR 0 9
15518: ARRAY
15519: PUSH
15520: LD_INT 1
15522: ARRAY
15523: PPUSH
15524: LD_VAR 0 14
15528: PUSH
15529: LD_VAR 0 9
15533: ARRAY
15534: PUSH
15535: LD_INT 2
15537: ARRAY
15538: PPUSH
15539: CALL_OW 428
15543: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
15544: LD_VAR 0 14
15548: PUSH
15549: LD_VAR 0 9
15553: ARRAY
15554: PUSH
15555: LD_INT 1
15557: ARRAY
15558: PPUSH
15559: LD_VAR 0 14
15563: PUSH
15564: LD_VAR 0 9
15568: ARRAY
15569: PUSH
15570: LD_INT 2
15572: ARRAY
15573: PPUSH
15574: CALL_OW 351
15578: IFTRUE 15617
15580: PUSH
15581: LD_VAR 0 14
15585: PUSH
15586: LD_VAR 0 9
15590: ARRAY
15591: PUSH
15592: LD_INT 1
15594: ARRAY
15595: PPUSH
15596: LD_VAR 0 14
15600: PUSH
15601: LD_VAR 0 9
15605: ARRAY
15606: PUSH
15607: LD_INT 2
15609: ARRAY
15610: PPUSH
15611: CALL_OW 488
15615: NOT
15616: OR
15617: IFTRUE 15634
15619: PUSH
15620: LD_VAR 0 13
15624: PPUSH
15625: CALL_OW 247
15629: PUSH
15630: LD_INT 3
15632: EQUAL
15633: OR
15634: IFFALSE 15640
// exit ;
15636: POP
15637: POP
15638: GO 16192
// if not tmp then
15640: LD_VAR 0 13
15644: NOT
15645: IFFALSE 15649
// continue ;
15647: GO 15501
// result := true ;
15649: LD_ADDR_VAR 0 8
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
15657: LD_VAR 0 6
15661: IFFALSE 15678
15663: PUSH
15664: LD_VAR 0 13
15668: PPUSH
15669: CALL_OW 247
15673: PUSH
15674: LD_INT 2
15676: EQUAL
15677: AND
15678: IFFALSE 15695
15680: PUSH
15681: LD_VAR 0 13
15685: PPUSH
15686: CALL_OW 263
15690: PUSH
15691: LD_INT 1
15693: EQUAL
15694: AND
15695: IFFALSE 15859
// begin if IsDrivenBy ( tmp ) then
15697: LD_VAR 0 13
15701: PPUSH
15702: CALL_OW 311
15706: IFFALSE 15710
// continue ;
15708: GO 15501
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
15710: LD_VAR 0 6
15714: PPUSH
15715: LD_INT 3
15717: PUSH
15718: LD_INT 60
15720: PUSH
15721: EMPTY
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 3
15730: PUSH
15731: LD_INT 55
15733: PUSH
15734: EMPTY
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 72
15749: IFFALSE 15857
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
15751: LD_ADDR_VAR 0 18
15755: PUSH
15756: LD_VAR 0 6
15760: PPUSH
15761: LD_INT 3
15763: PUSH
15764: LD_INT 60
15766: PUSH
15767: EMPTY
15768: LIST
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 3
15776: PUSH
15777: LD_INT 55
15779: PUSH
15780: EMPTY
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PPUSH
15791: CALL_OW 72
15795: PUSH
15796: LD_INT 1
15798: ARRAY
15799: ST_TO_ADDR
// if IsInUnit ( driver ) then
15800: LD_VAR 0 18
15804: PPUSH
15805: CALL_OW 310
15809: IFFALSE 15820
// ComExit ( driver ) ;
15811: LD_VAR 0 18
15815: PPUSH
15816: CALL 41463 0 1
// AddComEnterUnit ( driver , tmp ) ;
15820: LD_VAR 0 18
15824: PPUSH
15825: LD_VAR 0 13
15829: PPUSH
15830: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
15834: LD_VAR 0 18
15838: PPUSH
15839: LD_VAR 0 7
15843: PPUSH
15844: CALL_OW 173
// AddComExitVehicle ( driver ) ;
15848: LD_VAR 0 18
15852: PPUSH
15853: CALL_OW 181
// end ; continue ;
15857: GO 15501
// end ; if not cleaners or not tmp in cleaners then
15859: LD_VAR 0 6
15863: NOT
15864: IFTRUE 15879
15866: PUSH
15867: LD_VAR 0 13
15871: PUSH
15872: LD_VAR 0 6
15876: IN
15877: NOT
15878: OR
15879: IFFALSE 16188
// begin if dep then
15881: LD_VAR 0 17
15885: IFFALSE 16021
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
15887: LD_ADDR_VAR 0 16
15891: PUSH
15892: LD_VAR 0 17
15896: PUSH
15897: LD_INT 1
15899: ARRAY
15900: PPUSH
15901: CALL_OW 250
15905: PPUSH
15906: LD_VAR 0 17
15910: PUSH
15911: LD_INT 1
15913: ARRAY
15914: PPUSH
15915: CALL_OW 254
15919: PPUSH
15920: LD_INT 5
15922: PPUSH
15923: CALL_OW 272
15927: PUSH
15928: LD_VAR 0 17
15932: PUSH
15933: LD_INT 1
15935: ARRAY
15936: PPUSH
15937: CALL_OW 251
15941: PPUSH
15942: LD_VAR 0 17
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: PPUSH
15951: CALL_OW 254
15955: PPUSH
15956: LD_INT 5
15958: PPUSH
15959: CALL_OW 273
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
15968: LD_VAR 0 16
15972: PUSH
15973: LD_INT 1
15975: ARRAY
15976: PPUSH
15977: LD_VAR 0 16
15981: PUSH
15982: LD_INT 2
15984: ARRAY
15985: PPUSH
15986: CALL_OW 488
15990: IFFALSE 16021
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
15992: LD_VAR 0 13
15996: PPUSH
15997: LD_VAR 0 16
16001: PUSH
16002: LD_INT 1
16004: ARRAY
16005: PPUSH
16006: LD_VAR 0 16
16010: PUSH
16011: LD_INT 2
16013: ARRAY
16014: PPUSH
16015: CALL_OW 111
// continue ;
16019: GO 15501
// end ; end ; r := GetDir ( tmp ) ;
16021: LD_ADDR_VAR 0 15
16025: PUSH
16026: LD_VAR 0 13
16030: PPUSH
16031: CALL_OW 254
16035: ST_TO_ADDR
// if r = 5 then
16036: LD_VAR 0 15
16040: PUSH
16041: LD_INT 5
16043: EQUAL
16044: IFFALSE 16054
// r := 0 ;
16046: LD_ADDR_VAR 0 15
16050: PUSH
16051: LD_INT 0
16053: ST_TO_ADDR
// for j = r to 5 do
16054: LD_ADDR_VAR 0 10
16058: PUSH
16059: DOUBLE
16060: LD_VAR 0 15
16064: DEC
16065: ST_TO_ADDR
16066: LD_INT 5
16068: PUSH
16069: FOR_TO
16070: IFFALSE 16186
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
16072: LD_ADDR_VAR 0 11
16076: PUSH
16077: LD_VAR 0 13
16081: PPUSH
16082: CALL_OW 250
16086: PPUSH
16087: LD_VAR 0 10
16091: PPUSH
16092: LD_INT 2
16094: PPUSH
16095: CALL_OW 272
16099: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
16100: LD_ADDR_VAR 0 12
16104: PUSH
16105: LD_VAR 0 13
16109: PPUSH
16110: CALL_OW 251
16114: PPUSH
16115: LD_VAR 0 10
16119: PPUSH
16120: LD_INT 2
16122: PPUSH
16123: CALL_OW 273
16127: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
16128: LD_VAR 0 11
16132: PPUSH
16133: LD_VAR 0 12
16137: PPUSH
16138: CALL_OW 488
16142: IFFALSE 16161
16144: PUSH
16145: LD_VAR 0 11
16149: PPUSH
16150: LD_VAR 0 12
16154: PPUSH
16155: CALL_OW 428
16159: NOT
16160: AND
16161: IFFALSE 16184
// begin ComMoveXY ( tmp , _x , _y ) ;
16163: LD_VAR 0 13
16167: PPUSH
16168: LD_VAR 0 11
16172: PPUSH
16173: LD_VAR 0 12
16177: PPUSH
16178: CALL_OW 111
// break ;
16182: GO 16186
// end ; end ;
16184: GO 16069
16186: POP
16187: POP
// end ; end ;
16188: GO 15501
16190: POP
16191: POP
// end ;
16192: LD_VAR 0 8
16196: RET
// export function BuildingTechInvented ( side , btype ) ; begin
16197: LD_INT 0
16199: PPUSH
// result := true ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_INT 1
16207: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
16208: LD_VAR 0 2
16212: PUSH
16213: LD_INT 24
16215: DOUBLE
16216: EQUAL
16217: IFTRUE 16227
16219: LD_INT 33
16221: DOUBLE
16222: EQUAL
16223: IFTRUE 16227
16225: GO 16252
16227: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
16228: LD_ADDR_VAR 0 3
16232: PUSH
16233: LD_INT 32
16235: PPUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 321
16245: PUSH
16246: LD_INT 2
16248: EQUAL
16249: ST_TO_ADDR
16250: GO 16568
16252: LD_INT 20
16254: DOUBLE
16255: EQUAL
16256: IFTRUE 16260
16258: GO 16285
16260: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
16261: LD_ADDR_VAR 0 3
16265: PUSH
16266: LD_INT 6
16268: PPUSH
16269: LD_VAR 0 1
16273: PPUSH
16274: CALL_OW 321
16278: PUSH
16279: LD_INT 2
16281: EQUAL
16282: ST_TO_ADDR
16283: GO 16568
16285: LD_INT 22
16287: DOUBLE
16288: EQUAL
16289: IFTRUE 16299
16291: LD_INT 36
16293: DOUBLE
16294: EQUAL
16295: IFTRUE 16299
16297: GO 16324
16299: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: LD_INT 15
16307: PPUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 321
16317: PUSH
16318: LD_INT 2
16320: EQUAL
16321: ST_TO_ADDR
16322: GO 16568
16324: LD_INT 30
16326: DOUBLE
16327: EQUAL
16328: IFTRUE 16332
16330: GO 16357
16332: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
16333: LD_ADDR_VAR 0 3
16337: PUSH
16338: LD_INT 20
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 321
16350: PUSH
16351: LD_INT 2
16353: EQUAL
16354: ST_TO_ADDR
16355: GO 16568
16357: LD_INT 28
16359: DOUBLE
16360: EQUAL
16361: IFTRUE 16371
16363: LD_INT 21
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16396
16371: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
16372: LD_ADDR_VAR 0 3
16376: PUSH
16377: LD_INT 21
16379: PPUSH
16380: LD_VAR 0 1
16384: PPUSH
16385: CALL_OW 321
16389: PUSH
16390: LD_INT 2
16392: EQUAL
16393: ST_TO_ADDR
16394: GO 16568
16396: LD_INT 16
16398: DOUBLE
16399: EQUAL
16400: IFTRUE 16404
16402: GO 16429
16404: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
16405: LD_ADDR_VAR 0 3
16409: PUSH
16410: LD_INT 84
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 321
16422: PUSH
16423: LD_INT 2
16425: EQUAL
16426: ST_TO_ADDR
16427: GO 16568
16429: LD_INT 19
16431: DOUBLE
16432: EQUAL
16433: IFTRUE 16443
16435: LD_INT 23
16437: DOUBLE
16438: EQUAL
16439: IFTRUE 16443
16441: GO 16468
16443: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
16444: LD_ADDR_VAR 0 3
16448: PUSH
16449: LD_INT 83
16451: PPUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 321
16461: PUSH
16462: LD_INT 2
16464: EQUAL
16465: ST_TO_ADDR
16466: GO 16568
16468: LD_INT 17
16470: DOUBLE
16471: EQUAL
16472: IFTRUE 16476
16474: GO 16501
16476: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
16477: LD_ADDR_VAR 0 3
16481: PUSH
16482: LD_INT 39
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL_OW 321
16494: PUSH
16495: LD_INT 2
16497: EQUAL
16498: ST_TO_ADDR
16499: GO 16568
16501: LD_INT 18
16503: DOUBLE
16504: EQUAL
16505: IFTRUE 16509
16507: GO 16534
16509: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
16510: LD_ADDR_VAR 0 3
16514: PUSH
16515: LD_INT 40
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 321
16527: PUSH
16528: LD_INT 2
16530: EQUAL
16531: ST_TO_ADDR
16532: GO 16568
16534: LD_INT 27
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 16567
16542: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
16543: LD_ADDR_VAR 0 3
16547: PUSH
16548: LD_INT 35
16550: PPUSH
16551: LD_VAR 0 1
16555: PPUSH
16556: CALL_OW 321
16560: PUSH
16561: LD_INT 2
16563: EQUAL
16564: ST_TO_ADDR
16565: GO 16568
16567: POP
// end ;
16568: LD_VAR 0 3
16572: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
16573: LD_INT 0
16575: PPUSH
16576: PPUSH
16577: PPUSH
16578: PPUSH
16579: PPUSH
16580: PPUSH
16581: PPUSH
16582: PPUSH
16583: PPUSH
16584: PPUSH
16585: PPUSH
// result := false ;
16586: LD_ADDR_VAR 0 6
16590: PUSH
16591: LD_INT 0
16593: ST_TO_ADDR
// if btype = b_depot then
16594: LD_VAR 0 2
16598: PUSH
16599: LD_INT 0
16601: EQUAL
16602: IFFALSE 16614
// begin result := true ;
16604: LD_ADDR_VAR 0 6
16608: PUSH
16609: LD_INT 1
16611: ST_TO_ADDR
// exit ;
16612: GO 17468
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
16614: LD_VAR 0 1
16618: NOT
16619: IFTRUE 16644
16621: PUSH
16622: LD_VAR 0 1
16626: PPUSH
16627: CALL_OW 266
16631: PUSH
16632: LD_INT 0
16634: PUSH
16635: LD_INT 1
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: IN
16642: NOT
16643: OR
16644: IFTRUE 16653
16646: PUSH
16647: LD_VAR 0 2
16651: NOT
16652: OR
16653: IFTRUE 16689
16655: PUSH
16656: LD_VAR 0 5
16660: PUSH
16661: LD_INT 0
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: IN
16687: NOT
16688: OR
16689: IFTRUE 16708
16691: PUSH
16692: LD_VAR 0 3
16696: PPUSH
16697: LD_VAR 0 4
16701: PPUSH
16702: CALL_OW 488
16706: NOT
16707: OR
16708: IFFALSE 16712
// exit ;
16710: GO 17468
// side := GetSide ( depot ) ;
16712: LD_ADDR_VAR 0 9
16716: PUSH
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 255
16726: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
16727: LD_VAR 0 9
16731: PPUSH
16732: LD_VAR 0 2
16736: PPUSH
16737: CALL 16197 0 2
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 17468
// pom := GetBase ( depot ) ;
16746: LD_ADDR_VAR 0 10
16750: PUSH
16751: LD_VAR 0 1
16755: PPUSH
16756: CALL_OW 274
16760: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
16761: LD_ADDR_VAR 0 11
16765: PUSH
16766: LD_VAR 0 2
16770: PPUSH
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL_OW 248
16780: PPUSH
16781: CALL_OW 450
16785: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
16786: LD_VAR 0 10
16790: PPUSH
16791: LD_INT 1
16793: PPUSH
16794: CALL_OW 275
16798: PUSH
16799: LD_VAR 0 11
16803: PUSH
16804: LD_INT 1
16806: ARRAY
16807: GREATEREQUAL
16808: IFFALSE 16834
16810: PUSH
16811: LD_VAR 0 10
16815: PPUSH
16816: LD_INT 2
16818: PPUSH
16819: CALL_OW 275
16823: PUSH
16824: LD_VAR 0 11
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: GREATEREQUAL
16833: AND
16834: IFFALSE 16860
16836: PUSH
16837: LD_VAR 0 10
16841: PPUSH
16842: LD_INT 3
16844: PPUSH
16845: CALL_OW 275
16849: PUSH
16850: LD_VAR 0 11
16854: PUSH
16855: LD_INT 3
16857: ARRAY
16858: GREATEREQUAL
16859: AND
16860: NOT
16861: IFFALSE 16865
// exit ;
16863: GO 17468
// if GetBType ( depot ) = b_depot then
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 266
16874: PUSH
16875: LD_INT 0
16877: EQUAL
16878: IFFALSE 16890
// dist := 28 else
16880: LD_ADDR_VAR 0 14
16884: PUSH
16885: LD_INT 28
16887: ST_TO_ADDR
16888: GO 16898
// dist := 36 ;
16890: LD_ADDR_VAR 0 14
16894: PUSH
16895: LD_INT 36
16897: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
16898: LD_VAR 0 1
16902: PPUSH
16903: LD_VAR 0 3
16907: PPUSH
16908: LD_VAR 0 4
16912: PPUSH
16913: CALL_OW 297
16917: PUSH
16918: LD_VAR 0 14
16922: GREATER
16923: IFFALSE 16927
// exit ;
16925: GO 17468
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
16927: LD_ADDR_VAR 0 12
16931: PUSH
16932: LD_VAR 0 2
16936: PPUSH
16937: LD_VAR 0 3
16941: PPUSH
16942: LD_VAR 0 4
16946: PPUSH
16947: LD_VAR 0 5
16951: PPUSH
16952: LD_VAR 0 1
16956: PPUSH
16957: CALL_OW 248
16961: PPUSH
16962: LD_INT 0
16964: PPUSH
16965: CALL 17473 0 6
16969: ST_TO_ADDR
// if not hexes then
16970: LD_VAR 0 12
16974: NOT
16975: IFFALSE 16979
// exit ;
16977: GO 17468
// hex := GetHexInfo ( x , y ) ;
16979: LD_ADDR_VAR 0 15
16983: PUSH
16984: LD_VAR 0 3
16988: PPUSH
16989: LD_VAR 0 4
16993: PPUSH
16994: CALL_OW 546
16998: ST_TO_ADDR
// if hex [ 1 ] then
16999: LD_VAR 0 15
17003: PUSH
17004: LD_INT 1
17006: ARRAY
17007: IFFALSE 17011
// exit ;
17009: GO 17468
// height := hex [ 2 ] ;
17011: LD_ADDR_VAR 0 13
17015: PUSH
17016: LD_VAR 0 15
17020: PUSH
17021: LD_INT 2
17023: ARRAY
17024: ST_TO_ADDR
// for i = 1 to hexes do
17025: LD_ADDR_VAR 0 7
17029: PUSH
17030: DOUBLE
17031: LD_INT 1
17033: DEC
17034: ST_TO_ADDR
17035: LD_VAR 0 12
17039: PUSH
17040: FOR_TO
17041: IFFALSE 17385
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
17043: LD_VAR 0 12
17047: PUSH
17048: LD_VAR 0 7
17052: ARRAY
17053: PUSH
17054: LD_INT 1
17056: ARRAY
17057: PPUSH
17058: LD_VAR 0 12
17062: PUSH
17063: LD_VAR 0 7
17067: ARRAY
17068: PUSH
17069: LD_INT 2
17071: ARRAY
17072: PPUSH
17073: CALL_OW 488
17077: NOT
17078: IFTRUE 17120
17080: PUSH
17081: LD_VAR 0 12
17085: PUSH
17086: LD_VAR 0 7
17090: ARRAY
17091: PUSH
17092: LD_INT 1
17094: ARRAY
17095: PPUSH
17096: LD_VAR 0 12
17100: PUSH
17101: LD_VAR 0 7
17105: ARRAY
17106: PUSH
17107: LD_INT 2
17109: ARRAY
17110: PPUSH
17111: CALL_OW 428
17115: PUSH
17116: LD_INT 0
17118: GREATER
17119: OR
17120: IFTRUE 17158
17122: PUSH
17123: LD_VAR 0 12
17127: PUSH
17128: LD_VAR 0 7
17132: ARRAY
17133: PUSH
17134: LD_INT 1
17136: ARRAY
17137: PPUSH
17138: LD_VAR 0 12
17142: PUSH
17143: LD_VAR 0 7
17147: ARRAY
17148: PUSH
17149: LD_INT 2
17151: ARRAY
17152: PPUSH
17153: CALL_OW 351
17157: OR
17158: IFFALSE 17164
// exit ;
17160: POP
17161: POP
17162: GO 17468
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17164: LD_ADDR_VAR 0 8
17168: PUSH
17169: LD_VAR 0 12
17173: PUSH
17174: LD_VAR 0 7
17178: ARRAY
17179: PUSH
17180: LD_INT 1
17182: ARRAY
17183: PPUSH
17184: LD_VAR 0 12
17188: PUSH
17189: LD_VAR 0 7
17193: ARRAY
17194: PUSH
17195: LD_INT 2
17197: ARRAY
17198: PPUSH
17199: CALL_OW 546
17203: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
17204: LD_VAR 0 8
17208: PUSH
17209: LD_INT 1
17211: ARRAY
17212: IFTRUE 17234
17214: PUSH
17215: LD_VAR 0 8
17219: PUSH
17220: LD_INT 2
17222: ARRAY
17223: PUSH
17224: LD_VAR 0 13
17228: PUSH
17229: LD_INT 2
17231: PLUS
17232: GREATER
17233: OR
17234: IFTRUE 17256
17236: PUSH
17237: LD_VAR 0 8
17241: PUSH
17242: LD_INT 2
17244: ARRAY
17245: PUSH
17246: LD_VAR 0 13
17250: PUSH
17251: LD_INT 2
17253: MINUS
17254: LESS
17255: OR
17256: IFTRUE 17324
17258: PUSH
17259: LD_VAR 0 8
17263: PUSH
17264: LD_INT 3
17266: ARRAY
17267: PUSH
17268: LD_INT 0
17270: PUSH
17271: LD_INT 8
17273: PUSH
17274: LD_INT 9
17276: PUSH
17277: LD_INT 10
17279: PUSH
17280: LD_INT 11
17282: PUSH
17283: LD_INT 12
17285: PUSH
17286: LD_INT 13
17288: PUSH
17289: LD_INT 16
17291: PUSH
17292: LD_INT 17
17294: PUSH
17295: LD_INT 18
17297: PUSH
17298: LD_INT 19
17300: PUSH
17301: LD_INT 20
17303: PUSH
17304: LD_INT 21
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: IN
17322: NOT
17323: OR
17324: IFTRUE 17337
17326: PUSH
17327: LD_VAR 0 8
17331: PUSH
17332: LD_INT 5
17334: ARRAY
17335: NOT
17336: OR
17337: IFTRUE 17377
17339: PUSH
17340: LD_VAR 0 8
17344: PUSH
17345: LD_INT 6
17347: ARRAY
17348: PUSH
17349: LD_INT 1
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: LD_INT 7
17357: PUSH
17358: LD_INT 9
17360: PUSH
17361: LD_INT 10
17363: PUSH
17364: LD_INT 11
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: IN
17375: NOT
17376: OR
17377: IFFALSE 17383
// exit ;
17379: POP
17380: POP
17381: GO 17468
// end ;
17383: GO 17040
17385: POP
17386: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
17387: LD_VAR 0 9
17391: PPUSH
17392: LD_VAR 0 3
17396: PPUSH
17397: LD_VAR 0 4
17401: PPUSH
17402: LD_INT 20
17404: PPUSH
17405: CALL 9287 0 4
17409: PUSH
17410: LD_INT 4
17412: ARRAY
17413: IFFALSE 17417
// exit ;
17415: GO 17468
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
17417: LD_VAR 0 2
17421: PUSH
17422: LD_INT 29
17424: PUSH
17425: LD_INT 30
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: IN
17432: IFFALSE 17456
17434: PUSH
17435: LD_VAR 0 3
17439: PPUSH
17440: LD_VAR 0 4
17444: PPUSH
17445: LD_VAR 0 9
17449: PPUSH
17450: CALL_OW 440
17454: NOT
17455: AND
17456: IFFALSE 17460
// exit ;
17458: GO 17468
// result := true ;
17460: LD_ADDR_VAR 0 6
17464: PUSH
17465: LD_INT 1
17467: ST_TO_ADDR
// end ;
17468: LD_VAR 0 6
17472: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
17473: LD_INT 0
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
17503: PPUSH
17504: PPUSH
17505: PPUSH
17506: PPUSH
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
17511: PPUSH
17512: PPUSH
17513: PPUSH
17514: PPUSH
17515: PPUSH
17516: PPUSH
17517: PPUSH
17518: PPUSH
17519: PPUSH
17520: PPUSH
17521: PPUSH
17522: PPUSH
17523: PPUSH
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
// result = [ ] ;
17533: LD_ADDR_VAR 0 7
17537: PUSH
17538: EMPTY
17539: ST_TO_ADDR
// temp_list = [ ] ;
17540: LD_ADDR_VAR 0 9
17544: PUSH
17545: EMPTY
17546: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
17547: LD_VAR 0 4
17551: PUSH
17552: LD_INT 0
17554: PUSH
17555: LD_INT 1
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: LD_INT 3
17563: PUSH
17564: LD_INT 4
17566: PUSH
17567: LD_INT 5
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: IN
17578: NOT
17579: IFTRUE 17622
17581: PUSH
17582: LD_VAR 0 1
17586: PUSH
17587: LD_INT 0
17589: PUSH
17590: LD_INT 1
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: IN
17597: IFFALSE 17621
17599: PUSH
17600: LD_VAR 0 5
17604: PUSH
17605: LD_INT 1
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 3
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: LIST
17618: IN
17619: NOT
17620: AND
17621: OR
17622: IFFALSE 17626
// exit ;
17624: GO 36025
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
17626: LD_VAR 0 1
17630: PUSH
17631: LD_INT 6
17633: PUSH
17634: LD_INT 7
17636: PUSH
17637: LD_INT 8
17639: PUSH
17640: LD_INT 13
17642: PUSH
17643: LD_INT 12
17645: PUSH
17646: LD_INT 15
17648: PUSH
17649: LD_INT 11
17651: PUSH
17652: LD_INT 14
17654: PUSH
17655: LD_INT 10
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: IN
17669: IFFALSE 17679
// btype = b_lab ;
17671: LD_ADDR_VAR 0 1
17675: PUSH
17676: LD_INT 6
17678: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
17679: LD_VAR 0 6
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: LD_INT 1
17689: PUSH
17690: LD_INT 2
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: LIST
17697: IN
17698: NOT
17699: IFTRUE 17767
17701: PUSH
17702: LD_VAR 0 1
17706: PUSH
17707: LD_INT 0
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: LD_INT 2
17715: PUSH
17716: LD_INT 3
17718: PUSH
17719: LD_INT 6
17721: PUSH
17722: LD_INT 36
17724: PUSH
17725: LD_INT 4
17727: PUSH
17728: LD_INT 5
17730: PUSH
17731: LD_INT 31
17733: PUSH
17734: LD_INT 32
17736: PUSH
17737: LD_INT 33
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: IN
17753: NOT
17754: IFFALSE 17766
17756: PUSH
17757: LD_VAR 0 6
17761: PUSH
17762: LD_INT 1
17764: EQUAL
17765: AND
17766: OR
17767: IFTRUE 17799
17769: PUSH
17770: LD_VAR 0 1
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: IN
17785: NOT
17786: IFFALSE 17798
17788: PUSH
17789: LD_VAR 0 6
17793: PUSH
17794: LD_INT 2
17796: EQUAL
17797: AND
17798: OR
17799: IFFALSE 17809
// mode = 0 ;
17801: LD_ADDR_VAR 0 6
17805: PUSH
17806: LD_INT 0
17808: ST_TO_ADDR
// case mode of 0 :
17809: LD_VAR 0 6
17813: PUSH
17814: LD_INT 0
17816: DOUBLE
17817: EQUAL
17818: IFTRUE 17822
17820: GO 29275
17822: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
17823: LD_ADDR_VAR 0 11
17827: PUSH
17828: LD_INT 0
17830: PUSH
17831: LD_INT 0
17833: PUSH
17834: EMPTY
17835: LIST
17836: LIST
17837: PUSH
17838: LD_INT 0
17840: PUSH
17841: LD_INT 1
17843: NEG
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 1
17851: PUSH
17852: LD_INT 0
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PUSH
17869: LD_INT 0
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PUSH
17879: LD_INT 1
17881: NEG
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: NEG
17893: PUSH
17894: LD_INT 1
17896: NEG
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 1
17904: NEG
17905: PUSH
17906: LD_INT 2
17908: NEG
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 0
17916: PUSH
17917: LD_INT 2
17919: NEG
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: LD_INT 1
17930: NEG
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 0
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 1
17958: NEG
17959: PUSH
17960: LD_INT 1
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: LD_INT 3
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: LD_INT 0
17979: PUSH
17980: LD_INT 3
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 1
17989: NEG
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18016: LD_ADDR_VAR 0 12
18020: PUSH
18021: LD_INT 0
18023: PUSH
18024: LD_INT 0
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: LD_INT 0
18033: PUSH
18034: LD_INT 1
18036: NEG
18037: PUSH
18038: EMPTY
18039: LIST
18040: LIST
18041: PUSH
18042: LD_INT 1
18044: PUSH
18045: LD_INT 0
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 0
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: NEG
18075: PUSH
18076: LD_INT 0
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 1
18085: NEG
18086: PUSH
18087: LD_INT 1
18089: NEG
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: LD_INT 1
18100: NEG
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 2
18108: PUSH
18109: LD_INT 0
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 2
18118: PUSH
18119: LD_INT 1
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 1
18128: NEG
18129: PUSH
18130: LD_INT 1
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 2
18139: NEG
18140: PUSH
18141: LD_INT 0
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 2
18150: NEG
18151: PUSH
18152: LD_INT 1
18154: NEG
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 2
18162: NEG
18163: PUSH
18164: LD_INT 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 3
18173: NEG
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 3
18184: NEG
18185: PUSH
18186: LD_INT 1
18188: NEG
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
18212: LD_ADDR_VAR 0 13
18216: PUSH
18217: LD_INT 0
18219: PUSH
18220: LD_INT 0
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: LD_INT 1
18232: NEG
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: PUSH
18238: LD_INT 1
18240: PUSH
18241: LD_INT 0
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: LD_INT 1
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 1
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: LD_INT 1
18270: NEG
18271: PUSH
18272: LD_INT 0
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 1
18281: NEG
18282: PUSH
18283: LD_INT 1
18285: NEG
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: LD_INT 2
18297: NEG
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PUSH
18303: LD_INT 2
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 1
18325: PUSH
18326: LD_INT 2
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: LD_INT 2
18335: NEG
18336: PUSH
18337: LD_INT 1
18339: NEG
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: NEG
18348: PUSH
18349: LD_INT 2
18351: NEG
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 2
18359: NEG
18360: PUSH
18361: LD_INT 3
18363: NEG
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 3
18371: NEG
18372: PUSH
18373: LD_INT 2
18375: NEG
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: PUSH
18381: LD_INT 3
18383: NEG
18384: PUSH
18385: LD_INT 3
18387: NEG
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
18411: LD_ADDR_VAR 0 14
18415: PUSH
18416: LD_INT 0
18418: PUSH
18419: LD_INT 0
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 0
18428: PUSH
18429: LD_INT 1
18431: NEG
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: LD_INT 0
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 0
18459: PUSH
18460: LD_INT 1
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 1
18469: NEG
18470: PUSH
18471: LD_INT 0
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 1
18480: NEG
18481: PUSH
18482: LD_INT 1
18484: NEG
18485: PUSH
18486: EMPTY
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 1
18492: NEG
18493: PUSH
18494: LD_INT 2
18496: NEG
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PUSH
18502: LD_INT 0
18504: PUSH
18505: LD_INT 2
18507: NEG
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: LD_INT 1
18518: NEG
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 1
18526: PUSH
18527: LD_INT 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 0
18536: PUSH
18537: LD_INT 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 1
18546: NEG
18547: PUSH
18548: LD_INT 1
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 1
18557: NEG
18558: PUSH
18559: LD_INT 3
18561: NEG
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 0
18569: PUSH
18570: LD_INT 3
18572: NEG
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 1
18580: PUSH
18581: LD_INT 2
18583: NEG
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
18607: LD_ADDR_VAR 0 15
18611: PUSH
18612: LD_INT 0
18614: PUSH
18615: LD_INT 0
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: PUSH
18622: LD_INT 0
18624: PUSH
18625: LD_INT 1
18627: NEG
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 1
18635: PUSH
18636: LD_INT 0
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 1
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 0
18655: PUSH
18656: LD_INT 1
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 1
18665: NEG
18666: PUSH
18667: LD_INT 0
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: LD_INT 1
18676: NEG
18677: PUSH
18678: LD_INT 1
18680: NEG
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 1
18688: PUSH
18689: LD_INT 1
18691: NEG
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: LD_INT 1
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 1
18719: NEG
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: LD_INT 2
18730: NEG
18731: PUSH
18732: LD_INT 0
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 2
18741: NEG
18742: PUSH
18743: LD_INT 1
18745: NEG
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 2
18753: PUSH
18754: LD_INT 1
18756: NEG
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: LD_INT 0
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 3
18774: PUSH
18775: LD_INT 1
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
18800: LD_ADDR_VAR 0 16
18804: PUSH
18805: LD_INT 0
18807: PUSH
18808: LD_INT 0
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 0
18817: PUSH
18818: LD_INT 1
18820: NEG
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: PUSH
18829: LD_INT 0
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 1
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 0
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 1
18858: NEG
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 1
18869: NEG
18870: PUSH
18871: LD_INT 1
18873: NEG
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 1
18881: NEG
18882: PUSH
18883: LD_INT 2
18885: NEG
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 2
18893: PUSH
18894: LD_INT 1
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 2
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 2
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PUSH
18921: LD_INT 2
18923: NEG
18924: PUSH
18925: LD_INT 1
18927: NEG
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 2
18935: NEG
18936: PUSH
18937: LD_INT 2
18939: NEG
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: LD_INT 3
18947: PUSH
18948: LD_INT 2
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 3
18957: PUSH
18958: LD_INT 3
18960: PUSH
18961: EMPTY
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 2
18967: PUSH
18968: LD_INT 3
18970: PUSH
18971: EMPTY
18972: LIST
18973: LIST
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18993: LD_ADDR_VAR 0 17
18997: PUSH
18998: LD_INT 0
19000: PUSH
19001: LD_INT 0
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 0
19010: PUSH
19011: LD_INT 1
19013: NEG
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 1
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: LD_INT 1
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: LD_INT 0
19041: PUSH
19042: LD_INT 1
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 1
19051: NEG
19052: PUSH
19053: LD_INT 0
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: LD_INT 1
19062: NEG
19063: PUSH
19064: LD_INT 1
19066: NEG
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 1
19074: NEG
19075: PUSH
19076: LD_INT 2
19078: NEG
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: LD_INT 0
19086: PUSH
19087: LD_INT 2
19089: NEG
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 1
19100: NEG
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 2
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 2
19118: PUSH
19119: LD_INT 1
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: LD_INT 2
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 0
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: NEG
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: NEG
19170: PUSH
19171: LD_INT 0
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 2
19180: NEG
19181: PUSH
19182: LD_INT 1
19184: NEG
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 2
19192: NEG
19193: PUSH
19194: LD_INT 2
19196: NEG
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19223: LD_ADDR_VAR 0 18
19227: PUSH
19228: LD_INT 0
19230: PUSH
19231: LD_INT 0
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 0
19240: PUSH
19241: LD_INT 1
19243: NEG
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 1
19251: PUSH
19252: LD_INT 0
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 1
19261: PUSH
19262: LD_INT 1
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 0
19271: PUSH
19272: LD_INT 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 1
19281: NEG
19282: PUSH
19283: LD_INT 0
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 1
19292: NEG
19293: PUSH
19294: LD_INT 1
19296: NEG
19297: PUSH
19298: EMPTY
19299: LIST
19300: LIST
19301: PUSH
19302: LD_INT 1
19304: NEG
19305: PUSH
19306: LD_INT 2
19308: NEG
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 0
19316: PUSH
19317: LD_INT 2
19319: NEG
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 1
19327: PUSH
19328: LD_INT 1
19330: NEG
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 2
19338: PUSH
19339: LD_INT 0
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 2
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 2
19358: PUSH
19359: LD_INT 2
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 1
19368: PUSH
19369: LD_INT 2
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 0
19378: PUSH
19379: LD_INT 2
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: LD_INT 1
19388: NEG
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 2
19399: NEG
19400: PUSH
19401: LD_INT 0
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 2
19410: NEG
19411: PUSH
19412: LD_INT 1
19414: NEG
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 2
19422: NEG
19423: PUSH
19424: LD_INT 2
19426: NEG
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19453: LD_ADDR_VAR 0 19
19457: PUSH
19458: LD_INT 0
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: LD_INT 0
19470: PUSH
19471: LD_INT 1
19473: NEG
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: LD_INT 0
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: LD_INT 1
19491: PUSH
19492: LD_INT 1
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PUSH
19499: LD_INT 0
19501: PUSH
19502: LD_INT 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 1
19511: NEG
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: NEG
19523: PUSH
19524: LD_INT 1
19526: NEG
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 1
19534: NEG
19535: PUSH
19536: LD_INT 2
19538: NEG
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 0
19546: PUSH
19547: LD_INT 2
19549: NEG
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: LD_INT 1
19560: NEG
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 2
19568: PUSH
19569: LD_INT 0
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: LD_INT 1
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: LD_INT 2
19588: PUSH
19589: LD_INT 2
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 1
19598: PUSH
19599: LD_INT 2
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 2
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 1
19618: NEG
19619: PUSH
19620: LD_INT 1
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 2
19629: NEG
19630: PUSH
19631: LD_INT 0
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 2
19640: NEG
19641: PUSH
19642: LD_INT 1
19644: NEG
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PUSH
19650: LD_INT 2
19652: NEG
19653: PUSH
19654: LD_INT 2
19656: NEG
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: LIST
19678: LIST
19679: LIST
19680: LIST
19681: LIST
19682: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19683: LD_ADDR_VAR 0 20
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 0
19700: PUSH
19701: LD_INT 1
19703: NEG
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: LD_INT 1
19711: PUSH
19712: LD_INT 0
19714: PUSH
19715: EMPTY
19716: LIST
19717: LIST
19718: PUSH
19719: LD_INT 1
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 0
19731: PUSH
19732: LD_INT 1
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 1
19741: NEG
19742: PUSH
19743: LD_INT 0
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: NEG
19753: PUSH
19754: LD_INT 1
19756: NEG
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 1
19764: NEG
19765: PUSH
19766: LD_INT 2
19768: NEG
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 0
19776: PUSH
19777: LD_INT 2
19779: NEG
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PUSH
19788: LD_INT 1
19790: NEG
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: LD_INT 0
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 2
19808: PUSH
19809: LD_INT 1
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 1
19828: PUSH
19829: LD_INT 2
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 0
19838: PUSH
19839: LD_INT 2
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: LD_INT 1
19848: NEG
19849: PUSH
19850: LD_INT 1
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: LD_INT 2
19859: NEG
19860: PUSH
19861: LD_INT 0
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: NEG
19871: PUSH
19872: LD_INT 1
19874: NEG
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PUSH
19880: LD_INT 2
19882: NEG
19883: PUSH
19884: LD_INT 2
19886: NEG
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: LIST
19912: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19913: LD_ADDR_VAR 0 21
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: LD_INT 0
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: LD_INT 0
19930: PUSH
19931: LD_INT 1
19933: NEG
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: LD_INT 0
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: LD_INT 1
19951: PUSH
19952: LD_INT 1
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: PUSH
19959: LD_INT 0
19961: PUSH
19962: LD_INT 1
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 1
19971: NEG
19972: PUSH
19973: LD_INT 0
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: NEG
19983: PUSH
19984: LD_INT 1
19986: NEG
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 1
19994: NEG
19995: PUSH
19996: LD_INT 2
19998: NEG
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PUSH
20004: LD_INT 0
20006: PUSH
20007: LD_INT 2
20009: NEG
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 1
20020: NEG
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 2
20028: PUSH
20029: LD_INT 0
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 2
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 2
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 1
20058: PUSH
20059: LD_INT 2
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PUSH
20066: LD_INT 0
20068: PUSH
20069: LD_INT 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 1
20078: NEG
20079: PUSH
20080: LD_INT 1
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 2
20089: NEG
20090: PUSH
20091: LD_INT 0
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 2
20100: NEG
20101: PUSH
20102: LD_INT 1
20104: NEG
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: PUSH
20110: LD_INT 2
20112: NEG
20113: PUSH
20114: LD_INT 2
20116: NEG
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20143: LD_ADDR_VAR 0 22
20147: PUSH
20148: LD_INT 0
20150: PUSH
20151: LD_INT 0
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: LD_INT 1
20163: NEG
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 1
20171: PUSH
20172: LD_INT 0
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 1
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: LD_INT 0
20191: PUSH
20192: LD_INT 1
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 1
20201: NEG
20202: PUSH
20203: LD_INT 0
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: NEG
20213: PUSH
20214: LD_INT 1
20216: NEG
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 1
20224: NEG
20225: PUSH
20226: LD_INT 2
20228: NEG
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 0
20236: PUSH
20237: LD_INT 2
20239: NEG
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 1
20247: PUSH
20248: LD_INT 1
20250: NEG
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 2
20258: PUSH
20259: LD_INT 0
20261: PUSH
20262: EMPTY
20263: LIST
20264: LIST
20265: PUSH
20266: LD_INT 2
20268: PUSH
20269: LD_INT 1
20271: PUSH
20272: EMPTY
20273: LIST
20274: LIST
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 2
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 1
20288: PUSH
20289: LD_INT 2
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 0
20298: PUSH
20299: LD_INT 2
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: NEG
20309: PUSH
20310: LD_INT 1
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 2
20319: NEG
20320: PUSH
20321: LD_INT 0
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 2
20330: NEG
20331: PUSH
20332: LD_INT 1
20334: NEG
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: LD_INT 2
20342: NEG
20343: PUSH
20344: LD_INT 2
20346: NEG
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
20373: LD_ADDR_VAR 0 23
20377: PUSH
20378: LD_INT 0
20380: PUSH
20381: LD_INT 0
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: LD_INT 0
20390: PUSH
20391: LD_INT 1
20393: NEG
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: PUSH
20399: LD_INT 1
20401: PUSH
20402: LD_INT 0
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 0
20421: PUSH
20422: LD_INT 1
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 1
20431: NEG
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: NEG
20443: PUSH
20444: LD_INT 1
20446: NEG
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 1
20454: NEG
20455: PUSH
20456: LD_INT 2
20458: NEG
20459: PUSH
20460: EMPTY
20461: LIST
20462: LIST
20463: PUSH
20464: LD_INT 0
20466: PUSH
20467: LD_INT 2
20469: NEG
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 1
20477: PUSH
20478: LD_INT 1
20480: NEG
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 2
20488: PUSH
20489: LD_INT 0
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: LD_INT 2
20498: PUSH
20499: LD_INT 1
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: PUSH
20506: LD_INT 2
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 1
20518: PUSH
20519: LD_INT 2
20521: PUSH
20522: EMPTY
20523: LIST
20524: LIST
20525: PUSH
20526: LD_INT 0
20528: PUSH
20529: LD_INT 2
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 1
20538: NEG
20539: PUSH
20540: LD_INT 1
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: LD_INT 2
20549: NEG
20550: PUSH
20551: LD_INT 0
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 2
20560: NEG
20561: PUSH
20562: LD_INT 1
20564: NEG
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 2
20572: NEG
20573: PUSH
20574: LD_INT 2
20576: NEG
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PUSH
20582: LD_INT 2
20584: NEG
20585: PUSH
20586: LD_INT 3
20588: NEG
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: NEG
20597: PUSH
20598: LD_INT 3
20600: NEG
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PUSH
20606: LD_INT 1
20608: PUSH
20609: LD_INT 2
20611: NEG
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
20653: LD_ADDR_VAR 0 24
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: LD_INT 0
20663: PUSH
20664: EMPTY
20665: LIST
20666: LIST
20667: PUSH
20668: LD_INT 0
20670: PUSH
20671: LD_INT 1
20673: NEG
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: LD_INT 1
20681: PUSH
20682: LD_INT 0
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 1
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: LD_INT 0
20701: PUSH
20702: LD_INT 1
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 1
20711: NEG
20712: PUSH
20713: LD_INT 0
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: LD_INT 1
20722: NEG
20723: PUSH
20724: LD_INT 1
20726: NEG
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: LD_INT 1
20734: NEG
20735: PUSH
20736: LD_INT 2
20738: NEG
20739: PUSH
20740: EMPTY
20741: LIST
20742: LIST
20743: PUSH
20744: LD_INT 0
20746: PUSH
20747: LD_INT 2
20749: NEG
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PUSH
20755: LD_INT 1
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 2
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 2
20778: PUSH
20779: LD_INT 1
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 2
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: PUSH
20796: LD_INT 1
20798: PUSH
20799: LD_INT 2
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 2
20829: NEG
20830: PUSH
20831: LD_INT 0
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: PUSH
20838: LD_INT 2
20840: NEG
20841: PUSH
20842: LD_INT 1
20844: NEG
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: LD_INT 2
20852: NEG
20853: PUSH
20854: LD_INT 2
20856: NEG
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: LD_INT 2
20867: NEG
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 1
20878: NEG
20879: PUSH
20880: EMPTY
20881: LIST
20882: LIST
20883: PUSH
20884: LD_INT 3
20886: PUSH
20887: LD_INT 1
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 3
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: LIST
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: LIST
20927: LIST
20928: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
20929: LD_ADDR_VAR 0 25
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: LD_INT 0
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 0
20946: PUSH
20947: LD_INT 1
20949: NEG
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: PUSH
20958: LD_INT 0
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: LD_INT 1
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: EMPTY
20972: LIST
20973: LIST
20974: PUSH
20975: LD_INT 0
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 1
20987: NEG
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 1
20998: NEG
20999: PUSH
21000: LD_INT 1
21002: NEG
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 1
21010: NEG
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 2
21025: NEG
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 1
21033: PUSH
21034: LD_INT 1
21036: NEG
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 2
21044: PUSH
21045: LD_INT 0
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: LD_INT 1
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: LD_INT 2
21067: PUSH
21068: EMPTY
21069: LIST
21070: LIST
21071: PUSH
21072: LD_INT 1
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: EMPTY
21079: LIST
21080: LIST
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 2
21087: PUSH
21088: EMPTY
21089: LIST
21090: LIST
21091: PUSH
21092: LD_INT 1
21094: NEG
21095: PUSH
21096: LD_INT 1
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: PUSH
21103: LD_INT 2
21105: NEG
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 2
21116: NEG
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 2
21128: NEG
21129: PUSH
21130: LD_INT 2
21132: NEG
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: LD_INT 3
21163: PUSH
21164: EMPTY
21165: LIST
21166: LIST
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: LD_INT 3
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
21203: LD_ADDR_VAR 0 26
21207: PUSH
21208: LD_INT 0
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 0
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: LD_INT 0
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PUSH
21239: LD_INT 1
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: PUSH
21249: LD_INT 0
21251: PUSH
21252: LD_INT 1
21254: PUSH
21255: EMPTY
21256: LIST
21257: LIST
21258: PUSH
21259: LD_INT 1
21261: NEG
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 1
21272: NEG
21273: PUSH
21274: LD_INT 1
21276: NEG
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: LD_INT 2
21288: NEG
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: LD_INT 2
21299: NEG
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: LD_INT 1
21310: NEG
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: PUSH
21316: LD_INT 2
21318: PUSH
21319: LD_INT 0
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: PUSH
21326: LD_INT 2
21328: PUSH
21329: LD_INT 1
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: PUSH
21336: LD_INT 2
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 2
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: PUSH
21356: LD_INT 0
21358: PUSH
21359: LD_INT 2
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: LD_INT 1
21368: NEG
21369: PUSH
21370: LD_INT 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 2
21379: NEG
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 2
21390: NEG
21391: PUSH
21392: LD_INT 1
21394: NEG
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 2
21402: NEG
21403: PUSH
21404: LD_INT 2
21406: NEG
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: LD_INT 2
21414: PUSH
21415: LD_INT 3
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 1
21424: PUSH
21425: LD_INT 3
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 2
21445: NEG
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21479: LD_ADDR_VAR 0 27
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: NEG
21561: PUSH
21562: LD_INT 2
21564: NEG
21565: PUSH
21566: EMPTY
21567: LIST
21568: LIST
21569: PUSH
21570: LD_INT 0
21572: PUSH
21573: LD_INT 2
21575: NEG
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 1
21583: PUSH
21584: LD_INT 1
21586: NEG
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 2
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: PUSH
21605: LD_INT 1
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 2
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: LD_INT 2
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: LD_INT 2
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 1
21644: NEG
21645: PUSH
21646: LD_INT 1
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 2
21655: NEG
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: PUSH
21664: LD_INT 2
21666: NEG
21667: PUSH
21668: LD_INT 1
21670: NEG
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 2
21678: NEG
21679: PUSH
21680: LD_INT 2
21682: NEG
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: NEG
21691: PUSH
21692: LD_INT 2
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 2
21701: NEG
21702: PUSH
21703: LD_INT 1
21705: PUSH
21706: EMPTY
21707: LIST
21708: LIST
21709: PUSH
21710: LD_INT 3
21712: NEG
21713: PUSH
21714: LD_INT 1
21716: NEG
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 3
21724: NEG
21725: PUSH
21726: LD_INT 2
21728: NEG
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
21759: LD_ADDR_VAR 0 28
21763: PUSH
21764: LD_INT 0
21766: PUSH
21767: LD_INT 0
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 0
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 1
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: LD_INT 1
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 1
21817: NEG
21818: PUSH
21819: LD_INT 0
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: NEG
21829: PUSH
21830: LD_INT 1
21832: NEG
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PUSH
21838: LD_INT 1
21840: NEG
21841: PUSH
21842: LD_INT 2
21844: NEG
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 2
21855: NEG
21856: PUSH
21857: EMPTY
21858: LIST
21859: LIST
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 0
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 2
21884: PUSH
21885: LD_INT 1
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: LD_INT 2
21894: PUSH
21895: LD_INT 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 0
21914: PUSH
21915: LD_INT 2
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 2
21946: NEG
21947: PUSH
21948: LD_INT 1
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 2
21958: NEG
21959: PUSH
21960: LD_INT 2
21962: NEG
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 2
21970: NEG
21971: PUSH
21972: LD_INT 3
21974: NEG
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 3
21986: NEG
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 3
21994: NEG
21995: PUSH
21996: LD_INT 1
21998: NEG
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 3
22006: NEG
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22041: LD_ADDR_VAR 0 29
22045: PUSH
22046: LD_INT 0
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: LD_INT 1
22061: NEG
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: LD_INT 1
22069: PUSH
22070: LD_INT 0
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: LD_INT 1
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 1
22099: NEG
22100: PUSH
22101: LD_INT 0
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: LD_INT 1
22122: NEG
22123: PUSH
22124: LD_INT 2
22126: NEG
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 0
22134: PUSH
22135: LD_INT 2
22137: NEG
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PUSH
22143: LD_INT 1
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 2
22156: PUSH
22157: LD_INT 0
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PUSH
22164: LD_INT 2
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: PUSH
22177: LD_INT 2
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: LD_INT 0
22186: PUSH
22187: LD_INT 2
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: NEG
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 2
22219: NEG
22220: PUSH
22221: LD_INT 2
22223: NEG
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 2
22231: NEG
22232: PUSH
22233: LD_INT 3
22235: NEG
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: LD_INT 1
22246: NEG
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 3
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: LD_INT 3
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 1
22274: NEG
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 3
22285: NEG
22286: PUSH
22287: LD_INT 2
22289: NEG
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22320: LD_ADDR_VAR 0 30
22324: PUSH
22325: LD_INT 0
22327: PUSH
22328: LD_INT 0
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 1
22340: NEG
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: LD_INT 0
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 1
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 0
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: LD_INT 0
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 1
22389: NEG
22390: PUSH
22391: LD_INT 1
22393: NEG
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 1
22401: NEG
22402: PUSH
22403: LD_INT 2
22405: NEG
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: LD_INT 2
22416: NEG
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: LD_INT 1
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: LD_INT 0
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 2
22445: PUSH
22446: LD_INT 1
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: LD_INT 2
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 1
22465: PUSH
22466: LD_INT 2
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: PUSH
22473: LD_INT 1
22475: NEG
22476: PUSH
22477: LD_INT 1
22479: PUSH
22480: EMPTY
22481: LIST
22482: LIST
22483: PUSH
22484: LD_INT 2
22486: NEG
22487: PUSH
22488: LD_INT 0
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 2
22497: NEG
22498: PUSH
22499: LD_INT 1
22501: NEG
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: NEG
22510: PUSH
22511: LD_INT 3
22513: NEG
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 1
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: LD_INT 2
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: NEG
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 3
22563: NEG
22564: PUSH
22565: LD_INT 1
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
22598: LD_ADDR_VAR 0 31
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 0
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 0
22615: PUSH
22616: LD_INT 1
22618: NEG
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 0
22646: PUSH
22647: LD_INT 1
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 1
22656: NEG
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: LD_INT 1
22667: NEG
22668: PUSH
22669: LD_INT 1
22671: NEG
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 1
22679: NEG
22680: PUSH
22681: LD_INT 2
22683: NEG
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: PUSH
22692: LD_INT 1
22694: NEG
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 2
22702: PUSH
22703: LD_INT 0
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 1
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 2
22722: PUSH
22723: LD_INT 2
22725: PUSH
22726: EMPTY
22727: LIST
22728: LIST
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: LD_INT 2
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 0
22742: PUSH
22743: LD_INT 2
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 2
22763: NEG
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: NEG
22776: PUSH
22777: LD_INT 2
22779: NEG
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 2
22787: NEG
22788: PUSH
22789: LD_INT 3
22791: NEG
22792: PUSH
22793: EMPTY
22794: LIST
22795: LIST
22796: PUSH
22797: LD_INT 2
22799: PUSH
22800: LD_INT 1
22802: NEG
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 3
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 1
22820: PUSH
22821: LD_INT 3
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 1
22830: NEG
22831: PUSH
22832: LD_INT 2
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: PUSH
22839: LD_INT 3
22841: NEG
22842: PUSH
22843: LD_INT 2
22845: NEG
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: LIST
22855: LIST
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: LIST
22866: LIST
22867: LIST
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
22876: LD_ADDR_VAR 0 32
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 0
22893: PUSH
22894: LD_INT 1
22896: NEG
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 1
22904: PUSH
22905: LD_INT 0
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 1
22914: PUSH
22915: LD_INT 1
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 0
22924: PUSH
22925: LD_INT 1
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 1
22934: NEG
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 1
22945: NEG
22946: PUSH
22947: LD_INT 1
22949: NEG
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 1
22957: NEG
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 1
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: LD_INT 1
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 2
23001: PUSH
23002: LD_INT 2
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 2
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 0
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 1
23031: NEG
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 2
23042: NEG
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 2
23053: NEG
23054: PUSH
23055: LD_INT 1
23057: NEG
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 1
23065: NEG
23066: PUSH
23067: LD_INT 3
23069: NEG
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: NEG
23109: PUSH
23110: LD_INT 1
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 3
23119: NEG
23120: PUSH
23121: LD_INT 1
23123: NEG
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
23154: LD_ADDR_VAR 0 33
23158: PUSH
23159: LD_INT 0
23161: PUSH
23162: LD_INT 0
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: LD_INT 0
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 1
23192: PUSH
23193: LD_INT 1
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: LD_INT 0
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 1
23223: NEG
23224: PUSH
23225: LD_INT 1
23227: NEG
23228: PUSH
23229: EMPTY
23230: LIST
23231: LIST
23232: PUSH
23233: LD_INT 1
23235: NEG
23236: PUSH
23237: LD_INT 2
23239: NEG
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 1
23250: NEG
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: LD_INT 1
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 0
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 1
23298: NEG
23299: PUSH
23300: LD_INT 1
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: LD_INT 0
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: LD_INT 2
23320: NEG
23321: PUSH
23322: LD_INT 1
23324: NEG
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: LD_INT 2
23336: NEG
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 2
23344: NEG
23345: PUSH
23346: LD_INT 3
23348: NEG
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: LD_INT 2
23356: PUSH
23357: LD_INT 1
23359: NEG
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 3
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 1
23377: PUSH
23378: LD_INT 3
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 1
23387: NEG
23388: PUSH
23389: LD_INT 2
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: PUSH
23396: LD_INT 3
23398: NEG
23399: PUSH
23400: LD_INT 2
23402: NEG
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23433: LD_ADDR_VAR 0 34
23437: PUSH
23438: LD_INT 0
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: LD_INT 1
23453: NEG
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 1
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 1
23491: NEG
23492: PUSH
23493: LD_INT 0
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: LD_INT 1
23502: NEG
23503: PUSH
23504: LD_INT 1
23506: NEG
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: NEG
23515: PUSH
23516: LD_INT 2
23518: NEG
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 0
23526: PUSH
23527: LD_INT 2
23529: NEG
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 1
23537: PUSH
23538: LD_INT 1
23540: NEG
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: LD_INT 2
23548: PUSH
23549: LD_INT 1
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 2
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 1
23568: PUSH
23569: LD_INT 2
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: LD_INT 2
23589: NEG
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PUSH
23598: LD_INT 2
23600: NEG
23601: PUSH
23602: LD_INT 1
23604: NEG
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 2
23612: NEG
23613: PUSH
23614: LD_INT 2
23616: NEG
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 1
23624: NEG
23625: PUSH
23626: LD_INT 3
23628: NEG
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: LD_INT 2
23639: NEG
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 3
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 2
23657: PUSH
23658: LD_INT 3
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 2
23667: NEG
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 3
23678: NEG
23679: PUSH
23680: LD_INT 1
23682: NEG
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: LIST
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
23713: LD_ADDR_VAR 0 35
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 0
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 0
23730: PUSH
23731: LD_INT 1
23733: NEG
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: LD_INT 0
23744: PUSH
23745: EMPTY
23746: LIST
23747: LIST
23748: PUSH
23749: LD_INT 1
23751: PUSH
23752: LD_INT 1
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 0
23761: PUSH
23762: LD_INT 1
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: LD_INT 1
23771: NEG
23772: PUSH
23773: LD_INT 0
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PUSH
23780: LD_INT 1
23782: NEG
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 2
23804: NEG
23805: PUSH
23806: LD_INT 1
23808: NEG
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
23825: LD_ADDR_VAR 0 36
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 0
23842: PUSH
23843: LD_INT 1
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: PUSH
23854: LD_INT 0
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 1
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 0
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 1
23883: NEG
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 1
23894: NEG
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: EMPTY
23923: LIST
23924: LIST
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
23937: LD_ADDR_VAR 0 37
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: PUSH
24019: LD_INT 1
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: LD_INT 1
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
24049: LD_ADDR_VAR 0 38
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: LD_INT 0
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 0
24066: PUSH
24067: LD_INT 1
24069: NEG
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 1
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 1
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 0
24097: PUSH
24098: LD_INT 1
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: LD_INT 0
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 1
24118: NEG
24119: PUSH
24120: LD_INT 1
24122: NEG
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: PUSH
24128: LD_INT 2
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
24161: LD_ADDR_VAR 0 39
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 0
24178: PUSH
24179: LD_INT 1
24181: NEG
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: PUSH
24190: LD_INT 0
24192: PUSH
24193: EMPTY
24194: LIST
24195: LIST
24196: PUSH
24197: LD_INT 1
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: LD_INT 1
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 0
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 1
24230: NEG
24231: PUSH
24232: LD_INT 1
24234: NEG
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 1
24242: NEG
24243: PUSH
24244: LD_INT 2
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 1
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: LIST
24270: LIST
24271: LIST
24272: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
24273: LD_ADDR_VAR 0 40
24277: PUSH
24278: LD_INT 0
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 0
24290: PUSH
24291: LD_INT 1
24293: NEG
24294: PUSH
24295: EMPTY
24296: LIST
24297: LIST
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 0
24321: PUSH
24322: LD_INT 1
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 1
24331: NEG
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: NEG
24343: PUSH
24344: LD_INT 1
24346: NEG
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 1
24354: PUSH
24355: LD_INT 1
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 1
24365: NEG
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24385: LD_ADDR_VAR 0 41
24389: PUSH
24390: LD_INT 0
24392: PUSH
24393: LD_INT 0
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: PUSH
24400: LD_INT 0
24402: PUSH
24403: LD_INT 1
24405: NEG
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 1
24413: PUSH
24414: LD_INT 0
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 1
24423: PUSH
24424: LD_INT 1
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 1
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 1
24443: NEG
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: NEG
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 1
24466: NEG
24467: PUSH
24468: LD_INT 2
24470: NEG
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: PUSH
24476: LD_INT 1
24478: PUSH
24479: LD_INT 1
24481: NEG
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 2
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 1
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: NEG
24530: PUSH
24531: LD_INT 1
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 2
24540: NEG
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: LD_INT 1
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 2
24563: NEG
24564: PUSH
24565: LD_INT 2
24567: NEG
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PUSH
24573: LD_INT 2
24575: NEG
24576: PUSH
24577: LD_INT 3
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 1
24590: NEG
24591: PUSH
24592: EMPTY
24593: LIST
24594: LIST
24595: PUSH
24596: LD_INT 3
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 3
24608: PUSH
24609: LD_INT 1
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 3
24618: PUSH
24619: LD_INT 2
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 3
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 3
24659: NEG
24660: PUSH
24661: LD_INT 0
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 3
24670: NEG
24671: PUSH
24672: LD_INT 1
24674: NEG
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 3
24682: NEG
24683: PUSH
24684: LD_INT 2
24686: NEG
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 3
24694: NEG
24695: PUSH
24696: LD_INT 3
24698: NEG
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24735: LD_ADDR_VAR 0 42
24739: PUSH
24740: LD_INT 0
24742: PUSH
24743: LD_INT 0
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 0
24752: PUSH
24753: LD_INT 1
24755: NEG
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 1
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: PUSH
24771: LD_INT 1
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 0
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: NEG
24794: PUSH
24795: LD_INT 0
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: PUSH
24814: LD_INT 1
24816: NEG
24817: PUSH
24818: LD_INT 2
24820: NEG
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 2
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: LD_INT 1
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 2
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 1
24890: NEG
24891: PUSH
24892: LD_INT 1
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 2
24901: NEG
24902: PUSH
24903: LD_INT 1
24905: NEG
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 2
24913: NEG
24914: PUSH
24915: LD_INT 2
24917: NEG
24918: PUSH
24919: EMPTY
24920: LIST
24921: LIST
24922: PUSH
24923: LD_INT 2
24925: NEG
24926: PUSH
24927: LD_INT 3
24929: NEG
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: LD_INT 3
24941: NEG
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 3
24952: NEG
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 1
24960: PUSH
24961: LD_INT 2
24963: NEG
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 3
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 3
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PUSH
24989: LD_INT 2
24991: PUSH
24992: LD_INT 3
24994: PUSH
24995: EMPTY
24996: LIST
24997: LIST
24998: PUSH
24999: LD_INT 1
25001: PUSH
25002: LD_INT 3
25004: PUSH
25005: EMPTY
25006: LIST
25007: LIST
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: LD_INT 3
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 1
25021: NEG
25022: PUSH
25023: LD_INT 2
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: LD_INT 3
25032: NEG
25033: PUSH
25034: LD_INT 2
25036: NEG
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 3
25044: NEG
25045: PUSH
25046: LD_INT 3
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25085: LD_ADDR_VAR 0 43
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 1
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 0
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 1
25123: PUSH
25124: LD_INT 1
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 0
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 1
25143: NEG
25144: PUSH
25145: LD_INT 0
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: NEG
25155: PUSH
25156: LD_INT 1
25158: NEG
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: LD_INT 1
25166: NEG
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 0
25178: PUSH
25179: LD_INT 2
25181: NEG
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 1
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 2
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 2
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 2
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 0
25230: PUSH
25231: LD_INT 2
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 1
25240: NEG
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 2
25251: NEG
25252: PUSH
25253: LD_INT 0
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: LD_INT 2
25262: NEG
25263: PUSH
25264: LD_INT 1
25266: NEG
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: PUSH
25276: LD_INT 3
25278: NEG
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 0
25286: PUSH
25287: LD_INT 3
25289: NEG
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: LD_INT 2
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: LD_INT 1
25311: NEG
25312: PUSH
25313: EMPTY
25314: LIST
25315: LIST
25316: PUSH
25317: LD_INT 3
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 3
25329: PUSH
25330: LD_INT 1
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 1
25339: PUSH
25340: LD_INT 3
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 0
25349: PUSH
25350: LD_INT 3
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 2
25370: NEG
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 3
25381: NEG
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 3
25392: NEG
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25433: LD_ADDR_VAR 0 44
25437: PUSH
25438: LD_INT 0
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 0
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: LD_INT 0
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: NEG
25492: PUSH
25493: LD_INT 0
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 1
25502: NEG
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 2
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: LD_INT 2
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: LD_INT 2
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 1
25577: NEG
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 2
25588: NEG
25589: PUSH
25590: LD_INT 0
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 2
25599: NEG
25600: PUSH
25601: LD_INT 1
25603: NEG
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 2
25611: NEG
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: LD_INT 3
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: PUSH
25636: LD_INT 1
25638: NEG
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 3
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 3
25666: PUSH
25667: LD_INT 2
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 3
25676: PUSH
25677: LD_INT 3
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 3
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: NEG
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: LD_INT 3
25707: NEG
25708: PUSH
25709: LD_INT 0
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 3
25718: NEG
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 3
25730: NEG
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 3
25742: NEG
25743: PUSH
25744: LD_INT 3
25746: NEG
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: LIST
25759: LIST
25760: LIST
25761: LIST
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25783: LD_ADDR_VAR 0 45
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: LD_INT 0
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 0
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 0
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: LD_INT 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 1
25841: NEG
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 1
25864: NEG
25865: PUSH
25866: LD_INT 2
25868: NEG
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 0
25876: PUSH
25877: LD_INT 2
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 2
25908: PUSH
25909: LD_INT 2
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: LD_INT 2
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: LD_INT 0
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 1
25938: NEG
25939: PUSH
25940: LD_INT 1
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 2
25949: NEG
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 2
25961: NEG
25962: PUSH
25963: LD_INT 2
25965: NEG
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: NEG
25974: PUSH
25975: LD_INT 3
25977: NEG
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 1
25985: NEG
25986: PUSH
25987: LD_INT 3
25989: NEG
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 0
25997: PUSH
25998: LD_INT 3
26000: NEG
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 3
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 2
26039: PUSH
26040: LD_INT 3
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: LD_INT 3
26052: PUSH
26053: EMPTY
26054: LIST
26055: LIST
26056: PUSH
26057: LD_INT 0
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 1
26069: NEG
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: EMPTY
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 3
26080: NEG
26081: PUSH
26082: LD_INT 2
26084: NEG
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 3
26092: NEG
26093: PUSH
26094: LD_INT 3
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
26133: LD_ADDR_VAR 0 46
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 0
26150: PUSH
26151: LD_INT 1
26153: NEG
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 1
26161: PUSH
26162: LD_INT 0
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: PUSH
26169: LD_INT 1
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: LD_INT 1
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: PUSH
26189: LD_INT 1
26191: NEG
26192: PUSH
26193: LD_INT 0
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: LD_INT 1
26206: NEG
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 2
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 0
26226: PUSH
26227: LD_INT 2
26229: NEG
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: PUSH
26238: LD_INT 1
26240: NEG
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: LD_INT 2
26258: PUSH
26259: LD_INT 1
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 2
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 0
26278: PUSH
26279: LD_INT 2
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 1
26288: NEG
26289: PUSH
26290: LD_INT 1
26292: PUSH
26293: EMPTY
26294: LIST
26295: LIST
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: LD_INT 0
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 2
26310: NEG
26311: PUSH
26312: LD_INT 1
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 1
26322: NEG
26323: PUSH
26324: LD_INT 3
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 0
26334: PUSH
26335: LD_INT 3
26337: NEG
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PUSH
26343: LD_INT 1
26345: PUSH
26346: LD_INT 2
26348: NEG
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: LD_INT 1
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 3
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: LD_INT 1
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: PUSH
26385: LD_INT 1
26387: PUSH
26388: LD_INT 3
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: PUSH
26395: LD_INT 0
26397: PUSH
26398: LD_INT 3
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 1
26407: NEG
26408: PUSH
26409: LD_INT 2
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 2
26418: NEG
26419: PUSH
26420: LD_INT 1
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: LD_INT 3
26429: NEG
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 3
26440: NEG
26441: PUSH
26442: LD_INT 1
26444: NEG
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: LIST
26454: LIST
26455: LIST
26456: LIST
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: LIST
26479: LIST
26480: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26481: LD_ADDR_VAR 0 47
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 0
26498: PUSH
26499: LD_INT 1
26501: NEG
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: LD_INT 1
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 0
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 1
26539: NEG
26540: PUSH
26541: LD_INT 0
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 1
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 1
26562: NEG
26563: PUSH
26564: LD_INT 2
26566: NEG
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 0
26574: PUSH
26575: LD_INT 2
26577: NEG
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 1
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: NEG
26609: PUSH
26610: LD_INT 2
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
26632: LD_ADDR_VAR 0 48
26636: PUSH
26637: LD_INT 0
26639: PUSH
26640: LD_INT 0
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 0
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 1
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 1
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: NEG
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: LD_INT 1
26705: NEG
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: PUSH
26711: LD_INT 1
26713: NEG
26714: PUSH
26715: LD_INT 2
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 2
26728: NEG
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 2
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 2
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
26779: LD_ADDR_VAR 0 49
26783: PUSH
26784: LD_INT 0
26786: PUSH
26787: LD_INT 0
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 1
26807: PUSH
26808: LD_INT 0
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 0
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 1
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: LD_INT 1
26863: NEG
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 2
26871: PUSH
26872: LD_INT 0
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 2
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: PUSH
26902: LD_INT 2
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
26923: LD_ADDR_VAR 0 50
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 0
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: LD_INT 1
26943: NEG
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: PUSH
26952: LD_INT 0
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 2
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: LD_INT 2
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: PUSH
27032: LD_INT 0
27034: PUSH
27035: LD_INT 2
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
27067: LD_ADDR_VAR 0 51
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 0
27084: PUSH
27085: LD_INT 1
27087: NEG
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: PUSH
27093: LD_INT 1
27095: PUSH
27096: LD_INT 0
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 1
27105: PUSH
27106: LD_INT 1
27108: PUSH
27109: EMPTY
27110: LIST
27111: LIST
27112: PUSH
27113: LD_INT 0
27115: PUSH
27116: LD_INT 1
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: NEG
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 1
27148: PUSH
27149: LD_INT 2
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 2
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: LD_INT 1
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: LD_INT 0
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: PUSH
27188: LD_INT 2
27190: NEG
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27214: LD_ADDR_VAR 0 52
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: LD_INT 0
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 0
27231: PUSH
27232: LD_INT 1
27234: NEG
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 1
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: LD_INT 1
27252: PUSH
27253: LD_INT 1
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PUSH
27260: LD_INT 0
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PUSH
27270: LD_INT 1
27272: NEG
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: EMPTY
27278: LIST
27279: LIST
27280: PUSH
27281: LD_INT 1
27283: NEG
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: NEG
27308: PUSH
27309: LD_INT 1
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 2
27318: NEG
27319: PUSH
27320: LD_INT 0
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PUSH
27327: LD_INT 2
27329: NEG
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: NEG
27342: PUSH
27343: LD_INT 2
27345: NEG
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27365: LD_ADDR_VAR 0 53
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 1
27385: NEG
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 0
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 0
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 1
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: NEG
27447: PUSH
27448: LD_INT 2
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: LD_INT 2
27461: NEG
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: PUSH
27470: LD_INT 1
27472: NEG
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 1
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 1
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 1
27530: NEG
27531: PUSH
27532: LD_INT 1
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 0
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: LD_INT 1
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: LD_INT 2
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27595: LD_ADDR_VAR 0 54
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PUSH
27610: LD_INT 0
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 0
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 1
27633: PUSH
27634: LD_INT 1
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: LD_INT 1
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 0
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 1
27664: NEG
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: LD_INT 2
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: LD_INT 2
27691: NEG
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: LD_INT 1
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: LD_INT 2
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: PUSH
27738: LD_INT 1
27740: PUSH
27741: LD_INT 2
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 2
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: NEG
27783: PUSH
27784: LD_INT 1
27786: NEG
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 2
27794: NEG
27795: PUSH
27796: LD_INT 2
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: LIST
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27825: LD_ADDR_VAR 0 55
27829: PUSH
27830: LD_INT 0
27832: PUSH
27833: LD_INT 0
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: LD_INT 1
27845: NEG
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 0
27873: PUSH
27874: LD_INT 1
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 1
27894: NEG
27895: PUSH
27896: LD_INT 1
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 2
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 1
27932: NEG
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: LD_INT 2
27963: PUSH
27964: EMPTY
27965: LIST
27966: LIST
27967: PUSH
27968: LD_INT 1
27970: PUSH
27971: LD_INT 2
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: LD_INT 2
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 1
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: PUSH
28010: LD_INT 2
28012: NEG
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: NEG
28025: PUSH
28026: LD_INT 2
28028: NEG
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28055: LD_ADDR_VAR 0 56
28059: PUSH
28060: LD_INT 0
28062: PUSH
28063: LD_INT 0
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 1
28075: NEG
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 0
28103: PUSH
28104: LD_INT 1
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 1
28113: NEG
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: EMPTY
28119: LIST
28120: LIST
28121: PUSH
28122: LD_INT 1
28124: NEG
28125: PUSH
28126: LD_INT 1
28128: NEG
28129: PUSH
28130: EMPTY
28131: LIST
28132: LIST
28133: PUSH
28134: LD_INT 1
28136: NEG
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 0
28148: PUSH
28149: LD_INT 2
28151: NEG
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 0
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: PUSH
28191: LD_INT 2
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 1
28200: PUSH
28201: LD_INT 2
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: PUSH
28208: LD_INT 0
28210: PUSH
28211: LD_INT 2
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: PUSH
28218: LD_INT 1
28220: NEG
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 2
28231: NEG
28232: PUSH
28233: LD_INT 0
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: NEG
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 2
28254: NEG
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28285: LD_ADDR_VAR 0 57
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 0
28378: PUSH
28379: LD_INT 2
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 2
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 2
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 2
28420: PUSH
28421: LD_INT 2
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 0
28440: PUSH
28441: LD_INT 2
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: LD_INT 1
28450: NEG
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: LD_INT 0
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: NEG
28473: PUSH
28474: LD_INT 1
28476: NEG
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 2
28484: NEG
28485: PUSH
28486: LD_INT 2
28488: NEG
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
28515: LD_ADDR_VAR 0 58
28519: PUSH
28520: LD_INT 0
28522: PUSH
28523: LD_INT 0
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 0
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: LD_INT 0
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 1
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 1
28584: NEG
28585: PUSH
28586: LD_INT 1
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 0
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 1
28619: PUSH
28620: LD_INT 1
28622: NEG
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: PUSH
28651: LD_INT 2
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 2
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 0
28670: PUSH
28671: LD_INT 2
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 1
28680: NEG
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: LD_INT 2
28691: NEG
28692: PUSH
28693: LD_INT 0
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 2
28702: NEG
28703: PUSH
28704: LD_INT 1
28706: NEG
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: LD_INT 2
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28745: LD_ADDR_VAR 0 59
28749: PUSH
28750: LD_INT 0
28752: PUSH
28753: LD_INT 0
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 0
28762: PUSH
28763: LD_INT 1
28765: NEG
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: LD_INT 0
28793: PUSH
28794: LD_INT 1
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 0
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 1
28814: NEG
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28833: LD_ADDR_VAR 0 60
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 0
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 1
28871: PUSH
28872: LD_INT 1
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 0
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 1
28891: NEG
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: LD_INT 1
28906: NEG
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: LIST
28920: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
28921: LD_ADDR_VAR 0 61
28925: PUSH
28926: LD_INT 0
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: LD_INT 0
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: LD_INT 1
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: LD_INT 1
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: PUSH
28977: LD_INT 1
28979: NEG
28980: PUSH
28981: LD_INT 0
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 1
28990: NEG
28991: PUSH
28992: LD_INT 1
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29009: LD_ADDR_VAR 0 62
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: LD_INT 0
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: LD_INT 1
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 1
29037: PUSH
29038: LD_INT 0
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 1
29047: PUSH
29048: LD_INT 1
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 0
29057: PUSH
29058: LD_INT 1
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 1
29067: NEG
29068: PUSH
29069: LD_INT 0
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29097: LD_ADDR_VAR 0 63
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: LD_INT 0
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 1
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: LD_INT 0
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 1
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: LD_INT 1
29155: NEG
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 1
29170: NEG
29171: PUSH
29172: EMPTY
29173: LIST
29174: LIST
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
29185: LD_ADDR_VAR 0 64
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 1
29205: NEG
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 1
29213: PUSH
29214: LD_INT 0
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 0
29233: PUSH
29234: LD_INT 1
29236: PUSH
29237: EMPTY
29238: LIST
29239: LIST
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 1
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
// end ; 1 :
29273: GO 35170
29275: LD_INT 1
29277: DOUBLE
29278: EQUAL
29279: IFTRUE 29283
29281: GO 31906
29283: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29284: LD_ADDR_VAR 0 11
29288: PUSH
29289: LD_INT 1
29291: NEG
29292: PUSH
29293: LD_INT 3
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 0
29303: PUSH
29304: LD_INT 3
29306: NEG
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: LD_INT 2
29317: NEG
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: LIST
29327: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29328: LD_ADDR_VAR 0 12
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 3
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: LD_INT 3
29356: PUSH
29357: LD_INT 1
29359: PUSH
29360: EMPTY
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: LIST
29368: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29369: LD_ADDR_VAR 0 13
29373: PUSH
29374: LD_INT 3
29376: PUSH
29377: LD_INT 2
29379: PUSH
29380: EMPTY
29381: LIST
29382: LIST
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: LD_INT 3
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: LD_INT 3
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: LIST
29408: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29409: LD_ADDR_VAR 0 14
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: LD_INT 3
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 3
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 1
29436: NEG
29437: PUSH
29438: LD_INT 2
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29450: LD_ADDR_VAR 0 15
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 3
29468: NEG
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 3
29479: NEG
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: LIST
29493: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29494: LD_ADDR_VAR 0 16
29498: PUSH
29499: LD_INT 2
29501: NEG
29502: PUSH
29503: LD_INT 3
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 3
29513: NEG
29514: PUSH
29515: LD_INT 2
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 3
29525: NEG
29526: PUSH
29527: LD_INT 3
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: LIST
29539: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29540: LD_ADDR_VAR 0 17
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 3
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 0
29559: PUSH
29560: LD_INT 3
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29584: LD_ADDR_VAR 0 18
29588: PUSH
29589: LD_INT 2
29591: PUSH
29592: LD_INT 1
29594: NEG
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: PUSH
29600: LD_INT 3
29602: PUSH
29603: LD_INT 0
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: LD_INT 3
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: LIST
29624: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29625: LD_ADDR_VAR 0 19
29629: PUSH
29630: LD_INT 3
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 3
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 3
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29665: LD_ADDR_VAR 0 20
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: LD_INT 3
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 3
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: LD_INT 2
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29706: LD_ADDR_VAR 0 21
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: LD_INT 1
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 3
29724: NEG
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 3
29735: NEG
29736: PUSH
29737: LD_INT 1
29739: NEG
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29750: LD_ADDR_VAR 0 22
29754: PUSH
29755: LD_INT 2
29757: NEG
29758: PUSH
29759: LD_INT 3
29761: NEG
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 3
29769: NEG
29770: PUSH
29771: LD_INT 2
29773: NEG
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: PUSH
29779: LD_INT 3
29781: NEG
29782: PUSH
29783: LD_INT 3
29785: NEG
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
29796: LD_ADDR_VAR 0 23
29800: PUSH
29801: LD_INT 0
29803: PUSH
29804: LD_INT 3
29806: NEG
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: LD_INT 4
29818: NEG
29819: PUSH
29820: EMPTY
29821: LIST
29822: LIST
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 3
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
29840: LD_ADDR_VAR 0 24
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: LD_INT 4
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: LIST
29880: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
29881: LD_ADDR_VAR 0 25
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 3
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 3
29908: PUSH
29909: LD_INT 4
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: LIST
29920: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
29921: LD_ADDR_VAR 0 26
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: PUSH
29939: LD_INT 4
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
29962: LD_ADDR_VAR 0 27
29966: PUSH
29967: LD_INT 3
29969: NEG
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: PUSH
29978: LD_INT 3
29980: NEG
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 4
29991: NEG
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
30006: LD_ADDR_VAR 0 28
30010: PUSH
30011: LD_INT 3
30013: NEG
30014: PUSH
30015: LD_INT 3
30017: NEG
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 3
30025: NEG
30026: PUSH
30027: LD_INT 4
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 4
30037: NEG
30038: PUSH
30039: LD_INT 3
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
30052: LD_ADDR_VAR 0 29
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 3
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: LD_INT 0
30071: PUSH
30072: LD_INT 3
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: PUSH
30083: LD_INT 2
30085: NEG
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 1
30093: NEG
30094: PUSH
30095: LD_INT 4
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 0
30105: PUSH
30106: LD_INT 4
30108: NEG
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: PUSH
30117: LD_INT 3
30119: NEG
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: LD_INT 5
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 0
30139: PUSH
30140: LD_INT 5
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 1
30150: PUSH
30151: LD_INT 4
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 6
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 0
30173: PUSH
30174: LD_INT 6
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: LD_INT 1
30184: PUSH
30185: LD_INT 5
30187: NEG
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
30207: LD_ADDR_VAR 0 30
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: LD_INT 1
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: LD_INT 3
30225: PUSH
30226: LD_INT 0
30228: PUSH
30229: EMPTY
30230: LIST
30231: LIST
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 3
30245: PUSH
30246: LD_INT 1
30248: NEG
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 4
30256: PUSH
30257: LD_INT 0
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 4
30266: PUSH
30267: LD_INT 1
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: PUSH
30274: LD_INT 4
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 5
30287: PUSH
30288: LD_INT 0
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 5
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 5
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 6
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 6
30328: PUSH
30329: LD_INT 1
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
30350: LD_ADDR_VAR 0 31
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 2
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: LD_INT 3
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 4
30387: PUSH
30388: LD_INT 3
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 3
30407: PUSH
30408: LD_INT 4
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 5
30417: PUSH
30418: LD_INT 4
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 5
30427: PUSH
30428: LD_INT 5
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 4
30437: PUSH
30438: LD_INT 5
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 6
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: PUSH
30455: LD_INT 6
30457: PUSH
30458: LD_INT 6
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 5
30467: PUSH
30468: LD_INT 6
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
30489: LD_ADDR_VAR 0 32
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 3
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 3
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 1
30527: PUSH
30528: LD_INT 4
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: LD_INT 4
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 1
30547: NEG
30548: PUSH
30549: LD_INT 3
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: LD_INT 5
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: LD_INT 5
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: NEG
30579: PUSH
30580: LD_INT 4
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 1
30589: PUSH
30590: LD_INT 6
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 0
30599: PUSH
30600: LD_INT 6
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 5
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: EMPTY
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
30632: LD_ADDR_VAR 0 33
30636: PUSH
30637: LD_INT 2
30639: NEG
30640: PUSH
30641: LD_INT 1
30643: PUSH
30644: EMPTY
30645: LIST
30646: LIST
30647: PUSH
30648: LD_INT 3
30650: NEG
30651: PUSH
30652: LD_INT 0
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 3
30661: NEG
30662: PUSH
30663: LD_INT 1
30665: NEG
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: PUSH
30671: LD_INT 3
30673: NEG
30674: PUSH
30675: LD_INT 1
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 4
30684: NEG
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 4
30695: NEG
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 4
30707: NEG
30708: PUSH
30709: LD_INT 1
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 5
30718: NEG
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 5
30729: NEG
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 5
30741: NEG
30742: PUSH
30743: LD_INT 1
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: PUSH
30750: LD_INT 6
30752: NEG
30753: PUSH
30754: LD_INT 0
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: LD_INT 6
30763: NEG
30764: PUSH
30765: LD_INT 1
30767: NEG
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
30787: LD_ADDR_VAR 0 34
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: LD_INT 3
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 3
30806: NEG
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: EMPTY
30813: LIST
30814: LIST
30815: PUSH
30816: LD_INT 3
30818: NEG
30819: PUSH
30820: LD_INT 3
30822: NEG
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 3
30830: NEG
30831: PUSH
30832: LD_INT 4
30834: NEG
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 4
30842: NEG
30843: PUSH
30844: LD_INT 3
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 4
30854: NEG
30855: PUSH
30856: LD_INT 4
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 4
30866: NEG
30867: PUSH
30868: LD_INT 5
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 5
30878: NEG
30879: PUSH
30880: LD_INT 4
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 5
30890: NEG
30891: PUSH
30892: LD_INT 5
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 5
30902: NEG
30903: PUSH
30904: LD_INT 6
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 6
30914: NEG
30915: PUSH
30916: LD_INT 5
30918: NEG
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 6
30926: NEG
30927: PUSH
30928: LD_INT 6
30930: NEG
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
30950: LD_ADDR_VAR 0 41
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: LD_INT 3
30972: NEG
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: LD_INT 2
30983: NEG
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
30994: LD_ADDR_VAR 0 42
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: LD_INT 1
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
31035: LD_ADDR_VAR 0 43
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 3
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: LD_INT 3
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: LIST
31074: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
31075: LD_ADDR_VAR 0 44
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: LIST
31115: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
31116: LD_ADDR_VAR 0 45
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 0
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: LD_INT 1
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: NEG
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
31160: LD_ADDR_VAR 0 46
31164: PUSH
31165: LD_INT 2
31167: NEG
31168: PUSH
31169: LD_INT 2
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: LD_INT 3
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 3
31191: NEG
31192: PUSH
31193: LD_INT 2
31195: NEG
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
31206: LD_ADDR_VAR 0 47
31210: PUSH
31211: LD_INT 2
31213: NEG
31214: PUSH
31215: LD_INT 3
31217: NEG
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: LD_INT 3
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31239: LD_ADDR_VAR 0 48
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 2
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
31270: LD_ADDR_VAR 0 49
31274: PUSH
31275: LD_INT 3
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 3
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
31299: LD_ADDR_VAR 0 50
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 3
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31328: LD_ADDR_VAR 0 51
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
31359: LD_ADDR_VAR 0 52
31363: PUSH
31364: LD_INT 3
31366: NEG
31367: PUSH
31368: LD_INT 1
31370: NEG
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: PUSH
31376: LD_INT 3
31378: NEG
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31392: LD_ADDR_VAR 0 53
31396: PUSH
31397: LD_INT 1
31399: NEG
31400: PUSH
31401: LD_INT 3
31403: NEG
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 0
31411: PUSH
31412: LD_INT 3
31414: NEG
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: PUSH
31420: LD_INT 1
31422: PUSH
31423: LD_INT 2
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31436: LD_ADDR_VAR 0 54
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 3
31454: PUSH
31455: LD_INT 0
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 3
31464: PUSH
31465: LD_INT 1
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: EMPTY
31473: LIST
31474: LIST
31475: LIST
31476: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31477: LD_ADDR_VAR 0 55
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 3
31494: PUSH
31495: LD_INT 3
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: LD_INT 3
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31517: LD_ADDR_VAR 0 56
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: LD_INT 3
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 3
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: LD_INT 2
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31558: LD_ADDR_VAR 0 57
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: LD_INT 0
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 3
31587: NEG
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: LIST
31600: LIST
31601: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31602: LD_ADDR_VAR 0 58
31606: PUSH
31607: LD_INT 2
31609: NEG
31610: PUSH
31611: LD_INT 3
31613: NEG
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 3
31621: NEG
31622: PUSH
31623: LD_INT 2
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 3
31633: NEG
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
31648: LD_ADDR_VAR 0 59
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 2
31659: NEG
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 1
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
31692: LD_ADDR_VAR 0 60
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: LIST
31732: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
31733: LD_ADDR_VAR 0 61
31737: PUSH
31738: LD_INT 2
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 2
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: LIST
31772: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
31773: LD_ADDR_VAR 0 62
31777: PUSH
31778: LD_INT 1
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: NEG
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
31814: LD_ADDR_VAR 0 63
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 2
31843: NEG
31844: PUSH
31845: LD_INT 1
31847: NEG
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31858: LD_ADDR_VAR 0 64
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 2
31877: NEG
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 2
31889: NEG
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: ST_TO_ADDR
// end ; 2 :
31904: GO 35170
31906: LD_INT 2
31908: DOUBLE
31909: EQUAL
31910: IFTRUE 31914
31912: GO 35169
31914: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
31915: LD_ADDR_VAR 0 29
31919: PUSH
31920: LD_INT 4
31922: PUSH
31923: LD_INT 0
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 4
31932: PUSH
31933: LD_INT 1
31935: NEG
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 5
31943: PUSH
31944: LD_INT 0
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 5
31953: PUSH
31954: LD_INT 1
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 4
31963: PUSH
31964: LD_INT 1
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 3
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 3
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 3
31994: PUSH
31995: LD_INT 2
31997: NEG
31998: PUSH
31999: EMPTY
32000: LIST
32001: LIST
32002: PUSH
32003: LD_INT 5
32005: PUSH
32006: LD_INT 2
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: PUSH
32013: LD_INT 3
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 2
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 4
32035: PUSH
32036: LD_INT 3
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 4
32045: PUSH
32046: LD_INT 4
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: PUSH
32053: LD_INT 3
32055: PUSH
32056: LD_INT 4
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 2
32065: PUSH
32066: LD_INT 3
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 2
32075: PUSH
32076: LD_INT 2
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: LD_INT 2
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 2
32095: PUSH
32096: LD_INT 4
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 4
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: LD_INT 3
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 4
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: LD_INT 5
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 5
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: LD_INT 4
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: LD_INT 3
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 5
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 2
32187: NEG
32188: PUSH
32189: LD_INT 3
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 3
32198: NEG
32199: PUSH
32200: LD_INT 0
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 3
32209: NEG
32210: PUSH
32211: LD_INT 1
32213: NEG
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: PUSH
32241: LD_INT 3
32243: NEG
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 4
32254: NEG
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 4
32265: NEG
32266: PUSH
32267: LD_INT 1
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 4
32277: NEG
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: NEG
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 4
32300: NEG
32301: PUSH
32302: LD_INT 4
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 4
32312: NEG
32313: PUSH
32314: LD_INT 5
32316: NEG
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 3
32324: NEG
32325: PUSH
32326: LD_INT 4
32328: NEG
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 3
32336: NEG
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 4
32348: NEG
32349: PUSH
32350: LD_INT 3
32352: NEG
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: LD_INT 5
32360: NEG
32361: PUSH
32362: LD_INT 4
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 5
32372: NEG
32373: PUSH
32374: LD_INT 5
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 3
32384: NEG
32385: PUSH
32386: LD_INT 5
32388: NEG
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: PUSH
32394: LD_INT 5
32396: NEG
32397: PUSH
32398: LD_INT 3
32400: NEG
32401: PUSH
32402: EMPTY
32403: LIST
32404: LIST
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
32453: LD_ADDR_VAR 0 30
32457: PUSH
32458: LD_INT 4
32460: PUSH
32461: LD_INT 4
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 4
32470: PUSH
32471: LD_INT 3
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 5
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 5
32490: PUSH
32491: LD_INT 5
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 4
32500: PUSH
32501: LD_INT 5
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 3
32510: PUSH
32511: LD_INT 4
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 3
32520: PUSH
32521: LD_INT 3
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 5
32530: PUSH
32531: LD_INT 3
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 3
32540: PUSH
32541: LD_INT 5
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 0
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 0
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 3
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: LD_INT 4
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 4
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 1
32600: NEG
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: PUSH
32620: LD_INT 2
32622: PUSH
32623: LD_INT 4
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 2
32632: NEG
32633: PUSH
32634: LD_INT 2
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 4
32643: NEG
32644: PUSH
32645: LD_INT 0
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 4
32654: NEG
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 3
32666: NEG
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: PUSH
32675: LD_INT 3
32677: NEG
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 4
32688: NEG
32689: PUSH
32690: LD_INT 1
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 5
32699: NEG
32700: PUSH
32701: LD_INT 0
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 5
32710: NEG
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 5
32722: NEG
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 3
32734: NEG
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: LD_INT 3
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 3
32757: NEG
32758: PUSH
32759: LD_INT 4
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: LD_INT 3
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: NEG
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 3
32793: NEG
32794: PUSH
32795: LD_INT 2
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 4
32805: NEG
32806: PUSH
32807: LD_INT 3
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: LD_INT 4
32817: NEG
32818: PUSH
32819: LD_INT 4
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 2
32829: NEG
32830: PUSH
32831: LD_INT 4
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 4
32841: NEG
32842: PUSH
32843: LD_INT 2
32845: NEG
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 4
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 0
32864: PUSH
32865: LD_INT 5
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: LD_INT 4
32878: NEG
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 1
32886: PUSH
32887: LD_INT 3
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 3
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: NEG
32909: PUSH
32910: LD_INT 4
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 5
32924: NEG
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: LD_INT 5
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
33000: LD_ADDR_VAR 0 31
33004: PUSH
33005: LD_INT 0
33007: PUSH
33008: LD_INT 4
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: LD_INT 3
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: LD_INT 4
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: LD_INT 5
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: LD_INT 0
33047: PUSH
33048: LD_INT 5
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PUSH
33055: LD_INT 1
33057: NEG
33058: PUSH
33059: LD_INT 4
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: LD_INT 3
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 5
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 2
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 3
33100: NEG
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 3
33111: NEG
33112: PUSH
33113: LD_INT 1
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 2
33123: NEG
33124: PUSH
33125: LD_INT 0
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: LD_INT 1
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 3
33145: NEG
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 4
33156: NEG
33157: PUSH
33158: LD_INT 0
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 4
33167: NEG
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 4
33179: NEG
33180: PUSH
33181: LD_INT 2
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: NEG
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 4
33202: NEG
33203: PUSH
33204: LD_INT 4
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 4
33214: NEG
33215: PUSH
33216: LD_INT 5
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 3
33226: NEG
33227: PUSH
33228: LD_INT 4
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: LD_INT 3
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 4
33250: NEG
33251: PUSH
33252: LD_INT 3
33254: NEG
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 5
33262: NEG
33263: PUSH
33264: LD_INT 4
33266: NEG
33267: PUSH
33268: EMPTY
33269: LIST
33270: LIST
33271: PUSH
33272: LD_INT 5
33274: NEG
33275: PUSH
33276: LD_INT 5
33278: NEG
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: PUSH
33284: LD_INT 3
33286: NEG
33287: PUSH
33288: LD_INT 5
33290: NEG
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: PUSH
33296: LD_INT 5
33298: NEG
33299: PUSH
33300: LD_INT 3
33302: NEG
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PUSH
33308: LD_INT 0
33310: PUSH
33311: LD_INT 3
33313: NEG
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: LD_INT 0
33321: PUSH
33322: LD_INT 4
33324: NEG
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 1
33332: PUSH
33333: LD_INT 3
33335: NEG
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 2
33346: NEG
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 0
33354: PUSH
33355: LD_INT 2
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 3
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 4
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 2
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: NEG
33401: PUSH
33402: LD_INT 4
33404: NEG
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 4
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 4
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: LD_INT 0
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 5
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 1
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 1
33476: NEG
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: PUSH
33482: LD_INT 3
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 5
33495: PUSH
33496: LD_INT 2
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
33550: LD_ADDR_VAR 0 32
33554: PUSH
33555: LD_INT 4
33557: NEG
33558: PUSH
33559: LD_INT 0
33561: PUSH
33562: EMPTY
33563: LIST
33564: LIST
33565: PUSH
33566: LD_INT 4
33568: NEG
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 3
33580: NEG
33581: PUSH
33582: LD_INT 0
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 3
33591: NEG
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 4
33602: NEG
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 5
33613: NEG
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 5
33624: NEG
33625: PUSH
33626: LD_INT 1
33628: NEG
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 5
33636: NEG
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: EMPTY
33643: LIST
33644: LIST
33645: PUSH
33646: LD_INT 3
33648: NEG
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 3
33659: NEG
33660: PUSH
33661: LD_INT 3
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 3
33671: NEG
33672: PUSH
33673: LD_INT 4
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 2
33683: NEG
33684: PUSH
33685: LD_INT 3
33687: NEG
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 2
33695: NEG
33696: PUSH
33697: LD_INT 2
33699: NEG
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 3
33707: NEG
33708: PUSH
33709: LD_INT 2
33711: NEG
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 4
33719: NEG
33720: PUSH
33721: LD_INT 3
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 4
33731: NEG
33732: PUSH
33733: LD_INT 4
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 2
33743: NEG
33744: PUSH
33745: LD_INT 4
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 4
33755: NEG
33756: PUSH
33757: LD_INT 2
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 0
33767: PUSH
33768: LD_INT 4
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: LD_INT 5
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 1
33789: PUSH
33790: LD_INT 4
33792: NEG
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: LD_INT 3
33803: NEG
33804: PUSH
33805: EMPTY
33806: LIST
33807: LIST
33808: PUSH
33809: LD_INT 0
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: NEG
33823: PUSH
33824: LD_INT 4
33826: NEG
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 1
33834: NEG
33835: PUSH
33836: LD_INT 5
33838: NEG
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 2
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 2
33857: NEG
33858: PUSH
33859: LD_INT 5
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 3
33879: PUSH
33880: LD_INT 1
33882: NEG
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 4
33890: PUSH
33891: LD_INT 0
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 4
33900: PUSH
33901: LD_INT 1
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 2
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 2
33944: NEG
33945: PUSH
33946: EMPTY
33947: LIST
33948: LIST
33949: PUSH
33950: LD_INT 4
33952: PUSH
33953: LD_INT 2
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 4
33962: PUSH
33963: LD_INT 4
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 4
33972: PUSH
33973: LD_INT 3
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 5
33982: PUSH
33983: LD_INT 4
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: LD_INT 5
33992: PUSH
33993: LD_INT 5
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 4
34002: PUSH
34003: LD_INT 5
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 3
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 5
34032: PUSH
34033: LD_INT 3
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 3
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: LIST
34067: LIST
34068: LIST
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
34097: LD_ADDR_VAR 0 33
34101: PUSH
34102: LD_INT 4
34104: NEG
34105: PUSH
34106: LD_INT 4
34108: NEG
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 4
34116: NEG
34117: PUSH
34118: LD_INT 5
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 3
34128: NEG
34129: PUSH
34130: LD_INT 4
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 3
34140: NEG
34141: PUSH
34142: LD_INT 3
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 4
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 5
34164: NEG
34165: PUSH
34166: LD_INT 4
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 5
34176: NEG
34177: PUSH
34178: LD_INT 5
34180: NEG
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 3
34188: NEG
34189: PUSH
34190: LD_INT 5
34192: NEG
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 5
34200: NEG
34201: PUSH
34202: LD_INT 3
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 3
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 4
34226: NEG
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: LD_INT 2
34248: NEG
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 2
34259: NEG
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: LD_INT 3
34271: NEG
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 1
34279: NEG
34280: PUSH
34281: LD_INT 4
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 2
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 2
34302: NEG
34303: PUSH
34304: LD_INT 4
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 4
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 4
34324: PUSH
34325: LD_INT 1
34327: NEG
34328: PUSH
34329: EMPTY
34330: LIST
34331: LIST
34332: PUSH
34333: LD_INT 5
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 5
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 4
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 3
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 3
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 3
34386: PUSH
34387: LD_INT 2
34389: NEG
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PUSH
34395: LD_INT 5
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 3
34407: PUSH
34408: LD_INT 3
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 3
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 3
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 4
34437: PUSH
34438: LD_INT 4
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 3
34447: PUSH
34448: LD_INT 4
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 2
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 4
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: LD_INT 4
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 4
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 3
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 1
34517: PUSH
34518: LD_INT 4
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 1
34527: PUSH
34528: LD_INT 5
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: LD_INT 5
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: LD_INT 1
34547: NEG
34548: PUSH
34549: LD_INT 4
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 1
34558: NEG
34559: PUSH
34560: LD_INT 3
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 5
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 2
34579: NEG
34580: PUSH
34581: LD_INT 3
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: LIST
34605: LIST
34606: LIST
34607: LIST
34608: LIST
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
34635: LD_ADDR_VAR 0 34
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 4
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: LD_INT 5
34656: NEG
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 1
34664: PUSH
34665: LD_INT 4
34667: NEG
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 1
34675: PUSH
34676: LD_INT 3
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 0
34686: PUSH
34687: LD_INT 3
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: NEG
34698: PUSH
34699: LD_INT 4
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 1
34709: NEG
34710: PUSH
34711: LD_INT 5
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 3
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 2
34732: NEG
34733: PUSH
34734: LD_INT 5
34736: NEG
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: PUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 0
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: PUSH
34752: LD_INT 3
34754: PUSH
34755: LD_INT 1
34757: NEG
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: PUSH
34763: LD_INT 4
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: EMPTY
34770: LIST
34771: LIST
34772: PUSH
34773: LD_INT 4
34775: PUSH
34776: LD_INT 1
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: LD_INT 1
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 2
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 2
34805: PUSH
34806: LD_INT 1
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 2
34819: NEG
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 4
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 4
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 4
34847: PUSH
34848: LD_INT 3
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 5
34857: PUSH
34858: LD_INT 4
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 5
34867: PUSH
34868: LD_INT 5
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 4
34877: PUSH
34878: LD_INT 5
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 4
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 5
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 3
34917: PUSH
34918: LD_INT 5
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 0
34927: PUSH
34928: LD_INT 3
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 1
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: NEG
34978: PUSH
34979: LD_INT 3
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: PUSH
34986: LD_INT 1
34988: NEG
34989: PUSH
34990: LD_INT 2
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 4
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: LD_INT 2
35009: NEG
35010: PUSH
35011: LD_INT 2
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 4
35020: NEG
35021: PUSH
35022: LD_INT 0
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 4
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: NEG
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: PUSH
35041: LD_INT 3
35043: NEG
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 3
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 4
35065: NEG
35066: PUSH
35067: LD_INT 1
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 5
35076: NEG
35077: PUSH
35078: LD_INT 0
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 5
35087: NEG
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 5
35099: NEG
35100: PUSH
35101: LD_INT 2
35103: NEG
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 3
35111: NEG
35112: PUSH
35113: LD_INT 2
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
// end ; end ;
35167: GO 35170
35169: POP
// case btype of b_depot , b_warehouse :
35170: LD_VAR 0 1
35174: PUSH
35175: LD_INT 0
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35189
35181: LD_INT 1
35183: DOUBLE
35184: EQUAL
35185: IFTRUE 35189
35187: GO 35390
35189: POP
// case nation of nation_american :
35190: LD_VAR 0 5
35194: PUSH
35195: LD_INT 1
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35259
35203: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
35204: LD_ADDR_VAR 0 9
35208: PUSH
35209: LD_VAR 0 11
35213: PUSH
35214: LD_VAR 0 12
35218: PUSH
35219: LD_VAR 0 13
35223: PUSH
35224: LD_VAR 0 14
35228: PUSH
35229: LD_VAR 0 15
35233: PUSH
35234: LD_VAR 0 16
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: PUSH
35247: LD_VAR 0 4
35251: PUSH
35252: LD_INT 1
35254: PLUS
35255: ARRAY
35256: ST_TO_ADDR
35257: GO 35388
35259: LD_INT 2
35261: DOUBLE
35262: EQUAL
35263: IFTRUE 35267
35265: GO 35323
35267: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
35268: LD_ADDR_VAR 0 9
35272: PUSH
35273: LD_VAR 0 17
35277: PUSH
35278: LD_VAR 0 18
35282: PUSH
35283: LD_VAR 0 19
35287: PUSH
35288: LD_VAR 0 20
35292: PUSH
35293: LD_VAR 0 21
35297: PUSH
35298: LD_VAR 0 22
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: PUSH
35311: LD_VAR 0 4
35315: PUSH
35316: LD_INT 1
35318: PLUS
35319: ARRAY
35320: ST_TO_ADDR
35321: GO 35388
35323: LD_INT 3
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35387
35331: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
35332: LD_ADDR_VAR 0 9
35336: PUSH
35337: LD_VAR 0 23
35341: PUSH
35342: LD_VAR 0 24
35346: PUSH
35347: LD_VAR 0 25
35351: PUSH
35352: LD_VAR 0 26
35356: PUSH
35357: LD_VAR 0 27
35361: PUSH
35362: LD_VAR 0 28
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: PUSH
35375: LD_VAR 0 4
35379: PUSH
35380: LD_INT 1
35382: PLUS
35383: ARRAY
35384: ST_TO_ADDR
35385: GO 35388
35387: POP
35388: GO 35943
35390: LD_INT 2
35392: DOUBLE
35393: EQUAL
35394: IFTRUE 35404
35396: LD_INT 3
35398: DOUBLE
35399: EQUAL
35400: IFTRUE 35404
35402: GO 35460
35404: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
35405: LD_ADDR_VAR 0 9
35409: PUSH
35410: LD_VAR 0 29
35414: PUSH
35415: LD_VAR 0 30
35419: PUSH
35420: LD_VAR 0 31
35424: PUSH
35425: LD_VAR 0 32
35429: PUSH
35430: LD_VAR 0 33
35434: PUSH
35435: LD_VAR 0 34
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: PUSH
35448: LD_VAR 0 4
35452: PUSH
35453: LD_INT 1
35455: PLUS
35456: ARRAY
35457: ST_TO_ADDR
35458: GO 35943
35460: LD_INT 16
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35522
35466: LD_INT 17
35468: DOUBLE
35469: EQUAL
35470: IFTRUE 35522
35472: LD_INT 18
35474: DOUBLE
35475: EQUAL
35476: IFTRUE 35522
35478: LD_INT 19
35480: DOUBLE
35481: EQUAL
35482: IFTRUE 35522
35484: LD_INT 22
35486: DOUBLE
35487: EQUAL
35488: IFTRUE 35522
35490: LD_INT 20
35492: DOUBLE
35493: EQUAL
35494: IFTRUE 35522
35496: LD_INT 21
35498: DOUBLE
35499: EQUAL
35500: IFTRUE 35522
35502: LD_INT 23
35504: DOUBLE
35505: EQUAL
35506: IFTRUE 35522
35508: LD_INT 24
35510: DOUBLE
35511: EQUAL
35512: IFTRUE 35522
35514: LD_INT 25
35516: DOUBLE
35517: EQUAL
35518: IFTRUE 35522
35520: GO 35578
35522: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
35523: LD_ADDR_VAR 0 9
35527: PUSH
35528: LD_VAR 0 35
35532: PUSH
35533: LD_VAR 0 36
35537: PUSH
35538: LD_VAR 0 37
35542: PUSH
35543: LD_VAR 0 38
35547: PUSH
35548: LD_VAR 0 39
35552: PUSH
35553: LD_VAR 0 40
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: PUSH
35566: LD_VAR 0 4
35570: PUSH
35571: LD_INT 1
35573: PLUS
35574: ARRAY
35575: ST_TO_ADDR
35576: GO 35943
35578: LD_INT 6
35580: DOUBLE
35581: EQUAL
35582: IFTRUE 35634
35584: LD_INT 7
35586: DOUBLE
35587: EQUAL
35588: IFTRUE 35634
35590: LD_INT 8
35592: DOUBLE
35593: EQUAL
35594: IFTRUE 35634
35596: LD_INT 13
35598: DOUBLE
35599: EQUAL
35600: IFTRUE 35634
35602: LD_INT 12
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35634
35608: LD_INT 15
35610: DOUBLE
35611: EQUAL
35612: IFTRUE 35634
35614: LD_INT 11
35616: DOUBLE
35617: EQUAL
35618: IFTRUE 35634
35620: LD_INT 14
35622: DOUBLE
35623: EQUAL
35624: IFTRUE 35634
35626: LD_INT 10
35628: DOUBLE
35629: EQUAL
35630: IFTRUE 35634
35632: GO 35690
35634: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
35635: LD_ADDR_VAR 0 9
35639: PUSH
35640: LD_VAR 0 41
35644: PUSH
35645: LD_VAR 0 42
35649: PUSH
35650: LD_VAR 0 43
35654: PUSH
35655: LD_VAR 0 44
35659: PUSH
35660: LD_VAR 0 45
35664: PUSH
35665: LD_VAR 0 46
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: PUSH
35678: LD_VAR 0 4
35682: PUSH
35683: LD_INT 1
35685: PLUS
35686: ARRAY
35687: ST_TO_ADDR
35688: GO 35943
35690: LD_INT 36
35692: DOUBLE
35693: EQUAL
35694: IFTRUE 35698
35696: GO 35754
35698: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
35699: LD_ADDR_VAR 0 9
35703: PUSH
35704: LD_VAR 0 47
35708: PUSH
35709: LD_VAR 0 48
35713: PUSH
35714: LD_VAR 0 49
35718: PUSH
35719: LD_VAR 0 50
35723: PUSH
35724: LD_VAR 0 51
35728: PUSH
35729: LD_VAR 0 52
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: PUSH
35742: LD_VAR 0 4
35746: PUSH
35747: LD_INT 1
35749: PLUS
35750: ARRAY
35751: ST_TO_ADDR
35752: GO 35943
35754: LD_INT 4
35756: DOUBLE
35757: EQUAL
35758: IFTRUE 35780
35760: LD_INT 5
35762: DOUBLE
35763: EQUAL
35764: IFTRUE 35780
35766: LD_INT 34
35768: DOUBLE
35769: EQUAL
35770: IFTRUE 35780
35772: LD_INT 37
35774: DOUBLE
35775: EQUAL
35776: IFTRUE 35780
35778: GO 35836
35780: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
35781: LD_ADDR_VAR 0 9
35785: PUSH
35786: LD_VAR 0 53
35790: PUSH
35791: LD_VAR 0 54
35795: PUSH
35796: LD_VAR 0 55
35800: PUSH
35801: LD_VAR 0 56
35805: PUSH
35806: LD_VAR 0 57
35810: PUSH
35811: LD_VAR 0 58
35815: PUSH
35816: EMPTY
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: PUSH
35824: LD_VAR 0 4
35828: PUSH
35829: LD_INT 1
35831: PLUS
35832: ARRAY
35833: ST_TO_ADDR
35834: GO 35943
35836: LD_INT 31
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35886
35842: LD_INT 32
35844: DOUBLE
35845: EQUAL
35846: IFTRUE 35886
35848: LD_INT 33
35850: DOUBLE
35851: EQUAL
35852: IFTRUE 35886
35854: LD_INT 27
35856: DOUBLE
35857: EQUAL
35858: IFTRUE 35886
35860: LD_INT 26
35862: DOUBLE
35863: EQUAL
35864: IFTRUE 35886
35866: LD_INT 28
35868: DOUBLE
35869: EQUAL
35870: IFTRUE 35886
35872: LD_INT 29
35874: DOUBLE
35875: EQUAL
35876: IFTRUE 35886
35878: LD_INT 30
35880: DOUBLE
35881: EQUAL
35882: IFTRUE 35886
35884: GO 35942
35886: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
35887: LD_ADDR_VAR 0 9
35891: PUSH
35892: LD_VAR 0 59
35896: PUSH
35897: LD_VAR 0 60
35901: PUSH
35902: LD_VAR 0 61
35906: PUSH
35907: LD_VAR 0 62
35911: PUSH
35912: LD_VAR 0 63
35916: PUSH
35917: LD_VAR 0 64
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: PUSH
35930: LD_VAR 0 4
35934: PUSH
35935: LD_INT 1
35937: PLUS
35938: ARRAY
35939: ST_TO_ADDR
35940: GO 35943
35942: POP
// temp_list2 = [ ] ;
35943: LD_ADDR_VAR 0 10
35947: PUSH
35948: EMPTY
35949: ST_TO_ADDR
// for i in temp_list do
35950: LD_ADDR_VAR 0 8
35954: PUSH
35955: LD_VAR 0 9
35959: PUSH
35960: FOR_IN
35961: IFFALSE 36013
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
35963: LD_ADDR_VAR 0 10
35967: PUSH
35968: LD_VAR 0 10
35972: PUSH
35973: LD_VAR 0 8
35977: PUSH
35978: LD_INT 1
35980: ARRAY
35981: PUSH
35982: LD_VAR 0 2
35986: PLUS
35987: PUSH
35988: LD_VAR 0 8
35992: PUSH
35993: LD_INT 2
35995: ARRAY
35996: PUSH
35997: LD_VAR 0 3
36001: PLUS
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: EMPTY
36008: LIST
36009: ADD
36010: ST_TO_ADDR
36011: GO 35960
36013: POP
36014: POP
// result = temp_list2 ;
36015: LD_ADDR_VAR 0 7
36019: PUSH
36020: LD_VAR 0 10
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 7
36029: RET
// export function EnemyInRange ( unit , dist ) ; begin
36030: LD_INT 0
36032: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
36033: LD_ADDR_VAR 0 3
36037: PUSH
36038: LD_VAR 0 1
36042: PPUSH
36043: CALL_OW 255
36047: PPUSH
36048: LD_VAR 0 1
36052: PPUSH
36053: CALL_OW 250
36057: PPUSH
36058: LD_VAR 0 1
36062: PPUSH
36063: CALL_OW 251
36067: PPUSH
36068: LD_VAR 0 2
36072: PPUSH
36073: CALL 9287 0 4
36077: PUSH
36078: LD_INT 4
36080: ARRAY
36081: ST_TO_ADDR
// end ;
36082: LD_VAR 0 3
36086: RET
// export function PlayerSeeMe ( unit ) ; begin
36087: LD_INT 0
36089: PPUSH
// result := See ( your_side , unit ) ;
36090: LD_ADDR_VAR 0 2
36094: PUSH
36095: LD_OWVAR 2
36099: PPUSH
36100: LD_VAR 0 1
36104: PPUSH
36105: CALL_OW 292
36109: ST_TO_ADDR
// end ;
36110: LD_VAR 0 2
36114: RET
// export function ReverseDir ( unit ) ; begin
36115: LD_INT 0
36117: PPUSH
// if not unit then
36118: LD_VAR 0 1
36122: NOT
36123: IFFALSE 36127
// exit ;
36125: GO 36150
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
36127: LD_ADDR_VAR 0 2
36131: PUSH
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 254
36141: PUSH
36142: LD_INT 3
36144: PLUS
36145: PUSH
36146: LD_INT 6
36148: MOD
36149: ST_TO_ADDR
// end ;
36150: LD_VAR 0 2
36154: RET
// export function ReverseArray ( array ) ; var i ; begin
36155: LD_INT 0
36157: PPUSH
36158: PPUSH
// if not array then
36159: LD_VAR 0 1
36163: NOT
36164: IFFALSE 36168
// exit ;
36166: GO 36223
// result := [ ] ;
36168: LD_ADDR_VAR 0 2
36172: PUSH
36173: EMPTY
36174: ST_TO_ADDR
// for i := array downto 1 do
36175: LD_ADDR_VAR 0 3
36179: PUSH
36180: DOUBLE
36181: LD_VAR 0 1
36185: INC
36186: ST_TO_ADDR
36187: LD_INT 1
36189: PUSH
36190: FOR_DOWNTO
36191: IFFALSE 36221
// result := Join ( result , array [ i ] ) ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_VAR 0 2
36202: PPUSH
36203: LD_VAR 0 1
36207: PUSH
36208: LD_VAR 0 3
36212: ARRAY
36213: PPUSH
36214: CALL 41065 0 2
36218: ST_TO_ADDR
36219: GO 36190
36221: POP
36222: POP
// end ;
36223: LD_VAR 0 2
36227: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
36228: LD_INT 0
36230: PPUSH
36231: PPUSH
36232: PPUSH
36233: PPUSH
36234: PPUSH
36235: PPUSH
// if not unit or not hexes then
36236: LD_VAR 0 1
36240: NOT
36241: IFTRUE 36250
36243: PUSH
36244: LD_VAR 0 2
36248: NOT
36249: OR
36250: IFFALSE 36254
// exit ;
36252: GO 36377
// dist := 9999 ;
36254: LD_ADDR_VAR 0 5
36258: PUSH
36259: LD_INT 9999
36261: ST_TO_ADDR
// for i = 1 to hexes do
36262: LD_ADDR_VAR 0 4
36266: PUSH
36267: DOUBLE
36268: LD_INT 1
36270: DEC
36271: ST_TO_ADDR
36272: LD_VAR 0 2
36276: PUSH
36277: FOR_TO
36278: IFFALSE 36365
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36280: LD_ADDR_VAR 0 6
36284: PUSH
36285: LD_VAR 0 1
36289: PPUSH
36290: LD_VAR 0 2
36294: PUSH
36295: LD_VAR 0 4
36299: ARRAY
36300: PUSH
36301: LD_INT 1
36303: ARRAY
36304: PPUSH
36305: LD_VAR 0 2
36309: PUSH
36310: LD_VAR 0 4
36314: ARRAY
36315: PUSH
36316: LD_INT 2
36318: ARRAY
36319: PPUSH
36320: CALL_OW 297
36324: ST_TO_ADDR
// if tdist < dist then
36325: LD_VAR 0 6
36329: PUSH
36330: LD_VAR 0 5
36334: LESS
36335: IFFALSE 36363
// begin hex := hexes [ i ] ;
36337: LD_ADDR_VAR 0 8
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_VAR 0 4
36351: ARRAY
36352: ST_TO_ADDR
// dist := tdist ;
36353: LD_ADDR_VAR 0 5
36357: PUSH
36358: LD_VAR 0 6
36362: ST_TO_ADDR
// end ; end ;
36363: GO 36277
36365: POP
36366: POP
// result := hex ;
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: LD_VAR 0 8
36376: ST_TO_ADDR
// end ;
36377: LD_VAR 0 3
36381: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
36382: LD_INT 0
36384: PPUSH
36385: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
36386: LD_VAR 0 1
36390: NOT
36391: IFTRUE 36430
36393: PUSH
36394: LD_VAR 0 1
36398: PUSH
36399: LD_INT 21
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 23
36411: PUSH
36412: LD_INT 2
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PPUSH
36423: CALL_OW 69
36427: IN
36428: NOT
36429: OR
36430: IFFALSE 36434
// exit ;
36432: GO 36481
// for i = 1 to 3 do
36434: LD_ADDR_VAR 0 3
36438: PUSH
36439: DOUBLE
36440: LD_INT 1
36442: DEC
36443: ST_TO_ADDR
36444: LD_INT 3
36446: PUSH
36447: FOR_TO
36448: IFFALSE 36479
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
36450: LD_VAR 0 1
36454: PPUSH
36455: CALL_OW 250
36459: PPUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL_OW 251
36469: PPUSH
36470: LD_INT 1
36472: PPUSH
36473: CALL_OW 453
36477: GO 36447
36479: POP
36480: POP
// end ;
36481: LD_VAR 0 2
36485: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
36486: LD_INT 0
36488: PPUSH
36489: PPUSH
36490: PPUSH
36491: PPUSH
36492: PPUSH
36493: PPUSH
// if not unit or not enemy_unit then
36494: LD_VAR 0 1
36498: NOT
36499: IFTRUE 36508
36501: PUSH
36502: LD_VAR 0 2
36506: NOT
36507: OR
36508: IFFALSE 36512
// exit ;
36510: GO 36983
// if GetLives ( i ) < 250 then
36512: LD_VAR 0 4
36516: PPUSH
36517: CALL_OW 256
36521: PUSH
36522: LD_INT 250
36524: LESS
36525: IFFALSE 36538
// begin ComAutodestruct ( i ) ;
36527: LD_VAR 0 4
36531: PPUSH
36532: CALL 36382 0 1
// exit ;
36536: GO 36983
// end ; x := GetX ( enemy_unit ) ;
36538: LD_ADDR_VAR 0 7
36542: PUSH
36543: LD_VAR 0 2
36547: PPUSH
36548: CALL_OW 250
36552: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
36553: LD_ADDR_VAR 0 8
36557: PUSH
36558: LD_VAR 0 2
36562: PPUSH
36563: CALL_OW 251
36567: ST_TO_ADDR
// if not x or not y then
36568: LD_VAR 0 7
36572: NOT
36573: IFTRUE 36582
36575: PUSH
36576: LD_VAR 0 8
36580: NOT
36581: OR
36582: IFFALSE 36586
// exit ;
36584: GO 36983
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
36586: LD_ADDR_VAR 0 6
36590: PUSH
36591: LD_VAR 0 7
36595: PPUSH
36596: LD_INT 0
36598: PPUSH
36599: LD_INT 4
36601: PPUSH
36602: CALL_OW 272
36606: PUSH
36607: LD_VAR 0 8
36611: PPUSH
36612: LD_INT 0
36614: PPUSH
36615: LD_INT 4
36617: PPUSH
36618: CALL_OW 273
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_VAR 0 7
36631: PPUSH
36632: LD_INT 1
36634: PPUSH
36635: LD_INT 4
36637: PPUSH
36638: CALL_OW 272
36642: PUSH
36643: LD_VAR 0 8
36647: PPUSH
36648: LD_INT 1
36650: PPUSH
36651: LD_INT 4
36653: PPUSH
36654: CALL_OW 273
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: PUSH
36663: LD_VAR 0 7
36667: PPUSH
36668: LD_INT 2
36670: PPUSH
36671: LD_INT 4
36673: PPUSH
36674: CALL_OW 272
36678: PUSH
36679: LD_VAR 0 8
36683: PPUSH
36684: LD_INT 2
36686: PPUSH
36687: LD_INT 4
36689: PPUSH
36690: CALL_OW 273
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_VAR 0 7
36703: PPUSH
36704: LD_INT 3
36706: PPUSH
36707: LD_INT 4
36709: PPUSH
36710: CALL_OW 272
36714: PUSH
36715: LD_VAR 0 8
36719: PPUSH
36720: LD_INT 3
36722: PPUSH
36723: LD_INT 4
36725: PPUSH
36726: CALL_OW 273
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_VAR 0 7
36739: PPUSH
36740: LD_INT 4
36742: PPUSH
36743: LD_INT 4
36745: PPUSH
36746: CALL_OW 272
36750: PUSH
36751: LD_VAR 0 8
36755: PPUSH
36756: LD_INT 4
36758: PPUSH
36759: LD_INT 4
36761: PPUSH
36762: CALL_OW 273
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_VAR 0 7
36775: PPUSH
36776: LD_INT 5
36778: PPUSH
36779: LD_INT 4
36781: PPUSH
36782: CALL_OW 272
36786: PUSH
36787: LD_VAR 0 8
36791: PPUSH
36792: LD_INT 5
36794: PPUSH
36795: LD_INT 4
36797: PPUSH
36798: CALL_OW 273
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: ST_TO_ADDR
// for i = tmp downto 1 do
36815: LD_ADDR_VAR 0 4
36819: PUSH
36820: DOUBLE
36821: LD_VAR 0 6
36825: INC
36826: ST_TO_ADDR
36827: LD_INT 1
36829: PUSH
36830: FOR_DOWNTO
36831: IFFALSE 36934
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
36833: LD_VAR 0 6
36837: PUSH
36838: LD_VAR 0 4
36842: ARRAY
36843: PUSH
36844: LD_INT 1
36846: ARRAY
36847: PPUSH
36848: LD_VAR 0 6
36852: PUSH
36853: LD_VAR 0 4
36857: ARRAY
36858: PUSH
36859: LD_INT 2
36861: ARRAY
36862: PPUSH
36863: CALL_OW 488
36867: NOT
36868: IFTRUE 36910
36870: PUSH
36871: LD_VAR 0 6
36875: PUSH
36876: LD_VAR 0 4
36880: ARRAY
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: PPUSH
36886: LD_VAR 0 6
36890: PUSH
36891: LD_VAR 0 4
36895: ARRAY
36896: PUSH
36897: LD_INT 2
36899: ARRAY
36900: PPUSH
36901: CALL_OW 428
36905: PUSH
36906: LD_INT 0
36908: NONEQUAL
36909: OR
36910: IFFALSE 36932
// tmp := Delete ( tmp , i ) ;
36912: LD_ADDR_VAR 0 6
36916: PUSH
36917: LD_VAR 0 6
36921: PPUSH
36922: LD_VAR 0 4
36926: PPUSH
36927: CALL_OW 3
36931: ST_TO_ADDR
36932: GO 36830
36934: POP
36935: POP
// j := GetClosestHex ( unit , tmp ) ;
36936: LD_ADDR_VAR 0 5
36940: PUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: LD_VAR 0 6
36950: PPUSH
36951: CALL 36228 0 2
36955: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
36956: LD_VAR 0 1
36960: PPUSH
36961: LD_VAR 0 5
36965: PUSH
36966: LD_INT 1
36968: ARRAY
36969: PPUSH
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 2
36977: ARRAY
36978: PPUSH
36979: CALL_OW 111
// end ;
36983: LD_VAR 0 3
36987: RET
// export function PrepareApemanSoldier ( ) ; begin
36988: LD_INT 0
36990: PPUSH
// uc_nation := 0 ;
36991: LD_ADDR_OWVAR 21
36995: PUSH
36996: LD_INT 0
36998: ST_TO_ADDR
// hc_sex := sex_male ;
36999: LD_ADDR_OWVAR 27
37003: PUSH
37004: LD_INT 1
37006: ST_TO_ADDR
// hc_name :=  ;
37007: LD_ADDR_OWVAR 26
37011: PUSH
37012: LD_STRING 
37014: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
37015: LD_ADDR_OWVAR 28
37019: PUSH
37020: LD_INT 15
37022: ST_TO_ADDR
// hc_gallery :=  ;
37023: LD_ADDR_OWVAR 33
37027: PUSH
37028: LD_STRING 
37030: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37031: LD_ADDR_OWVAR 31
37035: PUSH
37036: LD_INT 0
37038: PPUSH
37039: LD_INT 3
37041: PPUSH
37042: CALL_OW 12
37046: PUSH
37047: LD_INT 0
37049: PPUSH
37050: LD_INT 3
37052: PPUSH
37053: CALL_OW 12
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37070: LD_ADDR_OWVAR 29
37074: PUSH
37075: LD_INT 12
37077: PUSH
37078: LD_INT 12
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: ST_TO_ADDR
// end ;
37085: LD_VAR 0 1
37089: RET
// export function PrepareApemanEngineer ( ) ; begin
37090: LD_INT 0
37092: PPUSH
// uc_nation := 0 ;
37093: LD_ADDR_OWVAR 21
37097: PUSH
37098: LD_INT 0
37100: ST_TO_ADDR
// hc_sex := sex_male ;
37101: LD_ADDR_OWVAR 27
37105: PUSH
37106: LD_INT 1
37108: ST_TO_ADDR
// hc_name :=  ;
37109: LD_ADDR_OWVAR 26
37113: PUSH
37114: LD_STRING 
37116: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
37117: LD_ADDR_OWVAR 28
37121: PUSH
37122: LD_INT 16
37124: ST_TO_ADDR
// hc_gallery :=  ;
37125: LD_ADDR_OWVAR 33
37129: PUSH
37130: LD_STRING 
37132: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37133: LD_ADDR_OWVAR 31
37137: PUSH
37138: LD_INT 0
37140: PPUSH
37141: LD_INT 3
37143: PPUSH
37144: CALL_OW 12
37148: PUSH
37149: LD_INT 0
37151: PPUSH
37152: LD_INT 3
37154: PPUSH
37155: CALL_OW 12
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 0
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37172: LD_ADDR_OWVAR 29
37176: PUSH
37177: LD_INT 12
37179: PUSH
37180: LD_INT 12
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// end ;
37187: LD_VAR 0 1
37191: RET
// export function PrepareApeman ( agressivity ) ; begin
37192: LD_INT 0
37194: PPUSH
// uc_side := 0 ;
37195: LD_ADDR_OWVAR 20
37199: PUSH
37200: LD_INT 0
37202: ST_TO_ADDR
// uc_nation := 0 ;
37203: LD_ADDR_OWVAR 21
37207: PUSH
37208: LD_INT 0
37210: ST_TO_ADDR
// hc_sex := sex_male ;
37211: LD_ADDR_OWVAR 27
37215: PUSH
37216: LD_INT 1
37218: ST_TO_ADDR
// hc_class := class_apeman ;
37219: LD_ADDR_OWVAR 28
37223: PUSH
37224: LD_INT 12
37226: ST_TO_ADDR
// hc_gallery :=  ;
37227: LD_ADDR_OWVAR 33
37231: PUSH
37232: LD_STRING 
37234: ST_TO_ADDR
// hc_name :=  ;
37235: LD_ADDR_OWVAR 26
37239: PUSH
37240: LD_STRING 
37242: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37243: LD_ADDR_OWVAR 29
37247: PUSH
37248: LD_INT 12
37250: PUSH
37251: LD_INT 12
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: ST_TO_ADDR
// if agressivity = 0 then
37258: LD_VAR 0 1
37262: PUSH
37263: LD_INT 0
37265: EQUAL
37266: IFFALSE 37278
// hc_agressivity := 0 else
37268: LD_ADDR_OWVAR 35
37272: PUSH
37273: LD_INT 0
37275: ST_TO_ADDR
37276: GO 37299
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37278: LD_ADDR_OWVAR 35
37282: PUSH
37283: LD_VAR 0 1
37287: NEG
37288: PPUSH
37289: LD_VAR 0 1
37293: PPUSH
37294: CALL_OW 12
37298: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
37299: LD_ADDR_OWVAR 31
37303: PUSH
37304: LD_INT 0
37306: PPUSH
37307: LD_INT 3
37309: PPUSH
37310: CALL_OW 12
37314: PUSH
37315: LD_INT 0
37317: PPUSH
37318: LD_INT 3
37320: PPUSH
37321: CALL_OW 12
37325: PUSH
37326: LD_INT 0
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: ST_TO_ADDR
// end ;
37338: LD_VAR 0 2
37342: RET
// export function PrepareTiger ( agressivity ) ; begin
37343: LD_INT 0
37345: PPUSH
// uc_side := 0 ;
37346: LD_ADDR_OWVAR 20
37350: PUSH
37351: LD_INT 0
37353: ST_TO_ADDR
// uc_nation := 0 ;
37354: LD_ADDR_OWVAR 21
37358: PUSH
37359: LD_INT 0
37361: ST_TO_ADDR
// InitHc ;
37362: CALL_OW 19
// hc_class := class_tiger ;
37366: LD_ADDR_OWVAR 28
37370: PUSH
37371: LD_INT 14
37373: ST_TO_ADDR
// hc_gallery :=  ;
37374: LD_ADDR_OWVAR 33
37378: PUSH
37379: LD_STRING 
37381: ST_TO_ADDR
// hc_name :=  ;
37382: LD_ADDR_OWVAR 26
37386: PUSH
37387: LD_STRING 
37389: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
37390: LD_ADDR_OWVAR 35
37394: PUSH
37395: LD_VAR 0 1
37399: NEG
37400: PPUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 12
37410: ST_TO_ADDR
// end ;
37411: LD_VAR 0 2
37415: RET
// export function PrepareEnchidna ( ) ; begin
37416: LD_INT 0
37418: PPUSH
// uc_side := 0 ;
37419: LD_ADDR_OWVAR 20
37423: PUSH
37424: LD_INT 0
37426: ST_TO_ADDR
// uc_nation := 0 ;
37427: LD_ADDR_OWVAR 21
37431: PUSH
37432: LD_INT 0
37434: ST_TO_ADDR
// InitHc ;
37435: CALL_OW 19
// hc_class := class_baggie ;
37439: LD_ADDR_OWVAR 28
37443: PUSH
37444: LD_INT 13
37446: ST_TO_ADDR
// hc_gallery :=  ;
37447: LD_ADDR_OWVAR 33
37451: PUSH
37452: LD_STRING 
37454: ST_TO_ADDR
// hc_name :=  ;
37455: LD_ADDR_OWVAR 26
37459: PUSH
37460: LD_STRING 
37462: ST_TO_ADDR
// end ;
37463: LD_VAR 0 1
37467: RET
// export function PrepareFrog ( ) ; begin
37468: LD_INT 0
37470: PPUSH
// uc_side := 0 ;
37471: LD_ADDR_OWVAR 20
37475: PUSH
37476: LD_INT 0
37478: ST_TO_ADDR
// uc_nation := 0 ;
37479: LD_ADDR_OWVAR 21
37483: PUSH
37484: LD_INT 0
37486: ST_TO_ADDR
// InitHc ;
37487: CALL_OW 19
// hc_class := class_frog ;
37491: LD_ADDR_OWVAR 28
37495: PUSH
37496: LD_INT 19
37498: ST_TO_ADDR
// hc_gallery :=  ;
37499: LD_ADDR_OWVAR 33
37503: PUSH
37504: LD_STRING 
37506: ST_TO_ADDR
// hc_name :=  ;
37507: LD_ADDR_OWVAR 26
37511: PUSH
37512: LD_STRING 
37514: ST_TO_ADDR
// end ;
37515: LD_VAR 0 1
37519: RET
// export function PrepareFish ( ) ; begin
37520: LD_INT 0
37522: PPUSH
// uc_side := 0 ;
37523: LD_ADDR_OWVAR 20
37527: PUSH
37528: LD_INT 0
37530: ST_TO_ADDR
// uc_nation := 0 ;
37531: LD_ADDR_OWVAR 21
37535: PUSH
37536: LD_INT 0
37538: ST_TO_ADDR
// InitHc ;
37539: CALL_OW 19
// hc_class := class_fish ;
37543: LD_ADDR_OWVAR 28
37547: PUSH
37548: LD_INT 20
37550: ST_TO_ADDR
// hc_gallery :=  ;
37551: LD_ADDR_OWVAR 33
37555: PUSH
37556: LD_STRING 
37558: ST_TO_ADDR
// hc_name :=  ;
37559: LD_ADDR_OWVAR 26
37563: PUSH
37564: LD_STRING 
37566: ST_TO_ADDR
// end ;
37567: LD_VAR 0 1
37571: RET
// export function PrepareBird ( ) ; begin
37572: LD_INT 0
37574: PPUSH
// uc_side := 0 ;
37575: LD_ADDR_OWVAR 20
37579: PUSH
37580: LD_INT 0
37582: ST_TO_ADDR
// uc_nation := 0 ;
37583: LD_ADDR_OWVAR 21
37587: PUSH
37588: LD_INT 0
37590: ST_TO_ADDR
// InitHc ;
37591: CALL_OW 19
// hc_class := class_phororhacos ;
37595: LD_ADDR_OWVAR 28
37599: PUSH
37600: LD_INT 18
37602: ST_TO_ADDR
// hc_gallery :=  ;
37603: LD_ADDR_OWVAR 33
37607: PUSH
37608: LD_STRING 
37610: ST_TO_ADDR
// hc_name :=  ;
37611: LD_ADDR_OWVAR 26
37615: PUSH
37616: LD_STRING 
37618: ST_TO_ADDR
// end ;
37619: LD_VAR 0 1
37623: RET
// export function PrepareHorse ( ) ; begin
37624: LD_INT 0
37626: PPUSH
// uc_side := 0 ;
37627: LD_ADDR_OWVAR 20
37631: PUSH
37632: LD_INT 0
37634: ST_TO_ADDR
// uc_nation := 0 ;
37635: LD_ADDR_OWVAR 21
37639: PUSH
37640: LD_INT 0
37642: ST_TO_ADDR
// InitHc ;
37643: CALL_OW 19
// hc_class := class_horse ;
37647: LD_ADDR_OWVAR 28
37651: PUSH
37652: LD_INT 21
37654: ST_TO_ADDR
// hc_gallery :=  ;
37655: LD_ADDR_OWVAR 33
37659: PUSH
37660: LD_STRING 
37662: ST_TO_ADDR
// hc_name :=  ;
37663: LD_ADDR_OWVAR 26
37667: PUSH
37668: LD_STRING 
37670: ST_TO_ADDR
// end ;
37671: LD_VAR 0 1
37675: RET
// export function PrepareMastodont ( ) ; begin
37676: LD_INT 0
37678: PPUSH
// uc_side := 0 ;
37679: LD_ADDR_OWVAR 20
37683: PUSH
37684: LD_INT 0
37686: ST_TO_ADDR
// uc_nation := 0 ;
37687: LD_ADDR_OWVAR 21
37691: PUSH
37692: LD_INT 0
37694: ST_TO_ADDR
// vc_chassis := class_mastodont ;
37695: LD_ADDR_OWVAR 37
37699: PUSH
37700: LD_INT 31
37702: ST_TO_ADDR
// vc_control := control_rider ;
37703: LD_ADDR_OWVAR 38
37707: PUSH
37708: LD_INT 4
37710: ST_TO_ADDR
// end ;
37711: LD_VAR 0 1
37715: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
37716: LD_INT 0
37718: PPUSH
37719: PPUSH
37720: PPUSH
// uc_side = 0 ;
37721: LD_ADDR_OWVAR 20
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
// uc_nation = 0 ;
37729: LD_ADDR_OWVAR 21
37733: PUSH
37734: LD_INT 0
37736: ST_TO_ADDR
// InitHc_All ( ) ;
37737: CALL_OW 584
// InitVc ;
37741: CALL_OW 20
// if mastodonts then
37745: LD_VAR 0 6
37749: IFFALSE 37816
// for i = 1 to mastodonts do
37751: LD_ADDR_VAR 0 11
37755: PUSH
37756: DOUBLE
37757: LD_INT 1
37759: DEC
37760: ST_TO_ADDR
37761: LD_VAR 0 6
37765: PUSH
37766: FOR_TO
37767: IFFALSE 37814
// begin vc_chassis := 31 ;
37769: LD_ADDR_OWVAR 37
37773: PUSH
37774: LD_INT 31
37776: ST_TO_ADDR
// vc_control := control_rider ;
37777: LD_ADDR_OWVAR 38
37781: PUSH
37782: LD_INT 4
37784: ST_TO_ADDR
// animal := CreateVehicle ;
37785: LD_ADDR_VAR 0 12
37789: PUSH
37790: CALL_OW 45
37794: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37795: LD_VAR 0 12
37799: PPUSH
37800: LD_VAR 0 8
37804: PPUSH
37805: LD_INT 0
37807: PPUSH
37808: CALL 39958 0 3
// end ;
37812: GO 37766
37814: POP
37815: POP
// if horses then
37816: LD_VAR 0 5
37820: IFFALSE 37887
// for i = 1 to horses do
37822: LD_ADDR_VAR 0 11
37826: PUSH
37827: DOUBLE
37828: LD_INT 1
37830: DEC
37831: ST_TO_ADDR
37832: LD_VAR 0 5
37836: PUSH
37837: FOR_TO
37838: IFFALSE 37885
// begin hc_class := 21 ;
37840: LD_ADDR_OWVAR 28
37844: PUSH
37845: LD_INT 21
37847: ST_TO_ADDR
// hc_gallery :=  ;
37848: LD_ADDR_OWVAR 33
37852: PUSH
37853: LD_STRING 
37855: ST_TO_ADDR
// animal := CreateHuman ;
37856: LD_ADDR_VAR 0 12
37860: PUSH
37861: CALL_OW 44
37865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37866: LD_VAR 0 12
37870: PPUSH
37871: LD_VAR 0 8
37875: PPUSH
37876: LD_INT 0
37878: PPUSH
37879: CALL 39958 0 3
// end ;
37883: GO 37837
37885: POP
37886: POP
// if birds then
37887: LD_VAR 0 1
37891: IFFALSE 37958
// for i = 1 to birds do
37893: LD_ADDR_VAR 0 11
37897: PUSH
37898: DOUBLE
37899: LD_INT 1
37901: DEC
37902: ST_TO_ADDR
37903: LD_VAR 0 1
37907: PUSH
37908: FOR_TO
37909: IFFALSE 37956
// begin hc_class := 18 ;
37911: LD_ADDR_OWVAR 28
37915: PUSH
37916: LD_INT 18
37918: ST_TO_ADDR
// hc_gallery =  ;
37919: LD_ADDR_OWVAR 33
37923: PUSH
37924: LD_STRING 
37926: ST_TO_ADDR
// animal := CreateHuman ;
37927: LD_ADDR_VAR 0 12
37931: PUSH
37932: CALL_OW 44
37936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
37937: LD_VAR 0 12
37941: PPUSH
37942: LD_VAR 0 8
37946: PPUSH
37947: LD_INT 0
37949: PPUSH
37950: CALL 39958 0 3
// end ;
37954: GO 37908
37956: POP
37957: POP
// if tigers then
37958: LD_VAR 0 2
37962: IFFALSE 38046
// for i = 1 to tigers do
37964: LD_ADDR_VAR 0 11
37968: PUSH
37969: DOUBLE
37970: LD_INT 1
37972: DEC
37973: ST_TO_ADDR
37974: LD_VAR 0 2
37978: PUSH
37979: FOR_TO
37980: IFFALSE 38044
// begin hc_class = class_tiger ;
37982: LD_ADDR_OWVAR 28
37986: PUSH
37987: LD_INT 14
37989: ST_TO_ADDR
// hc_gallery =  ;
37990: LD_ADDR_OWVAR 33
37994: PUSH
37995: LD_STRING 
37997: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
37998: LD_ADDR_OWVAR 35
38002: PUSH
38003: LD_INT 7
38005: NEG
38006: PPUSH
38007: LD_INT 7
38009: PPUSH
38010: CALL_OW 12
38014: ST_TO_ADDR
// animal := CreateHuman ;
38015: LD_ADDR_VAR 0 12
38019: PUSH
38020: CALL_OW 44
38024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38025: LD_VAR 0 12
38029: PPUSH
38030: LD_VAR 0 8
38034: PPUSH
38035: LD_INT 0
38037: PPUSH
38038: CALL 39958 0 3
// end ;
38042: GO 37979
38044: POP
38045: POP
// if apemans then
38046: LD_VAR 0 3
38050: IFFALSE 38173
// for i = 1 to apemans do
38052: LD_ADDR_VAR 0 11
38056: PUSH
38057: DOUBLE
38058: LD_INT 1
38060: DEC
38061: ST_TO_ADDR
38062: LD_VAR 0 3
38066: PUSH
38067: FOR_TO
38068: IFFALSE 38171
// begin hc_class = class_apeman ;
38070: LD_ADDR_OWVAR 28
38074: PUSH
38075: LD_INT 12
38077: ST_TO_ADDR
// hc_gallery =  ;
38078: LD_ADDR_OWVAR 33
38082: PUSH
38083: LD_STRING 
38085: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
38086: LD_ADDR_OWVAR 35
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PPUSH
38095: LD_INT 2
38097: PPUSH
38098: CALL_OW 12
38102: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
38103: LD_ADDR_OWVAR 31
38107: PUSH
38108: LD_INT 1
38110: PPUSH
38111: LD_INT 3
38113: PPUSH
38114: CALL_OW 12
38118: PUSH
38119: LD_INT 1
38121: PPUSH
38122: LD_INT 3
38124: PPUSH
38125: CALL_OW 12
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: ST_TO_ADDR
// animal := CreateHuman ;
38142: LD_ADDR_VAR 0 12
38146: PUSH
38147: CALL_OW 44
38151: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38152: LD_VAR 0 12
38156: PPUSH
38157: LD_VAR 0 8
38161: PPUSH
38162: LD_INT 0
38164: PPUSH
38165: CALL 39958 0 3
// end ;
38169: GO 38067
38171: POP
38172: POP
// if enchidnas then
38173: LD_VAR 0 4
38177: IFFALSE 38244
// for i = 1 to enchidnas do
38179: LD_ADDR_VAR 0 11
38183: PUSH
38184: DOUBLE
38185: LD_INT 1
38187: DEC
38188: ST_TO_ADDR
38189: LD_VAR 0 4
38193: PUSH
38194: FOR_TO
38195: IFFALSE 38242
// begin hc_class = 13 ;
38197: LD_ADDR_OWVAR 28
38201: PUSH
38202: LD_INT 13
38204: ST_TO_ADDR
// hc_gallery =  ;
38205: LD_ADDR_OWVAR 33
38209: PUSH
38210: LD_STRING 
38212: ST_TO_ADDR
// animal := CreateHuman ;
38213: LD_ADDR_VAR 0 12
38217: PUSH
38218: CALL_OW 44
38222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
38223: LD_VAR 0 12
38227: PPUSH
38228: LD_VAR 0 8
38232: PPUSH
38233: LD_INT 0
38235: PPUSH
38236: CALL 39958 0 3
// end ;
38240: GO 38194
38242: POP
38243: POP
// if fishes then
38244: LD_VAR 0 7
38248: IFFALSE 38315
// for i = 1 to fishes do
38250: LD_ADDR_VAR 0 11
38254: PUSH
38255: DOUBLE
38256: LD_INT 1
38258: DEC
38259: ST_TO_ADDR
38260: LD_VAR 0 7
38264: PUSH
38265: FOR_TO
38266: IFFALSE 38313
// begin hc_class = 20 ;
38268: LD_ADDR_OWVAR 28
38272: PUSH
38273: LD_INT 20
38275: ST_TO_ADDR
// hc_gallery =  ;
38276: LD_ADDR_OWVAR 33
38280: PUSH
38281: LD_STRING 
38283: ST_TO_ADDR
// animal := CreateHuman ;
38284: LD_ADDR_VAR 0 12
38288: PUSH
38289: CALL_OW 44
38293: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
38294: LD_VAR 0 12
38298: PPUSH
38299: LD_VAR 0 9
38303: PPUSH
38304: LD_INT 0
38306: PPUSH
38307: CALL 39958 0 3
// end ;
38311: GO 38265
38313: POP
38314: POP
// end ;
38315: LD_VAR 0 10
38319: RET
// export function WantHeal ( sci , unit ) ; begin
38320: LD_INT 0
38322: PPUSH
// if GetTaskList ( sci ) > 0 then
38323: LD_VAR 0 1
38327: PPUSH
38328: CALL_OW 437
38332: PUSH
38333: LD_INT 0
38335: GREATER
38336: IFFALSE 38408
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
38338: LD_VAR 0 1
38342: PPUSH
38343: CALL_OW 437
38347: PUSH
38348: LD_INT 1
38350: ARRAY
38351: PUSH
38352: LD_INT 1
38354: ARRAY
38355: PUSH
38356: LD_STRING l
38358: EQUAL
38359: IFFALSE 38386
38361: PUSH
38362: LD_VAR 0 1
38366: PPUSH
38367: CALL_OW 437
38371: PUSH
38372: LD_INT 1
38374: ARRAY
38375: PUSH
38376: LD_INT 4
38378: ARRAY
38379: PUSH
38380: LD_VAR 0 2
38384: EQUAL
38385: AND
38386: IFFALSE 38398
// result := true else
38388: LD_ADDR_VAR 0 3
38392: PUSH
38393: LD_INT 1
38395: ST_TO_ADDR
38396: GO 38406
// result := false ;
38398: LD_ADDR_VAR 0 3
38402: PUSH
38403: LD_INT 0
38405: ST_TO_ADDR
// end else
38406: GO 38416
// result := false ;
38408: LD_ADDR_VAR 0 3
38412: PUSH
38413: LD_INT 0
38415: ST_TO_ADDR
// end ;
38416: LD_VAR 0 3
38420: RET
// export function HealTarget ( sci ) ; begin
38421: LD_INT 0
38423: PPUSH
// if not sci then
38424: LD_VAR 0 1
38428: NOT
38429: IFFALSE 38433
// exit ;
38431: GO 38498
// result := 0 ;
38433: LD_ADDR_VAR 0 2
38437: PUSH
38438: LD_INT 0
38440: ST_TO_ADDR
// if GetTaskList ( sci ) then
38441: LD_VAR 0 1
38445: PPUSH
38446: CALL_OW 437
38450: IFFALSE 38498
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
38452: LD_VAR 0 1
38456: PPUSH
38457: CALL_OW 437
38461: PUSH
38462: LD_INT 1
38464: ARRAY
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: PUSH
38470: LD_STRING l
38472: EQUAL
38473: IFFALSE 38498
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
38475: LD_ADDR_VAR 0 2
38479: PUSH
38480: LD_VAR 0 1
38484: PPUSH
38485: CALL_OW 437
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PUSH
38494: LD_INT 4
38496: ARRAY
38497: ST_TO_ADDR
// end ;
38498: LD_VAR 0 2
38502: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
38503: LD_INT 0
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
// if not base_units then
38509: LD_VAR 0 1
38513: NOT
38514: IFFALSE 38518
// exit ;
38516: GO 38605
// result := false ;
38518: LD_ADDR_VAR 0 2
38522: PUSH
38523: LD_INT 0
38525: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
38526: LD_ADDR_VAR 0 5
38530: PUSH
38531: LD_VAR 0 1
38535: PPUSH
38536: LD_INT 21
38538: PUSH
38539: LD_INT 3
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PPUSH
38546: CALL_OW 72
38550: ST_TO_ADDR
// if not tmp then
38551: LD_VAR 0 5
38555: NOT
38556: IFFALSE 38560
// exit ;
38558: GO 38605
// for i in tmp do
38560: LD_ADDR_VAR 0 3
38564: PUSH
38565: LD_VAR 0 5
38569: PUSH
38570: FOR_IN
38571: IFFALSE 38603
// begin result := EnemyInRange ( i , 22 ) ;
38573: LD_ADDR_VAR 0 2
38577: PUSH
38578: LD_VAR 0 3
38582: PPUSH
38583: LD_INT 22
38585: PPUSH
38586: CALL 36030 0 2
38590: ST_TO_ADDR
// if result then
38591: LD_VAR 0 2
38595: IFFALSE 38601
// exit ;
38597: POP
38598: POP
38599: GO 38605
// end ;
38601: GO 38570
38603: POP
38604: POP
// end ;
38605: LD_VAR 0 2
38609: RET
// export function FilterByTag ( units , tag ) ; begin
38610: LD_INT 0
38612: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
38613: LD_ADDR_VAR 0 3
38617: PUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: LD_INT 120
38625: PUSH
38626: LD_VAR 0 2
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PPUSH
38635: CALL_OW 72
38639: ST_TO_ADDR
// end ;
38640: LD_VAR 0 3
38644: RET
// export function IsDriver ( un ) ; begin
38645: LD_INT 0
38647: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
38648: LD_ADDR_VAR 0 2
38652: PUSH
38653: LD_VAR 0 1
38657: PUSH
38658: LD_INT 55
38660: PUSH
38661: EMPTY
38662: LIST
38663: PPUSH
38664: CALL_OW 69
38668: IN
38669: ST_TO_ADDR
// end ;
38670: LD_VAR 0 2
38674: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
38675: LD_INT 0
38677: PPUSH
38678: PPUSH
// list := [ ] ;
38679: LD_ADDR_VAR 0 5
38683: PUSH
38684: EMPTY
38685: ST_TO_ADDR
// case d of 0 :
38686: LD_VAR 0 3
38690: PUSH
38691: LD_INT 0
38693: DOUBLE
38694: EQUAL
38695: IFTRUE 38699
38697: GO 38832
38699: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
38700: LD_ADDR_VAR 0 5
38704: PUSH
38705: LD_VAR 0 1
38709: PUSH
38710: LD_INT 4
38712: MINUS
38713: PUSH
38714: LD_VAR 0 2
38718: PUSH
38719: LD_INT 4
38721: MINUS
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: LIST
38730: PUSH
38731: LD_VAR 0 1
38735: PUSH
38736: LD_INT 3
38738: MINUS
38739: PUSH
38740: LD_VAR 0 2
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: PUSH
38753: LD_VAR 0 1
38757: PUSH
38758: LD_INT 4
38760: PLUS
38761: PUSH
38762: LD_VAR 0 2
38766: PUSH
38767: LD_INT 4
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: LIST
38774: PUSH
38775: LD_VAR 0 1
38779: PUSH
38780: LD_INT 3
38782: PLUS
38783: PUSH
38784: LD_VAR 0 2
38788: PUSH
38789: LD_INT 3
38791: PLUS
38792: PUSH
38793: LD_INT 5
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: PUSH
38801: LD_VAR 0 1
38805: PUSH
38806: LD_VAR 0 2
38810: PUSH
38811: LD_INT 4
38813: PLUS
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: LIST
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: ST_TO_ADDR
// end ; 1 :
38830: GO 39530
38832: LD_INT 1
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38840
38838: GO 38973
38840: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
38841: LD_ADDR_VAR 0 5
38845: PUSH
38846: LD_VAR 0 1
38850: PUSH
38851: LD_VAR 0 2
38855: PUSH
38856: LD_INT 4
38858: MINUS
38859: PUSH
38860: LD_INT 3
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: LIST
38867: PUSH
38868: LD_VAR 0 1
38872: PUSH
38873: LD_INT 3
38875: MINUS
38876: PUSH
38877: LD_VAR 0 2
38881: PUSH
38882: LD_INT 3
38884: MINUS
38885: PUSH
38886: LD_INT 2
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: LIST
38893: PUSH
38894: LD_VAR 0 1
38898: PUSH
38899: LD_INT 4
38901: MINUS
38902: PUSH
38903: LD_VAR 0 2
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: PUSH
38916: LD_VAR 0 1
38920: PUSH
38921: LD_VAR 0 2
38925: PUSH
38926: LD_INT 3
38928: PLUS
38929: PUSH
38930: LD_INT 0
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: LIST
38937: PUSH
38938: LD_VAR 0 1
38942: PUSH
38943: LD_INT 4
38945: PLUS
38946: PUSH
38947: LD_VAR 0 2
38951: PUSH
38952: LD_INT 4
38954: PLUS
38955: PUSH
38956: LD_INT 5
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: LIST
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: ST_TO_ADDR
// end ; 2 :
38971: GO 39530
38973: LD_INT 2
38975: DOUBLE
38976: EQUAL
38977: IFTRUE 38981
38979: GO 39110
38981: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
38982: LD_ADDR_VAR 0 5
38986: PUSH
38987: LD_VAR 0 1
38991: PUSH
38992: LD_VAR 0 2
38996: PUSH
38997: LD_INT 3
38999: MINUS
39000: PUSH
39001: LD_INT 3
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: PUSH
39009: LD_VAR 0 1
39013: PUSH
39014: LD_INT 4
39016: PLUS
39017: PUSH
39018: LD_VAR 0 2
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PUSH
39031: LD_VAR 0 1
39035: PUSH
39036: LD_VAR 0 2
39040: PUSH
39041: LD_INT 4
39043: PLUS
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: LIST
39052: PUSH
39053: LD_VAR 0 1
39057: PUSH
39058: LD_INT 3
39060: MINUS
39061: PUSH
39062: LD_VAR 0 2
39066: PUSH
39067: LD_INT 1
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_INT 4
39082: MINUS
39083: PUSH
39084: LD_VAR 0 2
39088: PUSH
39089: LD_INT 4
39091: MINUS
39092: PUSH
39093: LD_INT 2
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: ST_TO_ADDR
// end ; 3 :
39108: GO 39530
39110: LD_INT 3
39112: DOUBLE
39113: EQUAL
39114: IFTRUE 39118
39116: GO 39251
39118: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
39119: LD_ADDR_VAR 0 5
39123: PUSH
39124: LD_VAR 0 1
39128: PUSH
39129: LD_INT 3
39131: PLUS
39132: PUSH
39133: LD_VAR 0 2
39137: PUSH
39138: LD_INT 4
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: LIST
39145: PUSH
39146: LD_VAR 0 1
39150: PUSH
39151: LD_INT 4
39153: PLUS
39154: PUSH
39155: LD_VAR 0 2
39159: PUSH
39160: LD_INT 4
39162: PLUS
39163: PUSH
39164: LD_INT 5
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: LIST
39171: PUSH
39172: LD_VAR 0 1
39176: PUSH
39177: LD_INT 4
39179: MINUS
39180: PUSH
39181: LD_VAR 0 2
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: LIST
39193: PUSH
39194: LD_VAR 0 1
39198: PUSH
39199: LD_VAR 0 2
39203: PUSH
39204: LD_INT 4
39206: MINUS
39207: PUSH
39208: LD_INT 3
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: PUSH
39216: LD_VAR 0 1
39220: PUSH
39221: LD_INT 3
39223: MINUS
39224: PUSH
39225: LD_VAR 0 2
39229: PUSH
39230: LD_INT 3
39232: MINUS
39233: PUSH
39234: LD_INT 2
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: ST_TO_ADDR
// end ; 4 :
39249: GO 39530
39251: LD_INT 4
39253: DOUBLE
39254: EQUAL
39255: IFTRUE 39259
39257: GO 39392
39259: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
39260: LD_ADDR_VAR 0 5
39264: PUSH
39265: LD_VAR 0 1
39269: PUSH
39270: LD_VAR 0 2
39274: PUSH
39275: LD_INT 4
39277: PLUS
39278: PUSH
39279: LD_INT 0
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: PUSH
39287: LD_VAR 0 1
39291: PUSH
39292: LD_INT 3
39294: PLUS
39295: PUSH
39296: LD_VAR 0 2
39300: PUSH
39301: LD_INT 3
39303: PLUS
39304: PUSH
39305: LD_INT 5
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: LIST
39312: PUSH
39313: LD_VAR 0 1
39317: PUSH
39318: LD_INT 4
39320: PLUS
39321: PUSH
39322: LD_VAR 0 2
39326: PUSH
39327: LD_INT 4
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: PUSH
39335: LD_VAR 0 1
39339: PUSH
39340: LD_VAR 0 2
39344: PUSH
39345: LD_INT 3
39347: MINUS
39348: PUSH
39349: LD_INT 3
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: PUSH
39357: LD_VAR 0 1
39361: PUSH
39362: LD_INT 4
39364: MINUS
39365: PUSH
39366: LD_VAR 0 2
39370: PUSH
39371: LD_INT 4
39373: MINUS
39374: PUSH
39375: LD_INT 2
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: LIST
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: ST_TO_ADDR
// end ; 5 :
39390: GO 39530
39392: LD_INT 5
39394: DOUBLE
39395: EQUAL
39396: IFTRUE 39400
39398: GO 39529
39400: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
39401: LD_ADDR_VAR 0 5
39405: PUSH
39406: LD_VAR 0 1
39410: PUSH
39411: LD_INT 4
39413: MINUS
39414: PUSH
39415: LD_VAR 0 2
39419: PUSH
39420: LD_INT 1
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: LIST
39427: PUSH
39428: LD_VAR 0 1
39432: PUSH
39433: LD_VAR 0 2
39437: PUSH
39438: LD_INT 4
39440: MINUS
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: PUSH
39450: LD_VAR 0 1
39454: PUSH
39455: LD_INT 4
39457: PLUS
39458: PUSH
39459: LD_VAR 0 2
39463: PUSH
39464: LD_INT 4
39466: PLUS
39467: PUSH
39468: LD_INT 5
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: LD_VAR 0 1
39480: PUSH
39481: LD_INT 3
39483: PLUS
39484: PUSH
39485: LD_VAR 0 2
39489: PUSH
39490: LD_INT 4
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: PUSH
39498: LD_VAR 0 1
39502: PUSH
39503: LD_VAR 0 2
39507: PUSH
39508: LD_INT 3
39510: PLUS
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// end ; end ;
39527: GO 39530
39529: POP
// result := list ;
39530: LD_ADDR_VAR 0 4
39534: PUSH
39535: LD_VAR 0 5
39539: ST_TO_ADDR
// end ;
39540: LD_VAR 0 4
39544: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
39545: LD_INT 0
39547: PPUSH
39548: PPUSH
39549: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
39550: LD_VAR 0 1
39554: NOT
39555: IFTRUE 39583
39557: PUSH
39558: LD_VAR 0 2
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: LD_INT 3
39571: PUSH
39572: LD_INT 4
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: IN
39581: NOT
39582: OR
39583: IFFALSE 39587
// exit ;
39585: GO 39670
// tmp := [ ] ;
39587: LD_ADDR_VAR 0 5
39591: PUSH
39592: EMPTY
39593: ST_TO_ADDR
// for i in units do
39594: LD_ADDR_VAR 0 4
39598: PUSH
39599: LD_VAR 0 1
39603: PUSH
39604: FOR_IN
39605: IFFALSE 39639
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
39607: LD_ADDR_VAR 0 5
39611: PUSH
39612: LD_VAR 0 5
39616: PPUSH
39617: LD_VAR 0 4
39621: PPUSH
39622: LD_VAR 0 2
39626: PPUSH
39627: CALL_OW 259
39631: PPUSH
39632: CALL 41065 0 2
39636: ST_TO_ADDR
39637: GO 39604
39639: POP
39640: POP
// if not tmp then
39641: LD_VAR 0 5
39645: NOT
39646: IFFALSE 39650
// exit ;
39648: GO 39670
// result := SortListByListDesc ( units , tmp ) ;
39650: LD_ADDR_VAR 0 3
39654: PUSH
39655: LD_VAR 0 1
39659: PPUSH
39660: LD_VAR 0 5
39664: PPUSH
39665: CALL_OW 77
39669: ST_TO_ADDR
// end ;
39670: LD_VAR 0 3
39674: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
39675: LD_INT 0
39677: PPUSH
39678: PPUSH
39679: PPUSH
// result := false ;
39680: LD_ADDR_VAR 0 3
39684: PUSH
39685: LD_INT 0
39687: ST_TO_ADDR
// if not building then
39688: LD_VAR 0 2
39692: NOT
39693: IFFALSE 39697
// exit ;
39695: GO 39841
// x := GetX ( building ) ;
39697: LD_ADDR_VAR 0 4
39701: PUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: CALL_OW 250
39711: ST_TO_ADDR
// y := GetY ( building ) ;
39712: LD_ADDR_VAR 0 5
39716: PUSH
39717: LD_VAR 0 2
39721: PPUSH
39722: CALL_OW 251
39726: ST_TO_ADDR
// if not x or not y then
39727: LD_VAR 0 4
39731: NOT
39732: IFTRUE 39741
39734: PUSH
39735: LD_VAR 0 5
39739: NOT
39740: OR
39741: IFFALSE 39745
// exit ;
39743: GO 39841
// if GetTaskList ( unit ) then
39745: LD_VAR 0 1
39749: PPUSH
39750: CALL_OW 437
39754: IFFALSE 39841
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39756: LD_STRING e
39758: PUSH
39759: LD_VAR 0 1
39763: PPUSH
39764: CALL_OW 437
39768: PUSH
39769: LD_INT 1
39771: ARRAY
39772: PUSH
39773: LD_INT 1
39775: ARRAY
39776: EQUAL
39777: IFFALSE 39804
39779: PUSH
39780: LD_VAR 0 4
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 437
39794: PUSH
39795: LD_INT 1
39797: ARRAY
39798: PUSH
39799: LD_INT 2
39801: ARRAY
39802: EQUAL
39803: AND
39804: IFFALSE 39831
39806: PUSH
39807: LD_VAR 0 5
39811: PUSH
39812: LD_VAR 0 1
39816: PPUSH
39817: CALL_OW 437
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: PUSH
39826: LD_INT 3
39828: ARRAY
39829: EQUAL
39830: AND
39831: IFFALSE 39841
// result := true end ;
39833: LD_ADDR_VAR 0 3
39837: PUSH
39838: LD_INT 1
39840: ST_TO_ADDR
// end ;
39841: LD_VAR 0 3
39845: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
39846: LD_INT 0
39848: PPUSH
// result := false ;
39849: LD_ADDR_VAR 0 4
39853: PUSH
39854: LD_INT 0
39856: ST_TO_ADDR
// if GetTaskList ( unit ) then
39857: LD_VAR 0 1
39861: PPUSH
39862: CALL_OW 437
39866: IFFALSE 39953
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
39868: LD_STRING M
39870: PUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 437
39880: PUSH
39881: LD_INT 1
39883: ARRAY
39884: PUSH
39885: LD_INT 1
39887: ARRAY
39888: EQUAL
39889: IFFALSE 39916
39891: PUSH
39892: LD_VAR 0 2
39896: PUSH
39897: LD_VAR 0 1
39901: PPUSH
39902: CALL_OW 437
39906: PUSH
39907: LD_INT 1
39909: ARRAY
39910: PUSH
39911: LD_INT 2
39913: ARRAY
39914: EQUAL
39915: AND
39916: IFFALSE 39943
39918: PUSH
39919: LD_VAR 0 3
39923: PUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 437
39933: PUSH
39934: LD_INT 1
39936: ARRAY
39937: PUSH
39938: LD_INT 3
39940: ARRAY
39941: EQUAL
39942: AND
39943: IFFALSE 39953
// result := true ;
39945: LD_ADDR_VAR 0 4
39949: PUSH
39950: LD_INT 1
39952: ST_TO_ADDR
// end ; end ;
39953: LD_VAR 0 4
39957: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
39958: LD_INT 0
39960: PPUSH
39961: PPUSH
39962: PPUSH
39963: PPUSH
// if not unit or not area then
39964: LD_VAR 0 1
39968: NOT
39969: IFTRUE 39978
39971: PUSH
39972: LD_VAR 0 2
39976: NOT
39977: OR
39978: IFFALSE 39982
// exit ;
39980: GO 40158
// tmp := AreaToList ( area , i ) ;
39982: LD_ADDR_VAR 0 6
39986: PUSH
39987: LD_VAR 0 2
39991: PPUSH
39992: LD_VAR 0 5
39996: PPUSH
39997: CALL_OW 517
40001: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
40002: LD_ADDR_VAR 0 5
40006: PUSH
40007: DOUBLE
40008: LD_INT 1
40010: DEC
40011: ST_TO_ADDR
40012: LD_VAR 0 6
40016: PUSH
40017: LD_INT 1
40019: ARRAY
40020: PUSH
40021: FOR_TO
40022: IFFALSE 40156
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
40024: LD_ADDR_VAR 0 7
40028: PUSH
40029: LD_VAR 0 6
40033: PUSH
40034: LD_INT 1
40036: ARRAY
40037: PUSH
40038: LD_VAR 0 5
40042: ARRAY
40043: PUSH
40044: LD_VAR 0 6
40048: PUSH
40049: LD_INT 2
40051: ARRAY
40052: PUSH
40053: LD_VAR 0 5
40057: ARRAY
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
40063: LD_INT 92
40065: PUSH
40066: LD_VAR 0 7
40070: PUSH
40071: LD_INT 1
40073: ARRAY
40074: PUSH
40075: LD_VAR 0 7
40079: PUSH
40080: LD_INT 2
40082: ARRAY
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: PPUSH
40093: CALL_OW 69
40097: PUSH
40098: LD_INT 0
40100: EQUAL
40101: IFFALSE 40154
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
40103: LD_VAR 0 1
40107: PPUSH
40108: LD_VAR 0 7
40112: PUSH
40113: LD_INT 1
40115: ARRAY
40116: PPUSH
40117: LD_VAR 0 7
40121: PUSH
40122: LD_INT 2
40124: ARRAY
40125: PPUSH
40126: LD_VAR 0 3
40130: PPUSH
40131: CALL_OW 48
// result := IsPlaced ( unit ) ;
40135: LD_ADDR_VAR 0 4
40139: PUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: CALL_OW 305
40149: ST_TO_ADDR
// exit ;
40150: POP
40151: POP
40152: GO 40158
// end ; end ;
40154: GO 40021
40156: POP
40157: POP
// end ;
40158: LD_VAR 0 4
40162: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
40163: LD_INT 0
40165: PPUSH
40166: PPUSH
40167: PPUSH
// if not side or side > 8 then
40168: LD_VAR 0 1
40172: NOT
40173: IFTRUE 40185
40175: PUSH
40176: LD_VAR 0 1
40180: PUSH
40181: LD_INT 8
40183: GREATER
40184: OR
40185: IFFALSE 40189
// exit ;
40187: GO 40376
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
40189: LD_ADDR_VAR 0 4
40193: PUSH
40194: LD_INT 22
40196: PUSH
40197: LD_VAR 0 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 21
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PPUSH
40220: CALL_OW 69
40224: ST_TO_ADDR
// if not tmp then
40225: LD_VAR 0 4
40229: NOT
40230: IFFALSE 40234
// exit ;
40232: GO 40376
// enable_addtolog := true ;
40234: LD_ADDR_OWVAR 81
40238: PUSH
40239: LD_INT 1
40241: ST_TO_ADDR
// AddToLog ( [ ) ;
40242: LD_STRING [
40244: PPUSH
40245: CALL_OW 561
// for i in tmp do
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_VAR 0 4
40258: PUSH
40259: FOR_IN
40260: IFFALSE 40367
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
40262: LD_STRING [
40264: PUSH
40265: LD_VAR 0 3
40269: PPUSH
40270: CALL_OW 266
40274: STR
40275: PUSH
40276: LD_STRING , 
40278: STR
40279: PUSH
40280: LD_VAR 0 3
40284: PPUSH
40285: CALL_OW 250
40289: STR
40290: PUSH
40291: LD_STRING , 
40293: STR
40294: PUSH
40295: LD_VAR 0 3
40299: PPUSH
40300: CALL_OW 251
40304: STR
40305: PUSH
40306: LD_STRING , 
40308: STR
40309: PUSH
40310: LD_VAR 0 3
40314: PPUSH
40315: CALL_OW 254
40319: STR
40320: PUSH
40321: LD_STRING , 
40323: STR
40324: PUSH
40325: LD_VAR 0 3
40329: PPUSH
40330: LD_INT 1
40332: PPUSH
40333: CALL_OW 268
40337: STR
40338: PUSH
40339: LD_STRING , 
40341: STR
40342: PUSH
40343: LD_VAR 0 3
40347: PPUSH
40348: LD_INT 2
40350: PPUSH
40351: CALL_OW 268
40355: STR
40356: PUSH
40357: LD_STRING ],
40359: STR
40360: PPUSH
40361: CALL_OW 561
// end ;
40365: GO 40259
40367: POP
40368: POP
// AddToLog ( ]; ) ;
40369: LD_STRING ];
40371: PPUSH
40372: CALL_OW 561
// end ;
40376: LD_VAR 0 2
40380: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
40381: LD_INT 0
40383: PPUSH
40384: PPUSH
40385: PPUSH
40386: PPUSH
40387: PPUSH
// if not area or not rate or not max then
40388: LD_VAR 0 1
40392: NOT
40393: IFTRUE 40402
40395: PUSH
40396: LD_VAR 0 2
40400: NOT
40401: OR
40402: IFTRUE 40411
40404: PUSH
40405: LD_VAR 0 4
40409: NOT
40410: OR
40411: IFFALSE 40415
// exit ;
40413: GO 40604
// while 1 do
40415: LD_INT 1
40417: IFFALSE 40604
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
40419: LD_ADDR_VAR 0 9
40423: PUSH
40424: LD_VAR 0 1
40428: PPUSH
40429: LD_INT 1
40431: PPUSH
40432: CALL_OW 287
40436: PUSH
40437: LD_INT 10
40439: MUL
40440: ST_TO_ADDR
// r := rate / 10 ;
40441: LD_ADDR_VAR 0 7
40445: PUSH
40446: LD_VAR 0 2
40450: PUSH
40451: LD_INT 10
40453: DIVREAL
40454: ST_TO_ADDR
// time := 1 1$00 ;
40455: LD_ADDR_VAR 0 8
40459: PUSH
40460: LD_INT 2100
40462: ST_TO_ADDR
// if amount < min then
40463: LD_VAR 0 9
40467: PUSH
40468: LD_VAR 0 3
40472: LESS
40473: IFFALSE 40491
// r := r * 2 else
40475: LD_ADDR_VAR 0 7
40479: PUSH
40480: LD_VAR 0 7
40484: PUSH
40485: LD_INT 2
40487: MUL
40488: ST_TO_ADDR
40489: GO 40517
// if amount > max then
40491: LD_VAR 0 9
40495: PUSH
40496: LD_VAR 0 4
40500: GREATER
40501: IFFALSE 40517
// r := r / 2 ;
40503: LD_ADDR_VAR 0 7
40507: PUSH
40508: LD_VAR 0 7
40512: PUSH
40513: LD_INT 2
40515: DIVREAL
40516: ST_TO_ADDR
// time := time / r ;
40517: LD_ADDR_VAR 0 8
40521: PUSH
40522: LD_VAR 0 8
40526: PUSH
40527: LD_VAR 0 7
40531: DIVREAL
40532: ST_TO_ADDR
// if time < 0 then
40533: LD_VAR 0 8
40537: PUSH
40538: LD_INT 0
40540: LESS
40541: IFFALSE 40558
// time := time * - 1 ;
40543: LD_ADDR_VAR 0 8
40547: PUSH
40548: LD_VAR 0 8
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: MUL
40557: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
40558: LD_VAR 0 8
40562: PUSH
40563: LD_INT 35
40565: PPUSH
40566: LD_INT 875
40568: PPUSH
40569: CALL_OW 12
40573: PLUS
40574: PPUSH
40575: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
40579: LD_INT 1
40581: PPUSH
40582: LD_INT 5
40584: PPUSH
40585: CALL_OW 12
40589: PPUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: LD_INT 1
40597: PPUSH
40598: CALL_OW 55
// end ;
40602: GO 40415
// end ;
40604: LD_VAR 0 5
40608: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
40609: LD_INT 0
40611: PPUSH
40612: PPUSH
40613: PPUSH
40614: PPUSH
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
// if not turrets or not factories then
40619: LD_VAR 0 1
40623: NOT
40624: IFTRUE 40633
40626: PUSH
40627: LD_VAR 0 2
40631: NOT
40632: OR
40633: IFFALSE 40637
// exit ;
40635: GO 40944
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
40637: LD_ADDR_VAR 0 10
40641: PUSH
40642: LD_INT 5
40644: PUSH
40645: LD_INT 6
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 4
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 3
40664: PUSH
40665: LD_INT 5
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 24
40679: PUSH
40680: LD_INT 25
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 23
40689: PUSH
40690: LD_INT 27
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 42
40703: PUSH
40704: LD_INT 43
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 44
40713: PUSH
40714: LD_INT 46
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 45
40723: PUSH
40724: LD_INT 47
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: ST_TO_ADDR
// result := [ ] ;
40741: LD_ADDR_VAR 0 3
40745: PUSH
40746: EMPTY
40747: ST_TO_ADDR
// for i in turrets do
40748: LD_ADDR_VAR 0 4
40752: PUSH
40753: LD_VAR 0 1
40757: PUSH
40758: FOR_IN
40759: IFFALSE 40942
// begin nat := GetNation ( i ) ;
40761: LD_ADDR_VAR 0 7
40765: PUSH
40766: LD_VAR 0 4
40770: PPUSH
40771: CALL_OW 248
40775: ST_TO_ADDR
// weapon := 0 ;
40776: LD_ADDR_VAR 0 8
40780: PUSH
40781: LD_INT 0
40783: ST_TO_ADDR
// if not nat then
40784: LD_VAR 0 7
40788: NOT
40789: IFFALSE 40793
// continue ;
40791: GO 40758
// for j in list [ nat ] do
40793: LD_ADDR_VAR 0 5
40797: PUSH
40798: LD_VAR 0 10
40802: PUSH
40803: LD_VAR 0 7
40807: ARRAY
40808: PUSH
40809: FOR_IN
40810: IFFALSE 40851
// if GetBWeapon ( i ) = j [ 1 ] then
40812: LD_VAR 0 4
40816: PPUSH
40817: CALL_OW 269
40821: PUSH
40822: LD_VAR 0 5
40826: PUSH
40827: LD_INT 1
40829: ARRAY
40830: EQUAL
40831: IFFALSE 40849
// begin weapon := j [ 2 ] ;
40833: LD_ADDR_VAR 0 8
40837: PUSH
40838: LD_VAR 0 5
40842: PUSH
40843: LD_INT 2
40845: ARRAY
40846: ST_TO_ADDR
// break ;
40847: GO 40851
// end ;
40849: GO 40809
40851: POP
40852: POP
// if not weapon then
40853: LD_VAR 0 8
40857: NOT
40858: IFFALSE 40862
// continue ;
40860: GO 40758
// for k in factories do
40862: LD_ADDR_VAR 0 6
40866: PUSH
40867: LD_VAR 0 2
40871: PUSH
40872: FOR_IN
40873: IFFALSE 40938
// begin weapons := AvailableWeaponList ( k ) ;
40875: LD_ADDR_VAR 0 9
40879: PUSH
40880: LD_VAR 0 6
40884: PPUSH
40885: CALL_OW 478
40889: ST_TO_ADDR
// if not weapons then
40890: LD_VAR 0 9
40894: NOT
40895: IFFALSE 40899
// continue ;
40897: GO 40872
// if weapon in weapons then
40899: LD_VAR 0 8
40903: PUSH
40904: LD_VAR 0 9
40908: IN
40909: IFFALSE 40936
// begin result := [ i , weapon ] ;
40911: LD_ADDR_VAR 0 3
40915: PUSH
40916: LD_VAR 0 4
40920: PUSH
40921: LD_VAR 0 8
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: ST_TO_ADDR
// exit ;
40930: POP
40931: POP
40932: POP
40933: POP
40934: GO 40944
// end ; end ;
40936: GO 40872
40938: POP
40939: POP
// end ;
40940: GO 40758
40942: POP
40943: POP
// end ;
40944: LD_VAR 0 3
40948: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
40949: LD_INT 0
40951: PPUSH
// if not side or side > 8 then
40952: LD_VAR 0 3
40956: NOT
40957: IFTRUE 40969
40959: PUSH
40960: LD_VAR 0 3
40964: PUSH
40965: LD_INT 8
40967: GREATER
40968: OR
40969: IFFALSE 40973
// exit ;
40971: GO 41032
// if not range then
40973: LD_VAR 0 4
40977: NOT
40978: IFFALSE 40989
// range := - 12 ;
40980: LD_ADDR_VAR 0 4
40984: PUSH
40985: LD_INT 12
40987: NEG
40988: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
40989: LD_VAR 0 1
40993: PPUSH
40994: LD_VAR 0 2
40998: PPUSH
40999: LD_VAR 0 3
41003: PPUSH
41004: LD_VAR 0 4
41008: PPUSH
41009: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
41013: LD_VAR 0 1
41017: PPUSH
41018: LD_VAR 0 2
41022: PPUSH
41023: LD_VAR 0 3
41027: PPUSH
41028: CALL_OW 331
// end ;
41032: LD_VAR 0 5
41036: RET
// export function Video ( mode ) ; begin
41037: LD_INT 0
41039: PPUSH
// ingame_video = mode ;
41040: LD_ADDR_OWVAR 52
41044: PUSH
41045: LD_VAR 0 1
41049: ST_TO_ADDR
// interface_hidden = mode ;
41050: LD_ADDR_OWVAR 54
41054: PUSH
41055: LD_VAR 0 1
41059: ST_TO_ADDR
// end ;
41060: LD_VAR 0 2
41064: RET
// export function Join ( array , element ) ; begin
41065: LD_INT 0
41067: PPUSH
// result := Replace ( array , array + 1 , element ) ;
41068: LD_ADDR_VAR 0 3
41072: PUSH
41073: LD_VAR 0 1
41077: PPUSH
41078: LD_VAR 0 1
41082: PUSH
41083: LD_INT 1
41085: PLUS
41086: PPUSH
41087: LD_VAR 0 2
41091: PPUSH
41092: CALL_OW 1
41096: ST_TO_ADDR
// end ;
41097: LD_VAR 0 3
41101: RET
// export function JoinUnion ( array , element ) ; begin
41102: LD_INT 0
41104: PPUSH
// result := array union element ;
41105: LD_ADDR_VAR 0 3
41109: PUSH
41110: LD_VAR 0 1
41114: PUSH
41115: LD_VAR 0 2
41119: UNION
41120: ST_TO_ADDR
// end ;
41121: LD_VAR 0 3
41125: RET
// export function GetBehemoths ( side ) ; begin
41126: LD_INT 0
41128: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
41129: LD_ADDR_VAR 0 2
41133: PUSH
41134: LD_INT 22
41136: PUSH
41137: LD_VAR 0 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 31
41148: PUSH
41149: LD_INT 25
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PPUSH
41160: CALL_OW 69
41164: ST_TO_ADDR
// end ;
41165: LD_VAR 0 2
41169: RET
// export function Shuffle ( array ) ; var i , index ; begin
41170: LD_INT 0
41172: PPUSH
41173: PPUSH
41174: PPUSH
// result := [ ] ;
41175: LD_ADDR_VAR 0 2
41179: PUSH
41180: EMPTY
41181: ST_TO_ADDR
// if not array then
41182: LD_VAR 0 1
41186: NOT
41187: IFFALSE 41191
// exit ;
41189: GO 41290
// Randomize ;
41191: CALL_OW 10
// for i = array downto 1 do
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: DOUBLE
41201: LD_VAR 0 1
41205: INC
41206: ST_TO_ADDR
41207: LD_INT 1
41209: PUSH
41210: FOR_DOWNTO
41211: IFFALSE 41288
// begin index := rand ( 1 , array ) ;
41213: LD_ADDR_VAR 0 4
41217: PUSH
41218: LD_INT 1
41220: PPUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: CALL_OW 12
41230: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
41231: LD_ADDR_VAR 0 2
41235: PUSH
41236: LD_VAR 0 2
41240: PPUSH
41241: LD_VAR 0 2
41245: PUSH
41246: LD_INT 1
41248: PLUS
41249: PPUSH
41250: LD_VAR 0 1
41254: PUSH
41255: LD_VAR 0 4
41259: ARRAY
41260: PPUSH
41261: CALL_OW 2
41265: ST_TO_ADDR
// array := Delete ( array , index ) ;
41266: LD_ADDR_VAR 0 1
41270: PUSH
41271: LD_VAR 0 1
41275: PPUSH
41276: LD_VAR 0 4
41280: PPUSH
41281: CALL_OW 3
41285: ST_TO_ADDR
// end ;
41286: GO 41210
41288: POP
41289: POP
// end ;
41290: LD_VAR 0 2
41294: RET
// export function GetBaseMaterials ( base ) ; begin
41295: LD_INT 0
41297: PPUSH
// result := [ 0 , 0 , 0 ] ;
41298: LD_ADDR_VAR 0 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 0
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: LIST
41316: ST_TO_ADDR
// if not base then
41317: LD_VAR 0 1
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41375
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
41326: LD_ADDR_VAR 0 2
41330: PUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: LD_INT 1
41338: PPUSH
41339: CALL_OW 275
41343: PUSH
41344: LD_VAR 0 1
41348: PPUSH
41349: LD_INT 2
41351: PPUSH
41352: CALL_OW 275
41356: PUSH
41357: LD_VAR 0 1
41361: PPUSH
41362: LD_INT 3
41364: PPUSH
41365: CALL_OW 275
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// end ;
41375: LD_VAR 0 2
41379: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
41380: LD_INT 0
41382: PPUSH
41383: PPUSH
// result := array ;
41384: LD_ADDR_VAR 0 3
41388: PUSH
41389: LD_VAR 0 1
41393: ST_TO_ADDR
// if size >= result then
41394: LD_VAR 0 2
41398: PUSH
41399: LD_VAR 0 3
41403: GREATEREQUAL
41404: IFFALSE 41408
// exit ;
41406: GO 41458
// if size then
41408: LD_VAR 0 2
41412: IFFALSE 41458
// for i := array downto size do
41414: LD_ADDR_VAR 0 4
41418: PUSH
41419: DOUBLE
41420: LD_VAR 0 1
41424: INC
41425: ST_TO_ADDR
41426: LD_VAR 0 2
41430: PUSH
41431: FOR_DOWNTO
41432: IFFALSE 41456
// result := Delete ( result , result ) ;
41434: LD_ADDR_VAR 0 3
41438: PUSH
41439: LD_VAR 0 3
41443: PPUSH
41444: LD_VAR 0 3
41448: PPUSH
41449: CALL_OW 3
41453: ST_TO_ADDR
41454: GO 41431
41456: POP
41457: POP
// end ;
41458: LD_VAR 0 3
41462: RET
// export function ComExit ( unit ) ; var tmp ; begin
41463: LD_INT 0
41465: PPUSH
41466: PPUSH
// if not IsInUnit ( unit ) then
41467: LD_VAR 0 1
41471: PPUSH
41472: CALL_OW 310
41476: NOT
41477: IFFALSE 41481
// exit ;
41479: GO 41541
// tmp := IsInUnit ( unit ) ;
41481: LD_ADDR_VAR 0 3
41485: PUSH
41486: LD_VAR 0 1
41490: PPUSH
41491: CALL_OW 310
41495: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
41496: LD_VAR 0 3
41500: PPUSH
41501: CALL_OW 247
41505: PUSH
41506: LD_INT 2
41508: EQUAL
41509: IFFALSE 41522
// ComExitVehicle ( unit ) else
41511: LD_VAR 0 1
41515: PPUSH
41516: CALL_OW 121
41520: GO 41531
// ComExitBuilding ( unit ) ;
41522: LD_VAR 0 1
41526: PPUSH
41527: CALL_OW 122
// result := tmp ;
41531: LD_ADDR_VAR 0 2
41535: PUSH
41536: LD_VAR 0 3
41540: ST_TO_ADDR
// end ;
41541: LD_VAR 0 2
41545: RET
// export function ComExitAll ( units ) ; var i ; begin
41546: LD_INT 0
41548: PPUSH
41549: PPUSH
// if not units then
41550: LD_VAR 0 1
41554: NOT
41555: IFFALSE 41559
// exit ;
41557: GO 41585
// for i in units do
41559: LD_ADDR_VAR 0 3
41563: PUSH
41564: LD_VAR 0 1
41568: PUSH
41569: FOR_IN
41570: IFFALSE 41583
// ComExit ( i ) ;
41572: LD_VAR 0 3
41576: PPUSH
41577: CALL 41463 0 1
41581: GO 41569
41583: POP
41584: POP
// end ;
41585: LD_VAR 0 2
41589: RET
// export function ResetHc ; begin
41590: LD_INT 0
41592: PPUSH
// InitHc ;
41593: CALL_OW 19
// hc_importance := 0 ;
41597: LD_ADDR_OWVAR 32
41601: PUSH
41602: LD_INT 0
41604: ST_TO_ADDR
// end ;
41605: LD_VAR 0 1
41609: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
41610: LD_INT 0
41612: PPUSH
41613: PPUSH
41614: PPUSH
// _x := ( x1 + x2 ) div 2 ;
41615: LD_ADDR_VAR 0 6
41619: PUSH
41620: LD_VAR 0 1
41624: PUSH
41625: LD_VAR 0 3
41629: PLUS
41630: PUSH
41631: LD_INT 2
41633: DIV
41634: ST_TO_ADDR
// if _x < 0 then
41635: LD_VAR 0 6
41639: PUSH
41640: LD_INT 0
41642: LESS
41643: IFFALSE 41660
// _x := _x * - 1 ;
41645: LD_ADDR_VAR 0 6
41649: PUSH
41650: LD_VAR 0 6
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: MUL
41659: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
41660: LD_ADDR_VAR 0 7
41664: PUSH
41665: LD_VAR 0 2
41669: PUSH
41670: LD_VAR 0 4
41674: PLUS
41675: PUSH
41676: LD_INT 2
41678: DIV
41679: ST_TO_ADDR
// if _y < 0 then
41680: LD_VAR 0 7
41684: PUSH
41685: LD_INT 0
41687: LESS
41688: IFFALSE 41705
// _y := _y * - 1 ;
41690: LD_ADDR_VAR 0 7
41694: PUSH
41695: LD_VAR 0 7
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: MUL
41704: ST_TO_ADDR
// result := [ _x , _y ] ;
41705: LD_ADDR_VAR 0 5
41709: PUSH
41710: LD_VAR 0 6
41714: PUSH
41715: LD_VAR 0 7
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: ST_TO_ADDR
// end ;
41724: LD_VAR 0 5
41728: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
41729: LD_INT 0
41731: PPUSH
41732: PPUSH
41733: PPUSH
41734: PPUSH
// task := GetTaskList ( unit ) ;
41735: LD_ADDR_VAR 0 7
41739: PUSH
41740: LD_VAR 0 1
41744: PPUSH
41745: CALL_OW 437
41749: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
41750: LD_VAR 0 7
41754: NOT
41755: IFFALSE 41774
41757: PUSH
41758: LD_VAR 0 1
41762: PPUSH
41763: LD_VAR 0 2
41767: PPUSH
41768: CALL_OW 308
41772: NOT
41773: AND
41774: IFFALSE 41778
// exit ;
41776: GO 41896
// if IsInArea ( unit , area ) then
41778: LD_VAR 0 1
41782: PPUSH
41783: LD_VAR 0 2
41787: PPUSH
41788: CALL_OW 308
41792: IFFALSE 41810
// begin ComMoveToArea ( unit , goAway ) ;
41794: LD_VAR 0 1
41798: PPUSH
41799: LD_VAR 0 3
41803: PPUSH
41804: CALL_OW 113
// exit ;
41808: GO 41896
// end ; if task [ 1 ] [ 1 ] <> M then
41810: LD_VAR 0 7
41814: PUSH
41815: LD_INT 1
41817: ARRAY
41818: PUSH
41819: LD_INT 1
41821: ARRAY
41822: PUSH
41823: LD_STRING M
41825: NONEQUAL
41826: IFFALSE 41830
// exit ;
41828: GO 41896
// x := task [ 1 ] [ 2 ] ;
41830: LD_ADDR_VAR 0 5
41834: PUSH
41835: LD_VAR 0 7
41839: PUSH
41840: LD_INT 1
41842: ARRAY
41843: PUSH
41844: LD_INT 2
41846: ARRAY
41847: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
41848: LD_ADDR_VAR 0 6
41852: PUSH
41853: LD_VAR 0 7
41857: PUSH
41858: LD_INT 1
41860: ARRAY
41861: PUSH
41862: LD_INT 3
41864: ARRAY
41865: ST_TO_ADDR
// if InArea ( x , y , area ) then
41866: LD_VAR 0 5
41870: PPUSH
41871: LD_VAR 0 6
41875: PPUSH
41876: LD_VAR 0 2
41880: PPUSH
41881: CALL_OW 309
41885: IFFALSE 41896
// ComStop ( unit ) ;
41887: LD_VAR 0 1
41891: PPUSH
41892: CALL_OW 141
// end ;
41896: LD_VAR 0 4
41900: RET
// export function Abs ( value ) ; begin
41901: LD_INT 0
41903: PPUSH
// result := value ;
41904: LD_ADDR_VAR 0 2
41908: PUSH
41909: LD_VAR 0 1
41913: ST_TO_ADDR
// if value < 0 then
41914: LD_VAR 0 1
41918: PUSH
41919: LD_INT 0
41921: LESS
41922: IFFALSE 41939
// result := value * - 1 ;
41924: LD_ADDR_VAR 0 2
41928: PUSH
41929: LD_VAR 0 1
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: MUL
41938: ST_TO_ADDR
// end ;
41939: LD_VAR 0 2
41943: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
41944: LD_INT 0
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
// if not unit or not building then
41954: LD_VAR 0 1
41958: NOT
41959: IFTRUE 41968
41961: PUSH
41962: LD_VAR 0 2
41966: NOT
41967: OR
41968: IFFALSE 41972
// exit ;
41970: GO 42200
// x := GetX ( building ) ;
41972: LD_ADDR_VAR 0 4
41976: PUSH
41977: LD_VAR 0 2
41981: PPUSH
41982: CALL_OW 250
41986: ST_TO_ADDR
// y := GetY ( building ) ;
41987: LD_ADDR_VAR 0 6
41991: PUSH
41992: LD_VAR 0 2
41996: PPUSH
41997: CALL_OW 251
42001: ST_TO_ADDR
// d := GetDir ( building ) ;
42002: LD_ADDR_VAR 0 8
42006: PUSH
42007: LD_VAR 0 2
42011: PPUSH
42012: CALL_OW 254
42016: ST_TO_ADDR
// r := 4 ;
42017: LD_ADDR_VAR 0 9
42021: PUSH
42022: LD_INT 4
42024: ST_TO_ADDR
// for i := 1 to 5 do
42025: LD_ADDR_VAR 0 10
42029: PUSH
42030: DOUBLE
42031: LD_INT 1
42033: DEC
42034: ST_TO_ADDR
42035: LD_INT 5
42037: PUSH
42038: FOR_TO
42039: IFFALSE 42198
// begin _x := ShiftX ( x , d , r + i ) ;
42041: LD_ADDR_VAR 0 5
42045: PUSH
42046: LD_VAR 0 4
42050: PPUSH
42051: LD_VAR 0 8
42055: PPUSH
42056: LD_VAR 0 9
42060: PUSH
42061: LD_VAR 0 10
42065: PLUS
42066: PPUSH
42067: CALL_OW 272
42071: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
42072: LD_ADDR_VAR 0 7
42076: PUSH
42077: LD_VAR 0 6
42081: PPUSH
42082: LD_VAR 0 8
42086: PPUSH
42087: LD_VAR 0 9
42091: PUSH
42092: LD_VAR 0 10
42096: PLUS
42097: PPUSH
42098: CALL_OW 273
42102: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
42103: LD_VAR 0 5
42107: PPUSH
42108: LD_VAR 0 7
42112: PPUSH
42113: CALL_OW 488
42117: IFFALSE 42152
42119: PUSH
42120: LD_VAR 0 5
42124: PPUSH
42125: LD_VAR 0 7
42129: PPUSH
42130: CALL_OW 428
42134: PPUSH
42135: CALL_OW 247
42139: PUSH
42140: LD_INT 3
42142: PUSH
42143: LD_INT 2
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: IN
42150: NOT
42151: AND
42152: IFFALSE 42196
// begin ComMoveXY ( unit , _x , _y ) ;
42154: LD_VAR 0 1
42158: PPUSH
42159: LD_VAR 0 5
42163: PPUSH
42164: LD_VAR 0 7
42168: PPUSH
42169: CALL_OW 111
// result := [ _x , _y ] ;
42173: LD_ADDR_VAR 0 3
42177: PUSH
42178: LD_VAR 0 5
42182: PUSH
42183: LD_VAR 0 7
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// exit ;
42192: POP
42193: POP
42194: GO 42200
// end ; end ;
42196: GO 42038
42198: POP
42199: POP
// end ;
42200: LD_VAR 0 3
42204: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
42205: LD_INT 0
42207: PPUSH
42208: PPUSH
42209: PPUSH
// result := 0 ;
42210: LD_ADDR_VAR 0 3
42214: PUSH
42215: LD_INT 0
42217: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
42218: LD_VAR 0 1
42222: PUSH
42223: LD_INT 0
42225: LESS
42226: IFTRUE 42238
42228: PUSH
42229: LD_VAR 0 1
42233: PUSH
42234: LD_INT 8
42236: GREATER
42237: OR
42238: IFTRUE 42250
42240: PUSH
42241: LD_VAR 0 2
42245: PUSH
42246: LD_INT 0
42248: LESS
42249: OR
42250: IFTRUE 42262
42252: PUSH
42253: LD_VAR 0 2
42257: PUSH
42258: LD_INT 8
42260: GREATER
42261: OR
42262: IFFALSE 42266
// exit ;
42264: GO 42341
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
42266: LD_ADDR_VAR 0 4
42270: PUSH
42271: LD_INT 22
42273: PUSH
42274: LD_VAR 0 2
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PPUSH
42283: CALL_OW 69
42287: PUSH
42288: FOR_IN
42289: IFFALSE 42339
// begin un := UnitShoot ( i ) ;
42291: LD_ADDR_VAR 0 5
42295: PUSH
42296: LD_VAR 0 4
42300: PPUSH
42301: CALL_OW 504
42305: ST_TO_ADDR
// if GetSide ( un ) = side1 then
42306: LD_VAR 0 5
42310: PPUSH
42311: CALL_OW 255
42315: PUSH
42316: LD_VAR 0 1
42320: EQUAL
42321: IFFALSE 42337
// begin result := un ;
42323: LD_ADDR_VAR 0 3
42327: PUSH
42328: LD_VAR 0 5
42332: ST_TO_ADDR
// exit ;
42333: POP
42334: POP
42335: GO 42341
// end ; end ;
42337: GO 42288
42339: POP
42340: POP
// end ;
42341: LD_VAR 0 3
42345: RET
// export function GetCargoBay ( units ) ; begin
42346: LD_INT 0
42348: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
42349: LD_ADDR_VAR 0 2
42353: PUSH
42354: LD_VAR 0 1
42358: PPUSH
42359: LD_INT 2
42361: PUSH
42362: LD_INT 34
42364: PUSH
42365: LD_INT 12
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 34
42374: PUSH
42375: LD_INT 51
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 34
42384: PUSH
42385: LD_INT 32
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 34
42394: PUSH
42395: LD_INT 89
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: LIST
42406: LIST
42407: LIST
42408: PPUSH
42409: CALL_OW 72
42413: ST_TO_ADDR
// end ;
42414: LD_VAR 0 2
42418: RET
// export function Negate ( value ) ; begin
42419: LD_INT 0
42421: PPUSH
// result := not value ;
42422: LD_ADDR_VAR 0 2
42426: PUSH
42427: LD_VAR 0 1
42431: NOT
42432: ST_TO_ADDR
// end ;
42433: LD_VAR 0 2
42437: RET
// export function Inc ( value ) ; begin
42438: LD_INT 0
42440: PPUSH
// result := value + 1 ;
42441: LD_ADDR_VAR 0 2
42445: PUSH
42446: LD_VAR 0 1
42450: PUSH
42451: LD_INT 1
42453: PLUS
42454: ST_TO_ADDR
// end ;
42455: LD_VAR 0 2
42459: RET
// export function Dec ( value ) ; begin
42460: LD_INT 0
42462: PPUSH
// result := value - 1 ;
42463: LD_ADDR_VAR 0 2
42467: PUSH
42468: LD_VAR 0 1
42472: PUSH
42473: LD_INT 1
42475: MINUS
42476: ST_TO_ADDR
// end ;
42477: LD_VAR 0 2
42481: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
42482: LD_INT 0
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
42492: LD_VAR 0 1
42496: PPUSH
42497: LD_VAR 0 2
42501: PPUSH
42502: CALL_OW 488
42506: NOT
42507: IFTRUE 42526
42509: PUSH
42510: LD_VAR 0 3
42514: PPUSH
42515: LD_VAR 0 4
42519: PPUSH
42520: CALL_OW 488
42524: NOT
42525: OR
42526: IFFALSE 42539
// begin result := - 1 ;
42528: LD_ADDR_VAR 0 5
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: ST_TO_ADDR
// exit ;
42537: GO 42774
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
42539: LD_ADDR_VAR 0 12
42543: PUSH
42544: LD_VAR 0 1
42548: PPUSH
42549: LD_VAR 0 2
42553: PPUSH
42554: LD_VAR 0 3
42558: PPUSH
42559: LD_VAR 0 4
42563: PPUSH
42564: CALL 41610 0 4
42568: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
42569: LD_ADDR_VAR 0 11
42573: PUSH
42574: LD_VAR 0 1
42578: PPUSH
42579: LD_VAR 0 2
42583: PPUSH
42584: LD_VAR 0 12
42588: PUSH
42589: LD_INT 1
42591: ARRAY
42592: PPUSH
42593: LD_VAR 0 12
42597: PUSH
42598: LD_INT 2
42600: ARRAY
42601: PPUSH
42602: CALL_OW 298
42606: ST_TO_ADDR
// distance := 9999 ;
42607: LD_ADDR_VAR 0 10
42611: PUSH
42612: LD_INT 9999
42614: ST_TO_ADDR
// for i := 0 to 5 do
42615: LD_ADDR_VAR 0 6
42619: PUSH
42620: DOUBLE
42621: LD_INT 0
42623: DEC
42624: ST_TO_ADDR
42625: LD_INT 5
42627: PUSH
42628: FOR_TO
42629: IFFALSE 42772
// begin _x := ShiftX ( x1 , i , centerDist ) ;
42631: LD_ADDR_VAR 0 7
42635: PUSH
42636: LD_VAR 0 1
42640: PPUSH
42641: LD_VAR 0 6
42645: PPUSH
42646: LD_VAR 0 11
42650: PPUSH
42651: CALL_OW 272
42655: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
42656: LD_ADDR_VAR 0 8
42660: PUSH
42661: LD_VAR 0 2
42665: PPUSH
42666: LD_VAR 0 6
42670: PPUSH
42671: LD_VAR 0 11
42675: PPUSH
42676: CALL_OW 273
42680: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42681: LD_VAR 0 7
42685: PPUSH
42686: LD_VAR 0 8
42690: PPUSH
42691: CALL_OW 488
42695: NOT
42696: IFFALSE 42700
// continue ;
42698: GO 42628
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
42700: LD_ADDR_VAR 0 9
42704: PUSH
42705: LD_VAR 0 12
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PPUSH
42714: LD_VAR 0 12
42718: PUSH
42719: LD_INT 2
42721: ARRAY
42722: PPUSH
42723: LD_VAR 0 7
42727: PPUSH
42728: LD_VAR 0 8
42732: PPUSH
42733: CALL_OW 298
42737: ST_TO_ADDR
// if tmp < distance then
42738: LD_VAR 0 9
42742: PUSH
42743: LD_VAR 0 10
42747: LESS
42748: IFFALSE 42770
// begin result := i ;
42750: LD_ADDR_VAR 0 5
42754: PUSH
42755: LD_VAR 0 6
42759: ST_TO_ADDR
// distance := tmp ;
42760: LD_ADDR_VAR 0 10
42764: PUSH
42765: LD_VAR 0 9
42769: ST_TO_ADDR
// end ; end ;
42770: GO 42628
42772: POP
42773: POP
// end ;
42774: LD_VAR 0 5
42778: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42779: LD_INT 0
42781: PPUSH
42782: PPUSH
// if not driver or not IsInUnit ( driver ) then
42783: LD_VAR 0 1
42787: NOT
42788: IFTRUE 42802
42790: PUSH
42791: LD_VAR 0 1
42795: PPUSH
42796: CALL_OW 310
42800: NOT
42801: OR
42802: IFFALSE 42806
// exit ;
42804: GO 42896
// vehicle := IsInUnit ( driver ) ;
42806: LD_ADDR_VAR 0 3
42810: PUSH
42811: LD_VAR 0 1
42815: PPUSH
42816: CALL_OW 310
42820: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42821: LD_VAR 0 1
42825: PPUSH
42826: LD_STRING \
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: LD_INT 0
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: PUSH
42856: LD_STRING E
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: LD_VAR 0 3
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PPUSH
42892: CALL_OW 446
// end ;
42896: LD_VAR 0 2
42900: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
42901: LD_INT 0
42903: PPUSH
42904: PPUSH
// if not driver or not IsInUnit ( driver ) then
42905: LD_VAR 0 1
42909: NOT
42910: IFTRUE 42924
42912: PUSH
42913: LD_VAR 0 1
42917: PPUSH
42918: CALL_OW 310
42922: NOT
42923: OR
42924: IFFALSE 42928
// exit ;
42926: GO 43018
// vehicle := IsInUnit ( driver ) ;
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_VAR 0 1
42937: PPUSH
42938: CALL_OW 310
42942: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
42943: LD_VAR 0 1
42947: PPUSH
42948: LD_STRING \
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: PUSH
42978: LD_STRING E
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_VAR 0 3
42991: PUSH
42992: LD_INT 0
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PPUSH
43014: CALL_OW 447
// end ;
43018: LD_VAR 0 2
43022: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
43023: LD_INT 0
43025: PPUSH
43026: PPUSH
43027: PPUSH
// tmp := [ ] ;
43028: LD_ADDR_VAR 0 5
43032: PUSH
43033: EMPTY
43034: ST_TO_ADDR
// for i in units do
43035: LD_ADDR_VAR 0 4
43039: PUSH
43040: LD_VAR 0 1
43044: PUSH
43045: FOR_IN
43046: IFFALSE 43084
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
43048: LD_ADDR_VAR 0 5
43052: PUSH
43053: LD_VAR 0 5
43057: PPUSH
43058: LD_VAR 0 5
43062: PUSH
43063: LD_INT 1
43065: PLUS
43066: PPUSH
43067: LD_VAR 0 4
43071: PPUSH
43072: CALL_OW 256
43076: PPUSH
43077: CALL_OW 2
43081: ST_TO_ADDR
43082: GO 43045
43084: POP
43085: POP
// if not tmp then
43086: LD_VAR 0 5
43090: NOT
43091: IFFALSE 43095
// exit ;
43093: GO 43143
// if asc then
43095: LD_VAR 0 2
43099: IFFALSE 43123
// result := SortListByListAsc ( units , tmp ) else
43101: LD_ADDR_VAR 0 3
43105: PUSH
43106: LD_VAR 0 1
43110: PPUSH
43111: LD_VAR 0 5
43115: PPUSH
43116: CALL_OW 76
43120: ST_TO_ADDR
43121: GO 43143
// result := SortListByListDesc ( units , tmp ) ;
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_VAR 0 1
43132: PPUSH
43133: LD_VAR 0 5
43137: PPUSH
43138: CALL_OW 77
43142: ST_TO_ADDR
// end ;
43143: LD_VAR 0 3
43147: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
43148: LD_INT 0
43150: PPUSH
43151: PPUSH
// task := GetTaskList ( mech ) ;
43152: LD_ADDR_VAR 0 4
43156: PUSH
43157: LD_VAR 0 1
43161: PPUSH
43162: CALL_OW 437
43166: ST_TO_ADDR
// if not task then
43167: LD_VAR 0 4
43171: NOT
43172: IFFALSE 43176
// exit ;
43174: GO 43220
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
43176: LD_ADDR_VAR 0 3
43180: PUSH
43181: LD_VAR 0 4
43185: PUSH
43186: LD_INT 1
43188: ARRAY
43189: PUSH
43190: LD_INT 1
43192: ARRAY
43193: PUSH
43194: LD_STRING r
43196: EQUAL
43197: IFFALSE 43219
43199: PUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 1
43207: ARRAY
43208: PUSH
43209: LD_INT 4
43211: ARRAY
43212: PUSH
43213: LD_VAR 0 2
43217: EQUAL
43218: AND
43219: ST_TO_ADDR
// end ;
43220: LD_VAR 0 3
43224: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
43225: LD_INT 0
43227: PPUSH
// SetDir ( unit , d ) ;
43228: LD_VAR 0 1
43232: PPUSH
43233: LD_VAR 0 4
43237: PPUSH
43238: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
43242: LD_ADDR_VAR 0 6
43246: PUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: LD_VAR 0 2
43256: PPUSH
43257: LD_VAR 0 3
43261: PPUSH
43262: LD_VAR 0 5
43266: PPUSH
43267: CALL_OW 48
43271: ST_TO_ADDR
// end ;
43272: LD_VAR 0 6
43276: RET
// export function ToNaturalNumber ( number ) ; begin
43277: LD_INT 0
43279: PPUSH
// result := number div 1 ;
43280: LD_ADDR_VAR 0 2
43284: PUSH
43285: LD_VAR 0 1
43289: PUSH
43290: LD_INT 1
43292: DIV
43293: ST_TO_ADDR
// if number < 0 then
43294: LD_VAR 0 1
43298: PUSH
43299: LD_INT 0
43301: LESS
43302: IFFALSE 43312
// result := 0 ;
43304: LD_ADDR_VAR 0 2
43308: PUSH
43309: LD_INT 0
43311: ST_TO_ADDR
// end ;
43312: LD_VAR 0 2
43316: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
43317: LD_INT 0
43319: PPUSH
43320: PPUSH
43321: PPUSH
// if not buildings then
43322: LD_VAR 0 1
43326: NOT
43327: IFFALSE 43331
// exit ;
43329: GO 43446
// tmp := [ ] ;
43331: LD_ADDR_VAR 0 5
43335: PUSH
43336: EMPTY
43337: ST_TO_ADDR
// for b in buildings do
43338: LD_ADDR_VAR 0 4
43342: PUSH
43343: LD_VAR 0 1
43347: PUSH
43348: FOR_IN
43349: IFFALSE 43387
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
43351: LD_ADDR_VAR 0 5
43355: PUSH
43356: LD_VAR 0 5
43360: PPUSH
43361: LD_VAR 0 5
43365: PUSH
43366: LD_INT 1
43368: PLUS
43369: PPUSH
43370: LD_VAR 0 4
43374: PPUSH
43375: CALL_OW 266
43379: PPUSH
43380: CALL_OW 1
43384: ST_TO_ADDR
43385: GO 43348
43387: POP
43388: POP
// if not tmp then
43389: LD_VAR 0 5
43393: NOT
43394: IFFALSE 43398
// exit ;
43396: GO 43446
// if asc then
43398: LD_VAR 0 2
43402: IFFALSE 43426
// result := SortListByListAsc ( buildings , tmp ) else
43404: LD_ADDR_VAR 0 3
43408: PUSH
43409: LD_VAR 0 1
43413: PPUSH
43414: LD_VAR 0 5
43418: PPUSH
43419: CALL_OW 76
43423: ST_TO_ADDR
43424: GO 43446
// result := SortListByListDesc ( buildings , tmp ) ;
43426: LD_ADDR_VAR 0 3
43430: PUSH
43431: LD_VAR 0 1
43435: PPUSH
43436: LD_VAR 0 5
43440: PPUSH
43441: CALL_OW 77
43445: ST_TO_ADDR
// end ;
43446: LD_VAR 0 3
43450: RET
// export function SortByClass ( units , class ) ; var un ; begin
43451: LD_INT 0
43453: PPUSH
43454: PPUSH
// if not units or not class then
43455: LD_VAR 0 1
43459: NOT
43460: IFTRUE 43469
43462: PUSH
43463: LD_VAR 0 2
43467: NOT
43468: OR
43469: IFFALSE 43473
// exit ;
43471: GO 43568
// result := [ ] ;
43473: LD_ADDR_VAR 0 3
43477: PUSH
43478: EMPTY
43479: ST_TO_ADDR
// for un in units do
43480: LD_ADDR_VAR 0 4
43484: PUSH
43485: LD_VAR 0 1
43489: PUSH
43490: FOR_IN
43491: IFFALSE 43566
// if GetClass ( un ) = class then
43493: LD_VAR 0 4
43497: PPUSH
43498: CALL_OW 257
43502: PUSH
43503: LD_VAR 0 2
43507: EQUAL
43508: IFFALSE 43535
// result := Insert ( result , 1 , un ) else
43510: LD_ADDR_VAR 0 3
43514: PUSH
43515: LD_VAR 0 3
43519: PPUSH
43520: LD_INT 1
43522: PPUSH
43523: LD_VAR 0 4
43527: PPUSH
43528: CALL_OW 2
43532: ST_TO_ADDR
43533: GO 43564
// result := Replace ( result , result + 1 , un ) ;
43535: LD_ADDR_VAR 0 3
43539: PUSH
43540: LD_VAR 0 3
43544: PPUSH
43545: LD_VAR 0 3
43549: PUSH
43550: LD_INT 1
43552: PLUS
43553: PPUSH
43554: LD_VAR 0 4
43558: PPUSH
43559: CALL_OW 1
43563: ST_TO_ADDR
43564: GO 43490
43566: POP
43567: POP
// end ;
43568: LD_VAR 0 3
43572: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
43573: LD_INT 0
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
// result := [ ] ;
43582: LD_ADDR_VAR 0 4
43586: PUSH
43587: EMPTY
43588: ST_TO_ADDR
// if x - r < 0 then
43589: LD_VAR 0 1
43593: PUSH
43594: LD_VAR 0 3
43598: MINUS
43599: PUSH
43600: LD_INT 0
43602: LESS
43603: IFFALSE 43615
// min_x := 0 else
43605: LD_ADDR_VAR 0 8
43609: PUSH
43610: LD_INT 0
43612: ST_TO_ADDR
43613: GO 43631
// min_x := x - r ;
43615: LD_ADDR_VAR 0 8
43619: PUSH
43620: LD_VAR 0 1
43624: PUSH
43625: LD_VAR 0 3
43629: MINUS
43630: ST_TO_ADDR
// if y - r < 0 then
43631: LD_VAR 0 2
43635: PUSH
43636: LD_VAR 0 3
43640: MINUS
43641: PUSH
43642: LD_INT 0
43644: LESS
43645: IFFALSE 43657
// min_y := 0 else
43647: LD_ADDR_VAR 0 7
43651: PUSH
43652: LD_INT 0
43654: ST_TO_ADDR
43655: GO 43673
// min_y := y - r ;
43657: LD_ADDR_VAR 0 7
43661: PUSH
43662: LD_VAR 0 2
43666: PUSH
43667: LD_VAR 0 3
43671: MINUS
43672: ST_TO_ADDR
// max_x := x + r ;
43673: LD_ADDR_VAR 0 9
43677: PUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_VAR 0 3
43687: PLUS
43688: ST_TO_ADDR
// max_y := y + r ;
43689: LD_ADDR_VAR 0 10
43693: PUSH
43694: LD_VAR 0 2
43698: PUSH
43699: LD_VAR 0 3
43703: PLUS
43704: ST_TO_ADDR
// for _x = min_x to max_x do
43705: LD_ADDR_VAR 0 5
43709: PUSH
43710: DOUBLE
43711: LD_VAR 0 8
43715: DEC
43716: ST_TO_ADDR
43717: LD_VAR 0 9
43721: PUSH
43722: FOR_TO
43723: IFFALSE 43824
// for _y = min_y to max_y do
43725: LD_ADDR_VAR 0 6
43729: PUSH
43730: DOUBLE
43731: LD_VAR 0 7
43735: DEC
43736: ST_TO_ADDR
43737: LD_VAR 0 10
43741: PUSH
43742: FOR_TO
43743: IFFALSE 43820
// begin if not ValidHex ( _x , _y ) then
43745: LD_VAR 0 5
43749: PPUSH
43750: LD_VAR 0 6
43754: PPUSH
43755: CALL_OW 488
43759: NOT
43760: IFFALSE 43764
// continue ;
43762: GO 43742
// if GetResourceTypeXY ( _x , _y ) then
43764: LD_VAR 0 5
43768: PPUSH
43769: LD_VAR 0 6
43773: PPUSH
43774: CALL_OW 283
43778: IFFALSE 43818
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
43780: LD_ADDR_VAR 0 4
43784: PUSH
43785: LD_VAR 0 4
43789: PPUSH
43790: LD_VAR 0 4
43794: PUSH
43795: LD_INT 1
43797: PLUS
43798: PPUSH
43799: LD_VAR 0 5
43803: PUSH
43804: LD_VAR 0 6
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PPUSH
43813: CALL_OW 1
43817: ST_TO_ADDR
// end ;
43818: GO 43742
43820: POP
43821: POP
43822: GO 43722
43824: POP
43825: POP
// end ;
43826: LD_VAR 0 4
43830: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
43831: LD_INT 0
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
43838: PPUSH
43839: PPUSH
43840: PPUSH
// if not units then
43841: LD_VAR 0 1
43845: NOT
43846: IFFALSE 43850
// exit ;
43848: GO 44382
// result := UnitFilter ( units , [ f_ok ] ) ;
43850: LD_ADDR_VAR 0 3
43854: PUSH
43855: LD_VAR 0 1
43859: PPUSH
43860: LD_INT 50
43862: PUSH
43863: EMPTY
43864: LIST
43865: PPUSH
43866: CALL_OW 72
43870: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
43871: LD_ADDR_VAR 0 8
43875: PUSH
43876: LD_VAR 0 1
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PPUSH
43885: CALL_OW 255
43889: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
43890: LD_ADDR_VAR 0 10
43894: PUSH
43895: LD_INT 29
43897: PUSH
43898: LD_INT 91
43900: PUSH
43901: LD_INT 49
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: LIST
43908: ST_TO_ADDR
// if not result then
43909: LD_VAR 0 3
43913: NOT
43914: IFFALSE 43918
// exit ;
43916: GO 44382
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
43918: LD_ADDR_VAR 0 5
43922: PUSH
43923: LD_INT 81
43925: PUSH
43926: LD_VAR 0 8
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PPUSH
43935: CALL_OW 69
43939: ST_TO_ADDR
// for i in result do
43940: LD_ADDR_VAR 0 4
43944: PUSH
43945: LD_VAR 0 3
43949: PUSH
43950: FOR_IN
43951: IFFALSE 44380
// begin tag := GetTag ( i ) + 1 ;
43953: LD_ADDR_VAR 0 9
43957: PUSH
43958: LD_VAR 0 4
43962: PPUSH
43963: CALL_OW 110
43967: PUSH
43968: LD_INT 1
43970: PLUS
43971: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
43972: LD_ADDR_VAR 0 7
43976: PUSH
43977: LD_VAR 0 4
43981: PPUSH
43982: CALL_OW 250
43986: PPUSH
43987: LD_VAR 0 4
43991: PPUSH
43992: CALL_OW 251
43996: PPUSH
43997: LD_INT 4
43999: PPUSH
44000: CALL 43573 0 3
44004: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
44005: LD_VAR 0 4
44009: PPUSH
44010: CALL_OW 247
44014: PUSH
44015: LD_INT 2
44017: EQUAL
44018: IFFALSE 44030
44020: PUSH
44021: LD_VAR 0 7
44025: PUSH
44026: LD_INT 2
44028: GREATER
44029: AND
44030: IFFALSE 44050
44032: PUSH
44033: LD_VAR 0 4
44037: PPUSH
44038: CALL_OW 264
44042: PUSH
44043: LD_VAR 0 10
44047: IN
44048: NOT
44049: AND
44050: IFFALSE 44089
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
44052: LD_VAR 0 4
44056: PPUSH
44057: LD_VAR 0 7
44061: PUSH
44062: LD_INT 1
44064: ARRAY
44065: PUSH
44066: LD_INT 1
44068: ARRAY
44069: PPUSH
44070: LD_VAR 0 7
44074: PUSH
44075: LD_INT 1
44077: ARRAY
44078: PUSH
44079: LD_INT 2
44081: ARRAY
44082: PPUSH
44083: CALL_OW 116
44087: GO 44378
// if path > tag then
44089: LD_VAR 0 2
44093: PUSH
44094: LD_VAR 0 9
44098: GREATER
44099: IFFALSE 44307
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
44101: LD_ADDR_VAR 0 6
44105: PUSH
44106: LD_VAR 0 5
44110: PPUSH
44111: LD_INT 91
44113: PUSH
44114: LD_VAR 0 4
44118: PUSH
44119: LD_INT 8
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: PPUSH
44127: CALL_OW 72
44131: ST_TO_ADDR
// if nearEnemy then
44132: LD_VAR 0 6
44136: IFFALSE 44205
// begin if GetWeapon ( i ) = ru_time_lapser then
44138: LD_VAR 0 4
44142: PPUSH
44143: CALL_OW 264
44147: PUSH
44148: LD_INT 49
44150: EQUAL
44151: IFFALSE 44179
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
44153: LD_VAR 0 4
44157: PPUSH
44158: LD_VAR 0 6
44162: PPUSH
44163: LD_VAR 0 4
44167: PPUSH
44168: CALL_OW 74
44172: PPUSH
44173: CALL_OW 112
44177: GO 44203
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
44179: LD_VAR 0 4
44183: PPUSH
44184: LD_VAR 0 6
44188: PPUSH
44189: LD_VAR 0 4
44193: PPUSH
44194: CALL_OW 74
44198: PPUSH
44199: CALL 45463 0 2
// end else
44203: GO 44305
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
44205: LD_VAR 0 4
44209: PPUSH
44210: LD_VAR 0 2
44214: PUSH
44215: LD_VAR 0 9
44219: ARRAY
44220: PUSH
44221: LD_INT 1
44223: ARRAY
44224: PPUSH
44225: LD_VAR 0 2
44229: PUSH
44230: LD_VAR 0 9
44234: ARRAY
44235: PUSH
44236: LD_INT 2
44238: ARRAY
44239: PPUSH
44240: CALL_OW 297
44244: PUSH
44245: LD_INT 6
44247: GREATER
44248: IFFALSE 44291
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
44250: LD_VAR 0 4
44254: PPUSH
44255: LD_VAR 0 2
44259: PUSH
44260: LD_VAR 0 9
44264: ARRAY
44265: PUSH
44266: LD_INT 1
44268: ARRAY
44269: PPUSH
44270: LD_VAR 0 2
44274: PUSH
44275: LD_VAR 0 9
44279: ARRAY
44280: PUSH
44281: LD_INT 2
44283: ARRAY
44284: PPUSH
44285: CALL_OW 114
44289: GO 44305
// SetTag ( i , tag ) ;
44291: LD_VAR 0 4
44295: PPUSH
44296: LD_VAR 0 9
44300: PPUSH
44301: CALL_OW 109
// end else
44305: GO 44378
// if enemy then
44307: LD_VAR 0 5
44311: IFFALSE 44378
// begin if GetWeapon ( i ) = ru_time_lapser then
44313: LD_VAR 0 4
44317: PPUSH
44318: CALL_OW 264
44322: PUSH
44323: LD_INT 49
44325: EQUAL
44326: IFFALSE 44354
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
44328: LD_VAR 0 4
44332: PPUSH
44333: LD_VAR 0 5
44337: PPUSH
44338: LD_VAR 0 4
44342: PPUSH
44343: CALL_OW 74
44347: PPUSH
44348: CALL_OW 112
44352: GO 44378
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
44354: LD_VAR 0 4
44358: PPUSH
44359: LD_VAR 0 5
44363: PPUSH
44364: LD_VAR 0 4
44368: PPUSH
44369: CALL_OW 74
44373: PPUSH
44374: CALL 45463 0 2
// end ; end ;
44378: GO 43950
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 3
44386: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
44387: LD_INT 0
44389: PPUSH
44390: PPUSH
44391: PPUSH
// if not unit or IsInUnit ( unit ) then
44392: LD_VAR 0 1
44396: NOT
44397: IFTRUE 44410
44399: PUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL_OW 310
44409: OR
44410: IFFALSE 44414
// exit ;
44412: GO 44505
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
44414: LD_ADDR_VAR 0 4
44418: PUSH
44419: LD_VAR 0 1
44423: PPUSH
44424: CALL_OW 250
44428: PPUSH
44429: LD_VAR 0 2
44433: PPUSH
44434: LD_INT 1
44436: PPUSH
44437: CALL_OW 272
44441: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
44442: LD_ADDR_VAR 0 5
44446: PUSH
44447: LD_VAR 0 1
44451: PPUSH
44452: CALL_OW 251
44456: PPUSH
44457: LD_VAR 0 2
44461: PPUSH
44462: LD_INT 1
44464: PPUSH
44465: CALL_OW 273
44469: ST_TO_ADDR
// if ValidHex ( x , y ) then
44470: LD_VAR 0 4
44474: PPUSH
44475: LD_VAR 0 5
44479: PPUSH
44480: CALL_OW 488
44484: IFFALSE 44505
// ComTurnXY ( unit , x , y ) ;
44486: LD_VAR 0 1
44490: PPUSH
44491: LD_VAR 0 4
44495: PPUSH
44496: LD_VAR 0 5
44500: PPUSH
44501: CALL_OW 118
// end ;
44505: LD_VAR 0 3
44509: RET
// export function SeeUnits ( side , units ) ; var i ; begin
44510: LD_INT 0
44512: PPUSH
44513: PPUSH
// result := false ;
44514: LD_ADDR_VAR 0 3
44518: PUSH
44519: LD_INT 0
44521: ST_TO_ADDR
// if not units then
44522: LD_VAR 0 2
44526: NOT
44527: IFFALSE 44531
// exit ;
44529: GO 44576
// for i in units do
44531: LD_ADDR_VAR 0 4
44535: PUSH
44536: LD_VAR 0 2
44540: PUSH
44541: FOR_IN
44542: IFFALSE 44574
// if See ( side , i ) then
44544: LD_VAR 0 1
44548: PPUSH
44549: LD_VAR 0 4
44553: PPUSH
44554: CALL_OW 292
44558: IFFALSE 44572
// begin result := true ;
44560: LD_ADDR_VAR 0 3
44564: PUSH
44565: LD_INT 1
44567: ST_TO_ADDR
// exit ;
44568: POP
44569: POP
44570: GO 44576
// end ;
44572: GO 44541
44574: POP
44575: POP
// end ;
44576: LD_VAR 0 3
44580: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
44581: LD_INT 0
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
// if not unit or not points then
44587: LD_VAR 0 1
44591: NOT
44592: IFTRUE 44601
44594: PUSH
44595: LD_VAR 0 2
44599: NOT
44600: OR
44601: IFFALSE 44605
// exit ;
44603: GO 44695
// dist := 99999 ;
44605: LD_ADDR_VAR 0 5
44609: PUSH
44610: LD_INT 99999
44612: ST_TO_ADDR
// for i in points do
44613: LD_ADDR_VAR 0 4
44617: PUSH
44618: LD_VAR 0 2
44622: PUSH
44623: FOR_IN
44624: IFFALSE 44693
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44626: LD_ADDR_VAR 0 6
44630: PUSH
44631: LD_VAR 0 1
44635: PPUSH
44636: LD_VAR 0 4
44640: PUSH
44641: LD_INT 1
44643: ARRAY
44644: PPUSH
44645: LD_VAR 0 4
44649: PUSH
44650: LD_INT 2
44652: ARRAY
44653: PPUSH
44654: CALL_OW 297
44658: ST_TO_ADDR
// if tmpDist < dist then
44659: LD_VAR 0 6
44663: PUSH
44664: LD_VAR 0 5
44668: LESS
44669: IFFALSE 44691
// begin result := i ;
44671: LD_ADDR_VAR 0 3
44675: PUSH
44676: LD_VAR 0 4
44680: ST_TO_ADDR
// dist := tmpDist ;
44681: LD_ADDR_VAR 0 5
44685: PUSH
44686: LD_VAR 0 6
44690: ST_TO_ADDR
// end ; end ;
44691: GO 44623
44693: POP
44694: POP
// end ;
44695: LD_VAR 0 3
44699: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
44700: LD_INT 0
44702: PPUSH
// uc_side := side ;
44703: LD_ADDR_OWVAR 20
44707: PUSH
44708: LD_VAR 0 1
44712: ST_TO_ADDR
// uc_nation := 3 ;
44713: LD_ADDR_OWVAR 21
44717: PUSH
44718: LD_INT 3
44720: ST_TO_ADDR
// vc_chassis := 25 ;
44721: LD_ADDR_OWVAR 37
44725: PUSH
44726: LD_INT 25
44728: ST_TO_ADDR
// vc_engine := engine_siberite ;
44729: LD_ADDR_OWVAR 39
44733: PUSH
44734: LD_INT 3
44736: ST_TO_ADDR
// vc_control := control_computer ;
44737: LD_ADDR_OWVAR 38
44741: PUSH
44742: LD_INT 3
44744: ST_TO_ADDR
// vc_weapon := 59 ;
44745: LD_ADDR_OWVAR 40
44749: PUSH
44750: LD_INT 59
44752: ST_TO_ADDR
// result := CreateVehicle ;
44753: LD_ADDR_VAR 0 5
44757: PUSH
44758: CALL_OW 45
44762: ST_TO_ADDR
// SetDir ( result , d ) ;
44763: LD_VAR 0 5
44767: PPUSH
44768: LD_VAR 0 4
44772: PPUSH
44773: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
44777: LD_VAR 0 5
44781: PPUSH
44782: LD_VAR 0 2
44786: PPUSH
44787: LD_VAR 0 3
44791: PPUSH
44792: LD_INT 0
44794: PPUSH
44795: CALL_OW 48
// end ;
44799: LD_VAR 0 5
44803: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
44804: LD_INT 0
44806: PPUSH
44807: PPUSH
44808: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
44809: LD_ADDR_VAR 0 2
44813: PUSH
44814: LD_INT 0
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
44832: LD_VAR 0 1
44836: NOT
44837: IFTRUE 44870
44839: PUSH
44840: LD_VAR 0 1
44844: PPUSH
44845: CALL_OW 264
44849: PUSH
44850: LD_INT 12
44852: PUSH
44853: LD_INT 51
44855: PUSH
44856: LD_INT 32
44858: PUSH
44859: LD_INT 89
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: IN
44868: NOT
44869: OR
44870: IFFALSE 44874
// exit ;
44872: GO 44972
// for i := 1 to 3 do
44874: LD_ADDR_VAR 0 3
44878: PUSH
44879: DOUBLE
44880: LD_INT 1
44882: DEC
44883: ST_TO_ADDR
44884: LD_INT 3
44886: PUSH
44887: FOR_TO
44888: IFFALSE 44970
// begin tmp := GetCargo ( cargo , i ) ;
44890: LD_ADDR_VAR 0 4
44894: PUSH
44895: LD_VAR 0 1
44899: PPUSH
44900: LD_VAR 0 3
44904: PPUSH
44905: CALL_OW 289
44909: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
44910: LD_ADDR_VAR 0 2
44914: PUSH
44915: LD_VAR 0 2
44919: PPUSH
44920: LD_VAR 0 3
44924: PPUSH
44925: LD_VAR 0 4
44929: PPUSH
44930: CALL_OW 1
44934: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
44935: LD_ADDR_VAR 0 2
44939: PUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_INT 4
44947: PPUSH
44948: LD_VAR 0 2
44952: PUSH
44953: LD_INT 4
44955: ARRAY
44956: PUSH
44957: LD_VAR 0 4
44961: PLUS
44962: PPUSH
44963: CALL_OW 1
44967: ST_TO_ADDR
// end ;
44968: GO 44887
44970: POP
44971: POP
// end ;
44972: LD_VAR 0 2
44976: RET
// export function Length ( array ) ; begin
44977: LD_INT 0
44979: PPUSH
// result := array + 0 ;
44980: LD_ADDR_VAR 0 2
44984: PUSH
44985: LD_VAR 0 1
44989: PUSH
44990: LD_INT 0
44992: PLUS
44993: ST_TO_ADDR
// end ;
44994: LD_VAR 0 2
44998: RET
// export function PrepareArray ( array ) ; begin
44999: LD_INT 0
45001: PPUSH
// result := array diff 0 ;
45002: LD_ADDR_VAR 0 2
45006: PUSH
45007: LD_VAR 0 1
45011: PUSH
45012: LD_INT 0
45014: DIFF
45015: ST_TO_ADDR
// if not result [ 1 ] then
45016: LD_VAR 0 2
45020: PUSH
45021: LD_INT 1
45023: ARRAY
45024: NOT
45025: IFFALSE 45045
// result := Delete ( result , 1 ) ;
45027: LD_ADDR_VAR 0 2
45031: PUSH
45032: LD_VAR 0 2
45036: PPUSH
45037: LD_INT 1
45039: PPUSH
45040: CALL_OW 3
45044: ST_TO_ADDR
// end ;
45045: LD_VAR 0 2
45049: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
45050: LD_INT 0
45052: PPUSH
45053: PPUSH
45054: PPUSH
45055: PPUSH
// sibRocketRange := 25 ;
45056: LD_ADDR_VAR 0 6
45060: PUSH
45061: LD_INT 25
45063: ST_TO_ADDR
// result := false ;
45064: LD_ADDR_VAR 0 4
45068: PUSH
45069: LD_INT 0
45071: ST_TO_ADDR
// for i := 0 to 5 do
45072: LD_ADDR_VAR 0 5
45076: PUSH
45077: DOUBLE
45078: LD_INT 0
45080: DEC
45081: ST_TO_ADDR
45082: LD_INT 5
45084: PUSH
45085: FOR_TO
45086: IFFALSE 45153
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
45088: LD_VAR 0 1
45092: PPUSH
45093: LD_VAR 0 5
45097: PPUSH
45098: LD_VAR 0 6
45102: PPUSH
45103: CALL_OW 272
45107: PPUSH
45108: LD_VAR 0 2
45112: PPUSH
45113: LD_VAR 0 5
45117: PPUSH
45118: LD_VAR 0 6
45122: PPUSH
45123: CALL_OW 273
45127: PPUSH
45128: LD_VAR 0 3
45132: PPUSH
45133: CALL_OW 309
45137: IFFALSE 45151
// begin result := true ;
45139: LD_ADDR_VAR 0 4
45143: PUSH
45144: LD_INT 1
45146: ST_TO_ADDR
// exit ;
45147: POP
45148: POP
45149: GO 45155
// end ;
45151: GO 45085
45153: POP
45154: POP
// end ;
45155: LD_VAR 0 4
45159: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
45160: LD_INT 0
45162: PPUSH
45163: PPUSH
45164: PPUSH
// if btype = b_depot then
45165: LD_VAR 0 2
45169: PUSH
45170: LD_INT 0
45172: EQUAL
45173: IFFALSE 45185
// begin result := true ;
45175: LD_ADDR_VAR 0 3
45179: PUSH
45180: LD_INT 1
45182: ST_TO_ADDR
// exit ;
45183: GO 45305
// end ; pom := GetBase ( depot ) ;
45185: LD_ADDR_VAR 0 4
45189: PUSH
45190: LD_VAR 0 1
45194: PPUSH
45195: CALL_OW 274
45199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45200: LD_ADDR_VAR 0 5
45204: PUSH
45205: LD_VAR 0 2
45209: PPUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 248
45219: PPUSH
45220: CALL_OW 450
45224: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
45225: LD_ADDR_VAR 0 3
45229: PUSH
45230: LD_VAR 0 4
45234: PPUSH
45235: LD_INT 1
45237: PPUSH
45238: CALL_OW 275
45242: PUSH
45243: LD_VAR 0 5
45247: PUSH
45248: LD_INT 1
45250: ARRAY
45251: GREATEREQUAL
45252: IFFALSE 45278
45254: PUSH
45255: LD_VAR 0 4
45259: PPUSH
45260: LD_INT 2
45262: PPUSH
45263: CALL_OW 275
45267: PUSH
45268: LD_VAR 0 5
45272: PUSH
45273: LD_INT 2
45275: ARRAY
45276: GREATEREQUAL
45277: AND
45278: IFFALSE 45304
45280: PUSH
45281: LD_VAR 0 4
45285: PPUSH
45286: LD_INT 3
45288: PPUSH
45289: CALL_OW 275
45293: PUSH
45294: LD_VAR 0 5
45298: PUSH
45299: LD_INT 3
45301: ARRAY
45302: GREATEREQUAL
45303: AND
45304: ST_TO_ADDR
// end ;
45305: LD_VAR 0 3
45309: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
45310: LD_INT 0
45312: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
45313: LD_VAR 0 1
45317: PPUSH
45318: LD_VAR 0 2
45322: PPUSH
45323: LD_INT 0
45325: PPUSH
45326: LD_INT 0
45328: PPUSH
45329: LD_INT 1
45331: PPUSH
45332: LD_INT 0
45334: PPUSH
45335: CALL_OW 587
// end ;
45339: LD_VAR 0 3
45343: RET
// export function CenterOnNow ( unit ) ; begin
45344: LD_INT 0
45346: PPUSH
// result := IsInUnit ( unit ) ;
45347: LD_ADDR_VAR 0 2
45351: PUSH
45352: LD_VAR 0 1
45356: PPUSH
45357: CALL_OW 310
45361: ST_TO_ADDR
// if not result then
45362: LD_VAR 0 2
45366: NOT
45367: IFFALSE 45379
// result := unit ;
45369: LD_ADDR_VAR 0 2
45373: PUSH
45374: LD_VAR 0 1
45378: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
45379: LD_VAR 0 1
45383: PPUSH
45384: CALL_OW 87
// end ;
45388: LD_VAR 0 2
45392: RET
// export function ComMoveHex ( unit , hex ) ; begin
45393: LD_INT 0
45395: PPUSH
// if not hex then
45396: LD_VAR 0 2
45400: NOT
45401: IFFALSE 45405
// exit ;
45403: GO 45458
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
45405: LD_VAR 0 2
45409: PUSH
45410: LD_INT 1
45412: ARRAY
45413: PPUSH
45414: LD_VAR 0 2
45418: PUSH
45419: LD_INT 2
45421: ARRAY
45422: PPUSH
45423: CALL_OW 428
45427: IFFALSE 45431
// exit ;
45429: GO 45458
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
45431: LD_VAR 0 1
45435: PPUSH
45436: LD_VAR 0 2
45440: PUSH
45441: LD_INT 1
45443: ARRAY
45444: PPUSH
45445: LD_VAR 0 2
45449: PUSH
45450: LD_INT 2
45452: ARRAY
45453: PPUSH
45454: CALL_OW 111
// end ;
45458: LD_VAR 0 3
45462: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
45463: LD_INT 0
45465: PPUSH
45466: PPUSH
45467: PPUSH
// if not unit or not enemy then
45468: LD_VAR 0 1
45472: NOT
45473: IFTRUE 45482
45475: PUSH
45476: LD_VAR 0 2
45480: NOT
45481: OR
45482: IFFALSE 45486
// exit ;
45484: GO 45612
// x := GetX ( enemy ) ;
45486: LD_ADDR_VAR 0 4
45490: PUSH
45491: LD_VAR 0 2
45495: PPUSH
45496: CALL_OW 250
45500: ST_TO_ADDR
// y := GetY ( enemy ) ;
45501: LD_ADDR_VAR 0 5
45505: PUSH
45506: LD_VAR 0 2
45510: PPUSH
45511: CALL_OW 251
45515: ST_TO_ADDR
// if ValidHex ( x , y ) then
45516: LD_VAR 0 4
45520: PPUSH
45521: LD_VAR 0 5
45525: PPUSH
45526: CALL_OW 488
45530: IFFALSE 45612
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
45532: LD_VAR 0 2
45536: PPUSH
45537: CALL_OW 247
45541: PUSH
45542: LD_INT 3
45544: PUSH
45545: LD_INT 2
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: IN
45552: IFTRUE 45575
45554: PUSH
45555: LD_VAR 0 1
45559: PPUSH
45560: CALL_OW 255
45564: PPUSH
45565: LD_VAR 0 2
45569: PPUSH
45570: CALL_OW 292
45574: OR
45575: IFFALSE 45593
// ComAttackUnit ( unit , enemy ) else
45577: LD_VAR 0 1
45581: PPUSH
45582: LD_VAR 0 2
45586: PPUSH
45587: CALL_OW 115
45591: GO 45612
// ComAgressiveMove ( unit , x , y ) ;
45593: LD_VAR 0 1
45597: PPUSH
45598: LD_VAR 0 4
45602: PPUSH
45603: LD_VAR 0 5
45607: PPUSH
45608: CALL_OW 114
// end ;
45612: LD_VAR 0 3
45616: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
45617: LD_INT 0
45619: PPUSH
45620: PPUSH
45621: PPUSH
// list := AreaToList ( area , 0 ) ;
45622: LD_ADDR_VAR 0 5
45626: PUSH
45627: LD_VAR 0 1
45631: PPUSH
45632: LD_INT 0
45634: PPUSH
45635: CALL_OW 517
45639: ST_TO_ADDR
// if not list then
45640: LD_VAR 0 5
45644: NOT
45645: IFFALSE 45649
// exit ;
45647: GO 45779
// if all then
45649: LD_VAR 0 2
45653: IFFALSE 45741
// begin for i := 1 to list [ 1 ] do
45655: LD_ADDR_VAR 0 4
45659: PUSH
45660: DOUBLE
45661: LD_INT 1
45663: DEC
45664: ST_TO_ADDR
45665: LD_VAR 0 5
45669: PUSH
45670: LD_INT 1
45672: ARRAY
45673: PUSH
45674: FOR_TO
45675: IFFALSE 45737
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
45677: LD_ADDR_VAR 0 3
45681: PUSH
45682: LD_VAR 0 3
45686: PPUSH
45687: LD_VAR 0 3
45691: PUSH
45692: LD_INT 1
45694: PLUS
45695: PPUSH
45696: LD_VAR 0 5
45700: PUSH
45701: LD_INT 1
45703: ARRAY
45704: PUSH
45705: LD_VAR 0 4
45709: ARRAY
45710: PUSH
45711: LD_VAR 0 5
45715: PUSH
45716: LD_INT 2
45718: ARRAY
45719: PUSH
45720: LD_VAR 0 4
45724: ARRAY
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PPUSH
45730: CALL_OW 1
45734: ST_TO_ADDR
45735: GO 45674
45737: POP
45738: POP
// exit ;
45739: GO 45779
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
45741: LD_ADDR_VAR 0 3
45745: PUSH
45746: LD_VAR 0 5
45750: PUSH
45751: LD_INT 1
45753: ARRAY
45754: PUSH
45755: LD_INT 1
45757: ARRAY
45758: PUSH
45759: LD_VAR 0 5
45763: PUSH
45764: LD_INT 2
45766: ARRAY
45767: PUSH
45768: LD_INT 1
45770: ARRAY
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: ST_TO_ADDR
// end ;
45779: LD_VAR 0 3
45783: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
45784: LD_INT 0
45786: PPUSH
45787: PPUSH
// list := AreaToList ( area , 0 ) ;
45788: LD_ADDR_VAR 0 4
45792: PUSH
45793: LD_VAR 0 1
45797: PPUSH
45798: LD_INT 0
45800: PPUSH
45801: CALL_OW 517
45805: ST_TO_ADDR
// if not list then
45806: LD_VAR 0 4
45810: NOT
45811: IFFALSE 45815
// exit ;
45813: GO 45856
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
45815: LD_ADDR_VAR 0 3
45819: PUSH
45820: LD_VAR 0 4
45824: PUSH
45825: LD_INT 1
45827: ARRAY
45828: PUSH
45829: LD_INT 1
45831: ARRAY
45832: PUSH
45833: LD_VAR 0 4
45837: PUSH
45838: LD_INT 2
45840: ARRAY
45841: PUSH
45842: LD_INT 1
45844: ARRAY
45845: PUSH
45846: LD_VAR 0 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: LIST
45855: ST_TO_ADDR
// end ;
45856: LD_VAR 0 3
45860: RET
// export function First ( array ) ; begin
45861: LD_INT 0
45863: PPUSH
// if not array then
45864: LD_VAR 0 1
45868: NOT
45869: IFFALSE 45873
// exit ;
45871: GO 45887
// result := array [ 1 ] ;
45873: LD_ADDR_VAR 0 2
45877: PUSH
45878: LD_VAR 0 1
45882: PUSH
45883: LD_INT 1
45885: ARRAY
45886: ST_TO_ADDR
// end ;
45887: LD_VAR 0 2
45891: RET
// export function Last ( array ) ; begin
45892: LD_INT 0
45894: PPUSH
// if not array then
45895: LD_VAR 0 1
45899: NOT
45900: IFFALSE 45904
// exit ;
45902: GO 45920
// result := array [ array ] ;
45904: LD_ADDR_VAR 0 2
45908: PUSH
45909: LD_VAR 0 1
45913: PUSH
45914: LD_VAR 0 1
45918: ARRAY
45919: ST_TO_ADDR
// end ;
45920: LD_VAR 0 2
45924: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
45925: LD_INT 0
45927: PPUSH
45928: PPUSH
// result := [ ] ;
45929: LD_ADDR_VAR 0 5
45933: PUSH
45934: EMPTY
45935: ST_TO_ADDR
// if not array then
45936: LD_VAR 0 1
45940: NOT
45941: IFFALSE 45945
// exit ;
45943: GO 46057
// for i := 1 to array do
45945: LD_ADDR_VAR 0 6
45949: PUSH
45950: DOUBLE
45951: LD_INT 1
45953: DEC
45954: ST_TO_ADDR
45955: LD_VAR 0 1
45959: PUSH
45960: FOR_TO
45961: IFFALSE 46055
// if array [ i ] [ index ] = value then
45963: LD_VAR 0 1
45967: PUSH
45968: LD_VAR 0 6
45972: ARRAY
45973: PUSH
45974: LD_VAR 0 2
45978: ARRAY
45979: PUSH
45980: LD_VAR 0 3
45984: EQUAL
45985: IFFALSE 46053
// begin if indexColumn then
45987: LD_VAR 0 4
45991: IFFALSE 46027
// result := Join ( result , array [ i ] [ indexColumn ] ) else
45993: LD_ADDR_VAR 0 5
45997: PUSH
45998: LD_VAR 0 5
46002: PPUSH
46003: LD_VAR 0 1
46007: PUSH
46008: LD_VAR 0 6
46012: ARRAY
46013: PUSH
46014: LD_VAR 0 4
46018: ARRAY
46019: PPUSH
46020: CALL 41065 0 2
46024: ST_TO_ADDR
46025: GO 46053
// result := Join ( result , array [ i ] ) ;
46027: LD_ADDR_VAR 0 5
46031: PUSH
46032: LD_VAR 0 5
46036: PPUSH
46037: LD_VAR 0 1
46041: PUSH
46042: LD_VAR 0 6
46046: ARRAY
46047: PPUSH
46048: CALL 41065 0 2
46052: ST_TO_ADDR
// end ;
46053: GO 45960
46055: POP
46056: POP
// end ;
46057: LD_VAR 0 5
46061: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
46062: LD_INT 0
46064: PPUSH
// if not vehicles or not parkingPoint then
46065: LD_VAR 0 1
46069: NOT
46070: IFTRUE 46079
46072: PUSH
46073: LD_VAR 0 2
46077: NOT
46078: OR
46079: IFFALSE 46083
// exit ;
46081: GO 46181
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
46083: LD_ADDR_VAR 0 1
46087: PUSH
46088: LD_VAR 0 1
46092: PPUSH
46093: LD_INT 50
46095: PUSH
46096: EMPTY
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: LD_INT 92
46104: PUSH
46105: LD_VAR 0 2
46109: PUSH
46110: LD_INT 1
46112: ARRAY
46113: PUSH
46114: LD_VAR 0 2
46118: PUSH
46119: LD_INT 2
46121: ARRAY
46122: PUSH
46123: LD_INT 8
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PPUSH
46140: CALL_OW 72
46144: ST_TO_ADDR
// if not vehicles then
46145: LD_VAR 0 1
46149: NOT
46150: IFFALSE 46154
// exit ;
46152: GO 46181
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
46154: LD_VAR 0 1
46158: PPUSH
46159: LD_VAR 0 2
46163: PUSH
46164: LD_INT 1
46166: ARRAY
46167: PPUSH
46168: LD_VAR 0 2
46172: PUSH
46173: LD_INT 2
46175: ARRAY
46176: PPUSH
46177: CALL_OW 111
// end ;
46181: LD_VAR 0 3
46185: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
46186: LD_INT 0
46188: PPUSH
46189: PPUSH
46190: PPUSH
// if not side or not area then
46191: LD_VAR 0 1
46195: NOT
46196: IFTRUE 46205
46198: PUSH
46199: LD_VAR 0 2
46203: NOT
46204: OR
46205: IFFALSE 46209
// exit ;
46207: GO 46328
// tmp := AreaToList ( area , 0 ) ;
46209: LD_ADDR_VAR 0 5
46213: PUSH
46214: LD_VAR 0 2
46218: PPUSH
46219: LD_INT 0
46221: PPUSH
46222: CALL_OW 517
46226: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
46227: LD_ADDR_VAR 0 4
46231: PUSH
46232: DOUBLE
46233: LD_INT 1
46235: DEC
46236: ST_TO_ADDR
46237: LD_VAR 0 5
46241: PUSH
46242: LD_INT 1
46244: ARRAY
46245: PUSH
46246: FOR_TO
46247: IFFALSE 46326
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
46249: LD_VAR 0 5
46253: PUSH
46254: LD_INT 1
46256: ARRAY
46257: PUSH
46258: LD_VAR 0 4
46262: ARRAY
46263: PPUSH
46264: LD_VAR 0 5
46268: PUSH
46269: LD_INT 2
46271: ARRAY
46272: PUSH
46273: LD_VAR 0 4
46277: ARRAY
46278: PPUSH
46279: CALL_OW 351
46283: IFFALSE 46324
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
46285: LD_VAR 0 5
46289: PUSH
46290: LD_INT 1
46292: ARRAY
46293: PUSH
46294: LD_VAR 0 4
46298: ARRAY
46299: PPUSH
46300: LD_VAR 0 5
46304: PUSH
46305: LD_INT 2
46307: ARRAY
46308: PUSH
46309: LD_VAR 0 4
46313: ARRAY
46314: PPUSH
46315: LD_VAR 0 1
46319: PPUSH
46320: CALL_OW 244
// end ;
46324: GO 46246
46326: POP
46327: POP
// end ;
46328: LD_VAR 0 3
46332: RET
// export function UniqueArray ( array ) ; var i ; begin
46333: LD_INT 0
46335: PPUSH
46336: PPUSH
// result := [ ] ;
46337: LD_ADDR_VAR 0 2
46341: PUSH
46342: EMPTY
46343: ST_TO_ADDR
// if not array then
46344: LD_VAR 0 1
46348: NOT
46349: IFFALSE 46353
// exit ;
46351: GO 46414
// for i := 1 to array do
46353: LD_ADDR_VAR 0 3
46357: PUSH
46358: DOUBLE
46359: LD_INT 1
46361: DEC
46362: ST_TO_ADDR
46363: LD_VAR 0 1
46367: PUSH
46368: FOR_TO
46369: IFFALSE 46412
// if not array [ i ] in result then
46371: LD_VAR 0 1
46375: PUSH
46376: LD_VAR 0 3
46380: ARRAY
46381: PUSH
46382: LD_VAR 0 2
46386: IN
46387: NOT
46388: IFFALSE 46410
// result := Join ( result , i ) ;
46390: LD_ADDR_VAR 0 2
46394: PUSH
46395: LD_VAR 0 2
46399: PPUSH
46400: LD_VAR 0 3
46404: PPUSH
46405: CALL 41065 0 2
46409: ST_TO_ADDR
46410: GO 46368
46412: POP
46413: POP
// end ; end_of_file
46414: LD_VAR 0 2
46418: RET
// export mpGameType , mpGameSettingsKeys , mpGameSettingsValues , mpGameSettings , mpSidePositions , mpSideTeams , mpSideNations , mpTeams , mpTeamGame , mpOilDeposits , mpSibDeposits , mpDepots , mpStartingResources , mpSharedVision , mpBuildings , mpMarkedAreas , mpBuildUpAreas , mpBuildUpTime , mpStartPos , mpBattleFlag , mpBattleFlags , mpPeopleAmount , mpPeopleSkill , mpSibDetection , mpShipments , mpSibBomb , mpMapSize , mpApemans , mpApemansArea , mpApePosIndex , mpRespawn , mpKingArea , mpPoints , mpVehicles , mpEmissions , mpDisplayStrings , mpGameActive , mpRespawnPull , mpGlobalOilDeposits , mpGlobalSibDeposits , mpTeleports , mpArtifacts , mpBlockRespThread ; export function InitMultiplayer ; var i ; begin
46419: LD_INT 0
46421: PPUSH
46422: PPUSH
// disable ( mpActive ) ;
46423: LD_INT 100
46425: DISABLE_MARKED
// disable ( mpWin ) ;
46426: LD_INT 101
46428: DISABLE_MARKED
// disable ( mpLose ) ;
46429: LD_INT 102
46431: DISABLE_MARKED
// mpGameType := 0 ;
46432: LD_ADDR_EXP 1
46436: PUSH
46437: LD_INT 0
46439: ST_TO_ADDR
// mpGameSettings := [ ] ;
46440: LD_ADDR_EXP 4
46444: PUSH
46445: EMPTY
46446: ST_TO_ADDR
// mpGameSettingsKeys := [ ] ;
46447: LD_ADDR_EXP 2
46451: PUSH
46452: EMPTY
46453: ST_TO_ADDR
// mpGameSettingsValues := [ ] ;
46454: LD_ADDR_EXP 3
46458: PUSH
46459: EMPTY
46460: ST_TO_ADDR
// mpMapSize := [ 2 , 2 ] ;
46461: LD_ADDR_EXP 27
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: LD_INT 2
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// mpOilDeposits := [ ] ;
46476: LD_ADDR_EXP 10
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// mpSibDeposits := [ ] ;
46483: LD_ADDR_EXP 11
46487: PUSH
46488: EMPTY
46489: ST_TO_ADDR
// mpGlobalOilDeposits := [ ] ;
46490: LD_ADDR_EXP 39
46494: PUSH
46495: EMPTY
46496: ST_TO_ADDR
// mpGlobalSibDeposits := [ ] ;
46497: LD_ADDR_EXP 40
46501: PUSH
46502: EMPTY
46503: ST_TO_ADDR
// mpDepots := [ ] ;
46504: LD_ADDR_EXP 12
46508: PUSH
46509: EMPTY
46510: ST_TO_ADDR
// mpBuildings := [ ] ;
46511: LD_ADDR_EXP 15
46515: PUSH
46516: EMPTY
46517: ST_TO_ADDR
// mpMarkedAreas := [ ] ;
46518: LD_ADDR_EXP 16
46522: PUSH
46523: EMPTY
46524: ST_TO_ADDR
// mpBuildUpAreas := [ ] ;
46525: LD_ADDR_EXP 17
46529: PUSH
46530: EMPTY
46531: ST_TO_ADDR
// mpBuildUpTime := [ ] ;
46532: LD_ADDR_EXP 18
46536: PUSH
46537: EMPTY
46538: ST_TO_ADDR
// mpStartingResources := [ ] ;
46539: LD_ADDR_EXP 13
46543: PUSH
46544: EMPTY
46545: ST_TO_ADDR
// mpStartPos := [ ] ;
46546: LD_ADDR_EXP 19
46550: PUSH
46551: EMPTY
46552: ST_TO_ADDR
// mpBattleFlag := - 1 ;
46553: LD_ADDR_EXP 20
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: ST_TO_ADDR
// mpBattleFlags := [ ] ;
46562: LD_ADDR_EXP 21
46566: PUSH
46567: EMPTY
46568: ST_TO_ADDR
// mpApemans := [ ] ;
46569: LD_ADDR_EXP 28
46573: PUSH
46574: EMPTY
46575: ST_TO_ADDR
// mpApemansArea := [ ] ;
46576: LD_ADDR_EXP 29
46580: PUSH
46581: EMPTY
46582: ST_TO_ADDR
// mpRespawn := [ ] ;
46583: LD_ADDR_EXP 31
46587: PUSH
46588: EMPTY
46589: ST_TO_ADDR
// mpKingArea := 0 ;
46590: LD_ADDR_EXP 32
46594: PUSH
46595: LD_INT 0
46597: ST_TO_ADDR
// mpPoints := [ ] ;
46598: LD_ADDR_EXP 33
46602: PUSH
46603: EMPTY
46604: ST_TO_ADDR
// mpVehicles := 0 ;
46605: LD_ADDR_EXP 34
46609: PUSH
46610: LD_INT 0
46612: ST_TO_ADDR
// mpShipments := 0 ;
46613: LD_ADDR_EXP 25
46617: PUSH
46618: LD_INT 0
46620: ST_TO_ADDR
// mpRespawnPull := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46621: LD_ADDR_EXP 38
46625: PUSH
46626: EMPTY
46627: PUSH
46628: EMPTY
46629: PUSH
46630: EMPTY
46631: PUSH
46632: EMPTY
46633: PUSH
46634: EMPTY
46635: PUSH
46636: EMPTY
46637: PUSH
46638: EMPTY
46639: PUSH
46640: EMPTY
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: ST_TO_ADDR
// mpApePosIndex := [ [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
46652: LD_ADDR_EXP 30
46656: PUSH
46657: EMPTY
46658: PUSH
46659: EMPTY
46660: PUSH
46661: EMPTY
46662: PUSH
46663: EMPTY
46664: PUSH
46665: EMPTY
46666: PUSH
46667: EMPTY
46668: PUSH
46669: EMPTY
46670: PUSH
46671: EMPTY
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: ST_TO_ADDR
// mpEmissions := 0 ;
46683: LD_ADDR_EXP 35
46687: PUSH
46688: LD_INT 0
46690: ST_TO_ADDR
// mpTeleports := 0 ;
46691: LD_ADDR_EXP 41
46695: PUSH
46696: LD_INT 0
46698: ST_TO_ADDR
// mpArtifacts := 0 ;
46699: LD_ADDR_EXP 42
46703: PUSH
46704: LD_INT 0
46706: ST_TO_ADDR
// mpPeopleSkill := 3 ;
46707: LD_ADDR_EXP 23
46711: PUSH
46712: LD_INT 3
46714: ST_TO_ADDR
// mpPeopleAmount := 15 ;
46715: LD_ADDR_EXP 22
46719: PUSH
46720: LD_INT 15
46722: ST_TO_ADDR
// mpDisplayStrings := 0 ;
46723: LD_ADDR_EXP 36
46727: PUSH
46728: LD_INT 0
46730: ST_TO_ADDR
// mpGameActive := false ;
46731: LD_ADDR_EXP 37
46735: PUSH
46736: LD_INT 0
46738: ST_TO_ADDR
// mpBlockRespThread := false ;
46739: LD_ADDR_EXP 43
46743: PUSH
46744: LD_INT 0
46746: ST_TO_ADDR
// for i := 1 to 32 do
46747: LD_ADDR_VAR 0 2
46751: PUSH
46752: DOUBLE
46753: LD_INT 1
46755: DEC
46756: ST_TO_ADDR
46757: LD_INT 32
46759: PUSH
46760: FOR_TO
46761: IFFALSE 46788
// mpGameSettings := Replace ( mpGameSettings , i , 0 ) ;
46763: LD_ADDR_EXP 4
46767: PUSH
46768: LD_EXP 4
46772: PPUSH
46773: LD_VAR 0 2
46777: PPUSH
46778: LD_INT 0
46780: PPUSH
46781: CALL_OW 1
46785: ST_TO_ADDR
46786: GO 46760
46788: POP
46789: POP
// end ;
46790: LD_VAR 0 1
46794: RET
// export function StartMultiplayer ; var i , j , b , x , y , side , pos , nation , ape , team , setting , resources , gameTypes ; begin
46795: LD_INT 0
46797: PPUSH
46798: PPUSH
46799: PPUSH
46800: PPUSH
46801: PPUSH
46802: PPUSH
46803: PPUSH
46804: PPUSH
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
// gameTypes := [ GameTypeNormal , GameTypeSurvival , GameTypeKing , GameTypeFamine ] ;
46811: LD_ADDR_VAR 0 14
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 5
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: ST_TO_ADDR
// for i in gameTypes do
46834: LD_ADDR_VAR 0 2
46838: PUSH
46839: LD_VAR 0 14
46843: PUSH
46844: FOR_IN
46845: IFFALSE 46854
// disable ( i ) ;
46847: LD_VAR 0 2
46851: DISABLE_MARKED
46852: GO 46844
46854: POP
46855: POP
// if Multiplayer then
46856: LD_OWVAR 4
46860: IFFALSE 47044
// begin mpGameType := mp_game_type ;
46862: LD_ADDR_EXP 1
46866: PUSH
46867: LD_OWVAR 6
46871: ST_TO_ADDR
// your_side := mp_player_side ;
46872: LD_ADDR_OWVAR 2
46876: PUSH
46877: LD_OWVAR 7
46881: ST_TO_ADDR
// mpSidePositions := mp_sides_positions ;
46882: LD_ADDR_EXP 5
46886: PUSH
46887: LD_OWVAR 17
46891: ST_TO_ADDR
// mpSideTeams := mp_sides_teams ;
46892: LD_ADDR_EXP 6
46896: PUSH
46897: LD_OWVAR 15
46901: ST_TO_ADDR
// mpSideNations := mp_sides_nations ;
46902: LD_ADDR_EXP 7
46906: PUSH
46907: LD_OWVAR 16
46911: ST_TO_ADDR
// mpTeams := mp_teams ;
46912: LD_ADDR_EXP 8
46916: PUSH
46917: LD_OWVAR 12
46921: ST_TO_ADDR
// for i := 1 to Count ( mpGameSettingsKeys ) do
46922: LD_ADDR_VAR 0 2
46926: PUSH
46927: DOUBLE
46928: LD_INT 1
46930: DEC
46931: ST_TO_ADDR
46932: LD_EXP 2
46936: PPUSH
46937: CALL 5133 0 1
46941: PUSH
46942: FOR_TO
46943: IFFALSE 47019
// begin setting := mpGameSettingsKeys [ i ] ;
46945: LD_ADDR_VAR 0 12
46949: PUSH
46950: LD_EXP 2
46954: PUSH
46955: LD_VAR 0 2
46959: ARRAY
46960: ST_TO_ADDR
// if setting then
46961: LD_VAR 0 12
46965: IFFALSE 47017
// mpGameSettings := Replace ( mpGameSettings , i , mpGameSettingsValues [ i ] [ GetMultiplayerSetting ( i - 1 ) + 1 ] ) ;
46967: LD_ADDR_EXP 4
46971: PUSH
46972: LD_EXP 4
46976: PPUSH
46977: LD_VAR 0 2
46981: PPUSH
46982: LD_EXP 3
46986: PUSH
46987: LD_VAR 0 2
46991: ARRAY
46992: PUSH
46993: LD_VAR 0 2
46997: PUSH
46998: LD_INT 1
47000: MINUS
47001: PPUSH
47002: CALL_OW 426
47006: PUSH
47007: LD_INT 1
47009: PLUS
47010: ARRAY
47011: PPUSH
47012: CALL_OW 1
47016: ST_TO_ADDR
// end ;
47017: GO 46942
47019: POP
47020: POP
// mpTeamGame := ( mpSideTeams diff [ 0 ] ) > 1 ;
47021: LD_ADDR_EXP 9
47025: PUSH
47026: LD_EXP 6
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: DIFF
47037: PUSH
47038: LD_INT 1
47040: GREATER
47041: ST_TO_ADDR
// end else
47042: GO 47044
// begin end ; GetMultiplayerMapData ( mpGameType ) ;
47044: LD_EXP 1
47048: PPUSH
47049: CALL 843 0 1
// if Count ( mpMarkedAreas ) then
47053: LD_EXP 16
47057: PPUSH
47058: CALL 5133 0 1
47062: IFFALSE 47093
// begin for i in mpMarkedAreas do
47064: LD_ADDR_VAR 0 2
47068: PUSH
47069: LD_EXP 16
47073: PUSH
47074: FOR_IN
47075: IFFALSE 47091
// SetAreaMapShow ( i , 0 ) ;
47077: LD_VAR 0 2
47081: PPUSH
47082: LD_INT 0
47084: PPUSH
47085: CALL_OW 424
47089: GO 47074
47091: POP
47092: POP
// end ; for i := 1 to 8 do
47093: LD_ADDR_VAR 0 2
47097: PUSH
47098: DOUBLE
47099: LD_INT 1
47101: DEC
47102: ST_TO_ADDR
47103: LD_INT 8
47105: PUSH
47106: FOR_TO
47107: IFFALSE 48443
// begin if not mpSidePositions [ i ] then
47109: LD_EXP 5
47113: PUSH
47114: LD_VAR 0 2
47118: ARRAY
47119: NOT
47120: IFFALSE 47124
// continue ;
47122: GO 47106
// side := i ;
47124: LD_ADDR_VAR 0 7
47128: PUSH
47129: LD_VAR 0 2
47133: ST_TO_ADDR
// nation := mpSideNations [ i ] ;
47134: LD_ADDR_VAR 0 9
47138: PUSH
47139: LD_EXP 7
47143: PUSH
47144: LD_VAR 0 2
47148: ARRAY
47149: ST_TO_ADDR
// pos := mpSidePositions [ i ] ;
47150: LD_ADDR_VAR 0 8
47154: PUSH
47155: LD_EXP 5
47159: PUSH
47160: LD_VAR 0 2
47164: ARRAY
47165: ST_TO_ADDR
// if Count ( mpOilDeposits ) then
47166: LD_EXP 10
47170: PPUSH
47171: CALL 5133 0 1
47175: IFFALSE 47252
// begin for j in mpOilDeposits [ pos ] do
47177: LD_ADDR_VAR 0 3
47181: PUSH
47182: LD_EXP 10
47186: PUSH
47187: LD_VAR 0 8
47191: ARRAY
47192: PUSH
47193: FOR_IN
47194: IFFALSE 47250
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_oil ) ;
47196: LD_VAR 0 3
47200: PUSH
47201: LD_INT 1
47203: ARRAY
47204: PPUSH
47205: LD_VAR 0 3
47209: PUSH
47210: LD_INT 2
47212: ARRAY
47213: PPUSH
47214: LD_INT 2
47216: PPUSH
47217: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47221: LD_VAR 0 3
47225: PUSH
47226: LD_INT 1
47228: ARRAY
47229: PPUSH
47230: LD_VAR 0 3
47234: PUSH
47235: LD_INT 2
47237: ARRAY
47238: PPUSH
47239: LD_VAR 0 7
47243: PPUSH
47244: CALL_OW 441
// end ;
47248: GO 47193
47250: POP
47251: POP
// end ; if Count ( mpSibDeposits ) then
47252: LD_EXP 11
47256: PPUSH
47257: CALL 5133 0 1
47261: IFFALSE 47338
// begin for j in mpSibDeposits [ pos ] do
47263: LD_ADDR_VAR 0 3
47267: PUSH
47268: LD_EXP 11
47272: PUSH
47273: LD_VAR 0 8
47277: ARRAY
47278: PUSH
47279: FOR_IN
47280: IFFALSE 47336
// begin CreateDepositXY ( j [ 1 ] , j [ 2 ] , mat_siberit ) ;
47282: LD_VAR 0 3
47286: PUSH
47287: LD_INT 1
47289: ARRAY
47290: PPUSH
47291: LD_VAR 0 3
47295: PUSH
47296: LD_INT 2
47298: ARRAY
47299: PPUSH
47300: LD_INT 3
47302: PPUSH
47303: CALL_OW 62
// SetResourceVisibility ( j [ 1 ] , j [ 2 ] , side ) ;
47307: LD_VAR 0 3
47311: PUSH
47312: LD_INT 1
47314: ARRAY
47315: PPUSH
47316: LD_VAR 0 3
47320: PUSH
47321: LD_INT 2
47323: ARRAY
47324: PPUSH
47325: LD_VAR 0 7
47329: PPUSH
47330: CALL_OW 441
// end ;
47334: GO 47279
47336: POP
47337: POP
// end ; InitBc ;
47338: CALL_OW 21
// InitUc ;
47342: CALL_OW 18
// uc_side := side ;
47346: LD_ADDR_OWVAR 20
47350: PUSH
47351: LD_VAR 0 7
47355: ST_TO_ADDR
// uc_nation := nation ;
47356: LD_ADDR_OWVAR 21
47360: PUSH
47361: LD_VAR 0 9
47365: ST_TO_ADDR
// if mpBattleFlag > - 1 then
47366: LD_EXP 20
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: GREATER
47375: IFFALSE 47534
// begin x := mpStartPos [ pos ] [ 1 ] ;
47377: LD_ADDR_VAR 0 5
47381: PUSH
47382: LD_EXP 19
47386: PUSH
47387: LD_VAR 0 8
47391: ARRAY
47392: PUSH
47393: LD_INT 1
47395: ARRAY
47396: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47397: LD_ADDR_VAR 0 6
47401: PUSH
47402: LD_EXP 19
47406: PUSH
47407: LD_VAR 0 8
47411: ARRAY
47412: PUSH
47413: LD_INT 2
47415: ARRAY
47416: ST_TO_ADDR
// PlaceEnvironment ( x , y , 12 , 2 ) ;
47417: LD_VAR 0 5
47421: PPUSH
47422: LD_VAR 0 6
47426: PPUSH
47427: LD_INT 12
47429: PPUSH
47430: LD_INT 2
47432: PPUSH
47433: CALL_OW 349
// mpBattleFlags := Replace ( mpBattleFlags , side , SetBattleFlag ( side , x , y , [ [ bfo_defend_bonus_human , 100 ] , [ bfo_defend_bonus_vehicle , 70 ] , [ bfo_defend_bonus_building , 40 ] , [ bfo_range , 25 ] , [ bfo_height , 100 ] ] ) ) ;
47437: LD_ADDR_EXP 21
47441: PUSH
47442: LD_EXP 21
47446: PPUSH
47447: LD_VAR 0 7
47451: PPUSH
47452: LD_VAR 0 7
47456: PPUSH
47457: LD_VAR 0 5
47461: PPUSH
47462: LD_VAR 0 6
47466: PPUSH
47467: LD_INT 1
47469: PUSH
47470: LD_INT 100
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 70
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 3
47489: PUSH
47490: LD_INT 40
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 10
47499: PUSH
47500: LD_INT 25
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 20
47509: PUSH
47510: LD_INT 100
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: PPUSH
47524: CALL_OW 418
47528: PPUSH
47529: CALL_OW 1
47533: ST_TO_ADDR
// end ; if Count ( mpDepots ) then
47534: LD_EXP 12
47538: PPUSH
47539: CALL 5133 0 1
47543: IFFALSE 47727
// begin if mpGameType = GameTypeSurvival then
47545: LD_EXP 1
47549: PUSH
47550: LD_INT 2
47552: EQUAL
47553: IFFALSE 47573
// begin bc_level := 10 ;
47555: LD_ADDR_OWVAR 43
47559: PUSH
47560: LD_INT 10
47562: ST_TO_ADDR
// bc_type := b_warehouse ;
47563: LD_ADDR_OWVAR 42
47567: PUSH
47568: LD_INT 1
47570: ST_TO_ADDR
// end else
47571: GO 47589
// begin bc_level := 0 ;
47573: LD_ADDR_OWVAR 43
47577: PUSH
47578: LD_INT 0
47580: ST_TO_ADDR
// bc_type := b_depot ;
47581: LD_ADDR_OWVAR 42
47585: PUSH
47586: LD_INT 0
47588: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( mpDepots [ pos ] [ 1 ] , mpDepots [ pos ] [ 2 ] , mpDepots [ pos ] [ 3 ] ) ;
47589: LD_ADDR_VAR 0 4
47593: PUSH
47594: LD_EXP 12
47598: PUSH
47599: LD_VAR 0 8
47603: ARRAY
47604: PUSH
47605: LD_INT 1
47607: ARRAY
47608: PPUSH
47609: LD_EXP 12
47613: PUSH
47614: LD_VAR 0 8
47618: ARRAY
47619: PUSH
47620: LD_INT 2
47622: ARRAY
47623: PPUSH
47624: LD_EXP 12
47628: PUSH
47629: LD_VAR 0 8
47633: ARRAY
47634: PUSH
47635: LD_INT 3
47637: ARRAY
47638: PPUSH
47639: CALL_OW 47
47643: ST_TO_ADDR
// SetBName ( b , @ & side ) ;
47644: LD_VAR 0 4
47648: PPUSH
47649: LD_STRING @
47651: PUSH
47652: LD_VAR 0 7
47656: STR
47657: PPUSH
47658: CALL_OW 500
// if Count ( mpStartingResources ) then
47662: LD_EXP 13
47666: PPUSH
47667: CALL 5133 0 1
47671: IFFALSE 47725
// begin for j := 1 to mpStartingResources do
47673: LD_ADDR_VAR 0 3
47677: PUSH
47678: DOUBLE
47679: LD_INT 1
47681: DEC
47682: ST_TO_ADDR
47683: LD_EXP 13
47687: PUSH
47688: FOR_TO
47689: IFFALSE 47723
// SetResourceType ( GetBase ( b ) , j , mpStartingResources [ j ] ) ;
47691: LD_VAR 0 4
47695: PPUSH
47696: CALL_OW 274
47700: PPUSH
47701: LD_VAR 0 3
47705: PPUSH
47706: LD_EXP 13
47710: PUSH
47711: LD_VAR 0 3
47715: ARRAY
47716: PPUSH
47717: CALL_OW 277
47721: GO 47688
47723: POP
47724: POP
// end ; end else
47725: GO 47934
// if Count ( mpStartingResources ) then
47727: LD_EXP 13
47731: PPUSH
47732: CALL 5133 0 1
47736: IFFALSE 47934
// begin x := mpStartPos [ pos ] [ 1 ] ;
47738: LD_ADDR_VAR 0 5
47742: PUSH
47743: LD_EXP 19
47747: PUSH
47748: LD_VAR 0 8
47752: ARRAY
47753: PUSH
47754: LD_INT 1
47756: ARRAY
47757: ST_TO_ADDR
// y := mpStartPos [ pos ] [ 2 ] ;
47758: LD_ADDR_VAR 0 6
47762: PUSH
47763: LD_EXP 19
47767: PUSH
47768: LD_VAR 0 8
47772: ARRAY
47773: PUSH
47774: LD_INT 2
47776: ARRAY
47777: ST_TO_ADDR
// for j := 1 to mpStartingResources do
47778: LD_ADDR_VAR 0 3
47782: PUSH
47783: DOUBLE
47784: LD_INT 1
47786: DEC
47787: ST_TO_ADDR
47788: LD_EXP 13
47792: PUSH
47793: FOR_TO
47794: IFFALSE 47932
// begin resources := mpStartingResources [ j ] ;
47796: LD_ADDR_VAR 0 13
47800: PUSH
47801: LD_EXP 13
47805: PUSH
47806: LD_VAR 0 3
47810: ARRAY
47811: ST_TO_ADDR
// if resources = 0 then
47812: LD_VAR 0 13
47816: PUSH
47817: LD_INT 0
47819: EQUAL
47820: IFFALSE 47824
// continue ;
47822: GO 47793
// repeat if resources >= 50 then
47824: LD_VAR 0 13
47828: PUSH
47829: LD_INT 50
47831: GREATEREQUAL
47832: IFFALSE 47878
// begin CreateResourcesXYR ( j , 5 , x , y , 6 , false ) ;
47834: LD_VAR 0 3
47838: PPUSH
47839: LD_INT 5
47841: PPUSH
47842: LD_VAR 0 5
47846: PPUSH
47847: LD_VAR 0 6
47851: PPUSH
47852: LD_INT 6
47854: PPUSH
47855: LD_INT 0
47857: PPUSH
47858: CALL_OW 60
// resources := resources - 50 ;
47862: LD_ADDR_VAR 0 13
47866: PUSH
47867: LD_VAR 0 13
47871: PUSH
47872: LD_INT 50
47874: MINUS
47875: ST_TO_ADDR
// end else
47876: GO 47920
// begin CreateResourcesXYR ( j , resources div 10 , x , y , 6 , false ) ;
47878: LD_VAR 0 3
47882: PPUSH
47883: LD_VAR 0 13
47887: PUSH
47888: LD_INT 10
47890: DIV
47891: PPUSH
47892: LD_VAR 0 5
47896: PPUSH
47897: LD_VAR 0 6
47901: PPUSH
47902: LD_INT 6
47904: PPUSH
47905: LD_INT 0
47907: PPUSH
47908: CALL_OW 60
// resources := 0 ;
47912: LD_ADDR_VAR 0 13
47916: PUSH
47917: LD_INT 0
47919: ST_TO_ADDR
// end ; until resources <= 0 ;
47920: LD_VAR 0 13
47924: PUSH
47925: LD_INT 0
47927: LESSEQUAL
47928: IFFALSE 47824
// end ;
47930: GO 47793
47932: POP
47933: POP
// end ; if Count ( mpBuildings ) then
47934: LD_EXP 15
47938: PPUSH
47939: CALL 5133 0 1
47943: IFFALSE 48021
// begin for j in mpBuildings [ pos ] do
47945: LD_ADDR_VAR 0 3
47949: PUSH
47950: LD_EXP 15
47954: PUSH
47955: LD_VAR 0 8
47959: ARRAY
47960: PUSH
47961: FOR_IN
47962: IFFALSE 48019
// begin bc_level := 0 ;
47964: LD_ADDR_OWVAR 43
47968: PUSH
47969: LD_INT 0
47971: ST_TO_ADDR
// bc_type := j [ 1 ] ;
47972: LD_ADDR_OWVAR 42
47976: PUSH
47977: LD_VAR 0 3
47981: PUSH
47982: LD_INT 1
47984: ARRAY
47985: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( j [ 2 ] , j [ 3 ] , j [ 4 ] ) ;
47986: LD_VAR 0 3
47990: PUSH
47991: LD_INT 2
47993: ARRAY
47994: PPUSH
47995: LD_VAR 0 3
47999: PUSH
48000: LD_INT 3
48002: ARRAY
48003: PPUSH
48004: LD_VAR 0 3
48008: PUSH
48009: LD_INT 4
48011: ARRAY
48012: PPUSH
48013: CALL_OW 47
// end ;
48017: GO 47961
48019: POP
48020: POP
// end ; if mpSibDetection and GetTech ( tech_sibdet , side ) = state_enabled then
48021: LD_EXP 24
48025: IFFALSE 48045
48027: PUSH
48028: LD_INT 20
48030: PPUSH
48031: LD_VAR 0 7
48035: PPUSH
48036: CALL_OW 321
48040: PUSH
48041: LD_INT 1
48043: EQUAL
48044: AND
48045: IFFALSE 48062
// SetTech ( tech_SibDet , side , state_researched ) ;
48047: LD_INT 20
48049: PPUSH
48050: LD_VAR 0 7
48054: PPUSH
48055: LD_INT 2
48057: PPUSH
48058: CALL_OW 322
// if not mpArtifacts then
48062: LD_EXP 42
48066: NOT
48067: IFFALSE 48084
// SetTech ( tech_artifact , side , state_disabled ) ;
48069: LD_INT 24
48071: PPUSH
48072: LD_VAR 0 7
48076: PPUSH
48077: LD_INT 0
48079: PPUSH
48080: CALL_OW 322
// if mpSibBomb = 1 then
48084: LD_EXP 26
48088: PUSH
48089: LD_INT 1
48091: EQUAL
48092: IFFALSE 48111
// begin SetTech ( tech_SibFiss , side , state_enabled ) ;
48094: LD_INT 25
48096: PPUSH
48097: LD_VAR 0 7
48101: PPUSH
48102: LD_INT 1
48104: PPUSH
48105: CALL_OW 322
// end else
48109: GO 48126
// begin SetTech ( tech_SibFiss , side , state_disabled ) ;
48111: LD_INT 25
48113: PPUSH
48114: LD_VAR 0 7
48118: PPUSH
48119: LD_INT 0
48121: PPUSH
48122: CALL_OW 322
// end ; if mpVehicles then
48126: LD_EXP 34
48130: IFFALSE 48229
// begin for j in mpPrepareVehicles ( side , nation , mpVehicles ) do
48132: LD_ADDR_VAR 0 3
48136: PUSH
48137: LD_VAR 0 7
48141: PPUSH
48142: LD_VAR 0 9
48146: PPUSH
48147: LD_EXP 34
48151: PPUSH
48152: CALL 49353 0 3
48156: PUSH
48157: FOR_IN
48158: IFFALSE 48227
// begin SetDir ( j , rand ( 0 , 5 ) ) ;
48160: LD_VAR 0 3
48164: PPUSH
48165: LD_INT 0
48167: PPUSH
48168: LD_INT 5
48170: PPUSH
48171: CALL_OW 12
48175: PPUSH
48176: CALL_OW 233
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48180: LD_VAR 0 3
48184: PPUSH
48185: LD_EXP 19
48189: PUSH
48190: LD_VAR 0 8
48194: ARRAY
48195: PUSH
48196: LD_INT 1
48198: ARRAY
48199: PPUSH
48200: LD_EXP 19
48204: PUSH
48205: LD_VAR 0 8
48209: ARRAY
48210: PUSH
48211: LD_INT 2
48213: ARRAY
48214: PPUSH
48215: LD_INT 12
48217: PPUSH
48218: LD_INT 0
48220: PPUSH
48221: CALL_OW 50
// end ;
48225: GO 48157
48227: POP
48228: POP
// end ; uc_nation := nation ;
48229: LD_ADDR_OWVAR 21
48233: PUSH
48234: LD_VAR 0 9
48238: ST_TO_ADDR
// team := mpPrepareTeam ( side , nation , mpPeopleAmount , mpPeopleSkill ) ;
48239: LD_ADDR_VAR 0 11
48243: PUSH
48244: LD_VAR 0 7
48248: PPUSH
48249: LD_VAR 0 9
48253: PPUSH
48254: LD_EXP 22
48258: PPUSH
48259: LD_EXP 23
48263: PPUSH
48264: CALL 48855 0 4
48268: ST_TO_ADDR
// for j in team do
48269: LD_ADDR_VAR 0 3
48273: PUSH
48274: LD_VAR 0 11
48278: PUSH
48279: FOR_IN
48280: IFFALSE 48329
// PlaceUnitXYR ( j , mpStartPos [ pos ] [ 1 ] , mpStartPos [ pos ] [ 2 ] , 12 , false ) ;
48282: LD_VAR 0 3
48286: PPUSH
48287: LD_EXP 19
48291: PUSH
48292: LD_VAR 0 8
48296: ARRAY
48297: PUSH
48298: LD_INT 1
48300: ARRAY
48301: PPUSH
48302: LD_EXP 19
48306: PUSH
48307: LD_VAR 0 8
48311: ARRAY
48312: PUSH
48313: LD_INT 2
48315: ARRAY
48316: PPUSH
48317: LD_INT 12
48319: PPUSH
48320: LD_INT 0
48322: PPUSH
48323: CALL_OW 50
48327: GO 48279
48329: POP
48330: POP
// if mpApemans then
48331: LD_EXP 28
48335: IFFALSE 48441
// begin for j := 1 to mpApemans do
48337: LD_ADDR_VAR 0 3
48341: PUSH
48342: DOUBLE
48343: LD_INT 1
48345: DEC
48346: ST_TO_ADDR
48347: LD_EXP 28
48351: PUSH
48352: FOR_TO
48353: IFFALSE 48439
// begin PrepareApeman ( - 5 ) ;
48355: LD_INT 5
48357: NEG
48358: PPUSH
48359: CALL 37192 0 1
// ape := CreateHuman ;
48363: LD_ADDR_VAR 0 10
48367: PUSH
48368: CALL_OW 44
48372: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , pos , Join ( mpApePosIndex [ pos ] , ape ) ) ;
48373: LD_ADDR_EXP 30
48377: PUSH
48378: LD_EXP 30
48382: PPUSH
48383: LD_VAR 0 8
48387: PPUSH
48388: LD_EXP 30
48392: PUSH
48393: LD_VAR 0 8
48397: ARRAY
48398: PPUSH
48399: LD_VAR 0 10
48403: PPUSH
48404: CALL 41065 0 2
48408: PPUSH
48409: CALL_OW 1
48413: ST_TO_ADDR
// PlaceUnitArea ( ape , mpApemansArea [ pos ] , false ) ;
48414: LD_VAR 0 10
48418: PPUSH
48419: LD_EXP 29
48423: PUSH
48424: LD_VAR 0 8
48428: ARRAY
48429: PPUSH
48430: LD_INT 0
48432: PPUSH
48433: CALL_OW 49
// end ;
48437: GO 48352
48439: POP
48440: POP
// end ; end ;
48441: GO 47106
48443: POP
48444: POP
// if not mpTeamGame then
48445: LD_EXP 9
48449: NOT
48450: IFFALSE 48548
// begin for i := 1 to 8 do
48452: LD_ADDR_VAR 0 2
48456: PUSH
48457: DOUBLE
48458: LD_INT 1
48460: DEC
48461: ST_TO_ADDR
48462: LD_INT 8
48464: PUSH
48465: FOR_TO
48466: IFFALSE 48544
// for j := 1 to 8 do
48468: LD_ADDR_VAR 0 3
48472: PUSH
48473: DOUBLE
48474: LD_INT 1
48476: DEC
48477: ST_TO_ADDR
48478: LD_INT 8
48480: PUSH
48481: FOR_TO
48482: IFFALSE 48540
// if i <> j then
48484: LD_VAR 0 2
48488: PUSH
48489: LD_VAR 0 3
48493: NONEQUAL
48494: IFFALSE 48518
// SetAttitude ( i , j , att_neutral , true ) else
48496: LD_VAR 0 2
48500: PPUSH
48501: LD_VAR 0 3
48505: PPUSH
48506: LD_INT 0
48508: PPUSH
48509: LD_INT 1
48511: PPUSH
48512: CALL_OW 80
48516: GO 48538
// SetAttitude ( i , j , att_friend , true ) ;
48518: LD_VAR 0 2
48522: PPUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: LD_INT 1
48530: PPUSH
48531: LD_INT 1
48533: PPUSH
48534: CALL_OW 80
48538: GO 48481
48540: POP
48541: POP
48542: GO 48465
48544: POP
48545: POP
// end else
48546: GO 48723
// begin if mpSharedVision then
48548: LD_EXP 14
48552: IFFALSE 48617
// begin for i in mpTeams do
48554: LD_ADDR_VAR 0 2
48558: PUSH
48559: LD_EXP 8
48563: PUSH
48564: FOR_IN
48565: IFFALSE 48615
// for j := 2 to i do
48567: LD_ADDR_VAR 0 3
48571: PUSH
48572: DOUBLE
48573: LD_INT 2
48575: DEC
48576: ST_TO_ADDR
48577: LD_VAR 0 2
48581: PUSH
48582: FOR_TO
48583: IFFALSE 48611
// ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
48585: LD_VAR 0 2
48589: PUSH
48590: LD_VAR 0 3
48594: ARRAY
48595: PPUSH
48596: LD_VAR 0 2
48600: PUSH
48601: LD_INT 1
48603: ARRAY
48604: PPUSH
48605: CALL_OW 343
48609: GO 48582
48611: POP
48612: POP
48613: GO 48564
48615: POP
48616: POP
// end ; for i := 1 to 8 do
48617: LD_ADDR_VAR 0 2
48621: PUSH
48622: DOUBLE
48623: LD_INT 1
48625: DEC
48626: ST_TO_ADDR
48627: LD_INT 8
48629: PUSH
48630: FOR_TO
48631: IFFALSE 48721
// for j := 1 to 8 do
48633: LD_ADDR_VAR 0 3
48637: PUSH
48638: DOUBLE
48639: LD_INT 1
48641: DEC
48642: ST_TO_ADDR
48643: LD_INT 8
48645: PUSH
48646: FOR_TO
48647: IFFALSE 48717
// if mpSideTeams [ i ] = mpSideTeams [ j ] then
48649: LD_EXP 6
48653: PUSH
48654: LD_VAR 0 2
48658: ARRAY
48659: PUSH
48660: LD_EXP 6
48664: PUSH
48665: LD_VAR 0 3
48669: ARRAY
48670: EQUAL
48671: IFFALSE 48695
// SetAttitude ( i , j , att_friend , true ) else
48673: LD_VAR 0 2
48677: PPUSH
48678: LD_VAR 0 3
48682: PPUSH
48683: LD_INT 1
48685: PPUSH
48686: LD_INT 1
48688: PPUSH
48689: CALL_OW 80
48693: GO 48715
// SetAttitude ( i , j , att_enemy , true ) ;
48695: LD_VAR 0 2
48699: PPUSH
48700: LD_VAR 0 3
48704: PPUSH
48705: LD_INT 2
48707: PPUSH
48708: LD_INT 1
48710: PPUSH
48711: CALL_OW 80
48715: GO 48646
48717: POP
48718: POP
48719: GO 48630
48721: POP
48722: POP
// end ; music_nat := mpSideNations [ your_side ] ;
48723: LD_ADDR_OWVAR 71
48727: PUSH
48728: LD_EXP 7
48732: PUSH
48733: LD_OWVAR 2
48737: ARRAY
48738: ST_TO_ADDR
// if IAmSpec then
48739: CALL_OW 531
48743: IFFALSE 48784
// begin FogOff ( true ) ;
48745: LD_INT 1
48747: PPUSH
48748: CALL_OW 344
// CenterNowOnXY ( mpMapSize [ 1 ] div 2 , mpMapSize [ 2 ] div 2 ) ;
48752: LD_EXP 27
48756: PUSH
48757: LD_INT 1
48759: ARRAY
48760: PUSH
48761: LD_INT 2
48763: DIV
48764: PPUSH
48765: LD_EXP 27
48769: PUSH
48770: LD_INT 2
48772: ARRAY
48773: PUSH
48774: LD_INT 2
48776: DIV
48777: PPUSH
48778: CALL_OW 86
// end else
48782: GO 48830
// begin CenterNowOnXY ( mpStartPos [ mpSidePositions [ your_side ] ] [ 1 ] , mpStartPos [ mpSidePositions [ your_side ] ] [ 2 ] ) ;
48784: LD_EXP 19
48788: PUSH
48789: LD_EXP 5
48793: PUSH
48794: LD_OWVAR 2
48798: ARRAY
48799: ARRAY
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PPUSH
48805: LD_EXP 19
48809: PUSH
48810: LD_EXP 5
48814: PUSH
48815: LD_OWVAR 2
48819: ARRAY
48820: ARRAY
48821: PUSH
48822: LD_INT 2
48824: ARRAY
48825: PPUSH
48826: CALL_OW 86
// end ; BeginBuildUp ;
48830: CALL 49886 0 0
// enable ( mpActive ) ;
48834: LD_INT 100
48836: ENABLE_MARKED
// enable ( mpGameType ) ;
48837: LD_EXP 1
48841: ENABLE_MARKED
// mpGameActive := true ;
48842: LD_ADDR_EXP 37
48846: PUSH
48847: LD_INT 1
48849: ST_TO_ADDR
// end ;
48850: LD_VAR 0 1
48854: RET
// var mpTeamPreset ; function mpPrepareTeam ( side , nation , amount , skill ) ; var i , un , class ; begin
48855: LD_INT 0
48857: PPUSH
48858: PPUSH
48859: PPUSH
48860: PPUSH
// result := [ ] ;
48861: LD_ADDR_VAR 0 5
48865: PUSH
48866: EMPTY
48867: ST_TO_ADDR
// class := class_soldier ;
48868: LD_ADDR_VAR 0 8
48872: PUSH
48873: LD_INT 1
48875: ST_TO_ADDR
// uc_side := side ;
48876: LD_ADDR_OWVAR 20
48880: PUSH
48881: LD_VAR 0 1
48885: ST_TO_ADDR
// uc_nation := nation ;
48886: LD_ADDR_OWVAR 21
48890: PUSH
48891: LD_VAR 0 2
48895: ST_TO_ADDR
// hc_name := mp_sides_players_names [ side ] ;
48896: LD_ADDR_OWVAR 26
48900: PUSH
48901: LD_OWVAR 19
48905: PUSH
48906: LD_VAR 0 1
48910: ARRAY
48911: ST_TO_ADDR
// PrepareHuman ( rand ( 1 , 2 ) , class , skill + 2 ) ;
48912: LD_INT 1
48914: PPUSH
48915: LD_INT 2
48917: PPUSH
48918: CALL_OW 12
48922: PPUSH
48923: LD_VAR 0 8
48927: PPUSH
48928: LD_VAR 0 4
48932: PUSH
48933: LD_INT 2
48935: PLUS
48936: PPUSH
48937: CALL_OW 380
// hc_importance := 105 ;
48941: LD_ADDR_OWVAR 32
48945: PUSH
48946: LD_INT 105
48948: ST_TO_ADDR
// if Multiplayer then
48949: LD_OWVAR 4
48953: IFFALSE 48993
// begin hc_gallery := MULTIAVATARS ;
48955: LD_ADDR_OWVAR 33
48959: PUSH
48960: LD_STRING MULTIAVATARS
48962: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( side ) ;
48963: LD_ADDR_OWVAR 34
48967: PUSH
48968: LD_VAR 0 1
48972: PPUSH
48973: CALL_OW 525
48977: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( side ) ;
48978: LD_ADDR_OWVAR 27
48982: PUSH
48983: LD_VAR 0 1
48987: PPUSH
48988: CALL_OW 526
48992: ST_TO_ADDR
// end ; result := Join ( result , CreateHuman ) ;
48993: LD_ADDR_VAR 0 5
48997: PUSH
48998: LD_VAR 0 5
49002: PPUSH
49003: CALL_OW 44
49007: PPUSH
49008: CALL 41065 0 2
49012: ST_TO_ADDR
// if mpTeamPreset then
49013: LD_LOC 1
49017: IFFALSE 49113
// begin CopySkills ( mpTeamPreset [ 1 ] , result [ result ] ) ;
49019: LD_LOC 1
49023: PUSH
49024: LD_INT 1
49026: ARRAY
49027: PPUSH
49028: LD_VAR 0 5
49032: PUSH
49033: LD_VAR 0 5
49037: ARRAY
49038: PPUSH
49039: CALL_OW 510
// SetAttr ( result [ result ] , attr_stamina , GetAttr ( mpTeamPreset [ 1 ] , attr_stamina ) ) ;
49043: LD_VAR 0 5
49047: PUSH
49048: LD_VAR 0 5
49052: ARRAY
49053: PPUSH
49054: LD_INT 1
49056: PPUSH
49057: LD_LOC 1
49061: PUSH
49062: LD_INT 1
49064: ARRAY
49065: PPUSH
49066: LD_INT 1
49068: PPUSH
49069: CALL_OW 260
49073: PPUSH
49074: CALL_OW 239
// SetAttr ( result [ result ] , attr_speed , GetAttr ( mpTeamPreset [ 1 ] , attr_speed ) ) ;
49078: LD_VAR 0 5
49082: PUSH
49083: LD_VAR 0 5
49087: ARRAY
49088: PPUSH
49089: LD_INT 2
49091: PPUSH
49092: LD_LOC 1
49096: PUSH
49097: LD_INT 1
49099: ARRAY
49100: PPUSH
49101: LD_INT 2
49103: PPUSH
49104: CALL_OW 260
49108: PPUSH
49109: CALL_OW 239
// end ; InitHc_All ( ) ;
49113: CALL_OW 584
// class := 2 ;
49117: LD_ADDR_VAR 0 8
49121: PUSH
49122: LD_INT 2
49124: ST_TO_ADDR
// for i := 1 to ( amount - 1 ) do
49125: LD_ADDR_VAR 0 6
49129: PUSH
49130: DOUBLE
49131: LD_INT 1
49133: DEC
49134: ST_TO_ADDR
49135: LD_VAR 0 3
49139: PUSH
49140: LD_INT 1
49142: MINUS
49143: PUSH
49144: FOR_TO
49145: IFFALSE 49329
// begin PrepareHuman ( false , class , skill ) ;
49147: LD_INT 0
49149: PPUSH
49150: LD_VAR 0 8
49154: PPUSH
49155: LD_VAR 0 4
49159: PPUSH
49160: CALL_OW 380
// un := CreateHuman ;
49164: LD_ADDR_VAR 0 7
49168: PUSH
49169: CALL_OW 44
49173: ST_TO_ADDR
// result := Join ( result , un ) ;
49174: LD_ADDR_VAR 0 5
49178: PUSH
49179: LD_VAR 0 5
49183: PPUSH
49184: LD_VAR 0 7
49188: PPUSH
49189: CALL 41065 0 2
49193: ST_TO_ADDR
// if mpTeamPreset then
49194: LD_LOC 1
49198: IFFALSE 49294
// begin CopySkills ( mpTeamPreset [ i + 1 ] , un ) ;
49200: LD_LOC 1
49204: PUSH
49205: LD_VAR 0 6
49209: PUSH
49210: LD_INT 1
49212: PLUS
49213: ARRAY
49214: PPUSH
49215: LD_VAR 0 7
49219: PPUSH
49220: CALL_OW 510
// SetAttr ( un , attr_stamina , GetAttr ( mpTeamPreset [ i + 1 ] , attr_stamina ) ) ;
49224: LD_VAR 0 7
49228: PPUSH
49229: LD_INT 1
49231: PPUSH
49232: LD_LOC 1
49236: PUSH
49237: LD_VAR 0 6
49241: PUSH
49242: LD_INT 1
49244: PLUS
49245: ARRAY
49246: PPUSH
49247: LD_INT 1
49249: PPUSH
49250: CALL_OW 260
49254: PPUSH
49255: CALL_OW 239
// SetAttr ( un , attr_speed , GetAttr ( mpTeamPreset [ i + 1 ] , attr_speed ) ) ;
49259: LD_VAR 0 7
49263: PPUSH
49264: LD_INT 2
49266: PPUSH
49267: LD_LOC 1
49271: PUSH
49272: LD_VAR 0 6
49276: PUSH
49277: LD_INT 1
49279: PLUS
49280: ARRAY
49281: PPUSH
49282: LD_INT 2
49284: PPUSH
49285: CALL_OW 260
49289: PPUSH
49290: CALL_OW 239
// end ; class := Inc ( class ) ;
49294: LD_ADDR_VAR 0 8
49298: PUSH
49299: LD_VAR 0 8
49303: PPUSH
49304: CALL 42438 0 1
49308: ST_TO_ADDR
// if class = 5 then
49309: LD_VAR 0 8
49313: PUSH
49314: LD_INT 5
49316: EQUAL
49317: IFFALSE 49327
// class := 1 ;
49319: LD_ADDR_VAR 0 8
49323: PUSH
49324: LD_INT 1
49326: ST_TO_ADDR
// end ;
49327: GO 49144
49329: POP
49330: POP
// if not mpTeamPreset then
49331: LD_LOC 1
49335: NOT
49336: IFFALSE 49348
// mpTeamPreset := result ;
49338: LD_ADDR_LOC 1
49342: PUSH
49343: LD_VAR 0 5
49347: ST_TO_ADDR
// end ;
49348: LD_VAR 0 5
49352: RET
// function mpPrepareVehicles ( side , nation , vehicles ) ; var i ; begin
49353: LD_INT 0
49355: PPUSH
49356: PPUSH
// result := [ ] ;
49357: LD_ADDR_VAR 0 4
49361: PUSH
49362: EMPTY
49363: ST_TO_ADDR
// if not vehicles then
49364: LD_VAR 0 3
49368: NOT
49369: IFFALSE 49373
// exit ;
49371: GO 49587
// for i := 1 to vehicles [ nation ] do
49373: LD_ADDR_VAR 0 5
49377: PUSH
49378: DOUBLE
49379: LD_INT 1
49381: DEC
49382: ST_TO_ADDR
49383: LD_VAR 0 3
49387: PUSH
49388: LD_VAR 0 2
49392: ARRAY
49393: PUSH
49394: FOR_TO
49395: IFFALSE 49585
// begin uc_side := side ;
49397: LD_ADDR_OWVAR 20
49401: PUSH
49402: LD_VAR 0 1
49406: ST_TO_ADDR
// if Count ( vehicles [ nation ] [ i ] ) > 4 then
49407: LD_VAR 0 3
49411: PUSH
49412: LD_VAR 0 2
49416: ARRAY
49417: PUSH
49418: LD_VAR 0 5
49422: ARRAY
49423: PPUSH
49424: CALL 5133 0 1
49428: PUSH
49429: LD_INT 4
49431: GREATER
49432: IFFALSE 49462
// uc_nation := vehicles [ nation ] [ i ] [ 5 ] else
49434: LD_ADDR_OWVAR 21
49438: PUSH
49439: LD_VAR 0 3
49443: PUSH
49444: LD_VAR 0 2
49448: ARRAY
49449: PUSH
49450: LD_VAR 0 5
49454: ARRAY
49455: PUSH
49456: LD_INT 5
49458: ARRAY
49459: ST_TO_ADDR
49460: GO 49472
// uc_nation := nation ;
49462: LD_ADDR_OWVAR 21
49466: PUSH
49467: LD_VAR 0 2
49471: ST_TO_ADDR
// PrepareVehicle ( vehicles [ nation ] [ i ] [ 1 ] , vehicles [ nation ] [ i ] [ 2 ] , vehicles [ nation ] [ i ] [ 3 ] , vehicles [ nation ] [ i ] [ 4 ] , 80 ) ;
49472: LD_VAR 0 3
49476: PUSH
49477: LD_VAR 0 2
49481: ARRAY
49482: PUSH
49483: LD_VAR 0 5
49487: ARRAY
49488: PUSH
49489: LD_INT 1
49491: ARRAY
49492: PPUSH
49493: LD_VAR 0 3
49497: PUSH
49498: LD_VAR 0 2
49502: ARRAY
49503: PUSH
49504: LD_VAR 0 5
49508: ARRAY
49509: PUSH
49510: LD_INT 2
49512: ARRAY
49513: PPUSH
49514: LD_VAR 0 3
49518: PUSH
49519: LD_VAR 0 2
49523: ARRAY
49524: PUSH
49525: LD_VAR 0 5
49529: ARRAY
49530: PUSH
49531: LD_INT 3
49533: ARRAY
49534: PPUSH
49535: LD_VAR 0 3
49539: PUSH
49540: LD_VAR 0 2
49544: ARRAY
49545: PUSH
49546: LD_VAR 0 5
49550: ARRAY
49551: PUSH
49552: LD_INT 4
49554: ARRAY
49555: PPUSH
49556: LD_INT 80
49558: PPUSH
49559: CALL 7895 0 5
// result := Join ( result , CreateVehicle ) ;
49563: LD_ADDR_VAR 0 4
49567: PUSH
49568: LD_VAR 0 4
49572: PPUSH
49573: CALL_OW 45
49577: PPUSH
49578: CALL 41065 0 2
49582: ST_TO_ADDR
// end ;
49583: GO 49394
49585: POP
49586: POP
// end ;
49587: LD_VAR 0 4
49591: RET
// function mpUpdateFlags ( strength ) ; var i ; begin
49592: LD_INT 0
49594: PPUSH
49595: PPUSH
// for i in mpBattleFlags do
49596: LD_ADDR_VAR 0 3
49600: PUSH
49601: LD_EXP 21
49605: PUSH
49606: FOR_IN
49607: IFFALSE 49684
// ChangeBattleFlagOptions ( i , [ [ bfo_defend_bonus_human , strength ] , [ bfo_defend_bonus_vehicle , strength * 0.7 ] , [ bfo_defend_bonus_building , strength * 0.4 ] , [ bfo_height , strength ] ] ) ;
49609: LD_VAR 0 3
49613: PPUSH
49614: LD_INT 1
49616: PUSH
49617: LD_VAR 0 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_VAR 0 1
49633: PUSH
49634: LD_REAL  7.00000000000000E-0001
49637: MUL
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: PUSH
49646: LD_VAR 0 1
49650: PUSH
49651: LD_REAL  4.00000000000000E-0001
49654: MUL
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 20
49662: PUSH
49663: LD_VAR 0 1
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: PPUSH
49678: CALL_OW 423
49682: GO 49606
49684: POP
49685: POP
// end ;
49686: LD_VAR 0 2
49690: RET
// every 0 0$1 trigger mpActive do var i , strength ;
49691: LD_INT 100
49693: IFFALSE 49788
49695: GO 49697
49697: DISABLE
49698: LD_INT 0
49700: PPUSH
49701: PPUSH
// begin if mpBattleFlag <= 0 then
49702: LD_EXP 20
49706: PUSH
49707: LD_INT 0
49709: LESSEQUAL
49710: IFFALSE 49714
// exit ;
49712: GO 49788
// strength := 100 ;
49714: LD_ADDR_VAR 0 2
49718: PUSH
49719: LD_INT 100
49721: ST_TO_ADDR
// repeat wait ( mpBattleFlag ) ;
49722: LD_EXP 20
49726: PPUSH
49727: CALL_OW 67
// strength := Dec ( strength ) ;
49731: LD_ADDR_VAR 0 2
49735: PUSH
49736: LD_VAR 0 2
49740: PPUSH
49741: CALL 42460 0 1
49745: ST_TO_ADDR
// mpUpdateFlags ( strength ) ;
49746: LD_VAR 0 2
49750: PPUSH
49751: CALL 49592 0 1
// until not strength ;
49755: LD_VAR 0 2
49759: NOT
49760: IFFALSE 49722
// for i in mpBattleFlags do
49762: LD_ADDR_VAR 0 1
49766: PUSH
49767: LD_EXP 21
49771: PUSH
49772: FOR_IN
49773: IFFALSE 49786
// KillBattleFlag ( i ) ;
49775: LD_VAR 0 1
49779: PPUSH
49780: CALL_OW 419
49784: GO 49772
49786: POP
49787: POP
// end ;
49788: PPOPN 2
49790: END
// every 0 0$1 marked mpActive do var side , tmp ;
49791: GO 49793
49793: DISABLE
49794: LD_INT 0
49796: PPUSH
49797: PPUSH
// begin if mpSibBomb <= 1 then
49798: LD_EXP 26
49802: PUSH
49803: LD_INT 1
49805: LESSEQUAL
49806: IFFALSE 49810
// exit ;
49808: GO 49883
// tmp := mpSibBomb ;
49810: LD_ADDR_VAR 0 2
49814: PUSH
49815: LD_EXP 26
49819: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
49820: LD_INT 35
49822: PPUSH
49823: CALL_OW 67
// tmp := tmp - 0 0$1 ;
49827: LD_ADDR_VAR 0 2
49831: PUSH
49832: LD_VAR 0 2
49836: PUSH
49837: LD_INT 35
49839: MINUS
49840: ST_TO_ADDR
// until not tmp ;
49841: LD_VAR 0 2
49845: NOT
49846: IFFALSE 49820
// for side := 1 to 8 do
49848: LD_ADDR_VAR 0 1
49852: PUSH
49853: DOUBLE
49854: LD_INT 1
49856: DEC
49857: ST_TO_ADDR
49858: LD_INT 8
49860: PUSH
49861: FOR_TO
49862: IFFALSE 49881
// SetTech ( tech_SibFiss , side , state_enabled ) ;
49864: LD_INT 25
49866: PPUSH
49867: LD_VAR 0 1
49871: PPUSH
49872: LD_INT 1
49874: PPUSH
49875: CALL_OW 322
49879: GO 49861
49881: POP
49882: POP
// end ;
49883: PPOPN 2
49885: END
// export mpBuildUpTimeDelay , mpBuildUpTimeActive ; function BeginBuildUp ; var i , j ; begin
49886: LD_INT 0
49888: PPUSH
49889: PPUSH
49890: PPUSH
// mpBuildUpTimeDelay := 0 ;
49891: LD_ADDR_EXP 44
49895: PUSH
49896: LD_INT 0
49898: ST_TO_ADDR
// if not mpBuildUpTime then
49899: LD_EXP 18
49903: NOT
49904: IFFALSE 49908
// exit ;
49906: GO 50097
// mpBuildUpTimeDelay := 4 4$00 + 1 1$00 * mpBuildUpTime ;
49908: LD_ADDR_EXP 44
49912: PUSH
49913: LD_INT 8400
49915: PUSH
49916: LD_INT 2100
49918: PUSH
49919: LD_EXP 18
49923: MUL
49924: PLUS
49925: ST_TO_ADDR
// mpBuildUpTimeActive := true ;
49926: LD_ADDR_EXP 45
49930: PUSH
49931: LD_INT 1
49933: ST_TO_ADDR
// for i := 1 to 8 do
49934: LD_ADDR_VAR 0 2
49938: PUSH
49939: DOUBLE
49940: LD_INT 1
49942: DEC
49943: ST_TO_ADDR
49944: LD_INT 8
49946: PUSH
49947: FOR_TO
49948: IFFALSE 50095
// if mpSidePositions [ i ] then
49950: LD_EXP 5
49954: PUSH
49955: LD_VAR 0 2
49959: ARRAY
49960: IFFALSE 50093
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 5 ) ;
49962: LD_EXP 17
49966: PUSH
49967: LD_EXP 5
49971: PUSH
49972: LD_VAR 0 2
49976: ARRAY
49977: ARRAY
49978: PPUSH
49979: LD_INT 5
49981: PPUSH
49982: CALL_OW 424
// for j := 1 to 8 do
49986: LD_ADDR_VAR 0 3
49990: PUSH
49991: DOUBLE
49992: LD_INT 1
49994: DEC
49995: ST_TO_ADDR
49996: LD_INT 8
49998: PUSH
49999: FOR_TO
50000: IFFALSE 50091
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50002: LD_EXP 5
50006: PUSH
50007: LD_VAR 0 3
50011: ARRAY
50012: IFFALSE 50061
50014: PUSH
50015: LD_EXP 6
50019: PUSH
50020: LD_VAR 0 2
50024: ARRAY
50025: PUSH
50026: LD_EXP 6
50030: PUSH
50031: LD_VAR 0 3
50035: ARRAY
50036: NONEQUAL
50037: IFTRUE 50060
50039: PUSH
50040: LD_EXP 9
50044: NOT
50045: IFFALSE 50059
50047: PUSH
50048: LD_VAR 0 2
50052: PUSH
50053: LD_VAR 0 3
50057: NONEQUAL
50058: AND
50059: OR
50060: AND
50061: IFFALSE 50089
// HideArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50063: LD_VAR 0 3
50067: PPUSH
50068: LD_EXP 17
50072: PUSH
50073: LD_EXP 5
50077: PUSH
50078: LD_VAR 0 2
50082: ARRAY
50083: ARRAY
50084: PPUSH
50085: CALL_OW 333
50089: GO 49999
50091: POP
50092: POP
// end ;
50093: GO 49947
50095: POP
50096: POP
// end ;
50097: LD_VAR 0 1
50101: RET
// function EndBuildUp ; var i , j ; begin
50102: LD_INT 0
50104: PPUSH
50105: PPUSH
50106: PPUSH
// mpBuildUpTimeActive := false ;
50107: LD_ADDR_EXP 45
50111: PUSH
50112: LD_INT 0
50114: ST_TO_ADDR
// for i := 1 to 8 do
50115: LD_ADDR_VAR 0 2
50119: PUSH
50120: DOUBLE
50121: LD_INT 1
50123: DEC
50124: ST_TO_ADDR
50125: LD_INT 8
50127: PUSH
50128: FOR_TO
50129: IFFALSE 50276
// if mpSidePositions [ i ] then
50131: LD_EXP 5
50135: PUSH
50136: LD_VAR 0 2
50140: ARRAY
50141: IFFALSE 50274
// begin SetAreaMapShow ( mpBuildUpAreas [ mpSidePositions [ i ] ] , 0 ) ;
50143: LD_EXP 17
50147: PUSH
50148: LD_EXP 5
50152: PUSH
50153: LD_VAR 0 2
50157: ARRAY
50158: ARRAY
50159: PPUSH
50160: LD_INT 0
50162: PPUSH
50163: CALL_OW 424
// for j := 1 to 8 do
50167: LD_ADDR_VAR 0 3
50171: PUSH
50172: DOUBLE
50173: LD_INT 1
50175: DEC
50176: ST_TO_ADDR
50177: LD_INT 8
50179: PUSH
50180: FOR_TO
50181: IFFALSE 50272
// if mpSidePositions [ j ] and ( ( mpSideTeams [ i ] <> mpSideTeams [ j ] ) or ( not mpTeamGame ) and ( i <> j ) ) then
50183: LD_EXP 5
50187: PUSH
50188: LD_VAR 0 3
50192: ARRAY
50193: IFFALSE 50242
50195: PUSH
50196: LD_EXP 6
50200: PUSH
50201: LD_VAR 0 2
50205: ARRAY
50206: PUSH
50207: LD_EXP 6
50211: PUSH
50212: LD_VAR 0 3
50216: ARRAY
50217: NONEQUAL
50218: IFTRUE 50241
50220: PUSH
50221: LD_EXP 9
50225: NOT
50226: IFFALSE 50240
50228: PUSH
50229: LD_VAR 0 2
50233: PUSH
50234: LD_VAR 0 3
50238: NONEQUAL
50239: AND
50240: OR
50241: AND
50242: IFFALSE 50270
// ShowArea ( j , mpBuildUpAreas [ mpSidePositions [ i ] ] ) ;
50244: LD_VAR 0 3
50248: PPUSH
50249: LD_EXP 17
50253: PUSH
50254: LD_EXP 5
50258: PUSH
50259: LD_VAR 0 2
50263: ARRAY
50264: ARRAY
50265: PPUSH
50266: CALL_OW 334
50270: GO 50180
50272: POP
50273: POP
// end ;
50274: GO 50128
50276: POP
50277: POP
// end ;
50278: LD_VAR 0 1
50282: RET
// every 5 trigger mpBuildUpTimeActive marked mpActive do var i , un ;
50283: LD_EXP 45
50287: IFFALSE 50466
50289: GO 50291
50291: DISABLE
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
// begin for i := 1 to 8 do
50296: LD_ADDR_VAR 0 1
50300: PUSH
50301: DOUBLE
50302: LD_INT 1
50304: DEC
50305: ST_TO_ADDR
50306: LD_INT 8
50308: PUSH
50309: FOR_TO
50310: IFFALSE 50463
// if mpSidePositions [ i ] then
50312: LD_EXP 5
50316: PUSH
50317: LD_VAR 0 1
50321: ARRAY
50322: IFFALSE 50461
// for un in FilterUnitsInArea ( mpBuildUpAreas [ mpSidePositions [ i ] ] , [ [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] , [ f_side , your_side ] ] ) do
50324: LD_ADDR_VAR 0 2
50328: PUSH
50329: LD_EXP 17
50333: PUSH
50334: LD_EXP 5
50338: PUSH
50339: LD_VAR 0 1
50343: ARRAY
50344: ARRAY
50345: PPUSH
50346: LD_INT 2
50348: PUSH
50349: LD_INT 21
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 21
50361: PUSH
50362: LD_INT 2
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 22
50376: PUSH
50377: LD_OWVAR 2
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PPUSH
50390: CALL_OW 70
50394: PUSH
50395: FOR_IN
50396: IFFALSE 50459
// if ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) or ( not mpTeamGame ) and ( i <> your_side ) ) then
50398: LD_EXP 6
50402: PUSH
50403: LD_VAR 0 1
50407: ARRAY
50408: PUSH
50409: LD_EXP 6
50413: PUSH
50414: LD_OWVAR 2
50418: ARRAY
50419: NONEQUAL
50420: IFTRUE 50443
50422: PUSH
50423: LD_EXP 9
50427: NOT
50428: IFFALSE 50442
50430: PUSH
50431: LD_VAR 0 1
50435: PUSH
50436: LD_OWVAR 2
50440: NONEQUAL
50441: AND
50442: OR
50443: IFFALSE 50457
// ComMoveToArea ( un , BuildUpEscape ) ;
50445: LD_VAR 0 2
50449: PPUSH
50450: LD_INT 72
50452: PPUSH
50453: CALL_OW 113
50457: GO 50395
50459: POP
50460: POP
50461: GO 50309
50463: POP
50464: POP
// enable ;
50465: ENABLE
// end ;
50466: PPOPN 2
50468: END
// every 0 0$1 trigger mpBuildUpTime marked mpActive do var tmp ;
50469: LD_EXP 18
50473: IFFALSE 50523
50475: GO 50477
50477: DISABLE
50478: LD_INT 0
50480: PPUSH
// begin tmp := mpBuildUpTime ;
50481: LD_ADDR_VAR 0 1
50485: PUSH
50486: LD_EXP 18
50490: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
50491: LD_INT 35
50493: PPUSH
50494: CALL_OW 67
// tmp := tmp - 0 0$1 ;
50498: LD_ADDR_VAR 0 1
50502: PUSH
50503: LD_VAR 0 1
50507: PUSH
50508: LD_INT 35
50510: MINUS
50511: ST_TO_ADDR
// until not tmp ;
50512: LD_VAR 0 1
50516: NOT
50517: IFFALSE 50491
// EndBuildUp ;
50519: CALL 50102 0 0
// end ;
50523: PPOPN 1
50525: END
// every 0 0$1 trigger mpActive marked mpWin do
50526: LD_INT 100
50528: IFFALSE 50562
50530: GO 50532
50532: DISABLE
// begin if IAmServer then
50533: CALL_OW 518
50537: IFFALSE 50546
// wait ( 0 0$3 ) ;
50539: LD_INT 105
50541: PPUSH
50542: CALL_OW 67
// if Multiplayer then
50546: LD_OWVAR 4
50550: IFFALSE 50558
// YouWinInMultiplayer else
50552: CALL_OW 106
50556: GO 50562
// YouWin ;
50558: CALL_OW 103
// end ;
50562: END
// export function HasPowerByGameType ( gameType , side ) ; begin
50563: LD_INT 0
50565: PPUSH
// result := false ;
50566: LD_ADDR_VAR 0 3
50570: PUSH
50571: LD_INT 0
50573: ST_TO_ADDR
// case gameType of GameTypeNormal , GameTypeFamine :
50574: LD_VAR 0 1
50578: PUSH
50579: LD_INT 1
50581: DOUBLE
50582: EQUAL
50583: IFTRUE 50593
50585: LD_INT 5
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50593
50591: GO 50666
50593: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50594: LD_ADDR_VAR 0 3
50598: PUSH
50599: LD_INT 22
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 21
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 33
50626: PUSH
50627: LD_INT 3
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 33
50636: PUSH
50637: LD_INT 5
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PPUSH
50654: CALL_OW 69
50658: PPUSH
50659: CALL 5133 0 1
50663: ST_TO_ADDR
// end ; GameTypeSurvival :
50664: GO 50905
50666: LD_INT 2
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50674
50672: GO 50804
50674: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) and Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) ;
50675: LD_ADDR_VAR 0 3
50679: PUSH
50680: LD_INT 22
50682: PUSH
50683: LD_VAR 0 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 30
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 30
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: LIST
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PPUSH
50724: CALL_OW 69
50728: PPUSH
50729: CALL 5133 0 1
50733: IFFALSE 50801
50735: PUSH
50736: LD_INT 22
50738: PUSH
50739: LD_VAR 0 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: LD_INT 21
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 33
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 33
50773: PUSH
50774: LD_INT 5
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PPUSH
50791: CALL_OW 69
50795: PPUSH
50796: CALL 5133 0 1
50800: AND
50801: ST_TO_ADDR
// end ; GameTypeKing :
50802: GO 50905
50804: LD_INT 3
50806: DOUBLE
50807: EQUAL
50808: IFTRUE 50812
50810: GO 50904
50812: POP
// begin result := Count ( FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ) and HowMuchPointsKing ( side ) < mpPoints ;
50813: LD_ADDR_VAR 0 3
50817: PUSH
50818: LD_INT 22
50820: PUSH
50821: LD_VAR 0 2
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: PUSH
50833: LD_INT 21
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 33
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 33
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PPUSH
50873: CALL_OW 69
50877: PPUSH
50878: CALL 5133 0 1
50882: IFFALSE 50901
50884: PUSH
50885: LD_VAR 0 2
50889: PPUSH
50890: CALL 54758 0 1
50894: PUSH
50895: LD_EXP 33
50899: LESS
50900: AND
50901: ST_TO_ADDR
// end ; end ;
50902: GO 50905
50904: POP
// end ;
50905: LD_VAR 0 3
50909: RET
// every 0 0$1 trigger mpActive marked mpLose do var gameIsOn , i ;
50910: LD_INT 100
50912: IFFALSE 51142
50914: GO 50916
50916: DISABLE
50917: LD_INT 0
50919: PPUSH
50920: PPUSH
// begin if Multiplayer then
50921: LD_OWVAR 4
50925: IFFALSE 50933
// SetPlayerSpectator ( ) else
50927: CALL_OW 572
50931: GO 50942
// FogOff ( your_side ) ;
50933: LD_OWVAR 2
50937: PPUSH
50938: CALL_OW 344
// repeat gameIsOn := false ;
50942: LD_ADDR_VAR 0 1
50946: PUSH
50947: LD_INT 0
50949: ST_TO_ADDR
// for i := 1 to 8 do
50950: LD_ADDR_VAR 0 2
50954: PUSH
50955: DOUBLE
50956: LD_INT 1
50958: DEC
50959: ST_TO_ADDR
50960: LD_INT 8
50962: PUSH
50963: FOR_TO
50964: IFFALSE 51094
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
50966: LD_EXP 5
50970: PUSH
50971: LD_VAR 0 2
50975: ARRAY
50976: IFFALSE 50989
50978: PUSH
50979: LD_VAR 0 2
50983: PPUSH
50984: CALL_OW 108
50988: AND
50989: IFFALSE 51003
50991: PUSH
50992: LD_VAR 0 2
50996: PUSH
50997: LD_OWVAR 2
51001: NONEQUAL
51002: AND
51003: IFFALSE 51092
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
51005: LD_EXP 6
51009: PUSH
51010: LD_VAR 0 2
51014: ARRAY
51015: NOT
51016: IFTRUE 51064
51018: PUSH
51019: LD_EXP 6
51023: PUSH
51024: LD_VAR 0 2
51028: ARRAY
51029: PUSH
51030: LD_EXP 6
51034: PUSH
51035: LD_OWVAR 2
51039: ARRAY
51040: NONEQUAL
51041: IFFALSE 51063
51043: PUSH
51044: LD_OWVAR 2
51048: PPUSH
51049: LD_VAR 0 2
51053: PPUSH
51054: CALL_OW 81
51058: PUSH
51059: LD_INT 1
51061: NONEQUAL
51062: AND
51063: OR
51064: IFFALSE 51092
// if HasPowerByGameType ( mpGameType , i ) then
51066: LD_EXP 1
51070: PPUSH
51071: LD_VAR 0 2
51075: PPUSH
51076: CALL 50563 0 2
51080: IFFALSE 51092
// begin gameIsOn := true ;
51082: LD_ADDR_VAR 0 1
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// break ;
51090: GO 51094
// end ;
51092: GO 50963
51094: POP
51095: POP
// wait ( 100 ) ;
51096: LD_INT 100
51098: PPUSH
51099: CALL_OW 67
// until not gameIsOn ;
51103: LD_VAR 0 1
51107: NOT
51108: IFFALSE 50942
// if IAmServer then
51110: CALL_OW 518
51114: IFFALSE 51123
// wait ( 0 0$3 ) ;
51116: LD_INT 105
51118: PPUSH
51119: CALL_OW 67
// if Multiplayer then
51123: LD_OWVAR 4
51127: IFFALSE 51135
// YouLostInMultiplayer else
51129: CALL_OW 107
51133: GO 51142
// YouLost (  ) ;
51135: LD_STRING 
51137: PPUSH
51138: CALL_OW 104
// end ;
51142: PPOPN 2
51144: END
// every 0 0$10 trigger mpRespawn marked mpActive do var i , j , tmp , spawn , sides ;
51145: LD_EXP 31
51149: IFFALSE 51533
51151: GO 51153
51153: DISABLE
51154: LD_INT 0
51156: PPUSH
51157: PPUSH
51158: PPUSH
51159: PPUSH
51160: PPUSH
// begin sides := [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] ;
51161: LD_ADDR_VAR 0 5
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: LD_INT 3
51174: PUSH
51175: LD_INT 4
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: LD_INT 6
51183: PUSH
51184: LD_INT 7
51186: PUSH
51187: LD_INT 8
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// repeat wait ( 0 0$10 ) ;
51200: LD_INT 350
51202: PPUSH
51203: CALL_OW 67
// for i := 1 to 8 do
51207: LD_ADDR_VAR 0 1
51211: PUSH
51212: DOUBLE
51213: LD_INT 1
51215: DEC
51216: ST_TO_ADDR
51217: LD_INT 8
51219: PUSH
51220: FOR_TO
51221: IFFALSE 51503
// begin j := sides [ i ] ;
51223: LD_ADDR_VAR 0 2
51227: PUSH
51228: LD_VAR 0 5
51232: PUSH
51233: LD_VAR 0 1
51237: ARRAY
51238: ST_TO_ADDR
// if Count ( mpRespawnPull [ j ] ) and MultiplayerSideAlive ( j ) and HasPowerByGameType ( mpGameType , j ) then
51239: LD_EXP 38
51243: PUSH
51244: LD_VAR 0 2
51248: ARRAY
51249: PPUSH
51250: CALL 5133 0 1
51254: IFFALSE 51267
51256: PUSH
51257: LD_VAR 0 2
51261: PPUSH
51262: CALL_OW 108
51266: AND
51267: IFFALSE 51285
51269: PUSH
51270: LD_EXP 1
51274: PPUSH
51275: LD_VAR 0 2
51279: PPUSH
51280: CALL 50563 0 2
51284: AND
51285: IFFALSE 51501
// begin wait ( mpRespawn div 2 ) ;
51287: LD_EXP 31
51291: PUSH
51292: LD_INT 2
51294: DIV
51295: PPUSH
51296: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , j ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51300: LD_ADDR_VAR 0 3
51304: PUSH
51305: LD_INT 22
51307: PUSH
51308: LD_VAR 0 2
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 50
51319: PUSH
51320: EMPTY
51321: LIST
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: LD_INT 30
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 30
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: PPUSH
51356: CALL_OW 69
51360: ST_TO_ADDR
// if not tmp or not MultiplayerSideAlive ( j ) or not HasPowerByGameType ( mpGameType , j ) then
51361: LD_VAR 0 3
51365: NOT
51366: IFTRUE 51380
51368: PUSH
51369: LD_VAR 0 2
51373: PPUSH
51374: CALL_OW 108
51378: NOT
51379: OR
51380: IFTRUE 51399
51382: PUSH
51383: LD_EXP 1
51387: PPUSH
51388: LD_VAR 0 2
51392: PPUSH
51393: CALL 50563 0 2
51397: NOT
51398: OR
51399: IFFALSE 51403
// continue ;
51401: GO 51220
// spawn := tmp [ 1 ] ;
51403: LD_ADDR_VAR 0 4
51407: PUSH
51408: LD_VAR 0 3
51412: PUSH
51413: LD_INT 1
51415: ARRAY
51416: ST_TO_ADDR
// PlaceUnitXYR ( mpRespawnPull [ j ] [ 1 ] , GetX ( spawn ) , GetY ( spawn ) , 32 , true ) ;
51417: LD_EXP 38
51421: PUSH
51422: LD_VAR 0 2
51426: ARRAY
51427: PUSH
51428: LD_INT 1
51430: ARRAY
51431: PPUSH
51432: LD_VAR 0 4
51436: PPUSH
51437: CALL_OW 250
51441: PPUSH
51442: LD_VAR 0 4
51446: PPUSH
51447: CALL_OW 251
51451: PPUSH
51452: LD_INT 32
51454: PPUSH
51455: LD_INT 1
51457: PPUSH
51458: CALL_OW 50
// mpRespawnPull := Replace ( mpRespawnPull , j , Delete ( mpRespawnPull [ j ] , 1 ) ) ;
51462: LD_ADDR_EXP 38
51466: PUSH
51467: LD_EXP 38
51471: PPUSH
51472: LD_VAR 0 2
51476: PPUSH
51477: LD_EXP 38
51481: PUSH
51482: LD_VAR 0 2
51486: ARRAY
51487: PPUSH
51488: LD_INT 1
51490: PPUSH
51491: CALL_OW 3
51495: PPUSH
51496: CALL_OW 1
51500: ST_TO_ADDR
// end ; end ;
51501: GO 51220
51503: POP
51504: POP
// sides := Reindex ( sides , 1 , 8 , true ) ;
51505: LD_ADDR_VAR 0 5
51509: PUSH
51510: LD_VAR 0 5
51514: PPUSH
51515: LD_INT 1
51517: PPUSH
51518: LD_INT 8
51520: PPUSH
51521: LD_INT 1
51523: PPUSH
51524: CALL 7425 0 4
51528: ST_TO_ADDR
// until false ;
51529: LD_INT 0
51531: IFFALSE 51200
// end ;
51533: PPOPN 5
51535: END
// every 0 0$1 marked mpActive do
51536: GO 51538
51538: DISABLE
// begin enable ;
51539: ENABLE
// if not mpDisplayStrings then
51540: LD_EXP 36
51544: NOT
51545: IFFALSE 51556
// begin display_strings := [ ] ;
51547: LD_ADDR_OWVAR 47
51551: PUSH
51552: EMPTY
51553: ST_TO_ADDR
// exit ;
51554: GO 51566
// end ; display_strings := mpDisplayStrings ;
51556: LD_ADDR_OWVAR 47
51560: PUSH
51561: LD_EXP 36
51565: ST_TO_ADDR
// end ; end_of_file
51566: END
// export function Multiplayer_UnitDestroyed ( un ) ; var i , ape , tag , class , area , nation , side , tmp ; begin
51567: LD_INT 0
51569: PPUSH
51570: PPUSH
51571: PPUSH
51572: PPUSH
51573: PPUSH
51574: PPUSH
51575: PPUSH
51576: PPUSH
51577: PPUSH
// if GetType ( un ) = unit_vehicle then
51578: LD_VAR 0 1
51582: PPUSH
51583: CALL_OW 247
51587: PUSH
51588: LD_INT 2
51590: EQUAL
51591: IFFALSE 51595
// exit ;
51593: GO 52269
// side := GetSide ( un ) ;
51595: LD_ADDR_VAR 0 9
51599: PUSH
51600: LD_VAR 0 1
51604: PPUSH
51605: CALL_OW 255
51609: ST_TO_ADDR
// if mpGameType = GameTypeSurvival then
51610: LD_EXP 1
51614: PUSH
51615: LD_INT 2
51617: EQUAL
51618: IFFALSE 51712
// if GetBType ( un ) in [ b_depot , b_warehouse ] then
51620: LD_VAR 0 1
51624: PPUSH
51625: CALL_OW 266
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: IN
51640: IFFALSE 51712
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] ] ] ) do
51642: LD_ADDR_VAR 0 3
51646: PUSH
51647: LD_INT 22
51649: PUSH
51650: LD_VAR 0 9
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 21
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 33
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: LIST
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PPUSH
51691: CALL_OW 69
51695: PUSH
51696: FOR_IN
51697: IFFALSE 51710
// KillUnit ( i ) ;
51699: LD_VAR 0 3
51703: PPUSH
51704: CALL_OW 66
51708: GO 51696
51710: POP
51711: POP
// end ; if GetClass ( un ) in [ class_apeman , class_apeman_kamikaze , class_apeman_soldier , class_apeman_engineer ] or GetControl ( un ) = control_apeman then
51712: LD_VAR 0 1
51716: PPUSH
51717: CALL_OW 257
51721: PUSH
51722: LD_INT 12
51724: PUSH
51725: LD_INT 17
51727: PUSH
51728: LD_INT 15
51730: PUSH
51731: LD_INT 16
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: IN
51740: IFTRUE 51757
51742: PUSH
51743: LD_VAR 0 1
51747: PPUSH
51748: CALL_OW 263
51752: PUSH
51753: LD_INT 5
51755: EQUAL
51756: OR
51757: IFFALSE 51994
// begin tag := 0 ;
51759: LD_ADDR_VAR 0 5
51763: PUSH
51764: LD_INT 0
51766: ST_TO_ADDR
// for i := 1 to 8 do
51767: LD_ADDR_VAR 0 3
51771: PUSH
51772: DOUBLE
51773: LD_INT 1
51775: DEC
51776: ST_TO_ADDR
51777: LD_INT 8
51779: PUSH
51780: FOR_TO
51781: IFFALSE 51815
// if un in mpApePosIndex [ i ] then
51783: LD_VAR 0 1
51787: PUSH
51788: LD_EXP 30
51792: PUSH
51793: LD_VAR 0 3
51797: ARRAY
51798: IN
51799: IFFALSE 51813
// begin tag := i ;
51801: LD_ADDR_VAR 0 5
51805: PUSH
51806: LD_VAR 0 3
51810: ST_TO_ADDR
// break ;
51811: GO 51815
// end ;
51813: GO 51780
51815: POP
51816: POP
// if not tag then
51817: LD_VAR 0 5
51821: NOT
51822: IFFALSE 51826
// exit ;
51824: GO 52269
// area := mpApemansArea [ mpSidePositions [ tag ] ] ;
51826: LD_ADDR_VAR 0 7
51830: PUSH
51831: LD_EXP 29
51835: PUSH
51836: LD_EXP 5
51840: PUSH
51841: LD_VAR 0 5
51845: ARRAY
51846: ARRAY
51847: ST_TO_ADDR
// if not area then
51848: LD_VAR 0 7
51852: NOT
51853: IFFALSE 51857
// exit ;
51855: GO 52269
// wait ( 7 7$00 + ( ( ( un mod 5 ) + 1 ) * 0 0$20 ) ) ;
51857: LD_INT 14700
51859: PUSH
51860: LD_VAR 0 1
51864: PUSH
51865: LD_INT 5
51867: MOD
51868: PUSH
51869: LD_INT 1
51871: PLUS
51872: PUSH
51873: LD_INT 700
51875: MUL
51876: PLUS
51877: PPUSH
51878: CALL_OW 67
// repeat wait ( 10 ) ;
51882: LD_INT 10
51884: PPUSH
51885: CALL_OW 67
// until not mpBlockRespThread ;
51889: LD_EXP 43
51893: NOT
51894: IFFALSE 51882
// mpBlockRespThread := true ;
51896: LD_ADDR_EXP 43
51900: PUSH
51901: LD_INT 1
51903: ST_TO_ADDR
// PrepareApeman ( 0 ) ;
51904: LD_INT 0
51906: PPUSH
51907: CALL 37192 0 1
// ape := CreateHuman ;
51911: LD_ADDR_VAR 0 4
51915: PUSH
51916: CALL_OW 44
51920: ST_TO_ADDR
// mpApePosIndex := Replace ( mpApePosIndex , tag , Join ( mpApePosIndex [ tag ] , ape ) ) ;
51921: LD_ADDR_EXP 30
51925: PUSH
51926: LD_EXP 30
51930: PPUSH
51931: LD_VAR 0 5
51935: PPUSH
51936: LD_EXP 30
51940: PUSH
51941: LD_VAR 0 5
51945: ARRAY
51946: PPUSH
51947: LD_VAR 0 4
51951: PPUSH
51952: CALL 41065 0 2
51956: PPUSH
51957: CALL_OW 1
51961: ST_TO_ADDR
// PlaceUnitArea ( ape , area , false ) ;
51962: LD_VAR 0 4
51966: PPUSH
51967: LD_VAR 0 7
51971: PPUSH
51972: LD_INT 0
51974: PPUSH
51975: CALL_OW 49
// wait ( 10 ) ;
51979: LD_INT 10
51981: PPUSH
51982: CALL_OW 67
// mpBlockRespThread := false ;
51986: LD_ADDR_EXP 43
51990: PUSH
51991: LD_INT 0
51993: ST_TO_ADDR
// end ; if GetType ( un ) = unit_human and GetNation ( un ) > nation_nature then
51994: LD_VAR 0 1
51998: PPUSH
51999: CALL_OW 247
52003: PUSH
52004: LD_INT 1
52006: EQUAL
52007: IFFALSE 52024
52009: PUSH
52010: LD_VAR 0 1
52014: PPUSH
52015: CALL_OW 248
52019: PUSH
52020: LD_INT 0
52022: GREATER
52023: AND
52024: IFFALSE 52269
// begin if not mpRespawn then
52026: LD_EXP 31
52030: NOT
52031: IFFALSE 52035
// exit ;
52033: GO 52269
// if not MultiplayerSideAlive ( side ) and not HasPowerByGameType ( mpGameType , side ) then
52035: LD_VAR 0 9
52039: PPUSH
52040: CALL_OW 108
52044: NOT
52045: IFFALSE 52064
52047: PUSH
52048: LD_EXP 1
52052: PPUSH
52053: LD_VAR 0 9
52057: PPUSH
52058: CALL 50563 0 2
52062: NOT
52063: AND
52064: IFFALSE 52068
// exit ;
52066: GO 52269
// side := GetSide ( un ) ;
52068: LD_ADDR_VAR 0 9
52072: PUSH
52073: LD_VAR 0 1
52077: PPUSH
52078: CALL_OW 255
52082: ST_TO_ADDR
// nation := GetNation ( un ) ;
52083: LD_ADDR_VAR 0 8
52087: PUSH
52088: LD_VAR 0 1
52092: PPUSH
52093: CALL_OW 248
52097: ST_TO_ADDR
// class := GetClass ( un ) ;
52098: LD_ADDR_VAR 0 6
52102: PUSH
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 257
52112: ST_TO_ADDR
// if class > 4 then
52113: LD_VAR 0 6
52117: PUSH
52118: LD_INT 4
52120: GREATER
52121: IFFALSE 52131
// class := 1 ;
52123: LD_ADDR_VAR 0 6
52127: PUSH
52128: LD_INT 1
52130: ST_TO_ADDR
// repeat wait ( 10 ) ;
52131: LD_INT 10
52133: PPUSH
52134: CALL_OW 67
// until not mpBlockRespThread ;
52138: LD_EXP 43
52142: NOT
52143: IFFALSE 52131
// mpBlockRespThread := true ;
52145: LD_ADDR_EXP 43
52149: PUSH
52150: LD_INT 1
52152: ST_TO_ADDR
// uc_side := side ;
52153: LD_ADDR_OWVAR 20
52157: PUSH
52158: LD_VAR 0 9
52162: ST_TO_ADDR
// uc_nation := nation ;
52163: LD_ADDR_OWVAR 21
52167: PUSH
52168: LD_VAR 0 8
52172: ST_TO_ADDR
// PrepareHuman ( false , class , 2 ) ;
52173: LD_INT 0
52175: PPUSH
52176: LD_VAR 0 6
52180: PPUSH
52181: LD_INT 2
52183: PPUSH
52184: CALL_OW 380
// un := CreateHuman ;
52188: LD_ADDR_VAR 0 1
52192: PUSH
52193: CALL_OW 44
52197: ST_TO_ADDR
// mpRespawnPull := Replace ( mpRespawnPull , side , Replace ( mpRespawnPull [ side ] , mpRespawnPull [ side ] + 1 , un ) ) ;
52198: LD_ADDR_EXP 38
52202: PUSH
52203: LD_EXP 38
52207: PPUSH
52208: LD_VAR 0 9
52212: PPUSH
52213: LD_EXP 38
52217: PUSH
52218: LD_VAR 0 9
52222: ARRAY
52223: PPUSH
52224: LD_EXP 38
52228: PUSH
52229: LD_VAR 0 9
52233: ARRAY
52234: PUSH
52235: LD_INT 1
52237: PLUS
52238: PPUSH
52239: LD_VAR 0 1
52243: PPUSH
52244: CALL_OW 1
52248: PPUSH
52249: CALL_OW 1
52253: ST_TO_ADDR
// wait ( 10 ) ;
52254: LD_INT 10
52256: PPUSH
52257: CALL_OW 67
// mpBlockRespThread := false ;
52261: LD_ADDR_EXP 43
52265: PUSH
52266: LD_INT 0
52268: ST_TO_ADDR
// end ; end ;
52269: LD_VAR 0 2
52273: RET
// export function Multiplayer_BuildingComplete ( building ) ; begin
52274: LD_INT 0
52276: PPUSH
// if GetBType ( building ) in [ b_depot , b_warehouse ] then
52277: LD_VAR 0 1
52281: PPUSH
52282: CALL_OW 266
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: IN
52297: IFFALSE 52322
// SetBName ( building , @ & GetSide ( building ) ) ;
52299: LD_VAR 0 1
52303: PPUSH
52304: LD_STRING @
52306: PUSH
52307: LD_VAR 0 1
52311: PPUSH
52312: CALL_OW 255
52316: STR
52317: PPUSH
52318: CALL_OW 500
// end ;
52322: LD_VAR 0 2
52326: RET
// export function Multiplayer_BuildingCaptured ( building , oldSide , unit ) ; var i ; begin
52327: LD_INT 0
52329: PPUSH
52330: PPUSH
// if mpGameType = GameTypeSurvival and GetBType ( building ) in [ b_depot , b_warehouse ] then
52331: LD_EXP 1
52335: PUSH
52336: LD_INT 2
52338: EQUAL
52339: IFFALSE 52363
52341: PUSH
52342: LD_VAR 0 1
52346: PPUSH
52347: CALL_OW 266
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: IN
52362: AND
52363: IFFALSE 52442
// begin SetSide ( building , oldSide ) ;
52365: LD_VAR 0 1
52369: PPUSH
52370: LD_VAR 0 2
52374: PPUSH
52375: CALL_OW 235
// KillUnit ( building ) ;
52379: LD_VAR 0 1
52383: PPUSH
52384: CALL_OW 66
// for i in FilterAllUnits ( [ [ f_side , oldSide ] , [ f_type , unit_human ] ] ) do
52388: LD_ADDR_VAR 0 5
52392: PUSH
52393: LD_INT 22
52395: PUSH
52396: LD_VAR 0 2
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 21
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PPUSH
52419: CALL_OW 69
52423: PUSH
52424: FOR_IN
52425: IFFALSE 52438
// KillUnit ( i ) ;
52427: LD_VAR 0 5
52431: PPUSH
52432: CALL_OW 66
52436: GO 52424
52438: POP
52439: POP
// exit ;
52440: GO 52487
// end ; if GetBType ( building ) in [ b_depot , b_warehouse ] then
52442: LD_VAR 0 1
52446: PPUSH
52447: CALL_OW 266
52451: PUSH
52452: LD_INT 0
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: IN
52462: IFFALSE 52487
// SetBName ( building , @ & GetSide ( building ) ) ;
52464: LD_VAR 0 1
52468: PPUSH
52469: LD_STRING @
52471: PUSH
52472: LD_VAR 0 1
52476: PPUSH
52477: CALL_OW 255
52481: STR
52482: PPUSH
52483: CALL_OW 500
// end ;
52487: LD_VAR 0 4
52491: RET
// export function Multiplayer_OilExtracted ( building , side , base , amount ) ; var i , value ; begin
52492: LD_INT 0
52494: PPUSH
52495: PPUSH
52496: PPUSH
// if mpGameType <> GameTypeFamine then
52497: LD_EXP 1
52501: PUSH
52502: LD_INT 5
52504: NONEQUAL
52505: IFFALSE 52509
// exit ;
52507: GO 52723
// for i := 1 to mpGlobalOilDeposits do
52509: LD_ADDR_VAR 0 6
52513: PUSH
52514: DOUBLE
52515: LD_INT 1
52517: DEC
52518: ST_TO_ADDR
52519: LD_EXP 39
52523: PUSH
52524: FOR_TO
52525: IFFALSE 52721
// begin if HexInfo ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) = building then
52527: LD_EXP 39
52531: PUSH
52532: LD_VAR 0 6
52536: ARRAY
52537: PUSH
52538: LD_INT 1
52540: ARRAY
52541: PPUSH
52542: LD_EXP 39
52546: PUSH
52547: LD_VAR 0 6
52551: ARRAY
52552: PUSH
52553: LD_INT 2
52555: ARRAY
52556: PPUSH
52557: CALL_OW 428
52561: PUSH
52562: LD_VAR 0 1
52566: EQUAL
52567: IFFALSE 52719
// begin value := mpGlobalOilDeposits [ i ] [ 3 ] ;
52569: LD_ADDR_VAR 0 7
52573: PUSH
52574: LD_EXP 39
52578: PUSH
52579: LD_VAR 0 6
52583: ARRAY
52584: PUSH
52585: LD_INT 3
52587: ARRAY
52588: ST_TO_ADDR
// value := Dec ( value ) ;
52589: LD_ADDR_VAR 0 7
52593: PUSH
52594: LD_VAR 0 7
52598: PPUSH
52599: CALL 42460 0 1
52603: ST_TO_ADDR
// mpGlobalOilDeposits := Replace ( mpGlobalOilDeposits , i , Replace ( mpGlobalOilDeposits [ i ] , 3 , value ) ) ;
52604: LD_ADDR_EXP 39
52608: PUSH
52609: LD_EXP 39
52613: PPUSH
52614: LD_VAR 0 6
52618: PPUSH
52619: LD_EXP 39
52623: PUSH
52624: LD_VAR 0 6
52628: ARRAY
52629: PPUSH
52630: LD_INT 3
52632: PPUSH
52633: LD_VAR 0 7
52637: PPUSH
52638: CALL_OW 1
52642: PPUSH
52643: CALL_OW 1
52647: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52648: LD_VAR 0 1
52652: PPUSH
52653: LD_VAR 0 7
52657: PPUSH
52658: CALL_OW 505
// if value = 0 then
52662: LD_VAR 0 7
52666: PUSH
52667: LD_INT 0
52669: EQUAL
52670: IFFALSE 52719
// begin RemoveDepositXY ( mpGlobalOilDeposits [ i ] [ 1 ] , mpGlobalOilDeposits [ i ] [ 2 ] ) ;
52672: LD_EXP 39
52676: PUSH
52677: LD_VAR 0 6
52681: ARRAY
52682: PUSH
52683: LD_INT 1
52685: ARRAY
52686: PPUSH
52687: LD_EXP 39
52691: PUSH
52692: LD_VAR 0 6
52696: ARRAY
52697: PUSH
52698: LD_INT 2
52700: ARRAY
52701: PPUSH
52702: CALL_OW 63
// KillUnit ( building ) ;
52706: LD_VAR 0 1
52710: PPUSH
52711: CALL_OW 66
// exit ;
52715: POP
52716: POP
52717: GO 52723
// end ; end ; end ;
52719: GO 52524
52721: POP
52722: POP
// end ;
52723: LD_VAR 0 5
52727: RET
// export function Multiplayer_SibExtracted ( building , side , base , amount ) ; var i , value ; begin
52728: LD_INT 0
52730: PPUSH
52731: PPUSH
52732: PPUSH
// if mpGameType <> GameTypeFamine then
52733: LD_EXP 1
52737: PUSH
52738: LD_INT 5
52740: NONEQUAL
52741: IFFALSE 52745
// exit ;
52743: GO 52959
// for i := 1 to mpGlobalSibDeposits do
52745: LD_ADDR_VAR 0 6
52749: PUSH
52750: DOUBLE
52751: LD_INT 1
52753: DEC
52754: ST_TO_ADDR
52755: LD_EXP 40
52759: PUSH
52760: FOR_TO
52761: IFFALSE 52957
// begin if HexInfo ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) = building then
52763: LD_EXP 40
52767: PUSH
52768: LD_VAR 0 6
52772: ARRAY
52773: PUSH
52774: LD_INT 1
52776: ARRAY
52777: PPUSH
52778: LD_EXP 40
52782: PUSH
52783: LD_VAR 0 6
52787: ARRAY
52788: PUSH
52789: LD_INT 2
52791: ARRAY
52792: PPUSH
52793: CALL_OW 428
52797: PUSH
52798: LD_VAR 0 1
52802: EQUAL
52803: IFFALSE 52955
// begin value := mpGlobalSibDeposits [ i ] [ 3 ] ;
52805: LD_ADDR_VAR 0 7
52809: PUSH
52810: LD_EXP 40
52814: PUSH
52815: LD_VAR 0 6
52819: ARRAY
52820: PUSH
52821: LD_INT 3
52823: ARRAY
52824: ST_TO_ADDR
// value := Dec ( value ) ;
52825: LD_ADDR_VAR 0 7
52829: PUSH
52830: LD_VAR 0 7
52834: PPUSH
52835: CALL 42460 0 1
52839: ST_TO_ADDR
// mpGlobalSibDeposits := Replace ( mpGlobalSibDeposits , i , Replace ( mpGlobalSibDeposits [ i ] , 3 , value ) ) ;
52840: LD_ADDR_EXP 40
52844: PUSH
52845: LD_EXP 40
52849: PPUSH
52850: LD_VAR 0 6
52854: PPUSH
52855: LD_EXP 40
52859: PUSH
52860: LD_VAR 0 6
52864: ARRAY
52865: PPUSH
52866: LD_INT 3
52868: PPUSH
52869: LD_VAR 0 7
52873: PPUSH
52874: CALL_OW 1
52878: PPUSH
52879: CALL_OW 1
52883: ST_TO_ADDR
// SetUnitDisplayNumber ( building , value ) ;
52884: LD_VAR 0 1
52888: PPUSH
52889: LD_VAR 0 7
52893: PPUSH
52894: CALL_OW 505
// if value = 0 then
52898: LD_VAR 0 7
52902: PUSH
52903: LD_INT 0
52905: EQUAL
52906: IFFALSE 52955
// begin RemoveDepositXY ( mpGlobalSibDeposits [ i ] [ 1 ] , mpGlobalSibDeposits [ i ] [ 2 ] ) ;
52908: LD_EXP 40
52912: PUSH
52913: LD_VAR 0 6
52917: ARRAY
52918: PUSH
52919: LD_INT 1
52921: ARRAY
52922: PPUSH
52923: LD_EXP 40
52927: PUSH
52928: LD_VAR 0 6
52932: ARRAY
52933: PUSH
52934: LD_INT 2
52936: ARRAY
52937: PPUSH
52938: CALL_OW 63
// KillUnit ( building ) ;
52942: LD_VAR 0 1
52946: PPUSH
52947: CALL_OW 66
// exit ;
52951: POP
52952: POP
52953: GO 52959
// end ; end ; end ;
52955: GO 52760
52957: POP
52958: POP
// end ; end_of_file
52959: LD_VAR 0 5
52963: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeNormal do var i , canWin ;
52964: LD_EXP 37
52968: IFFALSE 52976
52970: PUSH
52971: CALL 53186 0 0
52975: AND
52976: IFFALSE 52984
52978: PUSH
52979: LD_OWVAR 4
52983: AND
52984: IFFALSE 53183
52986: GO 52988
52988: DISABLE
52989: LD_INT 0
52991: PPUSH
52992: PPUSH
// begin canWin := false ;
52993: LD_ADDR_VAR 0 2
52997: PUSH
52998: LD_INT 0
53000: ST_TO_ADDR
// if not HasPower ( your_side ) then
53001: LD_OWVAR 2
53005: PPUSH
53006: CALL 53228 0 1
53010: NOT
53011: IFFALSE 53022
// begin Multiplayer_Loose_Message ;
53013: CALL_OW 521
// enable ( mpLose ) ;
53017: LD_INT 102
53019: ENABLE_MARKED
// end else
53020: GO 53183
// begin canWin := true ;
53022: LD_ADDR_VAR 0 2
53026: PUSH
53027: LD_INT 1
53029: ST_TO_ADDR
// for i := 1 to 8 do
53030: LD_ADDR_VAR 0 1
53034: PUSH
53035: DOUBLE
53036: LD_INT 1
53038: DEC
53039: ST_TO_ADDR
53040: LD_INT 8
53042: PUSH
53043: FOR_TO
53044: IFFALSE 53169
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53046: LD_EXP 5
53050: PUSH
53051: LD_VAR 0 1
53055: ARRAY
53056: IFFALSE 53069
53058: PUSH
53059: LD_VAR 0 1
53063: PPUSH
53064: CALL_OW 108
53068: AND
53069: IFFALSE 53083
53071: PUSH
53072: LD_VAR 0 1
53076: PUSH
53077: LD_OWVAR 2
53081: NONEQUAL
53082: AND
53083: IFFALSE 53167
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53085: LD_EXP 6
53089: PUSH
53090: LD_VAR 0 1
53094: ARRAY
53095: NOT
53096: IFTRUE 53144
53098: PUSH
53099: LD_EXP 6
53103: PUSH
53104: LD_VAR 0 1
53108: ARRAY
53109: PUSH
53110: LD_EXP 6
53114: PUSH
53115: LD_OWVAR 2
53119: ARRAY
53120: NONEQUAL
53121: IFFALSE 53143
53123: PUSH
53124: LD_OWVAR 2
53128: PPUSH
53129: LD_VAR 0 1
53133: PPUSH
53134: CALL_OW 81
53138: PUSH
53139: LD_INT 1
53141: NONEQUAL
53142: AND
53143: OR
53144: IFFALSE 53167
// if HasPower ( i ) then
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL 53228 0 1
53155: IFFALSE 53167
// begin canWin := false ;
53157: LD_ADDR_VAR 0 2
53161: PUSH
53162: LD_INT 0
53164: ST_TO_ADDR
// break ;
53165: GO 53169
// end ;
53167: GO 53043
53169: POP
53170: POP
// if canWin then
53171: LD_VAR 0 2
53175: IFFALSE 53182
// enable ( mpWin ) else
53177: LD_INT 101
53179: ENABLE_MARKED
53180: GO 53183
// enable ;
53182: ENABLE
// end ; end ;
53183: PPOPN 2
53185: END
// function CanWinLoose ; begin
53186: LD_INT 0
53188: PPUSH
// result := true ;
53189: LD_ADDR_VAR 0 1
53193: PUSH
53194: LD_INT 1
53196: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53197: CALL_OW 531
53201: IFFALSE 53213
53203: PUSH
53204: CALL_OW 519
53208: PUSH
53209: LD_INT 1
53211: GREATER
53212: AND
53213: IFFALSE 53223
// result := false ;
53215: LD_ADDR_VAR 0 1
53219: PUSH
53220: LD_INT 0
53222: ST_TO_ADDR
// end ;
53223: LD_VAR 0 1
53227: RET
// function HasPower ( i ) ; begin
53228: LD_INT 0
53230: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53231: LD_ADDR_VAR 0 2
53235: PUSH
53236: LD_INT 22
53238: PUSH
53239: LD_VAR 0 1
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 21
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 33
53263: PUSH
53264: LD_INT 3
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 33
53273: PUSH
53274: LD_INT 5
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PPUSH
53291: CALL_OW 69
53295: ST_TO_ADDR
// end ; end_of_file
53296: LD_VAR 0 2
53300: RET
// every 0 0$1 trigger mpGameActive marked GameTypeSurvival do var i ;
53301: LD_EXP 37
53305: IFFALSE 53348
53307: GO 53309
53309: DISABLE
53310: LD_INT 0
53312: PPUSH
// begin for i := 1 to 8 do
53313: LD_ADDR_VAR 0 1
53317: PUSH
53318: DOUBLE
53319: LD_INT 1
53321: DEC
53322: ST_TO_ADDR
53323: LD_INT 8
53325: PUSH
53326: FOR_TO
53327: IFFALSE 53346
// SetRestrict ( b_depot , i , state_disabled ) ;
53329: LD_INT 0
53331: PPUSH
53332: LD_VAR 0 1
53336: PPUSH
53337: LD_INT 0
53339: PPUSH
53340: CALL_OW 324
53344: GO 53326
53346: POP
53347: POP
// end ;
53348: PPOPN 1
53350: END
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeSurvival do var i , canWin ;
53351: LD_EXP 37
53355: IFFALSE 53363
53357: PUSH
53358: CALL 53573 0 0
53362: AND
53363: IFFALSE 53371
53365: PUSH
53366: LD_OWVAR 4
53370: AND
53371: IFFALSE 53570
53373: GO 53375
53375: DISABLE
53376: LD_INT 0
53378: PPUSH
53379: PPUSH
// begin canWin := false ;
53380: LD_ADDR_VAR 0 2
53384: PUSH
53385: LD_INT 0
53387: ST_TO_ADDR
// if not HasPower ( your_side ) then
53388: LD_OWVAR 2
53392: PPUSH
53393: CALL 53615 0 1
53397: NOT
53398: IFFALSE 53409
// begin Multiplayer_Loose_Message ;
53400: CALL_OW 521
// enable ( mpLose ) ;
53404: LD_INT 102
53406: ENABLE_MARKED
// end else
53407: GO 53570
// begin canWin := true ;
53409: LD_ADDR_VAR 0 2
53413: PUSH
53414: LD_INT 1
53416: ST_TO_ADDR
// for i := 1 to 8 do
53417: LD_ADDR_VAR 0 1
53421: PUSH
53422: DOUBLE
53423: LD_INT 1
53425: DEC
53426: ST_TO_ADDR
53427: LD_INT 8
53429: PUSH
53430: FOR_TO
53431: IFFALSE 53556
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
53433: LD_EXP 5
53437: PUSH
53438: LD_VAR 0 1
53442: ARRAY
53443: IFFALSE 53456
53445: PUSH
53446: LD_VAR 0 1
53450: PPUSH
53451: CALL_OW 108
53455: AND
53456: IFFALSE 53470
53458: PUSH
53459: LD_VAR 0 1
53463: PUSH
53464: LD_OWVAR 2
53468: NONEQUAL
53469: AND
53470: IFFALSE 53554
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
53472: LD_EXP 6
53476: PUSH
53477: LD_VAR 0 1
53481: ARRAY
53482: NOT
53483: IFTRUE 53531
53485: PUSH
53486: LD_EXP 6
53490: PUSH
53491: LD_VAR 0 1
53495: ARRAY
53496: PUSH
53497: LD_EXP 6
53501: PUSH
53502: LD_OWVAR 2
53506: ARRAY
53507: NONEQUAL
53508: IFFALSE 53530
53510: PUSH
53511: LD_OWVAR 2
53515: PPUSH
53516: LD_VAR 0 1
53520: PPUSH
53521: CALL_OW 81
53525: PUSH
53526: LD_INT 1
53528: NONEQUAL
53529: AND
53530: OR
53531: IFFALSE 53554
// if HasPower ( i ) then
53533: LD_VAR 0 1
53537: PPUSH
53538: CALL 53615 0 1
53542: IFFALSE 53554
// begin canWin := false ;
53544: LD_ADDR_VAR 0 2
53548: PUSH
53549: LD_INT 0
53551: ST_TO_ADDR
// break ;
53552: GO 53556
// end ;
53554: GO 53430
53556: POP
53557: POP
// if canWin then
53558: LD_VAR 0 2
53562: IFFALSE 53569
// enable ( mpWin ) else
53564: LD_INT 101
53566: ENABLE_MARKED
53567: GO 53570
// enable ;
53569: ENABLE
// end ; end ;
53570: PPOPN 2
53572: END
// function CanWinLoose ; begin
53573: LD_INT 0
53575: PPUSH
// result := true ;
53576: LD_ADDR_VAR 0 1
53580: PUSH
53581: LD_INT 1
53583: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
53584: CALL_OW 531
53588: IFFALSE 53600
53590: PUSH
53591: CALL_OW 519
53595: PUSH
53596: LD_INT 1
53598: GREATER
53599: AND
53600: IFFALSE 53610
// result := false ;
53602: LD_ADDR_VAR 0 1
53606: PUSH
53607: LD_INT 0
53609: ST_TO_ADDR
// end ;
53610: LD_VAR 0 1
53614: RET
// function HasPower ( i ) ; begin
53615: LD_INT 0
53617: PPUSH
// if not FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
53618: LD_INT 22
53620: PUSH
53621: LD_VAR 0 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: LD_INT 30
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 30
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: LIST
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PPUSH
53662: CALL_OW 69
53666: NOT
53667: IFFALSE 53671
// exit ;
53669: GO 53736
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
53671: LD_ADDR_VAR 0 2
53675: PUSH
53676: LD_INT 22
53678: PUSH
53679: LD_VAR 0 1
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 21
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 33
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 33
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PPUSH
53731: CALL_OW 69
53735: ST_TO_ADDR
// end ; end_of_file
53736: LD_VAR 0 2
53740: RET
// export mpKingPoints ; every 0 0$1 trigger mpGameActive marked GameTypeKing do var i , j , tmp ;
53741: LD_EXP 37
53745: IFFALSE 54084
53747: GO 53749
53749: DISABLE
53750: LD_INT 0
53752: PPUSH
53753: PPUSH
53754: PPUSH
// begin mpKingPoints := [ ] ;
53755: LD_ADDR_EXP 46
53759: PUSH
53760: EMPTY
53761: ST_TO_ADDR
// if mpTeamGame then
53762: LD_EXP 9
53766: IFFALSE 53820
// begin for i := 1 to Count ( mpTeams ) do
53768: LD_ADDR_VAR 0 1
53772: PUSH
53773: DOUBLE
53774: LD_INT 1
53776: DEC
53777: ST_TO_ADDR
53778: LD_EXP 8
53782: PPUSH
53783: CALL 5133 0 1
53787: PUSH
53788: FOR_TO
53789: IFFALSE 53816
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53791: LD_ADDR_EXP 46
53795: PUSH
53796: LD_EXP 46
53800: PPUSH
53801: LD_VAR 0 1
53805: PPUSH
53806: LD_INT 0
53808: PPUSH
53809: CALL_OW 1
53813: ST_TO_ADDR
53814: GO 53788
53816: POP
53817: POP
// end else
53818: GO 53863
// begin for i := 1 to 8 do
53820: LD_ADDR_VAR 0 1
53824: PUSH
53825: DOUBLE
53826: LD_INT 1
53828: DEC
53829: ST_TO_ADDR
53830: LD_INT 8
53832: PUSH
53833: FOR_TO
53834: IFFALSE 53861
// mpKingPoints := Replace ( mpKingPoints , i , 0 ) ;
53836: LD_ADDR_EXP 46
53840: PUSH
53841: LD_EXP 46
53845: PPUSH
53846: LD_VAR 0 1
53850: PPUSH
53851: LD_INT 0
53853: PPUSH
53854: CALL_OW 1
53858: ST_TO_ADDR
53859: GO 53833
53861: POP
53862: POP
// end ; tmp := AreaToList ( kingCamArea , 0 ) ;
53863: LD_ADDR_VAR 0 3
53867: PUSH
53868: LD_INT 73
53870: PPUSH
53871: LD_INT 0
53873: PPUSH
53874: CALL_OW 517
53878: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53879: LD_ADDR_VAR 0 1
53883: PUSH
53884: DOUBLE
53885: LD_INT 1
53887: DEC
53888: ST_TO_ADDR
53889: LD_VAR 0 3
53893: PUSH
53894: LD_INT 1
53896: ARRAY
53897: PUSH
53898: FOR_TO
53899: IFFALSE 53966
// for j := 1 to 8 do
53901: LD_ADDR_VAR 0 2
53905: PUSH
53906: DOUBLE
53907: LD_INT 1
53909: DEC
53910: ST_TO_ADDR
53911: LD_INT 8
53913: PUSH
53914: FOR_TO
53915: IFFALSE 53962
// PlaceSeeing ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , j , - 12 ) ;
53917: LD_VAR 0 3
53921: PUSH
53922: LD_INT 1
53924: ARRAY
53925: PUSH
53926: LD_VAR 0 1
53930: ARRAY
53931: PPUSH
53932: LD_VAR 0 3
53936: PUSH
53937: LD_INT 2
53939: ARRAY
53940: PUSH
53941: LD_VAR 0 1
53945: ARRAY
53946: PPUSH
53947: LD_VAR 0 2
53951: PPUSH
53952: LD_INT 12
53954: NEG
53955: PPUSH
53956: CALL_OW 330
53960: GO 53914
53962: POP
53963: POP
53964: GO 53898
53966: POP
53967: POP
// SetAreaMapShow ( mpKingArea , 1 ) ;
53968: LD_EXP 32
53972: PPUSH
53973: LD_INT 1
53975: PPUSH
53976: CALL_OW 424
// UpdateCounter ;
53980: CALL 54588 0 0
// repeat wait ( 0 0$1 ) ;
53984: LD_INT 35
53986: PPUSH
53987: CALL_OW 67
// tmp := FilterUnitsInArea ( mpKingArea , [ [ f_not , [ f_constructed ] ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53991: LD_ADDR_VAR 0 3
53995: PUSH
53996: LD_EXP 32
54000: PPUSH
54001: LD_INT 3
54003: PUSH
54004: LD_INT 57
54006: PUSH
54007: EMPTY
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 50
54016: PUSH
54017: EMPTY
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 30
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 30
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: LIST
54052: PPUSH
54053: CALL_OW 70
54057: ST_TO_ADDR
// if not tmp then
54058: LD_VAR 0 3
54062: NOT
54063: IFFALSE 54067
// continue ;
54065: GO 53984
// AddPoints ( tmp ) ;
54067: LD_VAR 0 3
54071: PPUSH
54072: CALL 54266 0 1
// UpdateCounter ;
54076: CALL 54588 0 0
// until false ;
54080: LD_INT 0
54082: IFFALSE 53984
// end ;
54084: PPOPN 3
54086: END
// every 0 0$1 trigger mpGameActive and mpEmissions marked GameTypeKing do var i , tmp ;
54087: LD_EXP 37
54091: IFFALSE 54099
54093: PUSH
54094: LD_EXP 35
54098: AND
54099: IFFALSE 54263
54101: GO 54103
54103: DISABLE
54104: LD_INT 0
54106: PPUSH
54107: PPUSH
// begin tmp := AreaToList ( kingCamArea , 0 ) ;
54108: LD_ADDR_VAR 0 2
54112: PUSH
54113: LD_INT 73
54115: PPUSH
54116: LD_INT 0
54118: PPUSH
54119: CALL_OW 517
54123: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
54124: LD_ADDR_VAR 0 1
54128: PUSH
54129: DOUBLE
54130: LD_INT 1
54132: DEC
54133: ST_TO_ADDR
54134: LD_VAR 0 2
54138: PUSH
54139: LD_INT 1
54141: ARRAY
54142: PUSH
54143: FOR_TO
54144: IFFALSE 54185
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 125 ) ;
54146: LD_VAR 0 2
54150: PUSH
54151: LD_INT 1
54153: ARRAY
54154: PUSH
54155: LD_VAR 0 1
54159: ARRAY
54160: PPUSH
54161: LD_VAR 0 2
54165: PUSH
54166: LD_INT 2
54168: ARRAY
54169: PUSH
54170: LD_VAR 0 1
54174: ARRAY
54175: PPUSH
54176: LD_INT 125
54178: PPUSH
54179: CALL_OW 495
54183: GO 54143
54185: POP
54186: POP
// repeat wait ( mpEmissions ) ;
54187: LD_EXP 35
54191: PPUSH
54192: CALL_OW 67
// for i := 1 to tmp [ 1 ] do
54196: LD_ADDR_VAR 0 1
54200: PUSH
54201: DOUBLE
54202: LD_INT 1
54204: DEC
54205: ST_TO_ADDR
54206: LD_VAR 0 2
54210: PUSH
54211: LD_INT 1
54213: ARRAY
54214: PUSH
54215: FOR_TO
54216: IFFALSE 54257
// ArtContamination ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 15 ) ;
54218: LD_VAR 0 2
54222: PUSH
54223: LD_INT 1
54225: ARRAY
54226: PUSH
54227: LD_VAR 0 1
54231: ARRAY
54232: PPUSH
54233: LD_VAR 0 2
54237: PUSH
54238: LD_INT 2
54240: ARRAY
54241: PUSH
54242: LD_VAR 0 1
54246: ARRAY
54247: PPUSH
54248: LD_INT 15
54250: PPUSH
54251: CALL_OW 495
54255: GO 54215
54257: POP
54258: POP
// until false ;
54259: LD_INT 0
54261: IFFALSE 54187
// end ;
54263: PPOPN 2
54265: END
// function AddPoints ( depots ) ; var i , first , team , side ; begin
54266: LD_INT 0
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
// if mpTeamGame then
54273: LD_EXP 9
54277: IFFALSE 54474
// begin first := depots [ 1 ] ;
54279: LD_ADDR_VAR 0 4
54283: PUSH
54284: LD_VAR 0 1
54288: PUSH
54289: LD_INT 1
54291: ARRAY
54292: ST_TO_ADDR
// side := GetSide ( first ) ;
54293: LD_ADDR_VAR 0 6
54297: PUSH
54298: LD_VAR 0 4
54302: PPUSH
54303: CALL_OW 255
54307: ST_TO_ADDR
// for i := 1 to mpTeams do
54308: LD_ADDR_VAR 0 3
54312: PUSH
54313: DOUBLE
54314: LD_INT 1
54316: DEC
54317: ST_TO_ADDR
54318: LD_EXP 8
54322: PUSH
54323: FOR_TO
54324: IFFALSE 54358
// if side in mpTeams [ i ] then
54326: LD_VAR 0 6
54330: PUSH
54331: LD_EXP 8
54335: PUSH
54336: LD_VAR 0 3
54340: ARRAY
54341: IN
54342: IFFALSE 54356
// begin team := i ;
54344: LD_ADDR_VAR 0 5
54348: PUSH
54349: LD_VAR 0 3
54353: ST_TO_ADDR
// break ;
54354: GO 54358
// end ;
54356: GO 54323
54358: POP
54359: POP
// if not team then
54360: LD_VAR 0 5
54364: NOT
54365: IFFALSE 54369
// exit ;
54367: GO 54583
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54369: LD_EXP 32
54373: PPUSH
54374: LD_INT 81
54376: PUSH
54377: LD_VAR 0 6
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PPUSH
54386: CALL_OW 70
54390: IFFALSE 54394
// exit ;
54392: GO 54583
// mpKingPoints := Replace ( mpKingPoints , team , mpKingPoints [ team ] + 1 ) ;
54394: LD_ADDR_EXP 46
54398: PUSH
54399: LD_EXP 46
54403: PPUSH
54404: LD_VAR 0 5
54408: PPUSH
54409: LD_EXP 46
54413: PUSH
54414: LD_VAR 0 5
54418: ARRAY
54419: PUSH
54420: LD_INT 1
54422: PLUS
54423: PPUSH
54424: CALL_OW 1
54428: ST_TO_ADDR
// for i in mpTeams [ team ] do
54429: LD_ADDR_VAR 0 3
54433: PUSH
54434: LD_EXP 8
54438: PUSH
54439: LD_VAR 0 5
54443: ARRAY
54444: PUSH
54445: FOR_IN
54446: IFFALSE 54470
// SetMultiScore ( i , mpKingPoints [ team ] ) ;
54448: LD_VAR 0 3
54452: PPUSH
54453: LD_EXP 46
54457: PUSH
54458: LD_VAR 0 5
54462: ARRAY
54463: PPUSH
54464: CALL_OW 506
54468: GO 54445
54470: POP
54471: POP
// end else
54472: GO 54583
// begin first := depots [ 1 ] ;
54474: LD_ADDR_VAR 0 4
54478: PUSH
54479: LD_VAR 0 1
54483: PUSH
54484: LD_INT 1
54486: ARRAY
54487: ST_TO_ADDR
// side := GetSide ( first ) ;
54488: LD_ADDR_VAR 0 6
54492: PUSH
54493: LD_VAR 0 4
54497: PPUSH
54498: CALL_OW 255
54502: ST_TO_ADDR
// if FilterUnitsInArea ( mpKingArea , [ f_enemy , side ] ) then
54503: LD_EXP 32
54507: PPUSH
54508: LD_INT 81
54510: PUSH
54511: LD_VAR 0 6
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PPUSH
54520: CALL_OW 70
54524: IFFALSE 54528
// exit ;
54526: GO 54583
// mpKingPoints := Replace ( mpKingPoints , side , mpKingPoints [ side ] + 1 ) ;
54528: LD_ADDR_EXP 46
54532: PUSH
54533: LD_EXP 46
54537: PPUSH
54538: LD_VAR 0 6
54542: PPUSH
54543: LD_EXP 46
54547: PUSH
54548: LD_VAR 0 6
54552: ARRAY
54553: PUSH
54554: LD_INT 1
54556: PLUS
54557: PPUSH
54558: CALL_OW 1
54562: ST_TO_ADDR
// SetMultiScore ( side , mpKingPoints [ side ] ) ;
54563: LD_VAR 0 6
54567: PPUSH
54568: LD_EXP 46
54572: PUSH
54573: LD_VAR 0 6
54577: ARRAY
54578: PPUSH
54579: CALL_OW 506
// end ; end ;
54583: LD_VAR 0 2
54587: RET
// function UpdateCounter ; var i ; begin
54588: LD_INT 0
54590: PPUSH
54591: PPUSH
// result := [ ] ;
54592: LD_ADDR_VAR 0 1
54596: PUSH
54597: EMPTY
54598: ST_TO_ADDR
// if mpTeamGame then
54599: LD_EXP 9
54603: IFFALSE 54670
// begin for i := 1 to mpTeams do
54605: LD_ADDR_VAR 0 2
54609: PUSH
54610: DOUBLE
54611: LD_INT 1
54613: DEC
54614: ST_TO_ADDR
54615: LD_EXP 8
54619: PUSH
54620: FOR_TO
54621: IFFALSE 54666
// result := result ^ [ #KingoftheHill-Team , i , mpKingPoints [ i ] , mpPoints ] ;
54623: LD_ADDR_VAR 0 1
54627: PUSH
54628: LD_VAR 0 1
54632: PUSH
54633: LD_STRING #KingoftheHill-Team
54635: PUSH
54636: LD_VAR 0 2
54640: PUSH
54641: LD_EXP 46
54645: PUSH
54646: LD_VAR 0 2
54650: ARRAY
54651: PUSH
54652: LD_EXP 33
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: ADD
54663: ST_TO_ADDR
54664: GO 54620
54666: POP
54667: POP
// end else
54668: GO 54743
// begin for i := 1 to 8 do
54670: LD_ADDR_VAR 0 2
54674: PUSH
54675: DOUBLE
54676: LD_INT 1
54678: DEC
54679: ST_TO_ADDR
54680: LD_INT 8
54682: PUSH
54683: FOR_TO
54684: IFFALSE 54741
// if mpSidePositions [ i ] then
54686: LD_EXP 5
54690: PUSH
54691: LD_VAR 0 2
54695: ARRAY
54696: IFFALSE 54739
// result := result ^ [ #KingoftheHill-Player , i , mpKingPoints [ i ] , mpPoints ] ;
54698: LD_ADDR_VAR 0 1
54702: PUSH
54703: LD_VAR 0 1
54707: PUSH
54708: LD_STRING #KingoftheHill-Player
54710: PUSH
54711: LD_VAR 0 2
54715: PUSH
54716: LD_EXP 46
54720: PUSH
54721: LD_VAR 0 2
54725: ARRAY
54726: PUSH
54727: LD_EXP 33
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: ADD
54738: ST_TO_ADDR
54739: GO 54683
54741: POP
54742: POP
// end ; mpDisplayStrings := result ;
54743: LD_ADDR_EXP 36
54747: PUSH
54748: LD_VAR 0 1
54752: ST_TO_ADDR
// end ;
54753: LD_VAR 0 1
54757: RET
// export function HowMuchPointsKing ( side ) ; begin
54758: LD_INT 0
54760: PPUSH
// result := HowMuchPoints ( side ) ;
54761: LD_ADDR_VAR 0 2
54765: PUSH
54766: LD_VAR 0 1
54770: PPUSH
54771: CALL 54781 0 1
54775: ST_TO_ADDR
// end ;
54776: LD_VAR 0 2
54780: RET
// function HowMuchPoints ( side ) ; var i ; begin
54781: LD_INT 0
54783: PPUSH
54784: PPUSH
// if mpTeamGame then
54785: LD_EXP 9
54789: IFFALSE 54858
// begin for i := 1 to Count ( mpTeams ) do
54791: LD_ADDR_VAR 0 3
54795: PUSH
54796: DOUBLE
54797: LD_INT 1
54799: DEC
54800: ST_TO_ADDR
54801: LD_EXP 8
54805: PPUSH
54806: CALL 5133 0 1
54810: PUSH
54811: FOR_TO
54812: IFFALSE 54854
// begin if side in mpTeams [ i ] then
54814: LD_VAR 0 1
54818: PUSH
54819: LD_EXP 8
54823: PUSH
54824: LD_VAR 0 3
54828: ARRAY
54829: IN
54830: IFFALSE 54852
// begin result := mpKingPoints [ i ] ;
54832: LD_ADDR_VAR 0 2
54836: PUSH
54837: LD_EXP 46
54841: PUSH
54842: LD_VAR 0 3
54846: ARRAY
54847: ST_TO_ADDR
// exit ;
54848: POP
54849: POP
54850: GO 54874
// end ; end ;
54852: GO 54811
54854: POP
54855: POP
// end else
54856: GO 54874
// result := mpKingPoints [ side ] ;
54858: LD_ADDR_VAR 0 2
54862: PUSH
54863: LD_EXP 46
54867: PUSH
54868: LD_VAR 0 1
54872: ARRAY
54873: ST_TO_ADDR
// end ;
54874: LD_VAR 0 2
54878: RET
// every 0 0$3 trigger mpGameActive and CanWinLoose and Multiplayer marked GameTypeKing do var i , canWin ;
54879: LD_EXP 37
54883: IFFALSE 54891
54885: PUSH
54886: CALL 55303 0 0
54890: AND
54891: IFFALSE 54899
54893: PUSH
54894: LD_OWVAR 4
54898: AND
54899: IFFALSE 55152
54901: GO 54903
54903: DISABLE
54904: LD_INT 0
54906: PPUSH
54907: PPUSH
// begin canWin := false ;
54908: LD_ADDR_VAR 0 2
54912: PUSH
54913: LD_INT 0
54915: ST_TO_ADDR
// if not HasPower ( your_side ) then
54916: LD_OWVAR 2
54920: PPUSH
54921: CALL 55345 0 1
54925: NOT
54926: IFFALSE 54937
// begin Multiplayer_Loose_Message ;
54928: CALL_OW 521
// enable ( mpLose ) ;
54932: LD_INT 102
54934: ENABLE_MARKED
// end else
54935: GO 55152
// begin if not EnemiesInGame then
54937: CALL 55155 0 0
54941: NOT
54942: IFFALSE 54949
// begin enable ( mpWin ) ;
54944: LD_INT 101
54946: ENABLE_MARKED
// exit ;
54947: GO 55152
// end ; canWin := ( HowMuchPoints ( your_side ) >= mpPoints and HasPower ( your_side ) ) ;
54949: LD_ADDR_VAR 0 2
54953: PUSH
54954: LD_OWVAR 2
54958: PPUSH
54959: CALL 54781 0 1
54963: PUSH
54964: LD_EXP 33
54968: GREATEREQUAL
54969: IFFALSE 54982
54971: PUSH
54972: LD_OWVAR 2
54976: PPUSH
54977: CALL 55345 0 1
54981: AND
54982: ST_TO_ADDR
// for i := 1 to 8 do
54983: LD_ADDR_VAR 0 1
54987: PUSH
54988: DOUBLE
54989: LD_INT 1
54991: DEC
54992: ST_TO_ADDR
54993: LD_INT 8
54995: PUSH
54996: FOR_TO
54997: IFFALSE 55138
// if mpSidePositions [ i ] and MultiplayerSideAlive ( i ) and ( i <> your_side ) then
54999: LD_EXP 5
55003: PUSH
55004: LD_VAR 0 1
55008: ARRAY
55009: IFFALSE 55022
55011: PUSH
55012: LD_VAR 0 1
55016: PPUSH
55017: CALL_OW 108
55021: AND
55022: IFFALSE 55036
55024: PUSH
55025: LD_VAR 0 1
55029: PUSH
55030: LD_OWVAR 2
55034: NONEQUAL
55035: AND
55036: IFFALSE 55136
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55038: LD_EXP 6
55042: PUSH
55043: LD_VAR 0 1
55047: ARRAY
55048: NOT
55049: IFTRUE 55097
55051: PUSH
55052: LD_EXP 6
55056: PUSH
55057: LD_VAR 0 1
55061: ARRAY
55062: PUSH
55063: LD_EXP 6
55067: PUSH
55068: LD_OWVAR 2
55072: ARRAY
55073: NONEQUAL
55074: IFFALSE 55096
55076: PUSH
55077: LD_OWVAR 2
55081: PPUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: CALL_OW 81
55091: PUSH
55092: LD_INT 1
55094: NONEQUAL
55095: AND
55096: OR
55097: IFFALSE 55136
// if HowMuchPoints ( i ) >= mpPoints and HasPower ( i ) then
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL 54781 0 1
55108: PUSH
55109: LD_EXP 33
55113: GREATEREQUAL
55114: IFFALSE 55127
55116: PUSH
55117: LD_VAR 0 1
55121: PPUSH
55122: CALL 55345 0 1
55126: AND
55127: IFFALSE 55136
// begin enable ( mpLose ) ;
55129: LD_INT 102
55131: ENABLE_MARKED
// exit ;
55132: POP
55133: POP
55134: GO 55152
// end ;
55136: GO 54996
55138: POP
55139: POP
// if canWin then
55140: LD_VAR 0 2
55144: IFFALSE 55151
// enable ( mpWin ) else
55146: LD_INT 101
55148: ENABLE_MARKED
55149: GO 55152
// enable ;
55151: ENABLE
// end ; end ;
55152: PPOPN 2
55154: END
// function EnemiesInGame ; var i ; begin
55155: LD_INT 0
55157: PPUSH
55158: PPUSH
// result := false ;
55159: LD_ADDR_VAR 0 1
55163: PUSH
55164: LD_INT 0
55166: ST_TO_ADDR
// for i := 1 to 8 do
55167: LD_ADDR_VAR 0 2
55171: PUSH
55172: DOUBLE
55173: LD_INT 1
55175: DEC
55176: ST_TO_ADDR
55177: LD_INT 8
55179: PUSH
55180: FOR_TO
55181: IFFALSE 55296
// if i <> your_side and HasPower ( i ) and MultiplayerSideAlive ( i ) then
55183: LD_VAR 0 2
55187: PUSH
55188: LD_OWVAR 2
55192: NONEQUAL
55193: IFFALSE 55206
55195: PUSH
55196: LD_VAR 0 2
55200: PPUSH
55201: CALL 55345 0 1
55205: AND
55206: IFFALSE 55219
55208: PUSH
55209: LD_VAR 0 2
55213: PPUSH
55214: CALL_OW 108
55218: AND
55219: IFFALSE 55294
// if not mpSideTeams [ i ] or ( ( mpSideTeams [ i ] <> mpSideTeams [ your_side ] ) and GetAttitude ( your_side , i ) <> att_friend ) then
55221: LD_EXP 6
55225: PUSH
55226: LD_VAR 0 2
55230: ARRAY
55231: NOT
55232: IFTRUE 55280
55234: PUSH
55235: LD_EXP 6
55239: PUSH
55240: LD_VAR 0 2
55244: ARRAY
55245: PUSH
55246: LD_EXP 6
55250: PUSH
55251: LD_OWVAR 2
55255: ARRAY
55256: NONEQUAL
55257: IFFALSE 55279
55259: PUSH
55260: LD_OWVAR 2
55264: PPUSH
55265: LD_VAR 0 2
55269: PPUSH
55270: CALL_OW 81
55274: PUSH
55275: LD_INT 1
55277: NONEQUAL
55278: AND
55279: OR
55280: IFFALSE 55294
// begin result := true ;
55282: LD_ADDR_VAR 0 1
55286: PUSH
55287: LD_INT 1
55289: ST_TO_ADDR
// exit ;
55290: POP
55291: POP
55292: GO 55298
// end ;
55294: GO 55180
55296: POP
55297: POP
// end ;
55298: LD_VAR 0 1
55302: RET
// function CanWinLoose ; begin
55303: LD_INT 0
55305: PPUSH
// result := true ;
55306: LD_ADDR_VAR 0 1
55310: PUSH
55311: LD_INT 1
55313: ST_TO_ADDR
// if IAmSpec and PlayerCount > 1 then
55314: CALL_OW 531
55318: IFFALSE 55330
55320: PUSH
55321: CALL_OW 519
55325: PUSH
55326: LD_INT 1
55328: GREATER
55329: AND
55330: IFFALSE 55340
// result := false ;
55332: LD_ADDR_VAR 0 1
55336: PUSH
55337: LD_INT 0
55339: ST_TO_ADDR
// end ;
55340: LD_VAR 0 1
55344: RET
// function HasPower ( i ) ; begin
55345: LD_INT 0
55347: PPUSH
// result := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_type , unit_human ] , [ f_control , control_computer ] , [ f_control , control_apeman ] ] ] ) ;
55348: LD_ADDR_VAR 0 2
55352: PUSH
55353: LD_INT 22
55355: PUSH
55356: LD_VAR 0 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 21
55370: PUSH
55371: LD_INT 1
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 33
55380: PUSH
55381: LD_INT 3
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 33
55390: PUSH
55391: LD_INT 5
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PPUSH
55408: CALL_OW 69
55412: ST_TO_ADDR
// end ; end_of_file end_of_file
55413: LD_VAR 0 2
55417: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
55418: LD_VAR 0 1
55422: PUSH
55423: LD_INT 200
55425: DOUBLE
55426: GREATEREQUAL
55427: IFFALSE 55435
55429: LD_INT 299
55431: DOUBLE
55432: LESSEQUAL
55433: IFTRUE 55437
55435: GO 55469
55437: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
55438: LD_VAR 0 1
55442: PPUSH
55443: LD_VAR 0 2
55447: PPUSH
55448: LD_VAR 0 3
55452: PPUSH
55453: LD_VAR 0 4
55457: PPUSH
55458: LD_VAR 0 5
55462: PPUSH
55463: CALL 56250 0 5
55467: GO 55546
55469: LD_INT 300
55471: DOUBLE
55472: GREATEREQUAL
55473: IFFALSE 55481
55475: LD_INT 399
55477: DOUBLE
55478: LESSEQUAL
55479: IFTRUE 55483
55481: GO 55545
55483: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
55484: LD_VAR 0 1
55488: PPUSH
55489: LD_VAR 0 2
55493: PPUSH
55494: LD_VAR 0 3
55498: PPUSH
55499: LD_VAR 0 4
55503: PPUSH
55504: LD_VAR 0 5
55508: PPUSH
55509: LD_VAR 0 6
55513: PPUSH
55514: LD_VAR 0 7
55518: PPUSH
55519: LD_VAR 0 8
55523: PPUSH
55524: LD_VAR 0 9
55528: PPUSH
55529: LD_VAR 0 10
55533: PPUSH
55534: LD_VAR 0 11
55538: PPUSH
55539: CALL 61655 0 11
55543: GO 55546
55545: POP
// end ;
55546: PPOPN 11
55548: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
55549: LD_VAR 0 1
55553: PPUSH
55554: LD_VAR 0 2
55558: PPUSH
55559: LD_VAR 0 3
55563: PPUSH
55564: LD_VAR 0 4
55568: PPUSH
55569: LD_VAR 0 5
55573: PPUSH
55574: CALL 55631 0 5
// end ; end_of_file
55578: PPOPN 5
55580: END
// export function SOS_UnitDestroyed ( un ) ; begin
55581: LD_INT 0
55583: PPUSH
// ComRadiation ( un ) ;
55584: LD_VAR 0 1
55588: PPUSH
55589: CALL 56670 0 1
// end ;
55593: LD_VAR 0 2
55597: RET
// export function SOS_UnitKamikazed ( un ) ; begin
55598: LD_INT 0
55600: PPUSH
// ComRadiation ( un ) ;
55601: LD_VAR 0 1
55605: PPUSH
55606: CALL 56670 0 1
// end ;
55610: LD_VAR 0 2
55614: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
55615: LD_INT 0
55617: PPUSH
// end ;
55618: LD_VAR 0 4
55622: RET
// export function SOS_Command ( cmd ) ; begin
55623: LD_INT 0
55625: PPUSH
// end ;
55626: LD_VAR 0 2
55630: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
55631: LD_INT 0
55633: PPUSH
// end ;
55634: LD_VAR 0 6
55638: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
55639: LD_INT 0
55641: PPUSH
55642: PPUSH
55643: PPUSH
55644: PPUSH
// if not vehicle or not factory then
55645: LD_VAR 0 1
55649: NOT
55650: IFTRUE 55659
55652: PUSH
55653: LD_VAR 0 2
55657: NOT
55658: OR
55659: IFFALSE 55663
// exit ;
55661: GO 56245
// if not factoryWaypoints then
55663: LD_EXP 57
55667: NOT
55668: IFFALSE 55672
// exit ;
55670: GO 56245
// for i := 1 to Count ( factoryWaypoints ) do
55672: LD_ADDR_VAR 0 4
55676: PUSH
55677: DOUBLE
55678: LD_INT 1
55680: DEC
55681: ST_TO_ADDR
55682: LD_EXP 57
55686: PPUSH
55687: CALL 5133 0 1
55691: PUSH
55692: FOR_TO
55693: IFFALSE 56243
// if factoryWaypoints [ i ] [ 2 ] = factory then
55695: LD_EXP 57
55699: PUSH
55700: LD_VAR 0 4
55704: ARRAY
55705: PUSH
55706: LD_INT 2
55708: ARRAY
55709: PUSH
55710: LD_VAR 0 2
55714: EQUAL
55715: IFFALSE 56241
// begin if GetControl ( vehicle ) = control_manual then
55717: LD_VAR 0 1
55721: PPUSH
55722: CALL_OW 263
55726: PUSH
55727: LD_INT 1
55729: EQUAL
55730: IFFALSE 56094
// begin driver := IsDrivenBy ( vehicle ) ;
55732: LD_ADDR_VAR 0 5
55736: PUSH
55737: LD_VAR 0 1
55741: PPUSH
55742: CALL_OW 311
55746: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
55747: LD_VAR 0 5
55751: PUSH
55752: LD_EXP 58
55756: IN
55757: IFTRUE 55771
55759: PUSH
55760: LD_VAR 0 1
55764: PUSH
55765: LD_EXP 58
55769: IN
55770: OR
55771: IFFALSE 55777
// exit ;
55773: POP
55774: POP
55775: GO 56245
// if not HasTask ( driver ) then
55777: LD_VAR 0 5
55781: PPUSH
55782: CALL_OW 314
55786: NOT
55787: IFFALSE 56092
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
55789: LD_ADDR_EXP 58
55793: PUSH
55794: LD_EXP 58
55798: PPUSH
55799: LD_VAR 0 5
55803: PPUSH
55804: CALL 41065 0 2
55808: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
55809: LD_ADDR_EXP 58
55813: PUSH
55814: LD_EXP 58
55818: PPUSH
55819: LD_VAR 0 1
55823: PPUSH
55824: CALL 41065 0 2
55828: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55829: LD_ADDR_VAR 0 6
55833: PUSH
55834: LD_EXP 57
55838: PUSH
55839: LD_VAR 0 4
55843: ARRAY
55844: PUSH
55845: LD_INT 3
55847: ARRAY
55848: PPUSH
55849: LD_EXP 57
55853: PUSH
55854: LD_VAR 0 4
55858: ARRAY
55859: PUSH
55860: LD_INT 4
55862: ARRAY
55863: PPUSH
55864: CALL_OW 428
55868: ST_TO_ADDR
// if hex then
55869: LD_VAR 0 6
55873: IFFALSE 55891
// ComMoveUnit ( driver , hex ) else
55875: LD_VAR 0 5
55879: PPUSH
55880: LD_VAR 0 6
55884: PPUSH
55885: CALL_OW 112
55889: GO 55975
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
55891: LD_VAR 0 1
55895: PPUSH
55896: LD_EXP 57
55900: PUSH
55901: LD_VAR 0 4
55905: ARRAY
55906: PUSH
55907: LD_INT 3
55909: ARRAY
55910: PPUSH
55911: LD_EXP 57
55915: PUSH
55916: LD_VAR 0 4
55920: ARRAY
55921: PUSH
55922: LD_INT 4
55924: ARRAY
55925: PPUSH
55926: CALL_OW 297
55930: PUSH
55931: LD_INT 0
55933: GREATER
55934: IFFALSE 55975
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
55936: LD_VAR 0 5
55940: PPUSH
55941: LD_EXP 57
55945: PUSH
55946: LD_VAR 0 4
55950: ARRAY
55951: PUSH
55952: LD_INT 3
55954: ARRAY
55955: PPUSH
55956: LD_EXP 57
55960: PUSH
55961: LD_VAR 0 4
55965: ARRAY
55966: PUSH
55967: LD_INT 4
55969: ARRAY
55970: PPUSH
55971: CALL_OW 111
// AddComExitVehicle ( driver ) ;
55975: LD_VAR 0 5
55979: PPUSH
55980: CALL_OW 181
// if Multiplayer then
55984: LD_OWVAR 4
55988: IFFALSE 56037
// begin repeat wait ( 10 ) ;
55990: LD_INT 10
55992: PPUSH
55993: CALL_OW 67
// until not IsInUnit ( driver ) ;
55997: LD_VAR 0 5
56001: PPUSH
56002: CALL_OW 310
56006: NOT
56007: IFFALSE 55990
// if not HasTask ( driver ) then
56009: LD_VAR 0 5
56013: PPUSH
56014: CALL_OW 314
56018: NOT
56019: IFFALSE 56035
// ComEnterUnit ( driver , factory ) ;
56021: LD_VAR 0 5
56025: PPUSH
56026: LD_VAR 0 2
56030: PPUSH
56031: CALL_OW 120
// end else
56035: GO 56051
// AddComEnterUnit ( driver , factory ) ;
56037: LD_VAR 0 5
56041: PPUSH
56042: LD_VAR 0 2
56046: PPUSH
56047: CALL_OW 180
// wait ( 0 0$1 ) ;
56051: LD_INT 35
56053: PPUSH
56054: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
56058: LD_ADDR_EXP 58
56062: PUSH
56063: LD_EXP 58
56067: PUSH
56068: LD_VAR 0 5
56072: DIFF
56073: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
56074: LD_ADDR_EXP 58
56078: PUSH
56079: LD_EXP 58
56083: PUSH
56084: LD_VAR 0 1
56088: DIFF
56089: ST_TO_ADDR
// break ;
56090: GO 56243
// end ; end else
56092: GO 56241
// if GetControl ( vehicle ) = control_remote then
56094: LD_VAR 0 1
56098: PPUSH
56099: CALL_OW 263
56103: PUSH
56104: LD_INT 2
56106: EQUAL
56107: IFFALSE 56193
// begin wait ( 0 0$2 ) ;
56109: LD_INT 70
56111: PPUSH
56112: CALL_OW 67
// repeat wait ( 10 ) ;
56116: LD_INT 10
56118: PPUSH
56119: CALL_OW 67
// Connect ( vehicle ) ;
56123: LD_VAR 0 1
56127: PPUSH
56128: CALL 11377 0 1
// until IsControledBy ( vehicle ) ;
56132: LD_VAR 0 1
56136: PPUSH
56137: CALL_OW 312
56141: IFFALSE 56116
// wait ( 10 ) ;
56143: LD_INT 10
56145: PPUSH
56146: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56150: LD_VAR 0 1
56154: PPUSH
56155: LD_EXP 57
56159: PUSH
56160: LD_VAR 0 4
56164: ARRAY
56165: PUSH
56166: LD_INT 3
56168: ARRAY
56169: PPUSH
56170: LD_EXP 57
56174: PUSH
56175: LD_VAR 0 4
56179: ARRAY
56180: PUSH
56181: LD_INT 4
56183: ARRAY
56184: PPUSH
56185: CALL_OW 111
// break ;
56189: GO 56243
// end else
56191: GO 56241
// begin wait ( 0 0$3 ) ;
56193: LD_INT 105
56195: PPUSH
56196: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
56200: LD_VAR 0 1
56204: PPUSH
56205: LD_EXP 57
56209: PUSH
56210: LD_VAR 0 4
56214: ARRAY
56215: PUSH
56216: LD_INT 3
56218: ARRAY
56219: PPUSH
56220: LD_EXP 57
56224: PUSH
56225: LD_VAR 0 4
56229: ARRAY
56230: PUSH
56231: LD_INT 4
56233: ARRAY
56234: PPUSH
56235: CALL_OW 111
// break ;
56239: GO 56243
// end ; end ;
56241: GO 55692
56243: POP
56244: POP
// end ;
56245: LD_VAR 0 3
56249: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
56250: LD_INT 0
56252: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
56253: LD_VAR 0 1
56257: PUSH
56258: LD_INT 250
56260: EQUAL
56261: IFFALSE 56278
56263: PUSH
56264: LD_VAR 0 2
56268: PPUSH
56269: CALL_OW 264
56273: PUSH
56274: LD_INT 81
56276: EQUAL
56277: AND
56278: IFFALSE 56299
// MinerPlaceMine ( unit , x , y ) ;
56280: LD_VAR 0 2
56284: PPUSH
56285: LD_VAR 0 4
56289: PPUSH
56290: LD_VAR 0 5
56294: PPUSH
56295: CALL 59431 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
56299: LD_VAR 0 1
56303: PUSH
56304: LD_INT 251
56306: EQUAL
56307: IFFALSE 56324
56309: PUSH
56310: LD_VAR 0 2
56314: PPUSH
56315: CALL_OW 264
56319: PUSH
56320: LD_INT 81
56322: EQUAL
56323: AND
56324: IFFALSE 56345
// MinerDetonateMine ( unit , x , y ) ;
56326: LD_VAR 0 2
56330: PPUSH
56331: LD_VAR 0 4
56335: PPUSH
56336: LD_VAR 0 5
56340: PPUSH
56341: CALL 59710 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
56345: LD_VAR 0 1
56349: PUSH
56350: LD_INT 252
56352: EQUAL
56353: IFFALSE 56370
56355: PUSH
56356: LD_VAR 0 2
56360: PPUSH
56361: CALL_OW 264
56365: PUSH
56366: LD_INT 81
56368: EQUAL
56369: AND
56370: IFFALSE 56391
// MinerCreateMinefield ( unit , x , y ) ;
56372: LD_VAR 0 2
56376: PPUSH
56377: LD_VAR 0 4
56381: PPUSH
56382: LD_VAR 0 5
56386: PPUSH
56387: CALL 60129 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
56391: LD_VAR 0 1
56395: PUSH
56396: LD_INT 253
56398: EQUAL
56399: IFFALSE 56416
56401: PUSH
56402: LD_VAR 0 2
56406: PPUSH
56407: CALL_OW 257
56411: PUSH
56412: LD_INT 5
56414: EQUAL
56415: AND
56416: IFFALSE 56437
// ComBinocular ( unit , x , y ) ;
56418: LD_VAR 0 2
56422: PPUSH
56423: LD_VAR 0 4
56427: PPUSH
56428: LD_VAR 0 5
56432: PPUSH
56433: CALL 60504 0 3
// if selectedUnit then
56437: LD_VAR 0 3
56441: IFFALSE 56501
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
56443: LD_VAR 0 1
56447: PUSH
56448: LD_INT 254
56450: EQUAL
56451: IFFALSE 56468
56453: PUSH
56454: LD_VAR 0 2
56458: PPUSH
56459: CALL_OW 264
56463: PUSH
56464: LD_INT 99
56466: EQUAL
56467: AND
56468: IFFALSE 56485
56470: PUSH
56471: LD_VAR 0 3
56475: PPUSH
56476: CALL_OW 263
56480: PUSH
56481: LD_INT 3
56483: EQUAL
56484: AND
56485: IFFALSE 56501
// HackDestroyVehicle ( unit , selectedUnit ) ;
56487: LD_VAR 0 2
56491: PPUSH
56492: LD_VAR 0 3
56496: PPUSH
56497: CALL 58791 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
56501: LD_VAR 0 1
56505: PUSH
56506: LD_INT 255
56508: EQUAL
56509: IFFALSE 56533
56511: PUSH
56512: LD_VAR 0 2
56516: PPUSH
56517: CALL_OW 264
56521: PUSH
56522: LD_INT 14
56524: PUSH
56525: LD_INT 53
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: IN
56532: AND
56533: IFFALSE 56551
56535: PUSH
56536: LD_VAR 0 4
56540: PPUSH
56541: LD_VAR 0 5
56545: PPUSH
56546: CALL_OW 488
56550: AND
56551: IFFALSE 56575
// CutTreeXYR ( unit , x , y , 12 ) ;
56553: LD_VAR 0 2
56557: PPUSH
56558: LD_VAR 0 4
56562: PPUSH
56563: LD_VAR 0 5
56567: PPUSH
56568: LD_INT 12
56570: PPUSH
56571: CALL 56766 0 4
// if cmd = 256 then
56575: LD_VAR 0 1
56579: PUSH
56580: LD_INT 256
56582: EQUAL
56583: IFFALSE 56604
// SetFactoryWaypoint ( unit , x , y ) ;
56585: LD_VAR 0 2
56589: PPUSH
56590: LD_VAR 0 4
56594: PPUSH
56595: LD_VAR 0 5
56599: PPUSH
56600: CALL 61663 0 3
// if cmd = 257 then
56604: LD_VAR 0 1
56608: PUSH
56609: LD_INT 257
56611: EQUAL
56612: IFFALSE 56633
// SetWarehouseGatheringPoint ( unit , x , y ) ;
56614: LD_VAR 0 2
56618: PPUSH
56619: LD_VAR 0 4
56623: PPUSH
56624: LD_VAR 0 5
56628: PPUSH
56629: CALL 62159 0 3
// if cmd = 258 then
56633: LD_VAR 0 1
56637: PUSH
56638: LD_INT 258
56640: EQUAL
56641: IFFALSE 56665
// BurnTreeXYR ( unit , x , y , 8 ) ;
56643: LD_VAR 0 2
56647: PPUSH
56648: LD_VAR 0 4
56652: PPUSH
56653: LD_VAR 0 5
56657: PPUSH
56658: LD_INT 8
56660: PPUSH
56661: CALL 57166 0 4
// end ;
56665: LD_VAR 0 6
56669: RET
// export function ComRadiation ( un ) ; var eff ; begin
56670: LD_INT 0
56672: PPUSH
56673: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
56674: LD_VAR 0 1
56678: PPUSH
56679: CALL_OW 264
56683: PUSH
56684: LD_INT 91
56686: NONEQUAL
56687: IFFALSE 56691
// exit ;
56689: GO 56761
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
56691: LD_INT 68
56693: PPUSH
56694: LD_VAR 0 1
56698: PPUSH
56699: CALL_OW 255
56703: PPUSH
56704: CALL_OW 321
56708: PUSH
56709: LD_INT 2
56711: EQUAL
56712: IFFALSE 56724
// eff := 50 else
56714: LD_ADDR_VAR 0 3
56718: PUSH
56719: LD_INT 50
56721: ST_TO_ADDR
56722: GO 56732
// eff := 25 ;
56724: LD_ADDR_VAR 0 3
56728: PUSH
56729: LD_INT 25
56731: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
56732: LD_VAR 0 1
56736: PPUSH
56737: CALL_OW 250
56741: PPUSH
56742: LD_VAR 0 1
56746: PPUSH
56747: CALL_OW 251
56751: PPUSH
56752: LD_VAR 0 3
56756: PPUSH
56757: CALL_OW 495
// end ;
56761: LD_VAR 0 2
56765: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
56766: LD_INT 0
56768: PPUSH
56769: PPUSH
56770: PPUSH
56771: PPUSH
56772: PPUSH
56773: PPUSH
56774: PPUSH
56775: PPUSH
56776: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
56777: LD_VAR 0 1
56781: PPUSH
56782: CALL_OW 302
56786: NOT
56787: IFTRUE 56806
56789: PUSH
56790: LD_VAR 0 2
56794: PPUSH
56795: LD_VAR 0 3
56799: PPUSH
56800: CALL_OW 488
56804: NOT
56805: OR
56806: IFTRUE 56815
56808: PUSH
56809: LD_VAR 0 4
56813: NOT
56814: OR
56815: IFFALSE 56819
// exit ;
56817: GO 57161
// list := [ ] ;
56819: LD_ADDR_VAR 0 13
56823: PUSH
56824: EMPTY
56825: ST_TO_ADDR
// if x - r < 0 then
56826: LD_VAR 0 2
56830: PUSH
56831: LD_VAR 0 4
56835: MINUS
56836: PUSH
56837: LD_INT 0
56839: LESS
56840: IFFALSE 56852
// min_x := 0 else
56842: LD_ADDR_VAR 0 7
56846: PUSH
56847: LD_INT 0
56849: ST_TO_ADDR
56850: GO 56868
// min_x := x - r ;
56852: LD_ADDR_VAR 0 7
56856: PUSH
56857: LD_VAR 0 2
56861: PUSH
56862: LD_VAR 0 4
56866: MINUS
56867: ST_TO_ADDR
// if y - r < 0 then
56868: LD_VAR 0 3
56872: PUSH
56873: LD_VAR 0 4
56877: MINUS
56878: PUSH
56879: LD_INT 0
56881: LESS
56882: IFFALSE 56894
// min_y := 0 else
56884: LD_ADDR_VAR 0 8
56888: PUSH
56889: LD_INT 0
56891: ST_TO_ADDR
56892: GO 56910
// min_y := y - r ;
56894: LD_ADDR_VAR 0 8
56898: PUSH
56899: LD_VAR 0 3
56903: PUSH
56904: LD_VAR 0 4
56908: MINUS
56909: ST_TO_ADDR
// max_x := x + r ;
56910: LD_ADDR_VAR 0 9
56914: PUSH
56915: LD_VAR 0 2
56919: PUSH
56920: LD_VAR 0 4
56924: PLUS
56925: ST_TO_ADDR
// max_y := y + r ;
56926: LD_ADDR_VAR 0 10
56930: PUSH
56931: LD_VAR 0 3
56935: PUSH
56936: LD_VAR 0 4
56940: PLUS
56941: ST_TO_ADDR
// for _x = min_x to max_x do
56942: LD_ADDR_VAR 0 11
56946: PUSH
56947: DOUBLE
56948: LD_VAR 0 7
56952: DEC
56953: ST_TO_ADDR
56954: LD_VAR 0 9
56958: PUSH
56959: FOR_TO
56960: IFFALSE 57079
// for _y = min_y to max_y do
56962: LD_ADDR_VAR 0 12
56966: PUSH
56967: DOUBLE
56968: LD_VAR 0 8
56972: DEC
56973: ST_TO_ADDR
56974: LD_VAR 0 10
56978: PUSH
56979: FOR_TO
56980: IFFALSE 57075
// begin if not ValidHex ( _x , _y ) then
56982: LD_VAR 0 11
56986: PPUSH
56987: LD_VAR 0 12
56991: PPUSH
56992: CALL_OW 488
56996: NOT
56997: IFFALSE 57001
// continue ;
56999: GO 56979
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57001: LD_VAR 0 11
57005: PPUSH
57006: LD_VAR 0 12
57010: PPUSH
57011: CALL_OW 351
57015: IFFALSE 57033
57017: PUSH
57018: LD_VAR 0 11
57022: PPUSH
57023: LD_VAR 0 12
57027: PPUSH
57028: CALL_OW 554
57032: AND
57033: IFFALSE 57073
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57035: LD_ADDR_VAR 0 13
57039: PUSH
57040: LD_VAR 0 13
57044: PPUSH
57045: LD_VAR 0 13
57049: PUSH
57050: LD_INT 1
57052: PLUS
57053: PPUSH
57054: LD_VAR 0 11
57058: PUSH
57059: LD_VAR 0 12
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PPUSH
57068: CALL_OW 2
57072: ST_TO_ADDR
// end ;
57073: GO 56979
57075: POP
57076: POP
57077: GO 56959
57079: POP
57080: POP
// if not list then
57081: LD_VAR 0 13
57085: NOT
57086: IFFALSE 57090
// exit ;
57088: GO 57161
// for i in list do
57090: LD_ADDR_VAR 0 6
57094: PUSH
57095: LD_VAR 0 13
57099: PUSH
57100: FOR_IN
57101: IFFALSE 57159
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
57103: LD_VAR 0 1
57107: PPUSH
57108: LD_STRING M
57110: PUSH
57111: LD_VAR 0 6
57115: PUSH
57116: LD_INT 1
57118: ARRAY
57119: PUSH
57120: LD_VAR 0 6
57124: PUSH
57125: LD_INT 2
57127: ARRAY
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: PUSH
57150: EMPTY
57151: LIST
57152: PPUSH
57153: CALL_OW 447
57157: GO 57100
57159: POP
57160: POP
// end ;
57161: LD_VAR 0 5
57165: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
57166: LD_INT 0
57168: PPUSH
57169: PPUSH
57170: PPUSH
57171: PPUSH
57172: PPUSH
57173: PPUSH
57174: PPUSH
57175: PPUSH
57176: PPUSH
57177: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
57178: LD_VAR 0 1
57182: PPUSH
57183: CALL_OW 302
57187: NOT
57188: IFTRUE 57207
57190: PUSH
57191: LD_VAR 0 2
57195: PPUSH
57196: LD_VAR 0 3
57200: PPUSH
57201: CALL_OW 488
57205: NOT
57206: OR
57207: IFTRUE 57216
57209: PUSH
57210: LD_VAR 0 4
57214: NOT
57215: OR
57216: IFFALSE 57220
// exit ;
57218: GO 57737
// list := [ ] ;
57220: LD_ADDR_VAR 0 13
57224: PUSH
57225: EMPTY
57226: ST_TO_ADDR
// if x - r < 0 then
57227: LD_VAR 0 2
57231: PUSH
57232: LD_VAR 0 4
57236: MINUS
57237: PUSH
57238: LD_INT 0
57240: LESS
57241: IFFALSE 57253
// min_x := 0 else
57243: LD_ADDR_VAR 0 7
57247: PUSH
57248: LD_INT 0
57250: ST_TO_ADDR
57251: GO 57269
// min_x := x - r ;
57253: LD_ADDR_VAR 0 7
57257: PUSH
57258: LD_VAR 0 2
57262: PUSH
57263: LD_VAR 0 4
57267: MINUS
57268: ST_TO_ADDR
// if y - r < 0 then
57269: LD_VAR 0 3
57273: PUSH
57274: LD_VAR 0 4
57278: MINUS
57279: PUSH
57280: LD_INT 0
57282: LESS
57283: IFFALSE 57295
// min_y := 0 else
57285: LD_ADDR_VAR 0 8
57289: PUSH
57290: LD_INT 0
57292: ST_TO_ADDR
57293: GO 57311
// min_y := y - r ;
57295: LD_ADDR_VAR 0 8
57299: PUSH
57300: LD_VAR 0 3
57304: PUSH
57305: LD_VAR 0 4
57309: MINUS
57310: ST_TO_ADDR
// max_x := x + r ;
57311: LD_ADDR_VAR 0 9
57315: PUSH
57316: LD_VAR 0 2
57320: PUSH
57321: LD_VAR 0 4
57325: PLUS
57326: ST_TO_ADDR
// max_y := y + r ;
57327: LD_ADDR_VAR 0 10
57331: PUSH
57332: LD_VAR 0 3
57336: PUSH
57337: LD_VAR 0 4
57341: PLUS
57342: ST_TO_ADDR
// for _x = min_x to max_x do
57343: LD_ADDR_VAR 0 11
57347: PUSH
57348: DOUBLE
57349: LD_VAR 0 7
57353: DEC
57354: ST_TO_ADDR
57355: LD_VAR 0 9
57359: PUSH
57360: FOR_TO
57361: IFFALSE 57480
// for _y = min_y to max_y do
57363: LD_ADDR_VAR 0 12
57367: PUSH
57368: DOUBLE
57369: LD_VAR 0 8
57373: DEC
57374: ST_TO_ADDR
57375: LD_VAR 0 10
57379: PUSH
57380: FOR_TO
57381: IFFALSE 57476
// begin if not ValidHex ( _x , _y ) then
57383: LD_VAR 0 11
57387: PPUSH
57388: LD_VAR 0 12
57392: PPUSH
57393: CALL_OW 488
57397: NOT
57398: IFFALSE 57402
// continue ;
57400: GO 57380
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
57402: LD_VAR 0 11
57406: PPUSH
57407: LD_VAR 0 12
57411: PPUSH
57412: CALL_OW 351
57416: IFFALSE 57434
57418: PUSH
57419: LD_VAR 0 11
57423: PPUSH
57424: LD_VAR 0 12
57428: PPUSH
57429: CALL_OW 554
57433: AND
57434: IFFALSE 57474
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
57436: LD_ADDR_VAR 0 13
57440: PUSH
57441: LD_VAR 0 13
57445: PPUSH
57446: LD_VAR 0 13
57450: PUSH
57451: LD_INT 1
57453: PLUS
57454: PPUSH
57455: LD_VAR 0 11
57459: PUSH
57460: LD_VAR 0 12
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PPUSH
57469: CALL_OW 2
57473: ST_TO_ADDR
// end ;
57474: GO 57380
57476: POP
57477: POP
57478: GO 57360
57480: POP
57481: POP
// if not list then
57482: LD_VAR 0 13
57486: NOT
57487: IFFALSE 57491
// exit ;
57489: GO 57737
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
57491: LD_ADDR_VAR 0 13
57495: PUSH
57496: LD_VAR 0 1
57500: PPUSH
57501: LD_VAR 0 13
57505: PPUSH
57506: LD_INT 1
57508: PPUSH
57509: LD_INT 1
57511: PPUSH
57512: CALL 8505 0 4
57516: ST_TO_ADDR
// ComStop ( flame ) ;
57517: LD_VAR 0 1
57521: PPUSH
57522: CALL_OW 141
// for i in list do
57526: LD_ADDR_VAR 0 6
57530: PUSH
57531: LD_VAR 0 13
57535: PUSH
57536: FOR_IN
57537: IFFALSE 57568
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
57539: LD_VAR 0 1
57543: PPUSH
57544: LD_VAR 0 6
57548: PUSH
57549: LD_INT 1
57551: ARRAY
57552: PPUSH
57553: LD_VAR 0 6
57557: PUSH
57558: LD_INT 2
57560: ARRAY
57561: PPUSH
57562: CALL_OW 176
57566: GO 57536
57568: POP
57569: POP
// repeat wait ( 0 0$1 ) ;
57570: LD_INT 35
57572: PPUSH
57573: CALL_OW 67
// task := GetTaskList ( flame ) ;
57577: LD_ADDR_VAR 0 14
57581: PUSH
57582: LD_VAR 0 1
57586: PPUSH
57587: CALL_OW 437
57591: ST_TO_ADDR
// if not task then
57592: LD_VAR 0 14
57596: NOT
57597: IFFALSE 57601
// exit ;
57599: GO 57737
// if task [ 1 ] [ 1 ] <> | then
57601: LD_VAR 0 14
57605: PUSH
57606: LD_INT 1
57608: ARRAY
57609: PUSH
57610: LD_INT 1
57612: ARRAY
57613: PUSH
57614: LD_STRING |
57616: NONEQUAL
57617: IFFALSE 57621
// exit ;
57619: GO 57737
// _x := task [ 1 ] [ 2 ] ;
57621: LD_ADDR_VAR 0 11
57625: PUSH
57626: LD_VAR 0 14
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PUSH
57635: LD_INT 2
57637: ARRAY
57638: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
57639: LD_ADDR_VAR 0 12
57643: PUSH
57644: LD_VAR 0 14
57648: PUSH
57649: LD_INT 1
57651: ARRAY
57652: PUSH
57653: LD_INT 3
57655: ARRAY
57656: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
57657: LD_VAR 0 11
57661: PPUSH
57662: LD_VAR 0 12
57666: PPUSH
57667: CALL_OW 351
57671: NOT
57672: IFTRUE 57691
57674: PUSH
57675: LD_VAR 0 11
57679: PPUSH
57680: LD_VAR 0 12
57684: PPUSH
57685: CALL_OW 554
57689: NOT
57690: OR
57691: IFFALSE 57725
// begin task := Delete ( task , 1 ) ;
57693: LD_ADDR_VAR 0 14
57697: PUSH
57698: LD_VAR 0 14
57702: PPUSH
57703: LD_INT 1
57705: PPUSH
57706: CALL_OW 3
57710: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
57711: LD_VAR 0 1
57715: PPUSH
57716: LD_VAR 0 14
57720: PPUSH
57721: CALL_OW 446
// end ; until not HasTask ( flame ) ;
57725: LD_VAR 0 1
57729: PPUSH
57730: CALL_OW 314
57734: NOT
57735: IFFALSE 57570
// end ;
57737: LD_VAR 0 5
57741: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
57742: LD_EXP 47
57746: NOT
57747: IFFALSE 57797
57749: GO 57751
57751: DISABLE
// begin initHack := true ;
57752: LD_ADDR_EXP 47
57756: PUSH
57757: LD_INT 1
57759: ST_TO_ADDR
// hackTanks := [ ] ;
57760: LD_ADDR_EXP 48
57764: PUSH
57765: EMPTY
57766: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
57767: LD_ADDR_EXP 49
57771: PUSH
57772: EMPTY
57773: ST_TO_ADDR
// hackLimit := 3 ;
57774: LD_ADDR_EXP 50
57778: PUSH
57779: LD_INT 3
57781: ST_TO_ADDR
// hackDist := 12 ;
57782: LD_ADDR_EXP 51
57786: PUSH
57787: LD_INT 12
57789: ST_TO_ADDR
// hackCounter := [ ] ;
57790: LD_ADDR_EXP 52
57794: PUSH
57795: EMPTY
57796: ST_TO_ADDR
// end ;
57797: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
57798: LD_EXP 47
57802: IFFALSE 57820
57804: PUSH
57805: LD_INT 34
57807: PUSH
57808: LD_INT 99
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PPUSH
57815: CALL_OW 69
57819: AND
57820: IFFALSE 58073
57822: GO 57824
57824: DISABLE
57825: LD_INT 0
57827: PPUSH
57828: PPUSH
// begin enable ;
57829: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
57830: LD_ADDR_VAR 0 1
57834: PUSH
57835: LD_INT 34
57837: PUSH
57838: LD_INT 99
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PPUSH
57845: CALL_OW 69
57849: PUSH
57850: FOR_IN
57851: IFFALSE 58071
// begin if not i in hackTanks then
57853: LD_VAR 0 1
57857: PUSH
57858: LD_EXP 48
57862: IN
57863: NOT
57864: IFFALSE 57947
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
57866: LD_ADDR_EXP 48
57870: PUSH
57871: LD_EXP 48
57875: PPUSH
57876: LD_EXP 48
57880: PUSH
57881: LD_INT 1
57883: PLUS
57884: PPUSH
57885: LD_VAR 0 1
57889: PPUSH
57890: CALL_OW 1
57894: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
57895: LD_ADDR_EXP 49
57899: PUSH
57900: LD_EXP 49
57904: PPUSH
57905: LD_EXP 49
57909: PUSH
57910: LD_INT 1
57912: PLUS
57913: PPUSH
57914: EMPTY
57915: PPUSH
57916: CALL_OW 1
57920: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
57921: LD_ADDR_EXP 52
57925: PUSH
57926: LD_EXP 52
57930: PPUSH
57931: LD_EXP 52
57935: PUSH
57936: LD_INT 1
57938: PLUS
57939: PPUSH
57940: EMPTY
57941: PPUSH
57942: CALL_OW 1
57946: ST_TO_ADDR
// end ; if not IsOk ( i ) then
57947: LD_VAR 0 1
57951: PPUSH
57952: CALL_OW 302
57956: NOT
57957: IFFALSE 57970
// begin HackUnlinkAll ( i ) ;
57959: LD_VAR 0 1
57963: PPUSH
57964: CALL 58076 0 1
// continue ;
57968: GO 57850
// end ; HackCheckCapturedStatus ( i ) ;
57970: LD_VAR 0 1
57974: PPUSH
57975: CALL 58521 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
57979: LD_ADDR_VAR 0 2
57983: PUSH
57984: LD_INT 81
57986: PUSH
57987: LD_VAR 0 1
57991: PPUSH
57992: CALL_OW 255
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 33
58003: PUSH
58004: LD_INT 3
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 91
58013: PUSH
58014: LD_VAR 0 1
58018: PUSH
58019: LD_EXP 51
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 50
58031: PUSH
58032: EMPTY
58033: LIST
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: PPUSH
58041: CALL_OW 69
58045: ST_TO_ADDR
// if not tmp then
58046: LD_VAR 0 2
58050: NOT
58051: IFFALSE 58055
// continue ;
58053: GO 57850
// HackLink ( i , tmp ) ;
58055: LD_VAR 0 1
58059: PPUSH
58060: LD_VAR 0 2
58064: PPUSH
58065: CALL 58212 0 2
// end ;
58069: GO 57850
58071: POP
58072: POP
// end ;
58073: PPOPN 2
58075: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
58076: LD_INT 0
58078: PPUSH
58079: PPUSH
58080: PPUSH
// if not hack in hackTanks then
58081: LD_VAR 0 1
58085: PUSH
58086: LD_EXP 48
58090: IN
58091: NOT
58092: IFFALSE 58096
// exit ;
58094: GO 58207
// index := GetElementIndex ( hackTanks , hack ) ;
58096: LD_ADDR_VAR 0 4
58100: PUSH
58101: LD_EXP 48
58105: PPUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL 7800 0 2
58115: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
58116: LD_EXP 49
58120: PUSH
58121: LD_VAR 0 4
58125: ARRAY
58126: IFFALSE 58207
// begin for i in hackTanksCaptured [ index ] do
58128: LD_ADDR_VAR 0 3
58132: PUSH
58133: LD_EXP 49
58137: PUSH
58138: LD_VAR 0 4
58142: ARRAY
58143: PUSH
58144: FOR_IN
58145: IFFALSE 58171
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
58147: LD_VAR 0 3
58151: PUSH
58152: LD_INT 1
58154: ARRAY
58155: PPUSH
58156: LD_VAR 0 3
58160: PUSH
58161: LD_INT 2
58163: ARRAY
58164: PPUSH
58165: CALL_OW 235
58169: GO 58144
58171: POP
58172: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
58173: LD_ADDR_EXP 49
58177: PUSH
58178: LD_EXP 49
58182: PPUSH
58183: LD_VAR 0 4
58187: PPUSH
58188: EMPTY
58189: PPUSH
58190: CALL_OW 1
58194: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
58195: LD_VAR 0 1
58199: PPUSH
58200: LD_INT 0
58202: PPUSH
58203: CALL_OW 505
// end ; end ;
58207: LD_VAR 0 2
58211: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
58212: LD_INT 0
58214: PPUSH
58215: PPUSH
58216: PPUSH
// if not hack in hackTanks or not vehicles then
58217: LD_VAR 0 1
58221: PUSH
58222: LD_EXP 48
58226: IN
58227: NOT
58228: IFTRUE 58237
58230: PUSH
58231: LD_VAR 0 2
58235: NOT
58236: OR
58237: IFFALSE 58241
// exit ;
58239: GO 58516
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
58241: LD_ADDR_VAR 0 2
58245: PUSH
58246: LD_VAR 0 1
58250: PPUSH
58251: LD_VAR 0 2
58255: PPUSH
58256: LD_INT 1
58258: PPUSH
58259: LD_INT 1
58261: PPUSH
58262: CALL 8452 0 4
58266: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
58267: LD_ADDR_VAR 0 5
58271: PUSH
58272: LD_EXP 48
58276: PPUSH
58277: LD_VAR 0 1
58281: PPUSH
58282: CALL 7800 0 2
58286: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
58287: LD_EXP 49
58291: PUSH
58292: LD_VAR 0 5
58296: ARRAY
58297: PUSH
58298: LD_EXP 50
58302: LESS
58303: IFFALSE 58492
// begin for i := 1 to vehicles do
58305: LD_ADDR_VAR 0 4
58309: PUSH
58310: DOUBLE
58311: LD_INT 1
58313: DEC
58314: ST_TO_ADDR
58315: LD_VAR 0 2
58319: PUSH
58320: FOR_TO
58321: IFFALSE 58490
// begin if hackTanksCaptured [ index ] = hackLimit then
58323: LD_EXP 49
58327: PUSH
58328: LD_VAR 0 5
58332: ARRAY
58333: PUSH
58334: LD_EXP 50
58338: EQUAL
58339: IFFALSE 58343
// break ;
58341: GO 58490
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
58343: LD_ADDR_EXP 52
58347: PUSH
58348: LD_EXP 52
58352: PPUSH
58353: LD_VAR 0 5
58357: PPUSH
58358: LD_EXP 52
58362: PUSH
58363: LD_VAR 0 5
58367: ARRAY
58368: PUSH
58369: LD_INT 1
58371: PLUS
58372: PPUSH
58373: CALL_OW 1
58377: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
58378: LD_ADDR_EXP 49
58382: PUSH
58383: LD_EXP 49
58387: PPUSH
58388: LD_VAR 0 5
58392: PUSH
58393: LD_EXP 49
58397: PUSH
58398: LD_VAR 0 5
58402: ARRAY
58403: PUSH
58404: LD_INT 1
58406: PLUS
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PPUSH
58412: LD_VAR 0 2
58416: PUSH
58417: LD_VAR 0 4
58421: ARRAY
58422: PUSH
58423: LD_VAR 0 2
58427: PUSH
58428: LD_VAR 0 4
58432: ARRAY
58433: PPUSH
58434: CALL_OW 255
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PPUSH
58443: CALL 8017 0 3
58447: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
58448: LD_VAR 0 2
58452: PUSH
58453: LD_VAR 0 4
58457: ARRAY
58458: PPUSH
58459: LD_VAR 0 1
58463: PPUSH
58464: CALL_OW 255
58468: PPUSH
58469: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
58473: LD_VAR 0 2
58477: PUSH
58478: LD_VAR 0 4
58482: ARRAY
58483: PPUSH
58484: CALL_OW 141
// end ;
58488: GO 58320
58490: POP
58491: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58492: LD_VAR 0 1
58496: PPUSH
58497: LD_EXP 49
58501: PUSH
58502: LD_VAR 0 5
58506: ARRAY
58507: PUSH
58508: LD_INT 0
58510: PLUS
58511: PPUSH
58512: CALL_OW 505
// end ;
58516: LD_VAR 0 3
58520: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
58521: LD_INT 0
58523: PPUSH
58524: PPUSH
58525: PPUSH
58526: PPUSH
// if not hack in hackTanks then
58527: LD_VAR 0 1
58531: PUSH
58532: LD_EXP 48
58536: IN
58537: NOT
58538: IFFALSE 58542
// exit ;
58540: GO 58786
// index := GetElementIndex ( hackTanks , hack ) ;
58542: LD_ADDR_VAR 0 4
58546: PUSH
58547: LD_EXP 48
58551: PPUSH
58552: LD_VAR 0 1
58556: PPUSH
58557: CALL 7800 0 2
58561: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
58562: LD_ADDR_VAR 0 3
58566: PUSH
58567: DOUBLE
58568: LD_EXP 49
58572: PUSH
58573: LD_VAR 0 4
58577: ARRAY
58578: INC
58579: ST_TO_ADDR
58580: LD_INT 1
58582: PUSH
58583: FOR_DOWNTO
58584: IFFALSE 58760
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
58586: LD_ADDR_VAR 0 5
58590: PUSH
58591: LD_EXP 49
58595: PUSH
58596: LD_VAR 0 4
58600: ARRAY
58601: PUSH
58602: LD_VAR 0 3
58606: ARRAY
58607: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
58608: LD_VAR 0 5
58612: PUSH
58613: LD_INT 1
58615: ARRAY
58616: PPUSH
58617: CALL_OW 302
58621: NOT
58622: IFTRUE 58650
58624: PUSH
58625: LD_VAR 0 5
58629: PUSH
58630: LD_INT 1
58632: ARRAY
58633: PPUSH
58634: CALL_OW 255
58638: PUSH
58639: LD_VAR 0 1
58643: PPUSH
58644: CALL_OW 255
58648: NONEQUAL
58649: OR
58650: IFFALSE 58758
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
58652: LD_VAR 0 5
58656: PUSH
58657: LD_INT 1
58659: ARRAY
58660: PPUSH
58661: CALL_OW 305
58665: IFFALSE 58693
58667: PUSH
58668: LD_VAR 0 5
58672: PUSH
58673: LD_INT 1
58675: ARRAY
58676: PPUSH
58677: CALL_OW 255
58681: PUSH
58682: LD_VAR 0 1
58686: PPUSH
58687: CALL_OW 255
58691: EQUAL
58692: AND
58693: IFFALSE 58717
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
58695: LD_VAR 0 5
58699: PUSH
58700: LD_INT 1
58702: ARRAY
58703: PPUSH
58704: LD_VAR 0 5
58708: PUSH
58709: LD_INT 2
58711: ARRAY
58712: PPUSH
58713: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
58717: LD_ADDR_EXP 49
58721: PUSH
58722: LD_EXP 49
58726: PPUSH
58727: LD_VAR 0 4
58731: PPUSH
58732: LD_EXP 49
58736: PUSH
58737: LD_VAR 0 4
58741: ARRAY
58742: PPUSH
58743: LD_VAR 0 3
58747: PPUSH
58748: CALL_OW 3
58752: PPUSH
58753: CALL_OW 1
58757: ST_TO_ADDR
// end ; end ;
58758: GO 58583
58760: POP
58761: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
58762: LD_VAR 0 1
58766: PPUSH
58767: LD_EXP 49
58771: PUSH
58772: LD_VAR 0 4
58776: ARRAY
58777: PUSH
58778: LD_INT 0
58780: PLUS
58781: PPUSH
58782: CALL_OW 505
// end ;
58786: LD_VAR 0 2
58790: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
58791: LD_INT 0
58793: PPUSH
58794: PPUSH
58795: PPUSH
58796: PPUSH
// if not hack in hackTanks then
58797: LD_VAR 0 1
58801: PUSH
58802: LD_EXP 48
58806: IN
58807: NOT
58808: IFFALSE 58812
// exit ;
58810: GO 58897
// index := GetElementIndex ( hackTanks , hack ) ;
58812: LD_ADDR_VAR 0 5
58816: PUSH
58817: LD_EXP 48
58821: PPUSH
58822: LD_VAR 0 1
58826: PPUSH
58827: CALL 7800 0 2
58831: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
58832: LD_ADDR_VAR 0 4
58836: PUSH
58837: DOUBLE
58838: LD_INT 1
58840: DEC
58841: ST_TO_ADDR
58842: LD_EXP 49
58846: PUSH
58847: LD_VAR 0 5
58851: ARRAY
58852: PUSH
58853: FOR_TO
58854: IFFALSE 58895
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
58856: LD_EXP 49
58860: PUSH
58861: LD_VAR 0 5
58865: ARRAY
58866: PUSH
58867: LD_VAR 0 4
58871: ARRAY
58872: PUSH
58873: LD_INT 1
58875: ARRAY
58876: PUSH
58877: LD_VAR 0 2
58881: EQUAL
58882: IFFALSE 58893
// KillUnit ( vehicle ) ;
58884: LD_VAR 0 2
58888: PPUSH
58889: CALL_OW 66
58893: GO 58853
58895: POP
58896: POP
// end ;
58897: LD_VAR 0 3
58901: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
58902: LD_EXP 53
58906: NOT
58907: IFFALSE 58942
58909: GO 58911
58911: DISABLE
// begin initMiner := true ;
58912: LD_ADDR_EXP 53
58916: PUSH
58917: LD_INT 1
58919: ST_TO_ADDR
// minersList := [ ] ;
58920: LD_ADDR_EXP 54
58924: PUSH
58925: EMPTY
58926: ST_TO_ADDR
// minerMinesList := [ ] ;
58927: LD_ADDR_EXP 55
58931: PUSH
58932: EMPTY
58933: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
58934: LD_ADDR_EXP 56
58938: PUSH
58939: LD_INT 5
58941: ST_TO_ADDR
// end ;
58942: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
58943: LD_EXP 53
58947: IFFALSE 58965
58949: PUSH
58950: LD_INT 34
58952: PUSH
58953: LD_INT 81
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PPUSH
58960: CALL_OW 69
58964: AND
58965: IFFALSE 59428
58967: GO 58969
58969: DISABLE
58970: LD_INT 0
58972: PPUSH
58973: PPUSH
58974: PPUSH
58975: PPUSH
// begin enable ;
58976: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
58977: LD_ADDR_VAR 0 1
58981: PUSH
58982: LD_INT 34
58984: PUSH
58985: LD_INT 81
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PPUSH
58992: CALL_OW 69
58996: PUSH
58997: FOR_IN
58998: IFFALSE 59070
// begin if not i in minersList then
59000: LD_VAR 0 1
59004: PUSH
59005: LD_EXP 54
59009: IN
59010: NOT
59011: IFFALSE 59068
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
59013: LD_ADDR_EXP 54
59017: PUSH
59018: LD_EXP 54
59022: PPUSH
59023: LD_EXP 54
59027: PUSH
59028: LD_INT 1
59030: PLUS
59031: PPUSH
59032: LD_VAR 0 1
59036: PPUSH
59037: CALL_OW 1
59041: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
59042: LD_ADDR_EXP 55
59046: PUSH
59047: LD_EXP 55
59051: PPUSH
59052: LD_EXP 55
59056: PUSH
59057: LD_INT 1
59059: PLUS
59060: PPUSH
59061: EMPTY
59062: PPUSH
59063: CALL_OW 1
59067: ST_TO_ADDR
// end end ;
59068: GO 58997
59070: POP
59071: POP
// for i := minerMinesList downto 1 do
59072: LD_ADDR_VAR 0 1
59076: PUSH
59077: DOUBLE
59078: LD_EXP 55
59082: INC
59083: ST_TO_ADDR
59084: LD_INT 1
59086: PUSH
59087: FOR_DOWNTO
59088: IFFALSE 59426
// begin if IsLive ( minersList [ i ] ) then
59090: LD_EXP 54
59094: PUSH
59095: LD_VAR 0 1
59099: ARRAY
59100: PPUSH
59101: CALL_OW 300
59105: IFFALSE 59133
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
59107: LD_EXP 54
59111: PUSH
59112: LD_VAR 0 1
59116: ARRAY
59117: PPUSH
59118: LD_EXP 55
59122: PUSH
59123: LD_VAR 0 1
59127: ARRAY
59128: PPUSH
59129: CALL_OW 505
// if not minerMinesList [ i ] then
59133: LD_EXP 55
59137: PUSH
59138: LD_VAR 0 1
59142: ARRAY
59143: NOT
59144: IFFALSE 59148
// continue ;
59146: GO 59087
// for j := minerMinesList [ i ] downto 1 do
59148: LD_ADDR_VAR 0 2
59152: PUSH
59153: DOUBLE
59154: LD_EXP 55
59158: PUSH
59159: LD_VAR 0 1
59163: ARRAY
59164: INC
59165: ST_TO_ADDR
59166: LD_INT 1
59168: PUSH
59169: FOR_DOWNTO
59170: IFFALSE 59422
// begin side := GetSide ( minersList [ i ] ) ;
59172: LD_ADDR_VAR 0 3
59176: PUSH
59177: LD_EXP 54
59181: PUSH
59182: LD_VAR 0 1
59186: ARRAY
59187: PPUSH
59188: CALL_OW 255
59192: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
59193: LD_ADDR_VAR 0 4
59197: PUSH
59198: LD_EXP 55
59202: PUSH
59203: LD_VAR 0 1
59207: ARRAY
59208: PUSH
59209: LD_VAR 0 2
59213: ARRAY
59214: PUSH
59215: LD_INT 1
59217: ARRAY
59218: PPUSH
59219: LD_EXP 55
59223: PUSH
59224: LD_VAR 0 1
59228: ARRAY
59229: PUSH
59230: LD_VAR 0 2
59234: ARRAY
59235: PUSH
59236: LD_INT 2
59238: ARRAY
59239: PPUSH
59240: CALL_OW 428
59244: ST_TO_ADDR
// if not tmp then
59245: LD_VAR 0 4
59249: NOT
59250: IFFALSE 59254
// continue ;
59252: GO 59169
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
59254: LD_VAR 0 4
59258: PUSH
59259: LD_INT 81
59261: PUSH
59262: LD_VAR 0 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PPUSH
59271: CALL_OW 69
59275: IN
59276: IFFALSE 59326
59278: PUSH
59279: LD_EXP 55
59283: PUSH
59284: LD_VAR 0 1
59288: ARRAY
59289: PUSH
59290: LD_VAR 0 2
59294: ARRAY
59295: PUSH
59296: LD_INT 1
59298: ARRAY
59299: PPUSH
59300: LD_EXP 55
59304: PUSH
59305: LD_VAR 0 1
59309: ARRAY
59310: PUSH
59311: LD_VAR 0 2
59315: ARRAY
59316: PUSH
59317: LD_INT 2
59319: ARRAY
59320: PPUSH
59321: CALL_OW 458
59325: AND
59326: IFFALSE 59420
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
59328: LD_EXP 55
59332: PUSH
59333: LD_VAR 0 1
59337: ARRAY
59338: PUSH
59339: LD_VAR 0 2
59343: ARRAY
59344: PUSH
59345: LD_INT 1
59347: ARRAY
59348: PPUSH
59349: LD_EXP 55
59353: PUSH
59354: LD_VAR 0 1
59358: ARRAY
59359: PUSH
59360: LD_VAR 0 2
59364: ARRAY
59365: PUSH
59366: LD_INT 2
59368: ARRAY
59369: PPUSH
59370: LD_VAR 0 3
59374: PPUSH
59375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
59379: LD_ADDR_EXP 55
59383: PUSH
59384: LD_EXP 55
59388: PPUSH
59389: LD_VAR 0 1
59393: PPUSH
59394: LD_EXP 55
59398: PUSH
59399: LD_VAR 0 1
59403: ARRAY
59404: PPUSH
59405: LD_VAR 0 2
59409: PPUSH
59410: CALL_OW 3
59414: PPUSH
59415: CALL_OW 1
59419: ST_TO_ADDR
// end ; end ;
59420: GO 59169
59422: POP
59423: POP
// end ;
59424: GO 59087
59426: POP
59427: POP
// end ;
59428: PPOPN 4
59430: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
59431: LD_INT 0
59433: PPUSH
59434: PPUSH
// result := false ;
59435: LD_ADDR_VAR 0 4
59439: PUSH
59440: LD_INT 0
59442: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
59443: LD_VAR 0 1
59447: PPUSH
59448: CALL_OW 264
59452: PUSH
59453: LD_INT 81
59455: EQUAL
59456: NOT
59457: IFFALSE 59461
// exit ;
59459: GO 59705
// index := GetElementIndex ( minersList , unit ) ;
59461: LD_ADDR_VAR 0 5
59465: PUSH
59466: LD_EXP 54
59470: PPUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL 7800 0 2
59480: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
59481: LD_EXP 55
59485: PUSH
59486: LD_VAR 0 5
59490: ARRAY
59491: PUSH
59492: LD_EXP 56
59496: GREATEREQUAL
59497: IFFALSE 59501
// exit ;
59499: GO 59705
// ComMoveXY ( unit , x , y ) ;
59501: LD_VAR 0 1
59505: PPUSH
59506: LD_VAR 0 2
59510: PPUSH
59511: LD_VAR 0 3
59515: PPUSH
59516: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
59520: LD_INT 35
59522: PPUSH
59523: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
59527: LD_VAR 0 1
59531: PPUSH
59532: LD_VAR 0 2
59536: PPUSH
59537: LD_VAR 0 3
59541: PPUSH
59542: CALL 39846 0 3
59546: NOT
59547: IFFALSE 59560
59549: PUSH
59550: LD_VAR 0 1
59554: PPUSH
59555: CALL_OW 314
59559: AND
59560: IFFALSE 59564
// exit ;
59562: GO 59705
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
59564: LD_VAR 0 2
59568: PPUSH
59569: LD_VAR 0 3
59573: PPUSH
59574: CALL_OW 428
59578: PUSH
59579: LD_VAR 0 1
59583: EQUAL
59584: IFFALSE 59598
59586: PUSH
59587: LD_VAR 0 1
59591: PPUSH
59592: CALL_OW 314
59596: NOT
59597: AND
59598: IFFALSE 59520
// PlaySoundXY ( x , y , PlantMine ) ;
59600: LD_VAR 0 2
59604: PPUSH
59605: LD_VAR 0 3
59609: PPUSH
59610: LD_STRING PlantMine
59612: PPUSH
59613: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
59617: LD_VAR 0 2
59621: PPUSH
59622: LD_VAR 0 3
59626: PPUSH
59627: LD_VAR 0 1
59631: PPUSH
59632: CALL_OW 255
59636: PPUSH
59637: LD_INT 0
59639: PPUSH
59640: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
59644: LD_ADDR_EXP 55
59648: PUSH
59649: LD_EXP 55
59653: PPUSH
59654: LD_VAR 0 5
59658: PUSH
59659: LD_EXP 55
59663: PUSH
59664: LD_VAR 0 5
59668: ARRAY
59669: PUSH
59670: LD_INT 1
59672: PLUS
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PPUSH
59678: LD_VAR 0 2
59682: PUSH
59683: LD_VAR 0 3
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PPUSH
59692: CALL 8017 0 3
59696: ST_TO_ADDR
// result := true ;
59697: LD_ADDR_VAR 0 4
59701: PUSH
59702: LD_INT 1
59704: ST_TO_ADDR
// end ;
59705: LD_VAR 0 4
59709: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
59710: LD_INT 0
59712: PPUSH
59713: PPUSH
59714: PPUSH
// if not unit in minersList then
59715: LD_VAR 0 1
59719: PUSH
59720: LD_EXP 54
59724: IN
59725: NOT
59726: IFFALSE 59730
// exit ;
59728: GO 60124
// index := GetElementIndex ( minersList , unit ) ;
59730: LD_ADDR_VAR 0 6
59734: PUSH
59735: LD_EXP 54
59739: PPUSH
59740: LD_VAR 0 1
59744: PPUSH
59745: CALL 7800 0 2
59749: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
59750: LD_ADDR_VAR 0 5
59754: PUSH
59755: DOUBLE
59756: LD_EXP 55
59760: PUSH
59761: LD_VAR 0 6
59765: ARRAY
59766: INC
59767: ST_TO_ADDR
59768: LD_INT 1
59770: PUSH
59771: FOR_DOWNTO
59772: IFFALSE 59935
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
59774: LD_EXP 55
59778: PUSH
59779: LD_VAR 0 6
59783: ARRAY
59784: PUSH
59785: LD_VAR 0 5
59789: ARRAY
59790: PUSH
59791: LD_INT 1
59793: ARRAY
59794: PUSH
59795: LD_VAR 0 2
59799: EQUAL
59800: IFFALSE 59830
59802: PUSH
59803: LD_EXP 55
59807: PUSH
59808: LD_VAR 0 6
59812: ARRAY
59813: PUSH
59814: LD_VAR 0 5
59818: ARRAY
59819: PUSH
59820: LD_INT 2
59822: ARRAY
59823: PUSH
59824: LD_VAR 0 3
59828: EQUAL
59829: AND
59830: IFFALSE 59933
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
59832: LD_EXP 55
59836: PUSH
59837: LD_VAR 0 6
59841: ARRAY
59842: PUSH
59843: LD_VAR 0 5
59847: ARRAY
59848: PUSH
59849: LD_INT 1
59851: ARRAY
59852: PPUSH
59853: LD_EXP 55
59857: PUSH
59858: LD_VAR 0 6
59862: ARRAY
59863: PUSH
59864: LD_VAR 0 5
59868: ARRAY
59869: PUSH
59870: LD_INT 2
59872: ARRAY
59873: PPUSH
59874: LD_VAR 0 1
59878: PPUSH
59879: CALL_OW 255
59883: PPUSH
59884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
59888: LD_ADDR_EXP 55
59892: PUSH
59893: LD_EXP 55
59897: PPUSH
59898: LD_VAR 0 6
59902: PPUSH
59903: LD_EXP 55
59907: PUSH
59908: LD_VAR 0 6
59912: ARRAY
59913: PPUSH
59914: LD_VAR 0 5
59918: PPUSH
59919: CALL_OW 3
59923: PPUSH
59924: CALL_OW 1
59928: ST_TO_ADDR
// exit ;
59929: POP
59930: POP
59931: GO 60124
// end ; end ;
59933: GO 59771
59935: POP
59936: POP
// for i := minerMinesList [ index ] downto 1 do
59937: LD_ADDR_VAR 0 5
59941: PUSH
59942: DOUBLE
59943: LD_EXP 55
59947: PUSH
59948: LD_VAR 0 6
59952: ARRAY
59953: INC
59954: ST_TO_ADDR
59955: LD_INT 1
59957: PUSH
59958: FOR_DOWNTO
59959: IFFALSE 60122
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
59961: LD_EXP 55
59965: PUSH
59966: LD_VAR 0 6
59970: ARRAY
59971: PUSH
59972: LD_VAR 0 5
59976: ARRAY
59977: PUSH
59978: LD_INT 1
59980: ARRAY
59981: PPUSH
59982: LD_EXP 55
59986: PUSH
59987: LD_VAR 0 6
59991: ARRAY
59992: PUSH
59993: LD_VAR 0 5
59997: ARRAY
59998: PUSH
59999: LD_INT 2
60001: ARRAY
60002: PPUSH
60003: LD_VAR 0 2
60007: PPUSH
60008: LD_VAR 0 3
60012: PPUSH
60013: CALL_OW 298
60017: PUSH
60018: LD_INT 6
60020: LESS
60021: IFFALSE 60120
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
60023: LD_EXP 55
60027: PUSH
60028: LD_VAR 0 6
60032: ARRAY
60033: PUSH
60034: LD_VAR 0 5
60038: ARRAY
60039: PUSH
60040: LD_INT 1
60042: ARRAY
60043: PPUSH
60044: LD_EXP 55
60048: PUSH
60049: LD_VAR 0 6
60053: ARRAY
60054: PUSH
60055: LD_VAR 0 5
60059: ARRAY
60060: PUSH
60061: LD_INT 2
60063: ARRAY
60064: PPUSH
60065: LD_VAR 0 1
60069: PPUSH
60070: CALL_OW 255
60074: PPUSH
60075: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
60079: LD_ADDR_EXP 55
60083: PUSH
60084: LD_EXP 55
60088: PPUSH
60089: LD_VAR 0 6
60093: PPUSH
60094: LD_EXP 55
60098: PUSH
60099: LD_VAR 0 6
60103: ARRAY
60104: PPUSH
60105: LD_VAR 0 5
60109: PPUSH
60110: CALL_OW 3
60114: PPUSH
60115: CALL_OW 1
60119: ST_TO_ADDR
// end ; end ;
60120: GO 59958
60122: POP
60123: POP
// end ;
60124: LD_VAR 0 4
60128: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
60129: LD_INT 0
60131: PPUSH
60132: PPUSH
60133: PPUSH
60134: PPUSH
60135: PPUSH
60136: PPUSH
60137: PPUSH
60138: PPUSH
60139: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
60140: LD_VAR 0 1
60144: PPUSH
60145: CALL_OW 264
60149: PUSH
60150: LD_INT 81
60152: EQUAL
60153: NOT
60154: IFTRUE 60169
60156: PUSH
60157: LD_VAR 0 1
60161: PUSH
60162: LD_EXP 54
60166: IN
60167: NOT
60168: OR
60169: IFFALSE 60173
// exit ;
60171: GO 60499
// index := GetElementIndex ( minersList , unit ) ;
60173: LD_ADDR_VAR 0 6
60177: PUSH
60178: LD_EXP 54
60182: PPUSH
60183: LD_VAR 0 1
60187: PPUSH
60188: CALL 7800 0 2
60192: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
60193: LD_ADDR_VAR 0 8
60197: PUSH
60198: LD_EXP 56
60202: PUSH
60203: LD_EXP 55
60207: PUSH
60208: LD_VAR 0 6
60212: ARRAY
60213: MINUS
60214: ST_TO_ADDR
// if not minesFreeAmount then
60215: LD_VAR 0 8
60219: NOT
60220: IFFALSE 60224
// exit ;
60222: GO 60499
// tmp := [ ] ;
60224: LD_ADDR_VAR 0 7
60228: PUSH
60229: EMPTY
60230: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
60231: LD_ADDR_VAR 0 5
60235: PUSH
60236: DOUBLE
60237: LD_INT 1
60239: DEC
60240: ST_TO_ADDR
60241: LD_VAR 0 8
60245: PUSH
60246: FOR_TO
60247: IFFALSE 60446
// begin _d := rand ( 0 , 5 ) ;
60249: LD_ADDR_VAR 0 11
60253: PUSH
60254: LD_INT 0
60256: PPUSH
60257: LD_INT 5
60259: PPUSH
60260: CALL_OW 12
60264: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
60265: LD_ADDR_VAR 0 12
60269: PUSH
60270: LD_INT 2
60272: PPUSH
60273: LD_INT 6
60275: PPUSH
60276: CALL_OW 12
60280: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
60281: LD_ADDR_VAR 0 9
60285: PUSH
60286: LD_VAR 0 2
60290: PPUSH
60291: LD_VAR 0 11
60295: PPUSH
60296: LD_VAR 0 12
60300: PPUSH
60301: CALL_OW 272
60305: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
60306: LD_ADDR_VAR 0 10
60310: PUSH
60311: LD_VAR 0 3
60315: PPUSH
60316: LD_VAR 0 11
60320: PPUSH
60321: LD_VAR 0 12
60325: PPUSH
60326: CALL_OW 273
60330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
60331: LD_VAR 0 9
60335: PPUSH
60336: LD_VAR 0 10
60340: PPUSH
60341: CALL_OW 488
60345: IFFALSE 60369
60347: PUSH
60348: LD_VAR 0 9
60352: PUSH
60353: LD_VAR 0 10
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_VAR 0 7
60366: IN
60367: NOT
60368: AND
60369: IFFALSE 60388
60371: PUSH
60372: LD_VAR 0 9
60376: PPUSH
60377: LD_VAR 0 10
60381: PPUSH
60382: CALL_OW 458
60386: NOT
60387: AND
60388: IFFALSE 60430
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
60390: LD_ADDR_VAR 0 7
60394: PUSH
60395: LD_VAR 0 7
60399: PPUSH
60400: LD_VAR 0 7
60404: PUSH
60405: LD_INT 1
60407: PLUS
60408: PPUSH
60409: LD_VAR 0 9
60413: PUSH
60414: LD_VAR 0 10
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PPUSH
60423: CALL_OW 1
60427: ST_TO_ADDR
60428: GO 60444
// i := i - 1 ;
60430: LD_ADDR_VAR 0 5
60434: PUSH
60435: LD_VAR 0 5
60439: PUSH
60440: LD_INT 1
60442: MINUS
60443: ST_TO_ADDR
// end ;
60444: GO 60246
60446: POP
60447: POP
// for i in tmp do
60448: LD_ADDR_VAR 0 5
60452: PUSH
60453: LD_VAR 0 7
60457: PUSH
60458: FOR_IN
60459: IFFALSE 60497
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
60461: LD_VAR 0 1
60465: PPUSH
60466: LD_VAR 0 5
60470: PUSH
60471: LD_INT 1
60473: ARRAY
60474: PPUSH
60475: LD_VAR 0 5
60479: PUSH
60480: LD_INT 2
60482: ARRAY
60483: PPUSH
60484: CALL 59431 0 3
60488: NOT
60489: IFFALSE 60495
// exit ;
60491: POP
60492: POP
60493: GO 60499
60495: GO 60458
60497: POP
60498: POP
// end ;
60499: LD_VAR 0 4
60503: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
60504: LD_INT 0
60506: PPUSH
60507: PPUSH
60508: PPUSH
60509: PPUSH
60510: PPUSH
60511: PPUSH
60512: PPUSH
60513: PPUSH
60514: PPUSH
// if GetClass ( unit ) <> class_sniper then
60515: LD_VAR 0 1
60519: PPUSH
60520: CALL_OW 257
60524: PUSH
60525: LD_INT 5
60527: NONEQUAL
60528: IFFALSE 60532
// exit ;
60530: GO 61002
// dist := 8 ;
60532: LD_ADDR_VAR 0 5
60536: PUSH
60537: LD_INT 8
60539: ST_TO_ADDR
// viewRange := 12 ;
60540: LD_ADDR_VAR 0 8
60544: PUSH
60545: LD_INT 12
60547: ST_TO_ADDR
// side := GetSide ( unit ) ;
60548: LD_ADDR_VAR 0 6
60552: PUSH
60553: LD_VAR 0 1
60557: PPUSH
60558: CALL_OW 255
60562: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
60563: LD_INT 61
60565: PPUSH
60566: LD_VAR 0 6
60570: PPUSH
60571: CALL_OW 321
60575: PUSH
60576: LD_INT 2
60578: EQUAL
60579: IFFALSE 60589
// viewRange := 16 ;
60581: LD_ADDR_VAR 0 8
60585: PUSH
60586: LD_INT 16
60588: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
60589: LD_VAR 0 1
60593: PPUSH
60594: LD_VAR 0 2
60598: PPUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: CALL_OW 297
60608: PUSH
60609: LD_VAR 0 5
60613: GREATER
60614: IFFALSE 60693
// begin ComMoveXY ( unit , x , y ) ;
60616: LD_VAR 0 1
60620: PPUSH
60621: LD_VAR 0 2
60625: PPUSH
60626: LD_VAR 0 3
60630: PPUSH
60631: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
60635: LD_INT 35
60637: PPUSH
60638: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
60642: LD_VAR 0 1
60646: PPUSH
60647: LD_VAR 0 2
60651: PPUSH
60652: LD_VAR 0 3
60656: PPUSH
60657: CALL 39846 0 3
60661: NOT
60662: IFFALSE 60666
// exit ;
60664: GO 61002
// until GetDistUnitXY ( unit , x , y ) < dist ;
60666: LD_VAR 0 1
60670: PPUSH
60671: LD_VAR 0 2
60675: PPUSH
60676: LD_VAR 0 3
60680: PPUSH
60681: CALL_OW 297
60685: PUSH
60686: LD_VAR 0 5
60690: LESS
60691: IFFALSE 60635
// end ; ComTurnXY ( unit , x , y ) ;
60693: LD_VAR 0 1
60697: PPUSH
60698: LD_VAR 0 2
60702: PPUSH
60703: LD_VAR 0 3
60707: PPUSH
60708: CALL_OW 118
// repeat if Multiplayer then
60712: LD_OWVAR 4
60716: IFFALSE 60727
// wait ( 35 ) else
60718: LD_INT 35
60720: PPUSH
60721: CALL_OW 67
60725: GO 60734
// wait ( 5 ) ;
60727: LD_INT 5
60729: PPUSH
60730: CALL_OW 67
// _d := GetDir ( unit ) ;
60734: LD_ADDR_VAR 0 11
60738: PUSH
60739: LD_VAR 0 1
60743: PPUSH
60744: CALL_OW 254
60748: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
60749: LD_ADDR_VAR 0 7
60753: PUSH
60754: LD_VAR 0 1
60758: PPUSH
60759: CALL_OW 250
60763: PPUSH
60764: LD_VAR 0 1
60768: PPUSH
60769: CALL_OW 251
60773: PPUSH
60774: LD_VAR 0 2
60778: PPUSH
60779: LD_VAR 0 3
60783: PPUSH
60784: CALL 42482 0 4
60788: ST_TO_ADDR
// until dir = _d ;
60789: LD_VAR 0 7
60793: PUSH
60794: LD_VAR 0 11
60798: EQUAL
60799: IFFALSE 60712
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
60801: LD_ADDR_VAR 0 9
60805: PUSH
60806: LD_VAR 0 1
60810: PPUSH
60811: CALL_OW 250
60815: PPUSH
60816: LD_VAR 0 7
60820: PPUSH
60821: LD_VAR 0 5
60825: PPUSH
60826: CALL_OW 272
60830: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
60831: LD_ADDR_VAR 0 10
60835: PUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: CALL_OW 251
60845: PPUSH
60846: LD_VAR 0 7
60850: PPUSH
60851: LD_VAR 0 5
60855: PPUSH
60856: CALL_OW 273
60860: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60861: LD_VAR 0 9
60865: PPUSH
60866: LD_VAR 0 10
60870: PPUSH
60871: CALL_OW 488
60875: NOT
60876: IFFALSE 60880
// exit ;
60878: GO 61002
// ComAnimCustom ( unit , 1 ) ;
60880: LD_VAR 0 1
60884: PPUSH
60885: LD_INT 1
60887: PPUSH
60888: CALL_OW 592
// p := 0 ;
60892: LD_ADDR_VAR 0 12
60896: PUSH
60897: LD_INT 0
60899: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
60900: LD_VAR 0 9
60904: PPUSH
60905: LD_VAR 0 10
60909: PPUSH
60910: LD_VAR 0 6
60914: PPUSH
60915: LD_VAR 0 8
60919: PPUSH
60920: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
60924: LD_INT 35
60926: PPUSH
60927: CALL_OW 67
// p := Inc ( p ) ;
60931: LD_ADDR_VAR 0 12
60935: PUSH
60936: LD_VAR 0 12
60940: PPUSH
60941: CALL 42438 0 1
60945: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
60946: LD_VAR 0 12
60950: PUSH
60951: LD_INT 3
60953: EQUAL
60954: IFTRUE 60968
60956: PUSH
60957: LD_VAR 0 1
60961: PPUSH
60962: CALL_OW 302
60966: NOT
60967: OR
60968: IFTRUE 60981
60970: PUSH
60971: LD_VAR 0 1
60975: PPUSH
60976: CALL_OW 301
60980: OR
60981: IFFALSE 60924
// RemoveSeeing ( _x , _y , side ) ;
60983: LD_VAR 0 9
60987: PPUSH
60988: LD_VAR 0 10
60992: PPUSH
60993: LD_VAR 0 6
60997: PPUSH
60998: CALL_OW 331
// end ; end_of_file
61002: LD_VAR 0 4
61006: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin end ;
61007: PPOPN 6
61009: END
// on MapStart ( p ) do begin if mpGameType = GameTypeCoop then
61010: LD_EXP 1
61014: PUSH
61015: LD_INT 4
61017: EQUAL
61018: IFFALSE 61054
// begin ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61020: LD_STRING setGameDifficulty(
61022: PUSH
61023: LD_OWVAR 67
61027: STR
61028: PUSH
61029: LD_STRING )
61031: STR
61032: PPUSH
61033: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61037: LD_STRING displayDifficulty(
61039: PUSH
61040: LD_OWVAR 67
61044: STR
61045: PUSH
61046: LD_STRING )
61048: STR
61049: PPUSH
61050: CALL_OW 559
// end ; SOS_MapStart ( ) ;
61054: CALL 61083 0 0
// end ; end_of_file
61058: PPOPN 1
61060: END
// every 0 0$1 do
61061: GO 61063
61063: DISABLE
// begin enable ;
61064: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61065: LD_STRING updateTimer(
61067: PUSH
61068: LD_OWVAR 1
61072: STR
61073: PUSH
61074: LD_STRING );
61076: STR
61077: PPUSH
61078: CALL_OW 559
// end ;
61082: END
// export function SOS_MapStart ( ) ; begin
61083: LD_INT 0
61085: PPUSH
// UpdateFactoryWaypoints ( ) ;
61086: CALL 62017 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61090: CALL 62269 0 0
// ParseMultiDataToLua ( ) ;
61094: CALL 62416 0 0
// ToLua ( setSpecLogoNumber( & 2 & , & 1 & ) ) ;
61098: LD_STRING setSpecLogoNumber(
61100: PUSH
61101: LD_INT 2
61103: STR
61104: PUSH
61105: LD_STRING ,
61107: STR
61108: PUSH
61109: LD_INT 1
61111: STR
61112: PUSH
61113: LD_STRING )
61115: STR
61116: PPUSH
61117: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 3 & , & 2 & ) ) ;
61121: LD_STRING setSpecLogoNumber(
61123: PUSH
61124: LD_INT 3
61126: STR
61127: PUSH
61128: LD_STRING ,
61130: STR
61131: PUSH
61132: LD_INT 2
61134: STR
61135: PUSH
61136: LD_STRING )
61138: STR
61139: PPUSH
61140: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 4 & , & 3 & ) ) ;
61144: LD_STRING setSpecLogoNumber(
61146: PUSH
61147: LD_INT 4
61149: STR
61150: PUSH
61151: LD_STRING ,
61153: STR
61154: PUSH
61155: LD_INT 3
61157: STR
61158: PUSH
61159: LD_STRING )
61161: STR
61162: PPUSH
61163: CALL_OW 559
// ToLua ( setSpecLogoNumber( & 5 & , & 4 & ) ) ;
61167: LD_STRING setSpecLogoNumber(
61169: PUSH
61170: LD_INT 5
61172: STR
61173: PUSH
61174: LD_STRING ,
61176: STR
61177: PUSH
61178: LD_INT 4
61180: STR
61181: PUSH
61182: LD_STRING )
61184: STR
61185: PPUSH
61186: CALL_OW 559
// end ;
61190: LD_VAR 0 1
61194: RET
// export function UpdateSpectatorBar ; var i , j , crates , oil , sib , people , base , bases ; begin
61195: LD_INT 0
61197: PPUSH
61198: PPUSH
61199: PPUSH
61200: PPUSH
61201: PPUSH
61202: PPUSH
61203: PPUSH
61204: PPUSH
61205: PPUSH
// for i := 1 to 8 do
61206: LD_ADDR_VAR 0 2
61210: PUSH
61211: DOUBLE
61212: LD_INT 1
61214: DEC
61215: ST_TO_ADDR
61216: LD_INT 8
61218: PUSH
61219: FOR_TO
61220: IFFALSE 61605
// begin if mpSidePositions [ i ] then
61222: LD_EXP 5
61226: PUSH
61227: LD_VAR 0 2
61231: ARRAY
61232: IFFALSE 61603
// begin people := Count ( FilterAllUnits ( [ [ f_side , i ] , [ f_type , unit_human ] ] ) ) ;
61234: LD_ADDR_VAR 0 7
61238: PUSH
61239: LD_INT 22
61241: PUSH
61242: LD_VAR 0 2
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 21
61253: PUSH
61254: LD_INT 1
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PPUSH
61265: CALL_OW 69
61269: PPUSH
61270: CALL 5133 0 1
61274: ST_TO_ADDR
// bases := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61275: LD_ADDR_VAR 0 9
61279: PUSH
61280: LD_INT 22
61282: PUSH
61283: LD_VAR 0 2
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: LD_INT 30
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 30
61307: PUSH
61308: LD_INT 1
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: LIST
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PPUSH
61324: CALL_OW 69
61328: ST_TO_ADDR
// crates := 0 ;
61329: LD_ADDR_VAR 0 4
61333: PUSH
61334: LD_INT 0
61336: ST_TO_ADDR
// oil := 0 ;
61337: LD_ADDR_VAR 0 5
61341: PUSH
61342: LD_INT 0
61344: ST_TO_ADDR
// sib := 0 ;
61345: LD_ADDR_VAR 0 6
61349: PUSH
61350: LD_INT 0
61352: ST_TO_ADDR
// if bases then
61353: LD_VAR 0 9
61357: IFFALSE 61463
// begin for j in bases do
61359: LD_ADDR_VAR 0 3
61363: PUSH
61364: LD_VAR 0 9
61368: PUSH
61369: FOR_IN
61370: IFFALSE 61461
// begin base := GetBase ( j ) ;
61372: LD_ADDR_VAR 0 8
61376: PUSH
61377: LD_VAR 0 3
61381: PPUSH
61382: CALL_OW 274
61386: ST_TO_ADDR
// crates := crates + GetResourceType ( base , mat_cans ) ;
61387: LD_ADDR_VAR 0 4
61391: PUSH
61392: LD_VAR 0 4
61396: PUSH
61397: LD_VAR 0 8
61401: PPUSH
61402: LD_INT 1
61404: PPUSH
61405: CALL_OW 275
61409: PLUS
61410: ST_TO_ADDR
// oil := oil + GetResourceType ( base , mat_oil ) ;
61411: LD_ADDR_VAR 0 5
61415: PUSH
61416: LD_VAR 0 5
61420: PUSH
61421: LD_VAR 0 8
61425: PPUSH
61426: LD_INT 2
61428: PPUSH
61429: CALL_OW 275
61433: PLUS
61434: ST_TO_ADDR
// sib := sib + GetResourceType ( base , mat_siberit ) ;
61435: LD_ADDR_VAR 0 6
61439: PUSH
61440: LD_VAR 0 6
61444: PUSH
61445: LD_VAR 0 8
61449: PPUSH
61450: LD_INT 3
61452: PPUSH
61453: CALL_OW 275
61457: PLUS
61458: ST_TO_ADDR
// end ;
61459: GO 61369
61461: POP
61462: POP
// end ; ToLua ( setSpecText( & i & , & 2 & , & crates & ) ) ;
61463: LD_STRING setSpecText(
61465: PUSH
61466: LD_VAR 0 2
61470: STR
61471: PUSH
61472: LD_STRING ,
61474: STR
61475: PUSH
61476: LD_INT 2
61478: STR
61479: PUSH
61480: LD_STRING ,
61482: STR
61483: PUSH
61484: LD_VAR 0 4
61488: STR
61489: PUSH
61490: LD_STRING )
61492: STR
61493: PPUSH
61494: CALL_OW 559
// ToLua ( setSpecText( & i & , & 3 & , & oil & ) ) ;
61498: LD_STRING setSpecText(
61500: PUSH
61501: LD_VAR 0 2
61505: STR
61506: PUSH
61507: LD_STRING ,
61509: STR
61510: PUSH
61511: LD_INT 3
61513: STR
61514: PUSH
61515: LD_STRING ,
61517: STR
61518: PUSH
61519: LD_VAR 0 5
61523: STR
61524: PUSH
61525: LD_STRING )
61527: STR
61528: PPUSH
61529: CALL_OW 559
// ToLua ( setSpecText( & i & , & 4 & , & sib & ) ) ;
61533: LD_STRING setSpecText(
61535: PUSH
61536: LD_VAR 0 2
61540: STR
61541: PUSH
61542: LD_STRING ,
61544: STR
61545: PUSH
61546: LD_INT 4
61548: STR
61549: PUSH
61550: LD_STRING ,
61552: STR
61553: PUSH
61554: LD_VAR 0 6
61558: STR
61559: PUSH
61560: LD_STRING )
61562: STR
61563: PPUSH
61564: CALL_OW 559
// ToLua ( setSpecText( & i & , & 5 & , & people & ) ) ;
61568: LD_STRING setSpecText(
61570: PUSH
61571: LD_VAR 0 2
61575: STR
61576: PUSH
61577: LD_STRING ,
61579: STR
61580: PUSH
61581: LD_INT 5
61583: STR
61584: PUSH
61585: LD_STRING ,
61587: STR
61588: PUSH
61589: LD_VAR 0 7
61593: STR
61594: PUSH
61595: LD_STRING )
61597: STR
61598: PPUSH
61599: CALL_OW 559
// end ; end ;
61603: GO 61219
61605: POP
61606: POP
// end ;
61607: LD_VAR 0 1
61611: RET
// every 20 + 0 0$5 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) do
61612: LD_INT 2
61614: PUSH
61615: LD_INT 30
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 30
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: LIST
61639: PPUSH
61640: CALL_OW 69
61644: IFFALSE 61654
61646: GO 61648
61648: DISABLE
// begin enable ;
61649: ENABLE
// UpdateSpectatorBar ;
61650: CALL 61195 0 0
// end ;
61654: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61655: LD_INT 0
61657: PPUSH
// end ;
61658: LD_VAR 0 12
61662: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
61663: LD_INT 0
61665: PPUSH
61666: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
61667: LD_VAR 0 1
61671: NOT
61672: IFTRUE 61691
61674: PUSH
61675: LD_VAR 0 2
61679: PPUSH
61680: LD_VAR 0 3
61684: PPUSH
61685: CALL_OW 488
61689: NOT
61690: OR
61691: IFTRUE 61726
61693: PUSH
61694: LD_VAR 0 1
61698: PPUSH
61699: CALL_OW 266
61703: PUSH
61704: LD_INT 3
61706: NONEQUAL
61707: IFFALSE 61725
61709: PUSH
61710: LD_VAR 0 1
61714: PPUSH
61715: CALL_OW 247
61719: PUSH
61720: LD_INT 1
61722: EQUAL
61723: NOT
61724: AND
61725: OR
61726: IFFALSE 61730
// exit ;
61728: GO 62012
// if GetType ( factory ) = unit_human then
61730: LD_VAR 0 1
61734: PPUSH
61735: CALL_OW 247
61739: PUSH
61740: LD_INT 1
61742: EQUAL
61743: IFFALSE 61760
// factory := IsInUnit ( factory ) ;
61745: LD_ADDR_VAR 0 1
61749: PUSH
61750: LD_VAR 0 1
61754: PPUSH
61755: CALL_OW 310
61759: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
61760: LD_VAR 0 1
61764: PPUSH
61765: CALL_OW 266
61769: PUSH
61770: LD_INT 3
61772: NONEQUAL
61773: IFFALSE 61777
// exit ;
61775: GO 62012
// for i := 1 to Count ( factoryWaypoints ) do
61777: LD_ADDR_VAR 0 5
61781: PUSH
61782: DOUBLE
61783: LD_INT 1
61785: DEC
61786: ST_TO_ADDR
61787: LD_EXP 57
61791: PPUSH
61792: CALL 5133 0 1
61796: PUSH
61797: FOR_TO
61798: IFFALSE 61960
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
61800: LD_VAR 0 2
61804: PPUSH
61805: LD_VAR 0 3
61809: PPUSH
61810: CALL_OW 428
61814: PUSH
61815: LD_EXP 57
61819: PUSH
61820: LD_VAR 0 5
61824: ARRAY
61825: PUSH
61826: LD_INT 2
61828: ARRAY
61829: EQUAL
61830: IFFALSE 61862
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61832: LD_ADDR_EXP 57
61836: PUSH
61837: LD_EXP 57
61841: PPUSH
61842: LD_VAR 0 5
61846: PPUSH
61847: CALL_OW 3
61851: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61852: CALL 62017 0 0
// exit ;
61856: POP
61857: POP
61858: GO 62012
// end else
61860: GO 61958
// if factory = factoryWaypoints [ i ] [ 2 ] then
61862: LD_VAR 0 1
61866: PUSH
61867: LD_EXP 57
61871: PUSH
61872: LD_VAR 0 5
61876: ARRAY
61877: PUSH
61878: LD_INT 2
61880: ARRAY
61881: EQUAL
61882: IFFALSE 61958
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
61884: LD_ADDR_EXP 57
61888: PUSH
61889: LD_EXP 57
61893: PPUSH
61894: LD_VAR 0 5
61898: PPUSH
61899: CALL_OW 3
61903: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61904: LD_ADDR_EXP 57
61908: PUSH
61909: LD_EXP 57
61913: PPUSH
61914: LD_VAR 0 1
61918: PPUSH
61919: CALL_OW 255
61923: PUSH
61924: LD_VAR 0 1
61928: PUSH
61929: LD_VAR 0 2
61933: PUSH
61934: LD_VAR 0 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: PPUSH
61945: CALL 41065 0 2
61949: ST_TO_ADDR
// UpdateFactoryWaypoints ;
61950: CALL 62017 0 0
// exit ;
61954: POP
61955: POP
61956: GO 62012
// end ; end ;
61958: GO 61797
61960: POP
61961: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
61962: LD_ADDR_EXP 57
61966: PUSH
61967: LD_EXP 57
61971: PPUSH
61972: LD_VAR 0 1
61976: PPUSH
61977: CALL_OW 255
61981: PUSH
61982: LD_VAR 0 1
61986: PUSH
61987: LD_VAR 0 2
61991: PUSH
61992: LD_VAR 0 3
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: PPUSH
62003: CALL 41065 0 2
62007: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62008: CALL 62017 0 0
// end ;
62012: LD_VAR 0 4
62016: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62017: LD_INT 0
62019: PPUSH
62020: PPUSH
62021: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62022: LD_STRING resetFactoryWaypoint();
62024: PPUSH
62025: CALL_OW 559
// if factoryWaypoints then
62029: LD_EXP 57
62033: IFFALSE 62154
// begin list := factoryWaypoints ;
62035: LD_ADDR_VAR 0 3
62039: PUSH
62040: LD_EXP 57
62044: ST_TO_ADDR
// for i := 1 to list do
62045: LD_ADDR_VAR 0 2
62049: PUSH
62050: DOUBLE
62051: LD_INT 1
62053: DEC
62054: ST_TO_ADDR
62055: LD_VAR 0 3
62059: PUSH
62060: FOR_TO
62061: IFFALSE 62152
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62063: LD_STRING setFactoryWaypointXY(
62065: PUSH
62066: LD_VAR 0 3
62070: PUSH
62071: LD_VAR 0 2
62075: ARRAY
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: STR
62081: PUSH
62082: LD_STRING ,
62084: STR
62085: PUSH
62086: LD_VAR 0 3
62090: PUSH
62091: LD_VAR 0 2
62095: ARRAY
62096: PUSH
62097: LD_INT 2
62099: ARRAY
62100: STR
62101: PUSH
62102: LD_STRING ,
62104: STR
62105: PUSH
62106: LD_VAR 0 3
62110: PUSH
62111: LD_VAR 0 2
62115: ARRAY
62116: PUSH
62117: LD_INT 3
62119: ARRAY
62120: STR
62121: PUSH
62122: LD_STRING ,
62124: STR
62125: PUSH
62126: LD_VAR 0 3
62130: PUSH
62131: LD_VAR 0 2
62135: ARRAY
62136: PUSH
62137: LD_INT 4
62139: ARRAY
62140: STR
62141: PUSH
62142: LD_STRING )
62144: STR
62145: PPUSH
62146: CALL_OW 559
62150: GO 62060
62152: POP
62153: POP
// end ; end ;
62154: LD_VAR 0 1
62158: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62159: LD_INT 0
62161: PPUSH
// if HexInfo ( x , y ) = warehouse then
62162: LD_VAR 0 2
62166: PPUSH
62167: LD_VAR 0 3
62171: PPUSH
62172: CALL_OW 428
62176: PUSH
62177: LD_VAR 0 1
62181: EQUAL
62182: IFFALSE 62209
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62184: LD_ADDR_EXP 59
62188: PUSH
62189: LD_EXP 59
62193: PPUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: LD_INT 0
62201: PPUSH
62202: CALL_OW 1
62206: ST_TO_ADDR
62207: GO 62260
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62209: LD_ADDR_EXP 59
62213: PUSH
62214: LD_EXP 59
62218: PPUSH
62219: LD_VAR 0 1
62223: PPUSH
62224: LD_VAR 0 1
62228: PPUSH
62229: CALL_OW 255
62233: PUSH
62234: LD_VAR 0 1
62238: PUSH
62239: LD_VAR 0 2
62243: PUSH
62244: LD_VAR 0 3
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: PPUSH
62255: CALL_OW 1
62259: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62260: CALL 62269 0 0
// end ;
62264: LD_VAR 0 4
62268: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62269: LD_INT 0
62271: PPUSH
62272: PPUSH
62273: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62274: LD_STRING resetWarehouseGatheringPoints();
62276: PPUSH
62277: CALL_OW 559
// if warehouseGatheringPoints then
62281: LD_EXP 59
62285: IFFALSE 62411
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62287: LD_ADDR_VAR 0 3
62291: PUSH
62292: LD_EXP 59
62296: PPUSH
62297: CALL 44999 0 1
62301: ST_TO_ADDR
// for i := 1 to list do
62302: LD_ADDR_VAR 0 2
62306: PUSH
62307: DOUBLE
62308: LD_INT 1
62310: DEC
62311: ST_TO_ADDR
62312: LD_VAR 0 3
62316: PUSH
62317: FOR_TO
62318: IFFALSE 62409
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62320: LD_STRING setWarehouseGatheringPointXY(
62322: PUSH
62323: LD_VAR 0 3
62327: PUSH
62328: LD_VAR 0 2
62332: ARRAY
62333: PUSH
62334: LD_INT 1
62336: ARRAY
62337: STR
62338: PUSH
62339: LD_STRING ,
62341: STR
62342: PUSH
62343: LD_VAR 0 3
62347: PUSH
62348: LD_VAR 0 2
62352: ARRAY
62353: PUSH
62354: LD_INT 2
62356: ARRAY
62357: STR
62358: PUSH
62359: LD_STRING ,
62361: STR
62362: PUSH
62363: LD_VAR 0 3
62367: PUSH
62368: LD_VAR 0 2
62372: ARRAY
62373: PUSH
62374: LD_INT 3
62376: ARRAY
62377: STR
62378: PUSH
62379: LD_STRING ,
62381: STR
62382: PUSH
62383: LD_VAR 0 3
62387: PUSH
62388: LD_VAR 0 2
62392: ARRAY
62393: PUSH
62394: LD_INT 4
62396: ARRAY
62397: STR
62398: PUSH
62399: LD_STRING )
62401: STR
62402: PPUSH
62403: CALL_OW 559
62407: GO 62317
62409: POP
62410: POP
// end ; end ;
62411: LD_VAR 0 1
62415: RET
// function ParseMultiDataToLua ( ) ; var i ; begin
62416: LD_INT 0
62418: PPUSH
62419: PPUSH
// if not mpSidePositions then
62420: LD_EXP 5
62424: NOT
62425: IFFALSE 62429
// exit ;
62427: GO 62500
// result :=  ;
62429: LD_ADDR_VAR 0 1
62433: PUSH
62434: LD_STRING 
62436: ST_TO_ADDR
// for i := 1 to 8 do
62437: LD_ADDR_VAR 0 2
62441: PUSH
62442: DOUBLE
62443: LD_INT 1
62445: DEC
62446: ST_TO_ADDR
62447: LD_INT 8
62449: PUSH
62450: FOR_TO
62451: IFFALSE 62481
// begin result := result & mpSidePositions [ i ] & ; ;
62453: LD_ADDR_VAR 0 1
62457: PUSH
62458: LD_VAR 0 1
62462: PUSH
62463: LD_EXP 5
62467: PUSH
62468: LD_VAR 0 2
62472: ARRAY
62473: STR
62474: PUSH
62475: LD_STRING ;
62477: STR
62478: ST_TO_ADDR
// end ;
62479: GO 62450
62481: POP
62482: POP
// ToLua ( setMultiplayerRealPosition(" & result & "); ) ;
62483: LD_STRING setMultiplayerRealPosition("
62485: PUSH
62486: LD_VAR 0 1
62490: STR
62491: PUSH
62492: LD_STRING ");
62494: STR
62495: PPUSH
62496: CALL_OW 559
// end ;
62500: LD_VAR 0 1
62504: RET
