Export multi_gametype, multi_sides, multi_side_teams, multi_nations,
       multi_teams, multi_spec, multi_pos_area, multi_allowed_nations,
       multi_bots, multi_teamgame, multi_custom_commanders,
       multi_settings, multi_settings_counter, multi_pep_amount,
       multi_skill_level, multi_crates_spawn, multi_vehicles,
       multi_commanders, multi_loosers, multi_players_amount,
       multi_points_to_victory, multi_buildings;
Export Function InitMultiplayer;
var i, j, x, tmp;
begin
multi_settings_counter := 5; // MultiDesc<gametype>.wri
multi_settings := [];

if Multiplayer then
   begin
   your_side        := mp_player_side;
   multi_gametype   := mp_game_type;
   multi_sides      := mp_sides_positions;
   multi_side_teams := mp_sides_teams;
   multi_nations    := mp_sides_nations;
   multi_teams      := [ [] ];

   for i in mp_teams do
       if i then
          multi_teams := Replace(multi_teams, 1, multi_teams[1] union i);

   for i := 1 to multi_settings_counter do
       multi_settings := Replace(multi_settings, multi_settings + 1, GetMultiplayerSetting(i) + 1);
   end
else
   begin
   your_side        := 3; // allowed values: 1-8
   multi_gametype   := 1; // allowed values: 0, 1
   multi_sides      := [0, 0, 2, 0, 0, 0, 1, 0]; // allowed values: 0-8
   multi_side_teams := [0, 0, 1, 0, 0, 0, 1, 0]; // allowed values: 0, 1
   multi_nations    := [0, 0, 3, 0, 0, 0, 3, 0]; // allowed values: 0, 1, 2, 3
   multi_teams      := [[3, 7]];
   multi_settings   := [2, 1, 4, 3, 2, 4]; //
   end;

multi_spec := [0, 0, 0, 0, 0, 0, 0, 0];
multi_bots := [0, 0, 0, 0, 0, 0, 0, 0];
multi_loosers := [0, 0, 0, 0, 0, 0, 0, 0];
multi_teamgame := true;
multi_allowed_nations := [3];
multi_custom_commanders := true;
multi_commanders := [];
multi_players_amount := 0;
multi_pos_area := [ [player1SpawnArea, player1SpawnArea], [player2SpawnArea, player2VehSpawnArea] ];
multi_buildings := [ [
                        [b_depot, [108, 110, 2]],
                        [b_bunker, [117, 101, 3], ru_gun],
                        [b_bunker, [124, 107, 3], ru_gatling_gun],
                        [b_bunker, [94, 114, 1], ru_gun],
                        [b_bunker, [110, 94, 4], ru_gun],
                        [b_oil_mine, [126, 124, 5]],
                        [b_oil_power, [101, 115, 0]],
                        [b_oil_power, [125, 121,3]],
                        [b_factory, [109, 126, 0]],
                        [b_ext_gun, [112, 129, 5]]
                     ],
                     [
                        [b_breastwork, [95, 36, 4]],
                        [b_breastwork, [116, 66, 3]],
                        [b_breastwork, [157, 159, 4]],
                        [b_breastwork, [75, 88, 3]],
                        [b_breastwork, [63, 82, 3]],
                        [b_breastwork, [106, 147, 4]],
                        [b_workshop, [124, 164, 5]],
                        [b_armoury, [129, 159, 4]],
                     ],
                     [], [], [], [], [], []
                   ];
multi_vehicles := [ [],
                    [
                        [ru_medium_wheeled, engine_combustion, control_manual, ru_heavy_machine_gun],
                        [ru_medium_tracked, engine_combustion, control_manual, ru_cargo_bay],
                        [ru_medium_tracked, engine_combustion, control_manual, [ru_gun, ru_gatling_gun, ru_heavy_machine_gun][Difficulty]],
                        [ru_medium_tracked, engine_combustion, control_manual, [ru_gun, ru_gatling_gun, ru_heavy_machine_gun][Difficulty]],
                        [ru_medium_tracked, engine_combustion, control_manual, [ru_gun, ru_gatling_gun, ru_heavy_machine_gun][Difficulty]]
                    ],
                    [], [], [], [], [], []
                  ];


// init arrays
for i := 1 to 8 do
    begin
    // check spectators
    if Multiplayer_GetPlayerIsSpec(i) then
       begin
       multi_spec := Replace(multi_spec, i, 1);
       multi_nations := Replace(multi_nations, i, 0);
       multi_sides := Replace(multi_sides, i, 0);

       for j = 1 to multi_teams do
           begin
           if i in multi_teams[j] then
              begin
              tmp := multi_teams[j] diff i;
              multi_teams := Replace(multi_teams, j, tmp);
              end;
           end;
       end;

    // check allowed nations
    if multi_nations[i] and not multi_nations[i] in multi_allowed_nations then
       multi_nations := Replace(multi_nations, i, multi_allowed_nations[rand(1, multi_allowed_nations)]);

    // empty slots for cpu players
    if not multi_nations[i] and not multi_sides[i] and not multi_spec[i] then
       multi_bots := Replace(multi_bots, i, 1);

    if multi_sides[i] then
       multi_players_amount := multi_players_amount + 1;
    end;

// share vision
for i in multi_teams do
    begin
    for j = 2 to i do
        begin
        ChangeSideFog(i[j], i[1]);

        for x = 1 to j-1 do
            SetAttitude(i[j], i[x], att_friend, true);
        end;
    end;

// [3, 2, 4, 4, 3, 1]; // Difficulty, Pep.amount, Skill level, Crates, Oil, Support
// set difficulty
Difficulty := [1, 2, 3][multi_settings[1]];

// others settings
multi_pep_amount := [9, 12, 15][multi_settings[2]];
multi_skill_level := [1, 3, 4, 6][multi_settings[3]];
multi_points_to_victory := [3500, 5000, 7500, 10000, 15000][multi_settings[4]];
multi_crates_spawn := [ [1000, 0$36], [2000, 0$30], [3000, 0$24], [4000, 0$18] ][multi_settings[5]];
End;

Export Function Multiplayer_SetBotSide(preferSide);
var i;
begin
if not multi_sides[preferSide] then
   begin
   result := preferSide;
   exit;
   end;

for i := 1 to 8 do
    if not multi_sides[i] then
       begin
       result := i;
       exit;
       end;
End;

Export Function Multiplayer_PrepareCustomCommanders(side, num);
begin
uc_side := side;
uc_nation := nation_russian;

hc_importance := 100;

if num = 1 then
   begin
   PrepareSoldier(sex_male, multi_skill_level + 1);
   hc_gallery := 'ru';
   hc_face_number := 13;
   hc_name := 'Kuzmov';
   hc_attr := [11, 11];

   result := CreateHuman;
   end;

if num = 2 then
   begin
   PrepareMechanic(sex_male, multi_skill_level + 2);
   hc_gallery := 'ru';
   hc_face_number := 1;
   hc_name := 'Burlak';
   hc_attr := [10, 11];

   result := CreateHuman;
   end;
End;

Export Function Multiplayer_PreparePlayers();
var i, j, b, cl, un, veh, vehicles, tmp, people_amount;
begin
for i := 1 to 8 do
    begin
    if not multi_sides[i] then
       continue;

    // vehicles
    vehicles := multi_vehicles[multi_sides[i]];

    // buildings
    if multi_buildings[multi_sides[i]] then
       begin
       uc_side := i;
       uc_nation := multi_nations[i];

       for j in multi_buildings[multi_sides[i]] do
           begin
           if j[1] = b_oil_mine then
              SetResourceVisibility(j[2][1], j[2][2], i);

           bc_type := j[1];
           bc_level := 3;

           b := CreateAndPlaceBuildingXYD(j[2][1], j[2][2], j[2][3]);

           if j[1] = b_depot then
              begin
              SetResourceType(GetBase(b), mat_cans, [450, 350, 230][Difficulty]);
              SetResourceType(GetBase(b), mat_oil, [90, 60, 40][Difficulty]);
              end;

           if j[1] = b_bunker then
              PlaceWeaponTurret(b, j[3]);
           end;
       end; 

    if multi_custom_commanders then
       begin
       un := Multiplayer_PrepareCustomCommanders(i, multi_sides[i]);
       multi_commanders := Insert(multi_commanders, multi_commanders+1, un);

       if GetClass(un) = class_mechanic then
          begin
          uc_nation := nation_russian;

          PrepareVehicle(ru_heavy_wheeled, engine_combustion, control_manual, ru_gun, 80);
          veh := CreateVehicle;
          SetMark(veh, GetSide(un) * -1);
          PlaceUnitArea(veh, multi_pos_area[multi_sides[i]][2], false);
          PlaceHumanInUnit(un, veh);
          end
       else
          PlaceUnitArea(un, multi_pos_area[multi_sides[i]][1], false);
       end
    else
       begin
       uc_side := i;
       uc_nation := multi_nations[i];

       hc_importance := 100;

       PrepareHuman(false, 1, multi_skill_level);

       if multiplayer then
          begin
          hc_name := mp_sides_players_names[i];
          hc_gallery := 'MULTIAVATARS';
          hc_face_number := Multiplayer_GetPlayerSideNum(i);
          hc_sex := Multiplayer_GetPlayerSex(i);
          end
         else
          begin
          hc_gallery := '';
          hc_name := '';
          hc_sex := rand(1, 2);
          end;

       un := CreateHuman;
       PlaceUnitArea(un, multi_pos_area[multi_sides[i]][1], false);

       multi_commanders := Replace(multi_commanders, i, un);
       end;

    InitHc;
    InitUc;

    uc_side := i;
    uc_nation := multi_nations[i];

    hc_gallery := '';
    hc_name := '';
    hc_importance := 0;

    cl := 1;

    // prepare player units
    for j := 2 to multi_pep_amount do
        begin
        if (j - 1) mod ((multi_pep_amount - 1) / 4) = 0 then
           cl := cl + 1;

        if cl > 4 then
           cl := 1;

        if multi_sides[i] = 2 and (cl = 2 or (cl = 4 and FilterAllUnits([[f_side, i], [f_class, 4]]) > 1)) then
           PrepareHuman(false, 1, multi_skill_level)
        else
           PrepareHuman(false, cl, multi_skill_level);

        un := CreateHuman;

        if multi_pos_area then
           begin
           if GetClass(un) = 3 and vehicles then
              begin                
              PrepareVehicle(vehicles[1][1], vehicles[1][2], vehicles[1][3], vehicles[1][4], [80, 60, 40][Difficulty]);
              veh := CreateVehicle;
              PlaceUnitArea(veh, multi_pos_area[multi_sides[i]][2], false);
              PlaceHumanInUnit(un, veh);
              
              if GetWeapon(veh) = ru_cargo_bay then
                 SetCargo(veh, mat_oil, 60);    

              vehicles := Delete(vehicles, 1);

              continue;
              end;

           tmp := FilterAllUnits([[f_side, i], [f_or, [f_btype, b_bunker], [f_btype, b_breastwork]], [f_empty]]);

           if GetClass(un) = 1 and tmp then
              begin
              SetDir(un, GetDir(tmp[1]) - 3);
              PlaceHumanInUnit(un, tmp[1]);

              continue;
              end;

           PlaceUnitArea(un, multi_pos_area[multi_sides[i]][1], false);
           end;
        end;
    end;

End;

Export Function Multiplayer_Start();
begin
Multiplayer_PreparePlayers();
Multiplayer_InitPointSystem();

// for kill
Multiplayer_RegisterCondition(20);
// for artifact
Multiplayer_RegisterCondition(150);
// for building
Multiplayer_RegisterCondition(5);
// for lost human
Multiplayer_RegisterCondition(-120);
// for lost tank
Multiplayer_RegisterCondition(-60);
// for produce vehicle
Multiplayer_RegisterCondition(2);
// for save human
Multiplayer_RegisterCondition(110);
// for save vehicle
Multiplayer_RegisterCondition(55);
// for attacking ally
Multiplayer_RegisterCondition(-1000);

if multi_sides[your_side] then
   CenterNowOnUnits(FilterAllUnits([f_side, your_side])[1]);
End;

Export Function Multiplayer_End();
var i, j, points;
begin
repeat
 wait(0$1);
 points := 0;

 for i := 1 to 8 do
     points := points + multi_points[i];

 if not multi_custom_commanders then
    begin
    for i := 1 to 8 do
        begin
        if FilterAllUnits([f_side, i]) = 0 and not multi_loosers[i] then
           begin
           multi_loosers := Replace(multi_loosers, i, 1);
           Multiplayer_Reside(i);
           end;
        end;

    if Count(multi_loosers) = Count(multi_sides) then
       break;
    end;

  if points >= multi_points_to_victory then
     begin
     winAllowed := true;
     break;
     end;

until (winAllowed and game) or not multi_commanders;

game := false;

for i := 1 to 8 do
    begin
    if multi_sides[i] then
       SetMultiScore(i, multi_points[i]);
    end;

if multi_loosers[your_side] then
   begin
   if Multiplayer then
      YouLostInMultiplayer
   else
      YouLost('');
   end
else
   begin
   if Multiplayer then
      YouWinInMultiplayer
   else
      YouWin;
   end;
End;

Export Function Multiplayer_EnemyAlive();
var side;
begin
result := false;

for side in botSides do
    begin
    result := FilterAllUnits([[f_side, side], [f_type, unit_human], [f_ok]]) > 0;

    if result then
       exit;
    end;
End;

Export Function Multiplayer_DisplayStrings();
var i, points;
begin
result := [];
points := 0;

for i := 1 to 8 do
    begin
    points := points + multi_points[i];

    if multi_sides[i] then
       begin
       result := result  ^ ['#coop-points', i, i, multi_points[i]];        
       end;
    end;

result := result ^ ['#saved-convoys', savedConvoyUnits];
result := result ^ ['#points-to-win', points, multi_points_to_victory];
End;

Export multi_points, multi_points_conditions;
Export Function Multiplayer_InitPointSystem();
var i;
begin
multi_points := [0, 0, 0, 0, 0, 0, 0, 0];
multi_points_conditions := [];
End;

Export Function Multiplayer_AddPoints(side, amount);
begin
if not multi_points or not side or side > 8 then
   exit;

multi_points := Replace(multi_points, side, multi_points[side] + amount);
End;

Export Function Multiplayer_GetPoints(side);
begin
if not multi_points or not side or side > 8 then
   exit;

result := multi_points[side];
End;

Export Function Multiplayer_RegisterCondition(points);
begin
multi_points_conditions := Replace(multi_points_conditions, multi_points_conditions + 1, points);
End;

Export Function Multiplayer_GetCondition(id);
begin
if not id then
   exit;

result := multi_points_conditions[id];
End;

Export Function Multiplayer_Reside(side);
var players, i, j, tmp;
begin
players := [];

for i = 1 to 8 do
    begin
    if i = side then
       continue;

    if multi_sides[i] and not multi_loosers[i] then
       players := players ^ i;
    end;

if not players then
   exit;

if players = 1 then
   begin
   for i in FilterAllUnits([[f_side, side], [f_alive]]) do
       SetSide(i, players[1]);
   end
else
   begin
   j := 1;

   for i in FilterAllUnits([[f_side, side], [f_or, [[f_type, unit_human], [f_alive]], [f_type, unit_vehicle]]]) do
       begin
       SetSide(i, players[j]);

       if IsDrivenBy(i) then
          SetSide(IsDrivenBy(i), players[j]);

       if GetType(IsInUnit(i)) = unit_building then
          ComExitBuilding(i);

       j := j + 1;

       if j > players then
          j := 1;
       end;
   end;
End;

Export Function MultiplayerEvent_Produced(side);
begin
if not side or side > 8 then
   exit;

Multiplayer_AddPoints(side, Multiplayer_GetCondition(6));
End;

Export Function MultiplayerEvent_HumanLost(side);
begin
if not side or side > 8 then
   exit;

Multiplayer_AddPoints(side, Multiplayer_GetCondition(4));
End;

Export Function MultiplayerEvent_VehicleLost(side);
begin
if not side or side > 8 then
   exit;

Multiplayer_AddPoints(side, Multiplayer_GetCondition(5));
End;

Export Function MultiplayerEvent_BuildingCompleted(side, btype);
begin
if not side or side > 8 or not btype in [b_workshop, b_lab, b_control_tower, b_depot] then
   exit;

Multiplayer_AddPoints(side, Multiplayer_GetCondition(3));
End;

Export Function MultiplayerEvent_UnitKilled(un, side, points);
var gained_points;
begin
if not un then
   exit;

if not points then
   gained_points := Multiplayer_GetCondition(1)
else
   gained_points := points;

Multiplayer_AddPoints(side, gained_points);
End;
