// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3759 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5615 0 1
  44: PPUSH
  45: CALL 937 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5615 0 1
  56: PPUSH
  57: CALL 11921 0 1
// Multiplayer_Start ;
  61: CALL 7335 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 40
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 40
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7454 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: PUSH
 191: LD_OWVAR 48
 195: NOT
 196: AND
 197: IFFALSE 213
 199: GO 201
 201: DISABLE
// begin enable ;
 202: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 203: LD_ADDR_OWVAR 47
 207: PUSH
 208: CALL 7881 0 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 214: LD_EXP 39
 218: PUSH
 219: LD_INT 6
 221: PUSH
 222: LD_INT 8
 224: PUSH
 225: LD_INT 10
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: LIST
 232: PUSH
 233: LD_OWVAR 67
 237: ARRAY
 238: PUSH
 239: LD_INT 16
 241: PUSH
 242: LD_INT 20
 244: PUSH
 245: LD_INT 24
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: IN
 263: IFFALSE 609
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
 273: PPUSH
 274: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 275: LD_INT 35
 277: PPUSH
 278: CALL_OW 67
// until not blockThread ;
 282: LD_EXP 6
 286: NOT
 287: IFFALSE 275
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 4
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: PUSH
 308: LD_OWVAR 67
 312: ARRAY
 313: ST_TO_ADDR
// for i := 1 to 8 do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: DOUBLE
 320: LD_INT 1
 322: DEC
 323: ST_TO_ADDR
 324: LD_INT 8
 326: PUSH
 327: FOR_TO
 328: IFFALSE 607
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 330: LD_EXP 15
 334: PUSH
 335: LD_VAR 0 1
 339: ARRAY
 340: PUSH
 341: LD_INT 2
 343: EQUAL
 344: PUSH
 345: LD_EXP 32
 349: PUSH
 350: LD_VAR 0 1
 354: ARRAY
 355: NOT
 356: AND
 357: IFFALSE 605
// begin if i = your_side then
 359: LD_VAR 0 1
 363: PUSH
 364: LD_OWVAR 2
 368: EQUAL
 369: IFFALSE 381
// CenterNowOnXY ( 112 , 172 ) ;
 371: LD_INT 112
 373: PPUSH
 374: LD_INT 172
 376: PPUSH
 377: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 381: LD_INT 0
 383: PPUSH
 384: LD_VAR 0 5
 388: PPUSH
 389: CALL_OW 382
// un := CreateHuman ;
 393: LD_ADDR_VAR 0 3
 397: PUSH
 398: CALL_OW 44
 402: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 403: LD_VAR 0 3
 407: PPUSH
 408: LD_INT 25
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 49
// for j := 1 to 2 do
 418: LD_ADDR_VAR 0 2
 422: PUSH
 423: DOUBLE
 424: LD_INT 1
 426: DEC
 427: ST_TO_ADDR
 428: LD_INT 2
 430: PUSH
 431: FOR_TO
 432: IFFALSE 473
// begin PrepareMechanic ( false , skill ) ;
 434: LD_INT 0
 436: PPUSH
 437: LD_VAR 0 5
 441: PPUSH
 442: CALL_OW 383
// un := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 25
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 431
 473: POP
 474: POP
// for j := 1 to 2 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_INT 2
 487: PUSH
 488: FOR_TO
 489: IFFALSE 603
// begin uc_side := i ;
 491: LD_ADDR_OWVAR 20
 495: PUSH
 496: LD_VAR 0 1
 500: ST_TO_ADDR
// uc_nation := nation_russian ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 3
 508: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 509: LD_INT 22
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: LD_INT 44
 520: PPUSH
 521: LD_INT 50
 523: PPUSH
 524: CALL 19863 0 5
// veh := CreateVehicle ;
 528: LD_ADDR_VAR 0 4
 532: PUSH
 533: CALL_OW 45
 537: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 538: LD_VAR 0 4
 542: PPUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 550: LD_INT 0
 552: PPUSH
 553: LD_VAR 0 5
 557: PPUSH
 558: CALL_OW 383
// un := CreateHuman ;
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_INT 25
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 587: LD_VAR 0 3
 591: PPUSH
 592: LD_VAR 0 4
 596: PPUSH
 597: CALL_OW 52
// end ;
 601: GO 488
 603: POP
 604: POP
// end ;
 605: GO 327
 607: POP
 608: POP
// end ;
 609: PPOPN 5
 611: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 612: LD_EXP 39
 616: PUSH
 617: LD_INT 12
 619: PUSH
 620: LD_INT 14
 622: PUSH
 623: LD_INT 16
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: LD_OWVAR 67
 635: ARRAY
 636: PUSH
 637: LD_INT 32
 639: PUSH
 640: LD_INT 36
 642: PUSH
 643: LD_INT 40
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: LD_OWVAR 67
 655: ARRAY
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: IN
 661: IFFALSE 934
 663: GO 665
 665: DISABLE
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
 672: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 673: LD_INT 35
 675: PPUSH
 676: CALL_OW 67
// until not blockThread ;
 680: LD_EXP 6
 684: NOT
 685: IFFALSE 673
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 687: LD_ADDR_VAR 0 5
 691: PUSH
 692: LD_INT 6
 694: PUSH
 695: LD_INT 4
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_OWVAR 67
 710: ARRAY
 711: ST_TO_ADDR
// for i := 1 to 8 do
 712: LD_ADDR_VAR 0 1
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_INT 8
 724: PUSH
 725: FOR_TO
 726: IFFALSE 932
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 728: LD_EXP 15
 732: PUSH
 733: LD_VAR 0 1
 737: ARRAY
 738: PUSH
 739: LD_INT 1
 741: EQUAL
 742: PUSH
 743: LD_EXP 32
 747: PUSH
 748: LD_VAR 0 1
 752: ARRAY
 753: NOT
 754: AND
 755: IFFALSE 930
// begin if i = your_side then
 757: LD_VAR 0 1
 761: PUSH
 762: LD_OWVAR 2
 766: EQUAL
 767: IFFALSE 779
// CenterNowOnXY ( 112 , 172 ) ;
 769: LD_INT 112
 771: PPUSH
 772: LD_INT 172
 774: PPUSH
 775: CALL_OW 86
// for j := 1 to 3 do
 779: LD_ADDR_VAR 0 2
 783: PUSH
 784: DOUBLE
 785: LD_INT 1
 787: DEC
 788: ST_TO_ADDR
 789: LD_INT 3
 791: PUSH
 792: FOR_TO
 793: IFFALSE 928
// begin uc_side := i ;
 795: LD_ADDR_OWVAR 20
 799: PUSH
 800: LD_VAR 0 1
 804: ST_TO_ADDR
// uc_nation := nation_russian ;
 805: LD_ADDR_OWVAR 21
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 813: LD_INT 22
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: LD_INT 44
 824: PUSH
 825: LD_INT 43
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_INT 2
 839: MOD
 840: PUSH
 841: LD_INT 1
 843: PLUS
 844: ARRAY
 845: PPUSH
 846: LD_INT 50
 848: PPUSH
 849: CALL 19863 0 5
// veh := CreateVehicle ;
 853: LD_ADDR_VAR 0 4
 857: PUSH
 858: CALL_OW 45
 862: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 863: LD_VAR 0 4
 867: PPUSH
 868: LD_INT 5
 870: PPUSH
 871: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_VAR 0 5
 882: PPUSH
 883: CALL_OW 383
// un := CreateHuman ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: CALL_OW 44
 896: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 897: LD_VAR 0 4
 901: PPUSH
 902: LD_INT 25
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 912: LD_VAR 0 3
 916: PPUSH
 917: LD_VAR 0 4
 921: PPUSH
 922: CALL_OW 52
// end ;
 926: GO 792
 928: POP
 929: POP
// end ;
 930: GO 725
 932: POP
 933: POP
// end ; end_of_file
 934: PPOPN 5
 936: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
 943: PPUSH
// enemySide := side ;
 944: LD_ADDR_EXP 12
 948: PUSH
 949: LD_VAR 0 1
 953: ST_TO_ADDR
// enemyUnits := [ ] ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: EMPTY
 960: ST_TO_ADDR
// enemyMobile := [ ] ;
 961: LD_ADDR_EXP 10
 965: PUSH
 966: EMPTY
 967: ST_TO_ADDR
// enemyForestGuard := [ ] ;
 968: LD_ADDR_EXP 11
 972: PUSH
 973: EMPTY
 974: ST_TO_ADDR
// arAttackersInf := [ ] ;
 975: LD_ADDR_EXP 13
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
 982: LD_ADDR_VAR 0 5
 986: PUSH
 987: LD_INT 4
 989: PUSH
 990: LD_INT 6
 992: PUSH
 993: LD_INT 8
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_OWVAR 67
1005: ARRAY
1006: ST_TO_ADDR
// uc_side := side ;
1007: LD_ADDR_OWVAR 20
1011: PUSH
1012: LD_VAR 0 1
1016: ST_TO_ADDR
// uc_nation := nation_arabian ;
1017: LD_ADDR_OWVAR 21
1021: PUSH
1022: LD_INT 2
1024: ST_TO_ADDR
// for i := 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
1025: LD_ADDR_VAR 0 3
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_INT 5
1037: PUSH
1038: LD_INT 7
1040: PUSH
1041: LD_INT 8
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PUSH
1049: LD_OWVAR 67
1053: ARRAY
1054: PUSH
1055: FOR_TO
1056: IFFALSE 1143
// begin PrepareSoldier ( false , skill ) ;
1058: LD_INT 0
1060: PPUSH
1061: LD_VAR 0 5
1065: PPUSH
1066: CALL_OW 381
// un := CreateHuman ;
1070: LD_ADDR_VAR 0 4
1074: PUSH
1075: CALL_OW 44
1079: ST_TO_ADDR
// if i mod 2 = 0 then
1080: LD_VAR 0 3
1084: PUSH
1085: LD_INT 2
1087: MOD
1088: PUSH
1089: LD_INT 0
1091: EQUAL
1092: IFFALSE 1106
// SetClass ( un , class_mortar ) ;
1094: LD_VAR 0 4
1098: PPUSH
1099: LD_INT 8
1101: PPUSH
1102: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1106: LD_ADDR_EXP 11
1110: PUSH
1111: LD_EXP 11
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: CALL 52714 0 2
1125: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1126: LD_VAR 0 4
1130: PPUSH
1131: LD_INT 17
1133: PPUSH
1134: LD_INT 0
1136: PPUSH
1137: CALL_OW 49
// end ;
1141: GO 1055
1143: POP
1144: POP
// PrepareScientist ( false , skill ) ;
1145: LD_INT 0
1147: PPUSH
1148: LD_VAR 0 5
1152: PPUSH
1153: CALL_OW 384
// un := CreateHuman ;
1157: LD_ADDR_VAR 0 4
1161: PUSH
1162: CALL_OW 44
1166: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1167: LD_ADDR_EXP 11
1171: PUSH
1172: LD_EXP 11
1176: PPUSH
1177: LD_VAR 0 4
1181: PPUSH
1182: CALL 52714 0 2
1186: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1187: LD_VAR 0 4
1191: PPUSH
1192: LD_INT 17
1194: PPUSH
1195: LD_INT 0
1197: PPUSH
1198: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1202: LD_ADDR_VAR 0 3
1206: PUSH
1207: DOUBLE
1208: LD_INT 1
1210: DEC
1211: ST_TO_ADDR
1212: LD_INT 2
1214: PUSH
1215: LD_INT 3
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_OWVAR 67
1230: ARRAY
1231: PUSH
1232: FOR_TO
1233: IFFALSE 1369
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1235: LD_INT 14
1237: PPUSH
1238: LD_INT 2
1240: PPUSH
1241: LD_INT 1
1243: PPUSH
1244: LD_INT 27
1246: PPUSH
1247: LD_INT 100
1249: PPUSH
1250: CALL 19863 0 5
// veh := CreateVehicle ;
1254: LD_ADDR_VAR 0 6
1258: PUSH
1259: CALL_OW 45
1263: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1264: LD_ADDR_EXP 11
1268: PUSH
1269: LD_EXP 11
1273: PPUSH
1274: LD_VAR 0 6
1278: PPUSH
1279: CALL 52714 0 2
1283: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1284: LD_VAR 0 6
1288: PPUSH
1289: LD_INT 5
1291: PPUSH
1292: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1296: LD_INT 0
1298: PPUSH
1299: LD_VAR 0 5
1303: PPUSH
1304: CALL_OW 383
// un := CreateHuman ;
1308: LD_ADDR_VAR 0 4
1312: PUSH
1313: CALL_OW 44
1317: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1318: LD_ADDR_EXP 11
1322: PUSH
1323: LD_EXP 11
1327: PPUSH
1328: LD_VAR 0 4
1332: PPUSH
1333: CALL 52714 0 2
1337: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1338: LD_VAR 0 6
1342: PPUSH
1343: LD_INT 18
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1353: LD_VAR 0 4
1357: PPUSH
1358: LD_VAR 0 6
1362: PPUSH
1363: CALL_OW 52
// end ;
1367: GO 1232
1369: POP
1370: POP
// for i := 1 to 2 do
1371: LD_ADDR_VAR 0 3
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_INT 2
1383: PUSH
1384: FOR_TO
1385: IFFALSE 1468
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1387: LD_INT 14
1389: PPUSH
1390: LD_INT 2
1392: PPUSH
1393: LD_INT 1
1395: PPUSH
1396: LD_INT 32
1398: PPUSH
1399: LD_INT 100
1401: PPUSH
1402: CALL 19863 0 5
// veh := CreateVehicle ;
1406: LD_ADDR_VAR 0 6
1410: PUSH
1411: CALL_OW 45
1415: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1416: LD_VAR 0 6
1420: PPUSH
1421: LD_INT 2
1423: PPUSH
1424: LD_INT 3
1426: PPUSH
1427: CALL_OW 12
1431: PPUSH
1432: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1436: LD_VAR 0 6
1440: PPUSH
1441: LD_INT 22
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1451: LD_VAR 0 6
1455: PPUSH
1456: LD_INT 2
1458: PPUSH
1459: LD_INT 100
1461: PPUSH
1462: CALL_OW 290
// end ;
1466: GO 1384
1468: POP
1469: POP
// end ;
1470: LD_VAR 0 2
1474: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1475: LD_INT 0
1477: PPUSH
1478: PPUSH
1479: PPUSH
1480: PPUSH
1481: PPUSH
1482: PPUSH
// blockThread := true ;
1483: LD_ADDR_EXP 6
1487: PUSH
1488: LD_INT 1
1490: ST_TO_ADDR
// v := convoyWave div 8 ;
1491: LD_ADDR_VAR 0 6
1495: PUSH
1496: LD_EXP 39
1500: PUSH
1501: LD_INT 8
1503: DIV
1504: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1505: LD_ADDR_VAR 0 5
1509: PUSH
1510: LD_INT 4
1512: PUSH
1513: LD_INT 5
1515: PUSH
1516: LD_INT 6
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: LIST
1523: PUSH
1524: LD_OWVAR 67
1528: ARRAY
1529: PUSH
1530: LD_VAR 0 6
1534: PLUS
1535: ST_TO_ADDR
// if skill > 10 then
1536: LD_VAR 0 5
1540: PUSH
1541: LD_INT 10
1543: GREATER
1544: IFFALSE 1554
// skill := 10 ;
1546: LD_ADDR_VAR 0 5
1550: PUSH
1551: LD_INT 10
1553: ST_TO_ADDR
// if v > 8 then
1554: LD_VAR 0 6
1558: PUSH
1559: LD_INT 8
1561: GREATER
1562: IFFALSE 1572
// v := 8 ;
1564: LD_ADDR_VAR 0 6
1568: PUSH
1569: LD_INT 8
1571: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1572: LD_ADDR_VAR 0 2
1576: PUSH
1577: DOUBLE
1578: LD_INT 1
1580: DEC
1581: ST_TO_ADDR
1582: LD_INT 2
1584: PUSH
1585: LD_INT 3
1587: PUSH
1588: LD_INT 3
1590: PUSH
1591: EMPTY
1592: LIST
1593: LIST
1594: LIST
1595: PUSH
1596: LD_OWVAR 67
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 6
1606: PLUS
1607: PUSH
1608: FOR_TO
1609: IFFALSE 1788
// begin uc_side := enemySide ;
1611: LD_ADDR_OWVAR 20
1615: PUSH
1616: LD_EXP 12
1620: ST_TO_ADDR
// uc_nation := nation_arabian ;
1621: LD_ADDR_OWVAR 21
1625: PUSH
1626: LD_INT 2
1628: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1629: LD_INT 14
1631: PPUSH
1632: LD_INT 1
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: LD_INT 27
1640: PUSH
1641: LD_INT 25
1643: PUSH
1644: EMPTY
1645: LIST
1646: LIST
1647: PUSH
1648: LD_VAR 0 2
1652: PUSH
1653: LD_INT 2
1655: MOD
1656: PUSH
1657: LD_INT 1
1659: PLUS
1660: ARRAY
1661: PPUSH
1662: LD_INT 100
1664: PPUSH
1665: CALL 19863 0 5
// veh := CreateVehicle ;
1669: LD_ADDR_VAR 0 3
1673: PUSH
1674: CALL_OW 45
1678: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1679: LD_ADDR_EXP 10
1683: PUSH
1684: LD_EXP 10
1688: PPUSH
1689: LD_VAR 0 3
1693: PPUSH
1694: CALL 52714 0 2
1698: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1699: LD_VAR 0 3
1703: PPUSH
1704: LD_INT 2
1706: PPUSH
1707: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1711: LD_INT 0
1713: PPUSH
1714: LD_VAR 0 5
1718: PPUSH
1719: CALL_OW 383
// un := CreateHuman ;
1723: LD_ADDR_VAR 0 4
1727: PUSH
1728: CALL_OW 44
1732: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1733: LD_INT 35
1735: PPUSH
1736: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1740: LD_VAR 0 3
1744: PPUSH
1745: LD_INT 23
1747: PPUSH
1748: LD_INT 0
1750: PPUSH
1751: CALL_OW 49
1755: IFFALSE 1733
// PlaceHumanInUnit ( un , veh ) ;
1757: LD_VAR 0 4
1761: PPUSH
1762: LD_VAR 0 3
1766: PPUSH
1767: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1771: LD_VAR 0 3
1775: PPUSH
1776: LD_INT 104
1778: PPUSH
1779: LD_INT 18
1781: PPUSH
1782: CALL_OW 111
// end ;
1786: GO 1608
1788: POP
1789: POP
// blockThread := false ;
1790: LD_ADDR_EXP 6
1794: PUSH
1795: LD_INT 0
1797: ST_TO_ADDR
// end ;
1798: LD_VAR 0 1
1802: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1803: LD_INT 0
1805: PPUSH
1806: PPUSH
1807: PPUSH
1808: PPUSH
1809: PPUSH
1810: PPUSH
// blockThread := true ;
1811: LD_ADDR_EXP 6
1815: PUSH
1816: LD_INT 1
1818: ST_TO_ADDR
// v := convoyWave div 8 ;
1819: LD_ADDR_VAR 0 6
1823: PUSH
1824: LD_EXP 39
1828: PUSH
1829: LD_INT 8
1831: DIV
1832: ST_TO_ADDR
// if v > 8 then
1833: LD_VAR 0 6
1837: PUSH
1838: LD_INT 8
1840: GREATER
1841: IFFALSE 1851
// v := 8 ;
1843: LD_ADDR_VAR 0 6
1847: PUSH
1848: LD_INT 8
1850: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1851: LD_ADDR_VAR 0 2
1855: PUSH
1856: DOUBLE
1857: LD_INT 1
1859: DEC
1860: ST_TO_ADDR
1861: LD_INT 3
1863: PUSH
1864: LD_INT 4
1866: PUSH
1867: LD_INT 5
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: PUSH
1875: LD_OWVAR 67
1879: ARRAY
1880: PUSH
1881: LD_VAR 0 6
1885: PLUS
1886: PUSH
1887: FOR_TO
1888: IFFALSE 2071
// begin uc_side := enemySide ;
1890: LD_ADDR_OWVAR 20
1894: PUSH
1895: LD_EXP 12
1899: ST_TO_ADDR
// uc_nation := nation_arabian ;
1900: LD_ADDR_OWVAR 21
1904: PUSH
1905: LD_INT 2
1907: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1908: LD_INT 14
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 27
1919: PUSH
1920: LD_INT 25
1922: PUSH
1923: LD_INT 26
1925: PUSH
1926: EMPTY
1927: LIST
1928: LIST
1929: LIST
1930: PUSH
1931: LD_VAR 0 2
1935: PUSH
1936: LD_INT 3
1938: MOD
1939: PUSH
1940: LD_INT 1
1942: PLUS
1943: ARRAY
1944: PPUSH
1945: LD_INT 100
1947: PPUSH
1948: CALL 19863 0 5
// veh := CreateVehicle ;
1952: LD_ADDR_VAR 0 3
1956: PUSH
1957: CALL_OW 45
1961: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1962: LD_ADDR_EXP 10
1966: PUSH
1967: LD_EXP 10
1971: PPUSH
1972: LD_VAR 0 3
1976: PPUSH
1977: CALL 52714 0 2
1981: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1982: LD_VAR 0 3
1986: PPUSH
1987: LD_INT 4
1989: PPUSH
1990: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1994: LD_INT 0
1996: PPUSH
1997: LD_VAR 0 5
2001: PPUSH
2002: CALL_OW 383
// un := CreateHuman ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: CALL_OW 44
2015: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2016: LD_INT 35
2018: PPUSH
2019: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2023: LD_VAR 0 3
2027: PPUSH
2028: LD_INT 14
2030: PPUSH
2031: LD_INT 0
2033: PPUSH
2034: CALL_OW 49
2038: IFFALSE 2016
// PlaceHumanInUnit ( un , veh ) ;
2040: LD_VAR 0 4
2044: PPUSH
2045: LD_VAR 0 3
2049: PPUSH
2050: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2054: LD_VAR 0 3
2058: PPUSH
2059: LD_INT 151
2061: PPUSH
2062: LD_INT 28
2064: PPUSH
2065: CALL_OW 111
// end ;
2069: GO 1887
2071: POP
2072: POP
// blockThread := false ;
2073: LD_ADDR_EXP 6
2077: PUSH
2078: LD_INT 0
2080: ST_TO_ADDR
// end ;
2081: LD_VAR 0 1
2085: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2086: LD_INT 0
2088: PPUSH
2089: PPUSH
2090: PPUSH
2091: PPUSH
2092: PPUSH
2093: PPUSH
// blockThread := true ;
2094: LD_ADDR_EXP 6
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2102: LD_ADDR_VAR 0 6
2106: PUSH
2107: LD_INT 4
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: LD_INT 7
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PUSH
2121: LD_OWVAR 67
2125: ARRAY
2126: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2127: LD_ADDR_VAR 0 5
2131: PUSH
2132: LD_INT 15
2134: PPUSH
2135: LD_INT 0
2137: PPUSH
2138: CALL_OW 517
2142: ST_TO_ADDR
// uc_side := enemySide ;
2143: LD_ADDR_OWVAR 20
2147: PUSH
2148: LD_EXP 12
2152: ST_TO_ADDR
// uc_nation := nation_arabian ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 2
2160: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2161: LD_INT 0
2163: PPUSH
2164: LD_VAR 0 6
2168: PPUSH
2169: CALL_OW 383
// un := CreateHuman ;
2173: LD_ADDR_VAR 0 3
2177: PUSH
2178: CALL_OW 44
2182: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2183: LD_INT 14
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 1
2191: PPUSH
2192: LD_INT 26
2194: PPUSH
2195: LD_INT 100
2197: PPUSH
2198: CALL 19863 0 5
// veh := CreateVehicle ;
2202: LD_ADDR_VAR 0 4
2206: PUSH
2207: CALL_OW 45
2211: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2212: LD_VAR 0 4
2216: PPUSH
2217: LD_INT 4
2219: PPUSH
2220: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2224: LD_INT 35
2226: PPUSH
2227: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2231: LD_VAR 0 4
2235: PPUSH
2236: LD_INT 14
2238: PPUSH
2239: LD_INT 0
2241: PPUSH
2242: CALL_OW 49
2246: IFFALSE 2224
// PlaceHumanInUnit ( un , veh ) ;
2248: LD_VAR 0 3
2252: PPUSH
2253: LD_VAR 0 4
2257: PPUSH
2258: CALL_OW 52
// blockThread := false ;
2262: LD_ADDR_EXP 6
2266: PUSH
2267: LD_INT 0
2269: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: DOUBLE
2276: LD_INT 1
2278: DEC
2279: ST_TO_ADDR
2280: LD_VAR 0 5
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2336
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2292: LD_VAR 0 4
2296: PPUSH
2297: LD_VAR 0 5
2301: PUSH
2302: LD_INT 1
2304: ARRAY
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PPUSH
2312: LD_VAR 0 5
2316: PUSH
2317: LD_INT 2
2319: ARRAY
2320: PUSH
2321: LD_VAR 0 2
2325: ARRAY
2326: PPUSH
2327: LD_INT 7
2329: PPUSH
2330: CALL 74785 0 4
2334: GO 2289
2336: POP
2337: POP
// repeat wait ( 0 0$1 ) ;
2338: LD_INT 35
2340: PPUSH
2341: CALL_OW 67
// if IsDead ( veh ) then
2345: LD_VAR 0 4
2349: PPUSH
2350: CALL_OW 301
2354: IFFALSE 2358
// exit ;
2356: GO 2431
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2358: LD_INT 16
2360: PPUSH
2361: LD_INT 22
2363: PUSH
2364: LD_EXP 12
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 70
2377: PUSH
2378: LD_VAR 0 4
2382: PPUSH
2383: CALL_OW 314
2387: NOT
2388: OR
2389: PUSH
2390: LD_VAR 0 3
2394: PPUSH
2395: CALL_OW 314
2399: NOT
2400: OR
2401: IFFALSE 2338
// forestIsCleared := true ;
2403: LD_ADDR_EXP 7
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2411: LD_ADDR_EXP 10
2415: PUSH
2416: LD_EXP 10
2420: PPUSH
2421: LD_VAR 0 4
2425: PPUSH
2426: CALL 52714 0 2
2430: ST_TO_ADDR
// end ;
2431: LD_VAR 0 1
2435: RET
// export function SendWestGroup ; var i , un , skill ; begin
2436: LD_INT 0
2438: PPUSH
2439: PPUSH
2440: PPUSH
2441: PPUSH
// blockThread := true ;
2442: LD_ADDR_EXP 6
2446: PUSH
2447: LD_INT 1
2449: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2450: LD_ADDR_VAR 0 4
2454: PUSH
2455: LD_INT 3
2457: PUSH
2458: LD_INT 5
2460: PUSH
2461: LD_INT 7
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: LIST
2468: PUSH
2469: LD_OWVAR 67
2473: ARRAY
2474: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2475: LD_ADDR_VAR 0 2
2479: PUSH
2480: DOUBLE
2481: LD_INT 1
2483: DEC
2484: ST_TO_ADDR
2485: LD_INT 3
2487: PUSH
2488: LD_INT 4
2490: PUSH
2491: LD_INT 5
2493: PUSH
2494: EMPTY
2495: LIST
2496: LIST
2497: LIST
2498: PUSH
2499: LD_OWVAR 67
2503: ARRAY
2504: PUSH
2505: FOR_TO
2506: IFFALSE 2631
// begin uc_side := enemySide ;
2508: LD_ADDR_OWVAR 20
2512: PUSH
2513: LD_EXP 12
2517: ST_TO_ADDR
// uc_nation := nation_arabian ;
2518: LD_ADDR_OWVAR 21
2522: PUSH
2523: LD_INT 2
2525: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2526: LD_INT 0
2528: PPUSH
2529: LD_VAR 0 4
2533: PPUSH
2534: CALL_OW 381
// un := CreateHuman ;
2538: LD_ADDR_VAR 0 3
2542: PUSH
2543: CALL_OW 44
2547: ST_TO_ADDR
// if i mod 3 = 0 then
2548: LD_VAR 0 2
2552: PUSH
2553: LD_INT 3
2555: MOD
2556: PUSH
2557: LD_INT 0
2559: EQUAL
2560: IFFALSE 2574
// SetClass ( un , class_mortar ) ;
2562: LD_VAR 0 3
2566: PPUSH
2567: LD_INT 8
2569: PPUSH
2570: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2574: LD_ADDR_EXP 9
2578: PUSH
2579: LD_EXP 9
2583: PPUSH
2584: LD_VAR 0 3
2588: PPUSH
2589: CALL 52714 0 2
2593: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2594: LD_VAR 0 3
2598: PPUSH
2599: LD_INT 24
2601: PPUSH
2602: LD_INT 0
2604: PPUSH
2605: CALL_OW 49
// result := Join ( result , un ) ;
2609: LD_ADDR_VAR 0 1
2613: PUSH
2614: LD_VAR 0 1
2618: PPUSH
2619: LD_VAR 0 3
2623: PPUSH
2624: CALL 52714 0 2
2628: ST_TO_ADDR
// end ;
2629: GO 2505
2631: POP
2632: POP
// PrepareScientist ( false , skill ) ;
2633: LD_INT 0
2635: PPUSH
2636: LD_VAR 0 4
2640: PPUSH
2641: CALL_OW 384
// un := CreateHuman ;
2645: LD_ADDR_VAR 0 3
2649: PUSH
2650: CALL_OW 44
2654: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2655: LD_ADDR_EXP 9
2659: PUSH
2660: LD_EXP 9
2664: PPUSH
2665: LD_VAR 0 3
2669: PPUSH
2670: CALL 52714 0 2
2674: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2675: LD_VAR 0 3
2679: PPUSH
2680: LD_INT 24
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// result := Join ( result , un ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_VAR 0 1
2699: PPUSH
2700: LD_VAR 0 3
2704: PPUSH
2705: CALL 52714 0 2
2709: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2710: LD_VAR 0 1
2714: PPUSH
2715: LD_INT 24
2717: PPUSH
2718: LD_INT 37
2720: PPUSH
2721: CALL_OW 114
// blockThread := false ;
2725: LD_ADDR_EXP 6
2729: PUSH
2730: LD_INT 0
2732: ST_TO_ADDR
// end ;
2733: LD_VAR 0 1
2737: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2738: LD_INT 0
2740: PPUSH
2741: PPUSH
2742: PPUSH
2743: PPUSH
2744: PPUSH
2745: PPUSH
// blockThread := true ;
2746: LD_ADDR_EXP 6
2750: PUSH
2751: LD_INT 1
2753: ST_TO_ADDR
// v := convoyWave div 10 ;
2754: LD_ADDR_VAR 0 6
2758: PUSH
2759: LD_EXP 39
2763: PUSH
2764: LD_INT 10
2766: DIV
2767: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2768: LD_ADDR_VAR 0 5
2772: PUSH
2773: LD_INT 4
2775: PUSH
2776: LD_INT 5
2778: PUSH
2779: LD_INT 6
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_OWVAR 67
2791: ARRAY
2792: PUSH
2793: LD_VAR 0 6
2797: PLUS
2798: ST_TO_ADDR
// if skill > 10 then
2799: LD_VAR 0 5
2803: PUSH
2804: LD_INT 10
2806: GREATER
2807: IFFALSE 2817
// skill := 10 ;
2809: LD_ADDR_VAR 0 5
2813: PUSH
2814: LD_INT 10
2816: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 2
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 3
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: LD_OWVAR 67
2845: ARRAY
2846: PUSH
2847: FOR_TO
2848: IFFALSE 3051
// begin uc_side := enemySide ;
2850: LD_ADDR_OWVAR 20
2854: PUSH
2855: LD_EXP 12
2859: ST_TO_ADDR
// uc_nation := nation_arabian ;
2860: LD_ADDR_OWVAR 21
2864: PUSH
2865: LD_INT 2
2867: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2868: LD_INT 14
2870: PPUSH
2871: LD_INT 1
2873: PPUSH
2874: LD_INT 1
2876: PPUSH
2877: LD_INT 27
2879: PUSH
2880: LD_INT 30
2882: PUSH
2883: LD_INT 23
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: LIST
2890: PUSH
2891: LD_VAR 0 2
2895: PUSH
2896: LD_INT 3
2898: MOD
2899: PUSH
2900: LD_INT 1
2902: PLUS
2903: ARRAY
2904: PPUSH
2905: LD_INT 100
2907: PPUSH
2908: CALL 19863 0 5
// veh := CreateVehicle ;
2912: LD_ADDR_VAR 0 3
2916: PUSH
2917: CALL_OW 45
2921: ST_TO_ADDR
// result := Join ( result , veh ) ;
2922: LD_ADDR_VAR 0 1
2926: PUSH
2927: LD_VAR 0 1
2931: PPUSH
2932: LD_VAR 0 3
2936: PPUSH
2937: CALL 52714 0 2
2941: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2942: LD_VAR 0 3
2946: PPUSH
2947: LD_INT 4
2949: PPUSH
2950: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2954: LD_INT 0
2956: PPUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL_OW 383
// un := CreateHuman ;
2966: LD_ADDR_VAR 0 4
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// result := Join ( result , un ) ;
2976: LD_ADDR_VAR 0 1
2980: PUSH
2981: LD_VAR 0 1
2985: PPUSH
2986: LD_VAR 0 4
2990: PPUSH
2991: CALL 52714 0 2
2995: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2996: LD_INT 35
2998: PPUSH
2999: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3003: LD_VAR 0 3
3007: PPUSH
3008: LD_INT 14
3010: PPUSH
3011: LD_INT 0
3013: PPUSH
3014: CALL_OW 49
3018: IFFALSE 2996
// PlaceHumanInUnit ( un , veh ) ;
3020: LD_VAR 0 4
3024: PPUSH
3025: LD_VAR 0 3
3029: PPUSH
3030: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3034: LD_VAR 0 3
3038: PPUSH
3039: LD_INT 159
3041: PPUSH
3042: LD_INT 53
3044: PPUSH
3045: CALL_OW 111
// end ;
3049: GO 2847
3051: POP
3052: POP
// blockThread := false ;
3053: LD_ADDR_EXP 6
3057: PUSH
3058: LD_INT 0
3060: ST_TO_ADDR
// end ;
3061: LD_VAR 0 1
3065: RET
// export function SendEastGroup ; var i , un , skill ; begin
3066: LD_INT 0
3068: PPUSH
3069: PPUSH
3070: PPUSH
3071: PPUSH
// blockThread := true ;
3072: LD_ADDR_EXP 6
3076: PUSH
3077: LD_INT 1
3079: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3080: LD_ADDR_VAR 0 4
3084: PUSH
3085: LD_INT 3
3087: PUSH
3088: LD_INT 5
3090: PUSH
3091: LD_INT 7
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: LD_OWVAR 67
3103: ARRAY
3104: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3105: LD_ADDR_VAR 0 2
3109: PUSH
3110: DOUBLE
3111: LD_INT 1
3113: DEC
3114: ST_TO_ADDR
3115: LD_INT 4
3117: PUSH
3118: LD_INT 5
3120: PUSH
3121: LD_INT 6
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: PUSH
3129: LD_OWVAR 67
3133: ARRAY
3134: PUSH
3135: FOR_TO
3136: IFFALSE 3241
// begin uc_side := enemySide ;
3138: LD_ADDR_OWVAR 20
3142: PUSH
3143: LD_EXP 12
3147: ST_TO_ADDR
// uc_nation := nation_arabian ;
3148: LD_ADDR_OWVAR 21
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3156: LD_INT 0
3158: PPUSH
3159: LD_VAR 0 4
3163: PPUSH
3164: CALL_OW 381
// un := CreateHuman ;
3168: LD_ADDR_VAR 0 3
3172: PUSH
3173: CALL_OW 44
3177: ST_TO_ADDR
// if i mod 3 = 0 then
3178: LD_VAR 0 2
3182: PUSH
3183: LD_INT 3
3185: MOD
3186: PUSH
3187: LD_INT 0
3189: EQUAL
3190: IFFALSE 3204
// SetClass ( un , class_mortar ) ;
3192: LD_VAR 0 3
3196: PPUSH
3197: LD_INT 8
3199: PPUSH
3200: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3204: LD_VAR 0 3
3208: PPUSH
3209: LD_INT 26
3211: PPUSH
3212: LD_INT 0
3214: PPUSH
3215: CALL_OW 49
// result := Join ( result , un ) ;
3219: LD_ADDR_VAR 0 1
3223: PUSH
3224: LD_VAR 0 1
3228: PPUSH
3229: LD_VAR 0 3
3233: PPUSH
3234: CALL 52714 0 2
3238: ST_TO_ADDR
// end ;
3239: GO 3135
3241: POP
3242: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3243: LD_VAR 0 1
3247: PPUSH
3248: LD_INT 219
3250: PPUSH
3251: LD_INT 168
3253: PPUSH
3254: CALL_OW 114
// blockThread := false ;
3258: LD_ADDR_EXP 6
3262: PUSH
3263: LD_INT 0
3265: ST_TO_ADDR
// end ;
3266: LD_VAR 0 1
3270: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3271: LD_INT 0
3273: PPUSH
3274: PPUSH
3275: PPUSH
3276: PPUSH
3277: PPUSH
// blockThread := true ;
3278: LD_ADDR_EXP 6
3282: PUSH
3283: LD_INT 1
3285: ST_TO_ADDR
// v := convoyWave div 8 ;
3286: LD_ADDR_VAR 0 5
3290: PUSH
3291: LD_EXP 39
3295: PUSH
3296: LD_INT 8
3298: DIV
3299: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3300: LD_ADDR_VAR 0 4
3304: PUSH
3305: LD_INT 4
3307: PUSH
3308: LD_INT 5
3310: PUSH
3311: LD_INT 6
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: LIST
3318: PUSH
3319: LD_OWVAR 67
3323: ARRAY
3324: PUSH
3325: LD_VAR 0 5
3329: PLUS
3330: ST_TO_ADDR
// if skill > 10 then
3331: LD_VAR 0 4
3335: PUSH
3336: LD_INT 10
3338: GREATER
3339: IFFALSE 3349
// skill := 10 ;
3341: LD_ADDR_VAR 0 4
3345: PUSH
3346: LD_INT 10
3348: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: DOUBLE
3355: LD_INT 1
3357: DEC
3358: ST_TO_ADDR
3359: LD_INT 3
3361: PUSH
3362: LD_INT 4
3364: PUSH
3365: LD_INT 5
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: PUSH
3373: LD_OWVAR 67
3377: ARRAY
3378: PUSH
3379: FOR_TO
3380: IFFALSE 3485
// begin uc_side := enemySide ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_EXP 12
3391: ST_TO_ADDR
// uc_nation := nation_arabian ;
3392: LD_ADDR_OWVAR 21
3396: PUSH
3397: LD_INT 2
3399: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3400: LD_INT 0
3402: PPUSH
3403: LD_VAR 0 4
3407: PPUSH
3408: CALL_OW 381
// un := CreateHuman ;
3412: LD_ADDR_VAR 0 3
3416: PUSH
3417: CALL_OW 44
3421: ST_TO_ADDR
// if i mod 3 = 0 then
3422: LD_VAR 0 2
3426: PUSH
3427: LD_INT 3
3429: MOD
3430: PUSH
3431: LD_INT 0
3433: EQUAL
3434: IFFALSE 3448
// SetClass ( un , class_mortar ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: LD_INT 8
3443: PPUSH
3444: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3448: LD_VAR 0 3
3452: PPUSH
3453: LD_INT 27
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 49
// result := Join ( result , un ) ;
3463: LD_ADDR_VAR 0 1
3467: PUSH
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_VAR 0 3
3477: PPUSH
3478: CALL 52714 0 2
3482: ST_TO_ADDR
// end ;
3483: GO 3379
3485: POP
3486: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3487: LD_VAR 0 1
3491: PPUSH
3492: LD_INT 77
3494: PPUSH
3495: LD_INT 23
3497: PPUSH
3498: CALL_OW 114
// blockThread := false ;
3502: LD_ADDR_EXP 6
3506: PUSH
3507: LD_INT 0
3509: ST_TO_ADDR
// end ;
3510: LD_VAR 0 1
3514: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3515: LD_INT 0
3517: PPUSH
3518: PPUSH
3519: PPUSH
3520: PPUSH
3521: PPUSH
// blockThread := true ;
3522: LD_ADDR_EXP 6
3526: PUSH
3527: LD_INT 1
3529: ST_TO_ADDR
// v := convoyWave div 8 ;
3530: LD_ADDR_VAR 0 5
3534: PUSH
3535: LD_EXP 39
3539: PUSH
3540: LD_INT 8
3542: DIV
3543: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3544: LD_ADDR_VAR 0 4
3548: PUSH
3549: LD_INT 4
3551: PUSH
3552: LD_INT 5
3554: PUSH
3555: LD_INT 6
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: PUSH
3563: LD_OWVAR 67
3567: ARRAY
3568: PUSH
3569: LD_VAR 0 5
3573: PLUS
3574: ST_TO_ADDR
// if skill > 10 then
3575: LD_VAR 0 4
3579: PUSH
3580: LD_INT 10
3582: GREATER
3583: IFFALSE 3593
// skill := 10 ;
3585: LD_ADDR_VAR 0 4
3589: PUSH
3590: LD_INT 10
3592: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3593: LD_ADDR_VAR 0 2
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_INT 3
3605: PUSH
3606: LD_INT 4
3608: PUSH
3609: LD_INT 4
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: LIST
3616: PUSH
3617: LD_OWVAR 67
3621: ARRAY
3622: PUSH
3623: FOR_TO
3624: IFFALSE 3729
// begin uc_side := enemySide ;
3626: LD_ADDR_OWVAR 20
3630: PUSH
3631: LD_EXP 12
3635: ST_TO_ADDR
// uc_nation := nation_arabian ;
3636: LD_ADDR_OWVAR 21
3640: PUSH
3641: LD_INT 2
3643: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3644: LD_INT 0
3646: PPUSH
3647: LD_VAR 0 4
3651: PPUSH
3652: CALL_OW 381
// un := CreateHuman ;
3656: LD_ADDR_VAR 0 3
3660: PUSH
3661: CALL_OW 44
3665: ST_TO_ADDR
// if i mod 3 = 0 then
3666: LD_VAR 0 2
3670: PUSH
3671: LD_INT 3
3673: MOD
3674: PUSH
3675: LD_INT 0
3677: EQUAL
3678: IFFALSE 3692
// SetClass ( un , class_mortar ) ;
3680: LD_VAR 0 3
3684: PPUSH
3685: LD_INT 8
3687: PPUSH
3688: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3692: LD_VAR 0 3
3696: PPUSH
3697: LD_INT 28
3699: PPUSH
3700: LD_INT 0
3702: PPUSH
3703: CALL_OW 49
// result := Join ( result , un ) ;
3707: LD_ADDR_VAR 0 1
3711: PUSH
3712: LD_VAR 0 1
3716: PPUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL 52714 0 2
3726: ST_TO_ADDR
// end ;
3727: GO 3623
3729: POP
3730: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3731: LD_VAR 0 1
3735: PPUSH
3736: LD_INT 147
3738: PPUSH
3739: LD_INT 100
3741: PPUSH
3742: CALL_OW 114
// blockThread := false ;
3746: LD_ADDR_EXP 6
3750: PUSH
3751: LD_INT 0
3753: ST_TO_ADDR
// end ; end_of_file
3754: LD_VAR 0 1
3758: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3759: LD_INT 0
3761: PPUSH
3762: PPUSH
3763: PPUSH
3764: PPUSH
3765: PPUSH
// multi_settings_counter := 5 ;
3766: LD_ADDR_EXP 26
3770: PUSH
3771: LD_INT 5
3773: ST_TO_ADDR
// multi_settings := [ ] ;
3774: LD_ADDR_EXP 25
3778: PUSH
3779: EMPTY
3780: ST_TO_ADDR
// if Multiplayer then
3781: LD_OWVAR 4
3785: IFFALSE 3965
// begin your_side := mp_player_side ;
3787: LD_ADDR_OWVAR 2
3791: PUSH
3792: LD_OWVAR 7
3796: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3797: LD_ADDR_EXP 14
3801: PUSH
3802: LD_OWVAR 6
3806: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3807: LD_ADDR_EXP 15
3811: PUSH
3812: LD_OWVAR 17
3816: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3817: LD_ADDR_EXP 16
3821: PUSH
3822: LD_OWVAR 15
3826: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3827: LD_ADDR_EXP 17
3831: PUSH
3832: LD_OWVAR 16
3836: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3837: LD_ADDR_EXP 18
3841: PUSH
3842: EMPTY
3843: PUSH
3844: EMPTY
3845: LIST
3846: ST_TO_ADDR
// for i in mp_teams do
3847: LD_ADDR_VAR 0 2
3851: PUSH
3852: LD_OWVAR 12
3856: PUSH
3857: FOR_IN
3858: IFFALSE 3901
// if i then
3860: LD_VAR 0 2
3864: IFFALSE 3899
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3866: LD_ADDR_EXP 18
3870: PUSH
3871: LD_EXP 18
3875: PPUSH
3876: LD_INT 1
3878: PPUSH
3879: LD_EXP 18
3883: PUSH
3884: LD_INT 1
3886: ARRAY
3887: PUSH
3888: LD_VAR 0 2
3892: UNION
3893: PPUSH
3894: CALL_OW 1
3898: ST_TO_ADDR
3899: GO 3857
3901: POP
3902: POP
// for i := 1 to multi_settings_counter do
3903: LD_ADDR_VAR 0 2
3907: PUSH
3908: DOUBLE
3909: LD_INT 1
3911: DEC
3912: ST_TO_ADDR
3913: LD_EXP 26
3917: PUSH
3918: FOR_TO
3919: IFFALSE 3961
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
3921: LD_ADDR_EXP 25
3925: PUSH
3926: LD_EXP 25
3930: PPUSH
3931: LD_EXP 25
3935: PUSH
3936: LD_INT 1
3938: PLUS
3939: PPUSH
3940: LD_VAR 0 2
3944: PPUSH
3945: CALL_OW 426
3949: PUSH
3950: LD_INT 1
3952: PLUS
3953: PPUSH
3954: CALL_OW 1
3958: ST_TO_ADDR
3959: GO 3918
3961: POP
3962: POP
// end else
3963: GO 4147
// begin your_side := 3 ;
3965: LD_ADDR_OWVAR 2
3969: PUSH
3970: LD_INT 3
3972: ST_TO_ADDR
// multi_gametype := 1 ;
3973: LD_ADDR_EXP 14
3977: PUSH
3978: LD_INT 1
3980: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
3981: LD_ADDR_EXP 15
3985: PUSH
3986: LD_INT 0
3988: PUSH
3989: LD_INT 0
3991: PUSH
3992: LD_INT 2
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 0
4003: PUSH
4004: LD_INT 1
4006: PUSH
4007: LD_INT 0
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: LIST
4014: LIST
4015: LIST
4016: LIST
4017: LIST
4018: LIST
4019: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4020: LD_ADDR_EXP 16
4024: PUSH
4025: LD_INT 0
4027: PUSH
4028: LD_INT 0
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: LD_INT 0
4036: PUSH
4037: LD_INT 0
4039: PUSH
4040: LD_INT 0
4042: PUSH
4043: LD_INT 1
4045: PUSH
4046: LD_INT 0
4048: PUSH
4049: EMPTY
4050: LIST
4051: LIST
4052: LIST
4053: LIST
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4059: LD_ADDR_EXP 17
4063: PUSH
4064: LD_INT 0
4066: PUSH
4067: LD_INT 0
4069: PUSH
4070: LD_INT 3
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: LD_INT 0
4081: PUSH
4082: LD_INT 3
4084: PUSH
4085: LD_INT 0
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: LIST
4097: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4098: LD_ADDR_EXP 18
4102: PUSH
4103: LD_INT 3
4105: PUSH
4106: LD_INT 7
4108: PUSH
4109: EMPTY
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4116: LD_ADDR_EXP 25
4120: PUSH
4121: LD_INT 2
4123: PUSH
4124: LD_INT 1
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 2
4135: PUSH
4136: LD_INT 4
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4147: LD_ADDR_EXP 19
4151: PUSH
4152: LD_INT 0
4154: PUSH
4155: LD_INT 0
4157: PUSH
4158: LD_INT 0
4160: PUSH
4161: LD_INT 0
4163: PUSH
4164: LD_INT 0
4166: PUSH
4167: LD_INT 0
4169: PUSH
4170: LD_INT 0
4172: PUSH
4173: LD_INT 0
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4186: LD_ADDR_EXP 22
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: LD_INT 0
4196: PUSH
4197: LD_INT 0
4199: PUSH
4200: LD_INT 0
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: LD_INT 0
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: LIST
4222: LIST
4223: LIST
4224: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4225: LD_ADDR_EXP 32
4229: PUSH
4230: LD_INT 0
4232: PUSH
4233: LD_INT 0
4235: PUSH
4236: LD_INT 0
4238: PUSH
4239: LD_INT 0
4241: PUSH
4242: LD_INT 0
4244: PUSH
4245: LD_INT 0
4247: PUSH
4248: LD_INT 0
4250: PUSH
4251: LD_INT 0
4253: PUSH
4254: EMPTY
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: ST_TO_ADDR
// multi_teamgame := true ;
4264: LD_ADDR_EXP 23
4268: PUSH
4269: LD_INT 1
4271: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4272: LD_ADDR_EXP 21
4276: PUSH
4277: LD_INT 3
4279: PUSH
4280: EMPTY
4281: LIST
4282: ST_TO_ADDR
// multi_custom_commanders := true ;
4283: LD_ADDR_EXP 24
4287: PUSH
4288: LD_INT 1
4290: ST_TO_ADDR
// multi_commanders := [ ] ;
4291: LD_ADDR_EXP 31
4295: PUSH
4296: EMPTY
4297: ST_TO_ADDR
// multi_players_amount := 0 ;
4298: LD_ADDR_EXP 33
4302: PUSH
4303: LD_INT 0
4305: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4306: LD_ADDR_EXP 20
4310: PUSH
4311: LD_INT 3
4313: PUSH
4314: LD_INT 3
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 4
4323: PUSH
4324: LD_INT 6
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4335: LD_ADDR_EXP 35
4339: PUSH
4340: LD_INT 0
4342: PUSH
4343: LD_INT 108
4345: PUSH
4346: LD_INT 110
4348: PUSH
4349: LD_INT 2
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 32
4363: PUSH
4364: LD_INT 117
4366: PUSH
4367: LD_INT 101
4369: PUSH
4370: LD_INT 3
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: PUSH
4378: LD_INT 44
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 32
4388: PUSH
4389: LD_INT 124
4391: PUSH
4392: LD_INT 107
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 43
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_INT 32
4413: PUSH
4414: LD_INT 94
4416: PUSH
4417: LD_INT 114
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 44
4430: PUSH
4431: EMPTY
4432: LIST
4433: LIST
4434: LIST
4435: PUSH
4436: LD_INT 32
4438: PUSH
4439: LD_INT 110
4441: PUSH
4442: LD_INT 94
4444: PUSH
4445: LD_INT 4
4447: PUSH
4448: EMPTY
4449: LIST
4450: LIST
4451: LIST
4452: PUSH
4453: LD_INT 44
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: LIST
4460: PUSH
4461: LD_INT 29
4463: PUSH
4464: LD_INT 126
4466: PUSH
4467: LD_INT 124
4469: PUSH
4470: LD_INT 5
4472: PUSH
4473: EMPTY
4474: LIST
4475: LIST
4476: LIST
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 26
4484: PUSH
4485: LD_INT 101
4487: PUSH
4488: LD_INT 115
4490: PUSH
4491: LD_INT 0
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 26
4505: PUSH
4506: LD_INT 125
4508: PUSH
4509: LD_INT 121
4511: PUSH
4512: LD_INT 3
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: LIST
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: LD_INT 3
4526: PUSH
4527: LD_INT 109
4529: PUSH
4530: LD_INT 126
4532: PUSH
4533: LD_INT 0
4535: PUSH
4536: EMPTY
4537: LIST
4538: LIST
4539: LIST
4540: PUSH
4541: EMPTY
4542: LIST
4543: LIST
4544: PUSH
4545: LD_INT 17
4547: PUSH
4548: LD_INT 112
4550: PUSH
4551: LD_INT 129
4553: PUSH
4554: LD_INT 5
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: LIST
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: PUSH
4566: EMPTY
4567: LIST
4568: LIST
4569: LIST
4570: LIST
4571: LIST
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: LIST
4577: PUSH
4578: LD_INT 31
4580: PUSH
4581: LD_INT 95
4583: PUSH
4584: LD_INT 36
4586: PUSH
4587: LD_INT 4
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 31
4601: PUSH
4602: LD_INT 116
4604: PUSH
4605: LD_INT 66
4607: PUSH
4608: LD_INT 3
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: EMPTY
4617: LIST
4618: LIST
4619: PUSH
4620: LD_INT 31
4622: PUSH
4623: LD_INT 157
4625: PUSH
4626: LD_INT 159
4628: PUSH
4629: LD_INT 4
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: PUSH
4637: EMPTY
4638: LIST
4639: LIST
4640: PUSH
4641: LD_INT 31
4643: PUSH
4644: LD_INT 75
4646: PUSH
4647: LD_INT 88
4649: PUSH
4650: LD_INT 3
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: LIST
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 31
4664: PUSH
4665: LD_INT 63
4667: PUSH
4668: LD_INT 82
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: LIST
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 31
4685: PUSH
4686: LD_INT 106
4688: PUSH
4689: LD_INT 147
4691: PUSH
4692: LD_INT 4
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: PUSH
4700: EMPTY
4701: LIST
4702: LIST
4703: PUSH
4704: LD_INT 2
4706: PUSH
4707: LD_INT 124
4709: PUSH
4710: LD_INT 164
4712: PUSH
4713: LD_INT 5
4715: PUSH
4716: EMPTY
4717: LIST
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: LIST
4724: PUSH
4725: LD_INT 4
4727: PUSH
4728: LD_INT 129
4730: PUSH
4731: LD_INT 159
4733: PUSH
4734: LD_INT 4
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: LIST
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: PUSH
4756: EMPTY
4757: PUSH
4758: EMPTY
4759: PUSH
4760: EMPTY
4761: PUSH
4762: EMPTY
4763: PUSH
4764: EMPTY
4765: PUSH
4766: EMPTY
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4778: LD_ADDR_EXP 30
4782: PUSH
4783: EMPTY
4784: PUSH
4785: LD_INT 21
4787: PUSH
4788: LD_INT 1
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: LD_INT 42
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: LD_INT 1
4811: PUSH
4812: LD_INT 51
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: PUSH
4821: LD_INT 22
4823: PUSH
4824: LD_INT 1
4826: PUSH
4827: LD_INT 1
4829: PUSH
4830: LD_INT 44
4832: PUSH
4833: LD_INT 43
4835: PUSH
4836: LD_INT 42
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: LD_OWVAR 67
4848: ARRAY
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: LD_INT 1
4864: PUSH
4865: LD_INT 44
4867: PUSH
4868: LD_INT 43
4870: PUSH
4871: LD_INT 42
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_OWVAR 67
4883: ARRAY
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 22
4893: PUSH
4894: LD_INT 1
4896: PUSH
4897: LD_INT 1
4899: PUSH
4900: LD_INT 44
4902: PUSH
4903: LD_INT 43
4905: PUSH
4906: LD_INT 42
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: PUSH
4914: LD_OWVAR 67
4918: ARRAY
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: EMPTY
4934: PUSH
4935: EMPTY
4936: PUSH
4937: EMPTY
4938: PUSH
4939: EMPTY
4940: PUSH
4941: EMPTY
4942: PUSH
4943: EMPTY
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: LIST
4954: ST_TO_ADDR
// for i := 1 to 8 do
4955: LD_ADDR_VAR 0 2
4959: PUSH
4960: DOUBLE
4961: LD_INT 1
4963: DEC
4964: ST_TO_ADDR
4965: LD_INT 8
4967: PUSH
4968: FOR_TO
4969: IFFALSE 5298
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
4971: LD_VAR 0 2
4975: PPUSH
4976: CALL_OW 530
4980: IFFALSE 5138
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
4982: LD_ADDR_EXP 19
4986: PUSH
4987: LD_EXP 19
4991: PPUSH
4992: LD_VAR 0 2
4996: PPUSH
4997: LD_INT 1
4999: PPUSH
5000: CALL_OW 1
5004: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5005: LD_ADDR_EXP 17
5009: PUSH
5010: LD_EXP 17
5014: PPUSH
5015: LD_VAR 0 2
5019: PPUSH
5020: LD_INT 0
5022: PPUSH
5023: CALL_OW 1
5027: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5028: LD_ADDR_EXP 15
5032: PUSH
5033: LD_EXP 15
5037: PPUSH
5038: LD_VAR 0 2
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 1
5050: ST_TO_ADDR
// for j = 1 to multi_teams do
5051: LD_ADDR_VAR 0 3
5055: PUSH
5056: DOUBLE
5057: LD_INT 1
5059: DEC
5060: ST_TO_ADDR
5061: LD_EXP 18
5065: PUSH
5066: FOR_TO
5067: IFFALSE 5136
// begin if i in multi_teams [ j ] then
5069: LD_VAR 0 2
5073: PUSH
5074: LD_EXP 18
5078: PUSH
5079: LD_VAR 0 3
5083: ARRAY
5084: IN
5085: IFFALSE 5134
// begin tmp := multi_teams [ j ] diff i ;
5087: LD_ADDR_VAR 0 5
5091: PUSH
5092: LD_EXP 18
5096: PUSH
5097: LD_VAR 0 3
5101: ARRAY
5102: PUSH
5103: LD_VAR 0 2
5107: DIFF
5108: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5109: LD_ADDR_EXP 18
5113: PUSH
5114: LD_EXP 18
5118: PPUSH
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_VAR 0 5
5128: PPUSH
5129: CALL_OW 1
5133: ST_TO_ADDR
// end ; end ;
5134: GO 5066
5136: POP
5137: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5138: LD_EXP 17
5142: PUSH
5143: LD_VAR 0 2
5147: ARRAY
5148: PUSH
5149: LD_EXP 17
5153: PUSH
5154: LD_VAR 0 2
5158: ARRAY
5159: PUSH
5160: LD_EXP 21
5164: IN
5165: NOT
5166: AND
5167: IFFALSE 5208
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5169: LD_ADDR_EXP 17
5173: PUSH
5174: LD_EXP 17
5178: PPUSH
5179: LD_VAR 0 2
5183: PPUSH
5184: LD_EXP 21
5188: PUSH
5189: LD_INT 1
5191: PPUSH
5192: LD_EXP 21
5196: PPUSH
5197: CALL_OW 12
5201: ARRAY
5202: PPUSH
5203: CALL_OW 1
5207: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5208: LD_EXP 17
5212: PUSH
5213: LD_VAR 0 2
5217: ARRAY
5218: NOT
5219: PUSH
5220: LD_EXP 15
5224: PUSH
5225: LD_VAR 0 2
5229: ARRAY
5230: NOT
5231: AND
5232: PUSH
5233: LD_EXP 19
5237: PUSH
5238: LD_VAR 0 2
5242: ARRAY
5243: NOT
5244: AND
5245: IFFALSE 5270
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5247: LD_ADDR_EXP 22
5251: PUSH
5252: LD_EXP 22
5256: PPUSH
5257: LD_VAR 0 2
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 1
5269: ST_TO_ADDR
// if multi_sides [ i ] then
5270: LD_EXP 15
5274: PUSH
5275: LD_VAR 0 2
5279: ARRAY
5280: IFFALSE 5296
// multi_players_amount := multi_players_amount + 1 ;
5282: LD_ADDR_EXP 33
5286: PUSH
5287: LD_EXP 33
5291: PUSH
5292: LD_INT 1
5294: PLUS
5295: ST_TO_ADDR
// end ;
5296: GO 4968
5298: POP
5299: POP
// for i in multi_teams do
5300: LD_ADDR_VAR 0 2
5304: PUSH
5305: LD_EXP 18
5309: PUSH
5310: FOR_IN
5311: IFFALSE 5419
// begin for j = 2 to i do
5313: LD_ADDR_VAR 0 3
5317: PUSH
5318: DOUBLE
5319: LD_INT 2
5321: DEC
5322: ST_TO_ADDR
5323: LD_VAR 0 2
5327: PUSH
5328: FOR_TO
5329: IFFALSE 5415
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5331: LD_VAR 0 2
5335: PUSH
5336: LD_VAR 0 3
5340: ARRAY
5341: PPUSH
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 1
5349: ARRAY
5350: PPUSH
5351: CALL_OW 343
// for x = 1 to j - 1 do
5355: LD_ADDR_VAR 0 4
5359: PUSH
5360: DOUBLE
5361: LD_INT 1
5363: DEC
5364: ST_TO_ADDR
5365: LD_VAR 0 3
5369: PUSH
5370: LD_INT 1
5372: MINUS
5373: PUSH
5374: FOR_TO
5375: IFFALSE 5411
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5377: LD_VAR 0 2
5381: PUSH
5382: LD_VAR 0 3
5386: ARRAY
5387: PPUSH
5388: LD_VAR 0 2
5392: PUSH
5393: LD_VAR 0 4
5397: ARRAY
5398: PPUSH
5399: LD_INT 1
5401: PPUSH
5402: LD_INT 1
5404: PPUSH
5405: CALL_OW 80
5409: GO 5374
5411: POP
5412: POP
// end ;
5413: GO 5328
5415: POP
5416: POP
// end ;
5417: GO 5310
5419: POP
5420: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5421: LD_ADDR_OWVAR 67
5425: PUSH
5426: LD_INT 1
5428: PUSH
5429: LD_INT 2
5431: PUSH
5432: LD_INT 3
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: LIST
5439: PUSH
5440: LD_EXP 25
5444: PUSH
5445: LD_INT 1
5447: ARRAY
5448: ARRAY
5449: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5450: LD_ADDR_EXP 27
5454: PUSH
5455: LD_INT 9
5457: PUSH
5458: LD_INT 12
5460: PUSH
5461: LD_INT 15
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: PUSH
5469: LD_EXP 25
5473: PUSH
5474: LD_INT 2
5476: ARRAY
5477: ARRAY
5478: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5479: LD_ADDR_EXP 28
5483: PUSH
5484: LD_INT 1
5486: PUSH
5487: LD_INT 3
5489: PUSH
5490: LD_INT 4
5492: PUSH
5493: LD_INT 6
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: PUSH
5502: LD_EXP 25
5506: PUSH
5507: LD_INT 3
5509: ARRAY
5510: ARRAY
5511: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5512: LD_ADDR_EXP 34
5516: PUSH
5517: LD_INT 3500
5519: PUSH
5520: LD_INT 5000
5522: PUSH
5523: LD_INT 7500
5525: PUSH
5526: LD_INT 10000
5528: PUSH
5529: LD_INT 15000
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: LD_EXP 25
5543: PUSH
5544: LD_INT 4
5546: ARRAY
5547: ARRAY
5548: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5549: LD_ADDR_EXP 29
5553: PUSH
5554: LD_INT 1000
5556: PUSH
5557: LD_INT 1260
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: LD_INT 2000
5566: PUSH
5567: LD_INT 1050
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PUSH
5574: LD_INT 3000
5576: PUSH
5577: LD_INT 840
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 4000
5586: PUSH
5587: LD_INT 630
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: PUSH
5600: LD_EXP 25
5604: PUSH
5605: LD_INT 5
5607: ARRAY
5608: ARRAY
5609: ST_TO_ADDR
// end ;
5610: LD_VAR 0 1
5614: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5615: LD_INT 0
5617: PPUSH
5618: PPUSH
// if not multi_sides [ preferSide ] then
5619: LD_EXP 15
5623: PUSH
5624: LD_VAR 0 1
5628: ARRAY
5629: NOT
5630: IFFALSE 5644
// begin result := preferSide ;
5632: LD_ADDR_VAR 0 2
5636: PUSH
5637: LD_VAR 0 1
5641: ST_TO_ADDR
// exit ;
5642: GO 5691
// end ; for i := 1 to 8 do
5644: LD_ADDR_VAR 0 3
5648: PUSH
5649: DOUBLE
5650: LD_INT 1
5652: DEC
5653: ST_TO_ADDR
5654: LD_INT 8
5656: PUSH
5657: FOR_TO
5658: IFFALSE 5689
// if not multi_sides [ i ] then
5660: LD_EXP 15
5664: PUSH
5665: LD_VAR 0 3
5669: ARRAY
5670: NOT
5671: IFFALSE 5687
// begin result := i ;
5673: LD_ADDR_VAR 0 2
5677: PUSH
5678: LD_VAR 0 3
5682: ST_TO_ADDR
// exit ;
5683: POP
5684: POP
5685: GO 5691
// end ;
5687: GO 5657
5689: POP
5690: POP
// end ;
5691: LD_VAR 0 2
5695: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5696: LD_INT 0
5698: PPUSH
// uc_side := side ;
5699: LD_ADDR_OWVAR 20
5703: PUSH
5704: LD_VAR 0 1
5708: ST_TO_ADDR
// uc_nation := nation_russian ;
5709: LD_ADDR_OWVAR 21
5713: PUSH
5714: LD_INT 3
5716: ST_TO_ADDR
// hc_importance := 100 ;
5717: LD_ADDR_OWVAR 32
5721: PUSH
5722: LD_INT 100
5724: ST_TO_ADDR
// if num = 1 then
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 1
5732: EQUAL
5733: IFFALSE 5800
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5735: LD_INT 1
5737: PPUSH
5738: LD_EXP 28
5742: PUSH
5743: LD_INT 1
5745: PLUS
5746: PPUSH
5747: CALL_OW 381
// hc_gallery := ru ;
5751: LD_ADDR_OWVAR 33
5755: PUSH
5756: LD_STRING ru
5758: ST_TO_ADDR
// hc_face_number := 13 ;
5759: LD_ADDR_OWVAR 34
5763: PUSH
5764: LD_INT 13
5766: ST_TO_ADDR
// hc_name := Kuzmov ;
5767: LD_ADDR_OWVAR 26
5771: PUSH
5772: LD_STRING Kuzmov
5774: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5775: LD_ADDR_OWVAR 29
5779: PUSH
5780: LD_INT 11
5782: PUSH
5783: LD_INT 11
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: ST_TO_ADDR
// result := CreateHuman ;
5790: LD_ADDR_VAR 0 3
5794: PUSH
5795: CALL_OW 44
5799: ST_TO_ADDR
// end ; if num = 2 then
5800: LD_VAR 0 2
5804: PUSH
5805: LD_INT 2
5807: EQUAL
5808: IFFALSE 5875
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5810: LD_INT 1
5812: PPUSH
5813: LD_EXP 28
5817: PUSH
5818: LD_INT 2
5820: PLUS
5821: PPUSH
5822: CALL_OW 383
// hc_gallery := ru ;
5826: LD_ADDR_OWVAR 33
5830: PUSH
5831: LD_STRING ru
5833: ST_TO_ADDR
// hc_face_number := 1 ;
5834: LD_ADDR_OWVAR 34
5838: PUSH
5839: LD_INT 1
5841: ST_TO_ADDR
// hc_name := Burlak ;
5842: LD_ADDR_OWVAR 26
5846: PUSH
5847: LD_STRING Burlak
5849: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5850: LD_ADDR_OWVAR 29
5854: PUSH
5855: LD_INT 10
5857: PUSH
5858: LD_INT 11
5860: PUSH
5861: EMPTY
5862: LIST
5863: LIST
5864: ST_TO_ADDR
// result := CreateHuman ;
5865: LD_ADDR_VAR 0 3
5869: PUSH
5870: CALL_OW 44
5874: ST_TO_ADDR
// end ; end ;
5875: LD_VAR 0 3
5879: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
5880: LD_INT 0
5882: PPUSH
5883: PPUSH
5884: PPUSH
5885: PPUSH
5886: PPUSH
5887: PPUSH
5888: PPUSH
5889: PPUSH
5890: PPUSH
5891: PPUSH
// for i := 1 to 8 do
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: DOUBLE
5898: LD_INT 1
5900: DEC
5901: ST_TO_ADDR
5902: LD_INT 8
5904: PUSH
5905: FOR_TO
5906: IFFALSE 7328
// begin if not multi_sides [ i ] then
5908: LD_EXP 15
5912: PUSH
5913: LD_VAR 0 2
5917: ARRAY
5918: NOT
5919: IFFALSE 5923
// continue ;
5921: GO 5905
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
5923: LD_ADDR_VAR 0 8
5927: PUSH
5928: LD_EXP 30
5932: PUSH
5933: LD_EXP 15
5937: PUSH
5938: LD_VAR 0 2
5942: ARRAY
5943: ARRAY
5944: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
5945: LD_EXP 35
5949: PUSH
5950: LD_EXP 15
5954: PUSH
5955: LD_VAR 0 2
5959: ARRAY
5960: ARRAY
5961: IFFALSE 6258
// begin uc_side := i ;
5963: LD_ADDR_OWVAR 20
5967: PUSH
5968: LD_VAR 0 2
5972: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5973: LD_ADDR_OWVAR 21
5977: PUSH
5978: LD_EXP 17
5982: PUSH
5983: LD_VAR 0 2
5987: ARRAY
5988: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
5989: LD_ADDR_VAR 0 3
5993: PUSH
5994: LD_EXP 35
5998: PUSH
5999: LD_EXP 15
6003: PUSH
6004: LD_VAR 0 2
6008: ARRAY
6009: ARRAY
6010: PUSH
6011: FOR_IN
6012: IFFALSE 6256
// begin if j [ 1 ] = b_oil_mine then
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PUSH
6023: LD_INT 29
6025: EQUAL
6026: IFFALSE 6063
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6028: LD_VAR 0 3
6032: PUSH
6033: LD_INT 2
6035: ARRAY
6036: PUSH
6037: LD_INT 1
6039: ARRAY
6040: PPUSH
6041: LD_VAR 0 3
6045: PUSH
6046: LD_INT 2
6048: ARRAY
6049: PUSH
6050: LD_INT 2
6052: ARRAY
6053: PPUSH
6054: LD_VAR 0 2
6058: PPUSH
6059: CALL_OW 441
// bc_type := j [ 1 ] ;
6063: LD_ADDR_OWVAR 42
6067: PUSH
6068: LD_VAR 0 3
6072: PUSH
6073: LD_INT 1
6075: ARRAY
6076: ST_TO_ADDR
// bc_level := 3 ;
6077: LD_ADDR_OWVAR 43
6081: PUSH
6082: LD_INT 3
6084: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6085: LD_ADDR_VAR 0 4
6089: PUSH
6090: LD_VAR 0 3
6094: PUSH
6095: LD_INT 2
6097: ARRAY
6098: PUSH
6099: LD_INT 1
6101: ARRAY
6102: PPUSH
6103: LD_VAR 0 3
6107: PUSH
6108: LD_INT 2
6110: ARRAY
6111: PUSH
6112: LD_INT 2
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 3
6120: PUSH
6121: LD_INT 2
6123: ARRAY
6124: PUSH
6125: LD_INT 3
6127: ARRAY
6128: PPUSH
6129: CALL_OW 47
6133: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6134: LD_VAR 0 3
6138: PUSH
6139: LD_INT 1
6141: ARRAY
6142: PUSH
6143: LD_INT 0
6145: EQUAL
6146: IFFALSE 6222
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6148: LD_VAR 0 4
6152: PPUSH
6153: CALL_OW 274
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_INT 450
6163: PUSH
6164: LD_INT 350
6166: PUSH
6167: LD_INT 230
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: PUSH
6175: LD_OWVAR 67
6179: ARRAY
6180: PPUSH
6181: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 274
6194: PPUSH
6195: LD_INT 2
6197: PPUSH
6198: LD_INT 90
6200: PUSH
6201: LD_INT 60
6203: PUSH
6204: LD_INT 40
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: PUSH
6212: LD_OWVAR 67
6216: ARRAY
6217: PPUSH
6218: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6222: LD_VAR 0 3
6226: PUSH
6227: LD_INT 1
6229: ARRAY
6230: PUSH
6231: LD_INT 32
6233: EQUAL
6234: IFFALSE 6254
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6236: LD_VAR 0 4
6240: PPUSH
6241: LD_VAR 0 3
6245: PUSH
6246: LD_INT 3
6248: ARRAY
6249: PPUSH
6250: CALL_OW 431
// end ;
6254: GO 6011
6256: POP
6257: POP
// end ; if multi_custom_commanders then
6258: LD_EXP 24
6262: IFFALSE 6479
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6264: LD_ADDR_VAR 0 6
6268: PUSH
6269: LD_VAR 0 2
6273: PPUSH
6274: LD_EXP 15
6278: PUSH
6279: LD_VAR 0 2
6283: ARRAY
6284: PPUSH
6285: CALL 5696 0 2
6289: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6290: LD_ADDR_EXP 31
6294: PUSH
6295: LD_EXP 31
6299: PPUSH
6300: LD_EXP 31
6304: PUSH
6305: LD_INT 1
6307: PLUS
6308: PPUSH
6309: LD_VAR 0 6
6313: PPUSH
6314: CALL_OW 2
6318: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6319: LD_VAR 0 6
6323: PPUSH
6324: CALL_OW 257
6328: PUSH
6329: LD_INT 3
6331: EQUAL
6332: IFFALSE 6444
// begin uc_nation := nation_russian ;
6334: LD_ADDR_OWVAR 21
6338: PUSH
6339: LD_INT 3
6341: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6342: LD_INT 23
6344: PPUSH
6345: LD_INT 1
6347: PPUSH
6348: LD_INT 1
6350: PPUSH
6351: LD_INT 44
6353: PPUSH
6354: LD_INT 80
6356: PPUSH
6357: CALL 19863 0 5
// veh := CreateVehicle ;
6361: LD_ADDR_VAR 0 7
6365: PUSH
6366: CALL_OW 45
6370: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6371: LD_VAR 0 7
6375: PPUSH
6376: LD_VAR 0 6
6380: PPUSH
6381: CALL_OW 255
6385: PUSH
6386: LD_INT 1
6388: NEG
6389: MUL
6390: PPUSH
6391: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6395: LD_VAR 0 7
6399: PPUSH
6400: LD_EXP 20
6404: PUSH
6405: LD_EXP 15
6409: PUSH
6410: LD_VAR 0 2
6414: ARRAY
6415: ARRAY
6416: PUSH
6417: LD_INT 2
6419: ARRAY
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6428: LD_VAR 0 6
6432: PPUSH
6433: LD_VAR 0 7
6437: PPUSH
6438: CALL_OW 52
// end else
6442: GO 6477
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6444: LD_VAR 0 6
6448: PPUSH
6449: LD_EXP 20
6453: PUSH
6454: LD_EXP 15
6458: PUSH
6459: LD_VAR 0 2
6463: ARRAY
6464: ARRAY
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// end else
6477: GO 6690
// begin uc_side := i ;
6479: LD_ADDR_OWVAR 20
6483: PUSH
6484: LD_VAR 0 2
6488: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6489: LD_ADDR_OWVAR 21
6493: PUSH
6494: LD_EXP 17
6498: PUSH
6499: LD_VAR 0 2
6503: ARRAY
6504: ST_TO_ADDR
// hc_importance := 100 ;
6505: LD_ADDR_OWVAR 32
6509: PUSH
6510: LD_INT 100
6512: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6513: LD_INT 0
6515: PPUSH
6516: LD_INT 1
6518: PPUSH
6519: LD_EXP 28
6523: PPUSH
6524: CALL_OW 380
// if multiplayer then
6528: LD_OWVAR 4
6532: IFFALSE 6590
// begin hc_name := mp_sides_players_names [ i ] ;
6534: LD_ADDR_OWVAR 26
6538: PUSH
6539: LD_OWVAR 19
6543: PUSH
6544: LD_VAR 0 2
6548: ARRAY
6549: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6550: LD_ADDR_OWVAR 33
6554: PUSH
6555: LD_STRING MULTIAVATARS
6557: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6558: LD_ADDR_OWVAR 34
6562: PUSH
6563: LD_VAR 0 2
6567: PPUSH
6568: CALL_OW 525
6572: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6573: LD_ADDR_OWVAR 27
6577: PUSH
6578: LD_VAR 0 2
6582: PPUSH
6583: CALL_OW 526
6587: ST_TO_ADDR
// end else
6588: GO 6622
// begin hc_gallery :=  ;
6590: LD_ADDR_OWVAR 33
6594: PUSH
6595: LD_STRING 
6597: ST_TO_ADDR
// hc_name :=  ;
6598: LD_ADDR_OWVAR 26
6602: PUSH
6603: LD_STRING 
6605: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6606: LD_ADDR_OWVAR 27
6610: PUSH
6611: LD_INT 1
6613: PPUSH
6614: LD_INT 2
6616: PPUSH
6617: CALL_OW 12
6621: ST_TO_ADDR
// end ; un := CreateHuman ;
6622: LD_ADDR_VAR 0 6
6626: PUSH
6627: CALL_OW 44
6631: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6632: LD_VAR 0 6
6636: PPUSH
6637: LD_EXP 20
6641: PUSH
6642: LD_EXP 15
6646: PUSH
6647: LD_VAR 0 2
6651: ARRAY
6652: ARRAY
6653: PUSH
6654: LD_INT 1
6656: ARRAY
6657: PPUSH
6658: LD_INT 0
6660: PPUSH
6661: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6665: LD_ADDR_EXP 31
6669: PUSH
6670: LD_EXP 31
6674: PPUSH
6675: LD_VAR 0 2
6679: PPUSH
6680: LD_VAR 0 6
6684: PPUSH
6685: CALL_OW 1
6689: ST_TO_ADDR
// end ; InitHc ;
6690: CALL_OW 19
// InitUc ;
6694: CALL_OW 18
// uc_side := i ;
6698: LD_ADDR_OWVAR 20
6702: PUSH
6703: LD_VAR 0 2
6707: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6708: LD_ADDR_OWVAR 21
6712: PUSH
6713: LD_EXP 17
6717: PUSH
6718: LD_VAR 0 2
6722: ARRAY
6723: ST_TO_ADDR
// hc_gallery :=  ;
6724: LD_ADDR_OWVAR 33
6728: PUSH
6729: LD_STRING 
6731: ST_TO_ADDR
// hc_name :=  ;
6732: LD_ADDR_OWVAR 26
6736: PUSH
6737: LD_STRING 
6739: ST_TO_ADDR
// hc_importance := 0 ;
6740: LD_ADDR_OWVAR 32
6744: PUSH
6745: LD_INT 0
6747: ST_TO_ADDR
// cl := 1 ;
6748: LD_ADDR_VAR 0 5
6752: PUSH
6753: LD_INT 1
6755: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6756: LD_ADDR_VAR 0 3
6760: PUSH
6761: DOUBLE
6762: LD_INT 2
6764: DEC
6765: ST_TO_ADDR
6766: LD_EXP 27
6770: PUSH
6771: FOR_TO
6772: IFFALSE 7324
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6774: LD_VAR 0 3
6778: PUSH
6779: LD_INT 1
6781: MINUS
6782: PUSH
6783: LD_EXP 27
6787: PUSH
6788: LD_INT 1
6790: MINUS
6791: PUSH
6792: LD_INT 4
6794: DIVREAL
6795: MOD
6796: PUSH
6797: LD_INT 0
6799: EQUAL
6800: IFFALSE 6816
// cl := cl + 1 ;
6802: LD_ADDR_VAR 0 5
6806: PUSH
6807: LD_VAR 0 5
6811: PUSH
6812: LD_INT 1
6814: PLUS
6815: ST_TO_ADDR
// if cl > 4 then
6816: LD_VAR 0 5
6820: PUSH
6821: LD_INT 4
6823: GREATER
6824: IFFALSE 6834
// cl := 1 ;
6826: LD_ADDR_VAR 0 5
6830: PUSH
6831: LD_INT 1
6833: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6834: LD_EXP 15
6838: PUSH
6839: LD_VAR 0 2
6843: ARRAY
6844: PUSH
6845: LD_INT 2
6847: EQUAL
6848: PUSH
6849: LD_VAR 0 5
6853: PUSH
6854: LD_INT 2
6856: EQUAL
6857: PUSH
6858: LD_VAR 0 5
6862: PUSH
6863: LD_INT 4
6865: EQUAL
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_VAR 0 2
6874: PUSH
6875: EMPTY
6876: LIST
6877: LIST
6878: PUSH
6879: LD_INT 25
6881: PUSH
6882: LD_INT 4
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PPUSH
6893: CALL_OW 69
6897: PUSH
6898: LD_INT 1
6900: GREATER
6901: AND
6902: OR
6903: AND
6904: IFFALSE 6923
// PrepareHuman ( false , 1 , multi_skill_level ) else
6906: LD_INT 0
6908: PPUSH
6909: LD_INT 1
6911: PPUSH
6912: LD_EXP 28
6916: PPUSH
6917: CALL_OW 380
6921: GO 6940
// PrepareHuman ( false , cl , multi_skill_level ) ;
6923: LD_INT 0
6925: PPUSH
6926: LD_VAR 0 5
6930: PPUSH
6931: LD_EXP 28
6935: PPUSH
6936: CALL_OW 380
// un := CreateHuman ;
6940: LD_ADDR_VAR 0 6
6944: PUSH
6945: CALL_OW 44
6949: ST_TO_ADDR
// if multi_pos_area then
6950: LD_EXP 20
6954: IFFALSE 7322
// begin if GetClass ( un ) = 3 and vehicles then
6956: LD_VAR 0 6
6960: PPUSH
6961: CALL_OW 257
6965: PUSH
6966: LD_INT 3
6968: EQUAL
6969: PUSH
6970: LD_VAR 0 8
6974: AND
6975: IFFALSE 7160
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
6977: LD_VAR 0 8
6981: PUSH
6982: LD_INT 1
6984: ARRAY
6985: PUSH
6986: LD_INT 1
6988: ARRAY
6989: PPUSH
6990: LD_VAR 0 8
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: PUSH
6999: LD_INT 2
7001: ARRAY
7002: PPUSH
7003: LD_VAR 0 8
7007: PUSH
7008: LD_INT 1
7010: ARRAY
7011: PUSH
7012: LD_INT 3
7014: ARRAY
7015: PPUSH
7016: LD_VAR 0 8
7020: PUSH
7021: LD_INT 1
7023: ARRAY
7024: PUSH
7025: LD_INT 4
7027: ARRAY
7028: PPUSH
7029: LD_INT 80
7031: PUSH
7032: LD_INT 60
7034: PUSH
7035: LD_INT 40
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: LD_OWVAR 67
7047: ARRAY
7048: PPUSH
7049: CALL 19863 0 5
// veh := CreateVehicle ;
7053: LD_ADDR_VAR 0 7
7057: PUSH
7058: CALL_OW 45
7062: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7063: LD_VAR 0 7
7067: PPUSH
7068: LD_EXP 20
7072: PUSH
7073: LD_EXP 15
7077: PUSH
7078: LD_VAR 0 2
7082: ARRAY
7083: ARRAY
7084: PUSH
7085: LD_INT 2
7087: ARRAY
7088: PPUSH
7089: LD_INT 0
7091: PPUSH
7092: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7096: LD_VAR 0 6
7100: PPUSH
7101: LD_VAR 0 7
7105: PPUSH
7106: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7110: LD_VAR 0 7
7114: PPUSH
7115: CALL_OW 264
7119: PUSH
7120: LD_INT 51
7122: EQUAL
7123: IFFALSE 7140
// SetCargo ( veh , mat_oil , 60 ) ;
7125: LD_VAR 0 7
7129: PPUSH
7130: LD_INT 2
7132: PPUSH
7133: LD_INT 60
7135: PPUSH
7136: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7140: LD_ADDR_VAR 0 8
7144: PUSH
7145: LD_VAR 0 8
7149: PPUSH
7150: LD_INT 1
7152: PPUSH
7153: CALL_OW 3
7157: ST_TO_ADDR
// continue ;
7158: GO 6771
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7160: LD_ADDR_VAR 0 9
7164: PUSH
7165: LD_INT 22
7167: PUSH
7168: LD_VAR 0 2
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: LD_INT 30
7182: PUSH
7183: LD_INT 32
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 30
7192: PUSH
7193: LD_INT 31
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 58
7207: PUSH
7208: EMPTY
7209: LIST
7210: PUSH
7211: EMPTY
7212: LIST
7213: LIST
7214: LIST
7215: PPUSH
7216: CALL_OW 69
7220: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7221: LD_VAR 0 6
7225: PPUSH
7226: CALL_OW 257
7230: PUSH
7231: LD_INT 1
7233: EQUAL
7234: PUSH
7235: LD_VAR 0 9
7239: AND
7240: IFFALSE 7289
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7242: LD_VAR 0 6
7246: PPUSH
7247: LD_VAR 0 9
7251: PUSH
7252: LD_INT 1
7254: ARRAY
7255: PPUSH
7256: CALL_OW 254
7260: PUSH
7261: LD_INT 3
7263: MINUS
7264: PPUSH
7265: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7269: LD_VAR 0 6
7273: PPUSH
7274: LD_VAR 0 9
7278: PUSH
7279: LD_INT 1
7281: ARRAY
7282: PPUSH
7283: CALL_OW 52
// continue ;
7287: GO 6771
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7289: LD_VAR 0 6
7293: PPUSH
7294: LD_EXP 20
7298: PUSH
7299: LD_EXP 15
7303: PUSH
7304: LD_VAR 0 2
7308: ARRAY
7309: ARRAY
7310: PUSH
7311: LD_INT 1
7313: ARRAY
7314: PPUSH
7315: LD_INT 0
7317: PPUSH
7318: CALL_OW 49
// end ; end ;
7322: GO 6771
7324: POP
7325: POP
// end ;
7326: GO 5905
7328: POP
7329: POP
// end ;
7330: LD_VAR 0 1
7334: RET
// export function Multiplayer_Start ( ) ; begin
7335: LD_INT 0
7337: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7338: CALL 5880 0 0
// Multiplayer_InitPointSystem ( ) ;
7342: CALL 8053 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7346: LD_INT 20
7348: PPUSH
7349: CALL 8229 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7353: LD_INT 150
7355: PPUSH
7356: CALL 8229 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7360: LD_INT 5
7362: PPUSH
7363: CALL 8229 0 1
// Multiplayer_RegisterCondition ( - 120 ) ;
7367: LD_INT 120
7369: NEG
7370: PPUSH
7371: CALL 8229 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7375: LD_INT 60
7377: NEG
7378: PPUSH
7379: CALL 8229 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7383: LD_INT 2
7385: PPUSH
7386: CALL 8229 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7390: LD_INT 110
7392: PPUSH
7393: CALL 8229 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7397: LD_INT 55
7399: PPUSH
7400: CALL 8229 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7404: LD_INT 1000
7406: NEG
7407: PPUSH
7408: CALL 8229 0 1
// if multi_sides [ your_side ] then
7412: LD_EXP 15
7416: PUSH
7417: LD_OWVAR 2
7421: ARRAY
7422: IFFALSE 7449
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7424: LD_INT 22
7426: PUSH
7427: LD_OWVAR 2
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PPUSH
7436: CALL_OW 69
7440: PUSH
7441: LD_INT 1
7443: ARRAY
7444: PPUSH
7445: CALL_OW 87
// end ;
7449: LD_VAR 0 1
7453: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7454: LD_INT 0
7456: PPUSH
7457: PPUSH
7458: PPUSH
7459: PPUSH
// repeat wait ( 0 0$1 ) ;
7460: LD_INT 35
7462: PPUSH
7463: CALL_OW 67
// points := 0 ;
7467: LD_ADDR_VAR 0 4
7471: PUSH
7472: LD_INT 0
7474: ST_TO_ADDR
// for i := 1 to 8 do
7475: LD_ADDR_VAR 0 2
7479: PUSH
7480: DOUBLE
7481: LD_INT 1
7483: DEC
7484: ST_TO_ADDR
7485: LD_INT 8
7487: PUSH
7488: FOR_TO
7489: IFFALSE 7515
// points := points + multi_points [ i ] ;
7491: LD_ADDR_VAR 0 4
7495: PUSH
7496: LD_VAR 0 4
7500: PUSH
7501: LD_EXP 36
7505: PUSH
7506: LD_VAR 0 2
7510: ARRAY
7511: PLUS
7512: ST_TO_ADDR
7513: GO 7488
7515: POP
7516: POP
// if not multi_custom_commanders then
7517: LD_EXP 24
7521: NOT
7522: IFFALSE 7635
// begin for i := 1 to 8 do
7524: LD_ADDR_VAR 0 2
7528: PUSH
7529: DOUBLE
7530: LD_INT 1
7532: DEC
7533: ST_TO_ADDR
7534: LD_INT 8
7536: PUSH
7537: FOR_TO
7538: IFFALSE 7609
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7540: LD_INT 22
7542: PUSH
7543: LD_VAR 0 2
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PPUSH
7552: CALL_OW 69
7556: PUSH
7557: LD_INT 0
7559: EQUAL
7560: PUSH
7561: LD_EXP 32
7565: PUSH
7566: LD_VAR 0 2
7570: ARRAY
7571: NOT
7572: AND
7573: IFFALSE 7607
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7575: LD_ADDR_EXP 32
7579: PUSH
7580: LD_EXP 32
7584: PPUSH
7585: LD_VAR 0 2
7589: PPUSH
7590: LD_INT 1
7592: PPUSH
7593: CALL_OW 1
7597: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7598: LD_VAR 0 2
7602: PPUSH
7603: CALL 8299 0 1
// end ; end ;
7607: GO 7537
7609: POP
7610: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7611: LD_EXP 32
7615: PPUSH
7616: CALL 17125 0 1
7620: PUSH
7621: LD_EXP 15
7625: PPUSH
7626: CALL 17125 0 1
7630: EQUAL
7631: IFFALSE 7635
// break ;
7633: GO 7676
// end ; if points >= multi_points_to_victory then
7635: LD_VAR 0 4
7639: PUSH
7640: LD_EXP 34
7644: GREATEREQUAL
7645: IFFALSE 7657
// begin winAllowed := true ;
7647: LD_ADDR_EXP 3
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// break ;
7655: GO 7676
// end ; until ( winAllowed and game ) or not multi_commanders ;
7657: LD_EXP 3
7661: PUSH
7662: LD_EXP 2
7666: AND
7667: PUSH
7668: LD_EXP 31
7672: NOT
7673: OR
7674: IFFALSE 7460
// game := false ;
7676: LD_ADDR_EXP 2
7680: PUSH
7681: LD_INT 0
7683: ST_TO_ADDR
// for i := 1 to 8 do
7684: LD_ADDR_VAR 0 2
7688: PUSH
7689: DOUBLE
7690: LD_INT 1
7692: DEC
7693: ST_TO_ADDR
7694: LD_INT 8
7696: PUSH
7697: FOR_TO
7698: IFFALSE 7734
// begin if multi_sides [ i ] then
7700: LD_EXP 15
7704: PUSH
7705: LD_VAR 0 2
7709: ARRAY
7710: IFFALSE 7732
// SetMultiScore ( i , multi_points [ i ] ) ;
7712: LD_VAR 0 2
7716: PPUSH
7717: LD_EXP 36
7721: PUSH
7722: LD_VAR 0 2
7726: ARRAY
7727: PPUSH
7728: CALL_OW 506
// end ;
7732: GO 7697
7734: POP
7735: POP
// if multi_loosers [ your_side ] then
7736: LD_EXP 32
7740: PUSH
7741: LD_OWVAR 2
7745: ARRAY
7746: IFFALSE 7769
// begin if Multiplayer then
7748: LD_OWVAR 4
7752: IFFALSE 7760
// YouLostInMultiplayer else
7754: CALL_OW 107
7758: GO 7767
// YouLost (  ) ;
7760: LD_STRING 
7762: PPUSH
7763: CALL_OW 104
// end else
7767: GO 7785
// begin if Multiplayer then
7769: LD_OWVAR 4
7773: IFFALSE 7781
// YouWinInMultiplayer else
7775: CALL_OW 106
7779: GO 7785
// YouWin ;
7781: CALL_OW 103
// end ; end ;
7785: LD_VAR 0 1
7789: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7790: LD_INT 0
7792: PPUSH
7793: PPUSH
// result := false ;
7794: LD_ADDR_VAR 0 1
7798: PUSH
7799: LD_INT 0
7801: ST_TO_ADDR
// for side in botSides do
7802: LD_ADDR_VAR 0 2
7806: PUSH
7807: LD_EXP 4
7811: PUSH
7812: FOR_IN
7813: IFFALSE 7874
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7815: LD_ADDR_VAR 0 1
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_VAR 0 2
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 21
7834: PUSH
7835: LD_INT 1
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 50
7844: PUSH
7845: EMPTY
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 69
7857: PUSH
7858: LD_INT 0
7860: GREATER
7861: ST_TO_ADDR
// if result then
7862: LD_VAR 0 1
7866: IFFALSE 7872
// exit ;
7868: POP
7869: POP
7870: GO 7876
// end ;
7872: GO 7812
7874: POP
7875: POP
// end ;
7876: LD_VAR 0 1
7880: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
7881: LD_INT 0
7883: PPUSH
7884: PPUSH
7885: PPUSH
// result := [ ] ;
7886: LD_ADDR_VAR 0 1
7890: PUSH
7891: EMPTY
7892: ST_TO_ADDR
// points := 0 ;
7893: LD_ADDR_VAR 0 3
7897: PUSH
7898: LD_INT 0
7900: ST_TO_ADDR
// for i := 1 to 8 do
7901: LD_ADDR_VAR 0 2
7905: PUSH
7906: DOUBLE
7907: LD_INT 1
7909: DEC
7910: ST_TO_ADDR
7911: LD_INT 8
7913: PUSH
7914: FOR_TO
7915: IFFALSE 7994
// begin points := points + multi_points [ i ] ;
7917: LD_ADDR_VAR 0 3
7921: PUSH
7922: LD_VAR 0 3
7926: PUSH
7927: LD_EXP 36
7931: PUSH
7932: LD_VAR 0 2
7936: ARRAY
7937: PLUS
7938: ST_TO_ADDR
// if multi_sides [ i ] then
7939: LD_EXP 15
7943: PUSH
7944: LD_VAR 0 2
7948: ARRAY
7949: IFFALSE 7992
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
7951: LD_ADDR_VAR 0 1
7955: PUSH
7956: LD_VAR 0 1
7960: PUSH
7961: LD_STRING #coop-points
7963: PUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_EXP 36
7978: PUSH
7979: LD_VAR 0 2
7983: ARRAY
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: ADD
7991: ST_TO_ADDR
// end ; end ;
7992: GO 7914
7994: POP
7995: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
7996: LD_ADDR_VAR 0 1
8000: PUSH
8001: LD_VAR 0 1
8005: PUSH
8006: LD_STRING #saved-convoys
8008: PUSH
8009: LD_EXP 5
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: ADD
8018: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8019: LD_ADDR_VAR 0 1
8023: PUSH
8024: LD_VAR 0 1
8028: PUSH
8029: LD_STRING #points-to-win
8031: PUSH
8032: LD_VAR 0 3
8036: PUSH
8037: LD_EXP 34
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: ADD
8047: ST_TO_ADDR
// end ;
8048: LD_VAR 0 1
8052: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8053: LD_INT 0
8055: PPUSH
8056: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8057: LD_ADDR_EXP 36
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: LD_INT 0
8070: PUSH
8071: LD_INT 0
8073: PUSH
8074: LD_INT 0
8076: PUSH
8077: LD_INT 0
8079: PUSH
8080: LD_INT 0
8082: PUSH
8083: LD_INT 0
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8096: LD_ADDR_EXP 37
8100: PUSH
8101: EMPTY
8102: ST_TO_ADDR
// end ;
8103: LD_VAR 0 1
8107: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8108: LD_INT 0
8110: PPUSH
// if not multi_points or not side or side > 8 then
8111: LD_EXP 36
8115: NOT
8116: PUSH
8117: LD_VAR 0 1
8121: NOT
8122: OR
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: LD_INT 8
8131: GREATER
8132: OR
8133: IFFALSE 8137
// exit ;
8135: GO 8174
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8137: LD_ADDR_EXP 36
8141: PUSH
8142: LD_EXP 36
8146: PPUSH
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_EXP 36
8156: PUSH
8157: LD_VAR 0 1
8161: ARRAY
8162: PUSH
8163: LD_VAR 0 2
8167: PLUS
8168: PPUSH
8169: CALL_OW 1
8173: ST_TO_ADDR
// end ;
8174: LD_VAR 0 3
8178: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8179: LD_INT 0
8181: PPUSH
// if not multi_points or not side or side > 8 then
8182: LD_EXP 36
8186: NOT
8187: PUSH
8188: LD_VAR 0 1
8192: NOT
8193: OR
8194: PUSH
8195: LD_VAR 0 1
8199: PUSH
8200: LD_INT 8
8202: GREATER
8203: OR
8204: IFFALSE 8208
// exit ;
8206: GO 8224
// result := multi_points [ side ] ;
8208: LD_ADDR_VAR 0 2
8212: PUSH
8213: LD_EXP 36
8217: PUSH
8218: LD_VAR 0 1
8222: ARRAY
8223: ST_TO_ADDR
// end ;
8224: LD_VAR 0 2
8228: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8229: LD_INT 0
8231: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8232: LD_ADDR_EXP 37
8236: PUSH
8237: LD_EXP 37
8241: PPUSH
8242: LD_EXP 37
8246: PUSH
8247: LD_INT 1
8249: PLUS
8250: PPUSH
8251: LD_VAR 0 1
8255: PPUSH
8256: CALL_OW 1
8260: ST_TO_ADDR
// end ;
8261: LD_VAR 0 2
8265: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8266: LD_INT 0
8268: PPUSH
// if not id then
8269: LD_VAR 0 1
8273: NOT
8274: IFFALSE 8278
// exit ;
8276: GO 8294
// result := multi_points_conditions [ id ] ;
8278: LD_ADDR_VAR 0 2
8282: PUSH
8283: LD_EXP 37
8287: PUSH
8288: LD_VAR 0 1
8292: ARRAY
8293: ST_TO_ADDR
// end ;
8294: LD_VAR 0 2
8298: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8299: LD_INT 0
8301: PPUSH
8302: PPUSH
8303: PPUSH
8304: PPUSH
8305: PPUSH
// players := [ ] ;
8306: LD_ADDR_VAR 0 3
8310: PUSH
8311: EMPTY
8312: ST_TO_ADDR
// for i = 1 to 8 do
8313: LD_ADDR_VAR 0 4
8317: PUSH
8318: DOUBLE
8319: LD_INT 1
8321: DEC
8322: ST_TO_ADDR
8323: LD_INT 8
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8386
// begin if i = side then
8329: LD_VAR 0 4
8333: PUSH
8334: LD_VAR 0 1
8338: EQUAL
8339: IFFALSE 8343
// continue ;
8341: GO 8326
// if multi_sides [ i ] and not multi_loosers [ i ] then
8343: LD_EXP 15
8347: PUSH
8348: LD_VAR 0 4
8352: ARRAY
8353: PUSH
8354: LD_EXP 32
8358: PUSH
8359: LD_VAR 0 4
8363: ARRAY
8364: NOT
8365: AND
8366: IFFALSE 8384
// players := players ^ i ;
8368: LD_ADDR_VAR 0 3
8372: PUSH
8373: LD_VAR 0 3
8377: PUSH
8378: LD_VAR 0 4
8382: ADD
8383: ST_TO_ADDR
// end ;
8384: GO 8326
8386: POP
8387: POP
// if not players then
8388: LD_VAR 0 3
8392: NOT
8393: IFFALSE 8397
// exit ;
8395: GO 8664
// if players = 1 then
8397: LD_VAR 0 3
8401: PUSH
8402: LD_INT 1
8404: EQUAL
8405: IFFALSE 8466
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8407: LD_ADDR_VAR 0 4
8411: PUSH
8412: LD_INT 22
8414: PUSH
8415: LD_VAR 0 1
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: PUSH
8424: LD_INT 51
8426: PUSH
8427: EMPTY
8428: LIST
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PPUSH
8434: CALL_OW 69
8438: PUSH
8439: FOR_IN
8440: IFFALSE 8462
// SetSide ( i , players [ 1 ] ) ;
8442: LD_VAR 0 4
8446: PPUSH
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 1
8454: ARRAY
8455: PPUSH
8456: CALL_OW 235
8460: GO 8439
8462: POP
8463: POP
// end else
8464: GO 8664
// begin j := 1 ;
8466: LD_ADDR_VAR 0 5
8470: PUSH
8471: LD_INT 1
8473: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8474: LD_ADDR_VAR 0 4
8478: PUSH
8479: LD_INT 22
8481: PUSH
8482: LD_VAR 0 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 2
8493: PUSH
8494: LD_INT 21
8496: PUSH
8497: LD_INT 1
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 51
8506: PUSH
8507: EMPTY
8508: LIST
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 2
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PPUSH
8533: CALL_OW 69
8537: PUSH
8538: FOR_IN
8539: IFFALSE 8662
// begin SetSide ( i , players [ j ] ) ;
8541: LD_VAR 0 4
8545: PPUSH
8546: LD_VAR 0 3
8550: PUSH
8551: LD_VAR 0 5
8555: ARRAY
8556: PPUSH
8557: CALL_OW 235
// if IsDrivenBy ( i ) then
8561: LD_VAR 0 4
8565: PPUSH
8566: CALL_OW 311
8570: IFFALSE 8597
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8572: LD_VAR 0 4
8576: PPUSH
8577: CALL_OW 311
8581: PPUSH
8582: LD_VAR 0 3
8586: PUSH
8587: LD_VAR 0 5
8591: ARRAY
8592: PPUSH
8593: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8597: LD_VAR 0 4
8601: PPUSH
8602: CALL_OW 310
8606: PPUSH
8607: CALL_OW 247
8611: PUSH
8612: LD_INT 3
8614: EQUAL
8615: IFFALSE 8626
// ComExitBuilding ( i ) ;
8617: LD_VAR 0 4
8621: PPUSH
8622: CALL_OW 122
// j := j + 1 ;
8626: LD_ADDR_VAR 0 5
8630: PUSH
8631: LD_VAR 0 5
8635: PUSH
8636: LD_INT 1
8638: PLUS
8639: ST_TO_ADDR
// if j > players then
8640: LD_VAR 0 5
8644: PUSH
8645: LD_VAR 0 3
8649: GREATER
8650: IFFALSE 8660
// j := 1 ;
8652: LD_ADDR_VAR 0 5
8656: PUSH
8657: LD_INT 1
8659: ST_TO_ADDR
// end ;
8660: GO 8538
8662: POP
8663: POP
// end ; end ;
8664: LD_VAR 0 2
8668: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8669: LD_INT 0
8671: PPUSH
// if not side or side > 8 then
8672: LD_VAR 0 1
8676: NOT
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 8
8685: GREATER
8686: OR
8687: IFFALSE 8691
// exit ;
8689: GO 8708
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8691: LD_VAR 0 1
8695: PPUSH
8696: LD_INT 6
8698: PPUSH
8699: CALL 8266 0 1
8703: PPUSH
8704: CALL 8108 0 2
// end ;
8708: LD_VAR 0 2
8712: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8713: LD_INT 0
8715: PPUSH
// if not side or side > 8 then
8716: LD_VAR 0 1
8720: NOT
8721: PUSH
8722: LD_VAR 0 1
8726: PUSH
8727: LD_INT 8
8729: GREATER
8730: OR
8731: IFFALSE 8735
// exit ;
8733: GO 8752
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8735: LD_VAR 0 1
8739: PPUSH
8740: LD_INT 4
8742: PPUSH
8743: CALL 8266 0 1
8747: PPUSH
8748: CALL 8108 0 2
// end ;
8752: LD_VAR 0 2
8756: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8757: LD_INT 0
8759: PPUSH
// if not side or side > 8 then
8760: LD_VAR 0 1
8764: NOT
8765: PUSH
8766: LD_VAR 0 1
8770: PUSH
8771: LD_INT 8
8773: GREATER
8774: OR
8775: IFFALSE 8779
// exit ;
8777: GO 8796
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8779: LD_VAR 0 1
8783: PPUSH
8784: LD_INT 5
8786: PPUSH
8787: CALL 8266 0 1
8791: PPUSH
8792: CALL 8108 0 2
// end ;
8796: LD_VAR 0 2
8800: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8801: LD_INT 0
8803: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8804: LD_VAR 0 1
8808: NOT
8809: PUSH
8810: LD_VAR 0 1
8814: PUSH
8815: LD_INT 8
8817: GREATER
8818: OR
8819: PUSH
8820: LD_VAR 0 2
8824: PUSH
8825: LD_INT 2
8827: PUSH
8828: LD_INT 6
8830: PUSH
8831: LD_INT 36
8833: PUSH
8834: LD_INT 0
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: IN
8843: NOT
8844: OR
8845: IFFALSE 8849
// exit ;
8847: GO 8866
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
8849: LD_VAR 0 1
8853: PPUSH
8854: LD_INT 3
8856: PPUSH
8857: CALL 8266 0 1
8861: PPUSH
8862: CALL 8108 0 2
// end ;
8866: LD_VAR 0 3
8870: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8871: LD_INT 0
8873: PPUSH
8874: PPUSH
// if not un then
8875: LD_VAR 0 1
8879: NOT
8880: IFFALSE 8884
// exit ;
8882: GO 8930
// if not points then
8884: LD_VAR 0 3
8888: NOT
8889: IFFALSE 8906
// gained_points := Multiplayer_GetCondition ( 1 ) else
8891: LD_ADDR_VAR 0 5
8895: PUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL 8266 0 1
8903: ST_TO_ADDR
8904: GO 8916
// gained_points := points ;
8906: LD_ADDR_VAR 0 5
8910: PUSH
8911: LD_VAR 0 3
8915: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_VAR 0 5
8925: PPUSH
8926: CALL 8108 0 2
// end ; end_of_file
8930: LD_VAR 0 4
8934: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
8935: LD_INT 0
8937: PPUSH
// begin side := GetSide ( un ) ;
8938: LD_ADDR_VAR 0 4
8942: PUSH
8943: LD_VAR 0 1
8947: PPUSH
8948: CALL_OW 255
8952: ST_TO_ADDR
// if killerSide = enemySide then
8953: LD_VAR 0 2
8957: PUSH
8958: LD_EXP 12
8962: EQUAL
8963: IFFALSE 8967
// exit ;
8965: GO 9027
// if side = convoySide and multi_sides [ killerSide ] then
8967: LD_VAR 0 4
8971: PUSH
8972: LD_EXP 40
8976: EQUAL
8977: PUSH
8978: LD_EXP 15
8982: PUSH
8983: LD_VAR 0 2
8987: ARRAY
8988: AND
8989: IFFALSE 9010
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
8991: LD_VAR 0 4
8995: PPUSH
8996: LD_INT 9
8998: PPUSH
8999: CALL 8266 0 1
9003: PPUSH
9004: CALL 8108 0 2
// exit ;
9008: GO 9027
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9010: LD_VAR 0 1
9014: PPUSH
9015: LD_VAR 0 2
9019: PPUSH
9020: LD_INT 0
9022: PPUSH
9023: CALL 8871 0 3
// end ;
9027: PPOPN 4
9029: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9030: LD_INT 0
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
9036: PPUSH
9037: PPUSH
9038: PPUSH
9039: PPUSH
9040: PPUSH
9041: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL 73617 0 1
// side := GetSide ( un ) ;
9051: LD_ADDR_VAR 0 3
9055: PUSH
9056: LD_VAR 0 1
9060: PPUSH
9061: CALL_OW 255
9065: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9066: LD_EXP 15
9070: PUSH
9071: LD_VAR 0 3
9075: ARRAY
9076: PUSH
9077: LD_VAR 0 3
9081: PUSH
9082: LD_EXP 40
9086: EQUAL
9087: OR
9088: IFFALSE 9166
// begin if un in convoys then
9090: LD_VAR 0 1
9094: PUSH
9095: LD_EXP 38
9099: IN
9100: IFFALSE 9118
// convoys := convoys diff un ;
9102: LD_ADDR_EXP 38
9106: PUSH
9107: LD_EXP 38
9111: PUSH
9112: LD_VAR 0 1
9116: DIFF
9117: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9118: LD_VAR 0 1
9122: PPUSH
9123: CALL_OW 247
9127: PUSH
9128: LD_INT 1
9130: EQUAL
9131: IFFALSE 9142
// MultiplayerEvent_HumanLost ( side ) ;
9133: LD_VAR 0 3
9137: PPUSH
9138: CALL 8713 0 1
// if GetType ( un ) = unit_vehicle then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 247
9151: PUSH
9152: LD_INT 2
9154: EQUAL
9155: IFFALSE 9166
// MultiplayerEvent_VehicleLost ( side ) ;
9157: LD_VAR 0 3
9161: PPUSH
9162: CALL 8757 0 1
// end ; if un in enemyForestGuard then
9166: LD_VAR 0 1
9170: PUSH
9171: LD_EXP 11
9175: IN
9176: IFFALSE 9194
// enemyForestGuard := enemyForestGuard diff un ;
9178: LD_ADDR_EXP 11
9182: PUSH
9183: LD_EXP 11
9187: PUSH
9188: LD_VAR 0 1
9192: DIFF
9193: ST_TO_ADDR
// if un in enemyMobile then
9194: LD_VAR 0 1
9198: PUSH
9199: LD_EXP 10
9203: IN
9204: IFFALSE 9222
// enemyMobile := enemyMobile diff un ;
9206: LD_ADDR_EXP 10
9210: PUSH
9211: LD_EXP 10
9215: PUSH
9216: LD_VAR 0 1
9220: DIFF
9221: ST_TO_ADDR
// if un in enemyUnits then
9222: LD_VAR 0 1
9226: PUSH
9227: LD_EXP 9
9231: IN
9232: IFFALSE 9250
// enemyUnits := enemyUnits diff un ;
9234: LD_ADDR_EXP 9
9238: PUSH
9239: LD_EXP 9
9243: PUSH
9244: LD_VAR 0 1
9248: DIFF
9249: ST_TO_ADDR
// if un in arAttackersInf then
9250: LD_VAR 0 1
9254: PUSH
9255: LD_EXP 13
9259: IN
9260: IFFALSE 9278
// arAttackersInf := arAttackersInf diff un ;
9262: LD_ADDR_EXP 13
9266: PUSH
9267: LD_EXP 13
9271: PUSH
9272: LD_VAR 0 1
9276: DIFF
9277: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders then
9278: LD_EXP 31
9282: PUSH
9283: LD_EXP 24
9287: AND
9288: IFFALSE 9350
// if un in multi_commanders then
9290: LD_VAR 0 1
9294: PUSH
9295: LD_EXP 31
9299: IN
9300: IFFALSE 9350
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9302: LD_ADDR_EXP 32
9306: PUSH
9307: LD_EXP 32
9311: PPUSH
9312: LD_VAR 0 3
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 1
9324: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9325: LD_ADDR_EXP 31
9329: PUSH
9330: LD_EXP 31
9334: PUSH
9335: LD_VAR 0 1
9339: DIFF
9340: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9341: LD_VAR 0 3
9345: PPUSH
9346: CALL 8299 0 1
// end ; end ;
9350: PPOPN 11
9352: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9353: LD_INT 0
9355: PPUSH
9356: PPUSH
9357: PPUSH
9358: PPUSH
// begin side := GetSide ( building ) ;
9359: LD_ADDR_VAR 0 4
9363: PUSH
9364: LD_VAR 0 1
9368: PPUSH
9369: CALL_OW 255
9373: ST_TO_ADDR
// if multi_sides [ side ] then
9374: LD_EXP 15
9378: PUSH
9379: LD_VAR 0 4
9383: ARRAY
9384: IFFALSE 9405
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9386: LD_VAR 0 4
9390: PPUSH
9391: LD_VAR 0 1
9395: PPUSH
9396: CALL_OW 266
9400: PPUSH
9401: CALL 8801 0 2
// end ;
9405: PPOPN 5
9407: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9408: LD_INT 0
9410: PPUSH
9411: PPUSH
9412: PPUSH
9413: PPUSH
9414: PPUSH
9415: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9416: LD_VAR 0 1
9420: PPUSH
9421: LD_VAR 0 2
9425: PPUSH
9426: CALL 73737 0 2
// side := GetSide ( vehicle ) ;
9430: LD_ADDR_VAR 0 4
9434: PUSH
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 255
9444: ST_TO_ADDR
// if multi_sides [ side ] then
9445: LD_EXP 15
9449: PUSH
9450: LD_VAR 0 4
9454: ARRAY
9455: IFFALSE 9466
// MultiplayerEvent_Produced ( side ) ;
9457: LD_VAR 0 4
9461: PPUSH
9462: CALL 8669 0 1
// end ;
9466: PPOPN 8
9468: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9469: LD_INT 0
9471: PPUSH
9472: PPUSH
// begin side := GetSide ( lab ) ;
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_VAR 0 2
9482: PPUSH
9483: CALL_OW 255
9487: ST_TO_ADDR
// if multi_sides [ side ] then
9488: LD_EXP 15
9492: PUSH
9493: LD_VAR 0 4
9497: ARRAY
9498: IFFALSE 9561
// for i := 1 to 8 do
9500: LD_ADDR_VAR 0 3
9504: PUSH
9505: DOUBLE
9506: LD_INT 1
9508: DEC
9509: ST_TO_ADDR
9510: LD_INT 8
9512: PUSH
9513: FOR_TO
9514: IFFALSE 9559
// if multi_sides [ i ] and i <> side then
9516: LD_EXP 15
9520: PUSH
9521: LD_VAR 0 3
9525: ARRAY
9526: PUSH
9527: LD_VAR 0 3
9531: PUSH
9532: LD_VAR 0 4
9536: NONEQUAL
9537: AND
9538: IFFALSE 9557
// SetTech ( tech , i , state_researched ) ;
9540: LD_VAR 0 1
9544: PPUSH
9545: LD_VAR 0 3
9549: PPUSH
9550: LD_INT 2
9552: PPUSH
9553: CALL_OW 322
9557: GO 9513
9559: POP
9560: POP
// end ;
9561: PPOPN 4
9563: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9564: LD_VAR 0 2
9568: PUSH
9569: LD_EXP 10
9573: IN
9574: IFFALSE 9637
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9576: LD_VAR 0 1
9580: PPUSH
9581: LD_INT 163
9583: PPUSH
9584: LD_INT 31
9586: PPUSH
9587: CALL_OW 111
// wait ( 0 0$1 ) ;
9591: LD_INT 35
9593: PPUSH
9594: CALL_OW 67
// if IsDead ( driver ) then
9598: LD_VAR 0 1
9602: PPUSH
9603: CALL_OW 301
9607: IFFALSE 9611
// exit ;
9609: GO 9637
// until IsAt ( driver , 163 , 31 ) ;
9611: LD_VAR 0 1
9615: PPUSH
9616: LD_INT 163
9618: PPUSH
9619: LD_INT 31
9621: PPUSH
9622: CALL_OW 307
9626: IFFALSE 9576
// RemoveUnit ( driver ) ;
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 64
// end ; end ; end_of_file
9637: PPOPN 4
9639: END
// every 8 8$00 trigger not forestIsCleared do
9640: LD_EXP 7
9644: NOT
9645: IFFALSE 9654
9647: GO 9649
9649: DISABLE
// ClearRoadInForest ;
9650: CALL 2086 0 0
9654: END
// every 18 18$00 trigger not forestIsCleared do
9655: LD_EXP 7
9659: NOT
9660: IFFALSE 9669
9662: GO 9664
9664: DISABLE
// ClearRoadInForest ;
9665: CALL 2086 0 0
9669: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9670: LD_EXP 39
9674: PUSH
9675: LD_INT 4
9677: MOD
9678: PUSH
9679: LD_INT 0
9681: EQUAL
9682: PUSH
9683: LD_EXP 39
9687: PUSH
9688: LD_INT 4
9690: GREATEREQUAL
9691: AND
9692: IFFALSE 9721
9694: GO 9696
9696: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9697: LD_ADDR_EXP 13
9701: PUSH
9702: LD_EXP 13
9706: PUSH
9707: CALL 3271 0 0
9711: UNION
9712: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9713: LD_INT 10500
9715: PPUSH
9716: CALL_OW 67
// enable ;
9720: ENABLE
// end ;
9721: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
9722: LD_EXP 39
9726: PUSH
9727: LD_INT 7
9729: MOD
9730: PUSH
9731: LD_INT 0
9733: EQUAL
9734: PUSH
9735: LD_EXP 39
9739: PUSH
9740: LD_INT 7
9742: GREATEREQUAL
9743: AND
9744: IFFALSE 9773
9746: GO 9748
9748: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9749: LD_ADDR_EXP 13
9753: PUSH
9754: LD_EXP 13
9758: PUSH
9759: CALL 3515 0 0
9763: UNION
9764: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9765: LD_INT 10500
9767: PPUSH
9768: CALL_OW 67
// enable ;
9772: ENABLE
// end ;
9773: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 24 , 28 , 32 , 36 ] do
9774: LD_EXP 39
9778: PUSH
9779: LD_INT 8
9781: PUSH
9782: LD_INT 12
9784: PUSH
9785: LD_INT 16
9787: PUSH
9788: LD_INT 20
9790: PUSH
9791: LD_INT 24
9793: PUSH
9794: LD_INT 28
9796: PUSH
9797: LD_INT 32
9799: PUSH
9800: LD_INT 36
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: IN
9813: IFFALSE 9842
9815: GO 9817
9817: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
9818: LD_ADDR_EXP 13
9822: PUSH
9823: LD_EXP 13
9827: PUSH
9828: CALL 3066 0 0
9832: UNION
9833: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9834: LD_INT 10500
9836: PPUSH
9837: CALL_OW 67
// enable ;
9841: ENABLE
// end ;
9842: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
9843: LD_EXP 39
9847: PUSH
9848: LD_INT 5
9850: MOD
9851: PUSH
9852: LD_INT 4
9854: EQUAL
9855: PUSH
9856: LD_INT 22
9858: PUSH
9859: LD_EXP 12
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 92
9870: PUSH
9871: LD_INT 30
9873: PUSH
9874: LD_INT 48
9876: PUSH
9877: LD_INT 20
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PPUSH
9890: CALL_OW 69
9894: NOT
9895: AND
9896: IFFALSE 9913
9898: GO 9900
9900: DISABLE
// begin SendWestGroup ;
9901: CALL 2436 0 0
// wait ( 6 6$00 ) ;
9905: LD_INT 12600
9907: PPUSH
9908: CALL_OW 67
// enable ;
9912: ENABLE
// end ;
9913: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
9914: LD_EXP 10
9918: PPUSH
9919: LD_INT 50
9921: PUSH
9922: EMPTY
9923: LIST
9924: PPUSH
9925: CALL_OW 72
9929: PUSH
9930: LD_INT 5
9932: LESS
9933: IFFALSE 9950
9935: GO 9937
9937: DISABLE
// begin PrepareMobileGroup ;
9938: CALL 1475 0 0
// wait ( 1 1$00 ) ;
9942: LD_INT 2100
9944: PPUSH
9945: CALL_OW 67
// enable ;
9949: ENABLE
// end ;
9950: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
9951: LD_EXP 39
9955: PUSH
9956: LD_INT 6
9958: MOD
9959: PUSH
9960: LD_INT 0
9962: EQUAL
9963: PUSH
9964: LD_EXP 39
9968: PUSH
9969: LD_INT 6
9971: GREATEREQUAL
9972: AND
9973: PUSH
9974: LD_EXP 10
9978: PPUSH
9979: LD_INT 50
9981: PUSH
9982: EMPTY
9983: LIST
9984: PPUSH
9985: CALL_OW 72
9989: PUSH
9990: LD_INT 10
9992: LESS
9993: AND
9994: IFFALSE 10011
9996: GO 9998
9998: DISABLE
// begin PrepareMobileGroup2 ;
9999: CALL 1803 0 0
// wait ( 2 2$30 ) ;
10003: LD_INT 5250
10005: PPUSH
10006: CALL_OW 67
// enable ;
10010: ENABLE
// end ;
10011: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10012: LD_EXP 7
10016: IFFALSE 10229
10018: GO 10020
10020: DISABLE
10021: LD_INT 0
10023: PPUSH
10024: PPUSH
// begin if tick > 50 50$00 then
10025: LD_OWVAR 1
10029: PUSH
10030: LD_INT 105000
10032: GREATER
10033: IFFALSE 10038
// begin disable ;
10035: DISABLE
// exit ;
10036: GO 10229
// end ; tmp := PrepareForestOnslaught ;
10038: LD_ADDR_VAR 0 2
10042: PUSH
10043: CALL 2738 0 0
10047: ST_TO_ADDR
// for i in tmp do
10048: LD_ADDR_VAR 0 1
10052: PUSH
10053: LD_VAR 0 2
10057: PUSH
10058: FOR_IN
10059: IFFALSE 10123
// begin AddComMoveXY ( i , 197 , 152 ) ;
10061: LD_VAR 0 1
10065: PPUSH
10066: LD_INT 197
10068: PPUSH
10069: LD_INT 152
10071: PPUSH
10072: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10076: LD_VAR 0 1
10080: PPUSH
10081: LD_INT 159
10083: PPUSH
10084: LD_INT 163
10086: PPUSH
10087: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10091: LD_VAR 0 1
10095: PPUSH
10096: LD_INT 116
10098: PPUSH
10099: LD_INT 154
10101: PPUSH
10102: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10106: LD_VAR 0 1
10110: PPUSH
10111: LD_INT 93
10113: PPUSH
10114: LD_INT 177
10116: PPUSH
10117: CALL_OW 171
// end ;
10121: GO 10058
10123: POP
10124: POP
// repeat wait ( 0 0$1 ) ;
10125: LD_INT 35
10127: PPUSH
10128: CALL_OW 67
// for i in tmp do
10132: LD_ADDR_VAR 0 1
10136: PUSH
10137: LD_VAR 0 2
10141: PUSH
10142: FOR_IN
10143: IFFALSE 10204
// if not IsOk ( i ) then
10145: LD_VAR 0 1
10149: PPUSH
10150: CALL_OW 302
10154: NOT
10155: IFFALSE 10175
// tmp := tmp diff i else
10157: LD_ADDR_VAR 0 2
10161: PUSH
10162: LD_VAR 0 2
10166: PUSH
10167: LD_VAR 0 1
10171: DIFF
10172: ST_TO_ADDR
10173: GO 10202
// if not HasTask ( i ) then
10175: LD_VAR 0 1
10179: PPUSH
10180: CALL_OW 314
10184: NOT
10185: IFFALSE 10202
// ComMoveXY ( i , 93 , 177 ) ;
10187: LD_VAR 0 1
10191: PPUSH
10192: LD_INT 93
10194: PPUSH
10195: LD_INT 177
10197: PPUSH
10198: CALL_OW 111
10202: GO 10142
10204: POP
10205: POP
// until not tmp ;
10206: LD_VAR 0 2
10210: NOT
10211: IFFALSE 10125
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10213: LD_INT 1050
10215: PPUSH
10216: LD_INT 11550
10218: PPUSH
10219: CALL_OW 12
10223: PPUSH
10224: CALL_OW 67
// enable ;
10228: ENABLE
// end ;
10229: PPOPN 2
10231: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10232: LD_EXP 11
10236: IFFALSE 10651
10238: GO 10240
10240: DISABLE
10241: LD_INT 0
10243: PPUSH
10244: PPUSH
10245: PPUSH
10246: PPUSH
// begin enable ;
10247: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10248: LD_ADDR_VAR 0 2
10252: PUSH
10253: LD_EXP 11
10257: PPUSH
10258: LD_INT 50
10260: PUSH
10261: EMPTY
10262: LIST
10263: PPUSH
10264: CALL_OW 72
10268: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10269: LD_ADDR_VAR 0 3
10273: PUSH
10274: LD_INT 19
10276: PPUSH
10277: LD_INT 3
10279: PUSH
10280: LD_INT 22
10282: PUSH
10283: LD_EXP 12
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PPUSH
10296: CALL_OW 70
10300: ST_TO_ADDR
// if not tmp then
10301: LD_VAR 0 2
10305: NOT
10306: IFFALSE 10310
// exit ;
10308: GO 10651
// for i in tmp do
10310: LD_ADDR_VAR 0 1
10314: PUSH
10315: LD_VAR 0 2
10319: PUSH
10320: FOR_IN
10321: IFFALSE 10649
// begin if enemyInForest then
10323: LD_VAR 0 3
10327: IFFALSE 10402
// begin if GetClass ( i ) = 4 then
10329: LD_VAR 0 1
10333: PPUSH
10334: CALL_OW 257
10338: PUSH
10339: LD_INT 4
10341: EQUAL
10342: IFFALSE 10376
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10344: LD_VAR 0 1
10348: PPUSH
10349: LD_VAR 0 2
10353: PUSH
10354: LD_VAR 0 1
10358: DIFF
10359: PPUSH
10360: LD_VAR 0 1
10364: PPUSH
10365: CALL_OW 74
10369: PPUSH
10370: CALL_OW 112
10374: GO 10400
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10376: LD_VAR 0 1
10380: PPUSH
10381: LD_VAR 0 3
10385: PPUSH
10386: LD_VAR 0 1
10390: PPUSH
10391: CALL_OW 74
10395: PPUSH
10396: CALL_OW 115
// end else
10400: GO 10647
// if not IsInArea ( i , arForestArea ) then
10402: LD_VAR 0 1
10406: PPUSH
10407: LD_INT 21
10409: PPUSH
10410: CALL_OW 308
10414: NOT
10415: IFFALSE 10431
// ComMoveToArea ( i , arForestArea ) else
10417: LD_VAR 0 1
10421: PPUSH
10422: LD_INT 21
10424: PPUSH
10425: CALL_OW 113
10429: GO 10647
// if GetClass ( i ) = 3 then
10431: LD_VAR 0 1
10435: PPUSH
10436: CALL_OW 257
10440: PUSH
10441: LD_INT 3
10443: EQUAL
10444: IFFALSE 10647
// begin vehicle := IsInUnit ( i ) ;
10446: LD_ADDR_VAR 0 4
10450: PUSH
10451: LD_VAR 0 1
10455: PPUSH
10456: CALL_OW 310
10460: ST_TO_ADDR
// if vehicle then
10461: LD_VAR 0 4
10465: IFFALSE 10620
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10467: LD_VAR 0 4
10471: PPUSH
10472: CALL_OW 256
10476: PUSH
10477: LD_INT 1000
10479: LESS
10480: PUSH
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 314
10490: NOT
10491: AND
10492: IFFALSE 10618
// begin if not IsInArea ( vehicle , arParkingArea ) then
10494: LD_VAR 0 4
10498: PPUSH
10499: LD_INT 20
10501: PPUSH
10502: CALL_OW 308
10506: NOT
10507: IFFALSE 10523
// ComMoveToArea ( vehicle , arParkingArea ) else
10509: LD_VAR 0 4
10513: PPUSH
10514: LD_INT 20
10516: PPUSH
10517: CALL_OW 113
10521: GO 10618
// if not GetTag ( i ) then
10523: LD_VAR 0 1
10527: PPUSH
10528: CALL_OW 110
10532: NOT
10533: IFFALSE 10618
// begin SetTag ( i , tMech ) ;
10535: LD_VAR 0 1
10539: PPUSH
10540: LD_INT 7
10542: PPUSH
10543: CALL_OW 109
// ComExitVehicle ( i ) ;
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10556: LD_VAR 0 1
10560: PPUSH
10561: LD_VAR 0 4
10565: PPUSH
10566: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10570: LD_INT 35
10572: PPUSH
10573: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL_OW 256
10586: PUSH
10587: LD_INT 1000
10589: EQUAL
10590: IFFALSE 10570
// ComEnterUnit ( i , vehicle ) ;
10592: LD_VAR 0 1
10596: PPUSH
10597: LD_VAR 0 4
10601: PPUSH
10602: CALL_OW 120
// SetTag ( i , 0 ) ;
10606: LD_VAR 0 1
10610: PPUSH
10611: LD_INT 0
10613: PPUSH
10614: CALL_OW 109
// end ; end ; end else
10618: GO 10647
// if not IsInArea ( i , arParkingArea ) then
10620: LD_VAR 0 1
10624: PPUSH
10625: LD_INT 20
10627: PPUSH
10628: CALL_OW 308
10632: NOT
10633: IFFALSE 10647
// ComMoveToArea ( i , arParkingArea ) ;
10635: LD_VAR 0 1
10639: PPUSH
10640: LD_INT 20
10642: PPUSH
10643: CALL_OW 113
// end ; end ;
10647: GO 10320
10649: POP
10650: POP
// end ;
10651: PPOPN 4
10653: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
10654: LD_EXP 10
10658: IFFALSE 11191
10660: GO 10662
10662: DISABLE
10663: LD_INT 0
10665: PPUSH
10666: PPUSH
10667: PPUSH
// begin enable ;
10668: ENABLE
// if not enemyMobile then
10669: LD_EXP 10
10673: NOT
10674: IFFALSE 10678
// exit ;
10676: GO 11191
// for i in enemyMobile do
10678: LD_ADDR_VAR 0 1
10682: PUSH
10683: LD_EXP 10
10687: PUSH
10688: FOR_IN
10689: IFFALSE 11189
// begin if GetSide ( i ) <> enemySide then
10691: LD_VAR 0 1
10695: PPUSH
10696: CALL_OW 255
10700: PUSH
10701: LD_EXP 12
10705: NONEQUAL
10706: IFFALSE 10726
// begin enemyMobile := enemyMobile diff i ;
10708: LD_ADDR_EXP 10
10712: PUSH
10713: LD_EXP 10
10717: PUSH
10718: LD_VAR 0 1
10722: DIFF
10723: ST_TO_ADDR
// continue ;
10724: GO 10688
// end ; if GetTag ( i ) = 300 then
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 110
10735: PUSH
10736: LD_INT 300
10738: EQUAL
10739: IFFALSE 10854
// begin if GetFuel ( i ) < 50 then
10741: LD_VAR 0 1
10745: PPUSH
10746: CALL_OW 261
10750: PUSH
10751: LD_INT 50
10753: LESS
10754: IFFALSE 10813
// begin ComMoveXY ( i , 170 , 50 ) ;
10756: LD_VAR 0 1
10760: PPUSH
10761: LD_INT 170
10763: PPUSH
10764: LD_INT 50
10766: PPUSH
10767: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10771: LD_INT 35
10773: PPUSH
10774: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
10778: LD_VAR 0 1
10782: PPUSH
10783: LD_INT 170
10785: PPUSH
10786: LD_INT 50
10788: PPUSH
10789: CALL_OW 297
10793: PUSH
10794: LD_INT 4
10796: LESS
10797: IFFALSE 10771
// SetFuel ( i , 100 ) ;
10799: LD_VAR 0 1
10803: PPUSH
10804: LD_INT 100
10806: PPUSH
10807: CALL_OW 240
// end else
10811: GO 10854
// if not IsInArea ( i , arParkingArea ) then
10813: LD_VAR 0 1
10817: PPUSH
10818: LD_INT 20
10820: PPUSH
10821: CALL_OW 308
10825: NOT
10826: IFFALSE 10842
// ComMoveToArea ( i , arParkingArea ) else
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 20
10835: PPUSH
10836: CALL_OW 113
10840: GO 10854
// SetTag ( i , 301 ) ;
10842: LD_VAR 0 1
10846: PPUSH
10847: LD_INT 301
10849: PPUSH
10850: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10854: LD_VAR 0 1
10858: PPUSH
10859: CALL_OW 110
10863: PUSH
10864: LD_INT 301
10866: EQUAL
10867: IFFALSE 11009
// begin if GetLives ( i ) < 1000 then
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 256
10878: PUSH
10879: LD_INT 1000
10881: LESS
10882: IFFALSE 10986
// begin if not IsDrivenBy ( i ) then
10884: LD_VAR 0 1
10888: PPUSH
10889: CALL_OW 311
10893: NOT
10894: IFFALSE 10898
// continue ;
10896: GO 10688
// mech := IsDrivenBy ( i ) ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 1
10907: PPUSH
10908: CALL_OW 311
10912: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10913: LD_VAR 0 2
10917: PPUSH
10918: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10922: LD_VAR 0 2
10926: PPUSH
10927: LD_VAR 0 1
10931: PPUSH
10932: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10936: LD_INT 35
10938: PPUSH
10939: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10943: LD_VAR 0 1
10947: PPUSH
10948: CALL_OW 256
10952: PUSH
10953: LD_INT 1000
10955: EQUAL
10956: IFFALSE 10936
// SetLives ( mech , 1000 ) ;
10958: LD_VAR 0 2
10962: PPUSH
10963: LD_INT 1000
10965: PPUSH
10966: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
10970: LD_VAR 0 2
10974: PPUSH
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 120
// end else
10984: GO 11009
// if IsDrivenBy ( i ) then
10986: LD_VAR 0 1
10990: PPUSH
10991: CALL_OW 311
10995: IFFALSE 11009
// SetTag ( i , 0 ) ;
10997: LD_VAR 0 1
11001: PPUSH
11002: LD_INT 0
11004: PPUSH
11005: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11009: LD_VAR 0 1
11013: PPUSH
11014: CALL_OW 110
11018: PUSH
11019: LD_INT 300
11021: LESS
11022: IFFALSE 11187
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11024: LD_ADDR_VAR 0 3
11028: PUSH
11029: LD_INT 19
11031: PPUSH
11032: LD_INT 81
11034: PUSH
11035: LD_EXP 12
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 70
11048: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11049: LD_VAR 0 1
11053: PPUSH
11054: CALL_OW 256
11058: PUSH
11059: LD_INT 650
11061: LESS
11062: IFFALSE 11087
// begin ComStop ( i ) ;
11064: LD_VAR 0 1
11068: PPUSH
11069: CALL_OW 141
// SetTag ( i , 300 ) ;
11073: LD_VAR 0 1
11077: PPUSH
11078: LD_INT 300
11080: PPUSH
11081: CALL_OW 109
// continue ;
11085: GO 10688
// end ; if enemy then
11087: LD_VAR 0 3
11091: IFFALSE 11131
// begin if not HasTask ( i ) then
11093: LD_VAR 0 1
11097: PPUSH
11098: CALL_OW 314
11102: NOT
11103: IFFALSE 11129
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11105: LD_VAR 0 1
11109: PPUSH
11110: LD_VAR 0 3
11114: PPUSH
11115: LD_VAR 0 1
11119: PPUSH
11120: CALL_OW 74
11124: PPUSH
11125: CALL_OW 115
// end else
11129: GO 11187
// if enemyMobile then
11131: LD_EXP 10
11135: IFFALSE 11187
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11137: LD_ADDR_VAR 0 3
11141: PUSH
11142: LD_INT 81
11144: PUSH
11145: LD_EXP 12
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PPUSH
11154: CALL_OW 69
11158: ST_TO_ADDR
// if enemy then
11159: LD_VAR 0 3
11163: IFFALSE 11187
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: LD_INT 130
11172: PUSH
11173: LD_INT 28
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: PPUSH
11183: CALL 55318 0 2
// end ; end ; end ;
11187: GO 10688
11189: POP
11190: POP
// end ;
11191: PPOPN 3
11193: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11194: LD_EXP 13
11198: IFFALSE 11721
11200: GO 11202
11202: DISABLE
11203: LD_INT 0
11205: PPUSH
11206: PPUSH
11207: PPUSH
11208: PPUSH
11209: PPUSH
// begin enable ;
11210: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11211: LD_ADDR_VAR 0 2
11215: PUSH
11216: LD_EXP 13
11220: PPUSH
11221: LD_INT 50
11223: PUSH
11224: EMPTY
11225: LIST
11226: PPUSH
11227: CALL_OW 72
11231: ST_TO_ADDR
// arAttackersInf := [ ] ;
11232: LD_ADDR_EXP 13
11236: PUSH
11237: EMPTY
11238: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11239: LD_ADDR_VAR 0 1
11243: PUSH
11244: LD_VAR 0 2
11248: PPUSH
11249: LD_INT 25
11251: PUSH
11252: LD_INT 1
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 72
11263: PUSH
11264: FOR_IN
11265: IFFALSE 11417
// begin if Prob ( 50 ) then
11267: LD_INT 50
11269: PPUSH
11270: CALL_OW 13
11274: IFFALSE 11290
// SetTag ( i , tMine ) else
11276: LD_VAR 0 1
11280: PPUSH
11281: LD_INT 6
11283: PPUSH
11284: CALL_OW 109
11288: GO 11292
// continue ;
11290: GO 11264
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11292: LD_ADDR_VAR 0 3
11296: PUSH
11297: LD_INT 81
11299: PUSH
11300: LD_EXP 12
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: LD_INT 120
11314: PUSH
11315: LD_INT 11
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 21
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 3
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 69
11363: PPUSH
11364: LD_VAR 0 1
11368: PPUSH
11369: CALL_OW 74
11373: ST_TO_ADDR
// if not nearest then
11374: LD_VAR 0 3
11378: NOT
11379: IFFALSE 11383
// break ;
11381: GO 11417
// SetTag ( nearest , tMined ) ;
11383: LD_VAR 0 3
11387: PPUSH
11388: LD_INT 11
11390: PPUSH
11391: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11395: LD_VAR 0 1
11399: PPUSH
11400: LD_INT 0
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: LD_VAR 0 3
11410: PPUSH
11411: CALL_OW 192
// end ;
11415: GO 11264
11417: POP
11418: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11419: LD_ADDR_VAR 0 2
11423: PUSH
11424: LD_VAR 0 2
11428: PPUSH
11429: LD_INT 50
11431: PUSH
11432: EMPTY
11433: LIST
11434: PPUSH
11435: CALL_OW 72
11439: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11440: LD_INT 70
11442: PPUSH
11443: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11447: LD_ADDR_VAR 0 2
11451: PUSH
11452: LD_VAR 0 2
11456: PPUSH
11457: LD_INT 50
11459: PUSH
11460: EMPTY
11461: LIST
11462: PPUSH
11463: CALL_OW 72
11467: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11468: LD_ADDR_VAR 0 4
11472: PUSH
11473: LD_INT 81
11475: PUSH
11476: LD_EXP 12
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PPUSH
11485: CALL_OW 69
11489: ST_TO_ADDR
// for i in tmp do
11490: LD_ADDR_VAR 0 1
11494: PUSH
11495: LD_VAR 0 2
11499: PUSH
11500: FOR_IN
11501: IFFALSE 11712
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11503: LD_VAR 0 1
11507: PPUSH
11508: CALL_OW 257
11512: PUSH
11513: LD_INT 1
11515: NONEQUAL
11516: PUSH
11517: LD_VAR 0 1
11521: PPUSH
11522: CALL_OW 110
11526: PUSH
11527: LD_INT 6
11529: NONEQUAL
11530: AND
11531: IFFALSE 11559
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11533: LD_VAR 0 1
11537: PPUSH
11538: LD_VAR 0 4
11542: PPUSH
11543: LD_VAR 0 1
11547: PPUSH
11548: CALL_OW 74
11552: PPUSH
11553: CALL_OW 115
11557: GO 11710
// if not HasTask ( i ) then
11559: LD_VAR 0 1
11563: PPUSH
11564: CALL_OW 314
11568: NOT
11569: IFFALSE 11710
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11571: LD_ADDR_VAR 0 3
11575: PUSH
11576: LD_VAR 0 4
11580: PPUSH
11581: LD_INT 3
11583: PUSH
11584: LD_INT 120
11586: PUSH
11587: LD_INT 11
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 2
11600: PUSH
11601: LD_INT 21
11603: PUSH
11604: LD_INT 2
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 21
11613: PUSH
11614: LD_INT 3
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: LIST
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 72
11634: PPUSH
11635: LD_VAR 0 1
11639: PPUSH
11640: CALL_OW 74
11644: ST_TO_ADDR
// if not nearest then
11645: LD_VAR 0 3
11649: NOT
11650: IFFALSE 11678
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11652: LD_VAR 0 1
11656: PPUSH
11657: LD_VAR 0 4
11661: PPUSH
11662: LD_VAR 0 1
11666: PPUSH
11667: CALL_OW 74
11671: PPUSH
11672: CALL_OW 115
11676: GO 11710
// begin SetTag ( nearest , tMined ) ;
11678: LD_VAR 0 3
11682: PPUSH
11683: LD_INT 11
11685: PPUSH
11686: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11690: LD_VAR 0 1
11694: PPUSH
11695: LD_INT 0
11697: PPUSH
11698: LD_INT 0
11700: PPUSH
11701: LD_VAR 0 3
11705: PPUSH
11706: CALL_OW 132
// end ; end ;
11710: GO 11500
11712: POP
11713: POP
// until not tmp ;
11714: LD_VAR 0 2
11718: NOT
11719: IFFALSE 11440
// end ;
11721: PPOPN 5
11723: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
11724: LD_INT 22
11726: PUSH
11727: LD_EXP 12
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PUSH
11736: LD_INT 32
11738: PUSH
11739: LD_INT 1
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: PPUSH
11750: CALL_OW 69
11754: IFFALSE 11833
11756: GO 11758
11758: DISABLE
11759: LD_INT 0
11761: PPUSH
// begin enable ;
11762: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
11763: LD_ADDR_VAR 0 1
11767: PUSH
11768: LD_INT 22
11770: PUSH
11771: LD_EXP 12
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 32
11782: PUSH
11783: LD_INT 1
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: PPUSH
11794: CALL_OW 69
11798: PUSH
11799: FOR_IN
11800: IFFALSE 11831
// if GetFuel ( i ) < 3 then
11802: LD_VAR 0 1
11806: PPUSH
11807: CALL_OW 261
11811: PUSH
11812: LD_INT 3
11814: LESS
11815: IFFALSE 11829
// SetFuel ( i , 3 ) ;
11817: LD_VAR 0 1
11821: PPUSH
11822: LD_INT 3
11824: PPUSH
11825: CALL_OW 240
11829: GO 11799
11831: POP
11832: POP
// end ;
11833: PPOPN 1
11835: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
11836: LD_INT 9
11838: PPUSH
11839: LD_INT 22
11841: PUSH
11842: LD_EXP 12
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 70
11855: IFFALSE 11918
11857: GO 11859
11859: DISABLE
11860: LD_INT 0
11862: PPUSH
// begin enable ;
11863: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
11864: LD_ADDR_VAR 0 1
11868: PUSH
11869: LD_INT 9
11871: PPUSH
11872: LD_INT 22
11874: PUSH
11875: LD_EXP 12
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 70
11888: PUSH
11889: FOR_IN
11890: IFFALSE 11916
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
11892: LD_EXP 40
11896: PPUSH
11897: LD_INT 250
11899: NEG
11900: PPUSH
11901: CALL 8108 0 2
// RemoveUnit ( i ) ;
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 64
// end ;
11914: GO 11889
11916: POP
11917: POP
// end ; end_of_file
11918: PPOPN 1
11920: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
11921: LD_INT 0
11923: PPUSH
11924: PPUSH
// convoys := [ ] ;
11925: LD_ADDR_EXP 38
11929: PUSH
11930: EMPTY
11931: ST_TO_ADDR
// convoySide := side ;
11932: LD_ADDR_EXP 40
11936: PUSH
11937: LD_VAR 0 1
11941: ST_TO_ADDR
// convoyWave := 1 ;
11942: LD_ADDR_EXP 39
11946: PUSH
11947: LD_INT 1
11949: ST_TO_ADDR
// for i := 1 to 8 do
11950: LD_ADDR_VAR 0 3
11954: PUSH
11955: DOUBLE
11956: LD_INT 1
11958: DEC
11959: ST_TO_ADDR
11960: LD_INT 8
11962: PUSH
11963: FOR_TO
11964: IFFALSE 11994
// if multi_sides [ i ] then
11966: LD_EXP 15
11970: PUSH
11971: LD_VAR 0 3
11975: ARRAY
11976: IFFALSE 11992
// ChangeSideFog ( i , side ) ;
11978: LD_VAR 0 3
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 343
11992: GO 11963
11994: POP
11995: POP
// end ;
11996: LD_VAR 0 2
12000: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12001: LD_EXP 2
12005: IFFALSE 12040
12007: GO 12009
12009: DISABLE
12010: LD_INT 0
12012: PPUSH
12013: PPUSH
// begin enable ;
12014: ENABLE
// blockThread := true ;
12015: LD_ADDR_EXP 6
12019: PUSH
12020: LD_INT 1
12022: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12023: LD_EXP 39
12027: PPUSH
12028: CALL 12043 0 1
// blockThread := false ;
12032: LD_ADDR_EXP 6
12036: PUSH
12037: LD_INT 0
12039: ST_TO_ADDR
// end ;
12040: PPOPN 2
12042: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
12043: LD_INT 0
12045: PPUSH
12046: PPUSH
12047: PPUSH
12048: PPUSH
12049: PPUSH
12050: PPUSH
12051: PPUSH
// convoyWave := Inc ( wave ) ;
12052: LD_ADDR_EXP 39
12056: PUSH
12057: LD_VAR 0 1
12061: PPUSH
12062: CALL 54075 0 1
12066: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
12067: LD_ADDR_VAR 0 4
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: LD_INT 4
12077: PUSH
12078: LD_INT 3
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: LIST
12085: PUSH
12086: LD_OWVAR 67
12090: ARRAY
12091: ST_TO_ADDR
// tmp := [ ] ;
12092: LD_ADDR_VAR 0 7
12096: PUSH
12097: EMPTY
12098: ST_TO_ADDR
// if wave mod 5 = 0 then
12099: LD_VAR 0 1
12103: PUSH
12104: LD_INT 5
12106: MOD
12107: PUSH
12108: LD_INT 0
12110: EQUAL
12111: IFFALSE 12357
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_INT 16
12120: PUSH
12121: LD_INT 21
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 36
12130: PUSH
12131: LD_INT 45
12133: PUSH
12134: EMPTY
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 48
12140: PUSH
12141: LD_INT 58
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 59
12150: PUSH
12151: LD_INT 88
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: PUSH
12158: LD_INT 76
12160: PUSH
12161: LD_INT 106
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 93
12170: PUSH
12171: LD_INT 150
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 92
12180: PUSH
12181: LD_INT 177
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: ST_TO_ADDR
// for i := 1 to 4 do
12197: LD_ADDR_VAR 0 3
12201: PUSH
12202: DOUBLE
12203: LD_INT 1
12205: DEC
12206: ST_TO_ADDR
12207: LD_INT 4
12209: PUSH
12210: FOR_TO
12211: IFFALSE 12353
// begin uc_side := convoySide ;
12213: LD_ADDR_OWVAR 20
12217: PUSH
12218: LD_EXP 40
12222: ST_TO_ADDR
// uc_nation := nation_russian ;
12223: LD_ADDR_OWVAR 21
12227: PUSH
12228: LD_INT 3
12230: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12231: LD_INT 0
12233: PPUSH
12234: LD_INT 1
12236: PPUSH
12237: LD_INT 4
12239: PPUSH
12240: CALL_OW 12
12244: PPUSH
12245: LD_VAR 0 4
12249: PPUSH
12250: CALL_OW 380
// un := CreateHuman ;
12254: LD_ADDR_VAR 0 5
12258: PUSH
12259: CALL_OW 44
12263: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12264: LD_VAR 0 5
12268: PPUSH
12269: LD_INT 3
12271: PPUSH
12272: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12276: LD_VAR 0 5
12280: PPUSH
12281: LD_INT 10
12283: PPUSH
12284: LD_INT 0
12286: PPUSH
12287: CALL_OW 49
// SetLives ( un , rand ( 300 , 1000 ) ) ;
12291: LD_VAR 0 5
12295: PPUSH
12296: LD_INT 300
12298: PPUSH
12299: LD_INT 1000
12301: PPUSH
12302: CALL_OW 12
12306: PPUSH
12307: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12311: LD_ADDR_EXP 38
12315: PUSH
12316: LD_EXP 38
12320: PPUSH
12321: LD_VAR 0 5
12325: PPUSH
12326: CALL 52714 0 2
12330: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12331: LD_ADDR_VAR 0 7
12335: PUSH
12336: LD_VAR 0 7
12340: PPUSH
12341: LD_VAR 0 5
12345: PPUSH
12346: CALL 52714 0 2
12350: ST_TO_ADDR
// end ;
12351: GO 12210
12353: POP
12354: POP
// end else
12355: GO 13519
// if wave mod 3 = 0 then
12357: LD_VAR 0 1
12361: PUSH
12362: LD_INT 3
12364: MOD
12365: PUSH
12366: LD_INT 0
12368: EQUAL
12369: IFFALSE 12840
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12371: LD_ADDR_VAR 0 8
12375: PUSH
12376: LD_INT 133
12378: PUSH
12379: LD_INT 15
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 125
12388: PUSH
12389: LD_INT 34
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 109
12398: PUSH
12399: LD_INT 55
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 99
12408: PUSH
12409: LD_INT 64
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 133
12418: PUSH
12419: LD_INT 102
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 143
12428: PUSH
12429: LD_INT 136
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 127
12438: PUSH
12439: LD_INT 154
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 92
12448: PUSH
12449: LD_INT 152
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 93
12458: PUSH
12459: LD_INT 177
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: ST_TO_ADDR
// for i := 1 to 4 do
12477: LD_ADDR_VAR 0 3
12481: PUSH
12482: DOUBLE
12483: LD_INT 1
12485: DEC
12486: ST_TO_ADDR
12487: LD_INT 4
12489: PUSH
12490: FOR_TO
12491: IFFALSE 12836
// begin uc_side := convoySide ;
12493: LD_ADDR_OWVAR 20
12497: PUSH
12498: LD_EXP 40
12502: ST_TO_ADDR
// uc_nation := nation_russian ;
12503: LD_ADDR_OWVAR 21
12507: PUSH
12508: LD_INT 3
12510: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12511: LD_INT 0
12513: PPUSH
12514: LD_INT 1
12516: PPUSH
12517: LD_INT 4
12519: PPUSH
12520: CALL_OW 12
12524: PPUSH
12525: LD_VAR 0 4
12529: PPUSH
12530: CALL_OW 380
// un := CreateHuman ;
12534: LD_ADDR_VAR 0 5
12538: PUSH
12539: CALL_OW 44
12543: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12544: LD_INT 21
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: LD_INT 1
12556: PPUSH
12557: LD_INT 2
12559: PPUSH
12560: CALL_OW 12
12564: ARRAY
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: LD_INT 42
12574: PUSH
12575: LD_INT 43
12577: PUSH
12578: LD_INT 51
12580: PUSH
12581: LD_INT 44
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: PUSH
12590: LD_INT 1
12592: PPUSH
12593: LD_INT 4
12595: PPUSH
12596: CALL_OW 12
12600: ARRAY
12601: PPUSH
12602: LD_INT 60
12604: PPUSH
12605: LD_INT 90
12607: PPUSH
12608: CALL_OW 12
12612: PPUSH
12613: CALL 19863 0 5
// veh := CreateVehicle ;
12617: LD_ADDR_VAR 0 6
12621: PUSH
12622: CALL_OW 45
12626: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12627: LD_VAR 0 6
12631: PPUSH
12632: LD_INT 3
12634: PPUSH
12635: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
12639: LD_VAR 0 6
12643: PPUSH
12644: LD_INT 300
12646: PPUSH
12647: LD_INT 1000
12649: PPUSH
12650: CALL_OW 12
12654: PPUSH
12655: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12659: LD_VAR 0 6
12663: PPUSH
12664: CALL_OW 264
12668: PUSH
12669: LD_INT 51
12671: EQUAL
12672: IFFALSE 12701
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
12674: LD_VAR 0 6
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: LD_INT 10
12684: PUSH
12685: LD_INT 1
12687: PPUSH
12688: LD_INT 10
12690: PPUSH
12691: CALL_OW 12
12695: MUL
12696: PPUSH
12697: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
12701: LD_INT 10
12703: PPUSH
12704: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
12708: LD_VAR 0 6
12712: PPUSH
12713: LD_INT 7
12715: PPUSH
12716: LD_INT 0
12718: PPUSH
12719: CALL_OW 49
12723: IFFALSE 12701
// PlaceHumanInUnit ( un , veh ) ;
12725: LD_VAR 0 5
12729: PPUSH
12730: LD_VAR 0 6
12734: PPUSH
12735: CALL_OW 52
// convoys := Join ( convoys , un ) ;
12739: LD_ADDR_EXP 38
12743: PUSH
12744: LD_EXP 38
12748: PPUSH
12749: LD_VAR 0 5
12753: PPUSH
12754: CALL 52714 0 2
12758: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12759: LD_ADDR_VAR 0 7
12763: PUSH
12764: LD_VAR 0 7
12768: PPUSH
12769: LD_VAR 0 5
12773: PPUSH
12774: CALL 52714 0 2
12778: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
12779: LD_ADDR_EXP 38
12783: PUSH
12784: LD_EXP 38
12788: PPUSH
12789: LD_VAR 0 6
12793: PPUSH
12794: CALL 52714 0 2
12798: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
12799: LD_ADDR_VAR 0 7
12803: PUSH
12804: LD_VAR 0 7
12808: PPUSH
12809: LD_VAR 0 6
12813: PPUSH
12814: CALL 52714 0 2
12818: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
12819: LD_VAR 0 5
12823: PPUSH
12824: LD_INT 133
12826: PPUSH
12827: LD_INT 15
12829: PPUSH
12830: CALL_OW 111
// end ;
12834: GO 12490
12836: POP
12837: POP
// end else
12838: GO 13519
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
12840: LD_ADDR_VAR 0 8
12844: PUSH
12845: LD_INT 133
12847: PUSH
12848: LD_INT 15
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: PUSH
12855: LD_INT 125
12857: PUSH
12858: LD_INT 34
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 109
12867: PUSH
12868: LD_INT 55
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 99
12877: PUSH
12878: LD_INT 64
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 88
12887: PUSH
12888: LD_INT 70
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 74
12897: PUSH
12898: LD_INT 78
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 70
12907: PUSH
12908: LD_INT 91
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 80
12917: PUSH
12918: LD_INT 113
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: PUSH
12925: LD_INT 89
12927: PUSH
12928: LD_INT 133
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 91
12937: PUSH
12938: LD_INT 159
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: LD_INT 93
12947: PUSH
12948: LD_INT 177
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: ST_TO_ADDR
// for i := 1 to 2 do
12968: LD_ADDR_VAR 0 3
12972: PUSH
12973: DOUBLE
12974: LD_INT 1
12976: DEC
12977: ST_TO_ADDR
12978: LD_INT 2
12980: PUSH
12981: FOR_TO
12982: IFFALSE 13327
// begin uc_side := convoySide ;
12984: LD_ADDR_OWVAR 20
12988: PUSH
12989: LD_EXP 40
12993: ST_TO_ADDR
// uc_nation := nation_russian ;
12994: LD_ADDR_OWVAR 21
12998: PUSH
12999: LD_INT 3
13001: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13002: LD_INT 0
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: LD_INT 4
13010: PPUSH
13011: CALL_OW 12
13015: PPUSH
13016: LD_VAR 0 4
13020: PPUSH
13021: CALL_OW 380
// un := CreateHuman ;
13025: LD_ADDR_VAR 0 5
13029: PUSH
13030: CALL_OW 44
13034: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13035: LD_INT 21
13037: PUSH
13038: LD_INT 22
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 1
13047: PPUSH
13048: LD_INT 2
13050: PPUSH
13051: CALL_OW 12
13055: ARRAY
13056: PPUSH
13057: LD_INT 1
13059: PPUSH
13060: LD_INT 1
13062: PPUSH
13063: LD_INT 42
13065: PUSH
13066: LD_INT 43
13068: PUSH
13069: LD_INT 51
13071: PUSH
13072: LD_INT 44
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: PUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_INT 4
13086: PPUSH
13087: CALL_OW 12
13091: ARRAY
13092: PPUSH
13093: LD_INT 70
13095: PPUSH
13096: LD_INT 90
13098: PPUSH
13099: CALL_OW 12
13103: PPUSH
13104: CALL 19863 0 5
// veh := CreateVehicle ;
13108: LD_ADDR_VAR 0 6
13112: PUSH
13113: CALL_OW 45
13117: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13118: LD_VAR 0 6
13122: PPUSH
13123: LD_INT 3
13125: PPUSH
13126: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
13130: LD_VAR 0 6
13134: PPUSH
13135: LD_INT 300
13137: PPUSH
13138: LD_INT 1000
13140: PPUSH
13141: CALL_OW 12
13145: PPUSH
13146: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13150: LD_VAR 0 6
13154: PPUSH
13155: CALL_OW 264
13159: PUSH
13160: LD_INT 51
13162: EQUAL
13163: IFFALSE 13192
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13165: LD_VAR 0 6
13169: PPUSH
13170: LD_INT 1
13172: PPUSH
13173: LD_INT 10
13175: PUSH
13176: LD_INT 1
13178: PPUSH
13179: LD_INT 10
13181: PPUSH
13182: CALL_OW 12
13186: MUL
13187: PPUSH
13188: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13192: LD_INT 10
13194: PPUSH
13195: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13199: LD_VAR 0 6
13203: PPUSH
13204: LD_INT 7
13206: PPUSH
13207: LD_INT 0
13209: PPUSH
13210: CALL_OW 49
13214: IFFALSE 13192
// PlaceHumanInUnit ( un , veh ) ;
13216: LD_VAR 0 5
13220: PPUSH
13221: LD_VAR 0 6
13225: PPUSH
13226: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13230: LD_ADDR_EXP 38
13234: PUSH
13235: LD_EXP 38
13239: PPUSH
13240: LD_VAR 0 5
13244: PPUSH
13245: CALL 52714 0 2
13249: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13250: LD_ADDR_VAR 0 7
13254: PUSH
13255: LD_VAR 0 7
13259: PPUSH
13260: LD_VAR 0 5
13264: PPUSH
13265: CALL 52714 0 2
13269: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13270: LD_ADDR_EXP 38
13274: PUSH
13275: LD_EXP 38
13279: PPUSH
13280: LD_VAR 0 6
13284: PPUSH
13285: CALL 52714 0 2
13289: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13290: LD_ADDR_VAR 0 7
13294: PUSH
13295: LD_VAR 0 7
13299: PPUSH
13300: LD_VAR 0 6
13304: PPUSH
13305: CALL 52714 0 2
13309: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13310: LD_VAR 0 5
13314: PPUSH
13315: LD_INT 133
13317: PPUSH
13318: LD_INT 15
13320: PPUSH
13321: CALL_OW 111
// end ;
13325: GO 12981
13327: POP
13328: POP
// for i := 1 to rand ( 3 , 5 ) do
13329: LD_ADDR_VAR 0 3
13333: PUSH
13334: DOUBLE
13335: LD_INT 1
13337: DEC
13338: ST_TO_ADDR
13339: LD_INT 3
13341: PPUSH
13342: LD_INT 5
13344: PPUSH
13345: CALL_OW 12
13349: PUSH
13350: FOR_TO
13351: IFFALSE 13517
// begin uc_side := convoySide ;
13353: LD_ADDR_OWVAR 20
13357: PUSH
13358: LD_EXP 40
13362: ST_TO_ADDR
// uc_nation := nation_russian ;
13363: LD_ADDR_OWVAR 21
13367: PUSH
13368: LD_INT 3
13370: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13371: LD_INT 0
13373: PPUSH
13374: LD_INT 1
13376: PPUSH
13377: LD_INT 4
13379: PPUSH
13380: CALL_OW 12
13384: PPUSH
13385: LD_VAR 0 4
13389: PPUSH
13390: CALL_OW 380
// un := CreateHuman ;
13394: LD_ADDR_VAR 0 5
13398: PUSH
13399: CALL_OW 44
13403: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13404: LD_VAR 0 5
13408: PPUSH
13409: LD_INT 3
13411: PPUSH
13412: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13416: LD_INT 35
13418: PPUSH
13419: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13423: LD_VAR 0 5
13427: PPUSH
13428: LD_INT 7
13430: PPUSH
13431: LD_INT 0
13433: PPUSH
13434: CALL_OW 49
13438: IFFALSE 13416
// SetLives ( un , rand ( 300 , 1000 ) ) ;
13440: LD_VAR 0 5
13444: PPUSH
13445: LD_INT 300
13447: PPUSH
13448: LD_INT 1000
13450: PPUSH
13451: CALL_OW 12
13455: PPUSH
13456: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13460: LD_ADDR_EXP 38
13464: PUSH
13465: LD_EXP 38
13469: PPUSH
13470: LD_VAR 0 5
13474: PPUSH
13475: CALL 52714 0 2
13479: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13480: LD_ADDR_VAR 0 7
13484: PUSH
13485: LD_VAR 0 7
13489: PPUSH
13490: LD_VAR 0 5
13494: PPUSH
13495: CALL 52714 0 2
13499: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13500: LD_VAR 0 5
13504: PPUSH
13505: LD_INT 133
13507: PPUSH
13508: LD_INT 15
13510: PPUSH
13511: CALL_OW 111
// end ;
13515: GO 13350
13517: POP
13518: POP
// end ; if not tmp then
13519: LD_VAR 0 7
13523: NOT
13524: IFFALSE 13528
// exit ;
13526: GO 13834
// repeat wait ( 0 0$1 ) ;
13528: LD_INT 35
13530: PPUSH
13531: CALL_OW 67
// for i in tmp do
13535: LD_ADDR_VAR 0 3
13539: PUSH
13540: LD_VAR 0 7
13544: PUSH
13545: FOR_IN
13546: IFFALSE 13825
// begin if IsDead ( i ) then
13548: LD_VAR 0 3
13552: PPUSH
13553: CALL_OW 301
13557: IFFALSE 13577
// tmp := tmp diff i else
13559: LD_ADDR_VAR 0 7
13563: PUSH
13564: LD_VAR 0 7
13568: PUSH
13569: LD_VAR 0 3
13573: DIFF
13574: ST_TO_ADDR
13575: GO 13823
// if IsInArea ( i , southEndArea ) then
13577: LD_VAR 0 3
13581: PPUSH
13582: LD_INT 9
13584: PPUSH
13585: CALL_OW 308
13589: IFFALSE 13742
// begin tmp := tmp diff i ;
13591: LD_ADDR_VAR 0 7
13595: PUSH
13596: LD_VAR 0 7
13600: PUSH
13601: LD_VAR 0 3
13605: DIFF
13606: ST_TO_ADDR
// convoys := convoys diff i ;
13607: LD_ADDR_EXP 38
13611: PUSH
13612: LD_EXP 38
13616: PUSH
13617: LD_VAR 0 3
13621: DIFF
13622: ST_TO_ADDR
// if GetType ( i ) = unit_human then
13623: LD_VAR 0 3
13627: PPUSH
13628: CALL_OW 247
13632: PUSH
13633: LD_INT 1
13635: EQUAL
13636: IFFALSE 13657
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
13638: LD_EXP 40
13642: PPUSH
13643: LD_INT 7
13645: PPUSH
13646: CALL 8266 0 1
13650: PPUSH
13651: CALL 8108 0 2
13655: GO 13716
// begin tmp := tmp diff IsInUnit ( i ) ;
13657: LD_ADDR_VAR 0 7
13661: PUSH
13662: LD_VAR 0 7
13666: PUSH
13667: LD_VAR 0 3
13671: PPUSH
13672: CALL_OW 310
13676: DIFF
13677: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
13678: LD_ADDR_EXP 38
13682: PUSH
13683: LD_EXP 38
13687: PUSH
13688: LD_VAR 0 3
13692: PPUSH
13693: CALL_OW 310
13697: DIFF
13698: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
13699: LD_EXP 40
13703: PPUSH
13704: LD_INT 8
13706: PPUSH
13707: CALL 8266 0 1
13711: PPUSH
13712: CALL 8108 0 2
// end ; RemoveUnit ( i ) ;
13716: LD_VAR 0 3
13720: PPUSH
13721: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
13725: LD_ADDR_EXP 5
13729: PUSH
13730: LD_EXP 5
13734: PPUSH
13735: CALL 54075 0 1
13739: ST_TO_ADDR
// end else
13740: GO 13823
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
13742: LD_VAR 0 3
13746: PPUSH
13747: CALL_OW 247
13751: PUSH
13752: LD_INT 2
13754: EQUAL
13755: PUSH
13756: LD_VAR 0 3
13760: PPUSH
13761: CALL_OW 261
13765: PUSH
13766: LD_INT 0
13768: EQUAL
13769: AND
13770: IFFALSE 13806
// begin tmp := tmp diff i ;
13772: LD_ADDR_VAR 0 7
13776: PUSH
13777: LD_VAR 0 7
13781: PUSH
13782: LD_VAR 0 3
13786: DIFF
13787: ST_TO_ADDR
// convoys := convoys diff i ;
13788: LD_ADDR_EXP 38
13792: PUSH
13793: LD_EXP 38
13797: PUSH
13798: LD_VAR 0 3
13802: DIFF
13803: ST_TO_ADDR
// end else
13804: GO 13823
// MoveTo ( i , path , southEndArea ) ;
13806: LD_VAR 0 3
13810: PPUSH
13811: LD_VAR 0 8
13815: PPUSH
13816: LD_INT 9
13818: PPUSH
13819: CALL 13839 0 3
// end ;
13823: GO 13545
13825: POP
13826: POP
// until not tmp ;
13827: LD_VAR 0 7
13831: NOT
13832: IFFALSE 13528
// end ;
13834: LD_VAR 0 2
13838: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
13839: LD_INT 0
13841: PPUSH
13842: PPUSH
13843: PPUSH
13844: PPUSH
13845: PPUSH
13846: PPUSH
// if not unit then
13847: LD_VAR 0 1
13851: NOT
13852: IFFALSE 13856
// exit ;
13854: GO 14584
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
13856: LD_ADDR_VAR 0 9
13860: PUSH
13861: LD_INT 29
13863: PUSH
13864: LD_INT 91
13866: PUSH
13867: LD_INT 49
13869: PUSH
13870: LD_INT 51
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: ST_TO_ADDR
// if IsOk ( unit ) then
13879: LD_VAR 0 1
13883: PPUSH
13884: CALL_OW 302
13888: IFFALSE 14584
// begin tag := GetTag ( unit ) + 1 ;
13890: LD_ADDR_VAR 0 6
13894: PUSH
13895: LD_VAR 0 1
13899: PPUSH
13900: CALL_OW 110
13904: PUSH
13905: LD_INT 1
13907: PLUS
13908: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
13909: LD_ADDR_VAR 0 5
13913: PUSH
13914: LD_VAR 0 1
13918: PPUSH
13919: CALL_OW 250
13923: PPUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: CALL_OW 251
13933: PPUSH
13934: LD_INT 3
13936: PPUSH
13937: CALL 55060 0 3
13941: ST_TO_ADDR
// type := GetType ( unit ) ;
13942: LD_ADDR_VAR 0 7
13946: PUSH
13947: LD_VAR 0 1
13951: PPUSH
13952: CALL_OW 247
13956: ST_TO_ADDR
// if type = unit_human then
13957: LD_VAR 0 7
13961: PUSH
13962: LD_INT 1
13964: EQUAL
13965: IFFALSE 14055
// begin vehicle := IsInUnit ( unit ) ;
13967: LD_ADDR_VAR 0 8
13971: PUSH
13972: LD_VAR 0 1
13976: PPUSH
13977: CALL_OW 310
13981: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
13982: LD_VAR 0 8
13986: PUSH
13987: LD_VAR 0 8
13991: PPUSH
13992: CALL_OW 261
13996: PUSH
13997: LD_INT 0
13999: EQUAL
14000: AND
14001: IFFALSE 14053
// begin ComExitVehicle ( unit ) ;
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14012: LD_VAR 0 1
14016: PPUSH
14017: LD_VAR 0 2
14021: PUSH
14022: LD_VAR 0 6
14026: ARRAY
14027: PUSH
14028: LD_INT 1
14030: ARRAY
14031: PPUSH
14032: LD_VAR 0 2
14036: PUSH
14037: LD_VAR 0 6
14041: ARRAY
14042: PUSH
14043: LD_INT 2
14045: ARRAY
14046: PPUSH
14047: CALL_OW 171
// exit ;
14051: GO 14584
// end ; end else
14053: GO 14130
// begin if GetFuel ( unit ) = 0 then
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 261
14064: PUSH
14065: LD_INT 0
14067: EQUAL
14068: IFFALSE 14130
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 311
14079: PPUSH
14080: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14084: LD_VAR 0 1
14088: PPUSH
14089: CALL_OW 311
14093: PPUSH
14094: LD_VAR 0 2
14098: PUSH
14099: LD_VAR 0 6
14103: ARRAY
14104: PUSH
14105: LD_INT 1
14107: ARRAY
14108: PPUSH
14109: LD_VAR 0 2
14113: PUSH
14114: LD_VAR 0 6
14118: ARRAY
14119: PUSH
14120: LD_INT 2
14122: ARRAY
14123: PPUSH
14124: CALL_OW 171
// exit ;
14128: GO 14584
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and GetCargo ( unit , mat_cans ) then
14130: LD_VAR 0 7
14134: PUSH
14135: LD_INT 2
14137: EQUAL
14138: PUSH
14139: LD_VAR 0 1
14143: PPUSH
14144: CALL_OW 264
14148: PUSH
14149: LD_INT 51
14151: EQUAL
14152: AND
14153: PUSH
14154: LD_VAR 0 1
14158: PPUSH
14159: LD_INT 29
14161: PPUSH
14162: CALL_OW 308
14166: AND
14167: PUSH
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: CALL_OW 289
14180: AND
14181: IFFALSE 14229
// begin goToUnload := Join ( goToUnload , unit ) ;
14183: LD_ADDR_EXP 8
14187: PUSH
14188: LD_EXP 8
14192: PPUSH
14193: LD_VAR 0 1
14197: PPUSH
14198: CALL 52714 0 2
14202: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14203: LD_VAR 0 1
14207: PPUSH
14208: LD_INT 113
14210: PPUSH
14211: LD_INT 117
14213: PPUSH
14214: CALL_OW 111
// AddComUnload ( unit ) ;
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 219
// exit ;
14227: GO 14584
// end ; if unit in goToUnload then
14229: LD_VAR 0 1
14233: PUSH
14234: LD_EXP 8
14238: IN
14239: IFFALSE 14297
// begin if GetCargo ( unit , mat_cans ) = 0 then
14241: LD_VAR 0 1
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 289
14253: PUSH
14254: LD_INT 0
14256: EQUAL
14257: IFFALSE 14295
// begin SetTag ( unit , tag + 2 ) ;
14259: LD_VAR 0 1
14263: PPUSH
14264: LD_VAR 0 6
14268: PUSH
14269: LD_INT 2
14271: PLUS
14272: PPUSH
14273: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14277: LD_ADDR_EXP 8
14281: PUSH
14282: LD_EXP 8
14286: PUSH
14287: LD_VAR 0 1
14291: DIFF
14292: ST_TO_ADDR
// end else
14293: GO 14297
// exit ;
14295: GO 14584
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14297: LD_VAR 0 7
14301: PUSH
14302: LD_INT 2
14304: EQUAL
14305: PUSH
14306: LD_VAR 0 5
14310: PUSH
14311: LD_INT 3
14313: GREATER
14314: AND
14315: PUSH
14316: LD_VAR 0 1
14320: PPUSH
14321: CALL_OW 264
14325: PUSH
14326: LD_VAR 0 9
14330: IN
14331: NOT
14332: AND
14333: IFFALSE 14372
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14335: LD_VAR 0 1
14339: PPUSH
14340: LD_VAR 0 5
14344: PUSH
14345: LD_INT 1
14347: ARRAY
14348: PUSH
14349: LD_INT 1
14351: ARRAY
14352: PPUSH
14353: LD_VAR 0 5
14357: PUSH
14358: LD_INT 1
14360: ARRAY
14361: PUSH
14362: LD_INT 2
14364: ARRAY
14365: PPUSH
14366: CALL_OW 116
14370: GO 14584
// if path > tag then
14372: LD_VAR 0 2
14376: PUSH
14377: LD_VAR 0 6
14381: GREATER
14382: IFFALSE 14553
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14384: LD_VAR 0 1
14388: PPUSH
14389: LD_VAR 0 2
14393: PUSH
14394: LD_VAR 0 6
14398: ARRAY
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: LD_VAR 0 2
14408: PUSH
14409: LD_VAR 0 6
14413: ARRAY
14414: PUSH
14415: LD_INT 2
14417: ARRAY
14418: PPUSH
14419: CALL_OW 297
14423: PUSH
14424: LD_INT 6
14426: GREATER
14427: IFFALSE 14537
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 257
14438: PUSH
14439: LD_INT 2
14441: PUSH
14442: LD_INT 3
14444: PUSH
14445: LD_INT 4
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: IN
14453: IFFALSE 14496
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14455: LD_VAR 0 1
14459: PPUSH
14460: LD_VAR 0 2
14464: PUSH
14465: LD_VAR 0 6
14469: ARRAY
14470: PUSH
14471: LD_INT 1
14473: ARRAY
14474: PPUSH
14475: LD_VAR 0 2
14479: PUSH
14480: LD_VAR 0 6
14484: ARRAY
14485: PUSH
14486: LD_INT 2
14488: ARRAY
14489: PPUSH
14490: CALL_OW 111
14494: GO 14535
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14496: LD_VAR 0 1
14500: PPUSH
14501: LD_VAR 0 2
14505: PUSH
14506: LD_VAR 0 6
14510: ARRAY
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 2
14520: PUSH
14521: LD_VAR 0 6
14525: ARRAY
14526: PUSH
14527: LD_INT 2
14529: ARRAY
14530: PPUSH
14531: CALL_OW 114
14535: GO 14551
// SetTag ( unit , tag ) ;
14537: LD_VAR 0 1
14541: PPUSH
14542: LD_VAR 0 6
14546: PPUSH
14547: CALL_OW 109
// end else
14551: GO 14584
// if not IsInArea ( unit , area ) then
14553: LD_VAR 0 1
14557: PPUSH
14558: LD_VAR 0 3
14562: PPUSH
14563: CALL_OW 308
14567: NOT
14568: IFFALSE 14584
// ComMoveToArea ( unit , area ) ;
14570: LD_VAR 0 1
14574: PPUSH
14575: LD_VAR 0 3
14579: PPUSH
14580: CALL_OW 113
// end ; end ; end_of_file
14584: LD_VAR 0 4
14588: RET
// every 0 0$20 trigger game do
14589: LD_EXP 2
14593: IFFALSE 14634
14595: GO 14597
14597: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14598: LD_INT 11
14600: PUSH
14601: LD_INT 12
14603: PUSH
14604: LD_INT 13
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: PPUSH
14612: LD_EXP 29
14616: PUSH
14617: LD_INT 2
14619: ARRAY
14620: PPUSH
14621: LD_EXP 29
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PPUSH
14630: CALL 14635 0 3
14634: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
14635: LD_INT 0
14637: PPUSH
14638: PPUSH
14639: PPUSH
// if not areas then
14640: LD_VAR 0 1
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14855
// x := 5 ;
14649: LD_ADDR_VAR 0 6
14653: PUSH
14654: LD_INT 5
14656: ST_TO_ADDR
// repeat wait ( time ) ;
14657: LD_VAR 0 2
14661: PPUSH
14662: CALL_OW 67
// for i in areas do
14666: LD_ADDR_VAR 0 5
14670: PUSH
14671: LD_VAR 0 1
14675: PUSH
14676: FOR_IN
14677: IFFALSE 14766
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
14679: LD_VAR 0 5
14683: PPUSH
14684: LD_INT 1
14686: PPUSH
14687: CALL_OW 287
14691: PUSH
14692: LD_INT 15
14694: PUSH
14695: LD_INT 12
14697: PUSH
14698: LD_INT 10
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: PUSH
14706: LD_OWVAR 67
14710: ARRAY
14711: LESS
14712: IFFALSE 14764
// begin wait ( 0 0$10 * Difficulty ) ;
14714: LD_INT 350
14716: PUSH
14717: LD_OWVAR 67
14721: MUL
14722: PPUSH
14723: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14727: LD_VAR 0 6
14731: PPUSH
14732: LD_VAR 0 5
14736: PPUSH
14737: LD_INT 1
14739: PPUSH
14740: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_VAR 0 3
14753: PUSH
14754: LD_VAR 0 6
14758: PUSH
14759: LD_INT 10
14761: MUL
14762: MINUS
14763: ST_TO_ADDR
// end ; end ;
14764: GO 14676
14766: POP
14767: POP
// time := time + ( 0 0$5 * Difficulty ) ;
14768: LD_ADDR_VAR 0 2
14772: PUSH
14773: LD_VAR 0 2
14777: PUSH
14778: LD_INT 175
14780: PUSH
14781: LD_OWVAR 67
14785: MUL
14786: PLUS
14787: ST_TO_ADDR
// x := x - 1 ;
14788: LD_ADDR_VAR 0 6
14792: PUSH
14793: LD_VAR 0 6
14797: PUSH
14798: LD_INT 1
14800: MINUS
14801: ST_TO_ADDR
// if x = 0 then
14802: LD_VAR 0 6
14806: PUSH
14807: LD_INT 0
14809: EQUAL
14810: IFFALSE 14820
// x := 5 ;
14812: LD_ADDR_VAR 0 6
14816: PUSH
14817: LD_INT 5
14819: ST_TO_ADDR
// if time > 2 2$00 then
14820: LD_VAR 0 2
14824: PUSH
14825: LD_INT 4200
14827: GREATER
14828: IFFALSE 14838
// time := 0 0$40 ;
14830: LD_ADDR_VAR 0 2
14834: PUSH
14835: LD_INT 1400
14837: ST_TO_ADDR
// until not game or amount <= 0 ;
14838: LD_EXP 2
14842: NOT
14843: PUSH
14844: LD_VAR 0 3
14848: PUSH
14849: LD_INT 0
14851: LESSEQUAL
14852: OR
14853: IFFALSE 14657
// end ; end_of_file
14855: LD_VAR 0 4
14859: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14860: LD_VAR 0 1
14864: PUSH
14865: LD_INT 200
14867: DOUBLE
14868: GREATEREQUAL
14869: IFFALSE 14877
14871: LD_INT 299
14873: DOUBLE
14874: LESSEQUAL
14875: IFTRUE 14879
14877: GO 14911
14879: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14880: LD_VAR 0 1
14884: PPUSH
14885: LD_VAR 0 2
14889: PPUSH
14890: LD_VAR 0 3
14894: PPUSH
14895: LD_VAR 0 4
14899: PPUSH
14900: LD_VAR 0 5
14904: PPUSH
14905: CALL 73993 0 5
14909: GO 14988
14911: LD_INT 300
14913: DOUBLE
14914: GREATEREQUAL
14915: IFFALSE 14923
14917: LD_INT 399
14919: DOUBLE
14920: LESSEQUAL
14921: IFTRUE 14925
14923: GO 14987
14925: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
14926: LD_VAR 0 1
14930: PPUSH
14931: LD_VAR 0 2
14935: PPUSH
14936: LD_VAR 0 3
14940: PPUSH
14941: LD_VAR 0 4
14945: PPUSH
14946: LD_VAR 0 5
14950: PPUSH
14951: LD_VAR 0 6
14955: PPUSH
14956: LD_VAR 0 7
14960: PPUSH
14961: LD_VAR 0 8
14965: PPUSH
14966: LD_VAR 0 9
14970: PPUSH
14971: LD_VAR 0 10
14975: PPUSH
14976: LD_VAR 0 11
14980: PPUSH
14981: CALL 70318 0 11
14985: GO 14988
14987: POP
// end ;
14988: PPOPN 11
14990: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
14991: LD_VAR 0 1
14995: PPUSH
14996: LD_VAR 0 2
15000: PPUSH
15001: LD_VAR 0 3
15005: PPUSH
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_VAR 0 5
15015: PPUSH
15016: CALL 73729 0 5
// end ; end_of_file
15020: PPOPN 5
15022: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15023: LD_INT 0
15025: PPUSH
15026: PPUSH
// if exist_mode then
15027: LD_VAR 0 2
15031: IFFALSE 15056
// unit := CreateCharacter ( prefix & ident ) else
15033: LD_ADDR_VAR 0 5
15037: PUSH
15038: LD_VAR 0 3
15042: PUSH
15043: LD_VAR 0 1
15047: STR
15048: PPUSH
15049: CALL_OW 34
15053: ST_TO_ADDR
15054: GO 15071
// unit := NewCharacter ( ident ) ;
15056: LD_ADDR_VAR 0 5
15060: PUSH
15061: LD_VAR 0 1
15065: PPUSH
15066: CALL_OW 25
15070: ST_TO_ADDR
// result := unit ;
15071: LD_ADDR_VAR 0 4
15075: PUSH
15076: LD_VAR 0 5
15080: ST_TO_ADDR
// end ;
15081: LD_VAR 0 4
15085: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
// if not side or not nation then
15090: LD_VAR 0 1
15094: NOT
15095: PUSH
15096: LD_VAR 0 2
15100: NOT
15101: OR
15102: IFFALSE 15106
// exit ;
15104: GO 15874
// case nation of nation_american :
15106: LD_VAR 0 2
15110: PUSH
15111: LD_INT 1
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15333
15119: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15120: LD_ADDR_VAR 0 4
15124: PUSH
15125: LD_INT 35
15127: PUSH
15128: LD_INT 45
15130: PUSH
15131: LD_INT 46
15133: PUSH
15134: LD_INT 47
15136: PUSH
15137: LD_INT 82
15139: PUSH
15140: LD_INT 83
15142: PUSH
15143: LD_INT 84
15145: PUSH
15146: LD_INT 85
15148: PUSH
15149: LD_INT 86
15151: PUSH
15152: LD_INT 1
15154: PUSH
15155: LD_INT 2
15157: PUSH
15158: LD_INT 6
15160: PUSH
15161: LD_INT 15
15163: PUSH
15164: LD_INT 16
15166: PUSH
15167: LD_INT 7
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 13
15175: PUSH
15176: LD_INT 10
15178: PUSH
15179: LD_INT 14
15181: PUSH
15182: LD_INT 20
15184: PUSH
15185: LD_INT 21
15187: PUSH
15188: LD_INT 22
15190: PUSH
15191: LD_INT 25
15193: PUSH
15194: LD_INT 32
15196: PUSH
15197: LD_INT 27
15199: PUSH
15200: LD_INT 36
15202: PUSH
15203: LD_INT 69
15205: PUSH
15206: LD_INT 39
15208: PUSH
15209: LD_INT 34
15211: PUSH
15212: LD_INT 40
15214: PUSH
15215: LD_INT 48
15217: PUSH
15218: LD_INT 49
15220: PUSH
15221: LD_INT 50
15223: PUSH
15224: LD_INT 51
15226: PUSH
15227: LD_INT 52
15229: PUSH
15230: LD_INT 53
15232: PUSH
15233: LD_INT 54
15235: PUSH
15236: LD_INT 55
15238: PUSH
15239: LD_INT 56
15241: PUSH
15242: LD_INT 57
15244: PUSH
15245: LD_INT 58
15247: PUSH
15248: LD_INT 59
15250: PUSH
15251: LD_INT 60
15253: PUSH
15254: LD_INT 61
15256: PUSH
15257: LD_INT 62
15259: PUSH
15260: LD_INT 80
15262: PUSH
15263: LD_INT 82
15265: PUSH
15266: LD_INT 83
15268: PUSH
15269: LD_INT 84
15271: PUSH
15272: LD_INT 85
15274: PUSH
15275: LD_INT 86
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: ST_TO_ADDR
15331: GO 15798
15333: LD_INT 2
15335: DOUBLE
15336: EQUAL
15337: IFTRUE 15341
15339: GO 15567
15341: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15342: LD_ADDR_VAR 0 4
15346: PUSH
15347: LD_INT 35
15349: PUSH
15350: LD_INT 45
15352: PUSH
15353: LD_INT 46
15355: PUSH
15356: LD_INT 47
15358: PUSH
15359: LD_INT 82
15361: PUSH
15362: LD_INT 83
15364: PUSH
15365: LD_INT 84
15367: PUSH
15368: LD_INT 85
15370: PUSH
15371: LD_INT 87
15373: PUSH
15374: LD_INT 70
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: LD_INT 11
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: LD_INT 4
15388: PUSH
15389: LD_INT 5
15391: PUSH
15392: LD_INT 6
15394: PUSH
15395: LD_INT 15
15397: PUSH
15398: LD_INT 18
15400: PUSH
15401: LD_INT 7
15403: PUSH
15404: LD_INT 17
15406: PUSH
15407: LD_INT 8
15409: PUSH
15410: LD_INT 20
15412: PUSH
15413: LD_INT 21
15415: PUSH
15416: LD_INT 22
15418: PUSH
15419: LD_INT 72
15421: PUSH
15422: LD_INT 26
15424: PUSH
15425: LD_INT 69
15427: PUSH
15428: LD_INT 39
15430: PUSH
15431: LD_INT 40
15433: PUSH
15434: LD_INT 41
15436: PUSH
15437: LD_INT 42
15439: PUSH
15440: LD_INT 43
15442: PUSH
15443: LD_INT 48
15445: PUSH
15446: LD_INT 49
15448: PUSH
15449: LD_INT 50
15451: PUSH
15452: LD_INT 51
15454: PUSH
15455: LD_INT 52
15457: PUSH
15458: LD_INT 53
15460: PUSH
15461: LD_INT 54
15463: PUSH
15464: LD_INT 55
15466: PUSH
15467: LD_INT 56
15469: PUSH
15470: LD_INT 60
15472: PUSH
15473: LD_INT 61
15475: PUSH
15476: LD_INT 62
15478: PUSH
15479: LD_INT 66
15481: PUSH
15482: LD_INT 67
15484: PUSH
15485: LD_INT 68
15487: PUSH
15488: LD_INT 81
15490: PUSH
15491: LD_INT 82
15493: PUSH
15494: LD_INT 83
15496: PUSH
15497: LD_INT 84
15499: PUSH
15500: LD_INT 85
15502: PUSH
15503: LD_INT 87
15505: PUSH
15506: LD_INT 88
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: ST_TO_ADDR
15565: GO 15798
15567: LD_INT 3
15569: DOUBLE
15570: EQUAL
15571: IFTRUE 15575
15573: GO 15797
15575: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15576: LD_ADDR_VAR 0 4
15580: PUSH
15581: LD_INT 46
15583: PUSH
15584: LD_INT 47
15586: PUSH
15587: LD_INT 1
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: LD_INT 82
15595: PUSH
15596: LD_INT 83
15598: PUSH
15599: LD_INT 84
15601: PUSH
15602: LD_INT 85
15604: PUSH
15605: LD_INT 86
15607: PUSH
15608: LD_INT 11
15610: PUSH
15611: LD_INT 9
15613: PUSH
15614: LD_INT 20
15616: PUSH
15617: LD_INT 19
15619: PUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 24
15625: PUSH
15626: LD_INT 22
15628: PUSH
15629: LD_INT 25
15631: PUSH
15632: LD_INT 28
15634: PUSH
15635: LD_INT 29
15637: PUSH
15638: LD_INT 30
15640: PUSH
15641: LD_INT 31
15643: PUSH
15644: LD_INT 37
15646: PUSH
15647: LD_INT 38
15649: PUSH
15650: LD_INT 32
15652: PUSH
15653: LD_INT 27
15655: PUSH
15656: LD_INT 33
15658: PUSH
15659: LD_INT 69
15661: PUSH
15662: LD_INT 39
15664: PUSH
15665: LD_INT 34
15667: PUSH
15668: LD_INT 40
15670: PUSH
15671: LD_INT 71
15673: PUSH
15674: LD_INT 23
15676: PUSH
15677: LD_INT 44
15679: PUSH
15680: LD_INT 48
15682: PUSH
15683: LD_INT 49
15685: PUSH
15686: LD_INT 50
15688: PUSH
15689: LD_INT 51
15691: PUSH
15692: LD_INT 52
15694: PUSH
15695: LD_INT 53
15697: PUSH
15698: LD_INT 54
15700: PUSH
15701: LD_INT 55
15703: PUSH
15704: LD_INT 56
15706: PUSH
15707: LD_INT 57
15709: PUSH
15710: LD_INT 58
15712: PUSH
15713: LD_INT 59
15715: PUSH
15716: LD_INT 63
15718: PUSH
15719: LD_INT 64
15721: PUSH
15722: LD_INT 65
15724: PUSH
15725: LD_INT 82
15727: PUSH
15728: LD_INT 83
15730: PUSH
15731: LD_INT 84
15733: PUSH
15734: LD_INT 85
15736: PUSH
15737: LD_INT 86
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: ST_TO_ADDR
15795: GO 15798
15797: POP
// if state > - 1 and state < 3 then
15798: LD_VAR 0 3
15802: PUSH
15803: LD_INT 1
15805: NEG
15806: GREATER
15807: PUSH
15808: LD_VAR 0 3
15812: PUSH
15813: LD_INT 3
15815: LESS
15816: AND
15817: IFFALSE 15874
// for i in result do
15819: LD_ADDR_VAR 0 5
15823: PUSH
15824: LD_VAR 0 4
15828: PUSH
15829: FOR_IN
15830: IFFALSE 15872
// if GetTech ( i , side ) <> state then
15832: LD_VAR 0 5
15836: PPUSH
15837: LD_VAR 0 1
15841: PPUSH
15842: CALL_OW 321
15846: PUSH
15847: LD_VAR 0 3
15851: NONEQUAL
15852: IFFALSE 15870
// result := result diff i ;
15854: LD_ADDR_VAR 0 4
15858: PUSH
15859: LD_VAR 0 4
15863: PUSH
15864: LD_VAR 0 5
15868: DIFF
15869: ST_TO_ADDR
15870: GO 15829
15872: POP
15873: POP
// end ;
15874: LD_VAR 0 4
15878: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15879: LD_INT 0
15881: PPUSH
15882: PPUSH
15883: PPUSH
// result := true ;
15884: LD_ADDR_VAR 0 3
15888: PUSH
15889: LD_INT 1
15891: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15892: LD_ADDR_VAR 0 5
15896: PUSH
15897: LD_VAR 0 2
15901: PPUSH
15902: CALL_OW 480
15906: ST_TO_ADDR
// if not tmp then
15907: LD_VAR 0 5
15911: NOT
15912: IFFALSE 15916
// exit ;
15914: GO 15965
// for i in tmp do
15916: LD_ADDR_VAR 0 4
15920: PUSH
15921: LD_VAR 0 5
15925: PUSH
15926: FOR_IN
15927: IFFALSE 15963
// if GetTech ( i , side ) <> state_researched then
15929: LD_VAR 0 4
15933: PPUSH
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 321
15943: PUSH
15944: LD_INT 2
15946: NONEQUAL
15947: IFFALSE 15961
// begin result := false ;
15949: LD_ADDR_VAR 0 3
15953: PUSH
15954: LD_INT 0
15956: ST_TO_ADDR
// exit ;
15957: POP
15958: POP
15959: GO 15965
// end ;
15961: GO 15926
15963: POP
15964: POP
// end ;
15965: LD_VAR 0 3
15969: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
15970: LD_INT 0
15972: PPUSH
15973: PPUSH
15974: PPUSH
15975: PPUSH
15976: PPUSH
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
15982: PPUSH
15983: PPUSH
15984: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
15985: LD_VAR 0 1
15989: NOT
15990: PUSH
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 257
16000: PUSH
16001: LD_INT 9
16003: NONEQUAL
16004: OR
16005: IFFALSE 16009
// exit ;
16007: GO 16582
// side := GetSide ( unit ) ;
16009: LD_ADDR_VAR 0 9
16013: PUSH
16014: LD_VAR 0 1
16018: PPUSH
16019: CALL_OW 255
16023: ST_TO_ADDR
// tech_space := tech_spacanom ;
16024: LD_ADDR_VAR 0 12
16028: PUSH
16029: LD_INT 29
16031: ST_TO_ADDR
// tech_time := tech_taurad ;
16032: LD_ADDR_VAR 0 13
16036: PUSH
16037: LD_INT 28
16039: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16040: LD_ADDR_VAR 0 11
16044: PUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: CALL_OW 310
16054: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16055: LD_VAR 0 11
16059: PPUSH
16060: CALL_OW 247
16064: PUSH
16065: LD_INT 2
16067: EQUAL
16068: IFFALSE 16072
// exit ;
16070: GO 16582
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16072: LD_ADDR_VAR 0 8
16076: PUSH
16077: LD_INT 81
16079: PUSH
16080: LD_VAR 0 9
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 3
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: EMPTY
16103: LIST
16104: LIST
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PPUSH
16110: CALL_OW 69
16114: ST_TO_ADDR
// if not tmp then
16115: LD_VAR 0 8
16119: NOT
16120: IFFALSE 16124
// exit ;
16122: GO 16582
// if in_unit then
16124: LD_VAR 0 11
16128: IFFALSE 16152
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16130: LD_ADDR_VAR 0 10
16134: PUSH
16135: LD_VAR 0 8
16139: PPUSH
16140: LD_VAR 0 11
16144: PPUSH
16145: CALL_OW 74
16149: ST_TO_ADDR
16150: GO 16172
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16152: LD_ADDR_VAR 0 10
16156: PUSH
16157: LD_VAR 0 8
16161: PPUSH
16162: LD_VAR 0 1
16166: PPUSH
16167: CALL_OW 74
16171: ST_TO_ADDR
// if not enemy then
16172: LD_VAR 0 10
16176: NOT
16177: IFFALSE 16181
// exit ;
16179: GO 16582
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16181: LD_VAR 0 11
16185: PUSH
16186: LD_VAR 0 11
16190: PPUSH
16191: LD_VAR 0 10
16195: PPUSH
16196: CALL_OW 296
16200: PUSH
16201: LD_INT 13
16203: GREATER
16204: AND
16205: PUSH
16206: LD_VAR 0 1
16210: PPUSH
16211: LD_VAR 0 10
16215: PPUSH
16216: CALL_OW 296
16220: PUSH
16221: LD_INT 12
16223: GREATER
16224: OR
16225: IFFALSE 16229
// exit ;
16227: GO 16582
// missile := [ 1 ] ;
16229: LD_ADDR_VAR 0 14
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: EMPTY
16238: LIST
16239: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16240: LD_VAR 0 9
16244: PPUSH
16245: LD_VAR 0 12
16249: PPUSH
16250: CALL_OW 325
16254: IFFALSE 16283
// missile := Replace ( missile , missile + 1 , 2 ) ;
16256: LD_ADDR_VAR 0 14
16260: PUSH
16261: LD_VAR 0 14
16265: PPUSH
16266: LD_VAR 0 14
16270: PUSH
16271: LD_INT 1
16273: PLUS
16274: PPUSH
16275: LD_INT 2
16277: PPUSH
16278: CALL_OW 1
16282: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16283: LD_VAR 0 9
16287: PPUSH
16288: LD_VAR 0 13
16292: PPUSH
16293: CALL_OW 325
16297: PUSH
16298: LD_VAR 0 10
16302: PPUSH
16303: CALL_OW 255
16307: PPUSH
16308: LD_VAR 0 13
16312: PPUSH
16313: CALL_OW 325
16317: NOT
16318: AND
16319: IFFALSE 16348
// missile := Replace ( missile , missile + 1 , 3 ) ;
16321: LD_ADDR_VAR 0 14
16325: PUSH
16326: LD_VAR 0 14
16330: PPUSH
16331: LD_VAR 0 14
16335: PUSH
16336: LD_INT 1
16338: PLUS
16339: PPUSH
16340: LD_INT 3
16342: PPUSH
16343: CALL_OW 1
16347: ST_TO_ADDR
// if missile < 2 then
16348: LD_VAR 0 14
16352: PUSH
16353: LD_INT 2
16355: LESS
16356: IFFALSE 16360
// exit ;
16358: GO 16582
// x := GetX ( enemy ) ;
16360: LD_ADDR_VAR 0 4
16364: PUSH
16365: LD_VAR 0 10
16369: PPUSH
16370: CALL_OW 250
16374: ST_TO_ADDR
// y := GetY ( enemy ) ;
16375: LD_ADDR_VAR 0 5
16379: PUSH
16380: LD_VAR 0 10
16384: PPUSH
16385: CALL_OW 251
16389: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16390: LD_ADDR_VAR 0 6
16394: PUSH
16395: LD_VAR 0 4
16399: PUSH
16400: LD_INT 1
16402: NEG
16403: PPUSH
16404: LD_INT 1
16406: PPUSH
16407: CALL_OW 12
16411: PLUS
16412: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16413: LD_ADDR_VAR 0 7
16417: PUSH
16418: LD_VAR 0 5
16422: PUSH
16423: LD_INT 1
16425: NEG
16426: PPUSH
16427: LD_INT 1
16429: PPUSH
16430: CALL_OW 12
16434: PLUS
16435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16436: LD_VAR 0 6
16440: PPUSH
16441: LD_VAR 0 7
16445: PPUSH
16446: CALL_OW 488
16450: NOT
16451: IFFALSE 16473
// begin _x := x ;
16453: LD_ADDR_VAR 0 6
16457: PUSH
16458: LD_VAR 0 4
16462: ST_TO_ADDR
// _y := y ;
16463: LD_ADDR_VAR 0 7
16467: PUSH
16468: LD_VAR 0 5
16472: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16473: LD_ADDR_VAR 0 3
16477: PUSH
16478: LD_INT 1
16480: PPUSH
16481: LD_VAR 0 14
16485: PPUSH
16486: CALL_OW 12
16490: ST_TO_ADDR
// case i of 1 :
16491: LD_VAR 0 3
16495: PUSH
16496: LD_INT 1
16498: DOUBLE
16499: EQUAL
16500: IFTRUE 16504
16502: GO 16521
16504: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16505: LD_VAR 0 1
16509: PPUSH
16510: LD_VAR 0 10
16514: PPUSH
16515: CALL_OW 115
16519: GO 16582
16521: LD_INT 2
16523: DOUBLE
16524: EQUAL
16525: IFTRUE 16529
16527: GO 16551
16529: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16530: LD_VAR 0 1
16534: PPUSH
16535: LD_VAR 0 6
16539: PPUSH
16540: LD_VAR 0 7
16544: PPUSH
16545: CALL_OW 153
16549: GO 16582
16551: LD_INT 3
16553: DOUBLE
16554: EQUAL
16555: IFTRUE 16559
16557: GO 16581
16559: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16560: LD_VAR 0 1
16564: PPUSH
16565: LD_VAR 0 6
16569: PPUSH
16570: LD_VAR 0 7
16574: PPUSH
16575: CALL_OW 154
16579: GO 16582
16581: POP
// end ;
16582: LD_VAR 0 2
16586: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16587: LD_INT 0
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
// if not unit or not building then
16595: LD_VAR 0 1
16599: NOT
16600: PUSH
16601: LD_VAR 0 2
16605: NOT
16606: OR
16607: IFFALSE 16611
// exit ;
16609: GO 16769
// x := GetX ( building ) ;
16611: LD_ADDR_VAR 0 5
16615: PUSH
16616: LD_VAR 0 2
16620: PPUSH
16621: CALL_OW 250
16625: ST_TO_ADDR
// y := GetY ( building ) ;
16626: LD_ADDR_VAR 0 6
16630: PUSH
16631: LD_VAR 0 2
16635: PPUSH
16636: CALL_OW 251
16640: ST_TO_ADDR
// for i = 0 to 5 do
16641: LD_ADDR_VAR 0 4
16645: PUSH
16646: DOUBLE
16647: LD_INT 0
16649: DEC
16650: ST_TO_ADDR
16651: LD_INT 5
16653: PUSH
16654: FOR_TO
16655: IFFALSE 16767
// begin _x := ShiftX ( x , i , 3 ) ;
16657: LD_ADDR_VAR 0 7
16661: PUSH
16662: LD_VAR 0 5
16666: PPUSH
16667: LD_VAR 0 4
16671: PPUSH
16672: LD_INT 3
16674: PPUSH
16675: CALL_OW 272
16679: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16680: LD_ADDR_VAR 0 8
16684: PUSH
16685: LD_VAR 0 6
16689: PPUSH
16690: LD_VAR 0 4
16694: PPUSH
16695: LD_INT 3
16697: PPUSH
16698: CALL_OW 273
16702: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16703: LD_VAR 0 7
16707: PPUSH
16708: LD_VAR 0 8
16712: PPUSH
16713: CALL_OW 488
16717: NOT
16718: IFFALSE 16722
// continue ;
16720: GO 16654
// if HexInfo ( _x , _y ) = 0 then
16722: LD_VAR 0 7
16726: PPUSH
16727: LD_VAR 0 8
16731: PPUSH
16732: CALL_OW 428
16736: PUSH
16737: LD_INT 0
16739: EQUAL
16740: IFFALSE 16765
// begin ComMoveXY ( unit , _x , _y ) ;
16742: LD_VAR 0 1
16746: PPUSH
16747: LD_VAR 0 7
16751: PPUSH
16752: LD_VAR 0 8
16756: PPUSH
16757: CALL_OW 111
// exit ;
16761: POP
16762: POP
16763: GO 16769
// end ; end ;
16765: GO 16654
16767: POP
16768: POP
// end ;
16769: LD_VAR 0 3
16773: RET
// export function ScanBase ( side , base_area ) ; begin
16774: LD_INT 0
16776: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16777: LD_ADDR_VAR 0 3
16781: PUSH
16782: LD_VAR 0 2
16786: PPUSH
16787: LD_INT 81
16789: PUSH
16790: LD_VAR 0 1
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 70
16803: ST_TO_ADDR
// end ;
16804: LD_VAR 0 3
16808: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16809: LD_INT 0
16811: PPUSH
16812: PPUSH
16813: PPUSH
16814: PPUSH
// result := false ;
16815: LD_ADDR_VAR 0 2
16819: PUSH
16820: LD_INT 0
16822: ST_TO_ADDR
// side := GetSide ( unit ) ;
16823: LD_ADDR_VAR 0 3
16827: PUSH
16828: LD_VAR 0 1
16832: PPUSH
16833: CALL_OW 255
16837: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16838: LD_ADDR_VAR 0 4
16842: PUSH
16843: LD_VAR 0 1
16847: PPUSH
16848: CALL_OW 248
16852: ST_TO_ADDR
// case nat of 1 :
16853: LD_VAR 0 4
16857: PUSH
16858: LD_INT 1
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// tech := tech_lassight ; 2 :
16867: LD_ADDR_VAR 0 5
16871: PUSH
16872: LD_INT 12
16874: ST_TO_ADDR
16875: GO 16916
16877: LD_INT 2
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// tech := tech_mortar ; 3 :
16886: LD_ADDR_VAR 0 5
16890: PUSH
16891: LD_INT 41
16893: ST_TO_ADDR
16894: GO 16916
16896: LD_INT 3
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// tech := tech_bazooka ; end ;
16905: LD_ADDR_VAR 0 5
16909: PUSH
16910: LD_INT 44
16912: ST_TO_ADDR
16913: GO 16916
16915: POP
// if Researched ( side , tech ) then
16916: LD_VAR 0 3
16920: PPUSH
16921: LD_VAR 0 5
16925: PPUSH
16926: CALL_OW 325
16930: IFFALSE 16957
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
16932: LD_ADDR_VAR 0 2
16936: PUSH
16937: LD_INT 5
16939: PUSH
16940: LD_INT 8
16942: PUSH
16943: LD_INT 9
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: LIST
16950: PUSH
16951: LD_VAR 0 4
16955: ARRAY
16956: ST_TO_ADDR
// end ;
16957: LD_VAR 0 2
16961: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
16962: LD_INT 0
16964: PPUSH
16965: PPUSH
16966: PPUSH
// if not mines then
16967: LD_VAR 0 2
16971: NOT
16972: IFFALSE 16976
// exit ;
16974: GO 17120
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16976: LD_ADDR_VAR 0 5
16980: PUSH
16981: LD_INT 81
16983: PUSH
16984: LD_VAR 0 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 3
16995: PUSH
16996: LD_INT 21
16998: PUSH
16999: LD_INT 3
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PPUSH
17014: CALL_OW 69
17018: ST_TO_ADDR
// for i in mines do
17019: LD_ADDR_VAR 0 4
17023: PUSH
17024: LD_VAR 0 2
17028: PUSH
17029: FOR_IN
17030: IFFALSE 17118
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17032: LD_VAR 0 4
17036: PUSH
17037: LD_INT 1
17039: ARRAY
17040: PPUSH
17041: LD_VAR 0 4
17045: PUSH
17046: LD_INT 2
17048: ARRAY
17049: PPUSH
17050: CALL_OW 458
17054: NOT
17055: IFFALSE 17059
// continue ;
17057: GO 17029
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17059: LD_VAR 0 4
17063: PUSH
17064: LD_INT 1
17066: ARRAY
17067: PPUSH
17068: LD_VAR 0 4
17072: PUSH
17073: LD_INT 2
17075: ARRAY
17076: PPUSH
17077: CALL_OW 428
17081: PUSH
17082: LD_VAR 0 5
17086: IN
17087: IFFALSE 17116
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17089: LD_VAR 0 4
17093: PUSH
17094: LD_INT 1
17096: ARRAY
17097: PPUSH
17098: LD_VAR 0 4
17102: PUSH
17103: LD_INT 2
17105: ARRAY
17106: PPUSH
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 456
// end ;
17116: GO 17029
17118: POP
17119: POP
// end ;
17120: LD_VAR 0 3
17124: RET
// export function Count ( array ) ; begin
17125: LD_INT 0
17127: PPUSH
// result := array + 0 ;
17128: LD_ADDR_VAR 0 2
17132: PUSH
17133: LD_VAR 0 1
17137: PUSH
17138: LD_INT 0
17140: PLUS
17141: ST_TO_ADDR
// end ;
17142: LD_VAR 0 2
17146: RET
// export function IsEmpty ( building ) ; begin
17147: LD_INT 0
17149: PPUSH
// if not building then
17150: LD_VAR 0 1
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17202
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17159: LD_ADDR_VAR 0 2
17163: PUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_VAR 0 1
17176: PPUSH
17177: CALL_OW 255
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 58
17188: PUSH
17189: EMPTY
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PPUSH
17196: CALL_OW 69
17200: IN
17201: ST_TO_ADDR
// end ;
17202: LD_VAR 0 2
17206: RET
// export function IsNotFull ( building ) ; var places ; begin
17207: LD_INT 0
17209: PPUSH
17210: PPUSH
// if not building then
17211: LD_VAR 0 1
17215: NOT
17216: IFFALSE 17220
// exit ;
17218: GO 17248
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17220: LD_ADDR_VAR 0 2
17224: PUSH
17225: LD_VAR 0 1
17229: PPUSH
17230: LD_INT 3
17232: PUSH
17233: LD_INT 62
17235: PUSH
17236: EMPTY
17237: LIST
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PPUSH
17243: CALL_OW 72
17247: ST_TO_ADDR
// end ;
17248: LD_VAR 0 2
17252: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17253: LD_INT 0
17255: PPUSH
17256: PPUSH
17257: PPUSH
17258: PPUSH
// tmp := [ ] ;
17259: LD_ADDR_VAR 0 3
17263: PUSH
17264: EMPTY
17265: ST_TO_ADDR
// list := [ ] ;
17266: LD_ADDR_VAR 0 5
17270: PUSH
17271: EMPTY
17272: ST_TO_ADDR
// for i = 16 to 25 do
17273: LD_ADDR_VAR 0 4
17277: PUSH
17278: DOUBLE
17279: LD_INT 16
17281: DEC
17282: ST_TO_ADDR
17283: LD_INT 25
17285: PUSH
17286: FOR_TO
17287: IFFALSE 17360
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17289: LD_ADDR_VAR 0 3
17293: PUSH
17294: LD_VAR 0 3
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 255
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 91
17318: PUSH
17319: LD_VAR 0 1
17323: PUSH
17324: LD_INT 6
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 30
17334: PUSH
17335: LD_VAR 0 4
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: LIST
17348: PUSH
17349: EMPTY
17350: LIST
17351: PPUSH
17352: CALL_OW 69
17356: ADD
17357: ST_TO_ADDR
17358: GO 17286
17360: POP
17361: POP
// for i = 1 to tmp do
17362: LD_ADDR_VAR 0 4
17366: PUSH
17367: DOUBLE
17368: LD_INT 1
17370: DEC
17371: ST_TO_ADDR
17372: LD_VAR 0 3
17376: PUSH
17377: FOR_TO
17378: IFFALSE 17466
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17380: LD_ADDR_VAR 0 5
17384: PUSH
17385: LD_VAR 0 5
17389: PUSH
17390: LD_VAR 0 3
17394: PUSH
17395: LD_VAR 0 4
17399: ARRAY
17400: PPUSH
17401: CALL_OW 266
17405: PUSH
17406: LD_VAR 0 3
17410: PUSH
17411: LD_VAR 0 4
17415: ARRAY
17416: PPUSH
17417: CALL_OW 250
17421: PUSH
17422: LD_VAR 0 3
17426: PUSH
17427: LD_VAR 0 4
17431: ARRAY
17432: PPUSH
17433: CALL_OW 251
17437: PUSH
17438: LD_VAR 0 3
17442: PUSH
17443: LD_VAR 0 4
17447: ARRAY
17448: PPUSH
17449: CALL_OW 254
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: EMPTY
17461: LIST
17462: ADD
17463: ST_TO_ADDR
17464: GO 17377
17466: POP
17467: POP
// result := list ;
17468: LD_ADDR_VAR 0 2
17472: PUSH
17473: LD_VAR 0 5
17477: ST_TO_ADDR
// end ;
17478: LD_VAR 0 2
17482: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17483: LD_INT 0
17485: PPUSH
17486: PPUSH
17487: PPUSH
17488: PPUSH
17489: PPUSH
17490: PPUSH
17491: PPUSH
// if not factory then
17492: LD_VAR 0 1
17496: NOT
17497: IFFALSE 17501
// exit ;
17499: GO 18094
// if control = control_apeman then
17501: LD_VAR 0 4
17505: PUSH
17506: LD_INT 5
17508: EQUAL
17509: IFFALSE 17618
// begin tmp := UnitsInside ( factory ) ;
17511: LD_ADDR_VAR 0 8
17515: PUSH
17516: LD_VAR 0 1
17520: PPUSH
17521: CALL_OW 313
17525: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17526: LD_VAR 0 8
17530: PPUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 12
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PPUSH
17541: CALL_OW 72
17545: NOT
17546: IFFALSE 17556
// control := control_manual ;
17548: LD_ADDR_VAR 0 4
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17556: LD_ADDR_VAR 0 8
17560: PUSH
17561: LD_VAR 0 1
17565: PPUSH
17566: CALL 17253 0 1
17570: ST_TO_ADDR
// if tmp then
17571: LD_VAR 0 8
17575: IFFALSE 17618
// begin for i in tmp do
17577: LD_ADDR_VAR 0 7
17581: PUSH
17582: LD_VAR 0 8
17586: PUSH
17587: FOR_IN
17588: IFFALSE 17616
// if i [ 1 ] = b_ext_radio then
17590: LD_VAR 0 7
17594: PUSH
17595: LD_INT 1
17597: ARRAY
17598: PUSH
17599: LD_INT 22
17601: EQUAL
17602: IFFALSE 17614
// begin control := control_remote ;
17604: LD_ADDR_VAR 0 4
17608: PUSH
17609: LD_INT 2
17611: ST_TO_ADDR
// break ;
17612: GO 17616
// end ;
17614: GO 17587
17616: POP
17617: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17618: LD_VAR 0 1
17622: PPUSH
17623: LD_VAR 0 2
17627: PPUSH
17628: LD_VAR 0 3
17632: PPUSH
17633: LD_VAR 0 4
17637: PPUSH
17638: LD_VAR 0 5
17642: PPUSH
17643: CALL_OW 448
17647: IFFALSE 17682
// begin result := [ chassis , engine , control , weapon ] ;
17649: LD_ADDR_VAR 0 6
17653: PUSH
17654: LD_VAR 0 2
17658: PUSH
17659: LD_VAR 0 3
17663: PUSH
17664: LD_VAR 0 4
17668: PUSH
17669: LD_VAR 0 5
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: ST_TO_ADDR
// exit ;
17680: GO 18094
// end ; _chassis := AvailableChassisList ( factory ) ;
17682: LD_ADDR_VAR 0 9
17686: PUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: CALL_OW 475
17696: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17697: LD_ADDR_VAR 0 11
17701: PUSH
17702: LD_VAR 0 1
17706: PPUSH
17707: CALL_OW 476
17711: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17712: LD_ADDR_VAR 0 12
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 477
17726: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17727: LD_ADDR_VAR 0 10
17731: PUSH
17732: LD_VAR 0 1
17736: PPUSH
17737: CALL_OW 478
17741: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17742: LD_VAR 0 9
17746: NOT
17747: PUSH
17748: LD_VAR 0 11
17752: NOT
17753: OR
17754: PUSH
17755: LD_VAR 0 12
17759: NOT
17760: OR
17761: PUSH
17762: LD_VAR 0 10
17766: NOT
17767: OR
17768: IFFALSE 17803
// begin result := [ chassis , engine , control , weapon ] ;
17770: LD_ADDR_VAR 0 6
17774: PUSH
17775: LD_VAR 0 2
17779: PUSH
17780: LD_VAR 0 3
17784: PUSH
17785: LD_VAR 0 4
17789: PUSH
17790: LD_VAR 0 5
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: ST_TO_ADDR
// exit ;
17801: GO 18094
// end ; if not chassis in _chassis then
17803: LD_VAR 0 2
17807: PUSH
17808: LD_VAR 0 9
17812: IN
17813: NOT
17814: IFFALSE 17840
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17816: LD_ADDR_VAR 0 2
17820: PUSH
17821: LD_VAR 0 9
17825: PUSH
17826: LD_INT 1
17828: PPUSH
17829: LD_VAR 0 9
17833: PPUSH
17834: CALL_OW 12
17838: ARRAY
17839: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17840: LD_VAR 0 2
17844: PPUSH
17845: LD_VAR 0 3
17849: PPUSH
17850: CALL 18099 0 2
17854: NOT
17855: IFFALSE 17914
// repeat engine := _engine [ 1 ] ;
17857: LD_ADDR_VAR 0 3
17861: PUSH
17862: LD_VAR 0 11
17866: PUSH
17867: LD_INT 1
17869: ARRAY
17870: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17871: LD_ADDR_VAR 0 11
17875: PUSH
17876: LD_VAR 0 11
17880: PPUSH
17881: LD_INT 1
17883: PPUSH
17884: CALL_OW 3
17888: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17889: LD_VAR 0 2
17893: PPUSH
17894: LD_VAR 0 3
17898: PPUSH
17899: CALL 18099 0 2
17903: PUSH
17904: LD_VAR 0 11
17908: PUSH
17909: EMPTY
17910: EQUAL
17911: OR
17912: IFFALSE 17857
// if not control in _control then
17914: LD_VAR 0 4
17918: PUSH
17919: LD_VAR 0 12
17923: IN
17924: NOT
17925: IFFALSE 17951
// control := _control [ rand ( 1 , _control ) ] ;
17927: LD_ADDR_VAR 0 4
17931: PUSH
17932: LD_VAR 0 12
17936: PUSH
17937: LD_INT 1
17939: PPUSH
17940: LD_VAR 0 12
17944: PPUSH
17945: CALL_OW 12
17949: ARRAY
17950: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
17951: LD_VAR 0 2
17955: PPUSH
17956: LD_VAR 0 5
17960: PPUSH
17961: CALL 18319 0 2
17965: NOT
17966: IFFALSE 18025
// repeat weapon := _weapon [ 1 ] ;
17968: LD_ADDR_VAR 0 5
17972: PUSH
17973: LD_VAR 0 10
17977: PUSH
17978: LD_INT 1
17980: ARRAY
17981: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
17982: LD_ADDR_VAR 0 10
17986: PUSH
17987: LD_VAR 0 10
17991: PPUSH
17992: LD_INT 1
17994: PPUSH
17995: CALL_OW 3
17999: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18000: LD_VAR 0 2
18004: PPUSH
18005: LD_VAR 0 5
18009: PPUSH
18010: CALL 18319 0 2
18014: PUSH
18015: LD_VAR 0 10
18019: PUSH
18020: EMPTY
18021: EQUAL
18022: OR
18023: IFFALSE 17968
// result := [ ] ;
18025: LD_ADDR_VAR 0 6
18029: PUSH
18030: EMPTY
18031: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18032: LD_VAR 0 1
18036: PPUSH
18037: LD_VAR 0 2
18041: PPUSH
18042: LD_VAR 0 3
18046: PPUSH
18047: LD_VAR 0 4
18051: PPUSH
18052: LD_VAR 0 5
18056: PPUSH
18057: CALL_OW 448
18061: IFFALSE 18094
// result := [ chassis , engine , control , weapon ] ;
18063: LD_ADDR_VAR 0 6
18067: PUSH
18068: LD_VAR 0 2
18072: PUSH
18073: LD_VAR 0 3
18077: PUSH
18078: LD_VAR 0 4
18082: PUSH
18083: LD_VAR 0 5
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: ST_TO_ADDR
// end ;
18094: LD_VAR 0 6
18098: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18099: LD_INT 0
18101: PPUSH
// if not chassis or not engine then
18102: LD_VAR 0 1
18106: NOT
18107: PUSH
18108: LD_VAR 0 2
18112: NOT
18113: OR
18114: IFFALSE 18118
// exit ;
18116: GO 18314
// case engine of engine_solar :
18118: LD_VAR 0 2
18122: PUSH
18123: LD_INT 2
18125: DOUBLE
18126: EQUAL
18127: IFTRUE 18131
18129: GO 18169
18131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18132: LD_ADDR_VAR 0 3
18136: PUSH
18137: LD_INT 11
18139: PUSH
18140: LD_INT 12
18142: PUSH
18143: LD_INT 13
18145: PUSH
18146: LD_INT 14
18148: PUSH
18149: LD_INT 1
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 3
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: ST_TO_ADDR
18167: GO 18298
18169: LD_INT 1
18171: DOUBLE
18172: EQUAL
18173: IFTRUE 18177
18175: GO 18239
18177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18178: LD_ADDR_VAR 0 3
18182: PUSH
18183: LD_INT 11
18185: PUSH
18186: LD_INT 12
18188: PUSH
18189: LD_INT 13
18191: PUSH
18192: LD_INT 14
18194: PUSH
18195: LD_INT 1
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 3
18203: PUSH
18204: LD_INT 4
18206: PUSH
18207: LD_INT 5
18209: PUSH
18210: LD_INT 21
18212: PUSH
18213: LD_INT 23
18215: PUSH
18216: LD_INT 22
18218: PUSH
18219: LD_INT 24
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: ST_TO_ADDR
18237: GO 18298
18239: LD_INT 3
18241: DOUBLE
18242: EQUAL
18243: IFTRUE 18247
18245: GO 18297
18247: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18248: LD_ADDR_VAR 0 3
18252: PUSH
18253: LD_INT 13
18255: PUSH
18256: LD_INT 14
18258: PUSH
18259: LD_INT 2
18261: PUSH
18262: LD_INT 3
18264: PUSH
18265: LD_INT 4
18267: PUSH
18268: LD_INT 5
18270: PUSH
18271: LD_INT 21
18273: PUSH
18274: LD_INT 22
18276: PUSH
18277: LD_INT 23
18279: PUSH
18280: LD_INT 24
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: ST_TO_ADDR
18295: GO 18298
18297: POP
// result := ( chassis in result ) ;
18298: LD_ADDR_VAR 0 3
18302: PUSH
18303: LD_VAR 0 1
18307: PUSH
18308: LD_VAR 0 3
18312: IN
18313: ST_TO_ADDR
// end ;
18314: LD_VAR 0 3
18318: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18319: LD_INT 0
18321: PPUSH
// if not chassis or not weapon then
18322: LD_VAR 0 1
18326: NOT
18327: PUSH
18328: LD_VAR 0 2
18332: NOT
18333: OR
18334: IFFALSE 18338
// exit ;
18336: GO 19398
// case weapon of us_machine_gun :
18338: LD_VAR 0 2
18342: PUSH
18343: LD_INT 2
18345: DOUBLE
18346: EQUAL
18347: IFTRUE 18351
18349: GO 18381
18351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18352: LD_ADDR_VAR 0 3
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 3
18365: PUSH
18366: LD_INT 4
18368: PUSH
18369: LD_INT 5
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: ST_TO_ADDR
18379: GO 19382
18381: LD_INT 3
18383: DOUBLE
18384: EQUAL
18385: IFTRUE 18389
18387: GO 18419
18389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18390: LD_ADDR_VAR 0 3
18394: PUSH
18395: LD_INT 1
18397: PUSH
18398: LD_INT 2
18400: PUSH
18401: LD_INT 3
18403: PUSH
18404: LD_INT 4
18406: PUSH
18407: LD_INT 5
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: ST_TO_ADDR
18417: GO 19382
18419: LD_INT 11
18421: DOUBLE
18422: EQUAL
18423: IFTRUE 18427
18425: GO 18457
18427: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18428: LD_ADDR_VAR 0 3
18432: PUSH
18433: LD_INT 1
18435: PUSH
18436: LD_INT 2
18438: PUSH
18439: LD_INT 3
18441: PUSH
18442: LD_INT 4
18444: PUSH
18445: LD_INT 5
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: ST_TO_ADDR
18455: GO 19382
18457: LD_INT 4
18459: DOUBLE
18460: EQUAL
18461: IFTRUE 18465
18463: GO 18491
18465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18466: LD_ADDR_VAR 0 3
18470: PUSH
18471: LD_INT 2
18473: PUSH
18474: LD_INT 3
18476: PUSH
18477: LD_INT 4
18479: PUSH
18480: LD_INT 5
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: ST_TO_ADDR
18489: GO 19382
18491: LD_INT 5
18493: DOUBLE
18494: EQUAL
18495: IFTRUE 18499
18497: GO 18525
18499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18500: LD_ADDR_VAR 0 3
18504: PUSH
18505: LD_INT 2
18507: PUSH
18508: LD_INT 3
18510: PUSH
18511: LD_INT 4
18513: PUSH
18514: LD_INT 5
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: ST_TO_ADDR
18523: GO 19382
18525: LD_INT 9
18527: DOUBLE
18528: EQUAL
18529: IFTRUE 18533
18531: GO 18559
18533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 4
18547: PUSH
18548: LD_INT 5
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: ST_TO_ADDR
18557: GO 19382
18559: LD_INT 7
18561: DOUBLE
18562: EQUAL
18563: IFTRUE 18567
18565: GO 18593
18567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18568: LD_ADDR_VAR 0 3
18572: PUSH
18573: LD_INT 2
18575: PUSH
18576: LD_INT 3
18578: PUSH
18579: LD_INT 4
18581: PUSH
18582: LD_INT 5
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: ST_TO_ADDR
18591: GO 19382
18593: LD_INT 12
18595: DOUBLE
18596: EQUAL
18597: IFTRUE 18601
18599: GO 18627
18601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18602: LD_ADDR_VAR 0 3
18606: PUSH
18607: LD_INT 2
18609: PUSH
18610: LD_INT 3
18612: PUSH
18613: LD_INT 4
18615: PUSH
18616: LD_INT 5
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: ST_TO_ADDR
18625: GO 19382
18627: LD_INT 13
18629: DOUBLE
18630: EQUAL
18631: IFTRUE 18635
18633: GO 18661
18635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18636: LD_ADDR_VAR 0 3
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: LD_INT 3
18646: PUSH
18647: LD_INT 4
18649: PUSH
18650: LD_INT 5
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: ST_TO_ADDR
18659: GO 19382
18661: LD_INT 14
18663: DOUBLE
18664: EQUAL
18665: IFTRUE 18669
18667: GO 18687
18669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18670: LD_ADDR_VAR 0 3
18674: PUSH
18675: LD_INT 4
18677: PUSH
18678: LD_INT 5
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: ST_TO_ADDR
18685: GO 19382
18687: LD_INT 6
18689: DOUBLE
18690: EQUAL
18691: IFTRUE 18695
18693: GO 18713
18695: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18696: LD_ADDR_VAR 0 3
18700: PUSH
18701: LD_INT 4
18703: PUSH
18704: LD_INT 5
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: ST_TO_ADDR
18711: GO 19382
18713: LD_INT 10
18715: DOUBLE
18716: EQUAL
18717: IFTRUE 18721
18719: GO 18739
18721: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18722: LD_ADDR_VAR 0 3
18726: PUSH
18727: LD_INT 4
18729: PUSH
18730: LD_INT 5
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: ST_TO_ADDR
18737: GO 19382
18739: LD_INT 22
18741: DOUBLE
18742: EQUAL
18743: IFTRUE 18747
18745: GO 18773
18747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: LD_INT 11
18755: PUSH
18756: LD_INT 12
18758: PUSH
18759: LD_INT 13
18761: PUSH
18762: LD_INT 14
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: ST_TO_ADDR
18771: GO 19382
18773: LD_INT 23
18775: DOUBLE
18776: EQUAL
18777: IFTRUE 18781
18779: GO 18807
18781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18782: LD_ADDR_VAR 0 3
18786: PUSH
18787: LD_INT 11
18789: PUSH
18790: LD_INT 12
18792: PUSH
18793: LD_INT 13
18795: PUSH
18796: LD_INT 14
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: ST_TO_ADDR
18805: GO 19382
18807: LD_INT 24
18809: DOUBLE
18810: EQUAL
18811: IFTRUE 18815
18813: GO 18841
18815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18816: LD_ADDR_VAR 0 3
18820: PUSH
18821: LD_INT 11
18823: PUSH
18824: LD_INT 12
18826: PUSH
18827: LD_INT 13
18829: PUSH
18830: LD_INT 14
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: ST_TO_ADDR
18839: GO 19382
18841: LD_INT 30
18843: DOUBLE
18844: EQUAL
18845: IFTRUE 18849
18847: GO 18875
18849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18850: LD_ADDR_VAR 0 3
18854: PUSH
18855: LD_INT 11
18857: PUSH
18858: LD_INT 12
18860: PUSH
18861: LD_INT 13
18863: PUSH
18864: LD_INT 14
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: ST_TO_ADDR
18873: GO 19382
18875: LD_INT 25
18877: DOUBLE
18878: EQUAL
18879: IFTRUE 18883
18881: GO 18901
18883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18884: LD_ADDR_VAR 0 3
18888: PUSH
18889: LD_INT 13
18891: PUSH
18892: LD_INT 14
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: ST_TO_ADDR
18899: GO 19382
18901: LD_INT 27
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 18927
18909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18910: LD_ADDR_VAR 0 3
18914: PUSH
18915: LD_INT 13
18917: PUSH
18918: LD_INT 14
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: ST_TO_ADDR
18925: GO 19382
18927: LD_INT 92
18929: DOUBLE
18930: EQUAL
18931: IFTRUE 18935
18933: GO 18961
18935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
18936: LD_ADDR_VAR 0 3
18940: PUSH
18941: LD_INT 11
18943: PUSH
18944: LD_INT 12
18946: PUSH
18947: LD_INT 13
18949: PUSH
18950: LD_INT 14
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: ST_TO_ADDR
18959: GO 19382
18961: LD_INT 28
18963: DOUBLE
18964: EQUAL
18965: IFTRUE 18969
18967: GO 18987
18969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
18970: LD_ADDR_VAR 0 3
18974: PUSH
18975: LD_INT 13
18977: PUSH
18978: LD_INT 14
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: ST_TO_ADDR
18985: GO 19382
18987: LD_INT 29
18989: DOUBLE
18990: EQUAL
18991: IFTRUE 18995
18993: GO 19013
18995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
18996: LD_ADDR_VAR 0 3
19000: PUSH
19001: LD_INT 13
19003: PUSH
19004: LD_INT 14
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: ST_TO_ADDR
19011: GO 19382
19013: LD_INT 31
19015: DOUBLE
19016: EQUAL
19017: IFTRUE 19021
19019: GO 19039
19021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19022: LD_ADDR_VAR 0 3
19026: PUSH
19027: LD_INT 13
19029: PUSH
19030: LD_INT 14
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: ST_TO_ADDR
19037: GO 19382
19039: LD_INT 26
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19065
19047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19048: LD_ADDR_VAR 0 3
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: LD_INT 14
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: ST_TO_ADDR
19063: GO 19382
19065: LD_INT 42
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19099
19073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19074: LD_ADDR_VAR 0 3
19078: PUSH
19079: LD_INT 21
19081: PUSH
19082: LD_INT 22
19084: PUSH
19085: LD_INT 23
19087: PUSH
19088: LD_INT 24
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: ST_TO_ADDR
19097: GO 19382
19099: LD_INT 43
19101: DOUBLE
19102: EQUAL
19103: IFTRUE 19107
19105: GO 19133
19107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19108: LD_ADDR_VAR 0 3
19112: PUSH
19113: LD_INT 21
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_INT 23
19121: PUSH
19122: LD_INT 24
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: ST_TO_ADDR
19131: GO 19382
19133: LD_INT 44
19135: DOUBLE
19136: EQUAL
19137: IFTRUE 19141
19139: GO 19167
19141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19142: LD_ADDR_VAR 0 3
19146: PUSH
19147: LD_INT 21
19149: PUSH
19150: LD_INT 22
19152: PUSH
19153: LD_INT 23
19155: PUSH
19156: LD_INT 24
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: ST_TO_ADDR
19165: GO 19382
19167: LD_INT 45
19169: DOUBLE
19170: EQUAL
19171: IFTRUE 19175
19173: GO 19201
19175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19176: LD_ADDR_VAR 0 3
19180: PUSH
19181: LD_INT 21
19183: PUSH
19184: LD_INT 22
19186: PUSH
19187: LD_INT 23
19189: PUSH
19190: LD_INT 24
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: ST_TO_ADDR
19199: GO 19382
19201: LD_INT 49
19203: DOUBLE
19204: EQUAL
19205: IFTRUE 19209
19207: GO 19235
19209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19210: LD_ADDR_VAR 0 3
19214: PUSH
19215: LD_INT 21
19217: PUSH
19218: LD_INT 22
19220: PUSH
19221: LD_INT 23
19223: PUSH
19224: LD_INT 24
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: ST_TO_ADDR
19233: GO 19382
19235: LD_INT 51
19237: DOUBLE
19238: EQUAL
19239: IFTRUE 19243
19241: GO 19269
19243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19244: LD_ADDR_VAR 0 3
19248: PUSH
19249: LD_INT 21
19251: PUSH
19252: LD_INT 22
19254: PUSH
19255: LD_INT 23
19257: PUSH
19258: LD_INT 24
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: ST_TO_ADDR
19267: GO 19382
19269: LD_INT 52
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19303
19277: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19278: LD_ADDR_VAR 0 3
19282: PUSH
19283: LD_INT 21
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_INT 23
19291: PUSH
19292: LD_INT 24
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: ST_TO_ADDR
19301: GO 19382
19303: LD_INT 53
19305: DOUBLE
19306: EQUAL
19307: IFTRUE 19311
19309: GO 19329
19311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19312: LD_ADDR_VAR 0 3
19316: PUSH
19317: LD_INT 23
19319: PUSH
19320: LD_INT 24
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: ST_TO_ADDR
19327: GO 19382
19329: LD_INT 46
19331: DOUBLE
19332: EQUAL
19333: IFTRUE 19337
19335: GO 19355
19337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19338: LD_ADDR_VAR 0 3
19342: PUSH
19343: LD_INT 23
19345: PUSH
19346: LD_INT 24
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: ST_TO_ADDR
19353: GO 19382
19355: LD_INT 47
19357: DOUBLE
19358: EQUAL
19359: IFTRUE 19363
19361: GO 19381
19363: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19364: LD_ADDR_VAR 0 3
19368: PUSH
19369: LD_INT 23
19371: PUSH
19372: LD_INT 24
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: ST_TO_ADDR
19379: GO 19382
19381: POP
// result := ( chassis in result ) ;
19382: LD_ADDR_VAR 0 3
19386: PUSH
19387: LD_VAR 0 1
19391: PUSH
19392: LD_VAR 0 3
19396: IN
19397: ST_TO_ADDR
// end ;
19398: LD_VAR 0 3
19402: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19403: LD_INT 0
19405: PPUSH
19406: PPUSH
19407: PPUSH
19408: PPUSH
19409: PPUSH
19410: PPUSH
19411: PPUSH
// result := array ;
19412: LD_ADDR_VAR 0 5
19416: PUSH
19417: LD_VAR 0 1
19421: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19422: LD_VAR 0 1
19426: NOT
19427: PUSH
19428: LD_VAR 0 2
19432: NOT
19433: OR
19434: PUSH
19435: LD_VAR 0 3
19439: NOT
19440: OR
19441: PUSH
19442: LD_VAR 0 2
19446: PUSH
19447: LD_VAR 0 1
19451: GREATER
19452: OR
19453: PUSH
19454: LD_VAR 0 3
19458: PUSH
19459: LD_VAR 0 1
19463: GREATER
19464: OR
19465: IFFALSE 19469
// exit ;
19467: GO 19765
// if direction then
19469: LD_VAR 0 4
19473: IFFALSE 19537
// begin d := 1 ;
19475: LD_ADDR_VAR 0 9
19479: PUSH
19480: LD_INT 1
19482: ST_TO_ADDR
// if i_from > i_to then
19483: LD_VAR 0 2
19487: PUSH
19488: LD_VAR 0 3
19492: GREATER
19493: IFFALSE 19519
// length := ( array - i_from ) + i_to else
19495: LD_ADDR_VAR 0 11
19499: PUSH
19500: LD_VAR 0 1
19504: PUSH
19505: LD_VAR 0 2
19509: MINUS
19510: PUSH
19511: LD_VAR 0 3
19515: PLUS
19516: ST_TO_ADDR
19517: GO 19535
// length := i_to - i_from ;
19519: LD_ADDR_VAR 0 11
19523: PUSH
19524: LD_VAR 0 3
19528: PUSH
19529: LD_VAR 0 2
19533: MINUS
19534: ST_TO_ADDR
// end else
19535: GO 19598
// begin d := - 1 ;
19537: LD_ADDR_VAR 0 9
19541: PUSH
19542: LD_INT 1
19544: NEG
19545: ST_TO_ADDR
// if i_from > i_to then
19546: LD_VAR 0 2
19550: PUSH
19551: LD_VAR 0 3
19555: GREATER
19556: IFFALSE 19576
// length := i_from - i_to else
19558: LD_ADDR_VAR 0 11
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: LD_VAR 0 3
19572: MINUS
19573: ST_TO_ADDR
19574: GO 19598
// length := ( array - i_to ) + i_from ;
19576: LD_ADDR_VAR 0 11
19580: PUSH
19581: LD_VAR 0 1
19585: PUSH
19586: LD_VAR 0 3
19590: MINUS
19591: PUSH
19592: LD_VAR 0 2
19596: PLUS
19597: ST_TO_ADDR
// end ; if not length then
19598: LD_VAR 0 11
19602: NOT
19603: IFFALSE 19607
// exit ;
19605: GO 19765
// tmp := array ;
19607: LD_ADDR_VAR 0 10
19611: PUSH
19612: LD_VAR 0 1
19616: ST_TO_ADDR
// for i = 1 to length do
19617: LD_ADDR_VAR 0 6
19621: PUSH
19622: DOUBLE
19623: LD_INT 1
19625: DEC
19626: ST_TO_ADDR
19627: LD_VAR 0 11
19631: PUSH
19632: FOR_TO
19633: IFFALSE 19753
// begin for j = 1 to array do
19635: LD_ADDR_VAR 0 7
19639: PUSH
19640: DOUBLE
19641: LD_INT 1
19643: DEC
19644: ST_TO_ADDR
19645: LD_VAR 0 1
19649: PUSH
19650: FOR_TO
19651: IFFALSE 19739
// begin k := j + d ;
19653: LD_ADDR_VAR 0 8
19657: PUSH
19658: LD_VAR 0 7
19662: PUSH
19663: LD_VAR 0 9
19667: PLUS
19668: ST_TO_ADDR
// if k > array then
19669: LD_VAR 0 8
19673: PUSH
19674: LD_VAR 0 1
19678: GREATER
19679: IFFALSE 19689
// k := 1 ;
19681: LD_ADDR_VAR 0 8
19685: PUSH
19686: LD_INT 1
19688: ST_TO_ADDR
// if not k then
19689: LD_VAR 0 8
19693: NOT
19694: IFFALSE 19706
// k := array ;
19696: LD_ADDR_VAR 0 8
19700: PUSH
19701: LD_VAR 0 1
19705: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19706: LD_ADDR_VAR 0 10
19710: PUSH
19711: LD_VAR 0 10
19715: PPUSH
19716: LD_VAR 0 8
19720: PPUSH
19721: LD_VAR 0 1
19725: PUSH
19726: LD_VAR 0 7
19730: ARRAY
19731: PPUSH
19732: CALL_OW 1
19736: ST_TO_ADDR
// end ;
19737: GO 19650
19739: POP
19740: POP
// array := tmp ;
19741: LD_ADDR_VAR 0 1
19745: PUSH
19746: LD_VAR 0 10
19750: ST_TO_ADDR
// end ;
19751: GO 19632
19753: POP
19754: POP
// result := array ;
19755: LD_ADDR_VAR 0 5
19759: PUSH
19760: LD_VAR 0 1
19764: ST_TO_ADDR
// end ;
19765: LD_VAR 0 5
19769: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19770: LD_INT 0
19772: PPUSH
19773: PPUSH
// result := 0 ;
19774: LD_ADDR_VAR 0 3
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// if not array or not value in array then
19782: LD_VAR 0 1
19786: NOT
19787: PUSH
19788: LD_VAR 0 2
19792: PUSH
19793: LD_VAR 0 1
19797: IN
19798: NOT
19799: OR
19800: IFFALSE 19804
// exit ;
19802: GO 19858
// for i = 1 to array do
19804: LD_ADDR_VAR 0 4
19808: PUSH
19809: DOUBLE
19810: LD_INT 1
19812: DEC
19813: ST_TO_ADDR
19814: LD_VAR 0 1
19818: PUSH
19819: FOR_TO
19820: IFFALSE 19856
// if value = array [ i ] then
19822: LD_VAR 0 2
19826: PUSH
19827: LD_VAR 0 1
19831: PUSH
19832: LD_VAR 0 4
19836: ARRAY
19837: EQUAL
19838: IFFALSE 19854
// begin result := i ;
19840: LD_ADDR_VAR 0 3
19844: PUSH
19845: LD_VAR 0 4
19849: ST_TO_ADDR
// exit ;
19850: POP
19851: POP
19852: GO 19858
// end ;
19854: GO 19819
19856: POP
19857: POP
// end ;
19858: LD_VAR 0 3
19862: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19863: LD_INT 0
19865: PPUSH
// vc_chassis := chassis ;
19866: LD_ADDR_OWVAR 37
19870: PUSH
19871: LD_VAR 0 1
19875: ST_TO_ADDR
// vc_engine := engine ;
19876: LD_ADDR_OWVAR 39
19880: PUSH
19881: LD_VAR 0 2
19885: ST_TO_ADDR
// vc_control := control ;
19886: LD_ADDR_OWVAR 38
19890: PUSH
19891: LD_VAR 0 3
19895: ST_TO_ADDR
// vc_weapon := weapon ;
19896: LD_ADDR_OWVAR 40
19900: PUSH
19901: LD_VAR 0 4
19905: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19906: LD_ADDR_OWVAR 41
19910: PUSH
19911: LD_VAR 0 5
19915: ST_TO_ADDR
// end ;
19916: LD_VAR 0 6
19920: RET
// export function WantPlant ( unit ) ; var task ; begin
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
// result := false ;
19925: LD_ADDR_VAR 0 2
19929: PUSH
19930: LD_INT 0
19932: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
19933: LD_ADDR_VAR 0 3
19937: PUSH
19938: LD_VAR 0 1
19942: PPUSH
19943: CALL_OW 437
19947: ST_TO_ADDR
// if task then
19948: LD_VAR 0 3
19952: IFFALSE 19980
// if task [ 1 ] [ 1 ] = p then
19954: LD_VAR 0 3
19958: PUSH
19959: LD_INT 1
19961: ARRAY
19962: PUSH
19963: LD_INT 1
19965: ARRAY
19966: PUSH
19967: LD_STRING p
19969: EQUAL
19970: IFFALSE 19980
// result := true ;
19972: LD_ADDR_VAR 0 2
19976: PUSH
19977: LD_INT 1
19979: ST_TO_ADDR
// end ;
19980: LD_VAR 0 2
19984: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
19985: LD_INT 0
19987: PPUSH
19988: PPUSH
19989: PPUSH
19990: PPUSH
// if pos < 1 then
19991: LD_VAR 0 2
19995: PUSH
19996: LD_INT 1
19998: LESS
19999: IFFALSE 20003
// exit ;
20001: GO 20306
// if pos = 1 then
20003: LD_VAR 0 2
20007: PUSH
20008: LD_INT 1
20010: EQUAL
20011: IFFALSE 20044
// result := Replace ( arr , pos [ 1 ] , value ) else
20013: LD_ADDR_VAR 0 4
20017: PUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: LD_VAR 0 2
20027: PUSH
20028: LD_INT 1
20030: ARRAY
20031: PPUSH
20032: LD_VAR 0 3
20036: PPUSH
20037: CALL_OW 1
20041: ST_TO_ADDR
20042: GO 20306
// begin tmp := arr ;
20044: LD_ADDR_VAR 0 6
20048: PUSH
20049: LD_VAR 0 1
20053: ST_TO_ADDR
// s_arr := [ tmp ] ;
20054: LD_ADDR_VAR 0 7
20058: PUSH
20059: LD_VAR 0 6
20063: PUSH
20064: EMPTY
20065: LIST
20066: ST_TO_ADDR
// for i = 1 to pos - 1 do
20067: LD_ADDR_VAR 0 5
20071: PUSH
20072: DOUBLE
20073: LD_INT 1
20075: DEC
20076: ST_TO_ADDR
20077: LD_VAR 0 2
20081: PUSH
20082: LD_INT 1
20084: MINUS
20085: PUSH
20086: FOR_TO
20087: IFFALSE 20132
// begin tmp := tmp [ pos [ i ] ] ;
20089: LD_ADDR_VAR 0 6
20093: PUSH
20094: LD_VAR 0 6
20098: PUSH
20099: LD_VAR 0 2
20103: PUSH
20104: LD_VAR 0 5
20108: ARRAY
20109: ARRAY
20110: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20111: LD_ADDR_VAR 0 7
20115: PUSH
20116: LD_VAR 0 7
20120: PUSH
20121: LD_VAR 0 6
20125: PUSH
20126: EMPTY
20127: LIST
20128: ADD
20129: ST_TO_ADDR
// end ;
20130: GO 20086
20132: POP
20133: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20134: LD_ADDR_VAR 0 6
20138: PUSH
20139: LD_VAR 0 6
20143: PPUSH
20144: LD_VAR 0 2
20148: PUSH
20149: LD_VAR 0 2
20153: ARRAY
20154: PPUSH
20155: LD_VAR 0 3
20159: PPUSH
20160: CALL_OW 1
20164: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20165: LD_ADDR_VAR 0 7
20169: PUSH
20170: LD_VAR 0 7
20174: PPUSH
20175: LD_VAR 0 7
20179: PPUSH
20180: LD_VAR 0 6
20184: PPUSH
20185: CALL_OW 1
20189: ST_TO_ADDR
// for i = s_arr downto 2 do
20190: LD_ADDR_VAR 0 5
20194: PUSH
20195: DOUBLE
20196: LD_VAR 0 7
20200: INC
20201: ST_TO_ADDR
20202: LD_INT 2
20204: PUSH
20205: FOR_DOWNTO
20206: IFFALSE 20290
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20208: LD_ADDR_VAR 0 6
20212: PUSH
20213: LD_VAR 0 7
20217: PUSH
20218: LD_VAR 0 5
20222: PUSH
20223: LD_INT 1
20225: MINUS
20226: ARRAY
20227: PPUSH
20228: LD_VAR 0 2
20232: PUSH
20233: LD_VAR 0 5
20237: PUSH
20238: LD_INT 1
20240: MINUS
20241: ARRAY
20242: PPUSH
20243: LD_VAR 0 7
20247: PUSH
20248: LD_VAR 0 5
20252: ARRAY
20253: PPUSH
20254: CALL_OW 1
20258: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20259: LD_ADDR_VAR 0 7
20263: PUSH
20264: LD_VAR 0 7
20268: PPUSH
20269: LD_VAR 0 5
20273: PUSH
20274: LD_INT 1
20276: MINUS
20277: PPUSH
20278: LD_VAR 0 6
20282: PPUSH
20283: CALL_OW 1
20287: ST_TO_ADDR
// end ;
20288: GO 20205
20290: POP
20291: POP
// result := s_arr [ 1 ] ;
20292: LD_ADDR_VAR 0 4
20296: PUSH
20297: LD_VAR 0 7
20301: PUSH
20302: LD_INT 1
20304: ARRAY
20305: ST_TO_ADDR
// end ; end ;
20306: LD_VAR 0 4
20310: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20311: LD_INT 0
20313: PPUSH
20314: PPUSH
// if not list then
20315: LD_VAR 0 1
20319: NOT
20320: IFFALSE 20324
// exit ;
20322: GO 20415
// i := list [ pos1 ] ;
20324: LD_ADDR_VAR 0 5
20328: PUSH
20329: LD_VAR 0 1
20333: PUSH
20334: LD_VAR 0 2
20338: ARRAY
20339: ST_TO_ADDR
// if not i then
20340: LD_VAR 0 5
20344: NOT
20345: IFFALSE 20349
// exit ;
20347: GO 20415
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20349: LD_ADDR_VAR 0 1
20353: PUSH
20354: LD_VAR 0 1
20358: PPUSH
20359: LD_VAR 0 2
20363: PPUSH
20364: LD_VAR 0 1
20368: PUSH
20369: LD_VAR 0 3
20373: ARRAY
20374: PPUSH
20375: CALL_OW 1
20379: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20380: LD_ADDR_VAR 0 1
20384: PUSH
20385: LD_VAR 0 1
20389: PPUSH
20390: LD_VAR 0 3
20394: PPUSH
20395: LD_VAR 0 5
20399: PPUSH
20400: CALL_OW 1
20404: ST_TO_ADDR
// result := list ;
20405: LD_ADDR_VAR 0 4
20409: PUSH
20410: LD_VAR 0 1
20414: ST_TO_ADDR
// end ;
20415: LD_VAR 0 4
20419: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20420: LD_INT 0
20422: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20423: LD_ADDR_VAR 0 5
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 250
20437: PPUSH
20438: LD_VAR 0 1
20442: PPUSH
20443: CALL_OW 251
20447: PPUSH
20448: LD_VAR 0 2
20452: PPUSH
20453: LD_VAR 0 3
20457: PPUSH
20458: LD_VAR 0 4
20462: PPUSH
20463: CALL 20841 0 5
20467: ST_TO_ADDR
// end ;
20468: LD_VAR 0 5
20472: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
// if not list or not unit then
20479: LD_VAR 0 2
20483: NOT
20484: PUSH
20485: LD_VAR 0 1
20489: NOT
20490: OR
20491: IFFALSE 20495
// exit ;
20493: GO 20836
// result := [ ] ;
20495: LD_ADDR_VAR 0 5
20499: PUSH
20500: EMPTY
20501: ST_TO_ADDR
// for i in list do
20502: LD_ADDR_VAR 0 6
20506: PUSH
20507: LD_VAR 0 2
20511: PUSH
20512: FOR_IN
20513: IFFALSE 20731
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20515: LD_ADDR_VAR 0 8
20519: PUSH
20520: LD_VAR 0 1
20524: PPUSH
20525: LD_VAR 0 6
20529: PUSH
20530: LD_INT 1
20532: ARRAY
20533: PPUSH
20534: LD_VAR 0 6
20538: PUSH
20539: LD_INT 2
20541: ARRAY
20542: PPUSH
20543: CALL_OW 297
20547: ST_TO_ADDR
// if not Count ( result ) then
20548: LD_VAR 0 5
20552: PPUSH
20553: CALL 17125 0 1
20557: NOT
20558: IFFALSE 20591
// begin result := Join ( result , [ i , tmp ] ) ;
20560: LD_ADDR_VAR 0 5
20564: PUSH
20565: LD_VAR 0 5
20569: PPUSH
20570: LD_VAR 0 6
20574: PUSH
20575: LD_VAR 0 8
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PPUSH
20584: CALL 52714 0 2
20588: ST_TO_ADDR
// continue ;
20589: GO 20512
// end ; if result [ result ] [ 2 ] <= tmp then
20591: LD_VAR 0 5
20595: PUSH
20596: LD_VAR 0 5
20600: ARRAY
20601: PUSH
20602: LD_INT 2
20604: ARRAY
20605: PUSH
20606: LD_VAR 0 8
20610: LESSEQUAL
20611: IFFALSE 20644
// result := Join ( result , [ i , tmp ] ) else
20613: LD_ADDR_VAR 0 5
20617: PUSH
20618: LD_VAR 0 5
20622: PPUSH
20623: LD_VAR 0 6
20627: PUSH
20628: LD_VAR 0 8
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL 52714 0 2
20641: ST_TO_ADDR
20642: GO 20729
// begin for j := 1 to Count ( result ) do
20644: LD_ADDR_VAR 0 7
20648: PUSH
20649: DOUBLE
20650: LD_INT 1
20652: DEC
20653: ST_TO_ADDR
20654: LD_VAR 0 5
20658: PPUSH
20659: CALL 17125 0 1
20663: PUSH
20664: FOR_TO
20665: IFFALSE 20727
// begin if tmp < result [ j ] [ 2 ] then
20667: LD_VAR 0 8
20671: PUSH
20672: LD_VAR 0 5
20676: PUSH
20677: LD_VAR 0 7
20681: ARRAY
20682: PUSH
20683: LD_INT 2
20685: ARRAY
20686: LESS
20687: IFFALSE 20725
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20689: LD_ADDR_VAR 0 5
20693: PUSH
20694: LD_VAR 0 5
20698: PPUSH
20699: LD_VAR 0 7
20703: PPUSH
20704: LD_VAR 0 6
20708: PUSH
20709: LD_VAR 0 8
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 2
20722: ST_TO_ADDR
// break ;
20723: GO 20727
// end ; end ;
20725: GO 20664
20727: POP
20728: POP
// end ; end ;
20729: GO 20512
20731: POP
20732: POP
// if result and not asc then
20733: LD_VAR 0 5
20737: PUSH
20738: LD_VAR 0 3
20742: NOT
20743: AND
20744: IFFALSE 20761
// result := ReverseArray ( result ) ;
20746: LD_ADDR_VAR 0 5
20750: PUSH
20751: LD_VAR 0 5
20755: PPUSH
20756: CALL 48001 0 1
20760: ST_TO_ADDR
// tmp := [ ] ;
20761: LD_ADDR_VAR 0 8
20765: PUSH
20766: EMPTY
20767: ST_TO_ADDR
// if mode then
20768: LD_VAR 0 4
20772: IFFALSE 20836
// begin for i := 1 to result do
20774: LD_ADDR_VAR 0 6
20778: PUSH
20779: DOUBLE
20780: LD_INT 1
20782: DEC
20783: ST_TO_ADDR
20784: LD_VAR 0 5
20788: PUSH
20789: FOR_TO
20790: IFFALSE 20824
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20792: LD_ADDR_VAR 0 8
20796: PUSH
20797: LD_VAR 0 8
20801: PPUSH
20802: LD_VAR 0 5
20806: PUSH
20807: LD_VAR 0 6
20811: ARRAY
20812: PUSH
20813: LD_INT 1
20815: ARRAY
20816: PPUSH
20817: CALL 52714 0 2
20821: ST_TO_ADDR
20822: GO 20789
20824: POP
20825: POP
// result := tmp ;
20826: LD_ADDR_VAR 0 5
20830: PUSH
20831: LD_VAR 0 8
20835: ST_TO_ADDR
// end ; end ;
20836: LD_VAR 0 5
20840: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20841: LD_INT 0
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
// if not list then
20847: LD_VAR 0 3
20851: NOT
20852: IFFALSE 20856
// exit ;
20854: GO 21244
// result := [ ] ;
20856: LD_ADDR_VAR 0 6
20860: PUSH
20861: EMPTY
20862: ST_TO_ADDR
// for i in list do
20863: LD_ADDR_VAR 0 7
20867: PUSH
20868: LD_VAR 0 3
20872: PUSH
20873: FOR_IN
20874: IFFALSE 21076
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20876: LD_ADDR_VAR 0 9
20880: PUSH
20881: LD_VAR 0 7
20885: PPUSH
20886: LD_VAR 0 1
20890: PPUSH
20891: LD_VAR 0 2
20895: PPUSH
20896: CALL_OW 297
20900: ST_TO_ADDR
// if not result then
20901: LD_VAR 0 6
20905: NOT
20906: IFFALSE 20932
// result := [ [ i , tmp ] ] else
20908: LD_ADDR_VAR 0 6
20912: PUSH
20913: LD_VAR 0 7
20917: PUSH
20918: LD_VAR 0 9
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: ST_TO_ADDR
20930: GO 21074
// begin if result [ result ] [ 2 ] < tmp then
20932: LD_VAR 0 6
20936: PUSH
20937: LD_VAR 0 6
20941: ARRAY
20942: PUSH
20943: LD_INT 2
20945: ARRAY
20946: PUSH
20947: LD_VAR 0 9
20951: LESS
20952: IFFALSE 20994
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
20954: LD_ADDR_VAR 0 6
20958: PUSH
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 6
20968: PUSH
20969: LD_INT 1
20971: PLUS
20972: PPUSH
20973: LD_VAR 0 7
20977: PUSH
20978: LD_VAR 0 9
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PPUSH
20987: CALL_OW 2
20991: ST_TO_ADDR
20992: GO 21074
// for j = 1 to result do
20994: LD_ADDR_VAR 0 8
20998: PUSH
20999: DOUBLE
21000: LD_INT 1
21002: DEC
21003: ST_TO_ADDR
21004: LD_VAR 0 6
21008: PUSH
21009: FOR_TO
21010: IFFALSE 21072
// begin if tmp < result [ j ] [ 2 ] then
21012: LD_VAR 0 9
21016: PUSH
21017: LD_VAR 0 6
21021: PUSH
21022: LD_VAR 0 8
21026: ARRAY
21027: PUSH
21028: LD_INT 2
21030: ARRAY
21031: LESS
21032: IFFALSE 21070
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21034: LD_ADDR_VAR 0 6
21038: PUSH
21039: LD_VAR 0 6
21043: PPUSH
21044: LD_VAR 0 8
21048: PPUSH
21049: LD_VAR 0 7
21053: PUSH
21054: LD_VAR 0 9
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 2
21067: ST_TO_ADDR
// break ;
21068: GO 21072
// end ; end ;
21070: GO 21009
21072: POP
21073: POP
// end ; end ;
21074: GO 20873
21076: POP
21077: POP
// if result and not asc then
21078: LD_VAR 0 6
21082: PUSH
21083: LD_VAR 0 4
21087: NOT
21088: AND
21089: IFFALSE 21164
// begin tmp := result ;
21091: LD_ADDR_VAR 0 9
21095: PUSH
21096: LD_VAR 0 6
21100: ST_TO_ADDR
// for i = tmp downto 1 do
21101: LD_ADDR_VAR 0 7
21105: PUSH
21106: DOUBLE
21107: LD_VAR 0 9
21111: INC
21112: ST_TO_ADDR
21113: LD_INT 1
21115: PUSH
21116: FOR_DOWNTO
21117: IFFALSE 21162
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21119: LD_ADDR_VAR 0 6
21123: PUSH
21124: LD_VAR 0 6
21128: PPUSH
21129: LD_VAR 0 9
21133: PUSH
21134: LD_VAR 0 7
21138: MINUS
21139: PUSH
21140: LD_INT 1
21142: PLUS
21143: PPUSH
21144: LD_VAR 0 9
21148: PUSH
21149: LD_VAR 0 7
21153: ARRAY
21154: PPUSH
21155: CALL_OW 1
21159: ST_TO_ADDR
21160: GO 21116
21162: POP
21163: POP
// end ; tmp := [ ] ;
21164: LD_ADDR_VAR 0 9
21168: PUSH
21169: EMPTY
21170: ST_TO_ADDR
// if mode then
21171: LD_VAR 0 5
21175: IFFALSE 21244
// begin for i = 1 to result do
21177: LD_ADDR_VAR 0 7
21181: PUSH
21182: DOUBLE
21183: LD_INT 1
21185: DEC
21186: ST_TO_ADDR
21187: LD_VAR 0 6
21191: PUSH
21192: FOR_TO
21193: IFFALSE 21232
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21195: LD_ADDR_VAR 0 9
21199: PUSH
21200: LD_VAR 0 9
21204: PPUSH
21205: LD_VAR 0 7
21209: PPUSH
21210: LD_VAR 0 6
21214: PUSH
21215: LD_VAR 0 7
21219: ARRAY
21220: PUSH
21221: LD_INT 1
21223: ARRAY
21224: PPUSH
21225: CALL_OW 1
21229: ST_TO_ADDR
21230: GO 21192
21232: POP
21233: POP
// result := tmp ;
21234: LD_ADDR_VAR 0 6
21238: PUSH
21239: LD_VAR 0 9
21243: ST_TO_ADDR
// end ; end ;
21244: LD_VAR 0 6
21248: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21249: LD_INT 0
21251: PPUSH
21252: PPUSH
21253: PPUSH
21254: PPUSH
21255: PPUSH
21256: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21257: LD_ADDR_VAR 0 5
21261: PUSH
21262: LD_INT 0
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: ST_TO_ADDR
// if not x or not y then
21279: LD_VAR 0 2
21283: NOT
21284: PUSH
21285: LD_VAR 0 3
21289: NOT
21290: OR
21291: IFFALSE 21295
// exit ;
21293: GO 22945
// if not range then
21295: LD_VAR 0 4
21299: NOT
21300: IFFALSE 21310
// range := 10 ;
21302: LD_ADDR_VAR 0 4
21306: PUSH
21307: LD_INT 10
21309: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21310: LD_ADDR_VAR 0 8
21314: PUSH
21315: LD_INT 81
21317: PUSH
21318: LD_VAR 0 1
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 92
21329: PUSH
21330: LD_VAR 0 2
21334: PUSH
21335: LD_VAR 0 3
21339: PUSH
21340: LD_VAR 0 4
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 3
21353: PUSH
21354: LD_INT 21
21356: PUSH
21357: LD_INT 3
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: LIST
21372: PPUSH
21373: CALL_OW 69
21377: ST_TO_ADDR
// if not tmp then
21378: LD_VAR 0 8
21382: NOT
21383: IFFALSE 21387
// exit ;
21385: GO 22945
// for i in tmp do
21387: LD_ADDR_VAR 0 6
21391: PUSH
21392: LD_VAR 0 8
21396: PUSH
21397: FOR_IN
21398: IFFALSE 22920
// begin points := [ 0 , 0 , 0 ] ;
21400: LD_ADDR_VAR 0 9
21404: PUSH
21405: LD_INT 0
21407: PUSH
21408: LD_INT 0
21410: PUSH
21411: LD_INT 0
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: ST_TO_ADDR
// bpoints := 1 ;
21419: LD_ADDR_VAR 0 10
21423: PUSH
21424: LD_INT 1
21426: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21427: LD_VAR 0 6
21431: PPUSH
21432: CALL_OW 247
21436: PUSH
21437: LD_INT 1
21439: DOUBLE
21440: EQUAL
21441: IFTRUE 21445
21443: GO 22023
21445: POP
// begin if GetClass ( i ) = 1 then
21446: LD_VAR 0 6
21450: PPUSH
21451: CALL_OW 257
21455: PUSH
21456: LD_INT 1
21458: EQUAL
21459: IFFALSE 21480
// points := [ 10 , 5 , 3 ] ;
21461: LD_ADDR_VAR 0 9
21465: PUSH
21466: LD_INT 10
21468: PUSH
21469: LD_INT 5
21471: PUSH
21472: LD_INT 3
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: LIST
21479: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21480: LD_VAR 0 6
21484: PPUSH
21485: CALL_OW 257
21489: PUSH
21490: LD_INT 2
21492: PUSH
21493: LD_INT 3
21495: PUSH
21496: LD_INT 4
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: IN
21504: IFFALSE 21525
// points := [ 3 , 2 , 1 ] ;
21506: LD_ADDR_VAR 0 9
21510: PUSH
21511: LD_INT 3
21513: PUSH
21514: LD_INT 2
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: LIST
21524: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21525: LD_VAR 0 6
21529: PPUSH
21530: CALL_OW 257
21534: PUSH
21535: LD_INT 5
21537: EQUAL
21538: IFFALSE 21559
// points := [ 130 , 5 , 2 ] ;
21540: LD_ADDR_VAR 0 9
21544: PUSH
21545: LD_INT 130
21547: PUSH
21548: LD_INT 5
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: LIST
21558: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21559: LD_VAR 0 6
21563: PPUSH
21564: CALL_OW 257
21568: PUSH
21569: LD_INT 8
21571: EQUAL
21572: IFFALSE 21593
// points := [ 35 , 35 , 30 ] ;
21574: LD_ADDR_VAR 0 9
21578: PUSH
21579: LD_INT 35
21581: PUSH
21582: LD_INT 35
21584: PUSH
21585: LD_INT 30
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21593: LD_VAR 0 6
21597: PPUSH
21598: CALL_OW 257
21602: PUSH
21603: LD_INT 9
21605: EQUAL
21606: IFFALSE 21627
// points := [ 20 , 55 , 40 ] ;
21608: LD_ADDR_VAR 0 9
21612: PUSH
21613: LD_INT 20
21615: PUSH
21616: LD_INT 55
21618: PUSH
21619: LD_INT 40
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: LIST
21626: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21627: LD_VAR 0 6
21631: PPUSH
21632: CALL_OW 257
21636: PUSH
21637: LD_INT 12
21639: PUSH
21640: LD_INT 16
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: IN
21647: IFFALSE 21668
// points := [ 5 , 3 , 2 ] ;
21649: LD_ADDR_VAR 0 9
21653: PUSH
21654: LD_INT 5
21656: PUSH
21657: LD_INT 3
21659: PUSH
21660: LD_INT 2
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21668: LD_VAR 0 6
21672: PPUSH
21673: CALL_OW 257
21677: PUSH
21678: LD_INT 17
21680: EQUAL
21681: IFFALSE 21702
// points := [ 100 , 50 , 75 ] ;
21683: LD_ADDR_VAR 0 9
21687: PUSH
21688: LD_INT 100
21690: PUSH
21691: LD_INT 50
21693: PUSH
21694: LD_INT 75
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21702: LD_VAR 0 6
21706: PPUSH
21707: CALL_OW 257
21711: PUSH
21712: LD_INT 15
21714: EQUAL
21715: IFFALSE 21736
// points := [ 10 , 5 , 3 ] ;
21717: LD_ADDR_VAR 0 9
21721: PUSH
21722: LD_INT 10
21724: PUSH
21725: LD_INT 5
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: LIST
21735: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21736: LD_VAR 0 6
21740: PPUSH
21741: CALL_OW 257
21745: PUSH
21746: LD_INT 14
21748: EQUAL
21749: IFFALSE 21770
// points := [ 10 , 0 , 0 ] ;
21751: LD_ADDR_VAR 0 9
21755: PUSH
21756: LD_INT 10
21758: PUSH
21759: LD_INT 0
21761: PUSH
21762: LD_INT 0
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21770: LD_VAR 0 6
21774: PPUSH
21775: CALL_OW 257
21779: PUSH
21780: LD_INT 11
21782: EQUAL
21783: IFFALSE 21804
// points := [ 30 , 10 , 5 ] ;
21785: LD_ADDR_VAR 0 9
21789: PUSH
21790: LD_INT 30
21792: PUSH
21793: LD_INT 10
21795: PUSH
21796: LD_INT 5
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: LIST
21803: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21804: LD_VAR 0 1
21808: PPUSH
21809: LD_INT 5
21811: PPUSH
21812: CALL_OW 321
21816: PUSH
21817: LD_INT 2
21819: EQUAL
21820: IFFALSE 21837
// bpoints := bpoints * 1.8 ;
21822: LD_ADDR_VAR 0 10
21826: PUSH
21827: LD_VAR 0 10
21831: PUSH
21832: LD_REAL  1.80000000000000E+0000
21835: MUL
21836: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21837: LD_VAR 0 6
21841: PPUSH
21842: CALL_OW 257
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 2
21852: PUSH
21853: LD_INT 3
21855: PUSH
21856: LD_INT 4
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: IN
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: LD_INT 51
21873: PPUSH
21874: CALL_OW 321
21878: PUSH
21879: LD_INT 2
21881: EQUAL
21882: AND
21883: IFFALSE 21900
// bpoints := bpoints * 1.2 ;
21885: LD_ADDR_VAR 0 10
21889: PUSH
21890: LD_VAR 0 10
21894: PUSH
21895: LD_REAL  1.20000000000000E+0000
21898: MUL
21899: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21900: LD_VAR 0 6
21904: PPUSH
21905: CALL_OW 257
21909: PUSH
21910: LD_INT 5
21912: PUSH
21913: LD_INT 7
21915: PUSH
21916: LD_INT 9
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: IN
21924: PUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: LD_INT 52
21932: PPUSH
21933: CALL_OW 321
21937: PUSH
21938: LD_INT 2
21940: EQUAL
21941: AND
21942: IFFALSE 21959
// bpoints := bpoints * 1.5 ;
21944: LD_ADDR_VAR 0 10
21948: PUSH
21949: LD_VAR 0 10
21953: PUSH
21954: LD_REAL  1.50000000000000E+0000
21957: MUL
21958: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
21959: LD_VAR 0 1
21963: PPUSH
21964: LD_INT 66
21966: PPUSH
21967: CALL_OW 321
21971: PUSH
21972: LD_INT 2
21974: EQUAL
21975: IFFALSE 21992
// bpoints := bpoints * 1.1 ;
21977: LD_ADDR_VAR 0 10
21981: PUSH
21982: LD_VAR 0 10
21986: PUSH
21987: LD_REAL  1.10000000000000E+0000
21990: MUL
21991: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
21992: LD_ADDR_VAR 0 10
21996: PUSH
21997: LD_VAR 0 10
22001: PUSH
22002: LD_VAR 0 6
22006: PPUSH
22007: LD_INT 1
22009: PPUSH
22010: CALL_OW 259
22014: PUSH
22015: LD_REAL  1.15000000000000E+0000
22018: MUL
22019: MUL
22020: ST_TO_ADDR
// end ; unit_vehicle :
22021: GO 22849
22023: LD_INT 2
22025: DOUBLE
22026: EQUAL
22027: IFTRUE 22031
22029: GO 22837
22031: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22032: LD_VAR 0 6
22036: PPUSH
22037: CALL_OW 264
22041: PUSH
22042: LD_INT 2
22044: PUSH
22045: LD_INT 42
22047: PUSH
22048: LD_INT 24
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: IN
22056: IFFALSE 22077
// points := [ 25 , 5 , 3 ] ;
22058: LD_ADDR_VAR 0 9
22062: PUSH
22063: LD_INT 25
22065: PUSH
22066: LD_INT 5
22068: PUSH
22069: LD_INT 3
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: LIST
22076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22077: LD_VAR 0 6
22081: PPUSH
22082: CALL_OW 264
22086: PUSH
22087: LD_INT 4
22089: PUSH
22090: LD_INT 43
22092: PUSH
22093: LD_INT 25
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: LIST
22100: IN
22101: IFFALSE 22122
// points := [ 40 , 15 , 5 ] ;
22103: LD_ADDR_VAR 0 9
22107: PUSH
22108: LD_INT 40
22110: PUSH
22111: LD_INT 15
22113: PUSH
22114: LD_INT 5
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: LIST
22121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22122: LD_VAR 0 6
22126: PPUSH
22127: CALL_OW 264
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: LD_INT 23
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: IN
22142: IFFALSE 22163
// points := [ 7 , 25 , 8 ] ;
22144: LD_ADDR_VAR 0 9
22148: PUSH
22149: LD_INT 7
22151: PUSH
22152: LD_INT 25
22154: PUSH
22155: LD_INT 8
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: LIST
22162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22163: LD_VAR 0 6
22167: PPUSH
22168: CALL_OW 264
22172: PUSH
22173: LD_INT 5
22175: PUSH
22176: LD_INT 27
22178: PUSH
22179: LD_INT 44
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: LIST
22186: IN
22187: IFFALSE 22208
// points := [ 14 , 50 , 16 ] ;
22189: LD_ADDR_VAR 0 9
22193: PUSH
22194: LD_INT 14
22196: PUSH
22197: LD_INT 50
22199: PUSH
22200: LD_INT 16
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22208: LD_VAR 0 6
22212: PPUSH
22213: CALL_OW 264
22217: PUSH
22218: LD_INT 6
22220: PUSH
22221: LD_INT 46
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: IN
22228: IFFALSE 22249
// points := [ 32 , 120 , 70 ] ;
22230: LD_ADDR_VAR 0 9
22234: PUSH
22235: LD_INT 32
22237: PUSH
22238: LD_INT 120
22240: PUSH
22241: LD_INT 70
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22249: LD_VAR 0 6
22253: PPUSH
22254: CALL_OW 264
22258: PUSH
22259: LD_INT 7
22261: PUSH
22262: LD_INT 28
22264: PUSH
22265: LD_INT 45
22267: PUSH
22268: LD_INT 92
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: IN
22277: IFFALSE 22298
// points := [ 35 , 20 , 45 ] ;
22279: LD_ADDR_VAR 0 9
22283: PUSH
22284: LD_INT 35
22286: PUSH
22287: LD_INT 20
22289: PUSH
22290: LD_INT 45
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: LIST
22297: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22298: LD_VAR 0 6
22302: PPUSH
22303: CALL_OW 264
22307: PUSH
22308: LD_INT 47
22310: PUSH
22311: EMPTY
22312: LIST
22313: IN
22314: IFFALSE 22335
// points := [ 67 , 45 , 75 ] ;
22316: LD_ADDR_VAR 0 9
22320: PUSH
22321: LD_INT 67
22323: PUSH
22324: LD_INT 45
22326: PUSH
22327: LD_INT 75
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22335: LD_VAR 0 6
22339: PPUSH
22340: CALL_OW 264
22344: PUSH
22345: LD_INT 26
22347: PUSH
22348: EMPTY
22349: LIST
22350: IN
22351: IFFALSE 22372
// points := [ 120 , 30 , 80 ] ;
22353: LD_ADDR_VAR 0 9
22357: PUSH
22358: LD_INT 120
22360: PUSH
22361: LD_INT 30
22363: PUSH
22364: LD_INT 80
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22372: LD_VAR 0 6
22376: PPUSH
22377: CALL_OW 264
22381: PUSH
22382: LD_INT 22
22384: PUSH
22385: EMPTY
22386: LIST
22387: IN
22388: IFFALSE 22409
// points := [ 40 , 1 , 1 ] ;
22390: LD_ADDR_VAR 0 9
22394: PUSH
22395: LD_INT 40
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: LD_INT 1
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22409: LD_VAR 0 6
22413: PPUSH
22414: CALL_OW 264
22418: PUSH
22419: LD_INT 29
22421: PUSH
22422: EMPTY
22423: LIST
22424: IN
22425: IFFALSE 22446
// points := [ 70 , 200 , 400 ] ;
22427: LD_ADDR_VAR 0 9
22431: PUSH
22432: LD_INT 70
22434: PUSH
22435: LD_INT 200
22437: PUSH
22438: LD_INT 400
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: LIST
22445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22446: LD_VAR 0 6
22450: PPUSH
22451: CALL_OW 264
22455: PUSH
22456: LD_INT 14
22458: PUSH
22459: LD_INT 53
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: IN
22466: IFFALSE 22487
// points := [ 40 , 10 , 20 ] ;
22468: LD_ADDR_VAR 0 9
22472: PUSH
22473: LD_INT 40
22475: PUSH
22476: LD_INT 10
22478: PUSH
22479: LD_INT 20
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: LIST
22486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22487: LD_VAR 0 6
22491: PPUSH
22492: CALL_OW 264
22496: PUSH
22497: LD_INT 9
22499: PUSH
22500: EMPTY
22501: LIST
22502: IN
22503: IFFALSE 22524
// points := [ 5 , 70 , 20 ] ;
22505: LD_ADDR_VAR 0 9
22509: PUSH
22510: LD_INT 5
22512: PUSH
22513: LD_INT 70
22515: PUSH
22516: LD_INT 20
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: LIST
22523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22524: LD_VAR 0 6
22528: PPUSH
22529: CALL_OW 264
22533: PUSH
22534: LD_INT 10
22536: PUSH
22537: EMPTY
22538: LIST
22539: IN
22540: IFFALSE 22561
// points := [ 35 , 110 , 70 ] ;
22542: LD_ADDR_VAR 0 9
22546: PUSH
22547: LD_INT 35
22549: PUSH
22550: LD_INT 110
22552: PUSH
22553: LD_INT 70
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22561: LD_VAR 0 6
22565: PPUSH
22566: CALL_OW 265
22570: PUSH
22571: LD_INT 25
22573: EQUAL
22574: IFFALSE 22595
// points := [ 80 , 65 , 100 ] ;
22576: LD_ADDR_VAR 0 9
22580: PUSH
22581: LD_INT 80
22583: PUSH
22584: LD_INT 65
22586: PUSH
22587: LD_INT 100
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22595: LD_VAR 0 6
22599: PPUSH
22600: CALL_OW 263
22604: PUSH
22605: LD_INT 1
22607: EQUAL
22608: IFFALSE 22643
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22610: LD_ADDR_VAR 0 10
22614: PUSH
22615: LD_VAR 0 10
22619: PUSH
22620: LD_VAR 0 6
22624: PPUSH
22625: CALL_OW 311
22629: PPUSH
22630: LD_INT 3
22632: PPUSH
22633: CALL_OW 259
22637: PUSH
22638: LD_INT 4
22640: MUL
22641: MUL
22642: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22643: LD_VAR 0 6
22647: PPUSH
22648: CALL_OW 263
22652: PUSH
22653: LD_INT 2
22655: EQUAL
22656: IFFALSE 22707
// begin j := IsControledBy ( i ) ;
22658: LD_ADDR_VAR 0 7
22662: PUSH
22663: LD_VAR 0 6
22667: PPUSH
22668: CALL_OW 312
22672: ST_TO_ADDR
// if j then
22673: LD_VAR 0 7
22677: IFFALSE 22707
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22679: LD_ADDR_VAR 0 10
22683: PUSH
22684: LD_VAR 0 10
22688: PUSH
22689: LD_VAR 0 7
22693: PPUSH
22694: LD_INT 3
22696: PPUSH
22697: CALL_OW 259
22701: PUSH
22702: LD_INT 3
22704: MUL
22705: MUL
22706: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22707: LD_VAR 0 6
22711: PPUSH
22712: CALL_OW 264
22716: PUSH
22717: LD_INT 5
22719: PUSH
22720: LD_INT 6
22722: PUSH
22723: LD_INT 46
22725: PUSH
22726: LD_INT 44
22728: PUSH
22729: LD_INT 47
22731: PUSH
22732: LD_INT 45
22734: PUSH
22735: LD_INT 28
22737: PUSH
22738: LD_INT 7
22740: PUSH
22741: LD_INT 27
22743: PUSH
22744: LD_INT 29
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: IN
22759: PUSH
22760: LD_VAR 0 1
22764: PPUSH
22765: LD_INT 52
22767: PPUSH
22768: CALL_OW 321
22772: PUSH
22773: LD_INT 2
22775: EQUAL
22776: AND
22777: IFFALSE 22794
// bpoints := bpoints * 1.2 ;
22779: LD_ADDR_VAR 0 10
22783: PUSH
22784: LD_VAR 0 10
22788: PUSH
22789: LD_REAL  1.20000000000000E+0000
22792: MUL
22793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22794: LD_VAR 0 6
22798: PPUSH
22799: CALL_OW 264
22803: PUSH
22804: LD_INT 6
22806: PUSH
22807: LD_INT 46
22809: PUSH
22810: LD_INT 47
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: LIST
22817: IN
22818: IFFALSE 22835
// bpoints := bpoints * 1.2 ;
22820: LD_ADDR_VAR 0 10
22824: PUSH
22825: LD_VAR 0 10
22829: PUSH
22830: LD_REAL  1.20000000000000E+0000
22833: MUL
22834: ST_TO_ADDR
// end ; unit_building :
22835: GO 22849
22837: LD_INT 3
22839: DOUBLE
22840: EQUAL
22841: IFTRUE 22845
22843: GO 22848
22845: POP
// ; end ;
22846: GO 22849
22848: POP
// for j = 1 to 3 do
22849: LD_ADDR_VAR 0 7
22853: PUSH
22854: DOUBLE
22855: LD_INT 1
22857: DEC
22858: ST_TO_ADDR
22859: LD_INT 3
22861: PUSH
22862: FOR_TO
22863: IFFALSE 22916
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22865: LD_ADDR_VAR 0 5
22869: PUSH
22870: LD_VAR 0 5
22874: PPUSH
22875: LD_VAR 0 7
22879: PPUSH
22880: LD_VAR 0 5
22884: PUSH
22885: LD_VAR 0 7
22889: ARRAY
22890: PUSH
22891: LD_VAR 0 9
22895: PUSH
22896: LD_VAR 0 7
22900: ARRAY
22901: PUSH
22902: LD_VAR 0 10
22906: MUL
22907: PLUS
22908: PPUSH
22909: CALL_OW 1
22913: ST_TO_ADDR
22914: GO 22862
22916: POP
22917: POP
// end ;
22918: GO 21397
22920: POP
22921: POP
// result := Replace ( result , 4 , tmp ) ;
22922: LD_ADDR_VAR 0 5
22926: PUSH
22927: LD_VAR 0 5
22931: PPUSH
22932: LD_INT 4
22934: PPUSH
22935: LD_VAR 0 8
22939: PPUSH
22940: CALL_OW 1
22944: ST_TO_ADDR
// end ;
22945: LD_VAR 0 5
22949: RET
// export function DangerAtRange ( unit , range ) ; begin
22950: LD_INT 0
22952: PPUSH
// if not unit then
22953: LD_VAR 0 1
22957: NOT
22958: IFFALSE 22962
// exit ;
22960: GO 23007
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
22962: LD_ADDR_VAR 0 3
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 255
22976: PPUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 250
22986: PPUSH
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 251
22996: PPUSH
22997: LD_VAR 0 2
23001: PPUSH
23002: CALL 21249 0 4
23006: ST_TO_ADDR
// end ;
23007: LD_VAR 0 3
23011: RET
// export function DangerInArea ( side , area ) ; begin
23012: LD_INT 0
23014: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23015: LD_ADDR_VAR 0 3
23019: PUSH
23020: LD_VAR 0 2
23024: PPUSH
23025: LD_INT 81
23027: PUSH
23028: LD_VAR 0 1
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 70
23041: ST_TO_ADDR
// end ;
23042: LD_VAR 0 3
23046: RET
// export function IsExtension ( b ) ; begin
23047: LD_INT 0
23049: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23050: LD_ADDR_VAR 0 2
23054: PUSH
23055: LD_VAR 0 1
23059: PUSH
23060: LD_INT 23
23062: PUSH
23063: LD_INT 20
23065: PUSH
23066: LD_INT 22
23068: PUSH
23069: LD_INT 17
23071: PUSH
23072: LD_INT 24
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 19
23080: PUSH
23081: LD_INT 16
23083: PUSH
23084: LD_INT 25
23086: PUSH
23087: LD_INT 18
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: LIST
23095: LIST
23096: LIST
23097: LIST
23098: LIST
23099: LIST
23100: LIST
23101: IN
23102: ST_TO_ADDR
// end ;
23103: LD_VAR 0 2
23107: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23108: LD_INT 0
23110: PPUSH
23111: PPUSH
23112: PPUSH
// result := [ ] ;
23113: LD_ADDR_VAR 0 4
23117: PUSH
23118: EMPTY
23119: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23120: LD_ADDR_VAR 0 5
23124: PUSH
23125: LD_VAR 0 2
23129: PPUSH
23130: LD_INT 21
23132: PUSH
23133: LD_INT 3
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PPUSH
23140: CALL_OW 70
23144: ST_TO_ADDR
// if not tmp then
23145: LD_VAR 0 5
23149: NOT
23150: IFFALSE 23154
// exit ;
23152: GO 23218
// if checkLink then
23154: LD_VAR 0 3
23158: IFFALSE 23208
// begin for i in tmp do
23160: LD_ADDR_VAR 0 6
23164: PUSH
23165: LD_VAR 0 5
23169: PUSH
23170: FOR_IN
23171: IFFALSE 23206
// if GetBase ( i ) <> base then
23173: LD_VAR 0 6
23177: PPUSH
23178: CALL_OW 274
23182: PUSH
23183: LD_VAR 0 1
23187: NONEQUAL
23188: IFFALSE 23204
// ComLinkToBase ( base , i ) ;
23190: LD_VAR 0 1
23194: PPUSH
23195: LD_VAR 0 6
23199: PPUSH
23200: CALL_OW 169
23204: GO 23170
23206: POP
23207: POP
// end ; result := tmp ;
23208: LD_ADDR_VAR 0 4
23212: PUSH
23213: LD_VAR 0 5
23217: ST_TO_ADDR
// end ;
23218: LD_VAR 0 4
23222: RET
// export function ComComplete ( units , b ) ; var i ; begin
23223: LD_INT 0
23225: PPUSH
23226: PPUSH
// if not units then
23227: LD_VAR 0 1
23231: NOT
23232: IFFALSE 23236
// exit ;
23234: GO 23326
// for i in units do
23236: LD_ADDR_VAR 0 4
23240: PUSH
23241: LD_VAR 0 1
23245: PUSH
23246: FOR_IN
23247: IFFALSE 23324
// if BuildingStatus ( b ) = bs_build then
23249: LD_VAR 0 2
23253: PPUSH
23254: CALL_OW 461
23258: PUSH
23259: LD_INT 1
23261: EQUAL
23262: IFFALSE 23322
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23264: LD_VAR 0 4
23268: PPUSH
23269: LD_STRING h
23271: PUSH
23272: LD_VAR 0 2
23276: PPUSH
23277: CALL_OW 250
23281: PUSH
23282: LD_VAR 0 2
23286: PPUSH
23287: CALL_OW 251
23291: PUSH
23292: LD_VAR 0 2
23296: PUSH
23297: LD_INT 0
23299: PUSH
23300: LD_INT 0
23302: PUSH
23303: LD_INT 0
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: PPUSH
23318: CALL_OW 446
23322: GO 23246
23324: POP
23325: POP
// end ;
23326: LD_VAR 0 3
23330: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23331: LD_INT 0
23333: PPUSH
23334: PPUSH
23335: PPUSH
23336: PPUSH
23337: PPUSH
23338: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23339: LD_VAR 0 1
23343: NOT
23344: PUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 263
23354: PUSH
23355: LD_INT 2
23357: NONEQUAL
23358: OR
23359: IFFALSE 23363
// exit ;
23361: GO 23679
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23363: LD_ADDR_VAR 0 6
23367: PUSH
23368: LD_INT 22
23370: PUSH
23371: LD_VAR 0 1
23375: PPUSH
23376: CALL_OW 255
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 2
23387: PUSH
23388: LD_INT 30
23390: PUSH
23391: LD_INT 36
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 34
23400: PUSH
23401: LD_INT 31
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: LIST
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PPUSH
23417: CALL_OW 69
23421: ST_TO_ADDR
// if not tmp then
23422: LD_VAR 0 6
23426: NOT
23427: IFFALSE 23431
// exit ;
23429: GO 23679
// result := [ ] ;
23431: LD_ADDR_VAR 0 2
23435: PUSH
23436: EMPTY
23437: ST_TO_ADDR
// for i in tmp do
23438: LD_ADDR_VAR 0 3
23442: PUSH
23443: LD_VAR 0 6
23447: PUSH
23448: FOR_IN
23449: IFFALSE 23520
// begin t := UnitsInside ( i ) ;
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: LD_VAR 0 3
23460: PPUSH
23461: CALL_OW 313
23465: ST_TO_ADDR
// if t then
23466: LD_VAR 0 4
23470: IFFALSE 23518
// for j in t do
23472: LD_ADDR_VAR 0 7
23476: PUSH
23477: LD_VAR 0 4
23481: PUSH
23482: FOR_IN
23483: IFFALSE 23516
// result := Replace ( result , result + 1 , j ) ;
23485: LD_ADDR_VAR 0 2
23489: PUSH
23490: LD_VAR 0 2
23494: PPUSH
23495: LD_VAR 0 2
23499: PUSH
23500: LD_INT 1
23502: PLUS
23503: PPUSH
23504: LD_VAR 0 7
23508: PPUSH
23509: CALL_OW 1
23513: ST_TO_ADDR
23514: GO 23482
23516: POP
23517: POP
// end ;
23518: GO 23448
23520: POP
23521: POP
// if not result then
23522: LD_VAR 0 2
23526: NOT
23527: IFFALSE 23531
// exit ;
23529: GO 23679
// mech := result [ 1 ] ;
23531: LD_ADDR_VAR 0 5
23535: PUSH
23536: LD_VAR 0 2
23540: PUSH
23541: LD_INT 1
23543: ARRAY
23544: ST_TO_ADDR
// if result > 1 then
23545: LD_VAR 0 2
23549: PUSH
23550: LD_INT 1
23552: GREATER
23553: IFFALSE 23665
// begin for i = 2 to result do
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: DOUBLE
23561: LD_INT 2
23563: DEC
23564: ST_TO_ADDR
23565: LD_VAR 0 2
23569: PUSH
23570: FOR_TO
23571: IFFALSE 23663
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23573: LD_ADDR_VAR 0 4
23577: PUSH
23578: LD_VAR 0 2
23582: PUSH
23583: LD_VAR 0 3
23587: ARRAY
23588: PPUSH
23589: LD_INT 3
23591: PPUSH
23592: CALL_OW 259
23596: PUSH
23597: LD_VAR 0 2
23601: PUSH
23602: LD_VAR 0 3
23606: ARRAY
23607: PPUSH
23608: CALL_OW 432
23612: MINUS
23613: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23614: LD_VAR 0 4
23618: PUSH
23619: LD_VAR 0 5
23623: PPUSH
23624: LD_INT 3
23626: PPUSH
23627: CALL_OW 259
23631: PUSH
23632: LD_VAR 0 5
23636: PPUSH
23637: CALL_OW 432
23641: MINUS
23642: GREATEREQUAL
23643: IFFALSE 23661
// mech := result [ i ] ;
23645: LD_ADDR_VAR 0 5
23649: PUSH
23650: LD_VAR 0 2
23654: PUSH
23655: LD_VAR 0 3
23659: ARRAY
23660: ST_TO_ADDR
// end ;
23661: GO 23570
23663: POP
23664: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23665: LD_VAR 0 1
23669: PPUSH
23670: LD_VAR 0 5
23674: PPUSH
23675: CALL_OW 135
// end ;
23679: LD_VAR 0 2
23683: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23684: LD_INT 0
23686: PPUSH
23687: PPUSH
23688: PPUSH
23689: PPUSH
23690: PPUSH
23691: PPUSH
23692: PPUSH
23693: PPUSH
23694: PPUSH
23695: PPUSH
23696: PPUSH
23697: PPUSH
23698: PPUSH
// result := [ ] ;
23699: LD_ADDR_VAR 0 7
23703: PUSH
23704: EMPTY
23705: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 266
23715: PUSH
23716: LD_INT 0
23718: PUSH
23719: LD_INT 1
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: IN
23726: NOT
23727: IFFALSE 23731
// exit ;
23729: GO 25365
// if name then
23731: LD_VAR 0 3
23735: IFFALSE 23751
// SetBName ( base_dep , name ) ;
23737: LD_VAR 0 1
23741: PPUSH
23742: LD_VAR 0 3
23746: PPUSH
23747: CALL_OW 500
// base := GetBase ( base_dep ) ;
23751: LD_ADDR_VAR 0 15
23755: PUSH
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 274
23765: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23766: LD_ADDR_VAR 0 16
23770: PUSH
23771: LD_VAR 0 1
23775: PPUSH
23776: CALL_OW 255
23780: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23781: LD_ADDR_VAR 0 17
23785: PUSH
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL_OW 248
23795: ST_TO_ADDR
// if sources then
23796: LD_VAR 0 5
23800: IFFALSE 23847
// for i = 1 to 3 do
23802: LD_ADDR_VAR 0 8
23806: PUSH
23807: DOUBLE
23808: LD_INT 1
23810: DEC
23811: ST_TO_ADDR
23812: LD_INT 3
23814: PUSH
23815: FOR_TO
23816: IFFALSE 23845
// AddResourceType ( base , i , sources [ i ] ) ;
23818: LD_VAR 0 15
23822: PPUSH
23823: LD_VAR 0 8
23827: PPUSH
23828: LD_VAR 0 5
23832: PUSH
23833: LD_VAR 0 8
23837: ARRAY
23838: PPUSH
23839: CALL_OW 276
23843: GO 23815
23845: POP
23846: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23847: LD_ADDR_VAR 0 18
23851: PUSH
23852: LD_VAR 0 15
23856: PPUSH
23857: LD_VAR 0 2
23861: PPUSH
23862: LD_INT 1
23864: PPUSH
23865: CALL 23108 0 3
23869: ST_TO_ADDR
// InitHc ;
23870: CALL_OW 19
// InitUc ;
23874: CALL_OW 18
// uc_side := side ;
23878: LD_ADDR_OWVAR 20
23882: PUSH
23883: LD_VAR 0 16
23887: ST_TO_ADDR
// uc_nation := nation ;
23888: LD_ADDR_OWVAR 21
23892: PUSH
23893: LD_VAR 0 17
23897: ST_TO_ADDR
// if buildings then
23898: LD_VAR 0 18
23902: IFFALSE 25224
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23904: LD_ADDR_VAR 0 19
23908: PUSH
23909: LD_VAR 0 18
23913: PPUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 30
23919: PUSH
23920: LD_INT 29
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 30
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: LIST
23941: PPUSH
23942: CALL_OW 72
23946: ST_TO_ADDR
// if tmp then
23947: LD_VAR 0 19
23951: IFFALSE 23999
// for i in tmp do
23953: LD_ADDR_VAR 0 8
23957: PUSH
23958: LD_VAR 0 19
23962: PUSH
23963: FOR_IN
23964: IFFALSE 23997
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
23966: LD_VAR 0 8
23970: PPUSH
23971: CALL_OW 250
23975: PPUSH
23976: LD_VAR 0 8
23980: PPUSH
23981: CALL_OW 251
23985: PPUSH
23986: LD_VAR 0 16
23990: PPUSH
23991: CALL_OW 441
23995: GO 23963
23997: POP
23998: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
23999: LD_VAR 0 18
24003: PPUSH
24004: LD_INT 2
24006: PUSH
24007: LD_INT 30
24009: PUSH
24010: LD_INT 32
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: LD_INT 30
24019: PUSH
24020: LD_INT 33
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: PPUSH
24032: CALL_OW 72
24036: IFFALSE 24124
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24038: LD_ADDR_VAR 0 8
24042: PUSH
24043: LD_VAR 0 18
24047: PPUSH
24048: LD_INT 2
24050: PUSH
24051: LD_INT 30
24053: PUSH
24054: LD_INT 32
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: PUSH
24061: LD_INT 30
24063: PUSH
24064: LD_INT 33
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: LIST
24075: PPUSH
24076: CALL_OW 72
24080: PUSH
24081: FOR_IN
24082: IFFALSE 24122
// begin if not GetBWeapon ( i ) then
24084: LD_VAR 0 8
24088: PPUSH
24089: CALL_OW 269
24093: NOT
24094: IFFALSE 24120
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24096: LD_VAR 0 8
24100: PPUSH
24101: LD_VAR 0 8
24105: PPUSH
24106: LD_VAR 0 2
24110: PPUSH
24111: CALL 25370 0 2
24115: PPUSH
24116: CALL_OW 431
// end ;
24120: GO 24081
24122: POP
24123: POP
// end ; for i = 1 to personel do
24124: LD_ADDR_VAR 0 8
24128: PUSH
24129: DOUBLE
24130: LD_INT 1
24132: DEC
24133: ST_TO_ADDR
24134: LD_VAR 0 6
24138: PUSH
24139: FOR_TO
24140: IFFALSE 25204
// begin if i > 4 then
24142: LD_VAR 0 8
24146: PUSH
24147: LD_INT 4
24149: GREATER
24150: IFFALSE 24154
// break ;
24152: GO 25204
// case i of 1 :
24154: LD_VAR 0 8
24158: PUSH
24159: LD_INT 1
24161: DOUBLE
24162: EQUAL
24163: IFTRUE 24167
24165: GO 24247
24167: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24168: LD_ADDR_VAR 0 12
24172: PUSH
24173: LD_VAR 0 18
24177: PPUSH
24178: LD_INT 22
24180: PUSH
24181: LD_VAR 0 16
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 58
24192: PUSH
24193: EMPTY
24194: LIST
24195: PUSH
24196: LD_INT 2
24198: PUSH
24199: LD_INT 30
24201: PUSH
24202: LD_INT 32
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 30
24211: PUSH
24212: LD_INT 4
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 30
24221: PUSH
24222: LD_INT 5
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: LIST
24239: PPUSH
24240: CALL_OW 72
24244: ST_TO_ADDR
24245: GO 24469
24247: LD_INT 2
24249: DOUBLE
24250: EQUAL
24251: IFTRUE 24255
24253: GO 24317
24255: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24256: LD_ADDR_VAR 0 12
24260: PUSH
24261: LD_VAR 0 18
24265: PPUSH
24266: LD_INT 22
24268: PUSH
24269: LD_VAR 0 16
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: LD_INT 30
24283: PUSH
24284: LD_INT 0
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 30
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PPUSH
24310: CALL_OW 72
24314: ST_TO_ADDR
24315: GO 24469
24317: LD_INT 3
24319: DOUBLE
24320: EQUAL
24321: IFTRUE 24325
24323: GO 24387
24325: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24326: LD_ADDR_VAR 0 12
24330: PUSH
24331: LD_VAR 0 18
24335: PPUSH
24336: LD_INT 22
24338: PUSH
24339: LD_VAR 0 16
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PUSH
24348: LD_INT 2
24350: PUSH
24351: LD_INT 30
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 30
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PPUSH
24380: CALL_OW 72
24384: ST_TO_ADDR
24385: GO 24469
24387: LD_INT 4
24389: DOUBLE
24390: EQUAL
24391: IFTRUE 24395
24393: GO 24468
24395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24396: LD_ADDR_VAR 0 12
24400: PUSH
24401: LD_VAR 0 18
24405: PPUSH
24406: LD_INT 22
24408: PUSH
24409: LD_VAR 0 16
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 2
24420: PUSH
24421: LD_INT 30
24423: PUSH
24424: LD_INT 6
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 30
24433: PUSH
24434: LD_INT 7
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PUSH
24441: LD_INT 30
24443: PUSH
24444: LD_INT 8
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PPUSH
24461: CALL_OW 72
24465: ST_TO_ADDR
24466: GO 24469
24468: POP
// if i = 1 then
24469: LD_VAR 0 8
24473: PUSH
24474: LD_INT 1
24476: EQUAL
24477: IFFALSE 24588
// begin tmp := [ ] ;
24479: LD_ADDR_VAR 0 19
24483: PUSH
24484: EMPTY
24485: ST_TO_ADDR
// for j in f do
24486: LD_ADDR_VAR 0 9
24490: PUSH
24491: LD_VAR 0 12
24495: PUSH
24496: FOR_IN
24497: IFFALSE 24570
// if GetBType ( j ) = b_bunker then
24499: LD_VAR 0 9
24503: PPUSH
24504: CALL_OW 266
24508: PUSH
24509: LD_INT 32
24511: EQUAL
24512: IFFALSE 24539
// tmp := Insert ( tmp , 1 , j ) else
24514: LD_ADDR_VAR 0 19
24518: PUSH
24519: LD_VAR 0 19
24523: PPUSH
24524: LD_INT 1
24526: PPUSH
24527: LD_VAR 0 9
24531: PPUSH
24532: CALL_OW 2
24536: ST_TO_ADDR
24537: GO 24568
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24539: LD_ADDR_VAR 0 19
24543: PUSH
24544: LD_VAR 0 19
24548: PPUSH
24549: LD_VAR 0 19
24553: PUSH
24554: LD_INT 1
24556: PLUS
24557: PPUSH
24558: LD_VAR 0 9
24562: PPUSH
24563: CALL_OW 2
24567: ST_TO_ADDR
24568: GO 24496
24570: POP
24571: POP
// if tmp then
24572: LD_VAR 0 19
24576: IFFALSE 24588
// f := tmp ;
24578: LD_ADDR_VAR 0 12
24582: PUSH
24583: LD_VAR 0 19
24587: ST_TO_ADDR
// end ; x := personel [ i ] ;
24588: LD_ADDR_VAR 0 13
24592: PUSH
24593: LD_VAR 0 6
24597: PUSH
24598: LD_VAR 0 8
24602: ARRAY
24603: ST_TO_ADDR
// if x = - 1 then
24604: LD_VAR 0 13
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: EQUAL
24613: IFFALSE 24822
// begin for j in f do
24615: LD_ADDR_VAR 0 9
24619: PUSH
24620: LD_VAR 0 12
24624: PUSH
24625: FOR_IN
24626: IFFALSE 24818
// repeat InitHc ;
24628: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24632: LD_VAR 0 9
24636: PPUSH
24637: CALL_OW 266
24641: PUSH
24642: LD_INT 5
24644: EQUAL
24645: IFFALSE 24715
// begin if UnitsInside ( j ) < 3 then
24647: LD_VAR 0 9
24651: PPUSH
24652: CALL_OW 313
24656: PUSH
24657: LD_INT 3
24659: LESS
24660: IFFALSE 24696
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24662: LD_INT 0
24664: PPUSH
24665: LD_INT 5
24667: PUSH
24668: LD_INT 8
24670: PUSH
24671: LD_INT 9
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: PUSH
24679: LD_VAR 0 17
24683: ARRAY
24684: PPUSH
24685: LD_VAR 0 4
24689: PPUSH
24690: CALL_OW 380
24694: GO 24713
// PrepareHuman ( false , i , skill ) ;
24696: LD_INT 0
24698: PPUSH
24699: LD_VAR 0 8
24703: PPUSH
24704: LD_VAR 0 4
24708: PPUSH
24709: CALL_OW 380
// end else
24713: GO 24732
// PrepareHuman ( false , i , skill ) ;
24715: LD_INT 0
24717: PPUSH
24718: LD_VAR 0 8
24722: PPUSH
24723: LD_VAR 0 4
24727: PPUSH
24728: CALL_OW 380
// un := CreateHuman ;
24732: LD_ADDR_VAR 0 14
24736: PUSH
24737: CALL_OW 44
24741: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24742: LD_ADDR_VAR 0 7
24746: PUSH
24747: LD_VAR 0 7
24751: PPUSH
24752: LD_INT 1
24754: PPUSH
24755: LD_VAR 0 14
24759: PPUSH
24760: CALL_OW 2
24764: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24765: LD_VAR 0 14
24769: PPUSH
24770: LD_VAR 0 9
24774: PPUSH
24775: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24779: LD_VAR 0 9
24783: PPUSH
24784: CALL_OW 313
24788: PUSH
24789: LD_INT 6
24791: EQUAL
24792: PUSH
24793: LD_VAR 0 9
24797: PPUSH
24798: CALL_OW 266
24802: PUSH
24803: LD_INT 32
24805: PUSH
24806: LD_INT 31
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: IN
24813: OR
24814: IFFALSE 24628
24816: GO 24625
24818: POP
24819: POP
// end else
24820: GO 25202
// for j = 1 to x do
24822: LD_ADDR_VAR 0 9
24826: PUSH
24827: DOUBLE
24828: LD_INT 1
24830: DEC
24831: ST_TO_ADDR
24832: LD_VAR 0 13
24836: PUSH
24837: FOR_TO
24838: IFFALSE 25200
// begin InitHc ;
24840: CALL_OW 19
// if not f then
24844: LD_VAR 0 12
24848: NOT
24849: IFFALSE 24938
// begin PrepareHuman ( false , i , skill ) ;
24851: LD_INT 0
24853: PPUSH
24854: LD_VAR 0 8
24858: PPUSH
24859: LD_VAR 0 4
24863: PPUSH
24864: CALL_OW 380
// un := CreateHuman ;
24868: LD_ADDR_VAR 0 14
24872: PUSH
24873: CALL_OW 44
24877: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24878: LD_ADDR_VAR 0 7
24882: PUSH
24883: LD_VAR 0 7
24887: PPUSH
24888: LD_INT 1
24890: PPUSH
24891: LD_VAR 0 14
24895: PPUSH
24896: CALL_OW 2
24900: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24901: LD_VAR 0 14
24905: PPUSH
24906: LD_VAR 0 1
24910: PPUSH
24911: CALL_OW 250
24915: PPUSH
24916: LD_VAR 0 1
24920: PPUSH
24921: CALL_OW 251
24925: PPUSH
24926: LD_INT 10
24928: PPUSH
24929: LD_INT 0
24931: PPUSH
24932: CALL_OW 50
// continue ;
24936: GO 24837
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
24938: LD_VAR 0 12
24942: PUSH
24943: LD_INT 1
24945: ARRAY
24946: PPUSH
24947: CALL_OW 313
24951: PUSH
24952: LD_VAR 0 12
24956: PUSH
24957: LD_INT 1
24959: ARRAY
24960: PPUSH
24961: CALL_OW 266
24965: PUSH
24966: LD_INT 32
24968: PUSH
24969: LD_INT 31
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: IN
24976: AND
24977: PUSH
24978: LD_VAR 0 12
24982: PUSH
24983: LD_INT 1
24985: ARRAY
24986: PPUSH
24987: CALL_OW 313
24991: PUSH
24992: LD_INT 6
24994: EQUAL
24995: OR
24996: IFFALSE 25016
// f := Delete ( f , 1 ) ;
24998: LD_ADDR_VAR 0 12
25002: PUSH
25003: LD_VAR 0 12
25007: PPUSH
25008: LD_INT 1
25010: PPUSH
25011: CALL_OW 3
25015: ST_TO_ADDR
// if not f then
25016: LD_VAR 0 12
25020: NOT
25021: IFFALSE 25039
// begin x := x + 2 ;
25023: LD_ADDR_VAR 0 13
25027: PUSH
25028: LD_VAR 0 13
25032: PUSH
25033: LD_INT 2
25035: PLUS
25036: ST_TO_ADDR
// continue ;
25037: GO 24837
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25039: LD_VAR 0 12
25043: PUSH
25044: LD_INT 1
25046: ARRAY
25047: PPUSH
25048: CALL_OW 266
25052: PUSH
25053: LD_INT 5
25055: EQUAL
25056: IFFALSE 25130
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25058: LD_VAR 0 12
25062: PUSH
25063: LD_INT 1
25065: ARRAY
25066: PPUSH
25067: CALL_OW 313
25071: PUSH
25072: LD_INT 3
25074: LESS
25075: IFFALSE 25111
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25077: LD_INT 0
25079: PPUSH
25080: LD_INT 5
25082: PUSH
25083: LD_INT 8
25085: PUSH
25086: LD_INT 9
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: LIST
25093: PUSH
25094: LD_VAR 0 17
25098: ARRAY
25099: PPUSH
25100: LD_VAR 0 4
25104: PPUSH
25105: CALL_OW 380
25109: GO 25128
// PrepareHuman ( false , i , skill ) ;
25111: LD_INT 0
25113: PPUSH
25114: LD_VAR 0 8
25118: PPUSH
25119: LD_VAR 0 4
25123: PPUSH
25124: CALL_OW 380
// end else
25128: GO 25147
// PrepareHuman ( false , i , skill ) ;
25130: LD_INT 0
25132: PPUSH
25133: LD_VAR 0 8
25137: PPUSH
25138: LD_VAR 0 4
25142: PPUSH
25143: CALL_OW 380
// un := CreateHuman ;
25147: LD_ADDR_VAR 0 14
25151: PUSH
25152: CALL_OW 44
25156: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25157: LD_ADDR_VAR 0 7
25161: PUSH
25162: LD_VAR 0 7
25166: PPUSH
25167: LD_INT 1
25169: PPUSH
25170: LD_VAR 0 14
25174: PPUSH
25175: CALL_OW 2
25179: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25180: LD_VAR 0 14
25184: PPUSH
25185: LD_VAR 0 12
25189: PUSH
25190: LD_INT 1
25192: ARRAY
25193: PPUSH
25194: CALL_OW 52
// end ;
25198: GO 24837
25200: POP
25201: POP
// end ;
25202: GO 24139
25204: POP
25205: POP
// result := result ^ buildings ;
25206: LD_ADDR_VAR 0 7
25210: PUSH
25211: LD_VAR 0 7
25215: PUSH
25216: LD_VAR 0 18
25220: ADD
25221: ST_TO_ADDR
// end else
25222: GO 25365
// begin for i = 1 to personel do
25224: LD_ADDR_VAR 0 8
25228: PUSH
25229: DOUBLE
25230: LD_INT 1
25232: DEC
25233: ST_TO_ADDR
25234: LD_VAR 0 6
25238: PUSH
25239: FOR_TO
25240: IFFALSE 25363
// begin if i > 4 then
25242: LD_VAR 0 8
25246: PUSH
25247: LD_INT 4
25249: GREATER
25250: IFFALSE 25254
// break ;
25252: GO 25363
// x := personel [ i ] ;
25254: LD_ADDR_VAR 0 13
25258: PUSH
25259: LD_VAR 0 6
25263: PUSH
25264: LD_VAR 0 8
25268: ARRAY
25269: ST_TO_ADDR
// if x = - 1 then
25270: LD_VAR 0 13
25274: PUSH
25275: LD_INT 1
25277: NEG
25278: EQUAL
25279: IFFALSE 25283
// continue ;
25281: GO 25239
// PrepareHuman ( false , i , skill ) ;
25283: LD_INT 0
25285: PPUSH
25286: LD_VAR 0 8
25290: PPUSH
25291: LD_VAR 0 4
25295: PPUSH
25296: CALL_OW 380
// un := CreateHuman ;
25300: LD_ADDR_VAR 0 14
25304: PUSH
25305: CALL_OW 44
25309: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25310: LD_VAR 0 14
25314: PPUSH
25315: LD_VAR 0 1
25319: PPUSH
25320: CALL_OW 250
25324: PPUSH
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 251
25334: PPUSH
25335: LD_INT 10
25337: PPUSH
25338: LD_INT 0
25340: PPUSH
25341: CALL_OW 50
// result := result ^ un ;
25345: LD_ADDR_VAR 0 7
25349: PUSH
25350: LD_VAR 0 7
25354: PUSH
25355: LD_VAR 0 14
25359: ADD
25360: ST_TO_ADDR
// end ;
25361: GO 25239
25363: POP
25364: POP
// end ; end ;
25365: LD_VAR 0 7
25369: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25370: LD_INT 0
25372: PPUSH
25373: PPUSH
25374: PPUSH
25375: PPUSH
25376: PPUSH
25377: PPUSH
25378: PPUSH
25379: PPUSH
25380: PPUSH
25381: PPUSH
25382: PPUSH
25383: PPUSH
25384: PPUSH
25385: PPUSH
25386: PPUSH
25387: PPUSH
// result := false ;
25388: LD_ADDR_VAR 0 3
25392: PUSH
25393: LD_INT 0
25395: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25396: LD_VAR 0 1
25400: NOT
25401: PUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 266
25411: PUSH
25412: LD_INT 32
25414: PUSH
25415: LD_INT 33
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: IN
25422: NOT
25423: OR
25424: IFFALSE 25428
// exit ;
25426: GO 26537
// nat := GetNation ( tower ) ;
25428: LD_ADDR_VAR 0 12
25432: PUSH
25433: LD_VAR 0 1
25437: PPUSH
25438: CALL_OW 248
25442: ST_TO_ADDR
// side := GetSide ( tower ) ;
25443: LD_ADDR_VAR 0 16
25447: PUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 255
25457: ST_TO_ADDR
// x := GetX ( tower ) ;
25458: LD_ADDR_VAR 0 10
25462: PUSH
25463: LD_VAR 0 1
25467: PPUSH
25468: CALL_OW 250
25472: ST_TO_ADDR
// y := GetY ( tower ) ;
25473: LD_ADDR_VAR 0 11
25477: PUSH
25478: LD_VAR 0 1
25482: PPUSH
25483: CALL_OW 251
25487: ST_TO_ADDR
// if not x or not y then
25488: LD_VAR 0 10
25492: NOT
25493: PUSH
25494: LD_VAR 0 11
25498: NOT
25499: OR
25500: IFFALSE 25504
// exit ;
25502: GO 26537
// weapon := 0 ;
25504: LD_ADDR_VAR 0 18
25508: PUSH
25509: LD_INT 0
25511: ST_TO_ADDR
// fac_list := [ ] ;
25512: LD_ADDR_VAR 0 17
25516: PUSH
25517: EMPTY
25518: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25519: LD_ADDR_VAR 0 6
25523: PUSH
25524: LD_VAR 0 1
25528: PPUSH
25529: CALL_OW 274
25533: PPUSH
25534: LD_VAR 0 2
25538: PPUSH
25539: LD_INT 0
25541: PPUSH
25542: CALL 23108 0 3
25546: PPUSH
25547: LD_INT 30
25549: PUSH
25550: LD_INT 3
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PPUSH
25557: CALL_OW 72
25561: ST_TO_ADDR
// if not factories then
25562: LD_VAR 0 6
25566: NOT
25567: IFFALSE 25571
// exit ;
25569: GO 26537
// for i in factories do
25571: LD_ADDR_VAR 0 8
25575: PUSH
25576: LD_VAR 0 6
25580: PUSH
25581: FOR_IN
25582: IFFALSE 25607
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25584: LD_ADDR_VAR 0 17
25588: PUSH
25589: LD_VAR 0 17
25593: PUSH
25594: LD_VAR 0 8
25598: PPUSH
25599: CALL_OW 478
25603: UNION
25604: ST_TO_ADDR
25605: GO 25581
25607: POP
25608: POP
// if not fac_list then
25609: LD_VAR 0 17
25613: NOT
25614: IFFALSE 25618
// exit ;
25616: GO 26537
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25618: LD_ADDR_VAR 0 5
25622: PUSH
25623: LD_INT 4
25625: PUSH
25626: LD_INT 5
25628: PUSH
25629: LD_INT 9
25631: PUSH
25632: LD_INT 10
25634: PUSH
25635: LD_INT 6
25637: PUSH
25638: LD_INT 7
25640: PUSH
25641: LD_INT 11
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 27
25655: PUSH
25656: LD_INT 28
25658: PUSH
25659: LD_INT 26
25661: PUSH
25662: LD_INT 30
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: PUSH
25671: LD_INT 43
25673: PUSH
25674: LD_INT 44
25676: PUSH
25677: LD_INT 46
25679: PUSH
25680: LD_INT 45
25682: PUSH
25683: LD_INT 47
25685: PUSH
25686: LD_INT 49
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: LIST
25701: PUSH
25702: LD_VAR 0 12
25706: ARRAY
25707: ST_TO_ADDR
// list := list isect fac_list ;
25708: LD_ADDR_VAR 0 5
25712: PUSH
25713: LD_VAR 0 5
25717: PUSH
25718: LD_VAR 0 17
25722: ISECT
25723: ST_TO_ADDR
// if not list then
25724: LD_VAR 0 5
25728: NOT
25729: IFFALSE 25733
// exit ;
25731: GO 26537
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25733: LD_VAR 0 12
25737: PUSH
25738: LD_INT 3
25740: EQUAL
25741: PUSH
25742: LD_INT 49
25744: PUSH
25745: LD_VAR 0 5
25749: IN
25750: AND
25751: PUSH
25752: LD_INT 31
25754: PPUSH
25755: LD_VAR 0 16
25759: PPUSH
25760: CALL_OW 321
25764: PUSH
25765: LD_INT 2
25767: EQUAL
25768: AND
25769: IFFALSE 25829
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25771: LD_INT 22
25773: PUSH
25774: LD_VAR 0 16
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: LD_INT 35
25785: PUSH
25786: LD_INT 49
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 91
25795: PUSH
25796: LD_VAR 0 1
25800: PUSH
25801: LD_INT 10
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: NOT
25819: IFFALSE 25829
// weapon := ru_time_lapser ;
25821: LD_ADDR_VAR 0 18
25825: PUSH
25826: LD_INT 49
25828: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25829: LD_VAR 0 12
25833: PUSH
25834: LD_INT 1
25836: PUSH
25837: LD_INT 2
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: IN
25844: PUSH
25845: LD_INT 11
25847: PUSH
25848: LD_VAR 0 5
25852: IN
25853: PUSH
25854: LD_INT 30
25856: PUSH
25857: LD_VAR 0 5
25861: IN
25862: OR
25863: AND
25864: PUSH
25865: LD_INT 6
25867: PPUSH
25868: LD_VAR 0 16
25872: PPUSH
25873: CALL_OW 321
25877: PUSH
25878: LD_INT 2
25880: EQUAL
25881: AND
25882: IFFALSE 26047
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25884: LD_INT 22
25886: PUSH
25887: LD_VAR 0 16
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 2
25898: PUSH
25899: LD_INT 35
25901: PUSH
25902: LD_INT 11
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 35
25911: PUSH
25912: LD_INT 30
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: PUSH
25924: LD_INT 91
25926: PUSH
25927: LD_VAR 0 1
25931: PUSH
25932: LD_INT 18
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: NOT
25950: PUSH
25951: LD_INT 22
25953: PUSH
25954: LD_VAR 0 16
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 30
25968: PUSH
25969: LD_INT 32
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PUSH
25976: LD_INT 30
25978: PUSH
25979: LD_INT 33
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: LIST
25990: PUSH
25991: LD_INT 91
25993: PUSH
25994: LD_VAR 0 1
25998: PUSH
25999: LD_INT 12
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: LIST
26011: PUSH
26012: EMPTY
26013: LIST
26014: PPUSH
26015: CALL_OW 69
26019: PUSH
26020: LD_INT 2
26022: GREATER
26023: AND
26024: IFFALSE 26047
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26026: LD_ADDR_VAR 0 18
26030: PUSH
26031: LD_INT 11
26033: PUSH
26034: LD_INT 30
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_VAR 0 12
26045: ARRAY
26046: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26047: LD_VAR 0 18
26051: NOT
26052: PUSH
26053: LD_INT 40
26055: PPUSH
26056: LD_VAR 0 16
26060: PPUSH
26061: CALL_OW 321
26065: PUSH
26066: LD_INT 2
26068: EQUAL
26069: AND
26070: PUSH
26071: LD_INT 7
26073: PUSH
26074: LD_VAR 0 5
26078: IN
26079: PUSH
26080: LD_INT 28
26082: PUSH
26083: LD_VAR 0 5
26087: IN
26088: OR
26089: PUSH
26090: LD_INT 45
26092: PUSH
26093: LD_VAR 0 5
26097: IN
26098: OR
26099: AND
26100: IFFALSE 26354
// begin hex := GetHexInfo ( x , y ) ;
26102: LD_ADDR_VAR 0 4
26106: PUSH
26107: LD_VAR 0 10
26111: PPUSH
26112: LD_VAR 0 11
26116: PPUSH
26117: CALL_OW 546
26121: ST_TO_ADDR
// if hex [ 1 ] then
26122: LD_VAR 0 4
26126: PUSH
26127: LD_INT 1
26129: ARRAY
26130: IFFALSE 26134
// exit ;
26132: GO 26537
// height := hex [ 2 ] ;
26134: LD_ADDR_VAR 0 15
26138: PUSH
26139: LD_VAR 0 4
26143: PUSH
26144: LD_INT 2
26146: ARRAY
26147: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26148: LD_ADDR_VAR 0 14
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 2
26158: PUSH
26159: LD_INT 3
26161: PUSH
26162: LD_INT 5
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: LIST
26170: ST_TO_ADDR
// for i in tmp do
26171: LD_ADDR_VAR 0 8
26175: PUSH
26176: LD_VAR 0 14
26180: PUSH
26181: FOR_IN
26182: IFFALSE 26352
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26184: LD_ADDR_VAR 0 9
26188: PUSH
26189: LD_VAR 0 10
26193: PPUSH
26194: LD_VAR 0 8
26198: PPUSH
26199: LD_INT 5
26201: PPUSH
26202: CALL_OW 272
26206: PUSH
26207: LD_VAR 0 11
26211: PPUSH
26212: LD_VAR 0 8
26216: PPUSH
26217: LD_INT 5
26219: PPUSH
26220: CALL_OW 273
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26229: LD_VAR 0 9
26233: PUSH
26234: LD_INT 1
26236: ARRAY
26237: PPUSH
26238: LD_VAR 0 9
26242: PUSH
26243: LD_INT 2
26245: ARRAY
26246: PPUSH
26247: CALL_OW 488
26251: IFFALSE 26350
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26253: LD_ADDR_VAR 0 4
26257: PUSH
26258: LD_VAR 0 9
26262: PUSH
26263: LD_INT 1
26265: ARRAY
26266: PPUSH
26267: LD_VAR 0 9
26271: PUSH
26272: LD_INT 2
26274: ARRAY
26275: PPUSH
26276: CALL_OW 546
26280: ST_TO_ADDR
// if hex [ 1 ] then
26281: LD_VAR 0 4
26285: PUSH
26286: LD_INT 1
26288: ARRAY
26289: IFFALSE 26293
// continue ;
26291: GO 26181
// h := hex [ 2 ] ;
26293: LD_ADDR_VAR 0 13
26297: PUSH
26298: LD_VAR 0 4
26302: PUSH
26303: LD_INT 2
26305: ARRAY
26306: ST_TO_ADDR
// if h + 7 < height then
26307: LD_VAR 0 13
26311: PUSH
26312: LD_INT 7
26314: PLUS
26315: PUSH
26316: LD_VAR 0 15
26320: LESS
26321: IFFALSE 26350
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26323: LD_ADDR_VAR 0 18
26327: PUSH
26328: LD_INT 7
26330: PUSH
26331: LD_INT 28
26333: PUSH
26334: LD_INT 45
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: PUSH
26342: LD_VAR 0 12
26346: ARRAY
26347: ST_TO_ADDR
// break ;
26348: GO 26352
// end ; end ; end ;
26350: GO 26181
26352: POP
26353: POP
// end ; if not weapon then
26354: LD_VAR 0 18
26358: NOT
26359: IFFALSE 26419
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26361: LD_ADDR_VAR 0 5
26365: PUSH
26366: LD_VAR 0 5
26370: PUSH
26371: LD_INT 11
26373: PUSH
26374: LD_INT 30
26376: PUSH
26377: LD_INT 49
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: LIST
26384: DIFF
26385: ST_TO_ADDR
// if not list then
26386: LD_VAR 0 5
26390: NOT
26391: IFFALSE 26395
// exit ;
26393: GO 26537
// weapon := list [ rand ( 1 , list ) ] ;
26395: LD_ADDR_VAR 0 18
26399: PUSH
26400: LD_VAR 0 5
26404: PUSH
26405: LD_INT 1
26407: PPUSH
26408: LD_VAR 0 5
26412: PPUSH
26413: CALL_OW 12
26417: ARRAY
26418: ST_TO_ADDR
// end ; if weapon then
26419: LD_VAR 0 18
26423: IFFALSE 26537
// begin tmp := CostOfWeapon ( weapon ) ;
26425: LD_ADDR_VAR 0 14
26429: PUSH
26430: LD_VAR 0 18
26434: PPUSH
26435: CALL_OW 451
26439: ST_TO_ADDR
// j := GetBase ( tower ) ;
26440: LD_ADDR_VAR 0 9
26444: PUSH
26445: LD_VAR 0 1
26449: PPUSH
26450: CALL_OW 274
26454: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26455: LD_VAR 0 9
26459: PPUSH
26460: LD_INT 1
26462: PPUSH
26463: CALL_OW 275
26467: PUSH
26468: LD_VAR 0 14
26472: PUSH
26473: LD_INT 1
26475: ARRAY
26476: GREATEREQUAL
26477: PUSH
26478: LD_VAR 0 9
26482: PPUSH
26483: LD_INT 2
26485: PPUSH
26486: CALL_OW 275
26490: PUSH
26491: LD_VAR 0 14
26495: PUSH
26496: LD_INT 2
26498: ARRAY
26499: GREATEREQUAL
26500: AND
26501: PUSH
26502: LD_VAR 0 9
26506: PPUSH
26507: LD_INT 3
26509: PPUSH
26510: CALL_OW 275
26514: PUSH
26515: LD_VAR 0 14
26519: PUSH
26520: LD_INT 3
26522: ARRAY
26523: GREATEREQUAL
26524: AND
26525: IFFALSE 26537
// result := weapon ;
26527: LD_ADDR_VAR 0 3
26531: PUSH
26532: LD_VAR 0 18
26536: ST_TO_ADDR
// end ; end ;
26537: LD_VAR 0 3
26541: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26542: LD_INT 0
26544: PPUSH
26545: PPUSH
// result := true ;
26546: LD_ADDR_VAR 0 3
26550: PUSH
26551: LD_INT 1
26553: ST_TO_ADDR
// if array1 = array2 then
26554: LD_VAR 0 1
26558: PUSH
26559: LD_VAR 0 2
26563: EQUAL
26564: IFFALSE 26624
// begin for i = 1 to array1 do
26566: LD_ADDR_VAR 0 4
26570: PUSH
26571: DOUBLE
26572: LD_INT 1
26574: DEC
26575: ST_TO_ADDR
26576: LD_VAR 0 1
26580: PUSH
26581: FOR_TO
26582: IFFALSE 26620
// if array1 [ i ] <> array2 [ i ] then
26584: LD_VAR 0 1
26588: PUSH
26589: LD_VAR 0 4
26593: ARRAY
26594: PUSH
26595: LD_VAR 0 2
26599: PUSH
26600: LD_VAR 0 4
26604: ARRAY
26605: NONEQUAL
26606: IFFALSE 26618
// begin result := false ;
26608: LD_ADDR_VAR 0 3
26612: PUSH
26613: LD_INT 0
26615: ST_TO_ADDR
// break ;
26616: GO 26620
// end ;
26618: GO 26581
26620: POP
26621: POP
// end else
26622: GO 26632
// result := false ;
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
// end ;
26632: LD_VAR 0 3
26636: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26637: LD_INT 0
26639: PPUSH
26640: PPUSH
// if not array1 or not array2 then
26641: LD_VAR 0 1
26645: NOT
26646: PUSH
26647: LD_VAR 0 2
26651: NOT
26652: OR
26653: IFFALSE 26657
// exit ;
26655: GO 26721
// result := true ;
26657: LD_ADDR_VAR 0 3
26661: PUSH
26662: LD_INT 1
26664: ST_TO_ADDR
// for i = 1 to array1 do
26665: LD_ADDR_VAR 0 4
26669: PUSH
26670: DOUBLE
26671: LD_INT 1
26673: DEC
26674: ST_TO_ADDR
26675: LD_VAR 0 1
26679: PUSH
26680: FOR_TO
26681: IFFALSE 26719
// if array1 [ i ] <> array2 [ i ] then
26683: LD_VAR 0 1
26687: PUSH
26688: LD_VAR 0 4
26692: ARRAY
26693: PUSH
26694: LD_VAR 0 2
26698: PUSH
26699: LD_VAR 0 4
26703: ARRAY
26704: NONEQUAL
26705: IFFALSE 26717
// begin result := false ;
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_INT 0
26714: ST_TO_ADDR
// break ;
26715: GO 26719
// end ;
26717: GO 26680
26719: POP
26720: POP
// end ;
26721: LD_VAR 0 3
26725: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26726: LD_INT 0
26728: PPUSH
26729: PPUSH
26730: PPUSH
// pom := GetBase ( fac ) ;
26731: LD_ADDR_VAR 0 5
26735: PUSH
26736: LD_VAR 0 1
26740: PPUSH
26741: CALL_OW 274
26745: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26746: LD_ADDR_VAR 0 4
26750: PUSH
26751: LD_VAR 0 2
26755: PUSH
26756: LD_INT 1
26758: ARRAY
26759: PPUSH
26760: LD_VAR 0 2
26764: PUSH
26765: LD_INT 2
26767: ARRAY
26768: PPUSH
26769: LD_VAR 0 2
26773: PUSH
26774: LD_INT 3
26776: ARRAY
26777: PPUSH
26778: LD_VAR 0 2
26782: PUSH
26783: LD_INT 4
26785: ARRAY
26786: PPUSH
26787: CALL_OW 449
26791: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26792: LD_ADDR_VAR 0 3
26796: PUSH
26797: LD_VAR 0 5
26801: PPUSH
26802: LD_INT 1
26804: PPUSH
26805: CALL_OW 275
26809: PUSH
26810: LD_VAR 0 4
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: GREATEREQUAL
26819: PUSH
26820: LD_VAR 0 5
26824: PPUSH
26825: LD_INT 2
26827: PPUSH
26828: CALL_OW 275
26832: PUSH
26833: LD_VAR 0 4
26837: PUSH
26838: LD_INT 2
26840: ARRAY
26841: GREATEREQUAL
26842: AND
26843: PUSH
26844: LD_VAR 0 5
26848: PPUSH
26849: LD_INT 3
26851: PPUSH
26852: CALL_OW 275
26856: PUSH
26857: LD_VAR 0 4
26861: PUSH
26862: LD_INT 3
26864: ARRAY
26865: GREATEREQUAL
26866: AND
26867: ST_TO_ADDR
// end ;
26868: LD_VAR 0 3
26872: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26873: LD_INT 0
26875: PPUSH
26876: PPUSH
26877: PPUSH
26878: PPUSH
// pom := GetBase ( building ) ;
26879: LD_ADDR_VAR 0 3
26883: PUSH
26884: LD_VAR 0 1
26888: PPUSH
26889: CALL_OW 274
26893: ST_TO_ADDR
// if not pom then
26894: LD_VAR 0 3
26898: NOT
26899: IFFALSE 26903
// exit ;
26901: GO 27073
// btype := GetBType ( building ) ;
26903: LD_ADDR_VAR 0 5
26907: PUSH
26908: LD_VAR 0 1
26912: PPUSH
26913: CALL_OW 266
26917: ST_TO_ADDR
// if btype = b_armoury then
26918: LD_VAR 0 5
26922: PUSH
26923: LD_INT 4
26925: EQUAL
26926: IFFALSE 26936
// btype := b_barracks ;
26928: LD_ADDR_VAR 0 5
26932: PUSH
26933: LD_INT 5
26935: ST_TO_ADDR
// if btype = b_depot then
26936: LD_VAR 0 5
26940: PUSH
26941: LD_INT 0
26943: EQUAL
26944: IFFALSE 26954
// btype := b_warehouse ;
26946: LD_ADDR_VAR 0 5
26950: PUSH
26951: LD_INT 1
26953: ST_TO_ADDR
// if btype = b_workshop then
26954: LD_VAR 0 5
26958: PUSH
26959: LD_INT 2
26961: EQUAL
26962: IFFALSE 26972
// btype := b_factory ;
26964: LD_ADDR_VAR 0 5
26968: PUSH
26969: LD_INT 3
26971: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
26972: LD_ADDR_VAR 0 4
26976: PUSH
26977: LD_VAR 0 5
26981: PPUSH
26982: LD_VAR 0 1
26986: PPUSH
26987: CALL_OW 248
26991: PPUSH
26992: CALL_OW 450
26996: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26997: LD_ADDR_VAR 0 2
27001: PUSH
27002: LD_VAR 0 3
27006: PPUSH
27007: LD_INT 1
27009: PPUSH
27010: CALL_OW 275
27014: PUSH
27015: LD_VAR 0 4
27019: PUSH
27020: LD_INT 1
27022: ARRAY
27023: GREATEREQUAL
27024: PUSH
27025: LD_VAR 0 3
27029: PPUSH
27030: LD_INT 2
27032: PPUSH
27033: CALL_OW 275
27037: PUSH
27038: LD_VAR 0 4
27042: PUSH
27043: LD_INT 2
27045: ARRAY
27046: GREATEREQUAL
27047: AND
27048: PUSH
27049: LD_VAR 0 3
27053: PPUSH
27054: LD_INT 3
27056: PPUSH
27057: CALL_OW 275
27061: PUSH
27062: LD_VAR 0 4
27066: PUSH
27067: LD_INT 3
27069: ARRAY
27070: GREATEREQUAL
27071: AND
27072: ST_TO_ADDR
// end ;
27073: LD_VAR 0 2
27077: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27078: LD_INT 0
27080: PPUSH
27081: PPUSH
27082: PPUSH
// pom := GetBase ( building ) ;
27083: LD_ADDR_VAR 0 4
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 274
27097: ST_TO_ADDR
// if not pom then
27098: LD_VAR 0 4
27102: NOT
27103: IFFALSE 27107
// exit ;
27105: GO 27208
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27107: LD_ADDR_VAR 0 5
27111: PUSH
27112: LD_VAR 0 2
27116: PPUSH
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 248
27126: PPUSH
27127: CALL_OW 450
27131: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27132: LD_ADDR_VAR 0 3
27136: PUSH
27137: LD_VAR 0 4
27141: PPUSH
27142: LD_INT 1
27144: PPUSH
27145: CALL_OW 275
27149: PUSH
27150: LD_VAR 0 5
27154: PUSH
27155: LD_INT 1
27157: ARRAY
27158: GREATEREQUAL
27159: PUSH
27160: LD_VAR 0 4
27164: PPUSH
27165: LD_INT 2
27167: PPUSH
27168: CALL_OW 275
27172: PUSH
27173: LD_VAR 0 5
27177: PUSH
27178: LD_INT 2
27180: ARRAY
27181: GREATEREQUAL
27182: AND
27183: PUSH
27184: LD_VAR 0 4
27188: PPUSH
27189: LD_INT 3
27191: PPUSH
27192: CALL_OW 275
27196: PUSH
27197: LD_VAR 0 5
27201: PUSH
27202: LD_INT 3
27204: ARRAY
27205: GREATEREQUAL
27206: AND
27207: ST_TO_ADDR
// end ;
27208: LD_VAR 0 3
27212: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27213: LD_INT 0
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
27221: PPUSH
27222: PPUSH
27223: PPUSH
27224: PPUSH
27225: PPUSH
// result := false ;
27226: LD_ADDR_VAR 0 8
27230: PUSH
27231: LD_INT 0
27233: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27234: LD_VAR 0 5
27238: NOT
27239: PUSH
27240: LD_VAR 0 1
27244: NOT
27245: OR
27246: PUSH
27247: LD_VAR 0 2
27251: NOT
27252: OR
27253: PUSH
27254: LD_VAR 0 3
27258: NOT
27259: OR
27260: IFFALSE 27264
// exit ;
27262: GO 28078
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27264: LD_ADDR_VAR 0 14
27268: PUSH
27269: LD_VAR 0 1
27273: PPUSH
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_VAR 0 3
27283: PPUSH
27284: LD_VAR 0 4
27288: PPUSH
27289: LD_VAR 0 5
27293: PUSH
27294: LD_INT 1
27296: ARRAY
27297: PPUSH
27298: CALL_OW 248
27302: PPUSH
27303: LD_INT 0
27305: PPUSH
27306: CALL 29331 0 6
27310: ST_TO_ADDR
// if not hexes then
27311: LD_VAR 0 14
27315: NOT
27316: IFFALSE 27320
// exit ;
27318: GO 28078
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27320: LD_ADDR_VAR 0 17
27324: PUSH
27325: LD_VAR 0 5
27329: PPUSH
27330: LD_INT 22
27332: PUSH
27333: LD_VAR 0 13
27337: PPUSH
27338: CALL_OW 255
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 30
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 30
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PPUSH
27379: CALL_OW 72
27383: ST_TO_ADDR
// for i = 1 to hexes do
27384: LD_ADDR_VAR 0 9
27388: PUSH
27389: DOUBLE
27390: LD_INT 1
27392: DEC
27393: ST_TO_ADDR
27394: LD_VAR 0 14
27398: PUSH
27399: FOR_TO
27400: IFFALSE 28076
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27402: LD_ADDR_VAR 0 13
27406: PUSH
27407: LD_VAR 0 14
27411: PUSH
27412: LD_VAR 0 9
27416: ARRAY
27417: PUSH
27418: LD_INT 1
27420: ARRAY
27421: PPUSH
27422: LD_VAR 0 14
27426: PUSH
27427: LD_VAR 0 9
27431: ARRAY
27432: PUSH
27433: LD_INT 2
27435: ARRAY
27436: PPUSH
27437: CALL_OW 428
27441: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27442: LD_VAR 0 14
27446: PUSH
27447: LD_VAR 0 9
27451: ARRAY
27452: PUSH
27453: LD_INT 1
27455: ARRAY
27456: PPUSH
27457: LD_VAR 0 14
27461: PUSH
27462: LD_VAR 0 9
27466: ARRAY
27467: PUSH
27468: LD_INT 2
27470: ARRAY
27471: PPUSH
27472: CALL_OW 351
27476: PUSH
27477: LD_VAR 0 14
27481: PUSH
27482: LD_VAR 0 9
27486: ARRAY
27487: PUSH
27488: LD_INT 1
27490: ARRAY
27491: PPUSH
27492: LD_VAR 0 14
27496: PUSH
27497: LD_VAR 0 9
27501: ARRAY
27502: PUSH
27503: LD_INT 2
27505: ARRAY
27506: PPUSH
27507: CALL_OW 488
27511: NOT
27512: OR
27513: PUSH
27514: LD_VAR 0 13
27518: PPUSH
27519: CALL_OW 247
27523: PUSH
27524: LD_INT 3
27526: EQUAL
27527: OR
27528: IFFALSE 27534
// exit ;
27530: POP
27531: POP
27532: GO 28078
// if not tmp then
27534: LD_VAR 0 13
27538: NOT
27539: IFFALSE 27543
// continue ;
27541: GO 27399
// result := true ;
27543: LD_ADDR_VAR 0 8
27547: PUSH
27548: LD_INT 1
27550: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27551: LD_VAR 0 6
27555: PUSH
27556: LD_VAR 0 13
27560: PPUSH
27561: CALL_OW 247
27565: PUSH
27566: LD_INT 2
27568: EQUAL
27569: AND
27570: PUSH
27571: LD_VAR 0 13
27575: PPUSH
27576: CALL_OW 263
27580: PUSH
27581: LD_INT 1
27583: EQUAL
27584: AND
27585: IFFALSE 27749
// begin if IsDrivenBy ( tmp ) then
27587: LD_VAR 0 13
27591: PPUSH
27592: CALL_OW 311
27596: IFFALSE 27600
// continue ;
27598: GO 27399
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27600: LD_VAR 0 6
27604: PPUSH
27605: LD_INT 3
27607: PUSH
27608: LD_INT 60
27610: PUSH
27611: EMPTY
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 3
27620: PUSH
27621: LD_INT 55
27623: PUSH
27624: EMPTY
27625: LIST
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PPUSH
27635: CALL_OW 72
27639: IFFALSE 27747
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27641: LD_ADDR_VAR 0 18
27645: PUSH
27646: LD_VAR 0 6
27650: PPUSH
27651: LD_INT 3
27653: PUSH
27654: LD_INT 60
27656: PUSH
27657: EMPTY
27658: LIST
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 3
27666: PUSH
27667: LD_INT 55
27669: PUSH
27670: EMPTY
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: EMPTY
27678: LIST
27679: LIST
27680: PPUSH
27681: CALL_OW 72
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if IsInUnit ( driver ) then
27690: LD_VAR 0 18
27694: PPUSH
27695: CALL_OW 310
27699: IFFALSE 27710
// ComExit ( driver ) ;
27701: LD_VAR 0 18
27705: PPUSH
27706: CALL 53112 0 1
// AddComEnterUnit ( driver , tmp ) ;
27710: LD_VAR 0 18
27714: PPUSH
27715: LD_VAR 0 13
27719: PPUSH
27720: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27724: LD_VAR 0 18
27728: PPUSH
27729: LD_VAR 0 7
27733: PPUSH
27734: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27738: LD_VAR 0 18
27742: PPUSH
27743: CALL_OW 181
// end ; continue ;
27747: GO 27399
// end ; if not cleaners or not tmp in cleaners then
27749: LD_VAR 0 6
27753: NOT
27754: PUSH
27755: LD_VAR 0 13
27759: PUSH
27760: LD_VAR 0 6
27764: IN
27765: NOT
27766: OR
27767: IFFALSE 28074
// begin if dep then
27769: LD_VAR 0 17
27773: IFFALSE 27909
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27775: LD_ADDR_VAR 0 16
27779: PUSH
27780: LD_VAR 0 17
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: PPUSH
27789: CALL_OW 250
27793: PPUSH
27794: LD_VAR 0 17
27798: PUSH
27799: LD_INT 1
27801: ARRAY
27802: PPUSH
27803: CALL_OW 254
27807: PPUSH
27808: LD_INT 5
27810: PPUSH
27811: CALL_OW 272
27815: PUSH
27816: LD_VAR 0 17
27820: PUSH
27821: LD_INT 1
27823: ARRAY
27824: PPUSH
27825: CALL_OW 251
27829: PPUSH
27830: LD_VAR 0 17
27834: PUSH
27835: LD_INT 1
27837: ARRAY
27838: PPUSH
27839: CALL_OW 254
27843: PPUSH
27844: LD_INT 5
27846: PPUSH
27847: CALL_OW 273
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27856: LD_VAR 0 16
27860: PUSH
27861: LD_INT 1
27863: ARRAY
27864: PPUSH
27865: LD_VAR 0 16
27869: PUSH
27870: LD_INT 2
27872: ARRAY
27873: PPUSH
27874: CALL_OW 488
27878: IFFALSE 27909
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27880: LD_VAR 0 13
27884: PPUSH
27885: LD_VAR 0 16
27889: PUSH
27890: LD_INT 1
27892: ARRAY
27893: PPUSH
27894: LD_VAR 0 16
27898: PUSH
27899: LD_INT 2
27901: ARRAY
27902: PPUSH
27903: CALL_OW 111
// continue ;
27907: GO 27399
// end ; end ; r := GetDir ( tmp ) ;
27909: LD_ADDR_VAR 0 15
27913: PUSH
27914: LD_VAR 0 13
27918: PPUSH
27919: CALL_OW 254
27923: ST_TO_ADDR
// if r = 5 then
27924: LD_VAR 0 15
27928: PUSH
27929: LD_INT 5
27931: EQUAL
27932: IFFALSE 27942
// r := 0 ;
27934: LD_ADDR_VAR 0 15
27938: PUSH
27939: LD_INT 0
27941: ST_TO_ADDR
// for j = r to 5 do
27942: LD_ADDR_VAR 0 10
27946: PUSH
27947: DOUBLE
27948: LD_VAR 0 15
27952: DEC
27953: ST_TO_ADDR
27954: LD_INT 5
27956: PUSH
27957: FOR_TO
27958: IFFALSE 28072
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
27960: LD_ADDR_VAR 0 11
27964: PUSH
27965: LD_VAR 0 13
27969: PPUSH
27970: CALL_OW 250
27974: PPUSH
27975: LD_VAR 0 10
27979: PPUSH
27980: LD_INT 2
27982: PPUSH
27983: CALL_OW 272
27987: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
27988: LD_ADDR_VAR 0 12
27992: PUSH
27993: LD_VAR 0 13
27997: PPUSH
27998: CALL_OW 251
28002: PPUSH
28003: LD_VAR 0 10
28007: PPUSH
28008: LD_INT 2
28010: PPUSH
28011: CALL_OW 273
28015: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28016: LD_VAR 0 11
28020: PPUSH
28021: LD_VAR 0 12
28025: PPUSH
28026: CALL_OW 488
28030: PUSH
28031: LD_VAR 0 11
28035: PPUSH
28036: LD_VAR 0 12
28040: PPUSH
28041: CALL_OW 428
28045: NOT
28046: AND
28047: IFFALSE 28070
// begin ComMoveXY ( tmp , _x , _y ) ;
28049: LD_VAR 0 13
28053: PPUSH
28054: LD_VAR 0 11
28058: PPUSH
28059: LD_VAR 0 12
28063: PPUSH
28064: CALL_OW 111
// break ;
28068: GO 28072
// end ; end ;
28070: GO 27957
28072: POP
28073: POP
// end ; end ;
28074: GO 27399
28076: POP
28077: POP
// end ;
28078: LD_VAR 0 8
28082: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28083: LD_INT 0
28085: PPUSH
// result := true ;
28086: LD_ADDR_VAR 0 3
28090: PUSH
28091: LD_INT 1
28093: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28094: LD_VAR 0 2
28098: PUSH
28099: LD_INT 24
28101: DOUBLE
28102: EQUAL
28103: IFTRUE 28113
28105: LD_INT 33
28107: DOUBLE
28108: EQUAL
28109: IFTRUE 28113
28111: GO 28138
28113: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28114: LD_ADDR_VAR 0 3
28118: PUSH
28119: LD_INT 32
28121: PPUSH
28122: LD_VAR 0 1
28126: PPUSH
28127: CALL_OW 321
28131: PUSH
28132: LD_INT 2
28134: EQUAL
28135: ST_TO_ADDR
28136: GO 28454
28138: LD_INT 20
28140: DOUBLE
28141: EQUAL
28142: IFTRUE 28146
28144: GO 28171
28146: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28147: LD_ADDR_VAR 0 3
28151: PUSH
28152: LD_INT 6
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 321
28164: PUSH
28165: LD_INT 2
28167: EQUAL
28168: ST_TO_ADDR
28169: GO 28454
28171: LD_INT 22
28173: DOUBLE
28174: EQUAL
28175: IFTRUE 28185
28177: LD_INT 36
28179: DOUBLE
28180: EQUAL
28181: IFTRUE 28185
28183: GO 28210
28185: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28186: LD_ADDR_VAR 0 3
28190: PUSH
28191: LD_INT 15
28193: PPUSH
28194: LD_VAR 0 1
28198: PPUSH
28199: CALL_OW 321
28203: PUSH
28204: LD_INT 2
28206: EQUAL
28207: ST_TO_ADDR
28208: GO 28454
28210: LD_INT 30
28212: DOUBLE
28213: EQUAL
28214: IFTRUE 28218
28216: GO 28243
28218: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: LD_INT 20
28226: PPUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 321
28236: PUSH
28237: LD_INT 2
28239: EQUAL
28240: ST_TO_ADDR
28241: GO 28454
28243: LD_INT 28
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28257
28249: LD_INT 21
28251: DOUBLE
28252: EQUAL
28253: IFTRUE 28257
28255: GO 28282
28257: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_INT 21
28265: PPUSH
28266: LD_VAR 0 1
28270: PPUSH
28271: CALL_OW 321
28275: PUSH
28276: LD_INT 2
28278: EQUAL
28279: ST_TO_ADDR
28280: GO 28454
28282: LD_INT 16
28284: DOUBLE
28285: EQUAL
28286: IFTRUE 28290
28288: GO 28315
28290: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28291: LD_ADDR_VAR 0 3
28295: PUSH
28296: LD_INT 84
28298: PPUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 321
28308: PUSH
28309: LD_INT 2
28311: EQUAL
28312: ST_TO_ADDR
28313: GO 28454
28315: LD_INT 19
28317: DOUBLE
28318: EQUAL
28319: IFTRUE 28329
28321: LD_INT 23
28323: DOUBLE
28324: EQUAL
28325: IFTRUE 28329
28327: GO 28354
28329: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28330: LD_ADDR_VAR 0 3
28334: PUSH
28335: LD_INT 83
28337: PPUSH
28338: LD_VAR 0 1
28342: PPUSH
28343: CALL_OW 321
28347: PUSH
28348: LD_INT 2
28350: EQUAL
28351: ST_TO_ADDR
28352: GO 28454
28354: LD_INT 17
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28387
28362: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28363: LD_ADDR_VAR 0 3
28367: PUSH
28368: LD_INT 39
28370: PPUSH
28371: LD_VAR 0 1
28375: PPUSH
28376: CALL_OW 321
28380: PUSH
28381: LD_INT 2
28383: EQUAL
28384: ST_TO_ADDR
28385: GO 28454
28387: LD_INT 18
28389: DOUBLE
28390: EQUAL
28391: IFTRUE 28395
28393: GO 28420
28395: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28396: LD_ADDR_VAR 0 3
28400: PUSH
28401: LD_INT 40
28403: PPUSH
28404: LD_VAR 0 1
28408: PPUSH
28409: CALL_OW 321
28413: PUSH
28414: LD_INT 2
28416: EQUAL
28417: ST_TO_ADDR
28418: GO 28454
28420: LD_INT 27
28422: DOUBLE
28423: EQUAL
28424: IFTRUE 28428
28426: GO 28453
28428: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28429: LD_ADDR_VAR 0 3
28433: PUSH
28434: LD_INT 35
28436: PPUSH
28437: LD_VAR 0 1
28441: PPUSH
28442: CALL_OW 321
28446: PUSH
28447: LD_INT 2
28449: EQUAL
28450: ST_TO_ADDR
28451: GO 28454
28453: POP
// end ;
28454: LD_VAR 0 3
28458: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28459: LD_INT 0
28461: PPUSH
28462: PPUSH
28463: PPUSH
28464: PPUSH
28465: PPUSH
28466: PPUSH
28467: PPUSH
28468: PPUSH
28469: PPUSH
28470: PPUSH
28471: PPUSH
// result := false ;
28472: LD_ADDR_VAR 0 6
28476: PUSH
28477: LD_INT 0
28479: ST_TO_ADDR
// if btype = b_depot then
28480: LD_VAR 0 2
28484: PUSH
28485: LD_INT 0
28487: EQUAL
28488: IFFALSE 28500
// begin result := true ;
28490: LD_ADDR_VAR 0 6
28494: PUSH
28495: LD_INT 1
28497: ST_TO_ADDR
// exit ;
28498: GO 29326
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28500: LD_VAR 0 1
28504: NOT
28505: PUSH
28506: LD_VAR 0 1
28510: PPUSH
28511: CALL_OW 266
28515: PUSH
28516: LD_INT 0
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: IN
28526: NOT
28527: OR
28528: PUSH
28529: LD_VAR 0 2
28533: NOT
28534: OR
28535: PUSH
28536: LD_VAR 0 5
28540: PUSH
28541: LD_INT 0
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: LD_INT 2
28549: PUSH
28550: LD_INT 3
28552: PUSH
28553: LD_INT 4
28555: PUSH
28556: LD_INT 5
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: IN
28567: NOT
28568: OR
28569: PUSH
28570: LD_VAR 0 3
28574: PPUSH
28575: LD_VAR 0 4
28579: PPUSH
28580: CALL_OW 488
28584: NOT
28585: OR
28586: IFFALSE 28590
// exit ;
28588: GO 29326
// side := GetSide ( depot ) ;
28590: LD_ADDR_VAR 0 9
28594: PUSH
28595: LD_VAR 0 1
28599: PPUSH
28600: CALL_OW 255
28604: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28605: LD_VAR 0 9
28609: PPUSH
28610: LD_VAR 0 2
28614: PPUSH
28615: CALL 28083 0 2
28619: NOT
28620: IFFALSE 28624
// exit ;
28622: GO 29326
// pom := GetBase ( depot ) ;
28624: LD_ADDR_VAR 0 10
28628: PUSH
28629: LD_VAR 0 1
28633: PPUSH
28634: CALL_OW 274
28638: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28639: LD_ADDR_VAR 0 11
28643: PUSH
28644: LD_VAR 0 2
28648: PPUSH
28649: LD_VAR 0 1
28653: PPUSH
28654: CALL_OW 248
28658: PPUSH
28659: CALL_OW 450
28663: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28664: LD_VAR 0 10
28668: PPUSH
28669: LD_INT 1
28671: PPUSH
28672: CALL_OW 275
28676: PUSH
28677: LD_VAR 0 11
28681: PUSH
28682: LD_INT 1
28684: ARRAY
28685: GREATEREQUAL
28686: PUSH
28687: LD_VAR 0 10
28691: PPUSH
28692: LD_INT 2
28694: PPUSH
28695: CALL_OW 275
28699: PUSH
28700: LD_VAR 0 11
28704: PUSH
28705: LD_INT 2
28707: ARRAY
28708: GREATEREQUAL
28709: AND
28710: PUSH
28711: LD_VAR 0 10
28715: PPUSH
28716: LD_INT 3
28718: PPUSH
28719: CALL_OW 275
28723: PUSH
28724: LD_VAR 0 11
28728: PUSH
28729: LD_INT 3
28731: ARRAY
28732: GREATEREQUAL
28733: AND
28734: NOT
28735: IFFALSE 28739
// exit ;
28737: GO 29326
// if GetBType ( depot ) = b_depot then
28739: LD_VAR 0 1
28743: PPUSH
28744: CALL_OW 266
28748: PUSH
28749: LD_INT 0
28751: EQUAL
28752: IFFALSE 28764
// dist := 28 else
28754: LD_ADDR_VAR 0 14
28758: PUSH
28759: LD_INT 28
28761: ST_TO_ADDR
28762: GO 28772
// dist := 36 ;
28764: LD_ADDR_VAR 0 14
28768: PUSH
28769: LD_INT 36
28771: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28772: LD_VAR 0 1
28776: PPUSH
28777: LD_VAR 0 3
28781: PPUSH
28782: LD_VAR 0 4
28786: PPUSH
28787: CALL_OW 297
28791: PUSH
28792: LD_VAR 0 14
28796: GREATER
28797: IFFALSE 28801
// exit ;
28799: GO 29326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28801: LD_ADDR_VAR 0 12
28805: PUSH
28806: LD_VAR 0 2
28810: PPUSH
28811: LD_VAR 0 3
28815: PPUSH
28816: LD_VAR 0 4
28820: PPUSH
28821: LD_VAR 0 5
28825: PPUSH
28826: LD_VAR 0 1
28830: PPUSH
28831: CALL_OW 248
28835: PPUSH
28836: LD_INT 0
28838: PPUSH
28839: CALL 29331 0 6
28843: ST_TO_ADDR
// if not hexes then
28844: LD_VAR 0 12
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 29326
// hex := GetHexInfo ( x , y ) ;
28853: LD_ADDR_VAR 0 15
28857: PUSH
28858: LD_VAR 0 3
28862: PPUSH
28863: LD_VAR 0 4
28867: PPUSH
28868: CALL_OW 546
28872: ST_TO_ADDR
// if hex [ 1 ] then
28873: LD_VAR 0 15
28877: PUSH
28878: LD_INT 1
28880: ARRAY
28881: IFFALSE 28885
// exit ;
28883: GO 29326
// height := hex [ 2 ] ;
28885: LD_ADDR_VAR 0 13
28889: PUSH
28890: LD_VAR 0 15
28894: PUSH
28895: LD_INT 2
28897: ARRAY
28898: ST_TO_ADDR
// for i = 1 to hexes do
28899: LD_ADDR_VAR 0 7
28903: PUSH
28904: DOUBLE
28905: LD_INT 1
28907: DEC
28908: ST_TO_ADDR
28909: LD_VAR 0 12
28913: PUSH
28914: FOR_TO
28915: IFFALSE 29245
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28917: LD_VAR 0 12
28921: PUSH
28922: LD_VAR 0 7
28926: ARRAY
28927: PUSH
28928: LD_INT 1
28930: ARRAY
28931: PPUSH
28932: LD_VAR 0 12
28936: PUSH
28937: LD_VAR 0 7
28941: ARRAY
28942: PUSH
28943: LD_INT 2
28945: ARRAY
28946: PPUSH
28947: CALL_OW 488
28951: NOT
28952: PUSH
28953: LD_VAR 0 12
28957: PUSH
28958: LD_VAR 0 7
28962: ARRAY
28963: PUSH
28964: LD_INT 1
28966: ARRAY
28967: PPUSH
28968: LD_VAR 0 12
28972: PUSH
28973: LD_VAR 0 7
28977: ARRAY
28978: PUSH
28979: LD_INT 2
28981: ARRAY
28982: PPUSH
28983: CALL_OW 428
28987: PUSH
28988: LD_INT 0
28990: GREATER
28991: OR
28992: PUSH
28993: LD_VAR 0 12
28997: PUSH
28998: LD_VAR 0 7
29002: ARRAY
29003: PUSH
29004: LD_INT 1
29006: ARRAY
29007: PPUSH
29008: LD_VAR 0 12
29012: PUSH
29013: LD_VAR 0 7
29017: ARRAY
29018: PUSH
29019: LD_INT 2
29021: ARRAY
29022: PPUSH
29023: CALL_OW 351
29027: OR
29028: IFFALSE 29034
// exit ;
29030: POP
29031: POP
29032: GO 29326
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29034: LD_ADDR_VAR 0 8
29038: PUSH
29039: LD_VAR 0 12
29043: PUSH
29044: LD_VAR 0 7
29048: ARRAY
29049: PUSH
29050: LD_INT 1
29052: ARRAY
29053: PPUSH
29054: LD_VAR 0 12
29058: PUSH
29059: LD_VAR 0 7
29063: ARRAY
29064: PUSH
29065: LD_INT 2
29067: ARRAY
29068: PPUSH
29069: CALL_OW 546
29073: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29074: LD_VAR 0 8
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: PUSH
29083: LD_VAR 0 8
29087: PUSH
29088: LD_INT 2
29090: ARRAY
29091: PUSH
29092: LD_VAR 0 13
29096: PUSH
29097: LD_INT 2
29099: PLUS
29100: GREATER
29101: OR
29102: PUSH
29103: LD_VAR 0 8
29107: PUSH
29108: LD_INT 2
29110: ARRAY
29111: PUSH
29112: LD_VAR 0 13
29116: PUSH
29117: LD_INT 2
29119: MINUS
29120: LESS
29121: OR
29122: PUSH
29123: LD_VAR 0 8
29127: PUSH
29128: LD_INT 3
29130: ARRAY
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: LD_INT 8
29137: PUSH
29138: LD_INT 9
29140: PUSH
29141: LD_INT 10
29143: PUSH
29144: LD_INT 11
29146: PUSH
29147: LD_INT 12
29149: PUSH
29150: LD_INT 13
29152: PUSH
29153: LD_INT 16
29155: PUSH
29156: LD_INT 17
29158: PUSH
29159: LD_INT 18
29161: PUSH
29162: LD_INT 19
29164: PUSH
29165: LD_INT 20
29167: PUSH
29168: LD_INT 21
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: IN
29186: NOT
29187: OR
29188: PUSH
29189: LD_VAR 0 8
29193: PUSH
29194: LD_INT 5
29196: ARRAY
29197: NOT
29198: OR
29199: PUSH
29200: LD_VAR 0 8
29204: PUSH
29205: LD_INT 6
29207: ARRAY
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: LD_INT 2
29214: PUSH
29215: LD_INT 7
29217: PUSH
29218: LD_INT 9
29220: PUSH
29221: LD_INT 10
29223: PUSH
29224: LD_INT 11
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: IN
29235: NOT
29236: OR
29237: IFFALSE 29243
// exit ;
29239: POP
29240: POP
29241: GO 29326
// end ;
29243: GO 28914
29245: POP
29246: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29247: LD_VAR 0 9
29251: PPUSH
29252: LD_VAR 0 3
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: LD_INT 20
29264: PPUSH
29265: CALL 21249 0 4
29269: PUSH
29270: LD_INT 4
29272: ARRAY
29273: IFFALSE 29277
// exit ;
29275: GO 29326
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29277: LD_VAR 0 2
29281: PUSH
29282: LD_INT 29
29284: PUSH
29285: LD_INT 30
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: IN
29292: PUSH
29293: LD_VAR 0 3
29297: PPUSH
29298: LD_VAR 0 4
29302: PPUSH
29303: LD_VAR 0 9
29307: PPUSH
29308: CALL_OW 440
29312: NOT
29313: AND
29314: IFFALSE 29318
// exit ;
29316: GO 29326
// result := true ;
29318: LD_ADDR_VAR 0 6
29322: PUSH
29323: LD_INT 1
29325: ST_TO_ADDR
// end ;
29326: LD_VAR 0 6
29330: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29331: LD_INT 0
29333: PPUSH
29334: PPUSH
29335: PPUSH
29336: PPUSH
29337: PPUSH
29338: PPUSH
29339: PPUSH
29340: PPUSH
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
29353: PPUSH
29354: PPUSH
29355: PPUSH
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
29360: PPUSH
29361: PPUSH
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
// result = [ ] ;
29391: LD_ADDR_VAR 0 7
29395: PUSH
29396: EMPTY
29397: ST_TO_ADDR
// temp_list = [ ] ;
29398: LD_ADDR_VAR 0 9
29402: PUSH
29403: EMPTY
29404: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29405: LD_VAR 0 4
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: LD_INT 1
29415: PUSH
29416: LD_INT 2
29418: PUSH
29419: LD_INT 3
29421: PUSH
29422: LD_INT 4
29424: PUSH
29425: LD_INT 5
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: IN
29436: NOT
29437: PUSH
29438: LD_VAR 0 1
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: IN
29453: PUSH
29454: LD_VAR 0 5
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: LD_INT 2
29464: PUSH
29465: LD_INT 3
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: LIST
29472: IN
29473: NOT
29474: AND
29475: OR
29476: IFFALSE 29480
// exit ;
29478: GO 47871
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29480: LD_VAR 0 1
29484: PUSH
29485: LD_INT 6
29487: PUSH
29488: LD_INT 7
29490: PUSH
29491: LD_INT 8
29493: PUSH
29494: LD_INT 13
29496: PUSH
29497: LD_INT 12
29499: PUSH
29500: LD_INT 15
29502: PUSH
29503: LD_INT 11
29505: PUSH
29506: LD_INT 14
29508: PUSH
29509: LD_INT 10
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: IN
29523: IFFALSE 29533
// btype = b_lab ;
29525: LD_ADDR_VAR 0 1
29529: PUSH
29530: LD_INT 6
29532: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29533: LD_VAR 0 6
29537: PUSH
29538: LD_INT 0
29540: PUSH
29541: LD_INT 1
29543: PUSH
29544: LD_INT 2
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: LIST
29551: IN
29552: NOT
29553: PUSH
29554: LD_VAR 0 1
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: LD_INT 6
29573: PUSH
29574: LD_INT 36
29576: PUSH
29577: LD_INT 4
29579: PUSH
29580: LD_INT 5
29582: PUSH
29583: LD_INT 31
29585: PUSH
29586: LD_INT 32
29588: PUSH
29589: LD_INT 33
29591: PUSH
29592: EMPTY
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: IN
29605: NOT
29606: PUSH
29607: LD_VAR 0 6
29611: PUSH
29612: LD_INT 1
29614: EQUAL
29615: AND
29616: OR
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 3
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: IN
29633: NOT
29634: PUSH
29635: LD_VAR 0 6
29639: PUSH
29640: LD_INT 2
29642: EQUAL
29643: AND
29644: OR
29645: IFFALSE 29655
// mode = 0 ;
29647: LD_ADDR_VAR 0 6
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// case mode of 0 :
29655: LD_VAR 0 6
29659: PUSH
29660: LD_INT 0
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 41121
29668: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29669: LD_ADDR_VAR 0 11
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 0
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 1
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 0
29717: PUSH
29718: LD_INT 1
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: LD_INT 0
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: LD_INT 1
29742: NEG
29743: PUSH
29744: EMPTY
29745: LIST
29746: LIST
29747: PUSH
29748: LD_INT 1
29750: NEG
29751: PUSH
29752: LD_INT 2
29754: NEG
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: LD_INT 0
29762: PUSH
29763: LD_INT 2
29765: NEG
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: LD_INT 2
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: LD_INT 1
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 3
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 3
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 2
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29862: LD_ADDR_VAR 0 12
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 1
29943: PUSH
29944: LD_INT 1
29946: NEG
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: LD_INT 0
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: LD_INT 1
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: LD_INT 0
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 2
29996: NEG
29997: PUSH
29998: LD_INT 1
30000: NEG
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 3
30019: NEG
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 3
30030: NEG
30031: PUSH
30032: LD_INT 1
30034: NEG
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30058: LD_ADDR_VAR 0 13
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 1
30078: NEG
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 0
30106: PUSH
30107: LD_INT 1
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 1
30116: NEG
30117: PUSH
30118: LD_INT 0
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 1
30127: NEG
30128: PUSH
30129: LD_INT 1
30131: NEG
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: LD_INT 2
30143: NEG
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: LD_INT 1
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 2
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: LD_INT 2
30205: NEG
30206: PUSH
30207: LD_INT 3
30209: NEG
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: NEG
30218: PUSH
30219: LD_INT 2
30221: NEG
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 3
30229: NEG
30230: PUSH
30231: LD_INT 3
30233: NEG
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30257: LD_ADDR_VAR 0 14
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 0
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 1
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: LD_INT 1
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: PUSH
30303: LD_INT 0
30305: PUSH
30306: LD_INT 1
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: PUSH
30313: LD_INT 1
30315: NEG
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 1
30326: NEG
30327: PUSH
30328: LD_INT 1
30330: NEG
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: LD_INT 1
30338: NEG
30339: PUSH
30340: LD_INT 2
30342: NEG
30343: PUSH
30344: EMPTY
30345: LIST
30346: LIST
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 2
30353: NEG
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 1
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 1
30392: NEG
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 1
30403: NEG
30404: PUSH
30405: LD_INT 3
30407: NEG
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 3
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30453: LD_ADDR_VAR 0 15
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: LD_INT 1
30537: NEG
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 2
30545: PUSH
30546: LD_INT 0
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 2
30555: PUSH
30556: LD_INT 1
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 1
30565: NEG
30566: PUSH
30567: LD_INT 1
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 2
30576: NEG
30577: PUSH
30578: LD_INT 0
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30646: LD_ADDR_VAR 0 16
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: LD_INT 0
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 0
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: LD_INT 0
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 1
30684: PUSH
30685: LD_INT 1
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 1
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 2
30731: NEG
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: LD_INT 2
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: PUSH
30760: LD_INT 2
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: NEG
30770: PUSH
30771: LD_INT 1
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 2
30781: NEG
30782: PUSH
30783: LD_INT 2
30785: NEG
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: LD_INT 2
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: PUSH
30801: LD_INT 3
30803: PUSH
30804: LD_INT 3
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: LD_INT 3
30816: PUSH
30817: EMPTY
30818: LIST
30819: LIST
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30839: LD_ADDR_VAR 0 17
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 0
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 0
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: PUSH
30868: LD_INT 0
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: PUSH
30875: LD_INT 1
30877: PUSH
30878: LD_INT 1
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: PUSH
30885: LD_INT 0
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: EMPTY
30892: LIST
30893: LIST
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: LD_INT 0
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: LD_INT 1
30908: NEG
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 0
30932: PUSH
30933: LD_INT 2
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 2
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 2
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: PUSH
30992: LD_INT 0
30994: PUSH
30995: LD_INT 2
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 1
31004: NEG
31005: PUSH
31006: LD_INT 1
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: PUSH
31024: LD_INT 2
31026: NEG
31027: PUSH
31028: LD_INT 1
31030: NEG
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 2
31038: NEG
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31069: LD_ADDR_VAR 0 18
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: LD_INT 0
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 0
31086: PUSH
31087: LD_INT 1
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: PUSH
31098: LD_INT 0
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: PUSH
31108: LD_INT 1
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 0
31117: PUSH
31118: LD_INT 1
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PUSH
31129: LD_INT 0
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: LD_INT 1
31138: NEG
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 1
31150: NEG
31151: PUSH
31152: LD_INT 2
31154: NEG
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: PUSH
31160: LD_INT 0
31162: PUSH
31163: LD_INT 2
31165: NEG
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 1
31173: PUSH
31174: LD_INT 1
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 2
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: PUSH
31205: LD_INT 2
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 2
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 0
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: NEG
31235: PUSH
31236: LD_INT 1
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: LD_INT 2
31245: NEG
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: LD_INT 2
31256: NEG
31257: PUSH
31258: LD_INT 1
31260: NEG
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 2
31268: NEG
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31299: LD_ADDR_VAR 0 19
31303: PUSH
31304: LD_INT 0
31306: PUSH
31307: LD_INT 0
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: LD_INT 1
31319: NEG
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: PUSH
31325: LD_INT 1
31327: PUSH
31328: LD_INT 0
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: LD_INT 1
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 0
31347: PUSH
31348: LD_INT 1
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: NEG
31358: PUSH
31359: LD_INT 0
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: LD_INT 1
31368: NEG
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: NEG
31381: PUSH
31382: LD_INT 2
31384: NEG
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: LD_INT 2
31395: NEG
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 2
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 2
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: PUSH
31445: LD_INT 2
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 0
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: NEG
31465: PUSH
31466: LD_INT 1
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 2
31475: NEG
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 2
31486: NEG
31487: PUSH
31488: LD_INT 1
31490: NEG
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: LD_INT 2
31498: NEG
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31529: LD_ADDR_VAR 0 20
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: EMPTY
31541: LIST
31542: LIST
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: LD_INT 1
31549: NEG
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 1
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 1
31567: PUSH
31568: LD_INT 1
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 0
31577: PUSH
31578: LD_INT 1
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 1
31587: NEG
31588: PUSH
31589: LD_INT 0
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 1
31598: NEG
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: LD_INT 2
31614: NEG
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: LD_INT 2
31625: NEG
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 2
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 2
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: LD_INT 2
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: PUSH
31675: LD_INT 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 0
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 1
31694: NEG
31695: PUSH
31696: LD_INT 1
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 2
31705: NEG
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PUSH
31714: LD_INT 2
31716: NEG
31717: PUSH
31718: LD_INT 1
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 2
31728: NEG
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31759: LD_ADDR_VAR 0 21
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 0
31776: PUSH
31777: LD_INT 1
31779: NEG
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 1
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 0
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 1
31817: NEG
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PUSH
31826: LD_INT 1
31828: NEG
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 0
31852: PUSH
31853: LD_INT 2
31855: NEG
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 2
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: PUSH
31905: LD_INT 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: LD_INT 2
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: NEG
31925: PUSH
31926: LD_INT 1
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 2
31935: NEG
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: LD_INT 2
31946: NEG
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: NEG
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31989: LD_ADDR_VAR 0 22
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 0
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: PUSH
32028: LD_INT 1
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 0
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 1
32047: NEG
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 1
32058: NEG
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: LD_INT 1
32070: NEG
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 2
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: PUSH
32142: LD_INT 0
32144: PUSH
32145: LD_INT 2
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: EMPTY
32160: LIST
32161: LIST
32162: PUSH
32163: LD_INT 2
32165: NEG
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: LD_INT 2
32176: NEG
32177: PUSH
32178: LD_INT 1
32180: NEG
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: PUSH
32186: LD_INT 2
32188: NEG
32189: PUSH
32190: LD_INT 2
32192: NEG
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32219: LD_ADDR_VAR 0 23
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 0
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: LD_INT 1
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: LD_INT 1
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 1
32300: NEG
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: PUSH
32310: LD_INT 0
32312: PUSH
32313: LD_INT 2
32315: NEG
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 2
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 2
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 0
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 1
32384: NEG
32385: PUSH
32386: LD_INT 1
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: LD_INT 2
32395: NEG
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PUSH
32404: LD_INT 2
32406: NEG
32407: PUSH
32408: LD_INT 1
32410: NEG
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 2
32418: NEG
32419: PUSH
32420: LD_INT 2
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: NEG
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: LD_INT 3
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: LD_INT 2
32457: NEG
32458: PUSH
32459: EMPTY
32460: LIST
32461: LIST
32462: PUSH
32463: LD_INT 2
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32499: LD_ADDR_VAR 0 24
32503: PUSH
32504: LD_INT 0
32506: PUSH
32507: LD_INT 0
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 1
32527: PUSH
32528: LD_INT 0
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 1
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: LD_INT 1
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 1
32568: NEG
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 1
32580: NEG
32581: PUSH
32582: LD_INT 2
32584: NEG
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PUSH
32590: LD_INT 0
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 2
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 2
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 2
32675: NEG
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 2
32686: NEG
32687: PUSH
32688: LD_INT 1
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 2
32698: NEG
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 2
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 3
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 3
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32775: LD_ADDR_VAR 0 25
32779: PUSH
32780: LD_INT 0
32782: PUSH
32783: LD_INT 0
32785: PUSH
32786: EMPTY
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 0
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: LD_INT 0
32806: PUSH
32807: EMPTY
32808: LIST
32809: LIST
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: LD_INT 1
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 0
32823: PUSH
32824: LD_INT 1
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: LD_INT 2
32860: NEG
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: LD_INT 2
32871: NEG
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 1
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 2
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 1
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: NEG
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: NEG
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: LD_INT 2
32974: NEG
32975: PUSH
32976: LD_INT 2
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 3
32986: PUSH
32987: LD_INT 1
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 3
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 2
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: PUSH
33017: LD_INT 3
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33049: LD_ADDR_VAR 0 26
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 0
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 1
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 1
33107: NEG
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: LD_INT 1
33122: NEG
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 1
33130: NEG
33131: PUSH
33132: LD_INT 2
33134: NEG
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: LD_INT 2
33145: NEG
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 2
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 2
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 2
33184: PUSH
33185: LD_INT 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: EMPTY
33199: LIST
33200: LIST
33201: PUSH
33202: LD_INT 0
33204: PUSH
33205: LD_INT 2
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 1
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 2
33225: NEG
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: LD_INT 1
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: LD_INT 2
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: LD_INT 3
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 2
33291: NEG
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33325: LD_ADDR_VAR 0 27
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 0
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: PUSH
33354: LD_INT 0
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: PUSH
33364: LD_INT 1
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 1
33383: NEG
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: NEG
33395: PUSH
33396: LD_INT 1
33398: NEG
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: LD_INT 2
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 2
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: LD_INT 1
33490: NEG
33491: PUSH
33492: LD_INT 1
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 2
33501: NEG
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 2
33512: NEG
33513: PUSH
33514: LD_INT 1
33516: NEG
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 2
33528: NEG
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 1
33536: NEG
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: LD_INT 3
33558: NEG
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 3
33570: NEG
33571: PUSH
33572: LD_INT 2
33574: NEG
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33605: LD_ADDR_VAR 0 28
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: LD_INT 0
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: LD_INT 0
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: PUSH
33651: LD_INT 0
33653: PUSH
33654: LD_INT 1
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PUSH
33661: LD_INT 1
33663: NEG
33664: PUSH
33665: LD_INT 0
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 1
33674: NEG
33675: PUSH
33676: LD_INT 1
33678: NEG
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 1
33686: NEG
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 0
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 2
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 2
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 2
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: LD_INT 2
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 0
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 1
33770: NEG
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 2
33792: NEG
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 2
33804: NEG
33805: PUSH
33806: LD_INT 2
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 2
33816: NEG
33817: PUSH
33818: LD_INT 3
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 3
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 3
33840: NEG
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: NEG
33853: PUSH
33854: LD_INT 2
33856: NEG
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33887: LD_ADDR_VAR 0 29
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 0
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: LD_INT 1
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 0
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: PUSH
33943: LD_INT 1
33945: NEG
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 1
33956: NEG
33957: PUSH
33958: LD_INT 1
33960: NEG
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 2
33972: NEG
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 0
33980: PUSH
33981: LD_INT 2
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 2
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 1
34022: PUSH
34023: LD_INT 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 0
34032: PUSH
34033: LD_INT 2
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 3
34100: PUSH
34101: LD_INT 1
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 1
34120: NEG
34121: PUSH
34122: LD_INT 2
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 3
34131: NEG
34132: PUSH
34133: LD_INT 2
34135: NEG
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34166: LD_ADDR_VAR 0 30
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: LD_INT 0
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 0
34197: PUSH
34198: EMPTY
34199: LIST
34200: LIST
34201: PUSH
34202: LD_INT 1
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: LD_INT 0
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 1
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: NEG
34248: PUSH
34249: LD_INT 2
34251: NEG
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: LD_INT 2
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 2
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 2
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 2
34301: PUSH
34302: LD_INT 2
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: LD_INT 1
34325: PUSH
34326: EMPTY
34327: LIST
34328: LIST
34329: PUSH
34330: LD_INT 2
34332: NEG
34333: PUSH
34334: LD_INT 0
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: PUSH
34341: LD_INT 2
34343: NEG
34344: PUSH
34345: LD_INT 1
34347: NEG
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: LD_INT 1
34355: NEG
34356: PUSH
34357: LD_INT 3
34359: NEG
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: PUSH
34365: LD_INT 1
34367: PUSH
34368: LD_INT 2
34370: NEG
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 3
34378: PUSH
34379: LD_INT 2
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 3
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 3
34409: NEG
34410: PUSH
34411: LD_INT 1
34413: NEG
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34444: LD_ADDR_VAR 0 31
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 0
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 1
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: NEG
34514: PUSH
34515: LD_INT 1
34517: NEG
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: PUSH
34523: LD_INT 1
34525: NEG
34526: PUSH
34527: LD_INT 2
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 2
34548: PUSH
34549: LD_INT 0
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: PUSH
34556: LD_INT 2
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 2
34568: PUSH
34569: LD_INT 2
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 2
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 0
34588: PUSH
34589: LD_INT 2
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 1
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: PUSH
34607: LD_INT 2
34609: NEG
34610: PUSH
34611: LD_INT 1
34613: NEG
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: LD_INT 2
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 3
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: LD_INT 3
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: LD_INT 2
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 3
34687: NEG
34688: PUSH
34689: LD_INT 2
34691: NEG
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34722: LD_ADDR_VAR 0 32
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 0
34739: PUSH
34740: LD_INT 1
34742: NEG
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 1
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: NEG
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: NEG
34792: PUSH
34793: LD_INT 1
34795: NEG
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 1
34803: NEG
34804: PUSH
34805: LD_INT 2
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: LD_INT 2
34818: NEG
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 2
34837: PUSH
34838: LD_INT 1
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 2
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 2
34888: NEG
34889: PUSH
34890: LD_INT 0
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 2
34899: NEG
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 1
34911: NEG
34912: PUSH
34913: LD_INT 3
34915: NEG
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 1
34923: PUSH
34924: LD_INT 2
34926: NEG
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 3
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: LD_INT 1
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: PUSH
34963: LD_INT 3
34965: NEG
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: LIST
34979: LIST
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35000: LD_ADDR_VAR 0 33
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: LD_INT 0
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 1
35020: NEG
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 1
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 0
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 1
35058: NEG
35059: PUSH
35060: LD_INT 0
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: LD_INT 2
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: PUSH
35094: LD_INT 1
35096: NEG
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: PUSH
35105: LD_INT 0
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 2
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 1
35124: PUSH
35125: LD_INT 2
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: NEG
35145: PUSH
35146: LD_INT 1
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: LD_INT 2
35166: NEG
35167: PUSH
35168: LD_INT 1
35170: NEG
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: NEG
35179: PUSH
35180: LD_INT 2
35182: NEG
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 2
35190: NEG
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: EMPTY
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 2
35202: PUSH
35203: LD_INT 1
35205: NEG
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: LD_INT 1
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 3
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 2
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 3
35244: NEG
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35279: LD_ADDR_VAR 0 34
35283: PUSH
35284: LD_INT 0
35286: PUSH
35287: LD_INT 0
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: LD_INT 1
35299: NEG
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: LD_INT 1
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: LD_INT 1
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 1
35337: NEG
35338: PUSH
35339: LD_INT 0
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 1
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 1
35360: NEG
35361: PUSH
35362: LD_INT 2
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 2
35394: PUSH
35395: LD_INT 1
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 2
35404: PUSH
35405: LD_INT 2
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: PUSH
35415: LD_INT 2
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 0
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: NEG
35447: PUSH
35448: LD_INT 1
35450: NEG
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: PUSH
35456: LD_INT 2
35458: NEG
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 3
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: LD_INT 2
35485: NEG
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: LD_INT 2
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 2
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 3
35524: NEG
35525: PUSH
35526: LD_INT 1
35528: NEG
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35559: LD_ADDR_VAR 0 35
35563: PUSH
35564: LD_INT 0
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: PUSH
35585: LD_INT 1
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 0
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 1
35628: NEG
35629: PUSH
35630: LD_INT 1
35632: NEG
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35671: LD_ADDR_VAR 0 36
35675: PUSH
35676: LD_INT 0
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 0
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 0
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: LD_INT 1
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 0
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: PUSH
35731: LD_INT 0
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: NEG
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: LD_INT 2
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35783: LD_ADDR_VAR 0 37
35787: PUSH
35788: LD_INT 0
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 0
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 1
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 0
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: LD_INT 0
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 1
35852: NEG
35853: PUSH
35854: LD_INT 1
35856: NEG
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35895: LD_ADDR_VAR 0 38
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 0
35912: PUSH
35913: LD_INT 1
35915: NEG
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 1
35933: PUSH
35934: LD_INT 1
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 0
35943: PUSH
35944: LD_INT 1
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: NEG
35954: PUSH
35955: LD_INT 0
35957: PUSH
35958: EMPTY
35959: LIST
35960: LIST
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: LD_INT 1
35968: NEG
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: LD_INT 1
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: LD_INT 1
35990: NEG
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36007: LD_ADDR_VAR 0 39
36011: PUSH
36012: LD_INT 0
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: LD_INT 1
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 0
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PUSH
36053: LD_INT 0
36055: PUSH
36056: LD_INT 1
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: NEG
36066: PUSH
36067: LD_INT 0
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 1
36076: NEG
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 1
36088: NEG
36089: PUSH
36090: LD_INT 2
36092: NEG
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36119: LD_ADDR_VAR 0 40
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 0
36136: PUSH
36137: LD_INT 1
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: PUSH
36148: LD_INT 0
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: PUSH
36165: LD_INT 0
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: PUSH
36201: LD_INT 1
36203: NEG
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36231: LD_ADDR_VAR 0 41
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 0
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: LD_INT 0
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 1
36289: NEG
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 1
36312: NEG
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: LD_INT 2
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 1
36365: PUSH
36366: LD_INT 2
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 2
36386: NEG
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 2
36421: NEG
36422: PUSH
36423: LD_INT 3
36425: NEG
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 3
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 3
36454: PUSH
36455: LD_INT 1
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 3
36464: PUSH
36465: LD_INT 2
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: PUSH
36475: LD_INT 3
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: PUSH
36485: LD_INT 3
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 2
36494: NEG
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 3
36505: NEG
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 3
36516: NEG
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 3
36528: NEG
36529: PUSH
36530: LD_INT 2
36532: NEG
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 3
36540: NEG
36541: PUSH
36542: LD_INT 3
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36581: LD_ADDR_VAR 0 42
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: LD_INT 0
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 1
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 0
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: PUSH
36620: LD_INT 1
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: LD_INT 0
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 1
36654: NEG
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: LD_INT 2
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 0
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 2
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 2
36706: PUSH
36707: LD_INT 2
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 2
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 1
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 2
36759: NEG
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: NEG
36772: PUSH
36773: LD_INT 3
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: LD_INT 3
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: LD_INT 3
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 2
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: LD_INT 3
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: PUSH
36838: LD_INT 3
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 1
36847: PUSH
36848: LD_INT 3
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 0
36857: PUSH
36858: LD_INT 3
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: NEG
36868: PUSH
36869: LD_INT 2
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 3
36878: NEG
36879: PUSH
36880: LD_INT 2
36882: NEG
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: PUSH
36888: LD_INT 3
36890: NEG
36891: PUSH
36892: LD_INT 3
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36931: LD_ADDR_VAR 0 43
36935: PUSH
36936: LD_INT 0
36938: PUSH
36939: LD_INT 0
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 1
36959: PUSH
36960: LD_INT 0
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 1
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: LD_INT 1
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: NEG
37001: PUSH
37002: LD_INT 1
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: LD_INT 2
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 2
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 2
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 2
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: LD_INT 2
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: LD_INT 1
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 2
37097: NEG
37098: PUSH
37099: LD_INT 0
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 2
37108: NEG
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 3
37124: NEG
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 3
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: PUSH
37155: LD_INT 1
37157: NEG
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 0
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 3
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 3
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 3
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 2
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 3
37227: NEG
37228: PUSH
37229: LD_INT 0
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: NEG
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37279: LD_ADDR_VAR 0 44
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: LD_INT 0
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: EMPTY
37312: LIST
37313: LIST
37314: PUSH
37315: LD_INT 1
37317: PUSH
37318: LD_INT 1
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 1
37360: NEG
37361: PUSH
37362: LD_INT 2
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: LD_INT 0
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 2
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: NEG
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 0
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: NEG
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 2
37457: NEG
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 2
37469: NEG
37470: PUSH
37471: LD_INT 3
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 3
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: LD_INT 3
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 3
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 3
37553: NEG
37554: PUSH
37555: LD_INT 0
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 3
37564: NEG
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: NEG
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 3
37588: NEG
37589: PUSH
37590: LD_INT 3
37592: NEG
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37629: LD_ADDR_VAR 0 45
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 1
37687: NEG
37688: PUSH
37689: LD_INT 0
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: NEG
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 2
37714: NEG
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: LD_INT 2
37725: NEG
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 1
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: PUSH
37745: LD_INT 1
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: LD_INT 2
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 2
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 2
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: NEG
37796: PUSH
37797: LD_INT 1
37799: NEG
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 2
37807: NEG
37808: PUSH
37809: LD_INT 2
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: LD_INT 3
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: LD_INT 3
37846: NEG
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 1
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: LD_INT 2
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 3
37875: PUSH
37876: LD_INT 3
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 3
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 1
37895: PUSH
37896: LD_INT 3
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 0
37905: PUSH
37906: LD_INT 3
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 2
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 3
37938: NEG
37939: PUSH
37940: LD_INT 3
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: LIST
37960: LIST
37961: LIST
37962: LIST
37963: LIST
37964: LIST
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: LIST
37970: LIST
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37979: LD_ADDR_VAR 0 46
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: LD_INT 2
38064: NEG
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 0
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 2
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 2
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: LD_INT 1
38160: NEG
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: LD_INT 3
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 3
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: LD_INT 2
38194: NEG
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 3
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 3
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: LD_INT 3
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: LD_INT 3
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: NEG
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: LD_INT 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 3
38286: NEG
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38327: LD_ADDR_VAR 0 47
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 1
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 0
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: NEG
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 0
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: LD_INT 2
38454: NEG
38455: PUSH
38456: LD_INT 2
38458: NEG
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38478: LD_ADDR_VAR 0 48
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 0
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 0
38495: PUSH
38496: LD_INT 1
38498: NEG
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 0
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: LD_INT 1
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 1
38559: NEG
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_INT 0
38571: PUSH
38572: LD_INT 2
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 1
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38625: LD_ADDR_VAR 0 49
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 1
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 0
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: LD_INT 1
38683: NEG
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: LD_INT 1
38698: NEG
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 2
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 2
38727: PUSH
38728: LD_INT 1
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 2
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38769: LD_ADDR_VAR 0 50
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 0
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 0
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: NEG
38839: PUSH
38840: LD_INT 1
38842: NEG
38843: PUSH
38844: EMPTY
38845: LIST
38846: LIST
38847: PUSH
38848: LD_INT 2
38850: PUSH
38851: LD_INT 1
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 2
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 1
38870: PUSH
38871: LD_INT 2
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 2
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38913: LD_ADDR_VAR 0 51
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: LD_INT 1
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 1
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39060: LD_ADDR_VAR 0 52
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: LD_INT 1
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 1
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 1
39141: NEG
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: LD_INT 1
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 2
39175: NEG
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: LD_INT 2
39191: NEG
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39211: LD_ADDR_VAR 0 53
39215: PUSH
39216: LD_INT 0
39218: PUSH
39219: LD_INT 0
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: PUSH
39240: LD_INT 0
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: PUSH
39247: LD_INT 1
39249: PUSH
39250: LD_INT 1
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 1
39269: NEG
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 1
39280: NEG
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 1
39292: NEG
39293: PUSH
39294: LD_INT 2
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: LD_INT 2
39307: NEG
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 1
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 2
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 2
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: NEG
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 2
39387: NEG
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 2
39398: NEG
39399: PUSH
39400: LD_INT 1
39402: NEG
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39441: LD_ADDR_VAR 0 54
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: NEG
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 1
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 0
39489: PUSH
39490: LD_INT 1
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 1
39522: NEG
39523: PUSH
39524: LD_INT 2
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 2
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 2
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: PUSH
39587: LD_INT 2
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 0
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: NEG
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: NEG
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: NEG
39629: PUSH
39630: LD_INT 1
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: NEG
39641: PUSH
39642: LD_INT 2
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39671: LD_ADDR_VAR 0 55
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 0
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 0
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 0
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 0
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 2
39806: PUSH
39807: LD_INT 2
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: LD_INT 2
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 2
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 2
39858: NEG
39859: PUSH
39860: LD_INT 1
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 2
39870: NEG
39871: PUSH
39872: LD_INT 2
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39901: LD_ADDR_VAR 0 56
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 0
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 0
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 1
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: LD_INT 1
39974: NEG
39975: PUSH
39976: EMPTY
39977: LIST
39978: LIST
39979: PUSH
39980: LD_INT 1
39982: NEG
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 2
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: LD_INT 2
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: LD_INT 2
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 0
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: NEG
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 2
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40131: LD_ADDR_VAR 0 57
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 0
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: LD_INT 0
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 1
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 2
40266: PUSH
40267: LD_INT 2
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: PUSH
40277: LD_INT 2
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40361: LD_ADDR_VAR 0 58
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 0
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 1
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 0
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 0
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 1
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 0
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 2
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 2
40496: PUSH
40497: LD_INT 2
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: LD_INT 2
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: LD_INT 2
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 2
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 2
40560: NEG
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: LIST
40580: LIST
40581: LIST
40582: LIST
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40591: LD_ADDR_VAR 0 59
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: EMPTY
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40679: LD_ADDR_VAR 0 60
40683: PUSH
40684: LD_INT 0
40686: PUSH
40687: LD_INT 0
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: PUSH
40718: LD_INT 1
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: LD_INT 1
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: NEG
40749: PUSH
40750: LD_INT 1
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40767: LD_ADDR_VAR 0 61
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 0
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: NEG
40837: PUSH
40838: LD_INT 1
40840: NEG
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40855: LD_ADDR_VAR 0 62
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 1
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 1
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 0
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 1
40924: NEG
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40943: LD_ADDR_VAR 0 63
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: LD_INT 1
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41031: LD_ADDR_VAR 0 64
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 1
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 0
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 1
41100: NEG
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: ST_TO_ADDR
// end ; 1 :
41119: GO 47016
41121: LD_INT 1
41123: DOUBLE
41124: EQUAL
41125: IFTRUE 41129
41127: GO 43752
41129: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41130: LD_ADDR_VAR 0 11
41134: PUSH
41135: LD_INT 1
41137: NEG
41138: PUSH
41139: LD_INT 3
41141: NEG
41142: PUSH
41143: EMPTY
41144: LIST
41145: LIST
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41174: LD_ADDR_VAR 0 12
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 3
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 3
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: LIST
41214: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41215: LD_ADDR_VAR 0 13
41219: PUSH
41220: LD_INT 3
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 3
41232: PUSH
41233: LD_INT 3
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: LD_INT 3
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: LIST
41254: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41255: LD_ADDR_VAR 0 14
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 3
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 0
41272: PUSH
41273: LD_INT 3
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: NEG
41283: PUSH
41284: LD_INT 2
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41296: LD_ADDR_VAR 0 15
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 3
41314: NEG
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41340: LD_ADDR_VAR 0 16
41344: PUSH
41345: LD_INT 2
41347: NEG
41348: PUSH
41349: LD_INT 3
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 3
41359: NEG
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: NEG
41372: PUSH
41373: LD_INT 3
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: LIST
41385: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41386: LD_ADDR_VAR 0 17
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41430: LD_ADDR_VAR 0 18
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 1
41440: NEG
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: LD_INT 1
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41471: LD_ADDR_VAR 0 19
41475: PUSH
41476: LD_INT 3
41478: PUSH
41479: LD_INT 2
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: PUSH
41489: LD_INT 3
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 3
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41511: LD_ADDR_VAR 0 20
41515: PUSH
41516: LD_INT 1
41518: PUSH
41519: LD_INT 3
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 0
41528: PUSH
41529: LD_INT 3
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41552: LD_ADDR_VAR 0 21
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 3
41570: NEG
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 3
41581: NEG
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41596: LD_ADDR_VAR 0 22
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: LD_INT 3
41607: NEG
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 3
41615: NEG
41616: PUSH
41617: LD_INT 2
41619: NEG
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 3
41627: NEG
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41642: LD_ADDR_VAR 0 23
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: LD_INT 3
41652: NEG
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: LD_INT 4
41664: NEG
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 1
41672: PUSH
41673: LD_INT 3
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41686: LD_ADDR_VAR 0 24
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 3
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 4
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41727: LD_ADDR_VAR 0 25
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: LD_INT 3
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 4
41744: PUSH
41745: LD_INT 3
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 3
41754: PUSH
41755: LD_INT 4
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: LIST
41766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41767: LD_ADDR_VAR 0 26
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: LD_INT 4
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 3
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41808: LD_ADDR_VAR 0 27
41812: PUSH
41813: LD_INT 3
41815: NEG
41816: PUSH
41817: LD_INT 0
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 3
41826: NEG
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 4
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41852: LD_ADDR_VAR 0 28
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: LD_INT 3
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: NEG
41872: PUSH
41873: LD_INT 4
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 4
41883: NEG
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41898: LD_ADDR_VAR 0 29
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 3
41909: NEG
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 3
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: NEG
41940: PUSH
41941: LD_INT 4
41943: NEG
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: LD_INT 4
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 3
41965: NEG
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: NEG
41974: PUSH
41975: LD_INT 5
41977: NEG
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 5
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 4
41999: NEG
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 6
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 6
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 5
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42053: LD_ADDR_VAR 0 30
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 3
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: LD_INT 4
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 4
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 4
42122: PUSH
42123: LD_INT 1
42125: NEG
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 5
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 5
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 5
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 6
42164: PUSH
42165: LD_INT 0
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 6
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42196: LD_ADDR_VAR 0 31
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: LD_INT 2
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: LD_INT 3
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: PUSH
42224: LD_INT 3
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 4
42233: PUSH
42234: LD_INT 3
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 4
42243: PUSH
42244: LD_INT 4
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 3
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 5
42263: PUSH
42264: LD_INT 4
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_INT 5
42273: PUSH
42274: LD_INT 5
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 4
42283: PUSH
42284: LD_INT 5
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 6
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 6
42303: PUSH
42304: LD_INT 6
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 5
42313: PUSH
42314: LD_INT 6
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42335: LD_ADDR_VAR 0 32
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 3
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 2
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 4
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 4
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 3
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 5
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 5
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 4
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 1
42435: PUSH
42436: LD_INT 6
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 6
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 1
42455: NEG
42456: PUSH
42457: LD_INT 5
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42478: LD_ADDR_VAR 0 33
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 3
42496: NEG
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 3
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 4
42530: NEG
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 4
42541: NEG
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 4
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 5
42564: NEG
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 5
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 5
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 6
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 6
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42633: LD_ADDR_VAR 0 34
42637: PUSH
42638: LD_INT 2
42640: NEG
42641: PUSH
42642: LD_INT 3
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 3
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 3
42664: NEG
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 3
42676: NEG
42677: PUSH
42678: LD_INT 4
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 4
42688: NEG
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 4
42700: NEG
42701: PUSH
42702: LD_INT 4
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 4
42712: NEG
42713: PUSH
42714: LD_INT 5
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 5
42724: NEG
42725: PUSH
42726: LD_INT 4
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 5
42736: NEG
42737: PUSH
42738: LD_INT 5
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 5
42748: NEG
42749: PUSH
42750: LD_INT 6
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 6
42760: NEG
42761: PUSH
42762: LD_INT 5
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 6
42772: NEG
42773: PUSH
42774: LD_INT 6
42776: NEG
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42796: LD_ADDR_VAR 0 41
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 1
42814: NEG
42815: PUSH
42816: LD_INT 3
42818: NEG
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 2
42829: NEG
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42840: LD_ADDR_VAR 0 42
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: LIST
42880: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42881: LD_ADDR_VAR 0 43
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: PUSH
42909: LD_INT 3
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: LIST
42920: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42921: LD_ADDR_VAR 0 44
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 2
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: PUSH
42939: LD_INT 3
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 2
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42962: LD_ADDR_VAR 0 45
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 3
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43006: LD_ADDR_VAR 0 46
43010: PUSH
43011: LD_INT 2
43013: NEG
43014: PUSH
43015: LD_INT 2
43017: NEG
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: LD_INT 3
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 3
43037: NEG
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43052: LD_ADDR_VAR 0 47
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: LD_INT 3
43063: NEG
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 1
43071: NEG
43072: PUSH
43073: LD_INT 3
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43085: LD_ADDR_VAR 0 48
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 2
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: PUSH
43104: LD_INT 1
43106: NEG
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43116: LD_ADDR_VAR 0 49
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43145: LD_ADDR_VAR 0 50
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: LD_INT 3
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43174: LD_ADDR_VAR 0 51
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43205: LD_ADDR_VAR 0 52
43209: PUSH
43210: LD_INT 3
43212: NEG
43213: PUSH
43214: LD_INT 1
43216: NEG
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 3
43224: NEG
43225: PUSH
43226: LD_INT 2
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43238: LD_ADDR_VAR 0 53
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 3
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 3
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 2
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43282: LD_ADDR_VAR 0 54
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 1
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 3
43300: PUSH
43301: LD_INT 0
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 3
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43323: LD_ADDR_VAR 0 55
43327: PUSH
43328: LD_INT 3
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 3
43340: PUSH
43341: LD_INT 3
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: PUSH
43348: LD_INT 2
43350: PUSH
43351: LD_INT 3
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: LIST
43362: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43363: LD_ADDR_VAR 0 56
43367: PUSH
43368: LD_INT 1
43370: PUSH
43371: LD_INT 3
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 3
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43404: LD_ADDR_VAR 0 57
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 1
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 3
43422: NEG
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: NEG
43434: PUSH
43435: LD_INT 1
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43448: LD_ADDR_VAR 0 58
43452: PUSH
43453: LD_INT 2
43455: NEG
43456: PUSH
43457: LD_INT 3
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 3
43467: NEG
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 3
43479: NEG
43480: PUSH
43481: LD_INT 3
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43494: LD_ADDR_VAR 0 59
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 2
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 2
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: LIST
43537: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43538: LD_ADDR_VAR 0 60
43542: PUSH
43543: LD_INT 1
43545: PUSH
43546: LD_INT 1
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: LD_INT 0
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: LD_INT 1
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: LIST
43578: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43579: LD_ADDR_VAR 0 61
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43619: LD_ADDR_VAR 0 62
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43660: LD_ADDR_VAR 0 63
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: LD_INT 0
43682: PUSH
43683: EMPTY
43684: LIST
43685: LIST
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: LIST
43703: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43704: LD_ADDR_VAR 0 64
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: LD_INT 2
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: LIST
43749: ST_TO_ADDR
// end ; 2 :
43750: GO 47016
43752: LD_INT 2
43754: DOUBLE
43755: EQUAL
43756: IFTRUE 43760
43758: GO 47015
43760: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43761: LD_ADDR_VAR 0 29
43765: PUSH
43766: LD_INT 4
43768: PUSH
43769: LD_INT 0
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 4
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 5
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 5
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 4
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 0
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 1
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 5
43851: PUSH
43852: LD_INT 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 3
43861: PUSH
43862: LD_INT 3
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 3
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 4
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 4
43891: PUSH
43892: LD_INT 4
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: LD_INT 4
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 2
43911: PUSH
43912: LD_INT 3
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 2
43921: PUSH
43922: LD_INT 2
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 4
43931: PUSH
43932: LD_INT 2
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: LD_INT 4
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 4
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 3
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 4
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 5
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 5
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 4
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 3
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 5
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: LD_INT 3
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 3
44044: NEG
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 3
44089: NEG
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 4
44100: NEG
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 4
44111: NEG
44112: PUSH
44113: LD_INT 1
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 4
44123: NEG
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 4
44146: NEG
44147: PUSH
44148: LD_INT 4
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 4
44158: NEG
44159: PUSH
44160: LD_INT 5
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 3
44170: NEG
44171: PUSH
44172: LD_INT 4
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 3
44182: NEG
44183: PUSH
44184: LD_INT 3
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 4
44194: NEG
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 5
44206: NEG
44207: PUSH
44208: LD_INT 4
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 5
44218: NEG
44219: PUSH
44220: LD_INT 5
44222: NEG
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 3
44230: NEG
44231: PUSH
44232: LD_INT 5
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 5
44242: NEG
44243: PUSH
44244: LD_INT 3
44246: NEG
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44299: LD_ADDR_VAR 0 30
44303: PUSH
44304: LD_INT 4
44306: PUSH
44307: LD_INT 4
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 4
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 5
44326: PUSH
44327: LD_INT 4
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 5
44336: PUSH
44337: LD_INT 5
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 4
44346: PUSH
44347: LD_INT 5
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 3
44356: PUSH
44357: LD_INT 4
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 3
44366: PUSH
44367: LD_INT 3
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 5
44376: PUSH
44377: LD_INT 3
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: LD_INT 5
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 3
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: PUSH
44417: LD_INT 3
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 1
44426: PUSH
44427: LD_INT 4
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: LD_INT 0
44436: PUSH
44437: LD_INT 4
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: NEG
44447: PUSH
44448: LD_INT 3
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: LD_INT 4
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 4
44489: NEG
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 4
44500: NEG
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 3
44512: NEG
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 3
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 4
44534: NEG
44535: PUSH
44536: LD_INT 1
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 5
44545: NEG
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 5
44556: NEG
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 5
44568: NEG
44569: PUSH
44570: LD_INT 2
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 3
44580: NEG
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: NEG
44592: PUSH
44593: LD_INT 3
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: NEG
44604: PUSH
44605: LD_INT 4
44607: NEG
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 3
44619: NEG
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 2
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 3
44639: NEG
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 4
44651: NEG
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 4
44663: NEG
44664: PUSH
44665: LD_INT 4
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 4
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 4
44687: NEG
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: LD_INT 4
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 5
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 1
44721: PUSH
44722: LD_INT 4
44724: NEG
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: PUSH
44733: LD_INT 3
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: LD_INT 3
44746: NEG
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 1
44754: NEG
44755: PUSH
44756: LD_INT 4
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 5
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: PUSH
44779: LD_INT 3
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: NEG
44790: PUSH
44791: LD_INT 5
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: LIST
44809: LIST
44810: LIST
44811: LIST
44812: LIST
44813: LIST
44814: LIST
44815: LIST
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44846: LD_ADDR_VAR 0 31
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 4
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 4
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 5
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: LD_INT 5
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: LD_INT 4
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 3
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: LD_INT 5
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: NEG
44936: PUSH
44937: LD_INT 3
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 3
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 3
44991: NEG
44992: PUSH
44993: LD_INT 1
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 4
45002: NEG
45003: PUSH
45004: LD_INT 0
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 4
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 4
45025: NEG
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 2
45037: NEG
45038: PUSH
45039: LD_INT 2
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 4
45048: NEG
45049: PUSH
45050: LD_INT 4
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 4
45060: NEG
45061: PUSH
45062: LD_INT 5
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 3
45072: NEG
45073: PUSH
45074: LD_INT 4
45076: NEG
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 3
45084: NEG
45085: PUSH
45086: LD_INT 3
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 4
45096: NEG
45097: PUSH
45098: LD_INT 3
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 5
45108: NEG
45109: PUSH
45110: LD_INT 4
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 5
45120: NEG
45121: PUSH
45122: LD_INT 5
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 3
45132: NEG
45133: PUSH
45134: LD_INT 5
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 5
45144: NEG
45145: PUSH
45146: LD_INT 3
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 0
45167: PUSH
45168: LD_INT 4
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: LD_INT 3
45181: NEG
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 2
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 3
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: NEG
45224: PUSH
45225: LD_INT 4
45227: NEG
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 2
45246: NEG
45247: PUSH
45248: LD_INT 4
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 4
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 5
45279: PUSH
45280: LD_INT 0
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 5
45289: PUSH
45290: LD_INT 1
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 4
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 0
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: LD_INT 1
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 3
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 5
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45396: LD_ADDR_VAR 0 32
45400: PUSH
45401: LD_INT 4
45403: NEG
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 4
45414: NEG
45415: PUSH
45416: LD_INT 1
45418: NEG
45419: PUSH
45420: EMPTY
45421: LIST
45422: LIST
45423: PUSH
45424: LD_INT 3
45426: NEG
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 3
45437: NEG
45438: PUSH
45439: LD_INT 1
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 4
45448: NEG
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 5
45459: NEG
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 5
45470: NEG
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 5
45482: NEG
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 3
45494: NEG
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: NEG
45506: PUSH
45507: LD_INT 3
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 3
45517: NEG
45518: PUSH
45519: LD_INT 4
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 2
45529: NEG
45530: PUSH
45531: LD_INT 3
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: NEG
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: LD_INT 2
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 4
45565: NEG
45566: PUSH
45567: LD_INT 3
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 4
45577: NEG
45578: PUSH
45579: LD_INT 4
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: LD_INT 4
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 4
45601: NEG
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 4
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 5
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: LD_INT 4
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 4
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 5
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: LD_INT 3
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 5
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 3
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 4
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 4
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 3
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 4
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 4
45808: PUSH
45809: LD_INT 4
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 4
45818: PUSH
45819: LD_INT 3
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 5
45828: PUSH
45829: LD_INT 4
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 5
45838: PUSH
45839: LD_INT 5
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 4
45848: PUSH
45849: LD_INT 5
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: PUSH
45859: LD_INT 4
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 3
45868: PUSH
45869: LD_INT 3
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 5
45878: PUSH
45879: LD_INT 3
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: LD_INT 5
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45943: LD_ADDR_VAR 0 33
45947: PUSH
45948: LD_INT 4
45950: NEG
45951: PUSH
45952: LD_INT 4
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 4
45962: NEG
45963: PUSH
45964: LD_INT 5
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 3
45974: NEG
45975: PUSH
45976: LD_INT 4
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: LD_INT 3
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 4
45998: NEG
45999: PUSH
46000: LD_INT 3
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 5
46010: NEG
46011: PUSH
46012: LD_INT 4
46014: NEG
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 5
46022: NEG
46023: PUSH
46024: LD_INT 5
46026: NEG
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 3
46034: NEG
46035: PUSH
46036: LD_INT 5
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 5
46046: NEG
46047: PUSH
46048: LD_INT 3
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 4
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 2
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 4
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: NEG
46149: PUSH
46150: LD_INT 4
46152: NEG
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 4
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 4
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 5
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 5
46191: PUSH
46192: LD_INT 1
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 4
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 3
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 3
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 5
46243: PUSH
46244: LD_INT 2
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: LD_INT 3
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 3
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 4
46273: PUSH
46274: LD_INT 3
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 4
46283: PUSH
46284: LD_INT 4
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 3
46293: PUSH
46294: LD_INT 4
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 2
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 4
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 4
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 0
46343: PUSH
46344: LD_INT 4
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: LD_INT 3
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 4
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 5
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 5
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 1
46393: NEG
46394: PUSH
46395: LD_INT 4
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: NEG
46405: PUSH
46406: LD_INT 3
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 2
46415: PUSH
46416: LD_INT 5
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: LD_INT 3
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46481: LD_ADDR_VAR 0 34
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 4
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 5
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: LD_INT 4
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 3
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 1
46543: NEG
46544: PUSH
46545: LD_INT 4
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 5
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 5
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 4
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 4
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 3
46631: PUSH
46632: LD_INT 1
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 2
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: PUSH
46652: LD_INT 1
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 4
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 4
46683: PUSH
46684: LD_INT 4
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 4
46693: PUSH
46694: LD_INT 3
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 5
46703: PUSH
46704: LD_INT 4
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 5
46713: PUSH
46714: LD_INT 5
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 4
46723: PUSH
46724: LD_INT 5
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: PUSH
46734: LD_INT 4
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 3
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 5
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: LD_INT 5
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 0
46773: PUSH
46774: LD_INT 3
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 2
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 3
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 4
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 4
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: LD_INT 4
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 2
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 4
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 4
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: LD_INT 0
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: LD_INT 1
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 4
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 5
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 5
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 5
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 3
46957: NEG
46958: PUSH
46959: LD_INT 2
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: ST_TO_ADDR
// end ; end ;
47013: GO 47016
47015: POP
// case btype of b_depot , b_warehouse :
47016: LD_VAR 0 1
47020: PUSH
47021: LD_INT 0
47023: DOUBLE
47024: EQUAL
47025: IFTRUE 47035
47027: LD_INT 1
47029: DOUBLE
47030: EQUAL
47031: IFTRUE 47035
47033: GO 47236
47035: POP
// case nation of nation_american :
47036: LD_VAR 0 5
47040: PUSH
47041: LD_INT 1
47043: DOUBLE
47044: EQUAL
47045: IFTRUE 47049
47047: GO 47105
47049: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47050: LD_ADDR_VAR 0 9
47054: PUSH
47055: LD_VAR 0 11
47059: PUSH
47060: LD_VAR 0 12
47064: PUSH
47065: LD_VAR 0 13
47069: PUSH
47070: LD_VAR 0 14
47074: PUSH
47075: LD_VAR 0 15
47079: PUSH
47080: LD_VAR 0 16
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: PUSH
47093: LD_VAR 0 4
47097: PUSH
47098: LD_INT 1
47100: PLUS
47101: ARRAY
47102: ST_TO_ADDR
47103: GO 47234
47105: LD_INT 2
47107: DOUBLE
47108: EQUAL
47109: IFTRUE 47113
47111: GO 47169
47113: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47114: LD_ADDR_VAR 0 9
47118: PUSH
47119: LD_VAR 0 17
47123: PUSH
47124: LD_VAR 0 18
47128: PUSH
47129: LD_VAR 0 19
47133: PUSH
47134: LD_VAR 0 20
47138: PUSH
47139: LD_VAR 0 21
47143: PUSH
47144: LD_VAR 0 22
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: PUSH
47157: LD_VAR 0 4
47161: PUSH
47162: LD_INT 1
47164: PLUS
47165: ARRAY
47166: ST_TO_ADDR
47167: GO 47234
47169: LD_INT 3
47171: DOUBLE
47172: EQUAL
47173: IFTRUE 47177
47175: GO 47233
47177: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47178: LD_ADDR_VAR 0 9
47182: PUSH
47183: LD_VAR 0 23
47187: PUSH
47188: LD_VAR 0 24
47192: PUSH
47193: LD_VAR 0 25
47197: PUSH
47198: LD_VAR 0 26
47202: PUSH
47203: LD_VAR 0 27
47207: PUSH
47208: LD_VAR 0 28
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: PUSH
47221: LD_VAR 0 4
47225: PUSH
47226: LD_INT 1
47228: PLUS
47229: ARRAY
47230: ST_TO_ADDR
47231: GO 47234
47233: POP
47234: GO 47789
47236: LD_INT 2
47238: DOUBLE
47239: EQUAL
47240: IFTRUE 47250
47242: LD_INT 3
47244: DOUBLE
47245: EQUAL
47246: IFTRUE 47250
47248: GO 47306
47250: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47251: LD_ADDR_VAR 0 9
47255: PUSH
47256: LD_VAR 0 29
47260: PUSH
47261: LD_VAR 0 30
47265: PUSH
47266: LD_VAR 0 31
47270: PUSH
47271: LD_VAR 0 32
47275: PUSH
47276: LD_VAR 0 33
47280: PUSH
47281: LD_VAR 0 34
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: PUSH
47294: LD_VAR 0 4
47298: PUSH
47299: LD_INT 1
47301: PLUS
47302: ARRAY
47303: ST_TO_ADDR
47304: GO 47789
47306: LD_INT 16
47308: DOUBLE
47309: EQUAL
47310: IFTRUE 47368
47312: LD_INT 17
47314: DOUBLE
47315: EQUAL
47316: IFTRUE 47368
47318: LD_INT 18
47320: DOUBLE
47321: EQUAL
47322: IFTRUE 47368
47324: LD_INT 19
47326: DOUBLE
47327: EQUAL
47328: IFTRUE 47368
47330: LD_INT 22
47332: DOUBLE
47333: EQUAL
47334: IFTRUE 47368
47336: LD_INT 20
47338: DOUBLE
47339: EQUAL
47340: IFTRUE 47368
47342: LD_INT 21
47344: DOUBLE
47345: EQUAL
47346: IFTRUE 47368
47348: LD_INT 23
47350: DOUBLE
47351: EQUAL
47352: IFTRUE 47368
47354: LD_INT 24
47356: DOUBLE
47357: EQUAL
47358: IFTRUE 47368
47360: LD_INT 25
47362: DOUBLE
47363: EQUAL
47364: IFTRUE 47368
47366: GO 47424
47368: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47369: LD_ADDR_VAR 0 9
47373: PUSH
47374: LD_VAR 0 35
47378: PUSH
47379: LD_VAR 0 36
47383: PUSH
47384: LD_VAR 0 37
47388: PUSH
47389: LD_VAR 0 38
47393: PUSH
47394: LD_VAR 0 39
47398: PUSH
47399: LD_VAR 0 40
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: PUSH
47412: LD_VAR 0 4
47416: PUSH
47417: LD_INT 1
47419: PLUS
47420: ARRAY
47421: ST_TO_ADDR
47422: GO 47789
47424: LD_INT 6
47426: DOUBLE
47427: EQUAL
47428: IFTRUE 47480
47430: LD_INT 7
47432: DOUBLE
47433: EQUAL
47434: IFTRUE 47480
47436: LD_INT 8
47438: DOUBLE
47439: EQUAL
47440: IFTRUE 47480
47442: LD_INT 13
47444: DOUBLE
47445: EQUAL
47446: IFTRUE 47480
47448: LD_INT 12
47450: DOUBLE
47451: EQUAL
47452: IFTRUE 47480
47454: LD_INT 15
47456: DOUBLE
47457: EQUAL
47458: IFTRUE 47480
47460: LD_INT 11
47462: DOUBLE
47463: EQUAL
47464: IFTRUE 47480
47466: LD_INT 14
47468: DOUBLE
47469: EQUAL
47470: IFTRUE 47480
47472: LD_INT 10
47474: DOUBLE
47475: EQUAL
47476: IFTRUE 47480
47478: GO 47536
47480: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47481: LD_ADDR_VAR 0 9
47485: PUSH
47486: LD_VAR 0 41
47490: PUSH
47491: LD_VAR 0 42
47495: PUSH
47496: LD_VAR 0 43
47500: PUSH
47501: LD_VAR 0 44
47505: PUSH
47506: LD_VAR 0 45
47510: PUSH
47511: LD_VAR 0 46
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: PUSH
47524: LD_VAR 0 4
47528: PUSH
47529: LD_INT 1
47531: PLUS
47532: ARRAY
47533: ST_TO_ADDR
47534: GO 47789
47536: LD_INT 36
47538: DOUBLE
47539: EQUAL
47540: IFTRUE 47544
47542: GO 47600
47544: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47545: LD_ADDR_VAR 0 9
47549: PUSH
47550: LD_VAR 0 47
47554: PUSH
47555: LD_VAR 0 48
47559: PUSH
47560: LD_VAR 0 49
47564: PUSH
47565: LD_VAR 0 50
47569: PUSH
47570: LD_VAR 0 51
47574: PUSH
47575: LD_VAR 0 52
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: PUSH
47588: LD_VAR 0 4
47592: PUSH
47593: LD_INT 1
47595: PLUS
47596: ARRAY
47597: ST_TO_ADDR
47598: GO 47789
47600: LD_INT 4
47602: DOUBLE
47603: EQUAL
47604: IFTRUE 47626
47606: LD_INT 5
47608: DOUBLE
47609: EQUAL
47610: IFTRUE 47626
47612: LD_INT 34
47614: DOUBLE
47615: EQUAL
47616: IFTRUE 47626
47618: LD_INT 37
47620: DOUBLE
47621: EQUAL
47622: IFTRUE 47626
47624: GO 47682
47626: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47627: LD_ADDR_VAR 0 9
47631: PUSH
47632: LD_VAR 0 53
47636: PUSH
47637: LD_VAR 0 54
47641: PUSH
47642: LD_VAR 0 55
47646: PUSH
47647: LD_VAR 0 56
47651: PUSH
47652: LD_VAR 0 57
47656: PUSH
47657: LD_VAR 0 58
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: PUSH
47670: LD_VAR 0 4
47674: PUSH
47675: LD_INT 1
47677: PLUS
47678: ARRAY
47679: ST_TO_ADDR
47680: GO 47789
47682: LD_INT 31
47684: DOUBLE
47685: EQUAL
47686: IFTRUE 47732
47688: LD_INT 32
47690: DOUBLE
47691: EQUAL
47692: IFTRUE 47732
47694: LD_INT 33
47696: DOUBLE
47697: EQUAL
47698: IFTRUE 47732
47700: LD_INT 27
47702: DOUBLE
47703: EQUAL
47704: IFTRUE 47732
47706: LD_INT 26
47708: DOUBLE
47709: EQUAL
47710: IFTRUE 47732
47712: LD_INT 28
47714: DOUBLE
47715: EQUAL
47716: IFTRUE 47732
47718: LD_INT 29
47720: DOUBLE
47721: EQUAL
47722: IFTRUE 47732
47724: LD_INT 30
47726: DOUBLE
47727: EQUAL
47728: IFTRUE 47732
47730: GO 47788
47732: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47733: LD_ADDR_VAR 0 9
47737: PUSH
47738: LD_VAR 0 59
47742: PUSH
47743: LD_VAR 0 60
47747: PUSH
47748: LD_VAR 0 61
47752: PUSH
47753: LD_VAR 0 62
47757: PUSH
47758: LD_VAR 0 63
47762: PUSH
47763: LD_VAR 0 64
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: PUSH
47776: LD_VAR 0 4
47780: PUSH
47781: LD_INT 1
47783: PLUS
47784: ARRAY
47785: ST_TO_ADDR
47786: GO 47789
47788: POP
// temp_list2 = [ ] ;
47789: LD_ADDR_VAR 0 10
47793: PUSH
47794: EMPTY
47795: ST_TO_ADDR
// for i in temp_list do
47796: LD_ADDR_VAR 0 8
47800: PUSH
47801: LD_VAR 0 9
47805: PUSH
47806: FOR_IN
47807: IFFALSE 47859
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47809: LD_ADDR_VAR 0 10
47813: PUSH
47814: LD_VAR 0 10
47818: PUSH
47819: LD_VAR 0 8
47823: PUSH
47824: LD_INT 1
47826: ARRAY
47827: PUSH
47828: LD_VAR 0 2
47832: PLUS
47833: PUSH
47834: LD_VAR 0 8
47838: PUSH
47839: LD_INT 2
47841: ARRAY
47842: PUSH
47843: LD_VAR 0 3
47847: PLUS
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: ADD
47856: ST_TO_ADDR
47857: GO 47806
47859: POP
47860: POP
// result = temp_list2 ;
47861: LD_ADDR_VAR 0 7
47865: PUSH
47866: LD_VAR 0 10
47870: ST_TO_ADDR
// end ;
47871: LD_VAR 0 7
47875: RET
// export function EnemyInRange ( unit , dist ) ; begin
47876: LD_INT 0
47878: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47879: LD_ADDR_VAR 0 3
47883: PUSH
47884: LD_VAR 0 1
47888: PPUSH
47889: CALL_OW 255
47893: PPUSH
47894: LD_VAR 0 1
47898: PPUSH
47899: CALL_OW 250
47903: PPUSH
47904: LD_VAR 0 1
47908: PPUSH
47909: CALL_OW 251
47913: PPUSH
47914: LD_VAR 0 2
47918: PPUSH
47919: CALL 21249 0 4
47923: PUSH
47924: LD_INT 4
47926: ARRAY
47927: ST_TO_ADDR
// end ;
47928: LD_VAR 0 3
47932: RET
// export function PlayerSeeMe ( unit ) ; begin
47933: LD_INT 0
47935: PPUSH
// result := See ( your_side , unit ) ;
47936: LD_ADDR_VAR 0 2
47940: PUSH
47941: LD_OWVAR 2
47945: PPUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL_OW 292
47955: ST_TO_ADDR
// end ;
47956: LD_VAR 0 2
47960: RET
// export function ReverseDir ( unit ) ; begin
47961: LD_INT 0
47963: PPUSH
// if not unit then
47964: LD_VAR 0 1
47968: NOT
47969: IFFALSE 47973
// exit ;
47971: GO 47996
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
47973: LD_ADDR_VAR 0 2
47977: PUSH
47978: LD_VAR 0 1
47982: PPUSH
47983: CALL_OW 254
47987: PUSH
47988: LD_INT 3
47990: PLUS
47991: PUSH
47992: LD_INT 6
47994: MOD
47995: ST_TO_ADDR
// end ;
47996: LD_VAR 0 2
48000: RET
// export function ReverseArray ( array ) ; var i ; begin
48001: LD_INT 0
48003: PPUSH
48004: PPUSH
// if not array then
48005: LD_VAR 0 1
48009: NOT
48010: IFFALSE 48014
// exit ;
48012: GO 48069
// result := [ ] ;
48014: LD_ADDR_VAR 0 2
48018: PUSH
48019: EMPTY
48020: ST_TO_ADDR
// for i := array downto 1 do
48021: LD_ADDR_VAR 0 3
48025: PUSH
48026: DOUBLE
48027: LD_VAR 0 1
48031: INC
48032: ST_TO_ADDR
48033: LD_INT 1
48035: PUSH
48036: FOR_DOWNTO
48037: IFFALSE 48067
// result := Join ( result , array [ i ] ) ;
48039: LD_ADDR_VAR 0 2
48043: PUSH
48044: LD_VAR 0 2
48048: PPUSH
48049: LD_VAR 0 1
48053: PUSH
48054: LD_VAR 0 3
48058: ARRAY
48059: PPUSH
48060: CALL 52714 0 2
48064: ST_TO_ADDR
48065: GO 48036
48067: POP
48068: POP
// end ;
48069: LD_VAR 0 2
48073: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48074: LD_INT 0
48076: PPUSH
48077: PPUSH
48078: PPUSH
48079: PPUSH
48080: PPUSH
48081: PPUSH
// if not unit or not hexes then
48082: LD_VAR 0 1
48086: NOT
48087: PUSH
48088: LD_VAR 0 2
48092: NOT
48093: OR
48094: IFFALSE 48098
// exit ;
48096: GO 48221
// dist := 9999 ;
48098: LD_ADDR_VAR 0 5
48102: PUSH
48103: LD_INT 9999
48105: ST_TO_ADDR
// for i = 1 to hexes do
48106: LD_ADDR_VAR 0 4
48110: PUSH
48111: DOUBLE
48112: LD_INT 1
48114: DEC
48115: ST_TO_ADDR
48116: LD_VAR 0 2
48120: PUSH
48121: FOR_TO
48122: IFFALSE 48209
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48124: LD_ADDR_VAR 0 6
48128: PUSH
48129: LD_VAR 0 1
48133: PPUSH
48134: LD_VAR 0 2
48138: PUSH
48139: LD_VAR 0 4
48143: ARRAY
48144: PUSH
48145: LD_INT 1
48147: ARRAY
48148: PPUSH
48149: LD_VAR 0 2
48153: PUSH
48154: LD_VAR 0 4
48158: ARRAY
48159: PUSH
48160: LD_INT 2
48162: ARRAY
48163: PPUSH
48164: CALL_OW 297
48168: ST_TO_ADDR
// if tdist < dist then
48169: LD_VAR 0 6
48173: PUSH
48174: LD_VAR 0 5
48178: LESS
48179: IFFALSE 48207
// begin hex := hexes [ i ] ;
48181: LD_ADDR_VAR 0 8
48185: PUSH
48186: LD_VAR 0 2
48190: PUSH
48191: LD_VAR 0 4
48195: ARRAY
48196: ST_TO_ADDR
// dist := tdist ;
48197: LD_ADDR_VAR 0 5
48201: PUSH
48202: LD_VAR 0 6
48206: ST_TO_ADDR
// end ; end ;
48207: GO 48121
48209: POP
48210: POP
// result := hex ;
48211: LD_ADDR_VAR 0 3
48215: PUSH
48216: LD_VAR 0 8
48220: ST_TO_ADDR
// end ;
48221: LD_VAR 0 3
48225: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48226: LD_INT 0
48228: PPUSH
48229: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48230: LD_VAR 0 1
48234: NOT
48235: PUSH
48236: LD_VAR 0 1
48240: PUSH
48241: LD_INT 21
48243: PUSH
48244: LD_INT 2
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 23
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PPUSH
48265: CALL_OW 69
48269: IN
48270: NOT
48271: OR
48272: IFFALSE 48276
// exit ;
48274: GO 48323
// for i = 1 to 3 do
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: DOUBLE
48282: LD_INT 1
48284: DEC
48285: ST_TO_ADDR
48286: LD_INT 3
48288: PUSH
48289: FOR_TO
48290: IFFALSE 48321
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 250
48301: PPUSH
48302: LD_VAR 0 1
48306: PPUSH
48307: CALL_OW 251
48311: PPUSH
48312: LD_INT 1
48314: PPUSH
48315: CALL_OW 453
48319: GO 48289
48321: POP
48322: POP
// end ;
48323: LD_VAR 0 2
48327: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48328: LD_INT 0
48330: PPUSH
48331: PPUSH
48332: PPUSH
48333: PPUSH
48334: PPUSH
48335: PPUSH
// if not unit or not enemy_unit then
48336: LD_VAR 0 1
48340: NOT
48341: PUSH
48342: LD_VAR 0 2
48346: NOT
48347: OR
48348: IFFALSE 48352
// exit ;
48350: GO 48819
// if GetLives ( i ) < 250 then
48352: LD_VAR 0 4
48356: PPUSH
48357: CALL_OW 256
48361: PUSH
48362: LD_INT 250
48364: LESS
48365: IFFALSE 48378
// begin ComAutodestruct ( i ) ;
48367: LD_VAR 0 4
48371: PPUSH
48372: CALL 48226 0 1
// exit ;
48376: GO 48819
// end ; x := GetX ( enemy_unit ) ;
48378: LD_ADDR_VAR 0 7
48382: PUSH
48383: LD_VAR 0 2
48387: PPUSH
48388: CALL_OW 250
48392: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48393: LD_ADDR_VAR 0 8
48397: PUSH
48398: LD_VAR 0 2
48402: PPUSH
48403: CALL_OW 251
48407: ST_TO_ADDR
// if not x or not y then
48408: LD_VAR 0 7
48412: NOT
48413: PUSH
48414: LD_VAR 0 8
48418: NOT
48419: OR
48420: IFFALSE 48424
// exit ;
48422: GO 48819
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48424: LD_ADDR_VAR 0 6
48428: PUSH
48429: LD_VAR 0 7
48433: PPUSH
48434: LD_INT 0
48436: PPUSH
48437: LD_INT 4
48439: PPUSH
48440: CALL_OW 272
48444: PUSH
48445: LD_VAR 0 8
48449: PPUSH
48450: LD_INT 0
48452: PPUSH
48453: LD_INT 4
48455: PPUSH
48456: CALL_OW 273
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_VAR 0 7
48469: PPUSH
48470: LD_INT 1
48472: PPUSH
48473: LD_INT 4
48475: PPUSH
48476: CALL_OW 272
48480: PUSH
48481: LD_VAR 0 8
48485: PPUSH
48486: LD_INT 1
48488: PPUSH
48489: LD_INT 4
48491: PPUSH
48492: CALL_OW 273
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_VAR 0 7
48505: PPUSH
48506: LD_INT 2
48508: PPUSH
48509: LD_INT 4
48511: PPUSH
48512: CALL_OW 272
48516: PUSH
48517: LD_VAR 0 8
48521: PPUSH
48522: LD_INT 2
48524: PPUSH
48525: LD_INT 4
48527: PPUSH
48528: CALL_OW 273
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_VAR 0 7
48541: PPUSH
48542: LD_INT 3
48544: PPUSH
48545: LD_INT 4
48547: PPUSH
48548: CALL_OW 272
48552: PUSH
48553: LD_VAR 0 8
48557: PPUSH
48558: LD_INT 3
48560: PPUSH
48561: LD_INT 4
48563: PPUSH
48564: CALL_OW 273
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_VAR 0 7
48577: PPUSH
48578: LD_INT 4
48580: PPUSH
48581: LD_INT 4
48583: PPUSH
48584: CALL_OW 272
48588: PUSH
48589: LD_VAR 0 8
48593: PPUSH
48594: LD_INT 4
48596: PPUSH
48597: LD_INT 4
48599: PPUSH
48600: CALL_OW 273
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_VAR 0 7
48613: PPUSH
48614: LD_INT 5
48616: PPUSH
48617: LD_INT 4
48619: PPUSH
48620: CALL_OW 272
48624: PUSH
48625: LD_VAR 0 8
48629: PPUSH
48630: LD_INT 5
48632: PPUSH
48633: LD_INT 4
48635: PPUSH
48636: CALL_OW 273
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// for i = tmp downto 1 do
48653: LD_ADDR_VAR 0 4
48657: PUSH
48658: DOUBLE
48659: LD_VAR 0 6
48663: INC
48664: ST_TO_ADDR
48665: LD_INT 1
48667: PUSH
48668: FOR_DOWNTO
48669: IFFALSE 48770
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48671: LD_VAR 0 6
48675: PUSH
48676: LD_VAR 0 4
48680: ARRAY
48681: PUSH
48682: LD_INT 1
48684: ARRAY
48685: PPUSH
48686: LD_VAR 0 6
48690: PUSH
48691: LD_VAR 0 4
48695: ARRAY
48696: PUSH
48697: LD_INT 2
48699: ARRAY
48700: PPUSH
48701: CALL_OW 488
48705: NOT
48706: PUSH
48707: LD_VAR 0 6
48711: PUSH
48712: LD_VAR 0 4
48716: ARRAY
48717: PUSH
48718: LD_INT 1
48720: ARRAY
48721: PPUSH
48722: LD_VAR 0 6
48726: PUSH
48727: LD_VAR 0 4
48731: ARRAY
48732: PUSH
48733: LD_INT 2
48735: ARRAY
48736: PPUSH
48737: CALL_OW 428
48741: PUSH
48742: LD_INT 0
48744: NONEQUAL
48745: OR
48746: IFFALSE 48768
// tmp := Delete ( tmp , i ) ;
48748: LD_ADDR_VAR 0 6
48752: PUSH
48753: LD_VAR 0 6
48757: PPUSH
48758: LD_VAR 0 4
48762: PPUSH
48763: CALL_OW 3
48767: ST_TO_ADDR
48768: GO 48668
48770: POP
48771: POP
// j := GetClosestHex ( unit , tmp ) ;
48772: LD_ADDR_VAR 0 5
48776: PUSH
48777: LD_VAR 0 1
48781: PPUSH
48782: LD_VAR 0 6
48786: PPUSH
48787: CALL 48074 0 2
48791: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48792: LD_VAR 0 1
48796: PPUSH
48797: LD_VAR 0 5
48801: PUSH
48802: LD_INT 1
48804: ARRAY
48805: PPUSH
48806: LD_VAR 0 5
48810: PUSH
48811: LD_INT 2
48813: ARRAY
48814: PPUSH
48815: CALL_OW 111
// end ;
48819: LD_VAR 0 3
48823: RET
// export function PrepareApemanSoldier ( ) ; begin
48824: LD_INT 0
48826: PPUSH
// uc_nation := 0 ;
48827: LD_ADDR_OWVAR 21
48831: PUSH
48832: LD_INT 0
48834: ST_TO_ADDR
// hc_sex := sex_male ;
48835: LD_ADDR_OWVAR 27
48839: PUSH
48840: LD_INT 1
48842: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48843: LD_ADDR_OWVAR 28
48847: PUSH
48848: LD_INT 15
48850: ST_TO_ADDR
// hc_gallery :=  ;
48851: LD_ADDR_OWVAR 33
48855: PUSH
48856: LD_STRING 
48858: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48859: LD_ADDR_OWVAR 31
48863: PUSH
48864: LD_INT 0
48866: PPUSH
48867: LD_INT 3
48869: PPUSH
48870: CALL_OW 12
48874: PUSH
48875: LD_INT 0
48877: PPUSH
48878: LD_INT 3
48880: PPUSH
48881: CALL_OW 12
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// end ;
48898: LD_VAR 0 1
48902: RET
// export function PrepareApemanEngineer ( ) ; begin
48903: LD_INT 0
48905: PPUSH
// uc_nation := 0 ;
48906: LD_ADDR_OWVAR 21
48910: PUSH
48911: LD_INT 0
48913: ST_TO_ADDR
// hc_sex := sex_male ;
48914: LD_ADDR_OWVAR 27
48918: PUSH
48919: LD_INT 1
48921: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
48922: LD_ADDR_OWVAR 28
48926: PUSH
48927: LD_INT 16
48929: ST_TO_ADDR
// hc_gallery :=  ;
48930: LD_ADDR_OWVAR 33
48934: PUSH
48935: LD_STRING 
48937: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48938: LD_ADDR_OWVAR 31
48942: PUSH
48943: LD_INT 0
48945: PPUSH
48946: LD_INT 3
48948: PPUSH
48949: CALL_OW 12
48953: PUSH
48954: LD_INT 0
48956: PPUSH
48957: LD_INT 3
48959: PPUSH
48960: CALL_OW 12
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: ST_TO_ADDR
// end ;
48977: LD_VAR 0 1
48981: RET
// export function PrepareApeman ( agressivity ) ; begin
48982: LD_INT 0
48984: PPUSH
// uc_side := 0 ;
48985: LD_ADDR_OWVAR 20
48989: PUSH
48990: LD_INT 0
48992: ST_TO_ADDR
// uc_nation := 0 ;
48993: LD_ADDR_OWVAR 21
48997: PUSH
48998: LD_INT 0
49000: ST_TO_ADDR
// hc_sex := sex_male ;
49001: LD_ADDR_OWVAR 27
49005: PUSH
49006: LD_INT 1
49008: ST_TO_ADDR
// hc_class := class_apeman ;
49009: LD_ADDR_OWVAR 28
49013: PUSH
49014: LD_INT 12
49016: ST_TO_ADDR
// hc_gallery :=  ;
49017: LD_ADDR_OWVAR 33
49021: PUSH
49022: LD_STRING 
49024: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49025: LD_ADDR_OWVAR 35
49029: PUSH
49030: LD_VAR 0 1
49034: NEG
49035: PPUSH
49036: LD_VAR 0 1
49040: PPUSH
49041: CALL_OW 12
49045: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49046: LD_ADDR_OWVAR 31
49050: PUSH
49051: LD_INT 0
49053: PPUSH
49054: LD_INT 3
49056: PPUSH
49057: CALL_OW 12
49061: PUSH
49062: LD_INT 0
49064: PPUSH
49065: LD_INT 3
49067: PPUSH
49068: CALL_OW 12
49072: PUSH
49073: LD_INT 0
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: ST_TO_ADDR
// end ;
49085: LD_VAR 0 2
49089: RET
// export function PrepareTiger ( agressivity ) ; begin
49090: LD_INT 0
49092: PPUSH
// uc_side := 0 ;
49093: LD_ADDR_OWVAR 20
49097: PUSH
49098: LD_INT 0
49100: ST_TO_ADDR
// uc_nation := 0 ;
49101: LD_ADDR_OWVAR 21
49105: PUSH
49106: LD_INT 0
49108: ST_TO_ADDR
// hc_class := class_tiger ;
49109: LD_ADDR_OWVAR 28
49113: PUSH
49114: LD_INT 14
49116: ST_TO_ADDR
// hc_gallery :=  ;
49117: LD_ADDR_OWVAR 33
49121: PUSH
49122: LD_STRING 
49124: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49125: LD_ADDR_OWVAR 35
49129: PUSH
49130: LD_VAR 0 1
49134: NEG
49135: PPUSH
49136: LD_VAR 0 1
49140: PPUSH
49141: CALL_OW 12
49145: ST_TO_ADDR
// end ;
49146: LD_VAR 0 2
49150: RET
// export function PrepareEnchidna ( ) ; begin
49151: LD_INT 0
49153: PPUSH
// uc_side := 0 ;
49154: LD_ADDR_OWVAR 20
49158: PUSH
49159: LD_INT 0
49161: ST_TO_ADDR
// uc_nation := 0 ;
49162: LD_ADDR_OWVAR 21
49166: PUSH
49167: LD_INT 0
49169: ST_TO_ADDR
// hc_class := class_baggie ;
49170: LD_ADDR_OWVAR 28
49174: PUSH
49175: LD_INT 13
49177: ST_TO_ADDR
// hc_gallery :=  ;
49178: LD_ADDR_OWVAR 33
49182: PUSH
49183: LD_STRING 
49185: ST_TO_ADDR
// end ;
49186: LD_VAR 0 1
49190: RET
// export function PrepareFrog ( ) ; begin
49191: LD_INT 0
49193: PPUSH
// uc_side := 0 ;
49194: LD_ADDR_OWVAR 20
49198: PUSH
49199: LD_INT 0
49201: ST_TO_ADDR
// uc_nation := 0 ;
49202: LD_ADDR_OWVAR 21
49206: PUSH
49207: LD_INT 0
49209: ST_TO_ADDR
// hc_class := class_frog ;
49210: LD_ADDR_OWVAR 28
49214: PUSH
49215: LD_INT 19
49217: ST_TO_ADDR
// hc_gallery :=  ;
49218: LD_ADDR_OWVAR 33
49222: PUSH
49223: LD_STRING 
49225: ST_TO_ADDR
// end ;
49226: LD_VAR 0 1
49230: RET
// export function PrepareFish ( ) ; begin
49231: LD_INT 0
49233: PPUSH
// uc_side := 0 ;
49234: LD_ADDR_OWVAR 20
49238: PUSH
49239: LD_INT 0
49241: ST_TO_ADDR
// uc_nation := 0 ;
49242: LD_ADDR_OWVAR 21
49246: PUSH
49247: LD_INT 0
49249: ST_TO_ADDR
// hc_class := class_fish ;
49250: LD_ADDR_OWVAR 28
49254: PUSH
49255: LD_INT 20
49257: ST_TO_ADDR
// hc_gallery :=  ;
49258: LD_ADDR_OWVAR 33
49262: PUSH
49263: LD_STRING 
49265: ST_TO_ADDR
// end ;
49266: LD_VAR 0 1
49270: RET
// export function PrepareBird ( ) ; begin
49271: LD_INT 0
49273: PPUSH
// uc_side := 0 ;
49274: LD_ADDR_OWVAR 20
49278: PUSH
49279: LD_INT 0
49281: ST_TO_ADDR
// uc_nation := 0 ;
49282: LD_ADDR_OWVAR 21
49286: PUSH
49287: LD_INT 0
49289: ST_TO_ADDR
// hc_class := class_phororhacos ;
49290: LD_ADDR_OWVAR 28
49294: PUSH
49295: LD_INT 18
49297: ST_TO_ADDR
// hc_gallery :=  ;
49298: LD_ADDR_OWVAR 33
49302: PUSH
49303: LD_STRING 
49305: ST_TO_ADDR
// end ;
49306: LD_VAR 0 1
49310: RET
// export function PrepareHorse ( ) ; begin
49311: LD_INT 0
49313: PPUSH
// uc_side := 0 ;
49314: LD_ADDR_OWVAR 20
49318: PUSH
49319: LD_INT 0
49321: ST_TO_ADDR
// uc_nation := 0 ;
49322: LD_ADDR_OWVAR 21
49326: PUSH
49327: LD_INT 0
49329: ST_TO_ADDR
// hc_class := class_horse ;
49330: LD_ADDR_OWVAR 28
49334: PUSH
49335: LD_INT 21
49337: ST_TO_ADDR
// hc_gallery :=  ;
49338: LD_ADDR_OWVAR 33
49342: PUSH
49343: LD_STRING 
49345: ST_TO_ADDR
// end ;
49346: LD_VAR 0 1
49350: RET
// export function PrepareMastodont ( ) ; begin
49351: LD_INT 0
49353: PPUSH
// uc_side := 0 ;
49354: LD_ADDR_OWVAR 20
49358: PUSH
49359: LD_INT 0
49361: ST_TO_ADDR
// uc_nation := 0 ;
49362: LD_ADDR_OWVAR 21
49366: PUSH
49367: LD_INT 0
49369: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49370: LD_ADDR_OWVAR 37
49374: PUSH
49375: LD_INT 31
49377: ST_TO_ADDR
// vc_control := control_rider ;
49378: LD_ADDR_OWVAR 38
49382: PUSH
49383: LD_INT 4
49385: ST_TO_ADDR
// end ;
49386: LD_VAR 0 1
49390: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49391: LD_INT 0
49393: PPUSH
49394: PPUSH
49395: PPUSH
// uc_side = 0 ;
49396: LD_ADDR_OWVAR 20
49400: PUSH
49401: LD_INT 0
49403: ST_TO_ADDR
// uc_nation = 0 ;
49404: LD_ADDR_OWVAR 21
49408: PUSH
49409: LD_INT 0
49411: ST_TO_ADDR
// InitHc_All ( ) ;
49412: CALL_OW 584
// InitVc ;
49416: CALL_OW 20
// if mastodonts then
49420: LD_VAR 0 6
49424: IFFALSE 49491
// for i = 1 to mastodonts do
49426: LD_ADDR_VAR 0 11
49430: PUSH
49431: DOUBLE
49432: LD_INT 1
49434: DEC
49435: ST_TO_ADDR
49436: LD_VAR 0 6
49440: PUSH
49441: FOR_TO
49442: IFFALSE 49489
// begin vc_chassis := 31 ;
49444: LD_ADDR_OWVAR 37
49448: PUSH
49449: LD_INT 31
49451: ST_TO_ADDR
// vc_control := control_rider ;
49452: LD_ADDR_OWVAR 38
49456: PUSH
49457: LD_INT 4
49459: ST_TO_ADDR
// animal := CreateVehicle ;
49460: LD_ADDR_VAR 0 12
49464: PUSH
49465: CALL_OW 45
49469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49470: LD_VAR 0 12
49474: PPUSH
49475: LD_VAR 0 8
49479: PPUSH
49480: LD_INT 0
49482: PPUSH
49483: CALL 51619 0 3
// end ;
49487: GO 49441
49489: POP
49490: POP
// if horses then
49491: LD_VAR 0 5
49495: IFFALSE 49562
// for i = 1 to horses do
49497: LD_ADDR_VAR 0 11
49501: PUSH
49502: DOUBLE
49503: LD_INT 1
49505: DEC
49506: ST_TO_ADDR
49507: LD_VAR 0 5
49511: PUSH
49512: FOR_TO
49513: IFFALSE 49560
// begin hc_class := 21 ;
49515: LD_ADDR_OWVAR 28
49519: PUSH
49520: LD_INT 21
49522: ST_TO_ADDR
// hc_gallery :=  ;
49523: LD_ADDR_OWVAR 33
49527: PUSH
49528: LD_STRING 
49530: ST_TO_ADDR
// animal := CreateHuman ;
49531: LD_ADDR_VAR 0 12
49535: PUSH
49536: CALL_OW 44
49540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49541: LD_VAR 0 12
49545: PPUSH
49546: LD_VAR 0 8
49550: PPUSH
49551: LD_INT 0
49553: PPUSH
49554: CALL 51619 0 3
// end ;
49558: GO 49512
49560: POP
49561: POP
// if birds then
49562: LD_VAR 0 1
49566: IFFALSE 49633
// for i = 1 to birds do
49568: LD_ADDR_VAR 0 11
49572: PUSH
49573: DOUBLE
49574: LD_INT 1
49576: DEC
49577: ST_TO_ADDR
49578: LD_VAR 0 1
49582: PUSH
49583: FOR_TO
49584: IFFALSE 49631
// begin hc_class := 18 ;
49586: LD_ADDR_OWVAR 28
49590: PUSH
49591: LD_INT 18
49593: ST_TO_ADDR
// hc_gallery =  ;
49594: LD_ADDR_OWVAR 33
49598: PUSH
49599: LD_STRING 
49601: ST_TO_ADDR
// animal := CreateHuman ;
49602: LD_ADDR_VAR 0 12
49606: PUSH
49607: CALL_OW 44
49611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49612: LD_VAR 0 12
49616: PPUSH
49617: LD_VAR 0 8
49621: PPUSH
49622: LD_INT 0
49624: PPUSH
49625: CALL 51619 0 3
// end ;
49629: GO 49583
49631: POP
49632: POP
// if tigers then
49633: LD_VAR 0 2
49637: IFFALSE 49721
// for i = 1 to tigers do
49639: LD_ADDR_VAR 0 11
49643: PUSH
49644: DOUBLE
49645: LD_INT 1
49647: DEC
49648: ST_TO_ADDR
49649: LD_VAR 0 2
49653: PUSH
49654: FOR_TO
49655: IFFALSE 49719
// begin hc_class = class_tiger ;
49657: LD_ADDR_OWVAR 28
49661: PUSH
49662: LD_INT 14
49664: ST_TO_ADDR
// hc_gallery =  ;
49665: LD_ADDR_OWVAR 33
49669: PUSH
49670: LD_STRING 
49672: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49673: LD_ADDR_OWVAR 35
49677: PUSH
49678: LD_INT 7
49680: NEG
49681: PPUSH
49682: LD_INT 7
49684: PPUSH
49685: CALL_OW 12
49689: ST_TO_ADDR
// animal := CreateHuman ;
49690: LD_ADDR_VAR 0 12
49694: PUSH
49695: CALL_OW 44
49699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49700: LD_VAR 0 12
49704: PPUSH
49705: LD_VAR 0 8
49709: PPUSH
49710: LD_INT 0
49712: PPUSH
49713: CALL 51619 0 3
// end ;
49717: GO 49654
49719: POP
49720: POP
// if apemans then
49721: LD_VAR 0 3
49725: IFFALSE 49848
// for i = 1 to apemans do
49727: LD_ADDR_VAR 0 11
49731: PUSH
49732: DOUBLE
49733: LD_INT 1
49735: DEC
49736: ST_TO_ADDR
49737: LD_VAR 0 3
49741: PUSH
49742: FOR_TO
49743: IFFALSE 49846
// begin hc_class = class_apeman ;
49745: LD_ADDR_OWVAR 28
49749: PUSH
49750: LD_INT 12
49752: ST_TO_ADDR
// hc_gallery =  ;
49753: LD_ADDR_OWVAR 33
49757: PUSH
49758: LD_STRING 
49760: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49761: LD_ADDR_OWVAR 35
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PPUSH
49770: LD_INT 2
49772: PPUSH
49773: CALL_OW 12
49777: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49778: LD_ADDR_OWVAR 31
49782: PUSH
49783: LD_INT 1
49785: PPUSH
49786: LD_INT 3
49788: PPUSH
49789: CALL_OW 12
49793: PUSH
49794: LD_INT 1
49796: PPUSH
49797: LD_INT 3
49799: PPUSH
49800: CALL_OW 12
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: ST_TO_ADDR
// animal := CreateHuman ;
49817: LD_ADDR_VAR 0 12
49821: PUSH
49822: CALL_OW 44
49826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49827: LD_VAR 0 12
49831: PPUSH
49832: LD_VAR 0 8
49836: PPUSH
49837: LD_INT 0
49839: PPUSH
49840: CALL 51619 0 3
// end ;
49844: GO 49742
49846: POP
49847: POP
// if enchidnas then
49848: LD_VAR 0 4
49852: IFFALSE 49919
// for i = 1 to enchidnas do
49854: LD_ADDR_VAR 0 11
49858: PUSH
49859: DOUBLE
49860: LD_INT 1
49862: DEC
49863: ST_TO_ADDR
49864: LD_VAR 0 4
49868: PUSH
49869: FOR_TO
49870: IFFALSE 49917
// begin hc_class = 13 ;
49872: LD_ADDR_OWVAR 28
49876: PUSH
49877: LD_INT 13
49879: ST_TO_ADDR
// hc_gallery =  ;
49880: LD_ADDR_OWVAR 33
49884: PUSH
49885: LD_STRING 
49887: ST_TO_ADDR
// animal := CreateHuman ;
49888: LD_ADDR_VAR 0 12
49892: PUSH
49893: CALL_OW 44
49897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49898: LD_VAR 0 12
49902: PPUSH
49903: LD_VAR 0 8
49907: PPUSH
49908: LD_INT 0
49910: PPUSH
49911: CALL 51619 0 3
// end ;
49915: GO 49869
49917: POP
49918: POP
// if fishes then
49919: LD_VAR 0 7
49923: IFFALSE 49990
// for i = 1 to fishes do
49925: LD_ADDR_VAR 0 11
49929: PUSH
49930: DOUBLE
49931: LD_INT 1
49933: DEC
49934: ST_TO_ADDR
49935: LD_VAR 0 7
49939: PUSH
49940: FOR_TO
49941: IFFALSE 49988
// begin hc_class = 20 ;
49943: LD_ADDR_OWVAR 28
49947: PUSH
49948: LD_INT 20
49950: ST_TO_ADDR
// hc_gallery =  ;
49951: LD_ADDR_OWVAR 33
49955: PUSH
49956: LD_STRING 
49958: ST_TO_ADDR
// animal := CreateHuman ;
49959: LD_ADDR_VAR 0 12
49963: PUSH
49964: CALL_OW 44
49968: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49969: LD_VAR 0 12
49973: PPUSH
49974: LD_VAR 0 9
49978: PPUSH
49979: LD_INT 0
49981: PPUSH
49982: CALL 51619 0 3
// end ;
49986: GO 49940
49988: POP
49989: POP
// end ;
49990: LD_VAR 0 10
49994: RET
// export function WantHeal ( sci , unit ) ; begin
49995: LD_INT 0
49997: PPUSH
// if GetTaskList ( sci ) > 0 then
49998: LD_VAR 0 1
50002: PPUSH
50003: CALL_OW 437
50007: PUSH
50008: LD_INT 0
50010: GREATER
50011: IFFALSE 50081
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50013: LD_VAR 0 1
50017: PPUSH
50018: CALL_OW 437
50022: PUSH
50023: LD_INT 1
50025: ARRAY
50026: PUSH
50027: LD_INT 1
50029: ARRAY
50030: PUSH
50031: LD_STRING l
50033: EQUAL
50034: PUSH
50035: LD_VAR 0 1
50039: PPUSH
50040: CALL_OW 437
50044: PUSH
50045: LD_INT 1
50047: ARRAY
50048: PUSH
50049: LD_INT 4
50051: ARRAY
50052: PUSH
50053: LD_VAR 0 2
50057: EQUAL
50058: AND
50059: IFFALSE 50071
// result := true else
50061: LD_ADDR_VAR 0 3
50065: PUSH
50066: LD_INT 1
50068: ST_TO_ADDR
50069: GO 50079
// result := false ;
50071: LD_ADDR_VAR 0 3
50075: PUSH
50076: LD_INT 0
50078: ST_TO_ADDR
// end else
50079: GO 50089
// result := false ;
50081: LD_ADDR_VAR 0 3
50085: PUSH
50086: LD_INT 0
50088: ST_TO_ADDR
// end ;
50089: LD_VAR 0 3
50093: RET
// export function HealTarget ( sci ) ; begin
50094: LD_INT 0
50096: PPUSH
// if not sci then
50097: LD_VAR 0 1
50101: NOT
50102: IFFALSE 50106
// exit ;
50104: GO 50171
// result := 0 ;
50106: LD_ADDR_VAR 0 2
50110: PUSH
50111: LD_INT 0
50113: ST_TO_ADDR
// if GetTaskList ( sci ) then
50114: LD_VAR 0 1
50118: PPUSH
50119: CALL_OW 437
50123: IFFALSE 50171
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50125: LD_VAR 0 1
50129: PPUSH
50130: CALL_OW 437
50134: PUSH
50135: LD_INT 1
50137: ARRAY
50138: PUSH
50139: LD_INT 1
50141: ARRAY
50142: PUSH
50143: LD_STRING l
50145: EQUAL
50146: IFFALSE 50171
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50148: LD_ADDR_VAR 0 2
50152: PUSH
50153: LD_VAR 0 1
50157: PPUSH
50158: CALL_OW 437
50162: PUSH
50163: LD_INT 1
50165: ARRAY
50166: PUSH
50167: LD_INT 4
50169: ARRAY
50170: ST_TO_ADDR
// end ;
50171: LD_VAR 0 2
50175: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50176: LD_INT 0
50178: PPUSH
50179: PPUSH
50180: PPUSH
50181: PPUSH
// if not base_units then
50182: LD_VAR 0 1
50186: NOT
50187: IFFALSE 50191
// exit ;
50189: GO 50278
// result := false ;
50191: LD_ADDR_VAR 0 2
50195: PUSH
50196: LD_INT 0
50198: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50199: LD_ADDR_VAR 0 5
50203: PUSH
50204: LD_VAR 0 1
50208: PPUSH
50209: LD_INT 21
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PPUSH
50219: CALL_OW 72
50223: ST_TO_ADDR
// if not tmp then
50224: LD_VAR 0 5
50228: NOT
50229: IFFALSE 50233
// exit ;
50231: GO 50278
// for i in tmp do
50233: LD_ADDR_VAR 0 3
50237: PUSH
50238: LD_VAR 0 5
50242: PUSH
50243: FOR_IN
50244: IFFALSE 50276
// begin result := EnemyInRange ( i , 22 ) ;
50246: LD_ADDR_VAR 0 2
50250: PUSH
50251: LD_VAR 0 3
50255: PPUSH
50256: LD_INT 22
50258: PPUSH
50259: CALL 47876 0 2
50263: ST_TO_ADDR
// if result then
50264: LD_VAR 0 2
50268: IFFALSE 50274
// exit ;
50270: POP
50271: POP
50272: GO 50278
// end ;
50274: GO 50243
50276: POP
50277: POP
// end ;
50278: LD_VAR 0 2
50282: RET
// export function FilterByTag ( units , tag ) ; begin
50283: LD_INT 0
50285: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50286: LD_ADDR_VAR 0 3
50290: PUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: LD_INT 120
50298: PUSH
50299: LD_VAR 0 2
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PPUSH
50308: CALL_OW 72
50312: ST_TO_ADDR
// end ;
50313: LD_VAR 0 3
50317: RET
// export function IsDriver ( un ) ; begin
50318: LD_INT 0
50320: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50321: LD_ADDR_VAR 0 2
50325: PUSH
50326: LD_VAR 0 1
50330: PUSH
50331: LD_INT 55
50333: PUSH
50334: EMPTY
50335: LIST
50336: PPUSH
50337: CALL_OW 69
50341: IN
50342: ST_TO_ADDR
// end ;
50343: LD_VAR 0 2
50347: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50348: LD_INT 0
50350: PPUSH
50351: PPUSH
// list := [ ] ;
50352: LD_ADDR_VAR 0 5
50356: PUSH
50357: EMPTY
50358: ST_TO_ADDR
// case d of 0 :
50359: LD_VAR 0 3
50363: PUSH
50364: LD_INT 0
50366: DOUBLE
50367: EQUAL
50368: IFTRUE 50372
50370: GO 50505
50372: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50373: LD_ADDR_VAR 0 5
50377: PUSH
50378: LD_VAR 0 1
50382: PUSH
50383: LD_INT 4
50385: MINUS
50386: PUSH
50387: LD_VAR 0 2
50391: PUSH
50392: LD_INT 4
50394: MINUS
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: PUSH
50404: LD_VAR 0 1
50408: PUSH
50409: LD_INT 3
50411: MINUS
50412: PUSH
50413: LD_VAR 0 2
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: PUSH
50426: LD_VAR 0 1
50430: PUSH
50431: LD_INT 4
50433: PLUS
50434: PUSH
50435: LD_VAR 0 2
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: LIST
50447: PUSH
50448: LD_VAR 0 1
50452: PUSH
50453: LD_INT 3
50455: PLUS
50456: PUSH
50457: LD_VAR 0 2
50461: PUSH
50462: LD_INT 3
50464: PLUS
50465: PUSH
50466: LD_INT 5
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: LIST
50473: PUSH
50474: LD_VAR 0 1
50478: PUSH
50479: LD_VAR 0 2
50483: PUSH
50484: LD_INT 4
50486: PLUS
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: ST_TO_ADDR
// end ; 1 :
50503: GO 51203
50505: LD_INT 1
50507: DOUBLE
50508: EQUAL
50509: IFTRUE 50513
50511: GO 50646
50513: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50514: LD_ADDR_VAR 0 5
50518: PUSH
50519: LD_VAR 0 1
50523: PUSH
50524: LD_VAR 0 2
50528: PUSH
50529: LD_INT 4
50531: MINUS
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: LIST
50540: PUSH
50541: LD_VAR 0 1
50545: PUSH
50546: LD_INT 3
50548: MINUS
50549: PUSH
50550: LD_VAR 0 2
50554: PUSH
50555: LD_INT 3
50557: MINUS
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: PUSH
50567: LD_VAR 0 1
50571: PUSH
50572: LD_INT 4
50574: MINUS
50575: PUSH
50576: LD_VAR 0 2
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: LIST
50588: PUSH
50589: LD_VAR 0 1
50593: PUSH
50594: LD_VAR 0 2
50598: PUSH
50599: LD_INT 3
50601: PLUS
50602: PUSH
50603: LD_INT 0
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: PUSH
50611: LD_VAR 0 1
50615: PUSH
50616: LD_INT 4
50618: PLUS
50619: PUSH
50620: LD_VAR 0 2
50624: PUSH
50625: LD_INT 4
50627: PLUS
50628: PUSH
50629: LD_INT 5
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: ST_TO_ADDR
// end ; 2 :
50644: GO 51203
50646: LD_INT 2
50648: DOUBLE
50649: EQUAL
50650: IFTRUE 50654
50652: GO 50783
50654: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50655: LD_ADDR_VAR 0 5
50659: PUSH
50660: LD_VAR 0 1
50664: PUSH
50665: LD_VAR 0 2
50669: PUSH
50670: LD_INT 3
50672: MINUS
50673: PUSH
50674: LD_INT 3
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: LIST
50681: PUSH
50682: LD_VAR 0 1
50686: PUSH
50687: LD_INT 4
50689: PLUS
50690: PUSH
50691: LD_VAR 0 2
50695: PUSH
50696: LD_INT 4
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: PUSH
50704: LD_VAR 0 1
50708: PUSH
50709: LD_VAR 0 2
50713: PUSH
50714: LD_INT 4
50716: PLUS
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: PUSH
50726: LD_VAR 0 1
50730: PUSH
50731: LD_INT 3
50733: MINUS
50734: PUSH
50735: LD_VAR 0 2
50739: PUSH
50740: LD_INT 1
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: LIST
50747: PUSH
50748: LD_VAR 0 1
50752: PUSH
50753: LD_INT 4
50755: MINUS
50756: PUSH
50757: LD_VAR 0 2
50761: PUSH
50762: LD_INT 4
50764: MINUS
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: ST_TO_ADDR
// end ; 3 :
50781: GO 51203
50783: LD_INT 3
50785: DOUBLE
50786: EQUAL
50787: IFTRUE 50791
50789: GO 50924
50791: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50792: LD_ADDR_VAR 0 5
50796: PUSH
50797: LD_VAR 0 1
50801: PUSH
50802: LD_INT 3
50804: PLUS
50805: PUSH
50806: LD_VAR 0 2
50810: PUSH
50811: LD_INT 4
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: LIST
50818: PUSH
50819: LD_VAR 0 1
50823: PUSH
50824: LD_INT 4
50826: PLUS
50827: PUSH
50828: LD_VAR 0 2
50832: PUSH
50833: LD_INT 4
50835: PLUS
50836: PUSH
50837: LD_INT 5
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: LIST
50844: PUSH
50845: LD_VAR 0 1
50849: PUSH
50850: LD_INT 4
50852: MINUS
50853: PUSH
50854: LD_VAR 0 2
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: LIST
50866: PUSH
50867: LD_VAR 0 1
50871: PUSH
50872: LD_VAR 0 2
50876: PUSH
50877: LD_INT 4
50879: MINUS
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: PUSH
50889: LD_VAR 0 1
50893: PUSH
50894: LD_INT 3
50896: MINUS
50897: PUSH
50898: LD_VAR 0 2
50902: PUSH
50903: LD_INT 3
50905: MINUS
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: ST_TO_ADDR
// end ; 4 :
50922: GO 51203
50924: LD_INT 4
50926: DOUBLE
50927: EQUAL
50928: IFTRUE 50932
50930: GO 51065
50932: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50933: LD_ADDR_VAR 0 5
50937: PUSH
50938: LD_VAR 0 1
50942: PUSH
50943: LD_VAR 0 2
50947: PUSH
50948: LD_INT 4
50950: PLUS
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: LIST
50959: PUSH
50960: LD_VAR 0 1
50964: PUSH
50965: LD_INT 3
50967: PLUS
50968: PUSH
50969: LD_VAR 0 2
50973: PUSH
50974: LD_INT 3
50976: PLUS
50977: PUSH
50978: LD_INT 5
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: LIST
50985: PUSH
50986: LD_VAR 0 1
50990: PUSH
50991: LD_INT 4
50993: PLUS
50994: PUSH
50995: LD_VAR 0 2
50999: PUSH
51000: LD_INT 4
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: LIST
51007: PUSH
51008: LD_VAR 0 1
51012: PUSH
51013: LD_VAR 0 2
51017: PUSH
51018: LD_INT 3
51020: MINUS
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: PUSH
51030: LD_VAR 0 1
51034: PUSH
51035: LD_INT 4
51037: MINUS
51038: PUSH
51039: LD_VAR 0 2
51043: PUSH
51044: LD_INT 4
51046: MINUS
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: ST_TO_ADDR
// end ; 5 :
51063: GO 51203
51065: LD_INT 5
51067: DOUBLE
51068: EQUAL
51069: IFTRUE 51073
51071: GO 51202
51073: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51074: LD_ADDR_VAR 0 5
51078: PUSH
51079: LD_VAR 0 1
51083: PUSH
51084: LD_INT 4
51086: MINUS
51087: PUSH
51088: LD_VAR 0 2
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: PUSH
51101: LD_VAR 0 1
51105: PUSH
51106: LD_VAR 0 2
51110: PUSH
51111: LD_INT 4
51113: MINUS
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: PUSH
51123: LD_VAR 0 1
51127: PUSH
51128: LD_INT 4
51130: PLUS
51131: PUSH
51132: LD_VAR 0 2
51136: PUSH
51137: LD_INT 4
51139: PLUS
51140: PUSH
51141: LD_INT 5
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: PUSH
51149: LD_VAR 0 1
51153: PUSH
51154: LD_INT 3
51156: PLUS
51157: PUSH
51158: LD_VAR 0 2
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: PUSH
51171: LD_VAR 0 1
51175: PUSH
51176: LD_VAR 0 2
51180: PUSH
51181: LD_INT 3
51183: PLUS
51184: PUSH
51185: LD_INT 0
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: ST_TO_ADDR
// end ; end ;
51200: GO 51203
51202: POP
// result := list ;
51203: LD_ADDR_VAR 0 4
51207: PUSH
51208: LD_VAR 0 5
51212: ST_TO_ADDR
// end ;
51213: LD_VAR 0 4
51217: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51218: LD_INT 0
51220: PPUSH
51221: PPUSH
51222: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51223: LD_VAR 0 1
51227: NOT
51228: PUSH
51229: LD_VAR 0 2
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: LD_INT 4
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: IN
51252: NOT
51253: OR
51254: IFFALSE 51258
// exit ;
51256: GO 51341
// tmp := [ ] ;
51258: LD_ADDR_VAR 0 5
51262: PUSH
51263: EMPTY
51264: ST_TO_ADDR
// for i in units do
51265: LD_ADDR_VAR 0 4
51269: PUSH
51270: LD_VAR 0 1
51274: PUSH
51275: FOR_IN
51276: IFFALSE 51310
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51278: LD_ADDR_VAR 0 5
51282: PUSH
51283: LD_VAR 0 5
51287: PPUSH
51288: LD_VAR 0 4
51292: PPUSH
51293: LD_VAR 0 2
51297: PPUSH
51298: CALL_OW 259
51302: PPUSH
51303: CALL 52714 0 2
51307: ST_TO_ADDR
51308: GO 51275
51310: POP
51311: POP
// if not tmp then
51312: LD_VAR 0 5
51316: NOT
51317: IFFALSE 51321
// exit ;
51319: GO 51341
// result := SortListByListDesc ( units , tmp ) ;
51321: LD_ADDR_VAR 0 3
51325: PUSH
51326: LD_VAR 0 1
51330: PPUSH
51331: LD_VAR 0 5
51335: PPUSH
51336: CALL_OW 77
51340: ST_TO_ADDR
// end ;
51341: LD_VAR 0 3
51345: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51346: LD_INT 0
51348: PPUSH
51349: PPUSH
51350: PPUSH
// result := false ;
51351: LD_ADDR_VAR 0 3
51355: PUSH
51356: LD_INT 0
51358: ST_TO_ADDR
// if not building then
51359: LD_VAR 0 2
51363: NOT
51364: IFFALSE 51368
// exit ;
51366: GO 51506
// x := GetX ( building ) ;
51368: LD_ADDR_VAR 0 4
51372: PUSH
51373: LD_VAR 0 2
51377: PPUSH
51378: CALL_OW 250
51382: ST_TO_ADDR
// y := GetY ( building ) ;
51383: LD_ADDR_VAR 0 5
51387: PUSH
51388: LD_VAR 0 2
51392: PPUSH
51393: CALL_OW 251
51397: ST_TO_ADDR
// if not x or not y then
51398: LD_VAR 0 4
51402: NOT
51403: PUSH
51404: LD_VAR 0 5
51408: NOT
51409: OR
51410: IFFALSE 51414
// exit ;
51412: GO 51506
// if GetTaskList ( unit ) then
51414: LD_VAR 0 1
51418: PPUSH
51419: CALL_OW 437
51423: IFFALSE 51506
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51425: LD_STRING e
51427: PUSH
51428: LD_VAR 0 1
51432: PPUSH
51433: CALL_OW 437
51437: PUSH
51438: LD_INT 1
51440: ARRAY
51441: PUSH
51442: LD_INT 1
51444: ARRAY
51445: EQUAL
51446: PUSH
51447: LD_VAR 0 4
51451: PUSH
51452: LD_VAR 0 1
51456: PPUSH
51457: CALL_OW 437
51461: PUSH
51462: LD_INT 1
51464: ARRAY
51465: PUSH
51466: LD_INT 2
51468: ARRAY
51469: EQUAL
51470: AND
51471: PUSH
51472: LD_VAR 0 5
51476: PUSH
51477: LD_VAR 0 1
51481: PPUSH
51482: CALL_OW 437
51486: PUSH
51487: LD_INT 1
51489: ARRAY
51490: PUSH
51491: LD_INT 3
51493: ARRAY
51494: EQUAL
51495: AND
51496: IFFALSE 51506
// result := true end ;
51498: LD_ADDR_VAR 0 3
51502: PUSH
51503: LD_INT 1
51505: ST_TO_ADDR
// end ;
51506: LD_VAR 0 3
51510: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51511: LD_INT 0
51513: PPUSH
// result := false ;
51514: LD_ADDR_VAR 0 4
51518: PUSH
51519: LD_INT 0
51521: ST_TO_ADDR
// if GetTaskList ( unit ) then
51522: LD_VAR 0 1
51526: PPUSH
51527: CALL_OW 437
51531: IFFALSE 51614
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51533: LD_STRING M
51535: PUSH
51536: LD_VAR 0 1
51540: PPUSH
51541: CALL_OW 437
51545: PUSH
51546: LD_INT 1
51548: ARRAY
51549: PUSH
51550: LD_INT 1
51552: ARRAY
51553: EQUAL
51554: PUSH
51555: LD_VAR 0 2
51559: PUSH
51560: LD_VAR 0 1
51564: PPUSH
51565: CALL_OW 437
51569: PUSH
51570: LD_INT 1
51572: ARRAY
51573: PUSH
51574: LD_INT 2
51576: ARRAY
51577: EQUAL
51578: AND
51579: PUSH
51580: LD_VAR 0 3
51584: PUSH
51585: LD_VAR 0 1
51589: PPUSH
51590: CALL_OW 437
51594: PUSH
51595: LD_INT 1
51597: ARRAY
51598: PUSH
51599: LD_INT 3
51601: ARRAY
51602: EQUAL
51603: AND
51604: IFFALSE 51614
// result := true ;
51606: LD_ADDR_VAR 0 4
51610: PUSH
51611: LD_INT 1
51613: ST_TO_ADDR
// end ; end ;
51614: LD_VAR 0 4
51618: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51619: LD_INT 0
51621: PPUSH
51622: PPUSH
51623: PPUSH
51624: PPUSH
// if not unit or not area then
51625: LD_VAR 0 1
51629: NOT
51630: PUSH
51631: LD_VAR 0 2
51635: NOT
51636: OR
51637: IFFALSE 51641
// exit ;
51639: GO 51817
// tmp := AreaToList ( area , i ) ;
51641: LD_ADDR_VAR 0 6
51645: PUSH
51646: LD_VAR 0 2
51650: PPUSH
51651: LD_VAR 0 5
51655: PPUSH
51656: CALL_OW 517
51660: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51661: LD_ADDR_VAR 0 5
51665: PUSH
51666: DOUBLE
51667: LD_INT 1
51669: DEC
51670: ST_TO_ADDR
51671: LD_VAR 0 6
51675: PUSH
51676: LD_INT 1
51678: ARRAY
51679: PUSH
51680: FOR_TO
51681: IFFALSE 51815
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51683: LD_ADDR_VAR 0 7
51687: PUSH
51688: LD_VAR 0 6
51692: PUSH
51693: LD_INT 1
51695: ARRAY
51696: PUSH
51697: LD_VAR 0 5
51701: ARRAY
51702: PUSH
51703: LD_VAR 0 6
51707: PUSH
51708: LD_INT 2
51710: ARRAY
51711: PUSH
51712: LD_VAR 0 5
51716: ARRAY
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51722: LD_INT 92
51724: PUSH
51725: LD_VAR 0 7
51729: PUSH
51730: LD_INT 1
51732: ARRAY
51733: PUSH
51734: LD_VAR 0 7
51738: PUSH
51739: LD_INT 2
51741: ARRAY
51742: PUSH
51743: LD_INT 2
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: PPUSH
51752: CALL_OW 69
51756: PUSH
51757: LD_INT 0
51759: EQUAL
51760: IFFALSE 51813
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51762: LD_VAR 0 1
51766: PPUSH
51767: LD_VAR 0 7
51771: PUSH
51772: LD_INT 1
51774: ARRAY
51775: PPUSH
51776: LD_VAR 0 7
51780: PUSH
51781: LD_INT 2
51783: ARRAY
51784: PPUSH
51785: LD_VAR 0 3
51789: PPUSH
51790: CALL_OW 48
// result := IsPlaced ( unit ) ;
51794: LD_ADDR_VAR 0 4
51798: PUSH
51799: LD_VAR 0 1
51803: PPUSH
51804: CALL_OW 305
51808: ST_TO_ADDR
// exit ;
51809: POP
51810: POP
51811: GO 51817
// end ; end ;
51813: GO 51680
51815: POP
51816: POP
// end ;
51817: LD_VAR 0 4
51821: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51822: LD_INT 0
51824: PPUSH
51825: PPUSH
51826: PPUSH
// if not side or side > 8 then
51827: LD_VAR 0 1
51831: NOT
51832: PUSH
51833: LD_VAR 0 1
51837: PUSH
51838: LD_INT 8
51840: GREATER
51841: OR
51842: IFFALSE 51846
// exit ;
51844: GO 52033
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51846: LD_ADDR_VAR 0 4
51850: PUSH
51851: LD_INT 22
51853: PUSH
51854: LD_VAR 0 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 21
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PPUSH
51877: CALL_OW 69
51881: ST_TO_ADDR
// if not tmp then
51882: LD_VAR 0 4
51886: NOT
51887: IFFALSE 51891
// exit ;
51889: GO 52033
// enable_addtolog := true ;
51891: LD_ADDR_OWVAR 81
51895: PUSH
51896: LD_INT 1
51898: ST_TO_ADDR
// AddToLog ( [ ) ;
51899: LD_STRING [
51901: PPUSH
51902: CALL_OW 561
// for i in tmp do
51906: LD_ADDR_VAR 0 3
51910: PUSH
51911: LD_VAR 0 4
51915: PUSH
51916: FOR_IN
51917: IFFALSE 52024
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51919: LD_STRING [
51921: PUSH
51922: LD_VAR 0 3
51926: PPUSH
51927: CALL_OW 266
51931: STR
51932: PUSH
51933: LD_STRING , 
51935: STR
51936: PUSH
51937: LD_VAR 0 3
51941: PPUSH
51942: CALL_OW 250
51946: STR
51947: PUSH
51948: LD_STRING , 
51950: STR
51951: PUSH
51952: LD_VAR 0 3
51956: PPUSH
51957: CALL_OW 251
51961: STR
51962: PUSH
51963: LD_STRING , 
51965: STR
51966: PUSH
51967: LD_VAR 0 3
51971: PPUSH
51972: CALL_OW 254
51976: STR
51977: PUSH
51978: LD_STRING , 
51980: STR
51981: PUSH
51982: LD_VAR 0 3
51986: PPUSH
51987: LD_INT 1
51989: PPUSH
51990: CALL_OW 268
51994: STR
51995: PUSH
51996: LD_STRING , 
51998: STR
51999: PUSH
52000: LD_VAR 0 3
52004: PPUSH
52005: LD_INT 2
52007: PPUSH
52008: CALL_OW 268
52012: STR
52013: PUSH
52014: LD_STRING ],
52016: STR
52017: PPUSH
52018: CALL_OW 561
// end ;
52022: GO 51916
52024: POP
52025: POP
// AddToLog ( ]; ) ;
52026: LD_STRING ];
52028: PPUSH
52029: CALL_OW 561
// end ;
52033: LD_VAR 0 2
52037: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52038: LD_INT 0
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
// if not area or not rate or not max then
52045: LD_VAR 0 1
52049: NOT
52050: PUSH
52051: LD_VAR 0 2
52055: NOT
52056: OR
52057: PUSH
52058: LD_VAR 0 4
52062: NOT
52063: OR
52064: IFFALSE 52068
// exit ;
52066: GO 52257
// while 1 do
52068: LD_INT 1
52070: IFFALSE 52257
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52072: LD_ADDR_VAR 0 9
52076: PUSH
52077: LD_VAR 0 1
52081: PPUSH
52082: LD_INT 1
52084: PPUSH
52085: CALL_OW 287
52089: PUSH
52090: LD_INT 10
52092: MUL
52093: ST_TO_ADDR
// r := rate / 10 ;
52094: LD_ADDR_VAR 0 7
52098: PUSH
52099: LD_VAR 0 2
52103: PUSH
52104: LD_INT 10
52106: DIVREAL
52107: ST_TO_ADDR
// time := 1 1$00 ;
52108: LD_ADDR_VAR 0 8
52112: PUSH
52113: LD_INT 2100
52115: ST_TO_ADDR
// if amount < min then
52116: LD_VAR 0 9
52120: PUSH
52121: LD_VAR 0 3
52125: LESS
52126: IFFALSE 52144
// r := r * 2 else
52128: LD_ADDR_VAR 0 7
52132: PUSH
52133: LD_VAR 0 7
52137: PUSH
52138: LD_INT 2
52140: MUL
52141: ST_TO_ADDR
52142: GO 52170
// if amount > max then
52144: LD_VAR 0 9
52148: PUSH
52149: LD_VAR 0 4
52153: GREATER
52154: IFFALSE 52170
// r := r / 2 ;
52156: LD_ADDR_VAR 0 7
52160: PUSH
52161: LD_VAR 0 7
52165: PUSH
52166: LD_INT 2
52168: DIVREAL
52169: ST_TO_ADDR
// time := time / r ;
52170: LD_ADDR_VAR 0 8
52174: PUSH
52175: LD_VAR 0 8
52179: PUSH
52180: LD_VAR 0 7
52184: DIVREAL
52185: ST_TO_ADDR
// if time < 0 then
52186: LD_VAR 0 8
52190: PUSH
52191: LD_INT 0
52193: LESS
52194: IFFALSE 52211
// time := time * - 1 ;
52196: LD_ADDR_VAR 0 8
52200: PUSH
52201: LD_VAR 0 8
52205: PUSH
52206: LD_INT 1
52208: NEG
52209: MUL
52210: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52211: LD_VAR 0 8
52215: PUSH
52216: LD_INT 35
52218: PPUSH
52219: LD_INT 875
52221: PPUSH
52222: CALL_OW 12
52226: PLUS
52227: PPUSH
52228: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52232: LD_INT 1
52234: PPUSH
52235: LD_INT 5
52237: PPUSH
52238: CALL_OW 12
52242: PPUSH
52243: LD_VAR 0 1
52247: PPUSH
52248: LD_INT 1
52250: PPUSH
52251: CALL_OW 55
// end ;
52255: GO 52068
// end ;
52257: LD_VAR 0 5
52261: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52262: LD_INT 0
52264: PPUSH
52265: PPUSH
52266: PPUSH
52267: PPUSH
52268: PPUSH
52269: PPUSH
52270: PPUSH
52271: PPUSH
// if not turrets or not factories then
52272: LD_VAR 0 1
52276: NOT
52277: PUSH
52278: LD_VAR 0 2
52282: NOT
52283: OR
52284: IFFALSE 52288
// exit ;
52286: GO 52595
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52288: LD_ADDR_VAR 0 10
52292: PUSH
52293: LD_INT 5
52295: PUSH
52296: LD_INT 6
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: LD_INT 4
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: PUSH
52316: LD_INT 5
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 24
52330: PUSH
52331: LD_INT 25
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 23
52340: PUSH
52341: LD_INT 27
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 42
52354: PUSH
52355: LD_INT 43
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 44
52364: PUSH
52365: LD_INT 46
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 45
52374: PUSH
52375: LD_INT 47
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// result := [ ] ;
52392: LD_ADDR_VAR 0 3
52396: PUSH
52397: EMPTY
52398: ST_TO_ADDR
// for i in turrets do
52399: LD_ADDR_VAR 0 4
52403: PUSH
52404: LD_VAR 0 1
52408: PUSH
52409: FOR_IN
52410: IFFALSE 52593
// begin nat := GetNation ( i ) ;
52412: LD_ADDR_VAR 0 7
52416: PUSH
52417: LD_VAR 0 4
52421: PPUSH
52422: CALL_OW 248
52426: ST_TO_ADDR
// weapon := 0 ;
52427: LD_ADDR_VAR 0 8
52431: PUSH
52432: LD_INT 0
52434: ST_TO_ADDR
// if not nat then
52435: LD_VAR 0 7
52439: NOT
52440: IFFALSE 52444
// continue ;
52442: GO 52409
// for j in list [ nat ] do
52444: LD_ADDR_VAR 0 5
52448: PUSH
52449: LD_VAR 0 10
52453: PUSH
52454: LD_VAR 0 7
52458: ARRAY
52459: PUSH
52460: FOR_IN
52461: IFFALSE 52502
// if GetBWeapon ( i ) = j [ 1 ] then
52463: LD_VAR 0 4
52467: PPUSH
52468: CALL_OW 269
52472: PUSH
52473: LD_VAR 0 5
52477: PUSH
52478: LD_INT 1
52480: ARRAY
52481: EQUAL
52482: IFFALSE 52500
// begin weapon := j [ 2 ] ;
52484: LD_ADDR_VAR 0 8
52488: PUSH
52489: LD_VAR 0 5
52493: PUSH
52494: LD_INT 2
52496: ARRAY
52497: ST_TO_ADDR
// break ;
52498: GO 52502
// end ;
52500: GO 52460
52502: POP
52503: POP
// if not weapon then
52504: LD_VAR 0 8
52508: NOT
52509: IFFALSE 52513
// continue ;
52511: GO 52409
// for k in factories do
52513: LD_ADDR_VAR 0 6
52517: PUSH
52518: LD_VAR 0 2
52522: PUSH
52523: FOR_IN
52524: IFFALSE 52589
// begin weapons := AvailableWeaponList ( k ) ;
52526: LD_ADDR_VAR 0 9
52530: PUSH
52531: LD_VAR 0 6
52535: PPUSH
52536: CALL_OW 478
52540: ST_TO_ADDR
// if not weapons then
52541: LD_VAR 0 9
52545: NOT
52546: IFFALSE 52550
// continue ;
52548: GO 52523
// if weapon in weapons then
52550: LD_VAR 0 8
52554: PUSH
52555: LD_VAR 0 9
52559: IN
52560: IFFALSE 52587
// begin result := [ i , weapon ] ;
52562: LD_ADDR_VAR 0 3
52566: PUSH
52567: LD_VAR 0 4
52571: PUSH
52572: LD_VAR 0 8
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: ST_TO_ADDR
// exit ;
52581: POP
52582: POP
52583: POP
52584: POP
52585: GO 52595
// end ; end ;
52587: GO 52523
52589: POP
52590: POP
// end ;
52591: GO 52409
52593: POP
52594: POP
// end ;
52595: LD_VAR 0 3
52599: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52600: LD_INT 0
52602: PPUSH
// if not side or side > 8 then
52603: LD_VAR 0 3
52607: NOT
52608: PUSH
52609: LD_VAR 0 3
52613: PUSH
52614: LD_INT 8
52616: GREATER
52617: OR
52618: IFFALSE 52622
// exit ;
52620: GO 52681
// if not range then
52622: LD_VAR 0 4
52626: NOT
52627: IFFALSE 52638
// range := - 12 ;
52629: LD_ADDR_VAR 0 4
52633: PUSH
52634: LD_INT 12
52636: NEG
52637: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52638: LD_VAR 0 1
52642: PPUSH
52643: LD_VAR 0 2
52647: PPUSH
52648: LD_VAR 0 3
52652: PPUSH
52653: LD_VAR 0 4
52657: PPUSH
52658: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52662: LD_VAR 0 1
52666: PPUSH
52667: LD_VAR 0 2
52671: PPUSH
52672: LD_VAR 0 3
52676: PPUSH
52677: CALL_OW 331
// end ;
52681: LD_VAR 0 5
52685: RET
// export function Video ( mode ) ; begin
52686: LD_INT 0
52688: PPUSH
// ingame_video = mode ;
52689: LD_ADDR_OWVAR 52
52693: PUSH
52694: LD_VAR 0 1
52698: ST_TO_ADDR
// interface_hidden = mode ;
52699: LD_ADDR_OWVAR 54
52703: PUSH
52704: LD_VAR 0 1
52708: ST_TO_ADDR
// end ;
52709: LD_VAR 0 2
52713: RET
// export function Join ( array , element ) ; begin
52714: LD_INT 0
52716: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52717: LD_ADDR_VAR 0 3
52721: PUSH
52722: LD_VAR 0 1
52726: PPUSH
52727: LD_VAR 0 1
52731: PUSH
52732: LD_INT 1
52734: PLUS
52735: PPUSH
52736: LD_VAR 0 2
52740: PPUSH
52741: CALL_OW 1
52745: ST_TO_ADDR
// end ;
52746: LD_VAR 0 3
52750: RET
// export function JoinUnion ( array , element ) ; begin
52751: LD_INT 0
52753: PPUSH
// result := array union element ;
52754: LD_ADDR_VAR 0 3
52758: PUSH
52759: LD_VAR 0 1
52763: PUSH
52764: LD_VAR 0 2
52768: UNION
52769: ST_TO_ADDR
// end ;
52770: LD_VAR 0 3
52774: RET
// export function GetBehemoths ( side ) ; begin
52775: LD_INT 0
52777: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52778: LD_ADDR_VAR 0 2
52782: PUSH
52783: LD_INT 22
52785: PUSH
52786: LD_VAR 0 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 31
52797: PUSH
52798: LD_INT 25
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PPUSH
52809: CALL_OW 69
52813: ST_TO_ADDR
// end ;
52814: LD_VAR 0 2
52818: RET
// export function Shuffle ( array ) ; var i , index ; begin
52819: LD_INT 0
52821: PPUSH
52822: PPUSH
52823: PPUSH
// result := [ ] ;
52824: LD_ADDR_VAR 0 2
52828: PUSH
52829: EMPTY
52830: ST_TO_ADDR
// if not array then
52831: LD_VAR 0 1
52835: NOT
52836: IFFALSE 52840
// exit ;
52838: GO 52939
// Randomize ;
52840: CALL_OW 10
// for i = array downto 1 do
52844: LD_ADDR_VAR 0 3
52848: PUSH
52849: DOUBLE
52850: LD_VAR 0 1
52854: INC
52855: ST_TO_ADDR
52856: LD_INT 1
52858: PUSH
52859: FOR_DOWNTO
52860: IFFALSE 52937
// begin index := rand ( 1 , array ) ;
52862: LD_ADDR_VAR 0 4
52866: PUSH
52867: LD_INT 1
52869: PPUSH
52870: LD_VAR 0 1
52874: PPUSH
52875: CALL_OW 12
52879: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52880: LD_ADDR_VAR 0 2
52884: PUSH
52885: LD_VAR 0 2
52889: PPUSH
52890: LD_VAR 0 2
52894: PUSH
52895: LD_INT 1
52897: PLUS
52898: PPUSH
52899: LD_VAR 0 1
52903: PUSH
52904: LD_VAR 0 4
52908: ARRAY
52909: PPUSH
52910: CALL_OW 2
52914: ST_TO_ADDR
// array := Delete ( array , index ) ;
52915: LD_ADDR_VAR 0 1
52919: PUSH
52920: LD_VAR 0 1
52924: PPUSH
52925: LD_VAR 0 4
52929: PPUSH
52930: CALL_OW 3
52934: ST_TO_ADDR
// end ;
52935: GO 52859
52937: POP
52938: POP
// end ;
52939: LD_VAR 0 2
52943: RET
// export function GetBaseMaterials ( base ) ; begin
52944: LD_INT 0
52946: PPUSH
// result := [ 0 , 0 , 0 ] ;
52947: LD_ADDR_VAR 0 2
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// if not base then
52966: LD_VAR 0 1
52970: NOT
52971: IFFALSE 52975
// exit ;
52973: GO 53024
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52975: LD_ADDR_VAR 0 2
52979: PUSH
52980: LD_VAR 0 1
52984: PPUSH
52985: LD_INT 1
52987: PPUSH
52988: CALL_OW 275
52992: PUSH
52993: LD_VAR 0 1
52997: PPUSH
52998: LD_INT 2
53000: PPUSH
53001: CALL_OW 275
53005: PUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: LD_INT 3
53013: PPUSH
53014: CALL_OW 275
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// end ;
53024: LD_VAR 0 2
53028: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53029: LD_INT 0
53031: PPUSH
53032: PPUSH
// result := array ;
53033: LD_ADDR_VAR 0 3
53037: PUSH
53038: LD_VAR 0 1
53042: ST_TO_ADDR
// if size >= result then
53043: LD_VAR 0 2
53047: PUSH
53048: LD_VAR 0 3
53052: GREATEREQUAL
53053: IFFALSE 53057
// exit ;
53055: GO 53107
// if size then
53057: LD_VAR 0 2
53061: IFFALSE 53107
// for i := array downto size do
53063: LD_ADDR_VAR 0 4
53067: PUSH
53068: DOUBLE
53069: LD_VAR 0 1
53073: INC
53074: ST_TO_ADDR
53075: LD_VAR 0 2
53079: PUSH
53080: FOR_DOWNTO
53081: IFFALSE 53105
// result := Delete ( result , result ) ;
53083: LD_ADDR_VAR 0 3
53087: PUSH
53088: LD_VAR 0 3
53092: PPUSH
53093: LD_VAR 0 3
53097: PPUSH
53098: CALL_OW 3
53102: ST_TO_ADDR
53103: GO 53080
53105: POP
53106: POP
// end ;
53107: LD_VAR 0 3
53111: RET
// export function ComExit ( unit ) ; var tmp ; begin
53112: LD_INT 0
53114: PPUSH
53115: PPUSH
// if not IsInUnit ( unit ) then
53116: LD_VAR 0 1
53120: PPUSH
53121: CALL_OW 310
53125: NOT
53126: IFFALSE 53130
// exit ;
53128: GO 53190
// tmp := IsInUnit ( unit ) ;
53130: LD_ADDR_VAR 0 3
53134: PUSH
53135: LD_VAR 0 1
53139: PPUSH
53140: CALL_OW 310
53144: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53145: LD_VAR 0 3
53149: PPUSH
53150: CALL_OW 247
53154: PUSH
53155: LD_INT 2
53157: EQUAL
53158: IFFALSE 53171
// ComExitVehicle ( unit ) else
53160: LD_VAR 0 1
53164: PPUSH
53165: CALL_OW 121
53169: GO 53180
// ComExitBuilding ( unit ) ;
53171: LD_VAR 0 1
53175: PPUSH
53176: CALL_OW 122
// result := tmp ;
53180: LD_ADDR_VAR 0 2
53184: PUSH
53185: LD_VAR 0 3
53189: ST_TO_ADDR
// end ;
53190: LD_VAR 0 2
53194: RET
// export function ComExitAll ( units ) ; var i ; begin
53195: LD_INT 0
53197: PPUSH
53198: PPUSH
// if not units then
53199: LD_VAR 0 1
53203: NOT
53204: IFFALSE 53208
// exit ;
53206: GO 53234
// for i in units do
53208: LD_ADDR_VAR 0 3
53212: PUSH
53213: LD_VAR 0 1
53217: PUSH
53218: FOR_IN
53219: IFFALSE 53232
// ComExit ( i ) ;
53221: LD_VAR 0 3
53225: PPUSH
53226: CALL 53112 0 1
53230: GO 53218
53232: POP
53233: POP
// end ;
53234: LD_VAR 0 2
53238: RET
// export function ResetHc ; begin
53239: LD_INT 0
53241: PPUSH
// InitHc ;
53242: CALL_OW 19
// hc_importance := 0 ;
53246: LD_ADDR_OWVAR 32
53250: PUSH
53251: LD_INT 0
53253: ST_TO_ADDR
// end ;
53254: LD_VAR 0 1
53258: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53259: LD_INT 0
53261: PPUSH
53262: PPUSH
53263: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53264: LD_ADDR_VAR 0 6
53268: PUSH
53269: LD_VAR 0 1
53273: PUSH
53274: LD_VAR 0 3
53278: PLUS
53279: PUSH
53280: LD_INT 2
53282: DIV
53283: ST_TO_ADDR
// if _x < 0 then
53284: LD_VAR 0 6
53288: PUSH
53289: LD_INT 0
53291: LESS
53292: IFFALSE 53309
// _x := _x * - 1 ;
53294: LD_ADDR_VAR 0 6
53298: PUSH
53299: LD_VAR 0 6
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: MUL
53308: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53309: LD_ADDR_VAR 0 7
53313: PUSH
53314: LD_VAR 0 2
53318: PUSH
53319: LD_VAR 0 4
53323: PLUS
53324: PUSH
53325: LD_INT 2
53327: DIV
53328: ST_TO_ADDR
// if _y < 0 then
53329: LD_VAR 0 7
53333: PUSH
53334: LD_INT 0
53336: LESS
53337: IFFALSE 53354
// _y := _y * - 1 ;
53339: LD_ADDR_VAR 0 7
53343: PUSH
53344: LD_VAR 0 7
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: MUL
53353: ST_TO_ADDR
// result := [ _x , _y ] ;
53354: LD_ADDR_VAR 0 5
53358: PUSH
53359: LD_VAR 0 6
53363: PUSH
53364: LD_VAR 0 7
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: ST_TO_ADDR
// end ;
53373: LD_VAR 0 5
53377: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53378: LD_INT 0
53380: PPUSH
53381: PPUSH
53382: PPUSH
53383: PPUSH
// task := GetTaskList ( unit ) ;
53384: LD_ADDR_VAR 0 7
53388: PUSH
53389: LD_VAR 0 1
53393: PPUSH
53394: CALL_OW 437
53398: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53399: LD_VAR 0 7
53403: NOT
53404: PUSH
53405: LD_VAR 0 1
53409: PPUSH
53410: LD_VAR 0 2
53414: PPUSH
53415: CALL_OW 308
53419: NOT
53420: AND
53421: IFFALSE 53425
// exit ;
53423: GO 53543
// if IsInArea ( unit , area ) then
53425: LD_VAR 0 1
53429: PPUSH
53430: LD_VAR 0 2
53434: PPUSH
53435: CALL_OW 308
53439: IFFALSE 53457
// begin ComMoveToArea ( unit , goAway ) ;
53441: LD_VAR 0 1
53445: PPUSH
53446: LD_VAR 0 3
53450: PPUSH
53451: CALL_OW 113
// exit ;
53455: GO 53543
// end ; if task [ 1 ] [ 1 ] <> M then
53457: LD_VAR 0 7
53461: PUSH
53462: LD_INT 1
53464: ARRAY
53465: PUSH
53466: LD_INT 1
53468: ARRAY
53469: PUSH
53470: LD_STRING M
53472: NONEQUAL
53473: IFFALSE 53477
// exit ;
53475: GO 53543
// x := task [ 1 ] [ 2 ] ;
53477: LD_ADDR_VAR 0 5
53481: PUSH
53482: LD_VAR 0 7
53486: PUSH
53487: LD_INT 1
53489: ARRAY
53490: PUSH
53491: LD_INT 2
53493: ARRAY
53494: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53495: LD_ADDR_VAR 0 6
53499: PUSH
53500: LD_VAR 0 7
53504: PUSH
53505: LD_INT 1
53507: ARRAY
53508: PUSH
53509: LD_INT 3
53511: ARRAY
53512: ST_TO_ADDR
// if InArea ( x , y , area ) then
53513: LD_VAR 0 5
53517: PPUSH
53518: LD_VAR 0 6
53522: PPUSH
53523: LD_VAR 0 2
53527: PPUSH
53528: CALL_OW 309
53532: IFFALSE 53543
// ComStop ( unit ) ;
53534: LD_VAR 0 1
53538: PPUSH
53539: CALL_OW 141
// end ;
53543: LD_VAR 0 4
53547: RET
// export function Abs ( value ) ; begin
53548: LD_INT 0
53550: PPUSH
// result := value ;
53551: LD_ADDR_VAR 0 2
53555: PUSH
53556: LD_VAR 0 1
53560: ST_TO_ADDR
// if value < 0 then
53561: LD_VAR 0 1
53565: PUSH
53566: LD_INT 0
53568: LESS
53569: IFFALSE 53586
// result := value * - 1 ;
53571: LD_ADDR_VAR 0 2
53575: PUSH
53576: LD_VAR 0 1
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: MUL
53585: ST_TO_ADDR
// end ;
53586: LD_VAR 0 2
53590: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53591: LD_INT 0
53593: PPUSH
53594: PPUSH
53595: PPUSH
53596: PPUSH
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
// if not unit or not building then
53601: LD_VAR 0 1
53605: NOT
53606: PUSH
53607: LD_VAR 0 2
53611: NOT
53612: OR
53613: IFFALSE 53617
// exit ;
53615: GO 53843
// x := GetX ( building ) ;
53617: LD_ADDR_VAR 0 4
53621: PUSH
53622: LD_VAR 0 2
53626: PPUSH
53627: CALL_OW 250
53631: ST_TO_ADDR
// y := GetY ( building ) ;
53632: LD_ADDR_VAR 0 6
53636: PUSH
53637: LD_VAR 0 2
53641: PPUSH
53642: CALL_OW 251
53646: ST_TO_ADDR
// d := GetDir ( building ) ;
53647: LD_ADDR_VAR 0 8
53651: PUSH
53652: LD_VAR 0 2
53656: PPUSH
53657: CALL_OW 254
53661: ST_TO_ADDR
// r := 4 ;
53662: LD_ADDR_VAR 0 9
53666: PUSH
53667: LD_INT 4
53669: ST_TO_ADDR
// for i := 1 to 5 do
53670: LD_ADDR_VAR 0 10
53674: PUSH
53675: DOUBLE
53676: LD_INT 1
53678: DEC
53679: ST_TO_ADDR
53680: LD_INT 5
53682: PUSH
53683: FOR_TO
53684: IFFALSE 53841
// begin _x := ShiftX ( x , d , r + i ) ;
53686: LD_ADDR_VAR 0 5
53690: PUSH
53691: LD_VAR 0 4
53695: PPUSH
53696: LD_VAR 0 8
53700: PPUSH
53701: LD_VAR 0 9
53705: PUSH
53706: LD_VAR 0 10
53710: PLUS
53711: PPUSH
53712: CALL_OW 272
53716: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53717: LD_ADDR_VAR 0 7
53721: PUSH
53722: LD_VAR 0 6
53726: PPUSH
53727: LD_VAR 0 8
53731: PPUSH
53732: LD_VAR 0 9
53736: PUSH
53737: LD_VAR 0 10
53741: PLUS
53742: PPUSH
53743: CALL_OW 273
53747: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53748: LD_VAR 0 5
53752: PPUSH
53753: LD_VAR 0 7
53757: PPUSH
53758: CALL_OW 488
53762: PUSH
53763: LD_VAR 0 5
53767: PPUSH
53768: LD_VAR 0 7
53772: PPUSH
53773: CALL_OW 428
53777: PPUSH
53778: CALL_OW 247
53782: PUSH
53783: LD_INT 3
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: IN
53793: NOT
53794: AND
53795: IFFALSE 53839
// begin ComMoveXY ( unit , _x , _y ) ;
53797: LD_VAR 0 1
53801: PPUSH
53802: LD_VAR 0 5
53806: PPUSH
53807: LD_VAR 0 7
53811: PPUSH
53812: CALL_OW 111
// result := [ _x , _y ] ;
53816: LD_ADDR_VAR 0 3
53820: PUSH
53821: LD_VAR 0 5
53825: PUSH
53826: LD_VAR 0 7
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: ST_TO_ADDR
// exit ;
53835: POP
53836: POP
53837: GO 53843
// end ; end ;
53839: GO 53683
53841: POP
53842: POP
// end ;
53843: LD_VAR 0 3
53847: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53848: LD_INT 0
53850: PPUSH
53851: PPUSH
53852: PPUSH
// result := 0 ;
53853: LD_ADDR_VAR 0 3
53857: PUSH
53858: LD_INT 0
53860: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53861: LD_VAR 0 1
53865: PUSH
53866: LD_INT 0
53868: LESS
53869: PUSH
53870: LD_VAR 0 1
53874: PUSH
53875: LD_INT 8
53877: GREATER
53878: OR
53879: PUSH
53880: LD_VAR 0 2
53884: PUSH
53885: LD_INT 0
53887: LESS
53888: OR
53889: PUSH
53890: LD_VAR 0 2
53894: PUSH
53895: LD_INT 8
53897: GREATER
53898: OR
53899: IFFALSE 53903
// exit ;
53901: GO 53978
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53903: LD_ADDR_VAR 0 4
53907: PUSH
53908: LD_INT 22
53910: PUSH
53911: LD_VAR 0 2
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PPUSH
53920: CALL_OW 69
53924: PUSH
53925: FOR_IN
53926: IFFALSE 53976
// begin un := UnitShoot ( i ) ;
53928: LD_ADDR_VAR 0 5
53932: PUSH
53933: LD_VAR 0 4
53937: PPUSH
53938: CALL_OW 504
53942: ST_TO_ADDR
// if GetSide ( un ) = side1 then
53943: LD_VAR 0 5
53947: PPUSH
53948: CALL_OW 255
53952: PUSH
53953: LD_VAR 0 1
53957: EQUAL
53958: IFFALSE 53974
// begin result := un ;
53960: LD_ADDR_VAR 0 3
53964: PUSH
53965: LD_VAR 0 5
53969: ST_TO_ADDR
// exit ;
53970: POP
53971: POP
53972: GO 53978
// end ; end ;
53974: GO 53925
53976: POP
53977: POP
// end ;
53978: LD_VAR 0 3
53982: RET
// export function GetCargoBay ( units ) ; begin
53983: LD_INT 0
53985: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
53986: LD_ADDR_VAR 0 2
53990: PUSH
53991: LD_VAR 0 1
53995: PPUSH
53996: LD_INT 2
53998: PUSH
53999: LD_INT 34
54001: PUSH
54002: LD_INT 12
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 34
54011: PUSH
54012: LD_INT 51
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 34
54021: PUSH
54022: LD_INT 32
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 34
54031: PUSH
54032: LD_INT 89
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: PPUSH
54046: CALL_OW 72
54050: ST_TO_ADDR
// end ;
54051: LD_VAR 0 2
54055: RET
// export function Negate ( value ) ; begin
54056: LD_INT 0
54058: PPUSH
// result := not value ;
54059: LD_ADDR_VAR 0 2
54063: PUSH
54064: LD_VAR 0 1
54068: NOT
54069: ST_TO_ADDR
// end ;
54070: LD_VAR 0 2
54074: RET
// export function Inc ( value ) ; begin
54075: LD_INT 0
54077: PPUSH
// result := value + 1 ;
54078: LD_ADDR_VAR 0 2
54082: PUSH
54083: LD_VAR 0 1
54087: PUSH
54088: LD_INT 1
54090: PLUS
54091: ST_TO_ADDR
// end ;
54092: LD_VAR 0 2
54096: RET
// export function Dec ( value ) ; begin
54097: LD_INT 0
54099: PPUSH
// result := value - 1 ;
54100: LD_ADDR_VAR 0 2
54104: PUSH
54105: LD_VAR 0 1
54109: PUSH
54110: LD_INT 1
54112: MINUS
54113: ST_TO_ADDR
// end ;
54114: LD_VAR 0 2
54118: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54119: LD_INT 0
54121: PPUSH
54122: PPUSH
54123: PPUSH
54124: PPUSH
54125: PPUSH
54126: PPUSH
54127: PPUSH
54128: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54129: LD_VAR 0 1
54133: PPUSH
54134: LD_VAR 0 2
54138: PPUSH
54139: CALL_OW 488
54143: NOT
54144: PUSH
54145: LD_VAR 0 3
54149: PPUSH
54150: LD_VAR 0 4
54154: PPUSH
54155: CALL_OW 488
54159: NOT
54160: OR
54161: IFFALSE 54174
// begin result := - 1 ;
54163: LD_ADDR_VAR 0 5
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: ST_TO_ADDR
// exit ;
54172: GO 54409
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54174: LD_ADDR_VAR 0 12
54178: PUSH
54179: LD_VAR 0 1
54183: PPUSH
54184: LD_VAR 0 2
54188: PPUSH
54189: LD_VAR 0 3
54193: PPUSH
54194: LD_VAR 0 4
54198: PPUSH
54199: CALL 53259 0 4
54203: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54204: LD_ADDR_VAR 0 11
54208: PUSH
54209: LD_VAR 0 1
54213: PPUSH
54214: LD_VAR 0 2
54218: PPUSH
54219: LD_VAR 0 12
54223: PUSH
54224: LD_INT 1
54226: ARRAY
54227: PPUSH
54228: LD_VAR 0 12
54232: PUSH
54233: LD_INT 2
54235: ARRAY
54236: PPUSH
54237: CALL_OW 298
54241: ST_TO_ADDR
// distance := 9999 ;
54242: LD_ADDR_VAR 0 10
54246: PUSH
54247: LD_INT 9999
54249: ST_TO_ADDR
// for i := 0 to 5 do
54250: LD_ADDR_VAR 0 6
54254: PUSH
54255: DOUBLE
54256: LD_INT 0
54258: DEC
54259: ST_TO_ADDR
54260: LD_INT 5
54262: PUSH
54263: FOR_TO
54264: IFFALSE 54407
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54266: LD_ADDR_VAR 0 7
54270: PUSH
54271: LD_VAR 0 1
54275: PPUSH
54276: LD_VAR 0 6
54280: PPUSH
54281: LD_VAR 0 11
54285: PPUSH
54286: CALL_OW 272
54290: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54291: LD_ADDR_VAR 0 8
54295: PUSH
54296: LD_VAR 0 2
54300: PPUSH
54301: LD_VAR 0 6
54305: PPUSH
54306: LD_VAR 0 11
54310: PPUSH
54311: CALL_OW 273
54315: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54316: LD_VAR 0 7
54320: PPUSH
54321: LD_VAR 0 8
54325: PPUSH
54326: CALL_OW 488
54330: NOT
54331: IFFALSE 54335
// continue ;
54333: GO 54263
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54335: LD_ADDR_VAR 0 9
54339: PUSH
54340: LD_VAR 0 12
54344: PUSH
54345: LD_INT 1
54347: ARRAY
54348: PPUSH
54349: LD_VAR 0 12
54353: PUSH
54354: LD_INT 2
54356: ARRAY
54357: PPUSH
54358: LD_VAR 0 7
54362: PPUSH
54363: LD_VAR 0 8
54367: PPUSH
54368: CALL_OW 298
54372: ST_TO_ADDR
// if tmp < distance then
54373: LD_VAR 0 9
54377: PUSH
54378: LD_VAR 0 10
54382: LESS
54383: IFFALSE 54405
// begin result := i ;
54385: LD_ADDR_VAR 0 5
54389: PUSH
54390: LD_VAR 0 6
54394: ST_TO_ADDR
// distance := tmp ;
54395: LD_ADDR_VAR 0 10
54399: PUSH
54400: LD_VAR 0 9
54404: ST_TO_ADDR
// end ; end ;
54405: GO 54263
54407: POP
54408: POP
// end ;
54409: LD_VAR 0 5
54413: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54414: LD_INT 0
54416: PPUSH
54417: PPUSH
// if not driver or not IsInUnit ( driver ) then
54418: LD_VAR 0 1
54422: NOT
54423: PUSH
54424: LD_VAR 0 1
54428: PPUSH
54429: CALL_OW 310
54433: NOT
54434: OR
54435: IFFALSE 54439
// exit ;
54437: GO 54529
// vehicle := IsInUnit ( driver ) ;
54439: LD_ADDR_VAR 0 3
54443: PUSH
54444: LD_VAR 0 1
54448: PPUSH
54449: CALL_OW 310
54453: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54454: LD_VAR 0 1
54458: PPUSH
54459: LD_STRING \
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: LD_INT 0
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: PUSH
54489: LD_STRING E
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_VAR 0 3
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PPUSH
54525: CALL_OW 446
// end ;
54529: LD_VAR 0 2
54533: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54534: LD_INT 0
54536: PPUSH
54537: PPUSH
// if not driver or not IsInUnit ( driver ) then
54538: LD_VAR 0 1
54542: NOT
54543: PUSH
54544: LD_VAR 0 1
54548: PPUSH
54549: CALL_OW 310
54553: NOT
54554: OR
54555: IFFALSE 54559
// exit ;
54557: GO 54649
// vehicle := IsInUnit ( driver ) ;
54559: LD_ADDR_VAR 0 3
54563: PUSH
54564: LD_VAR 0 1
54568: PPUSH
54569: CALL_OW 310
54573: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54574: LD_VAR 0 1
54578: PPUSH
54579: LD_STRING \
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: PUSH
54609: LD_STRING E
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: LD_VAR 0 3
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 0
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PPUSH
54645: CALL_OW 447
// end ;
54649: LD_VAR 0 2
54653: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54654: LD_INT 0
54656: PPUSH
54657: PPUSH
54658: PPUSH
// tmp := [ ] ;
54659: LD_ADDR_VAR 0 5
54663: PUSH
54664: EMPTY
54665: ST_TO_ADDR
// for i in units do
54666: LD_ADDR_VAR 0 4
54670: PUSH
54671: LD_VAR 0 1
54675: PUSH
54676: FOR_IN
54677: IFFALSE 54715
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54679: LD_ADDR_VAR 0 5
54683: PUSH
54684: LD_VAR 0 5
54688: PPUSH
54689: LD_VAR 0 5
54693: PUSH
54694: LD_INT 1
54696: PLUS
54697: PPUSH
54698: LD_VAR 0 4
54702: PPUSH
54703: CALL_OW 256
54707: PPUSH
54708: CALL_OW 2
54712: ST_TO_ADDR
54713: GO 54676
54715: POP
54716: POP
// if not tmp then
54717: LD_VAR 0 5
54721: NOT
54722: IFFALSE 54726
// exit ;
54724: GO 54774
// if asc then
54726: LD_VAR 0 2
54730: IFFALSE 54754
// result := SortListByListAsc ( units , tmp ) else
54732: LD_ADDR_VAR 0 3
54736: PUSH
54737: LD_VAR 0 1
54741: PPUSH
54742: LD_VAR 0 5
54746: PPUSH
54747: CALL_OW 76
54751: ST_TO_ADDR
54752: GO 54774
// result := SortListByListDesc ( units , tmp ) ;
54754: LD_ADDR_VAR 0 3
54758: PUSH
54759: LD_VAR 0 1
54763: PPUSH
54764: LD_VAR 0 5
54768: PPUSH
54769: CALL_OW 77
54773: ST_TO_ADDR
// end ;
54774: LD_VAR 0 3
54778: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54779: LD_INT 0
54781: PPUSH
54782: PPUSH
// task := GetTaskList ( mech ) ;
54783: LD_ADDR_VAR 0 4
54787: PUSH
54788: LD_VAR 0 1
54792: PPUSH
54793: CALL_OW 437
54797: ST_TO_ADDR
// if not task then
54798: LD_VAR 0 4
54802: NOT
54803: IFFALSE 54807
// exit ;
54805: GO 54849
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54807: LD_ADDR_VAR 0 3
54811: PUSH
54812: LD_VAR 0 4
54816: PUSH
54817: LD_INT 1
54819: ARRAY
54820: PUSH
54821: LD_INT 1
54823: ARRAY
54824: PUSH
54825: LD_STRING r
54827: EQUAL
54828: PUSH
54829: LD_VAR 0 4
54833: PUSH
54834: LD_INT 1
54836: ARRAY
54837: PUSH
54838: LD_INT 4
54840: ARRAY
54841: PUSH
54842: LD_VAR 0 2
54846: EQUAL
54847: AND
54848: ST_TO_ADDR
// end ;
54849: LD_VAR 0 3
54853: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54854: LD_INT 0
54856: PPUSH
// SetDir ( unit , d ) ;
54857: LD_VAR 0 1
54861: PPUSH
54862: LD_VAR 0 4
54866: PPUSH
54867: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54871: LD_VAR 0 1
54875: PPUSH
54876: LD_VAR 0 2
54880: PPUSH
54881: LD_VAR 0 3
54885: PPUSH
54886: LD_VAR 0 5
54890: PPUSH
54891: CALL_OW 48
// end ;
54895: LD_VAR 0 6
54899: RET
// export function ToNaturalNumber ( number ) ; begin
54900: LD_INT 0
54902: PPUSH
// result := number div 1 ;
54903: LD_ADDR_VAR 0 2
54907: PUSH
54908: LD_VAR 0 1
54912: PUSH
54913: LD_INT 1
54915: DIV
54916: ST_TO_ADDR
// if number < 0 then
54917: LD_VAR 0 1
54921: PUSH
54922: LD_INT 0
54924: LESS
54925: IFFALSE 54935
// result := 0 ;
54927: LD_ADDR_VAR 0 2
54931: PUSH
54932: LD_INT 0
54934: ST_TO_ADDR
// end ;
54935: LD_VAR 0 2
54939: RET
// export function SortByClass ( units , class ) ; var un ; begin
54940: LD_INT 0
54942: PPUSH
54943: PPUSH
// if not units or not class then
54944: LD_VAR 0 1
54948: NOT
54949: PUSH
54950: LD_VAR 0 2
54954: NOT
54955: OR
54956: IFFALSE 54960
// exit ;
54958: GO 55055
// result := [ ] ;
54960: LD_ADDR_VAR 0 3
54964: PUSH
54965: EMPTY
54966: ST_TO_ADDR
// for un in units do
54967: LD_ADDR_VAR 0 4
54971: PUSH
54972: LD_VAR 0 1
54976: PUSH
54977: FOR_IN
54978: IFFALSE 55053
// if GetClass ( un ) = class then
54980: LD_VAR 0 4
54984: PPUSH
54985: CALL_OW 257
54989: PUSH
54990: LD_VAR 0 2
54994: EQUAL
54995: IFFALSE 55022
// result := Insert ( result , 1 , un ) else
54997: LD_ADDR_VAR 0 3
55001: PUSH
55002: LD_VAR 0 3
55006: PPUSH
55007: LD_INT 1
55009: PPUSH
55010: LD_VAR 0 4
55014: PPUSH
55015: CALL_OW 2
55019: ST_TO_ADDR
55020: GO 55051
// result := Replace ( result , result + 1 , un ) ;
55022: LD_ADDR_VAR 0 3
55026: PUSH
55027: LD_VAR 0 3
55031: PPUSH
55032: LD_VAR 0 3
55036: PUSH
55037: LD_INT 1
55039: PLUS
55040: PPUSH
55041: LD_VAR 0 4
55045: PPUSH
55046: CALL_OW 1
55050: ST_TO_ADDR
55051: GO 54977
55053: POP
55054: POP
// end ;
55055: LD_VAR 0 3
55059: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55060: LD_INT 0
55062: PPUSH
55063: PPUSH
55064: PPUSH
55065: PPUSH
55066: PPUSH
55067: PPUSH
55068: PPUSH
// result := [ ] ;
55069: LD_ADDR_VAR 0 4
55073: PUSH
55074: EMPTY
55075: ST_TO_ADDR
// if x - r < 0 then
55076: LD_VAR 0 1
55080: PUSH
55081: LD_VAR 0 3
55085: MINUS
55086: PUSH
55087: LD_INT 0
55089: LESS
55090: IFFALSE 55102
// min_x := 0 else
55092: LD_ADDR_VAR 0 8
55096: PUSH
55097: LD_INT 0
55099: ST_TO_ADDR
55100: GO 55118
// min_x := x - r ;
55102: LD_ADDR_VAR 0 8
55106: PUSH
55107: LD_VAR 0 1
55111: PUSH
55112: LD_VAR 0 3
55116: MINUS
55117: ST_TO_ADDR
// if y - r < 0 then
55118: LD_VAR 0 2
55122: PUSH
55123: LD_VAR 0 3
55127: MINUS
55128: PUSH
55129: LD_INT 0
55131: LESS
55132: IFFALSE 55144
// min_y := 0 else
55134: LD_ADDR_VAR 0 7
55138: PUSH
55139: LD_INT 0
55141: ST_TO_ADDR
55142: GO 55160
// min_y := y - r ;
55144: LD_ADDR_VAR 0 7
55148: PUSH
55149: LD_VAR 0 2
55153: PUSH
55154: LD_VAR 0 3
55158: MINUS
55159: ST_TO_ADDR
// max_x := x + r ;
55160: LD_ADDR_VAR 0 9
55164: PUSH
55165: LD_VAR 0 1
55169: PUSH
55170: LD_VAR 0 3
55174: PLUS
55175: ST_TO_ADDR
// max_y := y + r ;
55176: LD_ADDR_VAR 0 10
55180: PUSH
55181: LD_VAR 0 2
55185: PUSH
55186: LD_VAR 0 3
55190: PLUS
55191: ST_TO_ADDR
// for _x = min_x to max_x do
55192: LD_ADDR_VAR 0 5
55196: PUSH
55197: DOUBLE
55198: LD_VAR 0 8
55202: DEC
55203: ST_TO_ADDR
55204: LD_VAR 0 9
55208: PUSH
55209: FOR_TO
55210: IFFALSE 55311
// for _y = min_y to max_y do
55212: LD_ADDR_VAR 0 6
55216: PUSH
55217: DOUBLE
55218: LD_VAR 0 7
55222: DEC
55223: ST_TO_ADDR
55224: LD_VAR 0 10
55228: PUSH
55229: FOR_TO
55230: IFFALSE 55307
// begin if not ValidHex ( _x , _y ) then
55232: LD_VAR 0 5
55236: PPUSH
55237: LD_VAR 0 6
55241: PPUSH
55242: CALL_OW 488
55246: NOT
55247: IFFALSE 55251
// continue ;
55249: GO 55229
// if GetResourceTypeXY ( _x , _y ) then
55251: LD_VAR 0 5
55255: PPUSH
55256: LD_VAR 0 6
55260: PPUSH
55261: CALL_OW 283
55265: IFFALSE 55305
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55267: LD_ADDR_VAR 0 4
55271: PUSH
55272: LD_VAR 0 4
55276: PPUSH
55277: LD_VAR 0 4
55281: PUSH
55282: LD_INT 1
55284: PLUS
55285: PPUSH
55286: LD_VAR 0 5
55290: PUSH
55291: LD_VAR 0 6
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PPUSH
55300: CALL_OW 1
55304: ST_TO_ADDR
// end ;
55305: GO 55229
55307: POP
55308: POP
55309: GO 55209
55311: POP
55312: POP
// end ;
55313: LD_VAR 0 4
55317: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55318: LD_INT 0
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
// if not units then
55328: LD_VAR 0 1
55332: NOT
55333: IFFALSE 55337
// exit ;
55335: GO 55865
// result := UnitFilter ( units , [ f_ok ] ) ;
55337: LD_ADDR_VAR 0 3
55341: PUSH
55342: LD_VAR 0 1
55346: PPUSH
55347: LD_INT 50
55349: PUSH
55350: EMPTY
55351: LIST
55352: PPUSH
55353: CALL_OW 72
55357: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55358: LD_ADDR_VAR 0 8
55362: PUSH
55363: LD_VAR 0 1
55367: PUSH
55368: LD_INT 1
55370: ARRAY
55371: PPUSH
55372: CALL_OW 255
55376: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55377: LD_ADDR_VAR 0 10
55381: PUSH
55382: LD_INT 29
55384: PUSH
55385: LD_INT 91
55387: PUSH
55388: LD_INT 49
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: ST_TO_ADDR
// if not result then
55396: LD_VAR 0 3
55400: NOT
55401: IFFALSE 55405
// exit ;
55403: GO 55865
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55405: LD_ADDR_VAR 0 5
55409: PUSH
55410: LD_INT 81
55412: PUSH
55413: LD_VAR 0 8
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PPUSH
55422: CALL_OW 69
55426: ST_TO_ADDR
// for i in result do
55427: LD_ADDR_VAR 0 4
55431: PUSH
55432: LD_VAR 0 3
55436: PUSH
55437: FOR_IN
55438: IFFALSE 55863
// begin tag := GetTag ( i ) + 1 ;
55440: LD_ADDR_VAR 0 9
55444: PUSH
55445: LD_VAR 0 4
55449: PPUSH
55450: CALL_OW 110
55454: PUSH
55455: LD_INT 1
55457: PLUS
55458: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55459: LD_ADDR_VAR 0 7
55463: PUSH
55464: LD_VAR 0 4
55468: PPUSH
55469: CALL_OW 250
55473: PPUSH
55474: LD_VAR 0 4
55478: PPUSH
55479: CALL_OW 251
55483: PPUSH
55484: LD_INT 4
55486: PPUSH
55487: CALL 55060 0 3
55491: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55492: LD_VAR 0 4
55496: PPUSH
55497: CALL_OW 247
55501: PUSH
55502: LD_INT 2
55504: EQUAL
55505: PUSH
55506: LD_VAR 0 7
55510: PUSH
55511: LD_INT 2
55513: GREATER
55514: AND
55515: PUSH
55516: LD_VAR 0 4
55520: PPUSH
55521: CALL_OW 264
55525: PUSH
55526: LD_VAR 0 10
55530: IN
55531: NOT
55532: AND
55533: IFFALSE 55572
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55535: LD_VAR 0 4
55539: PPUSH
55540: LD_VAR 0 7
55544: PUSH
55545: LD_INT 1
55547: ARRAY
55548: PUSH
55549: LD_INT 1
55551: ARRAY
55552: PPUSH
55553: LD_VAR 0 7
55557: PUSH
55558: LD_INT 1
55560: ARRAY
55561: PUSH
55562: LD_INT 2
55564: ARRAY
55565: PPUSH
55566: CALL_OW 116
55570: GO 55861
// if path > tag then
55572: LD_VAR 0 2
55576: PUSH
55577: LD_VAR 0 9
55581: GREATER
55582: IFFALSE 55790
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55584: LD_ADDR_VAR 0 6
55588: PUSH
55589: LD_VAR 0 5
55593: PPUSH
55594: LD_INT 91
55596: PUSH
55597: LD_VAR 0 4
55601: PUSH
55602: LD_INT 8
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: PPUSH
55610: CALL_OW 72
55614: ST_TO_ADDR
// if nearEnemy then
55615: LD_VAR 0 6
55619: IFFALSE 55688
// begin if GetWeapon ( i ) = ru_time_lapser then
55621: LD_VAR 0 4
55625: PPUSH
55626: CALL_OW 264
55630: PUSH
55631: LD_INT 49
55633: EQUAL
55634: IFFALSE 55662
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55636: LD_VAR 0 4
55640: PPUSH
55641: LD_VAR 0 6
55645: PPUSH
55646: LD_VAR 0 4
55650: PPUSH
55651: CALL_OW 74
55655: PPUSH
55656: CALL_OW 112
55660: GO 55686
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55662: LD_VAR 0 4
55666: PPUSH
55667: LD_VAR 0 6
55671: PPUSH
55672: LD_VAR 0 4
55676: PPUSH
55677: CALL_OW 74
55681: PPUSH
55682: CALL 56936 0 2
// end else
55686: GO 55788
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55688: LD_VAR 0 4
55692: PPUSH
55693: LD_VAR 0 2
55697: PUSH
55698: LD_VAR 0 9
55702: ARRAY
55703: PUSH
55704: LD_INT 1
55706: ARRAY
55707: PPUSH
55708: LD_VAR 0 2
55712: PUSH
55713: LD_VAR 0 9
55717: ARRAY
55718: PUSH
55719: LD_INT 2
55721: ARRAY
55722: PPUSH
55723: CALL_OW 297
55727: PUSH
55728: LD_INT 6
55730: GREATER
55731: IFFALSE 55774
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55733: LD_VAR 0 4
55737: PPUSH
55738: LD_VAR 0 2
55742: PUSH
55743: LD_VAR 0 9
55747: ARRAY
55748: PUSH
55749: LD_INT 1
55751: ARRAY
55752: PPUSH
55753: LD_VAR 0 2
55757: PUSH
55758: LD_VAR 0 9
55762: ARRAY
55763: PUSH
55764: LD_INT 2
55766: ARRAY
55767: PPUSH
55768: CALL_OW 114
55772: GO 55788
// SetTag ( i , tag ) ;
55774: LD_VAR 0 4
55778: PPUSH
55779: LD_VAR 0 9
55783: PPUSH
55784: CALL_OW 109
// end else
55788: GO 55861
// if enemy then
55790: LD_VAR 0 5
55794: IFFALSE 55861
// begin if GetWeapon ( i ) = ru_time_lapser then
55796: LD_VAR 0 4
55800: PPUSH
55801: CALL_OW 264
55805: PUSH
55806: LD_INT 49
55808: EQUAL
55809: IFFALSE 55837
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55811: LD_VAR 0 4
55815: PPUSH
55816: LD_VAR 0 5
55820: PPUSH
55821: LD_VAR 0 4
55825: PPUSH
55826: CALL_OW 74
55830: PPUSH
55831: CALL_OW 112
55835: GO 55861
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55837: LD_VAR 0 4
55841: PPUSH
55842: LD_VAR 0 5
55846: PPUSH
55847: LD_VAR 0 4
55851: PPUSH
55852: CALL_OW 74
55856: PPUSH
55857: CALL 56936 0 2
// end ; end ;
55861: GO 55437
55863: POP
55864: POP
// end ;
55865: LD_VAR 0 3
55869: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55870: LD_INT 0
55872: PPUSH
55873: PPUSH
55874: PPUSH
// if not unit or IsInUnit ( unit ) then
55875: LD_VAR 0 1
55879: NOT
55880: PUSH
55881: LD_VAR 0 1
55885: PPUSH
55886: CALL_OW 310
55890: OR
55891: IFFALSE 55895
// exit ;
55893: GO 55986
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55895: LD_ADDR_VAR 0 4
55899: PUSH
55900: LD_VAR 0 1
55904: PPUSH
55905: CALL_OW 250
55909: PPUSH
55910: LD_VAR 0 2
55914: PPUSH
55915: LD_INT 1
55917: PPUSH
55918: CALL_OW 272
55922: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
55923: LD_ADDR_VAR 0 5
55927: PUSH
55928: LD_VAR 0 1
55932: PPUSH
55933: CALL_OW 251
55937: PPUSH
55938: LD_VAR 0 2
55942: PPUSH
55943: LD_INT 1
55945: PPUSH
55946: CALL_OW 273
55950: ST_TO_ADDR
// if ValidHex ( x , y ) then
55951: LD_VAR 0 4
55955: PPUSH
55956: LD_VAR 0 5
55960: PPUSH
55961: CALL_OW 488
55965: IFFALSE 55986
// ComTurnXY ( unit , x , y ) ;
55967: LD_VAR 0 1
55971: PPUSH
55972: LD_VAR 0 4
55976: PPUSH
55977: LD_VAR 0 5
55981: PPUSH
55982: CALL_OW 118
// end ;
55986: LD_VAR 0 3
55990: RET
// export function SeeUnits ( side , units ) ; var i ; begin
55991: LD_INT 0
55993: PPUSH
55994: PPUSH
// result := false ;
55995: LD_ADDR_VAR 0 3
55999: PUSH
56000: LD_INT 0
56002: ST_TO_ADDR
// if not units then
56003: LD_VAR 0 2
56007: NOT
56008: IFFALSE 56012
// exit ;
56010: GO 56057
// for i in units do
56012: LD_ADDR_VAR 0 4
56016: PUSH
56017: LD_VAR 0 2
56021: PUSH
56022: FOR_IN
56023: IFFALSE 56055
// if See ( side , i ) then
56025: LD_VAR 0 1
56029: PPUSH
56030: LD_VAR 0 4
56034: PPUSH
56035: CALL_OW 292
56039: IFFALSE 56053
// begin result := true ;
56041: LD_ADDR_VAR 0 3
56045: PUSH
56046: LD_INT 1
56048: ST_TO_ADDR
// exit ;
56049: POP
56050: POP
56051: GO 56057
// end ;
56053: GO 56022
56055: POP
56056: POP
// end ;
56057: LD_VAR 0 3
56061: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56062: LD_INT 0
56064: PPUSH
56065: PPUSH
56066: PPUSH
56067: PPUSH
// if not unit or not points then
56068: LD_VAR 0 1
56072: NOT
56073: PUSH
56074: LD_VAR 0 2
56078: NOT
56079: OR
56080: IFFALSE 56084
// exit ;
56082: GO 56174
// dist := 99999 ;
56084: LD_ADDR_VAR 0 5
56088: PUSH
56089: LD_INT 99999
56091: ST_TO_ADDR
// for i in points do
56092: LD_ADDR_VAR 0 4
56096: PUSH
56097: LD_VAR 0 2
56101: PUSH
56102: FOR_IN
56103: IFFALSE 56172
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56105: LD_ADDR_VAR 0 6
56109: PUSH
56110: LD_VAR 0 1
56114: PPUSH
56115: LD_VAR 0 4
56119: PUSH
56120: LD_INT 1
56122: ARRAY
56123: PPUSH
56124: LD_VAR 0 4
56128: PUSH
56129: LD_INT 2
56131: ARRAY
56132: PPUSH
56133: CALL_OW 297
56137: ST_TO_ADDR
// if tmpDist < dist then
56138: LD_VAR 0 6
56142: PUSH
56143: LD_VAR 0 5
56147: LESS
56148: IFFALSE 56170
// begin result := i ;
56150: LD_ADDR_VAR 0 3
56154: PUSH
56155: LD_VAR 0 4
56159: ST_TO_ADDR
// dist := tmpDist ;
56160: LD_ADDR_VAR 0 5
56164: PUSH
56165: LD_VAR 0 6
56169: ST_TO_ADDR
// end ; end ;
56170: GO 56102
56172: POP
56173: POP
// end ;
56174: LD_VAR 0 3
56178: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56179: LD_INT 0
56181: PPUSH
// uc_side := side ;
56182: LD_ADDR_OWVAR 20
56186: PUSH
56187: LD_VAR 0 1
56191: ST_TO_ADDR
// uc_nation := 3 ;
56192: LD_ADDR_OWVAR 21
56196: PUSH
56197: LD_INT 3
56199: ST_TO_ADDR
// vc_chassis := 25 ;
56200: LD_ADDR_OWVAR 37
56204: PUSH
56205: LD_INT 25
56207: ST_TO_ADDR
// vc_engine := engine_siberite ;
56208: LD_ADDR_OWVAR 39
56212: PUSH
56213: LD_INT 3
56215: ST_TO_ADDR
// vc_control := control_computer ;
56216: LD_ADDR_OWVAR 38
56220: PUSH
56221: LD_INT 3
56223: ST_TO_ADDR
// vc_weapon := 59 ;
56224: LD_ADDR_OWVAR 40
56228: PUSH
56229: LD_INT 59
56231: ST_TO_ADDR
// result := CreateVehicle ;
56232: LD_ADDR_VAR 0 5
56236: PUSH
56237: CALL_OW 45
56241: ST_TO_ADDR
// SetDir ( result , d ) ;
56242: LD_VAR 0 5
56246: PPUSH
56247: LD_VAR 0 4
56251: PPUSH
56252: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56256: LD_VAR 0 5
56260: PPUSH
56261: LD_VAR 0 2
56265: PPUSH
56266: LD_VAR 0 3
56270: PPUSH
56271: LD_INT 0
56273: PPUSH
56274: CALL_OW 48
// end ;
56278: LD_VAR 0 5
56282: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56283: LD_INT 0
56285: PPUSH
56286: PPUSH
56287: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56288: LD_ADDR_VAR 0 2
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56311: LD_VAR 0 1
56315: NOT
56316: PUSH
56317: LD_VAR 0 1
56321: PPUSH
56322: CALL_OW 264
56326: PUSH
56327: LD_INT 12
56329: PUSH
56330: LD_INT 51
56332: PUSH
56333: LD_INT 32
56335: PUSH
56336: LD_INT 89
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: IN
56345: NOT
56346: OR
56347: IFFALSE 56351
// exit ;
56349: GO 56449
// for i := 1 to 3 do
56351: LD_ADDR_VAR 0 3
56355: PUSH
56356: DOUBLE
56357: LD_INT 1
56359: DEC
56360: ST_TO_ADDR
56361: LD_INT 3
56363: PUSH
56364: FOR_TO
56365: IFFALSE 56447
// begin tmp := GetCargo ( cargo , i ) ;
56367: LD_ADDR_VAR 0 4
56371: PUSH
56372: LD_VAR 0 1
56376: PPUSH
56377: LD_VAR 0 3
56381: PPUSH
56382: CALL_OW 289
56386: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56387: LD_ADDR_VAR 0 2
56391: PUSH
56392: LD_VAR 0 2
56396: PPUSH
56397: LD_VAR 0 3
56401: PPUSH
56402: LD_VAR 0 4
56406: PPUSH
56407: CALL_OW 1
56411: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56412: LD_ADDR_VAR 0 2
56416: PUSH
56417: LD_VAR 0 2
56421: PPUSH
56422: LD_INT 4
56424: PPUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_INT 4
56432: ARRAY
56433: PUSH
56434: LD_VAR 0 4
56438: PLUS
56439: PPUSH
56440: CALL_OW 1
56444: ST_TO_ADDR
// end ;
56445: GO 56364
56447: POP
56448: POP
// end ;
56449: LD_VAR 0 2
56453: RET
// export function Length ( array ) ; begin
56454: LD_INT 0
56456: PPUSH
// result := array + 0 ;
56457: LD_ADDR_VAR 0 2
56461: PUSH
56462: LD_VAR 0 1
56466: PUSH
56467: LD_INT 0
56469: PLUS
56470: ST_TO_ADDR
// end ;
56471: LD_VAR 0 2
56475: RET
// export function PrepareArray ( array ) ; begin
56476: LD_INT 0
56478: PPUSH
// result := array diff 0 ;
56479: LD_ADDR_VAR 0 2
56483: PUSH
56484: LD_VAR 0 1
56488: PUSH
56489: LD_INT 0
56491: DIFF
56492: ST_TO_ADDR
// if not result [ 1 ] then
56493: LD_VAR 0 2
56497: PUSH
56498: LD_INT 1
56500: ARRAY
56501: NOT
56502: IFFALSE 56522
// result := Delete ( result , 1 ) ;
56504: LD_ADDR_VAR 0 2
56508: PUSH
56509: LD_VAR 0 2
56513: PPUSH
56514: LD_INT 1
56516: PPUSH
56517: CALL_OW 3
56521: ST_TO_ADDR
// end ;
56522: LD_VAR 0 2
56526: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56527: LD_INT 0
56529: PPUSH
56530: PPUSH
56531: PPUSH
56532: PPUSH
// sibRocketRange := 25 ;
56533: LD_ADDR_VAR 0 6
56537: PUSH
56538: LD_INT 25
56540: ST_TO_ADDR
// result := false ;
56541: LD_ADDR_VAR 0 4
56545: PUSH
56546: LD_INT 0
56548: ST_TO_ADDR
// for i := 0 to 5 do
56549: LD_ADDR_VAR 0 5
56553: PUSH
56554: DOUBLE
56555: LD_INT 0
56557: DEC
56558: ST_TO_ADDR
56559: LD_INT 5
56561: PUSH
56562: FOR_TO
56563: IFFALSE 56630
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56565: LD_VAR 0 1
56569: PPUSH
56570: LD_VAR 0 5
56574: PPUSH
56575: LD_VAR 0 6
56579: PPUSH
56580: CALL_OW 272
56584: PPUSH
56585: LD_VAR 0 2
56589: PPUSH
56590: LD_VAR 0 5
56594: PPUSH
56595: LD_VAR 0 6
56599: PPUSH
56600: CALL_OW 273
56604: PPUSH
56605: LD_VAR 0 3
56609: PPUSH
56610: CALL_OW 309
56614: IFFALSE 56628
// begin result := true ;
56616: LD_ADDR_VAR 0 4
56620: PUSH
56621: LD_INT 1
56623: ST_TO_ADDR
// exit ;
56624: POP
56625: POP
56626: GO 56632
// end ;
56628: GO 56562
56630: POP
56631: POP
// end ;
56632: LD_VAR 0 4
56636: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56637: LD_INT 0
56639: PPUSH
56640: PPUSH
56641: PPUSH
// if btype = b_depot then
56642: LD_VAR 0 2
56646: PUSH
56647: LD_INT 0
56649: EQUAL
56650: IFFALSE 56662
// begin result := true ;
56652: LD_ADDR_VAR 0 3
56656: PUSH
56657: LD_INT 1
56659: ST_TO_ADDR
// exit ;
56660: GO 56778
// end ; pom := GetBase ( depot ) ;
56662: LD_ADDR_VAR 0 4
56666: PUSH
56667: LD_VAR 0 1
56671: PPUSH
56672: CALL_OW 274
56676: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56677: LD_ADDR_VAR 0 5
56681: PUSH
56682: LD_VAR 0 2
56686: PPUSH
56687: LD_VAR 0 1
56691: PPUSH
56692: CALL_OW 248
56696: PPUSH
56697: CALL_OW 450
56701: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56702: LD_ADDR_VAR 0 3
56706: PUSH
56707: LD_VAR 0 4
56711: PPUSH
56712: LD_INT 1
56714: PPUSH
56715: CALL_OW 275
56719: PUSH
56720: LD_VAR 0 5
56724: PUSH
56725: LD_INT 1
56727: ARRAY
56728: GREATEREQUAL
56729: PUSH
56730: LD_VAR 0 4
56734: PPUSH
56735: LD_INT 2
56737: PPUSH
56738: CALL_OW 275
56742: PUSH
56743: LD_VAR 0 5
56747: PUSH
56748: LD_INT 2
56750: ARRAY
56751: GREATEREQUAL
56752: AND
56753: PUSH
56754: LD_VAR 0 4
56758: PPUSH
56759: LD_INT 3
56761: PPUSH
56762: CALL_OW 275
56766: PUSH
56767: LD_VAR 0 5
56771: PUSH
56772: LD_INT 3
56774: ARRAY
56775: GREATEREQUAL
56776: AND
56777: ST_TO_ADDR
// end ;
56778: LD_VAR 0 3
56782: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56783: LD_INT 0
56785: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56786: LD_VAR 0 1
56790: PPUSH
56791: LD_VAR 0 2
56795: PPUSH
56796: LD_INT 0
56798: PPUSH
56799: LD_INT 0
56801: PPUSH
56802: LD_INT 1
56804: PPUSH
56805: LD_INT 0
56807: PPUSH
56808: CALL_OW 587
// end ;
56812: LD_VAR 0 3
56816: RET
// export function CenterOnNow ( unit ) ; begin
56817: LD_INT 0
56819: PPUSH
// result := IsInUnit ( unit ) ;
56820: LD_ADDR_VAR 0 2
56824: PUSH
56825: LD_VAR 0 1
56829: PPUSH
56830: CALL_OW 310
56834: ST_TO_ADDR
// if not result then
56835: LD_VAR 0 2
56839: NOT
56840: IFFALSE 56852
// result := unit ;
56842: LD_ADDR_VAR 0 2
56846: PUSH
56847: LD_VAR 0 1
56851: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56852: LD_VAR 0 1
56856: PPUSH
56857: CALL_OW 87
// end ;
56861: LD_VAR 0 2
56865: RET
// export function ComMoveHex ( unit , hex ) ; begin
56866: LD_INT 0
56868: PPUSH
// if not hex then
56869: LD_VAR 0 2
56873: NOT
56874: IFFALSE 56878
// exit ;
56876: GO 56931
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56878: LD_VAR 0 2
56882: PUSH
56883: LD_INT 1
56885: ARRAY
56886: PPUSH
56887: LD_VAR 0 2
56891: PUSH
56892: LD_INT 2
56894: ARRAY
56895: PPUSH
56896: CALL_OW 428
56900: IFFALSE 56904
// exit ;
56902: GO 56931
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56904: LD_VAR 0 1
56908: PPUSH
56909: LD_VAR 0 2
56913: PUSH
56914: LD_INT 1
56916: ARRAY
56917: PPUSH
56918: LD_VAR 0 2
56922: PUSH
56923: LD_INT 2
56925: ARRAY
56926: PPUSH
56927: CALL_OW 111
// end ;
56931: LD_VAR 0 3
56935: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
56936: LD_INT 0
56938: PPUSH
56939: PPUSH
56940: PPUSH
// if not unit or not enemy then
56941: LD_VAR 0 1
56945: NOT
56946: PUSH
56947: LD_VAR 0 2
56951: NOT
56952: OR
56953: IFFALSE 56957
// exit ;
56955: GO 57081
// x := GetX ( enemy ) ;
56957: LD_ADDR_VAR 0 4
56961: PUSH
56962: LD_VAR 0 2
56966: PPUSH
56967: CALL_OW 250
56971: ST_TO_ADDR
// y := GetY ( enemy ) ;
56972: LD_ADDR_VAR 0 5
56976: PUSH
56977: LD_VAR 0 2
56981: PPUSH
56982: CALL_OW 251
56986: ST_TO_ADDR
// if ValidHex ( x , y ) then
56987: LD_VAR 0 4
56991: PPUSH
56992: LD_VAR 0 5
56996: PPUSH
56997: CALL_OW 488
57001: IFFALSE 57081
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57003: LD_VAR 0 2
57007: PPUSH
57008: CALL_OW 247
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: IN
57023: PUSH
57024: LD_VAR 0 1
57028: PPUSH
57029: CALL_OW 255
57033: PPUSH
57034: LD_VAR 0 2
57038: PPUSH
57039: CALL_OW 292
57043: OR
57044: IFFALSE 57062
// ComAttackUnit ( unit , enemy ) else
57046: LD_VAR 0 1
57050: PPUSH
57051: LD_VAR 0 2
57055: PPUSH
57056: CALL_OW 115
57060: GO 57081
// ComAgressiveMove ( unit , x , y ) ;
57062: LD_VAR 0 1
57066: PPUSH
57067: LD_VAR 0 4
57071: PPUSH
57072: LD_VAR 0 5
57076: PPUSH
57077: CALL_OW 114
// end ;
57081: LD_VAR 0 3
57085: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57086: LD_INT 0
57088: PPUSH
57089: PPUSH
57090: PPUSH
// list := AreaToList ( area , 0 ) ;
57091: LD_ADDR_VAR 0 5
57095: PUSH
57096: LD_VAR 0 1
57100: PPUSH
57101: LD_INT 0
57103: PPUSH
57104: CALL_OW 517
57108: ST_TO_ADDR
// if not list then
57109: LD_VAR 0 5
57113: NOT
57114: IFFALSE 57118
// exit ;
57116: GO 57248
// if all then
57118: LD_VAR 0 2
57122: IFFALSE 57210
// begin for i := 1 to list [ 1 ] do
57124: LD_ADDR_VAR 0 4
57128: PUSH
57129: DOUBLE
57130: LD_INT 1
57132: DEC
57133: ST_TO_ADDR
57134: LD_VAR 0 5
57138: PUSH
57139: LD_INT 1
57141: ARRAY
57142: PUSH
57143: FOR_TO
57144: IFFALSE 57206
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57146: LD_ADDR_VAR 0 3
57150: PUSH
57151: LD_VAR 0 3
57155: PPUSH
57156: LD_VAR 0 3
57160: PUSH
57161: LD_INT 1
57163: PLUS
57164: PPUSH
57165: LD_VAR 0 5
57169: PUSH
57170: LD_INT 1
57172: ARRAY
57173: PUSH
57174: LD_VAR 0 4
57178: ARRAY
57179: PUSH
57180: LD_VAR 0 5
57184: PUSH
57185: LD_INT 2
57187: ARRAY
57188: PUSH
57189: LD_VAR 0 4
57193: ARRAY
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PPUSH
57199: CALL_OW 1
57203: ST_TO_ADDR
57204: GO 57143
57206: POP
57207: POP
// exit ;
57208: GO 57248
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57210: LD_ADDR_VAR 0 3
57214: PUSH
57215: LD_VAR 0 5
57219: PUSH
57220: LD_INT 1
57222: ARRAY
57223: PUSH
57224: LD_INT 1
57226: ARRAY
57227: PUSH
57228: LD_VAR 0 5
57232: PUSH
57233: LD_INT 2
57235: ARRAY
57236: PUSH
57237: LD_INT 1
57239: ARRAY
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: EMPTY
57246: LIST
57247: ST_TO_ADDR
// end ;
57248: LD_VAR 0 3
57252: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57253: LD_INT 0
57255: PPUSH
57256: PPUSH
// list := AreaToList ( area , 0 ) ;
57257: LD_ADDR_VAR 0 4
57261: PUSH
57262: LD_VAR 0 1
57266: PPUSH
57267: LD_INT 0
57269: PPUSH
57270: CALL_OW 517
57274: ST_TO_ADDR
// if not list then
57275: LD_VAR 0 4
57279: NOT
57280: IFFALSE 57284
// exit ;
57282: GO 57325
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57284: LD_ADDR_VAR 0 3
57288: PUSH
57289: LD_VAR 0 4
57293: PUSH
57294: LD_INT 1
57296: ARRAY
57297: PUSH
57298: LD_INT 1
57300: ARRAY
57301: PUSH
57302: LD_VAR 0 4
57306: PUSH
57307: LD_INT 2
57309: ARRAY
57310: PUSH
57311: LD_INT 1
57313: ARRAY
57314: PUSH
57315: LD_VAR 0 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: ST_TO_ADDR
// end ;
57325: LD_VAR 0 3
57329: RET
// export function First ( array ) ; begin
57330: LD_INT 0
57332: PPUSH
// if not array then
57333: LD_VAR 0 1
57337: NOT
57338: IFFALSE 57342
// exit ;
57340: GO 57356
// result := array [ 1 ] ;
57342: LD_ADDR_VAR 0 2
57346: PUSH
57347: LD_VAR 0 1
57351: PUSH
57352: LD_INT 1
57354: ARRAY
57355: ST_TO_ADDR
// end ;
57356: LD_VAR 0 2
57360: RET
// export function Last ( array ) ; begin
57361: LD_INT 0
57363: PPUSH
// if not array then
57364: LD_VAR 0 1
57368: NOT
57369: IFFALSE 57373
// exit ;
57371: GO 57389
// result := array [ array ] ;
57373: LD_ADDR_VAR 0 2
57377: PUSH
57378: LD_VAR 0 1
57382: PUSH
57383: LD_VAR 0 1
57387: ARRAY
57388: ST_TO_ADDR
// end ;
57389: LD_VAR 0 2
57393: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57394: LD_INT 0
57396: PPUSH
57397: PPUSH
// result := [ ] ;
57398: LD_ADDR_VAR 0 5
57402: PUSH
57403: EMPTY
57404: ST_TO_ADDR
// if not array then
57405: LD_VAR 0 1
57409: NOT
57410: IFFALSE 57414
// exit ;
57412: GO 57526
// for i := 1 to array do
57414: LD_ADDR_VAR 0 6
57418: PUSH
57419: DOUBLE
57420: LD_INT 1
57422: DEC
57423: ST_TO_ADDR
57424: LD_VAR 0 1
57428: PUSH
57429: FOR_TO
57430: IFFALSE 57524
// if array [ i ] [ index ] = value then
57432: LD_VAR 0 1
57436: PUSH
57437: LD_VAR 0 6
57441: ARRAY
57442: PUSH
57443: LD_VAR 0 2
57447: ARRAY
57448: PUSH
57449: LD_VAR 0 3
57453: EQUAL
57454: IFFALSE 57522
// begin if indexColumn then
57456: LD_VAR 0 4
57460: IFFALSE 57496
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57462: LD_ADDR_VAR 0 5
57466: PUSH
57467: LD_VAR 0 5
57471: PPUSH
57472: LD_VAR 0 1
57476: PUSH
57477: LD_VAR 0 6
57481: ARRAY
57482: PUSH
57483: LD_VAR 0 4
57487: ARRAY
57488: PPUSH
57489: CALL 52714 0 2
57493: ST_TO_ADDR
57494: GO 57522
// result := Join ( result , array [ i ] ) ;
57496: LD_ADDR_VAR 0 5
57500: PUSH
57501: LD_VAR 0 5
57505: PPUSH
57506: LD_VAR 0 1
57510: PUSH
57511: LD_VAR 0 6
57515: ARRAY
57516: PPUSH
57517: CALL 52714 0 2
57521: ST_TO_ADDR
// end ;
57522: GO 57429
57524: POP
57525: POP
// end ;
57526: LD_VAR 0 5
57530: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57531: LD_INT 0
57533: PPUSH
// if not vehicles or not parkingPoint then
57534: LD_VAR 0 1
57538: NOT
57539: PUSH
57540: LD_VAR 0 2
57544: NOT
57545: OR
57546: IFFALSE 57550
// exit ;
57548: GO 57648
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57550: LD_ADDR_VAR 0 1
57554: PUSH
57555: LD_VAR 0 1
57559: PPUSH
57560: LD_INT 50
57562: PUSH
57563: EMPTY
57564: LIST
57565: PUSH
57566: LD_INT 3
57568: PUSH
57569: LD_INT 92
57571: PUSH
57572: LD_VAR 0 2
57576: PUSH
57577: LD_INT 1
57579: ARRAY
57580: PUSH
57581: LD_VAR 0 2
57585: PUSH
57586: LD_INT 2
57588: ARRAY
57589: PUSH
57590: LD_INT 8
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PPUSH
57607: CALL_OW 72
57611: ST_TO_ADDR
// if not vehicles then
57612: LD_VAR 0 1
57616: NOT
57617: IFFALSE 57621
// exit ;
57619: GO 57648
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57621: LD_VAR 0 1
57625: PPUSH
57626: LD_VAR 0 2
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: PPUSH
57635: LD_VAR 0 2
57639: PUSH
57640: LD_INT 2
57642: ARRAY
57643: PPUSH
57644: CALL_OW 111
// end ;
57648: LD_VAR 0 3
57652: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57653: LD_INT 0
57655: PPUSH
57656: PPUSH
57657: PPUSH
// if not side or not area then
57658: LD_VAR 0 1
57662: NOT
57663: PUSH
57664: LD_VAR 0 2
57668: NOT
57669: OR
57670: IFFALSE 57674
// exit ;
57672: GO 57793
// tmp := AreaToList ( area , 0 ) ;
57674: LD_ADDR_VAR 0 5
57678: PUSH
57679: LD_VAR 0 2
57683: PPUSH
57684: LD_INT 0
57686: PPUSH
57687: CALL_OW 517
57691: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57692: LD_ADDR_VAR 0 4
57696: PUSH
57697: DOUBLE
57698: LD_INT 1
57700: DEC
57701: ST_TO_ADDR
57702: LD_VAR 0 5
57706: PUSH
57707: LD_INT 1
57709: ARRAY
57710: PUSH
57711: FOR_TO
57712: IFFALSE 57791
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57714: LD_VAR 0 5
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: PUSH
57723: LD_VAR 0 4
57727: ARRAY
57728: PPUSH
57729: LD_VAR 0 5
57733: PUSH
57734: LD_INT 2
57736: ARRAY
57737: PUSH
57738: LD_VAR 0 4
57742: ARRAY
57743: PPUSH
57744: CALL_OW 351
57748: IFFALSE 57789
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57750: LD_VAR 0 5
57754: PUSH
57755: LD_INT 1
57757: ARRAY
57758: PUSH
57759: LD_VAR 0 4
57763: ARRAY
57764: PPUSH
57765: LD_VAR 0 5
57769: PUSH
57770: LD_INT 2
57772: ARRAY
57773: PUSH
57774: LD_VAR 0 4
57778: ARRAY
57779: PPUSH
57780: LD_VAR 0 1
57784: PPUSH
57785: CALL_OW 244
// end ;
57789: GO 57711
57791: POP
57792: POP
// end ; end_of_file
57793: LD_VAR 0 3
57797: RET
// export globalGameSaveCounter ; every 0 0$1 do
57798: GO 57800
57800: DISABLE
// begin enable ;
57801: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57802: LD_STRING updateTimer(
57804: PUSH
57805: LD_OWVAR 1
57809: STR
57810: PUSH
57811: LD_STRING );
57813: STR
57814: PPUSH
57815: CALL_OW 559
// end ;
57819: END
// every 0 0$1 do
57820: GO 57822
57822: DISABLE
// begin globalGameSaveCounter := 0 ;
57823: LD_ADDR_EXP 41
57827: PUSH
57828: LD_INT 0
57830: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57831: LD_STRING setGameSaveCounter(0)
57833: PPUSH
57834: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57838: LD_STRING initStreamRollete();
57840: PPUSH
57841: CALL_OW 559
// InitStreamMode ;
57845: CALL 59188 0 0
// DefineStreamItems ( false ) ;
57849: LD_INT 0
57851: PPUSH
57852: CALL 59652 0 1
// end ;
57856: END
// export function SOS_MapStart ( ) ; begin
57857: LD_INT 0
57859: PPUSH
// if streamModeActive then
57860: LD_EXP 42
57864: IFFALSE 57873
// DefineStreamItems ( true ) ;
57866: LD_INT 1
57868: PPUSH
57869: CALL 59652 0 1
// UpdateLuaVariables ( ) ;
57873: CALL 57890 0 0
// UpdateFactoryWaypoints ( ) ;
57877: CALL 72521 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57881: CALL 72778 0 0
// end ;
57885: LD_VAR 0 1
57889: RET
// function UpdateLuaVariables ( ) ; begin
57890: LD_INT 0
57892: PPUSH
// if globalGameSaveCounter then
57893: LD_EXP 41
57897: IFFALSE 57931
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57899: LD_ADDR_EXP 41
57903: PUSH
57904: LD_EXP 41
57908: PPUSH
57909: CALL 54075 0 1
57913: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57914: LD_STRING setGameSaveCounter(
57916: PUSH
57917: LD_EXP 41
57921: STR
57922: PUSH
57923: LD_STRING )
57925: STR
57926: PPUSH
57927: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
57931: LD_STRING setGameDifficulty(
57933: PUSH
57934: LD_OWVAR 67
57938: STR
57939: PUSH
57940: LD_STRING )
57942: STR
57943: PPUSH
57944: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
57948: LD_STRING displayDifficulty(
57950: PUSH
57951: LD_OWVAR 67
57955: STR
57956: PUSH
57957: LD_STRING )
57959: STR
57960: PPUSH
57961: CALL_OW 559
// end ;
57965: LD_VAR 0 1
57969: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57970: LD_INT 0
57972: PPUSH
// if p2 = stream_mode then
57973: LD_VAR 0 2
57977: PUSH
57978: LD_INT 100
57980: EQUAL
57981: IFFALSE 58984
// begin if not StreamModeActive then
57983: LD_EXP 42
57987: NOT
57988: IFFALSE 57998
// StreamModeActive := true ;
57990: LD_ADDR_EXP 42
57994: PUSH
57995: LD_INT 1
57997: ST_TO_ADDR
// if p3 = 0 then
57998: LD_VAR 0 3
58002: PUSH
58003: LD_INT 0
58005: EQUAL
58006: IFFALSE 58012
// InitStreamMode ;
58008: CALL 59188 0 0
// if p3 = 1 then
58012: LD_VAR 0 3
58016: PUSH
58017: LD_INT 1
58019: EQUAL
58020: IFFALSE 58030
// sRocket := true ;
58022: LD_ADDR_EXP 47
58026: PUSH
58027: LD_INT 1
58029: ST_TO_ADDR
// if p3 = 2 then
58030: LD_VAR 0 3
58034: PUSH
58035: LD_INT 2
58037: EQUAL
58038: IFFALSE 58048
// sSpeed := true ;
58040: LD_ADDR_EXP 46
58044: PUSH
58045: LD_INT 1
58047: ST_TO_ADDR
// if p3 = 3 then
58048: LD_VAR 0 3
58052: PUSH
58053: LD_INT 3
58055: EQUAL
58056: IFFALSE 58066
// sEngine := true ;
58058: LD_ADDR_EXP 48
58062: PUSH
58063: LD_INT 1
58065: ST_TO_ADDR
// if p3 = 4 then
58066: LD_VAR 0 3
58070: PUSH
58071: LD_INT 4
58073: EQUAL
58074: IFFALSE 58084
// sSpec := true ;
58076: LD_ADDR_EXP 45
58080: PUSH
58081: LD_INT 1
58083: ST_TO_ADDR
// if p3 = 5 then
58084: LD_VAR 0 3
58088: PUSH
58089: LD_INT 5
58091: EQUAL
58092: IFFALSE 58102
// sLevel := true ;
58094: LD_ADDR_EXP 49
58098: PUSH
58099: LD_INT 1
58101: ST_TO_ADDR
// if p3 = 6 then
58102: LD_VAR 0 3
58106: PUSH
58107: LD_INT 6
58109: EQUAL
58110: IFFALSE 58120
// sArmoury := true ;
58112: LD_ADDR_EXP 50
58116: PUSH
58117: LD_INT 1
58119: ST_TO_ADDR
// if p3 = 7 then
58120: LD_VAR 0 3
58124: PUSH
58125: LD_INT 7
58127: EQUAL
58128: IFFALSE 58138
// sRadar := true ;
58130: LD_ADDR_EXP 51
58134: PUSH
58135: LD_INT 1
58137: ST_TO_ADDR
// if p3 = 8 then
58138: LD_VAR 0 3
58142: PUSH
58143: LD_INT 8
58145: EQUAL
58146: IFFALSE 58156
// sBunker := true ;
58148: LD_ADDR_EXP 52
58152: PUSH
58153: LD_INT 1
58155: ST_TO_ADDR
// if p3 = 9 then
58156: LD_VAR 0 3
58160: PUSH
58161: LD_INT 9
58163: EQUAL
58164: IFFALSE 58174
// sHack := true ;
58166: LD_ADDR_EXP 53
58170: PUSH
58171: LD_INT 1
58173: ST_TO_ADDR
// if p3 = 10 then
58174: LD_VAR 0 3
58178: PUSH
58179: LD_INT 10
58181: EQUAL
58182: IFFALSE 58192
// sFire := true ;
58184: LD_ADDR_EXP 54
58188: PUSH
58189: LD_INT 1
58191: ST_TO_ADDR
// if p3 = 11 then
58192: LD_VAR 0 3
58196: PUSH
58197: LD_INT 11
58199: EQUAL
58200: IFFALSE 58210
// sRefresh := true ;
58202: LD_ADDR_EXP 55
58206: PUSH
58207: LD_INT 1
58209: ST_TO_ADDR
// if p3 = 12 then
58210: LD_VAR 0 3
58214: PUSH
58215: LD_INT 12
58217: EQUAL
58218: IFFALSE 58228
// sExp := true ;
58220: LD_ADDR_EXP 56
58224: PUSH
58225: LD_INT 1
58227: ST_TO_ADDR
// if p3 = 13 then
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 13
58235: EQUAL
58236: IFFALSE 58246
// sDepot := true ;
58238: LD_ADDR_EXP 57
58242: PUSH
58243: LD_INT 1
58245: ST_TO_ADDR
// if p3 = 14 then
58246: LD_VAR 0 3
58250: PUSH
58251: LD_INT 14
58253: EQUAL
58254: IFFALSE 58264
// sFlag := true ;
58256: LD_ADDR_EXP 58
58260: PUSH
58261: LD_INT 1
58263: ST_TO_ADDR
// if p3 = 15 then
58264: LD_VAR 0 3
58268: PUSH
58269: LD_INT 15
58271: EQUAL
58272: IFFALSE 58282
// sKamikadze := true ;
58274: LD_ADDR_EXP 66
58278: PUSH
58279: LD_INT 1
58281: ST_TO_ADDR
// if p3 = 16 then
58282: LD_VAR 0 3
58286: PUSH
58287: LD_INT 16
58289: EQUAL
58290: IFFALSE 58300
// sTroll := true ;
58292: LD_ADDR_EXP 67
58296: PUSH
58297: LD_INT 1
58299: ST_TO_ADDR
// if p3 = 17 then
58300: LD_VAR 0 3
58304: PUSH
58305: LD_INT 17
58307: EQUAL
58308: IFFALSE 58318
// sSlow := true ;
58310: LD_ADDR_EXP 68
58314: PUSH
58315: LD_INT 1
58317: ST_TO_ADDR
// if p3 = 18 then
58318: LD_VAR 0 3
58322: PUSH
58323: LD_INT 18
58325: EQUAL
58326: IFFALSE 58336
// sLack := true ;
58328: LD_ADDR_EXP 69
58332: PUSH
58333: LD_INT 1
58335: ST_TO_ADDR
// if p3 = 19 then
58336: LD_VAR 0 3
58340: PUSH
58341: LD_INT 19
58343: EQUAL
58344: IFFALSE 58354
// sTank := true ;
58346: LD_ADDR_EXP 71
58350: PUSH
58351: LD_INT 1
58353: ST_TO_ADDR
// if p3 = 20 then
58354: LD_VAR 0 3
58358: PUSH
58359: LD_INT 20
58361: EQUAL
58362: IFFALSE 58372
// sRemote := true ;
58364: LD_ADDR_EXP 72
58368: PUSH
58369: LD_INT 1
58371: ST_TO_ADDR
// if p3 = 21 then
58372: LD_VAR 0 3
58376: PUSH
58377: LD_INT 21
58379: EQUAL
58380: IFFALSE 58390
// sPowell := true ;
58382: LD_ADDR_EXP 73
58386: PUSH
58387: LD_INT 1
58389: ST_TO_ADDR
// if p3 = 22 then
58390: LD_VAR 0 3
58394: PUSH
58395: LD_INT 22
58397: EQUAL
58398: IFFALSE 58408
// sTeleport := true ;
58400: LD_ADDR_EXP 76
58404: PUSH
58405: LD_INT 1
58407: ST_TO_ADDR
// if p3 = 23 then
58408: LD_VAR 0 3
58412: PUSH
58413: LD_INT 23
58415: EQUAL
58416: IFFALSE 58426
// sOilTower := true ;
58418: LD_ADDR_EXP 78
58422: PUSH
58423: LD_INT 1
58425: ST_TO_ADDR
// if p3 = 24 then
58426: LD_VAR 0 3
58430: PUSH
58431: LD_INT 24
58433: EQUAL
58434: IFFALSE 58444
// sShovel := true ;
58436: LD_ADDR_EXP 79
58440: PUSH
58441: LD_INT 1
58443: ST_TO_ADDR
// if p3 = 25 then
58444: LD_VAR 0 3
58448: PUSH
58449: LD_INT 25
58451: EQUAL
58452: IFFALSE 58462
// sSheik := true ;
58454: LD_ADDR_EXP 80
58458: PUSH
58459: LD_INT 1
58461: ST_TO_ADDR
// if p3 = 26 then
58462: LD_VAR 0 3
58466: PUSH
58467: LD_INT 26
58469: EQUAL
58470: IFFALSE 58480
// sEarthquake := true ;
58472: LD_ADDR_EXP 82
58476: PUSH
58477: LD_INT 1
58479: ST_TO_ADDR
// if p3 = 27 then
58480: LD_VAR 0 3
58484: PUSH
58485: LD_INT 27
58487: EQUAL
58488: IFFALSE 58498
// sAI := true ;
58490: LD_ADDR_EXP 83
58494: PUSH
58495: LD_INT 1
58497: ST_TO_ADDR
// if p3 = 28 then
58498: LD_VAR 0 3
58502: PUSH
58503: LD_INT 28
58505: EQUAL
58506: IFFALSE 58516
// sCargo := true ;
58508: LD_ADDR_EXP 86
58512: PUSH
58513: LD_INT 1
58515: ST_TO_ADDR
// if p3 = 29 then
58516: LD_VAR 0 3
58520: PUSH
58521: LD_INT 29
58523: EQUAL
58524: IFFALSE 58534
// sDLaser := true ;
58526: LD_ADDR_EXP 87
58530: PUSH
58531: LD_INT 1
58533: ST_TO_ADDR
// if p3 = 30 then
58534: LD_VAR 0 3
58538: PUSH
58539: LD_INT 30
58541: EQUAL
58542: IFFALSE 58552
// sExchange := true ;
58544: LD_ADDR_EXP 88
58548: PUSH
58549: LD_INT 1
58551: ST_TO_ADDR
// if p3 = 31 then
58552: LD_VAR 0 3
58556: PUSH
58557: LD_INT 31
58559: EQUAL
58560: IFFALSE 58570
// sFac := true ;
58562: LD_ADDR_EXP 89
58566: PUSH
58567: LD_INT 1
58569: ST_TO_ADDR
// if p3 = 32 then
58570: LD_VAR 0 3
58574: PUSH
58575: LD_INT 32
58577: EQUAL
58578: IFFALSE 58588
// sPower := true ;
58580: LD_ADDR_EXP 90
58584: PUSH
58585: LD_INT 1
58587: ST_TO_ADDR
// if p3 = 33 then
58588: LD_VAR 0 3
58592: PUSH
58593: LD_INT 33
58595: EQUAL
58596: IFFALSE 58606
// sRandom := true ;
58598: LD_ADDR_EXP 91
58602: PUSH
58603: LD_INT 1
58605: ST_TO_ADDR
// if p3 = 34 then
58606: LD_VAR 0 3
58610: PUSH
58611: LD_INT 34
58613: EQUAL
58614: IFFALSE 58624
// sShield := true ;
58616: LD_ADDR_EXP 92
58620: PUSH
58621: LD_INT 1
58623: ST_TO_ADDR
// if p3 = 35 then
58624: LD_VAR 0 3
58628: PUSH
58629: LD_INT 35
58631: EQUAL
58632: IFFALSE 58642
// sTime := true ;
58634: LD_ADDR_EXP 93
58638: PUSH
58639: LD_INT 1
58641: ST_TO_ADDR
// if p3 = 36 then
58642: LD_VAR 0 3
58646: PUSH
58647: LD_INT 36
58649: EQUAL
58650: IFFALSE 58660
// sTools := true ;
58652: LD_ADDR_EXP 94
58656: PUSH
58657: LD_INT 1
58659: ST_TO_ADDR
// if p3 = 101 then
58660: LD_VAR 0 3
58664: PUSH
58665: LD_INT 101
58667: EQUAL
58668: IFFALSE 58678
// sSold := true ;
58670: LD_ADDR_EXP 59
58674: PUSH
58675: LD_INT 1
58677: ST_TO_ADDR
// if p3 = 102 then
58678: LD_VAR 0 3
58682: PUSH
58683: LD_INT 102
58685: EQUAL
58686: IFFALSE 58696
// sDiff := true ;
58688: LD_ADDR_EXP 60
58692: PUSH
58693: LD_INT 1
58695: ST_TO_ADDR
// if p3 = 103 then
58696: LD_VAR 0 3
58700: PUSH
58701: LD_INT 103
58703: EQUAL
58704: IFFALSE 58714
// sFog := true ;
58706: LD_ADDR_EXP 63
58710: PUSH
58711: LD_INT 1
58713: ST_TO_ADDR
// if p3 = 104 then
58714: LD_VAR 0 3
58718: PUSH
58719: LD_INT 104
58721: EQUAL
58722: IFFALSE 58732
// sReset := true ;
58724: LD_ADDR_EXP 64
58728: PUSH
58729: LD_INT 1
58731: ST_TO_ADDR
// if p3 = 105 then
58732: LD_VAR 0 3
58736: PUSH
58737: LD_INT 105
58739: EQUAL
58740: IFFALSE 58750
// sSun := true ;
58742: LD_ADDR_EXP 65
58746: PUSH
58747: LD_INT 1
58749: ST_TO_ADDR
// if p3 = 106 then
58750: LD_VAR 0 3
58754: PUSH
58755: LD_INT 106
58757: EQUAL
58758: IFFALSE 58768
// sTiger := true ;
58760: LD_ADDR_EXP 61
58764: PUSH
58765: LD_INT 1
58767: ST_TO_ADDR
// if p3 = 107 then
58768: LD_VAR 0 3
58772: PUSH
58773: LD_INT 107
58775: EQUAL
58776: IFFALSE 58786
// sBomb := true ;
58778: LD_ADDR_EXP 62
58782: PUSH
58783: LD_INT 1
58785: ST_TO_ADDR
// if p3 = 108 then
58786: LD_VAR 0 3
58790: PUSH
58791: LD_INT 108
58793: EQUAL
58794: IFFALSE 58804
// sWound := true ;
58796: LD_ADDR_EXP 70
58800: PUSH
58801: LD_INT 1
58803: ST_TO_ADDR
// if p3 = 109 then
58804: LD_VAR 0 3
58808: PUSH
58809: LD_INT 109
58811: EQUAL
58812: IFFALSE 58822
// sBetray := true ;
58814: LD_ADDR_EXP 74
58818: PUSH
58819: LD_INT 1
58821: ST_TO_ADDR
// if p3 = 110 then
58822: LD_VAR 0 3
58826: PUSH
58827: LD_INT 110
58829: EQUAL
58830: IFFALSE 58840
// sContamin := true ;
58832: LD_ADDR_EXP 75
58836: PUSH
58837: LD_INT 1
58839: ST_TO_ADDR
// if p3 = 111 then
58840: LD_VAR 0 3
58844: PUSH
58845: LD_INT 111
58847: EQUAL
58848: IFFALSE 58858
// sOil := true ;
58850: LD_ADDR_EXP 77
58854: PUSH
58855: LD_INT 1
58857: ST_TO_ADDR
// if p3 = 112 then
58858: LD_VAR 0 3
58862: PUSH
58863: LD_INT 112
58865: EQUAL
58866: IFFALSE 58876
// sStu := true ;
58868: LD_ADDR_EXP 81
58872: PUSH
58873: LD_INT 1
58875: ST_TO_ADDR
// if p3 = 113 then
58876: LD_VAR 0 3
58880: PUSH
58881: LD_INT 113
58883: EQUAL
58884: IFFALSE 58894
// sBazooka := true ;
58886: LD_ADDR_EXP 84
58890: PUSH
58891: LD_INT 1
58893: ST_TO_ADDR
// if p3 = 114 then
58894: LD_VAR 0 3
58898: PUSH
58899: LD_INT 114
58901: EQUAL
58902: IFFALSE 58912
// sMortar := true ;
58904: LD_ADDR_EXP 85
58908: PUSH
58909: LD_INT 1
58911: ST_TO_ADDR
// if p3 = 115 then
58912: LD_VAR 0 3
58916: PUSH
58917: LD_INT 115
58919: EQUAL
58920: IFFALSE 58930
// sRanger := true ;
58922: LD_ADDR_EXP 95
58926: PUSH
58927: LD_INT 1
58929: ST_TO_ADDR
// if p3 = 116 then
58930: LD_VAR 0 3
58934: PUSH
58935: LD_INT 116
58937: EQUAL
58938: IFFALSE 58948
// sComputer := true ;
58940: LD_ADDR_EXP 96
58944: PUSH
58945: LD_INT 1
58947: ST_TO_ADDR
// if p3 = 117 then
58948: LD_VAR 0 3
58952: PUSH
58953: LD_INT 117
58955: EQUAL
58956: IFFALSE 58966
// s30 := true ;
58958: LD_ADDR_EXP 97
58962: PUSH
58963: LD_INT 1
58965: ST_TO_ADDR
// if p3 = 118 then
58966: LD_VAR 0 3
58970: PUSH
58971: LD_INT 118
58973: EQUAL
58974: IFFALSE 58984
// s60 := true ;
58976: LD_ADDR_EXP 98
58980: PUSH
58981: LD_INT 1
58983: ST_TO_ADDR
// end ; if p2 = hack_mode then
58984: LD_VAR 0 2
58988: PUSH
58989: LD_INT 101
58991: EQUAL
58992: IFFALSE 59120
// begin case p3 of 1 :
58994: LD_VAR 0 3
58998: PUSH
58999: LD_INT 1
59001: DOUBLE
59002: EQUAL
59003: IFTRUE 59007
59005: GO 59014
59007: POP
// hHackUnlimitedResources ; 2 :
59008: CALL 71267 0 0
59012: GO 59120
59014: LD_INT 2
59016: DOUBLE
59017: EQUAL
59018: IFTRUE 59022
59020: GO 59029
59022: POP
// hHackSetLevel10 ; 3 :
59023: CALL 71400 0 0
59027: GO 59120
59029: LD_INT 3
59031: DOUBLE
59032: EQUAL
59033: IFTRUE 59037
59035: GO 59044
59037: POP
// hHackSetLevel10YourUnits ; 4 :
59038: CALL 71485 0 0
59042: GO 59120
59044: LD_INT 4
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59052
59050: GO 59059
59052: POP
// hHackInvincible ; 5 :
59053: CALL 71933 0 0
59057: GO 59120
59059: LD_INT 5
59061: DOUBLE
59062: EQUAL
59063: IFTRUE 59067
59065: GO 59074
59067: POP
// hHackInvisible ; 6 :
59068: CALL 72044 0 0
59072: GO 59120
59074: LD_INT 6
59076: DOUBLE
59077: EQUAL
59078: IFTRUE 59082
59080: GO 59089
59082: POP
// hHackChangeYourSide ; 7 :
59083: CALL 72101 0 0
59087: GO 59120
59089: LD_INT 7
59091: DOUBLE
59092: EQUAL
59093: IFTRUE 59097
59095: GO 59104
59097: POP
// hHackChangeUnitSide ; 8 :
59098: CALL 72143 0 0
59102: GO 59120
59104: LD_INT 8
59106: DOUBLE
59107: EQUAL
59108: IFTRUE 59112
59110: GO 59119
59112: POP
// hHackFog ; end ;
59113: CALL 72244 0 0
59117: GO 59120
59119: POP
// end ; if p2 = game_save_mode then
59120: LD_VAR 0 2
59124: PUSH
59125: LD_INT 102
59127: EQUAL
59128: IFFALSE 59183
// begin if p3 = 1 then
59130: LD_VAR 0 3
59134: PUSH
59135: LD_INT 1
59137: EQUAL
59138: IFFALSE 59150
// globalGameSaveCounter := p4 ;
59140: LD_ADDR_EXP 41
59144: PUSH
59145: LD_VAR 0 4
59149: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59150: LD_VAR 0 3
59154: PUSH
59155: LD_INT 2
59157: EQUAL
59158: PUSH
59159: LD_EXP 41
59163: AND
59164: IFFALSE 59183
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59166: LD_STRING setGameSaveCounter(
59168: PUSH
59169: LD_EXP 41
59173: STR
59174: PUSH
59175: LD_STRING )
59177: STR
59178: PPUSH
59179: CALL_OW 559
// end ; end ;
59183: LD_VAR 0 7
59187: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59188: LD_INT 0
59190: PPUSH
// streamModeActive := false ;
59191: LD_ADDR_EXP 42
59195: PUSH
59196: LD_INT 0
59198: ST_TO_ADDR
// normalCounter := 36 ;
59199: LD_ADDR_EXP 43
59203: PUSH
59204: LD_INT 36
59206: ST_TO_ADDR
// hardcoreCounter := 18 ;
59207: LD_ADDR_EXP 44
59211: PUSH
59212: LD_INT 18
59214: ST_TO_ADDR
// sRocket := false ;
59215: LD_ADDR_EXP 47
59219: PUSH
59220: LD_INT 0
59222: ST_TO_ADDR
// sSpeed := false ;
59223: LD_ADDR_EXP 46
59227: PUSH
59228: LD_INT 0
59230: ST_TO_ADDR
// sEngine := false ;
59231: LD_ADDR_EXP 48
59235: PUSH
59236: LD_INT 0
59238: ST_TO_ADDR
// sSpec := false ;
59239: LD_ADDR_EXP 45
59243: PUSH
59244: LD_INT 0
59246: ST_TO_ADDR
// sLevel := false ;
59247: LD_ADDR_EXP 49
59251: PUSH
59252: LD_INT 0
59254: ST_TO_ADDR
// sArmoury := false ;
59255: LD_ADDR_EXP 50
59259: PUSH
59260: LD_INT 0
59262: ST_TO_ADDR
// sRadar := false ;
59263: LD_ADDR_EXP 51
59267: PUSH
59268: LD_INT 0
59270: ST_TO_ADDR
// sBunker := false ;
59271: LD_ADDR_EXP 52
59275: PUSH
59276: LD_INT 0
59278: ST_TO_ADDR
// sHack := false ;
59279: LD_ADDR_EXP 53
59283: PUSH
59284: LD_INT 0
59286: ST_TO_ADDR
// sFire := false ;
59287: LD_ADDR_EXP 54
59291: PUSH
59292: LD_INT 0
59294: ST_TO_ADDR
// sRefresh := false ;
59295: LD_ADDR_EXP 55
59299: PUSH
59300: LD_INT 0
59302: ST_TO_ADDR
// sExp := false ;
59303: LD_ADDR_EXP 56
59307: PUSH
59308: LD_INT 0
59310: ST_TO_ADDR
// sDepot := false ;
59311: LD_ADDR_EXP 57
59315: PUSH
59316: LD_INT 0
59318: ST_TO_ADDR
// sFlag := false ;
59319: LD_ADDR_EXP 58
59323: PUSH
59324: LD_INT 0
59326: ST_TO_ADDR
// sKamikadze := false ;
59327: LD_ADDR_EXP 66
59331: PUSH
59332: LD_INT 0
59334: ST_TO_ADDR
// sTroll := false ;
59335: LD_ADDR_EXP 67
59339: PUSH
59340: LD_INT 0
59342: ST_TO_ADDR
// sSlow := false ;
59343: LD_ADDR_EXP 68
59347: PUSH
59348: LD_INT 0
59350: ST_TO_ADDR
// sLack := false ;
59351: LD_ADDR_EXP 69
59355: PUSH
59356: LD_INT 0
59358: ST_TO_ADDR
// sTank := false ;
59359: LD_ADDR_EXP 71
59363: PUSH
59364: LD_INT 0
59366: ST_TO_ADDR
// sRemote := false ;
59367: LD_ADDR_EXP 72
59371: PUSH
59372: LD_INT 0
59374: ST_TO_ADDR
// sPowell := false ;
59375: LD_ADDR_EXP 73
59379: PUSH
59380: LD_INT 0
59382: ST_TO_ADDR
// sTeleport := false ;
59383: LD_ADDR_EXP 76
59387: PUSH
59388: LD_INT 0
59390: ST_TO_ADDR
// sOilTower := false ;
59391: LD_ADDR_EXP 78
59395: PUSH
59396: LD_INT 0
59398: ST_TO_ADDR
// sShovel := false ;
59399: LD_ADDR_EXP 79
59403: PUSH
59404: LD_INT 0
59406: ST_TO_ADDR
// sSheik := false ;
59407: LD_ADDR_EXP 80
59411: PUSH
59412: LD_INT 0
59414: ST_TO_ADDR
// sEarthquake := false ;
59415: LD_ADDR_EXP 82
59419: PUSH
59420: LD_INT 0
59422: ST_TO_ADDR
// sAI := false ;
59423: LD_ADDR_EXP 83
59427: PUSH
59428: LD_INT 0
59430: ST_TO_ADDR
// sCargo := false ;
59431: LD_ADDR_EXP 86
59435: PUSH
59436: LD_INT 0
59438: ST_TO_ADDR
// sDLaser := false ;
59439: LD_ADDR_EXP 87
59443: PUSH
59444: LD_INT 0
59446: ST_TO_ADDR
// sExchange := false ;
59447: LD_ADDR_EXP 88
59451: PUSH
59452: LD_INT 0
59454: ST_TO_ADDR
// sFac := false ;
59455: LD_ADDR_EXP 89
59459: PUSH
59460: LD_INT 0
59462: ST_TO_ADDR
// sPower := false ;
59463: LD_ADDR_EXP 90
59467: PUSH
59468: LD_INT 0
59470: ST_TO_ADDR
// sRandom := false ;
59471: LD_ADDR_EXP 91
59475: PUSH
59476: LD_INT 0
59478: ST_TO_ADDR
// sShield := false ;
59479: LD_ADDR_EXP 92
59483: PUSH
59484: LD_INT 0
59486: ST_TO_ADDR
// sTime := false ;
59487: LD_ADDR_EXP 93
59491: PUSH
59492: LD_INT 0
59494: ST_TO_ADDR
// sTools := false ;
59495: LD_ADDR_EXP 94
59499: PUSH
59500: LD_INT 0
59502: ST_TO_ADDR
// sSold := false ;
59503: LD_ADDR_EXP 59
59507: PUSH
59508: LD_INT 0
59510: ST_TO_ADDR
// sDiff := false ;
59511: LD_ADDR_EXP 60
59515: PUSH
59516: LD_INT 0
59518: ST_TO_ADDR
// sFog := false ;
59519: LD_ADDR_EXP 63
59523: PUSH
59524: LD_INT 0
59526: ST_TO_ADDR
// sReset := false ;
59527: LD_ADDR_EXP 64
59531: PUSH
59532: LD_INT 0
59534: ST_TO_ADDR
// sSun := false ;
59535: LD_ADDR_EXP 65
59539: PUSH
59540: LD_INT 0
59542: ST_TO_ADDR
// sTiger := false ;
59543: LD_ADDR_EXP 61
59547: PUSH
59548: LD_INT 0
59550: ST_TO_ADDR
// sBomb := false ;
59551: LD_ADDR_EXP 62
59555: PUSH
59556: LD_INT 0
59558: ST_TO_ADDR
// sWound := false ;
59559: LD_ADDR_EXP 70
59563: PUSH
59564: LD_INT 0
59566: ST_TO_ADDR
// sBetray := false ;
59567: LD_ADDR_EXP 74
59571: PUSH
59572: LD_INT 0
59574: ST_TO_ADDR
// sContamin := false ;
59575: LD_ADDR_EXP 75
59579: PUSH
59580: LD_INT 0
59582: ST_TO_ADDR
// sOil := false ;
59583: LD_ADDR_EXP 77
59587: PUSH
59588: LD_INT 0
59590: ST_TO_ADDR
// sStu := false ;
59591: LD_ADDR_EXP 81
59595: PUSH
59596: LD_INT 0
59598: ST_TO_ADDR
// sBazooka := false ;
59599: LD_ADDR_EXP 84
59603: PUSH
59604: LD_INT 0
59606: ST_TO_ADDR
// sMortar := false ;
59607: LD_ADDR_EXP 85
59611: PUSH
59612: LD_INT 0
59614: ST_TO_ADDR
// sRanger := false ;
59615: LD_ADDR_EXP 95
59619: PUSH
59620: LD_INT 0
59622: ST_TO_ADDR
// sComputer := false ;
59623: LD_ADDR_EXP 96
59627: PUSH
59628: LD_INT 0
59630: ST_TO_ADDR
// s30 := false ;
59631: LD_ADDR_EXP 97
59635: PUSH
59636: LD_INT 0
59638: ST_TO_ADDR
// s60 := false ;
59639: LD_ADDR_EXP 98
59643: PUSH
59644: LD_INT 0
59646: ST_TO_ADDR
// end ;
59647: LD_VAR 0 1
59651: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
// result := [ ] ;
59661: LD_ADDR_VAR 0 2
59665: PUSH
59666: EMPTY
59667: ST_TO_ADDR
// if campaign_id = 1 then
59668: LD_OWVAR 69
59672: PUSH
59673: LD_INT 1
59675: EQUAL
59676: IFFALSE 62842
// begin case mission_number of 1 :
59678: LD_OWVAR 70
59682: PUSH
59683: LD_INT 1
59685: DOUBLE
59686: EQUAL
59687: IFTRUE 59691
59689: GO 59767
59691: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59692: LD_ADDR_VAR 0 2
59696: PUSH
59697: LD_INT 2
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: LD_INT 11
59705: PUSH
59706: LD_INT 12
59708: PUSH
59709: LD_INT 15
59711: PUSH
59712: LD_INT 16
59714: PUSH
59715: LD_INT 22
59717: PUSH
59718: LD_INT 23
59720: PUSH
59721: LD_INT 26
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 101
59737: PUSH
59738: LD_INT 102
59740: PUSH
59741: LD_INT 106
59743: PUSH
59744: LD_INT 116
59746: PUSH
59747: LD_INT 117
59749: PUSH
59750: LD_INT 118
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: ST_TO_ADDR
59765: GO 62840
59767: LD_INT 2
59769: DOUBLE
59770: EQUAL
59771: IFTRUE 59775
59773: GO 59859
59775: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59776: LD_ADDR_VAR 0 2
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 4
59786: PUSH
59787: LD_INT 11
59789: PUSH
59790: LD_INT 12
59792: PUSH
59793: LD_INT 15
59795: PUSH
59796: LD_INT 16
59798: PUSH
59799: LD_INT 22
59801: PUSH
59802: LD_INT 23
59804: PUSH
59805: LD_INT 26
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 101
59821: PUSH
59822: LD_INT 102
59824: PUSH
59825: LD_INT 105
59827: PUSH
59828: LD_INT 106
59830: PUSH
59831: LD_INT 108
59833: PUSH
59834: LD_INT 116
59836: PUSH
59837: LD_INT 117
59839: PUSH
59840: LD_INT 118
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: ST_TO_ADDR
59857: GO 62840
59859: LD_INT 3
59861: DOUBLE
59862: EQUAL
59863: IFTRUE 59867
59865: GO 59955
59867: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59868: LD_ADDR_VAR 0 2
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: LD_INT 5
59881: PUSH
59882: LD_INT 11
59884: PUSH
59885: LD_INT 12
59887: PUSH
59888: LD_INT 15
59890: PUSH
59891: LD_INT 16
59893: PUSH
59894: LD_INT 22
59896: PUSH
59897: LD_INT 26
59899: PUSH
59900: LD_INT 36
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 101
59917: PUSH
59918: LD_INT 102
59920: PUSH
59921: LD_INT 105
59923: PUSH
59924: LD_INT 106
59926: PUSH
59927: LD_INT 108
59929: PUSH
59930: LD_INT 116
59932: PUSH
59933: LD_INT 117
59935: PUSH
59936: LD_INT 118
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: ST_TO_ADDR
59953: GO 62840
59955: LD_INT 4
59957: DOUBLE
59958: EQUAL
59959: IFTRUE 59963
59961: GO 60059
59963: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: LD_INT 4
59974: PUSH
59975: LD_INT 5
59977: PUSH
59978: LD_INT 8
59980: PUSH
59981: LD_INT 11
59983: PUSH
59984: LD_INT 12
59986: PUSH
59987: LD_INT 15
59989: PUSH
59990: LD_INT 16
59992: PUSH
59993: LD_INT 22
59995: PUSH
59996: LD_INT 23
59998: PUSH
59999: LD_INT 26
60001: PUSH
60002: LD_INT 36
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 101
60021: PUSH
60022: LD_INT 102
60024: PUSH
60025: LD_INT 105
60027: PUSH
60028: LD_INT 106
60030: PUSH
60031: LD_INT 108
60033: PUSH
60034: LD_INT 116
60036: PUSH
60037: LD_INT 117
60039: PUSH
60040: LD_INT 118
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: ST_TO_ADDR
60057: GO 62840
60059: LD_INT 5
60061: DOUBLE
60062: EQUAL
60063: IFTRUE 60067
60065: GO 60179
60067: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60068: LD_ADDR_VAR 0 2
60072: PUSH
60073: LD_INT 2
60075: PUSH
60076: LD_INT 4
60078: PUSH
60079: LD_INT 5
60081: PUSH
60082: LD_INT 6
60084: PUSH
60085: LD_INT 8
60087: PUSH
60088: LD_INT 11
60090: PUSH
60091: LD_INT 12
60093: PUSH
60094: LD_INT 15
60096: PUSH
60097: LD_INT 16
60099: PUSH
60100: LD_INT 22
60102: PUSH
60103: LD_INT 23
60105: PUSH
60106: LD_INT 25
60108: PUSH
60109: LD_INT 26
60111: PUSH
60112: LD_INT 36
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 101
60133: PUSH
60134: LD_INT 102
60136: PUSH
60137: LD_INT 105
60139: PUSH
60140: LD_INT 106
60142: PUSH
60143: LD_INT 108
60145: PUSH
60146: LD_INT 109
60148: PUSH
60149: LD_INT 112
60151: PUSH
60152: LD_INT 116
60154: PUSH
60155: LD_INT 117
60157: PUSH
60158: LD_INT 118
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: ST_TO_ADDR
60177: GO 62840
60179: LD_INT 6
60181: DOUBLE
60182: EQUAL
60183: IFTRUE 60187
60185: GO 60319
60187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60188: LD_ADDR_VAR 0 2
60192: PUSH
60193: LD_INT 2
60195: PUSH
60196: LD_INT 4
60198: PUSH
60199: LD_INT 5
60201: PUSH
60202: LD_INT 6
60204: PUSH
60205: LD_INT 8
60207: PUSH
60208: LD_INT 11
60210: PUSH
60211: LD_INT 12
60213: PUSH
60214: LD_INT 15
60216: PUSH
60217: LD_INT 16
60219: PUSH
60220: LD_INT 20
60222: PUSH
60223: LD_INT 21
60225: PUSH
60226: LD_INT 22
60228: PUSH
60229: LD_INT 23
60231: PUSH
60232: LD_INT 25
60234: PUSH
60235: LD_INT 26
60237: PUSH
60238: LD_INT 30
60240: PUSH
60241: LD_INT 31
60243: PUSH
60244: LD_INT 32
60246: PUSH
60247: LD_INT 36
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 101
60273: PUSH
60274: LD_INT 102
60276: PUSH
60277: LD_INT 105
60279: PUSH
60280: LD_INT 106
60282: PUSH
60283: LD_INT 108
60285: PUSH
60286: LD_INT 109
60288: PUSH
60289: LD_INT 112
60291: PUSH
60292: LD_INT 116
60294: PUSH
60295: LD_INT 117
60297: PUSH
60298: LD_INT 118
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: ST_TO_ADDR
60317: GO 62840
60319: LD_INT 7
60321: DOUBLE
60322: EQUAL
60323: IFTRUE 60327
60325: GO 60439
60327: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60328: LD_ADDR_VAR 0 2
60332: PUSH
60333: LD_INT 2
60335: PUSH
60336: LD_INT 4
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: LD_INT 7
60344: PUSH
60345: LD_INT 11
60347: PUSH
60348: LD_INT 12
60350: PUSH
60351: LD_INT 15
60353: PUSH
60354: LD_INT 16
60356: PUSH
60357: LD_INT 20
60359: PUSH
60360: LD_INT 21
60362: PUSH
60363: LD_INT 22
60365: PUSH
60366: LD_INT 23
60368: PUSH
60369: LD_INT 25
60371: PUSH
60372: LD_INT 26
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 101
60393: PUSH
60394: LD_INT 102
60396: PUSH
60397: LD_INT 103
60399: PUSH
60400: LD_INT 105
60402: PUSH
60403: LD_INT 106
60405: PUSH
60406: LD_INT 108
60408: PUSH
60409: LD_INT 112
60411: PUSH
60412: LD_INT 116
60414: PUSH
60415: LD_INT 117
60417: PUSH
60418: LD_INT 118
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: ST_TO_ADDR
60437: GO 62840
60439: LD_INT 8
60441: DOUBLE
60442: EQUAL
60443: IFTRUE 60447
60445: GO 60587
60447: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60448: LD_ADDR_VAR 0 2
60452: PUSH
60453: LD_INT 2
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: LD_INT 5
60461: PUSH
60462: LD_INT 6
60464: PUSH
60465: LD_INT 7
60467: PUSH
60468: LD_INT 8
60470: PUSH
60471: LD_INT 11
60473: PUSH
60474: LD_INT 12
60476: PUSH
60477: LD_INT 15
60479: PUSH
60480: LD_INT 16
60482: PUSH
60483: LD_INT 20
60485: PUSH
60486: LD_INT 21
60488: PUSH
60489: LD_INT 22
60491: PUSH
60492: LD_INT 23
60494: PUSH
60495: LD_INT 25
60497: PUSH
60498: LD_INT 26
60500: PUSH
60501: LD_INT 30
60503: PUSH
60504: LD_INT 31
60506: PUSH
60507: LD_INT 32
60509: PUSH
60510: LD_INT 36
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 101
60537: PUSH
60538: LD_INT 102
60540: PUSH
60541: LD_INT 103
60543: PUSH
60544: LD_INT 105
60546: PUSH
60547: LD_INT 106
60549: PUSH
60550: LD_INT 108
60552: PUSH
60553: LD_INT 109
60555: PUSH
60556: LD_INT 112
60558: PUSH
60559: LD_INT 116
60561: PUSH
60562: LD_INT 117
60564: PUSH
60565: LD_INT 118
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: ST_TO_ADDR
60585: GO 62840
60587: LD_INT 9
60589: DOUBLE
60590: EQUAL
60591: IFTRUE 60595
60593: GO 60743
60595: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60596: LD_ADDR_VAR 0 2
60600: PUSH
60601: LD_INT 2
60603: PUSH
60604: LD_INT 4
60606: PUSH
60607: LD_INT 5
60609: PUSH
60610: LD_INT 6
60612: PUSH
60613: LD_INT 7
60615: PUSH
60616: LD_INT 8
60618: PUSH
60619: LD_INT 11
60621: PUSH
60622: LD_INT 12
60624: PUSH
60625: LD_INT 15
60627: PUSH
60628: LD_INT 16
60630: PUSH
60631: LD_INT 20
60633: PUSH
60634: LD_INT 21
60636: PUSH
60637: LD_INT 22
60639: PUSH
60640: LD_INT 23
60642: PUSH
60643: LD_INT 25
60645: PUSH
60646: LD_INT 26
60648: PUSH
60649: LD_INT 28
60651: PUSH
60652: LD_INT 30
60654: PUSH
60655: LD_INT 31
60657: PUSH
60658: LD_INT 32
60660: PUSH
60661: LD_INT 36
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 101
60689: PUSH
60690: LD_INT 102
60692: PUSH
60693: LD_INT 103
60695: PUSH
60696: LD_INT 105
60698: PUSH
60699: LD_INT 106
60701: PUSH
60702: LD_INT 108
60704: PUSH
60705: LD_INT 109
60707: PUSH
60708: LD_INT 112
60710: PUSH
60711: LD_INT 114
60713: PUSH
60714: LD_INT 116
60716: PUSH
60717: LD_INT 117
60719: PUSH
60720: LD_INT 118
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: ST_TO_ADDR
60741: GO 62840
60743: LD_INT 10
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60751
60749: GO 60947
60751: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: LD_INT 2
60759: PUSH
60760: LD_INT 4
60762: PUSH
60763: LD_INT 5
60765: PUSH
60766: LD_INT 6
60768: PUSH
60769: LD_INT 7
60771: PUSH
60772: LD_INT 8
60774: PUSH
60775: LD_INT 9
60777: PUSH
60778: LD_INT 10
60780: PUSH
60781: LD_INT 11
60783: PUSH
60784: LD_INT 12
60786: PUSH
60787: LD_INT 13
60789: PUSH
60790: LD_INT 14
60792: PUSH
60793: LD_INT 15
60795: PUSH
60796: LD_INT 16
60798: PUSH
60799: LD_INT 17
60801: PUSH
60802: LD_INT 18
60804: PUSH
60805: LD_INT 19
60807: PUSH
60808: LD_INT 20
60810: PUSH
60811: LD_INT 21
60813: PUSH
60814: LD_INT 22
60816: PUSH
60817: LD_INT 23
60819: PUSH
60820: LD_INT 24
60822: PUSH
60823: LD_INT 25
60825: PUSH
60826: LD_INT 26
60828: PUSH
60829: LD_INT 28
60831: PUSH
60832: LD_INT 30
60834: PUSH
60835: LD_INT 31
60837: PUSH
60838: LD_INT 32
60840: PUSH
60841: LD_INT 36
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 101
60877: PUSH
60878: LD_INT 102
60880: PUSH
60881: LD_INT 103
60883: PUSH
60884: LD_INT 104
60886: PUSH
60887: LD_INT 105
60889: PUSH
60890: LD_INT 106
60892: PUSH
60893: LD_INT 107
60895: PUSH
60896: LD_INT 108
60898: PUSH
60899: LD_INT 109
60901: PUSH
60902: LD_INT 110
60904: PUSH
60905: LD_INT 111
60907: PUSH
60908: LD_INT 112
60910: PUSH
60911: LD_INT 114
60913: PUSH
60914: LD_INT 116
60916: PUSH
60917: LD_INT 117
60919: PUSH
60920: LD_INT 118
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: ST_TO_ADDR
60945: GO 62840
60947: LD_INT 11
60949: DOUBLE
60950: EQUAL
60951: IFTRUE 60955
60953: GO 61159
60955: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60956: LD_ADDR_VAR 0 2
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: LD_INT 4
60969: PUSH
60970: LD_INT 5
60972: PUSH
60973: LD_INT 6
60975: PUSH
60976: LD_INT 7
60978: PUSH
60979: LD_INT 8
60981: PUSH
60982: LD_INT 9
60984: PUSH
60985: LD_INT 10
60987: PUSH
60988: LD_INT 11
60990: PUSH
60991: LD_INT 12
60993: PUSH
60994: LD_INT 13
60996: PUSH
60997: LD_INT 14
60999: PUSH
61000: LD_INT 15
61002: PUSH
61003: LD_INT 16
61005: PUSH
61006: LD_INT 17
61008: PUSH
61009: LD_INT 18
61011: PUSH
61012: LD_INT 19
61014: PUSH
61015: LD_INT 20
61017: PUSH
61018: LD_INT 21
61020: PUSH
61021: LD_INT 22
61023: PUSH
61024: LD_INT 23
61026: PUSH
61027: LD_INT 24
61029: PUSH
61030: LD_INT 25
61032: PUSH
61033: LD_INT 26
61035: PUSH
61036: LD_INT 28
61038: PUSH
61039: LD_INT 30
61041: PUSH
61042: LD_INT 31
61044: PUSH
61045: LD_INT 32
61047: PUSH
61048: LD_INT 34
61050: PUSH
61051: LD_INT 36
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 101
61089: PUSH
61090: LD_INT 102
61092: PUSH
61093: LD_INT 103
61095: PUSH
61096: LD_INT 104
61098: PUSH
61099: LD_INT 105
61101: PUSH
61102: LD_INT 106
61104: PUSH
61105: LD_INT 107
61107: PUSH
61108: LD_INT 108
61110: PUSH
61111: LD_INT 109
61113: PUSH
61114: LD_INT 110
61116: PUSH
61117: LD_INT 111
61119: PUSH
61120: LD_INT 112
61122: PUSH
61123: LD_INT 114
61125: PUSH
61126: LD_INT 116
61128: PUSH
61129: LD_INT 117
61131: PUSH
61132: LD_INT 118
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: ST_TO_ADDR
61157: GO 62840
61159: LD_INT 12
61161: DOUBLE
61162: EQUAL
61163: IFTRUE 61167
61165: GO 61387
61167: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61168: LD_ADDR_VAR 0 2
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 4
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: LD_INT 6
61190: PUSH
61191: LD_INT 7
61193: PUSH
61194: LD_INT 8
61196: PUSH
61197: LD_INT 9
61199: PUSH
61200: LD_INT 10
61202: PUSH
61203: LD_INT 11
61205: PUSH
61206: LD_INT 12
61208: PUSH
61209: LD_INT 13
61211: PUSH
61212: LD_INT 14
61214: PUSH
61215: LD_INT 15
61217: PUSH
61218: LD_INT 16
61220: PUSH
61221: LD_INT 17
61223: PUSH
61224: LD_INT 18
61226: PUSH
61227: LD_INT 19
61229: PUSH
61230: LD_INT 20
61232: PUSH
61233: LD_INT 21
61235: PUSH
61236: LD_INT 22
61238: PUSH
61239: LD_INT 23
61241: PUSH
61242: LD_INT 24
61244: PUSH
61245: LD_INT 25
61247: PUSH
61248: LD_INT 26
61250: PUSH
61251: LD_INT 27
61253: PUSH
61254: LD_INT 28
61256: PUSH
61257: LD_INT 30
61259: PUSH
61260: LD_INT 31
61262: PUSH
61263: LD_INT 32
61265: PUSH
61266: LD_INT 33
61268: PUSH
61269: LD_INT 34
61271: PUSH
61272: LD_INT 36
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 101
61313: PUSH
61314: LD_INT 102
61316: PUSH
61317: LD_INT 103
61319: PUSH
61320: LD_INT 104
61322: PUSH
61323: LD_INT 105
61325: PUSH
61326: LD_INT 106
61328: PUSH
61329: LD_INT 107
61331: PUSH
61332: LD_INT 108
61334: PUSH
61335: LD_INT 109
61337: PUSH
61338: LD_INT 110
61340: PUSH
61341: LD_INT 111
61343: PUSH
61344: LD_INT 112
61346: PUSH
61347: LD_INT 113
61349: PUSH
61350: LD_INT 114
61352: PUSH
61353: LD_INT 116
61355: PUSH
61356: LD_INT 117
61358: PUSH
61359: LD_INT 118
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: ST_TO_ADDR
61385: GO 62840
61387: LD_INT 13
61389: DOUBLE
61390: EQUAL
61391: IFTRUE 61395
61393: GO 61603
61395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61396: LD_ADDR_VAR 0 2
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 2
61406: PUSH
61407: LD_INT 3
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 5
61415: PUSH
61416: LD_INT 8
61418: PUSH
61419: LD_INT 9
61421: PUSH
61422: LD_INT 10
61424: PUSH
61425: LD_INT 11
61427: PUSH
61428: LD_INT 12
61430: PUSH
61431: LD_INT 14
61433: PUSH
61434: LD_INT 15
61436: PUSH
61437: LD_INT 16
61439: PUSH
61440: LD_INT 17
61442: PUSH
61443: LD_INT 18
61445: PUSH
61446: LD_INT 19
61448: PUSH
61449: LD_INT 20
61451: PUSH
61452: LD_INT 21
61454: PUSH
61455: LD_INT 22
61457: PUSH
61458: LD_INT 23
61460: PUSH
61461: LD_INT 24
61463: PUSH
61464: LD_INT 25
61466: PUSH
61467: LD_INT 26
61469: PUSH
61470: LD_INT 27
61472: PUSH
61473: LD_INT 28
61475: PUSH
61476: LD_INT 30
61478: PUSH
61479: LD_INT 31
61481: PUSH
61482: LD_INT 32
61484: PUSH
61485: LD_INT 33
61487: PUSH
61488: LD_INT 34
61490: PUSH
61491: LD_INT 36
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: LIST
61504: LIST
61505: LIST
61506: LIST
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 101
61529: PUSH
61530: LD_INT 102
61532: PUSH
61533: LD_INT 103
61535: PUSH
61536: LD_INT 104
61538: PUSH
61539: LD_INT 105
61541: PUSH
61542: LD_INT 106
61544: PUSH
61545: LD_INT 107
61547: PUSH
61548: LD_INT 108
61550: PUSH
61551: LD_INT 109
61553: PUSH
61554: LD_INT 110
61556: PUSH
61557: LD_INT 111
61559: PUSH
61560: LD_INT 112
61562: PUSH
61563: LD_INT 113
61565: PUSH
61566: LD_INT 114
61568: PUSH
61569: LD_INT 116
61571: PUSH
61572: LD_INT 117
61574: PUSH
61575: LD_INT 118
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: ST_TO_ADDR
61601: GO 62840
61603: LD_INT 14
61605: DOUBLE
61606: EQUAL
61607: IFTRUE 61611
61609: GO 61835
61611: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61612: LD_ADDR_VAR 0 2
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 2
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: LD_INT 4
61628: PUSH
61629: LD_INT 5
61631: PUSH
61632: LD_INT 6
61634: PUSH
61635: LD_INT 7
61637: PUSH
61638: LD_INT 8
61640: PUSH
61641: LD_INT 9
61643: PUSH
61644: LD_INT 10
61646: PUSH
61647: LD_INT 11
61649: PUSH
61650: LD_INT 12
61652: PUSH
61653: LD_INT 13
61655: PUSH
61656: LD_INT 14
61658: PUSH
61659: LD_INT 15
61661: PUSH
61662: LD_INT 16
61664: PUSH
61665: LD_INT 17
61667: PUSH
61668: LD_INT 18
61670: PUSH
61671: LD_INT 19
61673: PUSH
61674: LD_INT 20
61676: PUSH
61677: LD_INT 21
61679: PUSH
61680: LD_INT 22
61682: PUSH
61683: LD_INT 23
61685: PUSH
61686: LD_INT 24
61688: PUSH
61689: LD_INT 25
61691: PUSH
61692: LD_INT 26
61694: PUSH
61695: LD_INT 27
61697: PUSH
61698: LD_INT 28
61700: PUSH
61701: LD_INT 29
61703: PUSH
61704: LD_INT 30
61706: PUSH
61707: LD_INT 31
61709: PUSH
61710: LD_INT 32
61712: PUSH
61713: LD_INT 33
61715: PUSH
61716: LD_INT 34
61718: PUSH
61719: LD_INT 36
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 101
61761: PUSH
61762: LD_INT 102
61764: PUSH
61765: LD_INT 103
61767: PUSH
61768: LD_INT 104
61770: PUSH
61771: LD_INT 105
61773: PUSH
61774: LD_INT 106
61776: PUSH
61777: LD_INT 107
61779: PUSH
61780: LD_INT 108
61782: PUSH
61783: LD_INT 109
61785: PUSH
61786: LD_INT 110
61788: PUSH
61789: LD_INT 111
61791: PUSH
61792: LD_INT 112
61794: PUSH
61795: LD_INT 113
61797: PUSH
61798: LD_INT 114
61800: PUSH
61801: LD_INT 116
61803: PUSH
61804: LD_INT 117
61806: PUSH
61807: LD_INT 118
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: ST_TO_ADDR
61833: GO 62840
61835: LD_INT 15
61837: DOUBLE
61838: EQUAL
61839: IFTRUE 61843
61841: GO 62067
61843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61844: LD_ADDR_VAR 0 2
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 2
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 4
61860: PUSH
61861: LD_INT 5
61863: PUSH
61864: LD_INT 6
61866: PUSH
61867: LD_INT 7
61869: PUSH
61870: LD_INT 8
61872: PUSH
61873: LD_INT 9
61875: PUSH
61876: LD_INT 10
61878: PUSH
61879: LD_INT 11
61881: PUSH
61882: LD_INT 12
61884: PUSH
61885: LD_INT 13
61887: PUSH
61888: LD_INT 14
61890: PUSH
61891: LD_INT 15
61893: PUSH
61894: LD_INT 16
61896: PUSH
61897: LD_INT 17
61899: PUSH
61900: LD_INT 18
61902: PUSH
61903: LD_INT 19
61905: PUSH
61906: LD_INT 20
61908: PUSH
61909: LD_INT 21
61911: PUSH
61912: LD_INT 22
61914: PUSH
61915: LD_INT 23
61917: PUSH
61918: LD_INT 24
61920: PUSH
61921: LD_INT 25
61923: PUSH
61924: LD_INT 26
61926: PUSH
61927: LD_INT 27
61929: PUSH
61930: LD_INT 28
61932: PUSH
61933: LD_INT 29
61935: PUSH
61936: LD_INT 30
61938: PUSH
61939: LD_INT 31
61941: PUSH
61942: LD_INT 32
61944: PUSH
61945: LD_INT 33
61947: PUSH
61948: LD_INT 34
61950: PUSH
61951: LD_INT 36
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: LIST
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 101
61993: PUSH
61994: LD_INT 102
61996: PUSH
61997: LD_INT 103
61999: PUSH
62000: LD_INT 104
62002: PUSH
62003: LD_INT 105
62005: PUSH
62006: LD_INT 106
62008: PUSH
62009: LD_INT 107
62011: PUSH
62012: LD_INT 108
62014: PUSH
62015: LD_INT 109
62017: PUSH
62018: LD_INT 110
62020: PUSH
62021: LD_INT 111
62023: PUSH
62024: LD_INT 112
62026: PUSH
62027: LD_INT 113
62029: PUSH
62030: LD_INT 114
62032: PUSH
62033: LD_INT 116
62035: PUSH
62036: LD_INT 117
62038: PUSH
62039: LD_INT 118
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: ST_TO_ADDR
62065: GO 62840
62067: LD_INT 16
62069: DOUBLE
62070: EQUAL
62071: IFTRUE 62075
62073: GO 62211
62075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62076: LD_ADDR_VAR 0 2
62080: PUSH
62081: LD_INT 2
62083: PUSH
62084: LD_INT 4
62086: PUSH
62087: LD_INT 5
62089: PUSH
62090: LD_INT 7
62092: PUSH
62093: LD_INT 11
62095: PUSH
62096: LD_INT 12
62098: PUSH
62099: LD_INT 15
62101: PUSH
62102: LD_INT 16
62104: PUSH
62105: LD_INT 20
62107: PUSH
62108: LD_INT 21
62110: PUSH
62111: LD_INT 22
62113: PUSH
62114: LD_INT 23
62116: PUSH
62117: LD_INT 25
62119: PUSH
62120: LD_INT 26
62122: PUSH
62123: LD_INT 30
62125: PUSH
62126: LD_INT 31
62128: PUSH
62129: LD_INT 32
62131: PUSH
62132: LD_INT 33
62134: PUSH
62135: LD_INT 34
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 101
62161: PUSH
62162: LD_INT 102
62164: PUSH
62165: LD_INT 103
62167: PUSH
62168: LD_INT 106
62170: PUSH
62171: LD_INT 108
62173: PUSH
62174: LD_INT 112
62176: PUSH
62177: LD_INT 113
62179: PUSH
62180: LD_INT 114
62182: PUSH
62183: LD_INT 116
62185: PUSH
62186: LD_INT 117
62188: PUSH
62189: LD_INT 118
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: ST_TO_ADDR
62209: GO 62840
62211: LD_INT 17
62213: DOUBLE
62214: EQUAL
62215: IFTRUE 62219
62217: GO 62443
62219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62220: LD_ADDR_VAR 0 2
62224: PUSH
62225: LD_INT 1
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: LD_INT 3
62233: PUSH
62234: LD_INT 4
62236: PUSH
62237: LD_INT 5
62239: PUSH
62240: LD_INT 6
62242: PUSH
62243: LD_INT 7
62245: PUSH
62246: LD_INT 8
62248: PUSH
62249: LD_INT 9
62251: PUSH
62252: LD_INT 10
62254: PUSH
62255: LD_INT 11
62257: PUSH
62258: LD_INT 12
62260: PUSH
62261: LD_INT 13
62263: PUSH
62264: LD_INT 14
62266: PUSH
62267: LD_INT 15
62269: PUSH
62270: LD_INT 16
62272: PUSH
62273: LD_INT 17
62275: PUSH
62276: LD_INT 18
62278: PUSH
62279: LD_INT 19
62281: PUSH
62282: LD_INT 20
62284: PUSH
62285: LD_INT 21
62287: PUSH
62288: LD_INT 22
62290: PUSH
62291: LD_INT 23
62293: PUSH
62294: LD_INT 24
62296: PUSH
62297: LD_INT 25
62299: PUSH
62300: LD_INT 26
62302: PUSH
62303: LD_INT 27
62305: PUSH
62306: LD_INT 28
62308: PUSH
62309: LD_INT 29
62311: PUSH
62312: LD_INT 30
62314: PUSH
62315: LD_INT 31
62317: PUSH
62318: LD_INT 32
62320: PUSH
62321: LD_INT 33
62323: PUSH
62324: LD_INT 34
62326: PUSH
62327: LD_INT 36
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 101
62369: PUSH
62370: LD_INT 102
62372: PUSH
62373: LD_INT 103
62375: PUSH
62376: LD_INT 104
62378: PUSH
62379: LD_INT 105
62381: PUSH
62382: LD_INT 106
62384: PUSH
62385: LD_INT 107
62387: PUSH
62388: LD_INT 108
62390: PUSH
62391: LD_INT 109
62393: PUSH
62394: LD_INT 110
62396: PUSH
62397: LD_INT 111
62399: PUSH
62400: LD_INT 112
62402: PUSH
62403: LD_INT 113
62405: PUSH
62406: LD_INT 114
62408: PUSH
62409: LD_INT 116
62411: PUSH
62412: LD_INT 117
62414: PUSH
62415: LD_INT 118
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: ST_TO_ADDR
62441: GO 62840
62443: LD_INT 18
62445: DOUBLE
62446: EQUAL
62447: IFTRUE 62451
62449: GO 62599
62451: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62452: LD_ADDR_VAR 0 2
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 4
62462: PUSH
62463: LD_INT 5
62465: PUSH
62466: LD_INT 7
62468: PUSH
62469: LD_INT 11
62471: PUSH
62472: LD_INT 12
62474: PUSH
62475: LD_INT 15
62477: PUSH
62478: LD_INT 16
62480: PUSH
62481: LD_INT 20
62483: PUSH
62484: LD_INT 21
62486: PUSH
62487: LD_INT 22
62489: PUSH
62490: LD_INT 23
62492: PUSH
62493: LD_INT 25
62495: PUSH
62496: LD_INT 26
62498: PUSH
62499: LD_INT 30
62501: PUSH
62502: LD_INT 31
62504: PUSH
62505: LD_INT 32
62507: PUSH
62508: LD_INT 33
62510: PUSH
62511: LD_INT 34
62513: PUSH
62514: LD_INT 35
62516: PUSH
62517: LD_INT 36
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 101
62545: PUSH
62546: LD_INT 102
62548: PUSH
62549: LD_INT 103
62551: PUSH
62552: LD_INT 106
62554: PUSH
62555: LD_INT 108
62557: PUSH
62558: LD_INT 112
62560: PUSH
62561: LD_INT 113
62563: PUSH
62564: LD_INT 114
62566: PUSH
62567: LD_INT 115
62569: PUSH
62570: LD_INT 116
62572: PUSH
62573: LD_INT 117
62575: PUSH
62576: LD_INT 118
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: ST_TO_ADDR
62597: GO 62840
62599: LD_INT 19
62601: DOUBLE
62602: EQUAL
62603: IFTRUE 62607
62605: GO 62839
62607: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62608: LD_ADDR_VAR 0 2
62612: PUSH
62613: LD_INT 1
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: LD_INT 3
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: LD_INT 5
62627: PUSH
62628: LD_INT 6
62630: PUSH
62631: LD_INT 7
62633: PUSH
62634: LD_INT 8
62636: PUSH
62637: LD_INT 9
62639: PUSH
62640: LD_INT 10
62642: PUSH
62643: LD_INT 11
62645: PUSH
62646: LD_INT 12
62648: PUSH
62649: LD_INT 13
62651: PUSH
62652: LD_INT 14
62654: PUSH
62655: LD_INT 15
62657: PUSH
62658: LD_INT 16
62660: PUSH
62661: LD_INT 17
62663: PUSH
62664: LD_INT 18
62666: PUSH
62667: LD_INT 19
62669: PUSH
62670: LD_INT 20
62672: PUSH
62673: LD_INT 21
62675: PUSH
62676: LD_INT 22
62678: PUSH
62679: LD_INT 23
62681: PUSH
62682: LD_INT 24
62684: PUSH
62685: LD_INT 25
62687: PUSH
62688: LD_INT 26
62690: PUSH
62691: LD_INT 27
62693: PUSH
62694: LD_INT 28
62696: PUSH
62697: LD_INT 29
62699: PUSH
62700: LD_INT 30
62702: PUSH
62703: LD_INT 31
62705: PUSH
62706: LD_INT 32
62708: PUSH
62709: LD_INT 33
62711: PUSH
62712: LD_INT 34
62714: PUSH
62715: LD_INT 35
62717: PUSH
62718: LD_INT 36
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 101
62761: PUSH
62762: LD_INT 102
62764: PUSH
62765: LD_INT 103
62767: PUSH
62768: LD_INT 104
62770: PUSH
62771: LD_INT 105
62773: PUSH
62774: LD_INT 106
62776: PUSH
62777: LD_INT 107
62779: PUSH
62780: LD_INT 108
62782: PUSH
62783: LD_INT 109
62785: PUSH
62786: LD_INT 110
62788: PUSH
62789: LD_INT 111
62791: PUSH
62792: LD_INT 112
62794: PUSH
62795: LD_INT 113
62797: PUSH
62798: LD_INT 114
62800: PUSH
62801: LD_INT 115
62803: PUSH
62804: LD_INT 116
62806: PUSH
62807: LD_INT 117
62809: PUSH
62810: LD_INT 118
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: PUSH
62833: EMPTY
62834: LIST
62835: LIST
62836: ST_TO_ADDR
62837: GO 62840
62839: POP
// end else
62840: GO 63071
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62842: LD_ADDR_VAR 0 2
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: LD_INT 2
62852: PUSH
62853: LD_INT 3
62855: PUSH
62856: LD_INT 4
62858: PUSH
62859: LD_INT 5
62861: PUSH
62862: LD_INT 6
62864: PUSH
62865: LD_INT 7
62867: PUSH
62868: LD_INT 8
62870: PUSH
62871: LD_INT 9
62873: PUSH
62874: LD_INT 10
62876: PUSH
62877: LD_INT 11
62879: PUSH
62880: LD_INT 12
62882: PUSH
62883: LD_INT 13
62885: PUSH
62886: LD_INT 14
62888: PUSH
62889: LD_INT 15
62891: PUSH
62892: LD_INT 16
62894: PUSH
62895: LD_INT 17
62897: PUSH
62898: LD_INT 18
62900: PUSH
62901: LD_INT 19
62903: PUSH
62904: LD_INT 20
62906: PUSH
62907: LD_INT 21
62909: PUSH
62910: LD_INT 22
62912: PUSH
62913: LD_INT 23
62915: PUSH
62916: LD_INT 24
62918: PUSH
62919: LD_INT 25
62921: PUSH
62922: LD_INT 26
62924: PUSH
62925: LD_INT 27
62927: PUSH
62928: LD_INT 28
62930: PUSH
62931: LD_INT 29
62933: PUSH
62934: LD_INT 30
62936: PUSH
62937: LD_INT 31
62939: PUSH
62940: LD_INT 32
62942: PUSH
62943: LD_INT 33
62945: PUSH
62946: LD_INT 34
62948: PUSH
62949: LD_INT 35
62951: PUSH
62952: LD_INT 36
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 101
62995: PUSH
62996: LD_INT 102
62998: PUSH
62999: LD_INT 103
63001: PUSH
63002: LD_INT 104
63004: PUSH
63005: LD_INT 105
63007: PUSH
63008: LD_INT 106
63010: PUSH
63011: LD_INT 107
63013: PUSH
63014: LD_INT 108
63016: PUSH
63017: LD_INT 109
63019: PUSH
63020: LD_INT 110
63022: PUSH
63023: LD_INT 111
63025: PUSH
63026: LD_INT 112
63028: PUSH
63029: LD_INT 113
63031: PUSH
63032: LD_INT 114
63034: PUSH
63035: LD_INT 115
63037: PUSH
63038: LD_INT 116
63040: PUSH
63041: LD_INT 117
63043: PUSH
63044: LD_INT 118
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: ST_TO_ADDR
// if result then
63071: LD_VAR 0 2
63075: IFFALSE 63861
// begin normal :=  ;
63077: LD_ADDR_VAR 0 5
63081: PUSH
63082: LD_STRING 
63084: ST_TO_ADDR
// hardcore :=  ;
63085: LD_ADDR_VAR 0 6
63089: PUSH
63090: LD_STRING 
63092: ST_TO_ADDR
// active :=  ;
63093: LD_ADDR_VAR 0 7
63097: PUSH
63098: LD_STRING 
63100: ST_TO_ADDR
// for i = 1 to normalCounter do
63101: LD_ADDR_VAR 0 8
63105: PUSH
63106: DOUBLE
63107: LD_INT 1
63109: DEC
63110: ST_TO_ADDR
63111: LD_EXP 43
63115: PUSH
63116: FOR_TO
63117: IFFALSE 63218
// begin tmp := 0 ;
63119: LD_ADDR_VAR 0 3
63123: PUSH
63124: LD_STRING 0
63126: ST_TO_ADDR
// if result [ 1 ] then
63127: LD_VAR 0 2
63131: PUSH
63132: LD_INT 1
63134: ARRAY
63135: IFFALSE 63200
// if result [ 1 ] [ 1 ] = i then
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 1
63144: ARRAY
63145: PUSH
63146: LD_INT 1
63148: ARRAY
63149: PUSH
63150: LD_VAR 0 8
63154: EQUAL
63155: IFFALSE 63200
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63157: LD_ADDR_VAR 0 2
63161: PUSH
63162: LD_VAR 0 2
63166: PPUSH
63167: LD_INT 1
63169: PPUSH
63170: LD_VAR 0 2
63174: PUSH
63175: LD_INT 1
63177: ARRAY
63178: PPUSH
63179: LD_INT 1
63181: PPUSH
63182: CALL_OW 3
63186: PPUSH
63187: CALL_OW 1
63191: ST_TO_ADDR
// tmp := 1 ;
63192: LD_ADDR_VAR 0 3
63196: PUSH
63197: LD_STRING 1
63199: ST_TO_ADDR
// end ; normal := normal & tmp ;
63200: LD_ADDR_VAR 0 5
63204: PUSH
63205: LD_VAR 0 5
63209: PUSH
63210: LD_VAR 0 3
63214: STR
63215: ST_TO_ADDR
// end ;
63216: GO 63116
63218: POP
63219: POP
// for i = 1 to hardcoreCounter do
63220: LD_ADDR_VAR 0 8
63224: PUSH
63225: DOUBLE
63226: LD_INT 1
63228: DEC
63229: ST_TO_ADDR
63230: LD_EXP 44
63234: PUSH
63235: FOR_TO
63236: IFFALSE 63341
// begin tmp := 0 ;
63238: LD_ADDR_VAR 0 3
63242: PUSH
63243: LD_STRING 0
63245: ST_TO_ADDR
// if result [ 2 ] then
63246: LD_VAR 0 2
63250: PUSH
63251: LD_INT 2
63253: ARRAY
63254: IFFALSE 63323
// if result [ 2 ] [ 1 ] = 100 + i then
63256: LD_VAR 0 2
63260: PUSH
63261: LD_INT 2
63263: ARRAY
63264: PUSH
63265: LD_INT 1
63267: ARRAY
63268: PUSH
63269: LD_INT 100
63271: PUSH
63272: LD_VAR 0 8
63276: PLUS
63277: EQUAL
63278: IFFALSE 63323
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63280: LD_ADDR_VAR 0 2
63284: PUSH
63285: LD_VAR 0 2
63289: PPUSH
63290: LD_INT 2
63292: PPUSH
63293: LD_VAR 0 2
63297: PUSH
63298: LD_INT 2
63300: ARRAY
63301: PPUSH
63302: LD_INT 1
63304: PPUSH
63305: CALL_OW 3
63309: PPUSH
63310: CALL_OW 1
63314: ST_TO_ADDR
// tmp := 1 ;
63315: LD_ADDR_VAR 0 3
63319: PUSH
63320: LD_STRING 1
63322: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63323: LD_ADDR_VAR 0 6
63327: PUSH
63328: LD_VAR 0 6
63332: PUSH
63333: LD_VAR 0 3
63337: STR
63338: ST_TO_ADDR
// end ;
63339: GO 63235
63341: POP
63342: POP
// if isGameLoad then
63343: LD_VAR 0 1
63347: IFFALSE 63822
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63349: LD_ADDR_VAR 0 4
63353: PUSH
63354: LD_EXP 47
63358: PUSH
63359: LD_EXP 46
63363: PUSH
63364: LD_EXP 48
63368: PUSH
63369: LD_EXP 45
63373: PUSH
63374: LD_EXP 49
63378: PUSH
63379: LD_EXP 50
63383: PUSH
63384: LD_EXP 51
63388: PUSH
63389: LD_EXP 52
63393: PUSH
63394: LD_EXP 53
63398: PUSH
63399: LD_EXP 54
63403: PUSH
63404: LD_EXP 55
63408: PUSH
63409: LD_EXP 56
63413: PUSH
63414: LD_EXP 57
63418: PUSH
63419: LD_EXP 58
63423: PUSH
63424: LD_EXP 66
63428: PUSH
63429: LD_EXP 67
63433: PUSH
63434: LD_EXP 68
63438: PUSH
63439: LD_EXP 69
63443: PUSH
63444: LD_EXP 71
63448: PUSH
63449: LD_EXP 72
63453: PUSH
63454: LD_EXP 73
63458: PUSH
63459: LD_EXP 76
63463: PUSH
63464: LD_EXP 78
63468: PUSH
63469: LD_EXP 79
63473: PUSH
63474: LD_EXP 80
63478: PUSH
63479: LD_EXP 82
63483: PUSH
63484: LD_EXP 83
63488: PUSH
63489: LD_EXP 86
63493: PUSH
63494: LD_EXP 87
63498: PUSH
63499: LD_EXP 88
63503: PUSH
63504: LD_EXP 89
63508: PUSH
63509: LD_EXP 90
63513: PUSH
63514: LD_EXP 91
63518: PUSH
63519: LD_EXP 92
63523: PUSH
63524: LD_EXP 93
63528: PUSH
63529: LD_EXP 94
63533: PUSH
63534: LD_EXP 59
63538: PUSH
63539: LD_EXP 60
63543: PUSH
63544: LD_EXP 63
63548: PUSH
63549: LD_EXP 64
63553: PUSH
63554: LD_EXP 65
63558: PUSH
63559: LD_EXP 61
63563: PUSH
63564: LD_EXP 62
63568: PUSH
63569: LD_EXP 70
63573: PUSH
63574: LD_EXP 74
63578: PUSH
63579: LD_EXP 75
63583: PUSH
63584: LD_EXP 77
63588: PUSH
63589: LD_EXP 81
63593: PUSH
63594: LD_EXP 84
63598: PUSH
63599: LD_EXP 85
63603: PUSH
63604: LD_EXP 95
63608: PUSH
63609: LD_EXP 96
63613: PUSH
63614: LD_EXP 97
63618: PUSH
63619: LD_EXP 98
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: LIST
63657: LIST
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: ST_TO_ADDR
// tmp :=  ;
63680: LD_ADDR_VAR 0 3
63684: PUSH
63685: LD_STRING 
63687: ST_TO_ADDR
// for i = 1 to normalCounter do
63688: LD_ADDR_VAR 0 8
63692: PUSH
63693: DOUBLE
63694: LD_INT 1
63696: DEC
63697: ST_TO_ADDR
63698: LD_EXP 43
63702: PUSH
63703: FOR_TO
63704: IFFALSE 63740
// begin if flags [ i ] then
63706: LD_VAR 0 4
63710: PUSH
63711: LD_VAR 0 8
63715: ARRAY
63716: IFFALSE 63738
// tmp := tmp & i & ; ;
63718: LD_ADDR_VAR 0 3
63722: PUSH
63723: LD_VAR 0 3
63727: PUSH
63728: LD_VAR 0 8
63732: STR
63733: PUSH
63734: LD_STRING ;
63736: STR
63737: ST_TO_ADDR
// end ;
63738: GO 63703
63740: POP
63741: POP
// for i = 1 to hardcoreCounter do
63742: LD_ADDR_VAR 0 8
63746: PUSH
63747: DOUBLE
63748: LD_INT 1
63750: DEC
63751: ST_TO_ADDR
63752: LD_EXP 44
63756: PUSH
63757: FOR_TO
63758: IFFALSE 63804
// begin if flags [ normalCounter + i ] then
63760: LD_VAR 0 4
63764: PUSH
63765: LD_EXP 43
63769: PUSH
63770: LD_VAR 0 8
63774: PLUS
63775: ARRAY
63776: IFFALSE 63802
// tmp := tmp & ( 100 + i ) & ; ;
63778: LD_ADDR_VAR 0 3
63782: PUSH
63783: LD_VAR 0 3
63787: PUSH
63788: LD_INT 100
63790: PUSH
63791: LD_VAR 0 8
63795: PLUS
63796: STR
63797: PUSH
63798: LD_STRING ;
63800: STR
63801: ST_TO_ADDR
// end ;
63802: GO 63757
63804: POP
63805: POP
// if tmp then
63806: LD_VAR 0 3
63810: IFFALSE 63822
// active := tmp ;
63812: LD_ADDR_VAR 0 7
63816: PUSH
63817: LD_VAR 0 3
63821: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63822: LD_STRING getStreamItemsFromMission("
63824: PUSH
63825: LD_VAR 0 5
63829: STR
63830: PUSH
63831: LD_STRING ","
63833: STR
63834: PUSH
63835: LD_VAR 0 6
63839: STR
63840: PUSH
63841: LD_STRING ","
63843: STR
63844: PUSH
63845: LD_VAR 0 7
63849: STR
63850: PUSH
63851: LD_STRING ")
63853: STR
63854: PPUSH
63855: CALL_OW 559
// end else
63859: GO 63868
// ToLua ( getStreamItemsFromMission("","","") ) ;
63861: LD_STRING getStreamItemsFromMission("","","")
63863: PPUSH
63864: CALL_OW 559
// end ;
63868: LD_VAR 0 2
63872: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63873: LD_EXP 42
63877: PUSH
63878: LD_EXP 47
63882: AND
63883: IFFALSE 64007
63885: GO 63887
63887: DISABLE
63888: LD_INT 0
63890: PPUSH
63891: PPUSH
// begin enable ;
63892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63893: LD_ADDR_VAR 0 2
63897: PUSH
63898: LD_INT 22
63900: PUSH
63901: LD_OWVAR 2
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 2
63912: PUSH
63913: LD_INT 34
63915: PUSH
63916: LD_INT 7
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 34
63925: PUSH
63926: LD_INT 45
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 34
63935: PUSH
63936: LD_INT 28
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 34
63945: PUSH
63946: LD_INT 47
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PPUSH
63964: CALL_OW 69
63968: ST_TO_ADDR
// if not tmp then
63969: LD_VAR 0 2
63973: NOT
63974: IFFALSE 63978
// exit ;
63976: GO 64007
// for i in tmp do
63978: LD_ADDR_VAR 0 1
63982: PUSH
63983: LD_VAR 0 2
63987: PUSH
63988: FOR_IN
63989: IFFALSE 64005
// begin SetLives ( i , 0 ) ;
63991: LD_VAR 0 1
63995: PPUSH
63996: LD_INT 0
63998: PPUSH
63999: CALL_OW 234
// end ;
64003: GO 63988
64005: POP
64006: POP
// end ;
64007: PPOPN 2
64009: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64010: LD_EXP 42
64014: PUSH
64015: LD_EXP 48
64019: AND
64020: IFFALSE 64104
64022: GO 64024
64024: DISABLE
64025: LD_INT 0
64027: PPUSH
64028: PPUSH
// begin enable ;
64029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64030: LD_ADDR_VAR 0 2
64034: PUSH
64035: LD_INT 22
64037: PUSH
64038: LD_OWVAR 2
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 32
64049: PUSH
64050: LD_INT 3
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PPUSH
64061: CALL_OW 69
64065: ST_TO_ADDR
// if not tmp then
64066: LD_VAR 0 2
64070: NOT
64071: IFFALSE 64075
// exit ;
64073: GO 64104
// for i in tmp do
64075: LD_ADDR_VAR 0 1
64079: PUSH
64080: LD_VAR 0 2
64084: PUSH
64085: FOR_IN
64086: IFFALSE 64102
// begin SetLives ( i , 0 ) ;
64088: LD_VAR 0 1
64092: PPUSH
64093: LD_INT 0
64095: PPUSH
64096: CALL_OW 234
// end ;
64100: GO 64085
64102: POP
64103: POP
// end ;
64104: PPOPN 2
64106: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64107: LD_EXP 42
64111: PUSH
64112: LD_EXP 45
64116: AND
64117: IFFALSE 64210
64119: GO 64121
64121: DISABLE
64122: LD_INT 0
64124: PPUSH
// begin enable ;
64125: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64126: LD_ADDR_VAR 0 1
64130: PUSH
64131: LD_INT 22
64133: PUSH
64134: LD_OWVAR 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 25
64148: PUSH
64149: LD_INT 5
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 25
64158: PUSH
64159: LD_INT 9
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 25
64168: PUSH
64169: LD_INT 8
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: PPUSH
64186: CALL_OW 69
64190: PUSH
64191: FOR_IN
64192: IFFALSE 64208
// begin SetClass ( i , 1 ) ;
64194: LD_VAR 0 1
64198: PPUSH
64199: LD_INT 1
64201: PPUSH
64202: CALL_OW 336
// end ;
64206: GO 64191
64208: POP
64209: POP
// end ;
64210: PPOPN 1
64212: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64213: LD_EXP 42
64217: PUSH
64218: LD_EXP 46
64222: AND
64223: PUSH
64224: LD_OWVAR 65
64228: PUSH
64229: LD_INT 7
64231: LESS
64232: AND
64233: IFFALSE 64247
64235: GO 64237
64237: DISABLE
// begin enable ;
64238: ENABLE
// game_speed := 7 ;
64239: LD_ADDR_OWVAR 65
64243: PUSH
64244: LD_INT 7
64246: ST_TO_ADDR
// end ;
64247: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64248: LD_EXP 42
64252: PUSH
64253: LD_EXP 49
64257: AND
64258: IFFALSE 64460
64260: GO 64262
64262: DISABLE
64263: LD_INT 0
64265: PPUSH
64266: PPUSH
64267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: LD_INT 81
64275: PUSH
64276: LD_OWVAR 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 21
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PPUSH
64299: CALL_OW 69
64303: ST_TO_ADDR
// if not tmp then
64304: LD_VAR 0 3
64308: NOT
64309: IFFALSE 64313
// exit ;
64311: GO 64460
// if tmp > 5 then
64313: LD_VAR 0 3
64317: PUSH
64318: LD_INT 5
64320: GREATER
64321: IFFALSE 64333
// k := 5 else
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: LD_INT 5
64330: ST_TO_ADDR
64331: GO 64343
// k := tmp ;
64333: LD_ADDR_VAR 0 2
64337: PUSH
64338: LD_VAR 0 3
64342: ST_TO_ADDR
// for i := 1 to k do
64343: LD_ADDR_VAR 0 1
64347: PUSH
64348: DOUBLE
64349: LD_INT 1
64351: DEC
64352: ST_TO_ADDR
64353: LD_VAR 0 2
64357: PUSH
64358: FOR_TO
64359: IFFALSE 64458
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64361: LD_VAR 0 3
64365: PUSH
64366: LD_VAR 0 1
64370: ARRAY
64371: PPUSH
64372: LD_VAR 0 1
64376: PUSH
64377: LD_INT 4
64379: MOD
64380: PUSH
64381: LD_INT 1
64383: PLUS
64384: PPUSH
64385: CALL_OW 259
64389: PUSH
64390: LD_INT 10
64392: LESS
64393: IFFALSE 64456
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64395: LD_VAR 0 3
64399: PUSH
64400: LD_VAR 0 1
64404: ARRAY
64405: PPUSH
64406: LD_VAR 0 1
64410: PUSH
64411: LD_INT 4
64413: MOD
64414: PUSH
64415: LD_INT 1
64417: PLUS
64418: PPUSH
64419: LD_VAR 0 3
64423: PUSH
64424: LD_VAR 0 1
64428: ARRAY
64429: PPUSH
64430: LD_VAR 0 1
64434: PUSH
64435: LD_INT 4
64437: MOD
64438: PUSH
64439: LD_INT 1
64441: PLUS
64442: PPUSH
64443: CALL_OW 259
64447: PUSH
64448: LD_INT 1
64450: PLUS
64451: PPUSH
64452: CALL_OW 237
64456: GO 64358
64458: POP
64459: POP
// end ;
64460: PPOPN 3
64462: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64463: LD_EXP 42
64467: PUSH
64468: LD_EXP 50
64472: AND
64473: IFFALSE 64493
64475: GO 64477
64477: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64478: LD_INT 4
64480: PPUSH
64481: LD_OWVAR 2
64485: PPUSH
64486: LD_INT 0
64488: PPUSH
64489: CALL_OW 324
64493: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64494: LD_EXP 42
64498: PUSH
64499: LD_EXP 79
64503: AND
64504: IFFALSE 64524
64506: GO 64508
64508: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64509: LD_INT 19
64511: PPUSH
64512: LD_OWVAR 2
64516: PPUSH
64517: LD_INT 0
64519: PPUSH
64520: CALL_OW 324
64524: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64525: LD_EXP 42
64529: PUSH
64530: LD_EXP 51
64534: AND
64535: IFFALSE 64637
64537: GO 64539
64539: DISABLE
64540: LD_INT 0
64542: PPUSH
64543: PPUSH
// begin enable ;
64544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64545: LD_ADDR_VAR 0 2
64549: PUSH
64550: LD_INT 22
64552: PUSH
64553: LD_OWVAR 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: LD_INT 34
64567: PUSH
64568: LD_INT 11
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 34
64577: PUSH
64578: LD_INT 30
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: LIST
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PPUSH
64594: CALL_OW 69
64598: ST_TO_ADDR
// if not tmp then
64599: LD_VAR 0 2
64603: NOT
64604: IFFALSE 64608
// exit ;
64606: GO 64637
// for i in tmp do
64608: LD_ADDR_VAR 0 1
64612: PUSH
64613: LD_VAR 0 2
64617: PUSH
64618: FOR_IN
64619: IFFALSE 64635
// begin SetLives ( i , 0 ) ;
64621: LD_VAR 0 1
64625: PPUSH
64626: LD_INT 0
64628: PPUSH
64629: CALL_OW 234
// end ;
64633: GO 64618
64635: POP
64636: POP
// end ;
64637: PPOPN 2
64639: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64640: LD_EXP 42
64644: PUSH
64645: LD_EXP 52
64649: AND
64650: IFFALSE 64670
64652: GO 64654
64654: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64655: LD_INT 32
64657: PPUSH
64658: LD_OWVAR 2
64662: PPUSH
64663: LD_INT 0
64665: PPUSH
64666: CALL_OW 324
64670: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64671: LD_EXP 42
64675: PUSH
64676: LD_EXP 53
64680: AND
64681: IFFALSE 64862
64683: GO 64685
64685: DISABLE
64686: LD_INT 0
64688: PPUSH
64689: PPUSH
64690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64691: LD_ADDR_VAR 0 2
64695: PUSH
64696: LD_INT 22
64698: PUSH
64699: LD_OWVAR 2
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 33
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PPUSH
64722: CALL_OW 69
64726: ST_TO_ADDR
// if not tmp then
64727: LD_VAR 0 2
64731: NOT
64732: IFFALSE 64736
// exit ;
64734: GO 64862
// side := 0 ;
64736: LD_ADDR_VAR 0 3
64740: PUSH
64741: LD_INT 0
64743: ST_TO_ADDR
// for i := 1 to 8 do
64744: LD_ADDR_VAR 0 1
64748: PUSH
64749: DOUBLE
64750: LD_INT 1
64752: DEC
64753: ST_TO_ADDR
64754: LD_INT 8
64756: PUSH
64757: FOR_TO
64758: IFFALSE 64806
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64760: LD_OWVAR 2
64764: PUSH
64765: LD_VAR 0 1
64769: NONEQUAL
64770: PUSH
64771: LD_OWVAR 2
64775: PPUSH
64776: LD_VAR 0 1
64780: PPUSH
64781: CALL_OW 81
64785: PUSH
64786: LD_INT 2
64788: EQUAL
64789: AND
64790: IFFALSE 64804
// begin side := i ;
64792: LD_ADDR_VAR 0 3
64796: PUSH
64797: LD_VAR 0 1
64801: ST_TO_ADDR
// break ;
64802: GO 64806
// end ;
64804: GO 64757
64806: POP
64807: POP
// if not side then
64808: LD_VAR 0 3
64812: NOT
64813: IFFALSE 64817
// exit ;
64815: GO 64862
// for i := 1 to tmp do
64817: LD_ADDR_VAR 0 1
64821: PUSH
64822: DOUBLE
64823: LD_INT 1
64825: DEC
64826: ST_TO_ADDR
64827: LD_VAR 0 2
64831: PUSH
64832: FOR_TO
64833: IFFALSE 64860
// if Prob ( 60 ) then
64835: LD_INT 60
64837: PPUSH
64838: CALL_OW 13
64842: IFFALSE 64858
// SetSide ( i , side ) ;
64844: LD_VAR 0 1
64848: PPUSH
64849: LD_VAR 0 3
64853: PPUSH
64854: CALL_OW 235
64858: GO 64832
64860: POP
64861: POP
// end ;
64862: PPOPN 3
64864: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64865: LD_EXP 42
64869: PUSH
64870: LD_EXP 55
64874: AND
64875: IFFALSE 64994
64877: GO 64879
64879: DISABLE
64880: LD_INT 0
64882: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64883: LD_ADDR_VAR 0 1
64887: PUSH
64888: LD_INT 22
64890: PUSH
64891: LD_OWVAR 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 21
64902: PUSH
64903: LD_INT 1
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: LD_INT 23
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: PPUSH
64932: CALL_OW 69
64936: PUSH
64937: FOR_IN
64938: IFFALSE 64992
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64940: LD_VAR 0 1
64944: PPUSH
64945: CALL_OW 257
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: LD_INT 2
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: LD_INT 4
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: IN
64968: IFFALSE 64990
// SetClass ( un , rand ( 1 , 4 ) ) ;
64970: LD_VAR 0 1
64974: PPUSH
64975: LD_INT 1
64977: PPUSH
64978: LD_INT 4
64980: PPUSH
64981: CALL_OW 12
64985: PPUSH
64986: CALL_OW 336
64990: GO 64937
64992: POP
64993: POP
// end ;
64994: PPOPN 1
64996: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64997: LD_EXP 42
65001: PUSH
65002: LD_EXP 54
65006: AND
65007: IFFALSE 65086
65009: GO 65011
65011: DISABLE
65012: LD_INT 0
65014: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65015: LD_ADDR_VAR 0 1
65019: PUSH
65020: LD_INT 22
65022: PUSH
65023: LD_OWVAR 2
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 21
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PPUSH
65046: CALL_OW 69
65050: ST_TO_ADDR
// if not tmp then
65051: LD_VAR 0 1
65055: NOT
65056: IFFALSE 65060
// exit ;
65058: GO 65086
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65060: LD_VAR 0 1
65064: PUSH
65065: LD_INT 1
65067: PPUSH
65068: LD_VAR 0 1
65072: PPUSH
65073: CALL_OW 12
65077: ARRAY
65078: PPUSH
65079: LD_INT 100
65081: PPUSH
65082: CALL_OW 234
// end ;
65086: PPOPN 1
65088: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65089: LD_EXP 42
65093: PUSH
65094: LD_EXP 56
65098: AND
65099: IFFALSE 65197
65101: GO 65103
65103: DISABLE
65104: LD_INT 0
65106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65107: LD_ADDR_VAR 0 1
65111: PUSH
65112: LD_INT 22
65114: PUSH
65115: LD_OWVAR 2
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: LD_INT 21
65126: PUSH
65127: LD_INT 1
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PPUSH
65138: CALL_OW 69
65142: ST_TO_ADDR
// if not tmp then
65143: LD_VAR 0 1
65147: NOT
65148: IFFALSE 65152
// exit ;
65150: GO 65197
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65152: LD_VAR 0 1
65156: PUSH
65157: LD_INT 1
65159: PPUSH
65160: LD_VAR 0 1
65164: PPUSH
65165: CALL_OW 12
65169: ARRAY
65170: PPUSH
65171: LD_INT 1
65173: PPUSH
65174: LD_INT 4
65176: PPUSH
65177: CALL_OW 12
65181: PPUSH
65182: LD_INT 3000
65184: PPUSH
65185: LD_INT 9000
65187: PPUSH
65188: CALL_OW 12
65192: PPUSH
65193: CALL_OW 492
// end ;
65197: PPOPN 1
65199: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65200: LD_EXP 42
65204: PUSH
65205: LD_EXP 57
65209: AND
65210: IFFALSE 65230
65212: GO 65214
65214: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65215: LD_INT 1
65217: PPUSH
65218: LD_OWVAR 2
65222: PPUSH
65223: LD_INT 0
65225: PPUSH
65226: CALL_OW 324
65230: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65231: LD_EXP 42
65235: PUSH
65236: LD_EXP 58
65240: AND
65241: IFFALSE 65324
65243: GO 65245
65245: DISABLE
65246: LD_INT 0
65248: PPUSH
65249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65250: LD_ADDR_VAR 0 2
65254: PUSH
65255: LD_INT 22
65257: PUSH
65258: LD_OWVAR 2
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 21
65269: PUSH
65270: LD_INT 3
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PPUSH
65281: CALL_OW 69
65285: ST_TO_ADDR
// if not tmp then
65286: LD_VAR 0 2
65290: NOT
65291: IFFALSE 65295
// exit ;
65293: GO 65324
// for i in tmp do
65295: LD_ADDR_VAR 0 1
65299: PUSH
65300: LD_VAR 0 2
65304: PUSH
65305: FOR_IN
65306: IFFALSE 65322
// SetBLevel ( i , 10 ) ;
65308: LD_VAR 0 1
65312: PPUSH
65313: LD_INT 10
65315: PPUSH
65316: CALL_OW 241
65320: GO 65305
65322: POP
65323: POP
// end ;
65324: PPOPN 2
65326: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65327: LD_EXP 42
65331: PUSH
65332: LD_EXP 59
65336: AND
65337: IFFALSE 65448
65339: GO 65341
65341: DISABLE
65342: LD_INT 0
65344: PPUSH
65345: PPUSH
65346: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65347: LD_ADDR_VAR 0 3
65351: PUSH
65352: LD_INT 22
65354: PUSH
65355: LD_OWVAR 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 25
65366: PUSH
65367: LD_INT 1
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PPUSH
65378: CALL_OW 69
65382: ST_TO_ADDR
// if not tmp then
65383: LD_VAR 0 3
65387: NOT
65388: IFFALSE 65392
// exit ;
65390: GO 65448
// un := tmp [ rand ( 1 , tmp ) ] ;
65392: LD_ADDR_VAR 0 2
65396: PUSH
65397: LD_VAR 0 3
65401: PUSH
65402: LD_INT 1
65404: PPUSH
65405: LD_VAR 0 3
65409: PPUSH
65410: CALL_OW 12
65414: ARRAY
65415: ST_TO_ADDR
// if Crawls ( un ) then
65416: LD_VAR 0 2
65420: PPUSH
65421: CALL_OW 318
65425: IFFALSE 65436
// ComWalk ( un ) ;
65427: LD_VAR 0 2
65431: PPUSH
65432: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65436: LD_VAR 0 2
65440: PPUSH
65441: LD_INT 5
65443: PPUSH
65444: CALL_OW 336
// end ;
65448: PPOPN 3
65450: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65451: LD_EXP 42
65455: PUSH
65456: LD_EXP 60
65460: AND
65461: PUSH
65462: LD_OWVAR 67
65466: PUSH
65467: LD_INT 4
65469: LESS
65470: AND
65471: IFFALSE 65490
65473: GO 65475
65475: DISABLE
// begin Difficulty := Difficulty + 1 ;
65476: LD_ADDR_OWVAR 67
65480: PUSH
65481: LD_OWVAR 67
65485: PUSH
65486: LD_INT 1
65488: PLUS
65489: ST_TO_ADDR
// end ;
65490: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65491: LD_EXP 42
65495: PUSH
65496: LD_EXP 61
65500: AND
65501: IFFALSE 65604
65503: GO 65505
65505: DISABLE
65506: LD_INT 0
65508: PPUSH
// begin for i := 1 to 5 do
65509: LD_ADDR_VAR 0 1
65513: PUSH
65514: DOUBLE
65515: LD_INT 1
65517: DEC
65518: ST_TO_ADDR
65519: LD_INT 5
65521: PUSH
65522: FOR_TO
65523: IFFALSE 65602
// begin uc_nation := nation_nature ;
65525: LD_ADDR_OWVAR 21
65529: PUSH
65530: LD_INT 0
65532: ST_TO_ADDR
// uc_side := 0 ;
65533: LD_ADDR_OWVAR 20
65537: PUSH
65538: LD_INT 0
65540: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65541: LD_ADDR_OWVAR 29
65545: PUSH
65546: LD_INT 12
65548: PUSH
65549: LD_INT 12
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: ST_TO_ADDR
// hc_agressivity := 20 ;
65556: LD_ADDR_OWVAR 35
65560: PUSH
65561: LD_INT 20
65563: ST_TO_ADDR
// hc_class := class_tiger ;
65564: LD_ADDR_OWVAR 28
65568: PUSH
65569: LD_INT 14
65571: ST_TO_ADDR
// hc_gallery :=  ;
65572: LD_ADDR_OWVAR 33
65576: PUSH
65577: LD_STRING 
65579: ST_TO_ADDR
// hc_name :=  ;
65580: LD_ADDR_OWVAR 26
65584: PUSH
65585: LD_STRING 
65587: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65588: CALL_OW 44
65592: PPUSH
65593: LD_INT 0
65595: PPUSH
65596: CALL_OW 51
// end ;
65600: GO 65522
65602: POP
65603: POP
// end ;
65604: PPOPN 1
65606: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65607: LD_EXP 42
65611: PUSH
65612: LD_EXP 62
65616: AND
65617: IFFALSE 65626
65619: GO 65621
65621: DISABLE
// StreamSibBomb ;
65622: CALL 65627 0 0
65626: END
// export function StreamSibBomb ; var i , x , y ; begin
65627: LD_INT 0
65629: PPUSH
65630: PPUSH
65631: PPUSH
65632: PPUSH
// result := false ;
65633: LD_ADDR_VAR 0 1
65637: PUSH
65638: LD_INT 0
65640: ST_TO_ADDR
// for i := 1 to 16 do
65641: LD_ADDR_VAR 0 2
65645: PUSH
65646: DOUBLE
65647: LD_INT 1
65649: DEC
65650: ST_TO_ADDR
65651: LD_INT 16
65653: PUSH
65654: FOR_TO
65655: IFFALSE 65854
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65657: LD_ADDR_VAR 0 3
65661: PUSH
65662: LD_INT 10
65664: PUSH
65665: LD_INT 20
65667: PUSH
65668: LD_INT 30
65670: PUSH
65671: LD_INT 40
65673: PUSH
65674: LD_INT 50
65676: PUSH
65677: LD_INT 60
65679: PUSH
65680: LD_INT 70
65682: PUSH
65683: LD_INT 80
65685: PUSH
65686: LD_INT 90
65688: PUSH
65689: LD_INT 100
65691: PUSH
65692: LD_INT 110
65694: PUSH
65695: LD_INT 120
65697: PUSH
65698: LD_INT 130
65700: PUSH
65701: LD_INT 140
65703: PUSH
65704: LD_INT 150
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PPUSH
65727: LD_INT 15
65729: PPUSH
65730: CALL_OW 12
65734: ARRAY
65735: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65736: LD_ADDR_VAR 0 4
65740: PUSH
65741: LD_INT 10
65743: PUSH
65744: LD_INT 20
65746: PUSH
65747: LD_INT 30
65749: PUSH
65750: LD_INT 40
65752: PUSH
65753: LD_INT 50
65755: PUSH
65756: LD_INT 60
65758: PUSH
65759: LD_INT 70
65761: PUSH
65762: LD_INT 80
65764: PUSH
65765: LD_INT 90
65767: PUSH
65768: LD_INT 100
65770: PUSH
65771: LD_INT 110
65773: PUSH
65774: LD_INT 120
65776: PUSH
65777: LD_INT 130
65779: PUSH
65780: LD_INT 140
65782: PUSH
65783: LD_INT 150
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 1
65805: PPUSH
65806: LD_INT 15
65808: PPUSH
65809: CALL_OW 12
65813: ARRAY
65814: ST_TO_ADDR
// if ValidHex ( x , y ) then
65815: LD_VAR 0 3
65819: PPUSH
65820: LD_VAR 0 4
65824: PPUSH
65825: CALL_OW 488
65829: IFFALSE 65852
// begin result := [ x , y ] ;
65831: LD_ADDR_VAR 0 1
65835: PUSH
65836: LD_VAR 0 3
65840: PUSH
65841: LD_VAR 0 4
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: ST_TO_ADDR
// break ;
65850: GO 65854
// end ; end ;
65852: GO 65654
65854: POP
65855: POP
// if result then
65856: LD_VAR 0 1
65860: IFFALSE 65920
// begin ToLua ( playSibBomb() ) ;
65862: LD_STRING playSibBomb()
65864: PPUSH
65865: CALL_OW 559
// wait ( 0 0$14 ) ;
65869: LD_INT 490
65871: PPUSH
65872: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65876: LD_VAR 0 1
65880: PUSH
65881: LD_INT 1
65883: ARRAY
65884: PPUSH
65885: LD_VAR 0 1
65889: PUSH
65890: LD_INT 2
65892: ARRAY
65893: PPUSH
65894: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65898: LD_VAR 0 1
65902: PUSH
65903: LD_INT 1
65905: ARRAY
65906: PPUSH
65907: LD_VAR 0 1
65911: PUSH
65912: LD_INT 2
65914: ARRAY
65915: PPUSH
65916: CALL_OW 429
// end ; end ;
65920: LD_VAR 0 1
65924: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65925: LD_EXP 42
65929: PUSH
65930: LD_EXP 64
65934: AND
65935: IFFALSE 65947
65937: GO 65939
65939: DISABLE
// YouLost (  ) ;
65940: LD_STRING 
65942: PPUSH
65943: CALL_OW 104
65947: END
// every 0 0$1 trigger StreamModeActive and sFog do
65948: LD_EXP 42
65952: PUSH
65953: LD_EXP 63
65957: AND
65958: IFFALSE 65972
65960: GO 65962
65962: DISABLE
// FogOff ( your_side ) ;
65963: LD_OWVAR 2
65967: PPUSH
65968: CALL_OW 344
65972: END
// every 0 0$1 trigger StreamModeActive and sSun do
65973: LD_EXP 42
65977: PUSH
65978: LD_EXP 65
65982: AND
65983: IFFALSE 66011
65985: GO 65987
65987: DISABLE
// begin solar_recharge_percent := 0 ;
65988: LD_ADDR_OWVAR 79
65992: PUSH
65993: LD_INT 0
65995: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65996: LD_INT 10500
65998: PPUSH
65999: CALL_OW 67
// solar_recharge_percent := 100 ;
66003: LD_ADDR_OWVAR 79
66007: PUSH
66008: LD_INT 100
66010: ST_TO_ADDR
// end ;
66011: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66012: LD_EXP 42
66016: PUSH
66017: LD_EXP 66
66021: AND
66022: IFFALSE 66261
66024: GO 66026
66026: DISABLE
66027: LD_INT 0
66029: PPUSH
66030: PPUSH
66031: PPUSH
// begin tmp := [ ] ;
66032: LD_ADDR_VAR 0 3
66036: PUSH
66037: EMPTY
66038: ST_TO_ADDR
// for i := 1 to 6 do
66039: LD_ADDR_VAR 0 1
66043: PUSH
66044: DOUBLE
66045: LD_INT 1
66047: DEC
66048: ST_TO_ADDR
66049: LD_INT 6
66051: PUSH
66052: FOR_TO
66053: IFFALSE 66158
// begin uc_nation := nation_nature ;
66055: LD_ADDR_OWVAR 21
66059: PUSH
66060: LD_INT 0
66062: ST_TO_ADDR
// uc_side := 0 ;
66063: LD_ADDR_OWVAR 20
66067: PUSH
66068: LD_INT 0
66070: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66071: LD_ADDR_OWVAR 29
66075: PUSH
66076: LD_INT 12
66078: PUSH
66079: LD_INT 12
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// hc_agressivity := 20 ;
66086: LD_ADDR_OWVAR 35
66090: PUSH
66091: LD_INT 20
66093: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66094: LD_ADDR_OWVAR 28
66098: PUSH
66099: LD_INT 17
66101: ST_TO_ADDR
// hc_gallery :=  ;
66102: LD_ADDR_OWVAR 33
66106: PUSH
66107: LD_STRING 
66109: ST_TO_ADDR
// hc_name :=  ;
66110: LD_ADDR_OWVAR 26
66114: PUSH
66115: LD_STRING 
66117: ST_TO_ADDR
// un := CreateHuman ;
66118: LD_ADDR_VAR 0 2
66122: PUSH
66123: CALL_OW 44
66127: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66128: LD_VAR 0 2
66132: PPUSH
66133: LD_INT 1
66135: PPUSH
66136: CALL_OW 51
// tmp := tmp ^ un ;
66140: LD_ADDR_VAR 0 3
66144: PUSH
66145: LD_VAR 0 3
66149: PUSH
66150: LD_VAR 0 2
66154: ADD
66155: ST_TO_ADDR
// end ;
66156: GO 66052
66158: POP
66159: POP
// repeat wait ( 0 0$1 ) ;
66160: LD_INT 35
66162: PPUSH
66163: CALL_OW 67
// for un in tmp do
66167: LD_ADDR_VAR 0 2
66171: PUSH
66172: LD_VAR 0 3
66176: PUSH
66177: FOR_IN
66178: IFFALSE 66252
// begin if IsDead ( un ) then
66180: LD_VAR 0 2
66184: PPUSH
66185: CALL_OW 301
66189: IFFALSE 66209
// begin tmp := tmp diff un ;
66191: LD_ADDR_VAR 0 3
66195: PUSH
66196: LD_VAR 0 3
66200: PUSH
66201: LD_VAR 0 2
66205: DIFF
66206: ST_TO_ADDR
// continue ;
66207: GO 66177
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66209: LD_VAR 0 2
66213: PPUSH
66214: LD_INT 3
66216: PUSH
66217: LD_INT 22
66219: PUSH
66220: LD_INT 0
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PPUSH
66231: CALL_OW 69
66235: PPUSH
66236: LD_VAR 0 2
66240: PPUSH
66241: CALL_OW 74
66245: PPUSH
66246: CALL_OW 115
// end ;
66250: GO 66177
66252: POP
66253: POP
// until not tmp ;
66254: LD_VAR 0 3
66258: NOT
66259: IFFALSE 66160
// end ;
66261: PPOPN 3
66263: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66264: LD_EXP 42
66268: PUSH
66269: LD_EXP 67
66273: AND
66274: IFFALSE 66328
66276: GO 66278
66278: DISABLE
// begin ToLua ( displayTroll(); ) ;
66279: LD_STRING displayTroll();
66281: PPUSH
66282: CALL_OW 559
// wait ( 3 3$00 ) ;
66286: LD_INT 6300
66288: PPUSH
66289: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66293: LD_STRING hideTroll();
66295: PPUSH
66296: CALL_OW 559
// wait ( 1 1$00 ) ;
66300: LD_INT 2100
66302: PPUSH
66303: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66307: LD_STRING displayTroll();
66309: PPUSH
66310: CALL_OW 559
// wait ( 1 1$00 ) ;
66314: LD_INT 2100
66316: PPUSH
66317: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66321: LD_STRING hideTroll();
66323: PPUSH
66324: CALL_OW 559
// end ;
66328: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66329: LD_EXP 42
66333: PUSH
66334: LD_EXP 68
66338: AND
66339: IFFALSE 66402
66341: GO 66343
66343: DISABLE
66344: LD_INT 0
66346: PPUSH
// begin p := 0 ;
66347: LD_ADDR_VAR 0 1
66351: PUSH
66352: LD_INT 0
66354: ST_TO_ADDR
// repeat game_speed := 1 ;
66355: LD_ADDR_OWVAR 65
66359: PUSH
66360: LD_INT 1
66362: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66363: LD_INT 35
66365: PPUSH
66366: CALL_OW 67
// p := p + 1 ;
66370: LD_ADDR_VAR 0 1
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_INT 1
66382: PLUS
66383: ST_TO_ADDR
// until p >= 60 ;
66384: LD_VAR 0 1
66388: PUSH
66389: LD_INT 60
66391: GREATEREQUAL
66392: IFFALSE 66355
// game_speed := 4 ;
66394: LD_ADDR_OWVAR 65
66398: PUSH
66399: LD_INT 4
66401: ST_TO_ADDR
// end ;
66402: PPOPN 1
66404: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66405: LD_EXP 42
66409: PUSH
66410: LD_EXP 69
66414: AND
66415: IFFALSE 66561
66417: GO 66419
66419: DISABLE
66420: LD_INT 0
66422: PPUSH
66423: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66424: LD_ADDR_VAR 0 1
66428: PUSH
66429: LD_INT 22
66431: PUSH
66432: LD_OWVAR 2
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: LD_INT 30
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 30
66456: PUSH
66457: LD_INT 1
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: LIST
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PPUSH
66473: CALL_OW 69
66477: ST_TO_ADDR
// if not depot then
66478: LD_VAR 0 1
66482: NOT
66483: IFFALSE 66487
// exit ;
66485: GO 66561
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66487: LD_ADDR_VAR 0 2
66491: PUSH
66492: LD_VAR 0 1
66496: PUSH
66497: LD_INT 1
66499: PPUSH
66500: LD_VAR 0 1
66504: PPUSH
66505: CALL_OW 12
66509: ARRAY
66510: PPUSH
66511: CALL_OW 274
66515: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66516: LD_VAR 0 2
66520: PPUSH
66521: LD_INT 1
66523: PPUSH
66524: LD_INT 0
66526: PPUSH
66527: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66531: LD_VAR 0 2
66535: PPUSH
66536: LD_INT 2
66538: PPUSH
66539: LD_INT 0
66541: PPUSH
66542: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66546: LD_VAR 0 2
66550: PPUSH
66551: LD_INT 3
66553: PPUSH
66554: LD_INT 0
66556: PPUSH
66557: CALL_OW 277
// end ;
66561: PPOPN 2
66563: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66564: LD_EXP 42
66568: PUSH
66569: LD_EXP 70
66573: AND
66574: IFFALSE 66671
66576: GO 66578
66578: DISABLE
66579: LD_INT 0
66581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66582: LD_ADDR_VAR 0 1
66586: PUSH
66587: LD_INT 22
66589: PUSH
66590: LD_OWVAR 2
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 21
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 3
66611: PUSH
66612: LD_INT 23
66614: PUSH
66615: LD_INT 0
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: LIST
66630: PPUSH
66631: CALL_OW 69
66635: ST_TO_ADDR
// if not tmp then
66636: LD_VAR 0 1
66640: NOT
66641: IFFALSE 66645
// exit ;
66643: GO 66671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66645: LD_VAR 0 1
66649: PUSH
66650: LD_INT 1
66652: PPUSH
66653: LD_VAR 0 1
66657: PPUSH
66658: CALL_OW 12
66662: ARRAY
66663: PPUSH
66664: LD_INT 200
66666: PPUSH
66667: CALL_OW 234
// end ;
66671: PPOPN 1
66673: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66674: LD_EXP 42
66678: PUSH
66679: LD_EXP 71
66683: AND
66684: IFFALSE 66763
66686: GO 66688
66688: DISABLE
66689: LD_INT 0
66691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66692: LD_ADDR_VAR 0 1
66696: PUSH
66697: LD_INT 22
66699: PUSH
66700: LD_OWVAR 2
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 21
66711: PUSH
66712: LD_INT 2
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PPUSH
66723: CALL_OW 69
66727: ST_TO_ADDR
// if not tmp then
66728: LD_VAR 0 1
66732: NOT
66733: IFFALSE 66737
// exit ;
66735: GO 66763
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66737: LD_VAR 0 1
66741: PUSH
66742: LD_INT 1
66744: PPUSH
66745: LD_VAR 0 1
66749: PPUSH
66750: CALL_OW 12
66754: ARRAY
66755: PPUSH
66756: LD_INT 60
66758: PPUSH
66759: CALL_OW 234
// end ;
66763: PPOPN 1
66765: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66766: LD_EXP 42
66770: PUSH
66771: LD_EXP 72
66775: AND
66776: IFFALSE 66875
66778: GO 66780
66780: DISABLE
66781: LD_INT 0
66783: PPUSH
66784: PPUSH
// begin enable ;
66785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66786: LD_ADDR_VAR 0 1
66790: PUSH
66791: LD_INT 22
66793: PUSH
66794: LD_OWVAR 2
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 61
66805: PUSH
66806: EMPTY
66807: LIST
66808: PUSH
66809: LD_INT 33
66811: PUSH
66812: LD_INT 2
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: LIST
66823: PPUSH
66824: CALL_OW 69
66828: ST_TO_ADDR
// if not tmp then
66829: LD_VAR 0 1
66833: NOT
66834: IFFALSE 66838
// exit ;
66836: GO 66875
// for i in tmp do
66838: LD_ADDR_VAR 0 2
66842: PUSH
66843: LD_VAR 0 1
66847: PUSH
66848: FOR_IN
66849: IFFALSE 66873
// if IsControledBy ( i ) then
66851: LD_VAR 0 2
66855: PPUSH
66856: CALL_OW 312
66860: IFFALSE 66871
// ComUnlink ( i ) ;
66862: LD_VAR 0 2
66866: PPUSH
66867: CALL_OW 136
66871: GO 66848
66873: POP
66874: POP
// end ;
66875: PPOPN 2
66877: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66878: LD_EXP 42
66882: PUSH
66883: LD_EXP 73
66887: AND
66888: IFFALSE 67028
66890: GO 66892
66892: DISABLE
66893: LD_INT 0
66895: PPUSH
66896: PPUSH
// begin ToLua ( displayPowell(); ) ;
66897: LD_STRING displayPowell();
66899: PPUSH
66900: CALL_OW 559
// uc_side := 0 ;
66904: LD_ADDR_OWVAR 20
66908: PUSH
66909: LD_INT 0
66911: ST_TO_ADDR
// uc_nation := 2 ;
66912: LD_ADDR_OWVAR 21
66916: PUSH
66917: LD_INT 2
66919: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66920: LD_ADDR_OWVAR 37
66924: PUSH
66925: LD_INT 14
66927: ST_TO_ADDR
// vc_engine := engine_siberite ;
66928: LD_ADDR_OWVAR 39
66932: PUSH
66933: LD_INT 3
66935: ST_TO_ADDR
// vc_control := control_apeman ;
66936: LD_ADDR_OWVAR 38
66940: PUSH
66941: LD_INT 5
66943: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66944: LD_ADDR_OWVAR 40
66948: PUSH
66949: LD_INT 29
66951: ST_TO_ADDR
// un := CreateVehicle ;
66952: LD_ADDR_VAR 0 2
66956: PUSH
66957: CALL_OW 45
66961: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66962: LD_VAR 0 2
66966: PPUSH
66967: LD_INT 1
66969: PPUSH
66970: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66974: LD_INT 35
66976: PPUSH
66977: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66981: LD_VAR 0 2
66985: PPUSH
66986: LD_INT 22
66988: PUSH
66989: LD_OWVAR 2
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PPUSH
66998: CALL_OW 69
67002: PPUSH
67003: LD_VAR 0 2
67007: PPUSH
67008: CALL_OW 74
67012: PPUSH
67013: CALL_OW 115
// until IsDead ( un ) ;
67017: LD_VAR 0 2
67021: PPUSH
67022: CALL_OW 301
67026: IFFALSE 66974
// end ;
67028: PPOPN 2
67030: END
// every 0 0$1 trigger StreamModeActive and sStu do
67031: LD_EXP 42
67035: PUSH
67036: LD_EXP 81
67040: AND
67041: IFFALSE 67057
67043: GO 67045
67045: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67046: LD_STRING displayStucuk();
67048: PPUSH
67049: CALL_OW 559
// ResetFog ;
67053: CALL_OW 335
// end ;
67057: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67058: LD_EXP 42
67062: PUSH
67063: LD_EXP 74
67067: AND
67068: IFFALSE 67209
67070: GO 67072
67072: DISABLE
67073: LD_INT 0
67075: PPUSH
67076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67077: LD_ADDR_VAR 0 2
67081: PUSH
67082: LD_INT 22
67084: PUSH
67085: LD_OWVAR 2
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 21
67096: PUSH
67097: LD_INT 1
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PPUSH
67108: CALL_OW 69
67112: ST_TO_ADDR
// if not tmp then
67113: LD_VAR 0 2
67117: NOT
67118: IFFALSE 67122
// exit ;
67120: GO 67209
// un := tmp [ rand ( 1 , tmp ) ] ;
67122: LD_ADDR_VAR 0 1
67126: PUSH
67127: LD_VAR 0 2
67131: PUSH
67132: LD_INT 1
67134: PPUSH
67135: LD_VAR 0 2
67139: PPUSH
67140: CALL_OW 12
67144: ARRAY
67145: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67146: LD_VAR 0 1
67150: PPUSH
67151: LD_INT 0
67153: PPUSH
67154: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67158: LD_VAR 0 1
67162: PPUSH
67163: LD_OWVAR 3
67167: PUSH
67168: LD_VAR 0 1
67172: DIFF
67173: PPUSH
67174: LD_VAR 0 1
67178: PPUSH
67179: CALL_OW 74
67183: PPUSH
67184: CALL_OW 115
// wait ( 0 0$20 ) ;
67188: LD_INT 700
67190: PPUSH
67191: CALL_OW 67
// SetSide ( un , your_side ) ;
67195: LD_VAR 0 1
67199: PPUSH
67200: LD_OWVAR 2
67204: PPUSH
67205: CALL_OW 235
// end ;
67209: PPOPN 2
67211: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67212: LD_EXP 42
67216: PUSH
67217: LD_EXP 75
67221: AND
67222: IFFALSE 67328
67224: GO 67226
67226: DISABLE
67227: LD_INT 0
67229: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67230: LD_ADDR_VAR 0 1
67234: PUSH
67235: LD_INT 22
67237: PUSH
67238: LD_OWVAR 2
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 2
67249: PUSH
67250: LD_INT 30
67252: PUSH
67253: LD_INT 0
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 30
67262: PUSH
67263: LD_INT 1
67265: PUSH
67266: EMPTY
67267: LIST
67268: LIST
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PPUSH
67279: CALL_OW 69
67283: ST_TO_ADDR
// if not depot then
67284: LD_VAR 0 1
67288: NOT
67289: IFFALSE 67293
// exit ;
67291: GO 67328
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67293: LD_VAR 0 1
67297: PUSH
67298: LD_INT 1
67300: ARRAY
67301: PPUSH
67302: CALL_OW 250
67306: PPUSH
67307: LD_VAR 0 1
67311: PUSH
67312: LD_INT 1
67314: ARRAY
67315: PPUSH
67316: CALL_OW 251
67320: PPUSH
67321: LD_INT 70
67323: PPUSH
67324: CALL_OW 495
// end ;
67328: PPOPN 1
67330: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67331: LD_EXP 42
67335: PUSH
67336: LD_EXP 76
67340: AND
67341: IFFALSE 67552
67343: GO 67345
67345: DISABLE
67346: LD_INT 0
67348: PPUSH
67349: PPUSH
67350: PPUSH
67351: PPUSH
67352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67353: LD_ADDR_VAR 0 5
67357: PUSH
67358: LD_INT 22
67360: PUSH
67361: LD_OWVAR 2
67365: PUSH
67366: EMPTY
67367: LIST
67368: LIST
67369: PUSH
67370: LD_INT 21
67372: PUSH
67373: LD_INT 1
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PPUSH
67384: CALL_OW 69
67388: ST_TO_ADDR
// if not tmp then
67389: LD_VAR 0 5
67393: NOT
67394: IFFALSE 67398
// exit ;
67396: GO 67552
// for i in tmp do
67398: LD_ADDR_VAR 0 1
67402: PUSH
67403: LD_VAR 0 5
67407: PUSH
67408: FOR_IN
67409: IFFALSE 67550
// begin d := rand ( 0 , 5 ) ;
67411: LD_ADDR_VAR 0 4
67415: PUSH
67416: LD_INT 0
67418: PPUSH
67419: LD_INT 5
67421: PPUSH
67422: CALL_OW 12
67426: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67427: LD_ADDR_VAR 0 2
67431: PUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: CALL_OW 250
67441: PPUSH
67442: LD_VAR 0 4
67446: PPUSH
67447: LD_INT 3
67449: PPUSH
67450: LD_INT 12
67452: PPUSH
67453: CALL_OW 12
67457: PPUSH
67458: CALL_OW 272
67462: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67463: LD_ADDR_VAR 0 3
67467: PUSH
67468: LD_VAR 0 1
67472: PPUSH
67473: CALL_OW 251
67477: PPUSH
67478: LD_VAR 0 4
67482: PPUSH
67483: LD_INT 3
67485: PPUSH
67486: LD_INT 12
67488: PPUSH
67489: CALL_OW 12
67493: PPUSH
67494: CALL_OW 273
67498: ST_TO_ADDR
// if ValidHex ( x , y ) then
67499: LD_VAR 0 2
67503: PPUSH
67504: LD_VAR 0 3
67508: PPUSH
67509: CALL_OW 488
67513: IFFALSE 67548
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67515: LD_VAR 0 1
67519: PPUSH
67520: LD_VAR 0 2
67524: PPUSH
67525: LD_VAR 0 3
67529: PPUSH
67530: LD_INT 3
67532: PPUSH
67533: LD_INT 6
67535: PPUSH
67536: CALL_OW 12
67540: PPUSH
67541: LD_INT 1
67543: PPUSH
67544: CALL_OW 483
// end ;
67548: GO 67408
67550: POP
67551: POP
// end ;
67552: PPOPN 5
67554: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67555: LD_EXP 42
67559: PUSH
67560: LD_EXP 77
67564: AND
67565: IFFALSE 67659
67567: GO 67569
67569: DISABLE
67570: LD_INT 0
67572: PPUSH
67573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67574: LD_ADDR_VAR 0 2
67578: PUSH
67579: LD_INT 22
67581: PUSH
67582: LD_OWVAR 2
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 32
67593: PUSH
67594: LD_INT 1
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 21
67603: PUSH
67604: LD_INT 2
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: LIST
67615: PPUSH
67616: CALL_OW 69
67620: ST_TO_ADDR
// if not tmp then
67621: LD_VAR 0 2
67625: NOT
67626: IFFALSE 67630
// exit ;
67628: GO 67659
// for i in tmp do
67630: LD_ADDR_VAR 0 1
67634: PUSH
67635: LD_VAR 0 2
67639: PUSH
67640: FOR_IN
67641: IFFALSE 67657
// SetFuel ( i , 0 ) ;
67643: LD_VAR 0 1
67647: PPUSH
67648: LD_INT 0
67650: PPUSH
67651: CALL_OW 240
67655: GO 67640
67657: POP
67658: POP
// end ;
67659: PPOPN 2
67661: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67662: LD_EXP 42
67666: PUSH
67667: LD_EXP 78
67671: AND
67672: IFFALSE 67738
67674: GO 67676
67676: DISABLE
67677: LD_INT 0
67679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67680: LD_ADDR_VAR 0 1
67684: PUSH
67685: LD_INT 22
67687: PUSH
67688: LD_OWVAR 2
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 30
67699: PUSH
67700: LD_INT 29
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PPUSH
67711: CALL_OW 69
67715: ST_TO_ADDR
// if not tmp then
67716: LD_VAR 0 1
67720: NOT
67721: IFFALSE 67725
// exit ;
67723: GO 67738
// DestroyUnit ( tmp [ 1 ] ) ;
67725: LD_VAR 0 1
67729: PUSH
67730: LD_INT 1
67732: ARRAY
67733: PPUSH
67734: CALL_OW 65
// end ;
67738: PPOPN 1
67740: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67741: LD_EXP 42
67745: PUSH
67746: LD_EXP 80
67750: AND
67751: IFFALSE 67880
67753: GO 67755
67755: DISABLE
67756: LD_INT 0
67758: PPUSH
// begin uc_side := 0 ;
67759: LD_ADDR_OWVAR 20
67763: PUSH
67764: LD_INT 0
67766: ST_TO_ADDR
// uc_nation := nation_arabian ;
67767: LD_ADDR_OWVAR 21
67771: PUSH
67772: LD_INT 2
67774: ST_TO_ADDR
// hc_gallery :=  ;
67775: LD_ADDR_OWVAR 33
67779: PUSH
67780: LD_STRING 
67782: ST_TO_ADDR
// hc_name :=  ;
67783: LD_ADDR_OWVAR 26
67787: PUSH
67788: LD_STRING 
67790: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67791: LD_INT 1
67793: PPUSH
67794: LD_INT 11
67796: PPUSH
67797: LD_INT 10
67799: PPUSH
67800: CALL_OW 380
// un := CreateHuman ;
67804: LD_ADDR_VAR 0 1
67808: PUSH
67809: CALL_OW 44
67813: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67814: LD_VAR 0 1
67818: PPUSH
67819: LD_INT 1
67821: PPUSH
67822: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67826: LD_INT 35
67828: PPUSH
67829: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67833: LD_VAR 0 1
67837: PPUSH
67838: LD_INT 22
67840: PUSH
67841: LD_OWVAR 2
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PPUSH
67850: CALL_OW 69
67854: PPUSH
67855: LD_VAR 0 1
67859: PPUSH
67860: CALL_OW 74
67864: PPUSH
67865: CALL_OW 115
// until IsDead ( un ) ;
67869: LD_VAR 0 1
67873: PPUSH
67874: CALL_OW 301
67878: IFFALSE 67826
// end ;
67880: PPOPN 1
67882: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67883: LD_EXP 42
67887: PUSH
67888: LD_EXP 82
67892: AND
67893: IFFALSE 67905
67895: GO 67897
67897: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67898: LD_STRING earthquake(getX(game), 0, 32)
67900: PPUSH
67901: CALL_OW 559
67905: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67906: LD_EXP 42
67910: PUSH
67911: LD_EXP 83
67915: AND
67916: IFFALSE 68007
67918: GO 67920
67920: DISABLE
67921: LD_INT 0
67923: PPUSH
// begin enable ;
67924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67925: LD_ADDR_VAR 0 1
67929: PUSH
67930: LD_INT 22
67932: PUSH
67933: LD_OWVAR 2
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 21
67944: PUSH
67945: LD_INT 2
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: LD_INT 33
67954: PUSH
67955: LD_INT 3
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PPUSH
67967: CALL_OW 69
67971: ST_TO_ADDR
// if not tmp then
67972: LD_VAR 0 1
67976: NOT
67977: IFFALSE 67981
// exit ;
67979: GO 68007
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67981: LD_VAR 0 1
67985: PUSH
67986: LD_INT 1
67988: PPUSH
67989: LD_VAR 0 1
67993: PPUSH
67994: CALL_OW 12
67998: ARRAY
67999: PPUSH
68000: LD_INT 1
68002: PPUSH
68003: CALL_OW 234
// end ;
68007: PPOPN 1
68009: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68010: LD_EXP 42
68014: PUSH
68015: LD_EXP 84
68019: AND
68020: IFFALSE 68161
68022: GO 68024
68024: DISABLE
68025: LD_INT 0
68027: PPUSH
68028: PPUSH
68029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68030: LD_ADDR_VAR 0 3
68034: PUSH
68035: LD_INT 22
68037: PUSH
68038: LD_OWVAR 2
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 25
68049: PUSH
68050: LD_INT 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PPUSH
68061: CALL_OW 69
68065: ST_TO_ADDR
// if not tmp then
68066: LD_VAR 0 3
68070: NOT
68071: IFFALSE 68075
// exit ;
68073: GO 68161
// un := tmp [ rand ( 1 , tmp ) ] ;
68075: LD_ADDR_VAR 0 2
68079: PUSH
68080: LD_VAR 0 3
68084: PUSH
68085: LD_INT 1
68087: PPUSH
68088: LD_VAR 0 3
68092: PPUSH
68093: CALL_OW 12
68097: ARRAY
68098: ST_TO_ADDR
// if Crawls ( un ) then
68099: LD_VAR 0 2
68103: PPUSH
68104: CALL_OW 318
68108: IFFALSE 68119
// ComWalk ( un ) ;
68110: LD_VAR 0 2
68114: PPUSH
68115: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68119: LD_VAR 0 2
68123: PPUSH
68124: LD_INT 9
68126: PPUSH
68127: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68131: LD_INT 28
68133: PPUSH
68134: LD_OWVAR 2
68138: PPUSH
68139: LD_INT 2
68141: PPUSH
68142: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68146: LD_INT 29
68148: PPUSH
68149: LD_OWVAR 2
68153: PPUSH
68154: LD_INT 2
68156: PPUSH
68157: CALL_OW 322
// end ;
68161: PPOPN 3
68163: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68164: LD_EXP 42
68168: PUSH
68169: LD_EXP 85
68173: AND
68174: IFFALSE 68285
68176: GO 68178
68178: DISABLE
68179: LD_INT 0
68181: PPUSH
68182: PPUSH
68183: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68184: LD_ADDR_VAR 0 3
68188: PUSH
68189: LD_INT 22
68191: PUSH
68192: LD_OWVAR 2
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 25
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PPUSH
68215: CALL_OW 69
68219: ST_TO_ADDR
// if not tmp then
68220: LD_VAR 0 3
68224: NOT
68225: IFFALSE 68229
// exit ;
68227: GO 68285
// un := tmp [ rand ( 1 , tmp ) ] ;
68229: LD_ADDR_VAR 0 2
68233: PUSH
68234: LD_VAR 0 3
68238: PUSH
68239: LD_INT 1
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: CALL_OW 12
68251: ARRAY
68252: ST_TO_ADDR
// if Crawls ( un ) then
68253: LD_VAR 0 2
68257: PPUSH
68258: CALL_OW 318
68262: IFFALSE 68273
// ComWalk ( un ) ;
68264: LD_VAR 0 2
68268: PPUSH
68269: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68273: LD_VAR 0 2
68277: PPUSH
68278: LD_INT 8
68280: PPUSH
68281: CALL_OW 336
// end ;
68285: PPOPN 3
68287: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68288: LD_EXP 42
68292: PUSH
68293: LD_EXP 86
68297: AND
68298: IFFALSE 68442
68300: GO 68302
68302: DISABLE
68303: LD_INT 0
68305: PPUSH
68306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_INT 22
68314: PUSH
68315: LD_OWVAR 2
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 21
68326: PUSH
68327: LD_INT 2
68329: PUSH
68330: EMPTY
68331: LIST
68332: LIST
68333: PUSH
68334: LD_INT 2
68336: PUSH
68337: LD_INT 34
68339: PUSH
68340: LD_INT 12
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 34
68349: PUSH
68350: LD_INT 51
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 34
68359: PUSH
68360: LD_INT 32
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: LIST
68377: PPUSH
68378: CALL_OW 69
68382: ST_TO_ADDR
// if not tmp then
68383: LD_VAR 0 2
68387: NOT
68388: IFFALSE 68392
// exit ;
68390: GO 68442
// for i in tmp do
68392: LD_ADDR_VAR 0 1
68396: PUSH
68397: LD_VAR 0 2
68401: PUSH
68402: FOR_IN
68403: IFFALSE 68440
// if GetCargo ( i , mat_artifact ) = 0 then
68405: LD_VAR 0 1
68409: PPUSH
68410: LD_INT 4
68412: PPUSH
68413: CALL_OW 289
68417: PUSH
68418: LD_INT 0
68420: EQUAL
68421: IFFALSE 68438
// SetCargo ( i , mat_siberit , 100 ) ;
68423: LD_VAR 0 1
68427: PPUSH
68428: LD_INT 3
68430: PPUSH
68431: LD_INT 100
68433: PPUSH
68434: CALL_OW 290
68438: GO 68402
68440: POP
68441: POP
// end ;
68442: PPOPN 2
68444: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68445: LD_EXP 42
68449: PUSH
68450: LD_EXP 87
68454: AND
68455: IFFALSE 68638
68457: GO 68459
68459: DISABLE
68460: LD_INT 0
68462: PPUSH
68463: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68464: LD_ADDR_VAR 0 2
68468: PUSH
68469: LD_INT 22
68471: PUSH
68472: LD_OWVAR 2
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PPUSH
68481: CALL_OW 69
68485: ST_TO_ADDR
// if not tmp then
68486: LD_VAR 0 2
68490: NOT
68491: IFFALSE 68495
// exit ;
68493: GO 68638
// for i := 1 to 2 do
68495: LD_ADDR_VAR 0 1
68499: PUSH
68500: DOUBLE
68501: LD_INT 1
68503: DEC
68504: ST_TO_ADDR
68505: LD_INT 2
68507: PUSH
68508: FOR_TO
68509: IFFALSE 68636
// begin uc_side := your_side ;
68511: LD_ADDR_OWVAR 20
68515: PUSH
68516: LD_OWVAR 2
68520: ST_TO_ADDR
// uc_nation := nation_american ;
68521: LD_ADDR_OWVAR 21
68525: PUSH
68526: LD_INT 1
68528: ST_TO_ADDR
// vc_chassis := us_morphling ;
68529: LD_ADDR_OWVAR 37
68533: PUSH
68534: LD_INT 5
68536: ST_TO_ADDR
// vc_engine := engine_siberite ;
68537: LD_ADDR_OWVAR 39
68541: PUSH
68542: LD_INT 3
68544: ST_TO_ADDR
// vc_control := control_computer ;
68545: LD_ADDR_OWVAR 38
68549: PUSH
68550: LD_INT 3
68552: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68553: LD_ADDR_OWVAR 40
68557: PUSH
68558: LD_INT 10
68560: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68561: LD_VAR 0 2
68565: PUSH
68566: LD_INT 1
68568: ARRAY
68569: PPUSH
68570: CALL_OW 310
68574: NOT
68575: IFFALSE 68622
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68577: CALL_OW 45
68581: PPUSH
68582: LD_VAR 0 2
68586: PUSH
68587: LD_INT 1
68589: ARRAY
68590: PPUSH
68591: CALL_OW 250
68595: PPUSH
68596: LD_VAR 0 2
68600: PUSH
68601: LD_INT 1
68603: ARRAY
68604: PPUSH
68605: CALL_OW 251
68609: PPUSH
68610: LD_INT 12
68612: PPUSH
68613: LD_INT 1
68615: PPUSH
68616: CALL_OW 50
68620: GO 68634
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68622: CALL_OW 45
68626: PPUSH
68627: LD_INT 1
68629: PPUSH
68630: CALL_OW 51
// end ;
68634: GO 68508
68636: POP
68637: POP
// end ;
68638: PPOPN 2
68640: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68641: LD_EXP 42
68645: PUSH
68646: LD_EXP 88
68650: AND
68651: IFFALSE 68873
68653: GO 68655
68655: DISABLE
68656: LD_INT 0
68658: PPUSH
68659: PPUSH
68660: PPUSH
68661: PPUSH
68662: PPUSH
68663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68664: LD_ADDR_VAR 0 6
68668: PUSH
68669: LD_INT 22
68671: PUSH
68672: LD_OWVAR 2
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 21
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: LD_INT 3
68693: PUSH
68694: LD_INT 23
68696: PUSH
68697: LD_INT 0
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: LIST
68712: PPUSH
68713: CALL_OW 69
68717: ST_TO_ADDR
// if not tmp then
68718: LD_VAR 0 6
68722: NOT
68723: IFFALSE 68727
// exit ;
68725: GO 68873
// s1 := rand ( 1 , 4 ) ;
68727: LD_ADDR_VAR 0 2
68731: PUSH
68732: LD_INT 1
68734: PPUSH
68735: LD_INT 4
68737: PPUSH
68738: CALL_OW 12
68742: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68743: LD_ADDR_VAR 0 4
68747: PUSH
68748: LD_VAR 0 6
68752: PUSH
68753: LD_INT 1
68755: ARRAY
68756: PPUSH
68757: LD_VAR 0 2
68761: PPUSH
68762: CALL_OW 259
68766: ST_TO_ADDR
// if s1 = 1 then
68767: LD_VAR 0 2
68771: PUSH
68772: LD_INT 1
68774: EQUAL
68775: IFFALSE 68795
// s2 := rand ( 2 , 4 ) else
68777: LD_ADDR_VAR 0 3
68781: PUSH
68782: LD_INT 2
68784: PPUSH
68785: LD_INT 4
68787: PPUSH
68788: CALL_OW 12
68792: ST_TO_ADDR
68793: GO 68803
// s2 := 1 ;
68795: LD_ADDR_VAR 0 3
68799: PUSH
68800: LD_INT 1
68802: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68803: LD_ADDR_VAR 0 5
68807: PUSH
68808: LD_VAR 0 6
68812: PUSH
68813: LD_INT 1
68815: ARRAY
68816: PPUSH
68817: LD_VAR 0 3
68821: PPUSH
68822: CALL_OW 259
68826: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68827: LD_VAR 0 6
68831: PUSH
68832: LD_INT 1
68834: ARRAY
68835: PPUSH
68836: LD_VAR 0 2
68840: PPUSH
68841: LD_VAR 0 5
68845: PPUSH
68846: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68850: LD_VAR 0 6
68854: PUSH
68855: LD_INT 1
68857: ARRAY
68858: PPUSH
68859: LD_VAR 0 3
68863: PPUSH
68864: LD_VAR 0 4
68868: PPUSH
68869: CALL_OW 237
// end ;
68873: PPOPN 6
68875: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68876: LD_EXP 42
68880: PUSH
68881: LD_EXP 89
68885: AND
68886: IFFALSE 68965
68888: GO 68890
68890: DISABLE
68891: LD_INT 0
68893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68894: LD_ADDR_VAR 0 1
68898: PUSH
68899: LD_INT 22
68901: PUSH
68902: LD_OWVAR 2
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 30
68913: PUSH
68914: LD_INT 3
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PPUSH
68925: CALL_OW 69
68929: ST_TO_ADDR
// if not tmp then
68930: LD_VAR 0 1
68934: NOT
68935: IFFALSE 68939
// exit ;
68937: GO 68965
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68939: LD_VAR 0 1
68943: PUSH
68944: LD_INT 1
68946: PPUSH
68947: LD_VAR 0 1
68951: PPUSH
68952: CALL_OW 12
68956: ARRAY
68957: PPUSH
68958: LD_INT 1
68960: PPUSH
68961: CALL_OW 234
// end ;
68965: PPOPN 1
68967: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68968: LD_EXP 42
68972: PUSH
68973: LD_EXP 90
68977: AND
68978: IFFALSE 69090
68980: GO 68982
68982: DISABLE
68983: LD_INT 0
68985: PPUSH
68986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68987: LD_ADDR_VAR 0 2
68991: PUSH
68992: LD_INT 22
68994: PUSH
68995: LD_OWVAR 2
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 2
69006: PUSH
69007: LD_INT 30
69009: PUSH
69010: LD_INT 27
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 30
69019: PUSH
69020: LD_INT 26
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 30
69029: PUSH
69030: LD_INT 28
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PPUSH
69047: CALL_OW 69
69051: ST_TO_ADDR
// if not tmp then
69052: LD_VAR 0 2
69056: NOT
69057: IFFALSE 69061
// exit ;
69059: GO 69090
// for i in tmp do
69061: LD_ADDR_VAR 0 1
69065: PUSH
69066: LD_VAR 0 2
69070: PUSH
69071: FOR_IN
69072: IFFALSE 69088
// SetLives ( i , 1 ) ;
69074: LD_VAR 0 1
69078: PPUSH
69079: LD_INT 1
69081: PPUSH
69082: CALL_OW 234
69086: GO 69071
69088: POP
69089: POP
// end ;
69090: PPOPN 2
69092: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69093: LD_EXP 42
69097: PUSH
69098: LD_EXP 91
69102: AND
69103: IFFALSE 69390
69105: GO 69107
69107: DISABLE
69108: LD_INT 0
69110: PPUSH
69111: PPUSH
69112: PPUSH
// begin i := rand ( 1 , 7 ) ;
69113: LD_ADDR_VAR 0 1
69117: PUSH
69118: LD_INT 1
69120: PPUSH
69121: LD_INT 7
69123: PPUSH
69124: CALL_OW 12
69128: ST_TO_ADDR
// case i of 1 :
69129: LD_VAR 0 1
69133: PUSH
69134: LD_INT 1
69136: DOUBLE
69137: EQUAL
69138: IFTRUE 69142
69140: GO 69152
69142: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69143: LD_STRING earthquake(getX(game), 0, 32)
69145: PPUSH
69146: CALL_OW 559
69150: GO 69390
69152: LD_INT 2
69154: DOUBLE
69155: EQUAL
69156: IFTRUE 69160
69158: GO 69174
69160: POP
// begin ToLua ( displayStucuk(); ) ;
69161: LD_STRING displayStucuk();
69163: PPUSH
69164: CALL_OW 559
// ResetFog ;
69168: CALL_OW 335
// end ; 3 :
69172: GO 69390
69174: LD_INT 3
69176: DOUBLE
69177: EQUAL
69178: IFTRUE 69182
69180: GO 69286
69182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69183: LD_ADDR_VAR 0 2
69187: PUSH
69188: LD_INT 22
69190: PUSH
69191: LD_OWVAR 2
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 25
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PPUSH
69214: CALL_OW 69
69218: ST_TO_ADDR
// if not tmp then
69219: LD_VAR 0 2
69223: NOT
69224: IFFALSE 69228
// exit ;
69226: GO 69390
// un := tmp [ rand ( 1 , tmp ) ] ;
69228: LD_ADDR_VAR 0 3
69232: PUSH
69233: LD_VAR 0 2
69237: PUSH
69238: LD_INT 1
69240: PPUSH
69241: LD_VAR 0 2
69245: PPUSH
69246: CALL_OW 12
69250: ARRAY
69251: ST_TO_ADDR
// if Crawls ( un ) then
69252: LD_VAR 0 3
69256: PPUSH
69257: CALL_OW 318
69261: IFFALSE 69272
// ComWalk ( un ) ;
69263: LD_VAR 0 3
69267: PPUSH
69268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69272: LD_VAR 0 3
69276: PPUSH
69277: LD_INT 8
69279: PPUSH
69280: CALL_OW 336
// end ; 4 :
69284: GO 69390
69286: LD_INT 4
69288: DOUBLE
69289: EQUAL
69290: IFTRUE 69294
69292: GO 69368
69294: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69295: LD_ADDR_VAR 0 2
69299: PUSH
69300: LD_INT 22
69302: PUSH
69303: LD_OWVAR 2
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 30
69314: PUSH
69315: LD_INT 29
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: EMPTY
69323: LIST
69324: LIST
69325: PPUSH
69326: CALL_OW 69
69330: ST_TO_ADDR
// if not tmp then
69331: LD_VAR 0 2
69335: NOT
69336: IFFALSE 69340
// exit ;
69338: GO 69390
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69340: LD_VAR 0 2
69344: PUSH
69345: LD_INT 1
69347: ARRAY
69348: PPUSH
69349: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69353: LD_VAR 0 2
69357: PUSH
69358: LD_INT 1
69360: ARRAY
69361: PPUSH
69362: CALL_OW 65
// end ; 5 .. 7 :
69366: GO 69390
69368: LD_INT 5
69370: DOUBLE
69371: GREATEREQUAL
69372: IFFALSE 69380
69374: LD_INT 7
69376: DOUBLE
69377: LESSEQUAL
69378: IFTRUE 69382
69380: GO 69389
69382: POP
// StreamSibBomb ; end ;
69383: CALL 65627 0 0
69387: GO 69390
69389: POP
// end ;
69390: PPOPN 3
69392: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69393: LD_EXP 42
69397: PUSH
69398: LD_EXP 92
69402: AND
69403: IFFALSE 69559
69405: GO 69407
69407: DISABLE
69408: LD_INT 0
69410: PPUSH
69411: PPUSH
69412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69413: LD_ADDR_VAR 0 2
69417: PUSH
69418: LD_INT 81
69420: PUSH
69421: LD_OWVAR 2
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 2
69432: PUSH
69433: LD_INT 21
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 21
69445: PUSH
69446: LD_INT 2
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: LIST
69457: PUSH
69458: EMPTY
69459: LIST
69460: LIST
69461: PPUSH
69462: CALL_OW 69
69466: ST_TO_ADDR
// if not tmp then
69467: LD_VAR 0 2
69471: NOT
69472: IFFALSE 69476
// exit ;
69474: GO 69559
// p := 0 ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_INT 0
69483: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69484: LD_INT 35
69486: PPUSH
69487: CALL_OW 67
// p := p + 1 ;
69491: LD_ADDR_VAR 0 3
69495: PUSH
69496: LD_VAR 0 3
69500: PUSH
69501: LD_INT 1
69503: PLUS
69504: ST_TO_ADDR
// for i in tmp do
69505: LD_ADDR_VAR 0 1
69509: PUSH
69510: LD_VAR 0 2
69514: PUSH
69515: FOR_IN
69516: IFFALSE 69547
// if GetLives ( i ) < 1000 then
69518: LD_VAR 0 1
69522: PPUSH
69523: CALL_OW 256
69527: PUSH
69528: LD_INT 1000
69530: LESS
69531: IFFALSE 69545
// SetLives ( i , 1000 ) ;
69533: LD_VAR 0 1
69537: PPUSH
69538: LD_INT 1000
69540: PPUSH
69541: CALL_OW 234
69545: GO 69515
69547: POP
69548: POP
// until p > 20 ;
69549: LD_VAR 0 3
69553: PUSH
69554: LD_INT 20
69556: GREATER
69557: IFFALSE 69484
// end ;
69559: PPOPN 3
69561: END
// every 0 0$1 trigger StreamModeActive and sTime do
69562: LD_EXP 42
69566: PUSH
69567: LD_EXP 93
69571: AND
69572: IFFALSE 69607
69574: GO 69576
69576: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69577: LD_INT 28
69579: PPUSH
69580: LD_OWVAR 2
69584: PPUSH
69585: LD_INT 2
69587: PPUSH
69588: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69592: LD_INT 30
69594: PPUSH
69595: LD_OWVAR 2
69599: PPUSH
69600: LD_INT 2
69602: PPUSH
69603: CALL_OW 322
// end ;
69607: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69608: LD_EXP 42
69612: PUSH
69613: LD_EXP 94
69617: AND
69618: IFFALSE 69739
69620: GO 69622
69622: DISABLE
69623: LD_INT 0
69625: PPUSH
69626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69627: LD_ADDR_VAR 0 2
69631: PUSH
69632: LD_INT 22
69634: PUSH
69635: LD_OWVAR 2
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 21
69646: PUSH
69647: LD_INT 1
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PUSH
69654: LD_INT 3
69656: PUSH
69657: LD_INT 23
69659: PUSH
69660: LD_INT 0
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: LIST
69675: PPUSH
69676: CALL_OW 69
69680: ST_TO_ADDR
// if not tmp then
69681: LD_VAR 0 2
69685: NOT
69686: IFFALSE 69690
// exit ;
69688: GO 69739
// for i in tmp do
69690: LD_ADDR_VAR 0 1
69694: PUSH
69695: LD_VAR 0 2
69699: PUSH
69700: FOR_IN
69701: IFFALSE 69737
// begin if Crawls ( i ) then
69703: LD_VAR 0 1
69707: PPUSH
69708: CALL_OW 318
69712: IFFALSE 69723
// ComWalk ( i ) ;
69714: LD_VAR 0 1
69718: PPUSH
69719: CALL_OW 138
// SetClass ( i , 2 ) ;
69723: LD_VAR 0 1
69727: PPUSH
69728: LD_INT 2
69730: PPUSH
69731: CALL_OW 336
// end ;
69735: GO 69700
69737: POP
69738: POP
// end ;
69739: PPOPN 2
69741: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69742: LD_EXP 42
69746: PUSH
69747: LD_EXP 95
69751: AND
69752: IFFALSE 70040
69754: GO 69756
69756: DISABLE
69757: LD_INT 0
69759: PPUSH
69760: PPUSH
69761: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69762: LD_OWVAR 2
69766: PPUSH
69767: LD_INT 9
69769: PPUSH
69770: LD_INT 1
69772: PPUSH
69773: LD_INT 1
69775: PPUSH
69776: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69780: LD_INT 9
69782: PPUSH
69783: LD_OWVAR 2
69787: PPUSH
69788: CALL_OW 343
// uc_side := 9 ;
69792: LD_ADDR_OWVAR 20
69796: PUSH
69797: LD_INT 9
69799: ST_TO_ADDR
// uc_nation := 2 ;
69800: LD_ADDR_OWVAR 21
69804: PUSH
69805: LD_INT 2
69807: ST_TO_ADDR
// hc_name := Dark Warrior ;
69808: LD_ADDR_OWVAR 26
69812: PUSH
69813: LD_STRING Dark Warrior
69815: ST_TO_ADDR
// hc_gallery :=  ;
69816: LD_ADDR_OWVAR 33
69820: PUSH
69821: LD_STRING 
69823: ST_TO_ADDR
// hc_noskilllimit := true ;
69824: LD_ADDR_OWVAR 76
69828: PUSH
69829: LD_INT 1
69831: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69832: LD_ADDR_OWVAR 31
69836: PUSH
69837: LD_INT 30
69839: PUSH
69840: LD_INT 30
69842: PUSH
69843: LD_INT 30
69845: PUSH
69846: LD_INT 30
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: ST_TO_ADDR
// un := CreateHuman ;
69855: LD_ADDR_VAR 0 3
69859: PUSH
69860: CALL_OW 44
69864: ST_TO_ADDR
// hc_noskilllimit := false ;
69865: LD_ADDR_OWVAR 76
69869: PUSH
69870: LD_INT 0
69872: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69873: LD_VAR 0 3
69877: PPUSH
69878: LD_INT 1
69880: PPUSH
69881: CALL_OW 51
// ToLua ( playRanger() ) ;
69885: LD_STRING playRanger()
69887: PPUSH
69888: CALL_OW 559
// p := 0 ;
69892: LD_ADDR_VAR 0 2
69896: PUSH
69897: LD_INT 0
69899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69900: LD_INT 35
69902: PPUSH
69903: CALL_OW 67
// p := p + 1 ;
69907: LD_ADDR_VAR 0 2
69911: PUSH
69912: LD_VAR 0 2
69916: PUSH
69917: LD_INT 1
69919: PLUS
69920: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69921: LD_VAR 0 3
69925: PPUSH
69926: CALL_OW 256
69930: PUSH
69931: LD_INT 1000
69933: LESS
69934: IFFALSE 69948
// SetLives ( un , 1000 ) ;
69936: LD_VAR 0 3
69940: PPUSH
69941: LD_INT 1000
69943: PPUSH
69944: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69948: LD_VAR 0 3
69952: PPUSH
69953: LD_INT 81
69955: PUSH
69956: LD_OWVAR 2
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 91
69967: PUSH
69968: LD_VAR 0 3
69972: PUSH
69973: LD_INT 30
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: LIST
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PPUSH
69985: CALL_OW 69
69989: PPUSH
69990: LD_VAR 0 3
69994: PPUSH
69995: CALL_OW 74
69999: PPUSH
70000: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70004: LD_VAR 0 2
70008: PUSH
70009: LD_INT 80
70011: GREATER
70012: PUSH
70013: LD_VAR 0 3
70017: PPUSH
70018: CALL_OW 301
70022: OR
70023: IFFALSE 69900
// if un then
70025: LD_VAR 0 3
70029: IFFALSE 70040
// RemoveUnit ( un ) ;
70031: LD_VAR 0 3
70035: PPUSH
70036: CALL_OW 64
// end ;
70040: PPOPN 3
70042: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70043: LD_EXP 96
70047: IFFALSE 70163
70049: GO 70051
70051: DISABLE
70052: LD_INT 0
70054: PPUSH
70055: PPUSH
70056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70057: LD_ADDR_VAR 0 2
70061: PUSH
70062: LD_INT 81
70064: PUSH
70065: LD_OWVAR 2
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 21
70076: PUSH
70077: LD_INT 1
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PPUSH
70088: CALL_OW 69
70092: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70093: LD_STRING playComputer()
70095: PPUSH
70096: CALL_OW 559
// if not tmp then
70100: LD_VAR 0 2
70104: NOT
70105: IFFALSE 70109
// exit ;
70107: GO 70163
// for i in tmp do
70109: LD_ADDR_VAR 0 1
70113: PUSH
70114: LD_VAR 0 2
70118: PUSH
70119: FOR_IN
70120: IFFALSE 70161
// for j := 1 to 4 do
70122: LD_ADDR_VAR 0 3
70126: PUSH
70127: DOUBLE
70128: LD_INT 1
70130: DEC
70131: ST_TO_ADDR
70132: LD_INT 4
70134: PUSH
70135: FOR_TO
70136: IFFALSE 70157
// SetSkill ( i , j , 10 ) ;
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_VAR 0 3
70147: PPUSH
70148: LD_INT 10
70150: PPUSH
70151: CALL_OW 237
70155: GO 70135
70157: POP
70158: POP
70159: GO 70119
70161: POP
70162: POP
// end ;
70163: PPOPN 3
70165: END
// every 0 0$1 trigger s30 do var i , tmp ;
70166: LD_EXP 97
70170: IFFALSE 70239
70172: GO 70174
70174: DISABLE
70175: LD_INT 0
70177: PPUSH
70178: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70179: LD_ADDR_VAR 0 2
70183: PUSH
70184: LD_INT 22
70186: PUSH
70187: LD_OWVAR 2
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PPUSH
70196: CALL_OW 69
70200: ST_TO_ADDR
// if not tmp then
70201: LD_VAR 0 2
70205: NOT
70206: IFFALSE 70210
// exit ;
70208: GO 70239
// for i in tmp do
70210: LD_ADDR_VAR 0 1
70214: PUSH
70215: LD_VAR 0 2
70219: PUSH
70220: FOR_IN
70221: IFFALSE 70237
// SetLives ( i , 300 ) ;
70223: LD_VAR 0 1
70227: PPUSH
70228: LD_INT 300
70230: PPUSH
70231: CALL_OW 234
70235: GO 70220
70237: POP
70238: POP
// end ;
70239: PPOPN 2
70241: END
// every 0 0$1 trigger s60 do var i , tmp ;
70242: LD_EXP 98
70246: IFFALSE 70315
70248: GO 70250
70250: DISABLE
70251: LD_INT 0
70253: PPUSH
70254: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70255: LD_ADDR_VAR 0 2
70259: PUSH
70260: LD_INT 22
70262: PUSH
70263: LD_OWVAR 2
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PPUSH
70272: CALL_OW 69
70276: ST_TO_ADDR
// if not tmp then
70277: LD_VAR 0 2
70281: NOT
70282: IFFALSE 70286
// exit ;
70284: GO 70315
// for i in tmp do
70286: LD_ADDR_VAR 0 1
70290: PUSH
70291: LD_VAR 0 2
70295: PUSH
70296: FOR_IN
70297: IFFALSE 70313
// SetLives ( i , 600 ) ;
70299: LD_VAR 0 1
70303: PPUSH
70304: LD_INT 600
70306: PPUSH
70307: CALL_OW 234
70311: GO 70296
70313: POP
70314: POP
// end ;
70315: PPOPN 2
70317: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70318: LD_INT 0
70320: PPUSH
// case cmd of 301 :
70321: LD_VAR 0 1
70325: PUSH
70326: LD_INT 301
70328: DOUBLE
70329: EQUAL
70330: IFTRUE 70334
70332: GO 70366
70334: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70335: LD_VAR 0 6
70339: PPUSH
70340: LD_VAR 0 7
70344: PPUSH
70345: LD_VAR 0 8
70349: PPUSH
70350: LD_VAR 0 4
70354: PPUSH
70355: LD_VAR 0 5
70359: PPUSH
70360: CALL 71575 0 5
70364: GO 70487
70366: LD_INT 302
70368: DOUBLE
70369: EQUAL
70370: IFTRUE 70374
70372: GO 70411
70374: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70375: LD_VAR 0 6
70379: PPUSH
70380: LD_VAR 0 7
70384: PPUSH
70385: LD_VAR 0 8
70389: PPUSH
70390: LD_VAR 0 9
70394: PPUSH
70395: LD_VAR 0 4
70399: PPUSH
70400: LD_VAR 0 5
70404: PPUSH
70405: CALL 71666 0 6
70409: GO 70487
70411: LD_INT 303
70413: DOUBLE
70414: EQUAL
70415: IFTRUE 70419
70417: GO 70456
70419: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70420: LD_VAR 0 6
70424: PPUSH
70425: LD_VAR 0 7
70429: PPUSH
70430: LD_VAR 0 8
70434: PPUSH
70435: LD_VAR 0 9
70439: PPUSH
70440: LD_VAR 0 4
70444: PPUSH
70445: LD_VAR 0 5
70449: PPUSH
70450: CALL 70492 0 6
70454: GO 70487
70456: LD_INT 304
70458: DOUBLE
70459: EQUAL
70460: IFTRUE 70464
70462: GO 70486
70464: POP
// hHackTeleport ( unit , x , y ) ; end ;
70465: LD_VAR 0 2
70469: PPUSH
70470: LD_VAR 0 4
70474: PPUSH
70475: LD_VAR 0 5
70479: PPUSH
70480: CALL 72259 0 3
70484: GO 70487
70486: POP
// end ;
70487: LD_VAR 0 12
70491: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70492: LD_INT 0
70494: PPUSH
70495: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70496: LD_VAR 0 1
70500: PUSH
70501: LD_INT 1
70503: LESS
70504: PUSH
70505: LD_VAR 0 1
70509: PUSH
70510: LD_INT 3
70512: GREATER
70513: OR
70514: PUSH
70515: LD_VAR 0 5
70519: PPUSH
70520: LD_VAR 0 6
70524: PPUSH
70525: CALL_OW 428
70529: OR
70530: IFFALSE 70534
// exit ;
70532: GO 71262
// uc_side := your_side ;
70534: LD_ADDR_OWVAR 20
70538: PUSH
70539: LD_OWVAR 2
70543: ST_TO_ADDR
// uc_nation := nation ;
70544: LD_ADDR_OWVAR 21
70548: PUSH
70549: LD_VAR 0 1
70553: ST_TO_ADDR
// bc_level = 1 ;
70554: LD_ADDR_OWVAR 43
70558: PUSH
70559: LD_INT 1
70561: ST_TO_ADDR
// case btype of 1 :
70562: LD_VAR 0 2
70566: PUSH
70567: LD_INT 1
70569: DOUBLE
70570: EQUAL
70571: IFTRUE 70575
70573: GO 70586
70575: POP
// bc_type := b_depot ; 2 :
70576: LD_ADDR_OWVAR 42
70580: PUSH
70581: LD_INT 0
70583: ST_TO_ADDR
70584: GO 71206
70586: LD_INT 2
70588: DOUBLE
70589: EQUAL
70590: IFTRUE 70594
70592: GO 70605
70594: POP
// bc_type := b_warehouse ; 3 :
70595: LD_ADDR_OWVAR 42
70599: PUSH
70600: LD_INT 1
70602: ST_TO_ADDR
70603: GO 71206
70605: LD_INT 3
70607: DOUBLE
70608: EQUAL
70609: IFTRUE 70613
70611: GO 70624
70613: POP
// bc_type := b_lab ; 4 .. 9 :
70614: LD_ADDR_OWVAR 42
70618: PUSH
70619: LD_INT 6
70621: ST_TO_ADDR
70622: GO 71206
70624: LD_INT 4
70626: DOUBLE
70627: GREATEREQUAL
70628: IFFALSE 70636
70630: LD_INT 9
70632: DOUBLE
70633: LESSEQUAL
70634: IFTRUE 70638
70636: GO 70698
70638: POP
// begin bc_type := b_lab_half ;
70639: LD_ADDR_OWVAR 42
70643: PUSH
70644: LD_INT 7
70646: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70647: LD_ADDR_OWVAR 44
70651: PUSH
70652: LD_INT 10
70654: PUSH
70655: LD_INT 11
70657: PUSH
70658: LD_INT 12
70660: PUSH
70661: LD_INT 15
70663: PUSH
70664: LD_INT 14
70666: PUSH
70667: LD_INT 13
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: PUSH
70678: LD_VAR 0 2
70682: PUSH
70683: LD_INT 3
70685: MINUS
70686: ARRAY
70687: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70688: LD_ADDR_OWVAR 45
70692: PUSH
70693: LD_INT 9
70695: ST_TO_ADDR
// end ; 10 .. 13 :
70696: GO 71206
70698: LD_INT 10
70700: DOUBLE
70701: GREATEREQUAL
70702: IFFALSE 70710
70704: LD_INT 13
70706: DOUBLE
70707: LESSEQUAL
70708: IFTRUE 70712
70710: GO 70789
70712: POP
// begin bc_type := b_lab_full ;
70713: LD_ADDR_OWVAR 42
70717: PUSH
70718: LD_INT 8
70720: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70721: LD_ADDR_OWVAR 44
70725: PUSH
70726: LD_INT 10
70728: PUSH
70729: LD_INT 12
70731: PUSH
70732: LD_INT 14
70734: PUSH
70735: LD_INT 13
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: PUSH
70744: LD_VAR 0 2
70748: PUSH
70749: LD_INT 9
70751: MINUS
70752: ARRAY
70753: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70754: LD_ADDR_OWVAR 45
70758: PUSH
70759: LD_INT 11
70761: PUSH
70762: LD_INT 15
70764: PUSH
70765: LD_INT 12
70767: PUSH
70768: LD_INT 15
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: PUSH
70777: LD_VAR 0 2
70781: PUSH
70782: LD_INT 9
70784: MINUS
70785: ARRAY
70786: ST_TO_ADDR
// end ; 14 :
70787: GO 71206
70789: LD_INT 14
70791: DOUBLE
70792: EQUAL
70793: IFTRUE 70797
70795: GO 70808
70797: POP
// bc_type := b_workshop ; 15 :
70798: LD_ADDR_OWVAR 42
70802: PUSH
70803: LD_INT 2
70805: ST_TO_ADDR
70806: GO 71206
70808: LD_INT 15
70810: DOUBLE
70811: EQUAL
70812: IFTRUE 70816
70814: GO 70827
70816: POP
// bc_type := b_factory ; 16 :
70817: LD_ADDR_OWVAR 42
70821: PUSH
70822: LD_INT 3
70824: ST_TO_ADDR
70825: GO 71206
70827: LD_INT 16
70829: DOUBLE
70830: EQUAL
70831: IFTRUE 70835
70833: GO 70846
70835: POP
// bc_type := b_ext_gun ; 17 :
70836: LD_ADDR_OWVAR 42
70840: PUSH
70841: LD_INT 17
70843: ST_TO_ADDR
70844: GO 71206
70846: LD_INT 17
70848: DOUBLE
70849: EQUAL
70850: IFTRUE 70854
70852: GO 70882
70854: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70855: LD_ADDR_OWVAR 42
70859: PUSH
70860: LD_INT 19
70862: PUSH
70863: LD_INT 23
70865: PUSH
70866: LD_INT 19
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: PUSH
70874: LD_VAR 0 1
70878: ARRAY
70879: ST_TO_ADDR
70880: GO 71206
70882: LD_INT 18
70884: DOUBLE
70885: EQUAL
70886: IFTRUE 70890
70888: GO 70901
70890: POP
// bc_type := b_ext_radar ; 19 :
70891: LD_ADDR_OWVAR 42
70895: PUSH
70896: LD_INT 20
70898: ST_TO_ADDR
70899: GO 71206
70901: LD_INT 19
70903: DOUBLE
70904: EQUAL
70905: IFTRUE 70909
70907: GO 70920
70909: POP
// bc_type := b_ext_radio ; 20 :
70910: LD_ADDR_OWVAR 42
70914: PUSH
70915: LD_INT 22
70917: ST_TO_ADDR
70918: GO 71206
70920: LD_INT 20
70922: DOUBLE
70923: EQUAL
70924: IFTRUE 70928
70926: GO 70939
70928: POP
// bc_type := b_ext_siberium ; 21 :
70929: LD_ADDR_OWVAR 42
70933: PUSH
70934: LD_INT 21
70936: ST_TO_ADDR
70937: GO 71206
70939: LD_INT 21
70941: DOUBLE
70942: EQUAL
70943: IFTRUE 70947
70945: GO 70958
70947: POP
// bc_type := b_ext_computer ; 22 :
70948: LD_ADDR_OWVAR 42
70952: PUSH
70953: LD_INT 24
70955: ST_TO_ADDR
70956: GO 71206
70958: LD_INT 22
70960: DOUBLE
70961: EQUAL
70962: IFTRUE 70966
70964: GO 70977
70966: POP
// bc_type := b_ext_track ; 23 :
70967: LD_ADDR_OWVAR 42
70971: PUSH
70972: LD_INT 16
70974: ST_TO_ADDR
70975: GO 71206
70977: LD_INT 23
70979: DOUBLE
70980: EQUAL
70981: IFTRUE 70985
70983: GO 70996
70985: POP
// bc_type := b_ext_laser ; 24 :
70986: LD_ADDR_OWVAR 42
70990: PUSH
70991: LD_INT 25
70993: ST_TO_ADDR
70994: GO 71206
70996: LD_INT 24
70998: DOUBLE
70999: EQUAL
71000: IFTRUE 71004
71002: GO 71015
71004: POP
// bc_type := b_control_tower ; 25 :
71005: LD_ADDR_OWVAR 42
71009: PUSH
71010: LD_INT 36
71012: ST_TO_ADDR
71013: GO 71206
71015: LD_INT 25
71017: DOUBLE
71018: EQUAL
71019: IFTRUE 71023
71021: GO 71034
71023: POP
// bc_type := b_breastwork ; 26 :
71024: LD_ADDR_OWVAR 42
71028: PUSH
71029: LD_INT 31
71031: ST_TO_ADDR
71032: GO 71206
71034: LD_INT 26
71036: DOUBLE
71037: EQUAL
71038: IFTRUE 71042
71040: GO 71053
71042: POP
// bc_type := b_bunker ; 27 :
71043: LD_ADDR_OWVAR 42
71047: PUSH
71048: LD_INT 32
71050: ST_TO_ADDR
71051: GO 71206
71053: LD_INT 27
71055: DOUBLE
71056: EQUAL
71057: IFTRUE 71061
71059: GO 71072
71061: POP
// bc_type := b_turret ; 28 :
71062: LD_ADDR_OWVAR 42
71066: PUSH
71067: LD_INT 33
71069: ST_TO_ADDR
71070: GO 71206
71072: LD_INT 28
71074: DOUBLE
71075: EQUAL
71076: IFTRUE 71080
71078: GO 71091
71080: POP
// bc_type := b_armoury ; 29 :
71081: LD_ADDR_OWVAR 42
71085: PUSH
71086: LD_INT 4
71088: ST_TO_ADDR
71089: GO 71206
71091: LD_INT 29
71093: DOUBLE
71094: EQUAL
71095: IFTRUE 71099
71097: GO 71110
71099: POP
// bc_type := b_barracks ; 30 :
71100: LD_ADDR_OWVAR 42
71104: PUSH
71105: LD_INT 5
71107: ST_TO_ADDR
71108: GO 71206
71110: LD_INT 30
71112: DOUBLE
71113: EQUAL
71114: IFTRUE 71118
71116: GO 71129
71118: POP
// bc_type := b_solar_power ; 31 :
71119: LD_ADDR_OWVAR 42
71123: PUSH
71124: LD_INT 27
71126: ST_TO_ADDR
71127: GO 71206
71129: LD_INT 31
71131: DOUBLE
71132: EQUAL
71133: IFTRUE 71137
71135: GO 71148
71137: POP
// bc_type := b_oil_power ; 32 :
71138: LD_ADDR_OWVAR 42
71142: PUSH
71143: LD_INT 26
71145: ST_TO_ADDR
71146: GO 71206
71148: LD_INT 32
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71156
71154: GO 71167
71156: POP
// bc_type := b_siberite_power ; 33 :
71157: LD_ADDR_OWVAR 42
71161: PUSH
71162: LD_INT 28
71164: ST_TO_ADDR
71165: GO 71206
71167: LD_INT 33
71169: DOUBLE
71170: EQUAL
71171: IFTRUE 71175
71173: GO 71186
71175: POP
// bc_type := b_oil_mine ; 34 :
71176: LD_ADDR_OWVAR 42
71180: PUSH
71181: LD_INT 29
71183: ST_TO_ADDR
71184: GO 71206
71186: LD_INT 34
71188: DOUBLE
71189: EQUAL
71190: IFTRUE 71194
71192: GO 71205
71194: POP
// bc_type := b_siberite_mine ; end ;
71195: LD_ADDR_OWVAR 42
71199: PUSH
71200: LD_INT 30
71202: ST_TO_ADDR
71203: GO 71206
71205: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71206: LD_ADDR_VAR 0 8
71210: PUSH
71211: LD_VAR 0 5
71215: PPUSH
71216: LD_VAR 0 6
71220: PPUSH
71221: LD_VAR 0 3
71225: PPUSH
71226: CALL_OW 47
71230: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71231: LD_OWVAR 42
71235: PUSH
71236: LD_INT 32
71238: PUSH
71239: LD_INT 33
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: IN
71246: IFFALSE 71262
// PlaceWeaponTurret ( b , weapon ) ;
71248: LD_VAR 0 8
71252: PPUSH
71253: LD_VAR 0 4
71257: PPUSH
71258: CALL_OW 431
// end ;
71262: LD_VAR 0 7
71266: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71267: LD_INT 0
71269: PPUSH
71270: PPUSH
71271: PPUSH
71272: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71273: LD_ADDR_VAR 0 4
71277: PUSH
71278: LD_INT 22
71280: PUSH
71281: LD_OWVAR 2
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 2
71292: PUSH
71293: LD_INT 30
71295: PUSH
71296: LD_INT 0
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: LD_INT 30
71305: PUSH
71306: LD_INT 1
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: LIST
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PPUSH
71322: CALL_OW 69
71326: ST_TO_ADDR
// if not tmp then
71327: LD_VAR 0 4
71331: NOT
71332: IFFALSE 71336
// exit ;
71334: GO 71395
// for i in tmp do
71336: LD_ADDR_VAR 0 2
71340: PUSH
71341: LD_VAR 0 4
71345: PUSH
71346: FOR_IN
71347: IFFALSE 71393
// for j = 1 to 3 do
71349: LD_ADDR_VAR 0 3
71353: PUSH
71354: DOUBLE
71355: LD_INT 1
71357: DEC
71358: ST_TO_ADDR
71359: LD_INT 3
71361: PUSH
71362: FOR_TO
71363: IFFALSE 71389
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71365: LD_VAR 0 2
71369: PPUSH
71370: CALL_OW 274
71374: PPUSH
71375: LD_VAR 0 3
71379: PPUSH
71380: LD_INT 99999
71382: PPUSH
71383: CALL_OW 277
71387: GO 71362
71389: POP
71390: POP
71391: GO 71346
71393: POP
71394: POP
// end ;
71395: LD_VAR 0 1
71399: RET
// export function hHackSetLevel10 ; var i , j ; begin
71400: LD_INT 0
71402: PPUSH
71403: PPUSH
71404: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71405: LD_ADDR_VAR 0 2
71409: PUSH
71410: LD_INT 21
71412: PUSH
71413: LD_INT 1
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PPUSH
71420: CALL_OW 69
71424: PUSH
71425: FOR_IN
71426: IFFALSE 71478
// if IsSelected ( i ) then
71428: LD_VAR 0 2
71432: PPUSH
71433: CALL_OW 306
71437: IFFALSE 71476
// begin for j := 1 to 4 do
71439: LD_ADDR_VAR 0 3
71443: PUSH
71444: DOUBLE
71445: LD_INT 1
71447: DEC
71448: ST_TO_ADDR
71449: LD_INT 4
71451: PUSH
71452: FOR_TO
71453: IFFALSE 71474
// SetSkill ( i , j , 10 ) ;
71455: LD_VAR 0 2
71459: PPUSH
71460: LD_VAR 0 3
71464: PPUSH
71465: LD_INT 10
71467: PPUSH
71468: CALL_OW 237
71472: GO 71452
71474: POP
71475: POP
// end ;
71476: GO 71425
71478: POP
71479: POP
// end ;
71480: LD_VAR 0 1
71484: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71485: LD_INT 0
71487: PPUSH
71488: PPUSH
71489: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71490: LD_ADDR_VAR 0 2
71494: PUSH
71495: LD_INT 22
71497: PUSH
71498: LD_OWVAR 2
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 21
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PPUSH
71521: CALL_OW 69
71525: PUSH
71526: FOR_IN
71527: IFFALSE 71568
// begin for j := 1 to 4 do
71529: LD_ADDR_VAR 0 3
71533: PUSH
71534: DOUBLE
71535: LD_INT 1
71537: DEC
71538: ST_TO_ADDR
71539: LD_INT 4
71541: PUSH
71542: FOR_TO
71543: IFFALSE 71564
// SetSkill ( i , j , 10 ) ;
71545: LD_VAR 0 2
71549: PPUSH
71550: LD_VAR 0 3
71554: PPUSH
71555: LD_INT 10
71557: PPUSH
71558: CALL_OW 237
71562: GO 71542
71564: POP
71565: POP
// end ;
71566: GO 71526
71568: POP
71569: POP
// end ;
71570: LD_VAR 0 1
71574: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71575: LD_INT 0
71577: PPUSH
// uc_side := your_side ;
71578: LD_ADDR_OWVAR 20
71582: PUSH
71583: LD_OWVAR 2
71587: ST_TO_ADDR
// uc_nation := nation ;
71588: LD_ADDR_OWVAR 21
71592: PUSH
71593: LD_VAR 0 1
71597: ST_TO_ADDR
// InitHc ;
71598: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71602: LD_INT 0
71604: PPUSH
71605: LD_VAR 0 2
71609: PPUSH
71610: LD_VAR 0 3
71614: PPUSH
71615: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71619: LD_VAR 0 4
71623: PPUSH
71624: LD_VAR 0 5
71628: PPUSH
71629: CALL_OW 428
71633: PUSH
71634: LD_INT 0
71636: EQUAL
71637: IFFALSE 71661
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71639: CALL_OW 44
71643: PPUSH
71644: LD_VAR 0 4
71648: PPUSH
71649: LD_VAR 0 5
71653: PPUSH
71654: LD_INT 1
71656: PPUSH
71657: CALL_OW 48
// end ;
71661: LD_VAR 0 6
71665: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71666: LD_INT 0
71668: PPUSH
71669: PPUSH
// uc_side := your_side ;
71670: LD_ADDR_OWVAR 20
71674: PUSH
71675: LD_OWVAR 2
71679: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71680: LD_VAR 0 1
71684: PUSH
71685: LD_INT 1
71687: PUSH
71688: LD_INT 2
71690: PUSH
71691: LD_INT 3
71693: PUSH
71694: LD_INT 4
71696: PUSH
71697: LD_INT 5
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: IN
71707: IFFALSE 71719
// uc_nation := nation_american else
71709: LD_ADDR_OWVAR 21
71713: PUSH
71714: LD_INT 1
71716: ST_TO_ADDR
71717: GO 71762
// if chassis in [ 11 , 12 , 13 , 14 ] then
71719: LD_VAR 0 1
71723: PUSH
71724: LD_INT 11
71726: PUSH
71727: LD_INT 12
71729: PUSH
71730: LD_INT 13
71732: PUSH
71733: LD_INT 14
71735: PUSH
71736: EMPTY
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: IN
71742: IFFALSE 71754
// uc_nation := nation_arabian else
71744: LD_ADDR_OWVAR 21
71748: PUSH
71749: LD_INT 2
71751: ST_TO_ADDR
71752: GO 71762
// uc_nation := nation_russian ;
71754: LD_ADDR_OWVAR 21
71758: PUSH
71759: LD_INT 3
71761: ST_TO_ADDR
// vc_chassis := chassis ;
71762: LD_ADDR_OWVAR 37
71766: PUSH
71767: LD_VAR 0 1
71771: ST_TO_ADDR
// vc_engine := engine ;
71772: LD_ADDR_OWVAR 39
71776: PUSH
71777: LD_VAR 0 2
71781: ST_TO_ADDR
// vc_control := control ;
71782: LD_ADDR_OWVAR 38
71786: PUSH
71787: LD_VAR 0 3
71791: ST_TO_ADDR
// vc_weapon := weapon ;
71792: LD_ADDR_OWVAR 40
71796: PUSH
71797: LD_VAR 0 4
71801: ST_TO_ADDR
// un := CreateVehicle ;
71802: LD_ADDR_VAR 0 8
71806: PUSH
71807: CALL_OW 45
71811: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71812: LD_VAR 0 8
71816: PPUSH
71817: LD_INT 0
71819: PPUSH
71820: LD_INT 5
71822: PPUSH
71823: CALL_OW 12
71827: PPUSH
71828: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71832: LD_VAR 0 8
71836: PPUSH
71837: LD_VAR 0 5
71841: PPUSH
71842: LD_VAR 0 6
71846: PPUSH
71847: LD_INT 1
71849: PPUSH
71850: CALL_OW 48
// end ;
71854: LD_VAR 0 7
71858: RET
// export hInvincible ; every 1 do
71859: GO 71861
71861: DISABLE
// hInvincible := [ ] ;
71862: LD_ADDR_EXP 99
71866: PUSH
71867: EMPTY
71868: ST_TO_ADDR
71869: END
// every 10 do var i ;
71870: GO 71872
71872: DISABLE
71873: LD_INT 0
71875: PPUSH
// begin enable ;
71876: ENABLE
// if not hInvincible then
71877: LD_EXP 99
71881: NOT
71882: IFFALSE 71886
// exit ;
71884: GO 71930
// for i in hInvincible do
71886: LD_ADDR_VAR 0 1
71890: PUSH
71891: LD_EXP 99
71895: PUSH
71896: FOR_IN
71897: IFFALSE 71928
// if GetLives ( i ) < 1000 then
71899: LD_VAR 0 1
71903: PPUSH
71904: CALL_OW 256
71908: PUSH
71909: LD_INT 1000
71911: LESS
71912: IFFALSE 71926
// SetLives ( i , 1000 ) ;
71914: LD_VAR 0 1
71918: PPUSH
71919: LD_INT 1000
71921: PPUSH
71922: CALL_OW 234
71926: GO 71896
71928: POP
71929: POP
// end ;
71930: PPOPN 1
71932: END
// export function hHackInvincible ; var i ; begin
71933: LD_INT 0
71935: PPUSH
71936: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71937: LD_ADDR_VAR 0 2
71941: PUSH
71942: LD_INT 2
71944: PUSH
71945: LD_INT 21
71947: PUSH
71948: LD_INT 1
71950: PUSH
71951: EMPTY
71952: LIST
71953: LIST
71954: PUSH
71955: LD_INT 21
71957: PUSH
71958: LD_INT 2
71960: PUSH
71961: EMPTY
71962: LIST
71963: LIST
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: LIST
71969: PPUSH
71970: CALL_OW 69
71974: PUSH
71975: FOR_IN
71976: IFFALSE 72037
// if IsSelected ( i ) then
71978: LD_VAR 0 2
71982: PPUSH
71983: CALL_OW 306
71987: IFFALSE 72035
// begin if i in hInvincible then
71989: LD_VAR 0 2
71993: PUSH
71994: LD_EXP 99
71998: IN
71999: IFFALSE 72019
// hInvincible := hInvincible diff i else
72001: LD_ADDR_EXP 99
72005: PUSH
72006: LD_EXP 99
72010: PUSH
72011: LD_VAR 0 2
72015: DIFF
72016: ST_TO_ADDR
72017: GO 72035
// hInvincible := hInvincible union i ;
72019: LD_ADDR_EXP 99
72023: PUSH
72024: LD_EXP 99
72028: PUSH
72029: LD_VAR 0 2
72033: UNION
72034: ST_TO_ADDR
// end ;
72035: GO 71975
72037: POP
72038: POP
// end ;
72039: LD_VAR 0 1
72043: RET
// export function hHackInvisible ; var i , j ; begin
72044: LD_INT 0
72046: PPUSH
72047: PPUSH
72048: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72049: LD_ADDR_VAR 0 2
72053: PUSH
72054: LD_INT 21
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PPUSH
72064: CALL_OW 69
72068: PUSH
72069: FOR_IN
72070: IFFALSE 72094
// if IsSelected ( i ) then
72072: LD_VAR 0 2
72076: PPUSH
72077: CALL_OW 306
72081: IFFALSE 72092
// ComForceInvisible ( i ) ;
72083: LD_VAR 0 2
72087: PPUSH
72088: CALL_OW 496
72092: GO 72069
72094: POP
72095: POP
// end ;
72096: LD_VAR 0 1
72100: RET
// export function hHackChangeYourSide ; begin
72101: LD_INT 0
72103: PPUSH
// if your_side = 8 then
72104: LD_OWVAR 2
72108: PUSH
72109: LD_INT 8
72111: EQUAL
72112: IFFALSE 72124
// your_side := 0 else
72114: LD_ADDR_OWVAR 2
72118: PUSH
72119: LD_INT 0
72121: ST_TO_ADDR
72122: GO 72138
// your_side := your_side + 1 ;
72124: LD_ADDR_OWVAR 2
72128: PUSH
72129: LD_OWVAR 2
72133: PUSH
72134: LD_INT 1
72136: PLUS
72137: ST_TO_ADDR
// end ;
72138: LD_VAR 0 1
72142: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72143: LD_INT 0
72145: PPUSH
72146: PPUSH
72147: PPUSH
// for i in all_units do
72148: LD_ADDR_VAR 0 2
72152: PUSH
72153: LD_OWVAR 3
72157: PUSH
72158: FOR_IN
72159: IFFALSE 72237
// if IsSelected ( i ) then
72161: LD_VAR 0 2
72165: PPUSH
72166: CALL_OW 306
72170: IFFALSE 72235
// begin j := GetSide ( i ) ;
72172: LD_ADDR_VAR 0 3
72176: PUSH
72177: LD_VAR 0 2
72181: PPUSH
72182: CALL_OW 255
72186: ST_TO_ADDR
// if j = 8 then
72187: LD_VAR 0 3
72191: PUSH
72192: LD_INT 8
72194: EQUAL
72195: IFFALSE 72207
// j := 0 else
72197: LD_ADDR_VAR 0 3
72201: PUSH
72202: LD_INT 0
72204: ST_TO_ADDR
72205: GO 72221
// j := j + 1 ;
72207: LD_ADDR_VAR 0 3
72211: PUSH
72212: LD_VAR 0 3
72216: PUSH
72217: LD_INT 1
72219: PLUS
72220: ST_TO_ADDR
// SetSide ( i , j ) ;
72221: LD_VAR 0 2
72225: PPUSH
72226: LD_VAR 0 3
72230: PPUSH
72231: CALL_OW 235
// end ;
72235: GO 72158
72237: POP
72238: POP
// end ;
72239: LD_VAR 0 1
72243: RET
// export function hHackFog ; begin
72244: LD_INT 0
72246: PPUSH
// FogOff ( true ) ;
72247: LD_INT 1
72249: PPUSH
72250: CALL_OW 344
// end ;
72254: LD_VAR 0 1
72258: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72259: LD_INT 0
72261: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72262: LD_VAR 0 1
72266: PPUSH
72267: LD_VAR 0 2
72271: PPUSH
72272: LD_VAR 0 3
72276: PPUSH
72277: LD_INT 1
72279: PPUSH
72280: LD_INT 1
72282: PPUSH
72283: CALL_OW 483
// CenterOnXY ( x , y ) ;
72287: LD_VAR 0 2
72291: PPUSH
72292: LD_VAR 0 3
72296: PPUSH
72297: CALL_OW 84
// end ;
72301: LD_VAR 0 4
72305: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72306: LD_INT 0
72308: PPUSH
72309: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72310: LD_VAR 0 1
72314: NOT
72315: PUSH
72316: LD_VAR 0 2
72320: PPUSH
72321: LD_VAR 0 3
72325: PPUSH
72326: CALL_OW 488
72330: NOT
72331: OR
72332: PUSH
72333: LD_VAR 0 1
72337: PPUSH
72338: CALL_OW 266
72342: PUSH
72343: LD_INT 3
72345: NONEQUAL
72346: PUSH
72347: LD_VAR 0 1
72351: PPUSH
72352: CALL_OW 247
72356: PUSH
72357: LD_INT 1
72359: EQUAL
72360: NOT
72361: AND
72362: OR
72363: IFFALSE 72367
// exit ;
72365: GO 72516
// if GetType ( factory ) = unit_human then
72367: LD_VAR 0 1
72371: PPUSH
72372: CALL_OW 247
72376: PUSH
72377: LD_INT 1
72379: EQUAL
72380: IFFALSE 72397
// factory := IsInUnit ( factory ) ;
72382: LD_ADDR_VAR 0 1
72386: PUSH
72387: LD_VAR 0 1
72391: PPUSH
72392: CALL_OW 310
72396: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72397: LD_VAR 0 1
72401: PPUSH
72402: CALL_OW 266
72406: PUSH
72407: LD_INT 3
72409: NONEQUAL
72410: IFFALSE 72414
// exit ;
72412: GO 72516
// if HexInfo ( x , y ) = factory then
72414: LD_VAR 0 2
72418: PPUSH
72419: LD_VAR 0 3
72423: PPUSH
72424: CALL_OW 428
72428: PUSH
72429: LD_VAR 0 1
72433: EQUAL
72434: IFFALSE 72461
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72436: LD_ADDR_EXP 100
72440: PUSH
72441: LD_EXP 100
72445: PPUSH
72446: LD_VAR 0 1
72450: PPUSH
72451: LD_INT 0
72453: PPUSH
72454: CALL_OW 1
72458: ST_TO_ADDR
72459: GO 72512
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72461: LD_ADDR_EXP 100
72465: PUSH
72466: LD_EXP 100
72470: PPUSH
72471: LD_VAR 0 1
72475: PPUSH
72476: LD_VAR 0 1
72480: PPUSH
72481: CALL_OW 255
72485: PUSH
72486: LD_VAR 0 1
72490: PUSH
72491: LD_VAR 0 2
72495: PUSH
72496: LD_VAR 0 3
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: PPUSH
72507: CALL_OW 1
72511: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72512: CALL 72521 0 0
// end ;
72516: LD_VAR 0 4
72520: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72521: LD_INT 0
72523: PPUSH
72524: PPUSH
72525: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72526: LD_STRING resetFactoryWaypoint();
72528: PPUSH
72529: CALL_OW 559
// if factoryWaypoints then
72533: LD_EXP 100
72537: IFFALSE 72663
// begin list := PrepareArray ( factoryWaypoints ) ;
72539: LD_ADDR_VAR 0 3
72543: PUSH
72544: LD_EXP 100
72548: PPUSH
72549: CALL 56476 0 1
72553: ST_TO_ADDR
// for i := 1 to list do
72554: LD_ADDR_VAR 0 2
72558: PUSH
72559: DOUBLE
72560: LD_INT 1
72562: DEC
72563: ST_TO_ADDR
72564: LD_VAR 0 3
72568: PUSH
72569: FOR_TO
72570: IFFALSE 72661
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72572: LD_STRING setFactoryWaypointXY(
72574: PUSH
72575: LD_VAR 0 3
72579: PUSH
72580: LD_VAR 0 2
72584: ARRAY
72585: PUSH
72586: LD_INT 1
72588: ARRAY
72589: STR
72590: PUSH
72591: LD_STRING ,
72593: STR
72594: PUSH
72595: LD_VAR 0 3
72599: PUSH
72600: LD_VAR 0 2
72604: ARRAY
72605: PUSH
72606: LD_INT 2
72608: ARRAY
72609: STR
72610: PUSH
72611: LD_STRING ,
72613: STR
72614: PUSH
72615: LD_VAR 0 3
72619: PUSH
72620: LD_VAR 0 2
72624: ARRAY
72625: PUSH
72626: LD_INT 3
72628: ARRAY
72629: STR
72630: PUSH
72631: LD_STRING ,
72633: STR
72634: PUSH
72635: LD_VAR 0 3
72639: PUSH
72640: LD_VAR 0 2
72644: ARRAY
72645: PUSH
72646: LD_INT 4
72648: ARRAY
72649: STR
72650: PUSH
72651: LD_STRING )
72653: STR
72654: PPUSH
72655: CALL_OW 559
72659: GO 72569
72661: POP
72662: POP
// end ; end ;
72663: LD_VAR 0 1
72667: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72668: LD_INT 0
72670: PPUSH
// if HexInfo ( x , y ) = warehouse then
72671: LD_VAR 0 2
72675: PPUSH
72676: LD_VAR 0 3
72680: PPUSH
72681: CALL_OW 428
72685: PUSH
72686: LD_VAR 0 1
72690: EQUAL
72691: IFFALSE 72718
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72693: LD_ADDR_EXP 101
72697: PUSH
72698: LD_EXP 101
72702: PPUSH
72703: LD_VAR 0 1
72707: PPUSH
72708: LD_INT 0
72710: PPUSH
72711: CALL_OW 1
72715: ST_TO_ADDR
72716: GO 72769
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72718: LD_ADDR_EXP 101
72722: PUSH
72723: LD_EXP 101
72727: PPUSH
72728: LD_VAR 0 1
72732: PPUSH
72733: LD_VAR 0 1
72737: PPUSH
72738: CALL_OW 255
72742: PUSH
72743: LD_VAR 0 1
72747: PUSH
72748: LD_VAR 0 2
72752: PUSH
72753: LD_VAR 0 3
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: LIST
72762: LIST
72763: PPUSH
72764: CALL_OW 1
72768: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72769: CALL 72778 0 0
// end ;
72773: LD_VAR 0 4
72777: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72778: LD_INT 0
72780: PPUSH
72781: PPUSH
72782: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72783: LD_STRING resetWarehouseGatheringPoints();
72785: PPUSH
72786: CALL_OW 559
// if warehouseGatheringPoints then
72790: LD_EXP 101
72794: IFFALSE 72920
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72796: LD_ADDR_VAR 0 3
72800: PUSH
72801: LD_EXP 101
72805: PPUSH
72806: CALL 56476 0 1
72810: ST_TO_ADDR
// for i := 1 to list do
72811: LD_ADDR_VAR 0 2
72815: PUSH
72816: DOUBLE
72817: LD_INT 1
72819: DEC
72820: ST_TO_ADDR
72821: LD_VAR 0 3
72825: PUSH
72826: FOR_TO
72827: IFFALSE 72918
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72829: LD_STRING setWarehouseGatheringPointXY(
72831: PUSH
72832: LD_VAR 0 3
72836: PUSH
72837: LD_VAR 0 2
72841: ARRAY
72842: PUSH
72843: LD_INT 1
72845: ARRAY
72846: STR
72847: PUSH
72848: LD_STRING ,
72850: STR
72851: PUSH
72852: LD_VAR 0 3
72856: PUSH
72857: LD_VAR 0 2
72861: ARRAY
72862: PUSH
72863: LD_INT 2
72865: ARRAY
72866: STR
72867: PUSH
72868: LD_STRING ,
72870: STR
72871: PUSH
72872: LD_VAR 0 3
72876: PUSH
72877: LD_VAR 0 2
72881: ARRAY
72882: PUSH
72883: LD_INT 3
72885: ARRAY
72886: STR
72887: PUSH
72888: LD_STRING ,
72890: STR
72891: PUSH
72892: LD_VAR 0 3
72896: PUSH
72897: LD_VAR 0 2
72901: ARRAY
72902: PUSH
72903: LD_INT 4
72905: ARRAY
72906: STR
72907: PUSH
72908: LD_STRING )
72910: STR
72911: PPUSH
72912: CALL_OW 559
72916: GO 72826
72918: POP
72919: POP
// end ; end ;
72920: LD_VAR 0 1
72924: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
72925: LD_EXP 101
72929: IFFALSE 73614
72931: GO 72933
72933: DISABLE
72934: LD_INT 0
72936: PPUSH
72937: PPUSH
72938: PPUSH
72939: PPUSH
72940: PPUSH
72941: PPUSH
72942: PPUSH
72943: PPUSH
72944: PPUSH
// begin enable ;
72945: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
72946: LD_ADDR_VAR 0 3
72950: PUSH
72951: LD_EXP 101
72955: PPUSH
72956: CALL 56476 0 1
72960: ST_TO_ADDR
// if not list then
72961: LD_VAR 0 3
72965: NOT
72966: IFFALSE 72970
// exit ;
72968: GO 73614
// for i := 1 to list do
72970: LD_ADDR_VAR 0 1
72974: PUSH
72975: DOUBLE
72976: LD_INT 1
72978: DEC
72979: ST_TO_ADDR
72980: LD_VAR 0 3
72984: PUSH
72985: FOR_TO
72986: IFFALSE 73612
// begin depot := list [ i ] [ 2 ] ;
72988: LD_ADDR_VAR 0 8
72992: PUSH
72993: LD_VAR 0 3
72997: PUSH
72998: LD_VAR 0 1
73002: ARRAY
73003: PUSH
73004: LD_INT 2
73006: ARRAY
73007: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73008: LD_ADDR_VAR 0 5
73012: PUSH
73013: LD_VAR 0 3
73017: PUSH
73018: LD_VAR 0 1
73022: ARRAY
73023: PUSH
73024: LD_INT 1
73026: ARRAY
73027: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73028: LD_VAR 0 8
73032: PPUSH
73033: CALL_OW 301
73037: PUSH
73038: LD_VAR 0 5
73042: PUSH
73043: LD_VAR 0 8
73047: PPUSH
73048: CALL_OW 255
73052: NONEQUAL
73053: OR
73054: IFFALSE 73083
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73056: LD_ADDR_EXP 101
73060: PUSH
73061: LD_EXP 101
73065: PPUSH
73066: LD_VAR 0 8
73070: PPUSH
73071: LD_INT 0
73073: PPUSH
73074: CALL_OW 1
73078: ST_TO_ADDR
// exit ;
73079: POP
73080: POP
73081: GO 73614
// end ; x := list [ i ] [ 3 ] ;
73083: LD_ADDR_VAR 0 6
73087: PUSH
73088: LD_VAR 0 3
73092: PUSH
73093: LD_VAR 0 1
73097: ARRAY
73098: PUSH
73099: LD_INT 3
73101: ARRAY
73102: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73103: LD_ADDR_VAR 0 7
73107: PUSH
73108: LD_VAR 0 3
73112: PUSH
73113: LD_VAR 0 1
73117: ARRAY
73118: PUSH
73119: LD_INT 4
73121: ARRAY
73122: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73123: LD_ADDR_VAR 0 9
73127: PUSH
73128: LD_VAR 0 6
73132: PPUSH
73133: LD_VAR 0 7
73137: PPUSH
73138: LD_INT 16
73140: PPUSH
73141: CALL 55060 0 3
73145: ST_TO_ADDR
// if not cratesNearbyPoint then
73146: LD_VAR 0 9
73150: NOT
73151: IFFALSE 73157
// exit ;
73153: POP
73154: POP
73155: GO 73614
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73157: LD_ADDR_VAR 0 4
73161: PUSH
73162: LD_INT 22
73164: PUSH
73165: LD_VAR 0 5
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 3
73176: PUSH
73177: LD_INT 60
73179: PUSH
73180: EMPTY
73181: LIST
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 91
73189: PUSH
73190: LD_VAR 0 8
73194: PUSH
73195: LD_INT 6
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 2
73205: PUSH
73206: LD_INT 25
73208: PUSH
73209: LD_INT 2
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 25
73218: PUSH
73219: LD_INT 16
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: EMPTY
73227: LIST
73228: LIST
73229: LIST
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: PPUSH
73237: CALL_OW 69
73241: PUSH
73242: LD_VAR 0 8
73246: PPUSH
73247: CALL_OW 313
73251: PPUSH
73252: LD_INT 3
73254: PUSH
73255: LD_INT 60
73257: PUSH
73258: EMPTY
73259: LIST
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 2
73267: PUSH
73268: LD_INT 25
73270: PUSH
73271: LD_INT 2
73273: PUSH
73274: EMPTY
73275: LIST
73276: LIST
73277: PUSH
73278: LD_INT 25
73280: PUSH
73281: LD_INT 16
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: LIST
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PPUSH
73297: CALL_OW 72
73301: UNION
73302: ST_TO_ADDR
// if tmp then
73303: LD_VAR 0 4
73307: IFFALSE 73387
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73309: LD_ADDR_VAR 0 4
73313: PUSH
73314: LD_VAR 0 4
73318: PPUSH
73319: LD_INT 3
73321: PPUSH
73322: CALL 53029 0 2
73326: ST_TO_ADDR
// for j in tmp do
73327: LD_ADDR_VAR 0 2
73331: PUSH
73332: LD_VAR 0 4
73336: PUSH
73337: FOR_IN
73338: IFFALSE 73381
// begin if IsInUnit ( j ) then
73340: LD_VAR 0 2
73344: PPUSH
73345: CALL_OW 310
73349: IFFALSE 73360
// ComExit ( j ) ;
73351: LD_VAR 0 2
73355: PPUSH
73356: CALL 53112 0 1
// AddComCollect ( j , x , y ) ;
73360: LD_VAR 0 2
73364: PPUSH
73365: LD_VAR 0 6
73369: PPUSH
73370: LD_VAR 0 7
73374: PPUSH
73375: CALL_OW 177
// end ;
73379: GO 73337
73381: POP
73382: POP
// exit ;
73383: POP
73384: POP
73385: GO 73614
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73387: LD_ADDR_VAR 0 4
73391: PUSH
73392: LD_INT 22
73394: PUSH
73395: LD_VAR 0 5
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 91
73406: PUSH
73407: LD_VAR 0 8
73411: PUSH
73412: LD_INT 8
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 2
73422: PUSH
73423: LD_INT 34
73425: PUSH
73426: LD_INT 12
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 34
73435: PUSH
73436: LD_INT 51
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 34
73445: PUSH
73446: LD_INT 32
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 34
73455: PUSH
73456: LD_INT 89
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: LIST
73474: PPUSH
73475: CALL_OW 69
73479: ST_TO_ADDR
// if tmp then
73480: LD_VAR 0 4
73484: IFFALSE 73610
// begin for j in tmp do
73486: LD_ADDR_VAR 0 2
73490: PUSH
73491: LD_VAR 0 4
73495: PUSH
73496: FOR_IN
73497: IFFALSE 73608
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73499: LD_VAR 0 2
73503: PPUSH
73504: CALL_OW 262
73508: PUSH
73509: LD_INT 3
73511: EQUAL
73512: PUSH
73513: LD_VAR 0 2
73517: PPUSH
73518: CALL_OW 261
73522: PUSH
73523: LD_INT 20
73525: GREATER
73526: OR
73527: PUSH
73528: LD_VAR 0 2
73532: PPUSH
73533: CALL_OW 314
73537: NOT
73538: AND
73539: PUSH
73540: LD_VAR 0 2
73544: PPUSH
73545: CALL_OW 263
73549: PUSH
73550: LD_INT 1
73552: NONEQUAL
73553: PUSH
73554: LD_VAR 0 2
73558: PPUSH
73559: CALL_OW 311
73563: OR
73564: AND
73565: IFFALSE 73606
// begin ComCollect ( j , x , y ) ;
73567: LD_VAR 0 2
73571: PPUSH
73572: LD_VAR 0 6
73576: PPUSH
73577: LD_VAR 0 7
73581: PPUSH
73582: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73586: LD_VAR 0 2
73590: PPUSH
73591: LD_VAR 0 8
73595: PPUSH
73596: CALL_OW 172
// exit ;
73600: POP
73601: POP
73602: POP
73603: POP
73604: GO 73614
// end ;
73606: GO 73496
73608: POP
73609: POP
// end ; end ;
73610: GO 72985
73612: POP
73613: POP
// end ; end_of_file
73614: PPOPN 9
73616: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73617: LD_INT 0
73619: PPUSH
73620: PPUSH
73621: PPUSH
73622: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73623: LD_VAR 0 1
73627: PPUSH
73628: CALL_OW 264
73632: PUSH
73633: LD_INT 91
73635: EQUAL
73636: IFFALSE 73708
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73638: LD_INT 68
73640: PPUSH
73641: LD_VAR 0 1
73645: PPUSH
73646: CALL_OW 255
73650: PPUSH
73651: CALL_OW 321
73655: PUSH
73656: LD_INT 2
73658: EQUAL
73659: IFFALSE 73671
// eff := 70 else
73661: LD_ADDR_VAR 0 4
73665: PUSH
73666: LD_INT 70
73668: ST_TO_ADDR
73669: GO 73679
// eff := 30 ;
73671: LD_ADDR_VAR 0 4
73675: PUSH
73676: LD_INT 30
73678: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73679: LD_VAR 0 1
73683: PPUSH
73684: CALL_OW 250
73688: PPUSH
73689: LD_VAR 0 1
73693: PPUSH
73694: CALL_OW 251
73698: PPUSH
73699: LD_VAR 0 4
73703: PPUSH
73704: CALL_OW 495
// end ; end ;
73708: LD_VAR 0 2
73712: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73713: LD_INT 0
73715: PPUSH
// end ;
73716: LD_VAR 0 4
73720: RET
// export function SOS_Command ( cmd ) ; begin
73721: LD_INT 0
73723: PPUSH
// end ;
73724: LD_VAR 0 2
73728: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73729: LD_INT 0
73731: PPUSH
// end ;
73732: LD_VAR 0 6
73736: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73737: LD_INT 0
73739: PPUSH
73740: PPUSH
// if not vehicle or not factory then
73741: LD_VAR 0 1
73745: NOT
73746: PUSH
73747: LD_VAR 0 2
73751: NOT
73752: OR
73753: IFFALSE 73757
// exit ;
73755: GO 73988
// if factoryWaypoints >= factory then
73757: LD_EXP 100
73761: PUSH
73762: LD_VAR 0 2
73766: GREATEREQUAL
73767: IFFALSE 73988
// if factoryWaypoints [ factory ] then
73769: LD_EXP 100
73773: PUSH
73774: LD_VAR 0 2
73778: ARRAY
73779: IFFALSE 73988
// begin if GetControl ( vehicle ) = control_manual then
73781: LD_VAR 0 1
73785: PPUSH
73786: CALL_OW 263
73790: PUSH
73791: LD_INT 1
73793: EQUAL
73794: IFFALSE 73875
// begin driver := IsDrivenBy ( vehicle ) ;
73796: LD_ADDR_VAR 0 4
73800: PUSH
73801: LD_VAR 0 1
73805: PPUSH
73806: CALL_OW 311
73810: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73811: LD_VAR 0 4
73815: PPUSH
73816: LD_EXP 100
73820: PUSH
73821: LD_VAR 0 2
73825: ARRAY
73826: PUSH
73827: LD_INT 3
73829: ARRAY
73830: PPUSH
73831: LD_EXP 100
73835: PUSH
73836: LD_VAR 0 2
73840: ARRAY
73841: PUSH
73842: LD_INT 4
73844: ARRAY
73845: PPUSH
73846: CALL_OW 171
// AddComExitVehicle ( driver ) ;
73850: LD_VAR 0 4
73854: PPUSH
73855: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73859: LD_VAR 0 4
73863: PPUSH
73864: LD_VAR 0 2
73868: PPUSH
73869: CALL_OW 180
// end else
73873: GO 73988
// if GetControl ( vehicle ) = control_remote then
73875: LD_VAR 0 1
73879: PPUSH
73880: CALL_OW 263
73884: PUSH
73885: LD_INT 2
73887: EQUAL
73888: IFFALSE 73949
// begin wait ( 0 0$2 ) ;
73890: LD_INT 70
73892: PPUSH
73893: CALL_OW 67
// if Connect ( vehicle ) then
73897: LD_VAR 0 1
73901: PPUSH
73902: CALL 23331 0 1
73906: IFFALSE 73947
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73908: LD_VAR 0 1
73912: PPUSH
73913: LD_EXP 100
73917: PUSH
73918: LD_VAR 0 2
73922: ARRAY
73923: PUSH
73924: LD_INT 3
73926: ARRAY
73927: PPUSH
73928: LD_EXP 100
73932: PUSH
73933: LD_VAR 0 2
73937: ARRAY
73938: PUSH
73939: LD_INT 4
73941: ARRAY
73942: PPUSH
73943: CALL_OW 171
// end else
73947: GO 73988
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73949: LD_VAR 0 1
73953: PPUSH
73954: LD_EXP 100
73958: PUSH
73959: LD_VAR 0 2
73963: ARRAY
73964: PUSH
73965: LD_INT 3
73967: ARRAY
73968: PPUSH
73969: LD_EXP 100
73973: PUSH
73974: LD_VAR 0 2
73978: ARRAY
73979: PUSH
73980: LD_INT 4
73982: ARRAY
73983: PPUSH
73984: CALL_OW 171
// end ; end ;
73988: LD_VAR 0 3
73992: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
73993: LD_INT 0
73995: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
73996: LD_VAR 0 1
74000: PUSH
74001: LD_INT 250
74003: EQUAL
74004: PUSH
74005: LD_VAR 0 2
74009: PPUSH
74010: CALL_OW 264
74014: PUSH
74015: LD_INT 81
74017: EQUAL
74018: AND
74019: IFFALSE 74040
// MinerPlaceMine ( unit , x , y ) ;
74021: LD_VAR 0 2
74025: PPUSH
74026: LD_VAR 0 4
74030: PPUSH
74031: LD_VAR 0 5
74035: PPUSH
74036: CALL 77030 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74040: LD_VAR 0 1
74044: PUSH
74045: LD_INT 251
74047: EQUAL
74048: PUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: CALL_OW 264
74058: PUSH
74059: LD_INT 81
74061: EQUAL
74062: AND
74063: IFFALSE 74084
// MinerDetonateMine ( unit , x , y ) ;
74065: LD_VAR 0 2
74069: PPUSH
74070: LD_VAR 0 4
74074: PPUSH
74075: LD_VAR 0 5
74079: PPUSH
74080: CALL 77305 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74084: LD_VAR 0 1
74088: PUSH
74089: LD_INT 252
74091: EQUAL
74092: PUSH
74093: LD_VAR 0 2
74097: PPUSH
74098: CALL_OW 264
74102: PUSH
74103: LD_INT 81
74105: EQUAL
74106: AND
74107: IFFALSE 74128
// MinerCreateMinefield ( unit , x , y ) ;
74109: LD_VAR 0 2
74113: PPUSH
74114: LD_VAR 0 4
74118: PPUSH
74119: LD_VAR 0 5
74123: PPUSH
74124: CALL 77722 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74128: LD_VAR 0 1
74132: PUSH
74133: LD_INT 253
74135: EQUAL
74136: PUSH
74137: LD_VAR 0 2
74141: PPUSH
74142: CALL_OW 257
74146: PUSH
74147: LD_INT 5
74149: EQUAL
74150: AND
74151: IFFALSE 74172
// ComBinocular ( unit , x , y ) ;
74153: LD_VAR 0 2
74157: PPUSH
74158: LD_VAR 0 4
74162: PPUSH
74163: LD_VAR 0 5
74167: PPUSH
74168: CALL 78091 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74172: LD_VAR 0 1
74176: PUSH
74177: LD_INT 254
74179: EQUAL
74180: PUSH
74181: LD_VAR 0 2
74185: PPUSH
74186: CALL_OW 264
74190: PUSH
74191: LD_INT 99
74193: EQUAL
74194: AND
74195: PUSH
74196: LD_VAR 0 3
74200: PPUSH
74201: CALL_OW 263
74205: PUSH
74206: LD_INT 3
74208: EQUAL
74209: AND
74210: IFFALSE 74226
// HackDestroyVehicle ( unit , selectedUnit ) ;
74212: LD_VAR 0 2
74216: PPUSH
74217: LD_VAR 0 3
74221: PPUSH
74222: CALL 76394 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74226: LD_VAR 0 1
74230: PUSH
74231: LD_INT 255
74233: EQUAL
74234: PUSH
74235: LD_VAR 0 2
74239: PPUSH
74240: CALL_OW 264
74244: PUSH
74245: LD_INT 14
74247: PUSH
74248: LD_INT 53
74250: PUSH
74251: EMPTY
74252: LIST
74253: LIST
74254: IN
74255: AND
74256: PUSH
74257: LD_VAR 0 4
74261: PPUSH
74262: LD_VAR 0 5
74266: PPUSH
74267: CALL_OW 488
74271: AND
74272: IFFALSE 74296
// CutTreeXYR ( unit , x , y , 12 ) ;
74274: LD_VAR 0 2
74278: PPUSH
74279: LD_VAR 0 4
74283: PPUSH
74284: LD_VAR 0 5
74288: PPUSH
74289: LD_INT 12
74291: PPUSH
74292: CALL 74391 0 4
// if cmd = 256 then
74296: LD_VAR 0 1
74300: PUSH
74301: LD_INT 256
74303: EQUAL
74304: IFFALSE 74325
// SetFactoryWaypoint ( unit , x , y ) ;
74306: LD_VAR 0 2
74310: PPUSH
74311: LD_VAR 0 4
74315: PPUSH
74316: LD_VAR 0 5
74320: PPUSH
74321: CALL 72306 0 3
// if cmd = 257 then
74325: LD_VAR 0 1
74329: PUSH
74330: LD_INT 257
74332: EQUAL
74333: IFFALSE 74354
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74335: LD_VAR 0 2
74339: PPUSH
74340: LD_VAR 0 4
74344: PPUSH
74345: LD_VAR 0 5
74349: PPUSH
74350: CALL 72668 0 3
// if cmd = 258 then
74354: LD_VAR 0 1
74358: PUSH
74359: LD_INT 258
74361: EQUAL
74362: IFFALSE 74386
// BurnTreeXYR ( unit , x , y , 8 ) ;
74364: LD_VAR 0 2
74368: PPUSH
74369: LD_VAR 0 4
74373: PPUSH
74374: LD_VAR 0 5
74378: PPUSH
74379: LD_INT 8
74381: PPUSH
74382: CALL 74785 0 4
// end ;
74386: LD_VAR 0 6
74390: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74391: LD_INT 0
74393: PPUSH
74394: PPUSH
74395: PPUSH
74396: PPUSH
74397: PPUSH
74398: PPUSH
74399: PPUSH
74400: PPUSH
74401: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74402: LD_VAR 0 1
74406: PPUSH
74407: CALL_OW 302
74411: NOT
74412: PUSH
74413: LD_VAR 0 2
74417: PPUSH
74418: LD_VAR 0 3
74422: PPUSH
74423: CALL_OW 488
74427: NOT
74428: OR
74429: PUSH
74430: LD_VAR 0 4
74434: NOT
74435: OR
74436: IFFALSE 74440
// exit ;
74438: GO 74780
// list := [ ] ;
74440: LD_ADDR_VAR 0 13
74444: PUSH
74445: EMPTY
74446: ST_TO_ADDR
// if x - r < 0 then
74447: LD_VAR 0 2
74451: PUSH
74452: LD_VAR 0 4
74456: MINUS
74457: PUSH
74458: LD_INT 0
74460: LESS
74461: IFFALSE 74473
// min_x := 0 else
74463: LD_ADDR_VAR 0 7
74467: PUSH
74468: LD_INT 0
74470: ST_TO_ADDR
74471: GO 74489
// min_x := x - r ;
74473: LD_ADDR_VAR 0 7
74477: PUSH
74478: LD_VAR 0 2
74482: PUSH
74483: LD_VAR 0 4
74487: MINUS
74488: ST_TO_ADDR
// if y - r < 0 then
74489: LD_VAR 0 3
74493: PUSH
74494: LD_VAR 0 4
74498: MINUS
74499: PUSH
74500: LD_INT 0
74502: LESS
74503: IFFALSE 74515
// min_y := 0 else
74505: LD_ADDR_VAR 0 8
74509: PUSH
74510: LD_INT 0
74512: ST_TO_ADDR
74513: GO 74531
// min_y := y - r ;
74515: LD_ADDR_VAR 0 8
74519: PUSH
74520: LD_VAR 0 3
74524: PUSH
74525: LD_VAR 0 4
74529: MINUS
74530: ST_TO_ADDR
// max_x := x + r ;
74531: LD_ADDR_VAR 0 9
74535: PUSH
74536: LD_VAR 0 2
74540: PUSH
74541: LD_VAR 0 4
74545: PLUS
74546: ST_TO_ADDR
// max_y := y + r ;
74547: LD_ADDR_VAR 0 10
74551: PUSH
74552: LD_VAR 0 3
74556: PUSH
74557: LD_VAR 0 4
74561: PLUS
74562: ST_TO_ADDR
// for _x = min_x to max_x do
74563: LD_ADDR_VAR 0 11
74567: PUSH
74568: DOUBLE
74569: LD_VAR 0 7
74573: DEC
74574: ST_TO_ADDR
74575: LD_VAR 0 9
74579: PUSH
74580: FOR_TO
74581: IFFALSE 74698
// for _y = min_y to max_y do
74583: LD_ADDR_VAR 0 12
74587: PUSH
74588: DOUBLE
74589: LD_VAR 0 8
74593: DEC
74594: ST_TO_ADDR
74595: LD_VAR 0 10
74599: PUSH
74600: FOR_TO
74601: IFFALSE 74694
// begin if not ValidHex ( _x , _y ) then
74603: LD_VAR 0 11
74607: PPUSH
74608: LD_VAR 0 12
74612: PPUSH
74613: CALL_OW 488
74617: NOT
74618: IFFALSE 74622
// continue ;
74620: GO 74600
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74622: LD_VAR 0 11
74626: PPUSH
74627: LD_VAR 0 12
74631: PPUSH
74632: CALL_OW 351
74636: PUSH
74637: LD_VAR 0 11
74641: PPUSH
74642: LD_VAR 0 12
74646: PPUSH
74647: CALL_OW 554
74651: AND
74652: IFFALSE 74692
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74654: LD_ADDR_VAR 0 13
74658: PUSH
74659: LD_VAR 0 13
74663: PPUSH
74664: LD_VAR 0 13
74668: PUSH
74669: LD_INT 1
74671: PLUS
74672: PPUSH
74673: LD_VAR 0 11
74677: PUSH
74678: LD_VAR 0 12
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PPUSH
74687: CALL_OW 2
74691: ST_TO_ADDR
// end ;
74692: GO 74600
74694: POP
74695: POP
74696: GO 74580
74698: POP
74699: POP
// if not list then
74700: LD_VAR 0 13
74704: NOT
74705: IFFALSE 74709
// exit ;
74707: GO 74780
// for i in list do
74709: LD_ADDR_VAR 0 6
74713: PUSH
74714: LD_VAR 0 13
74718: PUSH
74719: FOR_IN
74720: IFFALSE 74778
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74722: LD_VAR 0 1
74726: PPUSH
74727: LD_STRING M
74729: PUSH
74730: LD_VAR 0 6
74734: PUSH
74735: LD_INT 1
74737: ARRAY
74738: PUSH
74739: LD_VAR 0 6
74743: PUSH
74744: LD_INT 2
74746: ARRAY
74747: PUSH
74748: LD_INT 0
74750: PUSH
74751: LD_INT 0
74753: PUSH
74754: LD_INT 0
74756: PUSH
74757: LD_INT 0
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: PUSH
74769: EMPTY
74770: LIST
74771: PPUSH
74772: CALL_OW 447
74776: GO 74719
74778: POP
74779: POP
// end ;
74780: LD_VAR 0 5
74784: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74785: LD_INT 0
74787: PPUSH
74788: PPUSH
74789: PPUSH
74790: PPUSH
74791: PPUSH
74792: PPUSH
74793: PPUSH
74794: PPUSH
74795: PPUSH
74796: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74797: LD_VAR 0 1
74801: PPUSH
74802: CALL_OW 302
74806: NOT
74807: PUSH
74808: LD_VAR 0 2
74812: PPUSH
74813: LD_VAR 0 3
74817: PPUSH
74818: CALL_OW 488
74822: NOT
74823: OR
74824: PUSH
74825: LD_VAR 0 4
74829: NOT
74830: OR
74831: IFFALSE 74835
// exit ;
74833: GO 75348
// list := [ ] ;
74835: LD_ADDR_VAR 0 13
74839: PUSH
74840: EMPTY
74841: ST_TO_ADDR
// if x - r < 0 then
74842: LD_VAR 0 2
74846: PUSH
74847: LD_VAR 0 4
74851: MINUS
74852: PUSH
74853: LD_INT 0
74855: LESS
74856: IFFALSE 74868
// min_x := 0 else
74858: LD_ADDR_VAR 0 7
74862: PUSH
74863: LD_INT 0
74865: ST_TO_ADDR
74866: GO 74884
// min_x := x - r ;
74868: LD_ADDR_VAR 0 7
74872: PUSH
74873: LD_VAR 0 2
74877: PUSH
74878: LD_VAR 0 4
74882: MINUS
74883: ST_TO_ADDR
// if y - r < 0 then
74884: LD_VAR 0 3
74888: PUSH
74889: LD_VAR 0 4
74893: MINUS
74894: PUSH
74895: LD_INT 0
74897: LESS
74898: IFFALSE 74910
// min_y := 0 else
74900: LD_ADDR_VAR 0 8
74904: PUSH
74905: LD_INT 0
74907: ST_TO_ADDR
74908: GO 74926
// min_y := y - r ;
74910: LD_ADDR_VAR 0 8
74914: PUSH
74915: LD_VAR 0 3
74919: PUSH
74920: LD_VAR 0 4
74924: MINUS
74925: ST_TO_ADDR
// max_x := x + r ;
74926: LD_ADDR_VAR 0 9
74930: PUSH
74931: LD_VAR 0 2
74935: PUSH
74936: LD_VAR 0 4
74940: PLUS
74941: ST_TO_ADDR
// max_y := y + r ;
74942: LD_ADDR_VAR 0 10
74946: PUSH
74947: LD_VAR 0 3
74951: PUSH
74952: LD_VAR 0 4
74956: PLUS
74957: ST_TO_ADDR
// for _x = min_x to max_x do
74958: LD_ADDR_VAR 0 11
74962: PUSH
74963: DOUBLE
74964: LD_VAR 0 7
74968: DEC
74969: ST_TO_ADDR
74970: LD_VAR 0 9
74974: PUSH
74975: FOR_TO
74976: IFFALSE 75093
// for _y = min_y to max_y do
74978: LD_ADDR_VAR 0 12
74982: PUSH
74983: DOUBLE
74984: LD_VAR 0 8
74988: DEC
74989: ST_TO_ADDR
74990: LD_VAR 0 10
74994: PUSH
74995: FOR_TO
74996: IFFALSE 75089
// begin if not ValidHex ( _x , _y ) then
74998: LD_VAR 0 11
75002: PPUSH
75003: LD_VAR 0 12
75007: PPUSH
75008: CALL_OW 488
75012: NOT
75013: IFFALSE 75017
// continue ;
75015: GO 74995
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75017: LD_VAR 0 11
75021: PPUSH
75022: LD_VAR 0 12
75026: PPUSH
75027: CALL_OW 351
75031: PUSH
75032: LD_VAR 0 11
75036: PPUSH
75037: LD_VAR 0 12
75041: PPUSH
75042: CALL_OW 554
75046: AND
75047: IFFALSE 75087
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75049: LD_ADDR_VAR 0 13
75053: PUSH
75054: LD_VAR 0 13
75058: PPUSH
75059: LD_VAR 0 13
75063: PUSH
75064: LD_INT 1
75066: PLUS
75067: PPUSH
75068: LD_VAR 0 11
75072: PUSH
75073: LD_VAR 0 12
75077: PUSH
75078: EMPTY
75079: LIST
75080: LIST
75081: PPUSH
75082: CALL_OW 2
75086: ST_TO_ADDR
// end ;
75087: GO 74995
75089: POP
75090: POP
75091: GO 74975
75093: POP
75094: POP
// if not list then
75095: LD_VAR 0 13
75099: NOT
75100: IFFALSE 75104
// exit ;
75102: GO 75348
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75104: LD_ADDR_VAR 0 13
75108: PUSH
75109: LD_VAR 0 1
75113: PPUSH
75114: LD_VAR 0 13
75118: PPUSH
75119: LD_INT 1
75121: PPUSH
75122: LD_INT 1
75124: PPUSH
75125: CALL 20473 0 4
75129: ST_TO_ADDR
// ComStop ( flame ) ;
75130: LD_VAR 0 1
75134: PPUSH
75135: CALL_OW 141
// for i in list do
75139: LD_ADDR_VAR 0 6
75143: PUSH
75144: LD_VAR 0 13
75148: PUSH
75149: FOR_IN
75150: IFFALSE 75181
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75152: LD_VAR 0 1
75156: PPUSH
75157: LD_VAR 0 6
75161: PUSH
75162: LD_INT 1
75164: ARRAY
75165: PPUSH
75166: LD_VAR 0 6
75170: PUSH
75171: LD_INT 2
75173: ARRAY
75174: PPUSH
75175: CALL_OW 176
75179: GO 75149
75181: POP
75182: POP
// repeat wait ( 0 0$1 ) ;
75183: LD_INT 35
75185: PPUSH
75186: CALL_OW 67
// task := GetTaskList ( flame ) ;
75190: LD_ADDR_VAR 0 14
75194: PUSH
75195: LD_VAR 0 1
75199: PPUSH
75200: CALL_OW 437
75204: ST_TO_ADDR
// if not task then
75205: LD_VAR 0 14
75209: NOT
75210: IFFALSE 75214
// exit ;
75212: GO 75348
// if task [ 1 ] [ 1 ] <> | then
75214: LD_VAR 0 14
75218: PUSH
75219: LD_INT 1
75221: ARRAY
75222: PUSH
75223: LD_INT 1
75225: ARRAY
75226: PUSH
75227: LD_STRING |
75229: NONEQUAL
75230: IFFALSE 75234
// exit ;
75232: GO 75348
// _x := task [ 1 ] [ 2 ] ;
75234: LD_ADDR_VAR 0 11
75238: PUSH
75239: LD_VAR 0 14
75243: PUSH
75244: LD_INT 1
75246: ARRAY
75247: PUSH
75248: LD_INT 2
75250: ARRAY
75251: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75252: LD_ADDR_VAR 0 12
75256: PUSH
75257: LD_VAR 0 14
75261: PUSH
75262: LD_INT 1
75264: ARRAY
75265: PUSH
75266: LD_INT 3
75268: ARRAY
75269: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75270: LD_VAR 0 11
75274: PPUSH
75275: LD_VAR 0 12
75279: PPUSH
75280: CALL_OW 351
75284: NOT
75285: PUSH
75286: LD_VAR 0 11
75290: PPUSH
75291: LD_VAR 0 12
75295: PPUSH
75296: CALL_OW 554
75300: NOT
75301: OR
75302: IFFALSE 75336
// begin task := Delete ( task , 1 ) ;
75304: LD_ADDR_VAR 0 14
75308: PUSH
75309: LD_VAR 0 14
75313: PPUSH
75314: LD_INT 1
75316: PPUSH
75317: CALL_OW 3
75321: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75322: LD_VAR 0 1
75326: PPUSH
75327: LD_VAR 0 14
75331: PPUSH
75332: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75336: LD_VAR 0 1
75340: PPUSH
75341: CALL_OW 314
75345: NOT
75346: IFFALSE 75183
// end ;
75348: LD_VAR 0 5
75352: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75353: LD_EXP 103
75357: NOT
75358: IFFALSE 75408
75360: GO 75362
75362: DISABLE
// begin initHack := true ;
75363: LD_ADDR_EXP 103
75367: PUSH
75368: LD_INT 1
75370: ST_TO_ADDR
// hackTanks := [ ] ;
75371: LD_ADDR_EXP 104
75375: PUSH
75376: EMPTY
75377: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75378: LD_ADDR_EXP 105
75382: PUSH
75383: EMPTY
75384: ST_TO_ADDR
// hackLimit := 3 ;
75385: LD_ADDR_EXP 106
75389: PUSH
75390: LD_INT 3
75392: ST_TO_ADDR
// hackDist := 12 ;
75393: LD_ADDR_EXP 107
75397: PUSH
75398: LD_INT 12
75400: ST_TO_ADDR
// hackCounter := [ ] ;
75401: LD_ADDR_EXP 108
75405: PUSH
75406: EMPTY
75407: ST_TO_ADDR
// end ;
75408: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75409: LD_EXP 103
75413: PUSH
75414: LD_INT 34
75416: PUSH
75417: LD_INT 99
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PPUSH
75424: CALL_OW 69
75428: AND
75429: IFFALSE 75682
75431: GO 75433
75433: DISABLE
75434: LD_INT 0
75436: PPUSH
75437: PPUSH
// begin enable ;
75438: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75439: LD_ADDR_VAR 0 1
75443: PUSH
75444: LD_INT 34
75446: PUSH
75447: LD_INT 99
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PPUSH
75454: CALL_OW 69
75458: PUSH
75459: FOR_IN
75460: IFFALSE 75680
// begin if not i in hackTanks then
75462: LD_VAR 0 1
75466: PUSH
75467: LD_EXP 104
75471: IN
75472: NOT
75473: IFFALSE 75556
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75475: LD_ADDR_EXP 104
75479: PUSH
75480: LD_EXP 104
75484: PPUSH
75485: LD_EXP 104
75489: PUSH
75490: LD_INT 1
75492: PLUS
75493: PPUSH
75494: LD_VAR 0 1
75498: PPUSH
75499: CALL_OW 1
75503: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75504: LD_ADDR_EXP 105
75508: PUSH
75509: LD_EXP 105
75513: PPUSH
75514: LD_EXP 105
75518: PUSH
75519: LD_INT 1
75521: PLUS
75522: PPUSH
75523: EMPTY
75524: PPUSH
75525: CALL_OW 1
75529: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75530: LD_ADDR_EXP 108
75534: PUSH
75535: LD_EXP 108
75539: PPUSH
75540: LD_EXP 108
75544: PUSH
75545: LD_INT 1
75547: PLUS
75548: PPUSH
75549: EMPTY
75550: PPUSH
75551: CALL_OW 1
75555: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75556: LD_VAR 0 1
75560: PPUSH
75561: CALL_OW 302
75565: NOT
75566: IFFALSE 75579
// begin HackUnlinkAll ( i ) ;
75568: LD_VAR 0 1
75572: PPUSH
75573: CALL 75685 0 1
// continue ;
75577: GO 75459
// end ; HackCheckCapturedStatus ( i ) ;
75579: LD_VAR 0 1
75583: PPUSH
75584: CALL 76128 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75588: LD_ADDR_VAR 0 2
75592: PUSH
75593: LD_INT 81
75595: PUSH
75596: LD_VAR 0 1
75600: PPUSH
75601: CALL_OW 255
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 33
75612: PUSH
75613: LD_INT 3
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 91
75622: PUSH
75623: LD_VAR 0 1
75627: PUSH
75628: LD_EXP 107
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: PUSH
75638: LD_INT 50
75640: PUSH
75641: EMPTY
75642: LIST
75643: PUSH
75644: EMPTY
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: PPUSH
75650: CALL_OW 69
75654: ST_TO_ADDR
// if not tmp then
75655: LD_VAR 0 2
75659: NOT
75660: IFFALSE 75664
// continue ;
75662: GO 75459
// HackLink ( i , tmp ) ;
75664: LD_VAR 0 1
75668: PPUSH
75669: LD_VAR 0 2
75673: PPUSH
75674: CALL 75821 0 2
// end ;
75678: GO 75459
75680: POP
75681: POP
// end ;
75682: PPOPN 2
75684: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75685: LD_INT 0
75687: PPUSH
75688: PPUSH
75689: PPUSH
// if not hack in hackTanks then
75690: LD_VAR 0 1
75694: PUSH
75695: LD_EXP 104
75699: IN
75700: NOT
75701: IFFALSE 75705
// exit ;
75703: GO 75816
// index := GetElementIndex ( hackTanks , hack ) ;
75705: LD_ADDR_VAR 0 4
75709: PUSH
75710: LD_EXP 104
75714: PPUSH
75715: LD_VAR 0 1
75719: PPUSH
75720: CALL 19770 0 2
75724: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75725: LD_EXP 105
75729: PUSH
75730: LD_VAR 0 4
75734: ARRAY
75735: IFFALSE 75816
// begin for i in hackTanksCaptured [ index ] do
75737: LD_ADDR_VAR 0 3
75741: PUSH
75742: LD_EXP 105
75746: PUSH
75747: LD_VAR 0 4
75751: ARRAY
75752: PUSH
75753: FOR_IN
75754: IFFALSE 75780
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75756: LD_VAR 0 3
75760: PUSH
75761: LD_INT 1
75763: ARRAY
75764: PPUSH
75765: LD_VAR 0 3
75769: PUSH
75770: LD_INT 2
75772: ARRAY
75773: PPUSH
75774: CALL_OW 235
75778: GO 75753
75780: POP
75781: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75782: LD_ADDR_EXP 105
75786: PUSH
75787: LD_EXP 105
75791: PPUSH
75792: LD_VAR 0 4
75796: PPUSH
75797: EMPTY
75798: PPUSH
75799: CALL_OW 1
75803: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75804: LD_VAR 0 1
75808: PPUSH
75809: LD_INT 0
75811: PPUSH
75812: CALL_OW 505
// end ; end ;
75816: LD_VAR 0 2
75820: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75821: LD_INT 0
75823: PPUSH
75824: PPUSH
75825: PPUSH
// if not hack in hackTanks or not vehicles then
75826: LD_VAR 0 1
75830: PUSH
75831: LD_EXP 104
75835: IN
75836: NOT
75837: PUSH
75838: LD_VAR 0 2
75842: NOT
75843: OR
75844: IFFALSE 75848
// exit ;
75846: GO 76123
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75848: LD_ADDR_VAR 0 2
75852: PUSH
75853: LD_VAR 0 1
75857: PPUSH
75858: LD_VAR 0 2
75862: PPUSH
75863: LD_INT 1
75865: PPUSH
75866: LD_INT 1
75868: PPUSH
75869: CALL 20420 0 4
75873: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75874: LD_ADDR_VAR 0 5
75878: PUSH
75879: LD_EXP 104
75883: PPUSH
75884: LD_VAR 0 1
75888: PPUSH
75889: CALL 19770 0 2
75893: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75894: LD_EXP 105
75898: PUSH
75899: LD_VAR 0 5
75903: ARRAY
75904: PUSH
75905: LD_EXP 106
75909: LESS
75910: IFFALSE 76099
// begin for i := 1 to vehicles do
75912: LD_ADDR_VAR 0 4
75916: PUSH
75917: DOUBLE
75918: LD_INT 1
75920: DEC
75921: ST_TO_ADDR
75922: LD_VAR 0 2
75926: PUSH
75927: FOR_TO
75928: IFFALSE 76097
// begin if hackTanksCaptured [ index ] = hackLimit then
75930: LD_EXP 105
75934: PUSH
75935: LD_VAR 0 5
75939: ARRAY
75940: PUSH
75941: LD_EXP 106
75945: EQUAL
75946: IFFALSE 75950
// break ;
75948: GO 76097
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
75950: LD_ADDR_EXP 108
75954: PUSH
75955: LD_EXP 108
75959: PPUSH
75960: LD_VAR 0 5
75964: PPUSH
75965: LD_EXP 108
75969: PUSH
75970: LD_VAR 0 5
75974: ARRAY
75975: PUSH
75976: LD_INT 1
75978: PLUS
75979: PPUSH
75980: CALL_OW 1
75984: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
75985: LD_ADDR_EXP 105
75989: PUSH
75990: LD_EXP 105
75994: PPUSH
75995: LD_VAR 0 5
75999: PUSH
76000: LD_EXP 105
76004: PUSH
76005: LD_VAR 0 5
76009: ARRAY
76010: PUSH
76011: LD_INT 1
76013: PLUS
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PPUSH
76019: LD_VAR 0 2
76023: PUSH
76024: LD_VAR 0 4
76028: ARRAY
76029: PUSH
76030: LD_VAR 0 2
76034: PUSH
76035: LD_VAR 0 4
76039: ARRAY
76040: PPUSH
76041: CALL_OW 255
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PPUSH
76050: CALL 19985 0 3
76054: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76055: LD_VAR 0 2
76059: PUSH
76060: LD_VAR 0 4
76064: ARRAY
76065: PPUSH
76066: LD_VAR 0 1
76070: PPUSH
76071: CALL_OW 255
76075: PPUSH
76076: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76080: LD_VAR 0 2
76084: PUSH
76085: LD_VAR 0 4
76089: ARRAY
76090: PPUSH
76091: CALL_OW 141
// end ;
76095: GO 75927
76097: POP
76098: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76099: LD_VAR 0 1
76103: PPUSH
76104: LD_EXP 105
76108: PUSH
76109: LD_VAR 0 5
76113: ARRAY
76114: PUSH
76115: LD_INT 0
76117: PLUS
76118: PPUSH
76119: CALL_OW 505
// end ;
76123: LD_VAR 0 3
76127: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76128: LD_INT 0
76130: PPUSH
76131: PPUSH
76132: PPUSH
76133: PPUSH
// if not hack in hackTanks then
76134: LD_VAR 0 1
76138: PUSH
76139: LD_EXP 104
76143: IN
76144: NOT
76145: IFFALSE 76149
// exit ;
76147: GO 76389
// index := GetElementIndex ( hackTanks , hack ) ;
76149: LD_ADDR_VAR 0 4
76153: PUSH
76154: LD_EXP 104
76158: PPUSH
76159: LD_VAR 0 1
76163: PPUSH
76164: CALL 19770 0 2
76168: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76169: LD_ADDR_VAR 0 3
76173: PUSH
76174: DOUBLE
76175: LD_EXP 105
76179: PUSH
76180: LD_VAR 0 4
76184: ARRAY
76185: INC
76186: ST_TO_ADDR
76187: LD_INT 1
76189: PUSH
76190: FOR_DOWNTO
76191: IFFALSE 76363
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76193: LD_ADDR_VAR 0 5
76197: PUSH
76198: LD_EXP 105
76202: PUSH
76203: LD_VAR 0 4
76207: ARRAY
76208: PUSH
76209: LD_VAR 0 3
76213: ARRAY
76214: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76215: LD_VAR 0 5
76219: PUSH
76220: LD_INT 1
76222: ARRAY
76223: PPUSH
76224: CALL_OW 302
76228: NOT
76229: PUSH
76230: LD_VAR 0 5
76234: PUSH
76235: LD_INT 1
76237: ARRAY
76238: PPUSH
76239: CALL_OW 255
76243: PUSH
76244: LD_VAR 0 1
76248: PPUSH
76249: CALL_OW 255
76253: NONEQUAL
76254: OR
76255: IFFALSE 76361
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76257: LD_VAR 0 5
76261: PUSH
76262: LD_INT 1
76264: ARRAY
76265: PPUSH
76266: CALL_OW 305
76270: PUSH
76271: LD_VAR 0 5
76275: PUSH
76276: LD_INT 1
76278: ARRAY
76279: PPUSH
76280: CALL_OW 255
76284: PUSH
76285: LD_VAR 0 1
76289: PPUSH
76290: CALL_OW 255
76294: EQUAL
76295: AND
76296: IFFALSE 76320
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76298: LD_VAR 0 5
76302: PUSH
76303: LD_INT 1
76305: ARRAY
76306: PPUSH
76307: LD_VAR 0 5
76311: PUSH
76312: LD_INT 2
76314: ARRAY
76315: PPUSH
76316: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76320: LD_ADDR_EXP 105
76324: PUSH
76325: LD_EXP 105
76329: PPUSH
76330: LD_VAR 0 4
76334: PPUSH
76335: LD_EXP 105
76339: PUSH
76340: LD_VAR 0 4
76344: ARRAY
76345: PPUSH
76346: LD_VAR 0 3
76350: PPUSH
76351: CALL_OW 3
76355: PPUSH
76356: CALL_OW 1
76360: ST_TO_ADDR
// end ; end ;
76361: GO 76190
76363: POP
76364: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76365: LD_VAR 0 1
76369: PPUSH
76370: LD_EXP 105
76374: PUSH
76375: LD_VAR 0 4
76379: ARRAY
76380: PUSH
76381: LD_INT 0
76383: PLUS
76384: PPUSH
76385: CALL_OW 505
// end ;
76389: LD_VAR 0 2
76393: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76394: LD_INT 0
76396: PPUSH
76397: PPUSH
76398: PPUSH
76399: PPUSH
// if not hack in hackTanks then
76400: LD_VAR 0 1
76404: PUSH
76405: LD_EXP 104
76409: IN
76410: NOT
76411: IFFALSE 76415
// exit ;
76413: GO 76500
// index := GetElementIndex ( hackTanks , hack ) ;
76415: LD_ADDR_VAR 0 5
76419: PUSH
76420: LD_EXP 104
76424: PPUSH
76425: LD_VAR 0 1
76429: PPUSH
76430: CALL 19770 0 2
76434: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76435: LD_ADDR_VAR 0 4
76439: PUSH
76440: DOUBLE
76441: LD_INT 1
76443: DEC
76444: ST_TO_ADDR
76445: LD_EXP 105
76449: PUSH
76450: LD_VAR 0 5
76454: ARRAY
76455: PUSH
76456: FOR_TO
76457: IFFALSE 76498
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76459: LD_EXP 105
76463: PUSH
76464: LD_VAR 0 5
76468: ARRAY
76469: PUSH
76470: LD_VAR 0 4
76474: ARRAY
76475: PUSH
76476: LD_INT 1
76478: ARRAY
76479: PUSH
76480: LD_VAR 0 2
76484: EQUAL
76485: IFFALSE 76496
// KillUnit ( vehicle ) ;
76487: LD_VAR 0 2
76491: PPUSH
76492: CALL_OW 66
76496: GO 76456
76498: POP
76499: POP
// end ;
76500: LD_VAR 0 3
76504: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76505: LD_EXP 109
76509: NOT
76510: IFFALSE 76545
76512: GO 76514
76514: DISABLE
// begin initMiner := true ;
76515: LD_ADDR_EXP 109
76519: PUSH
76520: LD_INT 1
76522: ST_TO_ADDR
// minersList := [ ] ;
76523: LD_ADDR_EXP 110
76527: PUSH
76528: EMPTY
76529: ST_TO_ADDR
// minerMinesList := [ ] ;
76530: LD_ADDR_EXP 111
76534: PUSH
76535: EMPTY
76536: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76537: LD_ADDR_EXP 112
76541: PUSH
76542: LD_INT 5
76544: ST_TO_ADDR
// end ;
76545: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76546: LD_EXP 109
76550: PUSH
76551: LD_INT 34
76553: PUSH
76554: LD_INT 81
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PPUSH
76561: CALL_OW 69
76565: AND
76566: IFFALSE 77027
76568: GO 76570
76570: DISABLE
76571: LD_INT 0
76573: PPUSH
76574: PPUSH
76575: PPUSH
76576: PPUSH
// begin enable ;
76577: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76578: LD_ADDR_VAR 0 1
76582: PUSH
76583: LD_INT 34
76585: PUSH
76586: LD_INT 81
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PPUSH
76593: CALL_OW 69
76597: PUSH
76598: FOR_IN
76599: IFFALSE 76671
// begin if not i in minersList then
76601: LD_VAR 0 1
76605: PUSH
76606: LD_EXP 110
76610: IN
76611: NOT
76612: IFFALSE 76669
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76614: LD_ADDR_EXP 110
76618: PUSH
76619: LD_EXP 110
76623: PPUSH
76624: LD_EXP 110
76628: PUSH
76629: LD_INT 1
76631: PLUS
76632: PPUSH
76633: LD_VAR 0 1
76637: PPUSH
76638: CALL_OW 1
76642: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76643: LD_ADDR_EXP 111
76647: PUSH
76648: LD_EXP 111
76652: PPUSH
76653: LD_EXP 111
76657: PUSH
76658: LD_INT 1
76660: PLUS
76661: PPUSH
76662: EMPTY
76663: PPUSH
76664: CALL_OW 1
76668: ST_TO_ADDR
// end end ;
76669: GO 76598
76671: POP
76672: POP
// for i := minerMinesList downto 1 do
76673: LD_ADDR_VAR 0 1
76677: PUSH
76678: DOUBLE
76679: LD_EXP 111
76683: INC
76684: ST_TO_ADDR
76685: LD_INT 1
76687: PUSH
76688: FOR_DOWNTO
76689: IFFALSE 77025
// begin if IsLive ( minersList [ i ] ) then
76691: LD_EXP 110
76695: PUSH
76696: LD_VAR 0 1
76700: ARRAY
76701: PPUSH
76702: CALL_OW 300
76706: IFFALSE 76734
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76708: LD_EXP 110
76712: PUSH
76713: LD_VAR 0 1
76717: ARRAY
76718: PPUSH
76719: LD_EXP 111
76723: PUSH
76724: LD_VAR 0 1
76728: ARRAY
76729: PPUSH
76730: CALL_OW 505
// if not minerMinesList [ i ] then
76734: LD_EXP 111
76738: PUSH
76739: LD_VAR 0 1
76743: ARRAY
76744: NOT
76745: IFFALSE 76749
// continue ;
76747: GO 76688
// for j := minerMinesList [ i ] downto 1 do
76749: LD_ADDR_VAR 0 2
76753: PUSH
76754: DOUBLE
76755: LD_EXP 111
76759: PUSH
76760: LD_VAR 0 1
76764: ARRAY
76765: INC
76766: ST_TO_ADDR
76767: LD_INT 1
76769: PUSH
76770: FOR_DOWNTO
76771: IFFALSE 77021
// begin side := GetSide ( minersList [ i ] ) ;
76773: LD_ADDR_VAR 0 3
76777: PUSH
76778: LD_EXP 110
76782: PUSH
76783: LD_VAR 0 1
76787: ARRAY
76788: PPUSH
76789: CALL_OW 255
76793: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76794: LD_ADDR_VAR 0 4
76798: PUSH
76799: LD_EXP 111
76803: PUSH
76804: LD_VAR 0 1
76808: ARRAY
76809: PUSH
76810: LD_VAR 0 2
76814: ARRAY
76815: PUSH
76816: LD_INT 1
76818: ARRAY
76819: PPUSH
76820: LD_EXP 111
76824: PUSH
76825: LD_VAR 0 1
76829: ARRAY
76830: PUSH
76831: LD_VAR 0 2
76835: ARRAY
76836: PUSH
76837: LD_INT 2
76839: ARRAY
76840: PPUSH
76841: CALL_OW 428
76845: ST_TO_ADDR
// if not tmp then
76846: LD_VAR 0 4
76850: NOT
76851: IFFALSE 76855
// continue ;
76853: GO 76770
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76855: LD_VAR 0 4
76859: PUSH
76860: LD_INT 81
76862: PUSH
76863: LD_VAR 0 3
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PPUSH
76872: CALL_OW 69
76876: IN
76877: PUSH
76878: LD_EXP 111
76882: PUSH
76883: LD_VAR 0 1
76887: ARRAY
76888: PUSH
76889: LD_VAR 0 2
76893: ARRAY
76894: PUSH
76895: LD_INT 1
76897: ARRAY
76898: PPUSH
76899: LD_EXP 111
76903: PUSH
76904: LD_VAR 0 1
76908: ARRAY
76909: PUSH
76910: LD_VAR 0 2
76914: ARRAY
76915: PUSH
76916: LD_INT 2
76918: ARRAY
76919: PPUSH
76920: CALL_OW 458
76924: AND
76925: IFFALSE 77019
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
76927: LD_EXP 111
76931: PUSH
76932: LD_VAR 0 1
76936: ARRAY
76937: PUSH
76938: LD_VAR 0 2
76942: ARRAY
76943: PUSH
76944: LD_INT 1
76946: ARRAY
76947: PPUSH
76948: LD_EXP 111
76952: PUSH
76953: LD_VAR 0 1
76957: ARRAY
76958: PUSH
76959: LD_VAR 0 2
76963: ARRAY
76964: PUSH
76965: LD_INT 2
76967: ARRAY
76968: PPUSH
76969: LD_VAR 0 3
76973: PPUSH
76974: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
76978: LD_ADDR_EXP 111
76982: PUSH
76983: LD_EXP 111
76987: PPUSH
76988: LD_VAR 0 1
76992: PPUSH
76993: LD_EXP 111
76997: PUSH
76998: LD_VAR 0 1
77002: ARRAY
77003: PPUSH
77004: LD_VAR 0 2
77008: PPUSH
77009: CALL_OW 3
77013: PPUSH
77014: CALL_OW 1
77018: ST_TO_ADDR
// end ; end ;
77019: GO 76770
77021: POP
77022: POP
// end ;
77023: GO 76688
77025: POP
77026: POP
// end ;
77027: PPOPN 4
77029: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77030: LD_INT 0
77032: PPUSH
77033: PPUSH
// result := false ;
77034: LD_ADDR_VAR 0 4
77038: PUSH
77039: LD_INT 0
77041: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77042: LD_VAR 0 1
77046: PPUSH
77047: CALL_OW 264
77051: PUSH
77052: LD_INT 81
77054: EQUAL
77055: NOT
77056: IFFALSE 77060
// exit ;
77058: GO 77300
// index := GetElementIndex ( minersList , unit ) ;
77060: LD_ADDR_VAR 0 5
77064: PUSH
77065: LD_EXP 110
77069: PPUSH
77070: LD_VAR 0 1
77074: PPUSH
77075: CALL 19770 0 2
77079: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77080: LD_EXP 111
77084: PUSH
77085: LD_VAR 0 5
77089: ARRAY
77090: PUSH
77091: LD_EXP 112
77095: GREATEREQUAL
77096: IFFALSE 77100
// exit ;
77098: GO 77300
// ComMoveXY ( unit , x , y ) ;
77100: LD_VAR 0 1
77104: PPUSH
77105: LD_VAR 0 2
77109: PPUSH
77110: LD_VAR 0 3
77114: PPUSH
77115: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77119: LD_INT 35
77121: PPUSH
77122: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77126: LD_VAR 0 1
77130: PPUSH
77131: LD_VAR 0 2
77135: PPUSH
77136: LD_VAR 0 3
77140: PPUSH
77141: CALL 51511 0 3
77145: NOT
77146: PUSH
77147: LD_VAR 0 1
77151: PPUSH
77152: CALL_OW 314
77156: AND
77157: IFFALSE 77161
// exit ;
77159: GO 77300
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77161: LD_VAR 0 2
77165: PPUSH
77166: LD_VAR 0 3
77170: PPUSH
77171: CALL_OW 428
77175: PUSH
77176: LD_VAR 0 1
77180: EQUAL
77181: PUSH
77182: LD_VAR 0 1
77186: PPUSH
77187: CALL_OW 314
77191: NOT
77192: AND
77193: IFFALSE 77119
// PlaySoundXY ( x , y , PlantMine ) ;
77195: LD_VAR 0 2
77199: PPUSH
77200: LD_VAR 0 3
77204: PPUSH
77205: LD_STRING PlantMine
77207: PPUSH
77208: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77212: LD_VAR 0 2
77216: PPUSH
77217: LD_VAR 0 3
77221: PPUSH
77222: LD_VAR 0 1
77226: PPUSH
77227: CALL_OW 255
77231: PPUSH
77232: LD_INT 0
77234: PPUSH
77235: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77239: LD_ADDR_EXP 111
77243: PUSH
77244: LD_EXP 111
77248: PPUSH
77249: LD_VAR 0 5
77253: PUSH
77254: LD_EXP 111
77258: PUSH
77259: LD_VAR 0 5
77263: ARRAY
77264: PUSH
77265: LD_INT 1
77267: PLUS
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PPUSH
77273: LD_VAR 0 2
77277: PUSH
77278: LD_VAR 0 3
77282: PUSH
77283: EMPTY
77284: LIST
77285: LIST
77286: PPUSH
77287: CALL 19985 0 3
77291: ST_TO_ADDR
// result := true ;
77292: LD_ADDR_VAR 0 4
77296: PUSH
77297: LD_INT 1
77299: ST_TO_ADDR
// end ;
77300: LD_VAR 0 4
77304: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77305: LD_INT 0
77307: PPUSH
77308: PPUSH
77309: PPUSH
// if not unit in minersList then
77310: LD_VAR 0 1
77314: PUSH
77315: LD_EXP 110
77319: IN
77320: NOT
77321: IFFALSE 77325
// exit ;
77323: GO 77717
// index := GetElementIndex ( minersList , unit ) ;
77325: LD_ADDR_VAR 0 6
77329: PUSH
77330: LD_EXP 110
77334: PPUSH
77335: LD_VAR 0 1
77339: PPUSH
77340: CALL 19770 0 2
77344: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77345: LD_ADDR_VAR 0 5
77349: PUSH
77350: DOUBLE
77351: LD_EXP 111
77355: PUSH
77356: LD_VAR 0 6
77360: ARRAY
77361: INC
77362: ST_TO_ADDR
77363: LD_INT 1
77365: PUSH
77366: FOR_DOWNTO
77367: IFFALSE 77528
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77369: LD_EXP 111
77373: PUSH
77374: LD_VAR 0 6
77378: ARRAY
77379: PUSH
77380: LD_VAR 0 5
77384: ARRAY
77385: PUSH
77386: LD_INT 1
77388: ARRAY
77389: PUSH
77390: LD_VAR 0 2
77394: EQUAL
77395: PUSH
77396: LD_EXP 111
77400: PUSH
77401: LD_VAR 0 6
77405: ARRAY
77406: PUSH
77407: LD_VAR 0 5
77411: ARRAY
77412: PUSH
77413: LD_INT 2
77415: ARRAY
77416: PUSH
77417: LD_VAR 0 3
77421: EQUAL
77422: AND
77423: IFFALSE 77526
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77425: LD_EXP 111
77429: PUSH
77430: LD_VAR 0 6
77434: ARRAY
77435: PUSH
77436: LD_VAR 0 5
77440: ARRAY
77441: PUSH
77442: LD_INT 1
77444: ARRAY
77445: PPUSH
77446: LD_EXP 111
77450: PUSH
77451: LD_VAR 0 6
77455: ARRAY
77456: PUSH
77457: LD_VAR 0 5
77461: ARRAY
77462: PUSH
77463: LD_INT 2
77465: ARRAY
77466: PPUSH
77467: LD_VAR 0 1
77471: PPUSH
77472: CALL_OW 255
77476: PPUSH
77477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77481: LD_ADDR_EXP 111
77485: PUSH
77486: LD_EXP 111
77490: PPUSH
77491: LD_VAR 0 6
77495: PPUSH
77496: LD_EXP 111
77500: PUSH
77501: LD_VAR 0 6
77505: ARRAY
77506: PPUSH
77507: LD_VAR 0 5
77511: PPUSH
77512: CALL_OW 3
77516: PPUSH
77517: CALL_OW 1
77521: ST_TO_ADDR
// exit ;
77522: POP
77523: POP
77524: GO 77717
// end ; end ;
77526: GO 77366
77528: POP
77529: POP
// for i := minerMinesList [ index ] downto 1 do
77530: LD_ADDR_VAR 0 5
77534: PUSH
77535: DOUBLE
77536: LD_EXP 111
77540: PUSH
77541: LD_VAR 0 6
77545: ARRAY
77546: INC
77547: ST_TO_ADDR
77548: LD_INT 1
77550: PUSH
77551: FOR_DOWNTO
77552: IFFALSE 77715
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77554: LD_EXP 111
77558: PUSH
77559: LD_VAR 0 6
77563: ARRAY
77564: PUSH
77565: LD_VAR 0 5
77569: ARRAY
77570: PUSH
77571: LD_INT 1
77573: ARRAY
77574: PPUSH
77575: LD_EXP 111
77579: PUSH
77580: LD_VAR 0 6
77584: ARRAY
77585: PUSH
77586: LD_VAR 0 5
77590: ARRAY
77591: PUSH
77592: LD_INT 2
77594: ARRAY
77595: PPUSH
77596: LD_VAR 0 2
77600: PPUSH
77601: LD_VAR 0 3
77605: PPUSH
77606: CALL_OW 298
77610: PUSH
77611: LD_INT 6
77613: LESS
77614: IFFALSE 77713
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77616: LD_EXP 111
77620: PUSH
77621: LD_VAR 0 6
77625: ARRAY
77626: PUSH
77627: LD_VAR 0 5
77631: ARRAY
77632: PUSH
77633: LD_INT 1
77635: ARRAY
77636: PPUSH
77637: LD_EXP 111
77641: PUSH
77642: LD_VAR 0 6
77646: ARRAY
77647: PUSH
77648: LD_VAR 0 5
77652: ARRAY
77653: PUSH
77654: LD_INT 2
77656: ARRAY
77657: PPUSH
77658: LD_VAR 0 1
77662: PPUSH
77663: CALL_OW 255
77667: PPUSH
77668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77672: LD_ADDR_EXP 111
77676: PUSH
77677: LD_EXP 111
77681: PPUSH
77682: LD_VAR 0 6
77686: PPUSH
77687: LD_EXP 111
77691: PUSH
77692: LD_VAR 0 6
77696: ARRAY
77697: PPUSH
77698: LD_VAR 0 5
77702: PPUSH
77703: CALL_OW 3
77707: PPUSH
77708: CALL_OW 1
77712: ST_TO_ADDR
// end ; end ;
77713: GO 77551
77715: POP
77716: POP
// end ;
77717: LD_VAR 0 4
77721: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77722: LD_INT 0
77724: PPUSH
77725: PPUSH
77726: PPUSH
77727: PPUSH
77728: PPUSH
77729: PPUSH
77730: PPUSH
77731: PPUSH
77732: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77733: LD_VAR 0 1
77737: PPUSH
77738: CALL_OW 264
77742: PUSH
77743: LD_INT 81
77745: EQUAL
77746: NOT
77747: PUSH
77748: LD_VAR 0 1
77752: PUSH
77753: LD_EXP 110
77757: IN
77758: NOT
77759: OR
77760: IFFALSE 77764
// exit ;
77762: GO 78086
// index := GetElementIndex ( minersList , unit ) ;
77764: LD_ADDR_VAR 0 6
77768: PUSH
77769: LD_EXP 110
77773: PPUSH
77774: LD_VAR 0 1
77778: PPUSH
77779: CALL 19770 0 2
77783: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77784: LD_ADDR_VAR 0 8
77788: PUSH
77789: LD_EXP 112
77793: PUSH
77794: LD_EXP 111
77798: PUSH
77799: LD_VAR 0 6
77803: ARRAY
77804: MINUS
77805: ST_TO_ADDR
// if not minesFreeAmount then
77806: LD_VAR 0 8
77810: NOT
77811: IFFALSE 77815
// exit ;
77813: GO 78086
// tmp := [ ] ;
77815: LD_ADDR_VAR 0 7
77819: PUSH
77820: EMPTY
77821: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77822: LD_ADDR_VAR 0 5
77826: PUSH
77827: DOUBLE
77828: LD_INT 1
77830: DEC
77831: ST_TO_ADDR
77832: LD_VAR 0 8
77836: PUSH
77837: FOR_TO
77838: IFFALSE 78033
// begin _d := rand ( 0 , 5 ) ;
77840: LD_ADDR_VAR 0 11
77844: PUSH
77845: LD_INT 0
77847: PPUSH
77848: LD_INT 5
77850: PPUSH
77851: CALL_OW 12
77855: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77856: LD_ADDR_VAR 0 12
77860: PUSH
77861: LD_INT 2
77863: PPUSH
77864: LD_INT 6
77866: PPUSH
77867: CALL_OW 12
77871: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77872: LD_ADDR_VAR 0 9
77876: PUSH
77877: LD_VAR 0 2
77881: PPUSH
77882: LD_VAR 0 11
77886: PPUSH
77887: LD_VAR 0 12
77891: PPUSH
77892: CALL_OW 272
77896: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77897: LD_ADDR_VAR 0 10
77901: PUSH
77902: LD_VAR 0 3
77906: PPUSH
77907: LD_VAR 0 11
77911: PPUSH
77912: LD_VAR 0 12
77916: PPUSH
77917: CALL_OW 273
77921: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
77922: LD_VAR 0 9
77926: PPUSH
77927: LD_VAR 0 10
77931: PPUSH
77932: CALL_OW 488
77936: PUSH
77937: LD_VAR 0 9
77941: PUSH
77942: LD_VAR 0 10
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: PUSH
77951: LD_VAR 0 7
77955: IN
77956: NOT
77957: AND
77958: PUSH
77959: LD_VAR 0 9
77963: PPUSH
77964: LD_VAR 0 10
77968: PPUSH
77969: CALL_OW 458
77973: NOT
77974: AND
77975: IFFALSE 78017
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
77977: LD_ADDR_VAR 0 7
77981: PUSH
77982: LD_VAR 0 7
77986: PPUSH
77987: LD_VAR 0 7
77991: PUSH
77992: LD_INT 1
77994: PLUS
77995: PPUSH
77996: LD_VAR 0 9
78000: PUSH
78001: LD_VAR 0 10
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PPUSH
78010: CALL_OW 1
78014: ST_TO_ADDR
78015: GO 78031
// i := i - 1 ;
78017: LD_ADDR_VAR 0 5
78021: PUSH
78022: LD_VAR 0 5
78026: PUSH
78027: LD_INT 1
78029: MINUS
78030: ST_TO_ADDR
// end ;
78031: GO 77837
78033: POP
78034: POP
// for i in tmp do
78035: LD_ADDR_VAR 0 5
78039: PUSH
78040: LD_VAR 0 7
78044: PUSH
78045: FOR_IN
78046: IFFALSE 78084
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78048: LD_VAR 0 1
78052: PPUSH
78053: LD_VAR 0 5
78057: PUSH
78058: LD_INT 1
78060: ARRAY
78061: PPUSH
78062: LD_VAR 0 5
78066: PUSH
78067: LD_INT 2
78069: ARRAY
78070: PPUSH
78071: CALL 77030 0 3
78075: NOT
78076: IFFALSE 78082
// exit ;
78078: POP
78079: POP
78080: GO 78086
78082: GO 78045
78084: POP
78085: POP
// end ;
78086: LD_VAR 0 4
78090: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78091: LD_INT 0
78093: PPUSH
78094: PPUSH
78095: PPUSH
78096: PPUSH
78097: PPUSH
78098: PPUSH
78099: PPUSH
// if not GetClass ( unit ) = class_sniper then
78100: LD_VAR 0 1
78104: PPUSH
78105: CALL_OW 257
78109: PUSH
78110: LD_INT 5
78112: EQUAL
78113: NOT
78114: IFFALSE 78118
// exit ;
78116: GO 78506
// dist := 8 ;
78118: LD_ADDR_VAR 0 5
78122: PUSH
78123: LD_INT 8
78125: ST_TO_ADDR
// viewRange := 12 ;
78126: LD_ADDR_VAR 0 7
78130: PUSH
78131: LD_INT 12
78133: ST_TO_ADDR
// side := GetSide ( unit ) ;
78134: LD_ADDR_VAR 0 6
78138: PUSH
78139: LD_VAR 0 1
78143: PPUSH
78144: CALL_OW 255
78148: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78149: LD_INT 61
78151: PPUSH
78152: LD_VAR 0 6
78156: PPUSH
78157: CALL_OW 321
78161: PUSH
78162: LD_INT 2
78164: EQUAL
78165: IFFALSE 78175
// viewRange := 16 ;
78167: LD_ADDR_VAR 0 7
78171: PUSH
78172: LD_INT 16
78174: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78175: LD_VAR 0 1
78179: PPUSH
78180: LD_VAR 0 2
78184: PPUSH
78185: LD_VAR 0 3
78189: PPUSH
78190: CALL_OW 297
78194: PUSH
78195: LD_VAR 0 5
78199: GREATER
78200: IFFALSE 78279
// begin ComMoveXY ( unit , x , y ) ;
78202: LD_VAR 0 1
78206: PPUSH
78207: LD_VAR 0 2
78211: PPUSH
78212: LD_VAR 0 3
78216: PPUSH
78217: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78221: LD_INT 35
78223: PPUSH
78224: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78228: LD_VAR 0 1
78232: PPUSH
78233: LD_VAR 0 2
78237: PPUSH
78238: LD_VAR 0 3
78242: PPUSH
78243: CALL 51511 0 3
78247: NOT
78248: IFFALSE 78252
// exit ;
78250: GO 78506
// until GetDistUnitXY ( unit , x , y ) < dist ;
78252: LD_VAR 0 1
78256: PPUSH
78257: LD_VAR 0 2
78261: PPUSH
78262: LD_VAR 0 3
78266: PPUSH
78267: CALL_OW 297
78271: PUSH
78272: LD_VAR 0 5
78276: LESS
78277: IFFALSE 78221
// end ; ComTurnXY ( unit , x , y ) ;
78279: LD_VAR 0 1
78283: PPUSH
78284: LD_VAR 0 2
78288: PPUSH
78289: LD_VAR 0 3
78293: PPUSH
78294: CALL_OW 118
// wait ( 5 ) ;
78298: LD_INT 5
78300: PPUSH
78301: CALL_OW 67
// _d := GetDir ( unit ) ;
78305: LD_ADDR_VAR 0 10
78309: PUSH
78310: LD_VAR 0 1
78314: PPUSH
78315: CALL_OW 254
78319: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78320: LD_ADDR_VAR 0 8
78324: PUSH
78325: LD_VAR 0 1
78329: PPUSH
78330: CALL_OW 250
78334: PPUSH
78335: LD_VAR 0 10
78339: PPUSH
78340: LD_VAR 0 5
78344: PPUSH
78345: CALL_OW 272
78349: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78350: LD_ADDR_VAR 0 9
78354: PUSH
78355: LD_VAR 0 1
78359: PPUSH
78360: CALL_OW 251
78364: PPUSH
78365: LD_VAR 0 10
78369: PPUSH
78370: LD_VAR 0 5
78374: PPUSH
78375: CALL_OW 273
78379: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78380: LD_VAR 0 8
78384: PPUSH
78385: LD_VAR 0 9
78389: PPUSH
78390: CALL_OW 488
78394: NOT
78395: IFFALSE 78399
// exit ;
78397: GO 78506
// ComAnimCustom ( unit , 1 ) ;
78399: LD_VAR 0 1
78403: PPUSH
78404: LD_INT 1
78406: PPUSH
78407: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78411: LD_VAR 0 8
78415: PPUSH
78416: LD_VAR 0 9
78420: PPUSH
78421: LD_VAR 0 6
78425: PPUSH
78426: LD_VAR 0 7
78430: PPUSH
78431: CALL_OW 330
// repeat wait ( 1 ) ;
78435: LD_INT 1
78437: PPUSH
78438: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78442: LD_VAR 0 1
78446: PPUSH
78447: CALL_OW 316
78451: PUSH
78452: LD_VAR 0 1
78456: PPUSH
78457: CALL_OW 314
78461: OR
78462: PUSH
78463: LD_VAR 0 1
78467: PPUSH
78468: CALL_OW 302
78472: NOT
78473: OR
78474: PUSH
78475: LD_VAR 0 1
78479: PPUSH
78480: CALL_OW 301
78484: OR
78485: IFFALSE 78435
// RemoveSeeing ( _x , _y , side ) ;
78487: LD_VAR 0 8
78491: PPUSH
78492: LD_VAR 0 9
78496: PPUSH
78497: LD_VAR 0 6
78501: PPUSH
78502: CALL_OW 331
// end ; end_of_file
78506: LD_VAR 0 4
78510: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78511: LD_VAR 0 1
78515: PPUSH
78516: LD_VAR 0 2
78520: PPUSH
78521: LD_VAR 0 3
78525: PPUSH
78526: LD_VAR 0 4
78530: PPUSH
78531: LD_VAR 0 5
78535: PPUSH
78536: LD_VAR 0 6
78540: PPUSH
78541: CALL 57970 0 6
// end ;
78545: PPOPN 6
78547: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78548: LD_INT 0
78550: PPUSH
// begin if not units then
78551: LD_VAR 0 1
78555: NOT
78556: IFFALSE 78560
// exit ;
78558: GO 78560
// end ;
78560: PPOPN 7
78562: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78563: CALL 57857 0 0
// end ; end_of_file
78567: PPOPN 1
78569: END
