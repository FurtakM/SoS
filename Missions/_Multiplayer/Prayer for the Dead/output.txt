// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 45 0 0
// InitTag ;
   8: CALL 237 0 0
// CreateNature ( natureArea ) ;
  12: LD_INT 2
  14: PPUSH
  15: CALL 649 0 1
// PrepareRussian ;
  19: CALL 2254 0 0
// PrepareArabian ;
  23: CALL 1242 0 0
// if debug then
  27: LD_EXP 1
  31: IFFALSE 40
// FogOff ( 2 ) ;
  33: LD_INT 2
  35: PPUSH
  36: CALL_OW 344
// Action ;
  40: CALL 5954 0 0
// end ;
  44: END
// export debug , prefix ; export ibrahimOnRuSide , ruEscapeAllowed , gameTime , loseCounter , flamethrowers , kaiaKilledByRussian , hannibalPath , ruEscapeCounter , baseHill , explodeFirstDepot , explodeSecondDepot , gaidarKilled , outerAreaAchived , earlyEscape , activeInvincible ; function Init ; begin
  45: LD_INT 0
  47: PPUSH
// debug := false ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// prefix := 04_1_ ;
  56: LD_ADDR_EXP 2
  60: PUSH
  61: LD_STRING 04_1_
  63: ST_TO_ADDR
// ibrahimOnRuSide := LoadVariable ( 03_IbrahimHasEscaped , false ) ;
  64: LD_ADDR_EXP 3
  68: PUSH
  69: LD_STRING 03_IbrahimHasEscaped
  71: PPUSH
  72: LD_INT 0
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// ruEscapeCounter := LoadVariable ( 04_1_EscapeCounter , 0 ) ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_STRING 04_1_EscapeCounter
  87: PPUSH
  88: LD_INT 0
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// loseCounter := LoadVariable ( 04_1_DeadCounter , 0 ) ;
  96: LD_ADDR_EXP 6
 100: PUSH
 101: LD_STRING 04_1_DeadCounter
 103: PPUSH
 104: LD_INT 0
 106: PPUSH
 107: CALL_OW 30
 111: ST_TO_ADDR
// baseHill := LoadVariable ( 04_1_BaseHill , false ) ;
 112: LD_ADDR_EXP 11
 116: PUSH
 117: LD_STRING 04_1_BaseHill
 119: PPUSH
 120: LD_INT 0
 122: PPUSH
 123: CALL_OW 30
 127: ST_TO_ADDR
// gameTime := LoadVariable ( 04_1_Time , 40 40$00 ) ;
 128: LD_ADDR_EXP 5
 132: PUSH
 133: LD_STRING 04_1_Time
 135: PPUSH
 136: LD_INT 84000
 138: PPUSH
 139: CALL_OW 30
 143: ST_TO_ADDR
// flamethrowers := LoadVariable ( 04_1_Flamethrower , 0 ) ;
 144: LD_ADDR_EXP 7
 148: PUSH
 149: LD_STRING 04_1_Flamethrower
 151: PPUSH
 152: LD_INT 0
 154: PPUSH
 155: CALL_OW 30
 159: ST_TO_ADDR
// ruEscapeAllowed := false ;
 160: LD_ADDR_EXP 4
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// explodeFirstDepot := false ;
 168: LD_ADDR_EXP 12
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// explodeSecondDepot := false ;
 176: LD_ADDR_EXP 13
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// gaidarKilled := false ;
 184: LD_ADDR_EXP 14
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 192: LD_ADDR_EXP 8
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// outerAreaAchived := false ;
 200: LD_ADDR_EXP 15
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// hannibalPath := false ;
 208: LD_ADDR_EXP 9
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// earlyEscape := false ;
 216: LD_ADDR_EXP 16
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// activeInvincible := true ;
 224: LD_ADDR_EXP 17
 228: PUSH
 229: LD_INT 1
 231: ST_TO_ADDR
// end ;
 232: LD_VAR 0 1
 236: RET
// export tEscape ; function InitTag ; begin
 237: LD_INT 0
 239: PPUSH
// tEscape := 10 ;
 240: LD_ADDR_EXP 18
 244: PUSH
 245: LD_INT 10
 247: ST_TO_ADDR
// end ;
 248: LD_VAR 0 1
 252: RET
// every 0 0$1 trigger debug do var i ;
 253: LD_EXP 1
 257: IFFALSE 341
 259: GO 261
 261: DISABLE
 262: LD_INT 0
 264: PPUSH
// begin enable ;
 265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_type , unit_building ] ] ] ) do
 266: LD_ADDR_VAR 0 1
 270: PUSH
 271: LD_INT 22
 273: PUSH
 274: LD_INT 2
 276: PUSH
 277: EMPTY
 278: LIST
 279: LIST
 280: PUSH
 281: LD_INT 3
 283: PUSH
 284: LD_INT 21
 286: PUSH
 287: LD_INT 3
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: EMPTY
 295: LIST
 296: LIST
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PPUSH
 302: CALL_OW 69
 306: PUSH
 307: FOR_IN
 308: IFFALSE 339
// if GetLives ( i ) < 1000 then
 310: LD_VAR 0 1
 314: PPUSH
 315: CALL_OW 256
 319: PUSH
 320: LD_INT 1000
 322: LESS
 323: IFFALSE 337
// SetLives ( i , 1000 ) ;
 325: LD_VAR 0 1
 329: PPUSH
 330: LD_INT 1000
 332: PPUSH
 333: CALL_OW 234
 337: GO 307
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 344: LD_INT 0
 346: PPUSH
// uc_side := side ;
 347: LD_ADDR_OWVAR 20
 351: PUSH
 352: LD_VAR 0 1
 356: ST_TO_ADDR
// uc_nation := nation ;
 357: LD_ADDR_OWVAR 21
 361: PUSH
 362: LD_VAR 0 2
 366: ST_TO_ADDR
// vc_chassis := chassis ;
 367: LD_ADDR_OWVAR 37
 371: PUSH
 372: LD_VAR 0 3
 376: ST_TO_ADDR
// vc_engine := engine ;
 377: LD_ADDR_OWVAR 39
 381: PUSH
 382: LD_VAR 0 4
 386: ST_TO_ADDR
// vc_control := control ;
 387: LD_ADDR_OWVAR 38
 391: PUSH
 392: LD_VAR 0 5
 396: ST_TO_ADDR
// vc_weapon := weapon ;
 397: LD_ADDR_OWVAR 40
 401: PUSH
 402: LD_VAR 0 6
 406: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 407: LD_ADDR_OWVAR 41
 411: PUSH
 412: LD_VAR 0 7
 416: ST_TO_ADDR
// result := CreateVehicle ;
 417: LD_ADDR_VAR 0 8
 421: PUSH
 422: CALL_OW 45
 426: ST_TO_ADDR
// end ;
 427: LD_VAR 0 8
 431: RET
// export function SayX ( units , ident ) ; var i ; begin
 432: LD_INT 0
 434: PPUSH
 435: PPUSH
// result := false ;
 436: LD_ADDR_VAR 0 3
 440: PUSH
 441: LD_INT 0
 443: ST_TO_ADDR
// if not units then
 444: LD_VAR 0 1
 448: NOT
 449: IFFALSE 453
// exit ;
 451: GO 507
// for i in units do
 453: LD_ADDR_VAR 0 4
 457: PUSH
 458: LD_VAR 0 1
 462: PUSH
 463: FOR_IN
 464: IFFALSE 505
// if IsOk ( i ) then
 466: LD_VAR 0 4
 470: PPUSH
 471: CALL_OW 302
 475: IFFALSE 503
// begin Say ( i , ident ) ;
 477: LD_VAR 0 4
 481: PPUSH
 482: LD_VAR 0 2
 486: PPUSH
 487: CALL_OW 88
// result := i ;
 491: LD_ADDR_VAR 0 3
 495: PUSH
 496: LD_VAR 0 4
 500: ST_TO_ADDR
// break ;
 501: GO 505
// end ;
 503: GO 463
 505: POP
 506: POP
// end ;
 507: LD_VAR 0 3
 511: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
// InitUc ;
 516: CALL_OW 18
// InitHc ;
 520: CALL_OW 19
// uc_side := 0 ;
 524: LD_ADDR_OWVAR 20
 528: PUSH
 529: LD_INT 0
 531: ST_TO_ADDR
// uc_nation := 0 ;
 532: LD_ADDR_OWVAR 21
 536: PUSH
 537: LD_INT 0
 539: ST_TO_ADDR
// for i = 1 to amount do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: DOUBLE
 546: LD_INT 1
 548: DEC
 549: ST_TO_ADDR
 550: LD_VAR 0 2
 554: PUSH
 555: FOR_TO
 556: IFFALSE 638
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 558: LD_ADDR_OWVAR 29
 562: PUSH
 563: LD_INT 9
 565: PPUSH
 566: LD_INT 12
 568: PPUSH
 569: CALL_OW 12
 573: PUSH
 574: LD_INT 9
 576: PPUSH
 577: LD_INT 12
 579: PPUSH
 580: CALL_OW 12
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
 589: LD_ADDR_OWVAR 35
 593: PUSH
 594: LD_INT 1
 596: NEG
 597: PPUSH
 598: LD_INT 1
 600: PPUSH
 601: CALL_OW 12
 605: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 606: LD_INT 0
 608: PPUSH
 609: LD_INT 12
 611: PPUSH
 612: LD_INT 1
 614: PPUSH
 615: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 619: CALL_OW 44
 623: PPUSH
 624: LD_VAR 0 1
 628: PPUSH
 629: LD_INT 0
 631: PPUSH
 632: CALL_OW 49
// end ;
 636: GO 555
 638: POP
 639: POP
// InitHc ;
 640: CALL_OW 19
// end ;
 644: LD_VAR 0 3
 648: RET
// export function CreateNature ( forest ) ; var i ; begin
 649: LD_INT 0
 651: PPUSH
 652: PPUSH
// SpawnApeman ( forest , [ 3 , 3 , 2 , 1 ] [ Difficulty ] ) ;
 653: LD_VAR 0 1
 657: PPUSH
 658: LD_INT 3
 660: PUSH
 661: LD_INT 3
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 1
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: LIST
 674: LIST
 675: PUSH
 676: LD_OWVAR 67
 680: ARRAY
 681: PPUSH
 682: CALL 512 0 2
// for i := 1 to 2 do
 686: LD_ADDR_VAR 0 3
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 2
 698: PUSH
 699: FOR_TO
 700: IFFALSE 737
// begin hc_class := 21 ;
 702: LD_ADDR_OWVAR 28
 706: PUSH
 707: LD_INT 21
 709: ST_TO_ADDR
// hc_gallery :=  ;
 710: LD_ADDR_OWVAR 33
 714: PUSH
 715: LD_STRING 
 717: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 718: CALL_OW 44
 722: PPUSH
 723: LD_VAR 0 1
 727: PPUSH
 728: LD_INT 0
 730: PPUSH
 731: CALL_OW 49
// end ;
 735: GO 699
 737: POP
 738: POP
// for i := 1 to 2 do
 739: LD_ADDR_VAR 0 3
 743: PUSH
 744: DOUBLE
 745: LD_INT 1
 747: DEC
 748: ST_TO_ADDR
 749: LD_INT 2
 751: PUSH
 752: FOR_TO
 753: IFFALSE 790
// begin hc_class := 18 ;
 755: LD_ADDR_OWVAR 28
 759: PUSH
 760: LD_INT 18
 762: ST_TO_ADDR
// hc_gallery :=  ;
 763: LD_ADDR_OWVAR 33
 767: PUSH
 768: LD_STRING 
 770: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 771: CALL_OW 44
 775: PPUSH
 776: LD_VAR 0 1
 780: PPUSH
 781: LD_INT 0
 783: PPUSH
 784: CALL_OW 49
// end ;
 788: GO 752
 790: POP
 791: POP
// for i := 1 to 2 do
 792: LD_ADDR_VAR 0 3
 796: PUSH
 797: DOUBLE
 798: LD_INT 1
 800: DEC
 801: ST_TO_ADDR
 802: LD_INT 2
 804: PUSH
 805: FOR_TO
 806: IFFALSE 843
// begin hc_class := 13 ;
 808: LD_ADDR_OWVAR 28
 812: PUSH
 813: LD_INT 13
 815: ST_TO_ADDR
// hc_gallery :=  ;
 816: LD_ADDR_OWVAR 33
 820: PUSH
 821: LD_STRING 
 823: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 824: CALL_OW 44
 828: PPUSH
 829: LD_VAR 0 1
 833: PPUSH
 834: LD_INT 0
 836: PPUSH
 837: CALL_OW 49
// end ;
 841: GO 805
 843: POP
 844: POP
// end ;
 845: LD_VAR 0 2
 849: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
 854: PPUSH
// if not observer or not unit then
 855: LD_VAR 0 1
 859: NOT
 860: PUSH
 861: LD_VAR 0 2
 865: NOT
 866: OR
 867: IFFALSE 871
// exit ;
 869: GO 919
// if not See ( GetSide ( observer ) , unit ) then
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: PPUSH
 881: LD_VAR 0 2
 885: PPUSH
 886: CALL_OW 292
 890: NOT
 891: IFFALSE 895
// exit ;
 893: GO 919
// result := GetDistUnits ( observer , unit ) < 12 ;
 895: LD_ADDR_VAR 0 3
 899: PUSH
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_VAR 0 2
 909: PPUSH
 910: CALL_OW 296
 914: PUSH
 915: LD_INT 12
 917: LESS
 918: ST_TO_ADDR
// end ;
 919: LD_VAR 0 3
 923: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 924: LD_INT 0
 926: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 927: LD_VAR 0 2
 931: PUSH
 932: LD_INT 1
 934: ARRAY
 935: PPUSH
 936: LD_VAR 0 2
 940: PUSH
 941: LD_INT 2
 943: ARRAY
 944: PPUSH
 945: CALL_OW 488
 949: PUSH
 950: LD_VAR 0 2
 954: PUSH
 955: LD_INT 1
 957: ARRAY
 958: PPUSH
 959: LD_VAR 0 2
 963: PUSH
 964: LD_INT 2
 966: ARRAY
 967: PPUSH
 968: CALL_OW 428
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 1011
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 979: LD_VAR 0 1
 983: PPUSH
 984: LD_VAR 0 2
 988: PUSH
 989: LD_INT 1
 991: ARRAY
 992: PPUSH
 993: LD_VAR 0 2
 997: PUSH
 998: LD_INT 2
1000: ARRAY
1001: PPUSH
1002: LD_VAR 0 3
1006: PPUSH
1007: CALL_OW 48
// end ;
1011: LD_VAR 0 4
1015: RET
// export function NearestEmptyBuilding ( unit , btype ) ; var side , tmp , i , places ; begin
1016: LD_INT 0
1018: PPUSH
1019: PPUSH
1020: PPUSH
1021: PPUSH
1022: PPUSH
// if not unit then
1023: LD_VAR 0 1
1027: NOT
1028: IFFALSE 1032
// exit ;
1030: GO 1237
// side := GetSide ( unit ) ;
1032: LD_ADDR_VAR 0 4
1036: PUSH
1037: LD_VAR 0 1
1041: PPUSH
1042: CALL_OW 255
1046: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , btype ] ] ) ;
1047: LD_ADDR_VAR 0 5
1051: PUSH
1052: LD_INT 22
1054: PUSH
1055: LD_VAR 0 4
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PUSH
1064: LD_INT 30
1066: PUSH
1067: LD_VAR 0 2
1071: PUSH
1072: EMPTY
1073: LIST
1074: LIST
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: ST_TO_ADDR
// if not tmp then
1085: LD_VAR 0 5
1089: NOT
1090: IFFALSE 1094
// exit ;
1092: GO 1237
// tmp := SortByDistanceUnit ( unit , tmp , true , true ) ;
1094: LD_ADDR_VAR 0 5
1098: PUSH
1099: LD_VAR 0 1
1103: PPUSH
1104: LD_VAR 0 5
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: CALL 36729 0 4
1119: ST_TO_ADDR
// places := 1 ;
1120: LD_ADDR_VAR 0 7
1124: PUSH
1125: LD_INT 1
1127: ST_TO_ADDR
// if btype in [ b_depot , b_warehouse , b_armoury , b_barracks , b_workshop , b_factory , b_lab , b_lab_half , b_lab_full ] then
1128: LD_VAR 0 2
1132: PUSH
1133: LD_INT 0
1135: PUSH
1136: LD_INT 1
1138: PUSH
1139: LD_INT 4
1141: PUSH
1142: LD_INT 5
1144: PUSH
1145: LD_INT 2
1147: PUSH
1148: LD_INT 3
1150: PUSH
1151: LD_INT 6
1153: PUSH
1154: LD_INT 7
1156: PUSH
1157: LD_INT 8
1159: PUSH
1160: EMPTY
1161: LIST
1162: LIST
1163: LIST
1164: LIST
1165: LIST
1166: LIST
1167: LIST
1168: LIST
1169: LIST
1170: IN
1171: IFFALSE 1181
// places := 6 ;
1173: LD_ADDR_VAR 0 7
1177: PUSH
1178: LD_INT 6
1180: ST_TO_ADDR
// for i in tmp do
1181: LD_ADDR_VAR 0 6
1185: PUSH
1186: LD_VAR 0 5
1190: PUSH
1191: FOR_IN
1192: IFFALSE 1235
// begin if UnitsInside ( i ) - places <= 0 then
1194: LD_VAR 0 6
1198: PPUSH
1199: CALL_OW 313
1203: PUSH
1204: LD_VAR 0 7
1208: MINUS
1209: PUSH
1210: LD_INT 0
1212: LESSEQUAL
1213: IFFALSE 1219
// continue else
1215: GO 1191
1217: GO 1233
// begin result := i ;
1219: LD_ADDR_VAR 0 3
1223: PUSH
1224: LD_VAR 0 6
1228: ST_TO_ADDR
// exit ;
1229: POP
1230: POP
1231: GO 1237
// end ; end ;
1233: GO 1191
1235: POP
1236: POP
// end ; end_of_file
1237: LD_VAR 0 3
1241: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Shariff , Kurt , Aviradze , heikeSecondSquad , heikeVehicles , heikeApes ; export function PrepareArabian ; var i ; begin
1242: LD_INT 0
1244: PPUSH
1245: PPUSH
// uc_side := 2 ;
1246: LD_ADDR_OWVAR 20
1250: PUSH
1251: LD_INT 2
1253: ST_TO_ADDR
// uc_nation := 2 ;
1254: LD_ADDR_OWVAR 21
1258: PUSH
1259: LD_INT 2
1261: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
1262: LD_ADDR_EXP 19
1266: PUSH
1267: LD_STRING Heike
1269: PPUSH
1270: LD_EXP 1
1274: NOT
1275: PPUSH
1276: LD_EXP 2
1280: PPUSH
1281: CALL 31332 0 3
1285: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
1286: LD_ADDR_EXP 22
1290: PUSH
1291: LD_STRING Ibrahim
1293: PPUSH
1294: LD_EXP 1
1298: NOT
1299: PPUSH
1300: LD_EXP 2
1304: PPUSH
1305: CALL 31332 0 3
1309: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
1310: LD_ADDR_EXP 20
1314: PUSH
1315: LD_STRING Givi
1317: PPUSH
1318: LD_EXP 1
1322: NOT
1323: PPUSH
1324: LD_EXP 2
1328: PPUSH
1329: CALL 31332 0 3
1333: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
1334: LD_ADDR_EXP 23
1338: PUSH
1339: LD_STRING Kamil
1341: PPUSH
1342: LD_EXP 1
1346: NOT
1347: PPUSH
1348: LD_EXP 2
1352: PPUSH
1353: CALL 31332 0 3
1357: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
1358: LD_ADDR_EXP 24
1362: PUSH
1363: LD_STRING Kaia
1365: PPUSH
1366: LD_EXP 1
1370: NOT
1371: PPUSH
1372: LD_EXP 2
1376: PPUSH
1377: CALL 31332 0 3
1381: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
1382: LD_ADDR_EXP 25
1386: PUSH
1387: LD_STRING Sophia
1389: PPUSH
1390: LD_EXP 1
1394: NOT
1395: PPUSH
1396: LD_EXP 2
1400: PPUSH
1401: CALL 31332 0 3
1405: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
1406: LD_ADDR_EXP 26
1410: PUSH
1411: LD_STRING Markov
1413: PPUSH
1414: LD_EXP 1
1418: NOT
1419: PPUSH
1420: LD_EXP 2
1424: PPUSH
1425: CALL 31332 0 3
1429: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
1430: LD_ADDR_EXP 29
1434: PUSH
1435: LD_STRING Aviradze
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 2
1448: PPUSH
1449: CALL 31332 0 3
1453: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
1454: LD_ADDR_EXP 28
1458: PUSH
1459: LD_STRING Kurt
1461: PPUSH
1462: LD_EXP 1
1466: NOT
1467: PPUSH
1468: LD_EXP 2
1472: PPUSH
1473: CALL 31332 0 3
1477: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
1478: LD_ADDR_EXP 21
1482: PUSH
1483: LD_STRING Mike
1485: PPUSH
1486: LD_EXP 1
1490: NOT
1491: PPUSH
1492: LD_EXP 2
1496: PPUSH
1497: CALL 31332 0 3
1501: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 04_1_others ) ;
1502: LD_ADDR_EXP 30
1506: PUSH
1507: LD_STRING 04_1_others
1509: PPUSH
1510: CALL_OW 31
1514: ST_TO_ADDR
// heikeApes := CreateCharacterSet ( 04_1_apes ) ;
1515: LD_ADDR_EXP 32
1519: PUSH
1520: LD_STRING 04_1_apes
1522: PPUSH
1523: CALL_OW 31
1527: ST_TO_ADDR
// heikeVehicles := LoadVariable ( 04_1_Vehicles , [ ] ) ;
1528: LD_ADDR_EXP 31
1532: PUSH
1533: LD_STRING 04_1_Vehicles
1535: PPUSH
1536: EMPTY
1537: PPUSH
1538: CALL_OW 30
1542: ST_TO_ADDR
// if debug then
1543: LD_EXP 1
1547: IFFALSE 1766
// heikeVehicles := [ [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 2 , 1000 , [ 0 , 0 ] , 3 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun , 2 , 1000 , [ 0 , 0 ] , 1 ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_big_cargo_bay , 3 , 1000 , [ 40 , 40 ] , 1 ] ] ;
1549: LD_ADDR_EXP 31
1553: PUSH
1554: LD_INT 13
1556: PUSH
1557: LD_INT 1
1559: PUSH
1560: LD_INT 1
1562: PUSH
1563: LD_INT 27
1565: PUSH
1566: LD_INT 2
1568: PUSH
1569: LD_INT 1000
1571: PUSH
1572: LD_INT 0
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 3
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: LIST
1594: PUSH
1595: LD_INT 13
1597: PUSH
1598: LD_INT 1
1600: PUSH
1601: LD_INT 1
1603: PUSH
1604: LD_INT 25
1606: PUSH
1607: LD_INT 2
1609: PUSH
1610: LD_INT 1000
1612: PUSH
1613: LD_INT 0
1615: PUSH
1616: LD_INT 0
1618: PUSH
1619: EMPTY
1620: LIST
1621: LIST
1622: PUSH
1623: LD_INT 3
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 13
1638: PUSH
1639: LD_INT 1
1641: PUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 27
1647: PUSH
1648: LD_INT 2
1650: PUSH
1651: LD_INT 1000
1653: PUSH
1654: LD_INT 0
1656: PUSH
1657: LD_INT 0
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: PUSH
1664: LD_INT 1
1666: PUSH
1667: EMPTY
1668: LIST
1669: LIST
1670: LIST
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 13
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: LD_INT 1
1685: PUSH
1686: LD_INT 27
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1000
1694: PUSH
1695: LD_INT 0
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PUSH
1705: LD_INT 1
1707: PUSH
1708: EMPTY
1709: LIST
1710: LIST
1711: LIST
1712: LIST
1713: LIST
1714: LIST
1715: LIST
1716: LIST
1717: PUSH
1718: LD_INT 23
1720: PUSH
1721: LD_INT 1
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: LD_INT 89
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: LD_INT 1000
1735: PUSH
1736: LD_INT 40
1738: PUSH
1739: LD_INT 40
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: PUSH
1746: LD_INT 1
1748: PUSH
1749: EMPTY
1750: LIST
1751: LIST
1752: LIST
1753: LIST
1754: LIST
1755: LIST
1756: LIST
1757: LIST
1758: PUSH
1759: EMPTY
1760: LIST
1761: LIST
1762: LIST
1763: LIST
1764: LIST
1765: ST_TO_ADDR
// uc_side := 5 ;
1766: LD_ADDR_OWVAR 20
1770: PUSH
1771: LD_INT 5
1773: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
1774: LD_ADDR_EXP 27
1778: PUSH
1779: LD_STRING Abdul
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: LD_STRING 
1787: PPUSH
1788: CALL 31332 0 3
1792: ST_TO_ADDR
// end ;
1793: LD_VAR 0 1
1797: RET
// export cargoDriver , cargoCounter ; every 2 2$00 trigger LoadVariable ( 04_1_KaganCaptured , debug ) and not FilterAllUnits ( [ f_side , 5 ] ) and ( HexInfo ( 124 , 26 ) = 0 xor GetSide ( HexInfo ( 124 , 26 ) ) = 2 ) do var veh , tmp ;
1798: LD_STRING 04_1_KaganCaptured
1800: PPUSH
1801: LD_EXP 1
1805: PPUSH
1806: CALL_OW 30
1810: PUSH
1811: LD_INT 22
1813: PUSH
1814: LD_INT 5
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PPUSH
1821: CALL_OW 69
1825: NOT
1826: AND
1827: PUSH
1828: LD_INT 124
1830: PPUSH
1831: LD_INT 26
1833: PPUSH
1834: CALL_OW 428
1838: PUSH
1839: LD_INT 0
1841: EQUAL
1842: PUSH
1843: LD_INT 124
1845: PPUSH
1846: LD_INT 26
1848: PPUSH
1849: CALL_OW 428
1853: PPUSH
1854: CALL_OW 255
1858: PUSH
1859: LD_INT 2
1861: EQUAL
1862: XOR
1863: AND
1864: IFFALSE 2251
1866: GO 1868
1868: DISABLE
1869: LD_INT 0
1871: PPUSH
1872: PPUSH
// begin enable ;
1873: ENABLE
// if not cargoCounter or cargoCounter > 4 then
1874: LD_EXP 34
1878: NOT
1879: PUSH
1880: LD_EXP 34
1884: PUSH
1885: LD_INT 4
1887: GREATER
1888: OR
1889: IFFALSE 1899
// cargoCounter := 1 ;
1891: LD_ADDR_EXP 34
1895: PUSH
1896: LD_INT 1
1898: ST_TO_ADDR
// tmp := [ [ 142 , 15 ] , [ 129 , 11 ] , [ 138 , 9 ] , [ 133 , 10 ] ] ;
1899: LD_ADDR_VAR 0 2
1903: PUSH
1904: LD_INT 142
1906: PUSH
1907: LD_INT 15
1909: PUSH
1910: EMPTY
1911: LIST
1912: LIST
1913: PUSH
1914: LD_INT 129
1916: PUSH
1917: LD_INT 11
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: PUSH
1924: LD_INT 138
1926: PUSH
1927: LD_INT 9
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: PUSH
1934: LD_INT 133
1936: PUSH
1937: LD_INT 10
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// uc_side := 5 ;
1950: LD_ADDR_OWVAR 20
1954: PUSH
1955: LD_INT 5
1957: ST_TO_ADDR
// uc_nation := 2 ;
1958: LD_ADDR_OWVAR 21
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// PrepareTank ( 5 , 2 , ar_medium_trike , engine_solar , control_manual , ar_cargo_bay , 70 ) ;
1966: LD_INT 5
1968: PPUSH
1969: LD_INT 2
1971: PPUSH
1972: LD_INT 13
1974: PPUSH
1975: LD_INT 2
1977: PPUSH
1978: LD_INT 1
1980: PPUSH
1981: LD_INT 32
1983: PPUSH
1984: LD_INT 70
1986: PPUSH
1987: CALL 344 0 7
// veh := CreateVehicle ;
1991: LD_ADDR_VAR 0 1
1995: PUSH
1996: CALL_OW 45
2000: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2001: LD_VAR 0 1
2005: PPUSH
2006: LD_INT 3
2008: PPUSH
2009: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
2013: LD_VAR 0 1
2017: PPUSH
2018: LD_INT 8
2020: PPUSH
2021: LD_INT 0
2023: PPUSH
2024: CALL_OW 49
// if not cargoDriver then
2028: LD_EXP 33
2032: NOT
2033: IFFALSE 2058
// begin PrepareHuman ( false , 1 , 3 ) ;
2035: LD_INT 0
2037: PPUSH
2038: LD_INT 1
2040: PPUSH
2041: LD_INT 3
2043: PPUSH
2044: CALL_OW 380
// cargoDriver := CreateHuman ;
2048: LD_ADDR_EXP 33
2052: PUSH
2053: CALL_OW 44
2057: ST_TO_ADDR
// end ; PlaceHumanInUnit ( cargoDriver , veh ) ;
2058: LD_EXP 33
2062: PPUSH
2063: LD_VAR 0 1
2067: PPUSH
2068: CALL_OW 52
// SetCargo ( veh , mat_oil , 100 ) ;
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 2
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 290
// ComMoveXY ( veh , tmp [ cargoCounter ] [ 1 ] , tmp [ cargoCounter ] [ 2 ] ) ;
2087: LD_VAR 0 1
2091: PPUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_EXP 34
2101: ARRAY
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_VAR 0 2
2111: PUSH
2112: LD_EXP 34
2116: ARRAY
2117: PUSH
2118: LD_INT 2
2120: ARRAY
2121: PPUSH
2122: CALL_OW 111
// AddComUnload ( veh ) ;
2126: LD_VAR 0 1
2130: PPUSH
2131: CALL_OW 219
// AddComMoveXY ( veh , 133 , 2 ) ;
2135: LD_VAR 0 1
2139: PPUSH
2140: LD_INT 133
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 171
// wait ( 0 0$5 ) ;
2150: LD_INT 175
2152: PPUSH
2153: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2157: LD_INT 35
2159: PPUSH
2160: CALL_OW 67
// if not HasTask ( veh ) then
2164: LD_VAR 0 1
2168: PPUSH
2169: CALL_OW 314
2173: NOT
2174: IFFALSE 2191
// ComMoveXY ( veh , 133 , 2 ) ;
2176: LD_VAR 0 1
2180: PPUSH
2181: LD_INT 133
2183: PPUSH
2184: LD_INT 2
2186: PPUSH
2187: CALL_OW 111
// until IsAt ( veh , 133 , 2 ) or IsInArea ( veh , spawnArea ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_INT 133
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 307
2206: PUSH
2207: LD_VAR 0 1
2211: PPUSH
2212: LD_INT 8
2214: PPUSH
2215: CALL_OW 308
2219: OR
2220: IFFALSE 2157
// RemoveUnit ( cargoDriver ) ;
2222: LD_EXP 33
2226: PPUSH
2227: CALL_OW 64
// RemoveUnit ( veh ) ;
2231: LD_VAR 0 1
2235: PPUSH
2236: CALL_OW 64
// if tick >= 20 20$00 then
2240: LD_OWVAR 1
2244: PUSH
2245: LD_INT 42000
2247: GREATEREQUAL
2248: IFFALSE 2251
// disable ;
2250: DISABLE
// end ; end_of_file
2251: PPOPN 2
2253: END
// export Burlak , Gaidar , Kuzmov ; export ruForce , ruEng , ruMech , ruSci , ruMobile ; export ruSol ; export function PrepareRussian ; var base , blist , i , b , un , tmp , fac , oil ; begin
2254: LD_INT 0
2256: PPUSH
2257: PPUSH
2258: PPUSH
2259: PPUSH
2260: PPUSH
2261: PPUSH
2262: PPUSH
2263: PPUSH
2264: PPUSH
// uc_side := 3 ;
2265: LD_ADDR_OWVAR 20
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// uc_nation := 3 ;
2273: LD_ADDR_OWVAR 21
2277: PUSH
2278: LD_INT 3
2280: ST_TO_ADDR
// ruForce := [ ] ;
2281: LD_ADDR_EXP 38
2285: PUSH
2286: EMPTY
2287: ST_TO_ADDR
// ruMech := [ ] ;
2288: LD_ADDR_EXP 40
2292: PUSH
2293: EMPTY
2294: ST_TO_ADDR
// ruEng := [ ] ;
2295: LD_ADDR_EXP 39
2299: PUSH
2300: EMPTY
2301: ST_TO_ADDR
// ruSci := [ ] ;
2302: LD_ADDR_EXP 41
2306: PUSH
2307: EMPTY
2308: ST_TO_ADDR
// ruMobile := [ ] ;
2309: LD_ADDR_EXP 42
2313: PUSH
2314: EMPTY
2315: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
2316: LD_ADDR_EXP 35
2320: PUSH
2321: LD_STRING Burlak
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: LD_STRING 
2329: PPUSH
2330: CALL 31332 0 3
2334: ST_TO_ADDR
// Gaidar := PrepareUnit ( Gaydar , false ,  ) ;
2335: LD_ADDR_EXP 36
2339: PUSH
2340: LD_STRING Gaydar
2342: PPUSH
2343: LD_INT 0
2345: PPUSH
2346: LD_STRING 
2348: PPUSH
2349: CALL 31332 0 3
2353: ST_TO_ADDR
// Kuzmov := PrepareUnit ( Kuzmov , false ,  ) ;
2354: LD_ADDR_EXP 37
2358: PUSH
2359: LD_STRING Kuzmov
2361: PPUSH
2362: LD_INT 0
2364: PPUSH
2365: LD_STRING 
2367: PPUSH
2368: CALL 31332 0 3
2372: ST_TO_ADDR
// PlaceHumanInUnit ( Kuzmov , ruMainBase ) ;
2373: LD_EXP 37
2377: PPUSH
2378: LD_INT 200
2380: PPUSH
2381: CALL_OW 52
// SetBName ( ruMainBase , chuikov ) ;
2385: LD_INT 200
2387: PPUSH
2388: LD_STRING chuikov
2390: PPUSH
2391: CALL_OW 500
// SetResourceType ( GetBase ( ruMainBase ) , mat_cans , [ 800 , 1000 , 1250 , 1300 ] [ Difficulty ] ) ;
2395: LD_INT 200
2397: PPUSH
2398: CALL_OW 274
2402: PPUSH
2403: LD_INT 1
2405: PPUSH
2406: LD_INT 800
2408: PUSH
2409: LD_INT 1000
2411: PUSH
2412: LD_INT 1250
2414: PUSH
2415: LD_INT 1300
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: LIST
2422: LIST
2423: PUSH
2424: LD_OWVAR 67
2428: ARRAY
2429: PPUSH
2430: CALL_OW 277
// SetResourceType ( GetBase ( ruMainBase ) , mat_oil , 160 ) ;
2434: LD_INT 200
2436: PPUSH
2437: CALL_OW 274
2441: PPUSH
2442: LD_INT 2
2444: PPUSH
2445: LD_INT 160
2447: PPUSH
2448: CALL_OW 277
// SetResourceType ( GetBase ( ruSecBase ) , mat_cans , 200 ) ;
2452: LD_INT 225
2454: PPUSH
2455: CALL_OW 274
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 200
2465: PPUSH
2466: CALL_OW 277
// oil := 150 ;
2470: LD_ADDR_VAR 0 9
2474: PUSH
2475: LD_INT 150
2477: ST_TO_ADDR
// if gameTime >= [ 45 45$00 , 40 40$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] then
2478: LD_EXP 5
2482: PUSH
2483: LD_INT 94500
2485: PUSH
2486: LD_INT 84000
2488: PUSH
2489: LD_INT 73500
2491: PUSH
2492: LD_INT 67200
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: PUSH
2501: LD_OWVAR 67
2505: ARRAY
2506: GREATEREQUAL
2507: IFFALSE 2662
// begin oil := 450 ;
2509: LD_ADDR_VAR 0 9
2513: PUSH
2514: LD_INT 450
2516: ST_TO_ADDR
// tmp := [ [ 123 , 17 , 3 , b_breastwork ] , [ 152 , 38 , 3 , b_breastwork ] , [ 81 , 6 , 4 , b_breastwork ] , [ 113 , 67 , 4 , b_bunker ] ] ;
2517: LD_ADDR_VAR 0 7
2521: PUSH
2522: LD_INT 123
2524: PUSH
2525: LD_INT 17
2527: PUSH
2528: LD_INT 3
2530: PUSH
2531: LD_INT 31
2533: PUSH
2534: EMPTY
2535: LIST
2536: LIST
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 152
2542: PUSH
2543: LD_INT 38
2545: PUSH
2546: LD_INT 3
2548: PUSH
2549: LD_INT 31
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: LD_INT 81
2560: PUSH
2561: LD_INT 6
2563: PUSH
2564: LD_INT 4
2566: PUSH
2567: LD_INT 31
2569: PUSH
2570: EMPTY
2571: LIST
2572: LIST
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 113
2578: PUSH
2579: LD_INT 67
2581: PUSH
2582: LD_INT 4
2584: PUSH
2585: LD_INT 32
2587: PUSH
2588: EMPTY
2589: LIST
2590: LIST
2591: LIST
2592: LIST
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: LIST
2598: LIST
2599: ST_TO_ADDR
// for i in tmp do
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_VAR 0 7
2609: PUSH
2610: FOR_IN
2611: IFFALSE 2660
// begin bc_type := i [ 4 ] ;
2613: LD_ADDR_OWVAR 42
2617: PUSH
2618: LD_VAR 0 4
2622: PUSH
2623: LD_INT 4
2625: ARRAY
2626: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2627: LD_VAR 0 4
2631: PUSH
2632: LD_INT 1
2634: ARRAY
2635: PPUSH
2636: LD_VAR 0 4
2640: PUSH
2641: LD_INT 2
2643: ARRAY
2644: PPUSH
2645: LD_VAR 0 4
2649: PUSH
2650: LD_INT 3
2652: ARRAY
2653: PPUSH
2654: CALL_OW 47
// end ;
2658: GO 2610
2660: POP
2661: POP
// end ; SetResourceType ( GetBase ( ruSecBase ) , mat_oil , oil ) ;
2662: LD_INT 225
2664: PPUSH
2665: CALL_OW 274
2669: PPUSH
2670: LD_INT 2
2672: PPUSH
2673: LD_VAR 0 9
2677: PPUSH
2678: CALL_OW 277
// if Difficulty > 1 then
2682: LD_OWVAR 67
2686: PUSH
2687: LD_INT 1
2689: GREATER
2690: IFFALSE 2785
// begin bc_type := b_bunker ;
2692: LD_ADDR_OWVAR 42
2696: PUSH
2697: LD_INT 32
2699: ST_TO_ADDR
// tmp := [ [ 121 , 85 , 5 ] , [ 93 , 72 , 1 ] ] ;
2700: LD_ADDR_VAR 0 7
2704: PUSH
2705: LD_INT 121
2707: PUSH
2708: LD_INT 85
2710: PUSH
2711: LD_INT 5
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PUSH
2719: LD_INT 93
2721: PUSH
2722: LD_INT 72
2724: PUSH
2725: LD_INT 1
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: LIST
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: ST_TO_ADDR
// for i in tmp do
2737: LD_ADDR_VAR 0 4
2741: PUSH
2742: LD_VAR 0 7
2746: PUSH
2747: FOR_IN
2748: IFFALSE 2783
// CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
2750: LD_VAR 0 4
2754: PUSH
2755: LD_INT 1
2757: ARRAY
2758: PPUSH
2759: LD_VAR 0 4
2763: PUSH
2764: LD_INT 2
2766: ARRAY
2767: PPUSH
2768: LD_VAR 0 4
2772: PUSH
2773: LD_INT 3
2775: ARRAY
2776: PPUSH
2777: CALL_OW 47
2781: GO 2747
2783: POP
2784: POP
// end ; base := GetBase ( ruMainBase ) ;
2785: LD_ADDR_VAR 0 2
2789: PUSH
2790: LD_INT 200
2792: PPUSH
2793: CALL_OW 274
2797: ST_TO_ADDR
// blist := GetBuildList ( base ) ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: LD_VAR 0 2
2807: PPUSH
2808: CALL_OW 417
2812: ST_TO_ADDR
// for b in blist do
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: FOR_IN
2824: IFFALSE 3275
// begin if b [ 1 ] = b_factory then
2826: LD_VAR 0 5
2830: PUSH
2831: LD_INT 1
2833: ARRAY
2834: PUSH
2835: LD_INT 3
2837: EQUAL
2838: IFFALSE 2989
// begin fac := HexInfo ( b [ 2 ] , b [ 3 ] ) ;
2840: LD_ADDR_VAR 0 8
2844: PUSH
2845: LD_VAR 0 5
2849: PUSH
2850: LD_INT 2
2852: ARRAY
2853: PPUSH
2854: LD_VAR 0 5
2858: PUSH
2859: LD_INT 3
2861: ARRAY
2862: PPUSH
2863: CALL_OW 428
2867: ST_TO_ADDR
// for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
2868: LD_ADDR_VAR 0 4
2872: PUSH
2873: DOUBLE
2874: LD_INT 1
2876: DEC
2877: ST_TO_ADDR
2878: LD_INT 2
2880: PUSH
2881: LD_INT 2
2883: PUSH
2884: LD_OWVAR 67
2888: PLUS
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PUSH
2894: LD_EXP 10
2898: PUSH
2899: LD_INT 3
2901: GREATER
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: ARRAY
2907: PUSH
2908: FOR_TO
2909: IFFALSE 2985
// begin PrepareHuman ( false , 3 , 1 + Difficulty ) ;
2911: LD_INT 0
2913: PPUSH
2914: LD_INT 3
2916: PPUSH
2917: LD_INT 1
2919: PUSH
2920: LD_OWVAR 67
2924: PLUS
2925: PPUSH
2926: CALL_OW 380
// un := CreateHuman ;
2930: LD_ADDR_VAR 0 6
2934: PUSH
2935: CALL_OW 44
2939: ST_TO_ADDR
// ruMech := Replace ( ruMech , ruMech + 1 , un ) ;
2940: LD_ADDR_EXP 40
2944: PUSH
2945: LD_EXP 40
2949: PPUSH
2950: LD_EXP 40
2954: PUSH
2955: LD_INT 1
2957: PLUS
2958: PPUSH
2959: LD_VAR 0 6
2963: PPUSH
2964: CALL_OW 1
2968: ST_TO_ADDR
// PlaceHumanInUnit ( un , fac ) ;
2969: LD_VAR 0 6
2973: PPUSH
2974: LD_VAR 0 8
2978: PPUSH
2979: CALL_OW 52
// end ;
2983: GO 2908
2985: POP
2986: POP
// end else
2987: GO 3273
// if b [ 1 ] in [ b_lab , b_lab_half , b_lab_full , b_lab_weapon ] then
2989: LD_VAR 0 5
2993: PUSH
2994: LD_INT 1
2996: ARRAY
2997: PUSH
2998: LD_INT 6
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_INT 8
3006: PUSH
3007: LD_INT 10
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: LIST
3014: LIST
3015: IN
3016: IFFALSE 3126
// begin for i := 1 to 2 do
3018: LD_ADDR_VAR 0 4
3022: PUSH
3023: DOUBLE
3024: LD_INT 1
3026: DEC
3027: ST_TO_ADDR
3028: LD_INT 2
3030: PUSH
3031: FOR_TO
3032: IFFALSE 3122
// begin PrepareHuman ( false , 4 , Difficulty ) ;
3034: LD_INT 0
3036: PPUSH
3037: LD_INT 4
3039: PPUSH
3040: LD_OWVAR 67
3044: PPUSH
3045: CALL_OW 380
// un := CreateHuman ;
3049: LD_ADDR_VAR 0 6
3053: PUSH
3054: CALL_OW 44
3058: ST_TO_ADDR
// ruSci := Replace ( ruSci , ruSci + 1 , un ) ;
3059: LD_ADDR_EXP 41
3063: PUSH
3064: LD_EXP 41
3068: PPUSH
3069: LD_EXP 41
3073: PUSH
3074: LD_INT 1
3076: PLUS
3077: PPUSH
3078: LD_VAR 0 6
3082: PPUSH
3083: CALL_OW 1
3087: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3088: LD_VAR 0 6
3092: PPUSH
3093: LD_VAR 0 5
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: PPUSH
3102: LD_VAR 0 5
3106: PUSH
3107: LD_INT 3
3109: ARRAY
3110: PPUSH
3111: CALL_OW 428
3115: PPUSH
3116: CALL_OW 52
// end ;
3120: GO 3031
3122: POP
3123: POP
// end else
3124: GO 3273
// if b [ 1 ] = b_warehouse then
3126: LD_VAR 0 5
3130: PUSH
3131: LD_INT 1
3133: ARRAY
3134: PUSH
3135: LD_INT 1
3137: EQUAL
3138: IFFALSE 3273
// begin for i := 1 to [ 1 , 1 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3140: LD_ADDR_VAR 0 4
3144: PUSH
3145: DOUBLE
3146: LD_INT 1
3148: DEC
3149: ST_TO_ADDR
3150: LD_INT 1
3152: PUSH
3153: LD_INT 1
3155: PUSH
3156: LD_OWVAR 67
3160: PLUS
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PUSH
3166: LD_EXP 10
3170: PUSH
3171: LD_INT 3
3173: GREATER
3174: PUSH
3175: LD_INT 1
3177: PLUS
3178: ARRAY
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3271
// begin PrepareHuman ( false , 2 , Difficulty ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: LD_OWVAR 67
3193: PPUSH
3194: CALL_OW 380
// un := CreateHuman ;
3198: LD_ADDR_VAR 0 6
3202: PUSH
3203: CALL_OW 44
3207: ST_TO_ADDR
// ruEng := Replace ( ruEng , ruEng + 1 , un ) ;
3208: LD_ADDR_EXP 39
3212: PUSH
3213: LD_EXP 39
3217: PPUSH
3218: LD_EXP 39
3222: PUSH
3223: LD_INT 1
3225: PLUS
3226: PPUSH
3227: LD_VAR 0 6
3231: PPUSH
3232: CALL_OW 1
3236: ST_TO_ADDR
// PlaceHumanInUnit ( un , HexInfo ( b [ 2 ] , b [ 3 ] ) ) ;
3237: LD_VAR 0 6
3241: PPUSH
3242: LD_VAR 0 5
3246: PUSH
3247: LD_INT 2
3249: ARRAY
3250: PPUSH
3251: LD_VAR 0 5
3255: PUSH
3256: LD_INT 3
3258: ARRAY
3259: PPUSH
3260: CALL_OW 428
3264: PPUSH
3265: CALL_OW 52
// end ;
3269: GO 3180
3271: POP
3272: POP
// end ; end ;
3273: GO 2823
3275: POP
3276: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) ;
3277: LD_ADDR_VAR 0 3
3281: PUSH
3282: LD_INT 22
3284: PUSH
3285: LD_INT 3
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PUSH
3292: LD_INT 21
3294: PUSH
3295: LD_INT 3
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PPUSH
3306: CALL_OW 69
3310: ST_TO_ADDR
// for b in blist do
3311: LD_ADDR_VAR 0 5
3315: PUSH
3316: LD_VAR 0 3
3320: PUSH
3321: FOR_IN
3322: IFFALSE 3344
// SetBLevel ( b , 3 + Difficulty ) ;
3324: LD_VAR 0 5
3328: PPUSH
3329: LD_INT 3
3331: PUSH
3332: LD_OWVAR 67
3336: PLUS
3337: PPUSH
3338: CALL_OW 241
3342: GO 3321
3344: POP
3345: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
3346: LD_ADDR_VAR 0 3
3350: PUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 3
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 30
3363: PUSH
3364: LD_INT 32
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: ST_TO_ADDR
// for b in blist do
3380: LD_ADDR_VAR 0 5
3384: PUSH
3385: LD_VAR 0 3
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3500
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3393: LD_INT 0
3395: PPUSH
3396: LD_INT 1
3398: PPUSH
3399: LD_INT 1
3401: PUSH
3402: LD_OWVAR 67
3406: PLUS
3407: PPUSH
3408: CALL_OW 380
// un := CreateHuman ;
3412: LD_ADDR_VAR 0 6
3416: PUSH
3417: CALL_OW 44
3421: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3422: LD_ADDR_EXP 38
3426: PUSH
3427: LD_EXP 38
3431: PPUSH
3432: LD_EXP 38
3436: PUSH
3437: LD_INT 1
3439: PLUS
3440: PPUSH
3441: LD_VAR 0 6
3445: PPUSH
3446: CALL_OW 1
3450: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3451: LD_VAR 0 6
3455: PPUSH
3456: LD_VAR 0 5
3460: PPUSH
3461: CALL_OW 52
// PlaceWeaponTurret ( b , [ ru_gun , ru_gatling_gun ] [ b mod 2 + 1 ] ) ;
3465: LD_VAR 0 5
3469: PPUSH
3470: LD_INT 44
3472: PUSH
3473: LD_INT 43
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: PUSH
3480: LD_VAR 0 5
3484: PUSH
3485: LD_INT 2
3487: MOD
3488: PUSH
3489: LD_INT 1
3491: PLUS
3492: ARRAY
3493: PPUSH
3494: CALL_OW 431
// end ;
3498: GO 3390
3500: POP
3501: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
3502: LD_ADDR_VAR 0 3
3506: PUSH
3507: LD_INT 22
3509: PUSH
3510: LD_INT 3
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 30
3519: PUSH
3520: LD_INT 31
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 69
3535: ST_TO_ADDR
// for b in blist do
3536: LD_ADDR_VAR 0 5
3540: PUSH
3541: LD_VAR 0 3
3545: PUSH
3546: FOR_IN
3547: IFFALSE 3646
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3549: LD_INT 0
3551: PPUSH
3552: LD_INT 1
3554: PPUSH
3555: LD_INT 1
3557: PUSH
3558: LD_OWVAR 67
3562: PLUS
3563: PPUSH
3564: CALL_OW 380
// un := CreateHuman ;
3568: LD_ADDR_VAR 0 6
3572: PUSH
3573: CALL_OW 44
3577: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3578: LD_ADDR_EXP 38
3582: PUSH
3583: LD_EXP 38
3587: PPUSH
3588: LD_EXP 38
3592: PUSH
3593: LD_INT 1
3595: PLUS
3596: PPUSH
3597: LD_VAR 0 6
3601: PPUSH
3602: CALL_OW 1
3606: ST_TO_ADDR
// SetDir ( un , GetDir ( b ) + 3 ) ;
3607: LD_VAR 0 6
3611: PPUSH
3612: LD_VAR 0 5
3616: PPUSH
3617: CALL_OW 254
3621: PUSH
3622: LD_INT 3
3624: PLUS
3625: PPUSH
3626: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3630: LD_VAR 0 6
3634: PPUSH
3635: LD_VAR 0 5
3639: PPUSH
3640: CALL_OW 52
// end ;
3644: GO 3546
3646: POP
3647: POP
// blist := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_INT 22
3655: PUSH
3656: LD_INT 3
3658: PUSH
3659: EMPTY
3660: LIST
3661: LIST
3662: PUSH
3663: LD_INT 2
3665: PUSH
3666: LD_INT 30
3668: PUSH
3669: LD_INT 4
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 30
3678: PUSH
3679: LD_INT 5
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PPUSH
3695: CALL_OW 69
3699: ST_TO_ADDR
// for b in blist do
3700: LD_ADDR_VAR 0 5
3704: PUSH
3705: LD_VAR 0 3
3709: PUSH
3710: FOR_IN
3711: IFFALSE 3807
// begin for i := 1 to 2 do
3713: LD_ADDR_VAR 0 4
3717: PUSH
3718: DOUBLE
3719: LD_INT 1
3721: DEC
3722: ST_TO_ADDR
3723: LD_INT 2
3725: PUSH
3726: FOR_TO
3727: IFFALSE 3803
// begin PrepareHuman ( false , 1 , 1 + Difficulty ) ;
3729: LD_INT 0
3731: PPUSH
3732: LD_INT 1
3734: PPUSH
3735: LD_INT 1
3737: PUSH
3738: LD_OWVAR 67
3742: PLUS
3743: PPUSH
3744: CALL_OW 380
// un := CreateHuman ;
3748: LD_ADDR_VAR 0 6
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// ruForce := Replace ( ruForce , ruForce + 1 , un ) ;
3758: LD_ADDR_EXP 38
3762: PUSH
3763: LD_EXP 38
3767: PPUSH
3768: LD_EXP 38
3772: PUSH
3773: LD_INT 1
3775: PLUS
3776: PPUSH
3777: LD_VAR 0 6
3781: PPUSH
3782: CALL_OW 1
3786: ST_TO_ADDR
// PlaceHumanInUnit ( un , b ) ;
3787: LD_VAR 0 6
3791: PPUSH
3792: LD_VAR 0 5
3796: PPUSH
3797: CALL_OW 52
// end ;
3801: GO 3726
3803: POP
3804: POP
// end ;
3805: GO 3710
3807: POP
3808: POP
// if ibrahimOnRuSide then
3809: LD_EXP 3
3813: IFFALSE 3911
// begin Ibrahim := PrepareUnit ( IbrahimRu , false ,  ) ;
3815: LD_ADDR_EXP 22
3819: PUSH
3820: LD_STRING IbrahimRu
3822: PPUSH
3823: LD_INT 0
3825: PPUSH
3826: LD_STRING 
3828: PPUSH
3829: CALL 31332 0 3
3833: ST_TO_ADDR
// PlaceUnitXY ( Ibrahim , 121 , 78 , false ) ;
3834: LD_EXP 22
3838: PPUSH
3839: LD_INT 121
3841: PPUSH
3842: LD_INT 78
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 48
// ComHold ( Ibrahim ) ;
3852: LD_EXP 22
3856: PPUSH
3857: CALL_OW 140
// PrepareHuman ( sex_male , 1 , 2 ) ;
3861: LD_INT 1
3863: PPUSH
3864: LD_INT 1
3866: PPUSH
3867: LD_INT 2
3869: PPUSH
3870: CALL_OW 380
// ruSol := CreateHuman ;
3874: LD_ADDR_EXP 43
3878: PUSH
3879: CALL_OW 44
3883: ST_TO_ADDR
// PlaceUnitXY ( ruSol , 121 , 75 , false ) ;
3884: LD_EXP 43
3888: PPUSH
3889: LD_INT 121
3891: PPUSH
3892: LD_INT 75
3894: PPUSH
3895: LD_INT 0
3897: PPUSH
3898: CALL_OW 48
// ComHold ( ruSol ) ;
3902: LD_EXP 43
3906: PPUSH
3907: CALL_OW 140
// end ; for i := 1 to [ 2 , 2 + Difficulty ] [ ( ruEscapeCounter > 3 ) + 1 ] do
3911: LD_ADDR_VAR 0 4
3915: PUSH
3916: DOUBLE
3917: LD_INT 1
3919: DEC
3920: ST_TO_ADDR
3921: LD_INT 2
3923: PUSH
3924: LD_INT 2
3926: PUSH
3927: LD_OWVAR 67
3931: PLUS
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: PUSH
3937: LD_EXP 10
3941: PUSH
3942: LD_INT 3
3944: GREATER
3945: PUSH
3946: LD_INT 1
3948: PLUS
3949: ARRAY
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4021
// AddComConstruct ( fac , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] ) ;
3954: LD_VAR 0 8
3958: PPUSH
3959: LD_INT 21
3961: PUSH
3962: LD_INT 23
3964: PUSH
3965: LD_INT 24
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: LIST
3972: PUSH
3973: LD_VAR 0 4
3977: PUSH
3978: LD_INT 3
3980: MOD
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: ARRAY
3986: PPUSH
3987: LD_INT 1
3989: PPUSH
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 43
3995: PUSH
3996: LD_INT 44
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: CALL_OW 185
4019: GO 3951
4021: POP
4022: POP
// end ;
4023: LD_VAR 0 1
4027: RET
// every 0 0$1 trigger ruMobile and not ruEscapeAllowed do var i , filter , tmp , enemy , x , tag ;
4028: LD_EXP 42
4032: PUSH
4033: LD_EXP 4
4037: NOT
4038: AND
4039: IFFALSE 4527
4041: GO 4043
4043: DISABLE
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
// begin enable ;
4052: ENABLE
// filter := UnitFilter ( ruMobile , [ f_type , unit_vehicle ] ) ;
4053: LD_ADDR_VAR 0 2
4057: PUSH
4058: LD_EXP 42
4062: PPUSH
4063: LD_INT 21
4065: PUSH
4066: LD_INT 2
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PPUSH
4073: CALL_OW 72
4077: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_or , [ f_inarea , zone1 ] , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) ;
4078: LD_ADDR_VAR 0 4
4082: PUSH
4083: LD_INT 81
4085: PUSH
4086: LD_INT 3
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PUSH
4093: LD_INT 2
4095: PUSH
4096: LD_INT 95
4098: PUSH
4099: LD_INT 4
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: LD_INT 95
4108: PUSH
4109: LD_INT 5
4111: PUSH
4112: EMPTY
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 95
4118: PUSH
4119: LD_INT 6
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PUSH
4126: LD_INT 95
4128: PUSH
4129: LD_INT 7
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: ST_TO_ADDR
// for i in filter do
4152: LD_ADDR_VAR 0 1
4156: PUSH
4157: LD_VAR 0 2
4161: PUSH
4162: FOR_IN
4163: IFFALSE 4525
// begin tmp := IsDrivenBy ( i ) ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: LD_VAR 0 1
4174: PPUSH
4175: CALL_OW 311
4179: ST_TO_ADDR
// tag := GetTag ( i ) ;
4180: LD_ADDR_VAR 0 6
4184: PUSH
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 110
4194: ST_TO_ADDR
// if not tmp then
4195: LD_VAR 0 3
4199: NOT
4200: IFFALSE 4204
// continue ;
4202: GO 4162
// if GetFuel ( i ) > 90 and tag = 2 then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 261
4213: PUSH
4214: LD_INT 90
4216: GREATER
4217: PUSH
4218: LD_VAR 0 6
4222: PUSH
4223: LD_INT 2
4225: EQUAL
4226: AND
4227: IFFALSE 4243
// SetTag ( i , 0 ) else
4229: LD_VAR 0 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 109
4241: GO 4286
// if GetTag ( i ) = 2 then
4243: LD_VAR 0 1
4247: PPUSH
4248: CALL_OW 110
4252: PUSH
4253: LD_INT 2
4255: EQUAL
4256: IFFALSE 4286
// begin x := rand ( 1 , 2 ) ;
4258: LD_ADDR_VAR 0 5
4262: PUSH
4263: LD_INT 1
4265: PPUSH
4266: LD_INT 2
4268: PPUSH
4269: CALL_OW 12
4273: ST_TO_ADDR
// AddComMoveUnit ( i , ruMainBase ) ;
4274: LD_VAR 0 1
4278: PPUSH
4279: LD_INT 200
4281: PPUSH
4282: CALL_OW 172
// end ; if GetLives ( i ) >= 650 and not tag then
4286: LD_VAR 0 1
4290: PPUSH
4291: CALL_OW 256
4295: PUSH
4296: LD_INT 650
4298: GREATEREQUAL
4299: PUSH
4300: LD_VAR 0 6
4304: NOT
4305: AND
4306: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
4308: LD_VAR 0 1
4312: PPUSH
4313: LD_VAR 0 4
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
// if GetLives ( i ) < 650 and not tag then
4332: LD_VAR 0 1
4336: PPUSH
4337: CALL_OW 256
4341: PUSH
4342: LD_INT 650
4344: LESS
4345: PUSH
4346: LD_VAR 0 6
4350: NOT
4351: AND
4352: IFFALSE 4381
// begin SetTag ( i , 1 ) ;
4354: LD_VAR 0 1
4358: PPUSH
4359: LD_INT 1
4361: PPUSH
4362: CALL_OW 109
// ComMoveXY ( i , 112 , 119 ) ;
4366: LD_VAR 0 1
4370: PPUSH
4371: LD_INT 112
4373: PPUSH
4374: LD_INT 119
4376: PPUSH
4377: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 112 , 119 ) < 9 and tmp then
4381: LD_VAR 0 1
4385: PPUSH
4386: CALL_OW 110
4390: PUSH
4391: LD_INT 1
4393: EQUAL
4394: PUSH
4395: LD_VAR 0 1
4399: PPUSH
4400: LD_INT 112
4402: PPUSH
4403: LD_INT 119
4405: PPUSH
4406: CALL_OW 297
4410: PUSH
4411: LD_INT 9
4413: LESS
4414: AND
4415: PUSH
4416: LD_VAR 0 3
4420: AND
4421: IFFALSE 4523
// begin ComExitVehicle ( tmp ) ;
4423: LD_VAR 0 3
4427: PPUSH
4428: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
4432: LD_VAR 0 3
4436: PPUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
4446: LD_INT 35
4448: PPUSH
4449: CALL_OW 67
// until GetLives ( i ) = 1000 ;
4453: LD_VAR 0 1
4457: PPUSH
4458: CALL_OW 256
4462: PUSH
4463: LD_INT 1000
4465: EQUAL
4466: IFFALSE 4446
// ComEnterUnit ( tmp , i ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_VAR 0 1
4477: PPUSH
4478: CALL_OW 120
// if GetFuel ( i ) <= 50 then
4482: LD_VAR 0 1
4486: PPUSH
4487: CALL_OW 261
4491: PUSH
4492: LD_INT 50
4494: LESSEQUAL
4495: IFFALSE 4511
// SetTag ( i , 2 ) else
4497: LD_VAR 0 1
4501: PPUSH
4502: LD_INT 2
4504: PPUSH
4505: CALL_OW 109
4509: GO 4523
// SetTag ( i , 0 ) ;
4511: LD_VAR 0 1
4515: PPUSH
4516: LD_INT 0
4518: PPUSH
4519: CALL_OW 109
// end ; end ;
4523: GO 4162
4525: POP
4526: POP
// end ;
4527: PPOPN 6
4529: END
// every 0 0$1 trigger not ruEscapeAllowed and ruEng do var i , filter , tmp , enemy ;
4530: LD_EXP 4
4534: NOT
4535: PUSH
4536: LD_EXP 39
4540: AND
4541: IFFALSE 4802
4543: GO 4545
4545: DISABLE
4546: LD_INT 0
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
// begin enable ;
4552: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4553: LD_ADDR_VAR 0 2
4557: PUSH
4558: LD_INT 3
4560: PPUSH
4561: LD_INT 22
4563: PUSH
4564: LD_INT 3
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 21
4573: PUSH
4574: LD_INT 3
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 3
4583: PUSH
4584: LD_INT 24
4586: PUSH
4587: LD_INT 1000
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: LIST
4602: PPUSH
4603: CALL_OW 70
4607: ST_TO_ADDR
// tmp := UnitFilter ( ruEng , [ f_ok ] ) ;
4608: LD_ADDR_VAR 0 3
4612: PUSH
4613: LD_EXP 39
4617: PPUSH
4618: LD_INT 50
4620: PUSH
4621: EMPTY
4622: LIST
4623: PPUSH
4624: CALL_OW 72
4628: ST_TO_ADDR
// if filter and tmp then
4629: LD_VAR 0 2
4633: PUSH
4634: LD_VAR 0 3
4638: AND
4639: IFFALSE 4731
// begin for i in tmp do
4641: LD_ADDR_VAR 0 1
4645: PUSH
4646: LD_VAR 0 3
4650: PUSH
4651: FOR_IN
4652: IFFALSE 4727
// begin if GetTag ( i ) = tEscape then
4654: LD_VAR 0 1
4658: PPUSH
4659: CALL_OW 110
4663: PUSH
4664: LD_EXP 18
4668: EQUAL
4669: IFFALSE 4673
// continue ;
4671: GO 4651
// if IsInUnit ( i ) then
4673: LD_VAR 0 1
4677: PPUSH
4678: CALL_OW 310
4682: IFFALSE 4695
// ComExitBuilding ( i ) else
4684: LD_VAR 0 1
4688: PPUSH
4689: CALL_OW 122
4693: GO 4725
// if not HasTask ( i ) then
4695: LD_VAR 0 1
4699: PPUSH
4700: CALL_OW 314
4704: NOT
4705: IFFALSE 4725
// ComRepairBuilding ( i , filter [ 1 ] ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: CALL_OW 130
// end ;
4725: GO 4651
4727: POP
4728: POP
// end else
4729: GO 4802
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 3
4738: PUSH
4739: LD_INT 54
4741: PUSH
4742: EMPTY
4743: LIST
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PPUSH
4749: CALL_OW 72
4753: IFFALSE 4802
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
4755: LD_ADDR_VAR 0 1
4759: PUSH
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 3
4767: PUSH
4768: LD_INT 54
4770: PUSH
4771: EMPTY
4772: LIST
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PPUSH
4778: CALL_OW 72
4782: PUSH
4783: FOR_IN
4784: IFFALSE 4800
// ComEnterUnit ( i , ruMainBase ) ;
4786: LD_VAR 0 1
4790: PPUSH
4791: LD_INT 200
4793: PPUSH
4794: CALL_OW 120
4798: GO 4783
4800: POP
4801: POP
// end ; end ;
4802: PPOPN 4
4804: END
// every 0 0$1 trigger not ruEscapeAllowed and ruSci do var i , filter , tmp , lab ;
4805: LD_EXP 4
4809: NOT
4810: PUSH
4811: LD_EXP 41
4815: AND
4816: IFFALSE 5095
4818: GO 4820
4820: DISABLE
4821: LD_INT 0
4823: PPUSH
4824: PPUSH
4825: PPUSH
4826: PPUSH
// begin enable ;
4827: ENABLE
// filter := FilterUnitsInArea ( ruMainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4828: LD_ADDR_VAR 0 2
4832: PUSH
4833: LD_INT 3
4835: PPUSH
4836: LD_INT 22
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 21
4848: PUSH
4849: LD_INT 1
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 3
4858: PUSH
4859: LD_INT 24
4861: PUSH
4862: LD_INT 1000
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: PPUSH
4878: CALL_OW 70
4882: ST_TO_ADDR
// tmp := UnitFilter ( ruSci , [ f_ok ] ) ;
4883: LD_ADDR_VAR 0 3
4887: PUSH
4888: LD_EXP 41
4892: PPUSH
4893: LD_INT 50
4895: PUSH
4896: EMPTY
4897: LIST
4898: PPUSH
4899: CALL_OW 72
4903: ST_TO_ADDR
// lab := HexInfo ( 118 , 121 ) ;
4904: LD_ADDR_VAR 0 4
4908: PUSH
4909: LD_INT 118
4911: PPUSH
4912: LD_INT 121
4914: PPUSH
4915: CALL_OW 428
4919: ST_TO_ADDR
// if filter and tmp then
4920: LD_VAR 0 2
4924: PUSH
4925: LD_VAR 0 3
4929: AND
4930: IFFALSE 5022
// begin for i in tmp do
4932: LD_ADDR_VAR 0 1
4936: PUSH
4937: LD_VAR 0 3
4941: PUSH
4942: FOR_IN
4943: IFFALSE 5018
// begin if GetTag ( i ) = tEscape then
4945: LD_VAR 0 1
4949: PPUSH
4950: CALL_OW 110
4954: PUSH
4955: LD_EXP 18
4959: EQUAL
4960: IFFALSE 4964
// continue ;
4962: GO 4942
// if IsInUnit ( i ) then
4964: LD_VAR 0 1
4968: PPUSH
4969: CALL_OW 310
4973: IFFALSE 4986
// ComExitBuilding ( i ) else
4975: LD_VAR 0 1
4979: PPUSH
4980: CALL_OW 122
4984: GO 5016
// if not HasTask ( i ) then
4986: LD_VAR 0 1
4990: PPUSH
4991: CALL_OW 314
4995: NOT
4996: IFFALSE 5016
// ComHeal ( i , filter [ 1 ] ) ;
4998: LD_VAR 0 1
5002: PPUSH
5003: LD_VAR 0 2
5007: PUSH
5008: LD_INT 1
5010: ARRAY
5011: PPUSH
5012: CALL_OW 128
// end ;
5016: GO 4942
5018: POP
5019: POP
// end else
5020: GO 5095
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
5022: LD_VAR 0 3
5026: PPUSH
5027: LD_INT 3
5029: PUSH
5030: LD_INT 54
5032: PUSH
5033: EMPTY
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 72
5044: IFFALSE 5095
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
5046: LD_ADDR_VAR 0 1
5050: PUSH
5051: LD_VAR 0 3
5055: PPUSH
5056: LD_INT 3
5058: PUSH
5059: LD_INT 54
5061: PUSH
5062: EMPTY
5063: LIST
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 72
5073: PUSH
5074: FOR_IN
5075: IFFALSE 5093
// ComEnterUnit ( i , lab ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_VAR 0 4
5086: PPUSH
5087: CALL_OW 120
5091: GO 5074
5093: POP
5094: POP
// end ; end ; end_of_file
5095: PPOPN 4
5097: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL 26438 0 1
// if un = Heike then
5107: LD_VAR 0 1
5111: PUSH
5112: LD_EXP 19
5116: EQUAL
5117: IFFALSE 5126
// YouLost ( Heike ) ;
5119: LD_STRING Heike
5121: PPUSH
5122: CALL_OW 104
// if un in ruEng then
5126: LD_VAR 0 1
5130: PUSH
5131: LD_EXP 39
5135: IN
5136: IFFALSE 5154
// ruEng := ruEng diff un ;
5138: LD_ADDR_EXP 39
5142: PUSH
5143: LD_EXP 39
5147: PUSH
5148: LD_VAR 0 1
5152: DIFF
5153: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) then
5154: LD_VAR 0 1
5158: PUSH
5159: LD_INT 22
5161: PUSH
5162: LD_INT 2
5164: PUSH
5165: EMPTY
5166: LIST
5167: LIST
5168: PUSH
5169: LD_INT 21
5171: PUSH
5172: LD_INT 1
5174: PUSH
5175: EMPTY
5176: LIST
5177: LIST
5178: PUSH
5179: LD_INT 23
5181: PUSH
5182: LD_INT 2
5184: PUSH
5185: EMPTY
5186: LIST
5187: LIST
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 69
5198: IN
5199: IFFALSE 5215
// loseCounter := loseCounter + 1 ;
5201: LD_ADDR_EXP 6
5205: PUSH
5206: LD_EXP 6
5210: PUSH
5211: LD_INT 1
5213: PLUS
5214: ST_TO_ADDR
// end ;
5215: PPOPN 1
5217: END
// on EvacuateVehicle ( driver , un , p1 , p2 ) do var weapon , fac ;
5218: LD_INT 0
5220: PPUSH
5221: PPUSH
// begin if un in ruMobile then
5222: LD_VAR 0 2
5226: PUSH
5227: LD_EXP 42
5231: IN
5232: IFFALSE 5391
// begin ruMobile := ruMobile diff un ;
5234: LD_ADDR_EXP 42
5238: PUSH
5239: LD_EXP 42
5243: PUSH
5244: LD_VAR 0 2
5248: DIFF
5249: ST_TO_ADDR
// weapon := GetWeapon ( un ) ;
5250: LD_ADDR_VAR 0 5
5254: PUSH
5255: LD_VAR 0 2
5259: PPUSH
5260: CALL_OW 264
5264: ST_TO_ADDR
// fac := HexInfo ( 110 , 126 ) ;
5265: LD_ADDR_VAR 0 6
5269: PUSH
5270: LD_INT 110
5272: PPUSH
5273: LD_INT 126
5275: PPUSH
5276: CALL_OW 428
5280: ST_TO_ADDR
// if not driver or not fac then
5281: LD_VAR 0 1
5285: NOT
5286: PUSH
5287: LD_VAR 0 6
5291: NOT
5292: OR
5293: IFFALSE 5297
// exit ;
5295: GO 5391
// AddComMoveXY ( driver , 111 , 121 ) ;
5297: LD_VAR 0 1
5301: PPUSH
5302: LD_INT 111
5304: PPUSH
5305: LD_INT 121
5307: PPUSH
5308: CALL_OW 171
// AddComEnterUnit ( driver , fac ) ;
5312: LD_VAR 0 1
5316: PPUSH
5317: LD_VAR 0 6
5321: PPUSH
5322: CALL_OW 180
// repeat wait ( 0 0$1 ) ;
5326: LD_INT 35
5328: PPUSH
5329: CALL_OW 67
// until IsDead ( driver ) or IsInUnit ( driver ) ;
5333: LD_VAR 0 1
5337: PPUSH
5338: CALL_OW 301
5342: PUSH
5343: LD_VAR 0 1
5347: PPUSH
5348: CALL_OW 310
5352: OR
5353: IFFALSE 5326
// if IsDead ( driver ) then
5355: LD_VAR 0 1
5359: PPUSH
5360: CALL_OW 301
5364: IFFALSE 5368
// exit ;
5366: GO 5391
// AddComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , weapon ) ;
5368: LD_VAR 0 6
5372: PPUSH
5373: LD_INT 21
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 5
5386: PPUSH
5387: CALL_OW 185
// end ; end ;
5391: PPOPN 6
5393: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_VAR 0 2
5403: PPUSH
5404: CALL 26558 0 2
// if GetSide ( fac ) = 3 then
5408: LD_VAR 0 2
5412: PPUSH
5413: CALL_OW 255
5417: PUSH
5418: LD_INT 3
5420: EQUAL
5421: IFFALSE 5467
// begin ruMobile := Replace ( ruMobile , ruMobile + 1 , veh ) ;
5423: LD_ADDR_EXP 42
5427: PUSH
5428: LD_EXP 42
5432: PPUSH
5433: LD_EXP 42
5437: PUSH
5438: LD_INT 1
5440: PLUS
5441: PPUSH
5442: LD_VAR 0 1
5446: PPUSH
5447: CALL_OW 1
5451: ST_TO_ADDR
// AddComMoveXY ( veh , 110 , 117 ) ;
5452: LD_VAR 0 1
5456: PPUSH
5457: LD_INT 110
5459: PPUSH
5460: LD_INT 117
5462: PPUSH
5463: CALL_OW 171
// end ; end ;
5467: PPOPN 2
5469: END
// on LeaveBuilding ( b , un ) do var barracks ;
5470: LD_INT 0
5472: PPUSH
// begin if b in [ HexInfo ( 130 , 17 ) , HexInfo ( 138 , 22 ) , HexInfo ( 123 , 17 ) ] then
5473: LD_VAR 0 1
5477: PUSH
5478: LD_INT 130
5480: PPUSH
5481: LD_INT 17
5483: PPUSH
5484: CALL_OW 428
5488: PUSH
5489: LD_INT 138
5491: PPUSH
5492: LD_INT 22
5494: PPUSH
5495: CALL_OW 428
5499: PUSH
5500: LD_INT 123
5502: PPUSH
5503: LD_INT 17
5505: PPUSH
5506: CALL_OW 428
5510: PUSH
5511: EMPTY
5512: LIST
5513: LIST
5514: LIST
5515: IN
5516: IFFALSE 5540
// begin AddComEnterUnit ( un , HexInfo ( 135 , 31 ) ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_INT 135
5525: PPUSH
5526: LD_INT 31
5528: PPUSH
5529: CALL_OW 428
5533: PPUSH
5534: CALL_OW 180
// exit ;
5538: GO 5814
// end ; if b = HexInfo ( 135 , 31 ) then
5540: LD_VAR 0 1
5544: PUSH
5545: LD_INT 135
5547: PPUSH
5548: LD_INT 31
5550: PPUSH
5551: CALL_OW 428
5555: EQUAL
5556: IFFALSE 5628
// begin AddComEnterUnit ( un , HexInfo ( 106 , 51 ) ) ;
5558: LD_VAR 0 2
5562: PPUSH
5563: LD_INT 106
5565: PPUSH
5566: LD_INT 51
5568: PPUSH
5569: CALL_OW 428
5573: PPUSH
5574: CALL_OW 180
// if not explodeFirstDepot then
5578: LD_EXP 12
5582: NOT
5583: IFFALSE 5626
// begin explodeFirstDepot := true ;
5585: LD_ADDR_EXP 12
5589: PUSH
5590: LD_INT 1
5592: ST_TO_ADDR
// wait ( 0 0$15 ) ;
5593: LD_INT 525
5595: PPUSH
5596: CALL_OW 67
// MineExplosion ( 127 , 27 , 1 ) ;
5600: LD_INT 127
5602: PPUSH
5603: LD_INT 27
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 453
// MineExplosion ( 125 , 29 , 1 ) ;
5613: LD_INT 125
5615: PPUSH
5616: LD_INT 29
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: CALL_OW 453
// end ; exit ;
5626: GO 5814
// end ; if b = HexInfo ( 106 , 51 ) then
5628: LD_VAR 0 1
5632: PUSH
5633: LD_INT 106
5635: PPUSH
5636: LD_INT 51
5638: PPUSH
5639: CALL_OW 428
5643: EQUAL
5644: IFFALSE 5744
// begin AddComMoveXY ( un , 106 , 93 ) ;
5646: LD_VAR 0 2
5650: PPUSH
5651: LD_INT 106
5653: PPUSH
5654: LD_INT 93
5656: PPUSH
5657: CALL_OW 171
// if not explodeSecondDepot then
5661: LD_EXP 13
5665: NOT
5666: IFFALSE 5742
// begin explodeSecondDepot := true ;
5668: LD_ADDR_EXP 13
5672: PUSH
5673: LD_INT 1
5675: ST_TO_ADDR
// wait ( 0 0$12 ) ;
5676: LD_INT 420
5678: PPUSH
5679: CALL_OW 67
// MineExplosion ( 111 , 75 , 1 ) ;
5683: LD_INT 111
5685: PPUSH
5686: LD_INT 75
5688: PPUSH
5689: LD_INT 1
5691: PPUSH
5692: CALL_OW 453
// MineExplosion ( 111 , 75 , 1 ) ;
5696: LD_INT 111
5698: PPUSH
5699: LD_INT 75
5701: PPUSH
5702: LD_INT 1
5704: PPUSH
5705: CALL_OW 453
// MineExplosion ( 108 , 69 , 1 ) ;
5709: LD_INT 108
5711: PPUSH
5712: LD_INT 69
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 453
// wait ( 0 0$2 ) ;
5722: LD_INT 70
5724: PPUSH
5725: CALL_OW 67
// MineExplosion ( 94 , 65 , 1 ) ;
5729: LD_INT 94
5731: PPUSH
5732: LD_INT 65
5734: PPUSH
5735: LD_INT 1
5737: PPUSH
5738: CALL_OW 453
// end ; exit ;
5742: GO 5814
// end ; if GetBType ( b ) = b_bunker then
5744: LD_VAR 0 1
5748: PPUSH
5749: CALL_OW 266
5753: PUSH
5754: LD_INT 32
5756: EQUAL
5757: IFFALSE 5814
// begin barracks := NearestEmptyBuilding ( un , b_barracks ) ;
5759: LD_ADDR_VAR 0 3
5763: PUSH
5764: LD_VAR 0 2
5768: PPUSH
5769: LD_INT 5
5771: PPUSH
5772: CALL 1016 0 2
5776: ST_TO_ADDR
// if barracks then
5777: LD_VAR 0 3
5781: IFFALSE 5799
// AddComEnterUnit ( un , barracks ) else
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_VAR 0 3
5792: PPUSH
5793: CALL_OW 180
5797: GO 5814
// AddComMoveXY ( un , 116 , 110 ) ;
5799: LD_VAR 0 2
5803: PPUSH
5804: LD_INT 116
5806: PPUSH
5807: LD_INT 110
5809: PPUSH
5810: CALL_OW 171
// end ; end ;
5814: PPOPN 3
5816: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
5817: LD_VAR 0 1
5821: PUSH
5822: LD_EXP 24
5826: EQUAL
5827: PUSH
5828: LD_VAR 0 2
5832: PUSH
5833: LD_INT 3
5835: PUSH
5836: LD_INT 6
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: IN
5843: AND
5844: IFFALSE 5875
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
5846: LD_ADDR_EXP 8
5850: PUSH
5851: LD_VAR 0 1
5855: PPUSH
5856: CALL_OW 250
5860: PUSH
5861: LD_VAR 0 1
5865: PPUSH
5866: CALL_OW 251
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: ST_TO_ADDR
// end ;
5875: PPOPN 3
5877: END
// every 0 0$1 trigger activeInvincible do var i ;
5878: LD_EXP 17
5882: IFFALSE 5951
5884: GO 5886
5886: DISABLE
5887: LD_INT 0
5889: PPUSH
// begin enable ;
5890: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
5891: LD_ADDR_VAR 0 1
5895: PUSH
5896: LD_INT 22
5898: PUSH
5899: LD_INT 2
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 3
5908: PUSH
5909: LD_INT 24
5911: PUSH
5912: LD_INT 1000
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PPUSH
5927: CALL_OW 69
5931: PUSH
5932: FOR_IN
5933: IFFALSE 5949
// SetLives ( i , 1000 ) ;
5935: LD_VAR 0 1
5939: PPUSH
5940: LD_INT 1000
5942: PPUSH
5943: CALL_OW 234
5947: GO 5932
5949: POP
5950: POP
// end ; end_of_file
5951: PPOPN 1
5953: END
// export function Action ; var i , j , un , veh , tmp , rutmp ; begin
5954: LD_INT 0
5956: PPUSH
5957: PPUSH
5958: PPUSH
5959: PPUSH
5960: PPUSH
5961: PPUSH
5962: PPUSH
// Video ( true ) ;
5963: LD_INT 1
5965: PPUSH
5966: CALL 69006 0 1
// ChangeSideFog ( 5 , 2 ) ;
5970: LD_INT 5
5972: PPUSH
5973: LD_INT 2
5975: PPUSH
5976: CALL_OW 343
// music_nat := 4 ;
5980: LD_ADDR_OWVAR 71
5984: PUSH
5985: LD_INT 4
5987: ST_TO_ADDR
// music_class := music_combat ;
5988: LD_ADDR_OWVAR 72
5992: PUSH
5993: LD_INT 1
5995: ST_TO_ADDR
// PlaceSeeing ( 133 , 2 , 2 , 10 ) ;
5996: LD_INT 133
5998: PPUSH
5999: LD_INT 2
6001: PPUSH
6002: LD_INT 2
6004: PPUSH
6005: LD_INT 10
6007: PPUSH
6008: CALL_OW 330
// CenterNowOnXY ( 133 , 2 ) ;
6012: LD_INT 133
6014: PPUSH
6015: LD_INT 2
6017: PPUSH
6018: CALL_OW 86
// wait ( 0 0$1 ) ;
6022: LD_INT 35
6024: PPUSH
6025: CALL_OW 67
// uc_side := 6 ;
6029: LD_ADDR_OWVAR 20
6033: PUSH
6034: LD_INT 6
6036: ST_TO_ADDR
// uc_nation := 3 ;
6037: LD_ADDR_OWVAR 21
6041: PUSH
6042: LD_INT 3
6044: ST_TO_ADDR
// rutmp := [ ] ;
6045: LD_ADDR_VAR 0 7
6049: PUSH
6050: EMPTY
6051: ST_TO_ADDR
// PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_gun , 66 ) ;
6052: LD_INT 6
6054: PPUSH
6055: LD_INT 3
6057: PPUSH
6058: LD_INT 21
6060: PPUSH
6061: LD_INT 1
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_INT 44
6069: PPUSH
6070: LD_INT 66
6072: PPUSH
6073: CALL 344 0 7
// veh := CreateVehicle ;
6077: LD_ADDR_VAR 0 5
6081: PUSH
6082: CALL_OW 45
6086: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6087: LD_VAR 0 5
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6099: LD_VAR 0 5
6103: PPUSH
6104: LD_INT 8
6106: PPUSH
6107: LD_INT 0
6109: PPUSH
6110: CALL_OW 49
// SetLives ( veh , 500 ) ;
6114: LD_VAR 0 5
6118: PPUSH
6119: LD_INT 500
6121: PPUSH
6122: CALL_OW 234
// PrepareHuman ( false , 3 , 3 ) ;
6126: LD_INT 0
6128: PPUSH
6129: LD_INT 3
6131: PPUSH
6132: LD_INT 3
6134: PPUSH
6135: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
6139: CALL_OW 44
6143: PPUSH
6144: LD_VAR 0 5
6148: PPUSH
6149: CALL_OW 52
// ComMoveXY ( veh , 133 , 11 ) ;
6153: LD_VAR 0 5
6157: PPUSH
6158: LD_INT 133
6160: PPUSH
6161: LD_INT 11
6163: PPUSH
6164: CALL_OW 111
// rutmp := [ veh ] ;
6168: LD_ADDR_VAR 0 7
6172: PUSH
6173: LD_VAR 0 5
6177: PUSH
6178: EMPTY
6179: LIST
6180: ST_TO_ADDR
// for i := 1 to 4 do
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: DOUBLE
6187: LD_INT 1
6189: DEC
6190: ST_TO_ADDR
6191: LD_INT 4
6193: PUSH
6194: FOR_TO
6195: IFFALSE 6302
// begin PrepareHuman ( false , i , 2 ) ;
6197: LD_INT 0
6199: PPUSH
6200: LD_VAR 0 2
6204: PPUSH
6205: LD_INT 2
6207: PPUSH
6208: CALL_OW 380
// un := CreateHuman ;
6212: LD_ADDR_VAR 0 4
6216: PUSH
6217: CALL_OW 44
6221: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6222: LD_VAR 0 4
6226: PPUSH
6227: LD_INT 3
6229: PPUSH
6230: CALL_OW 233
// PlaceUnitArea ( un , spawnArea , false ) ;
6234: LD_VAR 0 4
6238: PPUSH
6239: LD_INT 8
6241: PPUSH
6242: LD_INT 0
6244: PPUSH
6245: CALL_OW 49
// rutmp := Replace ( rutmp , rutmp + 1 , un ) ;
6249: LD_ADDR_VAR 0 7
6253: PUSH
6254: LD_VAR 0 7
6258: PPUSH
6259: LD_VAR 0 7
6263: PUSH
6264: LD_INT 1
6266: PLUS
6267: PPUSH
6268: LD_VAR 0 4
6272: PPUSH
6273: CALL_OW 1
6277: ST_TO_ADDR
// ComMoveXY ( un , 133 , 11 ) ;
6278: LD_VAR 0 4
6282: PPUSH
6283: LD_INT 133
6285: PPUSH
6286: LD_INT 11
6288: PPUSH
6289: CALL_OW 111
// wait ( 0 0$0.5 ) ;
6293: LD_INT 18
6295: PPUSH
6296: CALL_OW 67
// end ;
6300: GO 6194
6302: POP
6303: POP
// for i in rutmp do
6304: LD_ADDR_VAR 0 2
6308: PUSH
6309: LD_VAR 0 7
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6364
// begin AddComMoveXY ( i , 99 , 65 ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 99
6324: PPUSH
6325: LD_INT 65
6327: PPUSH
6328: CALL_OW 171
// AddComMoveXY ( i , 76 , 108 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 76
6339: PPUSH
6340: LD_INT 108
6342: PPUSH
6343: CALL_OW 171
// AddComMoveXY ( i , 92 , 176 ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_INT 92
6354: PPUSH
6355: LD_INT 176
6357: PPUSH
6358: CALL_OW 171
// end ;
6362: GO 6314
6364: POP
6365: POP
// wait ( 0 0$10 ) ;
6366: LD_INT 350
6368: PPUSH
6369: CALL_OW 67
// tmp := [ Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Kurt , Aviradze ] union heikeSecondSquad ;
6373: LD_ADDR_VAR 0 6
6377: PUSH
6378: LD_EXP 19
6382: PUSH
6383: LD_EXP 20
6387: PUSH
6388: LD_EXP 21
6392: PUSH
6393: LD_EXP 22
6397: PUSH
6398: LD_EXP 23
6402: PUSH
6403: LD_EXP 24
6407: PUSH
6408: LD_EXP 25
6412: PUSH
6413: LD_EXP 26
6417: PUSH
6418: LD_EXP 28
6422: PUSH
6423: LD_EXP 29
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: PUSH
6440: LD_EXP 30
6444: UNION
6445: ST_TO_ADDR
// tmp := tmp diff 0 ;
6446: LD_ADDR_VAR 0 6
6450: PUSH
6451: LD_VAR 0 6
6455: PUSH
6456: LD_INT 0
6458: DIFF
6459: ST_TO_ADDR
// for i in heikeVehicles do
6460: LD_ADDR_VAR 0 2
6464: PUSH
6465: LD_EXP 31
6469: PUSH
6470: FOR_IN
6471: IFFALSE 6890
// begin if not tmp then
6473: LD_VAR 0 6
6477: NOT
6478: IFFALSE 6482
// continue ;
6480: GO 6470
// PrepareTank ( 2 , i [ 5 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , 34 ) ;
6482: LD_INT 2
6484: PPUSH
6485: LD_VAR 0 2
6489: PUSH
6490: LD_INT 5
6492: ARRAY
6493: PPUSH
6494: LD_VAR 0 2
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_INT 2
6510: ARRAY
6511: PPUSH
6512: LD_VAR 0 2
6516: PUSH
6517: LD_INT 3
6519: ARRAY
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 4
6528: ARRAY
6529: PPUSH
6530: LD_INT 34
6532: PPUSH
6533: CALL 344 0 7
// veh := CreateVehicle ;
6537: LD_ADDR_VAR 0 5
6541: PUSH
6542: CALL_OW 45
6546: ST_TO_ADDR
// if i [ 4 ] in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6547: LD_VAR 0 2
6551: PUSH
6552: LD_INT 4
6554: ARRAY
6555: PUSH
6556: LD_INT 51
6558: PUSH
6559: LD_INT 32
6561: PUSH
6562: LD_INT 12
6564: PUSH
6565: LD_INT 89
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: IN
6574: IFFALSE 6654
// begin if i [ 7 ] [ 1 ] then
6576: LD_VAR 0 2
6580: PUSH
6581: LD_INT 7
6583: ARRAY
6584: PUSH
6585: LD_INT 1
6587: ARRAY
6588: IFFALSE 6615
// AddCargo ( veh , mat_cans , i [ 7 ] [ 1 ] ) ;
6590: LD_VAR 0 5
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 7
6605: ARRAY
6606: PUSH
6607: LD_INT 1
6609: ARRAY
6610: PPUSH
6611: CALL_OW 291
// if i [ 7 ] [ 2 ] then
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 7
6622: ARRAY
6623: PUSH
6624: LD_INT 2
6626: ARRAY
6627: IFFALSE 6654
// AddCargo ( veh , mat_oil , i [ 7 ] [ 2 ] ) ;
6629: LD_VAR 0 5
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: LD_VAR 0 2
6641: PUSH
6642: LD_INT 7
6644: ARRAY
6645: PUSH
6646: LD_INT 2
6648: ARRAY
6649: PPUSH
6650: CALL_OW 291
// end ; SetDir ( veh , 3 ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_INT 3
6661: PPUSH
6662: CALL_OW 233
// PlaceUnitArea ( veh , spawnArea , false ) ;
6666: LD_VAR 0 5
6670: PPUSH
6671: LD_INT 8
6673: PPUSH
6674: LD_INT 0
6676: PPUSH
6677: CALL_OW 49
// for j := 1 to tmp do
6681: LD_ADDR_VAR 0 3
6685: PUSH
6686: DOUBLE
6687: LD_INT 1
6689: DEC
6690: ST_TO_ADDR
6691: LD_VAR 0 6
6695: PUSH
6696: FOR_TO
6697: IFFALSE 6770
// begin if i [ 8 ] = GetClass ( tmp [ j ] ) then
6699: LD_VAR 0 2
6703: PUSH
6704: LD_INT 8
6706: ARRAY
6707: PUSH
6708: LD_VAR 0 6
6712: PUSH
6713: LD_VAR 0 3
6717: ARRAY
6718: PPUSH
6719: CALL_OW 257
6723: EQUAL
6724: IFFALSE 6768
// begin PlaceHumanInUnit ( tmp [ j ] , veh ) ;
6726: LD_VAR 0 6
6730: PUSH
6731: LD_VAR 0 3
6735: ARRAY
6736: PPUSH
6737: LD_VAR 0 5
6741: PPUSH
6742: CALL_OW 52
// tmp := Delete ( tmp , j ) ;
6746: LD_ADDR_VAR 0 6
6750: PUSH
6751: LD_VAR 0 6
6755: PPUSH
6756: LD_VAR 0 3
6760: PPUSH
6761: CALL_OW 3
6765: ST_TO_ADDR
// break ;
6766: GO 6770
// end ; end ;
6768: GO 6696
6770: POP
6771: POP
// if IsEmpty ( veh ) then
6772: LD_VAR 0 5
6776: PPUSH
6777: CALL 33456 0 1
6781: IFFALSE 6819
// begin PlaceHumanInUnit ( tmp [ 1 ] , veh ) ;
6783: LD_VAR 0 6
6787: PUSH
6788: LD_INT 1
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 5
6796: PPUSH
6797: CALL_OW 52
// tmp := Delete ( tmp , 1 ) ;
6801: LD_ADDR_VAR 0 6
6805: PUSH
6806: LD_VAR 0 6
6810: PPUSH
6811: LD_INT 1
6813: PPUSH
6814: CALL_OW 3
6818: ST_TO_ADDR
// end ; if GetWeapon ( veh ) in [ ru_cargo_bay , ar_cargo_bay , us_cargo_bay , ru_big_cargo_bay ] then
6819: LD_VAR 0 5
6823: PPUSH
6824: CALL_OW 264
6828: PUSH
6829: LD_INT 51
6831: PUSH
6832: LD_INT 32
6834: PUSH
6835: LD_INT 12
6837: PUSH
6838: LD_INT 89
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: IN
6847: IFFALSE 6866
// ComMoveXY ( veh , 130 , 8 ) else
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_INT 130
6856: PPUSH
6857: LD_INT 8
6859: PPUSH
6860: CALL_OW 111
6864: GO 6881
// ComMoveXY ( veh , 134 , 15 ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 134
6873: PPUSH
6874: LD_INT 15
6876: PPUSH
6877: CALL_OW 111
// wait ( 0 0$3 ) ;
6881: LD_INT 105
6883: PPUSH
6884: CALL_OW 67
// end ;
6888: GO 6470
6890: POP
6891: POP
// if tmp then
6892: LD_VAR 0 6
6896: IFFALSE 6952
// for i in tmp do
6898: LD_ADDR_VAR 0 2
6902: PUSH
6903: LD_VAR 0 6
6907: PUSH
6908: FOR_IN
6909: IFFALSE 6950
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6911: LD_VAR 0 2
6915: PPUSH
6916: LD_INT 10
6918: PPUSH
6919: LD_INT 0
6921: PPUSH
6922: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6926: LD_VAR 0 2
6930: PPUSH
6931: LD_INT 146
6933: PPUSH
6934: LD_INT 7
6936: PPUSH
6937: CALL_OW 114
// wait ( 0 0$0.5 ) ;
6941: LD_INT 18
6943: PPUSH
6944: CALL_OW 67
// end ;
6948: GO 6908
6950: POP
6951: POP
// if heikeApes then
6952: LD_EXP 32
6956: IFFALSE 7012
// for i in heikeApes do
6958: LD_ADDR_VAR 0 2
6962: PUSH
6963: LD_EXP 32
6967: PUSH
6968: FOR_IN
6969: IFFALSE 7010
// begin PlaceUnitArea ( i , spawnHumanArea , false ) ;
6971: LD_VAR 0 2
6975: PPUSH
6976: LD_INT 10
6978: PPUSH
6979: LD_INT 0
6981: PPUSH
6982: CALL_OW 49
// ComAgressiveMove ( i , 146 , 7 ) ;
6986: LD_VAR 0 2
6990: PPUSH
6991: LD_INT 146
6993: PPUSH
6994: LD_INT 7
6996: PPUSH
6997: CALL_OW 114
// wait ( 0 0$0.5 ) ;
7001: LD_INT 18
7003: PPUSH
7004: CALL_OW 67
// end ;
7008: GO 6968
7010: POP
7011: POP
// DialogueOn ;
7012: CALL_OW 6
// Say ( Heike , DH-outpost-a-1 ) ;
7016: LD_EXP 19
7020: PPUSH
7021: LD_STRING DH-outpost-a-1
7023: PPUSH
7024: CALL_OW 88
// DialogueOff ;
7028: CALL_OW 7
// RemoveSeeing ( 133 , 2 , 2 ) ;
7032: LD_INT 133
7034: PPUSH
7035: LD_INT 2
7037: PPUSH
7038: LD_INT 2
7040: PPUSH
7041: CALL_OW 331
// activeInvincible := false ;
7045: LD_ADDR_EXP 17
7049: PUSH
7050: LD_INT 0
7052: ST_TO_ADDR
// Video ( false ) ;
7053: LD_INT 0
7055: PPUSH
7056: CALL 69006 0 1
// music_nat := 0 ;
7060: LD_ADDR_OWVAR 71
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// music_class := 0 ;
7068: LD_ADDR_OWVAR 72
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// ChangeMissionObjectives ( Outposts ) ;
7076: LD_STRING Outposts
7078: PPUSH
7079: CALL_OW 337
// SaveForQuickRestart ;
7083: CALL_OW 22
// end ;
7087: LD_VAR 0 1
7091: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 20 ] ] ) and ibrahimOnRuSide and IsOk ( Ibrahim ) do var x , y , d , lives ;
7092: LD_INT 22
7094: PUSH
7095: LD_INT 2
7097: PUSH
7098: EMPTY
7099: LIST
7100: LIST
7101: PUSH
7102: LD_INT 91
7104: PUSH
7105: LD_EXP 22
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: PUSH
7127: LD_EXP 3
7131: AND
7132: PUSH
7133: LD_EXP 22
7137: PPUSH
7138: CALL_OW 302
7142: AND
7143: IFFALSE 7390
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
// begin IbrahimBetrayal ;
7154: CALL 7393 0 0
// repeat wait ( 0 0$1 ) ;
7158: LD_INT 35
7160: PPUSH
7161: CALL_OW 67
// until IsDead ( Ibrahim ) or ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Ibrahim , 6 ] ] ) and IsOk ( Ibrahim ) ) ;
7165: LD_EXP 22
7169: PPUSH
7170: CALL_OW 301
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 91
7187: PUSH
7188: LD_EXP 22
7192: PUSH
7193: LD_INT 6
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PUSH
7210: LD_EXP 22
7214: PPUSH
7215: CALL_OW 302
7219: AND
7220: OR
7221: IFFALSE 7158
// if IsDead ( Ibrahim ) then
7223: LD_EXP 22
7227: PPUSH
7228: CALL_OW 301
7232: IFFALSE 7236
// exit ;
7234: GO 7390
// x := GetX ( Ibrahim ) ;
7236: LD_ADDR_VAR 0 1
7240: PUSH
7241: LD_EXP 22
7245: PPUSH
7246: CALL_OW 250
7250: ST_TO_ADDR
// y := GetY ( Ibrahim ) ;
7251: LD_ADDR_VAR 0 2
7255: PUSH
7256: LD_EXP 22
7260: PPUSH
7261: CALL_OW 251
7265: ST_TO_ADDR
// d := GetDir ( Ibrahim ) ;
7266: LD_ADDR_VAR 0 3
7270: PUSH
7271: LD_EXP 22
7275: PPUSH
7276: CALL_OW 254
7280: ST_TO_ADDR
// lives := GetLives ( Ibrahim ) ;
7281: LD_ADDR_VAR 0 4
7285: PUSH
7286: LD_EXP 22
7290: PPUSH
7291: CALL_OW 256
7295: ST_TO_ADDR
// RemoveUnit ( Ibrahim ) ;
7296: LD_EXP 22
7300: PPUSH
7301: CALL_OW 64
// uc_side := 2 ;
7305: LD_ADDR_OWVAR 20
7309: PUSH
7310: LD_INT 2
7312: ST_TO_ADDR
// uc_nation := 2 ;
7313: LD_ADDR_OWVAR 21
7317: PUSH
7318: LD_INT 2
7320: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , false ,  ) ;
7321: LD_ADDR_EXP 22
7325: PUSH
7326: LD_STRING Ibrahim
7328: PPUSH
7329: LD_INT 0
7331: PPUSH
7332: LD_STRING 
7334: PPUSH
7335: CALL 31332 0 3
7339: ST_TO_ADDR
// SetDir ( Ibrahim , d ) ;
7340: LD_EXP 22
7344: PPUSH
7345: LD_VAR 0 3
7349: PPUSH
7350: CALL_OW 233
// PlaceUnitXY ( Ibrahim , x , y , false ) ;
7354: LD_EXP 22
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 2
7368: PPUSH
7369: LD_INT 0
7371: PPUSH
7372: CALL_OW 48
// SetLives ( Ibrahim , lives ) ;
7376: LD_EXP 22
7380: PPUSH
7381: LD_VAR 0 4
7385: PPUSH
7386: CALL_OW 234
// end ;
7390: PPOPN 4
7392: END
// export function IbrahimBetrayal ; var i , tmp ; begin
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
// PlaceSeeing ( 122 , 77 , 2 , - 6 ) ;
7398: LD_INT 122
7400: PPUSH
7401: LD_INT 77
7403: PPUSH
7404: LD_INT 2
7406: PPUSH
7407: LD_INT 6
7409: NEG
7410: PPUSH
7411: CALL_OW 330
// ComMoveXY ( Ibrahim , 123 , 79 ) ;
7415: LD_EXP 22
7419: PPUSH
7420: LD_INT 123
7422: PPUSH
7423: LD_INT 79
7425: PPUSH
7426: CALL_OW 111
// AddComTurnXY ( Ibrahim , 125 , 82 ) ;
7430: LD_EXP 22
7434: PPUSH
7435: LD_INT 125
7437: PPUSH
7438: LD_INT 82
7440: PPUSH
7441: CALL_OW 178
// wait ( 0 0$2 ) ;
7445: LD_INT 70
7447: PPUSH
7448: CALL_OW 67
// ComTurnUnit ( ruSol , Ibrahim ) ;
7452: LD_EXP 43
7456: PPUSH
7457: LD_EXP 22
7461: PPUSH
7462: CALL_OW 119
// Say ( ruSol , DRum-outpost-b-3 ) ;
7466: LD_EXP 43
7470: PPUSH
7471: LD_STRING DRum-outpost-b-3
7473: PPUSH
7474: CALL_OW 88
// tmp := [ HexInfo ( 125 , 76 ) , HexInfo ( 125 , 79 ) , HexInfo ( 125 , 82 ) ] ;
7478: LD_ADDR_VAR 0 3
7482: PUSH
7483: LD_INT 125
7485: PPUSH
7486: LD_INT 76
7488: PPUSH
7489: CALL_OW 428
7493: PUSH
7494: LD_INT 125
7496: PPUSH
7497: LD_INT 79
7499: PPUSH
7500: CALL_OW 428
7504: PUSH
7505: LD_INT 125
7507: PPUSH
7508: LD_INT 82
7510: PPUSH
7511: CALL_OW 428
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: LIST
7520: ST_TO_ADDR
// for i in tmp do
7521: LD_ADDR_VAR 0 2
7525: PUSH
7526: LD_VAR 0 3
7530: PUSH
7531: FOR_IN
7532: IFFALSE 7548
// SetLives ( i , 200 ) ;
7534: LD_VAR 0 2
7538: PPUSH
7539: LD_INT 200
7541: PPUSH
7542: CALL_OW 234
7546: GO 7531
7548: POP
7549: POP
// Say ( Ibrahim , DI-outpost-b-4 ) ;
7550: LD_EXP 22
7554: PPUSH
7555: LD_STRING DI-outpost-b-4
7557: PPUSH
7558: CALL_OW 88
// SetSide ( Ibrahim , 5 ) ;
7562: LD_EXP 22
7566: PPUSH
7567: LD_INT 5
7569: PPUSH
7570: CALL_OW 235
// ComFree ( [ Ibrahim , ruSol ] ) ;
7574: LD_EXP 22
7578: PUSH
7579: LD_EXP 43
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 139
// RemoveSeeing ( 122 , 77 , 2 ) ;
7592: LD_INT 122
7594: PPUSH
7595: LD_INT 77
7597: PPUSH
7598: LD_INT 2
7600: PPUSH
7601: CALL_OW 331
// if Givi then
7605: LD_EXP 20
7609: IFFALSE 7625
// Say ( Givi , DG-1-outpost-b-5 ) else
7611: LD_EXP 20
7615: PPUSH
7616: LD_STRING DG-1-outpost-b-5
7618: PPUSH
7619: CALL_OW 88
7623: GO 7690
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-outpost-b-a-5 ) then
7625: LD_EXP 30
7629: PPUSH
7630: LD_INT 26
7632: PUSH
7633: LD_INT 2
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 72
7644: PUSH
7645: LD_INT 1
7647: ARRAY
7648: PPUSH
7649: LD_STRING DArf-outpost-b-a-5
7651: PPUSH
7652: CALL_OW 88
7656: NOT
7657: IFFALSE 7690
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-outpost-b-a-5 ) ;
7659: LD_EXP 30
7663: PPUSH
7664: LD_INT 26
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 72
7678: PUSH
7679: LD_INT 1
7681: ARRAY
7682: PPUSH
7683: LD_STRING DArm-outpost-b-a-5
7685: PPUSH
7686: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7690: LD_INT 35
7692: PPUSH
7693: CALL_OW 67
// until IsDead ( Ibrahim ) or ( GetDistUnits ( Heike , Ibrahim ) < 6 and IsOk ( Ibrahim ) ) ;
7697: LD_EXP 22
7701: PPUSH
7702: CALL_OW 301
7706: PUSH
7707: LD_EXP 19
7711: PPUSH
7712: LD_EXP 22
7716: PPUSH
7717: CALL_OW 296
7721: PUSH
7722: LD_INT 6
7724: LESS
7725: PUSH
7726: LD_EXP 22
7730: PPUSH
7731: CALL_OW 302
7735: AND
7736: OR
7737: IFFALSE 7690
// if IsDead ( Ibrahim ) then
7739: LD_EXP 22
7743: PPUSH
7744: CALL_OW 301
7748: IFFALSE 7764
// begin Say ( Heike , DH-ibrahimdead-1 ) ;
7750: LD_EXP 19
7754: PPUSH
7755: LD_STRING DH-ibrahimdead-1
7757: PPUSH
7758: CALL_OW 88
// exit ;
7762: GO 7805
// end ; CenterNowOnUnits ( Ibrahim ) ;
7764: LD_EXP 22
7768: PPUSH
7769: CALL_OW 87
// DialogueOn ;
7773: CALL_OW 6
// Say ( Ibrahim , DI-ibrahimlives-1 ) ;
7777: LD_EXP 22
7781: PPUSH
7782: LD_STRING DI-ibrahimlives-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Heike , DH-Ibrahimlives-2 ) ;
7789: LD_EXP 19
7793: PPUSH
7794: LD_STRING DH-Ibrahimlives-2
7796: PPUSH
7797: CALL_OW 88
// DialogueOff ;
7801: CALL_OW 7
// end ;
7805: LD_VAR 0 1
7809: RET
// every 0 0$1 trigger FilterUnitsInArea ( outerArea , [ f_side , 2 ] ) or tick >= [ 9 9$00 , 8 8$00 , 8 8$00 , 7 7$30 ] [ Difficulty ] do
7810: LD_INT 11
7812: PPUSH
7813: LD_INT 22
7815: PUSH
7816: LD_INT 2
7818: PUSH
7819: EMPTY
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 70
7827: PUSH
7828: LD_OWVAR 1
7832: PUSH
7833: LD_INT 18900
7835: PUSH
7836: LD_INT 16800
7838: PUSH
7839: LD_INT 16800
7841: PUSH
7842: LD_INT 15750
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: LD_OWVAR 67
7855: ARRAY
7856: GREATEREQUAL
7857: OR
7858: IFFALSE 8366
7860: GO 7862
7862: DISABLE
// begin outerAreaAchived := true ;
7863: LD_ADDR_EXP 15
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7871: LD_INT 700
7873: PPUSH
7874: CALL_OW 67
// DialogueOn ;
7878: CALL_OW 6
// SayRadio ( Shariff , DShar-radio-1 ) ;
7882: LD_EXP 27
7886: PPUSH
7887: LD_STRING DShar-radio-1
7889: PPUSH
7890: CALL_OW 94
// SayRadio ( Shariff , DShar-radio-2 ) ;
7894: LD_EXP 27
7898: PPUSH
7899: LD_STRING DShar-radio-2
7901: PPUSH
7902: CALL_OW 94
// Say ( Heike , DH-radio-2 ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_STRING DH-radio-2
7913: PPUSH
7914: CALL_OW 88
// DialogueOff ;
7918: CALL_OW 7
// ChangeMissionObjectives ( Gaidar ) ;
7922: LD_STRING Gaidar
7924: PPUSH
7925: CALL_OW 337
// if Difficulty < 3 then
7929: LD_OWVAR 67
7933: PUSH
7934: LD_INT 3
7936: LESS
7937: IFFALSE 8003
// begin DialogueOn ;
7939: CALL_OW 6
// PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
7943: LD_INT 11
7945: PPUSH
7946: LD_INT 14
7948: PPUSH
7949: LD_INT 2
7951: PPUSH
7952: LD_INT 6
7954: NEG
7955: PPUSH
7956: CALL_OW 330
// RemoveSeeing ( 11 , 14 , 2 ) ;
7960: LD_INT 11
7962: PPUSH
7963: LD_INT 14
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: CALL_OW 331
// CenterOnXY ( 11 , 14 ) ;
7973: LD_INT 11
7975: PPUSH
7976: LD_INT 14
7978: PPUSH
7979: CALL_OW 84
// dwait ( 0 0$1 ) ;
7983: LD_INT 35
7985: PPUSH
7986: CALL_OW 68
// CenterNowOnUnits ( Heike ) ;
7990: LD_EXP 19
7994: PPUSH
7995: CALL_OW 87
// DialogueOff ;
7999: CALL_OW 7
// end ; wait ( 1 1$20 + rand ( 0 0$10 , 0 0$15 ) * Difficulty ) ;
8003: LD_INT 2800
8005: PUSH
8006: LD_INT 350
8008: PPUSH
8009: LD_INT 525
8011: PPUSH
8012: CALL_OW 12
8016: PUSH
8017: LD_OWVAR 67
8021: MUL
8022: PLUS
8023: PPUSH
8024: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8028: LD_INT 35
8030: PPUSH
8031: CALL_OW 67
// until HexInfo ( 2 , 1 ) = 0 ;
8035: LD_INT 2
8037: PPUSH
8038: LD_INT 1
8040: PPUSH
8041: CALL_OW 428
8045: PUSH
8046: LD_INT 0
8048: EQUAL
8049: IFFALSE 8028
// SetDir ( Gaidar , 2 ) ;
8051: LD_EXP 36
8055: PPUSH
8056: LD_INT 2
8058: PPUSH
8059: CALL_OW 233
// PlaceUnitXY ( Gaidar , 2 , 1 , false ) ;
8063: LD_EXP 36
8067: PPUSH
8068: LD_INT 2
8070: PPUSH
8071: LD_INT 1
8073: PPUSH
8074: LD_INT 0
8076: PPUSH
8077: CALL_OW 48
// ComMoveXY ( Gaidar , 19 , 24 ) ;
8081: LD_EXP 36
8085: PPUSH
8086: LD_INT 19
8088: PPUSH
8089: LD_INT 24
8091: PPUSH
8092: CALL_OW 111
// if Difficulty < 3 then
8096: LD_OWVAR 67
8100: PUSH
8101: LD_INT 3
8103: LESS
8104: IFFALSE 8143
// begin PlaceSeeing ( 11 , 14 , 2 , - 6 ) ;
8106: LD_INT 11
8108: PPUSH
8109: LD_INT 14
8111: PPUSH
8112: LD_INT 2
8114: PPUSH
8115: LD_INT 6
8117: NEG
8118: PPUSH
8119: CALL_OW 330
// wait ( 0 0$2 ) ;
8123: LD_INT 70
8125: PPUSH
8126: CALL_OW 67
// RemoveSeeing ( 11 , 14 , 2 ) ;
8130: LD_INT 11
8132: PPUSH
8133: LD_INT 14
8135: PPUSH
8136: LD_INT 2
8138: PPUSH
8139: CALL_OW 331
// end ; AddComWait ( Gaidar , 0 0$6 ) ;
8143: LD_EXP 36
8147: PPUSH
8148: LD_INT 210
8150: PPUSH
8151: CALL_OW 202
// AddComMoveXY ( Gaidar , 38 , 47 ) ;
8155: LD_EXP 36
8159: PPUSH
8160: LD_INT 38
8162: PPUSH
8163: LD_INT 47
8165: PPUSH
8166: CALL_OW 171
// AddComMoveXY ( Gaidar , 32 , 59 ) ;
8170: LD_EXP 36
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 59
8180: PPUSH
8181: CALL_OW 171
// AddComWait ( Gaidar , 0 0$10 ) ;
8185: LD_EXP 36
8189: PPUSH
8190: LD_INT 350
8192: PPUSH
8193: CALL_OW 202
// AddComMoveXY ( Gaidar , 62 , 116 ) ;
8197: LD_EXP 36
8201: PPUSH
8202: LD_INT 62
8204: PPUSH
8205: LD_INT 116
8207: PPUSH
8208: CALL_OW 171
// AddComMoveXY ( Gaidar , 92 , 177 ) ;
8212: LD_EXP 36
8216: PPUSH
8217: LD_INT 92
8219: PPUSH
8220: LD_INT 177
8222: PPUSH
8223: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8227: LD_INT 35
8229: PPUSH
8230: CALL_OW 67
// until IsDead ( Gaidar ) or IsAt ( Gaidar , 92 , 177 ) ;
8234: LD_EXP 36
8238: PPUSH
8239: CALL_OW 301
8243: PUSH
8244: LD_EXP 36
8248: PPUSH
8249: LD_INT 92
8251: PPUSH
8252: LD_INT 177
8254: PPUSH
8255: CALL_OW 307
8259: OR
8260: IFFALSE 8227
// if IsAt ( Gaidar , 92 , 177 ) then
8262: LD_EXP 36
8266: PPUSH
8267: LD_INT 92
8269: PPUSH
8270: LD_INT 177
8272: PPUSH
8273: CALL_OW 307
8277: IFFALSE 8344
// begin DialogueOn ;
8279: CALL_OW 6
// PlaceSeeing ( 92 , 177 , 2 , - 3 ) ;
8283: LD_INT 92
8285: PPUSH
8286: LD_INT 177
8288: PPUSH
8289: LD_INT 2
8291: PPUSH
8292: LD_INT 3
8294: NEG
8295: PPUSH
8296: CALL_OW 330
// CenterNowOnUnits ( Gaidar ) ;
8300: LD_EXP 36
8304: PPUSH
8305: CALL_OW 87
// dwait ( 0 0$2 ) ;
8309: LD_INT 70
8311: PPUSH
8312: CALL_OW 68
// RemoveSeeing ( 92 , 177 , 2 ) ;
8316: LD_INT 92
8318: PPUSH
8319: LD_INT 177
8321: PPUSH
8322: LD_INT 2
8324: PPUSH
8325: CALL_OW 331
// DialogueOff ;
8329: CALL_OW 7
// RemoveUnit ( Gaidar ) ;
8333: LD_EXP 36
8337: PPUSH
8338: CALL_OW 64
// exit ;
8342: GO 8366
// end ; gaidarKilled := true ;
8344: LD_ADDR_EXP 14
8348: PUSH
8349: LD_INT 1
8351: ST_TO_ADDR
// ChangeMissionObjectives ( GaidarKilled ) ;
8352: LD_STRING GaidarKilled
8354: PPUSH
8355: CALL_OW 337
// SetAchievement ( ACH_COMMISAR ) ;
8359: LD_STRING ACH_COMMISAR
8361: PPUSH
8362: CALL_OW 543
// end ;
8366: END
// every 0 0$1 trigger See ( 2 , Gaidar ) do
8367: LD_INT 2
8369: PPUSH
8370: LD_EXP 36
8374: PPUSH
8375: CALL_OW 292
8379: IFFALSE 8396
8381: GO 8383
8383: DISABLE
// Say ( Gaidar , DT-objective-1 ) ;
8384: LD_EXP 36
8388: PPUSH
8389: LD_STRING DT-objective-1
8391: PPUSH
8392: CALL_OW 88
8396: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_inarea , zone2 ] , [ f_inarea , zone3 ] , [ f_inarea , zone4 ] ] ] ) do
8397: LD_INT 22
8399: PUSH
8400: LD_INT 2
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 2
8409: PUSH
8410: LD_INT 95
8412: PUSH
8413: LD_INT 5
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: LD_INT 95
8422: PUSH
8423: LD_INT 6
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: PUSH
8430: LD_INT 95
8432: PUSH
8433: LD_INT 7
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PPUSH
8450: CALL_OW 69
8454: IFFALSE 8491
8456: GO 8458
8458: DISABLE
// begin DialogueOn ;
8459: CALL_OW 6
// Say ( Heike , DH-outpost-last-1 ) ;
8463: LD_EXP 19
8467: PPUSH
8468: LD_STRING DH-outpost-last-1
8470: PPUSH
8471: CALL_OW 88
// SayRadio ( Burlak , DB-outpost-last-2 ) ;
8475: LD_EXP 35
8479: PPUSH
8480: LD_STRING DB-outpost-last-2
8482: PPUSH
8483: CALL_OW 94
// DialogueOff ;
8487: CALL_OW 7
// end ;
8491: END
// every 0 0$1 trigger GetLives ( ruMainBase ) < 999 or GetSide ( ruMainBase ) = 2 do var i , tmp ;
8492: LD_INT 200
8494: PPUSH
8495: CALL_OW 256
8499: PUSH
8500: LD_INT 999
8502: LESS
8503: PUSH
8504: LD_INT 200
8506: PPUSH
8507: CALL_OW 255
8511: PUSH
8512: LD_INT 2
8514: EQUAL
8515: OR
8516: IFFALSE 8689
8518: GO 8520
8520: DISABLE
8521: LD_INT 0
8523: PPUSH
8524: PPUSH
// begin if not earlyEscape then
8525: LD_EXP 16
8529: NOT
8530: IFFALSE 8556
// begin SayRadio ( Burlak , DB-end-1 ) ;
8532: LD_EXP 35
8536: PPUSH
8537: LD_STRING DB-end-1
8539: PPUSH
8540: CALL_OW 94
// Say ( Heike , DH-end-2 ) ;
8544: LD_EXP 19
8548: PPUSH
8549: LD_STRING DH-end-2
8551: PPUSH
8552: CALL_OW 88
// end ; if tick <= 15 15$00 then
8556: LD_OWVAR 1
8560: PUSH
8561: LD_INT 31500
8563: LESSEQUAL
8564: IFFALSE 8573
// SetAchievement ( ACH_FIST ) ;
8566: LD_STRING ACH_FIST
8568: PPUSH
8569: CALL_OW 543
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8573: LD_ADDR_VAR 0 2
8577: PUSH
8578: LD_INT 22
8580: PUSH
8581: LD_INT 3
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PPUSH
8609: CALL_OW 69
8613: ST_TO_ADDR
// if not tmp then
8614: LD_VAR 0 2
8618: NOT
8619: IFFALSE 8623
// exit ;
8621: GO 8689
// for i in tmp do
8623: LD_ADDR_VAR 0 1
8627: PUSH
8628: LD_VAR 0 2
8632: PUSH
8633: FOR_IN
8634: IFFALSE 8687
// begin SetTag ( i , tEscape ) ;
8636: LD_VAR 0 1
8640: PPUSH
8641: LD_EXP 18
8645: PPUSH
8646: CALL_OW 109
// if IsInUnit ( i ) then
8650: LD_VAR 0 1
8654: PPUSH
8655: CALL_OW 310
8659: IFFALSE 8670
// ComExitBuilding ( i ) ;
8661: LD_VAR 0 1
8665: PPUSH
8666: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
8670: LD_VAR 0 1
8674: PPUSH
8675: LD_INT 92
8677: PPUSH
8678: LD_INT 177
8680: PPUSH
8681: CALL_OW 171
// end ;
8685: GO 8633
8687: POP
8688: POP
// end ;
8689: PPOPN 2
8691: END
// every 0 0$1 trigger FilterUnitsInArea ( zone1 , [ f_side , 2 ] ) and not outerAreaAchived and IsOk ( Kurt ) do
8692: LD_INT 4
8694: PPUSH
8695: LD_INT 22
8697: PUSH
8698: LD_INT 2
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 70
8709: PUSH
8710: LD_EXP 15
8714: NOT
8715: AND
8716: PUSH
8717: LD_EXP 28
8721: PPUSH
8722: CALL_OW 302
8726: AND
8727: IFFALSE 8967
8729: GO 8731
8731: DISABLE
// begin DialogueOn ;
8732: CALL_OW 6
// PlaceSeeing ( 111 , 54 , 2 , - 16 ) ;
8736: LD_INT 111
8738: PPUSH
8739: LD_INT 54
8741: PPUSH
8742: LD_INT 2
8744: PPUSH
8745: LD_INT 16
8747: NEG
8748: PPUSH
8749: CALL_OW 330
// CenterNowOnXY ( 111 , 53 ) ;
8753: LD_INT 111
8755: PPUSH
8756: LD_INT 53
8758: PPUSH
8759: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
8763: LD_INT 10
8765: PPUSH
8766: CALL_OW 68
// Say ( Kurt , DKs-Hannibal-1 ) ;
8770: LD_EXP 28
8774: PPUSH
8775: LD_STRING DKs-Hannibal-1
8777: PPUSH
8778: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-2 ) ;
8782: LD_EXP 28
8786: PPUSH
8787: LD_STRING DKs-Hannibal-2
8789: PPUSH
8790: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-3 ) ;
8794: LD_EXP 28
8798: PPUSH
8799: LD_STRING DKs-Hannibal-3
8801: PPUSH
8802: CALL_OW 88
// Say ( Kurt , DKs-Hannibal-4 ) ;
8806: LD_EXP 28
8810: PPUSH
8811: LD_STRING DKs-Hannibal-4
8813: PPUSH
8814: CALL_OW 88
// dwait ( 0 0$1 ) ;
8818: LD_INT 35
8820: PPUSH
8821: CALL_OW 68
// RemoveSeeing ( 111 , 54 , 2 ) ;
8825: LD_INT 111
8827: PPUSH
8828: LD_INT 54
8830: PPUSH
8831: LD_INT 2
8833: PPUSH
8834: CALL_OW 331
// PlaceSeeing ( 173 , 76 , 2 , - 12 ) ;
8838: LD_INT 173
8840: PPUSH
8841: LD_INT 76
8843: PPUSH
8844: LD_INT 2
8846: PPUSH
8847: LD_INT 12
8849: NEG
8850: PPUSH
8851: CALL_OW 330
// RemoveSeeing ( 173 , 76 , 2 ) ;
8855: LD_INT 173
8857: PPUSH
8858: LD_INT 76
8860: PPUSH
8861: LD_INT 2
8863: PPUSH
8864: CALL_OW 331
// CenterNowOnXY ( 173 , 76 ) ;
8868: LD_INT 173
8870: PPUSH
8871: LD_INT 76
8873: PPUSH
8874: CALL_OW 86
// Say ( Kurt , DKs-Hannibal-5 ) ;
8878: LD_EXP 28
8882: PPUSH
8883: LD_STRING DKs-Hannibal-5
8885: PPUSH
8886: CALL_OW 88
// if Kamil and not FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) then
8890: LD_EXP 23
8894: PUSH
8895: LD_INT 22
8897: PUSH
8898: LD_INT 2
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: PUSH
8905: LD_INT 34
8907: PUSH
8908: LD_INT 26
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PUSH
8915: EMPTY
8916: LIST
8917: LIST
8918: PPUSH
8919: CALL_OW 69
8923: NOT
8924: AND
8925: IFFALSE 8963
// begin Say ( Kamil , DKam-Hannibal-a-6 ) ;
8927: LD_EXP 23
8931: PPUSH
8932: LD_STRING DKam-Hannibal-a-6
8934: PPUSH
8935: CALL_OW 88
// Say ( Kamil , DKam-Hannibal-a-7 ) ;
8939: LD_EXP 23
8943: PPUSH
8944: LD_STRING DKam-Hannibal-a-7
8946: PPUSH
8947: CALL_OW 88
// Say ( Givi , DG-Hannibal-a-8 ) ;
8951: LD_EXP 20
8955: PPUSH
8956: LD_STRING DG-Hannibal-a-8
8958: PPUSH
8959: CALL_OW 88
// end ; DialogueOff ;
8963: CALL_OW 7
// end ;
8967: END
// every 0 0$1 trigger IsOk ( ruSecBase ) and IsOk ( ruMainBase ) and FilterUnitsInArea ( showDefenceArea , [ f_type , unit_building ] ) > 2 and FilterUnitsInArea ( forestArea , [ f_side , 2 ] ) > 3 do
8968: LD_INT 225
8970: PPUSH
8971: CALL_OW 302
8975: PUSH
8976: LD_INT 200
8978: PPUSH
8979: CALL_OW 302
8983: AND
8984: PUSH
8985: LD_INT 12
8987: PPUSH
8988: LD_INT 21
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PPUSH
8998: CALL_OW 70
9002: PUSH
9003: LD_INT 2
9005: GREATER
9006: AND
9007: PUSH
9008: LD_INT 13
9010: PPUSH
9011: LD_INT 22
9013: PUSH
9014: LD_INT 2
9016: PUSH
9017: EMPTY
9018: LIST
9019: LIST
9020: PPUSH
9021: CALL_OW 70
9025: PUSH
9026: LD_INT 3
9028: GREATER
9029: AND
9030: IFFALSE 9043
9032: GO 9034
9034: DISABLE
// hannibalPath := true ;
9035: LD_ADDR_EXP 9
9039: PUSH
9040: LD_INT 1
9042: ST_TO_ADDR
9043: END
// every 0 0$3 trigger hannibalPath and FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) do var i , tmp , hasFlameThrower ;
9044: LD_EXP 9
9048: PUSH
9049: LD_INT 6
9051: PPUSH
9052: LD_INT 22
9054: PUSH
9055: LD_INT 2
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PPUSH
9062: CALL_OW 70
9066: AND
9067: IFFALSE 9412
9069: GO 9071
9071: DISABLE
9072: LD_INT 0
9074: PPUSH
9075: PPUSH
9076: PPUSH
// begin tmp := FilterUnitsInArea ( zone3 , [ f_side , 2 ] ) ;
9077: LD_ADDR_VAR 0 2
9081: PUSH
9082: LD_INT 6
9084: PPUSH
9085: LD_INT 22
9087: PUSH
9088: LD_INT 2
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: PPUSH
9095: CALL_OW 70
9099: ST_TO_ADDR
// hasFlameThrower := UnitFilter ( tmp , [ f_weapon , ar_flame_thrower ] ) > 0 ;
9100: LD_ADDR_VAR 0 3
9104: PUSH
9105: LD_VAR 0 2
9109: PPUSH
9110: LD_INT 34
9112: PUSH
9113: LD_INT 26
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PPUSH
9120: CALL_OW 72
9124: PUSH
9125: LD_INT 0
9127: GREATER
9128: ST_TO_ADDR
// DialogueOn ;
9129: CALL_OW 6
// Say ( Heike , DH-Cleverattack-1 ) ;
9133: LD_EXP 19
9137: PPUSH
9138: LD_STRING DH-Cleverattack-1
9140: PPUSH
9141: CALL_OW 88
// Say ( Heike , DH-Cleverattack-2 ) ;
9145: LD_EXP 19
9149: PPUSH
9150: LD_STRING DH-Cleverattack-2
9152: PPUSH
9153: CALL_OW 88
// if hasFlameThrower then
9157: LD_VAR 0 3
9161: IFFALSE 9189
// begin SayRadio ( Burlak , DB-Cleverattack-3 ) ;
9163: LD_EXP 35
9167: PPUSH
9168: LD_STRING DB-Cleverattack-3
9170: PPUSH
9171: CALL_OW 94
// Say ( Heike , DH-Cleverattack-4 ) ;
9175: LD_EXP 19
9179: PPUSH
9180: LD_STRING DH-Cleverattack-4
9182: PPUSH
9183: CALL_OW 88
// end else
9187: GO 9213
// begin SayRadio ( Burlak , DB-Cleverattack-a-3 ) ;
9189: LD_EXP 35
9193: PPUSH
9194: LD_STRING DB-Cleverattack-a-3
9196: PPUSH
9197: CALL_OW 94
// Say ( Heike , DH-Cleverattack-a-4 ) ;
9201: LD_EXP 19
9205: PPUSH
9206: LD_STRING DH-Cleverattack-a-4
9208: PPUSH
9209: CALL_OW 88
// end ; DialogueOff ;
9213: CALL_OW 7
// if not hasFlameThrower then
9217: LD_VAR 0 3
9221: NOT
9222: IFFALSE 9226
// exit ;
9224: GO 9412
// earlyEscape := true ;
9226: LD_ADDR_EXP 16
9230: PUSH
9231: LD_INT 1
9233: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9234: LD_INT 140
9236: PPUSH
9237: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 4 ] ] ] ) diff [ Ibrahim , Kuzmov , Gaidar ] ;
9241: LD_ADDR_VAR 0 2
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: EMPTY
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 69
9303: PUSH
9304: LD_EXP 22
9308: PUSH
9309: LD_EXP 37
9313: PUSH
9314: LD_EXP 36
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: DIFF
9324: ST_TO_ADDR
// for i in tmp do
9325: LD_ADDR_VAR 0 1
9329: PUSH
9330: LD_VAR 0 2
9334: PUSH
9335: FOR_IN
9336: IFFALSE 9410
// begin if Prob ( 40 + 10 * Difficulty ) then
9338: LD_INT 40
9340: PUSH
9341: LD_INT 10
9343: PUSH
9344: LD_OWVAR 67
9348: MUL
9349: PLUS
9350: PPUSH
9351: CALL_OW 13
9355: IFFALSE 9359
// continue ;
9357: GO 9335
// SetTag ( i , tEscape ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: LD_EXP 18
9368: PPUSH
9369: CALL_OW 109
// if IsInUnit ( i ) then
9373: LD_VAR 0 1
9377: PPUSH
9378: CALL_OW 310
9382: IFFALSE 9393
// ComExitBuilding ( i ) ;
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 122
// AddComMoveXY ( i , 92 , 177 ) ;
9393: LD_VAR 0 1
9397: PPUSH
9398: LD_INT 92
9400: PPUSH
9401: LD_INT 177
9403: PPUSH
9404: CALL_OW 171
// end ;
9408: GO 9335
9410: POP
9411: POP
// end ;
9412: PPOPN 3
9414: END
// every 0 0$1 trigger FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do var i ;
9415: LD_INT 9
9417: PPUSH
9418: LD_INT 2
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 22
9433: PUSH
9434: LD_INT 6
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 70
9450: IFFALSE 9548
9452: GO 9454
9454: DISABLE
9455: LD_INT 0
9457: PPUSH
// begin enable ;
9458: ENABLE
// for i in FilterUnitsInArea ( escapeArea , [ f_or , [ f_side , 3 ] , [ f_side , 6 ] ] ) do
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_INT 9
9466: PPUSH
9467: LD_INT 2
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 3
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 22
9482: PUSH
9483: LD_INT 6
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: PPUSH
9495: CALL_OW 70
9499: PUSH
9500: FOR_IN
9501: IFFALSE 9546
// if GetTag ( i ) = tEscape or GetSide ( i ) = 6 then
9503: LD_VAR 0 1
9507: PPUSH
9508: CALL_OW 110
9512: PUSH
9513: LD_EXP 18
9517: EQUAL
9518: PUSH
9519: LD_VAR 0 1
9523: PPUSH
9524: CALL_OW 255
9528: PUSH
9529: LD_INT 6
9531: EQUAL
9532: OR
9533: IFFALSE 9544
// RemoveUnit ( i ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: CALL_OW 64
9544: GO 9500
9546: POP
9547: POP
// end ;
9548: PPOPN 1
9550: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
9551: LD_EXP 24
9555: PUSH
9556: LD_EXP 24
9560: PPUSH
9561: CALL_OW 256
9565: PUSH
9566: LD_INT 3
9568: LESS
9569: AND
9570: IFFALSE 9616
9572: GO 9574
9574: DISABLE
// begin DialogueOn ;
9575: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
9579: LD_EXP 24
9583: PPUSH
9584: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
9588: LD_EXP 24
9592: PPUSH
9593: LD_STRING DK-Kkilled-1
9595: PPUSH
9596: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
9600: LD_EXP 19
9604: PPUSH
9605: LD_STRING DH-Kkilled-2
9607: PPUSH
9608: CALL_OW 88
// DialogueOff ;
9612: CALL_OW 7
// end ;
9616: END
// every 0 0$1 trigger kaiaKilledByRussian do
9617: LD_EXP 8
9621: IFFALSE 9638
9623: GO 9625
9625: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
9626: LD_EXP 19
9630: PPUSH
9631: LD_STRING DH-Kkilled-3
9633: PPUSH
9634: CALL_OW 88
9638: END
// every 0 0$1 trigger tick >= 24 24$00 do
9639: LD_OWVAR 1
9643: PUSH
9644: LD_INT 50400
9646: GREATEREQUAL
9647: IFFALSE 9684
9649: GO 9651
9651: DISABLE
// begin DialogueOn ;
9652: CALL_OW 6
// SayRadio ( Shariff , DShar-slow-1 ) ;
9656: LD_EXP 27
9660: PPUSH
9661: LD_STRING DShar-slow-1
9663: PPUSH
9664: CALL_OW 94
// SayRadio ( Shariff , DShar-slow-2 ) ;
9668: LD_EXP 27
9672: PPUSH
9673: LD_STRING DShar-slow-2
9675: PPUSH
9676: CALL_OW 94
// DialogueOff ;
9680: CALL_OW 7
// end ;
9684: END
// every 0 0$1 trigger tick >= [ 40 40$00 , 36 36$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] do
9685: LD_OWVAR 1
9689: PUSH
9690: LD_INT 84000
9692: PUSH
9693: LD_INT 75600
9695: PUSH
9696: LD_INT 67200
9698: PUSH
9699: LD_INT 63000
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: PUSH
9708: LD_OWVAR 67
9712: ARRAY
9713: GREATEREQUAL
9714: IFFALSE 9758
9716: GO 9718
9718: DISABLE
// begin DialogueOn ;
9719: CALL_OW 6
// SayRadio ( Shariff , DShar-fail-1 ) ;
9723: LD_EXP 27
9727: PPUSH
9728: LD_STRING DShar-fail-1
9730: PPUSH
9731: CALL_OW 94
// SayRadio ( Shariff , DShar-fail-2 ) ;
9735: LD_EXP 27
9739: PPUSH
9740: LD_STRING DShar-fail-2
9742: PPUSH
9743: CALL_OW 94
// DialogueOff ;
9747: CALL_OW 7
// YouLost ( Time ) ;
9751: LD_STRING Time
9753: PPUSH
9754: CALL_OW 104
// end ;
9758: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_warehouse ] , [ f_btype , b_depot ] ] ] ) = 0 do var tmp ;
9759: LD_INT 22
9761: PUSH
9762: LD_INT 3
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 2
9771: PUSH
9772: LD_INT 30
9774: PUSH
9775: LD_INT 1
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 30
9784: PUSH
9785: LD_INT 0
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: PUSH
9806: LD_INT 0
9808: EQUAL
9809: IFFALSE 10470
9811: GO 9813
9813: DISABLE
9814: LD_INT 0
9816: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 5 then
9817: LD_INT 22
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: PUSH
9837: LD_INT 21
9839: PUSH
9840: LD_INT 1
9842: PUSH
9843: EMPTY
9844: LIST
9845: LIST
9846: PUSH
9847: LD_INT 50
9849: PUSH
9850: EMPTY
9851: LIST
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: PPUSH
9859: CALL_OW 69
9863: PPUSH
9864: CALL 33434 0 1
9868: PUSH
9869: LD_INT 5
9871: LESS
9872: IFFALSE 9881
// YouLost ( Troops ) ;
9874: LD_STRING Troops
9876: PPUSH
9877: CALL_OW 104
// if ( tick + gameTime ) <= 55 55$00 then
9881: LD_OWVAR 1
9885: PUSH
9886: LD_EXP 5
9890: PLUS
9891: PUSH
9892: LD_INT 115500
9894: LESSEQUAL
9895: IFFALSE 9904
// SetAchievement ( ACH_HSPEED_4 ) ;
9897: LD_STRING ACH_HSPEED_4
9899: PPUSH
9900: CALL_OW 543
// if ( tick + gameTime ) <= [ 85 85$00 , 75 75$00 , 65 65$00 , 60 60$00 ] [ Difficulty ] then
9904: LD_OWVAR 1
9908: PUSH
9909: LD_EXP 5
9913: PLUS
9914: PUSH
9915: LD_INT 178500
9917: PUSH
9918: LD_INT 157500
9920: PUSH
9921: LD_INT 136500
9923: PUSH
9924: LD_INT 126000
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_OWVAR 67
9937: ARRAY
9938: LESSEQUAL
9939: IFFALSE 9953
// AddMedal ( med1 , 1 ) else
9941: LD_STRING med1
9943: PPUSH
9944: LD_INT 1
9946: PPUSH
9947: CALL_OW 101
9951: GO 9964
// AddMedal ( med1 , - 1 ) ;
9953: LD_STRING med1
9955: PPUSH
9956: LD_INT 1
9958: NEG
9959: PPUSH
9960: CALL_OW 101
// if ( flamethrowers >= 3 ) * baseHill * hannibalPath * ( loseCounter < [ 6 , 5 , 4 , 3 ] [ Difficulty ] ) then
9964: LD_EXP 7
9968: PUSH
9969: LD_INT 3
9971: GREATEREQUAL
9972: PUSH
9973: LD_EXP 11
9977: MUL
9978: PUSH
9979: LD_EXP 9
9983: MUL
9984: PUSH
9985: LD_EXP 6
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: LD_INT 4
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: PUSH
10008: LD_OWVAR 67
10012: ARRAY
10013: LESS
10014: MUL
10015: IFFALSE 10029
// AddMedal ( med2 , 1 ) else
10017: LD_STRING med2
10019: PPUSH
10020: LD_INT 1
10022: PPUSH
10023: CALL_OW 101
10027: GO 10103
// if flamethrowers < 3 then
10029: LD_EXP 7
10033: PUSH
10034: LD_INT 3
10036: LESS
10037: IFFALSE 10052
// AddMedal ( med2 , - 1 ) else
10039: LD_STRING med2
10041: PPUSH
10042: LD_INT 1
10044: NEG
10045: PPUSH
10046: CALL_OW 101
10050: GO 10103
// if not baseHill then
10052: LD_EXP 11
10056: NOT
10057: IFFALSE 10072
// AddMedal ( med2 , - 2 ) else
10059: LD_STRING med2
10061: PPUSH
10062: LD_INT 2
10064: NEG
10065: PPUSH
10066: CALL_OW 101
10070: GO 10103
// if not hannibalPath then
10072: LD_EXP 9
10076: NOT
10077: IFFALSE 10092
// AddMedal ( med2 , - 3 ) else
10079: LD_STRING med2
10081: PPUSH
10082: LD_INT 3
10084: NEG
10085: PPUSH
10086: CALL_OW 101
10090: GO 10103
// AddMedal ( med3 , - 2 ) ;
10092: LD_STRING med3
10094: PPUSH
10095: LD_INT 2
10097: NEG
10098: PPUSH
10099: CALL_OW 101
// SaveVariable ( gaidarKilled , 04_2_GaidarKilled ) ;
10103: LD_EXP 14
10107: PPUSH
10108: LD_STRING 04_2_GaidarKilled
10110: PPUSH
10111: CALL_OW 39
// if gaidarKilled then
10115: LD_EXP 14
10119: IFFALSE 10133
// AddMedal ( med3 , 1 ) else
10121: LD_STRING med3
10123: PPUSH
10124: LD_INT 1
10126: PPUSH
10127: CALL_OW 101
10131: GO 10144
// AddMedal ( med3 , - 1 ) ;
10133: LD_STRING med3
10135: PPUSH
10136: LD_INT 1
10138: NEG
10139: PPUSH
10140: CALL_OW 101
// GiveMedals ( MAIN ) ;
10144: LD_STRING MAIN
10146: PPUSH
10147: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_nation , 0 ] ] ] ) ) ;
10151: LD_INT 22
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 3
10163: PUSH
10164: LD_INT 23
10166: PUSH
10167: LD_INT 0
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 69
10186: PPUSH
10187: CALL_OW 43
// SaveCharacters ( Heike , 04_2_Heike ) ;
10191: LD_EXP 19
10195: PPUSH
10196: LD_STRING 04_2_Heike
10198: PPUSH
10199: CALL_OW 38
// if Aviradze then
10203: LD_EXP 29
10207: IFFALSE 10221
// SaveCharacters ( Aviradze , 04_2_Aviradze ) ;
10209: LD_EXP 29
10213: PPUSH
10214: LD_STRING 04_2_Aviradze
10216: PPUSH
10217: CALL_OW 38
// if Ibrahim and GetSide ( Ibrahim ) = 2 then
10221: LD_EXP 22
10225: PUSH
10226: LD_EXP 22
10230: PPUSH
10231: CALL_OW 255
10235: PUSH
10236: LD_INT 2
10238: EQUAL
10239: AND
10240: IFFALSE 10270
// begin if ibrahimOnRuSide then
10242: LD_EXP 3
10246: IFFALSE 10258
// SaveVariable ( true , 04_2_IbrahimJoined ) ;
10248: LD_INT 1
10250: PPUSH
10251: LD_STRING 04_2_IbrahimJoined
10253: PPUSH
10254: CALL_OW 39
// SaveCharacters ( Ibrahim , 04_2_Ibrahim ) ;
10258: LD_EXP 22
10262: PPUSH
10263: LD_STRING 04_2_Ibrahim
10265: PPUSH
10266: CALL_OW 38
// end ; if Kamil then
10270: LD_EXP 23
10274: IFFALSE 10288
// SaveCharacters ( Kamil , 04_2_Kamil ) ;
10276: LD_EXP 23
10280: PPUSH
10281: LD_STRING 04_2_Kamil
10283: PPUSH
10284: CALL_OW 38
// if Sophia then
10288: LD_EXP 25
10292: IFFALSE 10306
// SaveCharacters ( Sophia , 04_2_Sophia ) ;
10294: LD_EXP 25
10298: PPUSH
10299: LD_STRING 04_2_Sophia
10301: PPUSH
10302: CALL_OW 38
// if Kaia then
10306: LD_EXP 24
10310: IFFALSE 10324
// SaveCharacters ( Kaia , 04_2_Kaia ) ;
10312: LD_EXP 24
10316: PPUSH
10317: LD_STRING 04_2_Kaia
10319: PPUSH
10320: CALL_OW 38
// if Givi then
10324: LD_EXP 20
10328: IFFALSE 10342
// SaveCharacters ( Givi , 04_2_Givi ) ;
10330: LD_EXP 20
10334: PPUSH
10335: LD_STRING 04_2_Givi
10337: PPUSH
10338: CALL_OW 38
// if Mike then
10342: LD_EXP 21
10346: IFFALSE 10360
// SaveCharacters ( Mike , 04_2_Mike ) ;
10348: LD_EXP 21
10352: PPUSH
10353: LD_STRING 04_2_Mike
10355: PPUSH
10356: CALL_OW 38
// if Markov then
10360: LD_EXP 26
10364: IFFALSE 10378
// SaveCharacters ( Markov , 04_2_Markov ) ;
10366: LD_EXP 26
10370: PPUSH
10371: LD_STRING 04_2_Markov
10373: PPUSH
10374: CALL_OW 38
// if Kurt then
10378: LD_EXP 28
10382: IFFALSE 10396
// SaveCharacters ( Kurt , 04_2_Kurt ) ;
10384: LD_EXP 28
10388: PPUSH
10389: LD_STRING 04_2_Kurt
10391: PPUSH
10392: CALL_OW 38
// if heikeSecondSquad then
10396: LD_EXP 30
10400: IFFALSE 10414
// SaveCharacters ( heikeSecondSquad , 04_2_others ) ;
10402: LD_EXP 30
10406: PPUSH
10407: LD_STRING 04_2_others
10409: PPUSH
10410: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 2
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 23
10431: PUSH
10432: LD_INT 0
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 69
10447: ST_TO_ADDR
// if tmp then
10448: LD_VAR 0 1
10452: IFFALSE 10466
// SaveCharacters ( tmp , 04_2_apes ) ;
10454: LD_VAR 0 1
10458: PPUSH
10459: LD_STRING 04_2_apes
10461: PPUSH
10462: CALL_OW 38
// YouWin ;
10466: CALL_OW 103
// end ; end_of_file
10470: PPOPN 1
10472: END
// export globalGameSaveCounter ; every 0 0$1 do
10473: GO 10475
10475: DISABLE
// begin enable ;
10476: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
10477: LD_STRING updateTimer(
10479: PUSH
10480: LD_OWVAR 1
10484: STR
10485: PUSH
10486: LD_STRING );
10488: STR
10489: PPUSH
10490: CALL_OW 559
// end ;
10494: END
// every 0 0$1 do
10495: GO 10497
10497: DISABLE
// begin globalGameSaveCounter := 0 ;
10498: LD_ADDR_EXP 44
10502: PUSH
10503: LD_INT 0
10505: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
10506: LD_STRING setGameSaveCounter(0)
10508: PPUSH
10509: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
10513: LD_STRING initStreamRollete();
10515: PPUSH
10516: CALL_OW 559
// InitStreamMode ;
10520: CALL 11846 0 0
// DefineStreamItems ( false ) ;
10524: LD_INT 0
10526: PPUSH
10527: CALL 12310 0 1
// end ;
10531: END
// export function SOS_MapStart ( ) ; begin
10532: LD_INT 0
10534: PPUSH
// if streamModeActive then
10535: LD_EXP 45
10539: IFFALSE 10548
// DefineStreamItems ( true ) ;
10541: LD_INT 1
10543: PPUSH
10544: CALL 12310 0 1
// UpdateLuaVariables ( ) ;
10548: CALL 10565 0 0
// UpdateFactoryWaypoints ( ) ;
10552: CALL 25179 0 0
// UpdateWarehouseGatheringPoints ( ) ;
10556: CALL 25436 0 0
// end ;
10560: LD_VAR 0 1
10564: RET
// function UpdateLuaVariables ( ) ; begin
10565: LD_INT 0
10567: PPUSH
// if globalGameSaveCounter then
10568: LD_EXP 44
10572: IFFALSE 10606
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
10574: LD_ADDR_EXP 44
10578: PUSH
10579: LD_EXP 44
10583: PPUSH
10584: CALL 70395 0 1
10588: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10589: LD_STRING setGameSaveCounter(
10591: PUSH
10592: LD_EXP 44
10596: STR
10597: PUSH
10598: LD_STRING )
10600: STR
10601: PPUSH
10602: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
10606: LD_STRING setGameDifficulty(
10608: PUSH
10609: LD_OWVAR 67
10613: STR
10614: PUSH
10615: LD_STRING )
10617: STR
10618: PPUSH
10619: CALL_OW 559
// end ;
10623: LD_VAR 0 1
10627: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
10628: LD_INT 0
10630: PPUSH
// if p2 = stream_mode then
10631: LD_VAR 0 2
10635: PUSH
10636: LD_INT 100
10638: EQUAL
10639: IFFALSE 11642
// begin if not StreamModeActive then
10641: LD_EXP 45
10645: NOT
10646: IFFALSE 10656
// StreamModeActive := true ;
10648: LD_ADDR_EXP 45
10652: PUSH
10653: LD_INT 1
10655: ST_TO_ADDR
// if p3 = 0 then
10656: LD_VAR 0 3
10660: PUSH
10661: LD_INT 0
10663: EQUAL
10664: IFFALSE 10670
// InitStreamMode ;
10666: CALL 11846 0 0
// if p3 = 1 then
10670: LD_VAR 0 3
10674: PUSH
10675: LD_INT 1
10677: EQUAL
10678: IFFALSE 10688
// sRocket := true ;
10680: LD_ADDR_EXP 50
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// if p3 = 2 then
10688: LD_VAR 0 3
10692: PUSH
10693: LD_INT 2
10695: EQUAL
10696: IFFALSE 10706
// sSpeed := true ;
10698: LD_ADDR_EXP 49
10702: PUSH
10703: LD_INT 1
10705: ST_TO_ADDR
// if p3 = 3 then
10706: LD_VAR 0 3
10710: PUSH
10711: LD_INT 3
10713: EQUAL
10714: IFFALSE 10724
// sEngine := true ;
10716: LD_ADDR_EXP 51
10720: PUSH
10721: LD_INT 1
10723: ST_TO_ADDR
// if p3 = 4 then
10724: LD_VAR 0 3
10728: PUSH
10729: LD_INT 4
10731: EQUAL
10732: IFFALSE 10742
// sSpec := true ;
10734: LD_ADDR_EXP 48
10738: PUSH
10739: LD_INT 1
10741: ST_TO_ADDR
// if p3 = 5 then
10742: LD_VAR 0 3
10746: PUSH
10747: LD_INT 5
10749: EQUAL
10750: IFFALSE 10760
// sLevel := true ;
10752: LD_ADDR_EXP 52
10756: PUSH
10757: LD_INT 1
10759: ST_TO_ADDR
// if p3 = 6 then
10760: LD_VAR 0 3
10764: PUSH
10765: LD_INT 6
10767: EQUAL
10768: IFFALSE 10778
// sArmoury := true ;
10770: LD_ADDR_EXP 53
10774: PUSH
10775: LD_INT 1
10777: ST_TO_ADDR
// if p3 = 7 then
10778: LD_VAR 0 3
10782: PUSH
10783: LD_INT 7
10785: EQUAL
10786: IFFALSE 10796
// sRadar := true ;
10788: LD_ADDR_EXP 54
10792: PUSH
10793: LD_INT 1
10795: ST_TO_ADDR
// if p3 = 8 then
10796: LD_VAR 0 3
10800: PUSH
10801: LD_INT 8
10803: EQUAL
10804: IFFALSE 10814
// sBunker := true ;
10806: LD_ADDR_EXP 55
10810: PUSH
10811: LD_INT 1
10813: ST_TO_ADDR
// if p3 = 9 then
10814: LD_VAR 0 3
10818: PUSH
10819: LD_INT 9
10821: EQUAL
10822: IFFALSE 10832
// sHack := true ;
10824: LD_ADDR_EXP 56
10828: PUSH
10829: LD_INT 1
10831: ST_TO_ADDR
// if p3 = 10 then
10832: LD_VAR 0 3
10836: PUSH
10837: LD_INT 10
10839: EQUAL
10840: IFFALSE 10850
// sFire := true ;
10842: LD_ADDR_EXP 57
10846: PUSH
10847: LD_INT 1
10849: ST_TO_ADDR
// if p3 = 11 then
10850: LD_VAR 0 3
10854: PUSH
10855: LD_INT 11
10857: EQUAL
10858: IFFALSE 10868
// sRefresh := true ;
10860: LD_ADDR_EXP 58
10864: PUSH
10865: LD_INT 1
10867: ST_TO_ADDR
// if p3 = 12 then
10868: LD_VAR 0 3
10872: PUSH
10873: LD_INT 12
10875: EQUAL
10876: IFFALSE 10886
// sExp := true ;
10878: LD_ADDR_EXP 59
10882: PUSH
10883: LD_INT 1
10885: ST_TO_ADDR
// if p3 = 13 then
10886: LD_VAR 0 3
10890: PUSH
10891: LD_INT 13
10893: EQUAL
10894: IFFALSE 10904
// sDepot := true ;
10896: LD_ADDR_EXP 60
10900: PUSH
10901: LD_INT 1
10903: ST_TO_ADDR
// if p3 = 14 then
10904: LD_VAR 0 3
10908: PUSH
10909: LD_INT 14
10911: EQUAL
10912: IFFALSE 10922
// sFlag := true ;
10914: LD_ADDR_EXP 61
10918: PUSH
10919: LD_INT 1
10921: ST_TO_ADDR
// if p3 = 15 then
10922: LD_VAR 0 3
10926: PUSH
10927: LD_INT 15
10929: EQUAL
10930: IFFALSE 10940
// sKamikadze := true ;
10932: LD_ADDR_EXP 69
10936: PUSH
10937: LD_INT 1
10939: ST_TO_ADDR
// if p3 = 16 then
10940: LD_VAR 0 3
10944: PUSH
10945: LD_INT 16
10947: EQUAL
10948: IFFALSE 10958
// sTroll := true ;
10950: LD_ADDR_EXP 70
10954: PUSH
10955: LD_INT 1
10957: ST_TO_ADDR
// if p3 = 17 then
10958: LD_VAR 0 3
10962: PUSH
10963: LD_INT 17
10965: EQUAL
10966: IFFALSE 10976
// sSlow := true ;
10968: LD_ADDR_EXP 71
10972: PUSH
10973: LD_INT 1
10975: ST_TO_ADDR
// if p3 = 18 then
10976: LD_VAR 0 3
10980: PUSH
10981: LD_INT 18
10983: EQUAL
10984: IFFALSE 10994
// sLack := true ;
10986: LD_ADDR_EXP 72
10990: PUSH
10991: LD_INT 1
10993: ST_TO_ADDR
// if p3 = 19 then
10994: LD_VAR 0 3
10998: PUSH
10999: LD_INT 19
11001: EQUAL
11002: IFFALSE 11012
// sTank := true ;
11004: LD_ADDR_EXP 74
11008: PUSH
11009: LD_INT 1
11011: ST_TO_ADDR
// if p3 = 20 then
11012: LD_VAR 0 3
11016: PUSH
11017: LD_INT 20
11019: EQUAL
11020: IFFALSE 11030
// sRemote := true ;
11022: LD_ADDR_EXP 75
11026: PUSH
11027: LD_INT 1
11029: ST_TO_ADDR
// if p3 = 21 then
11030: LD_VAR 0 3
11034: PUSH
11035: LD_INT 21
11037: EQUAL
11038: IFFALSE 11048
// sPowell := true ;
11040: LD_ADDR_EXP 76
11044: PUSH
11045: LD_INT 1
11047: ST_TO_ADDR
// if p3 = 22 then
11048: LD_VAR 0 3
11052: PUSH
11053: LD_INT 22
11055: EQUAL
11056: IFFALSE 11066
// sTeleport := true ;
11058: LD_ADDR_EXP 79
11062: PUSH
11063: LD_INT 1
11065: ST_TO_ADDR
// if p3 = 23 then
11066: LD_VAR 0 3
11070: PUSH
11071: LD_INT 23
11073: EQUAL
11074: IFFALSE 11084
// sOilTower := true ;
11076: LD_ADDR_EXP 81
11080: PUSH
11081: LD_INT 1
11083: ST_TO_ADDR
// if p3 = 24 then
11084: LD_VAR 0 3
11088: PUSH
11089: LD_INT 24
11091: EQUAL
11092: IFFALSE 11102
// sShovel := true ;
11094: LD_ADDR_EXP 82
11098: PUSH
11099: LD_INT 1
11101: ST_TO_ADDR
// if p3 = 25 then
11102: LD_VAR 0 3
11106: PUSH
11107: LD_INT 25
11109: EQUAL
11110: IFFALSE 11120
// sSheik := true ;
11112: LD_ADDR_EXP 83
11116: PUSH
11117: LD_INT 1
11119: ST_TO_ADDR
// if p3 = 26 then
11120: LD_VAR 0 3
11124: PUSH
11125: LD_INT 26
11127: EQUAL
11128: IFFALSE 11138
// sEarthquake := true ;
11130: LD_ADDR_EXP 85
11134: PUSH
11135: LD_INT 1
11137: ST_TO_ADDR
// if p3 = 27 then
11138: LD_VAR 0 3
11142: PUSH
11143: LD_INT 27
11145: EQUAL
11146: IFFALSE 11156
// sAI := true ;
11148: LD_ADDR_EXP 86
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// if p3 = 28 then
11156: LD_VAR 0 3
11160: PUSH
11161: LD_INT 28
11163: EQUAL
11164: IFFALSE 11174
// sCargo := true ;
11166: LD_ADDR_EXP 89
11170: PUSH
11171: LD_INT 1
11173: ST_TO_ADDR
// if p3 = 29 then
11174: LD_VAR 0 3
11178: PUSH
11179: LD_INT 29
11181: EQUAL
11182: IFFALSE 11192
// sDLaser := true ;
11184: LD_ADDR_EXP 90
11188: PUSH
11189: LD_INT 1
11191: ST_TO_ADDR
// if p3 = 30 then
11192: LD_VAR 0 3
11196: PUSH
11197: LD_INT 30
11199: EQUAL
11200: IFFALSE 11210
// sExchange := true ;
11202: LD_ADDR_EXP 91
11206: PUSH
11207: LD_INT 1
11209: ST_TO_ADDR
// if p3 = 31 then
11210: LD_VAR 0 3
11214: PUSH
11215: LD_INT 31
11217: EQUAL
11218: IFFALSE 11228
// sFac := true ;
11220: LD_ADDR_EXP 92
11224: PUSH
11225: LD_INT 1
11227: ST_TO_ADDR
// if p3 = 32 then
11228: LD_VAR 0 3
11232: PUSH
11233: LD_INT 32
11235: EQUAL
11236: IFFALSE 11246
// sPower := true ;
11238: LD_ADDR_EXP 93
11242: PUSH
11243: LD_INT 1
11245: ST_TO_ADDR
// if p3 = 33 then
11246: LD_VAR 0 3
11250: PUSH
11251: LD_INT 33
11253: EQUAL
11254: IFFALSE 11264
// sRandom := true ;
11256: LD_ADDR_EXP 94
11260: PUSH
11261: LD_INT 1
11263: ST_TO_ADDR
// if p3 = 34 then
11264: LD_VAR 0 3
11268: PUSH
11269: LD_INT 34
11271: EQUAL
11272: IFFALSE 11282
// sShield := true ;
11274: LD_ADDR_EXP 95
11278: PUSH
11279: LD_INT 1
11281: ST_TO_ADDR
// if p3 = 35 then
11282: LD_VAR 0 3
11286: PUSH
11287: LD_INT 35
11289: EQUAL
11290: IFFALSE 11300
// sTime := true ;
11292: LD_ADDR_EXP 96
11296: PUSH
11297: LD_INT 1
11299: ST_TO_ADDR
// if p3 = 36 then
11300: LD_VAR 0 3
11304: PUSH
11305: LD_INT 36
11307: EQUAL
11308: IFFALSE 11318
// sTools := true ;
11310: LD_ADDR_EXP 97
11314: PUSH
11315: LD_INT 1
11317: ST_TO_ADDR
// if p3 = 101 then
11318: LD_VAR 0 3
11322: PUSH
11323: LD_INT 101
11325: EQUAL
11326: IFFALSE 11336
// sSold := true ;
11328: LD_ADDR_EXP 62
11332: PUSH
11333: LD_INT 1
11335: ST_TO_ADDR
// if p3 = 102 then
11336: LD_VAR 0 3
11340: PUSH
11341: LD_INT 102
11343: EQUAL
11344: IFFALSE 11354
// sDiff := true ;
11346: LD_ADDR_EXP 63
11350: PUSH
11351: LD_INT 1
11353: ST_TO_ADDR
// if p3 = 103 then
11354: LD_VAR 0 3
11358: PUSH
11359: LD_INT 103
11361: EQUAL
11362: IFFALSE 11372
// sFog := true ;
11364: LD_ADDR_EXP 66
11368: PUSH
11369: LD_INT 1
11371: ST_TO_ADDR
// if p3 = 104 then
11372: LD_VAR 0 3
11376: PUSH
11377: LD_INT 104
11379: EQUAL
11380: IFFALSE 11390
// sReset := true ;
11382: LD_ADDR_EXP 67
11386: PUSH
11387: LD_INT 1
11389: ST_TO_ADDR
// if p3 = 105 then
11390: LD_VAR 0 3
11394: PUSH
11395: LD_INT 105
11397: EQUAL
11398: IFFALSE 11408
// sSun := true ;
11400: LD_ADDR_EXP 68
11404: PUSH
11405: LD_INT 1
11407: ST_TO_ADDR
// if p3 = 106 then
11408: LD_VAR 0 3
11412: PUSH
11413: LD_INT 106
11415: EQUAL
11416: IFFALSE 11426
// sTiger := true ;
11418: LD_ADDR_EXP 64
11422: PUSH
11423: LD_INT 1
11425: ST_TO_ADDR
// if p3 = 107 then
11426: LD_VAR 0 3
11430: PUSH
11431: LD_INT 107
11433: EQUAL
11434: IFFALSE 11444
// sBomb := true ;
11436: LD_ADDR_EXP 65
11440: PUSH
11441: LD_INT 1
11443: ST_TO_ADDR
// if p3 = 108 then
11444: LD_VAR 0 3
11448: PUSH
11449: LD_INT 108
11451: EQUAL
11452: IFFALSE 11462
// sWound := true ;
11454: LD_ADDR_EXP 73
11458: PUSH
11459: LD_INT 1
11461: ST_TO_ADDR
// if p3 = 109 then
11462: LD_VAR 0 3
11466: PUSH
11467: LD_INT 109
11469: EQUAL
11470: IFFALSE 11480
// sBetray := true ;
11472: LD_ADDR_EXP 77
11476: PUSH
11477: LD_INT 1
11479: ST_TO_ADDR
// if p3 = 110 then
11480: LD_VAR 0 3
11484: PUSH
11485: LD_INT 110
11487: EQUAL
11488: IFFALSE 11498
// sContamin := true ;
11490: LD_ADDR_EXP 78
11494: PUSH
11495: LD_INT 1
11497: ST_TO_ADDR
// if p3 = 111 then
11498: LD_VAR 0 3
11502: PUSH
11503: LD_INT 111
11505: EQUAL
11506: IFFALSE 11516
// sOil := true ;
11508: LD_ADDR_EXP 80
11512: PUSH
11513: LD_INT 1
11515: ST_TO_ADDR
// if p3 = 112 then
11516: LD_VAR 0 3
11520: PUSH
11521: LD_INT 112
11523: EQUAL
11524: IFFALSE 11534
// sStu := true ;
11526: LD_ADDR_EXP 84
11530: PUSH
11531: LD_INT 1
11533: ST_TO_ADDR
// if p3 = 113 then
11534: LD_VAR 0 3
11538: PUSH
11539: LD_INT 113
11541: EQUAL
11542: IFFALSE 11552
// sBazooka := true ;
11544: LD_ADDR_EXP 87
11548: PUSH
11549: LD_INT 1
11551: ST_TO_ADDR
// if p3 = 114 then
11552: LD_VAR 0 3
11556: PUSH
11557: LD_INT 114
11559: EQUAL
11560: IFFALSE 11570
// sMortar := true ;
11562: LD_ADDR_EXP 88
11566: PUSH
11567: LD_INT 1
11569: ST_TO_ADDR
// if p3 = 115 then
11570: LD_VAR 0 3
11574: PUSH
11575: LD_INT 115
11577: EQUAL
11578: IFFALSE 11588
// sRanger := true ;
11580: LD_ADDR_EXP 98
11584: PUSH
11585: LD_INT 1
11587: ST_TO_ADDR
// if p3 = 116 then
11588: LD_VAR 0 3
11592: PUSH
11593: LD_INT 116
11595: EQUAL
11596: IFFALSE 11606
// sComputer := true ;
11598: LD_ADDR_EXP 99
11602: PUSH
11603: LD_INT 1
11605: ST_TO_ADDR
// if p3 = 117 then
11606: LD_VAR 0 3
11610: PUSH
11611: LD_INT 117
11613: EQUAL
11614: IFFALSE 11624
// s30 := true ;
11616: LD_ADDR_EXP 100
11620: PUSH
11621: LD_INT 1
11623: ST_TO_ADDR
// if p3 = 118 then
11624: LD_VAR 0 3
11628: PUSH
11629: LD_INT 118
11631: EQUAL
11632: IFFALSE 11642
// s60 := true ;
11634: LD_ADDR_EXP 101
11638: PUSH
11639: LD_INT 1
11641: ST_TO_ADDR
// end ; if p2 = hack_mode then
11642: LD_VAR 0 2
11646: PUSH
11647: LD_INT 101
11649: EQUAL
11650: IFFALSE 11778
// begin case p3 of 1 :
11652: LD_VAR 0 3
11656: PUSH
11657: LD_INT 1
11659: DOUBLE
11660: EQUAL
11661: IFTRUE 11665
11663: GO 11672
11665: POP
// hHackUnlimitedResources ; 2 :
11666: CALL 23925 0 0
11670: GO 11778
11672: LD_INT 2
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11687
11680: POP
// hHackSetLevel10 ; 3 :
11681: CALL 24058 0 0
11685: GO 11778
11687: LD_INT 3
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11702
11695: POP
// hHackSetLevel10YourUnits ; 4 :
11696: CALL 24143 0 0
11700: GO 11778
11702: LD_INT 4
11704: DOUBLE
11705: EQUAL
11706: IFTRUE 11710
11708: GO 11717
11710: POP
// hHackInvincible ; 5 :
11711: CALL 24591 0 0
11715: GO 11778
11717: LD_INT 5
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11732
11725: POP
// hHackInvisible ; 6 :
11726: CALL 24702 0 0
11730: GO 11778
11732: LD_INT 6
11734: DOUBLE
11735: EQUAL
11736: IFTRUE 11740
11738: GO 11747
11740: POP
// hHackChangeYourSide ; 7 :
11741: CALL 24759 0 0
11745: GO 11778
11747: LD_INT 7
11749: DOUBLE
11750: EQUAL
11751: IFTRUE 11755
11753: GO 11762
11755: POP
// hHackChangeUnitSide ; 8 :
11756: CALL 24801 0 0
11760: GO 11778
11762: LD_INT 8
11764: DOUBLE
11765: EQUAL
11766: IFTRUE 11770
11768: GO 11777
11770: POP
// hHackFog ; end ;
11771: CALL 24902 0 0
11775: GO 11778
11777: POP
// end ; if p2 = game_save_mode then
11778: LD_VAR 0 2
11782: PUSH
11783: LD_INT 102
11785: EQUAL
11786: IFFALSE 11841
// begin if p3 = 1 then
11788: LD_VAR 0 3
11792: PUSH
11793: LD_INT 1
11795: EQUAL
11796: IFFALSE 11808
// globalGameSaveCounter := p4 ;
11798: LD_ADDR_EXP 44
11802: PUSH
11803: LD_VAR 0 4
11807: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
11808: LD_VAR 0 3
11812: PUSH
11813: LD_INT 2
11815: EQUAL
11816: PUSH
11817: LD_EXP 44
11821: AND
11822: IFFALSE 11841
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
11824: LD_STRING setGameSaveCounter(
11826: PUSH
11827: LD_EXP 44
11831: STR
11832: PUSH
11833: LD_STRING )
11835: STR
11836: PPUSH
11837: CALL_OW 559
// end ; end ;
11841: LD_VAR 0 7
11845: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
11846: LD_INT 0
11848: PPUSH
// streamModeActive := false ;
11849: LD_ADDR_EXP 45
11853: PUSH
11854: LD_INT 0
11856: ST_TO_ADDR
// normalCounter := 36 ;
11857: LD_ADDR_EXP 46
11861: PUSH
11862: LD_INT 36
11864: ST_TO_ADDR
// hardcoreCounter := 18 ;
11865: LD_ADDR_EXP 47
11869: PUSH
11870: LD_INT 18
11872: ST_TO_ADDR
// sRocket := false ;
11873: LD_ADDR_EXP 50
11877: PUSH
11878: LD_INT 0
11880: ST_TO_ADDR
// sSpeed := false ;
11881: LD_ADDR_EXP 49
11885: PUSH
11886: LD_INT 0
11888: ST_TO_ADDR
// sEngine := false ;
11889: LD_ADDR_EXP 51
11893: PUSH
11894: LD_INT 0
11896: ST_TO_ADDR
// sSpec := false ;
11897: LD_ADDR_EXP 48
11901: PUSH
11902: LD_INT 0
11904: ST_TO_ADDR
// sLevel := false ;
11905: LD_ADDR_EXP 52
11909: PUSH
11910: LD_INT 0
11912: ST_TO_ADDR
// sArmoury := false ;
11913: LD_ADDR_EXP 53
11917: PUSH
11918: LD_INT 0
11920: ST_TO_ADDR
// sRadar := false ;
11921: LD_ADDR_EXP 54
11925: PUSH
11926: LD_INT 0
11928: ST_TO_ADDR
// sBunker := false ;
11929: LD_ADDR_EXP 55
11933: PUSH
11934: LD_INT 0
11936: ST_TO_ADDR
// sHack := false ;
11937: LD_ADDR_EXP 56
11941: PUSH
11942: LD_INT 0
11944: ST_TO_ADDR
// sFire := false ;
11945: LD_ADDR_EXP 57
11949: PUSH
11950: LD_INT 0
11952: ST_TO_ADDR
// sRefresh := false ;
11953: LD_ADDR_EXP 58
11957: PUSH
11958: LD_INT 0
11960: ST_TO_ADDR
// sExp := false ;
11961: LD_ADDR_EXP 59
11965: PUSH
11966: LD_INT 0
11968: ST_TO_ADDR
// sDepot := false ;
11969: LD_ADDR_EXP 60
11973: PUSH
11974: LD_INT 0
11976: ST_TO_ADDR
// sFlag := false ;
11977: LD_ADDR_EXP 61
11981: PUSH
11982: LD_INT 0
11984: ST_TO_ADDR
// sKamikadze := false ;
11985: LD_ADDR_EXP 69
11989: PUSH
11990: LD_INT 0
11992: ST_TO_ADDR
// sTroll := false ;
11993: LD_ADDR_EXP 70
11997: PUSH
11998: LD_INT 0
12000: ST_TO_ADDR
// sSlow := false ;
12001: LD_ADDR_EXP 71
12005: PUSH
12006: LD_INT 0
12008: ST_TO_ADDR
// sLack := false ;
12009: LD_ADDR_EXP 72
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// sTank := false ;
12017: LD_ADDR_EXP 74
12021: PUSH
12022: LD_INT 0
12024: ST_TO_ADDR
// sRemote := false ;
12025: LD_ADDR_EXP 75
12029: PUSH
12030: LD_INT 0
12032: ST_TO_ADDR
// sPowell := false ;
12033: LD_ADDR_EXP 76
12037: PUSH
12038: LD_INT 0
12040: ST_TO_ADDR
// sTeleport := false ;
12041: LD_ADDR_EXP 79
12045: PUSH
12046: LD_INT 0
12048: ST_TO_ADDR
// sOilTower := false ;
12049: LD_ADDR_EXP 81
12053: PUSH
12054: LD_INT 0
12056: ST_TO_ADDR
// sShovel := false ;
12057: LD_ADDR_EXP 82
12061: PUSH
12062: LD_INT 0
12064: ST_TO_ADDR
// sSheik := false ;
12065: LD_ADDR_EXP 83
12069: PUSH
12070: LD_INT 0
12072: ST_TO_ADDR
// sEarthquake := false ;
12073: LD_ADDR_EXP 85
12077: PUSH
12078: LD_INT 0
12080: ST_TO_ADDR
// sAI := false ;
12081: LD_ADDR_EXP 86
12085: PUSH
12086: LD_INT 0
12088: ST_TO_ADDR
// sCargo := false ;
12089: LD_ADDR_EXP 89
12093: PUSH
12094: LD_INT 0
12096: ST_TO_ADDR
// sDLaser := false ;
12097: LD_ADDR_EXP 90
12101: PUSH
12102: LD_INT 0
12104: ST_TO_ADDR
// sExchange := false ;
12105: LD_ADDR_EXP 91
12109: PUSH
12110: LD_INT 0
12112: ST_TO_ADDR
// sFac := false ;
12113: LD_ADDR_EXP 92
12117: PUSH
12118: LD_INT 0
12120: ST_TO_ADDR
// sPower := false ;
12121: LD_ADDR_EXP 93
12125: PUSH
12126: LD_INT 0
12128: ST_TO_ADDR
// sRandom := false ;
12129: LD_ADDR_EXP 94
12133: PUSH
12134: LD_INT 0
12136: ST_TO_ADDR
// sShield := false ;
12137: LD_ADDR_EXP 95
12141: PUSH
12142: LD_INT 0
12144: ST_TO_ADDR
// sTime := false ;
12145: LD_ADDR_EXP 96
12149: PUSH
12150: LD_INT 0
12152: ST_TO_ADDR
// sTools := false ;
12153: LD_ADDR_EXP 97
12157: PUSH
12158: LD_INT 0
12160: ST_TO_ADDR
// sSold := false ;
12161: LD_ADDR_EXP 62
12165: PUSH
12166: LD_INT 0
12168: ST_TO_ADDR
// sDiff := false ;
12169: LD_ADDR_EXP 63
12173: PUSH
12174: LD_INT 0
12176: ST_TO_ADDR
// sFog := false ;
12177: LD_ADDR_EXP 66
12181: PUSH
12182: LD_INT 0
12184: ST_TO_ADDR
// sReset := false ;
12185: LD_ADDR_EXP 67
12189: PUSH
12190: LD_INT 0
12192: ST_TO_ADDR
// sSun := false ;
12193: LD_ADDR_EXP 68
12197: PUSH
12198: LD_INT 0
12200: ST_TO_ADDR
// sTiger := false ;
12201: LD_ADDR_EXP 64
12205: PUSH
12206: LD_INT 0
12208: ST_TO_ADDR
// sBomb := false ;
12209: LD_ADDR_EXP 65
12213: PUSH
12214: LD_INT 0
12216: ST_TO_ADDR
// sWound := false ;
12217: LD_ADDR_EXP 73
12221: PUSH
12222: LD_INT 0
12224: ST_TO_ADDR
// sBetray := false ;
12225: LD_ADDR_EXP 77
12229: PUSH
12230: LD_INT 0
12232: ST_TO_ADDR
// sContamin := false ;
12233: LD_ADDR_EXP 78
12237: PUSH
12238: LD_INT 0
12240: ST_TO_ADDR
// sOil := false ;
12241: LD_ADDR_EXP 80
12245: PUSH
12246: LD_INT 0
12248: ST_TO_ADDR
// sStu := false ;
12249: LD_ADDR_EXP 84
12253: PUSH
12254: LD_INT 0
12256: ST_TO_ADDR
// sBazooka := false ;
12257: LD_ADDR_EXP 87
12261: PUSH
12262: LD_INT 0
12264: ST_TO_ADDR
// sMortar := false ;
12265: LD_ADDR_EXP 88
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// sRanger := false ;
12273: LD_ADDR_EXP 98
12277: PUSH
12278: LD_INT 0
12280: ST_TO_ADDR
// sComputer := false ;
12281: LD_ADDR_EXP 99
12285: PUSH
12286: LD_INT 0
12288: ST_TO_ADDR
// s30 := false ;
12289: LD_ADDR_EXP 100
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// s60 := false ;
12297: LD_ADDR_EXP 101
12301: PUSH
12302: LD_INT 0
12304: ST_TO_ADDR
// end ;
12305: LD_VAR 0 1
12309: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
12310: LD_INT 0
12312: PPUSH
12313: PPUSH
12314: PPUSH
12315: PPUSH
12316: PPUSH
12317: PPUSH
12318: PPUSH
// result := [ ] ;
12319: LD_ADDR_VAR 0 2
12323: PUSH
12324: EMPTY
12325: ST_TO_ADDR
// if campaign_id = 1 then
12326: LD_OWVAR 69
12330: PUSH
12331: LD_INT 1
12333: EQUAL
12334: IFFALSE 15500
// begin case mission_number of 1 :
12336: LD_OWVAR 70
12340: PUSH
12341: LD_INT 1
12343: DOUBLE
12344: EQUAL
12345: IFTRUE 12349
12347: GO 12425
12349: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
12350: LD_ADDR_VAR 0 2
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 4
12360: PUSH
12361: LD_INT 11
12363: PUSH
12364: LD_INT 12
12366: PUSH
12367: LD_INT 15
12369: PUSH
12370: LD_INT 16
12372: PUSH
12373: LD_INT 22
12375: PUSH
12376: LD_INT 23
12378: PUSH
12379: LD_INT 26
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 101
12395: PUSH
12396: LD_INT 102
12398: PUSH
12399: LD_INT 106
12401: PUSH
12402: LD_INT 116
12404: PUSH
12405: LD_INT 117
12407: PUSH
12408: LD_INT 118
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: ST_TO_ADDR
12423: GO 15498
12425: LD_INT 2
12427: DOUBLE
12428: EQUAL
12429: IFTRUE 12433
12431: GO 12517
12433: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
12434: LD_ADDR_VAR 0 2
12438: PUSH
12439: LD_INT 2
12441: PUSH
12442: LD_INT 4
12444: PUSH
12445: LD_INT 11
12447: PUSH
12448: LD_INT 12
12450: PUSH
12451: LD_INT 15
12453: PUSH
12454: LD_INT 16
12456: PUSH
12457: LD_INT 22
12459: PUSH
12460: LD_INT 23
12462: PUSH
12463: LD_INT 26
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: PUSH
12477: LD_INT 101
12479: PUSH
12480: LD_INT 102
12482: PUSH
12483: LD_INT 105
12485: PUSH
12486: LD_INT 106
12488: PUSH
12489: LD_INT 108
12491: PUSH
12492: LD_INT 116
12494: PUSH
12495: LD_INT 117
12497: PUSH
12498: LD_INT 118
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: ST_TO_ADDR
12515: GO 15498
12517: LD_INT 3
12519: DOUBLE
12520: EQUAL
12521: IFTRUE 12525
12523: GO 12613
12525: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
12526: LD_ADDR_VAR 0 2
12530: PUSH
12531: LD_INT 2
12533: PUSH
12534: LD_INT 4
12536: PUSH
12537: LD_INT 5
12539: PUSH
12540: LD_INT 11
12542: PUSH
12543: LD_INT 12
12545: PUSH
12546: LD_INT 15
12548: PUSH
12549: LD_INT 16
12551: PUSH
12552: LD_INT 22
12554: PUSH
12555: LD_INT 26
12557: PUSH
12558: LD_INT 36
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 101
12575: PUSH
12576: LD_INT 102
12578: PUSH
12579: LD_INT 105
12581: PUSH
12582: LD_INT 106
12584: PUSH
12585: LD_INT 108
12587: PUSH
12588: LD_INT 116
12590: PUSH
12591: LD_INT 117
12593: PUSH
12594: LD_INT 118
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: ST_TO_ADDR
12611: GO 15498
12613: LD_INT 4
12615: DOUBLE
12616: EQUAL
12617: IFTRUE 12621
12619: GO 12717
12621: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
12622: LD_ADDR_VAR 0 2
12626: PUSH
12627: LD_INT 2
12629: PUSH
12630: LD_INT 4
12632: PUSH
12633: LD_INT 5
12635: PUSH
12636: LD_INT 8
12638: PUSH
12639: LD_INT 11
12641: PUSH
12642: LD_INT 12
12644: PUSH
12645: LD_INT 15
12647: PUSH
12648: LD_INT 16
12650: PUSH
12651: LD_INT 22
12653: PUSH
12654: LD_INT 23
12656: PUSH
12657: LD_INT 26
12659: PUSH
12660: LD_INT 36
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 101
12679: PUSH
12680: LD_INT 102
12682: PUSH
12683: LD_INT 105
12685: PUSH
12686: LD_INT 106
12688: PUSH
12689: LD_INT 108
12691: PUSH
12692: LD_INT 116
12694: PUSH
12695: LD_INT 117
12697: PUSH
12698: LD_INT 118
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: ST_TO_ADDR
12715: GO 15498
12717: LD_INT 5
12719: DOUBLE
12720: EQUAL
12721: IFTRUE 12725
12723: GO 12837
12725: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
12726: LD_ADDR_VAR 0 2
12730: PUSH
12731: LD_INT 2
12733: PUSH
12734: LD_INT 4
12736: PUSH
12737: LD_INT 5
12739: PUSH
12740: LD_INT 6
12742: PUSH
12743: LD_INT 8
12745: PUSH
12746: LD_INT 11
12748: PUSH
12749: LD_INT 12
12751: PUSH
12752: LD_INT 15
12754: PUSH
12755: LD_INT 16
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 25
12766: PUSH
12767: LD_INT 26
12769: PUSH
12770: LD_INT 36
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 101
12791: PUSH
12792: LD_INT 102
12794: PUSH
12795: LD_INT 105
12797: PUSH
12798: LD_INT 106
12800: PUSH
12801: LD_INT 108
12803: PUSH
12804: LD_INT 109
12806: PUSH
12807: LD_INT 112
12809: PUSH
12810: LD_INT 116
12812: PUSH
12813: LD_INT 117
12815: PUSH
12816: LD_INT 118
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: ST_TO_ADDR
12835: GO 15498
12837: LD_INT 6
12839: DOUBLE
12840: EQUAL
12841: IFTRUE 12845
12843: GO 12977
12845: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
12846: LD_ADDR_VAR 0 2
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: LD_INT 4
12856: PUSH
12857: LD_INT 5
12859: PUSH
12860: LD_INT 6
12862: PUSH
12863: LD_INT 8
12865: PUSH
12866: LD_INT 11
12868: PUSH
12869: LD_INT 12
12871: PUSH
12872: LD_INT 15
12874: PUSH
12875: LD_INT 16
12877: PUSH
12878: LD_INT 20
12880: PUSH
12881: LD_INT 21
12883: PUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 23
12889: PUSH
12890: LD_INT 25
12892: PUSH
12893: LD_INT 26
12895: PUSH
12896: LD_INT 30
12898: PUSH
12899: LD_INT 31
12901: PUSH
12902: LD_INT 32
12904: PUSH
12905: LD_INT 36
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 101
12931: PUSH
12932: LD_INT 102
12934: PUSH
12935: LD_INT 105
12937: PUSH
12938: LD_INT 106
12940: PUSH
12941: LD_INT 108
12943: PUSH
12944: LD_INT 109
12946: PUSH
12947: LD_INT 112
12949: PUSH
12950: LD_INT 116
12952: PUSH
12953: LD_INT 117
12955: PUSH
12956: LD_INT 118
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: ST_TO_ADDR
12975: GO 15498
12977: LD_INT 7
12979: DOUBLE
12980: EQUAL
12981: IFTRUE 12985
12983: GO 13097
12985: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
12986: LD_ADDR_VAR 0 2
12990: PUSH
12991: LD_INT 2
12993: PUSH
12994: LD_INT 4
12996: PUSH
12997: LD_INT 5
12999: PUSH
13000: LD_INT 7
13002: PUSH
13003: LD_INT 11
13005: PUSH
13006: LD_INT 12
13008: PUSH
13009: LD_INT 15
13011: PUSH
13012: LD_INT 16
13014: PUSH
13015: LD_INT 20
13017: PUSH
13018: LD_INT 21
13020: PUSH
13021: LD_INT 22
13023: PUSH
13024: LD_INT 23
13026: PUSH
13027: LD_INT 25
13029: PUSH
13030: LD_INT 26
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 101
13051: PUSH
13052: LD_INT 102
13054: PUSH
13055: LD_INT 103
13057: PUSH
13058: LD_INT 105
13060: PUSH
13061: LD_INT 106
13063: PUSH
13064: LD_INT 108
13066: PUSH
13067: LD_INT 112
13069: PUSH
13070: LD_INT 116
13072: PUSH
13073: LD_INT 117
13075: PUSH
13076: LD_INT 118
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: ST_TO_ADDR
13095: GO 15498
13097: LD_INT 8
13099: DOUBLE
13100: EQUAL
13101: IFTRUE 13105
13103: GO 13245
13105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
13106: LD_ADDR_VAR 0 2
13110: PUSH
13111: LD_INT 2
13113: PUSH
13114: LD_INT 4
13116: PUSH
13117: LD_INT 5
13119: PUSH
13120: LD_INT 6
13122: PUSH
13123: LD_INT 7
13125: PUSH
13126: LD_INT 8
13128: PUSH
13129: LD_INT 11
13131: PUSH
13132: LD_INT 12
13134: PUSH
13135: LD_INT 15
13137: PUSH
13138: LD_INT 16
13140: PUSH
13141: LD_INT 20
13143: PUSH
13144: LD_INT 21
13146: PUSH
13147: LD_INT 22
13149: PUSH
13150: LD_INT 23
13152: PUSH
13153: LD_INT 25
13155: PUSH
13156: LD_INT 26
13158: PUSH
13159: LD_INT 30
13161: PUSH
13162: LD_INT 31
13164: PUSH
13165: LD_INT 32
13167: PUSH
13168: LD_INT 36
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 101
13195: PUSH
13196: LD_INT 102
13198: PUSH
13199: LD_INT 103
13201: PUSH
13202: LD_INT 105
13204: PUSH
13205: LD_INT 106
13207: PUSH
13208: LD_INT 108
13210: PUSH
13211: LD_INT 109
13213: PUSH
13214: LD_INT 112
13216: PUSH
13217: LD_INT 116
13219: PUSH
13220: LD_INT 117
13222: PUSH
13223: LD_INT 118
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: ST_TO_ADDR
13243: GO 15498
13245: LD_INT 9
13247: DOUBLE
13248: EQUAL
13249: IFTRUE 13253
13251: GO 13401
13253: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
13254: LD_ADDR_VAR 0 2
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 4
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: LD_INT 6
13270: PUSH
13271: LD_INT 7
13273: PUSH
13274: LD_INT 8
13276: PUSH
13277: LD_INT 11
13279: PUSH
13280: LD_INT 12
13282: PUSH
13283: LD_INT 15
13285: PUSH
13286: LD_INT 16
13288: PUSH
13289: LD_INT 20
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: LD_INT 25
13303: PUSH
13304: LD_INT 26
13306: PUSH
13307: LD_INT 28
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 31
13315: PUSH
13316: LD_INT 32
13318: PUSH
13319: LD_INT 36
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: PUSH
13345: LD_INT 101
13347: PUSH
13348: LD_INT 102
13350: PUSH
13351: LD_INT 103
13353: PUSH
13354: LD_INT 105
13356: PUSH
13357: LD_INT 106
13359: PUSH
13360: LD_INT 108
13362: PUSH
13363: LD_INT 109
13365: PUSH
13366: LD_INT 112
13368: PUSH
13369: LD_INT 114
13371: PUSH
13372: LD_INT 116
13374: PUSH
13375: LD_INT 117
13377: PUSH
13378: LD_INT 118
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: ST_TO_ADDR
13399: GO 15498
13401: LD_INT 10
13403: DOUBLE
13404: EQUAL
13405: IFTRUE 13409
13407: GO 13605
13409: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
13410: LD_ADDR_VAR 0 2
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 4
13420: PUSH
13421: LD_INT 5
13423: PUSH
13424: LD_INT 6
13426: PUSH
13427: LD_INT 7
13429: PUSH
13430: LD_INT 8
13432: PUSH
13433: LD_INT 9
13435: PUSH
13436: LD_INT 10
13438: PUSH
13439: LD_INT 11
13441: PUSH
13442: LD_INT 12
13444: PUSH
13445: LD_INT 13
13447: PUSH
13448: LD_INT 14
13450: PUSH
13451: LD_INT 15
13453: PUSH
13454: LD_INT 16
13456: PUSH
13457: LD_INT 17
13459: PUSH
13460: LD_INT 18
13462: PUSH
13463: LD_INT 19
13465: PUSH
13466: LD_INT 20
13468: PUSH
13469: LD_INT 21
13471: PUSH
13472: LD_INT 22
13474: PUSH
13475: LD_INT 23
13477: PUSH
13478: LD_INT 24
13480: PUSH
13481: LD_INT 25
13483: PUSH
13484: LD_INT 26
13486: PUSH
13487: LD_INT 28
13489: PUSH
13490: LD_INT 30
13492: PUSH
13493: LD_INT 31
13495: PUSH
13496: LD_INT 32
13498: PUSH
13499: LD_INT 36
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 101
13535: PUSH
13536: LD_INT 102
13538: PUSH
13539: LD_INT 103
13541: PUSH
13542: LD_INT 104
13544: PUSH
13545: LD_INT 105
13547: PUSH
13548: LD_INT 106
13550: PUSH
13551: LD_INT 107
13553: PUSH
13554: LD_INT 108
13556: PUSH
13557: LD_INT 109
13559: PUSH
13560: LD_INT 110
13562: PUSH
13563: LD_INT 111
13565: PUSH
13566: LD_INT 112
13568: PUSH
13569: LD_INT 114
13571: PUSH
13572: LD_INT 116
13574: PUSH
13575: LD_INT 117
13577: PUSH
13578: LD_INT 118
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: ST_TO_ADDR
13603: GO 15498
13605: LD_INT 11
13607: DOUBLE
13608: EQUAL
13609: IFTRUE 13613
13611: GO 13817
13613: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
13614: LD_ADDR_VAR 0 2
13618: PUSH
13619: LD_INT 2
13621: PUSH
13622: LD_INT 3
13624: PUSH
13625: LD_INT 4
13627: PUSH
13628: LD_INT 5
13630: PUSH
13631: LD_INT 6
13633: PUSH
13634: LD_INT 7
13636: PUSH
13637: LD_INT 8
13639: PUSH
13640: LD_INT 9
13642: PUSH
13643: LD_INT 10
13645: PUSH
13646: LD_INT 11
13648: PUSH
13649: LD_INT 12
13651: PUSH
13652: LD_INT 13
13654: PUSH
13655: LD_INT 14
13657: PUSH
13658: LD_INT 15
13660: PUSH
13661: LD_INT 16
13663: PUSH
13664: LD_INT 17
13666: PUSH
13667: LD_INT 18
13669: PUSH
13670: LD_INT 19
13672: PUSH
13673: LD_INT 20
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 22
13681: PUSH
13682: LD_INT 23
13684: PUSH
13685: LD_INT 24
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 26
13693: PUSH
13694: LD_INT 28
13696: PUSH
13697: LD_INT 30
13699: PUSH
13700: LD_INT 31
13702: PUSH
13703: LD_INT 32
13705: PUSH
13706: LD_INT 34
13708: PUSH
13709: LD_INT 36
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 101
13747: PUSH
13748: LD_INT 102
13750: PUSH
13751: LD_INT 103
13753: PUSH
13754: LD_INT 104
13756: PUSH
13757: LD_INT 105
13759: PUSH
13760: LD_INT 106
13762: PUSH
13763: LD_INT 107
13765: PUSH
13766: LD_INT 108
13768: PUSH
13769: LD_INT 109
13771: PUSH
13772: LD_INT 110
13774: PUSH
13775: LD_INT 111
13777: PUSH
13778: LD_INT 112
13780: PUSH
13781: LD_INT 114
13783: PUSH
13784: LD_INT 116
13786: PUSH
13787: LD_INT 117
13789: PUSH
13790: LD_INT 118
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: ST_TO_ADDR
13815: GO 15498
13817: LD_INT 12
13819: DOUBLE
13820: EQUAL
13821: IFTRUE 13825
13823: GO 14045
13825: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
13826: LD_ADDR_VAR 0 2
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: LD_INT 2
13836: PUSH
13837: LD_INT 3
13839: PUSH
13840: LD_INT 4
13842: PUSH
13843: LD_INT 5
13845: PUSH
13846: LD_INT 6
13848: PUSH
13849: LD_INT 7
13851: PUSH
13852: LD_INT 8
13854: PUSH
13855: LD_INT 9
13857: PUSH
13858: LD_INT 10
13860: PUSH
13861: LD_INT 11
13863: PUSH
13864: LD_INT 12
13866: PUSH
13867: LD_INT 13
13869: PUSH
13870: LD_INT 14
13872: PUSH
13873: LD_INT 15
13875: PUSH
13876: LD_INT 16
13878: PUSH
13879: LD_INT 17
13881: PUSH
13882: LD_INT 18
13884: PUSH
13885: LD_INT 19
13887: PUSH
13888: LD_INT 20
13890: PUSH
13891: LD_INT 21
13893: PUSH
13894: LD_INT 22
13896: PUSH
13897: LD_INT 23
13899: PUSH
13900: LD_INT 24
13902: PUSH
13903: LD_INT 25
13905: PUSH
13906: LD_INT 26
13908: PUSH
13909: LD_INT 27
13911: PUSH
13912: LD_INT 28
13914: PUSH
13915: LD_INT 30
13917: PUSH
13918: LD_INT 31
13920: PUSH
13921: LD_INT 32
13923: PUSH
13924: LD_INT 33
13926: PUSH
13927: LD_INT 34
13929: PUSH
13930: LD_INT 36
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 101
13971: PUSH
13972: LD_INT 102
13974: PUSH
13975: LD_INT 103
13977: PUSH
13978: LD_INT 104
13980: PUSH
13981: LD_INT 105
13983: PUSH
13984: LD_INT 106
13986: PUSH
13987: LD_INT 107
13989: PUSH
13990: LD_INT 108
13992: PUSH
13993: LD_INT 109
13995: PUSH
13996: LD_INT 110
13998: PUSH
13999: LD_INT 111
14001: PUSH
14002: LD_INT 112
14004: PUSH
14005: LD_INT 113
14007: PUSH
14008: LD_INT 114
14010: PUSH
14011: LD_INT 116
14013: PUSH
14014: LD_INT 117
14016: PUSH
14017: LD_INT 118
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: ST_TO_ADDR
14043: GO 15498
14045: LD_INT 13
14047: DOUBLE
14048: EQUAL
14049: IFTRUE 14053
14051: GO 14261
14053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
14054: LD_ADDR_VAR 0 2
14058: PUSH
14059: LD_INT 1
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 3
14067: PUSH
14068: LD_INT 4
14070: PUSH
14071: LD_INT 5
14073: PUSH
14074: LD_INT 8
14076: PUSH
14077: LD_INT 9
14079: PUSH
14080: LD_INT 10
14082: PUSH
14083: LD_INT 11
14085: PUSH
14086: LD_INT 12
14088: PUSH
14089: LD_INT 14
14091: PUSH
14092: LD_INT 15
14094: PUSH
14095: LD_INT 16
14097: PUSH
14098: LD_INT 17
14100: PUSH
14101: LD_INT 18
14103: PUSH
14104: LD_INT 19
14106: PUSH
14107: LD_INT 20
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 22
14115: PUSH
14116: LD_INT 23
14118: PUSH
14119: LD_INT 24
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 26
14127: PUSH
14128: LD_INT 27
14130: PUSH
14131: LD_INT 28
14133: PUSH
14134: LD_INT 30
14136: PUSH
14137: LD_INT 31
14139: PUSH
14140: LD_INT 32
14142: PUSH
14143: LD_INT 33
14145: PUSH
14146: LD_INT 34
14148: PUSH
14149: LD_INT 36
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 101
14187: PUSH
14188: LD_INT 102
14190: PUSH
14191: LD_INT 103
14193: PUSH
14194: LD_INT 104
14196: PUSH
14197: LD_INT 105
14199: PUSH
14200: LD_INT 106
14202: PUSH
14203: LD_INT 107
14205: PUSH
14206: LD_INT 108
14208: PUSH
14209: LD_INT 109
14211: PUSH
14212: LD_INT 110
14214: PUSH
14215: LD_INT 111
14217: PUSH
14218: LD_INT 112
14220: PUSH
14221: LD_INT 113
14223: PUSH
14224: LD_INT 114
14226: PUSH
14227: LD_INT 116
14229: PUSH
14230: LD_INT 117
14232: PUSH
14233: LD_INT 118
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: ST_TO_ADDR
14259: GO 15498
14261: LD_INT 14
14263: DOUBLE
14264: EQUAL
14265: IFTRUE 14269
14267: GO 14493
14269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_INT 1
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: LD_INT 3
14283: PUSH
14284: LD_INT 4
14286: PUSH
14287: LD_INT 5
14289: PUSH
14290: LD_INT 6
14292: PUSH
14293: LD_INT 7
14295: PUSH
14296: LD_INT 8
14298: PUSH
14299: LD_INT 9
14301: PUSH
14302: LD_INT 10
14304: PUSH
14305: LD_INT 11
14307: PUSH
14308: LD_INT 12
14310: PUSH
14311: LD_INT 13
14313: PUSH
14314: LD_INT 14
14316: PUSH
14317: LD_INT 15
14319: PUSH
14320: LD_INT 16
14322: PUSH
14323: LD_INT 17
14325: PUSH
14326: LD_INT 18
14328: PUSH
14329: LD_INT 19
14331: PUSH
14332: LD_INT 20
14334: PUSH
14335: LD_INT 21
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_INT 23
14343: PUSH
14344: LD_INT 24
14346: PUSH
14347: LD_INT 25
14349: PUSH
14350: LD_INT 26
14352: PUSH
14353: LD_INT 27
14355: PUSH
14356: LD_INT 28
14358: PUSH
14359: LD_INT 29
14361: PUSH
14362: LD_INT 30
14364: PUSH
14365: LD_INT 31
14367: PUSH
14368: LD_INT 32
14370: PUSH
14371: LD_INT 33
14373: PUSH
14374: LD_INT 34
14376: PUSH
14377: LD_INT 36
14379: PUSH
14380: EMPTY
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 101
14419: PUSH
14420: LD_INT 102
14422: PUSH
14423: LD_INT 103
14425: PUSH
14426: LD_INT 104
14428: PUSH
14429: LD_INT 105
14431: PUSH
14432: LD_INT 106
14434: PUSH
14435: LD_INT 107
14437: PUSH
14438: LD_INT 108
14440: PUSH
14441: LD_INT 109
14443: PUSH
14444: LD_INT 110
14446: PUSH
14447: LD_INT 111
14449: PUSH
14450: LD_INT 112
14452: PUSH
14453: LD_INT 113
14455: PUSH
14456: LD_INT 114
14458: PUSH
14459: LD_INT 116
14461: PUSH
14462: LD_INT 117
14464: PUSH
14465: LD_INT 118
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: ST_TO_ADDR
14491: GO 15498
14493: LD_INT 15
14495: DOUBLE
14496: EQUAL
14497: IFTRUE 14501
14499: GO 14725
14501: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
14502: LD_ADDR_VAR 0 2
14506: PUSH
14507: LD_INT 1
14509: PUSH
14510: LD_INT 2
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: LD_INT 4
14518: PUSH
14519: LD_INT 5
14521: PUSH
14522: LD_INT 6
14524: PUSH
14525: LD_INT 7
14527: PUSH
14528: LD_INT 8
14530: PUSH
14531: LD_INT 9
14533: PUSH
14534: LD_INT 10
14536: PUSH
14537: LD_INT 11
14539: PUSH
14540: LD_INT 12
14542: PUSH
14543: LD_INT 13
14545: PUSH
14546: LD_INT 14
14548: PUSH
14549: LD_INT 15
14551: PUSH
14552: LD_INT 16
14554: PUSH
14555: LD_INT 17
14557: PUSH
14558: LD_INT 18
14560: PUSH
14561: LD_INT 19
14563: PUSH
14564: LD_INT 20
14566: PUSH
14567: LD_INT 21
14569: PUSH
14570: LD_INT 22
14572: PUSH
14573: LD_INT 23
14575: PUSH
14576: LD_INT 24
14578: PUSH
14579: LD_INT 25
14581: PUSH
14582: LD_INT 26
14584: PUSH
14585: LD_INT 27
14587: PUSH
14588: LD_INT 28
14590: PUSH
14591: LD_INT 29
14593: PUSH
14594: LD_INT 30
14596: PUSH
14597: LD_INT 31
14599: PUSH
14600: LD_INT 32
14602: PUSH
14603: LD_INT 33
14605: PUSH
14606: LD_INT 34
14608: PUSH
14609: LD_INT 36
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: LD_INT 101
14651: PUSH
14652: LD_INT 102
14654: PUSH
14655: LD_INT 103
14657: PUSH
14658: LD_INT 104
14660: PUSH
14661: LD_INT 105
14663: PUSH
14664: LD_INT 106
14666: PUSH
14667: LD_INT 107
14669: PUSH
14670: LD_INT 108
14672: PUSH
14673: LD_INT 109
14675: PUSH
14676: LD_INT 110
14678: PUSH
14679: LD_INT 111
14681: PUSH
14682: LD_INT 112
14684: PUSH
14685: LD_INT 113
14687: PUSH
14688: LD_INT 114
14690: PUSH
14691: LD_INT 116
14693: PUSH
14694: LD_INT 117
14696: PUSH
14697: LD_INT 118
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: ST_TO_ADDR
14723: GO 15498
14725: LD_INT 16
14727: DOUBLE
14728: EQUAL
14729: IFTRUE 14733
14731: GO 14869
14733: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
14734: LD_ADDR_VAR 0 2
14738: PUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 4
14744: PUSH
14745: LD_INT 5
14747: PUSH
14748: LD_INT 7
14750: PUSH
14751: LD_INT 11
14753: PUSH
14754: LD_INT 12
14756: PUSH
14757: LD_INT 15
14759: PUSH
14760: LD_INT 16
14762: PUSH
14763: LD_INT 20
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_INT 23
14774: PUSH
14775: LD_INT 25
14777: PUSH
14778: LD_INT 26
14780: PUSH
14781: LD_INT 30
14783: PUSH
14784: LD_INT 31
14786: PUSH
14787: LD_INT 32
14789: PUSH
14790: LD_INT 33
14792: PUSH
14793: LD_INT 34
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 101
14819: PUSH
14820: LD_INT 102
14822: PUSH
14823: LD_INT 103
14825: PUSH
14826: LD_INT 106
14828: PUSH
14829: LD_INT 108
14831: PUSH
14832: LD_INT 112
14834: PUSH
14835: LD_INT 113
14837: PUSH
14838: LD_INT 114
14840: PUSH
14841: LD_INT 116
14843: PUSH
14844: LD_INT 117
14846: PUSH
14847: LD_INT 118
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: EMPTY
14864: LIST
14865: LIST
14866: ST_TO_ADDR
14867: GO 15498
14869: LD_INT 17
14871: DOUBLE
14872: EQUAL
14873: IFTRUE 14877
14875: GO 15101
14877: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: LD_INT 1
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: LD_INT 3
14891: PUSH
14892: LD_INT 4
14894: PUSH
14895: LD_INT 5
14897: PUSH
14898: LD_INT 6
14900: PUSH
14901: LD_INT 7
14903: PUSH
14904: LD_INT 8
14906: PUSH
14907: LD_INT 9
14909: PUSH
14910: LD_INT 10
14912: PUSH
14913: LD_INT 11
14915: PUSH
14916: LD_INT 12
14918: PUSH
14919: LD_INT 13
14921: PUSH
14922: LD_INT 14
14924: PUSH
14925: LD_INT 15
14927: PUSH
14928: LD_INT 16
14930: PUSH
14931: LD_INT 17
14933: PUSH
14934: LD_INT 18
14936: PUSH
14937: LD_INT 19
14939: PUSH
14940: LD_INT 20
14942: PUSH
14943: LD_INT 21
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_INT 23
14951: PUSH
14952: LD_INT 24
14954: PUSH
14955: LD_INT 25
14957: PUSH
14958: LD_INT 26
14960: PUSH
14961: LD_INT 27
14963: PUSH
14964: LD_INT 28
14966: PUSH
14967: LD_INT 29
14969: PUSH
14970: LD_INT 30
14972: PUSH
14973: LD_INT 31
14975: PUSH
14976: LD_INT 32
14978: PUSH
14979: LD_INT 33
14981: PUSH
14982: LD_INT 34
14984: PUSH
14985: LD_INT 36
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 101
15027: PUSH
15028: LD_INT 102
15030: PUSH
15031: LD_INT 103
15033: PUSH
15034: LD_INT 104
15036: PUSH
15037: LD_INT 105
15039: PUSH
15040: LD_INT 106
15042: PUSH
15043: LD_INT 107
15045: PUSH
15046: LD_INT 108
15048: PUSH
15049: LD_INT 109
15051: PUSH
15052: LD_INT 110
15054: PUSH
15055: LD_INT 111
15057: PUSH
15058: LD_INT 112
15060: PUSH
15061: LD_INT 113
15063: PUSH
15064: LD_INT 114
15066: PUSH
15067: LD_INT 116
15069: PUSH
15070: LD_INT 117
15072: PUSH
15073: LD_INT 118
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: PUSH
15095: EMPTY
15096: LIST
15097: LIST
15098: ST_TO_ADDR
15099: GO 15498
15101: LD_INT 18
15103: DOUBLE
15104: EQUAL
15105: IFTRUE 15109
15107: GO 15257
15109: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
15110: LD_ADDR_VAR 0 2
15114: PUSH
15115: LD_INT 2
15117: PUSH
15118: LD_INT 4
15120: PUSH
15121: LD_INT 5
15123: PUSH
15124: LD_INT 7
15126: PUSH
15127: LD_INT 11
15129: PUSH
15130: LD_INT 12
15132: PUSH
15133: LD_INT 15
15135: PUSH
15136: LD_INT 16
15138: PUSH
15139: LD_INT 20
15141: PUSH
15142: LD_INT 21
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 23
15150: PUSH
15151: LD_INT 25
15153: PUSH
15154: LD_INT 26
15156: PUSH
15157: LD_INT 30
15159: PUSH
15160: LD_INT 31
15162: PUSH
15163: LD_INT 32
15165: PUSH
15166: LD_INT 33
15168: PUSH
15169: LD_INT 34
15171: PUSH
15172: LD_INT 35
15174: PUSH
15175: LD_INT 36
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 101
15203: PUSH
15204: LD_INT 102
15206: PUSH
15207: LD_INT 103
15209: PUSH
15210: LD_INT 106
15212: PUSH
15213: LD_INT 108
15215: PUSH
15216: LD_INT 112
15218: PUSH
15219: LD_INT 113
15221: PUSH
15222: LD_INT 114
15224: PUSH
15225: LD_INT 115
15227: PUSH
15228: LD_INT 116
15230: PUSH
15231: LD_INT 117
15233: PUSH
15234: LD_INT 118
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: ST_TO_ADDR
15255: GO 15498
15257: LD_INT 19
15259: DOUBLE
15260: EQUAL
15261: IFTRUE 15265
15263: GO 15497
15265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
15266: LD_ADDR_VAR 0 2
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 3
15279: PUSH
15280: LD_INT 4
15282: PUSH
15283: LD_INT 5
15285: PUSH
15286: LD_INT 6
15288: PUSH
15289: LD_INT 7
15291: PUSH
15292: LD_INT 8
15294: PUSH
15295: LD_INT 9
15297: PUSH
15298: LD_INT 10
15300: PUSH
15301: LD_INT 11
15303: PUSH
15304: LD_INT 12
15306: PUSH
15307: LD_INT 13
15309: PUSH
15310: LD_INT 14
15312: PUSH
15313: LD_INT 15
15315: PUSH
15316: LD_INT 16
15318: PUSH
15319: LD_INT 17
15321: PUSH
15322: LD_INT 18
15324: PUSH
15325: LD_INT 19
15327: PUSH
15328: LD_INT 20
15330: PUSH
15331: LD_INT 21
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_INT 23
15339: PUSH
15340: LD_INT 24
15342: PUSH
15343: LD_INT 25
15345: PUSH
15346: LD_INT 26
15348: PUSH
15349: LD_INT 27
15351: PUSH
15352: LD_INT 28
15354: PUSH
15355: LD_INT 29
15357: PUSH
15358: LD_INT 30
15360: PUSH
15361: LD_INT 31
15363: PUSH
15364: LD_INT 32
15366: PUSH
15367: LD_INT 33
15369: PUSH
15370: LD_INT 34
15372: PUSH
15373: LD_INT 35
15375: PUSH
15376: LD_INT 36
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 101
15419: PUSH
15420: LD_INT 102
15422: PUSH
15423: LD_INT 103
15425: PUSH
15426: LD_INT 104
15428: PUSH
15429: LD_INT 105
15431: PUSH
15432: LD_INT 106
15434: PUSH
15435: LD_INT 107
15437: PUSH
15438: LD_INT 108
15440: PUSH
15441: LD_INT 109
15443: PUSH
15444: LD_INT 110
15446: PUSH
15447: LD_INT 111
15449: PUSH
15450: LD_INT 112
15452: PUSH
15453: LD_INT 113
15455: PUSH
15456: LD_INT 114
15458: PUSH
15459: LD_INT 115
15461: PUSH
15462: LD_INT 116
15464: PUSH
15465: LD_INT 117
15467: PUSH
15468: LD_INT 118
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: ST_TO_ADDR
15495: GO 15498
15497: POP
// end else
15498: GO 15729
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
15500: LD_ADDR_VAR 0 2
15504: PUSH
15505: LD_INT 1
15507: PUSH
15508: LD_INT 2
15510: PUSH
15511: LD_INT 3
15513: PUSH
15514: LD_INT 4
15516: PUSH
15517: LD_INT 5
15519: PUSH
15520: LD_INT 6
15522: PUSH
15523: LD_INT 7
15525: PUSH
15526: LD_INT 8
15528: PUSH
15529: LD_INT 9
15531: PUSH
15532: LD_INT 10
15534: PUSH
15535: LD_INT 11
15537: PUSH
15538: LD_INT 12
15540: PUSH
15541: LD_INT 13
15543: PUSH
15544: LD_INT 14
15546: PUSH
15547: LD_INT 15
15549: PUSH
15550: LD_INT 16
15552: PUSH
15553: LD_INT 17
15555: PUSH
15556: LD_INT 18
15558: PUSH
15559: LD_INT 19
15561: PUSH
15562: LD_INT 20
15564: PUSH
15565: LD_INT 21
15567: PUSH
15568: LD_INT 22
15570: PUSH
15571: LD_INT 23
15573: PUSH
15574: LD_INT 24
15576: PUSH
15577: LD_INT 25
15579: PUSH
15580: LD_INT 26
15582: PUSH
15583: LD_INT 27
15585: PUSH
15586: LD_INT 28
15588: PUSH
15589: LD_INT 29
15591: PUSH
15592: LD_INT 30
15594: PUSH
15595: LD_INT 31
15597: PUSH
15598: LD_INT 32
15600: PUSH
15601: LD_INT 33
15603: PUSH
15604: LD_INT 34
15606: PUSH
15607: LD_INT 35
15609: PUSH
15610: LD_INT 36
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 101
15653: PUSH
15654: LD_INT 102
15656: PUSH
15657: LD_INT 103
15659: PUSH
15660: LD_INT 104
15662: PUSH
15663: LD_INT 105
15665: PUSH
15666: LD_INT 106
15668: PUSH
15669: LD_INT 107
15671: PUSH
15672: LD_INT 108
15674: PUSH
15675: LD_INT 109
15677: PUSH
15678: LD_INT 110
15680: PUSH
15681: LD_INT 111
15683: PUSH
15684: LD_INT 112
15686: PUSH
15687: LD_INT 113
15689: PUSH
15690: LD_INT 114
15692: PUSH
15693: LD_INT 115
15695: PUSH
15696: LD_INT 116
15698: PUSH
15699: LD_INT 117
15701: PUSH
15702: LD_INT 118
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: ST_TO_ADDR
// if result then
15729: LD_VAR 0 2
15733: IFFALSE 16519
// begin normal :=  ;
15735: LD_ADDR_VAR 0 5
15739: PUSH
15740: LD_STRING 
15742: ST_TO_ADDR
// hardcore :=  ;
15743: LD_ADDR_VAR 0 6
15747: PUSH
15748: LD_STRING 
15750: ST_TO_ADDR
// active :=  ;
15751: LD_ADDR_VAR 0 7
15755: PUSH
15756: LD_STRING 
15758: ST_TO_ADDR
// for i = 1 to normalCounter do
15759: LD_ADDR_VAR 0 8
15763: PUSH
15764: DOUBLE
15765: LD_INT 1
15767: DEC
15768: ST_TO_ADDR
15769: LD_EXP 46
15773: PUSH
15774: FOR_TO
15775: IFFALSE 15876
// begin tmp := 0 ;
15777: LD_ADDR_VAR 0 3
15781: PUSH
15782: LD_STRING 0
15784: ST_TO_ADDR
// if result [ 1 ] then
15785: LD_VAR 0 2
15789: PUSH
15790: LD_INT 1
15792: ARRAY
15793: IFFALSE 15858
// if result [ 1 ] [ 1 ] = i then
15795: LD_VAR 0 2
15799: PUSH
15800: LD_INT 1
15802: ARRAY
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PUSH
15808: LD_VAR 0 8
15812: EQUAL
15813: IFFALSE 15858
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
15815: LD_ADDR_VAR 0 2
15819: PUSH
15820: LD_VAR 0 2
15824: PPUSH
15825: LD_INT 1
15827: PPUSH
15828: LD_VAR 0 2
15832: PUSH
15833: LD_INT 1
15835: ARRAY
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 3
15844: PPUSH
15845: CALL_OW 1
15849: ST_TO_ADDR
// tmp := 1 ;
15850: LD_ADDR_VAR 0 3
15854: PUSH
15855: LD_STRING 1
15857: ST_TO_ADDR
// end ; normal := normal & tmp ;
15858: LD_ADDR_VAR 0 5
15862: PUSH
15863: LD_VAR 0 5
15867: PUSH
15868: LD_VAR 0 3
15872: STR
15873: ST_TO_ADDR
// end ;
15874: GO 15774
15876: POP
15877: POP
// for i = 1 to hardcoreCounter do
15878: LD_ADDR_VAR 0 8
15882: PUSH
15883: DOUBLE
15884: LD_INT 1
15886: DEC
15887: ST_TO_ADDR
15888: LD_EXP 47
15892: PUSH
15893: FOR_TO
15894: IFFALSE 15999
// begin tmp := 0 ;
15896: LD_ADDR_VAR 0 3
15900: PUSH
15901: LD_STRING 0
15903: ST_TO_ADDR
// if result [ 2 ] then
15904: LD_VAR 0 2
15908: PUSH
15909: LD_INT 2
15911: ARRAY
15912: IFFALSE 15981
// if result [ 2 ] [ 1 ] = 100 + i then
15914: LD_VAR 0 2
15918: PUSH
15919: LD_INT 2
15921: ARRAY
15922: PUSH
15923: LD_INT 1
15925: ARRAY
15926: PUSH
15927: LD_INT 100
15929: PUSH
15930: LD_VAR 0 8
15934: PLUS
15935: EQUAL
15936: IFFALSE 15981
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
15938: LD_ADDR_VAR 0 2
15942: PUSH
15943: LD_VAR 0 2
15947: PPUSH
15948: LD_INT 2
15950: PPUSH
15951: LD_VAR 0 2
15955: PUSH
15956: LD_INT 2
15958: ARRAY
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL_OW 3
15967: PPUSH
15968: CALL_OW 1
15972: ST_TO_ADDR
// tmp := 1 ;
15973: LD_ADDR_VAR 0 3
15977: PUSH
15978: LD_STRING 1
15980: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
15981: LD_ADDR_VAR 0 6
15985: PUSH
15986: LD_VAR 0 6
15990: PUSH
15991: LD_VAR 0 3
15995: STR
15996: ST_TO_ADDR
// end ;
15997: GO 15893
15999: POP
16000: POP
// if isGameLoad then
16001: LD_VAR 0 1
16005: IFFALSE 16480
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
16007: LD_ADDR_VAR 0 4
16011: PUSH
16012: LD_EXP 50
16016: PUSH
16017: LD_EXP 49
16021: PUSH
16022: LD_EXP 51
16026: PUSH
16027: LD_EXP 48
16031: PUSH
16032: LD_EXP 52
16036: PUSH
16037: LD_EXP 53
16041: PUSH
16042: LD_EXP 54
16046: PUSH
16047: LD_EXP 55
16051: PUSH
16052: LD_EXP 56
16056: PUSH
16057: LD_EXP 57
16061: PUSH
16062: LD_EXP 58
16066: PUSH
16067: LD_EXP 59
16071: PUSH
16072: LD_EXP 60
16076: PUSH
16077: LD_EXP 61
16081: PUSH
16082: LD_EXP 69
16086: PUSH
16087: LD_EXP 70
16091: PUSH
16092: LD_EXP 71
16096: PUSH
16097: LD_EXP 72
16101: PUSH
16102: LD_EXP 74
16106: PUSH
16107: LD_EXP 75
16111: PUSH
16112: LD_EXP 76
16116: PUSH
16117: LD_EXP 79
16121: PUSH
16122: LD_EXP 81
16126: PUSH
16127: LD_EXP 82
16131: PUSH
16132: LD_EXP 83
16136: PUSH
16137: LD_EXP 85
16141: PUSH
16142: LD_EXP 86
16146: PUSH
16147: LD_EXP 89
16151: PUSH
16152: LD_EXP 90
16156: PUSH
16157: LD_EXP 91
16161: PUSH
16162: LD_EXP 92
16166: PUSH
16167: LD_EXP 93
16171: PUSH
16172: LD_EXP 94
16176: PUSH
16177: LD_EXP 95
16181: PUSH
16182: LD_EXP 96
16186: PUSH
16187: LD_EXP 97
16191: PUSH
16192: LD_EXP 62
16196: PUSH
16197: LD_EXP 63
16201: PUSH
16202: LD_EXP 66
16206: PUSH
16207: LD_EXP 67
16211: PUSH
16212: LD_EXP 68
16216: PUSH
16217: LD_EXP 64
16221: PUSH
16222: LD_EXP 65
16226: PUSH
16227: LD_EXP 73
16231: PUSH
16232: LD_EXP 77
16236: PUSH
16237: LD_EXP 78
16241: PUSH
16242: LD_EXP 80
16246: PUSH
16247: LD_EXP 84
16251: PUSH
16252: LD_EXP 87
16256: PUSH
16257: LD_EXP 88
16261: PUSH
16262: LD_EXP 98
16266: PUSH
16267: LD_EXP 99
16271: PUSH
16272: LD_EXP 100
16276: PUSH
16277: LD_EXP 101
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: ST_TO_ADDR
// tmp :=  ;
16338: LD_ADDR_VAR 0 3
16342: PUSH
16343: LD_STRING 
16345: ST_TO_ADDR
// for i = 1 to normalCounter do
16346: LD_ADDR_VAR 0 8
16350: PUSH
16351: DOUBLE
16352: LD_INT 1
16354: DEC
16355: ST_TO_ADDR
16356: LD_EXP 46
16360: PUSH
16361: FOR_TO
16362: IFFALSE 16398
// begin if flags [ i ] then
16364: LD_VAR 0 4
16368: PUSH
16369: LD_VAR 0 8
16373: ARRAY
16374: IFFALSE 16396
// tmp := tmp & i & ; ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_VAR 0 3
16385: PUSH
16386: LD_VAR 0 8
16390: STR
16391: PUSH
16392: LD_STRING ;
16394: STR
16395: ST_TO_ADDR
// end ;
16396: GO 16361
16398: POP
16399: POP
// for i = 1 to hardcoreCounter do
16400: LD_ADDR_VAR 0 8
16404: PUSH
16405: DOUBLE
16406: LD_INT 1
16408: DEC
16409: ST_TO_ADDR
16410: LD_EXP 47
16414: PUSH
16415: FOR_TO
16416: IFFALSE 16462
// begin if flags [ normalCounter + i ] then
16418: LD_VAR 0 4
16422: PUSH
16423: LD_EXP 46
16427: PUSH
16428: LD_VAR 0 8
16432: PLUS
16433: ARRAY
16434: IFFALSE 16460
// tmp := tmp & ( 100 + i ) & ; ;
16436: LD_ADDR_VAR 0 3
16440: PUSH
16441: LD_VAR 0 3
16445: PUSH
16446: LD_INT 100
16448: PUSH
16449: LD_VAR 0 8
16453: PLUS
16454: STR
16455: PUSH
16456: LD_STRING ;
16458: STR
16459: ST_TO_ADDR
// end ;
16460: GO 16415
16462: POP
16463: POP
// if tmp then
16464: LD_VAR 0 3
16468: IFFALSE 16480
// active := tmp ;
16470: LD_ADDR_VAR 0 7
16474: PUSH
16475: LD_VAR 0 3
16479: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
16480: LD_STRING getStreamItemsFromMission("
16482: PUSH
16483: LD_VAR 0 5
16487: STR
16488: PUSH
16489: LD_STRING ","
16491: STR
16492: PUSH
16493: LD_VAR 0 6
16497: STR
16498: PUSH
16499: LD_STRING ","
16501: STR
16502: PUSH
16503: LD_VAR 0 7
16507: STR
16508: PUSH
16509: LD_STRING ")
16511: STR
16512: PPUSH
16513: CALL_OW 559
// end else
16517: GO 16526
// ToLua ( getStreamItemsFromMission("","","") ) ;
16519: LD_STRING getStreamItemsFromMission("","","")
16521: PPUSH
16522: CALL_OW 559
// end ;
16526: LD_VAR 0 2
16530: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
16531: LD_EXP 45
16535: PUSH
16536: LD_EXP 50
16540: AND
16541: IFFALSE 16665
16543: GO 16545
16545: DISABLE
16546: LD_INT 0
16548: PPUSH
16549: PPUSH
// begin enable ;
16550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_INT 22
16558: PUSH
16559: LD_OWVAR 2
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: LD_INT 2
16570: PUSH
16571: LD_INT 34
16573: PUSH
16574: LD_INT 7
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 34
16583: PUSH
16584: LD_INT 45
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 34
16593: PUSH
16594: LD_INT 28
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 34
16603: PUSH
16604: LD_INT 47
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: ST_TO_ADDR
// if not tmp then
16627: LD_VAR 0 2
16631: NOT
16632: IFFALSE 16636
// exit ;
16634: GO 16665
// for i in tmp do
16636: LD_ADDR_VAR 0 1
16640: PUSH
16641: LD_VAR 0 2
16645: PUSH
16646: FOR_IN
16647: IFFALSE 16663
// begin SetLives ( i , 0 ) ;
16649: LD_VAR 0 1
16653: PPUSH
16654: LD_INT 0
16656: PPUSH
16657: CALL_OW 234
// end ;
16661: GO 16646
16663: POP
16664: POP
// end ;
16665: PPOPN 2
16667: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
16668: LD_EXP 45
16672: PUSH
16673: LD_EXP 51
16677: AND
16678: IFFALSE 16762
16680: GO 16682
16682: DISABLE
16683: LD_INT 0
16685: PPUSH
16686: PPUSH
// begin enable ;
16687: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
16688: LD_ADDR_VAR 0 2
16692: PUSH
16693: LD_INT 22
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 32
16707: PUSH
16708: LD_INT 3
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PPUSH
16719: CALL_OW 69
16723: ST_TO_ADDR
// if not tmp then
16724: LD_VAR 0 2
16728: NOT
16729: IFFALSE 16733
// exit ;
16731: GO 16762
// for i in tmp do
16733: LD_ADDR_VAR 0 1
16737: PUSH
16738: LD_VAR 0 2
16742: PUSH
16743: FOR_IN
16744: IFFALSE 16760
// begin SetLives ( i , 0 ) ;
16746: LD_VAR 0 1
16750: PPUSH
16751: LD_INT 0
16753: PPUSH
16754: CALL_OW 234
// end ;
16758: GO 16743
16760: POP
16761: POP
// end ;
16762: PPOPN 2
16764: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
16765: LD_EXP 45
16769: PUSH
16770: LD_EXP 48
16774: AND
16775: IFFALSE 16868
16777: GO 16779
16779: DISABLE
16780: LD_INT 0
16782: PPUSH
// begin enable ;
16783: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
16784: LD_ADDR_VAR 0 1
16788: PUSH
16789: LD_INT 22
16791: PUSH
16792: LD_OWVAR 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 2
16803: PUSH
16804: LD_INT 25
16806: PUSH
16807: LD_INT 5
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 25
16816: PUSH
16817: LD_INT 9
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 25
16826: PUSH
16827: LD_INT 8
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PPUSH
16844: CALL_OW 69
16848: PUSH
16849: FOR_IN
16850: IFFALSE 16866
// begin SetClass ( i , 1 ) ;
16852: LD_VAR 0 1
16856: PPUSH
16857: LD_INT 1
16859: PPUSH
16860: CALL_OW 336
// end ;
16864: GO 16849
16866: POP
16867: POP
// end ;
16868: PPOPN 1
16870: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
16871: LD_EXP 45
16875: PUSH
16876: LD_EXP 49
16880: AND
16881: PUSH
16882: LD_OWVAR 65
16886: PUSH
16887: LD_INT 7
16889: LESS
16890: AND
16891: IFFALSE 16905
16893: GO 16895
16895: DISABLE
// begin enable ;
16896: ENABLE
// game_speed := 7 ;
16897: LD_ADDR_OWVAR 65
16901: PUSH
16902: LD_INT 7
16904: ST_TO_ADDR
// end ;
16905: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
16906: LD_EXP 45
16910: PUSH
16911: LD_EXP 52
16915: AND
16916: IFFALSE 17118
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
16925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16926: LD_ADDR_VAR 0 3
16930: PUSH
16931: LD_INT 81
16933: PUSH
16934: LD_OWVAR 2
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 21
16945: PUSH
16946: LD_INT 1
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 3
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17118
// if tmp > 5 then
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 5
16978: GREATER
16979: IFFALSE 16991
// k := 5 else
16981: LD_ADDR_VAR 0 2
16985: PUSH
16986: LD_INT 5
16988: ST_TO_ADDR
16989: GO 17001
// k := tmp ;
16991: LD_ADDR_VAR 0 2
16995: PUSH
16996: LD_VAR 0 3
17000: ST_TO_ADDR
// for i := 1 to k do
17001: LD_ADDR_VAR 0 1
17005: PUSH
17006: DOUBLE
17007: LD_INT 1
17009: DEC
17010: ST_TO_ADDR
17011: LD_VAR 0 2
17015: PUSH
17016: FOR_TO
17017: IFFALSE 17116
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17019: LD_VAR 0 3
17023: PUSH
17024: LD_VAR 0 1
17028: ARRAY
17029: PPUSH
17030: LD_VAR 0 1
17034: PUSH
17035: LD_INT 4
17037: MOD
17038: PUSH
17039: LD_INT 1
17041: PLUS
17042: PPUSH
17043: CALL_OW 259
17047: PUSH
17048: LD_INT 10
17050: LESS
17051: IFFALSE 17114
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17053: LD_VAR 0 3
17057: PUSH
17058: LD_VAR 0 1
17062: ARRAY
17063: PPUSH
17064: LD_VAR 0 1
17068: PUSH
17069: LD_INT 4
17071: MOD
17072: PUSH
17073: LD_INT 1
17075: PLUS
17076: PPUSH
17077: LD_VAR 0 3
17081: PUSH
17082: LD_VAR 0 1
17086: ARRAY
17087: PPUSH
17088: LD_VAR 0 1
17092: PUSH
17093: LD_INT 4
17095: MOD
17096: PUSH
17097: LD_INT 1
17099: PLUS
17100: PPUSH
17101: CALL_OW 259
17105: PUSH
17106: LD_INT 1
17108: PLUS
17109: PPUSH
17110: CALL_OW 237
17114: GO 17016
17116: POP
17117: POP
// end ;
17118: PPOPN 3
17120: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17121: LD_EXP 45
17125: PUSH
17126: LD_EXP 53
17130: AND
17131: IFFALSE 17151
17133: GO 17135
17135: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17136: LD_INT 4
17138: PPUSH
17139: LD_OWVAR 2
17143: PPUSH
17144: LD_INT 0
17146: PPUSH
17147: CALL_OW 324
17151: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17152: LD_EXP 45
17156: PUSH
17157: LD_EXP 82
17161: AND
17162: IFFALSE 17182
17164: GO 17166
17166: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17167: LD_INT 19
17169: PPUSH
17170: LD_OWVAR 2
17174: PPUSH
17175: LD_INT 0
17177: PPUSH
17178: CALL_OW 324
17182: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17183: LD_EXP 45
17187: PUSH
17188: LD_EXP 54
17192: AND
17193: IFFALSE 17295
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
17201: PPUSH
// begin enable ;
17202: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_OWVAR 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 2
17222: PUSH
17223: LD_INT 34
17225: PUSH
17226: LD_INT 11
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 34
17235: PUSH
17236: LD_INT 30
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 69
17256: ST_TO_ADDR
// if not tmp then
17257: LD_VAR 0 2
17261: NOT
17262: IFFALSE 17266
// exit ;
17264: GO 17295
// for i in tmp do
17266: LD_ADDR_VAR 0 1
17270: PUSH
17271: LD_VAR 0 2
17275: PUSH
17276: FOR_IN
17277: IFFALSE 17293
// begin SetLives ( i , 0 ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: LD_INT 0
17286: PPUSH
17287: CALL_OW 234
// end ;
17291: GO 17276
17293: POP
17294: POP
// end ;
17295: PPOPN 2
17297: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17298: LD_EXP 45
17302: PUSH
17303: LD_EXP 55
17307: AND
17308: IFFALSE 17328
17310: GO 17312
17312: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17313: LD_INT 32
17315: PPUSH
17316: LD_OWVAR 2
17320: PPUSH
17321: LD_INT 0
17323: PPUSH
17324: CALL_OW 324
17328: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17329: LD_EXP 45
17333: PUSH
17334: LD_EXP 56
17338: AND
17339: IFFALSE 17520
17341: GO 17343
17343: DISABLE
17344: LD_INT 0
17346: PPUSH
17347: PPUSH
17348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17349: LD_ADDR_VAR 0 2
17353: PUSH
17354: LD_INT 22
17356: PUSH
17357: LD_OWVAR 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 33
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PPUSH
17380: CALL_OW 69
17384: ST_TO_ADDR
// if not tmp then
17385: LD_VAR 0 2
17389: NOT
17390: IFFALSE 17394
// exit ;
17392: GO 17520
// side := 0 ;
17394: LD_ADDR_VAR 0 3
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// for i := 1 to 8 do
17402: LD_ADDR_VAR 0 1
17406: PUSH
17407: DOUBLE
17408: LD_INT 1
17410: DEC
17411: ST_TO_ADDR
17412: LD_INT 8
17414: PUSH
17415: FOR_TO
17416: IFFALSE 17464
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
17418: LD_OWVAR 2
17422: PUSH
17423: LD_VAR 0 1
17427: NONEQUAL
17428: PUSH
17429: LD_OWVAR 2
17433: PPUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 81
17443: PUSH
17444: LD_INT 2
17446: EQUAL
17447: AND
17448: IFFALSE 17462
// begin side := i ;
17450: LD_ADDR_VAR 0 3
17454: PUSH
17455: LD_VAR 0 1
17459: ST_TO_ADDR
// break ;
17460: GO 17464
// end ;
17462: GO 17415
17464: POP
17465: POP
// if not side then
17466: LD_VAR 0 3
17470: NOT
17471: IFFALSE 17475
// exit ;
17473: GO 17520
// for i := 1 to tmp do
17475: LD_ADDR_VAR 0 1
17479: PUSH
17480: DOUBLE
17481: LD_INT 1
17483: DEC
17484: ST_TO_ADDR
17485: LD_VAR 0 2
17489: PUSH
17490: FOR_TO
17491: IFFALSE 17518
// if Prob ( 60 ) then
17493: LD_INT 60
17495: PPUSH
17496: CALL_OW 13
17500: IFFALSE 17516
// SetSide ( i , side ) ;
17502: LD_VAR 0 1
17506: PPUSH
17507: LD_VAR 0 3
17511: PPUSH
17512: CALL_OW 235
17516: GO 17490
17518: POP
17519: POP
// end ;
17520: PPOPN 3
17522: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
17523: LD_EXP 45
17527: PUSH
17528: LD_EXP 58
17532: AND
17533: IFFALSE 17652
17535: GO 17537
17537: DISABLE
17538: LD_INT 0
17540: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
17541: LD_ADDR_VAR 0 1
17545: PUSH
17546: LD_INT 22
17548: PUSH
17549: LD_OWVAR 2
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 21
17560: PUSH
17561: LD_INT 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 3
17570: PUSH
17571: LD_INT 23
17573: PUSH
17574: LD_INT 0
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: PPUSH
17590: CALL_OW 69
17594: PUSH
17595: FOR_IN
17596: IFFALSE 17650
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 257
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: LD_INT 3
17616: PUSH
17617: LD_INT 4
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: IN
17626: IFFALSE 17648
// SetClass ( un , rand ( 1 , 4 ) ) ;
17628: LD_VAR 0 1
17632: PPUSH
17633: LD_INT 1
17635: PPUSH
17636: LD_INT 4
17638: PPUSH
17639: CALL_OW 12
17643: PPUSH
17644: CALL_OW 336
17648: GO 17595
17650: POP
17651: POP
// end ;
17652: PPOPN 1
17654: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
17655: LD_EXP 45
17659: PUSH
17660: LD_EXP 57
17664: AND
17665: IFFALSE 17744
17667: GO 17669
17669: DISABLE
17670: LD_INT 0
17672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17673: LD_ADDR_VAR 0 1
17677: PUSH
17678: LD_INT 22
17680: PUSH
17681: LD_OWVAR 2
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PUSH
17690: LD_INT 21
17692: PUSH
17693: LD_INT 3
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PPUSH
17704: CALL_OW 69
17708: ST_TO_ADDR
// if not tmp then
17709: LD_VAR 0 1
17713: NOT
17714: IFFALSE 17718
// exit ;
17716: GO 17744
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
17718: LD_VAR 0 1
17722: PUSH
17723: LD_INT 1
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 12
17735: ARRAY
17736: PPUSH
17737: LD_INT 100
17739: PPUSH
17740: CALL_OW 234
// end ;
17744: PPOPN 1
17746: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
17747: LD_EXP 45
17751: PUSH
17752: LD_EXP 59
17756: AND
17757: IFFALSE 17855
17759: GO 17761
17761: DISABLE
17762: LD_INT 0
17764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17765: LD_ADDR_VAR 0 1
17769: PUSH
17770: LD_INT 22
17772: PUSH
17773: LD_OWVAR 2
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 21
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PPUSH
17796: CALL_OW 69
17800: ST_TO_ADDR
// if not tmp then
17801: LD_VAR 0 1
17805: NOT
17806: IFFALSE 17810
// exit ;
17808: GO 17855
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
17810: LD_VAR 0 1
17814: PUSH
17815: LD_INT 1
17817: PPUSH
17818: LD_VAR 0 1
17822: PPUSH
17823: CALL_OW 12
17827: ARRAY
17828: PPUSH
17829: LD_INT 1
17831: PPUSH
17832: LD_INT 4
17834: PPUSH
17835: CALL_OW 12
17839: PPUSH
17840: LD_INT 3000
17842: PPUSH
17843: LD_INT 9000
17845: PPUSH
17846: CALL_OW 12
17850: PPUSH
17851: CALL_OW 492
// end ;
17855: PPOPN 1
17857: END
// every 0 0$1 trigger StreamModeActive and sDepot do
17858: LD_EXP 45
17862: PUSH
17863: LD_EXP 60
17867: AND
17868: IFFALSE 17888
17870: GO 17872
17872: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
17873: LD_INT 1
17875: PPUSH
17876: LD_OWVAR 2
17880: PPUSH
17881: LD_INT 0
17883: PPUSH
17884: CALL_OW 324
17888: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
17889: LD_EXP 45
17893: PUSH
17894: LD_EXP 61
17898: AND
17899: IFFALSE 17982
17901: GO 17903
17903: DISABLE
17904: LD_INT 0
17906: PPUSH
17907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
17908: LD_ADDR_VAR 0 2
17912: PUSH
17913: LD_INT 22
17915: PUSH
17916: LD_OWVAR 2
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 21
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PPUSH
17939: CALL_OW 69
17943: ST_TO_ADDR
// if not tmp then
17944: LD_VAR 0 2
17948: NOT
17949: IFFALSE 17953
// exit ;
17951: GO 17982
// for i in tmp do
17953: LD_ADDR_VAR 0 1
17957: PUSH
17958: LD_VAR 0 2
17962: PUSH
17963: FOR_IN
17964: IFFALSE 17980
// SetBLevel ( i , 10 ) ;
17966: LD_VAR 0 1
17970: PPUSH
17971: LD_INT 10
17973: PPUSH
17974: CALL_OW 241
17978: GO 17963
17980: POP
17981: POP
// end ;
17982: PPOPN 2
17984: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
17985: LD_EXP 45
17989: PUSH
17990: LD_EXP 62
17994: AND
17995: IFFALSE 18106
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
18003: PPUSH
18004: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18005: LD_ADDR_VAR 0 3
18009: PUSH
18010: LD_INT 22
18012: PUSH
18013: LD_OWVAR 2
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 25
18024: PUSH
18025: LD_INT 1
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PPUSH
18036: CALL_OW 69
18040: ST_TO_ADDR
// if not tmp then
18041: LD_VAR 0 3
18045: NOT
18046: IFFALSE 18050
// exit ;
18048: GO 18106
// un := tmp [ rand ( 1 , tmp ) ] ;
18050: LD_ADDR_VAR 0 2
18054: PUSH
18055: LD_VAR 0 3
18059: PUSH
18060: LD_INT 1
18062: PPUSH
18063: LD_VAR 0 3
18067: PPUSH
18068: CALL_OW 12
18072: ARRAY
18073: ST_TO_ADDR
// if Crawls ( un ) then
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 318
18083: IFFALSE 18094
// ComWalk ( un ) ;
18085: LD_VAR 0 2
18089: PPUSH
18090: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18094: LD_VAR 0 2
18098: PPUSH
18099: LD_INT 5
18101: PPUSH
18102: CALL_OW 336
// end ;
18106: PPOPN 3
18108: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
18109: LD_EXP 45
18113: PUSH
18114: LD_EXP 63
18118: AND
18119: PUSH
18120: LD_OWVAR 67
18124: PUSH
18125: LD_INT 4
18127: LESS
18128: AND
18129: IFFALSE 18148
18131: GO 18133
18133: DISABLE
// begin Difficulty := Difficulty + 1 ;
18134: LD_ADDR_OWVAR 67
18138: PUSH
18139: LD_OWVAR 67
18143: PUSH
18144: LD_INT 1
18146: PLUS
18147: ST_TO_ADDR
// end ;
18148: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18149: LD_EXP 45
18153: PUSH
18154: LD_EXP 64
18158: AND
18159: IFFALSE 18262
18161: GO 18163
18163: DISABLE
18164: LD_INT 0
18166: PPUSH
// begin for i := 1 to 5 do
18167: LD_ADDR_VAR 0 1
18171: PUSH
18172: DOUBLE
18173: LD_INT 1
18175: DEC
18176: ST_TO_ADDR
18177: LD_INT 5
18179: PUSH
18180: FOR_TO
18181: IFFALSE 18260
// begin uc_nation := nation_nature ;
18183: LD_ADDR_OWVAR 21
18187: PUSH
18188: LD_INT 0
18190: ST_TO_ADDR
// uc_side := 0 ;
18191: LD_ADDR_OWVAR 20
18195: PUSH
18196: LD_INT 0
18198: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18199: LD_ADDR_OWVAR 29
18203: PUSH
18204: LD_INT 12
18206: PUSH
18207: LD_INT 12
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: ST_TO_ADDR
// hc_agressivity := 20 ;
18214: LD_ADDR_OWVAR 35
18218: PUSH
18219: LD_INT 20
18221: ST_TO_ADDR
// hc_class := class_tiger ;
18222: LD_ADDR_OWVAR 28
18226: PUSH
18227: LD_INT 14
18229: ST_TO_ADDR
// hc_gallery :=  ;
18230: LD_ADDR_OWVAR 33
18234: PUSH
18235: LD_STRING 
18237: ST_TO_ADDR
// hc_name :=  ;
18238: LD_ADDR_OWVAR 26
18242: PUSH
18243: LD_STRING 
18245: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18246: CALL_OW 44
18250: PPUSH
18251: LD_INT 0
18253: PPUSH
18254: CALL_OW 51
// end ;
18258: GO 18180
18260: POP
18261: POP
// end ;
18262: PPOPN 1
18264: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18265: LD_EXP 45
18269: PUSH
18270: LD_EXP 65
18274: AND
18275: IFFALSE 18284
18277: GO 18279
18279: DISABLE
// StreamSibBomb ;
18280: CALL 18285 0 0
18284: END
// export function StreamSibBomb ; var i , x , y ; begin
18285: LD_INT 0
18287: PPUSH
18288: PPUSH
18289: PPUSH
18290: PPUSH
// result := false ;
18291: LD_ADDR_VAR 0 1
18295: PUSH
18296: LD_INT 0
18298: ST_TO_ADDR
// for i := 1 to 16 do
18299: LD_ADDR_VAR 0 2
18303: PUSH
18304: DOUBLE
18305: LD_INT 1
18307: DEC
18308: ST_TO_ADDR
18309: LD_INT 16
18311: PUSH
18312: FOR_TO
18313: IFFALSE 18512
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18315: LD_ADDR_VAR 0 3
18319: PUSH
18320: LD_INT 10
18322: PUSH
18323: LD_INT 20
18325: PUSH
18326: LD_INT 30
18328: PUSH
18329: LD_INT 40
18331: PUSH
18332: LD_INT 50
18334: PUSH
18335: LD_INT 60
18337: PUSH
18338: LD_INT 70
18340: PUSH
18341: LD_INT 80
18343: PUSH
18344: LD_INT 90
18346: PUSH
18347: LD_INT 100
18349: PUSH
18350: LD_INT 110
18352: PUSH
18353: LD_INT 120
18355: PUSH
18356: LD_INT 130
18358: PUSH
18359: LD_INT 140
18361: PUSH
18362: LD_INT 150
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_INT 15
18387: PPUSH
18388: CALL_OW 12
18392: ARRAY
18393: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18394: LD_ADDR_VAR 0 4
18398: PUSH
18399: LD_INT 10
18401: PUSH
18402: LD_INT 20
18404: PUSH
18405: LD_INT 30
18407: PUSH
18408: LD_INT 40
18410: PUSH
18411: LD_INT 50
18413: PUSH
18414: LD_INT 60
18416: PUSH
18417: LD_INT 70
18419: PUSH
18420: LD_INT 80
18422: PUSH
18423: LD_INT 90
18425: PUSH
18426: LD_INT 100
18428: PUSH
18429: LD_INT 110
18431: PUSH
18432: LD_INT 120
18434: PUSH
18435: LD_INT 130
18437: PUSH
18438: LD_INT 140
18440: PUSH
18441: LD_INT 150
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 1
18463: PPUSH
18464: LD_INT 15
18466: PPUSH
18467: CALL_OW 12
18471: ARRAY
18472: ST_TO_ADDR
// if ValidHex ( x , y ) then
18473: LD_VAR 0 3
18477: PPUSH
18478: LD_VAR 0 4
18482: PPUSH
18483: CALL_OW 488
18487: IFFALSE 18510
// begin result := [ x , y ] ;
18489: LD_ADDR_VAR 0 1
18493: PUSH
18494: LD_VAR 0 3
18498: PUSH
18499: LD_VAR 0 4
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: ST_TO_ADDR
// break ;
18508: GO 18512
// end ; end ;
18510: GO 18312
18512: POP
18513: POP
// if result then
18514: LD_VAR 0 1
18518: IFFALSE 18578
// begin ToLua ( playSibBomb() ) ;
18520: LD_STRING playSibBomb()
18522: PPUSH
18523: CALL_OW 559
// wait ( 0 0$14 ) ;
18527: LD_INT 490
18529: PPUSH
18530: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
18534: LD_VAR 0 1
18538: PUSH
18539: LD_INT 1
18541: ARRAY
18542: PPUSH
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 2
18550: ARRAY
18551: PPUSH
18552: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
18556: LD_VAR 0 1
18560: PUSH
18561: LD_INT 1
18563: ARRAY
18564: PPUSH
18565: LD_VAR 0 1
18569: PUSH
18570: LD_INT 2
18572: ARRAY
18573: PPUSH
18574: CALL_OW 429
// end ; end ;
18578: LD_VAR 0 1
18582: RET
// every 0 0$1 trigger StreamModeActive and sReset do
18583: LD_EXP 45
18587: PUSH
18588: LD_EXP 67
18592: AND
18593: IFFALSE 18605
18595: GO 18597
18597: DISABLE
// YouLost (  ) ;
18598: LD_STRING 
18600: PPUSH
18601: CALL_OW 104
18605: END
// every 0 0$1 trigger StreamModeActive and sFog do
18606: LD_EXP 45
18610: PUSH
18611: LD_EXP 66
18615: AND
18616: IFFALSE 18630
18618: GO 18620
18620: DISABLE
// FogOff ( your_side ) ;
18621: LD_OWVAR 2
18625: PPUSH
18626: CALL_OW 344
18630: END
// every 0 0$1 trigger StreamModeActive and sSun do
18631: LD_EXP 45
18635: PUSH
18636: LD_EXP 68
18640: AND
18641: IFFALSE 18669
18643: GO 18645
18645: DISABLE
// begin solar_recharge_percent := 0 ;
18646: LD_ADDR_OWVAR 79
18650: PUSH
18651: LD_INT 0
18653: ST_TO_ADDR
// wait ( 5 5$00 ) ;
18654: LD_INT 10500
18656: PPUSH
18657: CALL_OW 67
// solar_recharge_percent := 100 ;
18661: LD_ADDR_OWVAR 79
18665: PUSH
18666: LD_INT 100
18668: ST_TO_ADDR
// end ;
18669: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
18670: LD_EXP 45
18674: PUSH
18675: LD_EXP 69
18679: AND
18680: IFFALSE 18919
18682: GO 18684
18684: DISABLE
18685: LD_INT 0
18687: PPUSH
18688: PPUSH
18689: PPUSH
// begin tmp := [ ] ;
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: EMPTY
18696: ST_TO_ADDR
// for i := 1 to 6 do
18697: LD_ADDR_VAR 0 1
18701: PUSH
18702: DOUBLE
18703: LD_INT 1
18705: DEC
18706: ST_TO_ADDR
18707: LD_INT 6
18709: PUSH
18710: FOR_TO
18711: IFFALSE 18816
// begin uc_nation := nation_nature ;
18713: LD_ADDR_OWVAR 21
18717: PUSH
18718: LD_INT 0
18720: ST_TO_ADDR
// uc_side := 0 ;
18721: LD_ADDR_OWVAR 20
18725: PUSH
18726: LD_INT 0
18728: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18729: LD_ADDR_OWVAR 29
18733: PUSH
18734: LD_INT 12
18736: PUSH
18737: LD_INT 12
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: ST_TO_ADDR
// hc_agressivity := 20 ;
18744: LD_ADDR_OWVAR 35
18748: PUSH
18749: LD_INT 20
18751: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
18752: LD_ADDR_OWVAR 28
18756: PUSH
18757: LD_INT 17
18759: ST_TO_ADDR
// hc_gallery :=  ;
18760: LD_ADDR_OWVAR 33
18764: PUSH
18765: LD_STRING 
18767: ST_TO_ADDR
// hc_name :=  ;
18768: LD_ADDR_OWVAR 26
18772: PUSH
18773: LD_STRING 
18775: ST_TO_ADDR
// un := CreateHuman ;
18776: LD_ADDR_VAR 0 2
18780: PUSH
18781: CALL_OW 44
18785: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
18786: LD_VAR 0 2
18790: PPUSH
18791: LD_INT 1
18793: PPUSH
18794: CALL_OW 51
// tmp := tmp ^ un ;
18798: LD_ADDR_VAR 0 3
18802: PUSH
18803: LD_VAR 0 3
18807: PUSH
18808: LD_VAR 0 2
18812: ADD
18813: ST_TO_ADDR
// end ;
18814: GO 18710
18816: POP
18817: POP
// repeat wait ( 0 0$1 ) ;
18818: LD_INT 35
18820: PPUSH
18821: CALL_OW 67
// for un in tmp do
18825: LD_ADDR_VAR 0 2
18829: PUSH
18830: LD_VAR 0 3
18834: PUSH
18835: FOR_IN
18836: IFFALSE 18910
// begin if IsDead ( un ) then
18838: LD_VAR 0 2
18842: PPUSH
18843: CALL_OW 301
18847: IFFALSE 18867
// begin tmp := tmp diff un ;
18849: LD_ADDR_VAR 0 3
18853: PUSH
18854: LD_VAR 0 3
18858: PUSH
18859: LD_VAR 0 2
18863: DIFF
18864: ST_TO_ADDR
// continue ;
18865: GO 18835
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
18867: LD_VAR 0 2
18871: PPUSH
18872: LD_INT 3
18874: PUSH
18875: LD_INT 22
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PPUSH
18889: CALL_OW 69
18893: PPUSH
18894: LD_VAR 0 2
18898: PPUSH
18899: CALL_OW 74
18903: PPUSH
18904: CALL_OW 115
// end ;
18908: GO 18835
18910: POP
18911: POP
// until not tmp ;
18912: LD_VAR 0 3
18916: NOT
18917: IFFALSE 18818
// end ;
18919: PPOPN 3
18921: END
// every 0 0$1 trigger StreamModeActive and sTroll do
18922: LD_EXP 45
18926: PUSH
18927: LD_EXP 70
18931: AND
18932: IFFALSE 18986
18934: GO 18936
18936: DISABLE
// begin ToLua ( displayTroll(); ) ;
18937: LD_STRING displayTroll();
18939: PPUSH
18940: CALL_OW 559
// wait ( 3 3$00 ) ;
18944: LD_INT 6300
18946: PPUSH
18947: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18951: LD_STRING hideTroll();
18953: PPUSH
18954: CALL_OW 559
// wait ( 1 1$00 ) ;
18958: LD_INT 2100
18960: PPUSH
18961: CALL_OW 67
// ToLua ( displayTroll(); ) ;
18965: LD_STRING displayTroll();
18967: PPUSH
18968: CALL_OW 559
// wait ( 1 1$00 ) ;
18972: LD_INT 2100
18974: PPUSH
18975: CALL_OW 67
// ToLua ( hideTroll(); ) ;
18979: LD_STRING hideTroll();
18981: PPUSH
18982: CALL_OW 559
// end ;
18986: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
18987: LD_EXP 45
18991: PUSH
18992: LD_EXP 71
18996: AND
18997: IFFALSE 19060
18999: GO 19001
19001: DISABLE
19002: LD_INT 0
19004: PPUSH
// begin p := 0 ;
19005: LD_ADDR_VAR 0 1
19009: PUSH
19010: LD_INT 0
19012: ST_TO_ADDR
// repeat game_speed := 1 ;
19013: LD_ADDR_OWVAR 65
19017: PUSH
19018: LD_INT 1
19020: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19021: LD_INT 35
19023: PPUSH
19024: CALL_OW 67
// p := p + 1 ;
19028: LD_ADDR_VAR 0 1
19032: PUSH
19033: LD_VAR 0 1
19037: PUSH
19038: LD_INT 1
19040: PLUS
19041: ST_TO_ADDR
// until p >= 60 ;
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 60
19049: GREATEREQUAL
19050: IFFALSE 19013
// game_speed := 4 ;
19052: LD_ADDR_OWVAR 65
19056: PUSH
19057: LD_INT 4
19059: ST_TO_ADDR
// end ;
19060: PPOPN 1
19062: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19063: LD_EXP 45
19067: PUSH
19068: LD_EXP 72
19072: AND
19073: IFFALSE 19219
19075: GO 19077
19077: DISABLE
19078: LD_INT 0
19080: PPUSH
19081: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19082: LD_ADDR_VAR 0 1
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_OWVAR 2
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: LD_INT 30
19104: PUSH
19105: LD_INT 0
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 30
19114: PUSH
19115: LD_INT 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PPUSH
19131: CALL_OW 69
19135: ST_TO_ADDR
// if not depot then
19136: LD_VAR 0 1
19140: NOT
19141: IFFALSE 19145
// exit ;
19143: GO 19219
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19145: LD_ADDR_VAR 0 2
19149: PUSH
19150: LD_VAR 0 1
19154: PUSH
19155: LD_INT 1
19157: PPUSH
19158: LD_VAR 0 1
19162: PPUSH
19163: CALL_OW 12
19167: ARRAY
19168: PPUSH
19169: CALL_OW 274
19173: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19174: LD_VAR 0 2
19178: PPUSH
19179: LD_INT 1
19181: PPUSH
19182: LD_INT 0
19184: PPUSH
19185: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19189: LD_VAR 0 2
19193: PPUSH
19194: LD_INT 2
19196: PPUSH
19197: LD_INT 0
19199: PPUSH
19200: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19204: LD_VAR 0 2
19208: PPUSH
19209: LD_INT 3
19211: PPUSH
19212: LD_INT 0
19214: PPUSH
19215: CALL_OW 277
// end ;
19219: PPOPN 2
19221: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19222: LD_EXP 45
19226: PUSH
19227: LD_EXP 73
19231: AND
19232: IFFALSE 19329
19234: GO 19236
19236: DISABLE
19237: LD_INT 0
19239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19240: LD_ADDR_VAR 0 1
19244: PUSH
19245: LD_INT 22
19247: PUSH
19248: LD_OWVAR 2
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 21
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: LD_INT 3
19269: PUSH
19270: LD_INT 23
19272: PUSH
19273: LD_INT 0
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: ST_TO_ADDR
// if not tmp then
19294: LD_VAR 0 1
19298: NOT
19299: IFFALSE 19303
// exit ;
19301: GO 19329
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19303: LD_VAR 0 1
19307: PUSH
19308: LD_INT 1
19310: PPUSH
19311: LD_VAR 0 1
19315: PPUSH
19316: CALL_OW 12
19320: ARRAY
19321: PPUSH
19322: LD_INT 200
19324: PPUSH
19325: CALL_OW 234
// end ;
19329: PPOPN 1
19331: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19332: LD_EXP 45
19336: PUSH
19337: LD_EXP 74
19341: AND
19342: IFFALSE 19421
19344: GO 19346
19346: DISABLE
19347: LD_INT 0
19349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19350: LD_ADDR_VAR 0 1
19354: PUSH
19355: LD_INT 22
19357: PUSH
19358: LD_OWVAR 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 21
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 69
19385: ST_TO_ADDR
// if not tmp then
19386: LD_VAR 0 1
19390: NOT
19391: IFFALSE 19395
// exit ;
19393: GO 19421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19395: LD_VAR 0 1
19399: PUSH
19400: LD_INT 1
19402: PPUSH
19403: LD_VAR 0 1
19407: PPUSH
19408: CALL_OW 12
19412: ARRAY
19413: PPUSH
19414: LD_INT 60
19416: PPUSH
19417: CALL_OW 234
// end ;
19421: PPOPN 1
19423: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
19424: LD_EXP 45
19428: PUSH
19429: LD_EXP 75
19433: AND
19434: IFFALSE 19533
19436: GO 19438
19438: DISABLE
19439: LD_INT 0
19441: PPUSH
19442: PPUSH
// begin enable ;
19443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
19444: LD_ADDR_VAR 0 1
19448: PUSH
19449: LD_INT 22
19451: PUSH
19452: LD_OWVAR 2
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 61
19463: PUSH
19464: EMPTY
19465: LIST
19466: PUSH
19467: LD_INT 33
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: PPUSH
19482: CALL_OW 69
19486: ST_TO_ADDR
// if not tmp then
19487: LD_VAR 0 1
19491: NOT
19492: IFFALSE 19496
// exit ;
19494: GO 19533
// for i in tmp do
19496: LD_ADDR_VAR 0 2
19500: PUSH
19501: LD_VAR 0 1
19505: PUSH
19506: FOR_IN
19507: IFFALSE 19531
// if IsControledBy ( i ) then
19509: LD_VAR 0 2
19513: PPUSH
19514: CALL_OW 312
19518: IFFALSE 19529
// ComUnlink ( i ) ;
19520: LD_VAR 0 2
19524: PPUSH
19525: CALL_OW 136
19529: GO 19506
19531: POP
19532: POP
// end ;
19533: PPOPN 2
19535: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
19536: LD_EXP 45
19540: PUSH
19541: LD_EXP 76
19545: AND
19546: IFFALSE 19686
19548: GO 19550
19550: DISABLE
19551: LD_INT 0
19553: PPUSH
19554: PPUSH
// begin ToLua ( displayPowell(); ) ;
19555: LD_STRING displayPowell();
19557: PPUSH
19558: CALL_OW 559
// uc_side := 0 ;
19562: LD_ADDR_OWVAR 20
19566: PUSH
19567: LD_INT 0
19569: ST_TO_ADDR
// uc_nation := 2 ;
19570: LD_ADDR_OWVAR 21
19574: PUSH
19575: LD_INT 2
19577: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
19578: LD_ADDR_OWVAR 37
19582: PUSH
19583: LD_INT 14
19585: ST_TO_ADDR
// vc_engine := engine_siberite ;
19586: LD_ADDR_OWVAR 39
19590: PUSH
19591: LD_INT 3
19593: ST_TO_ADDR
// vc_control := control_apeman ;
19594: LD_ADDR_OWVAR 38
19598: PUSH
19599: LD_INT 5
19601: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
19602: LD_ADDR_OWVAR 40
19606: PUSH
19607: LD_INT 29
19609: ST_TO_ADDR
// un := CreateVehicle ;
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: CALL_OW 45
19619: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19620: LD_VAR 0 2
19624: PPUSH
19625: LD_INT 1
19627: PPUSH
19628: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
19632: LD_INT 35
19634: PPUSH
19635: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
19639: LD_VAR 0 2
19643: PPUSH
19644: LD_INT 22
19646: PUSH
19647: LD_OWVAR 2
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: PPUSH
19656: CALL_OW 69
19660: PPUSH
19661: LD_VAR 0 2
19665: PPUSH
19666: CALL_OW 74
19670: PPUSH
19671: CALL_OW 115
// until IsDead ( un ) ;
19675: LD_VAR 0 2
19679: PPUSH
19680: CALL_OW 301
19684: IFFALSE 19632
// end ;
19686: PPOPN 2
19688: END
// every 0 0$1 trigger StreamModeActive and sStu do
19689: LD_EXP 45
19693: PUSH
19694: LD_EXP 84
19698: AND
19699: IFFALSE 19715
19701: GO 19703
19703: DISABLE
// begin ToLua ( displayStucuk(); ) ;
19704: LD_STRING displayStucuk();
19706: PPUSH
19707: CALL_OW 559
// ResetFog ;
19711: CALL_OW 335
// end ;
19715: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
19716: LD_EXP 45
19720: PUSH
19721: LD_EXP 77
19725: AND
19726: IFFALSE 19867
19728: GO 19730
19730: DISABLE
19731: LD_INT 0
19733: PPUSH
19734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19735: LD_ADDR_VAR 0 2
19739: PUSH
19740: LD_INT 22
19742: PUSH
19743: LD_OWVAR 2
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 21
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PPUSH
19766: CALL_OW 69
19770: ST_TO_ADDR
// if not tmp then
19771: LD_VAR 0 2
19775: NOT
19776: IFFALSE 19780
// exit ;
19778: GO 19867
// un := tmp [ rand ( 1 , tmp ) ] ;
19780: LD_ADDR_VAR 0 1
19784: PUSH
19785: LD_VAR 0 2
19789: PUSH
19790: LD_INT 1
19792: PPUSH
19793: LD_VAR 0 2
19797: PPUSH
19798: CALL_OW 12
19802: ARRAY
19803: ST_TO_ADDR
// SetSide ( un , 0 ) ;
19804: LD_VAR 0 1
19808: PPUSH
19809: LD_INT 0
19811: PPUSH
19812: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
19816: LD_VAR 0 1
19820: PPUSH
19821: LD_OWVAR 3
19825: PUSH
19826: LD_VAR 0 1
19830: DIFF
19831: PPUSH
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 74
19841: PPUSH
19842: CALL_OW 115
// wait ( 0 0$20 ) ;
19846: LD_INT 700
19848: PPUSH
19849: CALL_OW 67
// SetSide ( un , your_side ) ;
19853: LD_VAR 0 1
19857: PPUSH
19858: LD_OWVAR 2
19862: PPUSH
19863: CALL_OW 235
// end ;
19867: PPOPN 2
19869: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
19870: LD_EXP 45
19874: PUSH
19875: LD_EXP 78
19879: AND
19880: IFFALSE 19986
19882: GO 19884
19884: DISABLE
19885: LD_INT 0
19887: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19888: LD_ADDR_VAR 0 1
19892: PUSH
19893: LD_INT 22
19895: PUSH
19896: LD_OWVAR 2
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 2
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 0
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PPUSH
19937: CALL_OW 69
19941: ST_TO_ADDR
// if not depot then
19942: LD_VAR 0 1
19946: NOT
19947: IFFALSE 19951
// exit ;
19949: GO 19986
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
19951: LD_VAR 0 1
19955: PUSH
19956: LD_INT 1
19958: ARRAY
19959: PPUSH
19960: CALL_OW 250
19964: PPUSH
19965: LD_VAR 0 1
19969: PUSH
19970: LD_INT 1
19972: ARRAY
19973: PPUSH
19974: CALL_OW 251
19978: PPUSH
19979: LD_INT 70
19981: PPUSH
19982: CALL_OW 495
// end ;
19986: PPOPN 1
19988: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
19989: LD_EXP 45
19993: PUSH
19994: LD_EXP 79
19998: AND
19999: IFFALSE 20210
20001: GO 20003
20003: DISABLE
20004: LD_INT 0
20006: PPUSH
20007: PPUSH
20008: PPUSH
20009: PPUSH
20010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20011: LD_ADDR_VAR 0 5
20015: PUSH
20016: LD_INT 22
20018: PUSH
20019: LD_OWVAR 2
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: LD_INT 21
20030: PUSH
20031: LD_INT 1
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PPUSH
20042: CALL_OW 69
20046: ST_TO_ADDR
// if not tmp then
20047: LD_VAR 0 5
20051: NOT
20052: IFFALSE 20056
// exit ;
20054: GO 20210
// for i in tmp do
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_VAR 0 5
20065: PUSH
20066: FOR_IN
20067: IFFALSE 20208
// begin d := rand ( 0 , 5 ) ;
20069: LD_ADDR_VAR 0 4
20073: PUSH
20074: LD_INT 0
20076: PPUSH
20077: LD_INT 5
20079: PPUSH
20080: CALL_OW 12
20084: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20085: LD_ADDR_VAR 0 2
20089: PUSH
20090: LD_VAR 0 1
20094: PPUSH
20095: CALL_OW 250
20099: PPUSH
20100: LD_VAR 0 4
20104: PPUSH
20105: LD_INT 3
20107: PPUSH
20108: LD_INT 12
20110: PPUSH
20111: CALL_OW 12
20115: PPUSH
20116: CALL_OW 272
20120: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20121: LD_ADDR_VAR 0 3
20125: PUSH
20126: LD_VAR 0 1
20130: PPUSH
20131: CALL_OW 251
20135: PPUSH
20136: LD_VAR 0 4
20140: PPUSH
20141: LD_INT 3
20143: PPUSH
20144: LD_INT 12
20146: PPUSH
20147: CALL_OW 12
20151: PPUSH
20152: CALL_OW 273
20156: ST_TO_ADDR
// if ValidHex ( x , y ) then
20157: LD_VAR 0 2
20161: PPUSH
20162: LD_VAR 0 3
20166: PPUSH
20167: CALL_OW 488
20171: IFFALSE 20206
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20173: LD_VAR 0 1
20177: PPUSH
20178: LD_VAR 0 2
20182: PPUSH
20183: LD_VAR 0 3
20187: PPUSH
20188: LD_INT 3
20190: PPUSH
20191: LD_INT 6
20193: PPUSH
20194: CALL_OW 12
20198: PPUSH
20199: LD_INT 1
20201: PPUSH
20202: CALL_OW 483
// end ;
20206: GO 20066
20208: POP
20209: POP
// end ;
20210: PPOPN 5
20212: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20213: LD_EXP 45
20217: PUSH
20218: LD_EXP 80
20222: AND
20223: IFFALSE 20317
20225: GO 20227
20227: DISABLE
20228: LD_INT 0
20230: PPUSH
20231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20232: LD_ADDR_VAR 0 2
20236: PUSH
20237: LD_INT 22
20239: PUSH
20240: LD_OWVAR 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 32
20251: PUSH
20252: LD_INT 1
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 21
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: LIST
20273: PPUSH
20274: CALL_OW 69
20278: ST_TO_ADDR
// if not tmp then
20279: LD_VAR 0 2
20283: NOT
20284: IFFALSE 20288
// exit ;
20286: GO 20317
// for i in tmp do
20288: LD_ADDR_VAR 0 1
20292: PUSH
20293: LD_VAR 0 2
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20315
// SetFuel ( i , 0 ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: LD_INT 0
20308: PPUSH
20309: CALL_OW 240
20313: GO 20298
20315: POP
20316: POP
// end ;
20317: PPOPN 2
20319: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20320: LD_EXP 45
20324: PUSH
20325: LD_EXP 81
20329: AND
20330: IFFALSE 20396
20332: GO 20334
20334: DISABLE
20335: LD_INT 0
20337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20338: LD_ADDR_VAR 0 1
20342: PUSH
20343: LD_INT 22
20345: PUSH
20346: LD_OWVAR 2
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 30
20357: PUSH
20358: LD_INT 29
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 69
20373: ST_TO_ADDR
// if not tmp then
20374: LD_VAR 0 1
20378: NOT
20379: IFFALSE 20383
// exit ;
20381: GO 20396
// DestroyUnit ( tmp [ 1 ] ) ;
20383: LD_VAR 0 1
20387: PUSH
20388: LD_INT 1
20390: ARRAY
20391: PPUSH
20392: CALL_OW 65
// end ;
20396: PPOPN 1
20398: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20399: LD_EXP 45
20403: PUSH
20404: LD_EXP 83
20408: AND
20409: IFFALSE 20538
20411: GO 20413
20413: DISABLE
20414: LD_INT 0
20416: PPUSH
// begin uc_side := 0 ;
20417: LD_ADDR_OWVAR 20
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// uc_nation := nation_arabian ;
20425: LD_ADDR_OWVAR 21
20429: PUSH
20430: LD_INT 2
20432: ST_TO_ADDR
// hc_gallery :=  ;
20433: LD_ADDR_OWVAR 33
20437: PUSH
20438: LD_STRING 
20440: ST_TO_ADDR
// hc_name :=  ;
20441: LD_ADDR_OWVAR 26
20445: PUSH
20446: LD_STRING 
20448: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
20449: LD_INT 1
20451: PPUSH
20452: LD_INT 11
20454: PPUSH
20455: LD_INT 10
20457: PPUSH
20458: CALL_OW 380
// un := CreateHuman ;
20462: LD_ADDR_VAR 0 1
20466: PUSH
20467: CALL_OW 44
20471: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20472: LD_VAR 0 1
20476: PPUSH
20477: LD_INT 1
20479: PPUSH
20480: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20484: LD_INT 35
20486: PPUSH
20487: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20491: LD_VAR 0 1
20495: PPUSH
20496: LD_INT 22
20498: PUSH
20499: LD_OWVAR 2
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: PPUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 74
20522: PPUSH
20523: CALL_OW 115
// until IsDead ( un ) ;
20527: LD_VAR 0 1
20531: PPUSH
20532: CALL_OW 301
20536: IFFALSE 20484
// end ;
20538: PPOPN 1
20540: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
20541: LD_EXP 45
20545: PUSH
20546: LD_EXP 85
20550: AND
20551: IFFALSE 20563
20553: GO 20555
20555: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
20556: LD_STRING earthquake(getX(game), 0, 32)
20558: PPUSH
20559: CALL_OW 559
20563: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
20564: LD_EXP 45
20568: PUSH
20569: LD_EXP 86
20573: AND
20574: IFFALSE 20665
20576: GO 20578
20578: DISABLE
20579: LD_INT 0
20581: PPUSH
// begin enable ;
20582: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
20583: LD_ADDR_VAR 0 1
20587: PUSH
20588: LD_INT 22
20590: PUSH
20591: LD_OWVAR 2
20595: PUSH
20596: EMPTY
20597: LIST
20598: LIST
20599: PUSH
20600: LD_INT 21
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 33
20612: PUSH
20613: LD_INT 3
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: PPUSH
20625: CALL_OW 69
20629: ST_TO_ADDR
// if not tmp then
20630: LD_VAR 0 1
20634: NOT
20635: IFFALSE 20639
// exit ;
20637: GO 20665
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20639: LD_VAR 0 1
20643: PUSH
20644: LD_INT 1
20646: PPUSH
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL_OW 12
20656: ARRAY
20657: PPUSH
20658: LD_INT 1
20660: PPUSH
20661: CALL_OW 234
// end ;
20665: PPOPN 1
20667: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
20668: LD_EXP 45
20672: PUSH
20673: LD_EXP 87
20677: AND
20678: IFFALSE 20819
20680: GO 20682
20682: DISABLE
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20688: LD_ADDR_VAR 0 3
20692: PUSH
20693: LD_INT 22
20695: PUSH
20696: LD_OWVAR 2
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PUSH
20705: LD_INT 25
20707: PUSH
20708: LD_INT 1
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PPUSH
20719: CALL_OW 69
20723: ST_TO_ADDR
// if not tmp then
20724: LD_VAR 0 3
20728: NOT
20729: IFFALSE 20733
// exit ;
20731: GO 20819
// un := tmp [ rand ( 1 , tmp ) ] ;
20733: LD_ADDR_VAR 0 2
20737: PUSH
20738: LD_VAR 0 3
20742: PUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_VAR 0 3
20750: PPUSH
20751: CALL_OW 12
20755: ARRAY
20756: ST_TO_ADDR
// if Crawls ( un ) then
20757: LD_VAR 0 2
20761: PPUSH
20762: CALL_OW 318
20766: IFFALSE 20777
// ComWalk ( un ) ;
20768: LD_VAR 0 2
20772: PPUSH
20773: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
20777: LD_VAR 0 2
20781: PPUSH
20782: LD_INT 9
20784: PPUSH
20785: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
20789: LD_INT 28
20791: PPUSH
20792: LD_OWVAR 2
20796: PPUSH
20797: LD_INT 2
20799: PPUSH
20800: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
20804: LD_INT 29
20806: PPUSH
20807: LD_OWVAR 2
20811: PPUSH
20812: LD_INT 2
20814: PPUSH
20815: CALL_OW 322
// end ;
20819: PPOPN 3
20821: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
20822: LD_EXP 45
20826: PUSH
20827: LD_EXP 88
20831: AND
20832: IFFALSE 20943
20834: GO 20836
20836: DISABLE
20837: LD_INT 0
20839: PPUSH
20840: PPUSH
20841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20842: LD_ADDR_VAR 0 3
20846: PUSH
20847: LD_INT 22
20849: PUSH
20850: LD_OWVAR 2
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 25
20861: PUSH
20862: LD_INT 1
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PPUSH
20873: CALL_OW 69
20877: ST_TO_ADDR
// if not tmp then
20878: LD_VAR 0 3
20882: NOT
20883: IFFALSE 20887
// exit ;
20885: GO 20943
// un := tmp [ rand ( 1 , tmp ) ] ;
20887: LD_ADDR_VAR 0 2
20891: PUSH
20892: LD_VAR 0 3
20896: PUSH
20897: LD_INT 1
20899: PPUSH
20900: LD_VAR 0 3
20904: PPUSH
20905: CALL_OW 12
20909: ARRAY
20910: ST_TO_ADDR
// if Crawls ( un ) then
20911: LD_VAR 0 2
20915: PPUSH
20916: CALL_OW 318
20920: IFFALSE 20931
// ComWalk ( un ) ;
20922: LD_VAR 0 2
20926: PPUSH
20927: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20931: LD_VAR 0 2
20935: PPUSH
20936: LD_INT 8
20938: PPUSH
20939: CALL_OW 336
// end ;
20943: PPOPN 3
20945: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
20946: LD_EXP 45
20950: PUSH
20951: LD_EXP 89
20955: AND
20956: IFFALSE 21100
20958: GO 20960
20960: DISABLE
20961: LD_INT 0
20963: PPUSH
20964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
20965: LD_ADDR_VAR 0 2
20969: PUSH
20970: LD_INT 22
20972: PUSH
20973: LD_OWVAR 2
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 21
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 2
20994: PUSH
20995: LD_INT 34
20997: PUSH
20998: LD_INT 12
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 34
21007: PUSH
21008: LD_INT 51
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: PUSH
21015: LD_INT 34
21017: PUSH
21018: LD_INT 32
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: PPUSH
21036: CALL_OW 69
21040: ST_TO_ADDR
// if not tmp then
21041: LD_VAR 0 2
21045: NOT
21046: IFFALSE 21050
// exit ;
21048: GO 21100
// for i in tmp do
21050: LD_ADDR_VAR 0 1
21054: PUSH
21055: LD_VAR 0 2
21059: PUSH
21060: FOR_IN
21061: IFFALSE 21098
// if GetCargo ( i , mat_artifact ) = 0 then
21063: LD_VAR 0 1
21067: PPUSH
21068: LD_INT 4
21070: PPUSH
21071: CALL_OW 289
21075: PUSH
21076: LD_INT 0
21078: EQUAL
21079: IFFALSE 21096
// SetCargo ( i , mat_siberit , 100 ) ;
21081: LD_VAR 0 1
21085: PPUSH
21086: LD_INT 3
21088: PPUSH
21089: LD_INT 100
21091: PPUSH
21092: CALL_OW 290
21096: GO 21060
21098: POP
21099: POP
// end ;
21100: PPOPN 2
21102: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21103: LD_EXP 45
21107: PUSH
21108: LD_EXP 90
21112: AND
21113: IFFALSE 21296
21115: GO 21117
21117: DISABLE
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21122: LD_ADDR_VAR 0 2
21126: PUSH
21127: LD_INT 22
21129: PUSH
21130: LD_OWVAR 2
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: PPUSH
21139: CALL_OW 69
21143: ST_TO_ADDR
// if not tmp then
21144: LD_VAR 0 2
21148: NOT
21149: IFFALSE 21153
// exit ;
21151: GO 21296
// for i := 1 to 2 do
21153: LD_ADDR_VAR 0 1
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_INT 2
21165: PUSH
21166: FOR_TO
21167: IFFALSE 21294
// begin uc_side := your_side ;
21169: LD_ADDR_OWVAR 20
21173: PUSH
21174: LD_OWVAR 2
21178: ST_TO_ADDR
// uc_nation := nation_american ;
21179: LD_ADDR_OWVAR 21
21183: PUSH
21184: LD_INT 1
21186: ST_TO_ADDR
// vc_chassis := us_morphling ;
21187: LD_ADDR_OWVAR 37
21191: PUSH
21192: LD_INT 5
21194: ST_TO_ADDR
// vc_engine := engine_siberite ;
21195: LD_ADDR_OWVAR 39
21199: PUSH
21200: LD_INT 3
21202: ST_TO_ADDR
// vc_control := control_computer ;
21203: LD_ADDR_OWVAR 38
21207: PUSH
21208: LD_INT 3
21210: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21211: LD_ADDR_OWVAR 40
21215: PUSH
21216: LD_INT 10
21218: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21219: LD_VAR 0 2
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PPUSH
21228: CALL_OW 310
21232: NOT
21233: IFFALSE 21280
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21235: CALL_OW 45
21239: PPUSH
21240: LD_VAR 0 2
21244: PUSH
21245: LD_INT 1
21247: ARRAY
21248: PPUSH
21249: CALL_OW 250
21253: PPUSH
21254: LD_VAR 0 2
21258: PUSH
21259: LD_INT 1
21261: ARRAY
21262: PPUSH
21263: CALL_OW 251
21267: PPUSH
21268: LD_INT 12
21270: PPUSH
21271: LD_INT 1
21273: PPUSH
21274: CALL_OW 50
21278: GO 21292
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21280: CALL_OW 45
21284: PPUSH
21285: LD_INT 1
21287: PPUSH
21288: CALL_OW 51
// end ;
21292: GO 21166
21294: POP
21295: POP
// end ;
21296: PPOPN 2
21298: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21299: LD_EXP 45
21303: PUSH
21304: LD_EXP 91
21308: AND
21309: IFFALSE 21531
21311: GO 21313
21313: DISABLE
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_INT 22
21329: PUSH
21330: LD_OWVAR 2
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 21
21341: PUSH
21342: LD_INT 1
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PUSH
21349: LD_INT 3
21351: PUSH
21352: LD_INT 23
21354: PUSH
21355: LD_INT 0
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: ST_TO_ADDR
// if not tmp then
21376: LD_VAR 0 6
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21531
// s1 := rand ( 1 , 4 ) ;
21385: LD_ADDR_VAR 0 2
21389: PUSH
21390: LD_INT 1
21392: PPUSH
21393: LD_INT 4
21395: PPUSH
21396: CALL_OW 12
21400: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21401: LD_ADDR_VAR 0 4
21405: PUSH
21406: LD_VAR 0 6
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_VAR 0 2
21419: PPUSH
21420: CALL_OW 259
21424: ST_TO_ADDR
// if s1 = 1 then
21425: LD_VAR 0 2
21429: PUSH
21430: LD_INT 1
21432: EQUAL
21433: IFFALSE 21453
// s2 := rand ( 2 , 4 ) else
21435: LD_ADDR_VAR 0 3
21439: PUSH
21440: LD_INT 2
21442: PPUSH
21443: LD_INT 4
21445: PPUSH
21446: CALL_OW 12
21450: ST_TO_ADDR
21451: GO 21461
// s2 := 1 ;
21453: LD_ADDR_VAR 0 3
21457: PUSH
21458: LD_INT 1
21460: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
21461: LD_ADDR_VAR 0 5
21465: PUSH
21466: LD_VAR 0 6
21470: PUSH
21471: LD_INT 1
21473: ARRAY
21474: PPUSH
21475: LD_VAR 0 3
21479: PPUSH
21480: CALL_OW 259
21484: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
21485: LD_VAR 0 6
21489: PUSH
21490: LD_INT 1
21492: ARRAY
21493: PPUSH
21494: LD_VAR 0 2
21498: PPUSH
21499: LD_VAR 0 5
21503: PPUSH
21504: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
21508: LD_VAR 0 6
21512: PUSH
21513: LD_INT 1
21515: ARRAY
21516: PPUSH
21517: LD_VAR 0 3
21521: PPUSH
21522: LD_VAR 0 4
21526: PPUSH
21527: CALL_OW 237
// end ;
21531: PPOPN 6
21533: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
21534: LD_EXP 45
21538: PUSH
21539: LD_EXP 92
21543: AND
21544: IFFALSE 21623
21546: GO 21548
21548: DISABLE
21549: LD_INT 0
21551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
21552: LD_ADDR_VAR 0 1
21556: PUSH
21557: LD_INT 22
21559: PUSH
21560: LD_OWVAR 2
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 30
21571: PUSH
21572: LD_INT 3
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PPUSH
21583: CALL_OW 69
21587: ST_TO_ADDR
// if not tmp then
21588: LD_VAR 0 1
21592: NOT
21593: IFFALSE 21597
// exit ;
21595: GO 21623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21597: LD_VAR 0 1
21601: PUSH
21602: LD_INT 1
21604: PPUSH
21605: LD_VAR 0 1
21609: PPUSH
21610: CALL_OW 12
21614: ARRAY
21615: PPUSH
21616: LD_INT 1
21618: PPUSH
21619: CALL_OW 234
// end ;
21623: PPOPN 1
21625: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
21626: LD_EXP 45
21630: PUSH
21631: LD_EXP 93
21635: AND
21636: IFFALSE 21748
21638: GO 21640
21640: DISABLE
21641: LD_INT 0
21643: PPUSH
21644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
21645: LD_ADDR_VAR 0 2
21649: PUSH
21650: LD_INT 22
21652: PUSH
21653: LD_OWVAR 2
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 30
21667: PUSH
21668: LD_INT 27
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 30
21677: PUSH
21678: LD_INT 26
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 30
21687: PUSH
21688: LD_INT 28
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PPUSH
21705: CALL_OW 69
21709: ST_TO_ADDR
// if not tmp then
21710: LD_VAR 0 2
21714: NOT
21715: IFFALSE 21719
// exit ;
21717: GO 21748
// for i in tmp do
21719: LD_ADDR_VAR 0 1
21723: PUSH
21724: LD_VAR 0 2
21728: PUSH
21729: FOR_IN
21730: IFFALSE 21746
// SetLives ( i , 1 ) ;
21732: LD_VAR 0 1
21736: PPUSH
21737: LD_INT 1
21739: PPUSH
21740: CALL_OW 234
21744: GO 21729
21746: POP
21747: POP
// end ;
21748: PPOPN 2
21750: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
21751: LD_EXP 45
21755: PUSH
21756: LD_EXP 94
21760: AND
21761: IFFALSE 22048
21763: GO 21765
21765: DISABLE
21766: LD_INT 0
21768: PPUSH
21769: PPUSH
21770: PPUSH
// begin i := rand ( 1 , 7 ) ;
21771: LD_ADDR_VAR 0 1
21775: PUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_INT 7
21781: PPUSH
21782: CALL_OW 12
21786: ST_TO_ADDR
// case i of 1 :
21787: LD_VAR 0 1
21791: PUSH
21792: LD_INT 1
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21810
21800: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
21801: LD_STRING earthquake(getX(game), 0, 32)
21803: PPUSH
21804: CALL_OW 559
21808: GO 22048
21810: LD_INT 2
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21832
21818: POP
// begin ToLua ( displayStucuk(); ) ;
21819: LD_STRING displayStucuk();
21821: PPUSH
21822: CALL_OW 559
// ResetFog ;
21826: CALL_OW 335
// end ; 3 :
21830: GO 22048
21832: LD_INT 3
21834: DOUBLE
21835: EQUAL
21836: IFTRUE 21840
21838: GO 21944
21840: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21841: LD_ADDR_VAR 0 2
21845: PUSH
21846: LD_INT 22
21848: PUSH
21849: LD_OWVAR 2
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 25
21860: PUSH
21861: LD_INT 1
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PPUSH
21872: CALL_OW 69
21876: ST_TO_ADDR
// if not tmp then
21877: LD_VAR 0 2
21881: NOT
21882: IFFALSE 21886
// exit ;
21884: GO 22048
// un := tmp [ rand ( 1 , tmp ) ] ;
21886: LD_ADDR_VAR 0 3
21890: PUSH
21891: LD_VAR 0 2
21895: PUSH
21896: LD_INT 1
21898: PPUSH
21899: LD_VAR 0 2
21903: PPUSH
21904: CALL_OW 12
21908: ARRAY
21909: ST_TO_ADDR
// if Crawls ( un ) then
21910: LD_VAR 0 3
21914: PPUSH
21915: CALL_OW 318
21919: IFFALSE 21930
// ComWalk ( un ) ;
21921: LD_VAR 0 3
21925: PPUSH
21926: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21930: LD_VAR 0 3
21934: PPUSH
21935: LD_INT 8
21937: PPUSH
21938: CALL_OW 336
// end ; 4 :
21942: GO 22048
21944: LD_INT 4
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 22026
21952: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21953: LD_ADDR_VAR 0 2
21957: PUSH
21958: LD_INT 22
21960: PUSH
21961: LD_OWVAR 2
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 29
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 69
21988: ST_TO_ADDR
// if not tmp then
21989: LD_VAR 0 2
21993: NOT
21994: IFFALSE 21998
// exit ;
21996: GO 22048
// CenterNowOnUnits ( tmp [ 1 ] ) ;
21998: LD_VAR 0 2
22002: PUSH
22003: LD_INT 1
22005: ARRAY
22006: PPUSH
22007: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22011: LD_VAR 0 2
22015: PUSH
22016: LD_INT 1
22018: ARRAY
22019: PPUSH
22020: CALL_OW 65
// end ; 5 .. 7 :
22024: GO 22048
22026: LD_INT 5
22028: DOUBLE
22029: GREATEREQUAL
22030: IFFALSE 22038
22032: LD_INT 7
22034: DOUBLE
22035: LESSEQUAL
22036: IFTRUE 22040
22038: GO 22047
22040: POP
// StreamSibBomb ; end ;
22041: CALL 18285 0 0
22045: GO 22048
22047: POP
// end ;
22048: PPOPN 3
22050: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22051: LD_EXP 45
22055: PUSH
22056: LD_EXP 95
22060: AND
22061: IFFALSE 22217
22063: GO 22065
22065: DISABLE
22066: LD_INT 0
22068: PPUSH
22069: PPUSH
22070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_INT 81
22078: PUSH
22079: LD_OWVAR 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 21
22103: PUSH
22104: LD_INT 2
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: LIST
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PPUSH
22120: CALL_OW 69
22124: ST_TO_ADDR
// if not tmp then
22125: LD_VAR 0 2
22129: NOT
22130: IFFALSE 22134
// exit ;
22132: GO 22217
// p := 0 ;
22134: LD_ADDR_VAR 0 3
22138: PUSH
22139: LD_INT 0
22141: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22142: LD_INT 35
22144: PPUSH
22145: CALL_OW 67
// p := p + 1 ;
22149: LD_ADDR_VAR 0 3
22153: PUSH
22154: LD_VAR 0 3
22158: PUSH
22159: LD_INT 1
22161: PLUS
22162: ST_TO_ADDR
// for i in tmp do
22163: LD_ADDR_VAR 0 1
22167: PUSH
22168: LD_VAR 0 2
22172: PUSH
22173: FOR_IN
22174: IFFALSE 22205
// if GetLives ( i ) < 1000 then
22176: LD_VAR 0 1
22180: PPUSH
22181: CALL_OW 256
22185: PUSH
22186: LD_INT 1000
22188: LESS
22189: IFFALSE 22203
// SetLives ( i , 1000 ) ;
22191: LD_VAR 0 1
22195: PPUSH
22196: LD_INT 1000
22198: PPUSH
22199: CALL_OW 234
22203: GO 22173
22205: POP
22206: POP
// until p > 20 ;
22207: LD_VAR 0 3
22211: PUSH
22212: LD_INT 20
22214: GREATER
22215: IFFALSE 22142
// end ;
22217: PPOPN 3
22219: END
// every 0 0$1 trigger StreamModeActive and sTime do
22220: LD_EXP 45
22224: PUSH
22225: LD_EXP 96
22229: AND
22230: IFFALSE 22265
22232: GO 22234
22234: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22235: LD_INT 28
22237: PPUSH
22238: LD_OWVAR 2
22242: PPUSH
22243: LD_INT 2
22245: PPUSH
22246: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22250: LD_INT 30
22252: PPUSH
22253: LD_OWVAR 2
22257: PPUSH
22258: LD_INT 2
22260: PPUSH
22261: CALL_OW 322
// end ;
22265: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22266: LD_EXP 45
22270: PUSH
22271: LD_EXP 97
22275: AND
22276: IFFALSE 22397
22278: GO 22280
22280: DISABLE
22281: LD_INT 0
22283: PPUSH
22284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22285: LD_ADDR_VAR 0 2
22289: PUSH
22290: LD_INT 22
22292: PUSH
22293: LD_OWVAR 2
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 21
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 3
22314: PUSH
22315: LD_INT 23
22317: PUSH
22318: LD_INT 0
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 69
22338: ST_TO_ADDR
// if not tmp then
22339: LD_VAR 0 2
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22397
// for i in tmp do
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: LD_VAR 0 2
22357: PUSH
22358: FOR_IN
22359: IFFALSE 22395
// begin if Crawls ( i ) then
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 318
22370: IFFALSE 22381
// ComWalk ( i ) ;
22372: LD_VAR 0 1
22376: PPUSH
22377: CALL_OW 138
// SetClass ( i , 2 ) ;
22381: LD_VAR 0 1
22385: PPUSH
22386: LD_INT 2
22388: PPUSH
22389: CALL_OW 336
// end ;
22393: GO 22358
22395: POP
22396: POP
// end ;
22397: PPOPN 2
22399: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22400: LD_EXP 45
22404: PUSH
22405: LD_EXP 98
22409: AND
22410: IFFALSE 22698
22412: GO 22414
22414: DISABLE
22415: LD_INT 0
22417: PPUSH
22418: PPUSH
22419: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22420: LD_OWVAR 2
22424: PPUSH
22425: LD_INT 9
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: LD_INT 1
22433: PPUSH
22434: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
22438: LD_INT 9
22440: PPUSH
22441: LD_OWVAR 2
22445: PPUSH
22446: CALL_OW 343
// uc_side := 9 ;
22450: LD_ADDR_OWVAR 20
22454: PUSH
22455: LD_INT 9
22457: ST_TO_ADDR
// uc_nation := 2 ;
22458: LD_ADDR_OWVAR 21
22462: PUSH
22463: LD_INT 2
22465: ST_TO_ADDR
// hc_name := Dark Warrior ;
22466: LD_ADDR_OWVAR 26
22470: PUSH
22471: LD_STRING Dark Warrior
22473: ST_TO_ADDR
// hc_gallery :=  ;
22474: LD_ADDR_OWVAR 33
22478: PUSH
22479: LD_STRING 
22481: ST_TO_ADDR
// hc_noskilllimit := true ;
22482: LD_ADDR_OWVAR 76
22486: PUSH
22487: LD_INT 1
22489: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
22490: LD_ADDR_OWVAR 31
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 30
22500: PUSH
22501: LD_INT 30
22503: PUSH
22504: LD_INT 30
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: ST_TO_ADDR
// un := CreateHuman ;
22513: LD_ADDR_VAR 0 3
22517: PUSH
22518: CALL_OW 44
22522: ST_TO_ADDR
// hc_noskilllimit := false ;
22523: LD_ADDR_OWVAR 76
22527: PUSH
22528: LD_INT 0
22530: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22531: LD_VAR 0 3
22535: PPUSH
22536: LD_INT 1
22538: PPUSH
22539: CALL_OW 51
// ToLua ( playRanger() ) ;
22543: LD_STRING playRanger()
22545: PPUSH
22546: CALL_OW 559
// p := 0 ;
22550: LD_ADDR_VAR 0 2
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22558: LD_INT 35
22560: PPUSH
22561: CALL_OW 67
// p := p + 1 ;
22565: LD_ADDR_VAR 0 2
22569: PUSH
22570: LD_VAR 0 2
22574: PUSH
22575: LD_INT 1
22577: PLUS
22578: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
22579: LD_VAR 0 3
22583: PPUSH
22584: CALL_OW 256
22588: PUSH
22589: LD_INT 1000
22591: LESS
22592: IFFALSE 22606
// SetLives ( un , 1000 ) ;
22594: LD_VAR 0 3
22598: PPUSH
22599: LD_INT 1000
22601: PPUSH
22602: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
22606: LD_VAR 0 3
22610: PPUSH
22611: LD_INT 81
22613: PUSH
22614: LD_OWVAR 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 91
22625: PUSH
22626: LD_VAR 0 3
22630: PUSH
22631: LD_INT 30
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PPUSH
22643: CALL_OW 69
22647: PPUSH
22648: LD_VAR 0 3
22652: PPUSH
22653: CALL_OW 74
22657: PPUSH
22658: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
22662: LD_VAR 0 2
22666: PUSH
22667: LD_INT 80
22669: GREATER
22670: PUSH
22671: LD_VAR 0 3
22675: PPUSH
22676: CALL_OW 301
22680: OR
22681: IFFALSE 22558
// if un then
22683: LD_VAR 0 3
22687: IFFALSE 22698
// RemoveUnit ( un ) ;
22689: LD_VAR 0 3
22693: PPUSH
22694: CALL_OW 64
// end ;
22698: PPOPN 3
22700: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
22701: LD_EXP 99
22705: IFFALSE 22821
22707: GO 22709
22709: DISABLE
22710: LD_INT 0
22712: PPUSH
22713: PPUSH
22714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22715: LD_ADDR_VAR 0 2
22719: PUSH
22720: LD_INT 81
22722: PUSH
22723: LD_OWVAR 2
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 21
22734: PUSH
22735: LD_INT 1
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PPUSH
22746: CALL_OW 69
22750: ST_TO_ADDR
// ToLua ( playComputer() ) ;
22751: LD_STRING playComputer()
22753: PPUSH
22754: CALL_OW 559
// if not tmp then
22758: LD_VAR 0 2
22762: NOT
22763: IFFALSE 22767
// exit ;
22765: GO 22821
// for i in tmp do
22767: LD_ADDR_VAR 0 1
22771: PUSH
22772: LD_VAR 0 2
22776: PUSH
22777: FOR_IN
22778: IFFALSE 22819
// for j := 1 to 4 do
22780: LD_ADDR_VAR 0 3
22784: PUSH
22785: DOUBLE
22786: LD_INT 1
22788: DEC
22789: ST_TO_ADDR
22790: LD_INT 4
22792: PUSH
22793: FOR_TO
22794: IFFALSE 22815
// SetSkill ( i , j , 10 ) ;
22796: LD_VAR 0 1
22800: PPUSH
22801: LD_VAR 0 3
22805: PPUSH
22806: LD_INT 10
22808: PPUSH
22809: CALL_OW 237
22813: GO 22793
22815: POP
22816: POP
22817: GO 22777
22819: POP
22820: POP
// end ;
22821: PPOPN 3
22823: END
// every 0 0$1 trigger s30 do var i , tmp ;
22824: LD_EXP 100
22828: IFFALSE 22897
22830: GO 22832
22832: DISABLE
22833: LD_INT 0
22835: PPUSH
22836: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22837: LD_ADDR_VAR 0 2
22841: PUSH
22842: LD_INT 22
22844: PUSH
22845: LD_OWVAR 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PPUSH
22854: CALL_OW 69
22858: ST_TO_ADDR
// if not tmp then
22859: LD_VAR 0 2
22863: NOT
22864: IFFALSE 22868
// exit ;
22866: GO 22897
// for i in tmp do
22868: LD_ADDR_VAR 0 1
22872: PUSH
22873: LD_VAR 0 2
22877: PUSH
22878: FOR_IN
22879: IFFALSE 22895
// SetLives ( i , 300 ) ;
22881: LD_VAR 0 1
22885: PPUSH
22886: LD_INT 300
22888: PPUSH
22889: CALL_OW 234
22893: GO 22878
22895: POP
22896: POP
// end ;
22897: PPOPN 2
22899: END
// every 0 0$1 trigger s60 do var i , tmp ;
22900: LD_EXP 101
22904: IFFALSE 22973
22906: GO 22908
22908: DISABLE
22909: LD_INT 0
22911: PPUSH
22912: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22913: LD_ADDR_VAR 0 2
22917: PUSH
22918: LD_INT 22
22920: PUSH
22921: LD_OWVAR 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PPUSH
22930: CALL_OW 69
22934: ST_TO_ADDR
// if not tmp then
22935: LD_VAR 0 2
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 22973
// for i in tmp do
22944: LD_ADDR_VAR 0 1
22948: PUSH
22949: LD_VAR 0 2
22953: PUSH
22954: FOR_IN
22955: IFFALSE 22971
// SetLives ( i , 600 ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_INT 600
22964: PPUSH
22965: CALL_OW 234
22969: GO 22954
22971: POP
22972: POP
// end ;
22973: PPOPN 2
22975: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
22976: LD_INT 0
22978: PPUSH
// case cmd of 301 :
22979: LD_VAR 0 1
22983: PUSH
22984: LD_INT 301
22986: DOUBLE
22987: EQUAL
22988: IFTRUE 22992
22990: GO 23024
22992: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
22993: LD_VAR 0 6
22997: PPUSH
22998: LD_VAR 0 7
23002: PPUSH
23003: LD_VAR 0 8
23007: PPUSH
23008: LD_VAR 0 4
23012: PPUSH
23013: LD_VAR 0 5
23017: PPUSH
23018: CALL 24233 0 5
23022: GO 23145
23024: LD_INT 302
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23069
23032: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23033: LD_VAR 0 6
23037: PPUSH
23038: LD_VAR 0 7
23042: PPUSH
23043: LD_VAR 0 8
23047: PPUSH
23048: LD_VAR 0 9
23052: PPUSH
23053: LD_VAR 0 4
23057: PPUSH
23058: LD_VAR 0 5
23062: PPUSH
23063: CALL 24324 0 6
23067: GO 23145
23069: LD_INT 303
23071: DOUBLE
23072: EQUAL
23073: IFTRUE 23077
23075: GO 23114
23077: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23078: LD_VAR 0 6
23082: PPUSH
23083: LD_VAR 0 7
23087: PPUSH
23088: LD_VAR 0 8
23092: PPUSH
23093: LD_VAR 0 9
23097: PPUSH
23098: LD_VAR 0 4
23102: PPUSH
23103: LD_VAR 0 5
23107: PPUSH
23108: CALL 23150 0 6
23112: GO 23145
23114: LD_INT 304
23116: DOUBLE
23117: EQUAL
23118: IFTRUE 23122
23120: GO 23144
23122: POP
// hHackTeleport ( unit , x , y ) ; end ;
23123: LD_VAR 0 2
23127: PPUSH
23128: LD_VAR 0 4
23132: PPUSH
23133: LD_VAR 0 5
23137: PPUSH
23138: CALL 24917 0 3
23142: GO 23145
23144: POP
// end ;
23145: LD_VAR 0 12
23149: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23150: LD_INT 0
23152: PPUSH
23153: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23154: LD_VAR 0 1
23158: PUSH
23159: LD_INT 1
23161: LESS
23162: PUSH
23163: LD_VAR 0 1
23167: PUSH
23168: LD_INT 3
23170: GREATER
23171: OR
23172: PUSH
23173: LD_VAR 0 5
23177: PPUSH
23178: LD_VAR 0 6
23182: PPUSH
23183: CALL_OW 428
23187: OR
23188: IFFALSE 23192
// exit ;
23190: GO 23920
// uc_side := your_side ;
23192: LD_ADDR_OWVAR 20
23196: PUSH
23197: LD_OWVAR 2
23201: ST_TO_ADDR
// uc_nation := nation ;
23202: LD_ADDR_OWVAR 21
23206: PUSH
23207: LD_VAR 0 1
23211: ST_TO_ADDR
// bc_level = 1 ;
23212: LD_ADDR_OWVAR 43
23216: PUSH
23217: LD_INT 1
23219: ST_TO_ADDR
// case btype of 1 :
23220: LD_VAR 0 2
23224: PUSH
23225: LD_INT 1
23227: DOUBLE
23228: EQUAL
23229: IFTRUE 23233
23231: GO 23244
23233: POP
// bc_type := b_depot ; 2 :
23234: LD_ADDR_OWVAR 42
23238: PUSH
23239: LD_INT 0
23241: ST_TO_ADDR
23242: GO 23864
23244: LD_INT 2
23246: DOUBLE
23247: EQUAL
23248: IFTRUE 23252
23250: GO 23263
23252: POP
// bc_type := b_warehouse ; 3 :
23253: LD_ADDR_OWVAR 42
23257: PUSH
23258: LD_INT 1
23260: ST_TO_ADDR
23261: GO 23864
23263: LD_INT 3
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23282
23271: POP
// bc_type := b_lab ; 4 .. 9 :
23272: LD_ADDR_OWVAR 42
23276: PUSH
23277: LD_INT 6
23279: ST_TO_ADDR
23280: GO 23864
23282: LD_INT 4
23284: DOUBLE
23285: GREATEREQUAL
23286: IFFALSE 23294
23288: LD_INT 9
23290: DOUBLE
23291: LESSEQUAL
23292: IFTRUE 23296
23294: GO 23356
23296: POP
// begin bc_type := b_lab_half ;
23297: LD_ADDR_OWVAR 42
23301: PUSH
23302: LD_INT 7
23304: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23305: LD_ADDR_OWVAR 44
23309: PUSH
23310: LD_INT 10
23312: PUSH
23313: LD_INT 11
23315: PUSH
23316: LD_INT 12
23318: PUSH
23319: LD_INT 15
23321: PUSH
23322: LD_INT 14
23324: PUSH
23325: LD_INT 13
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: PUSH
23336: LD_VAR 0 2
23340: PUSH
23341: LD_INT 3
23343: MINUS
23344: ARRAY
23345: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
23346: LD_ADDR_OWVAR 45
23350: PUSH
23351: LD_INT 9
23353: ST_TO_ADDR
// end ; 10 .. 13 :
23354: GO 23864
23356: LD_INT 10
23358: DOUBLE
23359: GREATEREQUAL
23360: IFFALSE 23368
23362: LD_INT 13
23364: DOUBLE
23365: LESSEQUAL
23366: IFTRUE 23370
23368: GO 23447
23370: POP
// begin bc_type := b_lab_full ;
23371: LD_ADDR_OWVAR 42
23375: PUSH
23376: LD_INT 8
23378: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23379: LD_ADDR_OWVAR 44
23383: PUSH
23384: LD_INT 10
23386: PUSH
23387: LD_INT 12
23389: PUSH
23390: LD_INT 14
23392: PUSH
23393: LD_INT 13
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: LD_VAR 0 2
23406: PUSH
23407: LD_INT 9
23409: MINUS
23410: ARRAY
23411: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23412: LD_ADDR_OWVAR 45
23416: PUSH
23417: LD_INT 11
23419: PUSH
23420: LD_INT 15
23422: PUSH
23423: LD_INT 12
23425: PUSH
23426: LD_INT 15
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: PUSH
23435: LD_VAR 0 2
23439: PUSH
23440: LD_INT 9
23442: MINUS
23443: ARRAY
23444: ST_TO_ADDR
// end ; 14 :
23445: GO 23864
23447: LD_INT 14
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23466
23455: POP
// bc_type := b_workshop ; 15 :
23456: LD_ADDR_OWVAR 42
23460: PUSH
23461: LD_INT 2
23463: ST_TO_ADDR
23464: GO 23864
23466: LD_INT 15
23468: DOUBLE
23469: EQUAL
23470: IFTRUE 23474
23472: GO 23485
23474: POP
// bc_type := b_factory ; 16 :
23475: LD_ADDR_OWVAR 42
23479: PUSH
23480: LD_INT 3
23482: ST_TO_ADDR
23483: GO 23864
23485: LD_INT 16
23487: DOUBLE
23488: EQUAL
23489: IFTRUE 23493
23491: GO 23504
23493: POP
// bc_type := b_ext_gun ; 17 :
23494: LD_ADDR_OWVAR 42
23498: PUSH
23499: LD_INT 17
23501: ST_TO_ADDR
23502: GO 23864
23504: LD_INT 17
23506: DOUBLE
23507: EQUAL
23508: IFTRUE 23512
23510: GO 23540
23512: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23513: LD_ADDR_OWVAR 42
23517: PUSH
23518: LD_INT 19
23520: PUSH
23521: LD_INT 23
23523: PUSH
23524: LD_INT 19
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: LIST
23531: PUSH
23532: LD_VAR 0 1
23536: ARRAY
23537: ST_TO_ADDR
23538: GO 23864
23540: LD_INT 18
23542: DOUBLE
23543: EQUAL
23544: IFTRUE 23548
23546: GO 23559
23548: POP
// bc_type := b_ext_radar ; 19 :
23549: LD_ADDR_OWVAR 42
23553: PUSH
23554: LD_INT 20
23556: ST_TO_ADDR
23557: GO 23864
23559: LD_INT 19
23561: DOUBLE
23562: EQUAL
23563: IFTRUE 23567
23565: GO 23578
23567: POP
// bc_type := b_ext_radio ; 20 :
23568: LD_ADDR_OWVAR 42
23572: PUSH
23573: LD_INT 22
23575: ST_TO_ADDR
23576: GO 23864
23578: LD_INT 20
23580: DOUBLE
23581: EQUAL
23582: IFTRUE 23586
23584: GO 23597
23586: POP
// bc_type := b_ext_siberium ; 21 :
23587: LD_ADDR_OWVAR 42
23591: PUSH
23592: LD_INT 21
23594: ST_TO_ADDR
23595: GO 23864
23597: LD_INT 21
23599: DOUBLE
23600: EQUAL
23601: IFTRUE 23605
23603: GO 23616
23605: POP
// bc_type := b_ext_computer ; 22 :
23606: LD_ADDR_OWVAR 42
23610: PUSH
23611: LD_INT 24
23613: ST_TO_ADDR
23614: GO 23864
23616: LD_INT 22
23618: DOUBLE
23619: EQUAL
23620: IFTRUE 23624
23622: GO 23635
23624: POP
// bc_type := b_ext_track ; 23 :
23625: LD_ADDR_OWVAR 42
23629: PUSH
23630: LD_INT 16
23632: ST_TO_ADDR
23633: GO 23864
23635: LD_INT 23
23637: DOUBLE
23638: EQUAL
23639: IFTRUE 23643
23641: GO 23654
23643: POP
// bc_type := b_ext_laser ; 24 :
23644: LD_ADDR_OWVAR 42
23648: PUSH
23649: LD_INT 25
23651: ST_TO_ADDR
23652: GO 23864
23654: LD_INT 24
23656: DOUBLE
23657: EQUAL
23658: IFTRUE 23662
23660: GO 23673
23662: POP
// bc_type := b_control_tower ; 25 :
23663: LD_ADDR_OWVAR 42
23667: PUSH
23668: LD_INT 36
23670: ST_TO_ADDR
23671: GO 23864
23673: LD_INT 25
23675: DOUBLE
23676: EQUAL
23677: IFTRUE 23681
23679: GO 23692
23681: POP
// bc_type := b_breastwork ; 26 :
23682: LD_ADDR_OWVAR 42
23686: PUSH
23687: LD_INT 31
23689: ST_TO_ADDR
23690: GO 23864
23692: LD_INT 26
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23711
23700: POP
// bc_type := b_bunker ; 27 :
23701: LD_ADDR_OWVAR 42
23705: PUSH
23706: LD_INT 32
23708: ST_TO_ADDR
23709: GO 23864
23711: LD_INT 27
23713: DOUBLE
23714: EQUAL
23715: IFTRUE 23719
23717: GO 23730
23719: POP
// bc_type := b_turret ; 28 :
23720: LD_ADDR_OWVAR 42
23724: PUSH
23725: LD_INT 33
23727: ST_TO_ADDR
23728: GO 23864
23730: LD_INT 28
23732: DOUBLE
23733: EQUAL
23734: IFTRUE 23738
23736: GO 23749
23738: POP
// bc_type := b_armoury ; 29 :
23739: LD_ADDR_OWVAR 42
23743: PUSH
23744: LD_INT 4
23746: ST_TO_ADDR
23747: GO 23864
23749: LD_INT 29
23751: DOUBLE
23752: EQUAL
23753: IFTRUE 23757
23755: GO 23768
23757: POP
// bc_type := b_barracks ; 30 :
23758: LD_ADDR_OWVAR 42
23762: PUSH
23763: LD_INT 5
23765: ST_TO_ADDR
23766: GO 23864
23768: LD_INT 30
23770: DOUBLE
23771: EQUAL
23772: IFTRUE 23776
23774: GO 23787
23776: POP
// bc_type := b_solar_power ; 31 :
23777: LD_ADDR_OWVAR 42
23781: PUSH
23782: LD_INT 27
23784: ST_TO_ADDR
23785: GO 23864
23787: LD_INT 31
23789: DOUBLE
23790: EQUAL
23791: IFTRUE 23795
23793: GO 23806
23795: POP
// bc_type := b_oil_power ; 32 :
23796: LD_ADDR_OWVAR 42
23800: PUSH
23801: LD_INT 26
23803: ST_TO_ADDR
23804: GO 23864
23806: LD_INT 32
23808: DOUBLE
23809: EQUAL
23810: IFTRUE 23814
23812: GO 23825
23814: POP
// bc_type := b_siberite_power ; 33 :
23815: LD_ADDR_OWVAR 42
23819: PUSH
23820: LD_INT 28
23822: ST_TO_ADDR
23823: GO 23864
23825: LD_INT 33
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23844
23833: POP
// bc_type := b_oil_mine ; 34 :
23834: LD_ADDR_OWVAR 42
23838: PUSH
23839: LD_INT 29
23841: ST_TO_ADDR
23842: GO 23864
23844: LD_INT 34
23846: DOUBLE
23847: EQUAL
23848: IFTRUE 23852
23850: GO 23863
23852: POP
// bc_type := b_siberite_mine ; end ;
23853: LD_ADDR_OWVAR 42
23857: PUSH
23858: LD_INT 30
23860: ST_TO_ADDR
23861: GO 23864
23863: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
23864: LD_ADDR_VAR 0 8
23868: PUSH
23869: LD_VAR 0 5
23873: PPUSH
23874: LD_VAR 0 6
23878: PPUSH
23879: LD_VAR 0 3
23883: PPUSH
23884: CALL_OW 47
23888: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
23889: LD_OWVAR 42
23893: PUSH
23894: LD_INT 32
23896: PUSH
23897: LD_INT 33
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: IN
23904: IFFALSE 23920
// PlaceWeaponTurret ( b , weapon ) ;
23906: LD_VAR 0 8
23910: PPUSH
23911: LD_VAR 0 4
23915: PPUSH
23916: CALL_OW 431
// end ;
23920: LD_VAR 0 7
23924: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23925: LD_INT 0
23927: PPUSH
23928: PPUSH
23929: PPUSH
23930: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23931: LD_ADDR_VAR 0 4
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_OWVAR 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 2
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 30
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: LIST
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PPUSH
23980: CALL_OW 69
23984: ST_TO_ADDR
// if not tmp then
23985: LD_VAR 0 4
23989: NOT
23990: IFFALSE 23994
// exit ;
23992: GO 24053
// for i in tmp do
23994: LD_ADDR_VAR 0 2
23998: PUSH
23999: LD_VAR 0 4
24003: PUSH
24004: FOR_IN
24005: IFFALSE 24051
// for j = 1 to 3 do
24007: LD_ADDR_VAR 0 3
24011: PUSH
24012: DOUBLE
24013: LD_INT 1
24015: DEC
24016: ST_TO_ADDR
24017: LD_INT 3
24019: PUSH
24020: FOR_TO
24021: IFFALSE 24047
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24023: LD_VAR 0 2
24027: PPUSH
24028: CALL_OW 274
24032: PPUSH
24033: LD_VAR 0 3
24037: PPUSH
24038: LD_INT 99999
24040: PPUSH
24041: CALL_OW 277
24045: GO 24020
24047: POP
24048: POP
24049: GO 24004
24051: POP
24052: POP
// end ;
24053: LD_VAR 0 1
24057: RET
// export function hHackSetLevel10 ; var i , j ; begin
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
24062: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24063: LD_ADDR_VAR 0 2
24067: PUSH
24068: LD_INT 21
24070: PUSH
24071: LD_INT 1
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PPUSH
24078: CALL_OW 69
24082: PUSH
24083: FOR_IN
24084: IFFALSE 24136
// if IsSelected ( i ) then
24086: LD_VAR 0 2
24090: PPUSH
24091: CALL_OW 306
24095: IFFALSE 24134
// begin for j := 1 to 4 do
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: DOUBLE
24103: LD_INT 1
24105: DEC
24106: ST_TO_ADDR
24107: LD_INT 4
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24132
// SetSkill ( i , j , 10 ) ;
24113: LD_VAR 0 2
24117: PPUSH
24118: LD_VAR 0 3
24122: PPUSH
24123: LD_INT 10
24125: PPUSH
24126: CALL_OW 237
24130: GO 24110
24132: POP
24133: POP
// end ;
24134: GO 24083
24136: POP
24137: POP
// end ;
24138: LD_VAR 0 1
24142: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24143: LD_INT 0
24145: PPUSH
24146: PPUSH
24147: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24148: LD_ADDR_VAR 0 2
24152: PUSH
24153: LD_INT 22
24155: PUSH
24156: LD_OWVAR 2
24160: PUSH
24161: EMPTY
24162: LIST
24163: LIST
24164: PUSH
24165: LD_INT 21
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: EMPTY
24172: LIST
24173: LIST
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PPUSH
24179: CALL_OW 69
24183: PUSH
24184: FOR_IN
24185: IFFALSE 24226
// begin for j := 1 to 4 do
24187: LD_ADDR_VAR 0 3
24191: PUSH
24192: DOUBLE
24193: LD_INT 1
24195: DEC
24196: ST_TO_ADDR
24197: LD_INT 4
24199: PUSH
24200: FOR_TO
24201: IFFALSE 24222
// SetSkill ( i , j , 10 ) ;
24203: LD_VAR 0 2
24207: PPUSH
24208: LD_VAR 0 3
24212: PPUSH
24213: LD_INT 10
24215: PPUSH
24216: CALL_OW 237
24220: GO 24200
24222: POP
24223: POP
// end ;
24224: GO 24184
24226: POP
24227: POP
// end ;
24228: LD_VAR 0 1
24232: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24233: LD_INT 0
24235: PPUSH
// uc_side := your_side ;
24236: LD_ADDR_OWVAR 20
24240: PUSH
24241: LD_OWVAR 2
24245: ST_TO_ADDR
// uc_nation := nation ;
24246: LD_ADDR_OWVAR 21
24250: PUSH
24251: LD_VAR 0 1
24255: ST_TO_ADDR
// InitHc ;
24256: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24260: LD_INT 0
24262: PPUSH
24263: LD_VAR 0 2
24267: PPUSH
24268: LD_VAR 0 3
24272: PPUSH
24273: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24277: LD_VAR 0 4
24281: PPUSH
24282: LD_VAR 0 5
24286: PPUSH
24287: CALL_OW 428
24291: PUSH
24292: LD_INT 0
24294: EQUAL
24295: IFFALSE 24319
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24297: CALL_OW 44
24301: PPUSH
24302: LD_VAR 0 4
24306: PPUSH
24307: LD_VAR 0 5
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL_OW 48
// end ;
24319: LD_VAR 0 6
24323: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24324: LD_INT 0
24326: PPUSH
24327: PPUSH
// uc_side := your_side ;
24328: LD_ADDR_OWVAR 20
24332: PUSH
24333: LD_OWVAR 2
24337: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24338: LD_VAR 0 1
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 3
24351: PUSH
24352: LD_INT 4
24354: PUSH
24355: LD_INT 5
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: IN
24365: IFFALSE 24377
// uc_nation := nation_american else
24367: LD_ADDR_OWVAR 21
24371: PUSH
24372: LD_INT 1
24374: ST_TO_ADDR
24375: GO 24420
// if chassis in [ 11 , 12 , 13 , 14 ] then
24377: LD_VAR 0 1
24381: PUSH
24382: LD_INT 11
24384: PUSH
24385: LD_INT 12
24387: PUSH
24388: LD_INT 13
24390: PUSH
24391: LD_INT 14
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: IN
24400: IFFALSE 24412
// uc_nation := nation_arabian else
24402: LD_ADDR_OWVAR 21
24406: PUSH
24407: LD_INT 2
24409: ST_TO_ADDR
24410: GO 24420
// uc_nation := nation_russian ;
24412: LD_ADDR_OWVAR 21
24416: PUSH
24417: LD_INT 3
24419: ST_TO_ADDR
// vc_chassis := chassis ;
24420: LD_ADDR_OWVAR 37
24424: PUSH
24425: LD_VAR 0 1
24429: ST_TO_ADDR
// vc_engine := engine ;
24430: LD_ADDR_OWVAR 39
24434: PUSH
24435: LD_VAR 0 2
24439: ST_TO_ADDR
// vc_control := control ;
24440: LD_ADDR_OWVAR 38
24444: PUSH
24445: LD_VAR 0 3
24449: ST_TO_ADDR
// vc_weapon := weapon ;
24450: LD_ADDR_OWVAR 40
24454: PUSH
24455: LD_VAR 0 4
24459: ST_TO_ADDR
// un := CreateVehicle ;
24460: LD_ADDR_VAR 0 8
24464: PUSH
24465: CALL_OW 45
24469: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24470: LD_VAR 0 8
24474: PPUSH
24475: LD_INT 0
24477: PPUSH
24478: LD_INT 5
24480: PPUSH
24481: CALL_OW 12
24485: PPUSH
24486: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24490: LD_VAR 0 8
24494: PPUSH
24495: LD_VAR 0 5
24499: PPUSH
24500: LD_VAR 0 6
24504: PPUSH
24505: LD_INT 1
24507: PPUSH
24508: CALL_OW 48
// end ;
24512: LD_VAR 0 7
24516: RET
// export hInvincible ; every 1 do
24517: GO 24519
24519: DISABLE
// hInvincible := [ ] ;
24520: LD_ADDR_EXP 102
24524: PUSH
24525: EMPTY
24526: ST_TO_ADDR
24527: END
// every 10 do var i ;
24528: GO 24530
24530: DISABLE
24531: LD_INT 0
24533: PPUSH
// begin enable ;
24534: ENABLE
// if not hInvincible then
24535: LD_EXP 102
24539: NOT
24540: IFFALSE 24544
// exit ;
24542: GO 24588
// for i in hInvincible do
24544: LD_ADDR_VAR 0 1
24548: PUSH
24549: LD_EXP 102
24553: PUSH
24554: FOR_IN
24555: IFFALSE 24586
// if GetLives ( i ) < 1000 then
24557: LD_VAR 0 1
24561: PPUSH
24562: CALL_OW 256
24566: PUSH
24567: LD_INT 1000
24569: LESS
24570: IFFALSE 24584
// SetLives ( i , 1000 ) ;
24572: LD_VAR 0 1
24576: PPUSH
24577: LD_INT 1000
24579: PPUSH
24580: CALL_OW 234
24584: GO 24554
24586: POP
24587: POP
// end ;
24588: PPOPN 1
24590: END
// export function hHackInvincible ; var i ; begin
24591: LD_INT 0
24593: PPUSH
24594: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24595: LD_ADDR_VAR 0 2
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 21
24605: PUSH
24606: LD_INT 1
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 21
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: PPUSH
24628: CALL_OW 69
24632: PUSH
24633: FOR_IN
24634: IFFALSE 24695
// if IsSelected ( i ) then
24636: LD_VAR 0 2
24640: PPUSH
24641: CALL_OW 306
24645: IFFALSE 24693
// begin if i in hInvincible then
24647: LD_VAR 0 2
24651: PUSH
24652: LD_EXP 102
24656: IN
24657: IFFALSE 24677
// hInvincible := hInvincible diff i else
24659: LD_ADDR_EXP 102
24663: PUSH
24664: LD_EXP 102
24668: PUSH
24669: LD_VAR 0 2
24673: DIFF
24674: ST_TO_ADDR
24675: GO 24693
// hInvincible := hInvincible union i ;
24677: LD_ADDR_EXP 102
24681: PUSH
24682: LD_EXP 102
24686: PUSH
24687: LD_VAR 0 2
24691: UNION
24692: ST_TO_ADDR
// end ;
24693: GO 24633
24695: POP
24696: POP
// end ;
24697: LD_VAR 0 1
24701: RET
// export function hHackInvisible ; var i , j ; begin
24702: LD_INT 0
24704: PPUSH
24705: PPUSH
24706: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24707: LD_ADDR_VAR 0 2
24711: PUSH
24712: LD_INT 21
24714: PUSH
24715: LD_INT 1
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PPUSH
24722: CALL_OW 69
24726: PUSH
24727: FOR_IN
24728: IFFALSE 24752
// if IsSelected ( i ) then
24730: LD_VAR 0 2
24734: PPUSH
24735: CALL_OW 306
24739: IFFALSE 24750
// ComForceInvisible ( i ) ;
24741: LD_VAR 0 2
24745: PPUSH
24746: CALL_OW 496
24750: GO 24727
24752: POP
24753: POP
// end ;
24754: LD_VAR 0 1
24758: RET
// export function hHackChangeYourSide ; begin
24759: LD_INT 0
24761: PPUSH
// if your_side = 8 then
24762: LD_OWVAR 2
24766: PUSH
24767: LD_INT 8
24769: EQUAL
24770: IFFALSE 24782
// your_side := 0 else
24772: LD_ADDR_OWVAR 2
24776: PUSH
24777: LD_INT 0
24779: ST_TO_ADDR
24780: GO 24796
// your_side := your_side + 1 ;
24782: LD_ADDR_OWVAR 2
24786: PUSH
24787: LD_OWVAR 2
24791: PUSH
24792: LD_INT 1
24794: PLUS
24795: ST_TO_ADDR
// end ;
24796: LD_VAR 0 1
24800: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24801: LD_INT 0
24803: PPUSH
24804: PPUSH
24805: PPUSH
// for i in all_units do
24806: LD_ADDR_VAR 0 2
24810: PUSH
24811: LD_OWVAR 3
24815: PUSH
24816: FOR_IN
24817: IFFALSE 24895
// if IsSelected ( i ) then
24819: LD_VAR 0 2
24823: PPUSH
24824: CALL_OW 306
24828: IFFALSE 24893
// begin j := GetSide ( i ) ;
24830: LD_ADDR_VAR 0 3
24834: PUSH
24835: LD_VAR 0 2
24839: PPUSH
24840: CALL_OW 255
24844: ST_TO_ADDR
// if j = 8 then
24845: LD_VAR 0 3
24849: PUSH
24850: LD_INT 8
24852: EQUAL
24853: IFFALSE 24865
// j := 0 else
24855: LD_ADDR_VAR 0 3
24859: PUSH
24860: LD_INT 0
24862: ST_TO_ADDR
24863: GO 24879
// j := j + 1 ;
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_VAR 0 3
24874: PUSH
24875: LD_INT 1
24877: PLUS
24878: ST_TO_ADDR
// SetSide ( i , j ) ;
24879: LD_VAR 0 2
24883: PPUSH
24884: LD_VAR 0 3
24888: PPUSH
24889: CALL_OW 235
// end ;
24893: GO 24816
24895: POP
24896: POP
// end ;
24897: LD_VAR 0 1
24901: RET
// export function hHackFog ; begin
24902: LD_INT 0
24904: PPUSH
// FogOff ( true ) ;
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 344
// end ;
24912: LD_VAR 0 1
24916: RET
// export function hHackTeleport ( unit , x , y ) ; begin
24917: LD_INT 0
24919: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
24920: LD_VAR 0 1
24924: PPUSH
24925: LD_VAR 0 2
24929: PPUSH
24930: LD_VAR 0 3
24934: PPUSH
24935: LD_INT 1
24937: PPUSH
24938: LD_INT 1
24940: PPUSH
24941: CALL_OW 483
// CenterOnXY ( x , y ) ;
24945: LD_VAR 0 2
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: CALL_OW 84
// end ;
24959: LD_VAR 0 4
24963: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
24964: LD_INT 0
24966: PPUSH
24967: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
24968: LD_VAR 0 1
24972: NOT
24973: PUSH
24974: LD_VAR 0 2
24978: PPUSH
24979: LD_VAR 0 3
24983: PPUSH
24984: CALL_OW 488
24988: NOT
24989: OR
24990: PUSH
24991: LD_VAR 0 1
24995: PPUSH
24996: CALL_OW 266
25000: PUSH
25001: LD_INT 3
25003: NONEQUAL
25004: PUSH
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 247
25014: PUSH
25015: LD_INT 1
25017: EQUAL
25018: NOT
25019: AND
25020: OR
25021: IFFALSE 25025
// exit ;
25023: GO 25174
// if GetType ( factory ) = unit_human then
25025: LD_VAR 0 1
25029: PPUSH
25030: CALL_OW 247
25034: PUSH
25035: LD_INT 1
25037: EQUAL
25038: IFFALSE 25055
// factory := IsInUnit ( factory ) ;
25040: LD_ADDR_VAR 0 1
25044: PUSH
25045: LD_VAR 0 1
25049: PPUSH
25050: CALL_OW 310
25054: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
25055: LD_VAR 0 1
25059: PPUSH
25060: CALL_OW 266
25064: PUSH
25065: LD_INT 3
25067: NONEQUAL
25068: IFFALSE 25072
// exit ;
25070: GO 25174
// if HexInfo ( x , y ) = factory then
25072: LD_VAR 0 2
25076: PPUSH
25077: LD_VAR 0 3
25081: PPUSH
25082: CALL_OW 428
25086: PUSH
25087: LD_VAR 0 1
25091: EQUAL
25092: IFFALSE 25119
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
25094: LD_ADDR_EXP 103
25098: PUSH
25099: LD_EXP 103
25103: PPUSH
25104: LD_VAR 0 1
25108: PPUSH
25109: LD_INT 0
25111: PPUSH
25112: CALL_OW 1
25116: ST_TO_ADDR
25117: GO 25170
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
25119: LD_ADDR_EXP 103
25123: PUSH
25124: LD_EXP 103
25128: PPUSH
25129: LD_VAR 0 1
25133: PPUSH
25134: LD_VAR 0 1
25138: PPUSH
25139: CALL_OW 255
25143: PUSH
25144: LD_VAR 0 1
25148: PUSH
25149: LD_VAR 0 2
25153: PUSH
25154: LD_VAR 0 3
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: PPUSH
25165: CALL_OW 1
25169: ST_TO_ADDR
// UpdateFactoryWaypoints ;
25170: CALL 25179 0 0
// end ;
25174: LD_VAR 0 4
25178: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
25179: LD_INT 0
25181: PPUSH
25182: PPUSH
25183: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
25184: LD_STRING resetFactoryWaypoint();
25186: PPUSH
25187: CALL_OW 559
// if factoryWaypoints then
25191: LD_EXP 103
25195: IFFALSE 25321
// begin list := PrepareArray ( factoryWaypoints ) ;
25197: LD_ADDR_VAR 0 3
25201: PUSH
25202: LD_EXP 103
25206: PPUSH
25207: CALL 72792 0 1
25211: ST_TO_ADDR
// for i := 1 to list do
25212: LD_ADDR_VAR 0 2
25216: PUSH
25217: DOUBLE
25218: LD_INT 1
25220: DEC
25221: ST_TO_ADDR
25222: LD_VAR 0 3
25226: PUSH
25227: FOR_TO
25228: IFFALSE 25319
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25230: LD_STRING setFactoryWaypointXY(
25232: PUSH
25233: LD_VAR 0 3
25237: PUSH
25238: LD_VAR 0 2
25242: ARRAY
25243: PUSH
25244: LD_INT 1
25246: ARRAY
25247: STR
25248: PUSH
25249: LD_STRING ,
25251: STR
25252: PUSH
25253: LD_VAR 0 3
25257: PUSH
25258: LD_VAR 0 2
25262: ARRAY
25263: PUSH
25264: LD_INT 2
25266: ARRAY
25267: STR
25268: PUSH
25269: LD_STRING ,
25271: STR
25272: PUSH
25273: LD_VAR 0 3
25277: PUSH
25278: LD_VAR 0 2
25282: ARRAY
25283: PUSH
25284: LD_INT 3
25286: ARRAY
25287: STR
25288: PUSH
25289: LD_STRING ,
25291: STR
25292: PUSH
25293: LD_VAR 0 3
25297: PUSH
25298: LD_VAR 0 2
25302: ARRAY
25303: PUSH
25304: LD_INT 4
25306: ARRAY
25307: STR
25308: PUSH
25309: LD_STRING )
25311: STR
25312: PPUSH
25313: CALL_OW 559
25317: GO 25227
25319: POP
25320: POP
// end ; end ;
25321: LD_VAR 0 1
25325: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
25326: LD_INT 0
25328: PPUSH
// if HexInfo ( x , y ) = warehouse then
25329: LD_VAR 0 2
25333: PPUSH
25334: LD_VAR 0 3
25338: PPUSH
25339: CALL_OW 428
25343: PUSH
25344: LD_VAR 0 1
25348: EQUAL
25349: IFFALSE 25376
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
25351: LD_ADDR_EXP 104
25355: PUSH
25356: LD_EXP 104
25360: PPUSH
25361: LD_VAR 0 1
25365: PPUSH
25366: LD_INT 0
25368: PPUSH
25369: CALL_OW 1
25373: ST_TO_ADDR
25374: GO 25427
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
25376: LD_ADDR_EXP 104
25380: PUSH
25381: LD_EXP 104
25385: PPUSH
25386: LD_VAR 0 1
25390: PPUSH
25391: LD_VAR 0 1
25395: PPUSH
25396: CALL_OW 255
25400: PUSH
25401: LD_VAR 0 1
25405: PUSH
25406: LD_VAR 0 2
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: PPUSH
25422: CALL_OW 1
25426: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
25427: CALL 25436 0 0
// end ;
25431: LD_VAR 0 4
25435: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
25436: LD_INT 0
25438: PPUSH
25439: PPUSH
25440: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
25441: LD_STRING resetWarehouseGatheringPoints();
25443: PPUSH
25444: CALL_OW 559
// if warehouseGatheringPoints then
25448: LD_EXP 104
25452: IFFALSE 25578
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
25454: LD_ADDR_VAR 0 3
25458: PUSH
25459: LD_EXP 104
25463: PPUSH
25464: CALL 72792 0 1
25468: ST_TO_ADDR
// for i := 1 to list do
25469: LD_ADDR_VAR 0 2
25473: PUSH
25474: DOUBLE
25475: LD_INT 1
25477: DEC
25478: ST_TO_ADDR
25479: LD_VAR 0 3
25483: PUSH
25484: FOR_TO
25485: IFFALSE 25576
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
25487: LD_STRING setWarehouseGatheringPointXY(
25489: PUSH
25490: LD_VAR 0 3
25494: PUSH
25495: LD_VAR 0 2
25499: ARRAY
25500: PUSH
25501: LD_INT 1
25503: ARRAY
25504: STR
25505: PUSH
25506: LD_STRING ,
25508: STR
25509: PUSH
25510: LD_VAR 0 3
25514: PUSH
25515: LD_VAR 0 2
25519: ARRAY
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: STR
25525: PUSH
25526: LD_STRING ,
25528: STR
25529: PUSH
25530: LD_VAR 0 3
25534: PUSH
25535: LD_VAR 0 2
25539: ARRAY
25540: PUSH
25541: LD_INT 3
25543: ARRAY
25544: STR
25545: PUSH
25546: LD_STRING ,
25548: STR
25549: PUSH
25550: LD_VAR 0 3
25554: PUSH
25555: LD_VAR 0 2
25559: ARRAY
25560: PUSH
25561: LD_INT 4
25563: ARRAY
25564: STR
25565: PUSH
25566: LD_STRING )
25568: STR
25569: PPUSH
25570: CALL_OW 559
25574: GO 25484
25576: POP
25577: POP
// end ; end ;
25578: LD_VAR 0 1
25582: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
25583: LD_EXP 104
25587: IFFALSE 26272
25589: GO 25591
25591: DISABLE
25592: LD_INT 0
25594: PPUSH
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
25599: PPUSH
25600: PPUSH
25601: PPUSH
25602: PPUSH
// begin enable ;
25603: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
25604: LD_ADDR_VAR 0 3
25608: PUSH
25609: LD_EXP 104
25613: PPUSH
25614: CALL 72792 0 1
25618: ST_TO_ADDR
// if not list then
25619: LD_VAR 0 3
25623: NOT
25624: IFFALSE 25628
// exit ;
25626: GO 26272
// for i := 1 to list do
25628: LD_ADDR_VAR 0 1
25632: PUSH
25633: DOUBLE
25634: LD_INT 1
25636: DEC
25637: ST_TO_ADDR
25638: LD_VAR 0 3
25642: PUSH
25643: FOR_TO
25644: IFFALSE 26270
// begin depot := list [ i ] [ 2 ] ;
25646: LD_ADDR_VAR 0 8
25650: PUSH
25651: LD_VAR 0 3
25655: PUSH
25656: LD_VAR 0 1
25660: ARRAY
25661: PUSH
25662: LD_INT 2
25664: ARRAY
25665: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
25666: LD_ADDR_VAR 0 5
25670: PUSH
25671: LD_VAR 0 3
25675: PUSH
25676: LD_VAR 0 1
25680: ARRAY
25681: PUSH
25682: LD_INT 1
25684: ARRAY
25685: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
25686: LD_VAR 0 8
25690: PPUSH
25691: CALL_OW 301
25695: PUSH
25696: LD_VAR 0 5
25700: PUSH
25701: LD_VAR 0 8
25705: PPUSH
25706: CALL_OW 255
25710: NONEQUAL
25711: OR
25712: IFFALSE 25741
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
25714: LD_ADDR_EXP 104
25718: PUSH
25719: LD_EXP 104
25723: PPUSH
25724: LD_VAR 0 8
25728: PPUSH
25729: LD_INT 0
25731: PPUSH
25732: CALL_OW 1
25736: ST_TO_ADDR
// exit ;
25737: POP
25738: POP
25739: GO 26272
// end ; x := list [ i ] [ 3 ] ;
25741: LD_ADDR_VAR 0 6
25745: PUSH
25746: LD_VAR 0 3
25750: PUSH
25751: LD_VAR 0 1
25755: ARRAY
25756: PUSH
25757: LD_INT 3
25759: ARRAY
25760: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
25761: LD_ADDR_VAR 0 7
25765: PUSH
25766: LD_VAR 0 3
25770: PUSH
25771: LD_VAR 0 1
25775: ARRAY
25776: PUSH
25777: LD_INT 4
25779: ARRAY
25780: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
25781: LD_ADDR_VAR 0 9
25785: PUSH
25786: LD_VAR 0 6
25790: PPUSH
25791: LD_VAR 0 7
25795: PPUSH
25796: LD_INT 16
25798: PPUSH
25799: CALL 71380 0 3
25803: ST_TO_ADDR
// if not cratesNearbyPoint then
25804: LD_VAR 0 9
25808: NOT
25809: IFFALSE 25815
// exit ;
25811: POP
25812: POP
25813: GO 26272
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
25815: LD_ADDR_VAR 0 4
25819: PUSH
25820: LD_INT 22
25822: PUSH
25823: LD_VAR 0 5
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 60
25837: PUSH
25838: EMPTY
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 91
25847: PUSH
25848: LD_VAR 0 8
25852: PUSH
25853: LD_INT 6
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: LD_INT 25
25866: PUSH
25867: LD_INT 2
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 25
25876: PUSH
25877: LD_INT 16
25879: PUSH
25880: EMPTY
25881: LIST
25882: LIST
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: PPUSH
25895: CALL_OW 69
25899: PUSH
25900: LD_VAR 0 8
25904: PPUSH
25905: CALL_OW 313
25909: PPUSH
25910: LD_INT 3
25912: PUSH
25913: LD_INT 60
25915: PUSH
25916: EMPTY
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: PUSH
25926: LD_INT 25
25928: PUSH
25929: LD_INT 2
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 25
25938: PUSH
25939: LD_INT 16
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: LIST
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PPUSH
25955: CALL_OW 72
25959: UNION
25960: ST_TO_ADDR
// if tmp then
25961: LD_VAR 0 4
25965: IFFALSE 26045
// begin tmp := ShrinkArray ( tmp , 3 ) ;
25967: LD_ADDR_VAR 0 4
25971: PUSH
25972: LD_VAR 0 4
25976: PPUSH
25977: LD_INT 3
25979: PPUSH
25980: CALL 69349 0 2
25984: ST_TO_ADDR
// for j in tmp do
25985: LD_ADDR_VAR 0 2
25989: PUSH
25990: LD_VAR 0 4
25994: PUSH
25995: FOR_IN
25996: IFFALSE 26039
// begin if IsInUnit ( j ) then
25998: LD_VAR 0 2
26002: PPUSH
26003: CALL_OW 310
26007: IFFALSE 26018
// ComExit ( j ) ;
26009: LD_VAR 0 2
26013: PPUSH
26014: CALL 69432 0 1
// AddComCollect ( j , x , y ) ;
26018: LD_VAR 0 2
26022: PPUSH
26023: LD_VAR 0 6
26027: PPUSH
26028: LD_VAR 0 7
26032: PPUSH
26033: CALL_OW 177
// end ;
26037: GO 25995
26039: POP
26040: POP
// exit ;
26041: POP
26042: POP
26043: GO 26272
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
26045: LD_ADDR_VAR 0 4
26049: PUSH
26050: LD_INT 22
26052: PUSH
26053: LD_VAR 0 5
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 91
26064: PUSH
26065: LD_VAR 0 8
26069: PUSH
26070: LD_INT 8
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 2
26080: PUSH
26081: LD_INT 34
26083: PUSH
26084: LD_INT 12
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 34
26093: PUSH
26094: LD_INT 51
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 34
26103: PUSH
26104: LD_INT 32
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 34
26113: PUSH
26114: LD_INT 89
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: LIST
26132: PPUSH
26133: CALL_OW 69
26137: ST_TO_ADDR
// if tmp then
26138: LD_VAR 0 4
26142: IFFALSE 26268
// begin for j in tmp do
26144: LD_ADDR_VAR 0 2
26148: PUSH
26149: LD_VAR 0 4
26153: PUSH
26154: FOR_IN
26155: IFFALSE 26266
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
26157: LD_VAR 0 2
26161: PPUSH
26162: CALL_OW 262
26166: PUSH
26167: LD_INT 3
26169: EQUAL
26170: PUSH
26171: LD_VAR 0 2
26175: PPUSH
26176: CALL_OW 261
26180: PUSH
26181: LD_INT 20
26183: GREATER
26184: OR
26185: PUSH
26186: LD_VAR 0 2
26190: PPUSH
26191: CALL_OW 314
26195: NOT
26196: AND
26197: PUSH
26198: LD_VAR 0 2
26202: PPUSH
26203: CALL_OW 263
26207: PUSH
26208: LD_INT 1
26210: NONEQUAL
26211: PUSH
26212: LD_VAR 0 2
26216: PPUSH
26217: CALL_OW 311
26221: OR
26222: AND
26223: IFFALSE 26264
// begin ComCollect ( j , x , y ) ;
26225: LD_VAR 0 2
26229: PPUSH
26230: LD_VAR 0 6
26234: PPUSH
26235: LD_VAR 0 7
26239: PPUSH
26240: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
26244: LD_VAR 0 2
26248: PPUSH
26249: LD_VAR 0 8
26253: PPUSH
26254: CALL_OW 172
// exit ;
26258: POP
26259: POP
26260: POP
26261: POP
26262: GO 26272
// end ;
26264: GO 26154
26266: POP
26267: POP
// end ; end ;
26268: GO 25643
26270: POP
26271: POP
// end ; end_of_file
26272: PPOPN 9
26274: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
26275: LD_VAR 0 1
26279: PUSH
26280: LD_INT 200
26282: DOUBLE
26283: GREATEREQUAL
26284: IFFALSE 26292
26286: LD_INT 299
26288: DOUBLE
26289: LESSEQUAL
26290: IFTRUE 26294
26292: GO 26326
26294: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_VAR 0 2
26304: PPUSH
26305: LD_VAR 0 3
26309: PPUSH
26310: LD_VAR 0 4
26314: PPUSH
26315: LD_VAR 0 5
26319: PPUSH
26320: CALL 26814 0 5
26324: GO 26403
26326: LD_INT 300
26328: DOUBLE
26329: GREATEREQUAL
26330: IFFALSE 26338
26332: LD_INT 399
26334: DOUBLE
26335: LESSEQUAL
26336: IFTRUE 26340
26338: GO 26402
26340: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
26341: LD_VAR 0 1
26345: PPUSH
26346: LD_VAR 0 2
26350: PPUSH
26351: LD_VAR 0 3
26355: PPUSH
26356: LD_VAR 0 4
26360: PPUSH
26361: LD_VAR 0 5
26365: PPUSH
26366: LD_VAR 0 6
26370: PPUSH
26371: LD_VAR 0 7
26375: PPUSH
26376: LD_VAR 0 8
26380: PPUSH
26381: LD_VAR 0 9
26385: PPUSH
26386: LD_VAR 0 10
26390: PPUSH
26391: LD_VAR 0 11
26395: PPUSH
26396: CALL 22976 0 11
26400: GO 26403
26402: POP
// end ;
26403: PPOPN 11
26405: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
26406: LD_VAR 0 1
26410: PPUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: LD_VAR 0 4
26425: PPUSH
26426: LD_VAR 0 5
26430: PPUSH
26431: CALL 26550 0 5
// end ; end_of_file
26435: PPOPN 5
26437: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26438: LD_INT 0
26440: PPUSH
26441: PPUSH
26442: PPUSH
26443: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 264
26453: PUSH
26454: LD_INT 91
26456: EQUAL
26457: IFFALSE 26529
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26459: LD_INT 68
26461: PPUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 255
26471: PPUSH
26472: CALL_OW 321
26476: PUSH
26477: LD_INT 2
26479: EQUAL
26480: IFFALSE 26492
// eff := 70 else
26482: LD_ADDR_VAR 0 4
26486: PUSH
26487: LD_INT 70
26489: ST_TO_ADDR
26490: GO 26500
// eff := 30 ;
26492: LD_ADDR_VAR 0 4
26496: PUSH
26497: LD_INT 30
26499: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 250
26509: PPUSH
26510: LD_VAR 0 1
26514: PPUSH
26515: CALL_OW 251
26519: PPUSH
26520: LD_VAR 0 4
26524: PPUSH
26525: CALL_OW 495
// end ; end ;
26529: LD_VAR 0 2
26533: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26534: LD_INT 0
26536: PPUSH
// end ;
26537: LD_VAR 0 4
26541: RET
// export function SOS_Command ( cmd ) ; begin
26542: LD_INT 0
26544: PPUSH
// end ;
26545: LD_VAR 0 2
26549: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26550: LD_INT 0
26552: PPUSH
// end ;
26553: LD_VAR 0 6
26557: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26558: LD_INT 0
26560: PPUSH
26561: PPUSH
// if not vehicle or not factory then
26562: LD_VAR 0 1
26566: NOT
26567: PUSH
26568: LD_VAR 0 2
26572: NOT
26573: OR
26574: IFFALSE 26578
// exit ;
26576: GO 26809
// if factoryWaypoints >= factory then
26578: LD_EXP 103
26582: PUSH
26583: LD_VAR 0 2
26587: GREATEREQUAL
26588: IFFALSE 26809
// if factoryWaypoints [ factory ] then
26590: LD_EXP 103
26594: PUSH
26595: LD_VAR 0 2
26599: ARRAY
26600: IFFALSE 26809
// begin if GetControl ( vehicle ) = control_manual then
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 263
26611: PUSH
26612: LD_INT 1
26614: EQUAL
26615: IFFALSE 26696
// begin driver := IsDrivenBy ( vehicle ) ;
26617: LD_ADDR_VAR 0 4
26621: PUSH
26622: LD_VAR 0 1
26626: PPUSH
26627: CALL_OW 311
26631: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26632: LD_VAR 0 4
26636: PPUSH
26637: LD_EXP 103
26641: PUSH
26642: LD_VAR 0 2
26646: ARRAY
26647: PUSH
26648: LD_INT 3
26650: ARRAY
26651: PPUSH
26652: LD_EXP 103
26656: PUSH
26657: LD_VAR 0 2
26661: ARRAY
26662: PUSH
26663: LD_INT 4
26665: ARRAY
26666: PPUSH
26667: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26671: LD_VAR 0 4
26675: PPUSH
26676: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26680: LD_VAR 0 4
26684: PPUSH
26685: LD_VAR 0 2
26689: PPUSH
26690: CALL_OW 180
// end else
26694: GO 26809
// if GetControl ( vehicle ) = control_remote then
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 263
26705: PUSH
26706: LD_INT 2
26708: EQUAL
26709: IFFALSE 26770
// begin wait ( 0 0$2 ) ;
26711: LD_INT 70
26713: PPUSH
26714: CALL_OW 67
// if Connect ( vehicle ) then
26718: LD_VAR 0 1
26722: PPUSH
26723: CALL 39640 0 1
26727: IFFALSE 26768
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26729: LD_VAR 0 1
26733: PPUSH
26734: LD_EXP 103
26738: PUSH
26739: LD_VAR 0 2
26743: ARRAY
26744: PUSH
26745: LD_INT 3
26747: ARRAY
26748: PPUSH
26749: LD_EXP 103
26753: PUSH
26754: LD_VAR 0 2
26758: ARRAY
26759: PUSH
26760: LD_INT 4
26762: ARRAY
26763: PPUSH
26764: CALL_OW 171
// end else
26768: GO 26809
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26770: LD_VAR 0 1
26774: PPUSH
26775: LD_EXP 103
26779: PUSH
26780: LD_VAR 0 2
26784: ARRAY
26785: PUSH
26786: LD_INT 3
26788: ARRAY
26789: PPUSH
26790: LD_EXP 103
26794: PUSH
26795: LD_VAR 0 2
26799: ARRAY
26800: PUSH
26801: LD_INT 4
26803: ARRAY
26804: PPUSH
26805: CALL_OW 171
// end ; end ;
26809: LD_VAR 0 3
26813: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26814: LD_INT 0
26816: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26817: LD_VAR 0 1
26821: PUSH
26822: LD_INT 250
26824: EQUAL
26825: PUSH
26826: LD_VAR 0 2
26830: PPUSH
26831: CALL_OW 264
26835: PUSH
26836: LD_INT 81
26838: EQUAL
26839: AND
26840: IFFALSE 26861
// MinerPlaceMine ( unit , x , y ) ;
26842: LD_VAR 0 2
26846: PPUSH
26847: LD_VAR 0 4
26851: PPUSH
26852: LD_VAR 0 5
26856: PPUSH
26857: CALL 29851 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26861: LD_VAR 0 1
26865: PUSH
26866: LD_INT 251
26868: EQUAL
26869: PUSH
26870: LD_VAR 0 2
26874: PPUSH
26875: CALL_OW 264
26879: PUSH
26880: LD_INT 81
26882: EQUAL
26883: AND
26884: IFFALSE 26905
// MinerDetonateMine ( unit , x , y ) ;
26886: LD_VAR 0 2
26890: PPUSH
26891: LD_VAR 0 4
26895: PPUSH
26896: LD_VAR 0 5
26900: PPUSH
26901: CALL 30126 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26905: LD_VAR 0 1
26909: PUSH
26910: LD_INT 252
26912: EQUAL
26913: PUSH
26914: LD_VAR 0 2
26918: PPUSH
26919: CALL_OW 264
26923: PUSH
26924: LD_INT 81
26926: EQUAL
26927: AND
26928: IFFALSE 26949
// MinerCreateMinefield ( unit , x , y ) ;
26930: LD_VAR 0 2
26934: PPUSH
26935: LD_VAR 0 4
26939: PPUSH
26940: LD_VAR 0 5
26944: PPUSH
26945: CALL 30543 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26949: LD_VAR 0 1
26953: PUSH
26954: LD_INT 253
26956: EQUAL
26957: PUSH
26958: LD_VAR 0 2
26962: PPUSH
26963: CALL_OW 257
26967: PUSH
26968: LD_INT 5
26970: EQUAL
26971: AND
26972: IFFALSE 26993
// ComBinocular ( unit , x , y ) ;
26974: LD_VAR 0 2
26978: PPUSH
26979: LD_VAR 0 4
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: CALL 30912 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26993: LD_VAR 0 1
26997: PUSH
26998: LD_INT 254
27000: EQUAL
27001: PUSH
27002: LD_VAR 0 2
27006: PPUSH
27007: CALL_OW 264
27011: PUSH
27012: LD_INT 99
27014: EQUAL
27015: AND
27016: PUSH
27017: LD_VAR 0 3
27021: PPUSH
27022: CALL_OW 263
27026: PUSH
27027: LD_INT 3
27029: EQUAL
27030: AND
27031: IFFALSE 27047
// HackDestroyVehicle ( unit , selectedUnit ) ;
27033: LD_VAR 0 2
27037: PPUSH
27038: LD_VAR 0 3
27042: PPUSH
27043: CALL 29215 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27047: LD_VAR 0 1
27051: PUSH
27052: LD_INT 255
27054: EQUAL
27055: PUSH
27056: LD_VAR 0 2
27060: PPUSH
27061: CALL_OW 264
27065: PUSH
27066: LD_INT 14
27068: PUSH
27069: LD_INT 53
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: IN
27076: AND
27077: PUSH
27078: LD_VAR 0 4
27082: PPUSH
27083: LD_VAR 0 5
27087: PPUSH
27088: CALL_OW 488
27092: AND
27093: IFFALSE 27117
// CutTreeXYR ( unit , x , y , 12 ) ;
27095: LD_VAR 0 2
27099: PPUSH
27100: LD_VAR 0 4
27104: PPUSH
27105: LD_VAR 0 5
27109: PPUSH
27110: LD_INT 12
27112: PPUSH
27113: CALL 27212 0 4
// if cmd = 256 then
27117: LD_VAR 0 1
27121: PUSH
27122: LD_INT 256
27124: EQUAL
27125: IFFALSE 27146
// SetFactoryWaypoint ( unit , x , y ) ;
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 4
27136: PPUSH
27137: LD_VAR 0 5
27141: PPUSH
27142: CALL 24964 0 3
// if cmd = 257 then
27146: LD_VAR 0 1
27150: PUSH
27151: LD_INT 257
27153: EQUAL
27154: IFFALSE 27175
// SetWarehouseGatheringPoint ( unit , x , y ) ;
27156: LD_VAR 0 2
27160: PPUSH
27161: LD_VAR 0 4
27165: PPUSH
27166: LD_VAR 0 5
27170: PPUSH
27171: CALL 25326 0 3
// if cmd = 258 then
27175: LD_VAR 0 1
27179: PUSH
27180: LD_INT 258
27182: EQUAL
27183: IFFALSE 27207
// BurnTreeXYR ( unit , x , y , 8 ) ;
27185: LD_VAR 0 2
27189: PPUSH
27190: LD_VAR 0 4
27194: PPUSH
27195: LD_VAR 0 5
27199: PPUSH
27200: LD_INT 8
27202: PPUSH
27203: CALL 27606 0 4
// end ;
27207: LD_VAR 0 6
27211: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
27221: PPUSH
27222: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
27223: LD_VAR 0 1
27227: PPUSH
27228: CALL_OW 302
27232: NOT
27233: PUSH
27234: LD_VAR 0 2
27238: PPUSH
27239: LD_VAR 0 3
27243: PPUSH
27244: CALL_OW 488
27248: NOT
27249: OR
27250: PUSH
27251: LD_VAR 0 4
27255: NOT
27256: OR
27257: IFFALSE 27261
// exit ;
27259: GO 27601
// list := [ ] ;
27261: LD_ADDR_VAR 0 13
27265: PUSH
27266: EMPTY
27267: ST_TO_ADDR
// if x - r < 0 then
27268: LD_VAR 0 2
27272: PUSH
27273: LD_VAR 0 4
27277: MINUS
27278: PUSH
27279: LD_INT 0
27281: LESS
27282: IFFALSE 27294
// min_x := 0 else
27284: LD_ADDR_VAR 0 7
27288: PUSH
27289: LD_INT 0
27291: ST_TO_ADDR
27292: GO 27310
// min_x := x - r ;
27294: LD_ADDR_VAR 0 7
27298: PUSH
27299: LD_VAR 0 2
27303: PUSH
27304: LD_VAR 0 4
27308: MINUS
27309: ST_TO_ADDR
// if y - r < 0 then
27310: LD_VAR 0 3
27314: PUSH
27315: LD_VAR 0 4
27319: MINUS
27320: PUSH
27321: LD_INT 0
27323: LESS
27324: IFFALSE 27336
// min_y := 0 else
27326: LD_ADDR_VAR 0 8
27330: PUSH
27331: LD_INT 0
27333: ST_TO_ADDR
27334: GO 27352
// min_y := y - r ;
27336: LD_ADDR_VAR 0 8
27340: PUSH
27341: LD_VAR 0 3
27345: PUSH
27346: LD_VAR 0 4
27350: MINUS
27351: ST_TO_ADDR
// max_x := x + r ;
27352: LD_ADDR_VAR 0 9
27356: PUSH
27357: LD_VAR 0 2
27361: PUSH
27362: LD_VAR 0 4
27366: PLUS
27367: ST_TO_ADDR
// max_y := y + r ;
27368: LD_ADDR_VAR 0 10
27372: PUSH
27373: LD_VAR 0 3
27377: PUSH
27378: LD_VAR 0 4
27382: PLUS
27383: ST_TO_ADDR
// for _x = min_x to max_x do
27384: LD_ADDR_VAR 0 11
27388: PUSH
27389: DOUBLE
27390: LD_VAR 0 7
27394: DEC
27395: ST_TO_ADDR
27396: LD_VAR 0 9
27400: PUSH
27401: FOR_TO
27402: IFFALSE 27519
// for _y = min_y to max_y do
27404: LD_ADDR_VAR 0 12
27408: PUSH
27409: DOUBLE
27410: LD_VAR 0 8
27414: DEC
27415: ST_TO_ADDR
27416: LD_VAR 0 10
27420: PUSH
27421: FOR_TO
27422: IFFALSE 27515
// begin if not ValidHex ( _x , _y ) then
27424: LD_VAR 0 11
27428: PPUSH
27429: LD_VAR 0 12
27433: PPUSH
27434: CALL_OW 488
27438: NOT
27439: IFFALSE 27443
// continue ;
27441: GO 27421
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27443: LD_VAR 0 11
27447: PPUSH
27448: LD_VAR 0 12
27452: PPUSH
27453: CALL_OW 351
27457: PUSH
27458: LD_VAR 0 11
27462: PPUSH
27463: LD_VAR 0 12
27467: PPUSH
27468: CALL_OW 554
27472: AND
27473: IFFALSE 27513
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27475: LD_ADDR_VAR 0 13
27479: PUSH
27480: LD_VAR 0 13
27484: PPUSH
27485: LD_VAR 0 13
27489: PUSH
27490: LD_INT 1
27492: PLUS
27493: PPUSH
27494: LD_VAR 0 11
27498: PUSH
27499: LD_VAR 0 12
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PPUSH
27508: CALL_OW 2
27512: ST_TO_ADDR
// end ;
27513: GO 27421
27515: POP
27516: POP
27517: GO 27401
27519: POP
27520: POP
// if not list then
27521: LD_VAR 0 13
27525: NOT
27526: IFFALSE 27530
// exit ;
27528: GO 27601
// for i in list do
27530: LD_ADDR_VAR 0 6
27534: PUSH
27535: LD_VAR 0 13
27539: PUSH
27540: FOR_IN
27541: IFFALSE 27599
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27543: LD_VAR 0 1
27547: PPUSH
27548: LD_STRING M
27550: PUSH
27551: LD_VAR 0 6
27555: PUSH
27556: LD_INT 1
27558: ARRAY
27559: PUSH
27560: LD_VAR 0 6
27564: PUSH
27565: LD_INT 2
27567: ARRAY
27568: PUSH
27569: LD_INT 0
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: LD_INT 0
27577: PUSH
27578: LD_INT 0
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: PUSH
27590: EMPTY
27591: LIST
27592: PPUSH
27593: CALL_OW 447
27597: GO 27540
27599: POP
27600: POP
// end ;
27601: LD_VAR 0 5
27605: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
27606: LD_INT 0
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
27616: PPUSH
27617: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
27618: LD_VAR 0 1
27622: PPUSH
27623: CALL_OW 302
27627: NOT
27628: PUSH
27629: LD_VAR 0 2
27633: PPUSH
27634: LD_VAR 0 3
27638: PPUSH
27639: CALL_OW 488
27643: NOT
27644: OR
27645: PUSH
27646: LD_VAR 0 4
27650: NOT
27651: OR
27652: IFFALSE 27656
// exit ;
27654: GO 28169
// list := [ ] ;
27656: LD_ADDR_VAR 0 13
27660: PUSH
27661: EMPTY
27662: ST_TO_ADDR
// if x - r < 0 then
27663: LD_VAR 0 2
27667: PUSH
27668: LD_VAR 0 4
27672: MINUS
27673: PUSH
27674: LD_INT 0
27676: LESS
27677: IFFALSE 27689
// min_x := 0 else
27679: LD_ADDR_VAR 0 7
27683: PUSH
27684: LD_INT 0
27686: ST_TO_ADDR
27687: GO 27705
// min_x := x - r ;
27689: LD_ADDR_VAR 0 7
27693: PUSH
27694: LD_VAR 0 2
27698: PUSH
27699: LD_VAR 0 4
27703: MINUS
27704: ST_TO_ADDR
// if y - r < 0 then
27705: LD_VAR 0 3
27709: PUSH
27710: LD_VAR 0 4
27714: MINUS
27715: PUSH
27716: LD_INT 0
27718: LESS
27719: IFFALSE 27731
// min_y := 0 else
27721: LD_ADDR_VAR 0 8
27725: PUSH
27726: LD_INT 0
27728: ST_TO_ADDR
27729: GO 27747
// min_y := y - r ;
27731: LD_ADDR_VAR 0 8
27735: PUSH
27736: LD_VAR 0 3
27740: PUSH
27741: LD_VAR 0 4
27745: MINUS
27746: ST_TO_ADDR
// max_x := x + r ;
27747: LD_ADDR_VAR 0 9
27751: PUSH
27752: LD_VAR 0 2
27756: PUSH
27757: LD_VAR 0 4
27761: PLUS
27762: ST_TO_ADDR
// max_y := y + r ;
27763: LD_ADDR_VAR 0 10
27767: PUSH
27768: LD_VAR 0 3
27772: PUSH
27773: LD_VAR 0 4
27777: PLUS
27778: ST_TO_ADDR
// for _x = min_x to max_x do
27779: LD_ADDR_VAR 0 11
27783: PUSH
27784: DOUBLE
27785: LD_VAR 0 7
27789: DEC
27790: ST_TO_ADDR
27791: LD_VAR 0 9
27795: PUSH
27796: FOR_TO
27797: IFFALSE 27914
// for _y = min_y to max_y do
27799: LD_ADDR_VAR 0 12
27803: PUSH
27804: DOUBLE
27805: LD_VAR 0 8
27809: DEC
27810: ST_TO_ADDR
27811: LD_VAR 0 10
27815: PUSH
27816: FOR_TO
27817: IFFALSE 27910
// begin if not ValidHex ( _x , _y ) then
27819: LD_VAR 0 11
27823: PPUSH
27824: LD_VAR 0 12
27828: PPUSH
27829: CALL_OW 488
27833: NOT
27834: IFFALSE 27838
// continue ;
27836: GO 27816
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27838: LD_VAR 0 11
27842: PPUSH
27843: LD_VAR 0 12
27847: PPUSH
27848: CALL_OW 351
27852: PUSH
27853: LD_VAR 0 11
27857: PPUSH
27858: LD_VAR 0 12
27862: PPUSH
27863: CALL_OW 554
27867: AND
27868: IFFALSE 27908
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27870: LD_ADDR_VAR 0 13
27874: PUSH
27875: LD_VAR 0 13
27879: PPUSH
27880: LD_VAR 0 13
27884: PUSH
27885: LD_INT 1
27887: PLUS
27888: PPUSH
27889: LD_VAR 0 11
27893: PUSH
27894: LD_VAR 0 12
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PPUSH
27903: CALL_OW 2
27907: ST_TO_ADDR
// end ;
27908: GO 27816
27910: POP
27911: POP
27912: GO 27796
27914: POP
27915: POP
// if not list then
27916: LD_VAR 0 13
27920: NOT
27921: IFFALSE 27925
// exit ;
27923: GO 28169
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
27925: LD_ADDR_VAR 0 13
27929: PUSH
27930: LD_VAR 0 1
27934: PPUSH
27935: LD_VAR 0 13
27939: PPUSH
27940: LD_INT 1
27942: PPUSH
27943: LD_INT 1
27945: PPUSH
27946: CALL 36782 0 4
27950: ST_TO_ADDR
// ComStop ( flame ) ;
27951: LD_VAR 0 1
27955: PPUSH
27956: CALL_OW 141
// for i in list do
27960: LD_ADDR_VAR 0 6
27964: PUSH
27965: LD_VAR 0 13
27969: PUSH
27970: FOR_IN
27971: IFFALSE 28002
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
27973: LD_VAR 0 1
27977: PPUSH
27978: LD_VAR 0 6
27982: PUSH
27983: LD_INT 1
27985: ARRAY
27986: PPUSH
27987: LD_VAR 0 6
27991: PUSH
27992: LD_INT 2
27994: ARRAY
27995: PPUSH
27996: CALL_OW 176
28000: GO 27970
28002: POP
28003: POP
// repeat wait ( 0 0$1 ) ;
28004: LD_INT 35
28006: PPUSH
28007: CALL_OW 67
// task := GetTaskList ( flame ) ;
28011: LD_ADDR_VAR 0 14
28015: PUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 437
28025: ST_TO_ADDR
// if not task then
28026: LD_VAR 0 14
28030: NOT
28031: IFFALSE 28035
// exit ;
28033: GO 28169
// if task [ 1 ] [ 1 ] <> | then
28035: LD_VAR 0 14
28039: PUSH
28040: LD_INT 1
28042: ARRAY
28043: PUSH
28044: LD_INT 1
28046: ARRAY
28047: PUSH
28048: LD_STRING |
28050: NONEQUAL
28051: IFFALSE 28055
// exit ;
28053: GO 28169
// _x := task [ 1 ] [ 2 ] ;
28055: LD_ADDR_VAR 0 11
28059: PUSH
28060: LD_VAR 0 14
28064: PUSH
28065: LD_INT 1
28067: ARRAY
28068: PUSH
28069: LD_INT 2
28071: ARRAY
28072: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
28073: LD_ADDR_VAR 0 12
28077: PUSH
28078: LD_VAR 0 14
28082: PUSH
28083: LD_INT 1
28085: ARRAY
28086: PUSH
28087: LD_INT 3
28089: ARRAY
28090: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
28091: LD_VAR 0 11
28095: PPUSH
28096: LD_VAR 0 12
28100: PPUSH
28101: CALL_OW 351
28105: NOT
28106: PUSH
28107: LD_VAR 0 11
28111: PPUSH
28112: LD_VAR 0 12
28116: PPUSH
28117: CALL_OW 554
28121: NOT
28122: OR
28123: IFFALSE 28157
// begin task := Delete ( task , 1 ) ;
28125: LD_ADDR_VAR 0 14
28129: PUSH
28130: LD_VAR 0 14
28134: PPUSH
28135: LD_INT 1
28137: PPUSH
28138: CALL_OW 3
28142: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
28143: LD_VAR 0 1
28147: PPUSH
28148: LD_VAR 0 14
28152: PPUSH
28153: CALL_OW 446
// end ; until not HasTask ( flame ) ;
28157: LD_VAR 0 1
28161: PPUSH
28162: CALL_OW 314
28166: NOT
28167: IFFALSE 28004
// end ;
28169: LD_VAR 0 5
28173: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28174: LD_EXP 106
28178: NOT
28179: IFFALSE 28229
28181: GO 28183
28183: DISABLE
// begin initHack := true ;
28184: LD_ADDR_EXP 106
28188: PUSH
28189: LD_INT 1
28191: ST_TO_ADDR
// hackTanks := [ ] ;
28192: LD_ADDR_EXP 107
28196: PUSH
28197: EMPTY
28198: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28199: LD_ADDR_EXP 108
28203: PUSH
28204: EMPTY
28205: ST_TO_ADDR
// hackLimit := 3 ;
28206: LD_ADDR_EXP 109
28210: PUSH
28211: LD_INT 3
28213: ST_TO_ADDR
// hackDist := 12 ;
28214: LD_ADDR_EXP 110
28218: PUSH
28219: LD_INT 12
28221: ST_TO_ADDR
// hackCounter := [ ] ;
28222: LD_ADDR_EXP 111
28226: PUSH
28227: EMPTY
28228: ST_TO_ADDR
// end ;
28229: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28230: LD_EXP 106
28234: PUSH
28235: LD_INT 34
28237: PUSH
28238: LD_INT 99
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PPUSH
28245: CALL_OW 69
28249: AND
28250: IFFALSE 28503
28252: GO 28254
28254: DISABLE
28255: LD_INT 0
28257: PPUSH
28258: PPUSH
// begin enable ;
28259: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28260: LD_ADDR_VAR 0 1
28264: PUSH
28265: LD_INT 34
28267: PUSH
28268: LD_INT 99
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PPUSH
28275: CALL_OW 69
28279: PUSH
28280: FOR_IN
28281: IFFALSE 28501
// begin if not i in hackTanks then
28283: LD_VAR 0 1
28287: PUSH
28288: LD_EXP 107
28292: IN
28293: NOT
28294: IFFALSE 28377
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28296: LD_ADDR_EXP 107
28300: PUSH
28301: LD_EXP 107
28305: PPUSH
28306: LD_EXP 107
28310: PUSH
28311: LD_INT 1
28313: PLUS
28314: PPUSH
28315: LD_VAR 0 1
28319: PPUSH
28320: CALL_OW 1
28324: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28325: LD_ADDR_EXP 108
28329: PUSH
28330: LD_EXP 108
28334: PPUSH
28335: LD_EXP 108
28339: PUSH
28340: LD_INT 1
28342: PLUS
28343: PPUSH
28344: EMPTY
28345: PPUSH
28346: CALL_OW 1
28350: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28351: LD_ADDR_EXP 111
28355: PUSH
28356: LD_EXP 111
28360: PPUSH
28361: LD_EXP 111
28365: PUSH
28366: LD_INT 1
28368: PLUS
28369: PPUSH
28370: EMPTY
28371: PPUSH
28372: CALL_OW 1
28376: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28377: LD_VAR 0 1
28381: PPUSH
28382: CALL_OW 302
28386: NOT
28387: IFFALSE 28400
// begin HackUnlinkAll ( i ) ;
28389: LD_VAR 0 1
28393: PPUSH
28394: CALL 28506 0 1
// continue ;
28398: GO 28280
// end ; HackCheckCapturedStatus ( i ) ;
28400: LD_VAR 0 1
28404: PPUSH
28405: CALL 28949 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28409: LD_ADDR_VAR 0 2
28413: PUSH
28414: LD_INT 81
28416: PUSH
28417: LD_VAR 0 1
28421: PPUSH
28422: CALL_OW 255
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 33
28433: PUSH
28434: LD_INT 3
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 91
28443: PUSH
28444: LD_VAR 0 1
28448: PUSH
28449: LD_EXP 110
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 50
28461: PUSH
28462: EMPTY
28463: LIST
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: PPUSH
28471: CALL_OW 69
28475: ST_TO_ADDR
// if not tmp then
28476: LD_VAR 0 2
28480: NOT
28481: IFFALSE 28485
// continue ;
28483: GO 28280
// HackLink ( i , tmp ) ;
28485: LD_VAR 0 1
28489: PPUSH
28490: LD_VAR 0 2
28494: PPUSH
28495: CALL 28642 0 2
// end ;
28499: GO 28280
28501: POP
28502: POP
// end ;
28503: PPOPN 2
28505: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28506: LD_INT 0
28508: PPUSH
28509: PPUSH
28510: PPUSH
// if not hack in hackTanks then
28511: LD_VAR 0 1
28515: PUSH
28516: LD_EXP 107
28520: IN
28521: NOT
28522: IFFALSE 28526
// exit ;
28524: GO 28637
// index := GetElementIndex ( hackTanks , hack ) ;
28526: LD_ADDR_VAR 0 4
28530: PUSH
28531: LD_EXP 107
28535: PPUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL 36079 0 2
28545: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28546: LD_EXP 108
28550: PUSH
28551: LD_VAR 0 4
28555: ARRAY
28556: IFFALSE 28637
// begin for i in hackTanksCaptured [ index ] do
28558: LD_ADDR_VAR 0 3
28562: PUSH
28563: LD_EXP 108
28567: PUSH
28568: LD_VAR 0 4
28572: ARRAY
28573: PUSH
28574: FOR_IN
28575: IFFALSE 28601
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28577: LD_VAR 0 3
28581: PUSH
28582: LD_INT 1
28584: ARRAY
28585: PPUSH
28586: LD_VAR 0 3
28590: PUSH
28591: LD_INT 2
28593: ARRAY
28594: PPUSH
28595: CALL_OW 235
28599: GO 28574
28601: POP
28602: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28603: LD_ADDR_EXP 108
28607: PUSH
28608: LD_EXP 108
28612: PPUSH
28613: LD_VAR 0 4
28617: PPUSH
28618: EMPTY
28619: PPUSH
28620: CALL_OW 1
28624: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28625: LD_VAR 0 1
28629: PPUSH
28630: LD_INT 0
28632: PPUSH
28633: CALL_OW 505
// end ; end ;
28637: LD_VAR 0 2
28641: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28642: LD_INT 0
28644: PPUSH
28645: PPUSH
28646: PPUSH
// if not hack in hackTanks or not vehicles then
28647: LD_VAR 0 1
28651: PUSH
28652: LD_EXP 107
28656: IN
28657: NOT
28658: PUSH
28659: LD_VAR 0 2
28663: NOT
28664: OR
28665: IFFALSE 28669
// exit ;
28667: GO 28944
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28669: LD_ADDR_VAR 0 2
28673: PUSH
28674: LD_VAR 0 1
28678: PPUSH
28679: LD_VAR 0 2
28683: PPUSH
28684: LD_INT 1
28686: PPUSH
28687: LD_INT 1
28689: PPUSH
28690: CALL 36729 0 4
28694: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28695: LD_ADDR_VAR 0 5
28699: PUSH
28700: LD_EXP 107
28704: PPUSH
28705: LD_VAR 0 1
28709: PPUSH
28710: CALL 36079 0 2
28714: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28715: LD_EXP 108
28719: PUSH
28720: LD_VAR 0 5
28724: ARRAY
28725: PUSH
28726: LD_EXP 109
28730: LESS
28731: IFFALSE 28920
// begin for i := 1 to vehicles do
28733: LD_ADDR_VAR 0 4
28737: PUSH
28738: DOUBLE
28739: LD_INT 1
28741: DEC
28742: ST_TO_ADDR
28743: LD_VAR 0 2
28747: PUSH
28748: FOR_TO
28749: IFFALSE 28918
// begin if hackTanksCaptured [ index ] = hackLimit then
28751: LD_EXP 108
28755: PUSH
28756: LD_VAR 0 5
28760: ARRAY
28761: PUSH
28762: LD_EXP 109
28766: EQUAL
28767: IFFALSE 28771
// break ;
28769: GO 28918
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28771: LD_ADDR_EXP 111
28775: PUSH
28776: LD_EXP 111
28780: PPUSH
28781: LD_VAR 0 5
28785: PPUSH
28786: LD_EXP 111
28790: PUSH
28791: LD_VAR 0 5
28795: ARRAY
28796: PUSH
28797: LD_INT 1
28799: PLUS
28800: PPUSH
28801: CALL_OW 1
28805: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28806: LD_ADDR_EXP 108
28810: PUSH
28811: LD_EXP 108
28815: PPUSH
28816: LD_VAR 0 5
28820: PUSH
28821: LD_EXP 108
28825: PUSH
28826: LD_VAR 0 5
28830: ARRAY
28831: PUSH
28832: LD_INT 1
28834: PLUS
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PPUSH
28840: LD_VAR 0 2
28844: PUSH
28845: LD_VAR 0 4
28849: ARRAY
28850: PUSH
28851: LD_VAR 0 2
28855: PUSH
28856: LD_VAR 0 4
28860: ARRAY
28861: PPUSH
28862: CALL_OW 255
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: PPUSH
28871: CALL 36294 0 3
28875: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28876: LD_VAR 0 2
28880: PUSH
28881: LD_VAR 0 4
28885: ARRAY
28886: PPUSH
28887: LD_VAR 0 1
28891: PPUSH
28892: CALL_OW 255
28896: PPUSH
28897: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28901: LD_VAR 0 2
28905: PUSH
28906: LD_VAR 0 4
28910: ARRAY
28911: PPUSH
28912: CALL_OW 141
// end ;
28916: GO 28748
28918: POP
28919: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28920: LD_VAR 0 1
28924: PPUSH
28925: LD_EXP 108
28929: PUSH
28930: LD_VAR 0 5
28934: ARRAY
28935: PUSH
28936: LD_INT 0
28938: PLUS
28939: PPUSH
28940: CALL_OW 505
// end ;
28944: LD_VAR 0 3
28948: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28949: LD_INT 0
28951: PPUSH
28952: PPUSH
28953: PPUSH
28954: PPUSH
// if not hack in hackTanks then
28955: LD_VAR 0 1
28959: PUSH
28960: LD_EXP 107
28964: IN
28965: NOT
28966: IFFALSE 28970
// exit ;
28968: GO 29210
// index := GetElementIndex ( hackTanks , hack ) ;
28970: LD_ADDR_VAR 0 4
28974: PUSH
28975: LD_EXP 107
28979: PPUSH
28980: LD_VAR 0 1
28984: PPUSH
28985: CALL 36079 0 2
28989: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28990: LD_ADDR_VAR 0 3
28994: PUSH
28995: DOUBLE
28996: LD_EXP 108
29000: PUSH
29001: LD_VAR 0 4
29005: ARRAY
29006: INC
29007: ST_TO_ADDR
29008: LD_INT 1
29010: PUSH
29011: FOR_DOWNTO
29012: IFFALSE 29184
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29014: LD_ADDR_VAR 0 5
29018: PUSH
29019: LD_EXP 108
29023: PUSH
29024: LD_VAR 0 4
29028: ARRAY
29029: PUSH
29030: LD_VAR 0 3
29034: ARRAY
29035: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29036: LD_VAR 0 5
29040: PUSH
29041: LD_INT 1
29043: ARRAY
29044: PPUSH
29045: CALL_OW 302
29049: NOT
29050: PUSH
29051: LD_VAR 0 5
29055: PUSH
29056: LD_INT 1
29058: ARRAY
29059: PPUSH
29060: CALL_OW 255
29064: PUSH
29065: LD_VAR 0 1
29069: PPUSH
29070: CALL_OW 255
29074: NONEQUAL
29075: OR
29076: IFFALSE 29182
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29078: LD_VAR 0 5
29082: PUSH
29083: LD_INT 1
29085: ARRAY
29086: PPUSH
29087: CALL_OW 305
29091: PUSH
29092: LD_VAR 0 5
29096: PUSH
29097: LD_INT 1
29099: ARRAY
29100: PPUSH
29101: CALL_OW 255
29105: PUSH
29106: LD_VAR 0 1
29110: PPUSH
29111: CALL_OW 255
29115: EQUAL
29116: AND
29117: IFFALSE 29141
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29119: LD_VAR 0 5
29123: PUSH
29124: LD_INT 1
29126: ARRAY
29127: PPUSH
29128: LD_VAR 0 5
29132: PUSH
29133: LD_INT 2
29135: ARRAY
29136: PPUSH
29137: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29141: LD_ADDR_EXP 108
29145: PUSH
29146: LD_EXP 108
29150: PPUSH
29151: LD_VAR 0 4
29155: PPUSH
29156: LD_EXP 108
29160: PUSH
29161: LD_VAR 0 4
29165: ARRAY
29166: PPUSH
29167: LD_VAR 0 3
29171: PPUSH
29172: CALL_OW 3
29176: PPUSH
29177: CALL_OW 1
29181: ST_TO_ADDR
// end ; end ;
29182: GO 29011
29184: POP
29185: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29186: LD_VAR 0 1
29190: PPUSH
29191: LD_EXP 108
29195: PUSH
29196: LD_VAR 0 4
29200: ARRAY
29201: PUSH
29202: LD_INT 0
29204: PLUS
29205: PPUSH
29206: CALL_OW 505
// end ;
29210: LD_VAR 0 2
29214: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29215: LD_INT 0
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
// if not hack in hackTanks then
29221: LD_VAR 0 1
29225: PUSH
29226: LD_EXP 107
29230: IN
29231: NOT
29232: IFFALSE 29236
// exit ;
29234: GO 29321
// index := GetElementIndex ( hackTanks , hack ) ;
29236: LD_ADDR_VAR 0 5
29240: PUSH
29241: LD_EXP 107
29245: PPUSH
29246: LD_VAR 0 1
29250: PPUSH
29251: CALL 36079 0 2
29255: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29256: LD_ADDR_VAR 0 4
29260: PUSH
29261: DOUBLE
29262: LD_INT 1
29264: DEC
29265: ST_TO_ADDR
29266: LD_EXP 108
29270: PUSH
29271: LD_VAR 0 5
29275: ARRAY
29276: PUSH
29277: FOR_TO
29278: IFFALSE 29319
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29280: LD_EXP 108
29284: PUSH
29285: LD_VAR 0 5
29289: ARRAY
29290: PUSH
29291: LD_VAR 0 4
29295: ARRAY
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: PUSH
29301: LD_VAR 0 2
29305: EQUAL
29306: IFFALSE 29317
// KillUnit ( vehicle ) ;
29308: LD_VAR 0 2
29312: PPUSH
29313: CALL_OW 66
29317: GO 29277
29319: POP
29320: POP
// end ;
29321: LD_VAR 0 3
29325: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29326: LD_EXP 112
29330: NOT
29331: IFFALSE 29366
29333: GO 29335
29335: DISABLE
// begin initMiner := true ;
29336: LD_ADDR_EXP 112
29340: PUSH
29341: LD_INT 1
29343: ST_TO_ADDR
// minersList := [ ] ;
29344: LD_ADDR_EXP 113
29348: PUSH
29349: EMPTY
29350: ST_TO_ADDR
// minerMinesList := [ ] ;
29351: LD_ADDR_EXP 114
29355: PUSH
29356: EMPTY
29357: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29358: LD_ADDR_EXP 115
29362: PUSH
29363: LD_INT 5
29365: ST_TO_ADDR
// end ;
29366: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29367: LD_EXP 112
29371: PUSH
29372: LD_INT 34
29374: PUSH
29375: LD_INT 81
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PPUSH
29382: CALL_OW 69
29386: AND
29387: IFFALSE 29848
29389: GO 29391
29391: DISABLE
29392: LD_INT 0
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
// begin enable ;
29398: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29399: LD_ADDR_VAR 0 1
29403: PUSH
29404: LD_INT 34
29406: PUSH
29407: LD_INT 81
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PPUSH
29414: CALL_OW 69
29418: PUSH
29419: FOR_IN
29420: IFFALSE 29492
// begin if not i in minersList then
29422: LD_VAR 0 1
29426: PUSH
29427: LD_EXP 113
29431: IN
29432: NOT
29433: IFFALSE 29490
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29435: LD_ADDR_EXP 113
29439: PUSH
29440: LD_EXP 113
29444: PPUSH
29445: LD_EXP 113
29449: PUSH
29450: LD_INT 1
29452: PLUS
29453: PPUSH
29454: LD_VAR 0 1
29458: PPUSH
29459: CALL_OW 1
29463: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29464: LD_ADDR_EXP 114
29468: PUSH
29469: LD_EXP 114
29473: PPUSH
29474: LD_EXP 114
29478: PUSH
29479: LD_INT 1
29481: PLUS
29482: PPUSH
29483: EMPTY
29484: PPUSH
29485: CALL_OW 1
29489: ST_TO_ADDR
// end end ;
29490: GO 29419
29492: POP
29493: POP
// for i := minerMinesList downto 1 do
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: DOUBLE
29500: LD_EXP 114
29504: INC
29505: ST_TO_ADDR
29506: LD_INT 1
29508: PUSH
29509: FOR_DOWNTO
29510: IFFALSE 29846
// begin if IsLive ( minersList [ i ] ) then
29512: LD_EXP 113
29516: PUSH
29517: LD_VAR 0 1
29521: ARRAY
29522: PPUSH
29523: CALL_OW 300
29527: IFFALSE 29555
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29529: LD_EXP 113
29533: PUSH
29534: LD_VAR 0 1
29538: ARRAY
29539: PPUSH
29540: LD_EXP 114
29544: PUSH
29545: LD_VAR 0 1
29549: ARRAY
29550: PPUSH
29551: CALL_OW 505
// if not minerMinesList [ i ] then
29555: LD_EXP 114
29559: PUSH
29560: LD_VAR 0 1
29564: ARRAY
29565: NOT
29566: IFFALSE 29570
// continue ;
29568: GO 29509
// for j := minerMinesList [ i ] downto 1 do
29570: LD_ADDR_VAR 0 2
29574: PUSH
29575: DOUBLE
29576: LD_EXP 114
29580: PUSH
29581: LD_VAR 0 1
29585: ARRAY
29586: INC
29587: ST_TO_ADDR
29588: LD_INT 1
29590: PUSH
29591: FOR_DOWNTO
29592: IFFALSE 29842
// begin side := GetSide ( minersList [ i ] ) ;
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: LD_EXP 113
29603: PUSH
29604: LD_VAR 0 1
29608: ARRAY
29609: PPUSH
29610: CALL_OW 255
29614: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29615: LD_ADDR_VAR 0 4
29619: PUSH
29620: LD_EXP 114
29624: PUSH
29625: LD_VAR 0 1
29629: ARRAY
29630: PUSH
29631: LD_VAR 0 2
29635: ARRAY
29636: PUSH
29637: LD_INT 1
29639: ARRAY
29640: PPUSH
29641: LD_EXP 114
29645: PUSH
29646: LD_VAR 0 1
29650: ARRAY
29651: PUSH
29652: LD_VAR 0 2
29656: ARRAY
29657: PUSH
29658: LD_INT 2
29660: ARRAY
29661: PPUSH
29662: CALL_OW 428
29666: ST_TO_ADDR
// if not tmp then
29667: LD_VAR 0 4
29671: NOT
29672: IFFALSE 29676
// continue ;
29674: GO 29591
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29676: LD_VAR 0 4
29680: PUSH
29681: LD_INT 81
29683: PUSH
29684: LD_VAR 0 3
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 69
29697: IN
29698: PUSH
29699: LD_EXP 114
29703: PUSH
29704: LD_VAR 0 1
29708: ARRAY
29709: PUSH
29710: LD_VAR 0 2
29714: ARRAY
29715: PUSH
29716: LD_INT 1
29718: ARRAY
29719: PPUSH
29720: LD_EXP 114
29724: PUSH
29725: LD_VAR 0 1
29729: ARRAY
29730: PUSH
29731: LD_VAR 0 2
29735: ARRAY
29736: PUSH
29737: LD_INT 2
29739: ARRAY
29740: PPUSH
29741: CALL_OW 458
29745: AND
29746: IFFALSE 29840
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29748: LD_EXP 114
29752: PUSH
29753: LD_VAR 0 1
29757: ARRAY
29758: PUSH
29759: LD_VAR 0 2
29763: ARRAY
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: PPUSH
29769: LD_EXP 114
29773: PUSH
29774: LD_VAR 0 1
29778: ARRAY
29779: PUSH
29780: LD_VAR 0 2
29784: ARRAY
29785: PUSH
29786: LD_INT 2
29788: ARRAY
29789: PPUSH
29790: LD_VAR 0 3
29794: PPUSH
29795: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29799: LD_ADDR_EXP 114
29803: PUSH
29804: LD_EXP 114
29808: PPUSH
29809: LD_VAR 0 1
29813: PPUSH
29814: LD_EXP 114
29818: PUSH
29819: LD_VAR 0 1
29823: ARRAY
29824: PPUSH
29825: LD_VAR 0 2
29829: PPUSH
29830: CALL_OW 3
29834: PPUSH
29835: CALL_OW 1
29839: ST_TO_ADDR
// end ; end ;
29840: GO 29591
29842: POP
29843: POP
// end ;
29844: GO 29509
29846: POP
29847: POP
// end ;
29848: PPOPN 4
29850: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29851: LD_INT 0
29853: PPUSH
29854: PPUSH
// result := false ;
29855: LD_ADDR_VAR 0 4
29859: PUSH
29860: LD_INT 0
29862: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29863: LD_VAR 0 1
29867: PPUSH
29868: CALL_OW 264
29872: PUSH
29873: LD_INT 81
29875: EQUAL
29876: NOT
29877: IFFALSE 29881
// exit ;
29879: GO 30121
// index := GetElementIndex ( minersList , unit ) ;
29881: LD_ADDR_VAR 0 5
29885: PUSH
29886: LD_EXP 113
29890: PPUSH
29891: LD_VAR 0 1
29895: PPUSH
29896: CALL 36079 0 2
29900: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29901: LD_EXP 114
29905: PUSH
29906: LD_VAR 0 5
29910: ARRAY
29911: PUSH
29912: LD_EXP 115
29916: GREATEREQUAL
29917: IFFALSE 29921
// exit ;
29919: GO 30121
// ComMoveXY ( unit , x , y ) ;
29921: LD_VAR 0 1
29925: PPUSH
29926: LD_VAR 0 2
29930: PPUSH
29931: LD_VAR 0 3
29935: PPUSH
29936: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29940: LD_INT 35
29942: PPUSH
29943: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29947: LD_VAR 0 1
29951: PPUSH
29952: LD_VAR 0 2
29956: PPUSH
29957: LD_VAR 0 3
29961: PPUSH
29962: CALL 67831 0 3
29966: NOT
29967: PUSH
29968: LD_VAR 0 1
29972: PPUSH
29973: CALL_OW 314
29977: AND
29978: IFFALSE 29982
// exit ;
29980: GO 30121
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29982: LD_VAR 0 2
29986: PPUSH
29987: LD_VAR 0 3
29991: PPUSH
29992: CALL_OW 428
29996: PUSH
29997: LD_VAR 0 1
30001: EQUAL
30002: PUSH
30003: LD_VAR 0 1
30007: PPUSH
30008: CALL_OW 314
30012: NOT
30013: AND
30014: IFFALSE 29940
// PlaySoundXY ( x , y , PlantMine ) ;
30016: LD_VAR 0 2
30020: PPUSH
30021: LD_VAR 0 3
30025: PPUSH
30026: LD_STRING PlantMine
30028: PPUSH
30029: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30033: LD_VAR 0 2
30037: PPUSH
30038: LD_VAR 0 3
30042: PPUSH
30043: LD_VAR 0 1
30047: PPUSH
30048: CALL_OW 255
30052: PPUSH
30053: LD_INT 0
30055: PPUSH
30056: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30060: LD_ADDR_EXP 114
30064: PUSH
30065: LD_EXP 114
30069: PPUSH
30070: LD_VAR 0 5
30074: PUSH
30075: LD_EXP 114
30079: PUSH
30080: LD_VAR 0 5
30084: ARRAY
30085: PUSH
30086: LD_INT 1
30088: PLUS
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PPUSH
30094: LD_VAR 0 2
30098: PUSH
30099: LD_VAR 0 3
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: PPUSH
30108: CALL 36294 0 3
30112: ST_TO_ADDR
// result := true ;
30113: LD_ADDR_VAR 0 4
30117: PUSH
30118: LD_INT 1
30120: ST_TO_ADDR
// end ;
30121: LD_VAR 0 4
30125: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30126: LD_INT 0
30128: PPUSH
30129: PPUSH
30130: PPUSH
// if not unit in minersList then
30131: LD_VAR 0 1
30135: PUSH
30136: LD_EXP 113
30140: IN
30141: NOT
30142: IFFALSE 30146
// exit ;
30144: GO 30538
// index := GetElementIndex ( minersList , unit ) ;
30146: LD_ADDR_VAR 0 6
30150: PUSH
30151: LD_EXP 113
30155: PPUSH
30156: LD_VAR 0 1
30160: PPUSH
30161: CALL 36079 0 2
30165: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30166: LD_ADDR_VAR 0 5
30170: PUSH
30171: DOUBLE
30172: LD_EXP 114
30176: PUSH
30177: LD_VAR 0 6
30181: ARRAY
30182: INC
30183: ST_TO_ADDR
30184: LD_INT 1
30186: PUSH
30187: FOR_DOWNTO
30188: IFFALSE 30349
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30190: LD_EXP 114
30194: PUSH
30195: LD_VAR 0 6
30199: ARRAY
30200: PUSH
30201: LD_VAR 0 5
30205: ARRAY
30206: PUSH
30207: LD_INT 1
30209: ARRAY
30210: PUSH
30211: LD_VAR 0 2
30215: EQUAL
30216: PUSH
30217: LD_EXP 114
30221: PUSH
30222: LD_VAR 0 6
30226: ARRAY
30227: PUSH
30228: LD_VAR 0 5
30232: ARRAY
30233: PUSH
30234: LD_INT 2
30236: ARRAY
30237: PUSH
30238: LD_VAR 0 3
30242: EQUAL
30243: AND
30244: IFFALSE 30347
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30246: LD_EXP 114
30250: PUSH
30251: LD_VAR 0 6
30255: ARRAY
30256: PUSH
30257: LD_VAR 0 5
30261: ARRAY
30262: PUSH
30263: LD_INT 1
30265: ARRAY
30266: PPUSH
30267: LD_EXP 114
30271: PUSH
30272: LD_VAR 0 6
30276: ARRAY
30277: PUSH
30278: LD_VAR 0 5
30282: ARRAY
30283: PUSH
30284: LD_INT 2
30286: ARRAY
30287: PPUSH
30288: LD_VAR 0 1
30292: PPUSH
30293: CALL_OW 255
30297: PPUSH
30298: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30302: LD_ADDR_EXP 114
30306: PUSH
30307: LD_EXP 114
30311: PPUSH
30312: LD_VAR 0 6
30316: PPUSH
30317: LD_EXP 114
30321: PUSH
30322: LD_VAR 0 6
30326: ARRAY
30327: PPUSH
30328: LD_VAR 0 5
30332: PPUSH
30333: CALL_OW 3
30337: PPUSH
30338: CALL_OW 1
30342: ST_TO_ADDR
// exit ;
30343: POP
30344: POP
30345: GO 30538
// end ; end ;
30347: GO 30187
30349: POP
30350: POP
// for i := minerMinesList [ index ] downto 1 do
30351: LD_ADDR_VAR 0 5
30355: PUSH
30356: DOUBLE
30357: LD_EXP 114
30361: PUSH
30362: LD_VAR 0 6
30366: ARRAY
30367: INC
30368: ST_TO_ADDR
30369: LD_INT 1
30371: PUSH
30372: FOR_DOWNTO
30373: IFFALSE 30536
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30375: LD_EXP 114
30379: PUSH
30380: LD_VAR 0 6
30384: ARRAY
30385: PUSH
30386: LD_VAR 0 5
30390: ARRAY
30391: PUSH
30392: LD_INT 1
30394: ARRAY
30395: PPUSH
30396: LD_EXP 114
30400: PUSH
30401: LD_VAR 0 6
30405: ARRAY
30406: PUSH
30407: LD_VAR 0 5
30411: ARRAY
30412: PUSH
30413: LD_INT 2
30415: ARRAY
30416: PPUSH
30417: LD_VAR 0 2
30421: PPUSH
30422: LD_VAR 0 3
30426: PPUSH
30427: CALL_OW 298
30431: PUSH
30432: LD_INT 6
30434: LESS
30435: IFFALSE 30534
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30437: LD_EXP 114
30441: PUSH
30442: LD_VAR 0 6
30446: ARRAY
30447: PUSH
30448: LD_VAR 0 5
30452: ARRAY
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PPUSH
30458: LD_EXP 114
30462: PUSH
30463: LD_VAR 0 6
30467: ARRAY
30468: PUSH
30469: LD_VAR 0 5
30473: ARRAY
30474: PUSH
30475: LD_INT 2
30477: ARRAY
30478: PPUSH
30479: LD_VAR 0 1
30483: PPUSH
30484: CALL_OW 255
30488: PPUSH
30489: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30493: LD_ADDR_EXP 114
30497: PUSH
30498: LD_EXP 114
30502: PPUSH
30503: LD_VAR 0 6
30507: PPUSH
30508: LD_EXP 114
30512: PUSH
30513: LD_VAR 0 6
30517: ARRAY
30518: PPUSH
30519: LD_VAR 0 5
30523: PPUSH
30524: CALL_OW 3
30528: PPUSH
30529: CALL_OW 1
30533: ST_TO_ADDR
// end ; end ;
30534: GO 30372
30536: POP
30537: POP
// end ;
30538: LD_VAR 0 4
30542: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30543: LD_INT 0
30545: PPUSH
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
30552: PPUSH
30553: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30554: LD_VAR 0 1
30558: PPUSH
30559: CALL_OW 264
30563: PUSH
30564: LD_INT 81
30566: EQUAL
30567: NOT
30568: PUSH
30569: LD_VAR 0 1
30573: PUSH
30574: LD_EXP 113
30578: IN
30579: NOT
30580: OR
30581: IFFALSE 30585
// exit ;
30583: GO 30907
// index := GetElementIndex ( minersList , unit ) ;
30585: LD_ADDR_VAR 0 6
30589: PUSH
30590: LD_EXP 113
30594: PPUSH
30595: LD_VAR 0 1
30599: PPUSH
30600: CALL 36079 0 2
30604: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30605: LD_ADDR_VAR 0 8
30609: PUSH
30610: LD_EXP 115
30614: PUSH
30615: LD_EXP 114
30619: PUSH
30620: LD_VAR 0 6
30624: ARRAY
30625: MINUS
30626: ST_TO_ADDR
// if not minesFreeAmount then
30627: LD_VAR 0 8
30631: NOT
30632: IFFALSE 30636
// exit ;
30634: GO 30907
// tmp := [ ] ;
30636: LD_ADDR_VAR 0 7
30640: PUSH
30641: EMPTY
30642: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30643: LD_ADDR_VAR 0 5
30647: PUSH
30648: DOUBLE
30649: LD_INT 1
30651: DEC
30652: ST_TO_ADDR
30653: LD_VAR 0 8
30657: PUSH
30658: FOR_TO
30659: IFFALSE 30854
// begin _d := rand ( 0 , 5 ) ;
30661: LD_ADDR_VAR 0 11
30665: PUSH
30666: LD_INT 0
30668: PPUSH
30669: LD_INT 5
30671: PPUSH
30672: CALL_OW 12
30676: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30677: LD_ADDR_VAR 0 12
30681: PUSH
30682: LD_INT 2
30684: PPUSH
30685: LD_INT 6
30687: PPUSH
30688: CALL_OW 12
30692: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30693: LD_ADDR_VAR 0 9
30697: PUSH
30698: LD_VAR 0 2
30702: PPUSH
30703: LD_VAR 0 11
30707: PPUSH
30708: LD_VAR 0 12
30712: PPUSH
30713: CALL_OW 272
30717: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30718: LD_ADDR_VAR 0 10
30722: PUSH
30723: LD_VAR 0 3
30727: PPUSH
30728: LD_VAR 0 11
30732: PPUSH
30733: LD_VAR 0 12
30737: PPUSH
30738: CALL_OW 273
30742: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30743: LD_VAR 0 9
30747: PPUSH
30748: LD_VAR 0 10
30752: PPUSH
30753: CALL_OW 488
30757: PUSH
30758: LD_VAR 0 9
30762: PUSH
30763: LD_VAR 0 10
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_VAR 0 7
30776: IN
30777: NOT
30778: AND
30779: PUSH
30780: LD_VAR 0 9
30784: PPUSH
30785: LD_VAR 0 10
30789: PPUSH
30790: CALL_OW 458
30794: NOT
30795: AND
30796: IFFALSE 30838
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30798: LD_ADDR_VAR 0 7
30802: PUSH
30803: LD_VAR 0 7
30807: PPUSH
30808: LD_VAR 0 7
30812: PUSH
30813: LD_INT 1
30815: PLUS
30816: PPUSH
30817: LD_VAR 0 9
30821: PUSH
30822: LD_VAR 0 10
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PPUSH
30831: CALL_OW 1
30835: ST_TO_ADDR
30836: GO 30852
// i := i - 1 ;
30838: LD_ADDR_VAR 0 5
30842: PUSH
30843: LD_VAR 0 5
30847: PUSH
30848: LD_INT 1
30850: MINUS
30851: ST_TO_ADDR
// end ;
30852: GO 30658
30854: POP
30855: POP
// for i in tmp do
30856: LD_ADDR_VAR 0 5
30860: PUSH
30861: LD_VAR 0 7
30865: PUSH
30866: FOR_IN
30867: IFFALSE 30905
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30869: LD_VAR 0 1
30873: PPUSH
30874: LD_VAR 0 5
30878: PUSH
30879: LD_INT 1
30881: ARRAY
30882: PPUSH
30883: LD_VAR 0 5
30887: PUSH
30888: LD_INT 2
30890: ARRAY
30891: PPUSH
30892: CALL 29851 0 3
30896: NOT
30897: IFFALSE 30903
// exit ;
30899: POP
30900: POP
30901: GO 30907
30903: GO 30866
30905: POP
30906: POP
// end ;
30907: LD_VAR 0 4
30911: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30912: LD_INT 0
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
// if not GetClass ( unit ) = class_sniper then
30921: LD_VAR 0 1
30925: PPUSH
30926: CALL_OW 257
30930: PUSH
30931: LD_INT 5
30933: EQUAL
30934: NOT
30935: IFFALSE 30939
// exit ;
30937: GO 31327
// dist := 8 ;
30939: LD_ADDR_VAR 0 5
30943: PUSH
30944: LD_INT 8
30946: ST_TO_ADDR
// viewRange := 12 ;
30947: LD_ADDR_VAR 0 7
30951: PUSH
30952: LD_INT 12
30954: ST_TO_ADDR
// side := GetSide ( unit ) ;
30955: LD_ADDR_VAR 0 6
30959: PUSH
30960: LD_VAR 0 1
30964: PPUSH
30965: CALL_OW 255
30969: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30970: LD_INT 61
30972: PPUSH
30973: LD_VAR 0 6
30977: PPUSH
30978: CALL_OW 321
30982: PUSH
30983: LD_INT 2
30985: EQUAL
30986: IFFALSE 30996
// viewRange := 16 ;
30988: LD_ADDR_VAR 0 7
30992: PUSH
30993: LD_INT 16
30995: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30996: LD_VAR 0 1
31000: PPUSH
31001: LD_VAR 0 2
31005: PPUSH
31006: LD_VAR 0 3
31010: PPUSH
31011: CALL_OW 297
31015: PUSH
31016: LD_VAR 0 5
31020: GREATER
31021: IFFALSE 31100
// begin ComMoveXY ( unit , x , y ) ;
31023: LD_VAR 0 1
31027: PPUSH
31028: LD_VAR 0 2
31032: PPUSH
31033: LD_VAR 0 3
31037: PPUSH
31038: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31042: LD_INT 35
31044: PPUSH
31045: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31049: LD_VAR 0 1
31053: PPUSH
31054: LD_VAR 0 2
31058: PPUSH
31059: LD_VAR 0 3
31063: PPUSH
31064: CALL 67831 0 3
31068: NOT
31069: IFFALSE 31073
// exit ;
31071: GO 31327
// until GetDistUnitXY ( unit , x , y ) < dist ;
31073: LD_VAR 0 1
31077: PPUSH
31078: LD_VAR 0 2
31082: PPUSH
31083: LD_VAR 0 3
31087: PPUSH
31088: CALL_OW 297
31092: PUSH
31093: LD_VAR 0 5
31097: LESS
31098: IFFALSE 31042
// end ; ComTurnXY ( unit , x , y ) ;
31100: LD_VAR 0 1
31104: PPUSH
31105: LD_VAR 0 2
31109: PPUSH
31110: LD_VAR 0 3
31114: PPUSH
31115: CALL_OW 118
// wait ( 5 ) ;
31119: LD_INT 5
31121: PPUSH
31122: CALL_OW 67
// _d := GetDir ( unit ) ;
31126: LD_ADDR_VAR 0 10
31130: PUSH
31131: LD_VAR 0 1
31135: PPUSH
31136: CALL_OW 254
31140: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31141: LD_ADDR_VAR 0 8
31145: PUSH
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 250
31155: PPUSH
31156: LD_VAR 0 10
31160: PPUSH
31161: LD_VAR 0 5
31165: PPUSH
31166: CALL_OW 272
31170: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31171: LD_ADDR_VAR 0 9
31175: PUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 251
31185: PPUSH
31186: LD_VAR 0 10
31190: PPUSH
31191: LD_VAR 0 5
31195: PPUSH
31196: CALL_OW 273
31200: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31201: LD_VAR 0 8
31205: PPUSH
31206: LD_VAR 0 9
31210: PPUSH
31211: CALL_OW 488
31215: NOT
31216: IFFALSE 31220
// exit ;
31218: GO 31327
// ComAnimCustom ( unit , 1 ) ;
31220: LD_VAR 0 1
31224: PPUSH
31225: LD_INT 1
31227: PPUSH
31228: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31232: LD_VAR 0 8
31236: PPUSH
31237: LD_VAR 0 9
31241: PPUSH
31242: LD_VAR 0 6
31246: PPUSH
31247: LD_VAR 0 7
31251: PPUSH
31252: CALL_OW 330
// repeat wait ( 1 ) ;
31256: LD_INT 1
31258: PPUSH
31259: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31263: LD_VAR 0 1
31267: PPUSH
31268: CALL_OW 316
31272: PUSH
31273: LD_VAR 0 1
31277: PPUSH
31278: CALL_OW 314
31282: OR
31283: PUSH
31284: LD_VAR 0 1
31288: PPUSH
31289: CALL_OW 302
31293: NOT
31294: OR
31295: PUSH
31296: LD_VAR 0 1
31300: PPUSH
31301: CALL_OW 301
31305: OR
31306: IFFALSE 31256
// RemoveSeeing ( _x , _y , side ) ;
31308: LD_VAR 0 8
31312: PPUSH
31313: LD_VAR 0 9
31317: PPUSH
31318: LD_VAR 0 6
31322: PPUSH
31323: CALL_OW 331
// end ; end_of_file
31327: LD_VAR 0 4
31331: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31332: LD_INT 0
31334: PPUSH
31335: PPUSH
// if exist_mode then
31336: LD_VAR 0 2
31340: IFFALSE 31365
// unit := CreateCharacter ( prefix & ident ) else
31342: LD_ADDR_VAR 0 5
31346: PUSH
31347: LD_VAR 0 3
31351: PUSH
31352: LD_VAR 0 1
31356: STR
31357: PPUSH
31358: CALL_OW 34
31362: ST_TO_ADDR
31363: GO 31380
// unit := NewCharacter ( ident ) ;
31365: LD_ADDR_VAR 0 5
31369: PUSH
31370: LD_VAR 0 1
31374: PPUSH
31375: CALL_OW 25
31379: ST_TO_ADDR
// result := unit ;
31380: LD_ADDR_VAR 0 4
31384: PUSH
31385: LD_VAR 0 5
31389: ST_TO_ADDR
// end ;
31390: LD_VAR 0 4
31394: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31395: LD_INT 0
31397: PPUSH
31398: PPUSH
// if not side or not nation then
31399: LD_VAR 0 1
31403: NOT
31404: PUSH
31405: LD_VAR 0 2
31409: NOT
31410: OR
31411: IFFALSE 31415
// exit ;
31413: GO 32183
// case nation of nation_american :
31415: LD_VAR 0 2
31419: PUSH
31420: LD_INT 1
31422: DOUBLE
31423: EQUAL
31424: IFTRUE 31428
31426: GO 31642
31428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31429: LD_ADDR_VAR 0 4
31433: PUSH
31434: LD_INT 35
31436: PUSH
31437: LD_INT 45
31439: PUSH
31440: LD_INT 46
31442: PUSH
31443: LD_INT 47
31445: PUSH
31446: LD_INT 82
31448: PUSH
31449: LD_INT 83
31451: PUSH
31452: LD_INT 84
31454: PUSH
31455: LD_INT 85
31457: PUSH
31458: LD_INT 86
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 6
31469: PUSH
31470: LD_INT 15
31472: PUSH
31473: LD_INT 16
31475: PUSH
31476: LD_INT 7
31478: PUSH
31479: LD_INT 12
31481: PUSH
31482: LD_INT 13
31484: PUSH
31485: LD_INT 10
31487: PUSH
31488: LD_INT 14
31490: PUSH
31491: LD_INT 20
31493: PUSH
31494: LD_INT 21
31496: PUSH
31497: LD_INT 22
31499: PUSH
31500: LD_INT 25
31502: PUSH
31503: LD_INT 32
31505: PUSH
31506: LD_INT 27
31508: PUSH
31509: LD_INT 36
31511: PUSH
31512: LD_INT 69
31514: PUSH
31515: LD_INT 39
31517: PUSH
31518: LD_INT 34
31520: PUSH
31521: LD_INT 40
31523: PUSH
31524: LD_INT 48
31526: PUSH
31527: LD_INT 49
31529: PUSH
31530: LD_INT 50
31532: PUSH
31533: LD_INT 51
31535: PUSH
31536: LD_INT 52
31538: PUSH
31539: LD_INT 53
31541: PUSH
31542: LD_INT 54
31544: PUSH
31545: LD_INT 55
31547: PUSH
31548: LD_INT 56
31550: PUSH
31551: LD_INT 57
31553: PUSH
31554: LD_INT 58
31556: PUSH
31557: LD_INT 59
31559: PUSH
31560: LD_INT 60
31562: PUSH
31563: LD_INT 61
31565: PUSH
31566: LD_INT 62
31568: PUSH
31569: LD_INT 80
31571: PUSH
31572: LD_INT 82
31574: PUSH
31575: LD_INT 83
31577: PUSH
31578: LD_INT 84
31580: PUSH
31581: LD_INT 85
31583: PUSH
31584: LD_INT 86
31586: PUSH
31587: EMPTY
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: ST_TO_ADDR
31640: GO 32107
31642: LD_INT 2
31644: DOUBLE
31645: EQUAL
31646: IFTRUE 31650
31648: GO 31876
31650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31651: LD_ADDR_VAR 0 4
31655: PUSH
31656: LD_INT 35
31658: PUSH
31659: LD_INT 45
31661: PUSH
31662: LD_INT 46
31664: PUSH
31665: LD_INT 47
31667: PUSH
31668: LD_INT 82
31670: PUSH
31671: LD_INT 83
31673: PUSH
31674: LD_INT 84
31676: PUSH
31677: LD_INT 85
31679: PUSH
31680: LD_INT 87
31682: PUSH
31683: LD_INT 70
31685: PUSH
31686: LD_INT 1
31688: PUSH
31689: LD_INT 11
31691: PUSH
31692: LD_INT 3
31694: PUSH
31695: LD_INT 4
31697: PUSH
31698: LD_INT 5
31700: PUSH
31701: LD_INT 6
31703: PUSH
31704: LD_INT 15
31706: PUSH
31707: LD_INT 18
31709: PUSH
31710: LD_INT 7
31712: PUSH
31713: LD_INT 17
31715: PUSH
31716: LD_INT 8
31718: PUSH
31719: LD_INT 20
31721: PUSH
31722: LD_INT 21
31724: PUSH
31725: LD_INT 22
31727: PUSH
31728: LD_INT 72
31730: PUSH
31731: LD_INT 26
31733: PUSH
31734: LD_INT 69
31736: PUSH
31737: LD_INT 39
31739: PUSH
31740: LD_INT 40
31742: PUSH
31743: LD_INT 41
31745: PUSH
31746: LD_INT 42
31748: PUSH
31749: LD_INT 43
31751: PUSH
31752: LD_INT 48
31754: PUSH
31755: LD_INT 49
31757: PUSH
31758: LD_INT 50
31760: PUSH
31761: LD_INT 51
31763: PUSH
31764: LD_INT 52
31766: PUSH
31767: LD_INT 53
31769: PUSH
31770: LD_INT 54
31772: PUSH
31773: LD_INT 55
31775: PUSH
31776: LD_INT 56
31778: PUSH
31779: LD_INT 60
31781: PUSH
31782: LD_INT 61
31784: PUSH
31785: LD_INT 62
31787: PUSH
31788: LD_INT 66
31790: PUSH
31791: LD_INT 67
31793: PUSH
31794: LD_INT 68
31796: PUSH
31797: LD_INT 81
31799: PUSH
31800: LD_INT 82
31802: PUSH
31803: LD_INT 83
31805: PUSH
31806: LD_INT 84
31808: PUSH
31809: LD_INT 85
31811: PUSH
31812: LD_INT 87
31814: PUSH
31815: LD_INT 88
31817: PUSH
31818: EMPTY
31819: LIST
31820: LIST
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: ST_TO_ADDR
31874: GO 32107
31876: LD_INT 3
31878: DOUBLE
31879: EQUAL
31880: IFTRUE 31884
31882: GO 32106
31884: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31885: LD_ADDR_VAR 0 4
31889: PUSH
31890: LD_INT 46
31892: PUSH
31893: LD_INT 47
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: LD_INT 82
31904: PUSH
31905: LD_INT 83
31907: PUSH
31908: LD_INT 84
31910: PUSH
31911: LD_INT 85
31913: PUSH
31914: LD_INT 86
31916: PUSH
31917: LD_INT 11
31919: PUSH
31920: LD_INT 9
31922: PUSH
31923: LD_INT 20
31925: PUSH
31926: LD_INT 19
31928: PUSH
31929: LD_INT 21
31931: PUSH
31932: LD_INT 24
31934: PUSH
31935: LD_INT 22
31937: PUSH
31938: LD_INT 25
31940: PUSH
31941: LD_INT 28
31943: PUSH
31944: LD_INT 29
31946: PUSH
31947: LD_INT 30
31949: PUSH
31950: LD_INT 31
31952: PUSH
31953: LD_INT 37
31955: PUSH
31956: LD_INT 38
31958: PUSH
31959: LD_INT 32
31961: PUSH
31962: LD_INT 27
31964: PUSH
31965: LD_INT 33
31967: PUSH
31968: LD_INT 69
31970: PUSH
31971: LD_INT 39
31973: PUSH
31974: LD_INT 34
31976: PUSH
31977: LD_INT 40
31979: PUSH
31980: LD_INT 71
31982: PUSH
31983: LD_INT 23
31985: PUSH
31986: LD_INT 44
31988: PUSH
31989: LD_INT 48
31991: PUSH
31992: LD_INT 49
31994: PUSH
31995: LD_INT 50
31997: PUSH
31998: LD_INT 51
32000: PUSH
32001: LD_INT 52
32003: PUSH
32004: LD_INT 53
32006: PUSH
32007: LD_INT 54
32009: PUSH
32010: LD_INT 55
32012: PUSH
32013: LD_INT 56
32015: PUSH
32016: LD_INT 57
32018: PUSH
32019: LD_INT 58
32021: PUSH
32022: LD_INT 59
32024: PUSH
32025: LD_INT 63
32027: PUSH
32028: LD_INT 64
32030: PUSH
32031: LD_INT 65
32033: PUSH
32034: LD_INT 82
32036: PUSH
32037: LD_INT 83
32039: PUSH
32040: LD_INT 84
32042: PUSH
32043: LD_INT 85
32045: PUSH
32046: LD_INT 86
32048: PUSH
32049: EMPTY
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: ST_TO_ADDR
32104: GO 32107
32106: POP
// if state > - 1 and state < 3 then
32107: LD_VAR 0 3
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: GREATER
32116: PUSH
32117: LD_VAR 0 3
32121: PUSH
32122: LD_INT 3
32124: LESS
32125: AND
32126: IFFALSE 32183
// for i in result do
32128: LD_ADDR_VAR 0 5
32132: PUSH
32133: LD_VAR 0 4
32137: PUSH
32138: FOR_IN
32139: IFFALSE 32181
// if GetTech ( i , side ) <> state then
32141: LD_VAR 0 5
32145: PPUSH
32146: LD_VAR 0 1
32150: PPUSH
32151: CALL_OW 321
32155: PUSH
32156: LD_VAR 0 3
32160: NONEQUAL
32161: IFFALSE 32179
// result := result diff i ;
32163: LD_ADDR_VAR 0 4
32167: PUSH
32168: LD_VAR 0 4
32172: PUSH
32173: LD_VAR 0 5
32177: DIFF
32178: ST_TO_ADDR
32179: GO 32138
32181: POP
32182: POP
// end ;
32183: LD_VAR 0 4
32187: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32188: LD_INT 0
32190: PPUSH
32191: PPUSH
32192: PPUSH
// result := true ;
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: LD_INT 1
32200: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32201: LD_ADDR_VAR 0 5
32205: PUSH
32206: LD_VAR 0 2
32210: PPUSH
32211: CALL_OW 480
32215: ST_TO_ADDR
// if not tmp then
32216: LD_VAR 0 5
32220: NOT
32221: IFFALSE 32225
// exit ;
32223: GO 32274
// for i in tmp do
32225: LD_ADDR_VAR 0 4
32229: PUSH
32230: LD_VAR 0 5
32234: PUSH
32235: FOR_IN
32236: IFFALSE 32272
// if GetTech ( i , side ) <> state_researched then
32238: LD_VAR 0 4
32242: PPUSH
32243: LD_VAR 0 1
32247: PPUSH
32248: CALL_OW 321
32252: PUSH
32253: LD_INT 2
32255: NONEQUAL
32256: IFFALSE 32270
// begin result := false ;
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: LD_INT 0
32265: ST_TO_ADDR
// exit ;
32266: POP
32267: POP
32268: GO 32274
// end ;
32270: GO 32235
32272: POP
32273: POP
// end ;
32274: LD_VAR 0 3
32278: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32279: LD_INT 0
32281: PPUSH
32282: PPUSH
32283: PPUSH
32284: PPUSH
32285: PPUSH
32286: PPUSH
32287: PPUSH
32288: PPUSH
32289: PPUSH
32290: PPUSH
32291: PPUSH
32292: PPUSH
32293: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32294: LD_VAR 0 1
32298: NOT
32299: PUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 257
32309: PUSH
32310: LD_INT 9
32312: NONEQUAL
32313: OR
32314: IFFALSE 32318
// exit ;
32316: GO 32891
// side := GetSide ( unit ) ;
32318: LD_ADDR_VAR 0 9
32322: PUSH
32323: LD_VAR 0 1
32327: PPUSH
32328: CALL_OW 255
32332: ST_TO_ADDR
// tech_space := tech_spacanom ;
32333: LD_ADDR_VAR 0 12
32337: PUSH
32338: LD_INT 29
32340: ST_TO_ADDR
// tech_time := tech_taurad ;
32341: LD_ADDR_VAR 0 13
32345: PUSH
32346: LD_INT 28
32348: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32349: LD_ADDR_VAR 0 11
32353: PUSH
32354: LD_VAR 0 1
32358: PPUSH
32359: CALL_OW 310
32363: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32364: LD_VAR 0 11
32368: PPUSH
32369: CALL_OW 247
32373: PUSH
32374: LD_INT 2
32376: EQUAL
32377: IFFALSE 32381
// exit ;
32379: GO 32891
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32381: LD_ADDR_VAR 0 8
32385: PUSH
32386: LD_INT 81
32388: PUSH
32389: LD_VAR 0 9
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 21
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PPUSH
32419: CALL_OW 69
32423: ST_TO_ADDR
// if not tmp then
32424: LD_VAR 0 8
32428: NOT
32429: IFFALSE 32433
// exit ;
32431: GO 32891
// if in_unit then
32433: LD_VAR 0 11
32437: IFFALSE 32461
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32439: LD_ADDR_VAR 0 10
32443: PUSH
32444: LD_VAR 0 8
32448: PPUSH
32449: LD_VAR 0 11
32453: PPUSH
32454: CALL_OW 74
32458: ST_TO_ADDR
32459: GO 32481
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32461: LD_ADDR_VAR 0 10
32465: PUSH
32466: LD_VAR 0 8
32470: PPUSH
32471: LD_VAR 0 1
32475: PPUSH
32476: CALL_OW 74
32480: ST_TO_ADDR
// if not enemy then
32481: LD_VAR 0 10
32485: NOT
32486: IFFALSE 32490
// exit ;
32488: GO 32891
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32490: LD_VAR 0 11
32494: PUSH
32495: LD_VAR 0 11
32499: PPUSH
32500: LD_VAR 0 10
32504: PPUSH
32505: CALL_OW 296
32509: PUSH
32510: LD_INT 13
32512: GREATER
32513: AND
32514: PUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: LD_VAR 0 10
32524: PPUSH
32525: CALL_OW 296
32529: PUSH
32530: LD_INT 12
32532: GREATER
32533: OR
32534: IFFALSE 32538
// exit ;
32536: GO 32891
// missile := [ 1 ] ;
32538: LD_ADDR_VAR 0 14
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32549: LD_VAR 0 9
32553: PPUSH
32554: LD_VAR 0 12
32558: PPUSH
32559: CALL_OW 325
32563: IFFALSE 32592
// missile := Replace ( missile , missile + 1 , 2 ) ;
32565: LD_ADDR_VAR 0 14
32569: PUSH
32570: LD_VAR 0 14
32574: PPUSH
32575: LD_VAR 0 14
32579: PUSH
32580: LD_INT 1
32582: PLUS
32583: PPUSH
32584: LD_INT 2
32586: PPUSH
32587: CALL_OW 1
32591: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32592: LD_VAR 0 9
32596: PPUSH
32597: LD_VAR 0 13
32601: PPUSH
32602: CALL_OW 325
32606: PUSH
32607: LD_VAR 0 10
32611: PPUSH
32612: CALL_OW 255
32616: PPUSH
32617: LD_VAR 0 13
32621: PPUSH
32622: CALL_OW 325
32626: NOT
32627: AND
32628: IFFALSE 32657
// missile := Replace ( missile , missile + 1 , 3 ) ;
32630: LD_ADDR_VAR 0 14
32634: PUSH
32635: LD_VAR 0 14
32639: PPUSH
32640: LD_VAR 0 14
32644: PUSH
32645: LD_INT 1
32647: PLUS
32648: PPUSH
32649: LD_INT 3
32651: PPUSH
32652: CALL_OW 1
32656: ST_TO_ADDR
// if missile < 2 then
32657: LD_VAR 0 14
32661: PUSH
32662: LD_INT 2
32664: LESS
32665: IFFALSE 32669
// exit ;
32667: GO 32891
// x := GetX ( enemy ) ;
32669: LD_ADDR_VAR 0 4
32673: PUSH
32674: LD_VAR 0 10
32678: PPUSH
32679: CALL_OW 250
32683: ST_TO_ADDR
// y := GetY ( enemy ) ;
32684: LD_ADDR_VAR 0 5
32688: PUSH
32689: LD_VAR 0 10
32693: PPUSH
32694: CALL_OW 251
32698: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32699: LD_ADDR_VAR 0 6
32703: PUSH
32704: LD_VAR 0 4
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PPUSH
32713: LD_INT 1
32715: PPUSH
32716: CALL_OW 12
32720: PLUS
32721: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32722: LD_ADDR_VAR 0 7
32726: PUSH
32727: LD_VAR 0 5
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PPUSH
32736: LD_INT 1
32738: PPUSH
32739: CALL_OW 12
32743: PLUS
32744: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32745: LD_VAR 0 6
32749: PPUSH
32750: LD_VAR 0 7
32754: PPUSH
32755: CALL_OW 488
32759: NOT
32760: IFFALSE 32782
// begin _x := x ;
32762: LD_ADDR_VAR 0 6
32766: PUSH
32767: LD_VAR 0 4
32771: ST_TO_ADDR
// _y := y ;
32772: LD_ADDR_VAR 0 7
32776: PUSH
32777: LD_VAR 0 5
32781: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: LD_INT 1
32789: PPUSH
32790: LD_VAR 0 14
32794: PPUSH
32795: CALL_OW 12
32799: ST_TO_ADDR
// case i of 1 :
32800: LD_VAR 0 3
32804: PUSH
32805: LD_INT 1
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32813
32811: GO 32830
32813: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32814: LD_VAR 0 1
32818: PPUSH
32819: LD_VAR 0 10
32823: PPUSH
32824: CALL_OW 115
32828: GO 32891
32830: LD_INT 2
32832: DOUBLE
32833: EQUAL
32834: IFTRUE 32838
32836: GO 32860
32838: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32839: LD_VAR 0 1
32843: PPUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 7
32853: PPUSH
32854: CALL_OW 153
32858: GO 32891
32860: LD_INT 3
32862: DOUBLE
32863: EQUAL
32864: IFTRUE 32868
32866: GO 32890
32868: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32869: LD_VAR 0 1
32873: PPUSH
32874: LD_VAR 0 6
32878: PPUSH
32879: LD_VAR 0 7
32883: PPUSH
32884: CALL_OW 154
32888: GO 32891
32890: POP
// end ;
32891: LD_VAR 0 2
32895: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32896: LD_INT 0
32898: PPUSH
32899: PPUSH
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
// if not unit or not building then
32904: LD_VAR 0 1
32908: NOT
32909: PUSH
32910: LD_VAR 0 2
32914: NOT
32915: OR
32916: IFFALSE 32920
// exit ;
32918: GO 33078
// x := GetX ( building ) ;
32920: LD_ADDR_VAR 0 5
32924: PUSH
32925: LD_VAR 0 2
32929: PPUSH
32930: CALL_OW 250
32934: ST_TO_ADDR
// y := GetY ( building ) ;
32935: LD_ADDR_VAR 0 6
32939: PUSH
32940: LD_VAR 0 2
32944: PPUSH
32945: CALL_OW 251
32949: ST_TO_ADDR
// for i = 0 to 5 do
32950: LD_ADDR_VAR 0 4
32954: PUSH
32955: DOUBLE
32956: LD_INT 0
32958: DEC
32959: ST_TO_ADDR
32960: LD_INT 5
32962: PUSH
32963: FOR_TO
32964: IFFALSE 33076
// begin _x := ShiftX ( x , i , 3 ) ;
32966: LD_ADDR_VAR 0 7
32970: PUSH
32971: LD_VAR 0 5
32975: PPUSH
32976: LD_VAR 0 4
32980: PPUSH
32981: LD_INT 3
32983: PPUSH
32984: CALL_OW 272
32988: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32989: LD_ADDR_VAR 0 8
32993: PUSH
32994: LD_VAR 0 6
32998: PPUSH
32999: LD_VAR 0 4
33003: PPUSH
33004: LD_INT 3
33006: PPUSH
33007: CALL_OW 273
33011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33012: LD_VAR 0 7
33016: PPUSH
33017: LD_VAR 0 8
33021: PPUSH
33022: CALL_OW 488
33026: NOT
33027: IFFALSE 33031
// continue ;
33029: GO 32963
// if HexInfo ( _x , _y ) = 0 then
33031: LD_VAR 0 7
33035: PPUSH
33036: LD_VAR 0 8
33040: PPUSH
33041: CALL_OW 428
33045: PUSH
33046: LD_INT 0
33048: EQUAL
33049: IFFALSE 33074
// begin ComMoveXY ( unit , _x , _y ) ;
33051: LD_VAR 0 1
33055: PPUSH
33056: LD_VAR 0 7
33060: PPUSH
33061: LD_VAR 0 8
33065: PPUSH
33066: CALL_OW 111
// exit ;
33070: POP
33071: POP
33072: GO 33078
// end ; end ;
33074: GO 32963
33076: POP
33077: POP
// end ;
33078: LD_VAR 0 3
33082: RET
// export function ScanBase ( side , base_area ) ; begin
33083: LD_INT 0
33085: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33086: LD_ADDR_VAR 0 3
33090: PUSH
33091: LD_VAR 0 2
33095: PPUSH
33096: LD_INT 81
33098: PUSH
33099: LD_VAR 0 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PPUSH
33108: CALL_OW 70
33112: ST_TO_ADDR
// end ;
33113: LD_VAR 0 3
33117: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33118: LD_INT 0
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
// result := false ;
33124: LD_ADDR_VAR 0 2
33128: PUSH
33129: LD_INT 0
33131: ST_TO_ADDR
// side := GetSide ( unit ) ;
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 255
33146: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33147: LD_ADDR_VAR 0 4
33151: PUSH
33152: LD_VAR 0 1
33156: PPUSH
33157: CALL_OW 248
33161: ST_TO_ADDR
// case nat of 1 :
33162: LD_VAR 0 4
33166: PUSH
33167: LD_INT 1
33169: DOUBLE
33170: EQUAL
33171: IFTRUE 33175
33173: GO 33186
33175: POP
// tech := tech_lassight ; 2 :
33176: LD_ADDR_VAR 0 5
33180: PUSH
33181: LD_INT 12
33183: ST_TO_ADDR
33184: GO 33225
33186: LD_INT 2
33188: DOUBLE
33189: EQUAL
33190: IFTRUE 33194
33192: GO 33205
33194: POP
// tech := tech_mortar ; 3 :
33195: LD_ADDR_VAR 0 5
33199: PUSH
33200: LD_INT 41
33202: ST_TO_ADDR
33203: GO 33225
33205: LD_INT 3
33207: DOUBLE
33208: EQUAL
33209: IFTRUE 33213
33211: GO 33224
33213: POP
// tech := tech_bazooka ; end ;
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: LD_INT 44
33221: ST_TO_ADDR
33222: GO 33225
33224: POP
// if Researched ( side , tech ) then
33225: LD_VAR 0 3
33229: PPUSH
33230: LD_VAR 0 5
33234: PPUSH
33235: CALL_OW 325
33239: IFFALSE 33266
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33241: LD_ADDR_VAR 0 2
33245: PUSH
33246: LD_INT 5
33248: PUSH
33249: LD_INT 8
33251: PUSH
33252: LD_INT 9
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: LIST
33259: PUSH
33260: LD_VAR 0 4
33264: ARRAY
33265: ST_TO_ADDR
// end ;
33266: LD_VAR 0 2
33270: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33271: LD_INT 0
33273: PPUSH
33274: PPUSH
33275: PPUSH
// if not mines then
33276: LD_VAR 0 2
33280: NOT
33281: IFFALSE 33285
// exit ;
33283: GO 33429
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33285: LD_ADDR_VAR 0 5
33289: PUSH
33290: LD_INT 81
33292: PUSH
33293: LD_VAR 0 1
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 3
33304: PUSH
33305: LD_INT 21
33307: PUSH
33308: LD_INT 3
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PPUSH
33323: CALL_OW 69
33327: ST_TO_ADDR
// for i in mines do
33328: LD_ADDR_VAR 0 4
33332: PUSH
33333: LD_VAR 0 2
33337: PUSH
33338: FOR_IN
33339: IFFALSE 33427
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33341: LD_VAR 0 4
33345: PUSH
33346: LD_INT 1
33348: ARRAY
33349: PPUSH
33350: LD_VAR 0 4
33354: PUSH
33355: LD_INT 2
33357: ARRAY
33358: PPUSH
33359: CALL_OW 458
33363: NOT
33364: IFFALSE 33368
// continue ;
33366: GO 33338
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33368: LD_VAR 0 4
33372: PUSH
33373: LD_INT 1
33375: ARRAY
33376: PPUSH
33377: LD_VAR 0 4
33381: PUSH
33382: LD_INT 2
33384: ARRAY
33385: PPUSH
33386: CALL_OW 428
33390: PUSH
33391: LD_VAR 0 5
33395: IN
33396: IFFALSE 33425
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33398: LD_VAR 0 4
33402: PUSH
33403: LD_INT 1
33405: ARRAY
33406: PPUSH
33407: LD_VAR 0 4
33411: PUSH
33412: LD_INT 2
33414: ARRAY
33415: PPUSH
33416: LD_VAR 0 1
33420: PPUSH
33421: CALL_OW 456
// end ;
33425: GO 33338
33427: POP
33428: POP
// end ;
33429: LD_VAR 0 3
33433: RET
// export function Count ( array ) ; begin
33434: LD_INT 0
33436: PPUSH
// result := array + 0 ;
33437: LD_ADDR_VAR 0 2
33441: PUSH
33442: LD_VAR 0 1
33446: PUSH
33447: LD_INT 0
33449: PLUS
33450: ST_TO_ADDR
// end ;
33451: LD_VAR 0 2
33455: RET
// export function IsEmpty ( building ) ; begin
33456: LD_INT 0
33458: PPUSH
// if not building then
33459: LD_VAR 0 1
33463: NOT
33464: IFFALSE 33468
// exit ;
33466: GO 33511
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_VAR 0 1
33477: PUSH
33478: LD_INT 22
33480: PUSH
33481: LD_VAR 0 1
33485: PPUSH
33486: CALL_OW 255
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 58
33497: PUSH
33498: EMPTY
33499: LIST
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PPUSH
33505: CALL_OW 69
33509: IN
33510: ST_TO_ADDR
// end ;
33511: LD_VAR 0 2
33515: RET
// export function IsNotFull ( building ) ; var places ; begin
33516: LD_INT 0
33518: PPUSH
33519: PPUSH
// if not building then
33520: LD_VAR 0 1
33524: NOT
33525: IFFALSE 33529
// exit ;
33527: GO 33557
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
33529: LD_ADDR_VAR 0 2
33533: PUSH
33534: LD_VAR 0 1
33538: PPUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 62
33544: PUSH
33545: EMPTY
33546: LIST
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PPUSH
33552: CALL_OW 72
33556: ST_TO_ADDR
// end ;
33557: LD_VAR 0 2
33561: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33562: LD_INT 0
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
// tmp := [ ] ;
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: EMPTY
33574: ST_TO_ADDR
// list := [ ] ;
33575: LD_ADDR_VAR 0 5
33579: PUSH
33580: EMPTY
33581: ST_TO_ADDR
// for i = 16 to 25 do
33582: LD_ADDR_VAR 0 4
33586: PUSH
33587: DOUBLE
33588: LD_INT 16
33590: DEC
33591: ST_TO_ADDR
33592: LD_INT 25
33594: PUSH
33595: FOR_TO
33596: IFFALSE 33669
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33598: LD_ADDR_VAR 0 3
33602: PUSH
33603: LD_VAR 0 3
33607: PUSH
33608: LD_INT 22
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: CALL_OW 255
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 91
33627: PUSH
33628: LD_VAR 0 1
33632: PUSH
33633: LD_INT 6
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 30
33643: PUSH
33644: LD_VAR 0 4
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: EMPTY
33659: LIST
33660: PPUSH
33661: CALL_OW 69
33665: ADD
33666: ST_TO_ADDR
33667: GO 33595
33669: POP
33670: POP
// for i = 1 to tmp do
33671: LD_ADDR_VAR 0 4
33675: PUSH
33676: DOUBLE
33677: LD_INT 1
33679: DEC
33680: ST_TO_ADDR
33681: LD_VAR 0 3
33685: PUSH
33686: FOR_TO
33687: IFFALSE 33775
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33689: LD_ADDR_VAR 0 5
33693: PUSH
33694: LD_VAR 0 5
33698: PUSH
33699: LD_VAR 0 3
33703: PUSH
33704: LD_VAR 0 4
33708: ARRAY
33709: PPUSH
33710: CALL_OW 266
33714: PUSH
33715: LD_VAR 0 3
33719: PUSH
33720: LD_VAR 0 4
33724: ARRAY
33725: PPUSH
33726: CALL_OW 250
33730: PUSH
33731: LD_VAR 0 3
33735: PUSH
33736: LD_VAR 0 4
33740: ARRAY
33741: PPUSH
33742: CALL_OW 251
33746: PUSH
33747: LD_VAR 0 3
33751: PUSH
33752: LD_VAR 0 4
33756: ARRAY
33757: PPUSH
33758: CALL_OW 254
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: ADD
33772: ST_TO_ADDR
33773: GO 33686
33775: POP
33776: POP
// result := list ;
33777: LD_ADDR_VAR 0 2
33781: PUSH
33782: LD_VAR 0 5
33786: ST_TO_ADDR
// end ;
33787: LD_VAR 0 2
33791: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33792: LD_INT 0
33794: PPUSH
33795: PPUSH
33796: PPUSH
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
// if not factory then
33801: LD_VAR 0 1
33805: NOT
33806: IFFALSE 33810
// exit ;
33808: GO 34403
// if control = control_apeman then
33810: LD_VAR 0 4
33814: PUSH
33815: LD_INT 5
33817: EQUAL
33818: IFFALSE 33927
// begin tmp := UnitsInside ( factory ) ;
33820: LD_ADDR_VAR 0 8
33824: PUSH
33825: LD_VAR 0 1
33829: PPUSH
33830: CALL_OW 313
33834: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33835: LD_VAR 0 8
33839: PPUSH
33840: LD_INT 25
33842: PUSH
33843: LD_INT 12
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PPUSH
33850: CALL_OW 72
33854: NOT
33855: IFFALSE 33865
// control := control_manual ;
33857: LD_ADDR_VAR 0 4
33861: PUSH
33862: LD_INT 1
33864: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33865: LD_ADDR_VAR 0 8
33869: PUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: CALL 33562 0 1
33879: ST_TO_ADDR
// if tmp then
33880: LD_VAR 0 8
33884: IFFALSE 33927
// begin for i in tmp do
33886: LD_ADDR_VAR 0 7
33890: PUSH
33891: LD_VAR 0 8
33895: PUSH
33896: FOR_IN
33897: IFFALSE 33925
// if i [ 1 ] = b_ext_radio then
33899: LD_VAR 0 7
33903: PUSH
33904: LD_INT 1
33906: ARRAY
33907: PUSH
33908: LD_INT 22
33910: EQUAL
33911: IFFALSE 33923
// begin control := control_remote ;
33913: LD_ADDR_VAR 0 4
33917: PUSH
33918: LD_INT 2
33920: ST_TO_ADDR
// break ;
33921: GO 33925
// end ;
33923: GO 33896
33925: POP
33926: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33927: LD_VAR 0 1
33931: PPUSH
33932: LD_VAR 0 2
33936: PPUSH
33937: LD_VAR 0 3
33941: PPUSH
33942: LD_VAR 0 4
33946: PPUSH
33947: LD_VAR 0 5
33951: PPUSH
33952: CALL_OW 448
33956: IFFALSE 33991
// begin result := [ chassis , engine , control , weapon ] ;
33958: LD_ADDR_VAR 0 6
33962: PUSH
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 3
33972: PUSH
33973: LD_VAR 0 4
33977: PUSH
33978: LD_VAR 0 5
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: ST_TO_ADDR
// exit ;
33989: GO 34403
// end ; _chassis := AvailableChassisList ( factory ) ;
33991: LD_ADDR_VAR 0 9
33995: PUSH
33996: LD_VAR 0 1
34000: PPUSH
34001: CALL_OW 475
34005: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34006: LD_ADDR_VAR 0 11
34010: PUSH
34011: LD_VAR 0 1
34015: PPUSH
34016: CALL_OW 476
34020: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34021: LD_ADDR_VAR 0 12
34025: PUSH
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 477
34035: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34036: LD_ADDR_VAR 0 10
34040: PUSH
34041: LD_VAR 0 1
34045: PPUSH
34046: CALL_OW 478
34050: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34051: LD_VAR 0 9
34055: NOT
34056: PUSH
34057: LD_VAR 0 11
34061: NOT
34062: OR
34063: PUSH
34064: LD_VAR 0 12
34068: NOT
34069: OR
34070: PUSH
34071: LD_VAR 0 10
34075: NOT
34076: OR
34077: IFFALSE 34112
// begin result := [ chassis , engine , control , weapon ] ;
34079: LD_ADDR_VAR 0 6
34083: PUSH
34084: LD_VAR 0 2
34088: PUSH
34089: LD_VAR 0 3
34093: PUSH
34094: LD_VAR 0 4
34098: PUSH
34099: LD_VAR 0 5
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: ST_TO_ADDR
// exit ;
34110: GO 34403
// end ; if not chassis in _chassis then
34112: LD_VAR 0 2
34116: PUSH
34117: LD_VAR 0 9
34121: IN
34122: NOT
34123: IFFALSE 34149
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34125: LD_ADDR_VAR 0 2
34129: PUSH
34130: LD_VAR 0 9
34134: PUSH
34135: LD_INT 1
34137: PPUSH
34138: LD_VAR 0 9
34142: PPUSH
34143: CALL_OW 12
34147: ARRAY
34148: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34149: LD_VAR 0 2
34153: PPUSH
34154: LD_VAR 0 3
34158: PPUSH
34159: CALL 34408 0 2
34163: NOT
34164: IFFALSE 34223
// repeat engine := _engine [ 1 ] ;
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_VAR 0 11
34175: PUSH
34176: LD_INT 1
34178: ARRAY
34179: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34180: LD_ADDR_VAR 0 11
34184: PUSH
34185: LD_VAR 0 11
34189: PPUSH
34190: LD_INT 1
34192: PPUSH
34193: CALL_OW 3
34197: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34198: LD_VAR 0 2
34202: PPUSH
34203: LD_VAR 0 3
34207: PPUSH
34208: CALL 34408 0 2
34212: PUSH
34213: LD_VAR 0 11
34217: PUSH
34218: EMPTY
34219: EQUAL
34220: OR
34221: IFFALSE 34166
// if not control in _control then
34223: LD_VAR 0 4
34227: PUSH
34228: LD_VAR 0 12
34232: IN
34233: NOT
34234: IFFALSE 34260
// control := _control [ rand ( 1 , _control ) ] ;
34236: LD_ADDR_VAR 0 4
34240: PUSH
34241: LD_VAR 0 12
34245: PUSH
34246: LD_INT 1
34248: PPUSH
34249: LD_VAR 0 12
34253: PPUSH
34254: CALL_OW 12
34258: ARRAY
34259: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34260: LD_VAR 0 2
34264: PPUSH
34265: LD_VAR 0 5
34269: PPUSH
34270: CALL 34628 0 2
34274: NOT
34275: IFFALSE 34334
// repeat weapon := _weapon [ 1 ] ;
34277: LD_ADDR_VAR 0 5
34281: PUSH
34282: LD_VAR 0 10
34286: PUSH
34287: LD_INT 1
34289: ARRAY
34290: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34291: LD_ADDR_VAR 0 10
34295: PUSH
34296: LD_VAR 0 10
34300: PPUSH
34301: LD_INT 1
34303: PPUSH
34304: CALL_OW 3
34308: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34309: LD_VAR 0 2
34313: PPUSH
34314: LD_VAR 0 5
34318: PPUSH
34319: CALL 34628 0 2
34323: PUSH
34324: LD_VAR 0 10
34328: PUSH
34329: EMPTY
34330: EQUAL
34331: OR
34332: IFFALSE 34277
// result := [ ] ;
34334: LD_ADDR_VAR 0 6
34338: PUSH
34339: EMPTY
34340: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34341: LD_VAR 0 1
34345: PPUSH
34346: LD_VAR 0 2
34350: PPUSH
34351: LD_VAR 0 3
34355: PPUSH
34356: LD_VAR 0 4
34360: PPUSH
34361: LD_VAR 0 5
34365: PPUSH
34366: CALL_OW 448
34370: IFFALSE 34403
// result := [ chassis , engine , control , weapon ] ;
34372: LD_ADDR_VAR 0 6
34376: PUSH
34377: LD_VAR 0 2
34381: PUSH
34382: LD_VAR 0 3
34386: PUSH
34387: LD_VAR 0 4
34391: PUSH
34392: LD_VAR 0 5
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
// end ;
34403: LD_VAR 0 6
34407: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34408: LD_INT 0
34410: PPUSH
// if not chassis or not engine then
34411: LD_VAR 0 1
34415: NOT
34416: PUSH
34417: LD_VAR 0 2
34421: NOT
34422: OR
34423: IFFALSE 34427
// exit ;
34425: GO 34623
// case engine of engine_solar :
34427: LD_VAR 0 2
34431: PUSH
34432: LD_INT 2
34434: DOUBLE
34435: EQUAL
34436: IFTRUE 34440
34438: GO 34478
34440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34441: LD_ADDR_VAR 0 3
34445: PUSH
34446: LD_INT 11
34448: PUSH
34449: LD_INT 12
34451: PUSH
34452: LD_INT 13
34454: PUSH
34455: LD_INT 14
34457: PUSH
34458: LD_INT 1
34460: PUSH
34461: LD_INT 2
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 34607
34478: LD_INT 1
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34548
34486: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34487: LD_ADDR_VAR 0 3
34491: PUSH
34492: LD_INT 11
34494: PUSH
34495: LD_INT 12
34497: PUSH
34498: LD_INT 13
34500: PUSH
34501: LD_INT 14
34503: PUSH
34504: LD_INT 1
34506: PUSH
34507: LD_INT 2
34509: PUSH
34510: LD_INT 3
34512: PUSH
34513: LD_INT 4
34515: PUSH
34516: LD_INT 5
34518: PUSH
34519: LD_INT 21
34521: PUSH
34522: LD_INT 23
34524: PUSH
34525: LD_INT 22
34527: PUSH
34528: LD_INT 24
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: ST_TO_ADDR
34546: GO 34607
34548: LD_INT 3
34550: DOUBLE
34551: EQUAL
34552: IFTRUE 34556
34554: GO 34606
34556: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34557: LD_ADDR_VAR 0 3
34561: PUSH
34562: LD_INT 13
34564: PUSH
34565: LD_INT 14
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 3
34573: PUSH
34574: LD_INT 4
34576: PUSH
34577: LD_INT 5
34579: PUSH
34580: LD_INT 21
34582: PUSH
34583: LD_INT 22
34585: PUSH
34586: LD_INT 23
34588: PUSH
34589: LD_INT 24
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
34604: GO 34607
34606: POP
// result := ( chassis in result ) ;
34607: LD_ADDR_VAR 0 3
34611: PUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_VAR 0 3
34621: IN
34622: ST_TO_ADDR
// end ;
34623: LD_VAR 0 3
34627: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34628: LD_INT 0
34630: PPUSH
// if not chassis or not weapon then
34631: LD_VAR 0 1
34635: NOT
34636: PUSH
34637: LD_VAR 0 2
34641: NOT
34642: OR
34643: IFFALSE 34647
// exit ;
34645: GO 35707
// case weapon of us_machine_gun :
34647: LD_VAR 0 2
34651: PUSH
34652: LD_INT 2
34654: DOUBLE
34655: EQUAL
34656: IFTRUE 34660
34658: GO 34690
34660: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34661: LD_ADDR_VAR 0 3
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 2
34671: PUSH
34672: LD_INT 3
34674: PUSH
34675: LD_INT 4
34677: PUSH
34678: LD_INT 5
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: ST_TO_ADDR
34688: GO 35691
34690: LD_INT 3
34692: DOUBLE
34693: EQUAL
34694: IFTRUE 34698
34696: GO 34728
34698: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34699: LD_ADDR_VAR 0 3
34703: PUSH
34704: LD_INT 1
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 4
34715: PUSH
34716: LD_INT 5
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: ST_TO_ADDR
34726: GO 35691
34728: LD_INT 11
34730: DOUBLE
34731: EQUAL
34732: IFTRUE 34736
34734: GO 34766
34736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34737: LD_ADDR_VAR 0 3
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 3
34750: PUSH
34751: LD_INT 4
34753: PUSH
34754: LD_INT 5
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: ST_TO_ADDR
34764: GO 35691
34766: LD_INT 4
34768: DOUBLE
34769: EQUAL
34770: IFTRUE 34774
34772: GO 34800
34774: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: LD_INT 4
34788: PUSH
34789: LD_INT 5
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: ST_TO_ADDR
34798: GO 35691
34800: LD_INT 5
34802: DOUBLE
34803: EQUAL
34804: IFTRUE 34808
34806: GO 34834
34808: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34809: LD_ADDR_VAR 0 3
34813: PUSH
34814: LD_INT 2
34816: PUSH
34817: LD_INT 3
34819: PUSH
34820: LD_INT 4
34822: PUSH
34823: LD_INT 5
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: ST_TO_ADDR
34832: GO 35691
34834: LD_INT 9
34836: DOUBLE
34837: EQUAL
34838: IFTRUE 34842
34840: GO 34868
34842: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34843: LD_ADDR_VAR 0 3
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: LD_INT 3
34853: PUSH
34854: LD_INT 4
34856: PUSH
34857: LD_INT 5
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: ST_TO_ADDR
34866: GO 35691
34868: LD_INT 7
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34876
34874: GO 34902
34876: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34877: LD_ADDR_VAR 0 3
34881: PUSH
34882: LD_INT 2
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 4
34890: PUSH
34891: LD_INT 5
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: ST_TO_ADDR
34900: GO 35691
34902: LD_INT 12
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34910
34908: GO 34936
34910: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34911: LD_ADDR_VAR 0 3
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: LD_INT 3
34921: PUSH
34922: LD_INT 4
34924: PUSH
34925: LD_INT 5
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: ST_TO_ADDR
34934: GO 35691
34936: LD_INT 13
34938: DOUBLE
34939: EQUAL
34940: IFTRUE 34944
34942: GO 34970
34944: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34945: LD_ADDR_VAR 0 3
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: LD_INT 3
34955: PUSH
34956: LD_INT 4
34958: PUSH
34959: LD_INT 5
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: ST_TO_ADDR
34968: GO 35691
34970: LD_INT 14
34972: DOUBLE
34973: EQUAL
34974: IFTRUE 34978
34976: GO 34996
34978: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34979: LD_ADDR_VAR 0 3
34983: PUSH
34984: LD_INT 4
34986: PUSH
34987: LD_INT 5
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: ST_TO_ADDR
34994: GO 35691
34996: LD_INT 6
34998: DOUBLE
34999: EQUAL
35000: IFTRUE 35004
35002: GO 35022
35004: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35005: LD_ADDR_VAR 0 3
35009: PUSH
35010: LD_INT 4
35012: PUSH
35013: LD_INT 5
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: ST_TO_ADDR
35020: GO 35691
35022: LD_INT 10
35024: DOUBLE
35025: EQUAL
35026: IFTRUE 35030
35028: GO 35048
35030: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35031: LD_ADDR_VAR 0 3
35035: PUSH
35036: LD_INT 4
35038: PUSH
35039: LD_INT 5
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: ST_TO_ADDR
35046: GO 35691
35048: LD_INT 22
35050: DOUBLE
35051: EQUAL
35052: IFTRUE 35056
35054: GO 35082
35056: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35057: LD_ADDR_VAR 0 3
35061: PUSH
35062: LD_INT 11
35064: PUSH
35065: LD_INT 12
35067: PUSH
35068: LD_INT 13
35070: PUSH
35071: LD_INT 14
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: ST_TO_ADDR
35080: GO 35691
35082: LD_INT 23
35084: DOUBLE
35085: EQUAL
35086: IFTRUE 35090
35088: GO 35116
35090: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_INT 11
35098: PUSH
35099: LD_INT 12
35101: PUSH
35102: LD_INT 13
35104: PUSH
35105: LD_INT 14
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: ST_TO_ADDR
35114: GO 35691
35116: LD_INT 24
35118: DOUBLE
35119: EQUAL
35120: IFTRUE 35124
35122: GO 35150
35124: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35125: LD_ADDR_VAR 0 3
35129: PUSH
35130: LD_INT 11
35132: PUSH
35133: LD_INT 12
35135: PUSH
35136: LD_INT 13
35138: PUSH
35139: LD_INT 14
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: ST_TO_ADDR
35148: GO 35691
35150: LD_INT 30
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35158
35156: GO 35184
35158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_INT 11
35166: PUSH
35167: LD_INT 12
35169: PUSH
35170: LD_INT 13
35172: PUSH
35173: LD_INT 14
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: ST_TO_ADDR
35182: GO 35691
35184: LD_INT 25
35186: DOUBLE
35187: EQUAL
35188: IFTRUE 35192
35190: GO 35210
35192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35193: LD_ADDR_VAR 0 3
35197: PUSH
35198: LD_INT 13
35200: PUSH
35201: LD_INT 14
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: ST_TO_ADDR
35208: GO 35691
35210: LD_INT 27
35212: DOUBLE
35213: EQUAL
35214: IFTRUE 35218
35216: GO 35236
35218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_INT 13
35226: PUSH
35227: LD_INT 14
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: ST_TO_ADDR
35234: GO 35691
35236: LD_INT 92
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35270
35244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35245: LD_ADDR_VAR 0 3
35249: PUSH
35250: LD_INT 11
35252: PUSH
35253: LD_INT 12
35255: PUSH
35256: LD_INT 13
35258: PUSH
35259: LD_INT 14
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: ST_TO_ADDR
35268: GO 35691
35270: LD_INT 28
35272: DOUBLE
35273: EQUAL
35274: IFTRUE 35278
35276: GO 35296
35278: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35279: LD_ADDR_VAR 0 3
35283: PUSH
35284: LD_INT 13
35286: PUSH
35287: LD_INT 14
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: ST_TO_ADDR
35294: GO 35691
35296: LD_INT 29
35298: DOUBLE
35299: EQUAL
35300: IFTRUE 35304
35302: GO 35322
35304: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_INT 13
35312: PUSH
35313: LD_INT 14
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: ST_TO_ADDR
35320: GO 35691
35322: LD_INT 31
35324: DOUBLE
35325: EQUAL
35326: IFTRUE 35330
35328: GO 35348
35330: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35331: LD_ADDR_VAR 0 3
35335: PUSH
35336: LD_INT 13
35338: PUSH
35339: LD_INT 14
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: ST_TO_ADDR
35346: GO 35691
35348: LD_INT 26
35350: DOUBLE
35351: EQUAL
35352: IFTRUE 35356
35354: GO 35374
35356: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35357: LD_ADDR_VAR 0 3
35361: PUSH
35362: LD_INT 13
35364: PUSH
35365: LD_INT 14
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: ST_TO_ADDR
35372: GO 35691
35374: LD_INT 42
35376: DOUBLE
35377: EQUAL
35378: IFTRUE 35382
35380: GO 35408
35382: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35383: LD_ADDR_VAR 0 3
35387: PUSH
35388: LD_INT 21
35390: PUSH
35391: LD_INT 22
35393: PUSH
35394: LD_INT 23
35396: PUSH
35397: LD_INT 24
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: ST_TO_ADDR
35406: GO 35691
35408: LD_INT 43
35410: DOUBLE
35411: EQUAL
35412: IFTRUE 35416
35414: GO 35442
35416: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35417: LD_ADDR_VAR 0 3
35421: PUSH
35422: LD_INT 21
35424: PUSH
35425: LD_INT 22
35427: PUSH
35428: LD_INT 23
35430: PUSH
35431: LD_INT 24
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: ST_TO_ADDR
35440: GO 35691
35442: LD_INT 44
35444: DOUBLE
35445: EQUAL
35446: IFTRUE 35450
35448: GO 35476
35450: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35451: LD_ADDR_VAR 0 3
35455: PUSH
35456: LD_INT 21
35458: PUSH
35459: LD_INT 22
35461: PUSH
35462: LD_INT 23
35464: PUSH
35465: LD_INT 24
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: ST_TO_ADDR
35474: GO 35691
35476: LD_INT 45
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35484
35482: GO 35510
35484: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35485: LD_ADDR_VAR 0 3
35489: PUSH
35490: LD_INT 21
35492: PUSH
35493: LD_INT 22
35495: PUSH
35496: LD_INT 23
35498: PUSH
35499: LD_INT 24
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: LIST
35506: LIST
35507: ST_TO_ADDR
35508: GO 35691
35510: LD_INT 49
35512: DOUBLE
35513: EQUAL
35514: IFTRUE 35518
35516: GO 35544
35518: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35519: LD_ADDR_VAR 0 3
35523: PUSH
35524: LD_INT 21
35526: PUSH
35527: LD_INT 22
35529: PUSH
35530: LD_INT 23
35532: PUSH
35533: LD_INT 24
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
35542: GO 35691
35544: LD_INT 51
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35552
35550: GO 35578
35552: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 21
35560: PUSH
35561: LD_INT 22
35563: PUSH
35564: LD_INT 23
35566: PUSH
35567: LD_INT 24
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
35576: GO 35691
35578: LD_INT 52
35580: DOUBLE
35581: EQUAL
35582: IFTRUE 35586
35584: GO 35612
35586: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 21
35594: PUSH
35595: LD_INT 22
35597: PUSH
35598: LD_INT 23
35600: PUSH
35601: LD_INT 24
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
35610: GO 35691
35612: LD_INT 53
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35620
35618: GO 35638
35620: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35621: LD_ADDR_VAR 0 3
35625: PUSH
35626: LD_INT 23
35628: PUSH
35629: LD_INT 24
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: ST_TO_ADDR
35636: GO 35691
35638: LD_INT 46
35640: DOUBLE
35641: EQUAL
35642: IFTRUE 35646
35644: GO 35664
35646: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35647: LD_ADDR_VAR 0 3
35651: PUSH
35652: LD_INT 23
35654: PUSH
35655: LD_INT 24
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: ST_TO_ADDR
35662: GO 35691
35664: LD_INT 47
35666: DOUBLE
35667: EQUAL
35668: IFTRUE 35672
35670: GO 35690
35672: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35673: LD_ADDR_VAR 0 3
35677: PUSH
35678: LD_INT 23
35680: PUSH
35681: LD_INT 24
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: ST_TO_ADDR
35688: GO 35691
35690: POP
// result := ( chassis in result ) ;
35691: LD_ADDR_VAR 0 3
35695: PUSH
35696: LD_VAR 0 1
35700: PUSH
35701: LD_VAR 0 3
35705: IN
35706: ST_TO_ADDR
// end ;
35707: LD_VAR 0 3
35711: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35712: LD_INT 0
35714: PPUSH
35715: PPUSH
35716: PPUSH
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
// result := array ;
35721: LD_ADDR_VAR 0 5
35725: PUSH
35726: LD_VAR 0 1
35730: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35731: LD_VAR 0 1
35735: NOT
35736: PUSH
35737: LD_VAR 0 2
35741: NOT
35742: OR
35743: PUSH
35744: LD_VAR 0 3
35748: NOT
35749: OR
35750: PUSH
35751: LD_VAR 0 2
35755: PUSH
35756: LD_VAR 0 1
35760: GREATER
35761: OR
35762: PUSH
35763: LD_VAR 0 3
35767: PUSH
35768: LD_VAR 0 1
35772: GREATER
35773: OR
35774: IFFALSE 35778
// exit ;
35776: GO 36074
// if direction then
35778: LD_VAR 0 4
35782: IFFALSE 35846
// begin d := 1 ;
35784: LD_ADDR_VAR 0 9
35788: PUSH
35789: LD_INT 1
35791: ST_TO_ADDR
// if i_from > i_to then
35792: LD_VAR 0 2
35796: PUSH
35797: LD_VAR 0 3
35801: GREATER
35802: IFFALSE 35828
// length := ( array - i_from ) + i_to else
35804: LD_ADDR_VAR 0 11
35808: PUSH
35809: LD_VAR 0 1
35813: PUSH
35814: LD_VAR 0 2
35818: MINUS
35819: PUSH
35820: LD_VAR 0 3
35824: PLUS
35825: ST_TO_ADDR
35826: GO 35844
// length := i_to - i_from ;
35828: LD_ADDR_VAR 0 11
35832: PUSH
35833: LD_VAR 0 3
35837: PUSH
35838: LD_VAR 0 2
35842: MINUS
35843: ST_TO_ADDR
// end else
35844: GO 35907
// begin d := - 1 ;
35846: LD_ADDR_VAR 0 9
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: ST_TO_ADDR
// if i_from > i_to then
35855: LD_VAR 0 2
35859: PUSH
35860: LD_VAR 0 3
35864: GREATER
35865: IFFALSE 35885
// length := i_from - i_to else
35867: LD_ADDR_VAR 0 11
35871: PUSH
35872: LD_VAR 0 2
35876: PUSH
35877: LD_VAR 0 3
35881: MINUS
35882: ST_TO_ADDR
35883: GO 35907
// length := ( array - i_to ) + i_from ;
35885: LD_ADDR_VAR 0 11
35889: PUSH
35890: LD_VAR 0 1
35894: PUSH
35895: LD_VAR 0 3
35899: MINUS
35900: PUSH
35901: LD_VAR 0 2
35905: PLUS
35906: ST_TO_ADDR
// end ; if not length then
35907: LD_VAR 0 11
35911: NOT
35912: IFFALSE 35916
// exit ;
35914: GO 36074
// tmp := array ;
35916: LD_ADDR_VAR 0 10
35920: PUSH
35921: LD_VAR 0 1
35925: ST_TO_ADDR
// for i = 1 to length do
35926: LD_ADDR_VAR 0 6
35930: PUSH
35931: DOUBLE
35932: LD_INT 1
35934: DEC
35935: ST_TO_ADDR
35936: LD_VAR 0 11
35940: PUSH
35941: FOR_TO
35942: IFFALSE 36062
// begin for j = 1 to array do
35944: LD_ADDR_VAR 0 7
35948: PUSH
35949: DOUBLE
35950: LD_INT 1
35952: DEC
35953: ST_TO_ADDR
35954: LD_VAR 0 1
35958: PUSH
35959: FOR_TO
35960: IFFALSE 36048
// begin k := j + d ;
35962: LD_ADDR_VAR 0 8
35966: PUSH
35967: LD_VAR 0 7
35971: PUSH
35972: LD_VAR 0 9
35976: PLUS
35977: ST_TO_ADDR
// if k > array then
35978: LD_VAR 0 8
35982: PUSH
35983: LD_VAR 0 1
35987: GREATER
35988: IFFALSE 35998
// k := 1 ;
35990: LD_ADDR_VAR 0 8
35994: PUSH
35995: LD_INT 1
35997: ST_TO_ADDR
// if not k then
35998: LD_VAR 0 8
36002: NOT
36003: IFFALSE 36015
// k := array ;
36005: LD_ADDR_VAR 0 8
36009: PUSH
36010: LD_VAR 0 1
36014: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36015: LD_ADDR_VAR 0 10
36019: PUSH
36020: LD_VAR 0 10
36024: PPUSH
36025: LD_VAR 0 8
36029: PPUSH
36030: LD_VAR 0 1
36034: PUSH
36035: LD_VAR 0 7
36039: ARRAY
36040: PPUSH
36041: CALL_OW 1
36045: ST_TO_ADDR
// end ;
36046: GO 35959
36048: POP
36049: POP
// array := tmp ;
36050: LD_ADDR_VAR 0 1
36054: PUSH
36055: LD_VAR 0 10
36059: ST_TO_ADDR
// end ;
36060: GO 35941
36062: POP
36063: POP
// result := array ;
36064: LD_ADDR_VAR 0 5
36068: PUSH
36069: LD_VAR 0 1
36073: ST_TO_ADDR
// end ;
36074: LD_VAR 0 5
36078: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36079: LD_INT 0
36081: PPUSH
36082: PPUSH
// result := 0 ;
36083: LD_ADDR_VAR 0 3
36087: PUSH
36088: LD_INT 0
36090: ST_TO_ADDR
// if not array or not value in array then
36091: LD_VAR 0 1
36095: NOT
36096: PUSH
36097: LD_VAR 0 2
36101: PUSH
36102: LD_VAR 0 1
36106: IN
36107: NOT
36108: OR
36109: IFFALSE 36113
// exit ;
36111: GO 36167
// for i = 1 to array do
36113: LD_ADDR_VAR 0 4
36117: PUSH
36118: DOUBLE
36119: LD_INT 1
36121: DEC
36122: ST_TO_ADDR
36123: LD_VAR 0 1
36127: PUSH
36128: FOR_TO
36129: IFFALSE 36165
// if value = array [ i ] then
36131: LD_VAR 0 2
36135: PUSH
36136: LD_VAR 0 1
36140: PUSH
36141: LD_VAR 0 4
36145: ARRAY
36146: EQUAL
36147: IFFALSE 36163
// begin result := i ;
36149: LD_ADDR_VAR 0 3
36153: PUSH
36154: LD_VAR 0 4
36158: ST_TO_ADDR
// exit ;
36159: POP
36160: POP
36161: GO 36167
// end ;
36163: GO 36128
36165: POP
36166: POP
// end ;
36167: LD_VAR 0 3
36171: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36172: LD_INT 0
36174: PPUSH
// vc_chassis := chassis ;
36175: LD_ADDR_OWVAR 37
36179: PUSH
36180: LD_VAR 0 1
36184: ST_TO_ADDR
// vc_engine := engine ;
36185: LD_ADDR_OWVAR 39
36189: PUSH
36190: LD_VAR 0 2
36194: ST_TO_ADDR
// vc_control := control ;
36195: LD_ADDR_OWVAR 38
36199: PUSH
36200: LD_VAR 0 3
36204: ST_TO_ADDR
// vc_weapon := weapon ;
36205: LD_ADDR_OWVAR 40
36209: PUSH
36210: LD_VAR 0 4
36214: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36215: LD_ADDR_OWVAR 41
36219: PUSH
36220: LD_VAR 0 5
36224: ST_TO_ADDR
// end ;
36225: LD_VAR 0 6
36229: RET
// export function WantPlant ( unit ) ; var task ; begin
36230: LD_INT 0
36232: PPUSH
36233: PPUSH
// result := false ;
36234: LD_ADDR_VAR 0 2
36238: PUSH
36239: LD_INT 0
36241: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36242: LD_ADDR_VAR 0 3
36246: PUSH
36247: LD_VAR 0 1
36251: PPUSH
36252: CALL_OW 437
36256: ST_TO_ADDR
// if task then
36257: LD_VAR 0 3
36261: IFFALSE 36289
// if task [ 1 ] [ 1 ] = p then
36263: LD_VAR 0 3
36267: PUSH
36268: LD_INT 1
36270: ARRAY
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: PUSH
36276: LD_STRING p
36278: EQUAL
36279: IFFALSE 36289
// result := true ;
36281: LD_ADDR_VAR 0 2
36285: PUSH
36286: LD_INT 1
36288: ST_TO_ADDR
// end ;
36289: LD_VAR 0 2
36293: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36294: LD_INT 0
36296: PPUSH
36297: PPUSH
36298: PPUSH
36299: PPUSH
// if pos < 1 then
36300: LD_VAR 0 2
36304: PUSH
36305: LD_INT 1
36307: LESS
36308: IFFALSE 36312
// exit ;
36310: GO 36615
// if pos = 1 then
36312: LD_VAR 0 2
36316: PUSH
36317: LD_INT 1
36319: EQUAL
36320: IFFALSE 36353
// result := Replace ( arr , pos [ 1 ] , value ) else
36322: LD_ADDR_VAR 0 4
36326: PUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_INT 1
36339: ARRAY
36340: PPUSH
36341: LD_VAR 0 3
36345: PPUSH
36346: CALL_OW 1
36350: ST_TO_ADDR
36351: GO 36615
// begin tmp := arr ;
36353: LD_ADDR_VAR 0 6
36357: PUSH
36358: LD_VAR 0 1
36362: ST_TO_ADDR
// s_arr := [ tmp ] ;
36363: LD_ADDR_VAR 0 7
36367: PUSH
36368: LD_VAR 0 6
36372: PUSH
36373: EMPTY
36374: LIST
36375: ST_TO_ADDR
// for i = 1 to pos - 1 do
36376: LD_ADDR_VAR 0 5
36380: PUSH
36381: DOUBLE
36382: LD_INT 1
36384: DEC
36385: ST_TO_ADDR
36386: LD_VAR 0 2
36390: PUSH
36391: LD_INT 1
36393: MINUS
36394: PUSH
36395: FOR_TO
36396: IFFALSE 36441
// begin tmp := tmp [ pos [ i ] ] ;
36398: LD_ADDR_VAR 0 6
36402: PUSH
36403: LD_VAR 0 6
36407: PUSH
36408: LD_VAR 0 2
36412: PUSH
36413: LD_VAR 0 5
36417: ARRAY
36418: ARRAY
36419: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36420: LD_ADDR_VAR 0 7
36424: PUSH
36425: LD_VAR 0 7
36429: PUSH
36430: LD_VAR 0 6
36434: PUSH
36435: EMPTY
36436: LIST
36437: ADD
36438: ST_TO_ADDR
// end ;
36439: GO 36395
36441: POP
36442: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36443: LD_ADDR_VAR 0 6
36447: PUSH
36448: LD_VAR 0 6
36452: PPUSH
36453: LD_VAR 0 2
36457: PUSH
36458: LD_VAR 0 2
36462: ARRAY
36463: PPUSH
36464: LD_VAR 0 3
36468: PPUSH
36469: CALL_OW 1
36473: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36474: LD_ADDR_VAR 0 7
36478: PUSH
36479: LD_VAR 0 7
36483: PPUSH
36484: LD_VAR 0 7
36488: PPUSH
36489: LD_VAR 0 6
36493: PPUSH
36494: CALL_OW 1
36498: ST_TO_ADDR
// for i = s_arr downto 2 do
36499: LD_ADDR_VAR 0 5
36503: PUSH
36504: DOUBLE
36505: LD_VAR 0 7
36509: INC
36510: ST_TO_ADDR
36511: LD_INT 2
36513: PUSH
36514: FOR_DOWNTO
36515: IFFALSE 36599
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36517: LD_ADDR_VAR 0 6
36521: PUSH
36522: LD_VAR 0 7
36526: PUSH
36527: LD_VAR 0 5
36531: PUSH
36532: LD_INT 1
36534: MINUS
36535: ARRAY
36536: PPUSH
36537: LD_VAR 0 2
36541: PUSH
36542: LD_VAR 0 5
36546: PUSH
36547: LD_INT 1
36549: MINUS
36550: ARRAY
36551: PPUSH
36552: LD_VAR 0 7
36556: PUSH
36557: LD_VAR 0 5
36561: ARRAY
36562: PPUSH
36563: CALL_OW 1
36567: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36568: LD_ADDR_VAR 0 7
36572: PUSH
36573: LD_VAR 0 7
36577: PPUSH
36578: LD_VAR 0 5
36582: PUSH
36583: LD_INT 1
36585: MINUS
36586: PPUSH
36587: LD_VAR 0 6
36591: PPUSH
36592: CALL_OW 1
36596: ST_TO_ADDR
// end ;
36597: GO 36514
36599: POP
36600: POP
// result := s_arr [ 1 ] ;
36601: LD_ADDR_VAR 0 4
36605: PUSH
36606: LD_VAR 0 7
36610: PUSH
36611: LD_INT 1
36613: ARRAY
36614: ST_TO_ADDR
// end ; end ;
36615: LD_VAR 0 4
36619: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36620: LD_INT 0
36622: PPUSH
36623: PPUSH
// if not list then
36624: LD_VAR 0 1
36628: NOT
36629: IFFALSE 36633
// exit ;
36631: GO 36724
// i := list [ pos1 ] ;
36633: LD_ADDR_VAR 0 5
36637: PUSH
36638: LD_VAR 0 1
36642: PUSH
36643: LD_VAR 0 2
36647: ARRAY
36648: ST_TO_ADDR
// if not i then
36649: LD_VAR 0 5
36653: NOT
36654: IFFALSE 36658
// exit ;
36656: GO 36724
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36658: LD_ADDR_VAR 0 1
36662: PUSH
36663: LD_VAR 0 1
36667: PPUSH
36668: LD_VAR 0 2
36672: PPUSH
36673: LD_VAR 0 1
36677: PUSH
36678: LD_VAR 0 3
36682: ARRAY
36683: PPUSH
36684: CALL_OW 1
36688: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36689: LD_ADDR_VAR 0 1
36693: PUSH
36694: LD_VAR 0 1
36698: PPUSH
36699: LD_VAR 0 3
36703: PPUSH
36704: LD_VAR 0 5
36708: PPUSH
36709: CALL_OW 1
36713: ST_TO_ADDR
// result := list ;
36714: LD_ADDR_VAR 0 4
36718: PUSH
36719: LD_VAR 0 1
36723: ST_TO_ADDR
// end ;
36724: LD_VAR 0 4
36728: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36729: LD_INT 0
36731: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36732: LD_ADDR_VAR 0 5
36736: PUSH
36737: LD_VAR 0 1
36741: PPUSH
36742: CALL_OW 250
36746: PPUSH
36747: LD_VAR 0 1
36751: PPUSH
36752: CALL_OW 251
36756: PPUSH
36757: LD_VAR 0 2
36761: PPUSH
36762: LD_VAR 0 3
36766: PPUSH
36767: LD_VAR 0 4
36771: PPUSH
36772: CALL 37150 0 5
36776: ST_TO_ADDR
// end ;
36777: LD_VAR 0 5
36781: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
36782: LD_INT 0
36784: PPUSH
36785: PPUSH
36786: PPUSH
36787: PPUSH
// if not list or not unit then
36788: LD_VAR 0 2
36792: NOT
36793: PUSH
36794: LD_VAR 0 1
36798: NOT
36799: OR
36800: IFFALSE 36804
// exit ;
36802: GO 37145
// result := [ ] ;
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: EMPTY
36810: ST_TO_ADDR
// for i in list do
36811: LD_ADDR_VAR 0 6
36815: PUSH
36816: LD_VAR 0 2
36820: PUSH
36821: FOR_IN
36822: IFFALSE 37040
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
36824: LD_ADDR_VAR 0 8
36828: PUSH
36829: LD_VAR 0 1
36833: PPUSH
36834: LD_VAR 0 6
36838: PUSH
36839: LD_INT 1
36841: ARRAY
36842: PPUSH
36843: LD_VAR 0 6
36847: PUSH
36848: LD_INT 2
36850: ARRAY
36851: PPUSH
36852: CALL_OW 297
36856: ST_TO_ADDR
// if not Count ( result ) then
36857: LD_VAR 0 5
36861: PPUSH
36862: CALL 33434 0 1
36866: NOT
36867: IFFALSE 36900
// begin result := Join ( result , [ i , tmp ] ) ;
36869: LD_ADDR_VAR 0 5
36873: PUSH
36874: LD_VAR 0 5
36878: PPUSH
36879: LD_VAR 0 6
36883: PUSH
36884: LD_VAR 0 8
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL 69034 0 2
36897: ST_TO_ADDR
// continue ;
36898: GO 36821
// end ; if result [ result ] [ 2 ] <= tmp then
36900: LD_VAR 0 5
36904: PUSH
36905: LD_VAR 0 5
36909: ARRAY
36910: PUSH
36911: LD_INT 2
36913: ARRAY
36914: PUSH
36915: LD_VAR 0 8
36919: LESSEQUAL
36920: IFFALSE 36953
// result := Join ( result , [ i , tmp ] ) else
36922: LD_ADDR_VAR 0 5
36926: PUSH
36927: LD_VAR 0 5
36931: PPUSH
36932: LD_VAR 0 6
36936: PUSH
36937: LD_VAR 0 8
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PPUSH
36946: CALL 69034 0 2
36950: ST_TO_ADDR
36951: GO 37038
// begin for j := 1 to Count ( result ) do
36953: LD_ADDR_VAR 0 7
36957: PUSH
36958: DOUBLE
36959: LD_INT 1
36961: DEC
36962: ST_TO_ADDR
36963: LD_VAR 0 5
36967: PPUSH
36968: CALL 33434 0 1
36972: PUSH
36973: FOR_TO
36974: IFFALSE 37036
// begin if tmp < result [ j ] [ 2 ] then
36976: LD_VAR 0 8
36980: PUSH
36981: LD_VAR 0 5
36985: PUSH
36986: LD_VAR 0 7
36990: ARRAY
36991: PUSH
36992: LD_INT 2
36994: ARRAY
36995: LESS
36996: IFFALSE 37034
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36998: LD_ADDR_VAR 0 5
37002: PUSH
37003: LD_VAR 0 5
37007: PPUSH
37008: LD_VAR 0 7
37012: PPUSH
37013: LD_VAR 0 6
37017: PUSH
37018: LD_VAR 0 8
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PPUSH
37027: CALL_OW 2
37031: ST_TO_ADDR
// break ;
37032: GO 37036
// end ; end ;
37034: GO 36973
37036: POP
37037: POP
// end ; end ;
37038: GO 36821
37040: POP
37041: POP
// if result and not asc then
37042: LD_VAR 0 5
37046: PUSH
37047: LD_VAR 0 3
37051: NOT
37052: AND
37053: IFFALSE 37070
// result := ReverseArray ( result ) ;
37055: LD_ADDR_VAR 0 5
37059: PUSH
37060: LD_VAR 0 5
37064: PPUSH
37065: CALL 64310 0 1
37069: ST_TO_ADDR
// tmp := [ ] ;
37070: LD_ADDR_VAR 0 8
37074: PUSH
37075: EMPTY
37076: ST_TO_ADDR
// if mode then
37077: LD_VAR 0 4
37081: IFFALSE 37145
// begin for i := 1 to result do
37083: LD_ADDR_VAR 0 6
37087: PUSH
37088: DOUBLE
37089: LD_INT 1
37091: DEC
37092: ST_TO_ADDR
37093: LD_VAR 0 5
37097: PUSH
37098: FOR_TO
37099: IFFALSE 37133
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
37101: LD_ADDR_VAR 0 8
37105: PUSH
37106: LD_VAR 0 8
37110: PPUSH
37111: LD_VAR 0 5
37115: PUSH
37116: LD_VAR 0 6
37120: ARRAY
37121: PUSH
37122: LD_INT 1
37124: ARRAY
37125: PPUSH
37126: CALL 69034 0 2
37130: ST_TO_ADDR
37131: GO 37098
37133: POP
37134: POP
// result := tmp ;
37135: LD_ADDR_VAR 0 5
37139: PUSH
37140: LD_VAR 0 8
37144: ST_TO_ADDR
// end ; end ;
37145: LD_VAR 0 5
37149: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37150: LD_INT 0
37152: PPUSH
37153: PPUSH
37154: PPUSH
37155: PPUSH
// if not list then
37156: LD_VAR 0 3
37160: NOT
37161: IFFALSE 37165
// exit ;
37163: GO 37553
// result := [ ] ;
37165: LD_ADDR_VAR 0 6
37169: PUSH
37170: EMPTY
37171: ST_TO_ADDR
// for i in list do
37172: LD_ADDR_VAR 0 7
37176: PUSH
37177: LD_VAR 0 3
37181: PUSH
37182: FOR_IN
37183: IFFALSE 37385
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37185: LD_ADDR_VAR 0 9
37189: PUSH
37190: LD_VAR 0 7
37194: PPUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: LD_VAR 0 2
37204: PPUSH
37205: CALL_OW 297
37209: ST_TO_ADDR
// if not result then
37210: LD_VAR 0 6
37214: NOT
37215: IFFALSE 37241
// result := [ [ i , tmp ] ] else
37217: LD_ADDR_VAR 0 6
37221: PUSH
37222: LD_VAR 0 7
37226: PUSH
37227: LD_VAR 0 9
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: EMPTY
37237: LIST
37238: ST_TO_ADDR
37239: GO 37383
// begin if result [ result ] [ 2 ] < tmp then
37241: LD_VAR 0 6
37245: PUSH
37246: LD_VAR 0 6
37250: ARRAY
37251: PUSH
37252: LD_INT 2
37254: ARRAY
37255: PUSH
37256: LD_VAR 0 9
37260: LESS
37261: IFFALSE 37303
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37263: LD_ADDR_VAR 0 6
37267: PUSH
37268: LD_VAR 0 6
37272: PPUSH
37273: LD_VAR 0 6
37277: PUSH
37278: LD_INT 1
37280: PLUS
37281: PPUSH
37282: LD_VAR 0 7
37286: PUSH
37287: LD_VAR 0 9
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PPUSH
37296: CALL_OW 2
37300: ST_TO_ADDR
37301: GO 37383
// for j = 1 to result do
37303: LD_ADDR_VAR 0 8
37307: PUSH
37308: DOUBLE
37309: LD_INT 1
37311: DEC
37312: ST_TO_ADDR
37313: LD_VAR 0 6
37317: PUSH
37318: FOR_TO
37319: IFFALSE 37381
// begin if tmp < result [ j ] [ 2 ] then
37321: LD_VAR 0 9
37325: PUSH
37326: LD_VAR 0 6
37330: PUSH
37331: LD_VAR 0 8
37335: ARRAY
37336: PUSH
37337: LD_INT 2
37339: ARRAY
37340: LESS
37341: IFFALSE 37379
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37343: LD_ADDR_VAR 0 6
37347: PUSH
37348: LD_VAR 0 6
37352: PPUSH
37353: LD_VAR 0 8
37357: PPUSH
37358: LD_VAR 0 7
37362: PUSH
37363: LD_VAR 0 9
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PPUSH
37372: CALL_OW 2
37376: ST_TO_ADDR
// break ;
37377: GO 37381
// end ; end ;
37379: GO 37318
37381: POP
37382: POP
// end ; end ;
37383: GO 37182
37385: POP
37386: POP
// if result and not asc then
37387: LD_VAR 0 6
37391: PUSH
37392: LD_VAR 0 4
37396: NOT
37397: AND
37398: IFFALSE 37473
// begin tmp := result ;
37400: LD_ADDR_VAR 0 9
37404: PUSH
37405: LD_VAR 0 6
37409: ST_TO_ADDR
// for i = tmp downto 1 do
37410: LD_ADDR_VAR 0 7
37414: PUSH
37415: DOUBLE
37416: LD_VAR 0 9
37420: INC
37421: ST_TO_ADDR
37422: LD_INT 1
37424: PUSH
37425: FOR_DOWNTO
37426: IFFALSE 37471
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37428: LD_ADDR_VAR 0 6
37432: PUSH
37433: LD_VAR 0 6
37437: PPUSH
37438: LD_VAR 0 9
37442: PUSH
37443: LD_VAR 0 7
37447: MINUS
37448: PUSH
37449: LD_INT 1
37451: PLUS
37452: PPUSH
37453: LD_VAR 0 9
37457: PUSH
37458: LD_VAR 0 7
37462: ARRAY
37463: PPUSH
37464: CALL_OW 1
37468: ST_TO_ADDR
37469: GO 37425
37471: POP
37472: POP
// end ; tmp := [ ] ;
37473: LD_ADDR_VAR 0 9
37477: PUSH
37478: EMPTY
37479: ST_TO_ADDR
// if mode then
37480: LD_VAR 0 5
37484: IFFALSE 37553
// begin for i = 1 to result do
37486: LD_ADDR_VAR 0 7
37490: PUSH
37491: DOUBLE
37492: LD_INT 1
37494: DEC
37495: ST_TO_ADDR
37496: LD_VAR 0 6
37500: PUSH
37501: FOR_TO
37502: IFFALSE 37541
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37504: LD_ADDR_VAR 0 9
37508: PUSH
37509: LD_VAR 0 9
37513: PPUSH
37514: LD_VAR 0 7
37518: PPUSH
37519: LD_VAR 0 6
37523: PUSH
37524: LD_VAR 0 7
37528: ARRAY
37529: PUSH
37530: LD_INT 1
37532: ARRAY
37533: PPUSH
37534: CALL_OW 1
37538: ST_TO_ADDR
37539: GO 37501
37541: POP
37542: POP
// result := tmp ;
37543: LD_ADDR_VAR 0 6
37547: PUSH
37548: LD_VAR 0 9
37552: ST_TO_ADDR
// end ; end ;
37553: LD_VAR 0 6
37557: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37558: LD_INT 0
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37566: LD_ADDR_VAR 0 5
37570: PUSH
37571: LD_INT 0
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: EMPTY
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: ST_TO_ADDR
// if not x or not y then
37588: LD_VAR 0 2
37592: NOT
37593: PUSH
37594: LD_VAR 0 3
37598: NOT
37599: OR
37600: IFFALSE 37604
// exit ;
37602: GO 39254
// if not range then
37604: LD_VAR 0 4
37608: NOT
37609: IFFALSE 37619
// range := 10 ;
37611: LD_ADDR_VAR 0 4
37615: PUSH
37616: LD_INT 10
37618: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37619: LD_ADDR_VAR 0 8
37623: PUSH
37624: LD_INT 81
37626: PUSH
37627: LD_VAR 0 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 92
37638: PUSH
37639: LD_VAR 0 2
37643: PUSH
37644: LD_VAR 0 3
37648: PUSH
37649: LD_VAR 0 4
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 3
37662: PUSH
37663: LD_INT 21
37665: PUSH
37666: LD_INT 3
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: LIST
37681: PPUSH
37682: CALL_OW 69
37686: ST_TO_ADDR
// if not tmp then
37687: LD_VAR 0 8
37691: NOT
37692: IFFALSE 37696
// exit ;
37694: GO 39254
// for i in tmp do
37696: LD_ADDR_VAR 0 6
37700: PUSH
37701: LD_VAR 0 8
37705: PUSH
37706: FOR_IN
37707: IFFALSE 39229
// begin points := [ 0 , 0 , 0 ] ;
37709: LD_ADDR_VAR 0 9
37713: PUSH
37714: LD_INT 0
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: LD_INT 0
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// bpoints := 1 ;
37728: LD_ADDR_VAR 0 10
37732: PUSH
37733: LD_INT 1
37735: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37736: LD_VAR 0 6
37740: PPUSH
37741: CALL_OW 247
37745: PUSH
37746: LD_INT 1
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 38332
37754: POP
// begin if GetClass ( i ) = 1 then
37755: LD_VAR 0 6
37759: PPUSH
37760: CALL_OW 257
37764: PUSH
37765: LD_INT 1
37767: EQUAL
37768: IFFALSE 37789
// points := [ 10 , 5 , 3 ] ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_INT 10
37777: PUSH
37778: LD_INT 5
37780: PUSH
37781: LD_INT 3
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: LIST
37788: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37789: LD_VAR 0 6
37793: PPUSH
37794: CALL_OW 257
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 3
37804: PUSH
37805: LD_INT 4
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: LIST
37812: IN
37813: IFFALSE 37834
// points := [ 3 , 2 , 1 ] ;
37815: LD_ADDR_VAR 0 9
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: LD_INT 2
37825: PUSH
37826: LD_INT 1
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: LIST
37833: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37834: LD_VAR 0 6
37838: PPUSH
37839: CALL_OW 257
37843: PUSH
37844: LD_INT 5
37846: EQUAL
37847: IFFALSE 37868
// points := [ 130 , 5 , 2 ] ;
37849: LD_ADDR_VAR 0 9
37853: PUSH
37854: LD_INT 130
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37868: LD_VAR 0 6
37872: PPUSH
37873: CALL_OW 257
37877: PUSH
37878: LD_INT 8
37880: EQUAL
37881: IFFALSE 37902
// points := [ 35 , 35 , 30 ] ;
37883: LD_ADDR_VAR 0 9
37887: PUSH
37888: LD_INT 35
37890: PUSH
37891: LD_INT 35
37893: PUSH
37894: LD_INT 30
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37902: LD_VAR 0 6
37906: PPUSH
37907: CALL_OW 257
37911: PUSH
37912: LD_INT 9
37914: EQUAL
37915: IFFALSE 37936
// points := [ 20 , 55 , 40 ] ;
37917: LD_ADDR_VAR 0 9
37921: PUSH
37922: LD_INT 20
37924: PUSH
37925: LD_INT 55
37927: PUSH
37928: LD_INT 40
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37936: LD_VAR 0 6
37940: PPUSH
37941: CALL_OW 257
37945: PUSH
37946: LD_INT 12
37948: PUSH
37949: LD_INT 16
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: IN
37956: IFFALSE 37977
// points := [ 5 , 3 , 2 ] ;
37958: LD_ADDR_VAR 0 9
37962: PUSH
37963: LD_INT 5
37965: PUSH
37966: LD_INT 3
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37977: LD_VAR 0 6
37981: PPUSH
37982: CALL_OW 257
37986: PUSH
37987: LD_INT 17
37989: EQUAL
37990: IFFALSE 38011
// points := [ 100 , 50 , 75 ] ;
37992: LD_ADDR_VAR 0 9
37996: PUSH
37997: LD_INT 100
37999: PUSH
38000: LD_INT 50
38002: PUSH
38003: LD_INT 75
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38011: LD_VAR 0 6
38015: PPUSH
38016: CALL_OW 257
38020: PUSH
38021: LD_INT 15
38023: EQUAL
38024: IFFALSE 38045
// points := [ 10 , 5 , 3 ] ;
38026: LD_ADDR_VAR 0 9
38030: PUSH
38031: LD_INT 10
38033: PUSH
38034: LD_INT 5
38036: PUSH
38037: LD_INT 3
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38045: LD_VAR 0 6
38049: PPUSH
38050: CALL_OW 257
38054: PUSH
38055: LD_INT 14
38057: EQUAL
38058: IFFALSE 38079
// points := [ 10 , 0 , 0 ] ;
38060: LD_ADDR_VAR 0 9
38064: PUSH
38065: LD_INT 10
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38079: LD_VAR 0 6
38083: PPUSH
38084: CALL_OW 257
38088: PUSH
38089: LD_INT 11
38091: EQUAL
38092: IFFALSE 38113
// points := [ 30 , 10 , 5 ] ;
38094: LD_ADDR_VAR 0 9
38098: PUSH
38099: LD_INT 30
38101: PUSH
38102: LD_INT 10
38104: PUSH
38105: LD_INT 5
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38113: LD_VAR 0 1
38117: PPUSH
38118: LD_INT 5
38120: PPUSH
38121: CALL_OW 321
38125: PUSH
38126: LD_INT 2
38128: EQUAL
38129: IFFALSE 38146
// bpoints := bpoints * 1.8 ;
38131: LD_ADDR_VAR 0 10
38135: PUSH
38136: LD_VAR 0 10
38140: PUSH
38141: LD_REAL  1.80000000000000E+0000
38144: MUL
38145: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38146: LD_VAR 0 6
38150: PPUSH
38151: CALL_OW 257
38155: PUSH
38156: LD_INT 1
38158: PUSH
38159: LD_INT 2
38161: PUSH
38162: LD_INT 3
38164: PUSH
38165: LD_INT 4
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: IN
38174: PUSH
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_INT 51
38182: PPUSH
38183: CALL_OW 321
38187: PUSH
38188: LD_INT 2
38190: EQUAL
38191: AND
38192: IFFALSE 38209
// bpoints := bpoints * 1.2 ;
38194: LD_ADDR_VAR 0 10
38198: PUSH
38199: LD_VAR 0 10
38203: PUSH
38204: LD_REAL  1.20000000000000E+0000
38207: MUL
38208: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38209: LD_VAR 0 6
38213: PPUSH
38214: CALL_OW 257
38218: PUSH
38219: LD_INT 5
38221: PUSH
38222: LD_INT 7
38224: PUSH
38225: LD_INT 9
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: IN
38233: PUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: LD_INT 52
38241: PPUSH
38242: CALL_OW 321
38246: PUSH
38247: LD_INT 2
38249: EQUAL
38250: AND
38251: IFFALSE 38268
// bpoints := bpoints * 1.5 ;
38253: LD_ADDR_VAR 0 10
38257: PUSH
38258: LD_VAR 0 10
38262: PUSH
38263: LD_REAL  1.50000000000000E+0000
38266: MUL
38267: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38268: LD_VAR 0 1
38272: PPUSH
38273: LD_INT 66
38275: PPUSH
38276: CALL_OW 321
38280: PUSH
38281: LD_INT 2
38283: EQUAL
38284: IFFALSE 38301
// bpoints := bpoints * 1.1 ;
38286: LD_ADDR_VAR 0 10
38290: PUSH
38291: LD_VAR 0 10
38295: PUSH
38296: LD_REAL  1.10000000000000E+0000
38299: MUL
38300: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38301: LD_ADDR_VAR 0 10
38305: PUSH
38306: LD_VAR 0 10
38310: PUSH
38311: LD_VAR 0 6
38315: PPUSH
38316: LD_INT 1
38318: PPUSH
38319: CALL_OW 259
38323: PUSH
38324: LD_REAL  1.15000000000000E+0000
38327: MUL
38328: MUL
38329: ST_TO_ADDR
// end ; unit_vehicle :
38330: GO 39158
38332: LD_INT 2
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38340
38338: GO 39146
38340: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38341: LD_VAR 0 6
38345: PPUSH
38346: CALL_OW 264
38350: PUSH
38351: LD_INT 2
38353: PUSH
38354: LD_INT 42
38356: PUSH
38357: LD_INT 24
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: IN
38365: IFFALSE 38386
// points := [ 25 , 5 , 3 ] ;
38367: LD_ADDR_VAR 0 9
38371: PUSH
38372: LD_INT 25
38374: PUSH
38375: LD_INT 5
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38386: LD_VAR 0 6
38390: PPUSH
38391: CALL_OW 264
38395: PUSH
38396: LD_INT 4
38398: PUSH
38399: LD_INT 43
38401: PUSH
38402: LD_INT 25
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: LIST
38409: IN
38410: IFFALSE 38431
// points := [ 40 , 15 , 5 ] ;
38412: LD_ADDR_VAR 0 9
38416: PUSH
38417: LD_INT 40
38419: PUSH
38420: LD_INT 15
38422: PUSH
38423: LD_INT 5
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: LIST
38430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38431: LD_VAR 0 6
38435: PPUSH
38436: CALL_OW 264
38440: PUSH
38441: LD_INT 3
38443: PUSH
38444: LD_INT 23
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: IN
38451: IFFALSE 38472
// points := [ 7 , 25 , 8 ] ;
38453: LD_ADDR_VAR 0 9
38457: PUSH
38458: LD_INT 7
38460: PUSH
38461: LD_INT 25
38463: PUSH
38464: LD_INT 8
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38472: LD_VAR 0 6
38476: PPUSH
38477: CALL_OW 264
38481: PUSH
38482: LD_INT 5
38484: PUSH
38485: LD_INT 27
38487: PUSH
38488: LD_INT 44
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: IN
38496: IFFALSE 38517
// points := [ 14 , 50 , 16 ] ;
38498: LD_ADDR_VAR 0 9
38502: PUSH
38503: LD_INT 14
38505: PUSH
38506: LD_INT 50
38508: PUSH
38509: LD_INT 16
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38517: LD_VAR 0 6
38521: PPUSH
38522: CALL_OW 264
38526: PUSH
38527: LD_INT 6
38529: PUSH
38530: LD_INT 46
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: IN
38537: IFFALSE 38558
// points := [ 32 , 120 , 70 ] ;
38539: LD_ADDR_VAR 0 9
38543: PUSH
38544: LD_INT 32
38546: PUSH
38547: LD_INT 120
38549: PUSH
38550: LD_INT 70
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38558: LD_VAR 0 6
38562: PPUSH
38563: CALL_OW 264
38567: PUSH
38568: LD_INT 7
38570: PUSH
38571: LD_INT 28
38573: PUSH
38574: LD_INT 45
38576: PUSH
38577: LD_INT 92
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: IN
38586: IFFALSE 38607
// points := [ 35 , 20 , 45 ] ;
38588: LD_ADDR_VAR 0 9
38592: PUSH
38593: LD_INT 35
38595: PUSH
38596: LD_INT 20
38598: PUSH
38599: LD_INT 45
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: LIST
38606: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38607: LD_VAR 0 6
38611: PPUSH
38612: CALL_OW 264
38616: PUSH
38617: LD_INT 47
38619: PUSH
38620: EMPTY
38621: LIST
38622: IN
38623: IFFALSE 38644
// points := [ 67 , 45 , 75 ] ;
38625: LD_ADDR_VAR 0 9
38629: PUSH
38630: LD_INT 67
38632: PUSH
38633: LD_INT 45
38635: PUSH
38636: LD_INT 75
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38644: LD_VAR 0 6
38648: PPUSH
38649: CALL_OW 264
38653: PUSH
38654: LD_INT 26
38656: PUSH
38657: EMPTY
38658: LIST
38659: IN
38660: IFFALSE 38681
// points := [ 120 , 30 , 80 ] ;
38662: LD_ADDR_VAR 0 9
38666: PUSH
38667: LD_INT 120
38669: PUSH
38670: LD_INT 30
38672: PUSH
38673: LD_INT 80
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: LIST
38680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38681: LD_VAR 0 6
38685: PPUSH
38686: CALL_OW 264
38690: PUSH
38691: LD_INT 22
38693: PUSH
38694: EMPTY
38695: LIST
38696: IN
38697: IFFALSE 38718
// points := [ 40 , 1 , 1 ] ;
38699: LD_ADDR_VAR 0 9
38703: PUSH
38704: LD_INT 40
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: LIST
38717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38718: LD_VAR 0 6
38722: PPUSH
38723: CALL_OW 264
38727: PUSH
38728: LD_INT 29
38730: PUSH
38731: EMPTY
38732: LIST
38733: IN
38734: IFFALSE 38755
// points := [ 70 , 200 , 400 ] ;
38736: LD_ADDR_VAR 0 9
38740: PUSH
38741: LD_INT 70
38743: PUSH
38744: LD_INT 200
38746: PUSH
38747: LD_INT 400
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38755: LD_VAR 0 6
38759: PPUSH
38760: CALL_OW 264
38764: PUSH
38765: LD_INT 14
38767: PUSH
38768: LD_INT 53
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: IN
38775: IFFALSE 38796
// points := [ 40 , 10 , 20 ] ;
38777: LD_ADDR_VAR 0 9
38781: PUSH
38782: LD_INT 40
38784: PUSH
38785: LD_INT 10
38787: PUSH
38788: LD_INT 20
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: LIST
38795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38796: LD_VAR 0 6
38800: PPUSH
38801: CALL_OW 264
38805: PUSH
38806: LD_INT 9
38808: PUSH
38809: EMPTY
38810: LIST
38811: IN
38812: IFFALSE 38833
// points := [ 5 , 70 , 20 ] ;
38814: LD_ADDR_VAR 0 9
38818: PUSH
38819: LD_INT 5
38821: PUSH
38822: LD_INT 70
38824: PUSH
38825: LD_INT 20
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38833: LD_VAR 0 6
38837: PPUSH
38838: CALL_OW 264
38842: PUSH
38843: LD_INT 10
38845: PUSH
38846: EMPTY
38847: LIST
38848: IN
38849: IFFALSE 38870
// points := [ 35 , 110 , 70 ] ;
38851: LD_ADDR_VAR 0 9
38855: PUSH
38856: LD_INT 35
38858: PUSH
38859: LD_INT 110
38861: PUSH
38862: LD_INT 70
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38870: LD_VAR 0 6
38874: PPUSH
38875: CALL_OW 265
38879: PUSH
38880: LD_INT 25
38882: EQUAL
38883: IFFALSE 38904
// points := [ 80 , 65 , 100 ] ;
38885: LD_ADDR_VAR 0 9
38889: PUSH
38890: LD_INT 80
38892: PUSH
38893: LD_INT 65
38895: PUSH
38896: LD_INT 100
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38904: LD_VAR 0 6
38908: PPUSH
38909: CALL_OW 263
38913: PUSH
38914: LD_INT 1
38916: EQUAL
38917: IFFALSE 38952
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38919: LD_ADDR_VAR 0 10
38923: PUSH
38924: LD_VAR 0 10
38928: PUSH
38929: LD_VAR 0 6
38933: PPUSH
38934: CALL_OW 311
38938: PPUSH
38939: LD_INT 3
38941: PPUSH
38942: CALL_OW 259
38946: PUSH
38947: LD_INT 4
38949: MUL
38950: MUL
38951: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38952: LD_VAR 0 6
38956: PPUSH
38957: CALL_OW 263
38961: PUSH
38962: LD_INT 2
38964: EQUAL
38965: IFFALSE 39016
// begin j := IsControledBy ( i ) ;
38967: LD_ADDR_VAR 0 7
38971: PUSH
38972: LD_VAR 0 6
38976: PPUSH
38977: CALL_OW 312
38981: ST_TO_ADDR
// if j then
38982: LD_VAR 0 7
38986: IFFALSE 39016
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38988: LD_ADDR_VAR 0 10
38992: PUSH
38993: LD_VAR 0 10
38997: PUSH
38998: LD_VAR 0 7
39002: PPUSH
39003: LD_INT 3
39005: PPUSH
39006: CALL_OW 259
39010: PUSH
39011: LD_INT 3
39013: MUL
39014: MUL
39015: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39016: LD_VAR 0 6
39020: PPUSH
39021: CALL_OW 264
39025: PUSH
39026: LD_INT 5
39028: PUSH
39029: LD_INT 6
39031: PUSH
39032: LD_INT 46
39034: PUSH
39035: LD_INT 44
39037: PUSH
39038: LD_INT 47
39040: PUSH
39041: LD_INT 45
39043: PUSH
39044: LD_INT 28
39046: PUSH
39047: LD_INT 7
39049: PUSH
39050: LD_INT 27
39052: PUSH
39053: LD_INT 29
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: IN
39068: PUSH
39069: LD_VAR 0 1
39073: PPUSH
39074: LD_INT 52
39076: PPUSH
39077: CALL_OW 321
39081: PUSH
39082: LD_INT 2
39084: EQUAL
39085: AND
39086: IFFALSE 39103
// bpoints := bpoints * 1.2 ;
39088: LD_ADDR_VAR 0 10
39092: PUSH
39093: LD_VAR 0 10
39097: PUSH
39098: LD_REAL  1.20000000000000E+0000
39101: MUL
39102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39103: LD_VAR 0 6
39107: PPUSH
39108: CALL_OW 264
39112: PUSH
39113: LD_INT 6
39115: PUSH
39116: LD_INT 46
39118: PUSH
39119: LD_INT 47
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: IN
39127: IFFALSE 39144
// bpoints := bpoints * 1.2 ;
39129: LD_ADDR_VAR 0 10
39133: PUSH
39134: LD_VAR 0 10
39138: PUSH
39139: LD_REAL  1.20000000000000E+0000
39142: MUL
39143: ST_TO_ADDR
// end ; unit_building :
39144: GO 39158
39146: LD_INT 3
39148: DOUBLE
39149: EQUAL
39150: IFTRUE 39154
39152: GO 39157
39154: POP
// ; end ;
39155: GO 39158
39157: POP
// for j = 1 to 3 do
39158: LD_ADDR_VAR 0 7
39162: PUSH
39163: DOUBLE
39164: LD_INT 1
39166: DEC
39167: ST_TO_ADDR
39168: LD_INT 3
39170: PUSH
39171: FOR_TO
39172: IFFALSE 39225
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39174: LD_ADDR_VAR 0 5
39178: PUSH
39179: LD_VAR 0 5
39183: PPUSH
39184: LD_VAR 0 7
39188: PPUSH
39189: LD_VAR 0 5
39193: PUSH
39194: LD_VAR 0 7
39198: ARRAY
39199: PUSH
39200: LD_VAR 0 9
39204: PUSH
39205: LD_VAR 0 7
39209: ARRAY
39210: PUSH
39211: LD_VAR 0 10
39215: MUL
39216: PLUS
39217: PPUSH
39218: CALL_OW 1
39222: ST_TO_ADDR
39223: GO 39171
39225: POP
39226: POP
// end ;
39227: GO 37706
39229: POP
39230: POP
// result := Replace ( result , 4 , tmp ) ;
39231: LD_ADDR_VAR 0 5
39235: PUSH
39236: LD_VAR 0 5
39240: PPUSH
39241: LD_INT 4
39243: PPUSH
39244: LD_VAR 0 8
39248: PPUSH
39249: CALL_OW 1
39253: ST_TO_ADDR
// end ;
39254: LD_VAR 0 5
39258: RET
// export function DangerAtRange ( unit , range ) ; begin
39259: LD_INT 0
39261: PPUSH
// if not unit then
39262: LD_VAR 0 1
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39316
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39271: LD_ADDR_VAR 0 3
39275: PUSH
39276: LD_VAR 0 1
39280: PPUSH
39281: CALL_OW 255
39285: PPUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 250
39295: PPUSH
39296: LD_VAR 0 1
39300: PPUSH
39301: CALL_OW 251
39305: PPUSH
39306: LD_VAR 0 2
39310: PPUSH
39311: CALL 37558 0 4
39315: ST_TO_ADDR
// end ;
39316: LD_VAR 0 3
39320: RET
// export function DangerInArea ( side , area ) ; begin
39321: LD_INT 0
39323: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39324: LD_ADDR_VAR 0 3
39328: PUSH
39329: LD_VAR 0 2
39333: PPUSH
39334: LD_INT 81
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PPUSH
39346: CALL_OW 70
39350: ST_TO_ADDR
// end ;
39351: LD_VAR 0 3
39355: RET
// export function IsExtension ( b ) ; begin
39356: LD_INT 0
39358: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39359: LD_ADDR_VAR 0 2
39363: PUSH
39364: LD_VAR 0 1
39368: PUSH
39369: LD_INT 23
39371: PUSH
39372: LD_INT 20
39374: PUSH
39375: LD_INT 22
39377: PUSH
39378: LD_INT 17
39380: PUSH
39381: LD_INT 24
39383: PUSH
39384: LD_INT 21
39386: PUSH
39387: LD_INT 19
39389: PUSH
39390: LD_INT 16
39392: PUSH
39393: LD_INT 25
39395: PUSH
39396: LD_INT 18
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: IN
39411: ST_TO_ADDR
// end ;
39412: LD_VAR 0 2
39416: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39417: LD_INT 0
39419: PPUSH
39420: PPUSH
39421: PPUSH
// result := [ ] ;
39422: LD_ADDR_VAR 0 4
39426: PUSH
39427: EMPTY
39428: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39429: LD_ADDR_VAR 0 5
39433: PUSH
39434: LD_VAR 0 2
39438: PPUSH
39439: LD_INT 21
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PPUSH
39449: CALL_OW 70
39453: ST_TO_ADDR
// if not tmp then
39454: LD_VAR 0 5
39458: NOT
39459: IFFALSE 39463
// exit ;
39461: GO 39527
// if checkLink then
39463: LD_VAR 0 3
39467: IFFALSE 39517
// begin for i in tmp do
39469: LD_ADDR_VAR 0 6
39473: PUSH
39474: LD_VAR 0 5
39478: PUSH
39479: FOR_IN
39480: IFFALSE 39515
// if GetBase ( i ) <> base then
39482: LD_VAR 0 6
39486: PPUSH
39487: CALL_OW 274
39491: PUSH
39492: LD_VAR 0 1
39496: NONEQUAL
39497: IFFALSE 39513
// ComLinkToBase ( base , i ) ;
39499: LD_VAR 0 1
39503: PPUSH
39504: LD_VAR 0 6
39508: PPUSH
39509: CALL_OW 169
39513: GO 39479
39515: POP
39516: POP
// end ; result := tmp ;
39517: LD_ADDR_VAR 0 4
39521: PUSH
39522: LD_VAR 0 5
39526: ST_TO_ADDR
// end ;
39527: LD_VAR 0 4
39531: RET
// export function ComComplete ( units , b ) ; var i ; begin
39532: LD_INT 0
39534: PPUSH
39535: PPUSH
// if not units then
39536: LD_VAR 0 1
39540: NOT
39541: IFFALSE 39545
// exit ;
39543: GO 39635
// for i in units do
39545: LD_ADDR_VAR 0 4
39549: PUSH
39550: LD_VAR 0 1
39554: PUSH
39555: FOR_IN
39556: IFFALSE 39633
// if BuildingStatus ( b ) = bs_build then
39558: LD_VAR 0 2
39562: PPUSH
39563: CALL_OW 461
39567: PUSH
39568: LD_INT 1
39570: EQUAL
39571: IFFALSE 39631
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39573: LD_VAR 0 4
39577: PPUSH
39578: LD_STRING h
39580: PUSH
39581: LD_VAR 0 2
39585: PPUSH
39586: CALL_OW 250
39590: PUSH
39591: LD_VAR 0 2
39595: PPUSH
39596: CALL_OW 251
39600: PUSH
39601: LD_VAR 0 2
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 0
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: PUSH
39624: EMPTY
39625: LIST
39626: PPUSH
39627: CALL_OW 446
39631: GO 39555
39633: POP
39634: POP
// end ;
39635: LD_VAR 0 3
39639: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39640: LD_INT 0
39642: PPUSH
39643: PPUSH
39644: PPUSH
39645: PPUSH
39646: PPUSH
39647: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39648: LD_VAR 0 1
39652: NOT
39653: PUSH
39654: LD_VAR 0 1
39658: PPUSH
39659: CALL_OW 263
39663: PUSH
39664: LD_INT 2
39666: NONEQUAL
39667: OR
39668: IFFALSE 39672
// exit ;
39670: GO 39988
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39672: LD_ADDR_VAR 0 6
39676: PUSH
39677: LD_INT 22
39679: PUSH
39680: LD_VAR 0 1
39684: PPUSH
39685: CALL_OW 255
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 2
39696: PUSH
39697: LD_INT 30
39699: PUSH
39700: LD_INT 36
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 34
39709: PUSH
39710: LD_INT 31
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: LIST
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PPUSH
39726: CALL_OW 69
39730: ST_TO_ADDR
// if not tmp then
39731: LD_VAR 0 6
39735: NOT
39736: IFFALSE 39740
// exit ;
39738: GO 39988
// result := [ ] ;
39740: LD_ADDR_VAR 0 2
39744: PUSH
39745: EMPTY
39746: ST_TO_ADDR
// for i in tmp do
39747: LD_ADDR_VAR 0 3
39751: PUSH
39752: LD_VAR 0 6
39756: PUSH
39757: FOR_IN
39758: IFFALSE 39829
// begin t := UnitsInside ( i ) ;
39760: LD_ADDR_VAR 0 4
39764: PUSH
39765: LD_VAR 0 3
39769: PPUSH
39770: CALL_OW 313
39774: ST_TO_ADDR
// if t then
39775: LD_VAR 0 4
39779: IFFALSE 39827
// for j in t do
39781: LD_ADDR_VAR 0 7
39785: PUSH
39786: LD_VAR 0 4
39790: PUSH
39791: FOR_IN
39792: IFFALSE 39825
// result := Replace ( result , result + 1 , j ) ;
39794: LD_ADDR_VAR 0 2
39798: PUSH
39799: LD_VAR 0 2
39803: PPUSH
39804: LD_VAR 0 2
39808: PUSH
39809: LD_INT 1
39811: PLUS
39812: PPUSH
39813: LD_VAR 0 7
39817: PPUSH
39818: CALL_OW 1
39822: ST_TO_ADDR
39823: GO 39791
39825: POP
39826: POP
// end ;
39827: GO 39757
39829: POP
39830: POP
// if not result then
39831: LD_VAR 0 2
39835: NOT
39836: IFFALSE 39840
// exit ;
39838: GO 39988
// mech := result [ 1 ] ;
39840: LD_ADDR_VAR 0 5
39844: PUSH
39845: LD_VAR 0 2
39849: PUSH
39850: LD_INT 1
39852: ARRAY
39853: ST_TO_ADDR
// if result > 1 then
39854: LD_VAR 0 2
39858: PUSH
39859: LD_INT 1
39861: GREATER
39862: IFFALSE 39974
// begin for i = 2 to result do
39864: LD_ADDR_VAR 0 3
39868: PUSH
39869: DOUBLE
39870: LD_INT 2
39872: DEC
39873: ST_TO_ADDR
39874: LD_VAR 0 2
39878: PUSH
39879: FOR_TO
39880: IFFALSE 39972
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39882: LD_ADDR_VAR 0 4
39886: PUSH
39887: LD_VAR 0 2
39891: PUSH
39892: LD_VAR 0 3
39896: ARRAY
39897: PPUSH
39898: LD_INT 3
39900: PPUSH
39901: CALL_OW 259
39905: PUSH
39906: LD_VAR 0 2
39910: PUSH
39911: LD_VAR 0 3
39915: ARRAY
39916: PPUSH
39917: CALL_OW 432
39921: MINUS
39922: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39923: LD_VAR 0 4
39927: PUSH
39928: LD_VAR 0 5
39932: PPUSH
39933: LD_INT 3
39935: PPUSH
39936: CALL_OW 259
39940: PUSH
39941: LD_VAR 0 5
39945: PPUSH
39946: CALL_OW 432
39950: MINUS
39951: GREATEREQUAL
39952: IFFALSE 39970
// mech := result [ i ] ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: LD_VAR 0 2
39963: PUSH
39964: LD_VAR 0 3
39968: ARRAY
39969: ST_TO_ADDR
// end ;
39970: GO 39879
39972: POP
39973: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39974: LD_VAR 0 1
39978: PPUSH
39979: LD_VAR 0 5
39983: PPUSH
39984: CALL_OW 135
// end ;
39988: LD_VAR 0 2
39992: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39993: LD_INT 0
39995: PPUSH
39996: PPUSH
39997: PPUSH
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
// result := [ ] ;
40008: LD_ADDR_VAR 0 7
40012: PUSH
40013: EMPTY
40014: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40015: LD_VAR 0 1
40019: PPUSH
40020: CALL_OW 266
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: IN
40035: NOT
40036: IFFALSE 40040
// exit ;
40038: GO 41674
// if name then
40040: LD_VAR 0 3
40044: IFFALSE 40060
// SetBName ( base_dep , name ) ;
40046: LD_VAR 0 1
40050: PPUSH
40051: LD_VAR 0 3
40055: PPUSH
40056: CALL_OW 500
// base := GetBase ( base_dep ) ;
40060: LD_ADDR_VAR 0 15
40064: PUSH
40065: LD_VAR 0 1
40069: PPUSH
40070: CALL_OW 274
40074: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40075: LD_ADDR_VAR 0 16
40079: PUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 255
40089: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40090: LD_ADDR_VAR 0 17
40094: PUSH
40095: LD_VAR 0 1
40099: PPUSH
40100: CALL_OW 248
40104: ST_TO_ADDR
// if sources then
40105: LD_VAR 0 5
40109: IFFALSE 40156
// for i = 1 to 3 do
40111: LD_ADDR_VAR 0 8
40115: PUSH
40116: DOUBLE
40117: LD_INT 1
40119: DEC
40120: ST_TO_ADDR
40121: LD_INT 3
40123: PUSH
40124: FOR_TO
40125: IFFALSE 40154
// AddResourceType ( base , i , sources [ i ] ) ;
40127: LD_VAR 0 15
40131: PPUSH
40132: LD_VAR 0 8
40136: PPUSH
40137: LD_VAR 0 5
40141: PUSH
40142: LD_VAR 0 8
40146: ARRAY
40147: PPUSH
40148: CALL_OW 276
40152: GO 40124
40154: POP
40155: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40156: LD_ADDR_VAR 0 18
40160: PUSH
40161: LD_VAR 0 15
40165: PPUSH
40166: LD_VAR 0 2
40170: PPUSH
40171: LD_INT 1
40173: PPUSH
40174: CALL 39417 0 3
40178: ST_TO_ADDR
// InitHc ;
40179: CALL_OW 19
// InitUc ;
40183: CALL_OW 18
// uc_side := side ;
40187: LD_ADDR_OWVAR 20
40191: PUSH
40192: LD_VAR 0 16
40196: ST_TO_ADDR
// uc_nation := nation ;
40197: LD_ADDR_OWVAR 21
40201: PUSH
40202: LD_VAR 0 17
40206: ST_TO_ADDR
// if buildings then
40207: LD_VAR 0 18
40211: IFFALSE 41533
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40213: LD_ADDR_VAR 0 19
40217: PUSH
40218: LD_VAR 0 18
40222: PPUSH
40223: LD_INT 2
40225: PUSH
40226: LD_INT 30
40228: PUSH
40229: LD_INT 29
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 30
40238: PUSH
40239: LD_INT 30
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: LIST
40250: PPUSH
40251: CALL_OW 72
40255: ST_TO_ADDR
// if tmp then
40256: LD_VAR 0 19
40260: IFFALSE 40308
// for i in tmp do
40262: LD_ADDR_VAR 0 8
40266: PUSH
40267: LD_VAR 0 19
40271: PUSH
40272: FOR_IN
40273: IFFALSE 40306
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40275: LD_VAR 0 8
40279: PPUSH
40280: CALL_OW 250
40284: PPUSH
40285: LD_VAR 0 8
40289: PPUSH
40290: CALL_OW 251
40294: PPUSH
40295: LD_VAR 0 16
40299: PPUSH
40300: CALL_OW 441
40304: GO 40272
40306: POP
40307: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40308: LD_VAR 0 18
40312: PPUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 30
40318: PUSH
40319: LD_INT 32
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 30
40328: PUSH
40329: LD_INT 33
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: LIST
40340: PPUSH
40341: CALL_OW 72
40345: IFFALSE 40433
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40347: LD_ADDR_VAR 0 8
40351: PUSH
40352: LD_VAR 0 18
40356: PPUSH
40357: LD_INT 2
40359: PUSH
40360: LD_INT 30
40362: PUSH
40363: LD_INT 32
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 30
40372: PUSH
40373: LD_INT 33
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: LIST
40384: PPUSH
40385: CALL_OW 72
40389: PUSH
40390: FOR_IN
40391: IFFALSE 40431
// begin if not GetBWeapon ( i ) then
40393: LD_VAR 0 8
40397: PPUSH
40398: CALL_OW 269
40402: NOT
40403: IFFALSE 40429
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40405: LD_VAR 0 8
40409: PPUSH
40410: LD_VAR 0 8
40414: PPUSH
40415: LD_VAR 0 2
40419: PPUSH
40420: CALL 41679 0 2
40424: PPUSH
40425: CALL_OW 431
// end ;
40429: GO 40390
40431: POP
40432: POP
// end ; for i = 1 to personel do
40433: LD_ADDR_VAR 0 8
40437: PUSH
40438: DOUBLE
40439: LD_INT 1
40441: DEC
40442: ST_TO_ADDR
40443: LD_VAR 0 6
40447: PUSH
40448: FOR_TO
40449: IFFALSE 41513
// begin if i > 4 then
40451: LD_VAR 0 8
40455: PUSH
40456: LD_INT 4
40458: GREATER
40459: IFFALSE 40463
// break ;
40461: GO 41513
// case i of 1 :
40463: LD_VAR 0 8
40467: PUSH
40468: LD_INT 1
40470: DOUBLE
40471: EQUAL
40472: IFTRUE 40476
40474: GO 40556
40476: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40477: LD_ADDR_VAR 0 12
40481: PUSH
40482: LD_VAR 0 18
40486: PPUSH
40487: LD_INT 22
40489: PUSH
40490: LD_VAR 0 16
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 58
40501: PUSH
40502: EMPTY
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 30
40510: PUSH
40511: LD_INT 32
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 30
40520: PUSH
40521: LD_INT 4
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 30
40530: PUSH
40531: LD_INT 5
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: PPUSH
40549: CALL_OW 72
40553: ST_TO_ADDR
40554: GO 40778
40556: LD_INT 2
40558: DOUBLE
40559: EQUAL
40560: IFTRUE 40564
40562: GO 40626
40564: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40565: LD_ADDR_VAR 0 12
40569: PUSH
40570: LD_VAR 0 18
40574: PPUSH
40575: LD_INT 22
40577: PUSH
40578: LD_VAR 0 16
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: LD_INT 30
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 30
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: LIST
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PPUSH
40619: CALL_OW 72
40623: ST_TO_ADDR
40624: GO 40778
40626: LD_INT 3
40628: DOUBLE
40629: EQUAL
40630: IFTRUE 40634
40632: GO 40696
40634: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40635: LD_ADDR_VAR 0 12
40639: PUSH
40640: LD_VAR 0 18
40644: PPUSH
40645: LD_INT 22
40647: PUSH
40648: LD_VAR 0 16
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: LD_INT 2
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 30
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: LIST
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PPUSH
40689: CALL_OW 72
40693: ST_TO_ADDR
40694: GO 40778
40696: LD_INT 4
40698: DOUBLE
40699: EQUAL
40700: IFTRUE 40704
40702: GO 40777
40704: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40705: LD_ADDR_VAR 0 12
40709: PUSH
40710: LD_VAR 0 18
40714: PPUSH
40715: LD_INT 22
40717: PUSH
40718: LD_VAR 0 16
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: LD_INT 30
40732: PUSH
40733: LD_INT 6
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 30
40742: PUSH
40743: LD_INT 7
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 30
40752: PUSH
40753: LD_INT 8
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PPUSH
40770: CALL_OW 72
40774: ST_TO_ADDR
40775: GO 40778
40777: POP
// if i = 1 then
40778: LD_VAR 0 8
40782: PUSH
40783: LD_INT 1
40785: EQUAL
40786: IFFALSE 40897
// begin tmp := [ ] ;
40788: LD_ADDR_VAR 0 19
40792: PUSH
40793: EMPTY
40794: ST_TO_ADDR
// for j in f do
40795: LD_ADDR_VAR 0 9
40799: PUSH
40800: LD_VAR 0 12
40804: PUSH
40805: FOR_IN
40806: IFFALSE 40879
// if GetBType ( j ) = b_bunker then
40808: LD_VAR 0 9
40812: PPUSH
40813: CALL_OW 266
40817: PUSH
40818: LD_INT 32
40820: EQUAL
40821: IFFALSE 40848
// tmp := Insert ( tmp , 1 , j ) else
40823: LD_ADDR_VAR 0 19
40827: PUSH
40828: LD_VAR 0 19
40832: PPUSH
40833: LD_INT 1
40835: PPUSH
40836: LD_VAR 0 9
40840: PPUSH
40841: CALL_OW 2
40845: ST_TO_ADDR
40846: GO 40877
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40848: LD_ADDR_VAR 0 19
40852: PUSH
40853: LD_VAR 0 19
40857: PPUSH
40858: LD_VAR 0 19
40862: PUSH
40863: LD_INT 1
40865: PLUS
40866: PPUSH
40867: LD_VAR 0 9
40871: PPUSH
40872: CALL_OW 2
40876: ST_TO_ADDR
40877: GO 40805
40879: POP
40880: POP
// if tmp then
40881: LD_VAR 0 19
40885: IFFALSE 40897
// f := tmp ;
40887: LD_ADDR_VAR 0 12
40891: PUSH
40892: LD_VAR 0 19
40896: ST_TO_ADDR
// end ; x := personel [ i ] ;
40897: LD_ADDR_VAR 0 13
40901: PUSH
40902: LD_VAR 0 6
40906: PUSH
40907: LD_VAR 0 8
40911: ARRAY
40912: ST_TO_ADDR
// if x = - 1 then
40913: LD_VAR 0 13
40917: PUSH
40918: LD_INT 1
40920: NEG
40921: EQUAL
40922: IFFALSE 41131
// begin for j in f do
40924: LD_ADDR_VAR 0 9
40928: PUSH
40929: LD_VAR 0 12
40933: PUSH
40934: FOR_IN
40935: IFFALSE 41127
// repeat InitHc ;
40937: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40941: LD_VAR 0 9
40945: PPUSH
40946: CALL_OW 266
40950: PUSH
40951: LD_INT 5
40953: EQUAL
40954: IFFALSE 41024
// begin if UnitsInside ( j ) < 3 then
40956: LD_VAR 0 9
40960: PPUSH
40961: CALL_OW 313
40965: PUSH
40966: LD_INT 3
40968: LESS
40969: IFFALSE 41005
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40971: LD_INT 0
40973: PPUSH
40974: LD_INT 5
40976: PUSH
40977: LD_INT 8
40979: PUSH
40980: LD_INT 9
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: PUSH
40988: LD_VAR 0 17
40992: ARRAY
40993: PPUSH
40994: LD_VAR 0 4
40998: PPUSH
40999: CALL_OW 380
41003: GO 41022
// PrepareHuman ( false , i , skill ) ;
41005: LD_INT 0
41007: PPUSH
41008: LD_VAR 0 8
41012: PPUSH
41013: LD_VAR 0 4
41017: PPUSH
41018: CALL_OW 380
// end else
41022: GO 41041
// PrepareHuman ( false , i , skill ) ;
41024: LD_INT 0
41026: PPUSH
41027: LD_VAR 0 8
41031: PPUSH
41032: LD_VAR 0 4
41036: PPUSH
41037: CALL_OW 380
// un := CreateHuman ;
41041: LD_ADDR_VAR 0 14
41045: PUSH
41046: CALL_OW 44
41050: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41051: LD_ADDR_VAR 0 7
41055: PUSH
41056: LD_VAR 0 7
41060: PPUSH
41061: LD_INT 1
41063: PPUSH
41064: LD_VAR 0 14
41068: PPUSH
41069: CALL_OW 2
41073: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41074: LD_VAR 0 14
41078: PPUSH
41079: LD_VAR 0 9
41083: PPUSH
41084: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41088: LD_VAR 0 9
41092: PPUSH
41093: CALL_OW 313
41097: PUSH
41098: LD_INT 6
41100: EQUAL
41101: PUSH
41102: LD_VAR 0 9
41106: PPUSH
41107: CALL_OW 266
41111: PUSH
41112: LD_INT 32
41114: PUSH
41115: LD_INT 31
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: IN
41122: OR
41123: IFFALSE 40937
41125: GO 40934
41127: POP
41128: POP
// end else
41129: GO 41511
// for j = 1 to x do
41131: LD_ADDR_VAR 0 9
41135: PUSH
41136: DOUBLE
41137: LD_INT 1
41139: DEC
41140: ST_TO_ADDR
41141: LD_VAR 0 13
41145: PUSH
41146: FOR_TO
41147: IFFALSE 41509
// begin InitHc ;
41149: CALL_OW 19
// if not f then
41153: LD_VAR 0 12
41157: NOT
41158: IFFALSE 41247
// begin PrepareHuman ( false , i , skill ) ;
41160: LD_INT 0
41162: PPUSH
41163: LD_VAR 0 8
41167: PPUSH
41168: LD_VAR 0 4
41172: PPUSH
41173: CALL_OW 380
// un := CreateHuman ;
41177: LD_ADDR_VAR 0 14
41181: PUSH
41182: CALL_OW 44
41186: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41187: LD_ADDR_VAR 0 7
41191: PUSH
41192: LD_VAR 0 7
41196: PPUSH
41197: LD_INT 1
41199: PPUSH
41200: LD_VAR 0 14
41204: PPUSH
41205: CALL_OW 2
41209: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41210: LD_VAR 0 14
41214: PPUSH
41215: LD_VAR 0 1
41219: PPUSH
41220: CALL_OW 250
41224: PPUSH
41225: LD_VAR 0 1
41229: PPUSH
41230: CALL_OW 251
41234: PPUSH
41235: LD_INT 10
41237: PPUSH
41238: LD_INT 0
41240: PPUSH
41241: CALL_OW 50
// continue ;
41245: GO 41146
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41247: LD_VAR 0 12
41251: PUSH
41252: LD_INT 1
41254: ARRAY
41255: PPUSH
41256: CALL_OW 313
41260: PUSH
41261: LD_VAR 0 12
41265: PUSH
41266: LD_INT 1
41268: ARRAY
41269: PPUSH
41270: CALL_OW 266
41274: PUSH
41275: LD_INT 32
41277: PUSH
41278: LD_INT 31
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: IN
41285: AND
41286: PUSH
41287: LD_VAR 0 12
41291: PUSH
41292: LD_INT 1
41294: ARRAY
41295: PPUSH
41296: CALL_OW 313
41300: PUSH
41301: LD_INT 6
41303: EQUAL
41304: OR
41305: IFFALSE 41325
// f := Delete ( f , 1 ) ;
41307: LD_ADDR_VAR 0 12
41311: PUSH
41312: LD_VAR 0 12
41316: PPUSH
41317: LD_INT 1
41319: PPUSH
41320: CALL_OW 3
41324: ST_TO_ADDR
// if not f then
41325: LD_VAR 0 12
41329: NOT
41330: IFFALSE 41348
// begin x := x + 2 ;
41332: LD_ADDR_VAR 0 13
41336: PUSH
41337: LD_VAR 0 13
41341: PUSH
41342: LD_INT 2
41344: PLUS
41345: ST_TO_ADDR
// continue ;
41346: GO 41146
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41348: LD_VAR 0 12
41352: PUSH
41353: LD_INT 1
41355: ARRAY
41356: PPUSH
41357: CALL_OW 266
41361: PUSH
41362: LD_INT 5
41364: EQUAL
41365: IFFALSE 41439
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41367: LD_VAR 0 12
41371: PUSH
41372: LD_INT 1
41374: ARRAY
41375: PPUSH
41376: CALL_OW 313
41380: PUSH
41381: LD_INT 3
41383: LESS
41384: IFFALSE 41420
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41386: LD_INT 0
41388: PPUSH
41389: LD_INT 5
41391: PUSH
41392: LD_INT 8
41394: PUSH
41395: LD_INT 9
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: LIST
41402: PUSH
41403: LD_VAR 0 17
41407: ARRAY
41408: PPUSH
41409: LD_VAR 0 4
41413: PPUSH
41414: CALL_OW 380
41418: GO 41437
// PrepareHuman ( false , i , skill ) ;
41420: LD_INT 0
41422: PPUSH
41423: LD_VAR 0 8
41427: PPUSH
41428: LD_VAR 0 4
41432: PPUSH
41433: CALL_OW 380
// end else
41437: GO 41456
// PrepareHuman ( false , i , skill ) ;
41439: LD_INT 0
41441: PPUSH
41442: LD_VAR 0 8
41446: PPUSH
41447: LD_VAR 0 4
41451: PPUSH
41452: CALL_OW 380
// un := CreateHuman ;
41456: LD_ADDR_VAR 0 14
41460: PUSH
41461: CALL_OW 44
41465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41466: LD_ADDR_VAR 0 7
41470: PUSH
41471: LD_VAR 0 7
41475: PPUSH
41476: LD_INT 1
41478: PPUSH
41479: LD_VAR 0 14
41483: PPUSH
41484: CALL_OW 2
41488: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41489: LD_VAR 0 14
41493: PPUSH
41494: LD_VAR 0 12
41498: PUSH
41499: LD_INT 1
41501: ARRAY
41502: PPUSH
41503: CALL_OW 52
// end ;
41507: GO 41146
41509: POP
41510: POP
// end ;
41511: GO 40448
41513: POP
41514: POP
// result := result ^ buildings ;
41515: LD_ADDR_VAR 0 7
41519: PUSH
41520: LD_VAR 0 7
41524: PUSH
41525: LD_VAR 0 18
41529: ADD
41530: ST_TO_ADDR
// end else
41531: GO 41674
// begin for i = 1 to personel do
41533: LD_ADDR_VAR 0 8
41537: PUSH
41538: DOUBLE
41539: LD_INT 1
41541: DEC
41542: ST_TO_ADDR
41543: LD_VAR 0 6
41547: PUSH
41548: FOR_TO
41549: IFFALSE 41672
// begin if i > 4 then
41551: LD_VAR 0 8
41555: PUSH
41556: LD_INT 4
41558: GREATER
41559: IFFALSE 41563
// break ;
41561: GO 41672
// x := personel [ i ] ;
41563: LD_ADDR_VAR 0 13
41567: PUSH
41568: LD_VAR 0 6
41572: PUSH
41573: LD_VAR 0 8
41577: ARRAY
41578: ST_TO_ADDR
// if x = - 1 then
41579: LD_VAR 0 13
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: EQUAL
41588: IFFALSE 41592
// continue ;
41590: GO 41548
// PrepareHuman ( false , i , skill ) ;
41592: LD_INT 0
41594: PPUSH
41595: LD_VAR 0 8
41599: PPUSH
41600: LD_VAR 0 4
41604: PPUSH
41605: CALL_OW 380
// un := CreateHuman ;
41609: LD_ADDR_VAR 0 14
41613: PUSH
41614: CALL_OW 44
41618: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41619: LD_VAR 0 14
41623: PPUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: CALL_OW 250
41633: PPUSH
41634: LD_VAR 0 1
41638: PPUSH
41639: CALL_OW 251
41643: PPUSH
41644: LD_INT 10
41646: PPUSH
41647: LD_INT 0
41649: PPUSH
41650: CALL_OW 50
// result := result ^ un ;
41654: LD_ADDR_VAR 0 7
41658: PUSH
41659: LD_VAR 0 7
41663: PUSH
41664: LD_VAR 0 14
41668: ADD
41669: ST_TO_ADDR
// end ;
41670: GO 41548
41672: POP
41673: POP
// end ; end ;
41674: LD_VAR 0 7
41678: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41679: LD_INT 0
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
41690: PPUSH
41691: PPUSH
41692: PPUSH
41693: PPUSH
41694: PPUSH
41695: PPUSH
41696: PPUSH
// result := false ;
41697: LD_ADDR_VAR 0 3
41701: PUSH
41702: LD_INT 0
41704: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41705: LD_VAR 0 1
41709: NOT
41710: PUSH
41711: LD_VAR 0 1
41715: PPUSH
41716: CALL_OW 266
41720: PUSH
41721: LD_INT 32
41723: PUSH
41724: LD_INT 33
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: IN
41731: NOT
41732: OR
41733: IFFALSE 41737
// exit ;
41735: GO 42846
// nat := GetNation ( tower ) ;
41737: LD_ADDR_VAR 0 12
41741: PUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 248
41751: ST_TO_ADDR
// side := GetSide ( tower ) ;
41752: LD_ADDR_VAR 0 16
41756: PUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: CALL_OW 255
41766: ST_TO_ADDR
// x := GetX ( tower ) ;
41767: LD_ADDR_VAR 0 10
41771: PUSH
41772: LD_VAR 0 1
41776: PPUSH
41777: CALL_OW 250
41781: ST_TO_ADDR
// y := GetY ( tower ) ;
41782: LD_ADDR_VAR 0 11
41786: PUSH
41787: LD_VAR 0 1
41791: PPUSH
41792: CALL_OW 251
41796: ST_TO_ADDR
// if not x or not y then
41797: LD_VAR 0 10
41801: NOT
41802: PUSH
41803: LD_VAR 0 11
41807: NOT
41808: OR
41809: IFFALSE 41813
// exit ;
41811: GO 42846
// weapon := 0 ;
41813: LD_ADDR_VAR 0 18
41817: PUSH
41818: LD_INT 0
41820: ST_TO_ADDR
// fac_list := [ ] ;
41821: LD_ADDR_VAR 0 17
41825: PUSH
41826: EMPTY
41827: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41828: LD_ADDR_VAR 0 6
41832: PUSH
41833: LD_VAR 0 1
41837: PPUSH
41838: CALL_OW 274
41842: PPUSH
41843: LD_VAR 0 2
41847: PPUSH
41848: LD_INT 0
41850: PPUSH
41851: CALL 39417 0 3
41855: PPUSH
41856: LD_INT 30
41858: PUSH
41859: LD_INT 3
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PPUSH
41866: CALL_OW 72
41870: ST_TO_ADDR
// if not factories then
41871: LD_VAR 0 6
41875: NOT
41876: IFFALSE 41880
// exit ;
41878: GO 42846
// for i in factories do
41880: LD_ADDR_VAR 0 8
41884: PUSH
41885: LD_VAR 0 6
41889: PUSH
41890: FOR_IN
41891: IFFALSE 41916
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41893: LD_ADDR_VAR 0 17
41897: PUSH
41898: LD_VAR 0 17
41902: PUSH
41903: LD_VAR 0 8
41907: PPUSH
41908: CALL_OW 478
41912: UNION
41913: ST_TO_ADDR
41914: GO 41890
41916: POP
41917: POP
// if not fac_list then
41918: LD_VAR 0 17
41922: NOT
41923: IFFALSE 41927
// exit ;
41925: GO 42846
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41927: LD_ADDR_VAR 0 5
41931: PUSH
41932: LD_INT 4
41934: PUSH
41935: LD_INT 5
41937: PUSH
41938: LD_INT 9
41940: PUSH
41941: LD_INT 10
41943: PUSH
41944: LD_INT 6
41946: PUSH
41947: LD_INT 7
41949: PUSH
41950: LD_INT 11
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 27
41964: PUSH
41965: LD_INT 28
41967: PUSH
41968: LD_INT 26
41970: PUSH
41971: LD_INT 30
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 43
41982: PUSH
41983: LD_INT 44
41985: PUSH
41986: LD_INT 46
41988: PUSH
41989: LD_INT 45
41991: PUSH
41992: LD_INT 47
41994: PUSH
41995: LD_INT 49
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: LIST
42010: PUSH
42011: LD_VAR 0 12
42015: ARRAY
42016: ST_TO_ADDR
// list := list isect fac_list ;
42017: LD_ADDR_VAR 0 5
42021: PUSH
42022: LD_VAR 0 5
42026: PUSH
42027: LD_VAR 0 17
42031: ISECT
42032: ST_TO_ADDR
// if not list then
42033: LD_VAR 0 5
42037: NOT
42038: IFFALSE 42042
// exit ;
42040: GO 42846
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42042: LD_VAR 0 12
42046: PUSH
42047: LD_INT 3
42049: EQUAL
42050: PUSH
42051: LD_INT 49
42053: PUSH
42054: LD_VAR 0 5
42058: IN
42059: AND
42060: PUSH
42061: LD_INT 31
42063: PPUSH
42064: LD_VAR 0 16
42068: PPUSH
42069: CALL_OW 321
42073: PUSH
42074: LD_INT 2
42076: EQUAL
42077: AND
42078: IFFALSE 42138
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42080: LD_INT 22
42082: PUSH
42083: LD_VAR 0 16
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 35
42094: PUSH
42095: LD_INT 49
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 91
42104: PUSH
42105: LD_VAR 0 1
42109: PUSH
42110: LD_INT 10
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: PPUSH
42123: CALL_OW 69
42127: NOT
42128: IFFALSE 42138
// weapon := ru_time_lapser ;
42130: LD_ADDR_VAR 0 18
42134: PUSH
42135: LD_INT 49
42137: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42138: LD_VAR 0 12
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 2
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: IN
42153: PUSH
42154: LD_INT 11
42156: PUSH
42157: LD_VAR 0 5
42161: IN
42162: PUSH
42163: LD_INT 30
42165: PUSH
42166: LD_VAR 0 5
42170: IN
42171: OR
42172: AND
42173: PUSH
42174: LD_INT 6
42176: PPUSH
42177: LD_VAR 0 16
42181: PPUSH
42182: CALL_OW 321
42186: PUSH
42187: LD_INT 2
42189: EQUAL
42190: AND
42191: IFFALSE 42356
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42193: LD_INT 22
42195: PUSH
42196: LD_VAR 0 16
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: LD_INT 35
42210: PUSH
42211: LD_INT 11
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 35
42220: PUSH
42221: LD_INT 30
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 91
42235: PUSH
42236: LD_VAR 0 1
42240: PUSH
42241: LD_INT 18
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: PPUSH
42254: CALL_OW 69
42258: NOT
42259: PUSH
42260: LD_INT 22
42262: PUSH
42263: LD_VAR 0 16
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: PUSH
42275: LD_INT 30
42277: PUSH
42278: LD_INT 32
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 30
42287: PUSH
42288: LD_INT 33
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 91
42302: PUSH
42303: LD_VAR 0 1
42307: PUSH
42308: LD_INT 12
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: PUSH
42321: EMPTY
42322: LIST
42323: PPUSH
42324: CALL_OW 69
42328: PUSH
42329: LD_INT 2
42331: GREATER
42332: AND
42333: IFFALSE 42356
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42335: LD_ADDR_VAR 0 18
42339: PUSH
42340: LD_INT 11
42342: PUSH
42343: LD_INT 30
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_VAR 0 12
42354: ARRAY
42355: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42356: LD_VAR 0 18
42360: NOT
42361: PUSH
42362: LD_INT 40
42364: PPUSH
42365: LD_VAR 0 16
42369: PPUSH
42370: CALL_OW 321
42374: PUSH
42375: LD_INT 2
42377: EQUAL
42378: AND
42379: PUSH
42380: LD_INT 7
42382: PUSH
42383: LD_VAR 0 5
42387: IN
42388: PUSH
42389: LD_INT 28
42391: PUSH
42392: LD_VAR 0 5
42396: IN
42397: OR
42398: PUSH
42399: LD_INT 45
42401: PUSH
42402: LD_VAR 0 5
42406: IN
42407: OR
42408: AND
42409: IFFALSE 42663
// begin hex := GetHexInfo ( x , y ) ;
42411: LD_ADDR_VAR 0 4
42415: PUSH
42416: LD_VAR 0 10
42420: PPUSH
42421: LD_VAR 0 11
42425: PPUSH
42426: CALL_OW 546
42430: ST_TO_ADDR
// if hex [ 1 ] then
42431: LD_VAR 0 4
42435: PUSH
42436: LD_INT 1
42438: ARRAY
42439: IFFALSE 42443
// exit ;
42441: GO 42846
// height := hex [ 2 ] ;
42443: LD_ADDR_VAR 0 15
42447: PUSH
42448: LD_VAR 0 4
42452: PUSH
42453: LD_INT 2
42455: ARRAY
42456: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42457: LD_ADDR_VAR 0 14
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: LD_INT 2
42467: PUSH
42468: LD_INT 3
42470: PUSH
42471: LD_INT 5
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// for i in tmp do
42480: LD_ADDR_VAR 0 8
42484: PUSH
42485: LD_VAR 0 14
42489: PUSH
42490: FOR_IN
42491: IFFALSE 42661
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42493: LD_ADDR_VAR 0 9
42497: PUSH
42498: LD_VAR 0 10
42502: PPUSH
42503: LD_VAR 0 8
42507: PPUSH
42508: LD_INT 5
42510: PPUSH
42511: CALL_OW 272
42515: PUSH
42516: LD_VAR 0 11
42520: PPUSH
42521: LD_VAR 0 8
42525: PPUSH
42526: LD_INT 5
42528: PPUSH
42529: CALL_OW 273
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42538: LD_VAR 0 9
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PPUSH
42547: LD_VAR 0 9
42551: PUSH
42552: LD_INT 2
42554: ARRAY
42555: PPUSH
42556: CALL_OW 488
42560: IFFALSE 42659
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42562: LD_ADDR_VAR 0 4
42566: PUSH
42567: LD_VAR 0 9
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: PPUSH
42576: LD_VAR 0 9
42580: PUSH
42581: LD_INT 2
42583: ARRAY
42584: PPUSH
42585: CALL_OW 546
42589: ST_TO_ADDR
// if hex [ 1 ] then
42590: LD_VAR 0 4
42594: PUSH
42595: LD_INT 1
42597: ARRAY
42598: IFFALSE 42602
// continue ;
42600: GO 42490
// h := hex [ 2 ] ;
42602: LD_ADDR_VAR 0 13
42606: PUSH
42607: LD_VAR 0 4
42611: PUSH
42612: LD_INT 2
42614: ARRAY
42615: ST_TO_ADDR
// if h + 7 < height then
42616: LD_VAR 0 13
42620: PUSH
42621: LD_INT 7
42623: PLUS
42624: PUSH
42625: LD_VAR 0 15
42629: LESS
42630: IFFALSE 42659
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42632: LD_ADDR_VAR 0 18
42636: PUSH
42637: LD_INT 7
42639: PUSH
42640: LD_INT 28
42642: PUSH
42643: LD_INT 45
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: LD_VAR 0 12
42655: ARRAY
42656: ST_TO_ADDR
// break ;
42657: GO 42661
// end ; end ; end ;
42659: GO 42490
42661: POP
42662: POP
// end ; if not weapon then
42663: LD_VAR 0 18
42667: NOT
42668: IFFALSE 42728
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42670: LD_ADDR_VAR 0 5
42674: PUSH
42675: LD_VAR 0 5
42679: PUSH
42680: LD_INT 11
42682: PUSH
42683: LD_INT 30
42685: PUSH
42686: LD_INT 49
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: DIFF
42694: ST_TO_ADDR
// if not list then
42695: LD_VAR 0 5
42699: NOT
42700: IFFALSE 42704
// exit ;
42702: GO 42846
// weapon := list [ rand ( 1 , list ) ] ;
42704: LD_ADDR_VAR 0 18
42708: PUSH
42709: LD_VAR 0 5
42713: PUSH
42714: LD_INT 1
42716: PPUSH
42717: LD_VAR 0 5
42721: PPUSH
42722: CALL_OW 12
42726: ARRAY
42727: ST_TO_ADDR
// end ; if weapon then
42728: LD_VAR 0 18
42732: IFFALSE 42846
// begin tmp := CostOfWeapon ( weapon ) ;
42734: LD_ADDR_VAR 0 14
42738: PUSH
42739: LD_VAR 0 18
42743: PPUSH
42744: CALL_OW 451
42748: ST_TO_ADDR
// j := GetBase ( tower ) ;
42749: LD_ADDR_VAR 0 9
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 274
42763: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42764: LD_VAR 0 9
42768: PPUSH
42769: LD_INT 1
42771: PPUSH
42772: CALL_OW 275
42776: PUSH
42777: LD_VAR 0 14
42781: PUSH
42782: LD_INT 1
42784: ARRAY
42785: GREATEREQUAL
42786: PUSH
42787: LD_VAR 0 9
42791: PPUSH
42792: LD_INT 2
42794: PPUSH
42795: CALL_OW 275
42799: PUSH
42800: LD_VAR 0 14
42804: PUSH
42805: LD_INT 2
42807: ARRAY
42808: GREATEREQUAL
42809: AND
42810: PUSH
42811: LD_VAR 0 9
42815: PPUSH
42816: LD_INT 3
42818: PPUSH
42819: CALL_OW 275
42823: PUSH
42824: LD_VAR 0 14
42828: PUSH
42829: LD_INT 3
42831: ARRAY
42832: GREATEREQUAL
42833: AND
42834: IFFALSE 42846
// result := weapon ;
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_VAR 0 18
42845: ST_TO_ADDR
// end ; end ;
42846: LD_VAR 0 3
42850: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42851: LD_INT 0
42853: PPUSH
42854: PPUSH
// result := true ;
42855: LD_ADDR_VAR 0 3
42859: PUSH
42860: LD_INT 1
42862: ST_TO_ADDR
// if array1 = array2 then
42863: LD_VAR 0 1
42867: PUSH
42868: LD_VAR 0 2
42872: EQUAL
42873: IFFALSE 42933
// begin for i = 1 to array1 do
42875: LD_ADDR_VAR 0 4
42879: PUSH
42880: DOUBLE
42881: LD_INT 1
42883: DEC
42884: ST_TO_ADDR
42885: LD_VAR 0 1
42889: PUSH
42890: FOR_TO
42891: IFFALSE 42929
// if array1 [ i ] <> array2 [ i ] then
42893: LD_VAR 0 1
42897: PUSH
42898: LD_VAR 0 4
42902: ARRAY
42903: PUSH
42904: LD_VAR 0 2
42908: PUSH
42909: LD_VAR 0 4
42913: ARRAY
42914: NONEQUAL
42915: IFFALSE 42927
// begin result := false ;
42917: LD_ADDR_VAR 0 3
42921: PUSH
42922: LD_INT 0
42924: ST_TO_ADDR
// break ;
42925: GO 42929
// end ;
42927: GO 42890
42929: POP
42930: POP
// end else
42931: GO 42941
// result := false ;
42933: LD_ADDR_VAR 0 3
42937: PUSH
42938: LD_INT 0
42940: ST_TO_ADDR
// end ;
42941: LD_VAR 0 3
42945: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42946: LD_INT 0
42948: PPUSH
42949: PPUSH
// if not array1 or not array2 then
42950: LD_VAR 0 1
42954: NOT
42955: PUSH
42956: LD_VAR 0 2
42960: NOT
42961: OR
42962: IFFALSE 42966
// exit ;
42964: GO 43030
// result := true ;
42966: LD_ADDR_VAR 0 3
42970: PUSH
42971: LD_INT 1
42973: ST_TO_ADDR
// for i = 1 to array1 do
42974: LD_ADDR_VAR 0 4
42978: PUSH
42979: DOUBLE
42980: LD_INT 1
42982: DEC
42983: ST_TO_ADDR
42984: LD_VAR 0 1
42988: PUSH
42989: FOR_TO
42990: IFFALSE 43028
// if array1 [ i ] <> array2 [ i ] then
42992: LD_VAR 0 1
42996: PUSH
42997: LD_VAR 0 4
43001: ARRAY
43002: PUSH
43003: LD_VAR 0 2
43007: PUSH
43008: LD_VAR 0 4
43012: ARRAY
43013: NONEQUAL
43014: IFFALSE 43026
// begin result := false ;
43016: LD_ADDR_VAR 0 3
43020: PUSH
43021: LD_INT 0
43023: ST_TO_ADDR
// break ;
43024: GO 43028
// end ;
43026: GO 42989
43028: POP
43029: POP
// end ;
43030: LD_VAR 0 3
43034: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43035: LD_INT 0
43037: PPUSH
43038: PPUSH
43039: PPUSH
// pom := GetBase ( fac ) ;
43040: LD_ADDR_VAR 0 5
43044: PUSH
43045: LD_VAR 0 1
43049: PPUSH
43050: CALL_OW 274
43054: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43055: LD_ADDR_VAR 0 4
43059: PUSH
43060: LD_VAR 0 2
43064: PUSH
43065: LD_INT 1
43067: ARRAY
43068: PPUSH
43069: LD_VAR 0 2
43073: PUSH
43074: LD_INT 2
43076: ARRAY
43077: PPUSH
43078: LD_VAR 0 2
43082: PUSH
43083: LD_INT 3
43085: ARRAY
43086: PPUSH
43087: LD_VAR 0 2
43091: PUSH
43092: LD_INT 4
43094: ARRAY
43095: PPUSH
43096: CALL_OW 449
43100: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43101: LD_ADDR_VAR 0 3
43105: PUSH
43106: LD_VAR 0 5
43110: PPUSH
43111: LD_INT 1
43113: PPUSH
43114: CALL_OW 275
43118: PUSH
43119: LD_VAR 0 4
43123: PUSH
43124: LD_INT 1
43126: ARRAY
43127: GREATEREQUAL
43128: PUSH
43129: LD_VAR 0 5
43133: PPUSH
43134: LD_INT 2
43136: PPUSH
43137: CALL_OW 275
43141: PUSH
43142: LD_VAR 0 4
43146: PUSH
43147: LD_INT 2
43149: ARRAY
43150: GREATEREQUAL
43151: AND
43152: PUSH
43153: LD_VAR 0 5
43157: PPUSH
43158: LD_INT 3
43160: PPUSH
43161: CALL_OW 275
43165: PUSH
43166: LD_VAR 0 4
43170: PUSH
43171: LD_INT 3
43173: ARRAY
43174: GREATEREQUAL
43175: AND
43176: ST_TO_ADDR
// end ;
43177: LD_VAR 0 3
43181: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43182: LD_INT 0
43184: PPUSH
43185: PPUSH
43186: PPUSH
43187: PPUSH
// pom := GetBase ( building ) ;
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: LD_VAR 0 1
43197: PPUSH
43198: CALL_OW 274
43202: ST_TO_ADDR
// if not pom then
43203: LD_VAR 0 3
43207: NOT
43208: IFFALSE 43212
// exit ;
43210: GO 43382
// btype := GetBType ( building ) ;
43212: LD_ADDR_VAR 0 5
43216: PUSH
43217: LD_VAR 0 1
43221: PPUSH
43222: CALL_OW 266
43226: ST_TO_ADDR
// if btype = b_armoury then
43227: LD_VAR 0 5
43231: PUSH
43232: LD_INT 4
43234: EQUAL
43235: IFFALSE 43245
// btype := b_barracks ;
43237: LD_ADDR_VAR 0 5
43241: PUSH
43242: LD_INT 5
43244: ST_TO_ADDR
// if btype = b_depot then
43245: LD_VAR 0 5
43249: PUSH
43250: LD_INT 0
43252: EQUAL
43253: IFFALSE 43263
// btype := b_warehouse ;
43255: LD_ADDR_VAR 0 5
43259: PUSH
43260: LD_INT 1
43262: ST_TO_ADDR
// if btype = b_workshop then
43263: LD_VAR 0 5
43267: PUSH
43268: LD_INT 2
43270: EQUAL
43271: IFFALSE 43281
// btype := b_factory ;
43273: LD_ADDR_VAR 0 5
43277: PUSH
43278: LD_INT 3
43280: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43281: LD_ADDR_VAR 0 4
43285: PUSH
43286: LD_VAR 0 5
43290: PPUSH
43291: LD_VAR 0 1
43295: PPUSH
43296: CALL_OW 248
43300: PPUSH
43301: CALL_OW 450
43305: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43306: LD_ADDR_VAR 0 2
43310: PUSH
43311: LD_VAR 0 3
43315: PPUSH
43316: LD_INT 1
43318: PPUSH
43319: CALL_OW 275
43323: PUSH
43324: LD_VAR 0 4
43328: PUSH
43329: LD_INT 1
43331: ARRAY
43332: GREATEREQUAL
43333: PUSH
43334: LD_VAR 0 3
43338: PPUSH
43339: LD_INT 2
43341: PPUSH
43342: CALL_OW 275
43346: PUSH
43347: LD_VAR 0 4
43351: PUSH
43352: LD_INT 2
43354: ARRAY
43355: GREATEREQUAL
43356: AND
43357: PUSH
43358: LD_VAR 0 3
43362: PPUSH
43363: LD_INT 3
43365: PPUSH
43366: CALL_OW 275
43370: PUSH
43371: LD_VAR 0 4
43375: PUSH
43376: LD_INT 3
43378: ARRAY
43379: GREATEREQUAL
43380: AND
43381: ST_TO_ADDR
// end ;
43382: LD_VAR 0 2
43386: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43387: LD_INT 0
43389: PPUSH
43390: PPUSH
43391: PPUSH
// pom := GetBase ( building ) ;
43392: LD_ADDR_VAR 0 4
43396: PUSH
43397: LD_VAR 0 1
43401: PPUSH
43402: CALL_OW 274
43406: ST_TO_ADDR
// if not pom then
43407: LD_VAR 0 4
43411: NOT
43412: IFFALSE 43416
// exit ;
43414: GO 43517
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43416: LD_ADDR_VAR 0 5
43420: PUSH
43421: LD_VAR 0 2
43425: PPUSH
43426: LD_VAR 0 1
43430: PPUSH
43431: CALL_OW 248
43435: PPUSH
43436: CALL_OW 450
43440: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: LD_VAR 0 4
43450: PPUSH
43451: LD_INT 1
43453: PPUSH
43454: CALL_OW 275
43458: PUSH
43459: LD_VAR 0 5
43463: PUSH
43464: LD_INT 1
43466: ARRAY
43467: GREATEREQUAL
43468: PUSH
43469: LD_VAR 0 4
43473: PPUSH
43474: LD_INT 2
43476: PPUSH
43477: CALL_OW 275
43481: PUSH
43482: LD_VAR 0 5
43486: PUSH
43487: LD_INT 2
43489: ARRAY
43490: GREATEREQUAL
43491: AND
43492: PUSH
43493: LD_VAR 0 4
43497: PPUSH
43498: LD_INT 3
43500: PPUSH
43501: CALL_OW 275
43505: PUSH
43506: LD_VAR 0 5
43510: PUSH
43511: LD_INT 3
43513: ARRAY
43514: GREATEREQUAL
43515: AND
43516: ST_TO_ADDR
// end ;
43517: LD_VAR 0 3
43521: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43522: LD_INT 0
43524: PPUSH
43525: PPUSH
43526: PPUSH
43527: PPUSH
43528: PPUSH
43529: PPUSH
43530: PPUSH
43531: PPUSH
43532: PPUSH
43533: PPUSH
43534: PPUSH
// result := false ;
43535: LD_ADDR_VAR 0 8
43539: PUSH
43540: LD_INT 0
43542: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43543: LD_VAR 0 5
43547: NOT
43548: PUSH
43549: LD_VAR 0 1
43553: NOT
43554: OR
43555: PUSH
43556: LD_VAR 0 2
43560: NOT
43561: OR
43562: PUSH
43563: LD_VAR 0 3
43567: NOT
43568: OR
43569: IFFALSE 43573
// exit ;
43571: GO 44387
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43573: LD_ADDR_VAR 0 14
43577: PUSH
43578: LD_VAR 0 1
43582: PPUSH
43583: LD_VAR 0 2
43587: PPUSH
43588: LD_VAR 0 3
43592: PPUSH
43593: LD_VAR 0 4
43597: PPUSH
43598: LD_VAR 0 5
43602: PUSH
43603: LD_INT 1
43605: ARRAY
43606: PPUSH
43607: CALL_OW 248
43611: PPUSH
43612: LD_INT 0
43614: PPUSH
43615: CALL 45640 0 6
43619: ST_TO_ADDR
// if not hexes then
43620: LD_VAR 0 14
43624: NOT
43625: IFFALSE 43629
// exit ;
43627: GO 44387
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43629: LD_ADDR_VAR 0 17
43633: PUSH
43634: LD_VAR 0 5
43638: PPUSH
43639: LD_INT 22
43641: PUSH
43642: LD_VAR 0 13
43646: PPUSH
43647: CALL_OW 255
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: LD_INT 30
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 30
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PPUSH
43688: CALL_OW 72
43692: ST_TO_ADDR
// for i = 1 to hexes do
43693: LD_ADDR_VAR 0 9
43697: PUSH
43698: DOUBLE
43699: LD_INT 1
43701: DEC
43702: ST_TO_ADDR
43703: LD_VAR 0 14
43707: PUSH
43708: FOR_TO
43709: IFFALSE 44385
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43711: LD_ADDR_VAR 0 13
43715: PUSH
43716: LD_VAR 0 14
43720: PUSH
43721: LD_VAR 0 9
43725: ARRAY
43726: PUSH
43727: LD_INT 1
43729: ARRAY
43730: PPUSH
43731: LD_VAR 0 14
43735: PUSH
43736: LD_VAR 0 9
43740: ARRAY
43741: PUSH
43742: LD_INT 2
43744: ARRAY
43745: PPUSH
43746: CALL_OW 428
43750: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43751: LD_VAR 0 14
43755: PUSH
43756: LD_VAR 0 9
43760: ARRAY
43761: PUSH
43762: LD_INT 1
43764: ARRAY
43765: PPUSH
43766: LD_VAR 0 14
43770: PUSH
43771: LD_VAR 0 9
43775: ARRAY
43776: PUSH
43777: LD_INT 2
43779: ARRAY
43780: PPUSH
43781: CALL_OW 351
43785: PUSH
43786: LD_VAR 0 14
43790: PUSH
43791: LD_VAR 0 9
43795: ARRAY
43796: PUSH
43797: LD_INT 1
43799: ARRAY
43800: PPUSH
43801: LD_VAR 0 14
43805: PUSH
43806: LD_VAR 0 9
43810: ARRAY
43811: PUSH
43812: LD_INT 2
43814: ARRAY
43815: PPUSH
43816: CALL_OW 488
43820: NOT
43821: OR
43822: PUSH
43823: LD_VAR 0 13
43827: PPUSH
43828: CALL_OW 247
43832: PUSH
43833: LD_INT 3
43835: EQUAL
43836: OR
43837: IFFALSE 43843
// exit ;
43839: POP
43840: POP
43841: GO 44387
// if not tmp then
43843: LD_VAR 0 13
43847: NOT
43848: IFFALSE 43852
// continue ;
43850: GO 43708
// result := true ;
43852: LD_ADDR_VAR 0 8
43856: PUSH
43857: LD_INT 1
43859: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43860: LD_VAR 0 6
43864: PUSH
43865: LD_VAR 0 13
43869: PPUSH
43870: CALL_OW 247
43874: PUSH
43875: LD_INT 2
43877: EQUAL
43878: AND
43879: PUSH
43880: LD_VAR 0 13
43884: PPUSH
43885: CALL_OW 263
43889: PUSH
43890: LD_INT 1
43892: EQUAL
43893: AND
43894: IFFALSE 44058
// begin if IsDrivenBy ( tmp ) then
43896: LD_VAR 0 13
43900: PPUSH
43901: CALL_OW 311
43905: IFFALSE 43909
// continue ;
43907: GO 43708
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43909: LD_VAR 0 6
43913: PPUSH
43914: LD_INT 3
43916: PUSH
43917: LD_INT 60
43919: PUSH
43920: EMPTY
43921: LIST
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 55
43932: PUSH
43933: EMPTY
43934: LIST
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PPUSH
43944: CALL_OW 72
43948: IFFALSE 44056
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43950: LD_ADDR_VAR 0 18
43954: PUSH
43955: LD_VAR 0 6
43959: PPUSH
43960: LD_INT 3
43962: PUSH
43963: LD_INT 60
43965: PUSH
43966: EMPTY
43967: LIST
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 3
43975: PUSH
43976: LD_INT 55
43978: PUSH
43979: EMPTY
43980: LIST
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PPUSH
43990: CALL_OW 72
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: ST_TO_ADDR
// if IsInUnit ( driver ) then
43999: LD_VAR 0 18
44003: PPUSH
44004: CALL_OW 310
44008: IFFALSE 44019
// ComExit ( driver ) ;
44010: LD_VAR 0 18
44014: PPUSH
44015: CALL 69432 0 1
// AddComEnterUnit ( driver , tmp ) ;
44019: LD_VAR 0 18
44023: PPUSH
44024: LD_VAR 0 13
44028: PPUSH
44029: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44033: LD_VAR 0 18
44037: PPUSH
44038: LD_VAR 0 7
44042: PPUSH
44043: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44047: LD_VAR 0 18
44051: PPUSH
44052: CALL_OW 181
// end ; continue ;
44056: GO 43708
// end ; if not cleaners or not tmp in cleaners then
44058: LD_VAR 0 6
44062: NOT
44063: PUSH
44064: LD_VAR 0 13
44068: PUSH
44069: LD_VAR 0 6
44073: IN
44074: NOT
44075: OR
44076: IFFALSE 44383
// begin if dep then
44078: LD_VAR 0 17
44082: IFFALSE 44218
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44084: LD_ADDR_VAR 0 16
44088: PUSH
44089: LD_VAR 0 17
44093: PUSH
44094: LD_INT 1
44096: ARRAY
44097: PPUSH
44098: CALL_OW 250
44102: PPUSH
44103: LD_VAR 0 17
44107: PUSH
44108: LD_INT 1
44110: ARRAY
44111: PPUSH
44112: CALL_OW 254
44116: PPUSH
44117: LD_INT 5
44119: PPUSH
44120: CALL_OW 272
44124: PUSH
44125: LD_VAR 0 17
44129: PUSH
44130: LD_INT 1
44132: ARRAY
44133: PPUSH
44134: CALL_OW 251
44138: PPUSH
44139: LD_VAR 0 17
44143: PUSH
44144: LD_INT 1
44146: ARRAY
44147: PPUSH
44148: CALL_OW 254
44152: PPUSH
44153: LD_INT 5
44155: PPUSH
44156: CALL_OW 273
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44165: LD_VAR 0 16
44169: PUSH
44170: LD_INT 1
44172: ARRAY
44173: PPUSH
44174: LD_VAR 0 16
44178: PUSH
44179: LD_INT 2
44181: ARRAY
44182: PPUSH
44183: CALL_OW 488
44187: IFFALSE 44218
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44189: LD_VAR 0 13
44193: PPUSH
44194: LD_VAR 0 16
44198: PUSH
44199: LD_INT 1
44201: ARRAY
44202: PPUSH
44203: LD_VAR 0 16
44207: PUSH
44208: LD_INT 2
44210: ARRAY
44211: PPUSH
44212: CALL_OW 111
// continue ;
44216: GO 43708
// end ; end ; r := GetDir ( tmp ) ;
44218: LD_ADDR_VAR 0 15
44222: PUSH
44223: LD_VAR 0 13
44227: PPUSH
44228: CALL_OW 254
44232: ST_TO_ADDR
// if r = 5 then
44233: LD_VAR 0 15
44237: PUSH
44238: LD_INT 5
44240: EQUAL
44241: IFFALSE 44251
// r := 0 ;
44243: LD_ADDR_VAR 0 15
44247: PUSH
44248: LD_INT 0
44250: ST_TO_ADDR
// for j = r to 5 do
44251: LD_ADDR_VAR 0 10
44255: PUSH
44256: DOUBLE
44257: LD_VAR 0 15
44261: DEC
44262: ST_TO_ADDR
44263: LD_INT 5
44265: PUSH
44266: FOR_TO
44267: IFFALSE 44381
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44269: LD_ADDR_VAR 0 11
44273: PUSH
44274: LD_VAR 0 13
44278: PPUSH
44279: CALL_OW 250
44283: PPUSH
44284: LD_VAR 0 10
44288: PPUSH
44289: LD_INT 2
44291: PPUSH
44292: CALL_OW 272
44296: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44297: LD_ADDR_VAR 0 12
44301: PUSH
44302: LD_VAR 0 13
44306: PPUSH
44307: CALL_OW 251
44311: PPUSH
44312: LD_VAR 0 10
44316: PPUSH
44317: LD_INT 2
44319: PPUSH
44320: CALL_OW 273
44324: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44325: LD_VAR 0 11
44329: PPUSH
44330: LD_VAR 0 12
44334: PPUSH
44335: CALL_OW 488
44339: PUSH
44340: LD_VAR 0 11
44344: PPUSH
44345: LD_VAR 0 12
44349: PPUSH
44350: CALL_OW 428
44354: NOT
44355: AND
44356: IFFALSE 44379
// begin ComMoveXY ( tmp , _x , _y ) ;
44358: LD_VAR 0 13
44362: PPUSH
44363: LD_VAR 0 11
44367: PPUSH
44368: LD_VAR 0 12
44372: PPUSH
44373: CALL_OW 111
// break ;
44377: GO 44381
// end ; end ;
44379: GO 44266
44381: POP
44382: POP
// end ; end ;
44383: GO 43708
44385: POP
44386: POP
// end ;
44387: LD_VAR 0 8
44391: RET
// export function BuildingTechInvented ( side , btype ) ; begin
44392: LD_INT 0
44394: PPUSH
// result := true ;
44395: LD_ADDR_VAR 0 3
44399: PUSH
44400: LD_INT 1
44402: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
44403: LD_VAR 0 2
44407: PUSH
44408: LD_INT 24
44410: DOUBLE
44411: EQUAL
44412: IFTRUE 44422
44414: LD_INT 33
44416: DOUBLE
44417: EQUAL
44418: IFTRUE 44422
44420: GO 44447
44422: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
44423: LD_ADDR_VAR 0 3
44427: PUSH
44428: LD_INT 32
44430: PPUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: CALL_OW 321
44440: PUSH
44441: LD_INT 2
44443: EQUAL
44444: ST_TO_ADDR
44445: GO 44763
44447: LD_INT 20
44449: DOUBLE
44450: EQUAL
44451: IFTRUE 44455
44453: GO 44480
44455: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
44456: LD_ADDR_VAR 0 3
44460: PUSH
44461: LD_INT 6
44463: PPUSH
44464: LD_VAR 0 1
44468: PPUSH
44469: CALL_OW 321
44473: PUSH
44474: LD_INT 2
44476: EQUAL
44477: ST_TO_ADDR
44478: GO 44763
44480: LD_INT 22
44482: DOUBLE
44483: EQUAL
44484: IFTRUE 44494
44486: LD_INT 36
44488: DOUBLE
44489: EQUAL
44490: IFTRUE 44494
44492: GO 44519
44494: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
44495: LD_ADDR_VAR 0 3
44499: PUSH
44500: LD_INT 15
44502: PPUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 321
44512: PUSH
44513: LD_INT 2
44515: EQUAL
44516: ST_TO_ADDR
44517: GO 44763
44519: LD_INT 30
44521: DOUBLE
44522: EQUAL
44523: IFTRUE 44527
44525: GO 44552
44527: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44528: LD_ADDR_VAR 0 3
44532: PUSH
44533: LD_INT 20
44535: PPUSH
44536: LD_VAR 0 1
44540: PPUSH
44541: CALL_OW 321
44545: PUSH
44546: LD_INT 2
44548: EQUAL
44549: ST_TO_ADDR
44550: GO 44763
44552: LD_INT 28
44554: DOUBLE
44555: EQUAL
44556: IFTRUE 44566
44558: LD_INT 21
44560: DOUBLE
44561: EQUAL
44562: IFTRUE 44566
44564: GO 44591
44566: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44567: LD_ADDR_VAR 0 3
44571: PUSH
44572: LD_INT 21
44574: PPUSH
44575: LD_VAR 0 1
44579: PPUSH
44580: CALL_OW 321
44584: PUSH
44585: LD_INT 2
44587: EQUAL
44588: ST_TO_ADDR
44589: GO 44763
44591: LD_INT 16
44593: DOUBLE
44594: EQUAL
44595: IFTRUE 44599
44597: GO 44624
44599: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44600: LD_ADDR_VAR 0 3
44604: PUSH
44605: LD_INT 84
44607: PPUSH
44608: LD_VAR 0 1
44612: PPUSH
44613: CALL_OW 321
44617: PUSH
44618: LD_INT 2
44620: EQUAL
44621: ST_TO_ADDR
44622: GO 44763
44624: LD_INT 19
44626: DOUBLE
44627: EQUAL
44628: IFTRUE 44638
44630: LD_INT 23
44632: DOUBLE
44633: EQUAL
44634: IFTRUE 44638
44636: GO 44663
44638: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44639: LD_ADDR_VAR 0 3
44643: PUSH
44644: LD_INT 83
44646: PPUSH
44647: LD_VAR 0 1
44651: PPUSH
44652: CALL_OW 321
44656: PUSH
44657: LD_INT 2
44659: EQUAL
44660: ST_TO_ADDR
44661: GO 44763
44663: LD_INT 17
44665: DOUBLE
44666: EQUAL
44667: IFTRUE 44671
44669: GO 44696
44671: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44672: LD_ADDR_VAR 0 3
44676: PUSH
44677: LD_INT 39
44679: PPUSH
44680: LD_VAR 0 1
44684: PPUSH
44685: CALL_OW 321
44689: PUSH
44690: LD_INT 2
44692: EQUAL
44693: ST_TO_ADDR
44694: GO 44763
44696: LD_INT 18
44698: DOUBLE
44699: EQUAL
44700: IFTRUE 44704
44702: GO 44729
44704: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44705: LD_ADDR_VAR 0 3
44709: PUSH
44710: LD_INT 40
44712: PPUSH
44713: LD_VAR 0 1
44717: PPUSH
44718: CALL_OW 321
44722: PUSH
44723: LD_INT 2
44725: EQUAL
44726: ST_TO_ADDR
44727: GO 44763
44729: LD_INT 27
44731: DOUBLE
44732: EQUAL
44733: IFTRUE 44737
44735: GO 44762
44737: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44738: LD_ADDR_VAR 0 3
44742: PUSH
44743: LD_INT 35
44745: PPUSH
44746: LD_VAR 0 1
44750: PPUSH
44751: CALL_OW 321
44755: PUSH
44756: LD_INT 2
44758: EQUAL
44759: ST_TO_ADDR
44760: GO 44763
44762: POP
// end ;
44763: LD_VAR 0 3
44767: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44768: LD_INT 0
44770: PPUSH
44771: PPUSH
44772: PPUSH
44773: PPUSH
44774: PPUSH
44775: PPUSH
44776: PPUSH
44777: PPUSH
44778: PPUSH
44779: PPUSH
44780: PPUSH
// result := false ;
44781: LD_ADDR_VAR 0 6
44785: PUSH
44786: LD_INT 0
44788: ST_TO_ADDR
// if btype = b_depot then
44789: LD_VAR 0 2
44793: PUSH
44794: LD_INT 0
44796: EQUAL
44797: IFFALSE 44809
// begin result := true ;
44799: LD_ADDR_VAR 0 6
44803: PUSH
44804: LD_INT 1
44806: ST_TO_ADDR
// exit ;
44807: GO 45635
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44809: LD_VAR 0 1
44813: NOT
44814: PUSH
44815: LD_VAR 0 1
44819: PPUSH
44820: CALL_OW 266
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: IN
44835: NOT
44836: OR
44837: PUSH
44838: LD_VAR 0 2
44842: NOT
44843: OR
44844: PUSH
44845: LD_VAR 0 5
44849: PUSH
44850: LD_INT 0
44852: PUSH
44853: LD_INT 1
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 3
44861: PUSH
44862: LD_INT 4
44864: PUSH
44865: LD_INT 5
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: IN
44876: NOT
44877: OR
44878: PUSH
44879: LD_VAR 0 3
44883: PPUSH
44884: LD_VAR 0 4
44888: PPUSH
44889: CALL_OW 488
44893: NOT
44894: OR
44895: IFFALSE 44899
// exit ;
44897: GO 45635
// side := GetSide ( depot ) ;
44899: LD_ADDR_VAR 0 9
44903: PUSH
44904: LD_VAR 0 1
44908: PPUSH
44909: CALL_OW 255
44913: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44914: LD_VAR 0 9
44918: PPUSH
44919: LD_VAR 0 2
44923: PPUSH
44924: CALL 44392 0 2
44928: NOT
44929: IFFALSE 44933
// exit ;
44931: GO 45635
// pom := GetBase ( depot ) ;
44933: LD_ADDR_VAR 0 10
44937: PUSH
44938: LD_VAR 0 1
44942: PPUSH
44943: CALL_OW 274
44947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44948: LD_ADDR_VAR 0 11
44952: PUSH
44953: LD_VAR 0 2
44957: PPUSH
44958: LD_VAR 0 1
44962: PPUSH
44963: CALL_OW 248
44967: PPUSH
44968: CALL_OW 450
44972: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44973: LD_VAR 0 10
44977: PPUSH
44978: LD_INT 1
44980: PPUSH
44981: CALL_OW 275
44985: PUSH
44986: LD_VAR 0 11
44990: PUSH
44991: LD_INT 1
44993: ARRAY
44994: GREATEREQUAL
44995: PUSH
44996: LD_VAR 0 10
45000: PPUSH
45001: LD_INT 2
45003: PPUSH
45004: CALL_OW 275
45008: PUSH
45009: LD_VAR 0 11
45013: PUSH
45014: LD_INT 2
45016: ARRAY
45017: GREATEREQUAL
45018: AND
45019: PUSH
45020: LD_VAR 0 10
45024: PPUSH
45025: LD_INT 3
45027: PPUSH
45028: CALL_OW 275
45032: PUSH
45033: LD_VAR 0 11
45037: PUSH
45038: LD_INT 3
45040: ARRAY
45041: GREATEREQUAL
45042: AND
45043: NOT
45044: IFFALSE 45048
// exit ;
45046: GO 45635
// if GetBType ( depot ) = b_depot then
45048: LD_VAR 0 1
45052: PPUSH
45053: CALL_OW 266
45057: PUSH
45058: LD_INT 0
45060: EQUAL
45061: IFFALSE 45073
// dist := 28 else
45063: LD_ADDR_VAR 0 14
45067: PUSH
45068: LD_INT 28
45070: ST_TO_ADDR
45071: GO 45081
// dist := 36 ;
45073: LD_ADDR_VAR 0 14
45077: PUSH
45078: LD_INT 36
45080: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45081: LD_VAR 0 1
45085: PPUSH
45086: LD_VAR 0 3
45090: PPUSH
45091: LD_VAR 0 4
45095: PPUSH
45096: CALL_OW 297
45100: PUSH
45101: LD_VAR 0 14
45105: GREATER
45106: IFFALSE 45110
// exit ;
45108: GO 45635
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45110: LD_ADDR_VAR 0 12
45114: PUSH
45115: LD_VAR 0 2
45119: PPUSH
45120: LD_VAR 0 3
45124: PPUSH
45125: LD_VAR 0 4
45129: PPUSH
45130: LD_VAR 0 5
45134: PPUSH
45135: LD_VAR 0 1
45139: PPUSH
45140: CALL_OW 248
45144: PPUSH
45145: LD_INT 0
45147: PPUSH
45148: CALL 45640 0 6
45152: ST_TO_ADDR
// if not hexes then
45153: LD_VAR 0 12
45157: NOT
45158: IFFALSE 45162
// exit ;
45160: GO 45635
// hex := GetHexInfo ( x , y ) ;
45162: LD_ADDR_VAR 0 15
45166: PUSH
45167: LD_VAR 0 3
45171: PPUSH
45172: LD_VAR 0 4
45176: PPUSH
45177: CALL_OW 546
45181: ST_TO_ADDR
// if hex [ 1 ] then
45182: LD_VAR 0 15
45186: PUSH
45187: LD_INT 1
45189: ARRAY
45190: IFFALSE 45194
// exit ;
45192: GO 45635
// height := hex [ 2 ] ;
45194: LD_ADDR_VAR 0 13
45198: PUSH
45199: LD_VAR 0 15
45203: PUSH
45204: LD_INT 2
45206: ARRAY
45207: ST_TO_ADDR
// for i = 1 to hexes do
45208: LD_ADDR_VAR 0 7
45212: PUSH
45213: DOUBLE
45214: LD_INT 1
45216: DEC
45217: ST_TO_ADDR
45218: LD_VAR 0 12
45222: PUSH
45223: FOR_TO
45224: IFFALSE 45554
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45226: LD_VAR 0 12
45230: PUSH
45231: LD_VAR 0 7
45235: ARRAY
45236: PUSH
45237: LD_INT 1
45239: ARRAY
45240: PPUSH
45241: LD_VAR 0 12
45245: PUSH
45246: LD_VAR 0 7
45250: ARRAY
45251: PUSH
45252: LD_INT 2
45254: ARRAY
45255: PPUSH
45256: CALL_OW 488
45260: NOT
45261: PUSH
45262: LD_VAR 0 12
45266: PUSH
45267: LD_VAR 0 7
45271: ARRAY
45272: PUSH
45273: LD_INT 1
45275: ARRAY
45276: PPUSH
45277: LD_VAR 0 12
45281: PUSH
45282: LD_VAR 0 7
45286: ARRAY
45287: PUSH
45288: LD_INT 2
45290: ARRAY
45291: PPUSH
45292: CALL_OW 428
45296: PUSH
45297: LD_INT 0
45299: GREATER
45300: OR
45301: PUSH
45302: LD_VAR 0 12
45306: PUSH
45307: LD_VAR 0 7
45311: ARRAY
45312: PUSH
45313: LD_INT 1
45315: ARRAY
45316: PPUSH
45317: LD_VAR 0 12
45321: PUSH
45322: LD_VAR 0 7
45326: ARRAY
45327: PUSH
45328: LD_INT 2
45330: ARRAY
45331: PPUSH
45332: CALL_OW 351
45336: OR
45337: IFFALSE 45343
// exit ;
45339: POP
45340: POP
45341: GO 45635
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45343: LD_ADDR_VAR 0 8
45347: PUSH
45348: LD_VAR 0 12
45352: PUSH
45353: LD_VAR 0 7
45357: ARRAY
45358: PUSH
45359: LD_INT 1
45361: ARRAY
45362: PPUSH
45363: LD_VAR 0 12
45367: PUSH
45368: LD_VAR 0 7
45372: ARRAY
45373: PUSH
45374: LD_INT 2
45376: ARRAY
45377: PPUSH
45378: CALL_OW 546
45382: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45383: LD_VAR 0 8
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PUSH
45392: LD_VAR 0 8
45396: PUSH
45397: LD_INT 2
45399: ARRAY
45400: PUSH
45401: LD_VAR 0 13
45405: PUSH
45406: LD_INT 2
45408: PLUS
45409: GREATER
45410: OR
45411: PUSH
45412: LD_VAR 0 8
45416: PUSH
45417: LD_INT 2
45419: ARRAY
45420: PUSH
45421: LD_VAR 0 13
45425: PUSH
45426: LD_INT 2
45428: MINUS
45429: LESS
45430: OR
45431: PUSH
45432: LD_VAR 0 8
45436: PUSH
45437: LD_INT 3
45439: ARRAY
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 8
45446: PUSH
45447: LD_INT 9
45449: PUSH
45450: LD_INT 10
45452: PUSH
45453: LD_INT 11
45455: PUSH
45456: LD_INT 12
45458: PUSH
45459: LD_INT 13
45461: PUSH
45462: LD_INT 16
45464: PUSH
45465: LD_INT 17
45467: PUSH
45468: LD_INT 18
45470: PUSH
45471: LD_INT 19
45473: PUSH
45474: LD_INT 20
45476: PUSH
45477: LD_INT 21
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: IN
45495: NOT
45496: OR
45497: PUSH
45498: LD_VAR 0 8
45502: PUSH
45503: LD_INT 5
45505: ARRAY
45506: NOT
45507: OR
45508: PUSH
45509: LD_VAR 0 8
45513: PUSH
45514: LD_INT 6
45516: ARRAY
45517: PUSH
45518: LD_INT 1
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: LD_INT 7
45526: PUSH
45527: LD_INT 9
45529: PUSH
45530: LD_INT 10
45532: PUSH
45533: LD_INT 11
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: IN
45544: NOT
45545: OR
45546: IFFALSE 45552
// exit ;
45548: POP
45549: POP
45550: GO 45635
// end ;
45552: GO 45223
45554: POP
45555: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45556: LD_VAR 0 9
45560: PPUSH
45561: LD_VAR 0 3
45565: PPUSH
45566: LD_VAR 0 4
45570: PPUSH
45571: LD_INT 20
45573: PPUSH
45574: CALL 37558 0 4
45578: PUSH
45579: LD_INT 4
45581: ARRAY
45582: IFFALSE 45586
// exit ;
45584: GO 45635
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45586: LD_VAR 0 2
45590: PUSH
45591: LD_INT 29
45593: PUSH
45594: LD_INT 30
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: IN
45601: PUSH
45602: LD_VAR 0 3
45606: PPUSH
45607: LD_VAR 0 4
45611: PPUSH
45612: LD_VAR 0 9
45616: PPUSH
45617: CALL_OW 440
45621: NOT
45622: AND
45623: IFFALSE 45627
// exit ;
45625: GO 45635
// result := true ;
45627: LD_ADDR_VAR 0 6
45631: PUSH
45632: LD_INT 1
45634: ST_TO_ADDR
// end ;
45635: LD_VAR 0 6
45639: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45640: LD_INT 0
45642: PPUSH
45643: PPUSH
45644: PPUSH
45645: PPUSH
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
45650: PPUSH
45651: PPUSH
45652: PPUSH
45653: PPUSH
45654: PPUSH
45655: PPUSH
45656: PPUSH
45657: PPUSH
45658: PPUSH
45659: PPUSH
45660: PPUSH
45661: PPUSH
45662: PPUSH
45663: PPUSH
45664: PPUSH
45665: PPUSH
45666: PPUSH
45667: PPUSH
45668: PPUSH
45669: PPUSH
45670: PPUSH
45671: PPUSH
45672: PPUSH
45673: PPUSH
45674: PPUSH
45675: PPUSH
45676: PPUSH
45677: PPUSH
45678: PPUSH
45679: PPUSH
45680: PPUSH
45681: PPUSH
45682: PPUSH
45683: PPUSH
45684: PPUSH
45685: PPUSH
45686: PPUSH
45687: PPUSH
45688: PPUSH
45689: PPUSH
45690: PPUSH
45691: PPUSH
45692: PPUSH
45693: PPUSH
45694: PPUSH
45695: PPUSH
45696: PPUSH
45697: PPUSH
45698: PPUSH
45699: PPUSH
// result = [ ] ;
45700: LD_ADDR_VAR 0 7
45704: PUSH
45705: EMPTY
45706: ST_TO_ADDR
// temp_list = [ ] ;
45707: LD_ADDR_VAR 0 9
45711: PUSH
45712: EMPTY
45713: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45714: LD_VAR 0 4
45718: PUSH
45719: LD_INT 0
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: LD_INT 3
45730: PUSH
45731: LD_INT 4
45733: PUSH
45734: LD_INT 5
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: IN
45745: NOT
45746: PUSH
45747: LD_VAR 0 1
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: IN
45762: PUSH
45763: LD_VAR 0 5
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: LIST
45781: IN
45782: NOT
45783: AND
45784: OR
45785: IFFALSE 45789
// exit ;
45787: GO 64180
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45789: LD_VAR 0 1
45793: PUSH
45794: LD_INT 6
45796: PUSH
45797: LD_INT 7
45799: PUSH
45800: LD_INT 8
45802: PUSH
45803: LD_INT 13
45805: PUSH
45806: LD_INT 12
45808: PUSH
45809: LD_INT 15
45811: PUSH
45812: LD_INT 11
45814: PUSH
45815: LD_INT 14
45817: PUSH
45818: LD_INT 10
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: IN
45832: IFFALSE 45842
// btype = b_lab ;
45834: LD_ADDR_VAR 0 1
45838: PUSH
45839: LD_INT 6
45841: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45842: LD_VAR 0 6
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: LD_INT 1
45852: PUSH
45853: LD_INT 2
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: IN
45861: NOT
45862: PUSH
45863: LD_VAR 0 1
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 1
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 3
45879: PUSH
45880: LD_INT 6
45882: PUSH
45883: LD_INT 36
45885: PUSH
45886: LD_INT 4
45888: PUSH
45889: LD_INT 5
45891: PUSH
45892: LD_INT 31
45894: PUSH
45895: LD_INT 32
45897: PUSH
45898: LD_INT 33
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: IN
45914: NOT
45915: PUSH
45916: LD_VAR 0 6
45920: PUSH
45921: LD_INT 1
45923: EQUAL
45924: AND
45925: OR
45926: PUSH
45927: LD_VAR 0 1
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: IN
45942: NOT
45943: PUSH
45944: LD_VAR 0 6
45948: PUSH
45949: LD_INT 2
45951: EQUAL
45952: AND
45953: OR
45954: IFFALSE 45964
// mode = 0 ;
45956: LD_ADDR_VAR 0 6
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// case mode of 0 :
45964: LD_VAR 0 6
45968: PUSH
45969: LD_INT 0
45971: DOUBLE
45972: EQUAL
45973: IFTRUE 45977
45975: GO 57430
45977: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45978: LD_ADDR_VAR 0 11
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 1
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 1
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 3
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: NEG
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46171: LD_ADDR_VAR 0 12
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 0
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 1
46255: NEG
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 0
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 2
46305: NEG
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 3
46328: NEG
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: LD_INT 1
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46367: LD_ADDR_VAR 0 13
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: LD_INT 1
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 0
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 1
46425: NEG
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: LD_INT 3
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 3
46538: NEG
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46566: LD_ADDR_VAR 0 14
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: LD_INT 2
46662: NEG
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46762: LD_ADDR_VAR 0 15
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46955: LD_ADDR_VAR 0 16
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: NEG
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 2
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: LD_INT 3
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 3
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47148: LD_ADDR_VAR 0 17
47152: PUSH
47153: LD_INT 0
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 0
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 1
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 1
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 2
47263: PUSH
47264: LD_INT 0
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: LD_INT 1
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 2
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: NEG
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: NEG
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: LD_INT 1
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: LD_INT 2
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47378: LD_ADDR_VAR 0 18
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 0
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 1
47436: NEG
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: LD_INT 1
47451: NEG
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 2
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 2
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 2
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 2
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 0
47533: PUSH
47534: LD_INT 2
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 2
47554: NEG
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47608: LD_ADDR_VAR 0 19
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 1
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 1
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: NEG
47690: PUSH
47691: LD_INT 2
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 1
47715: NEG
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: PUSH
47734: LD_INT 1
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 2
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 2
47807: NEG
47808: PUSH
47809: LD_INT 2
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47838: LD_ADDR_VAR 0 20
47842: PUSH
47843: LD_INT 0
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 0
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 1
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 1
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: NEG
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 2
47923: NEG
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 2
47973: PUSH
47974: LD_INT 2
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 1
47983: PUSH
47984: LD_INT 2
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: NEG
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 2
48025: NEG
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 2
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48068: LD_ADDR_VAR 0 21
48072: PUSH
48073: LD_INT 0
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 2
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: LD_INT 1
48175: NEG
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 2
48203: PUSH
48204: LD_INT 2
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 2
48244: NEG
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 2
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48298: LD_ADDR_VAR 0 22
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 1
48367: NEG
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 1
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 1
48405: NEG
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: LD_INT 0
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 2
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48528: LD_ADDR_VAR 0 23
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 2
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 3
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 3
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48808: LD_ADDR_VAR 0 24
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 2
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 2
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: PUSH
48944: LD_INT 2
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: LD_INT 2
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 0
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 2
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 3
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49084: LD_ADDR_VAR 0 25
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 0
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 0
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: LD_INT 1
49157: NEG
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 2
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 2
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 1
49249: NEG
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 2
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 3
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 3
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: PUSH
49326: LD_INT 3
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49358: LD_ADDR_VAR 0 26
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 0
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: LD_INT 0
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: LD_INT 2
49443: NEG
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 0
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 1
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 2
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 2
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 2
49600: NEG
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49634: LD_ADDR_VAR 0 27
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: LD_INT 0
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 0
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: PUSH
49673: LD_INT 1
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: NEG
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 2
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 2
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 2
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: NEG
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: NEG
49822: PUSH
49823: LD_INT 1
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: NEG
49834: PUSH
49835: LD_INT 2
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: LD_INT 2
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 2
49856: NEG
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 3
49867: NEG
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49914: LD_ADDR_VAR 0 28
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: LD_INT 3
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: LD_INT 3
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 3
50149: NEG
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: NEG
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: LIST
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50196: LD_ADDR_VAR 0 29
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 2
50362: NEG
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 3
50390: NEG
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 3
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 3
50440: NEG
50441: PUSH
50442: LD_INT 2
50444: NEG
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50475: LD_ADDR_VAR 0 30
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 0
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: LD_INT 1
50656: NEG
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 3
50668: NEG
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 2
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 3
50687: PUSH
50688: LD_INT 2
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: LD_INT 3
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50753: LD_ADDR_VAR 0 31
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: LD_INT 1
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 1
50781: PUSH
50782: LD_INT 0
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 0
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 2
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: NEG
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 2
50930: NEG
50931: PUSH
50932: LD_INT 2
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 3
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51031: LD_ADDR_VAR 0 32
51035: PUSH
51036: LD_INT 0
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 1
51089: NEG
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 2
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 3
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 2
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 3
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 3
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51309: LD_ADDR_VAR 0 33
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 2
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 2
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 2
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: NEG
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 3
51503: NEG
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 3
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51588: LD_ADDR_VAR 0 34
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: LD_INT 2
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: LD_INT 2
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: NEG
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 2
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: LD_INT 2
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 3
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51868: LD_ADDR_VAR 0 35
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 0
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51980: LD_ADDR_VAR 0 36
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 0
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 1
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: NEG
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 1
52053: NEG
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52092: LD_ADDR_VAR 0 37
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 0
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 1
52161: NEG
52162: PUSH
52163: LD_INT 1
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52204: LD_ADDR_VAR 0 38
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 1
52273: NEG
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: NEG
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52316: LD_ADDR_VAR 0 39
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 1
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 2
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52428: LD_ADDR_VAR 0 40
52432: PUSH
52433: LD_INT 0
52435: PUSH
52436: LD_INT 0
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: LD_INT 1
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 0
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: EMPTY
52481: LIST
52482: LIST
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 1
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52540: LD_ADDR_VAR 0 41
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: LD_INT 1
52560: NEG
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: LD_INT 0
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 0
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 1
52598: NEG
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 2
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 0
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: LD_INT 2
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: LD_INT 3
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 3
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: LD_INT 3
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 2
52803: NEG
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: NEG
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 3
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52890: LD_ADDR_VAR 0 42
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: PUSH
53016: LD_INT 2
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 2
53080: NEG
53081: PUSH
53082: LD_INT 3
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 3
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: LD_INT 3
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 0
53166: PUSH
53167: LD_INT 3
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: NEG
53177: PUSH
53178: LD_INT 2
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: LD_INT 2
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53240: LD_ADDR_VAR 0 43
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 1
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 2
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 2
53365: PUSH
53366: LD_INT 1
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 2
53406: NEG
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 1
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 3
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: PUSH
53464: LD_INT 1
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 3
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 3
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53588: LD_ADDR_VAR 0 44
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 1
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 2
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 2
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 1
53722: PUSH
53723: LD_INT 2
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: NEG
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: NEG
53779: PUSH
53780: LD_INT 3
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 3
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 3
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 3
53862: NEG
53863: PUSH
53864: LD_INT 0
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 3
53873: NEG
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 3
53885: NEG
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 3
53897: NEG
53898: PUSH
53899: LD_INT 3
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53938: LD_ADDR_VAR 0 45
53942: PUSH
53943: LD_INT 0
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 0
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 1
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 1
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 1
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 2
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 1
54140: NEG
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: LD_INT 2
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: LD_INT 3
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 3
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: PUSH
54205: LD_INT 3
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 0
54214: PUSH
54215: LD_INT 3
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: NEG
54236: PUSH
54237: LD_INT 2
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54288: LD_ADDR_VAR 0 46
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 2
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 2
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 0
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: LD_INT 2
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 3
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: LD_INT 3
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 0
54552: PUSH
54553: LD_INT 3
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 3
54584: NEG
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 3
54595: NEG
54596: PUSH
54597: LD_INT 1
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54636: LD_ADDR_VAR 0 47
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 1
54705: NEG
54706: PUSH
54707: LD_INT 1
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54787: LD_ADDR_VAR 0 48
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 1
54856: NEG
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 2
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54934: LD_ADDR_VAR 0 49
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 0
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 0
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55078: LD_ADDR_VAR 0 50
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: LD_INT 0
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 1
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 0
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55222: LD_ADDR_VAR 0 51
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 1
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 2
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 2
55345: NEG
55346: PUSH
55347: LD_INT 1
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55369: LD_ADDR_VAR 0 52
55373: PUSH
55374: LD_INT 0
55376: PUSH
55377: LD_INT 0
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 1
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: NEG
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: NEG
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 2
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55520: LD_ADDR_VAR 0 53
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 1
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 0
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: LD_INT 1
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: LD_INT 2
55616: NEG
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 2
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: NEG
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55750: LD_ADDR_VAR 0 54
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 0
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: LD_INT 1
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 1
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 2
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 1
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 2
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 2
55937: NEG
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55980: LD_ADDR_VAR 0 55
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 1
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 2
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 1
56145: NEG
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 2
56167: NEG
56168: PUSH
56169: LD_INT 1
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56210: LD_ADDR_VAR 0 56
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: LD_INT 0
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: LD_INT 1
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 1
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 1
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 1
56268: NEG
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 2
56335: PUSH
56336: LD_INT 1
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 2
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 2
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: LD_INT 0
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: NEG
56398: PUSH
56399: LD_INT 1
56401: NEG
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: NEG
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56440: LD_ADDR_VAR 0 57
56444: PUSH
56445: LD_INT 0
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 1
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: LD_INT 0
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 2
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 1
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 2
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: LD_INT 2
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: LD_INT 2
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 1
56605: NEG
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 2
56627: NEG
56628: PUSH
56629: LD_INT 1
56631: NEG
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56670: LD_ADDR_VAR 0 58
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 0
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: LD_INT 1
56777: NEG
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 0
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 2
56805: PUSH
56806: LD_INT 2
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 2
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 2
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56900: LD_ADDR_VAR 0 59
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: PUSH
56939: LD_INT 1
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 1
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 1
56958: NEG
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56988: LD_ADDR_VAR 0 60
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57076: LD_ADDR_VAR 0 61
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57164: LD_ADDR_VAR 0 62
57168: PUSH
57169: LD_INT 0
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 1
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: LD_INT 1
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57252: LD_ADDR_VAR 0 63
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 0
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: NEG
57311: PUSH
57312: LD_INT 0
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57340: LD_ADDR_VAR 0 64
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: LD_INT 0
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: NEG
57410: PUSH
57411: LD_INT 1
57413: NEG
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: ST_TO_ADDR
// end ; 1 :
57428: GO 63325
57430: LD_INT 1
57432: DOUBLE
57433: EQUAL
57434: IFTRUE 57438
57436: GO 60061
57438: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57439: LD_ADDR_VAR 0 11
57443: PUSH
57444: LD_INT 1
57446: NEG
57447: PUSH
57448: LD_INT 3
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: LD_INT 3
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: LIST
57482: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57483: LD_ADDR_VAR 0 12
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: LIST
57523: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57524: LD_ADDR_VAR 0 13
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: PUSH
57542: LD_INT 3
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: LIST
57563: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57564: LD_ADDR_VAR 0 14
57568: PUSH
57569: LD_INT 1
57571: PUSH
57572: LD_INT 3
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 3
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57605: LD_ADDR_VAR 0 15
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57649: LD_ADDR_VAR 0 16
57653: PUSH
57654: LD_INT 2
57656: NEG
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 3
57668: NEG
57669: PUSH
57670: LD_INT 2
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: LD_INT 3
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: LIST
57694: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57695: LD_ADDR_VAR 0 17
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 3
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 3
57717: NEG
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: LIST
57738: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57739: LD_ADDR_VAR 0 18
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 3
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: LIST
57779: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57780: LD_ADDR_VAR 0 19
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 3
57797: PUSH
57798: LD_INT 3
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57820: LD_ADDR_VAR 0 20
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 3
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 3
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57861: LD_ADDR_VAR 0 21
57865: PUSH
57866: LD_INT 2
57868: NEG
57869: PUSH
57870: LD_INT 1
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57905: LD_ADDR_VAR 0 22
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 3
57916: NEG
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 3
57924: NEG
57925: PUSH
57926: LD_INT 2
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: LD_INT 3
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57951: LD_ADDR_VAR 0 23
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 3
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 1
57969: NEG
57970: PUSH
57971: LD_INT 4
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 3
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57995: LD_ADDR_VAR 0 24
57999: PUSH
58000: LD_INT 3
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 4
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58036: LD_ADDR_VAR 0 25
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 4
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 3
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: LIST
58075: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58076: LD_ADDR_VAR 0 26
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 3
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 4
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 1
58103: NEG
58104: PUSH
58105: LD_INT 3
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58117: LD_ADDR_VAR 0 27
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 3
58135: NEG
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 4
58146: NEG
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: LIST
58160: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58161: LD_ADDR_VAR 0 28
58165: PUSH
58166: LD_INT 3
58168: NEG
58169: PUSH
58170: LD_INT 3
58172: NEG
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: NEG
58181: PUSH
58182: LD_INT 4
58184: NEG
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: LD_INT 4
58192: NEG
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58207: LD_ADDR_VAR 0 29
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 3
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 3
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 4
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 4
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 5
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: LD_INT 5
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 4
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 6
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 6
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 5
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58362: LD_ADDR_VAR 0 30
58366: PUSH
58367: LD_INT 2
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 3
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 3
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: LD_INT 1
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 4
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 5
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 5
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 5
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 6
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 6
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58505: LD_ADDR_VAR 0 31
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: LD_INT 2
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 3
58522: PUSH
58523: LD_INT 3
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 3
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 4
58542: PUSH
58543: LD_INT 3
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 4
58552: PUSH
58553: LD_INT 4
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 3
58562: PUSH
58563: LD_INT 4
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 5
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 5
58582: PUSH
58583: LD_INT 5
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 4
58592: PUSH
58593: LD_INT 5
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 6
58602: PUSH
58603: LD_INT 5
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 6
58612: PUSH
58613: LD_INT 6
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 5
58622: PUSH
58623: LD_INT 6
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58644: LD_ADDR_VAR 0 32
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 0
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: LD_INT 4
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 0
58692: PUSH
58693: LD_INT 4
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 1
58713: PUSH
58714: LD_INT 5
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 0
58723: PUSH
58724: LD_INT 5
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: LD_INT 4
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: LD_INT 6
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 0
58754: PUSH
58755: LD_INT 6
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 5
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58787: LD_ADDR_VAR 0 33
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: LD_INT 1
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 3
58816: NEG
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 4
58839: NEG
58840: PUSH
58841: LD_INT 0
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 4
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 5
58873: NEG
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 5
58884: NEG
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 5
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 6
58907: NEG
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 6
58918: NEG
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58942: LD_ADDR_VAR 0 34
58946: PUSH
58947: LD_INT 2
58949: NEG
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 3
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 3
58977: NEG
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: LD_INT 3
58985: NEG
58986: PUSH
58987: LD_INT 4
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 4
58997: NEG
58998: PUSH
58999: LD_INT 3
59001: NEG
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 4
59009: NEG
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: LD_INT 5
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 5
59033: NEG
59034: PUSH
59035: LD_INT 4
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 5
59045: NEG
59046: PUSH
59047: LD_INT 5
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 5
59057: NEG
59058: PUSH
59059: LD_INT 6
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 6
59069: NEG
59070: PUSH
59071: LD_INT 5
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 6
59081: NEG
59082: PUSH
59083: LD_INT 6
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59105: LD_ADDR_VAR 0 41
59109: PUSH
59110: LD_INT 0
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: NEG
59124: PUSH
59125: LD_INT 3
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59149: LD_ADDR_VAR 0 42
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 3
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59190: LD_ADDR_VAR 0 43
59194: PUSH
59195: LD_INT 2
59197: PUSH
59198: LD_INT 2
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: LIST
59229: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59230: LD_ADDR_VAR 0 44
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 3
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59271: LD_ADDR_VAR 0 45
59275: PUSH
59276: LD_INT 2
59278: NEG
59279: PUSH
59280: LD_INT 0
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 2
59289: NEG
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 3
59300: NEG
59301: PUSH
59302: LD_INT 1
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: LIST
59314: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59315: LD_ADDR_VAR 0 46
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 3
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 3
59346: NEG
59347: PUSH
59348: LD_INT 2
59350: NEG
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: LIST
59360: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59361: LD_ADDR_VAR 0 47
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 3
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: LD_INT 3
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59394: LD_ADDR_VAR 0 48
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 2
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 2
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59425: LD_ADDR_VAR 0 49
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 3
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59454: LD_ADDR_VAR 0 50
59458: PUSH
59459: LD_INT 2
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 3
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59483: LD_ADDR_VAR 0 51
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 2
59501: NEG
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59514: LD_ADDR_VAR 0 52
59518: PUSH
59519: LD_INT 3
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: NEG
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59547: LD_ADDR_VAR 0 53
59551: PUSH
59552: LD_INT 1
59554: NEG
59555: PUSH
59556: LD_INT 3
59558: NEG
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 2
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: LIST
59590: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59591: LD_ADDR_VAR 0 54
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59632: LD_ADDR_VAR 0 55
59636: PUSH
59637: LD_INT 3
59639: PUSH
59640: LD_INT 2
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 3
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59672: LD_ADDR_VAR 0 56
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 0
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59713: LD_ADDR_VAR 0 57
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 1
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 3
59731: NEG
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59757: LD_ADDR_VAR 0 58
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 3
59776: NEG
59777: PUSH
59778: LD_INT 2
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 3
59788: NEG
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59803: LD_ADDR_VAR 0 59
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 2
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: LIST
59846: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59847: LD_ADDR_VAR 0 60
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: LD_INT 1
59857: NEG
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: LD_INT 1
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59888: LD_ADDR_VAR 0 61
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: LIST
59927: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59928: LD_ADDR_VAR 0 62
59932: PUSH
59933: LD_INT 1
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 0
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 1
59955: NEG
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59969: LD_ADDR_VAR 0 63
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 2
59987: NEG
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: LIST
60012: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60013: LD_ADDR_VAR 0 64
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 1
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: LIST
60058: ST_TO_ADDR
// end ; 2 :
60059: GO 63325
60061: LD_INT 2
60063: DOUBLE
60064: EQUAL
60065: IFTRUE 60069
60067: GO 63324
60069: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60070: LD_ADDR_VAR 0 29
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 5
60098: PUSH
60099: LD_INT 0
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 5
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 1
60141: NEG
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 5
60160: PUSH
60161: LD_INT 2
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 3
60180: PUSH
60181: LD_INT 2
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: LD_INT 3
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: PUSH
60198: LD_INT 4
60200: PUSH
60201: LD_INT 4
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 3
60210: PUSH
60211: LD_INT 4
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: LD_INT 2
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 4
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: LD_INT 4
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 4
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: LD_INT 3
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 4
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: LD_INT 5
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 5
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 4
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: LD_INT 5
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 3
60353: NEG
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 1
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 2
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 4
60409: NEG
60410: PUSH
60411: LD_INT 0
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 4
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 4
60432: NEG
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: NEG
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 4
60455: NEG
60456: PUSH
60457: LD_INT 4
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 4
60467: NEG
60468: PUSH
60469: LD_INT 5
60471: NEG
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 3
60479: NEG
60480: PUSH
60481: LD_INT 4
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 3
60491: NEG
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 4
60503: NEG
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 5
60515: NEG
60516: PUSH
60517: LD_INT 4
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 5
60527: NEG
60528: PUSH
60529: LD_INT 5
60531: NEG
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: LD_INT 5
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 5
60551: NEG
60552: PUSH
60553: LD_INT 3
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60608: LD_ADDR_VAR 0 30
60612: PUSH
60613: LD_INT 4
60615: PUSH
60616: LD_INT 4
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 4
60625: PUSH
60626: LD_INT 3
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 5
60635: PUSH
60636: LD_INT 4
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 5
60645: PUSH
60646: LD_INT 5
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 4
60655: PUSH
60656: LD_INT 5
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 3
60665: PUSH
60666: LD_INT 4
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 3
60675: PUSH
60676: LD_INT 3
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 5
60685: PUSH
60686: LD_INT 3
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 3
60695: PUSH
60696: LD_INT 5
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: LD_INT 3
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 0
60715: PUSH
60716: LD_INT 2
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: LD_INT 3
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: LD_INT 4
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: LD_INT 4
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 3
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: LD_INT 2
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: NEG
60799: PUSH
60800: LD_INT 0
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 4
60809: NEG
60810: PUSH
60811: LD_INT 1
60813: NEG
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: NEG
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 3
60832: NEG
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 5
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 5
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 5
60877: NEG
60878: PUSH
60879: LD_INT 2
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: NEG
60890: PUSH
60891: LD_INT 2
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: LD_INT 3
60904: NEG
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 3
60912: NEG
60913: PUSH
60914: LD_INT 4
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: NEG
60925: PUSH
60926: LD_INT 3
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 2
60936: NEG
60937: PUSH
60938: LD_INT 2
60940: NEG
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 3
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 4
60960: NEG
60961: PUSH
60962: LD_INT 3
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 4
60972: NEG
60973: PUSH
60974: LD_INT 4
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: LD_INT 4
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 4
60996: NEG
60997: PUSH
60998: LD_INT 2
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 0
61008: PUSH
61009: LD_INT 4
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 0
61019: PUSH
61020: LD_INT 5
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 4
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 3
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 3
61055: NEG
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 1
61063: NEG
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 5
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 2
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 2
61098: NEG
61099: PUSH
61100: LD_INT 5
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61155: LD_ADDR_VAR 0 31
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: LD_INT 4
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 4
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 5
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 4
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: LD_INT 2
61234: PUSH
61235: LD_INT 5
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 3
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: LD_INT 0
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 3
61266: NEG
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: NEG
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 2
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 4
61311: NEG
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 4
61322: NEG
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 4
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 2
61346: NEG
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 4
61357: NEG
61358: PUSH
61359: LD_INT 4
61361: NEG
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: PUSH
61367: LD_INT 4
61369: NEG
61370: PUSH
61371: LD_INT 5
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 3
61381: NEG
61382: PUSH
61383: LD_INT 4
61385: NEG
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: LD_INT 3
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 4
61405: NEG
61406: PUSH
61407: LD_INT 3
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 5
61417: NEG
61418: PUSH
61419: LD_INT 4
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 5
61429: NEG
61430: PUSH
61431: LD_INT 5
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: LD_INT 5
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 5
61453: NEG
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 3
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 4
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: LD_INT 3
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 1
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: LD_INT 2
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 1
61520: NEG
61521: PUSH
61522: LD_INT 3
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: NEG
61533: PUSH
61534: LD_INT 4
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 2
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: NEG
61556: PUSH
61557: LD_INT 4
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 4
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 4
61577: PUSH
61578: LD_INT 1
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 5
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 5
61598: PUSH
61599: LD_INT 1
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 3
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 5
61650: PUSH
61651: LD_INT 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61705: LD_ADDR_VAR 0 32
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: LD_INT 0
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 4
61723: NEG
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 3
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 4
61757: NEG
61758: PUSH
61759: LD_INT 1
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 5
61768: NEG
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 5
61779: NEG
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 5
61791: NEG
61792: PUSH
61793: LD_INT 2
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 3
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 3
61814: NEG
61815: PUSH
61816: LD_INT 3
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 3
61826: NEG
61827: PUSH
61828: LD_INT 4
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 2
61838: NEG
61839: PUSH
61840: LD_INT 3
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 2
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: NEG
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 4
61874: NEG
61875: PUSH
61876: LD_INT 3
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 4
61886: NEG
61887: PUSH
61888: LD_INT 4
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 2
61898: NEG
61899: PUSH
61900: LD_INT 4
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 4
61910: NEG
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 4
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: LD_INT 5
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 4
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: LD_INT 3
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 3
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: NEG
61978: PUSH
61979: LD_INT 4
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: LD_INT 5
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 3
62004: NEG
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 2
62012: NEG
62013: PUSH
62014: LD_INT 5
62016: NEG
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: LD_INT 0
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: LD_INT 1
62037: NEG
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 4
62045: PUSH
62046: LD_INT 0
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 4
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: LD_INT 1
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 2
62096: PUSH
62097: LD_INT 2
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: LD_INT 2
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: LD_INT 4
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 4
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 5
62137: PUSH
62138: LD_INT 4
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 5
62147: PUSH
62148: LD_INT 5
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 4
62157: PUSH
62158: LD_INT 5
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 3
62167: PUSH
62168: LD_INT 4
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 3
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 5
62187: PUSH
62188: LD_INT 3
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 3
62197: PUSH
62198: LD_INT 5
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62252: LD_ADDR_VAR 0 33
62256: PUSH
62257: LD_INT 4
62259: NEG
62260: PUSH
62261: LD_INT 4
62263: NEG
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 4
62271: NEG
62272: PUSH
62273: LD_INT 5
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: LD_INT 4
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 3
62295: NEG
62296: PUSH
62297: LD_INT 3
62299: NEG
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 4
62307: NEG
62308: PUSH
62309: LD_INT 3
62311: NEG
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 5
62319: NEG
62320: PUSH
62321: LD_INT 4
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 5
62331: NEG
62332: PUSH
62333: LD_INT 5
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: LD_INT 5
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 5
62355: NEG
62356: PUSH
62357: LD_INT 3
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: LD_INT 3
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 4
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: LD_INT 3
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 2
62414: NEG
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 4
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 2
62457: NEG
62458: PUSH
62459: LD_INT 4
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 4
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: LD_INT 1
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 5
62490: PUSH
62491: LD_INT 0
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 5
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 4
62510: PUSH
62511: LD_INT 1
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 3
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 3
62530: PUSH
62531: LD_INT 1
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: LD_INT 2
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: LD_INT 2
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 3
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 4
62582: PUSH
62583: LD_INT 3
62585: PUSH
62586: EMPTY
62587: LIST
62588: LIST
62589: PUSH
62590: LD_INT 4
62592: PUSH
62593: LD_INT 4
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: LD_INT 4
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: PUSH
62610: LD_INT 2
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: PUSH
62623: LD_INT 2
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 4
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: PUSH
62643: LD_INT 4
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: LD_INT 4
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: LD_INT 1
62672: PUSH
62673: LD_INT 4
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 1
62682: PUSH
62683: LD_INT 5
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 5
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: LD_INT 4
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: LD_INT 5
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62790: LD_ADDR_VAR 0 34
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 4
62800: NEG
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 5
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 4
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 3
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: LD_INT 4
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: LD_INT 5
62868: NEG
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 2
62876: PUSH
62877: LD_INT 3
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 2
62887: NEG
62888: PUSH
62889: LD_INT 5
62891: NEG
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: PUSH
62897: LD_INT 3
62899: PUSH
62900: LD_INT 0
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: PUSH
62907: LD_INT 3
62909: PUSH
62910: LD_INT 1
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 4
62920: PUSH
62921: LD_INT 0
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 4
62930: PUSH
62931: LD_INT 1
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 2
62950: PUSH
62951: LD_INT 0
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: PUSH
62961: LD_INT 1
62963: NEG
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: LD_INT 2
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 4
62982: PUSH
62983: LD_INT 2
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 4
62992: PUSH
62993: LD_INT 4
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 4
63002: PUSH
63003: LD_INT 3
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 5
63012: PUSH
63013: LD_INT 4
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 5
63022: PUSH
63023: LD_INT 5
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 4
63032: PUSH
63033: LD_INT 5
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: LD_INT 4
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 3
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 5
63062: PUSH
63063: LD_INT 3
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 3
63072: PUSH
63073: LD_INT 5
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 0
63092: PUSH
63093: LD_INT 2
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 1
63112: PUSH
63113: LD_INT 4
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 0
63122: PUSH
63123: LD_INT 4
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 2
63154: PUSH
63155: LD_INT 4
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 4
63175: NEG
63176: PUSH
63177: LD_INT 0
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 4
63186: NEG
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 4
63220: NEG
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 5
63231: NEG
63232: PUSH
63233: LD_INT 0
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 5
63242: NEG
63243: PUSH
63244: LD_INT 1
63246: NEG
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 5
63254: NEG
63255: PUSH
63256: LD_INT 2
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// end ; end ;
63322: GO 63325
63324: POP
// case btype of b_depot , b_warehouse :
63325: LD_VAR 0 1
63329: PUSH
63330: LD_INT 0
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63344
63336: LD_INT 1
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63344
63342: GO 63545
63344: POP
// case nation of nation_american :
63345: LD_VAR 0 5
63349: PUSH
63350: LD_INT 1
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63358
63356: GO 63414
63358: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63359: LD_ADDR_VAR 0 9
63363: PUSH
63364: LD_VAR 0 11
63368: PUSH
63369: LD_VAR 0 12
63373: PUSH
63374: LD_VAR 0 13
63378: PUSH
63379: LD_VAR 0 14
63383: PUSH
63384: LD_VAR 0 15
63388: PUSH
63389: LD_VAR 0 16
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: PUSH
63402: LD_VAR 0 4
63406: PUSH
63407: LD_INT 1
63409: PLUS
63410: ARRAY
63411: ST_TO_ADDR
63412: GO 63543
63414: LD_INT 2
63416: DOUBLE
63417: EQUAL
63418: IFTRUE 63422
63420: GO 63478
63422: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63423: LD_ADDR_VAR 0 9
63427: PUSH
63428: LD_VAR 0 17
63432: PUSH
63433: LD_VAR 0 18
63437: PUSH
63438: LD_VAR 0 19
63442: PUSH
63443: LD_VAR 0 20
63447: PUSH
63448: LD_VAR 0 21
63452: PUSH
63453: LD_VAR 0 22
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: PUSH
63466: LD_VAR 0 4
63470: PUSH
63471: LD_INT 1
63473: PLUS
63474: ARRAY
63475: ST_TO_ADDR
63476: GO 63543
63478: LD_INT 3
63480: DOUBLE
63481: EQUAL
63482: IFTRUE 63486
63484: GO 63542
63486: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63487: LD_ADDR_VAR 0 9
63491: PUSH
63492: LD_VAR 0 23
63496: PUSH
63497: LD_VAR 0 24
63501: PUSH
63502: LD_VAR 0 25
63506: PUSH
63507: LD_VAR 0 26
63511: PUSH
63512: LD_VAR 0 27
63516: PUSH
63517: LD_VAR 0 28
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: PUSH
63530: LD_VAR 0 4
63534: PUSH
63535: LD_INT 1
63537: PLUS
63538: ARRAY
63539: ST_TO_ADDR
63540: GO 63543
63542: POP
63543: GO 64098
63545: LD_INT 2
63547: DOUBLE
63548: EQUAL
63549: IFTRUE 63559
63551: LD_INT 3
63553: DOUBLE
63554: EQUAL
63555: IFTRUE 63559
63557: GO 63615
63559: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63560: LD_ADDR_VAR 0 9
63564: PUSH
63565: LD_VAR 0 29
63569: PUSH
63570: LD_VAR 0 30
63574: PUSH
63575: LD_VAR 0 31
63579: PUSH
63580: LD_VAR 0 32
63584: PUSH
63585: LD_VAR 0 33
63589: PUSH
63590: LD_VAR 0 34
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: PUSH
63603: LD_VAR 0 4
63607: PUSH
63608: LD_INT 1
63610: PLUS
63611: ARRAY
63612: ST_TO_ADDR
63613: GO 64098
63615: LD_INT 16
63617: DOUBLE
63618: EQUAL
63619: IFTRUE 63677
63621: LD_INT 17
63623: DOUBLE
63624: EQUAL
63625: IFTRUE 63677
63627: LD_INT 18
63629: DOUBLE
63630: EQUAL
63631: IFTRUE 63677
63633: LD_INT 19
63635: DOUBLE
63636: EQUAL
63637: IFTRUE 63677
63639: LD_INT 22
63641: DOUBLE
63642: EQUAL
63643: IFTRUE 63677
63645: LD_INT 20
63647: DOUBLE
63648: EQUAL
63649: IFTRUE 63677
63651: LD_INT 21
63653: DOUBLE
63654: EQUAL
63655: IFTRUE 63677
63657: LD_INT 23
63659: DOUBLE
63660: EQUAL
63661: IFTRUE 63677
63663: LD_INT 24
63665: DOUBLE
63666: EQUAL
63667: IFTRUE 63677
63669: LD_INT 25
63671: DOUBLE
63672: EQUAL
63673: IFTRUE 63677
63675: GO 63733
63677: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63678: LD_ADDR_VAR 0 9
63682: PUSH
63683: LD_VAR 0 35
63687: PUSH
63688: LD_VAR 0 36
63692: PUSH
63693: LD_VAR 0 37
63697: PUSH
63698: LD_VAR 0 38
63702: PUSH
63703: LD_VAR 0 39
63707: PUSH
63708: LD_VAR 0 40
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: PUSH
63721: LD_VAR 0 4
63725: PUSH
63726: LD_INT 1
63728: PLUS
63729: ARRAY
63730: ST_TO_ADDR
63731: GO 64098
63733: LD_INT 6
63735: DOUBLE
63736: EQUAL
63737: IFTRUE 63789
63739: LD_INT 7
63741: DOUBLE
63742: EQUAL
63743: IFTRUE 63789
63745: LD_INT 8
63747: DOUBLE
63748: EQUAL
63749: IFTRUE 63789
63751: LD_INT 13
63753: DOUBLE
63754: EQUAL
63755: IFTRUE 63789
63757: LD_INT 12
63759: DOUBLE
63760: EQUAL
63761: IFTRUE 63789
63763: LD_INT 15
63765: DOUBLE
63766: EQUAL
63767: IFTRUE 63789
63769: LD_INT 11
63771: DOUBLE
63772: EQUAL
63773: IFTRUE 63789
63775: LD_INT 14
63777: DOUBLE
63778: EQUAL
63779: IFTRUE 63789
63781: LD_INT 10
63783: DOUBLE
63784: EQUAL
63785: IFTRUE 63789
63787: GO 63845
63789: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63790: LD_ADDR_VAR 0 9
63794: PUSH
63795: LD_VAR 0 41
63799: PUSH
63800: LD_VAR 0 42
63804: PUSH
63805: LD_VAR 0 43
63809: PUSH
63810: LD_VAR 0 44
63814: PUSH
63815: LD_VAR 0 45
63819: PUSH
63820: LD_VAR 0 46
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: PUSH
63833: LD_VAR 0 4
63837: PUSH
63838: LD_INT 1
63840: PLUS
63841: ARRAY
63842: ST_TO_ADDR
63843: GO 64098
63845: LD_INT 36
63847: DOUBLE
63848: EQUAL
63849: IFTRUE 63853
63851: GO 63909
63853: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63854: LD_ADDR_VAR 0 9
63858: PUSH
63859: LD_VAR 0 47
63863: PUSH
63864: LD_VAR 0 48
63868: PUSH
63869: LD_VAR 0 49
63873: PUSH
63874: LD_VAR 0 50
63878: PUSH
63879: LD_VAR 0 51
63883: PUSH
63884: LD_VAR 0 52
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: PUSH
63897: LD_VAR 0 4
63901: PUSH
63902: LD_INT 1
63904: PLUS
63905: ARRAY
63906: ST_TO_ADDR
63907: GO 64098
63909: LD_INT 4
63911: DOUBLE
63912: EQUAL
63913: IFTRUE 63935
63915: LD_INT 5
63917: DOUBLE
63918: EQUAL
63919: IFTRUE 63935
63921: LD_INT 34
63923: DOUBLE
63924: EQUAL
63925: IFTRUE 63935
63927: LD_INT 37
63929: DOUBLE
63930: EQUAL
63931: IFTRUE 63935
63933: GO 63991
63935: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63936: LD_ADDR_VAR 0 9
63940: PUSH
63941: LD_VAR 0 53
63945: PUSH
63946: LD_VAR 0 54
63950: PUSH
63951: LD_VAR 0 55
63955: PUSH
63956: LD_VAR 0 56
63960: PUSH
63961: LD_VAR 0 57
63965: PUSH
63966: LD_VAR 0 58
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: PUSH
63979: LD_VAR 0 4
63983: PUSH
63984: LD_INT 1
63986: PLUS
63987: ARRAY
63988: ST_TO_ADDR
63989: GO 64098
63991: LD_INT 31
63993: DOUBLE
63994: EQUAL
63995: IFTRUE 64041
63997: LD_INT 32
63999: DOUBLE
64000: EQUAL
64001: IFTRUE 64041
64003: LD_INT 33
64005: DOUBLE
64006: EQUAL
64007: IFTRUE 64041
64009: LD_INT 27
64011: DOUBLE
64012: EQUAL
64013: IFTRUE 64041
64015: LD_INT 26
64017: DOUBLE
64018: EQUAL
64019: IFTRUE 64041
64021: LD_INT 28
64023: DOUBLE
64024: EQUAL
64025: IFTRUE 64041
64027: LD_INT 29
64029: DOUBLE
64030: EQUAL
64031: IFTRUE 64041
64033: LD_INT 30
64035: DOUBLE
64036: EQUAL
64037: IFTRUE 64041
64039: GO 64097
64041: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64042: LD_ADDR_VAR 0 9
64046: PUSH
64047: LD_VAR 0 59
64051: PUSH
64052: LD_VAR 0 60
64056: PUSH
64057: LD_VAR 0 61
64061: PUSH
64062: LD_VAR 0 62
64066: PUSH
64067: LD_VAR 0 63
64071: PUSH
64072: LD_VAR 0 64
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: PUSH
64085: LD_VAR 0 4
64089: PUSH
64090: LD_INT 1
64092: PLUS
64093: ARRAY
64094: ST_TO_ADDR
64095: GO 64098
64097: POP
// temp_list2 = [ ] ;
64098: LD_ADDR_VAR 0 10
64102: PUSH
64103: EMPTY
64104: ST_TO_ADDR
// for i in temp_list do
64105: LD_ADDR_VAR 0 8
64109: PUSH
64110: LD_VAR 0 9
64114: PUSH
64115: FOR_IN
64116: IFFALSE 64168
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64118: LD_ADDR_VAR 0 10
64122: PUSH
64123: LD_VAR 0 10
64127: PUSH
64128: LD_VAR 0 8
64132: PUSH
64133: LD_INT 1
64135: ARRAY
64136: PUSH
64137: LD_VAR 0 2
64141: PLUS
64142: PUSH
64143: LD_VAR 0 8
64147: PUSH
64148: LD_INT 2
64150: ARRAY
64151: PUSH
64152: LD_VAR 0 3
64156: PLUS
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: EMPTY
64163: LIST
64164: ADD
64165: ST_TO_ADDR
64166: GO 64115
64168: POP
64169: POP
// result = temp_list2 ;
64170: LD_ADDR_VAR 0 7
64174: PUSH
64175: LD_VAR 0 10
64179: ST_TO_ADDR
// end ;
64180: LD_VAR 0 7
64184: RET
// export function EnemyInRange ( unit , dist ) ; begin
64185: LD_INT 0
64187: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64188: LD_ADDR_VAR 0 3
64192: PUSH
64193: LD_VAR 0 1
64197: PPUSH
64198: CALL_OW 255
64202: PPUSH
64203: LD_VAR 0 1
64207: PPUSH
64208: CALL_OW 250
64212: PPUSH
64213: LD_VAR 0 1
64217: PPUSH
64218: CALL_OW 251
64222: PPUSH
64223: LD_VAR 0 2
64227: PPUSH
64228: CALL 37558 0 4
64232: PUSH
64233: LD_INT 4
64235: ARRAY
64236: ST_TO_ADDR
// end ;
64237: LD_VAR 0 3
64241: RET
// export function PlayerSeeMe ( unit ) ; begin
64242: LD_INT 0
64244: PPUSH
// result := See ( your_side , unit ) ;
64245: LD_ADDR_VAR 0 2
64249: PUSH
64250: LD_OWVAR 2
64254: PPUSH
64255: LD_VAR 0 1
64259: PPUSH
64260: CALL_OW 292
64264: ST_TO_ADDR
// end ;
64265: LD_VAR 0 2
64269: RET
// export function ReverseDir ( unit ) ; begin
64270: LD_INT 0
64272: PPUSH
// if not unit then
64273: LD_VAR 0 1
64277: NOT
64278: IFFALSE 64282
// exit ;
64280: GO 64305
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64282: LD_ADDR_VAR 0 2
64286: PUSH
64287: LD_VAR 0 1
64291: PPUSH
64292: CALL_OW 254
64296: PUSH
64297: LD_INT 3
64299: PLUS
64300: PUSH
64301: LD_INT 6
64303: MOD
64304: ST_TO_ADDR
// end ;
64305: LD_VAR 0 2
64309: RET
// export function ReverseArray ( array ) ; var i ; begin
64310: LD_INT 0
64312: PPUSH
64313: PPUSH
// if not array then
64314: LD_VAR 0 1
64318: NOT
64319: IFFALSE 64323
// exit ;
64321: GO 64378
// result := [ ] ;
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: EMPTY
64329: ST_TO_ADDR
// for i := array downto 1 do
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: DOUBLE
64336: LD_VAR 0 1
64340: INC
64341: ST_TO_ADDR
64342: LD_INT 1
64344: PUSH
64345: FOR_DOWNTO
64346: IFFALSE 64376
// result := Join ( result , array [ i ] ) ;
64348: LD_ADDR_VAR 0 2
64352: PUSH
64353: LD_VAR 0 2
64357: PPUSH
64358: LD_VAR 0 1
64362: PUSH
64363: LD_VAR 0 3
64367: ARRAY
64368: PPUSH
64369: CALL 69034 0 2
64373: ST_TO_ADDR
64374: GO 64345
64376: POP
64377: POP
// end ;
64378: LD_VAR 0 2
64382: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64383: LD_INT 0
64385: PPUSH
64386: PPUSH
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
// if not unit or not hexes then
64391: LD_VAR 0 1
64395: NOT
64396: PUSH
64397: LD_VAR 0 2
64401: NOT
64402: OR
64403: IFFALSE 64407
// exit ;
64405: GO 64530
// dist := 9999 ;
64407: LD_ADDR_VAR 0 5
64411: PUSH
64412: LD_INT 9999
64414: ST_TO_ADDR
// for i = 1 to hexes do
64415: LD_ADDR_VAR 0 4
64419: PUSH
64420: DOUBLE
64421: LD_INT 1
64423: DEC
64424: ST_TO_ADDR
64425: LD_VAR 0 2
64429: PUSH
64430: FOR_TO
64431: IFFALSE 64518
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64433: LD_ADDR_VAR 0 6
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: LD_VAR 0 2
64447: PUSH
64448: LD_VAR 0 4
64452: ARRAY
64453: PUSH
64454: LD_INT 1
64456: ARRAY
64457: PPUSH
64458: LD_VAR 0 2
64462: PUSH
64463: LD_VAR 0 4
64467: ARRAY
64468: PUSH
64469: LD_INT 2
64471: ARRAY
64472: PPUSH
64473: CALL_OW 297
64477: ST_TO_ADDR
// if tdist < dist then
64478: LD_VAR 0 6
64482: PUSH
64483: LD_VAR 0 5
64487: LESS
64488: IFFALSE 64516
// begin hex := hexes [ i ] ;
64490: LD_ADDR_VAR 0 8
64494: PUSH
64495: LD_VAR 0 2
64499: PUSH
64500: LD_VAR 0 4
64504: ARRAY
64505: ST_TO_ADDR
// dist := tdist ;
64506: LD_ADDR_VAR 0 5
64510: PUSH
64511: LD_VAR 0 6
64515: ST_TO_ADDR
// end ; end ;
64516: GO 64430
64518: POP
64519: POP
// result := hex ;
64520: LD_ADDR_VAR 0 3
64524: PUSH
64525: LD_VAR 0 8
64529: ST_TO_ADDR
// end ;
64530: LD_VAR 0 3
64534: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64535: LD_INT 0
64537: PPUSH
64538: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64539: LD_VAR 0 1
64543: NOT
64544: PUSH
64545: LD_VAR 0 1
64549: PUSH
64550: LD_INT 21
64552: PUSH
64553: LD_INT 2
64555: PUSH
64556: EMPTY
64557: LIST
64558: LIST
64559: PUSH
64560: LD_INT 23
64562: PUSH
64563: LD_INT 2
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PPUSH
64574: CALL_OW 69
64578: IN
64579: NOT
64580: OR
64581: IFFALSE 64585
// exit ;
64583: GO 64632
// for i = 1 to 3 do
64585: LD_ADDR_VAR 0 3
64589: PUSH
64590: DOUBLE
64591: LD_INT 1
64593: DEC
64594: ST_TO_ADDR
64595: LD_INT 3
64597: PUSH
64598: FOR_TO
64599: IFFALSE 64630
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64601: LD_VAR 0 1
64605: PPUSH
64606: CALL_OW 250
64610: PPUSH
64611: LD_VAR 0 1
64615: PPUSH
64616: CALL_OW 251
64620: PPUSH
64621: LD_INT 1
64623: PPUSH
64624: CALL_OW 453
64628: GO 64598
64630: POP
64631: POP
// end ;
64632: LD_VAR 0 2
64636: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64637: LD_INT 0
64639: PPUSH
64640: PPUSH
64641: PPUSH
64642: PPUSH
64643: PPUSH
64644: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64645: LD_VAR 0 1
64649: NOT
64650: PUSH
64651: LD_VAR 0 2
64655: NOT
64656: OR
64657: PUSH
64658: LD_VAR 0 1
64662: PPUSH
64663: CALL_OW 314
64667: OR
64668: IFFALSE 64672
// exit ;
64670: GO 65139
// if GetLives ( i ) < 250 then
64672: LD_VAR 0 4
64676: PPUSH
64677: CALL_OW 256
64681: PUSH
64682: LD_INT 250
64684: LESS
64685: IFFALSE 64698
// begin ComAutodestruct ( i ) ;
64687: LD_VAR 0 4
64691: PPUSH
64692: CALL 64535 0 1
// exit ;
64696: GO 65139
// end ; x := GetX ( enemy_unit ) ;
64698: LD_ADDR_VAR 0 7
64702: PUSH
64703: LD_VAR 0 2
64707: PPUSH
64708: CALL_OW 250
64712: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64713: LD_ADDR_VAR 0 8
64717: PUSH
64718: LD_VAR 0 2
64722: PPUSH
64723: CALL_OW 251
64727: ST_TO_ADDR
// if not x or not y then
64728: LD_VAR 0 7
64732: NOT
64733: PUSH
64734: LD_VAR 0 8
64738: NOT
64739: OR
64740: IFFALSE 64744
// exit ;
64742: GO 65139
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64744: LD_ADDR_VAR 0 6
64748: PUSH
64749: LD_VAR 0 7
64753: PPUSH
64754: LD_INT 0
64756: PPUSH
64757: LD_INT 4
64759: PPUSH
64760: CALL_OW 272
64764: PUSH
64765: LD_VAR 0 8
64769: PPUSH
64770: LD_INT 0
64772: PPUSH
64773: LD_INT 4
64775: PPUSH
64776: CALL_OW 273
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_VAR 0 7
64789: PPUSH
64790: LD_INT 1
64792: PPUSH
64793: LD_INT 4
64795: PPUSH
64796: CALL_OW 272
64800: PUSH
64801: LD_VAR 0 8
64805: PPUSH
64806: LD_INT 1
64808: PPUSH
64809: LD_INT 4
64811: PPUSH
64812: CALL_OW 273
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_VAR 0 7
64825: PPUSH
64826: LD_INT 2
64828: PPUSH
64829: LD_INT 4
64831: PPUSH
64832: CALL_OW 272
64836: PUSH
64837: LD_VAR 0 8
64841: PPUSH
64842: LD_INT 2
64844: PPUSH
64845: LD_INT 4
64847: PPUSH
64848: CALL_OW 273
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_VAR 0 7
64861: PPUSH
64862: LD_INT 3
64864: PPUSH
64865: LD_INT 4
64867: PPUSH
64868: CALL_OW 272
64872: PUSH
64873: LD_VAR 0 8
64877: PPUSH
64878: LD_INT 3
64880: PPUSH
64881: LD_INT 4
64883: PPUSH
64884: CALL_OW 273
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_VAR 0 7
64897: PPUSH
64898: LD_INT 4
64900: PPUSH
64901: LD_INT 4
64903: PPUSH
64904: CALL_OW 272
64908: PUSH
64909: LD_VAR 0 8
64913: PPUSH
64914: LD_INT 4
64916: PPUSH
64917: LD_INT 4
64919: PPUSH
64920: CALL_OW 273
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_VAR 0 7
64933: PPUSH
64934: LD_INT 5
64936: PPUSH
64937: LD_INT 4
64939: PPUSH
64940: CALL_OW 272
64944: PUSH
64945: LD_VAR 0 8
64949: PPUSH
64950: LD_INT 5
64952: PPUSH
64953: LD_INT 4
64955: PPUSH
64956: CALL_OW 273
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: ST_TO_ADDR
// for i = tmp downto 1 do
64973: LD_ADDR_VAR 0 4
64977: PUSH
64978: DOUBLE
64979: LD_VAR 0 6
64983: INC
64984: ST_TO_ADDR
64985: LD_INT 1
64987: PUSH
64988: FOR_DOWNTO
64989: IFFALSE 65090
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64991: LD_VAR 0 6
64995: PUSH
64996: LD_VAR 0 4
65000: ARRAY
65001: PUSH
65002: LD_INT 1
65004: ARRAY
65005: PPUSH
65006: LD_VAR 0 6
65010: PUSH
65011: LD_VAR 0 4
65015: ARRAY
65016: PUSH
65017: LD_INT 2
65019: ARRAY
65020: PPUSH
65021: CALL_OW 488
65025: NOT
65026: PUSH
65027: LD_VAR 0 6
65031: PUSH
65032: LD_VAR 0 4
65036: ARRAY
65037: PUSH
65038: LD_INT 1
65040: ARRAY
65041: PPUSH
65042: LD_VAR 0 6
65046: PUSH
65047: LD_VAR 0 4
65051: ARRAY
65052: PUSH
65053: LD_INT 2
65055: ARRAY
65056: PPUSH
65057: CALL_OW 428
65061: PUSH
65062: LD_INT 0
65064: NONEQUAL
65065: OR
65066: IFFALSE 65088
// tmp := Delete ( tmp , i ) ;
65068: LD_ADDR_VAR 0 6
65072: PUSH
65073: LD_VAR 0 6
65077: PPUSH
65078: LD_VAR 0 4
65082: PPUSH
65083: CALL_OW 3
65087: ST_TO_ADDR
65088: GO 64988
65090: POP
65091: POP
// j := GetClosestHex ( unit , tmp ) ;
65092: LD_ADDR_VAR 0 5
65096: PUSH
65097: LD_VAR 0 1
65101: PPUSH
65102: LD_VAR 0 6
65106: PPUSH
65107: CALL 64383 0 2
65111: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65112: LD_VAR 0 1
65116: PPUSH
65117: LD_VAR 0 5
65121: PUSH
65122: LD_INT 1
65124: ARRAY
65125: PPUSH
65126: LD_VAR 0 5
65130: PUSH
65131: LD_INT 2
65133: ARRAY
65134: PPUSH
65135: CALL_OW 111
// end ;
65139: LD_VAR 0 3
65143: RET
// export function PrepareApemanSoldier ( ) ; begin
65144: LD_INT 0
65146: PPUSH
// uc_nation := 0 ;
65147: LD_ADDR_OWVAR 21
65151: PUSH
65152: LD_INT 0
65154: ST_TO_ADDR
// hc_sex := sex_male ;
65155: LD_ADDR_OWVAR 27
65159: PUSH
65160: LD_INT 1
65162: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65163: LD_ADDR_OWVAR 28
65167: PUSH
65168: LD_INT 15
65170: ST_TO_ADDR
// hc_gallery :=  ;
65171: LD_ADDR_OWVAR 33
65175: PUSH
65176: LD_STRING 
65178: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65179: LD_ADDR_OWVAR 31
65183: PUSH
65184: LD_INT 0
65186: PPUSH
65187: LD_INT 3
65189: PPUSH
65190: CALL_OW 12
65194: PUSH
65195: LD_INT 0
65197: PPUSH
65198: LD_INT 3
65200: PPUSH
65201: CALL_OW 12
65205: PUSH
65206: LD_INT 0
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: ST_TO_ADDR
// end ;
65218: LD_VAR 0 1
65222: RET
// export function PrepareApemanEngineer ( ) ; begin
65223: LD_INT 0
65225: PPUSH
// uc_nation := 0 ;
65226: LD_ADDR_OWVAR 21
65230: PUSH
65231: LD_INT 0
65233: ST_TO_ADDR
// hc_sex := sex_male ;
65234: LD_ADDR_OWVAR 27
65238: PUSH
65239: LD_INT 1
65241: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65242: LD_ADDR_OWVAR 28
65246: PUSH
65247: LD_INT 16
65249: ST_TO_ADDR
// hc_gallery :=  ;
65250: LD_ADDR_OWVAR 33
65254: PUSH
65255: LD_STRING 
65257: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65258: LD_ADDR_OWVAR 31
65262: PUSH
65263: LD_INT 0
65265: PPUSH
65266: LD_INT 3
65268: PPUSH
65269: CALL_OW 12
65273: PUSH
65274: LD_INT 0
65276: PPUSH
65277: LD_INT 3
65279: PPUSH
65280: CALL_OW 12
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: LD_INT 0
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: LIST
65296: ST_TO_ADDR
// end ;
65297: LD_VAR 0 1
65301: RET
// export function PrepareApeman ( agressivity ) ; begin
65302: LD_INT 0
65304: PPUSH
// uc_side := 0 ;
65305: LD_ADDR_OWVAR 20
65309: PUSH
65310: LD_INT 0
65312: ST_TO_ADDR
// uc_nation := 0 ;
65313: LD_ADDR_OWVAR 21
65317: PUSH
65318: LD_INT 0
65320: ST_TO_ADDR
// hc_sex := sex_male ;
65321: LD_ADDR_OWVAR 27
65325: PUSH
65326: LD_INT 1
65328: ST_TO_ADDR
// hc_class := class_apeman ;
65329: LD_ADDR_OWVAR 28
65333: PUSH
65334: LD_INT 12
65336: ST_TO_ADDR
// hc_gallery :=  ;
65337: LD_ADDR_OWVAR 33
65341: PUSH
65342: LD_STRING 
65344: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65345: LD_ADDR_OWVAR 35
65349: PUSH
65350: LD_VAR 0 1
65354: NEG
65355: PPUSH
65356: LD_VAR 0 1
65360: PPUSH
65361: CALL_OW 12
65365: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65366: LD_ADDR_OWVAR 31
65370: PUSH
65371: LD_INT 0
65373: PPUSH
65374: LD_INT 3
65376: PPUSH
65377: CALL_OW 12
65381: PUSH
65382: LD_INT 0
65384: PPUSH
65385: LD_INT 3
65387: PPUSH
65388: CALL_OW 12
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: LD_INT 0
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: ST_TO_ADDR
// end ;
65405: LD_VAR 0 2
65409: RET
// export function PrepareTiger ( agressivity ) ; begin
65410: LD_INT 0
65412: PPUSH
// uc_side := 0 ;
65413: LD_ADDR_OWVAR 20
65417: PUSH
65418: LD_INT 0
65420: ST_TO_ADDR
// uc_nation := 0 ;
65421: LD_ADDR_OWVAR 21
65425: PUSH
65426: LD_INT 0
65428: ST_TO_ADDR
// hc_class := class_tiger ;
65429: LD_ADDR_OWVAR 28
65433: PUSH
65434: LD_INT 14
65436: ST_TO_ADDR
// hc_gallery :=  ;
65437: LD_ADDR_OWVAR 33
65441: PUSH
65442: LD_STRING 
65444: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65445: LD_ADDR_OWVAR 35
65449: PUSH
65450: LD_VAR 0 1
65454: NEG
65455: PPUSH
65456: LD_VAR 0 1
65460: PPUSH
65461: CALL_OW 12
65465: ST_TO_ADDR
// end ;
65466: LD_VAR 0 2
65470: RET
// export function PrepareEnchidna ( ) ; begin
65471: LD_INT 0
65473: PPUSH
// uc_side := 0 ;
65474: LD_ADDR_OWVAR 20
65478: PUSH
65479: LD_INT 0
65481: ST_TO_ADDR
// uc_nation := 0 ;
65482: LD_ADDR_OWVAR 21
65486: PUSH
65487: LD_INT 0
65489: ST_TO_ADDR
// hc_class := class_baggie ;
65490: LD_ADDR_OWVAR 28
65494: PUSH
65495: LD_INT 13
65497: ST_TO_ADDR
// hc_gallery :=  ;
65498: LD_ADDR_OWVAR 33
65502: PUSH
65503: LD_STRING 
65505: ST_TO_ADDR
// end ;
65506: LD_VAR 0 1
65510: RET
// export function PrepareFrog ( ) ; begin
65511: LD_INT 0
65513: PPUSH
// uc_side := 0 ;
65514: LD_ADDR_OWVAR 20
65518: PUSH
65519: LD_INT 0
65521: ST_TO_ADDR
// uc_nation := 0 ;
65522: LD_ADDR_OWVAR 21
65526: PUSH
65527: LD_INT 0
65529: ST_TO_ADDR
// hc_class := class_frog ;
65530: LD_ADDR_OWVAR 28
65534: PUSH
65535: LD_INT 19
65537: ST_TO_ADDR
// hc_gallery :=  ;
65538: LD_ADDR_OWVAR 33
65542: PUSH
65543: LD_STRING 
65545: ST_TO_ADDR
// end ;
65546: LD_VAR 0 1
65550: RET
// export function PrepareFish ( ) ; begin
65551: LD_INT 0
65553: PPUSH
// uc_side := 0 ;
65554: LD_ADDR_OWVAR 20
65558: PUSH
65559: LD_INT 0
65561: ST_TO_ADDR
// uc_nation := 0 ;
65562: LD_ADDR_OWVAR 21
65566: PUSH
65567: LD_INT 0
65569: ST_TO_ADDR
// hc_class := class_fish ;
65570: LD_ADDR_OWVAR 28
65574: PUSH
65575: LD_INT 20
65577: ST_TO_ADDR
// hc_gallery :=  ;
65578: LD_ADDR_OWVAR 33
65582: PUSH
65583: LD_STRING 
65585: ST_TO_ADDR
// end ;
65586: LD_VAR 0 1
65590: RET
// export function PrepareBird ( ) ; begin
65591: LD_INT 0
65593: PPUSH
// uc_side := 0 ;
65594: LD_ADDR_OWVAR 20
65598: PUSH
65599: LD_INT 0
65601: ST_TO_ADDR
// uc_nation := 0 ;
65602: LD_ADDR_OWVAR 21
65606: PUSH
65607: LD_INT 0
65609: ST_TO_ADDR
// hc_class := class_phororhacos ;
65610: LD_ADDR_OWVAR 28
65614: PUSH
65615: LD_INT 18
65617: ST_TO_ADDR
// hc_gallery :=  ;
65618: LD_ADDR_OWVAR 33
65622: PUSH
65623: LD_STRING 
65625: ST_TO_ADDR
// end ;
65626: LD_VAR 0 1
65630: RET
// export function PrepareHorse ( ) ; begin
65631: LD_INT 0
65633: PPUSH
// uc_side := 0 ;
65634: LD_ADDR_OWVAR 20
65638: PUSH
65639: LD_INT 0
65641: ST_TO_ADDR
// uc_nation := 0 ;
65642: LD_ADDR_OWVAR 21
65646: PUSH
65647: LD_INT 0
65649: ST_TO_ADDR
// hc_class := class_horse ;
65650: LD_ADDR_OWVAR 28
65654: PUSH
65655: LD_INT 21
65657: ST_TO_ADDR
// hc_gallery :=  ;
65658: LD_ADDR_OWVAR 33
65662: PUSH
65663: LD_STRING 
65665: ST_TO_ADDR
// end ;
65666: LD_VAR 0 1
65670: RET
// export function PrepareMastodont ( ) ; begin
65671: LD_INT 0
65673: PPUSH
// uc_side := 0 ;
65674: LD_ADDR_OWVAR 20
65678: PUSH
65679: LD_INT 0
65681: ST_TO_ADDR
// uc_nation := 0 ;
65682: LD_ADDR_OWVAR 21
65686: PUSH
65687: LD_INT 0
65689: ST_TO_ADDR
// vc_chassis := class_mastodont ;
65690: LD_ADDR_OWVAR 37
65694: PUSH
65695: LD_INT 31
65697: ST_TO_ADDR
// vc_control := control_rider ;
65698: LD_ADDR_OWVAR 38
65702: PUSH
65703: LD_INT 4
65705: ST_TO_ADDR
// end ;
65706: LD_VAR 0 1
65710: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
65711: LD_INT 0
65713: PPUSH
65714: PPUSH
65715: PPUSH
// uc_side = 0 ;
65716: LD_ADDR_OWVAR 20
65720: PUSH
65721: LD_INT 0
65723: ST_TO_ADDR
// uc_nation = 0 ;
65724: LD_ADDR_OWVAR 21
65728: PUSH
65729: LD_INT 0
65731: ST_TO_ADDR
// InitHc_All ( ) ;
65732: CALL_OW 584
// InitVc ;
65736: CALL_OW 20
// if mastodonts then
65740: LD_VAR 0 6
65744: IFFALSE 65811
// for i = 1 to mastodonts do
65746: LD_ADDR_VAR 0 11
65750: PUSH
65751: DOUBLE
65752: LD_INT 1
65754: DEC
65755: ST_TO_ADDR
65756: LD_VAR 0 6
65760: PUSH
65761: FOR_TO
65762: IFFALSE 65809
// begin vc_chassis := 31 ;
65764: LD_ADDR_OWVAR 37
65768: PUSH
65769: LD_INT 31
65771: ST_TO_ADDR
// vc_control := control_rider ;
65772: LD_ADDR_OWVAR 38
65776: PUSH
65777: LD_INT 4
65779: ST_TO_ADDR
// animal := CreateVehicle ;
65780: LD_ADDR_VAR 0 12
65784: PUSH
65785: CALL_OW 45
65789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65790: LD_VAR 0 12
65794: PPUSH
65795: LD_VAR 0 8
65799: PPUSH
65800: LD_INT 0
65802: PPUSH
65803: CALL 67939 0 3
// end ;
65807: GO 65761
65809: POP
65810: POP
// if horses then
65811: LD_VAR 0 5
65815: IFFALSE 65882
// for i = 1 to horses do
65817: LD_ADDR_VAR 0 11
65821: PUSH
65822: DOUBLE
65823: LD_INT 1
65825: DEC
65826: ST_TO_ADDR
65827: LD_VAR 0 5
65831: PUSH
65832: FOR_TO
65833: IFFALSE 65880
// begin hc_class := 21 ;
65835: LD_ADDR_OWVAR 28
65839: PUSH
65840: LD_INT 21
65842: ST_TO_ADDR
// hc_gallery :=  ;
65843: LD_ADDR_OWVAR 33
65847: PUSH
65848: LD_STRING 
65850: ST_TO_ADDR
// animal := CreateHuman ;
65851: LD_ADDR_VAR 0 12
65855: PUSH
65856: CALL_OW 44
65860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65861: LD_VAR 0 12
65865: PPUSH
65866: LD_VAR 0 8
65870: PPUSH
65871: LD_INT 0
65873: PPUSH
65874: CALL 67939 0 3
// end ;
65878: GO 65832
65880: POP
65881: POP
// if birds then
65882: LD_VAR 0 1
65886: IFFALSE 65953
// for i = 1 to birds do
65888: LD_ADDR_VAR 0 11
65892: PUSH
65893: DOUBLE
65894: LD_INT 1
65896: DEC
65897: ST_TO_ADDR
65898: LD_VAR 0 1
65902: PUSH
65903: FOR_TO
65904: IFFALSE 65951
// begin hc_class := 18 ;
65906: LD_ADDR_OWVAR 28
65910: PUSH
65911: LD_INT 18
65913: ST_TO_ADDR
// hc_gallery =  ;
65914: LD_ADDR_OWVAR 33
65918: PUSH
65919: LD_STRING 
65921: ST_TO_ADDR
// animal := CreateHuman ;
65922: LD_ADDR_VAR 0 12
65926: PUSH
65927: CALL_OW 44
65931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65932: LD_VAR 0 12
65936: PPUSH
65937: LD_VAR 0 8
65941: PPUSH
65942: LD_INT 0
65944: PPUSH
65945: CALL 67939 0 3
// end ;
65949: GO 65903
65951: POP
65952: POP
// if tigers then
65953: LD_VAR 0 2
65957: IFFALSE 66041
// for i = 1 to tigers do
65959: LD_ADDR_VAR 0 11
65963: PUSH
65964: DOUBLE
65965: LD_INT 1
65967: DEC
65968: ST_TO_ADDR
65969: LD_VAR 0 2
65973: PUSH
65974: FOR_TO
65975: IFFALSE 66039
// begin hc_class = class_tiger ;
65977: LD_ADDR_OWVAR 28
65981: PUSH
65982: LD_INT 14
65984: ST_TO_ADDR
// hc_gallery =  ;
65985: LD_ADDR_OWVAR 33
65989: PUSH
65990: LD_STRING 
65992: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65993: LD_ADDR_OWVAR 35
65997: PUSH
65998: LD_INT 7
66000: NEG
66001: PPUSH
66002: LD_INT 7
66004: PPUSH
66005: CALL_OW 12
66009: ST_TO_ADDR
// animal := CreateHuman ;
66010: LD_ADDR_VAR 0 12
66014: PUSH
66015: CALL_OW 44
66019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66020: LD_VAR 0 12
66024: PPUSH
66025: LD_VAR 0 8
66029: PPUSH
66030: LD_INT 0
66032: PPUSH
66033: CALL 67939 0 3
// end ;
66037: GO 65974
66039: POP
66040: POP
// if apemans then
66041: LD_VAR 0 3
66045: IFFALSE 66168
// for i = 1 to apemans do
66047: LD_ADDR_VAR 0 11
66051: PUSH
66052: DOUBLE
66053: LD_INT 1
66055: DEC
66056: ST_TO_ADDR
66057: LD_VAR 0 3
66061: PUSH
66062: FOR_TO
66063: IFFALSE 66166
// begin hc_class = class_apeman ;
66065: LD_ADDR_OWVAR 28
66069: PUSH
66070: LD_INT 12
66072: ST_TO_ADDR
// hc_gallery =  ;
66073: LD_ADDR_OWVAR 33
66077: PUSH
66078: LD_STRING 
66080: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66081: LD_ADDR_OWVAR 35
66085: PUSH
66086: LD_INT 2
66088: NEG
66089: PPUSH
66090: LD_INT 2
66092: PPUSH
66093: CALL_OW 12
66097: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66098: LD_ADDR_OWVAR 31
66102: PUSH
66103: LD_INT 1
66105: PPUSH
66106: LD_INT 3
66108: PPUSH
66109: CALL_OW 12
66113: PUSH
66114: LD_INT 1
66116: PPUSH
66117: LD_INT 3
66119: PPUSH
66120: CALL_OW 12
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: LD_INT 0
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: ST_TO_ADDR
// animal := CreateHuman ;
66137: LD_ADDR_VAR 0 12
66141: PUSH
66142: CALL_OW 44
66146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66147: LD_VAR 0 12
66151: PPUSH
66152: LD_VAR 0 8
66156: PPUSH
66157: LD_INT 0
66159: PPUSH
66160: CALL 67939 0 3
// end ;
66164: GO 66062
66166: POP
66167: POP
// if enchidnas then
66168: LD_VAR 0 4
66172: IFFALSE 66239
// for i = 1 to enchidnas do
66174: LD_ADDR_VAR 0 11
66178: PUSH
66179: DOUBLE
66180: LD_INT 1
66182: DEC
66183: ST_TO_ADDR
66184: LD_VAR 0 4
66188: PUSH
66189: FOR_TO
66190: IFFALSE 66237
// begin hc_class = 13 ;
66192: LD_ADDR_OWVAR 28
66196: PUSH
66197: LD_INT 13
66199: ST_TO_ADDR
// hc_gallery =  ;
66200: LD_ADDR_OWVAR 33
66204: PUSH
66205: LD_STRING 
66207: ST_TO_ADDR
// animal := CreateHuman ;
66208: LD_ADDR_VAR 0 12
66212: PUSH
66213: CALL_OW 44
66217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66218: LD_VAR 0 12
66222: PPUSH
66223: LD_VAR 0 8
66227: PPUSH
66228: LD_INT 0
66230: PPUSH
66231: CALL 67939 0 3
// end ;
66235: GO 66189
66237: POP
66238: POP
// if fishes then
66239: LD_VAR 0 7
66243: IFFALSE 66310
// for i = 1 to fishes do
66245: LD_ADDR_VAR 0 11
66249: PUSH
66250: DOUBLE
66251: LD_INT 1
66253: DEC
66254: ST_TO_ADDR
66255: LD_VAR 0 7
66259: PUSH
66260: FOR_TO
66261: IFFALSE 66308
// begin hc_class = 20 ;
66263: LD_ADDR_OWVAR 28
66267: PUSH
66268: LD_INT 20
66270: ST_TO_ADDR
// hc_gallery =  ;
66271: LD_ADDR_OWVAR 33
66275: PUSH
66276: LD_STRING 
66278: ST_TO_ADDR
// animal := CreateHuman ;
66279: LD_ADDR_VAR 0 12
66283: PUSH
66284: CALL_OW 44
66288: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66289: LD_VAR 0 12
66293: PPUSH
66294: LD_VAR 0 9
66298: PPUSH
66299: LD_INT 0
66301: PPUSH
66302: CALL 67939 0 3
// end ;
66306: GO 66260
66308: POP
66309: POP
// end ;
66310: LD_VAR 0 10
66314: RET
// export function WantHeal ( sci , unit ) ; begin
66315: LD_INT 0
66317: PPUSH
// if GetTaskList ( sci ) > 0 then
66318: LD_VAR 0 1
66322: PPUSH
66323: CALL_OW 437
66327: PUSH
66328: LD_INT 0
66330: GREATER
66331: IFFALSE 66401
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66333: LD_VAR 0 1
66337: PPUSH
66338: CALL_OW 437
66342: PUSH
66343: LD_INT 1
66345: ARRAY
66346: PUSH
66347: LD_INT 1
66349: ARRAY
66350: PUSH
66351: LD_STRING l
66353: EQUAL
66354: PUSH
66355: LD_VAR 0 1
66359: PPUSH
66360: CALL_OW 437
66364: PUSH
66365: LD_INT 1
66367: ARRAY
66368: PUSH
66369: LD_INT 4
66371: ARRAY
66372: PUSH
66373: LD_VAR 0 2
66377: EQUAL
66378: AND
66379: IFFALSE 66391
// result := true else
66381: LD_ADDR_VAR 0 3
66385: PUSH
66386: LD_INT 1
66388: ST_TO_ADDR
66389: GO 66399
// result := false ;
66391: LD_ADDR_VAR 0 3
66395: PUSH
66396: LD_INT 0
66398: ST_TO_ADDR
// end else
66399: GO 66409
// result := false ;
66401: LD_ADDR_VAR 0 3
66405: PUSH
66406: LD_INT 0
66408: ST_TO_ADDR
// end ;
66409: LD_VAR 0 3
66413: RET
// export function HealTarget ( sci ) ; begin
66414: LD_INT 0
66416: PPUSH
// if not sci then
66417: LD_VAR 0 1
66421: NOT
66422: IFFALSE 66426
// exit ;
66424: GO 66491
// result := 0 ;
66426: LD_ADDR_VAR 0 2
66430: PUSH
66431: LD_INT 0
66433: ST_TO_ADDR
// if GetTaskList ( sci ) then
66434: LD_VAR 0 1
66438: PPUSH
66439: CALL_OW 437
66443: IFFALSE 66491
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
66445: LD_VAR 0 1
66449: PPUSH
66450: CALL_OW 437
66454: PUSH
66455: LD_INT 1
66457: ARRAY
66458: PUSH
66459: LD_INT 1
66461: ARRAY
66462: PUSH
66463: LD_STRING l
66465: EQUAL
66466: IFFALSE 66491
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
66468: LD_ADDR_VAR 0 2
66472: PUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: CALL_OW 437
66482: PUSH
66483: LD_INT 1
66485: ARRAY
66486: PUSH
66487: LD_INT 4
66489: ARRAY
66490: ST_TO_ADDR
// end ;
66491: LD_VAR 0 2
66495: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
66496: LD_INT 0
66498: PPUSH
66499: PPUSH
66500: PPUSH
66501: PPUSH
// if not base_units then
66502: LD_VAR 0 1
66506: NOT
66507: IFFALSE 66511
// exit ;
66509: GO 66598
// result := false ;
66511: LD_ADDR_VAR 0 2
66515: PUSH
66516: LD_INT 0
66518: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
66519: LD_ADDR_VAR 0 5
66523: PUSH
66524: LD_VAR 0 1
66528: PPUSH
66529: LD_INT 21
66531: PUSH
66532: LD_INT 3
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PPUSH
66539: CALL_OW 72
66543: ST_TO_ADDR
// if not tmp then
66544: LD_VAR 0 5
66548: NOT
66549: IFFALSE 66553
// exit ;
66551: GO 66598
// for i in tmp do
66553: LD_ADDR_VAR 0 3
66557: PUSH
66558: LD_VAR 0 5
66562: PUSH
66563: FOR_IN
66564: IFFALSE 66596
// begin result := EnemyInRange ( i , 22 ) ;
66566: LD_ADDR_VAR 0 2
66570: PUSH
66571: LD_VAR 0 3
66575: PPUSH
66576: LD_INT 22
66578: PPUSH
66579: CALL 64185 0 2
66583: ST_TO_ADDR
// if result then
66584: LD_VAR 0 2
66588: IFFALSE 66594
// exit ;
66590: POP
66591: POP
66592: GO 66598
// end ;
66594: GO 66563
66596: POP
66597: POP
// end ;
66598: LD_VAR 0 2
66602: RET
// export function FilterByTag ( units , tag ) ; begin
66603: LD_INT 0
66605: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
66606: LD_ADDR_VAR 0 3
66610: PUSH
66611: LD_VAR 0 1
66615: PPUSH
66616: LD_INT 120
66618: PUSH
66619: LD_VAR 0 2
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PPUSH
66628: CALL_OW 72
66632: ST_TO_ADDR
// end ;
66633: LD_VAR 0 3
66637: RET
// export function IsDriver ( un ) ; begin
66638: LD_INT 0
66640: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
66641: LD_ADDR_VAR 0 2
66645: PUSH
66646: LD_VAR 0 1
66650: PUSH
66651: LD_INT 55
66653: PUSH
66654: EMPTY
66655: LIST
66656: PPUSH
66657: CALL_OW 69
66661: IN
66662: ST_TO_ADDR
// end ;
66663: LD_VAR 0 2
66667: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
66668: LD_INT 0
66670: PPUSH
66671: PPUSH
// list := [ ] ;
66672: LD_ADDR_VAR 0 5
66676: PUSH
66677: EMPTY
66678: ST_TO_ADDR
// case d of 0 :
66679: LD_VAR 0 3
66683: PUSH
66684: LD_INT 0
66686: DOUBLE
66687: EQUAL
66688: IFTRUE 66692
66690: GO 66825
66692: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
66693: LD_ADDR_VAR 0 5
66697: PUSH
66698: LD_VAR 0 1
66702: PUSH
66703: LD_INT 4
66705: MINUS
66706: PUSH
66707: LD_VAR 0 2
66711: PUSH
66712: LD_INT 4
66714: MINUS
66715: PUSH
66716: LD_INT 2
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: LIST
66723: PUSH
66724: LD_VAR 0 1
66728: PUSH
66729: LD_INT 3
66731: MINUS
66732: PUSH
66733: LD_VAR 0 2
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: LIST
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: LD_INT 4
66753: PLUS
66754: PUSH
66755: LD_VAR 0 2
66759: PUSH
66760: LD_INT 4
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: PUSH
66768: LD_VAR 0 1
66772: PUSH
66773: LD_INT 3
66775: PLUS
66776: PUSH
66777: LD_VAR 0 2
66781: PUSH
66782: LD_INT 3
66784: PLUS
66785: PUSH
66786: LD_INT 5
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: LIST
66793: PUSH
66794: LD_VAR 0 1
66798: PUSH
66799: LD_VAR 0 2
66803: PUSH
66804: LD_INT 4
66806: PLUS
66807: PUSH
66808: LD_INT 0
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// end ; 1 :
66823: GO 67523
66825: LD_INT 1
66827: DOUBLE
66828: EQUAL
66829: IFTRUE 66833
66831: GO 66966
66833: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66834: LD_ADDR_VAR 0 5
66838: PUSH
66839: LD_VAR 0 1
66843: PUSH
66844: LD_VAR 0 2
66848: PUSH
66849: LD_INT 4
66851: MINUS
66852: PUSH
66853: LD_INT 3
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: LIST
66860: PUSH
66861: LD_VAR 0 1
66865: PUSH
66866: LD_INT 3
66868: MINUS
66869: PUSH
66870: LD_VAR 0 2
66874: PUSH
66875: LD_INT 3
66877: MINUS
66878: PUSH
66879: LD_INT 2
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: LIST
66886: PUSH
66887: LD_VAR 0 1
66891: PUSH
66892: LD_INT 4
66894: MINUS
66895: PUSH
66896: LD_VAR 0 2
66900: PUSH
66901: LD_INT 1
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: PUSH
66909: LD_VAR 0 1
66913: PUSH
66914: LD_VAR 0 2
66918: PUSH
66919: LD_INT 3
66921: PLUS
66922: PUSH
66923: LD_INT 0
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: LIST
66930: PUSH
66931: LD_VAR 0 1
66935: PUSH
66936: LD_INT 4
66938: PLUS
66939: PUSH
66940: LD_VAR 0 2
66944: PUSH
66945: LD_INT 4
66947: PLUS
66948: PUSH
66949: LD_INT 5
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: ST_TO_ADDR
// end ; 2 :
66964: GO 67523
66966: LD_INT 2
66968: DOUBLE
66969: EQUAL
66970: IFTRUE 66974
66972: GO 67103
66974: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66975: LD_ADDR_VAR 0 5
66979: PUSH
66980: LD_VAR 0 1
66984: PUSH
66985: LD_VAR 0 2
66989: PUSH
66990: LD_INT 3
66992: MINUS
66993: PUSH
66994: LD_INT 3
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: LIST
67001: PUSH
67002: LD_VAR 0 1
67006: PUSH
67007: LD_INT 4
67009: PLUS
67010: PUSH
67011: LD_VAR 0 2
67015: PUSH
67016: LD_INT 4
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: LIST
67023: PUSH
67024: LD_VAR 0 1
67028: PUSH
67029: LD_VAR 0 2
67033: PUSH
67034: LD_INT 4
67036: PLUS
67037: PUSH
67038: LD_INT 0
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: LIST
67045: PUSH
67046: LD_VAR 0 1
67050: PUSH
67051: LD_INT 3
67053: MINUS
67054: PUSH
67055: LD_VAR 0 2
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: LIST
67067: PUSH
67068: LD_VAR 0 1
67072: PUSH
67073: LD_INT 4
67075: MINUS
67076: PUSH
67077: LD_VAR 0 2
67081: PUSH
67082: LD_INT 4
67084: MINUS
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: LIST
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: LIST
67098: LIST
67099: LIST
67100: ST_TO_ADDR
// end ; 3 :
67101: GO 67523
67103: LD_INT 3
67105: DOUBLE
67106: EQUAL
67107: IFTRUE 67111
67109: GO 67244
67111: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67112: LD_ADDR_VAR 0 5
67116: PUSH
67117: LD_VAR 0 1
67121: PUSH
67122: LD_INT 3
67124: PLUS
67125: PUSH
67126: LD_VAR 0 2
67130: PUSH
67131: LD_INT 4
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: LIST
67138: PUSH
67139: LD_VAR 0 1
67143: PUSH
67144: LD_INT 4
67146: PLUS
67147: PUSH
67148: LD_VAR 0 2
67152: PUSH
67153: LD_INT 4
67155: PLUS
67156: PUSH
67157: LD_INT 5
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: PUSH
67165: LD_VAR 0 1
67169: PUSH
67170: LD_INT 4
67172: MINUS
67173: PUSH
67174: LD_VAR 0 2
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: LIST
67186: PUSH
67187: LD_VAR 0 1
67191: PUSH
67192: LD_VAR 0 2
67196: PUSH
67197: LD_INT 4
67199: MINUS
67200: PUSH
67201: LD_INT 3
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: LIST
67208: PUSH
67209: LD_VAR 0 1
67213: PUSH
67214: LD_INT 3
67216: MINUS
67217: PUSH
67218: LD_VAR 0 2
67222: PUSH
67223: LD_INT 3
67225: MINUS
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: ST_TO_ADDR
// end ; 4 :
67242: GO 67523
67244: LD_INT 4
67246: DOUBLE
67247: EQUAL
67248: IFTRUE 67252
67250: GO 67385
67252: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67253: LD_ADDR_VAR 0 5
67257: PUSH
67258: LD_VAR 0 1
67262: PUSH
67263: LD_VAR 0 2
67267: PUSH
67268: LD_INT 4
67270: PLUS
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: PUSH
67280: LD_VAR 0 1
67284: PUSH
67285: LD_INT 3
67287: PLUS
67288: PUSH
67289: LD_VAR 0 2
67293: PUSH
67294: LD_INT 3
67296: PLUS
67297: PUSH
67298: LD_INT 5
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: LIST
67305: PUSH
67306: LD_VAR 0 1
67310: PUSH
67311: LD_INT 4
67313: PLUS
67314: PUSH
67315: LD_VAR 0 2
67319: PUSH
67320: LD_INT 4
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: PUSH
67328: LD_VAR 0 1
67332: PUSH
67333: LD_VAR 0 2
67337: PUSH
67338: LD_INT 3
67340: MINUS
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: PUSH
67350: LD_VAR 0 1
67354: PUSH
67355: LD_INT 4
67357: MINUS
67358: PUSH
67359: LD_VAR 0 2
67363: PUSH
67364: LD_INT 4
67366: MINUS
67367: PUSH
67368: LD_INT 2
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: LIST
67380: LIST
67381: LIST
67382: ST_TO_ADDR
// end ; 5 :
67383: GO 67523
67385: LD_INT 5
67387: DOUBLE
67388: EQUAL
67389: IFTRUE 67393
67391: GO 67522
67393: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67394: LD_ADDR_VAR 0 5
67398: PUSH
67399: LD_VAR 0 1
67403: PUSH
67404: LD_INT 4
67406: MINUS
67407: PUSH
67408: LD_VAR 0 2
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: PUSH
67421: LD_VAR 0 1
67425: PUSH
67426: LD_VAR 0 2
67430: PUSH
67431: LD_INT 4
67433: MINUS
67434: PUSH
67435: LD_INT 3
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: PUSH
67443: LD_VAR 0 1
67447: PUSH
67448: LD_INT 4
67450: PLUS
67451: PUSH
67452: LD_VAR 0 2
67456: PUSH
67457: LD_INT 4
67459: PLUS
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: PUSH
67469: LD_VAR 0 1
67473: PUSH
67474: LD_INT 3
67476: PLUS
67477: PUSH
67478: LD_VAR 0 2
67482: PUSH
67483: LD_INT 4
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: LIST
67490: PUSH
67491: LD_VAR 0 1
67495: PUSH
67496: LD_VAR 0 2
67500: PUSH
67501: LD_INT 3
67503: PLUS
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// end ; end ;
67520: GO 67523
67522: POP
// result := list ;
67523: LD_ADDR_VAR 0 4
67527: PUSH
67528: LD_VAR 0 5
67532: ST_TO_ADDR
// end ;
67533: LD_VAR 0 4
67537: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
67538: LD_INT 0
67540: PPUSH
67541: PPUSH
67542: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
67543: LD_VAR 0 1
67547: NOT
67548: PUSH
67549: LD_VAR 0 2
67553: PUSH
67554: LD_INT 1
67556: PUSH
67557: LD_INT 2
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 4
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: IN
67572: NOT
67573: OR
67574: IFFALSE 67578
// exit ;
67576: GO 67661
// tmp := [ ] ;
67578: LD_ADDR_VAR 0 5
67582: PUSH
67583: EMPTY
67584: ST_TO_ADDR
// for i in units do
67585: LD_ADDR_VAR 0 4
67589: PUSH
67590: LD_VAR 0 1
67594: PUSH
67595: FOR_IN
67596: IFFALSE 67630
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
67598: LD_ADDR_VAR 0 5
67602: PUSH
67603: LD_VAR 0 5
67607: PPUSH
67608: LD_VAR 0 4
67612: PPUSH
67613: LD_VAR 0 2
67617: PPUSH
67618: CALL_OW 259
67622: PPUSH
67623: CALL 69034 0 2
67627: ST_TO_ADDR
67628: GO 67595
67630: POP
67631: POP
// if not tmp then
67632: LD_VAR 0 5
67636: NOT
67637: IFFALSE 67641
// exit ;
67639: GO 67661
// result := SortListByListDesc ( units , tmp ) ;
67641: LD_ADDR_VAR 0 3
67645: PUSH
67646: LD_VAR 0 1
67650: PPUSH
67651: LD_VAR 0 5
67655: PPUSH
67656: CALL_OW 77
67660: ST_TO_ADDR
// end ;
67661: LD_VAR 0 3
67665: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
67666: LD_INT 0
67668: PPUSH
67669: PPUSH
67670: PPUSH
// result := false ;
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_INT 0
67678: ST_TO_ADDR
// if not building then
67679: LD_VAR 0 2
67683: NOT
67684: IFFALSE 67688
// exit ;
67686: GO 67826
// x := GetX ( building ) ;
67688: LD_ADDR_VAR 0 4
67692: PUSH
67693: LD_VAR 0 2
67697: PPUSH
67698: CALL_OW 250
67702: ST_TO_ADDR
// y := GetY ( building ) ;
67703: LD_ADDR_VAR 0 5
67707: PUSH
67708: LD_VAR 0 2
67712: PPUSH
67713: CALL_OW 251
67717: ST_TO_ADDR
// if not x or not y then
67718: LD_VAR 0 4
67722: NOT
67723: PUSH
67724: LD_VAR 0 5
67728: NOT
67729: OR
67730: IFFALSE 67734
// exit ;
67732: GO 67826
// if GetTaskList ( unit ) then
67734: LD_VAR 0 1
67738: PPUSH
67739: CALL_OW 437
67743: IFFALSE 67826
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67745: LD_STRING e
67747: PUSH
67748: LD_VAR 0 1
67752: PPUSH
67753: CALL_OW 437
67757: PUSH
67758: LD_INT 1
67760: ARRAY
67761: PUSH
67762: LD_INT 1
67764: ARRAY
67765: EQUAL
67766: PUSH
67767: LD_VAR 0 4
67771: PUSH
67772: LD_VAR 0 1
67776: PPUSH
67777: CALL_OW 437
67781: PUSH
67782: LD_INT 1
67784: ARRAY
67785: PUSH
67786: LD_INT 2
67788: ARRAY
67789: EQUAL
67790: AND
67791: PUSH
67792: LD_VAR 0 5
67796: PUSH
67797: LD_VAR 0 1
67801: PPUSH
67802: CALL_OW 437
67806: PUSH
67807: LD_INT 1
67809: ARRAY
67810: PUSH
67811: LD_INT 3
67813: ARRAY
67814: EQUAL
67815: AND
67816: IFFALSE 67826
// result := true end ;
67818: LD_ADDR_VAR 0 3
67822: PUSH
67823: LD_INT 1
67825: ST_TO_ADDR
// end ;
67826: LD_VAR 0 3
67830: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67831: LD_INT 0
67833: PPUSH
// result := false ;
67834: LD_ADDR_VAR 0 4
67838: PUSH
67839: LD_INT 0
67841: ST_TO_ADDR
// if GetTaskList ( unit ) then
67842: LD_VAR 0 1
67846: PPUSH
67847: CALL_OW 437
67851: IFFALSE 67934
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67853: LD_STRING M
67855: PUSH
67856: LD_VAR 0 1
67860: PPUSH
67861: CALL_OW 437
67865: PUSH
67866: LD_INT 1
67868: ARRAY
67869: PUSH
67870: LD_INT 1
67872: ARRAY
67873: EQUAL
67874: PUSH
67875: LD_VAR 0 2
67879: PUSH
67880: LD_VAR 0 1
67884: PPUSH
67885: CALL_OW 437
67889: PUSH
67890: LD_INT 1
67892: ARRAY
67893: PUSH
67894: LD_INT 2
67896: ARRAY
67897: EQUAL
67898: AND
67899: PUSH
67900: LD_VAR 0 3
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: CALL_OW 437
67914: PUSH
67915: LD_INT 1
67917: ARRAY
67918: PUSH
67919: LD_INT 3
67921: ARRAY
67922: EQUAL
67923: AND
67924: IFFALSE 67934
// result := true ;
67926: LD_ADDR_VAR 0 4
67930: PUSH
67931: LD_INT 1
67933: ST_TO_ADDR
// end ; end ;
67934: LD_VAR 0 4
67938: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67939: LD_INT 0
67941: PPUSH
67942: PPUSH
67943: PPUSH
67944: PPUSH
// if not unit or not area then
67945: LD_VAR 0 1
67949: NOT
67950: PUSH
67951: LD_VAR 0 2
67955: NOT
67956: OR
67957: IFFALSE 67961
// exit ;
67959: GO 68137
// tmp := AreaToList ( area , i ) ;
67961: LD_ADDR_VAR 0 6
67965: PUSH
67966: LD_VAR 0 2
67970: PPUSH
67971: LD_VAR 0 5
67975: PPUSH
67976: CALL_OW 517
67980: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67981: LD_ADDR_VAR 0 5
67985: PUSH
67986: DOUBLE
67987: LD_INT 1
67989: DEC
67990: ST_TO_ADDR
67991: LD_VAR 0 6
67995: PUSH
67996: LD_INT 1
67998: ARRAY
67999: PUSH
68000: FOR_TO
68001: IFFALSE 68135
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68003: LD_ADDR_VAR 0 7
68007: PUSH
68008: LD_VAR 0 6
68012: PUSH
68013: LD_INT 1
68015: ARRAY
68016: PUSH
68017: LD_VAR 0 5
68021: ARRAY
68022: PUSH
68023: LD_VAR 0 6
68027: PUSH
68028: LD_INT 2
68030: ARRAY
68031: PUSH
68032: LD_VAR 0 5
68036: ARRAY
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
68042: LD_INT 92
68044: PUSH
68045: LD_VAR 0 7
68049: PUSH
68050: LD_INT 1
68052: ARRAY
68053: PUSH
68054: LD_VAR 0 7
68058: PUSH
68059: LD_INT 2
68061: ARRAY
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: PPUSH
68072: CALL_OW 69
68076: PUSH
68077: LD_INT 0
68079: EQUAL
68080: IFFALSE 68133
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68082: LD_VAR 0 1
68086: PPUSH
68087: LD_VAR 0 7
68091: PUSH
68092: LD_INT 1
68094: ARRAY
68095: PPUSH
68096: LD_VAR 0 7
68100: PUSH
68101: LD_INT 2
68103: ARRAY
68104: PPUSH
68105: LD_VAR 0 3
68109: PPUSH
68110: CALL_OW 48
// result := IsPlaced ( unit ) ;
68114: LD_ADDR_VAR 0 4
68118: PUSH
68119: LD_VAR 0 1
68123: PPUSH
68124: CALL_OW 305
68128: ST_TO_ADDR
// exit ;
68129: POP
68130: POP
68131: GO 68137
// end ; end ;
68133: GO 68000
68135: POP
68136: POP
// end ;
68137: LD_VAR 0 4
68141: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68142: LD_INT 0
68144: PPUSH
68145: PPUSH
68146: PPUSH
// if not side or side > 8 then
68147: LD_VAR 0 1
68151: NOT
68152: PUSH
68153: LD_VAR 0 1
68157: PUSH
68158: LD_INT 8
68160: GREATER
68161: OR
68162: IFFALSE 68166
// exit ;
68164: GO 68353
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68166: LD_ADDR_VAR 0 4
68170: PUSH
68171: LD_INT 22
68173: PUSH
68174: LD_VAR 0 1
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 21
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PPUSH
68197: CALL_OW 69
68201: ST_TO_ADDR
// if not tmp then
68202: LD_VAR 0 4
68206: NOT
68207: IFFALSE 68211
// exit ;
68209: GO 68353
// enable_addtolog := true ;
68211: LD_ADDR_OWVAR 81
68215: PUSH
68216: LD_INT 1
68218: ST_TO_ADDR
// AddToLog ( [ ) ;
68219: LD_STRING [
68221: PPUSH
68222: CALL_OW 561
// for i in tmp do
68226: LD_ADDR_VAR 0 3
68230: PUSH
68231: LD_VAR 0 4
68235: PUSH
68236: FOR_IN
68237: IFFALSE 68344
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68239: LD_STRING [
68241: PUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: CALL_OW 266
68251: STR
68252: PUSH
68253: LD_STRING , 
68255: STR
68256: PUSH
68257: LD_VAR 0 3
68261: PPUSH
68262: CALL_OW 250
68266: STR
68267: PUSH
68268: LD_STRING , 
68270: STR
68271: PUSH
68272: LD_VAR 0 3
68276: PPUSH
68277: CALL_OW 251
68281: STR
68282: PUSH
68283: LD_STRING , 
68285: STR
68286: PUSH
68287: LD_VAR 0 3
68291: PPUSH
68292: CALL_OW 254
68296: STR
68297: PUSH
68298: LD_STRING , 
68300: STR
68301: PUSH
68302: LD_VAR 0 3
68306: PPUSH
68307: LD_INT 1
68309: PPUSH
68310: CALL_OW 268
68314: STR
68315: PUSH
68316: LD_STRING , 
68318: STR
68319: PUSH
68320: LD_VAR 0 3
68324: PPUSH
68325: LD_INT 2
68327: PPUSH
68328: CALL_OW 268
68332: STR
68333: PUSH
68334: LD_STRING ],
68336: STR
68337: PPUSH
68338: CALL_OW 561
// end ;
68342: GO 68236
68344: POP
68345: POP
// AddToLog ( ]; ) ;
68346: LD_STRING ];
68348: PPUSH
68349: CALL_OW 561
// end ;
68353: LD_VAR 0 2
68357: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68358: LD_INT 0
68360: PPUSH
68361: PPUSH
68362: PPUSH
68363: PPUSH
68364: PPUSH
// if not area or not rate or not max then
68365: LD_VAR 0 1
68369: NOT
68370: PUSH
68371: LD_VAR 0 2
68375: NOT
68376: OR
68377: PUSH
68378: LD_VAR 0 4
68382: NOT
68383: OR
68384: IFFALSE 68388
// exit ;
68386: GO 68577
// while 1 do
68388: LD_INT 1
68390: IFFALSE 68577
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68392: LD_ADDR_VAR 0 9
68396: PUSH
68397: LD_VAR 0 1
68401: PPUSH
68402: LD_INT 1
68404: PPUSH
68405: CALL_OW 287
68409: PUSH
68410: LD_INT 10
68412: MUL
68413: ST_TO_ADDR
// r := rate / 10 ;
68414: LD_ADDR_VAR 0 7
68418: PUSH
68419: LD_VAR 0 2
68423: PUSH
68424: LD_INT 10
68426: DIVREAL
68427: ST_TO_ADDR
// time := 1 1$00 ;
68428: LD_ADDR_VAR 0 8
68432: PUSH
68433: LD_INT 2100
68435: ST_TO_ADDR
// if amount < min then
68436: LD_VAR 0 9
68440: PUSH
68441: LD_VAR 0 3
68445: LESS
68446: IFFALSE 68464
// r := r * 2 else
68448: LD_ADDR_VAR 0 7
68452: PUSH
68453: LD_VAR 0 7
68457: PUSH
68458: LD_INT 2
68460: MUL
68461: ST_TO_ADDR
68462: GO 68490
// if amount > max then
68464: LD_VAR 0 9
68468: PUSH
68469: LD_VAR 0 4
68473: GREATER
68474: IFFALSE 68490
// r := r / 2 ;
68476: LD_ADDR_VAR 0 7
68480: PUSH
68481: LD_VAR 0 7
68485: PUSH
68486: LD_INT 2
68488: DIVREAL
68489: ST_TO_ADDR
// time := time / r ;
68490: LD_ADDR_VAR 0 8
68494: PUSH
68495: LD_VAR 0 8
68499: PUSH
68500: LD_VAR 0 7
68504: DIVREAL
68505: ST_TO_ADDR
// if time < 0 then
68506: LD_VAR 0 8
68510: PUSH
68511: LD_INT 0
68513: LESS
68514: IFFALSE 68531
// time := time * - 1 ;
68516: LD_ADDR_VAR 0 8
68520: PUSH
68521: LD_VAR 0 8
68525: PUSH
68526: LD_INT 1
68528: NEG
68529: MUL
68530: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
68531: LD_VAR 0 8
68535: PUSH
68536: LD_INT 35
68538: PPUSH
68539: LD_INT 875
68541: PPUSH
68542: CALL_OW 12
68546: PLUS
68547: PPUSH
68548: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
68552: LD_INT 1
68554: PPUSH
68555: LD_INT 5
68557: PPUSH
68558: CALL_OW 12
68562: PPUSH
68563: LD_VAR 0 1
68567: PPUSH
68568: LD_INT 1
68570: PPUSH
68571: CALL_OW 55
// end ;
68575: GO 68388
// end ;
68577: LD_VAR 0 5
68581: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
68582: LD_INT 0
68584: PPUSH
68585: PPUSH
68586: PPUSH
68587: PPUSH
68588: PPUSH
68589: PPUSH
68590: PPUSH
68591: PPUSH
// if not turrets or not factories then
68592: LD_VAR 0 1
68596: NOT
68597: PUSH
68598: LD_VAR 0 2
68602: NOT
68603: OR
68604: IFFALSE 68608
// exit ;
68606: GO 68915
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
68608: LD_ADDR_VAR 0 10
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: LD_INT 6
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: LD_INT 4
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 3
68635: PUSH
68636: LD_INT 5
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 24
68650: PUSH
68651: LD_INT 25
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 23
68660: PUSH
68661: LD_INT 27
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: PUSH
68672: LD_INT 42
68674: PUSH
68675: LD_INT 43
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 44
68684: PUSH
68685: LD_INT 46
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 45
68694: PUSH
68695: LD_INT 47
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: LIST
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: ST_TO_ADDR
// result := [ ] ;
68712: LD_ADDR_VAR 0 3
68716: PUSH
68717: EMPTY
68718: ST_TO_ADDR
// for i in turrets do
68719: LD_ADDR_VAR 0 4
68723: PUSH
68724: LD_VAR 0 1
68728: PUSH
68729: FOR_IN
68730: IFFALSE 68913
// begin nat := GetNation ( i ) ;
68732: LD_ADDR_VAR 0 7
68736: PUSH
68737: LD_VAR 0 4
68741: PPUSH
68742: CALL_OW 248
68746: ST_TO_ADDR
// weapon := 0 ;
68747: LD_ADDR_VAR 0 8
68751: PUSH
68752: LD_INT 0
68754: ST_TO_ADDR
// if not nat then
68755: LD_VAR 0 7
68759: NOT
68760: IFFALSE 68764
// continue ;
68762: GO 68729
// for j in list [ nat ] do
68764: LD_ADDR_VAR 0 5
68768: PUSH
68769: LD_VAR 0 10
68773: PUSH
68774: LD_VAR 0 7
68778: ARRAY
68779: PUSH
68780: FOR_IN
68781: IFFALSE 68822
// if GetBWeapon ( i ) = j [ 1 ] then
68783: LD_VAR 0 4
68787: PPUSH
68788: CALL_OW 269
68792: PUSH
68793: LD_VAR 0 5
68797: PUSH
68798: LD_INT 1
68800: ARRAY
68801: EQUAL
68802: IFFALSE 68820
// begin weapon := j [ 2 ] ;
68804: LD_ADDR_VAR 0 8
68808: PUSH
68809: LD_VAR 0 5
68813: PUSH
68814: LD_INT 2
68816: ARRAY
68817: ST_TO_ADDR
// break ;
68818: GO 68822
// end ;
68820: GO 68780
68822: POP
68823: POP
// if not weapon then
68824: LD_VAR 0 8
68828: NOT
68829: IFFALSE 68833
// continue ;
68831: GO 68729
// for k in factories do
68833: LD_ADDR_VAR 0 6
68837: PUSH
68838: LD_VAR 0 2
68842: PUSH
68843: FOR_IN
68844: IFFALSE 68909
// begin weapons := AvailableWeaponList ( k ) ;
68846: LD_ADDR_VAR 0 9
68850: PUSH
68851: LD_VAR 0 6
68855: PPUSH
68856: CALL_OW 478
68860: ST_TO_ADDR
// if not weapons then
68861: LD_VAR 0 9
68865: NOT
68866: IFFALSE 68870
// continue ;
68868: GO 68843
// if weapon in weapons then
68870: LD_VAR 0 8
68874: PUSH
68875: LD_VAR 0 9
68879: IN
68880: IFFALSE 68907
// begin result := [ i , weapon ] ;
68882: LD_ADDR_VAR 0 3
68886: PUSH
68887: LD_VAR 0 4
68891: PUSH
68892: LD_VAR 0 8
68896: PUSH
68897: EMPTY
68898: LIST
68899: LIST
68900: ST_TO_ADDR
// exit ;
68901: POP
68902: POP
68903: POP
68904: POP
68905: GO 68915
// end ; end ;
68907: GO 68843
68909: POP
68910: POP
// end ;
68911: GO 68729
68913: POP
68914: POP
// end ;
68915: LD_VAR 0 3
68919: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68920: LD_INT 0
68922: PPUSH
// if not side or side > 8 then
68923: LD_VAR 0 3
68927: NOT
68928: PUSH
68929: LD_VAR 0 3
68933: PUSH
68934: LD_INT 8
68936: GREATER
68937: OR
68938: IFFALSE 68942
// exit ;
68940: GO 69001
// if not range then
68942: LD_VAR 0 4
68946: NOT
68947: IFFALSE 68958
// range := - 12 ;
68949: LD_ADDR_VAR 0 4
68953: PUSH
68954: LD_INT 12
68956: NEG
68957: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_VAR 0 2
68967: PPUSH
68968: LD_VAR 0 3
68972: PPUSH
68973: LD_VAR 0 4
68977: PPUSH
68978: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68982: LD_VAR 0 1
68986: PPUSH
68987: LD_VAR 0 2
68991: PPUSH
68992: LD_VAR 0 3
68996: PPUSH
68997: CALL_OW 331
// end ;
69001: LD_VAR 0 5
69005: RET
// export function Video ( mode ) ; begin
69006: LD_INT 0
69008: PPUSH
// ingame_video = mode ;
69009: LD_ADDR_OWVAR 52
69013: PUSH
69014: LD_VAR 0 1
69018: ST_TO_ADDR
// interface_hidden = mode ;
69019: LD_ADDR_OWVAR 54
69023: PUSH
69024: LD_VAR 0 1
69028: ST_TO_ADDR
// end ;
69029: LD_VAR 0 2
69033: RET
// export function Join ( array , element ) ; begin
69034: LD_INT 0
69036: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69037: LD_ADDR_VAR 0 3
69041: PUSH
69042: LD_VAR 0 1
69046: PPUSH
69047: LD_VAR 0 1
69051: PUSH
69052: LD_INT 1
69054: PLUS
69055: PPUSH
69056: LD_VAR 0 2
69060: PPUSH
69061: CALL_OW 1
69065: ST_TO_ADDR
// end ;
69066: LD_VAR 0 3
69070: RET
// export function JoinUnion ( array , element ) ; begin
69071: LD_INT 0
69073: PPUSH
// result := array union element ;
69074: LD_ADDR_VAR 0 3
69078: PUSH
69079: LD_VAR 0 1
69083: PUSH
69084: LD_VAR 0 2
69088: UNION
69089: ST_TO_ADDR
// end ;
69090: LD_VAR 0 3
69094: RET
// export function GetBehemoths ( side ) ; begin
69095: LD_INT 0
69097: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69098: LD_ADDR_VAR 0 2
69102: PUSH
69103: LD_INT 22
69105: PUSH
69106: LD_VAR 0 1
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 31
69117: PUSH
69118: LD_INT 25
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PPUSH
69129: CALL_OW 69
69133: ST_TO_ADDR
// end ;
69134: LD_VAR 0 2
69138: RET
// export function Shuffle ( array ) ; var i , index ; begin
69139: LD_INT 0
69141: PPUSH
69142: PPUSH
69143: PPUSH
// result := [ ] ;
69144: LD_ADDR_VAR 0 2
69148: PUSH
69149: EMPTY
69150: ST_TO_ADDR
// if not array then
69151: LD_VAR 0 1
69155: NOT
69156: IFFALSE 69160
// exit ;
69158: GO 69259
// Randomize ;
69160: CALL_OW 10
// for i = array downto 1 do
69164: LD_ADDR_VAR 0 3
69168: PUSH
69169: DOUBLE
69170: LD_VAR 0 1
69174: INC
69175: ST_TO_ADDR
69176: LD_INT 1
69178: PUSH
69179: FOR_DOWNTO
69180: IFFALSE 69257
// begin index := rand ( 1 , array ) ;
69182: LD_ADDR_VAR 0 4
69186: PUSH
69187: LD_INT 1
69189: PPUSH
69190: LD_VAR 0 1
69194: PPUSH
69195: CALL_OW 12
69199: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69200: LD_ADDR_VAR 0 2
69204: PUSH
69205: LD_VAR 0 2
69209: PPUSH
69210: LD_VAR 0 2
69214: PUSH
69215: LD_INT 1
69217: PLUS
69218: PPUSH
69219: LD_VAR 0 1
69223: PUSH
69224: LD_VAR 0 4
69228: ARRAY
69229: PPUSH
69230: CALL_OW 2
69234: ST_TO_ADDR
// array := Delete ( array , index ) ;
69235: LD_ADDR_VAR 0 1
69239: PUSH
69240: LD_VAR 0 1
69244: PPUSH
69245: LD_VAR 0 4
69249: PPUSH
69250: CALL_OW 3
69254: ST_TO_ADDR
// end ;
69255: GO 69179
69257: POP
69258: POP
// end ;
69259: LD_VAR 0 2
69263: RET
// export function GetBaseMaterials ( base ) ; begin
69264: LD_INT 0
69266: PPUSH
// result := [ 0 , 0 , 0 ] ;
69267: LD_ADDR_VAR 0 2
69271: PUSH
69272: LD_INT 0
69274: PUSH
69275: LD_INT 0
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: LIST
69285: ST_TO_ADDR
// if not base then
69286: LD_VAR 0 1
69290: NOT
69291: IFFALSE 69295
// exit ;
69293: GO 69344
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69295: LD_ADDR_VAR 0 2
69299: PUSH
69300: LD_VAR 0 1
69304: PPUSH
69305: LD_INT 1
69307: PPUSH
69308: CALL_OW 275
69312: PUSH
69313: LD_VAR 0 1
69317: PPUSH
69318: LD_INT 2
69320: PPUSH
69321: CALL_OW 275
69325: PUSH
69326: LD_VAR 0 1
69330: PPUSH
69331: LD_INT 3
69333: PPUSH
69334: CALL_OW 275
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// end ;
69344: LD_VAR 0 2
69348: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69349: LD_INT 0
69351: PPUSH
69352: PPUSH
// result := array ;
69353: LD_ADDR_VAR 0 3
69357: PUSH
69358: LD_VAR 0 1
69362: ST_TO_ADDR
// if size >= result then
69363: LD_VAR 0 2
69367: PUSH
69368: LD_VAR 0 3
69372: GREATEREQUAL
69373: IFFALSE 69377
// exit ;
69375: GO 69427
// if size then
69377: LD_VAR 0 2
69381: IFFALSE 69427
// for i := array downto size do
69383: LD_ADDR_VAR 0 4
69387: PUSH
69388: DOUBLE
69389: LD_VAR 0 1
69393: INC
69394: ST_TO_ADDR
69395: LD_VAR 0 2
69399: PUSH
69400: FOR_DOWNTO
69401: IFFALSE 69425
// result := Delete ( result , result ) ;
69403: LD_ADDR_VAR 0 3
69407: PUSH
69408: LD_VAR 0 3
69412: PPUSH
69413: LD_VAR 0 3
69417: PPUSH
69418: CALL_OW 3
69422: ST_TO_ADDR
69423: GO 69400
69425: POP
69426: POP
// end ;
69427: LD_VAR 0 3
69431: RET
// export function ComExit ( unit ) ; var tmp ; begin
69432: LD_INT 0
69434: PPUSH
69435: PPUSH
// if not IsInUnit ( unit ) then
69436: LD_VAR 0 1
69440: PPUSH
69441: CALL_OW 310
69445: NOT
69446: IFFALSE 69450
// exit ;
69448: GO 69510
// tmp := IsInUnit ( unit ) ;
69450: LD_ADDR_VAR 0 3
69454: PUSH
69455: LD_VAR 0 1
69459: PPUSH
69460: CALL_OW 310
69464: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
69465: LD_VAR 0 3
69469: PPUSH
69470: CALL_OW 247
69474: PUSH
69475: LD_INT 2
69477: EQUAL
69478: IFFALSE 69491
// ComExitVehicle ( unit ) else
69480: LD_VAR 0 1
69484: PPUSH
69485: CALL_OW 121
69489: GO 69500
// ComExitBuilding ( unit ) ;
69491: LD_VAR 0 1
69495: PPUSH
69496: CALL_OW 122
// result := tmp ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_VAR 0 3
69509: ST_TO_ADDR
// end ;
69510: LD_VAR 0 2
69514: RET
// export function ComExitAll ( units ) ; var i ; begin
69515: LD_INT 0
69517: PPUSH
69518: PPUSH
// if not units then
69519: LD_VAR 0 1
69523: NOT
69524: IFFALSE 69528
// exit ;
69526: GO 69554
// for i in units do
69528: LD_ADDR_VAR 0 3
69532: PUSH
69533: LD_VAR 0 1
69537: PUSH
69538: FOR_IN
69539: IFFALSE 69552
// ComExit ( i ) ;
69541: LD_VAR 0 3
69545: PPUSH
69546: CALL 69432 0 1
69550: GO 69538
69552: POP
69553: POP
// end ;
69554: LD_VAR 0 2
69558: RET
// export function ResetHc ; begin
69559: LD_INT 0
69561: PPUSH
// InitHc ;
69562: CALL_OW 19
// hc_importance := 0 ;
69566: LD_ADDR_OWVAR 32
69570: PUSH
69571: LD_INT 0
69573: ST_TO_ADDR
// end ;
69574: LD_VAR 0 1
69578: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
69579: LD_INT 0
69581: PPUSH
69582: PPUSH
69583: PPUSH
// _x := ( x1 + x2 ) div 2 ;
69584: LD_ADDR_VAR 0 6
69588: PUSH
69589: LD_VAR 0 1
69593: PUSH
69594: LD_VAR 0 3
69598: PLUS
69599: PUSH
69600: LD_INT 2
69602: DIV
69603: ST_TO_ADDR
// if _x < 0 then
69604: LD_VAR 0 6
69608: PUSH
69609: LD_INT 0
69611: LESS
69612: IFFALSE 69629
// _x := _x * - 1 ;
69614: LD_ADDR_VAR 0 6
69618: PUSH
69619: LD_VAR 0 6
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: MUL
69628: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
69629: LD_ADDR_VAR 0 7
69633: PUSH
69634: LD_VAR 0 2
69638: PUSH
69639: LD_VAR 0 4
69643: PLUS
69644: PUSH
69645: LD_INT 2
69647: DIV
69648: ST_TO_ADDR
// if _y < 0 then
69649: LD_VAR 0 7
69653: PUSH
69654: LD_INT 0
69656: LESS
69657: IFFALSE 69674
// _y := _y * - 1 ;
69659: LD_ADDR_VAR 0 7
69663: PUSH
69664: LD_VAR 0 7
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: MUL
69673: ST_TO_ADDR
// result := [ _x , _y ] ;
69674: LD_ADDR_VAR 0 5
69678: PUSH
69679: LD_VAR 0 6
69683: PUSH
69684: LD_VAR 0 7
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: ST_TO_ADDR
// end ;
69693: LD_VAR 0 5
69697: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
69698: LD_INT 0
69700: PPUSH
69701: PPUSH
69702: PPUSH
69703: PPUSH
// task := GetTaskList ( unit ) ;
69704: LD_ADDR_VAR 0 7
69708: PUSH
69709: LD_VAR 0 1
69713: PPUSH
69714: CALL_OW 437
69718: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
69719: LD_VAR 0 7
69723: NOT
69724: PUSH
69725: LD_VAR 0 1
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: CALL_OW 308
69739: NOT
69740: AND
69741: IFFALSE 69745
// exit ;
69743: GO 69863
// if IsInArea ( unit , area ) then
69745: LD_VAR 0 1
69749: PPUSH
69750: LD_VAR 0 2
69754: PPUSH
69755: CALL_OW 308
69759: IFFALSE 69777
// begin ComMoveToArea ( unit , goAway ) ;
69761: LD_VAR 0 1
69765: PPUSH
69766: LD_VAR 0 3
69770: PPUSH
69771: CALL_OW 113
// exit ;
69775: GO 69863
// end ; if task [ 1 ] [ 1 ] <> M then
69777: LD_VAR 0 7
69781: PUSH
69782: LD_INT 1
69784: ARRAY
69785: PUSH
69786: LD_INT 1
69788: ARRAY
69789: PUSH
69790: LD_STRING M
69792: NONEQUAL
69793: IFFALSE 69797
// exit ;
69795: GO 69863
// x := task [ 1 ] [ 2 ] ;
69797: LD_ADDR_VAR 0 5
69801: PUSH
69802: LD_VAR 0 7
69806: PUSH
69807: LD_INT 1
69809: ARRAY
69810: PUSH
69811: LD_INT 2
69813: ARRAY
69814: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69815: LD_ADDR_VAR 0 6
69819: PUSH
69820: LD_VAR 0 7
69824: PUSH
69825: LD_INT 1
69827: ARRAY
69828: PUSH
69829: LD_INT 3
69831: ARRAY
69832: ST_TO_ADDR
// if InArea ( x , y , area ) then
69833: LD_VAR 0 5
69837: PPUSH
69838: LD_VAR 0 6
69842: PPUSH
69843: LD_VAR 0 2
69847: PPUSH
69848: CALL_OW 309
69852: IFFALSE 69863
// ComStop ( unit ) ;
69854: LD_VAR 0 1
69858: PPUSH
69859: CALL_OW 141
// end ;
69863: LD_VAR 0 4
69867: RET
// export function Abs ( value ) ; begin
69868: LD_INT 0
69870: PPUSH
// result := value ;
69871: LD_ADDR_VAR 0 2
69875: PUSH
69876: LD_VAR 0 1
69880: ST_TO_ADDR
// if value < 0 then
69881: LD_VAR 0 1
69885: PUSH
69886: LD_INT 0
69888: LESS
69889: IFFALSE 69906
// result := value * - 1 ;
69891: LD_ADDR_VAR 0 2
69895: PUSH
69896: LD_VAR 0 1
69900: PUSH
69901: LD_INT 1
69903: NEG
69904: MUL
69905: ST_TO_ADDR
// end ;
69906: LD_VAR 0 2
69910: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69911: LD_INT 0
69913: PPUSH
69914: PPUSH
69915: PPUSH
69916: PPUSH
69917: PPUSH
69918: PPUSH
69919: PPUSH
69920: PPUSH
// if not unit or not building then
69921: LD_VAR 0 1
69925: NOT
69926: PUSH
69927: LD_VAR 0 2
69931: NOT
69932: OR
69933: IFFALSE 69937
// exit ;
69935: GO 70163
// x := GetX ( building ) ;
69937: LD_ADDR_VAR 0 4
69941: PUSH
69942: LD_VAR 0 2
69946: PPUSH
69947: CALL_OW 250
69951: ST_TO_ADDR
// y := GetY ( building ) ;
69952: LD_ADDR_VAR 0 6
69956: PUSH
69957: LD_VAR 0 2
69961: PPUSH
69962: CALL_OW 251
69966: ST_TO_ADDR
// d := GetDir ( building ) ;
69967: LD_ADDR_VAR 0 8
69971: PUSH
69972: LD_VAR 0 2
69976: PPUSH
69977: CALL_OW 254
69981: ST_TO_ADDR
// r := 4 ;
69982: LD_ADDR_VAR 0 9
69986: PUSH
69987: LD_INT 4
69989: ST_TO_ADDR
// for i := 1 to 5 do
69990: LD_ADDR_VAR 0 10
69994: PUSH
69995: DOUBLE
69996: LD_INT 1
69998: DEC
69999: ST_TO_ADDR
70000: LD_INT 5
70002: PUSH
70003: FOR_TO
70004: IFFALSE 70161
// begin _x := ShiftX ( x , d , r + i ) ;
70006: LD_ADDR_VAR 0 5
70010: PUSH
70011: LD_VAR 0 4
70015: PPUSH
70016: LD_VAR 0 8
70020: PPUSH
70021: LD_VAR 0 9
70025: PUSH
70026: LD_VAR 0 10
70030: PLUS
70031: PPUSH
70032: CALL_OW 272
70036: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70037: LD_ADDR_VAR 0 7
70041: PUSH
70042: LD_VAR 0 6
70046: PPUSH
70047: LD_VAR 0 8
70051: PPUSH
70052: LD_VAR 0 9
70056: PUSH
70057: LD_VAR 0 10
70061: PLUS
70062: PPUSH
70063: CALL_OW 273
70067: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70068: LD_VAR 0 5
70072: PPUSH
70073: LD_VAR 0 7
70077: PPUSH
70078: CALL_OW 488
70082: PUSH
70083: LD_VAR 0 5
70087: PPUSH
70088: LD_VAR 0 7
70092: PPUSH
70093: CALL_OW 428
70097: PPUSH
70098: CALL_OW 247
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: IN
70113: NOT
70114: AND
70115: IFFALSE 70159
// begin ComMoveXY ( unit , _x , _y ) ;
70117: LD_VAR 0 1
70121: PPUSH
70122: LD_VAR 0 5
70126: PPUSH
70127: LD_VAR 0 7
70131: PPUSH
70132: CALL_OW 111
// result := [ _x , _y ] ;
70136: LD_ADDR_VAR 0 3
70140: PUSH
70141: LD_VAR 0 5
70145: PUSH
70146: LD_VAR 0 7
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: ST_TO_ADDR
// exit ;
70155: POP
70156: POP
70157: GO 70163
// end ; end ;
70159: GO 70003
70161: POP
70162: POP
// end ;
70163: LD_VAR 0 3
70167: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70168: LD_INT 0
70170: PPUSH
70171: PPUSH
70172: PPUSH
// result := 0 ;
70173: LD_ADDR_VAR 0 3
70177: PUSH
70178: LD_INT 0
70180: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70181: LD_VAR 0 1
70185: PUSH
70186: LD_INT 0
70188: LESS
70189: PUSH
70190: LD_VAR 0 1
70194: PUSH
70195: LD_INT 8
70197: GREATER
70198: OR
70199: PUSH
70200: LD_VAR 0 2
70204: PUSH
70205: LD_INT 0
70207: LESS
70208: OR
70209: PUSH
70210: LD_VAR 0 2
70214: PUSH
70215: LD_INT 8
70217: GREATER
70218: OR
70219: IFFALSE 70223
// exit ;
70221: GO 70298
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70223: LD_ADDR_VAR 0 4
70227: PUSH
70228: LD_INT 22
70230: PUSH
70231: LD_VAR 0 2
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PPUSH
70240: CALL_OW 69
70244: PUSH
70245: FOR_IN
70246: IFFALSE 70296
// begin un := UnitShoot ( i ) ;
70248: LD_ADDR_VAR 0 5
70252: PUSH
70253: LD_VAR 0 4
70257: PPUSH
70258: CALL_OW 504
70262: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70263: LD_VAR 0 5
70267: PPUSH
70268: CALL_OW 255
70272: PUSH
70273: LD_VAR 0 1
70277: EQUAL
70278: IFFALSE 70294
// begin result := un ;
70280: LD_ADDR_VAR 0 3
70284: PUSH
70285: LD_VAR 0 5
70289: ST_TO_ADDR
// exit ;
70290: POP
70291: POP
70292: GO 70298
// end ; end ;
70294: GO 70245
70296: POP
70297: POP
// end ;
70298: LD_VAR 0 3
70302: RET
// export function GetCargoBay ( units ) ; begin
70303: LD_INT 0
70305: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70306: LD_ADDR_VAR 0 2
70310: PUSH
70311: LD_VAR 0 1
70315: PPUSH
70316: LD_INT 2
70318: PUSH
70319: LD_INT 34
70321: PUSH
70322: LD_INT 12
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 34
70331: PUSH
70332: LD_INT 51
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 34
70341: PUSH
70342: LD_INT 32
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 34
70351: PUSH
70352: LD_INT 89
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: PPUSH
70366: CALL_OW 72
70370: ST_TO_ADDR
// end ;
70371: LD_VAR 0 2
70375: RET
// export function Negate ( value ) ; begin
70376: LD_INT 0
70378: PPUSH
// result := not value ;
70379: LD_ADDR_VAR 0 2
70383: PUSH
70384: LD_VAR 0 1
70388: NOT
70389: ST_TO_ADDR
// end ;
70390: LD_VAR 0 2
70394: RET
// export function Inc ( value ) ; begin
70395: LD_INT 0
70397: PPUSH
// result := value + 1 ;
70398: LD_ADDR_VAR 0 2
70402: PUSH
70403: LD_VAR 0 1
70407: PUSH
70408: LD_INT 1
70410: PLUS
70411: ST_TO_ADDR
// end ;
70412: LD_VAR 0 2
70416: RET
// export function Dec ( value ) ; begin
70417: LD_INT 0
70419: PPUSH
// result := value - 1 ;
70420: LD_ADDR_VAR 0 2
70424: PUSH
70425: LD_VAR 0 1
70429: PUSH
70430: LD_INT 1
70432: MINUS
70433: ST_TO_ADDR
// end ;
70434: LD_VAR 0 2
70438: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
70439: LD_INT 0
70441: PPUSH
70442: PPUSH
70443: PPUSH
70444: PPUSH
70445: PPUSH
70446: PPUSH
70447: PPUSH
70448: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
70449: LD_VAR 0 1
70453: PPUSH
70454: LD_VAR 0 2
70458: PPUSH
70459: CALL_OW 488
70463: NOT
70464: PUSH
70465: LD_VAR 0 3
70469: PPUSH
70470: LD_VAR 0 4
70474: PPUSH
70475: CALL_OW 488
70479: NOT
70480: OR
70481: IFFALSE 70494
// begin result := - 1 ;
70483: LD_ADDR_VAR 0 5
70487: PUSH
70488: LD_INT 1
70490: NEG
70491: ST_TO_ADDR
// exit ;
70492: GO 70729
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
70494: LD_ADDR_VAR 0 12
70498: PUSH
70499: LD_VAR 0 1
70503: PPUSH
70504: LD_VAR 0 2
70508: PPUSH
70509: LD_VAR 0 3
70513: PPUSH
70514: LD_VAR 0 4
70518: PPUSH
70519: CALL 69579 0 4
70523: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
70524: LD_ADDR_VAR 0 11
70528: PUSH
70529: LD_VAR 0 1
70533: PPUSH
70534: LD_VAR 0 2
70538: PPUSH
70539: LD_VAR 0 12
70543: PUSH
70544: LD_INT 1
70546: ARRAY
70547: PPUSH
70548: LD_VAR 0 12
70552: PUSH
70553: LD_INT 2
70555: ARRAY
70556: PPUSH
70557: CALL_OW 298
70561: ST_TO_ADDR
// distance := 9999 ;
70562: LD_ADDR_VAR 0 10
70566: PUSH
70567: LD_INT 9999
70569: ST_TO_ADDR
// for i := 0 to 5 do
70570: LD_ADDR_VAR 0 6
70574: PUSH
70575: DOUBLE
70576: LD_INT 0
70578: DEC
70579: ST_TO_ADDR
70580: LD_INT 5
70582: PUSH
70583: FOR_TO
70584: IFFALSE 70727
// begin _x := ShiftX ( x1 , i , centerDist ) ;
70586: LD_ADDR_VAR 0 7
70590: PUSH
70591: LD_VAR 0 1
70595: PPUSH
70596: LD_VAR 0 6
70600: PPUSH
70601: LD_VAR 0 11
70605: PPUSH
70606: CALL_OW 272
70610: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
70611: LD_ADDR_VAR 0 8
70615: PUSH
70616: LD_VAR 0 2
70620: PPUSH
70621: LD_VAR 0 6
70625: PPUSH
70626: LD_VAR 0 11
70630: PPUSH
70631: CALL_OW 273
70635: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70636: LD_VAR 0 7
70640: PPUSH
70641: LD_VAR 0 8
70645: PPUSH
70646: CALL_OW 488
70650: NOT
70651: IFFALSE 70655
// continue ;
70653: GO 70583
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
70655: LD_ADDR_VAR 0 9
70659: PUSH
70660: LD_VAR 0 12
70664: PUSH
70665: LD_INT 1
70667: ARRAY
70668: PPUSH
70669: LD_VAR 0 12
70673: PUSH
70674: LD_INT 2
70676: ARRAY
70677: PPUSH
70678: LD_VAR 0 7
70682: PPUSH
70683: LD_VAR 0 8
70687: PPUSH
70688: CALL_OW 298
70692: ST_TO_ADDR
// if tmp < distance then
70693: LD_VAR 0 9
70697: PUSH
70698: LD_VAR 0 10
70702: LESS
70703: IFFALSE 70725
// begin result := i ;
70705: LD_ADDR_VAR 0 5
70709: PUSH
70710: LD_VAR 0 6
70714: ST_TO_ADDR
// distance := tmp ;
70715: LD_ADDR_VAR 0 10
70719: PUSH
70720: LD_VAR 0 9
70724: ST_TO_ADDR
// end ; end ;
70725: GO 70583
70727: POP
70728: POP
// end ;
70729: LD_VAR 0 5
70733: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70734: LD_INT 0
70736: PPUSH
70737: PPUSH
// if not driver or not IsInUnit ( driver ) then
70738: LD_VAR 0 1
70742: NOT
70743: PUSH
70744: LD_VAR 0 1
70748: PPUSH
70749: CALL_OW 310
70753: NOT
70754: OR
70755: IFFALSE 70759
// exit ;
70757: GO 70849
// vehicle := IsInUnit ( driver ) ;
70759: LD_ADDR_VAR 0 3
70763: PUSH
70764: LD_VAR 0 1
70768: PPUSH
70769: CALL_OW 310
70773: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70774: LD_VAR 0 1
70778: PPUSH
70779: LD_STRING \
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: LD_INT 0
70796: PUSH
70797: LD_INT 0
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: PUSH
70809: LD_STRING E
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: LD_INT 0
70817: PUSH
70818: LD_VAR 0 3
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_INT 0
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PPUSH
70845: CALL_OW 446
// end ;
70849: LD_VAR 0 2
70853: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
70854: LD_INT 0
70856: PPUSH
70857: PPUSH
// if not driver or not IsInUnit ( driver ) then
70858: LD_VAR 0 1
70862: NOT
70863: PUSH
70864: LD_VAR 0 1
70868: PPUSH
70869: CALL_OW 310
70873: NOT
70874: OR
70875: IFFALSE 70879
// exit ;
70877: GO 70969
// vehicle := IsInUnit ( driver ) ;
70879: LD_ADDR_VAR 0 3
70883: PUSH
70884: LD_VAR 0 1
70888: PPUSH
70889: CALL_OW 310
70893: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
70894: LD_VAR 0 1
70898: PPUSH
70899: LD_STRING \
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 0
70907: PUSH
70908: LD_INT 0
70910: PUSH
70911: LD_INT 0
70913: PUSH
70914: LD_INT 0
70916: PUSH
70917: LD_INT 0
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: PUSH
70929: LD_STRING E
70931: PUSH
70932: LD_INT 0
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: LD_VAR 0 3
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PPUSH
70965: CALL_OW 447
// end ;
70969: LD_VAR 0 2
70973: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
70974: LD_INT 0
70976: PPUSH
70977: PPUSH
70978: PPUSH
// tmp := [ ] ;
70979: LD_ADDR_VAR 0 5
70983: PUSH
70984: EMPTY
70985: ST_TO_ADDR
// for i in units do
70986: LD_ADDR_VAR 0 4
70990: PUSH
70991: LD_VAR 0 1
70995: PUSH
70996: FOR_IN
70997: IFFALSE 71035
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
70999: LD_ADDR_VAR 0 5
71003: PUSH
71004: LD_VAR 0 5
71008: PPUSH
71009: LD_VAR 0 5
71013: PUSH
71014: LD_INT 1
71016: PLUS
71017: PPUSH
71018: LD_VAR 0 4
71022: PPUSH
71023: CALL_OW 256
71027: PPUSH
71028: CALL_OW 2
71032: ST_TO_ADDR
71033: GO 70996
71035: POP
71036: POP
// if not tmp then
71037: LD_VAR 0 5
71041: NOT
71042: IFFALSE 71046
// exit ;
71044: GO 71094
// if asc then
71046: LD_VAR 0 2
71050: IFFALSE 71074
// result := SortListByListAsc ( units , tmp ) else
71052: LD_ADDR_VAR 0 3
71056: PUSH
71057: LD_VAR 0 1
71061: PPUSH
71062: LD_VAR 0 5
71066: PPUSH
71067: CALL_OW 76
71071: ST_TO_ADDR
71072: GO 71094
// result := SortListByListDesc ( units , tmp ) ;
71074: LD_ADDR_VAR 0 3
71078: PUSH
71079: LD_VAR 0 1
71083: PPUSH
71084: LD_VAR 0 5
71088: PPUSH
71089: CALL_OW 77
71093: ST_TO_ADDR
// end ;
71094: LD_VAR 0 3
71098: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71099: LD_INT 0
71101: PPUSH
71102: PPUSH
// task := GetTaskList ( mech ) ;
71103: LD_ADDR_VAR 0 4
71107: PUSH
71108: LD_VAR 0 1
71112: PPUSH
71113: CALL_OW 437
71117: ST_TO_ADDR
// if not task then
71118: LD_VAR 0 4
71122: NOT
71123: IFFALSE 71127
// exit ;
71125: GO 71169
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71127: LD_ADDR_VAR 0 3
71131: PUSH
71132: LD_VAR 0 4
71136: PUSH
71137: LD_INT 1
71139: ARRAY
71140: PUSH
71141: LD_INT 1
71143: ARRAY
71144: PUSH
71145: LD_STRING r
71147: EQUAL
71148: PUSH
71149: LD_VAR 0 4
71153: PUSH
71154: LD_INT 1
71156: ARRAY
71157: PUSH
71158: LD_INT 4
71160: ARRAY
71161: PUSH
71162: LD_VAR 0 2
71166: EQUAL
71167: AND
71168: ST_TO_ADDR
// end ;
71169: LD_VAR 0 3
71173: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71174: LD_INT 0
71176: PPUSH
// SetDir ( unit , d ) ;
71177: LD_VAR 0 1
71181: PPUSH
71182: LD_VAR 0 4
71186: PPUSH
71187: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71191: LD_VAR 0 1
71195: PPUSH
71196: LD_VAR 0 2
71200: PPUSH
71201: LD_VAR 0 3
71205: PPUSH
71206: LD_VAR 0 5
71210: PPUSH
71211: CALL_OW 48
// end ;
71215: LD_VAR 0 6
71219: RET
// export function ToNaturalNumber ( number ) ; begin
71220: LD_INT 0
71222: PPUSH
// result := number div 1 ;
71223: LD_ADDR_VAR 0 2
71227: PUSH
71228: LD_VAR 0 1
71232: PUSH
71233: LD_INT 1
71235: DIV
71236: ST_TO_ADDR
// if number < 0 then
71237: LD_VAR 0 1
71241: PUSH
71242: LD_INT 0
71244: LESS
71245: IFFALSE 71255
// result := 0 ;
71247: LD_ADDR_VAR 0 2
71251: PUSH
71252: LD_INT 0
71254: ST_TO_ADDR
// end ;
71255: LD_VAR 0 2
71259: RET
// export function SortByClass ( units , class ) ; var un ; begin
71260: LD_INT 0
71262: PPUSH
71263: PPUSH
// if not units or not class then
71264: LD_VAR 0 1
71268: NOT
71269: PUSH
71270: LD_VAR 0 2
71274: NOT
71275: OR
71276: IFFALSE 71280
// exit ;
71278: GO 71375
// result := [ ] ;
71280: LD_ADDR_VAR 0 3
71284: PUSH
71285: EMPTY
71286: ST_TO_ADDR
// for un in units do
71287: LD_ADDR_VAR 0 4
71291: PUSH
71292: LD_VAR 0 1
71296: PUSH
71297: FOR_IN
71298: IFFALSE 71373
// if GetClass ( un ) = class then
71300: LD_VAR 0 4
71304: PPUSH
71305: CALL_OW 257
71309: PUSH
71310: LD_VAR 0 2
71314: EQUAL
71315: IFFALSE 71342
// result := Insert ( result , 1 , un ) else
71317: LD_ADDR_VAR 0 3
71321: PUSH
71322: LD_VAR 0 3
71326: PPUSH
71327: LD_INT 1
71329: PPUSH
71330: LD_VAR 0 4
71334: PPUSH
71335: CALL_OW 2
71339: ST_TO_ADDR
71340: GO 71371
// result := Replace ( result , result + 1 , un ) ;
71342: LD_ADDR_VAR 0 3
71346: PUSH
71347: LD_VAR 0 3
71351: PPUSH
71352: LD_VAR 0 3
71356: PUSH
71357: LD_INT 1
71359: PLUS
71360: PPUSH
71361: LD_VAR 0 4
71365: PPUSH
71366: CALL_OW 1
71370: ST_TO_ADDR
71371: GO 71297
71373: POP
71374: POP
// end ;
71375: LD_VAR 0 3
71379: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71380: LD_INT 0
71382: PPUSH
71383: PPUSH
71384: PPUSH
71385: PPUSH
71386: PPUSH
71387: PPUSH
71388: PPUSH
// result := [ ] ;
71389: LD_ADDR_VAR 0 4
71393: PUSH
71394: EMPTY
71395: ST_TO_ADDR
// if x - r < 0 then
71396: LD_VAR 0 1
71400: PUSH
71401: LD_VAR 0 3
71405: MINUS
71406: PUSH
71407: LD_INT 0
71409: LESS
71410: IFFALSE 71422
// min_x := 0 else
71412: LD_ADDR_VAR 0 8
71416: PUSH
71417: LD_INT 0
71419: ST_TO_ADDR
71420: GO 71438
// min_x := x - r ;
71422: LD_ADDR_VAR 0 8
71426: PUSH
71427: LD_VAR 0 1
71431: PUSH
71432: LD_VAR 0 3
71436: MINUS
71437: ST_TO_ADDR
// if y - r < 0 then
71438: LD_VAR 0 2
71442: PUSH
71443: LD_VAR 0 3
71447: MINUS
71448: PUSH
71449: LD_INT 0
71451: LESS
71452: IFFALSE 71464
// min_y := 0 else
71454: LD_ADDR_VAR 0 7
71458: PUSH
71459: LD_INT 0
71461: ST_TO_ADDR
71462: GO 71480
// min_y := y - r ;
71464: LD_ADDR_VAR 0 7
71468: PUSH
71469: LD_VAR 0 2
71473: PUSH
71474: LD_VAR 0 3
71478: MINUS
71479: ST_TO_ADDR
// max_x := x + r ;
71480: LD_ADDR_VAR 0 9
71484: PUSH
71485: LD_VAR 0 1
71489: PUSH
71490: LD_VAR 0 3
71494: PLUS
71495: ST_TO_ADDR
// max_y := y + r ;
71496: LD_ADDR_VAR 0 10
71500: PUSH
71501: LD_VAR 0 2
71505: PUSH
71506: LD_VAR 0 3
71510: PLUS
71511: ST_TO_ADDR
// for _x = min_x to max_x do
71512: LD_ADDR_VAR 0 5
71516: PUSH
71517: DOUBLE
71518: LD_VAR 0 8
71522: DEC
71523: ST_TO_ADDR
71524: LD_VAR 0 9
71528: PUSH
71529: FOR_TO
71530: IFFALSE 71631
// for _y = min_y to max_y do
71532: LD_ADDR_VAR 0 6
71536: PUSH
71537: DOUBLE
71538: LD_VAR 0 7
71542: DEC
71543: ST_TO_ADDR
71544: LD_VAR 0 10
71548: PUSH
71549: FOR_TO
71550: IFFALSE 71627
// begin if not ValidHex ( _x , _y ) then
71552: LD_VAR 0 5
71556: PPUSH
71557: LD_VAR 0 6
71561: PPUSH
71562: CALL_OW 488
71566: NOT
71567: IFFALSE 71571
// continue ;
71569: GO 71549
// if GetResourceTypeXY ( _x , _y ) then
71571: LD_VAR 0 5
71575: PPUSH
71576: LD_VAR 0 6
71580: PPUSH
71581: CALL_OW 283
71585: IFFALSE 71625
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
71587: LD_ADDR_VAR 0 4
71591: PUSH
71592: LD_VAR 0 4
71596: PPUSH
71597: LD_VAR 0 4
71601: PUSH
71602: LD_INT 1
71604: PLUS
71605: PPUSH
71606: LD_VAR 0 5
71610: PUSH
71611: LD_VAR 0 6
71615: PUSH
71616: EMPTY
71617: LIST
71618: LIST
71619: PPUSH
71620: CALL_OW 1
71624: ST_TO_ADDR
// end ;
71625: GO 71549
71627: POP
71628: POP
71629: GO 71529
71631: POP
71632: POP
// end ;
71633: LD_VAR 0 4
71637: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
71638: LD_INT 0
71640: PPUSH
71641: PPUSH
71642: PPUSH
71643: PPUSH
71644: PPUSH
71645: PPUSH
71646: PPUSH
71647: PPUSH
// if not units then
71648: LD_VAR 0 1
71652: NOT
71653: IFFALSE 71657
// exit ;
71655: GO 72181
// result := UnitFilter ( units , [ f_ok ] ) ;
71657: LD_ADDR_VAR 0 3
71661: PUSH
71662: LD_VAR 0 1
71666: PPUSH
71667: LD_INT 50
71669: PUSH
71670: EMPTY
71671: LIST
71672: PPUSH
71673: CALL_OW 72
71677: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
71678: LD_ADDR_VAR 0 8
71682: PUSH
71683: LD_VAR 0 1
71687: PUSH
71688: LD_INT 1
71690: ARRAY
71691: PPUSH
71692: CALL_OW 255
71696: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
71697: LD_ADDR_VAR 0 10
71701: PUSH
71702: LD_INT 29
71704: PUSH
71705: LD_INT 91
71707: PUSH
71708: LD_INT 49
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: LIST
71715: ST_TO_ADDR
// if not result then
71716: LD_VAR 0 3
71720: NOT
71721: IFFALSE 71725
// exit ;
71723: GO 72181
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
71725: LD_ADDR_VAR 0 5
71729: PUSH
71730: LD_INT 81
71732: PUSH
71733: LD_VAR 0 8
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PPUSH
71742: CALL_OW 69
71746: ST_TO_ADDR
// for i in result do
71747: LD_ADDR_VAR 0 4
71751: PUSH
71752: LD_VAR 0 3
71756: PUSH
71757: FOR_IN
71758: IFFALSE 72179
// begin tag := GetTag ( i ) + 1 ;
71760: LD_ADDR_VAR 0 9
71764: PUSH
71765: LD_VAR 0 4
71769: PPUSH
71770: CALL_OW 110
71774: PUSH
71775: LD_INT 1
71777: PLUS
71778: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
71779: LD_ADDR_VAR 0 7
71783: PUSH
71784: LD_VAR 0 4
71788: PPUSH
71789: CALL_OW 250
71793: PPUSH
71794: LD_VAR 0 4
71798: PPUSH
71799: CALL_OW 251
71803: PPUSH
71804: LD_INT 6
71806: PPUSH
71807: CALL 71380 0 3
71811: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
71812: LD_VAR 0 4
71816: PPUSH
71817: CALL_OW 247
71821: PUSH
71822: LD_INT 2
71824: EQUAL
71825: PUSH
71826: LD_VAR 0 7
71830: AND
71831: PUSH
71832: LD_VAR 0 4
71836: PPUSH
71837: CALL_OW 264
71841: PUSH
71842: LD_VAR 0 10
71846: IN
71847: NOT
71848: AND
71849: IFFALSE 71888
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
71851: LD_VAR 0 4
71855: PPUSH
71856: LD_VAR 0 7
71860: PUSH
71861: LD_INT 1
71863: ARRAY
71864: PUSH
71865: LD_INT 1
71867: ARRAY
71868: PPUSH
71869: LD_VAR 0 7
71873: PUSH
71874: LD_INT 1
71876: ARRAY
71877: PUSH
71878: LD_INT 2
71880: ARRAY
71881: PPUSH
71882: CALL_OW 116
71886: GO 72177
// if path > tag then
71888: LD_VAR 0 2
71892: PUSH
71893: LD_VAR 0 9
71897: GREATER
71898: IFFALSE 72106
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
71900: LD_ADDR_VAR 0 6
71904: PUSH
71905: LD_VAR 0 5
71909: PPUSH
71910: LD_INT 91
71912: PUSH
71913: LD_VAR 0 4
71917: PUSH
71918: LD_INT 8
71920: PUSH
71921: EMPTY
71922: LIST
71923: LIST
71924: LIST
71925: PPUSH
71926: CALL_OW 72
71930: ST_TO_ADDR
// if nearEnemy then
71931: LD_VAR 0 6
71935: IFFALSE 72004
// begin if GetWeapon ( i ) = ru_time_lapser then
71937: LD_VAR 0 4
71941: PPUSH
71942: CALL_OW 264
71946: PUSH
71947: LD_INT 49
71949: EQUAL
71950: IFFALSE 71978
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
71952: LD_VAR 0 4
71956: PPUSH
71957: LD_VAR 0 6
71961: PPUSH
71962: LD_VAR 0 4
71966: PPUSH
71967: CALL_OW 74
71971: PPUSH
71972: CALL_OW 112
71976: GO 72002
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
71978: LD_VAR 0 4
71982: PPUSH
71983: LD_VAR 0 6
71987: PPUSH
71988: LD_VAR 0 4
71992: PPUSH
71993: CALL_OW 74
71997: PPUSH
71998: CALL 73106 0 2
// end else
72002: GO 72104
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72004: LD_VAR 0 4
72008: PPUSH
72009: LD_VAR 0 2
72013: PUSH
72014: LD_VAR 0 9
72018: ARRAY
72019: PUSH
72020: LD_INT 1
72022: ARRAY
72023: PPUSH
72024: LD_VAR 0 2
72028: PUSH
72029: LD_VAR 0 9
72033: ARRAY
72034: PUSH
72035: LD_INT 2
72037: ARRAY
72038: PPUSH
72039: CALL_OW 297
72043: PUSH
72044: LD_INT 6
72046: GREATER
72047: IFFALSE 72090
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72049: LD_VAR 0 4
72053: PPUSH
72054: LD_VAR 0 2
72058: PUSH
72059: LD_VAR 0 9
72063: ARRAY
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: PPUSH
72069: LD_VAR 0 2
72073: PUSH
72074: LD_VAR 0 9
72078: ARRAY
72079: PUSH
72080: LD_INT 2
72082: ARRAY
72083: PPUSH
72084: CALL_OW 114
72088: GO 72104
// SetTag ( i , tag ) ;
72090: LD_VAR 0 4
72094: PPUSH
72095: LD_VAR 0 9
72099: PPUSH
72100: CALL_OW 109
// end else
72104: GO 72177
// if enemy then
72106: LD_VAR 0 5
72110: IFFALSE 72177
// begin if GetWeapon ( i ) = ru_time_lapser then
72112: LD_VAR 0 4
72116: PPUSH
72117: CALL_OW 264
72121: PUSH
72122: LD_INT 49
72124: EQUAL
72125: IFFALSE 72153
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72127: LD_VAR 0 4
72131: PPUSH
72132: LD_VAR 0 5
72136: PPUSH
72137: LD_VAR 0 4
72141: PPUSH
72142: CALL_OW 74
72146: PPUSH
72147: CALL_OW 112
72151: GO 72177
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72153: LD_VAR 0 4
72157: PPUSH
72158: LD_VAR 0 5
72162: PPUSH
72163: LD_VAR 0 4
72167: PPUSH
72168: CALL_OW 74
72172: PPUSH
72173: CALL 73106 0 2
// end ; end ;
72177: GO 71757
72179: POP
72180: POP
// end ;
72181: LD_VAR 0 3
72185: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72186: LD_INT 0
72188: PPUSH
72189: PPUSH
72190: PPUSH
// if not unit or IsInUnit ( unit ) then
72191: LD_VAR 0 1
72195: NOT
72196: PUSH
72197: LD_VAR 0 1
72201: PPUSH
72202: CALL_OW 310
72206: OR
72207: IFFALSE 72211
// exit ;
72209: GO 72302
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72211: LD_ADDR_VAR 0 4
72215: PUSH
72216: LD_VAR 0 1
72220: PPUSH
72221: CALL_OW 250
72225: PPUSH
72226: LD_VAR 0 2
72230: PPUSH
72231: LD_INT 1
72233: PPUSH
72234: CALL_OW 272
72238: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72239: LD_ADDR_VAR 0 5
72243: PUSH
72244: LD_VAR 0 1
72248: PPUSH
72249: CALL_OW 251
72253: PPUSH
72254: LD_VAR 0 2
72258: PPUSH
72259: LD_INT 1
72261: PPUSH
72262: CALL_OW 273
72266: ST_TO_ADDR
// if ValidHex ( x , y ) then
72267: LD_VAR 0 4
72271: PPUSH
72272: LD_VAR 0 5
72276: PPUSH
72277: CALL_OW 488
72281: IFFALSE 72302
// ComTurnXY ( unit , x , y ) ;
72283: LD_VAR 0 1
72287: PPUSH
72288: LD_VAR 0 4
72292: PPUSH
72293: LD_VAR 0 5
72297: PPUSH
72298: CALL_OW 118
// end ;
72302: LD_VAR 0 3
72306: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72307: LD_INT 0
72309: PPUSH
72310: PPUSH
// result := false ;
72311: LD_ADDR_VAR 0 3
72315: PUSH
72316: LD_INT 0
72318: ST_TO_ADDR
// if not units then
72319: LD_VAR 0 2
72323: NOT
72324: IFFALSE 72328
// exit ;
72326: GO 72373
// for i in units do
72328: LD_ADDR_VAR 0 4
72332: PUSH
72333: LD_VAR 0 2
72337: PUSH
72338: FOR_IN
72339: IFFALSE 72371
// if See ( side , i ) then
72341: LD_VAR 0 1
72345: PPUSH
72346: LD_VAR 0 4
72350: PPUSH
72351: CALL_OW 292
72355: IFFALSE 72369
// begin result := true ;
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: LD_INT 1
72364: ST_TO_ADDR
// exit ;
72365: POP
72366: POP
72367: GO 72373
// end ;
72369: GO 72338
72371: POP
72372: POP
// end ;
72373: LD_VAR 0 3
72377: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72378: LD_INT 0
72380: PPUSH
72381: PPUSH
72382: PPUSH
72383: PPUSH
// if not unit or not points then
72384: LD_VAR 0 1
72388: NOT
72389: PUSH
72390: LD_VAR 0 2
72394: NOT
72395: OR
72396: IFFALSE 72400
// exit ;
72398: GO 72490
// dist := 99999 ;
72400: LD_ADDR_VAR 0 5
72404: PUSH
72405: LD_INT 99999
72407: ST_TO_ADDR
// for i in points do
72408: LD_ADDR_VAR 0 4
72412: PUSH
72413: LD_VAR 0 2
72417: PUSH
72418: FOR_IN
72419: IFFALSE 72488
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72421: LD_ADDR_VAR 0 6
72425: PUSH
72426: LD_VAR 0 1
72430: PPUSH
72431: LD_VAR 0 4
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PPUSH
72440: LD_VAR 0 4
72444: PUSH
72445: LD_INT 2
72447: ARRAY
72448: PPUSH
72449: CALL_OW 297
72453: ST_TO_ADDR
// if tmpDist < dist then
72454: LD_VAR 0 6
72458: PUSH
72459: LD_VAR 0 5
72463: LESS
72464: IFFALSE 72486
// begin result := i ;
72466: LD_ADDR_VAR 0 3
72470: PUSH
72471: LD_VAR 0 4
72475: ST_TO_ADDR
// dist := tmpDist ;
72476: LD_ADDR_VAR 0 5
72480: PUSH
72481: LD_VAR 0 6
72485: ST_TO_ADDR
// end ; end ;
72486: GO 72418
72488: POP
72489: POP
// end ;
72490: LD_VAR 0 3
72494: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
72495: LD_INT 0
72497: PPUSH
// uc_side := side ;
72498: LD_ADDR_OWVAR 20
72502: PUSH
72503: LD_VAR 0 1
72507: ST_TO_ADDR
// uc_nation := 3 ;
72508: LD_ADDR_OWVAR 21
72512: PUSH
72513: LD_INT 3
72515: ST_TO_ADDR
// vc_chassis := 25 ;
72516: LD_ADDR_OWVAR 37
72520: PUSH
72521: LD_INT 25
72523: ST_TO_ADDR
// vc_engine := engine_siberite ;
72524: LD_ADDR_OWVAR 39
72528: PUSH
72529: LD_INT 3
72531: ST_TO_ADDR
// vc_control := control_computer ;
72532: LD_ADDR_OWVAR 38
72536: PUSH
72537: LD_INT 3
72539: ST_TO_ADDR
// vc_weapon := 59 ;
72540: LD_ADDR_OWVAR 40
72544: PUSH
72545: LD_INT 59
72547: ST_TO_ADDR
// result := CreateVehicle ;
72548: LD_ADDR_VAR 0 5
72552: PUSH
72553: CALL_OW 45
72557: ST_TO_ADDR
// SetDir ( result , d ) ;
72558: LD_VAR 0 5
72562: PPUSH
72563: LD_VAR 0 4
72567: PPUSH
72568: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
72572: LD_VAR 0 5
72576: PPUSH
72577: LD_VAR 0 2
72581: PPUSH
72582: LD_VAR 0 3
72586: PPUSH
72587: LD_INT 0
72589: PPUSH
72590: CALL_OW 48
// end ;
72594: LD_VAR 0 5
72598: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
72599: LD_INT 0
72601: PPUSH
72602: PPUSH
72603: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
72604: LD_ADDR_VAR 0 2
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: LD_INT 0
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
72627: LD_VAR 0 1
72631: NOT
72632: PUSH
72633: LD_VAR 0 1
72637: PPUSH
72638: CALL_OW 264
72642: PUSH
72643: LD_INT 12
72645: PUSH
72646: LD_INT 51
72648: PUSH
72649: LD_INT 32
72651: PUSH
72652: LD_INT 89
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: IN
72661: NOT
72662: OR
72663: IFFALSE 72667
// exit ;
72665: GO 72765
// for i := 1 to 3 do
72667: LD_ADDR_VAR 0 3
72671: PUSH
72672: DOUBLE
72673: LD_INT 1
72675: DEC
72676: ST_TO_ADDR
72677: LD_INT 3
72679: PUSH
72680: FOR_TO
72681: IFFALSE 72763
// begin tmp := GetCargo ( cargo , i ) ;
72683: LD_ADDR_VAR 0 4
72687: PUSH
72688: LD_VAR 0 1
72692: PPUSH
72693: LD_VAR 0 3
72697: PPUSH
72698: CALL_OW 289
72702: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
72703: LD_ADDR_VAR 0 2
72707: PUSH
72708: LD_VAR 0 2
72712: PPUSH
72713: LD_VAR 0 3
72717: PPUSH
72718: LD_VAR 0 4
72722: PPUSH
72723: CALL_OW 1
72727: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
72728: LD_ADDR_VAR 0 2
72732: PUSH
72733: LD_VAR 0 2
72737: PPUSH
72738: LD_INT 4
72740: PPUSH
72741: LD_VAR 0 2
72745: PUSH
72746: LD_INT 4
72748: ARRAY
72749: PUSH
72750: LD_VAR 0 4
72754: PLUS
72755: PPUSH
72756: CALL_OW 1
72760: ST_TO_ADDR
// end ;
72761: GO 72680
72763: POP
72764: POP
// end ;
72765: LD_VAR 0 2
72769: RET
// export function Length ( array ) ; begin
72770: LD_INT 0
72772: PPUSH
// result := array + 0 ;
72773: LD_ADDR_VAR 0 2
72777: PUSH
72778: LD_VAR 0 1
72782: PUSH
72783: LD_INT 0
72785: PLUS
72786: ST_TO_ADDR
// end ;
72787: LD_VAR 0 2
72791: RET
// export function PrepareArray ( array ) ; begin
72792: LD_INT 0
72794: PPUSH
// result := array diff 0 ;
72795: LD_ADDR_VAR 0 2
72799: PUSH
72800: LD_VAR 0 1
72804: PUSH
72805: LD_INT 0
72807: DIFF
72808: ST_TO_ADDR
// if not result [ 1 ] then
72809: LD_VAR 0 2
72813: PUSH
72814: LD_INT 1
72816: ARRAY
72817: NOT
72818: IFFALSE 72838
// result := Delete ( result , 1 ) ;
72820: LD_ADDR_VAR 0 2
72824: PUSH
72825: LD_VAR 0 2
72829: PPUSH
72830: LD_INT 1
72832: PPUSH
72833: CALL_OW 3
72837: ST_TO_ADDR
// end ;
72838: LD_VAR 0 2
72842: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
72843: LD_INT 0
72845: PPUSH
72846: PPUSH
72847: PPUSH
72848: PPUSH
// sibRocketRange := 25 ;
72849: LD_ADDR_VAR 0 6
72853: PUSH
72854: LD_INT 25
72856: ST_TO_ADDR
// result := false ;
72857: LD_ADDR_VAR 0 4
72861: PUSH
72862: LD_INT 0
72864: ST_TO_ADDR
// for i := 0 to 5 do
72865: LD_ADDR_VAR 0 5
72869: PUSH
72870: DOUBLE
72871: LD_INT 0
72873: DEC
72874: ST_TO_ADDR
72875: LD_INT 5
72877: PUSH
72878: FOR_TO
72879: IFFALSE 72946
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
72881: LD_VAR 0 1
72885: PPUSH
72886: LD_VAR 0 5
72890: PPUSH
72891: LD_VAR 0 6
72895: PPUSH
72896: CALL_OW 272
72900: PPUSH
72901: LD_VAR 0 2
72905: PPUSH
72906: LD_VAR 0 5
72910: PPUSH
72911: LD_VAR 0 6
72915: PPUSH
72916: CALL_OW 273
72920: PPUSH
72921: LD_VAR 0 3
72925: PPUSH
72926: CALL_OW 309
72930: IFFALSE 72944
// begin result := true ;
72932: LD_ADDR_VAR 0 4
72936: PUSH
72937: LD_INT 1
72939: ST_TO_ADDR
// exit ;
72940: POP
72941: POP
72942: GO 72948
// end ;
72944: GO 72878
72946: POP
72947: POP
// end ;
72948: LD_VAR 0 4
72952: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72953: LD_INT 0
72955: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72956: LD_VAR 0 1
72960: PPUSH
72961: LD_VAR 0 2
72965: PPUSH
72966: LD_INT 0
72968: PPUSH
72969: LD_INT 0
72971: PPUSH
72972: LD_INT 1
72974: PPUSH
72975: LD_INT 0
72977: PPUSH
72978: CALL_OW 587
// end ;
72982: LD_VAR 0 3
72986: RET
// export function CenterOnNow ( unit ) ; begin
72987: LD_INT 0
72989: PPUSH
// result := IsInUnit ( unit ) ;
72990: LD_ADDR_VAR 0 2
72994: PUSH
72995: LD_VAR 0 1
72999: PPUSH
73000: CALL_OW 310
73004: ST_TO_ADDR
// if not result then
73005: LD_VAR 0 2
73009: NOT
73010: IFFALSE 73022
// result := unit ;
73012: LD_ADDR_VAR 0 2
73016: PUSH
73017: LD_VAR 0 1
73021: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73022: LD_VAR 0 1
73026: PPUSH
73027: CALL_OW 87
// end ;
73031: LD_VAR 0 2
73035: RET
// export function ComMoveHex ( unit , hex ) ; begin
73036: LD_INT 0
73038: PPUSH
// if not hex then
73039: LD_VAR 0 2
73043: NOT
73044: IFFALSE 73048
// exit ;
73046: GO 73101
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73048: LD_VAR 0 2
73052: PUSH
73053: LD_INT 1
73055: ARRAY
73056: PPUSH
73057: LD_VAR 0 2
73061: PUSH
73062: LD_INT 2
73064: ARRAY
73065: PPUSH
73066: CALL_OW 428
73070: IFFALSE 73074
// exit ;
73072: GO 73101
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73074: LD_VAR 0 1
73078: PPUSH
73079: LD_VAR 0 2
73083: PUSH
73084: LD_INT 1
73086: ARRAY
73087: PPUSH
73088: LD_VAR 0 2
73092: PUSH
73093: LD_INT 2
73095: ARRAY
73096: PPUSH
73097: CALL_OW 111
// end ;
73101: LD_VAR 0 3
73105: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73106: LD_INT 0
73108: PPUSH
73109: PPUSH
73110: PPUSH
// if not unit or not enemy then
73111: LD_VAR 0 1
73115: NOT
73116: PUSH
73117: LD_VAR 0 2
73121: NOT
73122: OR
73123: IFFALSE 73127
// exit ;
73125: GO 73251
// x := GetX ( enemy ) ;
73127: LD_ADDR_VAR 0 4
73131: PUSH
73132: LD_VAR 0 2
73136: PPUSH
73137: CALL_OW 250
73141: ST_TO_ADDR
// y := GetY ( enemy ) ;
73142: LD_ADDR_VAR 0 5
73146: PUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: CALL_OW 251
73156: ST_TO_ADDR
// if ValidHex ( x , y ) then
73157: LD_VAR 0 4
73161: PPUSH
73162: LD_VAR 0 5
73166: PPUSH
73167: CALL_OW 488
73171: IFFALSE 73251
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73173: LD_VAR 0 2
73177: PPUSH
73178: CALL_OW 247
73182: PUSH
73183: LD_INT 3
73185: PUSH
73186: LD_INT 2
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: IN
73193: PUSH
73194: LD_VAR 0 1
73198: PPUSH
73199: CALL_OW 255
73203: PPUSH
73204: LD_VAR 0 2
73208: PPUSH
73209: CALL_OW 292
73213: AND
73214: IFFALSE 73232
// ComAttackUnit ( unit , enemy ) else
73216: LD_VAR 0 1
73220: PPUSH
73221: LD_VAR 0 2
73225: PPUSH
73226: CALL_OW 115
73230: GO 73251
// ComAgressiveMove ( unit , x , y ) ;
73232: LD_VAR 0 1
73236: PPUSH
73237: LD_VAR 0 4
73241: PPUSH
73242: LD_VAR 0 5
73246: PPUSH
73247: CALL_OW 114
// end ;
73251: LD_VAR 0 3
73255: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
73256: LD_INT 0
73258: PPUSH
73259: PPUSH
73260: PPUSH
// list := AreaToList ( area , 0 ) ;
73261: LD_ADDR_VAR 0 5
73265: PUSH
73266: LD_VAR 0 1
73270: PPUSH
73271: LD_INT 0
73273: PPUSH
73274: CALL_OW 517
73278: ST_TO_ADDR
// if not list then
73279: LD_VAR 0 5
73283: NOT
73284: IFFALSE 73288
// exit ;
73286: GO 73418
// if all then
73288: LD_VAR 0 2
73292: IFFALSE 73380
// begin for i := 1 to list [ 1 ] do
73294: LD_ADDR_VAR 0 4
73298: PUSH
73299: DOUBLE
73300: LD_INT 1
73302: DEC
73303: ST_TO_ADDR
73304: LD_VAR 0 5
73308: PUSH
73309: LD_INT 1
73311: ARRAY
73312: PUSH
73313: FOR_TO
73314: IFFALSE 73376
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
73316: LD_ADDR_VAR 0 3
73320: PUSH
73321: LD_VAR 0 3
73325: PPUSH
73326: LD_VAR 0 3
73330: PUSH
73331: LD_INT 1
73333: PLUS
73334: PPUSH
73335: LD_VAR 0 5
73339: PUSH
73340: LD_INT 1
73342: ARRAY
73343: PUSH
73344: LD_VAR 0 4
73348: ARRAY
73349: PUSH
73350: LD_VAR 0 5
73354: PUSH
73355: LD_INT 2
73357: ARRAY
73358: PUSH
73359: LD_VAR 0 4
73363: ARRAY
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PPUSH
73369: CALL_OW 1
73373: ST_TO_ADDR
73374: GO 73313
73376: POP
73377: POP
// exit ;
73378: GO 73418
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
73380: LD_ADDR_VAR 0 3
73384: PUSH
73385: LD_VAR 0 5
73389: PUSH
73390: LD_INT 1
73392: ARRAY
73393: PUSH
73394: LD_INT 1
73396: ARRAY
73397: PUSH
73398: LD_VAR 0 5
73402: PUSH
73403: LD_INT 2
73405: ARRAY
73406: PUSH
73407: LD_INT 1
73409: ARRAY
73410: PUSH
73411: EMPTY
73412: LIST
73413: LIST
73414: PUSH
73415: EMPTY
73416: LIST
73417: ST_TO_ADDR
// end ;
73418: LD_VAR 0 3
73422: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
73423: LD_INT 0
73425: PPUSH
73426: PPUSH
// list := AreaToList ( area , 0 ) ;
73427: LD_ADDR_VAR 0 4
73431: PUSH
73432: LD_VAR 0 1
73436: PPUSH
73437: LD_INT 0
73439: PPUSH
73440: CALL_OW 517
73444: ST_TO_ADDR
// if not list then
73445: LD_VAR 0 4
73449: NOT
73450: IFFALSE 73454
// exit ;
73452: GO 73495
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
73454: LD_ADDR_VAR 0 3
73458: PUSH
73459: LD_VAR 0 4
73463: PUSH
73464: LD_INT 1
73466: ARRAY
73467: PUSH
73468: LD_INT 1
73470: ARRAY
73471: PUSH
73472: LD_VAR 0 4
73476: PUSH
73477: LD_INT 2
73479: ARRAY
73480: PUSH
73481: LD_INT 1
73483: ARRAY
73484: PUSH
73485: LD_VAR 0 2
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: LIST
73494: ST_TO_ADDR
// end ;
73495: LD_VAR 0 3
73499: RET
// export function First ( array ) ; begin
73500: LD_INT 0
73502: PPUSH
// if not array then
73503: LD_VAR 0 1
73507: NOT
73508: IFFALSE 73512
// exit ;
73510: GO 73526
// result := array [ 1 ] ;
73512: LD_ADDR_VAR 0 2
73516: PUSH
73517: LD_VAR 0 1
73521: PUSH
73522: LD_INT 1
73524: ARRAY
73525: ST_TO_ADDR
// end ;
73526: LD_VAR 0 2
73530: RET
// export function Last ( array ) ; begin
73531: LD_INT 0
73533: PPUSH
// if not array then
73534: LD_VAR 0 1
73538: NOT
73539: IFFALSE 73543
// exit ;
73541: GO 73559
// result := array [ array ] ;
73543: LD_ADDR_VAR 0 2
73547: PUSH
73548: LD_VAR 0 1
73552: PUSH
73553: LD_VAR 0 1
73557: ARRAY
73558: ST_TO_ADDR
// end ; end_of_file
73559: LD_VAR 0 2
73563: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73564: LD_VAR 0 1
73568: PPUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: LD_VAR 0 3
73578: PPUSH
73579: LD_VAR 0 4
73583: PPUSH
73584: LD_VAR 0 5
73588: PPUSH
73589: LD_VAR 0 6
73593: PPUSH
73594: CALL 10628 0 6
// end ;
73598: PPOPN 6
73600: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73601: LD_INT 0
73603: PPUSH
// begin if not units then
73604: LD_VAR 0 1
73608: NOT
73609: IFFALSE 73613
// exit ;
73611: GO 73613
// end ;
73613: PPOPN 7
73615: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73616: CALL 10532 0 0
// end ;
73620: PPOPN 1
73622: END
