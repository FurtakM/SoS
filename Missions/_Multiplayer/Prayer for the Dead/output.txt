// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 443 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 2031 0 1
  44: PPUSH
  45: CALL 199 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 2031 0 1
  56: PPUSH
  57: CALL 5844 0 1
// Multiplayer_Start ;
  61: CALL 3727 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 35
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 35
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 3846 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockCreateUnitThread ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// blockCreateUnitThread := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// end ;
 166: LD_VAR 0 1
 170: RET
// every 0 0$01 trigger game and not debug_strings do
 171: LD_EXP 2
 175: PUSH
 176: LD_OWVAR 48
 180: NOT
 181: AND
 182: IFFALSE 198
 184: GO 186
 186: DISABLE
// begin enable ;
 187: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 188: LD_ADDR_OWVAR 47
 192: PUSH
 193: CALL 4273 0 0
 197: ST_TO_ADDR
// end ; end_of_file end_of_file
 198: END
// export enemyUnits , enemySide ; export function PrepareArabian ( side ) ; begin
 199: LD_INT 0
 201: PPUSH
// enemySide := side ;
 202: LD_ADDR_EXP 8
 206: PUSH
 207: LD_VAR 0 1
 211: ST_TO_ADDR
// enemyUnits := [ ] ;
 212: LD_ADDR_EXP 7
 216: PUSH
 217: EMPTY
 218: ST_TO_ADDR
// end ;
 219: LD_VAR 0 2
 223: RET
// export function ClearRoadInForest ; var i , un , tmp , skill ; begin
 224: LD_INT 0
 226: PPUSH
 227: PPUSH
 228: PPUSH
 229: PPUSH
 230: PPUSH
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
 231: LD_ADDR_VAR 0 5
 235: PUSH
 236: LD_INT 4
 238: PUSH
 239: LD_INT 5
 241: PUSH
 242: LD_INT 7
 244: PUSH
 245: EMPTY
 246: LIST
 247: LIST
 248: LIST
 249: PUSH
 250: LD_OWVAR 67
 254: ARRAY
 255: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
 256: LD_INT 35
 258: PPUSH
 259: CALL_OW 67
// until not blockCreateUnitThread ;
 263: LD_EXP 6
 267: NOT
 268: IFFALSE 256
// blockCreateUnitThread := true ;
 270: LD_ADDR_EXP 6
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// uc_side := enemySide ;
 278: LD_ADDR_OWVAR 20
 282: PUSH
 283: LD_EXP 8
 287: ST_TO_ADDR
// uc_nation := nation_arabian ;
 288: LD_ADDR_OWVAR 21
 292: PUSH
 293: LD_INT 2
 295: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
 296: LD_INT 0
 298: PPUSH
 299: LD_VAR 0 5
 303: PPUSH
 304: CALL_OW 383
// un := CreateHuman ;
 308: LD_ADDR_VAR 0 3
 312: PUSH
 313: CALL_OW 44
 317: ST_TO_ADDR
// blockCreateUnitThread := false ;
 318: LD_ADDR_EXP 6
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// end ;
 326: LD_VAR 0 1
 330: RET
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
 331: LD_INT 22
 333: PUSH
 334: LD_EXP 8
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 32
 345: PUSH
 346: LD_INT 1
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: PUSH
 353: EMPTY
 354: LIST
 355: LIST
 356: PPUSH
 357: CALL_OW 69
 361: IFFALSE 440
 363: GO 365
 365: DISABLE
 366: LD_INT 0
 368: PPUSH
// begin enable ;
 369: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
 370: LD_ADDR_VAR 0 1
 374: PUSH
 375: LD_INT 22
 377: PUSH
 378: LD_EXP 8
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PUSH
 387: LD_INT 32
 389: PUSH
 390: LD_INT 1
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PPUSH
 401: CALL_OW 69
 405: PUSH
 406: FOR_IN
 407: IFFALSE 438
// if GetFuel ( i ) < 3 then
 409: LD_VAR 0 1
 413: PPUSH
 414: CALL_OW 261
 418: PUSH
 419: LD_INT 3
 421: LESS
 422: IFFALSE 436
// SetFuel ( i , 3 ) ;
 424: LD_VAR 0 1
 428: PPUSH
 429: LD_INT 3
 431: PPUSH
 432: CALL_OW 240
 436: GO 406
 438: POP
 439: POP
// end ; end_of_file
 440: PPOPN 1
 442: END
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
 443: LD_INT 0
 445: PPUSH
 446: PPUSH
 447: PPUSH
 448: PPUSH
 449: PPUSH
// multi_settings_counter := 5 ;
 450: LD_ADDR_EXP 21
 454: PUSH
 455: LD_INT 5
 457: ST_TO_ADDR
// multi_settings := [ ] ;
 458: LD_ADDR_EXP 20
 462: PUSH
 463: EMPTY
 464: ST_TO_ADDR
// if Multiplayer then
 465: LD_OWVAR 4
 469: IFFALSE 649
// begin your_side := mp_player_side ;
 471: LD_ADDR_OWVAR 2
 475: PUSH
 476: LD_OWVAR 7
 480: ST_TO_ADDR
// multi_gametype := mp_game_type ;
 481: LD_ADDR_EXP 9
 485: PUSH
 486: LD_OWVAR 6
 490: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
 491: LD_ADDR_EXP 10
 495: PUSH
 496: LD_OWVAR 17
 500: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
 501: LD_ADDR_EXP 11
 505: PUSH
 506: LD_OWVAR 15
 510: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
 511: LD_ADDR_EXP 12
 515: PUSH
 516: LD_OWVAR 16
 520: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
 521: LD_ADDR_EXP 13
 525: PUSH
 526: EMPTY
 527: PUSH
 528: EMPTY
 529: LIST
 530: ST_TO_ADDR
// for i in mp_teams do
 531: LD_ADDR_VAR 0 2
 535: PUSH
 536: LD_OWVAR 12
 540: PUSH
 541: FOR_IN
 542: IFFALSE 585
// if i then
 544: LD_VAR 0 2
 548: IFFALSE 583
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
 550: LD_ADDR_EXP 13
 554: PUSH
 555: LD_EXP 13
 559: PPUSH
 560: LD_INT 1
 562: PPUSH
 563: LD_EXP 13
 567: PUSH
 568: LD_INT 1
 570: ARRAY
 571: PUSH
 572: LD_VAR 0 2
 576: UNION
 577: PPUSH
 578: CALL_OW 1
 582: ST_TO_ADDR
 583: GO 541
 585: POP
 586: POP
// for i := 1 to multi_settings_counter do
 587: LD_ADDR_VAR 0 2
 591: PUSH
 592: DOUBLE
 593: LD_INT 1
 595: DEC
 596: ST_TO_ADDR
 597: LD_EXP 21
 601: PUSH
 602: FOR_TO
 603: IFFALSE 645
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
 605: LD_ADDR_EXP 20
 609: PUSH
 610: LD_EXP 20
 614: PPUSH
 615: LD_EXP 20
 619: PUSH
 620: LD_INT 1
 622: PLUS
 623: PPUSH
 624: LD_VAR 0 2
 628: PPUSH
 629: CALL_OW 426
 633: PUSH
 634: LD_INT 1
 636: PLUS
 637: PPUSH
 638: CALL_OW 1
 642: ST_TO_ADDR
 643: GO 602
 645: POP
 646: POP
// end else
 647: GO 831
// begin your_side := 3 ;
 649: LD_ADDR_OWVAR 2
 653: PUSH
 654: LD_INT 3
 656: ST_TO_ADDR
// multi_gametype := 1 ;
 657: LD_ADDR_EXP 9
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 1 , 2 , 0 , 0 , 0 , 0 ] ;
 665: LD_ADDR_EXP 10
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: LD_INT 0
 675: PUSH
 676: LD_INT 1
 678: PUSH
 679: LD_INT 2
 681: PUSH
 682: LD_INT 0
 684: PUSH
 685: LD_INT 0
 687: PUSH
 688: LD_INT 0
 690: PUSH
 691: LD_INT 0
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 1 , 0 , 0 , 0 , 0 ] ;
 704: LD_ADDR_EXP 11
 708: PUSH
 709: LD_INT 0
 711: PUSH
 712: LD_INT 0
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: LD_INT 0
 723: PUSH
 724: LD_INT 0
 726: PUSH
 727: LD_INT 0
 729: PUSH
 730: LD_INT 0
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: LIST
 737: LIST
 738: LIST
 739: LIST
 740: LIST
 741: LIST
 742: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 3 , 0 , 0 , 0 , 0 ] ;
 743: LD_ADDR_EXP 12
 747: PUSH
 748: LD_INT 0
 750: PUSH
 751: LD_INT 0
 753: PUSH
 754: LD_INT 3
 756: PUSH
 757: LD_INT 3
 759: PUSH
 760: LD_INT 0
 762: PUSH
 763: LD_INT 0
 765: PUSH
 766: LD_INT 0
 768: PUSH
 769: LD_INT 0
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: LIST
 778: LIST
 779: LIST
 780: LIST
 781: ST_TO_ADDR
// multi_teams := [ [ 3 , 4 ] ] ;
 782: LD_ADDR_EXP 13
 786: PUSH
 787: LD_INT 3
 789: PUSH
 790: LD_INT 4
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 3 ] ;
 800: LD_ADDR_EXP 20
 804: PUSH
 805: LD_INT 2
 807: PUSH
 808: LD_INT 1
 810: PUSH
 811: LD_INT 4
 813: PUSH
 814: LD_INT 3
 816: PUSH
 817: LD_INT 2
 819: PUSH
 820: LD_INT 3
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 831: LD_ADDR_EXP 14
 835: PUSH
 836: LD_INT 0
 838: PUSH
 839: LD_INT 0
 841: PUSH
 842: LD_INT 0
 844: PUSH
 845: LD_INT 0
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 0
 853: PUSH
 854: LD_INT 0
 856: PUSH
 857: LD_INT 0
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: LIST
 866: LIST
 867: LIST
 868: LIST
 869: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 870: LD_ADDR_EXP 17
 874: PUSH
 875: LD_INT 0
 877: PUSH
 878: LD_INT 0
 880: PUSH
 881: LD_INT 0
 883: PUSH
 884: LD_INT 0
 886: PUSH
 887: LD_INT 0
 889: PUSH
 890: LD_INT 0
 892: PUSH
 893: LD_INT 0
 895: PUSH
 896: LD_INT 0
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: LIST
 906: LIST
 907: LIST
 908: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
 909: LD_ADDR_EXP 27
 913: PUSH
 914: LD_INT 0
 916: PUSH
 917: LD_INT 0
 919: PUSH
 920: LD_INT 0
 922: PUSH
 923: LD_INT 0
 925: PUSH
 926: LD_INT 0
 928: PUSH
 929: LD_INT 0
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 0
 937: PUSH
 938: EMPTY
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: LIST
 947: ST_TO_ADDR
// multi_teamgame := true ;
 948: LD_ADDR_EXP 18
 952: PUSH
 953: LD_INT 1
 955: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
 956: LD_ADDR_EXP 16
 960: PUSH
 961: LD_INT 3
 963: PUSH
 964: EMPTY
 965: LIST
 966: ST_TO_ADDR
// multi_custom_commanders := true ;
 967: LD_ADDR_EXP 19
 971: PUSH
 972: LD_INT 1
 974: ST_TO_ADDR
// multi_commanders := [ ] ;
 975: LD_ADDR_EXP 26
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// multi_players_amount := 0 ;
 982: LD_ADDR_EXP 28
 986: PUSH
 987: LD_INT 0
 989: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
 990: LD_ADDR_EXP 15
 994: PUSH
 995: LD_INT 3
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: LD_INT 4
1003: PUSH
1004: LD_INT 6
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_breastwork , [ 117 , 101 , 3 ] ] , [ b_breastwork , [ 124 , 107 , 3 ] ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
1015: LD_ADDR_EXP 30
1019: PUSH
1020: LD_INT 0
1022: PUSH
1023: LD_INT 108
1025: PUSH
1026: LD_INT 110
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: LIST
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: LD_INT 31
1043: PUSH
1044: LD_INT 117
1046: PUSH
1047: LD_INT 101
1049: PUSH
1050: LD_INT 3
1052: PUSH
1053: EMPTY
1054: LIST
1055: LIST
1056: LIST
1057: PUSH
1058: EMPTY
1059: LIST
1060: LIST
1061: PUSH
1062: LD_INT 31
1064: PUSH
1065: LD_INT 124
1067: PUSH
1068: LD_INT 107
1070: PUSH
1071: LD_INT 3
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: LIST
1078: PUSH
1079: EMPTY
1080: LIST
1081: LIST
1082: PUSH
1083: LD_INT 29
1085: PUSH
1086: LD_INT 126
1088: PUSH
1089: LD_INT 124
1091: PUSH
1092: LD_INT 5
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: LIST
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: PUSH
1110: LD_INT 31
1112: PUSH
1113: LD_INT 95
1115: PUSH
1116: LD_INT 36
1118: PUSH
1119: LD_INT 4
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 31
1133: PUSH
1134: LD_INT 116
1136: PUSH
1137: LD_INT 66
1139: PUSH
1140: LD_INT 3
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 31
1154: PUSH
1155: LD_INT 157
1157: PUSH
1158: LD_INT 159
1160: PUSH
1161: LD_INT 4
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: PUSH
1173: LD_INT 31
1175: PUSH
1176: LD_INT 75
1178: PUSH
1179: LD_INT 88
1181: PUSH
1182: LD_INT 3
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: PUSH
1190: EMPTY
1191: LIST
1192: LIST
1193: PUSH
1194: LD_INT 31
1196: PUSH
1197: LD_INT 63
1199: PUSH
1200: LD_INT 82
1202: PUSH
1203: LD_INT 3
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: LIST
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: LD_INT 31
1217: PUSH
1218: LD_INT 106
1220: PUSH
1221: LD_INT 147
1223: PUSH
1224: LD_INT 4
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: LIST
1243: PUSH
1244: EMPTY
1245: PUSH
1246: EMPTY
1247: PUSH
1248: EMPTY
1249: PUSH
1250: EMPTY
1251: PUSH
1252: EMPTY
1253: PUSH
1254: EMPTY
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: LIST
1263: LIST
1264: LIST
1265: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
1266: LD_ADDR_EXP 25
1270: PUSH
1271: EMPTY
1272: PUSH
1273: LD_INT 21
1275: PUSH
1276: LD_INT 1
1278: PUSH
1279: LD_INT 1
1281: PUSH
1282: LD_INT 42
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: LD_INT 1
1299: PUSH
1300: LD_INT 51
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 22
1311: PUSH
1312: LD_INT 1
1314: PUSH
1315: LD_INT 1
1317: PUSH
1318: LD_INT 44
1320: PUSH
1321: LD_INT 43
1323: PUSH
1324: LD_INT 42
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: LD_OWVAR 67
1336: ARRAY
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: LIST
1342: LIST
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: LIST
1348: PUSH
1349: EMPTY
1350: PUSH
1351: EMPTY
1352: PUSH
1353: EMPTY
1354: PUSH
1355: EMPTY
1356: PUSH
1357: EMPTY
1358: PUSH
1359: EMPTY
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: LIST
1365: LIST
1366: LIST
1367: LIST
1368: LIST
1369: LIST
1370: ST_TO_ADDR
// for i := 1 to 8 do
1371: LD_ADDR_VAR 0 2
1375: PUSH
1376: DOUBLE
1377: LD_INT 1
1379: DEC
1380: ST_TO_ADDR
1381: LD_INT 8
1383: PUSH
1384: FOR_TO
1385: IFFALSE 1714
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
1387: LD_VAR 0 2
1391: PPUSH
1392: CALL_OW 530
1396: IFFALSE 1554
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
1398: LD_ADDR_EXP 14
1402: PUSH
1403: LD_EXP 14
1407: PPUSH
1408: LD_VAR 0 2
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: CALL_OW 1
1420: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
1421: LD_ADDR_EXP 12
1425: PUSH
1426: LD_EXP 12
1430: PPUSH
1431: LD_VAR 0 2
1435: PPUSH
1436: LD_INT 0
1438: PPUSH
1439: CALL_OW 1
1443: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 10
1453: PPUSH
1454: LD_VAR 0 2
1458: PPUSH
1459: LD_INT 0
1461: PPUSH
1462: CALL_OW 1
1466: ST_TO_ADDR
// for j = 1 to multi_teams do
1467: LD_ADDR_VAR 0 3
1471: PUSH
1472: DOUBLE
1473: LD_INT 1
1475: DEC
1476: ST_TO_ADDR
1477: LD_EXP 13
1481: PUSH
1482: FOR_TO
1483: IFFALSE 1552
// begin if i in multi_teams [ j ] then
1485: LD_VAR 0 2
1489: PUSH
1490: LD_EXP 13
1494: PUSH
1495: LD_VAR 0 3
1499: ARRAY
1500: IN
1501: IFFALSE 1550
// begin tmp := multi_teams [ j ] diff i ;
1503: LD_ADDR_VAR 0 5
1507: PUSH
1508: LD_EXP 13
1512: PUSH
1513: LD_VAR 0 3
1517: ARRAY
1518: PUSH
1519: LD_VAR 0 2
1523: DIFF
1524: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
1525: LD_ADDR_EXP 13
1529: PUSH
1530: LD_EXP 13
1534: PPUSH
1535: LD_VAR 0 3
1539: PPUSH
1540: LD_VAR 0 5
1544: PPUSH
1545: CALL_OW 1
1549: ST_TO_ADDR
// end ; end ;
1550: GO 1482
1552: POP
1553: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
1554: LD_EXP 12
1558: PUSH
1559: LD_VAR 0 2
1563: ARRAY
1564: PUSH
1565: LD_EXP 12
1569: PUSH
1570: LD_VAR 0 2
1574: ARRAY
1575: PUSH
1576: LD_EXP 16
1580: IN
1581: NOT
1582: AND
1583: IFFALSE 1624
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
1585: LD_ADDR_EXP 12
1589: PUSH
1590: LD_EXP 12
1594: PPUSH
1595: LD_VAR 0 2
1599: PPUSH
1600: LD_EXP 16
1604: PUSH
1605: LD_INT 1
1607: PPUSH
1608: LD_EXP 16
1612: PPUSH
1613: CALL_OW 12
1617: ARRAY
1618: PPUSH
1619: CALL_OW 1
1623: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
1624: LD_EXP 12
1628: PUSH
1629: LD_VAR 0 2
1633: ARRAY
1634: NOT
1635: PUSH
1636: LD_EXP 10
1640: PUSH
1641: LD_VAR 0 2
1645: ARRAY
1646: NOT
1647: AND
1648: PUSH
1649: LD_EXP 14
1653: PUSH
1654: LD_VAR 0 2
1658: ARRAY
1659: NOT
1660: AND
1661: IFFALSE 1686
// multi_bots := Replace ( multi_bots , i , 1 ) ;
1663: LD_ADDR_EXP 17
1667: PUSH
1668: LD_EXP 17
1672: PPUSH
1673: LD_VAR 0 2
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 1
1685: ST_TO_ADDR
// if multi_sides [ i ] then
1686: LD_EXP 10
1690: PUSH
1691: LD_VAR 0 2
1695: ARRAY
1696: IFFALSE 1712
// multi_players_amount := multi_players_amount + 1 ;
1698: LD_ADDR_EXP 28
1702: PUSH
1703: LD_EXP 28
1707: PUSH
1708: LD_INT 1
1710: PLUS
1711: ST_TO_ADDR
// end ;
1712: GO 1384
1714: POP
1715: POP
// for i in multi_teams do
1716: LD_ADDR_VAR 0 2
1720: PUSH
1721: LD_EXP 13
1725: PUSH
1726: FOR_IN
1727: IFFALSE 1835
// begin for j = 2 to i do
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: DOUBLE
1735: LD_INT 2
1737: DEC
1738: ST_TO_ADDR
1739: LD_VAR 0 2
1743: PUSH
1744: FOR_TO
1745: IFFALSE 1831
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
1747: LD_VAR 0 2
1751: PUSH
1752: LD_VAR 0 3
1756: ARRAY
1757: PPUSH
1758: LD_VAR 0 2
1762: PUSH
1763: LD_INT 1
1765: ARRAY
1766: PPUSH
1767: CALL_OW 343
// for x = 1 to j - 1 do
1771: LD_ADDR_VAR 0 4
1775: PUSH
1776: DOUBLE
1777: LD_INT 1
1779: DEC
1780: ST_TO_ADDR
1781: LD_VAR 0 3
1785: PUSH
1786: LD_INT 1
1788: MINUS
1789: PUSH
1790: FOR_TO
1791: IFFALSE 1827
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
1793: LD_VAR 0 2
1797: PUSH
1798: LD_VAR 0 3
1802: ARRAY
1803: PPUSH
1804: LD_VAR 0 2
1808: PUSH
1809: LD_VAR 0 4
1813: ARRAY
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: LD_INT 1
1820: PPUSH
1821: CALL_OW 80
1825: GO 1790
1827: POP
1828: POP
// end ;
1829: GO 1744
1831: POP
1832: POP
// end ;
1833: GO 1726
1835: POP
1836: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
1837: LD_ADDR_OWVAR 67
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: LD_INT 2
1847: PUSH
1848: LD_INT 3
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PUSH
1856: LD_EXP 20
1860: PUSH
1861: LD_INT 1
1863: ARRAY
1864: ARRAY
1865: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
1866: LD_ADDR_EXP 22
1870: PUSH
1871: LD_INT 9
1873: PUSH
1874: LD_INT 12
1876: PUSH
1877: LD_INT 15
1879: PUSH
1880: EMPTY
1881: LIST
1882: LIST
1883: LIST
1884: PUSH
1885: LD_EXP 20
1889: PUSH
1890: LD_INT 2
1892: ARRAY
1893: ARRAY
1894: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
1895: LD_ADDR_EXP 23
1899: PUSH
1900: LD_INT 1
1902: PUSH
1903: LD_INT 3
1905: PUSH
1906: LD_INT 4
1908: PUSH
1909: LD_INT 6
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_EXP 20
1922: PUSH
1923: LD_INT 3
1925: ARRAY
1926: ARRAY
1927: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
1928: LD_ADDR_EXP 29
1932: PUSH
1933: LD_INT 3500
1935: PUSH
1936: LD_INT 5000
1938: PUSH
1939: LD_INT 7500
1941: PUSH
1942: LD_INT 10000
1944: PUSH
1945: LD_INT 15000
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: LIST
1954: PUSH
1955: LD_EXP 20
1959: PUSH
1960: LD_INT 4
1962: ARRAY
1963: ARRAY
1964: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$32 ] , [ 2000 , 0 0$24 ] , [ 3000 , 0 0$18 ] , [ 4000 , 0 0$15 ] ] [ multi_settings [ 5 ] ] ;
1965: LD_ADDR_EXP 24
1969: PUSH
1970: LD_INT 1000
1972: PUSH
1973: LD_INT 1120
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 2000
1982: PUSH
1983: LD_INT 840
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: PUSH
1990: LD_INT 3000
1992: PUSH
1993: LD_INT 630
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 4000
2002: PUSH
2003: LD_INT 525
2005: PUSH
2006: EMPTY
2007: LIST
2008: LIST
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: LIST
2014: LIST
2015: PUSH
2016: LD_EXP 20
2020: PUSH
2021: LD_INT 5
2023: ARRAY
2024: ARRAY
2025: ST_TO_ADDR
// end ;
2026: LD_VAR 0 1
2030: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
2031: LD_INT 0
2033: PPUSH
2034: PPUSH
// if not multi_sides [ preferSide ] then
2035: LD_EXP 10
2039: PUSH
2040: LD_VAR 0 1
2044: ARRAY
2045: NOT
2046: IFFALSE 2060
// begin result := preferSide ;
2048: LD_ADDR_VAR 0 2
2052: PUSH
2053: LD_VAR 0 1
2057: ST_TO_ADDR
// exit ;
2058: GO 2107
// end ; for i := 1 to 8 do
2060: LD_ADDR_VAR 0 3
2064: PUSH
2065: DOUBLE
2066: LD_INT 1
2068: DEC
2069: ST_TO_ADDR
2070: LD_INT 8
2072: PUSH
2073: FOR_TO
2074: IFFALSE 2105
// if not multi_sides [ i ] then
2076: LD_EXP 10
2080: PUSH
2081: LD_VAR 0 3
2085: ARRAY
2086: NOT
2087: IFFALSE 2103
// begin result := i ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 3
2098: ST_TO_ADDR
// exit ;
2099: POP
2100: POP
2101: GO 2107
// end ;
2103: GO 2073
2105: POP
2106: POP
// end ;
2107: LD_VAR 0 2
2111: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
2112: LD_INT 0
2114: PPUSH
// uc_side := side ;
2115: LD_ADDR_OWVAR 20
2119: PUSH
2120: LD_VAR 0 1
2124: ST_TO_ADDR
// uc_nation := nation_russian ;
2125: LD_ADDR_OWVAR 21
2129: PUSH
2130: LD_INT 3
2132: ST_TO_ADDR
// hc_importance := 100 ;
2133: LD_ADDR_OWVAR 32
2137: PUSH
2138: LD_INT 100
2140: ST_TO_ADDR
// if num = 1 then
2141: LD_VAR 0 2
2145: PUSH
2146: LD_INT 1
2148: EQUAL
2149: IFFALSE 2216
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
2151: LD_INT 1
2153: PPUSH
2154: LD_EXP 23
2158: PUSH
2159: LD_INT 1
2161: PLUS
2162: PPUSH
2163: CALL_OW 381
// hc_gallery := ru ;
2167: LD_ADDR_OWVAR 33
2171: PUSH
2172: LD_STRING ru
2174: ST_TO_ADDR
// hc_face_number := 13 ;
2175: LD_ADDR_OWVAR 34
2179: PUSH
2180: LD_INT 13
2182: ST_TO_ADDR
// hc_name := Kuzmov ;
2183: LD_ADDR_OWVAR 26
2187: PUSH
2188: LD_STRING Kuzmov
2190: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
2191: LD_ADDR_OWVAR 29
2195: PUSH
2196: LD_INT 11
2198: PUSH
2199: LD_INT 11
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: ST_TO_ADDR
// result := CreateHuman ;
2206: LD_ADDR_VAR 0 3
2210: PUSH
2211: CALL_OW 44
2215: ST_TO_ADDR
// end ; if num = 2 then
2216: LD_VAR 0 2
2220: PUSH
2221: LD_INT 2
2223: EQUAL
2224: IFFALSE 2291
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
2226: LD_INT 1
2228: PPUSH
2229: LD_EXP 23
2233: PUSH
2234: LD_INT 2
2236: PLUS
2237: PPUSH
2238: CALL_OW 383
// hc_gallery := ru ;
2242: LD_ADDR_OWVAR 33
2246: PUSH
2247: LD_STRING ru
2249: ST_TO_ADDR
// hc_face_number := 1 ;
2250: LD_ADDR_OWVAR 34
2254: PUSH
2255: LD_INT 1
2257: ST_TO_ADDR
// hc_name := Burlak ;
2258: LD_ADDR_OWVAR 26
2262: PUSH
2263: LD_STRING Burlak
2265: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
2266: LD_ADDR_OWVAR 29
2270: PUSH
2271: LD_INT 10
2273: PUSH
2274: LD_INT 11
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: ST_TO_ADDR
// result := CreateHuman ;
2281: LD_ADDR_VAR 0 3
2285: PUSH
2286: CALL_OW 44
2290: ST_TO_ADDR
// end ; end ;
2291: LD_VAR 0 3
2295: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , tmp , people_amount ; begin
2296: LD_INT 0
2298: PPUSH
2299: PPUSH
2300: PPUSH
2301: PPUSH
2302: PPUSH
2303: PPUSH
2304: PPUSH
2305: PPUSH
2306: PPUSH
// for i := 1 to 8 do
2307: LD_ADDR_VAR 0 2
2311: PUSH
2312: DOUBLE
2313: LD_INT 1
2315: DEC
2316: ST_TO_ADDR
2317: LD_INT 8
2319: PUSH
2320: FOR_TO
2321: IFFALSE 3720
// begin if not multi_sides [ i ] then
2323: LD_EXP 10
2327: PUSH
2328: LD_VAR 0 2
2332: ARRAY
2333: NOT
2334: IFFALSE 2338
// continue ;
2336: GO 2320
// if multi_buildings [ multi_sides [ i ] ] then
2338: LD_EXP 30
2342: PUSH
2343: LD_EXP 10
2347: PUSH
2348: LD_VAR 0 2
2352: ARRAY
2353: ARRAY
2354: IFFALSE 2570
// begin uc_side := i ;
2356: LD_ADDR_OWVAR 20
2360: PUSH
2361: LD_VAR 0 2
2365: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2366: LD_ADDR_OWVAR 21
2370: PUSH
2371: LD_EXP 12
2375: PUSH
2376: LD_VAR 0 2
2380: ARRAY
2381: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
2382: LD_ADDR_VAR 0 3
2386: PUSH
2387: LD_EXP 30
2391: PUSH
2392: LD_EXP 10
2396: PUSH
2397: LD_VAR 0 2
2401: ARRAY
2402: ARRAY
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2568
// begin bc_type := j [ 1 ] ;
2407: LD_ADDR_OWVAR 42
2411: PUSH
2412: LD_VAR 0 3
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: ST_TO_ADDR
// bc_level := 3 ;
2421: LD_ADDR_OWVAR 43
2425: PUSH
2426: LD_INT 3
2428: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
2429: LD_ADDR_VAR 0 4
2433: PUSH
2434: LD_VAR 0 3
2438: PUSH
2439: LD_INT 2
2441: ARRAY
2442: PUSH
2443: LD_INT 1
2445: ARRAY
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 2
2454: ARRAY
2455: PUSH
2456: LD_INT 2
2458: ARRAY
2459: PPUSH
2460: LD_VAR 0 3
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PUSH
2469: LD_INT 3
2471: ARRAY
2472: PPUSH
2473: CALL_OW 47
2477: ST_TO_ADDR
// if j [ 1 ] = b_depot then
2478: LD_VAR 0 3
2482: PUSH
2483: LD_INT 1
2485: ARRAY
2486: PUSH
2487: LD_INT 0
2489: EQUAL
2490: IFFALSE 2566
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
2492: LD_VAR 0 4
2496: PPUSH
2497: CALL_OW 274
2501: PPUSH
2502: LD_INT 1
2504: PPUSH
2505: LD_INT 450
2507: PUSH
2508: LD_INT 350
2510: PUSH
2511: LD_INT 230
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_OWVAR 67
2523: ARRAY
2524: PPUSH
2525: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
2529: LD_VAR 0 4
2533: PPUSH
2534: CALL_OW 274
2538: PPUSH
2539: LD_INT 2
2541: PPUSH
2542: LD_INT 90
2544: PUSH
2545: LD_INT 60
2547: PUSH
2548: LD_INT 40
2550: PUSH
2551: EMPTY
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: LD_OWVAR 67
2560: ARRAY
2561: PPUSH
2562: CALL_OW 277
// end ; end ;
2566: GO 2404
2568: POP
2569: POP
// end ; if multi_custom_commanders then
2570: LD_EXP 19
2574: IFFALSE 2783
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
2576: LD_ADDR_VAR 0 6
2580: PUSH
2581: LD_VAR 0 2
2585: PPUSH
2586: LD_EXP 10
2590: PUSH
2591: LD_VAR 0 2
2595: ARRAY
2596: PPUSH
2597: CALL 2112 0 2
2601: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
2602: LD_ADDR_EXP 26
2606: PUSH
2607: LD_EXP 26
2611: PPUSH
2612: LD_EXP 26
2616: PUSH
2617: LD_INT 1
2619: PLUS
2620: PPUSH
2621: LD_VAR 0 6
2625: PPUSH
2626: CALL_OW 2
2630: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
2631: LD_VAR 0 6
2635: PPUSH
2636: CALL_OW 257
2640: PUSH
2641: LD_INT 3
2643: EQUAL
2644: IFFALSE 2748
// begin PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
2646: LD_INT 23
2648: PPUSH
2649: LD_INT 1
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: LD_INT 44
2657: PPUSH
2658: LD_INT 80
2660: PPUSH
2661: CALL 13633 0 5
// veh := CreateVehicle ;
2665: LD_ADDR_VAR 0 7
2669: PUSH
2670: CALL_OW 45
2674: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
2675: LD_VAR 0 7
2679: PPUSH
2680: LD_VAR 0 6
2684: PPUSH
2685: CALL_OW 255
2689: PUSH
2690: LD_INT 1
2692: NEG
2693: MUL
2694: PPUSH
2695: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
2699: LD_VAR 0 7
2703: PPUSH
2704: LD_EXP 15
2708: PUSH
2709: LD_EXP 10
2713: PUSH
2714: LD_VAR 0 2
2718: ARRAY
2719: ARRAY
2720: PUSH
2721: LD_INT 2
2723: ARRAY
2724: PPUSH
2725: LD_INT 0
2727: PPUSH
2728: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
2732: LD_VAR 0 6
2736: PPUSH
2737: LD_VAR 0 7
2741: PPUSH
2742: CALL_OW 52
// end else
2746: GO 2781
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2748: LD_VAR 0 6
2752: PPUSH
2753: LD_EXP 15
2757: PUSH
2758: LD_EXP 10
2762: PUSH
2763: LD_VAR 0 2
2767: ARRAY
2768: ARRAY
2769: PUSH
2770: LD_INT 1
2772: ARRAY
2773: PPUSH
2774: LD_INT 0
2776: PPUSH
2777: CALL_OW 49
// end else
2781: GO 2994
// begin uc_side := i ;
2783: LD_ADDR_OWVAR 20
2787: PUSH
2788: LD_VAR 0 2
2792: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
2793: LD_ADDR_OWVAR 21
2797: PUSH
2798: LD_EXP 12
2802: PUSH
2803: LD_VAR 0 2
2807: ARRAY
2808: ST_TO_ADDR
// hc_importance := 100 ;
2809: LD_ADDR_OWVAR 32
2813: PUSH
2814: LD_INT 100
2816: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
2817: LD_INT 0
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: LD_EXP 23
2827: PPUSH
2828: CALL_OW 380
// if multiplayer then
2832: LD_OWVAR 4
2836: IFFALSE 2894
// begin hc_name := mp_sides_players_names [ i ] ;
2838: LD_ADDR_OWVAR 26
2842: PUSH
2843: LD_OWVAR 19
2847: PUSH
2848: LD_VAR 0 2
2852: ARRAY
2853: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
2854: LD_ADDR_OWVAR 33
2858: PUSH
2859: LD_STRING MULTIAVATARS
2861: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
2862: LD_ADDR_OWVAR 34
2866: PUSH
2867: LD_VAR 0 2
2871: PPUSH
2872: CALL_OW 525
2876: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
2877: LD_ADDR_OWVAR 27
2881: PUSH
2882: LD_VAR 0 2
2886: PPUSH
2887: CALL_OW 526
2891: ST_TO_ADDR
// end else
2892: GO 2926
// begin hc_gallery :=  ;
2894: LD_ADDR_OWVAR 33
2898: PUSH
2899: LD_STRING 
2901: ST_TO_ADDR
// hc_name :=  ;
2902: LD_ADDR_OWVAR 26
2906: PUSH
2907: LD_STRING 
2909: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
2910: LD_ADDR_OWVAR 27
2914: PUSH
2915: LD_INT 1
2917: PPUSH
2918: LD_INT 2
2920: PPUSH
2921: CALL_OW 12
2925: ST_TO_ADDR
// end ; un := CreateHuman ;
2926: LD_ADDR_VAR 0 6
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
2936: LD_VAR 0 6
2940: PPUSH
2941: LD_EXP 15
2945: PUSH
2946: LD_EXP 10
2950: PUSH
2951: LD_VAR 0 2
2955: ARRAY
2956: ARRAY
2957: PUSH
2958: LD_INT 1
2960: ARRAY
2961: PPUSH
2962: LD_INT 0
2964: PPUSH
2965: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
2969: LD_ADDR_EXP 26
2973: PUSH
2974: LD_EXP 26
2978: PPUSH
2979: LD_VAR 0 2
2983: PPUSH
2984: LD_VAR 0 6
2988: PPUSH
2989: CALL_OW 1
2993: ST_TO_ADDR
// end ; InitHc ;
2994: CALL_OW 19
// InitUc ;
2998: CALL_OW 18
// uc_side := i ;
3002: LD_ADDR_OWVAR 20
3006: PUSH
3007: LD_VAR 0 2
3011: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
3012: LD_ADDR_OWVAR 21
3016: PUSH
3017: LD_EXP 12
3021: PUSH
3022: LD_VAR 0 2
3026: ARRAY
3027: ST_TO_ADDR
// hc_gallery :=  ;
3028: LD_ADDR_OWVAR 33
3032: PUSH
3033: LD_STRING 
3035: ST_TO_ADDR
// hc_name :=  ;
3036: LD_ADDR_OWVAR 26
3040: PUSH
3041: LD_STRING 
3043: ST_TO_ADDR
// hc_importance := 0 ;
3044: LD_ADDR_OWVAR 32
3048: PUSH
3049: LD_INT 0
3051: ST_TO_ADDR
// cl := 1 ;
3052: LD_ADDR_VAR 0 5
3056: PUSH
3057: LD_INT 1
3059: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
3060: LD_ADDR_VAR 0 3
3064: PUSH
3065: DOUBLE
3066: LD_INT 2
3068: DEC
3069: ST_TO_ADDR
3070: LD_EXP 22
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3716
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
3078: LD_VAR 0 3
3082: PUSH
3083: LD_INT 1
3085: MINUS
3086: PUSH
3087: LD_EXP 22
3091: PUSH
3092: LD_INT 1
3094: MINUS
3095: PUSH
3096: LD_INT 4
3098: DIVREAL
3099: MOD
3100: PUSH
3101: LD_INT 0
3103: EQUAL
3104: IFFALSE 3120
// cl := cl + 1 ;
3106: LD_ADDR_VAR 0 5
3110: PUSH
3111: LD_VAR 0 5
3115: PUSH
3116: LD_INT 1
3118: PLUS
3119: ST_TO_ADDR
// if cl > 4 then
3120: LD_VAR 0 5
3124: PUSH
3125: LD_INT 4
3127: GREATER
3128: IFFALSE 3138
// cl := 1 ;
3130: LD_ADDR_VAR 0 5
3134: PUSH
3135: LD_INT 1
3137: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
3138: LD_EXP 10
3142: PUSH
3143: LD_VAR 0 2
3147: ARRAY
3148: PUSH
3149: LD_INT 2
3151: EQUAL
3152: PUSH
3153: LD_VAR 0 5
3157: PUSH
3158: LD_INT 2
3160: EQUAL
3161: PUSH
3162: LD_VAR 0 5
3166: PUSH
3167: LD_INT 4
3169: EQUAL
3170: PUSH
3171: LD_INT 22
3173: PUSH
3174: LD_VAR 0 2
3178: PUSH
3179: EMPTY
3180: LIST
3181: LIST
3182: PUSH
3183: LD_INT 25
3185: PUSH
3186: LD_INT 4
3188: PUSH
3189: EMPTY
3190: LIST
3191: LIST
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PPUSH
3197: CALL_OW 69
3201: PUSH
3202: LD_INT 1
3204: GREATER
3205: AND
3206: OR
3207: AND
3208: IFFALSE 3227
// PrepareHuman ( false , 1 , multi_skill_level ) else
3210: LD_INT 0
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_EXP 23
3220: PPUSH
3221: CALL_OW 380
3225: GO 3244
// PrepareHuman ( false , cl , multi_skill_level ) ;
3227: LD_INT 0
3229: PPUSH
3230: LD_VAR 0 5
3234: PPUSH
3235: LD_EXP 23
3239: PPUSH
3240: CALL_OW 380
// un := CreateHuman ;
3244: LD_ADDR_VAR 0 6
3248: PUSH
3249: CALL_OW 44
3253: ST_TO_ADDR
// if multi_pos_area then
3254: LD_EXP 15
3258: IFFALSE 3714
// begin if GetClass ( un ) = 3 and Count ( multi_vehicles [ multi_sides [ i ] ] ) then
3260: LD_VAR 0 6
3264: PPUSH
3265: CALL_OW 257
3269: PUSH
3270: LD_INT 3
3272: EQUAL
3273: PUSH
3274: LD_EXP 25
3278: PUSH
3279: LD_EXP 10
3283: PUSH
3284: LD_VAR 0 2
3288: ARRAY
3289: ARRAY
3290: PPUSH
3291: CALL 10895 0 1
3295: AND
3296: IFFALSE 3570
// begin tmp := multi_vehicles [ multi_sides [ i ] ] ;
3298: LD_ADDR_VAR 0 8
3302: PUSH
3303: LD_EXP 25
3307: PUSH
3308: LD_EXP 10
3312: PUSH
3313: LD_VAR 0 2
3317: ARRAY
3318: ARRAY
3319: ST_TO_ADDR
// PrepareVehicle ( tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] , tmp [ 1 ] [ 3 ] , tmp [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
3320: LD_VAR 0 8
3324: PUSH
3325: LD_INT 1
3327: ARRAY
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_VAR 0 8
3337: PUSH
3338: LD_INT 1
3340: ARRAY
3341: PUSH
3342: LD_INT 2
3344: ARRAY
3345: PPUSH
3346: LD_VAR 0 8
3350: PUSH
3351: LD_INT 1
3353: ARRAY
3354: PUSH
3355: LD_INT 3
3357: ARRAY
3358: PPUSH
3359: LD_VAR 0 8
3363: PUSH
3364: LD_INT 1
3366: ARRAY
3367: PUSH
3368: LD_INT 4
3370: ARRAY
3371: PPUSH
3372: LD_INT 80
3374: PUSH
3375: LD_INT 60
3377: PUSH
3378: LD_INT 40
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: LIST
3385: PUSH
3386: LD_OWVAR 67
3390: ARRAY
3391: PPUSH
3392: CALL 13633 0 5
// veh := CreateVehicle ;
3396: LD_ADDR_VAR 0 7
3400: PUSH
3401: CALL_OW 45
3405: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
3406: LD_VAR 0 7
3410: PPUSH
3411: LD_EXP 15
3415: PUSH
3416: LD_EXP 10
3420: PUSH
3421: LD_VAR 0 2
3425: ARRAY
3426: ARRAY
3427: PUSH
3428: LD_INT 2
3430: ARRAY
3431: PPUSH
3432: LD_INT 0
3434: PPUSH
3435: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
3439: LD_VAR 0 6
3443: PPUSH
3444: LD_VAR 0 7
3448: PPUSH
3449: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
3453: LD_VAR 0 7
3457: PPUSH
3458: CALL_OW 264
3462: PUSH
3463: LD_INT 51
3465: EQUAL
3466: IFFALSE 3483
// SetCargo ( veh , mat_oil , 60 ) ;
3468: LD_VAR 0 7
3472: PPUSH
3473: LD_INT 2
3475: PPUSH
3476: LD_INT 60
3478: PPUSH
3479: CALL_OW 290
// tmp := Join ( tmp , tmp [ 1 ] ) ;
3483: LD_ADDR_VAR 0 8
3487: PUSH
3488: LD_VAR 0 8
3492: PPUSH
3493: LD_VAR 0 8
3497: PUSH
3498: LD_INT 1
3500: ARRAY
3501: PPUSH
3502: CALL 46484 0 2
3506: ST_TO_ADDR
// tmp := Delete ( tmp , 1 ) ;
3507: LD_ADDR_VAR 0 8
3511: PUSH
3512: LD_VAR 0 8
3516: PPUSH
3517: LD_INT 1
3519: PPUSH
3520: CALL_OW 3
3524: ST_TO_ADDR
// multi_vehicles := Replace ( multi_vehicles [ multi_sides [ i ] ] , multi_sides [ i ] , tmp ) ;
3525: LD_ADDR_EXP 25
3529: PUSH
3530: LD_EXP 25
3534: PUSH
3535: LD_EXP 10
3539: PUSH
3540: LD_VAR 0 2
3544: ARRAY
3545: ARRAY
3546: PPUSH
3547: LD_EXP 10
3551: PUSH
3552: LD_VAR 0 2
3556: ARRAY
3557: PPUSH
3558: LD_VAR 0 8
3562: PPUSH
3563: CALL_OW 1
3567: ST_TO_ADDR
// continue ;
3568: GO 3075
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
3570: LD_ADDR_VAR 0 8
3574: PUSH
3575: LD_INT 22
3577: PUSH
3578: LD_VAR 0 2
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 30
3589: PUSH
3590: LD_INT 31
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 58
3599: PUSH
3600: EMPTY
3601: LIST
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
3613: LD_VAR 0 6
3617: PPUSH
3618: CALL_OW 257
3622: PUSH
3623: LD_INT 1
3625: EQUAL
3626: PUSH
3627: LD_VAR 0 8
3631: AND
3632: IFFALSE 3681
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
3634: LD_VAR 0 6
3638: PPUSH
3639: LD_VAR 0 8
3643: PUSH
3644: LD_INT 1
3646: ARRAY
3647: PPUSH
3648: CALL_OW 254
3652: PUSH
3653: LD_INT 3
3655: MINUS
3656: PPUSH
3657: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
3661: LD_VAR 0 6
3665: PPUSH
3666: LD_VAR 0 8
3670: PUSH
3671: LD_INT 1
3673: ARRAY
3674: PPUSH
3675: CALL_OW 52
// continue ;
3679: GO 3075
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
3681: LD_VAR 0 6
3685: PPUSH
3686: LD_EXP 15
3690: PUSH
3691: LD_EXP 10
3695: PUSH
3696: LD_VAR 0 2
3700: ARRAY
3701: ARRAY
3702: PUSH
3703: LD_INT 1
3705: ARRAY
3706: PPUSH
3707: LD_INT 0
3709: PPUSH
3710: CALL_OW 49
// end ; end ;
3714: GO 3075
3716: POP
3717: POP
// end ;
3718: GO 2320
3720: POP
3721: POP
// end ;
3722: LD_VAR 0 1
3726: RET
// export function Multiplayer_Start ( ) ; begin
3727: LD_INT 0
3729: PPUSH
// Multiplayer_PreparePlayers ( ) ;
3730: CALL 2296 0 0
// Multiplayer_InitPointSystem ( ) ;
3734: CALL 4445 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
3738: LD_INT 20
3740: PPUSH
3741: CALL 4621 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
3745: LD_INT 150
3747: PPUSH
3748: CALL 4621 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
3752: LD_INT 5
3754: PPUSH
3755: CALL 4621 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
3759: LD_INT 40
3761: NEG
3762: PPUSH
3763: CALL 4621 0 1
// Multiplayer_RegisterCondition ( - 20 ) ;
3767: LD_INT 20
3769: NEG
3770: PPUSH
3771: CALL 4621 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
3775: LD_INT 2
3777: PPUSH
3778: CALL 4621 0 1
// Multiplayer_RegisterCondition ( 40 ) ;
3782: LD_INT 40
3784: PPUSH
3785: CALL 4621 0 1
// Multiplayer_RegisterCondition ( 25 ) ;
3789: LD_INT 25
3791: PPUSH
3792: CALL 4621 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
3796: LD_INT 1000
3798: NEG
3799: PPUSH
3800: CALL 4621 0 1
// if multi_sides [ your_side ] then
3804: LD_EXP 10
3808: PUSH
3809: LD_OWVAR 2
3813: ARRAY
3814: IFFALSE 3841
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
3816: LD_INT 22
3818: PUSH
3819: LD_OWVAR 2
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PPUSH
3828: CALL_OW 69
3832: PUSH
3833: LD_INT 1
3835: ARRAY
3836: PPUSH
3837: CALL_OW 87
// end ;
3841: LD_VAR 0 1
3845: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
3846: LD_INT 0
3848: PPUSH
3849: PPUSH
3850: PPUSH
3851: PPUSH
// repeat wait ( 0 0$1 ) ;
3852: LD_INT 35
3854: PPUSH
3855: CALL_OW 67
// points := 0 ;
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: LD_INT 0
3866: ST_TO_ADDR
// for i := 1 to 8 do
3867: LD_ADDR_VAR 0 2
3871: PUSH
3872: DOUBLE
3873: LD_INT 1
3875: DEC
3876: ST_TO_ADDR
3877: LD_INT 8
3879: PUSH
3880: FOR_TO
3881: IFFALSE 3907
// points := points + multi_points [ i ] ;
3883: LD_ADDR_VAR 0 4
3887: PUSH
3888: LD_VAR 0 4
3892: PUSH
3893: LD_EXP 31
3897: PUSH
3898: LD_VAR 0 2
3902: ARRAY
3903: PLUS
3904: ST_TO_ADDR
3905: GO 3880
3907: POP
3908: POP
// if not multi_custom_commanders then
3909: LD_EXP 19
3913: NOT
3914: IFFALSE 4027
// begin for i := 1 to 8 do
3916: LD_ADDR_VAR 0 2
3920: PUSH
3921: DOUBLE
3922: LD_INT 1
3924: DEC
3925: ST_TO_ADDR
3926: LD_INT 8
3928: PUSH
3929: FOR_TO
3930: IFFALSE 4001
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
3932: LD_INT 22
3934: PUSH
3935: LD_VAR 0 2
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 69
3948: PUSH
3949: LD_INT 0
3951: EQUAL
3952: PUSH
3953: LD_EXP 27
3957: PUSH
3958: LD_VAR 0 2
3962: ARRAY
3963: NOT
3964: AND
3965: IFFALSE 3999
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
3967: LD_ADDR_EXP 27
3971: PUSH
3972: LD_EXP 27
3976: PPUSH
3977: LD_VAR 0 2
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL_OW 1
3989: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
3990: LD_VAR 0 2
3994: PPUSH
3995: CALL 4691 0 1
// end ; end ;
3999: GO 3929
4001: POP
4002: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
4003: LD_EXP 27
4007: PPUSH
4008: CALL 10895 0 1
4012: PUSH
4013: LD_EXP 10
4017: PPUSH
4018: CALL 10895 0 1
4022: EQUAL
4023: IFFALSE 4027
// break ;
4025: GO 4068
// end ; if points >= multi_points_to_victory then
4027: LD_VAR 0 4
4031: PUSH
4032: LD_EXP 29
4036: GREATEREQUAL
4037: IFFALSE 4049
// begin winAllowed := true ;
4039: LD_ADDR_EXP 3
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// break ;
4047: GO 4068
// end ; until ( winAllowed and game ) or not multi_commanders ;
4049: LD_EXP 3
4053: PUSH
4054: LD_EXP 2
4058: AND
4059: PUSH
4060: LD_EXP 26
4064: NOT
4065: OR
4066: IFFALSE 3852
// game := false ;
4068: LD_ADDR_EXP 2
4072: PUSH
4073: LD_INT 0
4075: ST_TO_ADDR
// for i := 1 to 8 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 8
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4126
// begin if multi_sides [ i ] then
4092: LD_EXP 10
4096: PUSH
4097: LD_VAR 0 2
4101: ARRAY
4102: IFFALSE 4124
// SetMultiScore ( i , multi_points [ i ] ) ;
4104: LD_VAR 0 2
4108: PPUSH
4109: LD_EXP 31
4113: PUSH
4114: LD_VAR 0 2
4118: ARRAY
4119: PPUSH
4120: CALL_OW 506
// end ;
4124: GO 4089
4126: POP
4127: POP
// if multi_loosers [ your_side ] then
4128: LD_EXP 27
4132: PUSH
4133: LD_OWVAR 2
4137: ARRAY
4138: IFFALSE 4161
// begin if Multiplayer then
4140: LD_OWVAR 4
4144: IFFALSE 4152
// YouLostInMultiplayer else
4146: CALL_OW 107
4150: GO 4159
// YouLost (  ) ;
4152: LD_STRING 
4154: PPUSH
4155: CALL_OW 104
// end else
4159: GO 4177
// begin if Multiplayer then
4161: LD_OWVAR 4
4165: IFFALSE 4173
// YouWinInMultiplayer else
4167: CALL_OW 106
4171: GO 4177
// YouWin ;
4173: CALL_OW 103
// end ; end ;
4177: LD_VAR 0 1
4181: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
4182: LD_INT 0
4184: PPUSH
4185: PPUSH
// result := false ;
4186: LD_ADDR_VAR 0 1
4190: PUSH
4191: LD_INT 0
4193: ST_TO_ADDR
// for side in botSides do
4194: LD_ADDR_VAR 0 2
4198: PUSH
4199: LD_EXP 4
4203: PUSH
4204: FOR_IN
4205: IFFALSE 4266
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
4207: LD_ADDR_VAR 0 1
4211: PUSH
4212: LD_INT 22
4214: PUSH
4215: LD_VAR 0 2
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: LD_INT 21
4226: PUSH
4227: LD_INT 1
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: PUSH
4234: LD_INT 50
4236: PUSH
4237: EMPTY
4238: LIST
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: LIST
4244: PPUSH
4245: CALL_OW 69
4249: PUSH
4250: LD_INT 0
4252: GREATER
4253: ST_TO_ADDR
// if result then
4254: LD_VAR 0 1
4258: IFFALSE 4264
// exit ;
4260: POP
4261: POP
4262: GO 4268
// end ;
4264: GO 4204
4266: POP
4267: POP
// end ;
4268: LD_VAR 0 1
4272: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
// result := [ ] ;
4278: LD_ADDR_VAR 0 1
4282: PUSH
4283: EMPTY
4284: ST_TO_ADDR
// points := 0 ;
4285: LD_ADDR_VAR 0 3
4289: PUSH
4290: LD_INT 0
4292: ST_TO_ADDR
// for i := 1 to 8 do
4293: LD_ADDR_VAR 0 2
4297: PUSH
4298: DOUBLE
4299: LD_INT 1
4301: DEC
4302: ST_TO_ADDR
4303: LD_INT 8
4305: PUSH
4306: FOR_TO
4307: IFFALSE 4386
// begin points := points + multi_points [ i ] ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_VAR 0 3
4318: PUSH
4319: LD_EXP 31
4323: PUSH
4324: LD_VAR 0 2
4328: ARRAY
4329: PLUS
4330: ST_TO_ADDR
// if multi_sides [ i ] then
4331: LD_EXP 10
4335: PUSH
4336: LD_VAR 0 2
4340: ARRAY
4341: IFFALSE 4384
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
4343: LD_ADDR_VAR 0 1
4347: PUSH
4348: LD_VAR 0 1
4352: PUSH
4353: LD_STRING #coop-points
4355: PUSH
4356: LD_VAR 0 2
4360: PUSH
4361: LD_VAR 0 2
4365: PUSH
4366: LD_EXP 31
4370: PUSH
4371: LD_VAR 0 2
4375: ARRAY
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: LIST
4381: LIST
4382: ADD
4383: ST_TO_ADDR
// end ; end ;
4384: GO 4306
4386: POP
4387: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
4388: LD_ADDR_VAR 0 1
4392: PUSH
4393: LD_VAR 0 1
4397: PUSH
4398: LD_STRING #saved-convoys
4400: PUSH
4401: LD_EXP 5
4405: PUSH
4406: EMPTY
4407: LIST
4408: LIST
4409: ADD
4410: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
4411: LD_ADDR_VAR 0 1
4415: PUSH
4416: LD_VAR 0 1
4420: PUSH
4421: LD_STRING #points-to-win
4423: PUSH
4424: LD_VAR 0 3
4428: PUSH
4429: LD_EXP 29
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: LIST
4438: ADD
4439: ST_TO_ADDR
// end ;
4440: LD_VAR 0 1
4444: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
4445: LD_INT 0
4447: PPUSH
4448: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4449: LD_ADDR_EXP 31
4453: PUSH
4454: LD_INT 0
4456: PUSH
4457: LD_INT 0
4459: PUSH
4460: LD_INT 0
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: LD_INT 0
4471: PUSH
4472: LD_INT 0
4474: PUSH
4475: LD_INT 0
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: ST_TO_ADDR
// multi_points_conditions := [ ] ;
4488: LD_ADDR_EXP 32
4492: PUSH
4493: EMPTY
4494: ST_TO_ADDR
// end ;
4495: LD_VAR 0 1
4499: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
4500: LD_INT 0
4502: PPUSH
// if not multi_points or not side or side > 8 then
4503: LD_EXP 31
4507: NOT
4508: PUSH
4509: LD_VAR 0 1
4513: NOT
4514: OR
4515: PUSH
4516: LD_VAR 0 1
4520: PUSH
4521: LD_INT 8
4523: GREATER
4524: OR
4525: IFFALSE 4529
// exit ;
4527: GO 4566
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
4529: LD_ADDR_EXP 31
4533: PUSH
4534: LD_EXP 31
4538: PPUSH
4539: LD_VAR 0 1
4543: PPUSH
4544: LD_EXP 31
4548: PUSH
4549: LD_VAR 0 1
4553: ARRAY
4554: PUSH
4555: LD_VAR 0 2
4559: PLUS
4560: PPUSH
4561: CALL_OW 1
4565: ST_TO_ADDR
// end ;
4566: LD_VAR 0 3
4570: RET
// export function Multiplayer_GetPoints ( side ) ; begin
4571: LD_INT 0
4573: PPUSH
// if not multi_points or not side or side > 8 then
4574: LD_EXP 31
4578: NOT
4579: PUSH
4580: LD_VAR 0 1
4584: NOT
4585: OR
4586: PUSH
4587: LD_VAR 0 1
4591: PUSH
4592: LD_INT 8
4594: GREATER
4595: OR
4596: IFFALSE 4600
// exit ;
4598: GO 4616
// result := multi_points [ side ] ;
4600: LD_ADDR_VAR 0 2
4604: PUSH
4605: LD_EXP 31
4609: PUSH
4610: LD_VAR 0 1
4614: ARRAY
4615: ST_TO_ADDR
// end ;
4616: LD_VAR 0 2
4620: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
4621: LD_INT 0
4623: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
4624: LD_ADDR_EXP 32
4628: PUSH
4629: LD_EXP 32
4633: PPUSH
4634: LD_EXP 32
4638: PUSH
4639: LD_INT 1
4641: PLUS
4642: PPUSH
4643: LD_VAR 0 1
4647: PPUSH
4648: CALL_OW 1
4652: ST_TO_ADDR
// end ;
4653: LD_VAR 0 2
4657: RET
// export function Multiplayer_GetCondition ( id ) ; begin
4658: LD_INT 0
4660: PPUSH
// if not id then
4661: LD_VAR 0 1
4665: NOT
4666: IFFALSE 4670
// exit ;
4668: GO 4686
// result := multi_points_conditions [ id ] ;
4670: LD_ADDR_VAR 0 2
4674: PUSH
4675: LD_EXP 32
4679: PUSH
4680: LD_VAR 0 1
4684: ARRAY
4685: ST_TO_ADDR
// end ;
4686: LD_VAR 0 2
4690: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
4696: PPUSH
4697: PPUSH
// players := [ ] ;
4698: LD_ADDR_VAR 0 3
4702: PUSH
4703: EMPTY
4704: ST_TO_ADDR
// for i = 1 to 8 do
4705: LD_ADDR_VAR 0 4
4709: PUSH
4710: DOUBLE
4711: LD_INT 1
4713: DEC
4714: ST_TO_ADDR
4715: LD_INT 8
4717: PUSH
4718: FOR_TO
4719: IFFALSE 4778
// begin if i = side then
4721: LD_VAR 0 4
4725: PUSH
4726: LD_VAR 0 1
4730: EQUAL
4731: IFFALSE 4735
// continue ;
4733: GO 4718
// if multi_sides [ i ] and not multi_loosers [ i ] then
4735: LD_EXP 10
4739: PUSH
4740: LD_VAR 0 4
4744: ARRAY
4745: PUSH
4746: LD_EXP 27
4750: PUSH
4751: LD_VAR 0 4
4755: ARRAY
4756: NOT
4757: AND
4758: IFFALSE 4776
// players := players ^ i ;
4760: LD_ADDR_VAR 0 3
4764: PUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 4
4774: ADD
4775: ST_TO_ADDR
// end ;
4776: GO 4718
4778: POP
4779: POP
// if not players then
4780: LD_VAR 0 3
4784: NOT
4785: IFFALSE 4789
// exit ;
4787: GO 5056
// if players = 1 then
4789: LD_VAR 0 3
4793: PUSH
4794: LD_INT 1
4796: EQUAL
4797: IFFALSE 4858
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
4799: LD_ADDR_VAR 0 4
4803: PUSH
4804: LD_INT 22
4806: PUSH
4807: LD_VAR 0 1
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 51
4818: PUSH
4819: EMPTY
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 69
4830: PUSH
4831: FOR_IN
4832: IFFALSE 4854
// SetSide ( i , players [ 1 ] ) ;
4834: LD_VAR 0 4
4838: PPUSH
4839: LD_VAR 0 3
4843: PUSH
4844: LD_INT 1
4846: ARRAY
4847: PPUSH
4848: CALL_OW 235
4852: GO 4831
4854: POP
4855: POP
// end else
4856: GO 5056
// begin j := 1 ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_INT 1
4865: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
4866: LD_ADDR_VAR 0 4
4870: PUSH
4871: LD_INT 22
4873: PUSH
4874: LD_VAR 0 1
4878: PUSH
4879: EMPTY
4880: LIST
4881: LIST
4882: PUSH
4883: LD_INT 2
4885: PUSH
4886: LD_INT 21
4888: PUSH
4889: LD_INT 1
4891: PUSH
4892: EMPTY
4893: LIST
4894: LIST
4895: PUSH
4896: LD_INT 51
4898: PUSH
4899: EMPTY
4900: LIST
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PUSH
4906: LD_INT 21
4908: PUSH
4909: LD_INT 2
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: LIST
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: CALL_OW 69
4929: PUSH
4930: FOR_IN
4931: IFFALSE 5054
// begin SetSide ( i , players [ j ] ) ;
4933: LD_VAR 0 4
4937: PPUSH
4938: LD_VAR 0 3
4942: PUSH
4943: LD_VAR 0 5
4947: ARRAY
4948: PPUSH
4949: CALL_OW 235
// if IsDrivenBy ( i ) then
4953: LD_VAR 0 4
4957: PPUSH
4958: CALL_OW 311
4962: IFFALSE 4989
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
4964: LD_VAR 0 4
4968: PPUSH
4969: CALL_OW 311
4973: PPUSH
4974: LD_VAR 0 3
4978: PUSH
4979: LD_VAR 0 5
4983: ARRAY
4984: PPUSH
4985: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
4989: LD_VAR 0 4
4993: PPUSH
4994: CALL_OW 310
4998: PPUSH
4999: CALL_OW 247
5003: PUSH
5004: LD_INT 3
5006: EQUAL
5007: IFFALSE 5018
// ComExitBuilding ( i ) ;
5009: LD_VAR 0 4
5013: PPUSH
5014: CALL_OW 122
// j := j + 1 ;
5018: LD_ADDR_VAR 0 5
5022: PUSH
5023: LD_VAR 0 5
5027: PUSH
5028: LD_INT 1
5030: PLUS
5031: ST_TO_ADDR
// if j > players then
5032: LD_VAR 0 5
5036: PUSH
5037: LD_VAR 0 3
5041: GREATER
5042: IFFALSE 5052
// j := 1 ;
5044: LD_ADDR_VAR 0 5
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// end ;
5052: GO 4930
5054: POP
5055: POP
// end ; end ;
5056: LD_VAR 0 2
5060: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
5061: LD_INT 0
5063: PPUSH
// if not side or side > 8 then
5064: LD_VAR 0 1
5068: NOT
5069: PUSH
5070: LD_VAR 0 1
5074: PUSH
5075: LD_INT 8
5077: GREATER
5078: OR
5079: IFFALSE 5083
// exit ;
5081: GO 5100
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
5083: LD_VAR 0 1
5087: PPUSH
5088: LD_INT 6
5090: PPUSH
5091: CALL 4658 0 1
5095: PPUSH
5096: CALL 4500 0 2
// end ;
5100: LD_VAR 0 2
5104: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
5105: LD_INT 0
5107: PPUSH
// if not side or side > 8 then
5108: LD_VAR 0 1
5112: NOT
5113: PUSH
5114: LD_VAR 0 1
5118: PUSH
5119: LD_INT 8
5121: GREATER
5122: OR
5123: IFFALSE 5127
// exit ;
5125: GO 5144
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
5127: LD_VAR 0 1
5131: PPUSH
5132: LD_INT 4
5134: PPUSH
5135: CALL 4658 0 1
5139: PPUSH
5140: CALL 4500 0 2
// end ;
5144: LD_VAR 0 2
5148: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
5149: LD_INT 0
5151: PPUSH
// if not side or side > 8 then
5152: LD_VAR 0 1
5156: NOT
5157: PUSH
5158: LD_VAR 0 1
5162: PUSH
5163: LD_INT 8
5165: GREATER
5166: OR
5167: IFFALSE 5171
// exit ;
5169: GO 5188
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
5171: LD_VAR 0 1
5175: PPUSH
5176: LD_INT 5
5178: PPUSH
5179: CALL 4658 0 1
5183: PPUSH
5184: CALL 4500 0 2
// end ;
5188: LD_VAR 0 2
5192: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
5193: LD_INT 0
5195: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
5196: LD_VAR 0 1
5200: NOT
5201: PUSH
5202: LD_VAR 0 1
5206: PUSH
5207: LD_INT 8
5209: GREATER
5210: OR
5211: PUSH
5212: LD_VAR 0 2
5216: PUSH
5217: LD_INT 2
5219: PUSH
5220: LD_INT 6
5222: PUSH
5223: LD_INT 36
5225: PUSH
5226: LD_INT 0
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: LIST
5233: LIST
5234: IN
5235: NOT
5236: OR
5237: IFFALSE 5241
// exit ;
5239: GO 5258
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
5241: LD_VAR 0 1
5245: PPUSH
5246: LD_INT 3
5248: PPUSH
5249: CALL 4658 0 1
5253: PPUSH
5254: CALL 4500 0 2
// end ;
5258: LD_VAR 0 3
5262: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
5263: LD_INT 0
5265: PPUSH
5266: PPUSH
// if not un then
5267: LD_VAR 0 1
5271: NOT
5272: IFFALSE 5276
// exit ;
5274: GO 5322
// if not points then
5276: LD_VAR 0 3
5280: NOT
5281: IFFALSE 5298
// gained_points := Multiplayer_GetCondition ( 1 ) else
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: LD_INT 1
5290: PPUSH
5291: CALL 4658 0 1
5295: ST_TO_ADDR
5296: GO 5308
// gained_points := points ;
5298: LD_ADDR_VAR 0 5
5302: PUSH
5303: LD_VAR 0 3
5307: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) end ; end_of_file
5308: LD_VAR 0 2
5312: PPUSH
5313: LD_VAR 0 5
5317: PPUSH
5318: CALL 4500 0 2
5322: LD_VAR 0 4
5326: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
5327: LD_INT 0
5329: PPUSH
// begin side := GetSide ( un ) ;
5330: LD_ADDR_VAR 0 4
5334: PUSH
5335: LD_VAR 0 1
5339: PPUSH
5340: CALL_OW 255
5344: ST_TO_ADDR
// if side = enemySide then
5345: LD_VAR 0 4
5349: PUSH
5350: LD_EXP 8
5354: EQUAL
5355: IFFALSE 5359
// exit ;
5357: GO 5419
// if side = convoySide and multi_sides [ killerSide ] then
5359: LD_VAR 0 4
5363: PUSH
5364: LD_EXP 35
5368: EQUAL
5369: PUSH
5370: LD_EXP 10
5374: PUSH
5375: LD_VAR 0 2
5379: ARRAY
5380: AND
5381: IFFALSE 5402
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
5383: LD_VAR 0 4
5387: PPUSH
5388: LD_INT 9
5390: PPUSH
5391: CALL 4658 0 1
5395: PPUSH
5396: CALL 4500 0 2
// exit ;
5400: GO 5419
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
5402: LD_VAR 0 1
5406: PPUSH
5407: LD_VAR 0 2
5411: PPUSH
5412: LD_INT 0
5414: PPUSH
5415: CALL 5263 0 3
// end ;
5419: PPOPN 4
5421: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
5422: LD_INT 0
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
5432: PPUSH
5433: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
5434: LD_VAR 0 1
5438: PPUSH
5439: CALL 67387 0 1
// side := GetSide ( un ) ;
5443: LD_ADDR_VAR 0 3
5447: PUSH
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 255
5457: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
5458: LD_EXP 10
5462: PUSH
5463: LD_VAR 0 3
5467: ARRAY
5468: PUSH
5469: LD_VAR 0 3
5473: PUSH
5474: LD_EXP 35
5478: EQUAL
5479: OR
5480: IFFALSE 5558
// begin if un in convoys then
5482: LD_VAR 0 1
5486: PUSH
5487: LD_EXP 33
5491: IN
5492: IFFALSE 5510
// convoys := convoys diff un ;
5494: LD_ADDR_EXP 33
5498: PUSH
5499: LD_EXP 33
5503: PUSH
5504: LD_VAR 0 1
5508: DIFF
5509: ST_TO_ADDR
// if GetType ( un ) = unit_human then
5510: LD_VAR 0 1
5514: PPUSH
5515: CALL_OW 247
5519: PUSH
5520: LD_INT 1
5522: EQUAL
5523: IFFALSE 5534
// MultiplayerEvent_HumanLost ( side ) ;
5525: LD_VAR 0 3
5529: PPUSH
5530: CALL 5105 0 1
// if GetType ( un ) = unit_vehicle then
5534: LD_VAR 0 1
5538: PPUSH
5539: CALL_OW 247
5543: PUSH
5544: LD_INT 2
5546: EQUAL
5547: IFFALSE 5558
// MultiplayerEvent_VehicleLost ( side ) ;
5549: LD_VAR 0 3
5553: PPUSH
5554: CALL 5149 0 1
// end ; if multi_commanders and multi_custom_commanders then
5558: LD_EXP 26
5562: PUSH
5563: LD_EXP 19
5567: AND
5568: IFFALSE 5630
// if un in multi_commanders then
5570: LD_VAR 0 1
5574: PUSH
5575: LD_EXP 26
5579: IN
5580: IFFALSE 5630
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
5582: LD_ADDR_EXP 27
5586: PUSH
5587: LD_EXP 27
5591: PPUSH
5592: LD_VAR 0 3
5596: PPUSH
5597: LD_INT 1
5599: PPUSH
5600: CALL_OW 1
5604: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
5605: LD_ADDR_EXP 26
5609: PUSH
5610: LD_EXP 26
5614: PUSH
5615: LD_VAR 0 1
5619: DIFF
5620: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
5621: LD_VAR 0 3
5625: PPUSH
5626: CALL 4691 0 1
// end ; end ;
5630: PPOPN 11
5632: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
5633: LD_INT 0
5635: PPUSH
5636: PPUSH
5637: PPUSH
5638: PPUSH
// begin side := GetSide ( building ) ;
5639: LD_ADDR_VAR 0 4
5643: PUSH
5644: LD_VAR 0 1
5648: PPUSH
5649: CALL_OW 255
5653: ST_TO_ADDR
// if multi_sides [ side ] then
5654: LD_EXP 10
5658: PUSH
5659: LD_VAR 0 4
5663: ARRAY
5664: IFFALSE 5685
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
5666: LD_VAR 0 4
5670: PPUSH
5671: LD_VAR 0 1
5675: PPUSH
5676: CALL_OW 266
5680: PPUSH
5681: CALL 5193 0 2
// end ;
5685: PPOPN 5
5687: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
5688: LD_INT 0
5690: PPUSH
5691: PPUSH
5692: PPUSH
5693: PPUSH
5694: PPUSH
5695: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: LD_VAR 0 2
5705: PPUSH
5706: CALL 67507 0 2
// side := GetSide ( vehicle ) ;
5710: LD_ADDR_VAR 0 4
5714: PUSH
5715: LD_VAR 0 1
5719: PPUSH
5720: CALL_OW 255
5724: ST_TO_ADDR
// if multi_sides [ side ] then
5725: LD_EXP 10
5729: PUSH
5730: LD_VAR 0 4
5734: ARRAY
5735: IFFALSE 5746
// MultiplayerEvent_Produced ( side ) ;
5737: LD_VAR 0 4
5741: PPUSH
5742: CALL 5061 0 1
// end ;
5746: PPOPN 8
5748: END
// on ResearchComplete ( tech , lab ) do var i , side ;
5749: LD_INT 0
5751: PPUSH
5752: PPUSH
// begin side := GetSide ( lab ) ;
5753: LD_ADDR_VAR 0 4
5757: PUSH
5758: LD_VAR 0 2
5762: PPUSH
5763: CALL_OW 255
5767: ST_TO_ADDR
// if multi_sides [ side ] then
5768: LD_EXP 10
5772: PUSH
5773: LD_VAR 0 4
5777: ARRAY
5778: IFFALSE 5841
// for i := 1 to 8 do
5780: LD_ADDR_VAR 0 3
5784: PUSH
5785: DOUBLE
5786: LD_INT 1
5788: DEC
5789: ST_TO_ADDR
5790: LD_INT 8
5792: PUSH
5793: FOR_TO
5794: IFFALSE 5839
// if multi_sides [ i ] and i <> side then
5796: LD_EXP 10
5800: PUSH
5801: LD_VAR 0 3
5805: ARRAY
5806: PUSH
5807: LD_VAR 0 3
5811: PUSH
5812: LD_VAR 0 4
5816: NONEQUAL
5817: AND
5818: IFFALSE 5837
// SetTech ( tech , i , state_researched ) ;
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_INT 2
5832: PPUSH
5833: CALL_OW 322
5837: GO 5793
5839: POP
5840: POP
// end ; end_of_file end_of_file
5841: PPOPN 4
5843: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
5844: LD_INT 0
5846: PPUSH
5847: PPUSH
// convoys := [ ] ;
5848: LD_ADDR_EXP 33
5852: PUSH
5853: EMPTY
5854: ST_TO_ADDR
// convoySide := side ;
5855: LD_ADDR_EXP 35
5859: PUSH
5860: LD_VAR 0 1
5864: ST_TO_ADDR
// convoyWave := 0 ;
5865: LD_ADDR_EXP 34
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// for i := 1 to 8 do
5873: LD_ADDR_VAR 0 3
5877: PUSH
5878: DOUBLE
5879: LD_INT 1
5881: DEC
5882: ST_TO_ADDR
5883: LD_INT 8
5885: PUSH
5886: FOR_TO
5887: IFFALSE 5917
// if multi_sides [ i ] then
5889: LD_EXP 10
5893: PUSH
5894: LD_VAR 0 3
5898: ARRAY
5899: IFFALSE 5915
// ChangeSideFog ( i , side ) ;
5901: LD_VAR 0 3
5905: PPUSH
5906: LD_VAR 0 1
5910: PPUSH
5911: CALL_OW 343
5915: GO 5886
5917: POP
5918: POP
// end ;
5919: LD_VAR 0 2
5923: RET
// every 3 3$00 + 2 2$00 trigger game do var i , tmp ;
5924: LD_EXP 2
5928: IFFALSE 5947
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
// begin enable ;
5937: ENABLE
// SendConvoy ( convoyWave ) ;
5938: LD_EXP 34
5942: PPUSH
5943: CALL 5950 0 1
// end ;
5947: PPOPN 2
5949: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
5950: LD_INT 0
5952: PPUSH
5953: PPUSH
5954: PPUSH
5955: PPUSH
5956: PPUSH
5957: PPUSH
5958: PPUSH
// repeat wait ( 0 0$1 ) ;
5959: LD_INT 35
5961: PPUSH
5962: CALL_OW 67
// until not blockCreateUnitThread ;
5966: LD_EXP 6
5970: NOT
5971: IFFALSE 5959
// blockCreateUnitThread := true ;
5973: LD_ADDR_EXP 6
5977: PUSH
5978: LD_INT 1
5980: ST_TO_ADDR
// convoyWave := Inc ( wave ) ;
5981: LD_ADDR_EXP 34
5985: PUSH
5986: LD_VAR 0 1
5990: PPUSH
5991: CALL 47845 0 1
5995: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
5996: LD_ADDR_VAR 0 4
6000: PUSH
6001: LD_INT 5
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: LD_INT 3
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_OWVAR 67
6019: ARRAY
6020: ST_TO_ADDR
// tmp := [ ] ;
6021: LD_ADDR_VAR 0 7
6025: PUSH
6026: EMPTY
6027: ST_TO_ADDR
// if wave mod 5 = 0 then
6028: LD_VAR 0 1
6032: PUSH
6033: LD_INT 5
6035: MOD
6036: PUSH
6037: LD_INT 0
6039: EQUAL
6040: IFFALSE 6286
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 16
6049: PUSH
6050: LD_INT 21
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: LD_INT 36
6059: PUSH
6060: LD_INT 45
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 48
6069: PUSH
6070: LD_INT 58
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: LD_INT 59
6079: PUSH
6080: LD_INT 88
6082: PUSH
6083: EMPTY
6084: LIST
6085: LIST
6086: PUSH
6087: LD_INT 76
6089: PUSH
6090: LD_INT 106
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: LD_INT 93
6099: PUSH
6100: LD_INT 150
6102: PUSH
6103: EMPTY
6104: LIST
6105: LIST
6106: PUSH
6107: LD_INT 92
6109: PUSH
6110: LD_INT 177
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: ST_TO_ADDR
// for i := 1 to 4 do
6126: LD_ADDR_VAR 0 3
6130: PUSH
6131: DOUBLE
6132: LD_INT 1
6134: DEC
6135: ST_TO_ADDR
6136: LD_INT 4
6138: PUSH
6139: FOR_TO
6140: IFFALSE 6282
// begin uc_side := convoySide ;
6142: LD_ADDR_OWVAR 20
6146: PUSH
6147: LD_EXP 35
6151: ST_TO_ADDR
// uc_nation := nation_russian ;
6152: LD_ADDR_OWVAR 21
6156: PUSH
6157: LD_INT 3
6159: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
6160: LD_INT 0
6162: PPUSH
6163: LD_INT 1
6165: PPUSH
6166: LD_INT 4
6168: PPUSH
6169: CALL_OW 12
6173: PPUSH
6174: LD_VAR 0 4
6178: PPUSH
6179: CALL_OW 380
// un := CreateHuman ;
6183: LD_ADDR_VAR 0 5
6187: PUSH
6188: CALL_OW 44
6192: ST_TO_ADDR
// SetDir ( un , 3 ) ;
6193: LD_VAR 0 5
6197: PPUSH
6198: LD_INT 3
6200: PPUSH
6201: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
6205: LD_VAR 0 5
6209: PPUSH
6210: LD_INT 10
6212: PPUSH
6213: LD_INT 0
6215: PPUSH
6216: CALL_OW 49
// SetLives ( un , rand ( 300 , 1000 ) ) ;
6220: LD_VAR 0 5
6224: PPUSH
6225: LD_INT 300
6227: PPUSH
6228: LD_INT 1000
6230: PPUSH
6231: CALL_OW 12
6235: PPUSH
6236: CALL_OW 234
// convoys := Join ( convoys , un ) ;
6240: LD_ADDR_EXP 33
6244: PUSH
6245: LD_EXP 33
6249: PPUSH
6250: LD_VAR 0 5
6254: PPUSH
6255: CALL 46484 0 2
6259: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6260: LD_ADDR_VAR 0 7
6264: PUSH
6265: LD_VAR 0 7
6269: PPUSH
6270: LD_VAR 0 5
6274: PPUSH
6275: CALL 46484 0 2
6279: ST_TO_ADDR
// end ;
6280: GO 6139
6282: POP
6283: POP
// end else
6284: GO 7448
// if wave mod 3 = 0 then
6286: LD_VAR 0 1
6290: PUSH
6291: LD_INT 3
6293: MOD
6294: PUSH
6295: LD_INT 0
6297: EQUAL
6298: IFFALSE 6769
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
6300: LD_ADDR_VAR 0 8
6304: PUSH
6305: LD_INT 133
6307: PUSH
6308: LD_INT 15
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: LD_INT 125
6317: PUSH
6318: LD_INT 34
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 109
6327: PUSH
6328: LD_INT 55
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 99
6337: PUSH
6338: LD_INT 64
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: PUSH
6345: LD_INT 133
6347: PUSH
6348: LD_INT 102
6350: PUSH
6351: EMPTY
6352: LIST
6353: LIST
6354: PUSH
6355: LD_INT 143
6357: PUSH
6358: LD_INT 136
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 127
6367: PUSH
6368: LD_INT 154
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: LD_INT 92
6377: PUSH
6378: LD_INT 152
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 93
6387: PUSH
6388: LD_INT 177
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: ST_TO_ADDR
// for i := 1 to 4 do
6406: LD_ADDR_VAR 0 3
6410: PUSH
6411: DOUBLE
6412: LD_INT 1
6414: DEC
6415: ST_TO_ADDR
6416: LD_INT 4
6418: PUSH
6419: FOR_TO
6420: IFFALSE 6765
// begin uc_side := convoySide ;
6422: LD_ADDR_OWVAR 20
6426: PUSH
6427: LD_EXP 35
6431: ST_TO_ADDR
// uc_nation := nation_russian ;
6432: LD_ADDR_OWVAR 21
6436: PUSH
6437: LD_INT 3
6439: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
6440: LD_INT 0
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: LD_INT 4
6448: PPUSH
6449: CALL_OW 12
6453: PPUSH
6454: LD_VAR 0 4
6458: PPUSH
6459: CALL_OW 380
// un := CreateHuman ;
6463: LD_ADDR_VAR 0 5
6467: PUSH
6468: CALL_OW 44
6472: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
6473: LD_INT 21
6475: PUSH
6476: LD_INT 22
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 2
6488: PPUSH
6489: CALL_OW 12
6493: ARRAY
6494: PPUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_INT 1
6500: PPUSH
6501: LD_INT 42
6503: PUSH
6504: LD_INT 43
6506: PUSH
6507: LD_INT 51
6509: PUSH
6510: LD_INT 44
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 1
6521: PPUSH
6522: LD_INT 4
6524: PPUSH
6525: CALL_OW 12
6529: ARRAY
6530: PPUSH
6531: LD_INT 60
6533: PPUSH
6534: LD_INT 90
6536: PPUSH
6537: CALL_OW 12
6541: PPUSH
6542: CALL 13633 0 5
// veh := CreateVehicle ;
6546: LD_ADDR_VAR 0 6
6550: PUSH
6551: CALL_OW 45
6555: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
6556: LD_VAR 0 6
6560: PPUSH
6561: LD_INT 3
6563: PPUSH
6564: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
6568: LD_VAR 0 6
6572: PPUSH
6573: LD_INT 300
6575: PPUSH
6576: LD_INT 1000
6578: PPUSH
6579: CALL_OW 12
6583: PPUSH
6584: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
6588: LD_VAR 0 6
6592: PPUSH
6593: CALL_OW 264
6597: PUSH
6598: LD_INT 51
6600: EQUAL
6601: IFFALSE 6630
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
6603: LD_VAR 0 6
6607: PPUSH
6608: LD_INT 1
6610: PPUSH
6611: LD_INT 10
6613: PUSH
6614: LD_INT 1
6616: PPUSH
6617: LD_INT 10
6619: PPUSH
6620: CALL_OW 12
6624: MUL
6625: PPUSH
6626: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
6630: LD_INT 10
6632: PPUSH
6633: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
6637: LD_VAR 0 6
6641: PPUSH
6642: LD_INT 7
6644: PPUSH
6645: LD_INT 0
6647: PPUSH
6648: CALL_OW 49
6652: IFFALSE 6630
// PlaceHumanInUnit ( un , veh ) ;
6654: LD_VAR 0 5
6658: PPUSH
6659: LD_VAR 0 6
6663: PPUSH
6664: CALL_OW 52
// convoys := Join ( convoys , un ) ;
6668: LD_ADDR_EXP 33
6672: PUSH
6673: LD_EXP 33
6677: PPUSH
6678: LD_VAR 0 5
6682: PPUSH
6683: CALL 46484 0 2
6687: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
6688: LD_ADDR_VAR 0 7
6692: PUSH
6693: LD_VAR 0 7
6697: PPUSH
6698: LD_VAR 0 5
6702: PPUSH
6703: CALL 46484 0 2
6707: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
6708: LD_ADDR_EXP 33
6712: PUSH
6713: LD_EXP 33
6717: PPUSH
6718: LD_VAR 0 6
6722: PPUSH
6723: CALL 46484 0 2
6727: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
6728: LD_ADDR_VAR 0 7
6732: PUSH
6733: LD_VAR 0 7
6737: PPUSH
6738: LD_VAR 0 6
6742: PPUSH
6743: CALL 46484 0 2
6747: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
6748: LD_VAR 0 5
6752: PPUSH
6753: LD_INT 133
6755: PPUSH
6756: LD_INT 15
6758: PPUSH
6759: CALL_OW 111
// end ;
6763: GO 6419
6765: POP
6766: POP
// end else
6767: GO 7448
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
6769: LD_ADDR_VAR 0 8
6773: PUSH
6774: LD_INT 133
6776: PUSH
6777: LD_INT 15
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 125
6786: PUSH
6787: LD_INT 34
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: LD_INT 109
6796: PUSH
6797: LD_INT 55
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PUSH
6804: LD_INT 99
6806: PUSH
6807: LD_INT 64
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 88
6816: PUSH
6817: LD_INT 70
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: LD_INT 74
6826: PUSH
6827: LD_INT 78
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PUSH
6834: LD_INT 70
6836: PUSH
6837: LD_INT 91
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 80
6846: PUSH
6847: LD_INT 113
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 89
6856: PUSH
6857: LD_INT 133
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 91
6866: PUSH
6867: LD_INT 159
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: LD_INT 93
6876: PUSH
6877: LD_INT 177
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: LIST
6891: LIST
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: ST_TO_ADDR
// for i := 1 to 2 do
6897: LD_ADDR_VAR 0 3
6901: PUSH
6902: DOUBLE
6903: LD_INT 1
6905: DEC
6906: ST_TO_ADDR
6907: LD_INT 2
6909: PUSH
6910: FOR_TO
6911: IFFALSE 7256
// begin uc_side := convoySide ;
6913: LD_ADDR_OWVAR 20
6917: PUSH
6918: LD_EXP 35
6922: ST_TO_ADDR
// uc_nation := nation_russian ;
6923: LD_ADDR_OWVAR 21
6927: PUSH
6928: LD_INT 3
6930: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
6931: LD_INT 0
6933: PPUSH
6934: LD_INT 1
6936: PPUSH
6937: LD_INT 4
6939: PPUSH
6940: CALL_OW 12
6944: PPUSH
6945: LD_VAR 0 4
6949: PPUSH
6950: CALL_OW 380
// un := CreateHuman ;
6954: LD_ADDR_VAR 0 5
6958: PUSH
6959: CALL_OW 44
6963: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
6964: LD_INT 21
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: PUSH
6974: LD_INT 1
6976: PPUSH
6977: LD_INT 2
6979: PPUSH
6980: CALL_OW 12
6984: ARRAY
6985: PPUSH
6986: LD_INT 1
6988: PPUSH
6989: LD_INT 1
6991: PPUSH
6992: LD_INT 42
6994: PUSH
6995: LD_INT 43
6997: PUSH
6998: LD_INT 51
7000: PUSH
7001: LD_INT 44
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 1
7012: PPUSH
7013: LD_INT 4
7015: PPUSH
7016: CALL_OW 12
7020: ARRAY
7021: PPUSH
7022: LD_INT 70
7024: PPUSH
7025: LD_INT 90
7027: PPUSH
7028: CALL_OW 12
7032: PPUSH
7033: CALL 13633 0 5
// veh := CreateVehicle ;
7037: LD_ADDR_VAR 0 6
7041: PUSH
7042: CALL_OW 45
7046: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
7047: LD_VAR 0 6
7051: PPUSH
7052: LD_INT 3
7054: PPUSH
7055: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
7059: LD_VAR 0 6
7063: PPUSH
7064: LD_INT 300
7066: PPUSH
7067: LD_INT 1000
7069: PPUSH
7070: CALL_OW 12
7074: PPUSH
7075: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
7079: LD_VAR 0 6
7083: PPUSH
7084: CALL_OW 264
7088: PUSH
7089: LD_INT 51
7091: EQUAL
7092: IFFALSE 7121
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
7094: LD_VAR 0 6
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 10
7104: PUSH
7105: LD_INT 1
7107: PPUSH
7108: LD_INT 10
7110: PPUSH
7111: CALL_OW 12
7115: MUL
7116: PPUSH
7117: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
7121: LD_INT 10
7123: PPUSH
7124: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
7128: LD_VAR 0 6
7132: PPUSH
7133: LD_INT 7
7135: PPUSH
7136: LD_INT 0
7138: PPUSH
7139: CALL_OW 49
7143: IFFALSE 7121
// PlaceHumanInUnit ( un , veh ) ;
7145: LD_VAR 0 5
7149: PPUSH
7150: LD_VAR 0 6
7154: PPUSH
7155: CALL_OW 52
// convoys := Join ( convoys , un ) ;
7159: LD_ADDR_EXP 33
7163: PUSH
7164: LD_EXP 33
7168: PPUSH
7169: LD_VAR 0 5
7173: PPUSH
7174: CALL 46484 0 2
7178: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
7179: LD_ADDR_VAR 0 7
7183: PUSH
7184: LD_VAR 0 7
7188: PPUSH
7189: LD_VAR 0 5
7193: PPUSH
7194: CALL 46484 0 2
7198: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
7199: LD_ADDR_EXP 33
7203: PUSH
7204: LD_EXP 33
7208: PPUSH
7209: LD_VAR 0 6
7213: PPUSH
7214: CALL 46484 0 2
7218: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
7219: LD_ADDR_VAR 0 7
7223: PUSH
7224: LD_VAR 0 7
7228: PPUSH
7229: LD_VAR 0 6
7233: PPUSH
7234: CALL 46484 0 2
7238: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
7239: LD_VAR 0 5
7243: PPUSH
7244: LD_INT 133
7246: PPUSH
7247: LD_INT 15
7249: PPUSH
7250: CALL_OW 111
// end ;
7254: GO 6910
7256: POP
7257: POP
// for i := 1 to rand ( 3 , 5 ) do
7258: LD_ADDR_VAR 0 3
7262: PUSH
7263: DOUBLE
7264: LD_INT 1
7266: DEC
7267: ST_TO_ADDR
7268: LD_INT 3
7270: PPUSH
7271: LD_INT 5
7273: PPUSH
7274: CALL_OW 12
7278: PUSH
7279: FOR_TO
7280: IFFALSE 7446
// begin uc_side := convoySide ;
7282: LD_ADDR_OWVAR 20
7286: PUSH
7287: LD_EXP 35
7291: ST_TO_ADDR
// uc_nation := nation_russian ;
7292: LD_ADDR_OWVAR 21
7296: PUSH
7297: LD_INT 3
7299: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
7300: LD_INT 0
7302: PPUSH
7303: LD_INT 1
7305: PPUSH
7306: LD_INT 4
7308: PPUSH
7309: CALL_OW 12
7313: PPUSH
7314: LD_VAR 0 4
7318: PPUSH
7319: CALL_OW 380
// un := CreateHuman ;
7323: LD_ADDR_VAR 0 5
7327: PUSH
7328: CALL_OW 44
7332: ST_TO_ADDR
// SetDir ( un , 3 ) ;
7333: LD_VAR 0 5
7337: PPUSH
7338: LD_INT 3
7340: PPUSH
7341: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
7345: LD_INT 35
7347: PPUSH
7348: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
7352: LD_VAR 0 5
7356: PPUSH
7357: LD_INT 7
7359: PPUSH
7360: LD_INT 0
7362: PPUSH
7363: CALL_OW 49
7367: IFFALSE 7345
// SetLives ( un , rand ( 300 , 1000 ) ) ;
7369: LD_VAR 0 5
7373: PPUSH
7374: LD_INT 300
7376: PPUSH
7377: LD_INT 1000
7379: PPUSH
7380: CALL_OW 12
7384: PPUSH
7385: CALL_OW 234
// convoys := Join ( convoys , un ) ;
7389: LD_ADDR_EXP 33
7393: PUSH
7394: LD_EXP 33
7398: PPUSH
7399: LD_VAR 0 5
7403: PPUSH
7404: CALL 46484 0 2
7408: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
7409: LD_ADDR_VAR 0 7
7413: PUSH
7414: LD_VAR 0 7
7418: PPUSH
7419: LD_VAR 0 5
7423: PPUSH
7424: CALL 46484 0 2
7428: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
7429: LD_VAR 0 5
7433: PPUSH
7434: LD_INT 133
7436: PPUSH
7437: LD_INT 15
7439: PPUSH
7440: CALL_OW 111
// end ;
7444: GO 7279
7446: POP
7447: POP
// end ; blockCreateUnitThread := false ;
7448: LD_ADDR_EXP 6
7452: PUSH
7453: LD_INT 0
7455: ST_TO_ADDR
// if not tmp then
7456: LD_VAR 0 7
7460: NOT
7461: IFFALSE 7465
// exit ;
7463: GO 7771
// repeat wait ( 0 0$1 ) ;
7465: LD_INT 35
7467: PPUSH
7468: CALL_OW 67
// for i in tmp do
7472: LD_ADDR_VAR 0 3
7476: PUSH
7477: LD_VAR 0 7
7481: PUSH
7482: FOR_IN
7483: IFFALSE 7762
// begin if IsDead ( i ) then
7485: LD_VAR 0 3
7489: PPUSH
7490: CALL_OW 301
7494: IFFALSE 7514
// tmp := tmp diff i else
7496: LD_ADDR_VAR 0 7
7500: PUSH
7501: LD_VAR 0 7
7505: PUSH
7506: LD_VAR 0 3
7510: DIFF
7511: ST_TO_ADDR
7512: GO 7760
// if IsInArea ( i , southEndArea ) then
7514: LD_VAR 0 3
7518: PPUSH
7519: LD_INT 9
7521: PPUSH
7522: CALL_OW 308
7526: IFFALSE 7679
// begin tmp := tmp diff i ;
7528: LD_ADDR_VAR 0 7
7532: PUSH
7533: LD_VAR 0 7
7537: PUSH
7538: LD_VAR 0 3
7542: DIFF
7543: ST_TO_ADDR
// convoys := convoys diff i ;
7544: LD_ADDR_EXP 33
7548: PUSH
7549: LD_EXP 33
7553: PUSH
7554: LD_VAR 0 3
7558: DIFF
7559: ST_TO_ADDR
// if GetType ( i ) = unit_human then
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 247
7569: PUSH
7570: LD_INT 1
7572: EQUAL
7573: IFFALSE 7594
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
7575: LD_EXP 35
7579: PPUSH
7580: LD_INT 7
7582: PPUSH
7583: CALL 4658 0 1
7587: PPUSH
7588: CALL 4500 0 2
7592: GO 7653
// begin tmp := tmp diff IsInUnit ( i ) ;
7594: LD_ADDR_VAR 0 7
7598: PUSH
7599: LD_VAR 0 7
7603: PUSH
7604: LD_VAR 0 3
7608: PPUSH
7609: CALL_OW 310
7613: DIFF
7614: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
7615: LD_ADDR_EXP 33
7619: PUSH
7620: LD_EXP 33
7624: PUSH
7625: LD_VAR 0 3
7629: PPUSH
7630: CALL_OW 310
7634: DIFF
7635: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
7636: LD_EXP 35
7640: PPUSH
7641: LD_INT 8
7643: PPUSH
7644: CALL 4658 0 1
7648: PPUSH
7649: CALL 4500 0 2
// end ; RemoveUnit ( i ) ;
7653: LD_VAR 0 3
7657: PPUSH
7658: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
7662: LD_ADDR_EXP 5
7666: PUSH
7667: LD_EXP 5
7671: PPUSH
7672: CALL 47845 0 1
7676: ST_TO_ADDR
// end else
7677: GO 7760
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
7679: LD_VAR 0 3
7683: PPUSH
7684: CALL_OW 247
7688: PUSH
7689: LD_INT 2
7691: EQUAL
7692: PUSH
7693: LD_VAR 0 3
7697: PPUSH
7698: CALL_OW 261
7702: PUSH
7703: LD_INT 0
7705: EQUAL
7706: AND
7707: IFFALSE 7743
// begin tmp := tmp diff i ;
7709: LD_ADDR_VAR 0 7
7713: PUSH
7714: LD_VAR 0 7
7718: PUSH
7719: LD_VAR 0 3
7723: DIFF
7724: ST_TO_ADDR
// convoys := convoys diff i ;
7725: LD_ADDR_EXP 33
7729: PUSH
7730: LD_EXP 33
7734: PUSH
7735: LD_VAR 0 3
7739: DIFF
7740: ST_TO_ADDR
// end else
7741: GO 7760
// MoveTo ( i , path , southEndArea ) ;
7743: LD_VAR 0 3
7747: PPUSH
7748: LD_VAR 0 8
7752: PPUSH
7753: LD_INT 9
7755: PPUSH
7756: CALL 7776 0 3
// end ;
7760: GO 7482
7762: POP
7763: POP
// until not tmp ;
7764: LD_VAR 0 7
7768: NOT
7769: IFFALSE 7465
// end ;
7771: LD_VAR 0 2
7775: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
7776: LD_INT 0
7778: PPUSH
7779: PPUSH
7780: PPUSH
7781: PPUSH
7782: PPUSH
7783: PPUSH
// if not unit then
7784: LD_VAR 0 1
7788: NOT
7789: IFFALSE 7793
// exit ;
7791: GO 8354
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
7793: LD_ADDR_VAR 0 9
7797: PUSH
7798: LD_INT 29
7800: PUSH
7801: LD_INT 91
7803: PUSH
7804: LD_INT 49
7806: PUSH
7807: LD_INT 51
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: ST_TO_ADDR
// if IsOk ( unit ) then
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 302
7825: IFFALSE 8354
// begin tag := GetTag ( unit ) + 1 ;
7827: LD_ADDR_VAR 0 6
7831: PUSH
7832: LD_VAR 0 1
7836: PPUSH
7837: CALL_OW 110
7841: PUSH
7842: LD_INT 1
7844: PLUS
7845: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
7846: LD_ADDR_VAR 0 5
7850: PUSH
7851: LD_VAR 0 1
7855: PPUSH
7856: CALL_OW 250
7860: PPUSH
7861: LD_VAR 0 1
7865: PPUSH
7866: CALL_OW 251
7870: PPUSH
7871: LD_INT 3
7873: PPUSH
7874: CALL 48830 0 3
7878: ST_TO_ADDR
// type := GetType ( unit ) ;
7879: LD_ADDR_VAR 0 7
7883: PUSH
7884: LD_VAR 0 1
7888: PPUSH
7889: CALL_OW 247
7893: ST_TO_ADDR
// if type = unit_human then
7894: LD_VAR 0 7
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7992
// begin vehicle := IsInUnit ( unit ) ;
7904: LD_ADDR_VAR 0 8
7908: PUSH
7909: LD_VAR 0 1
7913: PPUSH
7914: CALL_OW 310
7918: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
7919: LD_VAR 0 8
7923: PUSH
7924: LD_VAR 0 8
7928: PPUSH
7929: CALL_OW 261
7933: PUSH
7934: LD_INT 0
7936: EQUAL
7937: AND
7938: IFFALSE 7990
// begin ComExitVehicle ( unit ) ;
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
7949: LD_VAR 0 1
7953: PPUSH
7954: LD_VAR 0 2
7958: PUSH
7959: LD_VAR 0 6
7963: ARRAY
7964: PUSH
7965: LD_INT 1
7967: ARRAY
7968: PPUSH
7969: LD_VAR 0 2
7973: PUSH
7974: LD_VAR 0 6
7978: ARRAY
7979: PUSH
7980: LD_INT 2
7982: ARRAY
7983: PPUSH
7984: CALL_OW 171
// exit ;
7988: GO 8354
// end ; end else
7990: GO 8067
// begin if GetFuel ( unit ) = 0 then
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 261
8001: PUSH
8002: LD_INT 0
8004: EQUAL
8005: IFFALSE 8067
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: CALL_OW 311
8016: PPUSH
8017: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
8021: LD_VAR 0 1
8025: PPUSH
8026: CALL_OW 311
8030: PPUSH
8031: LD_VAR 0 2
8035: PUSH
8036: LD_VAR 0 6
8040: ARRAY
8041: PUSH
8042: LD_INT 1
8044: ARRAY
8045: PPUSH
8046: LD_VAR 0 2
8050: PUSH
8051: LD_VAR 0 6
8055: ARRAY
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PPUSH
8061: CALL_OW 171
// exit ;
8065: GO 8354
// end ; end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
8067: LD_VAR 0 7
8071: PUSH
8072: LD_INT 2
8074: EQUAL
8075: PUSH
8076: LD_VAR 0 5
8080: PUSH
8081: LD_INT 3
8083: GREATER
8084: AND
8085: PUSH
8086: LD_VAR 0 1
8090: PPUSH
8091: CALL_OW 264
8095: PUSH
8096: LD_VAR 0 9
8100: IN
8101: NOT
8102: AND
8103: IFFALSE 8142
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
8105: LD_VAR 0 1
8109: PPUSH
8110: LD_VAR 0 5
8114: PUSH
8115: LD_INT 1
8117: ARRAY
8118: PUSH
8119: LD_INT 1
8121: ARRAY
8122: PPUSH
8123: LD_VAR 0 5
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PUSH
8132: LD_INT 2
8134: ARRAY
8135: PPUSH
8136: CALL_OW 116
8140: GO 8354
// if path > tag then
8142: LD_VAR 0 2
8146: PUSH
8147: LD_VAR 0 6
8151: GREATER
8152: IFFALSE 8323
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
8154: LD_VAR 0 1
8158: PPUSH
8159: LD_VAR 0 2
8163: PUSH
8164: LD_VAR 0 6
8168: ARRAY
8169: PUSH
8170: LD_INT 1
8172: ARRAY
8173: PPUSH
8174: LD_VAR 0 2
8178: PUSH
8179: LD_VAR 0 6
8183: ARRAY
8184: PUSH
8185: LD_INT 2
8187: ARRAY
8188: PPUSH
8189: CALL_OW 297
8193: PUSH
8194: LD_INT 6
8196: GREATER
8197: IFFALSE 8307
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 257
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: LD_INT 3
8214: PUSH
8215: LD_INT 4
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: IN
8223: IFFALSE 8266
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
8225: LD_VAR 0 1
8229: PPUSH
8230: LD_VAR 0 2
8234: PUSH
8235: LD_VAR 0 6
8239: ARRAY
8240: PUSH
8241: LD_INT 1
8243: ARRAY
8244: PPUSH
8245: LD_VAR 0 2
8249: PUSH
8250: LD_VAR 0 6
8254: ARRAY
8255: PUSH
8256: LD_INT 2
8258: ARRAY
8259: PPUSH
8260: CALL_OW 111
8264: GO 8305
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
8266: LD_VAR 0 1
8270: PPUSH
8271: LD_VAR 0 2
8275: PUSH
8276: LD_VAR 0 6
8280: ARRAY
8281: PUSH
8282: LD_INT 1
8284: ARRAY
8285: PPUSH
8286: LD_VAR 0 2
8290: PUSH
8291: LD_VAR 0 6
8295: ARRAY
8296: PUSH
8297: LD_INT 2
8299: ARRAY
8300: PPUSH
8301: CALL_OW 114
8305: GO 8321
// SetTag ( unit , tag ) ;
8307: LD_VAR 0 1
8311: PPUSH
8312: LD_VAR 0 6
8316: PPUSH
8317: CALL_OW 109
// end else
8321: GO 8354
// if not IsInArea ( unit , area ) then
8323: LD_VAR 0 1
8327: PPUSH
8328: LD_VAR 0 3
8332: PPUSH
8333: CALL_OW 308
8337: NOT
8338: IFFALSE 8354
// ComMoveToArea ( unit , area ) ;
8340: LD_VAR 0 1
8344: PPUSH
8345: LD_VAR 0 3
8349: PPUSH
8350: CALL_OW 113
// end ; end ; end_of_file
8354: LD_VAR 0 4
8358: RET
// every 0 0$20 trigger game do
8359: LD_EXP 2
8363: IFFALSE 8404
8365: GO 8367
8367: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
8368: LD_INT 11
8370: PUSH
8371: LD_INT 12
8373: PUSH
8374: LD_INT 13
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: PPUSH
8382: LD_EXP 24
8386: PUSH
8387: LD_INT 2
8389: ARRAY
8390: PPUSH
8391: LD_EXP 24
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: CALL 8405 0 3
8404: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
8405: LD_INT 0
8407: PPUSH
8408: PPUSH
8409: PPUSH
// if not areas then
8410: LD_VAR 0 1
8414: NOT
8415: IFFALSE 8419
// exit ;
8417: GO 8625
// x := 5 ;
8419: LD_ADDR_VAR 0 6
8423: PUSH
8424: LD_INT 5
8426: ST_TO_ADDR
// repeat wait ( time ) ;
8427: LD_VAR 0 2
8431: PPUSH
8432: CALL_OW 67
// for i in areas do
8436: LD_ADDR_VAR 0 5
8440: PUSH
8441: LD_VAR 0 1
8445: PUSH
8446: FOR_IN
8447: IFFALSE 8536
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
8449: LD_VAR 0 5
8453: PPUSH
8454: LD_INT 1
8456: PPUSH
8457: CALL_OW 287
8461: PUSH
8462: LD_INT 15
8464: PUSH
8465: LD_INT 12
8467: PUSH
8468: LD_INT 10
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: PUSH
8476: LD_OWVAR 67
8480: ARRAY
8481: LESS
8482: IFFALSE 8534
// begin wait ( 0 0$5 * Difficulty ) ;
8484: LD_INT 175
8486: PUSH
8487: LD_OWVAR 67
8491: MUL
8492: PPUSH
8493: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
8497: LD_VAR 0 6
8501: PPUSH
8502: LD_VAR 0 5
8506: PPUSH
8507: LD_INT 1
8509: PPUSH
8510: CALL_OW 55
// amount := amount - ( x * 10 ) ;
8514: LD_ADDR_VAR 0 3
8518: PUSH
8519: LD_VAR 0 3
8523: PUSH
8524: LD_VAR 0 6
8528: PUSH
8529: LD_INT 10
8531: MUL
8532: MINUS
8533: ST_TO_ADDR
// end ; end ;
8534: GO 8446
8536: POP
8537: POP
// time := time + ( 0 0$2 * Difficulty ) ;
8538: LD_ADDR_VAR 0 2
8542: PUSH
8543: LD_VAR 0 2
8547: PUSH
8548: LD_INT 70
8550: PUSH
8551: LD_OWVAR 67
8555: MUL
8556: PLUS
8557: ST_TO_ADDR
// x := x - 1 ;
8558: LD_ADDR_VAR 0 6
8562: PUSH
8563: LD_VAR 0 6
8567: PUSH
8568: LD_INT 1
8570: MINUS
8571: ST_TO_ADDR
// if x = 0 then
8572: LD_VAR 0 6
8576: PUSH
8577: LD_INT 0
8579: EQUAL
8580: IFFALSE 8590
// x := 5 ;
8582: LD_ADDR_VAR 0 6
8586: PUSH
8587: LD_INT 5
8589: ST_TO_ADDR
// if time > 2 2$00 then
8590: LD_VAR 0 2
8594: PUSH
8595: LD_INT 4200
8597: GREATER
8598: IFFALSE 8608
// time := 0 0$40 ;
8600: LD_ADDR_VAR 0 2
8604: PUSH
8605: LD_INT 1400
8607: ST_TO_ADDR
// until not game or amount <= 0 ;
8608: LD_EXP 2
8612: NOT
8613: PUSH
8614: LD_VAR 0 3
8618: PUSH
8619: LD_INT 0
8621: LESSEQUAL
8622: OR
8623: IFFALSE 8427
// end ; end_of_file
8625: LD_VAR 0 4
8629: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
8630: LD_VAR 0 1
8634: PUSH
8635: LD_INT 200
8637: DOUBLE
8638: GREATEREQUAL
8639: IFFALSE 8647
8641: LD_INT 299
8643: DOUBLE
8644: LESSEQUAL
8645: IFTRUE 8649
8647: GO 8681
8649: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
8650: LD_VAR 0 1
8654: PPUSH
8655: LD_VAR 0 2
8659: PPUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: LD_VAR 0 4
8669: PPUSH
8670: LD_VAR 0 5
8674: PPUSH
8675: CALL 67763 0 5
8679: GO 8758
8681: LD_INT 300
8683: DOUBLE
8684: GREATEREQUAL
8685: IFFALSE 8693
8687: LD_INT 399
8689: DOUBLE
8690: LESSEQUAL
8691: IFTRUE 8695
8693: GO 8757
8695: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
8696: LD_VAR 0 1
8700: PPUSH
8701: LD_VAR 0 2
8705: PPUSH
8706: LD_VAR 0 3
8710: PPUSH
8711: LD_VAR 0 4
8715: PPUSH
8716: LD_VAR 0 5
8720: PPUSH
8721: LD_VAR 0 6
8725: PPUSH
8726: LD_VAR 0 7
8730: PPUSH
8731: LD_VAR 0 8
8735: PPUSH
8736: LD_VAR 0 9
8740: PPUSH
8741: LD_VAR 0 10
8745: PPUSH
8746: LD_VAR 0 11
8750: PPUSH
8751: CALL 64088 0 11
8755: GO 8758
8757: POP
// end ;
8758: PPOPN 11
8760: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
8761: LD_VAR 0 1
8765: PPUSH
8766: LD_VAR 0 2
8770: PPUSH
8771: LD_VAR 0 3
8775: PPUSH
8776: LD_VAR 0 4
8780: PPUSH
8781: LD_VAR 0 5
8785: PPUSH
8786: CALL 67499 0 5
// end ; end_of_file
8790: PPOPN 5
8792: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
8793: LD_INT 0
8795: PPUSH
8796: PPUSH
// if exist_mode then
8797: LD_VAR 0 2
8801: IFFALSE 8826
// unit := CreateCharacter ( prefix & ident ) else
8803: LD_ADDR_VAR 0 5
8807: PUSH
8808: LD_VAR 0 3
8812: PUSH
8813: LD_VAR 0 1
8817: STR
8818: PPUSH
8819: CALL_OW 34
8823: ST_TO_ADDR
8824: GO 8841
// unit := NewCharacter ( ident ) ;
8826: LD_ADDR_VAR 0 5
8830: PUSH
8831: LD_VAR 0 1
8835: PPUSH
8836: CALL_OW 25
8840: ST_TO_ADDR
// result := unit ;
8841: LD_ADDR_VAR 0 4
8845: PUSH
8846: LD_VAR 0 5
8850: ST_TO_ADDR
// end ;
8851: LD_VAR 0 4
8855: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
8856: LD_INT 0
8858: PPUSH
8859: PPUSH
// if not side or not nation then
8860: LD_VAR 0 1
8864: NOT
8865: PUSH
8866: LD_VAR 0 2
8870: NOT
8871: OR
8872: IFFALSE 8876
// exit ;
8874: GO 9644
// case nation of nation_american :
8876: LD_VAR 0 2
8880: PUSH
8881: LD_INT 1
8883: DOUBLE
8884: EQUAL
8885: IFTRUE 8889
8887: GO 9103
8889: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
8890: LD_ADDR_VAR 0 4
8894: PUSH
8895: LD_INT 35
8897: PUSH
8898: LD_INT 45
8900: PUSH
8901: LD_INT 46
8903: PUSH
8904: LD_INT 47
8906: PUSH
8907: LD_INT 82
8909: PUSH
8910: LD_INT 83
8912: PUSH
8913: LD_INT 84
8915: PUSH
8916: LD_INT 85
8918: PUSH
8919: LD_INT 86
8921: PUSH
8922: LD_INT 1
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: LD_INT 6
8930: PUSH
8931: LD_INT 15
8933: PUSH
8934: LD_INT 16
8936: PUSH
8937: LD_INT 7
8939: PUSH
8940: LD_INT 12
8942: PUSH
8943: LD_INT 13
8945: PUSH
8946: LD_INT 10
8948: PUSH
8949: LD_INT 14
8951: PUSH
8952: LD_INT 20
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 22
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 32
8966: PUSH
8967: LD_INT 27
8969: PUSH
8970: LD_INT 36
8972: PUSH
8973: LD_INT 69
8975: PUSH
8976: LD_INT 39
8978: PUSH
8979: LD_INT 34
8981: PUSH
8982: LD_INT 40
8984: PUSH
8985: LD_INT 48
8987: PUSH
8988: LD_INT 49
8990: PUSH
8991: LD_INT 50
8993: PUSH
8994: LD_INT 51
8996: PUSH
8997: LD_INT 52
8999: PUSH
9000: LD_INT 53
9002: PUSH
9003: LD_INT 54
9005: PUSH
9006: LD_INT 55
9008: PUSH
9009: LD_INT 56
9011: PUSH
9012: LD_INT 57
9014: PUSH
9015: LD_INT 58
9017: PUSH
9018: LD_INT 59
9020: PUSH
9021: LD_INT 60
9023: PUSH
9024: LD_INT 61
9026: PUSH
9027: LD_INT 62
9029: PUSH
9030: LD_INT 80
9032: PUSH
9033: LD_INT 82
9035: PUSH
9036: LD_INT 83
9038: PUSH
9039: LD_INT 84
9041: PUSH
9042: LD_INT 85
9044: PUSH
9045: LD_INT 86
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: ST_TO_ADDR
9101: GO 9568
9103: LD_INT 2
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9337
9111: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9112: LD_ADDR_VAR 0 4
9116: PUSH
9117: LD_INT 35
9119: PUSH
9120: LD_INT 45
9122: PUSH
9123: LD_INT 46
9125: PUSH
9126: LD_INT 47
9128: PUSH
9129: LD_INT 82
9131: PUSH
9132: LD_INT 83
9134: PUSH
9135: LD_INT 84
9137: PUSH
9138: LD_INT 85
9140: PUSH
9141: LD_INT 87
9143: PUSH
9144: LD_INT 70
9146: PUSH
9147: LD_INT 1
9149: PUSH
9150: LD_INT 11
9152: PUSH
9153: LD_INT 3
9155: PUSH
9156: LD_INT 4
9158: PUSH
9159: LD_INT 5
9161: PUSH
9162: LD_INT 6
9164: PUSH
9165: LD_INT 15
9167: PUSH
9168: LD_INT 18
9170: PUSH
9171: LD_INT 7
9173: PUSH
9174: LD_INT 17
9176: PUSH
9177: LD_INT 8
9179: PUSH
9180: LD_INT 20
9182: PUSH
9183: LD_INT 21
9185: PUSH
9186: LD_INT 22
9188: PUSH
9189: LD_INT 72
9191: PUSH
9192: LD_INT 26
9194: PUSH
9195: LD_INT 69
9197: PUSH
9198: LD_INT 39
9200: PUSH
9201: LD_INT 40
9203: PUSH
9204: LD_INT 41
9206: PUSH
9207: LD_INT 42
9209: PUSH
9210: LD_INT 43
9212: PUSH
9213: LD_INT 48
9215: PUSH
9216: LD_INT 49
9218: PUSH
9219: LD_INT 50
9221: PUSH
9222: LD_INT 51
9224: PUSH
9225: LD_INT 52
9227: PUSH
9228: LD_INT 53
9230: PUSH
9231: LD_INT 54
9233: PUSH
9234: LD_INT 55
9236: PUSH
9237: LD_INT 56
9239: PUSH
9240: LD_INT 60
9242: PUSH
9243: LD_INT 61
9245: PUSH
9246: LD_INT 62
9248: PUSH
9249: LD_INT 66
9251: PUSH
9252: LD_INT 67
9254: PUSH
9255: LD_INT 68
9257: PUSH
9258: LD_INT 81
9260: PUSH
9261: LD_INT 82
9263: PUSH
9264: LD_INT 83
9266: PUSH
9267: LD_INT 84
9269: PUSH
9270: LD_INT 85
9272: PUSH
9273: LD_INT 87
9275: PUSH
9276: LD_INT 88
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: ST_TO_ADDR
9335: GO 9568
9337: LD_INT 3
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9567
9345: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9346: LD_ADDR_VAR 0 4
9350: PUSH
9351: LD_INT 46
9353: PUSH
9354: LD_INT 47
9356: PUSH
9357: LD_INT 1
9359: PUSH
9360: LD_INT 2
9362: PUSH
9363: LD_INT 82
9365: PUSH
9366: LD_INT 83
9368: PUSH
9369: LD_INT 84
9371: PUSH
9372: LD_INT 85
9374: PUSH
9375: LD_INT 86
9377: PUSH
9378: LD_INT 11
9380: PUSH
9381: LD_INT 9
9383: PUSH
9384: LD_INT 20
9386: PUSH
9387: LD_INT 19
9389: PUSH
9390: LD_INT 21
9392: PUSH
9393: LD_INT 24
9395: PUSH
9396: LD_INT 22
9398: PUSH
9399: LD_INT 25
9401: PUSH
9402: LD_INT 28
9404: PUSH
9405: LD_INT 29
9407: PUSH
9408: LD_INT 30
9410: PUSH
9411: LD_INT 31
9413: PUSH
9414: LD_INT 37
9416: PUSH
9417: LD_INT 38
9419: PUSH
9420: LD_INT 32
9422: PUSH
9423: LD_INT 27
9425: PUSH
9426: LD_INT 33
9428: PUSH
9429: LD_INT 69
9431: PUSH
9432: LD_INT 39
9434: PUSH
9435: LD_INT 34
9437: PUSH
9438: LD_INT 40
9440: PUSH
9441: LD_INT 71
9443: PUSH
9444: LD_INT 23
9446: PUSH
9447: LD_INT 44
9449: PUSH
9450: LD_INT 48
9452: PUSH
9453: LD_INT 49
9455: PUSH
9456: LD_INT 50
9458: PUSH
9459: LD_INT 51
9461: PUSH
9462: LD_INT 52
9464: PUSH
9465: LD_INT 53
9467: PUSH
9468: LD_INT 54
9470: PUSH
9471: LD_INT 55
9473: PUSH
9474: LD_INT 56
9476: PUSH
9477: LD_INT 57
9479: PUSH
9480: LD_INT 58
9482: PUSH
9483: LD_INT 59
9485: PUSH
9486: LD_INT 63
9488: PUSH
9489: LD_INT 64
9491: PUSH
9492: LD_INT 65
9494: PUSH
9495: LD_INT 82
9497: PUSH
9498: LD_INT 83
9500: PUSH
9501: LD_INT 84
9503: PUSH
9504: LD_INT 85
9506: PUSH
9507: LD_INT 86
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: ST_TO_ADDR
9565: GO 9568
9567: POP
// if state > - 1 and state < 3 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_INT 1
9575: NEG
9576: GREATER
9577: PUSH
9578: LD_VAR 0 3
9582: PUSH
9583: LD_INT 3
9585: LESS
9586: AND
9587: IFFALSE 9644
// for i in result do
9589: LD_ADDR_VAR 0 5
9593: PUSH
9594: LD_VAR 0 4
9598: PUSH
9599: FOR_IN
9600: IFFALSE 9642
// if GetTech ( i , side ) <> state then
9602: LD_VAR 0 5
9606: PPUSH
9607: LD_VAR 0 1
9611: PPUSH
9612: CALL_OW 321
9616: PUSH
9617: LD_VAR 0 3
9621: NONEQUAL
9622: IFFALSE 9640
// result := result diff i ;
9624: LD_ADDR_VAR 0 4
9628: PUSH
9629: LD_VAR 0 4
9633: PUSH
9634: LD_VAR 0 5
9638: DIFF
9639: ST_TO_ADDR
9640: GO 9599
9642: POP
9643: POP
// end ;
9644: LD_VAR 0 4
9648: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
9649: LD_INT 0
9651: PPUSH
9652: PPUSH
9653: PPUSH
// result := true ;
9654: LD_ADDR_VAR 0 3
9658: PUSH
9659: LD_INT 1
9661: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
9662: LD_ADDR_VAR 0 5
9666: PUSH
9667: LD_VAR 0 2
9671: PPUSH
9672: CALL_OW 480
9676: ST_TO_ADDR
// if not tmp then
9677: LD_VAR 0 5
9681: NOT
9682: IFFALSE 9686
// exit ;
9684: GO 9735
// for i in tmp do
9686: LD_ADDR_VAR 0 4
9690: PUSH
9691: LD_VAR 0 5
9695: PUSH
9696: FOR_IN
9697: IFFALSE 9733
// if GetTech ( i , side ) <> state_researched then
9699: LD_VAR 0 4
9703: PPUSH
9704: LD_VAR 0 1
9708: PPUSH
9709: CALL_OW 321
9713: PUSH
9714: LD_INT 2
9716: NONEQUAL
9717: IFFALSE 9731
// begin result := false ;
9719: LD_ADDR_VAR 0 3
9723: PUSH
9724: LD_INT 0
9726: ST_TO_ADDR
// exit ;
9727: POP
9728: POP
9729: GO 9735
// end ;
9731: GO 9696
9733: POP
9734: POP
// end ;
9735: LD_VAR 0 3
9739: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
9740: LD_INT 0
9742: PPUSH
9743: PPUSH
9744: PPUSH
9745: PPUSH
9746: PPUSH
9747: PPUSH
9748: PPUSH
9749: PPUSH
9750: PPUSH
9751: PPUSH
9752: PPUSH
9753: PPUSH
9754: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
9755: LD_VAR 0 1
9759: NOT
9760: PUSH
9761: LD_VAR 0 1
9765: PPUSH
9766: CALL_OW 257
9770: PUSH
9771: LD_INT 9
9773: NONEQUAL
9774: OR
9775: IFFALSE 9779
// exit ;
9777: GO 10352
// side := GetSide ( unit ) ;
9779: LD_ADDR_VAR 0 9
9783: PUSH
9784: LD_VAR 0 1
9788: PPUSH
9789: CALL_OW 255
9793: ST_TO_ADDR
// tech_space := tech_spacanom ;
9794: LD_ADDR_VAR 0 12
9798: PUSH
9799: LD_INT 29
9801: ST_TO_ADDR
// tech_time := tech_taurad ;
9802: LD_ADDR_VAR 0 13
9806: PUSH
9807: LD_INT 28
9809: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
9810: LD_ADDR_VAR 0 11
9814: PUSH
9815: LD_VAR 0 1
9819: PPUSH
9820: CALL_OW 310
9824: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
9825: LD_VAR 0 11
9829: PPUSH
9830: CALL_OW 247
9834: PUSH
9835: LD_INT 2
9837: EQUAL
9838: IFFALSE 9842
// exit ;
9840: GO 10352
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
9842: LD_ADDR_VAR 0 8
9846: PUSH
9847: LD_INT 81
9849: PUSH
9850: LD_VAR 0 9
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: PUSH
9859: LD_INT 3
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 3
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PPUSH
9880: CALL_OW 69
9884: ST_TO_ADDR
// if not tmp then
9885: LD_VAR 0 8
9889: NOT
9890: IFFALSE 9894
// exit ;
9892: GO 10352
// if in_unit then
9894: LD_VAR 0 11
9898: IFFALSE 9922
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
9900: LD_ADDR_VAR 0 10
9904: PUSH
9905: LD_VAR 0 8
9909: PPUSH
9910: LD_VAR 0 11
9914: PPUSH
9915: CALL_OW 74
9919: ST_TO_ADDR
9920: GO 9942
// enemy := NearestUnitToUnit ( tmp , unit ) ;
9922: LD_ADDR_VAR 0 10
9926: PUSH
9927: LD_VAR 0 8
9931: PPUSH
9932: LD_VAR 0 1
9936: PPUSH
9937: CALL_OW 74
9941: ST_TO_ADDR
// if not enemy then
9942: LD_VAR 0 10
9946: NOT
9947: IFFALSE 9951
// exit ;
9949: GO 10352
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
9951: LD_VAR 0 11
9955: PUSH
9956: LD_VAR 0 11
9960: PPUSH
9961: LD_VAR 0 10
9965: PPUSH
9966: CALL_OW 296
9970: PUSH
9971: LD_INT 13
9973: GREATER
9974: AND
9975: PUSH
9976: LD_VAR 0 1
9980: PPUSH
9981: LD_VAR 0 10
9985: PPUSH
9986: CALL_OW 296
9990: PUSH
9991: LD_INT 12
9993: GREATER
9994: OR
9995: IFFALSE 9999
// exit ;
9997: GO 10352
// missile := [ 1 ] ;
9999: LD_ADDR_VAR 0 14
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10010: LD_VAR 0 9
10014: PPUSH
10015: LD_VAR 0 12
10019: PPUSH
10020: CALL_OW 325
10024: IFFALSE 10053
// missile := Replace ( missile , missile + 1 , 2 ) ;
10026: LD_ADDR_VAR 0 14
10030: PUSH
10031: LD_VAR 0 14
10035: PPUSH
10036: LD_VAR 0 14
10040: PUSH
10041: LD_INT 1
10043: PLUS
10044: PPUSH
10045: LD_INT 2
10047: PPUSH
10048: CALL_OW 1
10052: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10053: LD_VAR 0 9
10057: PPUSH
10058: LD_VAR 0 13
10062: PPUSH
10063: CALL_OW 325
10067: PUSH
10068: LD_VAR 0 10
10072: PPUSH
10073: CALL_OW 255
10077: PPUSH
10078: LD_VAR 0 13
10082: PPUSH
10083: CALL_OW 325
10087: NOT
10088: AND
10089: IFFALSE 10118
// missile := Replace ( missile , missile + 1 , 3 ) ;
10091: LD_ADDR_VAR 0 14
10095: PUSH
10096: LD_VAR 0 14
10100: PPUSH
10101: LD_VAR 0 14
10105: PUSH
10106: LD_INT 1
10108: PLUS
10109: PPUSH
10110: LD_INT 3
10112: PPUSH
10113: CALL_OW 1
10117: ST_TO_ADDR
// if missile < 2 then
10118: LD_VAR 0 14
10122: PUSH
10123: LD_INT 2
10125: LESS
10126: IFFALSE 10130
// exit ;
10128: GO 10352
// x := GetX ( enemy ) ;
10130: LD_ADDR_VAR 0 4
10134: PUSH
10135: LD_VAR 0 10
10139: PPUSH
10140: CALL_OW 250
10144: ST_TO_ADDR
// y := GetY ( enemy ) ;
10145: LD_ADDR_VAR 0 5
10149: PUSH
10150: LD_VAR 0 10
10154: PPUSH
10155: CALL_OW 251
10159: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10160: LD_ADDR_VAR 0 6
10164: PUSH
10165: LD_VAR 0 4
10169: PUSH
10170: LD_INT 1
10172: NEG
10173: PPUSH
10174: LD_INT 1
10176: PPUSH
10177: CALL_OW 12
10181: PLUS
10182: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10183: LD_ADDR_VAR 0 7
10187: PUSH
10188: LD_VAR 0 5
10192: PUSH
10193: LD_INT 1
10195: NEG
10196: PPUSH
10197: LD_INT 1
10199: PPUSH
10200: CALL_OW 12
10204: PLUS
10205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10206: LD_VAR 0 6
10210: PPUSH
10211: LD_VAR 0 7
10215: PPUSH
10216: CALL_OW 488
10220: NOT
10221: IFFALSE 10243
// begin _x := x ;
10223: LD_ADDR_VAR 0 6
10227: PUSH
10228: LD_VAR 0 4
10232: ST_TO_ADDR
// _y := y ;
10233: LD_ADDR_VAR 0 7
10237: PUSH
10238: LD_VAR 0 5
10242: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10243: LD_ADDR_VAR 0 3
10247: PUSH
10248: LD_INT 1
10250: PPUSH
10251: LD_VAR 0 14
10255: PPUSH
10256: CALL_OW 12
10260: ST_TO_ADDR
// case i of 1 :
10261: LD_VAR 0 3
10265: PUSH
10266: LD_INT 1
10268: DOUBLE
10269: EQUAL
10270: IFTRUE 10274
10272: GO 10291
10274: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10275: LD_VAR 0 1
10279: PPUSH
10280: LD_VAR 0 10
10284: PPUSH
10285: CALL_OW 115
10289: GO 10352
10291: LD_INT 2
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10321
10299: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10300: LD_VAR 0 1
10304: PPUSH
10305: LD_VAR 0 6
10309: PPUSH
10310: LD_VAR 0 7
10314: PPUSH
10315: CALL_OW 153
10319: GO 10352
10321: LD_INT 3
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10351
10329: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10330: LD_VAR 0 1
10334: PPUSH
10335: LD_VAR 0 6
10339: PPUSH
10340: LD_VAR 0 7
10344: PPUSH
10345: CALL_OW 154
10349: GO 10352
10351: POP
// end ;
10352: LD_VAR 0 2
10356: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10357: LD_INT 0
10359: PPUSH
10360: PPUSH
10361: PPUSH
10362: PPUSH
10363: PPUSH
10364: PPUSH
// if not unit or not building then
10365: LD_VAR 0 1
10369: NOT
10370: PUSH
10371: LD_VAR 0 2
10375: NOT
10376: OR
10377: IFFALSE 10381
// exit ;
10379: GO 10539
// x := GetX ( building ) ;
10381: LD_ADDR_VAR 0 5
10385: PUSH
10386: LD_VAR 0 2
10390: PPUSH
10391: CALL_OW 250
10395: ST_TO_ADDR
// y := GetY ( building ) ;
10396: LD_ADDR_VAR 0 6
10400: PUSH
10401: LD_VAR 0 2
10405: PPUSH
10406: CALL_OW 251
10410: ST_TO_ADDR
// for i = 0 to 5 do
10411: LD_ADDR_VAR 0 4
10415: PUSH
10416: DOUBLE
10417: LD_INT 0
10419: DEC
10420: ST_TO_ADDR
10421: LD_INT 5
10423: PUSH
10424: FOR_TO
10425: IFFALSE 10537
// begin _x := ShiftX ( x , i , 3 ) ;
10427: LD_ADDR_VAR 0 7
10431: PUSH
10432: LD_VAR 0 5
10436: PPUSH
10437: LD_VAR 0 4
10441: PPUSH
10442: LD_INT 3
10444: PPUSH
10445: CALL_OW 272
10449: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10450: LD_ADDR_VAR 0 8
10454: PUSH
10455: LD_VAR 0 6
10459: PPUSH
10460: LD_VAR 0 4
10464: PPUSH
10465: LD_INT 3
10467: PPUSH
10468: CALL_OW 273
10472: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10473: LD_VAR 0 7
10477: PPUSH
10478: LD_VAR 0 8
10482: PPUSH
10483: CALL_OW 488
10487: NOT
10488: IFFALSE 10492
// continue ;
10490: GO 10424
// if HexInfo ( _x , _y ) = 0 then
10492: LD_VAR 0 7
10496: PPUSH
10497: LD_VAR 0 8
10501: PPUSH
10502: CALL_OW 428
10506: PUSH
10507: LD_INT 0
10509: EQUAL
10510: IFFALSE 10535
// begin ComMoveXY ( unit , _x , _y ) ;
10512: LD_VAR 0 1
10516: PPUSH
10517: LD_VAR 0 7
10521: PPUSH
10522: LD_VAR 0 8
10526: PPUSH
10527: CALL_OW 111
// exit ;
10531: POP
10532: POP
10533: GO 10539
// end ; end ;
10535: GO 10424
10537: POP
10538: POP
// end ;
10539: LD_VAR 0 3
10543: RET
// export function ScanBase ( side , base_area ) ; begin
10544: LD_INT 0
10546: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
10547: LD_ADDR_VAR 0 3
10551: PUSH
10552: LD_VAR 0 2
10556: PPUSH
10557: LD_INT 81
10559: PUSH
10560: LD_VAR 0 1
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: PPUSH
10569: CALL_OW 70
10573: ST_TO_ADDR
// end ;
10574: LD_VAR 0 3
10578: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
10579: LD_INT 0
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
// result := false ;
10585: LD_ADDR_VAR 0 2
10589: PUSH
10590: LD_INT 0
10592: ST_TO_ADDR
// side := GetSide ( unit ) ;
10593: LD_ADDR_VAR 0 3
10597: PUSH
10598: LD_VAR 0 1
10602: PPUSH
10603: CALL_OW 255
10607: ST_TO_ADDR
// nat := GetNation ( unit ) ;
10608: LD_ADDR_VAR 0 4
10612: PUSH
10613: LD_VAR 0 1
10617: PPUSH
10618: CALL_OW 248
10622: ST_TO_ADDR
// case nat of 1 :
10623: LD_VAR 0 4
10627: PUSH
10628: LD_INT 1
10630: DOUBLE
10631: EQUAL
10632: IFTRUE 10636
10634: GO 10647
10636: POP
// tech := tech_lassight ; 2 :
10637: LD_ADDR_VAR 0 5
10641: PUSH
10642: LD_INT 12
10644: ST_TO_ADDR
10645: GO 10686
10647: LD_INT 2
10649: DOUBLE
10650: EQUAL
10651: IFTRUE 10655
10653: GO 10666
10655: POP
// tech := tech_mortar ; 3 :
10656: LD_ADDR_VAR 0 5
10660: PUSH
10661: LD_INT 41
10663: ST_TO_ADDR
10664: GO 10686
10666: LD_INT 3
10668: DOUBLE
10669: EQUAL
10670: IFTRUE 10674
10672: GO 10685
10674: POP
// tech := tech_bazooka ; end ;
10675: LD_ADDR_VAR 0 5
10679: PUSH
10680: LD_INT 44
10682: ST_TO_ADDR
10683: GO 10686
10685: POP
// if Researched ( side , tech ) then
10686: LD_VAR 0 3
10690: PPUSH
10691: LD_VAR 0 5
10695: PPUSH
10696: CALL_OW 325
10700: IFFALSE 10727
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_INT 5
10709: PUSH
10710: LD_INT 8
10712: PUSH
10713: LD_INT 9
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: LIST
10720: PUSH
10721: LD_VAR 0 4
10725: ARRAY
10726: ST_TO_ADDR
// end ;
10727: LD_VAR 0 2
10731: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
10732: LD_INT 0
10734: PPUSH
10735: PPUSH
10736: PPUSH
// if not mines then
10737: LD_VAR 0 2
10741: NOT
10742: IFFALSE 10746
// exit ;
10744: GO 10890
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10746: LD_ADDR_VAR 0 5
10750: PUSH
10751: LD_INT 81
10753: PUSH
10754: LD_VAR 0 1
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 3
10765: PUSH
10766: LD_INT 21
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: PPUSH
10784: CALL_OW 69
10788: ST_TO_ADDR
// for i in mines do
10789: LD_ADDR_VAR 0 4
10793: PUSH
10794: LD_VAR 0 2
10798: PUSH
10799: FOR_IN
10800: IFFALSE 10888
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
10802: LD_VAR 0 4
10806: PUSH
10807: LD_INT 1
10809: ARRAY
10810: PPUSH
10811: LD_VAR 0 4
10815: PUSH
10816: LD_INT 2
10818: ARRAY
10819: PPUSH
10820: CALL_OW 458
10824: NOT
10825: IFFALSE 10829
// continue ;
10827: GO 10799
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
10829: LD_VAR 0 4
10833: PUSH
10834: LD_INT 1
10836: ARRAY
10837: PPUSH
10838: LD_VAR 0 4
10842: PUSH
10843: LD_INT 2
10845: ARRAY
10846: PPUSH
10847: CALL_OW 428
10851: PUSH
10852: LD_VAR 0 5
10856: IN
10857: IFFALSE 10886
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
10859: LD_VAR 0 4
10863: PUSH
10864: LD_INT 1
10866: ARRAY
10867: PPUSH
10868: LD_VAR 0 4
10872: PUSH
10873: LD_INT 2
10875: ARRAY
10876: PPUSH
10877: LD_VAR 0 1
10881: PPUSH
10882: CALL_OW 456
// end ;
10886: GO 10799
10888: POP
10889: POP
// end ;
10890: LD_VAR 0 3
10894: RET
// export function Count ( array ) ; begin
10895: LD_INT 0
10897: PPUSH
// result := array + 0 ;
10898: LD_ADDR_VAR 0 2
10902: PUSH
10903: LD_VAR 0 1
10907: PUSH
10908: LD_INT 0
10910: PLUS
10911: ST_TO_ADDR
// end ;
10912: LD_VAR 0 2
10916: RET
// export function IsEmpty ( building ) ; begin
10917: LD_INT 0
10919: PPUSH
// if not building then
10920: LD_VAR 0 1
10924: NOT
10925: IFFALSE 10929
// exit ;
10927: GO 10972
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
10929: LD_ADDR_VAR 0 2
10933: PUSH
10934: LD_VAR 0 1
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL_OW 255
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 58
10958: PUSH
10959: EMPTY
10960: LIST
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PPUSH
10966: CALL_OW 69
10970: IN
10971: ST_TO_ADDR
// end ;
10972: LD_VAR 0 2
10976: RET
// export function IsNotFull ( building ) ; var places ; begin
10977: LD_INT 0
10979: PPUSH
10980: PPUSH
// if not building then
10981: LD_VAR 0 1
10985: NOT
10986: IFFALSE 10990
// exit ;
10988: GO 11018
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
10990: LD_ADDR_VAR 0 2
10994: PUSH
10995: LD_VAR 0 1
10999: PPUSH
11000: LD_INT 3
11002: PUSH
11003: LD_INT 62
11005: PUSH
11006: EMPTY
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PPUSH
11013: CALL_OW 72
11017: ST_TO_ADDR
// end ;
11018: LD_VAR 0 2
11022: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11023: LD_INT 0
11025: PPUSH
11026: PPUSH
11027: PPUSH
11028: PPUSH
// tmp := [ ] ;
11029: LD_ADDR_VAR 0 3
11033: PUSH
11034: EMPTY
11035: ST_TO_ADDR
// list := [ ] ;
11036: LD_ADDR_VAR 0 5
11040: PUSH
11041: EMPTY
11042: ST_TO_ADDR
// for i = 16 to 25 do
11043: LD_ADDR_VAR 0 4
11047: PUSH
11048: DOUBLE
11049: LD_INT 16
11051: DEC
11052: ST_TO_ADDR
11053: LD_INT 25
11055: PUSH
11056: FOR_TO
11057: IFFALSE 11130
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11059: LD_ADDR_VAR 0 3
11063: PUSH
11064: LD_VAR 0 3
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: CALL_OW 255
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 91
11088: PUSH
11089: LD_VAR 0 1
11093: PUSH
11094: LD_INT 6
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 30
11104: PUSH
11105: LD_VAR 0 4
11109: PUSH
11110: EMPTY
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: EMPTY
11120: LIST
11121: PPUSH
11122: CALL_OW 69
11126: ADD
11127: ST_TO_ADDR
11128: GO 11056
11130: POP
11131: POP
// for i = 1 to tmp do
11132: LD_ADDR_VAR 0 4
11136: PUSH
11137: DOUBLE
11138: LD_INT 1
11140: DEC
11141: ST_TO_ADDR
11142: LD_VAR 0 3
11146: PUSH
11147: FOR_TO
11148: IFFALSE 11236
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11150: LD_ADDR_VAR 0 5
11154: PUSH
11155: LD_VAR 0 5
11159: PUSH
11160: LD_VAR 0 3
11164: PUSH
11165: LD_VAR 0 4
11169: ARRAY
11170: PPUSH
11171: CALL_OW 266
11175: PUSH
11176: LD_VAR 0 3
11180: PUSH
11181: LD_VAR 0 4
11185: ARRAY
11186: PPUSH
11187: CALL_OW 250
11191: PUSH
11192: LD_VAR 0 3
11196: PUSH
11197: LD_VAR 0 4
11201: ARRAY
11202: PPUSH
11203: CALL_OW 251
11207: PUSH
11208: LD_VAR 0 3
11212: PUSH
11213: LD_VAR 0 4
11217: ARRAY
11218: PPUSH
11219: CALL_OW 254
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: EMPTY
11231: LIST
11232: ADD
11233: ST_TO_ADDR
11234: GO 11147
11236: POP
11237: POP
// result := list ;
11238: LD_ADDR_VAR 0 2
11242: PUSH
11243: LD_VAR 0 5
11247: ST_TO_ADDR
// end ;
11248: LD_VAR 0 2
11252: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11253: LD_INT 0
11255: PPUSH
11256: PPUSH
11257: PPUSH
11258: PPUSH
11259: PPUSH
11260: PPUSH
11261: PPUSH
// if not factory then
11262: LD_VAR 0 1
11266: NOT
11267: IFFALSE 11271
// exit ;
11269: GO 11864
// if control = control_apeman then
11271: LD_VAR 0 4
11275: PUSH
11276: LD_INT 5
11278: EQUAL
11279: IFFALSE 11388
// begin tmp := UnitsInside ( factory ) ;
11281: LD_ADDR_VAR 0 8
11285: PUSH
11286: LD_VAR 0 1
11290: PPUSH
11291: CALL_OW 313
11295: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11296: LD_VAR 0 8
11300: PPUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 12
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PPUSH
11311: CALL_OW 72
11315: NOT
11316: IFFALSE 11326
// control := control_manual ;
11318: LD_ADDR_VAR 0 4
11322: PUSH
11323: LD_INT 1
11325: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11326: LD_ADDR_VAR 0 8
11330: PUSH
11331: LD_VAR 0 1
11335: PPUSH
11336: CALL 11023 0 1
11340: ST_TO_ADDR
// if tmp then
11341: LD_VAR 0 8
11345: IFFALSE 11388
// begin for i in tmp do
11347: LD_ADDR_VAR 0 7
11351: PUSH
11352: LD_VAR 0 8
11356: PUSH
11357: FOR_IN
11358: IFFALSE 11386
// if i [ 1 ] = b_ext_radio then
11360: LD_VAR 0 7
11364: PUSH
11365: LD_INT 1
11367: ARRAY
11368: PUSH
11369: LD_INT 22
11371: EQUAL
11372: IFFALSE 11384
// begin control := control_remote ;
11374: LD_ADDR_VAR 0 4
11378: PUSH
11379: LD_INT 2
11381: ST_TO_ADDR
// break ;
11382: GO 11386
// end ;
11384: GO 11357
11386: POP
11387: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11388: LD_VAR 0 1
11392: PPUSH
11393: LD_VAR 0 2
11397: PPUSH
11398: LD_VAR 0 3
11402: PPUSH
11403: LD_VAR 0 4
11407: PPUSH
11408: LD_VAR 0 5
11412: PPUSH
11413: CALL_OW 448
11417: IFFALSE 11452
// begin result := [ chassis , engine , control , weapon ] ;
11419: LD_ADDR_VAR 0 6
11423: PUSH
11424: LD_VAR 0 2
11428: PUSH
11429: LD_VAR 0 3
11433: PUSH
11434: LD_VAR 0 4
11438: PUSH
11439: LD_VAR 0 5
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: ST_TO_ADDR
// exit ;
11450: GO 11864
// end ; _chassis := AvailableChassisList ( factory ) ;
11452: LD_ADDR_VAR 0 9
11456: PUSH
11457: LD_VAR 0 1
11461: PPUSH
11462: CALL_OW 475
11466: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11467: LD_ADDR_VAR 0 11
11471: PUSH
11472: LD_VAR 0 1
11476: PPUSH
11477: CALL_OW 476
11481: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
11482: LD_ADDR_VAR 0 12
11486: PUSH
11487: LD_VAR 0 1
11491: PPUSH
11492: CALL_OW 477
11496: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
11497: LD_ADDR_VAR 0 10
11501: PUSH
11502: LD_VAR 0 1
11506: PPUSH
11507: CALL_OW 478
11511: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
11512: LD_VAR 0 9
11516: NOT
11517: PUSH
11518: LD_VAR 0 11
11522: NOT
11523: OR
11524: PUSH
11525: LD_VAR 0 12
11529: NOT
11530: OR
11531: PUSH
11532: LD_VAR 0 10
11536: NOT
11537: OR
11538: IFFALSE 11573
// begin result := [ chassis , engine , control , weapon ] ;
11540: LD_ADDR_VAR 0 6
11544: PUSH
11545: LD_VAR 0 2
11549: PUSH
11550: LD_VAR 0 3
11554: PUSH
11555: LD_VAR 0 4
11559: PUSH
11560: LD_VAR 0 5
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: ST_TO_ADDR
// exit ;
11571: GO 11864
// end ; if not chassis in _chassis then
11573: LD_VAR 0 2
11577: PUSH
11578: LD_VAR 0 9
11582: IN
11583: NOT
11584: IFFALSE 11610
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
11586: LD_ADDR_VAR 0 2
11590: PUSH
11591: LD_VAR 0 9
11595: PUSH
11596: LD_INT 1
11598: PPUSH
11599: LD_VAR 0 9
11603: PPUSH
11604: CALL_OW 12
11608: ARRAY
11609: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
11610: LD_VAR 0 2
11614: PPUSH
11615: LD_VAR 0 3
11619: PPUSH
11620: CALL 11869 0 2
11624: NOT
11625: IFFALSE 11684
// repeat engine := _engine [ 1 ] ;
11627: LD_ADDR_VAR 0 3
11631: PUSH
11632: LD_VAR 0 11
11636: PUSH
11637: LD_INT 1
11639: ARRAY
11640: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
11641: LD_ADDR_VAR 0 11
11645: PUSH
11646: LD_VAR 0 11
11650: PPUSH
11651: LD_INT 1
11653: PPUSH
11654: CALL_OW 3
11658: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
11659: LD_VAR 0 2
11663: PPUSH
11664: LD_VAR 0 3
11668: PPUSH
11669: CALL 11869 0 2
11673: PUSH
11674: LD_VAR 0 11
11678: PUSH
11679: EMPTY
11680: EQUAL
11681: OR
11682: IFFALSE 11627
// if not control in _control then
11684: LD_VAR 0 4
11688: PUSH
11689: LD_VAR 0 12
11693: IN
11694: NOT
11695: IFFALSE 11721
// control := _control [ rand ( 1 , _control ) ] ;
11697: LD_ADDR_VAR 0 4
11701: PUSH
11702: LD_VAR 0 12
11706: PUSH
11707: LD_INT 1
11709: PPUSH
11710: LD_VAR 0 12
11714: PPUSH
11715: CALL_OW 12
11719: ARRAY
11720: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_VAR 0 5
11730: PPUSH
11731: CALL 12089 0 2
11735: NOT
11736: IFFALSE 11795
// repeat weapon := _weapon [ 1 ] ;
11738: LD_ADDR_VAR 0 5
11742: PUSH
11743: LD_VAR 0 10
11747: PUSH
11748: LD_INT 1
11750: ARRAY
11751: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
11752: LD_ADDR_VAR 0 10
11756: PUSH
11757: LD_VAR 0 10
11761: PPUSH
11762: LD_INT 1
11764: PPUSH
11765: CALL_OW 3
11769: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
11770: LD_VAR 0 2
11774: PPUSH
11775: LD_VAR 0 5
11779: PPUSH
11780: CALL 12089 0 2
11784: PUSH
11785: LD_VAR 0 10
11789: PUSH
11790: EMPTY
11791: EQUAL
11792: OR
11793: IFFALSE 11738
// result := [ ] ;
11795: LD_ADDR_VAR 0 6
11799: PUSH
11800: EMPTY
11801: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11802: LD_VAR 0 1
11806: PPUSH
11807: LD_VAR 0 2
11811: PPUSH
11812: LD_VAR 0 3
11816: PPUSH
11817: LD_VAR 0 4
11821: PPUSH
11822: LD_VAR 0 5
11826: PPUSH
11827: CALL_OW 448
11831: IFFALSE 11864
// result := [ chassis , engine , control , weapon ] ;
11833: LD_ADDR_VAR 0 6
11837: PUSH
11838: LD_VAR 0 2
11842: PUSH
11843: LD_VAR 0 3
11847: PUSH
11848: LD_VAR 0 4
11852: PUSH
11853: LD_VAR 0 5
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: ST_TO_ADDR
// end ;
11864: LD_VAR 0 6
11868: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
11869: LD_INT 0
11871: PPUSH
// if not chassis or not engine then
11872: LD_VAR 0 1
11876: NOT
11877: PUSH
11878: LD_VAR 0 2
11882: NOT
11883: OR
11884: IFFALSE 11888
// exit ;
11886: GO 12084
// case engine of engine_solar :
11888: LD_VAR 0 2
11892: PUSH
11893: LD_INT 2
11895: DOUBLE
11896: EQUAL
11897: IFTRUE 11901
11899: GO 11939
11901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
11902: LD_ADDR_VAR 0 3
11906: PUSH
11907: LD_INT 11
11909: PUSH
11910: LD_INT 12
11912: PUSH
11913: LD_INT 13
11915: PUSH
11916: LD_INT 14
11918: PUSH
11919: LD_INT 1
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: ST_TO_ADDR
11937: GO 12068
11939: LD_INT 1
11941: DOUBLE
11942: EQUAL
11943: IFTRUE 11947
11945: GO 12009
11947: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
11948: LD_ADDR_VAR 0 3
11952: PUSH
11953: LD_INT 11
11955: PUSH
11956: LD_INT 12
11958: PUSH
11959: LD_INT 13
11961: PUSH
11962: LD_INT 14
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: LD_INT 3
11973: PUSH
11974: LD_INT 4
11976: PUSH
11977: LD_INT 5
11979: PUSH
11980: LD_INT 21
11982: PUSH
11983: LD_INT 23
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 24
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: ST_TO_ADDR
12007: GO 12068
12009: LD_INT 3
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12067
12017: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12018: LD_ADDR_VAR 0 3
12022: PUSH
12023: LD_INT 13
12025: PUSH
12026: LD_INT 14
12028: PUSH
12029: LD_INT 2
12031: PUSH
12032: LD_INT 3
12034: PUSH
12035: LD_INT 4
12037: PUSH
12038: LD_INT 5
12040: PUSH
12041: LD_INT 21
12043: PUSH
12044: LD_INT 22
12046: PUSH
12047: LD_INT 23
12049: PUSH
12050: LD_INT 24
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: ST_TO_ADDR
12065: GO 12068
12067: POP
// result := ( chassis in result ) ;
12068: LD_ADDR_VAR 0 3
12072: PUSH
12073: LD_VAR 0 1
12077: PUSH
12078: LD_VAR 0 3
12082: IN
12083: ST_TO_ADDR
// end ;
12084: LD_VAR 0 3
12088: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12089: LD_INT 0
12091: PPUSH
// if not chassis or not weapon then
12092: LD_VAR 0 1
12096: NOT
12097: PUSH
12098: LD_VAR 0 2
12102: NOT
12103: OR
12104: IFFALSE 12108
// exit ;
12106: GO 13168
// case weapon of us_machine_gun :
12108: LD_VAR 0 2
12112: PUSH
12113: LD_INT 2
12115: DOUBLE
12116: EQUAL
12117: IFTRUE 12121
12119: GO 12151
12121: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12122: LD_ADDR_VAR 0 3
12126: PUSH
12127: LD_INT 1
12129: PUSH
12130: LD_INT 2
12132: PUSH
12133: LD_INT 3
12135: PUSH
12136: LD_INT 4
12138: PUSH
12139: LD_INT 5
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: ST_TO_ADDR
12149: GO 13152
12151: LD_INT 3
12153: DOUBLE
12154: EQUAL
12155: IFTRUE 12159
12157: GO 12189
12159: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12160: LD_ADDR_VAR 0 3
12164: PUSH
12165: LD_INT 1
12167: PUSH
12168: LD_INT 2
12170: PUSH
12171: LD_INT 3
12173: PUSH
12174: LD_INT 4
12176: PUSH
12177: LD_INT 5
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: ST_TO_ADDR
12187: GO 13152
12189: LD_INT 11
12191: DOUBLE
12192: EQUAL
12193: IFTRUE 12197
12195: GO 12227
12197: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12198: LD_ADDR_VAR 0 3
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: LD_INT 2
12208: PUSH
12209: LD_INT 3
12211: PUSH
12212: LD_INT 4
12214: PUSH
12215: LD_INT 5
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: ST_TO_ADDR
12225: GO 13152
12227: LD_INT 4
12229: DOUBLE
12230: EQUAL
12231: IFTRUE 12235
12233: GO 12261
12235: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12236: LD_ADDR_VAR 0 3
12240: PUSH
12241: LD_INT 2
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: LD_INT 4
12249: PUSH
12250: LD_INT 5
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: ST_TO_ADDR
12259: GO 13152
12261: LD_INT 5
12263: DOUBLE
12264: EQUAL
12265: IFTRUE 12269
12267: GO 12295
12269: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12270: LD_ADDR_VAR 0 3
12274: PUSH
12275: LD_INT 2
12277: PUSH
12278: LD_INT 3
12280: PUSH
12281: LD_INT 4
12283: PUSH
12284: LD_INT 5
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: ST_TO_ADDR
12293: GO 13152
12295: LD_INT 9
12297: DOUBLE
12298: EQUAL
12299: IFTRUE 12303
12301: GO 12329
12303: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12304: LD_ADDR_VAR 0 3
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: LD_INT 3
12314: PUSH
12315: LD_INT 4
12317: PUSH
12318: LD_INT 5
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: ST_TO_ADDR
12327: GO 13152
12329: LD_INT 7
12331: DOUBLE
12332: EQUAL
12333: IFTRUE 12337
12335: GO 12363
12337: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12338: LD_ADDR_VAR 0 3
12342: PUSH
12343: LD_INT 2
12345: PUSH
12346: LD_INT 3
12348: PUSH
12349: LD_INT 4
12351: PUSH
12352: LD_INT 5
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: ST_TO_ADDR
12361: GO 13152
12363: LD_INT 12
12365: DOUBLE
12366: EQUAL
12367: IFTRUE 12371
12369: GO 12397
12371: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12372: LD_ADDR_VAR 0 3
12376: PUSH
12377: LD_INT 2
12379: PUSH
12380: LD_INT 3
12382: PUSH
12383: LD_INT 4
12385: PUSH
12386: LD_INT 5
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: ST_TO_ADDR
12395: GO 13152
12397: LD_INT 13
12399: DOUBLE
12400: EQUAL
12401: IFTRUE 12405
12403: GO 12431
12405: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12406: LD_ADDR_VAR 0 3
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 4
12419: PUSH
12420: LD_INT 5
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: ST_TO_ADDR
12429: GO 13152
12431: LD_INT 14
12433: DOUBLE
12434: EQUAL
12435: IFTRUE 12439
12437: GO 12457
12439: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12440: LD_ADDR_VAR 0 3
12444: PUSH
12445: LD_INT 4
12447: PUSH
12448: LD_INT 5
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: ST_TO_ADDR
12455: GO 13152
12457: LD_INT 6
12459: DOUBLE
12460: EQUAL
12461: IFTRUE 12465
12463: GO 12483
12465: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: LD_INT 4
12473: PUSH
12474: LD_INT 5
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: ST_TO_ADDR
12481: GO 13152
12483: LD_INT 10
12485: DOUBLE
12486: EQUAL
12487: IFTRUE 12491
12489: GO 12509
12491: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
12492: LD_ADDR_VAR 0 3
12496: PUSH
12497: LD_INT 4
12499: PUSH
12500: LD_INT 5
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: ST_TO_ADDR
12507: GO 13152
12509: LD_INT 22
12511: DOUBLE
12512: EQUAL
12513: IFTRUE 12517
12515: GO 12543
12517: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
12518: LD_ADDR_VAR 0 3
12522: PUSH
12523: LD_INT 11
12525: PUSH
12526: LD_INT 12
12528: PUSH
12529: LD_INT 13
12531: PUSH
12532: LD_INT 14
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: ST_TO_ADDR
12541: GO 13152
12543: LD_INT 23
12545: DOUBLE
12546: EQUAL
12547: IFTRUE 12551
12549: GO 12577
12551: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
12552: LD_ADDR_VAR 0 3
12556: PUSH
12557: LD_INT 11
12559: PUSH
12560: LD_INT 12
12562: PUSH
12563: LD_INT 13
12565: PUSH
12566: LD_INT 14
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: ST_TO_ADDR
12575: GO 13152
12577: LD_INT 24
12579: DOUBLE
12580: EQUAL
12581: IFTRUE 12585
12583: GO 12611
12585: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
12586: LD_ADDR_VAR 0 3
12590: PUSH
12591: LD_INT 11
12593: PUSH
12594: LD_INT 12
12596: PUSH
12597: LD_INT 13
12599: PUSH
12600: LD_INT 14
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: ST_TO_ADDR
12609: GO 13152
12611: LD_INT 30
12613: DOUBLE
12614: EQUAL
12615: IFTRUE 12619
12617: GO 12645
12619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
12620: LD_ADDR_VAR 0 3
12624: PUSH
12625: LD_INT 11
12627: PUSH
12628: LD_INT 12
12630: PUSH
12631: LD_INT 13
12633: PUSH
12634: LD_INT 14
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: ST_TO_ADDR
12643: GO 13152
12645: LD_INT 25
12647: DOUBLE
12648: EQUAL
12649: IFTRUE 12653
12651: GO 12671
12653: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
12654: LD_ADDR_VAR 0 3
12658: PUSH
12659: LD_INT 13
12661: PUSH
12662: LD_INT 14
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: ST_TO_ADDR
12669: GO 13152
12671: LD_INT 27
12673: DOUBLE
12674: EQUAL
12675: IFTRUE 12679
12677: GO 12697
12679: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_INT 13
12687: PUSH
12688: LD_INT 14
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: ST_TO_ADDR
12695: GO 13152
12697: LD_INT 92
12699: DOUBLE
12700: EQUAL
12701: IFTRUE 12705
12703: GO 12731
12705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
12706: LD_ADDR_VAR 0 3
12710: PUSH
12711: LD_INT 11
12713: PUSH
12714: LD_INT 12
12716: PUSH
12717: LD_INT 13
12719: PUSH
12720: LD_INT 14
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: ST_TO_ADDR
12729: GO 13152
12731: LD_INT 28
12733: DOUBLE
12734: EQUAL
12735: IFTRUE 12739
12737: GO 12757
12739: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
12740: LD_ADDR_VAR 0 3
12744: PUSH
12745: LD_INT 13
12747: PUSH
12748: LD_INT 14
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: ST_TO_ADDR
12755: GO 13152
12757: LD_INT 29
12759: DOUBLE
12760: EQUAL
12761: IFTRUE 12765
12763: GO 12783
12765: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
12766: LD_ADDR_VAR 0 3
12770: PUSH
12771: LD_INT 13
12773: PUSH
12774: LD_INT 14
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: ST_TO_ADDR
12781: GO 13152
12783: LD_INT 31
12785: DOUBLE
12786: EQUAL
12787: IFTRUE 12791
12789: GO 12809
12791: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
12792: LD_ADDR_VAR 0 3
12796: PUSH
12797: LD_INT 13
12799: PUSH
12800: LD_INT 14
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: ST_TO_ADDR
12807: GO 13152
12809: LD_INT 26
12811: DOUBLE
12812: EQUAL
12813: IFTRUE 12817
12815: GO 12835
12817: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
12818: LD_ADDR_VAR 0 3
12822: PUSH
12823: LD_INT 13
12825: PUSH
12826: LD_INT 14
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: ST_TO_ADDR
12833: GO 13152
12835: LD_INT 42
12837: DOUBLE
12838: EQUAL
12839: IFTRUE 12843
12841: GO 12869
12843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
12844: LD_ADDR_VAR 0 3
12848: PUSH
12849: LD_INT 21
12851: PUSH
12852: LD_INT 22
12854: PUSH
12855: LD_INT 23
12857: PUSH
12858: LD_INT 24
12860: PUSH
12861: EMPTY
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: ST_TO_ADDR
12867: GO 13152
12869: LD_INT 43
12871: DOUBLE
12872: EQUAL
12873: IFTRUE 12877
12875: GO 12903
12877: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
12878: LD_ADDR_VAR 0 3
12882: PUSH
12883: LD_INT 21
12885: PUSH
12886: LD_INT 22
12888: PUSH
12889: LD_INT 23
12891: PUSH
12892: LD_INT 24
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: ST_TO_ADDR
12901: GO 13152
12903: LD_INT 44
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 12937
12911: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
12912: LD_ADDR_VAR 0 3
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 23
12925: PUSH
12926: LD_INT 24
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: ST_TO_ADDR
12935: GO 13152
12937: LD_INT 45
12939: DOUBLE
12940: EQUAL
12941: IFTRUE 12945
12943: GO 12971
12945: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
12946: LD_ADDR_VAR 0 3
12950: PUSH
12951: LD_INT 21
12953: PUSH
12954: LD_INT 22
12956: PUSH
12957: LD_INT 23
12959: PUSH
12960: LD_INT 24
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: ST_TO_ADDR
12969: GO 13152
12971: LD_INT 49
12973: DOUBLE
12974: EQUAL
12975: IFTRUE 12979
12977: GO 13005
12979: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
12980: LD_ADDR_VAR 0 3
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 23
12993: PUSH
12994: LD_INT 24
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: ST_TO_ADDR
13003: GO 13152
13005: LD_INT 51
13007: DOUBLE
13008: EQUAL
13009: IFTRUE 13013
13011: GO 13039
13013: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13014: LD_ADDR_VAR 0 3
13018: PUSH
13019: LD_INT 21
13021: PUSH
13022: LD_INT 22
13024: PUSH
13025: LD_INT 23
13027: PUSH
13028: LD_INT 24
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: ST_TO_ADDR
13037: GO 13152
13039: LD_INT 52
13041: DOUBLE
13042: EQUAL
13043: IFTRUE 13047
13045: GO 13073
13047: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13048: LD_ADDR_VAR 0 3
13052: PUSH
13053: LD_INT 21
13055: PUSH
13056: LD_INT 22
13058: PUSH
13059: LD_INT 23
13061: PUSH
13062: LD_INT 24
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: ST_TO_ADDR
13071: GO 13152
13073: LD_INT 53
13075: DOUBLE
13076: EQUAL
13077: IFTRUE 13081
13079: GO 13099
13081: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13082: LD_ADDR_VAR 0 3
13086: PUSH
13087: LD_INT 23
13089: PUSH
13090: LD_INT 24
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: ST_TO_ADDR
13097: GO 13152
13099: LD_INT 46
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13125
13107: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: LD_INT 23
13115: PUSH
13116: LD_INT 24
13118: PUSH
13119: EMPTY
13120: LIST
13121: LIST
13122: ST_TO_ADDR
13123: GO 13152
13125: LD_INT 47
13127: DOUBLE
13128: EQUAL
13129: IFTRUE 13133
13131: GO 13151
13133: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: LD_INT 23
13141: PUSH
13142: LD_INT 24
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: ST_TO_ADDR
13149: GO 13152
13151: POP
// result := ( chassis in result ) ;
13152: LD_ADDR_VAR 0 3
13156: PUSH
13157: LD_VAR 0 1
13161: PUSH
13162: LD_VAR 0 3
13166: IN
13167: ST_TO_ADDR
// end ;
13168: LD_VAR 0 3
13172: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13173: LD_INT 0
13175: PPUSH
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
// result := array ;
13182: LD_ADDR_VAR 0 5
13186: PUSH
13187: LD_VAR 0 1
13191: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13192: LD_VAR 0 1
13196: NOT
13197: PUSH
13198: LD_VAR 0 2
13202: NOT
13203: OR
13204: PUSH
13205: LD_VAR 0 3
13209: NOT
13210: OR
13211: PUSH
13212: LD_VAR 0 2
13216: PUSH
13217: LD_VAR 0 1
13221: GREATER
13222: OR
13223: PUSH
13224: LD_VAR 0 3
13228: PUSH
13229: LD_VAR 0 1
13233: GREATER
13234: OR
13235: IFFALSE 13239
// exit ;
13237: GO 13535
// if direction then
13239: LD_VAR 0 4
13243: IFFALSE 13307
// begin d := 1 ;
13245: LD_ADDR_VAR 0 9
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// if i_from > i_to then
13253: LD_VAR 0 2
13257: PUSH
13258: LD_VAR 0 3
13262: GREATER
13263: IFFALSE 13289
// length := ( array - i_from ) + i_to else
13265: LD_ADDR_VAR 0 11
13269: PUSH
13270: LD_VAR 0 1
13274: PUSH
13275: LD_VAR 0 2
13279: MINUS
13280: PUSH
13281: LD_VAR 0 3
13285: PLUS
13286: ST_TO_ADDR
13287: GO 13305
// length := i_to - i_from ;
13289: LD_ADDR_VAR 0 11
13293: PUSH
13294: LD_VAR 0 3
13298: PUSH
13299: LD_VAR 0 2
13303: MINUS
13304: ST_TO_ADDR
// end else
13305: GO 13368
// begin d := - 1 ;
13307: LD_ADDR_VAR 0 9
13311: PUSH
13312: LD_INT 1
13314: NEG
13315: ST_TO_ADDR
// if i_from > i_to then
13316: LD_VAR 0 2
13320: PUSH
13321: LD_VAR 0 3
13325: GREATER
13326: IFFALSE 13346
// length := i_from - i_to else
13328: LD_ADDR_VAR 0 11
13332: PUSH
13333: LD_VAR 0 2
13337: PUSH
13338: LD_VAR 0 3
13342: MINUS
13343: ST_TO_ADDR
13344: GO 13368
// length := ( array - i_to ) + i_from ;
13346: LD_ADDR_VAR 0 11
13350: PUSH
13351: LD_VAR 0 1
13355: PUSH
13356: LD_VAR 0 3
13360: MINUS
13361: PUSH
13362: LD_VAR 0 2
13366: PLUS
13367: ST_TO_ADDR
// end ; if not length then
13368: LD_VAR 0 11
13372: NOT
13373: IFFALSE 13377
// exit ;
13375: GO 13535
// tmp := array ;
13377: LD_ADDR_VAR 0 10
13381: PUSH
13382: LD_VAR 0 1
13386: ST_TO_ADDR
// for i = 1 to length do
13387: LD_ADDR_VAR 0 6
13391: PUSH
13392: DOUBLE
13393: LD_INT 1
13395: DEC
13396: ST_TO_ADDR
13397: LD_VAR 0 11
13401: PUSH
13402: FOR_TO
13403: IFFALSE 13523
// begin for j = 1 to array do
13405: LD_ADDR_VAR 0 7
13409: PUSH
13410: DOUBLE
13411: LD_INT 1
13413: DEC
13414: ST_TO_ADDR
13415: LD_VAR 0 1
13419: PUSH
13420: FOR_TO
13421: IFFALSE 13509
// begin k := j + d ;
13423: LD_ADDR_VAR 0 8
13427: PUSH
13428: LD_VAR 0 7
13432: PUSH
13433: LD_VAR 0 9
13437: PLUS
13438: ST_TO_ADDR
// if k > array then
13439: LD_VAR 0 8
13443: PUSH
13444: LD_VAR 0 1
13448: GREATER
13449: IFFALSE 13459
// k := 1 ;
13451: LD_ADDR_VAR 0 8
13455: PUSH
13456: LD_INT 1
13458: ST_TO_ADDR
// if not k then
13459: LD_VAR 0 8
13463: NOT
13464: IFFALSE 13476
// k := array ;
13466: LD_ADDR_VAR 0 8
13470: PUSH
13471: LD_VAR 0 1
13475: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
13476: LD_ADDR_VAR 0 10
13480: PUSH
13481: LD_VAR 0 10
13485: PPUSH
13486: LD_VAR 0 8
13490: PPUSH
13491: LD_VAR 0 1
13495: PUSH
13496: LD_VAR 0 7
13500: ARRAY
13501: PPUSH
13502: CALL_OW 1
13506: ST_TO_ADDR
// end ;
13507: GO 13420
13509: POP
13510: POP
// array := tmp ;
13511: LD_ADDR_VAR 0 1
13515: PUSH
13516: LD_VAR 0 10
13520: ST_TO_ADDR
// end ;
13521: GO 13402
13523: POP
13524: POP
// result := array ;
13525: LD_ADDR_VAR 0 5
13529: PUSH
13530: LD_VAR 0 1
13534: ST_TO_ADDR
// end ;
13535: LD_VAR 0 5
13539: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
13540: LD_INT 0
13542: PPUSH
13543: PPUSH
// result := 0 ;
13544: LD_ADDR_VAR 0 3
13548: PUSH
13549: LD_INT 0
13551: ST_TO_ADDR
// if not array or not value in array then
13552: LD_VAR 0 1
13556: NOT
13557: PUSH
13558: LD_VAR 0 2
13562: PUSH
13563: LD_VAR 0 1
13567: IN
13568: NOT
13569: OR
13570: IFFALSE 13574
// exit ;
13572: GO 13628
// for i = 1 to array do
13574: LD_ADDR_VAR 0 4
13578: PUSH
13579: DOUBLE
13580: LD_INT 1
13582: DEC
13583: ST_TO_ADDR
13584: LD_VAR 0 1
13588: PUSH
13589: FOR_TO
13590: IFFALSE 13626
// if value = array [ i ] then
13592: LD_VAR 0 2
13596: PUSH
13597: LD_VAR 0 1
13601: PUSH
13602: LD_VAR 0 4
13606: ARRAY
13607: EQUAL
13608: IFFALSE 13624
// begin result := i ;
13610: LD_ADDR_VAR 0 3
13614: PUSH
13615: LD_VAR 0 4
13619: ST_TO_ADDR
// exit ;
13620: POP
13621: POP
13622: GO 13628
// end ;
13624: GO 13589
13626: POP
13627: POP
// end ;
13628: LD_VAR 0 3
13632: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
13633: LD_INT 0
13635: PPUSH
// vc_chassis := chassis ;
13636: LD_ADDR_OWVAR 37
13640: PUSH
13641: LD_VAR 0 1
13645: ST_TO_ADDR
// vc_engine := engine ;
13646: LD_ADDR_OWVAR 39
13650: PUSH
13651: LD_VAR 0 2
13655: ST_TO_ADDR
// vc_control := control ;
13656: LD_ADDR_OWVAR 38
13660: PUSH
13661: LD_VAR 0 3
13665: ST_TO_ADDR
// vc_weapon := weapon ;
13666: LD_ADDR_OWVAR 40
13670: PUSH
13671: LD_VAR 0 4
13675: ST_TO_ADDR
// vc_fuel_battery := fuel ;
13676: LD_ADDR_OWVAR 41
13680: PUSH
13681: LD_VAR 0 5
13685: ST_TO_ADDR
// end ;
13686: LD_VAR 0 6
13690: RET
// export function WantPlant ( unit ) ; var task ; begin
13691: LD_INT 0
13693: PPUSH
13694: PPUSH
// result := false ;
13695: LD_ADDR_VAR 0 2
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
13703: LD_ADDR_VAR 0 3
13707: PUSH
13708: LD_VAR 0 1
13712: PPUSH
13713: CALL_OW 437
13717: ST_TO_ADDR
// if task then
13718: LD_VAR 0 3
13722: IFFALSE 13750
// if task [ 1 ] [ 1 ] = p then
13724: LD_VAR 0 3
13728: PUSH
13729: LD_INT 1
13731: ARRAY
13732: PUSH
13733: LD_INT 1
13735: ARRAY
13736: PUSH
13737: LD_STRING p
13739: EQUAL
13740: IFFALSE 13750
// result := true ;
13742: LD_ADDR_VAR 0 2
13746: PUSH
13747: LD_INT 1
13749: ST_TO_ADDR
// end ;
13750: LD_VAR 0 2
13754: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
// if pos < 1 then
13761: LD_VAR 0 2
13765: PUSH
13766: LD_INT 1
13768: LESS
13769: IFFALSE 13773
// exit ;
13771: GO 14076
// if pos = 1 then
13773: LD_VAR 0 2
13777: PUSH
13778: LD_INT 1
13780: EQUAL
13781: IFFALSE 13814
// result := Replace ( arr , pos [ 1 ] , value ) else
13783: LD_ADDR_VAR 0 4
13787: PUSH
13788: LD_VAR 0 1
13792: PPUSH
13793: LD_VAR 0 2
13797: PUSH
13798: LD_INT 1
13800: ARRAY
13801: PPUSH
13802: LD_VAR 0 3
13806: PPUSH
13807: CALL_OW 1
13811: ST_TO_ADDR
13812: GO 14076
// begin tmp := arr ;
13814: LD_ADDR_VAR 0 6
13818: PUSH
13819: LD_VAR 0 1
13823: ST_TO_ADDR
// s_arr := [ tmp ] ;
13824: LD_ADDR_VAR 0 7
13828: PUSH
13829: LD_VAR 0 6
13833: PUSH
13834: EMPTY
13835: LIST
13836: ST_TO_ADDR
// for i = 1 to pos - 1 do
13837: LD_ADDR_VAR 0 5
13841: PUSH
13842: DOUBLE
13843: LD_INT 1
13845: DEC
13846: ST_TO_ADDR
13847: LD_VAR 0 2
13851: PUSH
13852: LD_INT 1
13854: MINUS
13855: PUSH
13856: FOR_TO
13857: IFFALSE 13902
// begin tmp := tmp [ pos [ i ] ] ;
13859: LD_ADDR_VAR 0 6
13863: PUSH
13864: LD_VAR 0 6
13868: PUSH
13869: LD_VAR 0 2
13873: PUSH
13874: LD_VAR 0 5
13878: ARRAY
13879: ARRAY
13880: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
13881: LD_ADDR_VAR 0 7
13885: PUSH
13886: LD_VAR 0 7
13890: PUSH
13891: LD_VAR 0 6
13895: PUSH
13896: EMPTY
13897: LIST
13898: ADD
13899: ST_TO_ADDR
// end ;
13900: GO 13856
13902: POP
13903: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
13904: LD_ADDR_VAR 0 6
13908: PUSH
13909: LD_VAR 0 6
13913: PPUSH
13914: LD_VAR 0 2
13918: PUSH
13919: LD_VAR 0 2
13923: ARRAY
13924: PPUSH
13925: LD_VAR 0 3
13929: PPUSH
13930: CALL_OW 1
13934: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
13935: LD_ADDR_VAR 0 7
13939: PUSH
13940: LD_VAR 0 7
13944: PPUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: LD_VAR 0 6
13954: PPUSH
13955: CALL_OW 1
13959: ST_TO_ADDR
// for i = s_arr downto 2 do
13960: LD_ADDR_VAR 0 5
13964: PUSH
13965: DOUBLE
13966: LD_VAR 0 7
13970: INC
13971: ST_TO_ADDR
13972: LD_INT 2
13974: PUSH
13975: FOR_DOWNTO
13976: IFFALSE 14060
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
13978: LD_ADDR_VAR 0 6
13982: PUSH
13983: LD_VAR 0 7
13987: PUSH
13988: LD_VAR 0 5
13992: PUSH
13993: LD_INT 1
13995: MINUS
13996: ARRAY
13997: PPUSH
13998: LD_VAR 0 2
14002: PUSH
14003: LD_VAR 0 5
14007: PUSH
14008: LD_INT 1
14010: MINUS
14011: ARRAY
14012: PPUSH
14013: LD_VAR 0 7
14017: PUSH
14018: LD_VAR 0 5
14022: ARRAY
14023: PPUSH
14024: CALL_OW 1
14028: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14029: LD_ADDR_VAR 0 7
14033: PUSH
14034: LD_VAR 0 7
14038: PPUSH
14039: LD_VAR 0 5
14043: PUSH
14044: LD_INT 1
14046: MINUS
14047: PPUSH
14048: LD_VAR 0 6
14052: PPUSH
14053: CALL_OW 1
14057: ST_TO_ADDR
// end ;
14058: GO 13975
14060: POP
14061: POP
// result := s_arr [ 1 ] ;
14062: LD_ADDR_VAR 0 4
14066: PUSH
14067: LD_VAR 0 7
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: ST_TO_ADDR
// end ; end ;
14076: LD_VAR 0 4
14080: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14081: LD_INT 0
14083: PPUSH
14084: PPUSH
// if not list then
14085: LD_VAR 0 1
14089: NOT
14090: IFFALSE 14094
// exit ;
14092: GO 14185
// i := list [ pos1 ] ;
14094: LD_ADDR_VAR 0 5
14098: PUSH
14099: LD_VAR 0 1
14103: PUSH
14104: LD_VAR 0 2
14108: ARRAY
14109: ST_TO_ADDR
// if not i then
14110: LD_VAR 0 5
14114: NOT
14115: IFFALSE 14119
// exit ;
14117: GO 14185
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14119: LD_ADDR_VAR 0 1
14123: PUSH
14124: LD_VAR 0 1
14128: PPUSH
14129: LD_VAR 0 2
14133: PPUSH
14134: LD_VAR 0 1
14138: PUSH
14139: LD_VAR 0 3
14143: ARRAY
14144: PPUSH
14145: CALL_OW 1
14149: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14150: LD_ADDR_VAR 0 1
14154: PUSH
14155: LD_VAR 0 1
14159: PPUSH
14160: LD_VAR 0 3
14164: PPUSH
14165: LD_VAR 0 5
14169: PPUSH
14170: CALL_OW 1
14174: ST_TO_ADDR
// result := list ;
14175: LD_ADDR_VAR 0 4
14179: PUSH
14180: LD_VAR 0 1
14184: ST_TO_ADDR
// end ;
14185: LD_VAR 0 4
14189: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14190: LD_INT 0
14192: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14193: LD_ADDR_VAR 0 5
14197: PUSH
14198: LD_VAR 0 1
14202: PPUSH
14203: CALL_OW 250
14207: PPUSH
14208: LD_VAR 0 1
14212: PPUSH
14213: CALL_OW 251
14217: PPUSH
14218: LD_VAR 0 2
14222: PPUSH
14223: LD_VAR 0 3
14227: PPUSH
14228: LD_VAR 0 4
14232: PPUSH
14233: CALL 14611 0 5
14237: ST_TO_ADDR
// end ;
14238: LD_VAR 0 5
14242: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
14247: PPUSH
14248: PPUSH
// if not list or not unit then
14249: LD_VAR 0 2
14253: NOT
14254: PUSH
14255: LD_VAR 0 1
14259: NOT
14260: OR
14261: IFFALSE 14265
// exit ;
14263: GO 14606
// result := [ ] ;
14265: LD_ADDR_VAR 0 5
14269: PUSH
14270: EMPTY
14271: ST_TO_ADDR
// for i in list do
14272: LD_ADDR_VAR 0 6
14276: PUSH
14277: LD_VAR 0 2
14281: PUSH
14282: FOR_IN
14283: IFFALSE 14501
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
14285: LD_ADDR_VAR 0 8
14289: PUSH
14290: LD_VAR 0 1
14294: PPUSH
14295: LD_VAR 0 6
14299: PUSH
14300: LD_INT 1
14302: ARRAY
14303: PPUSH
14304: LD_VAR 0 6
14308: PUSH
14309: LD_INT 2
14311: ARRAY
14312: PPUSH
14313: CALL_OW 297
14317: ST_TO_ADDR
// if not Count ( result ) then
14318: LD_VAR 0 5
14322: PPUSH
14323: CALL 10895 0 1
14327: NOT
14328: IFFALSE 14361
// begin result := Join ( result , [ i , tmp ] ) ;
14330: LD_ADDR_VAR 0 5
14334: PUSH
14335: LD_VAR 0 5
14339: PPUSH
14340: LD_VAR 0 6
14344: PUSH
14345: LD_VAR 0 8
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL 46484 0 2
14358: ST_TO_ADDR
// continue ;
14359: GO 14282
// end ; if result [ result ] [ 2 ] <= tmp then
14361: LD_VAR 0 5
14365: PUSH
14366: LD_VAR 0 5
14370: ARRAY
14371: PUSH
14372: LD_INT 2
14374: ARRAY
14375: PUSH
14376: LD_VAR 0 8
14380: LESSEQUAL
14381: IFFALSE 14414
// result := Join ( result , [ i , tmp ] ) else
14383: LD_ADDR_VAR 0 5
14387: PUSH
14388: LD_VAR 0 5
14392: PPUSH
14393: LD_VAR 0 6
14397: PUSH
14398: LD_VAR 0 8
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PPUSH
14407: CALL 46484 0 2
14411: ST_TO_ADDR
14412: GO 14499
// begin for j := 1 to Count ( result ) do
14414: LD_ADDR_VAR 0 7
14418: PUSH
14419: DOUBLE
14420: LD_INT 1
14422: DEC
14423: ST_TO_ADDR
14424: LD_VAR 0 5
14428: PPUSH
14429: CALL 10895 0 1
14433: PUSH
14434: FOR_TO
14435: IFFALSE 14497
// begin if tmp < result [ j ] [ 2 ] then
14437: LD_VAR 0 8
14441: PUSH
14442: LD_VAR 0 5
14446: PUSH
14447: LD_VAR 0 7
14451: ARRAY
14452: PUSH
14453: LD_INT 2
14455: ARRAY
14456: LESS
14457: IFFALSE 14495
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14459: LD_ADDR_VAR 0 5
14463: PUSH
14464: LD_VAR 0 5
14468: PPUSH
14469: LD_VAR 0 7
14473: PPUSH
14474: LD_VAR 0 6
14478: PUSH
14479: LD_VAR 0 8
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 2
14492: ST_TO_ADDR
// break ;
14493: GO 14497
// end ; end ;
14495: GO 14434
14497: POP
14498: POP
// end ; end ;
14499: GO 14282
14501: POP
14502: POP
// if result and not asc then
14503: LD_VAR 0 5
14507: PUSH
14508: LD_VAR 0 3
14512: NOT
14513: AND
14514: IFFALSE 14531
// result := ReverseArray ( result ) ;
14516: LD_ADDR_VAR 0 5
14520: PUSH
14521: LD_VAR 0 5
14525: PPUSH
14526: CALL 41771 0 1
14530: ST_TO_ADDR
// tmp := [ ] ;
14531: LD_ADDR_VAR 0 8
14535: PUSH
14536: EMPTY
14537: ST_TO_ADDR
// if mode then
14538: LD_VAR 0 4
14542: IFFALSE 14606
// begin for i := 1 to result do
14544: LD_ADDR_VAR 0 6
14548: PUSH
14549: DOUBLE
14550: LD_INT 1
14552: DEC
14553: ST_TO_ADDR
14554: LD_VAR 0 5
14558: PUSH
14559: FOR_TO
14560: IFFALSE 14594
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
14562: LD_ADDR_VAR 0 8
14566: PUSH
14567: LD_VAR 0 8
14571: PPUSH
14572: LD_VAR 0 5
14576: PUSH
14577: LD_VAR 0 6
14581: ARRAY
14582: PUSH
14583: LD_INT 1
14585: ARRAY
14586: PPUSH
14587: CALL 46484 0 2
14591: ST_TO_ADDR
14592: GO 14559
14594: POP
14595: POP
// result := tmp ;
14596: LD_ADDR_VAR 0 5
14600: PUSH
14601: LD_VAR 0 8
14605: ST_TO_ADDR
// end ; end ;
14606: LD_VAR 0 5
14610: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14611: LD_INT 0
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
// if not list then
14617: LD_VAR 0 3
14621: NOT
14622: IFFALSE 14626
// exit ;
14624: GO 15014
// result := [ ] ;
14626: LD_ADDR_VAR 0 6
14630: PUSH
14631: EMPTY
14632: ST_TO_ADDR
// for i in list do
14633: LD_ADDR_VAR 0 7
14637: PUSH
14638: LD_VAR 0 3
14642: PUSH
14643: FOR_IN
14644: IFFALSE 14846
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14646: LD_ADDR_VAR 0 9
14650: PUSH
14651: LD_VAR 0 7
14655: PPUSH
14656: LD_VAR 0 1
14660: PPUSH
14661: LD_VAR 0 2
14665: PPUSH
14666: CALL_OW 297
14670: ST_TO_ADDR
// if not result then
14671: LD_VAR 0 6
14675: NOT
14676: IFFALSE 14702
// result := [ [ i , tmp ] ] else
14678: LD_ADDR_VAR 0 6
14682: PUSH
14683: LD_VAR 0 7
14687: PUSH
14688: LD_VAR 0 9
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: EMPTY
14698: LIST
14699: ST_TO_ADDR
14700: GO 14844
// begin if result [ result ] [ 2 ] < tmp then
14702: LD_VAR 0 6
14706: PUSH
14707: LD_VAR 0 6
14711: ARRAY
14712: PUSH
14713: LD_INT 2
14715: ARRAY
14716: PUSH
14717: LD_VAR 0 9
14721: LESS
14722: IFFALSE 14764
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14724: LD_ADDR_VAR 0 6
14728: PUSH
14729: LD_VAR 0 6
14733: PPUSH
14734: LD_VAR 0 6
14738: PUSH
14739: LD_INT 1
14741: PLUS
14742: PPUSH
14743: LD_VAR 0 7
14747: PUSH
14748: LD_VAR 0 9
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PPUSH
14757: CALL_OW 2
14761: ST_TO_ADDR
14762: GO 14844
// for j = 1 to result do
14764: LD_ADDR_VAR 0 8
14768: PUSH
14769: DOUBLE
14770: LD_INT 1
14772: DEC
14773: ST_TO_ADDR
14774: LD_VAR 0 6
14778: PUSH
14779: FOR_TO
14780: IFFALSE 14842
// begin if tmp < result [ j ] [ 2 ] then
14782: LD_VAR 0 9
14786: PUSH
14787: LD_VAR 0 6
14791: PUSH
14792: LD_VAR 0 8
14796: ARRAY
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: LESS
14802: IFFALSE 14840
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14804: LD_ADDR_VAR 0 6
14808: PUSH
14809: LD_VAR 0 6
14813: PPUSH
14814: LD_VAR 0 8
14818: PPUSH
14819: LD_VAR 0 7
14823: PUSH
14824: LD_VAR 0 9
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PPUSH
14833: CALL_OW 2
14837: ST_TO_ADDR
// break ;
14838: GO 14842
// end ; end ;
14840: GO 14779
14842: POP
14843: POP
// end ; end ;
14844: GO 14643
14846: POP
14847: POP
// if result and not asc then
14848: LD_VAR 0 6
14852: PUSH
14853: LD_VAR 0 4
14857: NOT
14858: AND
14859: IFFALSE 14934
// begin tmp := result ;
14861: LD_ADDR_VAR 0 9
14865: PUSH
14866: LD_VAR 0 6
14870: ST_TO_ADDR
// for i = tmp downto 1 do
14871: LD_ADDR_VAR 0 7
14875: PUSH
14876: DOUBLE
14877: LD_VAR 0 9
14881: INC
14882: ST_TO_ADDR
14883: LD_INT 1
14885: PUSH
14886: FOR_DOWNTO
14887: IFFALSE 14932
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
14889: LD_ADDR_VAR 0 6
14893: PUSH
14894: LD_VAR 0 6
14898: PPUSH
14899: LD_VAR 0 9
14903: PUSH
14904: LD_VAR 0 7
14908: MINUS
14909: PUSH
14910: LD_INT 1
14912: PLUS
14913: PPUSH
14914: LD_VAR 0 9
14918: PUSH
14919: LD_VAR 0 7
14923: ARRAY
14924: PPUSH
14925: CALL_OW 1
14929: ST_TO_ADDR
14930: GO 14886
14932: POP
14933: POP
// end ; tmp := [ ] ;
14934: LD_ADDR_VAR 0 9
14938: PUSH
14939: EMPTY
14940: ST_TO_ADDR
// if mode then
14941: LD_VAR 0 5
14945: IFFALSE 15014
// begin for i = 1 to result do
14947: LD_ADDR_VAR 0 7
14951: PUSH
14952: DOUBLE
14953: LD_INT 1
14955: DEC
14956: ST_TO_ADDR
14957: LD_VAR 0 6
14961: PUSH
14962: FOR_TO
14963: IFFALSE 15002
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
14965: LD_ADDR_VAR 0 9
14969: PUSH
14970: LD_VAR 0 9
14974: PPUSH
14975: LD_VAR 0 7
14979: PPUSH
14980: LD_VAR 0 6
14984: PUSH
14985: LD_VAR 0 7
14989: ARRAY
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: CALL_OW 1
14999: ST_TO_ADDR
15000: GO 14962
15002: POP
15003: POP
// result := tmp ;
15004: LD_ADDR_VAR 0 6
15008: PUSH
15009: LD_VAR 0 9
15013: ST_TO_ADDR
// end ; end ;
15014: LD_VAR 0 6
15018: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15019: LD_INT 0
15021: PPUSH
15022: PPUSH
15023: PPUSH
15024: PPUSH
15025: PPUSH
15026: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15027: LD_ADDR_VAR 0 5
15031: PUSH
15032: LD_INT 0
15034: PUSH
15035: LD_INT 0
15037: PUSH
15038: LD_INT 0
15040: PUSH
15041: EMPTY
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: ST_TO_ADDR
// if not x or not y then
15049: LD_VAR 0 2
15053: NOT
15054: PUSH
15055: LD_VAR 0 3
15059: NOT
15060: OR
15061: IFFALSE 15065
// exit ;
15063: GO 16715
// if not range then
15065: LD_VAR 0 4
15069: NOT
15070: IFFALSE 15080
// range := 10 ;
15072: LD_ADDR_VAR 0 4
15076: PUSH
15077: LD_INT 10
15079: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15080: LD_ADDR_VAR 0 8
15084: PUSH
15085: LD_INT 81
15087: PUSH
15088: LD_VAR 0 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 92
15099: PUSH
15100: LD_VAR 0 2
15104: PUSH
15105: LD_VAR 0 3
15109: PUSH
15110: LD_VAR 0 4
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 3
15123: PUSH
15124: LD_INT 21
15126: PUSH
15127: LD_INT 3
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: PPUSH
15143: CALL_OW 69
15147: ST_TO_ADDR
// if not tmp then
15148: LD_VAR 0 8
15152: NOT
15153: IFFALSE 15157
// exit ;
15155: GO 16715
// for i in tmp do
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 8
15166: PUSH
15167: FOR_IN
15168: IFFALSE 16690
// begin points := [ 0 , 0 , 0 ] ;
15170: LD_ADDR_VAR 0 9
15174: PUSH
15175: LD_INT 0
15177: PUSH
15178: LD_INT 0
15180: PUSH
15181: LD_INT 0
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: ST_TO_ADDR
// bpoints := 1 ;
15189: LD_ADDR_VAR 0 10
15193: PUSH
15194: LD_INT 1
15196: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15197: LD_VAR 0 6
15201: PPUSH
15202: CALL_OW 247
15206: PUSH
15207: LD_INT 1
15209: DOUBLE
15210: EQUAL
15211: IFTRUE 15215
15213: GO 15793
15215: POP
// begin if GetClass ( i ) = 1 then
15216: LD_VAR 0 6
15220: PPUSH
15221: CALL_OW 257
15225: PUSH
15226: LD_INT 1
15228: EQUAL
15229: IFFALSE 15250
// points := [ 10 , 5 , 3 ] ;
15231: LD_ADDR_VAR 0 9
15235: PUSH
15236: LD_INT 10
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: LD_INT 3
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: LIST
15249: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15250: LD_VAR 0 6
15254: PPUSH
15255: CALL_OW 257
15259: PUSH
15260: LD_INT 2
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: LD_INT 4
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: IN
15274: IFFALSE 15295
// points := [ 3 , 2 , 1 ] ;
15276: LD_ADDR_VAR 0 9
15280: PUSH
15281: LD_INT 3
15283: PUSH
15284: LD_INT 2
15286: PUSH
15287: LD_INT 1
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15295: LD_VAR 0 6
15299: PPUSH
15300: CALL_OW 257
15304: PUSH
15305: LD_INT 5
15307: EQUAL
15308: IFFALSE 15329
// points := [ 130 , 5 , 2 ] ;
15310: LD_ADDR_VAR 0 9
15314: PUSH
15315: LD_INT 130
15317: PUSH
15318: LD_INT 5
15320: PUSH
15321: LD_INT 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: LIST
15328: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15329: LD_VAR 0 6
15333: PPUSH
15334: CALL_OW 257
15338: PUSH
15339: LD_INT 8
15341: EQUAL
15342: IFFALSE 15363
// points := [ 35 , 35 , 30 ] ;
15344: LD_ADDR_VAR 0 9
15348: PUSH
15349: LD_INT 35
15351: PUSH
15352: LD_INT 35
15354: PUSH
15355: LD_INT 30
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15363: LD_VAR 0 6
15367: PPUSH
15368: CALL_OW 257
15372: PUSH
15373: LD_INT 9
15375: EQUAL
15376: IFFALSE 15397
// points := [ 20 , 55 , 40 ] ;
15378: LD_ADDR_VAR 0 9
15382: PUSH
15383: LD_INT 20
15385: PUSH
15386: LD_INT 55
15388: PUSH
15389: LD_INT 40
15391: PUSH
15392: EMPTY
15393: LIST
15394: LIST
15395: LIST
15396: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15397: LD_VAR 0 6
15401: PPUSH
15402: CALL_OW 257
15406: PUSH
15407: LD_INT 12
15409: PUSH
15410: LD_INT 16
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: IN
15417: IFFALSE 15438
// points := [ 5 , 3 , 2 ] ;
15419: LD_ADDR_VAR 0 9
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 3
15429: PUSH
15430: LD_INT 2
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15438: LD_VAR 0 6
15442: PPUSH
15443: CALL_OW 257
15447: PUSH
15448: LD_INT 17
15450: EQUAL
15451: IFFALSE 15472
// points := [ 100 , 50 , 75 ] ;
15453: LD_ADDR_VAR 0 9
15457: PUSH
15458: LD_INT 100
15460: PUSH
15461: LD_INT 50
15463: PUSH
15464: LD_INT 75
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15472: LD_VAR 0 6
15476: PPUSH
15477: CALL_OW 257
15481: PUSH
15482: LD_INT 15
15484: EQUAL
15485: IFFALSE 15506
// points := [ 10 , 5 , 3 ] ;
15487: LD_ADDR_VAR 0 9
15491: PUSH
15492: LD_INT 10
15494: PUSH
15495: LD_INT 5
15497: PUSH
15498: LD_INT 3
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: LIST
15505: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15506: LD_VAR 0 6
15510: PPUSH
15511: CALL_OW 257
15515: PUSH
15516: LD_INT 14
15518: EQUAL
15519: IFFALSE 15540
// points := [ 10 , 0 , 0 ] ;
15521: LD_ADDR_VAR 0 9
15525: PUSH
15526: LD_INT 10
15528: PUSH
15529: LD_INT 0
15531: PUSH
15532: LD_INT 0
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: LIST
15539: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15540: LD_VAR 0 6
15544: PPUSH
15545: CALL_OW 257
15549: PUSH
15550: LD_INT 11
15552: EQUAL
15553: IFFALSE 15574
// points := [ 30 , 10 , 5 ] ;
15555: LD_ADDR_VAR 0 9
15559: PUSH
15560: LD_INT 30
15562: PUSH
15563: LD_INT 10
15565: PUSH
15566: LD_INT 5
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: LIST
15573: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15574: LD_VAR 0 1
15578: PPUSH
15579: LD_INT 5
15581: PPUSH
15582: CALL_OW 321
15586: PUSH
15587: LD_INT 2
15589: EQUAL
15590: IFFALSE 15607
// bpoints := bpoints * 1.8 ;
15592: LD_ADDR_VAR 0 10
15596: PUSH
15597: LD_VAR 0 10
15601: PUSH
15602: LD_REAL  1.80000000000000E+0000
15605: MUL
15606: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15607: LD_VAR 0 6
15611: PPUSH
15612: CALL_OW 257
15616: PUSH
15617: LD_INT 1
15619: PUSH
15620: LD_INT 2
15622: PUSH
15623: LD_INT 3
15625: PUSH
15626: LD_INT 4
15628: PUSH
15629: EMPTY
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: IN
15635: PUSH
15636: LD_VAR 0 1
15640: PPUSH
15641: LD_INT 51
15643: PPUSH
15644: CALL_OW 321
15648: PUSH
15649: LD_INT 2
15651: EQUAL
15652: AND
15653: IFFALSE 15670
// bpoints := bpoints * 1.2 ;
15655: LD_ADDR_VAR 0 10
15659: PUSH
15660: LD_VAR 0 10
15664: PUSH
15665: LD_REAL  1.20000000000000E+0000
15668: MUL
15669: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15670: LD_VAR 0 6
15674: PPUSH
15675: CALL_OW 257
15679: PUSH
15680: LD_INT 5
15682: PUSH
15683: LD_INT 7
15685: PUSH
15686: LD_INT 9
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: IN
15694: PUSH
15695: LD_VAR 0 1
15699: PPUSH
15700: LD_INT 52
15702: PPUSH
15703: CALL_OW 321
15707: PUSH
15708: LD_INT 2
15710: EQUAL
15711: AND
15712: IFFALSE 15729
// bpoints := bpoints * 1.5 ;
15714: LD_ADDR_VAR 0 10
15718: PUSH
15719: LD_VAR 0 10
15723: PUSH
15724: LD_REAL  1.50000000000000E+0000
15727: MUL
15728: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15729: LD_VAR 0 1
15733: PPUSH
15734: LD_INT 66
15736: PPUSH
15737: CALL_OW 321
15741: PUSH
15742: LD_INT 2
15744: EQUAL
15745: IFFALSE 15762
// bpoints := bpoints * 1.1 ;
15747: LD_ADDR_VAR 0 10
15751: PUSH
15752: LD_VAR 0 10
15756: PUSH
15757: LD_REAL  1.10000000000000E+0000
15760: MUL
15761: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15762: LD_ADDR_VAR 0 10
15766: PUSH
15767: LD_VAR 0 10
15771: PUSH
15772: LD_VAR 0 6
15776: PPUSH
15777: LD_INT 1
15779: PPUSH
15780: CALL_OW 259
15784: PUSH
15785: LD_REAL  1.15000000000000E+0000
15788: MUL
15789: MUL
15790: ST_TO_ADDR
// end ; unit_vehicle :
15791: GO 16619
15793: LD_INT 2
15795: DOUBLE
15796: EQUAL
15797: IFTRUE 15801
15799: GO 16607
15801: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15802: LD_VAR 0 6
15806: PPUSH
15807: CALL_OW 264
15811: PUSH
15812: LD_INT 2
15814: PUSH
15815: LD_INT 42
15817: PUSH
15818: LD_INT 24
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: LIST
15825: IN
15826: IFFALSE 15847
// points := [ 25 , 5 , 3 ] ;
15828: LD_ADDR_VAR 0 9
15832: PUSH
15833: LD_INT 25
15835: PUSH
15836: LD_INT 5
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: LIST
15846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
15847: LD_VAR 0 6
15851: PPUSH
15852: CALL_OW 264
15856: PUSH
15857: LD_INT 4
15859: PUSH
15860: LD_INT 43
15862: PUSH
15863: LD_INT 25
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: IN
15871: IFFALSE 15892
// points := [ 40 , 15 , 5 ] ;
15873: LD_ADDR_VAR 0 9
15877: PUSH
15878: LD_INT 40
15880: PUSH
15881: LD_INT 15
15883: PUSH
15884: LD_INT 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
15892: LD_VAR 0 6
15896: PPUSH
15897: CALL_OW 264
15901: PUSH
15902: LD_INT 3
15904: PUSH
15905: LD_INT 23
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: IN
15912: IFFALSE 15933
// points := [ 7 , 25 , 8 ] ;
15914: LD_ADDR_VAR 0 9
15918: PUSH
15919: LD_INT 7
15921: PUSH
15922: LD_INT 25
15924: PUSH
15925: LD_INT 8
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
15933: LD_VAR 0 6
15937: PPUSH
15938: CALL_OW 264
15942: PUSH
15943: LD_INT 5
15945: PUSH
15946: LD_INT 27
15948: PUSH
15949: LD_INT 44
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: IN
15957: IFFALSE 15978
// points := [ 14 , 50 , 16 ] ;
15959: LD_ADDR_VAR 0 9
15963: PUSH
15964: LD_INT 14
15966: PUSH
15967: LD_INT 50
15969: PUSH
15970: LD_INT 16
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
15978: LD_VAR 0 6
15982: PPUSH
15983: CALL_OW 264
15987: PUSH
15988: LD_INT 6
15990: PUSH
15991: LD_INT 46
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: IN
15998: IFFALSE 16019
// points := [ 32 , 120 , 70 ] ;
16000: LD_ADDR_VAR 0 9
16004: PUSH
16005: LD_INT 32
16007: PUSH
16008: LD_INT 120
16010: PUSH
16011: LD_INT 70
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16019: LD_VAR 0 6
16023: PPUSH
16024: CALL_OW 264
16028: PUSH
16029: LD_INT 7
16031: PUSH
16032: LD_INT 28
16034: PUSH
16035: LD_INT 45
16037: PUSH
16038: LD_INT 92
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: IN
16047: IFFALSE 16068
// points := [ 35 , 20 , 45 ] ;
16049: LD_ADDR_VAR 0 9
16053: PUSH
16054: LD_INT 35
16056: PUSH
16057: LD_INT 20
16059: PUSH
16060: LD_INT 45
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16068: LD_VAR 0 6
16072: PPUSH
16073: CALL_OW 264
16077: PUSH
16078: LD_INT 47
16080: PUSH
16081: EMPTY
16082: LIST
16083: IN
16084: IFFALSE 16105
// points := [ 67 , 45 , 75 ] ;
16086: LD_ADDR_VAR 0 9
16090: PUSH
16091: LD_INT 67
16093: PUSH
16094: LD_INT 45
16096: PUSH
16097: LD_INT 75
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16105: LD_VAR 0 6
16109: PPUSH
16110: CALL_OW 264
16114: PUSH
16115: LD_INT 26
16117: PUSH
16118: EMPTY
16119: LIST
16120: IN
16121: IFFALSE 16142
// points := [ 120 , 30 , 80 ] ;
16123: LD_ADDR_VAR 0 9
16127: PUSH
16128: LD_INT 120
16130: PUSH
16131: LD_INT 30
16133: PUSH
16134: LD_INT 80
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16142: LD_VAR 0 6
16146: PPUSH
16147: CALL_OW 264
16151: PUSH
16152: LD_INT 22
16154: PUSH
16155: EMPTY
16156: LIST
16157: IN
16158: IFFALSE 16179
// points := [ 40 , 1 , 1 ] ;
16160: LD_ADDR_VAR 0 9
16164: PUSH
16165: LD_INT 40
16167: PUSH
16168: LD_INT 1
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16179: LD_VAR 0 6
16183: PPUSH
16184: CALL_OW 264
16188: PUSH
16189: LD_INT 29
16191: PUSH
16192: EMPTY
16193: LIST
16194: IN
16195: IFFALSE 16216
// points := [ 70 , 200 , 400 ] ;
16197: LD_ADDR_VAR 0 9
16201: PUSH
16202: LD_INT 70
16204: PUSH
16205: LD_INT 200
16207: PUSH
16208: LD_INT 400
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: LIST
16215: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16216: LD_VAR 0 6
16220: PPUSH
16221: CALL_OW 264
16225: PUSH
16226: LD_INT 14
16228: PUSH
16229: LD_INT 53
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: IN
16236: IFFALSE 16257
// points := [ 40 , 10 , 20 ] ;
16238: LD_ADDR_VAR 0 9
16242: PUSH
16243: LD_INT 40
16245: PUSH
16246: LD_INT 10
16248: PUSH
16249: LD_INT 20
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16257: LD_VAR 0 6
16261: PPUSH
16262: CALL_OW 264
16266: PUSH
16267: LD_INT 9
16269: PUSH
16270: EMPTY
16271: LIST
16272: IN
16273: IFFALSE 16294
// points := [ 5 , 70 , 20 ] ;
16275: LD_ADDR_VAR 0 9
16279: PUSH
16280: LD_INT 5
16282: PUSH
16283: LD_INT 70
16285: PUSH
16286: LD_INT 20
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16294: LD_VAR 0 6
16298: PPUSH
16299: CALL_OW 264
16303: PUSH
16304: LD_INT 10
16306: PUSH
16307: EMPTY
16308: LIST
16309: IN
16310: IFFALSE 16331
// points := [ 35 , 110 , 70 ] ;
16312: LD_ADDR_VAR 0 9
16316: PUSH
16317: LD_INT 35
16319: PUSH
16320: LD_INT 110
16322: PUSH
16323: LD_INT 70
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16331: LD_VAR 0 6
16335: PPUSH
16336: CALL_OW 265
16340: PUSH
16341: LD_INT 25
16343: EQUAL
16344: IFFALSE 16365
// points := [ 80 , 65 , 100 ] ;
16346: LD_ADDR_VAR 0 9
16350: PUSH
16351: LD_INT 80
16353: PUSH
16354: LD_INT 65
16356: PUSH
16357: LD_INT 100
16359: PUSH
16360: EMPTY
16361: LIST
16362: LIST
16363: LIST
16364: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16365: LD_VAR 0 6
16369: PPUSH
16370: CALL_OW 263
16374: PUSH
16375: LD_INT 1
16377: EQUAL
16378: IFFALSE 16413
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16380: LD_ADDR_VAR 0 10
16384: PUSH
16385: LD_VAR 0 10
16389: PUSH
16390: LD_VAR 0 6
16394: PPUSH
16395: CALL_OW 311
16399: PPUSH
16400: LD_INT 3
16402: PPUSH
16403: CALL_OW 259
16407: PUSH
16408: LD_INT 4
16410: MUL
16411: MUL
16412: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16413: LD_VAR 0 6
16417: PPUSH
16418: CALL_OW 263
16422: PUSH
16423: LD_INT 2
16425: EQUAL
16426: IFFALSE 16477
// begin j := IsControledBy ( i ) ;
16428: LD_ADDR_VAR 0 7
16432: PUSH
16433: LD_VAR 0 6
16437: PPUSH
16438: CALL_OW 312
16442: ST_TO_ADDR
// if j then
16443: LD_VAR 0 7
16447: IFFALSE 16477
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16449: LD_ADDR_VAR 0 10
16453: PUSH
16454: LD_VAR 0 10
16458: PUSH
16459: LD_VAR 0 7
16463: PPUSH
16464: LD_INT 3
16466: PPUSH
16467: CALL_OW 259
16471: PUSH
16472: LD_INT 3
16474: MUL
16475: MUL
16476: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16477: LD_VAR 0 6
16481: PPUSH
16482: CALL_OW 264
16486: PUSH
16487: LD_INT 5
16489: PUSH
16490: LD_INT 6
16492: PUSH
16493: LD_INT 46
16495: PUSH
16496: LD_INT 44
16498: PUSH
16499: LD_INT 47
16501: PUSH
16502: LD_INT 45
16504: PUSH
16505: LD_INT 28
16507: PUSH
16508: LD_INT 7
16510: PUSH
16511: LD_INT 27
16513: PUSH
16514: LD_INT 29
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: IN
16529: PUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: LD_INT 52
16537: PPUSH
16538: CALL_OW 321
16542: PUSH
16543: LD_INT 2
16545: EQUAL
16546: AND
16547: IFFALSE 16564
// bpoints := bpoints * 1.2 ;
16549: LD_ADDR_VAR 0 10
16553: PUSH
16554: LD_VAR 0 10
16558: PUSH
16559: LD_REAL  1.20000000000000E+0000
16562: MUL
16563: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16564: LD_VAR 0 6
16568: PPUSH
16569: CALL_OW 264
16573: PUSH
16574: LD_INT 6
16576: PUSH
16577: LD_INT 46
16579: PUSH
16580: LD_INT 47
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: IN
16588: IFFALSE 16605
// bpoints := bpoints * 1.2 ;
16590: LD_ADDR_VAR 0 10
16594: PUSH
16595: LD_VAR 0 10
16599: PUSH
16600: LD_REAL  1.20000000000000E+0000
16603: MUL
16604: ST_TO_ADDR
// end ; unit_building :
16605: GO 16619
16607: LD_INT 3
16609: DOUBLE
16610: EQUAL
16611: IFTRUE 16615
16613: GO 16618
16615: POP
// ; end ;
16616: GO 16619
16618: POP
// for j = 1 to 3 do
16619: LD_ADDR_VAR 0 7
16623: PUSH
16624: DOUBLE
16625: LD_INT 1
16627: DEC
16628: ST_TO_ADDR
16629: LD_INT 3
16631: PUSH
16632: FOR_TO
16633: IFFALSE 16686
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16635: LD_ADDR_VAR 0 5
16639: PUSH
16640: LD_VAR 0 5
16644: PPUSH
16645: LD_VAR 0 7
16649: PPUSH
16650: LD_VAR 0 5
16654: PUSH
16655: LD_VAR 0 7
16659: ARRAY
16660: PUSH
16661: LD_VAR 0 9
16665: PUSH
16666: LD_VAR 0 7
16670: ARRAY
16671: PUSH
16672: LD_VAR 0 10
16676: MUL
16677: PLUS
16678: PPUSH
16679: CALL_OW 1
16683: ST_TO_ADDR
16684: GO 16632
16686: POP
16687: POP
// end ;
16688: GO 15167
16690: POP
16691: POP
// result := Replace ( result , 4 , tmp ) ;
16692: LD_ADDR_VAR 0 5
16696: PUSH
16697: LD_VAR 0 5
16701: PPUSH
16702: LD_INT 4
16704: PPUSH
16705: LD_VAR 0 8
16709: PPUSH
16710: CALL_OW 1
16714: ST_TO_ADDR
// end ;
16715: LD_VAR 0 5
16719: RET
// export function DangerAtRange ( unit , range ) ; begin
16720: LD_INT 0
16722: PPUSH
// if not unit then
16723: LD_VAR 0 1
16727: NOT
16728: IFFALSE 16732
// exit ;
16730: GO 16777
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16732: LD_ADDR_VAR 0 3
16736: PUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 255
16746: PPUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 250
16756: PPUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 251
16766: PPUSH
16767: LD_VAR 0 2
16771: PPUSH
16772: CALL 15019 0 4
16776: ST_TO_ADDR
// end ;
16777: LD_VAR 0 3
16781: RET
// export function DangerInArea ( side , area ) ; begin
16782: LD_INT 0
16784: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: LD_VAR 0 2
16794: PPUSH
16795: LD_INT 81
16797: PUSH
16798: LD_VAR 0 1
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PPUSH
16807: CALL_OW 70
16811: ST_TO_ADDR
// end ;
16812: LD_VAR 0 3
16816: RET
// export function IsExtension ( b ) ; begin
16817: LD_INT 0
16819: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16820: LD_ADDR_VAR 0 2
16824: PUSH
16825: LD_VAR 0 1
16829: PUSH
16830: LD_INT 23
16832: PUSH
16833: LD_INT 20
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_INT 17
16841: PUSH
16842: LD_INT 24
16844: PUSH
16845: LD_INT 21
16847: PUSH
16848: LD_INT 19
16850: PUSH
16851: LD_INT 16
16853: PUSH
16854: LD_INT 25
16856: PUSH
16857: LD_INT 18
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: IN
16872: ST_TO_ADDR
// end ;
16873: LD_VAR 0 2
16877: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
16878: LD_INT 0
16880: PPUSH
16881: PPUSH
16882: PPUSH
// result := [ ] ;
16883: LD_ADDR_VAR 0 4
16887: PUSH
16888: EMPTY
16889: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
16890: LD_ADDR_VAR 0 5
16894: PUSH
16895: LD_VAR 0 2
16899: PPUSH
16900: LD_INT 21
16902: PUSH
16903: LD_INT 3
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PPUSH
16910: CALL_OW 70
16914: ST_TO_ADDR
// if not tmp then
16915: LD_VAR 0 5
16919: NOT
16920: IFFALSE 16924
// exit ;
16922: GO 16988
// if checkLink then
16924: LD_VAR 0 3
16928: IFFALSE 16978
// begin for i in tmp do
16930: LD_ADDR_VAR 0 6
16934: PUSH
16935: LD_VAR 0 5
16939: PUSH
16940: FOR_IN
16941: IFFALSE 16976
// if GetBase ( i ) <> base then
16943: LD_VAR 0 6
16947: PPUSH
16948: CALL_OW 274
16952: PUSH
16953: LD_VAR 0 1
16957: NONEQUAL
16958: IFFALSE 16974
// ComLinkToBase ( base , i ) ;
16960: LD_VAR 0 1
16964: PPUSH
16965: LD_VAR 0 6
16969: PPUSH
16970: CALL_OW 169
16974: GO 16940
16976: POP
16977: POP
// end ; result := tmp ;
16978: LD_ADDR_VAR 0 4
16982: PUSH
16983: LD_VAR 0 5
16987: ST_TO_ADDR
// end ;
16988: LD_VAR 0 4
16992: RET
// export function ComComplete ( units , b ) ; var i ; begin
16993: LD_INT 0
16995: PPUSH
16996: PPUSH
// if not units then
16997: LD_VAR 0 1
17001: NOT
17002: IFFALSE 17006
// exit ;
17004: GO 17096
// for i in units do
17006: LD_ADDR_VAR 0 4
17010: PUSH
17011: LD_VAR 0 1
17015: PUSH
17016: FOR_IN
17017: IFFALSE 17094
// if BuildingStatus ( b ) = bs_build then
17019: LD_VAR 0 2
17023: PPUSH
17024: CALL_OW 461
17028: PUSH
17029: LD_INT 1
17031: EQUAL
17032: IFFALSE 17092
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17034: LD_VAR 0 4
17038: PPUSH
17039: LD_STRING h
17041: PUSH
17042: LD_VAR 0 2
17046: PPUSH
17047: CALL_OW 250
17051: PUSH
17052: LD_VAR 0 2
17056: PPUSH
17057: CALL_OW 251
17061: PUSH
17062: LD_VAR 0 2
17066: PUSH
17067: LD_INT 0
17069: PUSH
17070: LD_INT 0
17072: PUSH
17073: LD_INT 0
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: PPUSH
17088: CALL_OW 446
17092: GO 17016
17094: POP
17095: POP
// end ;
17096: LD_VAR 0 3
17100: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17101: LD_INT 0
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17109: LD_VAR 0 1
17113: NOT
17114: PUSH
17115: LD_VAR 0 1
17119: PPUSH
17120: CALL_OW 263
17124: PUSH
17125: LD_INT 2
17127: NONEQUAL
17128: OR
17129: IFFALSE 17133
// exit ;
17131: GO 17449
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17133: LD_ADDR_VAR 0 6
17137: PUSH
17138: LD_INT 22
17140: PUSH
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 255
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 30
17160: PUSH
17161: LD_INT 36
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: LD_INT 34
17170: PUSH
17171: LD_INT 31
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: ST_TO_ADDR
// if not tmp then
17192: LD_VAR 0 6
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17449
// result := [ ] ;
17201: LD_ADDR_VAR 0 2
17205: PUSH
17206: EMPTY
17207: ST_TO_ADDR
// for i in tmp do
17208: LD_ADDR_VAR 0 3
17212: PUSH
17213: LD_VAR 0 6
17217: PUSH
17218: FOR_IN
17219: IFFALSE 17290
// begin t := UnitsInside ( i ) ;
17221: LD_ADDR_VAR 0 4
17225: PUSH
17226: LD_VAR 0 3
17230: PPUSH
17231: CALL_OW 313
17235: ST_TO_ADDR
// if t then
17236: LD_VAR 0 4
17240: IFFALSE 17288
// for j in t do
17242: LD_ADDR_VAR 0 7
17246: PUSH
17247: LD_VAR 0 4
17251: PUSH
17252: FOR_IN
17253: IFFALSE 17286
// result := Replace ( result , result + 1 , j ) ;
17255: LD_ADDR_VAR 0 2
17259: PUSH
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_VAR 0 2
17269: PUSH
17270: LD_INT 1
17272: PLUS
17273: PPUSH
17274: LD_VAR 0 7
17278: PPUSH
17279: CALL_OW 1
17283: ST_TO_ADDR
17284: GO 17252
17286: POP
17287: POP
// end ;
17288: GO 17218
17290: POP
17291: POP
// if not result then
17292: LD_VAR 0 2
17296: NOT
17297: IFFALSE 17301
// exit ;
17299: GO 17449
// mech := result [ 1 ] ;
17301: LD_ADDR_VAR 0 5
17305: PUSH
17306: LD_VAR 0 2
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: ST_TO_ADDR
// if result > 1 then
17315: LD_VAR 0 2
17319: PUSH
17320: LD_INT 1
17322: GREATER
17323: IFFALSE 17435
// begin for i = 2 to result do
17325: LD_ADDR_VAR 0 3
17329: PUSH
17330: DOUBLE
17331: LD_INT 2
17333: DEC
17334: ST_TO_ADDR
17335: LD_VAR 0 2
17339: PUSH
17340: FOR_TO
17341: IFFALSE 17433
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17343: LD_ADDR_VAR 0 4
17347: PUSH
17348: LD_VAR 0 2
17352: PUSH
17353: LD_VAR 0 3
17357: ARRAY
17358: PPUSH
17359: LD_INT 3
17361: PPUSH
17362: CALL_OW 259
17366: PUSH
17367: LD_VAR 0 2
17371: PUSH
17372: LD_VAR 0 3
17376: ARRAY
17377: PPUSH
17378: CALL_OW 432
17382: MINUS
17383: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17384: LD_VAR 0 4
17388: PUSH
17389: LD_VAR 0 5
17393: PPUSH
17394: LD_INT 3
17396: PPUSH
17397: CALL_OW 259
17401: PUSH
17402: LD_VAR 0 5
17406: PPUSH
17407: CALL_OW 432
17411: MINUS
17412: GREATEREQUAL
17413: IFFALSE 17431
// mech := result [ i ] ;
17415: LD_ADDR_VAR 0 5
17419: PUSH
17420: LD_VAR 0 2
17424: PUSH
17425: LD_VAR 0 3
17429: ARRAY
17430: ST_TO_ADDR
// end ;
17431: GO 17340
17433: POP
17434: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17435: LD_VAR 0 1
17439: PPUSH
17440: LD_VAR 0 5
17444: PPUSH
17445: CALL_OW 135
// end ;
17449: LD_VAR 0 2
17453: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17454: LD_INT 0
17456: PPUSH
17457: PPUSH
17458: PPUSH
17459: PPUSH
17460: PPUSH
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
// result := [ ] ;
17469: LD_ADDR_VAR 0 7
17473: PUSH
17474: EMPTY
17475: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 266
17485: PUSH
17486: LD_INT 0
17488: PUSH
17489: LD_INT 1
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: IN
17496: NOT
17497: IFFALSE 17501
// exit ;
17499: GO 19135
// if name then
17501: LD_VAR 0 3
17505: IFFALSE 17521
// SetBName ( base_dep , name ) ;
17507: LD_VAR 0 1
17511: PPUSH
17512: LD_VAR 0 3
17516: PPUSH
17517: CALL_OW 500
// base := GetBase ( base_dep ) ;
17521: LD_ADDR_VAR 0 15
17525: PUSH
17526: LD_VAR 0 1
17530: PPUSH
17531: CALL_OW 274
17535: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17536: LD_ADDR_VAR 0 16
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 255
17550: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17551: LD_ADDR_VAR 0 17
17555: PUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 248
17565: ST_TO_ADDR
// if sources then
17566: LD_VAR 0 5
17570: IFFALSE 17617
// for i = 1 to 3 do
17572: LD_ADDR_VAR 0 8
17576: PUSH
17577: DOUBLE
17578: LD_INT 1
17580: DEC
17581: ST_TO_ADDR
17582: LD_INT 3
17584: PUSH
17585: FOR_TO
17586: IFFALSE 17615
// AddResourceType ( base , i , sources [ i ] ) ;
17588: LD_VAR 0 15
17592: PPUSH
17593: LD_VAR 0 8
17597: PPUSH
17598: LD_VAR 0 5
17602: PUSH
17603: LD_VAR 0 8
17607: ARRAY
17608: PPUSH
17609: CALL_OW 276
17613: GO 17585
17615: POP
17616: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17617: LD_ADDR_VAR 0 18
17621: PUSH
17622: LD_VAR 0 15
17626: PPUSH
17627: LD_VAR 0 2
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: CALL 16878 0 3
17639: ST_TO_ADDR
// InitHc ;
17640: CALL_OW 19
// InitUc ;
17644: CALL_OW 18
// uc_side := side ;
17648: LD_ADDR_OWVAR 20
17652: PUSH
17653: LD_VAR 0 16
17657: ST_TO_ADDR
// uc_nation := nation ;
17658: LD_ADDR_OWVAR 21
17662: PUSH
17663: LD_VAR 0 17
17667: ST_TO_ADDR
// if buildings then
17668: LD_VAR 0 18
17672: IFFALSE 18994
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17674: LD_ADDR_VAR 0 19
17678: PUSH
17679: LD_VAR 0 18
17683: PPUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 30
17689: PUSH
17690: LD_INT 29
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 30
17699: PUSH
17700: LD_INT 30
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: PPUSH
17712: CALL_OW 72
17716: ST_TO_ADDR
// if tmp then
17717: LD_VAR 0 19
17721: IFFALSE 17769
// for i in tmp do
17723: LD_ADDR_VAR 0 8
17727: PUSH
17728: LD_VAR 0 19
17732: PUSH
17733: FOR_IN
17734: IFFALSE 17767
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17736: LD_VAR 0 8
17740: PPUSH
17741: CALL_OW 250
17745: PPUSH
17746: LD_VAR 0 8
17750: PPUSH
17751: CALL_OW 251
17755: PPUSH
17756: LD_VAR 0 16
17760: PPUSH
17761: CALL_OW 441
17765: GO 17733
17767: POP
17768: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17769: LD_VAR 0 18
17773: PPUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 30
17779: PUSH
17780: LD_INT 32
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 30
17789: PUSH
17790: LD_INT 33
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: EMPTY
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 72
17806: IFFALSE 17894
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17808: LD_ADDR_VAR 0 8
17812: PUSH
17813: LD_VAR 0 18
17817: PPUSH
17818: LD_INT 2
17820: PUSH
17821: LD_INT 30
17823: PUSH
17824: LD_INT 32
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: PUSH
17831: LD_INT 30
17833: PUSH
17834: LD_INT 33
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: LIST
17845: PPUSH
17846: CALL_OW 72
17850: PUSH
17851: FOR_IN
17852: IFFALSE 17892
// begin if not GetBWeapon ( i ) then
17854: LD_VAR 0 8
17858: PPUSH
17859: CALL_OW 269
17863: NOT
17864: IFFALSE 17890
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
17866: LD_VAR 0 8
17870: PPUSH
17871: LD_VAR 0 8
17875: PPUSH
17876: LD_VAR 0 2
17880: PPUSH
17881: CALL 19140 0 2
17885: PPUSH
17886: CALL_OW 431
// end ;
17890: GO 17851
17892: POP
17893: POP
// end ; for i = 1 to personel do
17894: LD_ADDR_VAR 0 8
17898: PUSH
17899: DOUBLE
17900: LD_INT 1
17902: DEC
17903: ST_TO_ADDR
17904: LD_VAR 0 6
17908: PUSH
17909: FOR_TO
17910: IFFALSE 18974
// begin if i > 4 then
17912: LD_VAR 0 8
17916: PUSH
17917: LD_INT 4
17919: GREATER
17920: IFFALSE 17924
// break ;
17922: GO 18974
// case i of 1 :
17924: LD_VAR 0 8
17928: PUSH
17929: LD_INT 1
17931: DOUBLE
17932: EQUAL
17933: IFTRUE 17937
17935: GO 18017
17937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
17938: LD_ADDR_VAR 0 12
17942: PUSH
17943: LD_VAR 0 18
17947: PPUSH
17948: LD_INT 22
17950: PUSH
17951: LD_VAR 0 16
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 58
17962: PUSH
17963: EMPTY
17964: LIST
17965: PUSH
17966: LD_INT 2
17968: PUSH
17969: LD_INT 30
17971: PUSH
17972: LD_INT 32
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 30
17981: PUSH
17982: LD_INT 4
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 30
17991: PUSH
17992: LD_INT 5
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 72
18014: ST_TO_ADDR
18015: GO 18239
18017: LD_INT 2
18019: DOUBLE
18020: EQUAL
18021: IFTRUE 18025
18023: GO 18087
18025: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18026: LD_ADDR_VAR 0 12
18030: PUSH
18031: LD_VAR 0 18
18035: PPUSH
18036: LD_INT 22
18038: PUSH
18039: LD_VAR 0 16
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 2
18050: PUSH
18051: LD_INT 30
18053: PUSH
18054: LD_INT 0
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 30
18063: PUSH
18064: LD_INT 1
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 72
18084: ST_TO_ADDR
18085: GO 18239
18087: LD_INT 3
18089: DOUBLE
18090: EQUAL
18091: IFTRUE 18095
18093: GO 18157
18095: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18096: LD_ADDR_VAR 0 12
18100: PUSH
18101: LD_VAR 0 18
18105: PPUSH
18106: LD_INT 22
18108: PUSH
18109: LD_VAR 0 16
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: LD_INT 2
18120: PUSH
18121: LD_INT 30
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 30
18133: PUSH
18134: LD_INT 3
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PPUSH
18150: CALL_OW 72
18154: ST_TO_ADDR
18155: GO 18239
18157: LD_INT 4
18159: DOUBLE
18160: EQUAL
18161: IFTRUE 18165
18163: GO 18238
18165: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18166: LD_ADDR_VAR 0 12
18170: PUSH
18171: LD_VAR 0 18
18175: PPUSH
18176: LD_INT 22
18178: PUSH
18179: LD_VAR 0 16
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 30
18193: PUSH
18194: LD_INT 6
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 30
18203: PUSH
18204: LD_INT 7
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 30
18213: PUSH
18214: LD_INT 8
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL_OW 72
18235: ST_TO_ADDR
18236: GO 18239
18238: POP
// if i = 1 then
18239: LD_VAR 0 8
18243: PUSH
18244: LD_INT 1
18246: EQUAL
18247: IFFALSE 18358
// begin tmp := [ ] ;
18249: LD_ADDR_VAR 0 19
18253: PUSH
18254: EMPTY
18255: ST_TO_ADDR
// for j in f do
18256: LD_ADDR_VAR 0 9
18260: PUSH
18261: LD_VAR 0 12
18265: PUSH
18266: FOR_IN
18267: IFFALSE 18340
// if GetBType ( j ) = b_bunker then
18269: LD_VAR 0 9
18273: PPUSH
18274: CALL_OW 266
18278: PUSH
18279: LD_INT 32
18281: EQUAL
18282: IFFALSE 18309
// tmp := Insert ( tmp , 1 , j ) else
18284: LD_ADDR_VAR 0 19
18288: PUSH
18289: LD_VAR 0 19
18293: PPUSH
18294: LD_INT 1
18296: PPUSH
18297: LD_VAR 0 9
18301: PPUSH
18302: CALL_OW 2
18306: ST_TO_ADDR
18307: GO 18338
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18309: LD_ADDR_VAR 0 19
18313: PUSH
18314: LD_VAR 0 19
18318: PPUSH
18319: LD_VAR 0 19
18323: PUSH
18324: LD_INT 1
18326: PLUS
18327: PPUSH
18328: LD_VAR 0 9
18332: PPUSH
18333: CALL_OW 2
18337: ST_TO_ADDR
18338: GO 18266
18340: POP
18341: POP
// if tmp then
18342: LD_VAR 0 19
18346: IFFALSE 18358
// f := tmp ;
18348: LD_ADDR_VAR 0 12
18352: PUSH
18353: LD_VAR 0 19
18357: ST_TO_ADDR
// end ; x := personel [ i ] ;
18358: LD_ADDR_VAR 0 13
18362: PUSH
18363: LD_VAR 0 6
18367: PUSH
18368: LD_VAR 0 8
18372: ARRAY
18373: ST_TO_ADDR
// if x = - 1 then
18374: LD_VAR 0 13
18378: PUSH
18379: LD_INT 1
18381: NEG
18382: EQUAL
18383: IFFALSE 18592
// begin for j in f do
18385: LD_ADDR_VAR 0 9
18389: PUSH
18390: LD_VAR 0 12
18394: PUSH
18395: FOR_IN
18396: IFFALSE 18588
// repeat InitHc ;
18398: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18402: LD_VAR 0 9
18406: PPUSH
18407: CALL_OW 266
18411: PUSH
18412: LD_INT 5
18414: EQUAL
18415: IFFALSE 18485
// begin if UnitsInside ( j ) < 3 then
18417: LD_VAR 0 9
18421: PPUSH
18422: CALL_OW 313
18426: PUSH
18427: LD_INT 3
18429: LESS
18430: IFFALSE 18466
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18432: LD_INT 0
18434: PPUSH
18435: LD_INT 5
18437: PUSH
18438: LD_INT 8
18440: PUSH
18441: LD_INT 9
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: PUSH
18449: LD_VAR 0 17
18453: ARRAY
18454: PPUSH
18455: LD_VAR 0 4
18459: PPUSH
18460: CALL_OW 380
18464: GO 18483
// PrepareHuman ( false , i , skill ) ;
18466: LD_INT 0
18468: PPUSH
18469: LD_VAR 0 8
18473: PPUSH
18474: LD_VAR 0 4
18478: PPUSH
18479: CALL_OW 380
// end else
18483: GO 18502
// PrepareHuman ( false , i , skill ) ;
18485: LD_INT 0
18487: PPUSH
18488: LD_VAR 0 8
18492: PPUSH
18493: LD_VAR 0 4
18497: PPUSH
18498: CALL_OW 380
// un := CreateHuman ;
18502: LD_ADDR_VAR 0 14
18506: PUSH
18507: CALL_OW 44
18511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18512: LD_ADDR_VAR 0 7
18516: PUSH
18517: LD_VAR 0 7
18521: PPUSH
18522: LD_INT 1
18524: PPUSH
18525: LD_VAR 0 14
18529: PPUSH
18530: CALL_OW 2
18534: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18535: LD_VAR 0 14
18539: PPUSH
18540: LD_VAR 0 9
18544: PPUSH
18545: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18549: LD_VAR 0 9
18553: PPUSH
18554: CALL_OW 313
18558: PUSH
18559: LD_INT 6
18561: EQUAL
18562: PUSH
18563: LD_VAR 0 9
18567: PPUSH
18568: CALL_OW 266
18572: PUSH
18573: LD_INT 32
18575: PUSH
18576: LD_INT 31
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: IN
18583: OR
18584: IFFALSE 18398
18586: GO 18395
18588: POP
18589: POP
// end else
18590: GO 18972
// for j = 1 to x do
18592: LD_ADDR_VAR 0 9
18596: PUSH
18597: DOUBLE
18598: LD_INT 1
18600: DEC
18601: ST_TO_ADDR
18602: LD_VAR 0 13
18606: PUSH
18607: FOR_TO
18608: IFFALSE 18970
// begin InitHc ;
18610: CALL_OW 19
// if not f then
18614: LD_VAR 0 12
18618: NOT
18619: IFFALSE 18708
// begin PrepareHuman ( false , i , skill ) ;
18621: LD_INT 0
18623: PPUSH
18624: LD_VAR 0 8
18628: PPUSH
18629: LD_VAR 0 4
18633: PPUSH
18634: CALL_OW 380
// un := CreateHuman ;
18638: LD_ADDR_VAR 0 14
18642: PUSH
18643: CALL_OW 44
18647: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18648: LD_ADDR_VAR 0 7
18652: PUSH
18653: LD_VAR 0 7
18657: PPUSH
18658: LD_INT 1
18660: PPUSH
18661: LD_VAR 0 14
18665: PPUSH
18666: CALL_OW 2
18670: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18671: LD_VAR 0 14
18675: PPUSH
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 250
18685: PPUSH
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 251
18695: PPUSH
18696: LD_INT 10
18698: PPUSH
18699: LD_INT 0
18701: PPUSH
18702: CALL_OW 50
// continue ;
18706: GO 18607
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18708: LD_VAR 0 12
18712: PUSH
18713: LD_INT 1
18715: ARRAY
18716: PPUSH
18717: CALL_OW 313
18721: PUSH
18722: LD_VAR 0 12
18726: PUSH
18727: LD_INT 1
18729: ARRAY
18730: PPUSH
18731: CALL_OW 266
18735: PUSH
18736: LD_INT 32
18738: PUSH
18739: LD_INT 31
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: IN
18746: AND
18747: PUSH
18748: LD_VAR 0 12
18752: PUSH
18753: LD_INT 1
18755: ARRAY
18756: PPUSH
18757: CALL_OW 313
18761: PUSH
18762: LD_INT 6
18764: EQUAL
18765: OR
18766: IFFALSE 18786
// f := Delete ( f , 1 ) ;
18768: LD_ADDR_VAR 0 12
18772: PUSH
18773: LD_VAR 0 12
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 3
18785: ST_TO_ADDR
// if not f then
18786: LD_VAR 0 12
18790: NOT
18791: IFFALSE 18809
// begin x := x + 2 ;
18793: LD_ADDR_VAR 0 13
18797: PUSH
18798: LD_VAR 0 13
18802: PUSH
18803: LD_INT 2
18805: PLUS
18806: ST_TO_ADDR
// continue ;
18807: GO 18607
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18809: LD_VAR 0 12
18813: PUSH
18814: LD_INT 1
18816: ARRAY
18817: PPUSH
18818: CALL_OW 266
18822: PUSH
18823: LD_INT 5
18825: EQUAL
18826: IFFALSE 18900
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18828: LD_VAR 0 12
18832: PUSH
18833: LD_INT 1
18835: ARRAY
18836: PPUSH
18837: CALL_OW 313
18841: PUSH
18842: LD_INT 3
18844: LESS
18845: IFFALSE 18881
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18847: LD_INT 0
18849: PPUSH
18850: LD_INT 5
18852: PUSH
18853: LD_INT 8
18855: PUSH
18856: LD_INT 9
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: LD_VAR 0 17
18868: ARRAY
18869: PPUSH
18870: LD_VAR 0 4
18874: PPUSH
18875: CALL_OW 380
18879: GO 18898
// PrepareHuman ( false , i , skill ) ;
18881: LD_INT 0
18883: PPUSH
18884: LD_VAR 0 8
18888: PPUSH
18889: LD_VAR 0 4
18893: PPUSH
18894: CALL_OW 380
// end else
18898: GO 18917
// PrepareHuman ( false , i , skill ) ;
18900: LD_INT 0
18902: PPUSH
18903: LD_VAR 0 8
18907: PPUSH
18908: LD_VAR 0 4
18912: PPUSH
18913: CALL_OW 380
// un := CreateHuman ;
18917: LD_ADDR_VAR 0 14
18921: PUSH
18922: CALL_OW 44
18926: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18927: LD_ADDR_VAR 0 7
18931: PUSH
18932: LD_VAR 0 7
18936: PPUSH
18937: LD_INT 1
18939: PPUSH
18940: LD_VAR 0 14
18944: PPUSH
18945: CALL_OW 2
18949: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
18950: LD_VAR 0 14
18954: PPUSH
18955: LD_VAR 0 12
18959: PUSH
18960: LD_INT 1
18962: ARRAY
18963: PPUSH
18964: CALL_OW 52
// end ;
18968: GO 18607
18970: POP
18971: POP
// end ;
18972: GO 17909
18974: POP
18975: POP
// result := result ^ buildings ;
18976: LD_ADDR_VAR 0 7
18980: PUSH
18981: LD_VAR 0 7
18985: PUSH
18986: LD_VAR 0 18
18990: ADD
18991: ST_TO_ADDR
// end else
18992: GO 19135
// begin for i = 1 to personel do
18994: LD_ADDR_VAR 0 8
18998: PUSH
18999: DOUBLE
19000: LD_INT 1
19002: DEC
19003: ST_TO_ADDR
19004: LD_VAR 0 6
19008: PUSH
19009: FOR_TO
19010: IFFALSE 19133
// begin if i > 4 then
19012: LD_VAR 0 8
19016: PUSH
19017: LD_INT 4
19019: GREATER
19020: IFFALSE 19024
// break ;
19022: GO 19133
// x := personel [ i ] ;
19024: LD_ADDR_VAR 0 13
19028: PUSH
19029: LD_VAR 0 6
19033: PUSH
19034: LD_VAR 0 8
19038: ARRAY
19039: ST_TO_ADDR
// if x = - 1 then
19040: LD_VAR 0 13
19044: PUSH
19045: LD_INT 1
19047: NEG
19048: EQUAL
19049: IFFALSE 19053
// continue ;
19051: GO 19009
// PrepareHuman ( false , i , skill ) ;
19053: LD_INT 0
19055: PPUSH
19056: LD_VAR 0 8
19060: PPUSH
19061: LD_VAR 0 4
19065: PPUSH
19066: CALL_OW 380
// un := CreateHuman ;
19070: LD_ADDR_VAR 0 14
19074: PUSH
19075: CALL_OW 44
19079: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19080: LD_VAR 0 14
19084: PPUSH
19085: LD_VAR 0 1
19089: PPUSH
19090: CALL_OW 250
19094: PPUSH
19095: LD_VAR 0 1
19099: PPUSH
19100: CALL_OW 251
19104: PPUSH
19105: LD_INT 10
19107: PPUSH
19108: LD_INT 0
19110: PPUSH
19111: CALL_OW 50
// result := result ^ un ;
19115: LD_ADDR_VAR 0 7
19119: PUSH
19120: LD_VAR 0 7
19124: PUSH
19125: LD_VAR 0 14
19129: ADD
19130: ST_TO_ADDR
// end ;
19131: GO 19009
19133: POP
19134: POP
// end ; end ;
19135: LD_VAR 0 7
19139: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19140: LD_INT 0
19142: PPUSH
19143: PPUSH
19144: PPUSH
19145: PPUSH
19146: PPUSH
19147: PPUSH
19148: PPUSH
19149: PPUSH
19150: PPUSH
19151: PPUSH
19152: PPUSH
19153: PPUSH
19154: PPUSH
19155: PPUSH
19156: PPUSH
19157: PPUSH
// result := false ;
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: LD_INT 0
19165: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19166: LD_VAR 0 1
19170: NOT
19171: PUSH
19172: LD_VAR 0 1
19176: PPUSH
19177: CALL_OW 266
19181: PUSH
19182: LD_INT 32
19184: PUSH
19185: LD_INT 33
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: IN
19192: NOT
19193: OR
19194: IFFALSE 19198
// exit ;
19196: GO 20307
// nat := GetNation ( tower ) ;
19198: LD_ADDR_VAR 0 12
19202: PUSH
19203: LD_VAR 0 1
19207: PPUSH
19208: CALL_OW 248
19212: ST_TO_ADDR
// side := GetSide ( tower ) ;
19213: LD_ADDR_VAR 0 16
19217: PUSH
19218: LD_VAR 0 1
19222: PPUSH
19223: CALL_OW 255
19227: ST_TO_ADDR
// x := GetX ( tower ) ;
19228: LD_ADDR_VAR 0 10
19232: PUSH
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 250
19242: ST_TO_ADDR
// y := GetY ( tower ) ;
19243: LD_ADDR_VAR 0 11
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 251
19257: ST_TO_ADDR
// if not x or not y then
19258: LD_VAR 0 10
19262: NOT
19263: PUSH
19264: LD_VAR 0 11
19268: NOT
19269: OR
19270: IFFALSE 19274
// exit ;
19272: GO 20307
// weapon := 0 ;
19274: LD_ADDR_VAR 0 18
19278: PUSH
19279: LD_INT 0
19281: ST_TO_ADDR
// fac_list := [ ] ;
19282: LD_ADDR_VAR 0 17
19286: PUSH
19287: EMPTY
19288: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19289: LD_ADDR_VAR 0 6
19293: PUSH
19294: LD_VAR 0 1
19298: PPUSH
19299: CALL_OW 274
19303: PPUSH
19304: LD_VAR 0 2
19308: PPUSH
19309: LD_INT 0
19311: PPUSH
19312: CALL 16878 0 3
19316: PPUSH
19317: LD_INT 30
19319: PUSH
19320: LD_INT 3
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PPUSH
19327: CALL_OW 72
19331: ST_TO_ADDR
// if not factories then
19332: LD_VAR 0 6
19336: NOT
19337: IFFALSE 19341
// exit ;
19339: GO 20307
// for i in factories do
19341: LD_ADDR_VAR 0 8
19345: PUSH
19346: LD_VAR 0 6
19350: PUSH
19351: FOR_IN
19352: IFFALSE 19377
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19354: LD_ADDR_VAR 0 17
19358: PUSH
19359: LD_VAR 0 17
19363: PUSH
19364: LD_VAR 0 8
19368: PPUSH
19369: CALL_OW 478
19373: UNION
19374: ST_TO_ADDR
19375: GO 19351
19377: POP
19378: POP
// if not fac_list then
19379: LD_VAR 0 17
19383: NOT
19384: IFFALSE 19388
// exit ;
19386: GO 20307
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19388: LD_ADDR_VAR 0 5
19392: PUSH
19393: LD_INT 4
19395: PUSH
19396: LD_INT 5
19398: PUSH
19399: LD_INT 9
19401: PUSH
19402: LD_INT 10
19404: PUSH
19405: LD_INT 6
19407: PUSH
19408: LD_INT 7
19410: PUSH
19411: LD_INT 11
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 27
19425: PUSH
19426: LD_INT 28
19428: PUSH
19429: LD_INT 26
19431: PUSH
19432: LD_INT 30
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: LIST
19440: PUSH
19441: LD_INT 43
19443: PUSH
19444: LD_INT 44
19446: PUSH
19447: LD_INT 46
19449: PUSH
19450: LD_INT 45
19452: PUSH
19453: LD_INT 47
19455: PUSH
19456: LD_INT 49
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: PUSH
19472: LD_VAR 0 12
19476: ARRAY
19477: ST_TO_ADDR
// list := list isect fac_list ;
19478: LD_ADDR_VAR 0 5
19482: PUSH
19483: LD_VAR 0 5
19487: PUSH
19488: LD_VAR 0 17
19492: ISECT
19493: ST_TO_ADDR
// if not list then
19494: LD_VAR 0 5
19498: NOT
19499: IFFALSE 19503
// exit ;
19501: GO 20307
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19503: LD_VAR 0 12
19507: PUSH
19508: LD_INT 3
19510: EQUAL
19511: PUSH
19512: LD_INT 49
19514: PUSH
19515: LD_VAR 0 5
19519: IN
19520: AND
19521: PUSH
19522: LD_INT 31
19524: PPUSH
19525: LD_VAR 0 16
19529: PPUSH
19530: CALL_OW 321
19534: PUSH
19535: LD_INT 2
19537: EQUAL
19538: AND
19539: IFFALSE 19599
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19541: LD_INT 22
19543: PUSH
19544: LD_VAR 0 16
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 35
19555: PUSH
19556: LD_INT 49
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 91
19565: PUSH
19566: LD_VAR 0 1
19570: PUSH
19571: LD_INT 10
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: LIST
19583: PPUSH
19584: CALL_OW 69
19588: NOT
19589: IFFALSE 19599
// weapon := ru_time_lapser ;
19591: LD_ADDR_VAR 0 18
19595: PUSH
19596: LD_INT 49
19598: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19599: LD_VAR 0 12
19603: PUSH
19604: LD_INT 1
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: IN
19614: PUSH
19615: LD_INT 11
19617: PUSH
19618: LD_VAR 0 5
19622: IN
19623: PUSH
19624: LD_INT 30
19626: PUSH
19627: LD_VAR 0 5
19631: IN
19632: OR
19633: AND
19634: PUSH
19635: LD_INT 6
19637: PPUSH
19638: LD_VAR 0 16
19642: PPUSH
19643: CALL_OW 321
19647: PUSH
19648: LD_INT 2
19650: EQUAL
19651: AND
19652: IFFALSE 19817
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19654: LD_INT 22
19656: PUSH
19657: LD_VAR 0 16
19661: PUSH
19662: EMPTY
19663: LIST
19664: LIST
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 35
19671: PUSH
19672: LD_INT 11
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 35
19681: PUSH
19682: LD_INT 30
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 91
19696: PUSH
19697: LD_VAR 0 1
19701: PUSH
19702: LD_INT 18
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: LIST
19714: PPUSH
19715: CALL_OW 69
19719: NOT
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_VAR 0 16
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: LD_INT 30
19738: PUSH
19739: LD_INT 32
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 30
19748: PUSH
19749: LD_INT 33
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 91
19763: PUSH
19764: LD_VAR 0 1
19768: PUSH
19769: LD_INT 12
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: LIST
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: PUSH
19790: LD_INT 2
19792: GREATER
19793: AND
19794: IFFALSE 19817
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19796: LD_ADDR_VAR 0 18
19800: PUSH
19801: LD_INT 11
19803: PUSH
19804: LD_INT 30
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_VAR 0 12
19815: ARRAY
19816: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19817: LD_VAR 0 18
19821: NOT
19822: PUSH
19823: LD_INT 40
19825: PPUSH
19826: LD_VAR 0 16
19830: PPUSH
19831: CALL_OW 321
19835: PUSH
19836: LD_INT 2
19838: EQUAL
19839: AND
19840: PUSH
19841: LD_INT 7
19843: PUSH
19844: LD_VAR 0 5
19848: IN
19849: PUSH
19850: LD_INT 28
19852: PUSH
19853: LD_VAR 0 5
19857: IN
19858: OR
19859: PUSH
19860: LD_INT 45
19862: PUSH
19863: LD_VAR 0 5
19867: IN
19868: OR
19869: AND
19870: IFFALSE 20124
// begin hex := GetHexInfo ( x , y ) ;
19872: LD_ADDR_VAR 0 4
19876: PUSH
19877: LD_VAR 0 10
19881: PPUSH
19882: LD_VAR 0 11
19886: PPUSH
19887: CALL_OW 546
19891: ST_TO_ADDR
// if hex [ 1 ] then
19892: LD_VAR 0 4
19896: PUSH
19897: LD_INT 1
19899: ARRAY
19900: IFFALSE 19904
// exit ;
19902: GO 20307
// height := hex [ 2 ] ;
19904: LD_ADDR_VAR 0 15
19908: PUSH
19909: LD_VAR 0 4
19913: PUSH
19914: LD_INT 2
19916: ARRAY
19917: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
19918: LD_ADDR_VAR 0 14
19922: PUSH
19923: LD_INT 0
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: LD_INT 3
19931: PUSH
19932: LD_INT 5
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: ST_TO_ADDR
// for i in tmp do
19941: LD_ADDR_VAR 0 8
19945: PUSH
19946: LD_VAR 0 14
19950: PUSH
19951: FOR_IN
19952: IFFALSE 20122
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
19954: LD_ADDR_VAR 0 9
19958: PUSH
19959: LD_VAR 0 10
19963: PPUSH
19964: LD_VAR 0 8
19968: PPUSH
19969: LD_INT 5
19971: PPUSH
19972: CALL_OW 272
19976: PUSH
19977: LD_VAR 0 11
19981: PPUSH
19982: LD_VAR 0 8
19986: PPUSH
19987: LD_INT 5
19989: PPUSH
19990: CALL_OW 273
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
19999: LD_VAR 0 9
20003: PUSH
20004: LD_INT 1
20006: ARRAY
20007: PPUSH
20008: LD_VAR 0 9
20012: PUSH
20013: LD_INT 2
20015: ARRAY
20016: PPUSH
20017: CALL_OW 488
20021: IFFALSE 20120
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20023: LD_ADDR_VAR 0 4
20027: PUSH
20028: LD_VAR 0 9
20032: PUSH
20033: LD_INT 1
20035: ARRAY
20036: PPUSH
20037: LD_VAR 0 9
20041: PUSH
20042: LD_INT 2
20044: ARRAY
20045: PPUSH
20046: CALL_OW 546
20050: ST_TO_ADDR
// if hex [ 1 ] then
20051: LD_VAR 0 4
20055: PUSH
20056: LD_INT 1
20058: ARRAY
20059: IFFALSE 20063
// continue ;
20061: GO 19951
// h := hex [ 2 ] ;
20063: LD_ADDR_VAR 0 13
20067: PUSH
20068: LD_VAR 0 4
20072: PUSH
20073: LD_INT 2
20075: ARRAY
20076: ST_TO_ADDR
// if h + 7 < height then
20077: LD_VAR 0 13
20081: PUSH
20082: LD_INT 7
20084: PLUS
20085: PUSH
20086: LD_VAR 0 15
20090: LESS
20091: IFFALSE 20120
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20093: LD_ADDR_VAR 0 18
20097: PUSH
20098: LD_INT 7
20100: PUSH
20101: LD_INT 28
20103: PUSH
20104: LD_INT 45
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: LIST
20111: PUSH
20112: LD_VAR 0 12
20116: ARRAY
20117: ST_TO_ADDR
// break ;
20118: GO 20122
// end ; end ; end ;
20120: GO 19951
20122: POP
20123: POP
// end ; if not weapon then
20124: LD_VAR 0 18
20128: NOT
20129: IFFALSE 20189
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20131: LD_ADDR_VAR 0 5
20135: PUSH
20136: LD_VAR 0 5
20140: PUSH
20141: LD_INT 11
20143: PUSH
20144: LD_INT 30
20146: PUSH
20147: LD_INT 49
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: DIFF
20155: ST_TO_ADDR
// if not list then
20156: LD_VAR 0 5
20160: NOT
20161: IFFALSE 20165
// exit ;
20163: GO 20307
// weapon := list [ rand ( 1 , list ) ] ;
20165: LD_ADDR_VAR 0 18
20169: PUSH
20170: LD_VAR 0 5
20174: PUSH
20175: LD_INT 1
20177: PPUSH
20178: LD_VAR 0 5
20182: PPUSH
20183: CALL_OW 12
20187: ARRAY
20188: ST_TO_ADDR
// end ; if weapon then
20189: LD_VAR 0 18
20193: IFFALSE 20307
// begin tmp := CostOfWeapon ( weapon ) ;
20195: LD_ADDR_VAR 0 14
20199: PUSH
20200: LD_VAR 0 18
20204: PPUSH
20205: CALL_OW 451
20209: ST_TO_ADDR
// j := GetBase ( tower ) ;
20210: LD_ADDR_VAR 0 9
20214: PUSH
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 274
20224: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20225: LD_VAR 0 9
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL_OW 275
20237: PUSH
20238: LD_VAR 0 14
20242: PUSH
20243: LD_INT 1
20245: ARRAY
20246: GREATEREQUAL
20247: PUSH
20248: LD_VAR 0 9
20252: PPUSH
20253: LD_INT 2
20255: PPUSH
20256: CALL_OW 275
20260: PUSH
20261: LD_VAR 0 14
20265: PUSH
20266: LD_INT 2
20268: ARRAY
20269: GREATEREQUAL
20270: AND
20271: PUSH
20272: LD_VAR 0 9
20276: PPUSH
20277: LD_INT 3
20279: PPUSH
20280: CALL_OW 275
20284: PUSH
20285: LD_VAR 0 14
20289: PUSH
20290: LD_INT 3
20292: ARRAY
20293: GREATEREQUAL
20294: AND
20295: IFFALSE 20307
// result := weapon ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_VAR 0 18
20306: ST_TO_ADDR
// end ; end ;
20307: LD_VAR 0 3
20311: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20312: LD_INT 0
20314: PPUSH
20315: PPUSH
// result := true ;
20316: LD_ADDR_VAR 0 3
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if array1 = array2 then
20324: LD_VAR 0 1
20328: PUSH
20329: LD_VAR 0 2
20333: EQUAL
20334: IFFALSE 20394
// begin for i = 1 to array1 do
20336: LD_ADDR_VAR 0 4
20340: PUSH
20341: DOUBLE
20342: LD_INT 1
20344: DEC
20345: ST_TO_ADDR
20346: LD_VAR 0 1
20350: PUSH
20351: FOR_TO
20352: IFFALSE 20390
// if array1 [ i ] <> array2 [ i ] then
20354: LD_VAR 0 1
20358: PUSH
20359: LD_VAR 0 4
20363: ARRAY
20364: PUSH
20365: LD_VAR 0 2
20369: PUSH
20370: LD_VAR 0 4
20374: ARRAY
20375: NONEQUAL
20376: IFFALSE 20388
// begin result := false ;
20378: LD_ADDR_VAR 0 3
20382: PUSH
20383: LD_INT 0
20385: ST_TO_ADDR
// break ;
20386: GO 20390
// end ;
20388: GO 20351
20390: POP
20391: POP
// end else
20392: GO 20402
// result := false ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_INT 0
20401: ST_TO_ADDR
// end ;
20402: LD_VAR 0 3
20406: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20407: LD_INT 0
20409: PPUSH
20410: PPUSH
// if not array1 or not array2 then
20411: LD_VAR 0 1
20415: NOT
20416: PUSH
20417: LD_VAR 0 2
20421: NOT
20422: OR
20423: IFFALSE 20427
// exit ;
20425: GO 20491
// result := true ;
20427: LD_ADDR_VAR 0 3
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// for i = 1 to array1 do
20435: LD_ADDR_VAR 0 4
20439: PUSH
20440: DOUBLE
20441: LD_INT 1
20443: DEC
20444: ST_TO_ADDR
20445: LD_VAR 0 1
20449: PUSH
20450: FOR_TO
20451: IFFALSE 20489
// if array1 [ i ] <> array2 [ i ] then
20453: LD_VAR 0 1
20457: PUSH
20458: LD_VAR 0 4
20462: ARRAY
20463: PUSH
20464: LD_VAR 0 2
20468: PUSH
20469: LD_VAR 0 4
20473: ARRAY
20474: NONEQUAL
20475: IFFALSE 20487
// begin result := false ;
20477: LD_ADDR_VAR 0 3
20481: PUSH
20482: LD_INT 0
20484: ST_TO_ADDR
// break ;
20485: GO 20489
// end ;
20487: GO 20450
20489: POP
20490: POP
// end ;
20491: LD_VAR 0 3
20495: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20496: LD_INT 0
20498: PPUSH
20499: PPUSH
20500: PPUSH
// pom := GetBase ( fac ) ;
20501: LD_ADDR_VAR 0 5
20505: PUSH
20506: LD_VAR 0 1
20510: PPUSH
20511: CALL_OW 274
20515: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20516: LD_ADDR_VAR 0 4
20520: PUSH
20521: LD_VAR 0 2
20525: PUSH
20526: LD_INT 1
20528: ARRAY
20529: PPUSH
20530: LD_VAR 0 2
20534: PUSH
20535: LD_INT 2
20537: ARRAY
20538: PPUSH
20539: LD_VAR 0 2
20543: PUSH
20544: LD_INT 3
20546: ARRAY
20547: PPUSH
20548: LD_VAR 0 2
20552: PUSH
20553: LD_INT 4
20555: ARRAY
20556: PPUSH
20557: CALL_OW 449
20561: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20562: LD_ADDR_VAR 0 3
20566: PUSH
20567: LD_VAR 0 5
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 275
20579: PUSH
20580: LD_VAR 0 4
20584: PUSH
20585: LD_INT 1
20587: ARRAY
20588: GREATEREQUAL
20589: PUSH
20590: LD_VAR 0 5
20594: PPUSH
20595: LD_INT 2
20597: PPUSH
20598: CALL_OW 275
20602: PUSH
20603: LD_VAR 0 4
20607: PUSH
20608: LD_INT 2
20610: ARRAY
20611: GREATEREQUAL
20612: AND
20613: PUSH
20614: LD_VAR 0 5
20618: PPUSH
20619: LD_INT 3
20621: PPUSH
20622: CALL_OW 275
20626: PUSH
20627: LD_VAR 0 4
20631: PUSH
20632: LD_INT 3
20634: ARRAY
20635: GREATEREQUAL
20636: AND
20637: ST_TO_ADDR
// end ;
20638: LD_VAR 0 3
20642: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20643: LD_INT 0
20645: PPUSH
20646: PPUSH
20647: PPUSH
20648: PPUSH
// pom := GetBase ( building ) ;
20649: LD_ADDR_VAR 0 3
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 274
20663: ST_TO_ADDR
// if not pom then
20664: LD_VAR 0 3
20668: NOT
20669: IFFALSE 20673
// exit ;
20671: GO 20843
// btype := GetBType ( building ) ;
20673: LD_ADDR_VAR 0 5
20677: PUSH
20678: LD_VAR 0 1
20682: PPUSH
20683: CALL_OW 266
20687: ST_TO_ADDR
// if btype = b_armoury then
20688: LD_VAR 0 5
20692: PUSH
20693: LD_INT 4
20695: EQUAL
20696: IFFALSE 20706
// btype := b_barracks ;
20698: LD_ADDR_VAR 0 5
20702: PUSH
20703: LD_INT 5
20705: ST_TO_ADDR
// if btype = b_depot then
20706: LD_VAR 0 5
20710: PUSH
20711: LD_INT 0
20713: EQUAL
20714: IFFALSE 20724
// btype := b_warehouse ;
20716: LD_ADDR_VAR 0 5
20720: PUSH
20721: LD_INT 1
20723: ST_TO_ADDR
// if btype = b_workshop then
20724: LD_VAR 0 5
20728: PUSH
20729: LD_INT 2
20731: EQUAL
20732: IFFALSE 20742
// btype := b_factory ;
20734: LD_ADDR_VAR 0 5
20738: PUSH
20739: LD_INT 3
20741: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20742: LD_ADDR_VAR 0 4
20746: PUSH
20747: LD_VAR 0 5
20751: PPUSH
20752: LD_VAR 0 1
20756: PPUSH
20757: CALL_OW 248
20761: PPUSH
20762: CALL_OW 450
20766: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20767: LD_ADDR_VAR 0 2
20771: PUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: LD_INT 1
20779: PPUSH
20780: CALL_OW 275
20784: PUSH
20785: LD_VAR 0 4
20789: PUSH
20790: LD_INT 1
20792: ARRAY
20793: GREATEREQUAL
20794: PUSH
20795: LD_VAR 0 3
20799: PPUSH
20800: LD_INT 2
20802: PPUSH
20803: CALL_OW 275
20807: PUSH
20808: LD_VAR 0 4
20812: PUSH
20813: LD_INT 2
20815: ARRAY
20816: GREATEREQUAL
20817: AND
20818: PUSH
20819: LD_VAR 0 3
20823: PPUSH
20824: LD_INT 3
20826: PPUSH
20827: CALL_OW 275
20831: PUSH
20832: LD_VAR 0 4
20836: PUSH
20837: LD_INT 3
20839: ARRAY
20840: GREATEREQUAL
20841: AND
20842: ST_TO_ADDR
// end ;
20843: LD_VAR 0 2
20847: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
20848: LD_INT 0
20850: PPUSH
20851: PPUSH
20852: PPUSH
// pom := GetBase ( building ) ;
20853: LD_ADDR_VAR 0 4
20857: PUSH
20858: LD_VAR 0 1
20862: PPUSH
20863: CALL_OW 274
20867: ST_TO_ADDR
// if not pom then
20868: LD_VAR 0 4
20872: NOT
20873: IFFALSE 20877
// exit ;
20875: GO 20978
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20877: LD_ADDR_VAR 0 5
20881: PUSH
20882: LD_VAR 0 2
20886: PPUSH
20887: LD_VAR 0 1
20891: PPUSH
20892: CALL_OW 248
20896: PPUSH
20897: CALL_OW 450
20901: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20902: LD_ADDR_VAR 0 3
20906: PUSH
20907: LD_VAR 0 4
20911: PPUSH
20912: LD_INT 1
20914: PPUSH
20915: CALL_OW 275
20919: PUSH
20920: LD_VAR 0 5
20924: PUSH
20925: LD_INT 1
20927: ARRAY
20928: GREATEREQUAL
20929: PUSH
20930: LD_VAR 0 4
20934: PPUSH
20935: LD_INT 2
20937: PPUSH
20938: CALL_OW 275
20942: PUSH
20943: LD_VAR 0 5
20947: PUSH
20948: LD_INT 2
20950: ARRAY
20951: GREATEREQUAL
20952: AND
20953: PUSH
20954: LD_VAR 0 4
20958: PPUSH
20959: LD_INT 3
20961: PPUSH
20962: CALL_OW 275
20966: PUSH
20967: LD_VAR 0 5
20971: PUSH
20972: LD_INT 3
20974: ARRAY
20975: GREATEREQUAL
20976: AND
20977: ST_TO_ADDR
// end ;
20978: LD_VAR 0 3
20982: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
20983: LD_INT 0
20985: PPUSH
20986: PPUSH
20987: PPUSH
20988: PPUSH
20989: PPUSH
20990: PPUSH
20991: PPUSH
20992: PPUSH
20993: PPUSH
20994: PPUSH
20995: PPUSH
// result := false ;
20996: LD_ADDR_VAR 0 8
21000: PUSH
21001: LD_INT 0
21003: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21004: LD_VAR 0 5
21008: NOT
21009: PUSH
21010: LD_VAR 0 1
21014: NOT
21015: OR
21016: PUSH
21017: LD_VAR 0 2
21021: NOT
21022: OR
21023: PUSH
21024: LD_VAR 0 3
21028: NOT
21029: OR
21030: IFFALSE 21034
// exit ;
21032: GO 21848
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21034: LD_ADDR_VAR 0 14
21038: PUSH
21039: LD_VAR 0 1
21043: PPUSH
21044: LD_VAR 0 2
21048: PPUSH
21049: LD_VAR 0 3
21053: PPUSH
21054: LD_VAR 0 4
21058: PPUSH
21059: LD_VAR 0 5
21063: PUSH
21064: LD_INT 1
21066: ARRAY
21067: PPUSH
21068: CALL_OW 248
21072: PPUSH
21073: LD_INT 0
21075: PPUSH
21076: CALL 23101 0 6
21080: ST_TO_ADDR
// if not hexes then
21081: LD_VAR 0 14
21085: NOT
21086: IFFALSE 21090
// exit ;
21088: GO 21848
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21090: LD_ADDR_VAR 0 17
21094: PUSH
21095: LD_VAR 0 5
21099: PPUSH
21100: LD_INT 22
21102: PUSH
21103: LD_VAR 0 13
21107: PPUSH
21108: CALL_OW 255
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: LD_INT 30
21122: PUSH
21123: LD_INT 0
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 30
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: EMPTY
21146: LIST
21147: LIST
21148: PPUSH
21149: CALL_OW 72
21153: ST_TO_ADDR
// for i = 1 to hexes do
21154: LD_ADDR_VAR 0 9
21158: PUSH
21159: DOUBLE
21160: LD_INT 1
21162: DEC
21163: ST_TO_ADDR
21164: LD_VAR 0 14
21168: PUSH
21169: FOR_TO
21170: IFFALSE 21846
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21172: LD_ADDR_VAR 0 13
21176: PUSH
21177: LD_VAR 0 14
21181: PUSH
21182: LD_VAR 0 9
21186: ARRAY
21187: PUSH
21188: LD_INT 1
21190: ARRAY
21191: PPUSH
21192: LD_VAR 0 14
21196: PUSH
21197: LD_VAR 0 9
21201: ARRAY
21202: PUSH
21203: LD_INT 2
21205: ARRAY
21206: PPUSH
21207: CALL_OW 428
21211: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21212: LD_VAR 0 14
21216: PUSH
21217: LD_VAR 0 9
21221: ARRAY
21222: PUSH
21223: LD_INT 1
21225: ARRAY
21226: PPUSH
21227: LD_VAR 0 14
21231: PUSH
21232: LD_VAR 0 9
21236: ARRAY
21237: PUSH
21238: LD_INT 2
21240: ARRAY
21241: PPUSH
21242: CALL_OW 351
21246: PUSH
21247: LD_VAR 0 14
21251: PUSH
21252: LD_VAR 0 9
21256: ARRAY
21257: PUSH
21258: LD_INT 1
21260: ARRAY
21261: PPUSH
21262: LD_VAR 0 14
21266: PUSH
21267: LD_VAR 0 9
21271: ARRAY
21272: PUSH
21273: LD_INT 2
21275: ARRAY
21276: PPUSH
21277: CALL_OW 488
21281: NOT
21282: OR
21283: PUSH
21284: LD_VAR 0 13
21288: PPUSH
21289: CALL_OW 247
21293: PUSH
21294: LD_INT 3
21296: EQUAL
21297: OR
21298: IFFALSE 21304
// exit ;
21300: POP
21301: POP
21302: GO 21848
// if not tmp then
21304: LD_VAR 0 13
21308: NOT
21309: IFFALSE 21313
// continue ;
21311: GO 21169
// result := true ;
21313: LD_ADDR_VAR 0 8
21317: PUSH
21318: LD_INT 1
21320: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21321: LD_VAR 0 6
21325: PUSH
21326: LD_VAR 0 13
21330: PPUSH
21331: CALL_OW 247
21335: PUSH
21336: LD_INT 2
21338: EQUAL
21339: AND
21340: PUSH
21341: LD_VAR 0 13
21345: PPUSH
21346: CALL_OW 263
21350: PUSH
21351: LD_INT 1
21353: EQUAL
21354: AND
21355: IFFALSE 21519
// begin if IsDrivenBy ( tmp ) then
21357: LD_VAR 0 13
21361: PPUSH
21362: CALL_OW 311
21366: IFFALSE 21370
// continue ;
21368: GO 21169
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21370: LD_VAR 0 6
21374: PPUSH
21375: LD_INT 3
21377: PUSH
21378: LD_INT 60
21380: PUSH
21381: EMPTY
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: LD_INT 55
21393: PUSH
21394: EMPTY
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PPUSH
21405: CALL_OW 72
21409: IFFALSE 21517
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21411: LD_ADDR_VAR 0 18
21415: PUSH
21416: LD_VAR 0 6
21420: PPUSH
21421: LD_INT 3
21423: PUSH
21424: LD_INT 60
21426: PUSH
21427: EMPTY
21428: LIST
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: PUSH
21434: LD_INT 3
21436: PUSH
21437: LD_INT 55
21439: PUSH
21440: EMPTY
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PPUSH
21451: CALL_OW 72
21455: PUSH
21456: LD_INT 1
21458: ARRAY
21459: ST_TO_ADDR
// if IsInUnit ( driver ) then
21460: LD_VAR 0 18
21464: PPUSH
21465: CALL_OW 310
21469: IFFALSE 21480
// ComExit ( driver ) ;
21471: LD_VAR 0 18
21475: PPUSH
21476: CALL 46882 0 1
// AddComEnterUnit ( driver , tmp ) ;
21480: LD_VAR 0 18
21484: PPUSH
21485: LD_VAR 0 13
21489: PPUSH
21490: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21494: LD_VAR 0 18
21498: PPUSH
21499: LD_VAR 0 7
21503: PPUSH
21504: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21508: LD_VAR 0 18
21512: PPUSH
21513: CALL_OW 181
// end ; continue ;
21517: GO 21169
// end ; if not cleaners or not tmp in cleaners then
21519: LD_VAR 0 6
21523: NOT
21524: PUSH
21525: LD_VAR 0 13
21529: PUSH
21530: LD_VAR 0 6
21534: IN
21535: NOT
21536: OR
21537: IFFALSE 21844
// begin if dep then
21539: LD_VAR 0 17
21543: IFFALSE 21679
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21545: LD_ADDR_VAR 0 16
21549: PUSH
21550: LD_VAR 0 17
21554: PUSH
21555: LD_INT 1
21557: ARRAY
21558: PPUSH
21559: CALL_OW 250
21563: PPUSH
21564: LD_VAR 0 17
21568: PUSH
21569: LD_INT 1
21571: ARRAY
21572: PPUSH
21573: CALL_OW 254
21577: PPUSH
21578: LD_INT 5
21580: PPUSH
21581: CALL_OW 272
21585: PUSH
21586: LD_VAR 0 17
21590: PUSH
21591: LD_INT 1
21593: ARRAY
21594: PPUSH
21595: CALL_OW 251
21599: PPUSH
21600: LD_VAR 0 17
21604: PUSH
21605: LD_INT 1
21607: ARRAY
21608: PPUSH
21609: CALL_OW 254
21613: PPUSH
21614: LD_INT 5
21616: PPUSH
21617: CALL_OW 273
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21626: LD_VAR 0 16
21630: PUSH
21631: LD_INT 1
21633: ARRAY
21634: PPUSH
21635: LD_VAR 0 16
21639: PUSH
21640: LD_INT 2
21642: ARRAY
21643: PPUSH
21644: CALL_OW 488
21648: IFFALSE 21679
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21650: LD_VAR 0 13
21654: PPUSH
21655: LD_VAR 0 16
21659: PUSH
21660: LD_INT 1
21662: ARRAY
21663: PPUSH
21664: LD_VAR 0 16
21668: PUSH
21669: LD_INT 2
21671: ARRAY
21672: PPUSH
21673: CALL_OW 111
// continue ;
21677: GO 21169
// end ; end ; r := GetDir ( tmp ) ;
21679: LD_ADDR_VAR 0 15
21683: PUSH
21684: LD_VAR 0 13
21688: PPUSH
21689: CALL_OW 254
21693: ST_TO_ADDR
// if r = 5 then
21694: LD_VAR 0 15
21698: PUSH
21699: LD_INT 5
21701: EQUAL
21702: IFFALSE 21712
// r := 0 ;
21704: LD_ADDR_VAR 0 15
21708: PUSH
21709: LD_INT 0
21711: ST_TO_ADDR
// for j = r to 5 do
21712: LD_ADDR_VAR 0 10
21716: PUSH
21717: DOUBLE
21718: LD_VAR 0 15
21722: DEC
21723: ST_TO_ADDR
21724: LD_INT 5
21726: PUSH
21727: FOR_TO
21728: IFFALSE 21842
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21730: LD_ADDR_VAR 0 11
21734: PUSH
21735: LD_VAR 0 13
21739: PPUSH
21740: CALL_OW 250
21744: PPUSH
21745: LD_VAR 0 10
21749: PPUSH
21750: LD_INT 2
21752: PPUSH
21753: CALL_OW 272
21757: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21758: LD_ADDR_VAR 0 12
21762: PUSH
21763: LD_VAR 0 13
21767: PPUSH
21768: CALL_OW 251
21772: PPUSH
21773: LD_VAR 0 10
21777: PPUSH
21778: LD_INT 2
21780: PPUSH
21781: CALL_OW 273
21785: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21786: LD_VAR 0 11
21790: PPUSH
21791: LD_VAR 0 12
21795: PPUSH
21796: CALL_OW 488
21800: PUSH
21801: LD_VAR 0 11
21805: PPUSH
21806: LD_VAR 0 12
21810: PPUSH
21811: CALL_OW 428
21815: NOT
21816: AND
21817: IFFALSE 21840
// begin ComMoveXY ( tmp , _x , _y ) ;
21819: LD_VAR 0 13
21823: PPUSH
21824: LD_VAR 0 11
21828: PPUSH
21829: LD_VAR 0 12
21833: PPUSH
21834: CALL_OW 111
// break ;
21838: GO 21842
// end ; end ;
21840: GO 21727
21842: POP
21843: POP
// end ; end ;
21844: GO 21169
21846: POP
21847: POP
// end ;
21848: LD_VAR 0 8
21852: RET
// export function BuildingTechInvented ( side , btype ) ; begin
21853: LD_INT 0
21855: PPUSH
// result := true ;
21856: LD_ADDR_VAR 0 3
21860: PUSH
21861: LD_INT 1
21863: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
21864: LD_VAR 0 2
21868: PUSH
21869: LD_INT 24
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21883
21875: LD_INT 33
21877: DOUBLE
21878: EQUAL
21879: IFTRUE 21883
21881: GO 21908
21883: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
21884: LD_ADDR_VAR 0 3
21888: PUSH
21889: LD_INT 32
21891: PPUSH
21892: LD_VAR 0 1
21896: PPUSH
21897: CALL_OW 321
21901: PUSH
21902: LD_INT 2
21904: EQUAL
21905: ST_TO_ADDR
21906: GO 22224
21908: LD_INT 20
21910: DOUBLE
21911: EQUAL
21912: IFTRUE 21916
21914: GO 21941
21916: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
21917: LD_ADDR_VAR 0 3
21921: PUSH
21922: LD_INT 6
21924: PPUSH
21925: LD_VAR 0 1
21929: PPUSH
21930: CALL_OW 321
21934: PUSH
21935: LD_INT 2
21937: EQUAL
21938: ST_TO_ADDR
21939: GO 22224
21941: LD_INT 22
21943: DOUBLE
21944: EQUAL
21945: IFTRUE 21955
21947: LD_INT 36
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 21980
21955: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
21956: LD_ADDR_VAR 0 3
21960: PUSH
21961: LD_INT 15
21963: PPUSH
21964: LD_VAR 0 1
21968: PPUSH
21969: CALL_OW 321
21973: PUSH
21974: LD_INT 2
21976: EQUAL
21977: ST_TO_ADDR
21978: GO 22224
21980: LD_INT 30
21982: DOUBLE
21983: EQUAL
21984: IFTRUE 21988
21986: GO 22013
21988: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
21989: LD_ADDR_VAR 0 3
21993: PUSH
21994: LD_INT 20
21996: PPUSH
21997: LD_VAR 0 1
22001: PPUSH
22002: CALL_OW 321
22006: PUSH
22007: LD_INT 2
22009: EQUAL
22010: ST_TO_ADDR
22011: GO 22224
22013: LD_INT 28
22015: DOUBLE
22016: EQUAL
22017: IFTRUE 22027
22019: LD_INT 21
22021: DOUBLE
22022: EQUAL
22023: IFTRUE 22027
22025: GO 22052
22027: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22028: LD_ADDR_VAR 0 3
22032: PUSH
22033: LD_INT 21
22035: PPUSH
22036: LD_VAR 0 1
22040: PPUSH
22041: CALL_OW 321
22045: PUSH
22046: LD_INT 2
22048: EQUAL
22049: ST_TO_ADDR
22050: GO 22224
22052: LD_INT 16
22054: DOUBLE
22055: EQUAL
22056: IFTRUE 22060
22058: GO 22085
22060: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_INT 84
22068: PPUSH
22069: LD_VAR 0 1
22073: PPUSH
22074: CALL_OW 321
22078: PUSH
22079: LD_INT 2
22081: EQUAL
22082: ST_TO_ADDR
22083: GO 22224
22085: LD_INT 19
22087: DOUBLE
22088: EQUAL
22089: IFTRUE 22099
22091: LD_INT 23
22093: DOUBLE
22094: EQUAL
22095: IFTRUE 22099
22097: GO 22124
22099: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22100: LD_ADDR_VAR 0 3
22104: PUSH
22105: LD_INT 83
22107: PPUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL_OW 321
22117: PUSH
22118: LD_INT 2
22120: EQUAL
22121: ST_TO_ADDR
22122: GO 22224
22124: LD_INT 17
22126: DOUBLE
22127: EQUAL
22128: IFTRUE 22132
22130: GO 22157
22132: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22133: LD_ADDR_VAR 0 3
22137: PUSH
22138: LD_INT 39
22140: PPUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: CALL_OW 321
22150: PUSH
22151: LD_INT 2
22153: EQUAL
22154: ST_TO_ADDR
22155: GO 22224
22157: LD_INT 18
22159: DOUBLE
22160: EQUAL
22161: IFTRUE 22165
22163: GO 22190
22165: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22166: LD_ADDR_VAR 0 3
22170: PUSH
22171: LD_INT 40
22173: PPUSH
22174: LD_VAR 0 1
22178: PPUSH
22179: CALL_OW 321
22183: PUSH
22184: LD_INT 2
22186: EQUAL
22187: ST_TO_ADDR
22188: GO 22224
22190: LD_INT 27
22192: DOUBLE
22193: EQUAL
22194: IFTRUE 22198
22196: GO 22223
22198: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22199: LD_ADDR_VAR 0 3
22203: PUSH
22204: LD_INT 35
22206: PPUSH
22207: LD_VAR 0 1
22211: PPUSH
22212: CALL_OW 321
22216: PUSH
22217: LD_INT 2
22219: EQUAL
22220: ST_TO_ADDR
22221: GO 22224
22223: POP
// end ;
22224: LD_VAR 0 3
22228: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22229: LD_INT 0
22231: PPUSH
22232: PPUSH
22233: PPUSH
22234: PPUSH
22235: PPUSH
22236: PPUSH
22237: PPUSH
22238: PPUSH
22239: PPUSH
22240: PPUSH
22241: PPUSH
// result := false ;
22242: LD_ADDR_VAR 0 6
22246: PUSH
22247: LD_INT 0
22249: ST_TO_ADDR
// if btype = b_depot then
22250: LD_VAR 0 2
22254: PUSH
22255: LD_INT 0
22257: EQUAL
22258: IFFALSE 22270
// begin result := true ;
22260: LD_ADDR_VAR 0 6
22264: PUSH
22265: LD_INT 1
22267: ST_TO_ADDR
// exit ;
22268: GO 23096
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22270: LD_VAR 0 1
22274: NOT
22275: PUSH
22276: LD_VAR 0 1
22280: PPUSH
22281: CALL_OW 266
22285: PUSH
22286: LD_INT 0
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: IN
22296: NOT
22297: OR
22298: PUSH
22299: LD_VAR 0 2
22303: NOT
22304: OR
22305: PUSH
22306: LD_VAR 0 5
22310: PUSH
22311: LD_INT 0
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: LD_INT 2
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: LD_INT 4
22325: PUSH
22326: LD_INT 5
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: IN
22337: NOT
22338: OR
22339: PUSH
22340: LD_VAR 0 3
22344: PPUSH
22345: LD_VAR 0 4
22349: PPUSH
22350: CALL_OW 488
22354: NOT
22355: OR
22356: IFFALSE 22360
// exit ;
22358: GO 23096
// side := GetSide ( depot ) ;
22360: LD_ADDR_VAR 0 9
22364: PUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 255
22374: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22375: LD_VAR 0 9
22379: PPUSH
22380: LD_VAR 0 2
22384: PPUSH
22385: CALL 21853 0 2
22389: NOT
22390: IFFALSE 22394
// exit ;
22392: GO 23096
// pom := GetBase ( depot ) ;
22394: LD_ADDR_VAR 0 10
22398: PUSH
22399: LD_VAR 0 1
22403: PPUSH
22404: CALL_OW 274
22408: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22409: LD_ADDR_VAR 0 11
22413: PUSH
22414: LD_VAR 0 2
22418: PPUSH
22419: LD_VAR 0 1
22423: PPUSH
22424: CALL_OW 248
22428: PPUSH
22429: CALL_OW 450
22433: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22434: LD_VAR 0 10
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 275
22446: PUSH
22447: LD_VAR 0 11
22451: PUSH
22452: LD_INT 1
22454: ARRAY
22455: GREATEREQUAL
22456: PUSH
22457: LD_VAR 0 10
22461: PPUSH
22462: LD_INT 2
22464: PPUSH
22465: CALL_OW 275
22469: PUSH
22470: LD_VAR 0 11
22474: PUSH
22475: LD_INT 2
22477: ARRAY
22478: GREATEREQUAL
22479: AND
22480: PUSH
22481: LD_VAR 0 10
22485: PPUSH
22486: LD_INT 3
22488: PPUSH
22489: CALL_OW 275
22493: PUSH
22494: LD_VAR 0 11
22498: PUSH
22499: LD_INT 3
22501: ARRAY
22502: GREATEREQUAL
22503: AND
22504: NOT
22505: IFFALSE 22509
// exit ;
22507: GO 23096
// if GetBType ( depot ) = b_depot then
22509: LD_VAR 0 1
22513: PPUSH
22514: CALL_OW 266
22518: PUSH
22519: LD_INT 0
22521: EQUAL
22522: IFFALSE 22534
// dist := 28 else
22524: LD_ADDR_VAR 0 14
22528: PUSH
22529: LD_INT 28
22531: ST_TO_ADDR
22532: GO 22542
// dist := 36 ;
22534: LD_ADDR_VAR 0 14
22538: PUSH
22539: LD_INT 36
22541: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22542: LD_VAR 0 1
22546: PPUSH
22547: LD_VAR 0 3
22551: PPUSH
22552: LD_VAR 0 4
22556: PPUSH
22557: CALL_OW 297
22561: PUSH
22562: LD_VAR 0 14
22566: GREATER
22567: IFFALSE 22571
// exit ;
22569: GO 23096
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22571: LD_ADDR_VAR 0 12
22575: PUSH
22576: LD_VAR 0 2
22580: PPUSH
22581: LD_VAR 0 3
22585: PPUSH
22586: LD_VAR 0 4
22590: PPUSH
22591: LD_VAR 0 5
22595: PPUSH
22596: LD_VAR 0 1
22600: PPUSH
22601: CALL_OW 248
22605: PPUSH
22606: LD_INT 0
22608: PPUSH
22609: CALL 23101 0 6
22613: ST_TO_ADDR
// if not hexes then
22614: LD_VAR 0 12
22618: NOT
22619: IFFALSE 22623
// exit ;
22621: GO 23096
// hex := GetHexInfo ( x , y ) ;
22623: LD_ADDR_VAR 0 15
22627: PUSH
22628: LD_VAR 0 3
22632: PPUSH
22633: LD_VAR 0 4
22637: PPUSH
22638: CALL_OW 546
22642: ST_TO_ADDR
// if hex [ 1 ] then
22643: LD_VAR 0 15
22647: PUSH
22648: LD_INT 1
22650: ARRAY
22651: IFFALSE 22655
// exit ;
22653: GO 23096
// height := hex [ 2 ] ;
22655: LD_ADDR_VAR 0 13
22659: PUSH
22660: LD_VAR 0 15
22664: PUSH
22665: LD_INT 2
22667: ARRAY
22668: ST_TO_ADDR
// for i = 1 to hexes do
22669: LD_ADDR_VAR 0 7
22673: PUSH
22674: DOUBLE
22675: LD_INT 1
22677: DEC
22678: ST_TO_ADDR
22679: LD_VAR 0 12
22683: PUSH
22684: FOR_TO
22685: IFFALSE 23015
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22687: LD_VAR 0 12
22691: PUSH
22692: LD_VAR 0 7
22696: ARRAY
22697: PUSH
22698: LD_INT 1
22700: ARRAY
22701: PPUSH
22702: LD_VAR 0 12
22706: PUSH
22707: LD_VAR 0 7
22711: ARRAY
22712: PUSH
22713: LD_INT 2
22715: ARRAY
22716: PPUSH
22717: CALL_OW 488
22721: NOT
22722: PUSH
22723: LD_VAR 0 12
22727: PUSH
22728: LD_VAR 0 7
22732: ARRAY
22733: PUSH
22734: LD_INT 1
22736: ARRAY
22737: PPUSH
22738: LD_VAR 0 12
22742: PUSH
22743: LD_VAR 0 7
22747: ARRAY
22748: PUSH
22749: LD_INT 2
22751: ARRAY
22752: PPUSH
22753: CALL_OW 428
22757: PUSH
22758: LD_INT 0
22760: GREATER
22761: OR
22762: PUSH
22763: LD_VAR 0 12
22767: PUSH
22768: LD_VAR 0 7
22772: ARRAY
22773: PUSH
22774: LD_INT 1
22776: ARRAY
22777: PPUSH
22778: LD_VAR 0 12
22782: PUSH
22783: LD_VAR 0 7
22787: ARRAY
22788: PUSH
22789: LD_INT 2
22791: ARRAY
22792: PPUSH
22793: CALL_OW 351
22797: OR
22798: IFFALSE 22804
// exit ;
22800: POP
22801: POP
22802: GO 23096
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22804: LD_ADDR_VAR 0 8
22808: PUSH
22809: LD_VAR 0 12
22813: PUSH
22814: LD_VAR 0 7
22818: ARRAY
22819: PUSH
22820: LD_INT 1
22822: ARRAY
22823: PPUSH
22824: LD_VAR 0 12
22828: PUSH
22829: LD_VAR 0 7
22833: ARRAY
22834: PUSH
22835: LD_INT 2
22837: ARRAY
22838: PPUSH
22839: CALL_OW 546
22843: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22844: LD_VAR 0 8
22848: PUSH
22849: LD_INT 1
22851: ARRAY
22852: PUSH
22853: LD_VAR 0 8
22857: PUSH
22858: LD_INT 2
22860: ARRAY
22861: PUSH
22862: LD_VAR 0 13
22866: PUSH
22867: LD_INT 2
22869: PLUS
22870: GREATER
22871: OR
22872: PUSH
22873: LD_VAR 0 8
22877: PUSH
22878: LD_INT 2
22880: ARRAY
22881: PUSH
22882: LD_VAR 0 13
22886: PUSH
22887: LD_INT 2
22889: MINUS
22890: LESS
22891: OR
22892: PUSH
22893: LD_VAR 0 8
22897: PUSH
22898: LD_INT 3
22900: ARRAY
22901: PUSH
22902: LD_INT 0
22904: PUSH
22905: LD_INT 8
22907: PUSH
22908: LD_INT 9
22910: PUSH
22911: LD_INT 10
22913: PUSH
22914: LD_INT 11
22916: PUSH
22917: LD_INT 12
22919: PUSH
22920: LD_INT 13
22922: PUSH
22923: LD_INT 16
22925: PUSH
22926: LD_INT 17
22928: PUSH
22929: LD_INT 18
22931: PUSH
22932: LD_INT 19
22934: PUSH
22935: LD_INT 20
22937: PUSH
22938: LD_INT 21
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: IN
22956: NOT
22957: OR
22958: PUSH
22959: LD_VAR 0 8
22963: PUSH
22964: LD_INT 5
22966: ARRAY
22967: NOT
22968: OR
22969: PUSH
22970: LD_VAR 0 8
22974: PUSH
22975: LD_INT 6
22977: ARRAY
22978: PUSH
22979: LD_INT 1
22981: PUSH
22982: LD_INT 2
22984: PUSH
22985: LD_INT 7
22987: PUSH
22988: LD_INT 9
22990: PUSH
22991: LD_INT 10
22993: PUSH
22994: LD_INT 11
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: IN
23005: NOT
23006: OR
23007: IFFALSE 23013
// exit ;
23009: POP
23010: POP
23011: GO 23096
// end ;
23013: GO 22684
23015: POP
23016: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23017: LD_VAR 0 9
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: LD_VAR 0 4
23031: PPUSH
23032: LD_INT 20
23034: PPUSH
23035: CALL 15019 0 4
23039: PUSH
23040: LD_INT 4
23042: ARRAY
23043: IFFALSE 23047
// exit ;
23045: GO 23096
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23047: LD_VAR 0 2
23051: PUSH
23052: LD_INT 29
23054: PUSH
23055: LD_INT 30
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: IN
23062: PUSH
23063: LD_VAR 0 3
23067: PPUSH
23068: LD_VAR 0 4
23072: PPUSH
23073: LD_VAR 0 9
23077: PPUSH
23078: CALL_OW 440
23082: NOT
23083: AND
23084: IFFALSE 23088
// exit ;
23086: GO 23096
// result := true ;
23088: LD_ADDR_VAR 0 6
23092: PUSH
23093: LD_INT 1
23095: ST_TO_ADDR
// end ;
23096: LD_VAR 0 6
23100: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23101: LD_INT 0
23103: PPUSH
23104: PPUSH
23105: PPUSH
23106: PPUSH
23107: PPUSH
23108: PPUSH
23109: PPUSH
23110: PPUSH
23111: PPUSH
23112: PPUSH
23113: PPUSH
23114: PPUSH
23115: PPUSH
23116: PPUSH
23117: PPUSH
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
23124: PPUSH
23125: PPUSH
23126: PPUSH
23127: PPUSH
23128: PPUSH
23129: PPUSH
23130: PPUSH
23131: PPUSH
23132: PPUSH
23133: PPUSH
23134: PPUSH
23135: PPUSH
23136: PPUSH
23137: PPUSH
23138: PPUSH
23139: PPUSH
23140: PPUSH
23141: PPUSH
23142: PPUSH
23143: PPUSH
23144: PPUSH
23145: PPUSH
23146: PPUSH
23147: PPUSH
23148: PPUSH
23149: PPUSH
23150: PPUSH
23151: PPUSH
23152: PPUSH
23153: PPUSH
23154: PPUSH
23155: PPUSH
23156: PPUSH
23157: PPUSH
23158: PPUSH
23159: PPUSH
23160: PPUSH
// result = [ ] ;
23161: LD_ADDR_VAR 0 7
23165: PUSH
23166: EMPTY
23167: ST_TO_ADDR
// temp_list = [ ] ;
23168: LD_ADDR_VAR 0 9
23172: PUSH
23173: EMPTY
23174: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23175: LD_VAR 0 4
23179: PUSH
23180: LD_INT 0
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: LD_INT 2
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 4
23194: PUSH
23195: LD_INT 5
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: IN
23206: NOT
23207: PUSH
23208: LD_VAR 0 1
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 1
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: IN
23223: PUSH
23224: LD_VAR 0 5
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: LD_INT 3
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: IN
23243: NOT
23244: AND
23245: OR
23246: IFFALSE 23250
// exit ;
23248: GO 41641
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23250: LD_VAR 0 1
23254: PUSH
23255: LD_INT 6
23257: PUSH
23258: LD_INT 7
23260: PUSH
23261: LD_INT 8
23263: PUSH
23264: LD_INT 13
23266: PUSH
23267: LD_INT 12
23269: PUSH
23270: LD_INT 15
23272: PUSH
23273: LD_INT 11
23275: PUSH
23276: LD_INT 14
23278: PUSH
23279: LD_INT 10
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: IN
23293: IFFALSE 23303
// btype = b_lab ;
23295: LD_ADDR_VAR 0 1
23299: PUSH
23300: LD_INT 6
23302: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23303: LD_VAR 0 6
23307: PUSH
23308: LD_INT 0
23310: PUSH
23311: LD_INT 1
23313: PUSH
23314: LD_INT 2
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: IN
23322: NOT
23323: PUSH
23324: LD_VAR 0 1
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: LD_INT 2
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: LD_INT 6
23343: PUSH
23344: LD_INT 36
23346: PUSH
23347: LD_INT 4
23349: PUSH
23350: LD_INT 5
23352: PUSH
23353: LD_INT 31
23355: PUSH
23356: LD_INT 32
23358: PUSH
23359: LD_INT 33
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: IN
23375: NOT
23376: PUSH
23377: LD_VAR 0 6
23381: PUSH
23382: LD_INT 1
23384: EQUAL
23385: AND
23386: OR
23387: PUSH
23388: LD_VAR 0 1
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: LD_INT 3
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: IN
23403: NOT
23404: PUSH
23405: LD_VAR 0 6
23409: PUSH
23410: LD_INT 2
23412: EQUAL
23413: AND
23414: OR
23415: IFFALSE 23425
// mode = 0 ;
23417: LD_ADDR_VAR 0 6
23421: PUSH
23422: LD_INT 0
23424: ST_TO_ADDR
// case mode of 0 :
23425: LD_VAR 0 6
23429: PUSH
23430: LD_INT 0
23432: DOUBLE
23433: EQUAL
23434: IFTRUE 23438
23436: GO 34891
23438: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23439: LD_ADDR_VAR 0 11
23443: PUSH
23444: LD_INT 0
23446: PUSH
23447: LD_INT 0
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 0
23456: PUSH
23457: LD_INT 1
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 1
23467: PUSH
23468: LD_INT 0
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: LD_INT 1
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: LD_INT 0
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: LD_INT 1
23508: NEG
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 1
23520: NEG
23521: PUSH
23522: LD_INT 2
23524: NEG
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: LD_INT 2
23535: NEG
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 1
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: LD_INT 0
23564: PUSH
23565: LD_INT 2
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 1
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PUSH
23583: LD_INT 1
23585: PUSH
23586: LD_INT 3
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: LD_INT 3
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 1
23605: NEG
23606: PUSH
23607: LD_INT 2
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23632: LD_ADDR_VAR 0 12
23636: PUSH
23637: LD_INT 0
23639: PUSH
23640: LD_INT 0
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 1
23652: NEG
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: LD_INT 0
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 0
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: NEG
23702: PUSH
23703: LD_INT 1
23705: NEG
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 1
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: PUSH
23725: LD_INT 0
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 1
23744: NEG
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 2
23755: NEG
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 2
23766: NEG
23767: PUSH
23768: LD_INT 1
23770: NEG
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 2
23778: NEG
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 3
23789: NEG
23790: PUSH
23791: LD_INT 0
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 3
23800: NEG
23801: PUSH
23802: LD_INT 1
23804: NEG
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: PUSH
23810: EMPTY
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23828: LD_ADDR_VAR 0 13
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 0
23845: PUSH
23846: LD_INT 1
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 0
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: LD_INT 1
23869: PUSH
23870: EMPTY
23871: LIST
23872: LIST
23873: PUSH
23874: LD_INT 0
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: LD_INT 1
23886: NEG
23887: PUSH
23888: LD_INT 0
23890: PUSH
23891: EMPTY
23892: LIST
23893: LIST
23894: PUSH
23895: LD_INT 1
23897: NEG
23898: PUSH
23899: LD_INT 1
23901: NEG
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: PUSH
23907: LD_INT 1
23909: NEG
23910: PUSH
23911: LD_INT 2
23913: NEG
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 2
23921: PUSH
23922: LD_INT 1
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: LD_INT 2
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 2
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 2
23951: NEG
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 2
23963: NEG
23964: PUSH
23965: LD_INT 2
23967: NEG
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 2
23975: NEG
23976: PUSH
23977: LD_INT 3
23979: NEG
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 3
23987: NEG
23988: PUSH
23989: LD_INT 2
23991: NEG
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 3
23999: NEG
24000: PUSH
24001: LD_INT 3
24003: NEG
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24027: LD_ADDR_VAR 0 14
24031: PUSH
24032: LD_INT 0
24034: PUSH
24035: LD_INT 0
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 0
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 1
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: EMPTY
24060: LIST
24061: LIST
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: LD_INT 1
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: PUSH
24073: LD_INT 0
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 1
24085: NEG
24086: PUSH
24087: LD_INT 0
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 1
24096: NEG
24097: PUSH
24098: LD_INT 1
24100: NEG
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 1
24108: NEG
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 0
24120: PUSH
24121: LD_INT 2
24123: NEG
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 1
24131: PUSH
24132: LD_INT 1
24134: NEG
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 1
24142: PUSH
24143: LD_INT 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: LD_INT 2
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 1
24173: NEG
24174: PUSH
24175: LD_INT 3
24177: NEG
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: LD_INT 3
24188: NEG
24189: PUSH
24190: EMPTY
24191: LIST
24192: LIST
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: LD_INT 2
24199: NEG
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24223: LD_ADDR_VAR 0 15
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 0
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 0
24240: PUSH
24241: LD_INT 1
24243: NEG
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 1
24251: PUSH
24252: LD_INT 0
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PUSH
24262: LD_INT 1
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PUSH
24269: LD_INT 0
24271: PUSH
24272: LD_INT 1
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: NEG
24282: PUSH
24283: LD_INT 0
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 1
24292: NEG
24293: PUSH
24294: LD_INT 1
24296: NEG
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 1
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: LD_INT 0
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: EMPTY
24330: LIST
24331: LIST
24332: PUSH
24333: LD_INT 1
24335: NEG
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 2
24346: NEG
24347: PUSH
24348: LD_INT 0
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 2
24357: NEG
24358: PUSH
24359: LD_INT 1
24361: NEG
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 2
24369: PUSH
24370: LD_INT 1
24372: NEG
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 3
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: LD_INT 3
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24416: LD_ADDR_VAR 0 16
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 0
24426: PUSH
24427: EMPTY
24428: LIST
24429: LIST
24430: PUSH
24431: LD_INT 0
24433: PUSH
24434: LD_INT 1
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 1
24444: PUSH
24445: LD_INT 0
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: LD_INT 1
24454: PUSH
24455: LD_INT 1
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: PUSH
24462: LD_INT 0
24464: PUSH
24465: LD_INT 1
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: PUSH
24472: LD_INT 1
24474: NEG
24475: PUSH
24476: LD_INT 0
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: PUSH
24483: LD_INT 1
24485: NEG
24486: PUSH
24487: LD_INT 1
24489: NEG
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: NEG
24498: PUSH
24499: LD_INT 2
24501: NEG
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: LD_INT 1
24512: PUSH
24513: EMPTY
24514: LIST
24515: LIST
24516: PUSH
24517: LD_INT 2
24519: PUSH
24520: LD_INT 2
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PUSH
24527: LD_INT 1
24529: PUSH
24530: LD_INT 2
24532: PUSH
24533: EMPTY
24534: LIST
24535: LIST
24536: PUSH
24537: LD_INT 2
24539: NEG
24540: PUSH
24541: LD_INT 1
24543: NEG
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 2
24551: NEG
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 3
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 3
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24609: LD_ADDR_VAR 0 17
24613: PUSH
24614: LD_INT 0
24616: PUSH
24617: LD_INT 0
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 0
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: PUSH
24638: LD_INT 0
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 1
24647: PUSH
24648: LD_INT 1
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 0
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 1
24667: NEG
24668: PUSH
24669: LD_INT 0
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 1
24678: NEG
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 1
24690: NEG
24691: PUSH
24692: LD_INT 2
24694: NEG
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: LD_INT 2
24705: NEG
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 1
24713: PUSH
24714: LD_INT 1
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: LD_INT 0
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 2
24734: PUSH
24735: LD_INT 1
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: LD_INT 2
24747: PUSH
24748: EMPTY
24749: LIST
24750: LIST
24751: PUSH
24752: LD_INT 1
24754: PUSH
24755: LD_INT 2
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: LD_INT 2
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: NEG
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 2
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 2
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 2
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24839: LD_ADDR_VAR 0 18
24843: PUSH
24844: LD_INT 0
24846: PUSH
24847: LD_INT 0
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: LD_INT 0
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: LD_INT 0
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: LD_INT 1
24877: PUSH
24878: LD_INT 1
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 0
24887: PUSH
24888: LD_INT 1
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 1
24897: NEG
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: LD_INT 1
24908: NEG
24909: PUSH
24910: LD_INT 1
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 0
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 1
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: PUSH
24955: LD_INT 0
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 2
24964: PUSH
24965: LD_INT 1
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: LD_INT 2
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 1
24984: PUSH
24985: LD_INT 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 0
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: NEG
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 2
25015: NEG
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 2
25026: NEG
25027: PUSH
25028: LD_INT 1
25030: NEG
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 2
25038: NEG
25039: PUSH
25040: LD_INT 2
25042: NEG
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25069: LD_ADDR_VAR 0 19
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 0
25086: PUSH
25087: LD_INT 1
25089: NEG
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 1
25107: PUSH
25108: LD_INT 1
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 0
25117: PUSH
25118: LD_INT 1
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 1
25127: NEG
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: LD_INT 1
25138: NEG
25139: PUSH
25140: LD_INT 1
25142: NEG
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: LD_INT 2
25154: NEG
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 2
25165: NEG
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 1
25176: NEG
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: PUSH
25182: LD_INT 2
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: PUSH
25205: LD_INT 2
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PUSH
25212: LD_INT 1
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 0
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: LD_INT 1
25238: PUSH
25239: EMPTY
25240: LIST
25241: LIST
25242: PUSH
25243: LD_INT 2
25245: NEG
25246: PUSH
25247: LD_INT 0
25249: PUSH
25250: EMPTY
25251: LIST
25252: LIST
25253: PUSH
25254: LD_INT 2
25256: NEG
25257: PUSH
25258: LD_INT 1
25260: NEG
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: LD_INT 2
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25299: LD_ADDR_VAR 0 20
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 0
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: LD_INT 1
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 1
25357: NEG
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 1
25372: NEG
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: PUSH
25378: LD_INT 1
25380: NEG
25381: PUSH
25382: LD_INT 2
25384: NEG
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 0
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 1
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 0
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 0
25454: PUSH
25455: LD_INT 2
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 2
25475: NEG
25476: PUSH
25477: LD_INT 0
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 2
25486: NEG
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 2
25498: NEG
25499: PUSH
25500: LD_INT 2
25502: NEG
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25529: LD_ADDR_VAR 0 21
25533: PUSH
25534: LD_INT 0
25536: PUSH
25537: LD_INT 0
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 0
25546: PUSH
25547: LD_INT 1
25549: NEG
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: PUSH
25558: LD_INT 0
25560: PUSH
25561: EMPTY
25562: LIST
25563: LIST
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: LD_INT 1
25570: PUSH
25571: EMPTY
25572: LIST
25573: LIST
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: LD_INT 1
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: PUSH
25585: LD_INT 1
25587: NEG
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PUSH
25596: LD_INT 1
25598: NEG
25599: PUSH
25600: LD_INT 1
25602: NEG
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: LD_INT 2
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 2
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 1
25636: NEG
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 2
25644: PUSH
25645: LD_INT 0
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 1
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 2
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: PUSH
25675: LD_INT 2
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 0
25684: PUSH
25685: LD_INT 2
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: NEG
25695: PUSH
25696: LD_INT 1
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 2
25705: NEG
25706: PUSH
25707: LD_INT 0
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: NEG
25717: PUSH
25718: LD_INT 1
25720: NEG
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 2
25728: NEG
25729: PUSH
25730: LD_INT 2
25732: NEG
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: LIST
25749: LIST
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: LIST
25758: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25759: LD_ADDR_VAR 0 22
25763: PUSH
25764: LD_INT 0
25766: PUSH
25767: LD_INT 0
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: NEG
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: PUSH
25798: LD_INT 1
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 0
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: NEG
25829: PUSH
25830: LD_INT 1
25832: NEG
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: PUSH
25838: LD_INT 1
25840: NEG
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 2
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 2
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: PUSH
25895: LD_INT 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: LD_INT 2
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 0
25914: PUSH
25915: LD_INT 2
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: NEG
25925: PUSH
25926: LD_INT 1
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PUSH
25933: LD_INT 2
25935: NEG
25936: PUSH
25937: LD_INT 0
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: LD_INT 1
25950: NEG
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: LD_INT 2
25958: NEG
25959: PUSH
25960: LD_INT 2
25962: NEG
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: LIST
25972: LIST
25973: LIST
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
25989: LD_ADDR_VAR 0 23
25993: PUSH
25994: LD_INT 0
25996: PUSH
25997: LD_INT 0
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 0
26006: PUSH
26007: LD_INT 1
26009: NEG
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: LD_INT 1
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 1
26047: NEG
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: LD_INT 1
26070: NEG
26071: PUSH
26072: LD_INT 2
26074: NEG
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 0
26082: PUSH
26083: LD_INT 2
26085: NEG
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: LD_INT 1
26096: NEG
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 2
26124: PUSH
26125: LD_INT 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: LD_INT 2
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 0
26144: PUSH
26145: LD_INT 2
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: NEG
26155: PUSH
26156: LD_INT 1
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: LD_INT 2
26165: NEG
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 2
26176: NEG
26177: PUSH
26178: LD_INT 1
26180: NEG
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 2
26200: NEG
26201: PUSH
26202: LD_INT 3
26204: NEG
26205: PUSH
26206: EMPTY
26207: LIST
26208: LIST
26209: PUSH
26210: LD_INT 1
26212: NEG
26213: PUSH
26214: LD_INT 3
26216: NEG
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: LD_INT 2
26227: NEG
26228: PUSH
26229: EMPTY
26230: LIST
26231: LIST
26232: PUSH
26233: LD_INT 2
26235: PUSH
26236: LD_INT 1
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: LIST
26252: LIST
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: LIST
26258: LIST
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26269: LD_ADDR_VAR 0 24
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 0
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 0
26286: PUSH
26287: LD_INT 1
26289: NEG
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PUSH
26295: LD_INT 1
26297: PUSH
26298: LD_INT 0
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 1
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 1
26327: NEG
26328: PUSH
26329: LD_INT 0
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 1
26338: NEG
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 2
26354: NEG
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 0
26362: PUSH
26363: LD_INT 2
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 1
26376: NEG
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: LD_INT 0
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 2
26394: PUSH
26395: LD_INT 1
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: PUSH
26402: LD_INT 2
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: LD_INT 1
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 0
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: NEG
26435: PUSH
26436: LD_INT 1
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 0
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 2
26456: NEG
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: LD_INT 2
26472: NEG
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: LD_INT 2
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 1
26494: NEG
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 3
26502: PUSH
26503: LD_INT 1
26505: PUSH
26506: EMPTY
26507: LIST
26508: LIST
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: LD_INT 2
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: LIST
26527: LIST
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26545: LD_ADDR_VAR 0 25
26549: PUSH
26550: LD_INT 0
26552: PUSH
26553: LD_INT 0
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: LD_INT 0
26562: PUSH
26563: LD_INT 1
26565: NEG
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 1
26583: PUSH
26584: LD_INT 1
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 0
26593: PUSH
26594: LD_INT 1
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: NEG
26604: PUSH
26605: LD_INT 0
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 1
26614: NEG
26615: PUSH
26616: LD_INT 1
26618: NEG
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 1
26626: NEG
26627: PUSH
26628: LD_INT 2
26630: NEG
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 0
26638: PUSH
26639: LD_INT 2
26641: NEG
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: LD_INT 1
26652: NEG
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: LD_INT 0
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 2
26670: PUSH
26671: LD_INT 1
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 2
26680: PUSH
26681: LD_INT 2
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 2
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: NEG
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 2
26732: NEG
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 2
26744: NEG
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 3
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: LD_INT 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 2
26776: PUSH
26777: LD_INT 3
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26819: LD_ADDR_VAR 0 26
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 0
26829: PUSH
26830: EMPTY
26831: LIST
26832: LIST
26833: PUSH
26834: LD_INT 0
26836: PUSH
26837: LD_INT 1
26839: NEG
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 0
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 0
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 1
26877: NEG
26878: PUSH
26879: LD_INT 0
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: LD_INT 1
26892: NEG
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 1
26900: NEG
26901: PUSH
26902: LD_INT 2
26904: NEG
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: LD_INT 0
26912: PUSH
26913: LD_INT 2
26915: NEG
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 1
26926: NEG
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 2
26934: PUSH
26935: LD_INT 0
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: PUSH
26945: LD_INT 1
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PUSH
26952: LD_INT 2
26954: PUSH
26955: LD_INT 2
26957: PUSH
26958: EMPTY
26959: LIST
26960: LIST
26961: PUSH
26962: LD_INT 1
26964: PUSH
26965: LD_INT 2
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 0
26974: PUSH
26975: LD_INT 2
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: NEG
26985: PUSH
26986: LD_INT 1
26988: PUSH
26989: EMPTY
26990: LIST
26991: LIST
26992: PUSH
26993: LD_INT 2
26995: NEG
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PUSH
27004: LD_INT 2
27006: NEG
27007: PUSH
27008: LD_INT 1
27010: NEG
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: NEG
27019: PUSH
27020: LD_INT 2
27022: NEG
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: LD_INT 3
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: PUSH
27041: LD_INT 3
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 1
27050: NEG
27051: PUSH
27052: LD_INT 2
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 2
27061: NEG
27062: PUSH
27063: LD_INT 1
27065: PUSH
27066: EMPTY
27067: LIST
27068: LIST
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27095: LD_ADDR_VAR 0 27
27099: PUSH
27100: LD_INT 0
27102: PUSH
27103: LD_INT 0
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 0
27112: PUSH
27113: LD_INT 1
27115: NEG
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: PUSH
27121: LD_INT 1
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 1
27133: PUSH
27134: LD_INT 1
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: NEG
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 1
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 1
27176: NEG
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: LD_INT 2
27191: NEG
27192: PUSH
27193: EMPTY
27194: LIST
27195: LIST
27196: PUSH
27197: LD_INT 1
27199: PUSH
27200: LD_INT 1
27202: NEG
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 2
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: LD_INT 2
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: PUSH
27228: LD_INT 2
27230: PUSH
27231: LD_INT 2
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: NEG
27261: PUSH
27262: LD_INT 1
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 2
27271: NEG
27272: PUSH
27273: LD_INT 0
27275: PUSH
27276: EMPTY
27277: LIST
27278: LIST
27279: PUSH
27280: LD_INT 2
27282: NEG
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 2
27294: NEG
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: LD_INT 2
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: LD_INT 1
27321: PUSH
27322: EMPTY
27323: LIST
27324: LIST
27325: PUSH
27326: LD_INT 3
27328: NEG
27329: PUSH
27330: LD_INT 1
27332: NEG
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 3
27340: NEG
27341: PUSH
27342: LD_INT 2
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27375: LD_ADDR_VAR 0 28
27379: PUSH
27380: LD_INT 0
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 0
27392: PUSH
27393: LD_INT 1
27395: NEG
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 1
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: PUSH
27414: LD_INT 1
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 0
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: NEG
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: PUSH
27442: LD_INT 1
27444: NEG
27445: PUSH
27446: LD_INT 1
27448: NEG
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 2
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 0
27468: PUSH
27469: LD_INT 2
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 0
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: LD_INT 1
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 1
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: EMPTY
27525: LIST
27526: LIST
27527: PUSH
27528: LD_INT 0
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: LD_INT 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PUSH
27549: LD_INT 2
27551: NEG
27552: PUSH
27553: LD_INT 0
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: PUSH
27560: LD_INT 2
27562: NEG
27563: PUSH
27564: LD_INT 1
27566: NEG
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 2
27578: NEG
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: LD_INT 2
27586: NEG
27587: PUSH
27588: LD_INT 3
27590: NEG
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 1
27598: NEG
27599: PUSH
27600: LD_INT 3
27602: NEG
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 3
27610: NEG
27611: PUSH
27612: LD_INT 1
27614: NEG
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 3
27622: NEG
27623: PUSH
27624: LD_INT 2
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27657: LD_ADDR_VAR 0 29
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: PUSH
27672: LD_INT 0
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: EMPTY
27680: LIST
27681: LIST
27682: PUSH
27683: LD_INT 1
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: LD_INT 1
27698: PUSH
27699: EMPTY
27700: LIST
27701: LIST
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: LD_INT 1
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: LD_INT 1
27715: NEG
27716: PUSH
27717: LD_INT 0
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: NEG
27727: PUSH
27728: LD_INT 1
27730: NEG
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: LD_INT 2
27742: NEG
27743: PUSH
27744: EMPTY
27745: LIST
27746: LIST
27747: PUSH
27748: LD_INT 0
27750: PUSH
27751: LD_INT 2
27753: NEG
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 2
27772: PUSH
27773: LD_INT 0
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 2
27782: PUSH
27783: LD_INT 1
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: LD_INT 2
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PUSH
27800: LD_INT 0
27802: PUSH
27803: LD_INT 2
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: LD_INT 1
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 1
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: LD_INT 2
27839: NEG
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: LD_INT 3
27851: NEG
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: LD_INT 1
27862: NEG
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: PUSH
27868: LD_INT 3
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: LD_INT 3
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: PUSH
27888: LD_INT 1
27890: NEG
27891: PUSH
27892: LD_INT 2
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 3
27901: NEG
27902: PUSH
27903: LD_INT 2
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
27936: LD_ADDR_VAR 0 30
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 0
27953: PUSH
27954: LD_INT 1
27956: NEG
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 1
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 0
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 1
27994: NEG
27995: PUSH
27996: LD_INT 0
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 1
28005: NEG
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 2
28021: NEG
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 0
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 1
28043: NEG
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PUSH
28049: LD_INT 2
28051: PUSH
28052: LD_INT 0
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 2
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 2
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 1
28081: PUSH
28082: LD_INT 2
28084: PUSH
28085: EMPTY
28086: LIST
28087: LIST
28088: PUSH
28089: LD_INT 1
28091: NEG
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 2
28102: NEG
28103: PUSH
28104: LD_INT 0
28106: PUSH
28107: EMPTY
28108: LIST
28109: LIST
28110: PUSH
28111: LD_INT 2
28113: NEG
28114: PUSH
28115: LD_INT 1
28117: NEG
28118: PUSH
28119: EMPTY
28120: LIST
28121: LIST
28122: PUSH
28123: LD_INT 1
28125: NEG
28126: PUSH
28127: LD_INT 3
28129: NEG
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: LD_INT 1
28137: PUSH
28138: LD_INT 2
28140: NEG
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 2
28168: NEG
28169: PUSH
28170: LD_INT 1
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 3
28179: NEG
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: LIST
28195: LIST
28196: LIST
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: LIST
28203: LIST
28204: LIST
28205: LIST
28206: LIST
28207: LIST
28208: LIST
28209: LIST
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28214: LD_ADDR_VAR 0 31
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 0
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 1
28234: NEG
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 1
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: LD_INT 1
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: LD_INT 1
28265: PUSH
28266: EMPTY
28267: LIST
28268: LIST
28269: PUSH
28270: LD_INT 1
28272: NEG
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: PUSH
28281: LD_INT 1
28283: NEG
28284: PUSH
28285: LD_INT 1
28287: NEG
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 1
28295: NEG
28296: PUSH
28297: LD_INT 2
28299: NEG
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: LD_INT 1
28307: PUSH
28308: LD_INT 1
28310: NEG
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: LD_INT 0
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: LD_INT 1
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 2
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: PUSH
28349: LD_INT 2
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 1
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 2
28379: NEG
28380: PUSH
28381: LD_INT 1
28383: NEG
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 2
28391: NEG
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 2
28403: NEG
28404: PUSH
28405: LD_INT 3
28407: NEG
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PUSH
28413: LD_INT 2
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 3
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: LD_INT 1
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 1
28446: NEG
28447: PUSH
28448: LD_INT 2
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 3
28457: NEG
28458: PUSH
28459: LD_INT 2
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28492: LD_ADDR_VAR 0 32
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: LD_INT 0
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 0
28509: PUSH
28510: LD_INT 1
28512: NEG
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: LD_INT 0
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: LD_INT 1
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 0
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 1
28550: NEG
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 1
28561: NEG
28562: PUSH
28563: LD_INT 1
28565: NEG
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 2
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: LD_INT 2
28588: NEG
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: LD_INT 2
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 1
28627: PUSH
28628: LD_INT 2
28630: PUSH
28631: EMPTY
28632: LIST
28633: LIST
28634: PUSH
28635: LD_INT 0
28637: PUSH
28638: LD_INT 2
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PUSH
28645: LD_INT 1
28647: NEG
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 2
28669: NEG
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 1
28681: NEG
28682: PUSH
28683: LD_INT 3
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 2
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 2
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 2
28714: PUSH
28715: LD_INT 3
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 2
28724: NEG
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: LD_INT 3
28735: NEG
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28770: LD_ADDR_VAR 0 33
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: LD_INT 1
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 1
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 1
28828: NEG
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 1
28839: NEG
28840: PUSH
28841: LD_INT 1
28843: NEG
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: LD_INT 2
28855: NEG
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: PUSH
28864: LD_INT 1
28866: NEG
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 0
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 2
28884: PUSH
28885: LD_INT 1
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 0
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: NEG
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 2
28925: NEG
28926: PUSH
28927: LD_INT 0
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: LD_INT 1
28940: NEG
28941: PUSH
28942: EMPTY
28943: LIST
28944: LIST
28945: PUSH
28946: LD_INT 2
28948: NEG
28949: PUSH
28950: LD_INT 2
28952: NEG
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: PUSH
28958: LD_INT 2
28960: NEG
28961: PUSH
28962: LD_INT 3
28964: NEG
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: PUSH
28973: LD_INT 1
28975: NEG
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: PUSH
28981: LD_INT 3
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 3
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: LD_INT 2
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 3
29014: NEG
29015: PUSH
29016: LD_INT 2
29018: NEG
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29049: LD_ADDR_VAR 0 34
29053: PUSH
29054: LD_INT 0
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: LD_INT 1
29069: NEG
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 0
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 0
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 1
29118: NEG
29119: PUSH
29120: LD_INT 1
29122: NEG
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 2
29134: NEG
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 0
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: LD_INT 1
29156: NEG
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: PUSH
29162: LD_INT 2
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 2
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: PUSH
29182: LD_INT 1
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 1
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 2
29205: NEG
29206: PUSH
29207: LD_INT 0
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: NEG
29217: PUSH
29218: LD_INT 1
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: LD_INT 2
29232: NEG
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 1
29240: NEG
29241: PUSH
29242: LD_INT 3
29244: NEG
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: LD_INT 2
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 3
29263: PUSH
29264: LD_INT 2
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 2
29273: PUSH
29274: LD_INT 3
29276: PUSH
29277: EMPTY
29278: LIST
29279: LIST
29280: PUSH
29281: LD_INT 2
29283: NEG
29284: PUSH
29285: LD_INT 1
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29329: LD_ADDR_VAR 0 35
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 0
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: LD_INT 1
29349: NEG
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 1
29367: PUSH
29368: LD_INT 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 0
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 1
29387: NEG
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 1
29398: NEG
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 1
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 2
29420: NEG
29421: PUSH
29422: LD_INT 1
29424: NEG
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29441: LD_ADDR_VAR 0 36
29445: PUSH
29446: LD_INT 0
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 1
29461: NEG
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: LD_INT 1
29469: PUSH
29470: LD_INT 0
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 1
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 0
29489: PUSH
29490: LD_INT 1
29492: PUSH
29493: EMPTY
29494: LIST
29495: LIST
29496: PUSH
29497: LD_INT 1
29499: NEG
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: EMPTY
29505: LIST
29506: LIST
29507: PUSH
29508: LD_INT 1
29510: NEG
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: NEG
29523: PUSH
29524: LD_INT 2
29526: NEG
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 1
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29553: LD_ADDR_VAR 0 37
29557: PUSH
29558: LD_INT 0
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 0
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 1
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 0
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 1
29622: NEG
29623: PUSH
29624: LD_INT 1
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: LD_INT 1
29634: PUSH
29635: LD_INT 1
29637: NEG
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 1
29645: NEG
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29665: LD_ADDR_VAR 0 38
29669: PUSH
29670: LD_INT 0
29672: PUSH
29673: LD_INT 0
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: LD_INT 1
29685: NEG
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 0
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: PUSH
29704: LD_INT 1
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 1
29723: NEG
29724: PUSH
29725: LD_INT 0
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: LD_INT 1
29734: NEG
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: NEG
29757: PUSH
29758: LD_INT 1
29760: NEG
29761: PUSH
29762: EMPTY
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29777: LD_ADDR_VAR 0 39
29781: PUSH
29782: LD_INT 0
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 0
29794: PUSH
29795: LD_INT 1
29797: NEG
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PUSH
29803: LD_INT 1
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: PUSH
29813: LD_INT 1
29815: PUSH
29816: LD_INT 1
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 0
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 1
29835: NEG
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 1
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 1
29858: NEG
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 2
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29889: LD_ADDR_VAR 0 40
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: LD_INT 1
29973: NEG
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 1
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30001: LD_ADDR_VAR 0 41
30005: PUSH
30006: LD_INT 0
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 1
30021: NEG
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: LD_INT 0
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 1
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 0
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 1
30059: NEG
30060: PUSH
30061: LD_INT 0
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 1
30070: NEG
30071: PUSH
30072: LD_INT 1
30074: NEG
30075: PUSH
30076: EMPTY
30077: LIST
30078: LIST
30079: PUSH
30080: LD_INT 1
30082: NEG
30083: PUSH
30084: LD_INT 2
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 1
30097: NEG
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PUSH
30103: LD_INT 2
30105: PUSH
30106: LD_INT 0
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 2
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 2
30125: PUSH
30126: LD_INT 2
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: PUSH
30136: LD_INT 2
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: NEG
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 2
30167: NEG
30168: PUSH
30169: LD_INT 1
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 2
30179: NEG
30180: PUSH
30181: LD_INT 2
30183: NEG
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 2
30191: NEG
30192: PUSH
30193: LD_INT 3
30195: NEG
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: LD_INT 1
30206: NEG
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 3
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 2
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 3
30244: PUSH
30245: LD_INT 3
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 3
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 2
30264: NEG
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 3
30275: NEG
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 3
30286: NEG
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 3
30298: NEG
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 3
30310: NEG
30311: PUSH
30312: LD_INT 3
30314: NEG
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30351: LD_ADDR_VAR 0 42
30355: PUSH
30356: LD_INT 0
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 1
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: LD_INT 0
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 1
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 0
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: LD_INT 0
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 1
30420: NEG
30421: PUSH
30422: LD_INT 1
30424: NEG
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 2
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 1
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 1
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: LD_INT 2
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 1
30486: PUSH
30487: LD_INT 2
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 0
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: NEG
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: NEG
30518: PUSH
30519: LD_INT 1
30521: NEG
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: PUSH
30527: LD_INT 2
30529: NEG
30530: PUSH
30531: LD_INT 2
30533: NEG
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 2
30541: NEG
30542: PUSH
30543: LD_INT 3
30545: NEG
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 3
30557: NEG
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: LD_INT 3
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: PUSH
30577: LD_INT 2
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 3
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: EMPTY
30592: LIST
30593: LIST
30594: PUSH
30595: LD_INT 3
30597: PUSH
30598: LD_INT 3
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 3
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 3
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 3
30648: NEG
30649: PUSH
30650: LD_INT 2
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 3
30660: NEG
30661: PUSH
30662: LD_INT 3
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30701: LD_ADDR_VAR 0 43
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: LD_INT 0
30711: PUSH
30712: EMPTY
30713: LIST
30714: LIST
30715: PUSH
30716: LD_INT 0
30718: PUSH
30719: LD_INT 1
30721: NEG
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: LD_INT 1
30729: PUSH
30730: LD_INT 0
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: LD_INT 1
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 1
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 1
30759: NEG
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: LD_INT 2
30786: NEG
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 0
30794: PUSH
30795: LD_INT 2
30797: NEG
30798: PUSH
30799: EMPTY
30800: LIST
30801: LIST
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: LD_INT 1
30808: NEG
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 0
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 2
30867: NEG
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: LD_INT 3
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 3
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 2
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 3
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 3
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 3
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 2
30986: NEG
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 3
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 3
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31049: LD_ADDR_VAR 0 44
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 0
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: LD_INT 1
31069: NEG
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 1
31107: NEG
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: LD_INT 1
31122: NEG
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 1
31130: NEG
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 2
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 2
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 2
31204: NEG
31205: PUSH
31206: LD_INT 0
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: LD_INT 1
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: LD_INT 2
31231: NEG
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 2
31239: NEG
31240: PUSH
31241: LD_INT 3
31243: NEG
31244: PUSH
31245: EMPTY
31246: LIST
31247: LIST
31248: PUSH
31249: LD_INT 2
31251: PUSH
31252: LD_INT 1
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 3
31262: PUSH
31263: LD_INT 0
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 3
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 3
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 3
31292: PUSH
31293: LD_INT 3
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 2
31302: PUSH
31303: LD_INT 3
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 1
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 3
31323: NEG
31324: PUSH
31325: LD_INT 0
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 3
31334: NEG
31335: PUSH
31336: LD_INT 1
31338: NEG
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 3
31346: NEG
31347: PUSH
31348: LD_INT 2
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 3
31358: NEG
31359: PUSH
31360: LD_INT 3
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31399: LD_ADDR_VAR 0 45
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: NEG
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 0
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: PUSH
31575: LD_INT 2
31577: NEG
31578: PUSH
31579: LD_INT 2
31581: NEG
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: LD_INT 3
31593: NEG
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: PUSH
31599: LD_INT 1
31601: NEG
31602: PUSH
31603: LD_INT 3
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 0
31613: PUSH
31614: LD_INT 3
31616: NEG
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 1
31624: PUSH
31625: LD_INT 2
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 3
31635: PUSH
31636: LD_INT 2
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 3
31645: PUSH
31646: LD_INT 3
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 2
31655: PUSH
31656: LD_INT 3
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: LD_INT 3
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 0
31675: PUSH
31676: LD_INT 3
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: EMPTY
31691: LIST
31692: LIST
31693: PUSH
31694: LD_INT 3
31696: NEG
31697: PUSH
31698: LD_INT 2
31700: NEG
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 3
31708: NEG
31709: PUSH
31710: LD_INT 3
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31749: LD_ADDR_VAR 0 46
31753: PUSH
31754: LD_INT 0
31756: PUSH
31757: LD_INT 0
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 1
31769: NEG
31770: PUSH
31771: EMPTY
31772: LIST
31773: LIST
31774: PUSH
31775: LD_INT 1
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_INT 1
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: EMPTY
31792: LIST
31793: LIST
31794: PUSH
31795: LD_INT 0
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 1
31818: NEG
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 2
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: LD_INT 2
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 1
31856: NEG
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 2
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 2
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 2
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 2
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 2
31915: NEG
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: PUSH
31924: LD_INT 2
31926: NEG
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 3
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 3
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 1
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 3
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PUSH
31991: LD_INT 3
31993: PUSH
31994: LD_INT 1
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: LD_INT 3
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: LD_INT 0
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_INT 1
32023: NEG
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 2
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 3
32045: NEG
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 3
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32097: LD_ADDR_VAR 0 47
32101: PUSH
32102: LD_INT 0
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: LD_INT 1
32117: NEG
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: PUSH
32123: LD_INT 1
32125: PUSH
32126: LD_INT 0
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: LD_INT 1
32135: PUSH
32136: LD_INT 1
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 1
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 1
32155: NEG
32156: PUSH
32157: LD_INT 0
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: LD_INT 1
32170: NEG
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PUSH
32180: LD_INT 2
32182: NEG
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 2
32193: NEG
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 1
32201: PUSH
32202: LD_INT 1
32204: NEG
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 2
32212: NEG
32213: PUSH
32214: LD_INT 1
32216: NEG
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 2
32224: NEG
32225: PUSH
32226: LD_INT 2
32228: NEG
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32248: LD_ADDR_VAR 0 48
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32395: LD_ADDR_VAR 0 49
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 0
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 0
32412: PUSH
32413: LD_INT 1
32415: NEG
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 1
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 1
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: NEG
32465: PUSH
32466: LD_INT 1
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PUSH
32495: LD_INT 2
32497: PUSH
32498: LD_INT 1
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: PUSH
32518: LD_INT 2
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32539: LD_ADDR_VAR 0 50
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 2
32620: PUSH
32621: LD_INT 1
32623: PUSH
32624: EMPTY
32625: LIST
32626: LIST
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: LD_INT 2
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 1
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 0
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: NEG
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32683: LD_ADDR_VAR 0 51
32687: PUSH
32688: LD_INT 0
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 1
32721: PUSH
32722: LD_INT 1
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 0
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 1
32741: NEG
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 2
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: LD_INT 1
32788: PUSH
32789: EMPTY
32790: LIST
32791: LIST
32792: PUSH
32793: LD_INT 2
32795: NEG
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: LD_INT 2
32806: NEG
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32830: LD_ADDR_VAR 0 52
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 0
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 0
32847: PUSH
32848: LD_INT 1
32850: NEG
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: LD_INT 0
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 0
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: LD_INT 0
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: NEG
32900: PUSH
32901: LD_INT 1
32903: NEG
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 2
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 1
32923: NEG
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: LD_INT 0
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: LD_INT 1
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 2
32957: NEG
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: EMPTY
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32981: LD_ADDR_VAR 0 53
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: LD_INT 0
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 1
33050: NEG
33051: PUSH
33052: LD_INT 1
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 2
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 0
33074: PUSH
33075: LD_INT 2
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 1
33088: NEG
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 2
33096: PUSH
33097: LD_INT 0
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 2
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 2
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: PUSH
33127: LD_INT 2
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 2
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: NEG
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 2
33168: NEG
33169: PUSH
33170: LD_INT 1
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: NEG
33181: PUSH
33182: LD_INT 2
33184: NEG
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33211: LD_ADDR_VAR 0 54
33215: PUSH
33216: LD_INT 0
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 1
33249: PUSH
33250: LD_INT 1
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 0
33259: PUSH
33260: LD_INT 1
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: PUSH
33278: LD_INT 1
33280: NEG
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 2
33296: NEG
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 0
33304: PUSH
33305: LD_INT 2
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 1
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 2
33326: PUSH
33327: LD_INT 0
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 1
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 2
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 2
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: LD_INT 2
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: LD_INT 1
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 2
33387: NEG
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: NEG
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: NEG
33411: PUSH
33412: LD_INT 2
33414: NEG
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33441: LD_ADDR_VAR 0 55
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 0
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: NEG
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 1
33522: NEG
33523: PUSH
33524: LD_INT 2
33526: NEG
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: LD_INT 2
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 1
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 2
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: PUSH
33587: LD_INT 2
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: LD_INT 2
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PUSH
33615: LD_INT 2
33617: NEG
33618: PUSH
33619: LD_INT 0
33621: PUSH
33622: EMPTY
33623: LIST
33624: LIST
33625: PUSH
33626: LD_INT 2
33628: NEG
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: NEG
33641: PUSH
33642: LD_INT 2
33644: NEG
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: LIST
33659: LIST
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: LIST
33667: LIST
33668: LIST
33669: LIST
33670: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33671: LD_ADDR_VAR 0 56
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 0
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: LD_INT 1
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 0
33719: PUSH
33720: LD_INT 1
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 1
33740: NEG
33741: PUSH
33742: LD_INT 1
33744: NEG
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 1
33752: NEG
33753: PUSH
33754: LD_INT 2
33756: NEG
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 0
33764: PUSH
33765: LD_INT 2
33767: NEG
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 2
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 2
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 2
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 2
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 2
33858: NEG
33859: PUSH
33860: LD_INT 1
33862: NEG
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: LD_INT 2
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33901: LD_ADDR_VAR 0 57
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 0
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: PUSH
33930: LD_INT 0
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 1
33939: PUSH
33940: LD_INT 1
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: PUSH
33947: LD_INT 0
33949: PUSH
33950: LD_INT 1
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: NEG
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: NEG
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 1
33982: NEG
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 0
33994: PUSH
33995: LD_INT 2
33997: NEG
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 1
34008: NEG
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: PUSH
34014: LD_INT 2
34016: PUSH
34017: LD_INT 0
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: PUSH
34024: LD_INT 2
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: LD_INT 0
34056: PUSH
34057: LD_INT 2
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: NEG
34067: PUSH
34068: LD_INT 1
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 2
34077: NEG
34078: PUSH
34079: LD_INT 0
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: LD_INT 1
34092: NEG
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: NEG
34101: PUSH
34102: LD_INT 2
34104: NEG
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34131: LD_ADDR_VAR 0 58
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: LD_INT 2
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34361: LD_ADDR_VAR 0 59
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 0
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: LD_INT 1
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: LD_INT 0
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34449: LD_ADDR_VAR 0 60
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 0
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 0
34497: PUSH
34498: LD_INT 1
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 0
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34537: LD_ADDR_VAR 0 61
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 0
34554: PUSH
34555: LD_INT 1
34557: NEG
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: LD_INT 1
34610: NEG
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34625: LD_ADDR_VAR 0 62
34629: PUSH
34630: LD_INT 0
34632: PUSH
34633: LD_INT 0
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: EMPTY
34648: LIST
34649: LIST
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: LD_INT 0
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 1
34663: PUSH
34664: LD_INT 1
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: PUSH
34671: LD_INT 0
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: LD_INT 0
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34713: LD_ADDR_VAR 0 63
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 1
34741: PUSH
34742: LD_INT 0
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34801: LD_ADDR_VAR 0 64
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: ST_TO_ADDR
// end ; 1 :
34889: GO 40786
34891: LD_INT 1
34893: DOUBLE
34894: EQUAL
34895: IFTRUE 34899
34897: GO 37522
34899: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34900: LD_ADDR_VAR 0 11
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: LD_INT 3
34911: NEG
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 0
34919: PUSH
34920: LD_INT 3
34922: NEG
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: LD_INT 2
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: LIST
34943: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34944: LD_ADDR_VAR 0 12
34948: PUSH
34949: LD_INT 2
34951: PUSH
34952: LD_INT 1
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 0
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 1
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34985: LD_ADDR_VAR 0 13
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: LD_INT 2
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: LD_INT 3
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 3
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35025: LD_ADDR_VAR 0 14
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 3
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35066: LD_ADDR_VAR 0 15
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 1
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 3
35084: NEG
35085: PUSH
35086: LD_INT 0
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35110: LD_ADDR_VAR 0 16
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: LD_INT 3
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 3
35129: NEG
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 3
35141: NEG
35142: PUSH
35143: LD_INT 3
35145: NEG
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35156: LD_ADDR_VAR 0 17
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: LD_INT 3
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 0
35175: PUSH
35176: LD_INT 3
35178: NEG
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: LIST
35199: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35200: LD_ADDR_VAR 0 18
35204: PUSH
35205: LD_INT 2
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 3
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: LIST
35240: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35241: LD_ADDR_VAR 0 19
35245: PUSH
35246: LD_INT 3
35248: PUSH
35249: LD_INT 2
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 3
35258: PUSH
35259: LD_INT 3
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 2
35268: PUSH
35269: LD_INT 3
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35281: LD_ADDR_VAR 0 20
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 3
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 3
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: LIST
35321: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35322: LD_ADDR_VAR 0 21
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: LD_INT 1
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: PUSH
35338: LD_INT 3
35340: NEG
35341: PUSH
35342: LD_INT 0
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: LD_INT 3
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35366: LD_ADDR_VAR 0 22
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: LD_INT 3
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 3
35385: NEG
35386: PUSH
35387: LD_INT 2
35389: NEG
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: PUSH
35395: LD_INT 3
35397: NEG
35398: PUSH
35399: LD_INT 3
35401: NEG
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35412: LD_ADDR_VAR 0 23
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: LD_INT 3
35422: NEG
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: LD_INT 4
35434: NEG
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 3
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35456: LD_ADDR_VAR 0 24
35460: PUSH
35461: LD_INT 3
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 3
35473: PUSH
35474: LD_INT 1
35476: NEG
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 4
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: LIST
35496: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35497: LD_ADDR_VAR 0 25
35501: PUSH
35502: LD_INT 3
35504: PUSH
35505: LD_INT 3
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 4
35514: PUSH
35515: LD_INT 3
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 3
35524: PUSH
35525: LD_INT 4
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: LIST
35536: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35537: LD_ADDR_VAR 0 26
35541: PUSH
35542: LD_INT 0
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 4
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 3
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35578: LD_ADDR_VAR 0 27
35582: PUSH
35583: LD_INT 3
35585: NEG
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 3
35596: NEG
35597: PUSH
35598: LD_INT 1
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 4
35607: NEG
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: LIST
35621: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35622: LD_ADDR_VAR 0 28
35626: PUSH
35627: LD_INT 3
35629: NEG
35630: PUSH
35631: LD_INT 3
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 3
35641: NEG
35642: PUSH
35643: LD_INT 4
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 4
35653: NEG
35654: PUSH
35655: LD_INT 3
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: LIST
35667: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35668: LD_ADDR_VAR 0 29
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: LD_INT 3
35679: NEG
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 0
35687: PUSH
35688: LD_INT 3
35690: NEG
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 1
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: LD_INT 4
35713: NEG
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 4
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 1
35732: PUSH
35733: LD_INT 3
35735: NEG
35736: PUSH
35737: EMPTY
35738: LIST
35739: LIST
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: LD_INT 5
35747: NEG
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: LD_INT 5
35758: NEG
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 4
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 6
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 6
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 5
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35823: LD_ADDR_VAR 0 30
35827: PUSH
35828: LD_INT 2
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 3
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 3
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 3
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: PUSH
35870: LD_INT 4
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 4
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 4
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 5
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 5
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 5
35923: PUSH
35924: LD_INT 1
35926: NEG
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 6
35934: PUSH
35935: LD_INT 0
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 6
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
35966: LD_ADDR_VAR 0 31
35970: PUSH
35971: LD_INT 3
35973: PUSH
35974: LD_INT 2
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 3
35983: PUSH
35984: LD_INT 3
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 2
35993: PUSH
35994: LD_INT 3
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 4
36003: PUSH
36004: LD_INT 3
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 4
36013: PUSH
36014: LD_INT 4
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 3
36023: PUSH
36024: LD_INT 4
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: LD_INT 4
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 5
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 4
36053: PUSH
36054: LD_INT 5
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 6
36063: PUSH
36064: LD_INT 5
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 6
36073: PUSH
36074: LD_INT 6
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 5
36083: PUSH
36084: LD_INT 6
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36105: LD_ADDR_VAR 0 32
36109: PUSH
36110: LD_INT 1
36112: PUSH
36113: LD_INT 3
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 3
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: LD_INT 2
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: PUSH
36144: LD_INT 4
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 0
36153: PUSH
36154: LD_INT 4
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 3
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: PUSH
36175: LD_INT 5
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: LD_INT 5
36187: PUSH
36188: EMPTY
36189: LIST
36190: LIST
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: LD_INT 4
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: LD_INT 1
36205: PUSH
36206: LD_INT 6
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 0
36215: PUSH
36216: LD_INT 6
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 1
36225: NEG
36226: PUSH
36227: LD_INT 5
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36248: LD_ADDR_VAR 0 33
36252: PUSH
36253: LD_INT 2
36255: NEG
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 3
36266: NEG
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 3
36277: NEG
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 3
36289: NEG
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 4
36300: NEG
36301: PUSH
36302: LD_INT 0
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 4
36311: NEG
36312: PUSH
36313: LD_INT 1
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 4
36323: NEG
36324: PUSH
36325: LD_INT 1
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 5
36334: NEG
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 5
36345: NEG
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 5
36357: NEG
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 6
36368: NEG
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 6
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36403: LD_ADDR_VAR 0 34
36407: PUSH
36408: LD_INT 2
36410: NEG
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 3
36422: NEG
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 3
36434: NEG
36435: PUSH
36436: LD_INT 3
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 3
36446: NEG
36447: PUSH
36448: LD_INT 4
36450: NEG
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 4
36458: NEG
36459: PUSH
36460: LD_INT 3
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 4
36470: NEG
36471: PUSH
36472: LD_INT 4
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 4
36482: NEG
36483: PUSH
36484: LD_INT 5
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 5
36494: NEG
36495: PUSH
36496: LD_INT 4
36498: NEG
36499: PUSH
36500: EMPTY
36501: LIST
36502: LIST
36503: PUSH
36504: LD_INT 5
36506: NEG
36507: PUSH
36508: LD_INT 5
36510: NEG
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 5
36518: NEG
36519: PUSH
36520: LD_INT 6
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 6
36530: NEG
36531: PUSH
36532: LD_INT 5
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 6
36542: NEG
36543: PUSH
36544: LD_INT 6
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36566: LD_ADDR_VAR 0 41
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: LD_INT 2
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 3
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36610: LD_ADDR_VAR 0 42
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 3
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: LIST
36650: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36651: LD_ADDR_VAR 0 43
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 2
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 3
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 2
36678: PUSH
36679: LD_INT 3
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: LIST
36690: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36691: LD_ADDR_VAR 0 44
36695: PUSH
36696: LD_INT 0
36698: PUSH
36699: LD_INT 2
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: LD_INT 2
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: LIST
36731: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36732: LD_ADDR_VAR 0 45
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 3
36761: NEG
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36776: LD_ADDR_VAR 0 46
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: LD_INT 2
36787: NEG
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 2
36795: NEG
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 3
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: LIST
36821: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36822: LD_ADDR_VAR 0 47
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: LD_INT 3
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36855: LD_ADDR_VAR 0 48
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 2
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
36886: LD_ADDR_VAR 0 49
36890: PUSH
36891: LD_INT 3
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 3
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
36915: LD_ADDR_VAR 0 50
36919: PUSH
36920: LD_INT 2
36922: PUSH
36923: LD_INT 3
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: LD_INT 3
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
36944: LD_ADDR_VAR 0 51
36948: PUSH
36949: LD_INT 1
36951: NEG
36952: PUSH
36953: LD_INT 2
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: NEG
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36975: LD_ADDR_VAR 0 52
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 3
36994: NEG
36995: PUSH
36996: LD_INT 2
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37008: LD_ADDR_VAR 0 53
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: LD_INT 3
37019: NEG
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 0
37027: PUSH
37028: LD_INT 3
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: LD_INT 2
37041: NEG
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37052: LD_ADDR_VAR 0 54
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 3
37080: PUSH
37081: LD_INT 1
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37093: LD_ADDR_VAR 0 55
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 3
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37133: LD_ADDR_VAR 0 56
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37174: LD_ADDR_VAR 0 57
37178: PUSH
37179: LD_INT 2
37181: NEG
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 3
37192: NEG
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 3
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37218: LD_ADDR_VAR 0 58
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 3
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 3
37237: NEG
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 3
37249: NEG
37250: PUSH
37251: LD_INT 3
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: LIST
37263: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37264: LD_ADDR_VAR 0 59
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 2
37286: NEG
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 1
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37308: LD_ADDR_VAR 0 60
37312: PUSH
37313: LD_INT 1
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 2
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: LIST
37348: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37349: LD_ADDR_VAR 0 61
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 1
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: LIST
37388: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37389: LD_ADDR_VAR 0 62
37393: PUSH
37394: LD_INT 1
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: NEG
37417: PUSH
37418: LD_INT 1
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37430: LD_ADDR_VAR 0 63
37434: PUSH
37435: LD_INT 1
37437: NEG
37438: PUSH
37439: LD_INT 1
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: NEG
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37474: LD_ADDR_VAR 0 64
37478: PUSH
37479: LD_INT 1
37481: NEG
37482: PUSH
37483: LD_INT 2
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: NEG
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: LIST
37519: ST_TO_ADDR
// end ; 2 :
37520: GO 40786
37522: LD_INT 2
37524: DOUBLE
37525: EQUAL
37526: IFTRUE 37530
37528: GO 40785
37530: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37531: LD_ADDR_VAR 0 29
37535: PUSH
37536: LD_INT 4
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 4
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 5
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 5
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 4
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 3
37610: PUSH
37611: LD_INT 2
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 5
37621: PUSH
37622: LD_INT 2
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 3
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 3
37641: PUSH
37642: LD_INT 2
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 4
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 4
37661: PUSH
37662: LD_INT 4
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 3
37671: PUSH
37672: LD_INT 4
37674: PUSH
37675: EMPTY
37676: LIST
37677: LIST
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 2
37691: PUSH
37692: LD_INT 2
37694: PUSH
37695: EMPTY
37696: LIST
37697: LIST
37698: PUSH
37699: LD_INT 4
37701: PUSH
37702: LD_INT 2
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 4
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 0
37721: PUSH
37722: LD_INT 4
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 0
37731: PUSH
37732: LD_INT 3
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 4
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 5
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 5
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: NEG
37772: PUSH
37773: LD_INT 4
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 2
37793: PUSH
37794: LD_INT 5
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 3
37814: NEG
37815: PUSH
37816: LD_INT 0
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 3
37825: NEG
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 2
37837: NEG
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: LD_INT 1
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 3
37859: NEG
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 4
37870: NEG
37871: PUSH
37872: LD_INT 0
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 4
37881: NEG
37882: PUSH
37883: LD_INT 1
37885: NEG
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 4
37893: NEG
37894: PUSH
37895: LD_INT 2
37897: NEG
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: NEG
37906: PUSH
37907: LD_INT 2
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 4
37916: NEG
37917: PUSH
37918: LD_INT 4
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 4
37928: NEG
37929: PUSH
37930: LD_INT 5
37932: NEG
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 3
37940: NEG
37941: PUSH
37942: LD_INT 4
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 3
37952: NEG
37953: PUSH
37954: LD_INT 3
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 4
37964: NEG
37965: PUSH
37966: LD_INT 3
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 5
37976: NEG
37977: PUSH
37978: LD_INT 4
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 5
37988: NEG
37989: PUSH
37990: LD_INT 5
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 3
38000: NEG
38001: PUSH
38002: LD_INT 5
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 5
38012: NEG
38013: PUSH
38014: LD_INT 3
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38069: LD_ADDR_VAR 0 30
38073: PUSH
38074: LD_INT 4
38076: PUSH
38077: LD_INT 4
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 4
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 5
38096: PUSH
38097: LD_INT 4
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 5
38106: PUSH
38107: LD_INT 5
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: LD_INT 5
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: LD_INT 4
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 3
38136: PUSH
38137: LD_INT 3
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 5
38146: PUSH
38147: LD_INT 3
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 5
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: PUSH
38187: LD_INT 3
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 4
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 4
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: NEG
38217: PUSH
38218: LD_INT 3
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: LD_INT 4
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 4
38259: NEG
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 4
38270: NEG
38271: PUSH
38272: LD_INT 1
38274: NEG
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 3
38282: NEG
38283: PUSH
38284: LD_INT 0
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: NEG
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 4
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 5
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 5
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 5
38338: NEG
38339: PUSH
38340: LD_INT 2
38342: NEG
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: LD_INT 3
38350: NEG
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PUSH
38359: LD_INT 3
38361: NEG
38362: PUSH
38363: LD_INT 3
38365: NEG
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 4
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 3
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 2
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 3
38409: NEG
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 4
38421: NEG
38422: PUSH
38423: LD_INT 3
38425: NEG
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 4
38433: NEG
38434: PUSH
38435: LD_INT 4
38437: NEG
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: NEG
38446: PUSH
38447: LD_INT 4
38449: NEG
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 4
38457: NEG
38458: PUSH
38459: LD_INT 2
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 4
38472: NEG
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 5
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 4
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 3
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 3
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 4
38528: NEG
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: LD_INT 5
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 2
38548: PUSH
38549: LD_INT 3
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: LD_INT 5
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38616: LD_ADDR_VAR 0 31
38620: PUSH
38621: LD_INT 0
38623: PUSH
38624: LD_INT 4
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: LD_INT 3
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: LD_INT 4
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: PUSH
38654: LD_INT 5
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 5
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 4
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: LD_INT 3
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: LD_INT 5
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: LD_INT 2
38705: NEG
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: NEG
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 3
38727: NEG
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: NEG
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 3
38761: NEG
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 4
38772: NEG
38773: PUSH
38774: LD_INT 0
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 4
38783: NEG
38784: PUSH
38785: LD_INT 1
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 4
38795: NEG
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 2
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 4
38818: NEG
38819: PUSH
38820: LD_INT 4
38822: NEG
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 4
38830: NEG
38831: PUSH
38832: LD_INT 5
38834: NEG
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 3
38842: NEG
38843: PUSH
38844: LD_INT 4
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: NEG
38855: PUSH
38856: LD_INT 3
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 4
38866: NEG
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 5
38878: NEG
38879: PUSH
38880: LD_INT 4
38882: NEG
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 5
38890: NEG
38891: PUSH
38892: LD_INT 5
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 3
38902: NEG
38903: PUSH
38904: LD_INT 5
38906: NEG
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 5
38914: NEG
38915: PUSH
38916: LD_INT 3
38918: NEG
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 3
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: LD_INT 4
38940: NEG
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 3
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: LD_INT 2
38973: NEG
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 3
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: LD_INT 4
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 2
39016: NEG
39017: PUSH
39018: LD_INT 4
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 4
39038: PUSH
39039: LD_INT 1
39041: NEG
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 5
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 5
39059: PUSH
39060: LD_INT 1
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 4
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 3
39100: PUSH
39101: LD_INT 2
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 5
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39166: LD_ADDR_VAR 0 32
39170: PUSH
39171: LD_INT 4
39173: NEG
39174: PUSH
39175: LD_INT 0
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 4
39184: NEG
39185: PUSH
39186: LD_INT 1
39188: NEG
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 3
39196: NEG
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 3
39207: NEG
39208: PUSH
39209: LD_INT 1
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: PUSH
39216: LD_INT 4
39218: NEG
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 5
39229: NEG
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 5
39240: NEG
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 5
39252: NEG
39253: PUSH
39254: LD_INT 2
39256: NEG
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 3
39264: NEG
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 3
39275: NEG
39276: PUSH
39277: LD_INT 3
39279: NEG
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 3
39287: NEG
39288: PUSH
39289: LD_INT 4
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 2
39299: NEG
39300: PUSH
39301: LD_INT 3
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 3
39323: NEG
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 4
39335: NEG
39336: PUSH
39337: LD_INT 3
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 4
39347: NEG
39348: PUSH
39349: LD_INT 4
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: NEG
39360: PUSH
39361: LD_INT 4
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 4
39371: NEG
39372: PUSH
39373: LD_INT 2
39375: NEG
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 4
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 5
39397: NEG
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: PUSH
39406: LD_INT 4
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 1
39416: PUSH
39417: LD_INT 3
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 0
39427: PUSH
39428: LD_INT 3
39430: NEG
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: PUSH
39436: LD_INT 1
39438: NEG
39439: PUSH
39440: LD_INT 4
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: NEG
39451: PUSH
39452: LD_INT 5
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: PUSH
39463: LD_INT 3
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 5
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 3
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: LD_INT 1
39498: NEG
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 4
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 4
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 3
39526: PUSH
39527: LD_INT 1
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: PUSH
39534: LD_INT 2
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 4
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 4
39578: PUSH
39579: LD_INT 4
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: LD_INT 3
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 5
39598: PUSH
39599: LD_INT 4
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 5
39608: PUSH
39609: LD_INT 5
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 4
39618: PUSH
39619: LD_INT 5
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: PUSH
39629: LD_INT 4
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: PUSH
39639: LD_INT 3
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 5
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 3
39658: PUSH
39659: LD_INT 5
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39713: LD_ADDR_VAR 0 33
39717: PUSH
39718: LD_INT 4
39720: NEG
39721: PUSH
39722: LD_INT 4
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 4
39732: NEG
39733: PUSH
39734: LD_INT 5
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 3
39744: NEG
39745: PUSH
39746: LD_INT 4
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 3
39756: NEG
39757: PUSH
39758: LD_INT 3
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 4
39768: NEG
39769: PUSH
39770: LD_INT 3
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 5
39780: NEG
39781: PUSH
39782: LD_INT 4
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 5
39792: NEG
39793: PUSH
39794: LD_INT 5
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 3
39804: NEG
39805: PUSH
39806: LD_INT 5
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 5
39816: NEG
39817: PUSH
39818: LD_INT 3
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: LD_INT 3
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 4
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 3
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 2
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: LD_INT 2
39875: NEG
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: LD_INT 3
39887: NEG
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 4
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: LD_INT 4
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 4
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 4
39940: PUSH
39941: LD_INT 1
39943: NEG
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 5
39951: PUSH
39952: LD_INT 0
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 5
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 4
39971: PUSH
39972: LD_INT 1
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 3
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 3
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 5
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 3
40023: PUSH
40024: LD_INT 3
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: LD_INT 2
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 4
40043: PUSH
40044: LD_INT 3
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 4
40053: PUSH
40054: LD_INT 4
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 3
40063: PUSH
40064: LD_INT 4
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: PUSH
40074: LD_INT 3
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 4
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 4
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 4
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 4
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: LD_INT 5
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 5
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: LD_INT 4
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: NEG
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PUSH
40183: LD_INT 2
40185: PUSH
40186: LD_INT 5
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: LIST
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40251: LD_ADDR_VAR 0 34
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 4
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: LD_INT 5
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 4
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: LD_INT 3
40294: NEG
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 0
40302: PUSH
40303: LD_INT 3
40305: NEG
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: LD_INT 4
40317: NEG
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 5
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 2
40337: PUSH
40338: LD_INT 3
40340: NEG
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 5
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 3
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 3
40370: PUSH
40371: LD_INT 1
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 4
40381: PUSH
40382: LD_INT 0
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 4
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 3
40401: PUSH
40402: LD_INT 1
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 0
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 1
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 2
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 4
40443: PUSH
40444: LD_INT 2
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 4
40453: PUSH
40454: LD_INT 4
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 4
40463: PUSH
40464: LD_INT 3
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 5
40473: PUSH
40474: LD_INT 4
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 5
40483: PUSH
40484: LD_INT 5
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 4
40493: PUSH
40494: LD_INT 5
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 3
40503: PUSH
40504: LD_INT 4
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: LD_INT 3
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 5
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 3
40533: PUSH
40534: LD_INT 5
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 0
40543: PUSH
40544: LD_INT 3
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: LD_INT 3
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 4
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 4
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 3
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 2
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: LD_INT 4
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: LD_INT 2
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 4
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 4
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 3
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 4
40681: NEG
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 5
40692: NEG
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 5
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 5
40715: NEG
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 3
40727: NEG
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: LIST
40779: LIST
40780: LIST
40781: LIST
40782: ST_TO_ADDR
// end ; end ;
40783: GO 40786
40785: POP
// case btype of b_depot , b_warehouse :
40786: LD_VAR 0 1
40790: PUSH
40791: LD_INT 0
40793: DOUBLE
40794: EQUAL
40795: IFTRUE 40805
40797: LD_INT 1
40799: DOUBLE
40800: EQUAL
40801: IFTRUE 40805
40803: GO 41006
40805: POP
// case nation of nation_american :
40806: LD_VAR 0 5
40810: PUSH
40811: LD_INT 1
40813: DOUBLE
40814: EQUAL
40815: IFTRUE 40819
40817: GO 40875
40819: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40820: LD_ADDR_VAR 0 9
40824: PUSH
40825: LD_VAR 0 11
40829: PUSH
40830: LD_VAR 0 12
40834: PUSH
40835: LD_VAR 0 13
40839: PUSH
40840: LD_VAR 0 14
40844: PUSH
40845: LD_VAR 0 15
40849: PUSH
40850: LD_VAR 0 16
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: PUSH
40863: LD_VAR 0 4
40867: PUSH
40868: LD_INT 1
40870: PLUS
40871: ARRAY
40872: ST_TO_ADDR
40873: GO 41004
40875: LD_INT 2
40877: DOUBLE
40878: EQUAL
40879: IFTRUE 40883
40881: GO 40939
40883: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
40884: LD_ADDR_VAR 0 9
40888: PUSH
40889: LD_VAR 0 17
40893: PUSH
40894: LD_VAR 0 18
40898: PUSH
40899: LD_VAR 0 19
40903: PUSH
40904: LD_VAR 0 20
40908: PUSH
40909: LD_VAR 0 21
40913: PUSH
40914: LD_VAR 0 22
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: PUSH
40927: LD_VAR 0 4
40931: PUSH
40932: LD_INT 1
40934: PLUS
40935: ARRAY
40936: ST_TO_ADDR
40937: GO 41004
40939: LD_INT 3
40941: DOUBLE
40942: EQUAL
40943: IFTRUE 40947
40945: GO 41003
40947: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
40948: LD_ADDR_VAR 0 9
40952: PUSH
40953: LD_VAR 0 23
40957: PUSH
40958: LD_VAR 0 24
40962: PUSH
40963: LD_VAR 0 25
40967: PUSH
40968: LD_VAR 0 26
40972: PUSH
40973: LD_VAR 0 27
40977: PUSH
40978: LD_VAR 0 28
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: PUSH
40991: LD_VAR 0 4
40995: PUSH
40996: LD_INT 1
40998: PLUS
40999: ARRAY
41000: ST_TO_ADDR
41001: GO 41004
41003: POP
41004: GO 41559
41006: LD_INT 2
41008: DOUBLE
41009: EQUAL
41010: IFTRUE 41020
41012: LD_INT 3
41014: DOUBLE
41015: EQUAL
41016: IFTRUE 41020
41018: GO 41076
41020: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41021: LD_ADDR_VAR 0 9
41025: PUSH
41026: LD_VAR 0 29
41030: PUSH
41031: LD_VAR 0 30
41035: PUSH
41036: LD_VAR 0 31
41040: PUSH
41041: LD_VAR 0 32
41045: PUSH
41046: LD_VAR 0 33
41050: PUSH
41051: LD_VAR 0 34
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: PUSH
41064: LD_VAR 0 4
41068: PUSH
41069: LD_INT 1
41071: PLUS
41072: ARRAY
41073: ST_TO_ADDR
41074: GO 41559
41076: LD_INT 16
41078: DOUBLE
41079: EQUAL
41080: IFTRUE 41138
41082: LD_INT 17
41084: DOUBLE
41085: EQUAL
41086: IFTRUE 41138
41088: LD_INT 18
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41138
41094: LD_INT 19
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41138
41100: LD_INT 22
41102: DOUBLE
41103: EQUAL
41104: IFTRUE 41138
41106: LD_INT 20
41108: DOUBLE
41109: EQUAL
41110: IFTRUE 41138
41112: LD_INT 21
41114: DOUBLE
41115: EQUAL
41116: IFTRUE 41138
41118: LD_INT 23
41120: DOUBLE
41121: EQUAL
41122: IFTRUE 41138
41124: LD_INT 24
41126: DOUBLE
41127: EQUAL
41128: IFTRUE 41138
41130: LD_INT 25
41132: DOUBLE
41133: EQUAL
41134: IFTRUE 41138
41136: GO 41194
41138: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41139: LD_ADDR_VAR 0 9
41143: PUSH
41144: LD_VAR 0 35
41148: PUSH
41149: LD_VAR 0 36
41153: PUSH
41154: LD_VAR 0 37
41158: PUSH
41159: LD_VAR 0 38
41163: PUSH
41164: LD_VAR 0 39
41168: PUSH
41169: LD_VAR 0 40
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: PUSH
41182: LD_VAR 0 4
41186: PUSH
41187: LD_INT 1
41189: PLUS
41190: ARRAY
41191: ST_TO_ADDR
41192: GO 41559
41194: LD_INT 6
41196: DOUBLE
41197: EQUAL
41198: IFTRUE 41250
41200: LD_INT 7
41202: DOUBLE
41203: EQUAL
41204: IFTRUE 41250
41206: LD_INT 8
41208: DOUBLE
41209: EQUAL
41210: IFTRUE 41250
41212: LD_INT 13
41214: DOUBLE
41215: EQUAL
41216: IFTRUE 41250
41218: LD_INT 12
41220: DOUBLE
41221: EQUAL
41222: IFTRUE 41250
41224: LD_INT 15
41226: DOUBLE
41227: EQUAL
41228: IFTRUE 41250
41230: LD_INT 11
41232: DOUBLE
41233: EQUAL
41234: IFTRUE 41250
41236: LD_INT 14
41238: DOUBLE
41239: EQUAL
41240: IFTRUE 41250
41242: LD_INT 10
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41306
41250: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41251: LD_ADDR_VAR 0 9
41255: PUSH
41256: LD_VAR 0 41
41260: PUSH
41261: LD_VAR 0 42
41265: PUSH
41266: LD_VAR 0 43
41270: PUSH
41271: LD_VAR 0 44
41275: PUSH
41276: LD_VAR 0 45
41280: PUSH
41281: LD_VAR 0 46
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: PUSH
41294: LD_VAR 0 4
41298: PUSH
41299: LD_INT 1
41301: PLUS
41302: ARRAY
41303: ST_TO_ADDR
41304: GO 41559
41306: LD_INT 36
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41314
41312: GO 41370
41314: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41315: LD_ADDR_VAR 0 9
41319: PUSH
41320: LD_VAR 0 47
41324: PUSH
41325: LD_VAR 0 48
41329: PUSH
41330: LD_VAR 0 49
41334: PUSH
41335: LD_VAR 0 50
41339: PUSH
41340: LD_VAR 0 51
41344: PUSH
41345: LD_VAR 0 52
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: PUSH
41358: LD_VAR 0 4
41362: PUSH
41363: LD_INT 1
41365: PLUS
41366: ARRAY
41367: ST_TO_ADDR
41368: GO 41559
41370: LD_INT 4
41372: DOUBLE
41373: EQUAL
41374: IFTRUE 41396
41376: LD_INT 5
41378: DOUBLE
41379: EQUAL
41380: IFTRUE 41396
41382: LD_INT 34
41384: DOUBLE
41385: EQUAL
41386: IFTRUE 41396
41388: LD_INT 37
41390: DOUBLE
41391: EQUAL
41392: IFTRUE 41396
41394: GO 41452
41396: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41397: LD_ADDR_VAR 0 9
41401: PUSH
41402: LD_VAR 0 53
41406: PUSH
41407: LD_VAR 0 54
41411: PUSH
41412: LD_VAR 0 55
41416: PUSH
41417: LD_VAR 0 56
41421: PUSH
41422: LD_VAR 0 57
41426: PUSH
41427: LD_VAR 0 58
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: PUSH
41440: LD_VAR 0 4
41444: PUSH
41445: LD_INT 1
41447: PLUS
41448: ARRAY
41449: ST_TO_ADDR
41450: GO 41559
41452: LD_INT 31
41454: DOUBLE
41455: EQUAL
41456: IFTRUE 41502
41458: LD_INT 32
41460: DOUBLE
41461: EQUAL
41462: IFTRUE 41502
41464: LD_INT 33
41466: DOUBLE
41467: EQUAL
41468: IFTRUE 41502
41470: LD_INT 27
41472: DOUBLE
41473: EQUAL
41474: IFTRUE 41502
41476: LD_INT 26
41478: DOUBLE
41479: EQUAL
41480: IFTRUE 41502
41482: LD_INT 28
41484: DOUBLE
41485: EQUAL
41486: IFTRUE 41502
41488: LD_INT 29
41490: DOUBLE
41491: EQUAL
41492: IFTRUE 41502
41494: LD_INT 30
41496: DOUBLE
41497: EQUAL
41498: IFTRUE 41502
41500: GO 41558
41502: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41503: LD_ADDR_VAR 0 9
41507: PUSH
41508: LD_VAR 0 59
41512: PUSH
41513: LD_VAR 0 60
41517: PUSH
41518: LD_VAR 0 61
41522: PUSH
41523: LD_VAR 0 62
41527: PUSH
41528: LD_VAR 0 63
41532: PUSH
41533: LD_VAR 0 64
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: PUSH
41546: LD_VAR 0 4
41550: PUSH
41551: LD_INT 1
41553: PLUS
41554: ARRAY
41555: ST_TO_ADDR
41556: GO 41559
41558: POP
// temp_list2 = [ ] ;
41559: LD_ADDR_VAR 0 10
41563: PUSH
41564: EMPTY
41565: ST_TO_ADDR
// for i in temp_list do
41566: LD_ADDR_VAR 0 8
41570: PUSH
41571: LD_VAR 0 9
41575: PUSH
41576: FOR_IN
41577: IFFALSE 41629
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41579: LD_ADDR_VAR 0 10
41583: PUSH
41584: LD_VAR 0 10
41588: PUSH
41589: LD_VAR 0 8
41593: PUSH
41594: LD_INT 1
41596: ARRAY
41597: PUSH
41598: LD_VAR 0 2
41602: PLUS
41603: PUSH
41604: LD_VAR 0 8
41608: PUSH
41609: LD_INT 2
41611: ARRAY
41612: PUSH
41613: LD_VAR 0 3
41617: PLUS
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: ADD
41626: ST_TO_ADDR
41627: GO 41576
41629: POP
41630: POP
// result = temp_list2 ;
41631: LD_ADDR_VAR 0 7
41635: PUSH
41636: LD_VAR 0 10
41640: ST_TO_ADDR
// end ;
41641: LD_VAR 0 7
41645: RET
// export function EnemyInRange ( unit , dist ) ; begin
41646: LD_INT 0
41648: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: LD_VAR 0 1
41658: PPUSH
41659: CALL_OW 255
41663: PPUSH
41664: LD_VAR 0 1
41668: PPUSH
41669: CALL_OW 250
41673: PPUSH
41674: LD_VAR 0 1
41678: PPUSH
41679: CALL_OW 251
41683: PPUSH
41684: LD_VAR 0 2
41688: PPUSH
41689: CALL 15019 0 4
41693: PUSH
41694: LD_INT 4
41696: ARRAY
41697: ST_TO_ADDR
// end ;
41698: LD_VAR 0 3
41702: RET
// export function PlayerSeeMe ( unit ) ; begin
41703: LD_INT 0
41705: PPUSH
// result := See ( your_side , unit ) ;
41706: LD_ADDR_VAR 0 2
41710: PUSH
41711: LD_OWVAR 2
41715: PPUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: CALL_OW 292
41725: ST_TO_ADDR
// end ;
41726: LD_VAR 0 2
41730: RET
// export function ReverseDir ( unit ) ; begin
41731: LD_INT 0
41733: PPUSH
// if not unit then
41734: LD_VAR 0 1
41738: NOT
41739: IFFALSE 41743
// exit ;
41741: GO 41766
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41743: LD_ADDR_VAR 0 2
41747: PUSH
41748: LD_VAR 0 1
41752: PPUSH
41753: CALL_OW 254
41757: PUSH
41758: LD_INT 3
41760: PLUS
41761: PUSH
41762: LD_INT 6
41764: MOD
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 2
41770: RET
// export function ReverseArray ( array ) ; var i ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
// if not array then
41775: LD_VAR 0 1
41779: NOT
41780: IFFALSE 41784
// exit ;
41782: GO 41839
// result := [ ] ;
41784: LD_ADDR_VAR 0 2
41788: PUSH
41789: EMPTY
41790: ST_TO_ADDR
// for i := array downto 1 do
41791: LD_ADDR_VAR 0 3
41795: PUSH
41796: DOUBLE
41797: LD_VAR 0 1
41801: INC
41802: ST_TO_ADDR
41803: LD_INT 1
41805: PUSH
41806: FOR_DOWNTO
41807: IFFALSE 41837
// result := Join ( result , array [ i ] ) ;
41809: LD_ADDR_VAR 0 2
41813: PUSH
41814: LD_VAR 0 2
41818: PPUSH
41819: LD_VAR 0 1
41823: PUSH
41824: LD_VAR 0 3
41828: ARRAY
41829: PPUSH
41830: CALL 46484 0 2
41834: ST_TO_ADDR
41835: GO 41806
41837: POP
41838: POP
// end ;
41839: LD_VAR 0 2
41843: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
41844: LD_INT 0
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
// if not unit or not hexes then
41852: LD_VAR 0 1
41856: NOT
41857: PUSH
41858: LD_VAR 0 2
41862: NOT
41863: OR
41864: IFFALSE 41868
// exit ;
41866: GO 41991
// dist := 9999 ;
41868: LD_ADDR_VAR 0 5
41872: PUSH
41873: LD_INT 9999
41875: ST_TO_ADDR
// for i = 1 to hexes do
41876: LD_ADDR_VAR 0 4
41880: PUSH
41881: DOUBLE
41882: LD_INT 1
41884: DEC
41885: ST_TO_ADDR
41886: LD_VAR 0 2
41890: PUSH
41891: FOR_TO
41892: IFFALSE 41979
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41894: LD_ADDR_VAR 0 6
41898: PUSH
41899: LD_VAR 0 1
41903: PPUSH
41904: LD_VAR 0 2
41908: PUSH
41909: LD_VAR 0 4
41913: ARRAY
41914: PUSH
41915: LD_INT 1
41917: ARRAY
41918: PPUSH
41919: LD_VAR 0 2
41923: PUSH
41924: LD_VAR 0 4
41928: ARRAY
41929: PUSH
41930: LD_INT 2
41932: ARRAY
41933: PPUSH
41934: CALL_OW 297
41938: ST_TO_ADDR
// if tdist < dist then
41939: LD_VAR 0 6
41943: PUSH
41944: LD_VAR 0 5
41948: LESS
41949: IFFALSE 41977
// begin hex := hexes [ i ] ;
41951: LD_ADDR_VAR 0 8
41955: PUSH
41956: LD_VAR 0 2
41960: PUSH
41961: LD_VAR 0 4
41965: ARRAY
41966: ST_TO_ADDR
// dist := tdist ;
41967: LD_ADDR_VAR 0 5
41971: PUSH
41972: LD_VAR 0 6
41976: ST_TO_ADDR
// end ; end ;
41977: GO 41891
41979: POP
41980: POP
// result := hex ;
41981: LD_ADDR_VAR 0 3
41985: PUSH
41986: LD_VAR 0 8
41990: ST_TO_ADDR
// end ;
41991: LD_VAR 0 3
41995: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
41996: LD_INT 0
41998: PPUSH
41999: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42000: LD_VAR 0 1
42004: NOT
42005: PUSH
42006: LD_VAR 0 1
42010: PUSH
42011: LD_INT 21
42013: PUSH
42014: LD_INT 2
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 23
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PPUSH
42035: CALL_OW 69
42039: IN
42040: NOT
42041: OR
42042: IFFALSE 42046
// exit ;
42044: GO 42093
// for i = 1 to 3 do
42046: LD_ADDR_VAR 0 3
42050: PUSH
42051: DOUBLE
42052: LD_INT 1
42054: DEC
42055: ST_TO_ADDR
42056: LD_INT 3
42058: PUSH
42059: FOR_TO
42060: IFFALSE 42091
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42062: LD_VAR 0 1
42066: PPUSH
42067: CALL_OW 250
42071: PPUSH
42072: LD_VAR 0 1
42076: PPUSH
42077: CALL_OW 251
42081: PPUSH
42082: LD_INT 1
42084: PPUSH
42085: CALL_OW 453
42089: GO 42059
42091: POP
42092: POP
// end ;
42093: LD_VAR 0 2
42097: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42098: LD_INT 0
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
42104: PPUSH
42105: PPUSH
// if not unit or not enemy_unit then
42106: LD_VAR 0 1
42110: NOT
42111: PUSH
42112: LD_VAR 0 2
42116: NOT
42117: OR
42118: IFFALSE 42122
// exit ;
42120: GO 42589
// if GetLives ( i ) < 250 then
42122: LD_VAR 0 4
42126: PPUSH
42127: CALL_OW 256
42131: PUSH
42132: LD_INT 250
42134: LESS
42135: IFFALSE 42148
// begin ComAutodestruct ( i ) ;
42137: LD_VAR 0 4
42141: PPUSH
42142: CALL 41996 0 1
// exit ;
42146: GO 42589
// end ; x := GetX ( enemy_unit ) ;
42148: LD_ADDR_VAR 0 7
42152: PUSH
42153: LD_VAR 0 2
42157: PPUSH
42158: CALL_OW 250
42162: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42163: LD_ADDR_VAR 0 8
42167: PUSH
42168: LD_VAR 0 2
42172: PPUSH
42173: CALL_OW 251
42177: ST_TO_ADDR
// if not x or not y then
42178: LD_VAR 0 7
42182: NOT
42183: PUSH
42184: LD_VAR 0 8
42188: NOT
42189: OR
42190: IFFALSE 42194
// exit ;
42192: GO 42589
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42194: LD_ADDR_VAR 0 6
42198: PUSH
42199: LD_VAR 0 7
42203: PPUSH
42204: LD_INT 0
42206: PPUSH
42207: LD_INT 4
42209: PPUSH
42210: CALL_OW 272
42214: PUSH
42215: LD_VAR 0 8
42219: PPUSH
42220: LD_INT 0
42222: PPUSH
42223: LD_INT 4
42225: PPUSH
42226: CALL_OW 273
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_VAR 0 7
42239: PPUSH
42240: LD_INT 1
42242: PPUSH
42243: LD_INT 4
42245: PPUSH
42246: CALL_OW 272
42250: PUSH
42251: LD_VAR 0 8
42255: PPUSH
42256: LD_INT 1
42258: PPUSH
42259: LD_INT 4
42261: PPUSH
42262: CALL_OW 273
42266: PUSH
42267: EMPTY
42268: LIST
42269: LIST
42270: PUSH
42271: LD_VAR 0 7
42275: PPUSH
42276: LD_INT 2
42278: PPUSH
42279: LD_INT 4
42281: PPUSH
42282: CALL_OW 272
42286: PUSH
42287: LD_VAR 0 8
42291: PPUSH
42292: LD_INT 2
42294: PPUSH
42295: LD_INT 4
42297: PPUSH
42298: CALL_OW 273
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_VAR 0 7
42311: PPUSH
42312: LD_INT 3
42314: PPUSH
42315: LD_INT 4
42317: PPUSH
42318: CALL_OW 272
42322: PUSH
42323: LD_VAR 0 8
42327: PPUSH
42328: LD_INT 3
42330: PPUSH
42331: LD_INT 4
42333: PPUSH
42334: CALL_OW 273
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: PUSH
42343: LD_VAR 0 7
42347: PPUSH
42348: LD_INT 4
42350: PPUSH
42351: LD_INT 4
42353: PPUSH
42354: CALL_OW 272
42358: PUSH
42359: LD_VAR 0 8
42363: PPUSH
42364: LD_INT 4
42366: PPUSH
42367: LD_INT 4
42369: PPUSH
42370: CALL_OW 273
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_VAR 0 7
42383: PPUSH
42384: LD_INT 5
42386: PPUSH
42387: LD_INT 4
42389: PPUSH
42390: CALL_OW 272
42394: PUSH
42395: LD_VAR 0 8
42399: PPUSH
42400: LD_INT 5
42402: PPUSH
42403: LD_INT 4
42405: PPUSH
42406: CALL_OW 273
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: ST_TO_ADDR
// for i = tmp downto 1 do
42423: LD_ADDR_VAR 0 4
42427: PUSH
42428: DOUBLE
42429: LD_VAR 0 6
42433: INC
42434: ST_TO_ADDR
42435: LD_INT 1
42437: PUSH
42438: FOR_DOWNTO
42439: IFFALSE 42540
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42441: LD_VAR 0 6
42445: PUSH
42446: LD_VAR 0 4
42450: ARRAY
42451: PUSH
42452: LD_INT 1
42454: ARRAY
42455: PPUSH
42456: LD_VAR 0 6
42460: PUSH
42461: LD_VAR 0 4
42465: ARRAY
42466: PUSH
42467: LD_INT 2
42469: ARRAY
42470: PPUSH
42471: CALL_OW 488
42475: NOT
42476: PUSH
42477: LD_VAR 0 6
42481: PUSH
42482: LD_VAR 0 4
42486: ARRAY
42487: PUSH
42488: LD_INT 1
42490: ARRAY
42491: PPUSH
42492: LD_VAR 0 6
42496: PUSH
42497: LD_VAR 0 4
42501: ARRAY
42502: PUSH
42503: LD_INT 2
42505: ARRAY
42506: PPUSH
42507: CALL_OW 428
42511: PUSH
42512: LD_INT 0
42514: NONEQUAL
42515: OR
42516: IFFALSE 42538
// tmp := Delete ( tmp , i ) ;
42518: LD_ADDR_VAR 0 6
42522: PUSH
42523: LD_VAR 0 6
42527: PPUSH
42528: LD_VAR 0 4
42532: PPUSH
42533: CALL_OW 3
42537: ST_TO_ADDR
42538: GO 42438
42540: POP
42541: POP
// j := GetClosestHex ( unit , tmp ) ;
42542: LD_ADDR_VAR 0 5
42546: PUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: LD_VAR 0 6
42556: PPUSH
42557: CALL 41844 0 2
42561: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42562: LD_VAR 0 1
42566: PPUSH
42567: LD_VAR 0 5
42571: PUSH
42572: LD_INT 1
42574: ARRAY
42575: PPUSH
42576: LD_VAR 0 5
42580: PUSH
42581: LD_INT 2
42583: ARRAY
42584: PPUSH
42585: CALL_OW 111
// end ;
42589: LD_VAR 0 3
42593: RET
// export function PrepareApemanSoldier ( ) ; begin
42594: LD_INT 0
42596: PPUSH
// uc_nation := 0 ;
42597: LD_ADDR_OWVAR 21
42601: PUSH
42602: LD_INT 0
42604: ST_TO_ADDR
// hc_sex := sex_male ;
42605: LD_ADDR_OWVAR 27
42609: PUSH
42610: LD_INT 1
42612: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42613: LD_ADDR_OWVAR 28
42617: PUSH
42618: LD_INT 15
42620: ST_TO_ADDR
// hc_gallery :=  ;
42621: LD_ADDR_OWVAR 33
42625: PUSH
42626: LD_STRING 
42628: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42629: LD_ADDR_OWVAR 31
42633: PUSH
42634: LD_INT 0
42636: PPUSH
42637: LD_INT 3
42639: PPUSH
42640: CALL_OW 12
42644: PUSH
42645: LD_INT 0
42647: PPUSH
42648: LD_INT 3
42650: PPUSH
42651: CALL_OW 12
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: ST_TO_ADDR
// end ;
42668: LD_VAR 0 1
42672: RET
// export function PrepareApemanEngineer ( ) ; begin
42673: LD_INT 0
42675: PPUSH
// uc_nation := 0 ;
42676: LD_ADDR_OWVAR 21
42680: PUSH
42681: LD_INT 0
42683: ST_TO_ADDR
// hc_sex := sex_male ;
42684: LD_ADDR_OWVAR 27
42688: PUSH
42689: LD_INT 1
42691: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42692: LD_ADDR_OWVAR 28
42696: PUSH
42697: LD_INT 16
42699: ST_TO_ADDR
// hc_gallery :=  ;
42700: LD_ADDR_OWVAR 33
42704: PUSH
42705: LD_STRING 
42707: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42708: LD_ADDR_OWVAR 31
42712: PUSH
42713: LD_INT 0
42715: PPUSH
42716: LD_INT 3
42718: PPUSH
42719: CALL_OW 12
42723: PUSH
42724: LD_INT 0
42726: PPUSH
42727: LD_INT 3
42729: PPUSH
42730: CALL_OW 12
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// end ;
42747: LD_VAR 0 1
42751: RET
// export function PrepareApeman ( agressivity ) ; begin
42752: LD_INT 0
42754: PPUSH
// uc_side := 0 ;
42755: LD_ADDR_OWVAR 20
42759: PUSH
42760: LD_INT 0
42762: ST_TO_ADDR
// uc_nation := 0 ;
42763: LD_ADDR_OWVAR 21
42767: PUSH
42768: LD_INT 0
42770: ST_TO_ADDR
// hc_sex := sex_male ;
42771: LD_ADDR_OWVAR 27
42775: PUSH
42776: LD_INT 1
42778: ST_TO_ADDR
// hc_class := class_apeman ;
42779: LD_ADDR_OWVAR 28
42783: PUSH
42784: LD_INT 12
42786: ST_TO_ADDR
// hc_gallery :=  ;
42787: LD_ADDR_OWVAR 33
42791: PUSH
42792: LD_STRING 
42794: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42795: LD_ADDR_OWVAR 35
42799: PUSH
42800: LD_VAR 0 1
42804: NEG
42805: PPUSH
42806: LD_VAR 0 1
42810: PPUSH
42811: CALL_OW 12
42815: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42816: LD_ADDR_OWVAR 31
42820: PUSH
42821: LD_INT 0
42823: PPUSH
42824: LD_INT 3
42826: PPUSH
42827: CALL_OW 12
42831: PUSH
42832: LD_INT 0
42834: PPUSH
42835: LD_INT 3
42837: PPUSH
42838: CALL_OW 12
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// end ;
42855: LD_VAR 0 2
42859: RET
// export function PrepareTiger ( agressivity ) ; begin
42860: LD_INT 0
42862: PPUSH
// uc_side := 0 ;
42863: LD_ADDR_OWVAR 20
42867: PUSH
42868: LD_INT 0
42870: ST_TO_ADDR
// uc_nation := 0 ;
42871: LD_ADDR_OWVAR 21
42875: PUSH
42876: LD_INT 0
42878: ST_TO_ADDR
// hc_class := class_tiger ;
42879: LD_ADDR_OWVAR 28
42883: PUSH
42884: LD_INT 14
42886: ST_TO_ADDR
// hc_gallery :=  ;
42887: LD_ADDR_OWVAR 33
42891: PUSH
42892: LD_STRING 
42894: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
42895: LD_ADDR_OWVAR 35
42899: PUSH
42900: LD_VAR 0 1
42904: NEG
42905: PPUSH
42906: LD_VAR 0 1
42910: PPUSH
42911: CALL_OW 12
42915: ST_TO_ADDR
// end ;
42916: LD_VAR 0 2
42920: RET
// export function PrepareEnchidna ( ) ; begin
42921: LD_INT 0
42923: PPUSH
// uc_side := 0 ;
42924: LD_ADDR_OWVAR 20
42928: PUSH
42929: LD_INT 0
42931: ST_TO_ADDR
// uc_nation := 0 ;
42932: LD_ADDR_OWVAR 21
42936: PUSH
42937: LD_INT 0
42939: ST_TO_ADDR
// hc_class := class_baggie ;
42940: LD_ADDR_OWVAR 28
42944: PUSH
42945: LD_INT 13
42947: ST_TO_ADDR
// hc_gallery :=  ;
42948: LD_ADDR_OWVAR 33
42952: PUSH
42953: LD_STRING 
42955: ST_TO_ADDR
// end ;
42956: LD_VAR 0 1
42960: RET
// export function PrepareFrog ( ) ; begin
42961: LD_INT 0
42963: PPUSH
// uc_side := 0 ;
42964: LD_ADDR_OWVAR 20
42968: PUSH
42969: LD_INT 0
42971: ST_TO_ADDR
// uc_nation := 0 ;
42972: LD_ADDR_OWVAR 21
42976: PUSH
42977: LD_INT 0
42979: ST_TO_ADDR
// hc_class := class_frog ;
42980: LD_ADDR_OWVAR 28
42984: PUSH
42985: LD_INT 19
42987: ST_TO_ADDR
// hc_gallery :=  ;
42988: LD_ADDR_OWVAR 33
42992: PUSH
42993: LD_STRING 
42995: ST_TO_ADDR
// end ;
42996: LD_VAR 0 1
43000: RET
// export function PrepareFish ( ) ; begin
43001: LD_INT 0
43003: PPUSH
// uc_side := 0 ;
43004: LD_ADDR_OWVAR 20
43008: PUSH
43009: LD_INT 0
43011: ST_TO_ADDR
// uc_nation := 0 ;
43012: LD_ADDR_OWVAR 21
43016: PUSH
43017: LD_INT 0
43019: ST_TO_ADDR
// hc_class := class_fish ;
43020: LD_ADDR_OWVAR 28
43024: PUSH
43025: LD_INT 20
43027: ST_TO_ADDR
// hc_gallery :=  ;
43028: LD_ADDR_OWVAR 33
43032: PUSH
43033: LD_STRING 
43035: ST_TO_ADDR
// end ;
43036: LD_VAR 0 1
43040: RET
// export function PrepareBird ( ) ; begin
43041: LD_INT 0
43043: PPUSH
// uc_side := 0 ;
43044: LD_ADDR_OWVAR 20
43048: PUSH
43049: LD_INT 0
43051: ST_TO_ADDR
// uc_nation := 0 ;
43052: LD_ADDR_OWVAR 21
43056: PUSH
43057: LD_INT 0
43059: ST_TO_ADDR
// hc_class := class_phororhacos ;
43060: LD_ADDR_OWVAR 28
43064: PUSH
43065: LD_INT 18
43067: ST_TO_ADDR
// hc_gallery :=  ;
43068: LD_ADDR_OWVAR 33
43072: PUSH
43073: LD_STRING 
43075: ST_TO_ADDR
// end ;
43076: LD_VAR 0 1
43080: RET
// export function PrepareHorse ( ) ; begin
43081: LD_INT 0
43083: PPUSH
// uc_side := 0 ;
43084: LD_ADDR_OWVAR 20
43088: PUSH
43089: LD_INT 0
43091: ST_TO_ADDR
// uc_nation := 0 ;
43092: LD_ADDR_OWVAR 21
43096: PUSH
43097: LD_INT 0
43099: ST_TO_ADDR
// hc_class := class_horse ;
43100: LD_ADDR_OWVAR 28
43104: PUSH
43105: LD_INT 21
43107: ST_TO_ADDR
// hc_gallery :=  ;
43108: LD_ADDR_OWVAR 33
43112: PUSH
43113: LD_STRING 
43115: ST_TO_ADDR
// end ;
43116: LD_VAR 0 1
43120: RET
// export function PrepareMastodont ( ) ; begin
43121: LD_INT 0
43123: PPUSH
// uc_side := 0 ;
43124: LD_ADDR_OWVAR 20
43128: PUSH
43129: LD_INT 0
43131: ST_TO_ADDR
// uc_nation := 0 ;
43132: LD_ADDR_OWVAR 21
43136: PUSH
43137: LD_INT 0
43139: ST_TO_ADDR
// vc_chassis := class_mastodont ;
43140: LD_ADDR_OWVAR 37
43144: PUSH
43145: LD_INT 31
43147: ST_TO_ADDR
// vc_control := control_rider ;
43148: LD_ADDR_OWVAR 38
43152: PUSH
43153: LD_INT 4
43155: ST_TO_ADDR
// end ;
43156: LD_VAR 0 1
43160: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43161: LD_INT 0
43163: PPUSH
43164: PPUSH
43165: PPUSH
// uc_side = 0 ;
43166: LD_ADDR_OWVAR 20
43170: PUSH
43171: LD_INT 0
43173: ST_TO_ADDR
// uc_nation = 0 ;
43174: LD_ADDR_OWVAR 21
43178: PUSH
43179: LD_INT 0
43181: ST_TO_ADDR
// InitHc_All ( ) ;
43182: CALL_OW 584
// InitVc ;
43186: CALL_OW 20
// if mastodonts then
43190: LD_VAR 0 6
43194: IFFALSE 43261
// for i = 1 to mastodonts do
43196: LD_ADDR_VAR 0 11
43200: PUSH
43201: DOUBLE
43202: LD_INT 1
43204: DEC
43205: ST_TO_ADDR
43206: LD_VAR 0 6
43210: PUSH
43211: FOR_TO
43212: IFFALSE 43259
// begin vc_chassis := 31 ;
43214: LD_ADDR_OWVAR 37
43218: PUSH
43219: LD_INT 31
43221: ST_TO_ADDR
// vc_control := control_rider ;
43222: LD_ADDR_OWVAR 38
43226: PUSH
43227: LD_INT 4
43229: ST_TO_ADDR
// animal := CreateVehicle ;
43230: LD_ADDR_VAR 0 12
43234: PUSH
43235: CALL_OW 45
43239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43240: LD_VAR 0 12
43244: PPUSH
43245: LD_VAR 0 8
43249: PPUSH
43250: LD_INT 0
43252: PPUSH
43253: CALL 45389 0 3
// end ;
43257: GO 43211
43259: POP
43260: POP
// if horses then
43261: LD_VAR 0 5
43265: IFFALSE 43332
// for i = 1 to horses do
43267: LD_ADDR_VAR 0 11
43271: PUSH
43272: DOUBLE
43273: LD_INT 1
43275: DEC
43276: ST_TO_ADDR
43277: LD_VAR 0 5
43281: PUSH
43282: FOR_TO
43283: IFFALSE 43330
// begin hc_class := 21 ;
43285: LD_ADDR_OWVAR 28
43289: PUSH
43290: LD_INT 21
43292: ST_TO_ADDR
// hc_gallery :=  ;
43293: LD_ADDR_OWVAR 33
43297: PUSH
43298: LD_STRING 
43300: ST_TO_ADDR
// animal := CreateHuman ;
43301: LD_ADDR_VAR 0 12
43305: PUSH
43306: CALL_OW 44
43310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43311: LD_VAR 0 12
43315: PPUSH
43316: LD_VAR 0 8
43320: PPUSH
43321: LD_INT 0
43323: PPUSH
43324: CALL 45389 0 3
// end ;
43328: GO 43282
43330: POP
43331: POP
// if birds then
43332: LD_VAR 0 1
43336: IFFALSE 43403
// for i = 1 to birds do
43338: LD_ADDR_VAR 0 11
43342: PUSH
43343: DOUBLE
43344: LD_INT 1
43346: DEC
43347: ST_TO_ADDR
43348: LD_VAR 0 1
43352: PUSH
43353: FOR_TO
43354: IFFALSE 43401
// begin hc_class := 18 ;
43356: LD_ADDR_OWVAR 28
43360: PUSH
43361: LD_INT 18
43363: ST_TO_ADDR
// hc_gallery =  ;
43364: LD_ADDR_OWVAR 33
43368: PUSH
43369: LD_STRING 
43371: ST_TO_ADDR
// animal := CreateHuman ;
43372: LD_ADDR_VAR 0 12
43376: PUSH
43377: CALL_OW 44
43381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43382: LD_VAR 0 12
43386: PPUSH
43387: LD_VAR 0 8
43391: PPUSH
43392: LD_INT 0
43394: PPUSH
43395: CALL 45389 0 3
// end ;
43399: GO 43353
43401: POP
43402: POP
// if tigers then
43403: LD_VAR 0 2
43407: IFFALSE 43491
// for i = 1 to tigers do
43409: LD_ADDR_VAR 0 11
43413: PUSH
43414: DOUBLE
43415: LD_INT 1
43417: DEC
43418: ST_TO_ADDR
43419: LD_VAR 0 2
43423: PUSH
43424: FOR_TO
43425: IFFALSE 43489
// begin hc_class = class_tiger ;
43427: LD_ADDR_OWVAR 28
43431: PUSH
43432: LD_INT 14
43434: ST_TO_ADDR
// hc_gallery =  ;
43435: LD_ADDR_OWVAR 33
43439: PUSH
43440: LD_STRING 
43442: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43443: LD_ADDR_OWVAR 35
43447: PUSH
43448: LD_INT 7
43450: NEG
43451: PPUSH
43452: LD_INT 7
43454: PPUSH
43455: CALL_OW 12
43459: ST_TO_ADDR
// animal := CreateHuman ;
43460: LD_ADDR_VAR 0 12
43464: PUSH
43465: CALL_OW 44
43469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43470: LD_VAR 0 12
43474: PPUSH
43475: LD_VAR 0 8
43479: PPUSH
43480: LD_INT 0
43482: PPUSH
43483: CALL 45389 0 3
// end ;
43487: GO 43424
43489: POP
43490: POP
// if apemans then
43491: LD_VAR 0 3
43495: IFFALSE 43618
// for i = 1 to apemans do
43497: LD_ADDR_VAR 0 11
43501: PUSH
43502: DOUBLE
43503: LD_INT 1
43505: DEC
43506: ST_TO_ADDR
43507: LD_VAR 0 3
43511: PUSH
43512: FOR_TO
43513: IFFALSE 43616
// begin hc_class = class_apeman ;
43515: LD_ADDR_OWVAR 28
43519: PUSH
43520: LD_INT 12
43522: ST_TO_ADDR
// hc_gallery =  ;
43523: LD_ADDR_OWVAR 33
43527: PUSH
43528: LD_STRING 
43530: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43531: LD_ADDR_OWVAR 35
43535: PUSH
43536: LD_INT 2
43538: NEG
43539: PPUSH
43540: LD_INT 2
43542: PPUSH
43543: CALL_OW 12
43547: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43548: LD_ADDR_OWVAR 31
43552: PUSH
43553: LD_INT 1
43555: PPUSH
43556: LD_INT 3
43558: PPUSH
43559: CALL_OW 12
43563: PUSH
43564: LD_INT 1
43566: PPUSH
43567: LD_INT 3
43569: PPUSH
43570: CALL_OW 12
43574: PUSH
43575: LD_INT 0
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: ST_TO_ADDR
// animal := CreateHuman ;
43587: LD_ADDR_VAR 0 12
43591: PUSH
43592: CALL_OW 44
43596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43597: LD_VAR 0 12
43601: PPUSH
43602: LD_VAR 0 8
43606: PPUSH
43607: LD_INT 0
43609: PPUSH
43610: CALL 45389 0 3
// end ;
43614: GO 43512
43616: POP
43617: POP
// if enchidnas then
43618: LD_VAR 0 4
43622: IFFALSE 43689
// for i = 1 to enchidnas do
43624: LD_ADDR_VAR 0 11
43628: PUSH
43629: DOUBLE
43630: LD_INT 1
43632: DEC
43633: ST_TO_ADDR
43634: LD_VAR 0 4
43638: PUSH
43639: FOR_TO
43640: IFFALSE 43687
// begin hc_class = 13 ;
43642: LD_ADDR_OWVAR 28
43646: PUSH
43647: LD_INT 13
43649: ST_TO_ADDR
// hc_gallery =  ;
43650: LD_ADDR_OWVAR 33
43654: PUSH
43655: LD_STRING 
43657: ST_TO_ADDR
// animal := CreateHuman ;
43658: LD_ADDR_VAR 0 12
43662: PUSH
43663: CALL_OW 44
43667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43668: LD_VAR 0 12
43672: PPUSH
43673: LD_VAR 0 8
43677: PPUSH
43678: LD_INT 0
43680: PPUSH
43681: CALL 45389 0 3
// end ;
43685: GO 43639
43687: POP
43688: POP
// if fishes then
43689: LD_VAR 0 7
43693: IFFALSE 43760
// for i = 1 to fishes do
43695: LD_ADDR_VAR 0 11
43699: PUSH
43700: DOUBLE
43701: LD_INT 1
43703: DEC
43704: ST_TO_ADDR
43705: LD_VAR 0 7
43709: PUSH
43710: FOR_TO
43711: IFFALSE 43758
// begin hc_class = 20 ;
43713: LD_ADDR_OWVAR 28
43717: PUSH
43718: LD_INT 20
43720: ST_TO_ADDR
// hc_gallery =  ;
43721: LD_ADDR_OWVAR 33
43725: PUSH
43726: LD_STRING 
43728: ST_TO_ADDR
// animal := CreateHuman ;
43729: LD_ADDR_VAR 0 12
43733: PUSH
43734: CALL_OW 44
43738: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43739: LD_VAR 0 12
43743: PPUSH
43744: LD_VAR 0 9
43748: PPUSH
43749: LD_INT 0
43751: PPUSH
43752: CALL 45389 0 3
// end ;
43756: GO 43710
43758: POP
43759: POP
// end ;
43760: LD_VAR 0 10
43764: RET
// export function WantHeal ( sci , unit ) ; begin
43765: LD_INT 0
43767: PPUSH
// if GetTaskList ( sci ) > 0 then
43768: LD_VAR 0 1
43772: PPUSH
43773: CALL_OW 437
43777: PUSH
43778: LD_INT 0
43780: GREATER
43781: IFFALSE 43851
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43783: LD_VAR 0 1
43787: PPUSH
43788: CALL_OW 437
43792: PUSH
43793: LD_INT 1
43795: ARRAY
43796: PUSH
43797: LD_INT 1
43799: ARRAY
43800: PUSH
43801: LD_STRING l
43803: EQUAL
43804: PUSH
43805: LD_VAR 0 1
43809: PPUSH
43810: CALL_OW 437
43814: PUSH
43815: LD_INT 1
43817: ARRAY
43818: PUSH
43819: LD_INT 4
43821: ARRAY
43822: PUSH
43823: LD_VAR 0 2
43827: EQUAL
43828: AND
43829: IFFALSE 43841
// result := true else
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: LD_INT 1
43838: ST_TO_ADDR
43839: GO 43849
// result := false ;
43841: LD_ADDR_VAR 0 3
43845: PUSH
43846: LD_INT 0
43848: ST_TO_ADDR
// end else
43849: GO 43859
// result := false ;
43851: LD_ADDR_VAR 0 3
43855: PUSH
43856: LD_INT 0
43858: ST_TO_ADDR
// end ;
43859: LD_VAR 0 3
43863: RET
// export function HealTarget ( sci ) ; begin
43864: LD_INT 0
43866: PPUSH
// if not sci then
43867: LD_VAR 0 1
43871: NOT
43872: IFFALSE 43876
// exit ;
43874: GO 43941
// result := 0 ;
43876: LD_ADDR_VAR 0 2
43880: PUSH
43881: LD_INT 0
43883: ST_TO_ADDR
// if GetTaskList ( sci ) then
43884: LD_VAR 0 1
43888: PPUSH
43889: CALL_OW 437
43893: IFFALSE 43941
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 437
43904: PUSH
43905: LD_INT 1
43907: ARRAY
43908: PUSH
43909: LD_INT 1
43911: ARRAY
43912: PUSH
43913: LD_STRING l
43915: EQUAL
43916: IFFALSE 43941
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43918: LD_ADDR_VAR 0 2
43922: PUSH
43923: LD_VAR 0 1
43927: PPUSH
43928: CALL_OW 437
43932: PUSH
43933: LD_INT 1
43935: ARRAY
43936: PUSH
43937: LD_INT 4
43939: ARRAY
43940: ST_TO_ADDR
// end ;
43941: LD_VAR 0 2
43945: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43946: LD_INT 0
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
// if not base_units then
43952: LD_VAR 0 1
43956: NOT
43957: IFFALSE 43961
// exit ;
43959: GO 44048
// result := false ;
43961: LD_ADDR_VAR 0 2
43965: PUSH
43966: LD_INT 0
43968: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43969: LD_ADDR_VAR 0 5
43973: PUSH
43974: LD_VAR 0 1
43978: PPUSH
43979: LD_INT 21
43981: PUSH
43982: LD_INT 3
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PPUSH
43989: CALL_OW 72
43993: ST_TO_ADDR
// if not tmp then
43994: LD_VAR 0 5
43998: NOT
43999: IFFALSE 44003
// exit ;
44001: GO 44048
// for i in tmp do
44003: LD_ADDR_VAR 0 3
44007: PUSH
44008: LD_VAR 0 5
44012: PUSH
44013: FOR_IN
44014: IFFALSE 44046
// begin result := EnemyInRange ( i , 22 ) ;
44016: LD_ADDR_VAR 0 2
44020: PUSH
44021: LD_VAR 0 3
44025: PPUSH
44026: LD_INT 22
44028: PPUSH
44029: CALL 41646 0 2
44033: ST_TO_ADDR
// if result then
44034: LD_VAR 0 2
44038: IFFALSE 44044
// exit ;
44040: POP
44041: POP
44042: GO 44048
// end ;
44044: GO 44013
44046: POP
44047: POP
// end ;
44048: LD_VAR 0 2
44052: RET
// export function FilterByTag ( units , tag ) ; begin
44053: LD_INT 0
44055: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44056: LD_ADDR_VAR 0 3
44060: PUSH
44061: LD_VAR 0 1
44065: PPUSH
44066: LD_INT 120
44068: PUSH
44069: LD_VAR 0 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PPUSH
44078: CALL_OW 72
44082: ST_TO_ADDR
// end ;
44083: LD_VAR 0 3
44087: RET
// export function IsDriver ( un ) ; begin
44088: LD_INT 0
44090: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44091: LD_ADDR_VAR 0 2
44095: PUSH
44096: LD_VAR 0 1
44100: PUSH
44101: LD_INT 55
44103: PUSH
44104: EMPTY
44105: LIST
44106: PPUSH
44107: CALL_OW 69
44111: IN
44112: ST_TO_ADDR
// end ;
44113: LD_VAR 0 2
44117: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44118: LD_INT 0
44120: PPUSH
44121: PPUSH
// list := [ ] ;
44122: LD_ADDR_VAR 0 5
44126: PUSH
44127: EMPTY
44128: ST_TO_ADDR
// case d of 0 :
44129: LD_VAR 0 3
44133: PUSH
44134: LD_INT 0
44136: DOUBLE
44137: EQUAL
44138: IFTRUE 44142
44140: GO 44275
44142: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44143: LD_ADDR_VAR 0 5
44147: PUSH
44148: LD_VAR 0 1
44152: PUSH
44153: LD_INT 4
44155: MINUS
44156: PUSH
44157: LD_VAR 0 2
44161: PUSH
44162: LD_INT 4
44164: MINUS
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: PUSH
44174: LD_VAR 0 1
44178: PUSH
44179: LD_INT 3
44181: MINUS
44182: PUSH
44183: LD_VAR 0 2
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: PUSH
44196: LD_VAR 0 1
44200: PUSH
44201: LD_INT 4
44203: PLUS
44204: PUSH
44205: LD_VAR 0 2
44209: PUSH
44210: LD_INT 4
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: PUSH
44218: LD_VAR 0 1
44222: PUSH
44223: LD_INT 3
44225: PLUS
44226: PUSH
44227: LD_VAR 0 2
44231: PUSH
44232: LD_INT 3
44234: PLUS
44235: PUSH
44236: LD_INT 5
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: PUSH
44244: LD_VAR 0 1
44248: PUSH
44249: LD_VAR 0 2
44253: PUSH
44254: LD_INT 4
44256: PLUS
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: ST_TO_ADDR
// end ; 1 :
44273: GO 44973
44275: LD_INT 1
44277: DOUBLE
44278: EQUAL
44279: IFTRUE 44283
44281: GO 44416
44283: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44284: LD_ADDR_VAR 0 5
44288: PUSH
44289: LD_VAR 0 1
44293: PUSH
44294: LD_VAR 0 2
44298: PUSH
44299: LD_INT 4
44301: MINUS
44302: PUSH
44303: LD_INT 3
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: LIST
44310: PUSH
44311: LD_VAR 0 1
44315: PUSH
44316: LD_INT 3
44318: MINUS
44319: PUSH
44320: LD_VAR 0 2
44324: PUSH
44325: LD_INT 3
44327: MINUS
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: LIST
44336: PUSH
44337: LD_VAR 0 1
44341: PUSH
44342: LD_INT 4
44344: MINUS
44345: PUSH
44346: LD_VAR 0 2
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: LIST
44358: PUSH
44359: LD_VAR 0 1
44363: PUSH
44364: LD_VAR 0 2
44368: PUSH
44369: LD_INT 3
44371: PLUS
44372: PUSH
44373: LD_INT 0
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: PUSH
44381: LD_VAR 0 1
44385: PUSH
44386: LD_INT 4
44388: PLUS
44389: PUSH
44390: LD_VAR 0 2
44394: PUSH
44395: LD_INT 4
44397: PLUS
44398: PUSH
44399: LD_INT 5
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: ST_TO_ADDR
// end ; 2 :
44414: GO 44973
44416: LD_INT 2
44418: DOUBLE
44419: EQUAL
44420: IFTRUE 44424
44422: GO 44553
44424: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44425: LD_ADDR_VAR 0 5
44429: PUSH
44430: LD_VAR 0 1
44434: PUSH
44435: LD_VAR 0 2
44439: PUSH
44440: LD_INT 3
44442: MINUS
44443: PUSH
44444: LD_INT 3
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: PUSH
44452: LD_VAR 0 1
44456: PUSH
44457: LD_INT 4
44459: PLUS
44460: PUSH
44461: LD_VAR 0 2
44465: PUSH
44466: LD_INT 4
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: PUSH
44474: LD_VAR 0 1
44478: PUSH
44479: LD_VAR 0 2
44483: PUSH
44484: LD_INT 4
44486: PLUS
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: PUSH
44496: LD_VAR 0 1
44500: PUSH
44501: LD_INT 3
44503: MINUS
44504: PUSH
44505: LD_VAR 0 2
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: PUSH
44518: LD_VAR 0 1
44522: PUSH
44523: LD_INT 4
44525: MINUS
44526: PUSH
44527: LD_VAR 0 2
44531: PUSH
44532: LD_INT 4
44534: MINUS
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: ST_TO_ADDR
// end ; 3 :
44551: GO 44973
44553: LD_INT 3
44555: DOUBLE
44556: EQUAL
44557: IFTRUE 44561
44559: GO 44694
44561: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44562: LD_ADDR_VAR 0 5
44566: PUSH
44567: LD_VAR 0 1
44571: PUSH
44572: LD_INT 3
44574: PLUS
44575: PUSH
44576: LD_VAR 0 2
44580: PUSH
44581: LD_INT 4
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: PUSH
44589: LD_VAR 0 1
44593: PUSH
44594: LD_INT 4
44596: PLUS
44597: PUSH
44598: LD_VAR 0 2
44602: PUSH
44603: LD_INT 4
44605: PLUS
44606: PUSH
44607: LD_INT 5
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: PUSH
44615: LD_VAR 0 1
44619: PUSH
44620: LD_INT 4
44622: MINUS
44623: PUSH
44624: LD_VAR 0 2
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: LIST
44636: PUSH
44637: LD_VAR 0 1
44641: PUSH
44642: LD_VAR 0 2
44646: PUSH
44647: LD_INT 4
44649: MINUS
44650: PUSH
44651: LD_INT 3
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: PUSH
44659: LD_VAR 0 1
44663: PUSH
44664: LD_INT 3
44666: MINUS
44667: PUSH
44668: LD_VAR 0 2
44672: PUSH
44673: LD_INT 3
44675: MINUS
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: ST_TO_ADDR
// end ; 4 :
44692: GO 44973
44694: LD_INT 4
44696: DOUBLE
44697: EQUAL
44698: IFTRUE 44702
44700: GO 44835
44702: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44703: LD_ADDR_VAR 0 5
44707: PUSH
44708: LD_VAR 0 1
44712: PUSH
44713: LD_VAR 0 2
44717: PUSH
44718: LD_INT 4
44720: PLUS
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: PUSH
44730: LD_VAR 0 1
44734: PUSH
44735: LD_INT 3
44737: PLUS
44738: PUSH
44739: LD_VAR 0 2
44743: PUSH
44744: LD_INT 3
44746: PLUS
44747: PUSH
44748: LD_INT 5
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: PUSH
44756: LD_VAR 0 1
44760: PUSH
44761: LD_INT 4
44763: PLUS
44764: PUSH
44765: LD_VAR 0 2
44769: PUSH
44770: LD_INT 4
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: LIST
44777: PUSH
44778: LD_VAR 0 1
44782: PUSH
44783: LD_VAR 0 2
44787: PUSH
44788: LD_INT 3
44790: MINUS
44791: PUSH
44792: LD_INT 3
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: PUSH
44800: LD_VAR 0 1
44804: PUSH
44805: LD_INT 4
44807: MINUS
44808: PUSH
44809: LD_VAR 0 2
44813: PUSH
44814: LD_INT 4
44816: MINUS
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: ST_TO_ADDR
// end ; 5 :
44833: GO 44973
44835: LD_INT 5
44837: DOUBLE
44838: EQUAL
44839: IFTRUE 44843
44841: GO 44972
44843: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44844: LD_ADDR_VAR 0 5
44848: PUSH
44849: LD_VAR 0 1
44853: PUSH
44854: LD_INT 4
44856: MINUS
44857: PUSH
44858: LD_VAR 0 2
44862: PUSH
44863: LD_INT 1
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: LIST
44870: PUSH
44871: LD_VAR 0 1
44875: PUSH
44876: LD_VAR 0 2
44880: PUSH
44881: LD_INT 4
44883: MINUS
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: LIST
44892: PUSH
44893: LD_VAR 0 1
44897: PUSH
44898: LD_INT 4
44900: PLUS
44901: PUSH
44902: LD_VAR 0 2
44906: PUSH
44907: LD_INT 4
44909: PLUS
44910: PUSH
44911: LD_INT 5
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: LIST
44918: PUSH
44919: LD_VAR 0 1
44923: PUSH
44924: LD_INT 3
44926: PLUS
44927: PUSH
44928: LD_VAR 0 2
44932: PUSH
44933: LD_INT 4
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: PUSH
44941: LD_VAR 0 1
44945: PUSH
44946: LD_VAR 0 2
44950: PUSH
44951: LD_INT 3
44953: PLUS
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: ST_TO_ADDR
// end ; end ;
44970: GO 44973
44972: POP
// result := list ;
44973: LD_ADDR_VAR 0 4
44977: PUSH
44978: LD_VAR 0 5
44982: ST_TO_ADDR
// end ;
44983: LD_VAR 0 4
44987: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44988: LD_INT 0
44990: PPUSH
44991: PPUSH
44992: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44993: LD_VAR 0 1
44997: NOT
44998: PUSH
44999: LD_VAR 0 2
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: LD_INT 4
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: IN
45022: NOT
45023: OR
45024: IFFALSE 45028
// exit ;
45026: GO 45111
// tmp := [ ] ;
45028: LD_ADDR_VAR 0 5
45032: PUSH
45033: EMPTY
45034: ST_TO_ADDR
// for i in units do
45035: LD_ADDR_VAR 0 4
45039: PUSH
45040: LD_VAR 0 1
45044: PUSH
45045: FOR_IN
45046: IFFALSE 45080
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 5
45057: PPUSH
45058: LD_VAR 0 4
45062: PPUSH
45063: LD_VAR 0 2
45067: PPUSH
45068: CALL_OW 259
45072: PPUSH
45073: CALL 46484 0 2
45077: ST_TO_ADDR
45078: GO 45045
45080: POP
45081: POP
// if not tmp then
45082: LD_VAR 0 5
45086: NOT
45087: IFFALSE 45091
// exit ;
45089: GO 45111
// result := SortListByListDesc ( units , tmp ) ;
45091: LD_ADDR_VAR 0 3
45095: PUSH
45096: LD_VAR 0 1
45100: PPUSH
45101: LD_VAR 0 5
45105: PPUSH
45106: CALL_OW 77
45110: ST_TO_ADDR
// end ;
45111: LD_VAR 0 3
45115: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45116: LD_INT 0
45118: PPUSH
45119: PPUSH
45120: PPUSH
// result := false ;
45121: LD_ADDR_VAR 0 3
45125: PUSH
45126: LD_INT 0
45128: ST_TO_ADDR
// if not building then
45129: LD_VAR 0 2
45133: NOT
45134: IFFALSE 45138
// exit ;
45136: GO 45276
// x := GetX ( building ) ;
45138: LD_ADDR_VAR 0 4
45142: PUSH
45143: LD_VAR 0 2
45147: PPUSH
45148: CALL_OW 250
45152: ST_TO_ADDR
// y := GetY ( building ) ;
45153: LD_ADDR_VAR 0 5
45157: PUSH
45158: LD_VAR 0 2
45162: PPUSH
45163: CALL_OW 251
45167: ST_TO_ADDR
// if not x or not y then
45168: LD_VAR 0 4
45172: NOT
45173: PUSH
45174: LD_VAR 0 5
45178: NOT
45179: OR
45180: IFFALSE 45184
// exit ;
45182: GO 45276
// if GetTaskList ( unit ) then
45184: LD_VAR 0 1
45188: PPUSH
45189: CALL_OW 437
45193: IFFALSE 45276
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45195: LD_STRING e
45197: PUSH
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 437
45207: PUSH
45208: LD_INT 1
45210: ARRAY
45211: PUSH
45212: LD_INT 1
45214: ARRAY
45215: EQUAL
45216: PUSH
45217: LD_VAR 0 4
45221: PUSH
45222: LD_VAR 0 1
45226: PPUSH
45227: CALL_OW 437
45231: PUSH
45232: LD_INT 1
45234: ARRAY
45235: PUSH
45236: LD_INT 2
45238: ARRAY
45239: EQUAL
45240: AND
45241: PUSH
45242: LD_VAR 0 5
45246: PUSH
45247: LD_VAR 0 1
45251: PPUSH
45252: CALL_OW 437
45256: PUSH
45257: LD_INT 1
45259: ARRAY
45260: PUSH
45261: LD_INT 3
45263: ARRAY
45264: EQUAL
45265: AND
45266: IFFALSE 45276
// result := true end ;
45268: LD_ADDR_VAR 0 3
45272: PUSH
45273: LD_INT 1
45275: ST_TO_ADDR
// end ;
45276: LD_VAR 0 3
45280: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45281: LD_INT 0
45283: PPUSH
// result := false ;
45284: LD_ADDR_VAR 0 4
45288: PUSH
45289: LD_INT 0
45291: ST_TO_ADDR
// if GetTaskList ( unit ) then
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 437
45301: IFFALSE 45384
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45303: LD_STRING M
45305: PUSH
45306: LD_VAR 0 1
45310: PPUSH
45311: CALL_OW 437
45315: PUSH
45316: LD_INT 1
45318: ARRAY
45319: PUSH
45320: LD_INT 1
45322: ARRAY
45323: EQUAL
45324: PUSH
45325: LD_VAR 0 2
45329: PUSH
45330: LD_VAR 0 1
45334: PPUSH
45335: CALL_OW 437
45339: PUSH
45340: LD_INT 1
45342: ARRAY
45343: PUSH
45344: LD_INT 2
45346: ARRAY
45347: EQUAL
45348: AND
45349: PUSH
45350: LD_VAR 0 3
45354: PUSH
45355: LD_VAR 0 1
45359: PPUSH
45360: CALL_OW 437
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PUSH
45369: LD_INT 3
45371: ARRAY
45372: EQUAL
45373: AND
45374: IFFALSE 45384
// result := true ;
45376: LD_ADDR_VAR 0 4
45380: PUSH
45381: LD_INT 1
45383: ST_TO_ADDR
// end ; end ;
45384: LD_VAR 0 4
45388: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45389: LD_INT 0
45391: PPUSH
45392: PPUSH
45393: PPUSH
45394: PPUSH
// if not unit or not area then
45395: LD_VAR 0 1
45399: NOT
45400: PUSH
45401: LD_VAR 0 2
45405: NOT
45406: OR
45407: IFFALSE 45411
// exit ;
45409: GO 45587
// tmp := AreaToList ( area , i ) ;
45411: LD_ADDR_VAR 0 6
45415: PUSH
45416: LD_VAR 0 2
45420: PPUSH
45421: LD_VAR 0 5
45425: PPUSH
45426: CALL_OW 517
45430: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45431: LD_ADDR_VAR 0 5
45435: PUSH
45436: DOUBLE
45437: LD_INT 1
45439: DEC
45440: ST_TO_ADDR
45441: LD_VAR 0 6
45445: PUSH
45446: LD_INT 1
45448: ARRAY
45449: PUSH
45450: FOR_TO
45451: IFFALSE 45585
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45453: LD_ADDR_VAR 0 7
45457: PUSH
45458: LD_VAR 0 6
45462: PUSH
45463: LD_INT 1
45465: ARRAY
45466: PUSH
45467: LD_VAR 0 5
45471: ARRAY
45472: PUSH
45473: LD_VAR 0 6
45477: PUSH
45478: LD_INT 2
45480: ARRAY
45481: PUSH
45482: LD_VAR 0 5
45486: ARRAY
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
45492: LD_INT 92
45494: PUSH
45495: LD_VAR 0 7
45499: PUSH
45500: LD_INT 1
45502: ARRAY
45503: PUSH
45504: LD_VAR 0 7
45508: PUSH
45509: LD_INT 2
45511: ARRAY
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: PPUSH
45522: CALL_OW 69
45526: PUSH
45527: LD_INT 0
45529: EQUAL
45530: IFFALSE 45583
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45532: LD_VAR 0 1
45536: PPUSH
45537: LD_VAR 0 7
45541: PUSH
45542: LD_INT 1
45544: ARRAY
45545: PPUSH
45546: LD_VAR 0 7
45550: PUSH
45551: LD_INT 2
45553: ARRAY
45554: PPUSH
45555: LD_VAR 0 3
45559: PPUSH
45560: CALL_OW 48
// result := IsPlaced ( unit ) ;
45564: LD_ADDR_VAR 0 4
45568: PUSH
45569: LD_VAR 0 1
45573: PPUSH
45574: CALL_OW 305
45578: ST_TO_ADDR
// exit ;
45579: POP
45580: POP
45581: GO 45587
// end ; end ;
45583: GO 45450
45585: POP
45586: POP
// end ;
45587: LD_VAR 0 4
45591: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45592: LD_INT 0
45594: PPUSH
45595: PPUSH
45596: PPUSH
// if not side or side > 8 then
45597: LD_VAR 0 1
45601: NOT
45602: PUSH
45603: LD_VAR 0 1
45607: PUSH
45608: LD_INT 8
45610: GREATER
45611: OR
45612: IFFALSE 45616
// exit ;
45614: GO 45803
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45616: LD_ADDR_VAR 0 4
45620: PUSH
45621: LD_INT 22
45623: PUSH
45624: LD_VAR 0 1
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 21
45635: PUSH
45636: LD_INT 3
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PPUSH
45647: CALL_OW 69
45651: ST_TO_ADDR
// if not tmp then
45652: LD_VAR 0 4
45656: NOT
45657: IFFALSE 45661
// exit ;
45659: GO 45803
// enable_addtolog := true ;
45661: LD_ADDR_OWVAR 81
45665: PUSH
45666: LD_INT 1
45668: ST_TO_ADDR
// AddToLog ( [ ) ;
45669: LD_STRING [
45671: PPUSH
45672: CALL_OW 561
// for i in tmp do
45676: LD_ADDR_VAR 0 3
45680: PUSH
45681: LD_VAR 0 4
45685: PUSH
45686: FOR_IN
45687: IFFALSE 45794
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45689: LD_STRING [
45691: PUSH
45692: LD_VAR 0 3
45696: PPUSH
45697: CALL_OW 266
45701: STR
45702: PUSH
45703: LD_STRING , 
45705: STR
45706: PUSH
45707: LD_VAR 0 3
45711: PPUSH
45712: CALL_OW 250
45716: STR
45717: PUSH
45718: LD_STRING , 
45720: STR
45721: PUSH
45722: LD_VAR 0 3
45726: PPUSH
45727: CALL_OW 251
45731: STR
45732: PUSH
45733: LD_STRING , 
45735: STR
45736: PUSH
45737: LD_VAR 0 3
45741: PPUSH
45742: CALL_OW 254
45746: STR
45747: PUSH
45748: LD_STRING , 
45750: STR
45751: PUSH
45752: LD_VAR 0 3
45756: PPUSH
45757: LD_INT 1
45759: PPUSH
45760: CALL_OW 268
45764: STR
45765: PUSH
45766: LD_STRING , 
45768: STR
45769: PUSH
45770: LD_VAR 0 3
45774: PPUSH
45775: LD_INT 2
45777: PPUSH
45778: CALL_OW 268
45782: STR
45783: PUSH
45784: LD_STRING ],
45786: STR
45787: PPUSH
45788: CALL_OW 561
// end ;
45792: GO 45686
45794: POP
45795: POP
// AddToLog ( ]; ) ;
45796: LD_STRING ];
45798: PPUSH
45799: CALL_OW 561
// end ;
45803: LD_VAR 0 2
45807: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45808: LD_INT 0
45810: PPUSH
45811: PPUSH
45812: PPUSH
45813: PPUSH
45814: PPUSH
// if not area or not rate or not max then
45815: LD_VAR 0 1
45819: NOT
45820: PUSH
45821: LD_VAR 0 2
45825: NOT
45826: OR
45827: PUSH
45828: LD_VAR 0 4
45832: NOT
45833: OR
45834: IFFALSE 45838
// exit ;
45836: GO 46027
// while 1 do
45838: LD_INT 1
45840: IFFALSE 46027
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45842: LD_ADDR_VAR 0 9
45846: PUSH
45847: LD_VAR 0 1
45851: PPUSH
45852: LD_INT 1
45854: PPUSH
45855: CALL_OW 287
45859: PUSH
45860: LD_INT 10
45862: MUL
45863: ST_TO_ADDR
// r := rate / 10 ;
45864: LD_ADDR_VAR 0 7
45868: PUSH
45869: LD_VAR 0 2
45873: PUSH
45874: LD_INT 10
45876: DIVREAL
45877: ST_TO_ADDR
// time := 1 1$00 ;
45878: LD_ADDR_VAR 0 8
45882: PUSH
45883: LD_INT 2100
45885: ST_TO_ADDR
// if amount < min then
45886: LD_VAR 0 9
45890: PUSH
45891: LD_VAR 0 3
45895: LESS
45896: IFFALSE 45914
// r := r * 2 else
45898: LD_ADDR_VAR 0 7
45902: PUSH
45903: LD_VAR 0 7
45907: PUSH
45908: LD_INT 2
45910: MUL
45911: ST_TO_ADDR
45912: GO 45940
// if amount > max then
45914: LD_VAR 0 9
45918: PUSH
45919: LD_VAR 0 4
45923: GREATER
45924: IFFALSE 45940
// r := r / 2 ;
45926: LD_ADDR_VAR 0 7
45930: PUSH
45931: LD_VAR 0 7
45935: PUSH
45936: LD_INT 2
45938: DIVREAL
45939: ST_TO_ADDR
// time := time / r ;
45940: LD_ADDR_VAR 0 8
45944: PUSH
45945: LD_VAR 0 8
45949: PUSH
45950: LD_VAR 0 7
45954: DIVREAL
45955: ST_TO_ADDR
// if time < 0 then
45956: LD_VAR 0 8
45960: PUSH
45961: LD_INT 0
45963: LESS
45964: IFFALSE 45981
// time := time * - 1 ;
45966: LD_ADDR_VAR 0 8
45970: PUSH
45971: LD_VAR 0 8
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: MUL
45980: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45981: LD_VAR 0 8
45985: PUSH
45986: LD_INT 35
45988: PPUSH
45989: LD_INT 875
45991: PPUSH
45992: CALL_OW 12
45996: PLUS
45997: PPUSH
45998: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46002: LD_INT 1
46004: PPUSH
46005: LD_INT 5
46007: PPUSH
46008: CALL_OW 12
46012: PPUSH
46013: LD_VAR 0 1
46017: PPUSH
46018: LD_INT 1
46020: PPUSH
46021: CALL_OW 55
// end ;
46025: GO 45838
// end ;
46027: LD_VAR 0 5
46031: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46032: LD_INT 0
46034: PPUSH
46035: PPUSH
46036: PPUSH
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
// if not turrets or not factories then
46042: LD_VAR 0 1
46046: NOT
46047: PUSH
46048: LD_VAR 0 2
46052: NOT
46053: OR
46054: IFFALSE 46058
// exit ;
46056: GO 46365
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46058: LD_ADDR_VAR 0 10
46062: PUSH
46063: LD_INT 5
46065: PUSH
46066: LD_INT 6
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 2
46075: PUSH
46076: LD_INT 4
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 5
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 24
46100: PUSH
46101: LD_INT 25
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 23
46110: PUSH
46111: LD_INT 27
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 42
46124: PUSH
46125: LD_INT 43
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 44
46134: PUSH
46135: LD_INT 46
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 45
46144: PUSH
46145: LD_INT 47
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: LIST
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: LIST
46161: ST_TO_ADDR
// result := [ ] ;
46162: LD_ADDR_VAR 0 3
46166: PUSH
46167: EMPTY
46168: ST_TO_ADDR
// for i in turrets do
46169: LD_ADDR_VAR 0 4
46173: PUSH
46174: LD_VAR 0 1
46178: PUSH
46179: FOR_IN
46180: IFFALSE 46363
// begin nat := GetNation ( i ) ;
46182: LD_ADDR_VAR 0 7
46186: PUSH
46187: LD_VAR 0 4
46191: PPUSH
46192: CALL_OW 248
46196: ST_TO_ADDR
// weapon := 0 ;
46197: LD_ADDR_VAR 0 8
46201: PUSH
46202: LD_INT 0
46204: ST_TO_ADDR
// if not nat then
46205: LD_VAR 0 7
46209: NOT
46210: IFFALSE 46214
// continue ;
46212: GO 46179
// for j in list [ nat ] do
46214: LD_ADDR_VAR 0 5
46218: PUSH
46219: LD_VAR 0 10
46223: PUSH
46224: LD_VAR 0 7
46228: ARRAY
46229: PUSH
46230: FOR_IN
46231: IFFALSE 46272
// if GetBWeapon ( i ) = j [ 1 ] then
46233: LD_VAR 0 4
46237: PPUSH
46238: CALL_OW 269
46242: PUSH
46243: LD_VAR 0 5
46247: PUSH
46248: LD_INT 1
46250: ARRAY
46251: EQUAL
46252: IFFALSE 46270
// begin weapon := j [ 2 ] ;
46254: LD_ADDR_VAR 0 8
46258: PUSH
46259: LD_VAR 0 5
46263: PUSH
46264: LD_INT 2
46266: ARRAY
46267: ST_TO_ADDR
// break ;
46268: GO 46272
// end ;
46270: GO 46230
46272: POP
46273: POP
// if not weapon then
46274: LD_VAR 0 8
46278: NOT
46279: IFFALSE 46283
// continue ;
46281: GO 46179
// for k in factories do
46283: LD_ADDR_VAR 0 6
46287: PUSH
46288: LD_VAR 0 2
46292: PUSH
46293: FOR_IN
46294: IFFALSE 46359
// begin weapons := AvailableWeaponList ( k ) ;
46296: LD_ADDR_VAR 0 9
46300: PUSH
46301: LD_VAR 0 6
46305: PPUSH
46306: CALL_OW 478
46310: ST_TO_ADDR
// if not weapons then
46311: LD_VAR 0 9
46315: NOT
46316: IFFALSE 46320
// continue ;
46318: GO 46293
// if weapon in weapons then
46320: LD_VAR 0 8
46324: PUSH
46325: LD_VAR 0 9
46329: IN
46330: IFFALSE 46357
// begin result := [ i , weapon ] ;
46332: LD_ADDR_VAR 0 3
46336: PUSH
46337: LD_VAR 0 4
46341: PUSH
46342: LD_VAR 0 8
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: ST_TO_ADDR
// exit ;
46351: POP
46352: POP
46353: POP
46354: POP
46355: GO 46365
// end ; end ;
46357: GO 46293
46359: POP
46360: POP
// end ;
46361: GO 46179
46363: POP
46364: POP
// end ;
46365: LD_VAR 0 3
46369: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46370: LD_INT 0
46372: PPUSH
// if not side or side > 8 then
46373: LD_VAR 0 3
46377: NOT
46378: PUSH
46379: LD_VAR 0 3
46383: PUSH
46384: LD_INT 8
46386: GREATER
46387: OR
46388: IFFALSE 46392
// exit ;
46390: GO 46451
// if not range then
46392: LD_VAR 0 4
46396: NOT
46397: IFFALSE 46408
// range := - 12 ;
46399: LD_ADDR_VAR 0 4
46403: PUSH
46404: LD_INT 12
46406: NEG
46407: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46408: LD_VAR 0 1
46412: PPUSH
46413: LD_VAR 0 2
46417: PPUSH
46418: LD_VAR 0 3
46422: PPUSH
46423: LD_VAR 0 4
46427: PPUSH
46428: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46432: LD_VAR 0 1
46436: PPUSH
46437: LD_VAR 0 2
46441: PPUSH
46442: LD_VAR 0 3
46446: PPUSH
46447: CALL_OW 331
// end ;
46451: LD_VAR 0 5
46455: RET
// export function Video ( mode ) ; begin
46456: LD_INT 0
46458: PPUSH
// ingame_video = mode ;
46459: LD_ADDR_OWVAR 52
46463: PUSH
46464: LD_VAR 0 1
46468: ST_TO_ADDR
// interface_hidden = mode ;
46469: LD_ADDR_OWVAR 54
46473: PUSH
46474: LD_VAR 0 1
46478: ST_TO_ADDR
// end ;
46479: LD_VAR 0 2
46483: RET
// export function Join ( array , element ) ; begin
46484: LD_INT 0
46486: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46487: LD_ADDR_VAR 0 3
46491: PUSH
46492: LD_VAR 0 1
46496: PPUSH
46497: LD_VAR 0 1
46501: PUSH
46502: LD_INT 1
46504: PLUS
46505: PPUSH
46506: LD_VAR 0 2
46510: PPUSH
46511: CALL_OW 1
46515: ST_TO_ADDR
// end ;
46516: LD_VAR 0 3
46520: RET
// export function JoinUnion ( array , element ) ; begin
46521: LD_INT 0
46523: PPUSH
// result := array union element ;
46524: LD_ADDR_VAR 0 3
46528: PUSH
46529: LD_VAR 0 1
46533: PUSH
46534: LD_VAR 0 2
46538: UNION
46539: ST_TO_ADDR
// end ;
46540: LD_VAR 0 3
46544: RET
// export function GetBehemoths ( side ) ; begin
46545: LD_INT 0
46547: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
46548: LD_ADDR_VAR 0 2
46552: PUSH
46553: LD_INT 22
46555: PUSH
46556: LD_VAR 0 1
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 31
46567: PUSH
46568: LD_INT 25
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PPUSH
46579: CALL_OW 69
46583: ST_TO_ADDR
// end ;
46584: LD_VAR 0 2
46588: RET
// export function Shuffle ( array ) ; var i , index ; begin
46589: LD_INT 0
46591: PPUSH
46592: PPUSH
46593: PPUSH
// result := [ ] ;
46594: LD_ADDR_VAR 0 2
46598: PUSH
46599: EMPTY
46600: ST_TO_ADDR
// if not array then
46601: LD_VAR 0 1
46605: NOT
46606: IFFALSE 46610
// exit ;
46608: GO 46709
// Randomize ;
46610: CALL_OW 10
// for i = array downto 1 do
46614: LD_ADDR_VAR 0 3
46618: PUSH
46619: DOUBLE
46620: LD_VAR 0 1
46624: INC
46625: ST_TO_ADDR
46626: LD_INT 1
46628: PUSH
46629: FOR_DOWNTO
46630: IFFALSE 46707
// begin index := rand ( 1 , array ) ;
46632: LD_ADDR_VAR 0 4
46636: PUSH
46637: LD_INT 1
46639: PPUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 12
46649: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46650: LD_ADDR_VAR 0 2
46654: PUSH
46655: LD_VAR 0 2
46659: PPUSH
46660: LD_VAR 0 2
46664: PUSH
46665: LD_INT 1
46667: PLUS
46668: PPUSH
46669: LD_VAR 0 1
46673: PUSH
46674: LD_VAR 0 4
46678: ARRAY
46679: PPUSH
46680: CALL_OW 2
46684: ST_TO_ADDR
// array := Delete ( array , index ) ;
46685: LD_ADDR_VAR 0 1
46689: PUSH
46690: LD_VAR 0 1
46694: PPUSH
46695: LD_VAR 0 4
46699: PPUSH
46700: CALL_OW 3
46704: ST_TO_ADDR
// end ;
46705: GO 46629
46707: POP
46708: POP
// end ;
46709: LD_VAR 0 2
46713: RET
// export function GetBaseMaterials ( base ) ; begin
46714: LD_INT 0
46716: PPUSH
// result := [ 0 , 0 , 0 ] ;
46717: LD_ADDR_VAR 0 2
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// if not base then
46736: LD_VAR 0 1
46740: NOT
46741: IFFALSE 46745
// exit ;
46743: GO 46794
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46745: LD_ADDR_VAR 0 2
46749: PUSH
46750: LD_VAR 0 1
46754: PPUSH
46755: LD_INT 1
46757: PPUSH
46758: CALL_OW 275
46762: PUSH
46763: LD_VAR 0 1
46767: PPUSH
46768: LD_INT 2
46770: PPUSH
46771: CALL_OW 275
46775: PUSH
46776: LD_VAR 0 1
46780: PPUSH
46781: LD_INT 3
46783: PPUSH
46784: CALL_OW 275
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// end ;
46794: LD_VAR 0 2
46798: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46799: LD_INT 0
46801: PPUSH
46802: PPUSH
// result := array ;
46803: LD_ADDR_VAR 0 3
46807: PUSH
46808: LD_VAR 0 1
46812: ST_TO_ADDR
// if size >= result then
46813: LD_VAR 0 2
46817: PUSH
46818: LD_VAR 0 3
46822: GREATEREQUAL
46823: IFFALSE 46827
// exit ;
46825: GO 46877
// if size then
46827: LD_VAR 0 2
46831: IFFALSE 46877
// for i := array downto size do
46833: LD_ADDR_VAR 0 4
46837: PUSH
46838: DOUBLE
46839: LD_VAR 0 1
46843: INC
46844: ST_TO_ADDR
46845: LD_VAR 0 2
46849: PUSH
46850: FOR_DOWNTO
46851: IFFALSE 46875
// result := Delete ( result , result ) ;
46853: LD_ADDR_VAR 0 3
46857: PUSH
46858: LD_VAR 0 3
46862: PPUSH
46863: LD_VAR 0 3
46867: PPUSH
46868: CALL_OW 3
46872: ST_TO_ADDR
46873: GO 46850
46875: POP
46876: POP
// end ;
46877: LD_VAR 0 3
46881: RET
// export function ComExit ( unit ) ; var tmp ; begin
46882: LD_INT 0
46884: PPUSH
46885: PPUSH
// if not IsInUnit ( unit ) then
46886: LD_VAR 0 1
46890: PPUSH
46891: CALL_OW 310
46895: NOT
46896: IFFALSE 46900
// exit ;
46898: GO 46960
// tmp := IsInUnit ( unit ) ;
46900: LD_ADDR_VAR 0 3
46904: PUSH
46905: LD_VAR 0 1
46909: PPUSH
46910: CALL_OW 310
46914: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46915: LD_VAR 0 3
46919: PPUSH
46920: CALL_OW 247
46924: PUSH
46925: LD_INT 2
46927: EQUAL
46928: IFFALSE 46941
// ComExitVehicle ( unit ) else
46930: LD_VAR 0 1
46934: PPUSH
46935: CALL_OW 121
46939: GO 46950
// ComExitBuilding ( unit ) ;
46941: LD_VAR 0 1
46945: PPUSH
46946: CALL_OW 122
// result := tmp ;
46950: LD_ADDR_VAR 0 2
46954: PUSH
46955: LD_VAR 0 3
46959: ST_TO_ADDR
// end ;
46960: LD_VAR 0 2
46964: RET
// export function ComExitAll ( units ) ; var i ; begin
46965: LD_INT 0
46967: PPUSH
46968: PPUSH
// if not units then
46969: LD_VAR 0 1
46973: NOT
46974: IFFALSE 46978
// exit ;
46976: GO 47004
// for i in units do
46978: LD_ADDR_VAR 0 3
46982: PUSH
46983: LD_VAR 0 1
46987: PUSH
46988: FOR_IN
46989: IFFALSE 47002
// ComExit ( i ) ;
46991: LD_VAR 0 3
46995: PPUSH
46996: CALL 46882 0 1
47000: GO 46988
47002: POP
47003: POP
// end ;
47004: LD_VAR 0 2
47008: RET
// export function ResetHc ; begin
47009: LD_INT 0
47011: PPUSH
// InitHc ;
47012: CALL_OW 19
// hc_importance := 0 ;
47016: LD_ADDR_OWVAR 32
47020: PUSH
47021: LD_INT 0
47023: ST_TO_ADDR
// end ;
47024: LD_VAR 0 1
47028: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47029: LD_INT 0
47031: PPUSH
47032: PPUSH
47033: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47034: LD_ADDR_VAR 0 6
47038: PUSH
47039: LD_VAR 0 1
47043: PUSH
47044: LD_VAR 0 3
47048: PLUS
47049: PUSH
47050: LD_INT 2
47052: DIV
47053: ST_TO_ADDR
// if _x < 0 then
47054: LD_VAR 0 6
47058: PUSH
47059: LD_INT 0
47061: LESS
47062: IFFALSE 47079
// _x := _x * - 1 ;
47064: LD_ADDR_VAR 0 6
47068: PUSH
47069: LD_VAR 0 6
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: MUL
47078: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47079: LD_ADDR_VAR 0 7
47083: PUSH
47084: LD_VAR 0 2
47088: PUSH
47089: LD_VAR 0 4
47093: PLUS
47094: PUSH
47095: LD_INT 2
47097: DIV
47098: ST_TO_ADDR
// if _y < 0 then
47099: LD_VAR 0 7
47103: PUSH
47104: LD_INT 0
47106: LESS
47107: IFFALSE 47124
// _y := _y * - 1 ;
47109: LD_ADDR_VAR 0 7
47113: PUSH
47114: LD_VAR 0 7
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: MUL
47123: ST_TO_ADDR
// result := [ _x , _y ] ;
47124: LD_ADDR_VAR 0 5
47128: PUSH
47129: LD_VAR 0 6
47133: PUSH
47134: LD_VAR 0 7
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// end ;
47143: LD_VAR 0 5
47147: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47148: LD_INT 0
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
// task := GetTaskList ( unit ) ;
47154: LD_ADDR_VAR 0 7
47158: PUSH
47159: LD_VAR 0 1
47163: PPUSH
47164: CALL_OW 437
47168: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47169: LD_VAR 0 7
47173: NOT
47174: PUSH
47175: LD_VAR 0 1
47179: PPUSH
47180: LD_VAR 0 2
47184: PPUSH
47185: CALL_OW 308
47189: NOT
47190: AND
47191: IFFALSE 47195
// exit ;
47193: GO 47313
// if IsInArea ( unit , area ) then
47195: LD_VAR 0 1
47199: PPUSH
47200: LD_VAR 0 2
47204: PPUSH
47205: CALL_OW 308
47209: IFFALSE 47227
// begin ComMoveToArea ( unit , goAway ) ;
47211: LD_VAR 0 1
47215: PPUSH
47216: LD_VAR 0 3
47220: PPUSH
47221: CALL_OW 113
// exit ;
47225: GO 47313
// end ; if task [ 1 ] [ 1 ] <> M then
47227: LD_VAR 0 7
47231: PUSH
47232: LD_INT 1
47234: ARRAY
47235: PUSH
47236: LD_INT 1
47238: ARRAY
47239: PUSH
47240: LD_STRING M
47242: NONEQUAL
47243: IFFALSE 47247
// exit ;
47245: GO 47313
// x := task [ 1 ] [ 2 ] ;
47247: LD_ADDR_VAR 0 5
47251: PUSH
47252: LD_VAR 0 7
47256: PUSH
47257: LD_INT 1
47259: ARRAY
47260: PUSH
47261: LD_INT 2
47263: ARRAY
47264: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47265: LD_ADDR_VAR 0 6
47269: PUSH
47270: LD_VAR 0 7
47274: PUSH
47275: LD_INT 1
47277: ARRAY
47278: PUSH
47279: LD_INT 3
47281: ARRAY
47282: ST_TO_ADDR
// if InArea ( x , y , area ) then
47283: LD_VAR 0 5
47287: PPUSH
47288: LD_VAR 0 6
47292: PPUSH
47293: LD_VAR 0 2
47297: PPUSH
47298: CALL_OW 309
47302: IFFALSE 47313
// ComStop ( unit ) ;
47304: LD_VAR 0 1
47308: PPUSH
47309: CALL_OW 141
// end ;
47313: LD_VAR 0 4
47317: RET
// export function Abs ( value ) ; begin
47318: LD_INT 0
47320: PPUSH
// result := value ;
47321: LD_ADDR_VAR 0 2
47325: PUSH
47326: LD_VAR 0 1
47330: ST_TO_ADDR
// if value < 0 then
47331: LD_VAR 0 1
47335: PUSH
47336: LD_INT 0
47338: LESS
47339: IFFALSE 47356
// result := value * - 1 ;
47341: LD_ADDR_VAR 0 2
47345: PUSH
47346: LD_VAR 0 1
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: MUL
47355: ST_TO_ADDR
// end ;
47356: LD_VAR 0 2
47360: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47361: LD_INT 0
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
// if not unit or not building then
47371: LD_VAR 0 1
47375: NOT
47376: PUSH
47377: LD_VAR 0 2
47381: NOT
47382: OR
47383: IFFALSE 47387
// exit ;
47385: GO 47613
// x := GetX ( building ) ;
47387: LD_ADDR_VAR 0 4
47391: PUSH
47392: LD_VAR 0 2
47396: PPUSH
47397: CALL_OW 250
47401: ST_TO_ADDR
// y := GetY ( building ) ;
47402: LD_ADDR_VAR 0 6
47406: PUSH
47407: LD_VAR 0 2
47411: PPUSH
47412: CALL_OW 251
47416: ST_TO_ADDR
// d := GetDir ( building ) ;
47417: LD_ADDR_VAR 0 8
47421: PUSH
47422: LD_VAR 0 2
47426: PPUSH
47427: CALL_OW 254
47431: ST_TO_ADDR
// r := 4 ;
47432: LD_ADDR_VAR 0 9
47436: PUSH
47437: LD_INT 4
47439: ST_TO_ADDR
// for i := 1 to 5 do
47440: LD_ADDR_VAR 0 10
47444: PUSH
47445: DOUBLE
47446: LD_INT 1
47448: DEC
47449: ST_TO_ADDR
47450: LD_INT 5
47452: PUSH
47453: FOR_TO
47454: IFFALSE 47611
// begin _x := ShiftX ( x , d , r + i ) ;
47456: LD_ADDR_VAR 0 5
47460: PUSH
47461: LD_VAR 0 4
47465: PPUSH
47466: LD_VAR 0 8
47470: PPUSH
47471: LD_VAR 0 9
47475: PUSH
47476: LD_VAR 0 10
47480: PLUS
47481: PPUSH
47482: CALL_OW 272
47486: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47487: LD_ADDR_VAR 0 7
47491: PUSH
47492: LD_VAR 0 6
47496: PPUSH
47497: LD_VAR 0 8
47501: PPUSH
47502: LD_VAR 0 9
47506: PUSH
47507: LD_VAR 0 10
47511: PLUS
47512: PPUSH
47513: CALL_OW 273
47517: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47518: LD_VAR 0 5
47522: PPUSH
47523: LD_VAR 0 7
47527: PPUSH
47528: CALL_OW 488
47532: PUSH
47533: LD_VAR 0 5
47537: PPUSH
47538: LD_VAR 0 7
47542: PPUSH
47543: CALL_OW 428
47547: PPUSH
47548: CALL_OW 247
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: IN
47563: NOT
47564: AND
47565: IFFALSE 47609
// begin ComMoveXY ( unit , _x , _y ) ;
47567: LD_VAR 0 1
47571: PPUSH
47572: LD_VAR 0 5
47576: PPUSH
47577: LD_VAR 0 7
47581: PPUSH
47582: CALL_OW 111
// result := [ _x , _y ] ;
47586: LD_ADDR_VAR 0 3
47590: PUSH
47591: LD_VAR 0 5
47595: PUSH
47596: LD_VAR 0 7
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: ST_TO_ADDR
// exit ;
47605: POP
47606: POP
47607: GO 47613
// end ; end ;
47609: GO 47453
47611: POP
47612: POP
// end ;
47613: LD_VAR 0 3
47617: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47618: LD_INT 0
47620: PPUSH
47621: PPUSH
47622: PPUSH
// result := 0 ;
47623: LD_ADDR_VAR 0 3
47627: PUSH
47628: LD_INT 0
47630: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47631: LD_VAR 0 1
47635: PUSH
47636: LD_INT 0
47638: LESS
47639: PUSH
47640: LD_VAR 0 1
47644: PUSH
47645: LD_INT 8
47647: GREATER
47648: OR
47649: PUSH
47650: LD_VAR 0 2
47654: PUSH
47655: LD_INT 0
47657: LESS
47658: OR
47659: PUSH
47660: LD_VAR 0 2
47664: PUSH
47665: LD_INT 8
47667: GREATER
47668: OR
47669: IFFALSE 47673
// exit ;
47671: GO 47748
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47673: LD_ADDR_VAR 0 4
47677: PUSH
47678: LD_INT 22
47680: PUSH
47681: LD_VAR 0 2
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PPUSH
47690: CALL_OW 69
47694: PUSH
47695: FOR_IN
47696: IFFALSE 47746
// begin un := UnitShoot ( i ) ;
47698: LD_ADDR_VAR 0 5
47702: PUSH
47703: LD_VAR 0 4
47707: PPUSH
47708: CALL_OW 504
47712: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47713: LD_VAR 0 5
47717: PPUSH
47718: CALL_OW 255
47722: PUSH
47723: LD_VAR 0 1
47727: EQUAL
47728: IFFALSE 47744
// begin result := un ;
47730: LD_ADDR_VAR 0 3
47734: PUSH
47735: LD_VAR 0 5
47739: ST_TO_ADDR
// exit ;
47740: POP
47741: POP
47742: GO 47748
// end ; end ;
47744: GO 47695
47746: POP
47747: POP
// end ;
47748: LD_VAR 0 3
47752: RET
// export function GetCargoBay ( units ) ; begin
47753: LD_INT 0
47755: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47756: LD_ADDR_VAR 0 2
47760: PUSH
47761: LD_VAR 0 1
47765: PPUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 34
47771: PUSH
47772: LD_INT 12
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 34
47781: PUSH
47782: LD_INT 51
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 34
47791: PUSH
47792: LD_INT 32
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 34
47801: PUSH
47802: LD_INT 89
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: PPUSH
47816: CALL_OW 72
47820: ST_TO_ADDR
// end ;
47821: LD_VAR 0 2
47825: RET
// export function Negate ( value ) ; begin
47826: LD_INT 0
47828: PPUSH
// result := not value ;
47829: LD_ADDR_VAR 0 2
47833: PUSH
47834: LD_VAR 0 1
47838: NOT
47839: ST_TO_ADDR
// end ;
47840: LD_VAR 0 2
47844: RET
// export function Inc ( value ) ; begin
47845: LD_INT 0
47847: PPUSH
// result := value + 1 ;
47848: LD_ADDR_VAR 0 2
47852: PUSH
47853: LD_VAR 0 1
47857: PUSH
47858: LD_INT 1
47860: PLUS
47861: ST_TO_ADDR
// end ;
47862: LD_VAR 0 2
47866: RET
// export function Dec ( value ) ; begin
47867: LD_INT 0
47869: PPUSH
// result := value - 1 ;
47870: LD_ADDR_VAR 0 2
47874: PUSH
47875: LD_VAR 0 1
47879: PUSH
47880: LD_INT 1
47882: MINUS
47883: ST_TO_ADDR
// end ;
47884: LD_VAR 0 2
47888: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47889: LD_INT 0
47891: PPUSH
47892: PPUSH
47893: PPUSH
47894: PPUSH
47895: PPUSH
47896: PPUSH
47897: PPUSH
47898: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47899: LD_VAR 0 1
47903: PPUSH
47904: LD_VAR 0 2
47908: PPUSH
47909: CALL_OW 488
47913: NOT
47914: PUSH
47915: LD_VAR 0 3
47919: PPUSH
47920: LD_VAR 0 4
47924: PPUSH
47925: CALL_OW 488
47929: NOT
47930: OR
47931: IFFALSE 47944
// begin result := - 1 ;
47933: LD_ADDR_VAR 0 5
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: ST_TO_ADDR
// exit ;
47942: GO 48179
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47944: LD_ADDR_VAR 0 12
47948: PUSH
47949: LD_VAR 0 1
47953: PPUSH
47954: LD_VAR 0 2
47958: PPUSH
47959: LD_VAR 0 3
47963: PPUSH
47964: LD_VAR 0 4
47968: PPUSH
47969: CALL 47029 0 4
47973: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47974: LD_ADDR_VAR 0 11
47978: PUSH
47979: LD_VAR 0 1
47983: PPUSH
47984: LD_VAR 0 2
47988: PPUSH
47989: LD_VAR 0 12
47993: PUSH
47994: LD_INT 1
47996: ARRAY
47997: PPUSH
47998: LD_VAR 0 12
48002: PUSH
48003: LD_INT 2
48005: ARRAY
48006: PPUSH
48007: CALL_OW 298
48011: ST_TO_ADDR
// distance := 9999 ;
48012: LD_ADDR_VAR 0 10
48016: PUSH
48017: LD_INT 9999
48019: ST_TO_ADDR
// for i := 0 to 5 do
48020: LD_ADDR_VAR 0 6
48024: PUSH
48025: DOUBLE
48026: LD_INT 0
48028: DEC
48029: ST_TO_ADDR
48030: LD_INT 5
48032: PUSH
48033: FOR_TO
48034: IFFALSE 48177
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48036: LD_ADDR_VAR 0 7
48040: PUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: LD_VAR 0 6
48050: PPUSH
48051: LD_VAR 0 11
48055: PPUSH
48056: CALL_OW 272
48060: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48061: LD_ADDR_VAR 0 8
48065: PUSH
48066: LD_VAR 0 2
48070: PPUSH
48071: LD_VAR 0 6
48075: PPUSH
48076: LD_VAR 0 11
48080: PPUSH
48081: CALL_OW 273
48085: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48086: LD_VAR 0 7
48090: PPUSH
48091: LD_VAR 0 8
48095: PPUSH
48096: CALL_OW 488
48100: NOT
48101: IFFALSE 48105
// continue ;
48103: GO 48033
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48105: LD_ADDR_VAR 0 9
48109: PUSH
48110: LD_VAR 0 12
48114: PUSH
48115: LD_INT 1
48117: ARRAY
48118: PPUSH
48119: LD_VAR 0 12
48123: PUSH
48124: LD_INT 2
48126: ARRAY
48127: PPUSH
48128: LD_VAR 0 7
48132: PPUSH
48133: LD_VAR 0 8
48137: PPUSH
48138: CALL_OW 298
48142: ST_TO_ADDR
// if tmp < distance then
48143: LD_VAR 0 9
48147: PUSH
48148: LD_VAR 0 10
48152: LESS
48153: IFFALSE 48175
// begin result := i ;
48155: LD_ADDR_VAR 0 5
48159: PUSH
48160: LD_VAR 0 6
48164: ST_TO_ADDR
// distance := tmp ;
48165: LD_ADDR_VAR 0 10
48169: PUSH
48170: LD_VAR 0 9
48174: ST_TO_ADDR
// end ; end ;
48175: GO 48033
48177: POP
48178: POP
// end ;
48179: LD_VAR 0 5
48183: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48184: LD_INT 0
48186: PPUSH
48187: PPUSH
// if not driver or not IsInUnit ( driver ) then
48188: LD_VAR 0 1
48192: NOT
48193: PUSH
48194: LD_VAR 0 1
48198: PPUSH
48199: CALL_OW 310
48203: NOT
48204: OR
48205: IFFALSE 48209
// exit ;
48207: GO 48299
// vehicle := IsInUnit ( driver ) ;
48209: LD_ADDR_VAR 0 3
48213: PUSH
48214: LD_VAR 0 1
48218: PPUSH
48219: CALL_OW 310
48223: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48224: LD_VAR 0 1
48228: PPUSH
48229: LD_STRING \
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: PUSH
48259: LD_STRING E
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_VAR 0 3
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PPUSH
48295: CALL_OW 446
// end ;
48299: LD_VAR 0 2
48303: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48304: LD_INT 0
48306: PPUSH
48307: PPUSH
// if not driver or not IsInUnit ( driver ) then
48308: LD_VAR 0 1
48312: NOT
48313: PUSH
48314: LD_VAR 0 1
48318: PPUSH
48319: CALL_OW 310
48323: NOT
48324: OR
48325: IFFALSE 48329
// exit ;
48327: GO 48419
// vehicle := IsInUnit ( driver ) ;
48329: LD_ADDR_VAR 0 3
48333: PUSH
48334: LD_VAR 0 1
48338: PPUSH
48339: CALL_OW 310
48343: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48344: LD_VAR 0 1
48348: PPUSH
48349: LD_STRING \
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: PUSH
48379: LD_STRING E
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_VAR 0 3
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PPUSH
48415: CALL_OW 447
// end ;
48419: LD_VAR 0 2
48423: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48424: LD_INT 0
48426: PPUSH
48427: PPUSH
48428: PPUSH
// tmp := [ ] ;
48429: LD_ADDR_VAR 0 5
48433: PUSH
48434: EMPTY
48435: ST_TO_ADDR
// for i in units do
48436: LD_ADDR_VAR 0 4
48440: PUSH
48441: LD_VAR 0 1
48445: PUSH
48446: FOR_IN
48447: IFFALSE 48485
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48449: LD_ADDR_VAR 0 5
48453: PUSH
48454: LD_VAR 0 5
48458: PPUSH
48459: LD_VAR 0 5
48463: PUSH
48464: LD_INT 1
48466: PLUS
48467: PPUSH
48468: LD_VAR 0 4
48472: PPUSH
48473: CALL_OW 256
48477: PPUSH
48478: CALL_OW 2
48482: ST_TO_ADDR
48483: GO 48446
48485: POP
48486: POP
// if not tmp then
48487: LD_VAR 0 5
48491: NOT
48492: IFFALSE 48496
// exit ;
48494: GO 48544
// if asc then
48496: LD_VAR 0 2
48500: IFFALSE 48524
// result := SortListByListAsc ( units , tmp ) else
48502: LD_ADDR_VAR 0 3
48506: PUSH
48507: LD_VAR 0 1
48511: PPUSH
48512: LD_VAR 0 5
48516: PPUSH
48517: CALL_OW 76
48521: ST_TO_ADDR
48522: GO 48544
// result := SortListByListDesc ( units , tmp ) ;
48524: LD_ADDR_VAR 0 3
48528: PUSH
48529: LD_VAR 0 1
48533: PPUSH
48534: LD_VAR 0 5
48538: PPUSH
48539: CALL_OW 77
48543: ST_TO_ADDR
// end ;
48544: LD_VAR 0 3
48548: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48549: LD_INT 0
48551: PPUSH
48552: PPUSH
// task := GetTaskList ( mech ) ;
48553: LD_ADDR_VAR 0 4
48557: PUSH
48558: LD_VAR 0 1
48562: PPUSH
48563: CALL_OW 437
48567: ST_TO_ADDR
// if not task then
48568: LD_VAR 0 4
48572: NOT
48573: IFFALSE 48577
// exit ;
48575: GO 48619
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48577: LD_ADDR_VAR 0 3
48581: PUSH
48582: LD_VAR 0 4
48586: PUSH
48587: LD_INT 1
48589: ARRAY
48590: PUSH
48591: LD_INT 1
48593: ARRAY
48594: PUSH
48595: LD_STRING r
48597: EQUAL
48598: PUSH
48599: LD_VAR 0 4
48603: PUSH
48604: LD_INT 1
48606: ARRAY
48607: PUSH
48608: LD_INT 4
48610: ARRAY
48611: PUSH
48612: LD_VAR 0 2
48616: EQUAL
48617: AND
48618: ST_TO_ADDR
// end ;
48619: LD_VAR 0 3
48623: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48624: LD_INT 0
48626: PPUSH
// SetDir ( unit , d ) ;
48627: LD_VAR 0 1
48631: PPUSH
48632: LD_VAR 0 4
48636: PPUSH
48637: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48641: LD_VAR 0 1
48645: PPUSH
48646: LD_VAR 0 2
48650: PPUSH
48651: LD_VAR 0 3
48655: PPUSH
48656: LD_VAR 0 5
48660: PPUSH
48661: CALL_OW 48
// end ;
48665: LD_VAR 0 6
48669: RET
// export function ToNaturalNumber ( number ) ; begin
48670: LD_INT 0
48672: PPUSH
// result := number div 1 ;
48673: LD_ADDR_VAR 0 2
48677: PUSH
48678: LD_VAR 0 1
48682: PUSH
48683: LD_INT 1
48685: DIV
48686: ST_TO_ADDR
// if number < 0 then
48687: LD_VAR 0 1
48691: PUSH
48692: LD_INT 0
48694: LESS
48695: IFFALSE 48705
// result := 0 ;
48697: LD_ADDR_VAR 0 2
48701: PUSH
48702: LD_INT 0
48704: ST_TO_ADDR
// end ;
48705: LD_VAR 0 2
48709: RET
// export function SortByClass ( units , class ) ; var un ; begin
48710: LD_INT 0
48712: PPUSH
48713: PPUSH
// if not units or not class then
48714: LD_VAR 0 1
48718: NOT
48719: PUSH
48720: LD_VAR 0 2
48724: NOT
48725: OR
48726: IFFALSE 48730
// exit ;
48728: GO 48825
// result := [ ] ;
48730: LD_ADDR_VAR 0 3
48734: PUSH
48735: EMPTY
48736: ST_TO_ADDR
// for un in units do
48737: LD_ADDR_VAR 0 4
48741: PUSH
48742: LD_VAR 0 1
48746: PUSH
48747: FOR_IN
48748: IFFALSE 48823
// if GetClass ( un ) = class then
48750: LD_VAR 0 4
48754: PPUSH
48755: CALL_OW 257
48759: PUSH
48760: LD_VAR 0 2
48764: EQUAL
48765: IFFALSE 48792
// result := Insert ( result , 1 , un ) else
48767: LD_ADDR_VAR 0 3
48771: PUSH
48772: LD_VAR 0 3
48776: PPUSH
48777: LD_INT 1
48779: PPUSH
48780: LD_VAR 0 4
48784: PPUSH
48785: CALL_OW 2
48789: ST_TO_ADDR
48790: GO 48821
// result := Replace ( result , result + 1 , un ) ;
48792: LD_ADDR_VAR 0 3
48796: PUSH
48797: LD_VAR 0 3
48801: PPUSH
48802: LD_VAR 0 3
48806: PUSH
48807: LD_INT 1
48809: PLUS
48810: PPUSH
48811: LD_VAR 0 4
48815: PPUSH
48816: CALL_OW 1
48820: ST_TO_ADDR
48821: GO 48747
48823: POP
48824: POP
// end ;
48825: LD_VAR 0 3
48829: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48830: LD_INT 0
48832: PPUSH
48833: PPUSH
48834: PPUSH
48835: PPUSH
48836: PPUSH
48837: PPUSH
48838: PPUSH
// result := [ ] ;
48839: LD_ADDR_VAR 0 4
48843: PUSH
48844: EMPTY
48845: ST_TO_ADDR
// if x - r < 0 then
48846: LD_VAR 0 1
48850: PUSH
48851: LD_VAR 0 3
48855: MINUS
48856: PUSH
48857: LD_INT 0
48859: LESS
48860: IFFALSE 48872
// min_x := 0 else
48862: LD_ADDR_VAR 0 8
48866: PUSH
48867: LD_INT 0
48869: ST_TO_ADDR
48870: GO 48888
// min_x := x - r ;
48872: LD_ADDR_VAR 0 8
48876: PUSH
48877: LD_VAR 0 1
48881: PUSH
48882: LD_VAR 0 3
48886: MINUS
48887: ST_TO_ADDR
// if y - r < 0 then
48888: LD_VAR 0 2
48892: PUSH
48893: LD_VAR 0 3
48897: MINUS
48898: PUSH
48899: LD_INT 0
48901: LESS
48902: IFFALSE 48914
// min_y := 0 else
48904: LD_ADDR_VAR 0 7
48908: PUSH
48909: LD_INT 0
48911: ST_TO_ADDR
48912: GO 48930
// min_y := y - r ;
48914: LD_ADDR_VAR 0 7
48918: PUSH
48919: LD_VAR 0 2
48923: PUSH
48924: LD_VAR 0 3
48928: MINUS
48929: ST_TO_ADDR
// max_x := x + r ;
48930: LD_ADDR_VAR 0 9
48934: PUSH
48935: LD_VAR 0 1
48939: PUSH
48940: LD_VAR 0 3
48944: PLUS
48945: ST_TO_ADDR
// max_y := y + r ;
48946: LD_ADDR_VAR 0 10
48950: PUSH
48951: LD_VAR 0 2
48955: PUSH
48956: LD_VAR 0 3
48960: PLUS
48961: ST_TO_ADDR
// for _x = min_x to max_x do
48962: LD_ADDR_VAR 0 5
48966: PUSH
48967: DOUBLE
48968: LD_VAR 0 8
48972: DEC
48973: ST_TO_ADDR
48974: LD_VAR 0 9
48978: PUSH
48979: FOR_TO
48980: IFFALSE 49081
// for _y = min_y to max_y do
48982: LD_ADDR_VAR 0 6
48986: PUSH
48987: DOUBLE
48988: LD_VAR 0 7
48992: DEC
48993: ST_TO_ADDR
48994: LD_VAR 0 10
48998: PUSH
48999: FOR_TO
49000: IFFALSE 49077
// begin if not ValidHex ( _x , _y ) then
49002: LD_VAR 0 5
49006: PPUSH
49007: LD_VAR 0 6
49011: PPUSH
49012: CALL_OW 488
49016: NOT
49017: IFFALSE 49021
// continue ;
49019: GO 48999
// if GetResourceTypeXY ( _x , _y ) then
49021: LD_VAR 0 5
49025: PPUSH
49026: LD_VAR 0 6
49030: PPUSH
49031: CALL_OW 283
49035: IFFALSE 49075
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49037: LD_ADDR_VAR 0 4
49041: PUSH
49042: LD_VAR 0 4
49046: PPUSH
49047: LD_VAR 0 4
49051: PUSH
49052: LD_INT 1
49054: PLUS
49055: PPUSH
49056: LD_VAR 0 5
49060: PUSH
49061: LD_VAR 0 6
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PPUSH
49070: CALL_OW 1
49074: ST_TO_ADDR
// end ;
49075: GO 48999
49077: POP
49078: POP
49079: GO 48979
49081: POP
49082: POP
// end ;
49083: LD_VAR 0 4
49087: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49088: LD_INT 0
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
49094: PPUSH
49095: PPUSH
49096: PPUSH
49097: PPUSH
// if not units then
49098: LD_VAR 0 1
49102: NOT
49103: IFFALSE 49107
// exit ;
49105: GO 49635
// result := UnitFilter ( units , [ f_ok ] ) ;
49107: LD_ADDR_VAR 0 3
49111: PUSH
49112: LD_VAR 0 1
49116: PPUSH
49117: LD_INT 50
49119: PUSH
49120: EMPTY
49121: LIST
49122: PPUSH
49123: CALL_OW 72
49127: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49128: LD_ADDR_VAR 0 8
49132: PUSH
49133: LD_VAR 0 1
49137: PUSH
49138: LD_INT 1
49140: ARRAY
49141: PPUSH
49142: CALL_OW 255
49146: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49147: LD_ADDR_VAR 0 10
49151: PUSH
49152: LD_INT 29
49154: PUSH
49155: LD_INT 91
49157: PUSH
49158: LD_INT 49
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: ST_TO_ADDR
// if not result then
49166: LD_VAR 0 3
49170: NOT
49171: IFFALSE 49175
// exit ;
49173: GO 49635
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49175: LD_ADDR_VAR 0 5
49179: PUSH
49180: LD_INT 81
49182: PUSH
49183: LD_VAR 0 8
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PPUSH
49192: CALL_OW 69
49196: ST_TO_ADDR
// for i in result do
49197: LD_ADDR_VAR 0 4
49201: PUSH
49202: LD_VAR 0 3
49206: PUSH
49207: FOR_IN
49208: IFFALSE 49633
// begin tag := GetTag ( i ) + 1 ;
49210: LD_ADDR_VAR 0 9
49214: PUSH
49215: LD_VAR 0 4
49219: PPUSH
49220: CALL_OW 110
49224: PUSH
49225: LD_INT 1
49227: PLUS
49228: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
49229: LD_ADDR_VAR 0 7
49233: PUSH
49234: LD_VAR 0 4
49238: PPUSH
49239: CALL_OW 250
49243: PPUSH
49244: LD_VAR 0 4
49248: PPUSH
49249: CALL_OW 251
49253: PPUSH
49254: LD_INT 4
49256: PPUSH
49257: CALL 48830 0 3
49261: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
49262: LD_VAR 0 4
49266: PPUSH
49267: CALL_OW 247
49271: PUSH
49272: LD_INT 2
49274: EQUAL
49275: PUSH
49276: LD_VAR 0 7
49280: PUSH
49281: LD_INT 2
49283: GREATER
49284: AND
49285: PUSH
49286: LD_VAR 0 4
49290: PPUSH
49291: CALL_OW 264
49295: PUSH
49296: LD_VAR 0 10
49300: IN
49301: NOT
49302: AND
49303: IFFALSE 49342
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49305: LD_VAR 0 4
49309: PPUSH
49310: LD_VAR 0 7
49314: PUSH
49315: LD_INT 1
49317: ARRAY
49318: PUSH
49319: LD_INT 1
49321: ARRAY
49322: PPUSH
49323: LD_VAR 0 7
49327: PUSH
49328: LD_INT 1
49330: ARRAY
49331: PUSH
49332: LD_INT 2
49334: ARRAY
49335: PPUSH
49336: CALL_OW 116
49340: GO 49631
// if path > tag then
49342: LD_VAR 0 2
49346: PUSH
49347: LD_VAR 0 9
49351: GREATER
49352: IFFALSE 49560
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49354: LD_ADDR_VAR 0 6
49358: PUSH
49359: LD_VAR 0 5
49363: PPUSH
49364: LD_INT 91
49366: PUSH
49367: LD_VAR 0 4
49371: PUSH
49372: LD_INT 8
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: PPUSH
49380: CALL_OW 72
49384: ST_TO_ADDR
// if nearEnemy then
49385: LD_VAR 0 6
49389: IFFALSE 49458
// begin if GetWeapon ( i ) = ru_time_lapser then
49391: LD_VAR 0 4
49395: PPUSH
49396: CALL_OW 264
49400: PUSH
49401: LD_INT 49
49403: EQUAL
49404: IFFALSE 49432
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49406: LD_VAR 0 4
49410: PPUSH
49411: LD_VAR 0 6
49415: PPUSH
49416: LD_VAR 0 4
49420: PPUSH
49421: CALL_OW 74
49425: PPUSH
49426: CALL_OW 112
49430: GO 49456
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49432: LD_VAR 0 4
49436: PPUSH
49437: LD_VAR 0 6
49441: PPUSH
49442: LD_VAR 0 4
49446: PPUSH
49447: CALL_OW 74
49451: PPUSH
49452: CALL 50706 0 2
// end else
49456: GO 49558
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49458: LD_VAR 0 4
49462: PPUSH
49463: LD_VAR 0 2
49467: PUSH
49468: LD_VAR 0 9
49472: ARRAY
49473: PUSH
49474: LD_INT 1
49476: ARRAY
49477: PPUSH
49478: LD_VAR 0 2
49482: PUSH
49483: LD_VAR 0 9
49487: ARRAY
49488: PUSH
49489: LD_INT 2
49491: ARRAY
49492: PPUSH
49493: CALL_OW 297
49497: PUSH
49498: LD_INT 6
49500: GREATER
49501: IFFALSE 49544
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49503: LD_VAR 0 4
49507: PPUSH
49508: LD_VAR 0 2
49512: PUSH
49513: LD_VAR 0 9
49517: ARRAY
49518: PUSH
49519: LD_INT 1
49521: ARRAY
49522: PPUSH
49523: LD_VAR 0 2
49527: PUSH
49528: LD_VAR 0 9
49532: ARRAY
49533: PUSH
49534: LD_INT 2
49536: ARRAY
49537: PPUSH
49538: CALL_OW 114
49542: GO 49558
// SetTag ( i , tag ) ;
49544: LD_VAR 0 4
49548: PPUSH
49549: LD_VAR 0 9
49553: PPUSH
49554: CALL_OW 109
// end else
49558: GO 49631
// if enemy then
49560: LD_VAR 0 5
49564: IFFALSE 49631
// begin if GetWeapon ( i ) = ru_time_lapser then
49566: LD_VAR 0 4
49570: PPUSH
49571: CALL_OW 264
49575: PUSH
49576: LD_INT 49
49578: EQUAL
49579: IFFALSE 49607
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49581: LD_VAR 0 4
49585: PPUSH
49586: LD_VAR 0 5
49590: PPUSH
49591: LD_VAR 0 4
49595: PPUSH
49596: CALL_OW 74
49600: PPUSH
49601: CALL_OW 112
49605: GO 49631
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49607: LD_VAR 0 4
49611: PPUSH
49612: LD_VAR 0 5
49616: PPUSH
49617: LD_VAR 0 4
49621: PPUSH
49622: CALL_OW 74
49626: PPUSH
49627: CALL 50706 0 2
// end ; end ;
49631: GO 49207
49633: POP
49634: POP
// end ;
49635: LD_VAR 0 3
49639: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49640: LD_INT 0
49642: PPUSH
49643: PPUSH
49644: PPUSH
// if not unit or IsInUnit ( unit ) then
49645: LD_VAR 0 1
49649: NOT
49650: PUSH
49651: LD_VAR 0 1
49655: PPUSH
49656: CALL_OW 310
49660: OR
49661: IFFALSE 49665
// exit ;
49663: GO 49756
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49665: LD_ADDR_VAR 0 4
49669: PUSH
49670: LD_VAR 0 1
49674: PPUSH
49675: CALL_OW 250
49679: PPUSH
49680: LD_VAR 0 2
49684: PPUSH
49685: LD_INT 1
49687: PPUSH
49688: CALL_OW 272
49692: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49693: LD_ADDR_VAR 0 5
49697: PUSH
49698: LD_VAR 0 1
49702: PPUSH
49703: CALL_OW 251
49707: PPUSH
49708: LD_VAR 0 2
49712: PPUSH
49713: LD_INT 1
49715: PPUSH
49716: CALL_OW 273
49720: ST_TO_ADDR
// if ValidHex ( x , y ) then
49721: LD_VAR 0 4
49725: PPUSH
49726: LD_VAR 0 5
49730: PPUSH
49731: CALL_OW 488
49735: IFFALSE 49756
// ComTurnXY ( unit , x , y ) ;
49737: LD_VAR 0 1
49741: PPUSH
49742: LD_VAR 0 4
49746: PPUSH
49747: LD_VAR 0 5
49751: PPUSH
49752: CALL_OW 118
// end ;
49756: LD_VAR 0 3
49760: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49761: LD_INT 0
49763: PPUSH
49764: PPUSH
// result := false ;
49765: LD_ADDR_VAR 0 3
49769: PUSH
49770: LD_INT 0
49772: ST_TO_ADDR
// if not units then
49773: LD_VAR 0 2
49777: NOT
49778: IFFALSE 49782
// exit ;
49780: GO 49827
// for i in units do
49782: LD_ADDR_VAR 0 4
49786: PUSH
49787: LD_VAR 0 2
49791: PUSH
49792: FOR_IN
49793: IFFALSE 49825
// if See ( side , i ) then
49795: LD_VAR 0 1
49799: PPUSH
49800: LD_VAR 0 4
49804: PPUSH
49805: CALL_OW 292
49809: IFFALSE 49823
// begin result := true ;
49811: LD_ADDR_VAR 0 3
49815: PUSH
49816: LD_INT 1
49818: ST_TO_ADDR
// exit ;
49819: POP
49820: POP
49821: GO 49827
// end ;
49823: GO 49792
49825: POP
49826: POP
// end ;
49827: LD_VAR 0 3
49831: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49832: LD_INT 0
49834: PPUSH
49835: PPUSH
49836: PPUSH
49837: PPUSH
// if not unit or not points then
49838: LD_VAR 0 1
49842: NOT
49843: PUSH
49844: LD_VAR 0 2
49848: NOT
49849: OR
49850: IFFALSE 49854
// exit ;
49852: GO 49944
// dist := 99999 ;
49854: LD_ADDR_VAR 0 5
49858: PUSH
49859: LD_INT 99999
49861: ST_TO_ADDR
// for i in points do
49862: LD_ADDR_VAR 0 4
49866: PUSH
49867: LD_VAR 0 2
49871: PUSH
49872: FOR_IN
49873: IFFALSE 49942
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49875: LD_ADDR_VAR 0 6
49879: PUSH
49880: LD_VAR 0 1
49884: PPUSH
49885: LD_VAR 0 4
49889: PUSH
49890: LD_INT 1
49892: ARRAY
49893: PPUSH
49894: LD_VAR 0 4
49898: PUSH
49899: LD_INT 2
49901: ARRAY
49902: PPUSH
49903: CALL_OW 297
49907: ST_TO_ADDR
// if tmpDist < dist then
49908: LD_VAR 0 6
49912: PUSH
49913: LD_VAR 0 5
49917: LESS
49918: IFFALSE 49940
// begin result := i ;
49920: LD_ADDR_VAR 0 3
49924: PUSH
49925: LD_VAR 0 4
49929: ST_TO_ADDR
// dist := tmpDist ;
49930: LD_ADDR_VAR 0 5
49934: PUSH
49935: LD_VAR 0 6
49939: ST_TO_ADDR
// end ; end ;
49940: GO 49872
49942: POP
49943: POP
// end ;
49944: LD_VAR 0 3
49948: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49949: LD_INT 0
49951: PPUSH
// uc_side := side ;
49952: LD_ADDR_OWVAR 20
49956: PUSH
49957: LD_VAR 0 1
49961: ST_TO_ADDR
// uc_nation := 3 ;
49962: LD_ADDR_OWVAR 21
49966: PUSH
49967: LD_INT 3
49969: ST_TO_ADDR
// vc_chassis := 25 ;
49970: LD_ADDR_OWVAR 37
49974: PUSH
49975: LD_INT 25
49977: ST_TO_ADDR
// vc_engine := engine_siberite ;
49978: LD_ADDR_OWVAR 39
49982: PUSH
49983: LD_INT 3
49985: ST_TO_ADDR
// vc_control := control_computer ;
49986: LD_ADDR_OWVAR 38
49990: PUSH
49991: LD_INT 3
49993: ST_TO_ADDR
// vc_weapon := 59 ;
49994: LD_ADDR_OWVAR 40
49998: PUSH
49999: LD_INT 59
50001: ST_TO_ADDR
// result := CreateVehicle ;
50002: LD_ADDR_VAR 0 5
50006: PUSH
50007: CALL_OW 45
50011: ST_TO_ADDR
// SetDir ( result , d ) ;
50012: LD_VAR 0 5
50016: PPUSH
50017: LD_VAR 0 4
50021: PPUSH
50022: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50026: LD_VAR 0 5
50030: PPUSH
50031: LD_VAR 0 2
50035: PPUSH
50036: LD_VAR 0 3
50040: PPUSH
50041: LD_INT 0
50043: PPUSH
50044: CALL_OW 48
// end ;
50048: LD_VAR 0 5
50052: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50053: LD_INT 0
50055: PPUSH
50056: PPUSH
50057: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50058: LD_ADDR_VAR 0 2
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50081: LD_VAR 0 1
50085: NOT
50086: PUSH
50087: LD_VAR 0 1
50091: PPUSH
50092: CALL_OW 264
50096: PUSH
50097: LD_INT 12
50099: PUSH
50100: LD_INT 51
50102: PUSH
50103: LD_INT 32
50105: PUSH
50106: LD_INT 89
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: IN
50115: NOT
50116: OR
50117: IFFALSE 50121
// exit ;
50119: GO 50219
// for i := 1 to 3 do
50121: LD_ADDR_VAR 0 3
50125: PUSH
50126: DOUBLE
50127: LD_INT 1
50129: DEC
50130: ST_TO_ADDR
50131: LD_INT 3
50133: PUSH
50134: FOR_TO
50135: IFFALSE 50217
// begin tmp := GetCargo ( cargo , i ) ;
50137: LD_ADDR_VAR 0 4
50141: PUSH
50142: LD_VAR 0 1
50146: PPUSH
50147: LD_VAR 0 3
50151: PPUSH
50152: CALL_OW 289
50156: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50157: LD_ADDR_VAR 0 2
50161: PUSH
50162: LD_VAR 0 2
50166: PPUSH
50167: LD_VAR 0 3
50171: PPUSH
50172: LD_VAR 0 4
50176: PPUSH
50177: CALL_OW 1
50181: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50182: LD_ADDR_VAR 0 2
50186: PUSH
50187: LD_VAR 0 2
50191: PPUSH
50192: LD_INT 4
50194: PPUSH
50195: LD_VAR 0 2
50199: PUSH
50200: LD_INT 4
50202: ARRAY
50203: PUSH
50204: LD_VAR 0 4
50208: PLUS
50209: PPUSH
50210: CALL_OW 1
50214: ST_TO_ADDR
// end ;
50215: GO 50134
50217: POP
50218: POP
// end ;
50219: LD_VAR 0 2
50223: RET
// export function Length ( array ) ; begin
50224: LD_INT 0
50226: PPUSH
// result := array + 0 ;
50227: LD_ADDR_VAR 0 2
50231: PUSH
50232: LD_VAR 0 1
50236: PUSH
50237: LD_INT 0
50239: PLUS
50240: ST_TO_ADDR
// end ;
50241: LD_VAR 0 2
50245: RET
// export function PrepareArray ( array ) ; begin
50246: LD_INT 0
50248: PPUSH
// result := array diff 0 ;
50249: LD_ADDR_VAR 0 2
50253: PUSH
50254: LD_VAR 0 1
50258: PUSH
50259: LD_INT 0
50261: DIFF
50262: ST_TO_ADDR
// if not result [ 1 ] then
50263: LD_VAR 0 2
50267: PUSH
50268: LD_INT 1
50270: ARRAY
50271: NOT
50272: IFFALSE 50292
// result := Delete ( result , 1 ) ;
50274: LD_ADDR_VAR 0 2
50278: PUSH
50279: LD_VAR 0 2
50283: PPUSH
50284: LD_INT 1
50286: PPUSH
50287: CALL_OW 3
50291: ST_TO_ADDR
// end ;
50292: LD_VAR 0 2
50296: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
50297: LD_INT 0
50299: PPUSH
50300: PPUSH
50301: PPUSH
50302: PPUSH
// sibRocketRange := 25 ;
50303: LD_ADDR_VAR 0 6
50307: PUSH
50308: LD_INT 25
50310: ST_TO_ADDR
// result := false ;
50311: LD_ADDR_VAR 0 4
50315: PUSH
50316: LD_INT 0
50318: ST_TO_ADDR
// for i := 0 to 5 do
50319: LD_ADDR_VAR 0 5
50323: PUSH
50324: DOUBLE
50325: LD_INT 0
50327: DEC
50328: ST_TO_ADDR
50329: LD_INT 5
50331: PUSH
50332: FOR_TO
50333: IFFALSE 50400
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
50335: LD_VAR 0 1
50339: PPUSH
50340: LD_VAR 0 5
50344: PPUSH
50345: LD_VAR 0 6
50349: PPUSH
50350: CALL_OW 272
50354: PPUSH
50355: LD_VAR 0 2
50359: PPUSH
50360: LD_VAR 0 5
50364: PPUSH
50365: LD_VAR 0 6
50369: PPUSH
50370: CALL_OW 273
50374: PPUSH
50375: LD_VAR 0 3
50379: PPUSH
50380: CALL_OW 309
50384: IFFALSE 50398
// begin result := true ;
50386: LD_ADDR_VAR 0 4
50390: PUSH
50391: LD_INT 1
50393: ST_TO_ADDR
// exit ;
50394: POP
50395: POP
50396: GO 50402
// end ;
50398: GO 50332
50400: POP
50401: POP
// end ;
50402: LD_VAR 0 4
50406: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
50407: LD_INT 0
50409: PPUSH
50410: PPUSH
50411: PPUSH
// if btype = b_depot then
50412: LD_VAR 0 2
50416: PUSH
50417: LD_INT 0
50419: EQUAL
50420: IFFALSE 50432
// begin result := true ;
50422: LD_ADDR_VAR 0 3
50426: PUSH
50427: LD_INT 1
50429: ST_TO_ADDR
// exit ;
50430: GO 50548
// end ; pom := GetBase ( depot ) ;
50432: LD_ADDR_VAR 0 4
50436: PUSH
50437: LD_VAR 0 1
50441: PPUSH
50442: CALL_OW 274
50446: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
50447: LD_ADDR_VAR 0 5
50451: PUSH
50452: LD_VAR 0 2
50456: PPUSH
50457: LD_VAR 0 1
50461: PPUSH
50462: CALL_OW 248
50466: PPUSH
50467: CALL_OW 450
50471: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
50472: LD_ADDR_VAR 0 3
50476: PUSH
50477: LD_VAR 0 4
50481: PPUSH
50482: LD_INT 1
50484: PPUSH
50485: CALL_OW 275
50489: PUSH
50490: LD_VAR 0 5
50494: PUSH
50495: LD_INT 1
50497: ARRAY
50498: GREATEREQUAL
50499: PUSH
50500: LD_VAR 0 4
50504: PPUSH
50505: LD_INT 2
50507: PPUSH
50508: CALL_OW 275
50512: PUSH
50513: LD_VAR 0 5
50517: PUSH
50518: LD_INT 2
50520: ARRAY
50521: GREATEREQUAL
50522: AND
50523: PUSH
50524: LD_VAR 0 4
50528: PPUSH
50529: LD_INT 3
50531: PPUSH
50532: CALL_OW 275
50536: PUSH
50537: LD_VAR 0 5
50541: PUSH
50542: LD_INT 3
50544: ARRAY
50545: GREATEREQUAL
50546: AND
50547: ST_TO_ADDR
// end ;
50548: LD_VAR 0 3
50552: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
50553: LD_INT 0
50555: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
50556: LD_VAR 0 1
50560: PPUSH
50561: LD_VAR 0 2
50565: PPUSH
50566: LD_INT 0
50568: PPUSH
50569: LD_INT 0
50571: PPUSH
50572: LD_INT 1
50574: PPUSH
50575: LD_INT 0
50577: PPUSH
50578: CALL_OW 587
// end ;
50582: LD_VAR 0 3
50586: RET
// export function CenterOnNow ( unit ) ; begin
50587: LD_INT 0
50589: PPUSH
// result := IsInUnit ( unit ) ;
50590: LD_ADDR_VAR 0 2
50594: PUSH
50595: LD_VAR 0 1
50599: PPUSH
50600: CALL_OW 310
50604: ST_TO_ADDR
// if not result then
50605: LD_VAR 0 2
50609: NOT
50610: IFFALSE 50622
// result := unit ;
50612: LD_ADDR_VAR 0 2
50616: PUSH
50617: LD_VAR 0 1
50621: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
50622: LD_VAR 0 1
50626: PPUSH
50627: CALL_OW 87
// end ;
50631: LD_VAR 0 2
50635: RET
// export function ComMoveHex ( unit , hex ) ; begin
50636: LD_INT 0
50638: PPUSH
// if not hex then
50639: LD_VAR 0 2
50643: NOT
50644: IFFALSE 50648
// exit ;
50646: GO 50701
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
50648: LD_VAR 0 2
50652: PUSH
50653: LD_INT 1
50655: ARRAY
50656: PPUSH
50657: LD_VAR 0 2
50661: PUSH
50662: LD_INT 2
50664: ARRAY
50665: PPUSH
50666: CALL_OW 428
50670: IFFALSE 50674
// exit ;
50672: GO 50701
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
50674: LD_VAR 0 1
50678: PPUSH
50679: LD_VAR 0 2
50683: PUSH
50684: LD_INT 1
50686: ARRAY
50687: PPUSH
50688: LD_VAR 0 2
50692: PUSH
50693: LD_INT 2
50695: ARRAY
50696: PPUSH
50697: CALL_OW 111
// end ;
50701: LD_VAR 0 3
50705: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
50706: LD_INT 0
50708: PPUSH
50709: PPUSH
50710: PPUSH
// if not unit or not enemy then
50711: LD_VAR 0 1
50715: NOT
50716: PUSH
50717: LD_VAR 0 2
50721: NOT
50722: OR
50723: IFFALSE 50727
// exit ;
50725: GO 50851
// x := GetX ( enemy ) ;
50727: LD_ADDR_VAR 0 4
50731: PUSH
50732: LD_VAR 0 2
50736: PPUSH
50737: CALL_OW 250
50741: ST_TO_ADDR
// y := GetY ( enemy ) ;
50742: LD_ADDR_VAR 0 5
50746: PUSH
50747: LD_VAR 0 2
50751: PPUSH
50752: CALL_OW 251
50756: ST_TO_ADDR
// if ValidHex ( x , y ) then
50757: LD_VAR 0 4
50761: PPUSH
50762: LD_VAR 0 5
50766: PPUSH
50767: CALL_OW 488
50771: IFFALSE 50851
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
50773: LD_VAR 0 2
50777: PPUSH
50778: CALL_OW 247
50782: PUSH
50783: LD_INT 3
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: IN
50793: PUSH
50794: LD_VAR 0 1
50798: PPUSH
50799: CALL_OW 255
50803: PPUSH
50804: LD_VAR 0 2
50808: PPUSH
50809: CALL_OW 292
50813: OR
50814: IFFALSE 50832
// ComAttackUnit ( unit , enemy ) else
50816: LD_VAR 0 1
50820: PPUSH
50821: LD_VAR 0 2
50825: PPUSH
50826: CALL_OW 115
50830: GO 50851
// ComAgressiveMove ( unit , x , y ) ;
50832: LD_VAR 0 1
50836: PPUSH
50837: LD_VAR 0 4
50841: PPUSH
50842: LD_VAR 0 5
50846: PPUSH
50847: CALL_OW 114
// end ;
50851: LD_VAR 0 3
50855: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
50856: LD_INT 0
50858: PPUSH
50859: PPUSH
50860: PPUSH
// list := AreaToList ( area , 0 ) ;
50861: LD_ADDR_VAR 0 5
50865: PUSH
50866: LD_VAR 0 1
50870: PPUSH
50871: LD_INT 0
50873: PPUSH
50874: CALL_OW 517
50878: ST_TO_ADDR
// if not list then
50879: LD_VAR 0 5
50883: NOT
50884: IFFALSE 50888
// exit ;
50886: GO 51018
// if all then
50888: LD_VAR 0 2
50892: IFFALSE 50980
// begin for i := 1 to list [ 1 ] do
50894: LD_ADDR_VAR 0 4
50898: PUSH
50899: DOUBLE
50900: LD_INT 1
50902: DEC
50903: ST_TO_ADDR
50904: LD_VAR 0 5
50908: PUSH
50909: LD_INT 1
50911: ARRAY
50912: PUSH
50913: FOR_TO
50914: IFFALSE 50976
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
50916: LD_ADDR_VAR 0 3
50920: PUSH
50921: LD_VAR 0 3
50925: PPUSH
50926: LD_VAR 0 3
50930: PUSH
50931: LD_INT 1
50933: PLUS
50934: PPUSH
50935: LD_VAR 0 5
50939: PUSH
50940: LD_INT 1
50942: ARRAY
50943: PUSH
50944: LD_VAR 0 4
50948: ARRAY
50949: PUSH
50950: LD_VAR 0 5
50954: PUSH
50955: LD_INT 2
50957: ARRAY
50958: PUSH
50959: LD_VAR 0 4
50963: ARRAY
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PPUSH
50969: CALL_OW 1
50973: ST_TO_ADDR
50974: GO 50913
50976: POP
50977: POP
// exit ;
50978: GO 51018
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
50980: LD_ADDR_VAR 0 3
50984: PUSH
50985: LD_VAR 0 5
50989: PUSH
50990: LD_INT 1
50992: ARRAY
50993: PUSH
50994: LD_INT 1
50996: ARRAY
50997: PUSH
50998: LD_VAR 0 5
51002: PUSH
51003: LD_INT 2
51005: ARRAY
51006: PUSH
51007: LD_INT 1
51009: ARRAY
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: ST_TO_ADDR
// end ;
51018: LD_VAR 0 3
51022: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
51023: LD_INT 0
51025: PPUSH
51026: PPUSH
// list := AreaToList ( area , 0 ) ;
51027: LD_ADDR_VAR 0 4
51031: PUSH
51032: LD_VAR 0 1
51036: PPUSH
51037: LD_INT 0
51039: PPUSH
51040: CALL_OW 517
51044: ST_TO_ADDR
// if not list then
51045: LD_VAR 0 4
51049: NOT
51050: IFFALSE 51054
// exit ;
51052: GO 51095
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
51054: LD_ADDR_VAR 0 3
51058: PUSH
51059: LD_VAR 0 4
51063: PUSH
51064: LD_INT 1
51066: ARRAY
51067: PUSH
51068: LD_INT 1
51070: ARRAY
51071: PUSH
51072: LD_VAR 0 4
51076: PUSH
51077: LD_INT 2
51079: ARRAY
51080: PUSH
51081: LD_INT 1
51083: ARRAY
51084: PUSH
51085: LD_VAR 0 2
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: ST_TO_ADDR
// end ;
51095: LD_VAR 0 3
51099: RET
// export function First ( array ) ; begin
51100: LD_INT 0
51102: PPUSH
// if not array then
51103: LD_VAR 0 1
51107: NOT
51108: IFFALSE 51112
// exit ;
51110: GO 51126
// result := array [ 1 ] ;
51112: LD_ADDR_VAR 0 2
51116: PUSH
51117: LD_VAR 0 1
51121: PUSH
51122: LD_INT 1
51124: ARRAY
51125: ST_TO_ADDR
// end ;
51126: LD_VAR 0 2
51130: RET
// export function Last ( array ) ; begin
51131: LD_INT 0
51133: PPUSH
// if not array then
51134: LD_VAR 0 1
51138: NOT
51139: IFFALSE 51143
// exit ;
51141: GO 51159
// result := array [ array ] ;
51143: LD_ADDR_VAR 0 2
51147: PUSH
51148: LD_VAR 0 1
51152: PUSH
51153: LD_VAR 0 1
51157: ARRAY
51158: ST_TO_ADDR
// end ;
51159: LD_VAR 0 2
51163: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
51164: LD_INT 0
51166: PPUSH
51167: PPUSH
// result := [ ] ;
51168: LD_ADDR_VAR 0 5
51172: PUSH
51173: EMPTY
51174: ST_TO_ADDR
// if not array then
51175: LD_VAR 0 1
51179: NOT
51180: IFFALSE 51184
// exit ;
51182: GO 51296
// for i := 1 to array do
51184: LD_ADDR_VAR 0 6
51188: PUSH
51189: DOUBLE
51190: LD_INT 1
51192: DEC
51193: ST_TO_ADDR
51194: LD_VAR 0 1
51198: PUSH
51199: FOR_TO
51200: IFFALSE 51294
// if array [ i ] [ index ] = value then
51202: LD_VAR 0 1
51206: PUSH
51207: LD_VAR 0 6
51211: ARRAY
51212: PUSH
51213: LD_VAR 0 2
51217: ARRAY
51218: PUSH
51219: LD_VAR 0 3
51223: EQUAL
51224: IFFALSE 51292
// begin if indexColumn then
51226: LD_VAR 0 4
51230: IFFALSE 51266
// result := Join ( result , array [ i ] [ indexColumn ] ) else
51232: LD_ADDR_VAR 0 5
51236: PUSH
51237: LD_VAR 0 5
51241: PPUSH
51242: LD_VAR 0 1
51246: PUSH
51247: LD_VAR 0 6
51251: ARRAY
51252: PUSH
51253: LD_VAR 0 4
51257: ARRAY
51258: PPUSH
51259: CALL 46484 0 2
51263: ST_TO_ADDR
51264: GO 51292
// result := Join ( result , array [ i ] ) ;
51266: LD_ADDR_VAR 0 5
51270: PUSH
51271: LD_VAR 0 5
51275: PPUSH
51276: LD_VAR 0 1
51280: PUSH
51281: LD_VAR 0 6
51285: ARRAY
51286: PPUSH
51287: CALL 46484 0 2
51291: ST_TO_ADDR
// end ;
51292: GO 51199
51294: POP
51295: POP
// end ;
51296: LD_VAR 0 5
51300: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
51301: LD_INT 0
51303: PPUSH
// if not vehicles or not parkingPoint then
51304: LD_VAR 0 1
51308: NOT
51309: PUSH
51310: LD_VAR 0 2
51314: NOT
51315: OR
51316: IFFALSE 51320
// exit ;
51318: GO 51418
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
51320: LD_ADDR_VAR 0 1
51324: PUSH
51325: LD_VAR 0 1
51329: PPUSH
51330: LD_INT 50
51332: PUSH
51333: EMPTY
51334: LIST
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: LD_INT 92
51341: PUSH
51342: LD_VAR 0 2
51346: PUSH
51347: LD_INT 1
51349: ARRAY
51350: PUSH
51351: LD_VAR 0 2
51355: PUSH
51356: LD_INT 2
51358: ARRAY
51359: PUSH
51360: LD_INT 8
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PPUSH
51377: CALL_OW 72
51381: ST_TO_ADDR
// if not vehicles then
51382: LD_VAR 0 1
51386: NOT
51387: IFFALSE 51391
// exit ;
51389: GO 51418
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
51391: LD_VAR 0 1
51395: PPUSH
51396: LD_VAR 0 2
51400: PUSH
51401: LD_INT 1
51403: ARRAY
51404: PPUSH
51405: LD_VAR 0 2
51409: PUSH
51410: LD_INT 2
51412: ARRAY
51413: PPUSH
51414: CALL_OW 111
// end ;
51418: LD_VAR 0 3
51422: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
51423: LD_INT 0
51425: PPUSH
51426: PPUSH
51427: PPUSH
// if not side or not area then
51428: LD_VAR 0 1
51432: NOT
51433: PUSH
51434: LD_VAR 0 2
51438: NOT
51439: OR
51440: IFFALSE 51444
// exit ;
51442: GO 51563
// tmp := AreaToList ( area , 0 ) ;
51444: LD_ADDR_VAR 0 5
51448: PUSH
51449: LD_VAR 0 2
51453: PPUSH
51454: LD_INT 0
51456: PPUSH
51457: CALL_OW 517
51461: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
51462: LD_ADDR_VAR 0 4
51466: PUSH
51467: DOUBLE
51468: LD_INT 1
51470: DEC
51471: ST_TO_ADDR
51472: LD_VAR 0 5
51476: PUSH
51477: LD_INT 1
51479: ARRAY
51480: PUSH
51481: FOR_TO
51482: IFFALSE 51561
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
51484: LD_VAR 0 5
51488: PUSH
51489: LD_INT 1
51491: ARRAY
51492: PUSH
51493: LD_VAR 0 4
51497: ARRAY
51498: PPUSH
51499: LD_VAR 0 5
51503: PUSH
51504: LD_INT 2
51506: ARRAY
51507: PUSH
51508: LD_VAR 0 4
51512: ARRAY
51513: PPUSH
51514: CALL_OW 351
51518: IFFALSE 51559
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
51520: LD_VAR 0 5
51524: PUSH
51525: LD_INT 1
51527: ARRAY
51528: PUSH
51529: LD_VAR 0 4
51533: ARRAY
51534: PPUSH
51535: LD_VAR 0 5
51539: PUSH
51540: LD_INT 2
51542: ARRAY
51543: PUSH
51544: LD_VAR 0 4
51548: ARRAY
51549: PPUSH
51550: LD_VAR 0 1
51554: PPUSH
51555: CALL_OW 244
// end ;
51559: GO 51481
51561: POP
51562: POP
// end ; end_of_file
51563: LD_VAR 0 3
51567: RET
// export globalGameSaveCounter ; every 0 0$1 do
51568: GO 51570
51570: DISABLE
// begin enable ;
51571: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
51572: LD_STRING updateTimer(
51574: PUSH
51575: LD_OWVAR 1
51579: STR
51580: PUSH
51581: LD_STRING );
51583: STR
51584: PPUSH
51585: CALL_OW 559
// end ;
51589: END
// every 0 0$1 do
51590: GO 51592
51592: DISABLE
// begin globalGameSaveCounter := 0 ;
51593: LD_ADDR_EXP 36
51597: PUSH
51598: LD_INT 0
51600: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
51601: LD_STRING setGameSaveCounter(0)
51603: PPUSH
51604: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
51608: LD_STRING initStreamRollete();
51610: PPUSH
51611: CALL_OW 559
// InitStreamMode ;
51615: CALL 52958 0 0
// DefineStreamItems ( false ) ;
51619: LD_INT 0
51621: PPUSH
51622: CALL 53422 0 1
// end ;
51626: END
// export function SOS_MapStart ( ) ; begin
51627: LD_INT 0
51629: PPUSH
// if streamModeActive then
51630: LD_EXP 37
51634: IFFALSE 51643
// DefineStreamItems ( true ) ;
51636: LD_INT 1
51638: PPUSH
51639: CALL 53422 0 1
// UpdateLuaVariables ( ) ;
51643: CALL 51660 0 0
// UpdateFactoryWaypoints ( ) ;
51647: CALL 66291 0 0
// UpdateWarehouseGatheringPoints ( ) ;
51651: CALL 66548 0 0
// end ;
51655: LD_VAR 0 1
51659: RET
// function UpdateLuaVariables ( ) ; begin
51660: LD_INT 0
51662: PPUSH
// if globalGameSaveCounter then
51663: LD_EXP 36
51667: IFFALSE 51701
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
51669: LD_ADDR_EXP 36
51673: PUSH
51674: LD_EXP 36
51678: PPUSH
51679: CALL 47845 0 1
51683: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51684: LD_STRING setGameSaveCounter(
51686: PUSH
51687: LD_EXP 36
51691: STR
51692: PUSH
51693: LD_STRING )
51695: STR
51696: PPUSH
51697: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
51701: LD_STRING setGameDifficulty(
51703: PUSH
51704: LD_OWVAR 67
51708: STR
51709: PUSH
51710: LD_STRING )
51712: STR
51713: PPUSH
51714: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
51718: LD_STRING displayDifficulty(
51720: PUSH
51721: LD_OWVAR 67
51725: STR
51726: PUSH
51727: LD_STRING )
51729: STR
51730: PPUSH
51731: CALL_OW 559
// end ;
51735: LD_VAR 0 1
51739: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
51740: LD_INT 0
51742: PPUSH
// if p2 = stream_mode then
51743: LD_VAR 0 2
51747: PUSH
51748: LD_INT 100
51750: EQUAL
51751: IFFALSE 52754
// begin if not StreamModeActive then
51753: LD_EXP 37
51757: NOT
51758: IFFALSE 51768
// StreamModeActive := true ;
51760: LD_ADDR_EXP 37
51764: PUSH
51765: LD_INT 1
51767: ST_TO_ADDR
// if p3 = 0 then
51768: LD_VAR 0 3
51772: PUSH
51773: LD_INT 0
51775: EQUAL
51776: IFFALSE 51782
// InitStreamMode ;
51778: CALL 52958 0 0
// if p3 = 1 then
51782: LD_VAR 0 3
51786: PUSH
51787: LD_INT 1
51789: EQUAL
51790: IFFALSE 51800
// sRocket := true ;
51792: LD_ADDR_EXP 42
51796: PUSH
51797: LD_INT 1
51799: ST_TO_ADDR
// if p3 = 2 then
51800: LD_VAR 0 3
51804: PUSH
51805: LD_INT 2
51807: EQUAL
51808: IFFALSE 51818
// sSpeed := true ;
51810: LD_ADDR_EXP 41
51814: PUSH
51815: LD_INT 1
51817: ST_TO_ADDR
// if p3 = 3 then
51818: LD_VAR 0 3
51822: PUSH
51823: LD_INT 3
51825: EQUAL
51826: IFFALSE 51836
// sEngine := true ;
51828: LD_ADDR_EXP 43
51832: PUSH
51833: LD_INT 1
51835: ST_TO_ADDR
// if p3 = 4 then
51836: LD_VAR 0 3
51840: PUSH
51841: LD_INT 4
51843: EQUAL
51844: IFFALSE 51854
// sSpec := true ;
51846: LD_ADDR_EXP 40
51850: PUSH
51851: LD_INT 1
51853: ST_TO_ADDR
// if p3 = 5 then
51854: LD_VAR 0 3
51858: PUSH
51859: LD_INT 5
51861: EQUAL
51862: IFFALSE 51872
// sLevel := true ;
51864: LD_ADDR_EXP 44
51868: PUSH
51869: LD_INT 1
51871: ST_TO_ADDR
// if p3 = 6 then
51872: LD_VAR 0 3
51876: PUSH
51877: LD_INT 6
51879: EQUAL
51880: IFFALSE 51890
// sArmoury := true ;
51882: LD_ADDR_EXP 45
51886: PUSH
51887: LD_INT 1
51889: ST_TO_ADDR
// if p3 = 7 then
51890: LD_VAR 0 3
51894: PUSH
51895: LD_INT 7
51897: EQUAL
51898: IFFALSE 51908
// sRadar := true ;
51900: LD_ADDR_EXP 46
51904: PUSH
51905: LD_INT 1
51907: ST_TO_ADDR
// if p3 = 8 then
51908: LD_VAR 0 3
51912: PUSH
51913: LD_INT 8
51915: EQUAL
51916: IFFALSE 51926
// sBunker := true ;
51918: LD_ADDR_EXP 47
51922: PUSH
51923: LD_INT 1
51925: ST_TO_ADDR
// if p3 = 9 then
51926: LD_VAR 0 3
51930: PUSH
51931: LD_INT 9
51933: EQUAL
51934: IFFALSE 51944
// sHack := true ;
51936: LD_ADDR_EXP 48
51940: PUSH
51941: LD_INT 1
51943: ST_TO_ADDR
// if p3 = 10 then
51944: LD_VAR 0 3
51948: PUSH
51949: LD_INT 10
51951: EQUAL
51952: IFFALSE 51962
// sFire := true ;
51954: LD_ADDR_EXP 49
51958: PUSH
51959: LD_INT 1
51961: ST_TO_ADDR
// if p3 = 11 then
51962: LD_VAR 0 3
51966: PUSH
51967: LD_INT 11
51969: EQUAL
51970: IFFALSE 51980
// sRefresh := true ;
51972: LD_ADDR_EXP 50
51976: PUSH
51977: LD_INT 1
51979: ST_TO_ADDR
// if p3 = 12 then
51980: LD_VAR 0 3
51984: PUSH
51985: LD_INT 12
51987: EQUAL
51988: IFFALSE 51998
// sExp := true ;
51990: LD_ADDR_EXP 51
51994: PUSH
51995: LD_INT 1
51997: ST_TO_ADDR
// if p3 = 13 then
51998: LD_VAR 0 3
52002: PUSH
52003: LD_INT 13
52005: EQUAL
52006: IFFALSE 52016
// sDepot := true ;
52008: LD_ADDR_EXP 52
52012: PUSH
52013: LD_INT 1
52015: ST_TO_ADDR
// if p3 = 14 then
52016: LD_VAR 0 3
52020: PUSH
52021: LD_INT 14
52023: EQUAL
52024: IFFALSE 52034
// sFlag := true ;
52026: LD_ADDR_EXP 53
52030: PUSH
52031: LD_INT 1
52033: ST_TO_ADDR
// if p3 = 15 then
52034: LD_VAR 0 3
52038: PUSH
52039: LD_INT 15
52041: EQUAL
52042: IFFALSE 52052
// sKamikadze := true ;
52044: LD_ADDR_EXP 61
52048: PUSH
52049: LD_INT 1
52051: ST_TO_ADDR
// if p3 = 16 then
52052: LD_VAR 0 3
52056: PUSH
52057: LD_INT 16
52059: EQUAL
52060: IFFALSE 52070
// sTroll := true ;
52062: LD_ADDR_EXP 62
52066: PUSH
52067: LD_INT 1
52069: ST_TO_ADDR
// if p3 = 17 then
52070: LD_VAR 0 3
52074: PUSH
52075: LD_INT 17
52077: EQUAL
52078: IFFALSE 52088
// sSlow := true ;
52080: LD_ADDR_EXP 63
52084: PUSH
52085: LD_INT 1
52087: ST_TO_ADDR
// if p3 = 18 then
52088: LD_VAR 0 3
52092: PUSH
52093: LD_INT 18
52095: EQUAL
52096: IFFALSE 52106
// sLack := true ;
52098: LD_ADDR_EXP 64
52102: PUSH
52103: LD_INT 1
52105: ST_TO_ADDR
// if p3 = 19 then
52106: LD_VAR 0 3
52110: PUSH
52111: LD_INT 19
52113: EQUAL
52114: IFFALSE 52124
// sTank := true ;
52116: LD_ADDR_EXP 66
52120: PUSH
52121: LD_INT 1
52123: ST_TO_ADDR
// if p3 = 20 then
52124: LD_VAR 0 3
52128: PUSH
52129: LD_INT 20
52131: EQUAL
52132: IFFALSE 52142
// sRemote := true ;
52134: LD_ADDR_EXP 67
52138: PUSH
52139: LD_INT 1
52141: ST_TO_ADDR
// if p3 = 21 then
52142: LD_VAR 0 3
52146: PUSH
52147: LD_INT 21
52149: EQUAL
52150: IFFALSE 52160
// sPowell := true ;
52152: LD_ADDR_EXP 68
52156: PUSH
52157: LD_INT 1
52159: ST_TO_ADDR
// if p3 = 22 then
52160: LD_VAR 0 3
52164: PUSH
52165: LD_INT 22
52167: EQUAL
52168: IFFALSE 52178
// sTeleport := true ;
52170: LD_ADDR_EXP 71
52174: PUSH
52175: LD_INT 1
52177: ST_TO_ADDR
// if p3 = 23 then
52178: LD_VAR 0 3
52182: PUSH
52183: LD_INT 23
52185: EQUAL
52186: IFFALSE 52196
// sOilTower := true ;
52188: LD_ADDR_EXP 73
52192: PUSH
52193: LD_INT 1
52195: ST_TO_ADDR
// if p3 = 24 then
52196: LD_VAR 0 3
52200: PUSH
52201: LD_INT 24
52203: EQUAL
52204: IFFALSE 52214
// sShovel := true ;
52206: LD_ADDR_EXP 74
52210: PUSH
52211: LD_INT 1
52213: ST_TO_ADDR
// if p3 = 25 then
52214: LD_VAR 0 3
52218: PUSH
52219: LD_INT 25
52221: EQUAL
52222: IFFALSE 52232
// sSheik := true ;
52224: LD_ADDR_EXP 75
52228: PUSH
52229: LD_INT 1
52231: ST_TO_ADDR
// if p3 = 26 then
52232: LD_VAR 0 3
52236: PUSH
52237: LD_INT 26
52239: EQUAL
52240: IFFALSE 52250
// sEarthquake := true ;
52242: LD_ADDR_EXP 77
52246: PUSH
52247: LD_INT 1
52249: ST_TO_ADDR
// if p3 = 27 then
52250: LD_VAR 0 3
52254: PUSH
52255: LD_INT 27
52257: EQUAL
52258: IFFALSE 52268
// sAI := true ;
52260: LD_ADDR_EXP 78
52264: PUSH
52265: LD_INT 1
52267: ST_TO_ADDR
// if p3 = 28 then
52268: LD_VAR 0 3
52272: PUSH
52273: LD_INT 28
52275: EQUAL
52276: IFFALSE 52286
// sCargo := true ;
52278: LD_ADDR_EXP 81
52282: PUSH
52283: LD_INT 1
52285: ST_TO_ADDR
// if p3 = 29 then
52286: LD_VAR 0 3
52290: PUSH
52291: LD_INT 29
52293: EQUAL
52294: IFFALSE 52304
// sDLaser := true ;
52296: LD_ADDR_EXP 82
52300: PUSH
52301: LD_INT 1
52303: ST_TO_ADDR
// if p3 = 30 then
52304: LD_VAR 0 3
52308: PUSH
52309: LD_INT 30
52311: EQUAL
52312: IFFALSE 52322
// sExchange := true ;
52314: LD_ADDR_EXP 83
52318: PUSH
52319: LD_INT 1
52321: ST_TO_ADDR
// if p3 = 31 then
52322: LD_VAR 0 3
52326: PUSH
52327: LD_INT 31
52329: EQUAL
52330: IFFALSE 52340
// sFac := true ;
52332: LD_ADDR_EXP 84
52336: PUSH
52337: LD_INT 1
52339: ST_TO_ADDR
// if p3 = 32 then
52340: LD_VAR 0 3
52344: PUSH
52345: LD_INT 32
52347: EQUAL
52348: IFFALSE 52358
// sPower := true ;
52350: LD_ADDR_EXP 85
52354: PUSH
52355: LD_INT 1
52357: ST_TO_ADDR
// if p3 = 33 then
52358: LD_VAR 0 3
52362: PUSH
52363: LD_INT 33
52365: EQUAL
52366: IFFALSE 52376
// sRandom := true ;
52368: LD_ADDR_EXP 86
52372: PUSH
52373: LD_INT 1
52375: ST_TO_ADDR
// if p3 = 34 then
52376: LD_VAR 0 3
52380: PUSH
52381: LD_INT 34
52383: EQUAL
52384: IFFALSE 52394
// sShield := true ;
52386: LD_ADDR_EXP 87
52390: PUSH
52391: LD_INT 1
52393: ST_TO_ADDR
// if p3 = 35 then
52394: LD_VAR 0 3
52398: PUSH
52399: LD_INT 35
52401: EQUAL
52402: IFFALSE 52412
// sTime := true ;
52404: LD_ADDR_EXP 88
52408: PUSH
52409: LD_INT 1
52411: ST_TO_ADDR
// if p3 = 36 then
52412: LD_VAR 0 3
52416: PUSH
52417: LD_INT 36
52419: EQUAL
52420: IFFALSE 52430
// sTools := true ;
52422: LD_ADDR_EXP 89
52426: PUSH
52427: LD_INT 1
52429: ST_TO_ADDR
// if p3 = 101 then
52430: LD_VAR 0 3
52434: PUSH
52435: LD_INT 101
52437: EQUAL
52438: IFFALSE 52448
// sSold := true ;
52440: LD_ADDR_EXP 54
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// if p3 = 102 then
52448: LD_VAR 0 3
52452: PUSH
52453: LD_INT 102
52455: EQUAL
52456: IFFALSE 52466
// sDiff := true ;
52458: LD_ADDR_EXP 55
52462: PUSH
52463: LD_INT 1
52465: ST_TO_ADDR
// if p3 = 103 then
52466: LD_VAR 0 3
52470: PUSH
52471: LD_INT 103
52473: EQUAL
52474: IFFALSE 52484
// sFog := true ;
52476: LD_ADDR_EXP 58
52480: PUSH
52481: LD_INT 1
52483: ST_TO_ADDR
// if p3 = 104 then
52484: LD_VAR 0 3
52488: PUSH
52489: LD_INT 104
52491: EQUAL
52492: IFFALSE 52502
// sReset := true ;
52494: LD_ADDR_EXP 59
52498: PUSH
52499: LD_INT 1
52501: ST_TO_ADDR
// if p3 = 105 then
52502: LD_VAR 0 3
52506: PUSH
52507: LD_INT 105
52509: EQUAL
52510: IFFALSE 52520
// sSun := true ;
52512: LD_ADDR_EXP 60
52516: PUSH
52517: LD_INT 1
52519: ST_TO_ADDR
// if p3 = 106 then
52520: LD_VAR 0 3
52524: PUSH
52525: LD_INT 106
52527: EQUAL
52528: IFFALSE 52538
// sTiger := true ;
52530: LD_ADDR_EXP 56
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// if p3 = 107 then
52538: LD_VAR 0 3
52542: PUSH
52543: LD_INT 107
52545: EQUAL
52546: IFFALSE 52556
// sBomb := true ;
52548: LD_ADDR_EXP 57
52552: PUSH
52553: LD_INT 1
52555: ST_TO_ADDR
// if p3 = 108 then
52556: LD_VAR 0 3
52560: PUSH
52561: LD_INT 108
52563: EQUAL
52564: IFFALSE 52574
// sWound := true ;
52566: LD_ADDR_EXP 65
52570: PUSH
52571: LD_INT 1
52573: ST_TO_ADDR
// if p3 = 109 then
52574: LD_VAR 0 3
52578: PUSH
52579: LD_INT 109
52581: EQUAL
52582: IFFALSE 52592
// sBetray := true ;
52584: LD_ADDR_EXP 69
52588: PUSH
52589: LD_INT 1
52591: ST_TO_ADDR
// if p3 = 110 then
52592: LD_VAR 0 3
52596: PUSH
52597: LD_INT 110
52599: EQUAL
52600: IFFALSE 52610
// sContamin := true ;
52602: LD_ADDR_EXP 70
52606: PUSH
52607: LD_INT 1
52609: ST_TO_ADDR
// if p3 = 111 then
52610: LD_VAR 0 3
52614: PUSH
52615: LD_INT 111
52617: EQUAL
52618: IFFALSE 52628
// sOil := true ;
52620: LD_ADDR_EXP 72
52624: PUSH
52625: LD_INT 1
52627: ST_TO_ADDR
// if p3 = 112 then
52628: LD_VAR 0 3
52632: PUSH
52633: LD_INT 112
52635: EQUAL
52636: IFFALSE 52646
// sStu := true ;
52638: LD_ADDR_EXP 76
52642: PUSH
52643: LD_INT 1
52645: ST_TO_ADDR
// if p3 = 113 then
52646: LD_VAR 0 3
52650: PUSH
52651: LD_INT 113
52653: EQUAL
52654: IFFALSE 52664
// sBazooka := true ;
52656: LD_ADDR_EXP 79
52660: PUSH
52661: LD_INT 1
52663: ST_TO_ADDR
// if p3 = 114 then
52664: LD_VAR 0 3
52668: PUSH
52669: LD_INT 114
52671: EQUAL
52672: IFFALSE 52682
// sMortar := true ;
52674: LD_ADDR_EXP 80
52678: PUSH
52679: LD_INT 1
52681: ST_TO_ADDR
// if p3 = 115 then
52682: LD_VAR 0 3
52686: PUSH
52687: LD_INT 115
52689: EQUAL
52690: IFFALSE 52700
// sRanger := true ;
52692: LD_ADDR_EXP 90
52696: PUSH
52697: LD_INT 1
52699: ST_TO_ADDR
// if p3 = 116 then
52700: LD_VAR 0 3
52704: PUSH
52705: LD_INT 116
52707: EQUAL
52708: IFFALSE 52718
// sComputer := true ;
52710: LD_ADDR_EXP 91
52714: PUSH
52715: LD_INT 1
52717: ST_TO_ADDR
// if p3 = 117 then
52718: LD_VAR 0 3
52722: PUSH
52723: LD_INT 117
52725: EQUAL
52726: IFFALSE 52736
// s30 := true ;
52728: LD_ADDR_EXP 92
52732: PUSH
52733: LD_INT 1
52735: ST_TO_ADDR
// if p3 = 118 then
52736: LD_VAR 0 3
52740: PUSH
52741: LD_INT 118
52743: EQUAL
52744: IFFALSE 52754
// s60 := true ;
52746: LD_ADDR_EXP 93
52750: PUSH
52751: LD_INT 1
52753: ST_TO_ADDR
// end ; if p2 = hack_mode then
52754: LD_VAR 0 2
52758: PUSH
52759: LD_INT 101
52761: EQUAL
52762: IFFALSE 52890
// begin case p3 of 1 :
52764: LD_VAR 0 3
52768: PUSH
52769: LD_INT 1
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52777
52775: GO 52784
52777: POP
// hHackUnlimitedResources ; 2 :
52778: CALL 65037 0 0
52782: GO 52890
52784: LD_INT 2
52786: DOUBLE
52787: EQUAL
52788: IFTRUE 52792
52790: GO 52799
52792: POP
// hHackSetLevel10 ; 3 :
52793: CALL 65170 0 0
52797: GO 52890
52799: LD_INT 3
52801: DOUBLE
52802: EQUAL
52803: IFTRUE 52807
52805: GO 52814
52807: POP
// hHackSetLevel10YourUnits ; 4 :
52808: CALL 65255 0 0
52812: GO 52890
52814: LD_INT 4
52816: DOUBLE
52817: EQUAL
52818: IFTRUE 52822
52820: GO 52829
52822: POP
// hHackInvincible ; 5 :
52823: CALL 65703 0 0
52827: GO 52890
52829: LD_INT 5
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52837
52835: GO 52844
52837: POP
// hHackInvisible ; 6 :
52838: CALL 65814 0 0
52842: GO 52890
52844: LD_INT 6
52846: DOUBLE
52847: EQUAL
52848: IFTRUE 52852
52850: GO 52859
52852: POP
// hHackChangeYourSide ; 7 :
52853: CALL 65871 0 0
52857: GO 52890
52859: LD_INT 7
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52867
52865: GO 52874
52867: POP
// hHackChangeUnitSide ; 8 :
52868: CALL 65913 0 0
52872: GO 52890
52874: LD_INT 8
52876: DOUBLE
52877: EQUAL
52878: IFTRUE 52882
52880: GO 52889
52882: POP
// hHackFog ; end ;
52883: CALL 66014 0 0
52887: GO 52890
52889: POP
// end ; if p2 = game_save_mode then
52890: LD_VAR 0 2
52894: PUSH
52895: LD_INT 102
52897: EQUAL
52898: IFFALSE 52953
// begin if p3 = 1 then
52900: LD_VAR 0 3
52904: PUSH
52905: LD_INT 1
52907: EQUAL
52908: IFFALSE 52920
// globalGameSaveCounter := p4 ;
52910: LD_ADDR_EXP 36
52914: PUSH
52915: LD_VAR 0 4
52919: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
52920: LD_VAR 0 3
52924: PUSH
52925: LD_INT 2
52927: EQUAL
52928: PUSH
52929: LD_EXP 36
52933: AND
52934: IFFALSE 52953
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
52936: LD_STRING setGameSaveCounter(
52938: PUSH
52939: LD_EXP 36
52943: STR
52944: PUSH
52945: LD_STRING )
52947: STR
52948: PPUSH
52949: CALL_OW 559
// end ; end ;
52953: LD_VAR 0 7
52957: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
52958: LD_INT 0
52960: PPUSH
// streamModeActive := false ;
52961: LD_ADDR_EXP 37
52965: PUSH
52966: LD_INT 0
52968: ST_TO_ADDR
// normalCounter := 36 ;
52969: LD_ADDR_EXP 38
52973: PUSH
52974: LD_INT 36
52976: ST_TO_ADDR
// hardcoreCounter := 18 ;
52977: LD_ADDR_EXP 39
52981: PUSH
52982: LD_INT 18
52984: ST_TO_ADDR
// sRocket := false ;
52985: LD_ADDR_EXP 42
52989: PUSH
52990: LD_INT 0
52992: ST_TO_ADDR
// sSpeed := false ;
52993: LD_ADDR_EXP 41
52997: PUSH
52998: LD_INT 0
53000: ST_TO_ADDR
// sEngine := false ;
53001: LD_ADDR_EXP 43
53005: PUSH
53006: LD_INT 0
53008: ST_TO_ADDR
// sSpec := false ;
53009: LD_ADDR_EXP 40
53013: PUSH
53014: LD_INT 0
53016: ST_TO_ADDR
// sLevel := false ;
53017: LD_ADDR_EXP 44
53021: PUSH
53022: LD_INT 0
53024: ST_TO_ADDR
// sArmoury := false ;
53025: LD_ADDR_EXP 45
53029: PUSH
53030: LD_INT 0
53032: ST_TO_ADDR
// sRadar := false ;
53033: LD_ADDR_EXP 46
53037: PUSH
53038: LD_INT 0
53040: ST_TO_ADDR
// sBunker := false ;
53041: LD_ADDR_EXP 47
53045: PUSH
53046: LD_INT 0
53048: ST_TO_ADDR
// sHack := false ;
53049: LD_ADDR_EXP 48
53053: PUSH
53054: LD_INT 0
53056: ST_TO_ADDR
// sFire := false ;
53057: LD_ADDR_EXP 49
53061: PUSH
53062: LD_INT 0
53064: ST_TO_ADDR
// sRefresh := false ;
53065: LD_ADDR_EXP 50
53069: PUSH
53070: LD_INT 0
53072: ST_TO_ADDR
// sExp := false ;
53073: LD_ADDR_EXP 51
53077: PUSH
53078: LD_INT 0
53080: ST_TO_ADDR
// sDepot := false ;
53081: LD_ADDR_EXP 52
53085: PUSH
53086: LD_INT 0
53088: ST_TO_ADDR
// sFlag := false ;
53089: LD_ADDR_EXP 53
53093: PUSH
53094: LD_INT 0
53096: ST_TO_ADDR
// sKamikadze := false ;
53097: LD_ADDR_EXP 61
53101: PUSH
53102: LD_INT 0
53104: ST_TO_ADDR
// sTroll := false ;
53105: LD_ADDR_EXP 62
53109: PUSH
53110: LD_INT 0
53112: ST_TO_ADDR
// sSlow := false ;
53113: LD_ADDR_EXP 63
53117: PUSH
53118: LD_INT 0
53120: ST_TO_ADDR
// sLack := false ;
53121: LD_ADDR_EXP 64
53125: PUSH
53126: LD_INT 0
53128: ST_TO_ADDR
// sTank := false ;
53129: LD_ADDR_EXP 66
53133: PUSH
53134: LD_INT 0
53136: ST_TO_ADDR
// sRemote := false ;
53137: LD_ADDR_EXP 67
53141: PUSH
53142: LD_INT 0
53144: ST_TO_ADDR
// sPowell := false ;
53145: LD_ADDR_EXP 68
53149: PUSH
53150: LD_INT 0
53152: ST_TO_ADDR
// sTeleport := false ;
53153: LD_ADDR_EXP 71
53157: PUSH
53158: LD_INT 0
53160: ST_TO_ADDR
// sOilTower := false ;
53161: LD_ADDR_EXP 73
53165: PUSH
53166: LD_INT 0
53168: ST_TO_ADDR
// sShovel := false ;
53169: LD_ADDR_EXP 74
53173: PUSH
53174: LD_INT 0
53176: ST_TO_ADDR
// sSheik := false ;
53177: LD_ADDR_EXP 75
53181: PUSH
53182: LD_INT 0
53184: ST_TO_ADDR
// sEarthquake := false ;
53185: LD_ADDR_EXP 77
53189: PUSH
53190: LD_INT 0
53192: ST_TO_ADDR
// sAI := false ;
53193: LD_ADDR_EXP 78
53197: PUSH
53198: LD_INT 0
53200: ST_TO_ADDR
// sCargo := false ;
53201: LD_ADDR_EXP 81
53205: PUSH
53206: LD_INT 0
53208: ST_TO_ADDR
// sDLaser := false ;
53209: LD_ADDR_EXP 82
53213: PUSH
53214: LD_INT 0
53216: ST_TO_ADDR
// sExchange := false ;
53217: LD_ADDR_EXP 83
53221: PUSH
53222: LD_INT 0
53224: ST_TO_ADDR
// sFac := false ;
53225: LD_ADDR_EXP 84
53229: PUSH
53230: LD_INT 0
53232: ST_TO_ADDR
// sPower := false ;
53233: LD_ADDR_EXP 85
53237: PUSH
53238: LD_INT 0
53240: ST_TO_ADDR
// sRandom := false ;
53241: LD_ADDR_EXP 86
53245: PUSH
53246: LD_INT 0
53248: ST_TO_ADDR
// sShield := false ;
53249: LD_ADDR_EXP 87
53253: PUSH
53254: LD_INT 0
53256: ST_TO_ADDR
// sTime := false ;
53257: LD_ADDR_EXP 88
53261: PUSH
53262: LD_INT 0
53264: ST_TO_ADDR
// sTools := false ;
53265: LD_ADDR_EXP 89
53269: PUSH
53270: LD_INT 0
53272: ST_TO_ADDR
// sSold := false ;
53273: LD_ADDR_EXP 54
53277: PUSH
53278: LD_INT 0
53280: ST_TO_ADDR
// sDiff := false ;
53281: LD_ADDR_EXP 55
53285: PUSH
53286: LD_INT 0
53288: ST_TO_ADDR
// sFog := false ;
53289: LD_ADDR_EXP 58
53293: PUSH
53294: LD_INT 0
53296: ST_TO_ADDR
// sReset := false ;
53297: LD_ADDR_EXP 59
53301: PUSH
53302: LD_INT 0
53304: ST_TO_ADDR
// sSun := false ;
53305: LD_ADDR_EXP 60
53309: PUSH
53310: LD_INT 0
53312: ST_TO_ADDR
// sTiger := false ;
53313: LD_ADDR_EXP 56
53317: PUSH
53318: LD_INT 0
53320: ST_TO_ADDR
// sBomb := false ;
53321: LD_ADDR_EXP 57
53325: PUSH
53326: LD_INT 0
53328: ST_TO_ADDR
// sWound := false ;
53329: LD_ADDR_EXP 65
53333: PUSH
53334: LD_INT 0
53336: ST_TO_ADDR
// sBetray := false ;
53337: LD_ADDR_EXP 69
53341: PUSH
53342: LD_INT 0
53344: ST_TO_ADDR
// sContamin := false ;
53345: LD_ADDR_EXP 70
53349: PUSH
53350: LD_INT 0
53352: ST_TO_ADDR
// sOil := false ;
53353: LD_ADDR_EXP 72
53357: PUSH
53358: LD_INT 0
53360: ST_TO_ADDR
// sStu := false ;
53361: LD_ADDR_EXP 76
53365: PUSH
53366: LD_INT 0
53368: ST_TO_ADDR
// sBazooka := false ;
53369: LD_ADDR_EXP 79
53373: PUSH
53374: LD_INT 0
53376: ST_TO_ADDR
// sMortar := false ;
53377: LD_ADDR_EXP 80
53381: PUSH
53382: LD_INT 0
53384: ST_TO_ADDR
// sRanger := false ;
53385: LD_ADDR_EXP 90
53389: PUSH
53390: LD_INT 0
53392: ST_TO_ADDR
// sComputer := false ;
53393: LD_ADDR_EXP 91
53397: PUSH
53398: LD_INT 0
53400: ST_TO_ADDR
// s30 := false ;
53401: LD_ADDR_EXP 92
53405: PUSH
53406: LD_INT 0
53408: ST_TO_ADDR
// s60 := false ;
53409: LD_ADDR_EXP 93
53413: PUSH
53414: LD_INT 0
53416: ST_TO_ADDR
// end ;
53417: LD_VAR 0 1
53421: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
53422: LD_INT 0
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
53430: PPUSH
// result := [ ] ;
53431: LD_ADDR_VAR 0 2
53435: PUSH
53436: EMPTY
53437: ST_TO_ADDR
// if campaign_id = 1 then
53438: LD_OWVAR 69
53442: PUSH
53443: LD_INT 1
53445: EQUAL
53446: IFFALSE 56612
// begin case mission_number of 1 :
53448: LD_OWVAR 70
53452: PUSH
53453: LD_INT 1
53455: DOUBLE
53456: EQUAL
53457: IFTRUE 53461
53459: GO 53537
53461: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
53462: LD_ADDR_VAR 0 2
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 4
53472: PUSH
53473: LD_INT 11
53475: PUSH
53476: LD_INT 12
53478: PUSH
53479: LD_INT 15
53481: PUSH
53482: LD_INT 16
53484: PUSH
53485: LD_INT 22
53487: PUSH
53488: LD_INT 23
53490: PUSH
53491: LD_INT 26
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 101
53507: PUSH
53508: LD_INT 102
53510: PUSH
53511: LD_INT 106
53513: PUSH
53514: LD_INT 116
53516: PUSH
53517: LD_INT 117
53519: PUSH
53520: LD_INT 118
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: ST_TO_ADDR
53535: GO 56610
53537: LD_INT 2
53539: DOUBLE
53540: EQUAL
53541: IFTRUE 53545
53543: GO 53629
53545: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
53546: LD_ADDR_VAR 0 2
53550: PUSH
53551: LD_INT 2
53553: PUSH
53554: LD_INT 4
53556: PUSH
53557: LD_INT 11
53559: PUSH
53560: LD_INT 12
53562: PUSH
53563: LD_INT 15
53565: PUSH
53566: LD_INT 16
53568: PUSH
53569: LD_INT 22
53571: PUSH
53572: LD_INT 23
53574: PUSH
53575: LD_INT 26
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 101
53591: PUSH
53592: LD_INT 102
53594: PUSH
53595: LD_INT 105
53597: PUSH
53598: LD_INT 106
53600: PUSH
53601: LD_INT 108
53603: PUSH
53604: LD_INT 116
53606: PUSH
53607: LD_INT 117
53609: PUSH
53610: LD_INT 118
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: ST_TO_ADDR
53627: GO 56610
53629: LD_INT 3
53631: DOUBLE
53632: EQUAL
53633: IFTRUE 53637
53635: GO 53725
53637: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
53638: LD_ADDR_VAR 0 2
53642: PUSH
53643: LD_INT 2
53645: PUSH
53646: LD_INT 4
53648: PUSH
53649: LD_INT 5
53651: PUSH
53652: LD_INT 11
53654: PUSH
53655: LD_INT 12
53657: PUSH
53658: LD_INT 15
53660: PUSH
53661: LD_INT 16
53663: PUSH
53664: LD_INT 22
53666: PUSH
53667: LD_INT 26
53669: PUSH
53670: LD_INT 36
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 101
53687: PUSH
53688: LD_INT 102
53690: PUSH
53691: LD_INT 105
53693: PUSH
53694: LD_INT 106
53696: PUSH
53697: LD_INT 108
53699: PUSH
53700: LD_INT 116
53702: PUSH
53703: LD_INT 117
53705: PUSH
53706: LD_INT 118
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: ST_TO_ADDR
53723: GO 56610
53725: LD_INT 4
53727: DOUBLE
53728: EQUAL
53729: IFTRUE 53733
53731: GO 53829
53733: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
53734: LD_ADDR_VAR 0 2
53738: PUSH
53739: LD_INT 2
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: LD_INT 5
53747: PUSH
53748: LD_INT 8
53750: PUSH
53751: LD_INT 11
53753: PUSH
53754: LD_INT 12
53756: PUSH
53757: LD_INT 15
53759: PUSH
53760: LD_INT 16
53762: PUSH
53763: LD_INT 22
53765: PUSH
53766: LD_INT 23
53768: PUSH
53769: LD_INT 26
53771: PUSH
53772: LD_INT 36
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 101
53791: PUSH
53792: LD_INT 102
53794: PUSH
53795: LD_INT 105
53797: PUSH
53798: LD_INT 106
53800: PUSH
53801: LD_INT 108
53803: PUSH
53804: LD_INT 116
53806: PUSH
53807: LD_INT 117
53809: PUSH
53810: LD_INT 118
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: ST_TO_ADDR
53827: GO 56610
53829: LD_INT 5
53831: DOUBLE
53832: EQUAL
53833: IFTRUE 53837
53835: GO 53949
53837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
53838: LD_ADDR_VAR 0 2
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 4
53848: PUSH
53849: LD_INT 5
53851: PUSH
53852: LD_INT 6
53854: PUSH
53855: LD_INT 8
53857: PUSH
53858: LD_INT 11
53860: PUSH
53861: LD_INT 12
53863: PUSH
53864: LD_INT 15
53866: PUSH
53867: LD_INT 16
53869: PUSH
53870: LD_INT 22
53872: PUSH
53873: LD_INT 23
53875: PUSH
53876: LD_INT 25
53878: PUSH
53879: LD_INT 26
53881: PUSH
53882: LD_INT 36
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 101
53903: PUSH
53904: LD_INT 102
53906: PUSH
53907: LD_INT 105
53909: PUSH
53910: LD_INT 106
53912: PUSH
53913: LD_INT 108
53915: PUSH
53916: LD_INT 109
53918: PUSH
53919: LD_INT 112
53921: PUSH
53922: LD_INT 116
53924: PUSH
53925: LD_INT 117
53927: PUSH
53928: LD_INT 118
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: ST_TO_ADDR
53947: GO 56610
53949: LD_INT 6
53951: DOUBLE
53952: EQUAL
53953: IFTRUE 53957
53955: GO 54089
53957: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
53958: LD_ADDR_VAR 0 2
53962: PUSH
53963: LD_INT 2
53965: PUSH
53966: LD_INT 4
53968: PUSH
53969: LD_INT 5
53971: PUSH
53972: LD_INT 6
53974: PUSH
53975: LD_INT 8
53977: PUSH
53978: LD_INT 11
53980: PUSH
53981: LD_INT 12
53983: PUSH
53984: LD_INT 15
53986: PUSH
53987: LD_INT 16
53989: PUSH
53990: LD_INT 20
53992: PUSH
53993: LD_INT 21
53995: PUSH
53996: LD_INT 22
53998: PUSH
53999: LD_INT 23
54001: PUSH
54002: LD_INT 25
54004: PUSH
54005: LD_INT 26
54007: PUSH
54008: LD_INT 30
54010: PUSH
54011: LD_INT 31
54013: PUSH
54014: LD_INT 32
54016: PUSH
54017: LD_INT 36
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 101
54043: PUSH
54044: LD_INT 102
54046: PUSH
54047: LD_INT 105
54049: PUSH
54050: LD_INT 106
54052: PUSH
54053: LD_INT 108
54055: PUSH
54056: LD_INT 109
54058: PUSH
54059: LD_INT 112
54061: PUSH
54062: LD_INT 116
54064: PUSH
54065: LD_INT 117
54067: PUSH
54068: LD_INT 118
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: ST_TO_ADDR
54087: GO 56610
54089: LD_INT 7
54091: DOUBLE
54092: EQUAL
54093: IFTRUE 54097
54095: GO 54209
54097: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
54098: LD_ADDR_VAR 0 2
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 4
54108: PUSH
54109: LD_INT 5
54111: PUSH
54112: LD_INT 7
54114: PUSH
54115: LD_INT 11
54117: PUSH
54118: LD_INT 12
54120: PUSH
54121: LD_INT 15
54123: PUSH
54124: LD_INT 16
54126: PUSH
54127: LD_INT 20
54129: PUSH
54130: LD_INT 21
54132: PUSH
54133: LD_INT 22
54135: PUSH
54136: LD_INT 23
54138: PUSH
54139: LD_INT 25
54141: PUSH
54142: LD_INT 26
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 101
54163: PUSH
54164: LD_INT 102
54166: PUSH
54167: LD_INT 103
54169: PUSH
54170: LD_INT 105
54172: PUSH
54173: LD_INT 106
54175: PUSH
54176: LD_INT 108
54178: PUSH
54179: LD_INT 112
54181: PUSH
54182: LD_INT 116
54184: PUSH
54185: LD_INT 117
54187: PUSH
54188: LD_INT 118
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: ST_TO_ADDR
54207: GO 56610
54209: LD_INT 8
54211: DOUBLE
54212: EQUAL
54213: IFTRUE 54217
54215: GO 54357
54217: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
54218: LD_ADDR_VAR 0 2
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: LD_INT 5
54231: PUSH
54232: LD_INT 6
54234: PUSH
54235: LD_INT 7
54237: PUSH
54238: LD_INT 8
54240: PUSH
54241: LD_INT 11
54243: PUSH
54244: LD_INT 12
54246: PUSH
54247: LD_INT 15
54249: PUSH
54250: LD_INT 16
54252: PUSH
54253: LD_INT 20
54255: PUSH
54256: LD_INT 21
54258: PUSH
54259: LD_INT 22
54261: PUSH
54262: LD_INT 23
54264: PUSH
54265: LD_INT 25
54267: PUSH
54268: LD_INT 26
54270: PUSH
54271: LD_INT 30
54273: PUSH
54274: LD_INT 31
54276: PUSH
54277: LD_INT 32
54279: PUSH
54280: LD_INT 36
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 101
54307: PUSH
54308: LD_INT 102
54310: PUSH
54311: LD_INT 103
54313: PUSH
54314: LD_INT 105
54316: PUSH
54317: LD_INT 106
54319: PUSH
54320: LD_INT 108
54322: PUSH
54323: LD_INT 109
54325: PUSH
54326: LD_INT 112
54328: PUSH
54329: LD_INT 116
54331: PUSH
54332: LD_INT 117
54334: PUSH
54335: LD_INT 118
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: ST_TO_ADDR
54355: GO 56610
54357: LD_INT 9
54359: DOUBLE
54360: EQUAL
54361: IFTRUE 54365
54363: GO 54513
54365: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
54366: LD_ADDR_VAR 0 2
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 4
54376: PUSH
54377: LD_INT 5
54379: PUSH
54380: LD_INT 6
54382: PUSH
54383: LD_INT 7
54385: PUSH
54386: LD_INT 8
54388: PUSH
54389: LD_INT 11
54391: PUSH
54392: LD_INT 12
54394: PUSH
54395: LD_INT 15
54397: PUSH
54398: LD_INT 16
54400: PUSH
54401: LD_INT 20
54403: PUSH
54404: LD_INT 21
54406: PUSH
54407: LD_INT 22
54409: PUSH
54410: LD_INT 23
54412: PUSH
54413: LD_INT 25
54415: PUSH
54416: LD_INT 26
54418: PUSH
54419: LD_INT 28
54421: PUSH
54422: LD_INT 30
54424: PUSH
54425: LD_INT 31
54427: PUSH
54428: LD_INT 32
54430: PUSH
54431: LD_INT 36
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 101
54459: PUSH
54460: LD_INT 102
54462: PUSH
54463: LD_INT 103
54465: PUSH
54466: LD_INT 105
54468: PUSH
54469: LD_INT 106
54471: PUSH
54472: LD_INT 108
54474: PUSH
54475: LD_INT 109
54477: PUSH
54478: LD_INT 112
54480: PUSH
54481: LD_INT 114
54483: PUSH
54484: LD_INT 116
54486: PUSH
54487: LD_INT 117
54489: PUSH
54490: LD_INT 118
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: ST_TO_ADDR
54511: GO 56610
54513: LD_INT 10
54515: DOUBLE
54516: EQUAL
54517: IFTRUE 54521
54519: GO 54717
54521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
54522: LD_ADDR_VAR 0 2
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 4
54532: PUSH
54533: LD_INT 5
54535: PUSH
54536: LD_INT 6
54538: PUSH
54539: LD_INT 7
54541: PUSH
54542: LD_INT 8
54544: PUSH
54545: LD_INT 9
54547: PUSH
54548: LD_INT 10
54550: PUSH
54551: LD_INT 11
54553: PUSH
54554: LD_INT 12
54556: PUSH
54557: LD_INT 13
54559: PUSH
54560: LD_INT 14
54562: PUSH
54563: LD_INT 15
54565: PUSH
54566: LD_INT 16
54568: PUSH
54569: LD_INT 17
54571: PUSH
54572: LD_INT 18
54574: PUSH
54575: LD_INT 19
54577: PUSH
54578: LD_INT 20
54580: PUSH
54581: LD_INT 21
54583: PUSH
54584: LD_INT 22
54586: PUSH
54587: LD_INT 23
54589: PUSH
54590: LD_INT 24
54592: PUSH
54593: LD_INT 25
54595: PUSH
54596: LD_INT 26
54598: PUSH
54599: LD_INT 28
54601: PUSH
54602: LD_INT 30
54604: PUSH
54605: LD_INT 31
54607: PUSH
54608: LD_INT 32
54610: PUSH
54611: LD_INT 36
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 101
54647: PUSH
54648: LD_INT 102
54650: PUSH
54651: LD_INT 103
54653: PUSH
54654: LD_INT 104
54656: PUSH
54657: LD_INT 105
54659: PUSH
54660: LD_INT 106
54662: PUSH
54663: LD_INT 107
54665: PUSH
54666: LD_INT 108
54668: PUSH
54669: LD_INT 109
54671: PUSH
54672: LD_INT 110
54674: PUSH
54675: LD_INT 111
54677: PUSH
54678: LD_INT 112
54680: PUSH
54681: LD_INT 114
54683: PUSH
54684: LD_INT 116
54686: PUSH
54687: LD_INT 117
54689: PUSH
54690: LD_INT 118
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: ST_TO_ADDR
54715: GO 56610
54717: LD_INT 11
54719: DOUBLE
54720: EQUAL
54721: IFTRUE 54725
54723: GO 54929
54725: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
54726: LD_ADDR_VAR 0 2
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: LD_INT 3
54736: PUSH
54737: LD_INT 4
54739: PUSH
54740: LD_INT 5
54742: PUSH
54743: LD_INT 6
54745: PUSH
54746: LD_INT 7
54748: PUSH
54749: LD_INT 8
54751: PUSH
54752: LD_INT 9
54754: PUSH
54755: LD_INT 10
54757: PUSH
54758: LD_INT 11
54760: PUSH
54761: LD_INT 12
54763: PUSH
54764: LD_INT 13
54766: PUSH
54767: LD_INT 14
54769: PUSH
54770: LD_INT 15
54772: PUSH
54773: LD_INT 16
54775: PUSH
54776: LD_INT 17
54778: PUSH
54779: LD_INT 18
54781: PUSH
54782: LD_INT 19
54784: PUSH
54785: LD_INT 20
54787: PUSH
54788: LD_INT 21
54790: PUSH
54791: LD_INT 22
54793: PUSH
54794: LD_INT 23
54796: PUSH
54797: LD_INT 24
54799: PUSH
54800: LD_INT 25
54802: PUSH
54803: LD_INT 26
54805: PUSH
54806: LD_INT 28
54808: PUSH
54809: LD_INT 30
54811: PUSH
54812: LD_INT 31
54814: PUSH
54815: LD_INT 32
54817: PUSH
54818: LD_INT 34
54820: PUSH
54821: LD_INT 36
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 101
54859: PUSH
54860: LD_INT 102
54862: PUSH
54863: LD_INT 103
54865: PUSH
54866: LD_INT 104
54868: PUSH
54869: LD_INT 105
54871: PUSH
54872: LD_INT 106
54874: PUSH
54875: LD_INT 107
54877: PUSH
54878: LD_INT 108
54880: PUSH
54881: LD_INT 109
54883: PUSH
54884: LD_INT 110
54886: PUSH
54887: LD_INT 111
54889: PUSH
54890: LD_INT 112
54892: PUSH
54893: LD_INT 114
54895: PUSH
54896: LD_INT 116
54898: PUSH
54899: LD_INT 117
54901: PUSH
54902: LD_INT 118
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: ST_TO_ADDR
54927: GO 56610
54929: LD_INT 12
54931: DOUBLE
54932: EQUAL
54933: IFTRUE 54937
54935: GO 55157
54937: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
54938: LD_ADDR_VAR 0 2
54942: PUSH
54943: LD_INT 1
54945: PUSH
54946: LD_INT 2
54948: PUSH
54949: LD_INT 3
54951: PUSH
54952: LD_INT 4
54954: PUSH
54955: LD_INT 5
54957: PUSH
54958: LD_INT 6
54960: PUSH
54961: LD_INT 7
54963: PUSH
54964: LD_INT 8
54966: PUSH
54967: LD_INT 9
54969: PUSH
54970: LD_INT 10
54972: PUSH
54973: LD_INT 11
54975: PUSH
54976: LD_INT 12
54978: PUSH
54979: LD_INT 13
54981: PUSH
54982: LD_INT 14
54984: PUSH
54985: LD_INT 15
54987: PUSH
54988: LD_INT 16
54990: PUSH
54991: LD_INT 17
54993: PUSH
54994: LD_INT 18
54996: PUSH
54997: LD_INT 19
54999: PUSH
55000: LD_INT 20
55002: PUSH
55003: LD_INT 21
55005: PUSH
55006: LD_INT 22
55008: PUSH
55009: LD_INT 23
55011: PUSH
55012: LD_INT 24
55014: PUSH
55015: LD_INT 25
55017: PUSH
55018: LD_INT 26
55020: PUSH
55021: LD_INT 27
55023: PUSH
55024: LD_INT 28
55026: PUSH
55027: LD_INT 30
55029: PUSH
55030: LD_INT 31
55032: PUSH
55033: LD_INT 32
55035: PUSH
55036: LD_INT 33
55038: PUSH
55039: LD_INT 34
55041: PUSH
55042: LD_INT 36
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 101
55083: PUSH
55084: LD_INT 102
55086: PUSH
55087: LD_INT 103
55089: PUSH
55090: LD_INT 104
55092: PUSH
55093: LD_INT 105
55095: PUSH
55096: LD_INT 106
55098: PUSH
55099: LD_INT 107
55101: PUSH
55102: LD_INT 108
55104: PUSH
55105: LD_INT 109
55107: PUSH
55108: LD_INT 110
55110: PUSH
55111: LD_INT 111
55113: PUSH
55114: LD_INT 112
55116: PUSH
55117: LD_INT 113
55119: PUSH
55120: LD_INT 114
55122: PUSH
55123: LD_INT 116
55125: PUSH
55126: LD_INT 117
55128: PUSH
55129: LD_INT 118
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: ST_TO_ADDR
55155: GO 56610
55157: LD_INT 13
55159: DOUBLE
55160: EQUAL
55161: IFTRUE 55165
55163: GO 55373
55165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
55166: LD_ADDR_VAR 0 2
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: LD_INT 4
55182: PUSH
55183: LD_INT 5
55185: PUSH
55186: LD_INT 8
55188: PUSH
55189: LD_INT 9
55191: PUSH
55192: LD_INT 10
55194: PUSH
55195: LD_INT 11
55197: PUSH
55198: LD_INT 12
55200: PUSH
55201: LD_INT 14
55203: PUSH
55204: LD_INT 15
55206: PUSH
55207: LD_INT 16
55209: PUSH
55210: LD_INT 17
55212: PUSH
55213: LD_INT 18
55215: PUSH
55216: LD_INT 19
55218: PUSH
55219: LD_INT 20
55221: PUSH
55222: LD_INT 21
55224: PUSH
55225: LD_INT 22
55227: PUSH
55228: LD_INT 23
55230: PUSH
55231: LD_INT 24
55233: PUSH
55234: LD_INT 25
55236: PUSH
55237: LD_INT 26
55239: PUSH
55240: LD_INT 27
55242: PUSH
55243: LD_INT 28
55245: PUSH
55246: LD_INT 30
55248: PUSH
55249: LD_INT 31
55251: PUSH
55252: LD_INT 32
55254: PUSH
55255: LD_INT 33
55257: PUSH
55258: LD_INT 34
55260: PUSH
55261: LD_INT 36
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 101
55299: PUSH
55300: LD_INT 102
55302: PUSH
55303: LD_INT 103
55305: PUSH
55306: LD_INT 104
55308: PUSH
55309: LD_INT 105
55311: PUSH
55312: LD_INT 106
55314: PUSH
55315: LD_INT 107
55317: PUSH
55318: LD_INT 108
55320: PUSH
55321: LD_INT 109
55323: PUSH
55324: LD_INT 110
55326: PUSH
55327: LD_INT 111
55329: PUSH
55330: LD_INT 112
55332: PUSH
55333: LD_INT 113
55335: PUSH
55336: LD_INT 114
55338: PUSH
55339: LD_INT 116
55341: PUSH
55342: LD_INT 117
55344: PUSH
55345: LD_INT 118
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: ST_TO_ADDR
55371: GO 56610
55373: LD_INT 14
55375: DOUBLE
55376: EQUAL
55377: IFTRUE 55381
55379: GO 55605
55381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
55382: LD_ADDR_VAR 0 2
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: LD_INT 4
55398: PUSH
55399: LD_INT 5
55401: PUSH
55402: LD_INT 6
55404: PUSH
55405: LD_INT 7
55407: PUSH
55408: LD_INT 8
55410: PUSH
55411: LD_INT 9
55413: PUSH
55414: LD_INT 10
55416: PUSH
55417: LD_INT 11
55419: PUSH
55420: LD_INT 12
55422: PUSH
55423: LD_INT 13
55425: PUSH
55426: LD_INT 14
55428: PUSH
55429: LD_INT 15
55431: PUSH
55432: LD_INT 16
55434: PUSH
55435: LD_INT 17
55437: PUSH
55438: LD_INT 18
55440: PUSH
55441: LD_INT 19
55443: PUSH
55444: LD_INT 20
55446: PUSH
55447: LD_INT 21
55449: PUSH
55450: LD_INT 22
55452: PUSH
55453: LD_INT 23
55455: PUSH
55456: LD_INT 24
55458: PUSH
55459: LD_INT 25
55461: PUSH
55462: LD_INT 26
55464: PUSH
55465: LD_INT 27
55467: PUSH
55468: LD_INT 28
55470: PUSH
55471: LD_INT 29
55473: PUSH
55474: LD_INT 30
55476: PUSH
55477: LD_INT 31
55479: PUSH
55480: LD_INT 32
55482: PUSH
55483: LD_INT 33
55485: PUSH
55486: LD_INT 34
55488: PUSH
55489: LD_INT 36
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 101
55531: PUSH
55532: LD_INT 102
55534: PUSH
55535: LD_INT 103
55537: PUSH
55538: LD_INT 104
55540: PUSH
55541: LD_INT 105
55543: PUSH
55544: LD_INT 106
55546: PUSH
55547: LD_INT 107
55549: PUSH
55550: LD_INT 108
55552: PUSH
55553: LD_INT 109
55555: PUSH
55556: LD_INT 110
55558: PUSH
55559: LD_INT 111
55561: PUSH
55562: LD_INT 112
55564: PUSH
55565: LD_INT 113
55567: PUSH
55568: LD_INT 114
55570: PUSH
55571: LD_INT 116
55573: PUSH
55574: LD_INT 117
55576: PUSH
55577: LD_INT 118
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: ST_TO_ADDR
55603: GO 56610
55605: LD_INT 15
55607: DOUBLE
55608: EQUAL
55609: IFTRUE 55613
55611: GO 55837
55613: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
55614: LD_ADDR_VAR 0 2
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: LD_INT 4
55630: PUSH
55631: LD_INT 5
55633: PUSH
55634: LD_INT 6
55636: PUSH
55637: LD_INT 7
55639: PUSH
55640: LD_INT 8
55642: PUSH
55643: LD_INT 9
55645: PUSH
55646: LD_INT 10
55648: PUSH
55649: LD_INT 11
55651: PUSH
55652: LD_INT 12
55654: PUSH
55655: LD_INT 13
55657: PUSH
55658: LD_INT 14
55660: PUSH
55661: LD_INT 15
55663: PUSH
55664: LD_INT 16
55666: PUSH
55667: LD_INT 17
55669: PUSH
55670: LD_INT 18
55672: PUSH
55673: LD_INT 19
55675: PUSH
55676: LD_INT 20
55678: PUSH
55679: LD_INT 21
55681: PUSH
55682: LD_INT 22
55684: PUSH
55685: LD_INT 23
55687: PUSH
55688: LD_INT 24
55690: PUSH
55691: LD_INT 25
55693: PUSH
55694: LD_INT 26
55696: PUSH
55697: LD_INT 27
55699: PUSH
55700: LD_INT 28
55702: PUSH
55703: LD_INT 29
55705: PUSH
55706: LD_INT 30
55708: PUSH
55709: LD_INT 31
55711: PUSH
55712: LD_INT 32
55714: PUSH
55715: LD_INT 33
55717: PUSH
55718: LD_INT 34
55720: PUSH
55721: LD_INT 36
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 101
55763: PUSH
55764: LD_INT 102
55766: PUSH
55767: LD_INT 103
55769: PUSH
55770: LD_INT 104
55772: PUSH
55773: LD_INT 105
55775: PUSH
55776: LD_INT 106
55778: PUSH
55779: LD_INT 107
55781: PUSH
55782: LD_INT 108
55784: PUSH
55785: LD_INT 109
55787: PUSH
55788: LD_INT 110
55790: PUSH
55791: LD_INT 111
55793: PUSH
55794: LD_INT 112
55796: PUSH
55797: LD_INT 113
55799: PUSH
55800: LD_INT 114
55802: PUSH
55803: LD_INT 116
55805: PUSH
55806: LD_INT 117
55808: PUSH
55809: LD_INT 118
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: ST_TO_ADDR
55835: GO 56610
55837: LD_INT 16
55839: DOUBLE
55840: EQUAL
55841: IFTRUE 55845
55843: GO 55981
55845: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
55846: LD_ADDR_VAR 0 2
55850: PUSH
55851: LD_INT 2
55853: PUSH
55854: LD_INT 4
55856: PUSH
55857: LD_INT 5
55859: PUSH
55860: LD_INT 7
55862: PUSH
55863: LD_INT 11
55865: PUSH
55866: LD_INT 12
55868: PUSH
55869: LD_INT 15
55871: PUSH
55872: LD_INT 16
55874: PUSH
55875: LD_INT 20
55877: PUSH
55878: LD_INT 21
55880: PUSH
55881: LD_INT 22
55883: PUSH
55884: LD_INT 23
55886: PUSH
55887: LD_INT 25
55889: PUSH
55890: LD_INT 26
55892: PUSH
55893: LD_INT 30
55895: PUSH
55896: LD_INT 31
55898: PUSH
55899: LD_INT 32
55901: PUSH
55902: LD_INT 33
55904: PUSH
55905: LD_INT 34
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 101
55931: PUSH
55932: LD_INT 102
55934: PUSH
55935: LD_INT 103
55937: PUSH
55938: LD_INT 106
55940: PUSH
55941: LD_INT 108
55943: PUSH
55944: LD_INT 112
55946: PUSH
55947: LD_INT 113
55949: PUSH
55950: LD_INT 114
55952: PUSH
55953: LD_INT 116
55955: PUSH
55956: LD_INT 117
55958: PUSH
55959: LD_INT 118
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: ST_TO_ADDR
55979: GO 56610
55981: LD_INT 17
55983: DOUBLE
55984: EQUAL
55985: IFTRUE 55989
55987: GO 56213
55989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
55990: LD_ADDR_VAR 0 2
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 4
56006: PUSH
56007: LD_INT 5
56009: PUSH
56010: LD_INT 6
56012: PUSH
56013: LD_INT 7
56015: PUSH
56016: LD_INT 8
56018: PUSH
56019: LD_INT 9
56021: PUSH
56022: LD_INT 10
56024: PUSH
56025: LD_INT 11
56027: PUSH
56028: LD_INT 12
56030: PUSH
56031: LD_INT 13
56033: PUSH
56034: LD_INT 14
56036: PUSH
56037: LD_INT 15
56039: PUSH
56040: LD_INT 16
56042: PUSH
56043: LD_INT 17
56045: PUSH
56046: LD_INT 18
56048: PUSH
56049: LD_INT 19
56051: PUSH
56052: LD_INT 20
56054: PUSH
56055: LD_INT 21
56057: PUSH
56058: LD_INT 22
56060: PUSH
56061: LD_INT 23
56063: PUSH
56064: LD_INT 24
56066: PUSH
56067: LD_INT 25
56069: PUSH
56070: LD_INT 26
56072: PUSH
56073: LD_INT 27
56075: PUSH
56076: LD_INT 28
56078: PUSH
56079: LD_INT 29
56081: PUSH
56082: LD_INT 30
56084: PUSH
56085: LD_INT 31
56087: PUSH
56088: LD_INT 32
56090: PUSH
56091: LD_INT 33
56093: PUSH
56094: LD_INT 34
56096: PUSH
56097: LD_INT 36
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 101
56139: PUSH
56140: LD_INT 102
56142: PUSH
56143: LD_INT 103
56145: PUSH
56146: LD_INT 104
56148: PUSH
56149: LD_INT 105
56151: PUSH
56152: LD_INT 106
56154: PUSH
56155: LD_INT 107
56157: PUSH
56158: LD_INT 108
56160: PUSH
56161: LD_INT 109
56163: PUSH
56164: LD_INT 110
56166: PUSH
56167: LD_INT 111
56169: PUSH
56170: LD_INT 112
56172: PUSH
56173: LD_INT 113
56175: PUSH
56176: LD_INT 114
56178: PUSH
56179: LD_INT 116
56181: PUSH
56182: LD_INT 117
56184: PUSH
56185: LD_INT 118
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: ST_TO_ADDR
56211: GO 56610
56213: LD_INT 18
56215: DOUBLE
56216: EQUAL
56217: IFTRUE 56221
56219: GO 56369
56221: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
56222: LD_ADDR_VAR 0 2
56226: PUSH
56227: LD_INT 2
56229: PUSH
56230: LD_INT 4
56232: PUSH
56233: LD_INT 5
56235: PUSH
56236: LD_INT 7
56238: PUSH
56239: LD_INT 11
56241: PUSH
56242: LD_INT 12
56244: PUSH
56245: LD_INT 15
56247: PUSH
56248: LD_INT 16
56250: PUSH
56251: LD_INT 20
56253: PUSH
56254: LD_INT 21
56256: PUSH
56257: LD_INT 22
56259: PUSH
56260: LD_INT 23
56262: PUSH
56263: LD_INT 25
56265: PUSH
56266: LD_INT 26
56268: PUSH
56269: LD_INT 30
56271: PUSH
56272: LD_INT 31
56274: PUSH
56275: LD_INT 32
56277: PUSH
56278: LD_INT 33
56280: PUSH
56281: LD_INT 34
56283: PUSH
56284: LD_INT 35
56286: PUSH
56287: LD_INT 36
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 101
56315: PUSH
56316: LD_INT 102
56318: PUSH
56319: LD_INT 103
56321: PUSH
56322: LD_INT 106
56324: PUSH
56325: LD_INT 108
56327: PUSH
56328: LD_INT 112
56330: PUSH
56331: LD_INT 113
56333: PUSH
56334: LD_INT 114
56336: PUSH
56337: LD_INT 115
56339: PUSH
56340: LD_INT 116
56342: PUSH
56343: LD_INT 117
56345: PUSH
56346: LD_INT 118
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: ST_TO_ADDR
56367: GO 56610
56369: LD_INT 19
56371: DOUBLE
56372: EQUAL
56373: IFTRUE 56377
56375: GO 56609
56377: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
56378: LD_ADDR_VAR 0 2
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 3
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: LD_INT 5
56397: PUSH
56398: LD_INT 6
56400: PUSH
56401: LD_INT 7
56403: PUSH
56404: LD_INT 8
56406: PUSH
56407: LD_INT 9
56409: PUSH
56410: LD_INT 10
56412: PUSH
56413: LD_INT 11
56415: PUSH
56416: LD_INT 12
56418: PUSH
56419: LD_INT 13
56421: PUSH
56422: LD_INT 14
56424: PUSH
56425: LD_INT 15
56427: PUSH
56428: LD_INT 16
56430: PUSH
56431: LD_INT 17
56433: PUSH
56434: LD_INT 18
56436: PUSH
56437: LD_INT 19
56439: PUSH
56440: LD_INT 20
56442: PUSH
56443: LD_INT 21
56445: PUSH
56446: LD_INT 22
56448: PUSH
56449: LD_INT 23
56451: PUSH
56452: LD_INT 24
56454: PUSH
56455: LD_INT 25
56457: PUSH
56458: LD_INT 26
56460: PUSH
56461: LD_INT 27
56463: PUSH
56464: LD_INT 28
56466: PUSH
56467: LD_INT 29
56469: PUSH
56470: LD_INT 30
56472: PUSH
56473: LD_INT 31
56475: PUSH
56476: LD_INT 32
56478: PUSH
56479: LD_INT 33
56481: PUSH
56482: LD_INT 34
56484: PUSH
56485: LD_INT 35
56487: PUSH
56488: LD_INT 36
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 101
56531: PUSH
56532: LD_INT 102
56534: PUSH
56535: LD_INT 103
56537: PUSH
56538: LD_INT 104
56540: PUSH
56541: LD_INT 105
56543: PUSH
56544: LD_INT 106
56546: PUSH
56547: LD_INT 107
56549: PUSH
56550: LD_INT 108
56552: PUSH
56553: LD_INT 109
56555: PUSH
56556: LD_INT 110
56558: PUSH
56559: LD_INT 111
56561: PUSH
56562: LD_INT 112
56564: PUSH
56565: LD_INT 113
56567: PUSH
56568: LD_INT 114
56570: PUSH
56571: LD_INT 115
56573: PUSH
56574: LD_INT 116
56576: PUSH
56577: LD_INT 117
56579: PUSH
56580: LD_INT 118
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: ST_TO_ADDR
56607: GO 56610
56609: POP
// end else
56610: GO 56841
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
56612: LD_ADDR_VAR 0 2
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 2
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: LD_INT 4
56628: PUSH
56629: LD_INT 5
56631: PUSH
56632: LD_INT 6
56634: PUSH
56635: LD_INT 7
56637: PUSH
56638: LD_INT 8
56640: PUSH
56641: LD_INT 9
56643: PUSH
56644: LD_INT 10
56646: PUSH
56647: LD_INT 11
56649: PUSH
56650: LD_INT 12
56652: PUSH
56653: LD_INT 13
56655: PUSH
56656: LD_INT 14
56658: PUSH
56659: LD_INT 15
56661: PUSH
56662: LD_INT 16
56664: PUSH
56665: LD_INT 17
56667: PUSH
56668: LD_INT 18
56670: PUSH
56671: LD_INT 19
56673: PUSH
56674: LD_INT 20
56676: PUSH
56677: LD_INT 21
56679: PUSH
56680: LD_INT 22
56682: PUSH
56683: LD_INT 23
56685: PUSH
56686: LD_INT 24
56688: PUSH
56689: LD_INT 25
56691: PUSH
56692: LD_INT 26
56694: PUSH
56695: LD_INT 27
56697: PUSH
56698: LD_INT 28
56700: PUSH
56701: LD_INT 29
56703: PUSH
56704: LD_INT 30
56706: PUSH
56707: LD_INT 31
56709: PUSH
56710: LD_INT 32
56712: PUSH
56713: LD_INT 33
56715: PUSH
56716: LD_INT 34
56718: PUSH
56719: LD_INT 35
56721: PUSH
56722: LD_INT 36
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 101
56765: PUSH
56766: LD_INT 102
56768: PUSH
56769: LD_INT 103
56771: PUSH
56772: LD_INT 104
56774: PUSH
56775: LD_INT 105
56777: PUSH
56778: LD_INT 106
56780: PUSH
56781: LD_INT 107
56783: PUSH
56784: LD_INT 108
56786: PUSH
56787: LD_INT 109
56789: PUSH
56790: LD_INT 110
56792: PUSH
56793: LD_INT 111
56795: PUSH
56796: LD_INT 112
56798: PUSH
56799: LD_INT 113
56801: PUSH
56802: LD_INT 114
56804: PUSH
56805: LD_INT 115
56807: PUSH
56808: LD_INT 116
56810: PUSH
56811: LD_INT 117
56813: PUSH
56814: LD_INT 118
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: ST_TO_ADDR
// if result then
56841: LD_VAR 0 2
56845: IFFALSE 57631
// begin normal :=  ;
56847: LD_ADDR_VAR 0 5
56851: PUSH
56852: LD_STRING 
56854: ST_TO_ADDR
// hardcore :=  ;
56855: LD_ADDR_VAR 0 6
56859: PUSH
56860: LD_STRING 
56862: ST_TO_ADDR
// active :=  ;
56863: LD_ADDR_VAR 0 7
56867: PUSH
56868: LD_STRING 
56870: ST_TO_ADDR
// for i = 1 to normalCounter do
56871: LD_ADDR_VAR 0 8
56875: PUSH
56876: DOUBLE
56877: LD_INT 1
56879: DEC
56880: ST_TO_ADDR
56881: LD_EXP 38
56885: PUSH
56886: FOR_TO
56887: IFFALSE 56988
// begin tmp := 0 ;
56889: LD_ADDR_VAR 0 3
56893: PUSH
56894: LD_STRING 0
56896: ST_TO_ADDR
// if result [ 1 ] then
56897: LD_VAR 0 2
56901: PUSH
56902: LD_INT 1
56904: ARRAY
56905: IFFALSE 56970
// if result [ 1 ] [ 1 ] = i then
56907: LD_VAR 0 2
56911: PUSH
56912: LD_INT 1
56914: ARRAY
56915: PUSH
56916: LD_INT 1
56918: ARRAY
56919: PUSH
56920: LD_VAR 0 8
56924: EQUAL
56925: IFFALSE 56970
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
56927: LD_ADDR_VAR 0 2
56931: PUSH
56932: LD_VAR 0 2
56936: PPUSH
56937: LD_INT 1
56939: PPUSH
56940: LD_VAR 0 2
56944: PUSH
56945: LD_INT 1
56947: ARRAY
56948: PPUSH
56949: LD_INT 1
56951: PPUSH
56952: CALL_OW 3
56956: PPUSH
56957: CALL_OW 1
56961: ST_TO_ADDR
// tmp := 1 ;
56962: LD_ADDR_VAR 0 3
56966: PUSH
56967: LD_STRING 1
56969: ST_TO_ADDR
// end ; normal := normal & tmp ;
56970: LD_ADDR_VAR 0 5
56974: PUSH
56975: LD_VAR 0 5
56979: PUSH
56980: LD_VAR 0 3
56984: STR
56985: ST_TO_ADDR
// end ;
56986: GO 56886
56988: POP
56989: POP
// for i = 1 to hardcoreCounter do
56990: LD_ADDR_VAR 0 8
56994: PUSH
56995: DOUBLE
56996: LD_INT 1
56998: DEC
56999: ST_TO_ADDR
57000: LD_EXP 39
57004: PUSH
57005: FOR_TO
57006: IFFALSE 57111
// begin tmp := 0 ;
57008: LD_ADDR_VAR 0 3
57012: PUSH
57013: LD_STRING 0
57015: ST_TO_ADDR
// if result [ 2 ] then
57016: LD_VAR 0 2
57020: PUSH
57021: LD_INT 2
57023: ARRAY
57024: IFFALSE 57093
// if result [ 2 ] [ 1 ] = 100 + i then
57026: LD_VAR 0 2
57030: PUSH
57031: LD_INT 2
57033: ARRAY
57034: PUSH
57035: LD_INT 1
57037: ARRAY
57038: PUSH
57039: LD_INT 100
57041: PUSH
57042: LD_VAR 0 8
57046: PLUS
57047: EQUAL
57048: IFFALSE 57093
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
57050: LD_ADDR_VAR 0 2
57054: PUSH
57055: LD_VAR 0 2
57059: PPUSH
57060: LD_INT 2
57062: PPUSH
57063: LD_VAR 0 2
57067: PUSH
57068: LD_INT 2
57070: ARRAY
57071: PPUSH
57072: LD_INT 1
57074: PPUSH
57075: CALL_OW 3
57079: PPUSH
57080: CALL_OW 1
57084: ST_TO_ADDR
// tmp := 1 ;
57085: LD_ADDR_VAR 0 3
57089: PUSH
57090: LD_STRING 1
57092: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
57093: LD_ADDR_VAR 0 6
57097: PUSH
57098: LD_VAR 0 6
57102: PUSH
57103: LD_VAR 0 3
57107: STR
57108: ST_TO_ADDR
// end ;
57109: GO 57005
57111: POP
57112: POP
// if isGameLoad then
57113: LD_VAR 0 1
57117: IFFALSE 57592
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
57119: LD_ADDR_VAR 0 4
57123: PUSH
57124: LD_EXP 42
57128: PUSH
57129: LD_EXP 41
57133: PUSH
57134: LD_EXP 43
57138: PUSH
57139: LD_EXP 40
57143: PUSH
57144: LD_EXP 44
57148: PUSH
57149: LD_EXP 45
57153: PUSH
57154: LD_EXP 46
57158: PUSH
57159: LD_EXP 47
57163: PUSH
57164: LD_EXP 48
57168: PUSH
57169: LD_EXP 49
57173: PUSH
57174: LD_EXP 50
57178: PUSH
57179: LD_EXP 51
57183: PUSH
57184: LD_EXP 52
57188: PUSH
57189: LD_EXP 53
57193: PUSH
57194: LD_EXP 61
57198: PUSH
57199: LD_EXP 62
57203: PUSH
57204: LD_EXP 63
57208: PUSH
57209: LD_EXP 64
57213: PUSH
57214: LD_EXP 66
57218: PUSH
57219: LD_EXP 67
57223: PUSH
57224: LD_EXP 68
57228: PUSH
57229: LD_EXP 71
57233: PUSH
57234: LD_EXP 73
57238: PUSH
57239: LD_EXP 74
57243: PUSH
57244: LD_EXP 75
57248: PUSH
57249: LD_EXP 77
57253: PUSH
57254: LD_EXP 78
57258: PUSH
57259: LD_EXP 81
57263: PUSH
57264: LD_EXP 82
57268: PUSH
57269: LD_EXP 83
57273: PUSH
57274: LD_EXP 84
57278: PUSH
57279: LD_EXP 85
57283: PUSH
57284: LD_EXP 86
57288: PUSH
57289: LD_EXP 87
57293: PUSH
57294: LD_EXP 88
57298: PUSH
57299: LD_EXP 89
57303: PUSH
57304: LD_EXP 54
57308: PUSH
57309: LD_EXP 55
57313: PUSH
57314: LD_EXP 58
57318: PUSH
57319: LD_EXP 59
57323: PUSH
57324: LD_EXP 60
57328: PUSH
57329: LD_EXP 56
57333: PUSH
57334: LD_EXP 57
57338: PUSH
57339: LD_EXP 65
57343: PUSH
57344: LD_EXP 69
57348: PUSH
57349: LD_EXP 70
57353: PUSH
57354: LD_EXP 72
57358: PUSH
57359: LD_EXP 76
57363: PUSH
57364: LD_EXP 79
57368: PUSH
57369: LD_EXP 80
57373: PUSH
57374: LD_EXP 90
57378: PUSH
57379: LD_EXP 91
57383: PUSH
57384: LD_EXP 92
57388: PUSH
57389: LD_EXP 93
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// tmp :=  ;
57450: LD_ADDR_VAR 0 3
57454: PUSH
57455: LD_STRING 
57457: ST_TO_ADDR
// for i = 1 to normalCounter do
57458: LD_ADDR_VAR 0 8
57462: PUSH
57463: DOUBLE
57464: LD_INT 1
57466: DEC
57467: ST_TO_ADDR
57468: LD_EXP 38
57472: PUSH
57473: FOR_TO
57474: IFFALSE 57510
// begin if flags [ i ] then
57476: LD_VAR 0 4
57480: PUSH
57481: LD_VAR 0 8
57485: ARRAY
57486: IFFALSE 57508
// tmp := tmp & i & ; ;
57488: LD_ADDR_VAR 0 3
57492: PUSH
57493: LD_VAR 0 3
57497: PUSH
57498: LD_VAR 0 8
57502: STR
57503: PUSH
57504: LD_STRING ;
57506: STR
57507: ST_TO_ADDR
// end ;
57508: GO 57473
57510: POP
57511: POP
// for i = 1 to hardcoreCounter do
57512: LD_ADDR_VAR 0 8
57516: PUSH
57517: DOUBLE
57518: LD_INT 1
57520: DEC
57521: ST_TO_ADDR
57522: LD_EXP 39
57526: PUSH
57527: FOR_TO
57528: IFFALSE 57574
// begin if flags [ normalCounter + i ] then
57530: LD_VAR 0 4
57534: PUSH
57535: LD_EXP 38
57539: PUSH
57540: LD_VAR 0 8
57544: PLUS
57545: ARRAY
57546: IFFALSE 57572
// tmp := tmp & ( 100 + i ) & ; ;
57548: LD_ADDR_VAR 0 3
57552: PUSH
57553: LD_VAR 0 3
57557: PUSH
57558: LD_INT 100
57560: PUSH
57561: LD_VAR 0 8
57565: PLUS
57566: STR
57567: PUSH
57568: LD_STRING ;
57570: STR
57571: ST_TO_ADDR
// end ;
57572: GO 57527
57574: POP
57575: POP
// if tmp then
57576: LD_VAR 0 3
57580: IFFALSE 57592
// active := tmp ;
57582: LD_ADDR_VAR 0 7
57586: PUSH
57587: LD_VAR 0 3
57591: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
57592: LD_STRING getStreamItemsFromMission("
57594: PUSH
57595: LD_VAR 0 5
57599: STR
57600: PUSH
57601: LD_STRING ","
57603: STR
57604: PUSH
57605: LD_VAR 0 6
57609: STR
57610: PUSH
57611: LD_STRING ","
57613: STR
57614: PUSH
57615: LD_VAR 0 7
57619: STR
57620: PUSH
57621: LD_STRING ")
57623: STR
57624: PPUSH
57625: CALL_OW 559
// end else
57629: GO 57638
// ToLua ( getStreamItemsFromMission("","","") ) ;
57631: LD_STRING getStreamItemsFromMission("","","")
57633: PPUSH
57634: CALL_OW 559
// end ;
57638: LD_VAR 0 2
57642: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
57643: LD_EXP 37
57647: PUSH
57648: LD_EXP 42
57652: AND
57653: IFFALSE 57777
57655: GO 57657
57657: DISABLE
57658: LD_INT 0
57660: PPUSH
57661: PPUSH
// begin enable ;
57662: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
57663: LD_ADDR_VAR 0 2
57667: PUSH
57668: LD_INT 22
57670: PUSH
57671: LD_OWVAR 2
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 34
57685: PUSH
57686: LD_INT 7
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 34
57695: PUSH
57696: LD_INT 45
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 34
57705: PUSH
57706: LD_INT 28
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 34
57715: PUSH
57716: LD_INT 47
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PPUSH
57734: CALL_OW 69
57738: ST_TO_ADDR
// if not tmp then
57739: LD_VAR 0 2
57743: NOT
57744: IFFALSE 57748
// exit ;
57746: GO 57777
// for i in tmp do
57748: LD_ADDR_VAR 0 1
57752: PUSH
57753: LD_VAR 0 2
57757: PUSH
57758: FOR_IN
57759: IFFALSE 57775
// begin SetLives ( i , 0 ) ;
57761: LD_VAR 0 1
57765: PPUSH
57766: LD_INT 0
57768: PPUSH
57769: CALL_OW 234
// end ;
57773: GO 57758
57775: POP
57776: POP
// end ;
57777: PPOPN 2
57779: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
57780: LD_EXP 37
57784: PUSH
57785: LD_EXP 43
57789: AND
57790: IFFALSE 57874
57792: GO 57794
57794: DISABLE
57795: LD_INT 0
57797: PPUSH
57798: PPUSH
// begin enable ;
57799: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
57800: LD_ADDR_VAR 0 2
57804: PUSH
57805: LD_INT 22
57807: PUSH
57808: LD_OWVAR 2
57812: PUSH
57813: EMPTY
57814: LIST
57815: LIST
57816: PUSH
57817: LD_INT 32
57819: PUSH
57820: LD_INT 3
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PPUSH
57831: CALL_OW 69
57835: ST_TO_ADDR
// if not tmp then
57836: LD_VAR 0 2
57840: NOT
57841: IFFALSE 57845
// exit ;
57843: GO 57874
// for i in tmp do
57845: LD_ADDR_VAR 0 1
57849: PUSH
57850: LD_VAR 0 2
57854: PUSH
57855: FOR_IN
57856: IFFALSE 57872
// begin SetLives ( i , 0 ) ;
57858: LD_VAR 0 1
57862: PPUSH
57863: LD_INT 0
57865: PPUSH
57866: CALL_OW 234
// end ;
57870: GO 57855
57872: POP
57873: POP
// end ;
57874: PPOPN 2
57876: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
57877: LD_EXP 37
57881: PUSH
57882: LD_EXP 40
57886: AND
57887: IFFALSE 57980
57889: GO 57891
57891: DISABLE
57892: LD_INT 0
57894: PPUSH
// begin enable ;
57895: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
57896: LD_ADDR_VAR 0 1
57900: PUSH
57901: LD_INT 22
57903: PUSH
57904: LD_OWVAR 2
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: LD_INT 25
57918: PUSH
57919: LD_INT 5
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 25
57928: PUSH
57929: LD_INT 9
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 25
57938: PUSH
57939: LD_INT 8
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PPUSH
57956: CALL_OW 69
57960: PUSH
57961: FOR_IN
57962: IFFALSE 57978
// begin SetClass ( i , 1 ) ;
57964: LD_VAR 0 1
57968: PPUSH
57969: LD_INT 1
57971: PPUSH
57972: CALL_OW 336
// end ;
57976: GO 57961
57978: POP
57979: POP
// end ;
57980: PPOPN 1
57982: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
57983: LD_EXP 37
57987: PUSH
57988: LD_EXP 41
57992: AND
57993: PUSH
57994: LD_OWVAR 65
57998: PUSH
57999: LD_INT 7
58001: LESS
58002: AND
58003: IFFALSE 58017
58005: GO 58007
58007: DISABLE
// begin enable ;
58008: ENABLE
// game_speed := 7 ;
58009: LD_ADDR_OWVAR 65
58013: PUSH
58014: LD_INT 7
58016: ST_TO_ADDR
// end ;
58017: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
58018: LD_EXP 37
58022: PUSH
58023: LD_EXP 44
58027: AND
58028: IFFALSE 58230
58030: GO 58032
58032: DISABLE
58033: LD_INT 0
58035: PPUSH
58036: PPUSH
58037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
58038: LD_ADDR_VAR 0 3
58042: PUSH
58043: LD_INT 81
58045: PUSH
58046: LD_OWVAR 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 21
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PPUSH
58069: CALL_OW 69
58073: ST_TO_ADDR
// if not tmp then
58074: LD_VAR 0 3
58078: NOT
58079: IFFALSE 58083
// exit ;
58081: GO 58230
// if tmp > 5 then
58083: LD_VAR 0 3
58087: PUSH
58088: LD_INT 5
58090: GREATER
58091: IFFALSE 58103
// k := 5 else
58093: LD_ADDR_VAR 0 2
58097: PUSH
58098: LD_INT 5
58100: ST_TO_ADDR
58101: GO 58113
// k := tmp ;
58103: LD_ADDR_VAR 0 2
58107: PUSH
58108: LD_VAR 0 3
58112: ST_TO_ADDR
// for i := 1 to k do
58113: LD_ADDR_VAR 0 1
58117: PUSH
58118: DOUBLE
58119: LD_INT 1
58121: DEC
58122: ST_TO_ADDR
58123: LD_VAR 0 2
58127: PUSH
58128: FOR_TO
58129: IFFALSE 58228
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
58131: LD_VAR 0 3
58135: PUSH
58136: LD_VAR 0 1
58140: ARRAY
58141: PPUSH
58142: LD_VAR 0 1
58146: PUSH
58147: LD_INT 4
58149: MOD
58150: PUSH
58151: LD_INT 1
58153: PLUS
58154: PPUSH
58155: CALL_OW 259
58159: PUSH
58160: LD_INT 10
58162: LESS
58163: IFFALSE 58226
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
58165: LD_VAR 0 3
58169: PUSH
58170: LD_VAR 0 1
58174: ARRAY
58175: PPUSH
58176: LD_VAR 0 1
58180: PUSH
58181: LD_INT 4
58183: MOD
58184: PUSH
58185: LD_INT 1
58187: PLUS
58188: PPUSH
58189: LD_VAR 0 3
58193: PUSH
58194: LD_VAR 0 1
58198: ARRAY
58199: PPUSH
58200: LD_VAR 0 1
58204: PUSH
58205: LD_INT 4
58207: MOD
58208: PUSH
58209: LD_INT 1
58211: PLUS
58212: PPUSH
58213: CALL_OW 259
58217: PUSH
58218: LD_INT 1
58220: PLUS
58221: PPUSH
58222: CALL_OW 237
58226: GO 58128
58228: POP
58229: POP
// end ;
58230: PPOPN 3
58232: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
58233: LD_EXP 37
58237: PUSH
58238: LD_EXP 45
58242: AND
58243: IFFALSE 58263
58245: GO 58247
58247: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
58248: LD_INT 4
58250: PPUSH
58251: LD_OWVAR 2
58255: PPUSH
58256: LD_INT 0
58258: PPUSH
58259: CALL_OW 324
58263: END
// every 0 0$1 trigger StreamModeActive and sShovel do
58264: LD_EXP 37
58268: PUSH
58269: LD_EXP 74
58273: AND
58274: IFFALSE 58294
58276: GO 58278
58278: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
58279: LD_INT 19
58281: PPUSH
58282: LD_OWVAR 2
58286: PPUSH
58287: LD_INT 0
58289: PPUSH
58290: CALL_OW 324
58294: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
58295: LD_EXP 37
58299: PUSH
58300: LD_EXP 46
58304: AND
58305: IFFALSE 58407
58307: GO 58309
58309: DISABLE
58310: LD_INT 0
58312: PPUSH
58313: PPUSH
// begin enable ;
58314: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
58315: LD_ADDR_VAR 0 2
58319: PUSH
58320: LD_INT 22
58322: PUSH
58323: LD_OWVAR 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: LD_INT 34
58337: PUSH
58338: LD_INT 11
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 34
58347: PUSH
58348: LD_INT 30
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PPUSH
58364: CALL_OW 69
58368: ST_TO_ADDR
// if not tmp then
58369: LD_VAR 0 2
58373: NOT
58374: IFFALSE 58378
// exit ;
58376: GO 58407
// for i in tmp do
58378: LD_ADDR_VAR 0 1
58382: PUSH
58383: LD_VAR 0 2
58387: PUSH
58388: FOR_IN
58389: IFFALSE 58405
// begin SetLives ( i , 0 ) ;
58391: LD_VAR 0 1
58395: PPUSH
58396: LD_INT 0
58398: PPUSH
58399: CALL_OW 234
// end ;
58403: GO 58388
58405: POP
58406: POP
// end ;
58407: PPOPN 2
58409: END
// every 0 0$1 trigger StreamModeActive and sBunker do
58410: LD_EXP 37
58414: PUSH
58415: LD_EXP 47
58419: AND
58420: IFFALSE 58440
58422: GO 58424
58424: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
58425: LD_INT 32
58427: PPUSH
58428: LD_OWVAR 2
58432: PPUSH
58433: LD_INT 0
58435: PPUSH
58436: CALL_OW 324
58440: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
58441: LD_EXP 37
58445: PUSH
58446: LD_EXP 48
58450: AND
58451: IFFALSE 58632
58453: GO 58455
58455: DISABLE
58456: LD_INT 0
58458: PPUSH
58459: PPUSH
58460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
58461: LD_ADDR_VAR 0 2
58465: PUSH
58466: LD_INT 22
58468: PUSH
58469: LD_OWVAR 2
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 33
58480: PUSH
58481: LD_INT 3
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PPUSH
58492: CALL_OW 69
58496: ST_TO_ADDR
// if not tmp then
58497: LD_VAR 0 2
58501: NOT
58502: IFFALSE 58506
// exit ;
58504: GO 58632
// side := 0 ;
58506: LD_ADDR_VAR 0 3
58510: PUSH
58511: LD_INT 0
58513: ST_TO_ADDR
// for i := 1 to 8 do
58514: LD_ADDR_VAR 0 1
58518: PUSH
58519: DOUBLE
58520: LD_INT 1
58522: DEC
58523: ST_TO_ADDR
58524: LD_INT 8
58526: PUSH
58527: FOR_TO
58528: IFFALSE 58576
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
58530: LD_OWVAR 2
58534: PUSH
58535: LD_VAR 0 1
58539: NONEQUAL
58540: PUSH
58541: LD_OWVAR 2
58545: PPUSH
58546: LD_VAR 0 1
58550: PPUSH
58551: CALL_OW 81
58555: PUSH
58556: LD_INT 2
58558: EQUAL
58559: AND
58560: IFFALSE 58574
// begin side := i ;
58562: LD_ADDR_VAR 0 3
58566: PUSH
58567: LD_VAR 0 1
58571: ST_TO_ADDR
// break ;
58572: GO 58576
// end ;
58574: GO 58527
58576: POP
58577: POP
// if not side then
58578: LD_VAR 0 3
58582: NOT
58583: IFFALSE 58587
// exit ;
58585: GO 58632
// for i := 1 to tmp do
58587: LD_ADDR_VAR 0 1
58591: PUSH
58592: DOUBLE
58593: LD_INT 1
58595: DEC
58596: ST_TO_ADDR
58597: LD_VAR 0 2
58601: PUSH
58602: FOR_TO
58603: IFFALSE 58630
// if Prob ( 60 ) then
58605: LD_INT 60
58607: PPUSH
58608: CALL_OW 13
58612: IFFALSE 58628
// SetSide ( i , side ) ;
58614: LD_VAR 0 1
58618: PPUSH
58619: LD_VAR 0 3
58623: PPUSH
58624: CALL_OW 235
58628: GO 58602
58630: POP
58631: POP
// end ;
58632: PPOPN 3
58634: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
58635: LD_EXP 37
58639: PUSH
58640: LD_EXP 50
58644: AND
58645: IFFALSE 58764
58647: GO 58649
58649: DISABLE
58650: LD_INT 0
58652: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
58653: LD_ADDR_VAR 0 1
58657: PUSH
58658: LD_INT 22
58660: PUSH
58661: LD_OWVAR 2
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 21
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: LD_INT 23
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: PPUSH
58702: CALL_OW 69
58706: PUSH
58707: FOR_IN
58708: IFFALSE 58762
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
58710: LD_VAR 0 1
58714: PPUSH
58715: CALL_OW 257
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: LD_INT 4
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: IN
58738: IFFALSE 58760
// SetClass ( un , rand ( 1 , 4 ) ) ;
58740: LD_VAR 0 1
58744: PPUSH
58745: LD_INT 1
58747: PPUSH
58748: LD_INT 4
58750: PPUSH
58751: CALL_OW 12
58755: PPUSH
58756: CALL_OW 336
58760: GO 58707
58762: POP
58763: POP
// end ;
58764: PPOPN 1
58766: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
58767: LD_EXP 37
58771: PUSH
58772: LD_EXP 49
58776: AND
58777: IFFALSE 58856
58779: GO 58781
58781: DISABLE
58782: LD_INT 0
58784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
58785: LD_ADDR_VAR 0 1
58789: PUSH
58790: LD_INT 22
58792: PUSH
58793: LD_OWVAR 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 21
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PPUSH
58816: CALL_OW 69
58820: ST_TO_ADDR
// if not tmp then
58821: LD_VAR 0 1
58825: NOT
58826: IFFALSE 58830
// exit ;
58828: GO 58856
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
58830: LD_VAR 0 1
58834: PUSH
58835: LD_INT 1
58837: PPUSH
58838: LD_VAR 0 1
58842: PPUSH
58843: CALL_OW 12
58847: ARRAY
58848: PPUSH
58849: LD_INT 100
58851: PPUSH
58852: CALL_OW 234
// end ;
58856: PPOPN 1
58858: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
58859: LD_EXP 37
58863: PUSH
58864: LD_EXP 51
58868: AND
58869: IFFALSE 58967
58871: GO 58873
58873: DISABLE
58874: LD_INT 0
58876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58877: LD_ADDR_VAR 0 1
58881: PUSH
58882: LD_INT 22
58884: PUSH
58885: LD_OWVAR 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 21
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PPUSH
58908: CALL_OW 69
58912: ST_TO_ADDR
// if not tmp then
58913: LD_VAR 0 1
58917: NOT
58918: IFFALSE 58922
// exit ;
58920: GO 58967
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
58922: LD_VAR 0 1
58926: PUSH
58927: LD_INT 1
58929: PPUSH
58930: LD_VAR 0 1
58934: PPUSH
58935: CALL_OW 12
58939: ARRAY
58940: PPUSH
58941: LD_INT 1
58943: PPUSH
58944: LD_INT 4
58946: PPUSH
58947: CALL_OW 12
58951: PPUSH
58952: LD_INT 3000
58954: PPUSH
58955: LD_INT 9000
58957: PPUSH
58958: CALL_OW 12
58962: PPUSH
58963: CALL_OW 492
// end ;
58967: PPOPN 1
58969: END
// every 0 0$1 trigger StreamModeActive and sDepot do
58970: LD_EXP 37
58974: PUSH
58975: LD_EXP 52
58979: AND
58980: IFFALSE 59000
58982: GO 58984
58984: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
58985: LD_INT 1
58987: PPUSH
58988: LD_OWVAR 2
58992: PPUSH
58993: LD_INT 0
58995: PPUSH
58996: CALL_OW 324
59000: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
59001: LD_EXP 37
59005: PUSH
59006: LD_EXP 53
59010: AND
59011: IFFALSE 59094
59013: GO 59015
59015: DISABLE
59016: LD_INT 0
59018: PPUSH
59019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
59020: LD_ADDR_VAR 0 2
59024: PUSH
59025: LD_INT 22
59027: PUSH
59028: LD_OWVAR 2
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 21
59039: PUSH
59040: LD_INT 3
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PPUSH
59051: CALL_OW 69
59055: ST_TO_ADDR
// if not tmp then
59056: LD_VAR 0 2
59060: NOT
59061: IFFALSE 59065
// exit ;
59063: GO 59094
// for i in tmp do
59065: LD_ADDR_VAR 0 1
59069: PUSH
59070: LD_VAR 0 2
59074: PUSH
59075: FOR_IN
59076: IFFALSE 59092
// SetBLevel ( i , 10 ) ;
59078: LD_VAR 0 1
59082: PPUSH
59083: LD_INT 10
59085: PPUSH
59086: CALL_OW 241
59090: GO 59075
59092: POP
59093: POP
// end ;
59094: PPOPN 2
59096: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
59097: LD_EXP 37
59101: PUSH
59102: LD_EXP 54
59106: AND
59107: IFFALSE 59218
59109: GO 59111
59111: DISABLE
59112: LD_INT 0
59114: PPUSH
59115: PPUSH
59116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59117: LD_ADDR_VAR 0 3
59121: PUSH
59122: LD_INT 22
59124: PUSH
59125: LD_OWVAR 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 25
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PPUSH
59148: CALL_OW 69
59152: ST_TO_ADDR
// if not tmp then
59153: LD_VAR 0 3
59157: NOT
59158: IFFALSE 59162
// exit ;
59160: GO 59218
// un := tmp [ rand ( 1 , tmp ) ] ;
59162: LD_ADDR_VAR 0 2
59166: PUSH
59167: LD_VAR 0 3
59171: PUSH
59172: LD_INT 1
59174: PPUSH
59175: LD_VAR 0 3
59179: PPUSH
59180: CALL_OW 12
59184: ARRAY
59185: ST_TO_ADDR
// if Crawls ( un ) then
59186: LD_VAR 0 2
59190: PPUSH
59191: CALL_OW 318
59195: IFFALSE 59206
// ComWalk ( un ) ;
59197: LD_VAR 0 2
59201: PPUSH
59202: CALL_OW 138
// SetClass ( un , class_sniper ) ;
59206: LD_VAR 0 2
59210: PPUSH
59211: LD_INT 5
59213: PPUSH
59214: CALL_OW 336
// end ;
59218: PPOPN 3
59220: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
59221: LD_EXP 37
59225: PUSH
59226: LD_EXP 55
59230: AND
59231: PUSH
59232: LD_OWVAR 67
59236: PUSH
59237: LD_INT 4
59239: LESS
59240: AND
59241: IFFALSE 59260
59243: GO 59245
59245: DISABLE
// begin Difficulty := Difficulty + 1 ;
59246: LD_ADDR_OWVAR 67
59250: PUSH
59251: LD_OWVAR 67
59255: PUSH
59256: LD_INT 1
59258: PLUS
59259: ST_TO_ADDR
// end ;
59260: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
59261: LD_EXP 37
59265: PUSH
59266: LD_EXP 56
59270: AND
59271: IFFALSE 59374
59273: GO 59275
59275: DISABLE
59276: LD_INT 0
59278: PPUSH
// begin for i := 1 to 5 do
59279: LD_ADDR_VAR 0 1
59283: PUSH
59284: DOUBLE
59285: LD_INT 1
59287: DEC
59288: ST_TO_ADDR
59289: LD_INT 5
59291: PUSH
59292: FOR_TO
59293: IFFALSE 59372
// begin uc_nation := nation_nature ;
59295: LD_ADDR_OWVAR 21
59299: PUSH
59300: LD_INT 0
59302: ST_TO_ADDR
// uc_side := 0 ;
59303: LD_ADDR_OWVAR 20
59307: PUSH
59308: LD_INT 0
59310: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59311: LD_ADDR_OWVAR 29
59315: PUSH
59316: LD_INT 12
59318: PUSH
59319: LD_INT 12
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: ST_TO_ADDR
// hc_agressivity := 20 ;
59326: LD_ADDR_OWVAR 35
59330: PUSH
59331: LD_INT 20
59333: ST_TO_ADDR
// hc_class := class_tiger ;
59334: LD_ADDR_OWVAR 28
59338: PUSH
59339: LD_INT 14
59341: ST_TO_ADDR
// hc_gallery :=  ;
59342: LD_ADDR_OWVAR 33
59346: PUSH
59347: LD_STRING 
59349: ST_TO_ADDR
// hc_name :=  ;
59350: LD_ADDR_OWVAR 26
59354: PUSH
59355: LD_STRING 
59357: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
59358: CALL_OW 44
59362: PPUSH
59363: LD_INT 0
59365: PPUSH
59366: CALL_OW 51
// end ;
59370: GO 59292
59372: POP
59373: POP
// end ;
59374: PPOPN 1
59376: END
// every 0 0$1 trigger StreamModeActive and sBomb do
59377: LD_EXP 37
59381: PUSH
59382: LD_EXP 57
59386: AND
59387: IFFALSE 59396
59389: GO 59391
59391: DISABLE
// StreamSibBomb ;
59392: CALL 59397 0 0
59396: END
// export function StreamSibBomb ; var i , x , y ; begin
59397: LD_INT 0
59399: PPUSH
59400: PPUSH
59401: PPUSH
59402: PPUSH
// result := false ;
59403: LD_ADDR_VAR 0 1
59407: PUSH
59408: LD_INT 0
59410: ST_TO_ADDR
// for i := 1 to 16 do
59411: LD_ADDR_VAR 0 2
59415: PUSH
59416: DOUBLE
59417: LD_INT 1
59419: DEC
59420: ST_TO_ADDR
59421: LD_INT 16
59423: PUSH
59424: FOR_TO
59425: IFFALSE 59624
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59427: LD_ADDR_VAR 0 3
59431: PUSH
59432: LD_INT 10
59434: PUSH
59435: LD_INT 20
59437: PUSH
59438: LD_INT 30
59440: PUSH
59441: LD_INT 40
59443: PUSH
59444: LD_INT 50
59446: PUSH
59447: LD_INT 60
59449: PUSH
59450: LD_INT 70
59452: PUSH
59453: LD_INT 80
59455: PUSH
59456: LD_INT 90
59458: PUSH
59459: LD_INT 100
59461: PUSH
59462: LD_INT 110
59464: PUSH
59465: LD_INT 120
59467: PUSH
59468: LD_INT 130
59470: PUSH
59471: LD_INT 140
59473: PUSH
59474: LD_INT 150
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: PPUSH
59497: LD_INT 15
59499: PPUSH
59500: CALL_OW 12
59504: ARRAY
59505: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
59506: LD_ADDR_VAR 0 4
59510: PUSH
59511: LD_INT 10
59513: PUSH
59514: LD_INT 20
59516: PUSH
59517: LD_INT 30
59519: PUSH
59520: LD_INT 40
59522: PUSH
59523: LD_INT 50
59525: PUSH
59526: LD_INT 60
59528: PUSH
59529: LD_INT 70
59531: PUSH
59532: LD_INT 80
59534: PUSH
59535: LD_INT 90
59537: PUSH
59538: LD_INT 100
59540: PUSH
59541: LD_INT 110
59543: PUSH
59544: LD_INT 120
59546: PUSH
59547: LD_INT 130
59549: PUSH
59550: LD_INT 140
59552: PUSH
59553: LD_INT 150
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PPUSH
59576: LD_INT 15
59578: PPUSH
59579: CALL_OW 12
59583: ARRAY
59584: ST_TO_ADDR
// if ValidHex ( x , y ) then
59585: LD_VAR 0 3
59589: PPUSH
59590: LD_VAR 0 4
59594: PPUSH
59595: CALL_OW 488
59599: IFFALSE 59622
// begin result := [ x , y ] ;
59601: LD_ADDR_VAR 0 1
59605: PUSH
59606: LD_VAR 0 3
59610: PUSH
59611: LD_VAR 0 4
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: ST_TO_ADDR
// break ;
59620: GO 59624
// end ; end ;
59622: GO 59424
59624: POP
59625: POP
// if result then
59626: LD_VAR 0 1
59630: IFFALSE 59690
// begin ToLua ( playSibBomb() ) ;
59632: LD_STRING playSibBomb()
59634: PPUSH
59635: CALL_OW 559
// wait ( 0 0$14 ) ;
59639: LD_INT 490
59641: PPUSH
59642: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 1
59653: ARRAY
59654: PPUSH
59655: LD_VAR 0 1
59659: PUSH
59660: LD_INT 2
59662: ARRAY
59663: PPUSH
59664: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
59668: LD_VAR 0 1
59672: PUSH
59673: LD_INT 1
59675: ARRAY
59676: PPUSH
59677: LD_VAR 0 1
59681: PUSH
59682: LD_INT 2
59684: ARRAY
59685: PPUSH
59686: CALL_OW 429
// end ; end ;
59690: LD_VAR 0 1
59694: RET
// every 0 0$1 trigger StreamModeActive and sReset do
59695: LD_EXP 37
59699: PUSH
59700: LD_EXP 59
59704: AND
59705: IFFALSE 59717
59707: GO 59709
59709: DISABLE
// YouLost (  ) ;
59710: LD_STRING 
59712: PPUSH
59713: CALL_OW 104
59717: END
// every 0 0$1 trigger StreamModeActive and sFog do
59718: LD_EXP 37
59722: PUSH
59723: LD_EXP 58
59727: AND
59728: IFFALSE 59742
59730: GO 59732
59732: DISABLE
// FogOff ( your_side ) ;
59733: LD_OWVAR 2
59737: PPUSH
59738: CALL_OW 344
59742: END
// every 0 0$1 trigger StreamModeActive and sSun do
59743: LD_EXP 37
59747: PUSH
59748: LD_EXP 60
59752: AND
59753: IFFALSE 59781
59755: GO 59757
59757: DISABLE
// begin solar_recharge_percent := 0 ;
59758: LD_ADDR_OWVAR 79
59762: PUSH
59763: LD_INT 0
59765: ST_TO_ADDR
// wait ( 5 5$00 ) ;
59766: LD_INT 10500
59768: PPUSH
59769: CALL_OW 67
// solar_recharge_percent := 100 ;
59773: LD_ADDR_OWVAR 79
59777: PUSH
59778: LD_INT 100
59780: ST_TO_ADDR
// end ;
59781: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
59782: LD_EXP 37
59786: PUSH
59787: LD_EXP 61
59791: AND
59792: IFFALSE 60031
59794: GO 59796
59796: DISABLE
59797: LD_INT 0
59799: PPUSH
59800: PPUSH
59801: PPUSH
// begin tmp := [ ] ;
59802: LD_ADDR_VAR 0 3
59806: PUSH
59807: EMPTY
59808: ST_TO_ADDR
// for i := 1 to 6 do
59809: LD_ADDR_VAR 0 1
59813: PUSH
59814: DOUBLE
59815: LD_INT 1
59817: DEC
59818: ST_TO_ADDR
59819: LD_INT 6
59821: PUSH
59822: FOR_TO
59823: IFFALSE 59928
// begin uc_nation := nation_nature ;
59825: LD_ADDR_OWVAR 21
59829: PUSH
59830: LD_INT 0
59832: ST_TO_ADDR
// uc_side := 0 ;
59833: LD_ADDR_OWVAR 20
59837: PUSH
59838: LD_INT 0
59840: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
59841: LD_ADDR_OWVAR 29
59845: PUSH
59846: LD_INT 12
59848: PUSH
59849: LD_INT 12
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// hc_agressivity := 20 ;
59856: LD_ADDR_OWVAR 35
59860: PUSH
59861: LD_INT 20
59863: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
59864: LD_ADDR_OWVAR 28
59868: PUSH
59869: LD_INT 17
59871: ST_TO_ADDR
// hc_gallery :=  ;
59872: LD_ADDR_OWVAR 33
59876: PUSH
59877: LD_STRING 
59879: ST_TO_ADDR
// hc_name :=  ;
59880: LD_ADDR_OWVAR 26
59884: PUSH
59885: LD_STRING 
59887: ST_TO_ADDR
// un := CreateHuman ;
59888: LD_ADDR_VAR 0 2
59892: PUSH
59893: CALL_OW 44
59897: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
59898: LD_VAR 0 2
59902: PPUSH
59903: LD_INT 1
59905: PPUSH
59906: CALL_OW 51
// tmp := tmp ^ un ;
59910: LD_ADDR_VAR 0 3
59914: PUSH
59915: LD_VAR 0 3
59919: PUSH
59920: LD_VAR 0 2
59924: ADD
59925: ST_TO_ADDR
// end ;
59926: GO 59822
59928: POP
59929: POP
// repeat wait ( 0 0$1 ) ;
59930: LD_INT 35
59932: PPUSH
59933: CALL_OW 67
// for un in tmp do
59937: LD_ADDR_VAR 0 2
59941: PUSH
59942: LD_VAR 0 3
59946: PUSH
59947: FOR_IN
59948: IFFALSE 60022
// begin if IsDead ( un ) then
59950: LD_VAR 0 2
59954: PPUSH
59955: CALL_OW 301
59959: IFFALSE 59979
// begin tmp := tmp diff un ;
59961: LD_ADDR_VAR 0 3
59965: PUSH
59966: LD_VAR 0 3
59970: PUSH
59971: LD_VAR 0 2
59975: DIFF
59976: ST_TO_ADDR
// continue ;
59977: GO 59947
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
59979: LD_VAR 0 2
59983: PPUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 22
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PPUSH
60001: CALL_OW 69
60005: PPUSH
60006: LD_VAR 0 2
60010: PPUSH
60011: CALL_OW 74
60015: PPUSH
60016: CALL_OW 115
// end ;
60020: GO 59947
60022: POP
60023: POP
// until not tmp ;
60024: LD_VAR 0 3
60028: NOT
60029: IFFALSE 59930
// end ;
60031: PPOPN 3
60033: END
// every 0 0$1 trigger StreamModeActive and sTroll do
60034: LD_EXP 37
60038: PUSH
60039: LD_EXP 62
60043: AND
60044: IFFALSE 60098
60046: GO 60048
60048: DISABLE
// begin ToLua ( displayTroll(); ) ;
60049: LD_STRING displayTroll();
60051: PPUSH
60052: CALL_OW 559
// wait ( 3 3$00 ) ;
60056: LD_INT 6300
60058: PPUSH
60059: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60063: LD_STRING hideTroll();
60065: PPUSH
60066: CALL_OW 559
// wait ( 1 1$00 ) ;
60070: LD_INT 2100
60072: PPUSH
60073: CALL_OW 67
// ToLua ( displayTroll(); ) ;
60077: LD_STRING displayTroll();
60079: PPUSH
60080: CALL_OW 559
// wait ( 1 1$00 ) ;
60084: LD_INT 2100
60086: PPUSH
60087: CALL_OW 67
// ToLua ( hideTroll(); ) ;
60091: LD_STRING hideTroll();
60093: PPUSH
60094: CALL_OW 559
// end ;
60098: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
60099: LD_EXP 37
60103: PUSH
60104: LD_EXP 63
60108: AND
60109: IFFALSE 60172
60111: GO 60113
60113: DISABLE
60114: LD_INT 0
60116: PPUSH
// begin p := 0 ;
60117: LD_ADDR_VAR 0 1
60121: PUSH
60122: LD_INT 0
60124: ST_TO_ADDR
// repeat game_speed := 1 ;
60125: LD_ADDR_OWVAR 65
60129: PUSH
60130: LD_INT 1
60132: ST_TO_ADDR
// wait ( 0 0$1 ) ;
60133: LD_INT 35
60135: PPUSH
60136: CALL_OW 67
// p := p + 1 ;
60140: LD_ADDR_VAR 0 1
60144: PUSH
60145: LD_VAR 0 1
60149: PUSH
60150: LD_INT 1
60152: PLUS
60153: ST_TO_ADDR
// until p >= 60 ;
60154: LD_VAR 0 1
60158: PUSH
60159: LD_INT 60
60161: GREATEREQUAL
60162: IFFALSE 60125
// game_speed := 4 ;
60164: LD_ADDR_OWVAR 65
60168: PUSH
60169: LD_INT 4
60171: ST_TO_ADDR
// end ;
60172: PPOPN 1
60174: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
60175: LD_EXP 37
60179: PUSH
60180: LD_EXP 64
60184: AND
60185: IFFALSE 60331
60187: GO 60189
60189: DISABLE
60190: LD_INT 0
60192: PPUSH
60193: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
60194: LD_ADDR_VAR 0 1
60198: PUSH
60199: LD_INT 22
60201: PUSH
60202: LD_OWVAR 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: LD_INT 30
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: EMPTY
60221: LIST
60222: LIST
60223: PUSH
60224: LD_INT 30
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: LIST
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PPUSH
60243: CALL_OW 69
60247: ST_TO_ADDR
// if not depot then
60248: LD_VAR 0 1
60252: NOT
60253: IFFALSE 60257
// exit ;
60255: GO 60331
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
60257: LD_ADDR_VAR 0 2
60261: PUSH
60262: LD_VAR 0 1
60266: PUSH
60267: LD_INT 1
60269: PPUSH
60270: LD_VAR 0 1
60274: PPUSH
60275: CALL_OW 12
60279: ARRAY
60280: PPUSH
60281: CALL_OW 274
60285: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
60286: LD_VAR 0 2
60290: PPUSH
60291: LD_INT 1
60293: PPUSH
60294: LD_INT 0
60296: PPUSH
60297: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
60301: LD_VAR 0 2
60305: PPUSH
60306: LD_INT 2
60308: PPUSH
60309: LD_INT 0
60311: PPUSH
60312: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
60316: LD_VAR 0 2
60320: PPUSH
60321: LD_INT 3
60323: PPUSH
60324: LD_INT 0
60326: PPUSH
60327: CALL_OW 277
// end ;
60331: PPOPN 2
60333: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
60334: LD_EXP 37
60338: PUSH
60339: LD_EXP 65
60343: AND
60344: IFFALSE 60441
60346: GO 60348
60348: DISABLE
60349: LD_INT 0
60351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60352: LD_ADDR_VAR 0 1
60356: PUSH
60357: LD_INT 22
60359: PUSH
60360: LD_OWVAR 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 21
60371: PUSH
60372: LD_INT 1
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 3
60381: PUSH
60382: LD_INT 23
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: LIST
60400: PPUSH
60401: CALL_OW 69
60405: ST_TO_ADDR
// if not tmp then
60406: LD_VAR 0 1
60410: NOT
60411: IFFALSE 60415
// exit ;
60413: GO 60441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
60415: LD_VAR 0 1
60419: PUSH
60420: LD_INT 1
60422: PPUSH
60423: LD_VAR 0 1
60427: PPUSH
60428: CALL_OW 12
60432: ARRAY
60433: PPUSH
60434: LD_INT 200
60436: PPUSH
60437: CALL_OW 234
// end ;
60441: PPOPN 1
60443: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
60444: LD_EXP 37
60448: PUSH
60449: LD_EXP 66
60453: AND
60454: IFFALSE 60533
60456: GO 60458
60458: DISABLE
60459: LD_INT 0
60461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
60462: LD_ADDR_VAR 0 1
60466: PUSH
60467: LD_INT 22
60469: PUSH
60470: LD_OWVAR 2
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 21
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PPUSH
60493: CALL_OW 69
60497: ST_TO_ADDR
// if not tmp then
60498: LD_VAR 0 1
60502: NOT
60503: IFFALSE 60507
// exit ;
60505: GO 60533
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
60507: LD_VAR 0 1
60511: PUSH
60512: LD_INT 1
60514: PPUSH
60515: LD_VAR 0 1
60519: PPUSH
60520: CALL_OW 12
60524: ARRAY
60525: PPUSH
60526: LD_INT 60
60528: PPUSH
60529: CALL_OW 234
// end ;
60533: PPOPN 1
60535: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
60536: LD_EXP 37
60540: PUSH
60541: LD_EXP 67
60545: AND
60546: IFFALSE 60645
60548: GO 60550
60550: DISABLE
60551: LD_INT 0
60553: PPUSH
60554: PPUSH
// begin enable ;
60555: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
60556: LD_ADDR_VAR 0 1
60560: PUSH
60561: LD_INT 22
60563: PUSH
60564: LD_OWVAR 2
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 61
60575: PUSH
60576: EMPTY
60577: LIST
60578: PUSH
60579: LD_INT 33
60581: PUSH
60582: LD_INT 2
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: PPUSH
60594: CALL_OW 69
60598: ST_TO_ADDR
// if not tmp then
60599: LD_VAR 0 1
60603: NOT
60604: IFFALSE 60608
// exit ;
60606: GO 60645
// for i in tmp do
60608: LD_ADDR_VAR 0 2
60612: PUSH
60613: LD_VAR 0 1
60617: PUSH
60618: FOR_IN
60619: IFFALSE 60643
// if IsControledBy ( i ) then
60621: LD_VAR 0 2
60625: PPUSH
60626: CALL_OW 312
60630: IFFALSE 60641
// ComUnlink ( i ) ;
60632: LD_VAR 0 2
60636: PPUSH
60637: CALL_OW 136
60641: GO 60618
60643: POP
60644: POP
// end ;
60645: PPOPN 2
60647: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
60648: LD_EXP 37
60652: PUSH
60653: LD_EXP 68
60657: AND
60658: IFFALSE 60798
60660: GO 60662
60662: DISABLE
60663: LD_INT 0
60665: PPUSH
60666: PPUSH
// begin ToLua ( displayPowell(); ) ;
60667: LD_STRING displayPowell();
60669: PPUSH
60670: CALL_OW 559
// uc_side := 0 ;
60674: LD_ADDR_OWVAR 20
60678: PUSH
60679: LD_INT 0
60681: ST_TO_ADDR
// uc_nation := 2 ;
60682: LD_ADDR_OWVAR 21
60686: PUSH
60687: LD_INT 2
60689: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
60690: LD_ADDR_OWVAR 37
60694: PUSH
60695: LD_INT 14
60697: ST_TO_ADDR
// vc_engine := engine_siberite ;
60698: LD_ADDR_OWVAR 39
60702: PUSH
60703: LD_INT 3
60705: ST_TO_ADDR
// vc_control := control_apeman ;
60706: LD_ADDR_OWVAR 38
60710: PUSH
60711: LD_INT 5
60713: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
60714: LD_ADDR_OWVAR 40
60718: PUSH
60719: LD_INT 29
60721: ST_TO_ADDR
// un := CreateVehicle ;
60722: LD_ADDR_VAR 0 2
60726: PUSH
60727: CALL_OW 45
60731: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60732: LD_VAR 0 2
60736: PPUSH
60737: LD_INT 1
60739: PPUSH
60740: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60744: LD_INT 35
60746: PPUSH
60747: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60751: LD_VAR 0 2
60755: PPUSH
60756: LD_INT 22
60758: PUSH
60759: LD_OWVAR 2
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PPUSH
60768: CALL_OW 69
60772: PPUSH
60773: LD_VAR 0 2
60777: PPUSH
60778: CALL_OW 74
60782: PPUSH
60783: CALL_OW 115
// until IsDead ( un ) ;
60787: LD_VAR 0 2
60791: PPUSH
60792: CALL_OW 301
60796: IFFALSE 60744
// end ;
60798: PPOPN 2
60800: END
// every 0 0$1 trigger StreamModeActive and sStu do
60801: LD_EXP 37
60805: PUSH
60806: LD_EXP 76
60810: AND
60811: IFFALSE 60827
60813: GO 60815
60815: DISABLE
// begin ToLua ( displayStucuk(); ) ;
60816: LD_STRING displayStucuk();
60818: PPUSH
60819: CALL_OW 559
// ResetFog ;
60823: CALL_OW 335
// end ;
60827: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
60828: LD_EXP 37
60832: PUSH
60833: LD_EXP 69
60837: AND
60838: IFFALSE 60979
60840: GO 60842
60842: DISABLE
60843: LD_INT 0
60845: PPUSH
60846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60847: LD_ADDR_VAR 0 2
60851: PUSH
60852: LD_INT 22
60854: PUSH
60855: LD_OWVAR 2
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 21
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PPUSH
60878: CALL_OW 69
60882: ST_TO_ADDR
// if not tmp then
60883: LD_VAR 0 2
60887: NOT
60888: IFFALSE 60892
// exit ;
60890: GO 60979
// un := tmp [ rand ( 1 , tmp ) ] ;
60892: LD_ADDR_VAR 0 1
60896: PUSH
60897: LD_VAR 0 2
60901: PUSH
60902: LD_INT 1
60904: PPUSH
60905: LD_VAR 0 2
60909: PPUSH
60910: CALL_OW 12
60914: ARRAY
60915: ST_TO_ADDR
// SetSide ( un , 0 ) ;
60916: LD_VAR 0 1
60920: PPUSH
60921: LD_INT 0
60923: PPUSH
60924: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
60928: LD_VAR 0 1
60932: PPUSH
60933: LD_OWVAR 3
60937: PUSH
60938: LD_VAR 0 1
60942: DIFF
60943: PPUSH
60944: LD_VAR 0 1
60948: PPUSH
60949: CALL_OW 74
60953: PPUSH
60954: CALL_OW 115
// wait ( 0 0$20 ) ;
60958: LD_INT 700
60960: PPUSH
60961: CALL_OW 67
// SetSide ( un , your_side ) ;
60965: LD_VAR 0 1
60969: PPUSH
60970: LD_OWVAR 2
60974: PPUSH
60975: CALL_OW 235
// end ;
60979: PPOPN 2
60981: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
60982: LD_EXP 37
60986: PUSH
60987: LD_EXP 70
60991: AND
60992: IFFALSE 61098
60994: GO 60996
60996: DISABLE
60997: LD_INT 0
60999: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61000: LD_ADDR_VAR 0 1
61004: PUSH
61005: LD_INT 22
61007: PUSH
61008: LD_OWVAR 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: LD_INT 30
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 30
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: LIST
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PPUSH
61049: CALL_OW 69
61053: ST_TO_ADDR
// if not depot then
61054: LD_VAR 0 1
61058: NOT
61059: IFFALSE 61063
// exit ;
61061: GO 61098
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
61063: LD_VAR 0 1
61067: PUSH
61068: LD_INT 1
61070: ARRAY
61071: PPUSH
61072: CALL_OW 250
61076: PPUSH
61077: LD_VAR 0 1
61081: PUSH
61082: LD_INT 1
61084: ARRAY
61085: PPUSH
61086: CALL_OW 251
61090: PPUSH
61091: LD_INT 70
61093: PPUSH
61094: CALL_OW 495
// end ;
61098: PPOPN 1
61100: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
61101: LD_EXP 37
61105: PUSH
61106: LD_EXP 71
61110: AND
61111: IFFALSE 61322
61113: GO 61115
61115: DISABLE
61116: LD_INT 0
61118: PPUSH
61119: PPUSH
61120: PPUSH
61121: PPUSH
61122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61123: LD_ADDR_VAR 0 5
61127: PUSH
61128: LD_INT 22
61130: PUSH
61131: LD_OWVAR 2
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 21
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PPUSH
61154: CALL_OW 69
61158: ST_TO_ADDR
// if not tmp then
61159: LD_VAR 0 5
61163: NOT
61164: IFFALSE 61168
// exit ;
61166: GO 61322
// for i in tmp do
61168: LD_ADDR_VAR 0 1
61172: PUSH
61173: LD_VAR 0 5
61177: PUSH
61178: FOR_IN
61179: IFFALSE 61320
// begin d := rand ( 0 , 5 ) ;
61181: LD_ADDR_VAR 0 4
61185: PUSH
61186: LD_INT 0
61188: PPUSH
61189: LD_INT 5
61191: PPUSH
61192: CALL_OW 12
61196: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
61197: LD_ADDR_VAR 0 2
61201: PUSH
61202: LD_VAR 0 1
61206: PPUSH
61207: CALL_OW 250
61211: PPUSH
61212: LD_VAR 0 4
61216: PPUSH
61217: LD_INT 3
61219: PPUSH
61220: LD_INT 12
61222: PPUSH
61223: CALL_OW 12
61227: PPUSH
61228: CALL_OW 272
61232: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
61233: LD_ADDR_VAR 0 3
61237: PUSH
61238: LD_VAR 0 1
61242: PPUSH
61243: CALL_OW 251
61247: PPUSH
61248: LD_VAR 0 4
61252: PPUSH
61253: LD_INT 3
61255: PPUSH
61256: LD_INT 12
61258: PPUSH
61259: CALL_OW 12
61263: PPUSH
61264: CALL_OW 273
61268: ST_TO_ADDR
// if ValidHex ( x , y ) then
61269: LD_VAR 0 2
61273: PPUSH
61274: LD_VAR 0 3
61278: PPUSH
61279: CALL_OW 488
61283: IFFALSE 61318
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
61285: LD_VAR 0 1
61289: PPUSH
61290: LD_VAR 0 2
61294: PPUSH
61295: LD_VAR 0 3
61299: PPUSH
61300: LD_INT 3
61302: PPUSH
61303: LD_INT 6
61305: PPUSH
61306: CALL_OW 12
61310: PPUSH
61311: LD_INT 1
61313: PPUSH
61314: CALL_OW 483
// end ;
61318: GO 61178
61320: POP
61321: POP
// end ;
61322: PPOPN 5
61324: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
61325: LD_EXP 37
61329: PUSH
61330: LD_EXP 72
61334: AND
61335: IFFALSE 61429
61337: GO 61339
61339: DISABLE
61340: LD_INT 0
61342: PPUSH
61343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
61344: LD_ADDR_VAR 0 2
61348: PUSH
61349: LD_INT 22
61351: PUSH
61352: LD_OWVAR 2
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 32
61363: PUSH
61364: LD_INT 1
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 21
61373: PUSH
61374: LD_INT 2
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: PPUSH
61386: CALL_OW 69
61390: ST_TO_ADDR
// if not tmp then
61391: LD_VAR 0 2
61395: NOT
61396: IFFALSE 61400
// exit ;
61398: GO 61429
// for i in tmp do
61400: LD_ADDR_VAR 0 1
61404: PUSH
61405: LD_VAR 0 2
61409: PUSH
61410: FOR_IN
61411: IFFALSE 61427
// SetFuel ( i , 0 ) ;
61413: LD_VAR 0 1
61417: PPUSH
61418: LD_INT 0
61420: PPUSH
61421: CALL_OW 240
61425: GO 61410
61427: POP
61428: POP
// end ;
61429: PPOPN 2
61431: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
61432: LD_EXP 37
61436: PUSH
61437: LD_EXP 73
61441: AND
61442: IFFALSE 61508
61444: GO 61446
61446: DISABLE
61447: LD_INT 0
61449: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61450: LD_ADDR_VAR 0 1
61454: PUSH
61455: LD_INT 22
61457: PUSH
61458: LD_OWVAR 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 30
61469: PUSH
61470: LD_INT 29
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PPUSH
61481: CALL_OW 69
61485: ST_TO_ADDR
// if not tmp then
61486: LD_VAR 0 1
61490: NOT
61491: IFFALSE 61495
// exit ;
61493: GO 61508
// DestroyUnit ( tmp [ 1 ] ) ;
61495: LD_VAR 0 1
61499: PUSH
61500: LD_INT 1
61502: ARRAY
61503: PPUSH
61504: CALL_OW 65
// end ;
61508: PPOPN 1
61510: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
61511: LD_EXP 37
61515: PUSH
61516: LD_EXP 75
61520: AND
61521: IFFALSE 61650
61523: GO 61525
61525: DISABLE
61526: LD_INT 0
61528: PPUSH
// begin uc_side := 0 ;
61529: LD_ADDR_OWVAR 20
61533: PUSH
61534: LD_INT 0
61536: ST_TO_ADDR
// uc_nation := nation_arabian ;
61537: LD_ADDR_OWVAR 21
61541: PUSH
61542: LD_INT 2
61544: ST_TO_ADDR
// hc_gallery :=  ;
61545: LD_ADDR_OWVAR 33
61549: PUSH
61550: LD_STRING 
61552: ST_TO_ADDR
// hc_name :=  ;
61553: LD_ADDR_OWVAR 26
61557: PUSH
61558: LD_STRING 
61560: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
61561: LD_INT 1
61563: PPUSH
61564: LD_INT 11
61566: PPUSH
61567: LD_INT 10
61569: PPUSH
61570: CALL_OW 380
// un := CreateHuman ;
61574: LD_ADDR_VAR 0 1
61578: PUSH
61579: CALL_OW 44
61583: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61584: LD_VAR 0 1
61588: PPUSH
61589: LD_INT 1
61591: PPUSH
61592: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
61596: LD_INT 35
61598: PPUSH
61599: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
61603: LD_VAR 0 1
61607: PPUSH
61608: LD_INT 22
61610: PUSH
61611: LD_OWVAR 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PPUSH
61620: CALL_OW 69
61624: PPUSH
61625: LD_VAR 0 1
61629: PPUSH
61630: CALL_OW 74
61634: PPUSH
61635: CALL_OW 115
// until IsDead ( un ) ;
61639: LD_VAR 0 1
61643: PPUSH
61644: CALL_OW 301
61648: IFFALSE 61596
// end ;
61650: PPOPN 1
61652: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
61653: LD_EXP 37
61657: PUSH
61658: LD_EXP 77
61662: AND
61663: IFFALSE 61675
61665: GO 61667
61667: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
61668: LD_STRING earthquake(getX(game), 0, 32)
61670: PPUSH
61671: CALL_OW 559
61675: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
61676: LD_EXP 37
61680: PUSH
61681: LD_EXP 78
61685: AND
61686: IFFALSE 61777
61688: GO 61690
61690: DISABLE
61691: LD_INT 0
61693: PPUSH
// begin enable ;
61694: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
61695: LD_ADDR_VAR 0 1
61699: PUSH
61700: LD_INT 22
61702: PUSH
61703: LD_OWVAR 2
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 21
61714: PUSH
61715: LD_INT 2
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 33
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: LIST
61736: PPUSH
61737: CALL_OW 69
61741: ST_TO_ADDR
// if not tmp then
61742: LD_VAR 0 1
61746: NOT
61747: IFFALSE 61751
// exit ;
61749: GO 61777
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61751: LD_VAR 0 1
61755: PUSH
61756: LD_INT 1
61758: PPUSH
61759: LD_VAR 0 1
61763: PPUSH
61764: CALL_OW 12
61768: ARRAY
61769: PPUSH
61770: LD_INT 1
61772: PPUSH
61773: CALL_OW 234
// end ;
61777: PPOPN 1
61779: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
61780: LD_EXP 37
61784: PUSH
61785: LD_EXP 79
61789: AND
61790: IFFALSE 61931
61792: GO 61794
61794: DISABLE
61795: LD_INT 0
61797: PPUSH
61798: PPUSH
61799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61800: LD_ADDR_VAR 0 3
61804: PUSH
61805: LD_INT 22
61807: PUSH
61808: LD_OWVAR 2
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 25
61819: PUSH
61820: LD_INT 1
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PPUSH
61831: CALL_OW 69
61835: ST_TO_ADDR
// if not tmp then
61836: LD_VAR 0 3
61840: NOT
61841: IFFALSE 61845
// exit ;
61843: GO 61931
// un := tmp [ rand ( 1 , tmp ) ] ;
61845: LD_ADDR_VAR 0 2
61849: PUSH
61850: LD_VAR 0 3
61854: PUSH
61855: LD_INT 1
61857: PPUSH
61858: LD_VAR 0 3
61862: PPUSH
61863: CALL_OW 12
61867: ARRAY
61868: ST_TO_ADDR
// if Crawls ( un ) then
61869: LD_VAR 0 2
61873: PPUSH
61874: CALL_OW 318
61878: IFFALSE 61889
// ComWalk ( un ) ;
61880: LD_VAR 0 2
61884: PPUSH
61885: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
61889: LD_VAR 0 2
61893: PPUSH
61894: LD_INT 9
61896: PPUSH
61897: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
61901: LD_INT 28
61903: PPUSH
61904: LD_OWVAR 2
61908: PPUSH
61909: LD_INT 2
61911: PPUSH
61912: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
61916: LD_INT 29
61918: PPUSH
61919: LD_OWVAR 2
61923: PPUSH
61924: LD_INT 2
61926: PPUSH
61927: CALL_OW 322
// end ;
61931: PPOPN 3
61933: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
61934: LD_EXP 37
61938: PUSH
61939: LD_EXP 80
61943: AND
61944: IFFALSE 62055
61946: GO 61948
61948: DISABLE
61949: LD_INT 0
61951: PPUSH
61952: PPUSH
61953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61954: LD_ADDR_VAR 0 3
61958: PUSH
61959: LD_INT 22
61961: PUSH
61962: LD_OWVAR 2
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 25
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PPUSH
61985: CALL_OW 69
61989: ST_TO_ADDR
// if not tmp then
61990: LD_VAR 0 3
61994: NOT
61995: IFFALSE 61999
// exit ;
61997: GO 62055
// un := tmp [ rand ( 1 , tmp ) ] ;
61999: LD_ADDR_VAR 0 2
62003: PUSH
62004: LD_VAR 0 3
62008: PUSH
62009: LD_INT 1
62011: PPUSH
62012: LD_VAR 0 3
62016: PPUSH
62017: CALL_OW 12
62021: ARRAY
62022: ST_TO_ADDR
// if Crawls ( un ) then
62023: LD_VAR 0 2
62027: PPUSH
62028: CALL_OW 318
62032: IFFALSE 62043
// ComWalk ( un ) ;
62034: LD_VAR 0 2
62038: PPUSH
62039: CALL_OW 138
// SetClass ( un , class_mortar ) ;
62043: LD_VAR 0 2
62047: PPUSH
62048: LD_INT 8
62050: PPUSH
62051: CALL_OW 336
// end ;
62055: PPOPN 3
62057: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
62058: LD_EXP 37
62062: PUSH
62063: LD_EXP 81
62067: AND
62068: IFFALSE 62212
62070: GO 62072
62072: DISABLE
62073: LD_INT 0
62075: PPUSH
62076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
62077: LD_ADDR_VAR 0 2
62081: PUSH
62082: LD_INT 22
62084: PUSH
62085: LD_OWVAR 2
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 21
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: PUSH
62107: LD_INT 34
62109: PUSH
62110: LD_INT 12
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 34
62119: PUSH
62120: LD_INT 51
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 34
62129: PUSH
62130: LD_INT 32
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: PPUSH
62148: CALL_OW 69
62152: ST_TO_ADDR
// if not tmp then
62153: LD_VAR 0 2
62157: NOT
62158: IFFALSE 62162
// exit ;
62160: GO 62212
// for i in tmp do
62162: LD_ADDR_VAR 0 1
62166: PUSH
62167: LD_VAR 0 2
62171: PUSH
62172: FOR_IN
62173: IFFALSE 62210
// if GetCargo ( i , mat_artifact ) = 0 then
62175: LD_VAR 0 1
62179: PPUSH
62180: LD_INT 4
62182: PPUSH
62183: CALL_OW 289
62187: PUSH
62188: LD_INT 0
62190: EQUAL
62191: IFFALSE 62208
// SetCargo ( i , mat_siberit , 100 ) ;
62193: LD_VAR 0 1
62197: PPUSH
62198: LD_INT 3
62200: PPUSH
62201: LD_INT 100
62203: PPUSH
62204: CALL_OW 290
62208: GO 62172
62210: POP
62211: POP
// end ;
62212: PPOPN 2
62214: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
62215: LD_EXP 37
62219: PUSH
62220: LD_EXP 82
62224: AND
62225: IFFALSE 62408
62227: GO 62229
62229: DISABLE
62230: LD_INT 0
62232: PPUSH
62233: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62234: LD_ADDR_VAR 0 2
62238: PUSH
62239: LD_INT 22
62241: PUSH
62242: LD_OWVAR 2
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PPUSH
62251: CALL_OW 69
62255: ST_TO_ADDR
// if not tmp then
62256: LD_VAR 0 2
62260: NOT
62261: IFFALSE 62265
// exit ;
62263: GO 62408
// for i := 1 to 2 do
62265: LD_ADDR_VAR 0 1
62269: PUSH
62270: DOUBLE
62271: LD_INT 1
62273: DEC
62274: ST_TO_ADDR
62275: LD_INT 2
62277: PUSH
62278: FOR_TO
62279: IFFALSE 62406
// begin uc_side := your_side ;
62281: LD_ADDR_OWVAR 20
62285: PUSH
62286: LD_OWVAR 2
62290: ST_TO_ADDR
// uc_nation := nation_american ;
62291: LD_ADDR_OWVAR 21
62295: PUSH
62296: LD_INT 1
62298: ST_TO_ADDR
// vc_chassis := us_morphling ;
62299: LD_ADDR_OWVAR 37
62303: PUSH
62304: LD_INT 5
62306: ST_TO_ADDR
// vc_engine := engine_siberite ;
62307: LD_ADDR_OWVAR 39
62311: PUSH
62312: LD_INT 3
62314: ST_TO_ADDR
// vc_control := control_computer ;
62315: LD_ADDR_OWVAR 38
62319: PUSH
62320: LD_INT 3
62322: ST_TO_ADDR
// vc_weapon := us_double_laser ;
62323: LD_ADDR_OWVAR 40
62327: PUSH
62328: LD_INT 10
62330: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
62331: LD_VAR 0 2
62335: PUSH
62336: LD_INT 1
62338: ARRAY
62339: PPUSH
62340: CALL_OW 310
62344: NOT
62345: IFFALSE 62392
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
62347: CALL_OW 45
62351: PPUSH
62352: LD_VAR 0 2
62356: PUSH
62357: LD_INT 1
62359: ARRAY
62360: PPUSH
62361: CALL_OW 250
62365: PPUSH
62366: LD_VAR 0 2
62370: PUSH
62371: LD_INT 1
62373: ARRAY
62374: PPUSH
62375: CALL_OW 251
62379: PPUSH
62380: LD_INT 12
62382: PPUSH
62383: LD_INT 1
62385: PPUSH
62386: CALL_OW 50
62390: GO 62404
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
62392: CALL_OW 45
62396: PPUSH
62397: LD_INT 1
62399: PPUSH
62400: CALL_OW 51
// end ;
62404: GO 62278
62406: POP
62407: POP
// end ;
62408: PPOPN 2
62410: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
62411: LD_EXP 37
62415: PUSH
62416: LD_EXP 83
62420: AND
62421: IFFALSE 62643
62423: GO 62425
62425: DISABLE
62426: LD_INT 0
62428: PPUSH
62429: PPUSH
62430: PPUSH
62431: PPUSH
62432: PPUSH
62433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62434: LD_ADDR_VAR 0 6
62438: PUSH
62439: LD_INT 22
62441: PUSH
62442: LD_OWVAR 2
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 21
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: LD_INT 23
62466: PUSH
62467: LD_INT 0
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: LIST
62482: PPUSH
62483: CALL_OW 69
62487: ST_TO_ADDR
// if not tmp then
62488: LD_VAR 0 6
62492: NOT
62493: IFFALSE 62497
// exit ;
62495: GO 62643
// s1 := rand ( 1 , 4 ) ;
62497: LD_ADDR_VAR 0 2
62501: PUSH
62502: LD_INT 1
62504: PPUSH
62505: LD_INT 4
62507: PPUSH
62508: CALL_OW 12
62512: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
62513: LD_ADDR_VAR 0 4
62517: PUSH
62518: LD_VAR 0 6
62522: PUSH
62523: LD_INT 1
62525: ARRAY
62526: PPUSH
62527: LD_VAR 0 2
62531: PPUSH
62532: CALL_OW 259
62536: ST_TO_ADDR
// if s1 = 1 then
62537: LD_VAR 0 2
62541: PUSH
62542: LD_INT 1
62544: EQUAL
62545: IFFALSE 62565
// s2 := rand ( 2 , 4 ) else
62547: LD_ADDR_VAR 0 3
62551: PUSH
62552: LD_INT 2
62554: PPUSH
62555: LD_INT 4
62557: PPUSH
62558: CALL_OW 12
62562: ST_TO_ADDR
62563: GO 62573
// s2 := 1 ;
62565: LD_ADDR_VAR 0 3
62569: PUSH
62570: LD_INT 1
62572: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
62573: LD_ADDR_VAR 0 5
62577: PUSH
62578: LD_VAR 0 6
62582: PUSH
62583: LD_INT 1
62585: ARRAY
62586: PPUSH
62587: LD_VAR 0 3
62591: PPUSH
62592: CALL_OW 259
62596: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
62597: LD_VAR 0 6
62601: PUSH
62602: LD_INT 1
62604: ARRAY
62605: PPUSH
62606: LD_VAR 0 2
62610: PPUSH
62611: LD_VAR 0 5
62615: PPUSH
62616: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
62620: LD_VAR 0 6
62624: PUSH
62625: LD_INT 1
62627: ARRAY
62628: PPUSH
62629: LD_VAR 0 3
62633: PPUSH
62634: LD_VAR 0 4
62638: PPUSH
62639: CALL_OW 237
// end ;
62643: PPOPN 6
62645: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
62646: LD_EXP 37
62650: PUSH
62651: LD_EXP 84
62655: AND
62656: IFFALSE 62735
62658: GO 62660
62660: DISABLE
62661: LD_INT 0
62663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
62664: LD_ADDR_VAR 0 1
62668: PUSH
62669: LD_INT 22
62671: PUSH
62672: LD_OWVAR 2
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 30
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PPUSH
62695: CALL_OW 69
62699: ST_TO_ADDR
// if not tmp then
62700: LD_VAR 0 1
62704: NOT
62705: IFFALSE 62709
// exit ;
62707: GO 62735
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
62709: LD_VAR 0 1
62713: PUSH
62714: LD_INT 1
62716: PPUSH
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 12
62726: ARRAY
62727: PPUSH
62728: LD_INT 1
62730: PPUSH
62731: CALL_OW 234
// end ;
62735: PPOPN 1
62737: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
62738: LD_EXP 37
62742: PUSH
62743: LD_EXP 85
62747: AND
62748: IFFALSE 62860
62750: GO 62752
62752: DISABLE
62753: LD_INT 0
62755: PPUSH
62756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
62757: LD_ADDR_VAR 0 2
62761: PUSH
62762: LD_INT 22
62764: PUSH
62765: LD_OWVAR 2
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: LD_INT 30
62779: PUSH
62780: LD_INT 27
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 30
62789: PUSH
62790: LD_INT 26
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 30
62799: PUSH
62800: LD_INT 28
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PPUSH
62817: CALL_OW 69
62821: ST_TO_ADDR
// if not tmp then
62822: LD_VAR 0 2
62826: NOT
62827: IFFALSE 62831
// exit ;
62829: GO 62860
// for i in tmp do
62831: LD_ADDR_VAR 0 1
62835: PUSH
62836: LD_VAR 0 2
62840: PUSH
62841: FOR_IN
62842: IFFALSE 62858
// SetLives ( i , 1 ) ;
62844: LD_VAR 0 1
62848: PPUSH
62849: LD_INT 1
62851: PPUSH
62852: CALL_OW 234
62856: GO 62841
62858: POP
62859: POP
// end ;
62860: PPOPN 2
62862: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
62863: LD_EXP 37
62867: PUSH
62868: LD_EXP 86
62872: AND
62873: IFFALSE 63160
62875: GO 62877
62877: DISABLE
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
// begin i := rand ( 1 , 7 ) ;
62883: LD_ADDR_VAR 0 1
62887: PUSH
62888: LD_INT 1
62890: PPUSH
62891: LD_INT 7
62893: PPUSH
62894: CALL_OW 12
62898: ST_TO_ADDR
// case i of 1 :
62899: LD_VAR 0 1
62903: PUSH
62904: LD_INT 1
62906: DOUBLE
62907: EQUAL
62908: IFTRUE 62912
62910: GO 62922
62912: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
62913: LD_STRING earthquake(getX(game), 0, 32)
62915: PPUSH
62916: CALL_OW 559
62920: GO 63160
62922: LD_INT 2
62924: DOUBLE
62925: EQUAL
62926: IFTRUE 62930
62928: GO 62944
62930: POP
// begin ToLua ( displayStucuk(); ) ;
62931: LD_STRING displayStucuk();
62933: PPUSH
62934: CALL_OW 559
// ResetFog ;
62938: CALL_OW 335
// end ; 3 :
62942: GO 63160
62944: LD_INT 3
62946: DOUBLE
62947: EQUAL
62948: IFTRUE 62952
62950: GO 63056
62952: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
62953: LD_ADDR_VAR 0 2
62957: PUSH
62958: LD_INT 22
62960: PUSH
62961: LD_OWVAR 2
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 25
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PPUSH
62984: CALL_OW 69
62988: ST_TO_ADDR
// if not tmp then
62989: LD_VAR 0 2
62993: NOT
62994: IFFALSE 62998
// exit ;
62996: GO 63160
// un := tmp [ rand ( 1 , tmp ) ] ;
62998: LD_ADDR_VAR 0 3
63002: PUSH
63003: LD_VAR 0 2
63007: PUSH
63008: LD_INT 1
63010: PPUSH
63011: LD_VAR 0 2
63015: PPUSH
63016: CALL_OW 12
63020: ARRAY
63021: ST_TO_ADDR
// if Crawls ( un ) then
63022: LD_VAR 0 3
63026: PPUSH
63027: CALL_OW 318
63031: IFFALSE 63042
// ComWalk ( un ) ;
63033: LD_VAR 0 3
63037: PPUSH
63038: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63042: LD_VAR 0 3
63046: PPUSH
63047: LD_INT 8
63049: PPUSH
63050: CALL_OW 336
// end ; 4 :
63054: GO 63160
63056: LD_INT 4
63058: DOUBLE
63059: EQUAL
63060: IFTRUE 63064
63062: GO 63138
63064: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63065: LD_ADDR_VAR 0 2
63069: PUSH
63070: LD_INT 22
63072: PUSH
63073: LD_OWVAR 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 30
63084: PUSH
63085: LD_INT 29
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PPUSH
63096: CALL_OW 69
63100: ST_TO_ADDR
// if not tmp then
63101: LD_VAR 0 2
63105: NOT
63106: IFFALSE 63110
// exit ;
63108: GO 63160
// CenterNowOnUnits ( tmp [ 1 ] ) ;
63110: LD_VAR 0 2
63114: PUSH
63115: LD_INT 1
63117: ARRAY
63118: PPUSH
63119: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
63123: LD_VAR 0 2
63127: PUSH
63128: LD_INT 1
63130: ARRAY
63131: PPUSH
63132: CALL_OW 65
// end ; 5 .. 7 :
63136: GO 63160
63138: LD_INT 5
63140: DOUBLE
63141: GREATEREQUAL
63142: IFFALSE 63150
63144: LD_INT 7
63146: DOUBLE
63147: LESSEQUAL
63148: IFTRUE 63152
63150: GO 63159
63152: POP
// StreamSibBomb ; end ;
63153: CALL 59397 0 0
63157: GO 63160
63159: POP
// end ;
63160: PPOPN 3
63162: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
63163: LD_EXP 37
63167: PUSH
63168: LD_EXP 87
63172: AND
63173: IFFALSE 63329
63175: GO 63177
63177: DISABLE
63178: LD_INT 0
63180: PPUSH
63181: PPUSH
63182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
63183: LD_ADDR_VAR 0 2
63187: PUSH
63188: LD_INT 81
63190: PUSH
63191: LD_OWVAR 2
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 2
63202: PUSH
63203: LD_INT 21
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 21
63215: PUSH
63216: LD_INT 2
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: LIST
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PPUSH
63232: CALL_OW 69
63236: ST_TO_ADDR
// if not tmp then
63237: LD_VAR 0 2
63241: NOT
63242: IFFALSE 63246
// exit ;
63244: GO 63329
// p := 0 ;
63246: LD_ADDR_VAR 0 3
63250: PUSH
63251: LD_INT 0
63253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63254: LD_INT 35
63256: PPUSH
63257: CALL_OW 67
// p := p + 1 ;
63261: LD_ADDR_VAR 0 3
63265: PUSH
63266: LD_VAR 0 3
63270: PUSH
63271: LD_INT 1
63273: PLUS
63274: ST_TO_ADDR
// for i in tmp do
63275: LD_ADDR_VAR 0 1
63279: PUSH
63280: LD_VAR 0 2
63284: PUSH
63285: FOR_IN
63286: IFFALSE 63317
// if GetLives ( i ) < 1000 then
63288: LD_VAR 0 1
63292: PPUSH
63293: CALL_OW 256
63297: PUSH
63298: LD_INT 1000
63300: LESS
63301: IFFALSE 63315
// SetLives ( i , 1000 ) ;
63303: LD_VAR 0 1
63307: PPUSH
63308: LD_INT 1000
63310: PPUSH
63311: CALL_OW 234
63315: GO 63285
63317: POP
63318: POP
// until p > 20 ;
63319: LD_VAR 0 3
63323: PUSH
63324: LD_INT 20
63326: GREATER
63327: IFFALSE 63254
// end ;
63329: PPOPN 3
63331: END
// every 0 0$1 trigger StreamModeActive and sTime do
63332: LD_EXP 37
63336: PUSH
63337: LD_EXP 88
63341: AND
63342: IFFALSE 63377
63344: GO 63346
63346: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
63347: LD_INT 28
63349: PPUSH
63350: LD_OWVAR 2
63354: PPUSH
63355: LD_INT 2
63357: PPUSH
63358: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
63362: LD_INT 30
63364: PPUSH
63365: LD_OWVAR 2
63369: PPUSH
63370: LD_INT 2
63372: PPUSH
63373: CALL_OW 322
// end ;
63377: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
63378: LD_EXP 37
63382: PUSH
63383: LD_EXP 89
63387: AND
63388: IFFALSE 63509
63390: GO 63392
63392: DISABLE
63393: LD_INT 0
63395: PPUSH
63396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63397: LD_ADDR_VAR 0 2
63401: PUSH
63402: LD_INT 22
63404: PUSH
63405: LD_OWVAR 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 21
63416: PUSH
63417: LD_INT 1
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 3
63426: PUSH
63427: LD_INT 23
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: LIST
63445: PPUSH
63446: CALL_OW 69
63450: ST_TO_ADDR
// if not tmp then
63451: LD_VAR 0 2
63455: NOT
63456: IFFALSE 63460
// exit ;
63458: GO 63509
// for i in tmp do
63460: LD_ADDR_VAR 0 1
63464: PUSH
63465: LD_VAR 0 2
63469: PUSH
63470: FOR_IN
63471: IFFALSE 63507
// begin if Crawls ( i ) then
63473: LD_VAR 0 1
63477: PPUSH
63478: CALL_OW 318
63482: IFFALSE 63493
// ComWalk ( i ) ;
63484: LD_VAR 0 1
63488: PPUSH
63489: CALL_OW 138
// SetClass ( i , 2 ) ;
63493: LD_VAR 0 1
63497: PPUSH
63498: LD_INT 2
63500: PPUSH
63501: CALL_OW 336
// end ;
63505: GO 63470
63507: POP
63508: POP
// end ;
63509: PPOPN 2
63511: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
63512: LD_EXP 37
63516: PUSH
63517: LD_EXP 90
63521: AND
63522: IFFALSE 63810
63524: GO 63526
63526: DISABLE
63527: LD_INT 0
63529: PPUSH
63530: PPUSH
63531: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
63532: LD_OWVAR 2
63536: PPUSH
63537: LD_INT 9
63539: PPUSH
63540: LD_INT 1
63542: PPUSH
63543: LD_INT 1
63545: PPUSH
63546: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
63550: LD_INT 9
63552: PPUSH
63553: LD_OWVAR 2
63557: PPUSH
63558: CALL_OW 343
// uc_side := 9 ;
63562: LD_ADDR_OWVAR 20
63566: PUSH
63567: LD_INT 9
63569: ST_TO_ADDR
// uc_nation := 2 ;
63570: LD_ADDR_OWVAR 21
63574: PUSH
63575: LD_INT 2
63577: ST_TO_ADDR
// hc_name := Dark Warrior ;
63578: LD_ADDR_OWVAR 26
63582: PUSH
63583: LD_STRING Dark Warrior
63585: ST_TO_ADDR
// hc_gallery :=  ;
63586: LD_ADDR_OWVAR 33
63590: PUSH
63591: LD_STRING 
63593: ST_TO_ADDR
// hc_noskilllimit := true ;
63594: LD_ADDR_OWVAR 76
63598: PUSH
63599: LD_INT 1
63601: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
63602: LD_ADDR_OWVAR 31
63606: PUSH
63607: LD_INT 30
63609: PUSH
63610: LD_INT 30
63612: PUSH
63613: LD_INT 30
63615: PUSH
63616: LD_INT 30
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// un := CreateHuman ;
63625: LD_ADDR_VAR 0 3
63629: PUSH
63630: CALL_OW 44
63634: ST_TO_ADDR
// hc_noskilllimit := false ;
63635: LD_ADDR_OWVAR 76
63639: PUSH
63640: LD_INT 0
63642: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63643: LD_VAR 0 3
63647: PPUSH
63648: LD_INT 1
63650: PPUSH
63651: CALL_OW 51
// ToLua ( playRanger() ) ;
63655: LD_STRING playRanger()
63657: PPUSH
63658: CALL_OW 559
// p := 0 ;
63662: LD_ADDR_VAR 0 2
63666: PUSH
63667: LD_INT 0
63669: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
63670: LD_INT 35
63672: PPUSH
63673: CALL_OW 67
// p := p + 1 ;
63677: LD_ADDR_VAR 0 2
63681: PUSH
63682: LD_VAR 0 2
63686: PUSH
63687: LD_INT 1
63689: PLUS
63690: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
63691: LD_VAR 0 3
63695: PPUSH
63696: CALL_OW 256
63700: PUSH
63701: LD_INT 1000
63703: LESS
63704: IFFALSE 63718
// SetLives ( un , 1000 ) ;
63706: LD_VAR 0 3
63710: PPUSH
63711: LD_INT 1000
63713: PPUSH
63714: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
63718: LD_VAR 0 3
63722: PPUSH
63723: LD_INT 81
63725: PUSH
63726: LD_OWVAR 2
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 91
63737: PUSH
63738: LD_VAR 0 3
63742: PUSH
63743: LD_INT 30
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PPUSH
63755: CALL_OW 69
63759: PPUSH
63760: LD_VAR 0 3
63764: PPUSH
63765: CALL_OW 74
63769: PPUSH
63770: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
63774: LD_VAR 0 2
63778: PUSH
63779: LD_INT 80
63781: GREATER
63782: PUSH
63783: LD_VAR 0 3
63787: PPUSH
63788: CALL_OW 301
63792: OR
63793: IFFALSE 63670
// if un then
63795: LD_VAR 0 3
63799: IFFALSE 63810
// RemoveUnit ( un ) ;
63801: LD_VAR 0 3
63805: PPUSH
63806: CALL_OW 64
// end ;
63810: PPOPN 3
63812: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
63813: LD_EXP 91
63817: IFFALSE 63933
63819: GO 63821
63821: DISABLE
63822: LD_INT 0
63824: PPUSH
63825: PPUSH
63826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63827: LD_ADDR_VAR 0 2
63831: PUSH
63832: LD_INT 81
63834: PUSH
63835: LD_OWVAR 2
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 21
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PPUSH
63858: CALL_OW 69
63862: ST_TO_ADDR
// ToLua ( playComputer() ) ;
63863: LD_STRING playComputer()
63865: PPUSH
63866: CALL_OW 559
// if not tmp then
63870: LD_VAR 0 2
63874: NOT
63875: IFFALSE 63879
// exit ;
63877: GO 63933
// for i in tmp do
63879: LD_ADDR_VAR 0 1
63883: PUSH
63884: LD_VAR 0 2
63888: PUSH
63889: FOR_IN
63890: IFFALSE 63931
// for j := 1 to 4 do
63892: LD_ADDR_VAR 0 3
63896: PUSH
63897: DOUBLE
63898: LD_INT 1
63900: DEC
63901: ST_TO_ADDR
63902: LD_INT 4
63904: PUSH
63905: FOR_TO
63906: IFFALSE 63927
// SetSkill ( i , j , 10 ) ;
63908: LD_VAR 0 1
63912: PPUSH
63913: LD_VAR 0 3
63917: PPUSH
63918: LD_INT 10
63920: PPUSH
63921: CALL_OW 237
63925: GO 63905
63927: POP
63928: POP
63929: GO 63889
63931: POP
63932: POP
// end ;
63933: PPOPN 3
63935: END
// every 0 0$1 trigger s30 do var i , tmp ;
63936: LD_EXP 92
63940: IFFALSE 64009
63942: GO 63944
63944: DISABLE
63945: LD_INT 0
63947: PPUSH
63948: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63949: LD_ADDR_VAR 0 2
63953: PUSH
63954: LD_INT 22
63956: PUSH
63957: LD_OWVAR 2
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PPUSH
63966: CALL_OW 69
63970: ST_TO_ADDR
// if not tmp then
63971: LD_VAR 0 2
63975: NOT
63976: IFFALSE 63980
// exit ;
63978: GO 64009
// for i in tmp do
63980: LD_ADDR_VAR 0 1
63984: PUSH
63985: LD_VAR 0 2
63989: PUSH
63990: FOR_IN
63991: IFFALSE 64007
// SetLives ( i , 300 ) ;
63993: LD_VAR 0 1
63997: PPUSH
63998: LD_INT 300
64000: PPUSH
64001: CALL_OW 234
64005: GO 63990
64007: POP
64008: POP
// end ;
64009: PPOPN 2
64011: END
// every 0 0$1 trigger s60 do var i , tmp ;
64012: LD_EXP 93
64016: IFFALSE 64085
64018: GO 64020
64020: DISABLE
64021: LD_INT 0
64023: PPUSH
64024: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64025: LD_ADDR_VAR 0 2
64029: PUSH
64030: LD_INT 22
64032: PUSH
64033: LD_OWVAR 2
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PPUSH
64042: CALL_OW 69
64046: ST_TO_ADDR
// if not tmp then
64047: LD_VAR 0 2
64051: NOT
64052: IFFALSE 64056
// exit ;
64054: GO 64085
// for i in tmp do
64056: LD_ADDR_VAR 0 1
64060: PUSH
64061: LD_VAR 0 2
64065: PUSH
64066: FOR_IN
64067: IFFALSE 64083
// SetLives ( i , 600 ) ;
64069: LD_VAR 0 1
64073: PPUSH
64074: LD_INT 600
64076: PPUSH
64077: CALL_OW 234
64081: GO 64066
64083: POP
64084: POP
// end ;
64085: PPOPN 2
64087: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
64088: LD_INT 0
64090: PPUSH
// case cmd of 301 :
64091: LD_VAR 0 1
64095: PUSH
64096: LD_INT 301
64098: DOUBLE
64099: EQUAL
64100: IFTRUE 64104
64102: GO 64136
64104: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
64105: LD_VAR 0 6
64109: PPUSH
64110: LD_VAR 0 7
64114: PPUSH
64115: LD_VAR 0 8
64119: PPUSH
64120: LD_VAR 0 4
64124: PPUSH
64125: LD_VAR 0 5
64129: PPUSH
64130: CALL 65345 0 5
64134: GO 64257
64136: LD_INT 302
64138: DOUBLE
64139: EQUAL
64140: IFTRUE 64144
64142: GO 64181
64144: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
64145: LD_VAR 0 6
64149: PPUSH
64150: LD_VAR 0 7
64154: PPUSH
64155: LD_VAR 0 8
64159: PPUSH
64160: LD_VAR 0 9
64164: PPUSH
64165: LD_VAR 0 4
64169: PPUSH
64170: LD_VAR 0 5
64174: PPUSH
64175: CALL 65436 0 6
64179: GO 64257
64181: LD_INT 303
64183: DOUBLE
64184: EQUAL
64185: IFTRUE 64189
64187: GO 64226
64189: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
64190: LD_VAR 0 6
64194: PPUSH
64195: LD_VAR 0 7
64199: PPUSH
64200: LD_VAR 0 8
64204: PPUSH
64205: LD_VAR 0 9
64209: PPUSH
64210: LD_VAR 0 4
64214: PPUSH
64215: LD_VAR 0 5
64219: PPUSH
64220: CALL 64262 0 6
64224: GO 64257
64226: LD_INT 304
64228: DOUBLE
64229: EQUAL
64230: IFTRUE 64234
64232: GO 64256
64234: POP
// hHackTeleport ( unit , x , y ) ; end ;
64235: LD_VAR 0 2
64239: PPUSH
64240: LD_VAR 0 4
64244: PPUSH
64245: LD_VAR 0 5
64249: PPUSH
64250: CALL 66029 0 3
64254: GO 64257
64256: POP
// end ;
64257: LD_VAR 0 12
64261: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
64262: LD_INT 0
64264: PPUSH
64265: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
64266: LD_VAR 0 1
64270: PUSH
64271: LD_INT 1
64273: LESS
64274: PUSH
64275: LD_VAR 0 1
64279: PUSH
64280: LD_INT 3
64282: GREATER
64283: OR
64284: PUSH
64285: LD_VAR 0 5
64289: PPUSH
64290: LD_VAR 0 6
64294: PPUSH
64295: CALL_OW 428
64299: OR
64300: IFFALSE 64304
// exit ;
64302: GO 65032
// uc_side := your_side ;
64304: LD_ADDR_OWVAR 20
64308: PUSH
64309: LD_OWVAR 2
64313: ST_TO_ADDR
// uc_nation := nation ;
64314: LD_ADDR_OWVAR 21
64318: PUSH
64319: LD_VAR 0 1
64323: ST_TO_ADDR
// bc_level = 1 ;
64324: LD_ADDR_OWVAR 43
64328: PUSH
64329: LD_INT 1
64331: ST_TO_ADDR
// case btype of 1 :
64332: LD_VAR 0 2
64336: PUSH
64337: LD_INT 1
64339: DOUBLE
64340: EQUAL
64341: IFTRUE 64345
64343: GO 64356
64345: POP
// bc_type := b_depot ; 2 :
64346: LD_ADDR_OWVAR 42
64350: PUSH
64351: LD_INT 0
64353: ST_TO_ADDR
64354: GO 64976
64356: LD_INT 2
64358: DOUBLE
64359: EQUAL
64360: IFTRUE 64364
64362: GO 64375
64364: POP
// bc_type := b_warehouse ; 3 :
64365: LD_ADDR_OWVAR 42
64369: PUSH
64370: LD_INT 1
64372: ST_TO_ADDR
64373: GO 64976
64375: LD_INT 3
64377: DOUBLE
64378: EQUAL
64379: IFTRUE 64383
64381: GO 64394
64383: POP
// bc_type := b_lab ; 4 .. 9 :
64384: LD_ADDR_OWVAR 42
64388: PUSH
64389: LD_INT 6
64391: ST_TO_ADDR
64392: GO 64976
64394: LD_INT 4
64396: DOUBLE
64397: GREATEREQUAL
64398: IFFALSE 64406
64400: LD_INT 9
64402: DOUBLE
64403: LESSEQUAL
64404: IFTRUE 64408
64406: GO 64468
64408: POP
// begin bc_type := b_lab_half ;
64409: LD_ADDR_OWVAR 42
64413: PUSH
64414: LD_INT 7
64416: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
64417: LD_ADDR_OWVAR 44
64421: PUSH
64422: LD_INT 10
64424: PUSH
64425: LD_INT 11
64427: PUSH
64428: LD_INT 12
64430: PUSH
64431: LD_INT 15
64433: PUSH
64434: LD_INT 14
64436: PUSH
64437: LD_INT 13
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: PUSH
64448: LD_VAR 0 2
64452: PUSH
64453: LD_INT 3
64455: MINUS
64456: ARRAY
64457: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
64458: LD_ADDR_OWVAR 45
64462: PUSH
64463: LD_INT 9
64465: ST_TO_ADDR
// end ; 10 .. 13 :
64466: GO 64976
64468: LD_INT 10
64470: DOUBLE
64471: GREATEREQUAL
64472: IFFALSE 64480
64474: LD_INT 13
64476: DOUBLE
64477: LESSEQUAL
64478: IFTRUE 64482
64480: GO 64559
64482: POP
// begin bc_type := b_lab_full ;
64483: LD_ADDR_OWVAR 42
64487: PUSH
64488: LD_INT 8
64490: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
64491: LD_ADDR_OWVAR 44
64495: PUSH
64496: LD_INT 10
64498: PUSH
64499: LD_INT 12
64501: PUSH
64502: LD_INT 14
64504: PUSH
64505: LD_INT 13
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: PUSH
64514: LD_VAR 0 2
64518: PUSH
64519: LD_INT 9
64521: MINUS
64522: ARRAY
64523: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
64524: LD_ADDR_OWVAR 45
64528: PUSH
64529: LD_INT 11
64531: PUSH
64532: LD_INT 15
64534: PUSH
64535: LD_INT 12
64537: PUSH
64538: LD_INT 15
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: PUSH
64547: LD_VAR 0 2
64551: PUSH
64552: LD_INT 9
64554: MINUS
64555: ARRAY
64556: ST_TO_ADDR
// end ; 14 :
64557: GO 64976
64559: LD_INT 14
64561: DOUBLE
64562: EQUAL
64563: IFTRUE 64567
64565: GO 64578
64567: POP
// bc_type := b_workshop ; 15 :
64568: LD_ADDR_OWVAR 42
64572: PUSH
64573: LD_INT 2
64575: ST_TO_ADDR
64576: GO 64976
64578: LD_INT 15
64580: DOUBLE
64581: EQUAL
64582: IFTRUE 64586
64584: GO 64597
64586: POP
// bc_type := b_factory ; 16 :
64587: LD_ADDR_OWVAR 42
64591: PUSH
64592: LD_INT 3
64594: ST_TO_ADDR
64595: GO 64976
64597: LD_INT 16
64599: DOUBLE
64600: EQUAL
64601: IFTRUE 64605
64603: GO 64616
64605: POP
// bc_type := b_ext_gun ; 17 :
64606: LD_ADDR_OWVAR 42
64610: PUSH
64611: LD_INT 17
64613: ST_TO_ADDR
64614: GO 64976
64616: LD_INT 17
64618: DOUBLE
64619: EQUAL
64620: IFTRUE 64624
64622: GO 64652
64624: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
64625: LD_ADDR_OWVAR 42
64629: PUSH
64630: LD_INT 19
64632: PUSH
64633: LD_INT 23
64635: PUSH
64636: LD_INT 19
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: PUSH
64644: LD_VAR 0 1
64648: ARRAY
64649: ST_TO_ADDR
64650: GO 64976
64652: LD_INT 18
64654: DOUBLE
64655: EQUAL
64656: IFTRUE 64660
64658: GO 64671
64660: POP
// bc_type := b_ext_radar ; 19 :
64661: LD_ADDR_OWVAR 42
64665: PUSH
64666: LD_INT 20
64668: ST_TO_ADDR
64669: GO 64976
64671: LD_INT 19
64673: DOUBLE
64674: EQUAL
64675: IFTRUE 64679
64677: GO 64690
64679: POP
// bc_type := b_ext_radio ; 20 :
64680: LD_ADDR_OWVAR 42
64684: PUSH
64685: LD_INT 22
64687: ST_TO_ADDR
64688: GO 64976
64690: LD_INT 20
64692: DOUBLE
64693: EQUAL
64694: IFTRUE 64698
64696: GO 64709
64698: POP
// bc_type := b_ext_siberium ; 21 :
64699: LD_ADDR_OWVAR 42
64703: PUSH
64704: LD_INT 21
64706: ST_TO_ADDR
64707: GO 64976
64709: LD_INT 21
64711: DOUBLE
64712: EQUAL
64713: IFTRUE 64717
64715: GO 64728
64717: POP
// bc_type := b_ext_computer ; 22 :
64718: LD_ADDR_OWVAR 42
64722: PUSH
64723: LD_INT 24
64725: ST_TO_ADDR
64726: GO 64976
64728: LD_INT 22
64730: DOUBLE
64731: EQUAL
64732: IFTRUE 64736
64734: GO 64747
64736: POP
// bc_type := b_ext_track ; 23 :
64737: LD_ADDR_OWVAR 42
64741: PUSH
64742: LD_INT 16
64744: ST_TO_ADDR
64745: GO 64976
64747: LD_INT 23
64749: DOUBLE
64750: EQUAL
64751: IFTRUE 64755
64753: GO 64766
64755: POP
// bc_type := b_ext_laser ; 24 :
64756: LD_ADDR_OWVAR 42
64760: PUSH
64761: LD_INT 25
64763: ST_TO_ADDR
64764: GO 64976
64766: LD_INT 24
64768: DOUBLE
64769: EQUAL
64770: IFTRUE 64774
64772: GO 64785
64774: POP
// bc_type := b_control_tower ; 25 :
64775: LD_ADDR_OWVAR 42
64779: PUSH
64780: LD_INT 36
64782: ST_TO_ADDR
64783: GO 64976
64785: LD_INT 25
64787: DOUBLE
64788: EQUAL
64789: IFTRUE 64793
64791: GO 64804
64793: POP
// bc_type := b_breastwork ; 26 :
64794: LD_ADDR_OWVAR 42
64798: PUSH
64799: LD_INT 31
64801: ST_TO_ADDR
64802: GO 64976
64804: LD_INT 26
64806: DOUBLE
64807: EQUAL
64808: IFTRUE 64812
64810: GO 64823
64812: POP
// bc_type := b_bunker ; 27 :
64813: LD_ADDR_OWVAR 42
64817: PUSH
64818: LD_INT 32
64820: ST_TO_ADDR
64821: GO 64976
64823: LD_INT 27
64825: DOUBLE
64826: EQUAL
64827: IFTRUE 64831
64829: GO 64842
64831: POP
// bc_type := b_turret ; 28 :
64832: LD_ADDR_OWVAR 42
64836: PUSH
64837: LD_INT 33
64839: ST_TO_ADDR
64840: GO 64976
64842: LD_INT 28
64844: DOUBLE
64845: EQUAL
64846: IFTRUE 64850
64848: GO 64861
64850: POP
// bc_type := b_armoury ; 29 :
64851: LD_ADDR_OWVAR 42
64855: PUSH
64856: LD_INT 4
64858: ST_TO_ADDR
64859: GO 64976
64861: LD_INT 29
64863: DOUBLE
64864: EQUAL
64865: IFTRUE 64869
64867: GO 64880
64869: POP
// bc_type := b_barracks ; 30 :
64870: LD_ADDR_OWVAR 42
64874: PUSH
64875: LD_INT 5
64877: ST_TO_ADDR
64878: GO 64976
64880: LD_INT 30
64882: DOUBLE
64883: EQUAL
64884: IFTRUE 64888
64886: GO 64899
64888: POP
// bc_type := b_solar_power ; 31 :
64889: LD_ADDR_OWVAR 42
64893: PUSH
64894: LD_INT 27
64896: ST_TO_ADDR
64897: GO 64976
64899: LD_INT 31
64901: DOUBLE
64902: EQUAL
64903: IFTRUE 64907
64905: GO 64918
64907: POP
// bc_type := b_oil_power ; 32 :
64908: LD_ADDR_OWVAR 42
64912: PUSH
64913: LD_INT 26
64915: ST_TO_ADDR
64916: GO 64976
64918: LD_INT 32
64920: DOUBLE
64921: EQUAL
64922: IFTRUE 64926
64924: GO 64937
64926: POP
// bc_type := b_siberite_power ; 33 :
64927: LD_ADDR_OWVAR 42
64931: PUSH
64932: LD_INT 28
64934: ST_TO_ADDR
64935: GO 64976
64937: LD_INT 33
64939: DOUBLE
64940: EQUAL
64941: IFTRUE 64945
64943: GO 64956
64945: POP
// bc_type := b_oil_mine ; 34 :
64946: LD_ADDR_OWVAR 42
64950: PUSH
64951: LD_INT 29
64953: ST_TO_ADDR
64954: GO 64976
64956: LD_INT 34
64958: DOUBLE
64959: EQUAL
64960: IFTRUE 64964
64962: GO 64975
64964: POP
// bc_type := b_siberite_mine ; end ;
64965: LD_ADDR_OWVAR 42
64969: PUSH
64970: LD_INT 30
64972: ST_TO_ADDR
64973: GO 64976
64975: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
64976: LD_ADDR_VAR 0 8
64980: PUSH
64981: LD_VAR 0 5
64985: PPUSH
64986: LD_VAR 0 6
64990: PPUSH
64991: LD_VAR 0 3
64995: PPUSH
64996: CALL_OW 47
65000: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
65001: LD_OWVAR 42
65005: PUSH
65006: LD_INT 32
65008: PUSH
65009: LD_INT 33
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: IN
65016: IFFALSE 65032
// PlaceWeaponTurret ( b , weapon ) ;
65018: LD_VAR 0 8
65022: PPUSH
65023: LD_VAR 0 4
65027: PPUSH
65028: CALL_OW 431
// end ;
65032: LD_VAR 0 7
65036: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
65037: LD_INT 0
65039: PPUSH
65040: PPUSH
65041: PPUSH
65042: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65043: LD_ADDR_VAR 0 4
65047: PUSH
65048: LD_INT 22
65050: PUSH
65051: LD_OWVAR 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 30
65065: PUSH
65066: LD_INT 0
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 30
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: LIST
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PPUSH
65092: CALL_OW 69
65096: ST_TO_ADDR
// if not tmp then
65097: LD_VAR 0 4
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65165
// for i in tmp do
65106: LD_ADDR_VAR 0 2
65110: PUSH
65111: LD_VAR 0 4
65115: PUSH
65116: FOR_IN
65117: IFFALSE 65163
// for j = 1 to 3 do
65119: LD_ADDR_VAR 0 3
65123: PUSH
65124: DOUBLE
65125: LD_INT 1
65127: DEC
65128: ST_TO_ADDR
65129: LD_INT 3
65131: PUSH
65132: FOR_TO
65133: IFFALSE 65159
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
65135: LD_VAR 0 2
65139: PPUSH
65140: CALL_OW 274
65144: PPUSH
65145: LD_VAR 0 3
65149: PPUSH
65150: LD_INT 99999
65152: PPUSH
65153: CALL_OW 277
65157: GO 65132
65159: POP
65160: POP
65161: GO 65116
65163: POP
65164: POP
// end ;
65165: LD_VAR 0 1
65169: RET
// export function hHackSetLevel10 ; var i , j ; begin
65170: LD_INT 0
65172: PPUSH
65173: PPUSH
65174: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65175: LD_ADDR_VAR 0 2
65179: PUSH
65180: LD_INT 21
65182: PUSH
65183: LD_INT 1
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PPUSH
65190: CALL_OW 69
65194: PUSH
65195: FOR_IN
65196: IFFALSE 65248
// if IsSelected ( i ) then
65198: LD_VAR 0 2
65202: PPUSH
65203: CALL_OW 306
65207: IFFALSE 65246
// begin for j := 1 to 4 do
65209: LD_ADDR_VAR 0 3
65213: PUSH
65214: DOUBLE
65215: LD_INT 1
65217: DEC
65218: ST_TO_ADDR
65219: LD_INT 4
65221: PUSH
65222: FOR_TO
65223: IFFALSE 65244
// SetSkill ( i , j , 10 ) ;
65225: LD_VAR 0 2
65229: PPUSH
65230: LD_VAR 0 3
65234: PPUSH
65235: LD_INT 10
65237: PPUSH
65238: CALL_OW 237
65242: GO 65222
65244: POP
65245: POP
// end ;
65246: GO 65195
65248: POP
65249: POP
// end ;
65250: LD_VAR 0 1
65254: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
65255: LD_INT 0
65257: PPUSH
65258: PPUSH
65259: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
65260: LD_ADDR_VAR 0 2
65264: PUSH
65265: LD_INT 22
65267: PUSH
65268: LD_OWVAR 2
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 21
65279: PUSH
65280: LD_INT 1
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PPUSH
65291: CALL_OW 69
65295: PUSH
65296: FOR_IN
65297: IFFALSE 65338
// begin for j := 1 to 4 do
65299: LD_ADDR_VAR 0 3
65303: PUSH
65304: DOUBLE
65305: LD_INT 1
65307: DEC
65308: ST_TO_ADDR
65309: LD_INT 4
65311: PUSH
65312: FOR_TO
65313: IFFALSE 65334
// SetSkill ( i , j , 10 ) ;
65315: LD_VAR 0 2
65319: PPUSH
65320: LD_VAR 0 3
65324: PPUSH
65325: LD_INT 10
65327: PPUSH
65328: CALL_OW 237
65332: GO 65312
65334: POP
65335: POP
// end ;
65336: GO 65296
65338: POP
65339: POP
// end ;
65340: LD_VAR 0 1
65344: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
65345: LD_INT 0
65347: PPUSH
// uc_side := your_side ;
65348: LD_ADDR_OWVAR 20
65352: PUSH
65353: LD_OWVAR 2
65357: ST_TO_ADDR
// uc_nation := nation ;
65358: LD_ADDR_OWVAR 21
65362: PUSH
65363: LD_VAR 0 1
65367: ST_TO_ADDR
// InitHc ;
65368: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
65372: LD_INT 0
65374: PPUSH
65375: LD_VAR 0 2
65379: PPUSH
65380: LD_VAR 0 3
65384: PPUSH
65385: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
65389: LD_VAR 0 4
65393: PPUSH
65394: LD_VAR 0 5
65398: PPUSH
65399: CALL_OW 428
65403: PUSH
65404: LD_INT 0
65406: EQUAL
65407: IFFALSE 65431
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
65409: CALL_OW 44
65413: PPUSH
65414: LD_VAR 0 4
65418: PPUSH
65419: LD_VAR 0 5
65423: PPUSH
65424: LD_INT 1
65426: PPUSH
65427: CALL_OW 48
// end ;
65431: LD_VAR 0 6
65435: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
65436: LD_INT 0
65438: PPUSH
65439: PPUSH
// uc_side := your_side ;
65440: LD_ADDR_OWVAR 20
65444: PUSH
65445: LD_OWVAR 2
65449: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
65450: LD_VAR 0 1
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: LD_INT 2
65460: PUSH
65461: LD_INT 3
65463: PUSH
65464: LD_INT 4
65466: PUSH
65467: LD_INT 5
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: IN
65477: IFFALSE 65489
// uc_nation := nation_american else
65479: LD_ADDR_OWVAR 21
65483: PUSH
65484: LD_INT 1
65486: ST_TO_ADDR
65487: GO 65532
// if chassis in [ 11 , 12 , 13 , 14 ] then
65489: LD_VAR 0 1
65493: PUSH
65494: LD_INT 11
65496: PUSH
65497: LD_INT 12
65499: PUSH
65500: LD_INT 13
65502: PUSH
65503: LD_INT 14
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: IN
65512: IFFALSE 65524
// uc_nation := nation_arabian else
65514: LD_ADDR_OWVAR 21
65518: PUSH
65519: LD_INT 2
65521: ST_TO_ADDR
65522: GO 65532
// uc_nation := nation_russian ;
65524: LD_ADDR_OWVAR 21
65528: PUSH
65529: LD_INT 3
65531: ST_TO_ADDR
// vc_chassis := chassis ;
65532: LD_ADDR_OWVAR 37
65536: PUSH
65537: LD_VAR 0 1
65541: ST_TO_ADDR
// vc_engine := engine ;
65542: LD_ADDR_OWVAR 39
65546: PUSH
65547: LD_VAR 0 2
65551: ST_TO_ADDR
// vc_control := control ;
65552: LD_ADDR_OWVAR 38
65556: PUSH
65557: LD_VAR 0 3
65561: ST_TO_ADDR
// vc_weapon := weapon ;
65562: LD_ADDR_OWVAR 40
65566: PUSH
65567: LD_VAR 0 4
65571: ST_TO_ADDR
// un := CreateVehicle ;
65572: LD_ADDR_VAR 0 8
65576: PUSH
65577: CALL_OW 45
65581: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
65582: LD_VAR 0 8
65586: PPUSH
65587: LD_INT 0
65589: PPUSH
65590: LD_INT 5
65592: PPUSH
65593: CALL_OW 12
65597: PPUSH
65598: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
65602: LD_VAR 0 8
65606: PPUSH
65607: LD_VAR 0 5
65611: PPUSH
65612: LD_VAR 0 6
65616: PPUSH
65617: LD_INT 1
65619: PPUSH
65620: CALL_OW 48
// end ;
65624: LD_VAR 0 7
65628: RET
// export hInvincible ; every 1 do
65629: GO 65631
65631: DISABLE
// hInvincible := [ ] ;
65632: LD_ADDR_EXP 94
65636: PUSH
65637: EMPTY
65638: ST_TO_ADDR
65639: END
// every 10 do var i ;
65640: GO 65642
65642: DISABLE
65643: LD_INT 0
65645: PPUSH
// begin enable ;
65646: ENABLE
// if not hInvincible then
65647: LD_EXP 94
65651: NOT
65652: IFFALSE 65656
// exit ;
65654: GO 65700
// for i in hInvincible do
65656: LD_ADDR_VAR 0 1
65660: PUSH
65661: LD_EXP 94
65665: PUSH
65666: FOR_IN
65667: IFFALSE 65698
// if GetLives ( i ) < 1000 then
65669: LD_VAR 0 1
65673: PPUSH
65674: CALL_OW 256
65678: PUSH
65679: LD_INT 1000
65681: LESS
65682: IFFALSE 65696
// SetLives ( i , 1000 ) ;
65684: LD_VAR 0 1
65688: PPUSH
65689: LD_INT 1000
65691: PPUSH
65692: CALL_OW 234
65696: GO 65666
65698: POP
65699: POP
// end ;
65700: PPOPN 1
65702: END
// export function hHackInvincible ; var i ; begin
65703: LD_INT 0
65705: PPUSH
65706: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
65707: LD_ADDR_VAR 0 2
65711: PUSH
65712: LD_INT 2
65714: PUSH
65715: LD_INT 21
65717: PUSH
65718: LD_INT 1
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 21
65727: PUSH
65728: LD_INT 2
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: PPUSH
65740: CALL_OW 69
65744: PUSH
65745: FOR_IN
65746: IFFALSE 65807
// if IsSelected ( i ) then
65748: LD_VAR 0 2
65752: PPUSH
65753: CALL_OW 306
65757: IFFALSE 65805
// begin if i in hInvincible then
65759: LD_VAR 0 2
65763: PUSH
65764: LD_EXP 94
65768: IN
65769: IFFALSE 65789
// hInvincible := hInvincible diff i else
65771: LD_ADDR_EXP 94
65775: PUSH
65776: LD_EXP 94
65780: PUSH
65781: LD_VAR 0 2
65785: DIFF
65786: ST_TO_ADDR
65787: GO 65805
// hInvincible := hInvincible union i ;
65789: LD_ADDR_EXP 94
65793: PUSH
65794: LD_EXP 94
65798: PUSH
65799: LD_VAR 0 2
65803: UNION
65804: ST_TO_ADDR
// end ;
65805: GO 65745
65807: POP
65808: POP
// end ;
65809: LD_VAR 0 1
65813: RET
// export function hHackInvisible ; var i , j ; begin
65814: LD_INT 0
65816: PPUSH
65817: PPUSH
65818: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
65819: LD_ADDR_VAR 0 2
65823: PUSH
65824: LD_INT 21
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PPUSH
65834: CALL_OW 69
65838: PUSH
65839: FOR_IN
65840: IFFALSE 65864
// if IsSelected ( i ) then
65842: LD_VAR 0 2
65846: PPUSH
65847: CALL_OW 306
65851: IFFALSE 65862
// ComForceInvisible ( i ) ;
65853: LD_VAR 0 2
65857: PPUSH
65858: CALL_OW 496
65862: GO 65839
65864: POP
65865: POP
// end ;
65866: LD_VAR 0 1
65870: RET
// export function hHackChangeYourSide ; begin
65871: LD_INT 0
65873: PPUSH
// if your_side = 8 then
65874: LD_OWVAR 2
65878: PUSH
65879: LD_INT 8
65881: EQUAL
65882: IFFALSE 65894
// your_side := 0 else
65884: LD_ADDR_OWVAR 2
65888: PUSH
65889: LD_INT 0
65891: ST_TO_ADDR
65892: GO 65908
// your_side := your_side + 1 ;
65894: LD_ADDR_OWVAR 2
65898: PUSH
65899: LD_OWVAR 2
65903: PUSH
65904: LD_INT 1
65906: PLUS
65907: ST_TO_ADDR
// end ;
65908: LD_VAR 0 1
65912: RET
// export function hHackChangeUnitSide ; var i , j ; begin
65913: LD_INT 0
65915: PPUSH
65916: PPUSH
65917: PPUSH
// for i in all_units do
65918: LD_ADDR_VAR 0 2
65922: PUSH
65923: LD_OWVAR 3
65927: PUSH
65928: FOR_IN
65929: IFFALSE 66007
// if IsSelected ( i ) then
65931: LD_VAR 0 2
65935: PPUSH
65936: CALL_OW 306
65940: IFFALSE 66005
// begin j := GetSide ( i ) ;
65942: LD_ADDR_VAR 0 3
65946: PUSH
65947: LD_VAR 0 2
65951: PPUSH
65952: CALL_OW 255
65956: ST_TO_ADDR
// if j = 8 then
65957: LD_VAR 0 3
65961: PUSH
65962: LD_INT 8
65964: EQUAL
65965: IFFALSE 65977
// j := 0 else
65967: LD_ADDR_VAR 0 3
65971: PUSH
65972: LD_INT 0
65974: ST_TO_ADDR
65975: GO 65991
// j := j + 1 ;
65977: LD_ADDR_VAR 0 3
65981: PUSH
65982: LD_VAR 0 3
65986: PUSH
65987: LD_INT 1
65989: PLUS
65990: ST_TO_ADDR
// SetSide ( i , j ) ;
65991: LD_VAR 0 2
65995: PPUSH
65996: LD_VAR 0 3
66000: PPUSH
66001: CALL_OW 235
// end ;
66005: GO 65928
66007: POP
66008: POP
// end ;
66009: LD_VAR 0 1
66013: RET
// export function hHackFog ; begin
66014: LD_INT 0
66016: PPUSH
// FogOff ( true ) ;
66017: LD_INT 1
66019: PPUSH
66020: CALL_OW 344
// end ;
66024: LD_VAR 0 1
66028: RET
// export function hHackTeleport ( unit , x , y ) ; begin
66029: LD_INT 0
66031: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
66032: LD_VAR 0 1
66036: PPUSH
66037: LD_VAR 0 2
66041: PPUSH
66042: LD_VAR 0 3
66046: PPUSH
66047: LD_INT 1
66049: PPUSH
66050: LD_INT 1
66052: PPUSH
66053: CALL_OW 483
// CenterOnXY ( x , y ) ;
66057: LD_VAR 0 2
66061: PPUSH
66062: LD_VAR 0 3
66066: PPUSH
66067: CALL_OW 84
// end ;
66071: LD_VAR 0 4
66075: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
66076: LD_INT 0
66078: PPUSH
66079: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
66080: LD_VAR 0 1
66084: NOT
66085: PUSH
66086: LD_VAR 0 2
66090: PPUSH
66091: LD_VAR 0 3
66095: PPUSH
66096: CALL_OW 488
66100: NOT
66101: OR
66102: PUSH
66103: LD_VAR 0 1
66107: PPUSH
66108: CALL_OW 266
66112: PUSH
66113: LD_INT 3
66115: NONEQUAL
66116: PUSH
66117: LD_VAR 0 1
66121: PPUSH
66122: CALL_OW 247
66126: PUSH
66127: LD_INT 1
66129: EQUAL
66130: NOT
66131: AND
66132: OR
66133: IFFALSE 66137
// exit ;
66135: GO 66286
// if GetType ( factory ) = unit_human then
66137: LD_VAR 0 1
66141: PPUSH
66142: CALL_OW 247
66146: PUSH
66147: LD_INT 1
66149: EQUAL
66150: IFFALSE 66167
// factory := IsInUnit ( factory ) ;
66152: LD_ADDR_VAR 0 1
66156: PUSH
66157: LD_VAR 0 1
66161: PPUSH
66162: CALL_OW 310
66166: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
66167: LD_VAR 0 1
66171: PPUSH
66172: CALL_OW 266
66176: PUSH
66177: LD_INT 3
66179: NONEQUAL
66180: IFFALSE 66184
// exit ;
66182: GO 66286
// if HexInfo ( x , y ) = factory then
66184: LD_VAR 0 2
66188: PPUSH
66189: LD_VAR 0 3
66193: PPUSH
66194: CALL_OW 428
66198: PUSH
66199: LD_VAR 0 1
66203: EQUAL
66204: IFFALSE 66231
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
66206: LD_ADDR_EXP 95
66210: PUSH
66211: LD_EXP 95
66215: PPUSH
66216: LD_VAR 0 1
66220: PPUSH
66221: LD_INT 0
66223: PPUSH
66224: CALL_OW 1
66228: ST_TO_ADDR
66229: GO 66282
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
66231: LD_ADDR_EXP 95
66235: PUSH
66236: LD_EXP 95
66240: PPUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: LD_VAR 0 1
66250: PPUSH
66251: CALL_OW 255
66255: PUSH
66256: LD_VAR 0 1
66260: PUSH
66261: LD_VAR 0 2
66265: PUSH
66266: LD_VAR 0 3
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: LIST
66276: PPUSH
66277: CALL_OW 1
66281: ST_TO_ADDR
// UpdateFactoryWaypoints ;
66282: CALL 66291 0 0
// end ;
66286: LD_VAR 0 4
66290: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
66291: LD_INT 0
66293: PPUSH
66294: PPUSH
66295: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
66296: LD_STRING resetFactoryWaypoint();
66298: PPUSH
66299: CALL_OW 559
// if factoryWaypoints then
66303: LD_EXP 95
66307: IFFALSE 66433
// begin list := PrepareArray ( factoryWaypoints ) ;
66309: LD_ADDR_VAR 0 3
66313: PUSH
66314: LD_EXP 95
66318: PPUSH
66319: CALL 50246 0 1
66323: ST_TO_ADDR
// for i := 1 to list do
66324: LD_ADDR_VAR 0 2
66328: PUSH
66329: DOUBLE
66330: LD_INT 1
66332: DEC
66333: ST_TO_ADDR
66334: LD_VAR 0 3
66338: PUSH
66339: FOR_TO
66340: IFFALSE 66431
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66342: LD_STRING setFactoryWaypointXY(
66344: PUSH
66345: LD_VAR 0 3
66349: PUSH
66350: LD_VAR 0 2
66354: ARRAY
66355: PUSH
66356: LD_INT 1
66358: ARRAY
66359: STR
66360: PUSH
66361: LD_STRING ,
66363: STR
66364: PUSH
66365: LD_VAR 0 3
66369: PUSH
66370: LD_VAR 0 2
66374: ARRAY
66375: PUSH
66376: LD_INT 2
66378: ARRAY
66379: STR
66380: PUSH
66381: LD_STRING ,
66383: STR
66384: PUSH
66385: LD_VAR 0 3
66389: PUSH
66390: LD_VAR 0 2
66394: ARRAY
66395: PUSH
66396: LD_INT 3
66398: ARRAY
66399: STR
66400: PUSH
66401: LD_STRING ,
66403: STR
66404: PUSH
66405: LD_VAR 0 3
66409: PUSH
66410: LD_VAR 0 2
66414: ARRAY
66415: PUSH
66416: LD_INT 4
66418: ARRAY
66419: STR
66420: PUSH
66421: LD_STRING )
66423: STR
66424: PPUSH
66425: CALL_OW 559
66429: GO 66339
66431: POP
66432: POP
// end ; end ;
66433: LD_VAR 0 1
66437: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
66438: LD_INT 0
66440: PPUSH
// if HexInfo ( x , y ) = warehouse then
66441: LD_VAR 0 2
66445: PPUSH
66446: LD_VAR 0 3
66450: PPUSH
66451: CALL_OW 428
66455: PUSH
66456: LD_VAR 0 1
66460: EQUAL
66461: IFFALSE 66488
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
66463: LD_ADDR_EXP 96
66467: PUSH
66468: LD_EXP 96
66472: PPUSH
66473: LD_VAR 0 1
66477: PPUSH
66478: LD_INT 0
66480: PPUSH
66481: CALL_OW 1
66485: ST_TO_ADDR
66486: GO 66539
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
66488: LD_ADDR_EXP 96
66492: PUSH
66493: LD_EXP 96
66497: PPUSH
66498: LD_VAR 0 1
66502: PPUSH
66503: LD_VAR 0 1
66507: PPUSH
66508: CALL_OW 255
66512: PUSH
66513: LD_VAR 0 1
66517: PUSH
66518: LD_VAR 0 2
66522: PUSH
66523: LD_VAR 0 3
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: PPUSH
66534: CALL_OW 1
66538: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
66539: CALL 66548 0 0
// end ;
66543: LD_VAR 0 4
66547: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
66548: LD_INT 0
66550: PPUSH
66551: PPUSH
66552: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
66553: LD_STRING resetWarehouseGatheringPoints();
66555: PPUSH
66556: CALL_OW 559
// if warehouseGatheringPoints then
66560: LD_EXP 96
66564: IFFALSE 66690
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
66566: LD_ADDR_VAR 0 3
66570: PUSH
66571: LD_EXP 96
66575: PPUSH
66576: CALL 50246 0 1
66580: ST_TO_ADDR
// for i := 1 to list do
66581: LD_ADDR_VAR 0 2
66585: PUSH
66586: DOUBLE
66587: LD_INT 1
66589: DEC
66590: ST_TO_ADDR
66591: LD_VAR 0 3
66595: PUSH
66596: FOR_TO
66597: IFFALSE 66688
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
66599: LD_STRING setWarehouseGatheringPointXY(
66601: PUSH
66602: LD_VAR 0 3
66606: PUSH
66607: LD_VAR 0 2
66611: ARRAY
66612: PUSH
66613: LD_INT 1
66615: ARRAY
66616: STR
66617: PUSH
66618: LD_STRING ,
66620: STR
66621: PUSH
66622: LD_VAR 0 3
66626: PUSH
66627: LD_VAR 0 2
66631: ARRAY
66632: PUSH
66633: LD_INT 2
66635: ARRAY
66636: STR
66637: PUSH
66638: LD_STRING ,
66640: STR
66641: PUSH
66642: LD_VAR 0 3
66646: PUSH
66647: LD_VAR 0 2
66651: ARRAY
66652: PUSH
66653: LD_INT 3
66655: ARRAY
66656: STR
66657: PUSH
66658: LD_STRING ,
66660: STR
66661: PUSH
66662: LD_VAR 0 3
66666: PUSH
66667: LD_VAR 0 2
66671: ARRAY
66672: PUSH
66673: LD_INT 4
66675: ARRAY
66676: STR
66677: PUSH
66678: LD_STRING )
66680: STR
66681: PPUSH
66682: CALL_OW 559
66686: GO 66596
66688: POP
66689: POP
// end ; end ;
66690: LD_VAR 0 1
66694: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
66695: LD_EXP 96
66699: IFFALSE 67384
66701: GO 66703
66703: DISABLE
66704: LD_INT 0
66706: PPUSH
66707: PPUSH
66708: PPUSH
66709: PPUSH
66710: PPUSH
66711: PPUSH
66712: PPUSH
66713: PPUSH
66714: PPUSH
// begin enable ;
66715: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
66716: LD_ADDR_VAR 0 3
66720: PUSH
66721: LD_EXP 96
66725: PPUSH
66726: CALL 50246 0 1
66730: ST_TO_ADDR
// if not list then
66731: LD_VAR 0 3
66735: NOT
66736: IFFALSE 66740
// exit ;
66738: GO 67384
// for i := 1 to list do
66740: LD_ADDR_VAR 0 1
66744: PUSH
66745: DOUBLE
66746: LD_INT 1
66748: DEC
66749: ST_TO_ADDR
66750: LD_VAR 0 3
66754: PUSH
66755: FOR_TO
66756: IFFALSE 67382
// begin depot := list [ i ] [ 2 ] ;
66758: LD_ADDR_VAR 0 8
66762: PUSH
66763: LD_VAR 0 3
66767: PUSH
66768: LD_VAR 0 1
66772: ARRAY
66773: PUSH
66774: LD_INT 2
66776: ARRAY
66777: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
66778: LD_ADDR_VAR 0 5
66782: PUSH
66783: LD_VAR 0 3
66787: PUSH
66788: LD_VAR 0 1
66792: ARRAY
66793: PUSH
66794: LD_INT 1
66796: ARRAY
66797: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
66798: LD_VAR 0 8
66802: PPUSH
66803: CALL_OW 301
66807: PUSH
66808: LD_VAR 0 5
66812: PUSH
66813: LD_VAR 0 8
66817: PPUSH
66818: CALL_OW 255
66822: NONEQUAL
66823: OR
66824: IFFALSE 66853
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
66826: LD_ADDR_EXP 96
66830: PUSH
66831: LD_EXP 96
66835: PPUSH
66836: LD_VAR 0 8
66840: PPUSH
66841: LD_INT 0
66843: PPUSH
66844: CALL_OW 1
66848: ST_TO_ADDR
// exit ;
66849: POP
66850: POP
66851: GO 67384
// end ; x := list [ i ] [ 3 ] ;
66853: LD_ADDR_VAR 0 6
66857: PUSH
66858: LD_VAR 0 3
66862: PUSH
66863: LD_VAR 0 1
66867: ARRAY
66868: PUSH
66869: LD_INT 3
66871: ARRAY
66872: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
66873: LD_ADDR_VAR 0 7
66877: PUSH
66878: LD_VAR 0 3
66882: PUSH
66883: LD_VAR 0 1
66887: ARRAY
66888: PUSH
66889: LD_INT 4
66891: ARRAY
66892: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
66893: LD_ADDR_VAR 0 9
66897: PUSH
66898: LD_VAR 0 6
66902: PPUSH
66903: LD_VAR 0 7
66907: PPUSH
66908: LD_INT 16
66910: PPUSH
66911: CALL 48830 0 3
66915: ST_TO_ADDR
// if not cratesNearbyPoint then
66916: LD_VAR 0 9
66920: NOT
66921: IFFALSE 66927
// exit ;
66923: POP
66924: POP
66925: GO 67384
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
66927: LD_ADDR_VAR 0 4
66931: PUSH
66932: LD_INT 22
66934: PUSH
66935: LD_VAR 0 5
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 3
66946: PUSH
66947: LD_INT 60
66949: PUSH
66950: EMPTY
66951: LIST
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 91
66959: PUSH
66960: LD_VAR 0 8
66964: PUSH
66965: LD_INT 6
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 2
66975: PUSH
66976: LD_INT 25
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 25
66988: PUSH
66989: LD_INT 16
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: LIST
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: PPUSH
67007: CALL_OW 69
67011: PUSH
67012: LD_VAR 0 8
67016: PPUSH
67017: CALL_OW 313
67021: PPUSH
67022: LD_INT 3
67024: PUSH
67025: LD_INT 60
67027: PUSH
67028: EMPTY
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: LD_INT 25
67040: PUSH
67041: LD_INT 2
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 25
67050: PUSH
67051: LD_INT 16
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PPUSH
67067: CALL_OW 72
67071: UNION
67072: ST_TO_ADDR
// if tmp then
67073: LD_VAR 0 4
67077: IFFALSE 67157
// begin tmp := ShrinkArray ( tmp , 3 ) ;
67079: LD_ADDR_VAR 0 4
67083: PUSH
67084: LD_VAR 0 4
67088: PPUSH
67089: LD_INT 3
67091: PPUSH
67092: CALL 46799 0 2
67096: ST_TO_ADDR
// for j in tmp do
67097: LD_ADDR_VAR 0 2
67101: PUSH
67102: LD_VAR 0 4
67106: PUSH
67107: FOR_IN
67108: IFFALSE 67151
// begin if IsInUnit ( j ) then
67110: LD_VAR 0 2
67114: PPUSH
67115: CALL_OW 310
67119: IFFALSE 67130
// ComExit ( j ) ;
67121: LD_VAR 0 2
67125: PPUSH
67126: CALL 46882 0 1
// AddComCollect ( j , x , y ) ;
67130: LD_VAR 0 2
67134: PPUSH
67135: LD_VAR 0 6
67139: PPUSH
67140: LD_VAR 0 7
67144: PPUSH
67145: CALL_OW 177
// end ;
67149: GO 67107
67151: POP
67152: POP
// exit ;
67153: POP
67154: POP
67155: GO 67384
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
67157: LD_ADDR_VAR 0 4
67161: PUSH
67162: LD_INT 22
67164: PUSH
67165: LD_VAR 0 5
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 91
67176: PUSH
67177: LD_VAR 0 8
67181: PUSH
67182: LD_INT 8
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 34
67195: PUSH
67196: LD_INT 12
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 34
67205: PUSH
67206: LD_INT 51
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 34
67215: PUSH
67216: LD_INT 32
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 34
67225: PUSH
67226: LD_INT 89
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: LIST
67244: PPUSH
67245: CALL_OW 69
67249: ST_TO_ADDR
// if tmp then
67250: LD_VAR 0 4
67254: IFFALSE 67380
// begin for j in tmp do
67256: LD_ADDR_VAR 0 2
67260: PUSH
67261: LD_VAR 0 4
67265: PUSH
67266: FOR_IN
67267: IFFALSE 67378
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
67269: LD_VAR 0 2
67273: PPUSH
67274: CALL_OW 262
67278: PUSH
67279: LD_INT 3
67281: EQUAL
67282: PUSH
67283: LD_VAR 0 2
67287: PPUSH
67288: CALL_OW 261
67292: PUSH
67293: LD_INT 20
67295: GREATER
67296: OR
67297: PUSH
67298: LD_VAR 0 2
67302: PPUSH
67303: CALL_OW 314
67307: NOT
67308: AND
67309: PUSH
67310: LD_VAR 0 2
67314: PPUSH
67315: CALL_OW 263
67319: PUSH
67320: LD_INT 1
67322: NONEQUAL
67323: PUSH
67324: LD_VAR 0 2
67328: PPUSH
67329: CALL_OW 311
67333: OR
67334: AND
67335: IFFALSE 67376
// begin ComCollect ( j , x , y ) ;
67337: LD_VAR 0 2
67341: PPUSH
67342: LD_VAR 0 6
67346: PPUSH
67347: LD_VAR 0 7
67351: PPUSH
67352: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
67356: LD_VAR 0 2
67360: PPUSH
67361: LD_VAR 0 8
67365: PPUSH
67366: CALL_OW 172
// exit ;
67370: POP
67371: POP
67372: POP
67373: POP
67374: GO 67384
// end ;
67376: GO 67266
67378: POP
67379: POP
// end ; end ;
67380: GO 66755
67382: POP
67383: POP
// end ; end_of_file
67384: PPOPN 9
67386: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
67387: LD_INT 0
67389: PPUSH
67390: PPUSH
67391: PPUSH
67392: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
67393: LD_VAR 0 1
67397: PPUSH
67398: CALL_OW 264
67402: PUSH
67403: LD_INT 91
67405: EQUAL
67406: IFFALSE 67478
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67408: LD_INT 68
67410: PPUSH
67411: LD_VAR 0 1
67415: PPUSH
67416: CALL_OW 255
67420: PPUSH
67421: CALL_OW 321
67425: PUSH
67426: LD_INT 2
67428: EQUAL
67429: IFFALSE 67441
// eff := 70 else
67431: LD_ADDR_VAR 0 4
67435: PUSH
67436: LD_INT 70
67438: ST_TO_ADDR
67439: GO 67449
// eff := 30 ;
67441: LD_ADDR_VAR 0 4
67445: PUSH
67446: LD_INT 30
67448: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67449: LD_VAR 0 1
67453: PPUSH
67454: CALL_OW 250
67458: PPUSH
67459: LD_VAR 0 1
67463: PPUSH
67464: CALL_OW 251
67468: PPUSH
67469: LD_VAR 0 4
67473: PPUSH
67474: CALL_OW 495
// end ; end ;
67478: LD_VAR 0 2
67482: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
67483: LD_INT 0
67485: PPUSH
// end ;
67486: LD_VAR 0 4
67490: RET
// export function SOS_Command ( cmd ) ; begin
67491: LD_INT 0
67493: PPUSH
// end ;
67494: LD_VAR 0 2
67498: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
67499: LD_INT 0
67501: PPUSH
// end ;
67502: LD_VAR 0 6
67506: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
67507: LD_INT 0
67509: PPUSH
67510: PPUSH
// if not vehicle or not factory then
67511: LD_VAR 0 1
67515: NOT
67516: PUSH
67517: LD_VAR 0 2
67521: NOT
67522: OR
67523: IFFALSE 67527
// exit ;
67525: GO 67758
// if factoryWaypoints >= factory then
67527: LD_EXP 95
67531: PUSH
67532: LD_VAR 0 2
67536: GREATEREQUAL
67537: IFFALSE 67758
// if factoryWaypoints [ factory ] then
67539: LD_EXP 95
67543: PUSH
67544: LD_VAR 0 2
67548: ARRAY
67549: IFFALSE 67758
// begin if GetControl ( vehicle ) = control_manual then
67551: LD_VAR 0 1
67555: PPUSH
67556: CALL_OW 263
67560: PUSH
67561: LD_INT 1
67563: EQUAL
67564: IFFALSE 67645
// begin driver := IsDrivenBy ( vehicle ) ;
67566: LD_ADDR_VAR 0 4
67570: PUSH
67571: LD_VAR 0 1
67575: PPUSH
67576: CALL_OW 311
67580: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67581: LD_VAR 0 4
67585: PPUSH
67586: LD_EXP 95
67590: PUSH
67591: LD_VAR 0 2
67595: ARRAY
67596: PUSH
67597: LD_INT 3
67599: ARRAY
67600: PPUSH
67601: LD_EXP 95
67605: PUSH
67606: LD_VAR 0 2
67610: ARRAY
67611: PUSH
67612: LD_INT 4
67614: ARRAY
67615: PPUSH
67616: CALL_OW 171
// AddComExitVehicle ( driver ) ;
67620: LD_VAR 0 4
67624: PPUSH
67625: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
67629: LD_VAR 0 4
67633: PPUSH
67634: LD_VAR 0 2
67638: PPUSH
67639: CALL_OW 180
// end else
67643: GO 67758
// if GetControl ( vehicle ) = control_remote then
67645: LD_VAR 0 1
67649: PPUSH
67650: CALL_OW 263
67654: PUSH
67655: LD_INT 2
67657: EQUAL
67658: IFFALSE 67719
// begin wait ( 0 0$2 ) ;
67660: LD_INT 70
67662: PPUSH
67663: CALL_OW 67
// if Connect ( vehicle ) then
67667: LD_VAR 0 1
67671: PPUSH
67672: CALL 17101 0 1
67676: IFFALSE 67717
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67678: LD_VAR 0 1
67682: PPUSH
67683: LD_EXP 95
67687: PUSH
67688: LD_VAR 0 2
67692: ARRAY
67693: PUSH
67694: LD_INT 3
67696: ARRAY
67697: PPUSH
67698: LD_EXP 95
67702: PUSH
67703: LD_VAR 0 2
67707: ARRAY
67708: PUSH
67709: LD_INT 4
67711: ARRAY
67712: PPUSH
67713: CALL_OW 171
// end else
67717: GO 67758
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
67719: LD_VAR 0 1
67723: PPUSH
67724: LD_EXP 95
67728: PUSH
67729: LD_VAR 0 2
67733: ARRAY
67734: PUSH
67735: LD_INT 3
67737: ARRAY
67738: PPUSH
67739: LD_EXP 95
67743: PUSH
67744: LD_VAR 0 2
67748: ARRAY
67749: PUSH
67750: LD_INT 4
67752: ARRAY
67753: PPUSH
67754: CALL_OW 171
// end ; end ;
67758: LD_VAR 0 3
67762: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
67763: LD_INT 0
67765: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
67766: LD_VAR 0 1
67770: PUSH
67771: LD_INT 250
67773: EQUAL
67774: PUSH
67775: LD_VAR 0 2
67779: PPUSH
67780: CALL_OW 264
67784: PUSH
67785: LD_INT 81
67787: EQUAL
67788: AND
67789: IFFALSE 67810
// MinerPlaceMine ( unit , x , y ) ;
67791: LD_VAR 0 2
67795: PPUSH
67796: LD_VAR 0 4
67800: PPUSH
67801: LD_VAR 0 5
67805: PPUSH
67806: CALL 70800 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67810: LD_VAR 0 1
67814: PUSH
67815: LD_INT 251
67817: EQUAL
67818: PUSH
67819: LD_VAR 0 2
67823: PPUSH
67824: CALL_OW 264
67828: PUSH
67829: LD_INT 81
67831: EQUAL
67832: AND
67833: IFFALSE 67854
// MinerDetonateMine ( unit , x , y ) ;
67835: LD_VAR 0 2
67839: PPUSH
67840: LD_VAR 0 4
67844: PPUSH
67845: LD_VAR 0 5
67849: PPUSH
67850: CALL 71075 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67854: LD_VAR 0 1
67858: PUSH
67859: LD_INT 252
67861: EQUAL
67862: PUSH
67863: LD_VAR 0 2
67867: PPUSH
67868: CALL_OW 264
67872: PUSH
67873: LD_INT 81
67875: EQUAL
67876: AND
67877: IFFALSE 67898
// MinerCreateMinefield ( unit , x , y ) ;
67879: LD_VAR 0 2
67883: PPUSH
67884: LD_VAR 0 4
67888: PPUSH
67889: LD_VAR 0 5
67893: PPUSH
67894: CALL 71492 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67898: LD_VAR 0 1
67902: PUSH
67903: LD_INT 253
67905: EQUAL
67906: PUSH
67907: LD_VAR 0 2
67911: PPUSH
67912: CALL_OW 257
67916: PUSH
67917: LD_INT 5
67919: EQUAL
67920: AND
67921: IFFALSE 67942
// ComBinocular ( unit , x , y ) ;
67923: LD_VAR 0 2
67927: PPUSH
67928: LD_VAR 0 4
67932: PPUSH
67933: LD_VAR 0 5
67937: PPUSH
67938: CALL 71861 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67942: LD_VAR 0 1
67946: PUSH
67947: LD_INT 254
67949: EQUAL
67950: PUSH
67951: LD_VAR 0 2
67955: PPUSH
67956: CALL_OW 264
67960: PUSH
67961: LD_INT 99
67963: EQUAL
67964: AND
67965: PUSH
67966: LD_VAR 0 3
67970: PPUSH
67971: CALL_OW 263
67975: PUSH
67976: LD_INT 3
67978: EQUAL
67979: AND
67980: IFFALSE 67996
// HackDestroyVehicle ( unit , selectedUnit ) ;
67982: LD_VAR 0 2
67986: PPUSH
67987: LD_VAR 0 3
67991: PPUSH
67992: CALL 70164 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67996: LD_VAR 0 1
68000: PUSH
68001: LD_INT 255
68003: EQUAL
68004: PUSH
68005: LD_VAR 0 2
68009: PPUSH
68010: CALL_OW 264
68014: PUSH
68015: LD_INT 14
68017: PUSH
68018: LD_INT 53
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: IN
68025: AND
68026: PUSH
68027: LD_VAR 0 4
68031: PPUSH
68032: LD_VAR 0 5
68036: PPUSH
68037: CALL_OW 488
68041: AND
68042: IFFALSE 68066
// CutTreeXYR ( unit , x , y , 12 ) ;
68044: LD_VAR 0 2
68048: PPUSH
68049: LD_VAR 0 4
68053: PPUSH
68054: LD_VAR 0 5
68058: PPUSH
68059: LD_INT 12
68061: PPUSH
68062: CALL 68161 0 4
// if cmd = 256 then
68066: LD_VAR 0 1
68070: PUSH
68071: LD_INT 256
68073: EQUAL
68074: IFFALSE 68095
// SetFactoryWaypoint ( unit , x , y ) ;
68076: LD_VAR 0 2
68080: PPUSH
68081: LD_VAR 0 4
68085: PPUSH
68086: LD_VAR 0 5
68090: PPUSH
68091: CALL 66076 0 3
// if cmd = 257 then
68095: LD_VAR 0 1
68099: PUSH
68100: LD_INT 257
68102: EQUAL
68103: IFFALSE 68124
// SetWarehouseGatheringPoint ( unit , x , y ) ;
68105: LD_VAR 0 2
68109: PPUSH
68110: LD_VAR 0 4
68114: PPUSH
68115: LD_VAR 0 5
68119: PPUSH
68120: CALL 66438 0 3
// if cmd = 258 then
68124: LD_VAR 0 1
68128: PUSH
68129: LD_INT 258
68131: EQUAL
68132: IFFALSE 68156
// BurnTreeXYR ( unit , x , y , 8 ) ;
68134: LD_VAR 0 2
68138: PPUSH
68139: LD_VAR 0 4
68143: PPUSH
68144: LD_VAR 0 5
68148: PPUSH
68149: LD_INT 8
68151: PPUSH
68152: CALL 68555 0 4
// end ;
68156: LD_VAR 0 6
68160: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
68161: LD_INT 0
68163: PPUSH
68164: PPUSH
68165: PPUSH
68166: PPUSH
68167: PPUSH
68168: PPUSH
68169: PPUSH
68170: PPUSH
68171: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
68172: LD_VAR 0 1
68176: PPUSH
68177: CALL_OW 302
68181: NOT
68182: PUSH
68183: LD_VAR 0 2
68187: PPUSH
68188: LD_VAR 0 3
68192: PPUSH
68193: CALL_OW 488
68197: NOT
68198: OR
68199: PUSH
68200: LD_VAR 0 4
68204: NOT
68205: OR
68206: IFFALSE 68210
// exit ;
68208: GO 68550
// list := [ ] ;
68210: LD_ADDR_VAR 0 13
68214: PUSH
68215: EMPTY
68216: ST_TO_ADDR
// if x - r < 0 then
68217: LD_VAR 0 2
68221: PUSH
68222: LD_VAR 0 4
68226: MINUS
68227: PUSH
68228: LD_INT 0
68230: LESS
68231: IFFALSE 68243
// min_x := 0 else
68233: LD_ADDR_VAR 0 7
68237: PUSH
68238: LD_INT 0
68240: ST_TO_ADDR
68241: GO 68259
// min_x := x - r ;
68243: LD_ADDR_VAR 0 7
68247: PUSH
68248: LD_VAR 0 2
68252: PUSH
68253: LD_VAR 0 4
68257: MINUS
68258: ST_TO_ADDR
// if y - r < 0 then
68259: LD_VAR 0 3
68263: PUSH
68264: LD_VAR 0 4
68268: MINUS
68269: PUSH
68270: LD_INT 0
68272: LESS
68273: IFFALSE 68285
// min_y := 0 else
68275: LD_ADDR_VAR 0 8
68279: PUSH
68280: LD_INT 0
68282: ST_TO_ADDR
68283: GO 68301
// min_y := y - r ;
68285: LD_ADDR_VAR 0 8
68289: PUSH
68290: LD_VAR 0 3
68294: PUSH
68295: LD_VAR 0 4
68299: MINUS
68300: ST_TO_ADDR
// max_x := x + r ;
68301: LD_ADDR_VAR 0 9
68305: PUSH
68306: LD_VAR 0 2
68310: PUSH
68311: LD_VAR 0 4
68315: PLUS
68316: ST_TO_ADDR
// max_y := y + r ;
68317: LD_ADDR_VAR 0 10
68321: PUSH
68322: LD_VAR 0 3
68326: PUSH
68327: LD_VAR 0 4
68331: PLUS
68332: ST_TO_ADDR
// for _x = min_x to max_x do
68333: LD_ADDR_VAR 0 11
68337: PUSH
68338: DOUBLE
68339: LD_VAR 0 7
68343: DEC
68344: ST_TO_ADDR
68345: LD_VAR 0 9
68349: PUSH
68350: FOR_TO
68351: IFFALSE 68468
// for _y = min_y to max_y do
68353: LD_ADDR_VAR 0 12
68357: PUSH
68358: DOUBLE
68359: LD_VAR 0 8
68363: DEC
68364: ST_TO_ADDR
68365: LD_VAR 0 10
68369: PUSH
68370: FOR_TO
68371: IFFALSE 68464
// begin if not ValidHex ( _x , _y ) then
68373: LD_VAR 0 11
68377: PPUSH
68378: LD_VAR 0 12
68382: PPUSH
68383: CALL_OW 488
68387: NOT
68388: IFFALSE 68392
// continue ;
68390: GO 68370
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68392: LD_VAR 0 11
68396: PPUSH
68397: LD_VAR 0 12
68401: PPUSH
68402: CALL_OW 351
68406: PUSH
68407: LD_VAR 0 11
68411: PPUSH
68412: LD_VAR 0 12
68416: PPUSH
68417: CALL_OW 554
68421: AND
68422: IFFALSE 68462
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68424: LD_ADDR_VAR 0 13
68428: PUSH
68429: LD_VAR 0 13
68433: PPUSH
68434: LD_VAR 0 13
68438: PUSH
68439: LD_INT 1
68441: PLUS
68442: PPUSH
68443: LD_VAR 0 11
68447: PUSH
68448: LD_VAR 0 12
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PPUSH
68457: CALL_OW 2
68461: ST_TO_ADDR
// end ;
68462: GO 68370
68464: POP
68465: POP
68466: GO 68350
68468: POP
68469: POP
// if not list then
68470: LD_VAR 0 13
68474: NOT
68475: IFFALSE 68479
// exit ;
68477: GO 68550
// for i in list do
68479: LD_ADDR_VAR 0 6
68483: PUSH
68484: LD_VAR 0 13
68488: PUSH
68489: FOR_IN
68490: IFFALSE 68548
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
68492: LD_VAR 0 1
68496: PPUSH
68497: LD_STRING M
68499: PUSH
68500: LD_VAR 0 6
68504: PUSH
68505: LD_INT 1
68507: ARRAY
68508: PUSH
68509: LD_VAR 0 6
68513: PUSH
68514: LD_INT 2
68516: ARRAY
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 0
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: LD_INT 0
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: PUSH
68539: EMPTY
68540: LIST
68541: PPUSH
68542: CALL_OW 447
68546: GO 68489
68548: POP
68549: POP
// end ;
68550: LD_VAR 0 5
68554: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
68555: LD_INT 0
68557: PPUSH
68558: PPUSH
68559: PPUSH
68560: PPUSH
68561: PPUSH
68562: PPUSH
68563: PPUSH
68564: PPUSH
68565: PPUSH
68566: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
68567: LD_VAR 0 1
68571: PPUSH
68572: CALL_OW 302
68576: NOT
68577: PUSH
68578: LD_VAR 0 2
68582: PPUSH
68583: LD_VAR 0 3
68587: PPUSH
68588: CALL_OW 488
68592: NOT
68593: OR
68594: PUSH
68595: LD_VAR 0 4
68599: NOT
68600: OR
68601: IFFALSE 68605
// exit ;
68603: GO 69118
// list := [ ] ;
68605: LD_ADDR_VAR 0 13
68609: PUSH
68610: EMPTY
68611: ST_TO_ADDR
// if x - r < 0 then
68612: LD_VAR 0 2
68616: PUSH
68617: LD_VAR 0 4
68621: MINUS
68622: PUSH
68623: LD_INT 0
68625: LESS
68626: IFFALSE 68638
// min_x := 0 else
68628: LD_ADDR_VAR 0 7
68632: PUSH
68633: LD_INT 0
68635: ST_TO_ADDR
68636: GO 68654
// min_x := x - r ;
68638: LD_ADDR_VAR 0 7
68642: PUSH
68643: LD_VAR 0 2
68647: PUSH
68648: LD_VAR 0 4
68652: MINUS
68653: ST_TO_ADDR
// if y - r < 0 then
68654: LD_VAR 0 3
68658: PUSH
68659: LD_VAR 0 4
68663: MINUS
68664: PUSH
68665: LD_INT 0
68667: LESS
68668: IFFALSE 68680
// min_y := 0 else
68670: LD_ADDR_VAR 0 8
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
68678: GO 68696
// min_y := y - r ;
68680: LD_ADDR_VAR 0 8
68684: PUSH
68685: LD_VAR 0 3
68689: PUSH
68690: LD_VAR 0 4
68694: MINUS
68695: ST_TO_ADDR
// max_x := x + r ;
68696: LD_ADDR_VAR 0 9
68700: PUSH
68701: LD_VAR 0 2
68705: PUSH
68706: LD_VAR 0 4
68710: PLUS
68711: ST_TO_ADDR
// max_y := y + r ;
68712: LD_ADDR_VAR 0 10
68716: PUSH
68717: LD_VAR 0 3
68721: PUSH
68722: LD_VAR 0 4
68726: PLUS
68727: ST_TO_ADDR
// for _x = min_x to max_x do
68728: LD_ADDR_VAR 0 11
68732: PUSH
68733: DOUBLE
68734: LD_VAR 0 7
68738: DEC
68739: ST_TO_ADDR
68740: LD_VAR 0 9
68744: PUSH
68745: FOR_TO
68746: IFFALSE 68863
// for _y = min_y to max_y do
68748: LD_ADDR_VAR 0 12
68752: PUSH
68753: DOUBLE
68754: LD_VAR 0 8
68758: DEC
68759: ST_TO_ADDR
68760: LD_VAR 0 10
68764: PUSH
68765: FOR_TO
68766: IFFALSE 68859
// begin if not ValidHex ( _x , _y ) then
68768: LD_VAR 0 11
68772: PPUSH
68773: LD_VAR 0 12
68777: PPUSH
68778: CALL_OW 488
68782: NOT
68783: IFFALSE 68787
// continue ;
68785: GO 68765
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68787: LD_VAR 0 11
68791: PPUSH
68792: LD_VAR 0 12
68796: PPUSH
68797: CALL_OW 351
68801: PUSH
68802: LD_VAR 0 11
68806: PPUSH
68807: LD_VAR 0 12
68811: PPUSH
68812: CALL_OW 554
68816: AND
68817: IFFALSE 68857
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68819: LD_ADDR_VAR 0 13
68823: PUSH
68824: LD_VAR 0 13
68828: PPUSH
68829: LD_VAR 0 13
68833: PUSH
68834: LD_INT 1
68836: PLUS
68837: PPUSH
68838: LD_VAR 0 11
68842: PUSH
68843: LD_VAR 0 12
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PPUSH
68852: CALL_OW 2
68856: ST_TO_ADDR
// end ;
68857: GO 68765
68859: POP
68860: POP
68861: GO 68745
68863: POP
68864: POP
// if not list then
68865: LD_VAR 0 13
68869: NOT
68870: IFFALSE 68874
// exit ;
68872: GO 69118
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68874: LD_ADDR_VAR 0 13
68878: PUSH
68879: LD_VAR 0 1
68883: PPUSH
68884: LD_VAR 0 13
68888: PPUSH
68889: LD_INT 1
68891: PPUSH
68892: LD_INT 1
68894: PPUSH
68895: CALL 14243 0 4
68899: ST_TO_ADDR
// ComStop ( flame ) ;
68900: LD_VAR 0 1
68904: PPUSH
68905: CALL_OW 141
// for i in list do
68909: LD_ADDR_VAR 0 6
68913: PUSH
68914: LD_VAR 0 13
68918: PUSH
68919: FOR_IN
68920: IFFALSE 68951
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68922: LD_VAR 0 1
68926: PPUSH
68927: LD_VAR 0 6
68931: PUSH
68932: LD_INT 1
68934: ARRAY
68935: PPUSH
68936: LD_VAR 0 6
68940: PUSH
68941: LD_INT 2
68943: ARRAY
68944: PPUSH
68945: CALL_OW 176
68949: GO 68919
68951: POP
68952: POP
// repeat wait ( 0 0$1 ) ;
68953: LD_INT 35
68955: PPUSH
68956: CALL_OW 67
// task := GetTaskList ( flame ) ;
68960: LD_ADDR_VAR 0 14
68964: PUSH
68965: LD_VAR 0 1
68969: PPUSH
68970: CALL_OW 437
68974: ST_TO_ADDR
// if not task then
68975: LD_VAR 0 14
68979: NOT
68980: IFFALSE 68984
// exit ;
68982: GO 69118
// if task [ 1 ] [ 1 ] <> | then
68984: LD_VAR 0 14
68988: PUSH
68989: LD_INT 1
68991: ARRAY
68992: PUSH
68993: LD_INT 1
68995: ARRAY
68996: PUSH
68997: LD_STRING |
68999: NONEQUAL
69000: IFFALSE 69004
// exit ;
69002: GO 69118
// _x := task [ 1 ] [ 2 ] ;
69004: LD_ADDR_VAR 0 11
69008: PUSH
69009: LD_VAR 0 14
69013: PUSH
69014: LD_INT 1
69016: ARRAY
69017: PUSH
69018: LD_INT 2
69020: ARRAY
69021: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
69022: LD_ADDR_VAR 0 12
69026: PUSH
69027: LD_VAR 0 14
69031: PUSH
69032: LD_INT 1
69034: ARRAY
69035: PUSH
69036: LD_INT 3
69038: ARRAY
69039: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
69040: LD_VAR 0 11
69044: PPUSH
69045: LD_VAR 0 12
69049: PPUSH
69050: CALL_OW 351
69054: NOT
69055: PUSH
69056: LD_VAR 0 11
69060: PPUSH
69061: LD_VAR 0 12
69065: PPUSH
69066: CALL_OW 554
69070: NOT
69071: OR
69072: IFFALSE 69106
// begin task := Delete ( task , 1 ) ;
69074: LD_ADDR_VAR 0 14
69078: PUSH
69079: LD_VAR 0 14
69083: PPUSH
69084: LD_INT 1
69086: PPUSH
69087: CALL_OW 3
69091: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
69092: LD_VAR 0 1
69096: PPUSH
69097: LD_VAR 0 14
69101: PPUSH
69102: CALL_OW 446
// end ; until not HasTask ( flame ) ;
69106: LD_VAR 0 1
69110: PPUSH
69111: CALL_OW 314
69115: NOT
69116: IFFALSE 68953
// end ;
69118: LD_VAR 0 5
69122: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
69123: LD_EXP 98
69127: NOT
69128: IFFALSE 69178
69130: GO 69132
69132: DISABLE
// begin initHack := true ;
69133: LD_ADDR_EXP 98
69137: PUSH
69138: LD_INT 1
69140: ST_TO_ADDR
// hackTanks := [ ] ;
69141: LD_ADDR_EXP 99
69145: PUSH
69146: EMPTY
69147: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
69148: LD_ADDR_EXP 100
69152: PUSH
69153: EMPTY
69154: ST_TO_ADDR
// hackLimit := 3 ;
69155: LD_ADDR_EXP 101
69159: PUSH
69160: LD_INT 3
69162: ST_TO_ADDR
// hackDist := 12 ;
69163: LD_ADDR_EXP 102
69167: PUSH
69168: LD_INT 12
69170: ST_TO_ADDR
// hackCounter := [ ] ;
69171: LD_ADDR_EXP 103
69175: PUSH
69176: EMPTY
69177: ST_TO_ADDR
// end ;
69178: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
69179: LD_EXP 98
69183: PUSH
69184: LD_INT 34
69186: PUSH
69187: LD_INT 99
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PPUSH
69194: CALL_OW 69
69198: AND
69199: IFFALSE 69452
69201: GO 69203
69203: DISABLE
69204: LD_INT 0
69206: PPUSH
69207: PPUSH
// begin enable ;
69208: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
69209: LD_ADDR_VAR 0 1
69213: PUSH
69214: LD_INT 34
69216: PUSH
69217: LD_INT 99
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PPUSH
69224: CALL_OW 69
69228: PUSH
69229: FOR_IN
69230: IFFALSE 69450
// begin if not i in hackTanks then
69232: LD_VAR 0 1
69236: PUSH
69237: LD_EXP 99
69241: IN
69242: NOT
69243: IFFALSE 69326
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
69245: LD_ADDR_EXP 99
69249: PUSH
69250: LD_EXP 99
69254: PPUSH
69255: LD_EXP 99
69259: PUSH
69260: LD_INT 1
69262: PLUS
69263: PPUSH
69264: LD_VAR 0 1
69268: PPUSH
69269: CALL_OW 1
69273: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
69274: LD_ADDR_EXP 100
69278: PUSH
69279: LD_EXP 100
69283: PPUSH
69284: LD_EXP 100
69288: PUSH
69289: LD_INT 1
69291: PLUS
69292: PPUSH
69293: EMPTY
69294: PPUSH
69295: CALL_OW 1
69299: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
69300: LD_ADDR_EXP 103
69304: PUSH
69305: LD_EXP 103
69309: PPUSH
69310: LD_EXP 103
69314: PUSH
69315: LD_INT 1
69317: PLUS
69318: PPUSH
69319: EMPTY
69320: PPUSH
69321: CALL_OW 1
69325: ST_TO_ADDR
// end ; if not IsOk ( i ) then
69326: LD_VAR 0 1
69330: PPUSH
69331: CALL_OW 302
69335: NOT
69336: IFFALSE 69349
// begin HackUnlinkAll ( i ) ;
69338: LD_VAR 0 1
69342: PPUSH
69343: CALL 69455 0 1
// continue ;
69347: GO 69229
// end ; HackCheckCapturedStatus ( i ) ;
69349: LD_VAR 0 1
69353: PPUSH
69354: CALL 69898 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
69358: LD_ADDR_VAR 0 2
69362: PUSH
69363: LD_INT 81
69365: PUSH
69366: LD_VAR 0 1
69370: PPUSH
69371: CALL_OW 255
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 33
69382: PUSH
69383: LD_INT 3
69385: PUSH
69386: EMPTY
69387: LIST
69388: LIST
69389: PUSH
69390: LD_INT 91
69392: PUSH
69393: LD_VAR 0 1
69397: PUSH
69398: LD_EXP 102
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 50
69410: PUSH
69411: EMPTY
69412: LIST
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: PPUSH
69420: CALL_OW 69
69424: ST_TO_ADDR
// if not tmp then
69425: LD_VAR 0 2
69429: NOT
69430: IFFALSE 69434
// continue ;
69432: GO 69229
// HackLink ( i , tmp ) ;
69434: LD_VAR 0 1
69438: PPUSH
69439: LD_VAR 0 2
69443: PPUSH
69444: CALL 69591 0 2
// end ;
69448: GO 69229
69450: POP
69451: POP
// end ;
69452: PPOPN 2
69454: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
69455: LD_INT 0
69457: PPUSH
69458: PPUSH
69459: PPUSH
// if not hack in hackTanks then
69460: LD_VAR 0 1
69464: PUSH
69465: LD_EXP 99
69469: IN
69470: NOT
69471: IFFALSE 69475
// exit ;
69473: GO 69586
// index := GetElementIndex ( hackTanks , hack ) ;
69475: LD_ADDR_VAR 0 4
69479: PUSH
69480: LD_EXP 99
69484: PPUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: CALL 13540 0 2
69494: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
69495: LD_EXP 100
69499: PUSH
69500: LD_VAR 0 4
69504: ARRAY
69505: IFFALSE 69586
// begin for i in hackTanksCaptured [ index ] do
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: LD_EXP 100
69516: PUSH
69517: LD_VAR 0 4
69521: ARRAY
69522: PUSH
69523: FOR_IN
69524: IFFALSE 69550
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69526: LD_VAR 0 3
69530: PUSH
69531: LD_INT 1
69533: ARRAY
69534: PPUSH
69535: LD_VAR 0 3
69539: PUSH
69540: LD_INT 2
69542: ARRAY
69543: PPUSH
69544: CALL_OW 235
69548: GO 69523
69550: POP
69551: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69552: LD_ADDR_EXP 100
69556: PUSH
69557: LD_EXP 100
69561: PPUSH
69562: LD_VAR 0 4
69566: PPUSH
69567: EMPTY
69568: PPUSH
69569: CALL_OW 1
69573: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69574: LD_VAR 0 1
69578: PPUSH
69579: LD_INT 0
69581: PPUSH
69582: CALL_OW 505
// end ; end ;
69586: LD_VAR 0 2
69590: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69591: LD_INT 0
69593: PPUSH
69594: PPUSH
69595: PPUSH
// if not hack in hackTanks or not vehicles then
69596: LD_VAR 0 1
69600: PUSH
69601: LD_EXP 99
69605: IN
69606: NOT
69607: PUSH
69608: LD_VAR 0 2
69612: NOT
69613: OR
69614: IFFALSE 69618
// exit ;
69616: GO 69893
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69618: LD_ADDR_VAR 0 2
69622: PUSH
69623: LD_VAR 0 1
69627: PPUSH
69628: LD_VAR 0 2
69632: PPUSH
69633: LD_INT 1
69635: PPUSH
69636: LD_INT 1
69638: PPUSH
69639: CALL 14190 0 4
69643: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69644: LD_ADDR_VAR 0 5
69648: PUSH
69649: LD_EXP 99
69653: PPUSH
69654: LD_VAR 0 1
69658: PPUSH
69659: CALL 13540 0 2
69663: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69664: LD_EXP 100
69668: PUSH
69669: LD_VAR 0 5
69673: ARRAY
69674: PUSH
69675: LD_EXP 101
69679: LESS
69680: IFFALSE 69869
// begin for i := 1 to vehicles do
69682: LD_ADDR_VAR 0 4
69686: PUSH
69687: DOUBLE
69688: LD_INT 1
69690: DEC
69691: ST_TO_ADDR
69692: LD_VAR 0 2
69696: PUSH
69697: FOR_TO
69698: IFFALSE 69867
// begin if hackTanksCaptured [ index ] = hackLimit then
69700: LD_EXP 100
69704: PUSH
69705: LD_VAR 0 5
69709: ARRAY
69710: PUSH
69711: LD_EXP 101
69715: EQUAL
69716: IFFALSE 69720
// break ;
69718: GO 69867
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69720: LD_ADDR_EXP 103
69724: PUSH
69725: LD_EXP 103
69729: PPUSH
69730: LD_VAR 0 5
69734: PPUSH
69735: LD_EXP 103
69739: PUSH
69740: LD_VAR 0 5
69744: ARRAY
69745: PUSH
69746: LD_INT 1
69748: PLUS
69749: PPUSH
69750: CALL_OW 1
69754: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69755: LD_ADDR_EXP 100
69759: PUSH
69760: LD_EXP 100
69764: PPUSH
69765: LD_VAR 0 5
69769: PUSH
69770: LD_EXP 100
69774: PUSH
69775: LD_VAR 0 5
69779: ARRAY
69780: PUSH
69781: LD_INT 1
69783: PLUS
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PPUSH
69789: LD_VAR 0 2
69793: PUSH
69794: LD_VAR 0 4
69798: ARRAY
69799: PUSH
69800: LD_VAR 0 2
69804: PUSH
69805: LD_VAR 0 4
69809: ARRAY
69810: PPUSH
69811: CALL_OW 255
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PPUSH
69820: CALL 13755 0 3
69824: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69825: LD_VAR 0 2
69829: PUSH
69830: LD_VAR 0 4
69834: ARRAY
69835: PPUSH
69836: LD_VAR 0 1
69840: PPUSH
69841: CALL_OW 255
69845: PPUSH
69846: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69850: LD_VAR 0 2
69854: PUSH
69855: LD_VAR 0 4
69859: ARRAY
69860: PPUSH
69861: CALL_OW 141
// end ;
69865: GO 69697
69867: POP
69868: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69869: LD_VAR 0 1
69873: PPUSH
69874: LD_EXP 100
69878: PUSH
69879: LD_VAR 0 5
69883: ARRAY
69884: PUSH
69885: LD_INT 0
69887: PLUS
69888: PPUSH
69889: CALL_OW 505
// end ;
69893: LD_VAR 0 3
69897: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69898: LD_INT 0
69900: PPUSH
69901: PPUSH
69902: PPUSH
69903: PPUSH
// if not hack in hackTanks then
69904: LD_VAR 0 1
69908: PUSH
69909: LD_EXP 99
69913: IN
69914: NOT
69915: IFFALSE 69919
// exit ;
69917: GO 70159
// index := GetElementIndex ( hackTanks , hack ) ;
69919: LD_ADDR_VAR 0 4
69923: PUSH
69924: LD_EXP 99
69928: PPUSH
69929: LD_VAR 0 1
69933: PPUSH
69934: CALL 13540 0 2
69938: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69939: LD_ADDR_VAR 0 3
69943: PUSH
69944: DOUBLE
69945: LD_EXP 100
69949: PUSH
69950: LD_VAR 0 4
69954: ARRAY
69955: INC
69956: ST_TO_ADDR
69957: LD_INT 1
69959: PUSH
69960: FOR_DOWNTO
69961: IFFALSE 70133
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69963: LD_ADDR_VAR 0 5
69967: PUSH
69968: LD_EXP 100
69972: PUSH
69973: LD_VAR 0 4
69977: ARRAY
69978: PUSH
69979: LD_VAR 0 3
69983: ARRAY
69984: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69985: LD_VAR 0 5
69989: PUSH
69990: LD_INT 1
69992: ARRAY
69993: PPUSH
69994: CALL_OW 302
69998: NOT
69999: PUSH
70000: LD_VAR 0 5
70004: PUSH
70005: LD_INT 1
70007: ARRAY
70008: PPUSH
70009: CALL_OW 255
70013: PUSH
70014: LD_VAR 0 1
70018: PPUSH
70019: CALL_OW 255
70023: NONEQUAL
70024: OR
70025: IFFALSE 70131
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
70027: LD_VAR 0 5
70031: PUSH
70032: LD_INT 1
70034: ARRAY
70035: PPUSH
70036: CALL_OW 305
70040: PUSH
70041: LD_VAR 0 5
70045: PUSH
70046: LD_INT 1
70048: ARRAY
70049: PPUSH
70050: CALL_OW 255
70054: PUSH
70055: LD_VAR 0 1
70059: PPUSH
70060: CALL_OW 255
70064: EQUAL
70065: AND
70066: IFFALSE 70090
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
70068: LD_VAR 0 5
70072: PUSH
70073: LD_INT 1
70075: ARRAY
70076: PPUSH
70077: LD_VAR 0 5
70081: PUSH
70082: LD_INT 2
70084: ARRAY
70085: PPUSH
70086: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
70090: LD_ADDR_EXP 100
70094: PUSH
70095: LD_EXP 100
70099: PPUSH
70100: LD_VAR 0 4
70104: PPUSH
70105: LD_EXP 100
70109: PUSH
70110: LD_VAR 0 4
70114: ARRAY
70115: PPUSH
70116: LD_VAR 0 3
70120: PPUSH
70121: CALL_OW 3
70125: PPUSH
70126: CALL_OW 1
70130: ST_TO_ADDR
// end ; end ;
70131: GO 69960
70133: POP
70134: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
70135: LD_VAR 0 1
70139: PPUSH
70140: LD_EXP 100
70144: PUSH
70145: LD_VAR 0 4
70149: ARRAY
70150: PUSH
70151: LD_INT 0
70153: PLUS
70154: PPUSH
70155: CALL_OW 505
// end ;
70159: LD_VAR 0 2
70163: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
70164: LD_INT 0
70166: PPUSH
70167: PPUSH
70168: PPUSH
70169: PPUSH
// if not hack in hackTanks then
70170: LD_VAR 0 1
70174: PUSH
70175: LD_EXP 99
70179: IN
70180: NOT
70181: IFFALSE 70185
// exit ;
70183: GO 70270
// index := GetElementIndex ( hackTanks , hack ) ;
70185: LD_ADDR_VAR 0 5
70189: PUSH
70190: LD_EXP 99
70194: PPUSH
70195: LD_VAR 0 1
70199: PPUSH
70200: CALL 13540 0 2
70204: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
70205: LD_ADDR_VAR 0 4
70209: PUSH
70210: DOUBLE
70211: LD_INT 1
70213: DEC
70214: ST_TO_ADDR
70215: LD_EXP 100
70219: PUSH
70220: LD_VAR 0 5
70224: ARRAY
70225: PUSH
70226: FOR_TO
70227: IFFALSE 70268
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
70229: LD_EXP 100
70233: PUSH
70234: LD_VAR 0 5
70238: ARRAY
70239: PUSH
70240: LD_VAR 0 4
70244: ARRAY
70245: PUSH
70246: LD_INT 1
70248: ARRAY
70249: PUSH
70250: LD_VAR 0 2
70254: EQUAL
70255: IFFALSE 70266
// KillUnit ( vehicle ) ;
70257: LD_VAR 0 2
70261: PPUSH
70262: CALL_OW 66
70266: GO 70226
70268: POP
70269: POP
// end ;
70270: LD_VAR 0 3
70274: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
70275: LD_EXP 104
70279: NOT
70280: IFFALSE 70315
70282: GO 70284
70284: DISABLE
// begin initMiner := true ;
70285: LD_ADDR_EXP 104
70289: PUSH
70290: LD_INT 1
70292: ST_TO_ADDR
// minersList := [ ] ;
70293: LD_ADDR_EXP 105
70297: PUSH
70298: EMPTY
70299: ST_TO_ADDR
// minerMinesList := [ ] ;
70300: LD_ADDR_EXP 106
70304: PUSH
70305: EMPTY
70306: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
70307: LD_ADDR_EXP 107
70311: PUSH
70312: LD_INT 5
70314: ST_TO_ADDR
// end ;
70315: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
70316: LD_EXP 104
70320: PUSH
70321: LD_INT 34
70323: PUSH
70324: LD_INT 81
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PPUSH
70331: CALL_OW 69
70335: AND
70336: IFFALSE 70797
70338: GO 70340
70340: DISABLE
70341: LD_INT 0
70343: PPUSH
70344: PPUSH
70345: PPUSH
70346: PPUSH
// begin enable ;
70347: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
70348: LD_ADDR_VAR 0 1
70352: PUSH
70353: LD_INT 34
70355: PUSH
70356: LD_INT 81
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PPUSH
70363: CALL_OW 69
70367: PUSH
70368: FOR_IN
70369: IFFALSE 70441
// begin if not i in minersList then
70371: LD_VAR 0 1
70375: PUSH
70376: LD_EXP 105
70380: IN
70381: NOT
70382: IFFALSE 70439
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
70384: LD_ADDR_EXP 105
70388: PUSH
70389: LD_EXP 105
70393: PPUSH
70394: LD_EXP 105
70398: PUSH
70399: LD_INT 1
70401: PLUS
70402: PPUSH
70403: LD_VAR 0 1
70407: PPUSH
70408: CALL_OW 1
70412: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70413: LD_ADDR_EXP 106
70417: PUSH
70418: LD_EXP 106
70422: PPUSH
70423: LD_EXP 106
70427: PUSH
70428: LD_INT 1
70430: PLUS
70431: PPUSH
70432: EMPTY
70433: PPUSH
70434: CALL_OW 1
70438: ST_TO_ADDR
// end end ;
70439: GO 70368
70441: POP
70442: POP
// for i := minerMinesList downto 1 do
70443: LD_ADDR_VAR 0 1
70447: PUSH
70448: DOUBLE
70449: LD_EXP 106
70453: INC
70454: ST_TO_ADDR
70455: LD_INT 1
70457: PUSH
70458: FOR_DOWNTO
70459: IFFALSE 70795
// begin if IsLive ( minersList [ i ] ) then
70461: LD_EXP 105
70465: PUSH
70466: LD_VAR 0 1
70470: ARRAY
70471: PPUSH
70472: CALL_OW 300
70476: IFFALSE 70504
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
70478: LD_EXP 105
70482: PUSH
70483: LD_VAR 0 1
70487: ARRAY
70488: PPUSH
70489: LD_EXP 106
70493: PUSH
70494: LD_VAR 0 1
70498: ARRAY
70499: PPUSH
70500: CALL_OW 505
// if not minerMinesList [ i ] then
70504: LD_EXP 106
70508: PUSH
70509: LD_VAR 0 1
70513: ARRAY
70514: NOT
70515: IFFALSE 70519
// continue ;
70517: GO 70458
// for j := minerMinesList [ i ] downto 1 do
70519: LD_ADDR_VAR 0 2
70523: PUSH
70524: DOUBLE
70525: LD_EXP 106
70529: PUSH
70530: LD_VAR 0 1
70534: ARRAY
70535: INC
70536: ST_TO_ADDR
70537: LD_INT 1
70539: PUSH
70540: FOR_DOWNTO
70541: IFFALSE 70791
// begin side := GetSide ( minersList [ i ] ) ;
70543: LD_ADDR_VAR 0 3
70547: PUSH
70548: LD_EXP 105
70552: PUSH
70553: LD_VAR 0 1
70557: ARRAY
70558: PPUSH
70559: CALL_OW 255
70563: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70564: LD_ADDR_VAR 0 4
70568: PUSH
70569: LD_EXP 106
70573: PUSH
70574: LD_VAR 0 1
70578: ARRAY
70579: PUSH
70580: LD_VAR 0 2
70584: ARRAY
70585: PUSH
70586: LD_INT 1
70588: ARRAY
70589: PPUSH
70590: LD_EXP 106
70594: PUSH
70595: LD_VAR 0 1
70599: ARRAY
70600: PUSH
70601: LD_VAR 0 2
70605: ARRAY
70606: PUSH
70607: LD_INT 2
70609: ARRAY
70610: PPUSH
70611: CALL_OW 428
70615: ST_TO_ADDR
// if not tmp then
70616: LD_VAR 0 4
70620: NOT
70621: IFFALSE 70625
// continue ;
70623: GO 70540
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70625: LD_VAR 0 4
70629: PUSH
70630: LD_INT 81
70632: PUSH
70633: LD_VAR 0 3
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PPUSH
70642: CALL_OW 69
70646: IN
70647: PUSH
70648: LD_EXP 106
70652: PUSH
70653: LD_VAR 0 1
70657: ARRAY
70658: PUSH
70659: LD_VAR 0 2
70663: ARRAY
70664: PUSH
70665: LD_INT 1
70667: ARRAY
70668: PPUSH
70669: LD_EXP 106
70673: PUSH
70674: LD_VAR 0 1
70678: ARRAY
70679: PUSH
70680: LD_VAR 0 2
70684: ARRAY
70685: PUSH
70686: LD_INT 2
70688: ARRAY
70689: PPUSH
70690: CALL_OW 458
70694: AND
70695: IFFALSE 70789
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70697: LD_EXP 106
70701: PUSH
70702: LD_VAR 0 1
70706: ARRAY
70707: PUSH
70708: LD_VAR 0 2
70712: ARRAY
70713: PUSH
70714: LD_INT 1
70716: ARRAY
70717: PPUSH
70718: LD_EXP 106
70722: PUSH
70723: LD_VAR 0 1
70727: ARRAY
70728: PUSH
70729: LD_VAR 0 2
70733: ARRAY
70734: PUSH
70735: LD_INT 2
70737: ARRAY
70738: PPUSH
70739: LD_VAR 0 3
70743: PPUSH
70744: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70748: LD_ADDR_EXP 106
70752: PUSH
70753: LD_EXP 106
70757: PPUSH
70758: LD_VAR 0 1
70762: PPUSH
70763: LD_EXP 106
70767: PUSH
70768: LD_VAR 0 1
70772: ARRAY
70773: PPUSH
70774: LD_VAR 0 2
70778: PPUSH
70779: CALL_OW 3
70783: PPUSH
70784: CALL_OW 1
70788: ST_TO_ADDR
// end ; end ;
70789: GO 70540
70791: POP
70792: POP
// end ;
70793: GO 70458
70795: POP
70796: POP
// end ;
70797: PPOPN 4
70799: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70800: LD_INT 0
70802: PPUSH
70803: PPUSH
// result := false ;
70804: LD_ADDR_VAR 0 4
70808: PUSH
70809: LD_INT 0
70811: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70812: LD_VAR 0 1
70816: PPUSH
70817: CALL_OW 264
70821: PUSH
70822: LD_INT 81
70824: EQUAL
70825: NOT
70826: IFFALSE 70830
// exit ;
70828: GO 71070
// index := GetElementIndex ( minersList , unit ) ;
70830: LD_ADDR_VAR 0 5
70834: PUSH
70835: LD_EXP 105
70839: PPUSH
70840: LD_VAR 0 1
70844: PPUSH
70845: CALL 13540 0 2
70849: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70850: LD_EXP 106
70854: PUSH
70855: LD_VAR 0 5
70859: ARRAY
70860: PUSH
70861: LD_EXP 107
70865: GREATEREQUAL
70866: IFFALSE 70870
// exit ;
70868: GO 71070
// ComMoveXY ( unit , x , y ) ;
70870: LD_VAR 0 1
70874: PPUSH
70875: LD_VAR 0 2
70879: PPUSH
70880: LD_VAR 0 3
70884: PPUSH
70885: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70889: LD_INT 35
70891: PPUSH
70892: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70896: LD_VAR 0 1
70900: PPUSH
70901: LD_VAR 0 2
70905: PPUSH
70906: LD_VAR 0 3
70910: PPUSH
70911: CALL 45281 0 3
70915: NOT
70916: PUSH
70917: LD_VAR 0 1
70921: PPUSH
70922: CALL_OW 314
70926: AND
70927: IFFALSE 70931
// exit ;
70929: GO 71070
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70931: LD_VAR 0 2
70935: PPUSH
70936: LD_VAR 0 3
70940: PPUSH
70941: CALL_OW 428
70945: PUSH
70946: LD_VAR 0 1
70950: EQUAL
70951: PUSH
70952: LD_VAR 0 1
70956: PPUSH
70957: CALL_OW 314
70961: NOT
70962: AND
70963: IFFALSE 70889
// PlaySoundXY ( x , y , PlantMine ) ;
70965: LD_VAR 0 2
70969: PPUSH
70970: LD_VAR 0 3
70974: PPUSH
70975: LD_STRING PlantMine
70977: PPUSH
70978: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70982: LD_VAR 0 2
70986: PPUSH
70987: LD_VAR 0 3
70991: PPUSH
70992: LD_VAR 0 1
70996: PPUSH
70997: CALL_OW 255
71001: PPUSH
71002: LD_INT 0
71004: PPUSH
71005: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
71009: LD_ADDR_EXP 106
71013: PUSH
71014: LD_EXP 106
71018: PPUSH
71019: LD_VAR 0 5
71023: PUSH
71024: LD_EXP 106
71028: PUSH
71029: LD_VAR 0 5
71033: ARRAY
71034: PUSH
71035: LD_INT 1
71037: PLUS
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PPUSH
71043: LD_VAR 0 2
71047: PUSH
71048: LD_VAR 0 3
71052: PUSH
71053: EMPTY
71054: LIST
71055: LIST
71056: PPUSH
71057: CALL 13755 0 3
71061: ST_TO_ADDR
// result := true ;
71062: LD_ADDR_VAR 0 4
71066: PUSH
71067: LD_INT 1
71069: ST_TO_ADDR
// end ;
71070: LD_VAR 0 4
71074: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
71075: LD_INT 0
71077: PPUSH
71078: PPUSH
71079: PPUSH
// if not unit in minersList then
71080: LD_VAR 0 1
71084: PUSH
71085: LD_EXP 105
71089: IN
71090: NOT
71091: IFFALSE 71095
// exit ;
71093: GO 71487
// index := GetElementIndex ( minersList , unit ) ;
71095: LD_ADDR_VAR 0 6
71099: PUSH
71100: LD_EXP 105
71104: PPUSH
71105: LD_VAR 0 1
71109: PPUSH
71110: CALL 13540 0 2
71114: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
71115: LD_ADDR_VAR 0 5
71119: PUSH
71120: DOUBLE
71121: LD_EXP 106
71125: PUSH
71126: LD_VAR 0 6
71130: ARRAY
71131: INC
71132: ST_TO_ADDR
71133: LD_INT 1
71135: PUSH
71136: FOR_DOWNTO
71137: IFFALSE 71298
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
71139: LD_EXP 106
71143: PUSH
71144: LD_VAR 0 6
71148: ARRAY
71149: PUSH
71150: LD_VAR 0 5
71154: ARRAY
71155: PUSH
71156: LD_INT 1
71158: ARRAY
71159: PUSH
71160: LD_VAR 0 2
71164: EQUAL
71165: PUSH
71166: LD_EXP 106
71170: PUSH
71171: LD_VAR 0 6
71175: ARRAY
71176: PUSH
71177: LD_VAR 0 5
71181: ARRAY
71182: PUSH
71183: LD_INT 2
71185: ARRAY
71186: PUSH
71187: LD_VAR 0 3
71191: EQUAL
71192: AND
71193: IFFALSE 71296
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71195: LD_EXP 106
71199: PUSH
71200: LD_VAR 0 6
71204: ARRAY
71205: PUSH
71206: LD_VAR 0 5
71210: ARRAY
71211: PUSH
71212: LD_INT 1
71214: ARRAY
71215: PPUSH
71216: LD_EXP 106
71220: PUSH
71221: LD_VAR 0 6
71225: ARRAY
71226: PUSH
71227: LD_VAR 0 5
71231: ARRAY
71232: PUSH
71233: LD_INT 2
71235: ARRAY
71236: PPUSH
71237: LD_VAR 0 1
71241: PPUSH
71242: CALL_OW 255
71246: PPUSH
71247: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71251: LD_ADDR_EXP 106
71255: PUSH
71256: LD_EXP 106
71260: PPUSH
71261: LD_VAR 0 6
71265: PPUSH
71266: LD_EXP 106
71270: PUSH
71271: LD_VAR 0 6
71275: ARRAY
71276: PPUSH
71277: LD_VAR 0 5
71281: PPUSH
71282: CALL_OW 3
71286: PPUSH
71287: CALL_OW 1
71291: ST_TO_ADDR
// exit ;
71292: POP
71293: POP
71294: GO 71487
// end ; end ;
71296: GO 71136
71298: POP
71299: POP
// for i := minerMinesList [ index ] downto 1 do
71300: LD_ADDR_VAR 0 5
71304: PUSH
71305: DOUBLE
71306: LD_EXP 106
71310: PUSH
71311: LD_VAR 0 6
71315: ARRAY
71316: INC
71317: ST_TO_ADDR
71318: LD_INT 1
71320: PUSH
71321: FOR_DOWNTO
71322: IFFALSE 71485
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
71324: LD_EXP 106
71328: PUSH
71329: LD_VAR 0 6
71333: ARRAY
71334: PUSH
71335: LD_VAR 0 5
71339: ARRAY
71340: PUSH
71341: LD_INT 1
71343: ARRAY
71344: PPUSH
71345: LD_EXP 106
71349: PUSH
71350: LD_VAR 0 6
71354: ARRAY
71355: PUSH
71356: LD_VAR 0 5
71360: ARRAY
71361: PUSH
71362: LD_INT 2
71364: ARRAY
71365: PPUSH
71366: LD_VAR 0 2
71370: PPUSH
71371: LD_VAR 0 3
71375: PPUSH
71376: CALL_OW 298
71380: PUSH
71381: LD_INT 6
71383: LESS
71384: IFFALSE 71483
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71386: LD_EXP 106
71390: PUSH
71391: LD_VAR 0 6
71395: ARRAY
71396: PUSH
71397: LD_VAR 0 5
71401: ARRAY
71402: PUSH
71403: LD_INT 1
71405: ARRAY
71406: PPUSH
71407: LD_EXP 106
71411: PUSH
71412: LD_VAR 0 6
71416: ARRAY
71417: PUSH
71418: LD_VAR 0 5
71422: ARRAY
71423: PUSH
71424: LD_INT 2
71426: ARRAY
71427: PPUSH
71428: LD_VAR 0 1
71432: PPUSH
71433: CALL_OW 255
71437: PPUSH
71438: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71442: LD_ADDR_EXP 106
71446: PUSH
71447: LD_EXP 106
71451: PPUSH
71452: LD_VAR 0 6
71456: PPUSH
71457: LD_EXP 106
71461: PUSH
71462: LD_VAR 0 6
71466: ARRAY
71467: PPUSH
71468: LD_VAR 0 5
71472: PPUSH
71473: CALL_OW 3
71477: PPUSH
71478: CALL_OW 1
71482: ST_TO_ADDR
// end ; end ;
71483: GO 71321
71485: POP
71486: POP
// end ;
71487: LD_VAR 0 4
71491: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71492: LD_INT 0
71494: PPUSH
71495: PPUSH
71496: PPUSH
71497: PPUSH
71498: PPUSH
71499: PPUSH
71500: PPUSH
71501: PPUSH
71502: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71503: LD_VAR 0 1
71507: PPUSH
71508: CALL_OW 264
71512: PUSH
71513: LD_INT 81
71515: EQUAL
71516: NOT
71517: PUSH
71518: LD_VAR 0 1
71522: PUSH
71523: LD_EXP 105
71527: IN
71528: NOT
71529: OR
71530: IFFALSE 71534
// exit ;
71532: GO 71856
// index := GetElementIndex ( minersList , unit ) ;
71534: LD_ADDR_VAR 0 6
71538: PUSH
71539: LD_EXP 105
71543: PPUSH
71544: LD_VAR 0 1
71548: PPUSH
71549: CALL 13540 0 2
71553: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71554: LD_ADDR_VAR 0 8
71558: PUSH
71559: LD_EXP 107
71563: PUSH
71564: LD_EXP 106
71568: PUSH
71569: LD_VAR 0 6
71573: ARRAY
71574: MINUS
71575: ST_TO_ADDR
// if not minesFreeAmount then
71576: LD_VAR 0 8
71580: NOT
71581: IFFALSE 71585
// exit ;
71583: GO 71856
// tmp := [ ] ;
71585: LD_ADDR_VAR 0 7
71589: PUSH
71590: EMPTY
71591: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71592: LD_ADDR_VAR 0 5
71596: PUSH
71597: DOUBLE
71598: LD_INT 1
71600: DEC
71601: ST_TO_ADDR
71602: LD_VAR 0 8
71606: PUSH
71607: FOR_TO
71608: IFFALSE 71803
// begin _d := rand ( 0 , 5 ) ;
71610: LD_ADDR_VAR 0 11
71614: PUSH
71615: LD_INT 0
71617: PPUSH
71618: LD_INT 5
71620: PPUSH
71621: CALL_OW 12
71625: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71626: LD_ADDR_VAR 0 12
71630: PUSH
71631: LD_INT 2
71633: PPUSH
71634: LD_INT 6
71636: PPUSH
71637: CALL_OW 12
71641: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71642: LD_ADDR_VAR 0 9
71646: PUSH
71647: LD_VAR 0 2
71651: PPUSH
71652: LD_VAR 0 11
71656: PPUSH
71657: LD_VAR 0 12
71661: PPUSH
71662: CALL_OW 272
71666: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71667: LD_ADDR_VAR 0 10
71671: PUSH
71672: LD_VAR 0 3
71676: PPUSH
71677: LD_VAR 0 11
71681: PPUSH
71682: LD_VAR 0 12
71686: PPUSH
71687: CALL_OW 273
71691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71692: LD_VAR 0 9
71696: PPUSH
71697: LD_VAR 0 10
71701: PPUSH
71702: CALL_OW 488
71706: PUSH
71707: LD_VAR 0 9
71711: PUSH
71712: LD_VAR 0 10
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_VAR 0 7
71725: IN
71726: NOT
71727: AND
71728: PUSH
71729: LD_VAR 0 9
71733: PPUSH
71734: LD_VAR 0 10
71738: PPUSH
71739: CALL_OW 458
71743: NOT
71744: AND
71745: IFFALSE 71787
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71747: LD_ADDR_VAR 0 7
71751: PUSH
71752: LD_VAR 0 7
71756: PPUSH
71757: LD_VAR 0 7
71761: PUSH
71762: LD_INT 1
71764: PLUS
71765: PPUSH
71766: LD_VAR 0 9
71770: PUSH
71771: LD_VAR 0 10
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PPUSH
71780: CALL_OW 1
71784: ST_TO_ADDR
71785: GO 71801
// i := i - 1 ;
71787: LD_ADDR_VAR 0 5
71791: PUSH
71792: LD_VAR 0 5
71796: PUSH
71797: LD_INT 1
71799: MINUS
71800: ST_TO_ADDR
// end ;
71801: GO 71607
71803: POP
71804: POP
// for i in tmp do
71805: LD_ADDR_VAR 0 5
71809: PUSH
71810: LD_VAR 0 7
71814: PUSH
71815: FOR_IN
71816: IFFALSE 71854
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71818: LD_VAR 0 1
71822: PPUSH
71823: LD_VAR 0 5
71827: PUSH
71828: LD_INT 1
71830: ARRAY
71831: PPUSH
71832: LD_VAR 0 5
71836: PUSH
71837: LD_INT 2
71839: ARRAY
71840: PPUSH
71841: CALL 70800 0 3
71845: NOT
71846: IFFALSE 71852
// exit ;
71848: POP
71849: POP
71850: GO 71856
71852: GO 71815
71854: POP
71855: POP
// end ;
71856: LD_VAR 0 4
71860: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
71861: LD_INT 0
71863: PPUSH
71864: PPUSH
71865: PPUSH
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
// if not GetClass ( unit ) = class_sniper then
71870: LD_VAR 0 1
71874: PPUSH
71875: CALL_OW 257
71879: PUSH
71880: LD_INT 5
71882: EQUAL
71883: NOT
71884: IFFALSE 71888
// exit ;
71886: GO 72276
// dist := 8 ;
71888: LD_ADDR_VAR 0 5
71892: PUSH
71893: LD_INT 8
71895: ST_TO_ADDR
// viewRange := 12 ;
71896: LD_ADDR_VAR 0 7
71900: PUSH
71901: LD_INT 12
71903: ST_TO_ADDR
// side := GetSide ( unit ) ;
71904: LD_ADDR_VAR 0 6
71908: PUSH
71909: LD_VAR 0 1
71913: PPUSH
71914: CALL_OW 255
71918: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71919: LD_INT 61
71921: PPUSH
71922: LD_VAR 0 6
71926: PPUSH
71927: CALL_OW 321
71931: PUSH
71932: LD_INT 2
71934: EQUAL
71935: IFFALSE 71945
// viewRange := 16 ;
71937: LD_ADDR_VAR 0 7
71941: PUSH
71942: LD_INT 16
71944: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71945: LD_VAR 0 1
71949: PPUSH
71950: LD_VAR 0 2
71954: PPUSH
71955: LD_VAR 0 3
71959: PPUSH
71960: CALL_OW 297
71964: PUSH
71965: LD_VAR 0 5
71969: GREATER
71970: IFFALSE 72049
// begin ComMoveXY ( unit , x , y ) ;
71972: LD_VAR 0 1
71976: PPUSH
71977: LD_VAR 0 2
71981: PPUSH
71982: LD_VAR 0 3
71986: PPUSH
71987: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71991: LD_INT 35
71993: PPUSH
71994: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71998: LD_VAR 0 1
72002: PPUSH
72003: LD_VAR 0 2
72007: PPUSH
72008: LD_VAR 0 3
72012: PPUSH
72013: CALL 45281 0 3
72017: NOT
72018: IFFALSE 72022
// exit ;
72020: GO 72276
// until GetDistUnitXY ( unit , x , y ) < dist ;
72022: LD_VAR 0 1
72026: PPUSH
72027: LD_VAR 0 2
72031: PPUSH
72032: LD_VAR 0 3
72036: PPUSH
72037: CALL_OW 297
72041: PUSH
72042: LD_VAR 0 5
72046: LESS
72047: IFFALSE 71991
// end ; ComTurnXY ( unit , x , y ) ;
72049: LD_VAR 0 1
72053: PPUSH
72054: LD_VAR 0 2
72058: PPUSH
72059: LD_VAR 0 3
72063: PPUSH
72064: CALL_OW 118
// wait ( 5 ) ;
72068: LD_INT 5
72070: PPUSH
72071: CALL_OW 67
// _d := GetDir ( unit ) ;
72075: LD_ADDR_VAR 0 10
72079: PUSH
72080: LD_VAR 0 1
72084: PPUSH
72085: CALL_OW 254
72089: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
72090: LD_ADDR_VAR 0 8
72094: PUSH
72095: LD_VAR 0 1
72099: PPUSH
72100: CALL_OW 250
72104: PPUSH
72105: LD_VAR 0 10
72109: PPUSH
72110: LD_VAR 0 5
72114: PPUSH
72115: CALL_OW 272
72119: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
72120: LD_ADDR_VAR 0 9
72124: PUSH
72125: LD_VAR 0 1
72129: PPUSH
72130: CALL_OW 251
72134: PPUSH
72135: LD_VAR 0 10
72139: PPUSH
72140: LD_VAR 0 5
72144: PPUSH
72145: CALL_OW 273
72149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72150: LD_VAR 0 8
72154: PPUSH
72155: LD_VAR 0 9
72159: PPUSH
72160: CALL_OW 488
72164: NOT
72165: IFFALSE 72169
// exit ;
72167: GO 72276
// ComAnimCustom ( unit , 1 ) ;
72169: LD_VAR 0 1
72173: PPUSH
72174: LD_INT 1
72176: PPUSH
72177: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
72181: LD_VAR 0 8
72185: PPUSH
72186: LD_VAR 0 9
72190: PPUSH
72191: LD_VAR 0 6
72195: PPUSH
72196: LD_VAR 0 7
72200: PPUSH
72201: CALL_OW 330
// repeat wait ( 1 ) ;
72205: LD_INT 1
72207: PPUSH
72208: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
72212: LD_VAR 0 1
72216: PPUSH
72217: CALL_OW 316
72221: PUSH
72222: LD_VAR 0 1
72226: PPUSH
72227: CALL_OW 314
72231: OR
72232: PUSH
72233: LD_VAR 0 1
72237: PPUSH
72238: CALL_OW 302
72242: NOT
72243: OR
72244: PUSH
72245: LD_VAR 0 1
72249: PPUSH
72250: CALL_OW 301
72254: OR
72255: IFFALSE 72205
// RemoveSeeing ( _x , _y , side ) ;
72257: LD_VAR 0 8
72261: PPUSH
72262: LD_VAR 0 9
72266: PPUSH
72267: LD_VAR 0 6
72271: PPUSH
72272: CALL_OW 331
// end ; end_of_file
72276: LD_VAR 0 4
72280: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
72281: LD_VAR 0 1
72285: PPUSH
72286: LD_VAR 0 2
72290: PPUSH
72291: LD_VAR 0 3
72295: PPUSH
72296: LD_VAR 0 4
72300: PPUSH
72301: LD_VAR 0 5
72305: PPUSH
72306: LD_VAR 0 6
72310: PPUSH
72311: CALL 51740 0 6
// end ;
72315: PPOPN 6
72317: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
72318: LD_INT 0
72320: PPUSH
// begin if not units then
72321: LD_VAR 0 1
72325: NOT
72326: IFFALSE 72330
// exit ;
72328: GO 72330
// end ;
72330: PPOPN 7
72332: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
72333: CALL 51627 0 0
// end ; end_of_file
72337: PPOPN 1
72339: END
