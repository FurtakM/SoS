// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3094 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 4802 0 1
  44: PPUSH
  45: CALL 856 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 4802 0 1
  56: PPUSH
  57: CALL 10908 0 1
// Multiplayer_Start ;
  61: CALL 6472 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 39
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 39
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 6591 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// end ;
 174: LD_VAR 0 1
 178: RET
// every 0 0$01 trigger game and not debug_strings do
 179: LD_EXP 2
 183: PUSH
 184: LD_OWVAR 48
 188: NOT
 189: AND
 190: IFFALSE 206
 192: GO 194
 194: DISABLE
// begin enable ;
 195: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: CALL 7018 0 0
 205: ST_TO_ADDR
// end ; end_of_file
 206: END
// every 0 0$30 trigger convoyWave = [ 6 , 8 , 10 ] [ Difficulty ] do var i , j , un , veh , skill ;
 207: LD_EXP 38
 211: PUSH
 212: LD_INT 6
 214: PUSH
 215: LD_INT 8
 217: PUSH
 218: LD_INT 10
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: LIST
 225: PUSH
 226: LD_OWVAR 67
 230: ARRAY
 231: EQUAL
 232: IFFALSE 565
 234: GO 236
 236: DISABLE
 237: LD_INT 0
 239: PPUSH
 240: PPUSH
 241: PPUSH
 242: PPUSH
 243: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 244: LD_INT 35
 246: PPUSH
 247: CALL_OW 67
// until not blockThread ;
 251: LD_EXP 6
 255: NOT
 256: IFFALSE 244
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 258: LD_ADDR_VAR 0 5
 262: PUSH
 263: LD_INT 6
 265: PUSH
 266: LD_INT 4
 268: PUSH
 269: LD_INT 2
 271: PUSH
 272: EMPTY
 273: LIST
 274: LIST
 275: LIST
 276: PUSH
 277: LD_OWVAR 67
 281: ARRAY
 282: ST_TO_ADDR
// for i := 1 to 8 do
 283: LD_ADDR_VAR 0 1
 287: PUSH
 288: DOUBLE
 289: LD_INT 1
 291: DEC
 292: ST_TO_ADDR
 293: LD_INT 8
 295: PUSH
 296: FOR_TO
 297: IFFALSE 563
// if multi_sides [ i ] = 2 then
 299: LD_EXP 14
 303: PUSH
 304: LD_VAR 0 1
 308: ARRAY
 309: PUSH
 310: LD_INT 2
 312: EQUAL
 313: IFFALSE 561
// begin if i = your_side then
 315: LD_VAR 0 1
 319: PUSH
 320: LD_OWVAR 2
 324: EQUAL
 325: IFFALSE 337
// CenterNowOnXY ( 112 , 172 ) ;
 327: LD_INT 112
 329: PPUSH
 330: LD_INT 172
 332: PPUSH
 333: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 337: LD_INT 0
 339: PPUSH
 340: LD_VAR 0 5
 344: PPUSH
 345: CALL_OW 382
// un := CreateHuman ;
 349: LD_ADDR_VAR 0 3
 353: PUSH
 354: CALL_OW 44
 358: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 359: LD_VAR 0 3
 363: PPUSH
 364: LD_INT 25
 366: PPUSH
 367: LD_INT 0
 369: PPUSH
 370: CALL_OW 49
// for j := 1 to 2 do
 374: LD_ADDR_VAR 0 2
 378: PUSH
 379: DOUBLE
 380: LD_INT 1
 382: DEC
 383: ST_TO_ADDR
 384: LD_INT 2
 386: PUSH
 387: FOR_TO
 388: IFFALSE 429
// begin PrepareMechanic ( false , skill ) ;
 390: LD_INT 0
 392: PPUSH
 393: LD_VAR 0 5
 397: PPUSH
 398: CALL_OW 383
// un := CreateHuman ;
 402: LD_ADDR_VAR 0 3
 406: PUSH
 407: CALL_OW 44
 411: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 412: LD_VAR 0 3
 416: PPUSH
 417: LD_INT 25
 419: PPUSH
 420: LD_INT 0
 422: PPUSH
 423: CALL_OW 49
// end ;
 427: GO 387
 429: POP
 430: POP
// for j := 1 to 2 do
 431: LD_ADDR_VAR 0 2
 435: PUSH
 436: DOUBLE
 437: LD_INT 1
 439: DEC
 440: ST_TO_ADDR
 441: LD_INT 2
 443: PUSH
 444: FOR_TO
 445: IFFALSE 559
// begin uc_side := i ;
 447: LD_ADDR_OWVAR 20
 451: PUSH
 452: LD_VAR 0 1
 456: ST_TO_ADDR
// uc_nation := nation_russian ;
 457: LD_ADDR_OWVAR 21
 461: PUSH
 462: LD_INT 3
 464: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 465: LD_INT 22
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_INT 44
 476: PPUSH
 477: LD_INT 50
 479: PPUSH
 480: CALL 18683 0 5
// veh := CreateVehicle ;
 484: LD_ADDR_VAR 0 4
 488: PUSH
 489: CALL_OW 45
 493: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 494: LD_VAR 0 4
 498: PPUSH
 499: LD_INT 5
 501: PPUSH
 502: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 506: LD_INT 0
 508: PPUSH
 509: LD_VAR 0 5
 513: PPUSH
 514: CALL_OW 383
// un := CreateHuman ;
 518: LD_ADDR_VAR 0 3
 522: PUSH
 523: CALL_OW 44
 527: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 528: LD_VAR 0 4
 532: PPUSH
 533: LD_INT 25
 535: PPUSH
 536: LD_INT 0
 538: PPUSH
 539: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 543: LD_VAR 0 3
 547: PPUSH
 548: LD_VAR 0 4
 552: PPUSH
 553: CALL_OW 52
// end ;
 557: GO 444
 559: POP
 560: POP
// end ;
 561: GO 296
 563: POP
 564: POP
// end ;
 565: PPOPN 5
 567: END
// every 0 0$30 trigger convoyWave = [ 12 , 14 , 16 ] [ Difficulty ] do var i , j , un , veh , skill ;
 568: LD_EXP 38
 572: PUSH
 573: LD_INT 12
 575: PUSH
 576: LD_INT 14
 578: PUSH
 579: LD_INT 16
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: PUSH
 587: LD_OWVAR 67
 591: ARRAY
 592: EQUAL
 593: IFFALSE 853
 595: GO 597
 597: DISABLE
 598: LD_INT 0
 600: PPUSH
 601: PPUSH
 602: PPUSH
 603: PPUSH
 604: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 605: LD_INT 35
 607: PPUSH
 608: CALL_OW 67
// until not blockThread ;
 612: LD_EXP 6
 616: NOT
 617: IFFALSE 605
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 619: LD_ADDR_VAR 0 5
 623: PUSH
 624: LD_INT 6
 626: PUSH
 627: LD_INT 4
 629: PUSH
 630: LD_INT 2
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: LIST
 637: PUSH
 638: LD_OWVAR 67
 642: ARRAY
 643: ST_TO_ADDR
// for i := 1 to 8 do
 644: LD_ADDR_VAR 0 1
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 8
 656: PUSH
 657: FOR_TO
 658: IFFALSE 851
// if multi_sides [ i ] = 1 then
 660: LD_EXP 14
 664: PUSH
 665: LD_VAR 0 1
 669: ARRAY
 670: PUSH
 671: LD_INT 1
 673: EQUAL
 674: IFFALSE 849
// begin if i = your_side then
 676: LD_VAR 0 1
 680: PUSH
 681: LD_OWVAR 2
 685: EQUAL
 686: IFFALSE 698
// CenterNowOnXY ( 112 , 172 ) ;
 688: LD_INT 112
 690: PPUSH
 691: LD_INT 172
 693: PPUSH
 694: CALL_OW 86
// for j := 1 to 3 do
 698: LD_ADDR_VAR 0 2
 702: PUSH
 703: DOUBLE
 704: LD_INT 1
 706: DEC
 707: ST_TO_ADDR
 708: LD_INT 3
 710: PUSH
 711: FOR_TO
 712: IFFALSE 847
// begin uc_side := i ;
 714: LD_ADDR_OWVAR 20
 718: PUSH
 719: LD_VAR 0 1
 723: ST_TO_ADDR
// uc_nation := nation_russian ;
 724: LD_ADDR_OWVAR 21
 728: PUSH
 729: LD_INT 3
 731: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 732: LD_INT 22
 734: PPUSH
 735: LD_INT 1
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 44
 743: PUSH
 744: LD_INT 43
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_VAR 0 1
 755: PUSH
 756: LD_INT 2
 758: MOD
 759: PUSH
 760: LD_INT 1
 762: PLUS
 763: ARRAY
 764: PPUSH
 765: LD_INT 50
 767: PPUSH
 768: CALL 18683 0 5
// veh := CreateVehicle ;
 772: LD_ADDR_VAR 0 4
 776: PUSH
 777: CALL_OW 45
 781: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 782: LD_VAR 0 4
 786: PPUSH
 787: LD_INT 5
 789: PPUSH
 790: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 794: LD_INT 0
 796: PPUSH
 797: LD_VAR 0 5
 801: PPUSH
 802: CALL_OW 383
// un := CreateHuman ;
 806: LD_ADDR_VAR 0 3
 810: PUSH
 811: CALL_OW 44
 815: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 816: LD_VAR 0 4
 820: PPUSH
 821: LD_INT 25
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 831: LD_VAR 0 3
 835: PPUSH
 836: LD_VAR 0 4
 840: PPUSH
 841: CALL_OW 52
// end ;
 845: GO 711
 847: POP
 848: POP
// end ;
 849: GO 657
 851: POP
 852: POP
// end ; end_of_file
 853: PPOPN 5
 855: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
 856: LD_INT 0
 858: PPUSH
 859: PPUSH
 860: PPUSH
 861: PPUSH
 862: PPUSH
// enemySide := side ;
 863: LD_ADDR_EXP 11
 867: PUSH
 868: LD_VAR 0 1
 872: ST_TO_ADDR
// enemyUnits := [ ] ;
 873: LD_ADDR_EXP 8
 877: PUSH
 878: EMPTY
 879: ST_TO_ADDR
// enemyMobile := [ ] ;
 880: LD_ADDR_EXP 9
 884: PUSH
 885: EMPTY
 886: ST_TO_ADDR
// enemyForestGuard := [ ] ;
 887: LD_ADDR_EXP 10
 891: PUSH
 892: EMPTY
 893: ST_TO_ADDR
// arAttackersInf := [ ] ;
 894: LD_ADDR_EXP 12
 898: PUSH
 899: EMPTY
 900: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
 901: LD_ADDR_VAR 0 5
 905: PUSH
 906: LD_INT 4
 908: PUSH
 909: LD_INT 6
 911: PUSH
 912: LD_INT 8
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: LIST
 919: PUSH
 920: LD_OWVAR 67
 924: ARRAY
 925: ST_TO_ADDR
// uc_side := side ;
 926: LD_ADDR_OWVAR 20
 930: PUSH
 931: LD_VAR 0 1
 935: ST_TO_ADDR
// uc_nation := nation_arabian ;
 936: LD_ADDR_OWVAR 21
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// for i := 1 to [ 5 , 7 , 8 ] [ Difficulty ] do
 944: LD_ADDR_VAR 0 3
 948: PUSH
 949: DOUBLE
 950: LD_INT 1
 952: DEC
 953: ST_TO_ADDR
 954: LD_INT 5
 956: PUSH
 957: LD_INT 7
 959: PUSH
 960: LD_INT 8
 962: PUSH
 963: EMPTY
 964: LIST
 965: LIST
 966: LIST
 967: PUSH
 968: LD_OWVAR 67
 972: ARRAY
 973: PUSH
 974: FOR_TO
 975: IFFALSE 1062
// begin PrepareSoldier ( false , skill ) ;
 977: LD_INT 0
 979: PPUSH
 980: LD_VAR 0 5
 984: PPUSH
 985: CALL_OW 381
// un := CreateHuman ;
 989: LD_ADDR_VAR 0 4
 993: PUSH
 994: CALL_OW 44
 998: ST_TO_ADDR
// if i mod 2 = 0 then
 999: LD_VAR 0 3
1003: PUSH
1004: LD_INT 2
1006: MOD
1007: PUSH
1008: LD_INT 0
1010: EQUAL
1011: IFFALSE 1025
// SetClass ( un , class_mortar ) ;
1013: LD_VAR 0 4
1017: PPUSH
1018: LD_INT 8
1020: PPUSH
1021: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1025: LD_ADDR_EXP 10
1029: PUSH
1030: LD_EXP 10
1034: PPUSH
1035: LD_VAR 0 4
1039: PPUSH
1040: CALL 51534 0 2
1044: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1045: LD_VAR 0 4
1049: PPUSH
1050: LD_INT 17
1052: PPUSH
1053: LD_INT 0
1055: PPUSH
1056: CALL_OW 49
// end ;
1060: GO 974
1062: POP
1063: POP
// PrepareScientist ( false , skill ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_VAR 0 5
1071: PPUSH
1072: CALL_OW 384
// un := CreateHuman ;
1076: LD_ADDR_VAR 0 4
1080: PUSH
1081: CALL_OW 44
1085: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1086: LD_ADDR_EXP 10
1090: PUSH
1091: LD_EXP 10
1095: PPUSH
1096: LD_VAR 0 4
1100: PPUSH
1101: CALL 51534 0 2
1105: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1106: LD_VAR 0 4
1110: PPUSH
1111: LD_INT 17
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1121: LD_ADDR_VAR 0 3
1125: PUSH
1126: DOUBLE
1127: LD_INT 1
1129: DEC
1130: ST_TO_ADDR
1131: LD_INT 2
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: LD_INT 3
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: LIST
1144: PUSH
1145: LD_OWVAR 67
1149: ARRAY
1150: PUSH
1151: FOR_TO
1152: IFFALSE 1288
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1154: LD_INT 14
1156: PPUSH
1157: LD_INT 2
1159: PPUSH
1160: LD_INT 1
1162: PPUSH
1163: LD_INT 27
1165: PPUSH
1166: LD_INT 100
1168: PPUSH
1169: CALL 18683 0 5
// veh := CreateVehicle ;
1173: LD_ADDR_VAR 0 6
1177: PUSH
1178: CALL_OW 45
1182: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1183: LD_ADDR_EXP 10
1187: PUSH
1188: LD_EXP 10
1192: PPUSH
1193: LD_VAR 0 6
1197: PPUSH
1198: CALL 51534 0 2
1202: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1203: LD_VAR 0 6
1207: PPUSH
1208: LD_INT 5
1210: PPUSH
1211: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1215: LD_INT 0
1217: PPUSH
1218: LD_VAR 0 5
1222: PPUSH
1223: CALL_OW 383
// un := CreateHuman ;
1227: LD_ADDR_VAR 0 4
1231: PUSH
1232: CALL_OW 44
1236: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1237: LD_ADDR_EXP 10
1241: PUSH
1242: LD_EXP 10
1246: PPUSH
1247: LD_VAR 0 4
1251: PPUSH
1252: CALL 51534 0 2
1256: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1257: LD_VAR 0 6
1261: PPUSH
1262: LD_INT 18
1264: PPUSH
1265: LD_INT 0
1267: PPUSH
1268: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1272: LD_VAR 0 4
1276: PPUSH
1277: LD_VAR 0 6
1281: PPUSH
1282: CALL_OW 52
// end ;
1286: GO 1151
1288: POP
1289: POP
// for i := 1 to 2 do
1290: LD_ADDR_VAR 0 3
1294: PUSH
1295: DOUBLE
1296: LD_INT 1
1298: DEC
1299: ST_TO_ADDR
1300: LD_INT 2
1302: PUSH
1303: FOR_TO
1304: IFFALSE 1387
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1306: LD_INT 14
1308: PPUSH
1309: LD_INT 2
1311: PPUSH
1312: LD_INT 1
1314: PPUSH
1315: LD_INT 32
1317: PPUSH
1318: LD_INT 100
1320: PPUSH
1321: CALL 18683 0 5
// veh := CreateVehicle ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: CALL_OW 45
1334: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1335: LD_VAR 0 6
1339: PPUSH
1340: LD_INT 2
1342: PPUSH
1343: LD_INT 3
1345: PPUSH
1346: CALL_OW 12
1350: PPUSH
1351: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1355: LD_VAR 0 6
1359: PPUSH
1360: LD_INT 22
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1370: LD_VAR 0 6
1374: PPUSH
1375: LD_INT 2
1377: PPUSH
1378: LD_INT 100
1380: PPUSH
1381: CALL_OW 290
// end ;
1385: GO 1303
1387: POP
1388: POP
// end ;
1389: LD_VAR 0 2
1393: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1394: LD_INT 0
1396: PPUSH
1397: PPUSH
1398: PPUSH
1399: PPUSH
1400: PPUSH
1401: PPUSH
// v := convoyWave div 10 ;
1402: LD_ADDR_VAR 0 6
1406: PUSH
1407: LD_EXP 38
1411: PUSH
1412: LD_INT 10
1414: DIV
1415: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1416: LD_ADDR_VAR 0 5
1420: PUSH
1421: LD_INT 4
1423: PUSH
1424: LD_INT 5
1426: PUSH
1427: LD_INT 6
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: LIST
1434: PUSH
1435: LD_OWVAR 67
1439: ARRAY
1440: PUSH
1441: LD_VAR 0 6
1445: PLUS
1446: ST_TO_ADDR
// if skill > 10 then
1447: LD_VAR 0 5
1451: PUSH
1452: LD_INT 10
1454: GREATER
1455: IFFALSE 1465
// skill := 10 ;
1457: LD_ADDR_VAR 0 5
1461: PUSH
1462: LD_INT 10
1464: ST_TO_ADDR
// if v > 8 then
1465: LD_VAR 0 6
1469: PUSH
1470: LD_INT 8
1472: GREATER
1473: IFFALSE 1483
// v := 8 ;
1475: LD_ADDR_VAR 0 6
1479: PUSH
1480: LD_INT 8
1482: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1483: LD_ADDR_VAR 0 2
1487: PUSH
1488: DOUBLE
1489: LD_INT 1
1491: DEC
1492: ST_TO_ADDR
1493: LD_INT 2
1495: PUSH
1496: LD_INT 3
1498: PUSH
1499: LD_INT 3
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PUSH
1507: LD_OWVAR 67
1511: ARRAY
1512: PUSH
1513: LD_VAR 0 6
1517: PLUS
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1699
// begin uc_side := enemySide ;
1522: LD_ADDR_OWVAR 20
1526: PUSH
1527: LD_EXP 11
1531: ST_TO_ADDR
// uc_nation := nation_arabian ;
1532: LD_ADDR_OWVAR 21
1536: PUSH
1537: LD_INT 2
1539: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1540: LD_INT 14
1542: PPUSH
1543: LD_INT 1
1545: PPUSH
1546: LD_INT 1
1548: PPUSH
1549: LD_INT 27
1551: PUSH
1552: LD_INT 25
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_VAR 0 2
1563: PUSH
1564: LD_INT 2
1566: MOD
1567: PUSH
1568: LD_INT 1
1570: PLUS
1571: ARRAY
1572: PPUSH
1573: LD_INT 100
1575: PPUSH
1576: CALL 18683 0 5
// veh := CreateVehicle ;
1580: LD_ADDR_VAR 0 3
1584: PUSH
1585: CALL_OW 45
1589: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1590: LD_ADDR_EXP 9
1594: PUSH
1595: LD_EXP 9
1599: PPUSH
1600: LD_VAR 0 3
1604: PPUSH
1605: CALL 51534 0 2
1609: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1610: LD_VAR 0 3
1614: PPUSH
1615: LD_INT 2
1617: PPUSH
1618: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1622: LD_INT 0
1624: PPUSH
1625: LD_VAR 0 5
1629: PPUSH
1630: CALL_OW 383
// un := CreateHuman ;
1634: LD_ADDR_VAR 0 4
1638: PUSH
1639: CALL_OW 44
1643: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1644: LD_INT 35
1646: PPUSH
1647: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1651: LD_VAR 0 3
1655: PPUSH
1656: LD_INT 23
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 49
1666: IFFALSE 1644
// PlaceHumanInUnit ( un , veh ) ;
1668: LD_VAR 0 4
1672: PPUSH
1673: LD_VAR 0 3
1677: PPUSH
1678: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1682: LD_VAR 0 3
1686: PPUSH
1687: LD_INT 104
1689: PPUSH
1690: LD_INT 18
1692: PPUSH
1693: CALL_OW 111
// end ;
1697: GO 1519
1699: POP
1700: POP
// end ;
1701: LD_VAR 0 1
1705: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1706: LD_INT 0
1708: PPUSH
1709: PPUSH
1710: PPUSH
1711: PPUSH
1712: PPUSH
1713: PPUSH
// v := convoyWave div 10 ;
1714: LD_ADDR_VAR 0 6
1718: PUSH
1719: LD_EXP 38
1723: PUSH
1724: LD_INT 10
1726: DIV
1727: ST_TO_ADDR
// if v > 8 then
1728: LD_VAR 0 6
1732: PUSH
1733: LD_INT 8
1735: GREATER
1736: IFFALSE 1746
// v := 8 ;
1738: LD_ADDR_VAR 0 6
1742: PUSH
1743: LD_INT 8
1745: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1746: LD_ADDR_VAR 0 2
1750: PUSH
1751: DOUBLE
1752: LD_INT 1
1754: DEC
1755: ST_TO_ADDR
1756: LD_INT 3
1758: PUSH
1759: LD_INT 4
1761: PUSH
1762: LD_INT 5
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: LIST
1769: PUSH
1770: LD_OWVAR 67
1774: ARRAY
1775: PUSH
1776: LD_VAR 0 6
1780: PLUS
1781: PUSH
1782: FOR_TO
1783: IFFALSE 1966
// begin uc_side := enemySide ;
1785: LD_ADDR_OWVAR 20
1789: PUSH
1790: LD_EXP 11
1794: ST_TO_ADDR
// uc_nation := nation_arabian ;
1795: LD_ADDR_OWVAR 21
1799: PUSH
1800: LD_INT 2
1802: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1803: LD_INT 14
1805: PPUSH
1806: LD_INT 1
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: LD_INT 27
1814: PUSH
1815: LD_INT 25
1817: PUSH
1818: LD_INT 26
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: LIST
1825: PUSH
1826: LD_VAR 0 2
1830: PUSH
1831: LD_INT 3
1833: MOD
1834: PUSH
1835: LD_INT 1
1837: PLUS
1838: ARRAY
1839: PPUSH
1840: LD_INT 100
1842: PPUSH
1843: CALL 18683 0 5
// veh := CreateVehicle ;
1847: LD_ADDR_VAR 0 3
1851: PUSH
1852: CALL_OW 45
1856: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1857: LD_ADDR_EXP 9
1861: PUSH
1862: LD_EXP 9
1866: PPUSH
1867: LD_VAR 0 3
1871: PPUSH
1872: CALL 51534 0 2
1876: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1877: LD_VAR 0 3
1881: PPUSH
1882: LD_INT 4
1884: PPUSH
1885: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1889: LD_INT 0
1891: PPUSH
1892: LD_VAR 0 5
1896: PPUSH
1897: CALL_OW 383
// un := CreateHuman ;
1901: LD_ADDR_VAR 0 4
1905: PUSH
1906: CALL_OW 44
1910: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1911: LD_INT 35
1913: PPUSH
1914: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
1918: LD_VAR 0 3
1922: PPUSH
1923: LD_INT 14
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
1933: IFFALSE 1911
// PlaceHumanInUnit ( un , veh ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_VAR 0 3
1944: PPUSH
1945: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
1949: LD_VAR 0 3
1953: PPUSH
1954: LD_INT 151
1956: PPUSH
1957: LD_INT 28
1959: PPUSH
1960: CALL_OW 111
// end ;
1964: GO 1782
1966: POP
1967: POP
// end ;
1968: LD_VAR 0 1
1972: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
1973: LD_INT 0
1975: PPUSH
1976: PPUSH
1977: PPUSH
1978: PPUSH
1979: PPUSH
1980: PPUSH
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
1981: LD_ADDR_VAR 0 6
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: LD_INT 5
1991: PUSH
1992: LD_INT 7
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_OWVAR 67
2004: ARRAY
2005: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2006: LD_ADDR_VAR 0 5
2010: PUSH
2011: LD_INT 15
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 517
2021: ST_TO_ADDR
// uc_side := enemySide ;
2022: LD_ADDR_OWVAR 20
2026: PUSH
2027: LD_EXP 11
2031: ST_TO_ADDR
// uc_nation := nation_arabian ;
2032: LD_ADDR_OWVAR 21
2036: PUSH
2037: LD_INT 2
2039: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2040: LD_INT 0
2042: PPUSH
2043: LD_VAR 0 6
2047: PPUSH
2048: CALL_OW 383
// un := CreateHuman ;
2052: LD_ADDR_VAR 0 3
2056: PUSH
2057: CALL_OW 44
2061: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2062: LD_INT 14
2064: PPUSH
2065: LD_INT 1
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: LD_INT 26
2073: PPUSH
2074: LD_INT 100
2076: PPUSH
2077: CALL 18683 0 5
// veh := CreateVehicle ;
2081: LD_ADDR_VAR 0 4
2085: PUSH
2086: CALL_OW 45
2090: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2091: LD_VAR 0 4
2095: PPUSH
2096: LD_INT 4
2098: PPUSH
2099: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2103: LD_INT 35
2105: PPUSH
2106: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2110: LD_VAR 0 4
2114: PPUSH
2115: LD_INT 14
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: IFFALSE 2103
// PlaceHumanInUnit ( un , veh ) ;
2127: LD_VAR 0 3
2131: PPUSH
2132: LD_VAR 0 4
2136: PPUSH
2137: CALL_OW 52
// for i := 1 to tmp [ 1 ] do
2141: LD_ADDR_VAR 0 2
2145: PUSH
2146: DOUBLE
2147: LD_INT 1
2149: DEC
2150: ST_TO_ADDR
2151: LD_VAR 0 5
2155: PUSH
2156: LD_INT 1
2158: ARRAY
2159: PUSH
2160: FOR_TO
2161: IFFALSE 2207
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2163: LD_VAR 0 4
2167: PPUSH
2168: LD_VAR 0 5
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: PPUSH
2183: LD_VAR 0 5
2187: PUSH
2188: LD_INT 2
2190: ARRAY
2191: PUSH
2192: LD_VAR 0 2
2196: ARRAY
2197: PPUSH
2198: LD_INT 7
2200: PPUSH
2201: CALL 73605 0 4
2205: GO 2160
2207: POP
2208: POP
// repeat wait ( 0 0$1 ) ;
2209: LD_INT 35
2211: PPUSH
2212: CALL_OW 67
// if IsDead ( veh ) then
2216: LD_VAR 0 4
2220: PPUSH
2221: CALL_OW 301
2225: IFFALSE 2229
// exit ;
2227: GO 2302
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2229: LD_INT 16
2231: PPUSH
2232: LD_INT 22
2234: PUSH
2235: LD_EXP 11
2239: PUSH
2240: EMPTY
2241: LIST
2242: LIST
2243: PPUSH
2244: CALL_OW 70
2248: PUSH
2249: LD_VAR 0 4
2253: PPUSH
2254: CALL_OW 314
2258: NOT
2259: OR
2260: PUSH
2261: LD_VAR 0 3
2265: PPUSH
2266: CALL_OW 314
2270: NOT
2271: OR
2272: IFFALSE 2209
// forestIsCleared := true ;
2274: LD_ADDR_EXP 7
2278: PUSH
2279: LD_INT 1
2281: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2282: LD_ADDR_EXP 9
2286: PUSH
2287: LD_EXP 9
2291: PPUSH
2292: LD_VAR 0 4
2296: PPUSH
2297: CALL 51534 0 2
2301: ST_TO_ADDR
// end ;
2302: LD_VAR 0 1
2306: RET
// export function SendWestGroup ; var i , un , skill ; begin
2307: LD_INT 0
2309: PPUSH
2310: PPUSH
2311: PPUSH
2312: PPUSH
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2313: LD_ADDR_VAR 0 4
2317: PUSH
2318: LD_INT 3
2320: PUSH
2321: LD_INT 5
2323: PUSH
2324: LD_INT 7
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: LIST
2331: PUSH
2332: LD_OWVAR 67
2336: ARRAY
2337: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
2338: LD_ADDR_VAR 0 2
2342: PUSH
2343: DOUBLE
2344: LD_INT 1
2346: DEC
2347: ST_TO_ADDR
2348: LD_INT 3
2350: PUSH
2351: LD_INT 4
2353: PUSH
2354: LD_INT 5
2356: PUSH
2357: EMPTY
2358: LIST
2359: LIST
2360: LIST
2361: PUSH
2362: LD_OWVAR 67
2366: ARRAY
2367: PUSH
2368: FOR_TO
2369: IFFALSE 2494
// begin uc_side := enemySide ;
2371: LD_ADDR_OWVAR 20
2375: PUSH
2376: LD_EXP 11
2380: ST_TO_ADDR
// uc_nation := nation_arabian ;
2381: LD_ADDR_OWVAR 21
2385: PUSH
2386: LD_INT 2
2388: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2389: LD_INT 0
2391: PPUSH
2392: LD_VAR 0 4
2396: PPUSH
2397: CALL_OW 381
// un := CreateHuman ;
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: CALL_OW 44
2410: ST_TO_ADDR
// if i mod 3 = 0 then
2411: LD_VAR 0 2
2415: PUSH
2416: LD_INT 3
2418: MOD
2419: PUSH
2420: LD_INT 0
2422: EQUAL
2423: IFFALSE 2437
// SetClass ( un , class_mortar ) ;
2425: LD_VAR 0 3
2429: PPUSH
2430: LD_INT 8
2432: PPUSH
2433: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2437: LD_ADDR_EXP 8
2441: PUSH
2442: LD_EXP 8
2446: PPUSH
2447: LD_VAR 0 3
2451: PPUSH
2452: CALL 51534 0 2
2456: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2457: LD_VAR 0 3
2461: PPUSH
2462: LD_INT 24
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: CALL_OW 49
// result := Join ( result , un ) ;
2472: LD_ADDR_VAR 0 1
2476: PUSH
2477: LD_VAR 0 1
2481: PPUSH
2482: LD_VAR 0 3
2486: PPUSH
2487: CALL 51534 0 2
2491: ST_TO_ADDR
// end ;
2492: GO 2368
2494: POP
2495: POP
// PrepareScientist ( false , skill ) ;
2496: LD_INT 0
2498: PPUSH
2499: LD_VAR 0 4
2503: PPUSH
2504: CALL_OW 384
// un := CreateHuman ;
2508: LD_ADDR_VAR 0 3
2512: PUSH
2513: CALL_OW 44
2517: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2518: LD_ADDR_EXP 8
2522: PUSH
2523: LD_EXP 8
2527: PPUSH
2528: LD_VAR 0 3
2532: PPUSH
2533: CALL 51534 0 2
2537: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2538: LD_VAR 0 3
2542: PPUSH
2543: LD_INT 24
2545: PPUSH
2546: LD_INT 0
2548: PPUSH
2549: CALL_OW 49
// result := Join ( result , un ) ;
2553: LD_ADDR_VAR 0 1
2557: PUSH
2558: LD_VAR 0 1
2562: PPUSH
2563: LD_VAR 0 3
2567: PPUSH
2568: CALL 51534 0 2
2572: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2573: LD_VAR 0 1
2577: PPUSH
2578: LD_INT 24
2580: PPUSH
2581: LD_INT 37
2583: PPUSH
2584: CALL_OW 114
// end ;
2588: LD_VAR 0 1
2592: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2593: LD_INT 0
2595: PPUSH
2596: PPUSH
2597: PPUSH
2598: PPUSH
2599: PPUSH
2600: PPUSH
// v := convoyWave div 10 ;
2601: LD_ADDR_VAR 0 6
2605: PUSH
2606: LD_EXP 38
2610: PUSH
2611: LD_INT 10
2613: DIV
2614: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2615: LD_ADDR_VAR 0 5
2619: PUSH
2620: LD_INT 4
2622: PUSH
2623: LD_INT 5
2625: PUSH
2626: LD_INT 6
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: LD_OWVAR 67
2638: ARRAY
2639: PUSH
2640: LD_VAR 0 6
2644: PLUS
2645: ST_TO_ADDR
// if skill > 10 then
2646: LD_VAR 0 5
2650: PUSH
2651: LD_INT 10
2653: GREATER
2654: IFFALSE 2664
// skill := 10 ;
2656: LD_ADDR_VAR 0 5
2660: PUSH
2661: LD_INT 10
2663: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2664: LD_ADDR_VAR 0 2
2668: PUSH
2669: DOUBLE
2670: LD_INT 1
2672: DEC
2673: ST_TO_ADDR
2674: LD_INT 2
2676: PUSH
2677: LD_INT 3
2679: PUSH
2680: LD_INT 3
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PUSH
2688: LD_OWVAR 67
2692: ARRAY
2693: PUSH
2694: FOR_TO
2695: IFFALSE 2898
// begin uc_side := enemySide ;
2697: LD_ADDR_OWVAR 20
2701: PUSH
2702: LD_EXP 11
2706: ST_TO_ADDR
// uc_nation := nation_arabian ;
2707: LD_ADDR_OWVAR 21
2711: PUSH
2712: LD_INT 2
2714: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2715: LD_INT 14
2717: PPUSH
2718: LD_INT 1
2720: PPUSH
2721: LD_INT 1
2723: PPUSH
2724: LD_INT 27
2726: PUSH
2727: LD_INT 30
2729: PUSH
2730: LD_INT 23
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: LIST
2737: PUSH
2738: LD_VAR 0 2
2742: PUSH
2743: LD_INT 3
2745: MOD
2746: PUSH
2747: LD_INT 1
2749: PLUS
2750: ARRAY
2751: PPUSH
2752: LD_INT 100
2754: PPUSH
2755: CALL 18683 0 5
// veh := CreateVehicle ;
2759: LD_ADDR_VAR 0 3
2763: PUSH
2764: CALL_OW 45
2768: ST_TO_ADDR
// result := Join ( result , veh ) ;
2769: LD_ADDR_VAR 0 1
2773: PUSH
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_VAR 0 3
2783: PPUSH
2784: CALL 51534 0 2
2788: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2789: LD_VAR 0 3
2793: PPUSH
2794: LD_INT 4
2796: PPUSH
2797: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2801: LD_INT 0
2803: PPUSH
2804: LD_VAR 0 5
2808: PPUSH
2809: CALL_OW 383
// un := CreateHuman ;
2813: LD_ADDR_VAR 0 4
2817: PUSH
2818: CALL_OW 44
2822: ST_TO_ADDR
// result := Join ( result , un ) ;
2823: LD_ADDR_VAR 0 1
2827: PUSH
2828: LD_VAR 0 1
2832: PPUSH
2833: LD_VAR 0 4
2837: PPUSH
2838: CALL 51534 0 2
2842: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2843: LD_INT 35
2845: PPUSH
2846: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2850: LD_VAR 0 3
2854: PPUSH
2855: LD_INT 14
2857: PPUSH
2858: LD_INT 0
2860: PPUSH
2861: CALL_OW 49
2865: IFFALSE 2843
// PlaceHumanInUnit ( un , veh ) ;
2867: LD_VAR 0 4
2871: PPUSH
2872: LD_VAR 0 3
2876: PPUSH
2877: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
2881: LD_VAR 0 3
2885: PPUSH
2886: LD_INT 159
2888: PPUSH
2889: LD_INT 53
2891: PPUSH
2892: CALL_OW 111
// end ;
2896: GO 2694
2898: POP
2899: POP
// end ;
2900: LD_VAR 0 1
2904: RET
// export function SendEastGroup ; var i , un , skill ; begin
2905: LD_INT 0
2907: PPUSH
2908: PPUSH
2909: PPUSH
2910: PPUSH
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2911: LD_ADDR_VAR 0 4
2915: PUSH
2916: LD_INT 3
2918: PUSH
2919: LD_INT 5
2921: PUSH
2922: LD_INT 7
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: LIST
2929: PUSH
2930: LD_OWVAR 67
2934: ARRAY
2935: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2936: LD_ADDR_VAR 0 2
2940: PUSH
2941: DOUBLE
2942: LD_INT 1
2944: DEC
2945: ST_TO_ADDR
2946: LD_INT 4
2948: PUSH
2949: LD_INT 5
2951: PUSH
2952: LD_INT 6
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: LIST
2959: PUSH
2960: LD_OWVAR 67
2964: ARRAY
2965: PUSH
2966: FOR_TO
2967: IFFALSE 3072
// begin uc_side := enemySide ;
2969: LD_ADDR_OWVAR 20
2973: PUSH
2974: LD_EXP 11
2978: ST_TO_ADDR
// uc_nation := nation_arabian ;
2979: LD_ADDR_OWVAR 21
2983: PUSH
2984: LD_INT 2
2986: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2987: LD_INT 0
2989: PPUSH
2990: LD_VAR 0 4
2994: PPUSH
2995: CALL_OW 381
// un := CreateHuman ;
2999: LD_ADDR_VAR 0 3
3003: PUSH
3004: CALL_OW 44
3008: ST_TO_ADDR
// if i mod 3 = 0 then
3009: LD_VAR 0 2
3013: PUSH
3014: LD_INT 3
3016: MOD
3017: PUSH
3018: LD_INT 0
3020: EQUAL
3021: IFFALSE 3035
// SetClass ( un , class_mortar ) ;
3023: LD_VAR 0 3
3027: PPUSH
3028: LD_INT 8
3030: PPUSH
3031: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3035: LD_VAR 0 3
3039: PPUSH
3040: LD_INT 26
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 49
// result := Join ( result , un ) ;
3050: LD_ADDR_VAR 0 1
3054: PUSH
3055: LD_VAR 0 1
3059: PPUSH
3060: LD_VAR 0 3
3064: PPUSH
3065: CALL 51534 0 2
3069: ST_TO_ADDR
// end ;
3070: GO 2966
3072: POP
3073: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 219
3081: PPUSH
3082: LD_INT 168
3084: PPUSH
3085: CALL_OW 114
// end ; end_of_file
3089: LD_VAR 0 1
3093: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
3098: PPUSH
3099: PPUSH
3100: PPUSH
// multi_settings_counter := 5 ;
3101: LD_ADDR_EXP 25
3105: PUSH
3106: LD_INT 5
3108: ST_TO_ADDR
// multi_settings := [ ] ;
3109: LD_ADDR_EXP 24
3113: PUSH
3114: EMPTY
3115: ST_TO_ADDR
// if Multiplayer then
3116: LD_OWVAR 4
3120: IFFALSE 3300
// begin your_side := mp_player_side ;
3122: LD_ADDR_OWVAR 2
3126: PUSH
3127: LD_OWVAR 7
3131: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3132: LD_ADDR_EXP 13
3136: PUSH
3137: LD_OWVAR 6
3141: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3142: LD_ADDR_EXP 14
3146: PUSH
3147: LD_OWVAR 17
3151: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3152: LD_ADDR_EXP 15
3156: PUSH
3157: LD_OWVAR 15
3161: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3162: LD_ADDR_EXP 16
3166: PUSH
3167: LD_OWVAR 16
3171: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3172: LD_ADDR_EXP 17
3176: PUSH
3177: EMPTY
3178: PUSH
3179: EMPTY
3180: LIST
3181: ST_TO_ADDR
// for i in mp_teams do
3182: LD_ADDR_VAR 0 2
3186: PUSH
3187: LD_OWVAR 12
3191: PUSH
3192: FOR_IN
3193: IFFALSE 3236
// if i then
3195: LD_VAR 0 2
3199: IFFALSE 3234
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3201: LD_ADDR_EXP 17
3205: PUSH
3206: LD_EXP 17
3210: PPUSH
3211: LD_INT 1
3213: PPUSH
3214: LD_EXP 17
3218: PUSH
3219: LD_INT 1
3221: ARRAY
3222: PUSH
3223: LD_VAR 0 2
3227: UNION
3228: PPUSH
3229: CALL_OW 1
3233: ST_TO_ADDR
3234: GO 3192
3236: POP
3237: POP
// for i := 1 to multi_settings_counter do
3238: LD_ADDR_VAR 0 2
3242: PUSH
3243: DOUBLE
3244: LD_INT 1
3246: DEC
3247: ST_TO_ADDR
3248: LD_EXP 25
3252: PUSH
3253: FOR_TO
3254: IFFALSE 3296
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
3256: LD_ADDR_EXP 24
3260: PUSH
3261: LD_EXP 24
3265: PPUSH
3266: LD_EXP 24
3270: PUSH
3271: LD_INT 1
3273: PLUS
3274: PPUSH
3275: LD_VAR 0 2
3279: PPUSH
3280: CALL_OW 426
3284: PUSH
3285: LD_INT 1
3287: PLUS
3288: PPUSH
3289: CALL_OW 1
3293: ST_TO_ADDR
3294: GO 3253
3296: POP
3297: POP
// end else
3298: GO 3482
// begin your_side := 3 ;
3300: LD_ADDR_OWVAR 2
3304: PUSH
3305: LD_INT 3
3307: ST_TO_ADDR
// multi_gametype := 1 ;
3308: LD_ADDR_EXP 13
3312: PUSH
3313: LD_INT 1
3315: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
3316: LD_ADDR_EXP 14
3320: PUSH
3321: LD_INT 0
3323: PUSH
3324: LD_INT 0
3326: PUSH
3327: LD_INT 2
3329: PUSH
3330: LD_INT 0
3332: PUSH
3333: LD_INT 0
3335: PUSH
3336: LD_INT 0
3338: PUSH
3339: LD_INT 1
3341: PUSH
3342: LD_INT 0
3344: PUSH
3345: EMPTY
3346: LIST
3347: LIST
3348: LIST
3349: LIST
3350: LIST
3351: LIST
3352: LIST
3353: LIST
3354: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
3355: LD_ADDR_EXP 15
3359: PUSH
3360: LD_INT 0
3362: PUSH
3363: LD_INT 0
3365: PUSH
3366: LD_INT 1
3368: PUSH
3369: LD_INT 0
3371: PUSH
3372: LD_INT 0
3374: PUSH
3375: LD_INT 0
3377: PUSH
3378: LD_INT 1
3380: PUSH
3381: LD_INT 0
3383: PUSH
3384: EMPTY
3385: LIST
3386: LIST
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: LIST
3392: LIST
3393: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
3394: LD_ADDR_EXP 16
3398: PUSH
3399: LD_INT 0
3401: PUSH
3402: LD_INT 0
3404: PUSH
3405: LD_INT 3
3407: PUSH
3408: LD_INT 0
3410: PUSH
3411: LD_INT 0
3413: PUSH
3414: LD_INT 0
3416: PUSH
3417: LD_INT 3
3419: PUSH
3420: LD_INT 0
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
3433: LD_ADDR_EXP 17
3437: PUSH
3438: LD_INT 3
3440: PUSH
3441: LD_INT 7
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: EMPTY
3449: LIST
3450: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
3451: LD_ADDR_EXP 24
3455: PUSH
3456: LD_INT 2
3458: PUSH
3459: LD_INT 1
3461: PUSH
3462: LD_INT 4
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: LD_INT 2
3470: PUSH
3471: LD_INT 4
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3482: LD_ADDR_EXP 18
3486: PUSH
3487: LD_INT 0
3489: PUSH
3490: LD_INT 0
3492: PUSH
3493: LD_INT 0
3495: PUSH
3496: LD_INT 0
3498: PUSH
3499: LD_INT 0
3501: PUSH
3502: LD_INT 0
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: LD_INT 0
3510: PUSH
3511: EMPTY
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3521: LD_ADDR_EXP 21
3525: PUSH
3526: LD_INT 0
3528: PUSH
3529: LD_INT 0
3531: PUSH
3532: LD_INT 0
3534: PUSH
3535: LD_INT 0
3537: PUSH
3538: LD_INT 0
3540: PUSH
3541: LD_INT 0
3543: PUSH
3544: LD_INT 0
3546: PUSH
3547: LD_INT 0
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: LIST
3557: LIST
3558: LIST
3559: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
3560: LD_ADDR_EXP 31
3564: PUSH
3565: LD_INT 0
3567: PUSH
3568: LD_INT 0
3570: PUSH
3571: LD_INT 0
3573: PUSH
3574: LD_INT 0
3576: PUSH
3577: LD_INT 0
3579: PUSH
3580: LD_INT 0
3582: PUSH
3583: LD_INT 0
3585: PUSH
3586: LD_INT 0
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: LIST
3596: LIST
3597: LIST
3598: ST_TO_ADDR
// multi_teamgame := true ;
3599: LD_ADDR_EXP 22
3603: PUSH
3604: LD_INT 1
3606: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
3607: LD_ADDR_EXP 20
3611: PUSH
3612: LD_INT 3
3614: PUSH
3615: EMPTY
3616: LIST
3617: ST_TO_ADDR
// multi_custom_commanders := true ;
3618: LD_ADDR_EXP 23
3622: PUSH
3623: LD_INT 1
3625: ST_TO_ADDR
// multi_commanders := [ ] ;
3626: LD_ADDR_EXP 30
3630: PUSH
3631: EMPTY
3632: ST_TO_ADDR
// multi_players_amount := 0 ;
3633: LD_ADDR_EXP 32
3637: PUSH
3638: LD_INT 0
3640: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
3641: LD_ADDR_EXP 19
3645: PUSH
3646: LD_INT 3
3648: PUSH
3649: LD_INT 3
3651: PUSH
3652: EMPTY
3653: LIST
3654: LIST
3655: PUSH
3656: LD_INT 4
3658: PUSH
3659: LD_INT 6
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_breastwork , [ 117 , 101 , 3 ] ] , [ b_breastwork , [ 124 , 107 , 3 ] ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3670: LD_ADDR_EXP 34
3674: PUSH
3675: LD_INT 0
3677: PUSH
3678: LD_INT 108
3680: PUSH
3681: LD_INT 110
3683: PUSH
3684: LD_INT 2
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PUSH
3696: LD_INT 31
3698: PUSH
3699: LD_INT 117
3701: PUSH
3702: LD_INT 101
3704: PUSH
3705: LD_INT 3
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: LIST
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: LD_INT 31
3719: PUSH
3720: LD_INT 124
3722: PUSH
3723: LD_INT 107
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: LIST
3733: PUSH
3734: EMPTY
3735: LIST
3736: LIST
3737: PUSH
3738: LD_INT 29
3740: PUSH
3741: LD_INT 126
3743: PUSH
3744: LD_INT 124
3746: PUSH
3747: LD_INT 5
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: LIST
3763: LIST
3764: PUSH
3765: LD_INT 31
3767: PUSH
3768: LD_INT 95
3770: PUSH
3771: LD_INT 36
3773: PUSH
3774: LD_INT 4
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: LIST
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: PUSH
3786: LD_INT 31
3788: PUSH
3789: LD_INT 116
3791: PUSH
3792: LD_INT 66
3794: PUSH
3795: LD_INT 3
3797: PUSH
3798: EMPTY
3799: LIST
3800: LIST
3801: LIST
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: PUSH
3807: LD_INT 31
3809: PUSH
3810: LD_INT 157
3812: PUSH
3813: LD_INT 159
3815: PUSH
3816: LD_INT 4
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: PUSH
3824: EMPTY
3825: LIST
3826: LIST
3827: PUSH
3828: LD_INT 31
3830: PUSH
3831: LD_INT 75
3833: PUSH
3834: LD_INT 88
3836: PUSH
3837: LD_INT 3
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: PUSH
3849: LD_INT 31
3851: PUSH
3852: LD_INT 63
3854: PUSH
3855: LD_INT 82
3857: PUSH
3858: LD_INT 3
3860: PUSH
3861: EMPTY
3862: LIST
3863: LIST
3864: LIST
3865: PUSH
3866: EMPTY
3867: LIST
3868: LIST
3869: PUSH
3870: LD_INT 31
3872: PUSH
3873: LD_INT 106
3875: PUSH
3876: LD_INT 147
3878: PUSH
3879: LD_INT 4
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: LIST
3886: PUSH
3887: EMPTY
3888: LIST
3889: LIST
3890: PUSH
3891: LD_INT 2
3893: PUSH
3894: LD_INT 124
3896: PUSH
3897: LD_INT 164
3899: PUSH
3900: LD_INT 5
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: EMPTY
3909: LIST
3910: LIST
3911: PUSH
3912: LD_INT 4
3914: PUSH
3915: LD_INT 129
3917: PUSH
3918: LD_INT 159
3920: PUSH
3921: LD_INT 4
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PUSH
3933: EMPTY
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: PUSH
3943: EMPTY
3944: PUSH
3945: EMPTY
3946: PUSH
3947: EMPTY
3948: PUSH
3949: EMPTY
3950: PUSH
3951: EMPTY
3952: PUSH
3953: EMPTY
3954: PUSH
3955: EMPTY
3956: LIST
3957: LIST
3958: LIST
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
3965: LD_ADDR_EXP 29
3969: PUSH
3970: EMPTY
3971: PUSH
3972: LD_INT 21
3974: PUSH
3975: LD_INT 1
3977: PUSH
3978: LD_INT 1
3980: PUSH
3981: LD_INT 42
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: PUSH
3990: LD_INT 22
3992: PUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 1
3998: PUSH
3999: LD_INT 51
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: PUSH
4008: LD_INT 22
4010: PUSH
4011: LD_INT 1
4013: PUSH
4014: LD_INT 1
4016: PUSH
4017: LD_INT 44
4019: PUSH
4020: LD_INT 43
4022: PUSH
4023: LD_INT 42
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: LIST
4030: PUSH
4031: LD_OWVAR 67
4035: ARRAY
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: LIST
4041: LIST
4042: PUSH
4043: LD_INT 22
4045: PUSH
4046: LD_INT 1
4048: PUSH
4049: LD_INT 1
4051: PUSH
4052: LD_INT 44
4054: PUSH
4055: LD_INT 43
4057: PUSH
4058: LD_INT 42
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: LIST
4065: PUSH
4066: LD_OWVAR 67
4070: ARRAY
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: LD_INT 1
4086: PUSH
4087: LD_INT 44
4089: PUSH
4090: LD_INT 43
4092: PUSH
4093: LD_INT 42
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: PUSH
4101: LD_OWVAR 67
4105: ARRAY
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: LIST
4117: LIST
4118: LIST
4119: PUSH
4120: EMPTY
4121: PUSH
4122: EMPTY
4123: PUSH
4124: EMPTY
4125: PUSH
4126: EMPTY
4127: PUSH
4128: EMPTY
4129: PUSH
4130: EMPTY
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: ST_TO_ADDR
// for i := 1 to 8 do
4142: LD_ADDR_VAR 0 2
4146: PUSH
4147: DOUBLE
4148: LD_INT 1
4150: DEC
4151: ST_TO_ADDR
4152: LD_INT 8
4154: PUSH
4155: FOR_TO
4156: IFFALSE 4485
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
4158: LD_VAR 0 2
4162: PPUSH
4163: CALL_OW 530
4167: IFFALSE 4325
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
4169: LD_ADDR_EXP 18
4173: PUSH
4174: LD_EXP 18
4178: PPUSH
4179: LD_VAR 0 2
4183: PPUSH
4184: LD_INT 1
4186: PPUSH
4187: CALL_OW 1
4191: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
4192: LD_ADDR_EXP 16
4196: PUSH
4197: LD_EXP 16
4201: PPUSH
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 0
4209: PPUSH
4210: CALL_OW 1
4214: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
4215: LD_ADDR_EXP 14
4219: PUSH
4220: LD_EXP 14
4224: PPUSH
4225: LD_VAR 0 2
4229: PPUSH
4230: LD_INT 0
4232: PPUSH
4233: CALL_OW 1
4237: ST_TO_ADDR
// for j = 1 to multi_teams do
4238: LD_ADDR_VAR 0 3
4242: PUSH
4243: DOUBLE
4244: LD_INT 1
4246: DEC
4247: ST_TO_ADDR
4248: LD_EXP 17
4252: PUSH
4253: FOR_TO
4254: IFFALSE 4323
// begin if i in multi_teams [ j ] then
4256: LD_VAR 0 2
4260: PUSH
4261: LD_EXP 17
4265: PUSH
4266: LD_VAR 0 3
4270: ARRAY
4271: IN
4272: IFFALSE 4321
// begin tmp := multi_teams [ j ] diff i ;
4274: LD_ADDR_VAR 0 5
4278: PUSH
4279: LD_EXP 17
4283: PUSH
4284: LD_VAR 0 3
4288: ARRAY
4289: PUSH
4290: LD_VAR 0 2
4294: DIFF
4295: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
4296: LD_ADDR_EXP 17
4300: PUSH
4301: LD_EXP 17
4305: PPUSH
4306: LD_VAR 0 3
4310: PPUSH
4311: LD_VAR 0 5
4315: PPUSH
4316: CALL_OW 1
4320: ST_TO_ADDR
// end ; end ;
4321: GO 4253
4323: POP
4324: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
4325: LD_EXP 16
4329: PUSH
4330: LD_VAR 0 2
4334: ARRAY
4335: PUSH
4336: LD_EXP 16
4340: PUSH
4341: LD_VAR 0 2
4345: ARRAY
4346: PUSH
4347: LD_EXP 20
4351: IN
4352: NOT
4353: AND
4354: IFFALSE 4395
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
4356: LD_ADDR_EXP 16
4360: PUSH
4361: LD_EXP 16
4365: PPUSH
4366: LD_VAR 0 2
4370: PPUSH
4371: LD_EXP 20
4375: PUSH
4376: LD_INT 1
4378: PPUSH
4379: LD_EXP 20
4383: PPUSH
4384: CALL_OW 12
4388: ARRAY
4389: PPUSH
4390: CALL_OW 1
4394: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
4395: LD_EXP 16
4399: PUSH
4400: LD_VAR 0 2
4404: ARRAY
4405: NOT
4406: PUSH
4407: LD_EXP 14
4411: PUSH
4412: LD_VAR 0 2
4416: ARRAY
4417: NOT
4418: AND
4419: PUSH
4420: LD_EXP 18
4424: PUSH
4425: LD_VAR 0 2
4429: ARRAY
4430: NOT
4431: AND
4432: IFFALSE 4457
// multi_bots := Replace ( multi_bots , i , 1 ) ;
4434: LD_ADDR_EXP 21
4438: PUSH
4439: LD_EXP 21
4443: PPUSH
4444: LD_VAR 0 2
4448: PPUSH
4449: LD_INT 1
4451: PPUSH
4452: CALL_OW 1
4456: ST_TO_ADDR
// if multi_sides [ i ] then
4457: LD_EXP 14
4461: PUSH
4462: LD_VAR 0 2
4466: ARRAY
4467: IFFALSE 4483
// multi_players_amount := multi_players_amount + 1 ;
4469: LD_ADDR_EXP 32
4473: PUSH
4474: LD_EXP 32
4478: PUSH
4479: LD_INT 1
4481: PLUS
4482: ST_TO_ADDR
// end ;
4483: GO 4155
4485: POP
4486: POP
// for i in multi_teams do
4487: LD_ADDR_VAR 0 2
4491: PUSH
4492: LD_EXP 17
4496: PUSH
4497: FOR_IN
4498: IFFALSE 4606
// begin for j = 2 to i do
4500: LD_ADDR_VAR 0 3
4504: PUSH
4505: DOUBLE
4506: LD_INT 2
4508: DEC
4509: ST_TO_ADDR
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_TO
4516: IFFALSE 4602
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
4518: LD_VAR 0 2
4522: PUSH
4523: LD_VAR 0 3
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 1
4536: ARRAY
4537: PPUSH
4538: CALL_OW 343
// for x = 1 to j - 1 do
4542: LD_ADDR_VAR 0 4
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_VAR 0 3
4556: PUSH
4557: LD_INT 1
4559: MINUS
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4598
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
4564: LD_VAR 0 2
4568: PUSH
4569: LD_VAR 0 3
4573: ARRAY
4574: PPUSH
4575: LD_VAR 0 2
4579: PUSH
4580: LD_VAR 0 4
4584: ARRAY
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: LD_INT 1
4591: PPUSH
4592: CALL_OW 80
4596: GO 4561
4598: POP
4599: POP
// end ;
4600: GO 4515
4602: POP
4603: POP
// end ;
4604: GO 4497
4606: POP
4607: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
4608: LD_ADDR_OWVAR 67
4612: PUSH
4613: LD_INT 1
4615: PUSH
4616: LD_INT 2
4618: PUSH
4619: LD_INT 3
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: PUSH
4627: LD_EXP 24
4631: PUSH
4632: LD_INT 1
4634: ARRAY
4635: ARRAY
4636: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
4637: LD_ADDR_EXP 26
4641: PUSH
4642: LD_INT 9
4644: PUSH
4645: LD_INT 12
4647: PUSH
4648: LD_INT 15
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_EXP 24
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: ARRAY
4665: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
4666: LD_ADDR_EXP 27
4670: PUSH
4671: LD_INT 1
4673: PUSH
4674: LD_INT 3
4676: PUSH
4677: LD_INT 4
4679: PUSH
4680: LD_INT 6
4682: PUSH
4683: EMPTY
4684: LIST
4685: LIST
4686: LIST
4687: LIST
4688: PUSH
4689: LD_EXP 24
4693: PUSH
4694: LD_INT 3
4696: ARRAY
4697: ARRAY
4698: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
4699: LD_ADDR_EXP 33
4703: PUSH
4704: LD_INT 3500
4706: PUSH
4707: LD_INT 5000
4709: PUSH
4710: LD_INT 7500
4712: PUSH
4713: LD_INT 10000
4715: PUSH
4716: LD_INT 15000
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: PUSH
4726: LD_EXP 24
4730: PUSH
4731: LD_INT 4
4733: ARRAY
4734: ARRAY
4735: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$32 ] , [ 2000 , 0 0$24 ] , [ 3000 , 0 0$18 ] , [ 4000 , 0 0$15 ] ] [ multi_settings [ 5 ] ] ;
4736: LD_ADDR_EXP 28
4740: PUSH
4741: LD_INT 1000
4743: PUSH
4744: LD_INT 1120
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: PUSH
4751: LD_INT 2000
4753: PUSH
4754: LD_INT 840
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 3000
4763: PUSH
4764: LD_INT 630
4766: PUSH
4767: EMPTY
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 4000
4773: PUSH
4774: LD_INT 525
4776: PUSH
4777: EMPTY
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: PUSH
4787: LD_EXP 24
4791: PUSH
4792: LD_INT 5
4794: ARRAY
4795: ARRAY
4796: ST_TO_ADDR
// end ;
4797: LD_VAR 0 1
4801: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
4802: LD_INT 0
4804: PPUSH
4805: PPUSH
// if not multi_sides [ preferSide ] then
4806: LD_EXP 14
4810: PUSH
4811: LD_VAR 0 1
4815: ARRAY
4816: NOT
4817: IFFALSE 4831
// begin result := preferSide ;
4819: LD_ADDR_VAR 0 2
4823: PUSH
4824: LD_VAR 0 1
4828: ST_TO_ADDR
// exit ;
4829: GO 4878
// end ; for i := 1 to 8 do
4831: LD_ADDR_VAR 0 3
4835: PUSH
4836: DOUBLE
4837: LD_INT 1
4839: DEC
4840: ST_TO_ADDR
4841: LD_INT 8
4843: PUSH
4844: FOR_TO
4845: IFFALSE 4876
// if not multi_sides [ i ] then
4847: LD_EXP 14
4851: PUSH
4852: LD_VAR 0 3
4856: ARRAY
4857: NOT
4858: IFFALSE 4874
// begin result := i ;
4860: LD_ADDR_VAR 0 2
4864: PUSH
4865: LD_VAR 0 3
4869: ST_TO_ADDR
// exit ;
4870: POP
4871: POP
4872: GO 4878
// end ;
4874: GO 4844
4876: POP
4877: POP
// end ;
4878: LD_VAR 0 2
4882: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
4883: LD_INT 0
4885: PPUSH
// uc_side := side ;
4886: LD_ADDR_OWVAR 20
4890: PUSH
4891: LD_VAR 0 1
4895: ST_TO_ADDR
// uc_nation := nation_russian ;
4896: LD_ADDR_OWVAR 21
4900: PUSH
4901: LD_INT 3
4903: ST_TO_ADDR
// hc_importance := 100 ;
4904: LD_ADDR_OWVAR 32
4908: PUSH
4909: LD_INT 100
4911: ST_TO_ADDR
// if num = 1 then
4912: LD_VAR 0 2
4916: PUSH
4917: LD_INT 1
4919: EQUAL
4920: IFFALSE 4987
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
4922: LD_INT 1
4924: PPUSH
4925: LD_EXP 27
4929: PUSH
4930: LD_INT 1
4932: PLUS
4933: PPUSH
4934: CALL_OW 381
// hc_gallery := ru ;
4938: LD_ADDR_OWVAR 33
4942: PUSH
4943: LD_STRING ru
4945: ST_TO_ADDR
// hc_face_number := 13 ;
4946: LD_ADDR_OWVAR 34
4950: PUSH
4951: LD_INT 13
4953: ST_TO_ADDR
// hc_name := Kuzmov ;
4954: LD_ADDR_OWVAR 26
4958: PUSH
4959: LD_STRING Kuzmov
4961: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
4962: LD_ADDR_OWVAR 29
4966: PUSH
4967: LD_INT 11
4969: PUSH
4970: LD_INT 11
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: ST_TO_ADDR
// result := CreateHuman ;
4977: LD_ADDR_VAR 0 3
4981: PUSH
4982: CALL_OW 44
4986: ST_TO_ADDR
// end ; if num = 2 then
4987: LD_VAR 0 2
4991: PUSH
4992: LD_INT 2
4994: EQUAL
4995: IFFALSE 5062
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
4997: LD_INT 1
4999: PPUSH
5000: LD_EXP 27
5004: PUSH
5005: LD_INT 2
5007: PLUS
5008: PPUSH
5009: CALL_OW 383
// hc_gallery := ru ;
5013: LD_ADDR_OWVAR 33
5017: PUSH
5018: LD_STRING ru
5020: ST_TO_ADDR
// hc_face_number := 1 ;
5021: LD_ADDR_OWVAR 34
5025: PUSH
5026: LD_INT 1
5028: ST_TO_ADDR
// hc_name := Burlak ;
5029: LD_ADDR_OWVAR 26
5033: PUSH
5034: LD_STRING Burlak
5036: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5037: LD_ADDR_OWVAR 29
5041: PUSH
5042: LD_INT 10
5044: PUSH
5045: LD_INT 11
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: ST_TO_ADDR
// result := CreateHuman ;
5052: LD_ADDR_VAR 0 3
5056: PUSH
5057: CALL_OW 44
5061: ST_TO_ADDR
// end ; end ;
5062: LD_VAR 0 3
5066: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
5067: LD_INT 0
5069: PPUSH
5070: PPUSH
5071: PPUSH
5072: PPUSH
5073: PPUSH
5074: PPUSH
5075: PPUSH
5076: PPUSH
5077: PPUSH
5078: PPUSH
// for i := 1 to 8 do
5079: LD_ADDR_VAR 0 2
5083: PUSH
5084: DOUBLE
5085: LD_INT 1
5087: DEC
5088: ST_TO_ADDR
5089: LD_INT 8
5091: PUSH
5092: FOR_TO
5093: IFFALSE 6465
// begin if not multi_sides [ i ] then
5095: LD_EXP 14
5099: PUSH
5100: LD_VAR 0 2
5104: ARRAY
5105: NOT
5106: IFFALSE 5110
// continue ;
5108: GO 5092
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
5110: LD_ADDR_VAR 0 8
5114: PUSH
5115: LD_EXP 29
5119: PUSH
5120: LD_EXP 14
5124: PUSH
5125: LD_VAR 0 2
5129: ARRAY
5130: ARRAY
5131: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
5132: LD_EXP 34
5136: PUSH
5137: LD_EXP 14
5141: PUSH
5142: LD_VAR 0 2
5146: ARRAY
5147: ARRAY
5148: IFFALSE 5413
// begin uc_side := i ;
5150: LD_ADDR_OWVAR 20
5154: PUSH
5155: LD_VAR 0 2
5159: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5160: LD_ADDR_OWVAR 21
5164: PUSH
5165: LD_EXP 16
5169: PUSH
5170: LD_VAR 0 2
5174: ARRAY
5175: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
5176: LD_ADDR_VAR 0 3
5180: PUSH
5181: LD_EXP 34
5185: PUSH
5186: LD_EXP 14
5190: PUSH
5191: LD_VAR 0 2
5195: ARRAY
5196: ARRAY
5197: PUSH
5198: FOR_IN
5199: IFFALSE 5411
// begin if j [ 1 ] = b_oil_mine then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 1
5208: ARRAY
5209: PUSH
5210: LD_INT 29
5212: EQUAL
5213: IFFALSE 5250
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
5215: LD_VAR 0 3
5219: PUSH
5220: LD_INT 2
5222: ARRAY
5223: PUSH
5224: LD_INT 1
5226: ARRAY
5227: PPUSH
5228: LD_VAR 0 3
5232: PUSH
5233: LD_INT 2
5235: ARRAY
5236: PUSH
5237: LD_INT 2
5239: ARRAY
5240: PPUSH
5241: LD_VAR 0 2
5245: PPUSH
5246: CALL_OW 441
// bc_type := j [ 1 ] ;
5250: LD_ADDR_OWVAR 42
5254: PUSH
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 1
5262: ARRAY
5263: ST_TO_ADDR
// bc_level := 3 ;
5264: LD_ADDR_OWVAR 43
5268: PUSH
5269: LD_INT 3
5271: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
5272: LD_ADDR_VAR 0 4
5276: PUSH
5277: LD_VAR 0 3
5281: PUSH
5282: LD_INT 2
5284: ARRAY
5285: PUSH
5286: LD_INT 1
5288: ARRAY
5289: PPUSH
5290: LD_VAR 0 3
5294: PUSH
5295: LD_INT 2
5297: ARRAY
5298: PUSH
5299: LD_INT 2
5301: ARRAY
5302: PPUSH
5303: LD_VAR 0 3
5307: PUSH
5308: LD_INT 2
5310: ARRAY
5311: PUSH
5312: LD_INT 3
5314: ARRAY
5315: PPUSH
5316: CALL_OW 47
5320: ST_TO_ADDR
// if j [ 1 ] = b_depot then
5321: LD_VAR 0 3
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PUSH
5330: LD_INT 0
5332: EQUAL
5333: IFFALSE 5409
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
5335: LD_VAR 0 4
5339: PPUSH
5340: CALL_OW 274
5344: PPUSH
5345: LD_INT 1
5347: PPUSH
5348: LD_INT 450
5350: PUSH
5351: LD_INT 350
5353: PUSH
5354: LD_INT 230
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: PUSH
5362: LD_OWVAR 67
5366: ARRAY
5367: PPUSH
5368: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
5372: LD_VAR 0 4
5376: PPUSH
5377: CALL_OW 274
5381: PPUSH
5382: LD_INT 2
5384: PPUSH
5385: LD_INT 90
5387: PUSH
5388: LD_INT 60
5390: PUSH
5391: LD_INT 40
5393: PUSH
5394: EMPTY
5395: LIST
5396: LIST
5397: LIST
5398: PUSH
5399: LD_OWVAR 67
5403: ARRAY
5404: PPUSH
5405: CALL_OW 277
// end ; end ;
5409: GO 5198
5411: POP
5412: POP
// end ; if multi_custom_commanders then
5413: LD_EXP 23
5417: IFFALSE 5634
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
5419: LD_ADDR_VAR 0 6
5423: PUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: LD_EXP 14
5433: PUSH
5434: LD_VAR 0 2
5438: ARRAY
5439: PPUSH
5440: CALL 4883 0 2
5444: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
5445: LD_ADDR_EXP 30
5449: PUSH
5450: LD_EXP 30
5454: PPUSH
5455: LD_EXP 30
5459: PUSH
5460: LD_INT 1
5462: PLUS
5463: PPUSH
5464: LD_VAR 0 6
5468: PPUSH
5469: CALL_OW 2
5473: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
5474: LD_VAR 0 6
5478: PPUSH
5479: CALL_OW 257
5483: PUSH
5484: LD_INT 3
5486: EQUAL
5487: IFFALSE 5599
// begin uc_nation := nation_russian ;
5489: LD_ADDR_OWVAR 21
5493: PUSH
5494: LD_INT 3
5496: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
5497: LD_INT 23
5499: PPUSH
5500: LD_INT 1
5502: PPUSH
5503: LD_INT 1
5505: PPUSH
5506: LD_INT 44
5508: PPUSH
5509: LD_INT 80
5511: PPUSH
5512: CALL 18683 0 5
// veh := CreateVehicle ;
5516: LD_ADDR_VAR 0 7
5520: PUSH
5521: CALL_OW 45
5525: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
5526: LD_VAR 0 7
5530: PPUSH
5531: LD_VAR 0 6
5535: PPUSH
5536: CALL_OW 255
5540: PUSH
5541: LD_INT 1
5543: NEG
5544: MUL
5545: PPUSH
5546: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
5550: LD_VAR 0 7
5554: PPUSH
5555: LD_EXP 19
5559: PUSH
5560: LD_EXP 14
5564: PUSH
5565: LD_VAR 0 2
5569: ARRAY
5570: ARRAY
5571: PUSH
5572: LD_INT 2
5574: ARRAY
5575: PPUSH
5576: LD_INT 0
5578: PPUSH
5579: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5583: LD_VAR 0 6
5587: PPUSH
5588: LD_VAR 0 7
5592: PPUSH
5593: CALL_OW 52
// end else
5597: GO 5632
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
5599: LD_VAR 0 6
5603: PPUSH
5604: LD_EXP 19
5608: PUSH
5609: LD_EXP 14
5613: PUSH
5614: LD_VAR 0 2
5618: ARRAY
5619: ARRAY
5620: PUSH
5621: LD_INT 1
5623: ARRAY
5624: PPUSH
5625: LD_INT 0
5627: PPUSH
5628: CALL_OW 49
// end else
5632: GO 5845
// begin uc_side := i ;
5634: LD_ADDR_OWVAR 20
5638: PUSH
5639: LD_VAR 0 2
5643: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5644: LD_ADDR_OWVAR 21
5648: PUSH
5649: LD_EXP 16
5653: PUSH
5654: LD_VAR 0 2
5658: ARRAY
5659: ST_TO_ADDR
// hc_importance := 100 ;
5660: LD_ADDR_OWVAR 32
5664: PUSH
5665: LD_INT 100
5667: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
5668: LD_INT 0
5670: PPUSH
5671: LD_INT 1
5673: PPUSH
5674: LD_EXP 27
5678: PPUSH
5679: CALL_OW 380
// if multiplayer then
5683: LD_OWVAR 4
5687: IFFALSE 5745
// begin hc_name := mp_sides_players_names [ i ] ;
5689: LD_ADDR_OWVAR 26
5693: PUSH
5694: LD_OWVAR 19
5698: PUSH
5699: LD_VAR 0 2
5703: ARRAY
5704: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
5705: LD_ADDR_OWVAR 33
5709: PUSH
5710: LD_STRING MULTIAVATARS
5712: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
5713: LD_ADDR_OWVAR 34
5717: PUSH
5718: LD_VAR 0 2
5722: PPUSH
5723: CALL_OW 525
5727: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
5728: LD_ADDR_OWVAR 27
5732: PUSH
5733: LD_VAR 0 2
5737: PPUSH
5738: CALL_OW 526
5742: ST_TO_ADDR
// end else
5743: GO 5777
// begin hc_gallery :=  ;
5745: LD_ADDR_OWVAR 33
5749: PUSH
5750: LD_STRING 
5752: ST_TO_ADDR
// hc_name :=  ;
5753: LD_ADDR_OWVAR 26
5757: PUSH
5758: LD_STRING 
5760: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
5761: LD_ADDR_OWVAR 27
5765: PUSH
5766: LD_INT 1
5768: PPUSH
5769: LD_INT 2
5771: PPUSH
5772: CALL_OW 12
5776: ST_TO_ADDR
// end ; un := CreateHuman ;
5777: LD_ADDR_VAR 0 6
5781: PUSH
5782: CALL_OW 44
5786: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
5787: LD_VAR 0 6
5791: PPUSH
5792: LD_EXP 19
5796: PUSH
5797: LD_EXP 14
5801: PUSH
5802: LD_VAR 0 2
5806: ARRAY
5807: ARRAY
5808: PUSH
5809: LD_INT 1
5811: ARRAY
5812: PPUSH
5813: LD_INT 0
5815: PPUSH
5816: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
5820: LD_ADDR_EXP 30
5824: PUSH
5825: LD_EXP 30
5829: PPUSH
5830: LD_VAR 0 2
5834: PPUSH
5835: LD_VAR 0 6
5839: PPUSH
5840: CALL_OW 1
5844: ST_TO_ADDR
// end ; InitHc ;
5845: CALL_OW 19
// InitUc ;
5849: CALL_OW 18
// uc_side := i ;
5853: LD_ADDR_OWVAR 20
5857: PUSH
5858: LD_VAR 0 2
5862: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5863: LD_ADDR_OWVAR 21
5867: PUSH
5868: LD_EXP 16
5872: PUSH
5873: LD_VAR 0 2
5877: ARRAY
5878: ST_TO_ADDR
// hc_gallery :=  ;
5879: LD_ADDR_OWVAR 33
5883: PUSH
5884: LD_STRING 
5886: ST_TO_ADDR
// hc_name :=  ;
5887: LD_ADDR_OWVAR 26
5891: PUSH
5892: LD_STRING 
5894: ST_TO_ADDR
// hc_importance := 0 ;
5895: LD_ADDR_OWVAR 32
5899: PUSH
5900: LD_INT 0
5902: ST_TO_ADDR
// cl := 1 ;
5903: LD_ADDR_VAR 0 5
5907: PUSH
5908: LD_INT 1
5910: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
5911: LD_ADDR_VAR 0 3
5915: PUSH
5916: DOUBLE
5917: LD_INT 2
5919: DEC
5920: ST_TO_ADDR
5921: LD_EXP 26
5925: PUSH
5926: FOR_TO
5927: IFFALSE 6461
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
5929: LD_VAR 0 3
5933: PUSH
5934: LD_INT 1
5936: MINUS
5937: PUSH
5938: LD_EXP 26
5942: PUSH
5943: LD_INT 1
5945: MINUS
5946: PUSH
5947: LD_INT 4
5949: DIVREAL
5950: MOD
5951: PUSH
5952: LD_INT 0
5954: EQUAL
5955: IFFALSE 5971
// cl := cl + 1 ;
5957: LD_ADDR_VAR 0 5
5961: PUSH
5962: LD_VAR 0 5
5966: PUSH
5967: LD_INT 1
5969: PLUS
5970: ST_TO_ADDR
// if cl > 4 then
5971: LD_VAR 0 5
5975: PUSH
5976: LD_INT 4
5978: GREATER
5979: IFFALSE 5989
// cl := 1 ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: LD_INT 1
5988: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
5989: LD_EXP 14
5993: PUSH
5994: LD_VAR 0 2
5998: ARRAY
5999: PUSH
6000: LD_INT 2
6002: EQUAL
6003: PUSH
6004: LD_VAR 0 5
6008: PUSH
6009: LD_INT 2
6011: EQUAL
6012: PUSH
6013: LD_VAR 0 5
6017: PUSH
6018: LD_INT 4
6020: EQUAL
6021: PUSH
6022: LD_INT 22
6024: PUSH
6025: LD_VAR 0 2
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 25
6036: PUSH
6037: LD_INT 4
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: PUSH
6044: EMPTY
6045: LIST
6046: LIST
6047: PPUSH
6048: CALL_OW 69
6052: PUSH
6053: LD_INT 1
6055: GREATER
6056: AND
6057: OR
6058: AND
6059: IFFALSE 6078
// PrepareHuman ( false , 1 , multi_skill_level ) else
6061: LD_INT 0
6063: PPUSH
6064: LD_INT 1
6066: PPUSH
6067: LD_EXP 27
6071: PPUSH
6072: CALL_OW 380
6076: GO 6095
// PrepareHuman ( false , cl , multi_skill_level ) ;
6078: LD_INT 0
6080: PPUSH
6081: LD_VAR 0 5
6085: PPUSH
6086: LD_EXP 27
6090: PPUSH
6091: CALL_OW 380
// un := CreateHuman ;
6095: LD_ADDR_VAR 0 6
6099: PUSH
6100: CALL_OW 44
6104: ST_TO_ADDR
// if multi_pos_area then
6105: LD_EXP 19
6109: IFFALSE 6459
// begin if GetClass ( un ) = 3 and vehicles then
6111: LD_VAR 0 6
6115: PPUSH
6116: CALL_OW 257
6120: PUSH
6121: LD_INT 3
6123: EQUAL
6124: PUSH
6125: LD_VAR 0 8
6129: AND
6130: IFFALSE 6315
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
6132: LD_VAR 0 8
6136: PUSH
6137: LD_INT 1
6139: ARRAY
6140: PUSH
6141: LD_INT 1
6143: ARRAY
6144: PPUSH
6145: LD_VAR 0 8
6149: PUSH
6150: LD_INT 1
6152: ARRAY
6153: PUSH
6154: LD_INT 2
6156: ARRAY
6157: PPUSH
6158: LD_VAR 0 8
6162: PUSH
6163: LD_INT 1
6165: ARRAY
6166: PUSH
6167: LD_INT 3
6169: ARRAY
6170: PPUSH
6171: LD_VAR 0 8
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: PUSH
6180: LD_INT 4
6182: ARRAY
6183: PPUSH
6184: LD_INT 80
6186: PUSH
6187: LD_INT 60
6189: PUSH
6190: LD_INT 40
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: LD_OWVAR 67
6202: ARRAY
6203: PPUSH
6204: CALL 18683 0 5
// veh := CreateVehicle ;
6208: LD_ADDR_VAR 0 7
6212: PUSH
6213: CALL_OW 45
6217: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6218: LD_VAR 0 7
6222: PPUSH
6223: LD_EXP 19
6227: PUSH
6228: LD_EXP 14
6232: PUSH
6233: LD_VAR 0 2
6237: ARRAY
6238: ARRAY
6239: PUSH
6240: LD_INT 2
6242: ARRAY
6243: PPUSH
6244: LD_INT 0
6246: PPUSH
6247: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6251: LD_VAR 0 6
6255: PPUSH
6256: LD_VAR 0 7
6260: PPUSH
6261: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
6265: LD_VAR 0 7
6269: PPUSH
6270: CALL_OW 264
6274: PUSH
6275: LD_INT 51
6277: EQUAL
6278: IFFALSE 6295
// SetCargo ( veh , mat_oil , 60 ) ;
6280: LD_VAR 0 7
6284: PPUSH
6285: LD_INT 2
6287: PPUSH
6288: LD_INT 60
6290: PPUSH
6291: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
6295: LD_ADDR_VAR 0 8
6299: PUSH
6300: LD_VAR 0 8
6304: PPUSH
6305: LD_INT 1
6307: PPUSH
6308: CALL_OW 3
6312: ST_TO_ADDR
// continue ;
6313: GO 5926
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) ;
6315: LD_ADDR_VAR 0 9
6319: PUSH
6320: LD_INT 22
6322: PUSH
6323: LD_VAR 0 2
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PUSH
6332: LD_INT 30
6334: PUSH
6335: LD_INT 31
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 58
6344: PUSH
6345: EMPTY
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 69
6357: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
6358: LD_VAR 0 6
6362: PPUSH
6363: CALL_OW 257
6367: PUSH
6368: LD_INT 1
6370: EQUAL
6371: PUSH
6372: LD_VAR 0 9
6376: AND
6377: IFFALSE 6426
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
6379: LD_VAR 0 6
6383: PPUSH
6384: LD_VAR 0 9
6388: PUSH
6389: LD_INT 1
6391: ARRAY
6392: PPUSH
6393: CALL_OW 254
6397: PUSH
6398: LD_INT 3
6400: MINUS
6401: PPUSH
6402: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
6406: LD_VAR 0 6
6410: PPUSH
6411: LD_VAR 0 9
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: PPUSH
6420: CALL_OW 52
// continue ;
6424: GO 5926
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6426: LD_VAR 0 6
6430: PPUSH
6431: LD_EXP 19
6435: PUSH
6436: LD_EXP 14
6440: PUSH
6441: LD_VAR 0 2
6445: ARRAY
6446: ARRAY
6447: PUSH
6448: LD_INT 1
6450: ARRAY
6451: PPUSH
6452: LD_INT 0
6454: PPUSH
6455: CALL_OW 49
// end ; end ;
6459: GO 5926
6461: POP
6462: POP
// end ;
6463: GO 5092
6465: POP
6466: POP
// end ;
6467: LD_VAR 0 1
6471: RET
// export function Multiplayer_Start ( ) ; begin
6472: LD_INT 0
6474: PPUSH
// Multiplayer_PreparePlayers ( ) ;
6475: CALL 5067 0 0
// Multiplayer_InitPointSystem ( ) ;
6479: CALL 7190 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
6483: LD_INT 20
6485: PPUSH
6486: CALL 7366 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
6490: LD_INT 150
6492: PPUSH
6493: CALL 7366 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
6497: LD_INT 5
6499: PPUSH
6500: CALL 7366 0 1
// Multiplayer_RegisterCondition ( - 40 ) ;
6504: LD_INT 40
6506: NEG
6507: PPUSH
6508: CALL 7366 0 1
// Multiplayer_RegisterCondition ( - 20 ) ;
6512: LD_INT 20
6514: NEG
6515: PPUSH
6516: CALL 7366 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
6520: LD_INT 2
6522: PPUSH
6523: CALL 7366 0 1
// Multiplayer_RegisterCondition ( 40 ) ;
6527: LD_INT 40
6529: PPUSH
6530: CALL 7366 0 1
// Multiplayer_RegisterCondition ( 25 ) ;
6534: LD_INT 25
6536: PPUSH
6537: CALL 7366 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
6541: LD_INT 1000
6543: NEG
6544: PPUSH
6545: CALL 7366 0 1
// if multi_sides [ your_side ] then
6549: LD_EXP 14
6553: PUSH
6554: LD_OWVAR 2
6558: ARRAY
6559: IFFALSE 6586
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
6561: LD_INT 22
6563: PUSH
6564: LD_OWVAR 2
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PPUSH
6573: CALL_OW 69
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: PPUSH
6582: CALL_OW 87
// end ;
6586: LD_VAR 0 1
6590: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
6591: LD_INT 0
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
// repeat wait ( 0 0$1 ) ;
6597: LD_INT 35
6599: PPUSH
6600: CALL_OW 67
// points := 0 ;
6604: LD_ADDR_VAR 0 4
6608: PUSH
6609: LD_INT 0
6611: ST_TO_ADDR
// for i := 1 to 8 do
6612: LD_ADDR_VAR 0 2
6616: PUSH
6617: DOUBLE
6618: LD_INT 1
6620: DEC
6621: ST_TO_ADDR
6622: LD_INT 8
6624: PUSH
6625: FOR_TO
6626: IFFALSE 6652
// points := points + multi_points [ i ] ;
6628: LD_ADDR_VAR 0 4
6632: PUSH
6633: LD_VAR 0 4
6637: PUSH
6638: LD_EXP 35
6642: PUSH
6643: LD_VAR 0 2
6647: ARRAY
6648: PLUS
6649: ST_TO_ADDR
6650: GO 6625
6652: POP
6653: POP
// if not multi_custom_commanders then
6654: LD_EXP 23
6658: NOT
6659: IFFALSE 6772
// begin for i := 1 to 8 do
6661: LD_ADDR_VAR 0 2
6665: PUSH
6666: DOUBLE
6667: LD_INT 1
6669: DEC
6670: ST_TO_ADDR
6671: LD_INT 8
6673: PUSH
6674: FOR_TO
6675: IFFALSE 6746
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
6677: LD_INT 22
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PPUSH
6689: CALL_OW 69
6693: PUSH
6694: LD_INT 0
6696: EQUAL
6697: PUSH
6698: LD_EXP 31
6702: PUSH
6703: LD_VAR 0 2
6707: ARRAY
6708: NOT
6709: AND
6710: IFFALSE 6744
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
6712: LD_ADDR_EXP 31
6716: PUSH
6717: LD_EXP 31
6721: PPUSH
6722: LD_VAR 0 2
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: CALL_OW 1
6734: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL 7436 0 1
// end ; end ;
6744: GO 6674
6746: POP
6747: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
6748: LD_EXP 31
6752: PPUSH
6753: CALL 15945 0 1
6757: PUSH
6758: LD_EXP 14
6762: PPUSH
6763: CALL 15945 0 1
6767: EQUAL
6768: IFFALSE 6772
// break ;
6770: GO 6813
// end ; if points >= multi_points_to_victory then
6772: LD_VAR 0 4
6776: PUSH
6777: LD_EXP 33
6781: GREATEREQUAL
6782: IFFALSE 6794
// begin winAllowed := true ;
6784: LD_ADDR_EXP 3
6788: PUSH
6789: LD_INT 1
6791: ST_TO_ADDR
// break ;
6792: GO 6813
// end ; until ( winAllowed and game ) or not multi_commanders ;
6794: LD_EXP 3
6798: PUSH
6799: LD_EXP 2
6803: AND
6804: PUSH
6805: LD_EXP 30
6809: NOT
6810: OR
6811: IFFALSE 6597
// game := false ;
6813: LD_ADDR_EXP 2
6817: PUSH
6818: LD_INT 0
6820: ST_TO_ADDR
// for i := 1 to 8 do
6821: LD_ADDR_VAR 0 2
6825: PUSH
6826: DOUBLE
6827: LD_INT 1
6829: DEC
6830: ST_TO_ADDR
6831: LD_INT 8
6833: PUSH
6834: FOR_TO
6835: IFFALSE 6871
// begin if multi_sides [ i ] then
6837: LD_EXP 14
6841: PUSH
6842: LD_VAR 0 2
6846: ARRAY
6847: IFFALSE 6869
// SetMultiScore ( i , multi_points [ i ] ) ;
6849: LD_VAR 0 2
6853: PPUSH
6854: LD_EXP 35
6858: PUSH
6859: LD_VAR 0 2
6863: ARRAY
6864: PPUSH
6865: CALL_OW 506
// end ;
6869: GO 6834
6871: POP
6872: POP
// if multi_loosers [ your_side ] then
6873: LD_EXP 31
6877: PUSH
6878: LD_OWVAR 2
6882: ARRAY
6883: IFFALSE 6906
// begin if Multiplayer then
6885: LD_OWVAR 4
6889: IFFALSE 6897
// YouLostInMultiplayer else
6891: CALL_OW 107
6895: GO 6904
// YouLost (  ) ;
6897: LD_STRING 
6899: PPUSH
6900: CALL_OW 104
// end else
6904: GO 6922
// begin if Multiplayer then
6906: LD_OWVAR 4
6910: IFFALSE 6918
// YouWinInMultiplayer else
6912: CALL_OW 106
6916: GO 6922
// YouWin ;
6918: CALL_OW 103
// end ; end ;
6922: LD_VAR 0 1
6926: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
6927: LD_INT 0
6929: PPUSH
6930: PPUSH
// result := false ;
6931: LD_ADDR_VAR 0 1
6935: PUSH
6936: LD_INT 0
6938: ST_TO_ADDR
// for side in botSides do
6939: LD_ADDR_VAR 0 2
6943: PUSH
6944: LD_EXP 4
6948: PUSH
6949: FOR_IN
6950: IFFALSE 7011
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
6952: LD_ADDR_VAR 0 1
6956: PUSH
6957: LD_INT 22
6959: PUSH
6960: LD_VAR 0 2
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 21
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 50
6981: PUSH
6982: EMPTY
6983: LIST
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: LIST
6989: PPUSH
6990: CALL_OW 69
6994: PUSH
6995: LD_INT 0
6997: GREATER
6998: ST_TO_ADDR
// if result then
6999: LD_VAR 0 1
7003: IFFALSE 7009
// exit ;
7005: POP
7006: POP
7007: GO 7013
// end ;
7009: GO 6949
7011: POP
7012: POP
// end ;
7013: LD_VAR 0 1
7017: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
7022: PPUSH
// result := [ ] ;
7023: LD_ADDR_VAR 0 1
7027: PUSH
7028: EMPTY
7029: ST_TO_ADDR
// points := 0 ;
7030: LD_ADDR_VAR 0 3
7034: PUSH
7035: LD_INT 0
7037: ST_TO_ADDR
// for i := 1 to 8 do
7038: LD_ADDR_VAR 0 2
7042: PUSH
7043: DOUBLE
7044: LD_INT 1
7046: DEC
7047: ST_TO_ADDR
7048: LD_INT 8
7050: PUSH
7051: FOR_TO
7052: IFFALSE 7131
// begin points := points + multi_points [ i ] ;
7054: LD_ADDR_VAR 0 3
7058: PUSH
7059: LD_VAR 0 3
7063: PUSH
7064: LD_EXP 35
7068: PUSH
7069: LD_VAR 0 2
7073: ARRAY
7074: PLUS
7075: ST_TO_ADDR
// if multi_sides [ i ] then
7076: LD_EXP 14
7080: PUSH
7081: LD_VAR 0 2
7085: ARRAY
7086: IFFALSE 7129
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
7088: LD_ADDR_VAR 0 1
7092: PUSH
7093: LD_VAR 0 1
7097: PUSH
7098: LD_STRING #coop-points
7100: PUSH
7101: LD_VAR 0 2
7105: PUSH
7106: LD_VAR 0 2
7110: PUSH
7111: LD_EXP 35
7115: PUSH
7116: LD_VAR 0 2
7120: ARRAY
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: ADD
7128: ST_TO_ADDR
// end ; end ;
7129: GO 7051
7131: POP
7132: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
7133: LD_ADDR_VAR 0 1
7137: PUSH
7138: LD_VAR 0 1
7142: PUSH
7143: LD_STRING #saved-convoys
7145: PUSH
7146: LD_EXP 5
7150: PUSH
7151: EMPTY
7152: LIST
7153: LIST
7154: ADD
7155: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
7156: LD_ADDR_VAR 0 1
7160: PUSH
7161: LD_VAR 0 1
7165: PUSH
7166: LD_STRING #points-to-win
7168: PUSH
7169: LD_VAR 0 3
7173: PUSH
7174: LD_EXP 33
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: ADD
7184: ST_TO_ADDR
// end ;
7185: LD_VAR 0 1
7189: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
7194: LD_ADDR_EXP 35
7198: PUSH
7199: LD_INT 0
7201: PUSH
7202: LD_INT 0
7204: PUSH
7205: LD_INT 0
7207: PUSH
7208: LD_INT 0
7210: PUSH
7211: LD_INT 0
7213: PUSH
7214: LD_INT 0
7216: PUSH
7217: LD_INT 0
7219: PUSH
7220: LD_INT 0
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: ST_TO_ADDR
// multi_points_conditions := [ ] ;
7233: LD_ADDR_EXP 36
7237: PUSH
7238: EMPTY
7239: ST_TO_ADDR
// end ;
7240: LD_VAR 0 1
7244: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
7245: LD_INT 0
7247: PPUSH
// if not multi_points or not side or side > 8 then
7248: LD_EXP 35
7252: NOT
7253: PUSH
7254: LD_VAR 0 1
7258: NOT
7259: OR
7260: PUSH
7261: LD_VAR 0 1
7265: PUSH
7266: LD_INT 8
7268: GREATER
7269: OR
7270: IFFALSE 7274
// exit ;
7272: GO 7311
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
7274: LD_ADDR_EXP 35
7278: PUSH
7279: LD_EXP 35
7283: PPUSH
7284: LD_VAR 0 1
7288: PPUSH
7289: LD_EXP 35
7293: PUSH
7294: LD_VAR 0 1
7298: ARRAY
7299: PUSH
7300: LD_VAR 0 2
7304: PLUS
7305: PPUSH
7306: CALL_OW 1
7310: ST_TO_ADDR
// end ;
7311: LD_VAR 0 3
7315: RET
// export function Multiplayer_GetPoints ( side ) ; begin
7316: LD_INT 0
7318: PPUSH
// if not multi_points or not side or side > 8 then
7319: LD_EXP 35
7323: NOT
7324: PUSH
7325: LD_VAR 0 1
7329: NOT
7330: OR
7331: PUSH
7332: LD_VAR 0 1
7336: PUSH
7337: LD_INT 8
7339: GREATER
7340: OR
7341: IFFALSE 7345
// exit ;
7343: GO 7361
// result := multi_points [ side ] ;
7345: LD_ADDR_VAR 0 2
7349: PUSH
7350: LD_EXP 35
7354: PUSH
7355: LD_VAR 0 1
7359: ARRAY
7360: ST_TO_ADDR
// end ;
7361: LD_VAR 0 2
7365: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
7366: LD_INT 0
7368: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
7369: LD_ADDR_EXP 36
7373: PUSH
7374: LD_EXP 36
7378: PPUSH
7379: LD_EXP 36
7383: PUSH
7384: LD_INT 1
7386: PLUS
7387: PPUSH
7388: LD_VAR 0 1
7392: PPUSH
7393: CALL_OW 1
7397: ST_TO_ADDR
// end ;
7398: LD_VAR 0 2
7402: RET
// export function Multiplayer_GetCondition ( id ) ; begin
7403: LD_INT 0
7405: PPUSH
// if not id then
7406: LD_VAR 0 1
7410: NOT
7411: IFFALSE 7415
// exit ;
7413: GO 7431
// result := multi_points_conditions [ id ] ;
7415: LD_ADDR_VAR 0 2
7419: PUSH
7420: LD_EXP 36
7424: PUSH
7425: LD_VAR 0 1
7429: ARRAY
7430: ST_TO_ADDR
// end ;
7431: LD_VAR 0 2
7435: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
7436: LD_INT 0
7438: PPUSH
7439: PPUSH
7440: PPUSH
7441: PPUSH
7442: PPUSH
// players := [ ] ;
7443: LD_ADDR_VAR 0 3
7447: PUSH
7448: EMPTY
7449: ST_TO_ADDR
// for i = 1 to 8 do
7450: LD_ADDR_VAR 0 4
7454: PUSH
7455: DOUBLE
7456: LD_INT 1
7458: DEC
7459: ST_TO_ADDR
7460: LD_INT 8
7462: PUSH
7463: FOR_TO
7464: IFFALSE 7523
// begin if i = side then
7466: LD_VAR 0 4
7470: PUSH
7471: LD_VAR 0 1
7475: EQUAL
7476: IFFALSE 7480
// continue ;
7478: GO 7463
// if multi_sides [ i ] and not multi_loosers [ i ] then
7480: LD_EXP 14
7484: PUSH
7485: LD_VAR 0 4
7489: ARRAY
7490: PUSH
7491: LD_EXP 31
7495: PUSH
7496: LD_VAR 0 4
7500: ARRAY
7501: NOT
7502: AND
7503: IFFALSE 7521
// players := players ^ i ;
7505: LD_ADDR_VAR 0 3
7509: PUSH
7510: LD_VAR 0 3
7514: PUSH
7515: LD_VAR 0 4
7519: ADD
7520: ST_TO_ADDR
// end ;
7521: GO 7463
7523: POP
7524: POP
// if not players then
7525: LD_VAR 0 3
7529: NOT
7530: IFFALSE 7534
// exit ;
7532: GO 7801
// if players = 1 then
7534: LD_VAR 0 3
7538: PUSH
7539: LD_INT 1
7541: EQUAL
7542: IFFALSE 7603
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
7544: LD_ADDR_VAR 0 4
7548: PUSH
7549: LD_INT 22
7551: PUSH
7552: LD_VAR 0 1
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 51
7563: PUSH
7564: EMPTY
7565: LIST
7566: PUSH
7567: EMPTY
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 69
7575: PUSH
7576: FOR_IN
7577: IFFALSE 7599
// SetSide ( i , players [ 1 ] ) ;
7579: LD_VAR 0 4
7583: PPUSH
7584: LD_VAR 0 3
7588: PUSH
7589: LD_INT 1
7591: ARRAY
7592: PPUSH
7593: CALL_OW 235
7597: GO 7576
7599: POP
7600: POP
// end else
7601: GO 7801
// begin j := 1 ;
7603: LD_ADDR_VAR 0 5
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
7611: LD_ADDR_VAR 0 4
7615: PUSH
7616: LD_INT 22
7618: PUSH
7619: LD_VAR 0 1
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 2
7630: PUSH
7631: LD_INT 21
7633: PUSH
7634: LD_INT 1
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PUSH
7641: LD_INT 51
7643: PUSH
7644: EMPTY
7645: LIST
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 21
7653: PUSH
7654: LD_INT 2
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: PUSH
7675: FOR_IN
7676: IFFALSE 7799
// begin SetSide ( i , players [ j ] ) ;
7678: LD_VAR 0 4
7682: PPUSH
7683: LD_VAR 0 3
7687: PUSH
7688: LD_VAR 0 5
7692: ARRAY
7693: PPUSH
7694: CALL_OW 235
// if IsDrivenBy ( i ) then
7698: LD_VAR 0 4
7702: PPUSH
7703: CALL_OW 311
7707: IFFALSE 7734
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
7709: LD_VAR 0 4
7713: PPUSH
7714: CALL_OW 311
7718: PPUSH
7719: LD_VAR 0 3
7723: PUSH
7724: LD_VAR 0 5
7728: ARRAY
7729: PPUSH
7730: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
7734: LD_VAR 0 4
7738: PPUSH
7739: CALL_OW 310
7743: PPUSH
7744: CALL_OW 247
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7763
// ComExitBuilding ( i ) ;
7754: LD_VAR 0 4
7758: PPUSH
7759: CALL_OW 122
// j := j + 1 ;
7763: LD_ADDR_VAR 0 5
7767: PUSH
7768: LD_VAR 0 5
7772: PUSH
7773: LD_INT 1
7775: PLUS
7776: ST_TO_ADDR
// if j > players then
7777: LD_VAR 0 5
7781: PUSH
7782: LD_VAR 0 3
7786: GREATER
7787: IFFALSE 7797
// j := 1 ;
7789: LD_ADDR_VAR 0 5
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// end ;
7797: GO 7675
7799: POP
7800: POP
// end ; end ;
7801: LD_VAR 0 2
7805: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
7806: LD_INT 0
7808: PPUSH
// if not side or side > 8 then
7809: LD_VAR 0 1
7813: NOT
7814: PUSH
7815: LD_VAR 0 1
7819: PUSH
7820: LD_INT 8
7822: GREATER
7823: OR
7824: IFFALSE 7828
// exit ;
7826: GO 7845
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
7828: LD_VAR 0 1
7832: PPUSH
7833: LD_INT 6
7835: PPUSH
7836: CALL 7403 0 1
7840: PPUSH
7841: CALL 7245 0 2
// end ;
7845: LD_VAR 0 2
7849: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
7850: LD_INT 0
7852: PPUSH
// if not side or side > 8 then
7853: LD_VAR 0 1
7857: NOT
7858: PUSH
7859: LD_VAR 0 1
7863: PUSH
7864: LD_INT 8
7866: GREATER
7867: OR
7868: IFFALSE 7872
// exit ;
7870: GO 7889
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
7872: LD_VAR 0 1
7876: PPUSH
7877: LD_INT 4
7879: PPUSH
7880: CALL 7403 0 1
7884: PPUSH
7885: CALL 7245 0 2
// end ;
7889: LD_VAR 0 2
7893: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
7894: LD_INT 0
7896: PPUSH
// if not side or side > 8 then
7897: LD_VAR 0 1
7901: NOT
7902: PUSH
7903: LD_VAR 0 1
7907: PUSH
7908: LD_INT 8
7910: GREATER
7911: OR
7912: IFFALSE 7916
// exit ;
7914: GO 7933
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
7916: LD_VAR 0 1
7920: PPUSH
7921: LD_INT 5
7923: PPUSH
7924: CALL 7403 0 1
7928: PPUSH
7929: CALL 7245 0 2
// end ;
7933: LD_VAR 0 2
7937: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
7938: LD_INT 0
7940: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
7941: LD_VAR 0 1
7945: NOT
7946: PUSH
7947: LD_VAR 0 1
7951: PUSH
7952: LD_INT 8
7954: GREATER
7955: OR
7956: PUSH
7957: LD_VAR 0 2
7961: PUSH
7962: LD_INT 2
7964: PUSH
7965: LD_INT 6
7967: PUSH
7968: LD_INT 36
7970: PUSH
7971: LD_INT 0
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: IN
7980: NOT
7981: OR
7982: IFFALSE 7986
// exit ;
7984: GO 8003
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
7986: LD_VAR 0 1
7990: PPUSH
7991: LD_INT 3
7993: PPUSH
7994: CALL 7403 0 1
7998: PPUSH
7999: CALL 7245 0 2
// end ;
8003: LD_VAR 0 3
8007: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8008: LD_INT 0
8010: PPUSH
8011: PPUSH
// if not un then
8012: LD_VAR 0 1
8016: NOT
8017: IFFALSE 8021
// exit ;
8019: GO 8067
// if not points then
8021: LD_VAR 0 3
8025: NOT
8026: IFFALSE 8043
// gained_points := Multiplayer_GetCondition ( 1 ) else
8028: LD_ADDR_VAR 0 5
8032: PUSH
8033: LD_INT 1
8035: PPUSH
8036: CALL 7403 0 1
8040: ST_TO_ADDR
8041: GO 8053
// gained_points := points ;
8043: LD_ADDR_VAR 0 5
8047: PUSH
8048: LD_VAR 0 3
8052: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
8053: LD_VAR 0 2
8057: PPUSH
8058: LD_VAR 0 5
8062: PPUSH
8063: CALL 7245 0 2
// end ; end_of_file
8067: LD_VAR 0 4
8071: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
8072: LD_INT 0
8074: PPUSH
// begin side := GetSide ( un ) ;
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 1
8084: PPUSH
8085: CALL_OW 255
8089: ST_TO_ADDR
// if killerSide = enemySide then
8090: LD_VAR 0 2
8094: PUSH
8095: LD_EXP 11
8099: EQUAL
8100: IFFALSE 8104
// exit ;
8102: GO 8164
// if side = convoySide and multi_sides [ killerSide ] then
8104: LD_VAR 0 4
8108: PUSH
8109: LD_EXP 39
8113: EQUAL
8114: PUSH
8115: LD_EXP 14
8119: PUSH
8120: LD_VAR 0 2
8124: ARRAY
8125: AND
8126: IFFALSE 8147
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
8128: LD_VAR 0 4
8132: PPUSH
8133: LD_INT 9
8135: PPUSH
8136: CALL 7403 0 1
8140: PPUSH
8141: CALL 7245 0 2
// exit ;
8145: GO 8164
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_VAR 0 2
8156: PPUSH
8157: LD_INT 0
8159: PPUSH
8160: CALL 8008 0 3
// end ;
8164: PPOPN 4
8166: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
8167: LD_INT 0
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
8176: PPUSH
8177: PPUSH
8178: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
8179: LD_VAR 0 1
8183: PPUSH
8184: CALL 72437 0 1
// side := GetSide ( un ) ;
8188: LD_ADDR_VAR 0 3
8192: PUSH
8193: LD_VAR 0 1
8197: PPUSH
8198: CALL_OW 255
8202: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
8203: LD_EXP 14
8207: PUSH
8208: LD_VAR 0 3
8212: ARRAY
8213: PUSH
8214: LD_VAR 0 3
8218: PUSH
8219: LD_EXP 39
8223: EQUAL
8224: OR
8225: IFFALSE 8303
// begin if un in convoys then
8227: LD_VAR 0 1
8231: PUSH
8232: LD_EXP 37
8236: IN
8237: IFFALSE 8255
// convoys := convoys diff un ;
8239: LD_ADDR_EXP 37
8243: PUSH
8244: LD_EXP 37
8248: PUSH
8249: LD_VAR 0 1
8253: DIFF
8254: ST_TO_ADDR
// if GetType ( un ) = unit_human then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 247
8264: PUSH
8265: LD_INT 1
8267: EQUAL
8268: IFFALSE 8279
// MultiplayerEvent_HumanLost ( side ) ;
8270: LD_VAR 0 3
8274: PPUSH
8275: CALL 7850 0 1
// if GetType ( un ) = unit_vehicle then
8279: LD_VAR 0 1
8283: PPUSH
8284: CALL_OW 247
8288: PUSH
8289: LD_INT 2
8291: EQUAL
8292: IFFALSE 8303
// MultiplayerEvent_VehicleLost ( side ) ;
8294: LD_VAR 0 3
8298: PPUSH
8299: CALL 7894 0 1
// end ; if un in enemyForestGuard then
8303: LD_VAR 0 1
8307: PUSH
8308: LD_EXP 10
8312: IN
8313: IFFALSE 8331
// enemyForestGuard := enemyForestGuard diff un ;
8315: LD_ADDR_EXP 10
8319: PUSH
8320: LD_EXP 10
8324: PUSH
8325: LD_VAR 0 1
8329: DIFF
8330: ST_TO_ADDR
// if un in enemyMobile then
8331: LD_VAR 0 1
8335: PUSH
8336: LD_EXP 9
8340: IN
8341: IFFALSE 8359
// enemyMobile := enemyMobile diff un ;
8343: LD_ADDR_EXP 9
8347: PUSH
8348: LD_EXP 9
8352: PUSH
8353: LD_VAR 0 1
8357: DIFF
8358: ST_TO_ADDR
// if un in enemyUnits then
8359: LD_VAR 0 1
8363: PUSH
8364: LD_EXP 8
8368: IN
8369: IFFALSE 8387
// enemyUnits := enemyUnits diff un ;
8371: LD_ADDR_EXP 8
8375: PUSH
8376: LD_EXP 8
8380: PUSH
8381: LD_VAR 0 1
8385: DIFF
8386: ST_TO_ADDR
// if un in arAttackersInf then
8387: LD_VAR 0 1
8391: PUSH
8392: LD_EXP 12
8396: IN
8397: IFFALSE 8415
// arAttackersInf := arAttackersInf diff un ;
8399: LD_ADDR_EXP 12
8403: PUSH
8404: LD_EXP 12
8408: PUSH
8409: LD_VAR 0 1
8413: DIFF
8414: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders then
8415: LD_EXP 30
8419: PUSH
8420: LD_EXP 23
8424: AND
8425: IFFALSE 8487
// if un in multi_commanders then
8427: LD_VAR 0 1
8431: PUSH
8432: LD_EXP 30
8436: IN
8437: IFFALSE 8487
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
8439: LD_ADDR_EXP 31
8443: PUSH
8444: LD_EXP 31
8448: PPUSH
8449: LD_VAR 0 3
8453: PPUSH
8454: LD_INT 1
8456: PPUSH
8457: CALL_OW 1
8461: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
8462: LD_ADDR_EXP 30
8466: PUSH
8467: LD_EXP 30
8471: PUSH
8472: LD_VAR 0 1
8476: DIFF
8477: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
8478: LD_VAR 0 3
8482: PPUSH
8483: CALL 7436 0 1
// end ; end ;
8487: PPOPN 11
8489: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
8495: PPUSH
// begin side := GetSide ( building ) ;
8496: LD_ADDR_VAR 0 4
8500: PUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 255
8510: ST_TO_ADDR
// if multi_sides [ side ] then
8511: LD_EXP 14
8515: PUSH
8516: LD_VAR 0 4
8520: ARRAY
8521: IFFALSE 8542
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
8523: LD_VAR 0 4
8527: PPUSH
8528: LD_VAR 0 1
8532: PPUSH
8533: CALL_OW 266
8537: PPUSH
8538: CALL 7938 0 2
// end ;
8542: PPOPN 5
8544: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
8545: LD_INT 0
8547: PPUSH
8548: PPUSH
8549: PPUSH
8550: PPUSH
8551: PPUSH
8552: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_VAR 0 2
8562: PPUSH
8563: CALL 72557 0 2
// side := GetSide ( vehicle ) ;
8567: LD_ADDR_VAR 0 4
8571: PUSH
8572: LD_VAR 0 1
8576: PPUSH
8577: CALL_OW 255
8581: ST_TO_ADDR
// if multi_sides [ side ] then
8582: LD_EXP 14
8586: PUSH
8587: LD_VAR 0 4
8591: ARRAY
8592: IFFALSE 8603
// MultiplayerEvent_Produced ( side ) ;
8594: LD_VAR 0 4
8598: PPUSH
8599: CALL 7806 0 1
// end ;
8603: PPOPN 8
8605: END
// on ResearchComplete ( tech , lab ) do var i , side ;
8606: LD_INT 0
8608: PPUSH
8609: PPUSH
// begin side := GetSide ( lab ) ;
8610: LD_ADDR_VAR 0 4
8614: PUSH
8615: LD_VAR 0 2
8619: PPUSH
8620: CALL_OW 255
8624: ST_TO_ADDR
// if multi_sides [ side ] then
8625: LD_EXP 14
8629: PUSH
8630: LD_VAR 0 4
8634: ARRAY
8635: IFFALSE 8698
// for i := 1 to 8 do
8637: LD_ADDR_VAR 0 3
8641: PUSH
8642: DOUBLE
8643: LD_INT 1
8645: DEC
8646: ST_TO_ADDR
8647: LD_INT 8
8649: PUSH
8650: FOR_TO
8651: IFFALSE 8696
// if multi_sides [ i ] and i <> side then
8653: LD_EXP 14
8657: PUSH
8658: LD_VAR 0 3
8662: ARRAY
8663: PUSH
8664: LD_VAR 0 3
8668: PUSH
8669: LD_VAR 0 4
8673: NONEQUAL
8674: AND
8675: IFFALSE 8694
// SetTech ( tech , i , state_researched ) ;
8677: LD_VAR 0 1
8681: PPUSH
8682: LD_VAR 0 3
8686: PPUSH
8687: LD_INT 2
8689: PPUSH
8690: CALL_OW 322
8694: GO 8650
8696: POP
8697: POP
// end ;
8698: PPOPN 4
8700: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
8701: LD_VAR 0 2
8705: PUSH
8706: LD_EXP 9
8710: IN
8711: IFFALSE 8774
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
8713: LD_VAR 0 1
8717: PPUSH
8718: LD_INT 163
8720: PPUSH
8721: LD_INT 31
8723: PPUSH
8724: CALL_OW 111
// wait ( 0 0$1 ) ;
8728: LD_INT 35
8730: PPUSH
8731: CALL_OW 67
// if IsDead ( driver ) then
8735: LD_VAR 0 1
8739: PPUSH
8740: CALL_OW 301
8744: IFFALSE 8748
// exit ;
8746: GO 8774
// until IsAt ( driver , 163 , 31 ) ;
8748: LD_VAR 0 1
8752: PPUSH
8753: LD_INT 163
8755: PPUSH
8756: LD_INT 31
8758: PPUSH
8759: CALL_OW 307
8763: IFFALSE 8713
// RemoveUnit ( driver ) ;
8765: LD_VAR 0 1
8769: PPUSH
8770: CALL_OW 64
// end ; end ; end_of_file
8774: PPOPN 4
8776: END
// every 8 8$00 trigger not forestIsCleared do
8777: LD_EXP 7
8781: NOT
8782: IFFALSE 8791
8784: GO 8786
8786: DISABLE
// ClearRoadInForest ;
8787: CALL 1973 0 0
8791: END
// every 18 18$00 trigger not forestIsCleared do
8792: LD_EXP 7
8796: NOT
8797: IFFALSE 8806
8799: GO 8801
8801: DISABLE
// ClearRoadInForest ;
8802: CALL 1973 0 0
8806: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 24 , 28 , 32 , 36 ] do
8807: LD_EXP 38
8811: PUSH
8812: LD_INT 8
8814: PUSH
8815: LD_INT 12
8817: PUSH
8818: LD_INT 16
8820: PUSH
8821: LD_INT 20
8823: PUSH
8824: LD_INT 24
8826: PUSH
8827: LD_INT 28
8829: PUSH
8830: LD_INT 32
8832: PUSH
8833: LD_INT 36
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: IN
8846: IFFALSE 8869
8848: GO 8850
8850: DISABLE
// begin arAttackersInf := SendEastGroup ;
8851: LD_ADDR_EXP 12
8855: PUSH
8856: CALL 2905 0 0
8860: ST_TO_ADDR
// wait ( 5 5$00 ) ;
8861: LD_INT 10500
8863: PPUSH
8864: CALL_OW 67
// enable ;
8868: ENABLE
// end ;
8869: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
8870: LD_EXP 38
8874: PUSH
8875: LD_INT 5
8877: MOD
8878: PUSH
8879: LD_INT 4
8881: EQUAL
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_EXP 11
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: LD_INT 92
8897: PUSH
8898: LD_INT 30
8900: PUSH
8901: LD_INT 48
8903: PUSH
8904: LD_INT 20
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PPUSH
8917: CALL_OW 69
8921: NOT
8922: AND
8923: IFFALSE 8940
8925: GO 8927
8927: DISABLE
// begin SendWestGroup ;
8928: CALL 2307 0 0
// wait ( 3 3$00 ) ;
8932: LD_INT 6300
8934: PPUSH
8935: CALL_OW 67
// enable ;
8939: ENABLE
// end ;
8940: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
8941: LD_EXP 9
8945: PPUSH
8946: LD_INT 50
8948: PUSH
8949: EMPTY
8950: LIST
8951: PPUSH
8952: CALL_OW 72
8956: PUSH
8957: LD_INT 5
8959: LESS
8960: IFFALSE 8977
8962: GO 8964
8964: DISABLE
// begin PrepareMobileGroup ;
8965: CALL 1394 0 0
// wait ( 2 2$00 ) ;
8969: LD_INT 4200
8971: PPUSH
8972: CALL_OW 67
// enable ;
8976: ENABLE
// end ;
8977: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
8978: LD_EXP 38
8982: PUSH
8983: LD_INT 6
8985: MOD
8986: PUSH
8987: LD_INT 0
8989: EQUAL
8990: PUSH
8991: LD_EXP 38
8995: PUSH
8996: LD_INT 6
8998: GREATEREQUAL
8999: AND
9000: PUSH
9001: LD_EXP 9
9005: PPUSH
9006: LD_INT 50
9008: PUSH
9009: EMPTY
9010: LIST
9011: PPUSH
9012: CALL_OW 72
9016: PUSH
9017: LD_INT 10
9019: LESS
9020: AND
9021: IFFALSE 9038
9023: GO 9025
9025: DISABLE
// begin PrepareMobileGroup2 ;
9026: CALL 1706 0 0
// wait ( 3 3$00 ) ;
9030: LD_INT 6300
9032: PPUSH
9033: CALL_OW 67
// enable ;
9037: ENABLE
// end ;
9038: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
9039: LD_EXP 7
9043: IFFALSE 9256
9045: GO 9047
9047: DISABLE
9048: LD_INT 0
9050: PPUSH
9051: PPUSH
// begin if tick > 50 50$00 then
9052: LD_OWVAR 1
9056: PUSH
9057: LD_INT 105000
9059: GREATER
9060: IFFALSE 9065
// begin disable ;
9062: DISABLE
// exit ;
9063: GO 9256
// end ; tmp := PrepareForestOnslaught ;
9065: LD_ADDR_VAR 0 2
9069: PUSH
9070: CALL 2593 0 0
9074: ST_TO_ADDR
// for i in tmp do
9075: LD_ADDR_VAR 0 1
9079: PUSH
9080: LD_VAR 0 2
9084: PUSH
9085: FOR_IN
9086: IFFALSE 9150
// begin AddComMoveXY ( i , 197 , 152 ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 197
9095: PPUSH
9096: LD_INT 152
9098: PPUSH
9099: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
9103: LD_VAR 0 1
9107: PPUSH
9108: LD_INT 159
9110: PPUSH
9111: LD_INT 163
9113: PPUSH
9114: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
9118: LD_VAR 0 1
9122: PPUSH
9123: LD_INT 116
9125: PPUSH
9126: LD_INT 154
9128: PPUSH
9129: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: LD_INT 93
9140: PPUSH
9141: LD_INT 177
9143: PPUSH
9144: CALL_OW 171
// end ;
9148: GO 9085
9150: POP
9151: POP
// repeat wait ( 0 0$1 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// for i in tmp do
9159: LD_ADDR_VAR 0 1
9163: PUSH
9164: LD_VAR 0 2
9168: PUSH
9169: FOR_IN
9170: IFFALSE 9231
// if not IsOk ( i ) then
9172: LD_VAR 0 1
9176: PPUSH
9177: CALL_OW 302
9181: NOT
9182: IFFALSE 9202
// tmp := tmp diff i else
9184: LD_ADDR_VAR 0 2
9188: PUSH
9189: LD_VAR 0 2
9193: PUSH
9194: LD_VAR 0 1
9198: DIFF
9199: ST_TO_ADDR
9200: GO 9229
// if not HasTask ( i ) then
9202: LD_VAR 0 1
9206: PPUSH
9207: CALL_OW 314
9211: NOT
9212: IFFALSE 9229
// ComMoveXY ( i , 93 , 177 ) ;
9214: LD_VAR 0 1
9218: PPUSH
9219: LD_INT 93
9221: PPUSH
9222: LD_INT 177
9224: PPUSH
9225: CALL_OW 111
9229: GO 9169
9231: POP
9232: POP
// until not tmp ;
9233: LD_VAR 0 2
9237: NOT
9238: IFFALSE 9152
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
9240: LD_INT 1050
9242: PPUSH
9243: LD_INT 11550
9245: PPUSH
9246: CALL_OW 12
9250: PPUSH
9251: CALL_OW 67
// enable ;
9255: ENABLE
// end ;
9256: PPOPN 2
9258: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
9259: LD_EXP 10
9263: IFFALSE 9678
9265: GO 9267
9267: DISABLE
9268: LD_INT 0
9270: PPUSH
9271: PPUSH
9272: PPUSH
9273: PPUSH
// begin enable ;
9274: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_EXP 10
9284: PPUSH
9285: LD_INT 50
9287: PUSH
9288: EMPTY
9289: LIST
9290: PPUSH
9291: CALL_OW 72
9295: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
9296: LD_ADDR_VAR 0 3
9300: PUSH
9301: LD_INT 19
9303: PPUSH
9304: LD_INT 3
9306: PUSH
9307: LD_INT 22
9309: PUSH
9310: LD_EXP 11
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PPUSH
9323: CALL_OW 70
9327: ST_TO_ADDR
// if not tmp then
9328: LD_VAR 0 2
9332: NOT
9333: IFFALSE 9337
// exit ;
9335: GO 9678
// for i in tmp do
9337: LD_ADDR_VAR 0 1
9341: PUSH
9342: LD_VAR 0 2
9346: PUSH
9347: FOR_IN
9348: IFFALSE 9676
// begin if enemyInForest then
9350: LD_VAR 0 3
9354: IFFALSE 9429
// begin if GetClass ( i ) = 4 then
9356: LD_VAR 0 1
9360: PPUSH
9361: CALL_OW 257
9365: PUSH
9366: LD_INT 4
9368: EQUAL
9369: IFFALSE 9403
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
9371: LD_VAR 0 1
9375: PPUSH
9376: LD_VAR 0 2
9380: PUSH
9381: LD_VAR 0 1
9385: DIFF
9386: PPUSH
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 74
9396: PPUSH
9397: CALL_OW 112
9401: GO 9427
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
9403: LD_VAR 0 1
9407: PPUSH
9408: LD_VAR 0 3
9412: PPUSH
9413: LD_VAR 0 1
9417: PPUSH
9418: CALL_OW 74
9422: PPUSH
9423: CALL_OW 115
// end else
9427: GO 9674
// if not IsInArea ( i , arForestArea ) then
9429: LD_VAR 0 1
9433: PPUSH
9434: LD_INT 21
9436: PPUSH
9437: CALL_OW 308
9441: NOT
9442: IFFALSE 9458
// ComMoveToArea ( i , arForestArea ) else
9444: LD_VAR 0 1
9448: PPUSH
9449: LD_INT 21
9451: PPUSH
9452: CALL_OW 113
9456: GO 9674
// if GetClass ( i ) = 3 then
9458: LD_VAR 0 1
9462: PPUSH
9463: CALL_OW 257
9467: PUSH
9468: LD_INT 3
9470: EQUAL
9471: IFFALSE 9674
// begin vehicle := IsInUnit ( i ) ;
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_VAR 0 1
9482: PPUSH
9483: CALL_OW 310
9487: ST_TO_ADDR
// if vehicle then
9488: LD_VAR 0 4
9492: IFFALSE 9647
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
9494: LD_VAR 0 4
9498: PPUSH
9499: CALL_OW 256
9503: PUSH
9504: LD_INT 1000
9506: LESS
9507: PUSH
9508: LD_VAR 0 1
9512: PPUSH
9513: CALL_OW 314
9517: NOT
9518: AND
9519: IFFALSE 9645
// begin if not IsInArea ( vehicle , arParkingArea ) then
9521: LD_VAR 0 4
9525: PPUSH
9526: LD_INT 20
9528: PPUSH
9529: CALL_OW 308
9533: NOT
9534: IFFALSE 9550
// ComMoveToArea ( vehicle , arParkingArea ) else
9536: LD_VAR 0 4
9540: PPUSH
9541: LD_INT 20
9543: PPUSH
9544: CALL_OW 113
9548: GO 9645
// if not GetTag ( i ) then
9550: LD_VAR 0 1
9554: PPUSH
9555: CALL_OW 110
9559: NOT
9560: IFFALSE 9645
// begin SetTag ( i , tMech ) ;
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 7
9569: PPUSH
9570: CALL_OW 109
// ComExitVehicle ( i ) ;
9574: LD_VAR 0 1
9578: PPUSH
9579: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
9583: LD_VAR 0 1
9587: PPUSH
9588: LD_VAR 0 4
9592: PPUSH
9593: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9597: LD_INT 35
9599: PPUSH
9600: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9604: LD_VAR 0 1
9608: PPUSH
9609: CALL_OW 256
9613: PUSH
9614: LD_INT 1000
9616: EQUAL
9617: IFFALSE 9597
// ComEnterUnit ( i , vehicle ) ;
9619: LD_VAR 0 1
9623: PPUSH
9624: LD_VAR 0 4
9628: PPUSH
9629: CALL_OW 120
// SetTag ( i , 0 ) ;
9633: LD_VAR 0 1
9637: PPUSH
9638: LD_INT 0
9640: PPUSH
9641: CALL_OW 109
// end ; end ; end else
9645: GO 9674
// if not IsInArea ( i , arParkingArea ) then
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_INT 20
9654: PPUSH
9655: CALL_OW 308
9659: NOT
9660: IFFALSE 9674
// ComMoveToArea ( i , arParkingArea ) ;
9662: LD_VAR 0 1
9666: PPUSH
9667: LD_INT 20
9669: PPUSH
9670: CALL_OW 113
// end ; end ;
9674: GO 9347
9676: POP
9677: POP
// end ;
9678: PPOPN 4
9680: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
9681: LD_EXP 9
9685: IFFALSE 10218
9687: GO 9689
9689: DISABLE
9690: LD_INT 0
9692: PPUSH
9693: PPUSH
9694: PPUSH
// begin enable ;
9695: ENABLE
// if not enemyMobile then
9696: LD_EXP 9
9700: NOT
9701: IFFALSE 9705
// exit ;
9703: GO 10218
// for i in enemyMobile do
9705: LD_ADDR_VAR 0 1
9709: PUSH
9710: LD_EXP 9
9714: PUSH
9715: FOR_IN
9716: IFFALSE 10216
// begin if GetSide ( i ) <> enemySide then
9718: LD_VAR 0 1
9722: PPUSH
9723: CALL_OW 255
9727: PUSH
9728: LD_EXP 11
9732: NONEQUAL
9733: IFFALSE 9753
// begin enemyMobile := enemyMobile diff i ;
9735: LD_ADDR_EXP 9
9739: PUSH
9740: LD_EXP 9
9744: PUSH
9745: LD_VAR 0 1
9749: DIFF
9750: ST_TO_ADDR
// continue ;
9751: GO 9715
// end ; if GetTag ( i ) = 300 then
9753: LD_VAR 0 1
9757: PPUSH
9758: CALL_OW 110
9762: PUSH
9763: LD_INT 300
9765: EQUAL
9766: IFFALSE 9881
// begin if GetFuel ( i ) < 50 then
9768: LD_VAR 0 1
9772: PPUSH
9773: CALL_OW 261
9777: PUSH
9778: LD_INT 50
9780: LESS
9781: IFFALSE 9840
// begin ComMoveXY ( i , 170 , 50 ) ;
9783: LD_VAR 0 1
9787: PPUSH
9788: LD_INT 170
9790: PPUSH
9791: LD_INT 50
9793: PPUSH
9794: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9798: LD_INT 35
9800: PPUSH
9801: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
9805: LD_VAR 0 1
9809: PPUSH
9810: LD_INT 170
9812: PPUSH
9813: LD_INT 50
9815: PPUSH
9816: CALL_OW 297
9820: PUSH
9821: LD_INT 4
9823: LESS
9824: IFFALSE 9798
// SetFuel ( i , 100 ) ;
9826: LD_VAR 0 1
9830: PPUSH
9831: LD_INT 100
9833: PPUSH
9834: CALL_OW 240
// end else
9838: GO 9881
// if not IsInArea ( i , arParkingArea ) then
9840: LD_VAR 0 1
9844: PPUSH
9845: LD_INT 20
9847: PPUSH
9848: CALL_OW 308
9852: NOT
9853: IFFALSE 9869
// ComMoveToArea ( i , arParkingArea ) else
9855: LD_VAR 0 1
9859: PPUSH
9860: LD_INT 20
9862: PPUSH
9863: CALL_OW 113
9867: GO 9881
// SetTag ( i , 301 ) ;
9869: LD_VAR 0 1
9873: PPUSH
9874: LD_INT 301
9876: PPUSH
9877: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
9881: LD_VAR 0 1
9885: PPUSH
9886: CALL_OW 110
9890: PUSH
9891: LD_INT 301
9893: EQUAL
9894: IFFALSE 10036
// begin if GetLives ( i ) < 1000 then
9896: LD_VAR 0 1
9900: PPUSH
9901: CALL_OW 256
9905: PUSH
9906: LD_INT 1000
9908: LESS
9909: IFFALSE 10013
// begin if not IsDrivenBy ( i ) then
9911: LD_VAR 0 1
9915: PPUSH
9916: CALL_OW 311
9920: NOT
9921: IFFALSE 9925
// continue ;
9923: GO 9715
// mech := IsDrivenBy ( i ) ;
9925: LD_ADDR_VAR 0 2
9929: PUSH
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 311
9939: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
9940: LD_VAR 0 2
9944: PPUSH
9945: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
9949: LD_VAR 0 2
9953: PPUSH
9954: LD_VAR 0 1
9958: PPUSH
9959: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
9963: LD_INT 35
9965: PPUSH
9966: CALL_OW 67
// until GetLives ( i ) = 1000 ;
9970: LD_VAR 0 1
9974: PPUSH
9975: CALL_OW 256
9979: PUSH
9980: LD_INT 1000
9982: EQUAL
9983: IFFALSE 9963
// SetLives ( mech , 1000 ) ;
9985: LD_VAR 0 2
9989: PPUSH
9990: LD_INT 1000
9992: PPUSH
9993: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
9997: LD_VAR 0 2
10001: PPUSH
10002: LD_VAR 0 1
10006: PPUSH
10007: CALL_OW 120
// end else
10011: GO 10036
// if IsDrivenBy ( i ) then
10013: LD_VAR 0 1
10017: PPUSH
10018: CALL_OW 311
10022: IFFALSE 10036
// SetTag ( i , 0 ) ;
10024: LD_VAR 0 1
10028: PPUSH
10029: LD_INT 0
10031: PPUSH
10032: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
10036: LD_VAR 0 1
10040: PPUSH
10041: CALL_OW 110
10045: PUSH
10046: LD_INT 300
10048: LESS
10049: IFFALSE 10214
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
10051: LD_ADDR_VAR 0 3
10055: PUSH
10056: LD_INT 19
10058: PPUSH
10059: LD_INT 81
10061: PUSH
10062: LD_EXP 11
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: PPUSH
10071: CALL_OW 70
10075: ST_TO_ADDR
// if GetLives ( i ) < 650 then
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 256
10085: PUSH
10086: LD_INT 650
10088: LESS
10089: IFFALSE 10114
// begin ComStop ( i ) ;
10091: LD_VAR 0 1
10095: PPUSH
10096: CALL_OW 141
// SetTag ( i , 300 ) ;
10100: LD_VAR 0 1
10104: PPUSH
10105: LD_INT 300
10107: PPUSH
10108: CALL_OW 109
// continue ;
10112: GO 9715
// end ; if enemy then
10114: LD_VAR 0 3
10118: IFFALSE 10158
// begin if not HasTask ( i ) then
10120: LD_VAR 0 1
10124: PPUSH
10125: CALL_OW 314
10129: NOT
10130: IFFALSE 10156
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
10132: LD_VAR 0 1
10136: PPUSH
10137: LD_VAR 0 3
10141: PPUSH
10142: LD_VAR 0 1
10146: PPUSH
10147: CALL_OW 74
10151: PPUSH
10152: CALL_OW 115
// end else
10156: GO 10214
// if enemyMobile then
10158: LD_EXP 9
10162: IFFALSE 10214
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
10164: LD_ADDR_VAR 0 3
10168: PUSH
10169: LD_INT 81
10171: PUSH
10172: LD_EXP 11
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PPUSH
10181: CALL_OW 69
10185: ST_TO_ADDR
// if enemy then
10186: LD_VAR 0 3
10190: IFFALSE 10214
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
10192: LD_VAR 0 1
10196: PPUSH
10197: LD_INT 130
10199: PUSH
10200: LD_INT 28
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: EMPTY
10208: LIST
10209: PPUSH
10210: CALL 54138 0 2
// end ; end ; end ;
10214: GO 9715
10216: POP
10217: POP
// end ;
10218: PPOPN 3
10220: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
10221: LD_EXP 12
10225: IFFALSE 10708
10227: GO 10229
10229: DISABLE
10230: LD_INT 0
10232: PPUSH
10233: PPUSH
10234: PPUSH
10235: PPUSH
10236: PPUSH
// begin enable ;
10237: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
10238: LD_ADDR_VAR 0 2
10242: PUSH
10243: LD_EXP 12
10247: PPUSH
10248: LD_INT 50
10250: PUSH
10251: EMPTY
10252: LIST
10253: PPUSH
10254: CALL_OW 72
10258: ST_TO_ADDR
// arAttackersInf := [ ] ;
10259: LD_ADDR_EXP 12
10263: PUSH
10264: EMPTY
10265: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
10266: LD_ADDR_VAR 0 1
10270: PUSH
10271: LD_VAR 0 2
10275: PPUSH
10276: LD_INT 25
10278: PUSH
10279: LD_INT 1
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PPUSH
10286: CALL_OW 72
10290: PUSH
10291: FOR_IN
10292: IFFALSE 10419
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
10294: LD_ADDR_VAR 0 3
10298: PUSH
10299: LD_INT 81
10301: PUSH
10302: LD_EXP 11
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 3
10313: PUSH
10314: LD_INT 120
10316: PUSH
10317: LD_INT 11
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: LD_INT 21
10333: PUSH
10334: LD_INT 2
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: PUSH
10341: LD_INT 21
10343: PUSH
10344: LD_INT 3
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: PPUSH
10361: CALL_OW 69
10365: PPUSH
10366: LD_VAR 0 1
10370: PPUSH
10371: CALL_OW 74
10375: ST_TO_ADDR
// if not nearest then
10376: LD_VAR 0 3
10380: NOT
10381: IFFALSE 10385
// break ;
10383: GO 10419
// SetTag ( nearest , tMined ) ;
10385: LD_VAR 0 3
10389: PPUSH
10390: LD_INT 11
10392: PPUSH
10393: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
10397: LD_VAR 0 1
10401: PPUSH
10402: LD_INT 0
10404: PPUSH
10405: LD_INT 0
10407: PPUSH
10408: LD_VAR 0 3
10412: PPUSH
10413: CALL_OW 192
// end ;
10417: GO 10291
10419: POP
10420: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10421: LD_ADDR_VAR 0 2
10425: PUSH
10426: LD_VAR 0 2
10430: PPUSH
10431: LD_INT 50
10433: PUSH
10434: EMPTY
10435: LIST
10436: PPUSH
10437: CALL_OW 72
10441: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
10442: LD_INT 70
10444: PPUSH
10445: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_VAR 0 2
10458: PPUSH
10459: LD_INT 50
10461: PUSH
10462: EMPTY
10463: LIST
10464: PPUSH
10465: CALL_OW 72
10469: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
10470: LD_ADDR_VAR 0 4
10474: PUSH
10475: LD_INT 81
10477: PUSH
10478: LD_EXP 11
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PPUSH
10487: CALL_OW 69
10491: ST_TO_ADDR
// for i in tmp do
10492: LD_ADDR_VAR 0 1
10496: PUSH
10497: LD_VAR 0 2
10501: PUSH
10502: FOR_IN
10503: IFFALSE 10699
// if GetClass ( i ) <> 1 then
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 257
10514: PUSH
10515: LD_INT 1
10517: NONEQUAL
10518: IFFALSE 10546
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
10520: LD_VAR 0 1
10524: PPUSH
10525: LD_VAR 0 4
10529: PPUSH
10530: LD_VAR 0 1
10534: PPUSH
10535: CALL_OW 74
10539: PPUSH
10540: CALL_OW 115
10544: GO 10697
// if not HasTask ( i ) then
10546: LD_VAR 0 1
10550: PPUSH
10551: CALL_OW 314
10555: NOT
10556: IFFALSE 10697
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
10558: LD_ADDR_VAR 0 3
10562: PUSH
10563: LD_VAR 0 4
10567: PPUSH
10568: LD_INT 3
10570: PUSH
10571: LD_INT 120
10573: PUSH
10574: LD_INT 11
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 2
10587: PUSH
10588: LD_INT 21
10590: PUSH
10591: LD_INT 2
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 21
10600: PUSH
10601: LD_INT 3
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 72
10621: PPUSH
10622: LD_VAR 0 1
10626: PPUSH
10627: CALL_OW 74
10631: ST_TO_ADDR
// if not nearest then
10632: LD_VAR 0 3
10636: NOT
10637: IFFALSE 10665
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
10639: LD_VAR 0 1
10643: PPUSH
10644: LD_VAR 0 4
10648: PPUSH
10649: LD_VAR 0 1
10653: PPUSH
10654: CALL_OW 74
10658: PPUSH
10659: CALL_OW 115
10663: GO 10697
// begin SetTag ( nearest , tMined ) ;
10665: LD_VAR 0 3
10669: PPUSH
10670: LD_INT 11
10672: PPUSH
10673: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
10677: LD_VAR 0 1
10681: PPUSH
10682: LD_INT 0
10684: PPUSH
10685: LD_INT 0
10687: PPUSH
10688: LD_VAR 0 3
10692: PPUSH
10693: CALL_OW 132
// end ; end ;
10697: GO 10502
10699: POP
10700: POP
// until not tmp ;
10701: LD_VAR 0 2
10705: NOT
10706: IFFALSE 10442
// end ;
10708: PPOPN 5
10710: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
10711: LD_INT 22
10713: PUSH
10714: LD_EXP 11
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 32
10725: PUSH
10726: LD_INT 1
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PPUSH
10737: CALL_OW 69
10741: IFFALSE 10820
10743: GO 10745
10745: DISABLE
10746: LD_INT 0
10748: PPUSH
// begin enable ;
10749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
10750: LD_ADDR_VAR 0 1
10754: PUSH
10755: LD_INT 22
10757: PUSH
10758: LD_EXP 11
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: LD_INT 1
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: PUSH
10786: FOR_IN
10787: IFFALSE 10818
// if GetFuel ( i ) < 3 then
10789: LD_VAR 0 1
10793: PPUSH
10794: CALL_OW 261
10798: PUSH
10799: LD_INT 3
10801: LESS
10802: IFFALSE 10816
// SetFuel ( i , 3 ) ;
10804: LD_VAR 0 1
10808: PPUSH
10809: LD_INT 3
10811: PPUSH
10812: CALL_OW 240
10816: GO 10786
10818: POP
10819: POP
// end ;
10820: PPOPN 1
10822: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
10823: LD_INT 9
10825: PPUSH
10826: LD_INT 22
10828: PUSH
10829: LD_EXP 11
10833: PUSH
10834: EMPTY
10835: LIST
10836: LIST
10837: PPUSH
10838: CALL_OW 70
10842: IFFALSE 10905
10844: GO 10846
10846: DISABLE
10847: LD_INT 0
10849: PPUSH
// begin enable ;
10850: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
10851: LD_ADDR_VAR 0 1
10855: PUSH
10856: LD_INT 9
10858: PPUSH
10859: LD_INT 22
10861: PUSH
10862: LD_EXP 11
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: PPUSH
10871: CALL_OW 70
10875: PUSH
10876: FOR_IN
10877: IFFALSE 10903
// begin Multiplayer_AddPoints ( convoySide , - 100 ) ;
10879: LD_EXP 39
10883: PPUSH
10884: LD_INT 100
10886: NEG
10887: PPUSH
10888: CALL 7245 0 2
// RemoveUnit ( i ) ;
10892: LD_VAR 0 1
10896: PPUSH
10897: CALL_OW 64
// end ;
10901: GO 10876
10903: POP
10904: POP
// end ; end_of_file
10905: PPOPN 1
10907: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
10908: LD_INT 0
10910: PPUSH
10911: PPUSH
// convoys := [ ] ;
10912: LD_ADDR_EXP 37
10916: PUSH
10917: EMPTY
10918: ST_TO_ADDR
// convoySide := side ;
10919: LD_ADDR_EXP 39
10923: PUSH
10924: LD_VAR 0 1
10928: ST_TO_ADDR
// convoyWave := 1 ;
10929: LD_ADDR_EXP 38
10933: PUSH
10934: LD_INT 1
10936: ST_TO_ADDR
// for i := 1 to 8 do
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: DOUBLE
10943: LD_INT 1
10945: DEC
10946: ST_TO_ADDR
10947: LD_INT 8
10949: PUSH
10950: FOR_TO
10951: IFFALSE 10981
// if multi_sides [ i ] then
10953: LD_EXP 14
10957: PUSH
10958: LD_VAR 0 3
10962: ARRAY
10963: IFFALSE 10979
// ChangeSideFog ( i , side ) ;
10965: LD_VAR 0 3
10969: PPUSH
10970: LD_VAR 0 1
10974: PPUSH
10975: CALL_OW 343
10979: GO 10950
10981: POP
10982: POP
// end ;
10983: LD_VAR 0 2
10987: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
10988: LD_EXP 2
10992: IFFALSE 11027
10994: GO 10996
10996: DISABLE
10997: LD_INT 0
10999: PPUSH
11000: PPUSH
// begin enable ;
11001: ENABLE
// blockThread := true ;
11002: LD_ADDR_EXP 6
11006: PUSH
11007: LD_INT 1
11009: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
11010: LD_EXP 38
11014: PPUSH
11015: CALL 11030 0 1
// blockThread := false ;
11019: LD_ADDR_EXP 6
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// end ;
11027: PPOPN 2
11029: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
11030: LD_INT 0
11032: PPUSH
11033: PPUSH
11034: PPUSH
11035: PPUSH
11036: PPUSH
11037: PPUSH
11038: PPUSH
// convoyWave := Inc ( wave ) ;
11039: LD_ADDR_EXP 38
11043: PUSH
11044: LD_VAR 0 1
11048: PPUSH
11049: CALL 52895 0 1
11053: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
11054: LD_ADDR_VAR 0 4
11058: PUSH
11059: LD_INT 5
11061: PUSH
11062: LD_INT 4
11064: PUSH
11065: LD_INT 3
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: LIST
11072: PUSH
11073: LD_OWVAR 67
11077: ARRAY
11078: ST_TO_ADDR
// tmp := [ ] ;
11079: LD_ADDR_VAR 0 7
11083: PUSH
11084: EMPTY
11085: ST_TO_ADDR
// if wave mod 5 = 0 then
11086: LD_VAR 0 1
11090: PUSH
11091: LD_INT 5
11093: MOD
11094: PUSH
11095: LD_INT 0
11097: EQUAL
11098: IFFALSE 11344
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
11100: LD_ADDR_VAR 0 8
11104: PUSH
11105: LD_INT 16
11107: PUSH
11108: LD_INT 21
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 36
11117: PUSH
11118: LD_INT 45
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 48
11127: PUSH
11128: LD_INT 58
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: PUSH
11135: LD_INT 59
11137: PUSH
11138: LD_INT 88
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 76
11147: PUSH
11148: LD_INT 106
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 93
11157: PUSH
11158: LD_INT 150
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 92
11167: PUSH
11168: LD_INT 177
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: ST_TO_ADDR
// for i := 1 to 4 do
11184: LD_ADDR_VAR 0 3
11188: PUSH
11189: DOUBLE
11190: LD_INT 1
11192: DEC
11193: ST_TO_ADDR
11194: LD_INT 4
11196: PUSH
11197: FOR_TO
11198: IFFALSE 11340
// begin uc_side := convoySide ;
11200: LD_ADDR_OWVAR 20
11204: PUSH
11205: LD_EXP 39
11209: ST_TO_ADDR
// uc_nation := nation_russian ;
11210: LD_ADDR_OWVAR 21
11214: PUSH
11215: LD_INT 3
11217: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
11218: LD_INT 0
11220: PPUSH
11221: LD_INT 1
11223: PPUSH
11224: LD_INT 4
11226: PPUSH
11227: CALL_OW 12
11231: PPUSH
11232: LD_VAR 0 4
11236: PPUSH
11237: CALL_OW 380
// un := CreateHuman ;
11241: LD_ADDR_VAR 0 5
11245: PUSH
11246: CALL_OW 44
11250: ST_TO_ADDR
// SetDir ( un , 3 ) ;
11251: LD_VAR 0 5
11255: PPUSH
11256: LD_INT 3
11258: PPUSH
11259: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
11263: LD_VAR 0 5
11267: PPUSH
11268: LD_INT 10
11270: PPUSH
11271: LD_INT 0
11273: PPUSH
11274: CALL_OW 49
// SetLives ( un , rand ( 300 , 1000 ) ) ;
11278: LD_VAR 0 5
11282: PPUSH
11283: LD_INT 300
11285: PPUSH
11286: LD_INT 1000
11288: PPUSH
11289: CALL_OW 12
11293: PPUSH
11294: CALL_OW 234
// convoys := Join ( convoys , un ) ;
11298: LD_ADDR_EXP 37
11302: PUSH
11303: LD_EXP 37
11307: PPUSH
11308: LD_VAR 0 5
11312: PPUSH
11313: CALL 51534 0 2
11317: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
11318: LD_ADDR_VAR 0 7
11322: PUSH
11323: LD_VAR 0 7
11327: PPUSH
11328: LD_VAR 0 5
11332: PPUSH
11333: CALL 51534 0 2
11337: ST_TO_ADDR
// end ;
11338: GO 11197
11340: POP
11341: POP
// end else
11342: GO 12506
// if wave mod 3 = 0 then
11344: LD_VAR 0 1
11348: PUSH
11349: LD_INT 3
11351: MOD
11352: PUSH
11353: LD_INT 0
11355: EQUAL
11356: IFFALSE 11827
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
11358: LD_ADDR_VAR 0 8
11362: PUSH
11363: LD_INT 133
11365: PUSH
11366: LD_INT 15
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 125
11375: PUSH
11376: LD_INT 34
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 109
11385: PUSH
11386: LD_INT 55
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 99
11395: PUSH
11396: LD_INT 64
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 133
11405: PUSH
11406: LD_INT 102
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 143
11415: PUSH
11416: LD_INT 136
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 127
11425: PUSH
11426: LD_INT 154
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 92
11435: PUSH
11436: LD_INT 152
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 93
11445: PUSH
11446: LD_INT 177
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: ST_TO_ADDR
// for i := 1 to 4 do
11464: LD_ADDR_VAR 0 3
11468: PUSH
11469: DOUBLE
11470: LD_INT 1
11472: DEC
11473: ST_TO_ADDR
11474: LD_INT 4
11476: PUSH
11477: FOR_TO
11478: IFFALSE 11823
// begin uc_side := convoySide ;
11480: LD_ADDR_OWVAR 20
11484: PUSH
11485: LD_EXP 39
11489: ST_TO_ADDR
// uc_nation := nation_russian ;
11490: LD_ADDR_OWVAR 21
11494: PUSH
11495: LD_INT 3
11497: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
11498: LD_INT 0
11500: PPUSH
11501: LD_INT 1
11503: PPUSH
11504: LD_INT 4
11506: PPUSH
11507: CALL_OW 12
11511: PPUSH
11512: LD_VAR 0 4
11516: PPUSH
11517: CALL_OW 380
// un := CreateHuman ;
11521: LD_ADDR_VAR 0 5
11525: PUSH
11526: CALL_OW 44
11530: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
11531: LD_INT 21
11533: PUSH
11534: LD_INT 22
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 1
11543: PPUSH
11544: LD_INT 2
11546: PPUSH
11547: CALL_OW 12
11551: ARRAY
11552: PPUSH
11553: LD_INT 1
11555: PPUSH
11556: LD_INT 1
11558: PPUSH
11559: LD_INT 42
11561: PUSH
11562: LD_INT 43
11564: PUSH
11565: LD_INT 51
11567: PUSH
11568: LD_INT 44
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 1
11579: PPUSH
11580: LD_INT 4
11582: PPUSH
11583: CALL_OW 12
11587: ARRAY
11588: PPUSH
11589: LD_INT 60
11591: PPUSH
11592: LD_INT 90
11594: PPUSH
11595: CALL_OW 12
11599: PPUSH
11600: CALL 18683 0 5
// veh := CreateVehicle ;
11604: LD_ADDR_VAR 0 6
11608: PUSH
11609: CALL_OW 45
11613: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
11614: LD_VAR 0 6
11618: PPUSH
11619: LD_INT 3
11621: PPUSH
11622: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
11626: LD_VAR 0 6
11630: PPUSH
11631: LD_INT 300
11633: PPUSH
11634: LD_INT 1000
11636: PPUSH
11637: CALL_OW 12
11641: PPUSH
11642: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
11646: LD_VAR 0 6
11650: PPUSH
11651: CALL_OW 264
11655: PUSH
11656: LD_INT 51
11658: EQUAL
11659: IFFALSE 11688
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
11661: LD_VAR 0 6
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: LD_INT 10
11671: PUSH
11672: LD_INT 1
11674: PPUSH
11675: LD_INT 10
11677: PPUSH
11678: CALL_OW 12
11682: MUL
11683: PPUSH
11684: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
11688: LD_INT 10
11690: PPUSH
11691: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
11695: LD_VAR 0 6
11699: PPUSH
11700: LD_INT 7
11702: PPUSH
11703: LD_INT 0
11705: PPUSH
11706: CALL_OW 49
11710: IFFALSE 11688
// PlaceHumanInUnit ( un , veh ) ;
11712: LD_VAR 0 5
11716: PPUSH
11717: LD_VAR 0 6
11721: PPUSH
11722: CALL_OW 52
// convoys := Join ( convoys , un ) ;
11726: LD_ADDR_EXP 37
11730: PUSH
11731: LD_EXP 37
11735: PPUSH
11736: LD_VAR 0 5
11740: PPUSH
11741: CALL 51534 0 2
11745: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
11746: LD_ADDR_VAR 0 7
11750: PUSH
11751: LD_VAR 0 7
11755: PPUSH
11756: LD_VAR 0 5
11760: PPUSH
11761: CALL 51534 0 2
11765: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
11766: LD_ADDR_EXP 37
11770: PUSH
11771: LD_EXP 37
11775: PPUSH
11776: LD_VAR 0 6
11780: PPUSH
11781: CALL 51534 0 2
11785: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
11786: LD_ADDR_VAR 0 7
11790: PUSH
11791: LD_VAR 0 7
11795: PPUSH
11796: LD_VAR 0 6
11800: PPUSH
11801: CALL 51534 0 2
11805: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
11806: LD_VAR 0 5
11810: PPUSH
11811: LD_INT 133
11813: PPUSH
11814: LD_INT 15
11816: PPUSH
11817: CALL_OW 111
// end ;
11821: GO 11477
11823: POP
11824: POP
// end else
11825: GO 12506
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
11827: LD_ADDR_VAR 0 8
11831: PUSH
11832: LD_INT 133
11834: PUSH
11835: LD_INT 15
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: LD_INT 125
11844: PUSH
11845: LD_INT 34
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 109
11854: PUSH
11855: LD_INT 55
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 99
11864: PUSH
11865: LD_INT 64
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 88
11874: PUSH
11875: LD_INT 70
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 74
11884: PUSH
11885: LD_INT 78
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 70
11894: PUSH
11895: LD_INT 91
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 80
11904: PUSH
11905: LD_INT 113
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 89
11914: PUSH
11915: LD_INT 133
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 91
11924: PUSH
11925: LD_INT 159
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 93
11934: PUSH
11935: LD_INT 177
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: ST_TO_ADDR
// for i := 1 to 2 do
11955: LD_ADDR_VAR 0 3
11959: PUSH
11960: DOUBLE
11961: LD_INT 1
11963: DEC
11964: ST_TO_ADDR
11965: LD_INT 2
11967: PUSH
11968: FOR_TO
11969: IFFALSE 12314
// begin uc_side := convoySide ;
11971: LD_ADDR_OWVAR 20
11975: PUSH
11976: LD_EXP 39
11980: ST_TO_ADDR
// uc_nation := nation_russian ;
11981: LD_ADDR_OWVAR 21
11985: PUSH
11986: LD_INT 3
11988: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
11989: LD_INT 0
11991: PPUSH
11992: LD_INT 1
11994: PPUSH
11995: LD_INT 4
11997: PPUSH
11998: CALL_OW 12
12002: PPUSH
12003: LD_VAR 0 4
12007: PPUSH
12008: CALL_OW 380
// un := CreateHuman ;
12012: LD_ADDR_VAR 0 5
12016: PUSH
12017: CALL_OW 44
12021: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
12022: LD_INT 21
12024: PUSH
12025: LD_INT 22
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 1
12034: PPUSH
12035: LD_INT 2
12037: PPUSH
12038: CALL_OW 12
12042: ARRAY
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: LD_INT 1
12049: PPUSH
12050: LD_INT 42
12052: PUSH
12053: LD_INT 43
12055: PUSH
12056: LD_INT 51
12058: PUSH
12059: LD_INT 44
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 1
12070: PPUSH
12071: LD_INT 4
12073: PPUSH
12074: CALL_OW 12
12078: ARRAY
12079: PPUSH
12080: LD_INT 70
12082: PPUSH
12083: LD_INT 90
12085: PPUSH
12086: CALL_OW 12
12090: PPUSH
12091: CALL 18683 0 5
// veh := CreateVehicle ;
12095: LD_ADDR_VAR 0 6
12099: PUSH
12100: CALL_OW 45
12104: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12105: LD_VAR 0 6
12109: PPUSH
12110: LD_INT 3
12112: PPUSH
12113: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
12117: LD_VAR 0 6
12121: PPUSH
12122: LD_INT 300
12124: PPUSH
12125: LD_INT 1000
12127: PPUSH
12128: CALL_OW 12
12132: PPUSH
12133: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12137: LD_VAR 0 6
12141: PPUSH
12142: CALL_OW 264
12146: PUSH
12147: LD_INT 51
12149: EQUAL
12150: IFFALSE 12179
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
12152: LD_VAR 0 6
12156: PPUSH
12157: LD_INT 1
12159: PPUSH
12160: LD_INT 10
12162: PUSH
12163: LD_INT 1
12165: PPUSH
12166: LD_INT 10
12168: PPUSH
12169: CALL_OW 12
12173: MUL
12174: PPUSH
12175: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
12179: LD_INT 10
12181: PPUSH
12182: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
12186: LD_VAR 0 6
12190: PPUSH
12191: LD_INT 7
12193: PPUSH
12194: LD_INT 0
12196: PPUSH
12197: CALL_OW 49
12201: IFFALSE 12179
// PlaceHumanInUnit ( un , veh ) ;
12203: LD_VAR 0 5
12207: PPUSH
12208: LD_VAR 0 6
12212: PPUSH
12213: CALL_OW 52
// convoys := Join ( convoys , un ) ;
12217: LD_ADDR_EXP 37
12221: PUSH
12222: LD_EXP 37
12226: PPUSH
12227: LD_VAR 0 5
12231: PPUSH
12232: CALL 51534 0 2
12236: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12237: LD_ADDR_VAR 0 7
12241: PUSH
12242: LD_VAR 0 7
12246: PPUSH
12247: LD_VAR 0 5
12251: PPUSH
12252: CALL 51534 0 2
12256: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
12257: LD_ADDR_EXP 37
12261: PUSH
12262: LD_EXP 37
12266: PPUSH
12267: LD_VAR 0 6
12271: PPUSH
12272: CALL 51534 0 2
12276: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
12277: LD_ADDR_VAR 0 7
12281: PUSH
12282: LD_VAR 0 7
12286: PPUSH
12287: LD_VAR 0 6
12291: PPUSH
12292: CALL 51534 0 2
12296: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
12297: LD_VAR 0 5
12301: PPUSH
12302: LD_INT 133
12304: PPUSH
12305: LD_INT 15
12307: PPUSH
12308: CALL_OW 111
// end ;
12312: GO 11968
12314: POP
12315: POP
// for i := 1 to rand ( 3 , 5 ) do
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: DOUBLE
12322: LD_INT 1
12324: DEC
12325: ST_TO_ADDR
12326: LD_INT 3
12328: PPUSH
12329: LD_INT 5
12331: PPUSH
12332: CALL_OW 12
12336: PUSH
12337: FOR_TO
12338: IFFALSE 12504
// begin uc_side := convoySide ;
12340: LD_ADDR_OWVAR 20
12344: PUSH
12345: LD_EXP 39
12349: ST_TO_ADDR
// uc_nation := nation_russian ;
12350: LD_ADDR_OWVAR 21
12354: PUSH
12355: LD_INT 3
12357: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12358: LD_INT 0
12360: PPUSH
12361: LD_INT 1
12363: PPUSH
12364: LD_INT 4
12366: PPUSH
12367: CALL_OW 12
12371: PPUSH
12372: LD_VAR 0 4
12376: PPUSH
12377: CALL_OW 380
// un := CreateHuman ;
12381: LD_ADDR_VAR 0 5
12385: PUSH
12386: CALL_OW 44
12390: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12391: LD_VAR 0 5
12395: PPUSH
12396: LD_INT 3
12398: PPUSH
12399: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
12403: LD_INT 35
12405: PPUSH
12406: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
12410: LD_VAR 0 5
12414: PPUSH
12415: LD_INT 7
12417: PPUSH
12418: LD_INT 0
12420: PPUSH
12421: CALL_OW 49
12425: IFFALSE 12403
// SetLives ( un , rand ( 300 , 1000 ) ) ;
12427: LD_VAR 0 5
12431: PPUSH
12432: LD_INT 300
12434: PPUSH
12435: LD_INT 1000
12437: PPUSH
12438: CALL_OW 12
12442: PPUSH
12443: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12447: LD_ADDR_EXP 37
12451: PUSH
12452: LD_EXP 37
12456: PPUSH
12457: LD_VAR 0 5
12461: PPUSH
12462: CALL 51534 0 2
12466: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12467: LD_ADDR_VAR 0 7
12471: PUSH
12472: LD_VAR 0 7
12476: PPUSH
12477: LD_VAR 0 5
12481: PPUSH
12482: CALL 51534 0 2
12486: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
12487: LD_VAR 0 5
12491: PPUSH
12492: LD_INT 133
12494: PPUSH
12495: LD_INT 15
12497: PPUSH
12498: CALL_OW 111
// end ;
12502: GO 12337
12504: POP
12505: POP
// end ; if not tmp then
12506: LD_VAR 0 7
12510: NOT
12511: IFFALSE 12515
// exit ;
12513: GO 12821
// repeat wait ( 0 0$1 ) ;
12515: LD_INT 35
12517: PPUSH
12518: CALL_OW 67
// for i in tmp do
12522: LD_ADDR_VAR 0 3
12526: PUSH
12527: LD_VAR 0 7
12531: PUSH
12532: FOR_IN
12533: IFFALSE 12812
// begin if IsDead ( i ) then
12535: LD_VAR 0 3
12539: PPUSH
12540: CALL_OW 301
12544: IFFALSE 12564
// tmp := tmp diff i else
12546: LD_ADDR_VAR 0 7
12550: PUSH
12551: LD_VAR 0 7
12555: PUSH
12556: LD_VAR 0 3
12560: DIFF
12561: ST_TO_ADDR
12562: GO 12810
// if IsInArea ( i , southEndArea ) then
12564: LD_VAR 0 3
12568: PPUSH
12569: LD_INT 9
12571: PPUSH
12572: CALL_OW 308
12576: IFFALSE 12729
// begin tmp := tmp diff i ;
12578: LD_ADDR_VAR 0 7
12582: PUSH
12583: LD_VAR 0 7
12587: PUSH
12588: LD_VAR 0 3
12592: DIFF
12593: ST_TO_ADDR
// convoys := convoys diff i ;
12594: LD_ADDR_EXP 37
12598: PUSH
12599: LD_EXP 37
12603: PUSH
12604: LD_VAR 0 3
12608: DIFF
12609: ST_TO_ADDR
// if GetType ( i ) = unit_human then
12610: LD_VAR 0 3
12614: PPUSH
12615: CALL_OW 247
12619: PUSH
12620: LD_INT 1
12622: EQUAL
12623: IFFALSE 12644
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
12625: LD_EXP 39
12629: PPUSH
12630: LD_INT 7
12632: PPUSH
12633: CALL 7403 0 1
12637: PPUSH
12638: CALL 7245 0 2
12642: GO 12703
// begin tmp := tmp diff IsInUnit ( i ) ;
12644: LD_ADDR_VAR 0 7
12648: PUSH
12649: LD_VAR 0 7
12653: PUSH
12654: LD_VAR 0 3
12658: PPUSH
12659: CALL_OW 310
12663: DIFF
12664: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
12665: LD_ADDR_EXP 37
12669: PUSH
12670: LD_EXP 37
12674: PUSH
12675: LD_VAR 0 3
12679: PPUSH
12680: CALL_OW 310
12684: DIFF
12685: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
12686: LD_EXP 39
12690: PPUSH
12691: LD_INT 8
12693: PPUSH
12694: CALL 7403 0 1
12698: PPUSH
12699: CALL 7245 0 2
// end ; RemoveUnit ( i ) ;
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
12712: LD_ADDR_EXP 5
12716: PUSH
12717: LD_EXP 5
12721: PPUSH
12722: CALL 52895 0 1
12726: ST_TO_ADDR
// end else
12727: GO 12810
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
12729: LD_VAR 0 3
12733: PPUSH
12734: CALL_OW 247
12738: PUSH
12739: LD_INT 2
12741: EQUAL
12742: PUSH
12743: LD_VAR 0 3
12747: PPUSH
12748: CALL_OW 261
12752: PUSH
12753: LD_INT 0
12755: EQUAL
12756: AND
12757: IFFALSE 12793
// begin tmp := tmp diff i ;
12759: LD_ADDR_VAR 0 7
12763: PUSH
12764: LD_VAR 0 7
12768: PUSH
12769: LD_VAR 0 3
12773: DIFF
12774: ST_TO_ADDR
// convoys := convoys diff i ;
12775: LD_ADDR_EXP 37
12779: PUSH
12780: LD_EXP 37
12784: PUSH
12785: LD_VAR 0 3
12789: DIFF
12790: ST_TO_ADDR
// end else
12791: GO 12810
// MoveTo ( i , path , southEndArea ) ;
12793: LD_VAR 0 3
12797: PPUSH
12798: LD_VAR 0 8
12802: PPUSH
12803: LD_INT 9
12805: PPUSH
12806: CALL 12826 0 3
// end ;
12810: GO 12532
12812: POP
12813: POP
// until not tmp ;
12814: LD_VAR 0 7
12818: NOT
12819: IFFALSE 12515
// end ;
12821: LD_VAR 0 2
12825: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
12826: LD_INT 0
12828: PPUSH
12829: PPUSH
12830: PPUSH
12831: PPUSH
12832: PPUSH
12833: PPUSH
// if not unit then
12834: LD_VAR 0 1
12838: NOT
12839: IFFALSE 12843
// exit ;
12841: GO 13404
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
12843: LD_ADDR_VAR 0 9
12847: PUSH
12848: LD_INT 29
12850: PUSH
12851: LD_INT 91
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: LD_INT 51
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: ST_TO_ADDR
// if IsOk ( unit ) then
12866: LD_VAR 0 1
12870: PPUSH
12871: CALL_OW 302
12875: IFFALSE 13404
// begin tag := GetTag ( unit ) + 1 ;
12877: LD_ADDR_VAR 0 6
12881: PUSH
12882: LD_VAR 0 1
12886: PPUSH
12887: CALL_OW 110
12891: PUSH
12892: LD_INT 1
12894: PLUS
12895: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
12896: LD_ADDR_VAR 0 5
12900: PUSH
12901: LD_VAR 0 1
12905: PPUSH
12906: CALL_OW 250
12910: PPUSH
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 251
12920: PPUSH
12921: LD_INT 3
12923: PPUSH
12924: CALL 53880 0 3
12928: ST_TO_ADDR
// type := GetType ( unit ) ;
12929: LD_ADDR_VAR 0 7
12933: PUSH
12934: LD_VAR 0 1
12938: PPUSH
12939: CALL_OW 247
12943: ST_TO_ADDR
// if type = unit_human then
12944: LD_VAR 0 7
12948: PUSH
12949: LD_INT 1
12951: EQUAL
12952: IFFALSE 13042
// begin vehicle := IsInUnit ( unit ) ;
12954: LD_ADDR_VAR 0 8
12958: PUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: CALL_OW 310
12968: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
12969: LD_VAR 0 8
12973: PUSH
12974: LD_VAR 0 8
12978: PPUSH
12979: CALL_OW 261
12983: PUSH
12984: LD_INT 0
12986: EQUAL
12987: AND
12988: IFFALSE 13040
// begin ComExitVehicle ( unit ) ;
12990: LD_VAR 0 1
12994: PPUSH
12995: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
12999: LD_VAR 0 1
13003: PPUSH
13004: LD_VAR 0 2
13008: PUSH
13009: LD_VAR 0 6
13013: ARRAY
13014: PUSH
13015: LD_INT 1
13017: ARRAY
13018: PPUSH
13019: LD_VAR 0 2
13023: PUSH
13024: LD_VAR 0 6
13028: ARRAY
13029: PUSH
13030: LD_INT 2
13032: ARRAY
13033: PPUSH
13034: CALL_OW 171
// exit ;
13038: GO 13404
// end ; end else
13040: GO 13117
// begin if GetFuel ( unit ) = 0 then
13042: LD_VAR 0 1
13046: PPUSH
13047: CALL_OW 261
13051: PUSH
13052: LD_INT 0
13054: EQUAL
13055: IFFALSE 13117
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 311
13066: PPUSH
13067: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
13071: LD_VAR 0 1
13075: PPUSH
13076: CALL_OW 311
13080: PPUSH
13081: LD_VAR 0 2
13085: PUSH
13086: LD_VAR 0 6
13090: ARRAY
13091: PUSH
13092: LD_INT 1
13094: ARRAY
13095: PPUSH
13096: LD_VAR 0 2
13100: PUSH
13101: LD_VAR 0 6
13105: ARRAY
13106: PUSH
13107: LD_INT 2
13109: ARRAY
13110: PPUSH
13111: CALL_OW 171
// exit ;
13115: GO 13404
// end ; end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
13117: LD_VAR 0 7
13121: PUSH
13122: LD_INT 2
13124: EQUAL
13125: PUSH
13126: LD_VAR 0 5
13130: PUSH
13131: LD_INT 3
13133: GREATER
13134: AND
13135: PUSH
13136: LD_VAR 0 1
13140: PPUSH
13141: CALL_OW 264
13145: PUSH
13146: LD_VAR 0 9
13150: IN
13151: NOT
13152: AND
13153: IFFALSE 13192
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
13155: LD_VAR 0 1
13159: PPUSH
13160: LD_VAR 0 5
13164: PUSH
13165: LD_INT 1
13167: ARRAY
13168: PUSH
13169: LD_INT 1
13171: ARRAY
13172: PPUSH
13173: LD_VAR 0 5
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PUSH
13182: LD_INT 2
13184: ARRAY
13185: PPUSH
13186: CALL_OW 116
13190: GO 13404
// if path > tag then
13192: LD_VAR 0 2
13196: PUSH
13197: LD_VAR 0 6
13201: GREATER
13202: IFFALSE 13373
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
13204: LD_VAR 0 1
13208: PPUSH
13209: LD_VAR 0 2
13213: PUSH
13214: LD_VAR 0 6
13218: ARRAY
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: LD_VAR 0 2
13228: PUSH
13229: LD_VAR 0 6
13233: ARRAY
13234: PUSH
13235: LD_INT 2
13237: ARRAY
13238: PPUSH
13239: CALL_OW 297
13243: PUSH
13244: LD_INT 6
13246: GREATER
13247: IFFALSE 13357
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
13249: LD_VAR 0 1
13253: PPUSH
13254: CALL_OW 257
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 3
13264: PUSH
13265: LD_INT 4
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: IN
13273: IFFALSE 13316
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
13275: LD_VAR 0 1
13279: PPUSH
13280: LD_VAR 0 2
13284: PUSH
13285: LD_VAR 0 6
13289: ARRAY
13290: PUSH
13291: LD_INT 1
13293: ARRAY
13294: PPUSH
13295: LD_VAR 0 2
13299: PUSH
13300: LD_VAR 0 6
13304: ARRAY
13305: PUSH
13306: LD_INT 2
13308: ARRAY
13309: PPUSH
13310: CALL_OW 111
13314: GO 13355
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
13316: LD_VAR 0 1
13320: PPUSH
13321: LD_VAR 0 2
13325: PUSH
13326: LD_VAR 0 6
13330: ARRAY
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PPUSH
13336: LD_VAR 0 2
13340: PUSH
13341: LD_VAR 0 6
13345: ARRAY
13346: PUSH
13347: LD_INT 2
13349: ARRAY
13350: PPUSH
13351: CALL_OW 114
13355: GO 13371
// SetTag ( unit , tag ) ;
13357: LD_VAR 0 1
13361: PPUSH
13362: LD_VAR 0 6
13366: PPUSH
13367: CALL_OW 109
// end else
13371: GO 13404
// if not IsInArea ( unit , area ) then
13373: LD_VAR 0 1
13377: PPUSH
13378: LD_VAR 0 3
13382: PPUSH
13383: CALL_OW 308
13387: NOT
13388: IFFALSE 13404
// ComMoveToArea ( unit , area ) ;
13390: LD_VAR 0 1
13394: PPUSH
13395: LD_VAR 0 3
13399: PPUSH
13400: CALL_OW 113
// end ; end ; end_of_file
13404: LD_VAR 0 4
13408: RET
// every 0 0$20 trigger game do
13409: LD_EXP 2
13413: IFFALSE 13454
13415: GO 13417
13417: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
13418: LD_INT 11
13420: PUSH
13421: LD_INT 12
13423: PUSH
13424: LD_INT 13
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PPUSH
13432: LD_EXP 28
13436: PUSH
13437: LD_INT 2
13439: ARRAY
13440: PPUSH
13441: LD_EXP 28
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PPUSH
13450: CALL 13455 0 3
13454: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
13455: LD_INT 0
13457: PPUSH
13458: PPUSH
13459: PPUSH
// if not areas then
13460: LD_VAR 0 1
13464: NOT
13465: IFFALSE 13469
// exit ;
13467: GO 13675
// x := 5 ;
13469: LD_ADDR_VAR 0 6
13473: PUSH
13474: LD_INT 5
13476: ST_TO_ADDR
// repeat wait ( time ) ;
13477: LD_VAR 0 2
13481: PPUSH
13482: CALL_OW 67
// for i in areas do
13486: LD_ADDR_VAR 0 5
13490: PUSH
13491: LD_VAR 0 1
13495: PUSH
13496: FOR_IN
13497: IFFALSE 13586
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
13499: LD_VAR 0 5
13503: PPUSH
13504: LD_INT 1
13506: PPUSH
13507: CALL_OW 287
13511: PUSH
13512: LD_INT 15
13514: PUSH
13515: LD_INT 12
13517: PUSH
13518: LD_INT 10
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_OWVAR 67
13530: ARRAY
13531: LESS
13532: IFFALSE 13584
// begin wait ( 0 0$5 * Difficulty ) ;
13534: LD_INT 175
13536: PUSH
13537: LD_OWVAR 67
13541: MUL
13542: PPUSH
13543: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
13547: LD_VAR 0 6
13551: PPUSH
13552: LD_VAR 0 5
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 55
// amount := amount - ( x * 10 ) ;
13564: LD_ADDR_VAR 0 3
13568: PUSH
13569: LD_VAR 0 3
13573: PUSH
13574: LD_VAR 0 6
13578: PUSH
13579: LD_INT 10
13581: MUL
13582: MINUS
13583: ST_TO_ADDR
// end ; end ;
13584: GO 13496
13586: POP
13587: POP
// time := time + ( 0 0$3 * Difficulty ) ;
13588: LD_ADDR_VAR 0 2
13592: PUSH
13593: LD_VAR 0 2
13597: PUSH
13598: LD_INT 105
13600: PUSH
13601: LD_OWVAR 67
13605: MUL
13606: PLUS
13607: ST_TO_ADDR
// x := x - 1 ;
13608: LD_ADDR_VAR 0 6
13612: PUSH
13613: LD_VAR 0 6
13617: PUSH
13618: LD_INT 1
13620: MINUS
13621: ST_TO_ADDR
// if x = 0 then
13622: LD_VAR 0 6
13626: PUSH
13627: LD_INT 0
13629: EQUAL
13630: IFFALSE 13640
// x := 5 ;
13632: LD_ADDR_VAR 0 6
13636: PUSH
13637: LD_INT 5
13639: ST_TO_ADDR
// if time > 2 2$00 then
13640: LD_VAR 0 2
13644: PUSH
13645: LD_INT 4200
13647: GREATER
13648: IFFALSE 13658
// time := 0 0$40 ;
13650: LD_ADDR_VAR 0 2
13654: PUSH
13655: LD_INT 1400
13657: ST_TO_ADDR
// until not game or amount <= 0 ;
13658: LD_EXP 2
13662: NOT
13663: PUSH
13664: LD_VAR 0 3
13668: PUSH
13669: LD_INT 0
13671: LESSEQUAL
13672: OR
13673: IFFALSE 13477
// end ; end_of_file
13675: LD_VAR 0 4
13679: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
13680: LD_VAR 0 1
13684: PUSH
13685: LD_INT 200
13687: DOUBLE
13688: GREATEREQUAL
13689: IFFALSE 13697
13691: LD_INT 299
13693: DOUBLE
13694: LESSEQUAL
13695: IFTRUE 13699
13697: GO 13731
13699: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
13700: LD_VAR 0 1
13704: PPUSH
13705: LD_VAR 0 2
13709: PPUSH
13710: LD_VAR 0 3
13714: PPUSH
13715: LD_VAR 0 4
13719: PPUSH
13720: LD_VAR 0 5
13724: PPUSH
13725: CALL 72813 0 5
13729: GO 13808
13731: LD_INT 300
13733: DOUBLE
13734: GREATEREQUAL
13735: IFFALSE 13743
13737: LD_INT 399
13739: DOUBLE
13740: LESSEQUAL
13741: IFTRUE 13745
13743: GO 13807
13745: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
13746: LD_VAR 0 1
13750: PPUSH
13751: LD_VAR 0 2
13755: PPUSH
13756: LD_VAR 0 3
13760: PPUSH
13761: LD_VAR 0 4
13765: PPUSH
13766: LD_VAR 0 5
13770: PPUSH
13771: LD_VAR 0 6
13775: PPUSH
13776: LD_VAR 0 7
13780: PPUSH
13781: LD_VAR 0 8
13785: PPUSH
13786: LD_VAR 0 9
13790: PPUSH
13791: LD_VAR 0 10
13795: PPUSH
13796: LD_VAR 0 11
13800: PPUSH
13801: CALL 69138 0 11
13805: GO 13808
13807: POP
// end ;
13808: PPOPN 11
13810: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
13811: LD_VAR 0 1
13815: PPUSH
13816: LD_VAR 0 2
13820: PPUSH
13821: LD_VAR 0 3
13825: PPUSH
13826: LD_VAR 0 4
13830: PPUSH
13831: LD_VAR 0 5
13835: PPUSH
13836: CALL 72549 0 5
// end ; end_of_file
13840: PPOPN 5
13842: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
13843: LD_INT 0
13845: PPUSH
13846: PPUSH
// if exist_mode then
13847: LD_VAR 0 2
13851: IFFALSE 13876
// unit := CreateCharacter ( prefix & ident ) else
13853: LD_ADDR_VAR 0 5
13857: PUSH
13858: LD_VAR 0 3
13862: PUSH
13863: LD_VAR 0 1
13867: STR
13868: PPUSH
13869: CALL_OW 34
13873: ST_TO_ADDR
13874: GO 13891
// unit := NewCharacter ( ident ) ;
13876: LD_ADDR_VAR 0 5
13880: PUSH
13881: LD_VAR 0 1
13885: PPUSH
13886: CALL_OW 25
13890: ST_TO_ADDR
// result := unit ;
13891: LD_ADDR_VAR 0 4
13895: PUSH
13896: LD_VAR 0 5
13900: ST_TO_ADDR
// end ;
13901: LD_VAR 0 4
13905: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
13906: LD_INT 0
13908: PPUSH
13909: PPUSH
// if not side or not nation then
13910: LD_VAR 0 1
13914: NOT
13915: PUSH
13916: LD_VAR 0 2
13920: NOT
13921: OR
13922: IFFALSE 13926
// exit ;
13924: GO 14694
// case nation of nation_american :
13926: LD_VAR 0 2
13930: PUSH
13931: LD_INT 1
13933: DOUBLE
13934: EQUAL
13935: IFTRUE 13939
13937: GO 14153
13939: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
13940: LD_ADDR_VAR 0 4
13944: PUSH
13945: LD_INT 35
13947: PUSH
13948: LD_INT 45
13950: PUSH
13951: LD_INT 46
13953: PUSH
13954: LD_INT 47
13956: PUSH
13957: LD_INT 82
13959: PUSH
13960: LD_INT 83
13962: PUSH
13963: LD_INT 84
13965: PUSH
13966: LD_INT 85
13968: PUSH
13969: LD_INT 86
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: LD_INT 2
13977: PUSH
13978: LD_INT 6
13980: PUSH
13981: LD_INT 15
13983: PUSH
13984: LD_INT 16
13986: PUSH
13987: LD_INT 7
13989: PUSH
13990: LD_INT 12
13992: PUSH
13993: LD_INT 13
13995: PUSH
13996: LD_INT 10
13998: PUSH
13999: LD_INT 14
14001: PUSH
14002: LD_INT 20
14004: PUSH
14005: LD_INT 21
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_INT 25
14013: PUSH
14014: LD_INT 32
14016: PUSH
14017: LD_INT 27
14019: PUSH
14020: LD_INT 36
14022: PUSH
14023: LD_INT 69
14025: PUSH
14026: LD_INT 39
14028: PUSH
14029: LD_INT 34
14031: PUSH
14032: LD_INT 40
14034: PUSH
14035: LD_INT 48
14037: PUSH
14038: LD_INT 49
14040: PUSH
14041: LD_INT 50
14043: PUSH
14044: LD_INT 51
14046: PUSH
14047: LD_INT 52
14049: PUSH
14050: LD_INT 53
14052: PUSH
14053: LD_INT 54
14055: PUSH
14056: LD_INT 55
14058: PUSH
14059: LD_INT 56
14061: PUSH
14062: LD_INT 57
14064: PUSH
14065: LD_INT 58
14067: PUSH
14068: LD_INT 59
14070: PUSH
14071: LD_INT 60
14073: PUSH
14074: LD_INT 61
14076: PUSH
14077: LD_INT 62
14079: PUSH
14080: LD_INT 80
14082: PUSH
14083: LD_INT 82
14085: PUSH
14086: LD_INT 83
14088: PUSH
14089: LD_INT 84
14091: PUSH
14092: LD_INT 85
14094: PUSH
14095: LD_INT 86
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: ST_TO_ADDR
14151: GO 14618
14153: LD_INT 2
14155: DOUBLE
14156: EQUAL
14157: IFTRUE 14161
14159: GO 14387
14161: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
14162: LD_ADDR_VAR 0 4
14166: PUSH
14167: LD_INT 35
14169: PUSH
14170: LD_INT 45
14172: PUSH
14173: LD_INT 46
14175: PUSH
14176: LD_INT 47
14178: PUSH
14179: LD_INT 82
14181: PUSH
14182: LD_INT 83
14184: PUSH
14185: LD_INT 84
14187: PUSH
14188: LD_INT 85
14190: PUSH
14191: LD_INT 87
14193: PUSH
14194: LD_INT 70
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: LD_INT 11
14202: PUSH
14203: LD_INT 3
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: LD_INT 5
14211: PUSH
14212: LD_INT 6
14214: PUSH
14215: LD_INT 15
14217: PUSH
14218: LD_INT 18
14220: PUSH
14221: LD_INT 7
14223: PUSH
14224: LD_INT 17
14226: PUSH
14227: LD_INT 8
14229: PUSH
14230: LD_INT 20
14232: PUSH
14233: LD_INT 21
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_INT 72
14241: PUSH
14242: LD_INT 26
14244: PUSH
14245: LD_INT 69
14247: PUSH
14248: LD_INT 39
14250: PUSH
14251: LD_INT 40
14253: PUSH
14254: LD_INT 41
14256: PUSH
14257: LD_INT 42
14259: PUSH
14260: LD_INT 43
14262: PUSH
14263: LD_INT 48
14265: PUSH
14266: LD_INT 49
14268: PUSH
14269: LD_INT 50
14271: PUSH
14272: LD_INT 51
14274: PUSH
14275: LD_INT 52
14277: PUSH
14278: LD_INT 53
14280: PUSH
14281: LD_INT 54
14283: PUSH
14284: LD_INT 55
14286: PUSH
14287: LD_INT 56
14289: PUSH
14290: LD_INT 60
14292: PUSH
14293: LD_INT 61
14295: PUSH
14296: LD_INT 62
14298: PUSH
14299: LD_INT 66
14301: PUSH
14302: LD_INT 67
14304: PUSH
14305: LD_INT 68
14307: PUSH
14308: LD_INT 81
14310: PUSH
14311: LD_INT 82
14313: PUSH
14314: LD_INT 83
14316: PUSH
14317: LD_INT 84
14319: PUSH
14320: LD_INT 85
14322: PUSH
14323: LD_INT 87
14325: PUSH
14326: LD_INT 88
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 14618
14387: LD_INT 3
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14617
14395: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
14396: LD_ADDR_VAR 0 4
14400: PUSH
14401: LD_INT 46
14403: PUSH
14404: LD_INT 47
14406: PUSH
14407: LD_INT 1
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 82
14415: PUSH
14416: LD_INT 83
14418: PUSH
14419: LD_INT 84
14421: PUSH
14422: LD_INT 85
14424: PUSH
14425: LD_INT 86
14427: PUSH
14428: LD_INT 11
14430: PUSH
14431: LD_INT 9
14433: PUSH
14434: LD_INT 20
14436: PUSH
14437: LD_INT 19
14439: PUSH
14440: LD_INT 21
14442: PUSH
14443: LD_INT 24
14445: PUSH
14446: LD_INT 22
14448: PUSH
14449: LD_INT 25
14451: PUSH
14452: LD_INT 28
14454: PUSH
14455: LD_INT 29
14457: PUSH
14458: LD_INT 30
14460: PUSH
14461: LD_INT 31
14463: PUSH
14464: LD_INT 37
14466: PUSH
14467: LD_INT 38
14469: PUSH
14470: LD_INT 32
14472: PUSH
14473: LD_INT 27
14475: PUSH
14476: LD_INT 33
14478: PUSH
14479: LD_INT 69
14481: PUSH
14482: LD_INT 39
14484: PUSH
14485: LD_INT 34
14487: PUSH
14488: LD_INT 40
14490: PUSH
14491: LD_INT 71
14493: PUSH
14494: LD_INT 23
14496: PUSH
14497: LD_INT 44
14499: PUSH
14500: LD_INT 48
14502: PUSH
14503: LD_INT 49
14505: PUSH
14506: LD_INT 50
14508: PUSH
14509: LD_INT 51
14511: PUSH
14512: LD_INT 52
14514: PUSH
14515: LD_INT 53
14517: PUSH
14518: LD_INT 54
14520: PUSH
14521: LD_INT 55
14523: PUSH
14524: LD_INT 56
14526: PUSH
14527: LD_INT 57
14529: PUSH
14530: LD_INT 58
14532: PUSH
14533: LD_INT 59
14535: PUSH
14536: LD_INT 63
14538: PUSH
14539: LD_INT 64
14541: PUSH
14542: LD_INT 65
14544: PUSH
14545: LD_INT 82
14547: PUSH
14548: LD_INT 83
14550: PUSH
14551: LD_INT 84
14553: PUSH
14554: LD_INT 85
14556: PUSH
14557: LD_INT 86
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: ST_TO_ADDR
14615: GO 14618
14617: POP
// if state > - 1 and state < 3 then
14618: LD_VAR 0 3
14622: PUSH
14623: LD_INT 1
14625: NEG
14626: GREATER
14627: PUSH
14628: LD_VAR 0 3
14632: PUSH
14633: LD_INT 3
14635: LESS
14636: AND
14637: IFFALSE 14694
// for i in result do
14639: LD_ADDR_VAR 0 5
14643: PUSH
14644: LD_VAR 0 4
14648: PUSH
14649: FOR_IN
14650: IFFALSE 14692
// if GetTech ( i , side ) <> state then
14652: LD_VAR 0 5
14656: PPUSH
14657: LD_VAR 0 1
14661: PPUSH
14662: CALL_OW 321
14666: PUSH
14667: LD_VAR 0 3
14671: NONEQUAL
14672: IFFALSE 14690
// result := result diff i ;
14674: LD_ADDR_VAR 0 4
14678: PUSH
14679: LD_VAR 0 4
14683: PUSH
14684: LD_VAR 0 5
14688: DIFF
14689: ST_TO_ADDR
14690: GO 14649
14692: POP
14693: POP
// end ;
14694: LD_VAR 0 4
14698: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
14699: LD_INT 0
14701: PPUSH
14702: PPUSH
14703: PPUSH
// result := true ;
14704: LD_ADDR_VAR 0 3
14708: PUSH
14709: LD_INT 1
14711: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
14712: LD_ADDR_VAR 0 5
14716: PUSH
14717: LD_VAR 0 2
14721: PPUSH
14722: CALL_OW 480
14726: ST_TO_ADDR
// if not tmp then
14727: LD_VAR 0 5
14731: NOT
14732: IFFALSE 14736
// exit ;
14734: GO 14785
// for i in tmp do
14736: LD_ADDR_VAR 0 4
14740: PUSH
14741: LD_VAR 0 5
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14783
// if GetTech ( i , side ) <> state_researched then
14749: LD_VAR 0 4
14753: PPUSH
14754: LD_VAR 0 1
14758: PPUSH
14759: CALL_OW 321
14763: PUSH
14764: LD_INT 2
14766: NONEQUAL
14767: IFFALSE 14781
// begin result := false ;
14769: LD_ADDR_VAR 0 3
14773: PUSH
14774: LD_INT 0
14776: ST_TO_ADDR
// exit ;
14777: POP
14778: POP
14779: GO 14785
// end ;
14781: GO 14746
14783: POP
14784: POP
// end ;
14785: LD_VAR 0 3
14789: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
14790: LD_INT 0
14792: PPUSH
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
14797: PPUSH
14798: PPUSH
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
14805: LD_VAR 0 1
14809: NOT
14810: PUSH
14811: LD_VAR 0 1
14815: PPUSH
14816: CALL_OW 257
14820: PUSH
14821: LD_INT 9
14823: NONEQUAL
14824: OR
14825: IFFALSE 14829
// exit ;
14827: GO 15402
// side := GetSide ( unit ) ;
14829: LD_ADDR_VAR 0 9
14833: PUSH
14834: LD_VAR 0 1
14838: PPUSH
14839: CALL_OW 255
14843: ST_TO_ADDR
// tech_space := tech_spacanom ;
14844: LD_ADDR_VAR 0 12
14848: PUSH
14849: LD_INT 29
14851: ST_TO_ADDR
// tech_time := tech_taurad ;
14852: LD_ADDR_VAR 0 13
14856: PUSH
14857: LD_INT 28
14859: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
14860: LD_ADDR_VAR 0 11
14864: PUSH
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 310
14874: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
14875: LD_VAR 0 11
14879: PPUSH
14880: CALL_OW 247
14884: PUSH
14885: LD_INT 2
14887: EQUAL
14888: IFFALSE 14892
// exit ;
14890: GO 15402
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14892: LD_ADDR_VAR 0 8
14896: PUSH
14897: LD_INT 81
14899: PUSH
14900: LD_VAR 0 9
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 3
14911: PUSH
14912: LD_INT 21
14914: PUSH
14915: LD_INT 3
14917: PUSH
14918: EMPTY
14919: LIST
14920: LIST
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PPUSH
14930: CALL_OW 69
14934: ST_TO_ADDR
// if not tmp then
14935: LD_VAR 0 8
14939: NOT
14940: IFFALSE 14944
// exit ;
14942: GO 15402
// if in_unit then
14944: LD_VAR 0 11
14948: IFFALSE 14972
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
14950: LD_ADDR_VAR 0 10
14954: PUSH
14955: LD_VAR 0 8
14959: PPUSH
14960: LD_VAR 0 11
14964: PPUSH
14965: CALL_OW 74
14969: ST_TO_ADDR
14970: GO 14992
// enemy := NearestUnitToUnit ( tmp , unit ) ;
14972: LD_ADDR_VAR 0 10
14976: PUSH
14977: LD_VAR 0 8
14981: PPUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: CALL_OW 74
14991: ST_TO_ADDR
// if not enemy then
14992: LD_VAR 0 10
14996: NOT
14997: IFFALSE 15001
// exit ;
14999: GO 15402
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
15001: LD_VAR 0 11
15005: PUSH
15006: LD_VAR 0 11
15010: PPUSH
15011: LD_VAR 0 10
15015: PPUSH
15016: CALL_OW 296
15020: PUSH
15021: LD_INT 13
15023: GREATER
15024: AND
15025: PUSH
15026: LD_VAR 0 1
15030: PPUSH
15031: LD_VAR 0 10
15035: PPUSH
15036: CALL_OW 296
15040: PUSH
15041: LD_INT 12
15043: GREATER
15044: OR
15045: IFFALSE 15049
// exit ;
15047: GO 15402
// missile := [ 1 ] ;
15049: LD_ADDR_VAR 0 14
15053: PUSH
15054: LD_INT 1
15056: PUSH
15057: EMPTY
15058: LIST
15059: ST_TO_ADDR
// if Researched ( side , tech_space ) then
15060: LD_VAR 0 9
15064: PPUSH
15065: LD_VAR 0 12
15069: PPUSH
15070: CALL_OW 325
15074: IFFALSE 15103
// missile := Replace ( missile , missile + 1 , 2 ) ;
15076: LD_ADDR_VAR 0 14
15080: PUSH
15081: LD_VAR 0 14
15085: PPUSH
15086: LD_VAR 0 14
15090: PUSH
15091: LD_INT 1
15093: PLUS
15094: PPUSH
15095: LD_INT 2
15097: PPUSH
15098: CALL_OW 1
15102: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
15103: LD_VAR 0 9
15107: PPUSH
15108: LD_VAR 0 13
15112: PPUSH
15113: CALL_OW 325
15117: PUSH
15118: LD_VAR 0 10
15122: PPUSH
15123: CALL_OW 255
15127: PPUSH
15128: LD_VAR 0 13
15132: PPUSH
15133: CALL_OW 325
15137: NOT
15138: AND
15139: IFFALSE 15168
// missile := Replace ( missile , missile + 1 , 3 ) ;
15141: LD_ADDR_VAR 0 14
15145: PUSH
15146: LD_VAR 0 14
15150: PPUSH
15151: LD_VAR 0 14
15155: PUSH
15156: LD_INT 1
15158: PLUS
15159: PPUSH
15160: LD_INT 3
15162: PPUSH
15163: CALL_OW 1
15167: ST_TO_ADDR
// if missile < 2 then
15168: LD_VAR 0 14
15172: PUSH
15173: LD_INT 2
15175: LESS
15176: IFFALSE 15180
// exit ;
15178: GO 15402
// x := GetX ( enemy ) ;
15180: LD_ADDR_VAR 0 4
15184: PUSH
15185: LD_VAR 0 10
15189: PPUSH
15190: CALL_OW 250
15194: ST_TO_ADDR
// y := GetY ( enemy ) ;
15195: LD_ADDR_VAR 0 5
15199: PUSH
15200: LD_VAR 0 10
15204: PPUSH
15205: CALL_OW 251
15209: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
15210: LD_ADDR_VAR 0 6
15214: PUSH
15215: LD_VAR 0 4
15219: PUSH
15220: LD_INT 1
15222: NEG
15223: PPUSH
15224: LD_INT 1
15226: PPUSH
15227: CALL_OW 12
15231: PLUS
15232: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
15233: LD_ADDR_VAR 0 7
15237: PUSH
15238: LD_VAR 0 5
15242: PUSH
15243: LD_INT 1
15245: NEG
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 12
15254: PLUS
15255: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15256: LD_VAR 0 6
15260: PPUSH
15261: LD_VAR 0 7
15265: PPUSH
15266: CALL_OW 488
15270: NOT
15271: IFFALSE 15293
// begin _x := x ;
15273: LD_ADDR_VAR 0 6
15277: PUSH
15278: LD_VAR 0 4
15282: ST_TO_ADDR
// _y := y ;
15283: LD_ADDR_VAR 0 7
15287: PUSH
15288: LD_VAR 0 5
15292: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: LD_INT 1
15300: PPUSH
15301: LD_VAR 0 14
15305: PPUSH
15306: CALL_OW 12
15310: ST_TO_ADDR
// case i of 1 :
15311: LD_VAR 0 3
15315: PUSH
15316: LD_INT 1
15318: DOUBLE
15319: EQUAL
15320: IFTRUE 15324
15322: GO 15341
15324: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_VAR 0 10
15334: PPUSH
15335: CALL_OW 115
15339: GO 15402
15341: LD_INT 2
15343: DOUBLE
15344: EQUAL
15345: IFTRUE 15349
15347: GO 15371
15349: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
15350: LD_VAR 0 1
15354: PPUSH
15355: LD_VAR 0 6
15359: PPUSH
15360: LD_VAR 0 7
15364: PPUSH
15365: CALL_OW 153
15369: GO 15402
15371: LD_INT 3
15373: DOUBLE
15374: EQUAL
15375: IFTRUE 15379
15377: GO 15401
15379: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
15380: LD_VAR 0 1
15384: PPUSH
15385: LD_VAR 0 6
15389: PPUSH
15390: LD_VAR 0 7
15394: PPUSH
15395: CALL_OW 154
15399: GO 15402
15401: POP
// end ;
15402: LD_VAR 0 2
15406: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
15407: LD_INT 0
15409: PPUSH
15410: PPUSH
15411: PPUSH
15412: PPUSH
15413: PPUSH
15414: PPUSH
// if not unit or not building then
15415: LD_VAR 0 1
15419: NOT
15420: PUSH
15421: LD_VAR 0 2
15425: NOT
15426: OR
15427: IFFALSE 15431
// exit ;
15429: GO 15589
// x := GetX ( building ) ;
15431: LD_ADDR_VAR 0 5
15435: PUSH
15436: LD_VAR 0 2
15440: PPUSH
15441: CALL_OW 250
15445: ST_TO_ADDR
// y := GetY ( building ) ;
15446: LD_ADDR_VAR 0 6
15450: PUSH
15451: LD_VAR 0 2
15455: PPUSH
15456: CALL_OW 251
15460: ST_TO_ADDR
// for i = 0 to 5 do
15461: LD_ADDR_VAR 0 4
15465: PUSH
15466: DOUBLE
15467: LD_INT 0
15469: DEC
15470: ST_TO_ADDR
15471: LD_INT 5
15473: PUSH
15474: FOR_TO
15475: IFFALSE 15587
// begin _x := ShiftX ( x , i , 3 ) ;
15477: LD_ADDR_VAR 0 7
15481: PUSH
15482: LD_VAR 0 5
15486: PPUSH
15487: LD_VAR 0 4
15491: PPUSH
15492: LD_INT 3
15494: PPUSH
15495: CALL_OW 272
15499: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
15500: LD_ADDR_VAR 0 8
15504: PUSH
15505: LD_VAR 0 6
15509: PPUSH
15510: LD_VAR 0 4
15514: PPUSH
15515: LD_INT 3
15517: PPUSH
15518: CALL_OW 273
15522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
15523: LD_VAR 0 7
15527: PPUSH
15528: LD_VAR 0 8
15532: PPUSH
15533: CALL_OW 488
15537: NOT
15538: IFFALSE 15542
// continue ;
15540: GO 15474
// if HexInfo ( _x , _y ) = 0 then
15542: LD_VAR 0 7
15546: PPUSH
15547: LD_VAR 0 8
15551: PPUSH
15552: CALL_OW 428
15556: PUSH
15557: LD_INT 0
15559: EQUAL
15560: IFFALSE 15585
// begin ComMoveXY ( unit , _x , _y ) ;
15562: LD_VAR 0 1
15566: PPUSH
15567: LD_VAR 0 7
15571: PPUSH
15572: LD_VAR 0 8
15576: PPUSH
15577: CALL_OW 111
// exit ;
15581: POP
15582: POP
15583: GO 15589
// end ; end ;
15585: GO 15474
15587: POP
15588: POP
// end ;
15589: LD_VAR 0 3
15593: RET
// export function ScanBase ( side , base_area ) ; begin
15594: LD_INT 0
15596: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
15597: LD_ADDR_VAR 0 3
15601: PUSH
15602: LD_VAR 0 2
15606: PPUSH
15607: LD_INT 81
15609: PUSH
15610: LD_VAR 0 1
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PPUSH
15619: CALL_OW 70
15623: ST_TO_ADDR
// end ;
15624: LD_VAR 0 3
15628: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
15629: LD_INT 0
15631: PPUSH
15632: PPUSH
15633: PPUSH
15634: PPUSH
// result := false ;
15635: LD_ADDR_VAR 0 2
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// side := GetSide ( unit ) ;
15643: LD_ADDR_VAR 0 3
15647: PUSH
15648: LD_VAR 0 1
15652: PPUSH
15653: CALL_OW 255
15657: ST_TO_ADDR
// nat := GetNation ( unit ) ;
15658: LD_ADDR_VAR 0 4
15662: PUSH
15663: LD_VAR 0 1
15667: PPUSH
15668: CALL_OW 248
15672: ST_TO_ADDR
// case nat of 1 :
15673: LD_VAR 0 4
15677: PUSH
15678: LD_INT 1
15680: DOUBLE
15681: EQUAL
15682: IFTRUE 15686
15684: GO 15697
15686: POP
// tech := tech_lassight ; 2 :
15687: LD_ADDR_VAR 0 5
15691: PUSH
15692: LD_INT 12
15694: ST_TO_ADDR
15695: GO 15736
15697: LD_INT 2
15699: DOUBLE
15700: EQUAL
15701: IFTRUE 15705
15703: GO 15716
15705: POP
// tech := tech_mortar ; 3 :
15706: LD_ADDR_VAR 0 5
15710: PUSH
15711: LD_INT 41
15713: ST_TO_ADDR
15714: GO 15736
15716: LD_INT 3
15718: DOUBLE
15719: EQUAL
15720: IFTRUE 15724
15722: GO 15735
15724: POP
// tech := tech_bazooka ; end ;
15725: LD_ADDR_VAR 0 5
15729: PUSH
15730: LD_INT 44
15732: ST_TO_ADDR
15733: GO 15736
15735: POP
// if Researched ( side , tech ) then
15736: LD_VAR 0 3
15740: PPUSH
15741: LD_VAR 0 5
15745: PPUSH
15746: CALL_OW 325
15750: IFFALSE 15777
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
15752: LD_ADDR_VAR 0 2
15756: PUSH
15757: LD_INT 5
15759: PUSH
15760: LD_INT 8
15762: PUSH
15763: LD_INT 9
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: LIST
15770: PUSH
15771: LD_VAR 0 4
15775: ARRAY
15776: ST_TO_ADDR
// end ;
15777: LD_VAR 0 2
15781: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
15782: LD_INT 0
15784: PPUSH
15785: PPUSH
15786: PPUSH
// if not mines then
15787: LD_VAR 0 2
15791: NOT
15792: IFFALSE 15796
// exit ;
15794: GO 15940
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15796: LD_ADDR_VAR 0 5
15800: PUSH
15801: LD_INT 81
15803: PUSH
15804: LD_VAR 0 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 3
15815: PUSH
15816: LD_INT 21
15818: PUSH
15819: LD_INT 3
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PPUSH
15834: CALL_OW 69
15838: ST_TO_ADDR
// for i in mines do
15839: LD_ADDR_VAR 0 4
15843: PUSH
15844: LD_VAR 0 2
15848: PUSH
15849: FOR_IN
15850: IFFALSE 15938
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
15852: LD_VAR 0 4
15856: PUSH
15857: LD_INT 1
15859: ARRAY
15860: PPUSH
15861: LD_VAR 0 4
15865: PUSH
15866: LD_INT 2
15868: ARRAY
15869: PPUSH
15870: CALL_OW 458
15874: NOT
15875: IFFALSE 15879
// continue ;
15877: GO 15849
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
15879: LD_VAR 0 4
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: LD_VAR 0 4
15892: PUSH
15893: LD_INT 2
15895: ARRAY
15896: PPUSH
15897: CALL_OW 428
15901: PUSH
15902: LD_VAR 0 5
15906: IN
15907: IFFALSE 15936
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
15909: LD_VAR 0 4
15913: PUSH
15914: LD_INT 1
15916: ARRAY
15917: PPUSH
15918: LD_VAR 0 4
15922: PUSH
15923: LD_INT 2
15925: ARRAY
15926: PPUSH
15927: LD_VAR 0 1
15931: PPUSH
15932: CALL_OW 456
// end ;
15936: GO 15849
15938: POP
15939: POP
// end ;
15940: LD_VAR 0 3
15944: RET
// export function Count ( array ) ; begin
15945: LD_INT 0
15947: PPUSH
// result := array + 0 ;
15948: LD_ADDR_VAR 0 2
15952: PUSH
15953: LD_VAR 0 1
15957: PUSH
15958: LD_INT 0
15960: PLUS
15961: ST_TO_ADDR
// end ;
15962: LD_VAR 0 2
15966: RET
// export function IsEmpty ( building ) ; begin
15967: LD_INT 0
15969: PPUSH
// if not building then
15970: LD_VAR 0 1
15974: NOT
15975: IFFALSE 15979
// exit ;
15977: GO 16022
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: LD_VAR 0 1
15988: PUSH
15989: LD_INT 22
15991: PUSH
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 255
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PUSH
16006: LD_INT 58
16008: PUSH
16009: EMPTY
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: IN
16021: ST_TO_ADDR
// end ;
16022: LD_VAR 0 2
16026: RET
// export function IsNotFull ( building ) ; var places ; begin
16027: LD_INT 0
16029: PPUSH
16030: PPUSH
// if not building then
16031: LD_VAR 0 1
16035: NOT
16036: IFFALSE 16040
// exit ;
16038: GO 16068
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
16040: LD_ADDR_VAR 0 2
16044: PUSH
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_INT 3
16052: PUSH
16053: LD_INT 62
16055: PUSH
16056: EMPTY
16057: LIST
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PPUSH
16063: CALL_OW 72
16067: ST_TO_ADDR
// end ;
16068: LD_VAR 0 2
16072: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
16073: LD_INT 0
16075: PPUSH
16076: PPUSH
16077: PPUSH
16078: PPUSH
// tmp := [ ] ;
16079: LD_ADDR_VAR 0 3
16083: PUSH
16084: EMPTY
16085: ST_TO_ADDR
// list := [ ] ;
16086: LD_ADDR_VAR 0 5
16090: PUSH
16091: EMPTY
16092: ST_TO_ADDR
// for i = 16 to 25 do
16093: LD_ADDR_VAR 0 4
16097: PUSH
16098: DOUBLE
16099: LD_INT 16
16101: DEC
16102: ST_TO_ADDR
16103: LD_INT 25
16105: PUSH
16106: FOR_TO
16107: IFFALSE 16180
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
16109: LD_ADDR_VAR 0 3
16113: PUSH
16114: LD_VAR 0 3
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_VAR 0 1
16126: PPUSH
16127: CALL_OW 255
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: LD_INT 91
16138: PUSH
16139: LD_VAR 0 1
16143: PUSH
16144: LD_INT 6
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 30
16154: PUSH
16155: LD_VAR 0 4
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: PPUSH
16172: CALL_OW 69
16176: ADD
16177: ST_TO_ADDR
16178: GO 16106
16180: POP
16181: POP
// for i = 1 to tmp do
16182: LD_ADDR_VAR 0 4
16186: PUSH
16187: DOUBLE
16188: LD_INT 1
16190: DEC
16191: ST_TO_ADDR
16192: LD_VAR 0 3
16196: PUSH
16197: FOR_TO
16198: IFFALSE 16286
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
16200: LD_ADDR_VAR 0 5
16204: PUSH
16205: LD_VAR 0 5
16209: PUSH
16210: LD_VAR 0 3
16214: PUSH
16215: LD_VAR 0 4
16219: ARRAY
16220: PPUSH
16221: CALL_OW 266
16225: PUSH
16226: LD_VAR 0 3
16230: PUSH
16231: LD_VAR 0 4
16235: ARRAY
16236: PPUSH
16237: CALL_OW 250
16241: PUSH
16242: LD_VAR 0 3
16246: PUSH
16247: LD_VAR 0 4
16251: ARRAY
16252: PPUSH
16253: CALL_OW 251
16257: PUSH
16258: LD_VAR 0 3
16262: PUSH
16263: LD_VAR 0 4
16267: ARRAY
16268: PPUSH
16269: CALL_OW 254
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: PUSH
16280: EMPTY
16281: LIST
16282: ADD
16283: ST_TO_ADDR
16284: GO 16197
16286: POP
16287: POP
// result := list ;
16288: LD_ADDR_VAR 0 2
16292: PUSH
16293: LD_VAR 0 5
16297: ST_TO_ADDR
// end ;
16298: LD_VAR 0 2
16302: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
16303: LD_INT 0
16305: PPUSH
16306: PPUSH
16307: PPUSH
16308: PPUSH
16309: PPUSH
16310: PPUSH
16311: PPUSH
// if not factory then
16312: LD_VAR 0 1
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16914
// if control = control_apeman then
16321: LD_VAR 0 4
16325: PUSH
16326: LD_INT 5
16328: EQUAL
16329: IFFALSE 16438
// begin tmp := UnitsInside ( factory ) ;
16331: LD_ADDR_VAR 0 8
16335: PUSH
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 313
16345: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
16346: LD_VAR 0 8
16350: PPUSH
16351: LD_INT 25
16353: PUSH
16354: LD_INT 12
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 72
16365: NOT
16366: IFFALSE 16376
// control := control_manual ;
16368: LD_ADDR_VAR 0 4
16372: PUSH
16373: LD_INT 1
16375: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
16376: LD_ADDR_VAR 0 8
16380: PUSH
16381: LD_VAR 0 1
16385: PPUSH
16386: CALL 16073 0 1
16390: ST_TO_ADDR
// if tmp then
16391: LD_VAR 0 8
16395: IFFALSE 16438
// begin for i in tmp do
16397: LD_ADDR_VAR 0 7
16401: PUSH
16402: LD_VAR 0 8
16406: PUSH
16407: FOR_IN
16408: IFFALSE 16436
// if i [ 1 ] = b_ext_radio then
16410: LD_VAR 0 7
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PUSH
16419: LD_INT 22
16421: EQUAL
16422: IFFALSE 16434
// begin control := control_remote ;
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_INT 2
16431: ST_TO_ADDR
// break ;
16432: GO 16436
// end ;
16434: GO 16407
16436: POP
16437: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_VAR 0 2
16447: PPUSH
16448: LD_VAR 0 3
16452: PPUSH
16453: LD_VAR 0 4
16457: PPUSH
16458: LD_VAR 0 5
16462: PPUSH
16463: CALL_OW 448
16467: IFFALSE 16502
// begin result := [ chassis , engine , control , weapon ] ;
16469: LD_ADDR_VAR 0 6
16473: PUSH
16474: LD_VAR 0 2
16478: PUSH
16479: LD_VAR 0 3
16483: PUSH
16484: LD_VAR 0 4
16488: PUSH
16489: LD_VAR 0 5
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: ST_TO_ADDR
// exit ;
16500: GO 16914
// end ; _chassis := AvailableChassisList ( factory ) ;
16502: LD_ADDR_VAR 0 9
16506: PUSH
16507: LD_VAR 0 1
16511: PPUSH
16512: CALL_OW 475
16516: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
16517: LD_ADDR_VAR 0 11
16521: PUSH
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 476
16531: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
16532: LD_ADDR_VAR 0 12
16536: PUSH
16537: LD_VAR 0 1
16541: PPUSH
16542: CALL_OW 477
16546: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
16547: LD_ADDR_VAR 0 10
16551: PUSH
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 478
16561: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
16562: LD_VAR 0 9
16566: NOT
16567: PUSH
16568: LD_VAR 0 11
16572: NOT
16573: OR
16574: PUSH
16575: LD_VAR 0 12
16579: NOT
16580: OR
16581: PUSH
16582: LD_VAR 0 10
16586: NOT
16587: OR
16588: IFFALSE 16623
// begin result := [ chassis , engine , control , weapon ] ;
16590: LD_ADDR_VAR 0 6
16594: PUSH
16595: LD_VAR 0 2
16599: PUSH
16600: LD_VAR 0 3
16604: PUSH
16605: LD_VAR 0 4
16609: PUSH
16610: LD_VAR 0 5
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: ST_TO_ADDR
// exit ;
16621: GO 16914
// end ; if not chassis in _chassis then
16623: LD_VAR 0 2
16627: PUSH
16628: LD_VAR 0 9
16632: IN
16633: NOT
16634: IFFALSE 16660
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
16636: LD_ADDR_VAR 0 2
16640: PUSH
16641: LD_VAR 0 9
16645: PUSH
16646: LD_INT 1
16648: PPUSH
16649: LD_VAR 0 9
16653: PPUSH
16654: CALL_OW 12
16658: ARRAY
16659: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
16660: LD_VAR 0 2
16664: PPUSH
16665: LD_VAR 0 3
16669: PPUSH
16670: CALL 16919 0 2
16674: NOT
16675: IFFALSE 16734
// repeat engine := _engine [ 1 ] ;
16677: LD_ADDR_VAR 0 3
16681: PUSH
16682: LD_VAR 0 11
16686: PUSH
16687: LD_INT 1
16689: ARRAY
16690: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
16691: LD_ADDR_VAR 0 11
16695: PUSH
16696: LD_VAR 0 11
16700: PPUSH
16701: LD_INT 1
16703: PPUSH
16704: CALL_OW 3
16708: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
16709: LD_VAR 0 2
16713: PPUSH
16714: LD_VAR 0 3
16718: PPUSH
16719: CALL 16919 0 2
16723: PUSH
16724: LD_VAR 0 11
16728: PUSH
16729: EMPTY
16730: EQUAL
16731: OR
16732: IFFALSE 16677
// if not control in _control then
16734: LD_VAR 0 4
16738: PUSH
16739: LD_VAR 0 12
16743: IN
16744: NOT
16745: IFFALSE 16771
// control := _control [ rand ( 1 , _control ) ] ;
16747: LD_ADDR_VAR 0 4
16751: PUSH
16752: LD_VAR 0 12
16756: PUSH
16757: LD_INT 1
16759: PPUSH
16760: LD_VAR 0 12
16764: PPUSH
16765: CALL_OW 12
16769: ARRAY
16770: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
16771: LD_VAR 0 2
16775: PPUSH
16776: LD_VAR 0 5
16780: PPUSH
16781: CALL 17139 0 2
16785: NOT
16786: IFFALSE 16845
// repeat weapon := _weapon [ 1 ] ;
16788: LD_ADDR_VAR 0 5
16792: PUSH
16793: LD_VAR 0 10
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
16802: LD_ADDR_VAR 0 10
16806: PUSH
16807: LD_VAR 0 10
16811: PPUSH
16812: LD_INT 1
16814: PPUSH
16815: CALL_OW 3
16819: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
16820: LD_VAR 0 2
16824: PPUSH
16825: LD_VAR 0 5
16829: PPUSH
16830: CALL 17139 0 2
16834: PUSH
16835: LD_VAR 0 10
16839: PUSH
16840: EMPTY
16841: EQUAL
16842: OR
16843: IFFALSE 16788
// result := [ ] ;
16845: LD_ADDR_VAR 0 6
16849: PUSH
16850: EMPTY
16851: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
16852: LD_VAR 0 1
16856: PPUSH
16857: LD_VAR 0 2
16861: PPUSH
16862: LD_VAR 0 3
16866: PPUSH
16867: LD_VAR 0 4
16871: PPUSH
16872: LD_VAR 0 5
16876: PPUSH
16877: CALL_OW 448
16881: IFFALSE 16914
// result := [ chassis , engine , control , weapon ] ;
16883: LD_ADDR_VAR 0 6
16887: PUSH
16888: LD_VAR 0 2
16892: PUSH
16893: LD_VAR 0 3
16897: PUSH
16898: LD_VAR 0 4
16902: PUSH
16903: LD_VAR 0 5
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: ST_TO_ADDR
// end ;
16914: LD_VAR 0 6
16918: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
16919: LD_INT 0
16921: PPUSH
// if not chassis or not engine then
16922: LD_VAR 0 1
16926: NOT
16927: PUSH
16928: LD_VAR 0 2
16932: NOT
16933: OR
16934: IFFALSE 16938
// exit ;
16936: GO 17134
// case engine of engine_solar :
16938: LD_VAR 0 2
16942: PUSH
16943: LD_INT 2
16945: DOUBLE
16946: EQUAL
16947: IFTRUE 16951
16949: GO 16989
16951: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
16952: LD_ADDR_VAR 0 3
16956: PUSH
16957: LD_INT 11
16959: PUSH
16960: LD_INT 12
16962: PUSH
16963: LD_INT 13
16965: PUSH
16966: LD_INT 14
16968: PUSH
16969: LD_INT 1
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 3
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: ST_TO_ADDR
16987: GO 17118
16989: LD_INT 1
16991: DOUBLE
16992: EQUAL
16993: IFTRUE 16997
16995: GO 17059
16997: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
16998: LD_ADDR_VAR 0 3
17002: PUSH
17003: LD_INT 11
17005: PUSH
17006: LD_INT 12
17008: PUSH
17009: LD_INT 13
17011: PUSH
17012: LD_INT 14
17014: PUSH
17015: LD_INT 1
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 3
17023: PUSH
17024: LD_INT 4
17026: PUSH
17027: LD_INT 5
17029: PUSH
17030: LD_INT 21
17032: PUSH
17033: LD_INT 23
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_INT 24
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: ST_TO_ADDR
17057: GO 17118
17059: LD_INT 3
17061: DOUBLE
17062: EQUAL
17063: IFTRUE 17067
17065: GO 17117
17067: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
17068: LD_ADDR_VAR 0 3
17072: PUSH
17073: LD_INT 13
17075: PUSH
17076: LD_INT 14
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 3
17084: PUSH
17085: LD_INT 4
17087: PUSH
17088: LD_INT 5
17090: PUSH
17091: LD_INT 21
17093: PUSH
17094: LD_INT 22
17096: PUSH
17097: LD_INT 23
17099: PUSH
17100: LD_INT 24
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: ST_TO_ADDR
17115: GO 17118
17117: POP
// result := ( chassis in result ) ;
17118: LD_ADDR_VAR 0 3
17122: PUSH
17123: LD_VAR 0 1
17127: PUSH
17128: LD_VAR 0 3
17132: IN
17133: ST_TO_ADDR
// end ;
17134: LD_VAR 0 3
17138: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
17139: LD_INT 0
17141: PPUSH
// if not chassis or not weapon then
17142: LD_VAR 0 1
17146: NOT
17147: PUSH
17148: LD_VAR 0 2
17152: NOT
17153: OR
17154: IFFALSE 17158
// exit ;
17156: GO 18218
// case weapon of us_machine_gun :
17158: LD_VAR 0 2
17162: PUSH
17163: LD_INT 2
17165: DOUBLE
17166: EQUAL
17167: IFTRUE 17171
17169: GO 17201
17171: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
17172: LD_ADDR_VAR 0 3
17176: PUSH
17177: LD_INT 1
17179: PUSH
17180: LD_INT 2
17182: PUSH
17183: LD_INT 3
17185: PUSH
17186: LD_INT 4
17188: PUSH
17189: LD_INT 5
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: ST_TO_ADDR
17199: GO 18202
17201: LD_INT 3
17203: DOUBLE
17204: EQUAL
17205: IFTRUE 17209
17207: GO 17239
17209: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
17210: LD_ADDR_VAR 0 3
17214: PUSH
17215: LD_INT 1
17217: PUSH
17218: LD_INT 2
17220: PUSH
17221: LD_INT 3
17223: PUSH
17224: LD_INT 4
17226: PUSH
17227: LD_INT 5
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: ST_TO_ADDR
17237: GO 18202
17239: LD_INT 11
17241: DOUBLE
17242: EQUAL
17243: IFTRUE 17247
17245: GO 17277
17247: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
17248: LD_ADDR_VAR 0 3
17252: PUSH
17253: LD_INT 1
17255: PUSH
17256: LD_INT 2
17258: PUSH
17259: LD_INT 3
17261: PUSH
17262: LD_INT 4
17264: PUSH
17265: LD_INT 5
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: ST_TO_ADDR
17275: GO 18202
17277: LD_INT 4
17279: DOUBLE
17280: EQUAL
17281: IFTRUE 17285
17283: GO 17311
17285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
17286: LD_ADDR_VAR 0 3
17290: PUSH
17291: LD_INT 2
17293: PUSH
17294: LD_INT 3
17296: PUSH
17297: LD_INT 4
17299: PUSH
17300: LD_INT 5
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: ST_TO_ADDR
17309: GO 18202
17311: LD_INT 5
17313: DOUBLE
17314: EQUAL
17315: IFTRUE 17319
17317: GO 17345
17319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
17320: LD_ADDR_VAR 0 3
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 4
17333: PUSH
17334: LD_INT 5
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: ST_TO_ADDR
17343: GO 18202
17345: LD_INT 9
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17379
17353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
17354: LD_ADDR_VAR 0 3
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 3
17364: PUSH
17365: LD_INT 4
17367: PUSH
17368: LD_INT 5
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: ST_TO_ADDR
17377: GO 18202
17379: LD_INT 7
17381: DOUBLE
17382: EQUAL
17383: IFTRUE 17387
17385: GO 17413
17387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
17388: LD_ADDR_VAR 0 3
17392: PUSH
17393: LD_INT 2
17395: PUSH
17396: LD_INT 3
17398: PUSH
17399: LD_INT 4
17401: PUSH
17402: LD_INT 5
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: ST_TO_ADDR
17411: GO 18202
17413: LD_INT 12
17415: DOUBLE
17416: EQUAL
17417: IFTRUE 17421
17419: GO 17447
17421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
17422: LD_ADDR_VAR 0 3
17426: PUSH
17427: LD_INT 2
17429: PUSH
17430: LD_INT 3
17432: PUSH
17433: LD_INT 4
17435: PUSH
17436: LD_INT 5
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: ST_TO_ADDR
17445: GO 18202
17447: LD_INT 13
17449: DOUBLE
17450: EQUAL
17451: IFTRUE 17455
17453: GO 17481
17455: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
17456: LD_ADDR_VAR 0 3
17460: PUSH
17461: LD_INT 2
17463: PUSH
17464: LD_INT 3
17466: PUSH
17467: LD_INT 4
17469: PUSH
17470: LD_INT 5
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: ST_TO_ADDR
17479: GO 18202
17481: LD_INT 14
17483: DOUBLE
17484: EQUAL
17485: IFTRUE 17489
17487: GO 17507
17489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
17490: LD_ADDR_VAR 0 3
17494: PUSH
17495: LD_INT 4
17497: PUSH
17498: LD_INT 5
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: ST_TO_ADDR
17505: GO 18202
17507: LD_INT 6
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17515
17513: GO 17533
17515: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
17516: LD_ADDR_VAR 0 3
17520: PUSH
17521: LD_INT 4
17523: PUSH
17524: LD_INT 5
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: ST_TO_ADDR
17531: GO 18202
17533: LD_INT 10
17535: DOUBLE
17536: EQUAL
17537: IFTRUE 17541
17539: GO 17559
17541: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
17542: LD_ADDR_VAR 0 3
17546: PUSH
17547: LD_INT 4
17549: PUSH
17550: LD_INT 5
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: ST_TO_ADDR
17557: GO 18202
17559: LD_INT 22
17561: DOUBLE
17562: EQUAL
17563: IFTRUE 17567
17565: GO 17593
17567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_INT 11
17575: PUSH
17576: LD_INT 12
17578: PUSH
17579: LD_INT 13
17581: PUSH
17582: LD_INT 14
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: ST_TO_ADDR
17591: GO 18202
17593: LD_INT 23
17595: DOUBLE
17596: EQUAL
17597: IFTRUE 17601
17599: GO 17627
17601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
17602: LD_ADDR_VAR 0 3
17606: PUSH
17607: LD_INT 11
17609: PUSH
17610: LD_INT 12
17612: PUSH
17613: LD_INT 13
17615: PUSH
17616: LD_INT 14
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: ST_TO_ADDR
17625: GO 18202
17627: LD_INT 24
17629: DOUBLE
17630: EQUAL
17631: IFTRUE 17635
17633: GO 17661
17635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
17636: LD_ADDR_VAR 0 3
17640: PUSH
17641: LD_INT 11
17643: PUSH
17644: LD_INT 12
17646: PUSH
17647: LD_INT 13
17649: PUSH
17650: LD_INT 14
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: ST_TO_ADDR
17659: GO 18202
17661: LD_INT 30
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17695
17669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
17670: LD_ADDR_VAR 0 3
17674: PUSH
17675: LD_INT 11
17677: PUSH
17678: LD_INT 12
17680: PUSH
17681: LD_INT 13
17683: PUSH
17684: LD_INT 14
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: ST_TO_ADDR
17693: GO 18202
17695: LD_INT 25
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17721
17703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
17704: LD_ADDR_VAR 0 3
17708: PUSH
17709: LD_INT 13
17711: PUSH
17712: LD_INT 14
17714: PUSH
17715: EMPTY
17716: LIST
17717: LIST
17718: ST_TO_ADDR
17719: GO 18202
17721: LD_INT 27
17723: DOUBLE
17724: EQUAL
17725: IFTRUE 17729
17727: GO 17747
17729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
17730: LD_ADDR_VAR 0 3
17734: PUSH
17735: LD_INT 13
17737: PUSH
17738: LD_INT 14
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: ST_TO_ADDR
17745: GO 18202
17747: LD_INT 92
17749: DOUBLE
17750: EQUAL
17751: IFTRUE 17755
17753: GO 17781
17755: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
17756: LD_ADDR_VAR 0 3
17760: PUSH
17761: LD_INT 11
17763: PUSH
17764: LD_INT 12
17766: PUSH
17767: LD_INT 13
17769: PUSH
17770: LD_INT 14
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: ST_TO_ADDR
17779: GO 18202
17781: LD_INT 28
17783: DOUBLE
17784: EQUAL
17785: IFTRUE 17789
17787: GO 17807
17789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
17790: LD_ADDR_VAR 0 3
17794: PUSH
17795: LD_INT 13
17797: PUSH
17798: LD_INT 14
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: ST_TO_ADDR
17805: GO 18202
17807: LD_INT 29
17809: DOUBLE
17810: EQUAL
17811: IFTRUE 17815
17813: GO 17833
17815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
17816: LD_ADDR_VAR 0 3
17820: PUSH
17821: LD_INT 13
17823: PUSH
17824: LD_INT 14
17826: PUSH
17827: EMPTY
17828: LIST
17829: LIST
17830: ST_TO_ADDR
17831: GO 18202
17833: LD_INT 31
17835: DOUBLE
17836: EQUAL
17837: IFTRUE 17841
17839: GO 17859
17841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
17842: LD_ADDR_VAR 0 3
17846: PUSH
17847: LD_INT 13
17849: PUSH
17850: LD_INT 14
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: ST_TO_ADDR
17857: GO 18202
17859: LD_INT 26
17861: DOUBLE
17862: EQUAL
17863: IFTRUE 17867
17865: GO 17885
17867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
17868: LD_ADDR_VAR 0 3
17872: PUSH
17873: LD_INT 13
17875: PUSH
17876: LD_INT 14
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: ST_TO_ADDR
17883: GO 18202
17885: LD_INT 42
17887: DOUBLE
17888: EQUAL
17889: IFTRUE 17893
17891: GO 17919
17893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_INT 21
17901: PUSH
17902: LD_INT 22
17904: PUSH
17905: LD_INT 23
17907: PUSH
17908: LD_INT 24
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
17917: GO 18202
17919: LD_INT 43
17921: DOUBLE
17922: EQUAL
17923: IFTRUE 17927
17925: GO 17953
17927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
17928: LD_ADDR_VAR 0 3
17932: PUSH
17933: LD_INT 21
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_INT 23
17941: PUSH
17942: LD_INT 24
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: ST_TO_ADDR
17951: GO 18202
17953: LD_INT 44
17955: DOUBLE
17956: EQUAL
17957: IFTRUE 17961
17959: GO 17987
17961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
17962: LD_ADDR_VAR 0 3
17966: PUSH
17967: LD_INT 21
17969: PUSH
17970: LD_INT 22
17972: PUSH
17973: LD_INT 23
17975: PUSH
17976: LD_INT 24
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: ST_TO_ADDR
17985: GO 18202
17987: LD_INT 45
17989: DOUBLE
17990: EQUAL
17991: IFTRUE 17995
17993: GO 18021
17995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_INT 21
18003: PUSH
18004: LD_INT 22
18006: PUSH
18007: LD_INT 23
18009: PUSH
18010: LD_INT 24
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: ST_TO_ADDR
18019: GO 18202
18021: LD_INT 49
18023: DOUBLE
18024: EQUAL
18025: IFTRUE 18029
18027: GO 18055
18029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
18030: LD_ADDR_VAR 0 3
18034: PUSH
18035: LD_INT 21
18037: PUSH
18038: LD_INT 22
18040: PUSH
18041: LD_INT 23
18043: PUSH
18044: LD_INT 24
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: ST_TO_ADDR
18053: GO 18202
18055: LD_INT 51
18057: DOUBLE
18058: EQUAL
18059: IFTRUE 18063
18061: GO 18089
18063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
18064: LD_ADDR_VAR 0 3
18068: PUSH
18069: LD_INT 21
18071: PUSH
18072: LD_INT 22
18074: PUSH
18075: LD_INT 23
18077: PUSH
18078: LD_INT 24
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: ST_TO_ADDR
18087: GO 18202
18089: LD_INT 52
18091: DOUBLE
18092: EQUAL
18093: IFTRUE 18097
18095: GO 18123
18097: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
18098: LD_ADDR_VAR 0 3
18102: PUSH
18103: LD_INT 21
18105: PUSH
18106: LD_INT 22
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 24
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: ST_TO_ADDR
18121: GO 18202
18123: LD_INT 53
18125: DOUBLE
18126: EQUAL
18127: IFTRUE 18131
18129: GO 18149
18131: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
18132: LD_ADDR_VAR 0 3
18136: PUSH
18137: LD_INT 23
18139: PUSH
18140: LD_INT 24
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: ST_TO_ADDR
18147: GO 18202
18149: LD_INT 46
18151: DOUBLE
18152: EQUAL
18153: IFTRUE 18157
18155: GO 18175
18157: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_INT 23
18165: PUSH
18166: LD_INT 24
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: ST_TO_ADDR
18173: GO 18202
18175: LD_INT 47
18177: DOUBLE
18178: EQUAL
18179: IFTRUE 18183
18181: GO 18201
18183: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18184: LD_ADDR_VAR 0 3
18188: PUSH
18189: LD_INT 23
18191: PUSH
18192: LD_INT 24
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: ST_TO_ADDR
18199: GO 18202
18201: POP
// result := ( chassis in result ) ;
18202: LD_ADDR_VAR 0 3
18206: PUSH
18207: LD_VAR 0 1
18211: PUSH
18212: LD_VAR 0 3
18216: IN
18217: ST_TO_ADDR
// end ;
18218: LD_VAR 0 3
18222: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
18223: LD_INT 0
18225: PPUSH
18226: PPUSH
18227: PPUSH
18228: PPUSH
18229: PPUSH
18230: PPUSH
18231: PPUSH
// result := array ;
18232: LD_ADDR_VAR 0 5
18236: PUSH
18237: LD_VAR 0 1
18241: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
18242: LD_VAR 0 1
18246: NOT
18247: PUSH
18248: LD_VAR 0 2
18252: NOT
18253: OR
18254: PUSH
18255: LD_VAR 0 3
18259: NOT
18260: OR
18261: PUSH
18262: LD_VAR 0 2
18266: PUSH
18267: LD_VAR 0 1
18271: GREATER
18272: OR
18273: PUSH
18274: LD_VAR 0 3
18278: PUSH
18279: LD_VAR 0 1
18283: GREATER
18284: OR
18285: IFFALSE 18289
// exit ;
18287: GO 18585
// if direction then
18289: LD_VAR 0 4
18293: IFFALSE 18357
// begin d := 1 ;
18295: LD_ADDR_VAR 0 9
18299: PUSH
18300: LD_INT 1
18302: ST_TO_ADDR
// if i_from > i_to then
18303: LD_VAR 0 2
18307: PUSH
18308: LD_VAR 0 3
18312: GREATER
18313: IFFALSE 18339
// length := ( array - i_from ) + i_to else
18315: LD_ADDR_VAR 0 11
18319: PUSH
18320: LD_VAR 0 1
18324: PUSH
18325: LD_VAR 0 2
18329: MINUS
18330: PUSH
18331: LD_VAR 0 3
18335: PLUS
18336: ST_TO_ADDR
18337: GO 18355
// length := i_to - i_from ;
18339: LD_ADDR_VAR 0 11
18343: PUSH
18344: LD_VAR 0 3
18348: PUSH
18349: LD_VAR 0 2
18353: MINUS
18354: ST_TO_ADDR
// end else
18355: GO 18418
// begin d := - 1 ;
18357: LD_ADDR_VAR 0 9
18361: PUSH
18362: LD_INT 1
18364: NEG
18365: ST_TO_ADDR
// if i_from > i_to then
18366: LD_VAR 0 2
18370: PUSH
18371: LD_VAR 0 3
18375: GREATER
18376: IFFALSE 18396
// length := i_from - i_to else
18378: LD_ADDR_VAR 0 11
18382: PUSH
18383: LD_VAR 0 2
18387: PUSH
18388: LD_VAR 0 3
18392: MINUS
18393: ST_TO_ADDR
18394: GO 18418
// length := ( array - i_to ) + i_from ;
18396: LD_ADDR_VAR 0 11
18400: PUSH
18401: LD_VAR 0 1
18405: PUSH
18406: LD_VAR 0 3
18410: MINUS
18411: PUSH
18412: LD_VAR 0 2
18416: PLUS
18417: ST_TO_ADDR
// end ; if not length then
18418: LD_VAR 0 11
18422: NOT
18423: IFFALSE 18427
// exit ;
18425: GO 18585
// tmp := array ;
18427: LD_ADDR_VAR 0 10
18431: PUSH
18432: LD_VAR 0 1
18436: ST_TO_ADDR
// for i = 1 to length do
18437: LD_ADDR_VAR 0 6
18441: PUSH
18442: DOUBLE
18443: LD_INT 1
18445: DEC
18446: ST_TO_ADDR
18447: LD_VAR 0 11
18451: PUSH
18452: FOR_TO
18453: IFFALSE 18573
// begin for j = 1 to array do
18455: LD_ADDR_VAR 0 7
18459: PUSH
18460: DOUBLE
18461: LD_INT 1
18463: DEC
18464: ST_TO_ADDR
18465: LD_VAR 0 1
18469: PUSH
18470: FOR_TO
18471: IFFALSE 18559
// begin k := j + d ;
18473: LD_ADDR_VAR 0 8
18477: PUSH
18478: LD_VAR 0 7
18482: PUSH
18483: LD_VAR 0 9
18487: PLUS
18488: ST_TO_ADDR
// if k > array then
18489: LD_VAR 0 8
18493: PUSH
18494: LD_VAR 0 1
18498: GREATER
18499: IFFALSE 18509
// k := 1 ;
18501: LD_ADDR_VAR 0 8
18505: PUSH
18506: LD_INT 1
18508: ST_TO_ADDR
// if not k then
18509: LD_VAR 0 8
18513: NOT
18514: IFFALSE 18526
// k := array ;
18516: LD_ADDR_VAR 0 8
18520: PUSH
18521: LD_VAR 0 1
18525: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
18526: LD_ADDR_VAR 0 10
18530: PUSH
18531: LD_VAR 0 10
18535: PPUSH
18536: LD_VAR 0 8
18540: PPUSH
18541: LD_VAR 0 1
18545: PUSH
18546: LD_VAR 0 7
18550: ARRAY
18551: PPUSH
18552: CALL_OW 1
18556: ST_TO_ADDR
// end ;
18557: GO 18470
18559: POP
18560: POP
// array := tmp ;
18561: LD_ADDR_VAR 0 1
18565: PUSH
18566: LD_VAR 0 10
18570: ST_TO_ADDR
// end ;
18571: GO 18452
18573: POP
18574: POP
// result := array ;
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: LD_VAR 0 1
18584: ST_TO_ADDR
// end ;
18585: LD_VAR 0 5
18589: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
18590: LD_INT 0
18592: PPUSH
18593: PPUSH
// result := 0 ;
18594: LD_ADDR_VAR 0 3
18598: PUSH
18599: LD_INT 0
18601: ST_TO_ADDR
// if not array or not value in array then
18602: LD_VAR 0 1
18606: NOT
18607: PUSH
18608: LD_VAR 0 2
18612: PUSH
18613: LD_VAR 0 1
18617: IN
18618: NOT
18619: OR
18620: IFFALSE 18624
// exit ;
18622: GO 18678
// for i = 1 to array do
18624: LD_ADDR_VAR 0 4
18628: PUSH
18629: DOUBLE
18630: LD_INT 1
18632: DEC
18633: ST_TO_ADDR
18634: LD_VAR 0 1
18638: PUSH
18639: FOR_TO
18640: IFFALSE 18676
// if value = array [ i ] then
18642: LD_VAR 0 2
18646: PUSH
18647: LD_VAR 0 1
18651: PUSH
18652: LD_VAR 0 4
18656: ARRAY
18657: EQUAL
18658: IFFALSE 18674
// begin result := i ;
18660: LD_ADDR_VAR 0 3
18664: PUSH
18665: LD_VAR 0 4
18669: ST_TO_ADDR
// exit ;
18670: POP
18671: POP
18672: GO 18678
// end ;
18674: GO 18639
18676: POP
18677: POP
// end ;
18678: LD_VAR 0 3
18682: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
18683: LD_INT 0
18685: PPUSH
// vc_chassis := chassis ;
18686: LD_ADDR_OWVAR 37
18690: PUSH
18691: LD_VAR 0 1
18695: ST_TO_ADDR
// vc_engine := engine ;
18696: LD_ADDR_OWVAR 39
18700: PUSH
18701: LD_VAR 0 2
18705: ST_TO_ADDR
// vc_control := control ;
18706: LD_ADDR_OWVAR 38
18710: PUSH
18711: LD_VAR 0 3
18715: ST_TO_ADDR
// vc_weapon := weapon ;
18716: LD_ADDR_OWVAR 40
18720: PUSH
18721: LD_VAR 0 4
18725: ST_TO_ADDR
// vc_fuel_battery := fuel ;
18726: LD_ADDR_OWVAR 41
18730: PUSH
18731: LD_VAR 0 5
18735: ST_TO_ADDR
// end ;
18736: LD_VAR 0 6
18740: RET
// export function WantPlant ( unit ) ; var task ; begin
18741: LD_INT 0
18743: PPUSH
18744: PPUSH
// result := false ;
18745: LD_ADDR_VAR 0 2
18749: PUSH
18750: LD_INT 0
18752: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 437
18767: ST_TO_ADDR
// if task then
18768: LD_VAR 0 3
18772: IFFALSE 18800
// if task [ 1 ] [ 1 ] = p then
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 1
18781: ARRAY
18782: PUSH
18783: LD_INT 1
18785: ARRAY
18786: PUSH
18787: LD_STRING p
18789: EQUAL
18790: IFFALSE 18800
// result := true ;
18792: LD_ADDR_VAR 0 2
18796: PUSH
18797: LD_INT 1
18799: ST_TO_ADDR
// end ;
18800: LD_VAR 0 2
18804: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
18805: LD_INT 0
18807: PPUSH
18808: PPUSH
18809: PPUSH
18810: PPUSH
// if pos < 1 then
18811: LD_VAR 0 2
18815: PUSH
18816: LD_INT 1
18818: LESS
18819: IFFALSE 18823
// exit ;
18821: GO 19126
// if pos = 1 then
18823: LD_VAR 0 2
18827: PUSH
18828: LD_INT 1
18830: EQUAL
18831: IFFALSE 18864
// result := Replace ( arr , pos [ 1 ] , value ) else
18833: LD_ADDR_VAR 0 4
18837: PUSH
18838: LD_VAR 0 1
18842: PPUSH
18843: LD_VAR 0 2
18847: PUSH
18848: LD_INT 1
18850: ARRAY
18851: PPUSH
18852: LD_VAR 0 3
18856: PPUSH
18857: CALL_OW 1
18861: ST_TO_ADDR
18862: GO 19126
// begin tmp := arr ;
18864: LD_ADDR_VAR 0 6
18868: PUSH
18869: LD_VAR 0 1
18873: ST_TO_ADDR
// s_arr := [ tmp ] ;
18874: LD_ADDR_VAR 0 7
18878: PUSH
18879: LD_VAR 0 6
18883: PUSH
18884: EMPTY
18885: LIST
18886: ST_TO_ADDR
// for i = 1 to pos - 1 do
18887: LD_ADDR_VAR 0 5
18891: PUSH
18892: DOUBLE
18893: LD_INT 1
18895: DEC
18896: ST_TO_ADDR
18897: LD_VAR 0 2
18901: PUSH
18902: LD_INT 1
18904: MINUS
18905: PUSH
18906: FOR_TO
18907: IFFALSE 18952
// begin tmp := tmp [ pos [ i ] ] ;
18909: LD_ADDR_VAR 0 6
18913: PUSH
18914: LD_VAR 0 6
18918: PUSH
18919: LD_VAR 0 2
18923: PUSH
18924: LD_VAR 0 5
18928: ARRAY
18929: ARRAY
18930: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
18931: LD_ADDR_VAR 0 7
18935: PUSH
18936: LD_VAR 0 7
18940: PUSH
18941: LD_VAR 0 6
18945: PUSH
18946: EMPTY
18947: LIST
18948: ADD
18949: ST_TO_ADDR
// end ;
18950: GO 18906
18952: POP
18953: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
18954: LD_ADDR_VAR 0 6
18958: PUSH
18959: LD_VAR 0 6
18963: PPUSH
18964: LD_VAR 0 2
18968: PUSH
18969: LD_VAR 0 2
18973: ARRAY
18974: PPUSH
18975: LD_VAR 0 3
18979: PPUSH
18980: CALL_OW 1
18984: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
18985: LD_ADDR_VAR 0 7
18989: PUSH
18990: LD_VAR 0 7
18994: PPUSH
18995: LD_VAR 0 7
18999: PPUSH
19000: LD_VAR 0 6
19004: PPUSH
19005: CALL_OW 1
19009: ST_TO_ADDR
// for i = s_arr downto 2 do
19010: LD_ADDR_VAR 0 5
19014: PUSH
19015: DOUBLE
19016: LD_VAR 0 7
19020: INC
19021: ST_TO_ADDR
19022: LD_INT 2
19024: PUSH
19025: FOR_DOWNTO
19026: IFFALSE 19110
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
19028: LD_ADDR_VAR 0 6
19032: PUSH
19033: LD_VAR 0 7
19037: PUSH
19038: LD_VAR 0 5
19042: PUSH
19043: LD_INT 1
19045: MINUS
19046: ARRAY
19047: PPUSH
19048: LD_VAR 0 2
19052: PUSH
19053: LD_VAR 0 5
19057: PUSH
19058: LD_INT 1
19060: MINUS
19061: ARRAY
19062: PPUSH
19063: LD_VAR 0 7
19067: PUSH
19068: LD_VAR 0 5
19072: ARRAY
19073: PPUSH
19074: CALL_OW 1
19078: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
19079: LD_ADDR_VAR 0 7
19083: PUSH
19084: LD_VAR 0 7
19088: PPUSH
19089: LD_VAR 0 5
19093: PUSH
19094: LD_INT 1
19096: MINUS
19097: PPUSH
19098: LD_VAR 0 6
19102: PPUSH
19103: CALL_OW 1
19107: ST_TO_ADDR
// end ;
19108: GO 19025
19110: POP
19111: POP
// result := s_arr [ 1 ] ;
19112: LD_ADDR_VAR 0 4
19116: PUSH
19117: LD_VAR 0 7
19121: PUSH
19122: LD_INT 1
19124: ARRAY
19125: ST_TO_ADDR
// end ; end ;
19126: LD_VAR 0 4
19130: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
19131: LD_INT 0
19133: PPUSH
19134: PPUSH
// if not list then
19135: LD_VAR 0 1
19139: NOT
19140: IFFALSE 19144
// exit ;
19142: GO 19235
// i := list [ pos1 ] ;
19144: LD_ADDR_VAR 0 5
19148: PUSH
19149: LD_VAR 0 1
19153: PUSH
19154: LD_VAR 0 2
19158: ARRAY
19159: ST_TO_ADDR
// if not i then
19160: LD_VAR 0 5
19164: NOT
19165: IFFALSE 19169
// exit ;
19167: GO 19235
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
19169: LD_ADDR_VAR 0 1
19173: PUSH
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_VAR 0 2
19183: PPUSH
19184: LD_VAR 0 1
19188: PUSH
19189: LD_VAR 0 3
19193: ARRAY
19194: PPUSH
19195: CALL_OW 1
19199: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
19200: LD_ADDR_VAR 0 1
19204: PUSH
19205: LD_VAR 0 1
19209: PPUSH
19210: LD_VAR 0 3
19214: PPUSH
19215: LD_VAR 0 5
19219: PPUSH
19220: CALL_OW 1
19224: ST_TO_ADDR
// result := list ;
19225: LD_ADDR_VAR 0 4
19229: PUSH
19230: LD_VAR 0 1
19234: ST_TO_ADDR
// end ;
19235: LD_VAR 0 4
19239: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
19240: LD_INT 0
19242: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
19243: LD_ADDR_VAR 0 5
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 250
19257: PPUSH
19258: LD_VAR 0 1
19262: PPUSH
19263: CALL_OW 251
19267: PPUSH
19268: LD_VAR 0 2
19272: PPUSH
19273: LD_VAR 0 3
19277: PPUSH
19278: LD_VAR 0 4
19282: PPUSH
19283: CALL 19661 0 5
19287: ST_TO_ADDR
// end ;
19288: LD_VAR 0 5
19292: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
19293: LD_INT 0
19295: PPUSH
19296: PPUSH
19297: PPUSH
19298: PPUSH
// if not list or not unit then
19299: LD_VAR 0 2
19303: NOT
19304: PUSH
19305: LD_VAR 0 1
19309: NOT
19310: OR
19311: IFFALSE 19315
// exit ;
19313: GO 19656
// result := [ ] ;
19315: LD_ADDR_VAR 0 5
19319: PUSH
19320: EMPTY
19321: ST_TO_ADDR
// for i in list do
19322: LD_ADDR_VAR 0 6
19326: PUSH
19327: LD_VAR 0 2
19331: PUSH
19332: FOR_IN
19333: IFFALSE 19551
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
19335: LD_ADDR_VAR 0 8
19339: PUSH
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_VAR 0 6
19349: PUSH
19350: LD_INT 1
19352: ARRAY
19353: PPUSH
19354: LD_VAR 0 6
19358: PUSH
19359: LD_INT 2
19361: ARRAY
19362: PPUSH
19363: CALL_OW 297
19367: ST_TO_ADDR
// if not Count ( result ) then
19368: LD_VAR 0 5
19372: PPUSH
19373: CALL 15945 0 1
19377: NOT
19378: IFFALSE 19411
// begin result := Join ( result , [ i , tmp ] ) ;
19380: LD_ADDR_VAR 0 5
19384: PUSH
19385: LD_VAR 0 5
19389: PPUSH
19390: LD_VAR 0 6
19394: PUSH
19395: LD_VAR 0 8
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PPUSH
19404: CALL 51534 0 2
19408: ST_TO_ADDR
// continue ;
19409: GO 19332
// end ; if result [ result ] [ 2 ] <= tmp then
19411: LD_VAR 0 5
19415: PUSH
19416: LD_VAR 0 5
19420: ARRAY
19421: PUSH
19422: LD_INT 2
19424: ARRAY
19425: PUSH
19426: LD_VAR 0 8
19430: LESSEQUAL
19431: IFFALSE 19464
// result := Join ( result , [ i , tmp ] ) else
19433: LD_ADDR_VAR 0 5
19437: PUSH
19438: LD_VAR 0 5
19442: PPUSH
19443: LD_VAR 0 6
19447: PUSH
19448: LD_VAR 0 8
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL 51534 0 2
19461: ST_TO_ADDR
19462: GO 19549
// begin for j := 1 to Count ( result ) do
19464: LD_ADDR_VAR 0 7
19468: PUSH
19469: DOUBLE
19470: LD_INT 1
19472: DEC
19473: ST_TO_ADDR
19474: LD_VAR 0 5
19478: PPUSH
19479: CALL 15945 0 1
19483: PUSH
19484: FOR_TO
19485: IFFALSE 19547
// begin if tmp < result [ j ] [ 2 ] then
19487: LD_VAR 0 8
19491: PUSH
19492: LD_VAR 0 5
19496: PUSH
19497: LD_VAR 0 7
19501: ARRAY
19502: PUSH
19503: LD_INT 2
19505: ARRAY
19506: LESS
19507: IFFALSE 19545
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19509: LD_ADDR_VAR 0 5
19513: PUSH
19514: LD_VAR 0 5
19518: PPUSH
19519: LD_VAR 0 7
19523: PPUSH
19524: LD_VAR 0 6
19528: PUSH
19529: LD_VAR 0 8
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PPUSH
19538: CALL_OW 2
19542: ST_TO_ADDR
// break ;
19543: GO 19547
// end ; end ;
19545: GO 19484
19547: POP
19548: POP
// end ; end ;
19549: GO 19332
19551: POP
19552: POP
// if result and not asc then
19553: LD_VAR 0 5
19557: PUSH
19558: LD_VAR 0 3
19562: NOT
19563: AND
19564: IFFALSE 19581
// result := ReverseArray ( result ) ;
19566: LD_ADDR_VAR 0 5
19570: PUSH
19571: LD_VAR 0 5
19575: PPUSH
19576: CALL 46821 0 1
19580: ST_TO_ADDR
// tmp := [ ] ;
19581: LD_ADDR_VAR 0 8
19585: PUSH
19586: EMPTY
19587: ST_TO_ADDR
// if mode then
19588: LD_VAR 0 4
19592: IFFALSE 19656
// begin for i := 1 to result do
19594: LD_ADDR_VAR 0 6
19598: PUSH
19599: DOUBLE
19600: LD_INT 1
19602: DEC
19603: ST_TO_ADDR
19604: LD_VAR 0 5
19608: PUSH
19609: FOR_TO
19610: IFFALSE 19644
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
19612: LD_ADDR_VAR 0 8
19616: PUSH
19617: LD_VAR 0 8
19621: PPUSH
19622: LD_VAR 0 5
19626: PUSH
19627: LD_VAR 0 6
19631: ARRAY
19632: PUSH
19633: LD_INT 1
19635: ARRAY
19636: PPUSH
19637: CALL 51534 0 2
19641: ST_TO_ADDR
19642: GO 19609
19644: POP
19645: POP
// result := tmp ;
19646: LD_ADDR_VAR 0 5
19650: PUSH
19651: LD_VAR 0 8
19655: ST_TO_ADDR
// end ; end ;
19656: LD_VAR 0 5
19660: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
19661: LD_INT 0
19663: PPUSH
19664: PPUSH
19665: PPUSH
19666: PPUSH
// if not list then
19667: LD_VAR 0 3
19671: NOT
19672: IFFALSE 19676
// exit ;
19674: GO 20064
// result := [ ] ;
19676: LD_ADDR_VAR 0 6
19680: PUSH
19681: EMPTY
19682: ST_TO_ADDR
// for i in list do
19683: LD_ADDR_VAR 0 7
19687: PUSH
19688: LD_VAR 0 3
19692: PUSH
19693: FOR_IN
19694: IFFALSE 19896
// begin tmp := GetDistUnitXY ( i , x , y ) ;
19696: LD_ADDR_VAR 0 9
19700: PUSH
19701: LD_VAR 0 7
19705: PPUSH
19706: LD_VAR 0 1
19710: PPUSH
19711: LD_VAR 0 2
19715: PPUSH
19716: CALL_OW 297
19720: ST_TO_ADDR
// if not result then
19721: LD_VAR 0 6
19725: NOT
19726: IFFALSE 19752
// result := [ [ i , tmp ] ] else
19728: LD_ADDR_VAR 0 6
19732: PUSH
19733: LD_VAR 0 7
19737: PUSH
19738: LD_VAR 0 9
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: ST_TO_ADDR
19750: GO 19894
// begin if result [ result ] [ 2 ] < tmp then
19752: LD_VAR 0 6
19756: PUSH
19757: LD_VAR 0 6
19761: ARRAY
19762: PUSH
19763: LD_INT 2
19765: ARRAY
19766: PUSH
19767: LD_VAR 0 9
19771: LESS
19772: IFFALSE 19814
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
19774: LD_ADDR_VAR 0 6
19778: PUSH
19779: LD_VAR 0 6
19783: PPUSH
19784: LD_VAR 0 6
19788: PUSH
19789: LD_INT 1
19791: PLUS
19792: PPUSH
19793: LD_VAR 0 7
19797: PUSH
19798: LD_VAR 0 9
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 2
19811: ST_TO_ADDR
19812: GO 19894
// for j = 1 to result do
19814: LD_ADDR_VAR 0 8
19818: PUSH
19819: DOUBLE
19820: LD_INT 1
19822: DEC
19823: ST_TO_ADDR
19824: LD_VAR 0 6
19828: PUSH
19829: FOR_TO
19830: IFFALSE 19892
// begin if tmp < result [ j ] [ 2 ] then
19832: LD_VAR 0 9
19836: PUSH
19837: LD_VAR 0 6
19841: PUSH
19842: LD_VAR 0 8
19846: ARRAY
19847: PUSH
19848: LD_INT 2
19850: ARRAY
19851: LESS
19852: IFFALSE 19890
// begin result := Insert ( result , j , [ i , tmp ] ) ;
19854: LD_ADDR_VAR 0 6
19858: PUSH
19859: LD_VAR 0 6
19863: PPUSH
19864: LD_VAR 0 8
19868: PPUSH
19869: LD_VAR 0 7
19873: PUSH
19874: LD_VAR 0 9
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 2
19887: ST_TO_ADDR
// break ;
19888: GO 19892
// end ; end ;
19890: GO 19829
19892: POP
19893: POP
// end ; end ;
19894: GO 19693
19896: POP
19897: POP
// if result and not asc then
19898: LD_VAR 0 6
19902: PUSH
19903: LD_VAR 0 4
19907: NOT
19908: AND
19909: IFFALSE 19984
// begin tmp := result ;
19911: LD_ADDR_VAR 0 9
19915: PUSH
19916: LD_VAR 0 6
19920: ST_TO_ADDR
// for i = tmp downto 1 do
19921: LD_ADDR_VAR 0 7
19925: PUSH
19926: DOUBLE
19927: LD_VAR 0 9
19931: INC
19932: ST_TO_ADDR
19933: LD_INT 1
19935: PUSH
19936: FOR_DOWNTO
19937: IFFALSE 19982
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
19939: LD_ADDR_VAR 0 6
19943: PUSH
19944: LD_VAR 0 6
19948: PPUSH
19949: LD_VAR 0 9
19953: PUSH
19954: LD_VAR 0 7
19958: MINUS
19959: PUSH
19960: LD_INT 1
19962: PLUS
19963: PPUSH
19964: LD_VAR 0 9
19968: PUSH
19969: LD_VAR 0 7
19973: ARRAY
19974: PPUSH
19975: CALL_OW 1
19979: ST_TO_ADDR
19980: GO 19936
19982: POP
19983: POP
// end ; tmp := [ ] ;
19984: LD_ADDR_VAR 0 9
19988: PUSH
19989: EMPTY
19990: ST_TO_ADDR
// if mode then
19991: LD_VAR 0 5
19995: IFFALSE 20064
// begin for i = 1 to result do
19997: LD_ADDR_VAR 0 7
20001: PUSH
20002: DOUBLE
20003: LD_INT 1
20005: DEC
20006: ST_TO_ADDR
20007: LD_VAR 0 6
20011: PUSH
20012: FOR_TO
20013: IFFALSE 20052
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
20015: LD_ADDR_VAR 0 9
20019: PUSH
20020: LD_VAR 0 9
20024: PPUSH
20025: LD_VAR 0 7
20029: PPUSH
20030: LD_VAR 0 6
20034: PUSH
20035: LD_VAR 0 7
20039: ARRAY
20040: PUSH
20041: LD_INT 1
20043: ARRAY
20044: PPUSH
20045: CALL_OW 1
20049: ST_TO_ADDR
20050: GO 20012
20052: POP
20053: POP
// result := tmp ;
20054: LD_ADDR_VAR 0 6
20058: PUSH
20059: LD_VAR 0 9
20063: ST_TO_ADDR
// end ; end ;
20064: LD_VAR 0 6
20068: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
20069: LD_INT 0
20071: PPUSH
20072: PPUSH
20073: PPUSH
20074: PPUSH
20075: PPUSH
20076: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
20077: LD_ADDR_VAR 0 5
20081: PUSH
20082: LD_INT 0
20084: PUSH
20085: LD_INT 0
20087: PUSH
20088: LD_INT 0
20090: PUSH
20091: EMPTY
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: ST_TO_ADDR
// if not x or not y then
20099: LD_VAR 0 2
20103: NOT
20104: PUSH
20105: LD_VAR 0 3
20109: NOT
20110: OR
20111: IFFALSE 20115
// exit ;
20113: GO 21765
// if not range then
20115: LD_VAR 0 4
20119: NOT
20120: IFFALSE 20130
// range := 10 ;
20122: LD_ADDR_VAR 0 4
20126: PUSH
20127: LD_INT 10
20129: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20130: LD_ADDR_VAR 0 8
20134: PUSH
20135: LD_INT 81
20137: PUSH
20138: LD_VAR 0 1
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: LD_INT 92
20149: PUSH
20150: LD_VAR 0 2
20154: PUSH
20155: LD_VAR 0 3
20159: PUSH
20160: LD_VAR 0 4
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: PUSH
20171: LD_INT 3
20173: PUSH
20174: LD_INT 21
20176: PUSH
20177: LD_INT 3
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: EMPTY
20185: LIST
20186: LIST
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: PPUSH
20193: CALL_OW 69
20197: ST_TO_ADDR
// if not tmp then
20198: LD_VAR 0 8
20202: NOT
20203: IFFALSE 20207
// exit ;
20205: GO 21765
// for i in tmp do
20207: LD_ADDR_VAR 0 6
20211: PUSH
20212: LD_VAR 0 8
20216: PUSH
20217: FOR_IN
20218: IFFALSE 21740
// begin points := [ 0 , 0 , 0 ] ;
20220: LD_ADDR_VAR 0 9
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: LD_INT 0
20230: PUSH
20231: LD_INT 0
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: LIST
20238: ST_TO_ADDR
// bpoints := 1 ;
20239: LD_ADDR_VAR 0 10
20243: PUSH
20244: LD_INT 1
20246: ST_TO_ADDR
// case GetType ( i ) of unit_human :
20247: LD_VAR 0 6
20251: PPUSH
20252: CALL_OW 247
20256: PUSH
20257: LD_INT 1
20259: DOUBLE
20260: EQUAL
20261: IFTRUE 20265
20263: GO 20843
20265: POP
// begin if GetClass ( i ) = 1 then
20266: LD_VAR 0 6
20270: PPUSH
20271: CALL_OW 257
20275: PUSH
20276: LD_INT 1
20278: EQUAL
20279: IFFALSE 20300
// points := [ 10 , 5 , 3 ] ;
20281: LD_ADDR_VAR 0 9
20285: PUSH
20286: LD_INT 10
20288: PUSH
20289: LD_INT 5
20291: PUSH
20292: LD_INT 3
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: LIST
20299: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
20300: LD_VAR 0 6
20304: PPUSH
20305: CALL_OW 257
20309: PUSH
20310: LD_INT 2
20312: PUSH
20313: LD_INT 3
20315: PUSH
20316: LD_INT 4
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: IN
20324: IFFALSE 20345
// points := [ 3 , 2 , 1 ] ;
20326: LD_ADDR_VAR 0 9
20330: PUSH
20331: LD_INT 3
20333: PUSH
20334: LD_INT 2
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: ST_TO_ADDR
// if GetClass ( i ) = 5 then
20345: LD_VAR 0 6
20349: PPUSH
20350: CALL_OW 257
20354: PUSH
20355: LD_INT 5
20357: EQUAL
20358: IFFALSE 20379
// points := [ 130 , 5 , 2 ] ;
20360: LD_ADDR_VAR 0 9
20364: PUSH
20365: LD_INT 130
20367: PUSH
20368: LD_INT 5
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: ST_TO_ADDR
// if GetClass ( i ) = 8 then
20379: LD_VAR 0 6
20383: PPUSH
20384: CALL_OW 257
20388: PUSH
20389: LD_INT 8
20391: EQUAL
20392: IFFALSE 20413
// points := [ 35 , 35 , 30 ] ;
20394: LD_ADDR_VAR 0 9
20398: PUSH
20399: LD_INT 35
20401: PUSH
20402: LD_INT 35
20404: PUSH
20405: LD_INT 30
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: LIST
20412: ST_TO_ADDR
// if GetClass ( i ) = 9 then
20413: LD_VAR 0 6
20417: PPUSH
20418: CALL_OW 257
20422: PUSH
20423: LD_INT 9
20425: EQUAL
20426: IFFALSE 20447
// points := [ 20 , 55 , 40 ] ;
20428: LD_ADDR_VAR 0 9
20432: PUSH
20433: LD_INT 20
20435: PUSH
20436: LD_INT 55
20438: PUSH
20439: LD_INT 40
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: LIST
20446: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
20447: LD_VAR 0 6
20451: PPUSH
20452: CALL_OW 257
20456: PUSH
20457: LD_INT 12
20459: PUSH
20460: LD_INT 16
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: IN
20467: IFFALSE 20488
// points := [ 5 , 3 , 2 ] ;
20469: LD_ADDR_VAR 0 9
20473: PUSH
20474: LD_INT 5
20476: PUSH
20477: LD_INT 3
20479: PUSH
20480: LD_INT 2
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: LIST
20487: ST_TO_ADDR
// if GetClass ( i ) = 17 then
20488: LD_VAR 0 6
20492: PPUSH
20493: CALL_OW 257
20497: PUSH
20498: LD_INT 17
20500: EQUAL
20501: IFFALSE 20522
// points := [ 100 , 50 , 75 ] ;
20503: LD_ADDR_VAR 0 9
20507: PUSH
20508: LD_INT 100
20510: PUSH
20511: LD_INT 50
20513: PUSH
20514: LD_INT 75
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: ST_TO_ADDR
// if GetClass ( i ) = 15 then
20522: LD_VAR 0 6
20526: PPUSH
20527: CALL_OW 257
20531: PUSH
20532: LD_INT 15
20534: EQUAL
20535: IFFALSE 20556
// points := [ 10 , 5 , 3 ] ;
20537: LD_ADDR_VAR 0 9
20541: PUSH
20542: LD_INT 10
20544: PUSH
20545: LD_INT 5
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: LIST
20555: ST_TO_ADDR
// if GetClass ( i ) = 14 then
20556: LD_VAR 0 6
20560: PPUSH
20561: CALL_OW 257
20565: PUSH
20566: LD_INT 14
20568: EQUAL
20569: IFFALSE 20590
// points := [ 10 , 0 , 0 ] ;
20571: LD_ADDR_VAR 0 9
20575: PUSH
20576: LD_INT 10
20578: PUSH
20579: LD_INT 0
20581: PUSH
20582: LD_INT 0
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: ST_TO_ADDR
// if GetClass ( i ) = 11 then
20590: LD_VAR 0 6
20594: PPUSH
20595: CALL_OW 257
20599: PUSH
20600: LD_INT 11
20602: EQUAL
20603: IFFALSE 20624
// points := [ 30 , 10 , 5 ] ;
20605: LD_ADDR_VAR 0 9
20609: PUSH
20610: LD_INT 30
20612: PUSH
20613: LD_INT 10
20615: PUSH
20616: LD_INT 5
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
20624: LD_VAR 0 1
20628: PPUSH
20629: LD_INT 5
20631: PPUSH
20632: CALL_OW 321
20636: PUSH
20637: LD_INT 2
20639: EQUAL
20640: IFFALSE 20657
// bpoints := bpoints * 1.8 ;
20642: LD_ADDR_VAR 0 10
20646: PUSH
20647: LD_VAR 0 10
20651: PUSH
20652: LD_REAL  1.80000000000000E+0000
20655: MUL
20656: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
20657: LD_VAR 0 6
20661: PPUSH
20662: CALL_OW 257
20666: PUSH
20667: LD_INT 1
20669: PUSH
20670: LD_INT 2
20672: PUSH
20673: LD_INT 3
20675: PUSH
20676: LD_INT 4
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: IN
20685: PUSH
20686: LD_VAR 0 1
20690: PPUSH
20691: LD_INT 51
20693: PPUSH
20694: CALL_OW 321
20698: PUSH
20699: LD_INT 2
20701: EQUAL
20702: AND
20703: IFFALSE 20720
// bpoints := bpoints * 1.2 ;
20705: LD_ADDR_VAR 0 10
20709: PUSH
20710: LD_VAR 0 10
20714: PUSH
20715: LD_REAL  1.20000000000000E+0000
20718: MUL
20719: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
20720: LD_VAR 0 6
20724: PPUSH
20725: CALL_OW 257
20729: PUSH
20730: LD_INT 5
20732: PUSH
20733: LD_INT 7
20735: PUSH
20736: LD_INT 9
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: LIST
20743: IN
20744: PUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: LD_INT 52
20752: PPUSH
20753: CALL_OW 321
20757: PUSH
20758: LD_INT 2
20760: EQUAL
20761: AND
20762: IFFALSE 20779
// bpoints := bpoints * 1.5 ;
20764: LD_ADDR_VAR 0 10
20768: PUSH
20769: LD_VAR 0 10
20773: PUSH
20774: LD_REAL  1.50000000000000E+0000
20777: MUL
20778: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
20779: LD_VAR 0 1
20783: PPUSH
20784: LD_INT 66
20786: PPUSH
20787: CALL_OW 321
20791: PUSH
20792: LD_INT 2
20794: EQUAL
20795: IFFALSE 20812
// bpoints := bpoints * 1.1 ;
20797: LD_ADDR_VAR 0 10
20801: PUSH
20802: LD_VAR 0 10
20806: PUSH
20807: LD_REAL  1.10000000000000E+0000
20810: MUL
20811: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
20812: LD_ADDR_VAR 0 10
20816: PUSH
20817: LD_VAR 0 10
20821: PUSH
20822: LD_VAR 0 6
20826: PPUSH
20827: LD_INT 1
20829: PPUSH
20830: CALL_OW 259
20834: PUSH
20835: LD_REAL  1.15000000000000E+0000
20838: MUL
20839: MUL
20840: ST_TO_ADDR
// end ; unit_vehicle :
20841: GO 21669
20843: LD_INT 2
20845: DOUBLE
20846: EQUAL
20847: IFTRUE 20851
20849: GO 21657
20851: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
20852: LD_VAR 0 6
20856: PPUSH
20857: CALL_OW 264
20861: PUSH
20862: LD_INT 2
20864: PUSH
20865: LD_INT 42
20867: PUSH
20868: LD_INT 24
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: IN
20876: IFFALSE 20897
// points := [ 25 , 5 , 3 ] ;
20878: LD_ADDR_VAR 0 9
20882: PUSH
20883: LD_INT 25
20885: PUSH
20886: LD_INT 5
20888: PUSH
20889: LD_INT 3
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
20897: LD_VAR 0 6
20901: PPUSH
20902: CALL_OW 264
20906: PUSH
20907: LD_INT 4
20909: PUSH
20910: LD_INT 43
20912: PUSH
20913: LD_INT 25
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: IN
20921: IFFALSE 20942
// points := [ 40 , 15 , 5 ] ;
20923: LD_ADDR_VAR 0 9
20927: PUSH
20928: LD_INT 40
20930: PUSH
20931: LD_INT 15
20933: PUSH
20934: LD_INT 5
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
20942: LD_VAR 0 6
20946: PPUSH
20947: CALL_OW 264
20951: PUSH
20952: LD_INT 3
20954: PUSH
20955: LD_INT 23
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: IN
20962: IFFALSE 20983
// points := [ 7 , 25 , 8 ] ;
20964: LD_ADDR_VAR 0 9
20968: PUSH
20969: LD_INT 7
20971: PUSH
20972: LD_INT 25
20974: PUSH
20975: LD_INT 8
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: LIST
20982: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
20983: LD_VAR 0 6
20987: PPUSH
20988: CALL_OW 264
20992: PUSH
20993: LD_INT 5
20995: PUSH
20996: LD_INT 27
20998: PUSH
20999: LD_INT 44
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: IN
21007: IFFALSE 21028
// points := [ 14 , 50 , 16 ] ;
21009: LD_ADDR_VAR 0 9
21013: PUSH
21014: LD_INT 14
21016: PUSH
21017: LD_INT 50
21019: PUSH
21020: LD_INT 16
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: LIST
21027: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
21028: LD_VAR 0 6
21032: PPUSH
21033: CALL_OW 264
21037: PUSH
21038: LD_INT 6
21040: PUSH
21041: LD_INT 46
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: IN
21048: IFFALSE 21069
// points := [ 32 , 120 , 70 ] ;
21050: LD_ADDR_VAR 0 9
21054: PUSH
21055: LD_INT 32
21057: PUSH
21058: LD_INT 120
21060: PUSH
21061: LD_INT 70
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
21069: LD_VAR 0 6
21073: PPUSH
21074: CALL_OW 264
21078: PUSH
21079: LD_INT 7
21081: PUSH
21082: LD_INT 28
21084: PUSH
21085: LD_INT 45
21087: PUSH
21088: LD_INT 92
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: LIST
21095: LIST
21096: IN
21097: IFFALSE 21118
// points := [ 35 , 20 , 45 ] ;
21099: LD_ADDR_VAR 0 9
21103: PUSH
21104: LD_INT 35
21106: PUSH
21107: LD_INT 20
21109: PUSH
21110: LD_INT 45
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: LIST
21117: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
21118: LD_VAR 0 6
21122: PPUSH
21123: CALL_OW 264
21127: PUSH
21128: LD_INT 47
21130: PUSH
21131: EMPTY
21132: LIST
21133: IN
21134: IFFALSE 21155
// points := [ 67 , 45 , 75 ] ;
21136: LD_ADDR_VAR 0 9
21140: PUSH
21141: LD_INT 67
21143: PUSH
21144: LD_INT 45
21146: PUSH
21147: LD_INT 75
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
21155: LD_VAR 0 6
21159: PPUSH
21160: CALL_OW 264
21164: PUSH
21165: LD_INT 26
21167: PUSH
21168: EMPTY
21169: LIST
21170: IN
21171: IFFALSE 21192
// points := [ 120 , 30 , 80 ] ;
21173: LD_ADDR_VAR 0 9
21177: PUSH
21178: LD_INT 120
21180: PUSH
21181: LD_INT 30
21183: PUSH
21184: LD_INT 80
21186: PUSH
21187: EMPTY
21188: LIST
21189: LIST
21190: LIST
21191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
21192: LD_VAR 0 6
21196: PPUSH
21197: CALL_OW 264
21201: PUSH
21202: LD_INT 22
21204: PUSH
21205: EMPTY
21206: LIST
21207: IN
21208: IFFALSE 21229
// points := [ 40 , 1 , 1 ] ;
21210: LD_ADDR_VAR 0 9
21214: PUSH
21215: LD_INT 40
21217: PUSH
21218: LD_INT 1
21220: PUSH
21221: LD_INT 1
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
21229: LD_VAR 0 6
21233: PPUSH
21234: CALL_OW 264
21238: PUSH
21239: LD_INT 29
21241: PUSH
21242: EMPTY
21243: LIST
21244: IN
21245: IFFALSE 21266
// points := [ 70 , 200 , 400 ] ;
21247: LD_ADDR_VAR 0 9
21251: PUSH
21252: LD_INT 70
21254: PUSH
21255: LD_INT 200
21257: PUSH
21258: LD_INT 400
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: LIST
21265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
21266: LD_VAR 0 6
21270: PPUSH
21271: CALL_OW 264
21275: PUSH
21276: LD_INT 14
21278: PUSH
21279: LD_INT 53
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: IN
21286: IFFALSE 21307
// points := [ 40 , 10 , 20 ] ;
21288: LD_ADDR_VAR 0 9
21292: PUSH
21293: LD_INT 40
21295: PUSH
21296: LD_INT 10
21298: PUSH
21299: LD_INT 20
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
21307: LD_VAR 0 6
21311: PPUSH
21312: CALL_OW 264
21316: PUSH
21317: LD_INT 9
21319: PUSH
21320: EMPTY
21321: LIST
21322: IN
21323: IFFALSE 21344
// points := [ 5 , 70 , 20 ] ;
21325: LD_ADDR_VAR 0 9
21329: PUSH
21330: LD_INT 5
21332: PUSH
21333: LD_INT 70
21335: PUSH
21336: LD_INT 20
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: LIST
21343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
21344: LD_VAR 0 6
21348: PPUSH
21349: CALL_OW 264
21353: PUSH
21354: LD_INT 10
21356: PUSH
21357: EMPTY
21358: LIST
21359: IN
21360: IFFALSE 21381
// points := [ 35 , 110 , 70 ] ;
21362: LD_ADDR_VAR 0 9
21366: PUSH
21367: LD_INT 35
21369: PUSH
21370: LD_INT 110
21372: PUSH
21373: LD_INT 70
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: LIST
21380: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
21381: LD_VAR 0 6
21385: PPUSH
21386: CALL_OW 265
21390: PUSH
21391: LD_INT 25
21393: EQUAL
21394: IFFALSE 21415
// points := [ 80 , 65 , 100 ] ;
21396: LD_ADDR_VAR 0 9
21400: PUSH
21401: LD_INT 80
21403: PUSH
21404: LD_INT 65
21406: PUSH
21407: LD_INT 100
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
21415: LD_VAR 0 6
21419: PPUSH
21420: CALL_OW 263
21424: PUSH
21425: LD_INT 1
21427: EQUAL
21428: IFFALSE 21463
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
21430: LD_ADDR_VAR 0 10
21434: PUSH
21435: LD_VAR 0 10
21439: PUSH
21440: LD_VAR 0 6
21444: PPUSH
21445: CALL_OW 311
21449: PPUSH
21450: LD_INT 3
21452: PPUSH
21453: CALL_OW 259
21457: PUSH
21458: LD_INT 4
21460: MUL
21461: MUL
21462: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
21463: LD_VAR 0 6
21467: PPUSH
21468: CALL_OW 263
21472: PUSH
21473: LD_INT 2
21475: EQUAL
21476: IFFALSE 21527
// begin j := IsControledBy ( i ) ;
21478: LD_ADDR_VAR 0 7
21482: PUSH
21483: LD_VAR 0 6
21487: PPUSH
21488: CALL_OW 312
21492: ST_TO_ADDR
// if j then
21493: LD_VAR 0 7
21497: IFFALSE 21527
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
21499: LD_ADDR_VAR 0 10
21503: PUSH
21504: LD_VAR 0 10
21508: PUSH
21509: LD_VAR 0 7
21513: PPUSH
21514: LD_INT 3
21516: PPUSH
21517: CALL_OW 259
21521: PUSH
21522: LD_INT 3
21524: MUL
21525: MUL
21526: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
21527: LD_VAR 0 6
21531: PPUSH
21532: CALL_OW 264
21536: PUSH
21537: LD_INT 5
21539: PUSH
21540: LD_INT 6
21542: PUSH
21543: LD_INT 46
21545: PUSH
21546: LD_INT 44
21548: PUSH
21549: LD_INT 47
21551: PUSH
21552: LD_INT 45
21554: PUSH
21555: LD_INT 28
21557: PUSH
21558: LD_INT 7
21560: PUSH
21561: LD_INT 27
21563: PUSH
21564: LD_INT 29
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: IN
21579: PUSH
21580: LD_VAR 0 1
21584: PPUSH
21585: LD_INT 52
21587: PPUSH
21588: CALL_OW 321
21592: PUSH
21593: LD_INT 2
21595: EQUAL
21596: AND
21597: IFFALSE 21614
// bpoints := bpoints * 1.2 ;
21599: LD_ADDR_VAR 0 10
21603: PUSH
21604: LD_VAR 0 10
21608: PUSH
21609: LD_REAL  1.20000000000000E+0000
21612: MUL
21613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 264
21623: PUSH
21624: LD_INT 6
21626: PUSH
21627: LD_INT 46
21629: PUSH
21630: LD_INT 47
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: IN
21638: IFFALSE 21655
// bpoints := bpoints * 1.2 ;
21640: LD_ADDR_VAR 0 10
21644: PUSH
21645: LD_VAR 0 10
21649: PUSH
21650: LD_REAL  1.20000000000000E+0000
21653: MUL
21654: ST_TO_ADDR
// end ; unit_building :
21655: GO 21669
21657: LD_INT 3
21659: DOUBLE
21660: EQUAL
21661: IFTRUE 21665
21663: GO 21668
21665: POP
// ; end ;
21666: GO 21669
21668: POP
// for j = 1 to 3 do
21669: LD_ADDR_VAR 0 7
21673: PUSH
21674: DOUBLE
21675: LD_INT 1
21677: DEC
21678: ST_TO_ADDR
21679: LD_INT 3
21681: PUSH
21682: FOR_TO
21683: IFFALSE 21736
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
21685: LD_ADDR_VAR 0 5
21689: PUSH
21690: LD_VAR 0 5
21694: PPUSH
21695: LD_VAR 0 7
21699: PPUSH
21700: LD_VAR 0 5
21704: PUSH
21705: LD_VAR 0 7
21709: ARRAY
21710: PUSH
21711: LD_VAR 0 9
21715: PUSH
21716: LD_VAR 0 7
21720: ARRAY
21721: PUSH
21722: LD_VAR 0 10
21726: MUL
21727: PLUS
21728: PPUSH
21729: CALL_OW 1
21733: ST_TO_ADDR
21734: GO 21682
21736: POP
21737: POP
// end ;
21738: GO 20217
21740: POP
21741: POP
// result := Replace ( result , 4 , tmp ) ;
21742: LD_ADDR_VAR 0 5
21746: PUSH
21747: LD_VAR 0 5
21751: PPUSH
21752: LD_INT 4
21754: PPUSH
21755: LD_VAR 0 8
21759: PPUSH
21760: CALL_OW 1
21764: ST_TO_ADDR
// end ;
21765: LD_VAR 0 5
21769: RET
// export function DangerAtRange ( unit , range ) ; begin
21770: LD_INT 0
21772: PPUSH
// if not unit then
21773: LD_VAR 0 1
21777: NOT
21778: IFFALSE 21782
// exit ;
21780: GO 21827
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 255
21796: PPUSH
21797: LD_VAR 0 1
21801: PPUSH
21802: CALL_OW 250
21806: PPUSH
21807: LD_VAR 0 1
21811: PPUSH
21812: CALL_OW 251
21816: PPUSH
21817: LD_VAR 0 2
21821: PPUSH
21822: CALL 20069 0 4
21826: ST_TO_ADDR
// end ;
21827: LD_VAR 0 3
21831: RET
// export function DangerInArea ( side , area ) ; begin
21832: LD_INT 0
21834: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
21835: LD_ADDR_VAR 0 3
21839: PUSH
21840: LD_VAR 0 2
21844: PPUSH
21845: LD_INT 81
21847: PUSH
21848: LD_VAR 0 1
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: PPUSH
21857: CALL_OW 70
21861: ST_TO_ADDR
// end ;
21862: LD_VAR 0 3
21866: RET
// export function IsExtension ( b ) ; begin
21867: LD_INT 0
21869: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
21870: LD_ADDR_VAR 0 2
21874: PUSH
21875: LD_VAR 0 1
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 20
21885: PUSH
21886: LD_INT 22
21888: PUSH
21889: LD_INT 17
21891: PUSH
21892: LD_INT 24
21894: PUSH
21895: LD_INT 21
21897: PUSH
21898: LD_INT 19
21900: PUSH
21901: LD_INT 16
21903: PUSH
21904: LD_INT 25
21906: PUSH
21907: LD_INT 18
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: IN
21922: ST_TO_ADDR
// end ;
21923: LD_VAR 0 2
21927: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
21928: LD_INT 0
21930: PPUSH
21931: PPUSH
21932: PPUSH
// result := [ ] ;
21933: LD_ADDR_VAR 0 4
21937: PUSH
21938: EMPTY
21939: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
21940: LD_ADDR_VAR 0 5
21944: PUSH
21945: LD_VAR 0 2
21949: PPUSH
21950: LD_INT 21
21952: PUSH
21953: LD_INT 3
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PPUSH
21960: CALL_OW 70
21964: ST_TO_ADDR
// if not tmp then
21965: LD_VAR 0 5
21969: NOT
21970: IFFALSE 21974
// exit ;
21972: GO 22038
// if checkLink then
21974: LD_VAR 0 3
21978: IFFALSE 22028
// begin for i in tmp do
21980: LD_ADDR_VAR 0 6
21984: PUSH
21985: LD_VAR 0 5
21989: PUSH
21990: FOR_IN
21991: IFFALSE 22026
// if GetBase ( i ) <> base then
21993: LD_VAR 0 6
21997: PPUSH
21998: CALL_OW 274
22002: PUSH
22003: LD_VAR 0 1
22007: NONEQUAL
22008: IFFALSE 22024
// ComLinkToBase ( base , i ) ;
22010: LD_VAR 0 1
22014: PPUSH
22015: LD_VAR 0 6
22019: PPUSH
22020: CALL_OW 169
22024: GO 21990
22026: POP
22027: POP
// end ; result := tmp ;
22028: LD_ADDR_VAR 0 4
22032: PUSH
22033: LD_VAR 0 5
22037: ST_TO_ADDR
// end ;
22038: LD_VAR 0 4
22042: RET
// export function ComComplete ( units , b ) ; var i ; begin
22043: LD_INT 0
22045: PPUSH
22046: PPUSH
// if not units then
22047: LD_VAR 0 1
22051: NOT
22052: IFFALSE 22056
// exit ;
22054: GO 22146
// for i in units do
22056: LD_ADDR_VAR 0 4
22060: PUSH
22061: LD_VAR 0 1
22065: PUSH
22066: FOR_IN
22067: IFFALSE 22144
// if BuildingStatus ( b ) = bs_build then
22069: LD_VAR 0 2
22073: PPUSH
22074: CALL_OW 461
22078: PUSH
22079: LD_INT 1
22081: EQUAL
22082: IFFALSE 22142
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
22084: LD_VAR 0 4
22088: PPUSH
22089: LD_STRING h
22091: PUSH
22092: LD_VAR 0 2
22096: PPUSH
22097: CALL_OW 250
22101: PUSH
22102: LD_VAR 0 2
22106: PPUSH
22107: CALL_OW 251
22111: PUSH
22112: LD_VAR 0 2
22116: PUSH
22117: LD_INT 0
22119: PUSH
22120: LD_INT 0
22122: PUSH
22123: LD_INT 0
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: PPUSH
22138: CALL_OW 446
22142: GO 22066
22144: POP
22145: POP
// end ;
22146: LD_VAR 0 3
22150: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
22151: LD_INT 0
22153: PPUSH
22154: PPUSH
22155: PPUSH
22156: PPUSH
22157: PPUSH
22158: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
22159: LD_VAR 0 1
22163: NOT
22164: PUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 263
22174: PUSH
22175: LD_INT 2
22177: NONEQUAL
22178: OR
22179: IFFALSE 22183
// exit ;
22181: GO 22499
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
22183: LD_ADDR_VAR 0 6
22187: PUSH
22188: LD_INT 22
22190: PUSH
22191: LD_VAR 0 1
22195: PPUSH
22196: CALL_OW 255
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 2
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 36
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 34
22220: PUSH
22221: LD_INT 31
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: ST_TO_ADDR
// if not tmp then
22242: LD_VAR 0 6
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22499
// result := [ ] ;
22251: LD_ADDR_VAR 0 2
22255: PUSH
22256: EMPTY
22257: ST_TO_ADDR
// for i in tmp do
22258: LD_ADDR_VAR 0 3
22262: PUSH
22263: LD_VAR 0 6
22267: PUSH
22268: FOR_IN
22269: IFFALSE 22340
// begin t := UnitsInside ( i ) ;
22271: LD_ADDR_VAR 0 4
22275: PUSH
22276: LD_VAR 0 3
22280: PPUSH
22281: CALL_OW 313
22285: ST_TO_ADDR
// if t then
22286: LD_VAR 0 4
22290: IFFALSE 22338
// for j in t do
22292: LD_ADDR_VAR 0 7
22296: PUSH
22297: LD_VAR 0 4
22301: PUSH
22302: FOR_IN
22303: IFFALSE 22336
// result := Replace ( result , result + 1 , j ) ;
22305: LD_ADDR_VAR 0 2
22309: PUSH
22310: LD_VAR 0 2
22314: PPUSH
22315: LD_VAR 0 2
22319: PUSH
22320: LD_INT 1
22322: PLUS
22323: PPUSH
22324: LD_VAR 0 7
22328: PPUSH
22329: CALL_OW 1
22333: ST_TO_ADDR
22334: GO 22302
22336: POP
22337: POP
// end ;
22338: GO 22268
22340: POP
22341: POP
// if not result then
22342: LD_VAR 0 2
22346: NOT
22347: IFFALSE 22351
// exit ;
22349: GO 22499
// mech := result [ 1 ] ;
22351: LD_ADDR_VAR 0 5
22355: PUSH
22356: LD_VAR 0 2
22360: PUSH
22361: LD_INT 1
22363: ARRAY
22364: ST_TO_ADDR
// if result > 1 then
22365: LD_VAR 0 2
22369: PUSH
22370: LD_INT 1
22372: GREATER
22373: IFFALSE 22485
// begin for i = 2 to result do
22375: LD_ADDR_VAR 0 3
22379: PUSH
22380: DOUBLE
22381: LD_INT 2
22383: DEC
22384: ST_TO_ADDR
22385: LD_VAR 0 2
22389: PUSH
22390: FOR_TO
22391: IFFALSE 22483
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
22393: LD_ADDR_VAR 0 4
22397: PUSH
22398: LD_VAR 0 2
22402: PUSH
22403: LD_VAR 0 3
22407: ARRAY
22408: PPUSH
22409: LD_INT 3
22411: PPUSH
22412: CALL_OW 259
22416: PUSH
22417: LD_VAR 0 2
22421: PUSH
22422: LD_VAR 0 3
22426: ARRAY
22427: PPUSH
22428: CALL_OW 432
22432: MINUS
22433: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
22434: LD_VAR 0 4
22438: PUSH
22439: LD_VAR 0 5
22443: PPUSH
22444: LD_INT 3
22446: PPUSH
22447: CALL_OW 259
22451: PUSH
22452: LD_VAR 0 5
22456: PPUSH
22457: CALL_OW 432
22461: MINUS
22462: GREATEREQUAL
22463: IFFALSE 22481
// mech := result [ i ] ;
22465: LD_ADDR_VAR 0 5
22469: PUSH
22470: LD_VAR 0 2
22474: PUSH
22475: LD_VAR 0 3
22479: ARRAY
22480: ST_TO_ADDR
// end ;
22481: GO 22390
22483: POP
22484: POP
// end ; ComLinkTo ( vehicle , mech ) ;
22485: LD_VAR 0 1
22489: PPUSH
22490: LD_VAR 0 5
22494: PPUSH
22495: CALL_OW 135
// end ;
22499: LD_VAR 0 2
22503: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
22504: LD_INT 0
22506: PPUSH
22507: PPUSH
22508: PPUSH
22509: PPUSH
22510: PPUSH
22511: PPUSH
22512: PPUSH
22513: PPUSH
22514: PPUSH
22515: PPUSH
22516: PPUSH
22517: PPUSH
22518: PPUSH
// result := [ ] ;
22519: LD_ADDR_VAR 0 7
22523: PUSH
22524: EMPTY
22525: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
22526: LD_VAR 0 1
22530: PPUSH
22531: CALL_OW 266
22535: PUSH
22536: LD_INT 0
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: IN
22546: NOT
22547: IFFALSE 22551
// exit ;
22549: GO 24185
// if name then
22551: LD_VAR 0 3
22555: IFFALSE 22571
// SetBName ( base_dep , name ) ;
22557: LD_VAR 0 1
22561: PPUSH
22562: LD_VAR 0 3
22566: PPUSH
22567: CALL_OW 500
// base := GetBase ( base_dep ) ;
22571: LD_ADDR_VAR 0 15
22575: PUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: CALL_OW 274
22585: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
22586: LD_ADDR_VAR 0 16
22590: PUSH
22591: LD_VAR 0 1
22595: PPUSH
22596: CALL_OW 255
22600: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
22601: LD_ADDR_VAR 0 17
22605: PUSH
22606: LD_VAR 0 1
22610: PPUSH
22611: CALL_OW 248
22615: ST_TO_ADDR
// if sources then
22616: LD_VAR 0 5
22620: IFFALSE 22667
// for i = 1 to 3 do
22622: LD_ADDR_VAR 0 8
22626: PUSH
22627: DOUBLE
22628: LD_INT 1
22630: DEC
22631: ST_TO_ADDR
22632: LD_INT 3
22634: PUSH
22635: FOR_TO
22636: IFFALSE 22665
// AddResourceType ( base , i , sources [ i ] ) ;
22638: LD_VAR 0 15
22642: PPUSH
22643: LD_VAR 0 8
22647: PPUSH
22648: LD_VAR 0 5
22652: PUSH
22653: LD_VAR 0 8
22657: ARRAY
22658: PPUSH
22659: CALL_OW 276
22663: GO 22635
22665: POP
22666: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
22667: LD_ADDR_VAR 0 18
22671: PUSH
22672: LD_VAR 0 15
22676: PPUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_INT 1
22684: PPUSH
22685: CALL 21928 0 3
22689: ST_TO_ADDR
// InitHc ;
22690: CALL_OW 19
// InitUc ;
22694: CALL_OW 18
// uc_side := side ;
22698: LD_ADDR_OWVAR 20
22702: PUSH
22703: LD_VAR 0 16
22707: ST_TO_ADDR
// uc_nation := nation ;
22708: LD_ADDR_OWVAR 21
22712: PUSH
22713: LD_VAR 0 17
22717: ST_TO_ADDR
// if buildings then
22718: LD_VAR 0 18
22722: IFFALSE 24044
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
22724: LD_ADDR_VAR 0 19
22728: PUSH
22729: LD_VAR 0 18
22733: PPUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 30
22739: PUSH
22740: LD_INT 29
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 30
22749: PUSH
22750: LD_INT 30
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: PPUSH
22762: CALL_OW 72
22766: ST_TO_ADDR
// if tmp then
22767: LD_VAR 0 19
22771: IFFALSE 22819
// for i in tmp do
22773: LD_ADDR_VAR 0 8
22777: PUSH
22778: LD_VAR 0 19
22782: PUSH
22783: FOR_IN
22784: IFFALSE 22817
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
22786: LD_VAR 0 8
22790: PPUSH
22791: CALL_OW 250
22795: PPUSH
22796: LD_VAR 0 8
22800: PPUSH
22801: CALL_OW 251
22805: PPUSH
22806: LD_VAR 0 16
22810: PPUSH
22811: CALL_OW 441
22815: GO 22783
22817: POP
22818: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
22819: LD_VAR 0 18
22823: PPUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 30
22829: PUSH
22830: LD_INT 32
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 30
22839: PUSH
22840: LD_INT 33
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: PPUSH
22852: CALL_OW 72
22856: IFFALSE 22944
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
22858: LD_ADDR_VAR 0 8
22862: PUSH
22863: LD_VAR 0 18
22867: PPUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 32
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 33
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 72
22900: PUSH
22901: FOR_IN
22902: IFFALSE 22942
// begin if not GetBWeapon ( i ) then
22904: LD_VAR 0 8
22908: PPUSH
22909: CALL_OW 269
22913: NOT
22914: IFFALSE 22940
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
22916: LD_VAR 0 8
22920: PPUSH
22921: LD_VAR 0 8
22925: PPUSH
22926: LD_VAR 0 2
22930: PPUSH
22931: CALL 24190 0 2
22935: PPUSH
22936: CALL_OW 431
// end ;
22940: GO 22901
22942: POP
22943: POP
// end ; for i = 1 to personel do
22944: LD_ADDR_VAR 0 8
22948: PUSH
22949: DOUBLE
22950: LD_INT 1
22952: DEC
22953: ST_TO_ADDR
22954: LD_VAR 0 6
22958: PUSH
22959: FOR_TO
22960: IFFALSE 24024
// begin if i > 4 then
22962: LD_VAR 0 8
22966: PUSH
22967: LD_INT 4
22969: GREATER
22970: IFFALSE 22974
// break ;
22972: GO 24024
// case i of 1 :
22974: LD_VAR 0 8
22978: PUSH
22979: LD_INT 1
22981: DOUBLE
22982: EQUAL
22983: IFTRUE 22987
22985: GO 23067
22987: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
22988: LD_ADDR_VAR 0 12
22992: PUSH
22993: LD_VAR 0 18
22997: PPUSH
22998: LD_INT 22
23000: PUSH
23001: LD_VAR 0 16
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 58
23012: PUSH
23013: EMPTY
23014: LIST
23015: PUSH
23016: LD_INT 2
23018: PUSH
23019: LD_INT 30
23021: PUSH
23022: LD_INT 32
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 30
23031: PUSH
23032: LD_INT 4
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 30
23041: PUSH
23042: LD_INT 5
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: PPUSH
23060: CALL_OW 72
23064: ST_TO_ADDR
23065: GO 23289
23067: LD_INT 2
23069: DOUBLE
23070: EQUAL
23071: IFTRUE 23075
23073: GO 23137
23075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
23076: LD_ADDR_VAR 0 12
23080: PUSH
23081: LD_VAR 0 18
23085: PPUSH
23086: LD_INT 22
23088: PUSH
23089: LD_VAR 0 16
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: LD_INT 30
23103: PUSH
23104: LD_INT 0
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: LD_INT 1
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PPUSH
23130: CALL_OW 72
23134: ST_TO_ADDR
23135: GO 23289
23137: LD_INT 3
23139: DOUBLE
23140: EQUAL
23141: IFTRUE 23145
23143: GO 23207
23145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
23146: LD_ADDR_VAR 0 12
23150: PUSH
23151: LD_VAR 0 18
23155: PPUSH
23156: LD_INT 22
23158: PUSH
23159: LD_VAR 0 16
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 2
23170: PUSH
23171: LD_INT 30
23173: PUSH
23174: LD_INT 2
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: PUSH
23181: LD_INT 30
23183: PUSH
23184: LD_INT 3
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 72
23204: ST_TO_ADDR
23205: GO 23289
23207: LD_INT 4
23209: DOUBLE
23210: EQUAL
23211: IFTRUE 23215
23213: GO 23288
23215: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
23216: LD_ADDR_VAR 0 12
23220: PUSH
23221: LD_VAR 0 18
23225: PPUSH
23226: LD_INT 22
23228: PUSH
23229: LD_VAR 0 16
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: LD_INT 30
23243: PUSH
23244: LD_INT 6
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 7
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 8
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PPUSH
23281: CALL_OW 72
23285: ST_TO_ADDR
23286: GO 23289
23288: POP
// if i = 1 then
23289: LD_VAR 0 8
23293: PUSH
23294: LD_INT 1
23296: EQUAL
23297: IFFALSE 23408
// begin tmp := [ ] ;
23299: LD_ADDR_VAR 0 19
23303: PUSH
23304: EMPTY
23305: ST_TO_ADDR
// for j in f do
23306: LD_ADDR_VAR 0 9
23310: PUSH
23311: LD_VAR 0 12
23315: PUSH
23316: FOR_IN
23317: IFFALSE 23390
// if GetBType ( j ) = b_bunker then
23319: LD_VAR 0 9
23323: PPUSH
23324: CALL_OW 266
23328: PUSH
23329: LD_INT 32
23331: EQUAL
23332: IFFALSE 23359
// tmp := Insert ( tmp , 1 , j ) else
23334: LD_ADDR_VAR 0 19
23338: PUSH
23339: LD_VAR 0 19
23343: PPUSH
23344: LD_INT 1
23346: PPUSH
23347: LD_VAR 0 9
23351: PPUSH
23352: CALL_OW 2
23356: ST_TO_ADDR
23357: GO 23388
// tmp := Insert ( tmp , tmp + 1 , j ) ;
23359: LD_ADDR_VAR 0 19
23363: PUSH
23364: LD_VAR 0 19
23368: PPUSH
23369: LD_VAR 0 19
23373: PUSH
23374: LD_INT 1
23376: PLUS
23377: PPUSH
23378: LD_VAR 0 9
23382: PPUSH
23383: CALL_OW 2
23387: ST_TO_ADDR
23388: GO 23316
23390: POP
23391: POP
// if tmp then
23392: LD_VAR 0 19
23396: IFFALSE 23408
// f := tmp ;
23398: LD_ADDR_VAR 0 12
23402: PUSH
23403: LD_VAR 0 19
23407: ST_TO_ADDR
// end ; x := personel [ i ] ;
23408: LD_ADDR_VAR 0 13
23412: PUSH
23413: LD_VAR 0 6
23417: PUSH
23418: LD_VAR 0 8
23422: ARRAY
23423: ST_TO_ADDR
// if x = - 1 then
23424: LD_VAR 0 13
23428: PUSH
23429: LD_INT 1
23431: NEG
23432: EQUAL
23433: IFFALSE 23642
// begin for j in f do
23435: LD_ADDR_VAR 0 9
23439: PUSH
23440: LD_VAR 0 12
23444: PUSH
23445: FOR_IN
23446: IFFALSE 23638
// repeat InitHc ;
23448: CALL_OW 19
// if GetBType ( j ) = b_barracks then
23452: LD_VAR 0 9
23456: PPUSH
23457: CALL_OW 266
23461: PUSH
23462: LD_INT 5
23464: EQUAL
23465: IFFALSE 23535
// begin if UnitsInside ( j ) < 3 then
23467: LD_VAR 0 9
23471: PPUSH
23472: CALL_OW 313
23476: PUSH
23477: LD_INT 3
23479: LESS
23480: IFFALSE 23516
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23482: LD_INT 0
23484: PPUSH
23485: LD_INT 5
23487: PUSH
23488: LD_INT 8
23490: PUSH
23491: LD_INT 9
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: PUSH
23499: LD_VAR 0 17
23503: ARRAY
23504: PPUSH
23505: LD_VAR 0 4
23509: PPUSH
23510: CALL_OW 380
23514: GO 23533
// PrepareHuman ( false , i , skill ) ;
23516: LD_INT 0
23518: PPUSH
23519: LD_VAR 0 8
23523: PPUSH
23524: LD_VAR 0 4
23528: PPUSH
23529: CALL_OW 380
// end else
23533: GO 23552
// PrepareHuman ( false , i , skill ) ;
23535: LD_INT 0
23537: PPUSH
23538: LD_VAR 0 8
23542: PPUSH
23543: LD_VAR 0 4
23547: PPUSH
23548: CALL_OW 380
// un := CreateHuman ;
23552: LD_ADDR_VAR 0 14
23556: PUSH
23557: CALL_OW 44
23561: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23562: LD_ADDR_VAR 0 7
23566: PUSH
23567: LD_VAR 0 7
23571: PPUSH
23572: LD_INT 1
23574: PPUSH
23575: LD_VAR 0 14
23579: PPUSH
23580: CALL_OW 2
23584: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
23585: LD_VAR 0 14
23589: PPUSH
23590: LD_VAR 0 9
23594: PPUSH
23595: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
23599: LD_VAR 0 9
23603: PPUSH
23604: CALL_OW 313
23608: PUSH
23609: LD_INT 6
23611: EQUAL
23612: PUSH
23613: LD_VAR 0 9
23617: PPUSH
23618: CALL_OW 266
23622: PUSH
23623: LD_INT 32
23625: PUSH
23626: LD_INT 31
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: IN
23633: OR
23634: IFFALSE 23448
23636: GO 23445
23638: POP
23639: POP
// end else
23640: GO 24022
// for j = 1 to x do
23642: LD_ADDR_VAR 0 9
23646: PUSH
23647: DOUBLE
23648: LD_INT 1
23650: DEC
23651: ST_TO_ADDR
23652: LD_VAR 0 13
23656: PUSH
23657: FOR_TO
23658: IFFALSE 24020
// begin InitHc ;
23660: CALL_OW 19
// if not f then
23664: LD_VAR 0 12
23668: NOT
23669: IFFALSE 23758
// begin PrepareHuman ( false , i , skill ) ;
23671: LD_INT 0
23673: PPUSH
23674: LD_VAR 0 8
23678: PPUSH
23679: LD_VAR 0 4
23683: PPUSH
23684: CALL_OW 380
// un := CreateHuman ;
23688: LD_ADDR_VAR 0 14
23692: PUSH
23693: CALL_OW 44
23697: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23698: LD_ADDR_VAR 0 7
23702: PUSH
23703: LD_VAR 0 7
23707: PPUSH
23708: LD_INT 1
23710: PPUSH
23711: LD_VAR 0 14
23715: PPUSH
23716: CALL_OW 2
23720: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
23721: LD_VAR 0 14
23725: PPUSH
23726: LD_VAR 0 1
23730: PPUSH
23731: CALL_OW 250
23735: PPUSH
23736: LD_VAR 0 1
23740: PPUSH
23741: CALL_OW 251
23745: PPUSH
23746: LD_INT 10
23748: PPUSH
23749: LD_INT 0
23751: PPUSH
23752: CALL_OW 50
// continue ;
23756: GO 23657
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
23758: LD_VAR 0 12
23762: PUSH
23763: LD_INT 1
23765: ARRAY
23766: PPUSH
23767: CALL_OW 313
23771: PUSH
23772: LD_VAR 0 12
23776: PUSH
23777: LD_INT 1
23779: ARRAY
23780: PPUSH
23781: CALL_OW 266
23785: PUSH
23786: LD_INT 32
23788: PUSH
23789: LD_INT 31
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: IN
23796: AND
23797: PUSH
23798: LD_VAR 0 12
23802: PUSH
23803: LD_INT 1
23805: ARRAY
23806: PPUSH
23807: CALL_OW 313
23811: PUSH
23812: LD_INT 6
23814: EQUAL
23815: OR
23816: IFFALSE 23836
// f := Delete ( f , 1 ) ;
23818: LD_ADDR_VAR 0 12
23822: PUSH
23823: LD_VAR 0 12
23827: PPUSH
23828: LD_INT 1
23830: PPUSH
23831: CALL_OW 3
23835: ST_TO_ADDR
// if not f then
23836: LD_VAR 0 12
23840: NOT
23841: IFFALSE 23859
// begin x := x + 2 ;
23843: LD_ADDR_VAR 0 13
23847: PUSH
23848: LD_VAR 0 13
23852: PUSH
23853: LD_INT 2
23855: PLUS
23856: ST_TO_ADDR
// continue ;
23857: GO 23657
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
23859: LD_VAR 0 12
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PPUSH
23868: CALL_OW 266
23872: PUSH
23873: LD_INT 5
23875: EQUAL
23876: IFFALSE 23950
// begin if UnitsInside ( f [ 1 ] ) < 3 then
23878: LD_VAR 0 12
23882: PUSH
23883: LD_INT 1
23885: ARRAY
23886: PPUSH
23887: CALL_OW 313
23891: PUSH
23892: LD_INT 3
23894: LESS
23895: IFFALSE 23931
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
23897: LD_INT 0
23899: PPUSH
23900: LD_INT 5
23902: PUSH
23903: LD_INT 8
23905: PUSH
23906: LD_INT 9
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: LIST
23913: PUSH
23914: LD_VAR 0 17
23918: ARRAY
23919: PPUSH
23920: LD_VAR 0 4
23924: PPUSH
23925: CALL_OW 380
23929: GO 23948
// PrepareHuman ( false , i , skill ) ;
23931: LD_INT 0
23933: PPUSH
23934: LD_VAR 0 8
23938: PPUSH
23939: LD_VAR 0 4
23943: PPUSH
23944: CALL_OW 380
// end else
23948: GO 23967
// PrepareHuman ( false , i , skill ) ;
23950: LD_INT 0
23952: PPUSH
23953: LD_VAR 0 8
23957: PPUSH
23958: LD_VAR 0 4
23962: PPUSH
23963: CALL_OW 380
// un := CreateHuman ;
23967: LD_ADDR_VAR 0 14
23971: PUSH
23972: CALL_OW 44
23976: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
23977: LD_ADDR_VAR 0 7
23981: PUSH
23982: LD_VAR 0 7
23986: PPUSH
23987: LD_INT 1
23989: PPUSH
23990: LD_VAR 0 14
23994: PPUSH
23995: CALL_OW 2
23999: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
24000: LD_VAR 0 14
24004: PPUSH
24005: LD_VAR 0 12
24009: PUSH
24010: LD_INT 1
24012: ARRAY
24013: PPUSH
24014: CALL_OW 52
// end ;
24018: GO 23657
24020: POP
24021: POP
// end ;
24022: GO 22959
24024: POP
24025: POP
// result := result ^ buildings ;
24026: LD_ADDR_VAR 0 7
24030: PUSH
24031: LD_VAR 0 7
24035: PUSH
24036: LD_VAR 0 18
24040: ADD
24041: ST_TO_ADDR
// end else
24042: GO 24185
// begin for i = 1 to personel do
24044: LD_ADDR_VAR 0 8
24048: PUSH
24049: DOUBLE
24050: LD_INT 1
24052: DEC
24053: ST_TO_ADDR
24054: LD_VAR 0 6
24058: PUSH
24059: FOR_TO
24060: IFFALSE 24183
// begin if i > 4 then
24062: LD_VAR 0 8
24066: PUSH
24067: LD_INT 4
24069: GREATER
24070: IFFALSE 24074
// break ;
24072: GO 24183
// x := personel [ i ] ;
24074: LD_ADDR_VAR 0 13
24078: PUSH
24079: LD_VAR 0 6
24083: PUSH
24084: LD_VAR 0 8
24088: ARRAY
24089: ST_TO_ADDR
// if x = - 1 then
24090: LD_VAR 0 13
24094: PUSH
24095: LD_INT 1
24097: NEG
24098: EQUAL
24099: IFFALSE 24103
// continue ;
24101: GO 24059
// PrepareHuman ( false , i , skill ) ;
24103: LD_INT 0
24105: PPUSH
24106: LD_VAR 0 8
24110: PPUSH
24111: LD_VAR 0 4
24115: PPUSH
24116: CALL_OW 380
// un := CreateHuman ;
24120: LD_ADDR_VAR 0 14
24124: PUSH
24125: CALL_OW 44
24129: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24130: LD_VAR 0 14
24134: PPUSH
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 250
24144: PPUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 251
24154: PPUSH
24155: LD_INT 10
24157: PPUSH
24158: LD_INT 0
24160: PPUSH
24161: CALL_OW 50
// result := result ^ un ;
24165: LD_ADDR_VAR 0 7
24169: PUSH
24170: LD_VAR 0 7
24174: PUSH
24175: LD_VAR 0 14
24179: ADD
24180: ST_TO_ADDR
// end ;
24181: GO 24059
24183: POP
24184: POP
// end ; end ;
24185: LD_VAR 0 7
24189: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
24190: LD_INT 0
24192: PPUSH
24193: PPUSH
24194: PPUSH
24195: PPUSH
24196: PPUSH
24197: PPUSH
24198: PPUSH
24199: PPUSH
24200: PPUSH
24201: PPUSH
24202: PPUSH
24203: PPUSH
24204: PPUSH
24205: PPUSH
24206: PPUSH
24207: PPUSH
// result := false ;
24208: LD_ADDR_VAR 0 3
24212: PUSH
24213: LD_INT 0
24215: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
24216: LD_VAR 0 1
24220: NOT
24221: PUSH
24222: LD_VAR 0 1
24226: PPUSH
24227: CALL_OW 266
24231: PUSH
24232: LD_INT 32
24234: PUSH
24235: LD_INT 33
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: IN
24242: NOT
24243: OR
24244: IFFALSE 24248
// exit ;
24246: GO 25357
// nat := GetNation ( tower ) ;
24248: LD_ADDR_VAR 0 12
24252: PUSH
24253: LD_VAR 0 1
24257: PPUSH
24258: CALL_OW 248
24262: ST_TO_ADDR
// side := GetSide ( tower ) ;
24263: LD_ADDR_VAR 0 16
24267: PUSH
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 255
24277: ST_TO_ADDR
// x := GetX ( tower ) ;
24278: LD_ADDR_VAR 0 10
24282: PUSH
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 250
24292: ST_TO_ADDR
// y := GetY ( tower ) ;
24293: LD_ADDR_VAR 0 11
24297: PUSH
24298: LD_VAR 0 1
24302: PPUSH
24303: CALL_OW 251
24307: ST_TO_ADDR
// if not x or not y then
24308: LD_VAR 0 10
24312: NOT
24313: PUSH
24314: LD_VAR 0 11
24318: NOT
24319: OR
24320: IFFALSE 24324
// exit ;
24322: GO 25357
// weapon := 0 ;
24324: LD_ADDR_VAR 0 18
24328: PUSH
24329: LD_INT 0
24331: ST_TO_ADDR
// fac_list := [ ] ;
24332: LD_ADDR_VAR 0 17
24336: PUSH
24337: EMPTY
24338: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
24339: LD_ADDR_VAR 0 6
24343: PUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 274
24353: PPUSH
24354: LD_VAR 0 2
24358: PPUSH
24359: LD_INT 0
24361: PPUSH
24362: CALL 21928 0 3
24366: PPUSH
24367: LD_INT 30
24369: PUSH
24370: LD_INT 3
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PPUSH
24377: CALL_OW 72
24381: ST_TO_ADDR
// if not factories then
24382: LD_VAR 0 6
24386: NOT
24387: IFFALSE 24391
// exit ;
24389: GO 25357
// for i in factories do
24391: LD_ADDR_VAR 0 8
24395: PUSH
24396: LD_VAR 0 6
24400: PUSH
24401: FOR_IN
24402: IFFALSE 24427
// fac_list := fac_list union AvailableWeaponList ( i ) ;
24404: LD_ADDR_VAR 0 17
24408: PUSH
24409: LD_VAR 0 17
24413: PUSH
24414: LD_VAR 0 8
24418: PPUSH
24419: CALL_OW 478
24423: UNION
24424: ST_TO_ADDR
24425: GO 24401
24427: POP
24428: POP
// if not fac_list then
24429: LD_VAR 0 17
24433: NOT
24434: IFFALSE 24438
// exit ;
24436: GO 25357
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
24438: LD_ADDR_VAR 0 5
24442: PUSH
24443: LD_INT 4
24445: PUSH
24446: LD_INT 5
24448: PUSH
24449: LD_INT 9
24451: PUSH
24452: LD_INT 10
24454: PUSH
24455: LD_INT 6
24457: PUSH
24458: LD_INT 7
24460: PUSH
24461: LD_INT 11
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: LD_INT 27
24475: PUSH
24476: LD_INT 28
24478: PUSH
24479: LD_INT 26
24481: PUSH
24482: LD_INT 30
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: LD_INT 43
24493: PUSH
24494: LD_INT 44
24496: PUSH
24497: LD_INT 46
24499: PUSH
24500: LD_INT 45
24502: PUSH
24503: LD_INT 47
24505: PUSH
24506: LD_INT 49
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: PUSH
24522: LD_VAR 0 12
24526: ARRAY
24527: ST_TO_ADDR
// list := list isect fac_list ;
24528: LD_ADDR_VAR 0 5
24532: PUSH
24533: LD_VAR 0 5
24537: PUSH
24538: LD_VAR 0 17
24542: ISECT
24543: ST_TO_ADDR
// if not list then
24544: LD_VAR 0 5
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 25357
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
24553: LD_VAR 0 12
24557: PUSH
24558: LD_INT 3
24560: EQUAL
24561: PUSH
24562: LD_INT 49
24564: PUSH
24565: LD_VAR 0 5
24569: IN
24570: AND
24571: PUSH
24572: LD_INT 31
24574: PPUSH
24575: LD_VAR 0 16
24579: PPUSH
24580: CALL_OW 321
24584: PUSH
24585: LD_INT 2
24587: EQUAL
24588: AND
24589: IFFALSE 24649
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
24591: LD_INT 22
24593: PUSH
24594: LD_VAR 0 16
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 35
24605: PUSH
24606: LD_INT 49
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 91
24615: PUSH
24616: LD_VAR 0 1
24620: PUSH
24621: LD_INT 10
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: PPUSH
24634: CALL_OW 69
24638: NOT
24639: IFFALSE 24649
// weapon := ru_time_lapser ;
24641: LD_ADDR_VAR 0 18
24645: PUSH
24646: LD_INT 49
24648: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
24649: LD_VAR 0 12
24653: PUSH
24654: LD_INT 1
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: IN
24664: PUSH
24665: LD_INT 11
24667: PUSH
24668: LD_VAR 0 5
24672: IN
24673: PUSH
24674: LD_INT 30
24676: PUSH
24677: LD_VAR 0 5
24681: IN
24682: OR
24683: AND
24684: PUSH
24685: LD_INT 6
24687: PPUSH
24688: LD_VAR 0 16
24692: PPUSH
24693: CALL_OW 321
24697: PUSH
24698: LD_INT 2
24700: EQUAL
24701: AND
24702: IFFALSE 24867
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
24704: LD_INT 22
24706: PUSH
24707: LD_VAR 0 16
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PUSH
24716: LD_INT 2
24718: PUSH
24719: LD_INT 35
24721: PUSH
24722: LD_INT 11
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: PUSH
24729: LD_INT 35
24731: PUSH
24732: LD_INT 30
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: EMPTY
24740: LIST
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 91
24746: PUSH
24747: LD_VAR 0 1
24751: PUSH
24752: LD_INT 18
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: LIST
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: LIST
24764: PPUSH
24765: CALL_OW 69
24769: NOT
24770: PUSH
24771: LD_INT 22
24773: PUSH
24774: LD_VAR 0 16
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 2
24785: PUSH
24786: LD_INT 30
24788: PUSH
24789: LD_INT 32
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 30
24798: PUSH
24799: LD_INT 33
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 91
24813: PUSH
24814: LD_VAR 0 1
24818: PUSH
24819: LD_INT 12
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: PUSH
24840: LD_INT 2
24842: GREATER
24843: AND
24844: IFFALSE 24867
// weapon := [ us_radar , ar_radar ] [ nat ] ;
24846: LD_ADDR_VAR 0 18
24850: PUSH
24851: LD_INT 11
24853: PUSH
24854: LD_INT 30
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_VAR 0 12
24865: ARRAY
24866: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
24867: LD_VAR 0 18
24871: NOT
24872: PUSH
24873: LD_INT 40
24875: PPUSH
24876: LD_VAR 0 16
24880: PPUSH
24881: CALL_OW 321
24885: PUSH
24886: LD_INT 2
24888: EQUAL
24889: AND
24890: PUSH
24891: LD_INT 7
24893: PUSH
24894: LD_VAR 0 5
24898: IN
24899: PUSH
24900: LD_INT 28
24902: PUSH
24903: LD_VAR 0 5
24907: IN
24908: OR
24909: PUSH
24910: LD_INT 45
24912: PUSH
24913: LD_VAR 0 5
24917: IN
24918: OR
24919: AND
24920: IFFALSE 25174
// begin hex := GetHexInfo ( x , y ) ;
24922: LD_ADDR_VAR 0 4
24926: PUSH
24927: LD_VAR 0 10
24931: PPUSH
24932: LD_VAR 0 11
24936: PPUSH
24937: CALL_OW 546
24941: ST_TO_ADDR
// if hex [ 1 ] then
24942: LD_VAR 0 4
24946: PUSH
24947: LD_INT 1
24949: ARRAY
24950: IFFALSE 24954
// exit ;
24952: GO 25357
// height := hex [ 2 ] ;
24954: LD_ADDR_VAR 0 15
24958: PUSH
24959: LD_VAR 0 4
24963: PUSH
24964: LD_INT 2
24966: ARRAY
24967: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
24968: LD_ADDR_VAR 0 14
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: LD_INT 5
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: ST_TO_ADDR
// for i in tmp do
24991: LD_ADDR_VAR 0 8
24995: PUSH
24996: LD_VAR 0 14
25000: PUSH
25001: FOR_IN
25002: IFFALSE 25172
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
25004: LD_ADDR_VAR 0 9
25008: PUSH
25009: LD_VAR 0 10
25013: PPUSH
25014: LD_VAR 0 8
25018: PPUSH
25019: LD_INT 5
25021: PPUSH
25022: CALL_OW 272
25026: PUSH
25027: LD_VAR 0 11
25031: PPUSH
25032: LD_VAR 0 8
25036: PPUSH
25037: LD_INT 5
25039: PPUSH
25040: CALL_OW 273
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
25049: LD_VAR 0 9
25053: PUSH
25054: LD_INT 1
25056: ARRAY
25057: PPUSH
25058: LD_VAR 0 9
25062: PUSH
25063: LD_INT 2
25065: ARRAY
25066: PPUSH
25067: CALL_OW 488
25071: IFFALSE 25170
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
25073: LD_ADDR_VAR 0 4
25077: PUSH
25078: LD_VAR 0 9
25082: PUSH
25083: LD_INT 1
25085: ARRAY
25086: PPUSH
25087: LD_VAR 0 9
25091: PUSH
25092: LD_INT 2
25094: ARRAY
25095: PPUSH
25096: CALL_OW 546
25100: ST_TO_ADDR
// if hex [ 1 ] then
25101: LD_VAR 0 4
25105: PUSH
25106: LD_INT 1
25108: ARRAY
25109: IFFALSE 25113
// continue ;
25111: GO 25001
// h := hex [ 2 ] ;
25113: LD_ADDR_VAR 0 13
25117: PUSH
25118: LD_VAR 0 4
25122: PUSH
25123: LD_INT 2
25125: ARRAY
25126: ST_TO_ADDR
// if h + 7 < height then
25127: LD_VAR 0 13
25131: PUSH
25132: LD_INT 7
25134: PLUS
25135: PUSH
25136: LD_VAR 0 15
25140: LESS
25141: IFFALSE 25170
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
25143: LD_ADDR_VAR 0 18
25147: PUSH
25148: LD_INT 7
25150: PUSH
25151: LD_INT 28
25153: PUSH
25154: LD_INT 45
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: PUSH
25162: LD_VAR 0 12
25166: ARRAY
25167: ST_TO_ADDR
// break ;
25168: GO 25172
// end ; end ; end ;
25170: GO 25001
25172: POP
25173: POP
// end ; if not weapon then
25174: LD_VAR 0 18
25178: NOT
25179: IFFALSE 25239
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
25181: LD_ADDR_VAR 0 5
25185: PUSH
25186: LD_VAR 0 5
25190: PUSH
25191: LD_INT 11
25193: PUSH
25194: LD_INT 30
25196: PUSH
25197: LD_INT 49
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: DIFF
25205: ST_TO_ADDR
// if not list then
25206: LD_VAR 0 5
25210: NOT
25211: IFFALSE 25215
// exit ;
25213: GO 25357
// weapon := list [ rand ( 1 , list ) ] ;
25215: LD_ADDR_VAR 0 18
25219: PUSH
25220: LD_VAR 0 5
25224: PUSH
25225: LD_INT 1
25227: PPUSH
25228: LD_VAR 0 5
25232: PPUSH
25233: CALL_OW 12
25237: ARRAY
25238: ST_TO_ADDR
// end ; if weapon then
25239: LD_VAR 0 18
25243: IFFALSE 25357
// begin tmp := CostOfWeapon ( weapon ) ;
25245: LD_ADDR_VAR 0 14
25249: PUSH
25250: LD_VAR 0 18
25254: PPUSH
25255: CALL_OW 451
25259: ST_TO_ADDR
// j := GetBase ( tower ) ;
25260: LD_ADDR_VAR 0 9
25264: PUSH
25265: LD_VAR 0 1
25269: PPUSH
25270: CALL_OW 274
25274: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
25275: LD_VAR 0 9
25279: PPUSH
25280: LD_INT 1
25282: PPUSH
25283: CALL_OW 275
25287: PUSH
25288: LD_VAR 0 14
25292: PUSH
25293: LD_INT 1
25295: ARRAY
25296: GREATEREQUAL
25297: PUSH
25298: LD_VAR 0 9
25302: PPUSH
25303: LD_INT 2
25305: PPUSH
25306: CALL_OW 275
25310: PUSH
25311: LD_VAR 0 14
25315: PUSH
25316: LD_INT 2
25318: ARRAY
25319: GREATEREQUAL
25320: AND
25321: PUSH
25322: LD_VAR 0 9
25326: PPUSH
25327: LD_INT 3
25329: PPUSH
25330: CALL_OW 275
25334: PUSH
25335: LD_VAR 0 14
25339: PUSH
25340: LD_INT 3
25342: ARRAY
25343: GREATEREQUAL
25344: AND
25345: IFFALSE 25357
// result := weapon ;
25347: LD_ADDR_VAR 0 3
25351: PUSH
25352: LD_VAR 0 18
25356: ST_TO_ADDR
// end ; end ;
25357: LD_VAR 0 3
25361: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
25362: LD_INT 0
25364: PPUSH
25365: PPUSH
// result := true ;
25366: LD_ADDR_VAR 0 3
25370: PUSH
25371: LD_INT 1
25373: ST_TO_ADDR
// if array1 = array2 then
25374: LD_VAR 0 1
25378: PUSH
25379: LD_VAR 0 2
25383: EQUAL
25384: IFFALSE 25444
// begin for i = 1 to array1 do
25386: LD_ADDR_VAR 0 4
25390: PUSH
25391: DOUBLE
25392: LD_INT 1
25394: DEC
25395: ST_TO_ADDR
25396: LD_VAR 0 1
25400: PUSH
25401: FOR_TO
25402: IFFALSE 25440
// if array1 [ i ] <> array2 [ i ] then
25404: LD_VAR 0 1
25408: PUSH
25409: LD_VAR 0 4
25413: ARRAY
25414: PUSH
25415: LD_VAR 0 2
25419: PUSH
25420: LD_VAR 0 4
25424: ARRAY
25425: NONEQUAL
25426: IFFALSE 25438
// begin result := false ;
25428: LD_ADDR_VAR 0 3
25432: PUSH
25433: LD_INT 0
25435: ST_TO_ADDR
// break ;
25436: GO 25440
// end ;
25438: GO 25401
25440: POP
25441: POP
// end else
25442: GO 25452
// result := false ;
25444: LD_ADDR_VAR 0 3
25448: PUSH
25449: LD_INT 0
25451: ST_TO_ADDR
// end ;
25452: LD_VAR 0 3
25456: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
25457: LD_INT 0
25459: PPUSH
25460: PPUSH
// if not array1 or not array2 then
25461: LD_VAR 0 1
25465: NOT
25466: PUSH
25467: LD_VAR 0 2
25471: NOT
25472: OR
25473: IFFALSE 25477
// exit ;
25475: GO 25541
// result := true ;
25477: LD_ADDR_VAR 0 3
25481: PUSH
25482: LD_INT 1
25484: ST_TO_ADDR
// for i = 1 to array1 do
25485: LD_ADDR_VAR 0 4
25489: PUSH
25490: DOUBLE
25491: LD_INT 1
25493: DEC
25494: ST_TO_ADDR
25495: LD_VAR 0 1
25499: PUSH
25500: FOR_TO
25501: IFFALSE 25539
// if array1 [ i ] <> array2 [ i ] then
25503: LD_VAR 0 1
25507: PUSH
25508: LD_VAR 0 4
25512: ARRAY
25513: PUSH
25514: LD_VAR 0 2
25518: PUSH
25519: LD_VAR 0 4
25523: ARRAY
25524: NONEQUAL
25525: IFFALSE 25537
// begin result := false ;
25527: LD_ADDR_VAR 0 3
25531: PUSH
25532: LD_INT 0
25534: ST_TO_ADDR
// break ;
25535: GO 25539
// end ;
25537: GO 25500
25539: POP
25540: POP
// end ;
25541: LD_VAR 0 3
25545: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
25546: LD_INT 0
25548: PPUSH
25549: PPUSH
25550: PPUSH
// pom := GetBase ( fac ) ;
25551: LD_ADDR_VAR 0 5
25555: PUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 274
25565: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
25566: LD_ADDR_VAR 0 4
25570: PUSH
25571: LD_VAR 0 2
25575: PUSH
25576: LD_INT 1
25578: ARRAY
25579: PPUSH
25580: LD_VAR 0 2
25584: PUSH
25585: LD_INT 2
25587: ARRAY
25588: PPUSH
25589: LD_VAR 0 2
25593: PUSH
25594: LD_INT 3
25596: ARRAY
25597: PPUSH
25598: LD_VAR 0 2
25602: PUSH
25603: LD_INT 4
25605: ARRAY
25606: PPUSH
25607: CALL_OW 449
25611: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25612: LD_ADDR_VAR 0 3
25616: PUSH
25617: LD_VAR 0 5
25621: PPUSH
25622: LD_INT 1
25624: PPUSH
25625: CALL_OW 275
25629: PUSH
25630: LD_VAR 0 4
25634: PUSH
25635: LD_INT 1
25637: ARRAY
25638: GREATEREQUAL
25639: PUSH
25640: LD_VAR 0 5
25644: PPUSH
25645: LD_INT 2
25647: PPUSH
25648: CALL_OW 275
25652: PUSH
25653: LD_VAR 0 4
25657: PUSH
25658: LD_INT 2
25660: ARRAY
25661: GREATEREQUAL
25662: AND
25663: PUSH
25664: LD_VAR 0 5
25668: PPUSH
25669: LD_INT 3
25671: PPUSH
25672: CALL_OW 275
25676: PUSH
25677: LD_VAR 0 4
25681: PUSH
25682: LD_INT 3
25684: ARRAY
25685: GREATEREQUAL
25686: AND
25687: ST_TO_ADDR
// end ;
25688: LD_VAR 0 3
25692: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
25693: LD_INT 0
25695: PPUSH
25696: PPUSH
25697: PPUSH
25698: PPUSH
// pom := GetBase ( building ) ;
25699: LD_ADDR_VAR 0 3
25703: PUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 274
25713: ST_TO_ADDR
// if not pom then
25714: LD_VAR 0 3
25718: NOT
25719: IFFALSE 25723
// exit ;
25721: GO 25893
// btype := GetBType ( building ) ;
25723: LD_ADDR_VAR 0 5
25727: PUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL_OW 266
25737: ST_TO_ADDR
// if btype = b_armoury then
25738: LD_VAR 0 5
25742: PUSH
25743: LD_INT 4
25745: EQUAL
25746: IFFALSE 25756
// btype := b_barracks ;
25748: LD_ADDR_VAR 0 5
25752: PUSH
25753: LD_INT 5
25755: ST_TO_ADDR
// if btype = b_depot then
25756: LD_VAR 0 5
25760: PUSH
25761: LD_INT 0
25763: EQUAL
25764: IFFALSE 25774
// btype := b_warehouse ;
25766: LD_ADDR_VAR 0 5
25770: PUSH
25771: LD_INT 1
25773: ST_TO_ADDR
// if btype = b_workshop then
25774: LD_VAR 0 5
25778: PUSH
25779: LD_INT 2
25781: EQUAL
25782: IFFALSE 25792
// btype := b_factory ;
25784: LD_ADDR_VAR 0 5
25788: PUSH
25789: LD_INT 3
25791: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25792: LD_ADDR_VAR 0 4
25796: PUSH
25797: LD_VAR 0 5
25801: PPUSH
25802: LD_VAR 0 1
25806: PPUSH
25807: CALL_OW 248
25811: PPUSH
25812: CALL_OW 450
25816: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25817: LD_ADDR_VAR 0 2
25821: PUSH
25822: LD_VAR 0 3
25826: PPUSH
25827: LD_INT 1
25829: PPUSH
25830: CALL_OW 275
25834: PUSH
25835: LD_VAR 0 4
25839: PUSH
25840: LD_INT 1
25842: ARRAY
25843: GREATEREQUAL
25844: PUSH
25845: LD_VAR 0 3
25849: PPUSH
25850: LD_INT 2
25852: PPUSH
25853: CALL_OW 275
25857: PUSH
25858: LD_VAR 0 4
25862: PUSH
25863: LD_INT 2
25865: ARRAY
25866: GREATEREQUAL
25867: AND
25868: PUSH
25869: LD_VAR 0 3
25873: PPUSH
25874: LD_INT 3
25876: PPUSH
25877: CALL_OW 275
25881: PUSH
25882: LD_VAR 0 4
25886: PUSH
25887: LD_INT 3
25889: ARRAY
25890: GREATEREQUAL
25891: AND
25892: ST_TO_ADDR
// end ;
25893: LD_VAR 0 2
25897: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
25898: LD_INT 0
25900: PPUSH
25901: PPUSH
25902: PPUSH
// pom := GetBase ( building ) ;
25903: LD_ADDR_VAR 0 4
25907: PUSH
25908: LD_VAR 0 1
25912: PPUSH
25913: CALL_OW 274
25917: ST_TO_ADDR
// if not pom then
25918: LD_VAR 0 4
25922: NOT
25923: IFFALSE 25927
// exit ;
25925: GO 26028
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
25927: LD_ADDR_VAR 0 5
25931: PUSH
25932: LD_VAR 0 2
25936: PPUSH
25937: LD_VAR 0 1
25941: PPUSH
25942: CALL_OW 248
25946: PPUSH
25947: CALL_OW 450
25951: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
25952: LD_ADDR_VAR 0 3
25956: PUSH
25957: LD_VAR 0 4
25961: PPUSH
25962: LD_INT 1
25964: PPUSH
25965: CALL_OW 275
25969: PUSH
25970: LD_VAR 0 5
25974: PUSH
25975: LD_INT 1
25977: ARRAY
25978: GREATEREQUAL
25979: PUSH
25980: LD_VAR 0 4
25984: PPUSH
25985: LD_INT 2
25987: PPUSH
25988: CALL_OW 275
25992: PUSH
25993: LD_VAR 0 5
25997: PUSH
25998: LD_INT 2
26000: ARRAY
26001: GREATEREQUAL
26002: AND
26003: PUSH
26004: LD_VAR 0 4
26008: PPUSH
26009: LD_INT 3
26011: PPUSH
26012: CALL_OW 275
26016: PUSH
26017: LD_VAR 0 5
26021: PUSH
26022: LD_INT 3
26024: ARRAY
26025: GREATEREQUAL
26026: AND
26027: ST_TO_ADDR
// end ;
26028: LD_VAR 0 3
26032: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
26041: PPUSH
26042: PPUSH
26043: PPUSH
26044: PPUSH
26045: PPUSH
// result := false ;
26046: LD_ADDR_VAR 0 8
26050: PUSH
26051: LD_INT 0
26053: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
26054: LD_VAR 0 5
26058: NOT
26059: PUSH
26060: LD_VAR 0 1
26064: NOT
26065: OR
26066: PUSH
26067: LD_VAR 0 2
26071: NOT
26072: OR
26073: PUSH
26074: LD_VAR 0 3
26078: NOT
26079: OR
26080: IFFALSE 26084
// exit ;
26082: GO 26898
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
26084: LD_ADDR_VAR 0 14
26088: PUSH
26089: LD_VAR 0 1
26093: PPUSH
26094: LD_VAR 0 2
26098: PPUSH
26099: LD_VAR 0 3
26103: PPUSH
26104: LD_VAR 0 4
26108: PPUSH
26109: LD_VAR 0 5
26113: PUSH
26114: LD_INT 1
26116: ARRAY
26117: PPUSH
26118: CALL_OW 248
26122: PPUSH
26123: LD_INT 0
26125: PPUSH
26126: CALL 28151 0 6
26130: ST_TO_ADDR
// if not hexes then
26131: LD_VAR 0 14
26135: NOT
26136: IFFALSE 26140
// exit ;
26138: GO 26898
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26140: LD_ADDR_VAR 0 17
26144: PUSH
26145: LD_VAR 0 5
26149: PPUSH
26150: LD_INT 22
26152: PUSH
26153: LD_VAR 0 13
26157: PPUSH
26158: CALL_OW 255
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 2
26169: PUSH
26170: LD_INT 30
26172: PUSH
26173: LD_INT 0
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 30
26182: PUSH
26183: LD_INT 1
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: LIST
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PPUSH
26199: CALL_OW 72
26203: ST_TO_ADDR
// for i = 1 to hexes do
26204: LD_ADDR_VAR 0 9
26208: PUSH
26209: DOUBLE
26210: LD_INT 1
26212: DEC
26213: ST_TO_ADDR
26214: LD_VAR 0 14
26218: PUSH
26219: FOR_TO
26220: IFFALSE 26896
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
26222: LD_ADDR_VAR 0 13
26226: PUSH
26227: LD_VAR 0 14
26231: PUSH
26232: LD_VAR 0 9
26236: ARRAY
26237: PUSH
26238: LD_INT 1
26240: ARRAY
26241: PPUSH
26242: LD_VAR 0 14
26246: PUSH
26247: LD_VAR 0 9
26251: ARRAY
26252: PUSH
26253: LD_INT 2
26255: ARRAY
26256: PPUSH
26257: CALL_OW 428
26261: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
26262: LD_VAR 0 14
26266: PUSH
26267: LD_VAR 0 9
26271: ARRAY
26272: PUSH
26273: LD_INT 1
26275: ARRAY
26276: PPUSH
26277: LD_VAR 0 14
26281: PUSH
26282: LD_VAR 0 9
26286: ARRAY
26287: PUSH
26288: LD_INT 2
26290: ARRAY
26291: PPUSH
26292: CALL_OW 351
26296: PUSH
26297: LD_VAR 0 14
26301: PUSH
26302: LD_VAR 0 9
26306: ARRAY
26307: PUSH
26308: LD_INT 1
26310: ARRAY
26311: PPUSH
26312: LD_VAR 0 14
26316: PUSH
26317: LD_VAR 0 9
26321: ARRAY
26322: PUSH
26323: LD_INT 2
26325: ARRAY
26326: PPUSH
26327: CALL_OW 488
26331: NOT
26332: OR
26333: PUSH
26334: LD_VAR 0 13
26338: PPUSH
26339: CALL_OW 247
26343: PUSH
26344: LD_INT 3
26346: EQUAL
26347: OR
26348: IFFALSE 26354
// exit ;
26350: POP
26351: POP
26352: GO 26898
// if not tmp then
26354: LD_VAR 0 13
26358: NOT
26359: IFFALSE 26363
// continue ;
26361: GO 26219
// result := true ;
26363: LD_ADDR_VAR 0 8
26367: PUSH
26368: LD_INT 1
26370: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
26371: LD_VAR 0 6
26375: PUSH
26376: LD_VAR 0 13
26380: PPUSH
26381: CALL_OW 247
26385: PUSH
26386: LD_INT 2
26388: EQUAL
26389: AND
26390: PUSH
26391: LD_VAR 0 13
26395: PPUSH
26396: CALL_OW 263
26400: PUSH
26401: LD_INT 1
26403: EQUAL
26404: AND
26405: IFFALSE 26569
// begin if IsDrivenBy ( tmp ) then
26407: LD_VAR 0 13
26411: PPUSH
26412: CALL_OW 311
26416: IFFALSE 26420
// continue ;
26418: GO 26219
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
26420: LD_VAR 0 6
26424: PPUSH
26425: LD_INT 3
26427: PUSH
26428: LD_INT 60
26430: PUSH
26431: EMPTY
26432: LIST
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 3
26440: PUSH
26441: LD_INT 55
26443: PUSH
26444: EMPTY
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 72
26459: IFFALSE 26567
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
26461: LD_ADDR_VAR 0 18
26465: PUSH
26466: LD_VAR 0 6
26470: PPUSH
26471: LD_INT 3
26473: PUSH
26474: LD_INT 60
26476: PUSH
26477: EMPTY
26478: LIST
26479: PUSH
26480: EMPTY
26481: LIST
26482: LIST
26483: PUSH
26484: LD_INT 3
26486: PUSH
26487: LD_INT 55
26489: PUSH
26490: EMPTY
26491: LIST
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PPUSH
26501: CALL_OW 72
26505: PUSH
26506: LD_INT 1
26508: ARRAY
26509: ST_TO_ADDR
// if IsInUnit ( driver ) then
26510: LD_VAR 0 18
26514: PPUSH
26515: CALL_OW 310
26519: IFFALSE 26530
// ComExit ( driver ) ;
26521: LD_VAR 0 18
26525: PPUSH
26526: CALL 51932 0 1
// AddComEnterUnit ( driver , tmp ) ;
26530: LD_VAR 0 18
26534: PPUSH
26535: LD_VAR 0 13
26539: PPUSH
26540: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
26544: LD_VAR 0 18
26548: PPUSH
26549: LD_VAR 0 7
26553: PPUSH
26554: CALL_OW 173
// AddComExitVehicle ( driver ) ;
26558: LD_VAR 0 18
26562: PPUSH
26563: CALL_OW 181
// end ; continue ;
26567: GO 26219
// end ; if not cleaners or not tmp in cleaners then
26569: LD_VAR 0 6
26573: NOT
26574: PUSH
26575: LD_VAR 0 13
26579: PUSH
26580: LD_VAR 0 6
26584: IN
26585: NOT
26586: OR
26587: IFFALSE 26894
// begin if dep then
26589: LD_VAR 0 17
26593: IFFALSE 26729
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
26595: LD_ADDR_VAR 0 16
26599: PUSH
26600: LD_VAR 0 17
26604: PUSH
26605: LD_INT 1
26607: ARRAY
26608: PPUSH
26609: CALL_OW 250
26613: PPUSH
26614: LD_VAR 0 17
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PPUSH
26623: CALL_OW 254
26627: PPUSH
26628: LD_INT 5
26630: PPUSH
26631: CALL_OW 272
26635: PUSH
26636: LD_VAR 0 17
26640: PUSH
26641: LD_INT 1
26643: ARRAY
26644: PPUSH
26645: CALL_OW 251
26649: PPUSH
26650: LD_VAR 0 17
26654: PUSH
26655: LD_INT 1
26657: ARRAY
26658: PPUSH
26659: CALL_OW 254
26663: PPUSH
26664: LD_INT 5
26666: PPUSH
26667: CALL_OW 273
26671: PUSH
26672: EMPTY
26673: LIST
26674: LIST
26675: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
26676: LD_VAR 0 16
26680: PUSH
26681: LD_INT 1
26683: ARRAY
26684: PPUSH
26685: LD_VAR 0 16
26689: PUSH
26690: LD_INT 2
26692: ARRAY
26693: PPUSH
26694: CALL_OW 488
26698: IFFALSE 26729
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
26700: LD_VAR 0 13
26704: PPUSH
26705: LD_VAR 0 16
26709: PUSH
26710: LD_INT 1
26712: ARRAY
26713: PPUSH
26714: LD_VAR 0 16
26718: PUSH
26719: LD_INT 2
26721: ARRAY
26722: PPUSH
26723: CALL_OW 111
// continue ;
26727: GO 26219
// end ; end ; r := GetDir ( tmp ) ;
26729: LD_ADDR_VAR 0 15
26733: PUSH
26734: LD_VAR 0 13
26738: PPUSH
26739: CALL_OW 254
26743: ST_TO_ADDR
// if r = 5 then
26744: LD_VAR 0 15
26748: PUSH
26749: LD_INT 5
26751: EQUAL
26752: IFFALSE 26762
// r := 0 ;
26754: LD_ADDR_VAR 0 15
26758: PUSH
26759: LD_INT 0
26761: ST_TO_ADDR
// for j = r to 5 do
26762: LD_ADDR_VAR 0 10
26766: PUSH
26767: DOUBLE
26768: LD_VAR 0 15
26772: DEC
26773: ST_TO_ADDR
26774: LD_INT 5
26776: PUSH
26777: FOR_TO
26778: IFFALSE 26892
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
26780: LD_ADDR_VAR 0 11
26784: PUSH
26785: LD_VAR 0 13
26789: PPUSH
26790: CALL_OW 250
26794: PPUSH
26795: LD_VAR 0 10
26799: PPUSH
26800: LD_INT 2
26802: PPUSH
26803: CALL_OW 272
26807: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
26808: LD_ADDR_VAR 0 12
26812: PUSH
26813: LD_VAR 0 13
26817: PPUSH
26818: CALL_OW 251
26822: PPUSH
26823: LD_VAR 0 10
26827: PPUSH
26828: LD_INT 2
26830: PPUSH
26831: CALL_OW 273
26835: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
26836: LD_VAR 0 11
26840: PPUSH
26841: LD_VAR 0 12
26845: PPUSH
26846: CALL_OW 488
26850: PUSH
26851: LD_VAR 0 11
26855: PPUSH
26856: LD_VAR 0 12
26860: PPUSH
26861: CALL_OW 428
26865: NOT
26866: AND
26867: IFFALSE 26890
// begin ComMoveXY ( tmp , _x , _y ) ;
26869: LD_VAR 0 13
26873: PPUSH
26874: LD_VAR 0 11
26878: PPUSH
26879: LD_VAR 0 12
26883: PPUSH
26884: CALL_OW 111
// break ;
26888: GO 26892
// end ; end ;
26890: GO 26777
26892: POP
26893: POP
// end ; end ;
26894: GO 26219
26896: POP
26897: POP
// end ;
26898: LD_VAR 0 8
26902: RET
// export function BuildingTechInvented ( side , btype ) ; begin
26903: LD_INT 0
26905: PPUSH
// result := true ;
26906: LD_ADDR_VAR 0 3
26910: PUSH
26911: LD_INT 1
26913: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
26914: LD_VAR 0 2
26918: PUSH
26919: LD_INT 24
26921: DOUBLE
26922: EQUAL
26923: IFTRUE 26933
26925: LD_INT 33
26927: DOUBLE
26928: EQUAL
26929: IFTRUE 26933
26931: GO 26958
26933: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
26934: LD_ADDR_VAR 0 3
26938: PUSH
26939: LD_INT 32
26941: PPUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL_OW 321
26951: PUSH
26952: LD_INT 2
26954: EQUAL
26955: ST_TO_ADDR
26956: GO 27274
26958: LD_INT 20
26960: DOUBLE
26961: EQUAL
26962: IFTRUE 26966
26964: GO 26991
26966: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
26967: LD_ADDR_VAR 0 3
26971: PUSH
26972: LD_INT 6
26974: PPUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 321
26984: PUSH
26985: LD_INT 2
26987: EQUAL
26988: ST_TO_ADDR
26989: GO 27274
26991: LD_INT 22
26993: DOUBLE
26994: EQUAL
26995: IFTRUE 27005
26997: LD_INT 36
26999: DOUBLE
27000: EQUAL
27001: IFTRUE 27005
27003: GO 27030
27005: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
27006: LD_ADDR_VAR 0 3
27010: PUSH
27011: LD_INT 15
27013: PPUSH
27014: LD_VAR 0 1
27018: PPUSH
27019: CALL_OW 321
27023: PUSH
27024: LD_INT 2
27026: EQUAL
27027: ST_TO_ADDR
27028: GO 27274
27030: LD_INT 30
27032: DOUBLE
27033: EQUAL
27034: IFTRUE 27038
27036: GO 27063
27038: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
27039: LD_ADDR_VAR 0 3
27043: PUSH
27044: LD_INT 20
27046: PPUSH
27047: LD_VAR 0 1
27051: PPUSH
27052: CALL_OW 321
27056: PUSH
27057: LD_INT 2
27059: EQUAL
27060: ST_TO_ADDR
27061: GO 27274
27063: LD_INT 28
27065: DOUBLE
27066: EQUAL
27067: IFTRUE 27077
27069: LD_INT 21
27071: DOUBLE
27072: EQUAL
27073: IFTRUE 27077
27075: GO 27102
27077: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
27078: LD_ADDR_VAR 0 3
27082: PUSH
27083: LD_INT 21
27085: PPUSH
27086: LD_VAR 0 1
27090: PPUSH
27091: CALL_OW 321
27095: PUSH
27096: LD_INT 2
27098: EQUAL
27099: ST_TO_ADDR
27100: GO 27274
27102: LD_INT 16
27104: DOUBLE
27105: EQUAL
27106: IFTRUE 27110
27108: GO 27135
27110: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
27111: LD_ADDR_VAR 0 3
27115: PUSH
27116: LD_INT 84
27118: PPUSH
27119: LD_VAR 0 1
27123: PPUSH
27124: CALL_OW 321
27128: PUSH
27129: LD_INT 2
27131: EQUAL
27132: ST_TO_ADDR
27133: GO 27274
27135: LD_INT 19
27137: DOUBLE
27138: EQUAL
27139: IFTRUE 27149
27141: LD_INT 23
27143: DOUBLE
27144: EQUAL
27145: IFTRUE 27149
27147: GO 27174
27149: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
27150: LD_ADDR_VAR 0 3
27154: PUSH
27155: LD_INT 83
27157: PPUSH
27158: LD_VAR 0 1
27162: PPUSH
27163: CALL_OW 321
27167: PUSH
27168: LD_INT 2
27170: EQUAL
27171: ST_TO_ADDR
27172: GO 27274
27174: LD_INT 17
27176: DOUBLE
27177: EQUAL
27178: IFTRUE 27182
27180: GO 27207
27182: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
27183: LD_ADDR_VAR 0 3
27187: PUSH
27188: LD_INT 39
27190: PPUSH
27191: LD_VAR 0 1
27195: PPUSH
27196: CALL_OW 321
27200: PUSH
27201: LD_INT 2
27203: EQUAL
27204: ST_TO_ADDR
27205: GO 27274
27207: LD_INT 18
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27215
27213: GO 27240
27215: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_INT 40
27223: PPUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: CALL_OW 321
27233: PUSH
27234: LD_INT 2
27236: EQUAL
27237: ST_TO_ADDR
27238: GO 27274
27240: LD_INT 27
27242: DOUBLE
27243: EQUAL
27244: IFTRUE 27248
27246: GO 27273
27248: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
27249: LD_ADDR_VAR 0 3
27253: PUSH
27254: LD_INT 35
27256: PPUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 321
27266: PUSH
27267: LD_INT 2
27269: EQUAL
27270: ST_TO_ADDR
27271: GO 27274
27273: POP
// end ;
27274: LD_VAR 0 3
27278: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
27279: LD_INT 0
27281: PPUSH
27282: PPUSH
27283: PPUSH
27284: PPUSH
27285: PPUSH
27286: PPUSH
27287: PPUSH
27288: PPUSH
27289: PPUSH
27290: PPUSH
27291: PPUSH
// result := false ;
27292: LD_ADDR_VAR 0 6
27296: PUSH
27297: LD_INT 0
27299: ST_TO_ADDR
// if btype = b_depot then
27300: LD_VAR 0 2
27304: PUSH
27305: LD_INT 0
27307: EQUAL
27308: IFFALSE 27320
// begin result := true ;
27310: LD_ADDR_VAR 0 6
27314: PUSH
27315: LD_INT 1
27317: ST_TO_ADDR
// exit ;
27318: GO 28146
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
27320: LD_VAR 0 1
27324: NOT
27325: PUSH
27326: LD_VAR 0 1
27330: PPUSH
27331: CALL_OW 266
27335: PUSH
27336: LD_INT 0
27338: PUSH
27339: LD_INT 1
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: IN
27346: NOT
27347: OR
27348: PUSH
27349: LD_VAR 0 2
27353: NOT
27354: OR
27355: PUSH
27356: LD_VAR 0 5
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: LD_INT 1
27366: PUSH
27367: LD_INT 2
27369: PUSH
27370: LD_INT 3
27372: PUSH
27373: LD_INT 4
27375: PUSH
27376: LD_INT 5
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: IN
27387: NOT
27388: OR
27389: PUSH
27390: LD_VAR 0 3
27394: PPUSH
27395: LD_VAR 0 4
27399: PPUSH
27400: CALL_OW 488
27404: NOT
27405: OR
27406: IFFALSE 27410
// exit ;
27408: GO 28146
// side := GetSide ( depot ) ;
27410: LD_ADDR_VAR 0 9
27414: PUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL_OW 255
27424: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
27425: LD_VAR 0 9
27429: PPUSH
27430: LD_VAR 0 2
27434: PPUSH
27435: CALL 26903 0 2
27439: NOT
27440: IFFALSE 27444
// exit ;
27442: GO 28146
// pom := GetBase ( depot ) ;
27444: LD_ADDR_VAR 0 10
27448: PUSH
27449: LD_VAR 0 1
27453: PPUSH
27454: CALL_OW 274
27458: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
27459: LD_ADDR_VAR 0 11
27463: PUSH
27464: LD_VAR 0 2
27468: PPUSH
27469: LD_VAR 0 1
27473: PPUSH
27474: CALL_OW 248
27478: PPUSH
27479: CALL_OW 450
27483: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
27484: LD_VAR 0 10
27488: PPUSH
27489: LD_INT 1
27491: PPUSH
27492: CALL_OW 275
27496: PUSH
27497: LD_VAR 0 11
27501: PUSH
27502: LD_INT 1
27504: ARRAY
27505: GREATEREQUAL
27506: PUSH
27507: LD_VAR 0 10
27511: PPUSH
27512: LD_INT 2
27514: PPUSH
27515: CALL_OW 275
27519: PUSH
27520: LD_VAR 0 11
27524: PUSH
27525: LD_INT 2
27527: ARRAY
27528: GREATEREQUAL
27529: AND
27530: PUSH
27531: LD_VAR 0 10
27535: PPUSH
27536: LD_INT 3
27538: PPUSH
27539: CALL_OW 275
27543: PUSH
27544: LD_VAR 0 11
27548: PUSH
27549: LD_INT 3
27551: ARRAY
27552: GREATEREQUAL
27553: AND
27554: NOT
27555: IFFALSE 27559
// exit ;
27557: GO 28146
// if GetBType ( depot ) = b_depot then
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL_OW 266
27568: PUSH
27569: LD_INT 0
27571: EQUAL
27572: IFFALSE 27584
// dist := 28 else
27574: LD_ADDR_VAR 0 14
27578: PUSH
27579: LD_INT 28
27581: ST_TO_ADDR
27582: GO 27592
// dist := 36 ;
27584: LD_ADDR_VAR 0 14
27588: PUSH
27589: LD_INT 36
27591: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
27592: LD_VAR 0 1
27596: PPUSH
27597: LD_VAR 0 3
27601: PPUSH
27602: LD_VAR 0 4
27606: PPUSH
27607: CALL_OW 297
27611: PUSH
27612: LD_VAR 0 14
27616: GREATER
27617: IFFALSE 27621
// exit ;
27619: GO 28146
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
27621: LD_ADDR_VAR 0 12
27625: PUSH
27626: LD_VAR 0 2
27630: PPUSH
27631: LD_VAR 0 3
27635: PPUSH
27636: LD_VAR 0 4
27640: PPUSH
27641: LD_VAR 0 5
27645: PPUSH
27646: LD_VAR 0 1
27650: PPUSH
27651: CALL_OW 248
27655: PPUSH
27656: LD_INT 0
27658: PPUSH
27659: CALL 28151 0 6
27663: ST_TO_ADDR
// if not hexes then
27664: LD_VAR 0 12
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 28146
// hex := GetHexInfo ( x , y ) ;
27673: LD_ADDR_VAR 0 15
27677: PUSH
27678: LD_VAR 0 3
27682: PPUSH
27683: LD_VAR 0 4
27687: PPUSH
27688: CALL_OW 546
27692: ST_TO_ADDR
// if hex [ 1 ] then
27693: LD_VAR 0 15
27697: PUSH
27698: LD_INT 1
27700: ARRAY
27701: IFFALSE 27705
// exit ;
27703: GO 28146
// height := hex [ 2 ] ;
27705: LD_ADDR_VAR 0 13
27709: PUSH
27710: LD_VAR 0 15
27714: PUSH
27715: LD_INT 2
27717: ARRAY
27718: ST_TO_ADDR
// for i = 1 to hexes do
27719: LD_ADDR_VAR 0 7
27723: PUSH
27724: DOUBLE
27725: LD_INT 1
27727: DEC
27728: ST_TO_ADDR
27729: LD_VAR 0 12
27733: PUSH
27734: FOR_TO
27735: IFFALSE 28065
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
27737: LD_VAR 0 12
27741: PUSH
27742: LD_VAR 0 7
27746: ARRAY
27747: PUSH
27748: LD_INT 1
27750: ARRAY
27751: PPUSH
27752: LD_VAR 0 12
27756: PUSH
27757: LD_VAR 0 7
27761: ARRAY
27762: PUSH
27763: LD_INT 2
27765: ARRAY
27766: PPUSH
27767: CALL_OW 488
27771: NOT
27772: PUSH
27773: LD_VAR 0 12
27777: PUSH
27778: LD_VAR 0 7
27782: ARRAY
27783: PUSH
27784: LD_INT 1
27786: ARRAY
27787: PPUSH
27788: LD_VAR 0 12
27792: PUSH
27793: LD_VAR 0 7
27797: ARRAY
27798: PUSH
27799: LD_INT 2
27801: ARRAY
27802: PPUSH
27803: CALL_OW 428
27807: PUSH
27808: LD_INT 0
27810: GREATER
27811: OR
27812: PUSH
27813: LD_VAR 0 12
27817: PUSH
27818: LD_VAR 0 7
27822: ARRAY
27823: PUSH
27824: LD_INT 1
27826: ARRAY
27827: PPUSH
27828: LD_VAR 0 12
27832: PUSH
27833: LD_VAR 0 7
27837: ARRAY
27838: PUSH
27839: LD_INT 2
27841: ARRAY
27842: PPUSH
27843: CALL_OW 351
27847: OR
27848: IFFALSE 27854
// exit ;
27850: POP
27851: POP
27852: GO 28146
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27854: LD_ADDR_VAR 0 8
27858: PUSH
27859: LD_VAR 0 12
27863: PUSH
27864: LD_VAR 0 7
27868: ARRAY
27869: PUSH
27870: LD_INT 1
27872: ARRAY
27873: PPUSH
27874: LD_VAR 0 12
27878: PUSH
27879: LD_VAR 0 7
27883: ARRAY
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: CALL_OW 546
27893: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
27894: LD_VAR 0 8
27898: PUSH
27899: LD_INT 1
27901: ARRAY
27902: PUSH
27903: LD_VAR 0 8
27907: PUSH
27908: LD_INT 2
27910: ARRAY
27911: PUSH
27912: LD_VAR 0 13
27916: PUSH
27917: LD_INT 2
27919: PLUS
27920: GREATER
27921: OR
27922: PUSH
27923: LD_VAR 0 8
27927: PUSH
27928: LD_INT 2
27930: ARRAY
27931: PUSH
27932: LD_VAR 0 13
27936: PUSH
27937: LD_INT 2
27939: MINUS
27940: LESS
27941: OR
27942: PUSH
27943: LD_VAR 0 8
27947: PUSH
27948: LD_INT 3
27950: ARRAY
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 8
27957: PUSH
27958: LD_INT 9
27960: PUSH
27961: LD_INT 10
27963: PUSH
27964: LD_INT 11
27966: PUSH
27967: LD_INT 12
27969: PUSH
27970: LD_INT 13
27972: PUSH
27973: LD_INT 16
27975: PUSH
27976: LD_INT 17
27978: PUSH
27979: LD_INT 18
27981: PUSH
27982: LD_INT 19
27984: PUSH
27985: LD_INT 20
27987: PUSH
27988: LD_INT 21
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: IN
28006: NOT
28007: OR
28008: PUSH
28009: LD_VAR 0 8
28013: PUSH
28014: LD_INT 5
28016: ARRAY
28017: NOT
28018: OR
28019: PUSH
28020: LD_VAR 0 8
28024: PUSH
28025: LD_INT 6
28027: ARRAY
28028: PUSH
28029: LD_INT 1
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 7
28037: PUSH
28038: LD_INT 9
28040: PUSH
28041: LD_INT 10
28043: PUSH
28044: LD_INT 11
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: IN
28055: NOT
28056: OR
28057: IFFALSE 28063
// exit ;
28059: POP
28060: POP
28061: GO 28146
// end ;
28063: GO 27734
28065: POP
28066: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
28067: LD_VAR 0 9
28071: PPUSH
28072: LD_VAR 0 3
28076: PPUSH
28077: LD_VAR 0 4
28081: PPUSH
28082: LD_INT 20
28084: PPUSH
28085: CALL 20069 0 4
28089: PUSH
28090: LD_INT 4
28092: ARRAY
28093: IFFALSE 28097
// exit ;
28095: GO 28146
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
28097: LD_VAR 0 2
28101: PUSH
28102: LD_INT 29
28104: PUSH
28105: LD_INT 30
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: IN
28112: PUSH
28113: LD_VAR 0 3
28117: PPUSH
28118: LD_VAR 0 4
28122: PPUSH
28123: LD_VAR 0 9
28127: PPUSH
28128: CALL_OW 440
28132: NOT
28133: AND
28134: IFFALSE 28138
// exit ;
28136: GO 28146
// result := true ;
28138: LD_ADDR_VAR 0 6
28142: PUSH
28143: LD_INT 1
28145: ST_TO_ADDR
// end ;
28146: LD_VAR 0 6
28150: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
28151: LD_INT 0
28153: PPUSH
28154: PPUSH
28155: PPUSH
28156: PPUSH
28157: PPUSH
28158: PPUSH
28159: PPUSH
28160: PPUSH
28161: PPUSH
28162: PPUSH
28163: PPUSH
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
28168: PPUSH
28169: PPUSH
28170: PPUSH
28171: PPUSH
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
28188: PPUSH
28189: PPUSH
28190: PPUSH
28191: PPUSH
28192: PPUSH
28193: PPUSH
28194: PPUSH
28195: PPUSH
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
28200: PPUSH
28201: PPUSH
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
28206: PPUSH
28207: PPUSH
28208: PPUSH
28209: PPUSH
28210: PPUSH
// result = [ ] ;
28211: LD_ADDR_VAR 0 7
28215: PUSH
28216: EMPTY
28217: ST_TO_ADDR
// temp_list = [ ] ;
28218: LD_ADDR_VAR 0 9
28222: PUSH
28223: EMPTY
28224: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
28225: LD_VAR 0 4
28229: PUSH
28230: LD_INT 0
28232: PUSH
28233: LD_INT 1
28235: PUSH
28236: LD_INT 2
28238: PUSH
28239: LD_INT 3
28241: PUSH
28242: LD_INT 4
28244: PUSH
28245: LD_INT 5
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: IN
28256: NOT
28257: PUSH
28258: LD_VAR 0 1
28262: PUSH
28263: LD_INT 0
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: IN
28273: PUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_INT 1
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: LD_INT 3
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: IN
28293: NOT
28294: AND
28295: OR
28296: IFFALSE 28300
// exit ;
28298: GO 46691
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
28300: LD_VAR 0 1
28304: PUSH
28305: LD_INT 6
28307: PUSH
28308: LD_INT 7
28310: PUSH
28311: LD_INT 8
28313: PUSH
28314: LD_INT 13
28316: PUSH
28317: LD_INT 12
28319: PUSH
28320: LD_INT 15
28322: PUSH
28323: LD_INT 11
28325: PUSH
28326: LD_INT 14
28328: PUSH
28329: LD_INT 10
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: IN
28343: IFFALSE 28353
// btype = b_lab ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_INT 6
28352: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
28353: LD_VAR 0 6
28357: PUSH
28358: LD_INT 0
28360: PUSH
28361: LD_INT 1
28363: PUSH
28364: LD_INT 2
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: LIST
28371: IN
28372: NOT
28373: PUSH
28374: LD_VAR 0 1
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: LD_INT 6
28393: PUSH
28394: LD_INT 36
28396: PUSH
28397: LD_INT 4
28399: PUSH
28400: LD_INT 5
28402: PUSH
28403: LD_INT 31
28405: PUSH
28406: LD_INT 32
28408: PUSH
28409: LD_INT 33
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: IN
28425: NOT
28426: PUSH
28427: LD_VAR 0 6
28431: PUSH
28432: LD_INT 1
28434: EQUAL
28435: AND
28436: OR
28437: PUSH
28438: LD_VAR 0 1
28442: PUSH
28443: LD_INT 2
28445: PUSH
28446: LD_INT 3
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: IN
28453: NOT
28454: PUSH
28455: LD_VAR 0 6
28459: PUSH
28460: LD_INT 2
28462: EQUAL
28463: AND
28464: OR
28465: IFFALSE 28475
// mode = 0 ;
28467: LD_ADDR_VAR 0 6
28471: PUSH
28472: LD_INT 0
28474: ST_TO_ADDR
// case mode of 0 :
28475: LD_VAR 0 6
28479: PUSH
28480: LD_INT 0
28482: DOUBLE
28483: EQUAL
28484: IFTRUE 28488
28486: GO 39941
28488: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
28489: LD_ADDR_VAR 0 11
28493: PUSH
28494: LD_INT 0
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 0
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: PUSH
28518: LD_INT 0
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: LD_INT 1
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PUSH
28535: LD_INT 0
28537: PUSH
28538: LD_INT 1
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: PUSH
28545: LD_INT 1
28547: NEG
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: LD_INT 1
28562: NEG
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 1
28570: NEG
28571: PUSH
28572: LD_INT 2
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 2
28585: NEG
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 1
28596: NEG
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 1
28635: PUSH
28636: LD_INT 3
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: LD_INT 3
28648: PUSH
28649: EMPTY
28650: LIST
28651: LIST
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28682: LD_ADDR_VAR 0 12
28686: PUSH
28687: LD_INT 0
28689: PUSH
28690: LD_INT 0
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: PUSH
28697: LD_INT 0
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: PUSH
28711: LD_INT 0
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: PUSH
28718: LD_INT 1
28720: PUSH
28721: LD_INT 1
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 0
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: NEG
28741: PUSH
28742: LD_INT 0
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: PUSH
28749: LD_INT 1
28751: NEG
28752: PUSH
28753: LD_INT 1
28755: NEG
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: LD_INT 1
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 0
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 2
28784: PUSH
28785: LD_INT 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: NEG
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: NEG
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: EMPTY
28823: LIST
28824: LIST
28825: PUSH
28826: LD_INT 2
28828: NEG
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 3
28839: NEG
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 3
28850: NEG
28851: PUSH
28852: LD_INT 1
28854: NEG
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28878: LD_ADDR_VAR 0 13
28882: PUSH
28883: LD_INT 0
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: LD_INT 0
28895: PUSH
28896: LD_INT 1
28898: NEG
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: PUSH
28904: LD_INT 1
28906: PUSH
28907: LD_INT 0
28909: PUSH
28910: EMPTY
28911: LIST
28912: LIST
28913: PUSH
28914: LD_INT 1
28916: PUSH
28917: LD_INT 1
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 0
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: NEG
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: NEG
28948: PUSH
28949: LD_INT 1
28951: NEG
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: PUSH
28957: LD_INT 1
28959: NEG
28960: PUSH
28961: LD_INT 2
28963: NEG
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: PUSH
28969: LD_INT 2
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 2
28981: PUSH
28982: LD_INT 2
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 2
29001: NEG
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 2
29013: NEG
29014: PUSH
29015: LD_INT 2
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 2
29025: NEG
29026: PUSH
29027: LD_INT 3
29029: NEG
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 3
29037: NEG
29038: PUSH
29039: LD_INT 2
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 3
29049: NEG
29050: PUSH
29051: LD_INT 3
29053: NEG
29054: PUSH
29055: EMPTY
29056: LIST
29057: LIST
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
29077: LD_ADDR_VAR 0 14
29081: PUSH
29082: LD_INT 0
29084: PUSH
29085: LD_INT 0
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 1
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 0
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: PUSH
29113: LD_INT 1
29115: PUSH
29116: LD_INT 1
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 0
29125: PUSH
29126: LD_INT 1
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: NEG
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: LD_INT 1
29150: NEG
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: PUSH
29156: LD_INT 1
29158: NEG
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 0
29170: PUSH
29171: LD_INT 2
29173: NEG
29174: PUSH
29175: EMPTY
29176: LIST
29177: LIST
29178: PUSH
29179: LD_INT 1
29181: PUSH
29182: LD_INT 1
29184: NEG
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PUSH
29190: LD_INT 1
29192: PUSH
29193: LD_INT 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 0
29202: PUSH
29203: LD_INT 2
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 1
29223: NEG
29224: PUSH
29225: LD_INT 3
29227: NEG
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 0
29235: PUSH
29236: LD_INT 3
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
29273: LD_ADDR_VAR 0 15
29277: PUSH
29278: LD_INT 0
29280: PUSH
29281: LD_INT 0
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 0
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 1
29301: PUSH
29302: LD_INT 0
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 1
29311: PUSH
29312: LD_INT 1
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 0
29321: PUSH
29322: LD_INT 1
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 0
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 1
29342: NEG
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 2
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 2
29375: PUSH
29376: LD_INT 1
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: NEG
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: PUSH
29405: LD_INT 2
29407: NEG
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 3
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 3
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
29466: LD_ADDR_VAR 0 16
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 1
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 2
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 2
29589: NEG
29590: PUSH
29591: LD_INT 1
29593: NEG
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 2
29601: NEG
29602: PUSH
29603: LD_INT 2
29605: NEG
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 3
29613: PUSH
29614: LD_INT 2
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 3
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29659: LD_ADDR_VAR 0 17
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: LD_INT 0
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 1
29679: NEG
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 1
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: PUSH
29698: LD_INT 1
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: EMPTY
29712: LIST
29713: LIST
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: NEG
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: PUSH
29742: LD_INT 2
29744: NEG
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 1
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: PUSH
29772: LD_INT 2
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 2
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: LD_INT 2
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 1
29804: PUSH
29805: LD_INT 2
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 0
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: LD_INT 1
29824: NEG
29825: PUSH
29826: LD_INT 1
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: LD_INT 0
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: LD_INT 1
29850: NEG
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: LD_INT 2
29858: NEG
29859: PUSH
29860: LD_INT 2
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29889: LD_ADDR_VAR 0 18
29893: PUSH
29894: LD_INT 0
29896: PUSH
29897: LD_INT 0
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 1
29909: NEG
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 0
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 1
29927: PUSH
29928: LD_INT 1
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 0
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: NEG
29948: PUSH
29949: LD_INT 0
29951: PUSH
29952: EMPTY
29953: LIST
29954: LIST
29955: PUSH
29956: LD_INT 1
29958: NEG
29959: PUSH
29960: LD_INT 1
29962: NEG
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 2
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 0
29982: PUSH
29983: LD_INT 2
29985: NEG
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 1
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 2
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 2
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 2
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: NEG
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: NEG
30066: PUSH
30067: LD_INT 0
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 2
30076: NEG
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 2
30092: NEG
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30119: LD_ADDR_VAR 0 19
30123: PUSH
30124: LD_INT 0
30126: PUSH
30127: LD_INT 0
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 0
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: PUSH
30148: LD_INT 0
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 1
30157: PUSH
30158: LD_INT 1
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 0
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: PUSH
30175: LD_INT 1
30177: NEG
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 1
30188: NEG
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: NEG
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: EMPTY
30207: LIST
30208: LIST
30209: PUSH
30210: LD_INT 0
30212: PUSH
30213: LD_INT 2
30215: NEG
30216: PUSH
30217: EMPTY
30218: LIST
30219: LIST
30220: PUSH
30221: LD_INT 1
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 0
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 2
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 1
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 0
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 2
30295: NEG
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 2
30306: NEG
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 2
30318: NEG
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30349: LD_ADDR_VAR 0 20
30353: PUSH
30354: LD_INT 0
30356: PUSH
30357: LD_INT 0
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: LD_INT 1
30369: NEG
30370: PUSH
30371: EMPTY
30372: LIST
30373: LIST
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: LD_INT 0
30380: PUSH
30381: EMPTY
30382: LIST
30383: LIST
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PUSH
30405: LD_INT 1
30407: NEG
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: LD_INT 1
30422: NEG
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: LD_INT 2
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: LD_INT 2
30445: NEG
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: PUSH
30451: LD_INT 1
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: EMPTY
30469: LIST
30470: LIST
30471: PUSH
30472: LD_INT 2
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 2
30484: PUSH
30485: LD_INT 2
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: LD_INT 2
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: LD_INT 2
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: PUSH
30512: LD_INT 1
30514: NEG
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 2
30525: NEG
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: NEG
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30579: LD_ADDR_VAR 0 21
30583: PUSH
30584: LD_INT 0
30586: PUSH
30587: LD_INT 0
30589: PUSH
30590: EMPTY
30591: LIST
30592: LIST
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: LD_INT 1
30599: NEG
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: PUSH
30605: LD_INT 1
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PUSH
30615: LD_INT 1
30617: PUSH
30618: LD_INT 1
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 1
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 1
30637: NEG
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 1
30648: NEG
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: LD_INT 2
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: LD_INT 2
30675: NEG
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 1
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 2
30694: PUSH
30695: LD_INT 0
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 2
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 2
30714: PUSH
30715: LD_INT 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 1
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 0
30734: PUSH
30735: LD_INT 2
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 2
30755: NEG
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 2
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30809: LD_ADDR_VAR 0 22
30813: PUSH
30814: LD_INT 0
30816: PUSH
30817: LD_INT 0
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: LD_INT 1
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 1
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 1
30867: NEG
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: LD_INT 2
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 2
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: LD_INT 2
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 1
30974: NEG
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 2
30985: NEG
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 2
30996: NEG
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
31039: LD_ADDR_VAR 0 23
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 0
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 1
31097: NEG
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: NEG
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 2
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 2
31135: NEG
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: PUSH
31141: LD_INT 1
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: LD_INT 0
31157: PUSH
31158: EMPTY
31159: LIST
31160: LIST
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: LD_INT 2
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 2
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 0
31194: PUSH
31195: LD_INT 2
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 2
31215: NEG
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 2
31226: NEG
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: LD_INT 3
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: NEG
31263: PUSH
31264: LD_INT 3
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: LD_INT 2
31277: NEG
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: LD_INT 1
31288: NEG
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
31319: LD_ADDR_VAR 0 24
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: LD_INT 0
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: LD_INT 1
31357: PUSH
31358: LD_INT 1
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: LD_INT 0
31367: PUSH
31368: LD_INT 1
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 1
31377: NEG
31378: PUSH
31379: LD_INT 0
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: LD_INT 1
31392: NEG
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 1
31400: NEG
31401: PUSH
31402: LD_INT 2
31404: NEG
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: PUSH
31410: LD_INT 0
31412: PUSH
31413: LD_INT 2
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: PUSH
31424: LD_INT 1
31426: NEG
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 2
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 2
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: EMPTY
31459: LIST
31460: LIST
31461: PUSH
31462: LD_INT 1
31464: PUSH
31465: LD_INT 2
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 0
31474: PUSH
31475: LD_INT 2
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: LD_INT 1
31484: NEG
31485: PUSH
31486: LD_INT 1
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 2
31495: NEG
31496: PUSH
31497: LD_INT 0
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 1
31544: NEG
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 3
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 3
31562: PUSH
31563: LD_INT 2
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
31595: LD_ADDR_VAR 0 25
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 2
31691: NEG
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 2
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 2
31771: NEG
31772: PUSH
31773: LD_INT 0
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 2
31782: NEG
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 2
31794: NEG
31795: PUSH
31796: LD_INT 2
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 3
31806: PUSH
31807: LD_INT 1
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: LD_INT 3
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: LD_INT 3
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
31869: LD_ADDR_VAR 0 26
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: LD_INT 0
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 1
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: LD_INT 1
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 0
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 1
31938: NEG
31939: PUSH
31940: LD_INT 1
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 0
31962: PUSH
31963: LD_INT 2
31965: NEG
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 1
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 0
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: LD_INT 2
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: LD_INT 2
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: LD_INT 1
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 2
32056: NEG
32057: PUSH
32058: LD_INT 1
32060: NEG
32061: PUSH
32062: EMPTY
32063: LIST
32064: LIST
32065: PUSH
32066: LD_INT 2
32068: NEG
32069: PUSH
32070: LD_INT 2
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 3
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 3
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 1
32100: NEG
32101: PUSH
32102: LD_INT 2
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 2
32111: NEG
32112: PUSH
32113: LD_INT 1
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32145: LD_ADDR_VAR 0 27
32149: PUSH
32150: LD_INT 0
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 0
32162: PUSH
32163: LD_INT 1
32165: NEG
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: LD_INT 1
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 1
32214: NEG
32215: PUSH
32216: LD_INT 1
32218: NEG
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: LD_INT 2
32230: NEG
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 2
32241: NEG
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: PUSH
32247: LD_INT 1
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 2
32260: PUSH
32261: LD_INT 0
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 1
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: LD_INT 2
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 1
32290: PUSH
32291: LD_INT 2
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: LD_INT 2
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: LD_INT 1
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: NEG
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: PUSH
32330: LD_INT 2
32332: NEG
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: LD_INT 2
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: LD_INT 1
32356: NEG
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: NEG
32368: PUSH
32369: LD_INT 1
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 3
32378: NEG
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: LD_INT 3
32390: NEG
32391: PUSH
32392: LD_INT 2
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
32425: LD_ADDR_VAR 0 28
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 0
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 0
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 1
32453: PUSH
32454: LD_INT 0
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: LD_INT 1
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 0
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: LD_INT 0
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: LD_INT 2
32510: NEG
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: PUSH
32530: LD_INT 1
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: LD_INT 0
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 1
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 2
32560: PUSH
32561: LD_INT 2
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 2
32601: NEG
32602: PUSH
32603: LD_INT 0
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: LD_INT 2
32628: NEG
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: LD_INT 3
32640: NEG
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 1
32648: NEG
32649: PUSH
32650: LD_INT 3
32652: NEG
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 3
32660: NEG
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: PUSH
32670: LD_INT 3
32672: NEG
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
32707: LD_ADDR_VAR 0 29
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 1
32727: NEG
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 0
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 1
32776: NEG
32777: PUSH
32778: LD_INT 1
32780: NEG
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: NEG
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 2
32803: NEG
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 1
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 2
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 2
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 2
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 2
32897: NEG
32898: PUSH
32899: LD_INT 3
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: LD_INT 1
32912: NEG
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 3
32951: NEG
32952: PUSH
32953: LD_INT 2
32955: NEG
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: EMPTY
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
32986: LD_ADDR_VAR 0 30
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: LD_INT 1
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 2
33111: PUSH
33112: LD_INT 1
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: NEG
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 2
33152: NEG
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: LD_INT 1
33167: NEG
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: LD_INT 1
33175: NEG
33176: PUSH
33177: LD_INT 3
33179: NEG
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: LD_INT 2
33190: NEG
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33264: LD_ADDR_VAR 0 31
33268: PUSH
33269: LD_INT 0
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 1
33284: NEG
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: PUSH
33293: LD_INT 0
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: NEG
33323: PUSH
33324: LD_INT 0
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 1
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 1
33345: NEG
33346: PUSH
33347: LD_INT 2
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 1
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 2
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 2
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 2
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: LD_INT 1
33418: NEG
33419: PUSH
33420: LD_INT 1
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 2
33429: NEG
33430: PUSH
33431: LD_INT 1
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: LD_INT 2
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 2
33453: NEG
33454: PUSH
33455: LD_INT 3
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 2
33465: PUSH
33466: LD_INT 1
33468: NEG
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: LD_INT 3
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: LD_INT 2
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 3
33507: NEG
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33542: LD_ADDR_VAR 0 32
33546: PUSH
33547: LD_INT 0
33549: PUSH
33550: LD_INT 0
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: LD_INT 1
33562: NEG
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 1
33570: PUSH
33571: LD_INT 0
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: LD_INT 1
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: NEG
33601: PUSH
33602: LD_INT 0
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 1
33611: NEG
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 2
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 2
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 1
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 2
33667: PUSH
33668: LD_INT 2
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 0
33687: PUSH
33688: LD_INT 2
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: NEG
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: LD_INT 0
33712: PUSH
33713: EMPTY
33714: LIST
33715: LIST
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: LD_INT 1
33723: NEG
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: NEG
33732: PUSH
33733: LD_INT 3
33735: NEG
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: PUSH
33744: LD_INT 2
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 3
33754: PUSH
33755: LD_INT 2
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: LD_INT 3
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 2
33774: NEG
33775: PUSH
33776: LD_INT 1
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: LD_INT 1
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33820: LD_ADDR_VAR 0 33
33824: PUSH
33825: LD_INT 0
33827: PUSH
33828: LD_INT 0
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 1
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 1
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: NEG
33902: PUSH
33903: LD_INT 2
33905: NEG
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: LD_INT 1
33916: NEG
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 1
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 2
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: LD_INT 1
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: NEG
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: NEG
33999: PUSH
34000: LD_INT 2
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 2
34010: NEG
34011: PUSH
34012: LD_INT 3
34014: NEG
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_INT 3
34033: PUSH
34034: LD_INT 1
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: PUSH
34044: LD_INT 3
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 1
34053: NEG
34054: PUSH
34055: LD_INT 2
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 3
34064: NEG
34065: PUSH
34066: LD_INT 2
34068: NEG
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34099: LD_ADDR_VAR 0 34
34103: PUSH
34104: LD_INT 0
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 0
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: EMPTY
34122: LIST
34123: LIST
34124: PUSH
34125: LD_INT 1
34127: PUSH
34128: LD_INT 0
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: PUSH
34135: LD_INT 1
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 0
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PUSH
34155: LD_INT 1
34157: NEG
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: LD_INT 1
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: NEG
34181: PUSH
34182: LD_INT 2
34184: NEG
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 0
34192: PUSH
34193: LD_INT 2
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: LD_INT 1
34206: NEG
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: PUSH
34215: LD_INT 1
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 2
34224: PUSH
34225: LD_INT 2
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: PUSH
34235: LD_INT 2
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: PUSH
34242: LD_INT 1
34244: NEG
34245: PUSH
34246: LD_INT 1
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 2
34255: NEG
34256: PUSH
34257: LD_INT 0
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: LD_INT 1
34270: NEG
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 2
34278: NEG
34279: PUSH
34280: LD_INT 2
34282: NEG
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 1
34290: NEG
34291: PUSH
34292: LD_INT 3
34294: NEG
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 1
34302: PUSH
34303: LD_INT 2
34305: NEG
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: LD_INT 2
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: LD_INT 2
34333: NEG
34334: PUSH
34335: LD_INT 1
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 3
34344: NEG
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34379: LD_ADDR_VAR 0 35
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: LD_INT 1
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: LD_INT 0
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: LD_INT 1
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 0
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 1
34437: NEG
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 1
34448: NEG
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: NEG
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34491: LD_ADDR_VAR 0 36
34495: PUSH
34496: LD_INT 0
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: LD_INT 1
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 1
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 1
34549: NEG
34550: PUSH
34551: LD_INT 0
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 1
34560: NEG
34561: PUSH
34562: LD_INT 1
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 1
34572: NEG
34573: PUSH
34574: LD_INT 2
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 1
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34603: LD_ADDR_VAR 0 37
34607: PUSH
34608: LD_INT 0
34610: PUSH
34611: LD_INT 0
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: LD_INT 1
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: PUSH
34659: LD_INT 1
34661: NEG
34662: PUSH
34663: LD_INT 0
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: NEG
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: LD_INT 1
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
34715: LD_ADDR_VAR 0 38
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 0
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 0
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: LD_INT 1
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: NEG
34785: PUSH
34786: LD_INT 1
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: LD_INT 1
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: PUSH
34804: LD_INT 2
34806: NEG
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
34827: LD_ADDR_VAR 0 39
34831: PUSH
34832: LD_INT 0
34834: PUSH
34835: LD_INT 0
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 1
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 0
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PUSH
34863: LD_INT 1
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 0
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 1
34885: NEG
34886: PUSH
34887: LD_INT 0
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: LD_INT 2
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
34939: LD_ADDR_VAR 0 40
34943: PUSH
34944: LD_INT 0
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 1
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 1
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: NEG
35009: PUSH
35010: LD_INT 1
35012: NEG
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 1
35020: PUSH
35021: LD_INT 1
35023: NEG
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 1
35031: NEG
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: LIST
35049: LIST
35050: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35051: LD_ADDR_VAR 0 41
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 0
35068: PUSH
35069: LD_INT 1
35071: NEG
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: PUSH
35080: LD_INT 0
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: PUSH
35090: LD_INT 1
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 0
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: LD_INT 0
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 1
35120: NEG
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: LD_INT 2
35136: NEG
35137: PUSH
35138: EMPTY
35139: LIST
35140: LIST
35141: PUSH
35142: LD_INT 1
35144: PUSH
35145: LD_INT 1
35147: NEG
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 2
35155: PUSH
35156: LD_INT 0
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 2
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 1
35185: PUSH
35186: LD_INT 2
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: PUSH
35200: EMPTY
35201: LIST
35202: LIST
35203: PUSH
35204: LD_INT 2
35206: NEG
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 2
35229: NEG
35230: PUSH
35231: LD_INT 2
35233: NEG
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: PUSH
35239: LD_INT 2
35241: NEG
35242: PUSH
35243: LD_INT 3
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 3
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 3
35274: PUSH
35275: LD_INT 1
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: LD_INT 2
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: LD_INT 3
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: NEG
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 3
35325: NEG
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: LD_INT 1
35340: NEG
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 3
35348: NEG
35349: PUSH
35350: LD_INT 2
35352: NEG
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 3
35360: NEG
35361: PUSH
35362: LD_INT 3
35364: NEG
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35401: LD_ADDR_VAR 0 42
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: LD_INT 0
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 0
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: LD_INT 0
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: LD_INT 1
35474: NEG
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: LD_INT 1
35508: NEG
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 2
35526: PUSH
35527: LD_INT 2
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: NEG
35557: PUSH
35558: LD_INT 1
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 2
35567: NEG
35568: PUSH
35569: LD_INT 1
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 2
35579: NEG
35580: PUSH
35581: LD_INT 2
35583: NEG
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: LD_INT 3
35595: NEG
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: NEG
35604: PUSH
35605: LD_INT 3
35607: NEG
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 0
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 3
35637: PUSH
35638: LD_INT 2
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 3
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: LD_INT 3
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 3
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: LD_INT 3
35680: PUSH
35681: EMPTY
35682: LIST
35683: LIST
35684: PUSH
35685: LD_INT 1
35687: NEG
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 3
35698: NEG
35699: PUSH
35700: LD_INT 2
35702: NEG
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 3
35710: NEG
35711: PUSH
35712: LD_INT 3
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: LIST
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35751: LD_ADDR_VAR 0 43
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 1
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 1
35789: PUSH
35790: LD_INT 1
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 1
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 1
35809: NEG
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: LD_INT 2
35836: NEG
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: LD_INT 2
35847: NEG
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 2
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 2
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 1
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 0
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: LD_INT 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 3
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: LD_INT 3
35955: NEG
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 1
35963: PUSH
35964: LD_INT 2
35966: NEG
35967: PUSH
35968: EMPTY
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: LD_INT 1
35977: NEG
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 3
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 3
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: LD_INT 3
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 0
36015: PUSH
36016: LD_INT 3
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 2
36036: NEG
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 3
36047: NEG
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 3
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36099: LD_ADDR_VAR 0 44
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 0
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: LD_INT 1
36119: NEG
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 1
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: LD_INT 1
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 1
36157: NEG
36158: PUSH
36159: LD_INT 0
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: NEG
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 1
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: EMPTY
36228: LIST
36229: LIST
36230: PUSH
36231: LD_INT 1
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 2
36254: NEG
36255: PUSH
36256: LD_INT 0
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 2
36265: NEG
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: NEG
36278: PUSH
36279: LD_INT 2
36281: NEG
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: PUSH
36287: LD_INT 2
36289: NEG
36290: PUSH
36291: LD_INT 3
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 2
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 3
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 3
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 3
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 3
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: LD_INT 3
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 2
36362: NEG
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 3
36373: NEG
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 3
36384: NEG
36385: PUSH
36386: LD_INT 1
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 3
36396: NEG
36397: PUSH
36398: LD_INT 2
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 3
36408: NEG
36409: PUSH
36410: LD_INT 3
36412: NEG
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36449: LD_ADDR_VAR 0 45
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 0
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 0
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 0
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 1
36487: PUSH
36488: LD_INT 1
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 0
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 0
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 1
36518: NEG
36519: PUSH
36520: LD_INT 1
36522: NEG
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 1
36530: NEG
36531: PUSH
36532: LD_INT 2
36534: NEG
36535: PUSH
36536: EMPTY
36537: LIST
36538: LIST
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 1
36556: NEG
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 2
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 2
36574: PUSH
36575: LD_INT 2
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: LD_INT 2
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: LD_INT 0
36594: PUSH
36595: LD_INT 2
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: LD_INT 1
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 2
36639: NEG
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 1
36651: NEG
36652: PUSH
36653: LD_INT 3
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 2
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 3
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 3
36695: PUSH
36696: LD_INT 3
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: PUSH
36703: LD_INT 2
36705: PUSH
36706: LD_INT 3
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: LD_INT 3
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: LD_INT 3
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 3
36746: NEG
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 3
36758: NEG
36759: PUSH
36760: LD_INT 3
36762: NEG
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36799: LD_ADDR_VAR 0 46
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 0
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: LD_INT 1
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: LD_INT 1
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: LD_INT 1
36857: NEG
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 2
36884: NEG
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: PUSH
36915: LD_INT 0
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: LD_INT 1
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 2
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: LD_INT 1
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: LD_INT 0
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 2
36976: NEG
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: LD_INT 3
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 3
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 2
37014: NEG
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 3
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: LD_INT 3
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: PUSH
37061: LD_INT 0
37063: PUSH
37064: LD_INT 3
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 2
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 2
37084: NEG
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 3
37095: NEG
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 3
37106: NEG
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: LIST
37122: LIST
37123: LIST
37124: LIST
37125: LIST
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37147: LD_ADDR_VAR 0 47
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 0
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 1
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: LD_INT 0
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 1
37216: NEG
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 1
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37298: LD_ADDR_VAR 0 48
37302: PUSH
37303: LD_INT 0
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 1
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 1
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: NEG
37357: PUSH
37358: LD_INT 0
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: LD_INT 1
37371: NEG
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: NEG
37380: PUSH
37381: LD_INT 2
37383: NEG
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 2
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 1
37405: NEG
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 2
37413: PUSH
37414: LD_INT 0
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 1
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37445: LD_ADDR_VAR 0 49
37449: PUSH
37450: LD_INT 0
37452: PUSH
37453: LD_INT 0
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 0
37462: PUSH
37463: LD_INT 1
37465: NEG
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: NEG
37504: PUSH
37505: LD_INT 0
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: NEG
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: EMPTY
37532: LIST
37533: LIST
37534: PUSH
37535: LD_INT 2
37537: PUSH
37538: LD_INT 0
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 2
37547: PUSH
37548: LD_INT 1
37550: PUSH
37551: EMPTY
37552: LIST
37553: LIST
37554: PUSH
37555: LD_INT 2
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: LD_INT 2
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37589: LD_ADDR_VAR 0 50
37593: PUSH
37594: LD_INT 0
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37733: LD_ADDR_VAR 0 51
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 1
37791: NEG
37792: PUSH
37793: LD_INT 0
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 1
37802: NEG
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 0
37824: PUSH
37825: LD_INT 2
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 1
37834: NEG
37835: PUSH
37836: LD_INT 1
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: PUSH
37843: LD_INT 2
37845: NEG
37846: PUSH
37847: LD_INT 0
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 2
37856: NEG
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37880: LD_ADDR_VAR 0 52
37884: PUSH
37885: LD_INT 0
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 0
37897: PUSH
37898: LD_INT 1
37900: NEG
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 1
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 0
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: NEG
37985: PUSH
37986: LD_INT 0
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: NEG
37996: PUSH
37997: LD_INT 1
37999: NEG
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 2
38007: NEG
38008: PUSH
38009: LD_INT 2
38011: NEG
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38031: LD_ADDR_VAR 0 53
38035: PUSH
38036: LD_INT 0
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 0
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 1
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: NEG
38113: PUSH
38114: LD_INT 2
38116: NEG
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 2
38127: NEG
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 2
38207: NEG
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 2
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 2
38230: NEG
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38261: LD_ADDR_VAR 0 54
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 0
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: LD_INT 1
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: PUSH
38300: LD_INT 1
38302: PUSH
38303: EMPTY
38304: LIST
38305: LIST
38306: PUSH
38307: LD_INT 0
38309: PUSH
38310: LD_INT 1
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: LD_INT 1
38334: NEG
38335: PUSH
38336: EMPTY
38337: LIST
38338: LIST
38339: PUSH
38340: LD_INT 1
38342: NEG
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 0
38354: PUSH
38355: LD_INT 2
38357: NEG
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: LD_INT 2
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: LD_INT 2
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: LD_INT 1
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 2
38437: NEG
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 2
38448: NEG
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: NEG
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38491: LD_ADDR_VAR 0 55
38495: PUSH
38496: LD_INT 0
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 0
38508: PUSH
38509: LD_INT 1
38511: NEG
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 1
38529: PUSH
38530: LD_INT 1
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 0
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 0
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 1
38560: NEG
38561: PUSH
38562: LD_INT 1
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 1
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 0
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: LD_INT 1
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 2
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: LD_INT 2
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: LD_INT 2
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: NEG
38691: PUSH
38692: LD_INT 2
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38721: LD_ADDR_VAR 0 56
38725: PUSH
38726: LD_INT 0
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 0
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: PUSH
38750: LD_INT 0
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: LD_INT 1
38762: PUSH
38763: EMPTY
38764: LIST
38765: LIST
38766: PUSH
38767: LD_INT 0
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: LD_INT 2
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 1
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 0
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 2
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: LD_INT 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: LD_INT 2
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 0
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: NEG
38898: PUSH
38899: LD_INT 0
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 2
38908: NEG
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: LD_INT 2
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38951: LD_ADDR_VAR 0 57
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: LD_INT 1
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 1
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 1
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 1
39032: NEG
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 2
39066: PUSH
39067: LD_INT 0
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 2
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 2
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 2
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 1
39116: NEG
39117: PUSH
39118: LD_INT 1
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: NEG
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: NEG
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 2
39150: NEG
39151: PUSH
39152: LD_INT 2
39154: NEG
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39181: LD_ADDR_VAR 0 58
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: LD_INT 1
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 1
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: NEG
39263: PUSH
39264: LD_INT 2
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 2
39277: NEG
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: LD_INT 2
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 0
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: LD_INT 1
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 0
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: LD_INT 1
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39411: LD_ADDR_VAR 0 59
39415: PUSH
39416: LD_INT 0
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 1
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: NEG
39470: PUSH
39471: LD_INT 0
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 1
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39499: LD_ADDR_VAR 0 60
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: LD_INT 0
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: LD_INT 1
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: LD_INT 1
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: EMPTY
39563: LIST
39564: LIST
39565: PUSH
39566: LD_INT 1
39568: NEG
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39587: LD_ADDR_VAR 0 61
39591: PUSH
39592: LD_INT 0
39594: PUSH
39595: LD_INT 0
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 1
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: PUSH
39626: LD_INT 1
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 0
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: NEG
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: NEG
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39675: LD_ADDR_VAR 0 62
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39763: LD_ADDR_VAR 0 63
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 0
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 0
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: PUSH
39830: LD_INT 1
39832: NEG
39833: PUSH
39834: LD_INT 1
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
39851: LD_ADDR_VAR 0 64
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: ST_TO_ADDR
// end ; 1 :
39939: GO 45836
39941: LD_INT 1
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39949
39947: GO 42572
39949: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39950: LD_ADDR_VAR 0 11
39954: PUSH
39955: LD_INT 1
39957: NEG
39958: PUSH
39959: LD_INT 3
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: LD_INT 3
39972: NEG
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: LD_INT 2
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39994: LD_ADDR_VAR 0 12
39998: PUSH
39999: LD_INT 2
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 3
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40035: LD_ADDR_VAR 0 13
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: LD_INT 3
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 2
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: LIST
40074: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40075: LD_ADDR_VAR 0 14
40079: PUSH
40080: LD_INT 1
40082: PUSH
40083: LD_INT 3
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: NEG
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40116: LD_ADDR_VAR 0 15
40120: PUSH
40121: LD_INT 2
40123: NEG
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: LD_INT 0
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 3
40145: NEG
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40160: LD_ADDR_VAR 0 16
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: LD_INT 3
40171: NEG
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 3
40179: NEG
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: NEG
40192: PUSH
40193: LD_INT 3
40195: NEG
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40206: LD_ADDR_VAR 0 17
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 3
40228: NEG
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40250: LD_ADDR_VAR 0 18
40254: PUSH
40255: LD_INT 2
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: LD_INT 3
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 3
40278: PUSH
40279: LD_INT 1
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: LIST
40290: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40291: LD_ADDR_VAR 0 19
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 2
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 3
40308: PUSH
40309: LD_INT 3
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 3
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40331: LD_ADDR_VAR 0 20
40335: PUSH
40336: LD_INT 1
40338: PUSH
40339: LD_INT 3
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: LD_INT 3
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 1
40358: NEG
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40372: LD_ADDR_VAR 0 21
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: LD_INT 1
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 3
40390: NEG
40391: PUSH
40392: LD_INT 0
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 3
40401: NEG
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40416: LD_ADDR_VAR 0 22
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: LD_INT 3
40427: NEG
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 3
40435: NEG
40436: PUSH
40437: LD_INT 2
40439: NEG
40440: PUSH
40441: EMPTY
40442: LIST
40443: LIST
40444: PUSH
40445: LD_INT 3
40447: NEG
40448: PUSH
40449: LD_INT 3
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: LIST
40461: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
40462: LD_ADDR_VAR 0 23
40466: PUSH
40467: LD_INT 0
40469: PUSH
40470: LD_INT 3
40472: NEG
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 1
40480: NEG
40481: PUSH
40482: LD_INT 4
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 3
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
40506: LD_ADDR_VAR 0 24
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 3
40523: PUSH
40524: LD_INT 1
40526: NEG
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: PUSH
40532: LD_INT 4
40534: PUSH
40535: LD_INT 1
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: LIST
40546: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
40547: LD_ADDR_VAR 0 25
40551: PUSH
40552: LD_INT 3
40554: PUSH
40555: LD_INT 3
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 4
40564: PUSH
40565: LD_INT 3
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: LD_INT 4
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
40587: LD_ADDR_VAR 0 26
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 3
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 4
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 1
40614: NEG
40615: PUSH
40616: LD_INT 3
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
40628: LD_ADDR_VAR 0 27
40632: PUSH
40633: LD_INT 3
40635: NEG
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 3
40646: NEG
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 4
40657: NEG
40658: PUSH
40659: LD_INT 1
40661: NEG
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
40672: LD_ADDR_VAR 0 28
40676: PUSH
40677: LD_INT 3
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 3
40691: NEG
40692: PUSH
40693: LD_INT 4
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 4
40703: NEG
40704: PUSH
40705: LD_INT 3
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
40718: LD_ADDR_VAR 0 29
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 2
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: LD_INT 4
40763: NEG
40764: PUSH
40765: EMPTY
40766: LIST
40767: LIST
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: LD_INT 4
40774: NEG
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: LD_INT 3
40785: NEG
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: LD_INT 5
40797: NEG
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 5
40808: NEG
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: LD_INT 4
40819: NEG
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 6
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: LD_INT 6
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: LD_INT 5
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
40873: LD_ADDR_VAR 0 30
40877: PUSH
40878: LD_INT 2
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 3
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 3
40901: PUSH
40902: LD_INT 1
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: LD_INT 1
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 4
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 4
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 4
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 5
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 5
40963: PUSH
40964: LD_INT 1
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 5
40973: PUSH
40974: LD_INT 1
40976: NEG
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 6
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 6
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
41016: LD_ADDR_VAR 0 31
41020: PUSH
41021: LD_INT 3
41023: PUSH
41024: LD_INT 2
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 3
41033: PUSH
41034: LD_INT 3
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 2
41043: PUSH
41044: LD_INT 3
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 4
41053: PUSH
41054: LD_INT 3
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 4
41063: PUSH
41064: LD_INT 4
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 3
41073: PUSH
41074: LD_INT 4
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 5
41083: PUSH
41084: LD_INT 4
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 5
41093: PUSH
41094: LD_INT 5
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 4
41103: PUSH
41104: LD_INT 5
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 6
41113: PUSH
41114: LD_INT 5
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 6
41123: PUSH
41124: LD_INT 6
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 5
41133: PUSH
41134: LD_INT 6
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
41155: LD_ADDR_VAR 0 32
41159: PUSH
41160: LD_INT 1
41162: PUSH
41163: LD_INT 3
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: LD_INT 3
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: PUSH
41180: LD_INT 1
41182: NEG
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: LD_INT 4
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 4
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: LD_INT 3
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: LD_INT 5
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 5
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: NEG
41245: PUSH
41246: LD_INT 4
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 6
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: LD_INT 6
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 5
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
41298: LD_ADDR_VAR 0 33
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: NEG
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 3
41327: NEG
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: NEG
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 4
41350: NEG
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 4
41361: NEG
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 4
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 5
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 5
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 5
41407: NEG
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 6
41418: NEG
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 6
41429: NEG
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
41453: LD_ADDR_VAR 0 34
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 3
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 3
41472: NEG
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 3
41496: NEG
41497: PUSH
41498: LD_INT 4
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 4
41508: NEG
41509: PUSH
41510: LD_INT 3
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 4
41520: NEG
41521: PUSH
41522: LD_INT 4
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 4
41532: NEG
41533: PUSH
41534: LD_INT 5
41536: NEG
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 5
41544: NEG
41545: PUSH
41546: LD_INT 4
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 5
41556: NEG
41557: PUSH
41558: LD_INT 5
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 5
41568: NEG
41569: PUSH
41570: LD_INT 6
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 6
41580: NEG
41581: PUSH
41582: LD_INT 5
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 6
41592: NEG
41593: PUSH
41594: LD_INT 6
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
41616: LD_ADDR_VAR 0 41
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: LD_INT 2
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 3
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
41660: LD_ADDR_VAR 0 42
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 1
41680: NEG
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: LIST
41700: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
41701: LD_ADDR_VAR 0 43
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 3
41718: PUSH
41719: LD_INT 2
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 2
41728: PUSH
41729: LD_INT 3
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
41741: LD_ADDR_VAR 0 44
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 3
41761: PUSH
41762: EMPTY
41763: LIST
41764: LIST
41765: PUSH
41766: LD_INT 1
41768: NEG
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: LIST
41781: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41782: LD_ADDR_VAR 0 45
41786: PUSH
41787: LD_INT 2
41789: NEG
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 2
41800: NEG
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 3
41811: NEG
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: LIST
41825: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
41826: LD_ADDR_VAR 0 46
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: LD_INT 3
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: LD_INT 2
41861: NEG
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: LIST
41871: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
41872: LD_ADDR_VAR 0 47
41876: PUSH
41877: LD_INT 2
41879: NEG
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 3
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41905: LD_ADDR_VAR 0 48
41909: PUSH
41910: LD_INT 1
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 2
41923: PUSH
41924: LD_INT 1
41926: NEG
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
41936: LD_ADDR_VAR 0 49
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 3
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
41965: LD_ADDR_VAR 0 50
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: LD_INT 3
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 3
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41994: LD_ADDR_VAR 0 51
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42025: LD_ADDR_VAR 0 52
42029: PUSH
42030: LD_INT 3
42032: NEG
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: LD_INT 2
42048: NEG
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42058: LD_ADDR_VAR 0 53
42062: PUSH
42063: LD_INT 1
42065: NEG
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 3
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42102: LD_ADDR_VAR 0 54
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 3
42130: PUSH
42131: LD_INT 1
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42143: LD_ADDR_VAR 0 55
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 2
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: LD_INT 3
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42183: LD_ADDR_VAR 0 56
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: LD_INT 3
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 3
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 1
42210: NEG
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42224: LD_ADDR_VAR 0 57
42228: PUSH
42229: LD_INT 2
42231: NEG
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: NEG
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 3
42253: NEG
42254: PUSH
42255: LD_INT 1
42257: NEG
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42268: LD_ADDR_VAR 0 58
42272: PUSH
42273: LD_INT 2
42275: NEG
42276: PUSH
42277: LD_INT 3
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 3
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 3
42299: NEG
42300: PUSH
42301: LD_INT 3
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: LIST
42313: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
42314: LD_ADDR_VAR 0 59
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42358: LD_ADDR_VAR 0 60
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
42399: LD_ADDR_VAR 0 61
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 1
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
42439: LD_ADDR_VAR 0 62
42443: PUSH
42444: LD_INT 1
42446: PUSH
42447: LD_INT 2
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
42480: LD_ADDR_VAR 0 63
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: NEG
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 2
42509: NEG
42510: PUSH
42511: LD_INT 1
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42524: LD_ADDR_VAR 0 64
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: NEG
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 2
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: LIST
42569: ST_TO_ADDR
// end ; 2 :
42570: GO 45836
42572: LD_INT 2
42574: DOUBLE
42575: EQUAL
42576: IFTRUE 42580
42578: GO 45835
42580: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
42581: LD_ADDR_VAR 0 29
42585: PUSH
42586: LD_INT 4
42588: PUSH
42589: LD_INT 0
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 4
42598: PUSH
42599: LD_INT 1
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 5
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 4
42629: PUSH
42630: LD_INT 1
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 3
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 3
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 3
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 5
42671: PUSH
42672: LD_INT 2
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 4
42701: PUSH
42702: LD_INT 3
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 4
42711: PUSH
42712: LD_INT 4
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: LD_INT 4
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: PUSH
42729: LD_INT 2
42731: PUSH
42732: LD_INT 3
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 2
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 4
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 4
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 4
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 1
42791: PUSH
42792: LD_INT 4
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: PUSH
42802: LD_INT 5
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: LD_INT 5
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: LD_INT 4
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: LD_INT 3
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: LD_INT 5
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 3
42864: NEG
42865: PUSH
42866: LD_INT 0
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 3
42875: NEG
42876: PUSH
42877: LD_INT 1
42879: NEG
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 2
42887: NEG
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 3
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 4
42920: NEG
42921: PUSH
42922: LD_INT 0
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 4
42931: NEG
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 4
42943: NEG
42944: PUSH
42945: LD_INT 2
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 4
42966: NEG
42967: PUSH
42968: LD_INT 4
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 4
42978: NEG
42979: PUSH
42980: LD_INT 5
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 3
42990: NEG
42991: PUSH
42992: LD_INT 4
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 3
43002: NEG
43003: PUSH
43004: LD_INT 3
43006: NEG
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 4
43014: NEG
43015: PUSH
43016: LD_INT 3
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 5
43026: NEG
43027: PUSH
43028: LD_INT 4
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 5
43038: NEG
43039: PUSH
43040: LD_INT 5
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 3
43050: NEG
43051: PUSH
43052: LD_INT 5
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 5
43062: NEG
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: LIST
43078: LIST
43079: LIST
43080: LIST
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
43119: LD_ADDR_VAR 0 30
43123: PUSH
43124: LD_INT 4
43126: PUSH
43127: LD_INT 4
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 4
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 5
43146: PUSH
43147: LD_INT 4
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 5
43156: PUSH
43157: LD_INT 5
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 4
43166: PUSH
43167: LD_INT 5
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 3
43176: PUSH
43177: LD_INT 4
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 3
43186: PUSH
43187: LD_INT 3
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 5
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 3
43206: PUSH
43207: LD_INT 5
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 3
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 2
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: LD_INT 3
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: LD_INT 4
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 0
43256: PUSH
43257: LD_INT 4
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 1
43277: NEG
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 4
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 4
43309: NEG
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 4
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 3
43343: NEG
43344: PUSH
43345: LD_INT 1
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 4
43354: NEG
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 5
43365: NEG
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 5
43376: NEG
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 5
43388: NEG
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: LD_INT 4
43427: NEG
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 2
43435: NEG
43436: PUSH
43437: LD_INT 3
43439: NEG
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: LD_INT 2
43451: NEG
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 3
43459: NEG
43460: PUSH
43461: LD_INT 2
43463: NEG
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 4
43471: NEG
43472: PUSH
43473: LD_INT 3
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 4
43483: NEG
43484: PUSH
43485: LD_INT 4
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 4
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 4
43507: NEG
43508: PUSH
43509: LD_INT 2
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 4
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: LD_INT 5
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 1
43541: PUSH
43542: LD_INT 4
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 3
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 1
43574: NEG
43575: PUSH
43576: LD_INT 4
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: NEG
43587: PUSH
43588: LD_INT 5
43590: NEG
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 2
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 5
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
43666: LD_ADDR_VAR 0 31
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 4
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 3
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 4
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: LD_INT 5
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 0
43713: PUSH
43714: LD_INT 5
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: LD_INT 4
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 1
43734: NEG
43735: PUSH
43736: LD_INT 3
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 5
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 3
43766: NEG
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 2
43800: NEG
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 3
43811: NEG
43812: PUSH
43813: LD_INT 1
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 4
43822: NEG
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 4
43833: NEG
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 4
43845: NEG
43846: PUSH
43847: LD_INT 2
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 4
43868: NEG
43869: PUSH
43870: LD_INT 4
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 4
43880: NEG
43881: PUSH
43882: LD_INT 5
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 3
43892: NEG
43893: PUSH
43894: LD_INT 4
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 3
43904: NEG
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 4
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 5
43928: NEG
43929: PUSH
43930: LD_INT 4
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 5
43940: NEG
43941: PUSH
43942: LD_INT 5
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 3
43952: NEG
43953: PUSH
43954: LD_INT 5
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 5
43964: NEG
43965: PUSH
43966: LD_INT 3
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 3
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 0
43987: PUSH
43988: LD_INT 4
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: LD_INT 3
44001: NEG
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 2
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 4
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: NEG
44067: PUSH
44068: LD_INT 4
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 4
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 5
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 5
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 4
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 3
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 3
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 3
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 5
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
44216: LD_ADDR_VAR 0 32
44220: PUSH
44221: LD_INT 4
44223: NEG
44224: PUSH
44225: LD_INT 0
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 4
44234: NEG
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 3
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 4
44268: NEG
44269: PUSH
44270: LD_INT 1
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 5
44279: NEG
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 5
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 5
44302: NEG
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 3
44314: NEG
44315: PUSH
44316: LD_INT 2
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 3
44325: NEG
44326: PUSH
44327: LD_INT 3
44329: NEG
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 3
44337: NEG
44338: PUSH
44339: LD_INT 4
44341: NEG
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: NEG
44350: PUSH
44351: LD_INT 3
44353: NEG
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 2
44361: NEG
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 3
44373: NEG
44374: PUSH
44375: LD_INT 2
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 4
44385: NEG
44386: PUSH
44387: LD_INT 3
44389: NEG
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 4
44397: NEG
44398: PUSH
44399: LD_INT 4
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: NEG
44410: PUSH
44411: LD_INT 4
44413: NEG
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 4
44421: NEG
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 4
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 0
44444: PUSH
44445: LD_INT 5
44447: NEG
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 4
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: LD_INT 3
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: NEG
44489: PUSH
44490: LD_INT 4
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 5
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 5
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 3
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 4
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 4
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 3
44576: PUSH
44577: LD_INT 1
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 2
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: PUSH
44597: LD_INT 1
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 4
44618: PUSH
44619: LD_INT 2
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 4
44628: PUSH
44629: LD_INT 4
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 4
44638: PUSH
44639: LD_INT 3
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 5
44648: PUSH
44649: LD_INT 4
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 5
44658: PUSH
44659: LD_INT 5
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 4
44668: PUSH
44669: LD_INT 5
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: LD_INT 4
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 3
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: EMPTY
44693: LIST
44694: LIST
44695: PUSH
44696: LD_INT 5
44698: PUSH
44699: LD_INT 3
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 3
44708: PUSH
44709: LD_INT 5
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
44763: LD_ADDR_VAR 0 33
44767: PUSH
44768: LD_INT 4
44770: NEG
44771: PUSH
44772: LD_INT 4
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 4
44782: NEG
44783: PUSH
44784: LD_INT 5
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: LD_INT 4
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 3
44806: NEG
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 4
44818: NEG
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 5
44830: NEG
44831: PUSH
44832: LD_INT 4
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 5
44842: NEG
44843: PUSH
44844: LD_INT 5
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 3
44854: NEG
44855: PUSH
44856: LD_INT 5
44858: NEG
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 5
44866: NEG
44867: PUSH
44868: LD_INT 3
44870: NEG
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 3
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 4
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: NEG
44934: PUSH
44935: LD_INT 3
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 4
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: LD_INT 4
44972: NEG
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 4
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 4
44990: PUSH
44991: LD_INT 1
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 5
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 5
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 4
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 5
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: LD_INT 3
45073: PUSH
45074: LD_INT 3
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 3
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 4
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 4
45103: PUSH
45104: LD_INT 4
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 4
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: LD_INT 4
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 4
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 3
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: PUSH
45184: LD_INT 4
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: LD_INT 5
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: LD_INT 5
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 5
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
45301: LD_ADDR_VAR 0 34
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 4
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 0
45319: PUSH
45320: LD_INT 5
45322: NEG
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 4
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 3
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: LD_INT 3
45355: NEG
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: LD_INT 4
45367: NEG
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 5
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 3
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 2
45398: NEG
45399: PUSH
45400: LD_INT 5
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 3
45420: PUSH
45421: LD_INT 1
45423: NEG
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 4
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 4
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 2
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: PUSH
45494: LD_INT 2
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 4
45503: PUSH
45504: LD_INT 4
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 4
45513: PUSH
45514: LD_INT 3
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 5
45523: PUSH
45524: LD_INT 4
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 5
45533: PUSH
45534: LD_INT 5
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 4
45543: PUSH
45544: LD_INT 5
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: LD_INT 4
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 3
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 5
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 3
45583: PUSH
45584: LD_INT 5
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 3
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: LD_INT 4
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 4
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 3
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: LD_INT 2
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 4
45686: NEG
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 4
45697: NEG
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: NEG
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 4
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 5
45742: NEG
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 5
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 5
45765: NEG
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 3
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: ST_TO_ADDR
// end ; end ;
45833: GO 45836
45835: POP
// case btype of b_depot , b_warehouse :
45836: LD_VAR 0 1
45840: PUSH
45841: LD_INT 0
45843: DOUBLE
45844: EQUAL
45845: IFTRUE 45855
45847: LD_INT 1
45849: DOUBLE
45850: EQUAL
45851: IFTRUE 45855
45853: GO 46056
45855: POP
// case nation of nation_american :
45856: LD_VAR 0 5
45860: PUSH
45861: LD_INT 1
45863: DOUBLE
45864: EQUAL
45865: IFTRUE 45869
45867: GO 45925
45869: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
45870: LD_ADDR_VAR 0 9
45874: PUSH
45875: LD_VAR 0 11
45879: PUSH
45880: LD_VAR 0 12
45884: PUSH
45885: LD_VAR 0 13
45889: PUSH
45890: LD_VAR 0 14
45894: PUSH
45895: LD_VAR 0 15
45899: PUSH
45900: LD_VAR 0 16
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: PUSH
45913: LD_VAR 0 4
45917: PUSH
45918: LD_INT 1
45920: PLUS
45921: ARRAY
45922: ST_TO_ADDR
45923: GO 46054
45925: LD_INT 2
45927: DOUBLE
45928: EQUAL
45929: IFTRUE 45933
45931: GO 45989
45933: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
45934: LD_ADDR_VAR 0 9
45938: PUSH
45939: LD_VAR 0 17
45943: PUSH
45944: LD_VAR 0 18
45948: PUSH
45949: LD_VAR 0 19
45953: PUSH
45954: LD_VAR 0 20
45958: PUSH
45959: LD_VAR 0 21
45963: PUSH
45964: LD_VAR 0 22
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: PUSH
45977: LD_VAR 0 4
45981: PUSH
45982: LD_INT 1
45984: PLUS
45985: ARRAY
45986: ST_TO_ADDR
45987: GO 46054
45989: LD_INT 3
45991: DOUBLE
45992: EQUAL
45993: IFTRUE 45997
45995: GO 46053
45997: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
45998: LD_ADDR_VAR 0 9
46002: PUSH
46003: LD_VAR 0 23
46007: PUSH
46008: LD_VAR 0 24
46012: PUSH
46013: LD_VAR 0 25
46017: PUSH
46018: LD_VAR 0 26
46022: PUSH
46023: LD_VAR 0 27
46027: PUSH
46028: LD_VAR 0 28
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: PUSH
46041: LD_VAR 0 4
46045: PUSH
46046: LD_INT 1
46048: PLUS
46049: ARRAY
46050: ST_TO_ADDR
46051: GO 46054
46053: POP
46054: GO 46609
46056: LD_INT 2
46058: DOUBLE
46059: EQUAL
46060: IFTRUE 46070
46062: LD_INT 3
46064: DOUBLE
46065: EQUAL
46066: IFTRUE 46070
46068: GO 46126
46070: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
46071: LD_ADDR_VAR 0 9
46075: PUSH
46076: LD_VAR 0 29
46080: PUSH
46081: LD_VAR 0 30
46085: PUSH
46086: LD_VAR 0 31
46090: PUSH
46091: LD_VAR 0 32
46095: PUSH
46096: LD_VAR 0 33
46100: PUSH
46101: LD_VAR 0 34
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: PUSH
46114: LD_VAR 0 4
46118: PUSH
46119: LD_INT 1
46121: PLUS
46122: ARRAY
46123: ST_TO_ADDR
46124: GO 46609
46126: LD_INT 16
46128: DOUBLE
46129: EQUAL
46130: IFTRUE 46188
46132: LD_INT 17
46134: DOUBLE
46135: EQUAL
46136: IFTRUE 46188
46138: LD_INT 18
46140: DOUBLE
46141: EQUAL
46142: IFTRUE 46188
46144: LD_INT 19
46146: DOUBLE
46147: EQUAL
46148: IFTRUE 46188
46150: LD_INT 22
46152: DOUBLE
46153: EQUAL
46154: IFTRUE 46188
46156: LD_INT 20
46158: DOUBLE
46159: EQUAL
46160: IFTRUE 46188
46162: LD_INT 21
46164: DOUBLE
46165: EQUAL
46166: IFTRUE 46188
46168: LD_INT 23
46170: DOUBLE
46171: EQUAL
46172: IFTRUE 46188
46174: LD_INT 24
46176: DOUBLE
46177: EQUAL
46178: IFTRUE 46188
46180: LD_INT 25
46182: DOUBLE
46183: EQUAL
46184: IFTRUE 46188
46186: GO 46244
46188: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
46189: LD_ADDR_VAR 0 9
46193: PUSH
46194: LD_VAR 0 35
46198: PUSH
46199: LD_VAR 0 36
46203: PUSH
46204: LD_VAR 0 37
46208: PUSH
46209: LD_VAR 0 38
46213: PUSH
46214: LD_VAR 0 39
46218: PUSH
46219: LD_VAR 0 40
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: PUSH
46232: LD_VAR 0 4
46236: PUSH
46237: LD_INT 1
46239: PLUS
46240: ARRAY
46241: ST_TO_ADDR
46242: GO 46609
46244: LD_INT 6
46246: DOUBLE
46247: EQUAL
46248: IFTRUE 46300
46250: LD_INT 7
46252: DOUBLE
46253: EQUAL
46254: IFTRUE 46300
46256: LD_INT 8
46258: DOUBLE
46259: EQUAL
46260: IFTRUE 46300
46262: LD_INT 13
46264: DOUBLE
46265: EQUAL
46266: IFTRUE 46300
46268: LD_INT 12
46270: DOUBLE
46271: EQUAL
46272: IFTRUE 46300
46274: LD_INT 15
46276: DOUBLE
46277: EQUAL
46278: IFTRUE 46300
46280: LD_INT 11
46282: DOUBLE
46283: EQUAL
46284: IFTRUE 46300
46286: LD_INT 14
46288: DOUBLE
46289: EQUAL
46290: IFTRUE 46300
46292: LD_INT 10
46294: DOUBLE
46295: EQUAL
46296: IFTRUE 46300
46298: GO 46356
46300: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
46301: LD_ADDR_VAR 0 9
46305: PUSH
46306: LD_VAR 0 41
46310: PUSH
46311: LD_VAR 0 42
46315: PUSH
46316: LD_VAR 0 43
46320: PUSH
46321: LD_VAR 0 44
46325: PUSH
46326: LD_VAR 0 45
46330: PUSH
46331: LD_VAR 0 46
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: PUSH
46344: LD_VAR 0 4
46348: PUSH
46349: LD_INT 1
46351: PLUS
46352: ARRAY
46353: ST_TO_ADDR
46354: GO 46609
46356: LD_INT 36
46358: DOUBLE
46359: EQUAL
46360: IFTRUE 46364
46362: GO 46420
46364: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
46365: LD_ADDR_VAR 0 9
46369: PUSH
46370: LD_VAR 0 47
46374: PUSH
46375: LD_VAR 0 48
46379: PUSH
46380: LD_VAR 0 49
46384: PUSH
46385: LD_VAR 0 50
46389: PUSH
46390: LD_VAR 0 51
46394: PUSH
46395: LD_VAR 0 52
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: PUSH
46408: LD_VAR 0 4
46412: PUSH
46413: LD_INT 1
46415: PLUS
46416: ARRAY
46417: ST_TO_ADDR
46418: GO 46609
46420: LD_INT 4
46422: DOUBLE
46423: EQUAL
46424: IFTRUE 46446
46426: LD_INT 5
46428: DOUBLE
46429: EQUAL
46430: IFTRUE 46446
46432: LD_INT 34
46434: DOUBLE
46435: EQUAL
46436: IFTRUE 46446
46438: LD_INT 37
46440: DOUBLE
46441: EQUAL
46442: IFTRUE 46446
46444: GO 46502
46446: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
46447: LD_ADDR_VAR 0 9
46451: PUSH
46452: LD_VAR 0 53
46456: PUSH
46457: LD_VAR 0 54
46461: PUSH
46462: LD_VAR 0 55
46466: PUSH
46467: LD_VAR 0 56
46471: PUSH
46472: LD_VAR 0 57
46476: PUSH
46477: LD_VAR 0 58
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: PUSH
46490: LD_VAR 0 4
46494: PUSH
46495: LD_INT 1
46497: PLUS
46498: ARRAY
46499: ST_TO_ADDR
46500: GO 46609
46502: LD_INT 31
46504: DOUBLE
46505: EQUAL
46506: IFTRUE 46552
46508: LD_INT 32
46510: DOUBLE
46511: EQUAL
46512: IFTRUE 46552
46514: LD_INT 33
46516: DOUBLE
46517: EQUAL
46518: IFTRUE 46552
46520: LD_INT 27
46522: DOUBLE
46523: EQUAL
46524: IFTRUE 46552
46526: LD_INT 26
46528: DOUBLE
46529: EQUAL
46530: IFTRUE 46552
46532: LD_INT 28
46534: DOUBLE
46535: EQUAL
46536: IFTRUE 46552
46538: LD_INT 29
46540: DOUBLE
46541: EQUAL
46542: IFTRUE 46552
46544: LD_INT 30
46546: DOUBLE
46547: EQUAL
46548: IFTRUE 46552
46550: GO 46608
46552: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
46553: LD_ADDR_VAR 0 9
46557: PUSH
46558: LD_VAR 0 59
46562: PUSH
46563: LD_VAR 0 60
46567: PUSH
46568: LD_VAR 0 61
46572: PUSH
46573: LD_VAR 0 62
46577: PUSH
46578: LD_VAR 0 63
46582: PUSH
46583: LD_VAR 0 64
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: PUSH
46596: LD_VAR 0 4
46600: PUSH
46601: LD_INT 1
46603: PLUS
46604: ARRAY
46605: ST_TO_ADDR
46606: GO 46609
46608: POP
// temp_list2 = [ ] ;
46609: LD_ADDR_VAR 0 10
46613: PUSH
46614: EMPTY
46615: ST_TO_ADDR
// for i in temp_list do
46616: LD_ADDR_VAR 0 8
46620: PUSH
46621: LD_VAR 0 9
46625: PUSH
46626: FOR_IN
46627: IFFALSE 46679
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
46629: LD_ADDR_VAR 0 10
46633: PUSH
46634: LD_VAR 0 10
46638: PUSH
46639: LD_VAR 0 8
46643: PUSH
46644: LD_INT 1
46646: ARRAY
46647: PUSH
46648: LD_VAR 0 2
46652: PLUS
46653: PUSH
46654: LD_VAR 0 8
46658: PUSH
46659: LD_INT 2
46661: ARRAY
46662: PUSH
46663: LD_VAR 0 3
46667: PLUS
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: EMPTY
46674: LIST
46675: ADD
46676: ST_TO_ADDR
46677: GO 46626
46679: POP
46680: POP
// result = temp_list2 ;
46681: LD_ADDR_VAR 0 7
46685: PUSH
46686: LD_VAR 0 10
46690: ST_TO_ADDR
// end ;
46691: LD_VAR 0 7
46695: RET
// export function EnemyInRange ( unit , dist ) ; begin
46696: LD_INT 0
46698: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
46699: LD_ADDR_VAR 0 3
46703: PUSH
46704: LD_VAR 0 1
46708: PPUSH
46709: CALL_OW 255
46713: PPUSH
46714: LD_VAR 0 1
46718: PPUSH
46719: CALL_OW 250
46723: PPUSH
46724: LD_VAR 0 1
46728: PPUSH
46729: CALL_OW 251
46733: PPUSH
46734: LD_VAR 0 2
46738: PPUSH
46739: CALL 20069 0 4
46743: PUSH
46744: LD_INT 4
46746: ARRAY
46747: ST_TO_ADDR
// end ;
46748: LD_VAR 0 3
46752: RET
// export function PlayerSeeMe ( unit ) ; begin
46753: LD_INT 0
46755: PPUSH
// result := See ( your_side , unit ) ;
46756: LD_ADDR_VAR 0 2
46760: PUSH
46761: LD_OWVAR 2
46765: PPUSH
46766: LD_VAR 0 1
46770: PPUSH
46771: CALL_OW 292
46775: ST_TO_ADDR
// end ;
46776: LD_VAR 0 2
46780: RET
// export function ReverseDir ( unit ) ; begin
46781: LD_INT 0
46783: PPUSH
// if not unit then
46784: LD_VAR 0 1
46788: NOT
46789: IFFALSE 46793
// exit ;
46791: GO 46816
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
46793: LD_ADDR_VAR 0 2
46797: PUSH
46798: LD_VAR 0 1
46802: PPUSH
46803: CALL_OW 254
46807: PUSH
46808: LD_INT 3
46810: PLUS
46811: PUSH
46812: LD_INT 6
46814: MOD
46815: ST_TO_ADDR
// end ;
46816: LD_VAR 0 2
46820: RET
// export function ReverseArray ( array ) ; var i ; begin
46821: LD_INT 0
46823: PPUSH
46824: PPUSH
// if not array then
46825: LD_VAR 0 1
46829: NOT
46830: IFFALSE 46834
// exit ;
46832: GO 46889
// result := [ ] ;
46834: LD_ADDR_VAR 0 2
46838: PUSH
46839: EMPTY
46840: ST_TO_ADDR
// for i := array downto 1 do
46841: LD_ADDR_VAR 0 3
46845: PUSH
46846: DOUBLE
46847: LD_VAR 0 1
46851: INC
46852: ST_TO_ADDR
46853: LD_INT 1
46855: PUSH
46856: FOR_DOWNTO
46857: IFFALSE 46887
// result := Join ( result , array [ i ] ) ;
46859: LD_ADDR_VAR 0 2
46863: PUSH
46864: LD_VAR 0 2
46868: PPUSH
46869: LD_VAR 0 1
46873: PUSH
46874: LD_VAR 0 3
46878: ARRAY
46879: PPUSH
46880: CALL 51534 0 2
46884: ST_TO_ADDR
46885: GO 46856
46887: POP
46888: POP
// end ;
46889: LD_VAR 0 2
46893: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
46894: LD_INT 0
46896: PPUSH
46897: PPUSH
46898: PPUSH
46899: PPUSH
46900: PPUSH
46901: PPUSH
// if not unit or not hexes then
46902: LD_VAR 0 1
46906: NOT
46907: PUSH
46908: LD_VAR 0 2
46912: NOT
46913: OR
46914: IFFALSE 46918
// exit ;
46916: GO 47041
// dist := 9999 ;
46918: LD_ADDR_VAR 0 5
46922: PUSH
46923: LD_INT 9999
46925: ST_TO_ADDR
// for i = 1 to hexes do
46926: LD_ADDR_VAR 0 4
46930: PUSH
46931: DOUBLE
46932: LD_INT 1
46934: DEC
46935: ST_TO_ADDR
46936: LD_VAR 0 2
46940: PUSH
46941: FOR_TO
46942: IFFALSE 47029
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46944: LD_ADDR_VAR 0 6
46948: PUSH
46949: LD_VAR 0 1
46953: PPUSH
46954: LD_VAR 0 2
46958: PUSH
46959: LD_VAR 0 4
46963: ARRAY
46964: PUSH
46965: LD_INT 1
46967: ARRAY
46968: PPUSH
46969: LD_VAR 0 2
46973: PUSH
46974: LD_VAR 0 4
46978: ARRAY
46979: PUSH
46980: LD_INT 2
46982: ARRAY
46983: PPUSH
46984: CALL_OW 297
46988: ST_TO_ADDR
// if tdist < dist then
46989: LD_VAR 0 6
46993: PUSH
46994: LD_VAR 0 5
46998: LESS
46999: IFFALSE 47027
// begin hex := hexes [ i ] ;
47001: LD_ADDR_VAR 0 8
47005: PUSH
47006: LD_VAR 0 2
47010: PUSH
47011: LD_VAR 0 4
47015: ARRAY
47016: ST_TO_ADDR
// dist := tdist ;
47017: LD_ADDR_VAR 0 5
47021: PUSH
47022: LD_VAR 0 6
47026: ST_TO_ADDR
// end ; end ;
47027: GO 46941
47029: POP
47030: POP
// result := hex ;
47031: LD_ADDR_VAR 0 3
47035: PUSH
47036: LD_VAR 0 8
47040: ST_TO_ADDR
// end ;
47041: LD_VAR 0 3
47045: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
47046: LD_INT 0
47048: PPUSH
47049: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
47050: LD_VAR 0 1
47054: NOT
47055: PUSH
47056: LD_VAR 0 1
47060: PUSH
47061: LD_INT 21
47063: PUSH
47064: LD_INT 2
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 23
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PPUSH
47085: CALL_OW 69
47089: IN
47090: NOT
47091: OR
47092: IFFALSE 47096
// exit ;
47094: GO 47143
// for i = 1 to 3 do
47096: LD_ADDR_VAR 0 3
47100: PUSH
47101: DOUBLE
47102: LD_INT 1
47104: DEC
47105: ST_TO_ADDR
47106: LD_INT 3
47108: PUSH
47109: FOR_TO
47110: IFFALSE 47141
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
47112: LD_VAR 0 1
47116: PPUSH
47117: CALL_OW 250
47121: PPUSH
47122: LD_VAR 0 1
47126: PPUSH
47127: CALL_OW 251
47131: PPUSH
47132: LD_INT 1
47134: PPUSH
47135: CALL_OW 453
47139: GO 47109
47141: POP
47142: POP
// end ;
47143: LD_VAR 0 2
47147: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
47148: LD_INT 0
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
// if not unit or not enemy_unit then
47156: LD_VAR 0 1
47160: NOT
47161: PUSH
47162: LD_VAR 0 2
47166: NOT
47167: OR
47168: IFFALSE 47172
// exit ;
47170: GO 47639
// if GetLives ( i ) < 250 then
47172: LD_VAR 0 4
47176: PPUSH
47177: CALL_OW 256
47181: PUSH
47182: LD_INT 250
47184: LESS
47185: IFFALSE 47198
// begin ComAutodestruct ( i ) ;
47187: LD_VAR 0 4
47191: PPUSH
47192: CALL 47046 0 1
// exit ;
47196: GO 47639
// end ; x := GetX ( enemy_unit ) ;
47198: LD_ADDR_VAR 0 7
47202: PUSH
47203: LD_VAR 0 2
47207: PPUSH
47208: CALL_OW 250
47212: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
47213: LD_ADDR_VAR 0 8
47217: PUSH
47218: LD_VAR 0 2
47222: PPUSH
47223: CALL_OW 251
47227: ST_TO_ADDR
// if not x or not y then
47228: LD_VAR 0 7
47232: NOT
47233: PUSH
47234: LD_VAR 0 8
47238: NOT
47239: OR
47240: IFFALSE 47244
// exit ;
47242: GO 47639
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
47244: LD_ADDR_VAR 0 6
47248: PUSH
47249: LD_VAR 0 7
47253: PPUSH
47254: LD_INT 0
47256: PPUSH
47257: LD_INT 4
47259: PPUSH
47260: CALL_OW 272
47264: PUSH
47265: LD_VAR 0 8
47269: PPUSH
47270: LD_INT 0
47272: PPUSH
47273: LD_INT 4
47275: PPUSH
47276: CALL_OW 273
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_VAR 0 7
47289: PPUSH
47290: LD_INT 1
47292: PPUSH
47293: LD_INT 4
47295: PPUSH
47296: CALL_OW 272
47300: PUSH
47301: LD_VAR 0 8
47305: PPUSH
47306: LD_INT 1
47308: PPUSH
47309: LD_INT 4
47311: PPUSH
47312: CALL_OW 273
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_VAR 0 7
47325: PPUSH
47326: LD_INT 2
47328: PPUSH
47329: LD_INT 4
47331: PPUSH
47332: CALL_OW 272
47336: PUSH
47337: LD_VAR 0 8
47341: PPUSH
47342: LD_INT 2
47344: PPUSH
47345: LD_INT 4
47347: PPUSH
47348: CALL_OW 273
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_VAR 0 7
47361: PPUSH
47362: LD_INT 3
47364: PPUSH
47365: LD_INT 4
47367: PPUSH
47368: CALL_OW 272
47372: PUSH
47373: LD_VAR 0 8
47377: PPUSH
47378: LD_INT 3
47380: PPUSH
47381: LD_INT 4
47383: PPUSH
47384: CALL_OW 273
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_VAR 0 7
47397: PPUSH
47398: LD_INT 4
47400: PPUSH
47401: LD_INT 4
47403: PPUSH
47404: CALL_OW 272
47408: PUSH
47409: LD_VAR 0 8
47413: PPUSH
47414: LD_INT 4
47416: PPUSH
47417: LD_INT 4
47419: PPUSH
47420: CALL_OW 273
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_VAR 0 7
47433: PPUSH
47434: LD_INT 5
47436: PPUSH
47437: LD_INT 4
47439: PPUSH
47440: CALL_OW 272
47444: PUSH
47445: LD_VAR 0 8
47449: PPUSH
47450: LD_INT 5
47452: PPUSH
47453: LD_INT 4
47455: PPUSH
47456: CALL_OW 273
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: ST_TO_ADDR
// for i = tmp downto 1 do
47473: LD_ADDR_VAR 0 4
47477: PUSH
47478: DOUBLE
47479: LD_VAR 0 6
47483: INC
47484: ST_TO_ADDR
47485: LD_INT 1
47487: PUSH
47488: FOR_DOWNTO
47489: IFFALSE 47590
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
47491: LD_VAR 0 6
47495: PUSH
47496: LD_VAR 0 4
47500: ARRAY
47501: PUSH
47502: LD_INT 1
47504: ARRAY
47505: PPUSH
47506: LD_VAR 0 6
47510: PUSH
47511: LD_VAR 0 4
47515: ARRAY
47516: PUSH
47517: LD_INT 2
47519: ARRAY
47520: PPUSH
47521: CALL_OW 488
47525: NOT
47526: PUSH
47527: LD_VAR 0 6
47531: PUSH
47532: LD_VAR 0 4
47536: ARRAY
47537: PUSH
47538: LD_INT 1
47540: ARRAY
47541: PPUSH
47542: LD_VAR 0 6
47546: PUSH
47547: LD_VAR 0 4
47551: ARRAY
47552: PUSH
47553: LD_INT 2
47555: ARRAY
47556: PPUSH
47557: CALL_OW 428
47561: PUSH
47562: LD_INT 0
47564: NONEQUAL
47565: OR
47566: IFFALSE 47588
// tmp := Delete ( tmp , i ) ;
47568: LD_ADDR_VAR 0 6
47572: PUSH
47573: LD_VAR 0 6
47577: PPUSH
47578: LD_VAR 0 4
47582: PPUSH
47583: CALL_OW 3
47587: ST_TO_ADDR
47588: GO 47488
47590: POP
47591: POP
// j := GetClosestHex ( unit , tmp ) ;
47592: LD_ADDR_VAR 0 5
47596: PUSH
47597: LD_VAR 0 1
47601: PPUSH
47602: LD_VAR 0 6
47606: PPUSH
47607: CALL 46894 0 2
47611: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
47612: LD_VAR 0 1
47616: PPUSH
47617: LD_VAR 0 5
47621: PUSH
47622: LD_INT 1
47624: ARRAY
47625: PPUSH
47626: LD_VAR 0 5
47630: PUSH
47631: LD_INT 2
47633: ARRAY
47634: PPUSH
47635: CALL_OW 111
// end ;
47639: LD_VAR 0 3
47643: RET
// export function PrepareApemanSoldier ( ) ; begin
47644: LD_INT 0
47646: PPUSH
// uc_nation := 0 ;
47647: LD_ADDR_OWVAR 21
47651: PUSH
47652: LD_INT 0
47654: ST_TO_ADDR
// hc_sex := sex_male ;
47655: LD_ADDR_OWVAR 27
47659: PUSH
47660: LD_INT 1
47662: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
47663: LD_ADDR_OWVAR 28
47667: PUSH
47668: LD_INT 15
47670: ST_TO_ADDR
// hc_gallery :=  ;
47671: LD_ADDR_OWVAR 33
47675: PUSH
47676: LD_STRING 
47678: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47679: LD_ADDR_OWVAR 31
47683: PUSH
47684: LD_INT 0
47686: PPUSH
47687: LD_INT 3
47689: PPUSH
47690: CALL_OW 12
47694: PUSH
47695: LD_INT 0
47697: PPUSH
47698: LD_INT 3
47700: PPUSH
47701: CALL_OW 12
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// end ;
47718: LD_VAR 0 1
47722: RET
// export function PrepareApemanEngineer ( ) ; begin
47723: LD_INT 0
47725: PPUSH
// uc_nation := 0 ;
47726: LD_ADDR_OWVAR 21
47730: PUSH
47731: LD_INT 0
47733: ST_TO_ADDR
// hc_sex := sex_male ;
47734: LD_ADDR_OWVAR 27
47738: PUSH
47739: LD_INT 1
47741: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
47742: LD_ADDR_OWVAR 28
47746: PUSH
47747: LD_INT 16
47749: ST_TO_ADDR
// hc_gallery :=  ;
47750: LD_ADDR_OWVAR 33
47754: PUSH
47755: LD_STRING 
47757: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47758: LD_ADDR_OWVAR 31
47762: PUSH
47763: LD_INT 0
47765: PPUSH
47766: LD_INT 3
47768: PPUSH
47769: CALL_OW 12
47773: PUSH
47774: LD_INT 0
47776: PPUSH
47777: LD_INT 3
47779: PPUSH
47780: CALL_OW 12
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: ST_TO_ADDR
// end ;
47797: LD_VAR 0 1
47801: RET
// export function PrepareApeman ( agressivity ) ; begin
47802: LD_INT 0
47804: PPUSH
// uc_side := 0 ;
47805: LD_ADDR_OWVAR 20
47809: PUSH
47810: LD_INT 0
47812: ST_TO_ADDR
// uc_nation := 0 ;
47813: LD_ADDR_OWVAR 21
47817: PUSH
47818: LD_INT 0
47820: ST_TO_ADDR
// hc_sex := sex_male ;
47821: LD_ADDR_OWVAR 27
47825: PUSH
47826: LD_INT 1
47828: ST_TO_ADDR
// hc_class := class_apeman ;
47829: LD_ADDR_OWVAR 28
47833: PUSH
47834: LD_INT 12
47836: ST_TO_ADDR
// hc_gallery :=  ;
47837: LD_ADDR_OWVAR 33
47841: PUSH
47842: LD_STRING 
47844: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47845: LD_ADDR_OWVAR 35
47849: PUSH
47850: LD_VAR 0 1
47854: NEG
47855: PPUSH
47856: LD_VAR 0 1
47860: PPUSH
47861: CALL_OW 12
47865: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
47866: LD_ADDR_OWVAR 31
47870: PUSH
47871: LD_INT 0
47873: PPUSH
47874: LD_INT 3
47876: PPUSH
47877: CALL_OW 12
47881: PUSH
47882: LD_INT 0
47884: PPUSH
47885: LD_INT 3
47887: PPUSH
47888: CALL_OW 12
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: ST_TO_ADDR
// end ;
47905: LD_VAR 0 2
47909: RET
// export function PrepareTiger ( agressivity ) ; begin
47910: LD_INT 0
47912: PPUSH
// uc_side := 0 ;
47913: LD_ADDR_OWVAR 20
47917: PUSH
47918: LD_INT 0
47920: ST_TO_ADDR
// uc_nation := 0 ;
47921: LD_ADDR_OWVAR 21
47925: PUSH
47926: LD_INT 0
47928: ST_TO_ADDR
// hc_class := class_tiger ;
47929: LD_ADDR_OWVAR 28
47933: PUSH
47934: LD_INT 14
47936: ST_TO_ADDR
// hc_gallery :=  ;
47937: LD_ADDR_OWVAR 33
47941: PUSH
47942: LD_STRING 
47944: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
47945: LD_ADDR_OWVAR 35
47949: PUSH
47950: LD_VAR 0 1
47954: NEG
47955: PPUSH
47956: LD_VAR 0 1
47960: PPUSH
47961: CALL_OW 12
47965: ST_TO_ADDR
// end ;
47966: LD_VAR 0 2
47970: RET
// export function PrepareEnchidna ( ) ; begin
47971: LD_INT 0
47973: PPUSH
// uc_side := 0 ;
47974: LD_ADDR_OWVAR 20
47978: PUSH
47979: LD_INT 0
47981: ST_TO_ADDR
// uc_nation := 0 ;
47982: LD_ADDR_OWVAR 21
47986: PUSH
47987: LD_INT 0
47989: ST_TO_ADDR
// hc_class := class_baggie ;
47990: LD_ADDR_OWVAR 28
47994: PUSH
47995: LD_INT 13
47997: ST_TO_ADDR
// hc_gallery :=  ;
47998: LD_ADDR_OWVAR 33
48002: PUSH
48003: LD_STRING 
48005: ST_TO_ADDR
// end ;
48006: LD_VAR 0 1
48010: RET
// export function PrepareFrog ( ) ; begin
48011: LD_INT 0
48013: PPUSH
// uc_side := 0 ;
48014: LD_ADDR_OWVAR 20
48018: PUSH
48019: LD_INT 0
48021: ST_TO_ADDR
// uc_nation := 0 ;
48022: LD_ADDR_OWVAR 21
48026: PUSH
48027: LD_INT 0
48029: ST_TO_ADDR
// hc_class := class_frog ;
48030: LD_ADDR_OWVAR 28
48034: PUSH
48035: LD_INT 19
48037: ST_TO_ADDR
// hc_gallery :=  ;
48038: LD_ADDR_OWVAR 33
48042: PUSH
48043: LD_STRING 
48045: ST_TO_ADDR
// end ;
48046: LD_VAR 0 1
48050: RET
// export function PrepareFish ( ) ; begin
48051: LD_INT 0
48053: PPUSH
// uc_side := 0 ;
48054: LD_ADDR_OWVAR 20
48058: PUSH
48059: LD_INT 0
48061: ST_TO_ADDR
// uc_nation := 0 ;
48062: LD_ADDR_OWVAR 21
48066: PUSH
48067: LD_INT 0
48069: ST_TO_ADDR
// hc_class := class_fish ;
48070: LD_ADDR_OWVAR 28
48074: PUSH
48075: LD_INT 20
48077: ST_TO_ADDR
// hc_gallery :=  ;
48078: LD_ADDR_OWVAR 33
48082: PUSH
48083: LD_STRING 
48085: ST_TO_ADDR
// end ;
48086: LD_VAR 0 1
48090: RET
// export function PrepareBird ( ) ; begin
48091: LD_INT 0
48093: PPUSH
// uc_side := 0 ;
48094: LD_ADDR_OWVAR 20
48098: PUSH
48099: LD_INT 0
48101: ST_TO_ADDR
// uc_nation := 0 ;
48102: LD_ADDR_OWVAR 21
48106: PUSH
48107: LD_INT 0
48109: ST_TO_ADDR
// hc_class := class_phororhacos ;
48110: LD_ADDR_OWVAR 28
48114: PUSH
48115: LD_INT 18
48117: ST_TO_ADDR
// hc_gallery :=  ;
48118: LD_ADDR_OWVAR 33
48122: PUSH
48123: LD_STRING 
48125: ST_TO_ADDR
// end ;
48126: LD_VAR 0 1
48130: RET
// export function PrepareHorse ( ) ; begin
48131: LD_INT 0
48133: PPUSH
// uc_side := 0 ;
48134: LD_ADDR_OWVAR 20
48138: PUSH
48139: LD_INT 0
48141: ST_TO_ADDR
// uc_nation := 0 ;
48142: LD_ADDR_OWVAR 21
48146: PUSH
48147: LD_INT 0
48149: ST_TO_ADDR
// hc_class := class_horse ;
48150: LD_ADDR_OWVAR 28
48154: PUSH
48155: LD_INT 21
48157: ST_TO_ADDR
// hc_gallery :=  ;
48158: LD_ADDR_OWVAR 33
48162: PUSH
48163: LD_STRING 
48165: ST_TO_ADDR
// end ;
48166: LD_VAR 0 1
48170: RET
// export function PrepareMastodont ( ) ; begin
48171: LD_INT 0
48173: PPUSH
// uc_side := 0 ;
48174: LD_ADDR_OWVAR 20
48178: PUSH
48179: LD_INT 0
48181: ST_TO_ADDR
// uc_nation := 0 ;
48182: LD_ADDR_OWVAR 21
48186: PUSH
48187: LD_INT 0
48189: ST_TO_ADDR
// vc_chassis := class_mastodont ;
48190: LD_ADDR_OWVAR 37
48194: PUSH
48195: LD_INT 31
48197: ST_TO_ADDR
// vc_control := control_rider ;
48198: LD_ADDR_OWVAR 38
48202: PUSH
48203: LD_INT 4
48205: ST_TO_ADDR
// end ;
48206: LD_VAR 0 1
48210: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48211: LD_INT 0
48213: PPUSH
48214: PPUSH
48215: PPUSH
// uc_side = 0 ;
48216: LD_ADDR_OWVAR 20
48220: PUSH
48221: LD_INT 0
48223: ST_TO_ADDR
// uc_nation = 0 ;
48224: LD_ADDR_OWVAR 21
48228: PUSH
48229: LD_INT 0
48231: ST_TO_ADDR
// InitHc_All ( ) ;
48232: CALL_OW 584
// InitVc ;
48236: CALL_OW 20
// if mastodonts then
48240: LD_VAR 0 6
48244: IFFALSE 48311
// for i = 1 to mastodonts do
48246: LD_ADDR_VAR 0 11
48250: PUSH
48251: DOUBLE
48252: LD_INT 1
48254: DEC
48255: ST_TO_ADDR
48256: LD_VAR 0 6
48260: PUSH
48261: FOR_TO
48262: IFFALSE 48309
// begin vc_chassis := 31 ;
48264: LD_ADDR_OWVAR 37
48268: PUSH
48269: LD_INT 31
48271: ST_TO_ADDR
// vc_control := control_rider ;
48272: LD_ADDR_OWVAR 38
48276: PUSH
48277: LD_INT 4
48279: ST_TO_ADDR
// animal := CreateVehicle ;
48280: LD_ADDR_VAR 0 12
48284: PUSH
48285: CALL_OW 45
48289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48290: LD_VAR 0 12
48294: PPUSH
48295: LD_VAR 0 8
48299: PPUSH
48300: LD_INT 0
48302: PPUSH
48303: CALL 50439 0 3
// end ;
48307: GO 48261
48309: POP
48310: POP
// if horses then
48311: LD_VAR 0 5
48315: IFFALSE 48382
// for i = 1 to horses do
48317: LD_ADDR_VAR 0 11
48321: PUSH
48322: DOUBLE
48323: LD_INT 1
48325: DEC
48326: ST_TO_ADDR
48327: LD_VAR 0 5
48331: PUSH
48332: FOR_TO
48333: IFFALSE 48380
// begin hc_class := 21 ;
48335: LD_ADDR_OWVAR 28
48339: PUSH
48340: LD_INT 21
48342: ST_TO_ADDR
// hc_gallery :=  ;
48343: LD_ADDR_OWVAR 33
48347: PUSH
48348: LD_STRING 
48350: ST_TO_ADDR
// animal := CreateHuman ;
48351: LD_ADDR_VAR 0 12
48355: PUSH
48356: CALL_OW 44
48360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48361: LD_VAR 0 12
48365: PPUSH
48366: LD_VAR 0 8
48370: PPUSH
48371: LD_INT 0
48373: PPUSH
48374: CALL 50439 0 3
// end ;
48378: GO 48332
48380: POP
48381: POP
// if birds then
48382: LD_VAR 0 1
48386: IFFALSE 48453
// for i = 1 to birds do
48388: LD_ADDR_VAR 0 11
48392: PUSH
48393: DOUBLE
48394: LD_INT 1
48396: DEC
48397: ST_TO_ADDR
48398: LD_VAR 0 1
48402: PUSH
48403: FOR_TO
48404: IFFALSE 48451
// begin hc_class := 18 ;
48406: LD_ADDR_OWVAR 28
48410: PUSH
48411: LD_INT 18
48413: ST_TO_ADDR
// hc_gallery =  ;
48414: LD_ADDR_OWVAR 33
48418: PUSH
48419: LD_STRING 
48421: ST_TO_ADDR
// animal := CreateHuman ;
48422: LD_ADDR_VAR 0 12
48426: PUSH
48427: CALL_OW 44
48431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48432: LD_VAR 0 12
48436: PPUSH
48437: LD_VAR 0 8
48441: PPUSH
48442: LD_INT 0
48444: PPUSH
48445: CALL 50439 0 3
// end ;
48449: GO 48403
48451: POP
48452: POP
// if tigers then
48453: LD_VAR 0 2
48457: IFFALSE 48541
// for i = 1 to tigers do
48459: LD_ADDR_VAR 0 11
48463: PUSH
48464: DOUBLE
48465: LD_INT 1
48467: DEC
48468: ST_TO_ADDR
48469: LD_VAR 0 2
48473: PUSH
48474: FOR_TO
48475: IFFALSE 48539
// begin hc_class = class_tiger ;
48477: LD_ADDR_OWVAR 28
48481: PUSH
48482: LD_INT 14
48484: ST_TO_ADDR
// hc_gallery =  ;
48485: LD_ADDR_OWVAR 33
48489: PUSH
48490: LD_STRING 
48492: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
48493: LD_ADDR_OWVAR 35
48497: PUSH
48498: LD_INT 7
48500: NEG
48501: PPUSH
48502: LD_INT 7
48504: PPUSH
48505: CALL_OW 12
48509: ST_TO_ADDR
// animal := CreateHuman ;
48510: LD_ADDR_VAR 0 12
48514: PUSH
48515: CALL_OW 44
48519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48520: LD_VAR 0 12
48524: PPUSH
48525: LD_VAR 0 8
48529: PPUSH
48530: LD_INT 0
48532: PPUSH
48533: CALL 50439 0 3
// end ;
48537: GO 48474
48539: POP
48540: POP
// if apemans then
48541: LD_VAR 0 3
48545: IFFALSE 48668
// for i = 1 to apemans do
48547: LD_ADDR_VAR 0 11
48551: PUSH
48552: DOUBLE
48553: LD_INT 1
48555: DEC
48556: ST_TO_ADDR
48557: LD_VAR 0 3
48561: PUSH
48562: FOR_TO
48563: IFFALSE 48666
// begin hc_class = class_apeman ;
48565: LD_ADDR_OWVAR 28
48569: PUSH
48570: LD_INT 12
48572: ST_TO_ADDR
// hc_gallery =  ;
48573: LD_ADDR_OWVAR 33
48577: PUSH
48578: LD_STRING 
48580: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
48581: LD_ADDR_OWVAR 35
48585: PUSH
48586: LD_INT 2
48588: NEG
48589: PPUSH
48590: LD_INT 2
48592: PPUSH
48593: CALL_OW 12
48597: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
48598: LD_ADDR_OWVAR 31
48602: PUSH
48603: LD_INT 1
48605: PPUSH
48606: LD_INT 3
48608: PPUSH
48609: CALL_OW 12
48613: PUSH
48614: LD_INT 1
48616: PPUSH
48617: LD_INT 3
48619: PPUSH
48620: CALL_OW 12
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: ST_TO_ADDR
// animal := CreateHuman ;
48637: LD_ADDR_VAR 0 12
48641: PUSH
48642: CALL_OW 44
48646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48647: LD_VAR 0 12
48651: PPUSH
48652: LD_VAR 0 8
48656: PPUSH
48657: LD_INT 0
48659: PPUSH
48660: CALL 50439 0 3
// end ;
48664: GO 48562
48666: POP
48667: POP
// if enchidnas then
48668: LD_VAR 0 4
48672: IFFALSE 48739
// for i = 1 to enchidnas do
48674: LD_ADDR_VAR 0 11
48678: PUSH
48679: DOUBLE
48680: LD_INT 1
48682: DEC
48683: ST_TO_ADDR
48684: LD_VAR 0 4
48688: PUSH
48689: FOR_TO
48690: IFFALSE 48737
// begin hc_class = 13 ;
48692: LD_ADDR_OWVAR 28
48696: PUSH
48697: LD_INT 13
48699: ST_TO_ADDR
// hc_gallery =  ;
48700: LD_ADDR_OWVAR 33
48704: PUSH
48705: LD_STRING 
48707: ST_TO_ADDR
// animal := CreateHuman ;
48708: LD_ADDR_VAR 0 12
48712: PUSH
48713: CALL_OW 44
48717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48718: LD_VAR 0 12
48722: PPUSH
48723: LD_VAR 0 8
48727: PPUSH
48728: LD_INT 0
48730: PPUSH
48731: CALL 50439 0 3
// end ;
48735: GO 48689
48737: POP
48738: POP
// if fishes then
48739: LD_VAR 0 7
48743: IFFALSE 48810
// for i = 1 to fishes do
48745: LD_ADDR_VAR 0 11
48749: PUSH
48750: DOUBLE
48751: LD_INT 1
48753: DEC
48754: ST_TO_ADDR
48755: LD_VAR 0 7
48759: PUSH
48760: FOR_TO
48761: IFFALSE 48808
// begin hc_class = 20 ;
48763: LD_ADDR_OWVAR 28
48767: PUSH
48768: LD_INT 20
48770: ST_TO_ADDR
// hc_gallery =  ;
48771: LD_ADDR_OWVAR 33
48775: PUSH
48776: LD_STRING 
48778: ST_TO_ADDR
// animal := CreateHuman ;
48779: LD_ADDR_VAR 0 12
48783: PUSH
48784: CALL_OW 44
48788: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
48789: LD_VAR 0 12
48793: PPUSH
48794: LD_VAR 0 9
48798: PPUSH
48799: LD_INT 0
48801: PPUSH
48802: CALL 50439 0 3
// end ;
48806: GO 48760
48808: POP
48809: POP
// end ;
48810: LD_VAR 0 10
48814: RET
// export function WantHeal ( sci , unit ) ; begin
48815: LD_INT 0
48817: PPUSH
// if GetTaskList ( sci ) > 0 then
48818: LD_VAR 0 1
48822: PPUSH
48823: CALL_OW 437
48827: PUSH
48828: LD_INT 0
48830: GREATER
48831: IFFALSE 48901
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 437
48842: PUSH
48843: LD_INT 1
48845: ARRAY
48846: PUSH
48847: LD_INT 1
48849: ARRAY
48850: PUSH
48851: LD_STRING l
48853: EQUAL
48854: PUSH
48855: LD_VAR 0 1
48859: PPUSH
48860: CALL_OW 437
48864: PUSH
48865: LD_INT 1
48867: ARRAY
48868: PUSH
48869: LD_INT 4
48871: ARRAY
48872: PUSH
48873: LD_VAR 0 2
48877: EQUAL
48878: AND
48879: IFFALSE 48891
// result := true else
48881: LD_ADDR_VAR 0 3
48885: PUSH
48886: LD_INT 1
48888: ST_TO_ADDR
48889: GO 48899
// result := false ;
48891: LD_ADDR_VAR 0 3
48895: PUSH
48896: LD_INT 0
48898: ST_TO_ADDR
// end else
48899: GO 48909
// result := false ;
48901: LD_ADDR_VAR 0 3
48905: PUSH
48906: LD_INT 0
48908: ST_TO_ADDR
// end ;
48909: LD_VAR 0 3
48913: RET
// export function HealTarget ( sci ) ; begin
48914: LD_INT 0
48916: PPUSH
// if not sci then
48917: LD_VAR 0 1
48921: NOT
48922: IFFALSE 48926
// exit ;
48924: GO 48991
// result := 0 ;
48926: LD_ADDR_VAR 0 2
48930: PUSH
48931: LD_INT 0
48933: ST_TO_ADDR
// if GetTaskList ( sci ) then
48934: LD_VAR 0 1
48938: PPUSH
48939: CALL_OW 437
48943: IFFALSE 48991
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
48945: LD_VAR 0 1
48949: PPUSH
48950: CALL_OW 437
48954: PUSH
48955: LD_INT 1
48957: ARRAY
48958: PUSH
48959: LD_INT 1
48961: ARRAY
48962: PUSH
48963: LD_STRING l
48965: EQUAL
48966: IFFALSE 48991
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
48968: LD_ADDR_VAR 0 2
48972: PUSH
48973: LD_VAR 0 1
48977: PPUSH
48978: CALL_OW 437
48982: PUSH
48983: LD_INT 1
48985: ARRAY
48986: PUSH
48987: LD_INT 4
48989: ARRAY
48990: ST_TO_ADDR
// end ;
48991: LD_VAR 0 2
48995: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
48996: LD_INT 0
48998: PPUSH
48999: PPUSH
49000: PPUSH
49001: PPUSH
// if not base_units then
49002: LD_VAR 0 1
49006: NOT
49007: IFFALSE 49011
// exit ;
49009: GO 49098
// result := false ;
49011: LD_ADDR_VAR 0 2
49015: PUSH
49016: LD_INT 0
49018: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49019: LD_ADDR_VAR 0 5
49023: PUSH
49024: LD_VAR 0 1
49028: PPUSH
49029: LD_INT 21
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PPUSH
49039: CALL_OW 72
49043: ST_TO_ADDR
// if not tmp then
49044: LD_VAR 0 5
49048: NOT
49049: IFFALSE 49053
// exit ;
49051: GO 49098
// for i in tmp do
49053: LD_ADDR_VAR 0 3
49057: PUSH
49058: LD_VAR 0 5
49062: PUSH
49063: FOR_IN
49064: IFFALSE 49096
// begin result := EnemyInRange ( i , 22 ) ;
49066: LD_ADDR_VAR 0 2
49070: PUSH
49071: LD_VAR 0 3
49075: PPUSH
49076: LD_INT 22
49078: PPUSH
49079: CALL 46696 0 2
49083: ST_TO_ADDR
// if result then
49084: LD_VAR 0 2
49088: IFFALSE 49094
// exit ;
49090: POP
49091: POP
49092: GO 49098
// end ;
49094: GO 49063
49096: POP
49097: POP
// end ;
49098: LD_VAR 0 2
49102: RET
// export function FilterByTag ( units , tag ) ; begin
49103: LD_INT 0
49105: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
49106: LD_ADDR_VAR 0 3
49110: PUSH
49111: LD_VAR 0 1
49115: PPUSH
49116: LD_INT 120
49118: PUSH
49119: LD_VAR 0 2
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PPUSH
49128: CALL_OW 72
49132: ST_TO_ADDR
// end ;
49133: LD_VAR 0 3
49137: RET
// export function IsDriver ( un ) ; begin
49138: LD_INT 0
49140: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49141: LD_ADDR_VAR 0 2
49145: PUSH
49146: LD_VAR 0 1
49150: PUSH
49151: LD_INT 55
49153: PUSH
49154: EMPTY
49155: LIST
49156: PPUSH
49157: CALL_OW 69
49161: IN
49162: ST_TO_ADDR
// end ;
49163: LD_VAR 0 2
49167: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49168: LD_INT 0
49170: PPUSH
49171: PPUSH
// list := [ ] ;
49172: LD_ADDR_VAR 0 5
49176: PUSH
49177: EMPTY
49178: ST_TO_ADDR
// case d of 0 :
49179: LD_VAR 0 3
49183: PUSH
49184: LD_INT 0
49186: DOUBLE
49187: EQUAL
49188: IFTRUE 49192
49190: GO 49325
49192: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49193: LD_ADDR_VAR 0 5
49197: PUSH
49198: LD_VAR 0 1
49202: PUSH
49203: LD_INT 4
49205: MINUS
49206: PUSH
49207: LD_VAR 0 2
49211: PUSH
49212: LD_INT 4
49214: MINUS
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: PUSH
49224: LD_VAR 0 1
49228: PUSH
49229: LD_INT 3
49231: MINUS
49232: PUSH
49233: LD_VAR 0 2
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: PUSH
49246: LD_VAR 0 1
49250: PUSH
49251: LD_INT 4
49253: PLUS
49254: PUSH
49255: LD_VAR 0 2
49259: PUSH
49260: LD_INT 4
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: LIST
49267: PUSH
49268: LD_VAR 0 1
49272: PUSH
49273: LD_INT 3
49275: PLUS
49276: PUSH
49277: LD_VAR 0 2
49281: PUSH
49282: LD_INT 3
49284: PLUS
49285: PUSH
49286: LD_INT 5
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: LD_VAR 0 1
49298: PUSH
49299: LD_VAR 0 2
49303: PUSH
49304: LD_INT 4
49306: PLUS
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: ST_TO_ADDR
// end ; 1 :
49323: GO 50023
49325: LD_INT 1
49327: DOUBLE
49328: EQUAL
49329: IFTRUE 49333
49331: GO 49466
49333: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49334: LD_ADDR_VAR 0 5
49338: PUSH
49339: LD_VAR 0 1
49343: PUSH
49344: LD_VAR 0 2
49348: PUSH
49349: LD_INT 4
49351: MINUS
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: LIST
49360: PUSH
49361: LD_VAR 0 1
49365: PUSH
49366: LD_INT 3
49368: MINUS
49369: PUSH
49370: LD_VAR 0 2
49374: PUSH
49375: LD_INT 3
49377: MINUS
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: PUSH
49387: LD_VAR 0 1
49391: PUSH
49392: LD_INT 4
49394: MINUS
49395: PUSH
49396: LD_VAR 0 2
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: LIST
49408: PUSH
49409: LD_VAR 0 1
49413: PUSH
49414: LD_VAR 0 2
49418: PUSH
49419: LD_INT 3
49421: PLUS
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: PUSH
49431: LD_VAR 0 1
49435: PUSH
49436: LD_INT 4
49438: PLUS
49439: PUSH
49440: LD_VAR 0 2
49444: PUSH
49445: LD_INT 4
49447: PLUS
49448: PUSH
49449: LD_INT 5
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: ST_TO_ADDR
// end ; 2 :
49464: GO 50023
49466: LD_INT 2
49468: DOUBLE
49469: EQUAL
49470: IFTRUE 49474
49472: GO 49603
49474: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
49475: LD_ADDR_VAR 0 5
49479: PUSH
49480: LD_VAR 0 1
49484: PUSH
49485: LD_VAR 0 2
49489: PUSH
49490: LD_INT 3
49492: MINUS
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: PUSH
49502: LD_VAR 0 1
49506: PUSH
49507: LD_INT 4
49509: PLUS
49510: PUSH
49511: LD_VAR 0 2
49515: PUSH
49516: LD_INT 4
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: PUSH
49524: LD_VAR 0 1
49528: PUSH
49529: LD_VAR 0 2
49533: PUSH
49534: LD_INT 4
49536: PLUS
49537: PUSH
49538: LD_INT 0
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: LIST
49545: PUSH
49546: LD_VAR 0 1
49550: PUSH
49551: LD_INT 3
49553: MINUS
49554: PUSH
49555: LD_VAR 0 2
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: PUSH
49568: LD_VAR 0 1
49572: PUSH
49573: LD_INT 4
49575: MINUS
49576: PUSH
49577: LD_VAR 0 2
49581: PUSH
49582: LD_INT 4
49584: MINUS
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: ST_TO_ADDR
// end ; 3 :
49601: GO 50023
49603: LD_INT 3
49605: DOUBLE
49606: EQUAL
49607: IFTRUE 49611
49609: GO 49744
49611: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
49612: LD_ADDR_VAR 0 5
49616: PUSH
49617: LD_VAR 0 1
49621: PUSH
49622: LD_INT 3
49624: PLUS
49625: PUSH
49626: LD_VAR 0 2
49630: PUSH
49631: LD_INT 4
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: PUSH
49639: LD_VAR 0 1
49643: PUSH
49644: LD_INT 4
49646: PLUS
49647: PUSH
49648: LD_VAR 0 2
49652: PUSH
49653: LD_INT 4
49655: PLUS
49656: PUSH
49657: LD_INT 5
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: PUSH
49665: LD_VAR 0 1
49669: PUSH
49670: LD_INT 4
49672: MINUS
49673: PUSH
49674: LD_VAR 0 2
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: PUSH
49687: LD_VAR 0 1
49691: PUSH
49692: LD_VAR 0 2
49696: PUSH
49697: LD_INT 4
49699: MINUS
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: PUSH
49709: LD_VAR 0 1
49713: PUSH
49714: LD_INT 3
49716: MINUS
49717: PUSH
49718: LD_VAR 0 2
49722: PUSH
49723: LD_INT 3
49725: MINUS
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: LIST
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: ST_TO_ADDR
// end ; 4 :
49742: GO 50023
49744: LD_INT 4
49746: DOUBLE
49747: EQUAL
49748: IFTRUE 49752
49750: GO 49885
49752: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
49753: LD_ADDR_VAR 0 5
49757: PUSH
49758: LD_VAR 0 1
49762: PUSH
49763: LD_VAR 0 2
49767: PUSH
49768: LD_INT 4
49770: PLUS
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: LIST
49779: PUSH
49780: LD_VAR 0 1
49784: PUSH
49785: LD_INT 3
49787: PLUS
49788: PUSH
49789: LD_VAR 0 2
49793: PUSH
49794: LD_INT 3
49796: PLUS
49797: PUSH
49798: LD_INT 5
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: PUSH
49806: LD_VAR 0 1
49810: PUSH
49811: LD_INT 4
49813: PLUS
49814: PUSH
49815: LD_VAR 0 2
49819: PUSH
49820: LD_INT 4
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: LIST
49827: PUSH
49828: LD_VAR 0 1
49832: PUSH
49833: LD_VAR 0 2
49837: PUSH
49838: LD_INT 3
49840: MINUS
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: PUSH
49850: LD_VAR 0 1
49854: PUSH
49855: LD_INT 4
49857: MINUS
49858: PUSH
49859: LD_VAR 0 2
49863: PUSH
49864: LD_INT 4
49866: MINUS
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: LIST
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: ST_TO_ADDR
// end ; 5 :
49883: GO 50023
49885: LD_INT 5
49887: DOUBLE
49888: EQUAL
49889: IFTRUE 49893
49891: GO 50022
49893: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
49894: LD_ADDR_VAR 0 5
49898: PUSH
49899: LD_VAR 0 1
49903: PUSH
49904: LD_INT 4
49906: MINUS
49907: PUSH
49908: LD_VAR 0 2
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: PUSH
49921: LD_VAR 0 1
49925: PUSH
49926: LD_VAR 0 2
49930: PUSH
49931: LD_INT 4
49933: MINUS
49934: PUSH
49935: LD_INT 3
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: PUSH
49943: LD_VAR 0 1
49947: PUSH
49948: LD_INT 4
49950: PLUS
49951: PUSH
49952: LD_VAR 0 2
49956: PUSH
49957: LD_INT 4
49959: PLUS
49960: PUSH
49961: LD_INT 5
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: LIST
49968: PUSH
49969: LD_VAR 0 1
49973: PUSH
49974: LD_INT 3
49976: PLUS
49977: PUSH
49978: LD_VAR 0 2
49982: PUSH
49983: LD_INT 4
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: LIST
49990: PUSH
49991: LD_VAR 0 1
49995: PUSH
49996: LD_VAR 0 2
50000: PUSH
50001: LD_INT 3
50003: PLUS
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// end ; end ;
50020: GO 50023
50022: POP
// result := list ;
50023: LD_ADDR_VAR 0 4
50027: PUSH
50028: LD_VAR 0 5
50032: ST_TO_ADDR
// end ;
50033: LD_VAR 0 4
50037: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50038: LD_INT 0
50040: PPUSH
50041: PPUSH
50042: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50043: LD_VAR 0 1
50047: NOT
50048: PUSH
50049: LD_VAR 0 2
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: LD_INT 2
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: LD_INT 4
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: IN
50072: NOT
50073: OR
50074: IFFALSE 50078
// exit ;
50076: GO 50161
// tmp := [ ] ;
50078: LD_ADDR_VAR 0 5
50082: PUSH
50083: EMPTY
50084: ST_TO_ADDR
// for i in units do
50085: LD_ADDR_VAR 0 4
50089: PUSH
50090: LD_VAR 0 1
50094: PUSH
50095: FOR_IN
50096: IFFALSE 50130
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
50098: LD_ADDR_VAR 0 5
50102: PUSH
50103: LD_VAR 0 5
50107: PPUSH
50108: LD_VAR 0 4
50112: PPUSH
50113: LD_VAR 0 2
50117: PPUSH
50118: CALL_OW 259
50122: PPUSH
50123: CALL 51534 0 2
50127: ST_TO_ADDR
50128: GO 50095
50130: POP
50131: POP
// if not tmp then
50132: LD_VAR 0 5
50136: NOT
50137: IFFALSE 50141
// exit ;
50139: GO 50161
// result := SortListByListDesc ( units , tmp ) ;
50141: LD_ADDR_VAR 0 3
50145: PUSH
50146: LD_VAR 0 1
50150: PPUSH
50151: LD_VAR 0 5
50155: PPUSH
50156: CALL_OW 77
50160: ST_TO_ADDR
// end ;
50161: LD_VAR 0 3
50165: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50166: LD_INT 0
50168: PPUSH
50169: PPUSH
50170: PPUSH
// result := false ;
50171: LD_ADDR_VAR 0 3
50175: PUSH
50176: LD_INT 0
50178: ST_TO_ADDR
// if not building then
50179: LD_VAR 0 2
50183: NOT
50184: IFFALSE 50188
// exit ;
50186: GO 50326
// x := GetX ( building ) ;
50188: LD_ADDR_VAR 0 4
50192: PUSH
50193: LD_VAR 0 2
50197: PPUSH
50198: CALL_OW 250
50202: ST_TO_ADDR
// y := GetY ( building ) ;
50203: LD_ADDR_VAR 0 5
50207: PUSH
50208: LD_VAR 0 2
50212: PPUSH
50213: CALL_OW 251
50217: ST_TO_ADDR
// if not x or not y then
50218: LD_VAR 0 4
50222: NOT
50223: PUSH
50224: LD_VAR 0 5
50228: NOT
50229: OR
50230: IFFALSE 50234
// exit ;
50232: GO 50326
// if GetTaskList ( unit ) then
50234: LD_VAR 0 1
50238: PPUSH
50239: CALL_OW 437
50243: IFFALSE 50326
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50245: LD_STRING e
50247: PUSH
50248: LD_VAR 0 1
50252: PPUSH
50253: CALL_OW 437
50257: PUSH
50258: LD_INT 1
50260: ARRAY
50261: PUSH
50262: LD_INT 1
50264: ARRAY
50265: EQUAL
50266: PUSH
50267: LD_VAR 0 4
50271: PUSH
50272: LD_VAR 0 1
50276: PPUSH
50277: CALL_OW 437
50281: PUSH
50282: LD_INT 1
50284: ARRAY
50285: PUSH
50286: LD_INT 2
50288: ARRAY
50289: EQUAL
50290: AND
50291: PUSH
50292: LD_VAR 0 5
50296: PUSH
50297: LD_VAR 0 1
50301: PPUSH
50302: CALL_OW 437
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: PUSH
50311: LD_INT 3
50313: ARRAY
50314: EQUAL
50315: AND
50316: IFFALSE 50326
// result := true end ;
50318: LD_ADDR_VAR 0 3
50322: PUSH
50323: LD_INT 1
50325: ST_TO_ADDR
// end ;
50326: LD_VAR 0 3
50330: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
50331: LD_INT 0
50333: PPUSH
// result := false ;
50334: LD_ADDR_VAR 0 4
50338: PUSH
50339: LD_INT 0
50341: ST_TO_ADDR
// if GetTaskList ( unit ) then
50342: LD_VAR 0 1
50346: PPUSH
50347: CALL_OW 437
50351: IFFALSE 50434
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50353: LD_STRING M
50355: PUSH
50356: LD_VAR 0 1
50360: PPUSH
50361: CALL_OW 437
50365: PUSH
50366: LD_INT 1
50368: ARRAY
50369: PUSH
50370: LD_INT 1
50372: ARRAY
50373: EQUAL
50374: PUSH
50375: LD_VAR 0 2
50379: PUSH
50380: LD_VAR 0 1
50384: PPUSH
50385: CALL_OW 437
50389: PUSH
50390: LD_INT 1
50392: ARRAY
50393: PUSH
50394: LD_INT 2
50396: ARRAY
50397: EQUAL
50398: AND
50399: PUSH
50400: LD_VAR 0 3
50404: PUSH
50405: LD_VAR 0 1
50409: PPUSH
50410: CALL_OW 437
50414: PUSH
50415: LD_INT 1
50417: ARRAY
50418: PUSH
50419: LD_INT 3
50421: ARRAY
50422: EQUAL
50423: AND
50424: IFFALSE 50434
// result := true ;
50426: LD_ADDR_VAR 0 4
50430: PUSH
50431: LD_INT 1
50433: ST_TO_ADDR
// end ; end ;
50434: LD_VAR 0 4
50438: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50439: LD_INT 0
50441: PPUSH
50442: PPUSH
50443: PPUSH
50444: PPUSH
// if not unit or not area then
50445: LD_VAR 0 1
50449: NOT
50450: PUSH
50451: LD_VAR 0 2
50455: NOT
50456: OR
50457: IFFALSE 50461
// exit ;
50459: GO 50637
// tmp := AreaToList ( area , i ) ;
50461: LD_ADDR_VAR 0 6
50465: PUSH
50466: LD_VAR 0 2
50470: PPUSH
50471: LD_VAR 0 5
50475: PPUSH
50476: CALL_OW 517
50480: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50481: LD_ADDR_VAR 0 5
50485: PUSH
50486: DOUBLE
50487: LD_INT 1
50489: DEC
50490: ST_TO_ADDR
50491: LD_VAR 0 6
50495: PUSH
50496: LD_INT 1
50498: ARRAY
50499: PUSH
50500: FOR_TO
50501: IFFALSE 50635
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
50503: LD_ADDR_VAR 0 7
50507: PUSH
50508: LD_VAR 0 6
50512: PUSH
50513: LD_INT 1
50515: ARRAY
50516: PUSH
50517: LD_VAR 0 5
50521: ARRAY
50522: PUSH
50523: LD_VAR 0 6
50527: PUSH
50528: LD_INT 2
50530: ARRAY
50531: PUSH
50532: LD_VAR 0 5
50536: ARRAY
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
50542: LD_INT 92
50544: PUSH
50545: LD_VAR 0 7
50549: PUSH
50550: LD_INT 1
50552: ARRAY
50553: PUSH
50554: LD_VAR 0 7
50558: PUSH
50559: LD_INT 2
50561: ARRAY
50562: PUSH
50563: LD_INT 2
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: PPUSH
50572: CALL_OW 69
50576: PUSH
50577: LD_INT 0
50579: EQUAL
50580: IFFALSE 50633
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
50582: LD_VAR 0 1
50586: PPUSH
50587: LD_VAR 0 7
50591: PUSH
50592: LD_INT 1
50594: ARRAY
50595: PPUSH
50596: LD_VAR 0 7
50600: PUSH
50601: LD_INT 2
50603: ARRAY
50604: PPUSH
50605: LD_VAR 0 3
50609: PPUSH
50610: CALL_OW 48
// result := IsPlaced ( unit ) ;
50614: LD_ADDR_VAR 0 4
50618: PUSH
50619: LD_VAR 0 1
50623: PPUSH
50624: CALL_OW 305
50628: ST_TO_ADDR
// exit ;
50629: POP
50630: POP
50631: GO 50637
// end ; end ;
50633: GO 50500
50635: POP
50636: POP
// end ;
50637: LD_VAR 0 4
50641: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
50642: LD_INT 0
50644: PPUSH
50645: PPUSH
50646: PPUSH
// if not side or side > 8 then
50647: LD_VAR 0 1
50651: NOT
50652: PUSH
50653: LD_VAR 0 1
50657: PUSH
50658: LD_INT 8
50660: GREATER
50661: OR
50662: IFFALSE 50666
// exit ;
50664: GO 50853
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
50666: LD_ADDR_VAR 0 4
50670: PUSH
50671: LD_INT 22
50673: PUSH
50674: LD_VAR 0 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 21
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PPUSH
50697: CALL_OW 69
50701: ST_TO_ADDR
// if not tmp then
50702: LD_VAR 0 4
50706: NOT
50707: IFFALSE 50711
// exit ;
50709: GO 50853
// enable_addtolog := true ;
50711: LD_ADDR_OWVAR 81
50715: PUSH
50716: LD_INT 1
50718: ST_TO_ADDR
// AddToLog ( [ ) ;
50719: LD_STRING [
50721: PPUSH
50722: CALL_OW 561
// for i in tmp do
50726: LD_ADDR_VAR 0 3
50730: PUSH
50731: LD_VAR 0 4
50735: PUSH
50736: FOR_IN
50737: IFFALSE 50844
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
50739: LD_STRING [
50741: PUSH
50742: LD_VAR 0 3
50746: PPUSH
50747: CALL_OW 266
50751: STR
50752: PUSH
50753: LD_STRING , 
50755: STR
50756: PUSH
50757: LD_VAR 0 3
50761: PPUSH
50762: CALL_OW 250
50766: STR
50767: PUSH
50768: LD_STRING , 
50770: STR
50771: PUSH
50772: LD_VAR 0 3
50776: PPUSH
50777: CALL_OW 251
50781: STR
50782: PUSH
50783: LD_STRING , 
50785: STR
50786: PUSH
50787: LD_VAR 0 3
50791: PPUSH
50792: CALL_OW 254
50796: STR
50797: PUSH
50798: LD_STRING , 
50800: STR
50801: PUSH
50802: LD_VAR 0 3
50806: PPUSH
50807: LD_INT 1
50809: PPUSH
50810: CALL_OW 268
50814: STR
50815: PUSH
50816: LD_STRING , 
50818: STR
50819: PUSH
50820: LD_VAR 0 3
50824: PPUSH
50825: LD_INT 2
50827: PPUSH
50828: CALL_OW 268
50832: STR
50833: PUSH
50834: LD_STRING ],
50836: STR
50837: PPUSH
50838: CALL_OW 561
// end ;
50842: GO 50736
50844: POP
50845: POP
// AddToLog ( ]; ) ;
50846: LD_STRING ];
50848: PPUSH
50849: CALL_OW 561
// end ;
50853: LD_VAR 0 2
50857: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
50858: LD_INT 0
50860: PPUSH
50861: PPUSH
50862: PPUSH
50863: PPUSH
50864: PPUSH
// if not area or not rate or not max then
50865: LD_VAR 0 1
50869: NOT
50870: PUSH
50871: LD_VAR 0 2
50875: NOT
50876: OR
50877: PUSH
50878: LD_VAR 0 4
50882: NOT
50883: OR
50884: IFFALSE 50888
// exit ;
50886: GO 51077
// while 1 do
50888: LD_INT 1
50890: IFFALSE 51077
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
50892: LD_ADDR_VAR 0 9
50896: PUSH
50897: LD_VAR 0 1
50901: PPUSH
50902: LD_INT 1
50904: PPUSH
50905: CALL_OW 287
50909: PUSH
50910: LD_INT 10
50912: MUL
50913: ST_TO_ADDR
// r := rate / 10 ;
50914: LD_ADDR_VAR 0 7
50918: PUSH
50919: LD_VAR 0 2
50923: PUSH
50924: LD_INT 10
50926: DIVREAL
50927: ST_TO_ADDR
// time := 1 1$00 ;
50928: LD_ADDR_VAR 0 8
50932: PUSH
50933: LD_INT 2100
50935: ST_TO_ADDR
// if amount < min then
50936: LD_VAR 0 9
50940: PUSH
50941: LD_VAR 0 3
50945: LESS
50946: IFFALSE 50964
// r := r * 2 else
50948: LD_ADDR_VAR 0 7
50952: PUSH
50953: LD_VAR 0 7
50957: PUSH
50958: LD_INT 2
50960: MUL
50961: ST_TO_ADDR
50962: GO 50990
// if amount > max then
50964: LD_VAR 0 9
50968: PUSH
50969: LD_VAR 0 4
50973: GREATER
50974: IFFALSE 50990
// r := r / 2 ;
50976: LD_ADDR_VAR 0 7
50980: PUSH
50981: LD_VAR 0 7
50985: PUSH
50986: LD_INT 2
50988: DIVREAL
50989: ST_TO_ADDR
// time := time / r ;
50990: LD_ADDR_VAR 0 8
50994: PUSH
50995: LD_VAR 0 8
50999: PUSH
51000: LD_VAR 0 7
51004: DIVREAL
51005: ST_TO_ADDR
// if time < 0 then
51006: LD_VAR 0 8
51010: PUSH
51011: LD_INT 0
51013: LESS
51014: IFFALSE 51031
// time := time * - 1 ;
51016: LD_ADDR_VAR 0 8
51020: PUSH
51021: LD_VAR 0 8
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: MUL
51030: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
51031: LD_VAR 0 8
51035: PUSH
51036: LD_INT 35
51038: PPUSH
51039: LD_INT 875
51041: PPUSH
51042: CALL_OW 12
51046: PLUS
51047: PPUSH
51048: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51052: LD_INT 1
51054: PPUSH
51055: LD_INT 5
51057: PPUSH
51058: CALL_OW 12
51062: PPUSH
51063: LD_VAR 0 1
51067: PPUSH
51068: LD_INT 1
51070: PPUSH
51071: CALL_OW 55
// end ;
51075: GO 50888
// end ;
51077: LD_VAR 0 5
51081: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51082: LD_INT 0
51084: PPUSH
51085: PPUSH
51086: PPUSH
51087: PPUSH
51088: PPUSH
51089: PPUSH
51090: PPUSH
51091: PPUSH
// if not turrets or not factories then
51092: LD_VAR 0 1
51096: NOT
51097: PUSH
51098: LD_VAR 0 2
51102: NOT
51103: OR
51104: IFFALSE 51108
// exit ;
51106: GO 51415
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51108: LD_ADDR_VAR 0 10
51112: PUSH
51113: LD_INT 5
51115: PUSH
51116: LD_INT 6
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: LD_INT 4
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 3
51135: PUSH
51136: LD_INT 5
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 24
51150: PUSH
51151: LD_INT 25
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 23
51160: PUSH
51161: LD_INT 27
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 42
51174: PUSH
51175: LD_INT 43
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 44
51184: PUSH
51185: LD_INT 46
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 45
51194: PUSH
51195: LD_INT 47
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// result := [ ] ;
51212: LD_ADDR_VAR 0 3
51216: PUSH
51217: EMPTY
51218: ST_TO_ADDR
// for i in turrets do
51219: LD_ADDR_VAR 0 4
51223: PUSH
51224: LD_VAR 0 1
51228: PUSH
51229: FOR_IN
51230: IFFALSE 51413
// begin nat := GetNation ( i ) ;
51232: LD_ADDR_VAR 0 7
51236: PUSH
51237: LD_VAR 0 4
51241: PPUSH
51242: CALL_OW 248
51246: ST_TO_ADDR
// weapon := 0 ;
51247: LD_ADDR_VAR 0 8
51251: PUSH
51252: LD_INT 0
51254: ST_TO_ADDR
// if not nat then
51255: LD_VAR 0 7
51259: NOT
51260: IFFALSE 51264
// continue ;
51262: GO 51229
// for j in list [ nat ] do
51264: LD_ADDR_VAR 0 5
51268: PUSH
51269: LD_VAR 0 10
51273: PUSH
51274: LD_VAR 0 7
51278: ARRAY
51279: PUSH
51280: FOR_IN
51281: IFFALSE 51322
// if GetBWeapon ( i ) = j [ 1 ] then
51283: LD_VAR 0 4
51287: PPUSH
51288: CALL_OW 269
51292: PUSH
51293: LD_VAR 0 5
51297: PUSH
51298: LD_INT 1
51300: ARRAY
51301: EQUAL
51302: IFFALSE 51320
// begin weapon := j [ 2 ] ;
51304: LD_ADDR_VAR 0 8
51308: PUSH
51309: LD_VAR 0 5
51313: PUSH
51314: LD_INT 2
51316: ARRAY
51317: ST_TO_ADDR
// break ;
51318: GO 51322
// end ;
51320: GO 51280
51322: POP
51323: POP
// if not weapon then
51324: LD_VAR 0 8
51328: NOT
51329: IFFALSE 51333
// continue ;
51331: GO 51229
// for k in factories do
51333: LD_ADDR_VAR 0 6
51337: PUSH
51338: LD_VAR 0 2
51342: PUSH
51343: FOR_IN
51344: IFFALSE 51409
// begin weapons := AvailableWeaponList ( k ) ;
51346: LD_ADDR_VAR 0 9
51350: PUSH
51351: LD_VAR 0 6
51355: PPUSH
51356: CALL_OW 478
51360: ST_TO_ADDR
// if not weapons then
51361: LD_VAR 0 9
51365: NOT
51366: IFFALSE 51370
// continue ;
51368: GO 51343
// if weapon in weapons then
51370: LD_VAR 0 8
51374: PUSH
51375: LD_VAR 0 9
51379: IN
51380: IFFALSE 51407
// begin result := [ i , weapon ] ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_VAR 0 4
51391: PUSH
51392: LD_VAR 0 8
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// exit ;
51401: POP
51402: POP
51403: POP
51404: POP
51405: GO 51415
// end ; end ;
51407: GO 51343
51409: POP
51410: POP
// end ;
51411: GO 51229
51413: POP
51414: POP
// end ;
51415: LD_VAR 0 3
51419: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51420: LD_INT 0
51422: PPUSH
// if not side or side > 8 then
51423: LD_VAR 0 3
51427: NOT
51428: PUSH
51429: LD_VAR 0 3
51433: PUSH
51434: LD_INT 8
51436: GREATER
51437: OR
51438: IFFALSE 51442
// exit ;
51440: GO 51501
// if not range then
51442: LD_VAR 0 4
51446: NOT
51447: IFFALSE 51458
// range := - 12 ;
51449: LD_ADDR_VAR 0 4
51453: PUSH
51454: LD_INT 12
51456: NEG
51457: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51458: LD_VAR 0 1
51462: PPUSH
51463: LD_VAR 0 2
51467: PPUSH
51468: LD_VAR 0 3
51472: PPUSH
51473: LD_VAR 0 4
51477: PPUSH
51478: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51482: LD_VAR 0 1
51486: PPUSH
51487: LD_VAR 0 2
51491: PPUSH
51492: LD_VAR 0 3
51496: PPUSH
51497: CALL_OW 331
// end ;
51501: LD_VAR 0 5
51505: RET
// export function Video ( mode ) ; begin
51506: LD_INT 0
51508: PPUSH
// ingame_video = mode ;
51509: LD_ADDR_OWVAR 52
51513: PUSH
51514: LD_VAR 0 1
51518: ST_TO_ADDR
// interface_hidden = mode ;
51519: LD_ADDR_OWVAR 54
51523: PUSH
51524: LD_VAR 0 1
51528: ST_TO_ADDR
// end ;
51529: LD_VAR 0 2
51533: RET
// export function Join ( array , element ) ; begin
51534: LD_INT 0
51536: PPUSH
// result := Replace ( array , array + 1 , element ) ;
51537: LD_ADDR_VAR 0 3
51541: PUSH
51542: LD_VAR 0 1
51546: PPUSH
51547: LD_VAR 0 1
51551: PUSH
51552: LD_INT 1
51554: PLUS
51555: PPUSH
51556: LD_VAR 0 2
51560: PPUSH
51561: CALL_OW 1
51565: ST_TO_ADDR
// end ;
51566: LD_VAR 0 3
51570: RET
// export function JoinUnion ( array , element ) ; begin
51571: LD_INT 0
51573: PPUSH
// result := array union element ;
51574: LD_ADDR_VAR 0 3
51578: PUSH
51579: LD_VAR 0 1
51583: PUSH
51584: LD_VAR 0 2
51588: UNION
51589: ST_TO_ADDR
// end ;
51590: LD_VAR 0 3
51594: RET
// export function GetBehemoths ( side ) ; begin
51595: LD_INT 0
51597: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
51598: LD_ADDR_VAR 0 2
51602: PUSH
51603: LD_INT 22
51605: PUSH
51606: LD_VAR 0 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 31
51617: PUSH
51618: LD_INT 25
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PPUSH
51629: CALL_OW 69
51633: ST_TO_ADDR
// end ;
51634: LD_VAR 0 2
51638: RET
// export function Shuffle ( array ) ; var i , index ; begin
51639: LD_INT 0
51641: PPUSH
51642: PPUSH
51643: PPUSH
// result := [ ] ;
51644: LD_ADDR_VAR 0 2
51648: PUSH
51649: EMPTY
51650: ST_TO_ADDR
// if not array then
51651: LD_VAR 0 1
51655: NOT
51656: IFFALSE 51660
// exit ;
51658: GO 51759
// Randomize ;
51660: CALL_OW 10
// for i = array downto 1 do
51664: LD_ADDR_VAR 0 3
51668: PUSH
51669: DOUBLE
51670: LD_VAR 0 1
51674: INC
51675: ST_TO_ADDR
51676: LD_INT 1
51678: PUSH
51679: FOR_DOWNTO
51680: IFFALSE 51757
// begin index := rand ( 1 , array ) ;
51682: LD_ADDR_VAR 0 4
51686: PUSH
51687: LD_INT 1
51689: PPUSH
51690: LD_VAR 0 1
51694: PPUSH
51695: CALL_OW 12
51699: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
51700: LD_ADDR_VAR 0 2
51704: PUSH
51705: LD_VAR 0 2
51709: PPUSH
51710: LD_VAR 0 2
51714: PUSH
51715: LD_INT 1
51717: PLUS
51718: PPUSH
51719: LD_VAR 0 1
51723: PUSH
51724: LD_VAR 0 4
51728: ARRAY
51729: PPUSH
51730: CALL_OW 2
51734: ST_TO_ADDR
// array := Delete ( array , index ) ;
51735: LD_ADDR_VAR 0 1
51739: PUSH
51740: LD_VAR 0 1
51744: PPUSH
51745: LD_VAR 0 4
51749: PPUSH
51750: CALL_OW 3
51754: ST_TO_ADDR
// end ;
51755: GO 51679
51757: POP
51758: POP
// end ;
51759: LD_VAR 0 2
51763: RET
// export function GetBaseMaterials ( base ) ; begin
51764: LD_INT 0
51766: PPUSH
// result := [ 0 , 0 , 0 ] ;
51767: LD_ADDR_VAR 0 2
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: LIST
51785: ST_TO_ADDR
// if not base then
51786: LD_VAR 0 1
51790: NOT
51791: IFFALSE 51795
// exit ;
51793: GO 51844
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
51795: LD_ADDR_VAR 0 2
51799: PUSH
51800: LD_VAR 0 1
51804: PPUSH
51805: LD_INT 1
51807: PPUSH
51808: CALL_OW 275
51812: PUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: LD_INT 2
51820: PPUSH
51821: CALL_OW 275
51825: PUSH
51826: LD_VAR 0 1
51830: PPUSH
51831: LD_INT 3
51833: PPUSH
51834: CALL_OW 275
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: ST_TO_ADDR
// end ;
51844: LD_VAR 0 2
51848: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
51849: LD_INT 0
51851: PPUSH
51852: PPUSH
// result := array ;
51853: LD_ADDR_VAR 0 3
51857: PUSH
51858: LD_VAR 0 1
51862: ST_TO_ADDR
// if size >= result then
51863: LD_VAR 0 2
51867: PUSH
51868: LD_VAR 0 3
51872: GREATEREQUAL
51873: IFFALSE 51877
// exit ;
51875: GO 51927
// if size then
51877: LD_VAR 0 2
51881: IFFALSE 51927
// for i := array downto size do
51883: LD_ADDR_VAR 0 4
51887: PUSH
51888: DOUBLE
51889: LD_VAR 0 1
51893: INC
51894: ST_TO_ADDR
51895: LD_VAR 0 2
51899: PUSH
51900: FOR_DOWNTO
51901: IFFALSE 51925
// result := Delete ( result , result ) ;
51903: LD_ADDR_VAR 0 3
51907: PUSH
51908: LD_VAR 0 3
51912: PPUSH
51913: LD_VAR 0 3
51917: PPUSH
51918: CALL_OW 3
51922: ST_TO_ADDR
51923: GO 51900
51925: POP
51926: POP
// end ;
51927: LD_VAR 0 3
51931: RET
// export function ComExit ( unit ) ; var tmp ; begin
51932: LD_INT 0
51934: PPUSH
51935: PPUSH
// if not IsInUnit ( unit ) then
51936: LD_VAR 0 1
51940: PPUSH
51941: CALL_OW 310
51945: NOT
51946: IFFALSE 51950
// exit ;
51948: GO 52010
// tmp := IsInUnit ( unit ) ;
51950: LD_ADDR_VAR 0 3
51954: PUSH
51955: LD_VAR 0 1
51959: PPUSH
51960: CALL_OW 310
51964: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
51965: LD_VAR 0 3
51969: PPUSH
51970: CALL_OW 247
51974: PUSH
51975: LD_INT 2
51977: EQUAL
51978: IFFALSE 51991
// ComExitVehicle ( unit ) else
51980: LD_VAR 0 1
51984: PPUSH
51985: CALL_OW 121
51989: GO 52000
// ComExitBuilding ( unit ) ;
51991: LD_VAR 0 1
51995: PPUSH
51996: CALL_OW 122
// result := tmp ;
52000: LD_ADDR_VAR 0 2
52004: PUSH
52005: LD_VAR 0 3
52009: ST_TO_ADDR
// end ;
52010: LD_VAR 0 2
52014: RET
// export function ComExitAll ( units ) ; var i ; begin
52015: LD_INT 0
52017: PPUSH
52018: PPUSH
// if not units then
52019: LD_VAR 0 1
52023: NOT
52024: IFFALSE 52028
// exit ;
52026: GO 52054
// for i in units do
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_VAR 0 1
52037: PUSH
52038: FOR_IN
52039: IFFALSE 52052
// ComExit ( i ) ;
52041: LD_VAR 0 3
52045: PPUSH
52046: CALL 51932 0 1
52050: GO 52038
52052: POP
52053: POP
// end ;
52054: LD_VAR 0 2
52058: RET
// export function ResetHc ; begin
52059: LD_INT 0
52061: PPUSH
// InitHc ;
52062: CALL_OW 19
// hc_importance := 0 ;
52066: LD_ADDR_OWVAR 32
52070: PUSH
52071: LD_INT 0
52073: ST_TO_ADDR
// end ;
52074: LD_VAR 0 1
52078: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
52079: LD_INT 0
52081: PPUSH
52082: PPUSH
52083: PPUSH
// _x := ( x1 + x2 ) div 2 ;
52084: LD_ADDR_VAR 0 6
52088: PUSH
52089: LD_VAR 0 1
52093: PUSH
52094: LD_VAR 0 3
52098: PLUS
52099: PUSH
52100: LD_INT 2
52102: DIV
52103: ST_TO_ADDR
// if _x < 0 then
52104: LD_VAR 0 6
52108: PUSH
52109: LD_INT 0
52111: LESS
52112: IFFALSE 52129
// _x := _x * - 1 ;
52114: LD_ADDR_VAR 0 6
52118: PUSH
52119: LD_VAR 0 6
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: MUL
52128: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
52129: LD_ADDR_VAR 0 7
52133: PUSH
52134: LD_VAR 0 2
52138: PUSH
52139: LD_VAR 0 4
52143: PLUS
52144: PUSH
52145: LD_INT 2
52147: DIV
52148: ST_TO_ADDR
// if _y < 0 then
52149: LD_VAR 0 7
52153: PUSH
52154: LD_INT 0
52156: LESS
52157: IFFALSE 52174
// _y := _y * - 1 ;
52159: LD_ADDR_VAR 0 7
52163: PUSH
52164: LD_VAR 0 7
52168: PUSH
52169: LD_INT 1
52171: NEG
52172: MUL
52173: ST_TO_ADDR
// result := [ _x , _y ] ;
52174: LD_ADDR_VAR 0 5
52178: PUSH
52179: LD_VAR 0 6
52183: PUSH
52184: LD_VAR 0 7
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: ST_TO_ADDR
// end ;
52193: LD_VAR 0 5
52197: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
52198: LD_INT 0
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
// task := GetTaskList ( unit ) ;
52204: LD_ADDR_VAR 0 7
52208: PUSH
52209: LD_VAR 0 1
52213: PPUSH
52214: CALL_OW 437
52218: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
52219: LD_VAR 0 7
52223: NOT
52224: PUSH
52225: LD_VAR 0 1
52229: PPUSH
52230: LD_VAR 0 2
52234: PPUSH
52235: CALL_OW 308
52239: NOT
52240: AND
52241: IFFALSE 52245
// exit ;
52243: GO 52363
// if IsInArea ( unit , area ) then
52245: LD_VAR 0 1
52249: PPUSH
52250: LD_VAR 0 2
52254: PPUSH
52255: CALL_OW 308
52259: IFFALSE 52277
// begin ComMoveToArea ( unit , goAway ) ;
52261: LD_VAR 0 1
52265: PPUSH
52266: LD_VAR 0 3
52270: PPUSH
52271: CALL_OW 113
// exit ;
52275: GO 52363
// end ; if task [ 1 ] [ 1 ] <> M then
52277: LD_VAR 0 7
52281: PUSH
52282: LD_INT 1
52284: ARRAY
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: PUSH
52290: LD_STRING M
52292: NONEQUAL
52293: IFFALSE 52297
// exit ;
52295: GO 52363
// x := task [ 1 ] [ 2 ] ;
52297: LD_ADDR_VAR 0 5
52301: PUSH
52302: LD_VAR 0 7
52306: PUSH
52307: LD_INT 1
52309: ARRAY
52310: PUSH
52311: LD_INT 2
52313: ARRAY
52314: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
52315: LD_ADDR_VAR 0 6
52319: PUSH
52320: LD_VAR 0 7
52324: PUSH
52325: LD_INT 1
52327: ARRAY
52328: PUSH
52329: LD_INT 3
52331: ARRAY
52332: ST_TO_ADDR
// if InArea ( x , y , area ) then
52333: LD_VAR 0 5
52337: PPUSH
52338: LD_VAR 0 6
52342: PPUSH
52343: LD_VAR 0 2
52347: PPUSH
52348: CALL_OW 309
52352: IFFALSE 52363
// ComStop ( unit ) ;
52354: LD_VAR 0 1
52358: PPUSH
52359: CALL_OW 141
// end ;
52363: LD_VAR 0 4
52367: RET
// export function Abs ( value ) ; begin
52368: LD_INT 0
52370: PPUSH
// result := value ;
52371: LD_ADDR_VAR 0 2
52375: PUSH
52376: LD_VAR 0 1
52380: ST_TO_ADDR
// if value < 0 then
52381: LD_VAR 0 1
52385: PUSH
52386: LD_INT 0
52388: LESS
52389: IFFALSE 52406
// result := value * - 1 ;
52391: LD_ADDR_VAR 0 2
52395: PUSH
52396: LD_VAR 0 1
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: MUL
52405: ST_TO_ADDR
// end ;
52406: LD_VAR 0 2
52410: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
52411: LD_INT 0
52413: PPUSH
52414: PPUSH
52415: PPUSH
52416: PPUSH
52417: PPUSH
52418: PPUSH
52419: PPUSH
52420: PPUSH
// if not unit or not building then
52421: LD_VAR 0 1
52425: NOT
52426: PUSH
52427: LD_VAR 0 2
52431: NOT
52432: OR
52433: IFFALSE 52437
// exit ;
52435: GO 52663
// x := GetX ( building ) ;
52437: LD_ADDR_VAR 0 4
52441: PUSH
52442: LD_VAR 0 2
52446: PPUSH
52447: CALL_OW 250
52451: ST_TO_ADDR
// y := GetY ( building ) ;
52452: LD_ADDR_VAR 0 6
52456: PUSH
52457: LD_VAR 0 2
52461: PPUSH
52462: CALL_OW 251
52466: ST_TO_ADDR
// d := GetDir ( building ) ;
52467: LD_ADDR_VAR 0 8
52471: PUSH
52472: LD_VAR 0 2
52476: PPUSH
52477: CALL_OW 254
52481: ST_TO_ADDR
// r := 4 ;
52482: LD_ADDR_VAR 0 9
52486: PUSH
52487: LD_INT 4
52489: ST_TO_ADDR
// for i := 1 to 5 do
52490: LD_ADDR_VAR 0 10
52494: PUSH
52495: DOUBLE
52496: LD_INT 1
52498: DEC
52499: ST_TO_ADDR
52500: LD_INT 5
52502: PUSH
52503: FOR_TO
52504: IFFALSE 52661
// begin _x := ShiftX ( x , d , r + i ) ;
52506: LD_ADDR_VAR 0 5
52510: PUSH
52511: LD_VAR 0 4
52515: PPUSH
52516: LD_VAR 0 8
52520: PPUSH
52521: LD_VAR 0 9
52525: PUSH
52526: LD_VAR 0 10
52530: PLUS
52531: PPUSH
52532: CALL_OW 272
52536: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
52537: LD_ADDR_VAR 0 7
52541: PUSH
52542: LD_VAR 0 6
52546: PPUSH
52547: LD_VAR 0 8
52551: PPUSH
52552: LD_VAR 0 9
52556: PUSH
52557: LD_VAR 0 10
52561: PLUS
52562: PPUSH
52563: CALL_OW 273
52567: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
52568: LD_VAR 0 5
52572: PPUSH
52573: LD_VAR 0 7
52577: PPUSH
52578: CALL_OW 488
52582: PUSH
52583: LD_VAR 0 5
52587: PPUSH
52588: LD_VAR 0 7
52592: PPUSH
52593: CALL_OW 428
52597: PPUSH
52598: CALL_OW 247
52602: PUSH
52603: LD_INT 3
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: IN
52613: NOT
52614: AND
52615: IFFALSE 52659
// begin ComMoveXY ( unit , _x , _y ) ;
52617: LD_VAR 0 1
52621: PPUSH
52622: LD_VAR 0 5
52626: PPUSH
52627: LD_VAR 0 7
52631: PPUSH
52632: CALL_OW 111
// result := [ _x , _y ] ;
52636: LD_ADDR_VAR 0 3
52640: PUSH
52641: LD_VAR 0 5
52645: PUSH
52646: LD_VAR 0 7
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// exit ;
52655: POP
52656: POP
52657: GO 52663
// end ; end ;
52659: GO 52503
52661: POP
52662: POP
// end ;
52663: LD_VAR 0 3
52667: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
52668: LD_INT 0
52670: PPUSH
52671: PPUSH
52672: PPUSH
// result := 0 ;
52673: LD_ADDR_VAR 0 3
52677: PUSH
52678: LD_INT 0
52680: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
52681: LD_VAR 0 1
52685: PUSH
52686: LD_INT 0
52688: LESS
52689: PUSH
52690: LD_VAR 0 1
52694: PUSH
52695: LD_INT 8
52697: GREATER
52698: OR
52699: PUSH
52700: LD_VAR 0 2
52704: PUSH
52705: LD_INT 0
52707: LESS
52708: OR
52709: PUSH
52710: LD_VAR 0 2
52714: PUSH
52715: LD_INT 8
52717: GREATER
52718: OR
52719: IFFALSE 52723
// exit ;
52721: GO 52798
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
52723: LD_ADDR_VAR 0 4
52727: PUSH
52728: LD_INT 22
52730: PUSH
52731: LD_VAR 0 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PPUSH
52740: CALL_OW 69
52744: PUSH
52745: FOR_IN
52746: IFFALSE 52796
// begin un := UnitShoot ( i ) ;
52748: LD_ADDR_VAR 0 5
52752: PUSH
52753: LD_VAR 0 4
52757: PPUSH
52758: CALL_OW 504
52762: ST_TO_ADDR
// if GetSide ( un ) = side1 then
52763: LD_VAR 0 5
52767: PPUSH
52768: CALL_OW 255
52772: PUSH
52773: LD_VAR 0 1
52777: EQUAL
52778: IFFALSE 52794
// begin result := un ;
52780: LD_ADDR_VAR 0 3
52784: PUSH
52785: LD_VAR 0 5
52789: ST_TO_ADDR
// exit ;
52790: POP
52791: POP
52792: GO 52798
// end ; end ;
52794: GO 52745
52796: POP
52797: POP
// end ;
52798: LD_VAR 0 3
52802: RET
// export function GetCargoBay ( units ) ; begin
52803: LD_INT 0
52805: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
52806: LD_ADDR_VAR 0 2
52810: PUSH
52811: LD_VAR 0 1
52815: PPUSH
52816: LD_INT 2
52818: PUSH
52819: LD_INT 34
52821: PUSH
52822: LD_INT 12
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 34
52831: PUSH
52832: LD_INT 51
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 34
52841: PUSH
52842: LD_INT 32
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 34
52851: PUSH
52852: LD_INT 89
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: PPUSH
52866: CALL_OW 72
52870: ST_TO_ADDR
// end ;
52871: LD_VAR 0 2
52875: RET
// export function Negate ( value ) ; begin
52876: LD_INT 0
52878: PPUSH
// result := not value ;
52879: LD_ADDR_VAR 0 2
52883: PUSH
52884: LD_VAR 0 1
52888: NOT
52889: ST_TO_ADDR
// end ;
52890: LD_VAR 0 2
52894: RET
// export function Inc ( value ) ; begin
52895: LD_INT 0
52897: PPUSH
// result := value + 1 ;
52898: LD_ADDR_VAR 0 2
52902: PUSH
52903: LD_VAR 0 1
52907: PUSH
52908: LD_INT 1
52910: PLUS
52911: ST_TO_ADDR
// end ;
52912: LD_VAR 0 2
52916: RET
// export function Dec ( value ) ; begin
52917: LD_INT 0
52919: PPUSH
// result := value - 1 ;
52920: LD_ADDR_VAR 0 2
52924: PUSH
52925: LD_VAR 0 1
52929: PUSH
52930: LD_INT 1
52932: MINUS
52933: ST_TO_ADDR
// end ;
52934: LD_VAR 0 2
52938: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
52939: LD_INT 0
52941: PPUSH
52942: PPUSH
52943: PPUSH
52944: PPUSH
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
52949: LD_VAR 0 1
52953: PPUSH
52954: LD_VAR 0 2
52958: PPUSH
52959: CALL_OW 488
52963: NOT
52964: PUSH
52965: LD_VAR 0 3
52969: PPUSH
52970: LD_VAR 0 4
52974: PPUSH
52975: CALL_OW 488
52979: NOT
52980: OR
52981: IFFALSE 52994
// begin result := - 1 ;
52983: LD_ADDR_VAR 0 5
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: ST_TO_ADDR
// exit ;
52992: GO 53229
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
52994: LD_ADDR_VAR 0 12
52998: PUSH
52999: LD_VAR 0 1
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: LD_VAR 0 3
53013: PPUSH
53014: LD_VAR 0 4
53018: PPUSH
53019: CALL 52079 0 4
53023: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
53024: LD_ADDR_VAR 0 11
53028: PUSH
53029: LD_VAR 0 1
53033: PPUSH
53034: LD_VAR 0 2
53038: PPUSH
53039: LD_VAR 0 12
53043: PUSH
53044: LD_INT 1
53046: ARRAY
53047: PPUSH
53048: LD_VAR 0 12
53052: PUSH
53053: LD_INT 2
53055: ARRAY
53056: PPUSH
53057: CALL_OW 298
53061: ST_TO_ADDR
// distance := 9999 ;
53062: LD_ADDR_VAR 0 10
53066: PUSH
53067: LD_INT 9999
53069: ST_TO_ADDR
// for i := 0 to 5 do
53070: LD_ADDR_VAR 0 6
53074: PUSH
53075: DOUBLE
53076: LD_INT 0
53078: DEC
53079: ST_TO_ADDR
53080: LD_INT 5
53082: PUSH
53083: FOR_TO
53084: IFFALSE 53227
// begin _x := ShiftX ( x1 , i , centerDist ) ;
53086: LD_ADDR_VAR 0 7
53090: PUSH
53091: LD_VAR 0 1
53095: PPUSH
53096: LD_VAR 0 6
53100: PPUSH
53101: LD_VAR 0 11
53105: PPUSH
53106: CALL_OW 272
53110: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
53111: LD_ADDR_VAR 0 8
53115: PUSH
53116: LD_VAR 0 2
53120: PPUSH
53121: LD_VAR 0 6
53125: PPUSH
53126: LD_VAR 0 11
53130: PPUSH
53131: CALL_OW 273
53135: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53136: LD_VAR 0 7
53140: PPUSH
53141: LD_VAR 0 8
53145: PPUSH
53146: CALL_OW 488
53150: NOT
53151: IFFALSE 53155
// continue ;
53153: GO 53083
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
53155: LD_ADDR_VAR 0 9
53159: PUSH
53160: LD_VAR 0 12
53164: PUSH
53165: LD_INT 1
53167: ARRAY
53168: PPUSH
53169: LD_VAR 0 12
53173: PUSH
53174: LD_INT 2
53176: ARRAY
53177: PPUSH
53178: LD_VAR 0 7
53182: PPUSH
53183: LD_VAR 0 8
53187: PPUSH
53188: CALL_OW 298
53192: ST_TO_ADDR
// if tmp < distance then
53193: LD_VAR 0 9
53197: PUSH
53198: LD_VAR 0 10
53202: LESS
53203: IFFALSE 53225
// begin result := i ;
53205: LD_ADDR_VAR 0 5
53209: PUSH
53210: LD_VAR 0 6
53214: ST_TO_ADDR
// distance := tmp ;
53215: LD_ADDR_VAR 0 10
53219: PUSH
53220: LD_VAR 0 9
53224: ST_TO_ADDR
// end ; end ;
53225: GO 53083
53227: POP
53228: POP
// end ;
53229: LD_VAR 0 5
53233: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53234: LD_INT 0
53236: PPUSH
53237: PPUSH
// if not driver or not IsInUnit ( driver ) then
53238: LD_VAR 0 1
53242: NOT
53243: PUSH
53244: LD_VAR 0 1
53248: PPUSH
53249: CALL_OW 310
53253: NOT
53254: OR
53255: IFFALSE 53259
// exit ;
53257: GO 53349
// vehicle := IsInUnit ( driver ) ;
53259: LD_ADDR_VAR 0 3
53263: PUSH
53264: LD_VAR 0 1
53268: PPUSH
53269: CALL_OW 310
53273: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53274: LD_VAR 0 1
53278: PPUSH
53279: LD_STRING \
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: PUSH
53309: LD_STRING E
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_VAR 0 3
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PPUSH
53345: CALL_OW 446
// end ;
53349: LD_VAR 0 2
53353: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
53354: LD_INT 0
53356: PPUSH
53357: PPUSH
// if not driver or not IsInUnit ( driver ) then
53358: LD_VAR 0 1
53362: NOT
53363: PUSH
53364: LD_VAR 0 1
53368: PPUSH
53369: CALL_OW 310
53373: NOT
53374: OR
53375: IFFALSE 53379
// exit ;
53377: GO 53469
// vehicle := IsInUnit ( driver ) ;
53379: LD_ADDR_VAR 0 3
53383: PUSH
53384: LD_VAR 0 1
53388: PPUSH
53389: CALL_OW 310
53393: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
53394: LD_VAR 0 1
53398: PPUSH
53399: LD_STRING \
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 0
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: PUSH
53429: LD_STRING E
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_VAR 0 3
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PPUSH
53465: CALL_OW 447
// end ;
53469: LD_VAR 0 2
53473: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
53474: LD_INT 0
53476: PPUSH
53477: PPUSH
53478: PPUSH
// tmp := [ ] ;
53479: LD_ADDR_VAR 0 5
53483: PUSH
53484: EMPTY
53485: ST_TO_ADDR
// for i in units do
53486: LD_ADDR_VAR 0 4
53490: PUSH
53491: LD_VAR 0 1
53495: PUSH
53496: FOR_IN
53497: IFFALSE 53535
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
53499: LD_ADDR_VAR 0 5
53503: PUSH
53504: LD_VAR 0 5
53508: PPUSH
53509: LD_VAR 0 5
53513: PUSH
53514: LD_INT 1
53516: PLUS
53517: PPUSH
53518: LD_VAR 0 4
53522: PPUSH
53523: CALL_OW 256
53527: PPUSH
53528: CALL_OW 2
53532: ST_TO_ADDR
53533: GO 53496
53535: POP
53536: POP
// if not tmp then
53537: LD_VAR 0 5
53541: NOT
53542: IFFALSE 53546
// exit ;
53544: GO 53594
// if asc then
53546: LD_VAR 0 2
53550: IFFALSE 53574
// result := SortListByListAsc ( units , tmp ) else
53552: LD_ADDR_VAR 0 3
53556: PUSH
53557: LD_VAR 0 1
53561: PPUSH
53562: LD_VAR 0 5
53566: PPUSH
53567: CALL_OW 76
53571: ST_TO_ADDR
53572: GO 53594
// result := SortListByListDesc ( units , tmp ) ;
53574: LD_ADDR_VAR 0 3
53578: PUSH
53579: LD_VAR 0 1
53583: PPUSH
53584: LD_VAR 0 5
53588: PPUSH
53589: CALL_OW 77
53593: ST_TO_ADDR
// end ;
53594: LD_VAR 0 3
53598: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
53599: LD_INT 0
53601: PPUSH
53602: PPUSH
// task := GetTaskList ( mech ) ;
53603: LD_ADDR_VAR 0 4
53607: PUSH
53608: LD_VAR 0 1
53612: PPUSH
53613: CALL_OW 437
53617: ST_TO_ADDR
// if not task then
53618: LD_VAR 0 4
53622: NOT
53623: IFFALSE 53627
// exit ;
53625: GO 53669
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
53627: LD_ADDR_VAR 0 3
53631: PUSH
53632: LD_VAR 0 4
53636: PUSH
53637: LD_INT 1
53639: ARRAY
53640: PUSH
53641: LD_INT 1
53643: ARRAY
53644: PUSH
53645: LD_STRING r
53647: EQUAL
53648: PUSH
53649: LD_VAR 0 4
53653: PUSH
53654: LD_INT 1
53656: ARRAY
53657: PUSH
53658: LD_INT 4
53660: ARRAY
53661: PUSH
53662: LD_VAR 0 2
53666: EQUAL
53667: AND
53668: ST_TO_ADDR
// end ;
53669: LD_VAR 0 3
53673: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
53674: LD_INT 0
53676: PPUSH
// SetDir ( unit , d ) ;
53677: LD_VAR 0 1
53681: PPUSH
53682: LD_VAR 0 4
53686: PPUSH
53687: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
53691: LD_VAR 0 1
53695: PPUSH
53696: LD_VAR 0 2
53700: PPUSH
53701: LD_VAR 0 3
53705: PPUSH
53706: LD_VAR 0 5
53710: PPUSH
53711: CALL_OW 48
// end ;
53715: LD_VAR 0 6
53719: RET
// export function ToNaturalNumber ( number ) ; begin
53720: LD_INT 0
53722: PPUSH
// result := number div 1 ;
53723: LD_ADDR_VAR 0 2
53727: PUSH
53728: LD_VAR 0 1
53732: PUSH
53733: LD_INT 1
53735: DIV
53736: ST_TO_ADDR
// if number < 0 then
53737: LD_VAR 0 1
53741: PUSH
53742: LD_INT 0
53744: LESS
53745: IFFALSE 53755
// result := 0 ;
53747: LD_ADDR_VAR 0 2
53751: PUSH
53752: LD_INT 0
53754: ST_TO_ADDR
// end ;
53755: LD_VAR 0 2
53759: RET
// export function SortByClass ( units , class ) ; var un ; begin
53760: LD_INT 0
53762: PPUSH
53763: PPUSH
// if not units or not class then
53764: LD_VAR 0 1
53768: NOT
53769: PUSH
53770: LD_VAR 0 2
53774: NOT
53775: OR
53776: IFFALSE 53780
// exit ;
53778: GO 53875
// result := [ ] ;
53780: LD_ADDR_VAR 0 3
53784: PUSH
53785: EMPTY
53786: ST_TO_ADDR
// for un in units do
53787: LD_ADDR_VAR 0 4
53791: PUSH
53792: LD_VAR 0 1
53796: PUSH
53797: FOR_IN
53798: IFFALSE 53873
// if GetClass ( un ) = class then
53800: LD_VAR 0 4
53804: PPUSH
53805: CALL_OW 257
53809: PUSH
53810: LD_VAR 0 2
53814: EQUAL
53815: IFFALSE 53842
// result := Insert ( result , 1 , un ) else
53817: LD_ADDR_VAR 0 3
53821: PUSH
53822: LD_VAR 0 3
53826: PPUSH
53827: LD_INT 1
53829: PPUSH
53830: LD_VAR 0 4
53834: PPUSH
53835: CALL_OW 2
53839: ST_TO_ADDR
53840: GO 53871
// result := Replace ( result , result + 1 , un ) ;
53842: LD_ADDR_VAR 0 3
53846: PUSH
53847: LD_VAR 0 3
53851: PPUSH
53852: LD_VAR 0 3
53856: PUSH
53857: LD_INT 1
53859: PLUS
53860: PPUSH
53861: LD_VAR 0 4
53865: PPUSH
53866: CALL_OW 1
53870: ST_TO_ADDR
53871: GO 53797
53873: POP
53874: POP
// end ;
53875: LD_VAR 0 3
53879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
53880: LD_INT 0
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
// result := [ ] ;
53889: LD_ADDR_VAR 0 4
53893: PUSH
53894: EMPTY
53895: ST_TO_ADDR
// if x - r < 0 then
53896: LD_VAR 0 1
53900: PUSH
53901: LD_VAR 0 3
53905: MINUS
53906: PUSH
53907: LD_INT 0
53909: LESS
53910: IFFALSE 53922
// min_x := 0 else
53912: LD_ADDR_VAR 0 8
53916: PUSH
53917: LD_INT 0
53919: ST_TO_ADDR
53920: GO 53938
// min_x := x - r ;
53922: LD_ADDR_VAR 0 8
53926: PUSH
53927: LD_VAR 0 1
53931: PUSH
53932: LD_VAR 0 3
53936: MINUS
53937: ST_TO_ADDR
// if y - r < 0 then
53938: LD_VAR 0 2
53942: PUSH
53943: LD_VAR 0 3
53947: MINUS
53948: PUSH
53949: LD_INT 0
53951: LESS
53952: IFFALSE 53964
// min_y := 0 else
53954: LD_ADDR_VAR 0 7
53958: PUSH
53959: LD_INT 0
53961: ST_TO_ADDR
53962: GO 53980
// min_y := y - r ;
53964: LD_ADDR_VAR 0 7
53968: PUSH
53969: LD_VAR 0 2
53973: PUSH
53974: LD_VAR 0 3
53978: MINUS
53979: ST_TO_ADDR
// max_x := x + r ;
53980: LD_ADDR_VAR 0 9
53984: PUSH
53985: LD_VAR 0 1
53989: PUSH
53990: LD_VAR 0 3
53994: PLUS
53995: ST_TO_ADDR
// max_y := y + r ;
53996: LD_ADDR_VAR 0 10
54000: PUSH
54001: LD_VAR 0 2
54005: PUSH
54006: LD_VAR 0 3
54010: PLUS
54011: ST_TO_ADDR
// for _x = min_x to max_x do
54012: LD_ADDR_VAR 0 5
54016: PUSH
54017: DOUBLE
54018: LD_VAR 0 8
54022: DEC
54023: ST_TO_ADDR
54024: LD_VAR 0 9
54028: PUSH
54029: FOR_TO
54030: IFFALSE 54131
// for _y = min_y to max_y do
54032: LD_ADDR_VAR 0 6
54036: PUSH
54037: DOUBLE
54038: LD_VAR 0 7
54042: DEC
54043: ST_TO_ADDR
54044: LD_VAR 0 10
54048: PUSH
54049: FOR_TO
54050: IFFALSE 54127
// begin if not ValidHex ( _x , _y ) then
54052: LD_VAR 0 5
54056: PPUSH
54057: LD_VAR 0 6
54061: PPUSH
54062: CALL_OW 488
54066: NOT
54067: IFFALSE 54071
// continue ;
54069: GO 54049
// if GetResourceTypeXY ( _x , _y ) then
54071: LD_VAR 0 5
54075: PPUSH
54076: LD_VAR 0 6
54080: PPUSH
54081: CALL_OW 283
54085: IFFALSE 54125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
54087: LD_ADDR_VAR 0 4
54091: PUSH
54092: LD_VAR 0 4
54096: PPUSH
54097: LD_VAR 0 4
54101: PUSH
54102: LD_INT 1
54104: PLUS
54105: PPUSH
54106: LD_VAR 0 5
54110: PUSH
54111: LD_VAR 0 6
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PPUSH
54120: CALL_OW 1
54124: ST_TO_ADDR
// end ;
54125: GO 54049
54127: POP
54128: POP
54129: GO 54029
54131: POP
54132: POP
// end ;
54133: LD_VAR 0 4
54137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
54138: LD_INT 0
54140: PPUSH
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
54145: PPUSH
54146: PPUSH
54147: PPUSH
// if not units then
54148: LD_VAR 0 1
54152: NOT
54153: IFFALSE 54157
// exit ;
54155: GO 54685
// result := UnitFilter ( units , [ f_ok ] ) ;
54157: LD_ADDR_VAR 0 3
54161: PUSH
54162: LD_VAR 0 1
54166: PPUSH
54167: LD_INT 50
54169: PUSH
54170: EMPTY
54171: LIST
54172: PPUSH
54173: CALL_OW 72
54177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
54178: LD_ADDR_VAR 0 8
54182: PUSH
54183: LD_VAR 0 1
54187: PUSH
54188: LD_INT 1
54190: ARRAY
54191: PPUSH
54192: CALL_OW 255
54196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
54197: LD_ADDR_VAR 0 10
54201: PUSH
54202: LD_INT 29
54204: PUSH
54205: LD_INT 91
54207: PUSH
54208: LD_INT 49
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// if not result then
54216: LD_VAR 0 3
54220: NOT
54221: IFFALSE 54225
// exit ;
54223: GO 54685
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
54225: LD_ADDR_VAR 0 5
54229: PUSH
54230: LD_INT 81
54232: PUSH
54233: LD_VAR 0 8
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PPUSH
54242: CALL_OW 69
54246: ST_TO_ADDR
// for i in result do
54247: LD_ADDR_VAR 0 4
54251: PUSH
54252: LD_VAR 0 3
54256: PUSH
54257: FOR_IN
54258: IFFALSE 54683
// begin tag := GetTag ( i ) + 1 ;
54260: LD_ADDR_VAR 0 9
54264: PUSH
54265: LD_VAR 0 4
54269: PPUSH
54270: CALL_OW 110
54274: PUSH
54275: LD_INT 1
54277: PLUS
54278: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
54279: LD_ADDR_VAR 0 7
54283: PUSH
54284: LD_VAR 0 4
54288: PPUSH
54289: CALL_OW 250
54293: PPUSH
54294: LD_VAR 0 4
54298: PPUSH
54299: CALL_OW 251
54303: PPUSH
54304: LD_INT 4
54306: PPUSH
54307: CALL 53880 0 3
54311: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
54312: LD_VAR 0 4
54316: PPUSH
54317: CALL_OW 247
54321: PUSH
54322: LD_INT 2
54324: EQUAL
54325: PUSH
54326: LD_VAR 0 7
54330: PUSH
54331: LD_INT 2
54333: GREATER
54334: AND
54335: PUSH
54336: LD_VAR 0 4
54340: PPUSH
54341: CALL_OW 264
54345: PUSH
54346: LD_VAR 0 10
54350: IN
54351: NOT
54352: AND
54353: IFFALSE 54392
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
54355: LD_VAR 0 4
54359: PPUSH
54360: LD_VAR 0 7
54364: PUSH
54365: LD_INT 1
54367: ARRAY
54368: PUSH
54369: LD_INT 1
54371: ARRAY
54372: PPUSH
54373: LD_VAR 0 7
54377: PUSH
54378: LD_INT 1
54380: ARRAY
54381: PUSH
54382: LD_INT 2
54384: ARRAY
54385: PPUSH
54386: CALL_OW 116
54390: GO 54681
// if path > tag then
54392: LD_VAR 0 2
54396: PUSH
54397: LD_VAR 0 9
54401: GREATER
54402: IFFALSE 54610
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
54404: LD_ADDR_VAR 0 6
54408: PUSH
54409: LD_VAR 0 5
54413: PPUSH
54414: LD_INT 91
54416: PUSH
54417: LD_VAR 0 4
54421: PUSH
54422: LD_INT 8
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: PPUSH
54430: CALL_OW 72
54434: ST_TO_ADDR
// if nearEnemy then
54435: LD_VAR 0 6
54439: IFFALSE 54508
// begin if GetWeapon ( i ) = ru_time_lapser then
54441: LD_VAR 0 4
54445: PPUSH
54446: CALL_OW 264
54450: PUSH
54451: LD_INT 49
54453: EQUAL
54454: IFFALSE 54482
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
54456: LD_VAR 0 4
54460: PPUSH
54461: LD_VAR 0 6
54465: PPUSH
54466: LD_VAR 0 4
54470: PPUSH
54471: CALL_OW 74
54475: PPUSH
54476: CALL_OW 112
54480: GO 54506
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
54482: LD_VAR 0 4
54486: PPUSH
54487: LD_VAR 0 6
54491: PPUSH
54492: LD_VAR 0 4
54496: PPUSH
54497: CALL_OW 74
54501: PPUSH
54502: CALL 55756 0 2
// end else
54506: GO 54608
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
54508: LD_VAR 0 4
54512: PPUSH
54513: LD_VAR 0 2
54517: PUSH
54518: LD_VAR 0 9
54522: ARRAY
54523: PUSH
54524: LD_INT 1
54526: ARRAY
54527: PPUSH
54528: LD_VAR 0 2
54532: PUSH
54533: LD_VAR 0 9
54537: ARRAY
54538: PUSH
54539: LD_INT 2
54541: ARRAY
54542: PPUSH
54543: CALL_OW 297
54547: PUSH
54548: LD_INT 6
54550: GREATER
54551: IFFALSE 54594
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
54553: LD_VAR 0 4
54557: PPUSH
54558: LD_VAR 0 2
54562: PUSH
54563: LD_VAR 0 9
54567: ARRAY
54568: PUSH
54569: LD_INT 1
54571: ARRAY
54572: PPUSH
54573: LD_VAR 0 2
54577: PUSH
54578: LD_VAR 0 9
54582: ARRAY
54583: PUSH
54584: LD_INT 2
54586: ARRAY
54587: PPUSH
54588: CALL_OW 114
54592: GO 54608
// SetTag ( i , tag ) ;
54594: LD_VAR 0 4
54598: PPUSH
54599: LD_VAR 0 9
54603: PPUSH
54604: CALL_OW 109
// end else
54608: GO 54681
// if enemy then
54610: LD_VAR 0 5
54614: IFFALSE 54681
// begin if GetWeapon ( i ) = ru_time_lapser then
54616: LD_VAR 0 4
54620: PPUSH
54621: CALL_OW 264
54625: PUSH
54626: LD_INT 49
54628: EQUAL
54629: IFFALSE 54657
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
54631: LD_VAR 0 4
54635: PPUSH
54636: LD_VAR 0 5
54640: PPUSH
54641: LD_VAR 0 4
54645: PPUSH
54646: CALL_OW 74
54650: PPUSH
54651: CALL_OW 112
54655: GO 54681
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
54657: LD_VAR 0 4
54661: PPUSH
54662: LD_VAR 0 5
54666: PPUSH
54667: LD_VAR 0 4
54671: PPUSH
54672: CALL_OW 74
54676: PPUSH
54677: CALL 55756 0 2
// end ; end ;
54681: GO 54257
54683: POP
54684: POP
// end ;
54685: LD_VAR 0 3
54689: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
54690: LD_INT 0
54692: PPUSH
54693: PPUSH
54694: PPUSH
// if not unit or IsInUnit ( unit ) then
54695: LD_VAR 0 1
54699: NOT
54700: PUSH
54701: LD_VAR 0 1
54705: PPUSH
54706: CALL_OW 310
54710: OR
54711: IFFALSE 54715
// exit ;
54713: GO 54806
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
54715: LD_ADDR_VAR 0 4
54719: PUSH
54720: LD_VAR 0 1
54724: PPUSH
54725: CALL_OW 250
54729: PPUSH
54730: LD_VAR 0 2
54734: PPUSH
54735: LD_INT 1
54737: PPUSH
54738: CALL_OW 272
54742: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
54743: LD_ADDR_VAR 0 5
54747: PUSH
54748: LD_VAR 0 1
54752: PPUSH
54753: CALL_OW 251
54757: PPUSH
54758: LD_VAR 0 2
54762: PPUSH
54763: LD_INT 1
54765: PPUSH
54766: CALL_OW 273
54770: ST_TO_ADDR
// if ValidHex ( x , y ) then
54771: LD_VAR 0 4
54775: PPUSH
54776: LD_VAR 0 5
54780: PPUSH
54781: CALL_OW 488
54785: IFFALSE 54806
// ComTurnXY ( unit , x , y ) ;
54787: LD_VAR 0 1
54791: PPUSH
54792: LD_VAR 0 4
54796: PPUSH
54797: LD_VAR 0 5
54801: PPUSH
54802: CALL_OW 118
// end ;
54806: LD_VAR 0 3
54810: RET
// export function SeeUnits ( side , units ) ; var i ; begin
54811: LD_INT 0
54813: PPUSH
54814: PPUSH
// result := false ;
54815: LD_ADDR_VAR 0 3
54819: PUSH
54820: LD_INT 0
54822: ST_TO_ADDR
// if not units then
54823: LD_VAR 0 2
54827: NOT
54828: IFFALSE 54832
// exit ;
54830: GO 54877
// for i in units do
54832: LD_ADDR_VAR 0 4
54836: PUSH
54837: LD_VAR 0 2
54841: PUSH
54842: FOR_IN
54843: IFFALSE 54875
// if See ( side , i ) then
54845: LD_VAR 0 1
54849: PPUSH
54850: LD_VAR 0 4
54854: PPUSH
54855: CALL_OW 292
54859: IFFALSE 54873
// begin result := true ;
54861: LD_ADDR_VAR 0 3
54865: PUSH
54866: LD_INT 1
54868: ST_TO_ADDR
// exit ;
54869: POP
54870: POP
54871: GO 54877
// end ;
54873: GO 54842
54875: POP
54876: POP
// end ;
54877: LD_VAR 0 3
54881: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
54882: LD_INT 0
54884: PPUSH
54885: PPUSH
54886: PPUSH
54887: PPUSH
// if not unit or not points then
54888: LD_VAR 0 1
54892: NOT
54893: PUSH
54894: LD_VAR 0 2
54898: NOT
54899: OR
54900: IFFALSE 54904
// exit ;
54902: GO 54994
// dist := 99999 ;
54904: LD_ADDR_VAR 0 5
54908: PUSH
54909: LD_INT 99999
54911: ST_TO_ADDR
// for i in points do
54912: LD_ADDR_VAR 0 4
54916: PUSH
54917: LD_VAR 0 2
54921: PUSH
54922: FOR_IN
54923: IFFALSE 54992
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
54925: LD_ADDR_VAR 0 6
54929: PUSH
54930: LD_VAR 0 1
54934: PPUSH
54935: LD_VAR 0 4
54939: PUSH
54940: LD_INT 1
54942: ARRAY
54943: PPUSH
54944: LD_VAR 0 4
54948: PUSH
54949: LD_INT 2
54951: ARRAY
54952: PPUSH
54953: CALL_OW 297
54957: ST_TO_ADDR
// if tmpDist < dist then
54958: LD_VAR 0 6
54962: PUSH
54963: LD_VAR 0 5
54967: LESS
54968: IFFALSE 54990
// begin result := i ;
54970: LD_ADDR_VAR 0 3
54974: PUSH
54975: LD_VAR 0 4
54979: ST_TO_ADDR
// dist := tmpDist ;
54980: LD_ADDR_VAR 0 5
54984: PUSH
54985: LD_VAR 0 6
54989: ST_TO_ADDR
// end ; end ;
54990: GO 54922
54992: POP
54993: POP
// end ;
54994: LD_VAR 0 3
54998: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
54999: LD_INT 0
55001: PPUSH
// uc_side := side ;
55002: LD_ADDR_OWVAR 20
55006: PUSH
55007: LD_VAR 0 1
55011: ST_TO_ADDR
// uc_nation := 3 ;
55012: LD_ADDR_OWVAR 21
55016: PUSH
55017: LD_INT 3
55019: ST_TO_ADDR
// vc_chassis := 25 ;
55020: LD_ADDR_OWVAR 37
55024: PUSH
55025: LD_INT 25
55027: ST_TO_ADDR
// vc_engine := engine_siberite ;
55028: LD_ADDR_OWVAR 39
55032: PUSH
55033: LD_INT 3
55035: ST_TO_ADDR
// vc_control := control_computer ;
55036: LD_ADDR_OWVAR 38
55040: PUSH
55041: LD_INT 3
55043: ST_TO_ADDR
// vc_weapon := 59 ;
55044: LD_ADDR_OWVAR 40
55048: PUSH
55049: LD_INT 59
55051: ST_TO_ADDR
// result := CreateVehicle ;
55052: LD_ADDR_VAR 0 5
55056: PUSH
55057: CALL_OW 45
55061: ST_TO_ADDR
// SetDir ( result , d ) ;
55062: LD_VAR 0 5
55066: PPUSH
55067: LD_VAR 0 4
55071: PPUSH
55072: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
55076: LD_VAR 0 5
55080: PPUSH
55081: LD_VAR 0 2
55085: PPUSH
55086: LD_VAR 0 3
55090: PPUSH
55091: LD_INT 0
55093: PPUSH
55094: CALL_OW 48
// end ;
55098: LD_VAR 0 5
55102: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
55103: LD_INT 0
55105: PPUSH
55106: PPUSH
55107: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
55108: LD_ADDR_VAR 0 2
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: LD_INT 0
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
55131: LD_VAR 0 1
55135: NOT
55136: PUSH
55137: LD_VAR 0 1
55141: PPUSH
55142: CALL_OW 264
55146: PUSH
55147: LD_INT 12
55149: PUSH
55150: LD_INT 51
55152: PUSH
55153: LD_INT 32
55155: PUSH
55156: LD_INT 89
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: IN
55165: NOT
55166: OR
55167: IFFALSE 55171
// exit ;
55169: GO 55269
// for i := 1 to 3 do
55171: LD_ADDR_VAR 0 3
55175: PUSH
55176: DOUBLE
55177: LD_INT 1
55179: DEC
55180: ST_TO_ADDR
55181: LD_INT 3
55183: PUSH
55184: FOR_TO
55185: IFFALSE 55267
// begin tmp := GetCargo ( cargo , i ) ;
55187: LD_ADDR_VAR 0 4
55191: PUSH
55192: LD_VAR 0 1
55196: PPUSH
55197: LD_VAR 0 3
55201: PPUSH
55202: CALL_OW 289
55206: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
55207: LD_ADDR_VAR 0 2
55211: PUSH
55212: LD_VAR 0 2
55216: PPUSH
55217: LD_VAR 0 3
55221: PPUSH
55222: LD_VAR 0 4
55226: PPUSH
55227: CALL_OW 1
55231: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
55232: LD_ADDR_VAR 0 2
55236: PUSH
55237: LD_VAR 0 2
55241: PPUSH
55242: LD_INT 4
55244: PPUSH
55245: LD_VAR 0 2
55249: PUSH
55250: LD_INT 4
55252: ARRAY
55253: PUSH
55254: LD_VAR 0 4
55258: PLUS
55259: PPUSH
55260: CALL_OW 1
55264: ST_TO_ADDR
// end ;
55265: GO 55184
55267: POP
55268: POP
// end ;
55269: LD_VAR 0 2
55273: RET
// export function Length ( array ) ; begin
55274: LD_INT 0
55276: PPUSH
// result := array + 0 ;
55277: LD_ADDR_VAR 0 2
55281: PUSH
55282: LD_VAR 0 1
55286: PUSH
55287: LD_INT 0
55289: PLUS
55290: ST_TO_ADDR
// end ;
55291: LD_VAR 0 2
55295: RET
// export function PrepareArray ( array ) ; begin
55296: LD_INT 0
55298: PPUSH
// result := array diff 0 ;
55299: LD_ADDR_VAR 0 2
55303: PUSH
55304: LD_VAR 0 1
55308: PUSH
55309: LD_INT 0
55311: DIFF
55312: ST_TO_ADDR
// if not result [ 1 ] then
55313: LD_VAR 0 2
55317: PUSH
55318: LD_INT 1
55320: ARRAY
55321: NOT
55322: IFFALSE 55342
// result := Delete ( result , 1 ) ;
55324: LD_ADDR_VAR 0 2
55328: PUSH
55329: LD_VAR 0 2
55333: PPUSH
55334: LD_INT 1
55336: PPUSH
55337: CALL_OW 3
55341: ST_TO_ADDR
// end ;
55342: LD_VAR 0 2
55346: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
55347: LD_INT 0
55349: PPUSH
55350: PPUSH
55351: PPUSH
55352: PPUSH
// sibRocketRange := 25 ;
55353: LD_ADDR_VAR 0 6
55357: PUSH
55358: LD_INT 25
55360: ST_TO_ADDR
// result := false ;
55361: LD_ADDR_VAR 0 4
55365: PUSH
55366: LD_INT 0
55368: ST_TO_ADDR
// for i := 0 to 5 do
55369: LD_ADDR_VAR 0 5
55373: PUSH
55374: DOUBLE
55375: LD_INT 0
55377: DEC
55378: ST_TO_ADDR
55379: LD_INT 5
55381: PUSH
55382: FOR_TO
55383: IFFALSE 55450
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
55385: LD_VAR 0 1
55389: PPUSH
55390: LD_VAR 0 5
55394: PPUSH
55395: LD_VAR 0 6
55399: PPUSH
55400: CALL_OW 272
55404: PPUSH
55405: LD_VAR 0 2
55409: PPUSH
55410: LD_VAR 0 5
55414: PPUSH
55415: LD_VAR 0 6
55419: PPUSH
55420: CALL_OW 273
55424: PPUSH
55425: LD_VAR 0 3
55429: PPUSH
55430: CALL_OW 309
55434: IFFALSE 55448
// begin result := true ;
55436: LD_ADDR_VAR 0 4
55440: PUSH
55441: LD_INT 1
55443: ST_TO_ADDR
// exit ;
55444: POP
55445: POP
55446: GO 55452
// end ;
55448: GO 55382
55450: POP
55451: POP
// end ;
55452: LD_VAR 0 4
55456: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
55457: LD_INT 0
55459: PPUSH
55460: PPUSH
55461: PPUSH
// if btype = b_depot then
55462: LD_VAR 0 2
55466: PUSH
55467: LD_INT 0
55469: EQUAL
55470: IFFALSE 55482
// begin result := true ;
55472: LD_ADDR_VAR 0 3
55476: PUSH
55477: LD_INT 1
55479: ST_TO_ADDR
// exit ;
55480: GO 55598
// end ; pom := GetBase ( depot ) ;
55482: LD_ADDR_VAR 0 4
55486: PUSH
55487: LD_VAR 0 1
55491: PPUSH
55492: CALL_OW 274
55496: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
55497: LD_ADDR_VAR 0 5
55501: PUSH
55502: LD_VAR 0 2
55506: PPUSH
55507: LD_VAR 0 1
55511: PPUSH
55512: CALL_OW 248
55516: PPUSH
55517: CALL_OW 450
55521: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
55522: LD_ADDR_VAR 0 3
55526: PUSH
55527: LD_VAR 0 4
55531: PPUSH
55532: LD_INT 1
55534: PPUSH
55535: CALL_OW 275
55539: PUSH
55540: LD_VAR 0 5
55544: PUSH
55545: LD_INT 1
55547: ARRAY
55548: GREATEREQUAL
55549: PUSH
55550: LD_VAR 0 4
55554: PPUSH
55555: LD_INT 2
55557: PPUSH
55558: CALL_OW 275
55562: PUSH
55563: LD_VAR 0 5
55567: PUSH
55568: LD_INT 2
55570: ARRAY
55571: GREATEREQUAL
55572: AND
55573: PUSH
55574: LD_VAR 0 4
55578: PPUSH
55579: LD_INT 3
55581: PPUSH
55582: CALL_OW 275
55586: PUSH
55587: LD_VAR 0 5
55591: PUSH
55592: LD_INT 3
55594: ARRAY
55595: GREATEREQUAL
55596: AND
55597: ST_TO_ADDR
// end ;
55598: LD_VAR 0 3
55602: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
55603: LD_INT 0
55605: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
55606: LD_VAR 0 1
55610: PPUSH
55611: LD_VAR 0 2
55615: PPUSH
55616: LD_INT 0
55618: PPUSH
55619: LD_INT 0
55621: PPUSH
55622: LD_INT 1
55624: PPUSH
55625: LD_INT 0
55627: PPUSH
55628: CALL_OW 587
// end ;
55632: LD_VAR 0 3
55636: RET
// export function CenterOnNow ( unit ) ; begin
55637: LD_INT 0
55639: PPUSH
// result := IsInUnit ( unit ) ;
55640: LD_ADDR_VAR 0 2
55644: PUSH
55645: LD_VAR 0 1
55649: PPUSH
55650: CALL_OW 310
55654: ST_TO_ADDR
// if not result then
55655: LD_VAR 0 2
55659: NOT
55660: IFFALSE 55672
// result := unit ;
55662: LD_ADDR_VAR 0 2
55666: PUSH
55667: LD_VAR 0 1
55671: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
55672: LD_VAR 0 1
55676: PPUSH
55677: CALL_OW 87
// end ;
55681: LD_VAR 0 2
55685: RET
// export function ComMoveHex ( unit , hex ) ; begin
55686: LD_INT 0
55688: PPUSH
// if not hex then
55689: LD_VAR 0 2
55693: NOT
55694: IFFALSE 55698
// exit ;
55696: GO 55751
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
55698: LD_VAR 0 2
55702: PUSH
55703: LD_INT 1
55705: ARRAY
55706: PPUSH
55707: LD_VAR 0 2
55711: PUSH
55712: LD_INT 2
55714: ARRAY
55715: PPUSH
55716: CALL_OW 428
55720: IFFALSE 55724
// exit ;
55722: GO 55751
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
55724: LD_VAR 0 1
55728: PPUSH
55729: LD_VAR 0 2
55733: PUSH
55734: LD_INT 1
55736: ARRAY
55737: PPUSH
55738: LD_VAR 0 2
55742: PUSH
55743: LD_INT 2
55745: ARRAY
55746: PPUSH
55747: CALL_OW 111
// end ;
55751: LD_VAR 0 3
55755: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
55756: LD_INT 0
55758: PPUSH
55759: PPUSH
55760: PPUSH
// if not unit or not enemy then
55761: LD_VAR 0 1
55765: NOT
55766: PUSH
55767: LD_VAR 0 2
55771: NOT
55772: OR
55773: IFFALSE 55777
// exit ;
55775: GO 55901
// x := GetX ( enemy ) ;
55777: LD_ADDR_VAR 0 4
55781: PUSH
55782: LD_VAR 0 2
55786: PPUSH
55787: CALL_OW 250
55791: ST_TO_ADDR
// y := GetY ( enemy ) ;
55792: LD_ADDR_VAR 0 5
55796: PUSH
55797: LD_VAR 0 2
55801: PPUSH
55802: CALL_OW 251
55806: ST_TO_ADDR
// if ValidHex ( x , y ) then
55807: LD_VAR 0 4
55811: PPUSH
55812: LD_VAR 0 5
55816: PPUSH
55817: CALL_OW 488
55821: IFFALSE 55901
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
55823: LD_VAR 0 2
55827: PPUSH
55828: CALL_OW 247
55832: PUSH
55833: LD_INT 3
55835: PUSH
55836: LD_INT 2
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: IN
55843: PUSH
55844: LD_VAR 0 1
55848: PPUSH
55849: CALL_OW 255
55853: PPUSH
55854: LD_VAR 0 2
55858: PPUSH
55859: CALL_OW 292
55863: OR
55864: IFFALSE 55882
// ComAttackUnit ( unit , enemy ) else
55866: LD_VAR 0 1
55870: PPUSH
55871: LD_VAR 0 2
55875: PPUSH
55876: CALL_OW 115
55880: GO 55901
// ComAgressiveMove ( unit , x , y ) ;
55882: LD_VAR 0 1
55886: PPUSH
55887: LD_VAR 0 4
55891: PPUSH
55892: LD_VAR 0 5
55896: PPUSH
55897: CALL_OW 114
// end ;
55901: LD_VAR 0 3
55905: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
55906: LD_INT 0
55908: PPUSH
55909: PPUSH
55910: PPUSH
// list := AreaToList ( area , 0 ) ;
55911: LD_ADDR_VAR 0 5
55915: PUSH
55916: LD_VAR 0 1
55920: PPUSH
55921: LD_INT 0
55923: PPUSH
55924: CALL_OW 517
55928: ST_TO_ADDR
// if not list then
55929: LD_VAR 0 5
55933: NOT
55934: IFFALSE 55938
// exit ;
55936: GO 56068
// if all then
55938: LD_VAR 0 2
55942: IFFALSE 56030
// begin for i := 1 to list [ 1 ] do
55944: LD_ADDR_VAR 0 4
55948: PUSH
55949: DOUBLE
55950: LD_INT 1
55952: DEC
55953: ST_TO_ADDR
55954: LD_VAR 0 5
55958: PUSH
55959: LD_INT 1
55961: ARRAY
55962: PUSH
55963: FOR_TO
55964: IFFALSE 56026
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
55966: LD_ADDR_VAR 0 3
55970: PUSH
55971: LD_VAR 0 3
55975: PPUSH
55976: LD_VAR 0 3
55980: PUSH
55981: LD_INT 1
55983: PLUS
55984: PPUSH
55985: LD_VAR 0 5
55989: PUSH
55990: LD_INT 1
55992: ARRAY
55993: PUSH
55994: LD_VAR 0 4
55998: ARRAY
55999: PUSH
56000: LD_VAR 0 5
56004: PUSH
56005: LD_INT 2
56007: ARRAY
56008: PUSH
56009: LD_VAR 0 4
56013: ARRAY
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PPUSH
56019: CALL_OW 1
56023: ST_TO_ADDR
56024: GO 55963
56026: POP
56027: POP
// exit ;
56028: GO 56068
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
56030: LD_ADDR_VAR 0 3
56034: PUSH
56035: LD_VAR 0 5
56039: PUSH
56040: LD_INT 1
56042: ARRAY
56043: PUSH
56044: LD_INT 1
56046: ARRAY
56047: PUSH
56048: LD_VAR 0 5
56052: PUSH
56053: LD_INT 2
56055: ARRAY
56056: PUSH
56057: LD_INT 1
56059: ARRAY
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: ST_TO_ADDR
// end ;
56068: LD_VAR 0 3
56072: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
56073: LD_INT 0
56075: PPUSH
56076: PPUSH
// list := AreaToList ( area , 0 ) ;
56077: LD_ADDR_VAR 0 4
56081: PUSH
56082: LD_VAR 0 1
56086: PPUSH
56087: LD_INT 0
56089: PPUSH
56090: CALL_OW 517
56094: ST_TO_ADDR
// if not list then
56095: LD_VAR 0 4
56099: NOT
56100: IFFALSE 56104
// exit ;
56102: GO 56145
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
56104: LD_ADDR_VAR 0 3
56108: PUSH
56109: LD_VAR 0 4
56113: PUSH
56114: LD_INT 1
56116: ARRAY
56117: PUSH
56118: LD_INT 1
56120: ARRAY
56121: PUSH
56122: LD_VAR 0 4
56126: PUSH
56127: LD_INT 2
56129: ARRAY
56130: PUSH
56131: LD_INT 1
56133: ARRAY
56134: PUSH
56135: LD_VAR 0 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// end ;
56145: LD_VAR 0 3
56149: RET
// export function First ( array ) ; begin
56150: LD_INT 0
56152: PPUSH
// if not array then
56153: LD_VAR 0 1
56157: NOT
56158: IFFALSE 56162
// exit ;
56160: GO 56176
// result := array [ 1 ] ;
56162: LD_ADDR_VAR 0 2
56166: PUSH
56167: LD_VAR 0 1
56171: PUSH
56172: LD_INT 1
56174: ARRAY
56175: ST_TO_ADDR
// end ;
56176: LD_VAR 0 2
56180: RET
// export function Last ( array ) ; begin
56181: LD_INT 0
56183: PPUSH
// if not array then
56184: LD_VAR 0 1
56188: NOT
56189: IFFALSE 56193
// exit ;
56191: GO 56209
// result := array [ array ] ;
56193: LD_ADDR_VAR 0 2
56197: PUSH
56198: LD_VAR 0 1
56202: PUSH
56203: LD_VAR 0 1
56207: ARRAY
56208: ST_TO_ADDR
// end ;
56209: LD_VAR 0 2
56213: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
56214: LD_INT 0
56216: PPUSH
56217: PPUSH
// result := [ ] ;
56218: LD_ADDR_VAR 0 5
56222: PUSH
56223: EMPTY
56224: ST_TO_ADDR
// if not array then
56225: LD_VAR 0 1
56229: NOT
56230: IFFALSE 56234
// exit ;
56232: GO 56346
// for i := 1 to array do
56234: LD_ADDR_VAR 0 6
56238: PUSH
56239: DOUBLE
56240: LD_INT 1
56242: DEC
56243: ST_TO_ADDR
56244: LD_VAR 0 1
56248: PUSH
56249: FOR_TO
56250: IFFALSE 56344
// if array [ i ] [ index ] = value then
56252: LD_VAR 0 1
56256: PUSH
56257: LD_VAR 0 6
56261: ARRAY
56262: PUSH
56263: LD_VAR 0 2
56267: ARRAY
56268: PUSH
56269: LD_VAR 0 3
56273: EQUAL
56274: IFFALSE 56342
// begin if indexColumn then
56276: LD_VAR 0 4
56280: IFFALSE 56316
// result := Join ( result , array [ i ] [ indexColumn ] ) else
56282: LD_ADDR_VAR 0 5
56286: PUSH
56287: LD_VAR 0 5
56291: PPUSH
56292: LD_VAR 0 1
56296: PUSH
56297: LD_VAR 0 6
56301: ARRAY
56302: PUSH
56303: LD_VAR 0 4
56307: ARRAY
56308: PPUSH
56309: CALL 51534 0 2
56313: ST_TO_ADDR
56314: GO 56342
// result := Join ( result , array [ i ] ) ;
56316: LD_ADDR_VAR 0 5
56320: PUSH
56321: LD_VAR 0 5
56325: PPUSH
56326: LD_VAR 0 1
56330: PUSH
56331: LD_VAR 0 6
56335: ARRAY
56336: PPUSH
56337: CALL 51534 0 2
56341: ST_TO_ADDR
// end ;
56342: GO 56249
56344: POP
56345: POP
// end ;
56346: LD_VAR 0 5
56350: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
56351: LD_INT 0
56353: PPUSH
// if not vehicles or not parkingPoint then
56354: LD_VAR 0 1
56358: NOT
56359: PUSH
56360: LD_VAR 0 2
56364: NOT
56365: OR
56366: IFFALSE 56370
// exit ;
56368: GO 56468
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
56370: LD_ADDR_VAR 0 1
56374: PUSH
56375: LD_VAR 0 1
56379: PPUSH
56380: LD_INT 50
56382: PUSH
56383: EMPTY
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: LD_INT 92
56391: PUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_INT 1
56399: ARRAY
56400: PUSH
56401: LD_VAR 0 2
56405: PUSH
56406: LD_INT 2
56408: ARRAY
56409: PUSH
56410: LD_INT 8
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PPUSH
56427: CALL_OW 72
56431: ST_TO_ADDR
// if not vehicles then
56432: LD_VAR 0 1
56436: NOT
56437: IFFALSE 56441
// exit ;
56439: GO 56468
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
56441: LD_VAR 0 1
56445: PPUSH
56446: LD_VAR 0 2
56450: PUSH
56451: LD_INT 1
56453: ARRAY
56454: PPUSH
56455: LD_VAR 0 2
56459: PUSH
56460: LD_INT 2
56462: ARRAY
56463: PPUSH
56464: CALL_OW 111
// end ;
56468: LD_VAR 0 3
56472: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
56473: LD_INT 0
56475: PPUSH
56476: PPUSH
56477: PPUSH
// if not side or not area then
56478: LD_VAR 0 1
56482: NOT
56483: PUSH
56484: LD_VAR 0 2
56488: NOT
56489: OR
56490: IFFALSE 56494
// exit ;
56492: GO 56613
// tmp := AreaToList ( area , 0 ) ;
56494: LD_ADDR_VAR 0 5
56498: PUSH
56499: LD_VAR 0 2
56503: PPUSH
56504: LD_INT 0
56506: PPUSH
56507: CALL_OW 517
56511: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
56512: LD_ADDR_VAR 0 4
56516: PUSH
56517: DOUBLE
56518: LD_INT 1
56520: DEC
56521: ST_TO_ADDR
56522: LD_VAR 0 5
56526: PUSH
56527: LD_INT 1
56529: ARRAY
56530: PUSH
56531: FOR_TO
56532: IFFALSE 56611
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
56534: LD_VAR 0 5
56538: PUSH
56539: LD_INT 1
56541: ARRAY
56542: PUSH
56543: LD_VAR 0 4
56547: ARRAY
56548: PPUSH
56549: LD_VAR 0 5
56553: PUSH
56554: LD_INT 2
56556: ARRAY
56557: PUSH
56558: LD_VAR 0 4
56562: ARRAY
56563: PPUSH
56564: CALL_OW 351
56568: IFFALSE 56609
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
56570: LD_VAR 0 5
56574: PUSH
56575: LD_INT 1
56577: ARRAY
56578: PUSH
56579: LD_VAR 0 4
56583: ARRAY
56584: PPUSH
56585: LD_VAR 0 5
56589: PUSH
56590: LD_INT 2
56592: ARRAY
56593: PUSH
56594: LD_VAR 0 4
56598: ARRAY
56599: PPUSH
56600: LD_VAR 0 1
56604: PPUSH
56605: CALL_OW 244
// end ;
56609: GO 56531
56611: POP
56612: POP
// end ; end_of_file
56613: LD_VAR 0 3
56617: RET
// export globalGameSaveCounter ; every 0 0$1 do
56618: GO 56620
56620: DISABLE
// begin enable ;
56621: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
56622: LD_STRING updateTimer(
56624: PUSH
56625: LD_OWVAR 1
56629: STR
56630: PUSH
56631: LD_STRING );
56633: STR
56634: PPUSH
56635: CALL_OW 559
// end ;
56639: END
// every 0 0$1 do
56640: GO 56642
56642: DISABLE
// begin globalGameSaveCounter := 0 ;
56643: LD_ADDR_EXP 40
56647: PUSH
56648: LD_INT 0
56650: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
56651: LD_STRING setGameSaveCounter(0)
56653: PPUSH
56654: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
56658: LD_STRING initStreamRollete();
56660: PPUSH
56661: CALL_OW 559
// InitStreamMode ;
56665: CALL 58008 0 0
// DefineStreamItems ( false ) ;
56669: LD_INT 0
56671: PPUSH
56672: CALL 58472 0 1
// end ;
56676: END
// export function SOS_MapStart ( ) ; begin
56677: LD_INT 0
56679: PPUSH
// if streamModeActive then
56680: LD_EXP 41
56684: IFFALSE 56693
// DefineStreamItems ( true ) ;
56686: LD_INT 1
56688: PPUSH
56689: CALL 58472 0 1
// UpdateLuaVariables ( ) ;
56693: CALL 56710 0 0
// UpdateFactoryWaypoints ( ) ;
56697: CALL 71341 0 0
// UpdateWarehouseGatheringPoints ( ) ;
56701: CALL 71598 0 0
// end ;
56705: LD_VAR 0 1
56709: RET
// function UpdateLuaVariables ( ) ; begin
56710: LD_INT 0
56712: PPUSH
// if globalGameSaveCounter then
56713: LD_EXP 40
56717: IFFALSE 56751
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
56719: LD_ADDR_EXP 40
56723: PUSH
56724: LD_EXP 40
56728: PPUSH
56729: CALL 52895 0 1
56733: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
56734: LD_STRING setGameSaveCounter(
56736: PUSH
56737: LD_EXP 40
56741: STR
56742: PUSH
56743: LD_STRING )
56745: STR
56746: PPUSH
56747: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
56751: LD_STRING setGameDifficulty(
56753: PUSH
56754: LD_OWVAR 67
56758: STR
56759: PUSH
56760: LD_STRING )
56762: STR
56763: PPUSH
56764: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
56768: LD_STRING displayDifficulty(
56770: PUSH
56771: LD_OWVAR 67
56775: STR
56776: PUSH
56777: LD_STRING )
56779: STR
56780: PPUSH
56781: CALL_OW 559
// end ;
56785: LD_VAR 0 1
56789: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56790: LD_INT 0
56792: PPUSH
// if p2 = stream_mode then
56793: LD_VAR 0 2
56797: PUSH
56798: LD_INT 100
56800: EQUAL
56801: IFFALSE 57804
// begin if not StreamModeActive then
56803: LD_EXP 41
56807: NOT
56808: IFFALSE 56818
// StreamModeActive := true ;
56810: LD_ADDR_EXP 41
56814: PUSH
56815: LD_INT 1
56817: ST_TO_ADDR
// if p3 = 0 then
56818: LD_VAR 0 3
56822: PUSH
56823: LD_INT 0
56825: EQUAL
56826: IFFALSE 56832
// InitStreamMode ;
56828: CALL 58008 0 0
// if p3 = 1 then
56832: LD_VAR 0 3
56836: PUSH
56837: LD_INT 1
56839: EQUAL
56840: IFFALSE 56850
// sRocket := true ;
56842: LD_ADDR_EXP 46
56846: PUSH
56847: LD_INT 1
56849: ST_TO_ADDR
// if p3 = 2 then
56850: LD_VAR 0 3
56854: PUSH
56855: LD_INT 2
56857: EQUAL
56858: IFFALSE 56868
// sSpeed := true ;
56860: LD_ADDR_EXP 45
56864: PUSH
56865: LD_INT 1
56867: ST_TO_ADDR
// if p3 = 3 then
56868: LD_VAR 0 3
56872: PUSH
56873: LD_INT 3
56875: EQUAL
56876: IFFALSE 56886
// sEngine := true ;
56878: LD_ADDR_EXP 47
56882: PUSH
56883: LD_INT 1
56885: ST_TO_ADDR
// if p3 = 4 then
56886: LD_VAR 0 3
56890: PUSH
56891: LD_INT 4
56893: EQUAL
56894: IFFALSE 56904
// sSpec := true ;
56896: LD_ADDR_EXP 44
56900: PUSH
56901: LD_INT 1
56903: ST_TO_ADDR
// if p3 = 5 then
56904: LD_VAR 0 3
56908: PUSH
56909: LD_INT 5
56911: EQUAL
56912: IFFALSE 56922
// sLevel := true ;
56914: LD_ADDR_EXP 48
56918: PUSH
56919: LD_INT 1
56921: ST_TO_ADDR
// if p3 = 6 then
56922: LD_VAR 0 3
56926: PUSH
56927: LD_INT 6
56929: EQUAL
56930: IFFALSE 56940
// sArmoury := true ;
56932: LD_ADDR_EXP 49
56936: PUSH
56937: LD_INT 1
56939: ST_TO_ADDR
// if p3 = 7 then
56940: LD_VAR 0 3
56944: PUSH
56945: LD_INT 7
56947: EQUAL
56948: IFFALSE 56958
// sRadar := true ;
56950: LD_ADDR_EXP 50
56954: PUSH
56955: LD_INT 1
56957: ST_TO_ADDR
// if p3 = 8 then
56958: LD_VAR 0 3
56962: PUSH
56963: LD_INT 8
56965: EQUAL
56966: IFFALSE 56976
// sBunker := true ;
56968: LD_ADDR_EXP 51
56972: PUSH
56973: LD_INT 1
56975: ST_TO_ADDR
// if p3 = 9 then
56976: LD_VAR 0 3
56980: PUSH
56981: LD_INT 9
56983: EQUAL
56984: IFFALSE 56994
// sHack := true ;
56986: LD_ADDR_EXP 52
56990: PUSH
56991: LD_INT 1
56993: ST_TO_ADDR
// if p3 = 10 then
56994: LD_VAR 0 3
56998: PUSH
56999: LD_INT 10
57001: EQUAL
57002: IFFALSE 57012
// sFire := true ;
57004: LD_ADDR_EXP 53
57008: PUSH
57009: LD_INT 1
57011: ST_TO_ADDR
// if p3 = 11 then
57012: LD_VAR 0 3
57016: PUSH
57017: LD_INT 11
57019: EQUAL
57020: IFFALSE 57030
// sRefresh := true ;
57022: LD_ADDR_EXP 54
57026: PUSH
57027: LD_INT 1
57029: ST_TO_ADDR
// if p3 = 12 then
57030: LD_VAR 0 3
57034: PUSH
57035: LD_INT 12
57037: EQUAL
57038: IFFALSE 57048
// sExp := true ;
57040: LD_ADDR_EXP 55
57044: PUSH
57045: LD_INT 1
57047: ST_TO_ADDR
// if p3 = 13 then
57048: LD_VAR 0 3
57052: PUSH
57053: LD_INT 13
57055: EQUAL
57056: IFFALSE 57066
// sDepot := true ;
57058: LD_ADDR_EXP 56
57062: PUSH
57063: LD_INT 1
57065: ST_TO_ADDR
// if p3 = 14 then
57066: LD_VAR 0 3
57070: PUSH
57071: LD_INT 14
57073: EQUAL
57074: IFFALSE 57084
// sFlag := true ;
57076: LD_ADDR_EXP 57
57080: PUSH
57081: LD_INT 1
57083: ST_TO_ADDR
// if p3 = 15 then
57084: LD_VAR 0 3
57088: PUSH
57089: LD_INT 15
57091: EQUAL
57092: IFFALSE 57102
// sKamikadze := true ;
57094: LD_ADDR_EXP 65
57098: PUSH
57099: LD_INT 1
57101: ST_TO_ADDR
// if p3 = 16 then
57102: LD_VAR 0 3
57106: PUSH
57107: LD_INT 16
57109: EQUAL
57110: IFFALSE 57120
// sTroll := true ;
57112: LD_ADDR_EXP 66
57116: PUSH
57117: LD_INT 1
57119: ST_TO_ADDR
// if p3 = 17 then
57120: LD_VAR 0 3
57124: PUSH
57125: LD_INT 17
57127: EQUAL
57128: IFFALSE 57138
// sSlow := true ;
57130: LD_ADDR_EXP 67
57134: PUSH
57135: LD_INT 1
57137: ST_TO_ADDR
// if p3 = 18 then
57138: LD_VAR 0 3
57142: PUSH
57143: LD_INT 18
57145: EQUAL
57146: IFFALSE 57156
// sLack := true ;
57148: LD_ADDR_EXP 68
57152: PUSH
57153: LD_INT 1
57155: ST_TO_ADDR
// if p3 = 19 then
57156: LD_VAR 0 3
57160: PUSH
57161: LD_INT 19
57163: EQUAL
57164: IFFALSE 57174
// sTank := true ;
57166: LD_ADDR_EXP 70
57170: PUSH
57171: LD_INT 1
57173: ST_TO_ADDR
// if p3 = 20 then
57174: LD_VAR 0 3
57178: PUSH
57179: LD_INT 20
57181: EQUAL
57182: IFFALSE 57192
// sRemote := true ;
57184: LD_ADDR_EXP 71
57188: PUSH
57189: LD_INT 1
57191: ST_TO_ADDR
// if p3 = 21 then
57192: LD_VAR 0 3
57196: PUSH
57197: LD_INT 21
57199: EQUAL
57200: IFFALSE 57210
// sPowell := true ;
57202: LD_ADDR_EXP 72
57206: PUSH
57207: LD_INT 1
57209: ST_TO_ADDR
// if p3 = 22 then
57210: LD_VAR 0 3
57214: PUSH
57215: LD_INT 22
57217: EQUAL
57218: IFFALSE 57228
// sTeleport := true ;
57220: LD_ADDR_EXP 75
57224: PUSH
57225: LD_INT 1
57227: ST_TO_ADDR
// if p3 = 23 then
57228: LD_VAR 0 3
57232: PUSH
57233: LD_INT 23
57235: EQUAL
57236: IFFALSE 57246
// sOilTower := true ;
57238: LD_ADDR_EXP 77
57242: PUSH
57243: LD_INT 1
57245: ST_TO_ADDR
// if p3 = 24 then
57246: LD_VAR 0 3
57250: PUSH
57251: LD_INT 24
57253: EQUAL
57254: IFFALSE 57264
// sShovel := true ;
57256: LD_ADDR_EXP 78
57260: PUSH
57261: LD_INT 1
57263: ST_TO_ADDR
// if p3 = 25 then
57264: LD_VAR 0 3
57268: PUSH
57269: LD_INT 25
57271: EQUAL
57272: IFFALSE 57282
// sSheik := true ;
57274: LD_ADDR_EXP 79
57278: PUSH
57279: LD_INT 1
57281: ST_TO_ADDR
// if p3 = 26 then
57282: LD_VAR 0 3
57286: PUSH
57287: LD_INT 26
57289: EQUAL
57290: IFFALSE 57300
// sEarthquake := true ;
57292: LD_ADDR_EXP 81
57296: PUSH
57297: LD_INT 1
57299: ST_TO_ADDR
// if p3 = 27 then
57300: LD_VAR 0 3
57304: PUSH
57305: LD_INT 27
57307: EQUAL
57308: IFFALSE 57318
// sAI := true ;
57310: LD_ADDR_EXP 82
57314: PUSH
57315: LD_INT 1
57317: ST_TO_ADDR
// if p3 = 28 then
57318: LD_VAR 0 3
57322: PUSH
57323: LD_INT 28
57325: EQUAL
57326: IFFALSE 57336
// sCargo := true ;
57328: LD_ADDR_EXP 85
57332: PUSH
57333: LD_INT 1
57335: ST_TO_ADDR
// if p3 = 29 then
57336: LD_VAR 0 3
57340: PUSH
57341: LD_INT 29
57343: EQUAL
57344: IFFALSE 57354
// sDLaser := true ;
57346: LD_ADDR_EXP 86
57350: PUSH
57351: LD_INT 1
57353: ST_TO_ADDR
// if p3 = 30 then
57354: LD_VAR 0 3
57358: PUSH
57359: LD_INT 30
57361: EQUAL
57362: IFFALSE 57372
// sExchange := true ;
57364: LD_ADDR_EXP 87
57368: PUSH
57369: LD_INT 1
57371: ST_TO_ADDR
// if p3 = 31 then
57372: LD_VAR 0 3
57376: PUSH
57377: LD_INT 31
57379: EQUAL
57380: IFFALSE 57390
// sFac := true ;
57382: LD_ADDR_EXP 88
57386: PUSH
57387: LD_INT 1
57389: ST_TO_ADDR
// if p3 = 32 then
57390: LD_VAR 0 3
57394: PUSH
57395: LD_INT 32
57397: EQUAL
57398: IFFALSE 57408
// sPower := true ;
57400: LD_ADDR_EXP 89
57404: PUSH
57405: LD_INT 1
57407: ST_TO_ADDR
// if p3 = 33 then
57408: LD_VAR 0 3
57412: PUSH
57413: LD_INT 33
57415: EQUAL
57416: IFFALSE 57426
// sRandom := true ;
57418: LD_ADDR_EXP 90
57422: PUSH
57423: LD_INT 1
57425: ST_TO_ADDR
// if p3 = 34 then
57426: LD_VAR 0 3
57430: PUSH
57431: LD_INT 34
57433: EQUAL
57434: IFFALSE 57444
// sShield := true ;
57436: LD_ADDR_EXP 91
57440: PUSH
57441: LD_INT 1
57443: ST_TO_ADDR
// if p3 = 35 then
57444: LD_VAR 0 3
57448: PUSH
57449: LD_INT 35
57451: EQUAL
57452: IFFALSE 57462
// sTime := true ;
57454: LD_ADDR_EXP 92
57458: PUSH
57459: LD_INT 1
57461: ST_TO_ADDR
// if p3 = 36 then
57462: LD_VAR 0 3
57466: PUSH
57467: LD_INT 36
57469: EQUAL
57470: IFFALSE 57480
// sTools := true ;
57472: LD_ADDR_EXP 93
57476: PUSH
57477: LD_INT 1
57479: ST_TO_ADDR
// if p3 = 101 then
57480: LD_VAR 0 3
57484: PUSH
57485: LD_INT 101
57487: EQUAL
57488: IFFALSE 57498
// sSold := true ;
57490: LD_ADDR_EXP 58
57494: PUSH
57495: LD_INT 1
57497: ST_TO_ADDR
// if p3 = 102 then
57498: LD_VAR 0 3
57502: PUSH
57503: LD_INT 102
57505: EQUAL
57506: IFFALSE 57516
// sDiff := true ;
57508: LD_ADDR_EXP 59
57512: PUSH
57513: LD_INT 1
57515: ST_TO_ADDR
// if p3 = 103 then
57516: LD_VAR 0 3
57520: PUSH
57521: LD_INT 103
57523: EQUAL
57524: IFFALSE 57534
// sFog := true ;
57526: LD_ADDR_EXP 62
57530: PUSH
57531: LD_INT 1
57533: ST_TO_ADDR
// if p3 = 104 then
57534: LD_VAR 0 3
57538: PUSH
57539: LD_INT 104
57541: EQUAL
57542: IFFALSE 57552
// sReset := true ;
57544: LD_ADDR_EXP 63
57548: PUSH
57549: LD_INT 1
57551: ST_TO_ADDR
// if p3 = 105 then
57552: LD_VAR 0 3
57556: PUSH
57557: LD_INT 105
57559: EQUAL
57560: IFFALSE 57570
// sSun := true ;
57562: LD_ADDR_EXP 64
57566: PUSH
57567: LD_INT 1
57569: ST_TO_ADDR
// if p3 = 106 then
57570: LD_VAR 0 3
57574: PUSH
57575: LD_INT 106
57577: EQUAL
57578: IFFALSE 57588
// sTiger := true ;
57580: LD_ADDR_EXP 60
57584: PUSH
57585: LD_INT 1
57587: ST_TO_ADDR
// if p3 = 107 then
57588: LD_VAR 0 3
57592: PUSH
57593: LD_INT 107
57595: EQUAL
57596: IFFALSE 57606
// sBomb := true ;
57598: LD_ADDR_EXP 61
57602: PUSH
57603: LD_INT 1
57605: ST_TO_ADDR
// if p3 = 108 then
57606: LD_VAR 0 3
57610: PUSH
57611: LD_INT 108
57613: EQUAL
57614: IFFALSE 57624
// sWound := true ;
57616: LD_ADDR_EXP 69
57620: PUSH
57621: LD_INT 1
57623: ST_TO_ADDR
// if p3 = 109 then
57624: LD_VAR 0 3
57628: PUSH
57629: LD_INT 109
57631: EQUAL
57632: IFFALSE 57642
// sBetray := true ;
57634: LD_ADDR_EXP 73
57638: PUSH
57639: LD_INT 1
57641: ST_TO_ADDR
// if p3 = 110 then
57642: LD_VAR 0 3
57646: PUSH
57647: LD_INT 110
57649: EQUAL
57650: IFFALSE 57660
// sContamin := true ;
57652: LD_ADDR_EXP 74
57656: PUSH
57657: LD_INT 1
57659: ST_TO_ADDR
// if p3 = 111 then
57660: LD_VAR 0 3
57664: PUSH
57665: LD_INT 111
57667: EQUAL
57668: IFFALSE 57678
// sOil := true ;
57670: LD_ADDR_EXP 76
57674: PUSH
57675: LD_INT 1
57677: ST_TO_ADDR
// if p3 = 112 then
57678: LD_VAR 0 3
57682: PUSH
57683: LD_INT 112
57685: EQUAL
57686: IFFALSE 57696
// sStu := true ;
57688: LD_ADDR_EXP 80
57692: PUSH
57693: LD_INT 1
57695: ST_TO_ADDR
// if p3 = 113 then
57696: LD_VAR 0 3
57700: PUSH
57701: LD_INT 113
57703: EQUAL
57704: IFFALSE 57714
// sBazooka := true ;
57706: LD_ADDR_EXP 83
57710: PUSH
57711: LD_INT 1
57713: ST_TO_ADDR
// if p3 = 114 then
57714: LD_VAR 0 3
57718: PUSH
57719: LD_INT 114
57721: EQUAL
57722: IFFALSE 57732
// sMortar := true ;
57724: LD_ADDR_EXP 84
57728: PUSH
57729: LD_INT 1
57731: ST_TO_ADDR
// if p3 = 115 then
57732: LD_VAR 0 3
57736: PUSH
57737: LD_INT 115
57739: EQUAL
57740: IFFALSE 57750
// sRanger := true ;
57742: LD_ADDR_EXP 94
57746: PUSH
57747: LD_INT 1
57749: ST_TO_ADDR
// if p3 = 116 then
57750: LD_VAR 0 3
57754: PUSH
57755: LD_INT 116
57757: EQUAL
57758: IFFALSE 57768
// sComputer := true ;
57760: LD_ADDR_EXP 95
57764: PUSH
57765: LD_INT 1
57767: ST_TO_ADDR
// if p3 = 117 then
57768: LD_VAR 0 3
57772: PUSH
57773: LD_INT 117
57775: EQUAL
57776: IFFALSE 57786
// s30 := true ;
57778: LD_ADDR_EXP 96
57782: PUSH
57783: LD_INT 1
57785: ST_TO_ADDR
// if p3 = 118 then
57786: LD_VAR 0 3
57790: PUSH
57791: LD_INT 118
57793: EQUAL
57794: IFFALSE 57804
// s60 := true ;
57796: LD_ADDR_EXP 97
57800: PUSH
57801: LD_INT 1
57803: ST_TO_ADDR
// end ; if p2 = hack_mode then
57804: LD_VAR 0 2
57808: PUSH
57809: LD_INT 101
57811: EQUAL
57812: IFFALSE 57940
// begin case p3 of 1 :
57814: LD_VAR 0 3
57818: PUSH
57819: LD_INT 1
57821: DOUBLE
57822: EQUAL
57823: IFTRUE 57827
57825: GO 57834
57827: POP
// hHackUnlimitedResources ; 2 :
57828: CALL 70087 0 0
57832: GO 57940
57834: LD_INT 2
57836: DOUBLE
57837: EQUAL
57838: IFTRUE 57842
57840: GO 57849
57842: POP
// hHackSetLevel10 ; 3 :
57843: CALL 70220 0 0
57847: GO 57940
57849: LD_INT 3
57851: DOUBLE
57852: EQUAL
57853: IFTRUE 57857
57855: GO 57864
57857: POP
// hHackSetLevel10YourUnits ; 4 :
57858: CALL 70305 0 0
57862: GO 57940
57864: LD_INT 4
57866: DOUBLE
57867: EQUAL
57868: IFTRUE 57872
57870: GO 57879
57872: POP
// hHackInvincible ; 5 :
57873: CALL 70753 0 0
57877: GO 57940
57879: LD_INT 5
57881: DOUBLE
57882: EQUAL
57883: IFTRUE 57887
57885: GO 57894
57887: POP
// hHackInvisible ; 6 :
57888: CALL 70864 0 0
57892: GO 57940
57894: LD_INT 6
57896: DOUBLE
57897: EQUAL
57898: IFTRUE 57902
57900: GO 57909
57902: POP
// hHackChangeYourSide ; 7 :
57903: CALL 70921 0 0
57907: GO 57940
57909: LD_INT 7
57911: DOUBLE
57912: EQUAL
57913: IFTRUE 57917
57915: GO 57924
57917: POP
// hHackChangeUnitSide ; 8 :
57918: CALL 70963 0 0
57922: GO 57940
57924: LD_INT 8
57926: DOUBLE
57927: EQUAL
57928: IFTRUE 57932
57930: GO 57939
57932: POP
// hHackFog ; end ;
57933: CALL 71064 0 0
57937: GO 57940
57939: POP
// end ; if p2 = game_save_mode then
57940: LD_VAR 0 2
57944: PUSH
57945: LD_INT 102
57947: EQUAL
57948: IFFALSE 58003
// begin if p3 = 1 then
57950: LD_VAR 0 3
57954: PUSH
57955: LD_INT 1
57957: EQUAL
57958: IFFALSE 57970
// globalGameSaveCounter := p4 ;
57960: LD_ADDR_EXP 40
57964: PUSH
57965: LD_VAR 0 4
57969: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
57970: LD_VAR 0 3
57974: PUSH
57975: LD_INT 2
57977: EQUAL
57978: PUSH
57979: LD_EXP 40
57983: AND
57984: IFFALSE 58003
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
57986: LD_STRING setGameSaveCounter(
57988: PUSH
57989: LD_EXP 40
57993: STR
57994: PUSH
57995: LD_STRING )
57997: STR
57998: PPUSH
57999: CALL_OW 559
// end ; end ;
58003: LD_VAR 0 7
58007: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
58008: LD_INT 0
58010: PPUSH
// streamModeActive := false ;
58011: LD_ADDR_EXP 41
58015: PUSH
58016: LD_INT 0
58018: ST_TO_ADDR
// normalCounter := 36 ;
58019: LD_ADDR_EXP 42
58023: PUSH
58024: LD_INT 36
58026: ST_TO_ADDR
// hardcoreCounter := 18 ;
58027: LD_ADDR_EXP 43
58031: PUSH
58032: LD_INT 18
58034: ST_TO_ADDR
// sRocket := false ;
58035: LD_ADDR_EXP 46
58039: PUSH
58040: LD_INT 0
58042: ST_TO_ADDR
// sSpeed := false ;
58043: LD_ADDR_EXP 45
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// sEngine := false ;
58051: LD_ADDR_EXP 47
58055: PUSH
58056: LD_INT 0
58058: ST_TO_ADDR
// sSpec := false ;
58059: LD_ADDR_EXP 44
58063: PUSH
58064: LD_INT 0
58066: ST_TO_ADDR
// sLevel := false ;
58067: LD_ADDR_EXP 48
58071: PUSH
58072: LD_INT 0
58074: ST_TO_ADDR
// sArmoury := false ;
58075: LD_ADDR_EXP 49
58079: PUSH
58080: LD_INT 0
58082: ST_TO_ADDR
// sRadar := false ;
58083: LD_ADDR_EXP 50
58087: PUSH
58088: LD_INT 0
58090: ST_TO_ADDR
// sBunker := false ;
58091: LD_ADDR_EXP 51
58095: PUSH
58096: LD_INT 0
58098: ST_TO_ADDR
// sHack := false ;
58099: LD_ADDR_EXP 52
58103: PUSH
58104: LD_INT 0
58106: ST_TO_ADDR
// sFire := false ;
58107: LD_ADDR_EXP 53
58111: PUSH
58112: LD_INT 0
58114: ST_TO_ADDR
// sRefresh := false ;
58115: LD_ADDR_EXP 54
58119: PUSH
58120: LD_INT 0
58122: ST_TO_ADDR
// sExp := false ;
58123: LD_ADDR_EXP 55
58127: PUSH
58128: LD_INT 0
58130: ST_TO_ADDR
// sDepot := false ;
58131: LD_ADDR_EXP 56
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// sFlag := false ;
58139: LD_ADDR_EXP 57
58143: PUSH
58144: LD_INT 0
58146: ST_TO_ADDR
// sKamikadze := false ;
58147: LD_ADDR_EXP 65
58151: PUSH
58152: LD_INT 0
58154: ST_TO_ADDR
// sTroll := false ;
58155: LD_ADDR_EXP 66
58159: PUSH
58160: LD_INT 0
58162: ST_TO_ADDR
// sSlow := false ;
58163: LD_ADDR_EXP 67
58167: PUSH
58168: LD_INT 0
58170: ST_TO_ADDR
// sLack := false ;
58171: LD_ADDR_EXP 68
58175: PUSH
58176: LD_INT 0
58178: ST_TO_ADDR
// sTank := false ;
58179: LD_ADDR_EXP 70
58183: PUSH
58184: LD_INT 0
58186: ST_TO_ADDR
// sRemote := false ;
58187: LD_ADDR_EXP 71
58191: PUSH
58192: LD_INT 0
58194: ST_TO_ADDR
// sPowell := false ;
58195: LD_ADDR_EXP 72
58199: PUSH
58200: LD_INT 0
58202: ST_TO_ADDR
// sTeleport := false ;
58203: LD_ADDR_EXP 75
58207: PUSH
58208: LD_INT 0
58210: ST_TO_ADDR
// sOilTower := false ;
58211: LD_ADDR_EXP 77
58215: PUSH
58216: LD_INT 0
58218: ST_TO_ADDR
// sShovel := false ;
58219: LD_ADDR_EXP 78
58223: PUSH
58224: LD_INT 0
58226: ST_TO_ADDR
// sSheik := false ;
58227: LD_ADDR_EXP 79
58231: PUSH
58232: LD_INT 0
58234: ST_TO_ADDR
// sEarthquake := false ;
58235: LD_ADDR_EXP 81
58239: PUSH
58240: LD_INT 0
58242: ST_TO_ADDR
// sAI := false ;
58243: LD_ADDR_EXP 82
58247: PUSH
58248: LD_INT 0
58250: ST_TO_ADDR
// sCargo := false ;
58251: LD_ADDR_EXP 85
58255: PUSH
58256: LD_INT 0
58258: ST_TO_ADDR
// sDLaser := false ;
58259: LD_ADDR_EXP 86
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// sExchange := false ;
58267: LD_ADDR_EXP 87
58271: PUSH
58272: LD_INT 0
58274: ST_TO_ADDR
// sFac := false ;
58275: LD_ADDR_EXP 88
58279: PUSH
58280: LD_INT 0
58282: ST_TO_ADDR
// sPower := false ;
58283: LD_ADDR_EXP 89
58287: PUSH
58288: LD_INT 0
58290: ST_TO_ADDR
// sRandom := false ;
58291: LD_ADDR_EXP 90
58295: PUSH
58296: LD_INT 0
58298: ST_TO_ADDR
// sShield := false ;
58299: LD_ADDR_EXP 91
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// sTime := false ;
58307: LD_ADDR_EXP 92
58311: PUSH
58312: LD_INT 0
58314: ST_TO_ADDR
// sTools := false ;
58315: LD_ADDR_EXP 93
58319: PUSH
58320: LD_INT 0
58322: ST_TO_ADDR
// sSold := false ;
58323: LD_ADDR_EXP 58
58327: PUSH
58328: LD_INT 0
58330: ST_TO_ADDR
// sDiff := false ;
58331: LD_ADDR_EXP 59
58335: PUSH
58336: LD_INT 0
58338: ST_TO_ADDR
// sFog := false ;
58339: LD_ADDR_EXP 62
58343: PUSH
58344: LD_INT 0
58346: ST_TO_ADDR
// sReset := false ;
58347: LD_ADDR_EXP 63
58351: PUSH
58352: LD_INT 0
58354: ST_TO_ADDR
// sSun := false ;
58355: LD_ADDR_EXP 64
58359: PUSH
58360: LD_INT 0
58362: ST_TO_ADDR
// sTiger := false ;
58363: LD_ADDR_EXP 60
58367: PUSH
58368: LD_INT 0
58370: ST_TO_ADDR
// sBomb := false ;
58371: LD_ADDR_EXP 61
58375: PUSH
58376: LD_INT 0
58378: ST_TO_ADDR
// sWound := false ;
58379: LD_ADDR_EXP 69
58383: PUSH
58384: LD_INT 0
58386: ST_TO_ADDR
// sBetray := false ;
58387: LD_ADDR_EXP 73
58391: PUSH
58392: LD_INT 0
58394: ST_TO_ADDR
// sContamin := false ;
58395: LD_ADDR_EXP 74
58399: PUSH
58400: LD_INT 0
58402: ST_TO_ADDR
// sOil := false ;
58403: LD_ADDR_EXP 76
58407: PUSH
58408: LD_INT 0
58410: ST_TO_ADDR
// sStu := false ;
58411: LD_ADDR_EXP 80
58415: PUSH
58416: LD_INT 0
58418: ST_TO_ADDR
// sBazooka := false ;
58419: LD_ADDR_EXP 83
58423: PUSH
58424: LD_INT 0
58426: ST_TO_ADDR
// sMortar := false ;
58427: LD_ADDR_EXP 84
58431: PUSH
58432: LD_INT 0
58434: ST_TO_ADDR
// sRanger := false ;
58435: LD_ADDR_EXP 94
58439: PUSH
58440: LD_INT 0
58442: ST_TO_ADDR
// sComputer := false ;
58443: LD_ADDR_EXP 95
58447: PUSH
58448: LD_INT 0
58450: ST_TO_ADDR
// s30 := false ;
58451: LD_ADDR_EXP 96
58455: PUSH
58456: LD_INT 0
58458: ST_TO_ADDR
// s60 := false ;
58459: LD_ADDR_EXP 97
58463: PUSH
58464: LD_INT 0
58466: ST_TO_ADDR
// end ;
58467: LD_VAR 0 1
58471: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58472: LD_INT 0
58474: PPUSH
58475: PPUSH
58476: PPUSH
58477: PPUSH
58478: PPUSH
58479: PPUSH
58480: PPUSH
// result := [ ] ;
58481: LD_ADDR_VAR 0 2
58485: PUSH
58486: EMPTY
58487: ST_TO_ADDR
// if campaign_id = 1 then
58488: LD_OWVAR 69
58492: PUSH
58493: LD_INT 1
58495: EQUAL
58496: IFFALSE 61662
// begin case mission_number of 1 :
58498: LD_OWVAR 70
58502: PUSH
58503: LD_INT 1
58505: DOUBLE
58506: EQUAL
58507: IFTRUE 58511
58509: GO 58587
58511: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
58512: LD_ADDR_VAR 0 2
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 4
58522: PUSH
58523: LD_INT 11
58525: PUSH
58526: LD_INT 12
58528: PUSH
58529: LD_INT 15
58531: PUSH
58532: LD_INT 16
58534: PUSH
58535: LD_INT 22
58537: PUSH
58538: LD_INT 23
58540: PUSH
58541: LD_INT 26
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 101
58557: PUSH
58558: LD_INT 102
58560: PUSH
58561: LD_INT 106
58563: PUSH
58564: LD_INT 116
58566: PUSH
58567: LD_INT 117
58569: PUSH
58570: LD_INT 118
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: ST_TO_ADDR
58585: GO 61660
58587: LD_INT 2
58589: DOUBLE
58590: EQUAL
58591: IFTRUE 58595
58593: GO 58679
58595: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58596: LD_ADDR_VAR 0 2
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 4
58606: PUSH
58607: LD_INT 11
58609: PUSH
58610: LD_INT 12
58612: PUSH
58613: LD_INT 15
58615: PUSH
58616: LD_INT 16
58618: PUSH
58619: LD_INT 22
58621: PUSH
58622: LD_INT 23
58624: PUSH
58625: LD_INT 26
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 101
58641: PUSH
58642: LD_INT 102
58644: PUSH
58645: LD_INT 105
58647: PUSH
58648: LD_INT 106
58650: PUSH
58651: LD_INT 108
58653: PUSH
58654: LD_INT 116
58656: PUSH
58657: LD_INT 117
58659: PUSH
58660: LD_INT 118
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: ST_TO_ADDR
58677: GO 61660
58679: LD_INT 3
58681: DOUBLE
58682: EQUAL
58683: IFTRUE 58687
58685: GO 58775
58687: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58688: LD_ADDR_VAR 0 2
58692: PUSH
58693: LD_INT 2
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: LD_INT 5
58701: PUSH
58702: LD_INT 11
58704: PUSH
58705: LD_INT 12
58707: PUSH
58708: LD_INT 15
58710: PUSH
58711: LD_INT 16
58713: PUSH
58714: LD_INT 22
58716: PUSH
58717: LD_INT 26
58719: PUSH
58720: LD_INT 36
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 101
58737: PUSH
58738: LD_INT 102
58740: PUSH
58741: LD_INT 105
58743: PUSH
58744: LD_INT 106
58746: PUSH
58747: LD_INT 108
58749: PUSH
58750: LD_INT 116
58752: PUSH
58753: LD_INT 117
58755: PUSH
58756: LD_INT 118
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: ST_TO_ADDR
58773: GO 61660
58775: LD_INT 4
58777: DOUBLE
58778: EQUAL
58779: IFTRUE 58783
58781: GO 58879
58783: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
58784: LD_ADDR_VAR 0 2
58788: PUSH
58789: LD_INT 2
58791: PUSH
58792: LD_INT 4
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: LD_INT 8
58800: PUSH
58801: LD_INT 11
58803: PUSH
58804: LD_INT 12
58806: PUSH
58807: LD_INT 15
58809: PUSH
58810: LD_INT 16
58812: PUSH
58813: LD_INT 22
58815: PUSH
58816: LD_INT 23
58818: PUSH
58819: LD_INT 26
58821: PUSH
58822: LD_INT 36
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 101
58841: PUSH
58842: LD_INT 102
58844: PUSH
58845: LD_INT 105
58847: PUSH
58848: LD_INT 106
58850: PUSH
58851: LD_INT 108
58853: PUSH
58854: LD_INT 116
58856: PUSH
58857: LD_INT 117
58859: PUSH
58860: LD_INT 118
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: ST_TO_ADDR
58877: GO 61660
58879: LD_INT 5
58881: DOUBLE
58882: EQUAL
58883: IFTRUE 58887
58885: GO 58999
58887: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
58888: LD_ADDR_VAR 0 2
58892: PUSH
58893: LD_INT 2
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: LD_INT 5
58901: PUSH
58902: LD_INT 6
58904: PUSH
58905: LD_INT 8
58907: PUSH
58908: LD_INT 11
58910: PUSH
58911: LD_INT 12
58913: PUSH
58914: LD_INT 15
58916: PUSH
58917: LD_INT 16
58919: PUSH
58920: LD_INT 22
58922: PUSH
58923: LD_INT 23
58925: PUSH
58926: LD_INT 25
58928: PUSH
58929: LD_INT 26
58931: PUSH
58932: LD_INT 36
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 101
58953: PUSH
58954: LD_INT 102
58956: PUSH
58957: LD_INT 105
58959: PUSH
58960: LD_INT 106
58962: PUSH
58963: LD_INT 108
58965: PUSH
58966: LD_INT 109
58968: PUSH
58969: LD_INT 112
58971: PUSH
58972: LD_INT 116
58974: PUSH
58975: LD_INT 117
58977: PUSH
58978: LD_INT 118
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: ST_TO_ADDR
58997: GO 61660
58999: LD_INT 6
59001: DOUBLE
59002: EQUAL
59003: IFTRUE 59007
59005: GO 59139
59007: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59008: LD_ADDR_VAR 0 2
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 4
59018: PUSH
59019: LD_INT 5
59021: PUSH
59022: LD_INT 6
59024: PUSH
59025: LD_INT 8
59027: PUSH
59028: LD_INT 11
59030: PUSH
59031: LD_INT 12
59033: PUSH
59034: LD_INT 15
59036: PUSH
59037: LD_INT 16
59039: PUSH
59040: LD_INT 20
59042: PUSH
59043: LD_INT 21
59045: PUSH
59046: LD_INT 22
59048: PUSH
59049: LD_INT 23
59051: PUSH
59052: LD_INT 25
59054: PUSH
59055: LD_INT 26
59057: PUSH
59058: LD_INT 30
59060: PUSH
59061: LD_INT 31
59063: PUSH
59064: LD_INT 32
59066: PUSH
59067: LD_INT 36
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 101
59093: PUSH
59094: LD_INT 102
59096: PUSH
59097: LD_INT 105
59099: PUSH
59100: LD_INT 106
59102: PUSH
59103: LD_INT 108
59105: PUSH
59106: LD_INT 109
59108: PUSH
59109: LD_INT 112
59111: PUSH
59112: LD_INT 116
59114: PUSH
59115: LD_INT 117
59117: PUSH
59118: LD_INT 118
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: ST_TO_ADDR
59137: GO 61660
59139: LD_INT 7
59141: DOUBLE
59142: EQUAL
59143: IFTRUE 59147
59145: GO 59259
59147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59148: LD_ADDR_VAR 0 2
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: LD_INT 4
59158: PUSH
59159: LD_INT 5
59161: PUSH
59162: LD_INT 7
59164: PUSH
59165: LD_INT 11
59167: PUSH
59168: LD_INT 12
59170: PUSH
59171: LD_INT 15
59173: PUSH
59174: LD_INT 16
59176: PUSH
59177: LD_INT 20
59179: PUSH
59180: LD_INT 21
59182: PUSH
59183: LD_INT 22
59185: PUSH
59186: LD_INT 23
59188: PUSH
59189: LD_INT 25
59191: PUSH
59192: LD_INT 26
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 101
59213: PUSH
59214: LD_INT 102
59216: PUSH
59217: LD_INT 103
59219: PUSH
59220: LD_INT 105
59222: PUSH
59223: LD_INT 106
59225: PUSH
59226: LD_INT 108
59228: PUSH
59229: LD_INT 112
59231: PUSH
59232: LD_INT 116
59234: PUSH
59235: LD_INT 117
59237: PUSH
59238: LD_INT 118
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: ST_TO_ADDR
59257: GO 61660
59259: LD_INT 8
59261: DOUBLE
59262: EQUAL
59263: IFTRUE 59267
59265: GO 59407
59267: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59268: LD_ADDR_VAR 0 2
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: LD_INT 4
59278: PUSH
59279: LD_INT 5
59281: PUSH
59282: LD_INT 6
59284: PUSH
59285: LD_INT 7
59287: PUSH
59288: LD_INT 8
59290: PUSH
59291: LD_INT 11
59293: PUSH
59294: LD_INT 12
59296: PUSH
59297: LD_INT 15
59299: PUSH
59300: LD_INT 16
59302: PUSH
59303: LD_INT 20
59305: PUSH
59306: LD_INT 21
59308: PUSH
59309: LD_INT 22
59311: PUSH
59312: LD_INT 23
59314: PUSH
59315: LD_INT 25
59317: PUSH
59318: LD_INT 26
59320: PUSH
59321: LD_INT 30
59323: PUSH
59324: LD_INT 31
59326: PUSH
59327: LD_INT 32
59329: PUSH
59330: LD_INT 36
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 101
59357: PUSH
59358: LD_INT 102
59360: PUSH
59361: LD_INT 103
59363: PUSH
59364: LD_INT 105
59366: PUSH
59367: LD_INT 106
59369: PUSH
59370: LD_INT 108
59372: PUSH
59373: LD_INT 109
59375: PUSH
59376: LD_INT 112
59378: PUSH
59379: LD_INT 116
59381: PUSH
59382: LD_INT 117
59384: PUSH
59385: LD_INT 118
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: ST_TO_ADDR
59405: GO 61660
59407: LD_INT 9
59409: DOUBLE
59410: EQUAL
59411: IFTRUE 59415
59413: GO 59563
59415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59416: LD_ADDR_VAR 0 2
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 4
59426: PUSH
59427: LD_INT 5
59429: PUSH
59430: LD_INT 6
59432: PUSH
59433: LD_INT 7
59435: PUSH
59436: LD_INT 8
59438: PUSH
59439: LD_INT 11
59441: PUSH
59442: LD_INT 12
59444: PUSH
59445: LD_INT 15
59447: PUSH
59448: LD_INT 16
59450: PUSH
59451: LD_INT 20
59453: PUSH
59454: LD_INT 21
59456: PUSH
59457: LD_INT 22
59459: PUSH
59460: LD_INT 23
59462: PUSH
59463: LD_INT 25
59465: PUSH
59466: LD_INT 26
59468: PUSH
59469: LD_INT 28
59471: PUSH
59472: LD_INT 30
59474: PUSH
59475: LD_INT 31
59477: PUSH
59478: LD_INT 32
59480: PUSH
59481: LD_INT 36
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 101
59509: PUSH
59510: LD_INT 102
59512: PUSH
59513: LD_INT 103
59515: PUSH
59516: LD_INT 105
59518: PUSH
59519: LD_INT 106
59521: PUSH
59522: LD_INT 108
59524: PUSH
59525: LD_INT 109
59527: PUSH
59528: LD_INT 112
59530: PUSH
59531: LD_INT 114
59533: PUSH
59534: LD_INT 116
59536: PUSH
59537: LD_INT 117
59539: PUSH
59540: LD_INT 118
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: ST_TO_ADDR
59561: GO 61660
59563: LD_INT 10
59565: DOUBLE
59566: EQUAL
59567: IFTRUE 59571
59569: GO 59767
59571: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59572: LD_ADDR_VAR 0 2
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: LD_INT 5
59585: PUSH
59586: LD_INT 6
59588: PUSH
59589: LD_INT 7
59591: PUSH
59592: LD_INT 8
59594: PUSH
59595: LD_INT 9
59597: PUSH
59598: LD_INT 10
59600: PUSH
59601: LD_INT 11
59603: PUSH
59604: LD_INT 12
59606: PUSH
59607: LD_INT 13
59609: PUSH
59610: LD_INT 14
59612: PUSH
59613: LD_INT 15
59615: PUSH
59616: LD_INT 16
59618: PUSH
59619: LD_INT 17
59621: PUSH
59622: LD_INT 18
59624: PUSH
59625: LD_INT 19
59627: PUSH
59628: LD_INT 20
59630: PUSH
59631: LD_INT 21
59633: PUSH
59634: LD_INT 22
59636: PUSH
59637: LD_INT 23
59639: PUSH
59640: LD_INT 24
59642: PUSH
59643: LD_INT 25
59645: PUSH
59646: LD_INT 26
59648: PUSH
59649: LD_INT 28
59651: PUSH
59652: LD_INT 30
59654: PUSH
59655: LD_INT 31
59657: PUSH
59658: LD_INT 32
59660: PUSH
59661: LD_INT 36
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 101
59697: PUSH
59698: LD_INT 102
59700: PUSH
59701: LD_INT 103
59703: PUSH
59704: LD_INT 104
59706: PUSH
59707: LD_INT 105
59709: PUSH
59710: LD_INT 106
59712: PUSH
59713: LD_INT 107
59715: PUSH
59716: LD_INT 108
59718: PUSH
59719: LD_INT 109
59721: PUSH
59722: LD_INT 110
59724: PUSH
59725: LD_INT 111
59727: PUSH
59728: LD_INT 112
59730: PUSH
59731: LD_INT 114
59733: PUSH
59734: LD_INT 116
59736: PUSH
59737: LD_INT 117
59739: PUSH
59740: LD_INT 118
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: ST_TO_ADDR
59765: GO 61660
59767: LD_INT 11
59769: DOUBLE
59770: EQUAL
59771: IFTRUE 59775
59773: GO 59979
59775: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
59776: LD_ADDR_VAR 0 2
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: LD_INT 5
59792: PUSH
59793: LD_INT 6
59795: PUSH
59796: LD_INT 7
59798: PUSH
59799: LD_INT 8
59801: PUSH
59802: LD_INT 9
59804: PUSH
59805: LD_INT 10
59807: PUSH
59808: LD_INT 11
59810: PUSH
59811: LD_INT 12
59813: PUSH
59814: LD_INT 13
59816: PUSH
59817: LD_INT 14
59819: PUSH
59820: LD_INT 15
59822: PUSH
59823: LD_INT 16
59825: PUSH
59826: LD_INT 17
59828: PUSH
59829: LD_INT 18
59831: PUSH
59832: LD_INT 19
59834: PUSH
59835: LD_INT 20
59837: PUSH
59838: LD_INT 21
59840: PUSH
59841: LD_INT 22
59843: PUSH
59844: LD_INT 23
59846: PUSH
59847: LD_INT 24
59849: PUSH
59850: LD_INT 25
59852: PUSH
59853: LD_INT 26
59855: PUSH
59856: LD_INT 28
59858: PUSH
59859: LD_INT 30
59861: PUSH
59862: LD_INT 31
59864: PUSH
59865: LD_INT 32
59867: PUSH
59868: LD_INT 34
59870: PUSH
59871: LD_INT 36
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 101
59909: PUSH
59910: LD_INT 102
59912: PUSH
59913: LD_INT 103
59915: PUSH
59916: LD_INT 104
59918: PUSH
59919: LD_INT 105
59921: PUSH
59922: LD_INT 106
59924: PUSH
59925: LD_INT 107
59927: PUSH
59928: LD_INT 108
59930: PUSH
59931: LD_INT 109
59933: PUSH
59934: LD_INT 110
59936: PUSH
59937: LD_INT 111
59939: PUSH
59940: LD_INT 112
59942: PUSH
59943: LD_INT 114
59945: PUSH
59946: LD_INT 116
59948: PUSH
59949: LD_INT 117
59951: PUSH
59952: LD_INT 118
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: ST_TO_ADDR
59977: GO 61660
59979: LD_INT 12
59981: DOUBLE
59982: EQUAL
59983: IFTRUE 59987
59985: GO 60207
59987: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
59988: LD_ADDR_VAR 0 2
59992: PUSH
59993: LD_INT 1
59995: PUSH
59996: LD_INT 2
59998: PUSH
59999: LD_INT 3
60001: PUSH
60002: LD_INT 4
60004: PUSH
60005: LD_INT 5
60007: PUSH
60008: LD_INT 6
60010: PUSH
60011: LD_INT 7
60013: PUSH
60014: LD_INT 8
60016: PUSH
60017: LD_INT 9
60019: PUSH
60020: LD_INT 10
60022: PUSH
60023: LD_INT 11
60025: PUSH
60026: LD_INT 12
60028: PUSH
60029: LD_INT 13
60031: PUSH
60032: LD_INT 14
60034: PUSH
60035: LD_INT 15
60037: PUSH
60038: LD_INT 16
60040: PUSH
60041: LD_INT 17
60043: PUSH
60044: LD_INT 18
60046: PUSH
60047: LD_INT 19
60049: PUSH
60050: LD_INT 20
60052: PUSH
60053: LD_INT 21
60055: PUSH
60056: LD_INT 22
60058: PUSH
60059: LD_INT 23
60061: PUSH
60062: LD_INT 24
60064: PUSH
60065: LD_INT 25
60067: PUSH
60068: LD_INT 26
60070: PUSH
60071: LD_INT 27
60073: PUSH
60074: LD_INT 28
60076: PUSH
60077: LD_INT 30
60079: PUSH
60080: LD_INT 31
60082: PUSH
60083: LD_INT 32
60085: PUSH
60086: LD_INT 33
60088: PUSH
60089: LD_INT 34
60091: PUSH
60092: LD_INT 36
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 101
60133: PUSH
60134: LD_INT 102
60136: PUSH
60137: LD_INT 103
60139: PUSH
60140: LD_INT 104
60142: PUSH
60143: LD_INT 105
60145: PUSH
60146: LD_INT 106
60148: PUSH
60149: LD_INT 107
60151: PUSH
60152: LD_INT 108
60154: PUSH
60155: LD_INT 109
60157: PUSH
60158: LD_INT 110
60160: PUSH
60161: LD_INT 111
60163: PUSH
60164: LD_INT 112
60166: PUSH
60167: LD_INT 113
60169: PUSH
60170: LD_INT 114
60172: PUSH
60173: LD_INT 116
60175: PUSH
60176: LD_INT 117
60178: PUSH
60179: LD_INT 118
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: ST_TO_ADDR
60205: GO 61660
60207: LD_INT 13
60209: DOUBLE
60210: EQUAL
60211: IFTRUE 60215
60213: GO 60423
60215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60216: LD_ADDR_VAR 0 2
60220: PUSH
60221: LD_INT 1
60223: PUSH
60224: LD_INT 2
60226: PUSH
60227: LD_INT 3
60229: PUSH
60230: LD_INT 4
60232: PUSH
60233: LD_INT 5
60235: PUSH
60236: LD_INT 8
60238: PUSH
60239: LD_INT 9
60241: PUSH
60242: LD_INT 10
60244: PUSH
60245: LD_INT 11
60247: PUSH
60248: LD_INT 12
60250: PUSH
60251: LD_INT 14
60253: PUSH
60254: LD_INT 15
60256: PUSH
60257: LD_INT 16
60259: PUSH
60260: LD_INT 17
60262: PUSH
60263: LD_INT 18
60265: PUSH
60266: LD_INT 19
60268: PUSH
60269: LD_INT 20
60271: PUSH
60272: LD_INT 21
60274: PUSH
60275: LD_INT 22
60277: PUSH
60278: LD_INT 23
60280: PUSH
60281: LD_INT 24
60283: PUSH
60284: LD_INT 25
60286: PUSH
60287: LD_INT 26
60289: PUSH
60290: LD_INT 27
60292: PUSH
60293: LD_INT 28
60295: PUSH
60296: LD_INT 30
60298: PUSH
60299: LD_INT 31
60301: PUSH
60302: LD_INT 32
60304: PUSH
60305: LD_INT 33
60307: PUSH
60308: LD_INT 34
60310: PUSH
60311: LD_INT 36
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 101
60349: PUSH
60350: LD_INT 102
60352: PUSH
60353: LD_INT 103
60355: PUSH
60356: LD_INT 104
60358: PUSH
60359: LD_INT 105
60361: PUSH
60362: LD_INT 106
60364: PUSH
60365: LD_INT 107
60367: PUSH
60368: LD_INT 108
60370: PUSH
60371: LD_INT 109
60373: PUSH
60374: LD_INT 110
60376: PUSH
60377: LD_INT 111
60379: PUSH
60380: LD_INT 112
60382: PUSH
60383: LD_INT 113
60385: PUSH
60386: LD_INT 114
60388: PUSH
60389: LD_INT 116
60391: PUSH
60392: LD_INT 117
60394: PUSH
60395: LD_INT 118
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: ST_TO_ADDR
60421: GO 61660
60423: LD_INT 14
60425: DOUBLE
60426: EQUAL
60427: IFTRUE 60431
60429: GO 60655
60431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60432: LD_ADDR_VAR 0 2
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 2
60442: PUSH
60443: LD_INT 3
60445: PUSH
60446: LD_INT 4
60448: PUSH
60449: LD_INT 5
60451: PUSH
60452: LD_INT 6
60454: PUSH
60455: LD_INT 7
60457: PUSH
60458: LD_INT 8
60460: PUSH
60461: LD_INT 9
60463: PUSH
60464: LD_INT 10
60466: PUSH
60467: LD_INT 11
60469: PUSH
60470: LD_INT 12
60472: PUSH
60473: LD_INT 13
60475: PUSH
60476: LD_INT 14
60478: PUSH
60479: LD_INT 15
60481: PUSH
60482: LD_INT 16
60484: PUSH
60485: LD_INT 17
60487: PUSH
60488: LD_INT 18
60490: PUSH
60491: LD_INT 19
60493: PUSH
60494: LD_INT 20
60496: PUSH
60497: LD_INT 21
60499: PUSH
60500: LD_INT 22
60502: PUSH
60503: LD_INT 23
60505: PUSH
60506: LD_INT 24
60508: PUSH
60509: LD_INT 25
60511: PUSH
60512: LD_INT 26
60514: PUSH
60515: LD_INT 27
60517: PUSH
60518: LD_INT 28
60520: PUSH
60521: LD_INT 29
60523: PUSH
60524: LD_INT 30
60526: PUSH
60527: LD_INT 31
60529: PUSH
60530: LD_INT 32
60532: PUSH
60533: LD_INT 33
60535: PUSH
60536: LD_INT 34
60538: PUSH
60539: LD_INT 36
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 101
60581: PUSH
60582: LD_INT 102
60584: PUSH
60585: LD_INT 103
60587: PUSH
60588: LD_INT 104
60590: PUSH
60591: LD_INT 105
60593: PUSH
60594: LD_INT 106
60596: PUSH
60597: LD_INT 107
60599: PUSH
60600: LD_INT 108
60602: PUSH
60603: LD_INT 109
60605: PUSH
60606: LD_INT 110
60608: PUSH
60609: LD_INT 111
60611: PUSH
60612: LD_INT 112
60614: PUSH
60615: LD_INT 113
60617: PUSH
60618: LD_INT 114
60620: PUSH
60621: LD_INT 116
60623: PUSH
60624: LD_INT 117
60626: PUSH
60627: LD_INT 118
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: ST_TO_ADDR
60653: GO 61660
60655: LD_INT 15
60657: DOUBLE
60658: EQUAL
60659: IFTRUE 60663
60661: GO 60887
60663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60664: LD_ADDR_VAR 0 2
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 2
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: LD_INT 4
60680: PUSH
60681: LD_INT 5
60683: PUSH
60684: LD_INT 6
60686: PUSH
60687: LD_INT 7
60689: PUSH
60690: LD_INT 8
60692: PUSH
60693: LD_INT 9
60695: PUSH
60696: LD_INT 10
60698: PUSH
60699: LD_INT 11
60701: PUSH
60702: LD_INT 12
60704: PUSH
60705: LD_INT 13
60707: PUSH
60708: LD_INT 14
60710: PUSH
60711: LD_INT 15
60713: PUSH
60714: LD_INT 16
60716: PUSH
60717: LD_INT 17
60719: PUSH
60720: LD_INT 18
60722: PUSH
60723: LD_INT 19
60725: PUSH
60726: LD_INT 20
60728: PUSH
60729: LD_INT 21
60731: PUSH
60732: LD_INT 22
60734: PUSH
60735: LD_INT 23
60737: PUSH
60738: LD_INT 24
60740: PUSH
60741: LD_INT 25
60743: PUSH
60744: LD_INT 26
60746: PUSH
60747: LD_INT 27
60749: PUSH
60750: LD_INT 28
60752: PUSH
60753: LD_INT 29
60755: PUSH
60756: LD_INT 30
60758: PUSH
60759: LD_INT 31
60761: PUSH
60762: LD_INT 32
60764: PUSH
60765: LD_INT 33
60767: PUSH
60768: LD_INT 34
60770: PUSH
60771: LD_INT 36
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 101
60813: PUSH
60814: LD_INT 102
60816: PUSH
60817: LD_INT 103
60819: PUSH
60820: LD_INT 104
60822: PUSH
60823: LD_INT 105
60825: PUSH
60826: LD_INT 106
60828: PUSH
60829: LD_INT 107
60831: PUSH
60832: LD_INT 108
60834: PUSH
60835: LD_INT 109
60837: PUSH
60838: LD_INT 110
60840: PUSH
60841: LD_INT 111
60843: PUSH
60844: LD_INT 112
60846: PUSH
60847: LD_INT 113
60849: PUSH
60850: LD_INT 114
60852: PUSH
60853: LD_INT 116
60855: PUSH
60856: LD_INT 117
60858: PUSH
60859: LD_INT 118
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: ST_TO_ADDR
60885: GO 61660
60887: LD_INT 16
60889: DOUBLE
60890: EQUAL
60891: IFTRUE 60895
60893: GO 61031
60895: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
60896: LD_ADDR_VAR 0 2
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: LD_INT 5
60909: PUSH
60910: LD_INT 7
60912: PUSH
60913: LD_INT 11
60915: PUSH
60916: LD_INT 12
60918: PUSH
60919: LD_INT 15
60921: PUSH
60922: LD_INT 16
60924: PUSH
60925: LD_INT 20
60927: PUSH
60928: LD_INT 21
60930: PUSH
60931: LD_INT 22
60933: PUSH
60934: LD_INT 23
60936: PUSH
60937: LD_INT 25
60939: PUSH
60940: LD_INT 26
60942: PUSH
60943: LD_INT 30
60945: PUSH
60946: LD_INT 31
60948: PUSH
60949: LD_INT 32
60951: PUSH
60952: LD_INT 33
60954: PUSH
60955: LD_INT 34
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 101
60981: PUSH
60982: LD_INT 102
60984: PUSH
60985: LD_INT 103
60987: PUSH
60988: LD_INT 106
60990: PUSH
60991: LD_INT 108
60993: PUSH
60994: LD_INT 112
60996: PUSH
60997: LD_INT 113
60999: PUSH
61000: LD_INT 114
61002: PUSH
61003: LD_INT 116
61005: PUSH
61006: LD_INT 117
61008: PUSH
61009: LD_INT 118
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: ST_TO_ADDR
61029: GO 61660
61031: LD_INT 17
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61039
61037: GO 61263
61039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61040: LD_ADDR_VAR 0 2
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: LD_INT 6
61062: PUSH
61063: LD_INT 7
61065: PUSH
61066: LD_INT 8
61068: PUSH
61069: LD_INT 9
61071: PUSH
61072: LD_INT 10
61074: PUSH
61075: LD_INT 11
61077: PUSH
61078: LD_INT 12
61080: PUSH
61081: LD_INT 13
61083: PUSH
61084: LD_INT 14
61086: PUSH
61087: LD_INT 15
61089: PUSH
61090: LD_INT 16
61092: PUSH
61093: LD_INT 17
61095: PUSH
61096: LD_INT 18
61098: PUSH
61099: LD_INT 19
61101: PUSH
61102: LD_INT 20
61104: PUSH
61105: LD_INT 21
61107: PUSH
61108: LD_INT 22
61110: PUSH
61111: LD_INT 23
61113: PUSH
61114: LD_INT 24
61116: PUSH
61117: LD_INT 25
61119: PUSH
61120: LD_INT 26
61122: PUSH
61123: LD_INT 27
61125: PUSH
61126: LD_INT 28
61128: PUSH
61129: LD_INT 29
61131: PUSH
61132: LD_INT 30
61134: PUSH
61135: LD_INT 31
61137: PUSH
61138: LD_INT 32
61140: PUSH
61141: LD_INT 33
61143: PUSH
61144: LD_INT 34
61146: PUSH
61147: LD_INT 36
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 101
61189: PUSH
61190: LD_INT 102
61192: PUSH
61193: LD_INT 103
61195: PUSH
61196: LD_INT 104
61198: PUSH
61199: LD_INT 105
61201: PUSH
61202: LD_INT 106
61204: PUSH
61205: LD_INT 107
61207: PUSH
61208: LD_INT 108
61210: PUSH
61211: LD_INT 109
61213: PUSH
61214: LD_INT 110
61216: PUSH
61217: LD_INT 111
61219: PUSH
61220: LD_INT 112
61222: PUSH
61223: LD_INT 113
61225: PUSH
61226: LD_INT 114
61228: PUSH
61229: LD_INT 116
61231: PUSH
61232: LD_INT 117
61234: PUSH
61235: LD_INT 118
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: ST_TO_ADDR
61261: GO 61660
61263: LD_INT 18
61265: DOUBLE
61266: EQUAL
61267: IFTRUE 61271
61269: GO 61419
61271: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61272: LD_ADDR_VAR 0 2
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: LD_INT 4
61282: PUSH
61283: LD_INT 5
61285: PUSH
61286: LD_INT 7
61288: PUSH
61289: LD_INT 11
61291: PUSH
61292: LD_INT 12
61294: PUSH
61295: LD_INT 15
61297: PUSH
61298: LD_INT 16
61300: PUSH
61301: LD_INT 20
61303: PUSH
61304: LD_INT 21
61306: PUSH
61307: LD_INT 22
61309: PUSH
61310: LD_INT 23
61312: PUSH
61313: LD_INT 25
61315: PUSH
61316: LD_INT 26
61318: PUSH
61319: LD_INT 30
61321: PUSH
61322: LD_INT 31
61324: PUSH
61325: LD_INT 32
61327: PUSH
61328: LD_INT 33
61330: PUSH
61331: LD_INT 34
61333: PUSH
61334: LD_INT 35
61336: PUSH
61337: LD_INT 36
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 101
61365: PUSH
61366: LD_INT 102
61368: PUSH
61369: LD_INT 103
61371: PUSH
61372: LD_INT 106
61374: PUSH
61375: LD_INT 108
61377: PUSH
61378: LD_INT 112
61380: PUSH
61381: LD_INT 113
61383: PUSH
61384: LD_INT 114
61386: PUSH
61387: LD_INT 115
61389: PUSH
61390: LD_INT 116
61392: PUSH
61393: LD_INT 117
61395: PUSH
61396: LD_INT 118
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: LIST
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: ST_TO_ADDR
61417: GO 61660
61419: LD_INT 19
61421: DOUBLE
61422: EQUAL
61423: IFTRUE 61427
61425: GO 61659
61427: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61428: LD_ADDR_VAR 0 2
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: LD_INT 3
61441: PUSH
61442: LD_INT 4
61444: PUSH
61445: LD_INT 5
61447: PUSH
61448: LD_INT 6
61450: PUSH
61451: LD_INT 7
61453: PUSH
61454: LD_INT 8
61456: PUSH
61457: LD_INT 9
61459: PUSH
61460: LD_INT 10
61462: PUSH
61463: LD_INT 11
61465: PUSH
61466: LD_INT 12
61468: PUSH
61469: LD_INT 13
61471: PUSH
61472: LD_INT 14
61474: PUSH
61475: LD_INT 15
61477: PUSH
61478: LD_INT 16
61480: PUSH
61481: LD_INT 17
61483: PUSH
61484: LD_INT 18
61486: PUSH
61487: LD_INT 19
61489: PUSH
61490: LD_INT 20
61492: PUSH
61493: LD_INT 21
61495: PUSH
61496: LD_INT 22
61498: PUSH
61499: LD_INT 23
61501: PUSH
61502: LD_INT 24
61504: PUSH
61505: LD_INT 25
61507: PUSH
61508: LD_INT 26
61510: PUSH
61511: LD_INT 27
61513: PUSH
61514: LD_INT 28
61516: PUSH
61517: LD_INT 29
61519: PUSH
61520: LD_INT 30
61522: PUSH
61523: LD_INT 31
61525: PUSH
61526: LD_INT 32
61528: PUSH
61529: LD_INT 33
61531: PUSH
61532: LD_INT 34
61534: PUSH
61535: LD_INT 35
61537: PUSH
61538: LD_INT 36
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 101
61581: PUSH
61582: LD_INT 102
61584: PUSH
61585: LD_INT 103
61587: PUSH
61588: LD_INT 104
61590: PUSH
61591: LD_INT 105
61593: PUSH
61594: LD_INT 106
61596: PUSH
61597: LD_INT 107
61599: PUSH
61600: LD_INT 108
61602: PUSH
61603: LD_INT 109
61605: PUSH
61606: LD_INT 110
61608: PUSH
61609: LD_INT 111
61611: PUSH
61612: LD_INT 112
61614: PUSH
61615: LD_INT 113
61617: PUSH
61618: LD_INT 114
61620: PUSH
61621: LD_INT 115
61623: PUSH
61624: LD_INT 116
61626: PUSH
61627: LD_INT 117
61629: PUSH
61630: LD_INT 118
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: ST_TO_ADDR
61657: GO 61660
61659: POP
// end else
61660: GO 61891
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61662: LD_ADDR_VAR 0 2
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: LD_INT 4
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: LD_INT 6
61684: PUSH
61685: LD_INT 7
61687: PUSH
61688: LD_INT 8
61690: PUSH
61691: LD_INT 9
61693: PUSH
61694: LD_INT 10
61696: PUSH
61697: LD_INT 11
61699: PUSH
61700: LD_INT 12
61702: PUSH
61703: LD_INT 13
61705: PUSH
61706: LD_INT 14
61708: PUSH
61709: LD_INT 15
61711: PUSH
61712: LD_INT 16
61714: PUSH
61715: LD_INT 17
61717: PUSH
61718: LD_INT 18
61720: PUSH
61721: LD_INT 19
61723: PUSH
61724: LD_INT 20
61726: PUSH
61727: LD_INT 21
61729: PUSH
61730: LD_INT 22
61732: PUSH
61733: LD_INT 23
61735: PUSH
61736: LD_INT 24
61738: PUSH
61739: LD_INT 25
61741: PUSH
61742: LD_INT 26
61744: PUSH
61745: LD_INT 27
61747: PUSH
61748: LD_INT 28
61750: PUSH
61751: LD_INT 29
61753: PUSH
61754: LD_INT 30
61756: PUSH
61757: LD_INT 31
61759: PUSH
61760: LD_INT 32
61762: PUSH
61763: LD_INT 33
61765: PUSH
61766: LD_INT 34
61768: PUSH
61769: LD_INT 35
61771: PUSH
61772: LD_INT 36
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 101
61815: PUSH
61816: LD_INT 102
61818: PUSH
61819: LD_INT 103
61821: PUSH
61822: LD_INT 104
61824: PUSH
61825: LD_INT 105
61827: PUSH
61828: LD_INT 106
61830: PUSH
61831: LD_INT 107
61833: PUSH
61834: LD_INT 108
61836: PUSH
61837: LD_INT 109
61839: PUSH
61840: LD_INT 110
61842: PUSH
61843: LD_INT 111
61845: PUSH
61846: LD_INT 112
61848: PUSH
61849: LD_INT 113
61851: PUSH
61852: LD_INT 114
61854: PUSH
61855: LD_INT 115
61857: PUSH
61858: LD_INT 116
61860: PUSH
61861: LD_INT 117
61863: PUSH
61864: LD_INT 118
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// if result then
61891: LD_VAR 0 2
61895: IFFALSE 62681
// begin normal :=  ;
61897: LD_ADDR_VAR 0 5
61901: PUSH
61902: LD_STRING 
61904: ST_TO_ADDR
// hardcore :=  ;
61905: LD_ADDR_VAR 0 6
61909: PUSH
61910: LD_STRING 
61912: ST_TO_ADDR
// active :=  ;
61913: LD_ADDR_VAR 0 7
61917: PUSH
61918: LD_STRING 
61920: ST_TO_ADDR
// for i = 1 to normalCounter do
61921: LD_ADDR_VAR 0 8
61925: PUSH
61926: DOUBLE
61927: LD_INT 1
61929: DEC
61930: ST_TO_ADDR
61931: LD_EXP 42
61935: PUSH
61936: FOR_TO
61937: IFFALSE 62038
// begin tmp := 0 ;
61939: LD_ADDR_VAR 0 3
61943: PUSH
61944: LD_STRING 0
61946: ST_TO_ADDR
// if result [ 1 ] then
61947: LD_VAR 0 2
61951: PUSH
61952: LD_INT 1
61954: ARRAY
61955: IFFALSE 62020
// if result [ 1 ] [ 1 ] = i then
61957: LD_VAR 0 2
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PUSH
61966: LD_INT 1
61968: ARRAY
61969: PUSH
61970: LD_VAR 0 8
61974: EQUAL
61975: IFFALSE 62020
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61977: LD_ADDR_VAR 0 2
61981: PUSH
61982: LD_VAR 0 2
61986: PPUSH
61987: LD_INT 1
61989: PPUSH
61990: LD_VAR 0 2
61994: PUSH
61995: LD_INT 1
61997: ARRAY
61998: PPUSH
61999: LD_INT 1
62001: PPUSH
62002: CALL_OW 3
62006: PPUSH
62007: CALL_OW 1
62011: ST_TO_ADDR
// tmp := 1 ;
62012: LD_ADDR_VAR 0 3
62016: PUSH
62017: LD_STRING 1
62019: ST_TO_ADDR
// end ; normal := normal & tmp ;
62020: LD_ADDR_VAR 0 5
62024: PUSH
62025: LD_VAR 0 5
62029: PUSH
62030: LD_VAR 0 3
62034: STR
62035: ST_TO_ADDR
// end ;
62036: GO 61936
62038: POP
62039: POP
// for i = 1 to hardcoreCounter do
62040: LD_ADDR_VAR 0 8
62044: PUSH
62045: DOUBLE
62046: LD_INT 1
62048: DEC
62049: ST_TO_ADDR
62050: LD_EXP 43
62054: PUSH
62055: FOR_TO
62056: IFFALSE 62161
// begin tmp := 0 ;
62058: LD_ADDR_VAR 0 3
62062: PUSH
62063: LD_STRING 0
62065: ST_TO_ADDR
// if result [ 2 ] then
62066: LD_VAR 0 2
62070: PUSH
62071: LD_INT 2
62073: ARRAY
62074: IFFALSE 62143
// if result [ 2 ] [ 1 ] = 100 + i then
62076: LD_VAR 0 2
62080: PUSH
62081: LD_INT 2
62083: ARRAY
62084: PUSH
62085: LD_INT 1
62087: ARRAY
62088: PUSH
62089: LD_INT 100
62091: PUSH
62092: LD_VAR 0 8
62096: PLUS
62097: EQUAL
62098: IFFALSE 62143
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62100: LD_ADDR_VAR 0 2
62104: PUSH
62105: LD_VAR 0 2
62109: PPUSH
62110: LD_INT 2
62112: PPUSH
62113: LD_VAR 0 2
62117: PUSH
62118: LD_INT 2
62120: ARRAY
62121: PPUSH
62122: LD_INT 1
62124: PPUSH
62125: CALL_OW 3
62129: PPUSH
62130: CALL_OW 1
62134: ST_TO_ADDR
// tmp := 1 ;
62135: LD_ADDR_VAR 0 3
62139: PUSH
62140: LD_STRING 1
62142: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62143: LD_ADDR_VAR 0 6
62147: PUSH
62148: LD_VAR 0 6
62152: PUSH
62153: LD_VAR 0 3
62157: STR
62158: ST_TO_ADDR
// end ;
62159: GO 62055
62161: POP
62162: POP
// if isGameLoad then
62163: LD_VAR 0 1
62167: IFFALSE 62642
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62169: LD_ADDR_VAR 0 4
62173: PUSH
62174: LD_EXP 46
62178: PUSH
62179: LD_EXP 45
62183: PUSH
62184: LD_EXP 47
62188: PUSH
62189: LD_EXP 44
62193: PUSH
62194: LD_EXP 48
62198: PUSH
62199: LD_EXP 49
62203: PUSH
62204: LD_EXP 50
62208: PUSH
62209: LD_EXP 51
62213: PUSH
62214: LD_EXP 52
62218: PUSH
62219: LD_EXP 53
62223: PUSH
62224: LD_EXP 54
62228: PUSH
62229: LD_EXP 55
62233: PUSH
62234: LD_EXP 56
62238: PUSH
62239: LD_EXP 57
62243: PUSH
62244: LD_EXP 65
62248: PUSH
62249: LD_EXP 66
62253: PUSH
62254: LD_EXP 67
62258: PUSH
62259: LD_EXP 68
62263: PUSH
62264: LD_EXP 70
62268: PUSH
62269: LD_EXP 71
62273: PUSH
62274: LD_EXP 72
62278: PUSH
62279: LD_EXP 75
62283: PUSH
62284: LD_EXP 77
62288: PUSH
62289: LD_EXP 78
62293: PUSH
62294: LD_EXP 79
62298: PUSH
62299: LD_EXP 81
62303: PUSH
62304: LD_EXP 82
62308: PUSH
62309: LD_EXP 85
62313: PUSH
62314: LD_EXP 86
62318: PUSH
62319: LD_EXP 87
62323: PUSH
62324: LD_EXP 88
62328: PUSH
62329: LD_EXP 89
62333: PUSH
62334: LD_EXP 90
62338: PUSH
62339: LD_EXP 91
62343: PUSH
62344: LD_EXP 92
62348: PUSH
62349: LD_EXP 93
62353: PUSH
62354: LD_EXP 58
62358: PUSH
62359: LD_EXP 59
62363: PUSH
62364: LD_EXP 62
62368: PUSH
62369: LD_EXP 63
62373: PUSH
62374: LD_EXP 64
62378: PUSH
62379: LD_EXP 60
62383: PUSH
62384: LD_EXP 61
62388: PUSH
62389: LD_EXP 69
62393: PUSH
62394: LD_EXP 73
62398: PUSH
62399: LD_EXP 74
62403: PUSH
62404: LD_EXP 76
62408: PUSH
62409: LD_EXP 80
62413: PUSH
62414: LD_EXP 83
62418: PUSH
62419: LD_EXP 84
62423: PUSH
62424: LD_EXP 94
62428: PUSH
62429: LD_EXP 95
62433: PUSH
62434: LD_EXP 96
62438: PUSH
62439: LD_EXP 97
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: ST_TO_ADDR
// tmp :=  ;
62500: LD_ADDR_VAR 0 3
62504: PUSH
62505: LD_STRING 
62507: ST_TO_ADDR
// for i = 1 to normalCounter do
62508: LD_ADDR_VAR 0 8
62512: PUSH
62513: DOUBLE
62514: LD_INT 1
62516: DEC
62517: ST_TO_ADDR
62518: LD_EXP 42
62522: PUSH
62523: FOR_TO
62524: IFFALSE 62560
// begin if flags [ i ] then
62526: LD_VAR 0 4
62530: PUSH
62531: LD_VAR 0 8
62535: ARRAY
62536: IFFALSE 62558
// tmp := tmp & i & ; ;
62538: LD_ADDR_VAR 0 3
62542: PUSH
62543: LD_VAR 0 3
62547: PUSH
62548: LD_VAR 0 8
62552: STR
62553: PUSH
62554: LD_STRING ;
62556: STR
62557: ST_TO_ADDR
// end ;
62558: GO 62523
62560: POP
62561: POP
// for i = 1 to hardcoreCounter do
62562: LD_ADDR_VAR 0 8
62566: PUSH
62567: DOUBLE
62568: LD_INT 1
62570: DEC
62571: ST_TO_ADDR
62572: LD_EXP 43
62576: PUSH
62577: FOR_TO
62578: IFFALSE 62624
// begin if flags [ normalCounter + i ] then
62580: LD_VAR 0 4
62584: PUSH
62585: LD_EXP 42
62589: PUSH
62590: LD_VAR 0 8
62594: PLUS
62595: ARRAY
62596: IFFALSE 62622
// tmp := tmp & ( 100 + i ) & ; ;
62598: LD_ADDR_VAR 0 3
62602: PUSH
62603: LD_VAR 0 3
62607: PUSH
62608: LD_INT 100
62610: PUSH
62611: LD_VAR 0 8
62615: PLUS
62616: STR
62617: PUSH
62618: LD_STRING ;
62620: STR
62621: ST_TO_ADDR
// end ;
62622: GO 62577
62624: POP
62625: POP
// if tmp then
62626: LD_VAR 0 3
62630: IFFALSE 62642
// active := tmp ;
62632: LD_ADDR_VAR 0 7
62636: PUSH
62637: LD_VAR 0 3
62641: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
62642: LD_STRING getStreamItemsFromMission("
62644: PUSH
62645: LD_VAR 0 5
62649: STR
62650: PUSH
62651: LD_STRING ","
62653: STR
62654: PUSH
62655: LD_VAR 0 6
62659: STR
62660: PUSH
62661: LD_STRING ","
62663: STR
62664: PUSH
62665: LD_VAR 0 7
62669: STR
62670: PUSH
62671: LD_STRING ")
62673: STR
62674: PPUSH
62675: CALL_OW 559
// end else
62679: GO 62688
// ToLua ( getStreamItemsFromMission("","","") ) ;
62681: LD_STRING getStreamItemsFromMission("","","")
62683: PPUSH
62684: CALL_OW 559
// end ;
62688: LD_VAR 0 2
62692: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62693: LD_EXP 41
62697: PUSH
62698: LD_EXP 46
62702: AND
62703: IFFALSE 62827
62705: GO 62707
62707: DISABLE
62708: LD_INT 0
62710: PPUSH
62711: PPUSH
// begin enable ;
62712: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
62713: LD_ADDR_VAR 0 2
62717: PUSH
62718: LD_INT 22
62720: PUSH
62721: LD_OWVAR 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: LD_INT 34
62735: PUSH
62736: LD_INT 7
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 34
62745: PUSH
62746: LD_INT 45
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 34
62755: PUSH
62756: LD_INT 28
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 34
62765: PUSH
62766: LD_INT 47
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PPUSH
62784: CALL_OW 69
62788: ST_TO_ADDR
// if not tmp then
62789: LD_VAR 0 2
62793: NOT
62794: IFFALSE 62798
// exit ;
62796: GO 62827
// for i in tmp do
62798: LD_ADDR_VAR 0 1
62802: PUSH
62803: LD_VAR 0 2
62807: PUSH
62808: FOR_IN
62809: IFFALSE 62825
// begin SetLives ( i , 0 ) ;
62811: LD_VAR 0 1
62815: PPUSH
62816: LD_INT 0
62818: PPUSH
62819: CALL_OW 234
// end ;
62823: GO 62808
62825: POP
62826: POP
// end ;
62827: PPOPN 2
62829: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
62830: LD_EXP 41
62834: PUSH
62835: LD_EXP 47
62839: AND
62840: IFFALSE 62924
62842: GO 62844
62844: DISABLE
62845: LD_INT 0
62847: PPUSH
62848: PPUSH
// begin enable ;
62849: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
62850: LD_ADDR_VAR 0 2
62854: PUSH
62855: LD_INT 22
62857: PUSH
62858: LD_OWVAR 2
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 32
62869: PUSH
62870: LD_INT 3
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PPUSH
62881: CALL_OW 69
62885: ST_TO_ADDR
// if not tmp then
62886: LD_VAR 0 2
62890: NOT
62891: IFFALSE 62895
// exit ;
62893: GO 62924
// for i in tmp do
62895: LD_ADDR_VAR 0 1
62899: PUSH
62900: LD_VAR 0 2
62904: PUSH
62905: FOR_IN
62906: IFFALSE 62922
// begin SetLives ( i , 0 ) ;
62908: LD_VAR 0 1
62912: PPUSH
62913: LD_INT 0
62915: PPUSH
62916: CALL_OW 234
// end ;
62920: GO 62905
62922: POP
62923: POP
// end ;
62924: PPOPN 2
62926: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
62927: LD_EXP 41
62931: PUSH
62932: LD_EXP 44
62936: AND
62937: IFFALSE 63030
62939: GO 62941
62941: DISABLE
62942: LD_INT 0
62944: PPUSH
// begin enable ;
62945: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
62946: LD_ADDR_VAR 0 1
62950: PUSH
62951: LD_INT 22
62953: PUSH
62954: LD_OWVAR 2
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 2
62965: PUSH
62966: LD_INT 25
62968: PUSH
62969: LD_INT 5
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 25
62978: PUSH
62979: LD_INT 9
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 25
62988: PUSH
62989: LD_INT 8
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PPUSH
63006: CALL_OW 69
63010: PUSH
63011: FOR_IN
63012: IFFALSE 63028
// begin SetClass ( i , 1 ) ;
63014: LD_VAR 0 1
63018: PPUSH
63019: LD_INT 1
63021: PPUSH
63022: CALL_OW 336
// end ;
63026: GO 63011
63028: POP
63029: POP
// end ;
63030: PPOPN 1
63032: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63033: LD_EXP 41
63037: PUSH
63038: LD_EXP 45
63042: AND
63043: PUSH
63044: LD_OWVAR 65
63048: PUSH
63049: LD_INT 7
63051: LESS
63052: AND
63053: IFFALSE 63067
63055: GO 63057
63057: DISABLE
// begin enable ;
63058: ENABLE
// game_speed := 7 ;
63059: LD_ADDR_OWVAR 65
63063: PUSH
63064: LD_INT 7
63066: ST_TO_ADDR
// end ;
63067: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63068: LD_EXP 41
63072: PUSH
63073: LD_EXP 48
63077: AND
63078: IFFALSE 63280
63080: GO 63082
63082: DISABLE
63083: LD_INT 0
63085: PPUSH
63086: PPUSH
63087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63088: LD_ADDR_VAR 0 3
63092: PUSH
63093: LD_INT 81
63095: PUSH
63096: LD_OWVAR 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 21
63107: PUSH
63108: LD_INT 1
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PPUSH
63119: CALL_OW 69
63123: ST_TO_ADDR
// if not tmp then
63124: LD_VAR 0 3
63128: NOT
63129: IFFALSE 63133
// exit ;
63131: GO 63280
// if tmp > 5 then
63133: LD_VAR 0 3
63137: PUSH
63138: LD_INT 5
63140: GREATER
63141: IFFALSE 63153
// k := 5 else
63143: LD_ADDR_VAR 0 2
63147: PUSH
63148: LD_INT 5
63150: ST_TO_ADDR
63151: GO 63163
// k := tmp ;
63153: LD_ADDR_VAR 0 2
63157: PUSH
63158: LD_VAR 0 3
63162: ST_TO_ADDR
// for i := 1 to k do
63163: LD_ADDR_VAR 0 1
63167: PUSH
63168: DOUBLE
63169: LD_INT 1
63171: DEC
63172: ST_TO_ADDR
63173: LD_VAR 0 2
63177: PUSH
63178: FOR_TO
63179: IFFALSE 63278
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63181: LD_VAR 0 3
63185: PUSH
63186: LD_VAR 0 1
63190: ARRAY
63191: PPUSH
63192: LD_VAR 0 1
63196: PUSH
63197: LD_INT 4
63199: MOD
63200: PUSH
63201: LD_INT 1
63203: PLUS
63204: PPUSH
63205: CALL_OW 259
63209: PUSH
63210: LD_INT 10
63212: LESS
63213: IFFALSE 63276
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63215: LD_VAR 0 3
63219: PUSH
63220: LD_VAR 0 1
63224: ARRAY
63225: PPUSH
63226: LD_VAR 0 1
63230: PUSH
63231: LD_INT 4
63233: MOD
63234: PUSH
63235: LD_INT 1
63237: PLUS
63238: PPUSH
63239: LD_VAR 0 3
63243: PUSH
63244: LD_VAR 0 1
63248: ARRAY
63249: PPUSH
63250: LD_VAR 0 1
63254: PUSH
63255: LD_INT 4
63257: MOD
63258: PUSH
63259: LD_INT 1
63261: PLUS
63262: PPUSH
63263: CALL_OW 259
63267: PUSH
63268: LD_INT 1
63270: PLUS
63271: PPUSH
63272: CALL_OW 237
63276: GO 63178
63278: POP
63279: POP
// end ;
63280: PPOPN 3
63282: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63283: LD_EXP 41
63287: PUSH
63288: LD_EXP 49
63292: AND
63293: IFFALSE 63313
63295: GO 63297
63297: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63298: LD_INT 4
63300: PPUSH
63301: LD_OWVAR 2
63305: PPUSH
63306: LD_INT 0
63308: PPUSH
63309: CALL_OW 324
63313: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63314: LD_EXP 41
63318: PUSH
63319: LD_EXP 78
63323: AND
63324: IFFALSE 63344
63326: GO 63328
63328: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63329: LD_INT 19
63331: PPUSH
63332: LD_OWVAR 2
63336: PPUSH
63337: LD_INT 0
63339: PPUSH
63340: CALL_OW 324
63344: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63345: LD_EXP 41
63349: PUSH
63350: LD_EXP 50
63354: AND
63355: IFFALSE 63457
63357: GO 63359
63359: DISABLE
63360: LD_INT 0
63362: PPUSH
63363: PPUSH
// begin enable ;
63364: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63365: LD_ADDR_VAR 0 2
63369: PUSH
63370: LD_INT 22
63372: PUSH
63373: LD_OWVAR 2
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 2
63384: PUSH
63385: LD_INT 34
63387: PUSH
63388: LD_INT 11
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 34
63397: PUSH
63398: LD_INT 30
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: LIST
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PPUSH
63414: CALL_OW 69
63418: ST_TO_ADDR
// if not tmp then
63419: LD_VAR 0 2
63423: NOT
63424: IFFALSE 63428
// exit ;
63426: GO 63457
// for i in tmp do
63428: LD_ADDR_VAR 0 1
63432: PUSH
63433: LD_VAR 0 2
63437: PUSH
63438: FOR_IN
63439: IFFALSE 63455
// begin SetLives ( i , 0 ) ;
63441: LD_VAR 0 1
63445: PPUSH
63446: LD_INT 0
63448: PPUSH
63449: CALL_OW 234
// end ;
63453: GO 63438
63455: POP
63456: POP
// end ;
63457: PPOPN 2
63459: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63460: LD_EXP 41
63464: PUSH
63465: LD_EXP 51
63469: AND
63470: IFFALSE 63490
63472: GO 63474
63474: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63475: LD_INT 32
63477: PPUSH
63478: LD_OWVAR 2
63482: PPUSH
63483: LD_INT 0
63485: PPUSH
63486: CALL_OW 324
63490: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
63491: LD_EXP 41
63495: PUSH
63496: LD_EXP 52
63500: AND
63501: IFFALSE 63682
63503: GO 63505
63505: DISABLE
63506: LD_INT 0
63508: PPUSH
63509: PPUSH
63510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
63511: LD_ADDR_VAR 0 2
63515: PUSH
63516: LD_INT 22
63518: PUSH
63519: LD_OWVAR 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 33
63530: PUSH
63531: LD_INT 3
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PPUSH
63542: CALL_OW 69
63546: ST_TO_ADDR
// if not tmp then
63547: LD_VAR 0 2
63551: NOT
63552: IFFALSE 63556
// exit ;
63554: GO 63682
// side := 0 ;
63556: LD_ADDR_VAR 0 3
63560: PUSH
63561: LD_INT 0
63563: ST_TO_ADDR
// for i := 1 to 8 do
63564: LD_ADDR_VAR 0 1
63568: PUSH
63569: DOUBLE
63570: LD_INT 1
63572: DEC
63573: ST_TO_ADDR
63574: LD_INT 8
63576: PUSH
63577: FOR_TO
63578: IFFALSE 63626
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63580: LD_OWVAR 2
63584: PUSH
63585: LD_VAR 0 1
63589: NONEQUAL
63590: PUSH
63591: LD_OWVAR 2
63595: PPUSH
63596: LD_VAR 0 1
63600: PPUSH
63601: CALL_OW 81
63605: PUSH
63606: LD_INT 2
63608: EQUAL
63609: AND
63610: IFFALSE 63624
// begin side := i ;
63612: LD_ADDR_VAR 0 3
63616: PUSH
63617: LD_VAR 0 1
63621: ST_TO_ADDR
// break ;
63622: GO 63626
// end ;
63624: GO 63577
63626: POP
63627: POP
// if not side then
63628: LD_VAR 0 3
63632: NOT
63633: IFFALSE 63637
// exit ;
63635: GO 63682
// for i := 1 to tmp do
63637: LD_ADDR_VAR 0 1
63641: PUSH
63642: DOUBLE
63643: LD_INT 1
63645: DEC
63646: ST_TO_ADDR
63647: LD_VAR 0 2
63651: PUSH
63652: FOR_TO
63653: IFFALSE 63680
// if Prob ( 60 ) then
63655: LD_INT 60
63657: PPUSH
63658: CALL_OW 13
63662: IFFALSE 63678
// SetSide ( i , side ) ;
63664: LD_VAR 0 1
63668: PPUSH
63669: LD_VAR 0 3
63673: PPUSH
63674: CALL_OW 235
63678: GO 63652
63680: POP
63681: POP
// end ;
63682: PPOPN 3
63684: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63685: LD_EXP 41
63689: PUSH
63690: LD_EXP 54
63694: AND
63695: IFFALSE 63814
63697: GO 63699
63699: DISABLE
63700: LD_INT 0
63702: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63703: LD_ADDR_VAR 0 1
63707: PUSH
63708: LD_INT 22
63710: PUSH
63711: LD_OWVAR 2
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 21
63722: PUSH
63723: LD_INT 1
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 3
63732: PUSH
63733: LD_INT 23
63735: PUSH
63736: LD_INT 0
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: LIST
63751: PPUSH
63752: CALL_OW 69
63756: PUSH
63757: FOR_IN
63758: IFFALSE 63812
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
63760: LD_VAR 0 1
63764: PPUSH
63765: CALL_OW 257
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: LD_INT 2
63775: PUSH
63776: LD_INT 3
63778: PUSH
63779: LD_INT 4
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: IN
63788: IFFALSE 63810
// SetClass ( un , rand ( 1 , 4 ) ) ;
63790: LD_VAR 0 1
63794: PPUSH
63795: LD_INT 1
63797: PPUSH
63798: LD_INT 4
63800: PPUSH
63801: CALL_OW 12
63805: PPUSH
63806: CALL_OW 336
63810: GO 63757
63812: POP
63813: POP
// end ;
63814: PPOPN 1
63816: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
63817: LD_EXP 41
63821: PUSH
63822: LD_EXP 53
63826: AND
63827: IFFALSE 63906
63829: GO 63831
63831: DISABLE
63832: LD_INT 0
63834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63835: LD_ADDR_VAR 0 1
63839: PUSH
63840: LD_INT 22
63842: PUSH
63843: LD_OWVAR 2
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 21
63854: PUSH
63855: LD_INT 3
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PPUSH
63866: CALL_OW 69
63870: ST_TO_ADDR
// if not tmp then
63871: LD_VAR 0 1
63875: NOT
63876: IFFALSE 63880
// exit ;
63878: GO 63906
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
63880: LD_VAR 0 1
63884: PUSH
63885: LD_INT 1
63887: PPUSH
63888: LD_VAR 0 1
63892: PPUSH
63893: CALL_OW 12
63897: ARRAY
63898: PPUSH
63899: LD_INT 100
63901: PPUSH
63902: CALL_OW 234
// end ;
63906: PPOPN 1
63908: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
63909: LD_EXP 41
63913: PUSH
63914: LD_EXP 55
63918: AND
63919: IFFALSE 64017
63921: GO 63923
63923: DISABLE
63924: LD_INT 0
63926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63927: LD_ADDR_VAR 0 1
63931: PUSH
63932: LD_INT 22
63934: PUSH
63935: LD_OWVAR 2
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 21
63946: PUSH
63947: LD_INT 1
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PPUSH
63958: CALL_OW 69
63962: ST_TO_ADDR
// if not tmp then
63963: LD_VAR 0 1
63967: NOT
63968: IFFALSE 63972
// exit ;
63970: GO 64017
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
63972: LD_VAR 0 1
63976: PUSH
63977: LD_INT 1
63979: PPUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 12
63989: ARRAY
63990: PPUSH
63991: LD_INT 1
63993: PPUSH
63994: LD_INT 4
63996: PPUSH
63997: CALL_OW 12
64001: PPUSH
64002: LD_INT 3000
64004: PPUSH
64005: LD_INT 9000
64007: PPUSH
64008: CALL_OW 12
64012: PPUSH
64013: CALL_OW 492
// end ;
64017: PPOPN 1
64019: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64020: LD_EXP 41
64024: PUSH
64025: LD_EXP 56
64029: AND
64030: IFFALSE 64050
64032: GO 64034
64034: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64035: LD_INT 1
64037: PPUSH
64038: LD_OWVAR 2
64042: PPUSH
64043: LD_INT 0
64045: PPUSH
64046: CALL_OW 324
64050: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64051: LD_EXP 41
64055: PUSH
64056: LD_EXP 57
64060: AND
64061: IFFALSE 64144
64063: GO 64065
64065: DISABLE
64066: LD_INT 0
64068: PPUSH
64069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64070: LD_ADDR_VAR 0 2
64074: PUSH
64075: LD_INT 22
64077: PUSH
64078: LD_OWVAR 2
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 21
64089: PUSH
64090: LD_INT 3
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PPUSH
64101: CALL_OW 69
64105: ST_TO_ADDR
// if not tmp then
64106: LD_VAR 0 2
64110: NOT
64111: IFFALSE 64115
// exit ;
64113: GO 64144
// for i in tmp do
64115: LD_ADDR_VAR 0 1
64119: PUSH
64120: LD_VAR 0 2
64124: PUSH
64125: FOR_IN
64126: IFFALSE 64142
// SetBLevel ( i , 10 ) ;
64128: LD_VAR 0 1
64132: PPUSH
64133: LD_INT 10
64135: PPUSH
64136: CALL_OW 241
64140: GO 64125
64142: POP
64143: POP
// end ;
64144: PPOPN 2
64146: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64147: LD_EXP 41
64151: PUSH
64152: LD_EXP 58
64156: AND
64157: IFFALSE 64268
64159: GO 64161
64161: DISABLE
64162: LD_INT 0
64164: PPUSH
64165: PPUSH
64166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64167: LD_ADDR_VAR 0 3
64171: PUSH
64172: LD_INT 22
64174: PUSH
64175: LD_OWVAR 2
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 25
64186: PUSH
64187: LD_INT 1
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PPUSH
64198: CALL_OW 69
64202: ST_TO_ADDR
// if not tmp then
64203: LD_VAR 0 3
64207: NOT
64208: IFFALSE 64212
// exit ;
64210: GO 64268
// un := tmp [ rand ( 1 , tmp ) ] ;
64212: LD_ADDR_VAR 0 2
64216: PUSH
64217: LD_VAR 0 3
64221: PUSH
64222: LD_INT 1
64224: PPUSH
64225: LD_VAR 0 3
64229: PPUSH
64230: CALL_OW 12
64234: ARRAY
64235: ST_TO_ADDR
// if Crawls ( un ) then
64236: LD_VAR 0 2
64240: PPUSH
64241: CALL_OW 318
64245: IFFALSE 64256
// ComWalk ( un ) ;
64247: LD_VAR 0 2
64251: PPUSH
64252: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64256: LD_VAR 0 2
64260: PPUSH
64261: LD_INT 5
64263: PPUSH
64264: CALL_OW 336
// end ;
64268: PPOPN 3
64270: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64271: LD_EXP 41
64275: PUSH
64276: LD_EXP 59
64280: AND
64281: PUSH
64282: LD_OWVAR 67
64286: PUSH
64287: LD_INT 4
64289: LESS
64290: AND
64291: IFFALSE 64310
64293: GO 64295
64295: DISABLE
// begin Difficulty := Difficulty + 1 ;
64296: LD_ADDR_OWVAR 67
64300: PUSH
64301: LD_OWVAR 67
64305: PUSH
64306: LD_INT 1
64308: PLUS
64309: ST_TO_ADDR
// end ;
64310: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64311: LD_EXP 41
64315: PUSH
64316: LD_EXP 60
64320: AND
64321: IFFALSE 64424
64323: GO 64325
64325: DISABLE
64326: LD_INT 0
64328: PPUSH
// begin for i := 1 to 5 do
64329: LD_ADDR_VAR 0 1
64333: PUSH
64334: DOUBLE
64335: LD_INT 1
64337: DEC
64338: ST_TO_ADDR
64339: LD_INT 5
64341: PUSH
64342: FOR_TO
64343: IFFALSE 64422
// begin uc_nation := nation_nature ;
64345: LD_ADDR_OWVAR 21
64349: PUSH
64350: LD_INT 0
64352: ST_TO_ADDR
// uc_side := 0 ;
64353: LD_ADDR_OWVAR 20
64357: PUSH
64358: LD_INT 0
64360: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64361: LD_ADDR_OWVAR 29
64365: PUSH
64366: LD_INT 12
64368: PUSH
64369: LD_INT 12
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: ST_TO_ADDR
// hc_agressivity := 20 ;
64376: LD_ADDR_OWVAR 35
64380: PUSH
64381: LD_INT 20
64383: ST_TO_ADDR
// hc_class := class_tiger ;
64384: LD_ADDR_OWVAR 28
64388: PUSH
64389: LD_INT 14
64391: ST_TO_ADDR
// hc_gallery :=  ;
64392: LD_ADDR_OWVAR 33
64396: PUSH
64397: LD_STRING 
64399: ST_TO_ADDR
// hc_name :=  ;
64400: LD_ADDR_OWVAR 26
64404: PUSH
64405: LD_STRING 
64407: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64408: CALL_OW 44
64412: PPUSH
64413: LD_INT 0
64415: PPUSH
64416: CALL_OW 51
// end ;
64420: GO 64342
64422: POP
64423: POP
// end ;
64424: PPOPN 1
64426: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64427: LD_EXP 41
64431: PUSH
64432: LD_EXP 61
64436: AND
64437: IFFALSE 64446
64439: GO 64441
64441: DISABLE
// StreamSibBomb ;
64442: CALL 64447 0 0
64446: END
// export function StreamSibBomb ; var i , x , y ; begin
64447: LD_INT 0
64449: PPUSH
64450: PPUSH
64451: PPUSH
64452: PPUSH
// result := false ;
64453: LD_ADDR_VAR 0 1
64457: PUSH
64458: LD_INT 0
64460: ST_TO_ADDR
// for i := 1 to 16 do
64461: LD_ADDR_VAR 0 2
64465: PUSH
64466: DOUBLE
64467: LD_INT 1
64469: DEC
64470: ST_TO_ADDR
64471: LD_INT 16
64473: PUSH
64474: FOR_TO
64475: IFFALSE 64674
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64477: LD_ADDR_VAR 0 3
64481: PUSH
64482: LD_INT 10
64484: PUSH
64485: LD_INT 20
64487: PUSH
64488: LD_INT 30
64490: PUSH
64491: LD_INT 40
64493: PUSH
64494: LD_INT 50
64496: PUSH
64497: LD_INT 60
64499: PUSH
64500: LD_INT 70
64502: PUSH
64503: LD_INT 80
64505: PUSH
64506: LD_INT 90
64508: PUSH
64509: LD_INT 100
64511: PUSH
64512: LD_INT 110
64514: PUSH
64515: LD_INT 120
64517: PUSH
64518: LD_INT 130
64520: PUSH
64521: LD_INT 140
64523: PUSH
64524: LD_INT 150
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PPUSH
64547: LD_INT 15
64549: PPUSH
64550: CALL_OW 12
64554: ARRAY
64555: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64556: LD_ADDR_VAR 0 4
64560: PUSH
64561: LD_INT 10
64563: PUSH
64564: LD_INT 20
64566: PUSH
64567: LD_INT 30
64569: PUSH
64570: LD_INT 40
64572: PUSH
64573: LD_INT 50
64575: PUSH
64576: LD_INT 60
64578: PUSH
64579: LD_INT 70
64581: PUSH
64582: LD_INT 80
64584: PUSH
64585: LD_INT 90
64587: PUSH
64588: LD_INT 100
64590: PUSH
64591: LD_INT 110
64593: PUSH
64594: LD_INT 120
64596: PUSH
64597: LD_INT 130
64599: PUSH
64600: LD_INT 140
64602: PUSH
64603: LD_INT 150
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: PPUSH
64626: LD_INT 15
64628: PPUSH
64629: CALL_OW 12
64633: ARRAY
64634: ST_TO_ADDR
// if ValidHex ( x , y ) then
64635: LD_VAR 0 3
64639: PPUSH
64640: LD_VAR 0 4
64644: PPUSH
64645: CALL_OW 488
64649: IFFALSE 64672
// begin result := [ x , y ] ;
64651: LD_ADDR_VAR 0 1
64655: PUSH
64656: LD_VAR 0 3
64660: PUSH
64661: LD_VAR 0 4
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: ST_TO_ADDR
// break ;
64670: GO 64674
// end ; end ;
64672: GO 64474
64674: POP
64675: POP
// if result then
64676: LD_VAR 0 1
64680: IFFALSE 64740
// begin ToLua ( playSibBomb() ) ;
64682: LD_STRING playSibBomb()
64684: PPUSH
64685: CALL_OW 559
// wait ( 0 0$14 ) ;
64689: LD_INT 490
64691: PPUSH
64692: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64696: LD_VAR 0 1
64700: PUSH
64701: LD_INT 1
64703: ARRAY
64704: PPUSH
64705: LD_VAR 0 1
64709: PUSH
64710: LD_INT 2
64712: ARRAY
64713: PPUSH
64714: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
64718: LD_VAR 0 1
64722: PUSH
64723: LD_INT 1
64725: ARRAY
64726: PPUSH
64727: LD_VAR 0 1
64731: PUSH
64732: LD_INT 2
64734: ARRAY
64735: PPUSH
64736: CALL_OW 429
// end ; end ;
64740: LD_VAR 0 1
64744: RET
// every 0 0$1 trigger StreamModeActive and sReset do
64745: LD_EXP 41
64749: PUSH
64750: LD_EXP 63
64754: AND
64755: IFFALSE 64767
64757: GO 64759
64759: DISABLE
// YouLost (  ) ;
64760: LD_STRING 
64762: PPUSH
64763: CALL_OW 104
64767: END
// every 0 0$1 trigger StreamModeActive and sFog do
64768: LD_EXP 41
64772: PUSH
64773: LD_EXP 62
64777: AND
64778: IFFALSE 64792
64780: GO 64782
64782: DISABLE
// FogOff ( your_side ) ;
64783: LD_OWVAR 2
64787: PPUSH
64788: CALL_OW 344
64792: END
// every 0 0$1 trigger StreamModeActive and sSun do
64793: LD_EXP 41
64797: PUSH
64798: LD_EXP 64
64802: AND
64803: IFFALSE 64831
64805: GO 64807
64807: DISABLE
// begin solar_recharge_percent := 0 ;
64808: LD_ADDR_OWVAR 79
64812: PUSH
64813: LD_INT 0
64815: ST_TO_ADDR
// wait ( 5 5$00 ) ;
64816: LD_INT 10500
64818: PPUSH
64819: CALL_OW 67
// solar_recharge_percent := 100 ;
64823: LD_ADDR_OWVAR 79
64827: PUSH
64828: LD_INT 100
64830: ST_TO_ADDR
// end ;
64831: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
64832: LD_EXP 41
64836: PUSH
64837: LD_EXP 65
64841: AND
64842: IFFALSE 65081
64844: GO 64846
64846: DISABLE
64847: LD_INT 0
64849: PPUSH
64850: PPUSH
64851: PPUSH
// begin tmp := [ ] ;
64852: LD_ADDR_VAR 0 3
64856: PUSH
64857: EMPTY
64858: ST_TO_ADDR
// for i := 1 to 6 do
64859: LD_ADDR_VAR 0 1
64863: PUSH
64864: DOUBLE
64865: LD_INT 1
64867: DEC
64868: ST_TO_ADDR
64869: LD_INT 6
64871: PUSH
64872: FOR_TO
64873: IFFALSE 64978
// begin uc_nation := nation_nature ;
64875: LD_ADDR_OWVAR 21
64879: PUSH
64880: LD_INT 0
64882: ST_TO_ADDR
// uc_side := 0 ;
64883: LD_ADDR_OWVAR 20
64887: PUSH
64888: LD_INT 0
64890: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64891: LD_ADDR_OWVAR 29
64895: PUSH
64896: LD_INT 12
64898: PUSH
64899: LD_INT 12
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// hc_agressivity := 20 ;
64906: LD_ADDR_OWVAR 35
64910: PUSH
64911: LD_INT 20
64913: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
64914: LD_ADDR_OWVAR 28
64918: PUSH
64919: LD_INT 17
64921: ST_TO_ADDR
// hc_gallery :=  ;
64922: LD_ADDR_OWVAR 33
64926: PUSH
64927: LD_STRING 
64929: ST_TO_ADDR
// hc_name :=  ;
64930: LD_ADDR_OWVAR 26
64934: PUSH
64935: LD_STRING 
64937: ST_TO_ADDR
// un := CreateHuman ;
64938: LD_ADDR_VAR 0 2
64942: PUSH
64943: CALL_OW 44
64947: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
64948: LD_VAR 0 2
64952: PPUSH
64953: LD_INT 1
64955: PPUSH
64956: CALL_OW 51
// tmp := tmp ^ un ;
64960: LD_ADDR_VAR 0 3
64964: PUSH
64965: LD_VAR 0 3
64969: PUSH
64970: LD_VAR 0 2
64974: ADD
64975: ST_TO_ADDR
// end ;
64976: GO 64872
64978: POP
64979: POP
// repeat wait ( 0 0$1 ) ;
64980: LD_INT 35
64982: PPUSH
64983: CALL_OW 67
// for un in tmp do
64987: LD_ADDR_VAR 0 2
64991: PUSH
64992: LD_VAR 0 3
64996: PUSH
64997: FOR_IN
64998: IFFALSE 65072
// begin if IsDead ( un ) then
65000: LD_VAR 0 2
65004: PPUSH
65005: CALL_OW 301
65009: IFFALSE 65029
// begin tmp := tmp diff un ;
65011: LD_ADDR_VAR 0 3
65015: PUSH
65016: LD_VAR 0 3
65020: PUSH
65021: LD_VAR 0 2
65025: DIFF
65026: ST_TO_ADDR
// continue ;
65027: GO 64997
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65029: LD_VAR 0 2
65033: PPUSH
65034: LD_INT 3
65036: PUSH
65037: LD_INT 22
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PPUSH
65051: CALL_OW 69
65055: PPUSH
65056: LD_VAR 0 2
65060: PPUSH
65061: CALL_OW 74
65065: PPUSH
65066: CALL_OW 115
// end ;
65070: GO 64997
65072: POP
65073: POP
// until not tmp ;
65074: LD_VAR 0 3
65078: NOT
65079: IFFALSE 64980
// end ;
65081: PPOPN 3
65083: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65084: LD_EXP 41
65088: PUSH
65089: LD_EXP 66
65093: AND
65094: IFFALSE 65148
65096: GO 65098
65098: DISABLE
// begin ToLua ( displayTroll(); ) ;
65099: LD_STRING displayTroll();
65101: PPUSH
65102: CALL_OW 559
// wait ( 3 3$00 ) ;
65106: LD_INT 6300
65108: PPUSH
65109: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65113: LD_STRING hideTroll();
65115: PPUSH
65116: CALL_OW 559
// wait ( 1 1$00 ) ;
65120: LD_INT 2100
65122: PPUSH
65123: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65127: LD_STRING displayTroll();
65129: PPUSH
65130: CALL_OW 559
// wait ( 1 1$00 ) ;
65134: LD_INT 2100
65136: PPUSH
65137: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65141: LD_STRING hideTroll();
65143: PPUSH
65144: CALL_OW 559
// end ;
65148: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65149: LD_EXP 41
65153: PUSH
65154: LD_EXP 67
65158: AND
65159: IFFALSE 65222
65161: GO 65163
65163: DISABLE
65164: LD_INT 0
65166: PPUSH
// begin p := 0 ;
65167: LD_ADDR_VAR 0 1
65171: PUSH
65172: LD_INT 0
65174: ST_TO_ADDR
// repeat game_speed := 1 ;
65175: LD_ADDR_OWVAR 65
65179: PUSH
65180: LD_INT 1
65182: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65183: LD_INT 35
65185: PPUSH
65186: CALL_OW 67
// p := p + 1 ;
65190: LD_ADDR_VAR 0 1
65194: PUSH
65195: LD_VAR 0 1
65199: PUSH
65200: LD_INT 1
65202: PLUS
65203: ST_TO_ADDR
// until p >= 60 ;
65204: LD_VAR 0 1
65208: PUSH
65209: LD_INT 60
65211: GREATEREQUAL
65212: IFFALSE 65175
// game_speed := 4 ;
65214: LD_ADDR_OWVAR 65
65218: PUSH
65219: LD_INT 4
65221: ST_TO_ADDR
// end ;
65222: PPOPN 1
65224: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65225: LD_EXP 41
65229: PUSH
65230: LD_EXP 68
65234: AND
65235: IFFALSE 65381
65237: GO 65239
65239: DISABLE
65240: LD_INT 0
65242: PPUSH
65243: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65244: LD_ADDR_VAR 0 1
65248: PUSH
65249: LD_INT 22
65251: PUSH
65252: LD_OWVAR 2
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: PUSH
65261: LD_INT 2
65263: PUSH
65264: LD_INT 30
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 30
65276: PUSH
65277: LD_INT 1
65279: PUSH
65280: EMPTY
65281: LIST
65282: LIST
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PPUSH
65293: CALL_OW 69
65297: ST_TO_ADDR
// if not depot then
65298: LD_VAR 0 1
65302: NOT
65303: IFFALSE 65307
// exit ;
65305: GO 65381
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65307: LD_ADDR_VAR 0 2
65311: PUSH
65312: LD_VAR 0 1
65316: PUSH
65317: LD_INT 1
65319: PPUSH
65320: LD_VAR 0 1
65324: PPUSH
65325: CALL_OW 12
65329: ARRAY
65330: PPUSH
65331: CALL_OW 274
65335: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65336: LD_VAR 0 2
65340: PPUSH
65341: LD_INT 1
65343: PPUSH
65344: LD_INT 0
65346: PPUSH
65347: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65351: LD_VAR 0 2
65355: PPUSH
65356: LD_INT 2
65358: PPUSH
65359: LD_INT 0
65361: PPUSH
65362: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65366: LD_VAR 0 2
65370: PPUSH
65371: LD_INT 3
65373: PPUSH
65374: LD_INT 0
65376: PPUSH
65377: CALL_OW 277
// end ;
65381: PPOPN 2
65383: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65384: LD_EXP 41
65388: PUSH
65389: LD_EXP 69
65393: AND
65394: IFFALSE 65491
65396: GO 65398
65398: DISABLE
65399: LD_INT 0
65401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65402: LD_ADDR_VAR 0 1
65406: PUSH
65407: LD_INT 22
65409: PUSH
65410: LD_OWVAR 2
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 21
65421: PUSH
65422: LD_INT 1
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 23
65434: PUSH
65435: LD_INT 0
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: LIST
65450: PPUSH
65451: CALL_OW 69
65455: ST_TO_ADDR
// if not tmp then
65456: LD_VAR 0 1
65460: NOT
65461: IFFALSE 65465
// exit ;
65463: GO 65491
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65465: LD_VAR 0 1
65469: PUSH
65470: LD_INT 1
65472: PPUSH
65473: LD_VAR 0 1
65477: PPUSH
65478: CALL_OW 12
65482: ARRAY
65483: PPUSH
65484: LD_INT 200
65486: PPUSH
65487: CALL_OW 234
// end ;
65491: PPOPN 1
65493: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
65494: LD_EXP 41
65498: PUSH
65499: LD_EXP 70
65503: AND
65504: IFFALSE 65583
65506: GO 65508
65508: DISABLE
65509: LD_INT 0
65511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
65512: LD_ADDR_VAR 0 1
65516: PUSH
65517: LD_INT 22
65519: PUSH
65520: LD_OWVAR 2
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 21
65531: PUSH
65532: LD_INT 2
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PPUSH
65543: CALL_OW 69
65547: ST_TO_ADDR
// if not tmp then
65548: LD_VAR 0 1
65552: NOT
65553: IFFALSE 65557
// exit ;
65555: GO 65583
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65557: LD_VAR 0 1
65561: PUSH
65562: LD_INT 1
65564: PPUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 12
65574: ARRAY
65575: PPUSH
65576: LD_INT 60
65578: PPUSH
65579: CALL_OW 234
// end ;
65583: PPOPN 1
65585: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65586: LD_EXP 41
65590: PUSH
65591: LD_EXP 71
65595: AND
65596: IFFALSE 65695
65598: GO 65600
65600: DISABLE
65601: LD_INT 0
65603: PPUSH
65604: PPUSH
// begin enable ;
65605: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65606: LD_ADDR_VAR 0 1
65610: PUSH
65611: LD_INT 22
65613: PUSH
65614: LD_OWVAR 2
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 61
65625: PUSH
65626: EMPTY
65627: LIST
65628: PUSH
65629: LD_INT 33
65631: PUSH
65632: LD_INT 2
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: LIST
65643: PPUSH
65644: CALL_OW 69
65648: ST_TO_ADDR
// if not tmp then
65649: LD_VAR 0 1
65653: NOT
65654: IFFALSE 65658
// exit ;
65656: GO 65695
// for i in tmp do
65658: LD_ADDR_VAR 0 2
65662: PUSH
65663: LD_VAR 0 1
65667: PUSH
65668: FOR_IN
65669: IFFALSE 65693
// if IsControledBy ( i ) then
65671: LD_VAR 0 2
65675: PPUSH
65676: CALL_OW 312
65680: IFFALSE 65691
// ComUnlink ( i ) ;
65682: LD_VAR 0 2
65686: PPUSH
65687: CALL_OW 136
65691: GO 65668
65693: POP
65694: POP
// end ;
65695: PPOPN 2
65697: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65698: LD_EXP 41
65702: PUSH
65703: LD_EXP 72
65707: AND
65708: IFFALSE 65848
65710: GO 65712
65712: DISABLE
65713: LD_INT 0
65715: PPUSH
65716: PPUSH
// begin ToLua ( displayPowell(); ) ;
65717: LD_STRING displayPowell();
65719: PPUSH
65720: CALL_OW 559
// uc_side := 0 ;
65724: LD_ADDR_OWVAR 20
65728: PUSH
65729: LD_INT 0
65731: ST_TO_ADDR
// uc_nation := 2 ;
65732: LD_ADDR_OWVAR 21
65736: PUSH
65737: LD_INT 2
65739: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
65740: LD_ADDR_OWVAR 37
65744: PUSH
65745: LD_INT 14
65747: ST_TO_ADDR
// vc_engine := engine_siberite ;
65748: LD_ADDR_OWVAR 39
65752: PUSH
65753: LD_INT 3
65755: ST_TO_ADDR
// vc_control := control_apeman ;
65756: LD_ADDR_OWVAR 38
65760: PUSH
65761: LD_INT 5
65763: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
65764: LD_ADDR_OWVAR 40
65768: PUSH
65769: LD_INT 29
65771: ST_TO_ADDR
// un := CreateVehicle ;
65772: LD_ADDR_VAR 0 2
65776: PUSH
65777: CALL_OW 45
65781: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65782: LD_VAR 0 2
65786: PPUSH
65787: LD_INT 1
65789: PPUSH
65790: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65794: LD_INT 35
65796: PPUSH
65797: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65801: LD_VAR 0 2
65805: PPUSH
65806: LD_INT 22
65808: PUSH
65809: LD_OWVAR 2
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PPUSH
65818: CALL_OW 69
65822: PPUSH
65823: LD_VAR 0 2
65827: PPUSH
65828: CALL_OW 74
65832: PPUSH
65833: CALL_OW 115
// until IsDead ( un ) ;
65837: LD_VAR 0 2
65841: PPUSH
65842: CALL_OW 301
65846: IFFALSE 65794
// end ;
65848: PPOPN 2
65850: END
// every 0 0$1 trigger StreamModeActive and sStu do
65851: LD_EXP 41
65855: PUSH
65856: LD_EXP 80
65860: AND
65861: IFFALSE 65877
65863: GO 65865
65865: DISABLE
// begin ToLua ( displayStucuk(); ) ;
65866: LD_STRING displayStucuk();
65868: PPUSH
65869: CALL_OW 559
// ResetFog ;
65873: CALL_OW 335
// end ;
65877: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
65878: LD_EXP 41
65882: PUSH
65883: LD_EXP 73
65887: AND
65888: IFFALSE 66029
65890: GO 65892
65892: DISABLE
65893: LD_INT 0
65895: PPUSH
65896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65897: LD_ADDR_VAR 0 2
65901: PUSH
65902: LD_INT 22
65904: PUSH
65905: LD_OWVAR 2
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 21
65916: PUSH
65917: LD_INT 1
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PPUSH
65928: CALL_OW 69
65932: ST_TO_ADDR
// if not tmp then
65933: LD_VAR 0 2
65937: NOT
65938: IFFALSE 65942
// exit ;
65940: GO 66029
// un := tmp [ rand ( 1 , tmp ) ] ;
65942: LD_ADDR_VAR 0 1
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_INT 1
65954: PPUSH
65955: LD_VAR 0 2
65959: PPUSH
65960: CALL_OW 12
65964: ARRAY
65965: ST_TO_ADDR
// SetSide ( un , 0 ) ;
65966: LD_VAR 0 1
65970: PPUSH
65971: LD_INT 0
65973: PPUSH
65974: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
65978: LD_VAR 0 1
65982: PPUSH
65983: LD_OWVAR 3
65987: PUSH
65988: LD_VAR 0 1
65992: DIFF
65993: PPUSH
65994: LD_VAR 0 1
65998: PPUSH
65999: CALL_OW 74
66003: PPUSH
66004: CALL_OW 115
// wait ( 0 0$20 ) ;
66008: LD_INT 700
66010: PPUSH
66011: CALL_OW 67
// SetSide ( un , your_side ) ;
66015: LD_VAR 0 1
66019: PPUSH
66020: LD_OWVAR 2
66024: PPUSH
66025: CALL_OW 235
// end ;
66029: PPOPN 2
66031: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66032: LD_EXP 41
66036: PUSH
66037: LD_EXP 74
66041: AND
66042: IFFALSE 66148
66044: GO 66046
66046: DISABLE
66047: LD_INT 0
66049: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66050: LD_ADDR_VAR 0 1
66054: PUSH
66055: LD_INT 22
66057: PUSH
66058: LD_OWVAR 2
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 30
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 30
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: LIST
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PPUSH
66099: CALL_OW 69
66103: ST_TO_ADDR
// if not depot then
66104: LD_VAR 0 1
66108: NOT
66109: IFFALSE 66113
// exit ;
66111: GO 66148
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66113: LD_VAR 0 1
66117: PUSH
66118: LD_INT 1
66120: ARRAY
66121: PPUSH
66122: CALL_OW 250
66126: PPUSH
66127: LD_VAR 0 1
66131: PUSH
66132: LD_INT 1
66134: ARRAY
66135: PPUSH
66136: CALL_OW 251
66140: PPUSH
66141: LD_INT 70
66143: PPUSH
66144: CALL_OW 495
// end ;
66148: PPOPN 1
66150: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66151: LD_EXP 41
66155: PUSH
66156: LD_EXP 75
66160: AND
66161: IFFALSE 66372
66163: GO 66165
66165: DISABLE
66166: LD_INT 0
66168: PPUSH
66169: PPUSH
66170: PPUSH
66171: PPUSH
66172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66173: LD_ADDR_VAR 0 5
66177: PUSH
66178: LD_INT 22
66180: PUSH
66181: LD_OWVAR 2
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 21
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PPUSH
66204: CALL_OW 69
66208: ST_TO_ADDR
// if not tmp then
66209: LD_VAR 0 5
66213: NOT
66214: IFFALSE 66218
// exit ;
66216: GO 66372
// for i in tmp do
66218: LD_ADDR_VAR 0 1
66222: PUSH
66223: LD_VAR 0 5
66227: PUSH
66228: FOR_IN
66229: IFFALSE 66370
// begin d := rand ( 0 , 5 ) ;
66231: LD_ADDR_VAR 0 4
66235: PUSH
66236: LD_INT 0
66238: PPUSH
66239: LD_INT 5
66241: PPUSH
66242: CALL_OW 12
66246: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66247: LD_ADDR_VAR 0 2
66251: PUSH
66252: LD_VAR 0 1
66256: PPUSH
66257: CALL_OW 250
66261: PPUSH
66262: LD_VAR 0 4
66266: PPUSH
66267: LD_INT 3
66269: PPUSH
66270: LD_INT 12
66272: PPUSH
66273: CALL_OW 12
66277: PPUSH
66278: CALL_OW 272
66282: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66283: LD_ADDR_VAR 0 3
66287: PUSH
66288: LD_VAR 0 1
66292: PPUSH
66293: CALL_OW 251
66297: PPUSH
66298: LD_VAR 0 4
66302: PPUSH
66303: LD_INT 3
66305: PPUSH
66306: LD_INT 12
66308: PPUSH
66309: CALL_OW 12
66313: PPUSH
66314: CALL_OW 273
66318: ST_TO_ADDR
// if ValidHex ( x , y ) then
66319: LD_VAR 0 2
66323: PPUSH
66324: LD_VAR 0 3
66328: PPUSH
66329: CALL_OW 488
66333: IFFALSE 66368
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66335: LD_VAR 0 1
66339: PPUSH
66340: LD_VAR 0 2
66344: PPUSH
66345: LD_VAR 0 3
66349: PPUSH
66350: LD_INT 3
66352: PPUSH
66353: LD_INT 6
66355: PPUSH
66356: CALL_OW 12
66360: PPUSH
66361: LD_INT 1
66363: PPUSH
66364: CALL_OW 483
// end ;
66368: GO 66228
66370: POP
66371: POP
// end ;
66372: PPOPN 5
66374: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66375: LD_EXP 41
66379: PUSH
66380: LD_EXP 76
66384: AND
66385: IFFALSE 66479
66387: GO 66389
66389: DISABLE
66390: LD_INT 0
66392: PPUSH
66393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66394: LD_ADDR_VAR 0 2
66398: PUSH
66399: LD_INT 22
66401: PUSH
66402: LD_OWVAR 2
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 32
66413: PUSH
66414: LD_INT 1
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 21
66423: PUSH
66424: LD_INT 2
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: LIST
66435: PPUSH
66436: CALL_OW 69
66440: ST_TO_ADDR
// if not tmp then
66441: LD_VAR 0 2
66445: NOT
66446: IFFALSE 66450
// exit ;
66448: GO 66479
// for i in tmp do
66450: LD_ADDR_VAR 0 1
66454: PUSH
66455: LD_VAR 0 2
66459: PUSH
66460: FOR_IN
66461: IFFALSE 66477
// SetFuel ( i , 0 ) ;
66463: LD_VAR 0 1
66467: PPUSH
66468: LD_INT 0
66470: PPUSH
66471: CALL_OW 240
66475: GO 66460
66477: POP
66478: POP
// end ;
66479: PPOPN 2
66481: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66482: LD_EXP 41
66486: PUSH
66487: LD_EXP 77
66491: AND
66492: IFFALSE 66558
66494: GO 66496
66496: DISABLE
66497: LD_INT 0
66499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66500: LD_ADDR_VAR 0 1
66504: PUSH
66505: LD_INT 22
66507: PUSH
66508: LD_OWVAR 2
66512: PUSH
66513: EMPTY
66514: LIST
66515: LIST
66516: PUSH
66517: LD_INT 30
66519: PUSH
66520: LD_INT 29
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: PPUSH
66531: CALL_OW 69
66535: ST_TO_ADDR
// if not tmp then
66536: LD_VAR 0 1
66540: NOT
66541: IFFALSE 66545
// exit ;
66543: GO 66558
// DestroyUnit ( tmp [ 1 ] ) ;
66545: LD_VAR 0 1
66549: PUSH
66550: LD_INT 1
66552: ARRAY
66553: PPUSH
66554: CALL_OW 65
// end ;
66558: PPOPN 1
66560: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66561: LD_EXP 41
66565: PUSH
66566: LD_EXP 79
66570: AND
66571: IFFALSE 66700
66573: GO 66575
66575: DISABLE
66576: LD_INT 0
66578: PPUSH
// begin uc_side := 0 ;
66579: LD_ADDR_OWVAR 20
66583: PUSH
66584: LD_INT 0
66586: ST_TO_ADDR
// uc_nation := nation_arabian ;
66587: LD_ADDR_OWVAR 21
66591: PUSH
66592: LD_INT 2
66594: ST_TO_ADDR
// hc_gallery :=  ;
66595: LD_ADDR_OWVAR 33
66599: PUSH
66600: LD_STRING 
66602: ST_TO_ADDR
// hc_name :=  ;
66603: LD_ADDR_OWVAR 26
66607: PUSH
66608: LD_STRING 
66610: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66611: LD_INT 1
66613: PPUSH
66614: LD_INT 11
66616: PPUSH
66617: LD_INT 10
66619: PPUSH
66620: CALL_OW 380
// un := CreateHuman ;
66624: LD_ADDR_VAR 0 1
66628: PUSH
66629: CALL_OW 44
66633: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66634: LD_VAR 0 1
66638: PPUSH
66639: LD_INT 1
66641: PPUSH
66642: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66646: LD_INT 35
66648: PPUSH
66649: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66653: LD_VAR 0 1
66657: PPUSH
66658: LD_INT 22
66660: PUSH
66661: LD_OWVAR 2
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PPUSH
66670: CALL_OW 69
66674: PPUSH
66675: LD_VAR 0 1
66679: PPUSH
66680: CALL_OW 74
66684: PPUSH
66685: CALL_OW 115
// until IsDead ( un ) ;
66689: LD_VAR 0 1
66693: PPUSH
66694: CALL_OW 301
66698: IFFALSE 66646
// end ;
66700: PPOPN 1
66702: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66703: LD_EXP 41
66707: PUSH
66708: LD_EXP 81
66712: AND
66713: IFFALSE 66725
66715: GO 66717
66717: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
66718: LD_STRING earthquake(getX(game), 0, 32)
66720: PPUSH
66721: CALL_OW 559
66725: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
66726: LD_EXP 41
66730: PUSH
66731: LD_EXP 82
66735: AND
66736: IFFALSE 66827
66738: GO 66740
66740: DISABLE
66741: LD_INT 0
66743: PPUSH
// begin enable ;
66744: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
66745: LD_ADDR_VAR 0 1
66749: PUSH
66750: LD_INT 22
66752: PUSH
66753: LD_OWVAR 2
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 21
66764: PUSH
66765: LD_INT 2
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 33
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: LIST
66786: PPUSH
66787: CALL_OW 69
66791: ST_TO_ADDR
// if not tmp then
66792: LD_VAR 0 1
66796: NOT
66797: IFFALSE 66801
// exit ;
66799: GO 66827
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66801: LD_VAR 0 1
66805: PUSH
66806: LD_INT 1
66808: PPUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 12
66818: ARRAY
66819: PPUSH
66820: LD_INT 1
66822: PPUSH
66823: CALL_OW 234
// end ;
66827: PPOPN 1
66829: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
66830: LD_EXP 41
66834: PUSH
66835: LD_EXP 83
66839: AND
66840: IFFALSE 66981
66842: GO 66844
66844: DISABLE
66845: LD_INT 0
66847: PPUSH
66848: PPUSH
66849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66850: LD_ADDR_VAR 0 3
66854: PUSH
66855: LD_INT 22
66857: PUSH
66858: LD_OWVAR 2
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 25
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: PPUSH
66881: CALL_OW 69
66885: ST_TO_ADDR
// if not tmp then
66886: LD_VAR 0 3
66890: NOT
66891: IFFALSE 66895
// exit ;
66893: GO 66981
// un := tmp [ rand ( 1 , tmp ) ] ;
66895: LD_ADDR_VAR 0 2
66899: PUSH
66900: LD_VAR 0 3
66904: PUSH
66905: LD_INT 1
66907: PPUSH
66908: LD_VAR 0 3
66912: PPUSH
66913: CALL_OW 12
66917: ARRAY
66918: ST_TO_ADDR
// if Crawls ( un ) then
66919: LD_VAR 0 2
66923: PPUSH
66924: CALL_OW 318
66928: IFFALSE 66939
// ComWalk ( un ) ;
66930: LD_VAR 0 2
66934: PPUSH
66935: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
66939: LD_VAR 0 2
66943: PPUSH
66944: LD_INT 9
66946: PPUSH
66947: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
66951: LD_INT 28
66953: PPUSH
66954: LD_OWVAR 2
66958: PPUSH
66959: LD_INT 2
66961: PPUSH
66962: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
66966: LD_INT 29
66968: PPUSH
66969: LD_OWVAR 2
66973: PPUSH
66974: LD_INT 2
66976: PPUSH
66977: CALL_OW 322
// end ;
66981: PPOPN 3
66983: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
66984: LD_EXP 41
66988: PUSH
66989: LD_EXP 84
66993: AND
66994: IFFALSE 67105
66996: GO 66998
66998: DISABLE
66999: LD_INT 0
67001: PPUSH
67002: PPUSH
67003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67004: LD_ADDR_VAR 0 3
67008: PUSH
67009: LD_INT 22
67011: PUSH
67012: LD_OWVAR 2
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: LD_INT 25
67023: PUSH
67024: LD_INT 1
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PPUSH
67035: CALL_OW 69
67039: ST_TO_ADDR
// if not tmp then
67040: LD_VAR 0 3
67044: NOT
67045: IFFALSE 67049
// exit ;
67047: GO 67105
// un := tmp [ rand ( 1 , tmp ) ] ;
67049: LD_ADDR_VAR 0 2
67053: PUSH
67054: LD_VAR 0 3
67058: PUSH
67059: LD_INT 1
67061: PPUSH
67062: LD_VAR 0 3
67066: PPUSH
67067: CALL_OW 12
67071: ARRAY
67072: ST_TO_ADDR
// if Crawls ( un ) then
67073: LD_VAR 0 2
67077: PPUSH
67078: CALL_OW 318
67082: IFFALSE 67093
// ComWalk ( un ) ;
67084: LD_VAR 0 2
67088: PPUSH
67089: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67093: LD_VAR 0 2
67097: PPUSH
67098: LD_INT 8
67100: PPUSH
67101: CALL_OW 336
// end ;
67105: PPOPN 3
67107: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67108: LD_EXP 41
67112: PUSH
67113: LD_EXP 85
67117: AND
67118: IFFALSE 67262
67120: GO 67122
67122: DISABLE
67123: LD_INT 0
67125: PPUSH
67126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67127: LD_ADDR_VAR 0 2
67131: PUSH
67132: LD_INT 22
67134: PUSH
67135: LD_OWVAR 2
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 21
67146: PUSH
67147: LD_INT 2
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: PUSH
67157: LD_INT 34
67159: PUSH
67160: LD_INT 12
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 34
67169: PUSH
67170: LD_INT 51
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 34
67179: PUSH
67180: LD_INT 32
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: LIST
67191: LIST
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: LIST
67197: PPUSH
67198: CALL_OW 69
67202: ST_TO_ADDR
// if not tmp then
67203: LD_VAR 0 2
67207: NOT
67208: IFFALSE 67212
// exit ;
67210: GO 67262
// for i in tmp do
67212: LD_ADDR_VAR 0 1
67216: PUSH
67217: LD_VAR 0 2
67221: PUSH
67222: FOR_IN
67223: IFFALSE 67260
// if GetCargo ( i , mat_artifact ) = 0 then
67225: LD_VAR 0 1
67229: PPUSH
67230: LD_INT 4
67232: PPUSH
67233: CALL_OW 289
67237: PUSH
67238: LD_INT 0
67240: EQUAL
67241: IFFALSE 67258
// SetCargo ( i , mat_siberit , 100 ) ;
67243: LD_VAR 0 1
67247: PPUSH
67248: LD_INT 3
67250: PPUSH
67251: LD_INT 100
67253: PPUSH
67254: CALL_OW 290
67258: GO 67222
67260: POP
67261: POP
// end ;
67262: PPOPN 2
67264: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67265: LD_EXP 41
67269: PUSH
67270: LD_EXP 86
67274: AND
67275: IFFALSE 67458
67277: GO 67279
67279: DISABLE
67280: LD_INT 0
67282: PPUSH
67283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67284: LD_ADDR_VAR 0 2
67288: PUSH
67289: LD_INT 22
67291: PUSH
67292: LD_OWVAR 2
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: PPUSH
67301: CALL_OW 69
67305: ST_TO_ADDR
// if not tmp then
67306: LD_VAR 0 2
67310: NOT
67311: IFFALSE 67315
// exit ;
67313: GO 67458
// for i := 1 to 2 do
67315: LD_ADDR_VAR 0 1
67319: PUSH
67320: DOUBLE
67321: LD_INT 1
67323: DEC
67324: ST_TO_ADDR
67325: LD_INT 2
67327: PUSH
67328: FOR_TO
67329: IFFALSE 67456
// begin uc_side := your_side ;
67331: LD_ADDR_OWVAR 20
67335: PUSH
67336: LD_OWVAR 2
67340: ST_TO_ADDR
// uc_nation := nation_american ;
67341: LD_ADDR_OWVAR 21
67345: PUSH
67346: LD_INT 1
67348: ST_TO_ADDR
// vc_chassis := us_morphling ;
67349: LD_ADDR_OWVAR 37
67353: PUSH
67354: LD_INT 5
67356: ST_TO_ADDR
// vc_engine := engine_siberite ;
67357: LD_ADDR_OWVAR 39
67361: PUSH
67362: LD_INT 3
67364: ST_TO_ADDR
// vc_control := control_computer ;
67365: LD_ADDR_OWVAR 38
67369: PUSH
67370: LD_INT 3
67372: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67373: LD_ADDR_OWVAR 40
67377: PUSH
67378: LD_INT 10
67380: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67381: LD_VAR 0 2
67385: PUSH
67386: LD_INT 1
67388: ARRAY
67389: PPUSH
67390: CALL_OW 310
67394: NOT
67395: IFFALSE 67442
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67397: CALL_OW 45
67401: PPUSH
67402: LD_VAR 0 2
67406: PUSH
67407: LD_INT 1
67409: ARRAY
67410: PPUSH
67411: CALL_OW 250
67415: PPUSH
67416: LD_VAR 0 2
67420: PUSH
67421: LD_INT 1
67423: ARRAY
67424: PPUSH
67425: CALL_OW 251
67429: PPUSH
67430: LD_INT 12
67432: PPUSH
67433: LD_INT 1
67435: PPUSH
67436: CALL_OW 50
67440: GO 67454
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67442: CALL_OW 45
67446: PPUSH
67447: LD_INT 1
67449: PPUSH
67450: CALL_OW 51
// end ;
67454: GO 67328
67456: POP
67457: POP
// end ;
67458: PPOPN 2
67460: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67461: LD_EXP 41
67465: PUSH
67466: LD_EXP 87
67470: AND
67471: IFFALSE 67693
67473: GO 67475
67475: DISABLE
67476: LD_INT 0
67478: PPUSH
67479: PPUSH
67480: PPUSH
67481: PPUSH
67482: PPUSH
67483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67484: LD_ADDR_VAR 0 6
67488: PUSH
67489: LD_INT 22
67491: PUSH
67492: LD_OWVAR 2
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 21
67503: PUSH
67504: LD_INT 1
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: LD_INT 23
67516: PUSH
67517: LD_INT 0
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: PPUSH
67533: CALL_OW 69
67537: ST_TO_ADDR
// if not tmp then
67538: LD_VAR 0 6
67542: NOT
67543: IFFALSE 67547
// exit ;
67545: GO 67693
// s1 := rand ( 1 , 4 ) ;
67547: LD_ADDR_VAR 0 2
67551: PUSH
67552: LD_INT 1
67554: PPUSH
67555: LD_INT 4
67557: PPUSH
67558: CALL_OW 12
67562: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67563: LD_ADDR_VAR 0 4
67567: PUSH
67568: LD_VAR 0 6
67572: PUSH
67573: LD_INT 1
67575: ARRAY
67576: PPUSH
67577: LD_VAR 0 2
67581: PPUSH
67582: CALL_OW 259
67586: ST_TO_ADDR
// if s1 = 1 then
67587: LD_VAR 0 2
67591: PUSH
67592: LD_INT 1
67594: EQUAL
67595: IFFALSE 67615
// s2 := rand ( 2 , 4 ) else
67597: LD_ADDR_VAR 0 3
67601: PUSH
67602: LD_INT 2
67604: PPUSH
67605: LD_INT 4
67607: PPUSH
67608: CALL_OW 12
67612: ST_TO_ADDR
67613: GO 67623
// s2 := 1 ;
67615: LD_ADDR_VAR 0 3
67619: PUSH
67620: LD_INT 1
67622: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67623: LD_ADDR_VAR 0 5
67627: PUSH
67628: LD_VAR 0 6
67632: PUSH
67633: LD_INT 1
67635: ARRAY
67636: PPUSH
67637: LD_VAR 0 3
67641: PPUSH
67642: CALL_OW 259
67646: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67647: LD_VAR 0 6
67651: PUSH
67652: LD_INT 1
67654: ARRAY
67655: PPUSH
67656: LD_VAR 0 2
67660: PPUSH
67661: LD_VAR 0 5
67665: PPUSH
67666: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67670: LD_VAR 0 6
67674: PUSH
67675: LD_INT 1
67677: ARRAY
67678: PPUSH
67679: LD_VAR 0 3
67683: PPUSH
67684: LD_VAR 0 4
67688: PPUSH
67689: CALL_OW 237
// end ;
67693: PPOPN 6
67695: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67696: LD_EXP 41
67700: PUSH
67701: LD_EXP 88
67705: AND
67706: IFFALSE 67785
67708: GO 67710
67710: DISABLE
67711: LD_INT 0
67713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
67714: LD_ADDR_VAR 0 1
67718: PUSH
67719: LD_INT 22
67721: PUSH
67722: LD_OWVAR 2
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 30
67733: PUSH
67734: LD_INT 3
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PPUSH
67745: CALL_OW 69
67749: ST_TO_ADDR
// if not tmp then
67750: LD_VAR 0 1
67754: NOT
67755: IFFALSE 67759
// exit ;
67757: GO 67785
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67759: LD_VAR 0 1
67763: PUSH
67764: LD_INT 1
67766: PPUSH
67767: LD_VAR 0 1
67771: PPUSH
67772: CALL_OW 12
67776: ARRAY
67777: PPUSH
67778: LD_INT 1
67780: PPUSH
67781: CALL_OW 234
// end ;
67785: PPOPN 1
67787: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
67788: LD_EXP 41
67792: PUSH
67793: LD_EXP 89
67797: AND
67798: IFFALSE 67910
67800: GO 67802
67802: DISABLE
67803: LD_INT 0
67805: PPUSH
67806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
67807: LD_ADDR_VAR 0 2
67811: PUSH
67812: LD_INT 22
67814: PUSH
67815: LD_OWVAR 2
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 2
67826: PUSH
67827: LD_INT 30
67829: PUSH
67830: LD_INT 27
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 30
67839: PUSH
67840: LD_INT 26
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 30
67849: PUSH
67850: LD_INT 28
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: LIST
67861: LIST
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PPUSH
67867: CALL_OW 69
67871: ST_TO_ADDR
// if not tmp then
67872: LD_VAR 0 2
67876: NOT
67877: IFFALSE 67881
// exit ;
67879: GO 67910
// for i in tmp do
67881: LD_ADDR_VAR 0 1
67885: PUSH
67886: LD_VAR 0 2
67890: PUSH
67891: FOR_IN
67892: IFFALSE 67908
// SetLives ( i , 1 ) ;
67894: LD_VAR 0 1
67898: PPUSH
67899: LD_INT 1
67901: PPUSH
67902: CALL_OW 234
67906: GO 67891
67908: POP
67909: POP
// end ;
67910: PPOPN 2
67912: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
67913: LD_EXP 41
67917: PUSH
67918: LD_EXP 90
67922: AND
67923: IFFALSE 68210
67925: GO 67927
67927: DISABLE
67928: LD_INT 0
67930: PPUSH
67931: PPUSH
67932: PPUSH
// begin i := rand ( 1 , 7 ) ;
67933: LD_ADDR_VAR 0 1
67937: PUSH
67938: LD_INT 1
67940: PPUSH
67941: LD_INT 7
67943: PPUSH
67944: CALL_OW 12
67948: ST_TO_ADDR
// case i of 1 :
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 1
67956: DOUBLE
67957: EQUAL
67958: IFTRUE 67962
67960: GO 67972
67962: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
67963: LD_STRING earthquake(getX(game), 0, 32)
67965: PPUSH
67966: CALL_OW 559
67970: GO 68210
67972: LD_INT 2
67974: DOUBLE
67975: EQUAL
67976: IFTRUE 67980
67978: GO 67994
67980: POP
// begin ToLua ( displayStucuk(); ) ;
67981: LD_STRING displayStucuk();
67983: PPUSH
67984: CALL_OW 559
// ResetFog ;
67988: CALL_OW 335
// end ; 3 :
67992: GO 68210
67994: LD_INT 3
67996: DOUBLE
67997: EQUAL
67998: IFTRUE 68002
68000: GO 68106
68002: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68003: LD_ADDR_VAR 0 2
68007: PUSH
68008: LD_INT 22
68010: PUSH
68011: LD_OWVAR 2
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 25
68022: PUSH
68023: LD_INT 1
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PPUSH
68034: CALL_OW 69
68038: ST_TO_ADDR
// if not tmp then
68039: LD_VAR 0 2
68043: NOT
68044: IFFALSE 68048
// exit ;
68046: GO 68210
// un := tmp [ rand ( 1 , tmp ) ] ;
68048: LD_ADDR_VAR 0 3
68052: PUSH
68053: LD_VAR 0 2
68057: PUSH
68058: LD_INT 1
68060: PPUSH
68061: LD_VAR 0 2
68065: PPUSH
68066: CALL_OW 12
68070: ARRAY
68071: ST_TO_ADDR
// if Crawls ( un ) then
68072: LD_VAR 0 3
68076: PPUSH
68077: CALL_OW 318
68081: IFFALSE 68092
// ComWalk ( un ) ;
68083: LD_VAR 0 3
68087: PPUSH
68088: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68092: LD_VAR 0 3
68096: PPUSH
68097: LD_INT 8
68099: PPUSH
68100: CALL_OW 336
// end ; 4 :
68104: GO 68210
68106: LD_INT 4
68108: DOUBLE
68109: EQUAL
68110: IFTRUE 68114
68112: GO 68188
68114: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68115: LD_ADDR_VAR 0 2
68119: PUSH
68120: LD_INT 22
68122: PUSH
68123: LD_OWVAR 2
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 30
68134: PUSH
68135: LD_INT 29
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PPUSH
68146: CALL_OW 69
68150: ST_TO_ADDR
// if not tmp then
68151: LD_VAR 0 2
68155: NOT
68156: IFFALSE 68160
// exit ;
68158: GO 68210
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68160: LD_VAR 0 2
68164: PUSH
68165: LD_INT 1
68167: ARRAY
68168: PPUSH
68169: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68173: LD_VAR 0 2
68177: PUSH
68178: LD_INT 1
68180: ARRAY
68181: PPUSH
68182: CALL_OW 65
// end ; 5 .. 7 :
68186: GO 68210
68188: LD_INT 5
68190: DOUBLE
68191: GREATEREQUAL
68192: IFFALSE 68200
68194: LD_INT 7
68196: DOUBLE
68197: LESSEQUAL
68198: IFTRUE 68202
68200: GO 68209
68202: POP
// StreamSibBomb ; end ;
68203: CALL 64447 0 0
68207: GO 68210
68209: POP
// end ;
68210: PPOPN 3
68212: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68213: LD_EXP 41
68217: PUSH
68218: LD_EXP 91
68222: AND
68223: IFFALSE 68379
68225: GO 68227
68227: DISABLE
68228: LD_INT 0
68230: PPUSH
68231: PPUSH
68232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68233: LD_ADDR_VAR 0 2
68237: PUSH
68238: LD_INT 81
68240: PUSH
68241: LD_OWVAR 2
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: LD_INT 21
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: PUSH
68263: LD_INT 21
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: LIST
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PPUSH
68282: CALL_OW 69
68286: ST_TO_ADDR
// if not tmp then
68287: LD_VAR 0 2
68291: NOT
68292: IFFALSE 68296
// exit ;
68294: GO 68379
// p := 0 ;
68296: LD_ADDR_VAR 0 3
68300: PUSH
68301: LD_INT 0
68303: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68304: LD_INT 35
68306: PPUSH
68307: CALL_OW 67
// p := p + 1 ;
68311: LD_ADDR_VAR 0 3
68315: PUSH
68316: LD_VAR 0 3
68320: PUSH
68321: LD_INT 1
68323: PLUS
68324: ST_TO_ADDR
// for i in tmp do
68325: LD_ADDR_VAR 0 1
68329: PUSH
68330: LD_VAR 0 2
68334: PUSH
68335: FOR_IN
68336: IFFALSE 68367
// if GetLives ( i ) < 1000 then
68338: LD_VAR 0 1
68342: PPUSH
68343: CALL_OW 256
68347: PUSH
68348: LD_INT 1000
68350: LESS
68351: IFFALSE 68365
// SetLives ( i , 1000 ) ;
68353: LD_VAR 0 1
68357: PPUSH
68358: LD_INT 1000
68360: PPUSH
68361: CALL_OW 234
68365: GO 68335
68367: POP
68368: POP
// until p > 20 ;
68369: LD_VAR 0 3
68373: PUSH
68374: LD_INT 20
68376: GREATER
68377: IFFALSE 68304
// end ;
68379: PPOPN 3
68381: END
// every 0 0$1 trigger StreamModeActive and sTime do
68382: LD_EXP 41
68386: PUSH
68387: LD_EXP 92
68391: AND
68392: IFFALSE 68427
68394: GO 68396
68396: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68397: LD_INT 28
68399: PPUSH
68400: LD_OWVAR 2
68404: PPUSH
68405: LD_INT 2
68407: PPUSH
68408: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68412: LD_INT 30
68414: PPUSH
68415: LD_OWVAR 2
68419: PPUSH
68420: LD_INT 2
68422: PPUSH
68423: CALL_OW 322
// end ;
68427: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68428: LD_EXP 41
68432: PUSH
68433: LD_EXP 93
68437: AND
68438: IFFALSE 68559
68440: GO 68442
68442: DISABLE
68443: LD_INT 0
68445: PPUSH
68446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68447: LD_ADDR_VAR 0 2
68451: PUSH
68452: LD_INT 22
68454: PUSH
68455: LD_OWVAR 2
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 21
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 3
68476: PUSH
68477: LD_INT 23
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: LIST
68495: PPUSH
68496: CALL_OW 69
68500: ST_TO_ADDR
// if not tmp then
68501: LD_VAR 0 2
68505: NOT
68506: IFFALSE 68510
// exit ;
68508: GO 68559
// for i in tmp do
68510: LD_ADDR_VAR 0 1
68514: PUSH
68515: LD_VAR 0 2
68519: PUSH
68520: FOR_IN
68521: IFFALSE 68557
// begin if Crawls ( i ) then
68523: LD_VAR 0 1
68527: PPUSH
68528: CALL_OW 318
68532: IFFALSE 68543
// ComWalk ( i ) ;
68534: LD_VAR 0 1
68538: PPUSH
68539: CALL_OW 138
// SetClass ( i , 2 ) ;
68543: LD_VAR 0 1
68547: PPUSH
68548: LD_INT 2
68550: PPUSH
68551: CALL_OW 336
// end ;
68555: GO 68520
68557: POP
68558: POP
// end ;
68559: PPOPN 2
68561: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68562: LD_EXP 41
68566: PUSH
68567: LD_EXP 94
68571: AND
68572: IFFALSE 68860
68574: GO 68576
68576: DISABLE
68577: LD_INT 0
68579: PPUSH
68580: PPUSH
68581: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68582: LD_OWVAR 2
68586: PPUSH
68587: LD_INT 9
68589: PPUSH
68590: LD_INT 1
68592: PPUSH
68593: LD_INT 1
68595: PPUSH
68596: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68600: LD_INT 9
68602: PPUSH
68603: LD_OWVAR 2
68607: PPUSH
68608: CALL_OW 343
// uc_side := 9 ;
68612: LD_ADDR_OWVAR 20
68616: PUSH
68617: LD_INT 9
68619: ST_TO_ADDR
// uc_nation := 2 ;
68620: LD_ADDR_OWVAR 21
68624: PUSH
68625: LD_INT 2
68627: ST_TO_ADDR
// hc_name := Dark Warrior ;
68628: LD_ADDR_OWVAR 26
68632: PUSH
68633: LD_STRING Dark Warrior
68635: ST_TO_ADDR
// hc_gallery :=  ;
68636: LD_ADDR_OWVAR 33
68640: PUSH
68641: LD_STRING 
68643: ST_TO_ADDR
// hc_noskilllimit := true ;
68644: LD_ADDR_OWVAR 76
68648: PUSH
68649: LD_INT 1
68651: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68652: LD_ADDR_OWVAR 31
68656: PUSH
68657: LD_INT 30
68659: PUSH
68660: LD_INT 30
68662: PUSH
68663: LD_INT 30
68665: PUSH
68666: LD_INT 30
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: ST_TO_ADDR
// un := CreateHuman ;
68675: LD_ADDR_VAR 0 3
68679: PUSH
68680: CALL_OW 44
68684: ST_TO_ADDR
// hc_noskilllimit := false ;
68685: LD_ADDR_OWVAR 76
68689: PUSH
68690: LD_INT 0
68692: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68693: LD_VAR 0 3
68697: PPUSH
68698: LD_INT 1
68700: PPUSH
68701: CALL_OW 51
// ToLua ( playRanger() ) ;
68705: LD_STRING playRanger()
68707: PPUSH
68708: CALL_OW 559
// p := 0 ;
68712: LD_ADDR_VAR 0 2
68716: PUSH
68717: LD_INT 0
68719: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68720: LD_INT 35
68722: PPUSH
68723: CALL_OW 67
// p := p + 1 ;
68727: LD_ADDR_VAR 0 2
68731: PUSH
68732: LD_VAR 0 2
68736: PUSH
68737: LD_INT 1
68739: PLUS
68740: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
68741: LD_VAR 0 3
68745: PPUSH
68746: CALL_OW 256
68750: PUSH
68751: LD_INT 1000
68753: LESS
68754: IFFALSE 68768
// SetLives ( un , 1000 ) ;
68756: LD_VAR 0 3
68760: PPUSH
68761: LD_INT 1000
68763: PPUSH
68764: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
68768: LD_VAR 0 3
68772: PPUSH
68773: LD_INT 81
68775: PUSH
68776: LD_OWVAR 2
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 91
68787: PUSH
68788: LD_VAR 0 3
68792: PUSH
68793: LD_INT 30
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PPUSH
68805: CALL_OW 69
68809: PPUSH
68810: LD_VAR 0 3
68814: PPUSH
68815: CALL_OW 74
68819: PPUSH
68820: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
68824: LD_VAR 0 2
68828: PUSH
68829: LD_INT 80
68831: GREATER
68832: PUSH
68833: LD_VAR 0 3
68837: PPUSH
68838: CALL_OW 301
68842: OR
68843: IFFALSE 68720
// if un then
68845: LD_VAR 0 3
68849: IFFALSE 68860
// RemoveUnit ( un ) ;
68851: LD_VAR 0 3
68855: PPUSH
68856: CALL_OW 64
// end ;
68860: PPOPN 3
68862: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
68863: LD_EXP 95
68867: IFFALSE 68983
68869: GO 68871
68871: DISABLE
68872: LD_INT 0
68874: PPUSH
68875: PPUSH
68876: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68877: LD_ADDR_VAR 0 2
68881: PUSH
68882: LD_INT 81
68884: PUSH
68885: LD_OWVAR 2
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: PUSH
68894: LD_INT 21
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PPUSH
68908: CALL_OW 69
68912: ST_TO_ADDR
// ToLua ( playComputer() ) ;
68913: LD_STRING playComputer()
68915: PPUSH
68916: CALL_OW 559
// if not tmp then
68920: LD_VAR 0 2
68924: NOT
68925: IFFALSE 68929
// exit ;
68927: GO 68983
// for i in tmp do
68929: LD_ADDR_VAR 0 1
68933: PUSH
68934: LD_VAR 0 2
68938: PUSH
68939: FOR_IN
68940: IFFALSE 68981
// for j := 1 to 4 do
68942: LD_ADDR_VAR 0 3
68946: PUSH
68947: DOUBLE
68948: LD_INT 1
68950: DEC
68951: ST_TO_ADDR
68952: LD_INT 4
68954: PUSH
68955: FOR_TO
68956: IFFALSE 68977
// SetSkill ( i , j , 10 ) ;
68958: LD_VAR 0 1
68962: PPUSH
68963: LD_VAR 0 3
68967: PPUSH
68968: LD_INT 10
68970: PPUSH
68971: CALL_OW 237
68975: GO 68955
68977: POP
68978: POP
68979: GO 68939
68981: POP
68982: POP
// end ;
68983: PPOPN 3
68985: END
// every 0 0$1 trigger s30 do var i , tmp ;
68986: LD_EXP 96
68990: IFFALSE 69059
68992: GO 68994
68994: DISABLE
68995: LD_INT 0
68997: PPUSH
68998: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68999: LD_ADDR_VAR 0 2
69003: PUSH
69004: LD_INT 22
69006: PUSH
69007: LD_OWVAR 2
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PPUSH
69016: CALL_OW 69
69020: ST_TO_ADDR
// if not tmp then
69021: LD_VAR 0 2
69025: NOT
69026: IFFALSE 69030
// exit ;
69028: GO 69059
// for i in tmp do
69030: LD_ADDR_VAR 0 1
69034: PUSH
69035: LD_VAR 0 2
69039: PUSH
69040: FOR_IN
69041: IFFALSE 69057
// SetLives ( i , 300 ) ;
69043: LD_VAR 0 1
69047: PPUSH
69048: LD_INT 300
69050: PPUSH
69051: CALL_OW 234
69055: GO 69040
69057: POP
69058: POP
// end ;
69059: PPOPN 2
69061: END
// every 0 0$1 trigger s60 do var i , tmp ;
69062: LD_EXP 97
69066: IFFALSE 69135
69068: GO 69070
69070: DISABLE
69071: LD_INT 0
69073: PPUSH
69074: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69075: LD_ADDR_VAR 0 2
69079: PUSH
69080: LD_INT 22
69082: PUSH
69083: LD_OWVAR 2
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PPUSH
69092: CALL_OW 69
69096: ST_TO_ADDR
// if not tmp then
69097: LD_VAR 0 2
69101: NOT
69102: IFFALSE 69106
// exit ;
69104: GO 69135
// for i in tmp do
69106: LD_ADDR_VAR 0 1
69110: PUSH
69111: LD_VAR 0 2
69115: PUSH
69116: FOR_IN
69117: IFFALSE 69133
// SetLives ( i , 600 ) ;
69119: LD_VAR 0 1
69123: PPUSH
69124: LD_INT 600
69126: PPUSH
69127: CALL_OW 234
69131: GO 69116
69133: POP
69134: POP
// end ;
69135: PPOPN 2
69137: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69138: LD_INT 0
69140: PPUSH
// case cmd of 301 :
69141: LD_VAR 0 1
69145: PUSH
69146: LD_INT 301
69148: DOUBLE
69149: EQUAL
69150: IFTRUE 69154
69152: GO 69186
69154: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69155: LD_VAR 0 6
69159: PPUSH
69160: LD_VAR 0 7
69164: PPUSH
69165: LD_VAR 0 8
69169: PPUSH
69170: LD_VAR 0 4
69174: PPUSH
69175: LD_VAR 0 5
69179: PPUSH
69180: CALL 70395 0 5
69184: GO 69307
69186: LD_INT 302
69188: DOUBLE
69189: EQUAL
69190: IFTRUE 69194
69192: GO 69231
69194: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69195: LD_VAR 0 6
69199: PPUSH
69200: LD_VAR 0 7
69204: PPUSH
69205: LD_VAR 0 8
69209: PPUSH
69210: LD_VAR 0 9
69214: PPUSH
69215: LD_VAR 0 4
69219: PPUSH
69220: LD_VAR 0 5
69224: PPUSH
69225: CALL 70486 0 6
69229: GO 69307
69231: LD_INT 303
69233: DOUBLE
69234: EQUAL
69235: IFTRUE 69239
69237: GO 69276
69239: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69240: LD_VAR 0 6
69244: PPUSH
69245: LD_VAR 0 7
69249: PPUSH
69250: LD_VAR 0 8
69254: PPUSH
69255: LD_VAR 0 9
69259: PPUSH
69260: LD_VAR 0 4
69264: PPUSH
69265: LD_VAR 0 5
69269: PPUSH
69270: CALL 69312 0 6
69274: GO 69307
69276: LD_INT 304
69278: DOUBLE
69279: EQUAL
69280: IFTRUE 69284
69282: GO 69306
69284: POP
// hHackTeleport ( unit , x , y ) ; end ;
69285: LD_VAR 0 2
69289: PPUSH
69290: LD_VAR 0 4
69294: PPUSH
69295: LD_VAR 0 5
69299: PPUSH
69300: CALL 71079 0 3
69304: GO 69307
69306: POP
// end ;
69307: LD_VAR 0 12
69311: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69312: LD_INT 0
69314: PPUSH
69315: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69316: LD_VAR 0 1
69320: PUSH
69321: LD_INT 1
69323: LESS
69324: PUSH
69325: LD_VAR 0 1
69329: PUSH
69330: LD_INT 3
69332: GREATER
69333: OR
69334: PUSH
69335: LD_VAR 0 5
69339: PPUSH
69340: LD_VAR 0 6
69344: PPUSH
69345: CALL_OW 428
69349: OR
69350: IFFALSE 69354
// exit ;
69352: GO 70082
// uc_side := your_side ;
69354: LD_ADDR_OWVAR 20
69358: PUSH
69359: LD_OWVAR 2
69363: ST_TO_ADDR
// uc_nation := nation ;
69364: LD_ADDR_OWVAR 21
69368: PUSH
69369: LD_VAR 0 1
69373: ST_TO_ADDR
// bc_level = 1 ;
69374: LD_ADDR_OWVAR 43
69378: PUSH
69379: LD_INT 1
69381: ST_TO_ADDR
// case btype of 1 :
69382: LD_VAR 0 2
69386: PUSH
69387: LD_INT 1
69389: DOUBLE
69390: EQUAL
69391: IFTRUE 69395
69393: GO 69406
69395: POP
// bc_type := b_depot ; 2 :
69396: LD_ADDR_OWVAR 42
69400: PUSH
69401: LD_INT 0
69403: ST_TO_ADDR
69404: GO 70026
69406: LD_INT 2
69408: DOUBLE
69409: EQUAL
69410: IFTRUE 69414
69412: GO 69425
69414: POP
// bc_type := b_warehouse ; 3 :
69415: LD_ADDR_OWVAR 42
69419: PUSH
69420: LD_INT 1
69422: ST_TO_ADDR
69423: GO 70026
69425: LD_INT 3
69427: DOUBLE
69428: EQUAL
69429: IFTRUE 69433
69431: GO 69444
69433: POP
// bc_type := b_lab ; 4 .. 9 :
69434: LD_ADDR_OWVAR 42
69438: PUSH
69439: LD_INT 6
69441: ST_TO_ADDR
69442: GO 70026
69444: LD_INT 4
69446: DOUBLE
69447: GREATEREQUAL
69448: IFFALSE 69456
69450: LD_INT 9
69452: DOUBLE
69453: LESSEQUAL
69454: IFTRUE 69458
69456: GO 69518
69458: POP
// begin bc_type := b_lab_half ;
69459: LD_ADDR_OWVAR 42
69463: PUSH
69464: LD_INT 7
69466: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69467: LD_ADDR_OWVAR 44
69471: PUSH
69472: LD_INT 10
69474: PUSH
69475: LD_INT 11
69477: PUSH
69478: LD_INT 12
69480: PUSH
69481: LD_INT 15
69483: PUSH
69484: LD_INT 14
69486: PUSH
69487: LD_INT 13
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: LIST
69497: PUSH
69498: LD_VAR 0 2
69502: PUSH
69503: LD_INT 3
69505: MINUS
69506: ARRAY
69507: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
69508: LD_ADDR_OWVAR 45
69512: PUSH
69513: LD_INT 9
69515: ST_TO_ADDR
// end ; 10 .. 13 :
69516: GO 70026
69518: LD_INT 10
69520: DOUBLE
69521: GREATEREQUAL
69522: IFFALSE 69530
69524: LD_INT 13
69526: DOUBLE
69527: LESSEQUAL
69528: IFTRUE 69532
69530: GO 69609
69532: POP
// begin bc_type := b_lab_full ;
69533: LD_ADDR_OWVAR 42
69537: PUSH
69538: LD_INT 8
69540: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69541: LD_ADDR_OWVAR 44
69545: PUSH
69546: LD_INT 10
69548: PUSH
69549: LD_INT 12
69551: PUSH
69552: LD_INT 14
69554: PUSH
69555: LD_INT 13
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: PUSH
69564: LD_VAR 0 2
69568: PUSH
69569: LD_INT 9
69571: MINUS
69572: ARRAY
69573: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69574: LD_ADDR_OWVAR 45
69578: PUSH
69579: LD_INT 11
69581: PUSH
69582: LD_INT 15
69584: PUSH
69585: LD_INT 12
69587: PUSH
69588: LD_INT 15
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: PUSH
69597: LD_VAR 0 2
69601: PUSH
69602: LD_INT 9
69604: MINUS
69605: ARRAY
69606: ST_TO_ADDR
// end ; 14 :
69607: GO 70026
69609: LD_INT 14
69611: DOUBLE
69612: EQUAL
69613: IFTRUE 69617
69615: GO 69628
69617: POP
// bc_type := b_workshop ; 15 :
69618: LD_ADDR_OWVAR 42
69622: PUSH
69623: LD_INT 2
69625: ST_TO_ADDR
69626: GO 70026
69628: LD_INT 15
69630: DOUBLE
69631: EQUAL
69632: IFTRUE 69636
69634: GO 69647
69636: POP
// bc_type := b_factory ; 16 :
69637: LD_ADDR_OWVAR 42
69641: PUSH
69642: LD_INT 3
69644: ST_TO_ADDR
69645: GO 70026
69647: LD_INT 16
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69655
69653: GO 69666
69655: POP
// bc_type := b_ext_gun ; 17 :
69656: LD_ADDR_OWVAR 42
69660: PUSH
69661: LD_INT 17
69663: ST_TO_ADDR
69664: GO 70026
69666: LD_INT 17
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69674
69672: GO 69702
69674: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69675: LD_ADDR_OWVAR 42
69679: PUSH
69680: LD_INT 19
69682: PUSH
69683: LD_INT 23
69685: PUSH
69686: LD_INT 19
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 1
69698: ARRAY
69699: ST_TO_ADDR
69700: GO 70026
69702: LD_INT 18
69704: DOUBLE
69705: EQUAL
69706: IFTRUE 69710
69708: GO 69721
69710: POP
// bc_type := b_ext_radar ; 19 :
69711: LD_ADDR_OWVAR 42
69715: PUSH
69716: LD_INT 20
69718: ST_TO_ADDR
69719: GO 70026
69721: LD_INT 19
69723: DOUBLE
69724: EQUAL
69725: IFTRUE 69729
69727: GO 69740
69729: POP
// bc_type := b_ext_radio ; 20 :
69730: LD_ADDR_OWVAR 42
69734: PUSH
69735: LD_INT 22
69737: ST_TO_ADDR
69738: GO 70026
69740: LD_INT 20
69742: DOUBLE
69743: EQUAL
69744: IFTRUE 69748
69746: GO 69759
69748: POP
// bc_type := b_ext_siberium ; 21 :
69749: LD_ADDR_OWVAR 42
69753: PUSH
69754: LD_INT 21
69756: ST_TO_ADDR
69757: GO 70026
69759: LD_INT 21
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69767
69765: GO 69778
69767: POP
// bc_type := b_ext_computer ; 22 :
69768: LD_ADDR_OWVAR 42
69772: PUSH
69773: LD_INT 24
69775: ST_TO_ADDR
69776: GO 70026
69778: LD_INT 22
69780: DOUBLE
69781: EQUAL
69782: IFTRUE 69786
69784: GO 69797
69786: POP
// bc_type := b_ext_track ; 23 :
69787: LD_ADDR_OWVAR 42
69791: PUSH
69792: LD_INT 16
69794: ST_TO_ADDR
69795: GO 70026
69797: LD_INT 23
69799: DOUBLE
69800: EQUAL
69801: IFTRUE 69805
69803: GO 69816
69805: POP
// bc_type := b_ext_laser ; 24 :
69806: LD_ADDR_OWVAR 42
69810: PUSH
69811: LD_INT 25
69813: ST_TO_ADDR
69814: GO 70026
69816: LD_INT 24
69818: DOUBLE
69819: EQUAL
69820: IFTRUE 69824
69822: GO 69835
69824: POP
// bc_type := b_control_tower ; 25 :
69825: LD_ADDR_OWVAR 42
69829: PUSH
69830: LD_INT 36
69832: ST_TO_ADDR
69833: GO 70026
69835: LD_INT 25
69837: DOUBLE
69838: EQUAL
69839: IFTRUE 69843
69841: GO 69854
69843: POP
// bc_type := b_breastwork ; 26 :
69844: LD_ADDR_OWVAR 42
69848: PUSH
69849: LD_INT 31
69851: ST_TO_ADDR
69852: GO 70026
69854: LD_INT 26
69856: DOUBLE
69857: EQUAL
69858: IFTRUE 69862
69860: GO 69873
69862: POP
// bc_type := b_bunker ; 27 :
69863: LD_ADDR_OWVAR 42
69867: PUSH
69868: LD_INT 32
69870: ST_TO_ADDR
69871: GO 70026
69873: LD_INT 27
69875: DOUBLE
69876: EQUAL
69877: IFTRUE 69881
69879: GO 69892
69881: POP
// bc_type := b_turret ; 28 :
69882: LD_ADDR_OWVAR 42
69886: PUSH
69887: LD_INT 33
69889: ST_TO_ADDR
69890: GO 70026
69892: LD_INT 28
69894: DOUBLE
69895: EQUAL
69896: IFTRUE 69900
69898: GO 69911
69900: POP
// bc_type := b_armoury ; 29 :
69901: LD_ADDR_OWVAR 42
69905: PUSH
69906: LD_INT 4
69908: ST_TO_ADDR
69909: GO 70026
69911: LD_INT 29
69913: DOUBLE
69914: EQUAL
69915: IFTRUE 69919
69917: GO 69930
69919: POP
// bc_type := b_barracks ; 30 :
69920: LD_ADDR_OWVAR 42
69924: PUSH
69925: LD_INT 5
69927: ST_TO_ADDR
69928: GO 70026
69930: LD_INT 30
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69938
69936: GO 69949
69938: POP
// bc_type := b_solar_power ; 31 :
69939: LD_ADDR_OWVAR 42
69943: PUSH
69944: LD_INT 27
69946: ST_TO_ADDR
69947: GO 70026
69949: LD_INT 31
69951: DOUBLE
69952: EQUAL
69953: IFTRUE 69957
69955: GO 69968
69957: POP
// bc_type := b_oil_power ; 32 :
69958: LD_ADDR_OWVAR 42
69962: PUSH
69963: LD_INT 26
69965: ST_TO_ADDR
69966: GO 70026
69968: LD_INT 32
69970: DOUBLE
69971: EQUAL
69972: IFTRUE 69976
69974: GO 69987
69976: POP
// bc_type := b_siberite_power ; 33 :
69977: LD_ADDR_OWVAR 42
69981: PUSH
69982: LD_INT 28
69984: ST_TO_ADDR
69985: GO 70026
69987: LD_INT 33
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 69995
69993: GO 70006
69995: POP
// bc_type := b_oil_mine ; 34 :
69996: LD_ADDR_OWVAR 42
70000: PUSH
70001: LD_INT 29
70003: ST_TO_ADDR
70004: GO 70026
70006: LD_INT 34
70008: DOUBLE
70009: EQUAL
70010: IFTRUE 70014
70012: GO 70025
70014: POP
// bc_type := b_siberite_mine ; end ;
70015: LD_ADDR_OWVAR 42
70019: PUSH
70020: LD_INT 30
70022: ST_TO_ADDR
70023: GO 70026
70025: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70026: LD_ADDR_VAR 0 8
70030: PUSH
70031: LD_VAR 0 5
70035: PPUSH
70036: LD_VAR 0 6
70040: PPUSH
70041: LD_VAR 0 3
70045: PPUSH
70046: CALL_OW 47
70050: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70051: LD_OWVAR 42
70055: PUSH
70056: LD_INT 32
70058: PUSH
70059: LD_INT 33
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: IN
70066: IFFALSE 70082
// PlaceWeaponTurret ( b , weapon ) ;
70068: LD_VAR 0 8
70072: PPUSH
70073: LD_VAR 0 4
70077: PPUSH
70078: CALL_OW 431
// end ;
70082: LD_VAR 0 7
70086: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70087: LD_INT 0
70089: PPUSH
70090: PPUSH
70091: PPUSH
70092: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70093: LD_ADDR_VAR 0 4
70097: PUSH
70098: LD_INT 22
70100: PUSH
70101: LD_OWVAR 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 30
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 30
70125: PUSH
70126: LD_INT 1
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: LIST
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PPUSH
70142: CALL_OW 69
70146: ST_TO_ADDR
// if not tmp then
70147: LD_VAR 0 4
70151: NOT
70152: IFFALSE 70156
// exit ;
70154: GO 70215
// for i in tmp do
70156: LD_ADDR_VAR 0 2
70160: PUSH
70161: LD_VAR 0 4
70165: PUSH
70166: FOR_IN
70167: IFFALSE 70213
// for j = 1 to 3 do
70169: LD_ADDR_VAR 0 3
70173: PUSH
70174: DOUBLE
70175: LD_INT 1
70177: DEC
70178: ST_TO_ADDR
70179: LD_INT 3
70181: PUSH
70182: FOR_TO
70183: IFFALSE 70209
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70185: LD_VAR 0 2
70189: PPUSH
70190: CALL_OW 274
70194: PPUSH
70195: LD_VAR 0 3
70199: PPUSH
70200: LD_INT 99999
70202: PPUSH
70203: CALL_OW 277
70207: GO 70182
70209: POP
70210: POP
70211: GO 70166
70213: POP
70214: POP
// end ;
70215: LD_VAR 0 1
70219: RET
// export function hHackSetLevel10 ; var i , j ; begin
70220: LD_INT 0
70222: PPUSH
70223: PPUSH
70224: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70225: LD_ADDR_VAR 0 2
70229: PUSH
70230: LD_INT 21
70232: PUSH
70233: LD_INT 1
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PPUSH
70240: CALL_OW 69
70244: PUSH
70245: FOR_IN
70246: IFFALSE 70298
// if IsSelected ( i ) then
70248: LD_VAR 0 2
70252: PPUSH
70253: CALL_OW 306
70257: IFFALSE 70296
// begin for j := 1 to 4 do
70259: LD_ADDR_VAR 0 3
70263: PUSH
70264: DOUBLE
70265: LD_INT 1
70267: DEC
70268: ST_TO_ADDR
70269: LD_INT 4
70271: PUSH
70272: FOR_TO
70273: IFFALSE 70294
// SetSkill ( i , j , 10 ) ;
70275: LD_VAR 0 2
70279: PPUSH
70280: LD_VAR 0 3
70284: PPUSH
70285: LD_INT 10
70287: PPUSH
70288: CALL_OW 237
70292: GO 70272
70294: POP
70295: POP
// end ;
70296: GO 70245
70298: POP
70299: POP
// end ;
70300: LD_VAR 0 1
70304: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70305: LD_INT 0
70307: PPUSH
70308: PPUSH
70309: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70310: LD_ADDR_VAR 0 2
70314: PUSH
70315: LD_INT 22
70317: PUSH
70318: LD_OWVAR 2
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 21
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PPUSH
70341: CALL_OW 69
70345: PUSH
70346: FOR_IN
70347: IFFALSE 70388
// begin for j := 1 to 4 do
70349: LD_ADDR_VAR 0 3
70353: PUSH
70354: DOUBLE
70355: LD_INT 1
70357: DEC
70358: ST_TO_ADDR
70359: LD_INT 4
70361: PUSH
70362: FOR_TO
70363: IFFALSE 70384
// SetSkill ( i , j , 10 ) ;
70365: LD_VAR 0 2
70369: PPUSH
70370: LD_VAR 0 3
70374: PPUSH
70375: LD_INT 10
70377: PPUSH
70378: CALL_OW 237
70382: GO 70362
70384: POP
70385: POP
// end ;
70386: GO 70346
70388: POP
70389: POP
// end ;
70390: LD_VAR 0 1
70394: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70395: LD_INT 0
70397: PPUSH
// uc_side := your_side ;
70398: LD_ADDR_OWVAR 20
70402: PUSH
70403: LD_OWVAR 2
70407: ST_TO_ADDR
// uc_nation := nation ;
70408: LD_ADDR_OWVAR 21
70412: PUSH
70413: LD_VAR 0 1
70417: ST_TO_ADDR
// InitHc ;
70418: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70422: LD_INT 0
70424: PPUSH
70425: LD_VAR 0 2
70429: PPUSH
70430: LD_VAR 0 3
70434: PPUSH
70435: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70439: LD_VAR 0 4
70443: PPUSH
70444: LD_VAR 0 5
70448: PPUSH
70449: CALL_OW 428
70453: PUSH
70454: LD_INT 0
70456: EQUAL
70457: IFFALSE 70481
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70459: CALL_OW 44
70463: PPUSH
70464: LD_VAR 0 4
70468: PPUSH
70469: LD_VAR 0 5
70473: PPUSH
70474: LD_INT 1
70476: PPUSH
70477: CALL_OW 48
// end ;
70481: LD_VAR 0 6
70485: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70486: LD_INT 0
70488: PPUSH
70489: PPUSH
// uc_side := your_side ;
70490: LD_ADDR_OWVAR 20
70494: PUSH
70495: LD_OWVAR 2
70499: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70500: LD_VAR 0 1
70504: PUSH
70505: LD_INT 1
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: LD_INT 3
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: LD_INT 5
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: IN
70527: IFFALSE 70539
// uc_nation := nation_american else
70529: LD_ADDR_OWVAR 21
70533: PUSH
70534: LD_INT 1
70536: ST_TO_ADDR
70537: GO 70582
// if chassis in [ 11 , 12 , 13 , 14 ] then
70539: LD_VAR 0 1
70543: PUSH
70544: LD_INT 11
70546: PUSH
70547: LD_INT 12
70549: PUSH
70550: LD_INT 13
70552: PUSH
70553: LD_INT 14
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: IN
70562: IFFALSE 70574
// uc_nation := nation_arabian else
70564: LD_ADDR_OWVAR 21
70568: PUSH
70569: LD_INT 2
70571: ST_TO_ADDR
70572: GO 70582
// uc_nation := nation_russian ;
70574: LD_ADDR_OWVAR 21
70578: PUSH
70579: LD_INT 3
70581: ST_TO_ADDR
// vc_chassis := chassis ;
70582: LD_ADDR_OWVAR 37
70586: PUSH
70587: LD_VAR 0 1
70591: ST_TO_ADDR
// vc_engine := engine ;
70592: LD_ADDR_OWVAR 39
70596: PUSH
70597: LD_VAR 0 2
70601: ST_TO_ADDR
// vc_control := control ;
70602: LD_ADDR_OWVAR 38
70606: PUSH
70607: LD_VAR 0 3
70611: ST_TO_ADDR
// vc_weapon := weapon ;
70612: LD_ADDR_OWVAR 40
70616: PUSH
70617: LD_VAR 0 4
70621: ST_TO_ADDR
// un := CreateVehicle ;
70622: LD_ADDR_VAR 0 8
70626: PUSH
70627: CALL_OW 45
70631: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70632: LD_VAR 0 8
70636: PPUSH
70637: LD_INT 0
70639: PPUSH
70640: LD_INT 5
70642: PPUSH
70643: CALL_OW 12
70647: PPUSH
70648: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70652: LD_VAR 0 8
70656: PPUSH
70657: LD_VAR 0 5
70661: PPUSH
70662: LD_VAR 0 6
70666: PPUSH
70667: LD_INT 1
70669: PPUSH
70670: CALL_OW 48
// end ;
70674: LD_VAR 0 7
70678: RET
// export hInvincible ; every 1 do
70679: GO 70681
70681: DISABLE
// hInvincible := [ ] ;
70682: LD_ADDR_EXP 98
70686: PUSH
70687: EMPTY
70688: ST_TO_ADDR
70689: END
// every 10 do var i ;
70690: GO 70692
70692: DISABLE
70693: LD_INT 0
70695: PPUSH
// begin enable ;
70696: ENABLE
// if not hInvincible then
70697: LD_EXP 98
70701: NOT
70702: IFFALSE 70706
// exit ;
70704: GO 70750
// for i in hInvincible do
70706: LD_ADDR_VAR 0 1
70710: PUSH
70711: LD_EXP 98
70715: PUSH
70716: FOR_IN
70717: IFFALSE 70748
// if GetLives ( i ) < 1000 then
70719: LD_VAR 0 1
70723: PPUSH
70724: CALL_OW 256
70728: PUSH
70729: LD_INT 1000
70731: LESS
70732: IFFALSE 70746
// SetLives ( i , 1000 ) ;
70734: LD_VAR 0 1
70738: PPUSH
70739: LD_INT 1000
70741: PPUSH
70742: CALL_OW 234
70746: GO 70716
70748: POP
70749: POP
// end ;
70750: PPOPN 1
70752: END
// export function hHackInvincible ; var i ; begin
70753: LD_INT 0
70755: PPUSH
70756: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
70757: LD_ADDR_VAR 0 2
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: LD_INT 21
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 21
70777: PUSH
70778: LD_INT 2
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: PUSH
70795: FOR_IN
70796: IFFALSE 70857
// if IsSelected ( i ) then
70798: LD_VAR 0 2
70802: PPUSH
70803: CALL_OW 306
70807: IFFALSE 70855
// begin if i in hInvincible then
70809: LD_VAR 0 2
70813: PUSH
70814: LD_EXP 98
70818: IN
70819: IFFALSE 70839
// hInvincible := hInvincible diff i else
70821: LD_ADDR_EXP 98
70825: PUSH
70826: LD_EXP 98
70830: PUSH
70831: LD_VAR 0 2
70835: DIFF
70836: ST_TO_ADDR
70837: GO 70855
// hInvincible := hInvincible union i ;
70839: LD_ADDR_EXP 98
70843: PUSH
70844: LD_EXP 98
70848: PUSH
70849: LD_VAR 0 2
70853: UNION
70854: ST_TO_ADDR
// end ;
70855: GO 70795
70857: POP
70858: POP
// end ;
70859: LD_VAR 0 1
70863: RET
// export function hHackInvisible ; var i , j ; begin
70864: LD_INT 0
70866: PPUSH
70867: PPUSH
70868: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70869: LD_ADDR_VAR 0 2
70873: PUSH
70874: LD_INT 21
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PPUSH
70884: CALL_OW 69
70888: PUSH
70889: FOR_IN
70890: IFFALSE 70914
// if IsSelected ( i ) then
70892: LD_VAR 0 2
70896: PPUSH
70897: CALL_OW 306
70901: IFFALSE 70912
// ComForceInvisible ( i ) ;
70903: LD_VAR 0 2
70907: PPUSH
70908: CALL_OW 496
70912: GO 70889
70914: POP
70915: POP
// end ;
70916: LD_VAR 0 1
70920: RET
// export function hHackChangeYourSide ; begin
70921: LD_INT 0
70923: PPUSH
// if your_side = 8 then
70924: LD_OWVAR 2
70928: PUSH
70929: LD_INT 8
70931: EQUAL
70932: IFFALSE 70944
// your_side := 0 else
70934: LD_ADDR_OWVAR 2
70938: PUSH
70939: LD_INT 0
70941: ST_TO_ADDR
70942: GO 70958
// your_side := your_side + 1 ;
70944: LD_ADDR_OWVAR 2
70948: PUSH
70949: LD_OWVAR 2
70953: PUSH
70954: LD_INT 1
70956: PLUS
70957: ST_TO_ADDR
// end ;
70958: LD_VAR 0 1
70962: RET
// export function hHackChangeUnitSide ; var i , j ; begin
70963: LD_INT 0
70965: PPUSH
70966: PPUSH
70967: PPUSH
// for i in all_units do
70968: LD_ADDR_VAR 0 2
70972: PUSH
70973: LD_OWVAR 3
70977: PUSH
70978: FOR_IN
70979: IFFALSE 71057
// if IsSelected ( i ) then
70981: LD_VAR 0 2
70985: PPUSH
70986: CALL_OW 306
70990: IFFALSE 71055
// begin j := GetSide ( i ) ;
70992: LD_ADDR_VAR 0 3
70996: PUSH
70997: LD_VAR 0 2
71001: PPUSH
71002: CALL_OW 255
71006: ST_TO_ADDR
// if j = 8 then
71007: LD_VAR 0 3
71011: PUSH
71012: LD_INT 8
71014: EQUAL
71015: IFFALSE 71027
// j := 0 else
71017: LD_ADDR_VAR 0 3
71021: PUSH
71022: LD_INT 0
71024: ST_TO_ADDR
71025: GO 71041
// j := j + 1 ;
71027: LD_ADDR_VAR 0 3
71031: PUSH
71032: LD_VAR 0 3
71036: PUSH
71037: LD_INT 1
71039: PLUS
71040: ST_TO_ADDR
// SetSide ( i , j ) ;
71041: LD_VAR 0 2
71045: PPUSH
71046: LD_VAR 0 3
71050: PPUSH
71051: CALL_OW 235
// end ;
71055: GO 70978
71057: POP
71058: POP
// end ;
71059: LD_VAR 0 1
71063: RET
// export function hHackFog ; begin
71064: LD_INT 0
71066: PPUSH
// FogOff ( true ) ;
71067: LD_INT 1
71069: PPUSH
71070: CALL_OW 344
// end ;
71074: LD_VAR 0 1
71078: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71079: LD_INT 0
71081: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71082: LD_VAR 0 1
71086: PPUSH
71087: LD_VAR 0 2
71091: PPUSH
71092: LD_VAR 0 3
71096: PPUSH
71097: LD_INT 1
71099: PPUSH
71100: LD_INT 1
71102: PPUSH
71103: CALL_OW 483
// CenterOnXY ( x , y ) ;
71107: LD_VAR 0 2
71111: PPUSH
71112: LD_VAR 0 3
71116: PPUSH
71117: CALL_OW 84
// end ;
71121: LD_VAR 0 4
71125: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
71126: LD_INT 0
71128: PPUSH
71129: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
71130: LD_VAR 0 1
71134: NOT
71135: PUSH
71136: LD_VAR 0 2
71140: PPUSH
71141: LD_VAR 0 3
71145: PPUSH
71146: CALL_OW 488
71150: NOT
71151: OR
71152: PUSH
71153: LD_VAR 0 1
71157: PPUSH
71158: CALL_OW 266
71162: PUSH
71163: LD_INT 3
71165: NONEQUAL
71166: PUSH
71167: LD_VAR 0 1
71171: PPUSH
71172: CALL_OW 247
71176: PUSH
71177: LD_INT 1
71179: EQUAL
71180: NOT
71181: AND
71182: OR
71183: IFFALSE 71187
// exit ;
71185: GO 71336
// if GetType ( factory ) = unit_human then
71187: LD_VAR 0 1
71191: PPUSH
71192: CALL_OW 247
71196: PUSH
71197: LD_INT 1
71199: EQUAL
71200: IFFALSE 71217
// factory := IsInUnit ( factory ) ;
71202: LD_ADDR_VAR 0 1
71206: PUSH
71207: LD_VAR 0 1
71211: PPUSH
71212: CALL_OW 310
71216: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
71217: LD_VAR 0 1
71221: PPUSH
71222: CALL_OW 266
71226: PUSH
71227: LD_INT 3
71229: NONEQUAL
71230: IFFALSE 71234
// exit ;
71232: GO 71336
// if HexInfo ( x , y ) = factory then
71234: LD_VAR 0 2
71238: PPUSH
71239: LD_VAR 0 3
71243: PPUSH
71244: CALL_OW 428
71248: PUSH
71249: LD_VAR 0 1
71253: EQUAL
71254: IFFALSE 71281
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
71256: LD_ADDR_EXP 99
71260: PUSH
71261: LD_EXP 99
71265: PPUSH
71266: LD_VAR 0 1
71270: PPUSH
71271: LD_INT 0
71273: PPUSH
71274: CALL_OW 1
71278: ST_TO_ADDR
71279: GO 71332
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
71281: LD_ADDR_EXP 99
71285: PUSH
71286: LD_EXP 99
71290: PPUSH
71291: LD_VAR 0 1
71295: PPUSH
71296: LD_VAR 0 1
71300: PPUSH
71301: CALL_OW 255
71305: PUSH
71306: LD_VAR 0 1
71310: PUSH
71311: LD_VAR 0 2
71315: PUSH
71316: LD_VAR 0 3
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: LIST
71325: LIST
71326: PPUSH
71327: CALL_OW 1
71331: ST_TO_ADDR
// UpdateFactoryWaypoints ;
71332: CALL 71341 0 0
// end ;
71336: LD_VAR 0 4
71340: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
71341: LD_INT 0
71343: PPUSH
71344: PPUSH
71345: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
71346: LD_STRING resetFactoryWaypoint();
71348: PPUSH
71349: CALL_OW 559
// if factoryWaypoints then
71353: LD_EXP 99
71357: IFFALSE 71483
// begin list := PrepareArray ( factoryWaypoints ) ;
71359: LD_ADDR_VAR 0 3
71363: PUSH
71364: LD_EXP 99
71368: PPUSH
71369: CALL 55296 0 1
71373: ST_TO_ADDR
// for i := 1 to list do
71374: LD_ADDR_VAR 0 2
71378: PUSH
71379: DOUBLE
71380: LD_INT 1
71382: DEC
71383: ST_TO_ADDR
71384: LD_VAR 0 3
71388: PUSH
71389: FOR_TO
71390: IFFALSE 71481
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71392: LD_STRING setFactoryWaypointXY(
71394: PUSH
71395: LD_VAR 0 3
71399: PUSH
71400: LD_VAR 0 2
71404: ARRAY
71405: PUSH
71406: LD_INT 1
71408: ARRAY
71409: STR
71410: PUSH
71411: LD_STRING ,
71413: STR
71414: PUSH
71415: LD_VAR 0 3
71419: PUSH
71420: LD_VAR 0 2
71424: ARRAY
71425: PUSH
71426: LD_INT 2
71428: ARRAY
71429: STR
71430: PUSH
71431: LD_STRING ,
71433: STR
71434: PUSH
71435: LD_VAR 0 3
71439: PUSH
71440: LD_VAR 0 2
71444: ARRAY
71445: PUSH
71446: LD_INT 3
71448: ARRAY
71449: STR
71450: PUSH
71451: LD_STRING ,
71453: STR
71454: PUSH
71455: LD_VAR 0 3
71459: PUSH
71460: LD_VAR 0 2
71464: ARRAY
71465: PUSH
71466: LD_INT 4
71468: ARRAY
71469: STR
71470: PUSH
71471: LD_STRING )
71473: STR
71474: PPUSH
71475: CALL_OW 559
71479: GO 71389
71481: POP
71482: POP
// end ; end ;
71483: LD_VAR 0 1
71487: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
71488: LD_INT 0
71490: PPUSH
// if HexInfo ( x , y ) = warehouse then
71491: LD_VAR 0 2
71495: PPUSH
71496: LD_VAR 0 3
71500: PPUSH
71501: CALL_OW 428
71505: PUSH
71506: LD_VAR 0 1
71510: EQUAL
71511: IFFALSE 71538
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
71513: LD_ADDR_EXP 100
71517: PUSH
71518: LD_EXP 100
71522: PPUSH
71523: LD_VAR 0 1
71527: PPUSH
71528: LD_INT 0
71530: PPUSH
71531: CALL_OW 1
71535: ST_TO_ADDR
71536: GO 71589
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
71538: LD_ADDR_EXP 100
71542: PUSH
71543: LD_EXP 100
71547: PPUSH
71548: LD_VAR 0 1
71552: PPUSH
71553: LD_VAR 0 1
71557: PPUSH
71558: CALL_OW 255
71562: PUSH
71563: LD_VAR 0 1
71567: PUSH
71568: LD_VAR 0 2
71572: PUSH
71573: LD_VAR 0 3
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: PPUSH
71584: CALL_OW 1
71588: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
71589: CALL 71598 0 0
// end ;
71593: LD_VAR 0 4
71597: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
71598: LD_INT 0
71600: PPUSH
71601: PPUSH
71602: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
71603: LD_STRING resetWarehouseGatheringPoints();
71605: PPUSH
71606: CALL_OW 559
// if warehouseGatheringPoints then
71610: LD_EXP 100
71614: IFFALSE 71740
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: LD_EXP 100
71625: PPUSH
71626: CALL 55296 0 1
71630: ST_TO_ADDR
// for i := 1 to list do
71631: LD_ADDR_VAR 0 2
71635: PUSH
71636: DOUBLE
71637: LD_INT 1
71639: DEC
71640: ST_TO_ADDR
71641: LD_VAR 0 3
71645: PUSH
71646: FOR_TO
71647: IFFALSE 71738
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
71649: LD_STRING setWarehouseGatheringPointXY(
71651: PUSH
71652: LD_VAR 0 3
71656: PUSH
71657: LD_VAR 0 2
71661: ARRAY
71662: PUSH
71663: LD_INT 1
71665: ARRAY
71666: STR
71667: PUSH
71668: LD_STRING ,
71670: STR
71671: PUSH
71672: LD_VAR 0 3
71676: PUSH
71677: LD_VAR 0 2
71681: ARRAY
71682: PUSH
71683: LD_INT 2
71685: ARRAY
71686: STR
71687: PUSH
71688: LD_STRING ,
71690: STR
71691: PUSH
71692: LD_VAR 0 3
71696: PUSH
71697: LD_VAR 0 2
71701: ARRAY
71702: PUSH
71703: LD_INT 3
71705: ARRAY
71706: STR
71707: PUSH
71708: LD_STRING ,
71710: STR
71711: PUSH
71712: LD_VAR 0 3
71716: PUSH
71717: LD_VAR 0 2
71721: ARRAY
71722: PUSH
71723: LD_INT 4
71725: ARRAY
71726: STR
71727: PUSH
71728: LD_STRING )
71730: STR
71731: PPUSH
71732: CALL_OW 559
71736: GO 71646
71738: POP
71739: POP
// end ; end ;
71740: LD_VAR 0 1
71744: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
71745: LD_EXP 100
71749: IFFALSE 72434
71751: GO 71753
71753: DISABLE
71754: LD_INT 0
71756: PPUSH
71757: PPUSH
71758: PPUSH
71759: PPUSH
71760: PPUSH
71761: PPUSH
71762: PPUSH
71763: PPUSH
71764: PPUSH
// begin enable ;
71765: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
71766: LD_ADDR_VAR 0 3
71770: PUSH
71771: LD_EXP 100
71775: PPUSH
71776: CALL 55296 0 1
71780: ST_TO_ADDR
// if not list then
71781: LD_VAR 0 3
71785: NOT
71786: IFFALSE 71790
// exit ;
71788: GO 72434
// for i := 1 to list do
71790: LD_ADDR_VAR 0 1
71794: PUSH
71795: DOUBLE
71796: LD_INT 1
71798: DEC
71799: ST_TO_ADDR
71800: LD_VAR 0 3
71804: PUSH
71805: FOR_TO
71806: IFFALSE 72432
// begin depot := list [ i ] [ 2 ] ;
71808: LD_ADDR_VAR 0 8
71812: PUSH
71813: LD_VAR 0 3
71817: PUSH
71818: LD_VAR 0 1
71822: ARRAY
71823: PUSH
71824: LD_INT 2
71826: ARRAY
71827: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
71828: LD_ADDR_VAR 0 5
71832: PUSH
71833: LD_VAR 0 3
71837: PUSH
71838: LD_VAR 0 1
71842: ARRAY
71843: PUSH
71844: LD_INT 1
71846: ARRAY
71847: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
71848: LD_VAR 0 8
71852: PPUSH
71853: CALL_OW 301
71857: PUSH
71858: LD_VAR 0 5
71862: PUSH
71863: LD_VAR 0 8
71867: PPUSH
71868: CALL_OW 255
71872: NONEQUAL
71873: OR
71874: IFFALSE 71903
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
71876: LD_ADDR_EXP 100
71880: PUSH
71881: LD_EXP 100
71885: PPUSH
71886: LD_VAR 0 8
71890: PPUSH
71891: LD_INT 0
71893: PPUSH
71894: CALL_OW 1
71898: ST_TO_ADDR
// exit ;
71899: POP
71900: POP
71901: GO 72434
// end ; x := list [ i ] [ 3 ] ;
71903: LD_ADDR_VAR 0 6
71907: PUSH
71908: LD_VAR 0 3
71912: PUSH
71913: LD_VAR 0 1
71917: ARRAY
71918: PUSH
71919: LD_INT 3
71921: ARRAY
71922: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
71923: LD_ADDR_VAR 0 7
71927: PUSH
71928: LD_VAR 0 3
71932: PUSH
71933: LD_VAR 0 1
71937: ARRAY
71938: PUSH
71939: LD_INT 4
71941: ARRAY
71942: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
71943: LD_ADDR_VAR 0 9
71947: PUSH
71948: LD_VAR 0 6
71952: PPUSH
71953: LD_VAR 0 7
71957: PPUSH
71958: LD_INT 16
71960: PPUSH
71961: CALL 53880 0 3
71965: ST_TO_ADDR
// if not cratesNearbyPoint then
71966: LD_VAR 0 9
71970: NOT
71971: IFFALSE 71977
// exit ;
71973: POP
71974: POP
71975: GO 72434
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
71977: LD_ADDR_VAR 0 4
71981: PUSH
71982: LD_INT 22
71984: PUSH
71985: LD_VAR 0 5
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 3
71996: PUSH
71997: LD_INT 60
71999: PUSH
72000: EMPTY
72001: LIST
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 91
72009: PUSH
72010: LD_VAR 0 8
72014: PUSH
72015: LD_INT 6
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 2
72025: PUSH
72026: LD_INT 25
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 25
72038: PUSH
72039: LD_INT 16
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: LIST
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: LIST
72055: LIST
72056: PPUSH
72057: CALL_OW 69
72061: PUSH
72062: LD_VAR 0 8
72066: PPUSH
72067: CALL_OW 313
72071: PPUSH
72072: LD_INT 3
72074: PUSH
72075: LD_INT 60
72077: PUSH
72078: EMPTY
72079: LIST
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 2
72087: PUSH
72088: LD_INT 25
72090: PUSH
72091: LD_INT 2
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 25
72100: PUSH
72101: LD_INT 16
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: LIST
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PPUSH
72117: CALL_OW 72
72121: UNION
72122: ST_TO_ADDR
// if tmp then
72123: LD_VAR 0 4
72127: IFFALSE 72207
// begin tmp := ShrinkArray ( tmp , 3 ) ;
72129: LD_ADDR_VAR 0 4
72133: PUSH
72134: LD_VAR 0 4
72138: PPUSH
72139: LD_INT 3
72141: PPUSH
72142: CALL 51849 0 2
72146: ST_TO_ADDR
// for j in tmp do
72147: LD_ADDR_VAR 0 2
72151: PUSH
72152: LD_VAR 0 4
72156: PUSH
72157: FOR_IN
72158: IFFALSE 72201
// begin if IsInUnit ( j ) then
72160: LD_VAR 0 2
72164: PPUSH
72165: CALL_OW 310
72169: IFFALSE 72180
// ComExit ( j ) ;
72171: LD_VAR 0 2
72175: PPUSH
72176: CALL 51932 0 1
// AddComCollect ( j , x , y ) ;
72180: LD_VAR 0 2
72184: PPUSH
72185: LD_VAR 0 6
72189: PPUSH
72190: LD_VAR 0 7
72194: PPUSH
72195: CALL_OW 177
// end ;
72199: GO 72157
72201: POP
72202: POP
// exit ;
72203: POP
72204: POP
72205: GO 72434
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
72207: LD_ADDR_VAR 0 4
72211: PUSH
72212: LD_INT 22
72214: PUSH
72215: LD_VAR 0 5
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 91
72226: PUSH
72227: LD_VAR 0 8
72231: PUSH
72232: LD_INT 8
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 2
72242: PUSH
72243: LD_INT 34
72245: PUSH
72246: LD_INT 12
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 34
72255: PUSH
72256: LD_INT 51
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 34
72265: PUSH
72266: LD_INT 32
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 34
72275: PUSH
72276: LD_INT 89
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: LIST
72294: PPUSH
72295: CALL_OW 69
72299: ST_TO_ADDR
// if tmp then
72300: LD_VAR 0 4
72304: IFFALSE 72430
// begin for j in tmp do
72306: LD_ADDR_VAR 0 2
72310: PUSH
72311: LD_VAR 0 4
72315: PUSH
72316: FOR_IN
72317: IFFALSE 72428
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
72319: LD_VAR 0 2
72323: PPUSH
72324: CALL_OW 262
72328: PUSH
72329: LD_INT 3
72331: EQUAL
72332: PUSH
72333: LD_VAR 0 2
72337: PPUSH
72338: CALL_OW 261
72342: PUSH
72343: LD_INT 20
72345: GREATER
72346: OR
72347: PUSH
72348: LD_VAR 0 2
72352: PPUSH
72353: CALL_OW 314
72357: NOT
72358: AND
72359: PUSH
72360: LD_VAR 0 2
72364: PPUSH
72365: CALL_OW 263
72369: PUSH
72370: LD_INT 1
72372: NONEQUAL
72373: PUSH
72374: LD_VAR 0 2
72378: PPUSH
72379: CALL_OW 311
72383: OR
72384: AND
72385: IFFALSE 72426
// begin ComCollect ( j , x , y ) ;
72387: LD_VAR 0 2
72391: PPUSH
72392: LD_VAR 0 6
72396: PPUSH
72397: LD_VAR 0 7
72401: PPUSH
72402: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
72406: LD_VAR 0 2
72410: PPUSH
72411: LD_VAR 0 8
72415: PPUSH
72416: CALL_OW 172
// exit ;
72420: POP
72421: POP
72422: POP
72423: POP
72424: GO 72434
// end ;
72426: GO 72316
72428: POP
72429: POP
// end ; end ;
72430: GO 71805
72432: POP
72433: POP
// end ; end_of_file
72434: PPOPN 9
72436: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
72437: LD_INT 0
72439: PPUSH
72440: PPUSH
72441: PPUSH
72442: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
72443: LD_VAR 0 1
72447: PPUSH
72448: CALL_OW 264
72452: PUSH
72453: LD_INT 91
72455: EQUAL
72456: IFFALSE 72528
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
72458: LD_INT 68
72460: PPUSH
72461: LD_VAR 0 1
72465: PPUSH
72466: CALL_OW 255
72470: PPUSH
72471: CALL_OW 321
72475: PUSH
72476: LD_INT 2
72478: EQUAL
72479: IFFALSE 72491
// eff := 70 else
72481: LD_ADDR_VAR 0 4
72485: PUSH
72486: LD_INT 70
72488: ST_TO_ADDR
72489: GO 72499
// eff := 30 ;
72491: LD_ADDR_VAR 0 4
72495: PUSH
72496: LD_INT 30
72498: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
72499: LD_VAR 0 1
72503: PPUSH
72504: CALL_OW 250
72508: PPUSH
72509: LD_VAR 0 1
72513: PPUSH
72514: CALL_OW 251
72518: PPUSH
72519: LD_VAR 0 4
72523: PPUSH
72524: CALL_OW 495
// end ; end ;
72528: LD_VAR 0 2
72532: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
72533: LD_INT 0
72535: PPUSH
// end ;
72536: LD_VAR 0 4
72540: RET
// export function SOS_Command ( cmd ) ; begin
72541: LD_INT 0
72543: PPUSH
// end ;
72544: LD_VAR 0 2
72548: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
72549: LD_INT 0
72551: PPUSH
// end ;
72552: LD_VAR 0 6
72556: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
72557: LD_INT 0
72559: PPUSH
72560: PPUSH
// if not vehicle or not factory then
72561: LD_VAR 0 1
72565: NOT
72566: PUSH
72567: LD_VAR 0 2
72571: NOT
72572: OR
72573: IFFALSE 72577
// exit ;
72575: GO 72808
// if factoryWaypoints >= factory then
72577: LD_EXP 99
72581: PUSH
72582: LD_VAR 0 2
72586: GREATEREQUAL
72587: IFFALSE 72808
// if factoryWaypoints [ factory ] then
72589: LD_EXP 99
72593: PUSH
72594: LD_VAR 0 2
72598: ARRAY
72599: IFFALSE 72808
// begin if GetControl ( vehicle ) = control_manual then
72601: LD_VAR 0 1
72605: PPUSH
72606: CALL_OW 263
72610: PUSH
72611: LD_INT 1
72613: EQUAL
72614: IFFALSE 72695
// begin driver := IsDrivenBy ( vehicle ) ;
72616: LD_ADDR_VAR 0 4
72620: PUSH
72621: LD_VAR 0 1
72625: PPUSH
72626: CALL_OW 311
72630: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72631: LD_VAR 0 4
72635: PPUSH
72636: LD_EXP 99
72640: PUSH
72641: LD_VAR 0 2
72645: ARRAY
72646: PUSH
72647: LD_INT 3
72649: ARRAY
72650: PPUSH
72651: LD_EXP 99
72655: PUSH
72656: LD_VAR 0 2
72660: ARRAY
72661: PUSH
72662: LD_INT 4
72664: ARRAY
72665: PPUSH
72666: CALL_OW 171
// AddComExitVehicle ( driver ) ;
72670: LD_VAR 0 4
72674: PPUSH
72675: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
72679: LD_VAR 0 4
72683: PPUSH
72684: LD_VAR 0 2
72688: PPUSH
72689: CALL_OW 180
// end else
72693: GO 72808
// if GetControl ( vehicle ) = control_remote then
72695: LD_VAR 0 1
72699: PPUSH
72700: CALL_OW 263
72704: PUSH
72705: LD_INT 2
72707: EQUAL
72708: IFFALSE 72769
// begin wait ( 0 0$2 ) ;
72710: LD_INT 70
72712: PPUSH
72713: CALL_OW 67
// if Connect ( vehicle ) then
72717: LD_VAR 0 1
72721: PPUSH
72722: CALL 22151 0 1
72726: IFFALSE 72767
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72728: LD_VAR 0 1
72732: PPUSH
72733: LD_EXP 99
72737: PUSH
72738: LD_VAR 0 2
72742: ARRAY
72743: PUSH
72744: LD_INT 3
72746: ARRAY
72747: PPUSH
72748: LD_EXP 99
72752: PUSH
72753: LD_VAR 0 2
72757: ARRAY
72758: PUSH
72759: LD_INT 4
72761: ARRAY
72762: PPUSH
72763: CALL_OW 171
// end else
72767: GO 72808
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72769: LD_VAR 0 1
72773: PPUSH
72774: LD_EXP 99
72778: PUSH
72779: LD_VAR 0 2
72783: ARRAY
72784: PUSH
72785: LD_INT 3
72787: ARRAY
72788: PPUSH
72789: LD_EXP 99
72793: PUSH
72794: LD_VAR 0 2
72798: ARRAY
72799: PUSH
72800: LD_INT 4
72802: ARRAY
72803: PPUSH
72804: CALL_OW 171
// end ; end ;
72808: LD_VAR 0 3
72812: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
72813: LD_INT 0
72815: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
72816: LD_VAR 0 1
72820: PUSH
72821: LD_INT 250
72823: EQUAL
72824: PUSH
72825: LD_VAR 0 2
72829: PPUSH
72830: CALL_OW 264
72834: PUSH
72835: LD_INT 81
72837: EQUAL
72838: AND
72839: IFFALSE 72860
// MinerPlaceMine ( unit , x , y ) ;
72841: LD_VAR 0 2
72845: PPUSH
72846: LD_VAR 0 4
72850: PPUSH
72851: LD_VAR 0 5
72855: PPUSH
72856: CALL 75850 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
72860: LD_VAR 0 1
72864: PUSH
72865: LD_INT 251
72867: EQUAL
72868: PUSH
72869: LD_VAR 0 2
72873: PPUSH
72874: CALL_OW 264
72878: PUSH
72879: LD_INT 81
72881: EQUAL
72882: AND
72883: IFFALSE 72904
// MinerDetonateMine ( unit , x , y ) ;
72885: LD_VAR 0 2
72889: PPUSH
72890: LD_VAR 0 4
72894: PPUSH
72895: LD_VAR 0 5
72899: PPUSH
72900: CALL 76125 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
72904: LD_VAR 0 1
72908: PUSH
72909: LD_INT 252
72911: EQUAL
72912: PUSH
72913: LD_VAR 0 2
72917: PPUSH
72918: CALL_OW 264
72922: PUSH
72923: LD_INT 81
72925: EQUAL
72926: AND
72927: IFFALSE 72948
// MinerCreateMinefield ( unit , x , y ) ;
72929: LD_VAR 0 2
72933: PPUSH
72934: LD_VAR 0 4
72938: PPUSH
72939: LD_VAR 0 5
72943: PPUSH
72944: CALL 76542 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
72948: LD_VAR 0 1
72952: PUSH
72953: LD_INT 253
72955: EQUAL
72956: PUSH
72957: LD_VAR 0 2
72961: PPUSH
72962: CALL_OW 257
72966: PUSH
72967: LD_INT 5
72969: EQUAL
72970: AND
72971: IFFALSE 72992
// ComBinocular ( unit , x , y ) ;
72973: LD_VAR 0 2
72977: PPUSH
72978: LD_VAR 0 4
72982: PPUSH
72983: LD_VAR 0 5
72987: PPUSH
72988: CALL 76911 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72992: LD_VAR 0 1
72996: PUSH
72997: LD_INT 254
72999: EQUAL
73000: PUSH
73001: LD_VAR 0 2
73005: PPUSH
73006: CALL_OW 264
73010: PUSH
73011: LD_INT 99
73013: EQUAL
73014: AND
73015: PUSH
73016: LD_VAR 0 3
73020: PPUSH
73021: CALL_OW 263
73025: PUSH
73026: LD_INT 3
73028: EQUAL
73029: AND
73030: IFFALSE 73046
// HackDestroyVehicle ( unit , selectedUnit ) ;
73032: LD_VAR 0 2
73036: PPUSH
73037: LD_VAR 0 3
73041: PPUSH
73042: CALL 75214 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
73046: LD_VAR 0 1
73050: PUSH
73051: LD_INT 255
73053: EQUAL
73054: PUSH
73055: LD_VAR 0 2
73059: PPUSH
73060: CALL_OW 264
73064: PUSH
73065: LD_INT 14
73067: PUSH
73068: LD_INT 53
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: IN
73075: AND
73076: PUSH
73077: LD_VAR 0 4
73081: PPUSH
73082: LD_VAR 0 5
73086: PPUSH
73087: CALL_OW 488
73091: AND
73092: IFFALSE 73116
// CutTreeXYR ( unit , x , y , 12 ) ;
73094: LD_VAR 0 2
73098: PPUSH
73099: LD_VAR 0 4
73103: PPUSH
73104: LD_VAR 0 5
73108: PPUSH
73109: LD_INT 12
73111: PPUSH
73112: CALL 73211 0 4
// if cmd = 256 then
73116: LD_VAR 0 1
73120: PUSH
73121: LD_INT 256
73123: EQUAL
73124: IFFALSE 73145
// SetFactoryWaypoint ( unit , x , y ) ;
73126: LD_VAR 0 2
73130: PPUSH
73131: LD_VAR 0 4
73135: PPUSH
73136: LD_VAR 0 5
73140: PPUSH
73141: CALL 71126 0 3
// if cmd = 257 then
73145: LD_VAR 0 1
73149: PUSH
73150: LD_INT 257
73152: EQUAL
73153: IFFALSE 73174
// SetWarehouseGatheringPoint ( unit , x , y ) ;
73155: LD_VAR 0 2
73159: PPUSH
73160: LD_VAR 0 4
73164: PPUSH
73165: LD_VAR 0 5
73169: PPUSH
73170: CALL 71488 0 3
// if cmd = 258 then
73174: LD_VAR 0 1
73178: PUSH
73179: LD_INT 258
73181: EQUAL
73182: IFFALSE 73206
// BurnTreeXYR ( unit , x , y , 8 ) ;
73184: LD_VAR 0 2
73188: PPUSH
73189: LD_VAR 0 4
73193: PPUSH
73194: LD_VAR 0 5
73198: PPUSH
73199: LD_INT 8
73201: PPUSH
73202: CALL 73605 0 4
// end ;
73206: LD_VAR 0 6
73210: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
73211: LD_INT 0
73213: PPUSH
73214: PPUSH
73215: PPUSH
73216: PPUSH
73217: PPUSH
73218: PPUSH
73219: PPUSH
73220: PPUSH
73221: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
73222: LD_VAR 0 1
73226: PPUSH
73227: CALL_OW 302
73231: NOT
73232: PUSH
73233: LD_VAR 0 2
73237: PPUSH
73238: LD_VAR 0 3
73242: PPUSH
73243: CALL_OW 488
73247: NOT
73248: OR
73249: PUSH
73250: LD_VAR 0 4
73254: NOT
73255: OR
73256: IFFALSE 73260
// exit ;
73258: GO 73600
// list := [ ] ;
73260: LD_ADDR_VAR 0 13
73264: PUSH
73265: EMPTY
73266: ST_TO_ADDR
// if x - r < 0 then
73267: LD_VAR 0 2
73271: PUSH
73272: LD_VAR 0 4
73276: MINUS
73277: PUSH
73278: LD_INT 0
73280: LESS
73281: IFFALSE 73293
// min_x := 0 else
73283: LD_ADDR_VAR 0 7
73287: PUSH
73288: LD_INT 0
73290: ST_TO_ADDR
73291: GO 73309
// min_x := x - r ;
73293: LD_ADDR_VAR 0 7
73297: PUSH
73298: LD_VAR 0 2
73302: PUSH
73303: LD_VAR 0 4
73307: MINUS
73308: ST_TO_ADDR
// if y - r < 0 then
73309: LD_VAR 0 3
73313: PUSH
73314: LD_VAR 0 4
73318: MINUS
73319: PUSH
73320: LD_INT 0
73322: LESS
73323: IFFALSE 73335
// min_y := 0 else
73325: LD_ADDR_VAR 0 8
73329: PUSH
73330: LD_INT 0
73332: ST_TO_ADDR
73333: GO 73351
// min_y := y - r ;
73335: LD_ADDR_VAR 0 8
73339: PUSH
73340: LD_VAR 0 3
73344: PUSH
73345: LD_VAR 0 4
73349: MINUS
73350: ST_TO_ADDR
// max_x := x + r ;
73351: LD_ADDR_VAR 0 9
73355: PUSH
73356: LD_VAR 0 2
73360: PUSH
73361: LD_VAR 0 4
73365: PLUS
73366: ST_TO_ADDR
// max_y := y + r ;
73367: LD_ADDR_VAR 0 10
73371: PUSH
73372: LD_VAR 0 3
73376: PUSH
73377: LD_VAR 0 4
73381: PLUS
73382: ST_TO_ADDR
// for _x = min_x to max_x do
73383: LD_ADDR_VAR 0 11
73387: PUSH
73388: DOUBLE
73389: LD_VAR 0 7
73393: DEC
73394: ST_TO_ADDR
73395: LD_VAR 0 9
73399: PUSH
73400: FOR_TO
73401: IFFALSE 73518
// for _y = min_y to max_y do
73403: LD_ADDR_VAR 0 12
73407: PUSH
73408: DOUBLE
73409: LD_VAR 0 8
73413: DEC
73414: ST_TO_ADDR
73415: LD_VAR 0 10
73419: PUSH
73420: FOR_TO
73421: IFFALSE 73514
// begin if not ValidHex ( _x , _y ) then
73423: LD_VAR 0 11
73427: PPUSH
73428: LD_VAR 0 12
73432: PPUSH
73433: CALL_OW 488
73437: NOT
73438: IFFALSE 73442
// continue ;
73440: GO 73420
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73442: LD_VAR 0 11
73446: PPUSH
73447: LD_VAR 0 12
73451: PPUSH
73452: CALL_OW 351
73456: PUSH
73457: LD_VAR 0 11
73461: PPUSH
73462: LD_VAR 0 12
73466: PPUSH
73467: CALL_OW 554
73471: AND
73472: IFFALSE 73512
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73474: LD_ADDR_VAR 0 13
73478: PUSH
73479: LD_VAR 0 13
73483: PPUSH
73484: LD_VAR 0 13
73488: PUSH
73489: LD_INT 1
73491: PLUS
73492: PPUSH
73493: LD_VAR 0 11
73497: PUSH
73498: LD_VAR 0 12
73502: PUSH
73503: EMPTY
73504: LIST
73505: LIST
73506: PPUSH
73507: CALL_OW 2
73511: ST_TO_ADDR
// end ;
73512: GO 73420
73514: POP
73515: POP
73516: GO 73400
73518: POP
73519: POP
// if not list then
73520: LD_VAR 0 13
73524: NOT
73525: IFFALSE 73529
// exit ;
73527: GO 73600
// for i in list do
73529: LD_ADDR_VAR 0 6
73533: PUSH
73534: LD_VAR 0 13
73538: PUSH
73539: FOR_IN
73540: IFFALSE 73598
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
73542: LD_VAR 0 1
73546: PPUSH
73547: LD_STRING M
73549: PUSH
73550: LD_VAR 0 6
73554: PUSH
73555: LD_INT 1
73557: ARRAY
73558: PUSH
73559: LD_VAR 0 6
73563: PUSH
73564: LD_INT 2
73566: ARRAY
73567: PUSH
73568: LD_INT 0
73570: PUSH
73571: LD_INT 0
73573: PUSH
73574: LD_INT 0
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: LIST
73584: LIST
73585: LIST
73586: LIST
73587: LIST
73588: PUSH
73589: EMPTY
73590: LIST
73591: PPUSH
73592: CALL_OW 447
73596: GO 73539
73598: POP
73599: POP
// end ;
73600: LD_VAR 0 5
73604: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
73605: LD_INT 0
73607: PPUSH
73608: PPUSH
73609: PPUSH
73610: PPUSH
73611: PPUSH
73612: PPUSH
73613: PPUSH
73614: PPUSH
73615: PPUSH
73616: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
73617: LD_VAR 0 1
73621: PPUSH
73622: CALL_OW 302
73626: NOT
73627: PUSH
73628: LD_VAR 0 2
73632: PPUSH
73633: LD_VAR 0 3
73637: PPUSH
73638: CALL_OW 488
73642: NOT
73643: OR
73644: PUSH
73645: LD_VAR 0 4
73649: NOT
73650: OR
73651: IFFALSE 73655
// exit ;
73653: GO 74168
// list := [ ] ;
73655: LD_ADDR_VAR 0 13
73659: PUSH
73660: EMPTY
73661: ST_TO_ADDR
// if x - r < 0 then
73662: LD_VAR 0 2
73666: PUSH
73667: LD_VAR 0 4
73671: MINUS
73672: PUSH
73673: LD_INT 0
73675: LESS
73676: IFFALSE 73688
// min_x := 0 else
73678: LD_ADDR_VAR 0 7
73682: PUSH
73683: LD_INT 0
73685: ST_TO_ADDR
73686: GO 73704
// min_x := x - r ;
73688: LD_ADDR_VAR 0 7
73692: PUSH
73693: LD_VAR 0 2
73697: PUSH
73698: LD_VAR 0 4
73702: MINUS
73703: ST_TO_ADDR
// if y - r < 0 then
73704: LD_VAR 0 3
73708: PUSH
73709: LD_VAR 0 4
73713: MINUS
73714: PUSH
73715: LD_INT 0
73717: LESS
73718: IFFALSE 73730
// min_y := 0 else
73720: LD_ADDR_VAR 0 8
73724: PUSH
73725: LD_INT 0
73727: ST_TO_ADDR
73728: GO 73746
// min_y := y - r ;
73730: LD_ADDR_VAR 0 8
73734: PUSH
73735: LD_VAR 0 3
73739: PUSH
73740: LD_VAR 0 4
73744: MINUS
73745: ST_TO_ADDR
// max_x := x + r ;
73746: LD_ADDR_VAR 0 9
73750: PUSH
73751: LD_VAR 0 2
73755: PUSH
73756: LD_VAR 0 4
73760: PLUS
73761: ST_TO_ADDR
// max_y := y + r ;
73762: LD_ADDR_VAR 0 10
73766: PUSH
73767: LD_VAR 0 3
73771: PUSH
73772: LD_VAR 0 4
73776: PLUS
73777: ST_TO_ADDR
// for _x = min_x to max_x do
73778: LD_ADDR_VAR 0 11
73782: PUSH
73783: DOUBLE
73784: LD_VAR 0 7
73788: DEC
73789: ST_TO_ADDR
73790: LD_VAR 0 9
73794: PUSH
73795: FOR_TO
73796: IFFALSE 73913
// for _y = min_y to max_y do
73798: LD_ADDR_VAR 0 12
73802: PUSH
73803: DOUBLE
73804: LD_VAR 0 8
73808: DEC
73809: ST_TO_ADDR
73810: LD_VAR 0 10
73814: PUSH
73815: FOR_TO
73816: IFFALSE 73909
// begin if not ValidHex ( _x , _y ) then
73818: LD_VAR 0 11
73822: PPUSH
73823: LD_VAR 0 12
73827: PPUSH
73828: CALL_OW 488
73832: NOT
73833: IFFALSE 73837
// continue ;
73835: GO 73815
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73837: LD_VAR 0 11
73841: PPUSH
73842: LD_VAR 0 12
73846: PPUSH
73847: CALL_OW 351
73851: PUSH
73852: LD_VAR 0 11
73856: PPUSH
73857: LD_VAR 0 12
73861: PPUSH
73862: CALL_OW 554
73866: AND
73867: IFFALSE 73907
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73869: LD_ADDR_VAR 0 13
73873: PUSH
73874: LD_VAR 0 13
73878: PPUSH
73879: LD_VAR 0 13
73883: PUSH
73884: LD_INT 1
73886: PLUS
73887: PPUSH
73888: LD_VAR 0 11
73892: PUSH
73893: LD_VAR 0 12
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PPUSH
73902: CALL_OW 2
73906: ST_TO_ADDR
// end ;
73907: GO 73815
73909: POP
73910: POP
73911: GO 73795
73913: POP
73914: POP
// if not list then
73915: LD_VAR 0 13
73919: NOT
73920: IFFALSE 73924
// exit ;
73922: GO 74168
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
73924: LD_ADDR_VAR 0 13
73928: PUSH
73929: LD_VAR 0 1
73933: PPUSH
73934: LD_VAR 0 13
73938: PPUSH
73939: LD_INT 1
73941: PPUSH
73942: LD_INT 1
73944: PPUSH
73945: CALL 19293 0 4
73949: ST_TO_ADDR
// ComStop ( flame ) ;
73950: LD_VAR 0 1
73954: PPUSH
73955: CALL_OW 141
// for i in list do
73959: LD_ADDR_VAR 0 6
73963: PUSH
73964: LD_VAR 0 13
73968: PUSH
73969: FOR_IN
73970: IFFALSE 74001
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
73972: LD_VAR 0 1
73976: PPUSH
73977: LD_VAR 0 6
73981: PUSH
73982: LD_INT 1
73984: ARRAY
73985: PPUSH
73986: LD_VAR 0 6
73990: PUSH
73991: LD_INT 2
73993: ARRAY
73994: PPUSH
73995: CALL_OW 176
73999: GO 73969
74001: POP
74002: POP
// repeat wait ( 0 0$1 ) ;
74003: LD_INT 35
74005: PPUSH
74006: CALL_OW 67
// task := GetTaskList ( flame ) ;
74010: LD_ADDR_VAR 0 14
74014: PUSH
74015: LD_VAR 0 1
74019: PPUSH
74020: CALL_OW 437
74024: ST_TO_ADDR
// if not task then
74025: LD_VAR 0 14
74029: NOT
74030: IFFALSE 74034
// exit ;
74032: GO 74168
// if task [ 1 ] [ 1 ] <> | then
74034: LD_VAR 0 14
74038: PUSH
74039: LD_INT 1
74041: ARRAY
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: PUSH
74047: LD_STRING |
74049: NONEQUAL
74050: IFFALSE 74054
// exit ;
74052: GO 74168
// _x := task [ 1 ] [ 2 ] ;
74054: LD_ADDR_VAR 0 11
74058: PUSH
74059: LD_VAR 0 14
74063: PUSH
74064: LD_INT 1
74066: ARRAY
74067: PUSH
74068: LD_INT 2
74070: ARRAY
74071: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
74072: LD_ADDR_VAR 0 12
74076: PUSH
74077: LD_VAR 0 14
74081: PUSH
74082: LD_INT 1
74084: ARRAY
74085: PUSH
74086: LD_INT 3
74088: ARRAY
74089: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
74090: LD_VAR 0 11
74094: PPUSH
74095: LD_VAR 0 12
74099: PPUSH
74100: CALL_OW 351
74104: NOT
74105: PUSH
74106: LD_VAR 0 11
74110: PPUSH
74111: LD_VAR 0 12
74115: PPUSH
74116: CALL_OW 554
74120: NOT
74121: OR
74122: IFFALSE 74156
// begin task := Delete ( task , 1 ) ;
74124: LD_ADDR_VAR 0 14
74128: PUSH
74129: LD_VAR 0 14
74133: PPUSH
74134: LD_INT 1
74136: PPUSH
74137: CALL_OW 3
74141: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
74142: LD_VAR 0 1
74146: PPUSH
74147: LD_VAR 0 14
74151: PPUSH
74152: CALL_OW 446
// end ; until not HasTask ( flame ) ;
74156: LD_VAR 0 1
74160: PPUSH
74161: CALL_OW 314
74165: NOT
74166: IFFALSE 74003
// end ;
74168: LD_VAR 0 5
74172: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
74173: LD_EXP 102
74177: NOT
74178: IFFALSE 74228
74180: GO 74182
74182: DISABLE
// begin initHack := true ;
74183: LD_ADDR_EXP 102
74187: PUSH
74188: LD_INT 1
74190: ST_TO_ADDR
// hackTanks := [ ] ;
74191: LD_ADDR_EXP 103
74195: PUSH
74196: EMPTY
74197: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
74198: LD_ADDR_EXP 104
74202: PUSH
74203: EMPTY
74204: ST_TO_ADDR
// hackLimit := 3 ;
74205: LD_ADDR_EXP 105
74209: PUSH
74210: LD_INT 3
74212: ST_TO_ADDR
// hackDist := 12 ;
74213: LD_ADDR_EXP 106
74217: PUSH
74218: LD_INT 12
74220: ST_TO_ADDR
// hackCounter := [ ] ;
74221: LD_ADDR_EXP 107
74225: PUSH
74226: EMPTY
74227: ST_TO_ADDR
// end ;
74228: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
74229: LD_EXP 102
74233: PUSH
74234: LD_INT 34
74236: PUSH
74237: LD_INT 99
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PPUSH
74244: CALL_OW 69
74248: AND
74249: IFFALSE 74502
74251: GO 74253
74253: DISABLE
74254: LD_INT 0
74256: PPUSH
74257: PPUSH
// begin enable ;
74258: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
74259: LD_ADDR_VAR 0 1
74263: PUSH
74264: LD_INT 34
74266: PUSH
74267: LD_INT 99
74269: PUSH
74270: EMPTY
74271: LIST
74272: LIST
74273: PPUSH
74274: CALL_OW 69
74278: PUSH
74279: FOR_IN
74280: IFFALSE 74500
// begin if not i in hackTanks then
74282: LD_VAR 0 1
74286: PUSH
74287: LD_EXP 103
74291: IN
74292: NOT
74293: IFFALSE 74376
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
74295: LD_ADDR_EXP 103
74299: PUSH
74300: LD_EXP 103
74304: PPUSH
74305: LD_EXP 103
74309: PUSH
74310: LD_INT 1
74312: PLUS
74313: PPUSH
74314: LD_VAR 0 1
74318: PPUSH
74319: CALL_OW 1
74323: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
74324: LD_ADDR_EXP 104
74328: PUSH
74329: LD_EXP 104
74333: PPUSH
74334: LD_EXP 104
74338: PUSH
74339: LD_INT 1
74341: PLUS
74342: PPUSH
74343: EMPTY
74344: PPUSH
74345: CALL_OW 1
74349: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
74350: LD_ADDR_EXP 107
74354: PUSH
74355: LD_EXP 107
74359: PPUSH
74360: LD_EXP 107
74364: PUSH
74365: LD_INT 1
74367: PLUS
74368: PPUSH
74369: EMPTY
74370: PPUSH
74371: CALL_OW 1
74375: ST_TO_ADDR
// end ; if not IsOk ( i ) then
74376: LD_VAR 0 1
74380: PPUSH
74381: CALL_OW 302
74385: NOT
74386: IFFALSE 74399
// begin HackUnlinkAll ( i ) ;
74388: LD_VAR 0 1
74392: PPUSH
74393: CALL 74505 0 1
// continue ;
74397: GO 74279
// end ; HackCheckCapturedStatus ( i ) ;
74399: LD_VAR 0 1
74403: PPUSH
74404: CALL 74948 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
74408: LD_ADDR_VAR 0 2
74412: PUSH
74413: LD_INT 81
74415: PUSH
74416: LD_VAR 0 1
74420: PPUSH
74421: CALL_OW 255
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 33
74432: PUSH
74433: LD_INT 3
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 91
74442: PUSH
74443: LD_VAR 0 1
74447: PUSH
74448: LD_EXP 106
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 50
74460: PUSH
74461: EMPTY
74462: LIST
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: PPUSH
74470: CALL_OW 69
74474: ST_TO_ADDR
// if not tmp then
74475: LD_VAR 0 2
74479: NOT
74480: IFFALSE 74484
// continue ;
74482: GO 74279
// HackLink ( i , tmp ) ;
74484: LD_VAR 0 1
74488: PPUSH
74489: LD_VAR 0 2
74493: PPUSH
74494: CALL 74641 0 2
// end ;
74498: GO 74279
74500: POP
74501: POP
// end ;
74502: PPOPN 2
74504: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
74509: PPUSH
// if not hack in hackTanks then
74510: LD_VAR 0 1
74514: PUSH
74515: LD_EXP 103
74519: IN
74520: NOT
74521: IFFALSE 74525
// exit ;
74523: GO 74636
// index := GetElementIndex ( hackTanks , hack ) ;
74525: LD_ADDR_VAR 0 4
74529: PUSH
74530: LD_EXP 103
74534: PPUSH
74535: LD_VAR 0 1
74539: PPUSH
74540: CALL 18590 0 2
74544: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
74545: LD_EXP 104
74549: PUSH
74550: LD_VAR 0 4
74554: ARRAY
74555: IFFALSE 74636
// begin for i in hackTanksCaptured [ index ] do
74557: LD_ADDR_VAR 0 3
74561: PUSH
74562: LD_EXP 104
74566: PUSH
74567: LD_VAR 0 4
74571: ARRAY
74572: PUSH
74573: FOR_IN
74574: IFFALSE 74600
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
74576: LD_VAR 0 3
74580: PUSH
74581: LD_INT 1
74583: ARRAY
74584: PPUSH
74585: LD_VAR 0 3
74589: PUSH
74590: LD_INT 2
74592: ARRAY
74593: PPUSH
74594: CALL_OW 235
74598: GO 74573
74600: POP
74601: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
74602: LD_ADDR_EXP 104
74606: PUSH
74607: LD_EXP 104
74611: PPUSH
74612: LD_VAR 0 4
74616: PPUSH
74617: EMPTY
74618: PPUSH
74619: CALL_OW 1
74623: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
74624: LD_VAR 0 1
74628: PPUSH
74629: LD_INT 0
74631: PPUSH
74632: CALL_OW 505
// end ; end ;
74636: LD_VAR 0 2
74640: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
74641: LD_INT 0
74643: PPUSH
74644: PPUSH
74645: PPUSH
// if not hack in hackTanks or not vehicles then
74646: LD_VAR 0 1
74650: PUSH
74651: LD_EXP 103
74655: IN
74656: NOT
74657: PUSH
74658: LD_VAR 0 2
74662: NOT
74663: OR
74664: IFFALSE 74668
// exit ;
74666: GO 74943
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
74668: LD_ADDR_VAR 0 2
74672: PUSH
74673: LD_VAR 0 1
74677: PPUSH
74678: LD_VAR 0 2
74682: PPUSH
74683: LD_INT 1
74685: PPUSH
74686: LD_INT 1
74688: PPUSH
74689: CALL 19240 0 4
74693: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
74694: LD_ADDR_VAR 0 5
74698: PUSH
74699: LD_EXP 103
74703: PPUSH
74704: LD_VAR 0 1
74708: PPUSH
74709: CALL 18590 0 2
74713: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
74714: LD_EXP 104
74718: PUSH
74719: LD_VAR 0 5
74723: ARRAY
74724: PUSH
74725: LD_EXP 105
74729: LESS
74730: IFFALSE 74919
// begin for i := 1 to vehicles do
74732: LD_ADDR_VAR 0 4
74736: PUSH
74737: DOUBLE
74738: LD_INT 1
74740: DEC
74741: ST_TO_ADDR
74742: LD_VAR 0 2
74746: PUSH
74747: FOR_TO
74748: IFFALSE 74917
// begin if hackTanksCaptured [ index ] = hackLimit then
74750: LD_EXP 104
74754: PUSH
74755: LD_VAR 0 5
74759: ARRAY
74760: PUSH
74761: LD_EXP 105
74765: EQUAL
74766: IFFALSE 74770
// break ;
74768: GO 74917
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
74770: LD_ADDR_EXP 107
74774: PUSH
74775: LD_EXP 107
74779: PPUSH
74780: LD_VAR 0 5
74784: PPUSH
74785: LD_EXP 107
74789: PUSH
74790: LD_VAR 0 5
74794: ARRAY
74795: PUSH
74796: LD_INT 1
74798: PLUS
74799: PPUSH
74800: CALL_OW 1
74804: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
74805: LD_ADDR_EXP 104
74809: PUSH
74810: LD_EXP 104
74814: PPUSH
74815: LD_VAR 0 5
74819: PUSH
74820: LD_EXP 104
74824: PUSH
74825: LD_VAR 0 5
74829: ARRAY
74830: PUSH
74831: LD_INT 1
74833: PLUS
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PPUSH
74839: LD_VAR 0 2
74843: PUSH
74844: LD_VAR 0 4
74848: ARRAY
74849: PUSH
74850: LD_VAR 0 2
74854: PUSH
74855: LD_VAR 0 4
74859: ARRAY
74860: PPUSH
74861: CALL_OW 255
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PPUSH
74870: CALL 18805 0 3
74874: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
74875: LD_VAR 0 2
74879: PUSH
74880: LD_VAR 0 4
74884: ARRAY
74885: PPUSH
74886: LD_VAR 0 1
74890: PPUSH
74891: CALL_OW 255
74895: PPUSH
74896: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
74900: LD_VAR 0 2
74904: PUSH
74905: LD_VAR 0 4
74909: ARRAY
74910: PPUSH
74911: CALL_OW 141
// end ;
74915: GO 74747
74917: POP
74918: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74919: LD_VAR 0 1
74923: PPUSH
74924: LD_EXP 104
74928: PUSH
74929: LD_VAR 0 5
74933: ARRAY
74934: PUSH
74935: LD_INT 0
74937: PLUS
74938: PPUSH
74939: CALL_OW 505
// end ;
74943: LD_VAR 0 3
74947: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
74948: LD_INT 0
74950: PPUSH
74951: PPUSH
74952: PPUSH
74953: PPUSH
// if not hack in hackTanks then
74954: LD_VAR 0 1
74958: PUSH
74959: LD_EXP 103
74963: IN
74964: NOT
74965: IFFALSE 74969
// exit ;
74967: GO 75209
// index := GetElementIndex ( hackTanks , hack ) ;
74969: LD_ADDR_VAR 0 4
74973: PUSH
74974: LD_EXP 103
74978: PPUSH
74979: LD_VAR 0 1
74983: PPUSH
74984: CALL 18590 0 2
74988: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
74989: LD_ADDR_VAR 0 3
74993: PUSH
74994: DOUBLE
74995: LD_EXP 104
74999: PUSH
75000: LD_VAR 0 4
75004: ARRAY
75005: INC
75006: ST_TO_ADDR
75007: LD_INT 1
75009: PUSH
75010: FOR_DOWNTO
75011: IFFALSE 75183
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
75013: LD_ADDR_VAR 0 5
75017: PUSH
75018: LD_EXP 104
75022: PUSH
75023: LD_VAR 0 4
75027: ARRAY
75028: PUSH
75029: LD_VAR 0 3
75033: ARRAY
75034: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
75035: LD_VAR 0 5
75039: PUSH
75040: LD_INT 1
75042: ARRAY
75043: PPUSH
75044: CALL_OW 302
75048: NOT
75049: PUSH
75050: LD_VAR 0 5
75054: PUSH
75055: LD_INT 1
75057: ARRAY
75058: PPUSH
75059: CALL_OW 255
75063: PUSH
75064: LD_VAR 0 1
75068: PPUSH
75069: CALL_OW 255
75073: NONEQUAL
75074: OR
75075: IFFALSE 75181
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
75077: LD_VAR 0 5
75081: PUSH
75082: LD_INT 1
75084: ARRAY
75085: PPUSH
75086: CALL_OW 305
75090: PUSH
75091: LD_VAR 0 5
75095: PUSH
75096: LD_INT 1
75098: ARRAY
75099: PPUSH
75100: CALL_OW 255
75104: PUSH
75105: LD_VAR 0 1
75109: PPUSH
75110: CALL_OW 255
75114: EQUAL
75115: AND
75116: IFFALSE 75140
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
75118: LD_VAR 0 5
75122: PUSH
75123: LD_INT 1
75125: ARRAY
75126: PPUSH
75127: LD_VAR 0 5
75131: PUSH
75132: LD_INT 2
75134: ARRAY
75135: PPUSH
75136: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
75140: LD_ADDR_EXP 104
75144: PUSH
75145: LD_EXP 104
75149: PPUSH
75150: LD_VAR 0 4
75154: PPUSH
75155: LD_EXP 104
75159: PUSH
75160: LD_VAR 0 4
75164: ARRAY
75165: PPUSH
75166: LD_VAR 0 3
75170: PPUSH
75171: CALL_OW 3
75175: PPUSH
75176: CALL_OW 1
75180: ST_TO_ADDR
// end ; end ;
75181: GO 75010
75183: POP
75184: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
75185: LD_VAR 0 1
75189: PPUSH
75190: LD_EXP 104
75194: PUSH
75195: LD_VAR 0 4
75199: ARRAY
75200: PUSH
75201: LD_INT 0
75203: PLUS
75204: PPUSH
75205: CALL_OW 505
// end ;
75209: LD_VAR 0 2
75213: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
75214: LD_INT 0
75216: PPUSH
75217: PPUSH
75218: PPUSH
75219: PPUSH
// if not hack in hackTanks then
75220: LD_VAR 0 1
75224: PUSH
75225: LD_EXP 103
75229: IN
75230: NOT
75231: IFFALSE 75235
// exit ;
75233: GO 75320
// index := GetElementIndex ( hackTanks , hack ) ;
75235: LD_ADDR_VAR 0 5
75239: PUSH
75240: LD_EXP 103
75244: PPUSH
75245: LD_VAR 0 1
75249: PPUSH
75250: CALL 18590 0 2
75254: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
75255: LD_ADDR_VAR 0 4
75259: PUSH
75260: DOUBLE
75261: LD_INT 1
75263: DEC
75264: ST_TO_ADDR
75265: LD_EXP 104
75269: PUSH
75270: LD_VAR 0 5
75274: ARRAY
75275: PUSH
75276: FOR_TO
75277: IFFALSE 75318
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
75279: LD_EXP 104
75283: PUSH
75284: LD_VAR 0 5
75288: ARRAY
75289: PUSH
75290: LD_VAR 0 4
75294: ARRAY
75295: PUSH
75296: LD_INT 1
75298: ARRAY
75299: PUSH
75300: LD_VAR 0 2
75304: EQUAL
75305: IFFALSE 75316
// KillUnit ( vehicle ) ;
75307: LD_VAR 0 2
75311: PPUSH
75312: CALL_OW 66
75316: GO 75276
75318: POP
75319: POP
// end ;
75320: LD_VAR 0 3
75324: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
75325: LD_EXP 108
75329: NOT
75330: IFFALSE 75365
75332: GO 75334
75334: DISABLE
// begin initMiner := true ;
75335: LD_ADDR_EXP 108
75339: PUSH
75340: LD_INT 1
75342: ST_TO_ADDR
// minersList := [ ] ;
75343: LD_ADDR_EXP 109
75347: PUSH
75348: EMPTY
75349: ST_TO_ADDR
// minerMinesList := [ ] ;
75350: LD_ADDR_EXP 110
75354: PUSH
75355: EMPTY
75356: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
75357: LD_ADDR_EXP 111
75361: PUSH
75362: LD_INT 5
75364: ST_TO_ADDR
// end ;
75365: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
75366: LD_EXP 108
75370: PUSH
75371: LD_INT 34
75373: PUSH
75374: LD_INT 81
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PPUSH
75381: CALL_OW 69
75385: AND
75386: IFFALSE 75847
75388: GO 75390
75390: DISABLE
75391: LD_INT 0
75393: PPUSH
75394: PPUSH
75395: PPUSH
75396: PPUSH
// begin enable ;
75397: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
75398: LD_ADDR_VAR 0 1
75402: PUSH
75403: LD_INT 34
75405: PUSH
75406: LD_INT 81
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PPUSH
75413: CALL_OW 69
75417: PUSH
75418: FOR_IN
75419: IFFALSE 75491
// begin if not i in minersList then
75421: LD_VAR 0 1
75425: PUSH
75426: LD_EXP 109
75430: IN
75431: NOT
75432: IFFALSE 75489
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
75434: LD_ADDR_EXP 109
75438: PUSH
75439: LD_EXP 109
75443: PPUSH
75444: LD_EXP 109
75448: PUSH
75449: LD_INT 1
75451: PLUS
75452: PPUSH
75453: LD_VAR 0 1
75457: PPUSH
75458: CALL_OW 1
75462: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
75463: LD_ADDR_EXP 110
75467: PUSH
75468: LD_EXP 110
75472: PPUSH
75473: LD_EXP 110
75477: PUSH
75478: LD_INT 1
75480: PLUS
75481: PPUSH
75482: EMPTY
75483: PPUSH
75484: CALL_OW 1
75488: ST_TO_ADDR
// end end ;
75489: GO 75418
75491: POP
75492: POP
// for i := minerMinesList downto 1 do
75493: LD_ADDR_VAR 0 1
75497: PUSH
75498: DOUBLE
75499: LD_EXP 110
75503: INC
75504: ST_TO_ADDR
75505: LD_INT 1
75507: PUSH
75508: FOR_DOWNTO
75509: IFFALSE 75845
// begin if IsLive ( minersList [ i ] ) then
75511: LD_EXP 109
75515: PUSH
75516: LD_VAR 0 1
75520: ARRAY
75521: PPUSH
75522: CALL_OW 300
75526: IFFALSE 75554
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
75528: LD_EXP 109
75532: PUSH
75533: LD_VAR 0 1
75537: ARRAY
75538: PPUSH
75539: LD_EXP 110
75543: PUSH
75544: LD_VAR 0 1
75548: ARRAY
75549: PPUSH
75550: CALL_OW 505
// if not minerMinesList [ i ] then
75554: LD_EXP 110
75558: PUSH
75559: LD_VAR 0 1
75563: ARRAY
75564: NOT
75565: IFFALSE 75569
// continue ;
75567: GO 75508
// for j := minerMinesList [ i ] downto 1 do
75569: LD_ADDR_VAR 0 2
75573: PUSH
75574: DOUBLE
75575: LD_EXP 110
75579: PUSH
75580: LD_VAR 0 1
75584: ARRAY
75585: INC
75586: ST_TO_ADDR
75587: LD_INT 1
75589: PUSH
75590: FOR_DOWNTO
75591: IFFALSE 75841
// begin side := GetSide ( minersList [ i ] ) ;
75593: LD_ADDR_VAR 0 3
75597: PUSH
75598: LD_EXP 109
75602: PUSH
75603: LD_VAR 0 1
75607: ARRAY
75608: PPUSH
75609: CALL_OW 255
75613: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
75614: LD_ADDR_VAR 0 4
75618: PUSH
75619: LD_EXP 110
75623: PUSH
75624: LD_VAR 0 1
75628: ARRAY
75629: PUSH
75630: LD_VAR 0 2
75634: ARRAY
75635: PUSH
75636: LD_INT 1
75638: ARRAY
75639: PPUSH
75640: LD_EXP 110
75644: PUSH
75645: LD_VAR 0 1
75649: ARRAY
75650: PUSH
75651: LD_VAR 0 2
75655: ARRAY
75656: PUSH
75657: LD_INT 2
75659: ARRAY
75660: PPUSH
75661: CALL_OW 428
75665: ST_TO_ADDR
// if not tmp then
75666: LD_VAR 0 4
75670: NOT
75671: IFFALSE 75675
// continue ;
75673: GO 75590
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
75675: LD_VAR 0 4
75679: PUSH
75680: LD_INT 81
75682: PUSH
75683: LD_VAR 0 3
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: PPUSH
75692: CALL_OW 69
75696: IN
75697: PUSH
75698: LD_EXP 110
75702: PUSH
75703: LD_VAR 0 1
75707: ARRAY
75708: PUSH
75709: LD_VAR 0 2
75713: ARRAY
75714: PUSH
75715: LD_INT 1
75717: ARRAY
75718: PPUSH
75719: LD_EXP 110
75723: PUSH
75724: LD_VAR 0 1
75728: ARRAY
75729: PUSH
75730: LD_VAR 0 2
75734: ARRAY
75735: PUSH
75736: LD_INT 2
75738: ARRAY
75739: PPUSH
75740: CALL_OW 458
75744: AND
75745: IFFALSE 75839
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
75747: LD_EXP 110
75751: PUSH
75752: LD_VAR 0 1
75756: ARRAY
75757: PUSH
75758: LD_VAR 0 2
75762: ARRAY
75763: PUSH
75764: LD_INT 1
75766: ARRAY
75767: PPUSH
75768: LD_EXP 110
75772: PUSH
75773: LD_VAR 0 1
75777: ARRAY
75778: PUSH
75779: LD_VAR 0 2
75783: ARRAY
75784: PUSH
75785: LD_INT 2
75787: ARRAY
75788: PPUSH
75789: LD_VAR 0 3
75793: PPUSH
75794: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
75798: LD_ADDR_EXP 110
75802: PUSH
75803: LD_EXP 110
75807: PPUSH
75808: LD_VAR 0 1
75812: PPUSH
75813: LD_EXP 110
75817: PUSH
75818: LD_VAR 0 1
75822: ARRAY
75823: PPUSH
75824: LD_VAR 0 2
75828: PPUSH
75829: CALL_OW 3
75833: PPUSH
75834: CALL_OW 1
75838: ST_TO_ADDR
// end ; end ;
75839: GO 75590
75841: POP
75842: POP
// end ;
75843: GO 75508
75845: POP
75846: POP
// end ;
75847: PPOPN 4
75849: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
75850: LD_INT 0
75852: PPUSH
75853: PPUSH
// result := false ;
75854: LD_ADDR_VAR 0 4
75858: PUSH
75859: LD_INT 0
75861: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
75862: LD_VAR 0 1
75866: PPUSH
75867: CALL_OW 264
75871: PUSH
75872: LD_INT 81
75874: EQUAL
75875: NOT
75876: IFFALSE 75880
// exit ;
75878: GO 76120
// index := GetElementIndex ( minersList , unit ) ;
75880: LD_ADDR_VAR 0 5
75884: PUSH
75885: LD_EXP 109
75889: PPUSH
75890: LD_VAR 0 1
75894: PPUSH
75895: CALL 18590 0 2
75899: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
75900: LD_EXP 110
75904: PUSH
75905: LD_VAR 0 5
75909: ARRAY
75910: PUSH
75911: LD_EXP 111
75915: GREATEREQUAL
75916: IFFALSE 75920
// exit ;
75918: GO 76120
// ComMoveXY ( unit , x , y ) ;
75920: LD_VAR 0 1
75924: PPUSH
75925: LD_VAR 0 2
75929: PPUSH
75930: LD_VAR 0 3
75934: PPUSH
75935: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75939: LD_INT 35
75941: PPUSH
75942: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
75946: LD_VAR 0 1
75950: PPUSH
75951: LD_VAR 0 2
75955: PPUSH
75956: LD_VAR 0 3
75960: PPUSH
75961: CALL 50331 0 3
75965: NOT
75966: PUSH
75967: LD_VAR 0 1
75971: PPUSH
75972: CALL_OW 314
75976: AND
75977: IFFALSE 75981
// exit ;
75979: GO 76120
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
75981: LD_VAR 0 2
75985: PPUSH
75986: LD_VAR 0 3
75990: PPUSH
75991: CALL_OW 428
75995: PUSH
75996: LD_VAR 0 1
76000: EQUAL
76001: PUSH
76002: LD_VAR 0 1
76006: PPUSH
76007: CALL_OW 314
76011: NOT
76012: AND
76013: IFFALSE 75939
// PlaySoundXY ( x , y , PlantMine ) ;
76015: LD_VAR 0 2
76019: PPUSH
76020: LD_VAR 0 3
76024: PPUSH
76025: LD_STRING PlantMine
76027: PPUSH
76028: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
76032: LD_VAR 0 2
76036: PPUSH
76037: LD_VAR 0 3
76041: PPUSH
76042: LD_VAR 0 1
76046: PPUSH
76047: CALL_OW 255
76051: PPUSH
76052: LD_INT 0
76054: PPUSH
76055: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
76059: LD_ADDR_EXP 110
76063: PUSH
76064: LD_EXP 110
76068: PPUSH
76069: LD_VAR 0 5
76073: PUSH
76074: LD_EXP 110
76078: PUSH
76079: LD_VAR 0 5
76083: ARRAY
76084: PUSH
76085: LD_INT 1
76087: PLUS
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PPUSH
76093: LD_VAR 0 2
76097: PUSH
76098: LD_VAR 0 3
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PPUSH
76107: CALL 18805 0 3
76111: ST_TO_ADDR
// result := true ;
76112: LD_ADDR_VAR 0 4
76116: PUSH
76117: LD_INT 1
76119: ST_TO_ADDR
// end ;
76120: LD_VAR 0 4
76124: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
76125: LD_INT 0
76127: PPUSH
76128: PPUSH
76129: PPUSH
// if not unit in minersList then
76130: LD_VAR 0 1
76134: PUSH
76135: LD_EXP 109
76139: IN
76140: NOT
76141: IFFALSE 76145
// exit ;
76143: GO 76537
// index := GetElementIndex ( minersList , unit ) ;
76145: LD_ADDR_VAR 0 6
76149: PUSH
76150: LD_EXP 109
76154: PPUSH
76155: LD_VAR 0 1
76159: PPUSH
76160: CALL 18590 0 2
76164: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
76165: LD_ADDR_VAR 0 5
76169: PUSH
76170: DOUBLE
76171: LD_EXP 110
76175: PUSH
76176: LD_VAR 0 6
76180: ARRAY
76181: INC
76182: ST_TO_ADDR
76183: LD_INT 1
76185: PUSH
76186: FOR_DOWNTO
76187: IFFALSE 76348
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
76189: LD_EXP 110
76193: PUSH
76194: LD_VAR 0 6
76198: ARRAY
76199: PUSH
76200: LD_VAR 0 5
76204: ARRAY
76205: PUSH
76206: LD_INT 1
76208: ARRAY
76209: PUSH
76210: LD_VAR 0 2
76214: EQUAL
76215: PUSH
76216: LD_EXP 110
76220: PUSH
76221: LD_VAR 0 6
76225: ARRAY
76226: PUSH
76227: LD_VAR 0 5
76231: ARRAY
76232: PUSH
76233: LD_INT 2
76235: ARRAY
76236: PUSH
76237: LD_VAR 0 3
76241: EQUAL
76242: AND
76243: IFFALSE 76346
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76245: LD_EXP 110
76249: PUSH
76250: LD_VAR 0 6
76254: ARRAY
76255: PUSH
76256: LD_VAR 0 5
76260: ARRAY
76261: PUSH
76262: LD_INT 1
76264: ARRAY
76265: PPUSH
76266: LD_EXP 110
76270: PUSH
76271: LD_VAR 0 6
76275: ARRAY
76276: PUSH
76277: LD_VAR 0 5
76281: ARRAY
76282: PUSH
76283: LD_INT 2
76285: ARRAY
76286: PPUSH
76287: LD_VAR 0 1
76291: PPUSH
76292: CALL_OW 255
76296: PPUSH
76297: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76301: LD_ADDR_EXP 110
76305: PUSH
76306: LD_EXP 110
76310: PPUSH
76311: LD_VAR 0 6
76315: PPUSH
76316: LD_EXP 110
76320: PUSH
76321: LD_VAR 0 6
76325: ARRAY
76326: PPUSH
76327: LD_VAR 0 5
76331: PPUSH
76332: CALL_OW 3
76336: PPUSH
76337: CALL_OW 1
76341: ST_TO_ADDR
// exit ;
76342: POP
76343: POP
76344: GO 76537
// end ; end ;
76346: GO 76186
76348: POP
76349: POP
// for i := minerMinesList [ index ] downto 1 do
76350: LD_ADDR_VAR 0 5
76354: PUSH
76355: DOUBLE
76356: LD_EXP 110
76360: PUSH
76361: LD_VAR 0 6
76365: ARRAY
76366: INC
76367: ST_TO_ADDR
76368: LD_INT 1
76370: PUSH
76371: FOR_DOWNTO
76372: IFFALSE 76535
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
76374: LD_EXP 110
76378: PUSH
76379: LD_VAR 0 6
76383: ARRAY
76384: PUSH
76385: LD_VAR 0 5
76389: ARRAY
76390: PUSH
76391: LD_INT 1
76393: ARRAY
76394: PPUSH
76395: LD_EXP 110
76399: PUSH
76400: LD_VAR 0 6
76404: ARRAY
76405: PUSH
76406: LD_VAR 0 5
76410: ARRAY
76411: PUSH
76412: LD_INT 2
76414: ARRAY
76415: PPUSH
76416: LD_VAR 0 2
76420: PPUSH
76421: LD_VAR 0 3
76425: PPUSH
76426: CALL_OW 298
76430: PUSH
76431: LD_INT 6
76433: LESS
76434: IFFALSE 76533
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
76436: LD_EXP 110
76440: PUSH
76441: LD_VAR 0 6
76445: ARRAY
76446: PUSH
76447: LD_VAR 0 5
76451: ARRAY
76452: PUSH
76453: LD_INT 1
76455: ARRAY
76456: PPUSH
76457: LD_EXP 110
76461: PUSH
76462: LD_VAR 0 6
76466: ARRAY
76467: PUSH
76468: LD_VAR 0 5
76472: ARRAY
76473: PUSH
76474: LD_INT 2
76476: ARRAY
76477: PPUSH
76478: LD_VAR 0 1
76482: PPUSH
76483: CALL_OW 255
76487: PPUSH
76488: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
76492: LD_ADDR_EXP 110
76496: PUSH
76497: LD_EXP 110
76501: PPUSH
76502: LD_VAR 0 6
76506: PPUSH
76507: LD_EXP 110
76511: PUSH
76512: LD_VAR 0 6
76516: ARRAY
76517: PPUSH
76518: LD_VAR 0 5
76522: PPUSH
76523: CALL_OW 3
76527: PPUSH
76528: CALL_OW 1
76532: ST_TO_ADDR
// end ; end ;
76533: GO 76371
76535: POP
76536: POP
// end ;
76537: LD_VAR 0 4
76541: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
76542: LD_INT 0
76544: PPUSH
76545: PPUSH
76546: PPUSH
76547: PPUSH
76548: PPUSH
76549: PPUSH
76550: PPUSH
76551: PPUSH
76552: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
76553: LD_VAR 0 1
76557: PPUSH
76558: CALL_OW 264
76562: PUSH
76563: LD_INT 81
76565: EQUAL
76566: NOT
76567: PUSH
76568: LD_VAR 0 1
76572: PUSH
76573: LD_EXP 109
76577: IN
76578: NOT
76579: OR
76580: IFFALSE 76584
// exit ;
76582: GO 76906
// index := GetElementIndex ( minersList , unit ) ;
76584: LD_ADDR_VAR 0 6
76588: PUSH
76589: LD_EXP 109
76593: PPUSH
76594: LD_VAR 0 1
76598: PPUSH
76599: CALL 18590 0 2
76603: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
76604: LD_ADDR_VAR 0 8
76608: PUSH
76609: LD_EXP 111
76613: PUSH
76614: LD_EXP 110
76618: PUSH
76619: LD_VAR 0 6
76623: ARRAY
76624: MINUS
76625: ST_TO_ADDR
// if not minesFreeAmount then
76626: LD_VAR 0 8
76630: NOT
76631: IFFALSE 76635
// exit ;
76633: GO 76906
// tmp := [ ] ;
76635: LD_ADDR_VAR 0 7
76639: PUSH
76640: EMPTY
76641: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
76642: LD_ADDR_VAR 0 5
76646: PUSH
76647: DOUBLE
76648: LD_INT 1
76650: DEC
76651: ST_TO_ADDR
76652: LD_VAR 0 8
76656: PUSH
76657: FOR_TO
76658: IFFALSE 76853
// begin _d := rand ( 0 , 5 ) ;
76660: LD_ADDR_VAR 0 11
76664: PUSH
76665: LD_INT 0
76667: PPUSH
76668: LD_INT 5
76670: PPUSH
76671: CALL_OW 12
76675: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
76676: LD_ADDR_VAR 0 12
76680: PUSH
76681: LD_INT 2
76683: PPUSH
76684: LD_INT 6
76686: PPUSH
76687: CALL_OW 12
76691: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
76692: LD_ADDR_VAR 0 9
76696: PUSH
76697: LD_VAR 0 2
76701: PPUSH
76702: LD_VAR 0 11
76706: PPUSH
76707: LD_VAR 0 12
76711: PPUSH
76712: CALL_OW 272
76716: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
76717: LD_ADDR_VAR 0 10
76721: PUSH
76722: LD_VAR 0 3
76726: PPUSH
76727: LD_VAR 0 11
76731: PPUSH
76732: LD_VAR 0 12
76736: PPUSH
76737: CALL_OW 273
76741: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
76742: LD_VAR 0 9
76746: PPUSH
76747: LD_VAR 0 10
76751: PPUSH
76752: CALL_OW 488
76756: PUSH
76757: LD_VAR 0 9
76761: PUSH
76762: LD_VAR 0 10
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: PUSH
76771: LD_VAR 0 7
76775: IN
76776: NOT
76777: AND
76778: PUSH
76779: LD_VAR 0 9
76783: PPUSH
76784: LD_VAR 0 10
76788: PPUSH
76789: CALL_OW 458
76793: NOT
76794: AND
76795: IFFALSE 76837
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
76797: LD_ADDR_VAR 0 7
76801: PUSH
76802: LD_VAR 0 7
76806: PPUSH
76807: LD_VAR 0 7
76811: PUSH
76812: LD_INT 1
76814: PLUS
76815: PPUSH
76816: LD_VAR 0 9
76820: PUSH
76821: LD_VAR 0 10
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PPUSH
76830: CALL_OW 1
76834: ST_TO_ADDR
76835: GO 76851
// i := i - 1 ;
76837: LD_ADDR_VAR 0 5
76841: PUSH
76842: LD_VAR 0 5
76846: PUSH
76847: LD_INT 1
76849: MINUS
76850: ST_TO_ADDR
// end ;
76851: GO 76657
76853: POP
76854: POP
// for i in tmp do
76855: LD_ADDR_VAR 0 5
76859: PUSH
76860: LD_VAR 0 7
76864: PUSH
76865: FOR_IN
76866: IFFALSE 76904
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
76868: LD_VAR 0 1
76872: PPUSH
76873: LD_VAR 0 5
76877: PUSH
76878: LD_INT 1
76880: ARRAY
76881: PPUSH
76882: LD_VAR 0 5
76886: PUSH
76887: LD_INT 2
76889: ARRAY
76890: PPUSH
76891: CALL 75850 0 3
76895: NOT
76896: IFFALSE 76902
// exit ;
76898: POP
76899: POP
76900: GO 76906
76902: GO 76865
76904: POP
76905: POP
// end ;
76906: LD_VAR 0 4
76910: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
76911: LD_INT 0
76913: PPUSH
76914: PPUSH
76915: PPUSH
76916: PPUSH
76917: PPUSH
76918: PPUSH
76919: PPUSH
// if not GetClass ( unit ) = class_sniper then
76920: LD_VAR 0 1
76924: PPUSH
76925: CALL_OW 257
76929: PUSH
76930: LD_INT 5
76932: EQUAL
76933: NOT
76934: IFFALSE 76938
// exit ;
76936: GO 77326
// dist := 8 ;
76938: LD_ADDR_VAR 0 5
76942: PUSH
76943: LD_INT 8
76945: ST_TO_ADDR
// viewRange := 12 ;
76946: LD_ADDR_VAR 0 7
76950: PUSH
76951: LD_INT 12
76953: ST_TO_ADDR
// side := GetSide ( unit ) ;
76954: LD_ADDR_VAR 0 6
76958: PUSH
76959: LD_VAR 0 1
76963: PPUSH
76964: CALL_OW 255
76968: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
76969: LD_INT 61
76971: PPUSH
76972: LD_VAR 0 6
76976: PPUSH
76977: CALL_OW 321
76981: PUSH
76982: LD_INT 2
76984: EQUAL
76985: IFFALSE 76995
// viewRange := 16 ;
76987: LD_ADDR_VAR 0 7
76991: PUSH
76992: LD_INT 16
76994: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
76995: LD_VAR 0 1
76999: PPUSH
77000: LD_VAR 0 2
77004: PPUSH
77005: LD_VAR 0 3
77009: PPUSH
77010: CALL_OW 297
77014: PUSH
77015: LD_VAR 0 5
77019: GREATER
77020: IFFALSE 77099
// begin ComMoveXY ( unit , x , y ) ;
77022: LD_VAR 0 1
77026: PPUSH
77027: LD_VAR 0 2
77031: PPUSH
77032: LD_VAR 0 3
77036: PPUSH
77037: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77041: LD_INT 35
77043: PPUSH
77044: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
77048: LD_VAR 0 1
77052: PPUSH
77053: LD_VAR 0 2
77057: PPUSH
77058: LD_VAR 0 3
77062: PPUSH
77063: CALL 50331 0 3
77067: NOT
77068: IFFALSE 77072
// exit ;
77070: GO 77326
// until GetDistUnitXY ( unit , x , y ) < dist ;
77072: LD_VAR 0 1
77076: PPUSH
77077: LD_VAR 0 2
77081: PPUSH
77082: LD_VAR 0 3
77086: PPUSH
77087: CALL_OW 297
77091: PUSH
77092: LD_VAR 0 5
77096: LESS
77097: IFFALSE 77041
// end ; ComTurnXY ( unit , x , y ) ;
77099: LD_VAR 0 1
77103: PPUSH
77104: LD_VAR 0 2
77108: PPUSH
77109: LD_VAR 0 3
77113: PPUSH
77114: CALL_OW 118
// wait ( 5 ) ;
77118: LD_INT 5
77120: PPUSH
77121: CALL_OW 67
// _d := GetDir ( unit ) ;
77125: LD_ADDR_VAR 0 10
77129: PUSH
77130: LD_VAR 0 1
77134: PPUSH
77135: CALL_OW 254
77139: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
77140: LD_ADDR_VAR 0 8
77144: PUSH
77145: LD_VAR 0 1
77149: PPUSH
77150: CALL_OW 250
77154: PPUSH
77155: LD_VAR 0 10
77159: PPUSH
77160: LD_VAR 0 5
77164: PPUSH
77165: CALL_OW 272
77169: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
77170: LD_ADDR_VAR 0 9
77174: PUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: CALL_OW 251
77184: PPUSH
77185: LD_VAR 0 10
77189: PPUSH
77190: LD_VAR 0 5
77194: PPUSH
77195: CALL_OW 273
77199: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77200: LD_VAR 0 8
77204: PPUSH
77205: LD_VAR 0 9
77209: PPUSH
77210: CALL_OW 488
77214: NOT
77215: IFFALSE 77219
// exit ;
77217: GO 77326
// ComAnimCustom ( unit , 1 ) ;
77219: LD_VAR 0 1
77223: PPUSH
77224: LD_INT 1
77226: PPUSH
77227: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
77231: LD_VAR 0 8
77235: PPUSH
77236: LD_VAR 0 9
77240: PPUSH
77241: LD_VAR 0 6
77245: PPUSH
77246: LD_VAR 0 7
77250: PPUSH
77251: CALL_OW 330
// repeat wait ( 1 ) ;
77255: LD_INT 1
77257: PPUSH
77258: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
77262: LD_VAR 0 1
77266: PPUSH
77267: CALL_OW 316
77271: PUSH
77272: LD_VAR 0 1
77276: PPUSH
77277: CALL_OW 314
77281: OR
77282: PUSH
77283: LD_VAR 0 1
77287: PPUSH
77288: CALL_OW 302
77292: NOT
77293: OR
77294: PUSH
77295: LD_VAR 0 1
77299: PPUSH
77300: CALL_OW 301
77304: OR
77305: IFFALSE 77255
// RemoveSeeing ( _x , _y , side ) ;
77307: LD_VAR 0 8
77311: PPUSH
77312: LD_VAR 0 9
77316: PPUSH
77317: LD_VAR 0 6
77321: PPUSH
77322: CALL_OW 331
// end ; end_of_file
77326: LD_VAR 0 4
77330: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77331: LD_VAR 0 1
77335: PPUSH
77336: LD_VAR 0 2
77340: PPUSH
77341: LD_VAR 0 3
77345: PPUSH
77346: LD_VAR 0 4
77350: PPUSH
77351: LD_VAR 0 5
77355: PPUSH
77356: LD_VAR 0 6
77360: PPUSH
77361: CALL 56790 0 6
// end ;
77365: PPOPN 6
77367: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77368: LD_INT 0
77370: PPUSH
// begin if not units then
77371: LD_VAR 0 1
77375: NOT
77376: IFFALSE 77380
// exit ;
77378: GO 77380
// end ;
77380: PPOPN 7
77382: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77383: CALL 56677 0 0
// end ; end_of_file
77387: PPOPN 1
77389: END
