// starting begin ResetFog ;
   0: CALL_OW 335
// InitHc ;
   4: CALL_OW 19
// InitUc ;
   8: CALL_OW 18
// InitBc ;
  12: CALL_OW 21
// InitVariables ;
  16: CALL 116 0 0
// InitMultiplayer ;
  20: CALL 3779 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 1 ) ;
  30: LD_INT 1
  32: PPUSH
  33: CALL_OW 344
// PrepareArabian ( Multiplayer_SetBotSide ( 2 ) ) ;
  37: LD_INT 2
  39: PPUSH
  40: CALL 5635 0 1
  44: PPUSH
  45: CALL 937 0 1
// PrepareConvoys ( Multiplayer_SetBotSide ( 6 ) ) ;
  49: LD_INT 6
  51: PPUSH
  52: CALL 5635 0 1
  56: PPUSH
  57: CALL 11975 0 1
// Multiplayer_Start ;
  61: CALL 7355 0 0
// ResetFog ;
  65: CALL_OW 335
// PlaceSeeing ( 1 , 1 , convoySide , - 32973 ) ;
  69: LD_INT 1
  71: PPUSH
  72: LD_INT 1
  74: PPUSH
  75: LD_EXP 40
  79: PPUSH
  80: LD_INT 32973
  82: NEG
  83: PPUSH
  84: CALL_OW 330
// RemoveSeeing ( 1 , 1 , convoySide ) ;
  88: LD_INT 1
  90: PPUSH
  91: LD_INT 1
  93: PPUSH
  94: LD_EXP 40
  98: PPUSH
  99: CALL_OW 331
// game := true ;
 103: LD_ADDR_EXP 2
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// Multiplayer_End ;
 111: CALL 7474 0 0
// end ;
 115: END
// export debug , game , winAllowed , botSides , savedConvoyUnits , blockThread , forestIsCleared , goToUnload ; function InitVariables ; begin
 116: LD_INT 0
 118: PPUSH
// debug := false ;
 119: LD_ADDR_EXP 1
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// botSides := [ 2 , 6 ] ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_INT 2
 134: PUSH
 135: LD_INT 6
 137: PUSH
 138: EMPTY
 139: LIST
 140: LIST
 141: ST_TO_ADDR
// winAllowed := false ;
 142: LD_ADDR_EXP 3
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// savedConvoyUnits := 0 ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// forestIsCleared := false ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// blockThread := false ;
 166: LD_ADDR_EXP 6
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// goToUnload := [ ] ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: EMPTY
 180: ST_TO_ADDR
// end ;
 181: LD_VAR 0 1
 185: RET
// every 0 0$01 trigger game and not debug_strings do
 186: LD_EXP 2
 190: PUSH
 191: LD_OWVAR 48
 195: NOT
 196: AND
 197: IFFALSE 213
 199: GO 201
 201: DISABLE
// begin enable ;
 202: ENABLE
// display_strings := Multiplayer_DisplayStrings ( ) ;
 203: LD_ADDR_OWVAR 47
 207: PUSH
 208: CALL 7901 0 0
 212: ST_TO_ADDR
// end ; end_of_file
 213: END
// every 0 0$30 trigger convoyWave in [ [ 6 , 8 , 10 ] [ Difficulty ] , [ 16 , 20 , 24 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 214: LD_EXP 39
 218: PUSH
 219: LD_INT 6
 221: PUSH
 222: LD_INT 8
 224: PUSH
 225: LD_INT 10
 227: PUSH
 228: EMPTY
 229: LIST
 230: LIST
 231: LIST
 232: PUSH
 233: LD_OWVAR 67
 237: ARRAY
 238: PUSH
 239: LD_INT 16
 241: PUSH
 242: LD_INT 20
 244: PUSH
 245: LD_INT 24
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: LIST
 252: PUSH
 253: LD_OWVAR 67
 257: ARRAY
 258: PUSH
 259: EMPTY
 260: LIST
 261: LIST
 262: IN
 263: IFFALSE 609
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
 271: PPUSH
 272: PPUSH
 273: PPUSH
 274: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 275: LD_INT 35
 277: PPUSH
 278: CALL_OW 67
// until not blockThread ;
 282: LD_EXP 6
 286: NOT
 287: IFFALSE 275
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 289: LD_ADDR_VAR 0 5
 293: PUSH
 294: LD_INT 6
 296: PUSH
 297: LD_INT 4
 299: PUSH
 300: LD_INT 2
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: LIST
 307: PUSH
 308: LD_OWVAR 67
 312: ARRAY
 313: ST_TO_ADDR
// for i := 1 to 8 do
 314: LD_ADDR_VAR 0 1
 318: PUSH
 319: DOUBLE
 320: LD_INT 1
 322: DEC
 323: ST_TO_ADDR
 324: LD_INT 8
 326: PUSH
 327: FOR_TO
 328: IFFALSE 607
// if multi_sides [ i ] = 2 and not multi_loosers [ i ] then
 330: LD_EXP 15
 334: PUSH
 335: LD_VAR 0 1
 339: ARRAY
 340: PUSH
 341: LD_INT 2
 343: EQUAL
 344: PUSH
 345: LD_EXP 32
 349: PUSH
 350: LD_VAR 0 1
 354: ARRAY
 355: NOT
 356: AND
 357: IFFALSE 605
// begin if i = your_side then
 359: LD_VAR 0 1
 363: PUSH
 364: LD_OWVAR 2
 368: EQUAL
 369: IFFALSE 381
// CenterNowOnXY ( 112 , 172 ) ;
 371: LD_INT 112
 373: PPUSH
 374: LD_INT 172
 376: PPUSH
 377: CALL_OW 86
// PrepareEngineer ( false , skill ) ;
 381: LD_INT 0
 383: PPUSH
 384: LD_VAR 0 5
 388: PPUSH
 389: CALL_OW 382
// un := CreateHuman ;
 393: LD_ADDR_VAR 0 3
 397: PUSH
 398: CALL_OW 44
 402: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 403: LD_VAR 0 3
 407: PPUSH
 408: LD_INT 25
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 49
// for j := 1 to 2 do
 418: LD_ADDR_VAR 0 2
 422: PUSH
 423: DOUBLE
 424: LD_INT 1
 426: DEC
 427: ST_TO_ADDR
 428: LD_INT 2
 430: PUSH
 431: FOR_TO
 432: IFFALSE 473
// begin PrepareMechanic ( false , skill ) ;
 434: LD_INT 0
 436: PPUSH
 437: LD_VAR 0 5
 441: PPUSH
 442: CALL_OW 383
// un := CreateHuman ;
 446: LD_ADDR_VAR 0 3
 450: PUSH
 451: CALL_OW 44
 455: ST_TO_ADDR
// PlaceUnitArea ( un , southRefArea , false ) ;
 456: LD_VAR 0 3
 460: PPUSH
 461: LD_INT 25
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL_OW 49
// end ;
 471: GO 431
 473: POP
 474: POP
// for j := 1 to 2 do
 475: LD_ADDR_VAR 0 2
 479: PUSH
 480: DOUBLE
 481: LD_INT 1
 483: DEC
 484: ST_TO_ADDR
 485: LD_INT 2
 487: PUSH
 488: FOR_TO
 489: IFFALSE 603
// begin uc_side := i ;
 491: LD_ADDR_OWVAR 20
 495: PUSH
 496: LD_VAR 0 1
 500: ST_TO_ADDR
// uc_nation := nation_russian ;
 501: LD_ADDR_OWVAR 21
 505: PUSH
 506: LD_INT 3
 508: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_gun , 50 ) ;
 509: LD_INT 22
 511: PPUSH
 512: LD_INT 1
 514: PPUSH
 515: LD_INT 1
 517: PPUSH
 518: LD_INT 44
 520: PPUSH
 521: LD_INT 50
 523: PPUSH
 524: CALL 19950 0 5
// veh := CreateVehicle ;
 528: LD_ADDR_VAR 0 4
 532: PUSH
 533: CALL_OW 45
 537: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 538: LD_VAR 0 4
 542: PPUSH
 543: LD_INT 5
 545: PPUSH
 546: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 550: LD_INT 0
 552: PPUSH
 553: LD_VAR 0 5
 557: PPUSH
 558: CALL_OW 383
// un := CreateHuman ;
 562: LD_ADDR_VAR 0 3
 566: PUSH
 567: CALL_OW 44
 571: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 572: LD_VAR 0 4
 576: PPUSH
 577: LD_INT 25
 579: PPUSH
 580: LD_INT 0
 582: PPUSH
 583: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 587: LD_VAR 0 3
 591: PPUSH
 592: LD_VAR 0 4
 596: PPUSH
 597: CALL_OW 52
// end ;
 601: GO 488
 603: POP
 604: POP
// end ;
 605: GO 327
 607: POP
 608: POP
// end ;
 609: PPOPN 5
 611: END
// every 0 0$30 trigger convoyWave in [ [ 12 , 14 , 16 ] [ Difficulty ] , [ 32 , 36 , 40 ] [ Difficulty ] ] do var i , j , un , veh , skill ;
 612: LD_EXP 39
 616: PUSH
 617: LD_INT 12
 619: PUSH
 620: LD_INT 14
 622: PUSH
 623: LD_INT 16
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: LIST
 630: PUSH
 631: LD_OWVAR 67
 635: ARRAY
 636: PUSH
 637: LD_INT 32
 639: PUSH
 640: LD_INT 36
 642: PUSH
 643: LD_INT 40
 645: PUSH
 646: EMPTY
 647: LIST
 648: LIST
 649: LIST
 650: PUSH
 651: LD_OWVAR 67
 655: ARRAY
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: IN
 661: IFFALSE 934
 663: GO 665
 665: DISABLE
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
 672: PPUSH
// begin repeat wait ( 0 0$1 ) ;
 673: LD_INT 35
 675: PPUSH
 676: CALL_OW 67
// until not blockThread ;
 680: LD_EXP 6
 684: NOT
 685: IFFALSE 673
// skill := [ 6 , 4 , 2 ] [ Difficulty ] ;
 687: LD_ADDR_VAR 0 5
 691: PUSH
 692: LD_INT 6
 694: PUSH
 695: LD_INT 4
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: PUSH
 706: LD_OWVAR 67
 710: ARRAY
 711: ST_TO_ADDR
// for i := 1 to 8 do
 712: LD_ADDR_VAR 0 1
 716: PUSH
 717: DOUBLE
 718: LD_INT 1
 720: DEC
 721: ST_TO_ADDR
 722: LD_INT 8
 724: PUSH
 725: FOR_TO
 726: IFFALSE 932
// if multi_sides [ i ] = 1 and not multi_loosers [ i ] then
 728: LD_EXP 15
 732: PUSH
 733: LD_VAR 0 1
 737: ARRAY
 738: PUSH
 739: LD_INT 1
 741: EQUAL
 742: PUSH
 743: LD_EXP 32
 747: PUSH
 748: LD_VAR 0 1
 752: ARRAY
 753: NOT
 754: AND
 755: IFFALSE 930
// begin if i = your_side then
 757: LD_VAR 0 1
 761: PUSH
 762: LD_OWVAR 2
 766: EQUAL
 767: IFFALSE 779
// CenterNowOnXY ( 112 , 172 ) ;
 769: LD_INT 112
 771: PPUSH
 772: LD_INT 172
 774: PPUSH
 775: CALL_OW 86
// for j := 1 to 3 do
 779: LD_ADDR_VAR 0 2
 783: PUSH
 784: DOUBLE
 785: LD_INT 1
 787: DEC
 788: ST_TO_ADDR
 789: LD_INT 3
 791: PUSH
 792: FOR_TO
 793: IFFALSE 928
// begin uc_side := i ;
 795: LD_ADDR_OWVAR 20
 799: PUSH
 800: LD_VAR 0 1
 804: ST_TO_ADDR
// uc_nation := nation_russian ;
 805: LD_ADDR_OWVAR 21
 809: PUSH
 810: LD_INT 3
 812: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun ] [ i mod 2 + 1 ] , 50 ) ;
 813: LD_INT 22
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: LD_INT 44
 824: PUSH
 825: LD_INT 43
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: LD_VAR 0 1
 836: PUSH
 837: LD_INT 2
 839: MOD
 840: PUSH
 841: LD_INT 1
 843: PLUS
 844: ARRAY
 845: PPUSH
 846: LD_INT 50
 848: PPUSH
 849: CALL 19950 0 5
// veh := CreateVehicle ;
 853: LD_ADDR_VAR 0 4
 857: PUSH
 858: CALL_OW 45
 862: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
 863: LD_VAR 0 4
 867: PPUSH
 868: LD_INT 5
 870: PPUSH
 871: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
 875: LD_INT 0
 877: PPUSH
 878: LD_VAR 0 5
 882: PPUSH
 883: CALL_OW 383
// un := CreateHuman ;
 887: LD_ADDR_VAR 0 3
 891: PUSH
 892: CALL_OW 44
 896: ST_TO_ADDR
// PlaceUnitArea ( veh , southRefArea , false ) ;
 897: LD_VAR 0 4
 901: PPUSH
 902: LD_INT 25
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
 912: LD_VAR 0 3
 916: PPUSH
 917: LD_VAR 0 4
 921: PPUSH
 922: CALL_OW 52
// end ;
 926: GO 792
 928: POP
 929: POP
// end ;
 930: GO 725
 932: POP
 933: POP
// end ; end_of_file
 934: PPOPN 5
 936: END
// export enemyUnits , enemyMobile , enemyForestGuard , enemySide , arAttackersInf ; export function PrepareArabian ( side ) ; var i , un , skill , veh ; begin
 937: LD_INT 0
 939: PPUSH
 940: PPUSH
 941: PPUSH
 942: PPUSH
 943: PPUSH
// enemySide := side ;
 944: LD_ADDR_EXP 12
 948: PUSH
 949: LD_VAR 0 1
 953: ST_TO_ADDR
// enemyUnits := [ ] ;
 954: LD_ADDR_EXP 9
 958: PUSH
 959: EMPTY
 960: ST_TO_ADDR
// enemyMobile := [ ] ;
 961: LD_ADDR_EXP 10
 965: PUSH
 966: EMPTY
 967: ST_TO_ADDR
// enemyForestGuard := [ ] ;
 968: LD_ADDR_EXP 11
 972: PUSH
 973: EMPTY
 974: ST_TO_ADDR
// arAttackersInf := [ ] ;
 975: LD_ADDR_EXP 13
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// skill := [ 4 , 6 , 8 ] [ Difficulty ] ;
 982: LD_ADDR_VAR 0 5
 986: PUSH
 987: LD_INT 4
 989: PUSH
 990: LD_INT 6
 992: PUSH
 993: LD_INT 8
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: LIST
1000: PUSH
1001: LD_OWVAR 67
1005: ARRAY
1006: ST_TO_ADDR
// uc_side := side ;
1007: LD_ADDR_OWVAR 20
1011: PUSH
1012: LD_VAR 0 1
1016: ST_TO_ADDR
// uc_nation := nation_arabian ;
1017: LD_ADDR_OWVAR 21
1021: PUSH
1022: LD_INT 2
1024: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
1025: LD_ADDR_VAR 0 3
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_INT 5
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: LD_INT 7
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: LIST
1048: PUSH
1049: LD_OWVAR 67
1053: ARRAY
1054: PUSH
1055: FOR_TO
1056: IFFALSE 1143
// begin PrepareSoldier ( false , skill ) ;
1058: LD_INT 0
1060: PPUSH
1061: LD_VAR 0 5
1065: PPUSH
1066: CALL_OW 381
// un := CreateHuman ;
1070: LD_ADDR_VAR 0 4
1074: PUSH
1075: CALL_OW 44
1079: ST_TO_ADDR
// if i mod 2 = 0 then
1080: LD_VAR 0 3
1084: PUSH
1085: LD_INT 2
1087: MOD
1088: PUSH
1089: LD_INT 0
1091: EQUAL
1092: IFFALSE 1106
// SetClass ( un , class_mortar ) ;
1094: LD_VAR 0 4
1098: PPUSH
1099: LD_INT 8
1101: PPUSH
1102: CALL_OW 336
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1106: LD_ADDR_EXP 11
1110: PUSH
1111: LD_EXP 11
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: CALL 52801 0 2
1125: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1126: LD_VAR 0 4
1130: PPUSH
1131: LD_INT 17
1133: PPUSH
1134: LD_INT 0
1136: PPUSH
1137: CALL_OW 49
// end ;
1141: GO 1055
1143: POP
1144: POP
// for i := 1 to 2 do
1145: LD_ADDR_VAR 0 3
1149: PUSH
1150: DOUBLE
1151: LD_INT 1
1153: DEC
1154: ST_TO_ADDR
1155: LD_INT 2
1157: PUSH
1158: FOR_TO
1159: IFFALSE 1220
// begin PrepareScientist ( false , skill ) ;
1161: LD_INT 0
1163: PPUSH
1164: LD_VAR 0 5
1168: PPUSH
1169: CALL_OW 384
// un := CreateHuman ;
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: CALL_OW 44
1182: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1183: LD_ADDR_EXP 11
1187: PUSH
1188: LD_EXP 11
1192: PPUSH
1193: LD_VAR 0 4
1197: PPUSH
1198: CALL 52801 0 2
1202: ST_TO_ADDR
// PlaceUnitArea ( un , forestGuardHill1Area , false ) ;
1203: LD_VAR 0 4
1207: PPUSH
1208: LD_INT 17
1210: PPUSH
1211: LD_INT 0
1213: PPUSH
1214: CALL_OW 49
// end ;
1218: GO 1158
1220: POP
1221: POP
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
1222: LD_ADDR_VAR 0 3
1226: PUSH
1227: DOUBLE
1228: LD_INT 1
1230: DEC
1231: ST_TO_ADDR
1232: LD_INT 2
1234: PUSH
1235: LD_INT 3
1237: PUSH
1238: LD_INT 3
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: LIST
1245: PUSH
1246: LD_OWVAR 67
1250: ARRAY
1251: PUSH
1252: FOR_TO
1253: IFFALSE 1389
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_gun , 100 ) ;
1255: LD_INT 14
1257: PPUSH
1258: LD_INT 2
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: LD_INT 27
1266: PPUSH
1267: LD_INT 100
1269: PPUSH
1270: CALL 19950 0 5
// veh := CreateVehicle ;
1274: LD_ADDR_VAR 0 6
1278: PUSH
1279: CALL_OW 45
1283: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , veh ) ;
1284: LD_ADDR_EXP 11
1288: PUSH
1289: LD_EXP 11
1293: PPUSH
1294: LD_VAR 0 6
1298: PPUSH
1299: CALL 52801 0 2
1303: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
1304: LD_VAR 0 6
1308: PPUSH
1309: LD_INT 5
1311: PPUSH
1312: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1316: LD_INT 0
1318: PPUSH
1319: LD_VAR 0 5
1323: PPUSH
1324: CALL_OW 383
// un := CreateHuman ;
1328: LD_ADDR_VAR 0 4
1332: PUSH
1333: CALL_OW 44
1337: ST_TO_ADDR
// enemyForestGuard := Join ( enemyForestGuard , un ) ;
1338: LD_ADDR_EXP 11
1342: PUSH
1343: LD_EXP 11
1347: PPUSH
1348: LD_VAR 0 4
1352: PPUSH
1353: CALL 52801 0 2
1357: ST_TO_ADDR
// PlaceUnitArea ( veh , forestGuardHill2Area , false ) ;
1358: LD_VAR 0 6
1362: PPUSH
1363: LD_INT 18
1365: PPUSH
1366: LD_INT 0
1368: PPUSH
1369: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
1373: LD_VAR 0 4
1377: PPUSH
1378: LD_VAR 0 6
1382: PPUSH
1383: CALL_OW 52
// end ;
1387: GO 1252
1389: POP
1390: POP
// for i := 1 to 2 do
1391: LD_ADDR_VAR 0 3
1395: PUSH
1396: DOUBLE
1397: LD_INT 1
1399: DEC
1400: ST_TO_ADDR
1401: LD_INT 2
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1488
// begin PrepareVehicle ( ar_half_tracked , engine_solar , control_manual , ar_cargo_bay , 100 ) ;
1407: LD_INT 14
1409: PPUSH
1410: LD_INT 2
1412: PPUSH
1413: LD_INT 1
1415: PPUSH
1416: LD_INT 32
1418: PPUSH
1419: LD_INT 100
1421: PPUSH
1422: CALL 19950 0 5
// veh := CreateVehicle ;
1426: LD_ADDR_VAR 0 6
1430: PUSH
1431: CALL_OW 45
1435: ST_TO_ADDR
// SetDir ( veh , rand ( 2 , 3 ) ) ;
1436: LD_VAR 0 6
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 3
1446: PPUSH
1447: CALL_OW 12
1451: PPUSH
1452: CALL_OW 233
// PlaceUnitArea ( veh , arOilArea , false ) ;
1456: LD_VAR 0 6
1460: PPUSH
1461: LD_INT 22
1463: PPUSH
1464: LD_INT 0
1466: PPUSH
1467: CALL_OW 49
// SetCargo ( veh , mat_oil , 100 ) ;
1471: LD_VAR 0 6
1475: PPUSH
1476: LD_INT 2
1478: PPUSH
1479: LD_INT 100
1481: PPUSH
1482: CALL_OW 290
// end ;
1486: GO 1404
1488: POP
1489: POP
// end ;
1490: LD_VAR 0 2
1494: RET
// export function PrepareMobileGroup ; var i , veh , un , skill , v ; begin
1495: LD_INT 0
1497: PPUSH
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
// blockThread := true ;
1503: LD_ADDR_EXP 6
1507: PUSH
1508: LD_INT 1
1510: ST_TO_ADDR
// v := convoyWave div 12 ;
1511: LD_ADDR_VAR 0 6
1515: PUSH
1516: LD_EXP 39
1520: PUSH
1521: LD_INT 12
1523: DIV
1524: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
1525: LD_ADDR_VAR 0 5
1529: PUSH
1530: LD_INT 4
1532: PUSH
1533: LD_INT 5
1535: PUSH
1536: LD_INT 6
1538: PUSH
1539: EMPTY
1540: LIST
1541: LIST
1542: LIST
1543: PUSH
1544: LD_OWVAR 67
1548: ARRAY
1549: PUSH
1550: LD_VAR 0 6
1554: PLUS
1555: ST_TO_ADDR
// if skill > 10 then
1556: LD_VAR 0 5
1560: PUSH
1561: LD_INT 10
1563: GREATER
1564: IFFALSE 1574
// skill := 10 ;
1566: LD_ADDR_VAR 0 5
1570: PUSH
1571: LD_INT 10
1573: ST_TO_ADDR
// if v > 8 then
1574: LD_VAR 0 6
1578: PUSH
1579: LD_INT 8
1581: GREATER
1582: IFFALSE 1592
// v := 8 ;
1584: LD_ADDR_VAR 0 6
1588: PUSH
1589: LD_INT 8
1591: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + v do
1592: LD_ADDR_VAR 0 2
1596: PUSH
1597: DOUBLE
1598: LD_INT 1
1600: DEC
1601: ST_TO_ADDR
1602: LD_INT 2
1604: PUSH
1605: LD_INT 3
1607: PUSH
1608: LD_INT 3
1610: PUSH
1611: EMPTY
1612: LIST
1613: LIST
1614: LIST
1615: PUSH
1616: LD_OWVAR 67
1620: ARRAY
1621: PUSH
1622: LD_VAR 0 6
1626: PLUS
1627: PUSH
1628: FOR_TO
1629: IFFALSE 1808
// begin uc_side := enemySide ;
1631: LD_ADDR_OWVAR 20
1635: PUSH
1636: LD_EXP 12
1640: ST_TO_ADDR
// uc_nation := nation_arabian ;
1641: LD_ADDR_OWVAR 21
1645: PUSH
1646: LD_INT 2
1648: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 100 ) ;
1649: LD_INT 14
1651: PPUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 27
1660: PUSH
1661: LD_INT 25
1663: PUSH
1664: EMPTY
1665: LIST
1666: LIST
1667: PUSH
1668: LD_VAR 0 2
1672: PUSH
1673: LD_INT 2
1675: MOD
1676: PUSH
1677: LD_INT 1
1679: PLUS
1680: ARRAY
1681: PPUSH
1682: LD_INT 100
1684: PPUSH
1685: CALL 19950 0 5
// veh := CreateVehicle ;
1689: LD_ADDR_VAR 0 3
1693: PUSH
1694: CALL_OW 45
1698: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1699: LD_ADDR_EXP 10
1703: PUSH
1704: LD_EXP 10
1708: PPUSH
1709: LD_VAR 0 3
1713: PPUSH
1714: CALL 52801 0 2
1718: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1719: LD_VAR 0 3
1723: PPUSH
1724: LD_INT 2
1726: PPUSH
1727: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
1731: LD_INT 0
1733: PPUSH
1734: LD_VAR 0 5
1738: PPUSH
1739: CALL_OW 383
// un := CreateHuman ;
1743: LD_ADDR_VAR 0 4
1747: PUSH
1748: CALL_OW 44
1752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1753: LD_INT 35
1755: PPUSH
1756: CALL_OW 67
// until PlaceUnitArea ( veh , arabNorthSpawnArea , false ) ;
1760: LD_VAR 0 3
1764: PPUSH
1765: LD_INT 23
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL_OW 49
1775: IFFALSE 1753
// PlaceHumanInUnit ( un , veh ) ;
1777: LD_VAR 0 4
1781: PPUSH
1782: LD_VAR 0 3
1786: PPUSH
1787: CALL_OW 52
// ComMoveXY ( veh , 104 , 18 ) ;
1791: LD_VAR 0 3
1795: PPUSH
1796: LD_INT 104
1798: PPUSH
1799: LD_INT 18
1801: PPUSH
1802: CALL_OW 111
// end ;
1806: GO 1628
1808: POP
1809: POP
// blockThread := false ;
1810: LD_ADDR_EXP 6
1814: PUSH
1815: LD_INT 0
1817: ST_TO_ADDR
// end ;
1818: LD_VAR 0 1
1822: RET
// export function PrepareMobileGroup2 ; var i , veh , un , skill , v ; begin
1823: LD_INT 0
1825: PPUSH
1826: PPUSH
1827: PPUSH
1828: PPUSH
1829: PPUSH
1830: PPUSH
// blockThread := true ;
1831: LD_ADDR_EXP 6
1835: PUSH
1836: LD_INT 1
1838: ST_TO_ADDR
// v := convoyWave div 12 ;
1839: LD_ADDR_VAR 0 6
1843: PUSH
1844: LD_EXP 39
1848: PUSH
1849: LD_INT 12
1851: DIV
1852: ST_TO_ADDR
// if v > 8 then
1853: LD_VAR 0 6
1857: PUSH
1858: LD_INT 8
1860: GREATER
1861: IFFALSE 1871
// v := 8 ;
1863: LD_ADDR_VAR 0 6
1867: PUSH
1868: LD_INT 8
1870: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] + v do
1871: LD_ADDR_VAR 0 2
1875: PUSH
1876: DOUBLE
1877: LD_INT 1
1879: DEC
1880: ST_TO_ADDR
1881: LD_INT 3
1883: PUSH
1884: LD_INT 4
1886: PUSH
1887: LD_INT 5
1889: PUSH
1890: EMPTY
1891: LIST
1892: LIST
1893: LIST
1894: PUSH
1895: LD_OWVAR 67
1899: ARRAY
1900: PUSH
1901: LD_VAR 0 6
1905: PLUS
1906: PUSH
1907: FOR_TO
1908: IFFALSE 2091
// begin uc_side := enemySide ;
1910: LD_ADDR_OWVAR 20
1914: PUSH
1915: LD_EXP 12
1919: ST_TO_ADDR
// uc_nation := nation_arabian ;
1920: LD_ADDR_OWVAR 21
1924: PUSH
1925: LD_INT 2
1927: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
1928: LD_INT 14
1930: PPUSH
1931: LD_INT 1
1933: PPUSH
1934: LD_INT 1
1936: PPUSH
1937: LD_INT 27
1939: PUSH
1940: LD_INT 25
1942: PUSH
1943: LD_INT 26
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: LIST
1950: PUSH
1951: LD_VAR 0 2
1955: PUSH
1956: LD_INT 3
1958: MOD
1959: PUSH
1960: LD_INT 1
1962: PLUS
1963: ARRAY
1964: PPUSH
1965: LD_INT 100
1967: PPUSH
1968: CALL 19950 0 5
// veh := CreateVehicle ;
1972: LD_ADDR_VAR 0 3
1976: PUSH
1977: CALL_OW 45
1981: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
1982: LD_ADDR_EXP 10
1986: PUSH
1987: LD_EXP 10
1991: PPUSH
1992: LD_VAR 0 3
1996: PPUSH
1997: CALL 52801 0 2
2001: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_INT 4
2009: PPUSH
2010: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2014: LD_INT 0
2016: PPUSH
2017: LD_VAR 0 5
2021: PPUSH
2022: CALL_OW 383
// un := CreateHuman ;
2026: LD_ADDR_VAR 0 4
2030: PUSH
2031: CALL_OW 44
2035: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2036: LD_INT 35
2038: PPUSH
2039: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2043: LD_VAR 0 3
2047: PPUSH
2048: LD_INT 14
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL_OW 49
2058: IFFALSE 2036
// PlaceHumanInUnit ( un , veh ) ;
2060: LD_VAR 0 4
2064: PPUSH
2065: LD_VAR 0 3
2069: PPUSH
2070: CALL_OW 52
// ComMoveXY ( veh , 151 , 28 ) ;
2074: LD_VAR 0 3
2078: PPUSH
2079: LD_INT 151
2081: PPUSH
2082: LD_INT 28
2084: PPUSH
2085: CALL_OW 111
// end ;
2089: GO 1907
2091: POP
2092: POP
// blockThread := false ;
2093: LD_ADDR_EXP 6
2097: PUSH
2098: LD_INT 0
2100: ST_TO_ADDR
// end ;
2101: LD_VAR 0 1
2105: RET
// export function ClearRoadInForest ; var i , un , veh , tmp , skill ; begin
2106: LD_INT 0
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
2112: PPUSH
2113: PPUSH
// blockThread := true ;
2114: LD_ADDR_EXP 6
2118: PUSH
2119: LD_INT 1
2121: ST_TO_ADDR
// skill := [ 4 , 5 , 7 ] [ Difficulty ] ;
2122: LD_ADDR_VAR 0 6
2126: PUSH
2127: LD_INT 4
2129: PUSH
2130: LD_INT 5
2132: PUSH
2133: LD_INT 7
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: PUSH
2141: LD_OWVAR 67
2145: ARRAY
2146: ST_TO_ADDR
// tmp := AreaToList ( forestRoadArea , 0 ) ;
2147: LD_ADDR_VAR 0 5
2151: PUSH
2152: LD_INT 15
2154: PPUSH
2155: LD_INT 0
2157: PPUSH
2158: CALL_OW 517
2162: ST_TO_ADDR
// uc_side := enemySide ;
2163: LD_ADDR_OWVAR 20
2167: PUSH
2168: LD_EXP 12
2172: ST_TO_ADDR
// uc_nation := nation_arabian ;
2173: LD_ADDR_OWVAR 21
2177: PUSH
2178: LD_INT 2
2180: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
2181: LD_INT 0
2183: PPUSH
2184: LD_VAR 0 6
2188: PPUSH
2189: CALL_OW 383
// un := CreateHuman ;
2193: LD_ADDR_VAR 0 3
2197: PUSH
2198: CALL_OW 44
2202: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 100 ) ;
2203: LD_INT 14
2205: PPUSH
2206: LD_INT 1
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 26
2214: PPUSH
2215: LD_INT 100
2217: PPUSH
2218: CALL 19950 0 5
// veh := CreateVehicle ;
2222: LD_ADDR_VAR 0 4
2226: PUSH
2227: CALL_OW 45
2231: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2232: LD_VAR 0 4
2236: PPUSH
2237: LD_INT 4
2239: PPUSH
2240: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
2244: LD_INT 35
2246: PPUSH
2247: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
2251: LD_VAR 0 4
2255: PPUSH
2256: LD_INT 14
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
2266: IFFALSE 2244
// PlaceHumanInUnit ( un , veh ) ;
2268: LD_VAR 0 3
2272: PPUSH
2273: LD_VAR 0 4
2277: PPUSH
2278: CALL_OW 52
// blockThread := false ;
2282: LD_ADDR_EXP 6
2286: PUSH
2287: LD_INT 0
2289: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
2290: LD_ADDR_VAR 0 2
2294: PUSH
2295: DOUBLE
2296: LD_INT 1
2298: DEC
2299: ST_TO_ADDR
2300: LD_VAR 0 5
2304: PUSH
2305: LD_INT 1
2307: ARRAY
2308: PUSH
2309: FOR_TO
2310: IFFALSE 2356
// BurnTreeXYR ( veh , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , 7 ) ;
2312: LD_VAR 0 4
2316: PPUSH
2317: LD_VAR 0 5
2321: PUSH
2322: LD_INT 1
2324: ARRAY
2325: PUSH
2326: LD_VAR 0 2
2330: ARRAY
2331: PPUSH
2332: LD_VAR 0 5
2336: PUSH
2337: LD_INT 2
2339: ARRAY
2340: PUSH
2341: LD_VAR 0 2
2345: ARRAY
2346: PPUSH
2347: LD_INT 7
2349: PPUSH
2350: CALL 74884 0 4
2354: GO 2309
2356: POP
2357: POP
// repeat wait ( 0 0$1 ) ;
2358: LD_INT 35
2360: PPUSH
2361: CALL_OW 67
// if IsDead ( veh ) then
2365: LD_VAR 0 4
2369: PPUSH
2370: CALL_OW 301
2374: IFFALSE 2378
// exit ;
2376: GO 2451
// until FilterUnitsInArea ( endOfTheForestArea , [ f_side , enemySide ] ) or not HasTask ( veh ) or not HasTask ( un ) ;
2378: LD_INT 16
2380: PPUSH
2381: LD_INT 22
2383: PUSH
2384: LD_EXP 12
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PPUSH
2393: CALL_OW 70
2397: PUSH
2398: LD_VAR 0 4
2402: PPUSH
2403: CALL_OW 314
2407: NOT
2408: OR
2409: PUSH
2410: LD_VAR 0 3
2414: PPUSH
2415: CALL_OW 314
2419: NOT
2420: OR
2421: IFFALSE 2358
// forestIsCleared := true ;
2423: LD_ADDR_EXP 7
2427: PUSH
2428: LD_INT 1
2430: ST_TO_ADDR
// enemyMobile := Join ( enemyMobile , veh ) ;
2431: LD_ADDR_EXP 10
2435: PUSH
2436: LD_EXP 10
2440: PPUSH
2441: LD_VAR 0 4
2445: PPUSH
2446: CALL 52801 0 2
2450: ST_TO_ADDR
// end ;
2451: LD_VAR 0 1
2455: RET
// export function SendWestGroup ; var i , un , skill ; begin
2456: LD_INT 0
2458: PPUSH
2459: PPUSH
2460: PPUSH
2461: PPUSH
// blockThread := true ;
2462: LD_ADDR_EXP 6
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
2470: LD_ADDR_VAR 0 4
2474: PUSH
2475: LD_INT 3
2477: PUSH
2478: LD_INT 5
2480: PUSH
2481: LD_INT 7
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: PUSH
2489: LD_OWVAR 67
2493: ARRAY
2494: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2495: LD_ADDR_VAR 0 2
2499: PUSH
2500: DOUBLE
2501: LD_INT 1
2503: DEC
2504: ST_TO_ADDR
2505: LD_INT 2
2507: PUSH
2508: LD_INT 3
2510: PUSH
2511: LD_INT 3
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: LIST
2518: PUSH
2519: LD_OWVAR 67
2523: ARRAY
2524: PUSH
2525: FOR_TO
2526: IFFALSE 2651
// begin uc_side := enemySide ;
2528: LD_ADDR_OWVAR 20
2532: PUSH
2533: LD_EXP 12
2537: ST_TO_ADDR
// uc_nation := nation_arabian ;
2538: LD_ADDR_OWVAR 21
2542: PUSH
2543: LD_INT 2
2545: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
2546: LD_INT 0
2548: PPUSH
2549: LD_VAR 0 4
2553: PPUSH
2554: CALL_OW 381
// un := CreateHuman ;
2558: LD_ADDR_VAR 0 3
2562: PUSH
2563: CALL_OW 44
2567: ST_TO_ADDR
// if i mod 3 = 0 then
2568: LD_VAR 0 2
2572: PUSH
2573: LD_INT 3
2575: MOD
2576: PUSH
2577: LD_INT 0
2579: EQUAL
2580: IFFALSE 2594
// SetClass ( un , class_mortar ) ;
2582: LD_VAR 0 3
2586: PPUSH
2587: LD_INT 8
2589: PPUSH
2590: CALL_OW 336
// enemyUnits := Join ( enemyUnits , un ) ;
2594: LD_ADDR_EXP 9
2598: PUSH
2599: LD_EXP 9
2603: PPUSH
2604: LD_VAR 0 3
2608: PPUSH
2609: CALL 52801 0 2
2613: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2614: LD_VAR 0 3
2618: PPUSH
2619: LD_INT 24
2621: PPUSH
2622: LD_INT 0
2624: PPUSH
2625: CALL_OW 49
// result := Join ( result , un ) ;
2629: LD_ADDR_VAR 0 1
2633: PUSH
2634: LD_VAR 0 1
2638: PPUSH
2639: LD_VAR 0 3
2643: PPUSH
2644: CALL 52801 0 2
2648: ST_TO_ADDR
// end ;
2649: GO 2525
2651: POP
2652: POP
// PrepareScientist ( false , skill ) ;
2653: LD_INT 0
2655: PPUSH
2656: LD_VAR 0 4
2660: PPUSH
2661: CALL_OW 384
// un := CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// enemyUnits := Join ( enemyUnits , un ) ;
2675: LD_ADDR_EXP 9
2679: PUSH
2680: LD_EXP 9
2684: PPUSH
2685: LD_VAR 0 3
2689: PPUSH
2690: CALL 52801 0 2
2694: ST_TO_ADDR
// PlaceUnitArea ( un , arabWestSpawnArea , false ) ;
2695: LD_VAR 0 3
2699: PPUSH
2700: LD_INT 24
2702: PPUSH
2703: LD_INT 0
2705: PPUSH
2706: CALL_OW 49
// result := Join ( result , un ) ;
2710: LD_ADDR_VAR 0 1
2714: PUSH
2715: LD_VAR 0 1
2719: PPUSH
2720: LD_VAR 0 3
2724: PPUSH
2725: CALL 52801 0 2
2729: ST_TO_ADDR
// ComAgressiveMove ( result , 24 , 37 ) ;
2730: LD_VAR 0 1
2734: PPUSH
2735: LD_INT 24
2737: PPUSH
2738: LD_INT 37
2740: PPUSH
2741: CALL_OW 114
// blockThread := false ;
2745: LD_ADDR_EXP 6
2749: PUSH
2750: LD_INT 0
2752: ST_TO_ADDR
// end ;
2753: LD_VAR 0 1
2757: RET
// export function PrepareForestOnslaught ; var i , veh , un , skill , v ; begin
2758: LD_INT 0
2760: PPUSH
2761: PPUSH
2762: PPUSH
2763: PPUSH
2764: PPUSH
2765: PPUSH
// blockThread := true ;
2766: LD_ADDR_EXP 6
2770: PUSH
2771: LD_INT 1
2773: ST_TO_ADDR
// v := convoyWave div 12 ;
2774: LD_ADDR_VAR 0 6
2778: PUSH
2779: LD_EXP 39
2783: PUSH
2784: LD_INT 12
2786: DIV
2787: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
2788: LD_ADDR_VAR 0 5
2792: PUSH
2793: LD_INT 4
2795: PUSH
2796: LD_INT 5
2798: PUSH
2799: LD_INT 6
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: LIST
2806: PUSH
2807: LD_OWVAR 67
2811: ARRAY
2812: PUSH
2813: LD_VAR 0 6
2817: PLUS
2818: ST_TO_ADDR
// if skill > 10 then
2819: LD_VAR 0 5
2823: PUSH
2824: LD_INT 10
2826: GREATER
2827: IFFALSE 2837
// skill := 10 ;
2829: LD_ADDR_VAR 0 5
2833: PUSH
2834: LD_INT 10
2836: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
2837: LD_ADDR_VAR 0 2
2841: PUSH
2842: DOUBLE
2843: LD_INT 1
2845: DEC
2846: ST_TO_ADDR
2847: LD_INT 2
2849: PUSH
2850: LD_INT 3
2852: PUSH
2853: LD_INT 3
2855: PUSH
2856: EMPTY
2857: LIST
2858: LIST
2859: LIST
2860: PUSH
2861: LD_OWVAR 67
2865: ARRAY
2866: PUSH
2867: FOR_TO
2868: IFFALSE 3071
// begin uc_side := enemySide ;
2870: LD_ADDR_OWVAR 20
2874: PUSH
2875: LD_EXP 12
2879: ST_TO_ADDR
// uc_nation := nation_arabian ;
2880: LD_ADDR_OWVAR 21
2884: PUSH
2885: LD_INT 2
2887: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_radar , ar_light_gun ] [ i mod 3 + 1 ] , 100 ) ;
2888: LD_INT 14
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 27
2899: PUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 23
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: PUSH
2911: LD_VAR 0 2
2915: PUSH
2916: LD_INT 3
2918: MOD
2919: PUSH
2920: LD_INT 1
2922: PLUS
2923: ARRAY
2924: PPUSH
2925: LD_INT 100
2927: PPUSH
2928: CALL 19950 0 5
// veh := CreateVehicle ;
2932: LD_ADDR_VAR 0 3
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// result := Join ( result , veh ) ;
2942: LD_ADDR_VAR 0 1
2946: PUSH
2947: LD_VAR 0 1
2951: PPUSH
2952: LD_VAR 0 3
2956: PPUSH
2957: CALL 52801 0 2
2961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2962: LD_VAR 0 3
2966: PPUSH
2967: LD_INT 4
2969: PPUSH
2970: CALL_OW 233
// PrepareMechanic ( false , skill ) ;
2974: LD_INT 0
2976: PPUSH
2977: LD_VAR 0 5
2981: PPUSH
2982: CALL_OW 383
// un := CreateHuman ;
2986: LD_ADDR_VAR 0 4
2990: PUSH
2991: CALL_OW 44
2995: ST_TO_ADDR
// result := Join ( result , un ) ;
2996: LD_ADDR_VAR 0 1
3000: PUSH
3001: LD_VAR 0 1
3005: PPUSH
3006: LD_VAR 0 4
3010: PPUSH
3011: CALL 52801 0 2
3015: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3016: LD_INT 35
3018: PPUSH
3019: CALL_OW 67
// until PlaceUnitArea ( veh , arabEastSpawnArea , false ) ;
3023: LD_VAR 0 3
3027: PPUSH
3028: LD_INT 14
3030: PPUSH
3031: LD_INT 0
3033: PPUSH
3034: CALL_OW 49
3038: IFFALSE 3016
// PlaceHumanInUnit ( un , veh ) ;
3040: LD_VAR 0 4
3044: PPUSH
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 52
// ComMoveXY ( veh , 159 , 53 ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 159
3061: PPUSH
3062: LD_INT 53
3064: PPUSH
3065: CALL_OW 111
// end ;
3069: GO 2867
3071: POP
3072: POP
// blockThread := false ;
3073: LD_ADDR_EXP 6
3077: PUSH
3078: LD_INT 0
3080: ST_TO_ADDR
// end ;
3081: LD_VAR 0 1
3085: RET
// export function SendEastGroup ; var i , un , skill ; begin
3086: LD_INT 0
3088: PPUSH
3089: PPUSH
3090: PPUSH
3091: PPUSH
// blockThread := true ;
3092: LD_ADDR_EXP 6
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// skill := [ 3 , 5 , 7 ] [ Difficulty ] ;
3100: LD_ADDR_VAR 0 4
3104: PUSH
3105: LD_INT 3
3107: PUSH
3108: LD_INT 5
3110: PUSH
3111: LD_INT 7
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: LIST
3118: PUSH
3119: LD_OWVAR 67
3123: ARRAY
3124: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3125: LD_ADDR_VAR 0 2
3129: PUSH
3130: DOUBLE
3131: LD_INT 1
3133: DEC
3134: ST_TO_ADDR
3135: LD_INT 4
3137: PUSH
3138: LD_INT 5
3140: PUSH
3141: LD_INT 6
3143: PUSH
3144: EMPTY
3145: LIST
3146: LIST
3147: LIST
3148: PUSH
3149: LD_OWVAR 67
3153: ARRAY
3154: PUSH
3155: FOR_TO
3156: IFFALSE 3261
// begin uc_side := enemySide ;
3158: LD_ADDR_OWVAR 20
3162: PUSH
3163: LD_EXP 12
3167: ST_TO_ADDR
// uc_nation := nation_arabian ;
3168: LD_ADDR_OWVAR 21
3172: PUSH
3173: LD_INT 2
3175: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3176: LD_INT 0
3178: PPUSH
3179: LD_VAR 0 4
3183: PPUSH
3184: CALL_OW 381
// un := CreateHuman ;
3188: LD_ADDR_VAR 0 3
3192: PUSH
3193: CALL_OW 44
3197: ST_TO_ADDR
// if i mod 3 = 0 then
3198: LD_VAR 0 2
3202: PUSH
3203: LD_INT 3
3205: MOD
3206: PUSH
3207: LD_INT 0
3209: EQUAL
3210: IFFALSE 3224
// SetClass ( un , class_mortar ) ;
3212: LD_VAR 0 3
3216: PPUSH
3217: LD_INT 8
3219: PPUSH
3220: CALL_OW 336
// PlaceUnitArea ( un , arabSouthSpawnArea , false ) ;
3224: LD_VAR 0 3
3228: PPUSH
3229: LD_INT 26
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 49
// result := Join ( result , un ) ;
3239: LD_ADDR_VAR 0 1
3243: PUSH
3244: LD_VAR 0 1
3248: PPUSH
3249: LD_VAR 0 3
3253: PPUSH
3254: CALL 52801 0 2
3258: ST_TO_ADDR
// end ;
3259: GO 3155
3261: POP
3262: POP
// ComAgressiveMove ( result , 219 , 168 ) ;
3263: LD_VAR 0 1
3267: PPUSH
3268: LD_INT 219
3270: PPUSH
3271: LD_INT 168
3273: PPUSH
3274: CALL_OW 114
// blockThread := false ;
3278: LD_ADDR_EXP 6
3282: PUSH
3283: LD_INT 0
3285: ST_TO_ADDR
// end ;
3286: LD_VAR 0 1
3290: RET
// export function SendNorthGroup ; var i , un , skill , v ; begin
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
3295: PPUSH
3296: PPUSH
3297: PPUSH
// blockThread := true ;
3298: LD_ADDR_EXP 6
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// v := convoyWave div 12 ;
3306: LD_ADDR_VAR 0 5
3310: PUSH
3311: LD_EXP 39
3315: PUSH
3316: LD_INT 12
3318: DIV
3319: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3320: LD_ADDR_VAR 0 4
3324: PUSH
3325: LD_INT 4
3327: PUSH
3328: LD_INT 5
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: EMPTY
3335: LIST
3336: LIST
3337: LIST
3338: PUSH
3339: LD_OWVAR 67
3343: ARRAY
3344: PUSH
3345: LD_VAR 0 5
3349: PLUS
3350: ST_TO_ADDR
// if skill > 10 then
3351: LD_VAR 0 4
3355: PUSH
3356: LD_INT 10
3358: GREATER
3359: IFFALSE 3369
// skill := 10 ;
3361: LD_ADDR_VAR 0 4
3365: PUSH
3366: LD_INT 10
3368: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3369: LD_ADDR_VAR 0 2
3373: PUSH
3374: DOUBLE
3375: LD_INT 1
3377: DEC
3378: ST_TO_ADDR
3379: LD_INT 3
3381: PUSH
3382: LD_INT 4
3384: PUSH
3385: LD_INT 5
3387: PUSH
3388: EMPTY
3389: LIST
3390: LIST
3391: LIST
3392: PUSH
3393: LD_OWVAR 67
3397: ARRAY
3398: PUSH
3399: FOR_TO
3400: IFFALSE 3505
// begin uc_side := enemySide ;
3402: LD_ADDR_OWVAR 20
3406: PUSH
3407: LD_EXP 12
3411: ST_TO_ADDR
// uc_nation := nation_arabian ;
3412: LD_ADDR_OWVAR 21
3416: PUSH
3417: LD_INT 2
3419: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3420: LD_INT 0
3422: PPUSH
3423: LD_VAR 0 4
3427: PPUSH
3428: CALL_OW 381
// un := CreateHuman ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: CALL_OW 44
3441: ST_TO_ADDR
// if i mod 3 = 0 then
3442: LD_VAR 0 2
3446: PUSH
3447: LD_INT 3
3449: MOD
3450: PUSH
3451: LD_INT 0
3453: EQUAL
3454: IFFALSE 3468
// SetClass ( un , class_mortar ) ;
3456: LD_VAR 0 3
3460: PPUSH
3461: LD_INT 8
3463: PPUSH
3464: CALL_OW 336
// PlaceUnitArea ( un , arabNorthForestSpawnArea , false ) ;
3468: LD_VAR 0 3
3472: PPUSH
3473: LD_INT 27
3475: PPUSH
3476: LD_INT 0
3478: PPUSH
3479: CALL_OW 49
// result := Join ( result , un ) ;
3483: LD_ADDR_VAR 0 1
3487: PUSH
3488: LD_VAR 0 1
3492: PPUSH
3493: LD_VAR 0 3
3497: PPUSH
3498: CALL 52801 0 2
3502: ST_TO_ADDR
// end ;
3503: GO 3399
3505: POP
3506: POP
// ComAgressiveMove ( result , 77 , 23 ) ;
3507: LD_VAR 0 1
3511: PPUSH
3512: LD_INT 77
3514: PPUSH
3515: LD_INT 23
3517: PPUSH
3518: CALL_OW 114
// blockThread := false ;
3522: LD_ADDR_EXP 6
3526: PUSH
3527: LD_INT 0
3529: ST_TO_ADDR
// end ;
3530: LD_VAR 0 1
3534: RET
// export function SendEastGroup2 ; var i , un , skill , v ; begin
3535: LD_INT 0
3537: PPUSH
3538: PPUSH
3539: PPUSH
3540: PPUSH
3541: PPUSH
// blockThread := true ;
3542: LD_ADDR_EXP 6
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// v := convoyWave div 12 ;
3550: LD_ADDR_VAR 0 5
3554: PUSH
3555: LD_EXP 39
3559: PUSH
3560: LD_INT 12
3562: DIV
3563: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] + v ;
3564: LD_ADDR_VAR 0 4
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: LD_INT 5
3574: PUSH
3575: LD_INT 6
3577: PUSH
3578: EMPTY
3579: LIST
3580: LIST
3581: LIST
3582: PUSH
3583: LD_OWVAR 67
3587: ARRAY
3588: PUSH
3589: LD_VAR 0 5
3593: PLUS
3594: ST_TO_ADDR
// if skill > 10 then
3595: LD_VAR 0 4
3599: PUSH
3600: LD_INT 10
3602: GREATER
3603: IFFALSE 3613
// skill := 10 ;
3605: LD_ADDR_VAR 0 4
3609: PUSH
3610: LD_INT 10
3612: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: DOUBLE
3619: LD_INT 1
3621: DEC
3622: ST_TO_ADDR
3623: LD_INT 3
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: LD_INT 4
3631: PUSH
3632: EMPTY
3633: LIST
3634: LIST
3635: LIST
3636: PUSH
3637: LD_OWVAR 67
3641: ARRAY
3642: PUSH
3643: FOR_TO
3644: IFFALSE 3749
// begin uc_side := enemySide ;
3646: LD_ADDR_OWVAR 20
3650: PUSH
3651: LD_EXP 12
3655: ST_TO_ADDR
// uc_nation := nation_arabian ;
3656: LD_ADDR_OWVAR 21
3660: PUSH
3661: LD_INT 2
3663: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
3664: LD_INT 0
3666: PPUSH
3667: LD_VAR 0 4
3671: PPUSH
3672: CALL_OW 381
// un := CreateHuman ;
3676: LD_ADDR_VAR 0 3
3680: PUSH
3681: CALL_OW 44
3685: ST_TO_ADDR
// if i mod 3 = 0 then
3686: LD_VAR 0 2
3690: PUSH
3691: LD_INT 3
3693: MOD
3694: PUSH
3695: LD_INT 0
3697: EQUAL
3698: IFFALSE 3712
// SetClass ( un , class_mortar ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_INT 8
3707: PPUSH
3708: CALL_OW 336
// PlaceUnitArea ( un , arabEastForestSpawnArea , false ) ;
3712: LD_VAR 0 3
3716: PPUSH
3717: LD_INT 28
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 49
// result := Join ( result , un ) ;
3727: LD_ADDR_VAR 0 1
3731: PUSH
3732: LD_VAR 0 1
3736: PPUSH
3737: LD_VAR 0 3
3741: PPUSH
3742: CALL 52801 0 2
3746: ST_TO_ADDR
// end ;
3747: GO 3643
3749: POP
3750: POP
// ComAgressiveMove ( result , 147 , 100 ) ;
3751: LD_VAR 0 1
3755: PPUSH
3756: LD_INT 147
3758: PPUSH
3759: LD_INT 100
3761: PPUSH
3762: CALL_OW 114
// blockThread := false ;
3766: LD_ADDR_EXP 6
3770: PUSH
3771: LD_INT 0
3773: ST_TO_ADDR
// end ; end_of_file
3774: LD_VAR 0 1
3778: RET
// export multi_gametype , multi_sides , multi_side_teams , multi_nations , multi_teams , multi_spec , multi_pos_area , multi_allowed_nations , multi_bots , multi_teamgame , multi_custom_commanders , multi_settings , multi_settings_counter , multi_pep_amount , multi_skill_level , multi_crates_spawn , multi_vehicles , multi_commanders , multi_loosers , multi_players_amount , multi_points_to_victory , multi_buildings ; export function InitMultiplayer ; var i , j , x , tmp ; begin
3779: LD_INT 0
3781: PPUSH
3782: PPUSH
3783: PPUSH
3784: PPUSH
3785: PPUSH
// multi_settings_counter := 5 ;
3786: LD_ADDR_EXP 26
3790: PUSH
3791: LD_INT 5
3793: ST_TO_ADDR
// multi_settings := [ ] ;
3794: LD_ADDR_EXP 25
3798: PUSH
3799: EMPTY
3800: ST_TO_ADDR
// if Multiplayer then
3801: LD_OWVAR 4
3805: IFFALSE 3985
// begin your_side := mp_player_side ;
3807: LD_ADDR_OWVAR 2
3811: PUSH
3812: LD_OWVAR 7
3816: ST_TO_ADDR
// multi_gametype := mp_game_type ;
3817: LD_ADDR_EXP 14
3821: PUSH
3822: LD_OWVAR 6
3826: ST_TO_ADDR
// multi_sides := mp_sides_positions ;
3827: LD_ADDR_EXP 15
3831: PUSH
3832: LD_OWVAR 17
3836: ST_TO_ADDR
// multi_side_teams := mp_sides_teams ;
3837: LD_ADDR_EXP 16
3841: PUSH
3842: LD_OWVAR 15
3846: ST_TO_ADDR
// multi_nations := mp_sides_nations ;
3847: LD_ADDR_EXP 17
3851: PUSH
3852: LD_OWVAR 16
3856: ST_TO_ADDR
// multi_teams := [ [ ] ] ;
3857: LD_ADDR_EXP 18
3861: PUSH
3862: EMPTY
3863: PUSH
3864: EMPTY
3865: LIST
3866: ST_TO_ADDR
// for i in mp_teams do
3867: LD_ADDR_VAR 0 2
3871: PUSH
3872: LD_OWVAR 12
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3921
// if i then
3880: LD_VAR 0 2
3884: IFFALSE 3919
// multi_teams := Replace ( multi_teams , 1 , multi_teams [ 1 ] union i ) ;
3886: LD_ADDR_EXP 18
3890: PUSH
3891: LD_EXP 18
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: LD_EXP 18
3903: PUSH
3904: LD_INT 1
3906: ARRAY
3907: PUSH
3908: LD_VAR 0 2
3912: UNION
3913: PPUSH
3914: CALL_OW 1
3918: ST_TO_ADDR
3919: GO 3877
3921: POP
3922: POP
// for i := 1 to multi_settings_counter do
3923: LD_ADDR_VAR 0 2
3927: PUSH
3928: DOUBLE
3929: LD_INT 1
3931: DEC
3932: ST_TO_ADDR
3933: LD_EXP 26
3937: PUSH
3938: FOR_TO
3939: IFFALSE 3981
// multi_settings := Replace ( multi_settings , multi_settings + 1 , GetMultiplayerSetting ( i ) + 1 ) ;
3941: LD_ADDR_EXP 25
3945: PUSH
3946: LD_EXP 25
3950: PPUSH
3951: LD_EXP 25
3955: PUSH
3956: LD_INT 1
3958: PLUS
3959: PPUSH
3960: LD_VAR 0 2
3964: PPUSH
3965: CALL_OW 426
3969: PUSH
3970: LD_INT 1
3972: PLUS
3973: PPUSH
3974: CALL_OW 1
3978: ST_TO_ADDR
3979: GO 3938
3981: POP
3982: POP
// end else
3983: GO 4167
// begin your_side := 3 ;
3985: LD_ADDR_OWVAR 2
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// multi_gametype := 1 ;
3993: LD_ADDR_EXP 14
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// multi_sides := [ 0 , 0 , 2 , 0 , 0 , 0 , 1 , 0 ] ;
4001: LD_ADDR_EXP 15
4005: PUSH
4006: LD_INT 0
4008: PUSH
4009: LD_INT 0
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: LD_INT 0
4017: PUSH
4018: LD_INT 0
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 1
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: LIST
4038: LIST
4039: ST_TO_ADDR
// multi_side_teams := [ 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4040: LD_ADDR_EXP 16
4044: PUSH
4045: LD_INT 0
4047: PUSH
4048: LD_INT 0
4050: PUSH
4051: LD_INT 1
4053: PUSH
4054: LD_INT 0
4056: PUSH
4057: LD_INT 0
4059: PUSH
4060: LD_INT 0
4062: PUSH
4063: LD_INT 1
4065: PUSH
4066: LD_INT 0
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: ST_TO_ADDR
// multi_nations := [ 0 , 0 , 3 , 0 , 0 , 0 , 3 , 0 ] ;
4079: LD_ADDR_EXP 17
4083: PUSH
4084: LD_INT 0
4086: PUSH
4087: LD_INT 0
4089: PUSH
4090: LD_INT 3
4092: PUSH
4093: LD_INT 0
4095: PUSH
4096: LD_INT 0
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 3
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: LIST
4116: LIST
4117: ST_TO_ADDR
// multi_teams := [ [ 3 , 7 ] ] ;
4118: LD_ADDR_EXP 18
4122: PUSH
4123: LD_INT 3
4125: PUSH
4126: LD_INT 7
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: EMPTY
4134: LIST
4135: ST_TO_ADDR
// multi_settings := [ 2 , 1 , 4 , 3 , 2 , 4 ] ;
4136: LD_ADDR_EXP 25
4140: PUSH
4141: LD_INT 2
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: LD_INT 4
4149: PUSH
4150: LD_INT 3
4152: PUSH
4153: LD_INT 2
4155: PUSH
4156: LD_INT 4
4158: PUSH
4159: EMPTY
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: ST_TO_ADDR
// end ; multi_spec := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4167: LD_ADDR_EXP 19
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: LD_INT 0
4186: PUSH
4187: LD_INT 0
4189: PUSH
4190: LD_INT 0
4192: PUSH
4193: LD_INT 0
4195: PUSH
4196: EMPTY
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: LIST
4204: LIST
4205: ST_TO_ADDR
// multi_bots := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4206: LD_ADDR_EXP 22
4210: PUSH
4211: LD_INT 0
4213: PUSH
4214: LD_INT 0
4216: PUSH
4217: LD_INT 0
4219: PUSH
4220: LD_INT 0
4222: PUSH
4223: LD_INT 0
4225: PUSH
4226: LD_INT 0
4228: PUSH
4229: LD_INT 0
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: ST_TO_ADDR
// multi_loosers := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
4245: LD_ADDR_EXP 32
4249: PUSH
4250: LD_INT 0
4252: PUSH
4253: LD_INT 0
4255: PUSH
4256: LD_INT 0
4258: PUSH
4259: LD_INT 0
4261: PUSH
4262: LD_INT 0
4264: PUSH
4265: LD_INT 0
4267: PUSH
4268: LD_INT 0
4270: PUSH
4271: LD_INT 0
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: LIST
4278: LIST
4279: LIST
4280: LIST
4281: LIST
4282: LIST
4283: ST_TO_ADDR
// multi_teamgame := true ;
4284: LD_ADDR_EXP 23
4288: PUSH
4289: LD_INT 1
4291: ST_TO_ADDR
// multi_allowed_nations := [ 3 ] ;
4292: LD_ADDR_EXP 21
4296: PUSH
4297: LD_INT 3
4299: PUSH
4300: EMPTY
4301: LIST
4302: ST_TO_ADDR
// multi_custom_commanders := true ;
4303: LD_ADDR_EXP 24
4307: PUSH
4308: LD_INT 1
4310: ST_TO_ADDR
// multi_commanders := [ ] ;
4311: LD_ADDR_EXP 31
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// multi_players_amount := 0 ;
4318: LD_ADDR_EXP 33
4322: PUSH
4323: LD_INT 0
4325: ST_TO_ADDR
// multi_pos_area := [ [ player1SpawnArea , player1SpawnArea ] , [ player2SpawnArea , player2VehSpawnArea ] ] ;
4326: LD_ADDR_EXP 20
4330: PUSH
4331: LD_INT 3
4333: PUSH
4334: LD_INT 3
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 4
4343: PUSH
4344: LD_INT 6
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: ST_TO_ADDR
// multi_buildings := [ [ [ b_depot , [ 108 , 110 , 2 ] ] , [ b_bunker , [ 117 , 101 , 3 ] , ru_gun ] , [ b_bunker , [ 124 , 107 , 3 ] , ru_gatling_gun ] , [ b_bunker , [ 94 , 114 , 1 ] , ru_gun ] , [ b_bunker , [ 110 , 94 , 4 ] , ru_gun ] , [ b_oil_mine , [ 126 , 124 , 5 ] ] , [ b_oil_power , [ 101 , 115 , 0 ] ] , [ b_oil_power , [ 125 , 121 , 3 ] ] , [ b_factory , [ 109 , 126 , 0 ] ] , [ b_ext_gun , [ 112 , 129 , 5 ] ] ] , [ [ b_breastwork , [ 95 , 36 , 4 ] ] , [ b_breastwork , [ 116 , 66 , 3 ] ] , [ b_breastwork , [ 157 , 159 , 4 ] ] , [ b_breastwork , [ 75 , 88 , 3 ] ] , [ b_breastwork , [ 63 , 82 , 3 ] ] , [ b_breastwork , [ 106 , 147 , 4 ] ] , [ b_workshop , [ 124 , 164 , 5 ] ] , [ b_armoury , [ 129 , 159 , 4 ] ] , ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4355: LD_ADDR_EXP 35
4359: PUSH
4360: LD_INT 0
4362: PUSH
4363: LD_INT 108
4365: PUSH
4366: LD_INT 110
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: LD_INT 32
4383: PUSH
4384: LD_INT 117
4386: PUSH
4387: LD_INT 101
4389: PUSH
4390: LD_INT 3
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: LIST
4397: PUSH
4398: LD_INT 44
4400: PUSH
4401: EMPTY
4402: LIST
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 32
4408: PUSH
4409: LD_INT 124
4411: PUSH
4412: LD_INT 107
4414: PUSH
4415: LD_INT 3
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: EMPTY
4427: LIST
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 32
4433: PUSH
4434: LD_INT 94
4436: PUSH
4437: LD_INT 114
4439: PUSH
4440: LD_INT 1
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_INT 44
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 32
4458: PUSH
4459: LD_INT 110
4461: PUSH
4462: LD_INT 94
4464: PUSH
4465: LD_INT 4
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 44
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: LIST
4480: PUSH
4481: LD_INT 29
4483: PUSH
4484: LD_INT 126
4486: PUSH
4487: LD_INT 124
4489: PUSH
4490: LD_INT 5
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 26
4504: PUSH
4505: LD_INT 101
4507: PUSH
4508: LD_INT 115
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 26
4525: PUSH
4526: LD_INT 125
4528: PUSH
4529: LD_INT 121
4531: PUSH
4532: LD_INT 3
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: PUSH
4544: LD_INT 3
4546: PUSH
4547: LD_INT 109
4549: PUSH
4550: LD_INT 126
4552: PUSH
4553: LD_INT 0
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: PUSH
4561: EMPTY
4562: LIST
4563: LIST
4564: PUSH
4565: LD_INT 17
4567: PUSH
4568: LD_INT 112
4570: PUSH
4571: LD_INT 129
4573: PUSH
4574: LD_INT 5
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PUSH
4586: EMPTY
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: PUSH
4598: LD_INT 31
4600: PUSH
4601: LD_INT 95
4603: PUSH
4604: LD_INT 36
4606: PUSH
4607: LD_INT 4
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: PUSH
4619: LD_INT 31
4621: PUSH
4622: LD_INT 116
4624: PUSH
4625: LD_INT 66
4627: PUSH
4628: LD_INT 3
4630: PUSH
4631: EMPTY
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 31
4642: PUSH
4643: LD_INT 157
4645: PUSH
4646: LD_INT 159
4648: PUSH
4649: LD_INT 4
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PUSH
4657: EMPTY
4658: LIST
4659: LIST
4660: PUSH
4661: LD_INT 31
4663: PUSH
4664: LD_INT 75
4666: PUSH
4667: LD_INT 88
4669: PUSH
4670: LD_INT 3
4672: PUSH
4673: EMPTY
4674: LIST
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 31
4684: PUSH
4685: LD_INT 63
4687: PUSH
4688: LD_INT 82
4690: PUSH
4691: LD_INT 3
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: LIST
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 31
4705: PUSH
4706: LD_INT 106
4708: PUSH
4709: LD_INT 147
4711: PUSH
4712: LD_INT 4
4714: PUSH
4715: EMPTY
4716: LIST
4717: LIST
4718: LIST
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 2
4726: PUSH
4727: LD_INT 124
4729: PUSH
4730: LD_INT 164
4732: PUSH
4733: LD_INT 5
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 4
4747: PUSH
4748: LD_INT 129
4750: PUSH
4751: LD_INT 159
4753: PUSH
4754: LD_INT 4
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: EMPTY
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: PUSH
4778: EMPTY
4779: PUSH
4780: EMPTY
4781: PUSH
4782: EMPTY
4783: PUSH
4784: EMPTY
4785: PUSH
4786: EMPTY
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: ST_TO_ADDR
// multi_vehicles := [ [ ] , [ [ ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] , [ ru_medium_tracked , engine_combustion , control_manual , [ ru_gun , ru_gatling_gun , ru_heavy_machine_gun ] [ Difficulty ] ] ] , [ ] , [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4798: LD_ADDR_EXP 30
4802: PUSH
4803: EMPTY
4804: PUSH
4805: LD_INT 21
4807: PUSH
4808: LD_INT 1
4810: PUSH
4811: LD_INT 1
4813: PUSH
4814: LD_INT 42
4816: PUSH
4817: EMPTY
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: LD_INT 22
4825: PUSH
4826: LD_INT 1
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: LD_INT 51
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: PUSH
4841: LD_INT 22
4843: PUSH
4844: LD_INT 1
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: LD_INT 44
4852: PUSH
4853: LD_INT 43
4855: PUSH
4856: LD_INT 42
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_OWVAR 67
4868: ARRAY
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 22
4878: PUSH
4879: LD_INT 1
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: LD_INT 44
4887: PUSH
4888: LD_INT 43
4890: PUSH
4891: LD_INT 42
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: PUSH
4899: LD_OWVAR 67
4903: ARRAY
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 22
4913: PUSH
4914: LD_INT 1
4916: PUSH
4917: LD_INT 1
4919: PUSH
4920: LD_INT 44
4922: PUSH
4923: LD_INT 43
4925: PUSH
4926: LD_INT 42
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: LD_OWVAR 67
4938: ARRAY
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: LIST
4950: LIST
4951: LIST
4952: PUSH
4953: EMPTY
4954: PUSH
4955: EMPTY
4956: PUSH
4957: EMPTY
4958: PUSH
4959: EMPTY
4960: PUSH
4961: EMPTY
4962: PUSH
4963: EMPTY
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: ST_TO_ADDR
// for i := 1 to 8 do
4975: LD_ADDR_VAR 0 2
4979: PUSH
4980: DOUBLE
4981: LD_INT 1
4983: DEC
4984: ST_TO_ADDR
4985: LD_INT 8
4987: PUSH
4988: FOR_TO
4989: IFFALSE 5318
// begin if Multiplayer_GetPlayerIsSpec ( i ) then
4991: LD_VAR 0 2
4995: PPUSH
4996: CALL_OW 530
5000: IFFALSE 5158
// begin multi_spec := Replace ( multi_spec , i , 1 ) ;
5002: LD_ADDR_EXP 19
5006: PUSH
5007: LD_EXP 19
5011: PPUSH
5012: LD_VAR 0 2
5016: PPUSH
5017: LD_INT 1
5019: PPUSH
5020: CALL_OW 1
5024: ST_TO_ADDR
// multi_nations := Replace ( multi_nations , i , 0 ) ;
5025: LD_ADDR_EXP 17
5029: PUSH
5030: LD_EXP 17
5034: PPUSH
5035: LD_VAR 0 2
5039: PPUSH
5040: LD_INT 0
5042: PPUSH
5043: CALL_OW 1
5047: ST_TO_ADDR
// multi_sides := Replace ( multi_sides , i , 0 ) ;
5048: LD_ADDR_EXP 15
5052: PUSH
5053: LD_EXP 15
5057: PPUSH
5058: LD_VAR 0 2
5062: PPUSH
5063: LD_INT 0
5065: PPUSH
5066: CALL_OW 1
5070: ST_TO_ADDR
// for j = 1 to multi_teams do
5071: LD_ADDR_VAR 0 3
5075: PUSH
5076: DOUBLE
5077: LD_INT 1
5079: DEC
5080: ST_TO_ADDR
5081: LD_EXP 18
5085: PUSH
5086: FOR_TO
5087: IFFALSE 5156
// begin if i in multi_teams [ j ] then
5089: LD_VAR 0 2
5093: PUSH
5094: LD_EXP 18
5098: PUSH
5099: LD_VAR 0 3
5103: ARRAY
5104: IN
5105: IFFALSE 5154
// begin tmp := multi_teams [ j ] diff i ;
5107: LD_ADDR_VAR 0 5
5111: PUSH
5112: LD_EXP 18
5116: PUSH
5117: LD_VAR 0 3
5121: ARRAY
5122: PUSH
5123: LD_VAR 0 2
5127: DIFF
5128: ST_TO_ADDR
// multi_teams := Replace ( multi_teams , j , tmp ) ;
5129: LD_ADDR_EXP 18
5133: PUSH
5134: LD_EXP 18
5138: PPUSH
5139: LD_VAR 0 3
5143: PPUSH
5144: LD_VAR 0 5
5148: PPUSH
5149: CALL_OW 1
5153: ST_TO_ADDR
// end ; end ;
5154: GO 5086
5156: POP
5157: POP
// end ; if multi_nations [ i ] and not multi_nations [ i ] in multi_allowed_nations then
5158: LD_EXP 17
5162: PUSH
5163: LD_VAR 0 2
5167: ARRAY
5168: PUSH
5169: LD_EXP 17
5173: PUSH
5174: LD_VAR 0 2
5178: ARRAY
5179: PUSH
5180: LD_EXP 21
5184: IN
5185: NOT
5186: AND
5187: IFFALSE 5228
// multi_nations := Replace ( multi_nations , i , multi_allowed_nations [ rand ( 1 , multi_allowed_nations ) ] ) ;
5189: LD_ADDR_EXP 17
5193: PUSH
5194: LD_EXP 17
5198: PPUSH
5199: LD_VAR 0 2
5203: PPUSH
5204: LD_EXP 21
5208: PUSH
5209: LD_INT 1
5211: PPUSH
5212: LD_EXP 21
5216: PPUSH
5217: CALL_OW 12
5221: ARRAY
5222: PPUSH
5223: CALL_OW 1
5227: ST_TO_ADDR
// if not multi_nations [ i ] and not multi_sides [ i ] and not multi_spec [ i ] then
5228: LD_EXP 17
5232: PUSH
5233: LD_VAR 0 2
5237: ARRAY
5238: NOT
5239: PUSH
5240: LD_EXP 15
5244: PUSH
5245: LD_VAR 0 2
5249: ARRAY
5250: NOT
5251: AND
5252: PUSH
5253: LD_EXP 19
5257: PUSH
5258: LD_VAR 0 2
5262: ARRAY
5263: NOT
5264: AND
5265: IFFALSE 5290
// multi_bots := Replace ( multi_bots , i , 1 ) ;
5267: LD_ADDR_EXP 22
5271: PUSH
5272: LD_EXP 22
5276: PPUSH
5277: LD_VAR 0 2
5281: PPUSH
5282: LD_INT 1
5284: PPUSH
5285: CALL_OW 1
5289: ST_TO_ADDR
// if multi_sides [ i ] then
5290: LD_EXP 15
5294: PUSH
5295: LD_VAR 0 2
5299: ARRAY
5300: IFFALSE 5316
// multi_players_amount := multi_players_amount + 1 ;
5302: LD_ADDR_EXP 33
5306: PUSH
5307: LD_EXP 33
5311: PUSH
5312: LD_INT 1
5314: PLUS
5315: ST_TO_ADDR
// end ;
5316: GO 4988
5318: POP
5319: POP
// for i in multi_teams do
5320: LD_ADDR_VAR 0 2
5324: PUSH
5325: LD_EXP 18
5329: PUSH
5330: FOR_IN
5331: IFFALSE 5439
// begin for j = 2 to i do
5333: LD_ADDR_VAR 0 3
5337: PUSH
5338: DOUBLE
5339: LD_INT 2
5341: DEC
5342: ST_TO_ADDR
5343: LD_VAR 0 2
5347: PUSH
5348: FOR_TO
5349: IFFALSE 5435
// begin ChangeSideFog ( i [ j ] , i [ 1 ] ) ;
5351: LD_VAR 0 2
5355: PUSH
5356: LD_VAR 0 3
5360: ARRAY
5361: PPUSH
5362: LD_VAR 0 2
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: CALL_OW 343
// for x = 1 to j - 1 do
5375: LD_ADDR_VAR 0 4
5379: PUSH
5380: DOUBLE
5381: LD_INT 1
5383: DEC
5384: ST_TO_ADDR
5385: LD_VAR 0 3
5389: PUSH
5390: LD_INT 1
5392: MINUS
5393: PUSH
5394: FOR_TO
5395: IFFALSE 5431
// SetAttitude ( i [ j ] , i [ x ] , att_friend , true ) ;
5397: LD_VAR 0 2
5401: PUSH
5402: LD_VAR 0 3
5406: ARRAY
5407: PPUSH
5408: LD_VAR 0 2
5412: PUSH
5413: LD_VAR 0 4
5417: ARRAY
5418: PPUSH
5419: LD_INT 1
5421: PPUSH
5422: LD_INT 1
5424: PPUSH
5425: CALL_OW 80
5429: GO 5394
5431: POP
5432: POP
// end ;
5433: GO 5348
5435: POP
5436: POP
// end ;
5437: GO 5330
5439: POP
5440: POP
// Difficulty := [ 1 , 2 , 3 ] [ multi_settings [ 1 ] ] ;
5441: LD_ADDR_OWVAR 67
5445: PUSH
5446: LD_INT 1
5448: PUSH
5449: LD_INT 2
5451: PUSH
5452: LD_INT 3
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: LIST
5459: PUSH
5460: LD_EXP 25
5464: PUSH
5465: LD_INT 1
5467: ARRAY
5468: ARRAY
5469: ST_TO_ADDR
// multi_pep_amount := [ 9 , 12 , 15 ] [ multi_settings [ 2 ] ] ;
5470: LD_ADDR_EXP 27
5474: PUSH
5475: LD_INT 9
5477: PUSH
5478: LD_INT 12
5480: PUSH
5481: LD_INT 15
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: PUSH
5489: LD_EXP 25
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: ARRAY
5498: ST_TO_ADDR
// multi_skill_level := [ 1 , 3 , 4 , 6 ] [ multi_settings [ 3 ] ] ;
5499: LD_ADDR_EXP 28
5503: PUSH
5504: LD_INT 1
5506: PUSH
5507: LD_INT 3
5509: PUSH
5510: LD_INT 4
5512: PUSH
5513: LD_INT 6
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: LD_EXP 25
5526: PUSH
5527: LD_INT 3
5529: ARRAY
5530: ARRAY
5531: ST_TO_ADDR
// multi_points_to_victory := [ 3500 , 5000 , 7500 , 10000 , 15000 ] [ multi_settings [ 4 ] ] ;
5532: LD_ADDR_EXP 34
5536: PUSH
5537: LD_INT 3500
5539: PUSH
5540: LD_INT 5000
5542: PUSH
5543: LD_INT 7500
5545: PUSH
5546: LD_INT 10000
5548: PUSH
5549: LD_INT 15000
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PUSH
5559: LD_EXP 25
5563: PUSH
5564: LD_INT 4
5566: ARRAY
5567: ARRAY
5568: ST_TO_ADDR
// multi_crates_spawn := [ [ 1000 , 0 0$36 ] , [ 2000 , 0 0$30 ] , [ 3000 , 0 0$24 ] , [ 4000 , 0 0$18 ] ] [ multi_settings [ 5 ] ] ;
5569: LD_ADDR_EXP 29
5573: PUSH
5574: LD_INT 1000
5576: PUSH
5577: LD_INT 1260
5579: PUSH
5580: EMPTY
5581: LIST
5582: LIST
5583: PUSH
5584: LD_INT 2000
5586: PUSH
5587: LD_INT 1050
5589: PUSH
5590: EMPTY
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 3000
5596: PUSH
5597: LD_INT 840
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 4000
5606: PUSH
5607: LD_INT 630
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: PUSH
5620: LD_EXP 25
5624: PUSH
5625: LD_INT 5
5627: ARRAY
5628: ARRAY
5629: ST_TO_ADDR
// end ;
5630: LD_VAR 0 1
5634: RET
// export function Multiplayer_SetBotSide ( preferSide ) ; var i ; begin
5635: LD_INT 0
5637: PPUSH
5638: PPUSH
// if not multi_sides [ preferSide ] then
5639: LD_EXP 15
5643: PUSH
5644: LD_VAR 0 1
5648: ARRAY
5649: NOT
5650: IFFALSE 5664
// begin result := preferSide ;
5652: LD_ADDR_VAR 0 2
5656: PUSH
5657: LD_VAR 0 1
5661: ST_TO_ADDR
// exit ;
5662: GO 5711
// end ; for i := 1 to 8 do
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: DOUBLE
5670: LD_INT 1
5672: DEC
5673: ST_TO_ADDR
5674: LD_INT 8
5676: PUSH
5677: FOR_TO
5678: IFFALSE 5709
// if not multi_sides [ i ] then
5680: LD_EXP 15
5684: PUSH
5685: LD_VAR 0 3
5689: ARRAY
5690: NOT
5691: IFFALSE 5707
// begin result := i ;
5693: LD_ADDR_VAR 0 2
5697: PUSH
5698: LD_VAR 0 3
5702: ST_TO_ADDR
// exit ;
5703: POP
5704: POP
5705: GO 5711
// end ;
5707: GO 5677
5709: POP
5710: POP
// end ;
5711: LD_VAR 0 2
5715: RET
// export function Multiplayer_PrepareCustomCommanders ( side , num ) ; begin
5716: LD_INT 0
5718: PPUSH
// uc_side := side ;
5719: LD_ADDR_OWVAR 20
5723: PUSH
5724: LD_VAR 0 1
5728: ST_TO_ADDR
// uc_nation := nation_russian ;
5729: LD_ADDR_OWVAR 21
5733: PUSH
5734: LD_INT 3
5736: ST_TO_ADDR
// hc_importance := 100 ;
5737: LD_ADDR_OWVAR 32
5741: PUSH
5742: LD_INT 100
5744: ST_TO_ADDR
// if num = 1 then
5745: LD_VAR 0 2
5749: PUSH
5750: LD_INT 1
5752: EQUAL
5753: IFFALSE 5820
// begin PrepareSoldier ( sex_male , multi_skill_level + 1 ) ;
5755: LD_INT 1
5757: PPUSH
5758: LD_EXP 28
5762: PUSH
5763: LD_INT 1
5765: PLUS
5766: PPUSH
5767: CALL_OW 381
// hc_gallery := ru ;
5771: LD_ADDR_OWVAR 33
5775: PUSH
5776: LD_STRING ru
5778: ST_TO_ADDR
// hc_face_number := 13 ;
5779: LD_ADDR_OWVAR 34
5783: PUSH
5784: LD_INT 13
5786: ST_TO_ADDR
// hc_name := Kuzmov ;
5787: LD_ADDR_OWVAR 26
5791: PUSH
5792: LD_STRING Kuzmov
5794: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
5795: LD_ADDR_OWVAR 29
5799: PUSH
5800: LD_INT 11
5802: PUSH
5803: LD_INT 11
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: ST_TO_ADDR
// result := CreateHuman ;
5810: LD_ADDR_VAR 0 3
5814: PUSH
5815: CALL_OW 44
5819: ST_TO_ADDR
// end ; if num = 2 then
5820: LD_VAR 0 2
5824: PUSH
5825: LD_INT 2
5827: EQUAL
5828: IFFALSE 5895
// begin PrepareMechanic ( sex_male , multi_skill_level + 2 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_EXP 28
5837: PUSH
5838: LD_INT 2
5840: PLUS
5841: PPUSH
5842: CALL_OW 383
// hc_gallery := ru ;
5846: LD_ADDR_OWVAR 33
5850: PUSH
5851: LD_STRING ru
5853: ST_TO_ADDR
// hc_face_number := 1 ;
5854: LD_ADDR_OWVAR 34
5858: PUSH
5859: LD_INT 1
5861: ST_TO_ADDR
// hc_name := Burlak ;
5862: LD_ADDR_OWVAR 26
5866: PUSH
5867: LD_STRING Burlak
5869: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
5870: LD_ADDR_OWVAR 29
5874: PUSH
5875: LD_INT 10
5877: PUSH
5878: LD_INT 11
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: ST_TO_ADDR
// result := CreateHuman ;
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: CALL_OW 44
5894: ST_TO_ADDR
// end ; end ;
5895: LD_VAR 0 3
5899: RET
// export function Multiplayer_PreparePlayers ( ) ; var i , j , b , cl , un , veh , vehicles , tmp , people_amount ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
5911: PPUSH
// for i := 1 to 8 do
5912: LD_ADDR_VAR 0 2
5916: PUSH
5917: DOUBLE
5918: LD_INT 1
5920: DEC
5921: ST_TO_ADDR
5922: LD_INT 8
5924: PUSH
5925: FOR_TO
5926: IFFALSE 7348
// begin if not multi_sides [ i ] then
5928: LD_EXP 15
5932: PUSH
5933: LD_VAR 0 2
5937: ARRAY
5938: NOT
5939: IFFALSE 5943
// continue ;
5941: GO 5925
// vehicles := multi_vehicles [ multi_sides [ i ] ] ;
5943: LD_ADDR_VAR 0 8
5947: PUSH
5948: LD_EXP 30
5952: PUSH
5953: LD_EXP 15
5957: PUSH
5958: LD_VAR 0 2
5962: ARRAY
5963: ARRAY
5964: ST_TO_ADDR
// if multi_buildings [ multi_sides [ i ] ] then
5965: LD_EXP 35
5969: PUSH
5970: LD_EXP 15
5974: PUSH
5975: LD_VAR 0 2
5979: ARRAY
5980: ARRAY
5981: IFFALSE 6278
// begin uc_side := i ;
5983: LD_ADDR_OWVAR 20
5987: PUSH
5988: LD_VAR 0 2
5992: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
5993: LD_ADDR_OWVAR 21
5997: PUSH
5998: LD_EXP 17
6002: PUSH
6003: LD_VAR 0 2
6007: ARRAY
6008: ST_TO_ADDR
// for j in multi_buildings [ multi_sides [ i ] ] do
6009: LD_ADDR_VAR 0 3
6013: PUSH
6014: LD_EXP 35
6018: PUSH
6019: LD_EXP 15
6023: PUSH
6024: LD_VAR 0 2
6028: ARRAY
6029: ARRAY
6030: PUSH
6031: FOR_IN
6032: IFFALSE 6276
// begin if j [ 1 ] = b_oil_mine then
6034: LD_VAR 0 3
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 29
6045: EQUAL
6046: IFFALSE 6083
// SetResourceVisibility ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , i ) ;
6048: LD_VAR 0 3
6052: PUSH
6053: LD_INT 2
6055: ARRAY
6056: PUSH
6057: LD_INT 1
6059: ARRAY
6060: PPUSH
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 2
6068: ARRAY
6069: PUSH
6070: LD_INT 2
6072: ARRAY
6073: PPUSH
6074: LD_VAR 0 2
6078: PPUSH
6079: CALL_OW 441
// bc_type := j [ 1 ] ;
6083: LD_ADDR_OWVAR 42
6087: PUSH
6088: LD_VAR 0 3
6092: PUSH
6093: LD_INT 1
6095: ARRAY
6096: ST_TO_ADDR
// bc_level := 3 ;
6097: LD_ADDR_OWVAR 43
6101: PUSH
6102: LD_INT 3
6104: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( j [ 2 ] [ 1 ] , j [ 2 ] [ 2 ] , j [ 2 ] [ 3 ] ) ;
6105: LD_ADDR_VAR 0 4
6109: PUSH
6110: LD_VAR 0 3
6114: PUSH
6115: LD_INT 2
6117: ARRAY
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PPUSH
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 2
6130: ARRAY
6131: PUSH
6132: LD_INT 2
6134: ARRAY
6135: PPUSH
6136: LD_VAR 0 3
6140: PUSH
6141: LD_INT 2
6143: ARRAY
6144: PUSH
6145: LD_INT 3
6147: ARRAY
6148: PPUSH
6149: CALL_OW 47
6153: ST_TO_ADDR
// if j [ 1 ] = b_depot then
6154: LD_VAR 0 3
6158: PUSH
6159: LD_INT 1
6161: ARRAY
6162: PUSH
6163: LD_INT 0
6165: EQUAL
6166: IFFALSE 6242
// begin SetResourceType ( GetBase ( b ) , mat_cans , [ 450 , 350 , 230 ] [ Difficulty ] ) ;
6168: LD_VAR 0 4
6172: PPUSH
6173: CALL_OW 274
6177: PPUSH
6178: LD_INT 1
6180: PPUSH
6181: LD_INT 450
6183: PUSH
6184: LD_INT 350
6186: PUSH
6187: LD_INT 230
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: LD_OWVAR 67
6199: ARRAY
6200: PPUSH
6201: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , [ 90 , 60 , 40 ] [ Difficulty ] ) ;
6205: LD_VAR 0 4
6209: PPUSH
6210: CALL_OW 274
6214: PPUSH
6215: LD_INT 2
6217: PPUSH
6218: LD_INT 90
6220: PUSH
6221: LD_INT 60
6223: PUSH
6224: LD_INT 40
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: LIST
6231: PUSH
6232: LD_OWVAR 67
6236: ARRAY
6237: PPUSH
6238: CALL_OW 277
// end ; if j [ 1 ] = b_bunker then
6242: LD_VAR 0 3
6246: PUSH
6247: LD_INT 1
6249: ARRAY
6250: PUSH
6251: LD_INT 32
6253: EQUAL
6254: IFFALSE 6274
// PlaceWeaponTurret ( b , j [ 3 ] ) ;
6256: LD_VAR 0 4
6260: PPUSH
6261: LD_VAR 0 3
6265: PUSH
6266: LD_INT 3
6268: ARRAY
6269: PPUSH
6270: CALL_OW 431
// end ;
6274: GO 6031
6276: POP
6277: POP
// end ; if multi_custom_commanders then
6278: LD_EXP 24
6282: IFFALSE 6499
// begin un := Multiplayer_PrepareCustomCommanders ( i , multi_sides [ i ] ) ;
6284: LD_ADDR_VAR 0 6
6288: PUSH
6289: LD_VAR 0 2
6293: PPUSH
6294: LD_EXP 15
6298: PUSH
6299: LD_VAR 0 2
6303: ARRAY
6304: PPUSH
6305: CALL 5716 0 2
6309: ST_TO_ADDR
// multi_commanders := Insert ( multi_commanders , multi_commanders + 1 , un ) ;
6310: LD_ADDR_EXP 31
6314: PUSH
6315: LD_EXP 31
6319: PPUSH
6320: LD_EXP 31
6324: PUSH
6325: LD_INT 1
6327: PLUS
6328: PPUSH
6329: LD_VAR 0 6
6333: PPUSH
6334: CALL_OW 2
6338: ST_TO_ADDR
// if GetClass ( un ) = class_mechanic then
6339: LD_VAR 0 6
6343: PPUSH
6344: CALL_OW 257
6348: PUSH
6349: LD_INT 3
6351: EQUAL
6352: IFFALSE 6464
// begin uc_nation := nation_russian ;
6354: LD_ADDR_OWVAR 21
6358: PUSH
6359: LD_INT 3
6361: ST_TO_ADDR
// PrepareVehicle ( ru_heavy_wheeled , engine_combustion , control_manual , ru_gun , 80 ) ;
6362: LD_INT 23
6364: PPUSH
6365: LD_INT 1
6367: PPUSH
6368: LD_INT 1
6370: PPUSH
6371: LD_INT 44
6373: PPUSH
6374: LD_INT 80
6376: PPUSH
6377: CALL 19950 0 5
// veh := CreateVehicle ;
6381: LD_ADDR_VAR 0 7
6385: PUSH
6386: CALL_OW 45
6390: ST_TO_ADDR
// SetMark ( veh , GetSide ( un ) * - 1 ) ;
6391: LD_VAR 0 7
6395: PPUSH
6396: LD_VAR 0 6
6400: PPUSH
6401: CALL_OW 255
6405: PUSH
6406: LD_INT 1
6408: NEG
6409: MUL
6410: PPUSH
6411: CALL_OW 242
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
6415: LD_VAR 0 7
6419: PPUSH
6420: LD_EXP 20
6424: PUSH
6425: LD_EXP 15
6429: PUSH
6430: LD_VAR 0 2
6434: ARRAY
6435: ARRAY
6436: PUSH
6437: LD_INT 2
6439: ARRAY
6440: PPUSH
6441: LD_INT 0
6443: PPUSH
6444: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6448: LD_VAR 0 6
6452: PPUSH
6453: LD_VAR 0 7
6457: PPUSH
6458: CALL_OW 52
// end else
6462: GO 6497
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6464: LD_VAR 0 6
6468: PPUSH
6469: LD_EXP 20
6473: PUSH
6474: LD_EXP 15
6478: PUSH
6479: LD_VAR 0 2
6483: ARRAY
6484: ARRAY
6485: PUSH
6486: LD_INT 1
6488: ARRAY
6489: PPUSH
6490: LD_INT 0
6492: PPUSH
6493: CALL_OW 49
// end else
6497: GO 6710
// begin uc_side := i ;
6499: LD_ADDR_OWVAR 20
6503: PUSH
6504: LD_VAR 0 2
6508: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6509: LD_ADDR_OWVAR 21
6513: PUSH
6514: LD_EXP 17
6518: PUSH
6519: LD_VAR 0 2
6523: ARRAY
6524: ST_TO_ADDR
// hc_importance := 100 ;
6525: LD_ADDR_OWVAR 32
6529: PUSH
6530: LD_INT 100
6532: ST_TO_ADDR
// PrepareHuman ( false , 1 , multi_skill_level ) ;
6533: LD_INT 0
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: LD_EXP 28
6543: PPUSH
6544: CALL_OW 380
// if multiplayer then
6548: LD_OWVAR 4
6552: IFFALSE 6610
// begin hc_name := mp_sides_players_names [ i ] ;
6554: LD_ADDR_OWVAR 26
6558: PUSH
6559: LD_OWVAR 19
6563: PUSH
6564: LD_VAR 0 2
6568: ARRAY
6569: ST_TO_ADDR
// hc_gallery := MULTIAVATARS ;
6570: LD_ADDR_OWVAR 33
6574: PUSH
6575: LD_STRING MULTIAVATARS
6577: ST_TO_ADDR
// hc_face_number := Multiplayer_GetPlayerSideNum ( i ) ;
6578: LD_ADDR_OWVAR 34
6582: PUSH
6583: LD_VAR 0 2
6587: PPUSH
6588: CALL_OW 525
6592: ST_TO_ADDR
// hc_sex := Multiplayer_GetPlayerSex ( i ) ;
6593: LD_ADDR_OWVAR 27
6597: PUSH
6598: LD_VAR 0 2
6602: PPUSH
6603: CALL_OW 526
6607: ST_TO_ADDR
// end else
6608: GO 6642
// begin hc_gallery :=  ;
6610: LD_ADDR_OWVAR 33
6614: PUSH
6615: LD_STRING 
6617: ST_TO_ADDR
// hc_name :=  ;
6618: LD_ADDR_OWVAR 26
6622: PUSH
6623: LD_STRING 
6625: ST_TO_ADDR
// hc_sex := rand ( 1 , 2 ) ;
6626: LD_ADDR_OWVAR 27
6630: PUSH
6631: LD_INT 1
6633: PPUSH
6634: LD_INT 2
6636: PPUSH
6637: CALL_OW 12
6641: ST_TO_ADDR
// end ; un := CreateHuman ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: CALL_OW 44
6651: ST_TO_ADDR
// PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
6652: LD_VAR 0 6
6656: PPUSH
6657: LD_EXP 20
6661: PUSH
6662: LD_EXP 15
6666: PUSH
6667: LD_VAR 0 2
6671: ARRAY
6672: ARRAY
6673: PUSH
6674: LD_INT 1
6676: ARRAY
6677: PPUSH
6678: LD_INT 0
6680: PPUSH
6681: CALL_OW 49
// multi_commanders := Replace ( multi_commanders , i , un ) ;
6685: LD_ADDR_EXP 31
6689: PUSH
6690: LD_EXP 31
6694: PPUSH
6695: LD_VAR 0 2
6699: PPUSH
6700: LD_VAR 0 6
6704: PPUSH
6705: CALL_OW 1
6709: ST_TO_ADDR
// end ; InitHc ;
6710: CALL_OW 19
// InitUc ;
6714: CALL_OW 18
// uc_side := i ;
6718: LD_ADDR_OWVAR 20
6722: PUSH
6723: LD_VAR 0 2
6727: ST_TO_ADDR
// uc_nation := multi_nations [ i ] ;
6728: LD_ADDR_OWVAR 21
6732: PUSH
6733: LD_EXP 17
6737: PUSH
6738: LD_VAR 0 2
6742: ARRAY
6743: ST_TO_ADDR
// hc_gallery :=  ;
6744: LD_ADDR_OWVAR 33
6748: PUSH
6749: LD_STRING 
6751: ST_TO_ADDR
// hc_name :=  ;
6752: LD_ADDR_OWVAR 26
6756: PUSH
6757: LD_STRING 
6759: ST_TO_ADDR
// hc_importance := 0 ;
6760: LD_ADDR_OWVAR 32
6764: PUSH
6765: LD_INT 0
6767: ST_TO_ADDR
// cl := 1 ;
6768: LD_ADDR_VAR 0 5
6772: PUSH
6773: LD_INT 1
6775: ST_TO_ADDR
// for j := 2 to multi_pep_amount do
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: DOUBLE
6782: LD_INT 2
6784: DEC
6785: ST_TO_ADDR
6786: LD_EXP 27
6790: PUSH
6791: FOR_TO
6792: IFFALSE 7344
// begin if ( j - 1 ) mod ( ( multi_pep_amount - 1 ) / 4 ) = 0 then
6794: LD_VAR 0 3
6798: PUSH
6799: LD_INT 1
6801: MINUS
6802: PUSH
6803: LD_EXP 27
6807: PUSH
6808: LD_INT 1
6810: MINUS
6811: PUSH
6812: LD_INT 4
6814: DIVREAL
6815: MOD
6816: PUSH
6817: LD_INT 0
6819: EQUAL
6820: IFFALSE 6836
// cl := cl + 1 ;
6822: LD_ADDR_VAR 0 5
6826: PUSH
6827: LD_VAR 0 5
6831: PUSH
6832: LD_INT 1
6834: PLUS
6835: ST_TO_ADDR
// if cl > 4 then
6836: LD_VAR 0 5
6840: PUSH
6841: LD_INT 4
6843: GREATER
6844: IFFALSE 6854
// cl := 1 ;
6846: LD_ADDR_VAR 0 5
6850: PUSH
6851: LD_INT 1
6853: ST_TO_ADDR
// if multi_sides [ i ] = 2 and ( cl = 2 or ( cl = 4 and FilterAllUnits ( [ [ f_side , i ] , [ f_class , 4 ] ] ) > 1 ) ) then
6854: LD_EXP 15
6858: PUSH
6859: LD_VAR 0 2
6863: ARRAY
6864: PUSH
6865: LD_INT 2
6867: EQUAL
6868: PUSH
6869: LD_VAR 0 5
6873: PUSH
6874: LD_INT 2
6876: EQUAL
6877: PUSH
6878: LD_VAR 0 5
6882: PUSH
6883: LD_INT 4
6885: EQUAL
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_VAR 0 2
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: LD_INT 25
6901: PUSH
6902: LD_INT 4
6904: PUSH
6905: EMPTY
6906: LIST
6907: LIST
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PPUSH
6913: CALL_OW 69
6917: PUSH
6918: LD_INT 1
6920: GREATER
6921: AND
6922: OR
6923: AND
6924: IFFALSE 6943
// PrepareHuman ( false , 1 , multi_skill_level ) else
6926: LD_INT 0
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: LD_EXP 28
6936: PPUSH
6937: CALL_OW 380
6941: GO 6960
// PrepareHuman ( false , cl , multi_skill_level ) ;
6943: LD_INT 0
6945: PPUSH
6946: LD_VAR 0 5
6950: PPUSH
6951: LD_EXP 28
6955: PPUSH
6956: CALL_OW 380
// un := CreateHuman ;
6960: LD_ADDR_VAR 0 6
6964: PUSH
6965: CALL_OW 44
6969: ST_TO_ADDR
// if multi_pos_area then
6970: LD_EXP 20
6974: IFFALSE 7342
// begin if GetClass ( un ) = 3 and vehicles then
6976: LD_VAR 0 6
6980: PPUSH
6981: CALL_OW 257
6985: PUSH
6986: LD_INT 3
6988: EQUAL
6989: PUSH
6990: LD_VAR 0 8
6994: AND
6995: IFFALSE 7180
// begin PrepareVehicle ( vehicles [ 1 ] [ 1 ] , vehicles [ 1 ] [ 2 ] , vehicles [ 1 ] [ 3 ] , vehicles [ 1 ] [ 4 ] , [ 80 , 60 , 40 ] [ Difficulty ] ) ;
6997: LD_VAR 0 8
7001: PUSH
7002: LD_INT 1
7004: ARRAY
7005: PUSH
7006: LD_INT 1
7008: ARRAY
7009: PPUSH
7010: LD_VAR 0 8
7014: PUSH
7015: LD_INT 1
7017: ARRAY
7018: PUSH
7019: LD_INT 2
7021: ARRAY
7022: PPUSH
7023: LD_VAR 0 8
7027: PUSH
7028: LD_INT 1
7030: ARRAY
7031: PUSH
7032: LD_INT 3
7034: ARRAY
7035: PPUSH
7036: LD_VAR 0 8
7040: PUSH
7041: LD_INT 1
7043: ARRAY
7044: PUSH
7045: LD_INT 4
7047: ARRAY
7048: PPUSH
7049: LD_INT 80
7051: PUSH
7052: LD_INT 60
7054: PUSH
7055: LD_INT 40
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: LD_OWVAR 67
7067: ARRAY
7068: PPUSH
7069: CALL 19950 0 5
// veh := CreateVehicle ;
7073: LD_ADDR_VAR 0 7
7077: PUSH
7078: CALL_OW 45
7082: ST_TO_ADDR
// PlaceUnitArea ( veh , multi_pos_area [ multi_sides [ i ] ] [ 2 ] , false ) ;
7083: LD_VAR 0 7
7087: PPUSH
7088: LD_EXP 20
7092: PUSH
7093: LD_EXP 15
7097: PUSH
7098: LD_VAR 0 2
7102: ARRAY
7103: ARRAY
7104: PUSH
7105: LD_INT 2
7107: ARRAY
7108: PPUSH
7109: LD_INT 0
7111: PPUSH
7112: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7116: LD_VAR 0 6
7120: PPUSH
7121: LD_VAR 0 7
7125: PPUSH
7126: CALL_OW 52
// if GetWeapon ( veh ) = ru_cargo_bay then
7130: LD_VAR 0 7
7134: PPUSH
7135: CALL_OW 264
7139: PUSH
7140: LD_INT 51
7142: EQUAL
7143: IFFALSE 7160
// SetCargo ( veh , mat_oil , 60 ) ;
7145: LD_VAR 0 7
7149: PPUSH
7150: LD_INT 2
7152: PPUSH
7153: LD_INT 60
7155: PPUSH
7156: CALL_OW 290
// vehicles := Delete ( vehicles , 1 ) ;
7160: LD_ADDR_VAR 0 8
7164: PUSH
7165: LD_VAR 0 8
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: CALL_OW 3
7177: ST_TO_ADDR
// continue ;
7178: GO 6791
// end ; tmp := FilterAllUnits ( [ [ f_side , i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ;
7180: LD_ADDR_VAR 0 9
7184: PUSH
7185: LD_INT 22
7187: PUSH
7188: LD_VAR 0 2
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 2
7199: PUSH
7200: LD_INT 30
7202: PUSH
7203: LD_INT 32
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 30
7212: PUSH
7213: LD_INT 31
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: PUSH
7225: LD_INT 58
7227: PUSH
7228: EMPTY
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: LIST
7235: PPUSH
7236: CALL_OW 69
7240: ST_TO_ADDR
// if GetClass ( un ) = 1 and tmp then
7241: LD_VAR 0 6
7245: PPUSH
7246: CALL_OW 257
7250: PUSH
7251: LD_INT 1
7253: EQUAL
7254: PUSH
7255: LD_VAR 0 9
7259: AND
7260: IFFALSE 7309
// begin SetDir ( un , GetDir ( tmp [ 1 ] ) - 3 ) ;
7262: LD_VAR 0 6
7266: PPUSH
7267: LD_VAR 0 9
7271: PUSH
7272: LD_INT 1
7274: ARRAY
7275: PPUSH
7276: CALL_OW 254
7280: PUSH
7281: LD_INT 3
7283: MINUS
7284: PPUSH
7285: CALL_OW 233
// PlaceHumanInUnit ( un , tmp [ 1 ] ) ;
7289: LD_VAR 0 6
7293: PPUSH
7294: LD_VAR 0 9
7298: PUSH
7299: LD_INT 1
7301: ARRAY
7302: PPUSH
7303: CALL_OW 52
// continue ;
7307: GO 6791
// end ; PlaceUnitArea ( un , multi_pos_area [ multi_sides [ i ] ] [ 1 ] , false ) ;
7309: LD_VAR 0 6
7313: PPUSH
7314: LD_EXP 20
7318: PUSH
7319: LD_EXP 15
7323: PUSH
7324: LD_VAR 0 2
7328: ARRAY
7329: ARRAY
7330: PUSH
7331: LD_INT 1
7333: ARRAY
7334: PPUSH
7335: LD_INT 0
7337: PPUSH
7338: CALL_OW 49
// end ; end ;
7342: GO 6791
7344: POP
7345: POP
// end ;
7346: GO 5925
7348: POP
7349: POP
// end ;
7350: LD_VAR 0 1
7354: RET
// export function Multiplayer_Start ( ) ; begin
7355: LD_INT 0
7357: PPUSH
// Multiplayer_PreparePlayers ( ) ;
7358: CALL 5900 0 0
// Multiplayer_InitPointSystem ( ) ;
7362: CALL 8073 0 0
// Multiplayer_RegisterCondition ( 20 ) ;
7366: LD_INT 20
7368: PPUSH
7369: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 150 ) ;
7373: LD_INT 150
7375: PPUSH
7376: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 5 ) ;
7380: LD_INT 5
7382: PPUSH
7383: CALL 8249 0 1
// Multiplayer_RegisterCondition ( - 120 ) ;
7387: LD_INT 120
7389: NEG
7390: PPUSH
7391: CALL 8249 0 1
// Multiplayer_RegisterCondition ( - 60 ) ;
7395: LD_INT 60
7397: NEG
7398: PPUSH
7399: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 2 ) ;
7403: LD_INT 2
7405: PPUSH
7406: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 110 ) ;
7410: LD_INT 110
7412: PPUSH
7413: CALL 8249 0 1
// Multiplayer_RegisterCondition ( 55 ) ;
7417: LD_INT 55
7419: PPUSH
7420: CALL 8249 0 1
// Multiplayer_RegisterCondition ( - 1000 ) ;
7424: LD_INT 1000
7426: NEG
7427: PPUSH
7428: CALL 8249 0 1
// if multi_sides [ your_side ] then
7432: LD_EXP 15
7436: PUSH
7437: LD_OWVAR 2
7441: ARRAY
7442: IFFALSE 7469
// CenterNowOnUnits ( FilterAllUnits ( [ f_side , your_side ] ) [ 1 ] ) ;
7444: LD_INT 22
7446: PUSH
7447: LD_OWVAR 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 69
7460: PUSH
7461: LD_INT 1
7463: ARRAY
7464: PPUSH
7465: CALL_OW 87
// end ;
7469: LD_VAR 0 1
7473: RET
// export function Multiplayer_End ( ) ; var i , j , points ; begin
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
// repeat wait ( 0 0$1 ) ;
7480: LD_INT 35
7482: PPUSH
7483: CALL_OW 67
// points := 0 ;
7487: LD_ADDR_VAR 0 4
7491: PUSH
7492: LD_INT 0
7494: ST_TO_ADDR
// for i := 1 to 8 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 8
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7535
// points := points + multi_points [ i ] ;
7511: LD_ADDR_VAR 0 4
7515: PUSH
7516: LD_VAR 0 4
7520: PUSH
7521: LD_EXP 36
7525: PUSH
7526: LD_VAR 0 2
7530: ARRAY
7531: PLUS
7532: ST_TO_ADDR
7533: GO 7508
7535: POP
7536: POP
// if not multi_custom_commanders then
7537: LD_EXP 24
7541: NOT
7542: IFFALSE 7655
// begin for i := 1 to 8 do
7544: LD_ADDR_VAR 0 2
7548: PUSH
7549: DOUBLE
7550: LD_INT 1
7552: DEC
7553: ST_TO_ADDR
7554: LD_INT 8
7556: PUSH
7557: FOR_TO
7558: IFFALSE 7629
// begin if FilterAllUnits ( [ f_side , i ] ) = 0 and not multi_loosers [ i ] then
7560: LD_INT 22
7562: PUSH
7563: LD_VAR 0 2
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PPUSH
7572: CALL_OW 69
7576: PUSH
7577: LD_INT 0
7579: EQUAL
7580: PUSH
7581: LD_EXP 32
7585: PUSH
7586: LD_VAR 0 2
7590: ARRAY
7591: NOT
7592: AND
7593: IFFALSE 7627
// begin multi_loosers := Replace ( multi_loosers , i , 1 ) ;
7595: LD_ADDR_EXP 32
7599: PUSH
7600: LD_EXP 32
7604: PPUSH
7605: LD_VAR 0 2
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL_OW 1
7617: ST_TO_ADDR
// Multiplayer_Reside ( i ) ;
7618: LD_VAR 0 2
7622: PPUSH
7623: CALL 8319 0 1
// end ; end ;
7627: GO 7557
7629: POP
7630: POP
// if Count ( multi_loosers ) = Count ( multi_sides ) then
7631: LD_EXP 32
7635: PPUSH
7636: CALL 17212 0 1
7640: PUSH
7641: LD_EXP 15
7645: PPUSH
7646: CALL 17212 0 1
7650: EQUAL
7651: IFFALSE 7655
// break ;
7653: GO 7696
// end ; if points >= multi_points_to_victory then
7655: LD_VAR 0 4
7659: PUSH
7660: LD_EXP 34
7664: GREATEREQUAL
7665: IFFALSE 7677
// begin winAllowed := true ;
7667: LD_ADDR_EXP 3
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// break ;
7675: GO 7696
// end ; until ( winAllowed and game ) or not multi_commanders ;
7677: LD_EXP 3
7681: PUSH
7682: LD_EXP 2
7686: AND
7687: PUSH
7688: LD_EXP 31
7692: NOT
7693: OR
7694: IFFALSE 7480
// game := false ;
7696: LD_ADDR_EXP 2
7700: PUSH
7701: LD_INT 0
7703: ST_TO_ADDR
// for i := 1 to 8 do
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: DOUBLE
7710: LD_INT 1
7712: DEC
7713: ST_TO_ADDR
7714: LD_INT 8
7716: PUSH
7717: FOR_TO
7718: IFFALSE 7754
// begin if multi_sides [ i ] then
7720: LD_EXP 15
7724: PUSH
7725: LD_VAR 0 2
7729: ARRAY
7730: IFFALSE 7752
// SetMultiScore ( i , multi_points [ i ] ) ;
7732: LD_VAR 0 2
7736: PPUSH
7737: LD_EXP 36
7741: PUSH
7742: LD_VAR 0 2
7746: ARRAY
7747: PPUSH
7748: CALL_OW 506
// end ;
7752: GO 7717
7754: POP
7755: POP
// if multi_loosers [ your_side ] then
7756: LD_EXP 32
7760: PUSH
7761: LD_OWVAR 2
7765: ARRAY
7766: IFFALSE 7789
// begin if Multiplayer then
7768: LD_OWVAR 4
7772: IFFALSE 7780
// YouLostInMultiplayer else
7774: CALL_OW 107
7778: GO 7787
// YouLost (  ) ;
7780: LD_STRING 
7782: PPUSH
7783: CALL_OW 104
// end else
7787: GO 7805
// begin if Multiplayer then
7789: LD_OWVAR 4
7793: IFFALSE 7801
// YouWinInMultiplayer else
7795: CALL_OW 106
7799: GO 7805
// YouWin ;
7801: CALL_OW 103
// end ; end ;
7805: LD_VAR 0 1
7809: RET
// export function Multiplayer_EnemyAlive ( ) ; var side ; begin
7810: LD_INT 0
7812: PPUSH
7813: PPUSH
// result := false ;
7814: LD_ADDR_VAR 0 1
7818: PUSH
7819: LD_INT 0
7821: ST_TO_ADDR
// for side in botSides do
7822: LD_ADDR_VAR 0 2
7826: PUSH
7827: LD_EXP 4
7831: PUSH
7832: FOR_IN
7833: IFFALSE 7894
// begin result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 ;
7835: LD_ADDR_VAR 0 1
7839: PUSH
7840: LD_INT 22
7842: PUSH
7843: LD_VAR 0 2
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 21
7854: PUSH
7855: LD_INT 1
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 50
7864: PUSH
7865: EMPTY
7866: LIST
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: LIST
7872: PPUSH
7873: CALL_OW 69
7877: PUSH
7878: LD_INT 0
7880: GREATER
7881: ST_TO_ADDR
// if result then
7882: LD_VAR 0 1
7886: IFFALSE 7892
// exit ;
7888: POP
7889: POP
7890: GO 7896
// end ;
7892: GO 7832
7894: POP
7895: POP
// end ;
7896: LD_VAR 0 1
7900: RET
// export function Multiplayer_DisplayStrings ( ) ; var i , points ; begin
7901: LD_INT 0
7903: PPUSH
7904: PPUSH
7905: PPUSH
// result := [ ] ;
7906: LD_ADDR_VAR 0 1
7910: PUSH
7911: EMPTY
7912: ST_TO_ADDR
// points := 0 ;
7913: LD_ADDR_VAR 0 3
7917: PUSH
7918: LD_INT 0
7920: ST_TO_ADDR
// for i := 1 to 8 do
7921: LD_ADDR_VAR 0 2
7925: PUSH
7926: DOUBLE
7927: LD_INT 1
7929: DEC
7930: ST_TO_ADDR
7931: LD_INT 8
7933: PUSH
7934: FOR_TO
7935: IFFALSE 8014
// begin points := points + multi_points [ i ] ;
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_VAR 0 3
7946: PUSH
7947: LD_EXP 36
7951: PUSH
7952: LD_VAR 0 2
7956: ARRAY
7957: PLUS
7958: ST_TO_ADDR
// if multi_sides [ i ] then
7959: LD_EXP 15
7963: PUSH
7964: LD_VAR 0 2
7968: ARRAY
7969: IFFALSE 8012
// begin result := result ^ [ #coop-points , i , i , multi_points [ i ] ] ;
7971: LD_ADDR_VAR 0 1
7975: PUSH
7976: LD_VAR 0 1
7980: PUSH
7981: LD_STRING #coop-points
7983: PUSH
7984: LD_VAR 0 2
7988: PUSH
7989: LD_VAR 0 2
7993: PUSH
7994: LD_EXP 36
7998: PUSH
7999: LD_VAR 0 2
8003: ARRAY
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: ADD
8011: ST_TO_ADDR
// end ; end ;
8012: GO 7934
8014: POP
8015: POP
// result := result ^ [ #saved-convoys , savedConvoyUnits ] ;
8016: LD_ADDR_VAR 0 1
8020: PUSH
8021: LD_VAR 0 1
8025: PUSH
8026: LD_STRING #saved-convoys
8028: PUSH
8029: LD_EXP 5
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: ADD
8038: ST_TO_ADDR
// result := result ^ [ #points-to-win , points , multi_points_to_victory ] ;
8039: LD_ADDR_VAR 0 1
8043: PUSH
8044: LD_VAR 0 1
8048: PUSH
8049: LD_STRING #points-to-win
8051: PUSH
8052: LD_VAR 0 3
8056: PUSH
8057: LD_EXP 34
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: ADD
8067: ST_TO_ADDR
// end ;
8068: LD_VAR 0 1
8072: RET
// export multi_points , multi_points_conditions ; export function Multiplayer_InitPointSystem ( ) ; var i ; begin
8073: LD_INT 0
8075: PPUSH
8076: PPUSH
// multi_points := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ;
8077: LD_ADDR_EXP 36
8081: PUSH
8082: LD_INT 0
8084: PUSH
8085: LD_INT 0
8087: PUSH
8088: LD_INT 0
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: LD_INT 0
8096: PUSH
8097: LD_INT 0
8099: PUSH
8100: LD_INT 0
8102: PUSH
8103: LD_INT 0
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: ST_TO_ADDR
// multi_points_conditions := [ ] ;
8116: LD_ADDR_EXP 37
8120: PUSH
8121: EMPTY
8122: ST_TO_ADDR
// end ;
8123: LD_VAR 0 1
8127: RET
// export function Multiplayer_AddPoints ( side , amount ) ; begin
8128: LD_INT 0
8130: PPUSH
// if not multi_points or not side or side > 8 then
8131: LD_EXP 36
8135: NOT
8136: PUSH
8137: LD_VAR 0 1
8141: NOT
8142: OR
8143: PUSH
8144: LD_VAR 0 1
8148: PUSH
8149: LD_INT 8
8151: GREATER
8152: OR
8153: IFFALSE 8157
// exit ;
8155: GO 8194
// multi_points := Replace ( multi_points , side , multi_points [ side ] + amount ) ;
8157: LD_ADDR_EXP 36
8161: PUSH
8162: LD_EXP 36
8166: PPUSH
8167: LD_VAR 0 1
8171: PPUSH
8172: LD_EXP 36
8176: PUSH
8177: LD_VAR 0 1
8181: ARRAY
8182: PUSH
8183: LD_VAR 0 2
8187: PLUS
8188: PPUSH
8189: CALL_OW 1
8193: ST_TO_ADDR
// end ;
8194: LD_VAR 0 3
8198: RET
// export function Multiplayer_GetPoints ( side ) ; begin
8199: LD_INT 0
8201: PPUSH
// if not multi_points or not side or side > 8 then
8202: LD_EXP 36
8206: NOT
8207: PUSH
8208: LD_VAR 0 1
8212: NOT
8213: OR
8214: PUSH
8215: LD_VAR 0 1
8219: PUSH
8220: LD_INT 8
8222: GREATER
8223: OR
8224: IFFALSE 8228
// exit ;
8226: GO 8244
// result := multi_points [ side ] ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_EXP 36
8237: PUSH
8238: LD_VAR 0 1
8242: ARRAY
8243: ST_TO_ADDR
// end ;
8244: LD_VAR 0 2
8248: RET
// export function Multiplayer_RegisterCondition ( points ) ; begin
8249: LD_INT 0
8251: PPUSH
// multi_points_conditions := Replace ( multi_points_conditions , multi_points_conditions + 1 , points ) ;
8252: LD_ADDR_EXP 37
8256: PUSH
8257: LD_EXP 37
8261: PPUSH
8262: LD_EXP 37
8266: PUSH
8267: LD_INT 1
8269: PLUS
8270: PPUSH
8271: LD_VAR 0 1
8275: PPUSH
8276: CALL_OW 1
8280: ST_TO_ADDR
// end ;
8281: LD_VAR 0 2
8285: RET
// export function Multiplayer_GetCondition ( id ) ; begin
8286: LD_INT 0
8288: PPUSH
// if not id then
8289: LD_VAR 0 1
8293: NOT
8294: IFFALSE 8298
// exit ;
8296: GO 8314
// result := multi_points_conditions [ id ] ;
8298: LD_ADDR_VAR 0 2
8302: PUSH
8303: LD_EXP 37
8307: PUSH
8308: LD_VAR 0 1
8312: ARRAY
8313: ST_TO_ADDR
// end ;
8314: LD_VAR 0 2
8318: RET
// export function Multiplayer_Reside ( side ) ; var players , i , j , tmp ; begin
8319: LD_INT 0
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
8325: PPUSH
// players := [ ] ;
8326: LD_ADDR_VAR 0 3
8330: PUSH
8331: EMPTY
8332: ST_TO_ADDR
// for i = 1 to 8 do
8333: LD_ADDR_VAR 0 4
8337: PUSH
8338: DOUBLE
8339: LD_INT 1
8341: DEC
8342: ST_TO_ADDR
8343: LD_INT 8
8345: PUSH
8346: FOR_TO
8347: IFFALSE 8406
// begin if i = side then
8349: LD_VAR 0 4
8353: PUSH
8354: LD_VAR 0 1
8358: EQUAL
8359: IFFALSE 8363
// continue ;
8361: GO 8346
// if multi_sides [ i ] and not multi_loosers [ i ] then
8363: LD_EXP 15
8367: PUSH
8368: LD_VAR 0 4
8372: ARRAY
8373: PUSH
8374: LD_EXP 32
8378: PUSH
8379: LD_VAR 0 4
8383: ARRAY
8384: NOT
8385: AND
8386: IFFALSE 8404
// players := players ^ i ;
8388: LD_ADDR_VAR 0 3
8392: PUSH
8393: LD_VAR 0 3
8397: PUSH
8398: LD_VAR 0 4
8402: ADD
8403: ST_TO_ADDR
// end ;
8404: GO 8346
8406: POP
8407: POP
// if not players then
8408: LD_VAR 0 3
8412: NOT
8413: IFFALSE 8417
// exit ;
8415: GO 8684
// if players = 1 then
8417: LD_VAR 0 3
8421: PUSH
8422: LD_INT 1
8424: EQUAL
8425: IFFALSE 8486
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_alive ] ] ) do
8427: LD_ADDR_VAR 0 4
8431: PUSH
8432: LD_INT 22
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 51
8446: PUSH
8447: EMPTY
8448: LIST
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PPUSH
8454: CALL_OW 69
8458: PUSH
8459: FOR_IN
8460: IFFALSE 8482
// SetSide ( i , players [ 1 ] ) ;
8462: LD_VAR 0 4
8466: PPUSH
8467: LD_VAR 0 3
8471: PUSH
8472: LD_INT 1
8474: ARRAY
8475: PPUSH
8476: CALL_OW 235
8480: GO 8459
8482: POP
8483: POP
// end else
8484: GO 8684
// begin j := 1 ;
8486: LD_ADDR_VAR 0 5
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ [ f_type , unit_human ] , [ f_alive ] ] , [ f_type , unit_vehicle ] ] ] ) do
8494: LD_ADDR_VAR 0 4
8498: PUSH
8499: LD_INT 22
8501: PUSH
8502: LD_VAR 0 1
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: LD_INT 21
8516: PUSH
8517: LD_INT 1
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: LD_INT 51
8526: PUSH
8527: EMPTY
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 2
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: LIST
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PPUSH
8553: CALL_OW 69
8557: PUSH
8558: FOR_IN
8559: IFFALSE 8682
// begin SetSide ( i , players [ j ] ) ;
8561: LD_VAR 0 4
8565: PPUSH
8566: LD_VAR 0 3
8570: PUSH
8571: LD_VAR 0 5
8575: ARRAY
8576: PPUSH
8577: CALL_OW 235
// if IsDrivenBy ( i ) then
8581: LD_VAR 0 4
8585: PPUSH
8586: CALL_OW 311
8590: IFFALSE 8617
// SetSide ( IsDrivenBy ( i ) , players [ j ] ) ;
8592: LD_VAR 0 4
8596: PPUSH
8597: CALL_OW 311
8601: PPUSH
8602: LD_VAR 0 3
8606: PUSH
8607: LD_VAR 0 5
8611: ARRAY
8612: PPUSH
8613: CALL_OW 235
// if GetType ( IsInUnit ( i ) ) = unit_building then
8617: LD_VAR 0 4
8621: PPUSH
8622: CALL_OW 310
8626: PPUSH
8627: CALL_OW 247
8631: PUSH
8632: LD_INT 3
8634: EQUAL
8635: IFFALSE 8646
// ComExitBuilding ( i ) ;
8637: LD_VAR 0 4
8641: PPUSH
8642: CALL_OW 122
// j := j + 1 ;
8646: LD_ADDR_VAR 0 5
8650: PUSH
8651: LD_VAR 0 5
8655: PUSH
8656: LD_INT 1
8658: PLUS
8659: ST_TO_ADDR
// if j > players then
8660: LD_VAR 0 5
8664: PUSH
8665: LD_VAR 0 3
8669: GREATER
8670: IFFALSE 8680
// j := 1 ;
8672: LD_ADDR_VAR 0 5
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ;
8680: GO 8558
8682: POP
8683: POP
// end ; end ;
8684: LD_VAR 0 2
8688: RET
// export function MultiplayerEvent_Produced ( side ) ; begin
8689: LD_INT 0
8691: PPUSH
// if not side or side > 8 then
8692: LD_VAR 0 1
8696: NOT
8697: PUSH
8698: LD_VAR 0 1
8702: PUSH
8703: LD_INT 8
8705: GREATER
8706: OR
8707: IFFALSE 8711
// exit ;
8709: GO 8728
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 6 ) ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 6
8718: PPUSH
8719: CALL 8286 0 1
8723: PPUSH
8724: CALL 8128 0 2
// end ;
8728: LD_VAR 0 2
8732: RET
// export function MultiplayerEvent_HumanLost ( side ) ; begin
8733: LD_INT 0
8735: PPUSH
// if not side or side > 8 then
8736: LD_VAR 0 1
8740: NOT
8741: PUSH
8742: LD_VAR 0 1
8746: PUSH
8747: LD_INT 8
8749: GREATER
8750: OR
8751: IFFALSE 8755
// exit ;
8753: GO 8772
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 4 ) ) ;
8755: LD_VAR 0 1
8759: PPUSH
8760: LD_INT 4
8762: PPUSH
8763: CALL 8286 0 1
8767: PPUSH
8768: CALL 8128 0 2
// end ;
8772: LD_VAR 0 2
8776: RET
// export function MultiplayerEvent_VehicleLost ( side ) ; begin
8777: LD_INT 0
8779: PPUSH
// if not side or side > 8 then
8780: LD_VAR 0 1
8784: NOT
8785: PUSH
8786: LD_VAR 0 1
8790: PUSH
8791: LD_INT 8
8793: GREATER
8794: OR
8795: IFFALSE 8799
// exit ;
8797: GO 8816
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 5 ) ) ;
8799: LD_VAR 0 1
8803: PPUSH
8804: LD_INT 5
8806: PPUSH
8807: CALL 8286 0 1
8811: PPUSH
8812: CALL 8128 0 2
// end ;
8816: LD_VAR 0 2
8820: RET
// export function MultiplayerEvent_BuildingCompleted ( side , btype ) ; begin
8821: LD_INT 0
8823: PPUSH
// if not side or side > 8 or not btype in [ b_workshop , b_lab , b_control_tower , b_depot ] then
8824: LD_VAR 0 1
8828: NOT
8829: PUSH
8830: LD_VAR 0 1
8834: PUSH
8835: LD_INT 8
8837: GREATER
8838: OR
8839: PUSH
8840: LD_VAR 0 2
8844: PUSH
8845: LD_INT 2
8847: PUSH
8848: LD_INT 6
8850: PUSH
8851: LD_INT 36
8853: PUSH
8854: LD_INT 0
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: IN
8863: NOT
8864: OR
8865: IFFALSE 8869
// exit ;
8867: GO 8886
// Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 3 ) ) ;
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_INT 3
8876: PPUSH
8877: CALL 8286 0 1
8881: PPUSH
8882: CALL 8128 0 2
// end ;
8886: LD_VAR 0 3
8890: RET
// export function MultiplayerEvent_UnitKilled ( un , side , points ) ; var gained_points ; begin
8891: LD_INT 0
8893: PPUSH
8894: PPUSH
// if not un then
8895: LD_VAR 0 1
8899: NOT
8900: IFFALSE 8904
// exit ;
8902: GO 8950
// if not points then
8904: LD_VAR 0 3
8908: NOT
8909: IFFALSE 8926
// gained_points := Multiplayer_GetCondition ( 1 ) else
8911: LD_ADDR_VAR 0 5
8915: PUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL 8286 0 1
8923: ST_TO_ADDR
8924: GO 8936
// gained_points := points ;
8926: LD_ADDR_VAR 0 5
8930: PUSH
8931: LD_VAR 0 3
8935: ST_TO_ADDR
// Multiplayer_AddPoints ( side , gained_points ) ;
8936: LD_VAR 0 2
8940: PPUSH
8941: LD_VAR 0 5
8945: PPUSH
8946: CALL 8128 0 2
// end ; end_of_file
8950: LD_VAR 0 4
8954: RET
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do var side ;
8955: LD_INT 0
8957: PPUSH
// begin side := GetSide ( un ) ;
8958: LD_ADDR_VAR 0 4
8962: PUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL_OW 255
8972: ST_TO_ADDR
// if killerSide = enemySide then
8973: LD_VAR 0 2
8977: PUSH
8978: LD_EXP 12
8982: EQUAL
8983: IFFALSE 8987
// exit ;
8985: GO 9047
// if side = convoySide and multi_sides [ killerSide ] then
8987: LD_VAR 0 4
8991: PUSH
8992: LD_EXP 40
8996: EQUAL
8997: PUSH
8998: LD_EXP 15
9002: PUSH
9003: LD_VAR 0 2
9007: ARRAY
9008: AND
9009: IFFALSE 9030
// begin Multiplayer_AddPoints ( side , Multiplayer_GetCondition ( 9 ) ) ;
9011: LD_VAR 0 4
9015: PPUSH
9016: LD_INT 9
9018: PPUSH
9019: CALL 8286 0 1
9023: PPUSH
9024: CALL 8128 0 2
// exit ;
9028: GO 9047
// end ; MultiplayerEvent_UnitKilled ( un , killerSide , false ) ;
9030: LD_VAR 0 1
9034: PPUSH
9035: LD_VAR 0 2
9039: PPUSH
9040: LD_INT 0
9042: PPUSH
9043: CALL 8891 0 3
// end ;
9047: PPOPN 4
9049: END
// on UnitDestroyed ( un ) do var i , side , base , chassis , engine , control , weapon , tmp , factory , btype ;
9050: LD_INT 0
9052: PPUSH
9053: PPUSH
9054: PPUSH
9055: PPUSH
9056: PPUSH
9057: PPUSH
9058: PPUSH
9059: PPUSH
9060: PPUSH
9061: PPUSH
// begin SOS_UnitDestroyed ( un ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: CALL 73704 0 1
// side := GetSide ( un ) ;
9071: LD_ADDR_VAR 0 3
9075: PUSH
9076: LD_VAR 0 1
9080: PPUSH
9081: CALL_OW 255
9085: ST_TO_ADDR
// if multi_sides [ side ] or side = convoySide then
9086: LD_EXP 15
9090: PUSH
9091: LD_VAR 0 3
9095: ARRAY
9096: PUSH
9097: LD_VAR 0 3
9101: PUSH
9102: LD_EXP 40
9106: EQUAL
9107: OR
9108: IFFALSE 9186
// begin if un in convoys then
9110: LD_VAR 0 1
9114: PUSH
9115: LD_EXP 38
9119: IN
9120: IFFALSE 9138
// convoys := convoys diff un ;
9122: LD_ADDR_EXP 38
9126: PUSH
9127: LD_EXP 38
9131: PUSH
9132: LD_VAR 0 1
9136: DIFF
9137: ST_TO_ADDR
// if GetType ( un ) = unit_human then
9138: LD_VAR 0 1
9142: PPUSH
9143: CALL_OW 247
9147: PUSH
9148: LD_INT 1
9150: EQUAL
9151: IFFALSE 9162
// MultiplayerEvent_HumanLost ( side ) ;
9153: LD_VAR 0 3
9157: PPUSH
9158: CALL 8733 0 1
// if GetType ( un ) = unit_vehicle then
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 247
9171: PUSH
9172: LD_INT 2
9174: EQUAL
9175: IFFALSE 9186
// MultiplayerEvent_VehicleLost ( side ) ;
9177: LD_VAR 0 3
9181: PPUSH
9182: CALL 8777 0 1
// end ; if un in enemyForestGuard then
9186: LD_VAR 0 1
9190: PUSH
9191: LD_EXP 11
9195: IN
9196: IFFALSE 9214
// enemyForestGuard := enemyForestGuard diff un ;
9198: LD_ADDR_EXP 11
9202: PUSH
9203: LD_EXP 11
9207: PUSH
9208: LD_VAR 0 1
9212: DIFF
9213: ST_TO_ADDR
// if un in enemyMobile then
9214: LD_VAR 0 1
9218: PUSH
9219: LD_EXP 10
9223: IN
9224: IFFALSE 9242
// enemyMobile := enemyMobile diff un ;
9226: LD_ADDR_EXP 10
9230: PUSH
9231: LD_EXP 10
9235: PUSH
9236: LD_VAR 0 1
9240: DIFF
9241: ST_TO_ADDR
// if un in enemyUnits then
9242: LD_VAR 0 1
9246: PUSH
9247: LD_EXP 9
9251: IN
9252: IFFALSE 9270
// enemyUnits := enemyUnits diff un ;
9254: LD_ADDR_EXP 9
9258: PUSH
9259: LD_EXP 9
9263: PUSH
9264: LD_VAR 0 1
9268: DIFF
9269: ST_TO_ADDR
// if un in arAttackersInf then
9270: LD_VAR 0 1
9274: PUSH
9275: LD_EXP 13
9279: IN
9280: IFFALSE 9298
// arAttackersInf := arAttackersInf diff un ;
9282: LD_ADDR_EXP 13
9286: PUSH
9287: LD_EXP 13
9291: PUSH
9292: LD_VAR 0 1
9296: DIFF
9297: ST_TO_ADDR
// if multi_commanders and multi_custom_commanders then
9298: LD_EXP 31
9302: PUSH
9303: LD_EXP 24
9307: AND
9308: IFFALSE 9370
// if un in multi_commanders then
9310: LD_VAR 0 1
9314: PUSH
9315: LD_EXP 31
9319: IN
9320: IFFALSE 9370
// begin multi_loosers := Replace ( multi_loosers , side , 1 ) ;
9322: LD_ADDR_EXP 32
9326: PUSH
9327: LD_EXP 32
9331: PPUSH
9332: LD_VAR 0 3
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: CALL_OW 1
9344: ST_TO_ADDR
// multi_commanders := multi_commanders diff un ;
9345: LD_ADDR_EXP 31
9349: PUSH
9350: LD_EXP 31
9354: PUSH
9355: LD_VAR 0 1
9359: DIFF
9360: ST_TO_ADDR
// Multiplayer_Reside ( side ) ;
9361: LD_VAR 0 3
9365: PPUSH
9366: CALL 8319 0 1
// end ; end ;
9370: PPOPN 11
9372: END
// on BuildingComplete ( building ) do var i , j , side , btype ;
9373: LD_INT 0
9375: PPUSH
9376: PPUSH
9377: PPUSH
9378: PPUSH
// begin side := GetSide ( building ) ;
9379: LD_ADDR_VAR 0 4
9383: PUSH
9384: LD_VAR 0 1
9388: PPUSH
9389: CALL_OW 255
9393: ST_TO_ADDR
// if multi_sides [ side ] then
9394: LD_EXP 15
9398: PUSH
9399: LD_VAR 0 4
9403: ARRAY
9404: IFFALSE 9425
// MultiplayerEvent_BuildingCompleted ( side , GetBType ( building ) ) ;
9406: LD_VAR 0 4
9410: PPUSH
9411: LD_VAR 0 1
9415: PPUSH
9416: CALL_OW 266
9420: PPUSH
9421: CALL 8821 0 2
// end ;
9425: PPOPN 5
9427: END
// on VehicleConstructed ( vehicle , factory ) do var i , side , tmp , base , amount , driver ;
9428: LD_INT 0
9430: PPUSH
9431: PPUSH
9432: PPUSH
9433: PPUSH
9434: PPUSH
9435: PPUSH
// begin SOS_VehicleConstructed ( vehicle , factory ) ;
9436: LD_VAR 0 1
9440: PPUSH
9441: LD_VAR 0 2
9445: PPUSH
9446: CALL 73824 0 2
// side := GetSide ( vehicle ) ;
9450: LD_ADDR_VAR 0 4
9454: PUSH
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 255
9464: ST_TO_ADDR
// if multi_sides [ side ] then
9465: LD_EXP 15
9469: PUSH
9470: LD_VAR 0 4
9474: ARRAY
9475: IFFALSE 9486
// MultiplayerEvent_Produced ( side ) ;
9477: LD_VAR 0 4
9481: PPUSH
9482: CALL 8689 0 1
// end ;
9486: PPOPN 8
9488: END
// on ResearchComplete ( tech , lab ) do var i , side ;
9489: LD_INT 0
9491: PPUSH
9492: PPUSH
// begin side := GetSide ( lab ) ;
9493: LD_ADDR_VAR 0 4
9497: PUSH
9498: LD_VAR 0 2
9502: PPUSH
9503: CALL_OW 255
9507: ST_TO_ADDR
// if multi_sides [ side ] then
9508: LD_EXP 15
9512: PUSH
9513: LD_VAR 0 4
9517: ARRAY
9518: IFFALSE 9581
// for i := 1 to 8 do
9520: LD_ADDR_VAR 0 3
9524: PUSH
9525: DOUBLE
9526: LD_INT 1
9528: DEC
9529: ST_TO_ADDR
9530: LD_INT 8
9532: PUSH
9533: FOR_TO
9534: IFFALSE 9579
// if multi_sides [ i ] and i <> side then
9536: LD_EXP 15
9540: PUSH
9541: LD_VAR 0 3
9545: ARRAY
9546: PUSH
9547: LD_VAR 0 3
9551: PUSH
9552: LD_VAR 0 4
9556: NONEQUAL
9557: AND
9558: IFFALSE 9577
// SetTech ( tech , i , state_researched ) ;
9560: LD_VAR 0 1
9564: PPUSH
9565: LD_VAR 0 3
9569: PPUSH
9570: LD_INT 2
9572: PPUSH
9573: CALL_OW 322
9577: GO 9533
9579: POP
9580: POP
// end ;
9581: PPOPN 4
9583: END
// on EvacuateVehicle ( driver , veh , p1 , p2 ) do begin if veh in enemyMobile then
9584: LD_VAR 0 2
9588: PUSH
9589: LD_EXP 10
9593: IN
9594: IFFALSE 9657
// begin repeat ComMoveXY ( driver , 163 , 31 ) ;
9596: LD_VAR 0 1
9600: PPUSH
9601: LD_INT 163
9603: PPUSH
9604: LD_INT 31
9606: PPUSH
9607: CALL_OW 111
// wait ( 0 0$1 ) ;
9611: LD_INT 35
9613: PPUSH
9614: CALL_OW 67
// if IsDead ( driver ) then
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 301
9627: IFFALSE 9631
// exit ;
9629: GO 9657
// until IsAt ( driver , 163 , 31 ) ;
9631: LD_VAR 0 1
9635: PPUSH
9636: LD_INT 163
9638: PPUSH
9639: LD_INT 31
9641: PPUSH
9642: CALL_OW 307
9646: IFFALSE 9596
// RemoveUnit ( driver ) ;
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 64
// end ; end ; end_of_file
9657: PPOPN 4
9659: END
// every 8 8$00 trigger not forestIsCleared do
9660: LD_EXP 7
9664: NOT
9665: IFFALSE 9674
9667: GO 9669
9669: DISABLE
// ClearRoadInForest ;
9670: CALL 2106 0 0
9674: END
// every 18 18$00 trigger not forestIsCleared do
9675: LD_EXP 7
9679: NOT
9680: IFFALSE 9689
9682: GO 9684
9684: DISABLE
// ClearRoadInForest ;
9685: CALL 2106 0 0
9689: END
// every 0 0$30 trigger convoyWave mod 4 = 0 and convoyWave >= 4 do
9690: LD_EXP 39
9694: PUSH
9695: LD_INT 4
9697: MOD
9698: PUSH
9699: LD_INT 0
9701: EQUAL
9702: PUSH
9703: LD_EXP 39
9707: PUSH
9708: LD_INT 4
9710: GREATEREQUAL
9711: AND
9712: IFFALSE 9741
9714: GO 9716
9716: DISABLE
// begin arAttackersInf := arAttackersInf union SendNorthGroup ;
9717: LD_ADDR_EXP 13
9721: PUSH
9722: LD_EXP 13
9726: PUSH
9727: CALL 3291 0 0
9731: UNION
9732: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9733: LD_INT 10500
9735: PPUSH
9736: CALL_OW 67
// enable ;
9740: ENABLE
// end ;
9741: END
// every 0 0$30 trigger convoyWave mod 7 = 0 and convoyWave >= 7 do
9742: LD_EXP 39
9746: PUSH
9747: LD_INT 7
9749: MOD
9750: PUSH
9751: LD_INT 0
9753: EQUAL
9754: PUSH
9755: LD_EXP 39
9759: PUSH
9760: LD_INT 7
9762: GREATEREQUAL
9763: AND
9764: IFFALSE 9793
9766: GO 9768
9768: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup2 ;
9769: LD_ADDR_EXP 13
9773: PUSH
9774: LD_EXP 13
9778: PUSH
9779: CALL 3535 0 0
9783: UNION
9784: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9785: LD_INT 10500
9787: PPUSH
9788: CALL_OW 67
// enable ;
9792: ENABLE
// end ;
9793: END
// every 0 0$30 trigger convoyWave in [ 8 , 12 , 16 , 20 , 24 , 28 , 32 , 36 ] do
9794: LD_EXP 39
9798: PUSH
9799: LD_INT 8
9801: PUSH
9802: LD_INT 12
9804: PUSH
9805: LD_INT 16
9807: PUSH
9808: LD_INT 20
9810: PUSH
9811: LD_INT 24
9813: PUSH
9814: LD_INT 28
9816: PUSH
9817: LD_INT 32
9819: PUSH
9820: LD_INT 36
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: IN
9833: IFFALSE 9862
9835: GO 9837
9837: DISABLE
// begin arAttackersInf := arAttackersInf union SendEastGroup ;
9838: LD_ADDR_EXP 13
9842: PUSH
9843: LD_EXP 13
9847: PUSH
9848: CALL 3086 0 0
9852: UNION
9853: ST_TO_ADDR
// wait ( 5 5$00 ) ;
9854: LD_INT 10500
9856: PPUSH
9857: CALL_OW 67
// enable ;
9861: ENABLE
// end ;
9862: END
// every 0 0$2 trigger convoyWave mod 5 = 4 and not FilterAllUnits ( [ [ f_side , enemySide ] , [ f_distxy , 30 , 48 , 20 ] ] ) do
9863: LD_EXP 39
9867: PUSH
9868: LD_INT 5
9870: MOD
9871: PUSH
9872: LD_INT 4
9874: EQUAL
9875: PUSH
9876: LD_INT 22
9878: PUSH
9879: LD_EXP 12
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PUSH
9888: LD_INT 92
9890: PUSH
9891: LD_INT 30
9893: PUSH
9894: LD_INT 48
9896: PUSH
9897: LD_INT 20
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 69
9914: NOT
9915: AND
9916: IFFALSE 9933
9918: GO 9920
9920: DISABLE
// begin SendWestGroup ;
9921: CALL 2456 0 0
// wait ( 6 6$00 ) ;
9925: LD_INT 12600
9927: PPUSH
9928: CALL_OW 67
// enable ;
9932: ENABLE
// end ;
9933: END
// every 2 2$30 + 2 2$00 trigger UnitFilter ( enemyMobile , [ f_ok ] ) < 5 do
9934: LD_EXP 10
9938: PPUSH
9939: LD_INT 50
9941: PUSH
9942: EMPTY
9943: LIST
9944: PPUSH
9945: CALL_OW 72
9949: PUSH
9950: LD_INT 5
9952: LESS
9953: IFFALSE 9987
9955: GO 9957
9957: DISABLE
// begin PrepareMobileGroup ;
9958: CALL 1495 0 0
// wait ( [ 3 3$30 , 3 3$00 , 2 2$30 ] [ Difficulty ] ) ;
9962: LD_INT 7350
9964: PUSH
9965: LD_INT 6300
9967: PUSH
9968: LD_INT 5250
9970: PUSH
9971: EMPTY
9972: LIST
9973: LIST
9974: LIST
9975: PUSH
9976: LD_OWVAR 67
9980: ARRAY
9981: PPUSH
9982: CALL_OW 67
// enable ;
9986: ENABLE
// end ;
9987: END
// every 0 0$30 trigger convoyWave mod 6 = 0 and convoyWave >= 6 and UnitFilter ( enemyMobile , [ f_ok ] ) < 10 do
9988: LD_EXP 39
9992: PUSH
9993: LD_INT 6
9995: MOD
9996: PUSH
9997: LD_INT 0
9999: EQUAL
10000: PUSH
10001: LD_EXP 39
10005: PUSH
10006: LD_INT 6
10008: GREATEREQUAL
10009: AND
10010: PUSH
10011: LD_EXP 10
10015: PPUSH
10016: LD_INT 50
10018: PUSH
10019: EMPTY
10020: LIST
10021: PPUSH
10022: CALL_OW 72
10026: PUSH
10027: LD_INT 10
10029: LESS
10030: AND
10031: IFFALSE 10065
10033: GO 10035
10035: DISABLE
// begin PrepareMobileGroup2 ;
10036: CALL 1823 0 0
// wait ( [ 4 4$30 , 4 4$00 , 3 3$30 ] [ Difficulty ] ) ;
10040: LD_INT 9450
10042: PUSH
10043: LD_INT 8400
10045: PUSH
10046: LD_INT 7350
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_OWVAR 67
10058: ARRAY
10059: PPUSH
10060: CALL_OW 67
// enable ;
10064: ENABLE
// end ;
10065: END
// every 7 7$00 + 4 4$00 trigger forestIsCleared do var i , tmp ;
10066: LD_EXP 7
10070: IFFALSE 10283
10072: GO 10074
10074: DISABLE
10075: LD_INT 0
10077: PPUSH
10078: PPUSH
// begin if tick > 50 50$00 then
10079: LD_OWVAR 1
10083: PUSH
10084: LD_INT 105000
10086: GREATER
10087: IFFALSE 10092
// begin disable ;
10089: DISABLE
// exit ;
10090: GO 10283
// end ; tmp := PrepareForestOnslaught ;
10092: LD_ADDR_VAR 0 2
10096: PUSH
10097: CALL 2758 0 0
10101: ST_TO_ADDR
// for i in tmp do
10102: LD_ADDR_VAR 0 1
10106: PUSH
10107: LD_VAR 0 2
10111: PUSH
10112: FOR_IN
10113: IFFALSE 10177
// begin AddComMoveXY ( i , 197 , 152 ) ;
10115: LD_VAR 0 1
10119: PPUSH
10120: LD_INT 197
10122: PPUSH
10123: LD_INT 152
10125: PPUSH
10126: CALL_OW 171
// AddComMoveXY ( i , 159 , 163 ) ;
10130: LD_VAR 0 1
10134: PPUSH
10135: LD_INT 159
10137: PPUSH
10138: LD_INT 163
10140: PPUSH
10141: CALL_OW 171
// AddComMoveXY ( i , 116 , 154 ) ;
10145: LD_VAR 0 1
10149: PPUSH
10150: LD_INT 116
10152: PPUSH
10153: LD_INT 154
10155: PPUSH
10156: CALL_OW 171
// AddComMoveXY ( i , 93 , 177 ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 93
10167: PPUSH
10168: LD_INT 177
10170: PPUSH
10171: CALL_OW 171
// end ;
10175: GO 10112
10177: POP
10178: POP
// repeat wait ( 0 0$1 ) ;
10179: LD_INT 35
10181: PPUSH
10182: CALL_OW 67
// for i in tmp do
10186: LD_ADDR_VAR 0 1
10190: PUSH
10191: LD_VAR 0 2
10195: PUSH
10196: FOR_IN
10197: IFFALSE 10258
// if not IsOk ( i ) then
10199: LD_VAR 0 1
10203: PPUSH
10204: CALL_OW 302
10208: NOT
10209: IFFALSE 10229
// tmp := tmp diff i else
10211: LD_ADDR_VAR 0 2
10215: PUSH
10216: LD_VAR 0 2
10220: PUSH
10221: LD_VAR 0 1
10225: DIFF
10226: ST_TO_ADDR
10227: GO 10256
// if not HasTask ( i ) then
10229: LD_VAR 0 1
10233: PPUSH
10234: CALL_OW 314
10238: NOT
10239: IFFALSE 10256
// ComMoveXY ( i , 93 , 177 ) ;
10241: LD_VAR 0 1
10245: PPUSH
10246: LD_INT 93
10248: PPUSH
10249: LD_INT 177
10251: PPUSH
10252: CALL_OW 111
10256: GO 10196
10258: POP
10259: POP
// until not tmp ;
10260: LD_VAR 0 2
10264: NOT
10265: IFFALSE 10179
// wait ( rand ( 0 0$30 , 5 5$30 ) ) ;
10267: LD_INT 1050
10269: PPUSH
10270: LD_INT 11550
10272: PPUSH
10273: CALL_OW 12
10277: PPUSH
10278: CALL_OW 67
// enable ;
10282: ENABLE
// end ;
10283: PPOPN 2
10285: END
// every 0 0$1 trigger enemyForestGuard do var i , tmp , enemyInForest , vehicle ;
10286: LD_EXP 11
10290: IFFALSE 10705
10292: GO 10294
10294: DISABLE
10295: LD_INT 0
10297: PPUSH
10298: PPUSH
10299: PPUSH
10300: PPUSH
// begin enable ;
10301: ENABLE
// tmp := UnitFilter ( enemyForestGuard , [ f_ok ] ) ;
10302: LD_ADDR_VAR 0 2
10306: PUSH
10307: LD_EXP 11
10311: PPUSH
10312: LD_INT 50
10314: PUSH
10315: EMPTY
10316: LIST
10317: PPUSH
10318: CALL_OW 72
10322: ST_TO_ADDR
// enemyInForest := FilterUnitsInArea ( arCampArea , [ f_not , [ f_side , enemySide ] ] ) ;
10323: LD_ADDR_VAR 0 3
10327: PUSH
10328: LD_INT 19
10330: PPUSH
10331: LD_INT 3
10333: PUSH
10334: LD_INT 22
10336: PUSH
10337: LD_EXP 12
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PPUSH
10350: CALL_OW 70
10354: ST_TO_ADDR
// if not tmp then
10355: LD_VAR 0 2
10359: NOT
10360: IFFALSE 10364
// exit ;
10362: GO 10705
// for i in tmp do
10364: LD_ADDR_VAR 0 1
10368: PUSH
10369: LD_VAR 0 2
10373: PUSH
10374: FOR_IN
10375: IFFALSE 10703
// begin if enemyInForest then
10377: LD_VAR 0 3
10381: IFFALSE 10456
// begin if GetClass ( i ) = 4 then
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 257
10392: PUSH
10393: LD_INT 4
10395: EQUAL
10396: IFFALSE 10430
// ComMoveUnit ( i , NearestUnitToUnit ( tmp diff i , i ) ) else
10398: LD_VAR 0 1
10402: PPUSH
10403: LD_VAR 0 2
10407: PUSH
10408: LD_VAR 0 1
10412: DIFF
10413: PPUSH
10414: LD_VAR 0 1
10418: PPUSH
10419: CALL_OW 74
10423: PPUSH
10424: CALL_OW 112
10428: GO 10454
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInForest , i ) ) ;
10430: LD_VAR 0 1
10434: PPUSH
10435: LD_VAR 0 3
10439: PPUSH
10440: LD_VAR 0 1
10444: PPUSH
10445: CALL_OW 74
10449: PPUSH
10450: CALL_OW 115
// end else
10454: GO 10701
// if not IsInArea ( i , arForestArea ) then
10456: LD_VAR 0 1
10460: PPUSH
10461: LD_INT 21
10463: PPUSH
10464: CALL_OW 308
10468: NOT
10469: IFFALSE 10485
// ComMoveToArea ( i , arForestArea ) else
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 21
10478: PPUSH
10479: CALL_OW 113
10483: GO 10701
// if GetClass ( i ) = 3 then
10485: LD_VAR 0 1
10489: PPUSH
10490: CALL_OW 257
10494: PUSH
10495: LD_INT 3
10497: EQUAL
10498: IFFALSE 10701
// begin vehicle := IsInUnit ( i ) ;
10500: LD_ADDR_VAR 0 4
10504: PUSH
10505: LD_VAR 0 1
10509: PPUSH
10510: CALL_OW 310
10514: ST_TO_ADDR
// if vehicle then
10515: LD_VAR 0 4
10519: IFFALSE 10674
// begin if GetLives ( vehicle ) < 1000 and not HasTask ( i ) then
10521: LD_VAR 0 4
10525: PPUSH
10526: CALL_OW 256
10530: PUSH
10531: LD_INT 1000
10533: LESS
10534: PUSH
10535: LD_VAR 0 1
10539: PPUSH
10540: CALL_OW 314
10544: NOT
10545: AND
10546: IFFALSE 10672
// begin if not IsInArea ( vehicle , arParkingArea ) then
10548: LD_VAR 0 4
10552: PPUSH
10553: LD_INT 20
10555: PPUSH
10556: CALL_OW 308
10560: NOT
10561: IFFALSE 10577
// ComMoveToArea ( vehicle , arParkingArea ) else
10563: LD_VAR 0 4
10567: PPUSH
10568: LD_INT 20
10570: PPUSH
10571: CALL_OW 113
10575: GO 10672
// if not GetTag ( i ) then
10577: LD_VAR 0 1
10581: PPUSH
10582: CALL_OW 110
10586: NOT
10587: IFFALSE 10672
// begin SetTag ( i , tMech ) ;
10589: LD_VAR 0 1
10593: PPUSH
10594: LD_INT 7
10596: PPUSH
10597: CALL_OW 109
// ComExitVehicle ( i ) ;
10601: LD_VAR 0 1
10605: PPUSH
10606: CALL_OW 121
// AddComRepairVehicle ( i , vehicle ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: LD_VAR 0 4
10619: PPUSH
10620: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10624: LD_INT 35
10626: PPUSH
10627: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10631: LD_VAR 0 1
10635: PPUSH
10636: CALL_OW 256
10640: PUSH
10641: LD_INT 1000
10643: EQUAL
10644: IFFALSE 10624
// ComEnterUnit ( i , vehicle ) ;
10646: LD_VAR 0 1
10650: PPUSH
10651: LD_VAR 0 4
10655: PPUSH
10656: CALL_OW 120
// SetTag ( i , 0 ) ;
10660: LD_VAR 0 1
10664: PPUSH
10665: LD_INT 0
10667: PPUSH
10668: CALL_OW 109
// end ; end ; end else
10672: GO 10701
// if not IsInArea ( i , arParkingArea ) then
10674: LD_VAR 0 1
10678: PPUSH
10679: LD_INT 20
10681: PPUSH
10682: CALL_OW 308
10686: NOT
10687: IFFALSE 10701
// ComMoveToArea ( i , arParkingArea ) ;
10689: LD_VAR 0 1
10693: PPUSH
10694: LD_INT 20
10696: PPUSH
10697: CALL_OW 113
// end ; end ;
10701: GO 10374
10703: POP
10704: POP
// end ;
10705: PPOPN 4
10707: END
// every 0 0$1 trigger enemyMobile do var i , mech , enemy ;
10708: LD_EXP 10
10712: IFFALSE 11245
10714: GO 10716
10716: DISABLE
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
10721: PPUSH
// begin enable ;
10722: ENABLE
// if not enemyMobile then
10723: LD_EXP 10
10727: NOT
10728: IFFALSE 10732
// exit ;
10730: GO 11245
// for i in enemyMobile do
10732: LD_ADDR_VAR 0 1
10736: PUSH
10737: LD_EXP 10
10741: PUSH
10742: FOR_IN
10743: IFFALSE 11243
// begin if GetSide ( i ) <> enemySide then
10745: LD_VAR 0 1
10749: PPUSH
10750: CALL_OW 255
10754: PUSH
10755: LD_EXP 12
10759: NONEQUAL
10760: IFFALSE 10780
// begin enemyMobile := enemyMobile diff i ;
10762: LD_ADDR_EXP 10
10766: PUSH
10767: LD_EXP 10
10771: PUSH
10772: LD_VAR 0 1
10776: DIFF
10777: ST_TO_ADDR
// continue ;
10778: GO 10742
// end ; if GetTag ( i ) = 300 then
10780: LD_VAR 0 1
10784: PPUSH
10785: CALL_OW 110
10789: PUSH
10790: LD_INT 300
10792: EQUAL
10793: IFFALSE 10908
// begin if GetFuel ( i ) < 50 then
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 261
10804: PUSH
10805: LD_INT 50
10807: LESS
10808: IFFALSE 10867
// begin ComMoveXY ( i , 170 , 50 ) ;
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_INT 170
10817: PPUSH
10818: LD_INT 50
10820: PPUSH
10821: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10825: LD_INT 35
10827: PPUSH
10828: CALL_OW 67
// until GetDistUnitXY ( i , 170 , 50 ) < 4 ;
10832: LD_VAR 0 1
10836: PPUSH
10837: LD_INT 170
10839: PPUSH
10840: LD_INT 50
10842: PPUSH
10843: CALL_OW 297
10847: PUSH
10848: LD_INT 4
10850: LESS
10851: IFFALSE 10825
// SetFuel ( i , 100 ) ;
10853: LD_VAR 0 1
10857: PPUSH
10858: LD_INT 100
10860: PPUSH
10861: CALL_OW 240
// end else
10865: GO 10908
// if not IsInArea ( i , arParkingArea ) then
10867: LD_VAR 0 1
10871: PPUSH
10872: LD_INT 20
10874: PPUSH
10875: CALL_OW 308
10879: NOT
10880: IFFALSE 10896
// ComMoveToArea ( i , arParkingArea ) else
10882: LD_VAR 0 1
10886: PPUSH
10887: LD_INT 20
10889: PPUSH
10890: CALL_OW 113
10894: GO 10908
// SetTag ( i , 301 ) ;
10896: LD_VAR 0 1
10900: PPUSH
10901: LD_INT 301
10903: PPUSH
10904: CALL_OW 109
// end ; if GetTag ( i ) = 301 then
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 110
10917: PUSH
10918: LD_INT 301
10920: EQUAL
10921: IFFALSE 11063
// begin if GetLives ( i ) < 1000 then
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 256
10932: PUSH
10933: LD_INT 1000
10935: LESS
10936: IFFALSE 11040
// begin if not IsDrivenBy ( i ) then
10938: LD_VAR 0 1
10942: PPUSH
10943: CALL_OW 311
10947: NOT
10948: IFFALSE 10952
// continue ;
10950: GO 10742
// mech := IsDrivenBy ( i ) ;
10952: LD_ADDR_VAR 0 2
10956: PUSH
10957: LD_VAR 0 1
10961: PPUSH
10962: CALL_OW 311
10966: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
10967: LD_VAR 0 2
10971: PPUSH
10972: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
10976: LD_VAR 0 2
10980: PPUSH
10981: LD_VAR 0 1
10985: PPUSH
10986: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
10990: LD_INT 35
10992: PPUSH
10993: CALL_OW 67
// until GetLives ( i ) = 1000 ;
10997: LD_VAR 0 1
11001: PPUSH
11002: CALL_OW 256
11006: PUSH
11007: LD_INT 1000
11009: EQUAL
11010: IFFALSE 10990
// SetLives ( mech , 1000 ) ;
11012: LD_VAR 0 2
11016: PPUSH
11017: LD_INT 1000
11019: PPUSH
11020: CALL_OW 234
// ComEnterUnit ( mech , i ) ;
11024: LD_VAR 0 2
11028: PPUSH
11029: LD_VAR 0 1
11033: PPUSH
11034: CALL_OW 120
// end else
11038: GO 11063
// if IsDrivenBy ( i ) then
11040: LD_VAR 0 1
11044: PPUSH
11045: CALL_OW 311
11049: IFFALSE 11063
// SetTag ( i , 0 ) ;
11051: LD_VAR 0 1
11055: PPUSH
11056: LD_INT 0
11058: PPUSH
11059: CALL_OW 109
// end ; if GetTag ( i ) < 300 then
11063: LD_VAR 0 1
11067: PPUSH
11068: CALL_OW 110
11072: PUSH
11073: LD_INT 300
11075: LESS
11076: IFFALSE 11241
// begin enemy := FilterUnitsInArea ( arCampArea , [ f_enemy , enemySide ] ) ;
11078: LD_ADDR_VAR 0 3
11082: PUSH
11083: LD_INT 19
11085: PPUSH
11086: LD_INT 81
11088: PUSH
11089: LD_EXP 12
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 70
11102: ST_TO_ADDR
// if GetLives ( i ) < 650 then
11103: LD_VAR 0 1
11107: PPUSH
11108: CALL_OW 256
11112: PUSH
11113: LD_INT 650
11115: LESS
11116: IFFALSE 11141
// begin ComStop ( i ) ;
11118: LD_VAR 0 1
11122: PPUSH
11123: CALL_OW 141
// SetTag ( i , 300 ) ;
11127: LD_VAR 0 1
11131: PPUSH
11132: LD_INT 300
11134: PPUSH
11135: CALL_OW 109
// continue ;
11139: GO 10742
// end ; if enemy then
11141: LD_VAR 0 3
11145: IFFALSE 11185
// begin if not HasTask ( i ) then
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 314
11156: NOT
11157: IFFALSE 11183
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_VAR 0 3
11168: PPUSH
11169: LD_VAR 0 1
11173: PPUSH
11174: CALL_OW 74
11178: PPUSH
11179: CALL_OW 115
// end else
11183: GO 11241
// if enemyMobile then
11185: LD_EXP 10
11189: IFFALSE 11241
// begin enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11191: LD_ADDR_VAR 0 3
11195: PUSH
11196: LD_INT 81
11198: PUSH
11199: LD_EXP 12
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PPUSH
11208: CALL_OW 69
11212: ST_TO_ADDR
// if enemy then
11213: LD_VAR 0 3
11217: IFFALSE 11241
// AgressiveMove ( i , [ [ 130 , 28 ] ] ) ;
11219: LD_VAR 0 1
11223: PPUSH
11224: LD_INT 130
11226: PUSH
11227: LD_INT 28
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: PPUSH
11237: CALL 55405 0 2
// end ; end ; end ;
11241: GO 10742
11243: POP
11244: POP
// end ;
11245: PPOPN 3
11247: END
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest , enemy , path ;
11248: LD_EXP 13
11252: IFFALSE 11775
11254: GO 11256
11256: DISABLE
11257: LD_INT 0
11259: PPUSH
11260: PPUSH
11261: PPUSH
11262: PPUSH
11263: PPUSH
// begin enable ;
11264: ENABLE
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
11265: LD_ADDR_VAR 0 2
11269: PUSH
11270: LD_EXP 13
11274: PPUSH
11275: LD_INT 50
11277: PUSH
11278: EMPTY
11279: LIST
11280: PPUSH
11281: CALL_OW 72
11285: ST_TO_ADDR
// arAttackersInf := [ ] ;
11286: LD_ADDR_EXP 13
11290: PUSH
11291: EMPTY
11292: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , class_soldier ] ) do
11293: LD_ADDR_VAR 0 1
11297: PUSH
11298: LD_VAR 0 2
11302: PPUSH
11303: LD_INT 25
11305: PUSH
11306: LD_INT 1
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PPUSH
11313: CALL_OW 72
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11471
// begin if Prob ( 50 ) then
11321: LD_INT 50
11323: PPUSH
11324: CALL_OW 13
11328: IFFALSE 11344
// SetTag ( i , tMine ) else
11330: LD_VAR 0 1
11334: PPUSH
11335: LD_INT 6
11337: PPUSH
11338: CALL_OW 109
11342: GO 11346
// continue ;
11344: GO 11318
// nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , enemySide ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11346: LD_ADDR_VAR 0 3
11350: PUSH
11351: LD_INT 81
11353: PUSH
11354: LD_EXP 12
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 3
11365: PUSH
11366: LD_INT 120
11368: PUSH
11369: LD_INT 11
11371: PUSH
11372: EMPTY
11373: LIST
11374: LIST
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: LD_INT 21
11385: PUSH
11386: LD_INT 2
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 21
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 69
11417: PPUSH
11418: LD_VAR 0 1
11422: PPUSH
11423: CALL_OW 74
11427: ST_TO_ADDR
// if not nearest then
11428: LD_VAR 0 3
11432: NOT
11433: IFFALSE 11437
// break ;
11435: GO 11471
// SetTag ( nearest , tMined ) ;
11437: LD_VAR 0 3
11441: PPUSH
11442: LD_INT 11
11444: PPUSH
11445: CALL_OW 109
// AddComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: LD_INT 0
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: CALL_OW 192
// end ;
11469: GO 11318
11471: POP
11472: POP
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11473: LD_ADDR_VAR 0 2
11477: PUSH
11478: LD_VAR 0 2
11482: PPUSH
11483: LD_INT 50
11485: PUSH
11486: EMPTY
11487: LIST
11488: PPUSH
11489: CALL_OW 72
11493: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
11494: LD_INT 70
11496: PPUSH
11497: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_VAR 0 2
11510: PPUSH
11511: LD_INT 50
11513: PUSH
11514: EMPTY
11515: LIST
11516: PPUSH
11517: CALL_OW 72
11521: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_enemy , enemySide ] ) ;
11522: LD_ADDR_VAR 0 4
11526: PUSH
11527: LD_INT 81
11529: PUSH
11530: LD_EXP 12
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: ST_TO_ADDR
// for i in tmp do
11544: LD_ADDR_VAR 0 1
11548: PUSH
11549: LD_VAR 0 2
11553: PUSH
11554: FOR_IN
11555: IFFALSE 11766
// if GetClass ( i ) <> 1 and GetTag ( i ) <> tMine then
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 257
11566: PUSH
11567: LD_INT 1
11569: NONEQUAL
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 110
11580: PUSH
11581: LD_INT 6
11583: NONEQUAL
11584: AND
11585: IFFALSE 11613
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11587: LD_VAR 0 1
11591: PPUSH
11592: LD_VAR 0 4
11596: PPUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL_OW 74
11606: PPUSH
11607: CALL_OW 115
11611: GO 11764
// if not HasTask ( i ) then
11613: LD_VAR 0 1
11617: PPUSH
11618: CALL_OW 314
11622: NOT
11623: IFFALSE 11764
// begin nearest := NearestUnitToUnit ( UnitFilter ( enemy , [ [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
11625: LD_ADDR_VAR 0 3
11629: PUSH
11630: LD_VAR 0 4
11634: PPUSH
11635: LD_INT 3
11637: PUSH
11638: LD_INT 120
11640: PUSH
11641: LD_INT 11
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 2
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 21
11667: PUSH
11668: LD_INT 3
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 72
11688: PPUSH
11689: LD_VAR 0 1
11693: PPUSH
11694: CALL_OW 74
11698: ST_TO_ADDR
// if not nearest then
11699: LD_VAR 0 3
11703: NOT
11704: IFFALSE 11732
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
11706: LD_VAR 0 1
11710: PPUSH
11711: LD_VAR 0 4
11715: PPUSH
11716: LD_VAR 0 1
11720: PPUSH
11721: CALL_OW 74
11725: PPUSH
11726: CALL_OW 115
11730: GO 11764
// begin SetTag ( nearest , tMined ) ;
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_INT 11
11739: PPUSH
11740: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
11744: LD_VAR 0 1
11748: PPUSH
11749: LD_INT 0
11751: PPUSH
11752: LD_INT 0
11754: PPUSH
11755: LD_VAR 0 3
11759: PPUSH
11760: CALL_OW 132
// end ; end ;
11764: GO 11554
11766: POP
11767: POP
// until not tmp ;
11768: LD_VAR 0 2
11772: NOT
11773: IFFALSE 11494
// end ;
11775: PPOPN 5
11777: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do var i ;
11778: LD_INT 22
11780: PUSH
11781: LD_EXP 12
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: LD_INT 32
11792: PUSH
11793: LD_INT 1
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PPUSH
11804: CALL_OW 69
11808: IFFALSE 11887
11810: GO 11812
11812: DISABLE
11813: LD_INT 0
11815: PPUSH
// begin enable ;
11816: ENABLE
// for i in FilterAllUnits ( [ [ f_side , enemySide ] , [ f_engine , engine_combustion ] ] ) do
11817: LD_ADDR_VAR 0 1
11821: PUSH
11822: LD_INT 22
11824: PUSH
11825: LD_EXP 12
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 32
11836: PUSH
11837: LD_INT 1
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 69
11852: PUSH
11853: FOR_IN
11854: IFFALSE 11885
// if GetFuel ( i ) < 3 then
11856: LD_VAR 0 1
11860: PPUSH
11861: CALL_OW 261
11865: PUSH
11866: LD_INT 3
11868: LESS
11869: IFFALSE 11883
// SetFuel ( i , 3 ) ;
11871: LD_VAR 0 1
11875: PPUSH
11876: LD_INT 3
11878: PPUSH
11879: CALL_OW 240
11883: GO 11853
11885: POP
11886: POP
// end ;
11887: PPOPN 1
11889: END
// every 0 0$2 trigger FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do var i ;
11890: LD_INT 9
11892: PPUSH
11893: LD_INT 22
11895: PUSH
11896: LD_EXP 12
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PPUSH
11905: CALL_OW 70
11909: IFFALSE 11972
11911: GO 11913
11913: DISABLE
11914: LD_INT 0
11916: PPUSH
// begin enable ;
11917: ENABLE
// for i in FilterUnitsInArea ( southEndArea , [ f_side , enemySide ] ) do
11918: LD_ADDR_VAR 0 1
11922: PUSH
11923: LD_INT 9
11925: PPUSH
11926: LD_INT 22
11928: PUSH
11929: LD_EXP 12
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PPUSH
11938: CALL_OW 70
11942: PUSH
11943: FOR_IN
11944: IFFALSE 11970
// begin Multiplayer_AddPoints ( convoySide , - 250 ) ;
11946: LD_EXP 40
11950: PPUSH
11951: LD_INT 250
11953: NEG
11954: PPUSH
11955: CALL 8128 0 2
// RemoveUnit ( i ) ;
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 64
// end ;
11968: GO 11943
11970: POP
11971: POP
// end ; end_of_file
11972: PPOPN 1
11974: END
// export convoys , convoyWave , convoySide ; export function PrepareConvoys ( side ) ; var i ; begin
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
// convoys := [ ] ;
11979: LD_ADDR_EXP 38
11983: PUSH
11984: EMPTY
11985: ST_TO_ADDR
// convoySide := side ;
11986: LD_ADDR_EXP 40
11990: PUSH
11991: LD_VAR 0 1
11995: ST_TO_ADDR
// convoyWave := 1 ;
11996: LD_ADDR_EXP 39
12000: PUSH
12001: LD_INT 1
12003: ST_TO_ADDR
// for i := 1 to 8 do
12004: LD_ADDR_VAR 0 3
12008: PUSH
12009: DOUBLE
12010: LD_INT 1
12012: DEC
12013: ST_TO_ADDR
12014: LD_INT 8
12016: PUSH
12017: FOR_TO
12018: IFFALSE 12048
// if multi_sides [ i ] then
12020: LD_EXP 15
12024: PUSH
12025: LD_VAR 0 3
12029: ARRAY
12030: IFFALSE 12046
// ChangeSideFog ( i , side ) ;
12032: LD_VAR 0 3
12036: PPUSH
12037: LD_VAR 0 1
12041: PPUSH
12042: CALL_OW 343
12046: GO 12017
12048: POP
12049: POP
// end ;
12050: LD_VAR 0 2
12054: RET
// every 2 2$00 + 1 1$00 trigger game do var i , tmp ;
12055: LD_EXP 2
12059: IFFALSE 12094
12061: GO 12063
12063: DISABLE
12064: LD_INT 0
12066: PPUSH
12067: PPUSH
// begin enable ;
12068: ENABLE
// blockThread := true ;
12069: LD_ADDR_EXP 6
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// SendConvoy ( convoyWave ) ;
12077: LD_EXP 39
12081: PPUSH
12082: CALL 12097 0 1
// blockThread := false ;
12086: LD_ADDR_EXP 6
12090: PUSH
12091: LD_INT 0
12093: ST_TO_ADDR
// end ;
12094: PPOPN 2
12096: END
// function SendConvoy ( wave ) ; var i , skill , un , veh , tmp , path ; begin
12097: LD_INT 0
12099: PPUSH
12100: PPUSH
12101: PPUSH
12102: PPUSH
12103: PPUSH
12104: PPUSH
12105: PPUSH
// convoyWave := Inc ( wave ) ;
12106: LD_ADDR_EXP 39
12110: PUSH
12111: LD_VAR 0 1
12115: PPUSH
12116: CALL 54162 0 1
12120: ST_TO_ADDR
// skill := [ 5 , 4 , 3 ] [ Difficulty ] ;
12121: LD_ADDR_VAR 0 4
12125: PUSH
12126: LD_INT 5
12128: PUSH
12129: LD_INT 4
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: LD_OWVAR 67
12144: ARRAY
12145: ST_TO_ADDR
// tmp := [ ] ;
12146: LD_ADDR_VAR 0 7
12150: PUSH
12151: EMPTY
12152: ST_TO_ADDR
// if wave mod 5 = 0 then
12153: LD_VAR 0 1
12157: PUSH
12158: LD_INT 5
12160: MOD
12161: PUSH
12162: LD_INT 0
12164: EQUAL
12165: IFFALSE 12411
// begin path := [ [ 16 , 21 ] , [ 36 , 45 ] , [ 48 , 58 ] , [ 59 , 88 ] , [ 76 , 106 ] , [ 93 , 150 ] , [ 92 , 177 ] ] ;
12167: LD_ADDR_VAR 0 8
12171: PUSH
12172: LD_INT 16
12174: PUSH
12175: LD_INT 21
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PUSH
12182: LD_INT 36
12184: PUSH
12185: LD_INT 45
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 48
12194: PUSH
12195: LD_INT 58
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 59
12204: PUSH
12205: LD_INT 88
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 76
12214: PUSH
12215: LD_INT 106
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 93
12224: PUSH
12225: LD_INT 150
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 92
12234: PUSH
12235: LD_INT 177
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: ST_TO_ADDR
// for i := 1 to 4 do
12251: LD_ADDR_VAR 0 3
12255: PUSH
12256: DOUBLE
12257: LD_INT 1
12259: DEC
12260: ST_TO_ADDR
12261: LD_INT 4
12263: PUSH
12264: FOR_TO
12265: IFFALSE 12407
// begin uc_side := convoySide ;
12267: LD_ADDR_OWVAR 20
12271: PUSH
12272: LD_EXP 40
12276: ST_TO_ADDR
// uc_nation := nation_russian ;
12277: LD_ADDR_OWVAR 21
12281: PUSH
12282: LD_INT 3
12284: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12285: LD_INT 0
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: LD_INT 4
12293: PPUSH
12294: CALL_OW 12
12298: PPUSH
12299: LD_VAR 0 4
12303: PPUSH
12304: CALL_OW 380
// un := CreateHuman ;
12308: LD_ADDR_VAR 0 5
12312: PUSH
12313: CALL_OW 44
12317: ST_TO_ADDR
// SetDir ( un , 3 ) ;
12318: LD_VAR 0 5
12322: PPUSH
12323: LD_INT 3
12325: PPUSH
12326: CALL_OW 233
// PlaceUnitArea ( un , northForestSpawnArea , false ) ;
12330: LD_VAR 0 5
12334: PPUSH
12335: LD_INT 10
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 49
// SetLives ( un , rand ( 300 , 1000 ) ) ;
12345: LD_VAR 0 5
12349: PPUSH
12350: LD_INT 300
12352: PPUSH
12353: LD_INT 1000
12355: PPUSH
12356: CALL_OW 12
12360: PPUSH
12361: CALL_OW 234
// convoys := Join ( convoys , un ) ;
12365: LD_ADDR_EXP 38
12369: PUSH
12370: LD_EXP 38
12374: PPUSH
12375: LD_VAR 0 5
12379: PPUSH
12380: CALL 52801 0 2
12384: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12385: LD_ADDR_VAR 0 7
12389: PUSH
12390: LD_VAR 0 7
12394: PPUSH
12395: LD_VAR 0 5
12399: PPUSH
12400: CALL 52801 0 2
12404: ST_TO_ADDR
// end ;
12405: GO 12264
12407: POP
12408: POP
// end else
12409: GO 13592
// if wave mod 3 = 0 then
12411: LD_VAR 0 1
12415: PUSH
12416: LD_INT 3
12418: MOD
12419: PUSH
12420: LD_INT 0
12422: EQUAL
12423: IFFALSE 12913
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 133 , 102 ] , [ 143 , 136 ] , [ 127 , 154 ] , [ 92 , 152 ] , [ 93 , 177 ] ] ;
12425: LD_ADDR_VAR 0 8
12429: PUSH
12430: LD_INT 133
12432: PUSH
12433: LD_INT 15
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 125
12442: PUSH
12443: LD_INT 34
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 109
12452: PUSH
12453: LD_INT 55
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 99
12462: PUSH
12463: LD_INT 64
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 133
12472: PUSH
12473: LD_INT 102
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 143
12482: PUSH
12483: LD_INT 136
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 127
12492: PUSH
12493: LD_INT 154
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PUSH
12500: LD_INT 92
12502: PUSH
12503: LD_INT 152
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 93
12512: PUSH
12513: LD_INT 177
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: ST_TO_ADDR
// for i := 1 to 4 do
12531: LD_ADDR_VAR 0 3
12535: PUSH
12536: DOUBLE
12537: LD_INT 1
12539: DEC
12540: ST_TO_ADDR
12541: LD_INT 4
12543: PUSH
12544: FOR_TO
12545: IFFALSE 12909
// begin uc_side := convoySide ;
12547: LD_ADDR_OWVAR 20
12551: PUSH
12552: LD_EXP 40
12556: ST_TO_ADDR
// uc_nation := nation_russian ;
12557: LD_ADDR_OWVAR 21
12561: PUSH
12562: LD_INT 3
12564: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
12565: LD_INT 0
12567: PPUSH
12568: LD_INT 1
12570: PPUSH
12571: LD_INT 4
12573: PPUSH
12574: CALL_OW 12
12578: PPUSH
12579: LD_VAR 0 4
12583: PPUSH
12584: CALL_OW 380
// un := CreateHuman ;
12588: LD_ADDR_VAR 0 5
12592: PUSH
12593: CALL_OW 44
12597: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 60 , 90 ) ) ;
12598: LD_INT 21
12600: PUSH
12601: LD_INT 22
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 1
12610: PPUSH
12611: LD_INT 2
12613: PPUSH
12614: CALL_OW 12
12618: ARRAY
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: LD_INT 1
12625: PPUSH
12626: LD_INT 42
12628: PUSH
12629: LD_INT 43
12631: PUSH
12632: LD_INT 51
12634: PUSH
12635: LD_INT 44
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: PUSH
12644: LD_INT 1
12646: PPUSH
12647: LD_INT 4
12649: PPUSH
12650: CALL_OW 12
12654: ARRAY
12655: PPUSH
12656: LD_INT 60
12658: PPUSH
12659: LD_INT 90
12661: PPUSH
12662: CALL_OW 12
12666: PPUSH
12667: CALL 19950 0 5
// veh := CreateVehicle ;
12671: LD_ADDR_VAR 0 6
12675: PUSH
12676: CALL_OW 45
12680: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
12681: LD_VAR 0 6
12685: PPUSH
12686: LD_INT 3
12688: PPUSH
12689: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
12693: LD_VAR 0 6
12697: PPUSH
12698: LD_INT 300
12700: PPUSH
12701: LD_INT 1000
12703: PPUSH
12704: CALL_OW 12
12708: PPUSH
12709: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
12713: LD_VAR 0 6
12717: PPUSH
12718: CALL_OW 264
12722: PUSH
12723: LD_INT 51
12725: EQUAL
12726: IFFALSE 12774
// SetCargo ( veh , [ mat_cans , mat_oil ] [ rand ( 1 , 2 ) ] , 10 * rand ( 1 , 10 ) ) ;
12728: LD_VAR 0 6
12732: PPUSH
12733: LD_INT 1
12735: PUSH
12736: LD_INT 2
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 1
12745: PPUSH
12746: LD_INT 2
12748: PPUSH
12749: CALL_OW 12
12753: ARRAY
12754: PPUSH
12755: LD_INT 10
12757: PUSH
12758: LD_INT 1
12760: PPUSH
12761: LD_INT 10
12763: PPUSH
12764: CALL_OW 12
12768: MUL
12769: PPUSH
12770: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
12774: LD_INT 10
12776: PPUSH
12777: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
12781: LD_VAR 0 6
12785: PPUSH
12786: LD_INT 7
12788: PPUSH
12789: LD_INT 0
12791: PPUSH
12792: CALL_OW 49
12796: IFFALSE 12774
// PlaceHumanInUnit ( un , veh ) ;
12798: LD_VAR 0 5
12802: PPUSH
12803: LD_VAR 0 6
12807: PPUSH
12808: CALL_OW 52
// convoys := Join ( convoys , un ) ;
12812: LD_ADDR_EXP 38
12816: PUSH
12817: LD_EXP 38
12821: PPUSH
12822: LD_VAR 0 5
12826: PPUSH
12827: CALL 52801 0 2
12831: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
12832: LD_ADDR_VAR 0 7
12836: PUSH
12837: LD_VAR 0 7
12841: PPUSH
12842: LD_VAR 0 5
12846: PPUSH
12847: CALL 52801 0 2
12851: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
12852: LD_ADDR_EXP 38
12856: PUSH
12857: LD_EXP 38
12861: PPUSH
12862: LD_VAR 0 6
12866: PPUSH
12867: CALL 52801 0 2
12871: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_VAR 0 7
12881: PPUSH
12882: LD_VAR 0 6
12886: PPUSH
12887: CALL 52801 0 2
12891: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
12892: LD_VAR 0 5
12896: PPUSH
12897: LD_INT 133
12899: PPUSH
12900: LD_INT 15
12902: PPUSH
12903: CALL_OW 111
// end ;
12907: GO 12544
12909: POP
12910: POP
// end else
12911: GO 13592
// begin path := [ [ 133 , 15 ] , [ 125 , 34 ] , [ 109 , 55 ] , [ 99 , 64 ] , [ 88 , 70 ] , [ 74 , 78 ] , [ 70 , 91 ] , [ 80 , 113 ] , [ 89 , 133 ] , [ 91 , 159 ] , [ 93 , 177 ] ] ;
12913: LD_ADDR_VAR 0 8
12917: PUSH
12918: LD_INT 133
12920: PUSH
12921: LD_INT 15
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 125
12930: PUSH
12931: LD_INT 34
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: LD_INT 109
12940: PUSH
12941: LD_INT 55
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 99
12950: PUSH
12951: LD_INT 64
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: LD_INT 88
12960: PUSH
12961: LD_INT 70
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 74
12970: PUSH
12971: LD_INT 78
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 70
12980: PUSH
12981: LD_INT 91
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 80
12990: PUSH
12991: LD_INT 113
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 89
13000: PUSH
13001: LD_INT 133
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 91
13010: PUSH
13011: LD_INT 159
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 93
13020: PUSH
13021: LD_INT 177
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: ST_TO_ADDR
// for i := 1 to 2 do
13041: LD_ADDR_VAR 0 3
13045: PUSH
13046: DOUBLE
13047: LD_INT 1
13049: DEC
13050: ST_TO_ADDR
13051: LD_INT 2
13053: PUSH
13054: FOR_TO
13055: IFFALSE 13400
// begin uc_side := convoySide ;
13057: LD_ADDR_OWVAR 20
13061: PUSH
13062: LD_EXP 40
13066: ST_TO_ADDR
// uc_nation := nation_russian ;
13067: LD_ADDR_OWVAR 21
13071: PUSH
13072: LD_INT 3
13074: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13075: LD_INT 0
13077: PPUSH
13078: LD_INT 1
13080: PPUSH
13081: LD_INT 4
13083: PPUSH
13084: CALL_OW 12
13088: PPUSH
13089: LD_VAR 0 4
13093: PPUSH
13094: CALL_OW 380
// un := CreateHuman ;
13098: LD_ADDR_VAR 0 5
13102: PUSH
13103: CALL_OW 44
13107: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_wheeled , ru_medium_tracked ] [ rand ( 1 , 2 ) ] , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_gatling_gun , ru_cargo_bay , ru_gun ] [ rand ( 1 , 4 ) ] , rand ( 70 , 90 ) ) ;
13108: LD_INT 21
13110: PUSH
13111: LD_INT 22
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PUSH
13118: LD_INT 1
13120: PPUSH
13121: LD_INT 2
13123: PPUSH
13124: CALL_OW 12
13128: ARRAY
13129: PPUSH
13130: LD_INT 1
13132: PPUSH
13133: LD_INT 1
13135: PPUSH
13136: LD_INT 42
13138: PUSH
13139: LD_INT 43
13141: PUSH
13142: LD_INT 51
13144: PUSH
13145: LD_INT 44
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: PUSH
13154: LD_INT 1
13156: PPUSH
13157: LD_INT 4
13159: PPUSH
13160: CALL_OW 12
13164: ARRAY
13165: PPUSH
13166: LD_INT 70
13168: PPUSH
13169: LD_INT 90
13171: PPUSH
13172: CALL_OW 12
13176: PPUSH
13177: CALL 19950 0 5
// veh := CreateVehicle ;
13181: LD_ADDR_VAR 0 6
13185: PUSH
13186: CALL_OW 45
13190: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
13191: LD_VAR 0 6
13195: PPUSH
13196: LD_INT 3
13198: PPUSH
13199: CALL_OW 233
// SetLives ( veh , rand ( 300 , 1000 ) ) ;
13203: LD_VAR 0 6
13207: PPUSH
13208: LD_INT 300
13210: PPUSH
13211: LD_INT 1000
13213: PPUSH
13214: CALL_OW 12
13218: PPUSH
13219: CALL_OW 234
// if GetWeapon ( veh ) = ru_cargo_bay then
13223: LD_VAR 0 6
13227: PPUSH
13228: CALL_OW 264
13232: PUSH
13233: LD_INT 51
13235: EQUAL
13236: IFFALSE 13265
// SetCargo ( veh , mat_cans , 10 * rand ( 1 , 10 ) ) ;
13238: LD_VAR 0 6
13242: PPUSH
13243: LD_INT 1
13245: PPUSH
13246: LD_INT 10
13248: PUSH
13249: LD_INT 1
13251: PPUSH
13252: LD_INT 10
13254: PPUSH
13255: CALL_OW 12
13259: MUL
13260: PPUSH
13261: CALL_OW 290
// repeat wait ( 0 0$0.3 ) ;
13265: LD_INT 10
13267: PPUSH
13268: CALL_OW 67
// until PlaceUnitArea ( veh , northSpawnArea , false ) ;
13272: LD_VAR 0 6
13276: PPUSH
13277: LD_INT 7
13279: PPUSH
13280: LD_INT 0
13282: PPUSH
13283: CALL_OW 49
13287: IFFALSE 13265
// PlaceHumanInUnit ( un , veh ) ;
13289: LD_VAR 0 5
13293: PPUSH
13294: LD_VAR 0 6
13298: PPUSH
13299: CALL_OW 52
// convoys := Join ( convoys , un ) ;
13303: LD_ADDR_EXP 38
13307: PUSH
13308: LD_EXP 38
13312: PPUSH
13313: LD_VAR 0 5
13317: PPUSH
13318: CALL 52801 0 2
13322: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13323: LD_ADDR_VAR 0 7
13327: PUSH
13328: LD_VAR 0 7
13332: PPUSH
13333: LD_VAR 0 5
13337: PPUSH
13338: CALL 52801 0 2
13342: ST_TO_ADDR
// convoys := Join ( convoys , veh ) ;
13343: LD_ADDR_EXP 38
13347: PUSH
13348: LD_EXP 38
13352: PPUSH
13353: LD_VAR 0 6
13357: PPUSH
13358: CALL 52801 0 2
13362: ST_TO_ADDR
// tmp := Join ( tmp , veh ) ;
13363: LD_ADDR_VAR 0 7
13367: PUSH
13368: LD_VAR 0 7
13372: PPUSH
13373: LD_VAR 0 6
13377: PPUSH
13378: CALL 52801 0 2
13382: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13383: LD_VAR 0 5
13387: PPUSH
13388: LD_INT 133
13390: PPUSH
13391: LD_INT 15
13393: PPUSH
13394: CALL_OW 111
// end ;
13398: GO 13054
13400: POP
13401: POP
// for i := 1 to rand ( 3 , 5 ) do
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: DOUBLE
13408: LD_INT 1
13410: DEC
13411: ST_TO_ADDR
13412: LD_INT 3
13414: PPUSH
13415: LD_INT 5
13417: PPUSH
13418: CALL_OW 12
13422: PUSH
13423: FOR_TO
13424: IFFALSE 13590
// begin uc_side := convoySide ;
13426: LD_ADDR_OWVAR 20
13430: PUSH
13431: LD_EXP 40
13435: ST_TO_ADDR
// uc_nation := nation_russian ;
13436: LD_ADDR_OWVAR 21
13440: PUSH
13441: LD_INT 3
13443: ST_TO_ADDR
// PrepareHuman ( false , rand ( 1 , 4 ) , skill ) ;
13444: LD_INT 0
13446: PPUSH
13447: LD_INT 1
13449: PPUSH
13450: LD_INT 4
13452: PPUSH
13453: CALL_OW 12
13457: PPUSH
13458: LD_VAR 0 4
13462: PPUSH
13463: CALL_OW 380
// un := CreateHuman ;
13467: LD_ADDR_VAR 0 5
13471: PUSH
13472: CALL_OW 44
13476: ST_TO_ADDR
// SetDir ( un , 3 ) ;
13477: LD_VAR 0 5
13481: PPUSH
13482: LD_INT 3
13484: PPUSH
13485: CALL_OW 233
// repeat wait ( 0 0$1 ) ;
13489: LD_INT 35
13491: PPUSH
13492: CALL_OW 67
// until PlaceUnitArea ( un , northSpawnArea , false ) ;
13496: LD_VAR 0 5
13500: PPUSH
13501: LD_INT 7
13503: PPUSH
13504: LD_INT 0
13506: PPUSH
13507: CALL_OW 49
13511: IFFALSE 13489
// SetLives ( un , rand ( 300 , 1000 ) ) ;
13513: LD_VAR 0 5
13517: PPUSH
13518: LD_INT 300
13520: PPUSH
13521: LD_INT 1000
13523: PPUSH
13524: CALL_OW 12
13528: PPUSH
13529: CALL_OW 234
// convoys := Join ( convoys , un ) ;
13533: LD_ADDR_EXP 38
13537: PUSH
13538: LD_EXP 38
13542: PPUSH
13543: LD_VAR 0 5
13547: PPUSH
13548: CALL 52801 0 2
13552: ST_TO_ADDR
// tmp := Join ( tmp , un ) ;
13553: LD_ADDR_VAR 0 7
13557: PUSH
13558: LD_VAR 0 7
13562: PPUSH
13563: LD_VAR 0 5
13567: PPUSH
13568: CALL 52801 0 2
13572: ST_TO_ADDR
// ComMoveXY ( un , 133 , 15 ) ;
13573: LD_VAR 0 5
13577: PPUSH
13578: LD_INT 133
13580: PPUSH
13581: LD_INT 15
13583: PPUSH
13584: CALL_OW 111
// end ;
13588: GO 13423
13590: POP
13591: POP
// end ; if not tmp then
13592: LD_VAR 0 7
13596: NOT
13597: IFFALSE 13601
// exit ;
13599: GO 13907
// repeat wait ( 0 0$1 ) ;
13601: LD_INT 35
13603: PPUSH
13604: CALL_OW 67
// for i in tmp do
13608: LD_ADDR_VAR 0 3
13612: PUSH
13613: LD_VAR 0 7
13617: PUSH
13618: FOR_IN
13619: IFFALSE 13898
// begin if IsDead ( i ) then
13621: LD_VAR 0 3
13625: PPUSH
13626: CALL_OW 301
13630: IFFALSE 13650
// tmp := tmp diff i else
13632: LD_ADDR_VAR 0 7
13636: PUSH
13637: LD_VAR 0 7
13641: PUSH
13642: LD_VAR 0 3
13646: DIFF
13647: ST_TO_ADDR
13648: GO 13896
// if IsInArea ( i , southEndArea ) then
13650: LD_VAR 0 3
13654: PPUSH
13655: LD_INT 9
13657: PPUSH
13658: CALL_OW 308
13662: IFFALSE 13815
// begin tmp := tmp diff i ;
13664: LD_ADDR_VAR 0 7
13668: PUSH
13669: LD_VAR 0 7
13673: PUSH
13674: LD_VAR 0 3
13678: DIFF
13679: ST_TO_ADDR
// convoys := convoys diff i ;
13680: LD_ADDR_EXP 38
13684: PUSH
13685: LD_EXP 38
13689: PUSH
13690: LD_VAR 0 3
13694: DIFF
13695: ST_TO_ADDR
// if GetType ( i ) = unit_human then
13696: LD_VAR 0 3
13700: PPUSH
13701: CALL_OW 247
13705: PUSH
13706: LD_INT 1
13708: EQUAL
13709: IFFALSE 13730
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 7 ) ) else
13711: LD_EXP 40
13715: PPUSH
13716: LD_INT 7
13718: PPUSH
13719: CALL 8286 0 1
13723: PPUSH
13724: CALL 8128 0 2
13728: GO 13789
// begin tmp := tmp diff IsInUnit ( i ) ;
13730: LD_ADDR_VAR 0 7
13734: PUSH
13735: LD_VAR 0 7
13739: PUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: CALL_OW 310
13749: DIFF
13750: ST_TO_ADDR
// convoys := convoys diff IsInUnit ( i ) ;
13751: LD_ADDR_EXP 38
13755: PUSH
13756: LD_EXP 38
13760: PUSH
13761: LD_VAR 0 3
13765: PPUSH
13766: CALL_OW 310
13770: DIFF
13771: ST_TO_ADDR
// Multiplayer_AddPoints ( convoySide , Multiplayer_GetCondition ( 8 ) ) ;
13772: LD_EXP 40
13776: PPUSH
13777: LD_INT 8
13779: PPUSH
13780: CALL 8286 0 1
13784: PPUSH
13785: CALL 8128 0 2
// end ; RemoveUnit ( i ) ;
13789: LD_VAR 0 3
13793: PPUSH
13794: CALL_OW 64
// savedConvoyUnits := Inc ( savedConvoyUnits ) ;
13798: LD_ADDR_EXP 5
13802: PUSH
13803: LD_EXP 5
13807: PPUSH
13808: CALL 54162 0 1
13812: ST_TO_ADDR
// end else
13813: GO 13896
// if GetType ( i ) = unit_vehicle and GetFuel ( i ) = 0 then
13815: LD_VAR 0 3
13819: PPUSH
13820: CALL_OW 247
13824: PUSH
13825: LD_INT 2
13827: EQUAL
13828: PUSH
13829: LD_VAR 0 3
13833: PPUSH
13834: CALL_OW 261
13838: PUSH
13839: LD_INT 0
13841: EQUAL
13842: AND
13843: IFFALSE 13879
// begin tmp := tmp diff i ;
13845: LD_ADDR_VAR 0 7
13849: PUSH
13850: LD_VAR 0 7
13854: PUSH
13855: LD_VAR 0 3
13859: DIFF
13860: ST_TO_ADDR
// convoys := convoys diff i ;
13861: LD_ADDR_EXP 38
13865: PUSH
13866: LD_EXP 38
13870: PUSH
13871: LD_VAR 0 3
13875: DIFF
13876: ST_TO_ADDR
// end else
13877: GO 13896
// MoveTo ( i , path , southEndArea ) ;
13879: LD_VAR 0 3
13883: PPUSH
13884: LD_VAR 0 8
13888: PPUSH
13889: LD_INT 9
13891: PPUSH
13892: CALL 13912 0 3
// end ;
13896: GO 13618
13898: POP
13899: POP
// until not tmp ;
13900: LD_VAR 0 7
13904: NOT
13905: IFFALSE 13601
// end ;
13907: LD_VAR 0 2
13911: RET
// function MoveTo ( unit , path , area ) ; var cr , tag , type , vehicle , ignoreCratesWeapon ; begin
13912: LD_INT 0
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
13919: PPUSH
// if not unit then
13920: LD_VAR 0 1
13924: NOT
13925: IFFALSE 13929
// exit ;
13927: GO 14671
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser , ru_cargo_bay ] ;
13929: LD_ADDR_VAR 0 9
13933: PUSH
13934: LD_INT 29
13936: PUSH
13937: LD_INT 91
13939: PUSH
13940: LD_INT 49
13942: PUSH
13943: LD_INT 51
13945: PUSH
13946: EMPTY
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: ST_TO_ADDR
// if IsOk ( unit ) then
13952: LD_VAR 0 1
13956: PPUSH
13957: CALL_OW 302
13961: IFFALSE 14671
// begin tag := GetTag ( unit ) + 1 ;
13963: LD_ADDR_VAR 0 6
13967: PUSH
13968: LD_VAR 0 1
13972: PPUSH
13973: CALL_OW 110
13977: PUSH
13978: LD_INT 1
13980: PLUS
13981: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( unit ) , GetY ( unit ) , 3 ) ;
13982: LD_ADDR_VAR 0 5
13986: PUSH
13987: LD_VAR 0 1
13991: PPUSH
13992: CALL_OW 250
13996: PPUSH
13997: LD_VAR 0 1
14001: PPUSH
14002: CALL_OW 251
14006: PPUSH
14007: LD_INT 3
14009: PPUSH
14010: CALL 55147 0 3
14014: ST_TO_ADDR
// type := GetType ( unit ) ;
14015: LD_ADDR_VAR 0 7
14019: PUSH
14020: LD_VAR 0 1
14024: PPUSH
14025: CALL_OW 247
14029: ST_TO_ADDR
// if type = unit_human then
14030: LD_VAR 0 7
14034: PUSH
14035: LD_INT 1
14037: EQUAL
14038: IFFALSE 14128
// begin vehicle := IsInUnit ( unit ) ;
14040: LD_ADDR_VAR 0 8
14044: PUSH
14045: LD_VAR 0 1
14049: PPUSH
14050: CALL_OW 310
14054: ST_TO_ADDR
// if vehicle and GetFuel ( vehicle ) = 0 then
14055: LD_VAR 0 8
14059: PUSH
14060: LD_VAR 0 8
14064: PPUSH
14065: CALL_OW 261
14069: PUSH
14070: LD_INT 0
14072: EQUAL
14073: AND
14074: IFFALSE 14126
// begin ComExitVehicle ( unit ) ;
14076: LD_VAR 0 1
14080: PPUSH
14081: CALL_OW 121
// AddComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14085: LD_VAR 0 1
14089: PPUSH
14090: LD_VAR 0 2
14094: PUSH
14095: LD_VAR 0 6
14099: ARRAY
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: PPUSH
14105: LD_VAR 0 2
14109: PUSH
14110: LD_VAR 0 6
14114: ARRAY
14115: PUSH
14116: LD_INT 2
14118: ARRAY
14119: PPUSH
14120: CALL_OW 171
// exit ;
14124: GO 14671
// end ; end else
14126: GO 14203
// begin if GetFuel ( unit ) = 0 then
14128: LD_VAR 0 1
14132: PPUSH
14133: CALL_OW 261
14137: PUSH
14138: LD_INT 0
14140: EQUAL
14141: IFFALSE 14203
// begin ComExitVehicle ( IsDrivenBy ( unit ) ) ;
14143: LD_VAR 0 1
14147: PPUSH
14148: CALL_OW 311
14152: PPUSH
14153: CALL_OW 121
// AddComMoveXY ( IsDrivenBy ( unit ) , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) ;
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 311
14166: PPUSH
14167: LD_VAR 0 2
14171: PUSH
14172: LD_VAR 0 6
14176: ARRAY
14177: PUSH
14178: LD_INT 1
14180: ARRAY
14181: PPUSH
14182: LD_VAR 0 2
14186: PUSH
14187: LD_VAR 0 6
14191: ARRAY
14192: PUSH
14193: LD_INT 2
14195: ARRAY
14196: PPUSH
14197: CALL_OW 171
// exit ;
14201: GO 14671
// end ; end ; if type = unit_vehicle and GetWeapon ( unit ) = ru_cargo_bay and IsInArea ( unit , cargoCheckpointArea ) and ( GetCargo ( unit , mat_cans ) or GetCargo ( unit , mat_oil ) ) then
14203: LD_VAR 0 7
14207: PUSH
14208: LD_INT 2
14210: EQUAL
14211: PUSH
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 264
14221: PUSH
14222: LD_INT 51
14224: EQUAL
14225: AND
14226: PUSH
14227: LD_VAR 0 1
14231: PPUSH
14232: LD_INT 29
14234: PPUSH
14235: CALL_OW 308
14239: AND
14240: PUSH
14241: LD_VAR 0 1
14245: PPUSH
14246: LD_INT 1
14248: PPUSH
14249: CALL_OW 289
14253: PUSH
14254: LD_VAR 0 1
14258: PPUSH
14259: LD_INT 2
14261: PPUSH
14262: CALL_OW 289
14266: OR
14267: AND
14268: IFFALSE 14316
// begin goToUnload := Join ( goToUnload , unit ) ;
14270: LD_ADDR_EXP 8
14274: PUSH
14275: LD_EXP 8
14279: PPUSH
14280: LD_VAR 0 1
14284: PPUSH
14285: CALL 52801 0 2
14289: ST_TO_ADDR
// ComMoveXY ( unit , 113 , 117 ) ;
14290: LD_VAR 0 1
14294: PPUSH
14295: LD_INT 113
14297: PPUSH
14298: LD_INT 117
14300: PPUSH
14301: CALL_OW 111
// AddComUnload ( unit ) ;
14305: LD_VAR 0 1
14309: PPUSH
14310: CALL_OW 219
// exit ;
14314: GO 14671
// end ; if unit in goToUnload then
14316: LD_VAR 0 1
14320: PUSH
14321: LD_EXP 8
14325: IN
14326: IFFALSE 14384
// begin if GetCargo ( unit , mat_cans ) = 0 then
14328: LD_VAR 0 1
14332: PPUSH
14333: LD_INT 1
14335: PPUSH
14336: CALL_OW 289
14340: PUSH
14341: LD_INT 0
14343: EQUAL
14344: IFFALSE 14382
// begin SetTag ( unit , tag + 2 ) ;
14346: LD_VAR 0 1
14350: PPUSH
14351: LD_VAR 0 6
14355: PUSH
14356: LD_INT 2
14358: PLUS
14359: PPUSH
14360: CALL_OW 109
// goToUnload := goToUnload diff unit ;
14364: LD_ADDR_EXP 8
14368: PUSH
14369: LD_EXP 8
14373: PUSH
14374: LD_VAR 0 1
14378: DIFF
14379: ST_TO_ADDR
// end else
14380: GO 14384
// exit ;
14382: GO 14671
// end ; if type = unit_vehicle and cr > 3 and not GetWeapon ( unit ) in ignoreCratesWeapon then
14384: LD_VAR 0 7
14388: PUSH
14389: LD_INT 2
14391: EQUAL
14392: PUSH
14393: LD_VAR 0 5
14397: PUSH
14398: LD_INT 3
14400: GREATER
14401: AND
14402: PUSH
14403: LD_VAR 0 1
14407: PPUSH
14408: CALL_OW 264
14412: PUSH
14413: LD_VAR 0 9
14417: IN
14418: NOT
14419: AND
14420: IFFALSE 14459
// ComAttackPlace ( unit , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
14422: LD_VAR 0 1
14426: PPUSH
14427: LD_VAR 0 5
14431: PUSH
14432: LD_INT 1
14434: ARRAY
14435: PUSH
14436: LD_INT 1
14438: ARRAY
14439: PPUSH
14440: LD_VAR 0 5
14444: PUSH
14445: LD_INT 1
14447: ARRAY
14448: PUSH
14449: LD_INT 2
14451: ARRAY
14452: PPUSH
14453: CALL_OW 116
14457: GO 14671
// if path > tag then
14459: LD_VAR 0 2
14463: PUSH
14464: LD_VAR 0 6
14468: GREATER
14469: IFFALSE 14640
// begin if GetDistUnitXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_VAR 0 2
14480: PUSH
14481: LD_VAR 0 6
14485: ARRAY
14486: PUSH
14487: LD_INT 1
14489: ARRAY
14490: PPUSH
14491: LD_VAR 0 2
14495: PUSH
14496: LD_VAR 0 6
14500: ARRAY
14501: PUSH
14502: LD_INT 2
14504: ARRAY
14505: PPUSH
14506: CALL_OW 297
14510: PUSH
14511: LD_INT 6
14513: GREATER
14514: IFFALSE 14624
// if GetClass ( unit ) in [ 2 , 3 , 4 ] then
14516: LD_VAR 0 1
14520: PPUSH
14521: CALL_OW 257
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: LD_INT 3
14531: PUSH
14532: LD_INT 4
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: LIST
14539: IN
14540: IFFALSE 14583
// ComMoveXY ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14542: LD_VAR 0 1
14546: PPUSH
14547: LD_VAR 0 2
14551: PUSH
14552: LD_VAR 0 6
14556: ARRAY
14557: PUSH
14558: LD_INT 1
14560: ARRAY
14561: PPUSH
14562: LD_VAR 0 2
14566: PUSH
14567: LD_VAR 0 6
14571: ARRAY
14572: PUSH
14573: LD_INT 2
14575: ARRAY
14576: PPUSH
14577: CALL_OW 111
14581: GO 14622
// ComAgressiveMove ( unit , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
14583: LD_VAR 0 1
14587: PPUSH
14588: LD_VAR 0 2
14592: PUSH
14593: LD_VAR 0 6
14597: ARRAY
14598: PUSH
14599: LD_INT 1
14601: ARRAY
14602: PPUSH
14603: LD_VAR 0 2
14607: PUSH
14608: LD_VAR 0 6
14612: ARRAY
14613: PUSH
14614: LD_INT 2
14616: ARRAY
14617: PPUSH
14618: CALL_OW 114
14622: GO 14638
// SetTag ( unit , tag ) ;
14624: LD_VAR 0 1
14628: PPUSH
14629: LD_VAR 0 6
14633: PPUSH
14634: CALL_OW 109
// end else
14638: GO 14671
// if not IsInArea ( unit , area ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_VAR 0 3
14649: PPUSH
14650: CALL_OW 308
14654: NOT
14655: IFFALSE 14671
// ComMoveToArea ( unit , area ) ;
14657: LD_VAR 0 1
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 113
// end ; end ; end_of_file
14671: LD_VAR 0 4
14675: RET
// every 0 0$20 trigger game do
14676: LD_EXP 2
14680: IFFALSE 14721
14682: GO 14684
14684: DISABLE
// SpawnCrates ( [ cratesWestArea , cratesEastArea , cratesMiddleArea ] , multi_crates_spawn [ 2 ] , multi_crates_spawn [ 1 ] ) ;
14685: LD_INT 11
14687: PUSH
14688: LD_INT 12
14690: PUSH
14691: LD_INT 13
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PPUSH
14699: LD_EXP 29
14703: PUSH
14704: LD_INT 2
14706: ARRAY
14707: PPUSH
14708: LD_EXP 29
14712: PUSH
14713: LD_INT 1
14715: ARRAY
14716: PPUSH
14717: CALL 14722 0 3
14721: END
// export function SpawnCrates ( areas , time , amount ) ; var i , x ; begin
14722: LD_INT 0
14724: PPUSH
14725: PPUSH
14726: PPUSH
// if not areas then
14727: LD_VAR 0 1
14731: NOT
14732: IFFALSE 14736
// exit ;
14734: GO 14942
// x := 5 ;
14736: LD_ADDR_VAR 0 6
14740: PUSH
14741: LD_INT 5
14743: ST_TO_ADDR
// repeat wait ( time ) ;
14744: LD_VAR 0 2
14748: PPUSH
14749: CALL_OW 67
// for i in areas do
14753: LD_ADDR_VAR 0 5
14757: PUSH
14758: LD_VAR 0 1
14762: PUSH
14763: FOR_IN
14764: IFFALSE 14853
// begin if GetResourceArea ( i , mat_cans ) < [ 15 , 12 , 10 ] [ Difficulty ] then
14766: LD_VAR 0 5
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 287
14778: PUSH
14779: LD_INT 15
14781: PUSH
14782: LD_INT 12
14784: PUSH
14785: LD_INT 10
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: PUSH
14793: LD_OWVAR 67
14797: ARRAY
14798: LESS
14799: IFFALSE 14851
// begin wait ( 0 0$10 * Difficulty ) ;
14801: LD_INT 350
14803: PUSH
14804: LD_OWVAR 67
14808: MUL
14809: PPUSH
14810: CALL_OW 67
// CreateCratesArea ( x , i , true ) ;
14814: LD_VAR 0 6
14818: PPUSH
14819: LD_VAR 0 5
14823: PPUSH
14824: LD_INT 1
14826: PPUSH
14827: CALL_OW 55
// amount := amount - ( x * 10 ) ;
14831: LD_ADDR_VAR 0 3
14835: PUSH
14836: LD_VAR 0 3
14840: PUSH
14841: LD_VAR 0 6
14845: PUSH
14846: LD_INT 10
14848: MUL
14849: MINUS
14850: ST_TO_ADDR
// end ; end ;
14851: GO 14763
14853: POP
14854: POP
// time := time + ( 0 0$5 * Difficulty ) ;
14855: LD_ADDR_VAR 0 2
14859: PUSH
14860: LD_VAR 0 2
14864: PUSH
14865: LD_INT 175
14867: PUSH
14868: LD_OWVAR 67
14872: MUL
14873: PLUS
14874: ST_TO_ADDR
// x := x - 1 ;
14875: LD_ADDR_VAR 0 6
14879: PUSH
14880: LD_VAR 0 6
14884: PUSH
14885: LD_INT 1
14887: MINUS
14888: ST_TO_ADDR
// if x = 0 then
14889: LD_VAR 0 6
14893: PUSH
14894: LD_INT 0
14896: EQUAL
14897: IFFALSE 14907
// x := 5 ;
14899: LD_ADDR_VAR 0 6
14903: PUSH
14904: LD_INT 5
14906: ST_TO_ADDR
// if time > 2 2$00 then
14907: LD_VAR 0 2
14911: PUSH
14912: LD_INT 4200
14914: GREATER
14915: IFFALSE 14925
// time := 0 0$40 ;
14917: LD_ADDR_VAR 0 2
14921: PUSH
14922: LD_INT 1400
14924: ST_TO_ADDR
// until not game or amount <= 0 ;
14925: LD_EXP 2
14929: NOT
14930: PUSH
14931: LD_VAR 0 3
14935: PUSH
14936: LD_INT 0
14938: LESSEQUAL
14939: OR
14940: IFFALSE 14744
// end ; end_of_file
14942: LD_VAR 0 4
14946: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
14947: LD_VAR 0 1
14951: PUSH
14952: LD_INT 200
14954: DOUBLE
14955: GREATEREQUAL
14956: IFFALSE 14964
14958: LD_INT 299
14960: DOUBLE
14961: LESSEQUAL
14962: IFTRUE 14966
14964: GO 14998
14966: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
14967: LD_VAR 0 1
14971: PPUSH
14972: LD_VAR 0 2
14976: PPUSH
14977: LD_VAR 0 3
14981: PPUSH
14982: LD_VAR 0 4
14986: PPUSH
14987: LD_VAR 0 5
14991: PPUSH
14992: CALL 74092 0 5
14996: GO 15075
14998: LD_INT 300
15000: DOUBLE
15001: GREATEREQUAL
15002: IFFALSE 15010
15004: LD_INT 399
15006: DOUBLE
15007: LESSEQUAL
15008: IFTRUE 15012
15010: GO 15074
15012: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
15013: LD_VAR 0 1
15017: PPUSH
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_VAR 0 3
15027: PPUSH
15028: LD_VAR 0 4
15032: PPUSH
15033: LD_VAR 0 5
15037: PPUSH
15038: LD_VAR 0 6
15042: PPUSH
15043: LD_VAR 0 7
15047: PPUSH
15048: LD_VAR 0 8
15052: PPUSH
15053: LD_VAR 0 9
15057: PPUSH
15058: LD_VAR 0 10
15062: PPUSH
15063: LD_VAR 0 11
15067: PPUSH
15068: CALL 70405 0 11
15072: GO 15075
15074: POP
// end ;
15075: PPOPN 11
15077: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
15078: LD_VAR 0 1
15082: PPUSH
15083: LD_VAR 0 2
15087: PPUSH
15088: LD_VAR 0 3
15092: PPUSH
15093: LD_VAR 0 4
15097: PPUSH
15098: LD_VAR 0 5
15102: PPUSH
15103: CALL 73816 0 5
// end ; end_of_file
15107: PPOPN 5
15109: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// if exist_mode then
15114: LD_VAR 0 2
15118: IFFALSE 15143
// unit := CreateCharacter ( prefix & ident ) else
15120: LD_ADDR_VAR 0 5
15124: PUSH
15125: LD_VAR 0 3
15129: PUSH
15130: LD_VAR 0 1
15134: STR
15135: PPUSH
15136: CALL_OW 34
15140: ST_TO_ADDR
15141: GO 15158
// unit := NewCharacter ( ident ) ;
15143: LD_ADDR_VAR 0 5
15147: PUSH
15148: LD_VAR 0 1
15152: PPUSH
15153: CALL_OW 25
15157: ST_TO_ADDR
// result := unit ;
15158: LD_ADDR_VAR 0 4
15162: PUSH
15163: LD_VAR 0 5
15167: ST_TO_ADDR
// end ;
15168: LD_VAR 0 4
15172: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
15173: LD_INT 0
15175: PPUSH
15176: PPUSH
// if not side or not nation then
15177: LD_VAR 0 1
15181: NOT
15182: PUSH
15183: LD_VAR 0 2
15187: NOT
15188: OR
15189: IFFALSE 15193
// exit ;
15191: GO 15961
// case nation of nation_american :
15193: LD_VAR 0 2
15197: PUSH
15198: LD_INT 1
15200: DOUBLE
15201: EQUAL
15202: IFTRUE 15206
15204: GO 15420
15206: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
15207: LD_ADDR_VAR 0 4
15211: PUSH
15212: LD_INT 35
15214: PUSH
15215: LD_INT 45
15217: PUSH
15218: LD_INT 46
15220: PUSH
15221: LD_INT 47
15223: PUSH
15224: LD_INT 82
15226: PUSH
15227: LD_INT 83
15229: PUSH
15230: LD_INT 84
15232: PUSH
15233: LD_INT 85
15235: PUSH
15236: LD_INT 86
15238: PUSH
15239: LD_INT 1
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 6
15247: PUSH
15248: LD_INT 15
15250: PUSH
15251: LD_INT 16
15253: PUSH
15254: LD_INT 7
15256: PUSH
15257: LD_INT 12
15259: PUSH
15260: LD_INT 13
15262: PUSH
15263: LD_INT 10
15265: PUSH
15266: LD_INT 14
15268: PUSH
15269: LD_INT 20
15271: PUSH
15272: LD_INT 21
15274: PUSH
15275: LD_INT 22
15277: PUSH
15278: LD_INT 25
15280: PUSH
15281: LD_INT 32
15283: PUSH
15284: LD_INT 27
15286: PUSH
15287: LD_INT 36
15289: PUSH
15290: LD_INT 69
15292: PUSH
15293: LD_INT 39
15295: PUSH
15296: LD_INT 34
15298: PUSH
15299: LD_INT 40
15301: PUSH
15302: LD_INT 48
15304: PUSH
15305: LD_INT 49
15307: PUSH
15308: LD_INT 50
15310: PUSH
15311: LD_INT 51
15313: PUSH
15314: LD_INT 52
15316: PUSH
15317: LD_INT 53
15319: PUSH
15320: LD_INT 54
15322: PUSH
15323: LD_INT 55
15325: PUSH
15326: LD_INT 56
15328: PUSH
15329: LD_INT 57
15331: PUSH
15332: LD_INT 58
15334: PUSH
15335: LD_INT 59
15337: PUSH
15338: LD_INT 60
15340: PUSH
15341: LD_INT 61
15343: PUSH
15344: LD_INT 62
15346: PUSH
15347: LD_INT 80
15349: PUSH
15350: LD_INT 82
15352: PUSH
15353: LD_INT 83
15355: PUSH
15356: LD_INT 84
15358: PUSH
15359: LD_INT 85
15361: PUSH
15362: LD_INT 86
15364: PUSH
15365: EMPTY
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: ST_TO_ADDR
15418: GO 15885
15420: LD_INT 2
15422: DOUBLE
15423: EQUAL
15424: IFTRUE 15428
15426: GO 15654
15428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
15429: LD_ADDR_VAR 0 4
15433: PUSH
15434: LD_INT 35
15436: PUSH
15437: LD_INT 45
15439: PUSH
15440: LD_INT 46
15442: PUSH
15443: LD_INT 47
15445: PUSH
15446: LD_INT 82
15448: PUSH
15449: LD_INT 83
15451: PUSH
15452: LD_INT 84
15454: PUSH
15455: LD_INT 85
15457: PUSH
15458: LD_INT 87
15460: PUSH
15461: LD_INT 70
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: LD_INT 11
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: LD_INT 4
15475: PUSH
15476: LD_INT 5
15478: PUSH
15479: LD_INT 6
15481: PUSH
15482: LD_INT 15
15484: PUSH
15485: LD_INT 18
15487: PUSH
15488: LD_INT 7
15490: PUSH
15491: LD_INT 17
15493: PUSH
15494: LD_INT 8
15496: PUSH
15497: LD_INT 20
15499: PUSH
15500: LD_INT 21
15502: PUSH
15503: LD_INT 22
15505: PUSH
15506: LD_INT 72
15508: PUSH
15509: LD_INT 26
15511: PUSH
15512: LD_INT 69
15514: PUSH
15515: LD_INT 39
15517: PUSH
15518: LD_INT 40
15520: PUSH
15521: LD_INT 41
15523: PUSH
15524: LD_INT 42
15526: PUSH
15527: LD_INT 43
15529: PUSH
15530: LD_INT 48
15532: PUSH
15533: LD_INT 49
15535: PUSH
15536: LD_INT 50
15538: PUSH
15539: LD_INT 51
15541: PUSH
15542: LD_INT 52
15544: PUSH
15545: LD_INT 53
15547: PUSH
15548: LD_INT 54
15550: PUSH
15551: LD_INT 55
15553: PUSH
15554: LD_INT 56
15556: PUSH
15557: LD_INT 60
15559: PUSH
15560: LD_INT 61
15562: PUSH
15563: LD_INT 62
15565: PUSH
15566: LD_INT 66
15568: PUSH
15569: LD_INT 67
15571: PUSH
15572: LD_INT 68
15574: PUSH
15575: LD_INT 81
15577: PUSH
15578: LD_INT 82
15580: PUSH
15581: LD_INT 83
15583: PUSH
15584: LD_INT 84
15586: PUSH
15587: LD_INT 85
15589: PUSH
15590: LD_INT 87
15592: PUSH
15593: LD_INT 88
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: ST_TO_ADDR
15652: GO 15885
15654: LD_INT 3
15656: DOUBLE
15657: EQUAL
15658: IFTRUE 15662
15660: GO 15884
15662: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
15663: LD_ADDR_VAR 0 4
15667: PUSH
15668: LD_INT 46
15670: PUSH
15671: LD_INT 47
15673: PUSH
15674: LD_INT 1
15676: PUSH
15677: LD_INT 2
15679: PUSH
15680: LD_INT 82
15682: PUSH
15683: LD_INT 83
15685: PUSH
15686: LD_INT 84
15688: PUSH
15689: LD_INT 85
15691: PUSH
15692: LD_INT 86
15694: PUSH
15695: LD_INT 11
15697: PUSH
15698: LD_INT 9
15700: PUSH
15701: LD_INT 20
15703: PUSH
15704: LD_INT 19
15706: PUSH
15707: LD_INT 21
15709: PUSH
15710: LD_INT 24
15712: PUSH
15713: LD_INT 22
15715: PUSH
15716: LD_INT 25
15718: PUSH
15719: LD_INT 28
15721: PUSH
15722: LD_INT 29
15724: PUSH
15725: LD_INT 30
15727: PUSH
15728: LD_INT 31
15730: PUSH
15731: LD_INT 37
15733: PUSH
15734: LD_INT 38
15736: PUSH
15737: LD_INT 32
15739: PUSH
15740: LD_INT 27
15742: PUSH
15743: LD_INT 33
15745: PUSH
15746: LD_INT 69
15748: PUSH
15749: LD_INT 39
15751: PUSH
15752: LD_INT 34
15754: PUSH
15755: LD_INT 40
15757: PUSH
15758: LD_INT 71
15760: PUSH
15761: LD_INT 23
15763: PUSH
15764: LD_INT 44
15766: PUSH
15767: LD_INT 48
15769: PUSH
15770: LD_INT 49
15772: PUSH
15773: LD_INT 50
15775: PUSH
15776: LD_INT 51
15778: PUSH
15779: LD_INT 52
15781: PUSH
15782: LD_INT 53
15784: PUSH
15785: LD_INT 54
15787: PUSH
15788: LD_INT 55
15790: PUSH
15791: LD_INT 56
15793: PUSH
15794: LD_INT 57
15796: PUSH
15797: LD_INT 58
15799: PUSH
15800: LD_INT 59
15802: PUSH
15803: LD_INT 63
15805: PUSH
15806: LD_INT 64
15808: PUSH
15809: LD_INT 65
15811: PUSH
15812: LD_INT 82
15814: PUSH
15815: LD_INT 83
15817: PUSH
15818: LD_INT 84
15820: PUSH
15821: LD_INT 85
15823: PUSH
15824: LD_INT 86
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: ST_TO_ADDR
15882: GO 15885
15884: POP
// if state > - 1 and state < 3 then
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 1
15892: NEG
15893: GREATER
15894: PUSH
15895: LD_VAR 0 3
15899: PUSH
15900: LD_INT 3
15902: LESS
15903: AND
15904: IFFALSE 15961
// for i in result do
15906: LD_ADDR_VAR 0 5
15910: PUSH
15911: LD_VAR 0 4
15915: PUSH
15916: FOR_IN
15917: IFFALSE 15959
// if GetTech ( i , side ) <> state then
15919: LD_VAR 0 5
15923: PPUSH
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL_OW 321
15933: PUSH
15934: LD_VAR 0 3
15938: NONEQUAL
15939: IFFALSE 15957
// result := result diff i ;
15941: LD_ADDR_VAR 0 4
15945: PUSH
15946: LD_VAR 0 4
15950: PUSH
15951: LD_VAR 0 5
15955: DIFF
15956: ST_TO_ADDR
15957: GO 15916
15959: POP
15960: POP
// end ;
15961: LD_VAR 0 4
15965: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
15966: LD_INT 0
15968: PPUSH
15969: PPUSH
15970: PPUSH
// result := true ;
15971: LD_ADDR_VAR 0 3
15975: PUSH
15976: LD_INT 1
15978: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
15979: LD_ADDR_VAR 0 5
15983: PUSH
15984: LD_VAR 0 2
15988: PPUSH
15989: CALL_OW 480
15993: ST_TO_ADDR
// if not tmp then
15994: LD_VAR 0 5
15998: NOT
15999: IFFALSE 16003
// exit ;
16001: GO 16052
// for i in tmp do
16003: LD_ADDR_VAR 0 4
16007: PUSH
16008: LD_VAR 0 5
16012: PUSH
16013: FOR_IN
16014: IFFALSE 16050
// if GetTech ( i , side ) <> state_researched then
16016: LD_VAR 0 4
16020: PPUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 321
16030: PUSH
16031: LD_INT 2
16033: NONEQUAL
16034: IFFALSE 16048
// begin result := false ;
16036: LD_ADDR_VAR 0 3
16040: PUSH
16041: LD_INT 0
16043: ST_TO_ADDR
// exit ;
16044: POP
16045: POP
16046: GO 16052
// end ;
16048: GO 16013
16050: POP
16051: POP
// end ;
16052: LD_VAR 0 3
16056: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
16057: LD_INT 0
16059: PPUSH
16060: PPUSH
16061: PPUSH
16062: PPUSH
16063: PPUSH
16064: PPUSH
16065: PPUSH
16066: PPUSH
16067: PPUSH
16068: PPUSH
16069: PPUSH
16070: PPUSH
16071: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
16072: LD_VAR 0 1
16076: NOT
16077: PUSH
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 257
16087: PUSH
16088: LD_INT 9
16090: NONEQUAL
16091: OR
16092: IFFALSE 16096
// exit ;
16094: GO 16669
// side := GetSide ( unit ) ;
16096: LD_ADDR_VAR 0 9
16100: PUSH
16101: LD_VAR 0 1
16105: PPUSH
16106: CALL_OW 255
16110: ST_TO_ADDR
// tech_space := tech_spacanom ;
16111: LD_ADDR_VAR 0 12
16115: PUSH
16116: LD_INT 29
16118: ST_TO_ADDR
// tech_time := tech_taurad ;
16119: LD_ADDR_VAR 0 13
16123: PUSH
16124: LD_INT 28
16126: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
16127: LD_ADDR_VAR 0 11
16131: PUSH
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 310
16141: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
16142: LD_VAR 0 11
16146: PPUSH
16147: CALL_OW 247
16151: PUSH
16152: LD_INT 2
16154: EQUAL
16155: IFFALSE 16159
// exit ;
16157: GO 16669
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16159: LD_ADDR_VAR 0 8
16163: PUSH
16164: LD_INT 81
16166: PUSH
16167: LD_VAR 0 9
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 3
16178: PUSH
16179: LD_INT 21
16181: PUSH
16182: LD_INT 3
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: ST_TO_ADDR
// if not tmp then
16202: LD_VAR 0 8
16206: NOT
16207: IFFALSE 16211
// exit ;
16209: GO 16669
// if in_unit then
16211: LD_VAR 0 11
16215: IFFALSE 16239
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
16217: LD_ADDR_VAR 0 10
16221: PUSH
16222: LD_VAR 0 8
16226: PPUSH
16227: LD_VAR 0 11
16231: PPUSH
16232: CALL_OW 74
16236: ST_TO_ADDR
16237: GO 16259
// enemy := NearestUnitToUnit ( tmp , unit ) ;
16239: LD_ADDR_VAR 0 10
16243: PUSH
16244: LD_VAR 0 8
16248: PPUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 74
16258: ST_TO_ADDR
// if not enemy then
16259: LD_VAR 0 10
16263: NOT
16264: IFFALSE 16268
// exit ;
16266: GO 16669
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
16268: LD_VAR 0 11
16272: PUSH
16273: LD_VAR 0 11
16277: PPUSH
16278: LD_VAR 0 10
16282: PPUSH
16283: CALL_OW 296
16287: PUSH
16288: LD_INT 13
16290: GREATER
16291: AND
16292: PUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: LD_VAR 0 10
16302: PPUSH
16303: CALL_OW 296
16307: PUSH
16308: LD_INT 12
16310: GREATER
16311: OR
16312: IFFALSE 16316
// exit ;
16314: GO 16669
// missile := [ 1 ] ;
16316: LD_ADDR_VAR 0 14
16320: PUSH
16321: LD_INT 1
16323: PUSH
16324: EMPTY
16325: LIST
16326: ST_TO_ADDR
// if Researched ( side , tech_space ) then
16327: LD_VAR 0 9
16331: PPUSH
16332: LD_VAR 0 12
16336: PPUSH
16337: CALL_OW 325
16341: IFFALSE 16370
// missile := Replace ( missile , missile + 1 , 2 ) ;
16343: LD_ADDR_VAR 0 14
16347: PUSH
16348: LD_VAR 0 14
16352: PPUSH
16353: LD_VAR 0 14
16357: PUSH
16358: LD_INT 1
16360: PLUS
16361: PPUSH
16362: LD_INT 2
16364: PPUSH
16365: CALL_OW 1
16369: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
16370: LD_VAR 0 9
16374: PPUSH
16375: LD_VAR 0 13
16379: PPUSH
16380: CALL_OW 325
16384: PUSH
16385: LD_VAR 0 10
16389: PPUSH
16390: CALL_OW 255
16394: PPUSH
16395: LD_VAR 0 13
16399: PPUSH
16400: CALL_OW 325
16404: NOT
16405: AND
16406: IFFALSE 16435
// missile := Replace ( missile , missile + 1 , 3 ) ;
16408: LD_ADDR_VAR 0 14
16412: PUSH
16413: LD_VAR 0 14
16417: PPUSH
16418: LD_VAR 0 14
16422: PUSH
16423: LD_INT 1
16425: PLUS
16426: PPUSH
16427: LD_INT 3
16429: PPUSH
16430: CALL_OW 1
16434: ST_TO_ADDR
// if missile < 2 then
16435: LD_VAR 0 14
16439: PUSH
16440: LD_INT 2
16442: LESS
16443: IFFALSE 16447
// exit ;
16445: GO 16669
// x := GetX ( enemy ) ;
16447: LD_ADDR_VAR 0 4
16451: PUSH
16452: LD_VAR 0 10
16456: PPUSH
16457: CALL_OW 250
16461: ST_TO_ADDR
// y := GetY ( enemy ) ;
16462: LD_ADDR_VAR 0 5
16466: PUSH
16467: LD_VAR 0 10
16471: PPUSH
16472: CALL_OW 251
16476: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
16477: LD_ADDR_VAR 0 6
16481: PUSH
16482: LD_VAR 0 4
16486: PUSH
16487: LD_INT 1
16489: NEG
16490: PPUSH
16491: LD_INT 1
16493: PPUSH
16494: CALL_OW 12
16498: PLUS
16499: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
16500: LD_ADDR_VAR 0 7
16504: PUSH
16505: LD_VAR 0 5
16509: PUSH
16510: LD_INT 1
16512: NEG
16513: PPUSH
16514: LD_INT 1
16516: PPUSH
16517: CALL_OW 12
16521: PLUS
16522: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16523: LD_VAR 0 6
16527: PPUSH
16528: LD_VAR 0 7
16532: PPUSH
16533: CALL_OW 488
16537: NOT
16538: IFFALSE 16560
// begin _x := x ;
16540: LD_ADDR_VAR 0 6
16544: PUSH
16545: LD_VAR 0 4
16549: ST_TO_ADDR
// _y := y ;
16550: LD_ADDR_VAR 0 7
16554: PUSH
16555: LD_VAR 0 5
16559: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
16560: LD_ADDR_VAR 0 3
16564: PUSH
16565: LD_INT 1
16567: PPUSH
16568: LD_VAR 0 14
16572: PPUSH
16573: CALL_OW 12
16577: ST_TO_ADDR
// case i of 1 :
16578: LD_VAR 0 3
16582: PUSH
16583: LD_INT 1
16585: DOUBLE
16586: EQUAL
16587: IFTRUE 16591
16589: GO 16608
16591: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
16592: LD_VAR 0 1
16596: PPUSH
16597: LD_VAR 0 10
16601: PPUSH
16602: CALL_OW 115
16606: GO 16669
16608: LD_INT 2
16610: DOUBLE
16611: EQUAL
16612: IFTRUE 16616
16614: GO 16638
16616: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
16617: LD_VAR 0 1
16621: PPUSH
16622: LD_VAR 0 6
16626: PPUSH
16627: LD_VAR 0 7
16631: PPUSH
16632: CALL_OW 153
16636: GO 16669
16638: LD_INT 3
16640: DOUBLE
16641: EQUAL
16642: IFTRUE 16646
16644: GO 16668
16646: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_VAR 0 6
16656: PPUSH
16657: LD_VAR 0 7
16661: PPUSH
16662: CALL_OW 154
16666: GO 16669
16668: POP
// end ;
16669: LD_VAR 0 2
16673: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
16674: LD_INT 0
16676: PPUSH
16677: PPUSH
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
// if not unit or not building then
16682: LD_VAR 0 1
16686: NOT
16687: PUSH
16688: LD_VAR 0 2
16692: NOT
16693: OR
16694: IFFALSE 16698
// exit ;
16696: GO 16856
// x := GetX ( building ) ;
16698: LD_ADDR_VAR 0 5
16702: PUSH
16703: LD_VAR 0 2
16707: PPUSH
16708: CALL_OW 250
16712: ST_TO_ADDR
// y := GetY ( building ) ;
16713: LD_ADDR_VAR 0 6
16717: PUSH
16718: LD_VAR 0 2
16722: PPUSH
16723: CALL_OW 251
16727: ST_TO_ADDR
// for i = 0 to 5 do
16728: LD_ADDR_VAR 0 4
16732: PUSH
16733: DOUBLE
16734: LD_INT 0
16736: DEC
16737: ST_TO_ADDR
16738: LD_INT 5
16740: PUSH
16741: FOR_TO
16742: IFFALSE 16854
// begin _x := ShiftX ( x , i , 3 ) ;
16744: LD_ADDR_VAR 0 7
16748: PUSH
16749: LD_VAR 0 5
16753: PPUSH
16754: LD_VAR 0 4
16758: PPUSH
16759: LD_INT 3
16761: PPUSH
16762: CALL_OW 272
16766: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
16767: LD_ADDR_VAR 0 8
16771: PUSH
16772: LD_VAR 0 6
16776: PPUSH
16777: LD_VAR 0 4
16781: PPUSH
16782: LD_INT 3
16784: PPUSH
16785: CALL_OW 273
16789: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
16790: LD_VAR 0 7
16794: PPUSH
16795: LD_VAR 0 8
16799: PPUSH
16800: CALL_OW 488
16804: NOT
16805: IFFALSE 16809
// continue ;
16807: GO 16741
// if HexInfo ( _x , _y ) = 0 then
16809: LD_VAR 0 7
16813: PPUSH
16814: LD_VAR 0 8
16818: PPUSH
16819: CALL_OW 428
16823: PUSH
16824: LD_INT 0
16826: EQUAL
16827: IFFALSE 16852
// begin ComMoveXY ( unit , _x , _y ) ;
16829: LD_VAR 0 1
16833: PPUSH
16834: LD_VAR 0 7
16838: PPUSH
16839: LD_VAR 0 8
16843: PPUSH
16844: CALL_OW 111
// exit ;
16848: POP
16849: POP
16850: GO 16856
// end ; end ;
16852: GO 16741
16854: POP
16855: POP
// end ;
16856: LD_VAR 0 3
16860: RET
// export function ScanBase ( side , base_area ) ; begin
16861: LD_INT 0
16863: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
16864: LD_ADDR_VAR 0 3
16868: PUSH
16869: LD_VAR 0 2
16873: PPUSH
16874: LD_INT 81
16876: PUSH
16877: LD_VAR 0 1
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PPUSH
16886: CALL_OW 70
16890: ST_TO_ADDR
// end ;
16891: LD_VAR 0 3
16895: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
16896: LD_INT 0
16898: PPUSH
16899: PPUSH
16900: PPUSH
16901: PPUSH
// result := false ;
16902: LD_ADDR_VAR 0 2
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// side := GetSide ( unit ) ;
16910: LD_ADDR_VAR 0 3
16914: PUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 255
16924: ST_TO_ADDR
// nat := GetNation ( unit ) ;
16925: LD_ADDR_VAR 0 4
16929: PUSH
16930: LD_VAR 0 1
16934: PPUSH
16935: CALL_OW 248
16939: ST_TO_ADDR
// case nat of 1 :
16940: LD_VAR 0 4
16944: PUSH
16945: LD_INT 1
16947: DOUBLE
16948: EQUAL
16949: IFTRUE 16953
16951: GO 16964
16953: POP
// tech := tech_lassight ; 2 :
16954: LD_ADDR_VAR 0 5
16958: PUSH
16959: LD_INT 12
16961: ST_TO_ADDR
16962: GO 17003
16964: LD_INT 2
16966: DOUBLE
16967: EQUAL
16968: IFTRUE 16972
16970: GO 16983
16972: POP
// tech := tech_mortar ; 3 :
16973: LD_ADDR_VAR 0 5
16977: PUSH
16978: LD_INT 41
16980: ST_TO_ADDR
16981: GO 17003
16983: LD_INT 3
16985: DOUBLE
16986: EQUAL
16987: IFTRUE 16991
16989: GO 17002
16991: POP
// tech := tech_bazooka ; end ;
16992: LD_ADDR_VAR 0 5
16996: PUSH
16997: LD_INT 44
16999: ST_TO_ADDR
17000: GO 17003
17002: POP
// if Researched ( side , tech ) then
17003: LD_VAR 0 3
17007: PPUSH
17008: LD_VAR 0 5
17012: PPUSH
17013: CALL_OW 325
17017: IFFALSE 17044
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
17019: LD_ADDR_VAR 0 2
17023: PUSH
17024: LD_INT 5
17026: PUSH
17027: LD_INT 8
17029: PUSH
17030: LD_INT 9
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: LD_VAR 0 4
17042: ARRAY
17043: ST_TO_ADDR
// end ;
17044: LD_VAR 0 2
17048: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
17049: LD_INT 0
17051: PPUSH
17052: PPUSH
17053: PPUSH
// if not mines then
17054: LD_VAR 0 2
17058: NOT
17059: IFFALSE 17063
// exit ;
17061: GO 17207
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17063: LD_ADDR_VAR 0 5
17067: PUSH
17068: LD_INT 81
17070: PUSH
17071: LD_VAR 0 1
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 3
17082: PUSH
17083: LD_INT 21
17085: PUSH
17086: LD_INT 3
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: PPUSH
17101: CALL_OW 69
17105: ST_TO_ADDR
// for i in mines do
17106: LD_ADDR_VAR 0 4
17110: PUSH
17111: LD_VAR 0 2
17115: PUSH
17116: FOR_IN
17117: IFFALSE 17205
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
17119: LD_VAR 0 4
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: LD_VAR 0 4
17132: PUSH
17133: LD_INT 2
17135: ARRAY
17136: PPUSH
17137: CALL_OW 458
17141: NOT
17142: IFFALSE 17146
// continue ;
17144: GO 17116
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
17146: LD_VAR 0 4
17150: PUSH
17151: LD_INT 1
17153: ARRAY
17154: PPUSH
17155: LD_VAR 0 4
17159: PUSH
17160: LD_INT 2
17162: ARRAY
17163: PPUSH
17164: CALL_OW 428
17168: PUSH
17169: LD_VAR 0 5
17173: IN
17174: IFFALSE 17203
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
17176: LD_VAR 0 4
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: PPUSH
17185: LD_VAR 0 4
17189: PUSH
17190: LD_INT 2
17192: ARRAY
17193: PPUSH
17194: LD_VAR 0 1
17198: PPUSH
17199: CALL_OW 456
// end ;
17203: GO 17116
17205: POP
17206: POP
// end ;
17207: LD_VAR 0 3
17211: RET
// export function Count ( array ) ; begin
17212: LD_INT 0
17214: PPUSH
// result := array + 0 ;
17215: LD_ADDR_VAR 0 2
17219: PUSH
17220: LD_VAR 0 1
17224: PUSH
17225: LD_INT 0
17227: PLUS
17228: ST_TO_ADDR
// end ;
17229: LD_VAR 0 2
17233: RET
// export function IsEmpty ( building ) ; begin
17234: LD_INT 0
17236: PPUSH
// if not building then
17237: LD_VAR 0 1
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17289
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
17246: LD_ADDR_VAR 0 2
17250: PUSH
17251: LD_VAR 0 1
17255: PUSH
17256: LD_INT 22
17258: PUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 255
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PUSH
17273: LD_INT 58
17275: PUSH
17276: EMPTY
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PPUSH
17283: CALL_OW 69
17287: IN
17288: ST_TO_ADDR
// end ;
17289: LD_VAR 0 2
17293: RET
// export function IsNotFull ( building ) ; var places ; begin
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
// if not building then
17298: LD_VAR 0 1
17302: NOT
17303: IFFALSE 17307
// exit ;
17305: GO 17335
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
17307: LD_ADDR_VAR 0 2
17311: PUSH
17312: LD_VAR 0 1
17316: PPUSH
17317: LD_INT 3
17319: PUSH
17320: LD_INT 62
17322: PUSH
17323: EMPTY
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 72
17334: ST_TO_ADDR
// end ;
17335: LD_VAR 0 2
17339: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
17340: LD_INT 0
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
// tmp := [ ] ;
17346: LD_ADDR_VAR 0 3
17350: PUSH
17351: EMPTY
17352: ST_TO_ADDR
// list := [ ] ;
17353: LD_ADDR_VAR 0 5
17357: PUSH
17358: EMPTY
17359: ST_TO_ADDR
// for i = 16 to 25 do
17360: LD_ADDR_VAR 0 4
17364: PUSH
17365: DOUBLE
17366: LD_INT 16
17368: DEC
17369: ST_TO_ADDR
17370: LD_INT 25
17372: PUSH
17373: FOR_TO
17374: IFFALSE 17447
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
17376: LD_ADDR_VAR 0 3
17380: PUSH
17381: LD_VAR 0 3
17385: PUSH
17386: LD_INT 22
17388: PUSH
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 255
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 91
17405: PUSH
17406: LD_VAR 0 1
17410: PUSH
17411: LD_INT 6
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 30
17421: PUSH
17422: LD_VAR 0 4
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: PPUSH
17439: CALL_OW 69
17443: ADD
17444: ST_TO_ADDR
17445: GO 17373
17447: POP
17448: POP
// for i = 1 to tmp do
17449: LD_ADDR_VAR 0 4
17453: PUSH
17454: DOUBLE
17455: LD_INT 1
17457: DEC
17458: ST_TO_ADDR
17459: LD_VAR 0 3
17463: PUSH
17464: FOR_TO
17465: IFFALSE 17553
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
17467: LD_ADDR_VAR 0 5
17471: PUSH
17472: LD_VAR 0 5
17476: PUSH
17477: LD_VAR 0 3
17481: PUSH
17482: LD_VAR 0 4
17486: ARRAY
17487: PPUSH
17488: CALL_OW 266
17492: PUSH
17493: LD_VAR 0 3
17497: PUSH
17498: LD_VAR 0 4
17502: ARRAY
17503: PPUSH
17504: CALL_OW 250
17508: PUSH
17509: LD_VAR 0 3
17513: PUSH
17514: LD_VAR 0 4
17518: ARRAY
17519: PPUSH
17520: CALL_OW 251
17524: PUSH
17525: LD_VAR 0 3
17529: PUSH
17530: LD_VAR 0 4
17534: ARRAY
17535: PPUSH
17536: CALL_OW 254
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: PUSH
17547: EMPTY
17548: LIST
17549: ADD
17550: ST_TO_ADDR
17551: GO 17464
17553: POP
17554: POP
// result := list ;
17555: LD_ADDR_VAR 0 2
17559: PUSH
17560: LD_VAR 0 5
17564: ST_TO_ADDR
// end ;
17565: LD_VAR 0 2
17569: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
17570: LD_INT 0
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
// if not factory then
17579: LD_VAR 0 1
17583: NOT
17584: IFFALSE 17588
// exit ;
17586: GO 18181
// if control = control_apeman then
17588: LD_VAR 0 4
17592: PUSH
17593: LD_INT 5
17595: EQUAL
17596: IFFALSE 17705
// begin tmp := UnitsInside ( factory ) ;
17598: LD_ADDR_VAR 0 8
17602: PUSH
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 313
17612: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
17613: LD_VAR 0 8
17617: PPUSH
17618: LD_INT 25
17620: PUSH
17621: LD_INT 12
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PPUSH
17628: CALL_OW 72
17632: NOT
17633: IFFALSE 17643
// control := control_manual ;
17635: LD_ADDR_VAR 0 4
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
17643: LD_ADDR_VAR 0 8
17647: PUSH
17648: LD_VAR 0 1
17652: PPUSH
17653: CALL 17340 0 1
17657: ST_TO_ADDR
// if tmp then
17658: LD_VAR 0 8
17662: IFFALSE 17705
// begin for i in tmp do
17664: LD_ADDR_VAR 0 7
17668: PUSH
17669: LD_VAR 0 8
17673: PUSH
17674: FOR_IN
17675: IFFALSE 17703
// if i [ 1 ] = b_ext_radio then
17677: LD_VAR 0 7
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PUSH
17686: LD_INT 22
17688: EQUAL
17689: IFFALSE 17701
// begin control := control_remote ;
17691: LD_ADDR_VAR 0 4
17695: PUSH
17696: LD_INT 2
17698: ST_TO_ADDR
// break ;
17699: GO 17703
// end ;
17701: GO 17674
17703: POP
17704: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
17705: LD_VAR 0 1
17709: PPUSH
17710: LD_VAR 0 2
17714: PPUSH
17715: LD_VAR 0 3
17719: PPUSH
17720: LD_VAR 0 4
17724: PPUSH
17725: LD_VAR 0 5
17729: PPUSH
17730: CALL_OW 448
17734: IFFALSE 17769
// begin result := [ chassis , engine , control , weapon ] ;
17736: LD_ADDR_VAR 0 6
17740: PUSH
17741: LD_VAR 0 2
17745: PUSH
17746: LD_VAR 0 3
17750: PUSH
17751: LD_VAR 0 4
17755: PUSH
17756: LD_VAR 0 5
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: ST_TO_ADDR
// exit ;
17767: GO 18181
// end ; _chassis := AvailableChassisList ( factory ) ;
17769: LD_ADDR_VAR 0 9
17773: PUSH
17774: LD_VAR 0 1
17778: PPUSH
17779: CALL_OW 475
17783: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
17784: LD_ADDR_VAR 0 11
17788: PUSH
17789: LD_VAR 0 1
17793: PPUSH
17794: CALL_OW 476
17798: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
17799: LD_ADDR_VAR 0 12
17803: PUSH
17804: LD_VAR 0 1
17808: PPUSH
17809: CALL_OW 477
17813: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
17814: LD_ADDR_VAR 0 10
17818: PUSH
17819: LD_VAR 0 1
17823: PPUSH
17824: CALL_OW 478
17828: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
17829: LD_VAR 0 9
17833: NOT
17834: PUSH
17835: LD_VAR 0 11
17839: NOT
17840: OR
17841: PUSH
17842: LD_VAR 0 12
17846: NOT
17847: OR
17848: PUSH
17849: LD_VAR 0 10
17853: NOT
17854: OR
17855: IFFALSE 17890
// begin result := [ chassis , engine , control , weapon ] ;
17857: LD_ADDR_VAR 0 6
17861: PUSH
17862: LD_VAR 0 2
17866: PUSH
17867: LD_VAR 0 3
17871: PUSH
17872: LD_VAR 0 4
17876: PUSH
17877: LD_VAR 0 5
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: ST_TO_ADDR
// exit ;
17888: GO 18181
// end ; if not chassis in _chassis then
17890: LD_VAR 0 2
17894: PUSH
17895: LD_VAR 0 9
17899: IN
17900: NOT
17901: IFFALSE 17927
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
17903: LD_ADDR_VAR 0 2
17907: PUSH
17908: LD_VAR 0 9
17912: PUSH
17913: LD_INT 1
17915: PPUSH
17916: LD_VAR 0 9
17920: PPUSH
17921: CALL_OW 12
17925: ARRAY
17926: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
17927: LD_VAR 0 2
17931: PPUSH
17932: LD_VAR 0 3
17936: PPUSH
17937: CALL 18186 0 2
17941: NOT
17942: IFFALSE 18001
// repeat engine := _engine [ 1 ] ;
17944: LD_ADDR_VAR 0 3
17948: PUSH
17949: LD_VAR 0 11
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
17958: LD_ADDR_VAR 0 11
17962: PUSH
17963: LD_VAR 0 11
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: CALL_OW 3
17975: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
17976: LD_VAR 0 2
17980: PPUSH
17981: LD_VAR 0 3
17985: PPUSH
17986: CALL 18186 0 2
17990: PUSH
17991: LD_VAR 0 11
17995: PUSH
17996: EMPTY
17997: EQUAL
17998: OR
17999: IFFALSE 17944
// if not control in _control then
18001: LD_VAR 0 4
18005: PUSH
18006: LD_VAR 0 12
18010: IN
18011: NOT
18012: IFFALSE 18038
// control := _control [ rand ( 1 , _control ) ] ;
18014: LD_ADDR_VAR 0 4
18018: PUSH
18019: LD_VAR 0 12
18023: PUSH
18024: LD_INT 1
18026: PPUSH
18027: LD_VAR 0 12
18031: PPUSH
18032: CALL_OW 12
18036: ARRAY
18037: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
18038: LD_VAR 0 2
18042: PPUSH
18043: LD_VAR 0 5
18047: PPUSH
18048: CALL 18406 0 2
18052: NOT
18053: IFFALSE 18112
// repeat weapon := _weapon [ 1 ] ;
18055: LD_ADDR_VAR 0 5
18059: PUSH
18060: LD_VAR 0 10
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
18069: LD_ADDR_VAR 0 10
18073: PUSH
18074: LD_VAR 0 10
18078: PPUSH
18079: LD_INT 1
18081: PPUSH
18082: CALL_OW 3
18086: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
18087: LD_VAR 0 2
18091: PPUSH
18092: LD_VAR 0 5
18096: PPUSH
18097: CALL 18406 0 2
18101: PUSH
18102: LD_VAR 0 10
18106: PUSH
18107: EMPTY
18108: EQUAL
18109: OR
18110: IFFALSE 18055
// result := [ ] ;
18112: LD_ADDR_VAR 0 6
18116: PUSH
18117: EMPTY
18118: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18119: LD_VAR 0 1
18123: PPUSH
18124: LD_VAR 0 2
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: LD_VAR 0 4
18138: PPUSH
18139: LD_VAR 0 5
18143: PPUSH
18144: CALL_OW 448
18148: IFFALSE 18181
// result := [ chassis , engine , control , weapon ] ;
18150: LD_ADDR_VAR 0 6
18154: PUSH
18155: LD_VAR 0 2
18159: PUSH
18160: LD_VAR 0 3
18164: PUSH
18165: LD_VAR 0 4
18169: PUSH
18170: LD_VAR 0 5
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: ST_TO_ADDR
// end ;
18181: LD_VAR 0 6
18185: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
18186: LD_INT 0
18188: PPUSH
// if not chassis or not engine then
18189: LD_VAR 0 1
18193: NOT
18194: PUSH
18195: LD_VAR 0 2
18199: NOT
18200: OR
18201: IFFALSE 18205
// exit ;
18203: GO 18401
// case engine of engine_solar :
18205: LD_VAR 0 2
18209: PUSH
18210: LD_INT 2
18212: DOUBLE
18213: EQUAL
18214: IFTRUE 18218
18216: GO 18256
18218: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_INT 11
18226: PUSH
18227: LD_INT 12
18229: PUSH
18230: LD_INT 13
18232: PUSH
18233: LD_INT 14
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: LD_INT 2
18241: PUSH
18242: LD_INT 3
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: ST_TO_ADDR
18254: GO 18385
18256: LD_INT 1
18258: DOUBLE
18259: EQUAL
18260: IFTRUE 18264
18262: GO 18326
18264: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
18265: LD_ADDR_VAR 0 3
18269: PUSH
18270: LD_INT 11
18272: PUSH
18273: LD_INT 12
18275: PUSH
18276: LD_INT 13
18278: PUSH
18279: LD_INT 14
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 3
18290: PUSH
18291: LD_INT 4
18293: PUSH
18294: LD_INT 5
18296: PUSH
18297: LD_INT 21
18299: PUSH
18300: LD_INT 23
18302: PUSH
18303: LD_INT 22
18305: PUSH
18306: LD_INT 24
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: LIST
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: ST_TO_ADDR
18324: GO 18385
18326: LD_INT 3
18328: DOUBLE
18329: EQUAL
18330: IFTRUE 18334
18332: GO 18384
18334: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
18335: LD_ADDR_VAR 0 3
18339: PUSH
18340: LD_INT 13
18342: PUSH
18343: LD_INT 14
18345: PUSH
18346: LD_INT 2
18348: PUSH
18349: LD_INT 3
18351: PUSH
18352: LD_INT 4
18354: PUSH
18355: LD_INT 5
18357: PUSH
18358: LD_INT 21
18360: PUSH
18361: LD_INT 22
18363: PUSH
18364: LD_INT 23
18366: PUSH
18367: LD_INT 24
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: ST_TO_ADDR
18382: GO 18385
18384: POP
// result := ( chassis in result ) ;
18385: LD_ADDR_VAR 0 3
18389: PUSH
18390: LD_VAR 0 1
18394: PUSH
18395: LD_VAR 0 3
18399: IN
18400: ST_TO_ADDR
// end ;
18401: LD_VAR 0 3
18405: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
18406: LD_INT 0
18408: PPUSH
// if not chassis or not weapon then
18409: LD_VAR 0 1
18413: NOT
18414: PUSH
18415: LD_VAR 0 2
18419: NOT
18420: OR
18421: IFFALSE 18425
// exit ;
18423: GO 19485
// case weapon of us_machine_gun :
18425: LD_VAR 0 2
18429: PUSH
18430: LD_INT 2
18432: DOUBLE
18433: EQUAL
18434: IFTRUE 18438
18436: GO 18468
18438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
18439: LD_ADDR_VAR 0 3
18443: PUSH
18444: LD_INT 1
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: LD_INT 3
18452: PUSH
18453: LD_INT 4
18455: PUSH
18456: LD_INT 5
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: ST_TO_ADDR
18466: GO 19469
18468: LD_INT 3
18470: DOUBLE
18471: EQUAL
18472: IFTRUE 18476
18474: GO 18506
18476: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
18477: LD_ADDR_VAR 0 3
18481: PUSH
18482: LD_INT 1
18484: PUSH
18485: LD_INT 2
18487: PUSH
18488: LD_INT 3
18490: PUSH
18491: LD_INT 4
18493: PUSH
18494: LD_INT 5
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: ST_TO_ADDR
18504: GO 19469
18506: LD_INT 11
18508: DOUBLE
18509: EQUAL
18510: IFTRUE 18514
18512: GO 18544
18514: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
18515: LD_ADDR_VAR 0 3
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: LD_INT 3
18528: PUSH
18529: LD_INT 4
18531: PUSH
18532: LD_INT 5
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: ST_TO_ADDR
18542: GO 19469
18544: LD_INT 4
18546: DOUBLE
18547: EQUAL
18548: IFTRUE 18552
18550: GO 18578
18552: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
18553: LD_ADDR_VAR 0 3
18557: PUSH
18558: LD_INT 2
18560: PUSH
18561: LD_INT 3
18563: PUSH
18564: LD_INT 4
18566: PUSH
18567: LD_INT 5
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: ST_TO_ADDR
18576: GO 19469
18578: LD_INT 5
18580: DOUBLE
18581: EQUAL
18582: IFTRUE 18586
18584: GO 18612
18586: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
18587: LD_ADDR_VAR 0 3
18591: PUSH
18592: LD_INT 2
18594: PUSH
18595: LD_INT 3
18597: PUSH
18598: LD_INT 4
18600: PUSH
18601: LD_INT 5
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: ST_TO_ADDR
18610: GO 19469
18612: LD_INT 9
18614: DOUBLE
18615: EQUAL
18616: IFTRUE 18620
18618: GO 18646
18620: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
18621: LD_ADDR_VAR 0 3
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: LD_INT 3
18631: PUSH
18632: LD_INT 4
18634: PUSH
18635: LD_INT 5
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: ST_TO_ADDR
18644: GO 19469
18646: LD_INT 7
18648: DOUBLE
18649: EQUAL
18650: IFTRUE 18654
18652: GO 18680
18654: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
18655: LD_ADDR_VAR 0 3
18659: PUSH
18660: LD_INT 2
18662: PUSH
18663: LD_INT 3
18665: PUSH
18666: LD_INT 4
18668: PUSH
18669: LD_INT 5
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: ST_TO_ADDR
18678: GO 19469
18680: LD_INT 12
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18714
18688: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
18689: LD_ADDR_VAR 0 3
18693: PUSH
18694: LD_INT 2
18696: PUSH
18697: LD_INT 3
18699: PUSH
18700: LD_INT 4
18702: PUSH
18703: LD_INT 5
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: ST_TO_ADDR
18712: GO 19469
18714: LD_INT 13
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18748
18722: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
18723: LD_ADDR_VAR 0 3
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: LD_INT 3
18733: PUSH
18734: LD_INT 4
18736: PUSH
18737: LD_INT 5
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: ST_TO_ADDR
18746: GO 19469
18748: LD_INT 14
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18774
18756: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
18757: LD_ADDR_VAR 0 3
18761: PUSH
18762: LD_INT 4
18764: PUSH
18765: LD_INT 5
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: ST_TO_ADDR
18772: GO 19469
18774: LD_INT 6
18776: DOUBLE
18777: EQUAL
18778: IFTRUE 18782
18780: GO 18800
18782: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
18783: LD_ADDR_VAR 0 3
18787: PUSH
18788: LD_INT 4
18790: PUSH
18791: LD_INT 5
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: ST_TO_ADDR
18798: GO 19469
18800: LD_INT 10
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18826
18808: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
18809: LD_ADDR_VAR 0 3
18813: PUSH
18814: LD_INT 4
18816: PUSH
18817: LD_INT 5
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: ST_TO_ADDR
18824: GO 19469
18826: LD_INT 22
18828: DOUBLE
18829: EQUAL
18830: IFTRUE 18834
18832: GO 18860
18834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
18835: LD_ADDR_VAR 0 3
18839: PUSH
18840: LD_INT 11
18842: PUSH
18843: LD_INT 12
18845: PUSH
18846: LD_INT 13
18848: PUSH
18849: LD_INT 14
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: ST_TO_ADDR
18858: GO 19469
18860: LD_INT 23
18862: DOUBLE
18863: EQUAL
18864: IFTRUE 18868
18866: GO 18894
18868: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
18869: LD_ADDR_VAR 0 3
18873: PUSH
18874: LD_INT 11
18876: PUSH
18877: LD_INT 12
18879: PUSH
18880: LD_INT 13
18882: PUSH
18883: LD_INT 14
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: ST_TO_ADDR
18892: GO 19469
18894: LD_INT 24
18896: DOUBLE
18897: EQUAL
18898: IFTRUE 18902
18900: GO 18928
18902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
18903: LD_ADDR_VAR 0 3
18907: PUSH
18908: LD_INT 11
18910: PUSH
18911: LD_INT 12
18913: PUSH
18914: LD_INT 13
18916: PUSH
18917: LD_INT 14
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: ST_TO_ADDR
18926: GO 19469
18928: LD_INT 30
18930: DOUBLE
18931: EQUAL
18932: IFTRUE 18936
18934: GO 18962
18936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 11
18944: PUSH
18945: LD_INT 12
18947: PUSH
18948: LD_INT 13
18950: PUSH
18951: LD_INT 14
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: ST_TO_ADDR
18960: GO 19469
18962: LD_INT 25
18964: DOUBLE
18965: EQUAL
18966: IFTRUE 18970
18968: GO 18988
18970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
18971: LD_ADDR_VAR 0 3
18975: PUSH
18976: LD_INT 13
18978: PUSH
18979: LD_INT 14
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: ST_TO_ADDR
18986: GO 19469
18988: LD_INT 27
18990: DOUBLE
18991: EQUAL
18992: IFTRUE 18996
18994: GO 19014
18996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
18997: LD_ADDR_VAR 0 3
19001: PUSH
19002: LD_INT 13
19004: PUSH
19005: LD_INT 14
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: ST_TO_ADDR
19012: GO 19469
19014: LD_INT 92
19016: DOUBLE
19017: EQUAL
19018: IFTRUE 19022
19020: GO 19048
19022: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
19023: LD_ADDR_VAR 0 3
19027: PUSH
19028: LD_INT 11
19030: PUSH
19031: LD_INT 12
19033: PUSH
19034: LD_INT 13
19036: PUSH
19037: LD_INT 14
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: ST_TO_ADDR
19046: GO 19469
19048: LD_INT 28
19050: DOUBLE
19051: EQUAL
19052: IFTRUE 19056
19054: GO 19074
19056: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
19057: LD_ADDR_VAR 0 3
19061: PUSH
19062: LD_INT 13
19064: PUSH
19065: LD_INT 14
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: ST_TO_ADDR
19072: GO 19469
19074: LD_INT 29
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19100
19082: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_INT 13
19090: PUSH
19091: LD_INT 14
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: ST_TO_ADDR
19098: GO 19469
19100: LD_INT 31
19102: DOUBLE
19103: EQUAL
19104: IFTRUE 19108
19106: GO 19126
19108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
19109: LD_ADDR_VAR 0 3
19113: PUSH
19114: LD_INT 13
19116: PUSH
19117: LD_INT 14
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: ST_TO_ADDR
19124: GO 19469
19126: LD_INT 26
19128: DOUBLE
19129: EQUAL
19130: IFTRUE 19134
19132: GO 19152
19134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
19135: LD_ADDR_VAR 0 3
19139: PUSH
19140: LD_INT 13
19142: PUSH
19143: LD_INT 14
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: ST_TO_ADDR
19150: GO 19469
19152: LD_INT 42
19154: DOUBLE
19155: EQUAL
19156: IFTRUE 19160
19158: GO 19186
19160: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
19161: LD_ADDR_VAR 0 3
19165: PUSH
19166: LD_INT 21
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: LD_INT 23
19174: PUSH
19175: LD_INT 24
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: ST_TO_ADDR
19184: GO 19469
19186: LD_INT 43
19188: DOUBLE
19189: EQUAL
19190: IFTRUE 19194
19192: GO 19220
19194: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
19195: LD_ADDR_VAR 0 3
19199: PUSH
19200: LD_INT 21
19202: PUSH
19203: LD_INT 22
19205: PUSH
19206: LD_INT 23
19208: PUSH
19209: LD_INT 24
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: ST_TO_ADDR
19218: GO 19469
19220: LD_INT 44
19222: DOUBLE
19223: EQUAL
19224: IFTRUE 19228
19226: GO 19254
19228: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
19229: LD_ADDR_VAR 0 3
19233: PUSH
19234: LD_INT 21
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_INT 23
19242: PUSH
19243: LD_INT 24
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: ST_TO_ADDR
19252: GO 19469
19254: LD_INT 45
19256: DOUBLE
19257: EQUAL
19258: IFTRUE 19262
19260: GO 19288
19262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
19263: LD_ADDR_VAR 0 3
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 22
19273: PUSH
19274: LD_INT 23
19276: PUSH
19277: LD_INT 24
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 19469
19288: LD_INT 49
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19322
19296: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: LD_INT 21
19304: PUSH
19305: LD_INT 22
19307: PUSH
19308: LD_INT 23
19310: PUSH
19311: LD_INT 24
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: ST_TO_ADDR
19320: GO 19469
19322: LD_INT 51
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19356
19330: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
19331: LD_ADDR_VAR 0 3
19335: PUSH
19336: LD_INT 21
19338: PUSH
19339: LD_INT 22
19341: PUSH
19342: LD_INT 23
19344: PUSH
19345: LD_INT 24
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
19354: GO 19469
19356: LD_INT 52
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19364
19362: GO 19390
19364: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
19365: LD_ADDR_VAR 0 3
19369: PUSH
19370: LD_INT 21
19372: PUSH
19373: LD_INT 22
19375: PUSH
19376: LD_INT 23
19378: PUSH
19379: LD_INT 24
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: ST_TO_ADDR
19388: GO 19469
19390: LD_INT 53
19392: DOUBLE
19393: EQUAL
19394: IFTRUE 19398
19396: GO 19416
19398: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
19399: LD_ADDR_VAR 0 3
19403: PUSH
19404: LD_INT 23
19406: PUSH
19407: LD_INT 24
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: ST_TO_ADDR
19414: GO 19469
19416: LD_INT 46
19418: DOUBLE
19419: EQUAL
19420: IFTRUE 19424
19422: GO 19442
19424: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
19425: LD_ADDR_VAR 0 3
19429: PUSH
19430: LD_INT 23
19432: PUSH
19433: LD_INT 24
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: ST_TO_ADDR
19440: GO 19469
19442: LD_INT 47
19444: DOUBLE
19445: EQUAL
19446: IFTRUE 19450
19448: GO 19468
19450: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19451: LD_ADDR_VAR 0 3
19455: PUSH
19456: LD_INT 23
19458: PUSH
19459: LD_INT 24
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: ST_TO_ADDR
19466: GO 19469
19468: POP
// result := ( chassis in result ) ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: LD_VAR 0 1
19478: PUSH
19479: LD_VAR 0 3
19483: IN
19484: ST_TO_ADDR
// end ;
19485: LD_VAR 0 3
19489: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
19490: LD_INT 0
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
19498: PPUSH
// result := array ;
19499: LD_ADDR_VAR 0 5
19503: PUSH
19504: LD_VAR 0 1
19508: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
19509: LD_VAR 0 1
19513: NOT
19514: PUSH
19515: LD_VAR 0 2
19519: NOT
19520: OR
19521: PUSH
19522: LD_VAR 0 3
19526: NOT
19527: OR
19528: PUSH
19529: LD_VAR 0 2
19533: PUSH
19534: LD_VAR 0 1
19538: GREATER
19539: OR
19540: PUSH
19541: LD_VAR 0 3
19545: PUSH
19546: LD_VAR 0 1
19550: GREATER
19551: OR
19552: IFFALSE 19556
// exit ;
19554: GO 19852
// if direction then
19556: LD_VAR 0 4
19560: IFFALSE 19624
// begin d := 1 ;
19562: LD_ADDR_VAR 0 9
19566: PUSH
19567: LD_INT 1
19569: ST_TO_ADDR
// if i_from > i_to then
19570: LD_VAR 0 2
19574: PUSH
19575: LD_VAR 0 3
19579: GREATER
19580: IFFALSE 19606
// length := ( array - i_from ) + i_to else
19582: LD_ADDR_VAR 0 11
19586: PUSH
19587: LD_VAR 0 1
19591: PUSH
19592: LD_VAR 0 2
19596: MINUS
19597: PUSH
19598: LD_VAR 0 3
19602: PLUS
19603: ST_TO_ADDR
19604: GO 19622
// length := i_to - i_from ;
19606: LD_ADDR_VAR 0 11
19610: PUSH
19611: LD_VAR 0 3
19615: PUSH
19616: LD_VAR 0 2
19620: MINUS
19621: ST_TO_ADDR
// end else
19622: GO 19685
// begin d := - 1 ;
19624: LD_ADDR_VAR 0 9
19628: PUSH
19629: LD_INT 1
19631: NEG
19632: ST_TO_ADDR
// if i_from > i_to then
19633: LD_VAR 0 2
19637: PUSH
19638: LD_VAR 0 3
19642: GREATER
19643: IFFALSE 19663
// length := i_from - i_to else
19645: LD_ADDR_VAR 0 11
19649: PUSH
19650: LD_VAR 0 2
19654: PUSH
19655: LD_VAR 0 3
19659: MINUS
19660: ST_TO_ADDR
19661: GO 19685
// length := ( array - i_to ) + i_from ;
19663: LD_ADDR_VAR 0 11
19667: PUSH
19668: LD_VAR 0 1
19672: PUSH
19673: LD_VAR 0 3
19677: MINUS
19678: PUSH
19679: LD_VAR 0 2
19683: PLUS
19684: ST_TO_ADDR
// end ; if not length then
19685: LD_VAR 0 11
19689: NOT
19690: IFFALSE 19694
// exit ;
19692: GO 19852
// tmp := array ;
19694: LD_ADDR_VAR 0 10
19698: PUSH
19699: LD_VAR 0 1
19703: ST_TO_ADDR
// for i = 1 to length do
19704: LD_ADDR_VAR 0 6
19708: PUSH
19709: DOUBLE
19710: LD_INT 1
19712: DEC
19713: ST_TO_ADDR
19714: LD_VAR 0 11
19718: PUSH
19719: FOR_TO
19720: IFFALSE 19840
// begin for j = 1 to array do
19722: LD_ADDR_VAR 0 7
19726: PUSH
19727: DOUBLE
19728: LD_INT 1
19730: DEC
19731: ST_TO_ADDR
19732: LD_VAR 0 1
19736: PUSH
19737: FOR_TO
19738: IFFALSE 19826
// begin k := j + d ;
19740: LD_ADDR_VAR 0 8
19744: PUSH
19745: LD_VAR 0 7
19749: PUSH
19750: LD_VAR 0 9
19754: PLUS
19755: ST_TO_ADDR
// if k > array then
19756: LD_VAR 0 8
19760: PUSH
19761: LD_VAR 0 1
19765: GREATER
19766: IFFALSE 19776
// k := 1 ;
19768: LD_ADDR_VAR 0 8
19772: PUSH
19773: LD_INT 1
19775: ST_TO_ADDR
// if not k then
19776: LD_VAR 0 8
19780: NOT
19781: IFFALSE 19793
// k := array ;
19783: LD_ADDR_VAR 0 8
19787: PUSH
19788: LD_VAR 0 1
19792: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
19793: LD_ADDR_VAR 0 10
19797: PUSH
19798: LD_VAR 0 10
19802: PPUSH
19803: LD_VAR 0 8
19807: PPUSH
19808: LD_VAR 0 1
19812: PUSH
19813: LD_VAR 0 7
19817: ARRAY
19818: PPUSH
19819: CALL_OW 1
19823: ST_TO_ADDR
// end ;
19824: GO 19737
19826: POP
19827: POP
// array := tmp ;
19828: LD_ADDR_VAR 0 1
19832: PUSH
19833: LD_VAR 0 10
19837: ST_TO_ADDR
// end ;
19838: GO 19719
19840: POP
19841: POP
// result := array ;
19842: LD_ADDR_VAR 0 5
19846: PUSH
19847: LD_VAR 0 1
19851: ST_TO_ADDR
// end ;
19852: LD_VAR 0 5
19856: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
19857: LD_INT 0
19859: PPUSH
19860: PPUSH
// result := 0 ;
19861: LD_ADDR_VAR 0 3
19865: PUSH
19866: LD_INT 0
19868: ST_TO_ADDR
// if not array or not value in array then
19869: LD_VAR 0 1
19873: NOT
19874: PUSH
19875: LD_VAR 0 2
19879: PUSH
19880: LD_VAR 0 1
19884: IN
19885: NOT
19886: OR
19887: IFFALSE 19891
// exit ;
19889: GO 19945
// for i = 1 to array do
19891: LD_ADDR_VAR 0 4
19895: PUSH
19896: DOUBLE
19897: LD_INT 1
19899: DEC
19900: ST_TO_ADDR
19901: LD_VAR 0 1
19905: PUSH
19906: FOR_TO
19907: IFFALSE 19943
// if value = array [ i ] then
19909: LD_VAR 0 2
19913: PUSH
19914: LD_VAR 0 1
19918: PUSH
19919: LD_VAR 0 4
19923: ARRAY
19924: EQUAL
19925: IFFALSE 19941
// begin result := i ;
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_VAR 0 4
19936: ST_TO_ADDR
// exit ;
19937: POP
19938: POP
19939: GO 19945
// end ;
19941: GO 19906
19943: POP
19944: POP
// end ;
19945: LD_VAR 0 3
19949: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
19950: LD_INT 0
19952: PPUSH
// vc_chassis := chassis ;
19953: LD_ADDR_OWVAR 37
19957: PUSH
19958: LD_VAR 0 1
19962: ST_TO_ADDR
// vc_engine := engine ;
19963: LD_ADDR_OWVAR 39
19967: PUSH
19968: LD_VAR 0 2
19972: ST_TO_ADDR
// vc_control := control ;
19973: LD_ADDR_OWVAR 38
19977: PUSH
19978: LD_VAR 0 3
19982: ST_TO_ADDR
// vc_weapon := weapon ;
19983: LD_ADDR_OWVAR 40
19987: PUSH
19988: LD_VAR 0 4
19992: ST_TO_ADDR
// vc_fuel_battery := fuel ;
19993: LD_ADDR_OWVAR 41
19997: PUSH
19998: LD_VAR 0 5
20002: ST_TO_ADDR
// end ;
20003: LD_VAR 0 6
20007: RET
// export function WantPlant ( unit ) ; var task ; begin
20008: LD_INT 0
20010: PPUSH
20011: PPUSH
// result := false ;
20012: LD_ADDR_VAR 0 2
20016: PUSH
20017: LD_INT 0
20019: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
20020: LD_ADDR_VAR 0 3
20024: PUSH
20025: LD_VAR 0 1
20029: PPUSH
20030: CALL_OW 437
20034: ST_TO_ADDR
// if task then
20035: LD_VAR 0 3
20039: IFFALSE 20067
// if task [ 1 ] [ 1 ] = p then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 1
20048: ARRAY
20049: PUSH
20050: LD_INT 1
20052: ARRAY
20053: PUSH
20054: LD_STRING p
20056: EQUAL
20057: IFFALSE 20067
// result := true ;
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_INT 1
20066: ST_TO_ADDR
// end ;
20067: LD_VAR 0 2
20071: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
20072: LD_INT 0
20074: PPUSH
20075: PPUSH
20076: PPUSH
20077: PPUSH
// if pos < 1 then
20078: LD_VAR 0 2
20082: PUSH
20083: LD_INT 1
20085: LESS
20086: IFFALSE 20090
// exit ;
20088: GO 20393
// if pos = 1 then
20090: LD_VAR 0 2
20094: PUSH
20095: LD_INT 1
20097: EQUAL
20098: IFFALSE 20131
// result := Replace ( arr , pos [ 1 ] , value ) else
20100: LD_ADDR_VAR 0 4
20104: PUSH
20105: LD_VAR 0 1
20109: PPUSH
20110: LD_VAR 0 2
20114: PUSH
20115: LD_INT 1
20117: ARRAY
20118: PPUSH
20119: LD_VAR 0 3
20123: PPUSH
20124: CALL_OW 1
20128: ST_TO_ADDR
20129: GO 20393
// begin tmp := arr ;
20131: LD_ADDR_VAR 0 6
20135: PUSH
20136: LD_VAR 0 1
20140: ST_TO_ADDR
// s_arr := [ tmp ] ;
20141: LD_ADDR_VAR 0 7
20145: PUSH
20146: LD_VAR 0 6
20150: PUSH
20151: EMPTY
20152: LIST
20153: ST_TO_ADDR
// for i = 1 to pos - 1 do
20154: LD_ADDR_VAR 0 5
20158: PUSH
20159: DOUBLE
20160: LD_INT 1
20162: DEC
20163: ST_TO_ADDR
20164: LD_VAR 0 2
20168: PUSH
20169: LD_INT 1
20171: MINUS
20172: PUSH
20173: FOR_TO
20174: IFFALSE 20219
// begin tmp := tmp [ pos [ i ] ] ;
20176: LD_ADDR_VAR 0 6
20180: PUSH
20181: LD_VAR 0 6
20185: PUSH
20186: LD_VAR 0 2
20190: PUSH
20191: LD_VAR 0 5
20195: ARRAY
20196: ARRAY
20197: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
20198: LD_ADDR_VAR 0 7
20202: PUSH
20203: LD_VAR 0 7
20207: PUSH
20208: LD_VAR 0 6
20212: PUSH
20213: EMPTY
20214: LIST
20215: ADD
20216: ST_TO_ADDR
// end ;
20217: GO 20173
20219: POP
20220: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
20221: LD_ADDR_VAR 0 6
20225: PUSH
20226: LD_VAR 0 6
20230: PPUSH
20231: LD_VAR 0 2
20235: PUSH
20236: LD_VAR 0 2
20240: ARRAY
20241: PPUSH
20242: LD_VAR 0 3
20246: PPUSH
20247: CALL_OW 1
20251: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
20252: LD_ADDR_VAR 0 7
20256: PUSH
20257: LD_VAR 0 7
20261: PPUSH
20262: LD_VAR 0 7
20266: PPUSH
20267: LD_VAR 0 6
20271: PPUSH
20272: CALL_OW 1
20276: ST_TO_ADDR
// for i = s_arr downto 2 do
20277: LD_ADDR_VAR 0 5
20281: PUSH
20282: DOUBLE
20283: LD_VAR 0 7
20287: INC
20288: ST_TO_ADDR
20289: LD_INT 2
20291: PUSH
20292: FOR_DOWNTO
20293: IFFALSE 20377
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
20295: LD_ADDR_VAR 0 6
20299: PUSH
20300: LD_VAR 0 7
20304: PUSH
20305: LD_VAR 0 5
20309: PUSH
20310: LD_INT 1
20312: MINUS
20313: ARRAY
20314: PPUSH
20315: LD_VAR 0 2
20319: PUSH
20320: LD_VAR 0 5
20324: PUSH
20325: LD_INT 1
20327: MINUS
20328: ARRAY
20329: PPUSH
20330: LD_VAR 0 7
20334: PUSH
20335: LD_VAR 0 5
20339: ARRAY
20340: PPUSH
20341: CALL_OW 1
20345: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
20346: LD_ADDR_VAR 0 7
20350: PUSH
20351: LD_VAR 0 7
20355: PPUSH
20356: LD_VAR 0 5
20360: PUSH
20361: LD_INT 1
20363: MINUS
20364: PPUSH
20365: LD_VAR 0 6
20369: PPUSH
20370: CALL_OW 1
20374: ST_TO_ADDR
// end ;
20375: GO 20292
20377: POP
20378: POP
// result := s_arr [ 1 ] ;
20379: LD_ADDR_VAR 0 4
20383: PUSH
20384: LD_VAR 0 7
20388: PUSH
20389: LD_INT 1
20391: ARRAY
20392: ST_TO_ADDR
// end ; end ;
20393: LD_VAR 0 4
20397: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
// if not list then
20402: LD_VAR 0 1
20406: NOT
20407: IFFALSE 20411
// exit ;
20409: GO 20502
// i := list [ pos1 ] ;
20411: LD_ADDR_VAR 0 5
20415: PUSH
20416: LD_VAR 0 1
20420: PUSH
20421: LD_VAR 0 2
20425: ARRAY
20426: ST_TO_ADDR
// if not i then
20427: LD_VAR 0 5
20431: NOT
20432: IFFALSE 20436
// exit ;
20434: GO 20502
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
20436: LD_ADDR_VAR 0 1
20440: PUSH
20441: LD_VAR 0 1
20445: PPUSH
20446: LD_VAR 0 2
20450: PPUSH
20451: LD_VAR 0 1
20455: PUSH
20456: LD_VAR 0 3
20460: ARRAY
20461: PPUSH
20462: CALL_OW 1
20466: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
20467: LD_ADDR_VAR 0 1
20471: PUSH
20472: LD_VAR 0 1
20476: PPUSH
20477: LD_VAR 0 3
20481: PPUSH
20482: LD_VAR 0 5
20486: PPUSH
20487: CALL_OW 1
20491: ST_TO_ADDR
// result := list ;
20492: LD_ADDR_VAR 0 4
20496: PUSH
20497: LD_VAR 0 1
20501: ST_TO_ADDR
// end ;
20502: LD_VAR 0 4
20506: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
20507: LD_INT 0
20509: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
20510: LD_ADDR_VAR 0 5
20514: PUSH
20515: LD_VAR 0 1
20519: PPUSH
20520: CALL_OW 250
20524: PPUSH
20525: LD_VAR 0 1
20529: PPUSH
20530: CALL_OW 251
20534: PPUSH
20535: LD_VAR 0 2
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: LD_VAR 0 4
20549: PPUSH
20550: CALL 20928 0 5
20554: ST_TO_ADDR
// end ;
20555: LD_VAR 0 5
20559: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
20564: PPUSH
20565: PPUSH
// if not list or not unit then
20566: LD_VAR 0 2
20570: NOT
20571: PUSH
20572: LD_VAR 0 1
20576: NOT
20577: OR
20578: IFFALSE 20582
// exit ;
20580: GO 20923
// result := [ ] ;
20582: LD_ADDR_VAR 0 5
20586: PUSH
20587: EMPTY
20588: ST_TO_ADDR
// for i in list do
20589: LD_ADDR_VAR 0 6
20593: PUSH
20594: LD_VAR 0 2
20598: PUSH
20599: FOR_IN
20600: IFFALSE 20818
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
20602: LD_ADDR_VAR 0 8
20606: PUSH
20607: LD_VAR 0 1
20611: PPUSH
20612: LD_VAR 0 6
20616: PUSH
20617: LD_INT 1
20619: ARRAY
20620: PPUSH
20621: LD_VAR 0 6
20625: PUSH
20626: LD_INT 2
20628: ARRAY
20629: PPUSH
20630: CALL_OW 297
20634: ST_TO_ADDR
// if not Count ( result ) then
20635: LD_VAR 0 5
20639: PPUSH
20640: CALL 17212 0 1
20644: NOT
20645: IFFALSE 20678
// begin result := Join ( result , [ i , tmp ] ) ;
20647: LD_ADDR_VAR 0 5
20651: PUSH
20652: LD_VAR 0 5
20656: PPUSH
20657: LD_VAR 0 6
20661: PUSH
20662: LD_VAR 0 8
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PPUSH
20671: CALL 52801 0 2
20675: ST_TO_ADDR
// continue ;
20676: GO 20599
// end ; if result [ result ] [ 2 ] <= tmp then
20678: LD_VAR 0 5
20682: PUSH
20683: LD_VAR 0 5
20687: ARRAY
20688: PUSH
20689: LD_INT 2
20691: ARRAY
20692: PUSH
20693: LD_VAR 0 8
20697: LESSEQUAL
20698: IFFALSE 20731
// result := Join ( result , [ i , tmp ] ) else
20700: LD_ADDR_VAR 0 5
20704: PUSH
20705: LD_VAR 0 5
20709: PPUSH
20710: LD_VAR 0 6
20714: PUSH
20715: LD_VAR 0 8
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PPUSH
20724: CALL 52801 0 2
20728: ST_TO_ADDR
20729: GO 20816
// begin for j := 1 to Count ( result ) do
20731: LD_ADDR_VAR 0 7
20735: PUSH
20736: DOUBLE
20737: LD_INT 1
20739: DEC
20740: ST_TO_ADDR
20741: LD_VAR 0 5
20745: PPUSH
20746: CALL 17212 0 1
20750: PUSH
20751: FOR_TO
20752: IFFALSE 20814
// begin if tmp < result [ j ] [ 2 ] then
20754: LD_VAR 0 8
20758: PUSH
20759: LD_VAR 0 5
20763: PUSH
20764: LD_VAR 0 7
20768: ARRAY
20769: PUSH
20770: LD_INT 2
20772: ARRAY
20773: LESS
20774: IFFALSE 20812
// begin result := Insert ( result , j , [ i , tmp ] ) ;
20776: LD_ADDR_VAR 0 5
20780: PUSH
20781: LD_VAR 0 5
20785: PPUSH
20786: LD_VAR 0 7
20790: PPUSH
20791: LD_VAR 0 6
20795: PUSH
20796: LD_VAR 0 8
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PPUSH
20805: CALL_OW 2
20809: ST_TO_ADDR
// break ;
20810: GO 20814
// end ; end ;
20812: GO 20751
20814: POP
20815: POP
// end ; end ;
20816: GO 20599
20818: POP
20819: POP
// if result and not asc then
20820: LD_VAR 0 5
20824: PUSH
20825: LD_VAR 0 3
20829: NOT
20830: AND
20831: IFFALSE 20848
// result := ReverseArray ( result ) ;
20833: LD_ADDR_VAR 0 5
20837: PUSH
20838: LD_VAR 0 5
20842: PPUSH
20843: CALL 48088 0 1
20847: ST_TO_ADDR
// tmp := [ ] ;
20848: LD_ADDR_VAR 0 8
20852: PUSH
20853: EMPTY
20854: ST_TO_ADDR
// if mode then
20855: LD_VAR 0 4
20859: IFFALSE 20923
// begin for i := 1 to result do
20861: LD_ADDR_VAR 0 6
20865: PUSH
20866: DOUBLE
20867: LD_INT 1
20869: DEC
20870: ST_TO_ADDR
20871: LD_VAR 0 5
20875: PUSH
20876: FOR_TO
20877: IFFALSE 20911
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
20879: LD_ADDR_VAR 0 8
20883: PUSH
20884: LD_VAR 0 8
20888: PPUSH
20889: LD_VAR 0 5
20893: PUSH
20894: LD_VAR 0 6
20898: ARRAY
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: PPUSH
20904: CALL 52801 0 2
20908: ST_TO_ADDR
20909: GO 20876
20911: POP
20912: POP
// result := tmp ;
20913: LD_ADDR_VAR 0 5
20917: PUSH
20918: LD_VAR 0 8
20922: ST_TO_ADDR
// end ; end ;
20923: LD_VAR 0 5
20927: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
20932: PPUSH
20933: PPUSH
// if not list then
20934: LD_VAR 0 3
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 21331
// result := [ ] ;
20943: LD_ADDR_VAR 0 6
20947: PUSH
20948: EMPTY
20949: ST_TO_ADDR
// for i in list do
20950: LD_ADDR_VAR 0 7
20954: PUSH
20955: LD_VAR 0 3
20959: PUSH
20960: FOR_IN
20961: IFFALSE 21163
// begin tmp := GetDistUnitXY ( i , x , y ) ;
20963: LD_ADDR_VAR 0 9
20967: PUSH
20968: LD_VAR 0 7
20972: PPUSH
20973: LD_VAR 0 1
20977: PPUSH
20978: LD_VAR 0 2
20982: PPUSH
20983: CALL_OW 297
20987: ST_TO_ADDR
// if not result then
20988: LD_VAR 0 6
20992: NOT
20993: IFFALSE 21019
// result := [ [ i , tmp ] ] else
20995: LD_ADDR_VAR 0 6
20999: PUSH
21000: LD_VAR 0 7
21004: PUSH
21005: LD_VAR 0 9
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PUSH
21014: EMPTY
21015: LIST
21016: ST_TO_ADDR
21017: GO 21161
// begin if result [ result ] [ 2 ] < tmp then
21019: LD_VAR 0 6
21023: PUSH
21024: LD_VAR 0 6
21028: ARRAY
21029: PUSH
21030: LD_INT 2
21032: ARRAY
21033: PUSH
21034: LD_VAR 0 9
21038: LESS
21039: IFFALSE 21081
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21041: LD_ADDR_VAR 0 6
21045: PUSH
21046: LD_VAR 0 6
21050: PPUSH
21051: LD_VAR 0 6
21055: PUSH
21056: LD_INT 1
21058: PLUS
21059: PPUSH
21060: LD_VAR 0 7
21064: PUSH
21065: LD_VAR 0 9
21069: PUSH
21070: EMPTY
21071: LIST
21072: LIST
21073: PPUSH
21074: CALL_OW 2
21078: ST_TO_ADDR
21079: GO 21161
// for j = 1 to result do
21081: LD_ADDR_VAR 0 8
21085: PUSH
21086: DOUBLE
21087: LD_INT 1
21089: DEC
21090: ST_TO_ADDR
21091: LD_VAR 0 6
21095: PUSH
21096: FOR_TO
21097: IFFALSE 21159
// begin if tmp < result [ j ] [ 2 ] then
21099: LD_VAR 0 9
21103: PUSH
21104: LD_VAR 0 6
21108: PUSH
21109: LD_VAR 0 8
21113: ARRAY
21114: PUSH
21115: LD_INT 2
21117: ARRAY
21118: LESS
21119: IFFALSE 21157
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21121: LD_ADDR_VAR 0 6
21125: PUSH
21126: LD_VAR 0 6
21130: PPUSH
21131: LD_VAR 0 8
21135: PPUSH
21136: LD_VAR 0 7
21140: PUSH
21141: LD_VAR 0 9
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PPUSH
21150: CALL_OW 2
21154: ST_TO_ADDR
// break ;
21155: GO 21159
// end ; end ;
21157: GO 21096
21159: POP
21160: POP
// end ; end ;
21161: GO 20960
21163: POP
21164: POP
// if result and not asc then
21165: LD_VAR 0 6
21169: PUSH
21170: LD_VAR 0 4
21174: NOT
21175: AND
21176: IFFALSE 21251
// begin tmp := result ;
21178: LD_ADDR_VAR 0 9
21182: PUSH
21183: LD_VAR 0 6
21187: ST_TO_ADDR
// for i = tmp downto 1 do
21188: LD_ADDR_VAR 0 7
21192: PUSH
21193: DOUBLE
21194: LD_VAR 0 9
21198: INC
21199: ST_TO_ADDR
21200: LD_INT 1
21202: PUSH
21203: FOR_DOWNTO
21204: IFFALSE 21249
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21206: LD_ADDR_VAR 0 6
21210: PUSH
21211: LD_VAR 0 6
21215: PPUSH
21216: LD_VAR 0 9
21220: PUSH
21221: LD_VAR 0 7
21225: MINUS
21226: PUSH
21227: LD_INT 1
21229: PLUS
21230: PPUSH
21231: LD_VAR 0 9
21235: PUSH
21236: LD_VAR 0 7
21240: ARRAY
21241: PPUSH
21242: CALL_OW 1
21246: ST_TO_ADDR
21247: GO 21203
21249: POP
21250: POP
// end ; tmp := [ ] ;
21251: LD_ADDR_VAR 0 9
21255: PUSH
21256: EMPTY
21257: ST_TO_ADDR
// if mode then
21258: LD_VAR 0 5
21262: IFFALSE 21331
// begin for i = 1 to result do
21264: LD_ADDR_VAR 0 7
21268: PUSH
21269: DOUBLE
21270: LD_INT 1
21272: DEC
21273: ST_TO_ADDR
21274: LD_VAR 0 6
21278: PUSH
21279: FOR_TO
21280: IFFALSE 21319
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21282: LD_ADDR_VAR 0 9
21286: PUSH
21287: LD_VAR 0 9
21291: PPUSH
21292: LD_VAR 0 7
21296: PPUSH
21297: LD_VAR 0 6
21301: PUSH
21302: LD_VAR 0 7
21306: ARRAY
21307: PUSH
21308: LD_INT 1
21310: ARRAY
21311: PPUSH
21312: CALL_OW 1
21316: ST_TO_ADDR
21317: GO 21279
21319: POP
21320: POP
// result := tmp ;
21321: LD_ADDR_VAR 0 6
21325: PUSH
21326: LD_VAR 0 9
21330: ST_TO_ADDR
// end ; end ;
21331: LD_VAR 0 6
21335: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
21336: LD_INT 0
21338: PPUSH
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
21343: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
21344: LD_ADDR_VAR 0 5
21348: PUSH
21349: LD_INT 0
21351: PUSH
21352: LD_INT 0
21354: PUSH
21355: LD_INT 0
21357: PUSH
21358: EMPTY
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: ST_TO_ADDR
// if not x or not y then
21366: LD_VAR 0 2
21370: NOT
21371: PUSH
21372: LD_VAR 0 3
21376: NOT
21377: OR
21378: IFFALSE 21382
// exit ;
21380: GO 23032
// if not range then
21382: LD_VAR 0 4
21386: NOT
21387: IFFALSE 21397
// range := 10 ;
21389: LD_ADDR_VAR 0 4
21393: PUSH
21394: LD_INT 10
21396: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21397: LD_ADDR_VAR 0 8
21401: PUSH
21402: LD_INT 81
21404: PUSH
21405: LD_VAR 0 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 92
21416: PUSH
21417: LD_VAR 0 2
21421: PUSH
21422: LD_VAR 0 3
21426: PUSH
21427: LD_VAR 0 4
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 3
21440: PUSH
21441: LD_INT 21
21443: PUSH
21444: LD_INT 3
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: PPUSH
21460: CALL_OW 69
21464: ST_TO_ADDR
// if not tmp then
21465: LD_VAR 0 8
21469: NOT
21470: IFFALSE 21474
// exit ;
21472: GO 23032
// for i in tmp do
21474: LD_ADDR_VAR 0 6
21478: PUSH
21479: LD_VAR 0 8
21483: PUSH
21484: FOR_IN
21485: IFFALSE 23007
// begin points := [ 0 , 0 , 0 ] ;
21487: LD_ADDR_VAR 0 9
21491: PUSH
21492: LD_INT 0
21494: PUSH
21495: LD_INT 0
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: ST_TO_ADDR
// bpoints := 1 ;
21506: LD_ADDR_VAR 0 10
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// case GetType ( i ) of unit_human :
21514: LD_VAR 0 6
21518: PPUSH
21519: CALL_OW 247
21523: PUSH
21524: LD_INT 1
21526: DOUBLE
21527: EQUAL
21528: IFTRUE 21532
21530: GO 22110
21532: POP
// begin if GetClass ( i ) = 1 then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 1
21545: EQUAL
21546: IFFALSE 21567
// points := [ 10 , 5 , 3 ] ;
21548: LD_ADDR_VAR 0 9
21552: PUSH
21553: LD_INT 10
21555: PUSH
21556: LD_INT 5
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
21567: LD_VAR 0 6
21571: PPUSH
21572: CALL_OW 257
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 3
21582: PUSH
21583: LD_INT 4
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: LIST
21590: IN
21591: IFFALSE 21612
// points := [ 3 , 2 , 1 ] ;
21593: LD_ADDR_VAR 0 9
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: LD_INT 1
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: LIST
21611: ST_TO_ADDR
// if GetClass ( i ) = 5 then
21612: LD_VAR 0 6
21616: PPUSH
21617: CALL_OW 257
21621: PUSH
21622: LD_INT 5
21624: EQUAL
21625: IFFALSE 21646
// points := [ 130 , 5 , 2 ] ;
21627: LD_ADDR_VAR 0 9
21631: PUSH
21632: LD_INT 130
21634: PUSH
21635: LD_INT 5
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: ST_TO_ADDR
// if GetClass ( i ) = 8 then
21646: LD_VAR 0 6
21650: PPUSH
21651: CALL_OW 257
21655: PUSH
21656: LD_INT 8
21658: EQUAL
21659: IFFALSE 21680
// points := [ 35 , 35 , 30 ] ;
21661: LD_ADDR_VAR 0 9
21665: PUSH
21666: LD_INT 35
21668: PUSH
21669: LD_INT 35
21671: PUSH
21672: LD_INT 30
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: LIST
21679: ST_TO_ADDR
// if GetClass ( i ) = 9 then
21680: LD_VAR 0 6
21684: PPUSH
21685: CALL_OW 257
21689: PUSH
21690: LD_INT 9
21692: EQUAL
21693: IFFALSE 21714
// points := [ 20 , 55 , 40 ] ;
21695: LD_ADDR_VAR 0 9
21699: PUSH
21700: LD_INT 20
21702: PUSH
21703: LD_INT 55
21705: PUSH
21706: LD_INT 40
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
21714: LD_VAR 0 6
21718: PPUSH
21719: CALL_OW 257
21723: PUSH
21724: LD_INT 12
21726: PUSH
21727: LD_INT 16
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: IN
21734: IFFALSE 21755
// points := [ 5 , 3 , 2 ] ;
21736: LD_ADDR_VAR 0 9
21740: PUSH
21741: LD_INT 5
21743: PUSH
21744: LD_INT 3
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: ST_TO_ADDR
// if GetClass ( i ) = 17 then
21755: LD_VAR 0 6
21759: PPUSH
21760: CALL_OW 257
21764: PUSH
21765: LD_INT 17
21767: EQUAL
21768: IFFALSE 21789
// points := [ 100 , 50 , 75 ] ;
21770: LD_ADDR_VAR 0 9
21774: PUSH
21775: LD_INT 100
21777: PUSH
21778: LD_INT 50
21780: PUSH
21781: LD_INT 75
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: ST_TO_ADDR
// if GetClass ( i ) = 15 then
21789: LD_VAR 0 6
21793: PPUSH
21794: CALL_OW 257
21798: PUSH
21799: LD_INT 15
21801: EQUAL
21802: IFFALSE 21823
// points := [ 10 , 5 , 3 ] ;
21804: LD_ADDR_VAR 0 9
21808: PUSH
21809: LD_INT 10
21811: PUSH
21812: LD_INT 5
21814: PUSH
21815: LD_INT 3
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: ST_TO_ADDR
// if GetClass ( i ) = 14 then
21823: LD_VAR 0 6
21827: PPUSH
21828: CALL_OW 257
21832: PUSH
21833: LD_INT 14
21835: EQUAL
21836: IFFALSE 21857
// points := [ 10 , 0 , 0 ] ;
21838: LD_ADDR_VAR 0 9
21842: PUSH
21843: LD_INT 10
21845: PUSH
21846: LD_INT 0
21848: PUSH
21849: LD_INT 0
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: ST_TO_ADDR
// if GetClass ( i ) = 11 then
21857: LD_VAR 0 6
21861: PPUSH
21862: CALL_OW 257
21866: PUSH
21867: LD_INT 11
21869: EQUAL
21870: IFFALSE 21891
// points := [ 30 , 10 , 5 ] ;
21872: LD_ADDR_VAR 0 9
21876: PUSH
21877: LD_INT 30
21879: PUSH
21880: LD_INT 10
21882: PUSH
21883: LD_INT 5
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
21891: LD_VAR 0 1
21895: PPUSH
21896: LD_INT 5
21898: PPUSH
21899: CALL_OW 321
21903: PUSH
21904: LD_INT 2
21906: EQUAL
21907: IFFALSE 21924
// bpoints := bpoints * 1.8 ;
21909: LD_ADDR_VAR 0 10
21913: PUSH
21914: LD_VAR 0 10
21918: PUSH
21919: LD_REAL  1.80000000000000E+0000
21922: MUL
21923: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
21924: LD_VAR 0 6
21928: PPUSH
21929: CALL_OW 257
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 2
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 4
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: IN
21952: PUSH
21953: LD_VAR 0 1
21957: PPUSH
21958: LD_INT 51
21960: PPUSH
21961: CALL_OW 321
21965: PUSH
21966: LD_INT 2
21968: EQUAL
21969: AND
21970: IFFALSE 21987
// bpoints := bpoints * 1.2 ;
21972: LD_ADDR_VAR 0 10
21976: PUSH
21977: LD_VAR 0 10
21981: PUSH
21982: LD_REAL  1.20000000000000E+0000
21985: MUL
21986: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
21987: LD_VAR 0 6
21991: PPUSH
21992: CALL_OW 257
21996: PUSH
21997: LD_INT 5
21999: PUSH
22000: LD_INT 7
22002: PUSH
22003: LD_INT 9
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: LIST
22010: IN
22011: PUSH
22012: LD_VAR 0 1
22016: PPUSH
22017: LD_INT 52
22019: PPUSH
22020: CALL_OW 321
22024: PUSH
22025: LD_INT 2
22027: EQUAL
22028: AND
22029: IFFALSE 22046
// bpoints := bpoints * 1.5 ;
22031: LD_ADDR_VAR 0 10
22035: PUSH
22036: LD_VAR 0 10
22040: PUSH
22041: LD_REAL  1.50000000000000E+0000
22044: MUL
22045: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22046: LD_VAR 0 1
22050: PPUSH
22051: LD_INT 66
22053: PPUSH
22054: CALL_OW 321
22058: PUSH
22059: LD_INT 2
22061: EQUAL
22062: IFFALSE 22079
// bpoints := bpoints * 1.1 ;
22064: LD_ADDR_VAR 0 10
22068: PUSH
22069: LD_VAR 0 10
22073: PUSH
22074: LD_REAL  1.10000000000000E+0000
22077: MUL
22078: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22079: LD_ADDR_VAR 0 10
22083: PUSH
22084: LD_VAR 0 10
22088: PUSH
22089: LD_VAR 0 6
22093: PPUSH
22094: LD_INT 1
22096: PPUSH
22097: CALL_OW 259
22101: PUSH
22102: LD_REAL  1.15000000000000E+0000
22105: MUL
22106: MUL
22107: ST_TO_ADDR
// end ; unit_vehicle :
22108: GO 22936
22110: LD_INT 2
22112: DOUBLE
22113: EQUAL
22114: IFTRUE 22118
22116: GO 22924
22118: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22119: LD_VAR 0 6
22123: PPUSH
22124: CALL_OW 264
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: LD_INT 42
22134: PUSH
22135: LD_INT 24
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: IN
22143: IFFALSE 22164
// points := [ 25 , 5 , 3 ] ;
22145: LD_ADDR_VAR 0 9
22149: PUSH
22150: LD_INT 25
22152: PUSH
22153: LD_INT 5
22155: PUSH
22156: LD_INT 3
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22164: LD_VAR 0 6
22168: PPUSH
22169: CALL_OW 264
22173: PUSH
22174: LD_INT 4
22176: PUSH
22177: LD_INT 43
22179: PUSH
22180: LD_INT 25
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: IN
22188: IFFALSE 22209
// points := [ 40 , 15 , 5 ] ;
22190: LD_ADDR_VAR 0 9
22194: PUSH
22195: LD_INT 40
22197: PUSH
22198: LD_INT 15
22200: PUSH
22201: LD_INT 5
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: LIST
22208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22209: LD_VAR 0 6
22213: PPUSH
22214: CALL_OW 264
22218: PUSH
22219: LD_INT 3
22221: PUSH
22222: LD_INT 23
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: IN
22229: IFFALSE 22250
// points := [ 7 , 25 , 8 ] ;
22231: LD_ADDR_VAR 0 9
22235: PUSH
22236: LD_INT 7
22238: PUSH
22239: LD_INT 25
22241: PUSH
22242: LD_INT 8
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: LIST
22249: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22250: LD_VAR 0 6
22254: PPUSH
22255: CALL_OW 264
22259: PUSH
22260: LD_INT 5
22262: PUSH
22263: LD_INT 27
22265: PUSH
22266: LD_INT 44
22268: PUSH
22269: EMPTY
22270: LIST
22271: LIST
22272: LIST
22273: IN
22274: IFFALSE 22295
// points := [ 14 , 50 , 16 ] ;
22276: LD_ADDR_VAR 0 9
22280: PUSH
22281: LD_INT 14
22283: PUSH
22284: LD_INT 50
22286: PUSH
22287: LD_INT 16
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22295: LD_VAR 0 6
22299: PPUSH
22300: CALL_OW 264
22304: PUSH
22305: LD_INT 6
22307: PUSH
22308: LD_INT 46
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: IN
22315: IFFALSE 22336
// points := [ 32 , 120 , 70 ] ;
22317: LD_ADDR_VAR 0 9
22321: PUSH
22322: LD_INT 32
22324: PUSH
22325: LD_INT 120
22327: PUSH
22328: LD_INT 70
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: LIST
22335: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
22336: LD_VAR 0 6
22340: PPUSH
22341: CALL_OW 264
22345: PUSH
22346: LD_INT 7
22348: PUSH
22349: LD_INT 28
22351: PUSH
22352: LD_INT 45
22354: PUSH
22355: LD_INT 92
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: IN
22364: IFFALSE 22385
// points := [ 35 , 20 , 45 ] ;
22366: LD_ADDR_VAR 0 9
22370: PUSH
22371: LD_INT 35
22373: PUSH
22374: LD_INT 20
22376: PUSH
22377: LD_INT 45
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
22385: LD_VAR 0 6
22389: PPUSH
22390: CALL_OW 264
22394: PUSH
22395: LD_INT 47
22397: PUSH
22398: EMPTY
22399: LIST
22400: IN
22401: IFFALSE 22422
// points := [ 67 , 45 , 75 ] ;
22403: LD_ADDR_VAR 0 9
22407: PUSH
22408: LD_INT 67
22410: PUSH
22411: LD_INT 45
22413: PUSH
22414: LD_INT 75
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
22422: LD_VAR 0 6
22426: PPUSH
22427: CALL_OW 264
22431: PUSH
22432: LD_INT 26
22434: PUSH
22435: EMPTY
22436: LIST
22437: IN
22438: IFFALSE 22459
// points := [ 120 , 30 , 80 ] ;
22440: LD_ADDR_VAR 0 9
22444: PUSH
22445: LD_INT 120
22447: PUSH
22448: LD_INT 30
22450: PUSH
22451: LD_INT 80
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
22459: LD_VAR 0 6
22463: PPUSH
22464: CALL_OW 264
22468: PUSH
22469: LD_INT 22
22471: PUSH
22472: EMPTY
22473: LIST
22474: IN
22475: IFFALSE 22496
// points := [ 40 , 1 , 1 ] ;
22477: LD_ADDR_VAR 0 9
22481: PUSH
22482: LD_INT 40
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
22496: LD_VAR 0 6
22500: PPUSH
22501: CALL_OW 264
22505: PUSH
22506: LD_INT 29
22508: PUSH
22509: EMPTY
22510: LIST
22511: IN
22512: IFFALSE 22533
// points := [ 70 , 200 , 400 ] ;
22514: LD_ADDR_VAR 0 9
22518: PUSH
22519: LD_INT 70
22521: PUSH
22522: LD_INT 200
22524: PUSH
22525: LD_INT 400
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
22533: LD_VAR 0 6
22537: PPUSH
22538: CALL_OW 264
22542: PUSH
22543: LD_INT 14
22545: PUSH
22546: LD_INT 53
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: IN
22553: IFFALSE 22574
// points := [ 40 , 10 , 20 ] ;
22555: LD_ADDR_VAR 0 9
22559: PUSH
22560: LD_INT 40
22562: PUSH
22563: LD_INT 10
22565: PUSH
22566: LD_INT 20
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: LIST
22573: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
22574: LD_VAR 0 6
22578: PPUSH
22579: CALL_OW 264
22583: PUSH
22584: LD_INT 9
22586: PUSH
22587: EMPTY
22588: LIST
22589: IN
22590: IFFALSE 22611
// points := [ 5 , 70 , 20 ] ;
22592: LD_ADDR_VAR 0 9
22596: PUSH
22597: LD_INT 5
22599: PUSH
22600: LD_INT 70
22602: PUSH
22603: LD_INT 20
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
22611: LD_VAR 0 6
22615: PPUSH
22616: CALL_OW 264
22620: PUSH
22621: LD_INT 10
22623: PUSH
22624: EMPTY
22625: LIST
22626: IN
22627: IFFALSE 22648
// points := [ 35 , 110 , 70 ] ;
22629: LD_ADDR_VAR 0 9
22633: PUSH
22634: LD_INT 35
22636: PUSH
22637: LD_INT 110
22639: PUSH
22640: LD_INT 70
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
22648: LD_VAR 0 6
22652: PPUSH
22653: CALL_OW 265
22657: PUSH
22658: LD_INT 25
22660: EQUAL
22661: IFFALSE 22682
// points := [ 80 , 65 , 100 ] ;
22663: LD_ADDR_VAR 0 9
22667: PUSH
22668: LD_INT 80
22670: PUSH
22671: LD_INT 65
22673: PUSH
22674: LD_INT 100
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: LIST
22681: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
22682: LD_VAR 0 6
22686: PPUSH
22687: CALL_OW 263
22691: PUSH
22692: LD_INT 1
22694: EQUAL
22695: IFFALSE 22730
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
22697: LD_ADDR_VAR 0 10
22701: PUSH
22702: LD_VAR 0 10
22706: PUSH
22707: LD_VAR 0 6
22711: PPUSH
22712: CALL_OW 311
22716: PPUSH
22717: LD_INT 3
22719: PPUSH
22720: CALL_OW 259
22724: PUSH
22725: LD_INT 4
22727: MUL
22728: MUL
22729: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
22730: LD_VAR 0 6
22734: PPUSH
22735: CALL_OW 263
22739: PUSH
22740: LD_INT 2
22742: EQUAL
22743: IFFALSE 22794
// begin j := IsControledBy ( i ) ;
22745: LD_ADDR_VAR 0 7
22749: PUSH
22750: LD_VAR 0 6
22754: PPUSH
22755: CALL_OW 312
22759: ST_TO_ADDR
// if j then
22760: LD_VAR 0 7
22764: IFFALSE 22794
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
22766: LD_ADDR_VAR 0 10
22770: PUSH
22771: LD_VAR 0 10
22775: PUSH
22776: LD_VAR 0 7
22780: PPUSH
22781: LD_INT 3
22783: PPUSH
22784: CALL_OW 259
22788: PUSH
22789: LD_INT 3
22791: MUL
22792: MUL
22793: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
22794: LD_VAR 0 6
22798: PPUSH
22799: CALL_OW 264
22803: PUSH
22804: LD_INT 5
22806: PUSH
22807: LD_INT 6
22809: PUSH
22810: LD_INT 46
22812: PUSH
22813: LD_INT 44
22815: PUSH
22816: LD_INT 47
22818: PUSH
22819: LD_INT 45
22821: PUSH
22822: LD_INT 28
22824: PUSH
22825: LD_INT 7
22827: PUSH
22828: LD_INT 27
22830: PUSH
22831: LD_INT 29
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: IN
22846: PUSH
22847: LD_VAR 0 1
22851: PPUSH
22852: LD_INT 52
22854: PPUSH
22855: CALL_OW 321
22859: PUSH
22860: LD_INT 2
22862: EQUAL
22863: AND
22864: IFFALSE 22881
// bpoints := bpoints * 1.2 ;
22866: LD_ADDR_VAR 0 10
22870: PUSH
22871: LD_VAR 0 10
22875: PUSH
22876: LD_REAL  1.20000000000000E+0000
22879: MUL
22880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
22881: LD_VAR 0 6
22885: PPUSH
22886: CALL_OW 264
22890: PUSH
22891: LD_INT 6
22893: PUSH
22894: LD_INT 46
22896: PUSH
22897: LD_INT 47
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: IN
22905: IFFALSE 22922
// bpoints := bpoints * 1.2 ;
22907: LD_ADDR_VAR 0 10
22911: PUSH
22912: LD_VAR 0 10
22916: PUSH
22917: LD_REAL  1.20000000000000E+0000
22920: MUL
22921: ST_TO_ADDR
// end ; unit_building :
22922: GO 22936
22924: LD_INT 3
22926: DOUBLE
22927: EQUAL
22928: IFTRUE 22932
22930: GO 22935
22932: POP
// ; end ;
22933: GO 22936
22935: POP
// for j = 1 to 3 do
22936: LD_ADDR_VAR 0 7
22940: PUSH
22941: DOUBLE
22942: LD_INT 1
22944: DEC
22945: ST_TO_ADDR
22946: LD_INT 3
22948: PUSH
22949: FOR_TO
22950: IFFALSE 23003
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
22952: LD_ADDR_VAR 0 5
22956: PUSH
22957: LD_VAR 0 5
22961: PPUSH
22962: LD_VAR 0 7
22966: PPUSH
22967: LD_VAR 0 5
22971: PUSH
22972: LD_VAR 0 7
22976: ARRAY
22977: PUSH
22978: LD_VAR 0 9
22982: PUSH
22983: LD_VAR 0 7
22987: ARRAY
22988: PUSH
22989: LD_VAR 0 10
22993: MUL
22994: PLUS
22995: PPUSH
22996: CALL_OW 1
23000: ST_TO_ADDR
23001: GO 22949
23003: POP
23004: POP
// end ;
23005: GO 21484
23007: POP
23008: POP
// result := Replace ( result , 4 , tmp ) ;
23009: LD_ADDR_VAR 0 5
23013: PUSH
23014: LD_VAR 0 5
23018: PPUSH
23019: LD_INT 4
23021: PPUSH
23022: LD_VAR 0 8
23026: PPUSH
23027: CALL_OW 1
23031: ST_TO_ADDR
// end ;
23032: LD_VAR 0 5
23036: RET
// export function DangerAtRange ( unit , range ) ; begin
23037: LD_INT 0
23039: PPUSH
// if not unit then
23040: LD_VAR 0 1
23044: NOT
23045: IFFALSE 23049
// exit ;
23047: GO 23094
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23049: LD_ADDR_VAR 0 3
23053: PUSH
23054: LD_VAR 0 1
23058: PPUSH
23059: CALL_OW 255
23063: PPUSH
23064: LD_VAR 0 1
23068: PPUSH
23069: CALL_OW 250
23073: PPUSH
23074: LD_VAR 0 1
23078: PPUSH
23079: CALL_OW 251
23083: PPUSH
23084: LD_VAR 0 2
23088: PPUSH
23089: CALL 21336 0 4
23093: ST_TO_ADDR
// end ;
23094: LD_VAR 0 3
23098: RET
// export function DangerInArea ( side , area ) ; begin
23099: LD_INT 0
23101: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23102: LD_ADDR_VAR 0 3
23106: PUSH
23107: LD_VAR 0 2
23111: PPUSH
23112: LD_INT 81
23114: PUSH
23115: LD_VAR 0 1
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PPUSH
23124: CALL_OW 70
23128: ST_TO_ADDR
// end ;
23129: LD_VAR 0 3
23133: RET
// export function IsExtension ( b ) ; begin
23134: LD_INT 0
23136: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23137: LD_ADDR_VAR 0 2
23141: PUSH
23142: LD_VAR 0 1
23146: PUSH
23147: LD_INT 23
23149: PUSH
23150: LD_INT 20
23152: PUSH
23153: LD_INT 22
23155: PUSH
23156: LD_INT 17
23158: PUSH
23159: LD_INT 24
23161: PUSH
23162: LD_INT 21
23164: PUSH
23165: LD_INT 19
23167: PUSH
23168: LD_INT 16
23170: PUSH
23171: LD_INT 25
23173: PUSH
23174: LD_INT 18
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: IN
23189: ST_TO_ADDR
// end ;
23190: LD_VAR 0 2
23194: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23195: LD_INT 0
23197: PPUSH
23198: PPUSH
23199: PPUSH
// result := [ ] ;
23200: LD_ADDR_VAR 0 4
23204: PUSH
23205: EMPTY
23206: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23207: LD_ADDR_VAR 0 5
23211: PUSH
23212: LD_VAR 0 2
23216: PPUSH
23217: LD_INT 21
23219: PUSH
23220: LD_INT 3
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 70
23231: ST_TO_ADDR
// if not tmp then
23232: LD_VAR 0 5
23236: NOT
23237: IFFALSE 23241
// exit ;
23239: GO 23305
// if checkLink then
23241: LD_VAR 0 3
23245: IFFALSE 23295
// begin for i in tmp do
23247: LD_ADDR_VAR 0 6
23251: PUSH
23252: LD_VAR 0 5
23256: PUSH
23257: FOR_IN
23258: IFFALSE 23293
// if GetBase ( i ) <> base then
23260: LD_VAR 0 6
23264: PPUSH
23265: CALL_OW 274
23269: PUSH
23270: LD_VAR 0 1
23274: NONEQUAL
23275: IFFALSE 23291
// ComLinkToBase ( base , i ) ;
23277: LD_VAR 0 1
23281: PPUSH
23282: LD_VAR 0 6
23286: PPUSH
23287: CALL_OW 169
23291: GO 23257
23293: POP
23294: POP
// end ; result := tmp ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_VAR 0 5
23304: ST_TO_ADDR
// end ;
23305: LD_VAR 0 4
23309: RET
// export function ComComplete ( units , b ) ; var i ; begin
23310: LD_INT 0
23312: PPUSH
23313: PPUSH
// if not units then
23314: LD_VAR 0 1
23318: NOT
23319: IFFALSE 23323
// exit ;
23321: GO 23413
// for i in units do
23323: LD_ADDR_VAR 0 4
23327: PUSH
23328: LD_VAR 0 1
23332: PUSH
23333: FOR_IN
23334: IFFALSE 23411
// if BuildingStatus ( b ) = bs_build then
23336: LD_VAR 0 2
23340: PPUSH
23341: CALL_OW 461
23345: PUSH
23346: LD_INT 1
23348: EQUAL
23349: IFFALSE 23409
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23351: LD_VAR 0 4
23355: PPUSH
23356: LD_STRING h
23358: PUSH
23359: LD_VAR 0 2
23363: PPUSH
23364: CALL_OW 250
23368: PUSH
23369: LD_VAR 0 2
23373: PPUSH
23374: CALL_OW 251
23378: PUSH
23379: LD_VAR 0 2
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_INT 0
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: PUSH
23402: EMPTY
23403: LIST
23404: PPUSH
23405: CALL_OW 446
23409: GO 23333
23411: POP
23412: POP
// end ;
23413: LD_VAR 0 3
23417: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
23418: LD_INT 0
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
23426: LD_VAR 0 1
23430: NOT
23431: PUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 263
23441: PUSH
23442: LD_INT 2
23444: NONEQUAL
23445: OR
23446: IFFALSE 23450
// exit ;
23448: GO 23766
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
23450: LD_ADDR_VAR 0 6
23454: PUSH
23455: LD_INT 22
23457: PUSH
23458: LD_VAR 0 1
23462: PPUSH
23463: CALL_OW 255
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 30
23477: PUSH
23478: LD_INT 36
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: PUSH
23485: LD_INT 34
23487: PUSH
23488: LD_INT 31
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PPUSH
23504: CALL_OW 69
23508: ST_TO_ADDR
// if not tmp then
23509: LD_VAR 0 6
23513: NOT
23514: IFFALSE 23518
// exit ;
23516: GO 23766
// result := [ ] ;
23518: LD_ADDR_VAR 0 2
23522: PUSH
23523: EMPTY
23524: ST_TO_ADDR
// for i in tmp do
23525: LD_ADDR_VAR 0 3
23529: PUSH
23530: LD_VAR 0 6
23534: PUSH
23535: FOR_IN
23536: IFFALSE 23607
// begin t := UnitsInside ( i ) ;
23538: LD_ADDR_VAR 0 4
23542: PUSH
23543: LD_VAR 0 3
23547: PPUSH
23548: CALL_OW 313
23552: ST_TO_ADDR
// if t then
23553: LD_VAR 0 4
23557: IFFALSE 23605
// for j in t do
23559: LD_ADDR_VAR 0 7
23563: PUSH
23564: LD_VAR 0 4
23568: PUSH
23569: FOR_IN
23570: IFFALSE 23603
// result := Replace ( result , result + 1 , j ) ;
23572: LD_ADDR_VAR 0 2
23576: PUSH
23577: LD_VAR 0 2
23581: PPUSH
23582: LD_VAR 0 2
23586: PUSH
23587: LD_INT 1
23589: PLUS
23590: PPUSH
23591: LD_VAR 0 7
23595: PPUSH
23596: CALL_OW 1
23600: ST_TO_ADDR
23601: GO 23569
23603: POP
23604: POP
// end ;
23605: GO 23535
23607: POP
23608: POP
// if not result then
23609: LD_VAR 0 2
23613: NOT
23614: IFFALSE 23618
// exit ;
23616: GO 23766
// mech := result [ 1 ] ;
23618: LD_ADDR_VAR 0 5
23622: PUSH
23623: LD_VAR 0 2
23627: PUSH
23628: LD_INT 1
23630: ARRAY
23631: ST_TO_ADDR
// if result > 1 then
23632: LD_VAR 0 2
23636: PUSH
23637: LD_INT 1
23639: GREATER
23640: IFFALSE 23752
// begin for i = 2 to result do
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: DOUBLE
23648: LD_INT 2
23650: DEC
23651: ST_TO_ADDR
23652: LD_VAR 0 2
23656: PUSH
23657: FOR_TO
23658: IFFALSE 23750
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
23660: LD_ADDR_VAR 0 4
23664: PUSH
23665: LD_VAR 0 2
23669: PUSH
23670: LD_VAR 0 3
23674: ARRAY
23675: PPUSH
23676: LD_INT 3
23678: PPUSH
23679: CALL_OW 259
23683: PUSH
23684: LD_VAR 0 2
23688: PUSH
23689: LD_VAR 0 3
23693: ARRAY
23694: PPUSH
23695: CALL_OW 432
23699: MINUS
23700: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
23701: LD_VAR 0 4
23705: PUSH
23706: LD_VAR 0 5
23710: PPUSH
23711: LD_INT 3
23713: PPUSH
23714: CALL_OW 259
23718: PUSH
23719: LD_VAR 0 5
23723: PPUSH
23724: CALL_OW 432
23728: MINUS
23729: GREATEREQUAL
23730: IFFALSE 23748
// mech := result [ i ] ;
23732: LD_ADDR_VAR 0 5
23736: PUSH
23737: LD_VAR 0 2
23741: PUSH
23742: LD_VAR 0 3
23746: ARRAY
23747: ST_TO_ADDR
// end ;
23748: GO 23657
23750: POP
23751: POP
// end ; ComLinkTo ( vehicle , mech ) ;
23752: LD_VAR 0 1
23756: PPUSH
23757: LD_VAR 0 5
23761: PPUSH
23762: CALL_OW 135
// end ;
23766: LD_VAR 0 2
23770: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
23771: LD_INT 0
23773: PPUSH
23774: PPUSH
23775: PPUSH
23776: PPUSH
23777: PPUSH
23778: PPUSH
23779: PPUSH
23780: PPUSH
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
// result := [ ] ;
23786: LD_ADDR_VAR 0 7
23790: PUSH
23791: EMPTY
23792: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 266
23802: PUSH
23803: LD_INT 0
23805: PUSH
23806: LD_INT 1
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: IN
23813: NOT
23814: IFFALSE 23818
// exit ;
23816: GO 25452
// if name then
23818: LD_VAR 0 3
23822: IFFALSE 23838
// SetBName ( base_dep , name ) ;
23824: LD_VAR 0 1
23828: PPUSH
23829: LD_VAR 0 3
23833: PPUSH
23834: CALL_OW 500
// base := GetBase ( base_dep ) ;
23838: LD_ADDR_VAR 0 15
23842: PUSH
23843: LD_VAR 0 1
23847: PPUSH
23848: CALL_OW 274
23852: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
23853: LD_ADDR_VAR 0 16
23857: PUSH
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 255
23867: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
23868: LD_ADDR_VAR 0 17
23872: PUSH
23873: LD_VAR 0 1
23877: PPUSH
23878: CALL_OW 248
23882: ST_TO_ADDR
// if sources then
23883: LD_VAR 0 5
23887: IFFALSE 23934
// for i = 1 to 3 do
23889: LD_ADDR_VAR 0 8
23893: PUSH
23894: DOUBLE
23895: LD_INT 1
23897: DEC
23898: ST_TO_ADDR
23899: LD_INT 3
23901: PUSH
23902: FOR_TO
23903: IFFALSE 23932
// AddResourceType ( base , i , sources [ i ] ) ;
23905: LD_VAR 0 15
23909: PPUSH
23910: LD_VAR 0 8
23914: PPUSH
23915: LD_VAR 0 5
23919: PUSH
23920: LD_VAR 0 8
23924: ARRAY
23925: PPUSH
23926: CALL_OW 276
23930: GO 23902
23932: POP
23933: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
23934: LD_ADDR_VAR 0 18
23938: PUSH
23939: LD_VAR 0 15
23943: PPUSH
23944: LD_VAR 0 2
23948: PPUSH
23949: LD_INT 1
23951: PPUSH
23952: CALL 23195 0 3
23956: ST_TO_ADDR
// InitHc ;
23957: CALL_OW 19
// InitUc ;
23961: CALL_OW 18
// uc_side := side ;
23965: LD_ADDR_OWVAR 20
23969: PUSH
23970: LD_VAR 0 16
23974: ST_TO_ADDR
// uc_nation := nation ;
23975: LD_ADDR_OWVAR 21
23979: PUSH
23980: LD_VAR 0 17
23984: ST_TO_ADDR
// if buildings then
23985: LD_VAR 0 18
23989: IFFALSE 25311
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
23991: LD_ADDR_VAR 0 19
23995: PUSH
23996: LD_VAR 0 18
24000: PPUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 30
24006: PUSH
24007: LD_INT 29
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 30
24016: PUSH
24017: LD_INT 30
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 72
24033: ST_TO_ADDR
// if tmp then
24034: LD_VAR 0 19
24038: IFFALSE 24086
// for i in tmp do
24040: LD_ADDR_VAR 0 8
24044: PUSH
24045: LD_VAR 0 19
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24084
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24053: LD_VAR 0 8
24057: PPUSH
24058: CALL_OW 250
24062: PPUSH
24063: LD_VAR 0 8
24067: PPUSH
24068: CALL_OW 251
24072: PPUSH
24073: LD_VAR 0 16
24077: PPUSH
24078: CALL_OW 441
24082: GO 24050
24084: POP
24085: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24086: LD_VAR 0 18
24090: PPUSH
24091: LD_INT 2
24093: PUSH
24094: LD_INT 30
24096: PUSH
24097: LD_INT 32
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 30
24106: PUSH
24107: LD_INT 33
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: PPUSH
24119: CALL_OW 72
24123: IFFALSE 24211
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24125: LD_ADDR_VAR 0 8
24129: PUSH
24130: LD_VAR 0 18
24134: PPUSH
24135: LD_INT 2
24137: PUSH
24138: LD_INT 30
24140: PUSH
24141: LD_INT 32
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: LD_INT 30
24150: PUSH
24151: LD_INT 33
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 72
24167: PUSH
24168: FOR_IN
24169: IFFALSE 24209
// begin if not GetBWeapon ( i ) then
24171: LD_VAR 0 8
24175: PPUSH
24176: CALL_OW 269
24180: NOT
24181: IFFALSE 24207
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24183: LD_VAR 0 8
24187: PPUSH
24188: LD_VAR 0 8
24192: PPUSH
24193: LD_VAR 0 2
24197: PPUSH
24198: CALL 25457 0 2
24202: PPUSH
24203: CALL_OW 431
// end ;
24207: GO 24168
24209: POP
24210: POP
// end ; for i = 1 to personel do
24211: LD_ADDR_VAR 0 8
24215: PUSH
24216: DOUBLE
24217: LD_INT 1
24219: DEC
24220: ST_TO_ADDR
24221: LD_VAR 0 6
24225: PUSH
24226: FOR_TO
24227: IFFALSE 25291
// begin if i > 4 then
24229: LD_VAR 0 8
24233: PUSH
24234: LD_INT 4
24236: GREATER
24237: IFFALSE 24241
// break ;
24239: GO 25291
// case i of 1 :
24241: LD_VAR 0 8
24245: PUSH
24246: LD_INT 1
24248: DOUBLE
24249: EQUAL
24250: IFTRUE 24254
24252: GO 24334
24254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24255: LD_ADDR_VAR 0 12
24259: PUSH
24260: LD_VAR 0 18
24264: PPUSH
24265: LD_INT 22
24267: PUSH
24268: LD_VAR 0 16
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 58
24279: PUSH
24280: EMPTY
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: PUSH
24286: LD_INT 30
24288: PUSH
24289: LD_INT 32
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 30
24298: PUSH
24299: LD_INT 4
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 30
24308: PUSH
24309: LD_INT 5
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: PPUSH
24327: CALL_OW 72
24331: ST_TO_ADDR
24332: GO 24556
24334: LD_INT 2
24336: DOUBLE
24337: EQUAL
24338: IFTRUE 24342
24340: GO 24404
24342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24343: LD_ADDR_VAR 0 12
24347: PUSH
24348: LD_VAR 0 18
24352: PPUSH
24353: LD_INT 22
24355: PUSH
24356: LD_VAR 0 16
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: LD_INT 2
24367: PUSH
24368: LD_INT 30
24370: PUSH
24371: LD_INT 0
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 30
24380: PUSH
24381: LD_INT 1
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PPUSH
24397: CALL_OW 72
24401: ST_TO_ADDR
24402: GO 24556
24404: LD_INT 3
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24474
24412: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
24413: LD_ADDR_VAR 0 12
24417: PUSH
24418: LD_VAR 0 18
24422: PPUSH
24423: LD_INT 22
24425: PUSH
24426: LD_VAR 0 16
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 2
24437: PUSH
24438: LD_INT 30
24440: PUSH
24441: LD_INT 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 30
24450: PUSH
24451: LD_INT 3
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: PUSH
24463: EMPTY
24464: LIST
24465: LIST
24466: PPUSH
24467: CALL_OW 72
24471: ST_TO_ADDR
24472: GO 24556
24474: LD_INT 4
24476: DOUBLE
24477: EQUAL
24478: IFTRUE 24482
24480: GO 24555
24482: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
24483: LD_ADDR_VAR 0 12
24487: PUSH
24488: LD_VAR 0 18
24492: PPUSH
24493: LD_INT 22
24495: PUSH
24496: LD_VAR 0 16
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: LD_INT 30
24510: PUSH
24511: LD_INT 6
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 30
24520: PUSH
24521: LD_INT 7
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 30
24530: PUSH
24531: LD_INT 8
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PPUSH
24548: CALL_OW 72
24552: ST_TO_ADDR
24553: GO 24556
24555: POP
// if i = 1 then
24556: LD_VAR 0 8
24560: PUSH
24561: LD_INT 1
24563: EQUAL
24564: IFFALSE 24675
// begin tmp := [ ] ;
24566: LD_ADDR_VAR 0 19
24570: PUSH
24571: EMPTY
24572: ST_TO_ADDR
// for j in f do
24573: LD_ADDR_VAR 0 9
24577: PUSH
24578: LD_VAR 0 12
24582: PUSH
24583: FOR_IN
24584: IFFALSE 24657
// if GetBType ( j ) = b_bunker then
24586: LD_VAR 0 9
24590: PPUSH
24591: CALL_OW 266
24595: PUSH
24596: LD_INT 32
24598: EQUAL
24599: IFFALSE 24626
// tmp := Insert ( tmp , 1 , j ) else
24601: LD_ADDR_VAR 0 19
24605: PUSH
24606: LD_VAR 0 19
24610: PPUSH
24611: LD_INT 1
24613: PPUSH
24614: LD_VAR 0 9
24618: PPUSH
24619: CALL_OW 2
24623: ST_TO_ADDR
24624: GO 24655
// tmp := Insert ( tmp , tmp + 1 , j ) ;
24626: LD_ADDR_VAR 0 19
24630: PUSH
24631: LD_VAR 0 19
24635: PPUSH
24636: LD_VAR 0 19
24640: PUSH
24641: LD_INT 1
24643: PLUS
24644: PPUSH
24645: LD_VAR 0 9
24649: PPUSH
24650: CALL_OW 2
24654: ST_TO_ADDR
24655: GO 24583
24657: POP
24658: POP
// if tmp then
24659: LD_VAR 0 19
24663: IFFALSE 24675
// f := tmp ;
24665: LD_ADDR_VAR 0 12
24669: PUSH
24670: LD_VAR 0 19
24674: ST_TO_ADDR
// end ; x := personel [ i ] ;
24675: LD_ADDR_VAR 0 13
24679: PUSH
24680: LD_VAR 0 6
24684: PUSH
24685: LD_VAR 0 8
24689: ARRAY
24690: ST_TO_ADDR
// if x = - 1 then
24691: LD_VAR 0 13
24695: PUSH
24696: LD_INT 1
24698: NEG
24699: EQUAL
24700: IFFALSE 24909
// begin for j in f do
24702: LD_ADDR_VAR 0 9
24706: PUSH
24707: LD_VAR 0 12
24711: PUSH
24712: FOR_IN
24713: IFFALSE 24905
// repeat InitHc ;
24715: CALL_OW 19
// if GetBType ( j ) = b_barracks then
24719: LD_VAR 0 9
24723: PPUSH
24724: CALL_OW 266
24728: PUSH
24729: LD_INT 5
24731: EQUAL
24732: IFFALSE 24802
// begin if UnitsInside ( j ) < 3 then
24734: LD_VAR 0 9
24738: PPUSH
24739: CALL_OW 313
24743: PUSH
24744: LD_INT 3
24746: LESS
24747: IFFALSE 24783
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
24749: LD_INT 0
24751: PPUSH
24752: LD_INT 5
24754: PUSH
24755: LD_INT 8
24757: PUSH
24758: LD_INT 9
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_VAR 0 17
24770: ARRAY
24771: PPUSH
24772: LD_VAR 0 4
24776: PPUSH
24777: CALL_OW 380
24781: GO 24800
// PrepareHuman ( false , i , skill ) ;
24783: LD_INT 0
24785: PPUSH
24786: LD_VAR 0 8
24790: PPUSH
24791: LD_VAR 0 4
24795: PPUSH
24796: CALL_OW 380
// end else
24800: GO 24819
// PrepareHuman ( false , i , skill ) ;
24802: LD_INT 0
24804: PPUSH
24805: LD_VAR 0 8
24809: PPUSH
24810: LD_VAR 0 4
24814: PPUSH
24815: CALL_OW 380
// un := CreateHuman ;
24819: LD_ADDR_VAR 0 14
24823: PUSH
24824: CALL_OW 44
24828: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24829: LD_ADDR_VAR 0 7
24833: PUSH
24834: LD_VAR 0 7
24838: PPUSH
24839: LD_INT 1
24841: PPUSH
24842: LD_VAR 0 14
24846: PPUSH
24847: CALL_OW 2
24851: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
24852: LD_VAR 0 14
24856: PPUSH
24857: LD_VAR 0 9
24861: PPUSH
24862: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
24866: LD_VAR 0 9
24870: PPUSH
24871: CALL_OW 313
24875: PUSH
24876: LD_INT 6
24878: EQUAL
24879: PUSH
24880: LD_VAR 0 9
24884: PPUSH
24885: CALL_OW 266
24889: PUSH
24890: LD_INT 32
24892: PUSH
24893: LD_INT 31
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: IN
24900: OR
24901: IFFALSE 24715
24903: GO 24712
24905: POP
24906: POP
// end else
24907: GO 25289
// for j = 1 to x do
24909: LD_ADDR_VAR 0 9
24913: PUSH
24914: DOUBLE
24915: LD_INT 1
24917: DEC
24918: ST_TO_ADDR
24919: LD_VAR 0 13
24923: PUSH
24924: FOR_TO
24925: IFFALSE 25287
// begin InitHc ;
24927: CALL_OW 19
// if not f then
24931: LD_VAR 0 12
24935: NOT
24936: IFFALSE 25025
// begin PrepareHuman ( false , i , skill ) ;
24938: LD_INT 0
24940: PPUSH
24941: LD_VAR 0 8
24945: PPUSH
24946: LD_VAR 0 4
24950: PPUSH
24951: CALL_OW 380
// un := CreateHuman ;
24955: LD_ADDR_VAR 0 14
24959: PUSH
24960: CALL_OW 44
24964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
24965: LD_ADDR_VAR 0 7
24969: PUSH
24970: LD_VAR 0 7
24974: PPUSH
24975: LD_INT 1
24977: PPUSH
24978: LD_VAR 0 14
24982: PPUSH
24983: CALL_OW 2
24987: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
24988: LD_VAR 0 14
24992: PPUSH
24993: LD_VAR 0 1
24997: PPUSH
24998: CALL_OW 250
25002: PPUSH
25003: LD_VAR 0 1
25007: PPUSH
25008: CALL_OW 251
25012: PPUSH
25013: LD_INT 10
25015: PPUSH
25016: LD_INT 0
25018: PPUSH
25019: CALL_OW 50
// continue ;
25023: GO 24924
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25025: LD_VAR 0 12
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: PPUSH
25034: CALL_OW 313
25038: PUSH
25039: LD_VAR 0 12
25043: PUSH
25044: LD_INT 1
25046: ARRAY
25047: PPUSH
25048: CALL_OW 266
25052: PUSH
25053: LD_INT 32
25055: PUSH
25056: LD_INT 31
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: IN
25063: AND
25064: PUSH
25065: LD_VAR 0 12
25069: PUSH
25070: LD_INT 1
25072: ARRAY
25073: PPUSH
25074: CALL_OW 313
25078: PUSH
25079: LD_INT 6
25081: EQUAL
25082: OR
25083: IFFALSE 25103
// f := Delete ( f , 1 ) ;
25085: LD_ADDR_VAR 0 12
25089: PUSH
25090: LD_VAR 0 12
25094: PPUSH
25095: LD_INT 1
25097: PPUSH
25098: CALL_OW 3
25102: ST_TO_ADDR
// if not f then
25103: LD_VAR 0 12
25107: NOT
25108: IFFALSE 25126
// begin x := x + 2 ;
25110: LD_ADDR_VAR 0 13
25114: PUSH
25115: LD_VAR 0 13
25119: PUSH
25120: LD_INT 2
25122: PLUS
25123: ST_TO_ADDR
// continue ;
25124: GO 24924
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25126: LD_VAR 0 12
25130: PUSH
25131: LD_INT 1
25133: ARRAY
25134: PPUSH
25135: CALL_OW 266
25139: PUSH
25140: LD_INT 5
25142: EQUAL
25143: IFFALSE 25217
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25145: LD_VAR 0 12
25149: PUSH
25150: LD_INT 1
25152: ARRAY
25153: PPUSH
25154: CALL_OW 313
25158: PUSH
25159: LD_INT 3
25161: LESS
25162: IFFALSE 25198
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25164: LD_INT 0
25166: PPUSH
25167: LD_INT 5
25169: PUSH
25170: LD_INT 8
25172: PUSH
25173: LD_INT 9
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: PUSH
25181: LD_VAR 0 17
25185: ARRAY
25186: PPUSH
25187: LD_VAR 0 4
25191: PPUSH
25192: CALL_OW 380
25196: GO 25215
// PrepareHuman ( false , i , skill ) ;
25198: LD_INT 0
25200: PPUSH
25201: LD_VAR 0 8
25205: PPUSH
25206: LD_VAR 0 4
25210: PPUSH
25211: CALL_OW 380
// end else
25215: GO 25234
// PrepareHuman ( false , i , skill ) ;
25217: LD_INT 0
25219: PPUSH
25220: LD_VAR 0 8
25224: PPUSH
25225: LD_VAR 0 4
25229: PPUSH
25230: CALL_OW 380
// un := CreateHuman ;
25234: LD_ADDR_VAR 0 14
25238: PUSH
25239: CALL_OW 44
25243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25244: LD_ADDR_VAR 0 7
25248: PUSH
25249: LD_VAR 0 7
25253: PPUSH
25254: LD_INT 1
25256: PPUSH
25257: LD_VAR 0 14
25261: PPUSH
25262: CALL_OW 2
25266: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25267: LD_VAR 0 14
25271: PPUSH
25272: LD_VAR 0 12
25276: PUSH
25277: LD_INT 1
25279: ARRAY
25280: PPUSH
25281: CALL_OW 52
// end ;
25285: GO 24924
25287: POP
25288: POP
// end ;
25289: GO 24226
25291: POP
25292: POP
// result := result ^ buildings ;
25293: LD_ADDR_VAR 0 7
25297: PUSH
25298: LD_VAR 0 7
25302: PUSH
25303: LD_VAR 0 18
25307: ADD
25308: ST_TO_ADDR
// end else
25309: GO 25452
// begin for i = 1 to personel do
25311: LD_ADDR_VAR 0 8
25315: PUSH
25316: DOUBLE
25317: LD_INT 1
25319: DEC
25320: ST_TO_ADDR
25321: LD_VAR 0 6
25325: PUSH
25326: FOR_TO
25327: IFFALSE 25450
// begin if i > 4 then
25329: LD_VAR 0 8
25333: PUSH
25334: LD_INT 4
25336: GREATER
25337: IFFALSE 25341
// break ;
25339: GO 25450
// x := personel [ i ] ;
25341: LD_ADDR_VAR 0 13
25345: PUSH
25346: LD_VAR 0 6
25350: PUSH
25351: LD_VAR 0 8
25355: ARRAY
25356: ST_TO_ADDR
// if x = - 1 then
25357: LD_VAR 0 13
25361: PUSH
25362: LD_INT 1
25364: NEG
25365: EQUAL
25366: IFFALSE 25370
// continue ;
25368: GO 25326
// PrepareHuman ( false , i , skill ) ;
25370: LD_INT 0
25372: PPUSH
25373: LD_VAR 0 8
25377: PPUSH
25378: LD_VAR 0 4
25382: PPUSH
25383: CALL_OW 380
// un := CreateHuman ;
25387: LD_ADDR_VAR 0 14
25391: PUSH
25392: CALL_OW 44
25396: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25397: LD_VAR 0 14
25401: PPUSH
25402: LD_VAR 0 1
25406: PPUSH
25407: CALL_OW 250
25411: PPUSH
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 251
25421: PPUSH
25422: LD_INT 10
25424: PPUSH
25425: LD_INT 0
25427: PPUSH
25428: CALL_OW 50
// result := result ^ un ;
25432: LD_ADDR_VAR 0 7
25436: PUSH
25437: LD_VAR 0 7
25441: PUSH
25442: LD_VAR 0 14
25446: ADD
25447: ST_TO_ADDR
// end ;
25448: GO 25326
25450: POP
25451: POP
// end ; end ;
25452: LD_VAR 0 7
25456: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
25457: LD_INT 0
25459: PPUSH
25460: PPUSH
25461: PPUSH
25462: PPUSH
25463: PPUSH
25464: PPUSH
25465: PPUSH
25466: PPUSH
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
// result := false ;
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_INT 0
25482: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
25483: LD_VAR 0 1
25487: NOT
25488: PUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: CALL_OW 266
25498: PUSH
25499: LD_INT 32
25501: PUSH
25502: LD_INT 33
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: IN
25509: NOT
25510: OR
25511: IFFALSE 25515
// exit ;
25513: GO 26624
// nat := GetNation ( tower ) ;
25515: LD_ADDR_VAR 0 12
25519: PUSH
25520: LD_VAR 0 1
25524: PPUSH
25525: CALL_OW 248
25529: ST_TO_ADDR
// side := GetSide ( tower ) ;
25530: LD_ADDR_VAR 0 16
25534: PUSH
25535: LD_VAR 0 1
25539: PPUSH
25540: CALL_OW 255
25544: ST_TO_ADDR
// x := GetX ( tower ) ;
25545: LD_ADDR_VAR 0 10
25549: PUSH
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 250
25559: ST_TO_ADDR
// y := GetY ( tower ) ;
25560: LD_ADDR_VAR 0 11
25564: PUSH
25565: LD_VAR 0 1
25569: PPUSH
25570: CALL_OW 251
25574: ST_TO_ADDR
// if not x or not y then
25575: LD_VAR 0 10
25579: NOT
25580: PUSH
25581: LD_VAR 0 11
25585: NOT
25586: OR
25587: IFFALSE 25591
// exit ;
25589: GO 26624
// weapon := 0 ;
25591: LD_ADDR_VAR 0 18
25595: PUSH
25596: LD_INT 0
25598: ST_TO_ADDR
// fac_list := [ ] ;
25599: LD_ADDR_VAR 0 17
25603: PUSH
25604: EMPTY
25605: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
25606: LD_ADDR_VAR 0 6
25610: PUSH
25611: LD_VAR 0 1
25615: PPUSH
25616: CALL_OW 274
25620: PPUSH
25621: LD_VAR 0 2
25625: PPUSH
25626: LD_INT 0
25628: PPUSH
25629: CALL 23195 0 3
25633: PPUSH
25634: LD_INT 30
25636: PUSH
25637: LD_INT 3
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PPUSH
25644: CALL_OW 72
25648: ST_TO_ADDR
// if not factories then
25649: LD_VAR 0 6
25653: NOT
25654: IFFALSE 25658
// exit ;
25656: GO 26624
// for i in factories do
25658: LD_ADDR_VAR 0 8
25662: PUSH
25663: LD_VAR 0 6
25667: PUSH
25668: FOR_IN
25669: IFFALSE 25694
// fac_list := fac_list union AvailableWeaponList ( i ) ;
25671: LD_ADDR_VAR 0 17
25675: PUSH
25676: LD_VAR 0 17
25680: PUSH
25681: LD_VAR 0 8
25685: PPUSH
25686: CALL_OW 478
25690: UNION
25691: ST_TO_ADDR
25692: GO 25668
25694: POP
25695: POP
// if not fac_list then
25696: LD_VAR 0 17
25700: NOT
25701: IFFALSE 25705
// exit ;
25703: GO 26624
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
25705: LD_ADDR_VAR 0 5
25709: PUSH
25710: LD_INT 4
25712: PUSH
25713: LD_INT 5
25715: PUSH
25716: LD_INT 9
25718: PUSH
25719: LD_INT 10
25721: PUSH
25722: LD_INT 6
25724: PUSH
25725: LD_INT 7
25727: PUSH
25728: LD_INT 11
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 27
25742: PUSH
25743: LD_INT 28
25745: PUSH
25746: LD_INT 26
25748: PUSH
25749: LD_INT 30
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 43
25760: PUSH
25761: LD_INT 44
25763: PUSH
25764: LD_INT 46
25766: PUSH
25767: LD_INT 45
25769: PUSH
25770: LD_INT 47
25772: PUSH
25773: LD_INT 49
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: LIST
25788: PUSH
25789: LD_VAR 0 12
25793: ARRAY
25794: ST_TO_ADDR
// list := list isect fac_list ;
25795: LD_ADDR_VAR 0 5
25799: PUSH
25800: LD_VAR 0 5
25804: PUSH
25805: LD_VAR 0 17
25809: ISECT
25810: ST_TO_ADDR
// if not list then
25811: LD_VAR 0 5
25815: NOT
25816: IFFALSE 25820
// exit ;
25818: GO 26624
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
25820: LD_VAR 0 12
25824: PUSH
25825: LD_INT 3
25827: EQUAL
25828: PUSH
25829: LD_INT 49
25831: PUSH
25832: LD_VAR 0 5
25836: IN
25837: AND
25838: PUSH
25839: LD_INT 31
25841: PPUSH
25842: LD_VAR 0 16
25846: PPUSH
25847: CALL_OW 321
25851: PUSH
25852: LD_INT 2
25854: EQUAL
25855: AND
25856: IFFALSE 25916
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
25858: LD_INT 22
25860: PUSH
25861: LD_VAR 0 16
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 35
25872: PUSH
25873: LD_INT 49
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 91
25882: PUSH
25883: LD_VAR 0 1
25887: PUSH
25888: LD_INT 10
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: PPUSH
25901: CALL_OW 69
25905: NOT
25906: IFFALSE 25916
// weapon := ru_time_lapser ;
25908: LD_ADDR_VAR 0 18
25912: PUSH
25913: LD_INT 49
25915: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
25916: LD_VAR 0 12
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: LD_INT 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: IN
25931: PUSH
25932: LD_INT 11
25934: PUSH
25935: LD_VAR 0 5
25939: IN
25940: PUSH
25941: LD_INT 30
25943: PUSH
25944: LD_VAR 0 5
25948: IN
25949: OR
25950: AND
25951: PUSH
25952: LD_INT 6
25954: PPUSH
25955: LD_VAR 0 16
25959: PPUSH
25960: CALL_OW 321
25964: PUSH
25965: LD_INT 2
25967: EQUAL
25968: AND
25969: IFFALSE 26134
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
25971: LD_INT 22
25973: PUSH
25974: LD_VAR 0 16
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 35
25988: PUSH
25989: LD_INT 11
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 35
25998: PUSH
25999: LD_INT 30
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: LIST
26010: PUSH
26011: LD_INT 91
26013: PUSH
26014: LD_VAR 0 1
26018: PUSH
26019: LD_INT 18
26021: PUSH
26022: EMPTY
26023: LIST
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: PPUSH
26032: CALL_OW 69
26036: NOT
26037: PUSH
26038: LD_INT 22
26040: PUSH
26041: LD_VAR 0 16
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 2
26052: PUSH
26053: LD_INT 30
26055: PUSH
26056: LD_INT 32
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 30
26065: PUSH
26066: LD_INT 33
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: PUSH
26078: LD_INT 91
26080: PUSH
26081: LD_VAR 0 1
26085: PUSH
26086: LD_INT 12
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: LIST
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: PPUSH
26102: CALL_OW 69
26106: PUSH
26107: LD_INT 2
26109: GREATER
26110: AND
26111: IFFALSE 26134
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26113: LD_ADDR_VAR 0 18
26117: PUSH
26118: LD_INT 11
26120: PUSH
26121: LD_INT 30
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_VAR 0 12
26132: ARRAY
26133: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26134: LD_VAR 0 18
26138: NOT
26139: PUSH
26140: LD_INT 40
26142: PPUSH
26143: LD_VAR 0 16
26147: PPUSH
26148: CALL_OW 321
26152: PUSH
26153: LD_INT 2
26155: EQUAL
26156: AND
26157: PUSH
26158: LD_INT 7
26160: PUSH
26161: LD_VAR 0 5
26165: IN
26166: PUSH
26167: LD_INT 28
26169: PUSH
26170: LD_VAR 0 5
26174: IN
26175: OR
26176: PUSH
26177: LD_INT 45
26179: PUSH
26180: LD_VAR 0 5
26184: IN
26185: OR
26186: AND
26187: IFFALSE 26441
// begin hex := GetHexInfo ( x , y ) ;
26189: LD_ADDR_VAR 0 4
26193: PUSH
26194: LD_VAR 0 10
26198: PPUSH
26199: LD_VAR 0 11
26203: PPUSH
26204: CALL_OW 546
26208: ST_TO_ADDR
// if hex [ 1 ] then
26209: LD_VAR 0 4
26213: PUSH
26214: LD_INT 1
26216: ARRAY
26217: IFFALSE 26221
// exit ;
26219: GO 26624
// height := hex [ 2 ] ;
26221: LD_ADDR_VAR 0 15
26225: PUSH
26226: LD_VAR 0 4
26230: PUSH
26231: LD_INT 2
26233: ARRAY
26234: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26235: LD_ADDR_VAR 0 14
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: LD_INT 2
26245: PUSH
26246: LD_INT 3
26248: PUSH
26249: LD_INT 5
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: LIST
26256: LIST
26257: ST_TO_ADDR
// for i in tmp do
26258: LD_ADDR_VAR 0 8
26262: PUSH
26263: LD_VAR 0 14
26267: PUSH
26268: FOR_IN
26269: IFFALSE 26439
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26271: LD_ADDR_VAR 0 9
26275: PUSH
26276: LD_VAR 0 10
26280: PPUSH
26281: LD_VAR 0 8
26285: PPUSH
26286: LD_INT 5
26288: PPUSH
26289: CALL_OW 272
26293: PUSH
26294: LD_VAR 0 11
26298: PPUSH
26299: LD_VAR 0 8
26303: PPUSH
26304: LD_INT 5
26306: PPUSH
26307: CALL_OW 273
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26316: LD_VAR 0 9
26320: PUSH
26321: LD_INT 1
26323: ARRAY
26324: PPUSH
26325: LD_VAR 0 9
26329: PUSH
26330: LD_INT 2
26332: ARRAY
26333: PPUSH
26334: CALL_OW 488
26338: IFFALSE 26437
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26340: LD_ADDR_VAR 0 4
26344: PUSH
26345: LD_VAR 0 9
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 9
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 546
26367: ST_TO_ADDR
// if hex [ 1 ] then
26368: LD_VAR 0 4
26372: PUSH
26373: LD_INT 1
26375: ARRAY
26376: IFFALSE 26380
// continue ;
26378: GO 26268
// h := hex [ 2 ] ;
26380: LD_ADDR_VAR 0 13
26384: PUSH
26385: LD_VAR 0 4
26389: PUSH
26390: LD_INT 2
26392: ARRAY
26393: ST_TO_ADDR
// if h + 7 < height then
26394: LD_VAR 0 13
26398: PUSH
26399: LD_INT 7
26401: PLUS
26402: PUSH
26403: LD_VAR 0 15
26407: LESS
26408: IFFALSE 26437
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
26410: LD_ADDR_VAR 0 18
26414: PUSH
26415: LD_INT 7
26417: PUSH
26418: LD_INT 28
26420: PUSH
26421: LD_INT 45
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: PUSH
26429: LD_VAR 0 12
26433: ARRAY
26434: ST_TO_ADDR
// break ;
26435: GO 26439
// end ; end ; end ;
26437: GO 26268
26439: POP
26440: POP
// end ; if not weapon then
26441: LD_VAR 0 18
26445: NOT
26446: IFFALSE 26506
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
26448: LD_ADDR_VAR 0 5
26452: PUSH
26453: LD_VAR 0 5
26457: PUSH
26458: LD_INT 11
26460: PUSH
26461: LD_INT 30
26463: PUSH
26464: LD_INT 49
26466: PUSH
26467: EMPTY
26468: LIST
26469: LIST
26470: LIST
26471: DIFF
26472: ST_TO_ADDR
// if not list then
26473: LD_VAR 0 5
26477: NOT
26478: IFFALSE 26482
// exit ;
26480: GO 26624
// weapon := list [ rand ( 1 , list ) ] ;
26482: LD_ADDR_VAR 0 18
26486: PUSH
26487: LD_VAR 0 5
26491: PUSH
26492: LD_INT 1
26494: PPUSH
26495: LD_VAR 0 5
26499: PPUSH
26500: CALL_OW 12
26504: ARRAY
26505: ST_TO_ADDR
// end ; if weapon then
26506: LD_VAR 0 18
26510: IFFALSE 26624
// begin tmp := CostOfWeapon ( weapon ) ;
26512: LD_ADDR_VAR 0 14
26516: PUSH
26517: LD_VAR 0 18
26521: PPUSH
26522: CALL_OW 451
26526: ST_TO_ADDR
// j := GetBase ( tower ) ;
26527: LD_ADDR_VAR 0 9
26531: PUSH
26532: LD_VAR 0 1
26536: PPUSH
26537: CALL_OW 274
26541: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
26542: LD_VAR 0 9
26546: PPUSH
26547: LD_INT 1
26549: PPUSH
26550: CALL_OW 275
26554: PUSH
26555: LD_VAR 0 14
26559: PUSH
26560: LD_INT 1
26562: ARRAY
26563: GREATEREQUAL
26564: PUSH
26565: LD_VAR 0 9
26569: PPUSH
26570: LD_INT 2
26572: PPUSH
26573: CALL_OW 275
26577: PUSH
26578: LD_VAR 0 14
26582: PUSH
26583: LD_INT 2
26585: ARRAY
26586: GREATEREQUAL
26587: AND
26588: PUSH
26589: LD_VAR 0 9
26593: PPUSH
26594: LD_INT 3
26596: PPUSH
26597: CALL_OW 275
26601: PUSH
26602: LD_VAR 0 14
26606: PUSH
26607: LD_INT 3
26609: ARRAY
26610: GREATEREQUAL
26611: AND
26612: IFFALSE 26624
// result := weapon ;
26614: LD_ADDR_VAR 0 3
26618: PUSH
26619: LD_VAR 0 18
26623: ST_TO_ADDR
// end ; end ;
26624: LD_VAR 0 3
26628: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
26629: LD_INT 0
26631: PPUSH
26632: PPUSH
// result := true ;
26633: LD_ADDR_VAR 0 3
26637: PUSH
26638: LD_INT 1
26640: ST_TO_ADDR
// if array1 = array2 then
26641: LD_VAR 0 1
26645: PUSH
26646: LD_VAR 0 2
26650: EQUAL
26651: IFFALSE 26711
// begin for i = 1 to array1 do
26653: LD_ADDR_VAR 0 4
26657: PUSH
26658: DOUBLE
26659: LD_INT 1
26661: DEC
26662: ST_TO_ADDR
26663: LD_VAR 0 1
26667: PUSH
26668: FOR_TO
26669: IFFALSE 26707
// if array1 [ i ] <> array2 [ i ] then
26671: LD_VAR 0 1
26675: PUSH
26676: LD_VAR 0 4
26680: ARRAY
26681: PUSH
26682: LD_VAR 0 2
26686: PUSH
26687: LD_VAR 0 4
26691: ARRAY
26692: NONEQUAL
26693: IFFALSE 26705
// begin result := false ;
26695: LD_ADDR_VAR 0 3
26699: PUSH
26700: LD_INT 0
26702: ST_TO_ADDR
// break ;
26703: GO 26707
// end ;
26705: GO 26668
26707: POP
26708: POP
// end else
26709: GO 26719
// result := false ;
26711: LD_ADDR_VAR 0 3
26715: PUSH
26716: LD_INT 0
26718: ST_TO_ADDR
// end ;
26719: LD_VAR 0 3
26723: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
26724: LD_INT 0
26726: PPUSH
26727: PPUSH
// if not array1 or not array2 then
26728: LD_VAR 0 1
26732: NOT
26733: PUSH
26734: LD_VAR 0 2
26738: NOT
26739: OR
26740: IFFALSE 26744
// exit ;
26742: GO 26808
// result := true ;
26744: LD_ADDR_VAR 0 3
26748: PUSH
26749: LD_INT 1
26751: ST_TO_ADDR
// for i = 1 to array1 do
26752: LD_ADDR_VAR 0 4
26756: PUSH
26757: DOUBLE
26758: LD_INT 1
26760: DEC
26761: ST_TO_ADDR
26762: LD_VAR 0 1
26766: PUSH
26767: FOR_TO
26768: IFFALSE 26806
// if array1 [ i ] <> array2 [ i ] then
26770: LD_VAR 0 1
26774: PUSH
26775: LD_VAR 0 4
26779: ARRAY
26780: PUSH
26781: LD_VAR 0 2
26785: PUSH
26786: LD_VAR 0 4
26790: ARRAY
26791: NONEQUAL
26792: IFFALSE 26804
// begin result := false ;
26794: LD_ADDR_VAR 0 3
26798: PUSH
26799: LD_INT 0
26801: ST_TO_ADDR
// break ;
26802: GO 26806
// end ;
26804: GO 26767
26806: POP
26807: POP
// end ;
26808: LD_VAR 0 3
26812: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
26813: LD_INT 0
26815: PPUSH
26816: PPUSH
26817: PPUSH
// pom := GetBase ( fac ) ;
26818: LD_ADDR_VAR 0 5
26822: PUSH
26823: LD_VAR 0 1
26827: PPUSH
26828: CALL_OW 274
26832: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
26833: LD_ADDR_VAR 0 4
26837: PUSH
26838: LD_VAR 0 2
26842: PUSH
26843: LD_INT 1
26845: ARRAY
26846: PPUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_INT 2
26854: ARRAY
26855: PPUSH
26856: LD_VAR 0 2
26860: PUSH
26861: LD_INT 3
26863: ARRAY
26864: PPUSH
26865: LD_VAR 0 2
26869: PUSH
26870: LD_INT 4
26872: ARRAY
26873: PPUSH
26874: CALL_OW 449
26878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
26879: LD_ADDR_VAR 0 3
26883: PUSH
26884: LD_VAR 0 5
26888: PPUSH
26889: LD_INT 1
26891: PPUSH
26892: CALL_OW 275
26896: PUSH
26897: LD_VAR 0 4
26901: PUSH
26902: LD_INT 1
26904: ARRAY
26905: GREATEREQUAL
26906: PUSH
26907: LD_VAR 0 5
26911: PPUSH
26912: LD_INT 2
26914: PPUSH
26915: CALL_OW 275
26919: PUSH
26920: LD_VAR 0 4
26924: PUSH
26925: LD_INT 2
26927: ARRAY
26928: GREATEREQUAL
26929: AND
26930: PUSH
26931: LD_VAR 0 5
26935: PPUSH
26936: LD_INT 3
26938: PPUSH
26939: CALL_OW 275
26943: PUSH
26944: LD_VAR 0 4
26948: PUSH
26949: LD_INT 3
26951: ARRAY
26952: GREATEREQUAL
26953: AND
26954: ST_TO_ADDR
// end ;
26955: LD_VAR 0 3
26959: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
26960: LD_INT 0
26962: PPUSH
26963: PPUSH
26964: PPUSH
26965: PPUSH
// pom := GetBase ( building ) ;
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_VAR 0 1
26975: PPUSH
26976: CALL_OW 274
26980: ST_TO_ADDR
// if not pom then
26981: LD_VAR 0 3
26985: NOT
26986: IFFALSE 26990
// exit ;
26988: GO 27160
// btype := GetBType ( building ) ;
26990: LD_ADDR_VAR 0 5
26994: PUSH
26995: LD_VAR 0 1
26999: PPUSH
27000: CALL_OW 266
27004: ST_TO_ADDR
// if btype = b_armoury then
27005: LD_VAR 0 5
27009: PUSH
27010: LD_INT 4
27012: EQUAL
27013: IFFALSE 27023
// btype := b_barracks ;
27015: LD_ADDR_VAR 0 5
27019: PUSH
27020: LD_INT 5
27022: ST_TO_ADDR
// if btype = b_depot then
27023: LD_VAR 0 5
27027: PUSH
27028: LD_INT 0
27030: EQUAL
27031: IFFALSE 27041
// btype := b_warehouse ;
27033: LD_ADDR_VAR 0 5
27037: PUSH
27038: LD_INT 1
27040: ST_TO_ADDR
// if btype = b_workshop then
27041: LD_VAR 0 5
27045: PUSH
27046: LD_INT 2
27048: EQUAL
27049: IFFALSE 27059
// btype := b_factory ;
27051: LD_ADDR_VAR 0 5
27055: PUSH
27056: LD_INT 3
27058: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27059: LD_ADDR_VAR 0 4
27063: PUSH
27064: LD_VAR 0 5
27068: PPUSH
27069: LD_VAR 0 1
27073: PPUSH
27074: CALL_OW 248
27078: PPUSH
27079: CALL_OW 450
27083: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27084: LD_ADDR_VAR 0 2
27088: PUSH
27089: LD_VAR 0 3
27093: PPUSH
27094: LD_INT 1
27096: PPUSH
27097: CALL_OW 275
27101: PUSH
27102: LD_VAR 0 4
27106: PUSH
27107: LD_INT 1
27109: ARRAY
27110: GREATEREQUAL
27111: PUSH
27112: LD_VAR 0 3
27116: PPUSH
27117: LD_INT 2
27119: PPUSH
27120: CALL_OW 275
27124: PUSH
27125: LD_VAR 0 4
27129: PUSH
27130: LD_INT 2
27132: ARRAY
27133: GREATEREQUAL
27134: AND
27135: PUSH
27136: LD_VAR 0 3
27140: PPUSH
27141: LD_INT 3
27143: PPUSH
27144: CALL_OW 275
27148: PUSH
27149: LD_VAR 0 4
27153: PUSH
27154: LD_INT 3
27156: ARRAY
27157: GREATEREQUAL
27158: AND
27159: ST_TO_ADDR
// end ;
27160: LD_VAR 0 2
27164: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27165: LD_INT 0
27167: PPUSH
27168: PPUSH
27169: PPUSH
// pom := GetBase ( building ) ;
27170: LD_ADDR_VAR 0 4
27174: PUSH
27175: LD_VAR 0 1
27179: PPUSH
27180: CALL_OW 274
27184: ST_TO_ADDR
// if not pom then
27185: LD_VAR 0 4
27189: NOT
27190: IFFALSE 27194
// exit ;
27192: GO 27295
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27194: LD_ADDR_VAR 0 5
27198: PUSH
27199: LD_VAR 0 2
27203: PPUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 248
27213: PPUSH
27214: CALL_OW 450
27218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27219: LD_ADDR_VAR 0 3
27223: PUSH
27224: LD_VAR 0 4
27228: PPUSH
27229: LD_INT 1
27231: PPUSH
27232: CALL_OW 275
27236: PUSH
27237: LD_VAR 0 5
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: GREATEREQUAL
27246: PUSH
27247: LD_VAR 0 4
27251: PPUSH
27252: LD_INT 2
27254: PPUSH
27255: CALL_OW 275
27259: PUSH
27260: LD_VAR 0 5
27264: PUSH
27265: LD_INT 2
27267: ARRAY
27268: GREATEREQUAL
27269: AND
27270: PUSH
27271: LD_VAR 0 4
27275: PPUSH
27276: LD_INT 3
27278: PPUSH
27279: CALL_OW 275
27283: PUSH
27284: LD_VAR 0 5
27288: PUSH
27289: LD_INT 3
27291: ARRAY
27292: GREATEREQUAL
27293: AND
27294: ST_TO_ADDR
// end ;
27295: LD_VAR 0 3
27299: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
// result := false ;
27313: LD_ADDR_VAR 0 8
27317: PUSH
27318: LD_INT 0
27320: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
27321: LD_VAR 0 5
27325: NOT
27326: PUSH
27327: LD_VAR 0 1
27331: NOT
27332: OR
27333: PUSH
27334: LD_VAR 0 2
27338: NOT
27339: OR
27340: PUSH
27341: LD_VAR 0 3
27345: NOT
27346: OR
27347: IFFALSE 27351
// exit ;
27349: GO 28165
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
27351: LD_ADDR_VAR 0 14
27355: PUSH
27356: LD_VAR 0 1
27360: PPUSH
27361: LD_VAR 0 2
27365: PPUSH
27366: LD_VAR 0 3
27370: PPUSH
27371: LD_VAR 0 4
27375: PPUSH
27376: LD_VAR 0 5
27380: PUSH
27381: LD_INT 1
27383: ARRAY
27384: PPUSH
27385: CALL_OW 248
27389: PPUSH
27390: LD_INT 0
27392: PPUSH
27393: CALL 29418 0 6
27397: ST_TO_ADDR
// if not hexes then
27398: LD_VAR 0 14
27402: NOT
27403: IFFALSE 27407
// exit ;
27405: GO 28165
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27407: LD_ADDR_VAR 0 17
27411: PUSH
27412: LD_VAR 0 5
27416: PPUSH
27417: LD_INT 22
27419: PUSH
27420: LD_VAR 0 13
27424: PPUSH
27425: CALL_OW 255
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 2
27436: PUSH
27437: LD_INT 30
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 30
27449: PUSH
27450: LD_INT 1
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: CALL_OW 72
27470: ST_TO_ADDR
// for i = 1 to hexes do
27471: LD_ADDR_VAR 0 9
27475: PUSH
27476: DOUBLE
27477: LD_INT 1
27479: DEC
27480: ST_TO_ADDR
27481: LD_VAR 0 14
27485: PUSH
27486: FOR_TO
27487: IFFALSE 28163
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27489: LD_ADDR_VAR 0 13
27493: PUSH
27494: LD_VAR 0 14
27498: PUSH
27499: LD_VAR 0 9
27503: ARRAY
27504: PUSH
27505: LD_INT 1
27507: ARRAY
27508: PPUSH
27509: LD_VAR 0 14
27513: PUSH
27514: LD_VAR 0 9
27518: ARRAY
27519: PUSH
27520: LD_INT 2
27522: ARRAY
27523: PPUSH
27524: CALL_OW 428
27528: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
27529: LD_VAR 0 14
27533: PUSH
27534: LD_VAR 0 9
27538: ARRAY
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PPUSH
27544: LD_VAR 0 14
27548: PUSH
27549: LD_VAR 0 9
27553: ARRAY
27554: PUSH
27555: LD_INT 2
27557: ARRAY
27558: PPUSH
27559: CALL_OW 351
27563: PUSH
27564: LD_VAR 0 14
27568: PUSH
27569: LD_VAR 0 9
27573: ARRAY
27574: PUSH
27575: LD_INT 1
27577: ARRAY
27578: PPUSH
27579: LD_VAR 0 14
27583: PUSH
27584: LD_VAR 0 9
27588: ARRAY
27589: PUSH
27590: LD_INT 2
27592: ARRAY
27593: PPUSH
27594: CALL_OW 488
27598: NOT
27599: OR
27600: PUSH
27601: LD_VAR 0 13
27605: PPUSH
27606: CALL_OW 247
27610: PUSH
27611: LD_INT 3
27613: EQUAL
27614: OR
27615: IFFALSE 27621
// exit ;
27617: POP
27618: POP
27619: GO 28165
// if not tmp then
27621: LD_VAR 0 13
27625: NOT
27626: IFFALSE 27630
// continue ;
27628: GO 27486
// result := true ;
27630: LD_ADDR_VAR 0 8
27634: PUSH
27635: LD_INT 1
27637: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
27638: LD_VAR 0 6
27642: PUSH
27643: LD_VAR 0 13
27647: PPUSH
27648: CALL_OW 247
27652: PUSH
27653: LD_INT 2
27655: EQUAL
27656: AND
27657: PUSH
27658: LD_VAR 0 13
27662: PPUSH
27663: CALL_OW 263
27667: PUSH
27668: LD_INT 1
27670: EQUAL
27671: AND
27672: IFFALSE 27836
// begin if IsDrivenBy ( tmp ) then
27674: LD_VAR 0 13
27678: PPUSH
27679: CALL_OW 311
27683: IFFALSE 27687
// continue ;
27685: GO 27486
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
27687: LD_VAR 0 6
27691: PPUSH
27692: LD_INT 3
27694: PUSH
27695: LD_INT 60
27697: PUSH
27698: EMPTY
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 3
27707: PUSH
27708: LD_INT 55
27710: PUSH
27711: EMPTY
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PPUSH
27722: CALL_OW 72
27726: IFFALSE 27834
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
27728: LD_ADDR_VAR 0 18
27732: PUSH
27733: LD_VAR 0 6
27737: PPUSH
27738: LD_INT 3
27740: PUSH
27741: LD_INT 60
27743: PUSH
27744: EMPTY
27745: LIST
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 3
27753: PUSH
27754: LD_INT 55
27756: PUSH
27757: EMPTY
27758: LIST
27759: PUSH
27760: EMPTY
27761: LIST
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PPUSH
27768: CALL_OW 72
27772: PUSH
27773: LD_INT 1
27775: ARRAY
27776: ST_TO_ADDR
// if IsInUnit ( driver ) then
27777: LD_VAR 0 18
27781: PPUSH
27782: CALL_OW 310
27786: IFFALSE 27797
// ComExit ( driver ) ;
27788: LD_VAR 0 18
27792: PPUSH
27793: CALL 53199 0 1
// AddComEnterUnit ( driver , tmp ) ;
27797: LD_VAR 0 18
27801: PPUSH
27802: LD_VAR 0 13
27806: PPUSH
27807: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
27811: LD_VAR 0 18
27815: PPUSH
27816: LD_VAR 0 7
27820: PPUSH
27821: CALL_OW 173
// AddComExitVehicle ( driver ) ;
27825: LD_VAR 0 18
27829: PPUSH
27830: CALL_OW 181
// end ; continue ;
27834: GO 27486
// end ; if not cleaners or not tmp in cleaners then
27836: LD_VAR 0 6
27840: NOT
27841: PUSH
27842: LD_VAR 0 13
27846: PUSH
27847: LD_VAR 0 6
27851: IN
27852: NOT
27853: OR
27854: IFFALSE 28161
// begin if dep then
27856: LD_VAR 0 17
27860: IFFALSE 27996
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
27862: LD_ADDR_VAR 0 16
27866: PUSH
27867: LD_VAR 0 17
27871: PUSH
27872: LD_INT 1
27874: ARRAY
27875: PPUSH
27876: CALL_OW 250
27880: PPUSH
27881: LD_VAR 0 17
27885: PUSH
27886: LD_INT 1
27888: ARRAY
27889: PPUSH
27890: CALL_OW 254
27894: PPUSH
27895: LD_INT 5
27897: PPUSH
27898: CALL_OW 272
27902: PUSH
27903: LD_VAR 0 17
27907: PUSH
27908: LD_INT 1
27910: ARRAY
27911: PPUSH
27912: CALL_OW 251
27916: PPUSH
27917: LD_VAR 0 17
27921: PUSH
27922: LD_INT 1
27924: ARRAY
27925: PPUSH
27926: CALL_OW 254
27930: PPUSH
27931: LD_INT 5
27933: PPUSH
27934: CALL_OW 273
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
27943: LD_VAR 0 16
27947: PUSH
27948: LD_INT 1
27950: ARRAY
27951: PPUSH
27952: LD_VAR 0 16
27956: PUSH
27957: LD_INT 2
27959: ARRAY
27960: PPUSH
27961: CALL_OW 488
27965: IFFALSE 27996
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
27967: LD_VAR 0 13
27971: PPUSH
27972: LD_VAR 0 16
27976: PUSH
27977: LD_INT 1
27979: ARRAY
27980: PPUSH
27981: LD_VAR 0 16
27985: PUSH
27986: LD_INT 2
27988: ARRAY
27989: PPUSH
27990: CALL_OW 111
// continue ;
27994: GO 27486
// end ; end ; r := GetDir ( tmp ) ;
27996: LD_ADDR_VAR 0 15
28000: PUSH
28001: LD_VAR 0 13
28005: PPUSH
28006: CALL_OW 254
28010: ST_TO_ADDR
// if r = 5 then
28011: LD_VAR 0 15
28015: PUSH
28016: LD_INT 5
28018: EQUAL
28019: IFFALSE 28029
// r := 0 ;
28021: LD_ADDR_VAR 0 15
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
// for j = r to 5 do
28029: LD_ADDR_VAR 0 10
28033: PUSH
28034: DOUBLE
28035: LD_VAR 0 15
28039: DEC
28040: ST_TO_ADDR
28041: LD_INT 5
28043: PUSH
28044: FOR_TO
28045: IFFALSE 28159
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28047: LD_ADDR_VAR 0 11
28051: PUSH
28052: LD_VAR 0 13
28056: PPUSH
28057: CALL_OW 250
28061: PPUSH
28062: LD_VAR 0 10
28066: PPUSH
28067: LD_INT 2
28069: PPUSH
28070: CALL_OW 272
28074: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28075: LD_ADDR_VAR 0 12
28079: PUSH
28080: LD_VAR 0 13
28084: PPUSH
28085: CALL_OW 251
28089: PPUSH
28090: LD_VAR 0 10
28094: PPUSH
28095: LD_INT 2
28097: PPUSH
28098: CALL_OW 273
28102: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28103: LD_VAR 0 11
28107: PPUSH
28108: LD_VAR 0 12
28112: PPUSH
28113: CALL_OW 488
28117: PUSH
28118: LD_VAR 0 11
28122: PPUSH
28123: LD_VAR 0 12
28127: PPUSH
28128: CALL_OW 428
28132: NOT
28133: AND
28134: IFFALSE 28157
// begin ComMoveXY ( tmp , _x , _y ) ;
28136: LD_VAR 0 13
28140: PPUSH
28141: LD_VAR 0 11
28145: PPUSH
28146: LD_VAR 0 12
28150: PPUSH
28151: CALL_OW 111
// break ;
28155: GO 28159
// end ; end ;
28157: GO 28044
28159: POP
28160: POP
// end ; end ;
28161: GO 27486
28163: POP
28164: POP
// end ;
28165: LD_VAR 0 8
28169: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28170: LD_INT 0
28172: PPUSH
// result := true ;
28173: LD_ADDR_VAR 0 3
28177: PUSH
28178: LD_INT 1
28180: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28181: LD_VAR 0 2
28185: PUSH
28186: LD_INT 24
28188: DOUBLE
28189: EQUAL
28190: IFTRUE 28200
28192: LD_INT 33
28194: DOUBLE
28195: EQUAL
28196: IFTRUE 28200
28198: GO 28225
28200: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28201: LD_ADDR_VAR 0 3
28205: PUSH
28206: LD_INT 32
28208: PPUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: CALL_OW 321
28218: PUSH
28219: LD_INT 2
28221: EQUAL
28222: ST_TO_ADDR
28223: GO 28541
28225: LD_INT 20
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28258
28233: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28234: LD_ADDR_VAR 0 3
28238: PUSH
28239: LD_INT 6
28241: PPUSH
28242: LD_VAR 0 1
28246: PPUSH
28247: CALL_OW 321
28251: PUSH
28252: LD_INT 2
28254: EQUAL
28255: ST_TO_ADDR
28256: GO 28541
28258: LD_INT 22
28260: DOUBLE
28261: EQUAL
28262: IFTRUE 28272
28264: LD_INT 36
28266: DOUBLE
28267: EQUAL
28268: IFTRUE 28272
28270: GO 28297
28272: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
28273: LD_ADDR_VAR 0 3
28277: PUSH
28278: LD_INT 15
28280: PPUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 321
28290: PUSH
28291: LD_INT 2
28293: EQUAL
28294: ST_TO_ADDR
28295: GO 28541
28297: LD_INT 30
28299: DOUBLE
28300: EQUAL
28301: IFTRUE 28305
28303: GO 28330
28305: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
28306: LD_ADDR_VAR 0 3
28310: PUSH
28311: LD_INT 20
28313: PPUSH
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 321
28323: PUSH
28324: LD_INT 2
28326: EQUAL
28327: ST_TO_ADDR
28328: GO 28541
28330: LD_INT 28
28332: DOUBLE
28333: EQUAL
28334: IFTRUE 28344
28336: LD_INT 21
28338: DOUBLE
28339: EQUAL
28340: IFTRUE 28344
28342: GO 28369
28344: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_INT 21
28352: PPUSH
28353: LD_VAR 0 1
28357: PPUSH
28358: CALL_OW 321
28362: PUSH
28363: LD_INT 2
28365: EQUAL
28366: ST_TO_ADDR
28367: GO 28541
28369: LD_INT 16
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28402
28377: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_INT 84
28385: PPUSH
28386: LD_VAR 0 1
28390: PPUSH
28391: CALL_OW 321
28395: PUSH
28396: LD_INT 2
28398: EQUAL
28399: ST_TO_ADDR
28400: GO 28541
28402: LD_INT 19
28404: DOUBLE
28405: EQUAL
28406: IFTRUE 28416
28408: LD_INT 23
28410: DOUBLE
28411: EQUAL
28412: IFTRUE 28416
28414: GO 28441
28416: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
28417: LD_ADDR_VAR 0 3
28421: PUSH
28422: LD_INT 83
28424: PPUSH
28425: LD_VAR 0 1
28429: PPUSH
28430: CALL_OW 321
28434: PUSH
28435: LD_INT 2
28437: EQUAL
28438: ST_TO_ADDR
28439: GO 28541
28441: LD_INT 17
28443: DOUBLE
28444: EQUAL
28445: IFTRUE 28449
28447: GO 28474
28449: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
28450: LD_ADDR_VAR 0 3
28454: PUSH
28455: LD_INT 39
28457: PPUSH
28458: LD_VAR 0 1
28462: PPUSH
28463: CALL_OW 321
28467: PUSH
28468: LD_INT 2
28470: EQUAL
28471: ST_TO_ADDR
28472: GO 28541
28474: LD_INT 18
28476: DOUBLE
28477: EQUAL
28478: IFTRUE 28482
28480: GO 28507
28482: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
28483: LD_ADDR_VAR 0 3
28487: PUSH
28488: LD_INT 40
28490: PPUSH
28491: LD_VAR 0 1
28495: PPUSH
28496: CALL_OW 321
28500: PUSH
28501: LD_INT 2
28503: EQUAL
28504: ST_TO_ADDR
28505: GO 28541
28507: LD_INT 27
28509: DOUBLE
28510: EQUAL
28511: IFTRUE 28515
28513: GO 28540
28515: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
28516: LD_ADDR_VAR 0 3
28520: PUSH
28521: LD_INT 35
28523: PPUSH
28524: LD_VAR 0 1
28528: PPUSH
28529: CALL_OW 321
28533: PUSH
28534: LD_INT 2
28536: EQUAL
28537: ST_TO_ADDR
28538: GO 28541
28540: POP
// end ;
28541: LD_VAR 0 3
28545: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
28546: LD_INT 0
28548: PPUSH
28549: PPUSH
28550: PPUSH
28551: PPUSH
28552: PPUSH
28553: PPUSH
28554: PPUSH
28555: PPUSH
28556: PPUSH
28557: PPUSH
28558: PPUSH
// result := false ;
28559: LD_ADDR_VAR 0 6
28563: PUSH
28564: LD_INT 0
28566: ST_TO_ADDR
// if btype = b_depot then
28567: LD_VAR 0 2
28571: PUSH
28572: LD_INT 0
28574: EQUAL
28575: IFFALSE 28587
// begin result := true ;
28577: LD_ADDR_VAR 0 6
28581: PUSH
28582: LD_INT 1
28584: ST_TO_ADDR
// exit ;
28585: GO 29413
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28587: LD_VAR 0 1
28591: NOT
28592: PUSH
28593: LD_VAR 0 1
28597: PPUSH
28598: CALL_OW 266
28602: PUSH
28603: LD_INT 0
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: IN
28613: NOT
28614: OR
28615: PUSH
28616: LD_VAR 0 2
28620: NOT
28621: OR
28622: PUSH
28623: LD_VAR 0 5
28627: PUSH
28628: LD_INT 0
28630: PUSH
28631: LD_INT 1
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 3
28639: PUSH
28640: LD_INT 4
28642: PUSH
28643: LD_INT 5
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: IN
28654: NOT
28655: OR
28656: PUSH
28657: LD_VAR 0 3
28661: PPUSH
28662: LD_VAR 0 4
28666: PPUSH
28667: CALL_OW 488
28671: NOT
28672: OR
28673: IFFALSE 28677
// exit ;
28675: GO 29413
// side := GetSide ( depot ) ;
28677: LD_ADDR_VAR 0 9
28681: PUSH
28682: LD_VAR 0 1
28686: PPUSH
28687: CALL_OW 255
28691: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
28692: LD_VAR 0 9
28696: PPUSH
28697: LD_VAR 0 2
28701: PPUSH
28702: CALL 28170 0 2
28706: NOT
28707: IFFALSE 28711
// exit ;
28709: GO 29413
// pom := GetBase ( depot ) ;
28711: LD_ADDR_VAR 0 10
28715: PUSH
28716: LD_VAR 0 1
28720: PPUSH
28721: CALL_OW 274
28725: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28726: LD_ADDR_VAR 0 11
28730: PUSH
28731: LD_VAR 0 2
28735: PPUSH
28736: LD_VAR 0 1
28740: PPUSH
28741: CALL_OW 248
28745: PPUSH
28746: CALL_OW 450
28750: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28751: LD_VAR 0 10
28755: PPUSH
28756: LD_INT 1
28758: PPUSH
28759: CALL_OW 275
28763: PUSH
28764: LD_VAR 0 11
28768: PUSH
28769: LD_INT 1
28771: ARRAY
28772: GREATEREQUAL
28773: PUSH
28774: LD_VAR 0 10
28778: PPUSH
28779: LD_INT 2
28781: PPUSH
28782: CALL_OW 275
28786: PUSH
28787: LD_VAR 0 11
28791: PUSH
28792: LD_INT 2
28794: ARRAY
28795: GREATEREQUAL
28796: AND
28797: PUSH
28798: LD_VAR 0 10
28802: PPUSH
28803: LD_INT 3
28805: PPUSH
28806: CALL_OW 275
28810: PUSH
28811: LD_VAR 0 11
28815: PUSH
28816: LD_INT 3
28818: ARRAY
28819: GREATEREQUAL
28820: AND
28821: NOT
28822: IFFALSE 28826
// exit ;
28824: GO 29413
// if GetBType ( depot ) = b_depot then
28826: LD_VAR 0 1
28830: PPUSH
28831: CALL_OW 266
28835: PUSH
28836: LD_INT 0
28838: EQUAL
28839: IFFALSE 28851
// dist := 28 else
28841: LD_ADDR_VAR 0 14
28845: PUSH
28846: LD_INT 28
28848: ST_TO_ADDR
28849: GO 28859
// dist := 36 ;
28851: LD_ADDR_VAR 0 14
28855: PUSH
28856: LD_INT 36
28858: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28859: LD_VAR 0 1
28863: PPUSH
28864: LD_VAR 0 3
28868: PPUSH
28869: LD_VAR 0 4
28873: PPUSH
28874: CALL_OW 297
28878: PUSH
28879: LD_VAR 0 14
28883: GREATER
28884: IFFALSE 28888
// exit ;
28886: GO 29413
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28888: LD_ADDR_VAR 0 12
28892: PUSH
28893: LD_VAR 0 2
28897: PPUSH
28898: LD_VAR 0 3
28902: PPUSH
28903: LD_VAR 0 4
28907: PPUSH
28908: LD_VAR 0 5
28912: PPUSH
28913: LD_VAR 0 1
28917: PPUSH
28918: CALL_OW 248
28922: PPUSH
28923: LD_INT 0
28925: PPUSH
28926: CALL 29418 0 6
28930: ST_TO_ADDR
// if not hexes then
28931: LD_VAR 0 12
28935: NOT
28936: IFFALSE 28940
// exit ;
28938: GO 29413
// hex := GetHexInfo ( x , y ) ;
28940: LD_ADDR_VAR 0 15
28944: PUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: LD_VAR 0 4
28954: PPUSH
28955: CALL_OW 546
28959: ST_TO_ADDR
// if hex [ 1 ] then
28960: LD_VAR 0 15
28964: PUSH
28965: LD_INT 1
28967: ARRAY
28968: IFFALSE 28972
// exit ;
28970: GO 29413
// height := hex [ 2 ] ;
28972: LD_ADDR_VAR 0 13
28976: PUSH
28977: LD_VAR 0 15
28981: PUSH
28982: LD_INT 2
28984: ARRAY
28985: ST_TO_ADDR
// for i = 1 to hexes do
28986: LD_ADDR_VAR 0 7
28990: PUSH
28991: DOUBLE
28992: LD_INT 1
28994: DEC
28995: ST_TO_ADDR
28996: LD_VAR 0 12
29000: PUSH
29001: FOR_TO
29002: IFFALSE 29332
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29004: LD_VAR 0 12
29008: PUSH
29009: LD_VAR 0 7
29013: ARRAY
29014: PUSH
29015: LD_INT 1
29017: ARRAY
29018: PPUSH
29019: LD_VAR 0 12
29023: PUSH
29024: LD_VAR 0 7
29028: ARRAY
29029: PUSH
29030: LD_INT 2
29032: ARRAY
29033: PPUSH
29034: CALL_OW 488
29038: NOT
29039: PUSH
29040: LD_VAR 0 12
29044: PUSH
29045: LD_VAR 0 7
29049: ARRAY
29050: PUSH
29051: LD_INT 1
29053: ARRAY
29054: PPUSH
29055: LD_VAR 0 12
29059: PUSH
29060: LD_VAR 0 7
29064: ARRAY
29065: PUSH
29066: LD_INT 2
29068: ARRAY
29069: PPUSH
29070: CALL_OW 428
29074: PUSH
29075: LD_INT 0
29077: GREATER
29078: OR
29079: PUSH
29080: LD_VAR 0 12
29084: PUSH
29085: LD_VAR 0 7
29089: ARRAY
29090: PUSH
29091: LD_INT 1
29093: ARRAY
29094: PPUSH
29095: LD_VAR 0 12
29099: PUSH
29100: LD_VAR 0 7
29104: ARRAY
29105: PUSH
29106: LD_INT 2
29108: ARRAY
29109: PPUSH
29110: CALL_OW 351
29114: OR
29115: IFFALSE 29121
// exit ;
29117: POP
29118: POP
29119: GO 29413
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29121: LD_ADDR_VAR 0 8
29125: PUSH
29126: LD_VAR 0 12
29130: PUSH
29131: LD_VAR 0 7
29135: ARRAY
29136: PUSH
29137: LD_INT 1
29139: ARRAY
29140: PPUSH
29141: LD_VAR 0 12
29145: PUSH
29146: LD_VAR 0 7
29150: ARRAY
29151: PUSH
29152: LD_INT 2
29154: ARRAY
29155: PPUSH
29156: CALL_OW 546
29160: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29161: LD_VAR 0 8
29165: PUSH
29166: LD_INT 1
29168: ARRAY
29169: PUSH
29170: LD_VAR 0 8
29174: PUSH
29175: LD_INT 2
29177: ARRAY
29178: PUSH
29179: LD_VAR 0 13
29183: PUSH
29184: LD_INT 2
29186: PLUS
29187: GREATER
29188: OR
29189: PUSH
29190: LD_VAR 0 8
29194: PUSH
29195: LD_INT 2
29197: ARRAY
29198: PUSH
29199: LD_VAR 0 13
29203: PUSH
29204: LD_INT 2
29206: MINUS
29207: LESS
29208: OR
29209: PUSH
29210: LD_VAR 0 8
29214: PUSH
29215: LD_INT 3
29217: ARRAY
29218: PUSH
29219: LD_INT 0
29221: PUSH
29222: LD_INT 8
29224: PUSH
29225: LD_INT 9
29227: PUSH
29228: LD_INT 10
29230: PUSH
29231: LD_INT 11
29233: PUSH
29234: LD_INT 12
29236: PUSH
29237: LD_INT 13
29239: PUSH
29240: LD_INT 16
29242: PUSH
29243: LD_INT 17
29245: PUSH
29246: LD_INT 18
29248: PUSH
29249: LD_INT 19
29251: PUSH
29252: LD_INT 20
29254: PUSH
29255: LD_INT 21
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: IN
29273: NOT
29274: OR
29275: PUSH
29276: LD_VAR 0 8
29280: PUSH
29281: LD_INT 5
29283: ARRAY
29284: NOT
29285: OR
29286: PUSH
29287: LD_VAR 0 8
29291: PUSH
29292: LD_INT 6
29294: ARRAY
29295: PUSH
29296: LD_INT 1
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 7
29304: PUSH
29305: LD_INT 9
29307: PUSH
29308: LD_INT 10
29310: PUSH
29311: LD_INT 11
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: IN
29322: NOT
29323: OR
29324: IFFALSE 29330
// exit ;
29326: POP
29327: POP
29328: GO 29413
// end ;
29330: GO 29001
29332: POP
29333: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29334: LD_VAR 0 9
29338: PPUSH
29339: LD_VAR 0 3
29343: PPUSH
29344: LD_VAR 0 4
29348: PPUSH
29349: LD_INT 20
29351: PPUSH
29352: CALL 21336 0 4
29356: PUSH
29357: LD_INT 4
29359: ARRAY
29360: IFFALSE 29364
// exit ;
29362: GO 29413
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29364: LD_VAR 0 2
29368: PUSH
29369: LD_INT 29
29371: PUSH
29372: LD_INT 30
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: IN
29379: PUSH
29380: LD_VAR 0 3
29384: PPUSH
29385: LD_VAR 0 4
29389: PPUSH
29390: LD_VAR 0 9
29394: PPUSH
29395: CALL_OW 440
29399: NOT
29400: AND
29401: IFFALSE 29405
// exit ;
29403: GO 29413
// result := true ;
29405: LD_ADDR_VAR 0 6
29409: PUSH
29410: LD_INT 1
29412: ST_TO_ADDR
// end ;
29413: LD_VAR 0 6
29417: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
29418: LD_INT 0
29420: PPUSH
29421: PPUSH
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
29431: PPUSH
29432: PPUSH
29433: PPUSH
29434: PPUSH
29435: PPUSH
29436: PPUSH
29437: PPUSH
29438: PPUSH
29439: PPUSH
29440: PPUSH
29441: PPUSH
29442: PPUSH
29443: PPUSH
29444: PPUSH
29445: PPUSH
29446: PPUSH
29447: PPUSH
29448: PPUSH
29449: PPUSH
29450: PPUSH
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
29457: PPUSH
29458: PPUSH
29459: PPUSH
29460: PPUSH
29461: PPUSH
29462: PPUSH
29463: PPUSH
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
29472: PPUSH
29473: PPUSH
29474: PPUSH
29475: PPUSH
29476: PPUSH
29477: PPUSH
// result = [ ] ;
29478: LD_ADDR_VAR 0 7
29482: PUSH
29483: EMPTY
29484: ST_TO_ADDR
// temp_list = [ ] ;
29485: LD_ADDR_VAR 0 9
29489: PUSH
29490: EMPTY
29491: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29492: LD_VAR 0 4
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 3
29508: PUSH
29509: LD_INT 4
29511: PUSH
29512: LD_INT 5
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: LIST
29519: LIST
29520: LIST
29521: LIST
29522: IN
29523: NOT
29524: PUSH
29525: LD_VAR 0 1
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: IN
29540: PUSH
29541: LD_VAR 0 5
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: LIST
29559: IN
29560: NOT
29561: AND
29562: OR
29563: IFFALSE 29567
// exit ;
29565: GO 47958
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29567: LD_VAR 0 1
29571: PUSH
29572: LD_INT 6
29574: PUSH
29575: LD_INT 7
29577: PUSH
29578: LD_INT 8
29580: PUSH
29581: LD_INT 13
29583: PUSH
29584: LD_INT 12
29586: PUSH
29587: LD_INT 15
29589: PUSH
29590: LD_INT 11
29592: PUSH
29593: LD_INT 14
29595: PUSH
29596: LD_INT 10
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: IN
29610: IFFALSE 29620
// btype = b_lab ;
29612: LD_ADDR_VAR 0 1
29616: PUSH
29617: LD_INT 6
29619: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29620: LD_VAR 0 6
29624: PUSH
29625: LD_INT 0
29627: PUSH
29628: LD_INT 1
29630: PUSH
29631: LD_INT 2
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: IN
29639: NOT
29640: PUSH
29641: LD_VAR 0 1
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: LD_INT 6
29660: PUSH
29661: LD_INT 36
29663: PUSH
29664: LD_INT 4
29666: PUSH
29667: LD_INT 5
29669: PUSH
29670: LD_INT 31
29672: PUSH
29673: LD_INT 32
29675: PUSH
29676: LD_INT 33
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: IN
29692: NOT
29693: PUSH
29694: LD_VAR 0 6
29698: PUSH
29699: LD_INT 1
29701: EQUAL
29702: AND
29703: OR
29704: PUSH
29705: LD_VAR 0 1
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: IN
29720: NOT
29721: PUSH
29722: LD_VAR 0 6
29726: PUSH
29727: LD_INT 2
29729: EQUAL
29730: AND
29731: OR
29732: IFFALSE 29742
// mode = 0 ;
29734: LD_ADDR_VAR 0 6
29738: PUSH
29739: LD_INT 0
29741: ST_TO_ADDR
// case mode of 0 :
29742: LD_VAR 0 6
29746: PUSH
29747: LD_INT 0
29749: DOUBLE
29750: EQUAL
29751: IFTRUE 29755
29753: GO 41208
29755: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29756: LD_ADDR_VAR 0 11
29760: PUSH
29761: LD_INT 0
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 0
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: PUSH
29782: LD_INT 1
29784: PUSH
29785: LD_INT 0
29787: PUSH
29788: EMPTY
29789: LIST
29790: LIST
29791: PUSH
29792: LD_INT 1
29794: PUSH
29795: LD_INT 1
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: PUSH
29802: LD_INT 0
29804: PUSH
29805: LD_INT 1
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: PUSH
29812: LD_INT 1
29814: NEG
29815: PUSH
29816: LD_INT 0
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 1
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: NEG
29838: PUSH
29839: LD_INT 2
29841: NEG
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: LD_INT 2
29852: NEG
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 1
29863: NEG
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PUSH
29879: LD_INT 0
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: EMPTY
29886: LIST
29887: LIST
29888: PUSH
29889: LD_INT 1
29891: NEG
29892: PUSH
29893: LD_INT 1
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: LD_INT 1
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 0
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: LD_INT 1
29922: NEG
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29949: LD_ADDR_VAR 0 12
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 0
29959: PUSH
29960: EMPTY
29961: LIST
29962: LIST
29963: PUSH
29964: LD_INT 0
29966: PUSH
29967: LD_INT 1
29969: NEG
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: NEG
30008: PUSH
30009: LD_INT 0
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 1
30018: NEG
30019: PUSH
30020: LD_INT 1
30022: NEG
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: LD_INT 1
30033: NEG
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: LD_INT 2
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 2
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: EMPTY
30056: LIST
30057: LIST
30058: PUSH
30059: LD_INT 1
30061: NEG
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: PUSH
30070: LD_INT 2
30072: NEG
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 2
30083: NEG
30084: PUSH
30085: LD_INT 1
30087: NEG
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 2
30095: NEG
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 3
30106: NEG
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 3
30117: NEG
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30145: LD_ADDR_VAR 0 13
30149: PUSH
30150: LD_INT 0
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 0
30162: PUSH
30163: LD_INT 1
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 0
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 1
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: LD_INT 1
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 0
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: LD_INT 1
30218: NEG
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: LD_INT 2
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 1
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: LD_INT 2
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: NEG
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: LD_INT 2
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: LD_INT 3
30296: NEG
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 3
30304: NEG
30305: PUSH
30306: LD_INT 2
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 3
30316: NEG
30317: PUSH
30318: LD_INT 3
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30344: LD_ADDR_VAR 0 14
30348: PUSH
30349: LD_INT 0
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 0
30361: PUSH
30362: LD_INT 1
30364: NEG
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 1
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 1
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 1
30413: NEG
30414: PUSH
30415: LD_INT 1
30417: NEG
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 1
30425: NEG
30426: PUSH
30427: LD_INT 2
30429: NEG
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 0
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: LD_INT 1
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 1
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: LD_INT 1
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: NEG
30491: PUSH
30492: LD_INT 3
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 0
30502: PUSH
30503: LD_INT 3
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 2
30516: NEG
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30540: LD_ADDR_VAR 0 15
30544: PUSH
30545: LD_INT 0
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 0
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 1
30568: PUSH
30569: LD_INT 0
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 1
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 0
30588: PUSH
30589: LD_INT 1
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 1
30598: NEG
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: EMPTY
30604: LIST
30605: LIST
30606: PUSH
30607: LD_INT 1
30609: NEG
30610: PUSH
30611: LD_INT 1
30613: NEG
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 1
30624: NEG
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 0
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 2
30642: PUSH
30643: LD_INT 1
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 1
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: NEG
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: PUSH
30672: LD_INT 2
30674: NEG
30675: PUSH
30676: LD_INT 1
30678: NEG
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 2
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 3
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 3
30707: PUSH
30708: LD_INT 1
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30733: LD_ADDR_VAR 0 16
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PUSH
30748: LD_INT 0
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 1
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: LD_INT 1
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 1
30791: NEG
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 1
30814: NEG
30815: PUSH
30816: LD_INT 2
30818: NEG
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 2
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 2
30836: PUSH
30837: LD_INT 2
30839: PUSH
30840: EMPTY
30841: LIST
30842: LIST
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: LD_INT 2
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 2
30856: NEG
30857: PUSH
30858: LD_INT 1
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 2
30868: NEG
30869: PUSH
30870: LD_INT 2
30872: NEG
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 3
30880: PUSH
30881: LD_INT 2
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 3
30890: PUSH
30891: LD_INT 3
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 2
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30926: LD_ADDR_VAR 0 17
30930: PUSH
30931: LD_INT 0
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 1
30946: NEG
30947: PUSH
30948: EMPTY
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 1
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: PUSH
30972: LD_INT 0
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: PUSH
30982: LD_INT 1
30984: NEG
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: PUSH
30993: LD_INT 1
30995: NEG
30996: PUSH
30997: LD_INT 1
30999: NEG
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 2
31011: NEG
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 2
31022: NEG
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 1
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 1
31071: PUSH
31072: LD_INT 2
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: LD_INT 0
31081: PUSH
31082: LD_INT 2
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: NEG
31092: PUSH
31093: LD_INT 1
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 2
31102: NEG
31103: PUSH
31104: LD_INT 0
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PUSH
31111: LD_INT 2
31113: NEG
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: EMPTY
31120: LIST
31121: LIST
31122: PUSH
31123: LD_INT 2
31125: NEG
31126: PUSH
31127: LD_INT 2
31129: NEG
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: PUSH
31135: EMPTY
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31156: LD_ADDR_VAR 0 18
31160: PUSH
31161: LD_INT 0
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 1
31176: NEG
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: PUSH
31182: LD_INT 1
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: EMPTY
31199: LIST
31200: LIST
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: LD_INT 1
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: PUSH
31223: LD_INT 1
31225: NEG
31226: PUSH
31227: LD_INT 1
31229: NEG
31230: PUSH
31231: EMPTY
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: LD_INT 2
31241: NEG
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 2
31252: NEG
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 1
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 2
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 1
31301: PUSH
31302: LD_INT 2
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 0
31311: PUSH
31312: LD_INT 2
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: NEG
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: PUSH
31330: LD_INT 2
31332: NEG
31333: PUSH
31334: LD_INT 0
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: LD_INT 2
31343: NEG
31344: PUSH
31345: LD_INT 1
31347: NEG
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: PUSH
31353: LD_INT 2
31355: NEG
31356: PUSH
31357: LD_INT 2
31359: NEG
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31386: LD_ADDR_VAR 0 19
31390: PUSH
31391: LD_INT 0
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 1
31406: NEG
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 1
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 0
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: PUSH
31442: LD_INT 1
31444: NEG
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 1
31455: NEG
31456: PUSH
31457: LD_INT 1
31459: NEG
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 1
31467: NEG
31468: PUSH
31469: LD_INT 2
31471: NEG
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 2
31482: NEG
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: PUSH
31512: LD_INT 1
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 2
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 1
31531: PUSH
31532: LD_INT 2
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: PUSH
31539: LD_INT 0
31541: PUSH
31542: LD_INT 2
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: LD_INT 2
31562: NEG
31563: PUSH
31564: LD_INT 0
31566: PUSH
31567: EMPTY
31568: LIST
31569: LIST
31570: PUSH
31571: LD_INT 2
31573: NEG
31574: PUSH
31575: LD_INT 1
31577: NEG
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 2
31585: NEG
31586: PUSH
31587: LD_INT 2
31589: NEG
31590: PUSH
31591: EMPTY
31592: LIST
31593: LIST
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31616: LD_ADDR_VAR 0 20
31620: PUSH
31621: LD_INT 0
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: NEG
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 1
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 0
31664: PUSH
31665: LD_INT 1
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 1
31674: NEG
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: EMPTY
31680: LIST
31681: LIST
31682: PUSH
31683: LD_INT 1
31685: NEG
31686: PUSH
31687: LD_INT 1
31689: NEG
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: LD_INT 2
31701: NEG
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 2
31712: NEG
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 1
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 2
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: PUSH
31742: LD_INT 1
31744: PUSH
31745: EMPTY
31746: LIST
31747: LIST
31748: PUSH
31749: LD_INT 2
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 2
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 0
31771: PUSH
31772: LD_INT 2
31774: PUSH
31775: EMPTY
31776: LIST
31777: LIST
31778: PUSH
31779: LD_INT 1
31781: NEG
31782: PUSH
31783: LD_INT 1
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: NEG
31793: PUSH
31794: LD_INT 0
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: PUSH
31801: LD_INT 2
31803: NEG
31804: PUSH
31805: LD_INT 1
31807: NEG
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: PUSH
31813: LD_INT 2
31815: NEG
31816: PUSH
31817: LD_INT 2
31819: NEG
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31846: LD_ADDR_VAR 0 21
31850: PUSH
31851: LD_INT 0
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: PUSH
31892: LD_INT 0
31894: PUSH
31895: LD_INT 1
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: PUSH
31913: LD_INT 1
31915: NEG
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: LD_INT 2
31931: NEG
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: LD_INT 2
31942: NEG
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: LD_INT 1
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 2
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 0
32001: PUSH
32002: LD_INT 2
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 1
32011: NEG
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 2
32022: NEG
32023: PUSH
32024: LD_INT 0
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 2
32033: NEG
32034: PUSH
32035: LD_INT 1
32037: NEG
32038: PUSH
32039: EMPTY
32040: LIST
32041: LIST
32042: PUSH
32043: LD_INT 2
32045: NEG
32046: PUSH
32047: LD_INT 2
32049: NEG
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32076: LD_ADDR_VAR 0 22
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 1
32096: NEG
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 1
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: LD_INT 1
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 1
32145: NEG
32146: PUSH
32147: LD_INT 1
32149: NEG
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 1
32157: NEG
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 0
32169: PUSH
32170: LD_INT 2
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: LD_INT 2
32191: PUSH
32192: LD_INT 0
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: PUSH
32199: LD_INT 2
32201: PUSH
32202: LD_INT 1
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 2
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 2
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 2
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 1
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 2
32252: NEG
32253: PUSH
32254: LD_INT 0
32256: PUSH
32257: EMPTY
32258: LIST
32259: LIST
32260: PUSH
32261: LD_INT 2
32263: NEG
32264: PUSH
32265: LD_INT 1
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: NEG
32276: PUSH
32277: LD_INT 2
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32306: LD_ADDR_VAR 0 23
32310: PUSH
32311: LD_INT 0
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 0
32354: PUSH
32355: LD_INT 1
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: PUSH
32366: LD_INT 0
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 1
32387: NEG
32388: PUSH
32389: LD_INT 2
32391: NEG
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 0
32399: PUSH
32400: LD_INT 2
32402: NEG
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 1
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 2
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 2
32431: PUSH
32432: LD_INT 1
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 2
32441: PUSH
32442: LD_INT 2
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 1
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 2
32482: NEG
32483: PUSH
32484: LD_INT 0
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 2
32493: NEG
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 2
32505: NEG
32506: PUSH
32507: LD_INT 2
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: NEG
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 3
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: PUSH
32542: LD_INT 2
32544: NEG
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: PUSH
32553: LD_INT 1
32555: NEG
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32586: LD_ADDR_VAR 0 24
32590: PUSH
32591: LD_INT 0
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 0
32603: PUSH
32604: LD_INT 1
32606: NEG
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: LD_INT 1
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: NEG
32645: PUSH
32646: LD_INT 0
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: NEG
32656: PUSH
32657: LD_INT 1
32659: NEG
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: PUSH
32665: LD_INT 1
32667: NEG
32668: PUSH
32669: LD_INT 2
32671: NEG
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: PUSH
32677: LD_INT 0
32679: PUSH
32680: LD_INT 2
32682: NEG
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 1
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 2
32701: PUSH
32702: LD_INT 0
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 2
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 1
32731: PUSH
32732: LD_INT 2
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: PUSH
32753: LD_INT 1
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 1
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: LD_INT 2
32785: NEG
32786: PUSH
32787: LD_INT 2
32789: NEG
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: PUSH
32798: LD_INT 2
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 2
32808: PUSH
32809: LD_INT 1
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 3
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: LD_INT 3
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32862: LD_ADDR_VAR 0 25
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 0
32955: PUSH
32956: LD_INT 2
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 2
32977: PUSH
32978: LD_INT 0
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 1
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: PUSH
32995: LD_INT 2
32997: PUSH
32998: LD_INT 2
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PUSH
33005: LD_INT 1
33007: PUSH
33008: LD_INT 2
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: LD_INT 2
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: LD_INT 1
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: NEG
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 2
33049: NEG
33050: PUSH
33051: LD_INT 1
33053: NEG
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: NEG
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 3
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 3
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: PUSH
33094: LD_INT 3
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: LD_INT 3
33106: PUSH
33107: EMPTY
33108: LIST
33109: LIST
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33136: LD_ADDR_VAR 0 26
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 0
33146: PUSH
33147: EMPTY
33148: LIST
33149: LIST
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 1
33205: NEG
33206: PUSH
33207: LD_INT 1
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 1
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 1
33301: NEG
33302: PUSH
33303: LD_INT 1
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 2
33312: NEG
33313: PUSH
33314: LD_INT 0
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 2
33323: NEG
33324: PUSH
33325: LD_INT 1
33327: NEG
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: PUSH
33333: LD_INT 2
33335: NEG
33336: PUSH
33337: LD_INT 2
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 3
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 2
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33412: LD_ADDR_VAR 0 27
33416: PUSH
33417: LD_INT 0
33419: PUSH
33420: LD_INT 0
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 0
33429: PUSH
33430: LD_INT 1
33432: NEG
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 0
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 1
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: LD_INT 1
33485: NEG
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: NEG
33494: PUSH
33495: LD_INT 2
33497: NEG
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: PUSH
33503: LD_INT 0
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: PUSH
33535: LD_INT 2
33537: PUSH
33538: LD_INT 1
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: PUSH
33548: LD_INT 2
33550: PUSH
33551: EMPTY
33552: LIST
33553: LIST
33554: PUSH
33555: LD_INT 1
33557: PUSH
33558: LD_INT 2
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: LD_INT 2
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: PUSH
33575: LD_INT 1
33577: NEG
33578: PUSH
33579: LD_INT 1
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: LD_INT 0
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: LD_INT 1
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 2
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 2
33634: NEG
33635: PUSH
33636: LD_INT 1
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 3
33645: NEG
33646: PUSH
33647: LD_INT 1
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 2
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33692: LD_ADDR_VAR 0 28
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: LD_INT 0
33702: PUSH
33703: EMPTY
33704: LIST
33705: LIST
33706: PUSH
33707: LD_INT 0
33709: PUSH
33710: LD_INT 1
33712: NEG
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PUSH
33718: LD_INT 1
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 1
33730: PUSH
33731: LD_INT 1
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: LD_INT 1
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 1
33750: NEG
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 1
33761: NEG
33762: PUSH
33763: LD_INT 1
33765: NEG
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: NEG
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 2
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 2
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: LD_INT 1
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 2
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 2
33868: NEG
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: NEG
33880: PUSH
33881: LD_INT 1
33883: NEG
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: NEG
33892: PUSH
33893: LD_INT 2
33895: NEG
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 2
33903: NEG
33904: PUSH
33905: LD_INT 3
33907: NEG
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 3
33927: NEG
33928: PUSH
33929: LD_INT 1
33931: NEG
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: PUSH
33937: LD_INT 3
33939: NEG
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33974: LD_ADDR_VAR 0 29
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 1
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 0
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 1
34129: NEG
34130: PUSH
34131: LD_INT 1
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 2
34140: NEG
34141: PUSH
34142: LD_INT 1
34144: NEG
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: LD_INT 3
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 1
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: LD_INT 1
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 1
34197: PUSH
34198: LD_INT 3
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: LD_INT 2
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34253: LD_ADDR_VAR 0 30
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: PUSH
34279: LD_INT 1
34281: PUSH
34282: LD_INT 0
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: LD_INT 0
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 1
34334: NEG
34335: PUSH
34336: LD_INT 2
34338: NEG
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 0
34346: PUSH
34347: LD_INT 2
34349: NEG
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 2
34368: PUSH
34369: LD_INT 0
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 2
34378: PUSH
34379: LD_INT 1
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: LD_INT 2
34388: PUSH
34389: LD_INT 2
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 1
34398: PUSH
34399: LD_INT 2
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 1
34408: NEG
34409: PUSH
34410: LD_INT 1
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: LD_INT 1
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: LD_INT 3
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 2
34457: NEG
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 3
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 2
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 3
34496: NEG
34497: PUSH
34498: LD_INT 1
34500: NEG
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34531: LD_ADDR_VAR 0 31
34535: PUSH
34536: LD_INT 0
34538: PUSH
34539: LD_INT 0
34541: PUSH
34542: EMPTY
34543: LIST
34544: LIST
34545: PUSH
34546: LD_INT 0
34548: PUSH
34549: LD_INT 1
34551: NEG
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 1
34559: PUSH
34560: LD_INT 0
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 1
34569: PUSH
34570: LD_INT 1
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 0
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 1
34589: NEG
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 1
34600: NEG
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: LD_INT 0
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 1
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 1
34665: PUSH
34666: LD_INT 2
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 0
34675: PUSH
34676: LD_INT 2
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 1
34685: NEG
34686: PUSH
34687: LD_INT 1
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: PUSH
34694: LD_INT 2
34696: NEG
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 2
34708: NEG
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: LD_INT 3
34724: NEG
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: LD_INT 1
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 3
34743: PUSH
34744: LD_INT 1
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: NEG
34764: PUSH
34765: LD_INT 2
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 3
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34809: LD_ADDR_VAR 0 32
34813: PUSH
34814: LD_INT 0
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 0
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 0
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 1
34847: PUSH
34848: LD_INT 1
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 1
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: NEG
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: LD_INT 2
34905: NEG
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_INT 2
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: PUSH
34932: LD_INT 2
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 0
34954: PUSH
34955: LD_INT 2
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 1
34964: NEG
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 2
34975: NEG
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 2
34986: NEG
34987: PUSH
34988: LD_INT 1
34990: NEG
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: LD_INT 3
35002: NEG
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 2
35013: NEG
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 3
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: NEG
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: LIST
35074: LIST
35075: LIST
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: LIST
35084: LIST
35085: LIST
35086: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35087: LD_ADDR_VAR 0 33
35091: PUSH
35092: LD_INT 0
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 0
35104: PUSH
35105: LD_INT 1
35107: NEG
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 1
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 1
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: NEG
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 1
35156: NEG
35157: PUSH
35158: LD_INT 1
35160: NEG
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PUSH
35166: LD_INT 1
35168: NEG
35169: PUSH
35170: LD_INT 2
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 2
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: PUSH
35212: LD_INT 2
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 2
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 1
35231: NEG
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: NEG
35243: PUSH
35244: LD_INT 0
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 2
35253: NEG
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: LD_INT 2
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: LD_INT 3
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: LD_INT 1
35292: NEG
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: LD_INT 3
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 3
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 1
35320: NEG
35321: PUSH
35322: LD_INT 2
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 3
35331: NEG
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35366: LD_ADDR_VAR 0 34
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 1
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 1
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 1
35439: NEG
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 1
35447: NEG
35448: PUSH
35449: LD_INT 2
35451: NEG
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: LD_INT 2
35462: NEG
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: LD_INT 1
35473: NEG
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PUSH
35479: LD_INT 2
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 2
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: NEG
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 2
35533: NEG
35534: PUSH
35535: LD_INT 1
35537: NEG
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 2
35545: NEG
35546: PUSH
35547: LD_INT 2
35549: NEG
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: LD_INT 3
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: LD_INT 2
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: LD_INT 3
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: NEG
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 3
35611: NEG
35612: PUSH
35613: LD_INT 1
35615: NEG
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35646: LD_ADDR_VAR 0 35
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 0
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: LD_INT 0
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 0
35694: PUSH
35695: LD_INT 1
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 1
35704: NEG
35705: PUSH
35706: LD_INT 0
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: NEG
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 2
35727: PUSH
35728: LD_INT 1
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: LD_INT 1
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35758: LD_ADDR_VAR 0 36
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 0
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 1
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 1
35796: PUSH
35797: LD_INT 1
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: LD_INT 0
35806: PUSH
35807: LD_INT 1
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 1
35816: NEG
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: NEG
35840: PUSH
35841: LD_INT 2
35843: NEG
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 2
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35870: LD_ADDR_VAR 0 37
35874: PUSH
35875: LD_INT 0
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: LD_INT 1
35890: NEG
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: PUSH
35899: LD_INT 0
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 1
35928: NEG
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: NEG
35940: PUSH
35941: LD_INT 1
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 1
35954: NEG
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35982: LD_ADDR_VAR 0 38
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 1
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 0
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 1
36040: NEG
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: LD_INT 1
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36094: LD_ADDR_VAR 0 39
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 1
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 0
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: NEG
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 1
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 1
36187: PUSH
36188: LD_INT 2
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36206: LD_ADDR_VAR 0 40
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 0
36223: PUSH
36224: LD_INT 1
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: LD_INT 0
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: LD_INT 1
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: LD_INT 0
36254: PUSH
36255: LD_INT 1
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: LD_INT 0
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: LD_INT 1
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36318: LD_ADDR_VAR 0 41
36322: PUSH
36323: LD_INT 0
36325: PUSH
36326: LD_INT 0
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 1
36338: NEG
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 1
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 0
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: LD_INT 1
36391: NEG
36392: PUSH
36393: EMPTY
36394: LIST
36395: LIST
36396: PUSH
36397: LD_INT 1
36399: NEG
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: PUSH
36409: LD_INT 1
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 2
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 2
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: PUSH
36443: LD_INT 2
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 2
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: LD_INT 0
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 2
36484: NEG
36485: PUSH
36486: LD_INT 1
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: NEG
36497: PUSH
36498: LD_INT 2
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 2
36508: NEG
36509: PUSH
36510: LD_INT 3
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 2
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 3
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 3
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 3
36561: PUSH
36562: LD_INT 3
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: LD_INT 1
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 3
36603: NEG
36604: PUSH
36605: LD_INT 1
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 3
36615: NEG
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 3
36627: NEG
36628: PUSH
36629: LD_INT 3
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36668: LD_ADDR_VAR 0 42
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: LD_INT 0
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: PUSH
36697: LD_INT 0
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 1
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: NEG
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: LD_INT 1
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: NEG
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 0
36761: PUSH
36762: LD_INT 2
36764: NEG
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 1
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 2
36783: PUSH
36784: LD_INT 1
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: PUSH
36804: LD_INT 2
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: LD_INT 1
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 2
36834: NEG
36835: PUSH
36836: LD_INT 1
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 2
36846: NEG
36847: PUSH
36848: LD_INT 2
36850: NEG
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 2
36858: NEG
36859: PUSH
36860: LD_INT 3
36862: NEG
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: LD_INT 3
36874: NEG
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 3
36885: NEG
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 1
36893: PUSH
36894: LD_INT 2
36896: NEG
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: LD_INT 2
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: LD_INT 3
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: LD_INT 2
36924: PUSH
36925: LD_INT 3
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: LD_INT 3
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 0
36944: PUSH
36945: LD_INT 3
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: LD_INT 2
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 3
36965: NEG
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 3
36977: NEG
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37018: LD_ADDR_VAR 0 43
37022: PUSH
37023: LD_INT 0
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 0
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: EMPTY
37041: LIST
37042: LIST
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: LD_INT 0
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: PUSH
37054: LD_INT 1
37056: PUSH
37057: LD_INT 1
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 0
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 1
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: NEG
37100: PUSH
37101: LD_INT 2
37103: NEG
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 1
37122: PUSH
37123: LD_INT 1
37125: NEG
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: LD_INT 2
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 2
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 1
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 2
37184: NEG
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 2
37195: NEG
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: LD_INT 3
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 3
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: LD_INT 1
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 3
37252: PUSH
37253: LD_INT 0
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 3
37262: PUSH
37263: LD_INT 1
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 1
37272: PUSH
37273: LD_INT 3
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 0
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: NEG
37293: PUSH
37294: LD_INT 2
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 2
37303: NEG
37304: PUSH
37305: LD_INT 1
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: NEG
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 3
37325: NEG
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37366: LD_ADDR_VAR 0 44
37370: PUSH
37371: LD_INT 0
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 0
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 1
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: LD_INT 1
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 0
37414: PUSH
37415: LD_INT 1
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: LD_INT 0
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: LD_INT 0
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 2
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 2
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 1
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: NEG
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: LD_INT 2
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: LD_INT 3
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: LD_INT 0
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: LD_INT 3
37609: PUSH
37610: LD_INT 3
37612: PUSH
37613: EMPTY
37614: LIST
37615: LIST
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: LD_INT 3
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: LD_INT 1
37633: PUSH
37634: EMPTY
37635: LIST
37636: LIST
37637: PUSH
37638: LD_INT 3
37640: NEG
37641: PUSH
37642: LD_INT 0
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 3
37651: NEG
37652: PUSH
37653: LD_INT 1
37655: NEG
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: LD_INT 2
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 3
37675: NEG
37676: PUSH
37677: LD_INT 3
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37716: LD_ADDR_VAR 0 45
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 0
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: LD_INT 1
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 1
37785: NEG
37786: PUSH
37787: LD_INT 1
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 2
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 1
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: LD_INT 1
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: NEG
37883: PUSH
37884: LD_INT 1
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 2
37894: NEG
37895: PUSH
37896: LD_INT 2
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: LD_INT 3
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: LD_INT 3
37922: NEG
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 0
37930: PUSH
37931: LD_INT 3
37933: NEG
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: LD_INT 2
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 3
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: PUSH
37963: LD_INT 3
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 2
37972: PUSH
37973: LD_INT 3
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 3
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 3
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: LD_INT 2
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 3
38013: NEG
38014: PUSH
38015: LD_INT 2
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 3
38025: NEG
38026: PUSH
38027: LD_INT 3
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: LIST
38039: LIST
38040: LIST
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38066: LD_ADDR_VAR 0 46
38070: PUSH
38071: LD_INT 0
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 1
38086: NEG
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 1
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 0
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 1
38124: NEG
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: LD_INT 2
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 1
38173: NEG
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 0
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: PUSH
38230: LD_INT 2
38232: NEG
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: NEG
38244: PUSH
38245: LD_INT 1
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: LD_INT 3
38270: NEG
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: PUSH
38279: LD_INT 2
38281: NEG
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 2
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 3
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: PUSH
38308: LD_INT 3
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: PUSH
38321: LD_INT 3
38323: PUSH
38324: EMPTY
38325: LIST
38326: LIST
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: LD_INT 3
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 3
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 3
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38414: LD_ADDR_VAR 0 47
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 1
38434: NEG
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 1
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: PUSH
38470: LD_INT 1
38472: NEG
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: LD_INT 2
38499: NEG
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 2
38510: NEG
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: NEG
38530: PUSH
38531: LD_INT 1
38533: NEG
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: NEG
38542: PUSH
38543: LD_INT 2
38545: NEG
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38565: LD_ADDR_VAR 0 48
38569: PUSH
38570: LD_INT 0
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 1
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 1
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 1
38634: NEG
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 1
38646: NEG
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: LD_INT 1
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 2
38680: PUSH
38681: LD_INT 0
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38712: LD_ADDR_VAR 0 49
38716: PUSH
38717: LD_INT 0
38719: PUSH
38720: LD_INT 0
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 0
38729: PUSH
38730: LD_INT 1
38732: NEG
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 1
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 1
38770: NEG
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: LD_INT 1
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 1
38796: NEG
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 0
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 2
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: LD_INT 2
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: LD_INT 2
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38856: LD_ADDR_VAR 0 50
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: LD_INT 1
38876: NEG
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 1
38894: PUSH
38895: LD_INT 1
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: LD_INT 1
38907: PUSH
38908: EMPTY
38909: LIST
38910: LIST
38911: PUSH
38912: LD_INT 1
38914: NEG
38915: PUSH
38916: LD_INT 0
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: PUSH
38923: LD_INT 1
38925: NEG
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 2
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 2
38947: PUSH
38948: LD_INT 2
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: LD_INT 2
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 0
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: NEG
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39000: LD_ADDR_VAR 0 51
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: LD_INT 0
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 1
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 1
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: NEG
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 1
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 2
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 0
39091: PUSH
39092: LD_INT 2
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 0
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 2
39123: NEG
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39147: LD_ADDR_VAR 0 52
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 1
39175: PUSH
39176: LD_INT 0
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: PUSH
39183: LD_INT 1
39185: PUSH
39186: LD_INT 1
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 0
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: LD_INT 1
39228: NEG
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: LD_INT 1
39266: NEG
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 2
39274: NEG
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39298: LD_ADDR_VAR 0 53
39302: PUSH
39303: LD_INT 0
39305: PUSH
39306: LD_INT 0
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 1
39318: NEG
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 1
39356: NEG
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 1
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: LD_INT 2
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 0
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 1
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: LD_INT 2
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 2
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 1
39463: NEG
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: LD_INT 0
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: NEG
39498: PUSH
39499: LD_INT 2
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39528: LD_ADDR_VAR 0 54
39532: PUSH
39533: LD_INT 0
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 1
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 1
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 0
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 1
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 2
39613: NEG
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 0
39621: PUSH
39622: LD_INT 2
39624: NEG
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 1
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 2
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: LD_INT 2
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: LD_INT 1
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: NEG
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39758: LD_ADDR_VAR 0 55
39762: PUSH
39763: LD_INT 0
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PUSH
39784: LD_INT 1
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 1
39796: PUSH
39797: LD_INT 1
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: LD_INT 1
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 1
39816: NEG
39817: PUSH
39818: LD_INT 0
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 1
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: LD_INT 2
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: LD_INT 2
39854: NEG
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 1
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 2
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 2
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 2
39893: PUSH
39894: LD_INT 2
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: LD_INT 2
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: NEG
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: NEG
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39988: LD_ADDR_VAR 0 56
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 0
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 1
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 1
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 1
40046: NEG
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 1
40069: NEG
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 2
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 2
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 2
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: NEG
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 2
40164: NEG
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: LIST
40215: LIST
40216: LIST
40217: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40218: LD_ADDR_VAR 0 57
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 0
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 1
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 2
40314: NEG
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 2
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: PUSH
40354: LD_INT 2
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 0
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 1
40383: NEG
40384: PUSH
40385: LD_INT 1
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 2
40394: NEG
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: LD_INT 1
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 2
40417: NEG
40418: PUSH
40419: LD_INT 2
40421: NEG
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40448: LD_ADDR_VAR 0 58
40452: PUSH
40453: LD_INT 0
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 1
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 1
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 1
40506: NEG
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 1
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: PUSH
40531: LD_INT 2
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 2
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 1
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: LD_INT 2
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 0
40603: PUSH
40604: LD_INT 2
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 1
40613: NEG
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 2
40624: NEG
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40678: LD_ADDR_VAR 0 59
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40766: LD_ADDR_VAR 0 60
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 0
40814: PUSH
40815: LD_INT 1
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40854: LD_ADDR_VAR 0 61
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: PUSH
40883: LD_INT 0
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: NEG
40913: PUSH
40914: LD_INT 0
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 1
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40942: LD_ADDR_VAR 0 62
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41030: LD_ADDR_VAR 0 63
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 0
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 0
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 0
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: NEG
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: NEG
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41118: LD_ADDR_VAR 0 64
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: ST_TO_ADDR
// end ; 1 :
41206: GO 47103
41208: LD_INT 1
41210: DOUBLE
41211: EQUAL
41212: IFTRUE 41216
41214: GO 43839
41216: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41217: LD_ADDR_VAR 0 11
41221: PUSH
41222: LD_INT 1
41224: NEG
41225: PUSH
41226: LD_INT 3
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 3
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 2
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41261: LD_ADDR_VAR 0 12
41265: PUSH
41266: LD_INT 2
41268: PUSH
41269: LD_INT 1
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 3
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41302: LD_ADDR_VAR 0 13
41306: PUSH
41307: LD_INT 3
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: LD_INT 3
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: LD_INT 3
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41342: LD_ADDR_VAR 0 14
41346: PUSH
41347: LD_INT 1
41349: PUSH
41350: LD_INT 3
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 3
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: LD_INT 2
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41383: LD_ADDR_VAR 0 15
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: NEG
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 3
41412: NEG
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41427: LD_ADDR_VAR 0 16
41431: PUSH
41432: LD_INT 2
41434: NEG
41435: PUSH
41436: LD_INT 3
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 3
41446: NEG
41447: PUSH
41448: LD_INT 2
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 3
41458: NEG
41459: PUSH
41460: LD_INT 3
41462: NEG
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: LIST
41472: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41473: LD_ADDR_VAR 0 17
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 3
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 3
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 2
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41517: LD_ADDR_VAR 0 18
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 3
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 3
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41558: LD_ADDR_VAR 0 19
41562: PUSH
41563: LD_INT 3
41565: PUSH
41566: LD_INT 2
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 3
41575: PUSH
41576: LD_INT 3
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 2
41585: PUSH
41586: LD_INT 3
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41598: LD_ADDR_VAR 0 20
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: LD_INT 3
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 3
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 1
41625: NEG
41626: PUSH
41627: LD_INT 2
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41639: LD_ADDR_VAR 0 21
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: LD_INT 1
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 3
41657: NEG
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 3
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: LIST
41682: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41683: LD_ADDR_VAR 0 22
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: NEG
41703: PUSH
41704: LD_INT 2
41706: NEG
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 3
41714: NEG
41715: PUSH
41716: LD_INT 3
41718: NEG
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: LIST
41728: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41729: LD_ADDR_VAR 0 23
41733: PUSH
41734: LD_INT 0
41736: PUSH
41737: LD_INT 3
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 1
41747: NEG
41748: PUSH
41749: LD_INT 4
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 3
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: LIST
41772: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41773: LD_ADDR_VAR 0 24
41777: PUSH
41778: LD_INT 3
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: LD_INT 1
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 4
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: LIST
41813: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41814: LD_ADDR_VAR 0 25
41818: PUSH
41819: LD_INT 3
41821: PUSH
41822: LD_INT 3
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 4
41831: PUSH
41832: LD_INT 3
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 3
41841: PUSH
41842: LD_INT 4
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: LIST
41853: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41854: LD_ADDR_VAR 0 26
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 4
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41895: LD_ADDR_VAR 0 27
41899: PUSH
41900: LD_INT 3
41902: NEG
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 3
41913: NEG
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 4
41924: NEG
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41939: LD_ADDR_VAR 0 28
41943: PUSH
41944: LD_INT 3
41946: NEG
41947: PUSH
41948: LD_INT 3
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: LD_INT 4
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 4
41970: NEG
41971: PUSH
41972: LD_INT 3
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: LIST
41984: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41985: LD_ADDR_VAR 0 29
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: LD_INT 3
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 4
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 4
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 5
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 5
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: LD_INT 4
42086: NEG
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 6
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 6
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 5
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42140: LD_ADDR_VAR 0 30
42144: PUSH
42145: LD_INT 2
42147: PUSH
42148: LD_INT 1
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 3
42178: PUSH
42179: LD_INT 1
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 4
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: PUSH
42197: LD_INT 4
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 4
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 5
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 5
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 5
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 6
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 6
42261: PUSH
42262: LD_INT 1
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42283: LD_ADDR_VAR 0 31
42287: PUSH
42288: LD_INT 3
42290: PUSH
42291: LD_INT 2
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 3
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: LD_INT 3
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 4
42320: PUSH
42321: LD_INT 3
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 4
42330: PUSH
42331: LD_INT 4
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 3
42340: PUSH
42341: LD_INT 4
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 5
42350: PUSH
42351: LD_INT 4
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: LD_INT 5
42360: PUSH
42361: LD_INT 5
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 4
42370: PUSH
42371: LD_INT 5
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 6
42380: PUSH
42381: LD_INT 5
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 6
42390: PUSH
42391: LD_INT 6
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 5
42400: PUSH
42401: LD_INT 6
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42422: LD_ADDR_VAR 0 32
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 2
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: PUSH
42461: LD_INT 4
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: LD_INT 4
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 1
42491: PUSH
42492: LD_INT 5
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: LD_INT 5
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 4
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 1
42522: PUSH
42523: LD_INT 6
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 0
42532: PUSH
42533: LD_INT 6
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: NEG
42543: PUSH
42544: LD_INT 5
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42565: LD_ADDR_VAR 0 33
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 3
42583: NEG
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 3
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 3
42606: NEG
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 4
42617: NEG
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 4
42628: NEG
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 4
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 5
42651: NEG
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 5
42662: NEG
42663: PUSH
42664: LD_INT 1
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 5
42674: NEG
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 6
42685: NEG
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 6
42696: NEG
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42720: LD_ADDR_VAR 0 34
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 3
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: LD_INT 3
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 3
42763: NEG
42764: PUSH
42765: LD_INT 4
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 4
42775: NEG
42776: PUSH
42777: LD_INT 3
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 4
42787: NEG
42788: PUSH
42789: LD_INT 4
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 4
42799: NEG
42800: PUSH
42801: LD_INT 5
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 5
42811: NEG
42812: PUSH
42813: LD_INT 4
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 5
42823: NEG
42824: PUSH
42825: LD_INT 5
42827: NEG
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 5
42835: NEG
42836: PUSH
42837: LD_INT 6
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 6
42847: NEG
42848: PUSH
42849: LD_INT 5
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 6
42859: NEG
42860: PUSH
42861: LD_INT 6
42863: NEG
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42883: LD_ADDR_VAR 0 41
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 2
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 3
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: LD_INT 2
42916: NEG
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42927: LD_ADDR_VAR 0 42
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 3
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42968: LD_ADDR_VAR 0 43
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 2
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: PUSH
42996: LD_INT 3
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43008: LD_ADDR_VAR 0 44
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: NEG
43036: PUSH
43037: LD_INT 2
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: LIST
43048: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43049: LD_ADDR_VAR 0 45
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: LD_INT 0
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: NEG
43068: PUSH
43069: LD_INT 1
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: LD_INT 1
43082: NEG
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: LIST
43092: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43093: LD_ADDR_VAR 0 46
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 2
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 3
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 3
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43139: LD_ADDR_VAR 0 47
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 3
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43172: LD_ADDR_VAR 0 48
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43203: LD_ADDR_VAR 0 49
43207: PUSH
43208: LD_INT 3
43210: PUSH
43211: LD_INT 1
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 3
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43232: LD_ADDR_VAR 0 50
43236: PUSH
43237: LD_INT 2
43239: PUSH
43240: LD_INT 3
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 3
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43261: LD_ADDR_VAR 0 51
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 2
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43292: LD_ADDR_VAR 0 52
43296: PUSH
43297: LD_INT 3
43299: NEG
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43325: LD_ADDR_VAR 0 53
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 3
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43369: LD_ADDR_VAR 0 54
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 3
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 3
43397: PUSH
43398: LD_INT 1
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43410: LD_ADDR_VAR 0 55
43414: PUSH
43415: LD_INT 3
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 3
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: PUSH
43438: LD_INT 3
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: LIST
43449: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43450: LD_ADDR_VAR 0 56
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 3
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 3
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43491: LD_ADDR_VAR 0 57
43495: PUSH
43496: LD_INT 2
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 3
43509: NEG
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 3
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43535: LD_ADDR_VAR 0 58
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 3
43554: NEG
43555: PUSH
43556: LD_INT 2
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 3
43566: NEG
43567: PUSH
43568: LD_INT 3
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43581: LD_ADDR_VAR 0 59
43585: PUSH
43586: LD_INT 1
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: LIST
43624: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43625: LD_ADDR_VAR 0 60
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 2
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43666: LD_ADDR_VAR 0 61
43670: PUSH
43671: LD_INT 2
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43706: LD_ADDR_VAR 0 62
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 2
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: LIST
43746: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43747: LD_ADDR_VAR 0 63
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: LIST
43790: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43791: LD_ADDR_VAR 0 64
43795: PUSH
43796: LD_INT 1
43798: NEG
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 2
43810: NEG
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// end ; 2 :
43837: GO 47103
43839: LD_INT 2
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43847
43845: GO 47102
43847: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43848: LD_ADDR_VAR 0 29
43852: PUSH
43853: LD_INT 4
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 4
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 5
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 5
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: PUSH
43894: LD_INT 4
43896: PUSH
43897: LD_INT 1
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 3
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 3
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 5
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 4
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 4
43978: PUSH
43979: LD_INT 4
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 3
43988: PUSH
43989: LD_INT 4
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 2
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 4
44018: PUSH
44019: LD_INT 2
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 4
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 4
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 3
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: LD_INT 4
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: PUSH
44069: LD_INT 5
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 5
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: LD_INT 4
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 5
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 3
44124: PUSH
44125: EMPTY
44126: LIST
44127: LIST
44128: PUSH
44129: LD_INT 3
44131: NEG
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 3
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 4
44187: NEG
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 4
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 4
44210: NEG
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: NEG
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 4
44233: NEG
44234: PUSH
44235: LD_INT 4
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 4
44245: NEG
44246: PUSH
44247: LD_INT 5
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 3
44257: NEG
44258: PUSH
44259: LD_INT 4
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 3
44269: NEG
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 4
44281: NEG
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 5
44293: NEG
44294: PUSH
44295: LD_INT 4
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 5
44305: NEG
44306: PUSH
44307: LD_INT 5
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 3
44317: NEG
44318: PUSH
44319: LD_INT 5
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 5
44329: NEG
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: LIST
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44386: LD_ADDR_VAR 0 30
44390: PUSH
44391: LD_INT 4
44393: PUSH
44394: LD_INT 4
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 4
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 5
44413: PUSH
44414: LD_INT 4
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 5
44423: PUSH
44424: LD_INT 5
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 4
44433: PUSH
44434: LD_INT 5
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 3
44443: PUSH
44444: LD_INT 4
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 3
44453: PUSH
44454: LD_INT 3
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 5
44463: PUSH
44464: LD_INT 3
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 3
44473: PUSH
44474: LD_INT 5
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 0
44483: PUSH
44484: LD_INT 3
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: PUSH
44504: LD_INT 3
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 4
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 0
44523: PUSH
44524: LD_INT 4
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: LD_INT 4
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 4
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 4
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 3
44599: NEG
44600: PUSH
44601: LD_INT 0
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 4
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 5
44632: NEG
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 5
44643: NEG
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 5
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: NEG
44668: PUSH
44669: LD_INT 2
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: LD_INT 3
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: NEG
44691: PUSH
44692: LD_INT 4
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: NEG
44703: PUSH
44704: LD_INT 3
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 2
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: NEG
44727: PUSH
44728: LD_INT 2
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 4
44738: NEG
44739: PUSH
44740: LD_INT 3
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 4
44750: NEG
44751: PUSH
44752: LD_INT 4
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: NEG
44763: PUSH
44764: LD_INT 4
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 4
44774: NEG
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 4
44789: NEG
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 5
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 4
44811: NEG
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 3
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 4
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: LD_INT 5
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 3
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 5
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44933: LD_ADDR_VAR 0 31
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: LD_INT 4
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 3
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 4
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 1
44970: PUSH
44971: LD_INT 5
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 5
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 4
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: NEG
45002: PUSH
45003: LD_INT 3
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 5
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 2
45022: NEG
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 3
45033: NEG
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: NEG
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 4
45089: NEG
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 4
45100: NEG
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 4
45112: NEG
45113: PUSH
45114: LD_INT 2
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: NEG
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 4
45135: NEG
45136: PUSH
45137: LD_INT 4
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 4
45147: NEG
45148: PUSH
45149: LD_INT 5
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 3
45159: NEG
45160: PUSH
45161: LD_INT 4
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 3
45171: NEG
45172: PUSH
45173: LD_INT 3
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 4
45183: NEG
45184: PUSH
45185: LD_INT 3
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 5
45195: NEG
45196: PUSH
45197: LD_INT 4
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 5
45207: NEG
45208: PUSH
45209: LD_INT 5
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 3
45219: NEG
45220: PUSH
45221: LD_INT 5
45223: NEG
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 5
45231: NEG
45232: PUSH
45233: LD_INT 3
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 3
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 4
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 3
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: LD_INT 2
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 3
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 4
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 4
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 4
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 4
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 5
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 5
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 4
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 3
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 3
45417: PUSH
45418: LD_INT 2
45420: NEG
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 5
45428: PUSH
45429: LD_INT 2
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45483: LD_ADDR_VAR 0 32
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 4
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 3
45513: NEG
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 3
45524: NEG
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 4
45535: NEG
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 5
45546: NEG
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 5
45557: NEG
45558: PUSH
45559: LD_INT 1
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 5
45569: NEG
45570: PUSH
45571: LD_INT 2
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: LD_INT 3
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 3
45604: NEG
45605: PUSH
45606: LD_INT 4
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 3
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 4
45652: NEG
45653: PUSH
45654: LD_INT 3
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 4
45664: NEG
45665: PUSH
45666: LD_INT 4
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 4
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 4
45688: NEG
45689: PUSH
45690: LD_INT 2
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: LD_INT 4
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: LD_INT 5
45714: NEG
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 4
45725: NEG
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 3
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 3
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 4
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 5
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 5
45794: NEG
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: PUSH
45800: LD_INT 3
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 3
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 4
45823: PUSH
45824: LD_INT 0
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 4
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: LD_INT 1
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 4
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 4
45895: PUSH
45896: LD_INT 4
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 4
45905: PUSH
45906: LD_INT 3
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 5
45915: PUSH
45916: LD_INT 4
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 5
45925: PUSH
45926: LD_INT 5
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 4
45935: PUSH
45936: LD_INT 5
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: LD_INT 4
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: LD_INT 3
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 5
45965: PUSH
45966: LD_INT 3
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: LD_INT 5
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46030: LD_ADDR_VAR 0 33
46034: PUSH
46035: LD_INT 4
46037: NEG
46038: PUSH
46039: LD_INT 4
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 4
46049: NEG
46050: PUSH
46051: LD_INT 5
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 3
46061: NEG
46062: PUSH
46063: LD_INT 4
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 3
46073: NEG
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 4
46085: NEG
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 5
46097: NEG
46098: PUSH
46099: LD_INT 4
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 5
46109: NEG
46110: PUSH
46111: LD_INT 5
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 3
46121: NEG
46122: PUSH
46123: LD_INT 5
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 5
46133: NEG
46134: PUSH
46135: LD_INT 3
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 3
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 4
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 3
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 0
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 3
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: LD_INT 4
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 4
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 4
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 4
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 5
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 5
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 4
46288: PUSH
46289: LD_INT 1
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 3
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 5
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 3
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 3
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 4
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 4
46370: PUSH
46371: LD_INT 4
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 3
46380: PUSH
46381: LD_INT 4
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 4
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: LD_INT 4
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 4
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 0
46440: PUSH
46441: LD_INT 3
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 4
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 5
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 0
46470: PUSH
46471: LD_INT 5
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: LD_INT 4
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 1
46491: NEG
46492: PUSH
46493: LD_INT 3
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: LD_INT 5
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46568: LD_ADDR_VAR 0 34
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 4
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 5
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 4
46600: NEG
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 3
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: LD_INT 4
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 5
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: LD_INT 3
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: LD_INT 5
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 4
46698: PUSH
46699: LD_INT 0
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 4
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 3
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: PUSH
46739: LD_INT 1
46741: NEG
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: LD_INT 2
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 4
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 4
46770: PUSH
46771: LD_INT 4
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 4
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 5
46790: PUSH
46791: LD_INT 4
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 5
46800: PUSH
46801: LD_INT 5
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 4
46810: PUSH
46811: LD_INT 5
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 3
46820: PUSH
46821: LD_INT 4
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: LD_INT 3
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 5
46840: PUSH
46841: LD_INT 3
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 3
46850: PUSH
46851: LD_INT 5
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 3
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: LD_INT 2
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: PUSH
46891: LD_INT 4
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 0
46900: PUSH
46901: LD_INT 4
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 3
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: LD_INT 4
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 2
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 4
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 4
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: NEG
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 4
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: NEG
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 5
47020: NEG
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 5
47032: NEG
47033: PUSH
47034: LD_INT 2
47036: NEG
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: ST_TO_ADDR
// end ; end ;
47100: GO 47103
47102: POP
// case btype of b_depot , b_warehouse :
47103: LD_VAR 0 1
47107: PUSH
47108: LD_INT 0
47110: DOUBLE
47111: EQUAL
47112: IFTRUE 47122
47114: LD_INT 1
47116: DOUBLE
47117: EQUAL
47118: IFTRUE 47122
47120: GO 47323
47122: POP
// case nation of nation_american :
47123: LD_VAR 0 5
47127: PUSH
47128: LD_INT 1
47130: DOUBLE
47131: EQUAL
47132: IFTRUE 47136
47134: GO 47192
47136: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47137: LD_ADDR_VAR 0 9
47141: PUSH
47142: LD_VAR 0 11
47146: PUSH
47147: LD_VAR 0 12
47151: PUSH
47152: LD_VAR 0 13
47156: PUSH
47157: LD_VAR 0 14
47161: PUSH
47162: LD_VAR 0 15
47166: PUSH
47167: LD_VAR 0 16
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: PUSH
47180: LD_VAR 0 4
47184: PUSH
47185: LD_INT 1
47187: PLUS
47188: ARRAY
47189: ST_TO_ADDR
47190: GO 47321
47192: LD_INT 2
47194: DOUBLE
47195: EQUAL
47196: IFTRUE 47200
47198: GO 47256
47200: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47201: LD_ADDR_VAR 0 9
47205: PUSH
47206: LD_VAR 0 17
47210: PUSH
47211: LD_VAR 0 18
47215: PUSH
47216: LD_VAR 0 19
47220: PUSH
47221: LD_VAR 0 20
47225: PUSH
47226: LD_VAR 0 21
47230: PUSH
47231: LD_VAR 0 22
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: PUSH
47244: LD_VAR 0 4
47248: PUSH
47249: LD_INT 1
47251: PLUS
47252: ARRAY
47253: ST_TO_ADDR
47254: GO 47321
47256: LD_INT 3
47258: DOUBLE
47259: EQUAL
47260: IFTRUE 47264
47262: GO 47320
47264: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47265: LD_ADDR_VAR 0 9
47269: PUSH
47270: LD_VAR 0 23
47274: PUSH
47275: LD_VAR 0 24
47279: PUSH
47280: LD_VAR 0 25
47284: PUSH
47285: LD_VAR 0 26
47289: PUSH
47290: LD_VAR 0 27
47294: PUSH
47295: LD_VAR 0 28
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: PUSH
47308: LD_VAR 0 4
47312: PUSH
47313: LD_INT 1
47315: PLUS
47316: ARRAY
47317: ST_TO_ADDR
47318: GO 47321
47320: POP
47321: GO 47876
47323: LD_INT 2
47325: DOUBLE
47326: EQUAL
47327: IFTRUE 47337
47329: LD_INT 3
47331: DOUBLE
47332: EQUAL
47333: IFTRUE 47337
47335: GO 47393
47337: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47338: LD_ADDR_VAR 0 9
47342: PUSH
47343: LD_VAR 0 29
47347: PUSH
47348: LD_VAR 0 30
47352: PUSH
47353: LD_VAR 0 31
47357: PUSH
47358: LD_VAR 0 32
47362: PUSH
47363: LD_VAR 0 33
47367: PUSH
47368: LD_VAR 0 34
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: PUSH
47381: LD_VAR 0 4
47385: PUSH
47386: LD_INT 1
47388: PLUS
47389: ARRAY
47390: ST_TO_ADDR
47391: GO 47876
47393: LD_INT 16
47395: DOUBLE
47396: EQUAL
47397: IFTRUE 47455
47399: LD_INT 17
47401: DOUBLE
47402: EQUAL
47403: IFTRUE 47455
47405: LD_INT 18
47407: DOUBLE
47408: EQUAL
47409: IFTRUE 47455
47411: LD_INT 19
47413: DOUBLE
47414: EQUAL
47415: IFTRUE 47455
47417: LD_INT 22
47419: DOUBLE
47420: EQUAL
47421: IFTRUE 47455
47423: LD_INT 20
47425: DOUBLE
47426: EQUAL
47427: IFTRUE 47455
47429: LD_INT 21
47431: DOUBLE
47432: EQUAL
47433: IFTRUE 47455
47435: LD_INT 23
47437: DOUBLE
47438: EQUAL
47439: IFTRUE 47455
47441: LD_INT 24
47443: DOUBLE
47444: EQUAL
47445: IFTRUE 47455
47447: LD_INT 25
47449: DOUBLE
47450: EQUAL
47451: IFTRUE 47455
47453: GO 47511
47455: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47456: LD_ADDR_VAR 0 9
47460: PUSH
47461: LD_VAR 0 35
47465: PUSH
47466: LD_VAR 0 36
47470: PUSH
47471: LD_VAR 0 37
47475: PUSH
47476: LD_VAR 0 38
47480: PUSH
47481: LD_VAR 0 39
47485: PUSH
47486: LD_VAR 0 40
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: PUSH
47499: LD_VAR 0 4
47503: PUSH
47504: LD_INT 1
47506: PLUS
47507: ARRAY
47508: ST_TO_ADDR
47509: GO 47876
47511: LD_INT 6
47513: DOUBLE
47514: EQUAL
47515: IFTRUE 47567
47517: LD_INT 7
47519: DOUBLE
47520: EQUAL
47521: IFTRUE 47567
47523: LD_INT 8
47525: DOUBLE
47526: EQUAL
47527: IFTRUE 47567
47529: LD_INT 13
47531: DOUBLE
47532: EQUAL
47533: IFTRUE 47567
47535: LD_INT 12
47537: DOUBLE
47538: EQUAL
47539: IFTRUE 47567
47541: LD_INT 15
47543: DOUBLE
47544: EQUAL
47545: IFTRUE 47567
47547: LD_INT 11
47549: DOUBLE
47550: EQUAL
47551: IFTRUE 47567
47553: LD_INT 14
47555: DOUBLE
47556: EQUAL
47557: IFTRUE 47567
47559: LD_INT 10
47561: DOUBLE
47562: EQUAL
47563: IFTRUE 47567
47565: GO 47623
47567: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
47568: LD_ADDR_VAR 0 9
47572: PUSH
47573: LD_VAR 0 41
47577: PUSH
47578: LD_VAR 0 42
47582: PUSH
47583: LD_VAR 0 43
47587: PUSH
47588: LD_VAR 0 44
47592: PUSH
47593: LD_VAR 0 45
47597: PUSH
47598: LD_VAR 0 46
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: PUSH
47611: LD_VAR 0 4
47615: PUSH
47616: LD_INT 1
47618: PLUS
47619: ARRAY
47620: ST_TO_ADDR
47621: GO 47876
47623: LD_INT 36
47625: DOUBLE
47626: EQUAL
47627: IFTRUE 47631
47629: GO 47687
47631: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47632: LD_ADDR_VAR 0 9
47636: PUSH
47637: LD_VAR 0 47
47641: PUSH
47642: LD_VAR 0 48
47646: PUSH
47647: LD_VAR 0 49
47651: PUSH
47652: LD_VAR 0 50
47656: PUSH
47657: LD_VAR 0 51
47661: PUSH
47662: LD_VAR 0 52
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: PUSH
47675: LD_VAR 0 4
47679: PUSH
47680: LD_INT 1
47682: PLUS
47683: ARRAY
47684: ST_TO_ADDR
47685: GO 47876
47687: LD_INT 4
47689: DOUBLE
47690: EQUAL
47691: IFTRUE 47713
47693: LD_INT 5
47695: DOUBLE
47696: EQUAL
47697: IFTRUE 47713
47699: LD_INT 34
47701: DOUBLE
47702: EQUAL
47703: IFTRUE 47713
47705: LD_INT 37
47707: DOUBLE
47708: EQUAL
47709: IFTRUE 47713
47711: GO 47769
47713: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47714: LD_ADDR_VAR 0 9
47718: PUSH
47719: LD_VAR 0 53
47723: PUSH
47724: LD_VAR 0 54
47728: PUSH
47729: LD_VAR 0 55
47733: PUSH
47734: LD_VAR 0 56
47738: PUSH
47739: LD_VAR 0 57
47743: PUSH
47744: LD_VAR 0 58
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: PUSH
47757: LD_VAR 0 4
47761: PUSH
47762: LD_INT 1
47764: PLUS
47765: ARRAY
47766: ST_TO_ADDR
47767: GO 47876
47769: LD_INT 31
47771: DOUBLE
47772: EQUAL
47773: IFTRUE 47819
47775: LD_INT 32
47777: DOUBLE
47778: EQUAL
47779: IFTRUE 47819
47781: LD_INT 33
47783: DOUBLE
47784: EQUAL
47785: IFTRUE 47819
47787: LD_INT 27
47789: DOUBLE
47790: EQUAL
47791: IFTRUE 47819
47793: LD_INT 26
47795: DOUBLE
47796: EQUAL
47797: IFTRUE 47819
47799: LD_INT 28
47801: DOUBLE
47802: EQUAL
47803: IFTRUE 47819
47805: LD_INT 29
47807: DOUBLE
47808: EQUAL
47809: IFTRUE 47819
47811: LD_INT 30
47813: DOUBLE
47814: EQUAL
47815: IFTRUE 47819
47817: GO 47875
47819: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
47820: LD_ADDR_VAR 0 9
47824: PUSH
47825: LD_VAR 0 59
47829: PUSH
47830: LD_VAR 0 60
47834: PUSH
47835: LD_VAR 0 61
47839: PUSH
47840: LD_VAR 0 62
47844: PUSH
47845: LD_VAR 0 63
47849: PUSH
47850: LD_VAR 0 64
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: PUSH
47863: LD_VAR 0 4
47867: PUSH
47868: LD_INT 1
47870: PLUS
47871: ARRAY
47872: ST_TO_ADDR
47873: GO 47876
47875: POP
// temp_list2 = [ ] ;
47876: LD_ADDR_VAR 0 10
47880: PUSH
47881: EMPTY
47882: ST_TO_ADDR
// for i in temp_list do
47883: LD_ADDR_VAR 0 8
47887: PUSH
47888: LD_VAR 0 9
47892: PUSH
47893: FOR_IN
47894: IFFALSE 47946
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47896: LD_ADDR_VAR 0 10
47900: PUSH
47901: LD_VAR 0 10
47905: PUSH
47906: LD_VAR 0 8
47910: PUSH
47911: LD_INT 1
47913: ARRAY
47914: PUSH
47915: LD_VAR 0 2
47919: PLUS
47920: PUSH
47921: LD_VAR 0 8
47925: PUSH
47926: LD_INT 2
47928: ARRAY
47929: PUSH
47930: LD_VAR 0 3
47934: PLUS
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: EMPTY
47941: LIST
47942: ADD
47943: ST_TO_ADDR
47944: GO 47893
47946: POP
47947: POP
// result = temp_list2 ;
47948: LD_ADDR_VAR 0 7
47952: PUSH
47953: LD_VAR 0 10
47957: ST_TO_ADDR
// end ;
47958: LD_VAR 0 7
47962: RET
// export function EnemyInRange ( unit , dist ) ; begin
47963: LD_INT 0
47965: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47966: LD_ADDR_VAR 0 3
47970: PUSH
47971: LD_VAR 0 1
47975: PPUSH
47976: CALL_OW 255
47980: PPUSH
47981: LD_VAR 0 1
47985: PPUSH
47986: CALL_OW 250
47990: PPUSH
47991: LD_VAR 0 1
47995: PPUSH
47996: CALL_OW 251
48000: PPUSH
48001: LD_VAR 0 2
48005: PPUSH
48006: CALL 21336 0 4
48010: PUSH
48011: LD_INT 4
48013: ARRAY
48014: ST_TO_ADDR
// end ;
48015: LD_VAR 0 3
48019: RET
// export function PlayerSeeMe ( unit ) ; begin
48020: LD_INT 0
48022: PPUSH
// result := See ( your_side , unit ) ;
48023: LD_ADDR_VAR 0 2
48027: PUSH
48028: LD_OWVAR 2
48032: PPUSH
48033: LD_VAR 0 1
48037: PPUSH
48038: CALL_OW 292
48042: ST_TO_ADDR
// end ;
48043: LD_VAR 0 2
48047: RET
// export function ReverseDir ( unit ) ; begin
48048: LD_INT 0
48050: PPUSH
// if not unit then
48051: LD_VAR 0 1
48055: NOT
48056: IFFALSE 48060
// exit ;
48058: GO 48083
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48060: LD_ADDR_VAR 0 2
48064: PUSH
48065: LD_VAR 0 1
48069: PPUSH
48070: CALL_OW 254
48074: PUSH
48075: LD_INT 3
48077: PLUS
48078: PUSH
48079: LD_INT 6
48081: MOD
48082: ST_TO_ADDR
// end ;
48083: LD_VAR 0 2
48087: RET
// export function ReverseArray ( array ) ; var i ; begin
48088: LD_INT 0
48090: PPUSH
48091: PPUSH
// if not array then
48092: LD_VAR 0 1
48096: NOT
48097: IFFALSE 48101
// exit ;
48099: GO 48156
// result := [ ] ;
48101: LD_ADDR_VAR 0 2
48105: PUSH
48106: EMPTY
48107: ST_TO_ADDR
// for i := array downto 1 do
48108: LD_ADDR_VAR 0 3
48112: PUSH
48113: DOUBLE
48114: LD_VAR 0 1
48118: INC
48119: ST_TO_ADDR
48120: LD_INT 1
48122: PUSH
48123: FOR_DOWNTO
48124: IFFALSE 48154
// result := Join ( result , array [ i ] ) ;
48126: LD_ADDR_VAR 0 2
48130: PUSH
48131: LD_VAR 0 2
48135: PPUSH
48136: LD_VAR 0 1
48140: PUSH
48141: LD_VAR 0 3
48145: ARRAY
48146: PPUSH
48147: CALL 52801 0 2
48151: ST_TO_ADDR
48152: GO 48123
48154: POP
48155: POP
// end ;
48156: LD_VAR 0 2
48160: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
48161: LD_INT 0
48163: PPUSH
48164: PPUSH
48165: PPUSH
48166: PPUSH
48167: PPUSH
48168: PPUSH
// if not unit or not hexes then
48169: LD_VAR 0 1
48173: NOT
48174: PUSH
48175: LD_VAR 0 2
48179: NOT
48180: OR
48181: IFFALSE 48185
// exit ;
48183: GO 48308
// dist := 9999 ;
48185: LD_ADDR_VAR 0 5
48189: PUSH
48190: LD_INT 9999
48192: ST_TO_ADDR
// for i = 1 to hexes do
48193: LD_ADDR_VAR 0 4
48197: PUSH
48198: DOUBLE
48199: LD_INT 1
48201: DEC
48202: ST_TO_ADDR
48203: LD_VAR 0 2
48207: PUSH
48208: FOR_TO
48209: IFFALSE 48296
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48211: LD_ADDR_VAR 0 6
48215: PUSH
48216: LD_VAR 0 1
48220: PPUSH
48221: LD_VAR 0 2
48225: PUSH
48226: LD_VAR 0 4
48230: ARRAY
48231: PUSH
48232: LD_INT 1
48234: ARRAY
48235: PPUSH
48236: LD_VAR 0 2
48240: PUSH
48241: LD_VAR 0 4
48245: ARRAY
48246: PUSH
48247: LD_INT 2
48249: ARRAY
48250: PPUSH
48251: CALL_OW 297
48255: ST_TO_ADDR
// if tdist < dist then
48256: LD_VAR 0 6
48260: PUSH
48261: LD_VAR 0 5
48265: LESS
48266: IFFALSE 48294
// begin hex := hexes [ i ] ;
48268: LD_ADDR_VAR 0 8
48272: PUSH
48273: LD_VAR 0 2
48277: PUSH
48278: LD_VAR 0 4
48282: ARRAY
48283: ST_TO_ADDR
// dist := tdist ;
48284: LD_ADDR_VAR 0 5
48288: PUSH
48289: LD_VAR 0 6
48293: ST_TO_ADDR
// end ; end ;
48294: GO 48208
48296: POP
48297: POP
// result := hex ;
48298: LD_ADDR_VAR 0 3
48302: PUSH
48303: LD_VAR 0 8
48307: ST_TO_ADDR
// end ;
48308: LD_VAR 0 3
48312: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48313: LD_INT 0
48315: PPUSH
48316: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48317: LD_VAR 0 1
48321: NOT
48322: PUSH
48323: LD_VAR 0 1
48327: PUSH
48328: LD_INT 21
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 23
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PPUSH
48352: CALL_OW 69
48356: IN
48357: NOT
48358: OR
48359: IFFALSE 48363
// exit ;
48361: GO 48410
// for i = 1 to 3 do
48363: LD_ADDR_VAR 0 3
48367: PUSH
48368: DOUBLE
48369: LD_INT 1
48371: DEC
48372: ST_TO_ADDR
48373: LD_INT 3
48375: PUSH
48376: FOR_TO
48377: IFFALSE 48408
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48379: LD_VAR 0 1
48383: PPUSH
48384: CALL_OW 250
48388: PPUSH
48389: LD_VAR 0 1
48393: PPUSH
48394: CALL_OW 251
48398: PPUSH
48399: LD_INT 1
48401: PPUSH
48402: CALL_OW 453
48406: GO 48376
48408: POP
48409: POP
// end ;
48410: LD_VAR 0 2
48414: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48415: LD_INT 0
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
// if not unit or not enemy_unit then
48423: LD_VAR 0 1
48427: NOT
48428: PUSH
48429: LD_VAR 0 2
48433: NOT
48434: OR
48435: IFFALSE 48439
// exit ;
48437: GO 48906
// if GetLives ( i ) < 250 then
48439: LD_VAR 0 4
48443: PPUSH
48444: CALL_OW 256
48448: PUSH
48449: LD_INT 250
48451: LESS
48452: IFFALSE 48465
// begin ComAutodestruct ( i ) ;
48454: LD_VAR 0 4
48458: PPUSH
48459: CALL 48313 0 1
// exit ;
48463: GO 48906
// end ; x := GetX ( enemy_unit ) ;
48465: LD_ADDR_VAR 0 7
48469: PUSH
48470: LD_VAR 0 2
48474: PPUSH
48475: CALL_OW 250
48479: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48480: LD_ADDR_VAR 0 8
48484: PUSH
48485: LD_VAR 0 2
48489: PPUSH
48490: CALL_OW 251
48494: ST_TO_ADDR
// if not x or not y then
48495: LD_VAR 0 7
48499: NOT
48500: PUSH
48501: LD_VAR 0 8
48505: NOT
48506: OR
48507: IFFALSE 48511
// exit ;
48509: GO 48906
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48511: LD_ADDR_VAR 0 6
48515: PUSH
48516: LD_VAR 0 7
48520: PPUSH
48521: LD_INT 0
48523: PPUSH
48524: LD_INT 4
48526: PPUSH
48527: CALL_OW 272
48531: PUSH
48532: LD_VAR 0 8
48536: PPUSH
48537: LD_INT 0
48539: PPUSH
48540: LD_INT 4
48542: PPUSH
48543: CALL_OW 273
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_VAR 0 7
48556: PPUSH
48557: LD_INT 1
48559: PPUSH
48560: LD_INT 4
48562: PPUSH
48563: CALL_OW 272
48567: PUSH
48568: LD_VAR 0 8
48572: PPUSH
48573: LD_INT 1
48575: PPUSH
48576: LD_INT 4
48578: PPUSH
48579: CALL_OW 273
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_VAR 0 7
48592: PPUSH
48593: LD_INT 2
48595: PPUSH
48596: LD_INT 4
48598: PPUSH
48599: CALL_OW 272
48603: PUSH
48604: LD_VAR 0 8
48608: PPUSH
48609: LD_INT 2
48611: PPUSH
48612: LD_INT 4
48614: PPUSH
48615: CALL_OW 273
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_VAR 0 7
48628: PPUSH
48629: LD_INT 3
48631: PPUSH
48632: LD_INT 4
48634: PPUSH
48635: CALL_OW 272
48639: PUSH
48640: LD_VAR 0 8
48644: PPUSH
48645: LD_INT 3
48647: PPUSH
48648: LD_INT 4
48650: PPUSH
48651: CALL_OW 273
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_VAR 0 7
48664: PPUSH
48665: LD_INT 4
48667: PPUSH
48668: LD_INT 4
48670: PPUSH
48671: CALL_OW 272
48675: PUSH
48676: LD_VAR 0 8
48680: PPUSH
48681: LD_INT 4
48683: PPUSH
48684: LD_INT 4
48686: PPUSH
48687: CALL_OW 273
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_VAR 0 7
48700: PPUSH
48701: LD_INT 5
48703: PPUSH
48704: LD_INT 4
48706: PPUSH
48707: CALL_OW 272
48711: PUSH
48712: LD_VAR 0 8
48716: PPUSH
48717: LD_INT 5
48719: PPUSH
48720: LD_INT 4
48722: PPUSH
48723: CALL_OW 273
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: ST_TO_ADDR
// for i = tmp downto 1 do
48740: LD_ADDR_VAR 0 4
48744: PUSH
48745: DOUBLE
48746: LD_VAR 0 6
48750: INC
48751: ST_TO_ADDR
48752: LD_INT 1
48754: PUSH
48755: FOR_DOWNTO
48756: IFFALSE 48857
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48758: LD_VAR 0 6
48762: PUSH
48763: LD_VAR 0 4
48767: ARRAY
48768: PUSH
48769: LD_INT 1
48771: ARRAY
48772: PPUSH
48773: LD_VAR 0 6
48777: PUSH
48778: LD_VAR 0 4
48782: ARRAY
48783: PUSH
48784: LD_INT 2
48786: ARRAY
48787: PPUSH
48788: CALL_OW 488
48792: NOT
48793: PUSH
48794: LD_VAR 0 6
48798: PUSH
48799: LD_VAR 0 4
48803: ARRAY
48804: PUSH
48805: LD_INT 1
48807: ARRAY
48808: PPUSH
48809: LD_VAR 0 6
48813: PUSH
48814: LD_VAR 0 4
48818: ARRAY
48819: PUSH
48820: LD_INT 2
48822: ARRAY
48823: PPUSH
48824: CALL_OW 428
48828: PUSH
48829: LD_INT 0
48831: NONEQUAL
48832: OR
48833: IFFALSE 48855
// tmp := Delete ( tmp , i ) ;
48835: LD_ADDR_VAR 0 6
48839: PUSH
48840: LD_VAR 0 6
48844: PPUSH
48845: LD_VAR 0 4
48849: PPUSH
48850: CALL_OW 3
48854: ST_TO_ADDR
48855: GO 48755
48857: POP
48858: POP
// j := GetClosestHex ( unit , tmp ) ;
48859: LD_ADDR_VAR 0 5
48863: PUSH
48864: LD_VAR 0 1
48868: PPUSH
48869: LD_VAR 0 6
48873: PPUSH
48874: CALL 48161 0 2
48878: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48879: LD_VAR 0 1
48883: PPUSH
48884: LD_VAR 0 5
48888: PUSH
48889: LD_INT 1
48891: ARRAY
48892: PPUSH
48893: LD_VAR 0 5
48897: PUSH
48898: LD_INT 2
48900: ARRAY
48901: PPUSH
48902: CALL_OW 111
// end ;
48906: LD_VAR 0 3
48910: RET
// export function PrepareApemanSoldier ( ) ; begin
48911: LD_INT 0
48913: PPUSH
// uc_nation := 0 ;
48914: LD_ADDR_OWVAR 21
48918: PUSH
48919: LD_INT 0
48921: ST_TO_ADDR
// hc_sex := sex_male ;
48922: LD_ADDR_OWVAR 27
48926: PUSH
48927: LD_INT 1
48929: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
48930: LD_ADDR_OWVAR 28
48934: PUSH
48935: LD_INT 15
48937: ST_TO_ADDR
// hc_gallery :=  ;
48938: LD_ADDR_OWVAR 33
48942: PUSH
48943: LD_STRING 
48945: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
48946: LD_ADDR_OWVAR 31
48950: PUSH
48951: LD_INT 0
48953: PPUSH
48954: LD_INT 3
48956: PPUSH
48957: CALL_OW 12
48961: PUSH
48962: LD_INT 0
48964: PPUSH
48965: LD_INT 3
48967: PPUSH
48968: CALL_OW 12
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: ST_TO_ADDR
// end ;
48985: LD_VAR 0 1
48989: RET
// export function PrepareApemanEngineer ( ) ; begin
48990: LD_INT 0
48992: PPUSH
// uc_nation := 0 ;
48993: LD_ADDR_OWVAR 21
48997: PUSH
48998: LD_INT 0
49000: ST_TO_ADDR
// hc_sex := sex_male ;
49001: LD_ADDR_OWVAR 27
49005: PUSH
49006: LD_INT 1
49008: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
49009: LD_ADDR_OWVAR 28
49013: PUSH
49014: LD_INT 16
49016: ST_TO_ADDR
// hc_gallery :=  ;
49017: LD_ADDR_OWVAR 33
49021: PUSH
49022: LD_STRING 
49024: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49025: LD_ADDR_OWVAR 31
49029: PUSH
49030: LD_INT 0
49032: PPUSH
49033: LD_INT 3
49035: PPUSH
49036: CALL_OW 12
49040: PUSH
49041: LD_INT 0
49043: PPUSH
49044: LD_INT 3
49046: PPUSH
49047: CALL_OW 12
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: ST_TO_ADDR
// end ;
49064: LD_VAR 0 1
49068: RET
// export function PrepareApeman ( agressivity ) ; begin
49069: LD_INT 0
49071: PPUSH
// uc_side := 0 ;
49072: LD_ADDR_OWVAR 20
49076: PUSH
49077: LD_INT 0
49079: ST_TO_ADDR
// uc_nation := 0 ;
49080: LD_ADDR_OWVAR 21
49084: PUSH
49085: LD_INT 0
49087: ST_TO_ADDR
// hc_sex := sex_male ;
49088: LD_ADDR_OWVAR 27
49092: PUSH
49093: LD_INT 1
49095: ST_TO_ADDR
// hc_class := class_apeman ;
49096: LD_ADDR_OWVAR 28
49100: PUSH
49101: LD_INT 12
49103: ST_TO_ADDR
// hc_gallery :=  ;
49104: LD_ADDR_OWVAR 33
49108: PUSH
49109: LD_STRING 
49111: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49112: LD_ADDR_OWVAR 35
49116: PUSH
49117: LD_VAR 0 1
49121: NEG
49122: PPUSH
49123: LD_VAR 0 1
49127: PPUSH
49128: CALL_OW 12
49132: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
49133: LD_ADDR_OWVAR 31
49137: PUSH
49138: LD_INT 0
49140: PPUSH
49141: LD_INT 3
49143: PPUSH
49144: CALL_OW 12
49148: PUSH
49149: LD_INT 0
49151: PPUSH
49152: LD_INT 3
49154: PPUSH
49155: CALL_OW 12
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: ST_TO_ADDR
// end ;
49172: LD_VAR 0 2
49176: RET
// export function PrepareTiger ( agressivity ) ; begin
49177: LD_INT 0
49179: PPUSH
// uc_side := 0 ;
49180: LD_ADDR_OWVAR 20
49184: PUSH
49185: LD_INT 0
49187: ST_TO_ADDR
// uc_nation := 0 ;
49188: LD_ADDR_OWVAR 21
49192: PUSH
49193: LD_INT 0
49195: ST_TO_ADDR
// hc_class := class_tiger ;
49196: LD_ADDR_OWVAR 28
49200: PUSH
49201: LD_INT 14
49203: ST_TO_ADDR
// hc_gallery :=  ;
49204: LD_ADDR_OWVAR 33
49208: PUSH
49209: LD_STRING 
49211: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
49212: LD_ADDR_OWVAR 35
49216: PUSH
49217: LD_VAR 0 1
49221: NEG
49222: PPUSH
49223: LD_VAR 0 1
49227: PPUSH
49228: CALL_OW 12
49232: ST_TO_ADDR
// end ;
49233: LD_VAR 0 2
49237: RET
// export function PrepareEnchidna ( ) ; begin
49238: LD_INT 0
49240: PPUSH
// uc_side := 0 ;
49241: LD_ADDR_OWVAR 20
49245: PUSH
49246: LD_INT 0
49248: ST_TO_ADDR
// uc_nation := 0 ;
49249: LD_ADDR_OWVAR 21
49253: PUSH
49254: LD_INT 0
49256: ST_TO_ADDR
// hc_class := class_baggie ;
49257: LD_ADDR_OWVAR 28
49261: PUSH
49262: LD_INT 13
49264: ST_TO_ADDR
// hc_gallery :=  ;
49265: LD_ADDR_OWVAR 33
49269: PUSH
49270: LD_STRING 
49272: ST_TO_ADDR
// end ;
49273: LD_VAR 0 1
49277: RET
// export function PrepareFrog ( ) ; begin
49278: LD_INT 0
49280: PPUSH
// uc_side := 0 ;
49281: LD_ADDR_OWVAR 20
49285: PUSH
49286: LD_INT 0
49288: ST_TO_ADDR
// uc_nation := 0 ;
49289: LD_ADDR_OWVAR 21
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
// hc_class := class_frog ;
49297: LD_ADDR_OWVAR 28
49301: PUSH
49302: LD_INT 19
49304: ST_TO_ADDR
// hc_gallery :=  ;
49305: LD_ADDR_OWVAR 33
49309: PUSH
49310: LD_STRING 
49312: ST_TO_ADDR
// end ;
49313: LD_VAR 0 1
49317: RET
// export function PrepareFish ( ) ; begin
49318: LD_INT 0
49320: PPUSH
// uc_side := 0 ;
49321: LD_ADDR_OWVAR 20
49325: PUSH
49326: LD_INT 0
49328: ST_TO_ADDR
// uc_nation := 0 ;
49329: LD_ADDR_OWVAR 21
49333: PUSH
49334: LD_INT 0
49336: ST_TO_ADDR
// hc_class := class_fish ;
49337: LD_ADDR_OWVAR 28
49341: PUSH
49342: LD_INT 20
49344: ST_TO_ADDR
// hc_gallery :=  ;
49345: LD_ADDR_OWVAR 33
49349: PUSH
49350: LD_STRING 
49352: ST_TO_ADDR
// end ;
49353: LD_VAR 0 1
49357: RET
// export function PrepareBird ( ) ; begin
49358: LD_INT 0
49360: PPUSH
// uc_side := 0 ;
49361: LD_ADDR_OWVAR 20
49365: PUSH
49366: LD_INT 0
49368: ST_TO_ADDR
// uc_nation := 0 ;
49369: LD_ADDR_OWVAR 21
49373: PUSH
49374: LD_INT 0
49376: ST_TO_ADDR
// hc_class := class_phororhacos ;
49377: LD_ADDR_OWVAR 28
49381: PUSH
49382: LD_INT 18
49384: ST_TO_ADDR
// hc_gallery :=  ;
49385: LD_ADDR_OWVAR 33
49389: PUSH
49390: LD_STRING 
49392: ST_TO_ADDR
// end ;
49393: LD_VAR 0 1
49397: RET
// export function PrepareHorse ( ) ; begin
49398: LD_INT 0
49400: PPUSH
// uc_side := 0 ;
49401: LD_ADDR_OWVAR 20
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// uc_nation := 0 ;
49409: LD_ADDR_OWVAR 21
49413: PUSH
49414: LD_INT 0
49416: ST_TO_ADDR
// hc_class := class_horse ;
49417: LD_ADDR_OWVAR 28
49421: PUSH
49422: LD_INT 21
49424: ST_TO_ADDR
// hc_gallery :=  ;
49425: LD_ADDR_OWVAR 33
49429: PUSH
49430: LD_STRING 
49432: ST_TO_ADDR
// end ;
49433: LD_VAR 0 1
49437: RET
// export function PrepareMastodont ( ) ; begin
49438: LD_INT 0
49440: PPUSH
// uc_side := 0 ;
49441: LD_ADDR_OWVAR 20
49445: PUSH
49446: LD_INT 0
49448: ST_TO_ADDR
// uc_nation := 0 ;
49449: LD_ADDR_OWVAR 21
49453: PUSH
49454: LD_INT 0
49456: ST_TO_ADDR
// vc_chassis := class_mastodont ;
49457: LD_ADDR_OWVAR 37
49461: PUSH
49462: LD_INT 31
49464: ST_TO_ADDR
// vc_control := control_rider ;
49465: LD_ADDR_OWVAR 38
49469: PUSH
49470: LD_INT 4
49472: ST_TO_ADDR
// end ;
49473: LD_VAR 0 1
49477: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49478: LD_INT 0
49480: PPUSH
49481: PPUSH
49482: PPUSH
// uc_side = 0 ;
49483: LD_ADDR_OWVAR 20
49487: PUSH
49488: LD_INT 0
49490: ST_TO_ADDR
// uc_nation = 0 ;
49491: LD_ADDR_OWVAR 21
49495: PUSH
49496: LD_INT 0
49498: ST_TO_ADDR
// InitHc_All ( ) ;
49499: CALL_OW 584
// InitVc ;
49503: CALL_OW 20
// if mastodonts then
49507: LD_VAR 0 6
49511: IFFALSE 49578
// for i = 1 to mastodonts do
49513: LD_ADDR_VAR 0 11
49517: PUSH
49518: DOUBLE
49519: LD_INT 1
49521: DEC
49522: ST_TO_ADDR
49523: LD_VAR 0 6
49527: PUSH
49528: FOR_TO
49529: IFFALSE 49576
// begin vc_chassis := 31 ;
49531: LD_ADDR_OWVAR 37
49535: PUSH
49536: LD_INT 31
49538: ST_TO_ADDR
// vc_control := control_rider ;
49539: LD_ADDR_OWVAR 38
49543: PUSH
49544: LD_INT 4
49546: ST_TO_ADDR
// animal := CreateVehicle ;
49547: LD_ADDR_VAR 0 12
49551: PUSH
49552: CALL_OW 45
49556: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49557: LD_VAR 0 12
49561: PPUSH
49562: LD_VAR 0 8
49566: PPUSH
49567: LD_INT 0
49569: PPUSH
49570: CALL 51706 0 3
// end ;
49574: GO 49528
49576: POP
49577: POP
// if horses then
49578: LD_VAR 0 5
49582: IFFALSE 49649
// for i = 1 to horses do
49584: LD_ADDR_VAR 0 11
49588: PUSH
49589: DOUBLE
49590: LD_INT 1
49592: DEC
49593: ST_TO_ADDR
49594: LD_VAR 0 5
49598: PUSH
49599: FOR_TO
49600: IFFALSE 49647
// begin hc_class := 21 ;
49602: LD_ADDR_OWVAR 28
49606: PUSH
49607: LD_INT 21
49609: ST_TO_ADDR
// hc_gallery :=  ;
49610: LD_ADDR_OWVAR 33
49614: PUSH
49615: LD_STRING 
49617: ST_TO_ADDR
// animal := CreateHuman ;
49618: LD_ADDR_VAR 0 12
49622: PUSH
49623: CALL_OW 44
49627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49628: LD_VAR 0 12
49632: PPUSH
49633: LD_VAR 0 8
49637: PPUSH
49638: LD_INT 0
49640: PPUSH
49641: CALL 51706 0 3
// end ;
49645: GO 49599
49647: POP
49648: POP
// if birds then
49649: LD_VAR 0 1
49653: IFFALSE 49720
// for i = 1 to birds do
49655: LD_ADDR_VAR 0 11
49659: PUSH
49660: DOUBLE
49661: LD_INT 1
49663: DEC
49664: ST_TO_ADDR
49665: LD_VAR 0 1
49669: PUSH
49670: FOR_TO
49671: IFFALSE 49718
// begin hc_class := 18 ;
49673: LD_ADDR_OWVAR 28
49677: PUSH
49678: LD_INT 18
49680: ST_TO_ADDR
// hc_gallery =  ;
49681: LD_ADDR_OWVAR 33
49685: PUSH
49686: LD_STRING 
49688: ST_TO_ADDR
// animal := CreateHuman ;
49689: LD_ADDR_VAR 0 12
49693: PUSH
49694: CALL_OW 44
49698: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49699: LD_VAR 0 12
49703: PPUSH
49704: LD_VAR 0 8
49708: PPUSH
49709: LD_INT 0
49711: PPUSH
49712: CALL 51706 0 3
// end ;
49716: GO 49670
49718: POP
49719: POP
// if tigers then
49720: LD_VAR 0 2
49724: IFFALSE 49808
// for i = 1 to tigers do
49726: LD_ADDR_VAR 0 11
49730: PUSH
49731: DOUBLE
49732: LD_INT 1
49734: DEC
49735: ST_TO_ADDR
49736: LD_VAR 0 2
49740: PUSH
49741: FOR_TO
49742: IFFALSE 49806
// begin hc_class = class_tiger ;
49744: LD_ADDR_OWVAR 28
49748: PUSH
49749: LD_INT 14
49751: ST_TO_ADDR
// hc_gallery =  ;
49752: LD_ADDR_OWVAR 33
49756: PUSH
49757: LD_STRING 
49759: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49760: LD_ADDR_OWVAR 35
49764: PUSH
49765: LD_INT 7
49767: NEG
49768: PPUSH
49769: LD_INT 7
49771: PPUSH
49772: CALL_OW 12
49776: ST_TO_ADDR
// animal := CreateHuman ;
49777: LD_ADDR_VAR 0 12
49781: PUSH
49782: CALL_OW 44
49786: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49787: LD_VAR 0 12
49791: PPUSH
49792: LD_VAR 0 8
49796: PPUSH
49797: LD_INT 0
49799: PPUSH
49800: CALL 51706 0 3
// end ;
49804: GO 49741
49806: POP
49807: POP
// if apemans then
49808: LD_VAR 0 3
49812: IFFALSE 49935
// for i = 1 to apemans do
49814: LD_ADDR_VAR 0 11
49818: PUSH
49819: DOUBLE
49820: LD_INT 1
49822: DEC
49823: ST_TO_ADDR
49824: LD_VAR 0 3
49828: PUSH
49829: FOR_TO
49830: IFFALSE 49933
// begin hc_class = class_apeman ;
49832: LD_ADDR_OWVAR 28
49836: PUSH
49837: LD_INT 12
49839: ST_TO_ADDR
// hc_gallery =  ;
49840: LD_ADDR_OWVAR 33
49844: PUSH
49845: LD_STRING 
49847: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49848: LD_ADDR_OWVAR 35
49852: PUSH
49853: LD_INT 2
49855: NEG
49856: PPUSH
49857: LD_INT 2
49859: PPUSH
49860: CALL_OW 12
49864: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49865: LD_ADDR_OWVAR 31
49869: PUSH
49870: LD_INT 1
49872: PPUSH
49873: LD_INT 3
49875: PPUSH
49876: CALL_OW 12
49880: PUSH
49881: LD_INT 1
49883: PPUSH
49884: LD_INT 3
49886: PPUSH
49887: CALL_OW 12
49891: PUSH
49892: LD_INT 0
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: ST_TO_ADDR
// animal := CreateHuman ;
49904: LD_ADDR_VAR 0 12
49908: PUSH
49909: CALL_OW 44
49913: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49914: LD_VAR 0 12
49918: PPUSH
49919: LD_VAR 0 8
49923: PPUSH
49924: LD_INT 0
49926: PPUSH
49927: CALL 51706 0 3
// end ;
49931: GO 49829
49933: POP
49934: POP
// if enchidnas then
49935: LD_VAR 0 4
49939: IFFALSE 50006
// for i = 1 to enchidnas do
49941: LD_ADDR_VAR 0 11
49945: PUSH
49946: DOUBLE
49947: LD_INT 1
49949: DEC
49950: ST_TO_ADDR
49951: LD_VAR 0 4
49955: PUSH
49956: FOR_TO
49957: IFFALSE 50004
// begin hc_class = 13 ;
49959: LD_ADDR_OWVAR 28
49963: PUSH
49964: LD_INT 13
49966: ST_TO_ADDR
// hc_gallery =  ;
49967: LD_ADDR_OWVAR 33
49971: PUSH
49972: LD_STRING 
49974: ST_TO_ADDR
// animal := CreateHuman ;
49975: LD_ADDR_VAR 0 12
49979: PUSH
49980: CALL_OW 44
49984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49985: LD_VAR 0 12
49989: PPUSH
49990: LD_VAR 0 8
49994: PPUSH
49995: LD_INT 0
49997: PPUSH
49998: CALL 51706 0 3
// end ;
50002: GO 49956
50004: POP
50005: POP
// if fishes then
50006: LD_VAR 0 7
50010: IFFALSE 50077
// for i = 1 to fishes do
50012: LD_ADDR_VAR 0 11
50016: PUSH
50017: DOUBLE
50018: LD_INT 1
50020: DEC
50021: ST_TO_ADDR
50022: LD_VAR 0 7
50026: PUSH
50027: FOR_TO
50028: IFFALSE 50075
// begin hc_class = 20 ;
50030: LD_ADDR_OWVAR 28
50034: PUSH
50035: LD_INT 20
50037: ST_TO_ADDR
// hc_gallery =  ;
50038: LD_ADDR_OWVAR 33
50042: PUSH
50043: LD_STRING 
50045: ST_TO_ADDR
// animal := CreateHuman ;
50046: LD_ADDR_VAR 0 12
50050: PUSH
50051: CALL_OW 44
50055: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50056: LD_VAR 0 12
50060: PPUSH
50061: LD_VAR 0 9
50065: PPUSH
50066: LD_INT 0
50068: PPUSH
50069: CALL 51706 0 3
// end ;
50073: GO 50027
50075: POP
50076: POP
// end ;
50077: LD_VAR 0 10
50081: RET
// export function WantHeal ( sci , unit ) ; begin
50082: LD_INT 0
50084: PPUSH
// if GetTaskList ( sci ) > 0 then
50085: LD_VAR 0 1
50089: PPUSH
50090: CALL_OW 437
50094: PUSH
50095: LD_INT 0
50097: GREATER
50098: IFFALSE 50168
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50100: LD_VAR 0 1
50104: PPUSH
50105: CALL_OW 437
50109: PUSH
50110: LD_INT 1
50112: ARRAY
50113: PUSH
50114: LD_INT 1
50116: ARRAY
50117: PUSH
50118: LD_STRING l
50120: EQUAL
50121: PUSH
50122: LD_VAR 0 1
50126: PPUSH
50127: CALL_OW 437
50131: PUSH
50132: LD_INT 1
50134: ARRAY
50135: PUSH
50136: LD_INT 4
50138: ARRAY
50139: PUSH
50140: LD_VAR 0 2
50144: EQUAL
50145: AND
50146: IFFALSE 50158
// result := true else
50148: LD_ADDR_VAR 0 3
50152: PUSH
50153: LD_INT 1
50155: ST_TO_ADDR
50156: GO 50166
// result := false ;
50158: LD_ADDR_VAR 0 3
50162: PUSH
50163: LD_INT 0
50165: ST_TO_ADDR
// end else
50166: GO 50176
// result := false ;
50168: LD_ADDR_VAR 0 3
50172: PUSH
50173: LD_INT 0
50175: ST_TO_ADDR
// end ;
50176: LD_VAR 0 3
50180: RET
// export function HealTarget ( sci ) ; begin
50181: LD_INT 0
50183: PPUSH
// if not sci then
50184: LD_VAR 0 1
50188: NOT
50189: IFFALSE 50193
// exit ;
50191: GO 50258
// result := 0 ;
50193: LD_ADDR_VAR 0 2
50197: PUSH
50198: LD_INT 0
50200: ST_TO_ADDR
// if GetTaskList ( sci ) then
50201: LD_VAR 0 1
50205: PPUSH
50206: CALL_OW 437
50210: IFFALSE 50258
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50212: LD_VAR 0 1
50216: PPUSH
50217: CALL_OW 437
50221: PUSH
50222: LD_INT 1
50224: ARRAY
50225: PUSH
50226: LD_INT 1
50228: ARRAY
50229: PUSH
50230: LD_STRING l
50232: EQUAL
50233: IFFALSE 50258
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50235: LD_ADDR_VAR 0 2
50239: PUSH
50240: LD_VAR 0 1
50244: PPUSH
50245: CALL_OW 437
50249: PUSH
50250: LD_INT 1
50252: ARRAY
50253: PUSH
50254: LD_INT 4
50256: ARRAY
50257: ST_TO_ADDR
// end ;
50258: LD_VAR 0 2
50262: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50263: LD_INT 0
50265: PPUSH
50266: PPUSH
50267: PPUSH
50268: PPUSH
// if not base_units then
50269: LD_VAR 0 1
50273: NOT
50274: IFFALSE 50278
// exit ;
50276: GO 50365
// result := false ;
50278: LD_ADDR_VAR 0 2
50282: PUSH
50283: LD_INT 0
50285: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50286: LD_ADDR_VAR 0 5
50290: PUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: LD_INT 21
50298: PUSH
50299: LD_INT 3
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PPUSH
50306: CALL_OW 72
50310: ST_TO_ADDR
// if not tmp then
50311: LD_VAR 0 5
50315: NOT
50316: IFFALSE 50320
// exit ;
50318: GO 50365
// for i in tmp do
50320: LD_ADDR_VAR 0 3
50324: PUSH
50325: LD_VAR 0 5
50329: PUSH
50330: FOR_IN
50331: IFFALSE 50363
// begin result := EnemyInRange ( i , 22 ) ;
50333: LD_ADDR_VAR 0 2
50337: PUSH
50338: LD_VAR 0 3
50342: PPUSH
50343: LD_INT 22
50345: PPUSH
50346: CALL 47963 0 2
50350: ST_TO_ADDR
// if result then
50351: LD_VAR 0 2
50355: IFFALSE 50361
// exit ;
50357: POP
50358: POP
50359: GO 50365
// end ;
50361: GO 50330
50363: POP
50364: POP
// end ;
50365: LD_VAR 0 2
50369: RET
// export function FilterByTag ( units , tag ) ; begin
50370: LD_INT 0
50372: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
50373: LD_ADDR_VAR 0 3
50377: PUSH
50378: LD_VAR 0 1
50382: PPUSH
50383: LD_INT 120
50385: PUSH
50386: LD_VAR 0 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PPUSH
50395: CALL_OW 72
50399: ST_TO_ADDR
// end ;
50400: LD_VAR 0 3
50404: RET
// export function IsDriver ( un ) ; begin
50405: LD_INT 0
50407: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50408: LD_ADDR_VAR 0 2
50412: PUSH
50413: LD_VAR 0 1
50417: PUSH
50418: LD_INT 55
50420: PUSH
50421: EMPTY
50422: LIST
50423: PPUSH
50424: CALL_OW 69
50428: IN
50429: ST_TO_ADDR
// end ;
50430: LD_VAR 0 2
50434: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50435: LD_INT 0
50437: PPUSH
50438: PPUSH
// list := [ ] ;
50439: LD_ADDR_VAR 0 5
50443: PUSH
50444: EMPTY
50445: ST_TO_ADDR
// case d of 0 :
50446: LD_VAR 0 3
50450: PUSH
50451: LD_INT 0
50453: DOUBLE
50454: EQUAL
50455: IFTRUE 50459
50457: GO 50592
50459: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50460: LD_ADDR_VAR 0 5
50464: PUSH
50465: LD_VAR 0 1
50469: PUSH
50470: LD_INT 4
50472: MINUS
50473: PUSH
50474: LD_VAR 0 2
50478: PUSH
50479: LD_INT 4
50481: MINUS
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: LIST
50490: PUSH
50491: LD_VAR 0 1
50495: PUSH
50496: LD_INT 3
50498: MINUS
50499: PUSH
50500: LD_VAR 0 2
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: LIST
50512: PUSH
50513: LD_VAR 0 1
50517: PUSH
50518: LD_INT 4
50520: PLUS
50521: PUSH
50522: LD_VAR 0 2
50526: PUSH
50527: LD_INT 4
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: LIST
50534: PUSH
50535: LD_VAR 0 1
50539: PUSH
50540: LD_INT 3
50542: PLUS
50543: PUSH
50544: LD_VAR 0 2
50548: PUSH
50549: LD_INT 3
50551: PLUS
50552: PUSH
50553: LD_INT 5
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: PUSH
50561: LD_VAR 0 1
50565: PUSH
50566: LD_VAR 0 2
50570: PUSH
50571: LD_INT 4
50573: PLUS
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: ST_TO_ADDR
// end ; 1 :
50590: GO 51290
50592: LD_INT 1
50594: DOUBLE
50595: EQUAL
50596: IFTRUE 50600
50598: GO 50733
50600: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50601: LD_ADDR_VAR 0 5
50605: PUSH
50606: LD_VAR 0 1
50610: PUSH
50611: LD_VAR 0 2
50615: PUSH
50616: LD_INT 4
50618: MINUS
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: PUSH
50628: LD_VAR 0 1
50632: PUSH
50633: LD_INT 3
50635: MINUS
50636: PUSH
50637: LD_VAR 0 2
50641: PUSH
50642: LD_INT 3
50644: MINUS
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: LIST
50653: PUSH
50654: LD_VAR 0 1
50658: PUSH
50659: LD_INT 4
50661: MINUS
50662: PUSH
50663: LD_VAR 0 2
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: PUSH
50676: LD_VAR 0 1
50680: PUSH
50681: LD_VAR 0 2
50685: PUSH
50686: LD_INT 3
50688: PLUS
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: PUSH
50698: LD_VAR 0 1
50702: PUSH
50703: LD_INT 4
50705: PLUS
50706: PUSH
50707: LD_VAR 0 2
50711: PUSH
50712: LD_INT 4
50714: PLUS
50715: PUSH
50716: LD_INT 5
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: LIST
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: ST_TO_ADDR
// end ; 2 :
50731: GO 51290
50733: LD_INT 2
50735: DOUBLE
50736: EQUAL
50737: IFTRUE 50741
50739: GO 50870
50741: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50742: LD_ADDR_VAR 0 5
50746: PUSH
50747: LD_VAR 0 1
50751: PUSH
50752: LD_VAR 0 2
50756: PUSH
50757: LD_INT 3
50759: MINUS
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: LIST
50768: PUSH
50769: LD_VAR 0 1
50773: PUSH
50774: LD_INT 4
50776: PLUS
50777: PUSH
50778: LD_VAR 0 2
50782: PUSH
50783: LD_INT 4
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: LIST
50790: PUSH
50791: LD_VAR 0 1
50795: PUSH
50796: LD_VAR 0 2
50800: PUSH
50801: LD_INT 4
50803: PLUS
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: LIST
50812: PUSH
50813: LD_VAR 0 1
50817: PUSH
50818: LD_INT 3
50820: MINUS
50821: PUSH
50822: LD_VAR 0 2
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: PUSH
50835: LD_VAR 0 1
50839: PUSH
50840: LD_INT 4
50842: MINUS
50843: PUSH
50844: LD_VAR 0 2
50848: PUSH
50849: LD_INT 4
50851: MINUS
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: ST_TO_ADDR
// end ; 3 :
50868: GO 51290
50870: LD_INT 3
50872: DOUBLE
50873: EQUAL
50874: IFTRUE 50878
50876: GO 51011
50878: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50879: LD_ADDR_VAR 0 5
50883: PUSH
50884: LD_VAR 0 1
50888: PUSH
50889: LD_INT 3
50891: PLUS
50892: PUSH
50893: LD_VAR 0 2
50897: PUSH
50898: LD_INT 4
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: LIST
50905: PUSH
50906: LD_VAR 0 1
50910: PUSH
50911: LD_INT 4
50913: PLUS
50914: PUSH
50915: LD_VAR 0 2
50919: PUSH
50920: LD_INT 4
50922: PLUS
50923: PUSH
50924: LD_INT 5
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: PUSH
50932: LD_VAR 0 1
50936: PUSH
50937: LD_INT 4
50939: MINUS
50940: PUSH
50941: LD_VAR 0 2
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: PUSH
50954: LD_VAR 0 1
50958: PUSH
50959: LD_VAR 0 2
50963: PUSH
50964: LD_INT 4
50966: MINUS
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: LIST
50975: PUSH
50976: LD_VAR 0 1
50980: PUSH
50981: LD_INT 3
50983: MINUS
50984: PUSH
50985: LD_VAR 0 2
50989: PUSH
50990: LD_INT 3
50992: MINUS
50993: PUSH
50994: LD_INT 2
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: ST_TO_ADDR
// end ; 4 :
51009: GO 51290
51011: LD_INT 4
51013: DOUBLE
51014: EQUAL
51015: IFTRUE 51019
51017: GO 51152
51019: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51020: LD_ADDR_VAR 0 5
51024: PUSH
51025: LD_VAR 0 1
51029: PUSH
51030: LD_VAR 0 2
51034: PUSH
51035: LD_INT 4
51037: PLUS
51038: PUSH
51039: LD_INT 0
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: PUSH
51047: LD_VAR 0 1
51051: PUSH
51052: LD_INT 3
51054: PLUS
51055: PUSH
51056: LD_VAR 0 2
51060: PUSH
51061: LD_INT 3
51063: PLUS
51064: PUSH
51065: LD_INT 5
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: PUSH
51073: LD_VAR 0 1
51077: PUSH
51078: LD_INT 4
51080: PLUS
51081: PUSH
51082: LD_VAR 0 2
51086: PUSH
51087: LD_INT 4
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: LIST
51094: PUSH
51095: LD_VAR 0 1
51099: PUSH
51100: LD_VAR 0 2
51104: PUSH
51105: LD_INT 3
51107: MINUS
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: PUSH
51117: LD_VAR 0 1
51121: PUSH
51122: LD_INT 4
51124: MINUS
51125: PUSH
51126: LD_VAR 0 2
51130: PUSH
51131: LD_INT 4
51133: MINUS
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: ST_TO_ADDR
// end ; 5 :
51150: GO 51290
51152: LD_INT 5
51154: DOUBLE
51155: EQUAL
51156: IFTRUE 51160
51158: GO 51289
51160: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51161: LD_ADDR_VAR 0 5
51165: PUSH
51166: LD_VAR 0 1
51170: PUSH
51171: LD_INT 4
51173: MINUS
51174: PUSH
51175: LD_VAR 0 2
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: PUSH
51188: LD_VAR 0 1
51192: PUSH
51193: LD_VAR 0 2
51197: PUSH
51198: LD_INT 4
51200: MINUS
51201: PUSH
51202: LD_INT 3
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: LIST
51209: PUSH
51210: LD_VAR 0 1
51214: PUSH
51215: LD_INT 4
51217: PLUS
51218: PUSH
51219: LD_VAR 0 2
51223: PUSH
51224: LD_INT 4
51226: PLUS
51227: PUSH
51228: LD_INT 5
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: PUSH
51236: LD_VAR 0 1
51240: PUSH
51241: LD_INT 3
51243: PLUS
51244: PUSH
51245: LD_VAR 0 2
51249: PUSH
51250: LD_INT 4
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: LIST
51257: PUSH
51258: LD_VAR 0 1
51262: PUSH
51263: LD_VAR 0 2
51267: PUSH
51268: LD_INT 3
51270: PLUS
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// end ; end ;
51287: GO 51290
51289: POP
// result := list ;
51290: LD_ADDR_VAR 0 4
51294: PUSH
51295: LD_VAR 0 5
51299: ST_TO_ADDR
// end ;
51300: LD_VAR 0 4
51304: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51305: LD_INT 0
51307: PPUSH
51308: PPUSH
51309: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51310: LD_VAR 0 1
51314: NOT
51315: PUSH
51316: LD_VAR 0 2
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: LD_INT 4
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: IN
51339: NOT
51340: OR
51341: IFFALSE 51345
// exit ;
51343: GO 51428
// tmp := [ ] ;
51345: LD_ADDR_VAR 0 5
51349: PUSH
51350: EMPTY
51351: ST_TO_ADDR
// for i in units do
51352: LD_ADDR_VAR 0 4
51356: PUSH
51357: LD_VAR 0 1
51361: PUSH
51362: FOR_IN
51363: IFFALSE 51397
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
51365: LD_ADDR_VAR 0 5
51369: PUSH
51370: LD_VAR 0 5
51374: PPUSH
51375: LD_VAR 0 4
51379: PPUSH
51380: LD_VAR 0 2
51384: PPUSH
51385: CALL_OW 259
51389: PPUSH
51390: CALL 52801 0 2
51394: ST_TO_ADDR
51395: GO 51362
51397: POP
51398: POP
// if not tmp then
51399: LD_VAR 0 5
51403: NOT
51404: IFFALSE 51408
// exit ;
51406: GO 51428
// result := SortListByListDesc ( units , tmp ) ;
51408: LD_ADDR_VAR 0 3
51412: PUSH
51413: LD_VAR 0 1
51417: PPUSH
51418: LD_VAR 0 5
51422: PPUSH
51423: CALL_OW 77
51427: ST_TO_ADDR
// end ;
51428: LD_VAR 0 3
51432: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51433: LD_INT 0
51435: PPUSH
51436: PPUSH
51437: PPUSH
// result := false ;
51438: LD_ADDR_VAR 0 3
51442: PUSH
51443: LD_INT 0
51445: ST_TO_ADDR
// if not building then
51446: LD_VAR 0 2
51450: NOT
51451: IFFALSE 51455
// exit ;
51453: GO 51593
// x := GetX ( building ) ;
51455: LD_ADDR_VAR 0 4
51459: PUSH
51460: LD_VAR 0 2
51464: PPUSH
51465: CALL_OW 250
51469: ST_TO_ADDR
// y := GetY ( building ) ;
51470: LD_ADDR_VAR 0 5
51474: PUSH
51475: LD_VAR 0 2
51479: PPUSH
51480: CALL_OW 251
51484: ST_TO_ADDR
// if not x or not y then
51485: LD_VAR 0 4
51489: NOT
51490: PUSH
51491: LD_VAR 0 5
51495: NOT
51496: OR
51497: IFFALSE 51501
// exit ;
51499: GO 51593
// if GetTaskList ( unit ) then
51501: LD_VAR 0 1
51505: PPUSH
51506: CALL_OW 437
51510: IFFALSE 51593
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51512: LD_STRING e
51514: PUSH
51515: LD_VAR 0 1
51519: PPUSH
51520: CALL_OW 437
51524: PUSH
51525: LD_INT 1
51527: ARRAY
51528: PUSH
51529: LD_INT 1
51531: ARRAY
51532: EQUAL
51533: PUSH
51534: LD_VAR 0 4
51538: PUSH
51539: LD_VAR 0 1
51543: PPUSH
51544: CALL_OW 437
51548: PUSH
51549: LD_INT 1
51551: ARRAY
51552: PUSH
51553: LD_INT 2
51555: ARRAY
51556: EQUAL
51557: AND
51558: PUSH
51559: LD_VAR 0 5
51563: PUSH
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL_OW 437
51573: PUSH
51574: LD_INT 1
51576: ARRAY
51577: PUSH
51578: LD_INT 3
51580: ARRAY
51581: EQUAL
51582: AND
51583: IFFALSE 51593
// result := true end ;
51585: LD_ADDR_VAR 0 3
51589: PUSH
51590: LD_INT 1
51592: ST_TO_ADDR
// end ;
51593: LD_VAR 0 3
51597: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51598: LD_INT 0
51600: PPUSH
// result := false ;
51601: LD_ADDR_VAR 0 4
51605: PUSH
51606: LD_INT 0
51608: ST_TO_ADDR
// if GetTaskList ( unit ) then
51609: LD_VAR 0 1
51613: PPUSH
51614: CALL_OW 437
51618: IFFALSE 51701
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51620: LD_STRING M
51622: PUSH
51623: LD_VAR 0 1
51627: PPUSH
51628: CALL_OW 437
51632: PUSH
51633: LD_INT 1
51635: ARRAY
51636: PUSH
51637: LD_INT 1
51639: ARRAY
51640: EQUAL
51641: PUSH
51642: LD_VAR 0 2
51646: PUSH
51647: LD_VAR 0 1
51651: PPUSH
51652: CALL_OW 437
51656: PUSH
51657: LD_INT 1
51659: ARRAY
51660: PUSH
51661: LD_INT 2
51663: ARRAY
51664: EQUAL
51665: AND
51666: PUSH
51667: LD_VAR 0 3
51671: PUSH
51672: LD_VAR 0 1
51676: PPUSH
51677: CALL_OW 437
51681: PUSH
51682: LD_INT 1
51684: ARRAY
51685: PUSH
51686: LD_INT 3
51688: ARRAY
51689: EQUAL
51690: AND
51691: IFFALSE 51701
// result := true ;
51693: LD_ADDR_VAR 0 4
51697: PUSH
51698: LD_INT 1
51700: ST_TO_ADDR
// end ; end ;
51701: LD_VAR 0 4
51705: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51706: LD_INT 0
51708: PPUSH
51709: PPUSH
51710: PPUSH
51711: PPUSH
// if not unit or not area then
51712: LD_VAR 0 1
51716: NOT
51717: PUSH
51718: LD_VAR 0 2
51722: NOT
51723: OR
51724: IFFALSE 51728
// exit ;
51726: GO 51904
// tmp := AreaToList ( area , i ) ;
51728: LD_ADDR_VAR 0 6
51732: PUSH
51733: LD_VAR 0 2
51737: PPUSH
51738: LD_VAR 0 5
51742: PPUSH
51743: CALL_OW 517
51747: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51748: LD_ADDR_VAR 0 5
51752: PUSH
51753: DOUBLE
51754: LD_INT 1
51756: DEC
51757: ST_TO_ADDR
51758: LD_VAR 0 6
51762: PUSH
51763: LD_INT 1
51765: ARRAY
51766: PUSH
51767: FOR_TO
51768: IFFALSE 51902
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51770: LD_ADDR_VAR 0 7
51774: PUSH
51775: LD_VAR 0 6
51779: PUSH
51780: LD_INT 1
51782: ARRAY
51783: PUSH
51784: LD_VAR 0 5
51788: ARRAY
51789: PUSH
51790: LD_VAR 0 6
51794: PUSH
51795: LD_INT 2
51797: ARRAY
51798: PUSH
51799: LD_VAR 0 5
51803: ARRAY
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
51809: LD_INT 92
51811: PUSH
51812: LD_VAR 0 7
51816: PUSH
51817: LD_INT 1
51819: ARRAY
51820: PUSH
51821: LD_VAR 0 7
51825: PUSH
51826: LD_INT 2
51828: ARRAY
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: PPUSH
51839: CALL_OW 69
51843: PUSH
51844: LD_INT 0
51846: EQUAL
51847: IFFALSE 51900
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51849: LD_VAR 0 1
51853: PPUSH
51854: LD_VAR 0 7
51858: PUSH
51859: LD_INT 1
51861: ARRAY
51862: PPUSH
51863: LD_VAR 0 7
51867: PUSH
51868: LD_INT 2
51870: ARRAY
51871: PPUSH
51872: LD_VAR 0 3
51876: PPUSH
51877: CALL_OW 48
// result := IsPlaced ( unit ) ;
51881: LD_ADDR_VAR 0 4
51885: PUSH
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 305
51895: ST_TO_ADDR
// exit ;
51896: POP
51897: POP
51898: GO 51904
// end ; end ;
51900: GO 51767
51902: POP
51903: POP
// end ;
51904: LD_VAR 0 4
51908: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51909: LD_INT 0
51911: PPUSH
51912: PPUSH
51913: PPUSH
// if not side or side > 8 then
51914: LD_VAR 0 1
51918: NOT
51919: PUSH
51920: LD_VAR 0 1
51924: PUSH
51925: LD_INT 8
51927: GREATER
51928: OR
51929: IFFALSE 51933
// exit ;
51931: GO 52120
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51933: LD_ADDR_VAR 0 4
51937: PUSH
51938: LD_INT 22
51940: PUSH
51941: LD_VAR 0 1
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 21
51952: PUSH
51953: LD_INT 3
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PPUSH
51964: CALL_OW 69
51968: ST_TO_ADDR
// if not tmp then
51969: LD_VAR 0 4
51973: NOT
51974: IFFALSE 51978
// exit ;
51976: GO 52120
// enable_addtolog := true ;
51978: LD_ADDR_OWVAR 81
51982: PUSH
51983: LD_INT 1
51985: ST_TO_ADDR
// AddToLog ( [ ) ;
51986: LD_STRING [
51988: PPUSH
51989: CALL_OW 561
// for i in tmp do
51993: LD_ADDR_VAR 0 3
51997: PUSH
51998: LD_VAR 0 4
52002: PUSH
52003: FOR_IN
52004: IFFALSE 52111
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52006: LD_STRING [
52008: PUSH
52009: LD_VAR 0 3
52013: PPUSH
52014: CALL_OW 266
52018: STR
52019: PUSH
52020: LD_STRING , 
52022: STR
52023: PUSH
52024: LD_VAR 0 3
52028: PPUSH
52029: CALL_OW 250
52033: STR
52034: PUSH
52035: LD_STRING , 
52037: STR
52038: PUSH
52039: LD_VAR 0 3
52043: PPUSH
52044: CALL_OW 251
52048: STR
52049: PUSH
52050: LD_STRING , 
52052: STR
52053: PUSH
52054: LD_VAR 0 3
52058: PPUSH
52059: CALL_OW 254
52063: STR
52064: PUSH
52065: LD_STRING , 
52067: STR
52068: PUSH
52069: LD_VAR 0 3
52073: PPUSH
52074: LD_INT 1
52076: PPUSH
52077: CALL_OW 268
52081: STR
52082: PUSH
52083: LD_STRING , 
52085: STR
52086: PUSH
52087: LD_VAR 0 3
52091: PPUSH
52092: LD_INT 2
52094: PPUSH
52095: CALL_OW 268
52099: STR
52100: PUSH
52101: LD_STRING ],
52103: STR
52104: PPUSH
52105: CALL_OW 561
// end ;
52109: GO 52003
52111: POP
52112: POP
// AddToLog ( ]; ) ;
52113: LD_STRING ];
52115: PPUSH
52116: CALL_OW 561
// end ;
52120: LD_VAR 0 2
52124: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52125: LD_INT 0
52127: PPUSH
52128: PPUSH
52129: PPUSH
52130: PPUSH
52131: PPUSH
// if not area or not rate or not max then
52132: LD_VAR 0 1
52136: NOT
52137: PUSH
52138: LD_VAR 0 2
52142: NOT
52143: OR
52144: PUSH
52145: LD_VAR 0 4
52149: NOT
52150: OR
52151: IFFALSE 52155
// exit ;
52153: GO 52344
// while 1 do
52155: LD_INT 1
52157: IFFALSE 52344
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52159: LD_ADDR_VAR 0 9
52163: PUSH
52164: LD_VAR 0 1
52168: PPUSH
52169: LD_INT 1
52171: PPUSH
52172: CALL_OW 287
52176: PUSH
52177: LD_INT 10
52179: MUL
52180: ST_TO_ADDR
// r := rate / 10 ;
52181: LD_ADDR_VAR 0 7
52185: PUSH
52186: LD_VAR 0 2
52190: PUSH
52191: LD_INT 10
52193: DIVREAL
52194: ST_TO_ADDR
// time := 1 1$00 ;
52195: LD_ADDR_VAR 0 8
52199: PUSH
52200: LD_INT 2100
52202: ST_TO_ADDR
// if amount < min then
52203: LD_VAR 0 9
52207: PUSH
52208: LD_VAR 0 3
52212: LESS
52213: IFFALSE 52231
// r := r * 2 else
52215: LD_ADDR_VAR 0 7
52219: PUSH
52220: LD_VAR 0 7
52224: PUSH
52225: LD_INT 2
52227: MUL
52228: ST_TO_ADDR
52229: GO 52257
// if amount > max then
52231: LD_VAR 0 9
52235: PUSH
52236: LD_VAR 0 4
52240: GREATER
52241: IFFALSE 52257
// r := r / 2 ;
52243: LD_ADDR_VAR 0 7
52247: PUSH
52248: LD_VAR 0 7
52252: PUSH
52253: LD_INT 2
52255: DIVREAL
52256: ST_TO_ADDR
// time := time / r ;
52257: LD_ADDR_VAR 0 8
52261: PUSH
52262: LD_VAR 0 8
52266: PUSH
52267: LD_VAR 0 7
52271: DIVREAL
52272: ST_TO_ADDR
// if time < 0 then
52273: LD_VAR 0 8
52277: PUSH
52278: LD_INT 0
52280: LESS
52281: IFFALSE 52298
// time := time * - 1 ;
52283: LD_ADDR_VAR 0 8
52287: PUSH
52288: LD_VAR 0 8
52292: PUSH
52293: LD_INT 1
52295: NEG
52296: MUL
52297: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52298: LD_VAR 0 8
52302: PUSH
52303: LD_INT 35
52305: PPUSH
52306: LD_INT 875
52308: PPUSH
52309: CALL_OW 12
52313: PLUS
52314: PPUSH
52315: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52319: LD_INT 1
52321: PPUSH
52322: LD_INT 5
52324: PPUSH
52325: CALL_OW 12
52329: PPUSH
52330: LD_VAR 0 1
52334: PPUSH
52335: LD_INT 1
52337: PPUSH
52338: CALL_OW 55
// end ;
52342: GO 52155
// end ;
52344: LD_VAR 0 5
52348: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52349: LD_INT 0
52351: PPUSH
52352: PPUSH
52353: PPUSH
52354: PPUSH
52355: PPUSH
52356: PPUSH
52357: PPUSH
52358: PPUSH
// if not turrets or not factories then
52359: LD_VAR 0 1
52363: NOT
52364: PUSH
52365: LD_VAR 0 2
52369: NOT
52370: OR
52371: IFFALSE 52375
// exit ;
52373: GO 52682
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52375: LD_ADDR_VAR 0 10
52379: PUSH
52380: LD_INT 5
52382: PUSH
52383: LD_INT 6
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 2
52392: PUSH
52393: LD_INT 4
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: PUSH
52403: LD_INT 5
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 24
52417: PUSH
52418: LD_INT 25
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 23
52427: PUSH
52428: LD_INT 27
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 42
52441: PUSH
52442: LD_INT 43
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 44
52451: PUSH
52452: LD_INT 46
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 45
52461: PUSH
52462: LD_INT 47
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// result := [ ] ;
52479: LD_ADDR_VAR 0 3
52483: PUSH
52484: EMPTY
52485: ST_TO_ADDR
// for i in turrets do
52486: LD_ADDR_VAR 0 4
52490: PUSH
52491: LD_VAR 0 1
52495: PUSH
52496: FOR_IN
52497: IFFALSE 52680
// begin nat := GetNation ( i ) ;
52499: LD_ADDR_VAR 0 7
52503: PUSH
52504: LD_VAR 0 4
52508: PPUSH
52509: CALL_OW 248
52513: ST_TO_ADDR
// weapon := 0 ;
52514: LD_ADDR_VAR 0 8
52518: PUSH
52519: LD_INT 0
52521: ST_TO_ADDR
// if not nat then
52522: LD_VAR 0 7
52526: NOT
52527: IFFALSE 52531
// continue ;
52529: GO 52496
// for j in list [ nat ] do
52531: LD_ADDR_VAR 0 5
52535: PUSH
52536: LD_VAR 0 10
52540: PUSH
52541: LD_VAR 0 7
52545: ARRAY
52546: PUSH
52547: FOR_IN
52548: IFFALSE 52589
// if GetBWeapon ( i ) = j [ 1 ] then
52550: LD_VAR 0 4
52554: PPUSH
52555: CALL_OW 269
52559: PUSH
52560: LD_VAR 0 5
52564: PUSH
52565: LD_INT 1
52567: ARRAY
52568: EQUAL
52569: IFFALSE 52587
// begin weapon := j [ 2 ] ;
52571: LD_ADDR_VAR 0 8
52575: PUSH
52576: LD_VAR 0 5
52580: PUSH
52581: LD_INT 2
52583: ARRAY
52584: ST_TO_ADDR
// break ;
52585: GO 52589
// end ;
52587: GO 52547
52589: POP
52590: POP
// if not weapon then
52591: LD_VAR 0 8
52595: NOT
52596: IFFALSE 52600
// continue ;
52598: GO 52496
// for k in factories do
52600: LD_ADDR_VAR 0 6
52604: PUSH
52605: LD_VAR 0 2
52609: PUSH
52610: FOR_IN
52611: IFFALSE 52676
// begin weapons := AvailableWeaponList ( k ) ;
52613: LD_ADDR_VAR 0 9
52617: PUSH
52618: LD_VAR 0 6
52622: PPUSH
52623: CALL_OW 478
52627: ST_TO_ADDR
// if not weapons then
52628: LD_VAR 0 9
52632: NOT
52633: IFFALSE 52637
// continue ;
52635: GO 52610
// if weapon in weapons then
52637: LD_VAR 0 8
52641: PUSH
52642: LD_VAR 0 9
52646: IN
52647: IFFALSE 52674
// begin result := [ i , weapon ] ;
52649: LD_ADDR_VAR 0 3
52653: PUSH
52654: LD_VAR 0 4
52658: PUSH
52659: LD_VAR 0 8
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: ST_TO_ADDR
// exit ;
52668: POP
52669: POP
52670: POP
52671: POP
52672: GO 52682
// end ; end ;
52674: GO 52610
52676: POP
52677: POP
// end ;
52678: GO 52496
52680: POP
52681: POP
// end ;
52682: LD_VAR 0 3
52686: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52687: LD_INT 0
52689: PPUSH
// if not side or side > 8 then
52690: LD_VAR 0 3
52694: NOT
52695: PUSH
52696: LD_VAR 0 3
52700: PUSH
52701: LD_INT 8
52703: GREATER
52704: OR
52705: IFFALSE 52709
// exit ;
52707: GO 52768
// if not range then
52709: LD_VAR 0 4
52713: NOT
52714: IFFALSE 52725
// range := - 12 ;
52716: LD_ADDR_VAR 0 4
52720: PUSH
52721: LD_INT 12
52723: NEG
52724: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52725: LD_VAR 0 1
52729: PPUSH
52730: LD_VAR 0 2
52734: PPUSH
52735: LD_VAR 0 3
52739: PPUSH
52740: LD_VAR 0 4
52744: PPUSH
52745: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52749: LD_VAR 0 1
52753: PPUSH
52754: LD_VAR 0 2
52758: PPUSH
52759: LD_VAR 0 3
52763: PPUSH
52764: CALL_OW 331
// end ;
52768: LD_VAR 0 5
52772: RET
// export function Video ( mode ) ; begin
52773: LD_INT 0
52775: PPUSH
// ingame_video = mode ;
52776: LD_ADDR_OWVAR 52
52780: PUSH
52781: LD_VAR 0 1
52785: ST_TO_ADDR
// interface_hidden = mode ;
52786: LD_ADDR_OWVAR 54
52790: PUSH
52791: LD_VAR 0 1
52795: ST_TO_ADDR
// end ;
52796: LD_VAR 0 2
52800: RET
// export function Join ( array , element ) ; begin
52801: LD_INT 0
52803: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52804: LD_ADDR_VAR 0 3
52808: PUSH
52809: LD_VAR 0 1
52813: PPUSH
52814: LD_VAR 0 1
52818: PUSH
52819: LD_INT 1
52821: PLUS
52822: PPUSH
52823: LD_VAR 0 2
52827: PPUSH
52828: CALL_OW 1
52832: ST_TO_ADDR
// end ;
52833: LD_VAR 0 3
52837: RET
// export function JoinUnion ( array , element ) ; begin
52838: LD_INT 0
52840: PPUSH
// result := array union element ;
52841: LD_ADDR_VAR 0 3
52845: PUSH
52846: LD_VAR 0 1
52850: PUSH
52851: LD_VAR 0 2
52855: UNION
52856: ST_TO_ADDR
// end ;
52857: LD_VAR 0 3
52861: RET
// export function GetBehemoths ( side ) ; begin
52862: LD_INT 0
52864: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
52865: LD_ADDR_VAR 0 2
52869: PUSH
52870: LD_INT 22
52872: PUSH
52873: LD_VAR 0 1
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 31
52884: PUSH
52885: LD_INT 25
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PPUSH
52896: CALL_OW 69
52900: ST_TO_ADDR
// end ;
52901: LD_VAR 0 2
52905: RET
// export function Shuffle ( array ) ; var i , index ; begin
52906: LD_INT 0
52908: PPUSH
52909: PPUSH
52910: PPUSH
// result := [ ] ;
52911: LD_ADDR_VAR 0 2
52915: PUSH
52916: EMPTY
52917: ST_TO_ADDR
// if not array then
52918: LD_VAR 0 1
52922: NOT
52923: IFFALSE 52927
// exit ;
52925: GO 53026
// Randomize ;
52927: CALL_OW 10
// for i = array downto 1 do
52931: LD_ADDR_VAR 0 3
52935: PUSH
52936: DOUBLE
52937: LD_VAR 0 1
52941: INC
52942: ST_TO_ADDR
52943: LD_INT 1
52945: PUSH
52946: FOR_DOWNTO
52947: IFFALSE 53024
// begin index := rand ( 1 , array ) ;
52949: LD_ADDR_VAR 0 4
52953: PUSH
52954: LD_INT 1
52956: PPUSH
52957: LD_VAR 0 1
52961: PPUSH
52962: CALL_OW 12
52966: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52967: LD_ADDR_VAR 0 2
52971: PUSH
52972: LD_VAR 0 2
52976: PPUSH
52977: LD_VAR 0 2
52981: PUSH
52982: LD_INT 1
52984: PLUS
52985: PPUSH
52986: LD_VAR 0 1
52990: PUSH
52991: LD_VAR 0 4
52995: ARRAY
52996: PPUSH
52997: CALL_OW 2
53001: ST_TO_ADDR
// array := Delete ( array , index ) ;
53002: LD_ADDR_VAR 0 1
53006: PUSH
53007: LD_VAR 0 1
53011: PPUSH
53012: LD_VAR 0 4
53016: PPUSH
53017: CALL_OW 3
53021: ST_TO_ADDR
// end ;
53022: GO 52946
53024: POP
53025: POP
// end ;
53026: LD_VAR 0 2
53030: RET
// export function GetBaseMaterials ( base ) ; begin
53031: LD_INT 0
53033: PPUSH
// result := [ 0 , 0 , 0 ] ;
53034: LD_ADDR_VAR 0 2
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// if not base then
53053: LD_VAR 0 1
53057: NOT
53058: IFFALSE 53062
// exit ;
53060: GO 53111
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53062: LD_ADDR_VAR 0 2
53066: PUSH
53067: LD_VAR 0 1
53071: PPUSH
53072: LD_INT 1
53074: PPUSH
53075: CALL_OW 275
53079: PUSH
53080: LD_VAR 0 1
53084: PPUSH
53085: LD_INT 2
53087: PPUSH
53088: CALL_OW 275
53092: PUSH
53093: LD_VAR 0 1
53097: PPUSH
53098: LD_INT 3
53100: PPUSH
53101: CALL_OW 275
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: ST_TO_ADDR
// end ;
53111: LD_VAR 0 2
53115: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53116: LD_INT 0
53118: PPUSH
53119: PPUSH
// result := array ;
53120: LD_ADDR_VAR 0 3
53124: PUSH
53125: LD_VAR 0 1
53129: ST_TO_ADDR
// if size >= result then
53130: LD_VAR 0 2
53134: PUSH
53135: LD_VAR 0 3
53139: GREATEREQUAL
53140: IFFALSE 53144
// exit ;
53142: GO 53194
// if size then
53144: LD_VAR 0 2
53148: IFFALSE 53194
// for i := array downto size do
53150: LD_ADDR_VAR 0 4
53154: PUSH
53155: DOUBLE
53156: LD_VAR 0 1
53160: INC
53161: ST_TO_ADDR
53162: LD_VAR 0 2
53166: PUSH
53167: FOR_DOWNTO
53168: IFFALSE 53192
// result := Delete ( result , result ) ;
53170: LD_ADDR_VAR 0 3
53174: PUSH
53175: LD_VAR 0 3
53179: PPUSH
53180: LD_VAR 0 3
53184: PPUSH
53185: CALL_OW 3
53189: ST_TO_ADDR
53190: GO 53167
53192: POP
53193: POP
// end ;
53194: LD_VAR 0 3
53198: RET
// export function ComExit ( unit ) ; var tmp ; begin
53199: LD_INT 0
53201: PPUSH
53202: PPUSH
// if not IsInUnit ( unit ) then
53203: LD_VAR 0 1
53207: PPUSH
53208: CALL_OW 310
53212: NOT
53213: IFFALSE 53217
// exit ;
53215: GO 53277
// tmp := IsInUnit ( unit ) ;
53217: LD_ADDR_VAR 0 3
53221: PUSH
53222: LD_VAR 0 1
53226: PPUSH
53227: CALL_OW 310
53231: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53232: LD_VAR 0 3
53236: PPUSH
53237: CALL_OW 247
53241: PUSH
53242: LD_INT 2
53244: EQUAL
53245: IFFALSE 53258
// ComExitVehicle ( unit ) else
53247: LD_VAR 0 1
53251: PPUSH
53252: CALL_OW 121
53256: GO 53267
// ComExitBuilding ( unit ) ;
53258: LD_VAR 0 1
53262: PPUSH
53263: CALL_OW 122
// result := tmp ;
53267: LD_ADDR_VAR 0 2
53271: PUSH
53272: LD_VAR 0 3
53276: ST_TO_ADDR
// end ;
53277: LD_VAR 0 2
53281: RET
// export function ComExitAll ( units ) ; var i ; begin
53282: LD_INT 0
53284: PPUSH
53285: PPUSH
// if not units then
53286: LD_VAR 0 1
53290: NOT
53291: IFFALSE 53295
// exit ;
53293: GO 53321
// for i in units do
53295: LD_ADDR_VAR 0 3
53299: PUSH
53300: LD_VAR 0 1
53304: PUSH
53305: FOR_IN
53306: IFFALSE 53319
// ComExit ( i ) ;
53308: LD_VAR 0 3
53312: PPUSH
53313: CALL 53199 0 1
53317: GO 53305
53319: POP
53320: POP
// end ;
53321: LD_VAR 0 2
53325: RET
// export function ResetHc ; begin
53326: LD_INT 0
53328: PPUSH
// InitHc ;
53329: CALL_OW 19
// hc_importance := 0 ;
53333: LD_ADDR_OWVAR 32
53337: PUSH
53338: LD_INT 0
53340: ST_TO_ADDR
// end ;
53341: LD_VAR 0 1
53345: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53346: LD_INT 0
53348: PPUSH
53349: PPUSH
53350: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53351: LD_ADDR_VAR 0 6
53355: PUSH
53356: LD_VAR 0 1
53360: PUSH
53361: LD_VAR 0 3
53365: PLUS
53366: PUSH
53367: LD_INT 2
53369: DIV
53370: ST_TO_ADDR
// if _x < 0 then
53371: LD_VAR 0 6
53375: PUSH
53376: LD_INT 0
53378: LESS
53379: IFFALSE 53396
// _x := _x * - 1 ;
53381: LD_ADDR_VAR 0 6
53385: PUSH
53386: LD_VAR 0 6
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: MUL
53395: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53396: LD_ADDR_VAR 0 7
53400: PUSH
53401: LD_VAR 0 2
53405: PUSH
53406: LD_VAR 0 4
53410: PLUS
53411: PUSH
53412: LD_INT 2
53414: DIV
53415: ST_TO_ADDR
// if _y < 0 then
53416: LD_VAR 0 7
53420: PUSH
53421: LD_INT 0
53423: LESS
53424: IFFALSE 53441
// _y := _y * - 1 ;
53426: LD_ADDR_VAR 0 7
53430: PUSH
53431: LD_VAR 0 7
53435: PUSH
53436: LD_INT 1
53438: NEG
53439: MUL
53440: ST_TO_ADDR
// result := [ _x , _y ] ;
53441: LD_ADDR_VAR 0 5
53445: PUSH
53446: LD_VAR 0 6
53450: PUSH
53451: LD_VAR 0 7
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: ST_TO_ADDR
// end ;
53460: LD_VAR 0 5
53464: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53465: LD_INT 0
53467: PPUSH
53468: PPUSH
53469: PPUSH
53470: PPUSH
// task := GetTaskList ( unit ) ;
53471: LD_ADDR_VAR 0 7
53475: PUSH
53476: LD_VAR 0 1
53480: PPUSH
53481: CALL_OW 437
53485: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53486: LD_VAR 0 7
53490: NOT
53491: PUSH
53492: LD_VAR 0 1
53496: PPUSH
53497: LD_VAR 0 2
53501: PPUSH
53502: CALL_OW 308
53506: NOT
53507: AND
53508: IFFALSE 53512
// exit ;
53510: GO 53630
// if IsInArea ( unit , area ) then
53512: LD_VAR 0 1
53516: PPUSH
53517: LD_VAR 0 2
53521: PPUSH
53522: CALL_OW 308
53526: IFFALSE 53544
// begin ComMoveToArea ( unit , goAway ) ;
53528: LD_VAR 0 1
53532: PPUSH
53533: LD_VAR 0 3
53537: PPUSH
53538: CALL_OW 113
// exit ;
53542: GO 53630
// end ; if task [ 1 ] [ 1 ] <> M then
53544: LD_VAR 0 7
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PUSH
53553: LD_INT 1
53555: ARRAY
53556: PUSH
53557: LD_STRING M
53559: NONEQUAL
53560: IFFALSE 53564
// exit ;
53562: GO 53630
// x := task [ 1 ] [ 2 ] ;
53564: LD_ADDR_VAR 0 5
53568: PUSH
53569: LD_VAR 0 7
53573: PUSH
53574: LD_INT 1
53576: ARRAY
53577: PUSH
53578: LD_INT 2
53580: ARRAY
53581: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53582: LD_ADDR_VAR 0 6
53586: PUSH
53587: LD_VAR 0 7
53591: PUSH
53592: LD_INT 1
53594: ARRAY
53595: PUSH
53596: LD_INT 3
53598: ARRAY
53599: ST_TO_ADDR
// if InArea ( x , y , area ) then
53600: LD_VAR 0 5
53604: PPUSH
53605: LD_VAR 0 6
53609: PPUSH
53610: LD_VAR 0 2
53614: PPUSH
53615: CALL_OW 309
53619: IFFALSE 53630
// ComStop ( unit ) ;
53621: LD_VAR 0 1
53625: PPUSH
53626: CALL_OW 141
// end ;
53630: LD_VAR 0 4
53634: RET
// export function Abs ( value ) ; begin
53635: LD_INT 0
53637: PPUSH
// result := value ;
53638: LD_ADDR_VAR 0 2
53642: PUSH
53643: LD_VAR 0 1
53647: ST_TO_ADDR
// if value < 0 then
53648: LD_VAR 0 1
53652: PUSH
53653: LD_INT 0
53655: LESS
53656: IFFALSE 53673
// result := value * - 1 ;
53658: LD_ADDR_VAR 0 2
53662: PUSH
53663: LD_VAR 0 1
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: MUL
53672: ST_TO_ADDR
// end ;
53673: LD_VAR 0 2
53677: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53678: LD_INT 0
53680: PPUSH
53681: PPUSH
53682: PPUSH
53683: PPUSH
53684: PPUSH
53685: PPUSH
53686: PPUSH
53687: PPUSH
// if not unit or not building then
53688: LD_VAR 0 1
53692: NOT
53693: PUSH
53694: LD_VAR 0 2
53698: NOT
53699: OR
53700: IFFALSE 53704
// exit ;
53702: GO 53930
// x := GetX ( building ) ;
53704: LD_ADDR_VAR 0 4
53708: PUSH
53709: LD_VAR 0 2
53713: PPUSH
53714: CALL_OW 250
53718: ST_TO_ADDR
// y := GetY ( building ) ;
53719: LD_ADDR_VAR 0 6
53723: PUSH
53724: LD_VAR 0 2
53728: PPUSH
53729: CALL_OW 251
53733: ST_TO_ADDR
// d := GetDir ( building ) ;
53734: LD_ADDR_VAR 0 8
53738: PUSH
53739: LD_VAR 0 2
53743: PPUSH
53744: CALL_OW 254
53748: ST_TO_ADDR
// r := 4 ;
53749: LD_ADDR_VAR 0 9
53753: PUSH
53754: LD_INT 4
53756: ST_TO_ADDR
// for i := 1 to 5 do
53757: LD_ADDR_VAR 0 10
53761: PUSH
53762: DOUBLE
53763: LD_INT 1
53765: DEC
53766: ST_TO_ADDR
53767: LD_INT 5
53769: PUSH
53770: FOR_TO
53771: IFFALSE 53928
// begin _x := ShiftX ( x , d , r + i ) ;
53773: LD_ADDR_VAR 0 5
53777: PUSH
53778: LD_VAR 0 4
53782: PPUSH
53783: LD_VAR 0 8
53787: PPUSH
53788: LD_VAR 0 9
53792: PUSH
53793: LD_VAR 0 10
53797: PLUS
53798: PPUSH
53799: CALL_OW 272
53803: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53804: LD_ADDR_VAR 0 7
53808: PUSH
53809: LD_VAR 0 6
53813: PPUSH
53814: LD_VAR 0 8
53818: PPUSH
53819: LD_VAR 0 9
53823: PUSH
53824: LD_VAR 0 10
53828: PLUS
53829: PPUSH
53830: CALL_OW 273
53834: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53835: LD_VAR 0 5
53839: PPUSH
53840: LD_VAR 0 7
53844: PPUSH
53845: CALL_OW 488
53849: PUSH
53850: LD_VAR 0 5
53854: PPUSH
53855: LD_VAR 0 7
53859: PPUSH
53860: CALL_OW 428
53864: PPUSH
53865: CALL_OW 247
53869: PUSH
53870: LD_INT 3
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: IN
53880: NOT
53881: AND
53882: IFFALSE 53926
// begin ComMoveXY ( unit , _x , _y ) ;
53884: LD_VAR 0 1
53888: PPUSH
53889: LD_VAR 0 5
53893: PPUSH
53894: LD_VAR 0 7
53898: PPUSH
53899: CALL_OW 111
// result := [ _x , _y ] ;
53903: LD_ADDR_VAR 0 3
53907: PUSH
53908: LD_VAR 0 5
53912: PUSH
53913: LD_VAR 0 7
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// exit ;
53922: POP
53923: POP
53924: GO 53930
// end ; end ;
53926: GO 53770
53928: POP
53929: POP
// end ;
53930: LD_VAR 0 3
53934: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
53935: LD_INT 0
53937: PPUSH
53938: PPUSH
53939: PPUSH
// result := 0 ;
53940: LD_ADDR_VAR 0 3
53944: PUSH
53945: LD_INT 0
53947: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
53948: LD_VAR 0 1
53952: PUSH
53953: LD_INT 0
53955: LESS
53956: PUSH
53957: LD_VAR 0 1
53961: PUSH
53962: LD_INT 8
53964: GREATER
53965: OR
53966: PUSH
53967: LD_VAR 0 2
53971: PUSH
53972: LD_INT 0
53974: LESS
53975: OR
53976: PUSH
53977: LD_VAR 0 2
53981: PUSH
53982: LD_INT 8
53984: GREATER
53985: OR
53986: IFFALSE 53990
// exit ;
53988: GO 54065
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
53990: LD_ADDR_VAR 0 4
53994: PUSH
53995: LD_INT 22
53997: PUSH
53998: LD_VAR 0 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PPUSH
54007: CALL_OW 69
54011: PUSH
54012: FOR_IN
54013: IFFALSE 54063
// begin un := UnitShoot ( i ) ;
54015: LD_ADDR_VAR 0 5
54019: PUSH
54020: LD_VAR 0 4
54024: PPUSH
54025: CALL_OW 504
54029: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54030: LD_VAR 0 5
54034: PPUSH
54035: CALL_OW 255
54039: PUSH
54040: LD_VAR 0 1
54044: EQUAL
54045: IFFALSE 54061
// begin result := un ;
54047: LD_ADDR_VAR 0 3
54051: PUSH
54052: LD_VAR 0 5
54056: ST_TO_ADDR
// exit ;
54057: POP
54058: POP
54059: GO 54065
// end ; end ;
54061: GO 54012
54063: POP
54064: POP
// end ;
54065: LD_VAR 0 3
54069: RET
// export function GetCargoBay ( units ) ; begin
54070: LD_INT 0
54072: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54073: LD_ADDR_VAR 0 2
54077: PUSH
54078: LD_VAR 0 1
54082: PPUSH
54083: LD_INT 2
54085: PUSH
54086: LD_INT 34
54088: PUSH
54089: LD_INT 12
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 34
54098: PUSH
54099: LD_INT 51
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 34
54108: PUSH
54109: LD_INT 32
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 34
54118: PUSH
54119: LD_INT 89
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: PPUSH
54133: CALL_OW 72
54137: ST_TO_ADDR
// end ;
54138: LD_VAR 0 2
54142: RET
// export function Negate ( value ) ; begin
54143: LD_INT 0
54145: PPUSH
// result := not value ;
54146: LD_ADDR_VAR 0 2
54150: PUSH
54151: LD_VAR 0 1
54155: NOT
54156: ST_TO_ADDR
// end ;
54157: LD_VAR 0 2
54161: RET
// export function Inc ( value ) ; begin
54162: LD_INT 0
54164: PPUSH
// result := value + 1 ;
54165: LD_ADDR_VAR 0 2
54169: PUSH
54170: LD_VAR 0 1
54174: PUSH
54175: LD_INT 1
54177: PLUS
54178: ST_TO_ADDR
// end ;
54179: LD_VAR 0 2
54183: RET
// export function Dec ( value ) ; begin
54184: LD_INT 0
54186: PPUSH
// result := value - 1 ;
54187: LD_ADDR_VAR 0 2
54191: PUSH
54192: LD_VAR 0 1
54196: PUSH
54197: LD_INT 1
54199: MINUS
54200: ST_TO_ADDR
// end ;
54201: LD_VAR 0 2
54205: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54206: LD_INT 0
54208: PPUSH
54209: PPUSH
54210: PPUSH
54211: PPUSH
54212: PPUSH
54213: PPUSH
54214: PPUSH
54215: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54216: LD_VAR 0 1
54220: PPUSH
54221: LD_VAR 0 2
54225: PPUSH
54226: CALL_OW 488
54230: NOT
54231: PUSH
54232: LD_VAR 0 3
54236: PPUSH
54237: LD_VAR 0 4
54241: PPUSH
54242: CALL_OW 488
54246: NOT
54247: OR
54248: IFFALSE 54261
// begin result := - 1 ;
54250: LD_ADDR_VAR 0 5
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: ST_TO_ADDR
// exit ;
54259: GO 54496
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54261: LD_ADDR_VAR 0 12
54265: PUSH
54266: LD_VAR 0 1
54270: PPUSH
54271: LD_VAR 0 2
54275: PPUSH
54276: LD_VAR 0 3
54280: PPUSH
54281: LD_VAR 0 4
54285: PPUSH
54286: CALL 53346 0 4
54290: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54291: LD_ADDR_VAR 0 11
54295: PUSH
54296: LD_VAR 0 1
54300: PPUSH
54301: LD_VAR 0 2
54305: PPUSH
54306: LD_VAR 0 12
54310: PUSH
54311: LD_INT 1
54313: ARRAY
54314: PPUSH
54315: LD_VAR 0 12
54319: PUSH
54320: LD_INT 2
54322: ARRAY
54323: PPUSH
54324: CALL_OW 298
54328: ST_TO_ADDR
// distance := 9999 ;
54329: LD_ADDR_VAR 0 10
54333: PUSH
54334: LD_INT 9999
54336: ST_TO_ADDR
// for i := 0 to 5 do
54337: LD_ADDR_VAR 0 6
54341: PUSH
54342: DOUBLE
54343: LD_INT 0
54345: DEC
54346: ST_TO_ADDR
54347: LD_INT 5
54349: PUSH
54350: FOR_TO
54351: IFFALSE 54494
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54353: LD_ADDR_VAR 0 7
54357: PUSH
54358: LD_VAR 0 1
54362: PPUSH
54363: LD_VAR 0 6
54367: PPUSH
54368: LD_VAR 0 11
54372: PPUSH
54373: CALL_OW 272
54377: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54378: LD_ADDR_VAR 0 8
54382: PUSH
54383: LD_VAR 0 2
54387: PPUSH
54388: LD_VAR 0 6
54392: PPUSH
54393: LD_VAR 0 11
54397: PPUSH
54398: CALL_OW 273
54402: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54403: LD_VAR 0 7
54407: PPUSH
54408: LD_VAR 0 8
54412: PPUSH
54413: CALL_OW 488
54417: NOT
54418: IFFALSE 54422
// continue ;
54420: GO 54350
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54422: LD_ADDR_VAR 0 9
54426: PUSH
54427: LD_VAR 0 12
54431: PUSH
54432: LD_INT 1
54434: ARRAY
54435: PPUSH
54436: LD_VAR 0 12
54440: PUSH
54441: LD_INT 2
54443: ARRAY
54444: PPUSH
54445: LD_VAR 0 7
54449: PPUSH
54450: LD_VAR 0 8
54454: PPUSH
54455: CALL_OW 298
54459: ST_TO_ADDR
// if tmp < distance then
54460: LD_VAR 0 9
54464: PUSH
54465: LD_VAR 0 10
54469: LESS
54470: IFFALSE 54492
// begin result := i ;
54472: LD_ADDR_VAR 0 5
54476: PUSH
54477: LD_VAR 0 6
54481: ST_TO_ADDR
// distance := tmp ;
54482: LD_ADDR_VAR 0 10
54486: PUSH
54487: LD_VAR 0 9
54491: ST_TO_ADDR
// end ; end ;
54492: GO 54350
54494: POP
54495: POP
// end ;
54496: LD_VAR 0 5
54500: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54501: LD_INT 0
54503: PPUSH
54504: PPUSH
// if not driver or not IsInUnit ( driver ) then
54505: LD_VAR 0 1
54509: NOT
54510: PUSH
54511: LD_VAR 0 1
54515: PPUSH
54516: CALL_OW 310
54520: NOT
54521: OR
54522: IFFALSE 54526
// exit ;
54524: GO 54616
// vehicle := IsInUnit ( driver ) ;
54526: LD_ADDR_VAR 0 3
54530: PUSH
54531: LD_VAR 0 1
54535: PPUSH
54536: CALL_OW 310
54540: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54541: LD_VAR 0 1
54545: PPUSH
54546: LD_STRING \
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: PUSH
54576: LD_STRING E
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_VAR 0 3
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PPUSH
54612: CALL_OW 446
// end ;
54616: LD_VAR 0 2
54620: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54621: LD_INT 0
54623: PPUSH
54624: PPUSH
// if not driver or not IsInUnit ( driver ) then
54625: LD_VAR 0 1
54629: NOT
54630: PUSH
54631: LD_VAR 0 1
54635: PPUSH
54636: CALL_OW 310
54640: NOT
54641: OR
54642: IFFALSE 54646
// exit ;
54644: GO 54736
// vehicle := IsInUnit ( driver ) ;
54646: LD_ADDR_VAR 0 3
54650: PUSH
54651: LD_VAR 0 1
54655: PPUSH
54656: CALL_OW 310
54660: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54661: LD_VAR 0 1
54665: PPUSH
54666: LD_STRING \
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: LD_INT 0
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: PUSH
54696: LD_STRING E
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_VAR 0 3
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PPUSH
54732: CALL_OW 447
// end ;
54736: LD_VAR 0 2
54740: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54741: LD_INT 0
54743: PPUSH
54744: PPUSH
54745: PPUSH
// tmp := [ ] ;
54746: LD_ADDR_VAR 0 5
54750: PUSH
54751: EMPTY
54752: ST_TO_ADDR
// for i in units do
54753: LD_ADDR_VAR 0 4
54757: PUSH
54758: LD_VAR 0 1
54762: PUSH
54763: FOR_IN
54764: IFFALSE 54802
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54766: LD_ADDR_VAR 0 5
54770: PUSH
54771: LD_VAR 0 5
54775: PPUSH
54776: LD_VAR 0 5
54780: PUSH
54781: LD_INT 1
54783: PLUS
54784: PPUSH
54785: LD_VAR 0 4
54789: PPUSH
54790: CALL_OW 256
54794: PPUSH
54795: CALL_OW 2
54799: ST_TO_ADDR
54800: GO 54763
54802: POP
54803: POP
// if not tmp then
54804: LD_VAR 0 5
54808: NOT
54809: IFFALSE 54813
// exit ;
54811: GO 54861
// if asc then
54813: LD_VAR 0 2
54817: IFFALSE 54841
// result := SortListByListAsc ( units , tmp ) else
54819: LD_ADDR_VAR 0 3
54823: PUSH
54824: LD_VAR 0 1
54828: PPUSH
54829: LD_VAR 0 5
54833: PPUSH
54834: CALL_OW 76
54838: ST_TO_ADDR
54839: GO 54861
// result := SortListByListDesc ( units , tmp ) ;
54841: LD_ADDR_VAR 0 3
54845: PUSH
54846: LD_VAR 0 1
54850: PPUSH
54851: LD_VAR 0 5
54855: PPUSH
54856: CALL_OW 77
54860: ST_TO_ADDR
// end ;
54861: LD_VAR 0 3
54865: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54866: LD_INT 0
54868: PPUSH
54869: PPUSH
// task := GetTaskList ( mech ) ;
54870: LD_ADDR_VAR 0 4
54874: PUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: CALL_OW 437
54884: ST_TO_ADDR
// if not task then
54885: LD_VAR 0 4
54889: NOT
54890: IFFALSE 54894
// exit ;
54892: GO 54936
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
54894: LD_ADDR_VAR 0 3
54898: PUSH
54899: LD_VAR 0 4
54903: PUSH
54904: LD_INT 1
54906: ARRAY
54907: PUSH
54908: LD_INT 1
54910: ARRAY
54911: PUSH
54912: LD_STRING r
54914: EQUAL
54915: PUSH
54916: LD_VAR 0 4
54920: PUSH
54921: LD_INT 1
54923: ARRAY
54924: PUSH
54925: LD_INT 4
54927: ARRAY
54928: PUSH
54929: LD_VAR 0 2
54933: EQUAL
54934: AND
54935: ST_TO_ADDR
// end ;
54936: LD_VAR 0 3
54940: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
54941: LD_INT 0
54943: PPUSH
// SetDir ( unit , d ) ;
54944: LD_VAR 0 1
54948: PPUSH
54949: LD_VAR 0 4
54953: PPUSH
54954: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
54958: LD_VAR 0 1
54962: PPUSH
54963: LD_VAR 0 2
54967: PPUSH
54968: LD_VAR 0 3
54972: PPUSH
54973: LD_VAR 0 5
54977: PPUSH
54978: CALL_OW 48
// end ;
54982: LD_VAR 0 6
54986: RET
// export function ToNaturalNumber ( number ) ; begin
54987: LD_INT 0
54989: PPUSH
// result := number div 1 ;
54990: LD_ADDR_VAR 0 2
54994: PUSH
54995: LD_VAR 0 1
54999: PUSH
55000: LD_INT 1
55002: DIV
55003: ST_TO_ADDR
// if number < 0 then
55004: LD_VAR 0 1
55008: PUSH
55009: LD_INT 0
55011: LESS
55012: IFFALSE 55022
// result := 0 ;
55014: LD_ADDR_VAR 0 2
55018: PUSH
55019: LD_INT 0
55021: ST_TO_ADDR
// end ;
55022: LD_VAR 0 2
55026: RET
// export function SortByClass ( units , class ) ; var un ; begin
55027: LD_INT 0
55029: PPUSH
55030: PPUSH
// if not units or not class then
55031: LD_VAR 0 1
55035: NOT
55036: PUSH
55037: LD_VAR 0 2
55041: NOT
55042: OR
55043: IFFALSE 55047
// exit ;
55045: GO 55142
// result := [ ] ;
55047: LD_ADDR_VAR 0 3
55051: PUSH
55052: EMPTY
55053: ST_TO_ADDR
// for un in units do
55054: LD_ADDR_VAR 0 4
55058: PUSH
55059: LD_VAR 0 1
55063: PUSH
55064: FOR_IN
55065: IFFALSE 55140
// if GetClass ( un ) = class then
55067: LD_VAR 0 4
55071: PPUSH
55072: CALL_OW 257
55076: PUSH
55077: LD_VAR 0 2
55081: EQUAL
55082: IFFALSE 55109
// result := Insert ( result , 1 , un ) else
55084: LD_ADDR_VAR 0 3
55088: PUSH
55089: LD_VAR 0 3
55093: PPUSH
55094: LD_INT 1
55096: PPUSH
55097: LD_VAR 0 4
55101: PPUSH
55102: CALL_OW 2
55106: ST_TO_ADDR
55107: GO 55138
// result := Replace ( result , result + 1 , un ) ;
55109: LD_ADDR_VAR 0 3
55113: PUSH
55114: LD_VAR 0 3
55118: PPUSH
55119: LD_VAR 0 3
55123: PUSH
55124: LD_INT 1
55126: PLUS
55127: PPUSH
55128: LD_VAR 0 4
55132: PPUSH
55133: CALL_OW 1
55137: ST_TO_ADDR
55138: GO 55064
55140: POP
55141: POP
// end ;
55142: LD_VAR 0 3
55146: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55147: LD_INT 0
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
// result := [ ] ;
55156: LD_ADDR_VAR 0 4
55160: PUSH
55161: EMPTY
55162: ST_TO_ADDR
// if x - r < 0 then
55163: LD_VAR 0 1
55167: PUSH
55168: LD_VAR 0 3
55172: MINUS
55173: PUSH
55174: LD_INT 0
55176: LESS
55177: IFFALSE 55189
// min_x := 0 else
55179: LD_ADDR_VAR 0 8
55183: PUSH
55184: LD_INT 0
55186: ST_TO_ADDR
55187: GO 55205
// min_x := x - r ;
55189: LD_ADDR_VAR 0 8
55193: PUSH
55194: LD_VAR 0 1
55198: PUSH
55199: LD_VAR 0 3
55203: MINUS
55204: ST_TO_ADDR
// if y - r < 0 then
55205: LD_VAR 0 2
55209: PUSH
55210: LD_VAR 0 3
55214: MINUS
55215: PUSH
55216: LD_INT 0
55218: LESS
55219: IFFALSE 55231
// min_y := 0 else
55221: LD_ADDR_VAR 0 7
55225: PUSH
55226: LD_INT 0
55228: ST_TO_ADDR
55229: GO 55247
// min_y := y - r ;
55231: LD_ADDR_VAR 0 7
55235: PUSH
55236: LD_VAR 0 2
55240: PUSH
55241: LD_VAR 0 3
55245: MINUS
55246: ST_TO_ADDR
// max_x := x + r ;
55247: LD_ADDR_VAR 0 9
55251: PUSH
55252: LD_VAR 0 1
55256: PUSH
55257: LD_VAR 0 3
55261: PLUS
55262: ST_TO_ADDR
// max_y := y + r ;
55263: LD_ADDR_VAR 0 10
55267: PUSH
55268: LD_VAR 0 2
55272: PUSH
55273: LD_VAR 0 3
55277: PLUS
55278: ST_TO_ADDR
// for _x = min_x to max_x do
55279: LD_ADDR_VAR 0 5
55283: PUSH
55284: DOUBLE
55285: LD_VAR 0 8
55289: DEC
55290: ST_TO_ADDR
55291: LD_VAR 0 9
55295: PUSH
55296: FOR_TO
55297: IFFALSE 55398
// for _y = min_y to max_y do
55299: LD_ADDR_VAR 0 6
55303: PUSH
55304: DOUBLE
55305: LD_VAR 0 7
55309: DEC
55310: ST_TO_ADDR
55311: LD_VAR 0 10
55315: PUSH
55316: FOR_TO
55317: IFFALSE 55394
// begin if not ValidHex ( _x , _y ) then
55319: LD_VAR 0 5
55323: PPUSH
55324: LD_VAR 0 6
55328: PPUSH
55329: CALL_OW 488
55333: NOT
55334: IFFALSE 55338
// continue ;
55336: GO 55316
// if GetResourceTypeXY ( _x , _y ) then
55338: LD_VAR 0 5
55342: PPUSH
55343: LD_VAR 0 6
55347: PPUSH
55348: CALL_OW 283
55352: IFFALSE 55392
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55354: LD_ADDR_VAR 0 4
55358: PUSH
55359: LD_VAR 0 4
55363: PPUSH
55364: LD_VAR 0 4
55368: PUSH
55369: LD_INT 1
55371: PLUS
55372: PPUSH
55373: LD_VAR 0 5
55377: PUSH
55378: LD_VAR 0 6
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PPUSH
55387: CALL_OW 1
55391: ST_TO_ADDR
// end ;
55392: GO 55316
55394: POP
55395: POP
55396: GO 55296
55398: POP
55399: POP
// end ;
55400: LD_VAR 0 4
55404: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55405: LD_INT 0
55407: PPUSH
55408: PPUSH
55409: PPUSH
55410: PPUSH
55411: PPUSH
55412: PPUSH
55413: PPUSH
55414: PPUSH
// if not units then
55415: LD_VAR 0 1
55419: NOT
55420: IFFALSE 55424
// exit ;
55422: GO 55952
// result := UnitFilter ( units , [ f_ok ] ) ;
55424: LD_ADDR_VAR 0 3
55428: PUSH
55429: LD_VAR 0 1
55433: PPUSH
55434: LD_INT 50
55436: PUSH
55437: EMPTY
55438: LIST
55439: PPUSH
55440: CALL_OW 72
55444: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55445: LD_ADDR_VAR 0 8
55449: PUSH
55450: LD_VAR 0 1
55454: PUSH
55455: LD_INT 1
55457: ARRAY
55458: PPUSH
55459: CALL_OW 255
55463: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
55464: LD_ADDR_VAR 0 10
55468: PUSH
55469: LD_INT 29
55471: PUSH
55472: LD_INT 91
55474: PUSH
55475: LD_INT 49
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: ST_TO_ADDR
// if not result then
55483: LD_VAR 0 3
55487: NOT
55488: IFFALSE 55492
// exit ;
55490: GO 55952
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55492: LD_ADDR_VAR 0 5
55496: PUSH
55497: LD_INT 81
55499: PUSH
55500: LD_VAR 0 8
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PPUSH
55509: CALL_OW 69
55513: ST_TO_ADDR
// for i in result do
55514: LD_ADDR_VAR 0 4
55518: PUSH
55519: LD_VAR 0 3
55523: PUSH
55524: FOR_IN
55525: IFFALSE 55950
// begin tag := GetTag ( i ) + 1 ;
55527: LD_ADDR_VAR 0 9
55531: PUSH
55532: LD_VAR 0 4
55536: PPUSH
55537: CALL_OW 110
55541: PUSH
55542: LD_INT 1
55544: PLUS
55545: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
55546: LD_ADDR_VAR 0 7
55550: PUSH
55551: LD_VAR 0 4
55555: PPUSH
55556: CALL_OW 250
55560: PPUSH
55561: LD_VAR 0 4
55565: PPUSH
55566: CALL_OW 251
55570: PPUSH
55571: LD_INT 4
55573: PPUSH
55574: CALL 55147 0 3
55578: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
55579: LD_VAR 0 4
55583: PPUSH
55584: CALL_OW 247
55588: PUSH
55589: LD_INT 2
55591: EQUAL
55592: PUSH
55593: LD_VAR 0 7
55597: PUSH
55598: LD_INT 2
55600: GREATER
55601: AND
55602: PUSH
55603: LD_VAR 0 4
55607: PPUSH
55608: CALL_OW 264
55612: PUSH
55613: LD_VAR 0 10
55617: IN
55618: NOT
55619: AND
55620: IFFALSE 55659
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55622: LD_VAR 0 4
55626: PPUSH
55627: LD_VAR 0 7
55631: PUSH
55632: LD_INT 1
55634: ARRAY
55635: PUSH
55636: LD_INT 1
55638: ARRAY
55639: PPUSH
55640: LD_VAR 0 7
55644: PUSH
55645: LD_INT 1
55647: ARRAY
55648: PUSH
55649: LD_INT 2
55651: ARRAY
55652: PPUSH
55653: CALL_OW 116
55657: GO 55948
// if path > tag then
55659: LD_VAR 0 2
55663: PUSH
55664: LD_VAR 0 9
55668: GREATER
55669: IFFALSE 55877
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
55671: LD_ADDR_VAR 0 6
55675: PUSH
55676: LD_VAR 0 5
55680: PPUSH
55681: LD_INT 91
55683: PUSH
55684: LD_VAR 0 4
55688: PUSH
55689: LD_INT 8
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: LIST
55696: PPUSH
55697: CALL_OW 72
55701: ST_TO_ADDR
// if nearEnemy then
55702: LD_VAR 0 6
55706: IFFALSE 55775
// begin if GetWeapon ( i ) = ru_time_lapser then
55708: LD_VAR 0 4
55712: PPUSH
55713: CALL_OW 264
55717: PUSH
55718: LD_INT 49
55720: EQUAL
55721: IFFALSE 55749
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55723: LD_VAR 0 4
55727: PPUSH
55728: LD_VAR 0 6
55732: PPUSH
55733: LD_VAR 0 4
55737: PPUSH
55738: CALL_OW 74
55742: PPUSH
55743: CALL_OW 112
55747: GO 55773
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
55749: LD_VAR 0 4
55753: PPUSH
55754: LD_VAR 0 6
55758: PPUSH
55759: LD_VAR 0 4
55763: PPUSH
55764: CALL_OW 74
55768: PPUSH
55769: CALL 57023 0 2
// end else
55773: GO 55875
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55775: LD_VAR 0 4
55779: PPUSH
55780: LD_VAR 0 2
55784: PUSH
55785: LD_VAR 0 9
55789: ARRAY
55790: PUSH
55791: LD_INT 1
55793: ARRAY
55794: PPUSH
55795: LD_VAR 0 2
55799: PUSH
55800: LD_VAR 0 9
55804: ARRAY
55805: PUSH
55806: LD_INT 2
55808: ARRAY
55809: PPUSH
55810: CALL_OW 297
55814: PUSH
55815: LD_INT 6
55817: GREATER
55818: IFFALSE 55861
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55820: LD_VAR 0 4
55824: PPUSH
55825: LD_VAR 0 2
55829: PUSH
55830: LD_VAR 0 9
55834: ARRAY
55835: PUSH
55836: LD_INT 1
55838: ARRAY
55839: PPUSH
55840: LD_VAR 0 2
55844: PUSH
55845: LD_VAR 0 9
55849: ARRAY
55850: PUSH
55851: LD_INT 2
55853: ARRAY
55854: PPUSH
55855: CALL_OW 114
55859: GO 55875
// SetTag ( i , tag ) ;
55861: LD_VAR 0 4
55865: PPUSH
55866: LD_VAR 0 9
55870: PPUSH
55871: CALL_OW 109
// end else
55875: GO 55948
// if enemy then
55877: LD_VAR 0 5
55881: IFFALSE 55948
// begin if GetWeapon ( i ) = ru_time_lapser then
55883: LD_VAR 0 4
55887: PPUSH
55888: CALL_OW 264
55892: PUSH
55893: LD_INT 49
55895: EQUAL
55896: IFFALSE 55924
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
55898: LD_VAR 0 4
55902: PPUSH
55903: LD_VAR 0 5
55907: PPUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL_OW 74
55917: PPUSH
55918: CALL_OW 112
55922: GO 55948
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55924: LD_VAR 0 4
55928: PPUSH
55929: LD_VAR 0 5
55933: PPUSH
55934: LD_VAR 0 4
55938: PPUSH
55939: CALL_OW 74
55943: PPUSH
55944: CALL 57023 0 2
// end ; end ;
55948: GO 55524
55950: POP
55951: POP
// end ;
55952: LD_VAR 0 3
55956: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55957: LD_INT 0
55959: PPUSH
55960: PPUSH
55961: PPUSH
// if not unit or IsInUnit ( unit ) then
55962: LD_VAR 0 1
55966: NOT
55967: PUSH
55968: LD_VAR 0 1
55972: PPUSH
55973: CALL_OW 310
55977: OR
55978: IFFALSE 55982
// exit ;
55980: GO 56073
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
55982: LD_ADDR_VAR 0 4
55986: PUSH
55987: LD_VAR 0 1
55991: PPUSH
55992: CALL_OW 250
55996: PPUSH
55997: LD_VAR 0 2
56001: PPUSH
56002: LD_INT 1
56004: PPUSH
56005: CALL_OW 272
56009: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56010: LD_ADDR_VAR 0 5
56014: PUSH
56015: LD_VAR 0 1
56019: PPUSH
56020: CALL_OW 251
56024: PPUSH
56025: LD_VAR 0 2
56029: PPUSH
56030: LD_INT 1
56032: PPUSH
56033: CALL_OW 273
56037: ST_TO_ADDR
// if ValidHex ( x , y ) then
56038: LD_VAR 0 4
56042: PPUSH
56043: LD_VAR 0 5
56047: PPUSH
56048: CALL_OW 488
56052: IFFALSE 56073
// ComTurnXY ( unit , x , y ) ;
56054: LD_VAR 0 1
56058: PPUSH
56059: LD_VAR 0 4
56063: PPUSH
56064: LD_VAR 0 5
56068: PPUSH
56069: CALL_OW 118
// end ;
56073: LD_VAR 0 3
56077: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56078: LD_INT 0
56080: PPUSH
56081: PPUSH
// result := false ;
56082: LD_ADDR_VAR 0 3
56086: PUSH
56087: LD_INT 0
56089: ST_TO_ADDR
// if not units then
56090: LD_VAR 0 2
56094: NOT
56095: IFFALSE 56099
// exit ;
56097: GO 56144
// for i in units do
56099: LD_ADDR_VAR 0 4
56103: PUSH
56104: LD_VAR 0 2
56108: PUSH
56109: FOR_IN
56110: IFFALSE 56142
// if See ( side , i ) then
56112: LD_VAR 0 1
56116: PPUSH
56117: LD_VAR 0 4
56121: PPUSH
56122: CALL_OW 292
56126: IFFALSE 56140
// begin result := true ;
56128: LD_ADDR_VAR 0 3
56132: PUSH
56133: LD_INT 1
56135: ST_TO_ADDR
// exit ;
56136: POP
56137: POP
56138: GO 56144
// end ;
56140: GO 56109
56142: POP
56143: POP
// end ;
56144: LD_VAR 0 3
56148: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56149: LD_INT 0
56151: PPUSH
56152: PPUSH
56153: PPUSH
56154: PPUSH
// if not unit or not points then
56155: LD_VAR 0 1
56159: NOT
56160: PUSH
56161: LD_VAR 0 2
56165: NOT
56166: OR
56167: IFFALSE 56171
// exit ;
56169: GO 56261
// dist := 99999 ;
56171: LD_ADDR_VAR 0 5
56175: PUSH
56176: LD_INT 99999
56178: ST_TO_ADDR
// for i in points do
56179: LD_ADDR_VAR 0 4
56183: PUSH
56184: LD_VAR 0 2
56188: PUSH
56189: FOR_IN
56190: IFFALSE 56259
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56192: LD_ADDR_VAR 0 6
56196: PUSH
56197: LD_VAR 0 1
56201: PPUSH
56202: LD_VAR 0 4
56206: PUSH
56207: LD_INT 1
56209: ARRAY
56210: PPUSH
56211: LD_VAR 0 4
56215: PUSH
56216: LD_INT 2
56218: ARRAY
56219: PPUSH
56220: CALL_OW 297
56224: ST_TO_ADDR
// if tmpDist < dist then
56225: LD_VAR 0 6
56229: PUSH
56230: LD_VAR 0 5
56234: LESS
56235: IFFALSE 56257
// begin result := i ;
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: LD_VAR 0 4
56246: ST_TO_ADDR
// dist := tmpDist ;
56247: LD_ADDR_VAR 0 5
56251: PUSH
56252: LD_VAR 0 6
56256: ST_TO_ADDR
// end ; end ;
56257: GO 56189
56259: POP
56260: POP
// end ;
56261: LD_VAR 0 3
56265: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
56266: LD_INT 0
56268: PPUSH
// uc_side := side ;
56269: LD_ADDR_OWVAR 20
56273: PUSH
56274: LD_VAR 0 1
56278: ST_TO_ADDR
// uc_nation := 3 ;
56279: LD_ADDR_OWVAR 21
56283: PUSH
56284: LD_INT 3
56286: ST_TO_ADDR
// vc_chassis := 25 ;
56287: LD_ADDR_OWVAR 37
56291: PUSH
56292: LD_INT 25
56294: ST_TO_ADDR
// vc_engine := engine_siberite ;
56295: LD_ADDR_OWVAR 39
56299: PUSH
56300: LD_INT 3
56302: ST_TO_ADDR
// vc_control := control_computer ;
56303: LD_ADDR_OWVAR 38
56307: PUSH
56308: LD_INT 3
56310: ST_TO_ADDR
// vc_weapon := 59 ;
56311: LD_ADDR_OWVAR 40
56315: PUSH
56316: LD_INT 59
56318: ST_TO_ADDR
// result := CreateVehicle ;
56319: LD_ADDR_VAR 0 5
56323: PUSH
56324: CALL_OW 45
56328: ST_TO_ADDR
// SetDir ( result , d ) ;
56329: LD_VAR 0 5
56333: PPUSH
56334: LD_VAR 0 4
56338: PPUSH
56339: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
56343: LD_VAR 0 5
56347: PPUSH
56348: LD_VAR 0 2
56352: PPUSH
56353: LD_VAR 0 3
56357: PPUSH
56358: LD_INT 0
56360: PPUSH
56361: CALL_OW 48
// end ;
56365: LD_VAR 0 5
56369: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
56370: LD_INT 0
56372: PPUSH
56373: PPUSH
56374: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
56375: LD_ADDR_VAR 0 2
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
56398: LD_VAR 0 1
56402: NOT
56403: PUSH
56404: LD_VAR 0 1
56408: PPUSH
56409: CALL_OW 264
56413: PUSH
56414: LD_INT 12
56416: PUSH
56417: LD_INT 51
56419: PUSH
56420: LD_INT 32
56422: PUSH
56423: LD_INT 89
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: IN
56432: NOT
56433: OR
56434: IFFALSE 56438
// exit ;
56436: GO 56536
// for i := 1 to 3 do
56438: LD_ADDR_VAR 0 3
56442: PUSH
56443: DOUBLE
56444: LD_INT 1
56446: DEC
56447: ST_TO_ADDR
56448: LD_INT 3
56450: PUSH
56451: FOR_TO
56452: IFFALSE 56534
// begin tmp := GetCargo ( cargo , i ) ;
56454: LD_ADDR_VAR 0 4
56458: PUSH
56459: LD_VAR 0 1
56463: PPUSH
56464: LD_VAR 0 3
56468: PPUSH
56469: CALL_OW 289
56473: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
56474: LD_ADDR_VAR 0 2
56478: PUSH
56479: LD_VAR 0 2
56483: PPUSH
56484: LD_VAR 0 3
56488: PPUSH
56489: LD_VAR 0 4
56493: PPUSH
56494: CALL_OW 1
56498: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
56499: LD_ADDR_VAR 0 2
56503: PUSH
56504: LD_VAR 0 2
56508: PPUSH
56509: LD_INT 4
56511: PPUSH
56512: LD_VAR 0 2
56516: PUSH
56517: LD_INT 4
56519: ARRAY
56520: PUSH
56521: LD_VAR 0 4
56525: PLUS
56526: PPUSH
56527: CALL_OW 1
56531: ST_TO_ADDR
// end ;
56532: GO 56451
56534: POP
56535: POP
// end ;
56536: LD_VAR 0 2
56540: RET
// export function Length ( array ) ; begin
56541: LD_INT 0
56543: PPUSH
// result := array + 0 ;
56544: LD_ADDR_VAR 0 2
56548: PUSH
56549: LD_VAR 0 1
56553: PUSH
56554: LD_INT 0
56556: PLUS
56557: ST_TO_ADDR
// end ;
56558: LD_VAR 0 2
56562: RET
// export function PrepareArray ( array ) ; begin
56563: LD_INT 0
56565: PPUSH
// result := array diff 0 ;
56566: LD_ADDR_VAR 0 2
56570: PUSH
56571: LD_VAR 0 1
56575: PUSH
56576: LD_INT 0
56578: DIFF
56579: ST_TO_ADDR
// if not result [ 1 ] then
56580: LD_VAR 0 2
56584: PUSH
56585: LD_INT 1
56587: ARRAY
56588: NOT
56589: IFFALSE 56609
// result := Delete ( result , 1 ) ;
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_VAR 0 2
56600: PPUSH
56601: LD_INT 1
56603: PPUSH
56604: CALL_OW 3
56608: ST_TO_ADDR
// end ;
56609: LD_VAR 0 2
56613: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
56614: LD_INT 0
56616: PPUSH
56617: PPUSH
56618: PPUSH
56619: PPUSH
// sibRocketRange := 25 ;
56620: LD_ADDR_VAR 0 6
56624: PUSH
56625: LD_INT 25
56627: ST_TO_ADDR
// result := false ;
56628: LD_ADDR_VAR 0 4
56632: PUSH
56633: LD_INT 0
56635: ST_TO_ADDR
// for i := 0 to 5 do
56636: LD_ADDR_VAR 0 5
56640: PUSH
56641: DOUBLE
56642: LD_INT 0
56644: DEC
56645: ST_TO_ADDR
56646: LD_INT 5
56648: PUSH
56649: FOR_TO
56650: IFFALSE 56717
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
56652: LD_VAR 0 1
56656: PPUSH
56657: LD_VAR 0 5
56661: PPUSH
56662: LD_VAR 0 6
56666: PPUSH
56667: CALL_OW 272
56671: PPUSH
56672: LD_VAR 0 2
56676: PPUSH
56677: LD_VAR 0 5
56681: PPUSH
56682: LD_VAR 0 6
56686: PPUSH
56687: CALL_OW 273
56691: PPUSH
56692: LD_VAR 0 3
56696: PPUSH
56697: CALL_OW 309
56701: IFFALSE 56715
// begin result := true ;
56703: LD_ADDR_VAR 0 4
56707: PUSH
56708: LD_INT 1
56710: ST_TO_ADDR
// exit ;
56711: POP
56712: POP
56713: GO 56719
// end ;
56715: GO 56649
56717: POP
56718: POP
// end ;
56719: LD_VAR 0 4
56723: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
56724: LD_INT 0
56726: PPUSH
56727: PPUSH
56728: PPUSH
// if btype = b_depot then
56729: LD_VAR 0 2
56733: PUSH
56734: LD_INT 0
56736: EQUAL
56737: IFFALSE 56749
// begin result := true ;
56739: LD_ADDR_VAR 0 3
56743: PUSH
56744: LD_INT 1
56746: ST_TO_ADDR
// exit ;
56747: GO 56865
// end ; pom := GetBase ( depot ) ;
56749: LD_ADDR_VAR 0 4
56753: PUSH
56754: LD_VAR 0 1
56758: PPUSH
56759: CALL_OW 274
56763: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56764: LD_ADDR_VAR 0 5
56768: PUSH
56769: LD_VAR 0 2
56773: PPUSH
56774: LD_VAR 0 1
56778: PPUSH
56779: CALL_OW 248
56783: PPUSH
56784: CALL_OW 450
56788: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
56789: LD_ADDR_VAR 0 3
56793: PUSH
56794: LD_VAR 0 4
56798: PPUSH
56799: LD_INT 1
56801: PPUSH
56802: CALL_OW 275
56806: PUSH
56807: LD_VAR 0 5
56811: PUSH
56812: LD_INT 1
56814: ARRAY
56815: GREATEREQUAL
56816: PUSH
56817: LD_VAR 0 4
56821: PPUSH
56822: LD_INT 2
56824: PPUSH
56825: CALL_OW 275
56829: PUSH
56830: LD_VAR 0 5
56834: PUSH
56835: LD_INT 2
56837: ARRAY
56838: GREATEREQUAL
56839: AND
56840: PUSH
56841: LD_VAR 0 4
56845: PPUSH
56846: LD_INT 3
56848: PPUSH
56849: CALL_OW 275
56853: PUSH
56854: LD_VAR 0 5
56858: PUSH
56859: LD_INT 3
56861: ARRAY
56862: GREATEREQUAL
56863: AND
56864: ST_TO_ADDR
// end ;
56865: LD_VAR 0 3
56869: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
56870: LD_INT 0
56872: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
56873: LD_VAR 0 1
56877: PPUSH
56878: LD_VAR 0 2
56882: PPUSH
56883: LD_INT 0
56885: PPUSH
56886: LD_INT 0
56888: PPUSH
56889: LD_INT 1
56891: PPUSH
56892: LD_INT 0
56894: PPUSH
56895: CALL_OW 587
// end ;
56899: LD_VAR 0 3
56903: RET
// export function CenterOnNow ( unit ) ; begin
56904: LD_INT 0
56906: PPUSH
// result := IsInUnit ( unit ) ;
56907: LD_ADDR_VAR 0 2
56911: PUSH
56912: LD_VAR 0 1
56916: PPUSH
56917: CALL_OW 310
56921: ST_TO_ADDR
// if not result then
56922: LD_VAR 0 2
56926: NOT
56927: IFFALSE 56939
// result := unit ;
56929: LD_ADDR_VAR 0 2
56933: PUSH
56934: LD_VAR 0 1
56938: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
56939: LD_VAR 0 1
56943: PPUSH
56944: CALL_OW 87
// end ;
56948: LD_VAR 0 2
56952: RET
// export function ComMoveHex ( unit , hex ) ; begin
56953: LD_INT 0
56955: PPUSH
// if not hex then
56956: LD_VAR 0 2
56960: NOT
56961: IFFALSE 56965
// exit ;
56963: GO 57018
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
56965: LD_VAR 0 2
56969: PUSH
56970: LD_INT 1
56972: ARRAY
56973: PPUSH
56974: LD_VAR 0 2
56978: PUSH
56979: LD_INT 2
56981: ARRAY
56982: PPUSH
56983: CALL_OW 428
56987: IFFALSE 56991
// exit ;
56989: GO 57018
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
56991: LD_VAR 0 1
56995: PPUSH
56996: LD_VAR 0 2
57000: PUSH
57001: LD_INT 1
57003: ARRAY
57004: PPUSH
57005: LD_VAR 0 2
57009: PUSH
57010: LD_INT 2
57012: ARRAY
57013: PPUSH
57014: CALL_OW 111
// end ;
57018: LD_VAR 0 3
57022: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
57023: LD_INT 0
57025: PPUSH
57026: PPUSH
57027: PPUSH
// if not unit or not enemy then
57028: LD_VAR 0 1
57032: NOT
57033: PUSH
57034: LD_VAR 0 2
57038: NOT
57039: OR
57040: IFFALSE 57044
// exit ;
57042: GO 57168
// x := GetX ( enemy ) ;
57044: LD_ADDR_VAR 0 4
57048: PUSH
57049: LD_VAR 0 2
57053: PPUSH
57054: CALL_OW 250
57058: ST_TO_ADDR
// y := GetY ( enemy ) ;
57059: LD_ADDR_VAR 0 5
57063: PUSH
57064: LD_VAR 0 2
57068: PPUSH
57069: CALL_OW 251
57073: ST_TO_ADDR
// if ValidHex ( x , y ) then
57074: LD_VAR 0 4
57078: PPUSH
57079: LD_VAR 0 5
57083: PPUSH
57084: CALL_OW 488
57088: IFFALSE 57168
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
57090: LD_VAR 0 2
57094: PPUSH
57095: CALL_OW 247
57099: PUSH
57100: LD_INT 3
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: IN
57110: PUSH
57111: LD_VAR 0 1
57115: PPUSH
57116: CALL_OW 255
57120: PPUSH
57121: LD_VAR 0 2
57125: PPUSH
57126: CALL_OW 292
57130: OR
57131: IFFALSE 57149
// ComAttackUnit ( unit , enemy ) else
57133: LD_VAR 0 1
57137: PPUSH
57138: LD_VAR 0 2
57142: PPUSH
57143: CALL_OW 115
57147: GO 57168
// ComAgressiveMove ( unit , x , y ) ;
57149: LD_VAR 0 1
57153: PPUSH
57154: LD_VAR 0 4
57158: PPUSH
57159: LD_VAR 0 5
57163: PPUSH
57164: CALL_OW 114
// end ;
57168: LD_VAR 0 3
57172: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
57173: LD_INT 0
57175: PPUSH
57176: PPUSH
57177: PPUSH
// list := AreaToList ( area , 0 ) ;
57178: LD_ADDR_VAR 0 5
57182: PUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: LD_INT 0
57190: PPUSH
57191: CALL_OW 517
57195: ST_TO_ADDR
// if not list then
57196: LD_VAR 0 5
57200: NOT
57201: IFFALSE 57205
// exit ;
57203: GO 57335
// if all then
57205: LD_VAR 0 2
57209: IFFALSE 57297
// begin for i := 1 to list [ 1 ] do
57211: LD_ADDR_VAR 0 4
57215: PUSH
57216: DOUBLE
57217: LD_INT 1
57219: DEC
57220: ST_TO_ADDR
57221: LD_VAR 0 5
57225: PUSH
57226: LD_INT 1
57228: ARRAY
57229: PUSH
57230: FOR_TO
57231: IFFALSE 57293
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
57233: LD_ADDR_VAR 0 3
57237: PUSH
57238: LD_VAR 0 3
57242: PPUSH
57243: LD_VAR 0 3
57247: PUSH
57248: LD_INT 1
57250: PLUS
57251: PPUSH
57252: LD_VAR 0 5
57256: PUSH
57257: LD_INT 1
57259: ARRAY
57260: PUSH
57261: LD_VAR 0 4
57265: ARRAY
57266: PUSH
57267: LD_VAR 0 5
57271: PUSH
57272: LD_INT 2
57274: ARRAY
57275: PUSH
57276: LD_VAR 0 4
57280: ARRAY
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PPUSH
57286: CALL_OW 1
57290: ST_TO_ADDR
57291: GO 57230
57293: POP
57294: POP
// exit ;
57295: GO 57335
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
57297: LD_ADDR_VAR 0 3
57301: PUSH
57302: LD_VAR 0 5
57306: PUSH
57307: LD_INT 1
57309: ARRAY
57310: PUSH
57311: LD_INT 1
57313: ARRAY
57314: PUSH
57315: LD_VAR 0 5
57319: PUSH
57320: LD_INT 2
57322: ARRAY
57323: PUSH
57324: LD_INT 1
57326: ARRAY
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: ST_TO_ADDR
// end ;
57335: LD_VAR 0 3
57339: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
57340: LD_INT 0
57342: PPUSH
57343: PPUSH
// list := AreaToList ( area , 0 ) ;
57344: LD_ADDR_VAR 0 4
57348: PUSH
57349: LD_VAR 0 1
57353: PPUSH
57354: LD_INT 0
57356: PPUSH
57357: CALL_OW 517
57361: ST_TO_ADDR
// if not list then
57362: LD_VAR 0 4
57366: NOT
57367: IFFALSE 57371
// exit ;
57369: GO 57412
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
57371: LD_ADDR_VAR 0 3
57375: PUSH
57376: LD_VAR 0 4
57380: PUSH
57381: LD_INT 1
57383: ARRAY
57384: PUSH
57385: LD_INT 1
57387: ARRAY
57388: PUSH
57389: LD_VAR 0 4
57393: PUSH
57394: LD_INT 2
57396: ARRAY
57397: PUSH
57398: LD_INT 1
57400: ARRAY
57401: PUSH
57402: LD_VAR 0 2
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: ST_TO_ADDR
// end ;
57412: LD_VAR 0 3
57416: RET
// export function First ( array ) ; begin
57417: LD_INT 0
57419: PPUSH
// if not array then
57420: LD_VAR 0 1
57424: NOT
57425: IFFALSE 57429
// exit ;
57427: GO 57443
// result := array [ 1 ] ;
57429: LD_ADDR_VAR 0 2
57433: PUSH
57434: LD_VAR 0 1
57438: PUSH
57439: LD_INT 1
57441: ARRAY
57442: ST_TO_ADDR
// end ;
57443: LD_VAR 0 2
57447: RET
// export function Last ( array ) ; begin
57448: LD_INT 0
57450: PPUSH
// if not array then
57451: LD_VAR 0 1
57455: NOT
57456: IFFALSE 57460
// exit ;
57458: GO 57476
// result := array [ array ] ;
57460: LD_ADDR_VAR 0 2
57464: PUSH
57465: LD_VAR 0 1
57469: PUSH
57470: LD_VAR 0 1
57474: ARRAY
57475: ST_TO_ADDR
// end ;
57476: LD_VAR 0 2
57480: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
57481: LD_INT 0
57483: PPUSH
57484: PPUSH
// result := [ ] ;
57485: LD_ADDR_VAR 0 5
57489: PUSH
57490: EMPTY
57491: ST_TO_ADDR
// if not array then
57492: LD_VAR 0 1
57496: NOT
57497: IFFALSE 57501
// exit ;
57499: GO 57613
// for i := 1 to array do
57501: LD_ADDR_VAR 0 6
57505: PUSH
57506: DOUBLE
57507: LD_INT 1
57509: DEC
57510: ST_TO_ADDR
57511: LD_VAR 0 1
57515: PUSH
57516: FOR_TO
57517: IFFALSE 57611
// if array [ i ] [ index ] = value then
57519: LD_VAR 0 1
57523: PUSH
57524: LD_VAR 0 6
57528: ARRAY
57529: PUSH
57530: LD_VAR 0 2
57534: ARRAY
57535: PUSH
57536: LD_VAR 0 3
57540: EQUAL
57541: IFFALSE 57609
// begin if indexColumn then
57543: LD_VAR 0 4
57547: IFFALSE 57583
// result := Join ( result , array [ i ] [ indexColumn ] ) else
57549: LD_ADDR_VAR 0 5
57553: PUSH
57554: LD_VAR 0 5
57558: PPUSH
57559: LD_VAR 0 1
57563: PUSH
57564: LD_VAR 0 6
57568: ARRAY
57569: PUSH
57570: LD_VAR 0 4
57574: ARRAY
57575: PPUSH
57576: CALL 52801 0 2
57580: ST_TO_ADDR
57581: GO 57609
// result := Join ( result , array [ i ] ) ;
57583: LD_ADDR_VAR 0 5
57587: PUSH
57588: LD_VAR 0 5
57592: PPUSH
57593: LD_VAR 0 1
57597: PUSH
57598: LD_VAR 0 6
57602: ARRAY
57603: PPUSH
57604: CALL 52801 0 2
57608: ST_TO_ADDR
// end ;
57609: GO 57516
57611: POP
57612: POP
// end ;
57613: LD_VAR 0 5
57617: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
57618: LD_INT 0
57620: PPUSH
// if not vehicles or not parkingPoint then
57621: LD_VAR 0 1
57625: NOT
57626: PUSH
57627: LD_VAR 0 2
57631: NOT
57632: OR
57633: IFFALSE 57637
// exit ;
57635: GO 57735
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
57637: LD_ADDR_VAR 0 1
57641: PUSH
57642: LD_VAR 0 1
57646: PPUSH
57647: LD_INT 50
57649: PUSH
57650: EMPTY
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: LD_INT 92
57658: PUSH
57659: LD_VAR 0 2
57663: PUSH
57664: LD_INT 1
57666: ARRAY
57667: PUSH
57668: LD_VAR 0 2
57672: PUSH
57673: LD_INT 2
57675: ARRAY
57676: PUSH
57677: LD_INT 8
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PPUSH
57694: CALL_OW 72
57698: ST_TO_ADDR
// if not vehicles then
57699: LD_VAR 0 1
57703: NOT
57704: IFFALSE 57708
// exit ;
57706: GO 57735
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
57708: LD_VAR 0 1
57712: PPUSH
57713: LD_VAR 0 2
57717: PUSH
57718: LD_INT 1
57720: ARRAY
57721: PPUSH
57722: LD_VAR 0 2
57726: PUSH
57727: LD_INT 2
57729: ARRAY
57730: PPUSH
57731: CALL_OW 111
// end ;
57735: LD_VAR 0 3
57739: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
57740: LD_INT 0
57742: PPUSH
57743: PPUSH
57744: PPUSH
// if not side or not area then
57745: LD_VAR 0 1
57749: NOT
57750: PUSH
57751: LD_VAR 0 2
57755: NOT
57756: OR
57757: IFFALSE 57761
// exit ;
57759: GO 57880
// tmp := AreaToList ( area , 0 ) ;
57761: LD_ADDR_VAR 0 5
57765: PUSH
57766: LD_VAR 0 2
57770: PPUSH
57771: LD_INT 0
57773: PPUSH
57774: CALL_OW 517
57778: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
57779: LD_ADDR_VAR 0 4
57783: PUSH
57784: DOUBLE
57785: LD_INT 1
57787: DEC
57788: ST_TO_ADDR
57789: LD_VAR 0 5
57793: PUSH
57794: LD_INT 1
57796: ARRAY
57797: PUSH
57798: FOR_TO
57799: IFFALSE 57878
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
57801: LD_VAR 0 5
57805: PUSH
57806: LD_INT 1
57808: ARRAY
57809: PUSH
57810: LD_VAR 0 4
57814: ARRAY
57815: PPUSH
57816: LD_VAR 0 5
57820: PUSH
57821: LD_INT 2
57823: ARRAY
57824: PUSH
57825: LD_VAR 0 4
57829: ARRAY
57830: PPUSH
57831: CALL_OW 351
57835: IFFALSE 57876
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
57837: LD_VAR 0 5
57841: PUSH
57842: LD_INT 1
57844: ARRAY
57845: PUSH
57846: LD_VAR 0 4
57850: ARRAY
57851: PPUSH
57852: LD_VAR 0 5
57856: PUSH
57857: LD_INT 2
57859: ARRAY
57860: PUSH
57861: LD_VAR 0 4
57865: ARRAY
57866: PPUSH
57867: LD_VAR 0 1
57871: PPUSH
57872: CALL_OW 244
// end ;
57876: GO 57798
57878: POP
57879: POP
// end ; end_of_file
57880: LD_VAR 0 3
57884: RET
// export globalGameSaveCounter ; every 0 0$1 do
57885: GO 57887
57887: DISABLE
// begin enable ;
57888: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57889: LD_STRING updateTimer(
57891: PUSH
57892: LD_OWVAR 1
57896: STR
57897: PUSH
57898: LD_STRING );
57900: STR
57901: PPUSH
57902: CALL_OW 559
// end ;
57906: END
// every 0 0$1 do
57907: GO 57909
57909: DISABLE
// begin globalGameSaveCounter := 0 ;
57910: LD_ADDR_EXP 41
57914: PUSH
57915: LD_INT 0
57917: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
57918: LD_STRING setGameSaveCounter(0)
57920: PPUSH
57921: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
57925: LD_STRING initStreamRollete();
57927: PPUSH
57928: CALL_OW 559
// InitStreamMode ;
57932: CALL 59275 0 0
// DefineStreamItems ( false ) ;
57936: LD_INT 0
57938: PPUSH
57939: CALL 59739 0 1
// end ;
57943: END
// export function SOS_MapStart ( ) ; begin
57944: LD_INT 0
57946: PPUSH
// if streamModeActive then
57947: LD_EXP 42
57951: IFFALSE 57960
// DefineStreamItems ( true ) ;
57953: LD_INT 1
57955: PPUSH
57956: CALL 59739 0 1
// UpdateLuaVariables ( ) ;
57960: CALL 57977 0 0
// UpdateFactoryWaypoints ( ) ;
57964: CALL 72608 0 0
// UpdateWarehouseGatheringPoints ( ) ;
57968: CALL 72865 0 0
// end ;
57972: LD_VAR 0 1
57976: RET
// function UpdateLuaVariables ( ) ; begin
57977: LD_INT 0
57979: PPUSH
// if globalGameSaveCounter then
57980: LD_EXP 41
57984: IFFALSE 58018
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
57986: LD_ADDR_EXP 41
57990: PUSH
57991: LD_EXP 41
57995: PPUSH
57996: CALL 54162 0 1
58000: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
58001: LD_STRING setGameSaveCounter(
58003: PUSH
58004: LD_EXP 41
58008: STR
58009: PUSH
58010: LD_STRING )
58012: STR
58013: PPUSH
58014: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
58018: LD_STRING setGameDifficulty(
58020: PUSH
58021: LD_OWVAR 67
58025: STR
58026: PUSH
58027: LD_STRING )
58029: STR
58030: PPUSH
58031: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
58035: LD_STRING displayDifficulty(
58037: PUSH
58038: LD_OWVAR 67
58042: STR
58043: PUSH
58044: LD_STRING )
58046: STR
58047: PPUSH
58048: CALL_OW 559
// end ;
58052: LD_VAR 0 1
58056: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
58057: LD_INT 0
58059: PPUSH
// if p2 = stream_mode then
58060: LD_VAR 0 2
58064: PUSH
58065: LD_INT 100
58067: EQUAL
58068: IFFALSE 59071
// begin if not StreamModeActive then
58070: LD_EXP 42
58074: NOT
58075: IFFALSE 58085
// StreamModeActive := true ;
58077: LD_ADDR_EXP 42
58081: PUSH
58082: LD_INT 1
58084: ST_TO_ADDR
// if p3 = 0 then
58085: LD_VAR 0 3
58089: PUSH
58090: LD_INT 0
58092: EQUAL
58093: IFFALSE 58099
// InitStreamMode ;
58095: CALL 59275 0 0
// if p3 = 1 then
58099: LD_VAR 0 3
58103: PUSH
58104: LD_INT 1
58106: EQUAL
58107: IFFALSE 58117
// sRocket := true ;
58109: LD_ADDR_EXP 47
58113: PUSH
58114: LD_INT 1
58116: ST_TO_ADDR
// if p3 = 2 then
58117: LD_VAR 0 3
58121: PUSH
58122: LD_INT 2
58124: EQUAL
58125: IFFALSE 58135
// sSpeed := true ;
58127: LD_ADDR_EXP 46
58131: PUSH
58132: LD_INT 1
58134: ST_TO_ADDR
// if p3 = 3 then
58135: LD_VAR 0 3
58139: PUSH
58140: LD_INT 3
58142: EQUAL
58143: IFFALSE 58153
// sEngine := true ;
58145: LD_ADDR_EXP 48
58149: PUSH
58150: LD_INT 1
58152: ST_TO_ADDR
// if p3 = 4 then
58153: LD_VAR 0 3
58157: PUSH
58158: LD_INT 4
58160: EQUAL
58161: IFFALSE 58171
// sSpec := true ;
58163: LD_ADDR_EXP 45
58167: PUSH
58168: LD_INT 1
58170: ST_TO_ADDR
// if p3 = 5 then
58171: LD_VAR 0 3
58175: PUSH
58176: LD_INT 5
58178: EQUAL
58179: IFFALSE 58189
// sLevel := true ;
58181: LD_ADDR_EXP 49
58185: PUSH
58186: LD_INT 1
58188: ST_TO_ADDR
// if p3 = 6 then
58189: LD_VAR 0 3
58193: PUSH
58194: LD_INT 6
58196: EQUAL
58197: IFFALSE 58207
// sArmoury := true ;
58199: LD_ADDR_EXP 50
58203: PUSH
58204: LD_INT 1
58206: ST_TO_ADDR
// if p3 = 7 then
58207: LD_VAR 0 3
58211: PUSH
58212: LD_INT 7
58214: EQUAL
58215: IFFALSE 58225
// sRadar := true ;
58217: LD_ADDR_EXP 51
58221: PUSH
58222: LD_INT 1
58224: ST_TO_ADDR
// if p3 = 8 then
58225: LD_VAR 0 3
58229: PUSH
58230: LD_INT 8
58232: EQUAL
58233: IFFALSE 58243
// sBunker := true ;
58235: LD_ADDR_EXP 52
58239: PUSH
58240: LD_INT 1
58242: ST_TO_ADDR
// if p3 = 9 then
58243: LD_VAR 0 3
58247: PUSH
58248: LD_INT 9
58250: EQUAL
58251: IFFALSE 58261
// sHack := true ;
58253: LD_ADDR_EXP 53
58257: PUSH
58258: LD_INT 1
58260: ST_TO_ADDR
// if p3 = 10 then
58261: LD_VAR 0 3
58265: PUSH
58266: LD_INT 10
58268: EQUAL
58269: IFFALSE 58279
// sFire := true ;
58271: LD_ADDR_EXP 54
58275: PUSH
58276: LD_INT 1
58278: ST_TO_ADDR
// if p3 = 11 then
58279: LD_VAR 0 3
58283: PUSH
58284: LD_INT 11
58286: EQUAL
58287: IFFALSE 58297
// sRefresh := true ;
58289: LD_ADDR_EXP 55
58293: PUSH
58294: LD_INT 1
58296: ST_TO_ADDR
// if p3 = 12 then
58297: LD_VAR 0 3
58301: PUSH
58302: LD_INT 12
58304: EQUAL
58305: IFFALSE 58315
// sExp := true ;
58307: LD_ADDR_EXP 56
58311: PUSH
58312: LD_INT 1
58314: ST_TO_ADDR
// if p3 = 13 then
58315: LD_VAR 0 3
58319: PUSH
58320: LD_INT 13
58322: EQUAL
58323: IFFALSE 58333
// sDepot := true ;
58325: LD_ADDR_EXP 57
58329: PUSH
58330: LD_INT 1
58332: ST_TO_ADDR
// if p3 = 14 then
58333: LD_VAR 0 3
58337: PUSH
58338: LD_INT 14
58340: EQUAL
58341: IFFALSE 58351
// sFlag := true ;
58343: LD_ADDR_EXP 58
58347: PUSH
58348: LD_INT 1
58350: ST_TO_ADDR
// if p3 = 15 then
58351: LD_VAR 0 3
58355: PUSH
58356: LD_INT 15
58358: EQUAL
58359: IFFALSE 58369
// sKamikadze := true ;
58361: LD_ADDR_EXP 66
58365: PUSH
58366: LD_INT 1
58368: ST_TO_ADDR
// if p3 = 16 then
58369: LD_VAR 0 3
58373: PUSH
58374: LD_INT 16
58376: EQUAL
58377: IFFALSE 58387
// sTroll := true ;
58379: LD_ADDR_EXP 67
58383: PUSH
58384: LD_INT 1
58386: ST_TO_ADDR
// if p3 = 17 then
58387: LD_VAR 0 3
58391: PUSH
58392: LD_INT 17
58394: EQUAL
58395: IFFALSE 58405
// sSlow := true ;
58397: LD_ADDR_EXP 68
58401: PUSH
58402: LD_INT 1
58404: ST_TO_ADDR
// if p3 = 18 then
58405: LD_VAR 0 3
58409: PUSH
58410: LD_INT 18
58412: EQUAL
58413: IFFALSE 58423
// sLack := true ;
58415: LD_ADDR_EXP 69
58419: PUSH
58420: LD_INT 1
58422: ST_TO_ADDR
// if p3 = 19 then
58423: LD_VAR 0 3
58427: PUSH
58428: LD_INT 19
58430: EQUAL
58431: IFFALSE 58441
// sTank := true ;
58433: LD_ADDR_EXP 71
58437: PUSH
58438: LD_INT 1
58440: ST_TO_ADDR
// if p3 = 20 then
58441: LD_VAR 0 3
58445: PUSH
58446: LD_INT 20
58448: EQUAL
58449: IFFALSE 58459
// sRemote := true ;
58451: LD_ADDR_EXP 72
58455: PUSH
58456: LD_INT 1
58458: ST_TO_ADDR
// if p3 = 21 then
58459: LD_VAR 0 3
58463: PUSH
58464: LD_INT 21
58466: EQUAL
58467: IFFALSE 58477
// sPowell := true ;
58469: LD_ADDR_EXP 73
58473: PUSH
58474: LD_INT 1
58476: ST_TO_ADDR
// if p3 = 22 then
58477: LD_VAR 0 3
58481: PUSH
58482: LD_INT 22
58484: EQUAL
58485: IFFALSE 58495
// sTeleport := true ;
58487: LD_ADDR_EXP 76
58491: PUSH
58492: LD_INT 1
58494: ST_TO_ADDR
// if p3 = 23 then
58495: LD_VAR 0 3
58499: PUSH
58500: LD_INT 23
58502: EQUAL
58503: IFFALSE 58513
// sOilTower := true ;
58505: LD_ADDR_EXP 78
58509: PUSH
58510: LD_INT 1
58512: ST_TO_ADDR
// if p3 = 24 then
58513: LD_VAR 0 3
58517: PUSH
58518: LD_INT 24
58520: EQUAL
58521: IFFALSE 58531
// sShovel := true ;
58523: LD_ADDR_EXP 79
58527: PUSH
58528: LD_INT 1
58530: ST_TO_ADDR
// if p3 = 25 then
58531: LD_VAR 0 3
58535: PUSH
58536: LD_INT 25
58538: EQUAL
58539: IFFALSE 58549
// sSheik := true ;
58541: LD_ADDR_EXP 80
58545: PUSH
58546: LD_INT 1
58548: ST_TO_ADDR
// if p3 = 26 then
58549: LD_VAR 0 3
58553: PUSH
58554: LD_INT 26
58556: EQUAL
58557: IFFALSE 58567
// sEarthquake := true ;
58559: LD_ADDR_EXP 82
58563: PUSH
58564: LD_INT 1
58566: ST_TO_ADDR
// if p3 = 27 then
58567: LD_VAR 0 3
58571: PUSH
58572: LD_INT 27
58574: EQUAL
58575: IFFALSE 58585
// sAI := true ;
58577: LD_ADDR_EXP 83
58581: PUSH
58582: LD_INT 1
58584: ST_TO_ADDR
// if p3 = 28 then
58585: LD_VAR 0 3
58589: PUSH
58590: LD_INT 28
58592: EQUAL
58593: IFFALSE 58603
// sCargo := true ;
58595: LD_ADDR_EXP 86
58599: PUSH
58600: LD_INT 1
58602: ST_TO_ADDR
// if p3 = 29 then
58603: LD_VAR 0 3
58607: PUSH
58608: LD_INT 29
58610: EQUAL
58611: IFFALSE 58621
// sDLaser := true ;
58613: LD_ADDR_EXP 87
58617: PUSH
58618: LD_INT 1
58620: ST_TO_ADDR
// if p3 = 30 then
58621: LD_VAR 0 3
58625: PUSH
58626: LD_INT 30
58628: EQUAL
58629: IFFALSE 58639
// sExchange := true ;
58631: LD_ADDR_EXP 88
58635: PUSH
58636: LD_INT 1
58638: ST_TO_ADDR
// if p3 = 31 then
58639: LD_VAR 0 3
58643: PUSH
58644: LD_INT 31
58646: EQUAL
58647: IFFALSE 58657
// sFac := true ;
58649: LD_ADDR_EXP 89
58653: PUSH
58654: LD_INT 1
58656: ST_TO_ADDR
// if p3 = 32 then
58657: LD_VAR 0 3
58661: PUSH
58662: LD_INT 32
58664: EQUAL
58665: IFFALSE 58675
// sPower := true ;
58667: LD_ADDR_EXP 90
58671: PUSH
58672: LD_INT 1
58674: ST_TO_ADDR
// if p3 = 33 then
58675: LD_VAR 0 3
58679: PUSH
58680: LD_INT 33
58682: EQUAL
58683: IFFALSE 58693
// sRandom := true ;
58685: LD_ADDR_EXP 91
58689: PUSH
58690: LD_INT 1
58692: ST_TO_ADDR
// if p3 = 34 then
58693: LD_VAR 0 3
58697: PUSH
58698: LD_INT 34
58700: EQUAL
58701: IFFALSE 58711
// sShield := true ;
58703: LD_ADDR_EXP 92
58707: PUSH
58708: LD_INT 1
58710: ST_TO_ADDR
// if p3 = 35 then
58711: LD_VAR 0 3
58715: PUSH
58716: LD_INT 35
58718: EQUAL
58719: IFFALSE 58729
// sTime := true ;
58721: LD_ADDR_EXP 93
58725: PUSH
58726: LD_INT 1
58728: ST_TO_ADDR
// if p3 = 36 then
58729: LD_VAR 0 3
58733: PUSH
58734: LD_INT 36
58736: EQUAL
58737: IFFALSE 58747
// sTools := true ;
58739: LD_ADDR_EXP 94
58743: PUSH
58744: LD_INT 1
58746: ST_TO_ADDR
// if p3 = 101 then
58747: LD_VAR 0 3
58751: PUSH
58752: LD_INT 101
58754: EQUAL
58755: IFFALSE 58765
// sSold := true ;
58757: LD_ADDR_EXP 59
58761: PUSH
58762: LD_INT 1
58764: ST_TO_ADDR
// if p3 = 102 then
58765: LD_VAR 0 3
58769: PUSH
58770: LD_INT 102
58772: EQUAL
58773: IFFALSE 58783
// sDiff := true ;
58775: LD_ADDR_EXP 60
58779: PUSH
58780: LD_INT 1
58782: ST_TO_ADDR
// if p3 = 103 then
58783: LD_VAR 0 3
58787: PUSH
58788: LD_INT 103
58790: EQUAL
58791: IFFALSE 58801
// sFog := true ;
58793: LD_ADDR_EXP 63
58797: PUSH
58798: LD_INT 1
58800: ST_TO_ADDR
// if p3 = 104 then
58801: LD_VAR 0 3
58805: PUSH
58806: LD_INT 104
58808: EQUAL
58809: IFFALSE 58819
// sReset := true ;
58811: LD_ADDR_EXP 64
58815: PUSH
58816: LD_INT 1
58818: ST_TO_ADDR
// if p3 = 105 then
58819: LD_VAR 0 3
58823: PUSH
58824: LD_INT 105
58826: EQUAL
58827: IFFALSE 58837
// sSun := true ;
58829: LD_ADDR_EXP 65
58833: PUSH
58834: LD_INT 1
58836: ST_TO_ADDR
// if p3 = 106 then
58837: LD_VAR 0 3
58841: PUSH
58842: LD_INT 106
58844: EQUAL
58845: IFFALSE 58855
// sTiger := true ;
58847: LD_ADDR_EXP 61
58851: PUSH
58852: LD_INT 1
58854: ST_TO_ADDR
// if p3 = 107 then
58855: LD_VAR 0 3
58859: PUSH
58860: LD_INT 107
58862: EQUAL
58863: IFFALSE 58873
// sBomb := true ;
58865: LD_ADDR_EXP 62
58869: PUSH
58870: LD_INT 1
58872: ST_TO_ADDR
// if p3 = 108 then
58873: LD_VAR 0 3
58877: PUSH
58878: LD_INT 108
58880: EQUAL
58881: IFFALSE 58891
// sWound := true ;
58883: LD_ADDR_EXP 70
58887: PUSH
58888: LD_INT 1
58890: ST_TO_ADDR
// if p3 = 109 then
58891: LD_VAR 0 3
58895: PUSH
58896: LD_INT 109
58898: EQUAL
58899: IFFALSE 58909
// sBetray := true ;
58901: LD_ADDR_EXP 74
58905: PUSH
58906: LD_INT 1
58908: ST_TO_ADDR
// if p3 = 110 then
58909: LD_VAR 0 3
58913: PUSH
58914: LD_INT 110
58916: EQUAL
58917: IFFALSE 58927
// sContamin := true ;
58919: LD_ADDR_EXP 75
58923: PUSH
58924: LD_INT 1
58926: ST_TO_ADDR
// if p3 = 111 then
58927: LD_VAR 0 3
58931: PUSH
58932: LD_INT 111
58934: EQUAL
58935: IFFALSE 58945
// sOil := true ;
58937: LD_ADDR_EXP 77
58941: PUSH
58942: LD_INT 1
58944: ST_TO_ADDR
// if p3 = 112 then
58945: LD_VAR 0 3
58949: PUSH
58950: LD_INT 112
58952: EQUAL
58953: IFFALSE 58963
// sStu := true ;
58955: LD_ADDR_EXP 81
58959: PUSH
58960: LD_INT 1
58962: ST_TO_ADDR
// if p3 = 113 then
58963: LD_VAR 0 3
58967: PUSH
58968: LD_INT 113
58970: EQUAL
58971: IFFALSE 58981
// sBazooka := true ;
58973: LD_ADDR_EXP 84
58977: PUSH
58978: LD_INT 1
58980: ST_TO_ADDR
// if p3 = 114 then
58981: LD_VAR 0 3
58985: PUSH
58986: LD_INT 114
58988: EQUAL
58989: IFFALSE 58999
// sMortar := true ;
58991: LD_ADDR_EXP 85
58995: PUSH
58996: LD_INT 1
58998: ST_TO_ADDR
// if p3 = 115 then
58999: LD_VAR 0 3
59003: PUSH
59004: LD_INT 115
59006: EQUAL
59007: IFFALSE 59017
// sRanger := true ;
59009: LD_ADDR_EXP 95
59013: PUSH
59014: LD_INT 1
59016: ST_TO_ADDR
// if p3 = 116 then
59017: LD_VAR 0 3
59021: PUSH
59022: LD_INT 116
59024: EQUAL
59025: IFFALSE 59035
// sComputer := true ;
59027: LD_ADDR_EXP 96
59031: PUSH
59032: LD_INT 1
59034: ST_TO_ADDR
// if p3 = 117 then
59035: LD_VAR 0 3
59039: PUSH
59040: LD_INT 117
59042: EQUAL
59043: IFFALSE 59053
// s30 := true ;
59045: LD_ADDR_EXP 97
59049: PUSH
59050: LD_INT 1
59052: ST_TO_ADDR
// if p3 = 118 then
59053: LD_VAR 0 3
59057: PUSH
59058: LD_INT 118
59060: EQUAL
59061: IFFALSE 59071
// s60 := true ;
59063: LD_ADDR_EXP 98
59067: PUSH
59068: LD_INT 1
59070: ST_TO_ADDR
// end ; if p2 = hack_mode then
59071: LD_VAR 0 2
59075: PUSH
59076: LD_INT 101
59078: EQUAL
59079: IFFALSE 59207
// begin case p3 of 1 :
59081: LD_VAR 0 3
59085: PUSH
59086: LD_INT 1
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59094
59092: GO 59101
59094: POP
// hHackUnlimitedResources ; 2 :
59095: CALL 71354 0 0
59099: GO 59207
59101: LD_INT 2
59103: DOUBLE
59104: EQUAL
59105: IFTRUE 59109
59107: GO 59116
59109: POP
// hHackSetLevel10 ; 3 :
59110: CALL 71487 0 0
59114: GO 59207
59116: LD_INT 3
59118: DOUBLE
59119: EQUAL
59120: IFTRUE 59124
59122: GO 59131
59124: POP
// hHackSetLevel10YourUnits ; 4 :
59125: CALL 71572 0 0
59129: GO 59207
59131: LD_INT 4
59133: DOUBLE
59134: EQUAL
59135: IFTRUE 59139
59137: GO 59146
59139: POP
// hHackInvincible ; 5 :
59140: CALL 72020 0 0
59144: GO 59207
59146: LD_INT 5
59148: DOUBLE
59149: EQUAL
59150: IFTRUE 59154
59152: GO 59161
59154: POP
// hHackInvisible ; 6 :
59155: CALL 72131 0 0
59159: GO 59207
59161: LD_INT 6
59163: DOUBLE
59164: EQUAL
59165: IFTRUE 59169
59167: GO 59176
59169: POP
// hHackChangeYourSide ; 7 :
59170: CALL 72188 0 0
59174: GO 59207
59176: LD_INT 7
59178: DOUBLE
59179: EQUAL
59180: IFTRUE 59184
59182: GO 59191
59184: POP
// hHackChangeUnitSide ; 8 :
59185: CALL 72230 0 0
59189: GO 59207
59191: LD_INT 8
59193: DOUBLE
59194: EQUAL
59195: IFTRUE 59199
59197: GO 59206
59199: POP
// hHackFog ; end ;
59200: CALL 72331 0 0
59204: GO 59207
59206: POP
// end ; if p2 = game_save_mode then
59207: LD_VAR 0 2
59211: PUSH
59212: LD_INT 102
59214: EQUAL
59215: IFFALSE 59270
// begin if p3 = 1 then
59217: LD_VAR 0 3
59221: PUSH
59222: LD_INT 1
59224: EQUAL
59225: IFFALSE 59237
// globalGameSaveCounter := p4 ;
59227: LD_ADDR_EXP 41
59231: PUSH
59232: LD_VAR 0 4
59236: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
59237: LD_VAR 0 3
59241: PUSH
59242: LD_INT 2
59244: EQUAL
59245: PUSH
59246: LD_EXP 41
59250: AND
59251: IFFALSE 59270
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59253: LD_STRING setGameSaveCounter(
59255: PUSH
59256: LD_EXP 41
59260: STR
59261: PUSH
59262: LD_STRING )
59264: STR
59265: PPUSH
59266: CALL_OW 559
// end ; end ;
59270: LD_VAR 0 7
59274: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
59275: LD_INT 0
59277: PPUSH
// streamModeActive := false ;
59278: LD_ADDR_EXP 42
59282: PUSH
59283: LD_INT 0
59285: ST_TO_ADDR
// normalCounter := 36 ;
59286: LD_ADDR_EXP 43
59290: PUSH
59291: LD_INT 36
59293: ST_TO_ADDR
// hardcoreCounter := 18 ;
59294: LD_ADDR_EXP 44
59298: PUSH
59299: LD_INT 18
59301: ST_TO_ADDR
// sRocket := false ;
59302: LD_ADDR_EXP 47
59306: PUSH
59307: LD_INT 0
59309: ST_TO_ADDR
// sSpeed := false ;
59310: LD_ADDR_EXP 46
59314: PUSH
59315: LD_INT 0
59317: ST_TO_ADDR
// sEngine := false ;
59318: LD_ADDR_EXP 48
59322: PUSH
59323: LD_INT 0
59325: ST_TO_ADDR
// sSpec := false ;
59326: LD_ADDR_EXP 45
59330: PUSH
59331: LD_INT 0
59333: ST_TO_ADDR
// sLevel := false ;
59334: LD_ADDR_EXP 49
59338: PUSH
59339: LD_INT 0
59341: ST_TO_ADDR
// sArmoury := false ;
59342: LD_ADDR_EXP 50
59346: PUSH
59347: LD_INT 0
59349: ST_TO_ADDR
// sRadar := false ;
59350: LD_ADDR_EXP 51
59354: PUSH
59355: LD_INT 0
59357: ST_TO_ADDR
// sBunker := false ;
59358: LD_ADDR_EXP 52
59362: PUSH
59363: LD_INT 0
59365: ST_TO_ADDR
// sHack := false ;
59366: LD_ADDR_EXP 53
59370: PUSH
59371: LD_INT 0
59373: ST_TO_ADDR
// sFire := false ;
59374: LD_ADDR_EXP 54
59378: PUSH
59379: LD_INT 0
59381: ST_TO_ADDR
// sRefresh := false ;
59382: LD_ADDR_EXP 55
59386: PUSH
59387: LD_INT 0
59389: ST_TO_ADDR
// sExp := false ;
59390: LD_ADDR_EXP 56
59394: PUSH
59395: LD_INT 0
59397: ST_TO_ADDR
// sDepot := false ;
59398: LD_ADDR_EXP 57
59402: PUSH
59403: LD_INT 0
59405: ST_TO_ADDR
// sFlag := false ;
59406: LD_ADDR_EXP 58
59410: PUSH
59411: LD_INT 0
59413: ST_TO_ADDR
// sKamikadze := false ;
59414: LD_ADDR_EXP 66
59418: PUSH
59419: LD_INT 0
59421: ST_TO_ADDR
// sTroll := false ;
59422: LD_ADDR_EXP 67
59426: PUSH
59427: LD_INT 0
59429: ST_TO_ADDR
// sSlow := false ;
59430: LD_ADDR_EXP 68
59434: PUSH
59435: LD_INT 0
59437: ST_TO_ADDR
// sLack := false ;
59438: LD_ADDR_EXP 69
59442: PUSH
59443: LD_INT 0
59445: ST_TO_ADDR
// sTank := false ;
59446: LD_ADDR_EXP 71
59450: PUSH
59451: LD_INT 0
59453: ST_TO_ADDR
// sRemote := false ;
59454: LD_ADDR_EXP 72
59458: PUSH
59459: LD_INT 0
59461: ST_TO_ADDR
// sPowell := false ;
59462: LD_ADDR_EXP 73
59466: PUSH
59467: LD_INT 0
59469: ST_TO_ADDR
// sTeleport := false ;
59470: LD_ADDR_EXP 76
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// sOilTower := false ;
59478: LD_ADDR_EXP 78
59482: PUSH
59483: LD_INT 0
59485: ST_TO_ADDR
// sShovel := false ;
59486: LD_ADDR_EXP 79
59490: PUSH
59491: LD_INT 0
59493: ST_TO_ADDR
// sSheik := false ;
59494: LD_ADDR_EXP 80
59498: PUSH
59499: LD_INT 0
59501: ST_TO_ADDR
// sEarthquake := false ;
59502: LD_ADDR_EXP 82
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// sAI := false ;
59510: LD_ADDR_EXP 83
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// sCargo := false ;
59518: LD_ADDR_EXP 86
59522: PUSH
59523: LD_INT 0
59525: ST_TO_ADDR
// sDLaser := false ;
59526: LD_ADDR_EXP 87
59530: PUSH
59531: LD_INT 0
59533: ST_TO_ADDR
// sExchange := false ;
59534: LD_ADDR_EXP 88
59538: PUSH
59539: LD_INT 0
59541: ST_TO_ADDR
// sFac := false ;
59542: LD_ADDR_EXP 89
59546: PUSH
59547: LD_INT 0
59549: ST_TO_ADDR
// sPower := false ;
59550: LD_ADDR_EXP 90
59554: PUSH
59555: LD_INT 0
59557: ST_TO_ADDR
// sRandom := false ;
59558: LD_ADDR_EXP 91
59562: PUSH
59563: LD_INT 0
59565: ST_TO_ADDR
// sShield := false ;
59566: LD_ADDR_EXP 92
59570: PUSH
59571: LD_INT 0
59573: ST_TO_ADDR
// sTime := false ;
59574: LD_ADDR_EXP 93
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// sTools := false ;
59582: LD_ADDR_EXP 94
59586: PUSH
59587: LD_INT 0
59589: ST_TO_ADDR
// sSold := false ;
59590: LD_ADDR_EXP 59
59594: PUSH
59595: LD_INT 0
59597: ST_TO_ADDR
// sDiff := false ;
59598: LD_ADDR_EXP 60
59602: PUSH
59603: LD_INT 0
59605: ST_TO_ADDR
// sFog := false ;
59606: LD_ADDR_EXP 63
59610: PUSH
59611: LD_INT 0
59613: ST_TO_ADDR
// sReset := false ;
59614: LD_ADDR_EXP 64
59618: PUSH
59619: LD_INT 0
59621: ST_TO_ADDR
// sSun := false ;
59622: LD_ADDR_EXP 65
59626: PUSH
59627: LD_INT 0
59629: ST_TO_ADDR
// sTiger := false ;
59630: LD_ADDR_EXP 61
59634: PUSH
59635: LD_INT 0
59637: ST_TO_ADDR
// sBomb := false ;
59638: LD_ADDR_EXP 62
59642: PUSH
59643: LD_INT 0
59645: ST_TO_ADDR
// sWound := false ;
59646: LD_ADDR_EXP 70
59650: PUSH
59651: LD_INT 0
59653: ST_TO_ADDR
// sBetray := false ;
59654: LD_ADDR_EXP 74
59658: PUSH
59659: LD_INT 0
59661: ST_TO_ADDR
// sContamin := false ;
59662: LD_ADDR_EXP 75
59666: PUSH
59667: LD_INT 0
59669: ST_TO_ADDR
// sOil := false ;
59670: LD_ADDR_EXP 77
59674: PUSH
59675: LD_INT 0
59677: ST_TO_ADDR
// sStu := false ;
59678: LD_ADDR_EXP 81
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// sBazooka := false ;
59686: LD_ADDR_EXP 84
59690: PUSH
59691: LD_INT 0
59693: ST_TO_ADDR
// sMortar := false ;
59694: LD_ADDR_EXP 85
59698: PUSH
59699: LD_INT 0
59701: ST_TO_ADDR
// sRanger := false ;
59702: LD_ADDR_EXP 95
59706: PUSH
59707: LD_INT 0
59709: ST_TO_ADDR
// sComputer := false ;
59710: LD_ADDR_EXP 96
59714: PUSH
59715: LD_INT 0
59717: ST_TO_ADDR
// s30 := false ;
59718: LD_ADDR_EXP 97
59722: PUSH
59723: LD_INT 0
59725: ST_TO_ADDR
// s60 := false ;
59726: LD_ADDR_EXP 98
59730: PUSH
59731: LD_INT 0
59733: ST_TO_ADDR
// end ;
59734: LD_VAR 0 1
59738: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59739: LD_INT 0
59741: PPUSH
59742: PPUSH
59743: PPUSH
59744: PPUSH
59745: PPUSH
59746: PPUSH
59747: PPUSH
// result := [ ] ;
59748: LD_ADDR_VAR 0 2
59752: PUSH
59753: EMPTY
59754: ST_TO_ADDR
// if campaign_id = 1 then
59755: LD_OWVAR 69
59759: PUSH
59760: LD_INT 1
59762: EQUAL
59763: IFFALSE 62929
// begin case mission_number of 1 :
59765: LD_OWVAR 70
59769: PUSH
59770: LD_INT 1
59772: DOUBLE
59773: EQUAL
59774: IFTRUE 59778
59776: GO 59854
59778: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59779: LD_ADDR_VAR 0 2
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: LD_INT 4
59789: PUSH
59790: LD_INT 11
59792: PUSH
59793: LD_INT 12
59795: PUSH
59796: LD_INT 15
59798: PUSH
59799: LD_INT 16
59801: PUSH
59802: LD_INT 22
59804: PUSH
59805: LD_INT 23
59807: PUSH
59808: LD_INT 26
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 101
59824: PUSH
59825: LD_INT 102
59827: PUSH
59828: LD_INT 106
59830: PUSH
59831: LD_INT 116
59833: PUSH
59834: LD_INT 117
59836: PUSH
59837: LD_INT 118
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: ST_TO_ADDR
59852: GO 62927
59854: LD_INT 2
59856: DOUBLE
59857: EQUAL
59858: IFTRUE 59862
59860: GO 59946
59862: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59863: LD_ADDR_VAR 0 2
59867: PUSH
59868: LD_INT 2
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: LD_INT 11
59876: PUSH
59877: LD_INT 12
59879: PUSH
59880: LD_INT 15
59882: PUSH
59883: LD_INT 16
59885: PUSH
59886: LD_INT 22
59888: PUSH
59889: LD_INT 23
59891: PUSH
59892: LD_INT 26
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 101
59908: PUSH
59909: LD_INT 102
59911: PUSH
59912: LD_INT 105
59914: PUSH
59915: LD_INT 106
59917: PUSH
59918: LD_INT 108
59920: PUSH
59921: LD_INT 116
59923: PUSH
59924: LD_INT 117
59926: PUSH
59927: LD_INT 118
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: ST_TO_ADDR
59944: GO 62927
59946: LD_INT 3
59948: DOUBLE
59949: EQUAL
59950: IFTRUE 59954
59952: GO 60042
59954: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 4
59965: PUSH
59966: LD_INT 5
59968: PUSH
59969: LD_INT 11
59971: PUSH
59972: LD_INT 12
59974: PUSH
59975: LD_INT 15
59977: PUSH
59978: LD_INT 16
59980: PUSH
59981: LD_INT 22
59983: PUSH
59984: LD_INT 26
59986: PUSH
59987: LD_INT 36
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 101
60004: PUSH
60005: LD_INT 102
60007: PUSH
60008: LD_INT 105
60010: PUSH
60011: LD_INT 106
60013: PUSH
60014: LD_INT 108
60016: PUSH
60017: LD_INT 116
60019: PUSH
60020: LD_INT 117
60022: PUSH
60023: LD_INT 118
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: ST_TO_ADDR
60040: GO 62927
60042: LD_INT 4
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60146
60050: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
60051: LD_ADDR_VAR 0 2
60055: PUSH
60056: LD_INT 2
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: LD_INT 5
60064: PUSH
60065: LD_INT 8
60067: PUSH
60068: LD_INT 11
60070: PUSH
60071: LD_INT 12
60073: PUSH
60074: LD_INT 15
60076: PUSH
60077: LD_INT 16
60079: PUSH
60080: LD_INT 22
60082: PUSH
60083: LD_INT 23
60085: PUSH
60086: LD_INT 26
60088: PUSH
60089: LD_INT 36
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 101
60108: PUSH
60109: LD_INT 102
60111: PUSH
60112: LD_INT 105
60114: PUSH
60115: LD_INT 106
60117: PUSH
60118: LD_INT 108
60120: PUSH
60121: LD_INT 116
60123: PUSH
60124: LD_INT 117
60126: PUSH
60127: LD_INT 118
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: ST_TO_ADDR
60144: GO 62927
60146: LD_INT 5
60148: DOUBLE
60149: EQUAL
60150: IFTRUE 60154
60152: GO 60266
60154: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
60155: LD_ADDR_VAR 0 2
60159: PUSH
60160: LD_INT 2
60162: PUSH
60163: LD_INT 4
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: LD_INT 6
60171: PUSH
60172: LD_INT 8
60174: PUSH
60175: LD_INT 11
60177: PUSH
60178: LD_INT 12
60180: PUSH
60181: LD_INT 15
60183: PUSH
60184: LD_INT 16
60186: PUSH
60187: LD_INT 22
60189: PUSH
60190: LD_INT 23
60192: PUSH
60193: LD_INT 25
60195: PUSH
60196: LD_INT 26
60198: PUSH
60199: LD_INT 36
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 101
60220: PUSH
60221: LD_INT 102
60223: PUSH
60224: LD_INT 105
60226: PUSH
60227: LD_INT 106
60229: PUSH
60230: LD_INT 108
60232: PUSH
60233: LD_INT 109
60235: PUSH
60236: LD_INT 112
60238: PUSH
60239: LD_INT 116
60241: PUSH
60242: LD_INT 117
60244: PUSH
60245: LD_INT 118
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: ST_TO_ADDR
60264: GO 62927
60266: LD_INT 6
60268: DOUBLE
60269: EQUAL
60270: IFTRUE 60274
60272: GO 60406
60274: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
60275: LD_ADDR_VAR 0 2
60279: PUSH
60280: LD_INT 2
60282: PUSH
60283: LD_INT 4
60285: PUSH
60286: LD_INT 5
60288: PUSH
60289: LD_INT 6
60291: PUSH
60292: LD_INT 8
60294: PUSH
60295: LD_INT 11
60297: PUSH
60298: LD_INT 12
60300: PUSH
60301: LD_INT 15
60303: PUSH
60304: LD_INT 16
60306: PUSH
60307: LD_INT 20
60309: PUSH
60310: LD_INT 21
60312: PUSH
60313: LD_INT 22
60315: PUSH
60316: LD_INT 23
60318: PUSH
60319: LD_INT 25
60321: PUSH
60322: LD_INT 26
60324: PUSH
60325: LD_INT 30
60327: PUSH
60328: LD_INT 31
60330: PUSH
60331: LD_INT 32
60333: PUSH
60334: LD_INT 36
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 101
60360: PUSH
60361: LD_INT 102
60363: PUSH
60364: LD_INT 105
60366: PUSH
60367: LD_INT 106
60369: PUSH
60370: LD_INT 108
60372: PUSH
60373: LD_INT 109
60375: PUSH
60376: LD_INT 112
60378: PUSH
60379: LD_INT 116
60381: PUSH
60382: LD_INT 117
60384: PUSH
60385: LD_INT 118
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: ST_TO_ADDR
60404: GO 62927
60406: LD_INT 7
60408: DOUBLE
60409: EQUAL
60410: IFTRUE 60414
60412: GO 60526
60414: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
60415: LD_ADDR_VAR 0 2
60419: PUSH
60420: LD_INT 2
60422: PUSH
60423: LD_INT 4
60425: PUSH
60426: LD_INT 5
60428: PUSH
60429: LD_INT 7
60431: PUSH
60432: LD_INT 11
60434: PUSH
60435: LD_INT 12
60437: PUSH
60438: LD_INT 15
60440: PUSH
60441: LD_INT 16
60443: PUSH
60444: LD_INT 20
60446: PUSH
60447: LD_INT 21
60449: PUSH
60450: LD_INT 22
60452: PUSH
60453: LD_INT 23
60455: PUSH
60456: LD_INT 25
60458: PUSH
60459: LD_INT 26
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 101
60480: PUSH
60481: LD_INT 102
60483: PUSH
60484: LD_INT 103
60486: PUSH
60487: LD_INT 105
60489: PUSH
60490: LD_INT 106
60492: PUSH
60493: LD_INT 108
60495: PUSH
60496: LD_INT 112
60498: PUSH
60499: LD_INT 116
60501: PUSH
60502: LD_INT 117
60504: PUSH
60505: LD_INT 118
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: ST_TO_ADDR
60524: GO 62927
60526: LD_INT 8
60528: DOUBLE
60529: EQUAL
60530: IFTRUE 60534
60532: GO 60674
60534: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
60535: LD_ADDR_VAR 0 2
60539: PUSH
60540: LD_INT 2
60542: PUSH
60543: LD_INT 4
60545: PUSH
60546: LD_INT 5
60548: PUSH
60549: LD_INT 6
60551: PUSH
60552: LD_INT 7
60554: PUSH
60555: LD_INT 8
60557: PUSH
60558: LD_INT 11
60560: PUSH
60561: LD_INT 12
60563: PUSH
60564: LD_INT 15
60566: PUSH
60567: LD_INT 16
60569: PUSH
60570: LD_INT 20
60572: PUSH
60573: LD_INT 21
60575: PUSH
60576: LD_INT 22
60578: PUSH
60579: LD_INT 23
60581: PUSH
60582: LD_INT 25
60584: PUSH
60585: LD_INT 26
60587: PUSH
60588: LD_INT 30
60590: PUSH
60591: LD_INT 31
60593: PUSH
60594: LD_INT 32
60596: PUSH
60597: LD_INT 36
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 101
60624: PUSH
60625: LD_INT 102
60627: PUSH
60628: LD_INT 103
60630: PUSH
60631: LD_INT 105
60633: PUSH
60634: LD_INT 106
60636: PUSH
60637: LD_INT 108
60639: PUSH
60640: LD_INT 109
60642: PUSH
60643: LD_INT 112
60645: PUSH
60646: LD_INT 116
60648: PUSH
60649: LD_INT 117
60651: PUSH
60652: LD_INT 118
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: ST_TO_ADDR
60672: GO 62927
60674: LD_INT 9
60676: DOUBLE
60677: EQUAL
60678: IFTRUE 60682
60680: GO 60830
60682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
60683: LD_ADDR_VAR 0 2
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 4
60693: PUSH
60694: LD_INT 5
60696: PUSH
60697: LD_INT 6
60699: PUSH
60700: LD_INT 7
60702: PUSH
60703: LD_INT 8
60705: PUSH
60706: LD_INT 11
60708: PUSH
60709: LD_INT 12
60711: PUSH
60712: LD_INT 15
60714: PUSH
60715: LD_INT 16
60717: PUSH
60718: LD_INT 20
60720: PUSH
60721: LD_INT 21
60723: PUSH
60724: LD_INT 22
60726: PUSH
60727: LD_INT 23
60729: PUSH
60730: LD_INT 25
60732: PUSH
60733: LD_INT 26
60735: PUSH
60736: LD_INT 28
60738: PUSH
60739: LD_INT 30
60741: PUSH
60742: LD_INT 31
60744: PUSH
60745: LD_INT 32
60747: PUSH
60748: LD_INT 36
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 101
60776: PUSH
60777: LD_INT 102
60779: PUSH
60780: LD_INT 103
60782: PUSH
60783: LD_INT 105
60785: PUSH
60786: LD_INT 106
60788: PUSH
60789: LD_INT 108
60791: PUSH
60792: LD_INT 109
60794: PUSH
60795: LD_INT 112
60797: PUSH
60798: LD_INT 114
60800: PUSH
60801: LD_INT 116
60803: PUSH
60804: LD_INT 117
60806: PUSH
60807: LD_INT 118
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: ST_TO_ADDR
60828: GO 62927
60830: LD_INT 10
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60838
60836: GO 61034
60838: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60839: LD_ADDR_VAR 0 2
60843: PUSH
60844: LD_INT 2
60846: PUSH
60847: LD_INT 4
60849: PUSH
60850: LD_INT 5
60852: PUSH
60853: LD_INT 6
60855: PUSH
60856: LD_INT 7
60858: PUSH
60859: LD_INT 8
60861: PUSH
60862: LD_INT 9
60864: PUSH
60865: LD_INT 10
60867: PUSH
60868: LD_INT 11
60870: PUSH
60871: LD_INT 12
60873: PUSH
60874: LD_INT 13
60876: PUSH
60877: LD_INT 14
60879: PUSH
60880: LD_INT 15
60882: PUSH
60883: LD_INT 16
60885: PUSH
60886: LD_INT 17
60888: PUSH
60889: LD_INT 18
60891: PUSH
60892: LD_INT 19
60894: PUSH
60895: LD_INT 20
60897: PUSH
60898: LD_INT 21
60900: PUSH
60901: LD_INT 22
60903: PUSH
60904: LD_INT 23
60906: PUSH
60907: LD_INT 24
60909: PUSH
60910: LD_INT 25
60912: PUSH
60913: LD_INT 26
60915: PUSH
60916: LD_INT 28
60918: PUSH
60919: LD_INT 30
60921: PUSH
60922: LD_INT 31
60924: PUSH
60925: LD_INT 32
60927: PUSH
60928: LD_INT 36
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 101
60964: PUSH
60965: LD_INT 102
60967: PUSH
60968: LD_INT 103
60970: PUSH
60971: LD_INT 104
60973: PUSH
60974: LD_INT 105
60976: PUSH
60977: LD_INT 106
60979: PUSH
60980: LD_INT 107
60982: PUSH
60983: LD_INT 108
60985: PUSH
60986: LD_INT 109
60988: PUSH
60989: LD_INT 110
60991: PUSH
60992: LD_INT 111
60994: PUSH
60995: LD_INT 112
60997: PUSH
60998: LD_INT 114
61000: PUSH
61001: LD_INT 116
61003: PUSH
61004: LD_INT 117
61006: PUSH
61007: LD_INT 118
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: ST_TO_ADDR
61032: GO 62927
61034: LD_INT 11
61036: DOUBLE
61037: EQUAL
61038: IFTRUE 61042
61040: GO 61246
61042: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
61043: LD_ADDR_VAR 0 2
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: LD_INT 5
61059: PUSH
61060: LD_INT 6
61062: PUSH
61063: LD_INT 7
61065: PUSH
61066: LD_INT 8
61068: PUSH
61069: LD_INT 9
61071: PUSH
61072: LD_INT 10
61074: PUSH
61075: LD_INT 11
61077: PUSH
61078: LD_INT 12
61080: PUSH
61081: LD_INT 13
61083: PUSH
61084: LD_INT 14
61086: PUSH
61087: LD_INT 15
61089: PUSH
61090: LD_INT 16
61092: PUSH
61093: LD_INT 17
61095: PUSH
61096: LD_INT 18
61098: PUSH
61099: LD_INT 19
61101: PUSH
61102: LD_INT 20
61104: PUSH
61105: LD_INT 21
61107: PUSH
61108: LD_INT 22
61110: PUSH
61111: LD_INT 23
61113: PUSH
61114: LD_INT 24
61116: PUSH
61117: LD_INT 25
61119: PUSH
61120: LD_INT 26
61122: PUSH
61123: LD_INT 28
61125: PUSH
61126: LD_INT 30
61128: PUSH
61129: LD_INT 31
61131: PUSH
61132: LD_INT 32
61134: PUSH
61135: LD_INT 34
61137: PUSH
61138: LD_INT 36
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 101
61176: PUSH
61177: LD_INT 102
61179: PUSH
61180: LD_INT 103
61182: PUSH
61183: LD_INT 104
61185: PUSH
61186: LD_INT 105
61188: PUSH
61189: LD_INT 106
61191: PUSH
61192: LD_INT 107
61194: PUSH
61195: LD_INT 108
61197: PUSH
61198: LD_INT 109
61200: PUSH
61201: LD_INT 110
61203: PUSH
61204: LD_INT 111
61206: PUSH
61207: LD_INT 112
61209: PUSH
61210: LD_INT 114
61212: PUSH
61213: LD_INT 116
61215: PUSH
61216: LD_INT 117
61218: PUSH
61219: LD_INT 118
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: ST_TO_ADDR
61244: GO 62927
61246: LD_INT 12
61248: DOUBLE
61249: EQUAL
61250: IFTRUE 61254
61252: GO 61474
61254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
61255: LD_ADDR_VAR 0 2
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: LD_INT 4
61271: PUSH
61272: LD_INT 5
61274: PUSH
61275: LD_INT 6
61277: PUSH
61278: LD_INT 7
61280: PUSH
61281: LD_INT 8
61283: PUSH
61284: LD_INT 9
61286: PUSH
61287: LD_INT 10
61289: PUSH
61290: LD_INT 11
61292: PUSH
61293: LD_INT 12
61295: PUSH
61296: LD_INT 13
61298: PUSH
61299: LD_INT 14
61301: PUSH
61302: LD_INT 15
61304: PUSH
61305: LD_INT 16
61307: PUSH
61308: LD_INT 17
61310: PUSH
61311: LD_INT 18
61313: PUSH
61314: LD_INT 19
61316: PUSH
61317: LD_INT 20
61319: PUSH
61320: LD_INT 21
61322: PUSH
61323: LD_INT 22
61325: PUSH
61326: LD_INT 23
61328: PUSH
61329: LD_INT 24
61331: PUSH
61332: LD_INT 25
61334: PUSH
61335: LD_INT 26
61337: PUSH
61338: LD_INT 27
61340: PUSH
61341: LD_INT 28
61343: PUSH
61344: LD_INT 30
61346: PUSH
61347: LD_INT 31
61349: PUSH
61350: LD_INT 32
61352: PUSH
61353: LD_INT 33
61355: PUSH
61356: LD_INT 34
61358: PUSH
61359: LD_INT 36
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 101
61400: PUSH
61401: LD_INT 102
61403: PUSH
61404: LD_INT 103
61406: PUSH
61407: LD_INT 104
61409: PUSH
61410: LD_INT 105
61412: PUSH
61413: LD_INT 106
61415: PUSH
61416: LD_INT 107
61418: PUSH
61419: LD_INT 108
61421: PUSH
61422: LD_INT 109
61424: PUSH
61425: LD_INT 110
61427: PUSH
61428: LD_INT 111
61430: PUSH
61431: LD_INT 112
61433: PUSH
61434: LD_INT 113
61436: PUSH
61437: LD_INT 114
61439: PUSH
61440: LD_INT 116
61442: PUSH
61443: LD_INT 117
61445: PUSH
61446: LD_INT 118
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: ST_TO_ADDR
61472: GO 62927
61474: LD_INT 13
61476: DOUBLE
61477: EQUAL
61478: IFTRUE 61482
61480: GO 61690
61482: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
61483: LD_ADDR_VAR 0 2
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: LD_INT 2
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: LD_INT 5
61502: PUSH
61503: LD_INT 8
61505: PUSH
61506: LD_INT 9
61508: PUSH
61509: LD_INT 10
61511: PUSH
61512: LD_INT 11
61514: PUSH
61515: LD_INT 12
61517: PUSH
61518: LD_INT 14
61520: PUSH
61521: LD_INT 15
61523: PUSH
61524: LD_INT 16
61526: PUSH
61527: LD_INT 17
61529: PUSH
61530: LD_INT 18
61532: PUSH
61533: LD_INT 19
61535: PUSH
61536: LD_INT 20
61538: PUSH
61539: LD_INT 21
61541: PUSH
61542: LD_INT 22
61544: PUSH
61545: LD_INT 23
61547: PUSH
61548: LD_INT 24
61550: PUSH
61551: LD_INT 25
61553: PUSH
61554: LD_INT 26
61556: PUSH
61557: LD_INT 27
61559: PUSH
61560: LD_INT 28
61562: PUSH
61563: LD_INT 30
61565: PUSH
61566: LD_INT 31
61568: PUSH
61569: LD_INT 32
61571: PUSH
61572: LD_INT 33
61574: PUSH
61575: LD_INT 34
61577: PUSH
61578: LD_INT 36
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 101
61616: PUSH
61617: LD_INT 102
61619: PUSH
61620: LD_INT 103
61622: PUSH
61623: LD_INT 104
61625: PUSH
61626: LD_INT 105
61628: PUSH
61629: LD_INT 106
61631: PUSH
61632: LD_INT 107
61634: PUSH
61635: LD_INT 108
61637: PUSH
61638: LD_INT 109
61640: PUSH
61641: LD_INT 110
61643: PUSH
61644: LD_INT 111
61646: PUSH
61647: LD_INT 112
61649: PUSH
61650: LD_INT 113
61652: PUSH
61653: LD_INT 114
61655: PUSH
61656: LD_INT 116
61658: PUSH
61659: LD_INT 117
61661: PUSH
61662: LD_INT 118
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: ST_TO_ADDR
61688: GO 62927
61690: LD_INT 14
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61698
61696: GO 61922
61698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
61699: LD_ADDR_VAR 0 2
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: LD_INT 2
61709: PUSH
61710: LD_INT 3
61712: PUSH
61713: LD_INT 4
61715: PUSH
61716: LD_INT 5
61718: PUSH
61719: LD_INT 6
61721: PUSH
61722: LD_INT 7
61724: PUSH
61725: LD_INT 8
61727: PUSH
61728: LD_INT 9
61730: PUSH
61731: LD_INT 10
61733: PUSH
61734: LD_INT 11
61736: PUSH
61737: LD_INT 12
61739: PUSH
61740: LD_INT 13
61742: PUSH
61743: LD_INT 14
61745: PUSH
61746: LD_INT 15
61748: PUSH
61749: LD_INT 16
61751: PUSH
61752: LD_INT 17
61754: PUSH
61755: LD_INT 18
61757: PUSH
61758: LD_INT 19
61760: PUSH
61761: LD_INT 20
61763: PUSH
61764: LD_INT 21
61766: PUSH
61767: LD_INT 22
61769: PUSH
61770: LD_INT 23
61772: PUSH
61773: LD_INT 24
61775: PUSH
61776: LD_INT 25
61778: PUSH
61779: LD_INT 26
61781: PUSH
61782: LD_INT 27
61784: PUSH
61785: LD_INT 28
61787: PUSH
61788: LD_INT 29
61790: PUSH
61791: LD_INT 30
61793: PUSH
61794: LD_INT 31
61796: PUSH
61797: LD_INT 32
61799: PUSH
61800: LD_INT 33
61802: PUSH
61803: LD_INT 34
61805: PUSH
61806: LD_INT 36
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 101
61848: PUSH
61849: LD_INT 102
61851: PUSH
61852: LD_INT 103
61854: PUSH
61855: LD_INT 104
61857: PUSH
61858: LD_INT 105
61860: PUSH
61861: LD_INT 106
61863: PUSH
61864: LD_INT 107
61866: PUSH
61867: LD_INT 108
61869: PUSH
61870: LD_INT 109
61872: PUSH
61873: LD_INT 110
61875: PUSH
61876: LD_INT 111
61878: PUSH
61879: LD_INT 112
61881: PUSH
61882: LD_INT 113
61884: PUSH
61885: LD_INT 114
61887: PUSH
61888: LD_INT 116
61890: PUSH
61891: LD_INT 117
61893: PUSH
61894: LD_INT 118
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: ST_TO_ADDR
61920: GO 62927
61922: LD_INT 15
61924: DOUBLE
61925: EQUAL
61926: IFTRUE 61930
61928: GO 62154
61930: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61931: LD_ADDR_VAR 0 2
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: LD_INT 4
61947: PUSH
61948: LD_INT 5
61950: PUSH
61951: LD_INT 6
61953: PUSH
61954: LD_INT 7
61956: PUSH
61957: LD_INT 8
61959: PUSH
61960: LD_INT 9
61962: PUSH
61963: LD_INT 10
61965: PUSH
61966: LD_INT 11
61968: PUSH
61969: LD_INT 12
61971: PUSH
61972: LD_INT 13
61974: PUSH
61975: LD_INT 14
61977: PUSH
61978: LD_INT 15
61980: PUSH
61981: LD_INT 16
61983: PUSH
61984: LD_INT 17
61986: PUSH
61987: LD_INT 18
61989: PUSH
61990: LD_INT 19
61992: PUSH
61993: LD_INT 20
61995: PUSH
61996: LD_INT 21
61998: PUSH
61999: LD_INT 22
62001: PUSH
62002: LD_INT 23
62004: PUSH
62005: LD_INT 24
62007: PUSH
62008: LD_INT 25
62010: PUSH
62011: LD_INT 26
62013: PUSH
62014: LD_INT 27
62016: PUSH
62017: LD_INT 28
62019: PUSH
62020: LD_INT 29
62022: PUSH
62023: LD_INT 30
62025: PUSH
62026: LD_INT 31
62028: PUSH
62029: LD_INT 32
62031: PUSH
62032: LD_INT 33
62034: PUSH
62035: LD_INT 34
62037: PUSH
62038: LD_INT 36
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 101
62080: PUSH
62081: LD_INT 102
62083: PUSH
62084: LD_INT 103
62086: PUSH
62087: LD_INT 104
62089: PUSH
62090: LD_INT 105
62092: PUSH
62093: LD_INT 106
62095: PUSH
62096: LD_INT 107
62098: PUSH
62099: LD_INT 108
62101: PUSH
62102: LD_INT 109
62104: PUSH
62105: LD_INT 110
62107: PUSH
62108: LD_INT 111
62110: PUSH
62111: LD_INT 112
62113: PUSH
62114: LD_INT 113
62116: PUSH
62117: LD_INT 114
62119: PUSH
62120: LD_INT 116
62122: PUSH
62123: LD_INT 117
62125: PUSH
62126: LD_INT 118
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: ST_TO_ADDR
62152: GO 62927
62154: LD_INT 16
62156: DOUBLE
62157: EQUAL
62158: IFTRUE 62162
62160: GO 62298
62162: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
62163: LD_ADDR_VAR 0 2
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: LD_INT 4
62173: PUSH
62174: LD_INT 5
62176: PUSH
62177: LD_INT 7
62179: PUSH
62180: LD_INT 11
62182: PUSH
62183: LD_INT 12
62185: PUSH
62186: LD_INT 15
62188: PUSH
62189: LD_INT 16
62191: PUSH
62192: LD_INT 20
62194: PUSH
62195: LD_INT 21
62197: PUSH
62198: LD_INT 22
62200: PUSH
62201: LD_INT 23
62203: PUSH
62204: LD_INT 25
62206: PUSH
62207: LD_INT 26
62209: PUSH
62210: LD_INT 30
62212: PUSH
62213: LD_INT 31
62215: PUSH
62216: LD_INT 32
62218: PUSH
62219: LD_INT 33
62221: PUSH
62222: LD_INT 34
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 101
62248: PUSH
62249: LD_INT 102
62251: PUSH
62252: LD_INT 103
62254: PUSH
62255: LD_INT 106
62257: PUSH
62258: LD_INT 108
62260: PUSH
62261: LD_INT 112
62263: PUSH
62264: LD_INT 113
62266: PUSH
62267: LD_INT 114
62269: PUSH
62270: LD_INT 116
62272: PUSH
62273: LD_INT 117
62275: PUSH
62276: LD_INT 118
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: ST_TO_ADDR
62296: GO 62927
62298: LD_INT 17
62300: DOUBLE
62301: EQUAL
62302: IFTRUE 62306
62304: GO 62530
62306: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
62307: LD_ADDR_VAR 0 2
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: LD_INT 3
62320: PUSH
62321: LD_INT 4
62323: PUSH
62324: LD_INT 5
62326: PUSH
62327: LD_INT 6
62329: PUSH
62330: LD_INT 7
62332: PUSH
62333: LD_INT 8
62335: PUSH
62336: LD_INT 9
62338: PUSH
62339: LD_INT 10
62341: PUSH
62342: LD_INT 11
62344: PUSH
62345: LD_INT 12
62347: PUSH
62348: LD_INT 13
62350: PUSH
62351: LD_INT 14
62353: PUSH
62354: LD_INT 15
62356: PUSH
62357: LD_INT 16
62359: PUSH
62360: LD_INT 17
62362: PUSH
62363: LD_INT 18
62365: PUSH
62366: LD_INT 19
62368: PUSH
62369: LD_INT 20
62371: PUSH
62372: LD_INT 21
62374: PUSH
62375: LD_INT 22
62377: PUSH
62378: LD_INT 23
62380: PUSH
62381: LD_INT 24
62383: PUSH
62384: LD_INT 25
62386: PUSH
62387: LD_INT 26
62389: PUSH
62390: LD_INT 27
62392: PUSH
62393: LD_INT 28
62395: PUSH
62396: LD_INT 29
62398: PUSH
62399: LD_INT 30
62401: PUSH
62402: LD_INT 31
62404: PUSH
62405: LD_INT 32
62407: PUSH
62408: LD_INT 33
62410: PUSH
62411: LD_INT 34
62413: PUSH
62414: LD_INT 36
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 101
62456: PUSH
62457: LD_INT 102
62459: PUSH
62460: LD_INT 103
62462: PUSH
62463: LD_INT 104
62465: PUSH
62466: LD_INT 105
62468: PUSH
62469: LD_INT 106
62471: PUSH
62472: LD_INT 107
62474: PUSH
62475: LD_INT 108
62477: PUSH
62478: LD_INT 109
62480: PUSH
62481: LD_INT 110
62483: PUSH
62484: LD_INT 111
62486: PUSH
62487: LD_INT 112
62489: PUSH
62490: LD_INT 113
62492: PUSH
62493: LD_INT 114
62495: PUSH
62496: LD_INT 116
62498: PUSH
62499: LD_INT 117
62501: PUSH
62502: LD_INT 118
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: ST_TO_ADDR
62528: GO 62927
62530: LD_INT 18
62532: DOUBLE
62533: EQUAL
62534: IFTRUE 62538
62536: GO 62686
62538: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
62539: LD_ADDR_VAR 0 2
62543: PUSH
62544: LD_INT 2
62546: PUSH
62547: LD_INT 4
62549: PUSH
62550: LD_INT 5
62552: PUSH
62553: LD_INT 7
62555: PUSH
62556: LD_INT 11
62558: PUSH
62559: LD_INT 12
62561: PUSH
62562: LD_INT 15
62564: PUSH
62565: LD_INT 16
62567: PUSH
62568: LD_INT 20
62570: PUSH
62571: LD_INT 21
62573: PUSH
62574: LD_INT 22
62576: PUSH
62577: LD_INT 23
62579: PUSH
62580: LD_INT 25
62582: PUSH
62583: LD_INT 26
62585: PUSH
62586: LD_INT 30
62588: PUSH
62589: LD_INT 31
62591: PUSH
62592: LD_INT 32
62594: PUSH
62595: LD_INT 33
62597: PUSH
62598: LD_INT 34
62600: PUSH
62601: LD_INT 35
62603: PUSH
62604: LD_INT 36
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 101
62632: PUSH
62633: LD_INT 102
62635: PUSH
62636: LD_INT 103
62638: PUSH
62639: LD_INT 106
62641: PUSH
62642: LD_INT 108
62644: PUSH
62645: LD_INT 112
62647: PUSH
62648: LD_INT 113
62650: PUSH
62651: LD_INT 114
62653: PUSH
62654: LD_INT 115
62656: PUSH
62657: LD_INT 116
62659: PUSH
62660: LD_INT 117
62662: PUSH
62663: LD_INT 118
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: ST_TO_ADDR
62684: GO 62927
62686: LD_INT 19
62688: DOUBLE
62689: EQUAL
62690: IFTRUE 62694
62692: GO 62926
62694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
62695: LD_ADDR_VAR 0 2
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: LD_INT 4
62711: PUSH
62712: LD_INT 5
62714: PUSH
62715: LD_INT 6
62717: PUSH
62718: LD_INT 7
62720: PUSH
62721: LD_INT 8
62723: PUSH
62724: LD_INT 9
62726: PUSH
62727: LD_INT 10
62729: PUSH
62730: LD_INT 11
62732: PUSH
62733: LD_INT 12
62735: PUSH
62736: LD_INT 13
62738: PUSH
62739: LD_INT 14
62741: PUSH
62742: LD_INT 15
62744: PUSH
62745: LD_INT 16
62747: PUSH
62748: LD_INT 17
62750: PUSH
62751: LD_INT 18
62753: PUSH
62754: LD_INT 19
62756: PUSH
62757: LD_INT 20
62759: PUSH
62760: LD_INT 21
62762: PUSH
62763: LD_INT 22
62765: PUSH
62766: LD_INT 23
62768: PUSH
62769: LD_INT 24
62771: PUSH
62772: LD_INT 25
62774: PUSH
62775: LD_INT 26
62777: PUSH
62778: LD_INT 27
62780: PUSH
62781: LD_INT 28
62783: PUSH
62784: LD_INT 29
62786: PUSH
62787: LD_INT 30
62789: PUSH
62790: LD_INT 31
62792: PUSH
62793: LD_INT 32
62795: PUSH
62796: LD_INT 33
62798: PUSH
62799: LD_INT 34
62801: PUSH
62802: LD_INT 35
62804: PUSH
62805: LD_INT 36
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 101
62848: PUSH
62849: LD_INT 102
62851: PUSH
62852: LD_INT 103
62854: PUSH
62855: LD_INT 104
62857: PUSH
62858: LD_INT 105
62860: PUSH
62861: LD_INT 106
62863: PUSH
62864: LD_INT 107
62866: PUSH
62867: LD_INT 108
62869: PUSH
62870: LD_INT 109
62872: PUSH
62873: LD_INT 110
62875: PUSH
62876: LD_INT 111
62878: PUSH
62879: LD_INT 112
62881: PUSH
62882: LD_INT 113
62884: PUSH
62885: LD_INT 114
62887: PUSH
62888: LD_INT 115
62890: PUSH
62891: LD_INT 116
62893: PUSH
62894: LD_INT 117
62896: PUSH
62897: LD_INT 118
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: ST_TO_ADDR
62924: GO 62927
62926: POP
// end else
62927: GO 63158
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62929: LD_ADDR_VAR 0 2
62933: PUSH
62934: LD_INT 1
62936: PUSH
62937: LD_INT 2
62939: PUSH
62940: LD_INT 3
62942: PUSH
62943: LD_INT 4
62945: PUSH
62946: LD_INT 5
62948: PUSH
62949: LD_INT 6
62951: PUSH
62952: LD_INT 7
62954: PUSH
62955: LD_INT 8
62957: PUSH
62958: LD_INT 9
62960: PUSH
62961: LD_INT 10
62963: PUSH
62964: LD_INT 11
62966: PUSH
62967: LD_INT 12
62969: PUSH
62970: LD_INT 13
62972: PUSH
62973: LD_INT 14
62975: PUSH
62976: LD_INT 15
62978: PUSH
62979: LD_INT 16
62981: PUSH
62982: LD_INT 17
62984: PUSH
62985: LD_INT 18
62987: PUSH
62988: LD_INT 19
62990: PUSH
62991: LD_INT 20
62993: PUSH
62994: LD_INT 21
62996: PUSH
62997: LD_INT 22
62999: PUSH
63000: LD_INT 23
63002: PUSH
63003: LD_INT 24
63005: PUSH
63006: LD_INT 25
63008: PUSH
63009: LD_INT 26
63011: PUSH
63012: LD_INT 27
63014: PUSH
63015: LD_INT 28
63017: PUSH
63018: LD_INT 29
63020: PUSH
63021: LD_INT 30
63023: PUSH
63024: LD_INT 31
63026: PUSH
63027: LD_INT 32
63029: PUSH
63030: LD_INT 33
63032: PUSH
63033: LD_INT 34
63035: PUSH
63036: LD_INT 35
63038: PUSH
63039: LD_INT 36
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 101
63082: PUSH
63083: LD_INT 102
63085: PUSH
63086: LD_INT 103
63088: PUSH
63089: LD_INT 104
63091: PUSH
63092: LD_INT 105
63094: PUSH
63095: LD_INT 106
63097: PUSH
63098: LD_INT 107
63100: PUSH
63101: LD_INT 108
63103: PUSH
63104: LD_INT 109
63106: PUSH
63107: LD_INT 110
63109: PUSH
63110: LD_INT 111
63112: PUSH
63113: LD_INT 112
63115: PUSH
63116: LD_INT 113
63118: PUSH
63119: LD_INT 114
63121: PUSH
63122: LD_INT 115
63124: PUSH
63125: LD_INT 116
63127: PUSH
63128: LD_INT 117
63130: PUSH
63131: LD_INT 118
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: ST_TO_ADDR
// if result then
63158: LD_VAR 0 2
63162: IFFALSE 63948
// begin normal :=  ;
63164: LD_ADDR_VAR 0 5
63168: PUSH
63169: LD_STRING 
63171: ST_TO_ADDR
// hardcore :=  ;
63172: LD_ADDR_VAR 0 6
63176: PUSH
63177: LD_STRING 
63179: ST_TO_ADDR
// active :=  ;
63180: LD_ADDR_VAR 0 7
63184: PUSH
63185: LD_STRING 
63187: ST_TO_ADDR
// for i = 1 to normalCounter do
63188: LD_ADDR_VAR 0 8
63192: PUSH
63193: DOUBLE
63194: LD_INT 1
63196: DEC
63197: ST_TO_ADDR
63198: LD_EXP 43
63202: PUSH
63203: FOR_TO
63204: IFFALSE 63305
// begin tmp := 0 ;
63206: LD_ADDR_VAR 0 3
63210: PUSH
63211: LD_STRING 0
63213: ST_TO_ADDR
// if result [ 1 ] then
63214: LD_VAR 0 2
63218: PUSH
63219: LD_INT 1
63221: ARRAY
63222: IFFALSE 63287
// if result [ 1 ] [ 1 ] = i then
63224: LD_VAR 0 2
63228: PUSH
63229: LD_INT 1
63231: ARRAY
63232: PUSH
63233: LD_INT 1
63235: ARRAY
63236: PUSH
63237: LD_VAR 0 8
63241: EQUAL
63242: IFFALSE 63287
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: LD_VAR 0 2
63253: PPUSH
63254: LD_INT 1
63256: PPUSH
63257: LD_VAR 0 2
63261: PUSH
63262: LD_INT 1
63264: ARRAY
63265: PPUSH
63266: LD_INT 1
63268: PPUSH
63269: CALL_OW 3
63273: PPUSH
63274: CALL_OW 1
63278: ST_TO_ADDR
// tmp := 1 ;
63279: LD_ADDR_VAR 0 3
63283: PUSH
63284: LD_STRING 1
63286: ST_TO_ADDR
// end ; normal := normal & tmp ;
63287: LD_ADDR_VAR 0 5
63291: PUSH
63292: LD_VAR 0 5
63296: PUSH
63297: LD_VAR 0 3
63301: STR
63302: ST_TO_ADDR
// end ;
63303: GO 63203
63305: POP
63306: POP
// for i = 1 to hardcoreCounter do
63307: LD_ADDR_VAR 0 8
63311: PUSH
63312: DOUBLE
63313: LD_INT 1
63315: DEC
63316: ST_TO_ADDR
63317: LD_EXP 44
63321: PUSH
63322: FOR_TO
63323: IFFALSE 63428
// begin tmp := 0 ;
63325: LD_ADDR_VAR 0 3
63329: PUSH
63330: LD_STRING 0
63332: ST_TO_ADDR
// if result [ 2 ] then
63333: LD_VAR 0 2
63337: PUSH
63338: LD_INT 2
63340: ARRAY
63341: IFFALSE 63410
// if result [ 2 ] [ 1 ] = 100 + i then
63343: LD_VAR 0 2
63347: PUSH
63348: LD_INT 2
63350: ARRAY
63351: PUSH
63352: LD_INT 1
63354: ARRAY
63355: PUSH
63356: LD_INT 100
63358: PUSH
63359: LD_VAR 0 8
63363: PLUS
63364: EQUAL
63365: IFFALSE 63410
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
63367: LD_ADDR_VAR 0 2
63371: PUSH
63372: LD_VAR 0 2
63376: PPUSH
63377: LD_INT 2
63379: PPUSH
63380: LD_VAR 0 2
63384: PUSH
63385: LD_INT 2
63387: ARRAY
63388: PPUSH
63389: LD_INT 1
63391: PPUSH
63392: CALL_OW 3
63396: PPUSH
63397: CALL_OW 1
63401: ST_TO_ADDR
// tmp := 1 ;
63402: LD_ADDR_VAR 0 3
63406: PUSH
63407: LD_STRING 1
63409: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
63410: LD_ADDR_VAR 0 6
63414: PUSH
63415: LD_VAR 0 6
63419: PUSH
63420: LD_VAR 0 3
63424: STR
63425: ST_TO_ADDR
// end ;
63426: GO 63322
63428: POP
63429: POP
// if isGameLoad then
63430: LD_VAR 0 1
63434: IFFALSE 63909
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
63436: LD_ADDR_VAR 0 4
63440: PUSH
63441: LD_EXP 47
63445: PUSH
63446: LD_EXP 46
63450: PUSH
63451: LD_EXP 48
63455: PUSH
63456: LD_EXP 45
63460: PUSH
63461: LD_EXP 49
63465: PUSH
63466: LD_EXP 50
63470: PUSH
63471: LD_EXP 51
63475: PUSH
63476: LD_EXP 52
63480: PUSH
63481: LD_EXP 53
63485: PUSH
63486: LD_EXP 54
63490: PUSH
63491: LD_EXP 55
63495: PUSH
63496: LD_EXP 56
63500: PUSH
63501: LD_EXP 57
63505: PUSH
63506: LD_EXP 58
63510: PUSH
63511: LD_EXP 66
63515: PUSH
63516: LD_EXP 67
63520: PUSH
63521: LD_EXP 68
63525: PUSH
63526: LD_EXP 69
63530: PUSH
63531: LD_EXP 71
63535: PUSH
63536: LD_EXP 72
63540: PUSH
63541: LD_EXP 73
63545: PUSH
63546: LD_EXP 76
63550: PUSH
63551: LD_EXP 78
63555: PUSH
63556: LD_EXP 79
63560: PUSH
63561: LD_EXP 80
63565: PUSH
63566: LD_EXP 82
63570: PUSH
63571: LD_EXP 83
63575: PUSH
63576: LD_EXP 86
63580: PUSH
63581: LD_EXP 87
63585: PUSH
63586: LD_EXP 88
63590: PUSH
63591: LD_EXP 89
63595: PUSH
63596: LD_EXP 90
63600: PUSH
63601: LD_EXP 91
63605: PUSH
63606: LD_EXP 92
63610: PUSH
63611: LD_EXP 93
63615: PUSH
63616: LD_EXP 94
63620: PUSH
63621: LD_EXP 59
63625: PUSH
63626: LD_EXP 60
63630: PUSH
63631: LD_EXP 63
63635: PUSH
63636: LD_EXP 64
63640: PUSH
63641: LD_EXP 65
63645: PUSH
63646: LD_EXP 61
63650: PUSH
63651: LD_EXP 62
63655: PUSH
63656: LD_EXP 70
63660: PUSH
63661: LD_EXP 74
63665: PUSH
63666: LD_EXP 75
63670: PUSH
63671: LD_EXP 77
63675: PUSH
63676: LD_EXP 81
63680: PUSH
63681: LD_EXP 84
63685: PUSH
63686: LD_EXP 85
63690: PUSH
63691: LD_EXP 95
63695: PUSH
63696: LD_EXP 96
63700: PUSH
63701: LD_EXP 97
63705: PUSH
63706: LD_EXP 98
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: ST_TO_ADDR
// tmp :=  ;
63767: LD_ADDR_VAR 0 3
63771: PUSH
63772: LD_STRING 
63774: ST_TO_ADDR
// for i = 1 to normalCounter do
63775: LD_ADDR_VAR 0 8
63779: PUSH
63780: DOUBLE
63781: LD_INT 1
63783: DEC
63784: ST_TO_ADDR
63785: LD_EXP 43
63789: PUSH
63790: FOR_TO
63791: IFFALSE 63827
// begin if flags [ i ] then
63793: LD_VAR 0 4
63797: PUSH
63798: LD_VAR 0 8
63802: ARRAY
63803: IFFALSE 63825
// tmp := tmp & i & ; ;
63805: LD_ADDR_VAR 0 3
63809: PUSH
63810: LD_VAR 0 3
63814: PUSH
63815: LD_VAR 0 8
63819: STR
63820: PUSH
63821: LD_STRING ;
63823: STR
63824: ST_TO_ADDR
// end ;
63825: GO 63790
63827: POP
63828: POP
// for i = 1 to hardcoreCounter do
63829: LD_ADDR_VAR 0 8
63833: PUSH
63834: DOUBLE
63835: LD_INT 1
63837: DEC
63838: ST_TO_ADDR
63839: LD_EXP 44
63843: PUSH
63844: FOR_TO
63845: IFFALSE 63891
// begin if flags [ normalCounter + i ] then
63847: LD_VAR 0 4
63851: PUSH
63852: LD_EXP 43
63856: PUSH
63857: LD_VAR 0 8
63861: PLUS
63862: ARRAY
63863: IFFALSE 63889
// tmp := tmp & ( 100 + i ) & ; ;
63865: LD_ADDR_VAR 0 3
63869: PUSH
63870: LD_VAR 0 3
63874: PUSH
63875: LD_INT 100
63877: PUSH
63878: LD_VAR 0 8
63882: PLUS
63883: STR
63884: PUSH
63885: LD_STRING ;
63887: STR
63888: ST_TO_ADDR
// end ;
63889: GO 63844
63891: POP
63892: POP
// if tmp then
63893: LD_VAR 0 3
63897: IFFALSE 63909
// active := tmp ;
63899: LD_ADDR_VAR 0 7
63903: PUSH
63904: LD_VAR 0 3
63908: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63909: LD_STRING getStreamItemsFromMission("
63911: PUSH
63912: LD_VAR 0 5
63916: STR
63917: PUSH
63918: LD_STRING ","
63920: STR
63921: PUSH
63922: LD_VAR 0 6
63926: STR
63927: PUSH
63928: LD_STRING ","
63930: STR
63931: PUSH
63932: LD_VAR 0 7
63936: STR
63937: PUSH
63938: LD_STRING ")
63940: STR
63941: PPUSH
63942: CALL_OW 559
// end else
63946: GO 63955
// ToLua ( getStreamItemsFromMission("","","") ) ;
63948: LD_STRING getStreamItemsFromMission("","","")
63950: PPUSH
63951: CALL_OW 559
// end ;
63955: LD_VAR 0 2
63959: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63960: LD_EXP 42
63964: PUSH
63965: LD_EXP 47
63969: AND
63970: IFFALSE 64094
63972: GO 63974
63974: DISABLE
63975: LD_INT 0
63977: PPUSH
63978: PPUSH
// begin enable ;
63979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63980: LD_ADDR_VAR 0 2
63984: PUSH
63985: LD_INT 22
63987: PUSH
63988: LD_OWVAR 2
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 34
64002: PUSH
64003: LD_INT 7
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 34
64012: PUSH
64013: LD_INT 45
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 34
64022: PUSH
64023: LD_INT 28
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 34
64032: PUSH
64033: LD_INT 47
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PPUSH
64051: CALL_OW 69
64055: ST_TO_ADDR
// if not tmp then
64056: LD_VAR 0 2
64060: NOT
64061: IFFALSE 64065
// exit ;
64063: GO 64094
// for i in tmp do
64065: LD_ADDR_VAR 0 1
64069: PUSH
64070: LD_VAR 0 2
64074: PUSH
64075: FOR_IN
64076: IFFALSE 64092
// begin SetLives ( i , 0 ) ;
64078: LD_VAR 0 1
64082: PPUSH
64083: LD_INT 0
64085: PPUSH
64086: CALL_OW 234
// end ;
64090: GO 64075
64092: POP
64093: POP
// end ;
64094: PPOPN 2
64096: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
64097: LD_EXP 42
64101: PUSH
64102: LD_EXP 48
64106: AND
64107: IFFALSE 64191
64109: GO 64111
64111: DISABLE
64112: LD_INT 0
64114: PPUSH
64115: PPUSH
// begin enable ;
64116: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
64117: LD_ADDR_VAR 0 2
64121: PUSH
64122: LD_INT 22
64124: PUSH
64125: LD_OWVAR 2
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 32
64136: PUSH
64137: LD_INT 3
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PPUSH
64148: CALL_OW 69
64152: ST_TO_ADDR
// if not tmp then
64153: LD_VAR 0 2
64157: NOT
64158: IFFALSE 64162
// exit ;
64160: GO 64191
// for i in tmp do
64162: LD_ADDR_VAR 0 1
64166: PUSH
64167: LD_VAR 0 2
64171: PUSH
64172: FOR_IN
64173: IFFALSE 64189
// begin SetLives ( i , 0 ) ;
64175: LD_VAR 0 1
64179: PPUSH
64180: LD_INT 0
64182: PPUSH
64183: CALL_OW 234
// end ;
64187: GO 64172
64189: POP
64190: POP
// end ;
64191: PPOPN 2
64193: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
64194: LD_EXP 42
64198: PUSH
64199: LD_EXP 45
64203: AND
64204: IFFALSE 64297
64206: GO 64208
64208: DISABLE
64209: LD_INT 0
64211: PPUSH
// begin enable ;
64212: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
64213: LD_ADDR_VAR 0 1
64217: PUSH
64218: LD_INT 22
64220: PUSH
64221: LD_OWVAR 2
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 2
64232: PUSH
64233: LD_INT 25
64235: PUSH
64236: LD_INT 5
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 25
64245: PUSH
64246: LD_INT 9
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 25
64255: PUSH
64256: LD_INT 8
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PPUSH
64273: CALL_OW 69
64277: PUSH
64278: FOR_IN
64279: IFFALSE 64295
// begin SetClass ( i , 1 ) ;
64281: LD_VAR 0 1
64285: PPUSH
64286: LD_INT 1
64288: PPUSH
64289: CALL_OW 336
// end ;
64293: GO 64278
64295: POP
64296: POP
// end ;
64297: PPOPN 1
64299: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
64300: LD_EXP 42
64304: PUSH
64305: LD_EXP 46
64309: AND
64310: PUSH
64311: LD_OWVAR 65
64315: PUSH
64316: LD_INT 7
64318: LESS
64319: AND
64320: IFFALSE 64334
64322: GO 64324
64324: DISABLE
// begin enable ;
64325: ENABLE
// game_speed := 7 ;
64326: LD_ADDR_OWVAR 65
64330: PUSH
64331: LD_INT 7
64333: ST_TO_ADDR
// end ;
64334: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
64335: LD_EXP 42
64339: PUSH
64340: LD_EXP 49
64344: AND
64345: IFFALSE 64547
64347: GO 64349
64349: DISABLE
64350: LD_INT 0
64352: PPUSH
64353: PPUSH
64354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
64355: LD_ADDR_VAR 0 3
64359: PUSH
64360: LD_INT 81
64362: PUSH
64363: LD_OWVAR 2
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 21
64374: PUSH
64375: LD_INT 1
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: EMPTY
64383: LIST
64384: LIST
64385: PPUSH
64386: CALL_OW 69
64390: ST_TO_ADDR
// if not tmp then
64391: LD_VAR 0 3
64395: NOT
64396: IFFALSE 64400
// exit ;
64398: GO 64547
// if tmp > 5 then
64400: LD_VAR 0 3
64404: PUSH
64405: LD_INT 5
64407: GREATER
64408: IFFALSE 64420
// k := 5 else
64410: LD_ADDR_VAR 0 2
64414: PUSH
64415: LD_INT 5
64417: ST_TO_ADDR
64418: GO 64430
// k := tmp ;
64420: LD_ADDR_VAR 0 2
64424: PUSH
64425: LD_VAR 0 3
64429: ST_TO_ADDR
// for i := 1 to k do
64430: LD_ADDR_VAR 0 1
64434: PUSH
64435: DOUBLE
64436: LD_INT 1
64438: DEC
64439: ST_TO_ADDR
64440: LD_VAR 0 2
64444: PUSH
64445: FOR_TO
64446: IFFALSE 64545
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
64448: LD_VAR 0 3
64452: PUSH
64453: LD_VAR 0 1
64457: ARRAY
64458: PPUSH
64459: LD_VAR 0 1
64463: PUSH
64464: LD_INT 4
64466: MOD
64467: PUSH
64468: LD_INT 1
64470: PLUS
64471: PPUSH
64472: CALL_OW 259
64476: PUSH
64477: LD_INT 10
64479: LESS
64480: IFFALSE 64543
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
64482: LD_VAR 0 3
64486: PUSH
64487: LD_VAR 0 1
64491: ARRAY
64492: PPUSH
64493: LD_VAR 0 1
64497: PUSH
64498: LD_INT 4
64500: MOD
64501: PUSH
64502: LD_INT 1
64504: PLUS
64505: PPUSH
64506: LD_VAR 0 3
64510: PUSH
64511: LD_VAR 0 1
64515: ARRAY
64516: PPUSH
64517: LD_VAR 0 1
64521: PUSH
64522: LD_INT 4
64524: MOD
64525: PUSH
64526: LD_INT 1
64528: PLUS
64529: PPUSH
64530: CALL_OW 259
64534: PUSH
64535: LD_INT 1
64537: PLUS
64538: PPUSH
64539: CALL_OW 237
64543: GO 64445
64545: POP
64546: POP
// end ;
64547: PPOPN 3
64549: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
64550: LD_EXP 42
64554: PUSH
64555: LD_EXP 50
64559: AND
64560: IFFALSE 64580
64562: GO 64564
64564: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
64565: LD_INT 4
64567: PPUSH
64568: LD_OWVAR 2
64572: PPUSH
64573: LD_INT 0
64575: PPUSH
64576: CALL_OW 324
64580: END
// every 0 0$1 trigger StreamModeActive and sShovel do
64581: LD_EXP 42
64585: PUSH
64586: LD_EXP 79
64590: AND
64591: IFFALSE 64611
64593: GO 64595
64595: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
64596: LD_INT 19
64598: PPUSH
64599: LD_OWVAR 2
64603: PPUSH
64604: LD_INT 0
64606: PPUSH
64607: CALL_OW 324
64611: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
64612: LD_EXP 42
64616: PUSH
64617: LD_EXP 51
64621: AND
64622: IFFALSE 64724
64624: GO 64626
64626: DISABLE
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
// begin enable ;
64631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
64632: LD_ADDR_VAR 0 2
64636: PUSH
64637: LD_INT 22
64639: PUSH
64640: LD_OWVAR 2
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 2
64651: PUSH
64652: LD_INT 34
64654: PUSH
64655: LD_INT 11
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 34
64664: PUSH
64665: LD_INT 30
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PPUSH
64681: CALL_OW 69
64685: ST_TO_ADDR
// if not tmp then
64686: LD_VAR 0 2
64690: NOT
64691: IFFALSE 64695
// exit ;
64693: GO 64724
// for i in tmp do
64695: LD_ADDR_VAR 0 1
64699: PUSH
64700: LD_VAR 0 2
64704: PUSH
64705: FOR_IN
64706: IFFALSE 64722
// begin SetLives ( i , 0 ) ;
64708: LD_VAR 0 1
64712: PPUSH
64713: LD_INT 0
64715: PPUSH
64716: CALL_OW 234
// end ;
64720: GO 64705
64722: POP
64723: POP
// end ;
64724: PPOPN 2
64726: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64727: LD_EXP 42
64731: PUSH
64732: LD_EXP 52
64736: AND
64737: IFFALSE 64757
64739: GO 64741
64741: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64742: LD_INT 32
64744: PPUSH
64745: LD_OWVAR 2
64749: PPUSH
64750: LD_INT 0
64752: PPUSH
64753: CALL_OW 324
64757: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64758: LD_EXP 42
64762: PUSH
64763: LD_EXP 53
64767: AND
64768: IFFALSE 64949
64770: GO 64772
64772: DISABLE
64773: LD_INT 0
64775: PPUSH
64776: PPUSH
64777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64778: LD_ADDR_VAR 0 2
64782: PUSH
64783: LD_INT 22
64785: PUSH
64786: LD_OWVAR 2
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 33
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PPUSH
64809: CALL_OW 69
64813: ST_TO_ADDR
// if not tmp then
64814: LD_VAR 0 2
64818: NOT
64819: IFFALSE 64823
// exit ;
64821: GO 64949
// side := 0 ;
64823: LD_ADDR_VAR 0 3
64827: PUSH
64828: LD_INT 0
64830: ST_TO_ADDR
// for i := 1 to 8 do
64831: LD_ADDR_VAR 0 1
64835: PUSH
64836: DOUBLE
64837: LD_INT 1
64839: DEC
64840: ST_TO_ADDR
64841: LD_INT 8
64843: PUSH
64844: FOR_TO
64845: IFFALSE 64893
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64847: LD_OWVAR 2
64851: PUSH
64852: LD_VAR 0 1
64856: NONEQUAL
64857: PUSH
64858: LD_OWVAR 2
64862: PPUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: CALL_OW 81
64872: PUSH
64873: LD_INT 2
64875: EQUAL
64876: AND
64877: IFFALSE 64891
// begin side := i ;
64879: LD_ADDR_VAR 0 3
64883: PUSH
64884: LD_VAR 0 1
64888: ST_TO_ADDR
// break ;
64889: GO 64893
// end ;
64891: GO 64844
64893: POP
64894: POP
// if not side then
64895: LD_VAR 0 3
64899: NOT
64900: IFFALSE 64904
// exit ;
64902: GO 64949
// for i := 1 to tmp do
64904: LD_ADDR_VAR 0 1
64908: PUSH
64909: DOUBLE
64910: LD_INT 1
64912: DEC
64913: ST_TO_ADDR
64914: LD_VAR 0 2
64918: PUSH
64919: FOR_TO
64920: IFFALSE 64947
// if Prob ( 60 ) then
64922: LD_INT 60
64924: PPUSH
64925: CALL_OW 13
64929: IFFALSE 64945
// SetSide ( i , side ) ;
64931: LD_VAR 0 1
64935: PPUSH
64936: LD_VAR 0 3
64940: PPUSH
64941: CALL_OW 235
64945: GO 64919
64947: POP
64948: POP
// end ;
64949: PPOPN 3
64951: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64952: LD_EXP 42
64956: PUSH
64957: LD_EXP 55
64961: AND
64962: IFFALSE 65081
64964: GO 64966
64966: DISABLE
64967: LD_INT 0
64969: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64970: LD_ADDR_VAR 0 1
64974: PUSH
64975: LD_INT 22
64977: PUSH
64978: LD_OWVAR 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 21
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 3
64999: PUSH
65000: LD_INT 23
65002: PUSH
65003: LD_INT 0
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: LIST
65018: PPUSH
65019: CALL_OW 69
65023: PUSH
65024: FOR_IN
65025: IFFALSE 65079
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
65027: LD_VAR 0 1
65031: PPUSH
65032: CALL_OW 257
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 3
65045: PUSH
65046: LD_INT 4
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: IN
65055: IFFALSE 65077
// SetClass ( un , rand ( 1 , 4 ) ) ;
65057: LD_VAR 0 1
65061: PPUSH
65062: LD_INT 1
65064: PPUSH
65065: LD_INT 4
65067: PPUSH
65068: CALL_OW 12
65072: PPUSH
65073: CALL_OW 336
65077: GO 65024
65079: POP
65080: POP
// end ;
65081: PPOPN 1
65083: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
65084: LD_EXP 42
65088: PUSH
65089: LD_EXP 54
65093: AND
65094: IFFALSE 65173
65096: GO 65098
65098: DISABLE
65099: LD_INT 0
65101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65102: LD_ADDR_VAR 0 1
65106: PUSH
65107: LD_INT 22
65109: PUSH
65110: LD_OWVAR 2
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 21
65121: PUSH
65122: LD_INT 3
65124: PUSH
65125: EMPTY
65126: LIST
65127: LIST
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PPUSH
65133: CALL_OW 69
65137: ST_TO_ADDR
// if not tmp then
65138: LD_VAR 0 1
65142: NOT
65143: IFFALSE 65147
// exit ;
65145: GO 65173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
65147: LD_VAR 0 1
65151: PUSH
65152: LD_INT 1
65154: PPUSH
65155: LD_VAR 0 1
65159: PPUSH
65160: CALL_OW 12
65164: ARRAY
65165: PPUSH
65166: LD_INT 100
65168: PPUSH
65169: CALL_OW 234
// end ;
65173: PPOPN 1
65175: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
65176: LD_EXP 42
65180: PUSH
65181: LD_EXP 56
65185: AND
65186: IFFALSE 65284
65188: GO 65190
65190: DISABLE
65191: LD_INT 0
65193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65194: LD_ADDR_VAR 0 1
65198: PUSH
65199: LD_INT 22
65201: PUSH
65202: LD_OWVAR 2
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 21
65213: PUSH
65214: LD_INT 1
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PPUSH
65225: CALL_OW 69
65229: ST_TO_ADDR
// if not tmp then
65230: LD_VAR 0 1
65234: NOT
65235: IFFALSE 65239
// exit ;
65237: GO 65284
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
65239: LD_VAR 0 1
65243: PUSH
65244: LD_INT 1
65246: PPUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 12
65256: ARRAY
65257: PPUSH
65258: LD_INT 1
65260: PPUSH
65261: LD_INT 4
65263: PPUSH
65264: CALL_OW 12
65268: PPUSH
65269: LD_INT 3000
65271: PPUSH
65272: LD_INT 9000
65274: PPUSH
65275: CALL_OW 12
65279: PPUSH
65280: CALL_OW 492
// end ;
65284: PPOPN 1
65286: END
// every 0 0$1 trigger StreamModeActive and sDepot do
65287: LD_EXP 42
65291: PUSH
65292: LD_EXP 57
65296: AND
65297: IFFALSE 65317
65299: GO 65301
65301: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
65302: LD_INT 1
65304: PPUSH
65305: LD_OWVAR 2
65309: PPUSH
65310: LD_INT 0
65312: PPUSH
65313: CALL_OW 324
65317: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
65318: LD_EXP 42
65322: PUSH
65323: LD_EXP 58
65327: AND
65328: IFFALSE 65411
65330: GO 65332
65332: DISABLE
65333: LD_INT 0
65335: PPUSH
65336: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
65337: LD_ADDR_VAR 0 2
65341: PUSH
65342: LD_INT 22
65344: PUSH
65345: LD_OWVAR 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 21
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PPUSH
65368: CALL_OW 69
65372: ST_TO_ADDR
// if not tmp then
65373: LD_VAR 0 2
65377: NOT
65378: IFFALSE 65382
// exit ;
65380: GO 65411
// for i in tmp do
65382: LD_ADDR_VAR 0 1
65386: PUSH
65387: LD_VAR 0 2
65391: PUSH
65392: FOR_IN
65393: IFFALSE 65409
// SetBLevel ( i , 10 ) ;
65395: LD_VAR 0 1
65399: PPUSH
65400: LD_INT 10
65402: PPUSH
65403: CALL_OW 241
65407: GO 65392
65409: POP
65410: POP
// end ;
65411: PPOPN 2
65413: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
65414: LD_EXP 42
65418: PUSH
65419: LD_EXP 59
65423: AND
65424: IFFALSE 65535
65426: GO 65428
65428: DISABLE
65429: LD_INT 0
65431: PPUSH
65432: PPUSH
65433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65434: LD_ADDR_VAR 0 3
65438: PUSH
65439: LD_INT 22
65441: PUSH
65442: LD_OWVAR 2
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 25
65453: PUSH
65454: LD_INT 1
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PPUSH
65465: CALL_OW 69
65469: ST_TO_ADDR
// if not tmp then
65470: LD_VAR 0 3
65474: NOT
65475: IFFALSE 65479
// exit ;
65477: GO 65535
// un := tmp [ rand ( 1 , tmp ) ] ;
65479: LD_ADDR_VAR 0 2
65483: PUSH
65484: LD_VAR 0 3
65488: PUSH
65489: LD_INT 1
65491: PPUSH
65492: LD_VAR 0 3
65496: PPUSH
65497: CALL_OW 12
65501: ARRAY
65502: ST_TO_ADDR
// if Crawls ( un ) then
65503: LD_VAR 0 2
65507: PPUSH
65508: CALL_OW 318
65512: IFFALSE 65523
// ComWalk ( un ) ;
65514: LD_VAR 0 2
65518: PPUSH
65519: CALL_OW 138
// SetClass ( un , class_sniper ) ;
65523: LD_VAR 0 2
65527: PPUSH
65528: LD_INT 5
65530: PPUSH
65531: CALL_OW 336
// end ;
65535: PPOPN 3
65537: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
65538: LD_EXP 42
65542: PUSH
65543: LD_EXP 60
65547: AND
65548: PUSH
65549: LD_OWVAR 67
65553: PUSH
65554: LD_INT 4
65556: LESS
65557: AND
65558: IFFALSE 65577
65560: GO 65562
65562: DISABLE
// begin Difficulty := Difficulty + 1 ;
65563: LD_ADDR_OWVAR 67
65567: PUSH
65568: LD_OWVAR 67
65572: PUSH
65573: LD_INT 1
65575: PLUS
65576: ST_TO_ADDR
// end ;
65577: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
65578: LD_EXP 42
65582: PUSH
65583: LD_EXP 61
65587: AND
65588: IFFALSE 65691
65590: GO 65592
65592: DISABLE
65593: LD_INT 0
65595: PPUSH
// begin for i := 1 to 5 do
65596: LD_ADDR_VAR 0 1
65600: PUSH
65601: DOUBLE
65602: LD_INT 1
65604: DEC
65605: ST_TO_ADDR
65606: LD_INT 5
65608: PUSH
65609: FOR_TO
65610: IFFALSE 65689
// begin uc_nation := nation_nature ;
65612: LD_ADDR_OWVAR 21
65616: PUSH
65617: LD_INT 0
65619: ST_TO_ADDR
// uc_side := 0 ;
65620: LD_ADDR_OWVAR 20
65624: PUSH
65625: LD_INT 0
65627: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65628: LD_ADDR_OWVAR 29
65632: PUSH
65633: LD_INT 12
65635: PUSH
65636: LD_INT 12
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: ST_TO_ADDR
// hc_agressivity := 20 ;
65643: LD_ADDR_OWVAR 35
65647: PUSH
65648: LD_INT 20
65650: ST_TO_ADDR
// hc_class := class_tiger ;
65651: LD_ADDR_OWVAR 28
65655: PUSH
65656: LD_INT 14
65658: ST_TO_ADDR
// hc_gallery :=  ;
65659: LD_ADDR_OWVAR 33
65663: PUSH
65664: LD_STRING 
65666: ST_TO_ADDR
// hc_name :=  ;
65667: LD_ADDR_OWVAR 26
65671: PUSH
65672: LD_STRING 
65674: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
65675: CALL_OW 44
65679: PPUSH
65680: LD_INT 0
65682: PPUSH
65683: CALL_OW 51
// end ;
65687: GO 65609
65689: POP
65690: POP
// end ;
65691: PPOPN 1
65693: END
// every 0 0$1 trigger StreamModeActive and sBomb do
65694: LD_EXP 42
65698: PUSH
65699: LD_EXP 62
65703: AND
65704: IFFALSE 65713
65706: GO 65708
65708: DISABLE
// StreamSibBomb ;
65709: CALL 65714 0 0
65713: END
// export function StreamSibBomb ; var i , x , y ; begin
65714: LD_INT 0
65716: PPUSH
65717: PPUSH
65718: PPUSH
65719: PPUSH
// result := false ;
65720: LD_ADDR_VAR 0 1
65724: PUSH
65725: LD_INT 0
65727: ST_TO_ADDR
// for i := 1 to 16 do
65728: LD_ADDR_VAR 0 2
65732: PUSH
65733: DOUBLE
65734: LD_INT 1
65736: DEC
65737: ST_TO_ADDR
65738: LD_INT 16
65740: PUSH
65741: FOR_TO
65742: IFFALSE 65941
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65744: LD_ADDR_VAR 0 3
65748: PUSH
65749: LD_INT 10
65751: PUSH
65752: LD_INT 20
65754: PUSH
65755: LD_INT 30
65757: PUSH
65758: LD_INT 40
65760: PUSH
65761: LD_INT 50
65763: PUSH
65764: LD_INT 60
65766: PUSH
65767: LD_INT 70
65769: PUSH
65770: LD_INT 80
65772: PUSH
65773: LD_INT 90
65775: PUSH
65776: LD_INT 100
65778: PUSH
65779: LD_INT 110
65781: PUSH
65782: LD_INT 120
65784: PUSH
65785: LD_INT 130
65787: PUSH
65788: LD_INT 140
65790: PUSH
65791: LD_INT 150
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: PPUSH
65814: LD_INT 15
65816: PPUSH
65817: CALL_OW 12
65821: ARRAY
65822: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65823: LD_ADDR_VAR 0 4
65827: PUSH
65828: LD_INT 10
65830: PUSH
65831: LD_INT 20
65833: PUSH
65834: LD_INT 30
65836: PUSH
65837: LD_INT 40
65839: PUSH
65840: LD_INT 50
65842: PUSH
65843: LD_INT 60
65845: PUSH
65846: LD_INT 70
65848: PUSH
65849: LD_INT 80
65851: PUSH
65852: LD_INT 90
65854: PUSH
65855: LD_INT 100
65857: PUSH
65858: LD_INT 110
65860: PUSH
65861: LD_INT 120
65863: PUSH
65864: LD_INT 130
65866: PUSH
65867: LD_INT 140
65869: PUSH
65870: LD_INT 150
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: PPUSH
65893: LD_INT 15
65895: PPUSH
65896: CALL_OW 12
65900: ARRAY
65901: ST_TO_ADDR
// if ValidHex ( x , y ) then
65902: LD_VAR 0 3
65906: PPUSH
65907: LD_VAR 0 4
65911: PPUSH
65912: CALL_OW 488
65916: IFFALSE 65939
// begin result := [ x , y ] ;
65918: LD_ADDR_VAR 0 1
65922: PUSH
65923: LD_VAR 0 3
65927: PUSH
65928: LD_VAR 0 4
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: ST_TO_ADDR
// break ;
65937: GO 65941
// end ; end ;
65939: GO 65741
65941: POP
65942: POP
// if result then
65943: LD_VAR 0 1
65947: IFFALSE 66007
// begin ToLua ( playSibBomb() ) ;
65949: LD_STRING playSibBomb()
65951: PPUSH
65952: CALL_OW 559
// wait ( 0 0$14 ) ;
65956: LD_INT 490
65958: PPUSH
65959: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65963: LD_VAR 0 1
65967: PUSH
65968: LD_INT 1
65970: ARRAY
65971: PPUSH
65972: LD_VAR 0 1
65976: PUSH
65977: LD_INT 2
65979: ARRAY
65980: PPUSH
65981: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65985: LD_VAR 0 1
65989: PUSH
65990: LD_INT 1
65992: ARRAY
65993: PPUSH
65994: LD_VAR 0 1
65998: PUSH
65999: LD_INT 2
66001: ARRAY
66002: PPUSH
66003: CALL_OW 429
// end ; end ;
66007: LD_VAR 0 1
66011: RET
// every 0 0$1 trigger StreamModeActive and sReset do
66012: LD_EXP 42
66016: PUSH
66017: LD_EXP 64
66021: AND
66022: IFFALSE 66034
66024: GO 66026
66026: DISABLE
// YouLost (  ) ;
66027: LD_STRING 
66029: PPUSH
66030: CALL_OW 104
66034: END
// every 0 0$1 trigger StreamModeActive and sFog do
66035: LD_EXP 42
66039: PUSH
66040: LD_EXP 63
66044: AND
66045: IFFALSE 66059
66047: GO 66049
66049: DISABLE
// FogOff ( your_side ) ;
66050: LD_OWVAR 2
66054: PPUSH
66055: CALL_OW 344
66059: END
// every 0 0$1 trigger StreamModeActive and sSun do
66060: LD_EXP 42
66064: PUSH
66065: LD_EXP 65
66069: AND
66070: IFFALSE 66098
66072: GO 66074
66074: DISABLE
// begin solar_recharge_percent := 0 ;
66075: LD_ADDR_OWVAR 79
66079: PUSH
66080: LD_INT 0
66082: ST_TO_ADDR
// wait ( 5 5$00 ) ;
66083: LD_INT 10500
66085: PPUSH
66086: CALL_OW 67
// solar_recharge_percent := 100 ;
66090: LD_ADDR_OWVAR 79
66094: PUSH
66095: LD_INT 100
66097: ST_TO_ADDR
// end ;
66098: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
66099: LD_EXP 42
66103: PUSH
66104: LD_EXP 66
66108: AND
66109: IFFALSE 66348
66111: GO 66113
66113: DISABLE
66114: LD_INT 0
66116: PPUSH
66117: PPUSH
66118: PPUSH
// begin tmp := [ ] ;
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: EMPTY
66125: ST_TO_ADDR
// for i := 1 to 6 do
66126: LD_ADDR_VAR 0 1
66130: PUSH
66131: DOUBLE
66132: LD_INT 1
66134: DEC
66135: ST_TO_ADDR
66136: LD_INT 6
66138: PUSH
66139: FOR_TO
66140: IFFALSE 66245
// begin uc_nation := nation_nature ;
66142: LD_ADDR_OWVAR 21
66146: PUSH
66147: LD_INT 0
66149: ST_TO_ADDR
// uc_side := 0 ;
66150: LD_ADDR_OWVAR 20
66154: PUSH
66155: LD_INT 0
66157: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66158: LD_ADDR_OWVAR 29
66162: PUSH
66163: LD_INT 12
66165: PUSH
66166: LD_INT 12
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: ST_TO_ADDR
// hc_agressivity := 20 ;
66173: LD_ADDR_OWVAR 35
66177: PUSH
66178: LD_INT 20
66180: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
66181: LD_ADDR_OWVAR 28
66185: PUSH
66186: LD_INT 17
66188: ST_TO_ADDR
// hc_gallery :=  ;
66189: LD_ADDR_OWVAR 33
66193: PUSH
66194: LD_STRING 
66196: ST_TO_ADDR
// hc_name :=  ;
66197: LD_ADDR_OWVAR 26
66201: PUSH
66202: LD_STRING 
66204: ST_TO_ADDR
// un := CreateHuman ;
66205: LD_ADDR_VAR 0 2
66209: PUSH
66210: CALL_OW 44
66214: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
66215: LD_VAR 0 2
66219: PPUSH
66220: LD_INT 1
66222: PPUSH
66223: CALL_OW 51
// tmp := tmp ^ un ;
66227: LD_ADDR_VAR 0 3
66231: PUSH
66232: LD_VAR 0 3
66236: PUSH
66237: LD_VAR 0 2
66241: ADD
66242: ST_TO_ADDR
// end ;
66243: GO 66139
66245: POP
66246: POP
// repeat wait ( 0 0$1 ) ;
66247: LD_INT 35
66249: PPUSH
66250: CALL_OW 67
// for un in tmp do
66254: LD_ADDR_VAR 0 2
66258: PUSH
66259: LD_VAR 0 3
66263: PUSH
66264: FOR_IN
66265: IFFALSE 66339
// begin if IsDead ( un ) then
66267: LD_VAR 0 2
66271: PPUSH
66272: CALL_OW 301
66276: IFFALSE 66296
// begin tmp := tmp diff un ;
66278: LD_ADDR_VAR 0 3
66282: PUSH
66283: LD_VAR 0 3
66287: PUSH
66288: LD_VAR 0 2
66292: DIFF
66293: ST_TO_ADDR
// continue ;
66294: GO 66264
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
66296: LD_VAR 0 2
66300: PPUSH
66301: LD_INT 3
66303: PUSH
66304: LD_INT 22
66306: PUSH
66307: LD_INT 0
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PPUSH
66318: CALL_OW 69
66322: PPUSH
66323: LD_VAR 0 2
66327: PPUSH
66328: CALL_OW 74
66332: PPUSH
66333: CALL_OW 115
// end ;
66337: GO 66264
66339: POP
66340: POP
// until not tmp ;
66341: LD_VAR 0 3
66345: NOT
66346: IFFALSE 66247
// end ;
66348: PPOPN 3
66350: END
// every 0 0$1 trigger StreamModeActive and sTroll do
66351: LD_EXP 42
66355: PUSH
66356: LD_EXP 67
66360: AND
66361: IFFALSE 66415
66363: GO 66365
66365: DISABLE
// begin ToLua ( displayTroll(); ) ;
66366: LD_STRING displayTroll();
66368: PPUSH
66369: CALL_OW 559
// wait ( 3 3$00 ) ;
66373: LD_INT 6300
66375: PPUSH
66376: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66380: LD_STRING hideTroll();
66382: PPUSH
66383: CALL_OW 559
// wait ( 1 1$00 ) ;
66387: LD_INT 2100
66389: PPUSH
66390: CALL_OW 67
// ToLua ( displayTroll(); ) ;
66394: LD_STRING displayTroll();
66396: PPUSH
66397: CALL_OW 559
// wait ( 1 1$00 ) ;
66401: LD_INT 2100
66403: PPUSH
66404: CALL_OW 67
// ToLua ( hideTroll(); ) ;
66408: LD_STRING hideTroll();
66410: PPUSH
66411: CALL_OW 559
// end ;
66415: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
66416: LD_EXP 42
66420: PUSH
66421: LD_EXP 68
66425: AND
66426: IFFALSE 66489
66428: GO 66430
66430: DISABLE
66431: LD_INT 0
66433: PPUSH
// begin p := 0 ;
66434: LD_ADDR_VAR 0 1
66438: PUSH
66439: LD_INT 0
66441: ST_TO_ADDR
// repeat game_speed := 1 ;
66442: LD_ADDR_OWVAR 65
66446: PUSH
66447: LD_INT 1
66449: ST_TO_ADDR
// wait ( 0 0$1 ) ;
66450: LD_INT 35
66452: PPUSH
66453: CALL_OW 67
// p := p + 1 ;
66457: LD_ADDR_VAR 0 1
66461: PUSH
66462: LD_VAR 0 1
66466: PUSH
66467: LD_INT 1
66469: PLUS
66470: ST_TO_ADDR
// until p >= 60 ;
66471: LD_VAR 0 1
66475: PUSH
66476: LD_INT 60
66478: GREATEREQUAL
66479: IFFALSE 66442
// game_speed := 4 ;
66481: LD_ADDR_OWVAR 65
66485: PUSH
66486: LD_INT 4
66488: ST_TO_ADDR
// end ;
66489: PPOPN 1
66491: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
66492: LD_EXP 42
66496: PUSH
66497: LD_EXP 69
66501: AND
66502: IFFALSE 66648
66504: GO 66506
66506: DISABLE
66507: LD_INT 0
66509: PPUSH
66510: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66511: LD_ADDR_VAR 0 1
66515: PUSH
66516: LD_INT 22
66518: PUSH
66519: LD_OWVAR 2
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 2
66530: PUSH
66531: LD_INT 30
66533: PUSH
66534: LD_INT 0
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 30
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: EMPTY
66548: LIST
66549: LIST
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PPUSH
66560: CALL_OW 69
66564: ST_TO_ADDR
// if not depot then
66565: LD_VAR 0 1
66569: NOT
66570: IFFALSE 66574
// exit ;
66572: GO 66648
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
66574: LD_ADDR_VAR 0 2
66578: PUSH
66579: LD_VAR 0 1
66583: PUSH
66584: LD_INT 1
66586: PPUSH
66587: LD_VAR 0 1
66591: PPUSH
66592: CALL_OW 12
66596: ARRAY
66597: PPUSH
66598: CALL_OW 274
66602: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
66603: LD_VAR 0 2
66607: PPUSH
66608: LD_INT 1
66610: PPUSH
66611: LD_INT 0
66613: PPUSH
66614: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
66618: LD_VAR 0 2
66622: PPUSH
66623: LD_INT 2
66625: PPUSH
66626: LD_INT 0
66628: PPUSH
66629: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
66633: LD_VAR 0 2
66637: PPUSH
66638: LD_INT 3
66640: PPUSH
66641: LD_INT 0
66643: PPUSH
66644: CALL_OW 277
// end ;
66648: PPOPN 2
66650: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
66651: LD_EXP 42
66655: PUSH
66656: LD_EXP 70
66660: AND
66661: IFFALSE 66758
66663: GO 66665
66665: DISABLE
66666: LD_INT 0
66668: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66669: LD_ADDR_VAR 0 1
66673: PUSH
66674: LD_INT 22
66676: PUSH
66677: LD_OWVAR 2
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 21
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 3
66698: PUSH
66699: LD_INT 23
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: LIST
66717: PPUSH
66718: CALL_OW 69
66722: ST_TO_ADDR
// if not tmp then
66723: LD_VAR 0 1
66727: NOT
66728: IFFALSE 66732
// exit ;
66730: GO 66758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66732: LD_VAR 0 1
66736: PUSH
66737: LD_INT 1
66739: PPUSH
66740: LD_VAR 0 1
66744: PPUSH
66745: CALL_OW 12
66749: ARRAY
66750: PPUSH
66751: LD_INT 200
66753: PPUSH
66754: CALL_OW 234
// end ;
66758: PPOPN 1
66760: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66761: LD_EXP 42
66765: PUSH
66766: LD_EXP 71
66770: AND
66771: IFFALSE 66850
66773: GO 66775
66775: DISABLE
66776: LD_INT 0
66778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66779: LD_ADDR_VAR 0 1
66783: PUSH
66784: LD_INT 22
66786: PUSH
66787: LD_OWVAR 2
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 21
66798: PUSH
66799: LD_INT 2
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PPUSH
66810: CALL_OW 69
66814: ST_TO_ADDR
// if not tmp then
66815: LD_VAR 0 1
66819: NOT
66820: IFFALSE 66824
// exit ;
66822: GO 66850
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66824: LD_VAR 0 1
66828: PUSH
66829: LD_INT 1
66831: PPUSH
66832: LD_VAR 0 1
66836: PPUSH
66837: CALL_OW 12
66841: ARRAY
66842: PPUSH
66843: LD_INT 60
66845: PPUSH
66846: CALL_OW 234
// end ;
66850: PPOPN 1
66852: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66853: LD_EXP 42
66857: PUSH
66858: LD_EXP 72
66862: AND
66863: IFFALSE 66962
66865: GO 66867
66867: DISABLE
66868: LD_INT 0
66870: PPUSH
66871: PPUSH
// begin enable ;
66872: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66873: LD_ADDR_VAR 0 1
66877: PUSH
66878: LD_INT 22
66880: PUSH
66881: LD_OWVAR 2
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 61
66892: PUSH
66893: EMPTY
66894: LIST
66895: PUSH
66896: LD_INT 33
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: PPUSH
66911: CALL_OW 69
66915: ST_TO_ADDR
// if not tmp then
66916: LD_VAR 0 1
66920: NOT
66921: IFFALSE 66925
// exit ;
66923: GO 66962
// for i in tmp do
66925: LD_ADDR_VAR 0 2
66929: PUSH
66930: LD_VAR 0 1
66934: PUSH
66935: FOR_IN
66936: IFFALSE 66960
// if IsControledBy ( i ) then
66938: LD_VAR 0 2
66942: PPUSH
66943: CALL_OW 312
66947: IFFALSE 66958
// ComUnlink ( i ) ;
66949: LD_VAR 0 2
66953: PPUSH
66954: CALL_OW 136
66958: GO 66935
66960: POP
66961: POP
// end ;
66962: PPOPN 2
66964: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66965: LD_EXP 42
66969: PUSH
66970: LD_EXP 73
66974: AND
66975: IFFALSE 67115
66977: GO 66979
66979: DISABLE
66980: LD_INT 0
66982: PPUSH
66983: PPUSH
// begin ToLua ( displayPowell(); ) ;
66984: LD_STRING displayPowell();
66986: PPUSH
66987: CALL_OW 559
// uc_side := 0 ;
66991: LD_ADDR_OWVAR 20
66995: PUSH
66996: LD_INT 0
66998: ST_TO_ADDR
// uc_nation := 2 ;
66999: LD_ADDR_OWVAR 21
67003: PUSH
67004: LD_INT 2
67006: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
67007: LD_ADDR_OWVAR 37
67011: PUSH
67012: LD_INT 14
67014: ST_TO_ADDR
// vc_engine := engine_siberite ;
67015: LD_ADDR_OWVAR 39
67019: PUSH
67020: LD_INT 3
67022: ST_TO_ADDR
// vc_control := control_apeman ;
67023: LD_ADDR_OWVAR 38
67027: PUSH
67028: LD_INT 5
67030: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
67031: LD_ADDR_OWVAR 40
67035: PUSH
67036: LD_INT 29
67038: ST_TO_ADDR
// un := CreateVehicle ;
67039: LD_ADDR_VAR 0 2
67043: PUSH
67044: CALL_OW 45
67048: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67049: LD_VAR 0 2
67053: PPUSH
67054: LD_INT 1
67056: PPUSH
67057: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67061: LD_INT 35
67063: PPUSH
67064: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67068: LD_VAR 0 2
67072: PPUSH
67073: LD_INT 22
67075: PUSH
67076: LD_OWVAR 2
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PPUSH
67085: CALL_OW 69
67089: PPUSH
67090: LD_VAR 0 2
67094: PPUSH
67095: CALL_OW 74
67099: PPUSH
67100: CALL_OW 115
// until IsDead ( un ) ;
67104: LD_VAR 0 2
67108: PPUSH
67109: CALL_OW 301
67113: IFFALSE 67061
// end ;
67115: PPOPN 2
67117: END
// every 0 0$1 trigger StreamModeActive and sStu do
67118: LD_EXP 42
67122: PUSH
67123: LD_EXP 81
67127: AND
67128: IFFALSE 67144
67130: GO 67132
67132: DISABLE
// begin ToLua ( displayStucuk(); ) ;
67133: LD_STRING displayStucuk();
67135: PPUSH
67136: CALL_OW 559
// ResetFog ;
67140: CALL_OW 335
// end ;
67144: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
67145: LD_EXP 42
67149: PUSH
67150: LD_EXP 74
67154: AND
67155: IFFALSE 67296
67157: GO 67159
67159: DISABLE
67160: LD_INT 0
67162: PPUSH
67163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67164: LD_ADDR_VAR 0 2
67168: PUSH
67169: LD_INT 22
67171: PUSH
67172: LD_OWVAR 2
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 21
67183: PUSH
67184: LD_INT 1
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PPUSH
67195: CALL_OW 69
67199: ST_TO_ADDR
// if not tmp then
67200: LD_VAR 0 2
67204: NOT
67205: IFFALSE 67209
// exit ;
67207: GO 67296
// un := tmp [ rand ( 1 , tmp ) ] ;
67209: LD_ADDR_VAR 0 1
67213: PUSH
67214: LD_VAR 0 2
67218: PUSH
67219: LD_INT 1
67221: PPUSH
67222: LD_VAR 0 2
67226: PPUSH
67227: CALL_OW 12
67231: ARRAY
67232: ST_TO_ADDR
// SetSide ( un , 0 ) ;
67233: LD_VAR 0 1
67237: PPUSH
67238: LD_INT 0
67240: PPUSH
67241: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
67245: LD_VAR 0 1
67249: PPUSH
67250: LD_OWVAR 3
67254: PUSH
67255: LD_VAR 0 1
67259: DIFF
67260: PPUSH
67261: LD_VAR 0 1
67265: PPUSH
67266: CALL_OW 74
67270: PPUSH
67271: CALL_OW 115
// wait ( 0 0$20 ) ;
67275: LD_INT 700
67277: PPUSH
67278: CALL_OW 67
// SetSide ( un , your_side ) ;
67282: LD_VAR 0 1
67286: PPUSH
67287: LD_OWVAR 2
67291: PPUSH
67292: CALL_OW 235
// end ;
67296: PPOPN 2
67298: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
67299: LD_EXP 42
67303: PUSH
67304: LD_EXP 75
67308: AND
67309: IFFALSE 67415
67311: GO 67313
67313: DISABLE
67314: LD_INT 0
67316: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67317: LD_ADDR_VAR 0 1
67321: PUSH
67322: LD_INT 22
67324: PUSH
67325: LD_OWVAR 2
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 2
67336: PUSH
67337: LD_INT 30
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 30
67349: PUSH
67350: LD_INT 1
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PPUSH
67366: CALL_OW 69
67370: ST_TO_ADDR
// if not depot then
67371: LD_VAR 0 1
67375: NOT
67376: IFFALSE 67380
// exit ;
67378: GO 67415
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
67380: LD_VAR 0 1
67384: PUSH
67385: LD_INT 1
67387: ARRAY
67388: PPUSH
67389: CALL_OW 250
67393: PPUSH
67394: LD_VAR 0 1
67398: PUSH
67399: LD_INT 1
67401: ARRAY
67402: PPUSH
67403: CALL_OW 251
67407: PPUSH
67408: LD_INT 70
67410: PPUSH
67411: CALL_OW 495
// end ;
67415: PPOPN 1
67417: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
67418: LD_EXP 42
67422: PUSH
67423: LD_EXP 76
67427: AND
67428: IFFALSE 67639
67430: GO 67432
67432: DISABLE
67433: LD_INT 0
67435: PPUSH
67436: PPUSH
67437: PPUSH
67438: PPUSH
67439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67440: LD_ADDR_VAR 0 5
67444: PUSH
67445: LD_INT 22
67447: PUSH
67448: LD_OWVAR 2
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 21
67459: PUSH
67460: LD_INT 1
67462: PUSH
67463: EMPTY
67464: LIST
67465: LIST
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PPUSH
67471: CALL_OW 69
67475: ST_TO_ADDR
// if not tmp then
67476: LD_VAR 0 5
67480: NOT
67481: IFFALSE 67485
// exit ;
67483: GO 67639
// for i in tmp do
67485: LD_ADDR_VAR 0 1
67489: PUSH
67490: LD_VAR 0 5
67494: PUSH
67495: FOR_IN
67496: IFFALSE 67637
// begin d := rand ( 0 , 5 ) ;
67498: LD_ADDR_VAR 0 4
67502: PUSH
67503: LD_INT 0
67505: PPUSH
67506: LD_INT 5
67508: PPUSH
67509: CALL_OW 12
67513: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
67514: LD_ADDR_VAR 0 2
67518: PUSH
67519: LD_VAR 0 1
67523: PPUSH
67524: CALL_OW 250
67528: PPUSH
67529: LD_VAR 0 4
67533: PPUSH
67534: LD_INT 3
67536: PPUSH
67537: LD_INT 12
67539: PPUSH
67540: CALL_OW 12
67544: PPUSH
67545: CALL_OW 272
67549: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
67550: LD_ADDR_VAR 0 3
67554: PUSH
67555: LD_VAR 0 1
67559: PPUSH
67560: CALL_OW 251
67564: PPUSH
67565: LD_VAR 0 4
67569: PPUSH
67570: LD_INT 3
67572: PPUSH
67573: LD_INT 12
67575: PPUSH
67576: CALL_OW 12
67580: PPUSH
67581: CALL_OW 273
67585: ST_TO_ADDR
// if ValidHex ( x , y ) then
67586: LD_VAR 0 2
67590: PPUSH
67591: LD_VAR 0 3
67595: PPUSH
67596: CALL_OW 488
67600: IFFALSE 67635
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
67602: LD_VAR 0 1
67606: PPUSH
67607: LD_VAR 0 2
67611: PPUSH
67612: LD_VAR 0 3
67616: PPUSH
67617: LD_INT 3
67619: PPUSH
67620: LD_INT 6
67622: PPUSH
67623: CALL_OW 12
67627: PPUSH
67628: LD_INT 1
67630: PPUSH
67631: CALL_OW 483
// end ;
67635: GO 67495
67637: POP
67638: POP
// end ;
67639: PPOPN 5
67641: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
67642: LD_EXP 42
67646: PUSH
67647: LD_EXP 77
67651: AND
67652: IFFALSE 67746
67654: GO 67656
67656: DISABLE
67657: LD_INT 0
67659: PPUSH
67660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
67661: LD_ADDR_VAR 0 2
67665: PUSH
67666: LD_INT 22
67668: PUSH
67669: LD_OWVAR 2
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 32
67680: PUSH
67681: LD_INT 1
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 21
67690: PUSH
67691: LD_INT 2
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: LIST
67702: PPUSH
67703: CALL_OW 69
67707: ST_TO_ADDR
// if not tmp then
67708: LD_VAR 0 2
67712: NOT
67713: IFFALSE 67717
// exit ;
67715: GO 67746
// for i in tmp do
67717: LD_ADDR_VAR 0 1
67721: PUSH
67722: LD_VAR 0 2
67726: PUSH
67727: FOR_IN
67728: IFFALSE 67744
// SetFuel ( i , 0 ) ;
67730: LD_VAR 0 1
67734: PPUSH
67735: LD_INT 0
67737: PPUSH
67738: CALL_OW 240
67742: GO 67727
67744: POP
67745: POP
// end ;
67746: PPOPN 2
67748: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67749: LD_EXP 42
67753: PUSH
67754: LD_EXP 78
67758: AND
67759: IFFALSE 67825
67761: GO 67763
67763: DISABLE
67764: LD_INT 0
67766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67767: LD_ADDR_VAR 0 1
67771: PUSH
67772: LD_INT 22
67774: PUSH
67775: LD_OWVAR 2
67779: PUSH
67780: EMPTY
67781: LIST
67782: LIST
67783: PUSH
67784: LD_INT 30
67786: PUSH
67787: LD_INT 29
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PPUSH
67798: CALL_OW 69
67802: ST_TO_ADDR
// if not tmp then
67803: LD_VAR 0 1
67807: NOT
67808: IFFALSE 67812
// exit ;
67810: GO 67825
// DestroyUnit ( tmp [ 1 ] ) ;
67812: LD_VAR 0 1
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: PPUSH
67821: CALL_OW 65
// end ;
67825: PPOPN 1
67827: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67828: LD_EXP 42
67832: PUSH
67833: LD_EXP 80
67837: AND
67838: IFFALSE 67967
67840: GO 67842
67842: DISABLE
67843: LD_INT 0
67845: PPUSH
// begin uc_side := 0 ;
67846: LD_ADDR_OWVAR 20
67850: PUSH
67851: LD_INT 0
67853: ST_TO_ADDR
// uc_nation := nation_arabian ;
67854: LD_ADDR_OWVAR 21
67858: PUSH
67859: LD_INT 2
67861: ST_TO_ADDR
// hc_gallery :=  ;
67862: LD_ADDR_OWVAR 33
67866: PUSH
67867: LD_STRING 
67869: ST_TO_ADDR
// hc_name :=  ;
67870: LD_ADDR_OWVAR 26
67874: PUSH
67875: LD_STRING 
67877: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67878: LD_INT 1
67880: PPUSH
67881: LD_INT 11
67883: PPUSH
67884: LD_INT 10
67886: PPUSH
67887: CALL_OW 380
// un := CreateHuman ;
67891: LD_ADDR_VAR 0 1
67895: PUSH
67896: CALL_OW 44
67900: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67901: LD_VAR 0 1
67905: PPUSH
67906: LD_INT 1
67908: PPUSH
67909: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67913: LD_INT 35
67915: PPUSH
67916: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67920: LD_VAR 0 1
67924: PPUSH
67925: LD_INT 22
67927: PUSH
67928: LD_OWVAR 2
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PPUSH
67937: CALL_OW 69
67941: PPUSH
67942: LD_VAR 0 1
67946: PPUSH
67947: CALL_OW 74
67951: PPUSH
67952: CALL_OW 115
// until IsDead ( un ) ;
67956: LD_VAR 0 1
67960: PPUSH
67961: CALL_OW 301
67965: IFFALSE 67913
// end ;
67967: PPOPN 1
67969: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67970: LD_EXP 42
67974: PUSH
67975: LD_EXP 82
67979: AND
67980: IFFALSE 67992
67982: GO 67984
67984: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67985: LD_STRING earthquake(getX(game), 0, 32)
67987: PPUSH
67988: CALL_OW 559
67992: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67993: LD_EXP 42
67997: PUSH
67998: LD_EXP 83
68002: AND
68003: IFFALSE 68094
68005: GO 68007
68007: DISABLE
68008: LD_INT 0
68010: PPUSH
// begin enable ;
68011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
68012: LD_ADDR_VAR 0 1
68016: PUSH
68017: LD_INT 22
68019: PUSH
68020: LD_OWVAR 2
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 21
68031: PUSH
68032: LD_INT 2
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 33
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: PPUSH
68054: CALL_OW 69
68058: ST_TO_ADDR
// if not tmp then
68059: LD_VAR 0 1
68063: NOT
68064: IFFALSE 68068
// exit ;
68066: GO 68094
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68068: LD_VAR 0 1
68072: PUSH
68073: LD_INT 1
68075: PPUSH
68076: LD_VAR 0 1
68080: PPUSH
68081: CALL_OW 12
68085: ARRAY
68086: PPUSH
68087: LD_INT 1
68089: PPUSH
68090: CALL_OW 234
// end ;
68094: PPOPN 1
68096: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
68097: LD_EXP 42
68101: PUSH
68102: LD_EXP 84
68106: AND
68107: IFFALSE 68248
68109: GO 68111
68111: DISABLE
68112: LD_INT 0
68114: PPUSH
68115: PPUSH
68116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68117: LD_ADDR_VAR 0 3
68121: PUSH
68122: LD_INT 22
68124: PUSH
68125: LD_OWVAR 2
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 25
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PPUSH
68148: CALL_OW 69
68152: ST_TO_ADDR
// if not tmp then
68153: LD_VAR 0 3
68157: NOT
68158: IFFALSE 68162
// exit ;
68160: GO 68248
// un := tmp [ rand ( 1 , tmp ) ] ;
68162: LD_ADDR_VAR 0 2
68166: PUSH
68167: LD_VAR 0 3
68171: PUSH
68172: LD_INT 1
68174: PPUSH
68175: LD_VAR 0 3
68179: PPUSH
68180: CALL_OW 12
68184: ARRAY
68185: ST_TO_ADDR
// if Crawls ( un ) then
68186: LD_VAR 0 2
68190: PPUSH
68191: CALL_OW 318
68195: IFFALSE 68206
// ComWalk ( un ) ;
68197: LD_VAR 0 2
68201: PPUSH
68202: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
68206: LD_VAR 0 2
68210: PPUSH
68211: LD_INT 9
68213: PPUSH
68214: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
68218: LD_INT 28
68220: PPUSH
68221: LD_OWVAR 2
68225: PPUSH
68226: LD_INT 2
68228: PPUSH
68229: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
68233: LD_INT 29
68235: PPUSH
68236: LD_OWVAR 2
68240: PPUSH
68241: LD_INT 2
68243: PPUSH
68244: CALL_OW 322
// end ;
68248: PPOPN 3
68250: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
68251: LD_EXP 42
68255: PUSH
68256: LD_EXP 85
68260: AND
68261: IFFALSE 68372
68263: GO 68265
68265: DISABLE
68266: LD_INT 0
68268: PPUSH
68269: PPUSH
68270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68271: LD_ADDR_VAR 0 3
68275: PUSH
68276: LD_INT 22
68278: PUSH
68279: LD_OWVAR 2
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 25
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PPUSH
68302: CALL_OW 69
68306: ST_TO_ADDR
// if not tmp then
68307: LD_VAR 0 3
68311: NOT
68312: IFFALSE 68316
// exit ;
68314: GO 68372
// un := tmp [ rand ( 1 , tmp ) ] ;
68316: LD_ADDR_VAR 0 2
68320: PUSH
68321: LD_VAR 0 3
68325: PUSH
68326: LD_INT 1
68328: PPUSH
68329: LD_VAR 0 3
68333: PPUSH
68334: CALL_OW 12
68338: ARRAY
68339: ST_TO_ADDR
// if Crawls ( un ) then
68340: LD_VAR 0 2
68344: PPUSH
68345: CALL_OW 318
68349: IFFALSE 68360
// ComWalk ( un ) ;
68351: LD_VAR 0 2
68355: PPUSH
68356: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68360: LD_VAR 0 2
68364: PPUSH
68365: LD_INT 8
68367: PPUSH
68368: CALL_OW 336
// end ;
68372: PPOPN 3
68374: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
68375: LD_EXP 42
68379: PUSH
68380: LD_EXP 86
68384: AND
68385: IFFALSE 68529
68387: GO 68389
68389: DISABLE
68390: LD_INT 0
68392: PPUSH
68393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
68394: LD_ADDR_VAR 0 2
68398: PUSH
68399: LD_INT 22
68401: PUSH
68402: LD_OWVAR 2
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 21
68413: PUSH
68414: LD_INT 2
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 2
68423: PUSH
68424: LD_INT 34
68426: PUSH
68427: LD_INT 12
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 34
68436: PUSH
68437: LD_INT 51
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 34
68446: PUSH
68447: LD_INT 32
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: PPUSH
68465: CALL_OW 69
68469: ST_TO_ADDR
// if not tmp then
68470: LD_VAR 0 2
68474: NOT
68475: IFFALSE 68479
// exit ;
68477: GO 68529
// for i in tmp do
68479: LD_ADDR_VAR 0 1
68483: PUSH
68484: LD_VAR 0 2
68488: PUSH
68489: FOR_IN
68490: IFFALSE 68527
// if GetCargo ( i , mat_artifact ) = 0 then
68492: LD_VAR 0 1
68496: PPUSH
68497: LD_INT 4
68499: PPUSH
68500: CALL_OW 289
68504: PUSH
68505: LD_INT 0
68507: EQUAL
68508: IFFALSE 68525
// SetCargo ( i , mat_siberit , 100 ) ;
68510: LD_VAR 0 1
68514: PPUSH
68515: LD_INT 3
68517: PPUSH
68518: LD_INT 100
68520: PPUSH
68521: CALL_OW 290
68525: GO 68489
68527: POP
68528: POP
// end ;
68529: PPOPN 2
68531: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
68532: LD_EXP 42
68536: PUSH
68537: LD_EXP 87
68541: AND
68542: IFFALSE 68725
68544: GO 68546
68546: DISABLE
68547: LD_INT 0
68549: PPUSH
68550: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68551: LD_ADDR_VAR 0 2
68555: PUSH
68556: LD_INT 22
68558: PUSH
68559: LD_OWVAR 2
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PPUSH
68568: CALL_OW 69
68572: ST_TO_ADDR
// if not tmp then
68573: LD_VAR 0 2
68577: NOT
68578: IFFALSE 68582
// exit ;
68580: GO 68725
// for i := 1 to 2 do
68582: LD_ADDR_VAR 0 1
68586: PUSH
68587: DOUBLE
68588: LD_INT 1
68590: DEC
68591: ST_TO_ADDR
68592: LD_INT 2
68594: PUSH
68595: FOR_TO
68596: IFFALSE 68723
// begin uc_side := your_side ;
68598: LD_ADDR_OWVAR 20
68602: PUSH
68603: LD_OWVAR 2
68607: ST_TO_ADDR
// uc_nation := nation_american ;
68608: LD_ADDR_OWVAR 21
68612: PUSH
68613: LD_INT 1
68615: ST_TO_ADDR
// vc_chassis := us_morphling ;
68616: LD_ADDR_OWVAR 37
68620: PUSH
68621: LD_INT 5
68623: ST_TO_ADDR
// vc_engine := engine_siberite ;
68624: LD_ADDR_OWVAR 39
68628: PUSH
68629: LD_INT 3
68631: ST_TO_ADDR
// vc_control := control_computer ;
68632: LD_ADDR_OWVAR 38
68636: PUSH
68637: LD_INT 3
68639: ST_TO_ADDR
// vc_weapon := us_double_laser ;
68640: LD_ADDR_OWVAR 40
68644: PUSH
68645: LD_INT 10
68647: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
68648: LD_VAR 0 2
68652: PUSH
68653: LD_INT 1
68655: ARRAY
68656: PPUSH
68657: CALL_OW 310
68661: NOT
68662: IFFALSE 68709
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
68664: CALL_OW 45
68668: PPUSH
68669: LD_VAR 0 2
68673: PUSH
68674: LD_INT 1
68676: ARRAY
68677: PPUSH
68678: CALL_OW 250
68682: PPUSH
68683: LD_VAR 0 2
68687: PUSH
68688: LD_INT 1
68690: ARRAY
68691: PPUSH
68692: CALL_OW 251
68696: PPUSH
68697: LD_INT 12
68699: PPUSH
68700: LD_INT 1
68702: PPUSH
68703: CALL_OW 50
68707: GO 68721
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68709: CALL_OW 45
68713: PPUSH
68714: LD_INT 1
68716: PPUSH
68717: CALL_OW 51
// end ;
68721: GO 68595
68723: POP
68724: POP
// end ;
68725: PPOPN 2
68727: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68728: LD_EXP 42
68732: PUSH
68733: LD_EXP 88
68737: AND
68738: IFFALSE 68960
68740: GO 68742
68742: DISABLE
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
68747: PPUSH
68748: PPUSH
68749: PPUSH
68750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68751: LD_ADDR_VAR 0 6
68755: PUSH
68756: LD_INT 22
68758: PUSH
68759: LD_OWVAR 2
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 21
68770: PUSH
68771: LD_INT 1
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 3
68780: PUSH
68781: LD_INT 23
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: LIST
68799: PPUSH
68800: CALL_OW 69
68804: ST_TO_ADDR
// if not tmp then
68805: LD_VAR 0 6
68809: NOT
68810: IFFALSE 68814
// exit ;
68812: GO 68960
// s1 := rand ( 1 , 4 ) ;
68814: LD_ADDR_VAR 0 2
68818: PUSH
68819: LD_INT 1
68821: PPUSH
68822: LD_INT 4
68824: PPUSH
68825: CALL_OW 12
68829: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68830: LD_ADDR_VAR 0 4
68834: PUSH
68835: LD_VAR 0 6
68839: PUSH
68840: LD_INT 1
68842: ARRAY
68843: PPUSH
68844: LD_VAR 0 2
68848: PPUSH
68849: CALL_OW 259
68853: ST_TO_ADDR
// if s1 = 1 then
68854: LD_VAR 0 2
68858: PUSH
68859: LD_INT 1
68861: EQUAL
68862: IFFALSE 68882
// s2 := rand ( 2 , 4 ) else
68864: LD_ADDR_VAR 0 3
68868: PUSH
68869: LD_INT 2
68871: PPUSH
68872: LD_INT 4
68874: PPUSH
68875: CALL_OW 12
68879: ST_TO_ADDR
68880: GO 68890
// s2 := 1 ;
68882: LD_ADDR_VAR 0 3
68886: PUSH
68887: LD_INT 1
68889: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68890: LD_ADDR_VAR 0 5
68894: PUSH
68895: LD_VAR 0 6
68899: PUSH
68900: LD_INT 1
68902: ARRAY
68903: PPUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: CALL_OW 259
68913: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68914: LD_VAR 0 6
68918: PUSH
68919: LD_INT 1
68921: ARRAY
68922: PPUSH
68923: LD_VAR 0 2
68927: PPUSH
68928: LD_VAR 0 5
68932: PPUSH
68933: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68937: LD_VAR 0 6
68941: PUSH
68942: LD_INT 1
68944: ARRAY
68945: PPUSH
68946: LD_VAR 0 3
68950: PPUSH
68951: LD_VAR 0 4
68955: PPUSH
68956: CALL_OW 237
// end ;
68960: PPOPN 6
68962: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68963: LD_EXP 42
68967: PUSH
68968: LD_EXP 89
68972: AND
68973: IFFALSE 69052
68975: GO 68977
68977: DISABLE
68978: LD_INT 0
68980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68981: LD_ADDR_VAR 0 1
68985: PUSH
68986: LD_INT 22
68988: PUSH
68989: LD_OWVAR 2
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 30
69000: PUSH
69001: LD_INT 3
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: PPUSH
69012: CALL_OW 69
69016: ST_TO_ADDR
// if not tmp then
69017: LD_VAR 0 1
69021: NOT
69022: IFFALSE 69026
// exit ;
69024: GO 69052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69026: LD_VAR 0 1
69030: PUSH
69031: LD_INT 1
69033: PPUSH
69034: LD_VAR 0 1
69038: PPUSH
69039: CALL_OW 12
69043: ARRAY
69044: PPUSH
69045: LD_INT 1
69047: PPUSH
69048: CALL_OW 234
// end ;
69052: PPOPN 1
69054: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
69055: LD_EXP 42
69059: PUSH
69060: LD_EXP 90
69064: AND
69065: IFFALSE 69177
69067: GO 69069
69069: DISABLE
69070: LD_INT 0
69072: PPUSH
69073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
69074: LD_ADDR_VAR 0 2
69078: PUSH
69079: LD_INT 22
69081: PUSH
69082: LD_OWVAR 2
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 2
69093: PUSH
69094: LD_INT 30
69096: PUSH
69097: LD_INT 27
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 30
69106: PUSH
69107: LD_INT 26
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 30
69116: PUSH
69117: LD_INT 28
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PPUSH
69134: CALL_OW 69
69138: ST_TO_ADDR
// if not tmp then
69139: LD_VAR 0 2
69143: NOT
69144: IFFALSE 69148
// exit ;
69146: GO 69177
// for i in tmp do
69148: LD_ADDR_VAR 0 1
69152: PUSH
69153: LD_VAR 0 2
69157: PUSH
69158: FOR_IN
69159: IFFALSE 69175
// SetLives ( i , 1 ) ;
69161: LD_VAR 0 1
69165: PPUSH
69166: LD_INT 1
69168: PPUSH
69169: CALL_OW 234
69173: GO 69158
69175: POP
69176: POP
// end ;
69177: PPOPN 2
69179: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
69180: LD_EXP 42
69184: PUSH
69185: LD_EXP 91
69189: AND
69190: IFFALSE 69477
69192: GO 69194
69194: DISABLE
69195: LD_INT 0
69197: PPUSH
69198: PPUSH
69199: PPUSH
// begin i := rand ( 1 , 7 ) ;
69200: LD_ADDR_VAR 0 1
69204: PUSH
69205: LD_INT 1
69207: PPUSH
69208: LD_INT 7
69210: PPUSH
69211: CALL_OW 12
69215: ST_TO_ADDR
// case i of 1 :
69216: LD_VAR 0 1
69220: PUSH
69221: LD_INT 1
69223: DOUBLE
69224: EQUAL
69225: IFTRUE 69229
69227: GO 69239
69229: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
69230: LD_STRING earthquake(getX(game), 0, 32)
69232: PPUSH
69233: CALL_OW 559
69237: GO 69477
69239: LD_INT 2
69241: DOUBLE
69242: EQUAL
69243: IFTRUE 69247
69245: GO 69261
69247: POP
// begin ToLua ( displayStucuk(); ) ;
69248: LD_STRING displayStucuk();
69250: PPUSH
69251: CALL_OW 559
// ResetFog ;
69255: CALL_OW 335
// end ; 3 :
69259: GO 69477
69261: LD_INT 3
69263: DOUBLE
69264: EQUAL
69265: IFTRUE 69269
69267: GO 69373
69269: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69270: LD_ADDR_VAR 0 2
69274: PUSH
69275: LD_INT 22
69277: PUSH
69278: LD_OWVAR 2
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 25
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PPUSH
69301: CALL_OW 69
69305: ST_TO_ADDR
// if not tmp then
69306: LD_VAR 0 2
69310: NOT
69311: IFFALSE 69315
// exit ;
69313: GO 69477
// un := tmp [ rand ( 1 , tmp ) ] ;
69315: LD_ADDR_VAR 0 3
69319: PUSH
69320: LD_VAR 0 2
69324: PUSH
69325: LD_INT 1
69327: PPUSH
69328: LD_VAR 0 2
69332: PPUSH
69333: CALL_OW 12
69337: ARRAY
69338: ST_TO_ADDR
// if Crawls ( un ) then
69339: LD_VAR 0 3
69343: PPUSH
69344: CALL_OW 318
69348: IFFALSE 69359
// ComWalk ( un ) ;
69350: LD_VAR 0 3
69354: PPUSH
69355: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69359: LD_VAR 0 3
69363: PPUSH
69364: LD_INT 8
69366: PPUSH
69367: CALL_OW 336
// end ; 4 :
69371: GO 69477
69373: LD_INT 4
69375: DOUBLE
69376: EQUAL
69377: IFTRUE 69381
69379: GO 69455
69381: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69382: LD_ADDR_VAR 0 2
69386: PUSH
69387: LD_INT 22
69389: PUSH
69390: LD_OWVAR 2
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 30
69401: PUSH
69402: LD_INT 29
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PPUSH
69413: CALL_OW 69
69417: ST_TO_ADDR
// if not tmp then
69418: LD_VAR 0 2
69422: NOT
69423: IFFALSE 69427
// exit ;
69425: GO 69477
// CenterNowOnUnits ( tmp [ 1 ] ) ;
69427: LD_VAR 0 2
69431: PUSH
69432: LD_INT 1
69434: ARRAY
69435: PPUSH
69436: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
69440: LD_VAR 0 2
69444: PUSH
69445: LD_INT 1
69447: ARRAY
69448: PPUSH
69449: CALL_OW 65
// end ; 5 .. 7 :
69453: GO 69477
69455: LD_INT 5
69457: DOUBLE
69458: GREATEREQUAL
69459: IFFALSE 69467
69461: LD_INT 7
69463: DOUBLE
69464: LESSEQUAL
69465: IFTRUE 69469
69467: GO 69476
69469: POP
// StreamSibBomb ; end ;
69470: CALL 65714 0 0
69474: GO 69477
69476: POP
// end ;
69477: PPOPN 3
69479: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
69480: LD_EXP 42
69484: PUSH
69485: LD_EXP 92
69489: AND
69490: IFFALSE 69646
69492: GO 69494
69494: DISABLE
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
69499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
69500: LD_ADDR_VAR 0 2
69504: PUSH
69505: LD_INT 81
69507: PUSH
69508: LD_OWVAR 2
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 21
69522: PUSH
69523: LD_INT 1
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 21
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PPUSH
69549: CALL_OW 69
69553: ST_TO_ADDR
// if not tmp then
69554: LD_VAR 0 2
69558: NOT
69559: IFFALSE 69563
// exit ;
69561: GO 69646
// p := 0 ;
69563: LD_ADDR_VAR 0 3
69567: PUSH
69568: LD_INT 0
69570: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69571: LD_INT 35
69573: PPUSH
69574: CALL_OW 67
// p := p + 1 ;
69578: LD_ADDR_VAR 0 3
69582: PUSH
69583: LD_VAR 0 3
69587: PUSH
69588: LD_INT 1
69590: PLUS
69591: ST_TO_ADDR
// for i in tmp do
69592: LD_ADDR_VAR 0 1
69596: PUSH
69597: LD_VAR 0 2
69601: PUSH
69602: FOR_IN
69603: IFFALSE 69634
// if GetLives ( i ) < 1000 then
69605: LD_VAR 0 1
69609: PPUSH
69610: CALL_OW 256
69614: PUSH
69615: LD_INT 1000
69617: LESS
69618: IFFALSE 69632
// SetLives ( i , 1000 ) ;
69620: LD_VAR 0 1
69624: PPUSH
69625: LD_INT 1000
69627: PPUSH
69628: CALL_OW 234
69632: GO 69602
69634: POP
69635: POP
// until p > 20 ;
69636: LD_VAR 0 3
69640: PUSH
69641: LD_INT 20
69643: GREATER
69644: IFFALSE 69571
// end ;
69646: PPOPN 3
69648: END
// every 0 0$1 trigger StreamModeActive and sTime do
69649: LD_EXP 42
69653: PUSH
69654: LD_EXP 93
69658: AND
69659: IFFALSE 69694
69661: GO 69663
69663: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
69664: LD_INT 28
69666: PPUSH
69667: LD_OWVAR 2
69671: PPUSH
69672: LD_INT 2
69674: PPUSH
69675: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
69679: LD_INT 30
69681: PPUSH
69682: LD_OWVAR 2
69686: PPUSH
69687: LD_INT 2
69689: PPUSH
69690: CALL_OW 322
// end ;
69694: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
69695: LD_EXP 42
69699: PUSH
69700: LD_EXP 94
69704: AND
69705: IFFALSE 69826
69707: GO 69709
69709: DISABLE
69710: LD_INT 0
69712: PPUSH
69713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69714: LD_ADDR_VAR 0 2
69718: PUSH
69719: LD_INT 22
69721: PUSH
69722: LD_OWVAR 2
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 21
69733: PUSH
69734: LD_INT 1
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 3
69743: PUSH
69744: LD_INT 23
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: LIST
69762: PPUSH
69763: CALL_OW 69
69767: ST_TO_ADDR
// if not tmp then
69768: LD_VAR 0 2
69772: NOT
69773: IFFALSE 69777
// exit ;
69775: GO 69826
// for i in tmp do
69777: LD_ADDR_VAR 0 1
69781: PUSH
69782: LD_VAR 0 2
69786: PUSH
69787: FOR_IN
69788: IFFALSE 69824
// begin if Crawls ( i ) then
69790: LD_VAR 0 1
69794: PPUSH
69795: CALL_OW 318
69799: IFFALSE 69810
// ComWalk ( i ) ;
69801: LD_VAR 0 1
69805: PPUSH
69806: CALL_OW 138
// SetClass ( i , 2 ) ;
69810: LD_VAR 0 1
69814: PPUSH
69815: LD_INT 2
69817: PPUSH
69818: CALL_OW 336
// end ;
69822: GO 69787
69824: POP
69825: POP
// end ;
69826: PPOPN 2
69828: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69829: LD_EXP 42
69833: PUSH
69834: LD_EXP 95
69838: AND
69839: IFFALSE 70127
69841: GO 69843
69843: DISABLE
69844: LD_INT 0
69846: PPUSH
69847: PPUSH
69848: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69849: LD_OWVAR 2
69853: PPUSH
69854: LD_INT 9
69856: PPUSH
69857: LD_INT 1
69859: PPUSH
69860: LD_INT 1
69862: PPUSH
69863: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69867: LD_INT 9
69869: PPUSH
69870: LD_OWVAR 2
69874: PPUSH
69875: CALL_OW 343
// uc_side := 9 ;
69879: LD_ADDR_OWVAR 20
69883: PUSH
69884: LD_INT 9
69886: ST_TO_ADDR
// uc_nation := 2 ;
69887: LD_ADDR_OWVAR 21
69891: PUSH
69892: LD_INT 2
69894: ST_TO_ADDR
// hc_name := Dark Warrior ;
69895: LD_ADDR_OWVAR 26
69899: PUSH
69900: LD_STRING Dark Warrior
69902: ST_TO_ADDR
// hc_gallery :=  ;
69903: LD_ADDR_OWVAR 33
69907: PUSH
69908: LD_STRING 
69910: ST_TO_ADDR
// hc_noskilllimit := true ;
69911: LD_ADDR_OWVAR 76
69915: PUSH
69916: LD_INT 1
69918: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69919: LD_ADDR_OWVAR 31
69923: PUSH
69924: LD_INT 30
69926: PUSH
69927: LD_INT 30
69929: PUSH
69930: LD_INT 30
69932: PUSH
69933: LD_INT 30
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: ST_TO_ADDR
// un := CreateHuman ;
69942: LD_ADDR_VAR 0 3
69946: PUSH
69947: CALL_OW 44
69951: ST_TO_ADDR
// hc_noskilllimit := false ;
69952: LD_ADDR_OWVAR 76
69956: PUSH
69957: LD_INT 0
69959: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69960: LD_VAR 0 3
69964: PPUSH
69965: LD_INT 1
69967: PPUSH
69968: CALL_OW 51
// ToLua ( playRanger() ) ;
69972: LD_STRING playRanger()
69974: PPUSH
69975: CALL_OW 559
// p := 0 ;
69979: LD_ADDR_VAR 0 2
69983: PUSH
69984: LD_INT 0
69986: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69987: LD_INT 35
69989: PPUSH
69990: CALL_OW 67
// p := p + 1 ;
69994: LD_ADDR_VAR 0 2
69998: PUSH
69999: LD_VAR 0 2
70003: PUSH
70004: LD_INT 1
70006: PLUS
70007: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
70008: LD_VAR 0 3
70012: PPUSH
70013: CALL_OW 256
70017: PUSH
70018: LD_INT 1000
70020: LESS
70021: IFFALSE 70035
// SetLives ( un , 1000 ) ;
70023: LD_VAR 0 3
70027: PPUSH
70028: LD_INT 1000
70030: PPUSH
70031: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
70035: LD_VAR 0 3
70039: PPUSH
70040: LD_INT 81
70042: PUSH
70043: LD_OWVAR 2
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 91
70054: PUSH
70055: LD_VAR 0 3
70059: PUSH
70060: LD_INT 30
70062: PUSH
70063: EMPTY
70064: LIST
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PPUSH
70072: CALL_OW 69
70076: PPUSH
70077: LD_VAR 0 3
70081: PPUSH
70082: CALL_OW 74
70086: PPUSH
70087: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
70091: LD_VAR 0 2
70095: PUSH
70096: LD_INT 80
70098: GREATER
70099: PUSH
70100: LD_VAR 0 3
70104: PPUSH
70105: CALL_OW 301
70109: OR
70110: IFFALSE 69987
// if un then
70112: LD_VAR 0 3
70116: IFFALSE 70127
// RemoveUnit ( un ) ;
70118: LD_VAR 0 3
70122: PPUSH
70123: CALL_OW 64
// end ;
70127: PPOPN 3
70129: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
70130: LD_EXP 96
70134: IFFALSE 70250
70136: GO 70138
70138: DISABLE
70139: LD_INT 0
70141: PPUSH
70142: PPUSH
70143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
70144: LD_ADDR_VAR 0 2
70148: PUSH
70149: LD_INT 81
70151: PUSH
70152: LD_OWVAR 2
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 21
70163: PUSH
70164: LD_INT 1
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PPUSH
70175: CALL_OW 69
70179: ST_TO_ADDR
// ToLua ( playComputer() ) ;
70180: LD_STRING playComputer()
70182: PPUSH
70183: CALL_OW 559
// if not tmp then
70187: LD_VAR 0 2
70191: NOT
70192: IFFALSE 70196
// exit ;
70194: GO 70250
// for i in tmp do
70196: LD_ADDR_VAR 0 1
70200: PUSH
70201: LD_VAR 0 2
70205: PUSH
70206: FOR_IN
70207: IFFALSE 70248
// for j := 1 to 4 do
70209: LD_ADDR_VAR 0 3
70213: PUSH
70214: DOUBLE
70215: LD_INT 1
70217: DEC
70218: ST_TO_ADDR
70219: LD_INT 4
70221: PUSH
70222: FOR_TO
70223: IFFALSE 70244
// SetSkill ( i , j , 10 ) ;
70225: LD_VAR 0 1
70229: PPUSH
70230: LD_VAR 0 3
70234: PPUSH
70235: LD_INT 10
70237: PPUSH
70238: CALL_OW 237
70242: GO 70222
70244: POP
70245: POP
70246: GO 70206
70248: POP
70249: POP
// end ;
70250: PPOPN 3
70252: END
// every 0 0$1 trigger s30 do var i , tmp ;
70253: LD_EXP 97
70257: IFFALSE 70326
70259: GO 70261
70261: DISABLE
70262: LD_INT 0
70264: PPUSH
70265: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70266: LD_ADDR_VAR 0 2
70270: PUSH
70271: LD_INT 22
70273: PUSH
70274: LD_OWVAR 2
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PPUSH
70283: CALL_OW 69
70287: ST_TO_ADDR
// if not tmp then
70288: LD_VAR 0 2
70292: NOT
70293: IFFALSE 70297
// exit ;
70295: GO 70326
// for i in tmp do
70297: LD_ADDR_VAR 0 1
70301: PUSH
70302: LD_VAR 0 2
70306: PUSH
70307: FOR_IN
70308: IFFALSE 70324
// SetLives ( i , 300 ) ;
70310: LD_VAR 0 1
70314: PPUSH
70315: LD_INT 300
70317: PPUSH
70318: CALL_OW 234
70322: GO 70307
70324: POP
70325: POP
// end ;
70326: PPOPN 2
70328: END
// every 0 0$1 trigger s60 do var i , tmp ;
70329: LD_EXP 98
70333: IFFALSE 70402
70335: GO 70337
70337: DISABLE
70338: LD_INT 0
70340: PPUSH
70341: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70342: LD_ADDR_VAR 0 2
70346: PUSH
70347: LD_INT 22
70349: PUSH
70350: LD_OWVAR 2
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PPUSH
70359: CALL_OW 69
70363: ST_TO_ADDR
// if not tmp then
70364: LD_VAR 0 2
70368: NOT
70369: IFFALSE 70373
// exit ;
70371: GO 70402
// for i in tmp do
70373: LD_ADDR_VAR 0 1
70377: PUSH
70378: LD_VAR 0 2
70382: PUSH
70383: FOR_IN
70384: IFFALSE 70400
// SetLives ( i , 600 ) ;
70386: LD_VAR 0 1
70390: PPUSH
70391: LD_INT 600
70393: PPUSH
70394: CALL_OW 234
70398: GO 70383
70400: POP
70401: POP
// end ;
70402: PPOPN 2
70404: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
70405: LD_INT 0
70407: PPUSH
// case cmd of 301 :
70408: LD_VAR 0 1
70412: PUSH
70413: LD_INT 301
70415: DOUBLE
70416: EQUAL
70417: IFTRUE 70421
70419: GO 70453
70421: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
70422: LD_VAR 0 6
70426: PPUSH
70427: LD_VAR 0 7
70431: PPUSH
70432: LD_VAR 0 8
70436: PPUSH
70437: LD_VAR 0 4
70441: PPUSH
70442: LD_VAR 0 5
70446: PPUSH
70447: CALL 71662 0 5
70451: GO 70574
70453: LD_INT 302
70455: DOUBLE
70456: EQUAL
70457: IFTRUE 70461
70459: GO 70498
70461: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
70462: LD_VAR 0 6
70466: PPUSH
70467: LD_VAR 0 7
70471: PPUSH
70472: LD_VAR 0 8
70476: PPUSH
70477: LD_VAR 0 9
70481: PPUSH
70482: LD_VAR 0 4
70486: PPUSH
70487: LD_VAR 0 5
70491: PPUSH
70492: CALL 71753 0 6
70496: GO 70574
70498: LD_INT 303
70500: DOUBLE
70501: EQUAL
70502: IFTRUE 70506
70504: GO 70543
70506: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
70507: LD_VAR 0 6
70511: PPUSH
70512: LD_VAR 0 7
70516: PPUSH
70517: LD_VAR 0 8
70521: PPUSH
70522: LD_VAR 0 9
70526: PPUSH
70527: LD_VAR 0 4
70531: PPUSH
70532: LD_VAR 0 5
70536: PPUSH
70537: CALL 70579 0 6
70541: GO 70574
70543: LD_INT 304
70545: DOUBLE
70546: EQUAL
70547: IFTRUE 70551
70549: GO 70573
70551: POP
// hHackTeleport ( unit , x , y ) ; end ;
70552: LD_VAR 0 2
70556: PPUSH
70557: LD_VAR 0 4
70561: PPUSH
70562: LD_VAR 0 5
70566: PPUSH
70567: CALL 72346 0 3
70571: GO 70574
70573: POP
// end ;
70574: LD_VAR 0 12
70578: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
70579: LD_INT 0
70581: PPUSH
70582: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
70583: LD_VAR 0 1
70587: PUSH
70588: LD_INT 1
70590: LESS
70591: PUSH
70592: LD_VAR 0 1
70596: PUSH
70597: LD_INT 3
70599: GREATER
70600: OR
70601: PUSH
70602: LD_VAR 0 5
70606: PPUSH
70607: LD_VAR 0 6
70611: PPUSH
70612: CALL_OW 428
70616: OR
70617: IFFALSE 70621
// exit ;
70619: GO 71349
// uc_side := your_side ;
70621: LD_ADDR_OWVAR 20
70625: PUSH
70626: LD_OWVAR 2
70630: ST_TO_ADDR
// uc_nation := nation ;
70631: LD_ADDR_OWVAR 21
70635: PUSH
70636: LD_VAR 0 1
70640: ST_TO_ADDR
// bc_level = 1 ;
70641: LD_ADDR_OWVAR 43
70645: PUSH
70646: LD_INT 1
70648: ST_TO_ADDR
// case btype of 1 :
70649: LD_VAR 0 2
70653: PUSH
70654: LD_INT 1
70656: DOUBLE
70657: EQUAL
70658: IFTRUE 70662
70660: GO 70673
70662: POP
// bc_type := b_depot ; 2 :
70663: LD_ADDR_OWVAR 42
70667: PUSH
70668: LD_INT 0
70670: ST_TO_ADDR
70671: GO 71293
70673: LD_INT 2
70675: DOUBLE
70676: EQUAL
70677: IFTRUE 70681
70679: GO 70692
70681: POP
// bc_type := b_warehouse ; 3 :
70682: LD_ADDR_OWVAR 42
70686: PUSH
70687: LD_INT 1
70689: ST_TO_ADDR
70690: GO 71293
70692: LD_INT 3
70694: DOUBLE
70695: EQUAL
70696: IFTRUE 70700
70698: GO 70711
70700: POP
// bc_type := b_lab ; 4 .. 9 :
70701: LD_ADDR_OWVAR 42
70705: PUSH
70706: LD_INT 6
70708: ST_TO_ADDR
70709: GO 71293
70711: LD_INT 4
70713: DOUBLE
70714: GREATEREQUAL
70715: IFFALSE 70723
70717: LD_INT 9
70719: DOUBLE
70720: LESSEQUAL
70721: IFTRUE 70725
70723: GO 70785
70725: POP
// begin bc_type := b_lab_half ;
70726: LD_ADDR_OWVAR 42
70730: PUSH
70731: LD_INT 7
70733: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70734: LD_ADDR_OWVAR 44
70738: PUSH
70739: LD_INT 10
70741: PUSH
70742: LD_INT 11
70744: PUSH
70745: LD_INT 12
70747: PUSH
70748: LD_INT 15
70750: PUSH
70751: LD_INT 14
70753: PUSH
70754: LD_INT 13
70756: PUSH
70757: EMPTY
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: PUSH
70765: LD_VAR 0 2
70769: PUSH
70770: LD_INT 3
70772: MINUS
70773: ARRAY
70774: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
70775: LD_ADDR_OWVAR 45
70779: PUSH
70780: LD_INT 9
70782: ST_TO_ADDR
// end ; 10 .. 13 :
70783: GO 71293
70785: LD_INT 10
70787: DOUBLE
70788: GREATEREQUAL
70789: IFFALSE 70797
70791: LD_INT 13
70793: DOUBLE
70794: LESSEQUAL
70795: IFTRUE 70799
70797: GO 70876
70799: POP
// begin bc_type := b_lab_full ;
70800: LD_ADDR_OWVAR 42
70804: PUSH
70805: LD_INT 8
70807: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70808: LD_ADDR_OWVAR 44
70812: PUSH
70813: LD_INT 10
70815: PUSH
70816: LD_INT 12
70818: PUSH
70819: LD_INT 14
70821: PUSH
70822: LD_INT 13
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: PUSH
70831: LD_VAR 0 2
70835: PUSH
70836: LD_INT 9
70838: MINUS
70839: ARRAY
70840: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70841: LD_ADDR_OWVAR 45
70845: PUSH
70846: LD_INT 11
70848: PUSH
70849: LD_INT 15
70851: PUSH
70852: LD_INT 12
70854: PUSH
70855: LD_INT 15
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: PUSH
70864: LD_VAR 0 2
70868: PUSH
70869: LD_INT 9
70871: MINUS
70872: ARRAY
70873: ST_TO_ADDR
// end ; 14 :
70874: GO 71293
70876: LD_INT 14
70878: DOUBLE
70879: EQUAL
70880: IFTRUE 70884
70882: GO 70895
70884: POP
// bc_type := b_workshop ; 15 :
70885: LD_ADDR_OWVAR 42
70889: PUSH
70890: LD_INT 2
70892: ST_TO_ADDR
70893: GO 71293
70895: LD_INT 15
70897: DOUBLE
70898: EQUAL
70899: IFTRUE 70903
70901: GO 70914
70903: POP
// bc_type := b_factory ; 16 :
70904: LD_ADDR_OWVAR 42
70908: PUSH
70909: LD_INT 3
70911: ST_TO_ADDR
70912: GO 71293
70914: LD_INT 16
70916: DOUBLE
70917: EQUAL
70918: IFTRUE 70922
70920: GO 70933
70922: POP
// bc_type := b_ext_gun ; 17 :
70923: LD_ADDR_OWVAR 42
70927: PUSH
70928: LD_INT 17
70930: ST_TO_ADDR
70931: GO 71293
70933: LD_INT 17
70935: DOUBLE
70936: EQUAL
70937: IFTRUE 70941
70939: GO 70969
70941: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70942: LD_ADDR_OWVAR 42
70946: PUSH
70947: LD_INT 19
70949: PUSH
70950: LD_INT 23
70952: PUSH
70953: LD_INT 19
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: PUSH
70961: LD_VAR 0 1
70965: ARRAY
70966: ST_TO_ADDR
70967: GO 71293
70969: LD_INT 18
70971: DOUBLE
70972: EQUAL
70973: IFTRUE 70977
70975: GO 70988
70977: POP
// bc_type := b_ext_radar ; 19 :
70978: LD_ADDR_OWVAR 42
70982: PUSH
70983: LD_INT 20
70985: ST_TO_ADDR
70986: GO 71293
70988: LD_INT 19
70990: DOUBLE
70991: EQUAL
70992: IFTRUE 70996
70994: GO 71007
70996: POP
// bc_type := b_ext_radio ; 20 :
70997: LD_ADDR_OWVAR 42
71001: PUSH
71002: LD_INT 22
71004: ST_TO_ADDR
71005: GO 71293
71007: LD_INT 20
71009: DOUBLE
71010: EQUAL
71011: IFTRUE 71015
71013: GO 71026
71015: POP
// bc_type := b_ext_siberium ; 21 :
71016: LD_ADDR_OWVAR 42
71020: PUSH
71021: LD_INT 21
71023: ST_TO_ADDR
71024: GO 71293
71026: LD_INT 21
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71034
71032: GO 71045
71034: POP
// bc_type := b_ext_computer ; 22 :
71035: LD_ADDR_OWVAR 42
71039: PUSH
71040: LD_INT 24
71042: ST_TO_ADDR
71043: GO 71293
71045: LD_INT 22
71047: DOUBLE
71048: EQUAL
71049: IFTRUE 71053
71051: GO 71064
71053: POP
// bc_type := b_ext_track ; 23 :
71054: LD_ADDR_OWVAR 42
71058: PUSH
71059: LD_INT 16
71061: ST_TO_ADDR
71062: GO 71293
71064: LD_INT 23
71066: DOUBLE
71067: EQUAL
71068: IFTRUE 71072
71070: GO 71083
71072: POP
// bc_type := b_ext_laser ; 24 :
71073: LD_ADDR_OWVAR 42
71077: PUSH
71078: LD_INT 25
71080: ST_TO_ADDR
71081: GO 71293
71083: LD_INT 24
71085: DOUBLE
71086: EQUAL
71087: IFTRUE 71091
71089: GO 71102
71091: POP
// bc_type := b_control_tower ; 25 :
71092: LD_ADDR_OWVAR 42
71096: PUSH
71097: LD_INT 36
71099: ST_TO_ADDR
71100: GO 71293
71102: LD_INT 25
71104: DOUBLE
71105: EQUAL
71106: IFTRUE 71110
71108: GO 71121
71110: POP
// bc_type := b_breastwork ; 26 :
71111: LD_ADDR_OWVAR 42
71115: PUSH
71116: LD_INT 31
71118: ST_TO_ADDR
71119: GO 71293
71121: LD_INT 26
71123: DOUBLE
71124: EQUAL
71125: IFTRUE 71129
71127: GO 71140
71129: POP
// bc_type := b_bunker ; 27 :
71130: LD_ADDR_OWVAR 42
71134: PUSH
71135: LD_INT 32
71137: ST_TO_ADDR
71138: GO 71293
71140: LD_INT 27
71142: DOUBLE
71143: EQUAL
71144: IFTRUE 71148
71146: GO 71159
71148: POP
// bc_type := b_turret ; 28 :
71149: LD_ADDR_OWVAR 42
71153: PUSH
71154: LD_INT 33
71156: ST_TO_ADDR
71157: GO 71293
71159: LD_INT 28
71161: DOUBLE
71162: EQUAL
71163: IFTRUE 71167
71165: GO 71178
71167: POP
// bc_type := b_armoury ; 29 :
71168: LD_ADDR_OWVAR 42
71172: PUSH
71173: LD_INT 4
71175: ST_TO_ADDR
71176: GO 71293
71178: LD_INT 29
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71186
71184: GO 71197
71186: POP
// bc_type := b_barracks ; 30 :
71187: LD_ADDR_OWVAR 42
71191: PUSH
71192: LD_INT 5
71194: ST_TO_ADDR
71195: GO 71293
71197: LD_INT 30
71199: DOUBLE
71200: EQUAL
71201: IFTRUE 71205
71203: GO 71216
71205: POP
// bc_type := b_solar_power ; 31 :
71206: LD_ADDR_OWVAR 42
71210: PUSH
71211: LD_INT 27
71213: ST_TO_ADDR
71214: GO 71293
71216: LD_INT 31
71218: DOUBLE
71219: EQUAL
71220: IFTRUE 71224
71222: GO 71235
71224: POP
// bc_type := b_oil_power ; 32 :
71225: LD_ADDR_OWVAR 42
71229: PUSH
71230: LD_INT 26
71232: ST_TO_ADDR
71233: GO 71293
71235: LD_INT 32
71237: DOUBLE
71238: EQUAL
71239: IFTRUE 71243
71241: GO 71254
71243: POP
// bc_type := b_siberite_power ; 33 :
71244: LD_ADDR_OWVAR 42
71248: PUSH
71249: LD_INT 28
71251: ST_TO_ADDR
71252: GO 71293
71254: LD_INT 33
71256: DOUBLE
71257: EQUAL
71258: IFTRUE 71262
71260: GO 71273
71262: POP
// bc_type := b_oil_mine ; 34 :
71263: LD_ADDR_OWVAR 42
71267: PUSH
71268: LD_INT 29
71270: ST_TO_ADDR
71271: GO 71293
71273: LD_INT 34
71275: DOUBLE
71276: EQUAL
71277: IFTRUE 71281
71279: GO 71292
71281: POP
// bc_type := b_siberite_mine ; end ;
71282: LD_ADDR_OWVAR 42
71286: PUSH
71287: LD_INT 30
71289: ST_TO_ADDR
71290: GO 71293
71292: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
71293: LD_ADDR_VAR 0 8
71297: PUSH
71298: LD_VAR 0 5
71302: PPUSH
71303: LD_VAR 0 6
71307: PPUSH
71308: LD_VAR 0 3
71312: PPUSH
71313: CALL_OW 47
71317: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
71318: LD_OWVAR 42
71322: PUSH
71323: LD_INT 32
71325: PUSH
71326: LD_INT 33
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: IN
71333: IFFALSE 71349
// PlaceWeaponTurret ( b , weapon ) ;
71335: LD_VAR 0 8
71339: PPUSH
71340: LD_VAR 0 4
71344: PPUSH
71345: CALL_OW 431
// end ;
71349: LD_VAR 0 7
71353: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
71354: LD_INT 0
71356: PPUSH
71357: PPUSH
71358: PPUSH
71359: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
71360: LD_ADDR_VAR 0 4
71364: PUSH
71365: LD_INT 22
71367: PUSH
71368: LD_OWVAR 2
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: PUSH
71380: LD_INT 30
71382: PUSH
71383: LD_INT 0
71385: PUSH
71386: EMPTY
71387: LIST
71388: LIST
71389: PUSH
71390: LD_INT 30
71392: PUSH
71393: LD_INT 1
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: LIST
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PPUSH
71409: CALL_OW 69
71413: ST_TO_ADDR
// if not tmp then
71414: LD_VAR 0 4
71418: NOT
71419: IFFALSE 71423
// exit ;
71421: GO 71482
// for i in tmp do
71423: LD_ADDR_VAR 0 2
71427: PUSH
71428: LD_VAR 0 4
71432: PUSH
71433: FOR_IN
71434: IFFALSE 71480
// for j = 1 to 3 do
71436: LD_ADDR_VAR 0 3
71440: PUSH
71441: DOUBLE
71442: LD_INT 1
71444: DEC
71445: ST_TO_ADDR
71446: LD_INT 3
71448: PUSH
71449: FOR_TO
71450: IFFALSE 71476
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
71452: LD_VAR 0 2
71456: PPUSH
71457: CALL_OW 274
71461: PPUSH
71462: LD_VAR 0 3
71466: PPUSH
71467: LD_INT 99999
71469: PPUSH
71470: CALL_OW 277
71474: GO 71449
71476: POP
71477: POP
71478: GO 71433
71480: POP
71481: POP
// end ;
71482: LD_VAR 0 1
71486: RET
// export function hHackSetLevel10 ; var i , j ; begin
71487: LD_INT 0
71489: PPUSH
71490: PPUSH
71491: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71492: LD_ADDR_VAR 0 2
71496: PUSH
71497: LD_INT 21
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PPUSH
71507: CALL_OW 69
71511: PUSH
71512: FOR_IN
71513: IFFALSE 71565
// if IsSelected ( i ) then
71515: LD_VAR 0 2
71519: PPUSH
71520: CALL_OW 306
71524: IFFALSE 71563
// begin for j := 1 to 4 do
71526: LD_ADDR_VAR 0 3
71530: PUSH
71531: DOUBLE
71532: LD_INT 1
71534: DEC
71535: ST_TO_ADDR
71536: LD_INT 4
71538: PUSH
71539: FOR_TO
71540: IFFALSE 71561
// SetSkill ( i , j , 10 ) ;
71542: LD_VAR 0 2
71546: PPUSH
71547: LD_VAR 0 3
71551: PPUSH
71552: LD_INT 10
71554: PPUSH
71555: CALL_OW 237
71559: GO 71539
71561: POP
71562: POP
// end ;
71563: GO 71512
71565: POP
71566: POP
// end ;
71567: LD_VAR 0 1
71571: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
71572: LD_INT 0
71574: PPUSH
71575: PPUSH
71576: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
71577: LD_ADDR_VAR 0 2
71581: PUSH
71582: LD_INT 22
71584: PUSH
71585: LD_OWVAR 2
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 21
71596: PUSH
71597: LD_INT 1
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PPUSH
71608: CALL_OW 69
71612: PUSH
71613: FOR_IN
71614: IFFALSE 71655
// begin for j := 1 to 4 do
71616: LD_ADDR_VAR 0 3
71620: PUSH
71621: DOUBLE
71622: LD_INT 1
71624: DEC
71625: ST_TO_ADDR
71626: LD_INT 4
71628: PUSH
71629: FOR_TO
71630: IFFALSE 71651
// SetSkill ( i , j , 10 ) ;
71632: LD_VAR 0 2
71636: PPUSH
71637: LD_VAR 0 3
71641: PPUSH
71642: LD_INT 10
71644: PPUSH
71645: CALL_OW 237
71649: GO 71629
71651: POP
71652: POP
// end ;
71653: GO 71613
71655: POP
71656: POP
// end ;
71657: LD_VAR 0 1
71661: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
71662: LD_INT 0
71664: PPUSH
// uc_side := your_side ;
71665: LD_ADDR_OWVAR 20
71669: PUSH
71670: LD_OWVAR 2
71674: ST_TO_ADDR
// uc_nation := nation ;
71675: LD_ADDR_OWVAR 21
71679: PUSH
71680: LD_VAR 0 1
71684: ST_TO_ADDR
// InitHc ;
71685: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
71689: LD_INT 0
71691: PPUSH
71692: LD_VAR 0 2
71696: PPUSH
71697: LD_VAR 0 3
71701: PPUSH
71702: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
71706: LD_VAR 0 4
71710: PPUSH
71711: LD_VAR 0 5
71715: PPUSH
71716: CALL_OW 428
71720: PUSH
71721: LD_INT 0
71723: EQUAL
71724: IFFALSE 71748
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71726: CALL_OW 44
71730: PPUSH
71731: LD_VAR 0 4
71735: PPUSH
71736: LD_VAR 0 5
71740: PPUSH
71741: LD_INT 1
71743: PPUSH
71744: CALL_OW 48
// end ;
71748: LD_VAR 0 6
71752: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71753: LD_INT 0
71755: PPUSH
71756: PPUSH
// uc_side := your_side ;
71757: LD_ADDR_OWVAR 20
71761: PUSH
71762: LD_OWVAR 2
71766: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71767: LD_VAR 0 1
71771: PUSH
71772: LD_INT 1
71774: PUSH
71775: LD_INT 2
71777: PUSH
71778: LD_INT 3
71780: PUSH
71781: LD_INT 4
71783: PUSH
71784: LD_INT 5
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: IN
71794: IFFALSE 71806
// uc_nation := nation_american else
71796: LD_ADDR_OWVAR 21
71800: PUSH
71801: LD_INT 1
71803: ST_TO_ADDR
71804: GO 71849
// if chassis in [ 11 , 12 , 13 , 14 ] then
71806: LD_VAR 0 1
71810: PUSH
71811: LD_INT 11
71813: PUSH
71814: LD_INT 12
71816: PUSH
71817: LD_INT 13
71819: PUSH
71820: LD_INT 14
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: LIST
71827: LIST
71828: IN
71829: IFFALSE 71841
// uc_nation := nation_arabian else
71831: LD_ADDR_OWVAR 21
71835: PUSH
71836: LD_INT 2
71838: ST_TO_ADDR
71839: GO 71849
// uc_nation := nation_russian ;
71841: LD_ADDR_OWVAR 21
71845: PUSH
71846: LD_INT 3
71848: ST_TO_ADDR
// vc_chassis := chassis ;
71849: LD_ADDR_OWVAR 37
71853: PUSH
71854: LD_VAR 0 1
71858: ST_TO_ADDR
// vc_engine := engine ;
71859: LD_ADDR_OWVAR 39
71863: PUSH
71864: LD_VAR 0 2
71868: ST_TO_ADDR
// vc_control := control ;
71869: LD_ADDR_OWVAR 38
71873: PUSH
71874: LD_VAR 0 3
71878: ST_TO_ADDR
// vc_weapon := weapon ;
71879: LD_ADDR_OWVAR 40
71883: PUSH
71884: LD_VAR 0 4
71888: ST_TO_ADDR
// un := CreateVehicle ;
71889: LD_ADDR_VAR 0 8
71893: PUSH
71894: CALL_OW 45
71898: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71899: LD_VAR 0 8
71903: PPUSH
71904: LD_INT 0
71906: PPUSH
71907: LD_INT 5
71909: PPUSH
71910: CALL_OW 12
71914: PPUSH
71915: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71919: LD_VAR 0 8
71923: PPUSH
71924: LD_VAR 0 5
71928: PPUSH
71929: LD_VAR 0 6
71933: PPUSH
71934: LD_INT 1
71936: PPUSH
71937: CALL_OW 48
// end ;
71941: LD_VAR 0 7
71945: RET
// export hInvincible ; every 1 do
71946: GO 71948
71948: DISABLE
// hInvincible := [ ] ;
71949: LD_ADDR_EXP 99
71953: PUSH
71954: EMPTY
71955: ST_TO_ADDR
71956: END
// every 10 do var i ;
71957: GO 71959
71959: DISABLE
71960: LD_INT 0
71962: PPUSH
// begin enable ;
71963: ENABLE
// if not hInvincible then
71964: LD_EXP 99
71968: NOT
71969: IFFALSE 71973
// exit ;
71971: GO 72017
// for i in hInvincible do
71973: LD_ADDR_VAR 0 1
71977: PUSH
71978: LD_EXP 99
71982: PUSH
71983: FOR_IN
71984: IFFALSE 72015
// if GetLives ( i ) < 1000 then
71986: LD_VAR 0 1
71990: PPUSH
71991: CALL_OW 256
71995: PUSH
71996: LD_INT 1000
71998: LESS
71999: IFFALSE 72013
// SetLives ( i , 1000 ) ;
72001: LD_VAR 0 1
72005: PPUSH
72006: LD_INT 1000
72008: PPUSH
72009: CALL_OW 234
72013: GO 71983
72015: POP
72016: POP
// end ;
72017: PPOPN 1
72019: END
// export function hHackInvincible ; var i ; begin
72020: LD_INT 0
72022: PPUSH
72023: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
72024: LD_ADDR_VAR 0 2
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 21
72034: PUSH
72035: LD_INT 1
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 21
72044: PUSH
72045: LD_INT 2
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: LIST
72056: PPUSH
72057: CALL_OW 69
72061: PUSH
72062: FOR_IN
72063: IFFALSE 72124
// if IsSelected ( i ) then
72065: LD_VAR 0 2
72069: PPUSH
72070: CALL_OW 306
72074: IFFALSE 72122
// begin if i in hInvincible then
72076: LD_VAR 0 2
72080: PUSH
72081: LD_EXP 99
72085: IN
72086: IFFALSE 72106
// hInvincible := hInvincible diff i else
72088: LD_ADDR_EXP 99
72092: PUSH
72093: LD_EXP 99
72097: PUSH
72098: LD_VAR 0 2
72102: DIFF
72103: ST_TO_ADDR
72104: GO 72122
// hInvincible := hInvincible union i ;
72106: LD_ADDR_EXP 99
72110: PUSH
72111: LD_EXP 99
72115: PUSH
72116: LD_VAR 0 2
72120: UNION
72121: ST_TO_ADDR
// end ;
72122: GO 72062
72124: POP
72125: POP
// end ;
72126: LD_VAR 0 1
72130: RET
// export function hHackInvisible ; var i , j ; begin
72131: LD_INT 0
72133: PPUSH
72134: PPUSH
72135: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72136: LD_ADDR_VAR 0 2
72140: PUSH
72141: LD_INT 21
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PPUSH
72151: CALL_OW 69
72155: PUSH
72156: FOR_IN
72157: IFFALSE 72181
// if IsSelected ( i ) then
72159: LD_VAR 0 2
72163: PPUSH
72164: CALL_OW 306
72168: IFFALSE 72179
// ComForceInvisible ( i ) ;
72170: LD_VAR 0 2
72174: PPUSH
72175: CALL_OW 496
72179: GO 72156
72181: POP
72182: POP
// end ;
72183: LD_VAR 0 1
72187: RET
// export function hHackChangeYourSide ; begin
72188: LD_INT 0
72190: PPUSH
// if your_side = 8 then
72191: LD_OWVAR 2
72195: PUSH
72196: LD_INT 8
72198: EQUAL
72199: IFFALSE 72211
// your_side := 0 else
72201: LD_ADDR_OWVAR 2
72205: PUSH
72206: LD_INT 0
72208: ST_TO_ADDR
72209: GO 72225
// your_side := your_side + 1 ;
72211: LD_ADDR_OWVAR 2
72215: PUSH
72216: LD_OWVAR 2
72220: PUSH
72221: LD_INT 1
72223: PLUS
72224: ST_TO_ADDR
// end ;
72225: LD_VAR 0 1
72229: RET
// export function hHackChangeUnitSide ; var i , j ; begin
72230: LD_INT 0
72232: PPUSH
72233: PPUSH
72234: PPUSH
// for i in all_units do
72235: LD_ADDR_VAR 0 2
72239: PUSH
72240: LD_OWVAR 3
72244: PUSH
72245: FOR_IN
72246: IFFALSE 72324
// if IsSelected ( i ) then
72248: LD_VAR 0 2
72252: PPUSH
72253: CALL_OW 306
72257: IFFALSE 72322
// begin j := GetSide ( i ) ;
72259: LD_ADDR_VAR 0 3
72263: PUSH
72264: LD_VAR 0 2
72268: PPUSH
72269: CALL_OW 255
72273: ST_TO_ADDR
// if j = 8 then
72274: LD_VAR 0 3
72278: PUSH
72279: LD_INT 8
72281: EQUAL
72282: IFFALSE 72294
// j := 0 else
72284: LD_ADDR_VAR 0 3
72288: PUSH
72289: LD_INT 0
72291: ST_TO_ADDR
72292: GO 72308
// j := j + 1 ;
72294: LD_ADDR_VAR 0 3
72298: PUSH
72299: LD_VAR 0 3
72303: PUSH
72304: LD_INT 1
72306: PLUS
72307: ST_TO_ADDR
// SetSide ( i , j ) ;
72308: LD_VAR 0 2
72312: PPUSH
72313: LD_VAR 0 3
72317: PPUSH
72318: CALL_OW 235
// end ;
72322: GO 72245
72324: POP
72325: POP
// end ;
72326: LD_VAR 0 1
72330: RET
// export function hHackFog ; begin
72331: LD_INT 0
72333: PPUSH
// FogOff ( true ) ;
72334: LD_INT 1
72336: PPUSH
72337: CALL_OW 344
// end ;
72341: LD_VAR 0 1
72345: RET
// export function hHackTeleport ( unit , x , y ) ; begin
72346: LD_INT 0
72348: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
72349: LD_VAR 0 1
72353: PPUSH
72354: LD_VAR 0 2
72358: PPUSH
72359: LD_VAR 0 3
72363: PPUSH
72364: LD_INT 1
72366: PPUSH
72367: LD_INT 1
72369: PPUSH
72370: CALL_OW 483
// CenterOnXY ( x , y ) ;
72374: LD_VAR 0 2
72378: PPUSH
72379: LD_VAR 0 3
72383: PPUSH
72384: CALL_OW 84
// end ;
72388: LD_VAR 0 4
72392: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72393: LD_INT 0
72395: PPUSH
72396: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72397: LD_VAR 0 1
72401: NOT
72402: PUSH
72403: LD_VAR 0 2
72407: PPUSH
72408: LD_VAR 0 3
72412: PPUSH
72413: CALL_OW 488
72417: NOT
72418: OR
72419: PUSH
72420: LD_VAR 0 1
72424: PPUSH
72425: CALL_OW 266
72429: PUSH
72430: LD_INT 3
72432: NONEQUAL
72433: PUSH
72434: LD_VAR 0 1
72438: PPUSH
72439: CALL_OW 247
72443: PUSH
72444: LD_INT 1
72446: EQUAL
72447: NOT
72448: AND
72449: OR
72450: IFFALSE 72454
// exit ;
72452: GO 72603
// if GetType ( factory ) = unit_human then
72454: LD_VAR 0 1
72458: PPUSH
72459: CALL_OW 247
72463: PUSH
72464: LD_INT 1
72466: EQUAL
72467: IFFALSE 72484
// factory := IsInUnit ( factory ) ;
72469: LD_ADDR_VAR 0 1
72473: PUSH
72474: LD_VAR 0 1
72478: PPUSH
72479: CALL_OW 310
72483: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72484: LD_VAR 0 1
72488: PPUSH
72489: CALL_OW 266
72493: PUSH
72494: LD_INT 3
72496: NONEQUAL
72497: IFFALSE 72501
// exit ;
72499: GO 72603
// if HexInfo ( x , y ) = factory then
72501: LD_VAR 0 2
72505: PPUSH
72506: LD_VAR 0 3
72510: PPUSH
72511: CALL_OW 428
72515: PUSH
72516: LD_VAR 0 1
72520: EQUAL
72521: IFFALSE 72548
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72523: LD_ADDR_EXP 100
72527: PUSH
72528: LD_EXP 100
72532: PPUSH
72533: LD_VAR 0 1
72537: PPUSH
72538: LD_INT 0
72540: PPUSH
72541: CALL_OW 1
72545: ST_TO_ADDR
72546: GO 72599
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72548: LD_ADDR_EXP 100
72552: PUSH
72553: LD_EXP 100
72557: PPUSH
72558: LD_VAR 0 1
72562: PPUSH
72563: LD_VAR 0 1
72567: PPUSH
72568: CALL_OW 255
72572: PUSH
72573: LD_VAR 0 1
72577: PUSH
72578: LD_VAR 0 2
72582: PUSH
72583: LD_VAR 0 3
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: LIST
72592: LIST
72593: PPUSH
72594: CALL_OW 1
72598: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72599: CALL 72608 0 0
// end ;
72603: LD_VAR 0 4
72607: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
72608: LD_INT 0
72610: PPUSH
72611: PPUSH
72612: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72613: LD_STRING resetFactoryWaypoint();
72615: PPUSH
72616: CALL_OW 559
// if factoryWaypoints then
72620: LD_EXP 100
72624: IFFALSE 72750
// begin list := PrepareArray ( factoryWaypoints ) ;
72626: LD_ADDR_VAR 0 3
72630: PUSH
72631: LD_EXP 100
72635: PPUSH
72636: CALL 56563 0 1
72640: ST_TO_ADDR
// for i := 1 to list do
72641: LD_ADDR_VAR 0 2
72645: PUSH
72646: DOUBLE
72647: LD_INT 1
72649: DEC
72650: ST_TO_ADDR
72651: LD_VAR 0 3
72655: PUSH
72656: FOR_TO
72657: IFFALSE 72748
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72659: LD_STRING setFactoryWaypointXY(
72661: PUSH
72662: LD_VAR 0 3
72666: PUSH
72667: LD_VAR 0 2
72671: ARRAY
72672: PUSH
72673: LD_INT 1
72675: ARRAY
72676: STR
72677: PUSH
72678: LD_STRING ,
72680: STR
72681: PUSH
72682: LD_VAR 0 3
72686: PUSH
72687: LD_VAR 0 2
72691: ARRAY
72692: PUSH
72693: LD_INT 2
72695: ARRAY
72696: STR
72697: PUSH
72698: LD_STRING ,
72700: STR
72701: PUSH
72702: LD_VAR 0 3
72706: PUSH
72707: LD_VAR 0 2
72711: ARRAY
72712: PUSH
72713: LD_INT 3
72715: ARRAY
72716: STR
72717: PUSH
72718: LD_STRING ,
72720: STR
72721: PUSH
72722: LD_VAR 0 3
72726: PUSH
72727: LD_VAR 0 2
72731: ARRAY
72732: PUSH
72733: LD_INT 4
72735: ARRAY
72736: STR
72737: PUSH
72738: LD_STRING )
72740: STR
72741: PPUSH
72742: CALL_OW 559
72746: GO 72656
72748: POP
72749: POP
// end ; end ;
72750: LD_VAR 0 1
72754: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
72755: LD_INT 0
72757: PPUSH
// if HexInfo ( x , y ) = warehouse then
72758: LD_VAR 0 2
72762: PPUSH
72763: LD_VAR 0 3
72767: PPUSH
72768: CALL_OW 428
72772: PUSH
72773: LD_VAR 0 1
72777: EQUAL
72778: IFFALSE 72805
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
72780: LD_ADDR_EXP 101
72784: PUSH
72785: LD_EXP 101
72789: PPUSH
72790: LD_VAR 0 1
72794: PPUSH
72795: LD_INT 0
72797: PPUSH
72798: CALL_OW 1
72802: ST_TO_ADDR
72803: GO 72856
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
72805: LD_ADDR_EXP 101
72809: PUSH
72810: LD_EXP 101
72814: PPUSH
72815: LD_VAR 0 1
72819: PPUSH
72820: LD_VAR 0 1
72824: PPUSH
72825: CALL_OW 255
72829: PUSH
72830: LD_VAR 0 1
72834: PUSH
72835: LD_VAR 0 2
72839: PUSH
72840: LD_VAR 0 3
72844: PUSH
72845: EMPTY
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: PPUSH
72851: CALL_OW 1
72855: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
72856: CALL 72865 0 0
// end ;
72860: LD_VAR 0 4
72864: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
72865: LD_INT 0
72867: PPUSH
72868: PPUSH
72869: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
72870: LD_STRING resetWarehouseGatheringPoints();
72872: PPUSH
72873: CALL_OW 559
// if warehouseGatheringPoints then
72877: LD_EXP 101
72881: IFFALSE 73007
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
72883: LD_ADDR_VAR 0 3
72887: PUSH
72888: LD_EXP 101
72892: PPUSH
72893: CALL 56563 0 1
72897: ST_TO_ADDR
// for i := 1 to list do
72898: LD_ADDR_VAR 0 2
72902: PUSH
72903: DOUBLE
72904: LD_INT 1
72906: DEC
72907: ST_TO_ADDR
72908: LD_VAR 0 3
72912: PUSH
72913: FOR_TO
72914: IFFALSE 73005
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
72916: LD_STRING setWarehouseGatheringPointXY(
72918: PUSH
72919: LD_VAR 0 3
72923: PUSH
72924: LD_VAR 0 2
72928: ARRAY
72929: PUSH
72930: LD_INT 1
72932: ARRAY
72933: STR
72934: PUSH
72935: LD_STRING ,
72937: STR
72938: PUSH
72939: LD_VAR 0 3
72943: PUSH
72944: LD_VAR 0 2
72948: ARRAY
72949: PUSH
72950: LD_INT 2
72952: ARRAY
72953: STR
72954: PUSH
72955: LD_STRING ,
72957: STR
72958: PUSH
72959: LD_VAR 0 3
72963: PUSH
72964: LD_VAR 0 2
72968: ARRAY
72969: PUSH
72970: LD_INT 3
72972: ARRAY
72973: STR
72974: PUSH
72975: LD_STRING ,
72977: STR
72978: PUSH
72979: LD_VAR 0 3
72983: PUSH
72984: LD_VAR 0 2
72988: ARRAY
72989: PUSH
72990: LD_INT 4
72992: ARRAY
72993: STR
72994: PUSH
72995: LD_STRING )
72997: STR
72998: PPUSH
72999: CALL_OW 559
73003: GO 72913
73005: POP
73006: POP
// end ; end ;
73007: LD_VAR 0 1
73011: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
73012: LD_EXP 101
73016: IFFALSE 73701
73018: GO 73020
73020: DISABLE
73021: LD_INT 0
73023: PPUSH
73024: PPUSH
73025: PPUSH
73026: PPUSH
73027: PPUSH
73028: PPUSH
73029: PPUSH
73030: PPUSH
73031: PPUSH
// begin enable ;
73032: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
73033: LD_ADDR_VAR 0 3
73037: PUSH
73038: LD_EXP 101
73042: PPUSH
73043: CALL 56563 0 1
73047: ST_TO_ADDR
// if not list then
73048: LD_VAR 0 3
73052: NOT
73053: IFFALSE 73057
// exit ;
73055: GO 73701
// for i := 1 to list do
73057: LD_ADDR_VAR 0 1
73061: PUSH
73062: DOUBLE
73063: LD_INT 1
73065: DEC
73066: ST_TO_ADDR
73067: LD_VAR 0 3
73071: PUSH
73072: FOR_TO
73073: IFFALSE 73699
// begin depot := list [ i ] [ 2 ] ;
73075: LD_ADDR_VAR 0 8
73079: PUSH
73080: LD_VAR 0 3
73084: PUSH
73085: LD_VAR 0 1
73089: ARRAY
73090: PUSH
73091: LD_INT 2
73093: ARRAY
73094: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
73095: LD_ADDR_VAR 0 5
73099: PUSH
73100: LD_VAR 0 3
73104: PUSH
73105: LD_VAR 0 1
73109: ARRAY
73110: PUSH
73111: LD_INT 1
73113: ARRAY
73114: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
73115: LD_VAR 0 8
73119: PPUSH
73120: CALL_OW 301
73124: PUSH
73125: LD_VAR 0 5
73129: PUSH
73130: LD_VAR 0 8
73134: PPUSH
73135: CALL_OW 255
73139: NONEQUAL
73140: OR
73141: IFFALSE 73170
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
73143: LD_ADDR_EXP 101
73147: PUSH
73148: LD_EXP 101
73152: PPUSH
73153: LD_VAR 0 8
73157: PPUSH
73158: LD_INT 0
73160: PPUSH
73161: CALL_OW 1
73165: ST_TO_ADDR
// exit ;
73166: POP
73167: POP
73168: GO 73701
// end ; x := list [ i ] [ 3 ] ;
73170: LD_ADDR_VAR 0 6
73174: PUSH
73175: LD_VAR 0 3
73179: PUSH
73180: LD_VAR 0 1
73184: ARRAY
73185: PUSH
73186: LD_INT 3
73188: ARRAY
73189: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
73190: LD_ADDR_VAR 0 7
73194: PUSH
73195: LD_VAR 0 3
73199: PUSH
73200: LD_VAR 0 1
73204: ARRAY
73205: PUSH
73206: LD_INT 4
73208: ARRAY
73209: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
73210: LD_ADDR_VAR 0 9
73214: PUSH
73215: LD_VAR 0 6
73219: PPUSH
73220: LD_VAR 0 7
73224: PPUSH
73225: LD_INT 16
73227: PPUSH
73228: CALL 55147 0 3
73232: ST_TO_ADDR
// if not cratesNearbyPoint then
73233: LD_VAR 0 9
73237: NOT
73238: IFFALSE 73244
// exit ;
73240: POP
73241: POP
73242: GO 73701
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
73244: LD_ADDR_VAR 0 4
73248: PUSH
73249: LD_INT 22
73251: PUSH
73252: LD_VAR 0 5
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 3
73263: PUSH
73264: LD_INT 60
73266: PUSH
73267: EMPTY
73268: LIST
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 91
73276: PUSH
73277: LD_VAR 0 8
73281: PUSH
73282: LD_INT 6
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 2
73292: PUSH
73293: LD_INT 25
73295: PUSH
73296: LD_INT 2
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 25
73305: PUSH
73306: LD_INT 16
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: LIST
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: PPUSH
73324: CALL_OW 69
73328: PUSH
73329: LD_VAR 0 8
73333: PPUSH
73334: CALL_OW 313
73338: PPUSH
73339: LD_INT 3
73341: PUSH
73342: LD_INT 60
73344: PUSH
73345: EMPTY
73346: LIST
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: PUSH
73352: LD_INT 2
73354: PUSH
73355: LD_INT 25
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 25
73367: PUSH
73368: LD_INT 16
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: LIST
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PPUSH
73384: CALL_OW 72
73388: UNION
73389: ST_TO_ADDR
// if tmp then
73390: LD_VAR 0 4
73394: IFFALSE 73474
// begin tmp := ShrinkArray ( tmp , 3 ) ;
73396: LD_ADDR_VAR 0 4
73400: PUSH
73401: LD_VAR 0 4
73405: PPUSH
73406: LD_INT 3
73408: PPUSH
73409: CALL 53116 0 2
73413: ST_TO_ADDR
// for j in tmp do
73414: LD_ADDR_VAR 0 2
73418: PUSH
73419: LD_VAR 0 4
73423: PUSH
73424: FOR_IN
73425: IFFALSE 73468
// begin if IsInUnit ( j ) then
73427: LD_VAR 0 2
73431: PPUSH
73432: CALL_OW 310
73436: IFFALSE 73447
// ComExit ( j ) ;
73438: LD_VAR 0 2
73442: PPUSH
73443: CALL 53199 0 1
// AddComCollect ( j , x , y ) ;
73447: LD_VAR 0 2
73451: PPUSH
73452: LD_VAR 0 6
73456: PPUSH
73457: LD_VAR 0 7
73461: PPUSH
73462: CALL_OW 177
// end ;
73466: GO 73424
73468: POP
73469: POP
// exit ;
73470: POP
73471: POP
73472: GO 73701
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
73474: LD_ADDR_VAR 0 4
73478: PUSH
73479: LD_INT 22
73481: PUSH
73482: LD_VAR 0 5
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 91
73493: PUSH
73494: LD_VAR 0 8
73498: PUSH
73499: LD_INT 8
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: LIST
73506: PUSH
73507: LD_INT 2
73509: PUSH
73510: LD_INT 34
73512: PUSH
73513: LD_INT 12
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 34
73522: PUSH
73523: LD_INT 51
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 34
73532: PUSH
73533: LD_INT 32
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: PUSH
73540: LD_INT 34
73542: PUSH
73543: LD_INT 89
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: LIST
73561: PPUSH
73562: CALL_OW 69
73566: ST_TO_ADDR
// if tmp then
73567: LD_VAR 0 4
73571: IFFALSE 73697
// begin for j in tmp do
73573: LD_ADDR_VAR 0 2
73577: PUSH
73578: LD_VAR 0 4
73582: PUSH
73583: FOR_IN
73584: IFFALSE 73695
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
73586: LD_VAR 0 2
73590: PPUSH
73591: CALL_OW 262
73595: PUSH
73596: LD_INT 3
73598: EQUAL
73599: PUSH
73600: LD_VAR 0 2
73604: PPUSH
73605: CALL_OW 261
73609: PUSH
73610: LD_INT 20
73612: GREATER
73613: OR
73614: PUSH
73615: LD_VAR 0 2
73619: PPUSH
73620: CALL_OW 314
73624: NOT
73625: AND
73626: PUSH
73627: LD_VAR 0 2
73631: PPUSH
73632: CALL_OW 263
73636: PUSH
73637: LD_INT 1
73639: NONEQUAL
73640: PUSH
73641: LD_VAR 0 2
73645: PPUSH
73646: CALL_OW 311
73650: OR
73651: AND
73652: IFFALSE 73693
// begin ComCollect ( j , x , y ) ;
73654: LD_VAR 0 2
73658: PPUSH
73659: LD_VAR 0 6
73663: PPUSH
73664: LD_VAR 0 7
73668: PPUSH
73669: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
73673: LD_VAR 0 2
73677: PPUSH
73678: LD_VAR 0 8
73682: PPUSH
73683: CALL_OW 172
// exit ;
73687: POP
73688: POP
73689: POP
73690: POP
73691: GO 73701
// end ;
73693: GO 73583
73695: POP
73696: POP
// end ; end ;
73697: GO 73072
73699: POP
73700: POP
// end ; end_of_file
73701: PPOPN 9
73703: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
73704: LD_INT 0
73706: PPUSH
73707: PPUSH
73708: PPUSH
73709: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
73710: LD_VAR 0 1
73714: PPUSH
73715: CALL_OW 264
73719: PUSH
73720: LD_INT 91
73722: EQUAL
73723: IFFALSE 73795
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
73725: LD_INT 68
73727: PPUSH
73728: LD_VAR 0 1
73732: PPUSH
73733: CALL_OW 255
73737: PPUSH
73738: CALL_OW 321
73742: PUSH
73743: LD_INT 2
73745: EQUAL
73746: IFFALSE 73758
// eff := 70 else
73748: LD_ADDR_VAR 0 4
73752: PUSH
73753: LD_INT 70
73755: ST_TO_ADDR
73756: GO 73766
// eff := 30 ;
73758: LD_ADDR_VAR 0 4
73762: PUSH
73763: LD_INT 30
73765: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
73766: LD_VAR 0 1
73770: PPUSH
73771: CALL_OW 250
73775: PPUSH
73776: LD_VAR 0 1
73780: PPUSH
73781: CALL_OW 251
73785: PPUSH
73786: LD_VAR 0 4
73790: PPUSH
73791: CALL_OW 495
// end ; end ;
73795: LD_VAR 0 2
73799: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
73800: LD_INT 0
73802: PPUSH
// end ;
73803: LD_VAR 0 4
73807: RET
// export function SOS_Command ( cmd ) ; begin
73808: LD_INT 0
73810: PPUSH
// end ;
73811: LD_VAR 0 2
73815: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
73816: LD_INT 0
73818: PPUSH
// end ;
73819: LD_VAR 0 6
73823: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
73824: LD_INT 0
73826: PPUSH
73827: PPUSH
// if not vehicle or not factory then
73828: LD_VAR 0 1
73832: NOT
73833: PUSH
73834: LD_VAR 0 2
73838: NOT
73839: OR
73840: IFFALSE 73844
// exit ;
73842: GO 74087
// if factoryWaypoints >= factory then
73844: LD_EXP 100
73848: PUSH
73849: LD_VAR 0 2
73853: GREATEREQUAL
73854: IFFALSE 74087
// if factoryWaypoints [ factory ] then
73856: LD_EXP 100
73860: PUSH
73861: LD_VAR 0 2
73865: ARRAY
73866: IFFALSE 74087
// begin if GetControl ( vehicle ) = control_manual then
73868: LD_VAR 0 1
73872: PPUSH
73873: CALL_OW 263
73877: PUSH
73878: LD_INT 1
73880: EQUAL
73881: IFFALSE 73974
// begin driver := IsDrivenBy ( vehicle ) ;
73883: LD_ADDR_VAR 0 4
73887: PUSH
73888: LD_VAR 0 1
73892: PPUSH
73893: CALL_OW 311
73897: ST_TO_ADDR
// if not HasTask ( driver ) then
73898: LD_VAR 0 4
73902: PPUSH
73903: CALL_OW 314
73907: NOT
73908: IFFALSE 73972
// begin ComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
73910: LD_VAR 0 4
73914: PPUSH
73915: LD_EXP 100
73919: PUSH
73920: LD_VAR 0 2
73924: ARRAY
73925: PUSH
73926: LD_INT 3
73928: ARRAY
73929: PPUSH
73930: LD_EXP 100
73934: PUSH
73935: LD_VAR 0 2
73939: ARRAY
73940: PUSH
73941: LD_INT 4
73943: ARRAY
73944: PPUSH
73945: CALL_OW 111
// AddComExitVehicle ( driver ) ;
73949: LD_VAR 0 4
73953: PPUSH
73954: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
73958: LD_VAR 0 4
73962: PPUSH
73963: LD_VAR 0 2
73967: PPUSH
73968: CALL_OW 180
// end ; end else
73972: GO 74087
// if GetControl ( vehicle ) = control_remote then
73974: LD_VAR 0 1
73978: PPUSH
73979: CALL_OW 263
73983: PUSH
73984: LD_INT 2
73986: EQUAL
73987: IFFALSE 74048
// begin wait ( 0 0$2 ) ;
73989: LD_INT 70
73991: PPUSH
73992: CALL_OW 67
// if Connect ( vehicle ) then
73996: LD_VAR 0 1
74000: PPUSH
74001: CALL 23418 0 1
74005: IFFALSE 74046
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74007: LD_VAR 0 1
74011: PPUSH
74012: LD_EXP 100
74016: PUSH
74017: LD_VAR 0 2
74021: ARRAY
74022: PUSH
74023: LD_INT 3
74025: ARRAY
74026: PPUSH
74027: LD_EXP 100
74031: PUSH
74032: LD_VAR 0 2
74036: ARRAY
74037: PUSH
74038: LD_INT 4
74040: ARRAY
74041: PPUSH
74042: CALL_OW 171
// end else
74046: GO 74087
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
74048: LD_VAR 0 1
74052: PPUSH
74053: LD_EXP 100
74057: PUSH
74058: LD_VAR 0 2
74062: ARRAY
74063: PUSH
74064: LD_INT 3
74066: ARRAY
74067: PPUSH
74068: LD_EXP 100
74072: PUSH
74073: LD_VAR 0 2
74077: ARRAY
74078: PUSH
74079: LD_INT 4
74081: ARRAY
74082: PPUSH
74083: CALL_OW 171
// end ; end ;
74087: LD_VAR 0 3
74091: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
74092: LD_INT 0
74094: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
74095: LD_VAR 0 1
74099: PUSH
74100: LD_INT 250
74102: EQUAL
74103: PUSH
74104: LD_VAR 0 2
74108: PPUSH
74109: CALL_OW 264
74113: PUSH
74114: LD_INT 81
74116: EQUAL
74117: AND
74118: IFFALSE 74139
// MinerPlaceMine ( unit , x , y ) ;
74120: LD_VAR 0 2
74124: PPUSH
74125: LD_VAR 0 4
74129: PPUSH
74130: LD_VAR 0 5
74134: PPUSH
74135: CALL 77129 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
74139: LD_VAR 0 1
74143: PUSH
74144: LD_INT 251
74146: EQUAL
74147: PUSH
74148: LD_VAR 0 2
74152: PPUSH
74153: CALL_OW 264
74157: PUSH
74158: LD_INT 81
74160: EQUAL
74161: AND
74162: IFFALSE 74183
// MinerDetonateMine ( unit , x , y ) ;
74164: LD_VAR 0 2
74168: PPUSH
74169: LD_VAR 0 4
74173: PPUSH
74174: LD_VAR 0 5
74178: PPUSH
74179: CALL 77404 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
74183: LD_VAR 0 1
74187: PUSH
74188: LD_INT 252
74190: EQUAL
74191: PUSH
74192: LD_VAR 0 2
74196: PPUSH
74197: CALL_OW 264
74201: PUSH
74202: LD_INT 81
74204: EQUAL
74205: AND
74206: IFFALSE 74227
// MinerCreateMinefield ( unit , x , y ) ;
74208: LD_VAR 0 2
74212: PPUSH
74213: LD_VAR 0 4
74217: PPUSH
74218: LD_VAR 0 5
74222: PPUSH
74223: CALL 77821 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
74227: LD_VAR 0 1
74231: PUSH
74232: LD_INT 253
74234: EQUAL
74235: PUSH
74236: LD_VAR 0 2
74240: PPUSH
74241: CALL_OW 257
74245: PUSH
74246: LD_INT 5
74248: EQUAL
74249: AND
74250: IFFALSE 74271
// ComBinocular ( unit , x , y ) ;
74252: LD_VAR 0 2
74256: PPUSH
74257: LD_VAR 0 4
74261: PPUSH
74262: LD_VAR 0 5
74266: PPUSH
74267: CALL 78190 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
74271: LD_VAR 0 1
74275: PUSH
74276: LD_INT 254
74278: EQUAL
74279: PUSH
74280: LD_VAR 0 2
74284: PPUSH
74285: CALL_OW 264
74289: PUSH
74290: LD_INT 99
74292: EQUAL
74293: AND
74294: PUSH
74295: LD_VAR 0 3
74299: PPUSH
74300: CALL_OW 263
74304: PUSH
74305: LD_INT 3
74307: EQUAL
74308: AND
74309: IFFALSE 74325
// HackDestroyVehicle ( unit , selectedUnit ) ;
74311: LD_VAR 0 2
74315: PPUSH
74316: LD_VAR 0 3
74320: PPUSH
74321: CALL 76493 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
74325: LD_VAR 0 1
74329: PUSH
74330: LD_INT 255
74332: EQUAL
74333: PUSH
74334: LD_VAR 0 2
74338: PPUSH
74339: CALL_OW 264
74343: PUSH
74344: LD_INT 14
74346: PUSH
74347: LD_INT 53
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: IN
74354: AND
74355: PUSH
74356: LD_VAR 0 4
74360: PPUSH
74361: LD_VAR 0 5
74365: PPUSH
74366: CALL_OW 488
74370: AND
74371: IFFALSE 74395
// CutTreeXYR ( unit , x , y , 12 ) ;
74373: LD_VAR 0 2
74377: PPUSH
74378: LD_VAR 0 4
74382: PPUSH
74383: LD_VAR 0 5
74387: PPUSH
74388: LD_INT 12
74390: PPUSH
74391: CALL 74490 0 4
// if cmd = 256 then
74395: LD_VAR 0 1
74399: PUSH
74400: LD_INT 256
74402: EQUAL
74403: IFFALSE 74424
// SetFactoryWaypoint ( unit , x , y ) ;
74405: LD_VAR 0 2
74409: PPUSH
74410: LD_VAR 0 4
74414: PPUSH
74415: LD_VAR 0 5
74419: PPUSH
74420: CALL 72393 0 3
// if cmd = 257 then
74424: LD_VAR 0 1
74428: PUSH
74429: LD_INT 257
74431: EQUAL
74432: IFFALSE 74453
// SetWarehouseGatheringPoint ( unit , x , y ) ;
74434: LD_VAR 0 2
74438: PPUSH
74439: LD_VAR 0 4
74443: PPUSH
74444: LD_VAR 0 5
74448: PPUSH
74449: CALL 72755 0 3
// if cmd = 258 then
74453: LD_VAR 0 1
74457: PUSH
74458: LD_INT 258
74460: EQUAL
74461: IFFALSE 74485
// BurnTreeXYR ( unit , x , y , 8 ) ;
74463: LD_VAR 0 2
74467: PPUSH
74468: LD_VAR 0 4
74472: PPUSH
74473: LD_VAR 0 5
74477: PPUSH
74478: LD_INT 8
74480: PPUSH
74481: CALL 74884 0 4
// end ;
74485: LD_VAR 0 6
74489: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
74490: LD_INT 0
74492: PPUSH
74493: PPUSH
74494: PPUSH
74495: PPUSH
74496: PPUSH
74497: PPUSH
74498: PPUSH
74499: PPUSH
74500: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
74501: LD_VAR 0 1
74505: PPUSH
74506: CALL_OW 302
74510: NOT
74511: PUSH
74512: LD_VAR 0 2
74516: PPUSH
74517: LD_VAR 0 3
74521: PPUSH
74522: CALL_OW 488
74526: NOT
74527: OR
74528: PUSH
74529: LD_VAR 0 4
74533: NOT
74534: OR
74535: IFFALSE 74539
// exit ;
74537: GO 74879
// list := [ ] ;
74539: LD_ADDR_VAR 0 13
74543: PUSH
74544: EMPTY
74545: ST_TO_ADDR
// if x - r < 0 then
74546: LD_VAR 0 2
74550: PUSH
74551: LD_VAR 0 4
74555: MINUS
74556: PUSH
74557: LD_INT 0
74559: LESS
74560: IFFALSE 74572
// min_x := 0 else
74562: LD_ADDR_VAR 0 7
74566: PUSH
74567: LD_INT 0
74569: ST_TO_ADDR
74570: GO 74588
// min_x := x - r ;
74572: LD_ADDR_VAR 0 7
74576: PUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_VAR 0 4
74586: MINUS
74587: ST_TO_ADDR
// if y - r < 0 then
74588: LD_VAR 0 3
74592: PUSH
74593: LD_VAR 0 4
74597: MINUS
74598: PUSH
74599: LD_INT 0
74601: LESS
74602: IFFALSE 74614
// min_y := 0 else
74604: LD_ADDR_VAR 0 8
74608: PUSH
74609: LD_INT 0
74611: ST_TO_ADDR
74612: GO 74630
// min_y := y - r ;
74614: LD_ADDR_VAR 0 8
74618: PUSH
74619: LD_VAR 0 3
74623: PUSH
74624: LD_VAR 0 4
74628: MINUS
74629: ST_TO_ADDR
// max_x := x + r ;
74630: LD_ADDR_VAR 0 9
74634: PUSH
74635: LD_VAR 0 2
74639: PUSH
74640: LD_VAR 0 4
74644: PLUS
74645: ST_TO_ADDR
// max_y := y + r ;
74646: LD_ADDR_VAR 0 10
74650: PUSH
74651: LD_VAR 0 3
74655: PUSH
74656: LD_VAR 0 4
74660: PLUS
74661: ST_TO_ADDR
// for _x = min_x to max_x do
74662: LD_ADDR_VAR 0 11
74666: PUSH
74667: DOUBLE
74668: LD_VAR 0 7
74672: DEC
74673: ST_TO_ADDR
74674: LD_VAR 0 9
74678: PUSH
74679: FOR_TO
74680: IFFALSE 74797
// for _y = min_y to max_y do
74682: LD_ADDR_VAR 0 12
74686: PUSH
74687: DOUBLE
74688: LD_VAR 0 8
74692: DEC
74693: ST_TO_ADDR
74694: LD_VAR 0 10
74698: PUSH
74699: FOR_TO
74700: IFFALSE 74793
// begin if not ValidHex ( _x , _y ) then
74702: LD_VAR 0 11
74706: PPUSH
74707: LD_VAR 0 12
74711: PPUSH
74712: CALL_OW 488
74716: NOT
74717: IFFALSE 74721
// continue ;
74719: GO 74699
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
74721: LD_VAR 0 11
74725: PPUSH
74726: LD_VAR 0 12
74730: PPUSH
74731: CALL_OW 351
74735: PUSH
74736: LD_VAR 0 11
74740: PPUSH
74741: LD_VAR 0 12
74745: PPUSH
74746: CALL_OW 554
74750: AND
74751: IFFALSE 74791
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
74753: LD_ADDR_VAR 0 13
74757: PUSH
74758: LD_VAR 0 13
74762: PPUSH
74763: LD_VAR 0 13
74767: PUSH
74768: LD_INT 1
74770: PLUS
74771: PPUSH
74772: LD_VAR 0 11
74776: PUSH
74777: LD_VAR 0 12
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PPUSH
74786: CALL_OW 2
74790: ST_TO_ADDR
// end ;
74791: GO 74699
74793: POP
74794: POP
74795: GO 74679
74797: POP
74798: POP
// if not list then
74799: LD_VAR 0 13
74803: NOT
74804: IFFALSE 74808
// exit ;
74806: GO 74879
// for i in list do
74808: LD_ADDR_VAR 0 6
74812: PUSH
74813: LD_VAR 0 13
74817: PUSH
74818: FOR_IN
74819: IFFALSE 74877
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
74821: LD_VAR 0 1
74825: PPUSH
74826: LD_STRING M
74828: PUSH
74829: LD_VAR 0 6
74833: PUSH
74834: LD_INT 1
74836: ARRAY
74837: PUSH
74838: LD_VAR 0 6
74842: PUSH
74843: LD_INT 2
74845: ARRAY
74846: PUSH
74847: LD_INT 0
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: LD_INT 0
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: EMPTY
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: PUSH
74868: EMPTY
74869: LIST
74870: PPUSH
74871: CALL_OW 447
74875: GO 74818
74877: POP
74878: POP
// end ;
74879: LD_VAR 0 5
74883: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
74884: LD_INT 0
74886: PPUSH
74887: PPUSH
74888: PPUSH
74889: PPUSH
74890: PPUSH
74891: PPUSH
74892: PPUSH
74893: PPUSH
74894: PPUSH
74895: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
74896: LD_VAR 0 1
74900: PPUSH
74901: CALL_OW 302
74905: NOT
74906: PUSH
74907: LD_VAR 0 2
74911: PPUSH
74912: LD_VAR 0 3
74916: PPUSH
74917: CALL_OW 488
74921: NOT
74922: OR
74923: PUSH
74924: LD_VAR 0 4
74928: NOT
74929: OR
74930: IFFALSE 74934
// exit ;
74932: GO 75447
// list := [ ] ;
74934: LD_ADDR_VAR 0 13
74938: PUSH
74939: EMPTY
74940: ST_TO_ADDR
// if x - r < 0 then
74941: LD_VAR 0 2
74945: PUSH
74946: LD_VAR 0 4
74950: MINUS
74951: PUSH
74952: LD_INT 0
74954: LESS
74955: IFFALSE 74967
// min_x := 0 else
74957: LD_ADDR_VAR 0 7
74961: PUSH
74962: LD_INT 0
74964: ST_TO_ADDR
74965: GO 74983
// min_x := x - r ;
74967: LD_ADDR_VAR 0 7
74971: PUSH
74972: LD_VAR 0 2
74976: PUSH
74977: LD_VAR 0 4
74981: MINUS
74982: ST_TO_ADDR
// if y - r < 0 then
74983: LD_VAR 0 3
74987: PUSH
74988: LD_VAR 0 4
74992: MINUS
74993: PUSH
74994: LD_INT 0
74996: LESS
74997: IFFALSE 75009
// min_y := 0 else
74999: LD_ADDR_VAR 0 8
75003: PUSH
75004: LD_INT 0
75006: ST_TO_ADDR
75007: GO 75025
// min_y := y - r ;
75009: LD_ADDR_VAR 0 8
75013: PUSH
75014: LD_VAR 0 3
75018: PUSH
75019: LD_VAR 0 4
75023: MINUS
75024: ST_TO_ADDR
// max_x := x + r ;
75025: LD_ADDR_VAR 0 9
75029: PUSH
75030: LD_VAR 0 2
75034: PUSH
75035: LD_VAR 0 4
75039: PLUS
75040: ST_TO_ADDR
// max_y := y + r ;
75041: LD_ADDR_VAR 0 10
75045: PUSH
75046: LD_VAR 0 3
75050: PUSH
75051: LD_VAR 0 4
75055: PLUS
75056: ST_TO_ADDR
// for _x = min_x to max_x do
75057: LD_ADDR_VAR 0 11
75061: PUSH
75062: DOUBLE
75063: LD_VAR 0 7
75067: DEC
75068: ST_TO_ADDR
75069: LD_VAR 0 9
75073: PUSH
75074: FOR_TO
75075: IFFALSE 75192
// for _y = min_y to max_y do
75077: LD_ADDR_VAR 0 12
75081: PUSH
75082: DOUBLE
75083: LD_VAR 0 8
75087: DEC
75088: ST_TO_ADDR
75089: LD_VAR 0 10
75093: PUSH
75094: FOR_TO
75095: IFFALSE 75188
// begin if not ValidHex ( _x , _y ) then
75097: LD_VAR 0 11
75101: PPUSH
75102: LD_VAR 0 12
75106: PPUSH
75107: CALL_OW 488
75111: NOT
75112: IFFALSE 75116
// continue ;
75114: GO 75094
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
75116: LD_VAR 0 11
75120: PPUSH
75121: LD_VAR 0 12
75125: PPUSH
75126: CALL_OW 351
75130: PUSH
75131: LD_VAR 0 11
75135: PPUSH
75136: LD_VAR 0 12
75140: PPUSH
75141: CALL_OW 554
75145: AND
75146: IFFALSE 75186
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
75148: LD_ADDR_VAR 0 13
75152: PUSH
75153: LD_VAR 0 13
75157: PPUSH
75158: LD_VAR 0 13
75162: PUSH
75163: LD_INT 1
75165: PLUS
75166: PPUSH
75167: LD_VAR 0 11
75171: PUSH
75172: LD_VAR 0 12
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PPUSH
75181: CALL_OW 2
75185: ST_TO_ADDR
// end ;
75186: GO 75094
75188: POP
75189: POP
75190: GO 75074
75192: POP
75193: POP
// if not list then
75194: LD_VAR 0 13
75198: NOT
75199: IFFALSE 75203
// exit ;
75201: GO 75447
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
75203: LD_ADDR_VAR 0 13
75207: PUSH
75208: LD_VAR 0 1
75212: PPUSH
75213: LD_VAR 0 13
75217: PPUSH
75218: LD_INT 1
75220: PPUSH
75221: LD_INT 1
75223: PPUSH
75224: CALL 20560 0 4
75228: ST_TO_ADDR
// ComStop ( flame ) ;
75229: LD_VAR 0 1
75233: PPUSH
75234: CALL_OW 141
// for i in list do
75238: LD_ADDR_VAR 0 6
75242: PUSH
75243: LD_VAR 0 13
75247: PUSH
75248: FOR_IN
75249: IFFALSE 75280
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
75251: LD_VAR 0 1
75255: PPUSH
75256: LD_VAR 0 6
75260: PUSH
75261: LD_INT 1
75263: ARRAY
75264: PPUSH
75265: LD_VAR 0 6
75269: PUSH
75270: LD_INT 2
75272: ARRAY
75273: PPUSH
75274: CALL_OW 176
75278: GO 75248
75280: POP
75281: POP
// repeat wait ( 0 0$1 ) ;
75282: LD_INT 35
75284: PPUSH
75285: CALL_OW 67
// task := GetTaskList ( flame ) ;
75289: LD_ADDR_VAR 0 14
75293: PUSH
75294: LD_VAR 0 1
75298: PPUSH
75299: CALL_OW 437
75303: ST_TO_ADDR
// if not task then
75304: LD_VAR 0 14
75308: NOT
75309: IFFALSE 75313
// exit ;
75311: GO 75447
// if task [ 1 ] [ 1 ] <> | then
75313: LD_VAR 0 14
75317: PUSH
75318: LD_INT 1
75320: ARRAY
75321: PUSH
75322: LD_INT 1
75324: ARRAY
75325: PUSH
75326: LD_STRING |
75328: NONEQUAL
75329: IFFALSE 75333
// exit ;
75331: GO 75447
// _x := task [ 1 ] [ 2 ] ;
75333: LD_ADDR_VAR 0 11
75337: PUSH
75338: LD_VAR 0 14
75342: PUSH
75343: LD_INT 1
75345: ARRAY
75346: PUSH
75347: LD_INT 2
75349: ARRAY
75350: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
75351: LD_ADDR_VAR 0 12
75355: PUSH
75356: LD_VAR 0 14
75360: PUSH
75361: LD_INT 1
75363: ARRAY
75364: PUSH
75365: LD_INT 3
75367: ARRAY
75368: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
75369: LD_VAR 0 11
75373: PPUSH
75374: LD_VAR 0 12
75378: PPUSH
75379: CALL_OW 351
75383: NOT
75384: PUSH
75385: LD_VAR 0 11
75389: PPUSH
75390: LD_VAR 0 12
75394: PPUSH
75395: CALL_OW 554
75399: NOT
75400: OR
75401: IFFALSE 75435
// begin task := Delete ( task , 1 ) ;
75403: LD_ADDR_VAR 0 14
75407: PUSH
75408: LD_VAR 0 14
75412: PPUSH
75413: LD_INT 1
75415: PPUSH
75416: CALL_OW 3
75420: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
75421: LD_VAR 0 1
75425: PPUSH
75426: LD_VAR 0 14
75430: PPUSH
75431: CALL_OW 446
// end ; until not HasTask ( flame ) ;
75435: LD_VAR 0 1
75439: PPUSH
75440: CALL_OW 314
75444: NOT
75445: IFFALSE 75282
// end ;
75447: LD_VAR 0 5
75451: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
75452: LD_EXP 103
75456: NOT
75457: IFFALSE 75507
75459: GO 75461
75461: DISABLE
// begin initHack := true ;
75462: LD_ADDR_EXP 103
75466: PUSH
75467: LD_INT 1
75469: ST_TO_ADDR
// hackTanks := [ ] ;
75470: LD_ADDR_EXP 104
75474: PUSH
75475: EMPTY
75476: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
75477: LD_ADDR_EXP 105
75481: PUSH
75482: EMPTY
75483: ST_TO_ADDR
// hackLimit := 3 ;
75484: LD_ADDR_EXP 106
75488: PUSH
75489: LD_INT 3
75491: ST_TO_ADDR
// hackDist := 12 ;
75492: LD_ADDR_EXP 107
75496: PUSH
75497: LD_INT 12
75499: ST_TO_ADDR
// hackCounter := [ ] ;
75500: LD_ADDR_EXP 108
75504: PUSH
75505: EMPTY
75506: ST_TO_ADDR
// end ;
75507: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
75508: LD_EXP 103
75512: PUSH
75513: LD_INT 34
75515: PUSH
75516: LD_INT 99
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PPUSH
75523: CALL_OW 69
75527: AND
75528: IFFALSE 75781
75530: GO 75532
75532: DISABLE
75533: LD_INT 0
75535: PPUSH
75536: PPUSH
// begin enable ;
75537: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
75538: LD_ADDR_VAR 0 1
75542: PUSH
75543: LD_INT 34
75545: PUSH
75546: LD_INT 99
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PPUSH
75553: CALL_OW 69
75557: PUSH
75558: FOR_IN
75559: IFFALSE 75779
// begin if not i in hackTanks then
75561: LD_VAR 0 1
75565: PUSH
75566: LD_EXP 104
75570: IN
75571: NOT
75572: IFFALSE 75655
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
75574: LD_ADDR_EXP 104
75578: PUSH
75579: LD_EXP 104
75583: PPUSH
75584: LD_EXP 104
75588: PUSH
75589: LD_INT 1
75591: PLUS
75592: PPUSH
75593: LD_VAR 0 1
75597: PPUSH
75598: CALL_OW 1
75602: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
75603: LD_ADDR_EXP 105
75607: PUSH
75608: LD_EXP 105
75612: PPUSH
75613: LD_EXP 105
75617: PUSH
75618: LD_INT 1
75620: PLUS
75621: PPUSH
75622: EMPTY
75623: PPUSH
75624: CALL_OW 1
75628: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
75629: LD_ADDR_EXP 108
75633: PUSH
75634: LD_EXP 108
75638: PPUSH
75639: LD_EXP 108
75643: PUSH
75644: LD_INT 1
75646: PLUS
75647: PPUSH
75648: EMPTY
75649: PPUSH
75650: CALL_OW 1
75654: ST_TO_ADDR
// end ; if not IsOk ( i ) then
75655: LD_VAR 0 1
75659: PPUSH
75660: CALL_OW 302
75664: NOT
75665: IFFALSE 75678
// begin HackUnlinkAll ( i ) ;
75667: LD_VAR 0 1
75671: PPUSH
75672: CALL 75784 0 1
// continue ;
75676: GO 75558
// end ; HackCheckCapturedStatus ( i ) ;
75678: LD_VAR 0 1
75682: PPUSH
75683: CALL 76227 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
75687: LD_ADDR_VAR 0 2
75691: PUSH
75692: LD_INT 81
75694: PUSH
75695: LD_VAR 0 1
75699: PPUSH
75700: CALL_OW 255
75704: PUSH
75705: EMPTY
75706: LIST
75707: LIST
75708: PUSH
75709: LD_INT 33
75711: PUSH
75712: LD_INT 3
75714: PUSH
75715: EMPTY
75716: LIST
75717: LIST
75718: PUSH
75719: LD_INT 91
75721: PUSH
75722: LD_VAR 0 1
75726: PUSH
75727: LD_EXP 107
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 50
75739: PUSH
75740: EMPTY
75741: LIST
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: PPUSH
75749: CALL_OW 69
75753: ST_TO_ADDR
// if not tmp then
75754: LD_VAR 0 2
75758: NOT
75759: IFFALSE 75763
// continue ;
75761: GO 75558
// HackLink ( i , tmp ) ;
75763: LD_VAR 0 1
75767: PPUSH
75768: LD_VAR 0 2
75772: PPUSH
75773: CALL 75920 0 2
// end ;
75777: GO 75558
75779: POP
75780: POP
// end ;
75781: PPOPN 2
75783: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
75784: LD_INT 0
75786: PPUSH
75787: PPUSH
75788: PPUSH
// if not hack in hackTanks then
75789: LD_VAR 0 1
75793: PUSH
75794: LD_EXP 104
75798: IN
75799: NOT
75800: IFFALSE 75804
// exit ;
75802: GO 75915
// index := GetElementIndex ( hackTanks , hack ) ;
75804: LD_ADDR_VAR 0 4
75808: PUSH
75809: LD_EXP 104
75813: PPUSH
75814: LD_VAR 0 1
75818: PPUSH
75819: CALL 19857 0 2
75823: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
75824: LD_EXP 105
75828: PUSH
75829: LD_VAR 0 4
75833: ARRAY
75834: IFFALSE 75915
// begin for i in hackTanksCaptured [ index ] do
75836: LD_ADDR_VAR 0 3
75840: PUSH
75841: LD_EXP 105
75845: PUSH
75846: LD_VAR 0 4
75850: ARRAY
75851: PUSH
75852: FOR_IN
75853: IFFALSE 75879
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
75855: LD_VAR 0 3
75859: PUSH
75860: LD_INT 1
75862: ARRAY
75863: PPUSH
75864: LD_VAR 0 3
75868: PUSH
75869: LD_INT 2
75871: ARRAY
75872: PPUSH
75873: CALL_OW 235
75877: GO 75852
75879: POP
75880: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
75881: LD_ADDR_EXP 105
75885: PUSH
75886: LD_EXP 105
75890: PPUSH
75891: LD_VAR 0 4
75895: PPUSH
75896: EMPTY
75897: PPUSH
75898: CALL_OW 1
75902: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
75903: LD_VAR 0 1
75907: PPUSH
75908: LD_INT 0
75910: PPUSH
75911: CALL_OW 505
// end ; end ;
75915: LD_VAR 0 2
75919: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
75920: LD_INT 0
75922: PPUSH
75923: PPUSH
75924: PPUSH
// if not hack in hackTanks or not vehicles then
75925: LD_VAR 0 1
75929: PUSH
75930: LD_EXP 104
75934: IN
75935: NOT
75936: PUSH
75937: LD_VAR 0 2
75941: NOT
75942: OR
75943: IFFALSE 75947
// exit ;
75945: GO 76222
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
75947: LD_ADDR_VAR 0 2
75951: PUSH
75952: LD_VAR 0 1
75956: PPUSH
75957: LD_VAR 0 2
75961: PPUSH
75962: LD_INT 1
75964: PPUSH
75965: LD_INT 1
75967: PPUSH
75968: CALL 20507 0 4
75972: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
75973: LD_ADDR_VAR 0 5
75977: PUSH
75978: LD_EXP 104
75982: PPUSH
75983: LD_VAR 0 1
75987: PPUSH
75988: CALL 19857 0 2
75992: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
75993: LD_EXP 105
75997: PUSH
75998: LD_VAR 0 5
76002: ARRAY
76003: PUSH
76004: LD_EXP 106
76008: LESS
76009: IFFALSE 76198
// begin for i := 1 to vehicles do
76011: LD_ADDR_VAR 0 4
76015: PUSH
76016: DOUBLE
76017: LD_INT 1
76019: DEC
76020: ST_TO_ADDR
76021: LD_VAR 0 2
76025: PUSH
76026: FOR_TO
76027: IFFALSE 76196
// begin if hackTanksCaptured [ index ] = hackLimit then
76029: LD_EXP 105
76033: PUSH
76034: LD_VAR 0 5
76038: ARRAY
76039: PUSH
76040: LD_EXP 106
76044: EQUAL
76045: IFFALSE 76049
// break ;
76047: GO 76196
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
76049: LD_ADDR_EXP 108
76053: PUSH
76054: LD_EXP 108
76058: PPUSH
76059: LD_VAR 0 5
76063: PPUSH
76064: LD_EXP 108
76068: PUSH
76069: LD_VAR 0 5
76073: ARRAY
76074: PUSH
76075: LD_INT 1
76077: PLUS
76078: PPUSH
76079: CALL_OW 1
76083: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
76084: LD_ADDR_EXP 105
76088: PUSH
76089: LD_EXP 105
76093: PPUSH
76094: LD_VAR 0 5
76098: PUSH
76099: LD_EXP 105
76103: PUSH
76104: LD_VAR 0 5
76108: ARRAY
76109: PUSH
76110: LD_INT 1
76112: PLUS
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PPUSH
76118: LD_VAR 0 2
76122: PUSH
76123: LD_VAR 0 4
76127: ARRAY
76128: PUSH
76129: LD_VAR 0 2
76133: PUSH
76134: LD_VAR 0 4
76138: ARRAY
76139: PPUSH
76140: CALL_OW 255
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: PPUSH
76149: CALL 20072 0 3
76153: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
76154: LD_VAR 0 2
76158: PUSH
76159: LD_VAR 0 4
76163: ARRAY
76164: PPUSH
76165: LD_VAR 0 1
76169: PPUSH
76170: CALL_OW 255
76174: PPUSH
76175: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
76179: LD_VAR 0 2
76183: PUSH
76184: LD_VAR 0 4
76188: ARRAY
76189: PPUSH
76190: CALL_OW 141
// end ;
76194: GO 76026
76196: POP
76197: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76198: LD_VAR 0 1
76202: PPUSH
76203: LD_EXP 105
76207: PUSH
76208: LD_VAR 0 5
76212: ARRAY
76213: PUSH
76214: LD_INT 0
76216: PLUS
76217: PPUSH
76218: CALL_OW 505
// end ;
76222: LD_VAR 0 3
76226: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
76227: LD_INT 0
76229: PPUSH
76230: PPUSH
76231: PPUSH
76232: PPUSH
// if not hack in hackTanks then
76233: LD_VAR 0 1
76237: PUSH
76238: LD_EXP 104
76242: IN
76243: NOT
76244: IFFALSE 76248
// exit ;
76246: GO 76488
// index := GetElementIndex ( hackTanks , hack ) ;
76248: LD_ADDR_VAR 0 4
76252: PUSH
76253: LD_EXP 104
76257: PPUSH
76258: LD_VAR 0 1
76262: PPUSH
76263: CALL 19857 0 2
76267: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
76268: LD_ADDR_VAR 0 3
76272: PUSH
76273: DOUBLE
76274: LD_EXP 105
76278: PUSH
76279: LD_VAR 0 4
76283: ARRAY
76284: INC
76285: ST_TO_ADDR
76286: LD_INT 1
76288: PUSH
76289: FOR_DOWNTO
76290: IFFALSE 76462
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
76292: LD_ADDR_VAR 0 5
76296: PUSH
76297: LD_EXP 105
76301: PUSH
76302: LD_VAR 0 4
76306: ARRAY
76307: PUSH
76308: LD_VAR 0 3
76312: ARRAY
76313: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
76314: LD_VAR 0 5
76318: PUSH
76319: LD_INT 1
76321: ARRAY
76322: PPUSH
76323: CALL_OW 302
76327: NOT
76328: PUSH
76329: LD_VAR 0 5
76333: PUSH
76334: LD_INT 1
76336: ARRAY
76337: PPUSH
76338: CALL_OW 255
76342: PUSH
76343: LD_VAR 0 1
76347: PPUSH
76348: CALL_OW 255
76352: NONEQUAL
76353: OR
76354: IFFALSE 76460
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
76356: LD_VAR 0 5
76360: PUSH
76361: LD_INT 1
76363: ARRAY
76364: PPUSH
76365: CALL_OW 305
76369: PUSH
76370: LD_VAR 0 5
76374: PUSH
76375: LD_INT 1
76377: ARRAY
76378: PPUSH
76379: CALL_OW 255
76383: PUSH
76384: LD_VAR 0 1
76388: PPUSH
76389: CALL_OW 255
76393: EQUAL
76394: AND
76395: IFFALSE 76419
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
76397: LD_VAR 0 5
76401: PUSH
76402: LD_INT 1
76404: ARRAY
76405: PPUSH
76406: LD_VAR 0 5
76410: PUSH
76411: LD_INT 2
76413: ARRAY
76414: PPUSH
76415: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
76419: LD_ADDR_EXP 105
76423: PUSH
76424: LD_EXP 105
76428: PPUSH
76429: LD_VAR 0 4
76433: PPUSH
76434: LD_EXP 105
76438: PUSH
76439: LD_VAR 0 4
76443: ARRAY
76444: PPUSH
76445: LD_VAR 0 3
76449: PPUSH
76450: CALL_OW 3
76454: PPUSH
76455: CALL_OW 1
76459: ST_TO_ADDR
// end ; end ;
76460: GO 76289
76462: POP
76463: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
76464: LD_VAR 0 1
76468: PPUSH
76469: LD_EXP 105
76473: PUSH
76474: LD_VAR 0 4
76478: ARRAY
76479: PUSH
76480: LD_INT 0
76482: PLUS
76483: PPUSH
76484: CALL_OW 505
// end ;
76488: LD_VAR 0 2
76492: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
76493: LD_INT 0
76495: PPUSH
76496: PPUSH
76497: PPUSH
76498: PPUSH
// if not hack in hackTanks then
76499: LD_VAR 0 1
76503: PUSH
76504: LD_EXP 104
76508: IN
76509: NOT
76510: IFFALSE 76514
// exit ;
76512: GO 76599
// index := GetElementIndex ( hackTanks , hack ) ;
76514: LD_ADDR_VAR 0 5
76518: PUSH
76519: LD_EXP 104
76523: PPUSH
76524: LD_VAR 0 1
76528: PPUSH
76529: CALL 19857 0 2
76533: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
76534: LD_ADDR_VAR 0 4
76538: PUSH
76539: DOUBLE
76540: LD_INT 1
76542: DEC
76543: ST_TO_ADDR
76544: LD_EXP 105
76548: PUSH
76549: LD_VAR 0 5
76553: ARRAY
76554: PUSH
76555: FOR_TO
76556: IFFALSE 76597
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
76558: LD_EXP 105
76562: PUSH
76563: LD_VAR 0 5
76567: ARRAY
76568: PUSH
76569: LD_VAR 0 4
76573: ARRAY
76574: PUSH
76575: LD_INT 1
76577: ARRAY
76578: PUSH
76579: LD_VAR 0 2
76583: EQUAL
76584: IFFALSE 76595
// KillUnit ( vehicle ) ;
76586: LD_VAR 0 2
76590: PPUSH
76591: CALL_OW 66
76595: GO 76555
76597: POP
76598: POP
// end ;
76599: LD_VAR 0 3
76603: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
76604: LD_EXP 109
76608: NOT
76609: IFFALSE 76644
76611: GO 76613
76613: DISABLE
// begin initMiner := true ;
76614: LD_ADDR_EXP 109
76618: PUSH
76619: LD_INT 1
76621: ST_TO_ADDR
// minersList := [ ] ;
76622: LD_ADDR_EXP 110
76626: PUSH
76627: EMPTY
76628: ST_TO_ADDR
// minerMinesList := [ ] ;
76629: LD_ADDR_EXP 111
76633: PUSH
76634: EMPTY
76635: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
76636: LD_ADDR_EXP 112
76640: PUSH
76641: LD_INT 5
76643: ST_TO_ADDR
// end ;
76644: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
76645: LD_EXP 109
76649: PUSH
76650: LD_INT 34
76652: PUSH
76653: LD_INT 81
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PPUSH
76660: CALL_OW 69
76664: AND
76665: IFFALSE 77126
76667: GO 76669
76669: DISABLE
76670: LD_INT 0
76672: PPUSH
76673: PPUSH
76674: PPUSH
76675: PPUSH
// begin enable ;
76676: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
76677: LD_ADDR_VAR 0 1
76681: PUSH
76682: LD_INT 34
76684: PUSH
76685: LD_INT 81
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PPUSH
76692: CALL_OW 69
76696: PUSH
76697: FOR_IN
76698: IFFALSE 76770
// begin if not i in minersList then
76700: LD_VAR 0 1
76704: PUSH
76705: LD_EXP 110
76709: IN
76710: NOT
76711: IFFALSE 76768
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
76713: LD_ADDR_EXP 110
76717: PUSH
76718: LD_EXP 110
76722: PPUSH
76723: LD_EXP 110
76727: PUSH
76728: LD_INT 1
76730: PLUS
76731: PPUSH
76732: LD_VAR 0 1
76736: PPUSH
76737: CALL_OW 1
76741: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
76742: LD_ADDR_EXP 111
76746: PUSH
76747: LD_EXP 111
76751: PPUSH
76752: LD_EXP 111
76756: PUSH
76757: LD_INT 1
76759: PLUS
76760: PPUSH
76761: EMPTY
76762: PPUSH
76763: CALL_OW 1
76767: ST_TO_ADDR
// end end ;
76768: GO 76697
76770: POP
76771: POP
// for i := minerMinesList downto 1 do
76772: LD_ADDR_VAR 0 1
76776: PUSH
76777: DOUBLE
76778: LD_EXP 111
76782: INC
76783: ST_TO_ADDR
76784: LD_INT 1
76786: PUSH
76787: FOR_DOWNTO
76788: IFFALSE 77124
// begin if IsLive ( minersList [ i ] ) then
76790: LD_EXP 110
76794: PUSH
76795: LD_VAR 0 1
76799: ARRAY
76800: PPUSH
76801: CALL_OW 300
76805: IFFALSE 76833
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
76807: LD_EXP 110
76811: PUSH
76812: LD_VAR 0 1
76816: ARRAY
76817: PPUSH
76818: LD_EXP 111
76822: PUSH
76823: LD_VAR 0 1
76827: ARRAY
76828: PPUSH
76829: CALL_OW 505
// if not minerMinesList [ i ] then
76833: LD_EXP 111
76837: PUSH
76838: LD_VAR 0 1
76842: ARRAY
76843: NOT
76844: IFFALSE 76848
// continue ;
76846: GO 76787
// for j := minerMinesList [ i ] downto 1 do
76848: LD_ADDR_VAR 0 2
76852: PUSH
76853: DOUBLE
76854: LD_EXP 111
76858: PUSH
76859: LD_VAR 0 1
76863: ARRAY
76864: INC
76865: ST_TO_ADDR
76866: LD_INT 1
76868: PUSH
76869: FOR_DOWNTO
76870: IFFALSE 77120
// begin side := GetSide ( minersList [ i ] ) ;
76872: LD_ADDR_VAR 0 3
76876: PUSH
76877: LD_EXP 110
76881: PUSH
76882: LD_VAR 0 1
76886: ARRAY
76887: PPUSH
76888: CALL_OW 255
76892: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
76893: LD_ADDR_VAR 0 4
76897: PUSH
76898: LD_EXP 111
76902: PUSH
76903: LD_VAR 0 1
76907: ARRAY
76908: PUSH
76909: LD_VAR 0 2
76913: ARRAY
76914: PUSH
76915: LD_INT 1
76917: ARRAY
76918: PPUSH
76919: LD_EXP 111
76923: PUSH
76924: LD_VAR 0 1
76928: ARRAY
76929: PUSH
76930: LD_VAR 0 2
76934: ARRAY
76935: PUSH
76936: LD_INT 2
76938: ARRAY
76939: PPUSH
76940: CALL_OW 428
76944: ST_TO_ADDR
// if not tmp then
76945: LD_VAR 0 4
76949: NOT
76950: IFFALSE 76954
// continue ;
76952: GO 76869
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
76954: LD_VAR 0 4
76958: PUSH
76959: LD_INT 81
76961: PUSH
76962: LD_VAR 0 3
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PPUSH
76971: CALL_OW 69
76975: IN
76976: PUSH
76977: LD_EXP 111
76981: PUSH
76982: LD_VAR 0 1
76986: ARRAY
76987: PUSH
76988: LD_VAR 0 2
76992: ARRAY
76993: PUSH
76994: LD_INT 1
76996: ARRAY
76997: PPUSH
76998: LD_EXP 111
77002: PUSH
77003: LD_VAR 0 1
77007: ARRAY
77008: PUSH
77009: LD_VAR 0 2
77013: ARRAY
77014: PUSH
77015: LD_INT 2
77017: ARRAY
77018: PPUSH
77019: CALL_OW 458
77023: AND
77024: IFFALSE 77118
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
77026: LD_EXP 111
77030: PUSH
77031: LD_VAR 0 1
77035: ARRAY
77036: PUSH
77037: LD_VAR 0 2
77041: ARRAY
77042: PUSH
77043: LD_INT 1
77045: ARRAY
77046: PPUSH
77047: LD_EXP 111
77051: PUSH
77052: LD_VAR 0 1
77056: ARRAY
77057: PUSH
77058: LD_VAR 0 2
77062: ARRAY
77063: PUSH
77064: LD_INT 2
77066: ARRAY
77067: PPUSH
77068: LD_VAR 0 3
77072: PPUSH
77073: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
77077: LD_ADDR_EXP 111
77081: PUSH
77082: LD_EXP 111
77086: PPUSH
77087: LD_VAR 0 1
77091: PPUSH
77092: LD_EXP 111
77096: PUSH
77097: LD_VAR 0 1
77101: ARRAY
77102: PPUSH
77103: LD_VAR 0 2
77107: PPUSH
77108: CALL_OW 3
77112: PPUSH
77113: CALL_OW 1
77117: ST_TO_ADDR
// end ; end ;
77118: GO 76869
77120: POP
77121: POP
// end ;
77122: GO 76787
77124: POP
77125: POP
// end ;
77126: PPOPN 4
77128: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
77129: LD_INT 0
77131: PPUSH
77132: PPUSH
// result := false ;
77133: LD_ADDR_VAR 0 4
77137: PUSH
77138: LD_INT 0
77140: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
77141: LD_VAR 0 1
77145: PPUSH
77146: CALL_OW 264
77150: PUSH
77151: LD_INT 81
77153: EQUAL
77154: NOT
77155: IFFALSE 77159
// exit ;
77157: GO 77399
// index := GetElementIndex ( minersList , unit ) ;
77159: LD_ADDR_VAR 0 5
77163: PUSH
77164: LD_EXP 110
77168: PPUSH
77169: LD_VAR 0 1
77173: PPUSH
77174: CALL 19857 0 2
77178: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
77179: LD_EXP 111
77183: PUSH
77184: LD_VAR 0 5
77188: ARRAY
77189: PUSH
77190: LD_EXP 112
77194: GREATEREQUAL
77195: IFFALSE 77199
// exit ;
77197: GO 77399
// ComMoveXY ( unit , x , y ) ;
77199: LD_VAR 0 1
77203: PPUSH
77204: LD_VAR 0 2
77208: PPUSH
77209: LD_VAR 0 3
77213: PPUSH
77214: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
77218: LD_INT 35
77220: PPUSH
77221: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
77225: LD_VAR 0 1
77229: PPUSH
77230: LD_VAR 0 2
77234: PPUSH
77235: LD_VAR 0 3
77239: PPUSH
77240: CALL 51598 0 3
77244: NOT
77245: PUSH
77246: LD_VAR 0 1
77250: PPUSH
77251: CALL_OW 314
77255: AND
77256: IFFALSE 77260
// exit ;
77258: GO 77399
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
77260: LD_VAR 0 2
77264: PPUSH
77265: LD_VAR 0 3
77269: PPUSH
77270: CALL_OW 428
77274: PUSH
77275: LD_VAR 0 1
77279: EQUAL
77280: PUSH
77281: LD_VAR 0 1
77285: PPUSH
77286: CALL_OW 314
77290: NOT
77291: AND
77292: IFFALSE 77218
// PlaySoundXY ( x , y , PlantMine ) ;
77294: LD_VAR 0 2
77298: PPUSH
77299: LD_VAR 0 3
77303: PPUSH
77304: LD_STRING PlantMine
77306: PPUSH
77307: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
77311: LD_VAR 0 2
77315: PPUSH
77316: LD_VAR 0 3
77320: PPUSH
77321: LD_VAR 0 1
77325: PPUSH
77326: CALL_OW 255
77330: PPUSH
77331: LD_INT 0
77333: PPUSH
77334: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
77338: LD_ADDR_EXP 111
77342: PUSH
77343: LD_EXP 111
77347: PPUSH
77348: LD_VAR 0 5
77352: PUSH
77353: LD_EXP 111
77357: PUSH
77358: LD_VAR 0 5
77362: ARRAY
77363: PUSH
77364: LD_INT 1
77366: PLUS
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PPUSH
77372: LD_VAR 0 2
77376: PUSH
77377: LD_VAR 0 3
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: PPUSH
77386: CALL 20072 0 3
77390: ST_TO_ADDR
// result := true ;
77391: LD_ADDR_VAR 0 4
77395: PUSH
77396: LD_INT 1
77398: ST_TO_ADDR
// end ;
77399: LD_VAR 0 4
77403: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
77404: LD_INT 0
77406: PPUSH
77407: PPUSH
77408: PPUSH
// if not unit in minersList then
77409: LD_VAR 0 1
77413: PUSH
77414: LD_EXP 110
77418: IN
77419: NOT
77420: IFFALSE 77424
// exit ;
77422: GO 77816
// index := GetElementIndex ( minersList , unit ) ;
77424: LD_ADDR_VAR 0 6
77428: PUSH
77429: LD_EXP 110
77433: PPUSH
77434: LD_VAR 0 1
77438: PPUSH
77439: CALL 19857 0 2
77443: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
77444: LD_ADDR_VAR 0 5
77448: PUSH
77449: DOUBLE
77450: LD_EXP 111
77454: PUSH
77455: LD_VAR 0 6
77459: ARRAY
77460: INC
77461: ST_TO_ADDR
77462: LD_INT 1
77464: PUSH
77465: FOR_DOWNTO
77466: IFFALSE 77627
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
77468: LD_EXP 111
77472: PUSH
77473: LD_VAR 0 6
77477: ARRAY
77478: PUSH
77479: LD_VAR 0 5
77483: ARRAY
77484: PUSH
77485: LD_INT 1
77487: ARRAY
77488: PUSH
77489: LD_VAR 0 2
77493: EQUAL
77494: PUSH
77495: LD_EXP 111
77499: PUSH
77500: LD_VAR 0 6
77504: ARRAY
77505: PUSH
77506: LD_VAR 0 5
77510: ARRAY
77511: PUSH
77512: LD_INT 2
77514: ARRAY
77515: PUSH
77516: LD_VAR 0 3
77520: EQUAL
77521: AND
77522: IFFALSE 77625
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77524: LD_EXP 111
77528: PUSH
77529: LD_VAR 0 6
77533: ARRAY
77534: PUSH
77535: LD_VAR 0 5
77539: ARRAY
77540: PUSH
77541: LD_INT 1
77543: ARRAY
77544: PPUSH
77545: LD_EXP 111
77549: PUSH
77550: LD_VAR 0 6
77554: ARRAY
77555: PUSH
77556: LD_VAR 0 5
77560: ARRAY
77561: PUSH
77562: LD_INT 2
77564: ARRAY
77565: PPUSH
77566: LD_VAR 0 1
77570: PPUSH
77571: CALL_OW 255
77575: PPUSH
77576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77580: LD_ADDR_EXP 111
77584: PUSH
77585: LD_EXP 111
77589: PPUSH
77590: LD_VAR 0 6
77594: PPUSH
77595: LD_EXP 111
77599: PUSH
77600: LD_VAR 0 6
77604: ARRAY
77605: PPUSH
77606: LD_VAR 0 5
77610: PPUSH
77611: CALL_OW 3
77615: PPUSH
77616: CALL_OW 1
77620: ST_TO_ADDR
// exit ;
77621: POP
77622: POP
77623: GO 77816
// end ; end ;
77625: GO 77465
77627: POP
77628: POP
// for i := minerMinesList [ index ] downto 1 do
77629: LD_ADDR_VAR 0 5
77633: PUSH
77634: DOUBLE
77635: LD_EXP 111
77639: PUSH
77640: LD_VAR 0 6
77644: ARRAY
77645: INC
77646: ST_TO_ADDR
77647: LD_INT 1
77649: PUSH
77650: FOR_DOWNTO
77651: IFFALSE 77814
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
77653: LD_EXP 111
77657: PUSH
77658: LD_VAR 0 6
77662: ARRAY
77663: PUSH
77664: LD_VAR 0 5
77668: ARRAY
77669: PUSH
77670: LD_INT 1
77672: ARRAY
77673: PPUSH
77674: LD_EXP 111
77678: PUSH
77679: LD_VAR 0 6
77683: ARRAY
77684: PUSH
77685: LD_VAR 0 5
77689: ARRAY
77690: PUSH
77691: LD_INT 2
77693: ARRAY
77694: PPUSH
77695: LD_VAR 0 2
77699: PPUSH
77700: LD_VAR 0 3
77704: PPUSH
77705: CALL_OW 298
77709: PUSH
77710: LD_INT 6
77712: LESS
77713: IFFALSE 77812
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
77715: LD_EXP 111
77719: PUSH
77720: LD_VAR 0 6
77724: ARRAY
77725: PUSH
77726: LD_VAR 0 5
77730: ARRAY
77731: PUSH
77732: LD_INT 1
77734: ARRAY
77735: PPUSH
77736: LD_EXP 111
77740: PUSH
77741: LD_VAR 0 6
77745: ARRAY
77746: PUSH
77747: LD_VAR 0 5
77751: ARRAY
77752: PUSH
77753: LD_INT 2
77755: ARRAY
77756: PPUSH
77757: LD_VAR 0 1
77761: PPUSH
77762: CALL_OW 255
77766: PPUSH
77767: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
77771: LD_ADDR_EXP 111
77775: PUSH
77776: LD_EXP 111
77780: PPUSH
77781: LD_VAR 0 6
77785: PPUSH
77786: LD_EXP 111
77790: PUSH
77791: LD_VAR 0 6
77795: ARRAY
77796: PPUSH
77797: LD_VAR 0 5
77801: PPUSH
77802: CALL_OW 3
77806: PPUSH
77807: CALL_OW 1
77811: ST_TO_ADDR
// end ; end ;
77812: GO 77650
77814: POP
77815: POP
// end ;
77816: LD_VAR 0 4
77820: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
77821: LD_INT 0
77823: PPUSH
77824: PPUSH
77825: PPUSH
77826: PPUSH
77827: PPUSH
77828: PPUSH
77829: PPUSH
77830: PPUSH
77831: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
77832: LD_VAR 0 1
77836: PPUSH
77837: CALL_OW 264
77841: PUSH
77842: LD_INT 81
77844: EQUAL
77845: NOT
77846: PUSH
77847: LD_VAR 0 1
77851: PUSH
77852: LD_EXP 110
77856: IN
77857: NOT
77858: OR
77859: IFFALSE 77863
// exit ;
77861: GO 78185
// index := GetElementIndex ( minersList , unit ) ;
77863: LD_ADDR_VAR 0 6
77867: PUSH
77868: LD_EXP 110
77872: PPUSH
77873: LD_VAR 0 1
77877: PPUSH
77878: CALL 19857 0 2
77882: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
77883: LD_ADDR_VAR 0 8
77887: PUSH
77888: LD_EXP 112
77892: PUSH
77893: LD_EXP 111
77897: PUSH
77898: LD_VAR 0 6
77902: ARRAY
77903: MINUS
77904: ST_TO_ADDR
// if not minesFreeAmount then
77905: LD_VAR 0 8
77909: NOT
77910: IFFALSE 77914
// exit ;
77912: GO 78185
// tmp := [ ] ;
77914: LD_ADDR_VAR 0 7
77918: PUSH
77919: EMPTY
77920: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
77921: LD_ADDR_VAR 0 5
77925: PUSH
77926: DOUBLE
77927: LD_INT 1
77929: DEC
77930: ST_TO_ADDR
77931: LD_VAR 0 8
77935: PUSH
77936: FOR_TO
77937: IFFALSE 78132
// begin _d := rand ( 0 , 5 ) ;
77939: LD_ADDR_VAR 0 11
77943: PUSH
77944: LD_INT 0
77946: PPUSH
77947: LD_INT 5
77949: PPUSH
77950: CALL_OW 12
77954: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
77955: LD_ADDR_VAR 0 12
77959: PUSH
77960: LD_INT 2
77962: PPUSH
77963: LD_INT 6
77965: PPUSH
77966: CALL_OW 12
77970: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
77971: LD_ADDR_VAR 0 9
77975: PUSH
77976: LD_VAR 0 2
77980: PPUSH
77981: LD_VAR 0 11
77985: PPUSH
77986: LD_VAR 0 12
77990: PPUSH
77991: CALL_OW 272
77995: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
77996: LD_ADDR_VAR 0 10
78000: PUSH
78001: LD_VAR 0 3
78005: PPUSH
78006: LD_VAR 0 11
78010: PPUSH
78011: LD_VAR 0 12
78015: PPUSH
78016: CALL_OW 273
78020: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
78021: LD_VAR 0 9
78025: PPUSH
78026: LD_VAR 0 10
78030: PPUSH
78031: CALL_OW 488
78035: PUSH
78036: LD_VAR 0 9
78040: PUSH
78041: LD_VAR 0 10
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: LD_VAR 0 7
78054: IN
78055: NOT
78056: AND
78057: PUSH
78058: LD_VAR 0 9
78062: PPUSH
78063: LD_VAR 0 10
78067: PPUSH
78068: CALL_OW 458
78072: NOT
78073: AND
78074: IFFALSE 78116
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
78076: LD_ADDR_VAR 0 7
78080: PUSH
78081: LD_VAR 0 7
78085: PPUSH
78086: LD_VAR 0 7
78090: PUSH
78091: LD_INT 1
78093: PLUS
78094: PPUSH
78095: LD_VAR 0 9
78099: PUSH
78100: LD_VAR 0 10
78104: PUSH
78105: EMPTY
78106: LIST
78107: LIST
78108: PPUSH
78109: CALL_OW 1
78113: ST_TO_ADDR
78114: GO 78130
// i := i - 1 ;
78116: LD_ADDR_VAR 0 5
78120: PUSH
78121: LD_VAR 0 5
78125: PUSH
78126: LD_INT 1
78128: MINUS
78129: ST_TO_ADDR
// end ;
78130: GO 77936
78132: POP
78133: POP
// for i in tmp do
78134: LD_ADDR_VAR 0 5
78138: PUSH
78139: LD_VAR 0 7
78143: PUSH
78144: FOR_IN
78145: IFFALSE 78183
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
78147: LD_VAR 0 1
78151: PPUSH
78152: LD_VAR 0 5
78156: PUSH
78157: LD_INT 1
78159: ARRAY
78160: PPUSH
78161: LD_VAR 0 5
78165: PUSH
78166: LD_INT 2
78168: ARRAY
78169: PPUSH
78170: CALL 77129 0 3
78174: NOT
78175: IFFALSE 78181
// exit ;
78177: POP
78178: POP
78179: GO 78185
78181: GO 78144
78183: POP
78184: POP
// end ;
78185: LD_VAR 0 4
78189: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
78190: LD_INT 0
78192: PPUSH
78193: PPUSH
78194: PPUSH
78195: PPUSH
78196: PPUSH
78197: PPUSH
78198: PPUSH
// if not GetClass ( unit ) = class_sniper then
78199: LD_VAR 0 1
78203: PPUSH
78204: CALL_OW 257
78208: PUSH
78209: LD_INT 5
78211: EQUAL
78212: NOT
78213: IFFALSE 78217
// exit ;
78215: GO 78605
// dist := 8 ;
78217: LD_ADDR_VAR 0 5
78221: PUSH
78222: LD_INT 8
78224: ST_TO_ADDR
// viewRange := 12 ;
78225: LD_ADDR_VAR 0 7
78229: PUSH
78230: LD_INT 12
78232: ST_TO_ADDR
// side := GetSide ( unit ) ;
78233: LD_ADDR_VAR 0 6
78237: PUSH
78238: LD_VAR 0 1
78242: PPUSH
78243: CALL_OW 255
78247: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
78248: LD_INT 61
78250: PPUSH
78251: LD_VAR 0 6
78255: PPUSH
78256: CALL_OW 321
78260: PUSH
78261: LD_INT 2
78263: EQUAL
78264: IFFALSE 78274
// viewRange := 16 ;
78266: LD_ADDR_VAR 0 7
78270: PUSH
78271: LD_INT 16
78273: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
78274: LD_VAR 0 1
78278: PPUSH
78279: LD_VAR 0 2
78283: PPUSH
78284: LD_VAR 0 3
78288: PPUSH
78289: CALL_OW 297
78293: PUSH
78294: LD_VAR 0 5
78298: GREATER
78299: IFFALSE 78378
// begin ComMoveXY ( unit , x , y ) ;
78301: LD_VAR 0 1
78305: PPUSH
78306: LD_VAR 0 2
78310: PPUSH
78311: LD_VAR 0 3
78315: PPUSH
78316: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78320: LD_INT 35
78322: PPUSH
78323: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
78327: LD_VAR 0 1
78331: PPUSH
78332: LD_VAR 0 2
78336: PPUSH
78337: LD_VAR 0 3
78341: PPUSH
78342: CALL 51598 0 3
78346: NOT
78347: IFFALSE 78351
// exit ;
78349: GO 78605
// until GetDistUnitXY ( unit , x , y ) < dist ;
78351: LD_VAR 0 1
78355: PPUSH
78356: LD_VAR 0 2
78360: PPUSH
78361: LD_VAR 0 3
78365: PPUSH
78366: CALL_OW 297
78370: PUSH
78371: LD_VAR 0 5
78375: LESS
78376: IFFALSE 78320
// end ; ComTurnXY ( unit , x , y ) ;
78378: LD_VAR 0 1
78382: PPUSH
78383: LD_VAR 0 2
78387: PPUSH
78388: LD_VAR 0 3
78392: PPUSH
78393: CALL_OW 118
// wait ( 5 ) ;
78397: LD_INT 5
78399: PPUSH
78400: CALL_OW 67
// _d := GetDir ( unit ) ;
78404: LD_ADDR_VAR 0 10
78408: PUSH
78409: LD_VAR 0 1
78413: PPUSH
78414: CALL_OW 254
78418: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
78419: LD_ADDR_VAR 0 8
78423: PUSH
78424: LD_VAR 0 1
78428: PPUSH
78429: CALL_OW 250
78433: PPUSH
78434: LD_VAR 0 10
78438: PPUSH
78439: LD_VAR 0 5
78443: PPUSH
78444: CALL_OW 272
78448: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
78449: LD_ADDR_VAR 0 9
78453: PUSH
78454: LD_VAR 0 1
78458: PPUSH
78459: CALL_OW 251
78463: PPUSH
78464: LD_VAR 0 10
78468: PPUSH
78469: LD_VAR 0 5
78473: PPUSH
78474: CALL_OW 273
78478: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78479: LD_VAR 0 8
78483: PPUSH
78484: LD_VAR 0 9
78488: PPUSH
78489: CALL_OW 488
78493: NOT
78494: IFFALSE 78498
// exit ;
78496: GO 78605
// ComAnimCustom ( unit , 1 ) ;
78498: LD_VAR 0 1
78502: PPUSH
78503: LD_INT 1
78505: PPUSH
78506: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
78510: LD_VAR 0 8
78514: PPUSH
78515: LD_VAR 0 9
78519: PPUSH
78520: LD_VAR 0 6
78524: PPUSH
78525: LD_VAR 0 7
78529: PPUSH
78530: CALL_OW 330
// repeat wait ( 1 ) ;
78534: LD_INT 1
78536: PPUSH
78537: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
78541: LD_VAR 0 1
78545: PPUSH
78546: CALL_OW 316
78550: PUSH
78551: LD_VAR 0 1
78555: PPUSH
78556: CALL_OW 314
78560: OR
78561: PUSH
78562: LD_VAR 0 1
78566: PPUSH
78567: CALL_OW 302
78571: NOT
78572: OR
78573: PUSH
78574: LD_VAR 0 1
78578: PPUSH
78579: CALL_OW 301
78583: OR
78584: IFFALSE 78534
// RemoveSeeing ( _x , _y , side ) ;
78586: LD_VAR 0 8
78590: PPUSH
78591: LD_VAR 0 9
78595: PPUSH
78596: LD_VAR 0 6
78600: PPUSH
78601: CALL_OW 331
// end ; end_of_file
78605: LD_VAR 0 4
78609: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78610: LD_VAR 0 1
78614: PPUSH
78615: LD_VAR 0 2
78619: PPUSH
78620: LD_VAR 0 3
78624: PPUSH
78625: LD_VAR 0 4
78629: PPUSH
78630: LD_VAR 0 5
78634: PPUSH
78635: LD_VAR 0 6
78639: PPUSH
78640: CALL 58057 0 6
// end ;
78644: PPOPN 6
78646: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
78647: LD_INT 0
78649: PPUSH
// begin if not units then
78650: LD_VAR 0 1
78654: NOT
78655: IFFALSE 78659
// exit ;
78657: GO 78659
// end ;
78659: PPOPN 7
78661: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78662: CALL 57944 0 0
// end ; end_of_file
78666: PPOPN 1
78668: END
